{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f6b279886d3228d9982ec8e42cbb651", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f86eab3ee139916b139a56c2046e151", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "dff921f9753af71f3b0ef787d0390dd7cd591b56", "commitAfterChange": "a899cd29a75883646450816539797817299ec777", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif (enclosingInstanceType.isCompatibleWith(expectedType)) {", "-\t\t\t\tenclosingInstance.computeConversion(scope, expectedType, enclosingInstanceType);", "-\t\t\t\treturn receiverType;", "-\t\t\t} else if (scope.isBoxingCompatibleWith(enclosingInstanceType, expectedType)) {", "+\t\t\tif (enclosingInstanceType.isCompatibleWith(expectedType) || scope.isBoxingCompatibleWith(enclosingInstanceType, expectedType)) {", "-\t\t\t} else \tif (!enclosingInstanceType.isCompatibleWith(targetEnclosing)) {", "+\t\t\t} else if (!enclosingInstanceType.isCompatibleWith(targetEnclosing) && !scope.isBoxingCompatibleWith(enclosingInstanceType, targetEnclosing)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6f6e4f28e71160d39c02bdc1713892d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchSet.java", "commitBeforeChange": "ba5344094af5a10113083e490b48587602f0a697", "commitAfterChange": "beff668f816be4f418684ef69c8c154f61931abe", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void reportMatching(TypeDeclaration type, IJavaElement parent) throws CoreException", "signatureAfterChange": " public void reportMatching(TypeDeclaration type, IJavaElement parent) throws CoreException", "diff": ["-\tif (this.locator.hierarchyResolver != null ", "-\t\t\t&& type.binding != null", "-\t\t\t&& !this.locator.hierarchyResolver.subOrSuperOfFocus(type.binding)) {", "-\t\treturn;", "-\t}", "+\tboolean typeInHierarchy = ", "+\t\tthis.locator.hierarchyResolver == null ", "+\t\t\t|| type.binding == null", "+\t\t\t|| this.locator.hierarchyResolver.subOrSuperOfFocus(type.binding);", "-\tif (fields != null) {", "+\tif (fields != null && typeInHierarchy) {", "-\tif (methods != null) {", "+\tif (methods != null && typeInHierarchy) {", "-\t\t\tif ((level = (Integer)this.matchingNodes.remove(memberType)) != null) {", "-\t\t\t\tif ((this.matchContainer & SearchPattern.CLASS) != 0) {", "+\t\t\tif ((level = (Integer)this.matchingNodes.remove(memberType)) != null", "+\t\t\t\t&& typeInHierarchy", "+\t\t\t\t&& (this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1c1a5c908aa6a0d2cf5a75f781dc910", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "4290d9d156b3fffdf4fa47faed755763dff62df4", "commitAfterChange": "ec3d2b8d7bc5e4b4b2d91a6a1cfd252341798462", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " private void computeInheritedMethods()", "signatureAfterChange": " private void computeInheritedMethods()", "diff": ["-\t\t\t\t\t\t\tif (method.returnType == existingMethods[i].returnType) {", "-\t\t\t\t\t\t\t\tif (method.areParametersEqual(existingMethods[i])) {", "-\t\t\t\t\t\t\t\t\tif (method.isDefault() && method.isAbstract() && method.declaringClass.fPackage != type.fPackage)", "-\t\t\t\t\t\t\t\t\t\tcheckDefaultAbstractMethod(method);", "-\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (method.returnType == existingMethods[i].returnType", "+\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(existingMethods[i])) {", "+\t\t\t\t\t\t\t\tif (method.isDefault() && method.isAbstract() && method.declaringClass.fPackage != type.fPackage)", "+\t\t\t\t\t\t\t\t\tcheckPackagePrivateAbstractMethod(method);", "+\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\tif (method.returnType == nonVisibleDefaultMethods[i].returnType)", "-\t\t\t\t\t\t\t\tif (CharOperation.equals(method.selector, nonVisibleDefaultMethods[i].selector))", "-\t\t\t\t\t\t\t\t\tif (method.areParametersEqual(nonVisibleDefaultMethods[i]))", "-\t\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\tif (method.returnType == nonVisibleDefaultMethods[i].returnType", "+\t\t\t\t\t\t\t\t\t&& CharOperation.equals(method.selector, nonVisibleDefaultMethods[i].selector)", "+\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(nonVisibleDefaultMethods[i])) ", "+\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\t\tif (method.returnType == current[i].returnType) {", "-\t\t\t\t\t\t\t\t\tif (method.areParametersEqual(current[i])) {", "-\t\t\t\t\t\t\t\t\t\tthis.problemReporter().overridesPackageDefaultMethod(current[i], method);", "-\t\t\t\t\t\t\t\t\t\tbreak foundMatch;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (method.returnType == current[i].returnType", "+\t\t\t\t\t\t\t\t\t\t&& method.areParametersEqual(current[i])) {", "+\t\t\t\t\t\t\t\t\tthis.problemReporter().overridesPackageDefaultMethod(current[i], method);", "+\t\t\t\t\t\t\t\t\tbreak foundMatch;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1fcb1cd6625a2ed6e99a64ac2178ab2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchSet.java", "commitBeforeChange": "15070dfb720141f260eff9f86b3742c51648d5f0", "commitAfterChange": "f850238096d0e6e37fbf42c72e3eea2d357ec53f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void reportMatching(TypeDeclaration type, IJavaElement parent) throws CoreException", "signatureAfterChange": " public void reportMatching(TypeDeclaration type, IJavaElement parent) throws CoreException", "diff": ["-\t\t\tif ((level = (Integer)this.matchingNodes.remove(field)) != null) {", "-\t\t\t\tif ((this.matchContainer & SearchPattern.CLASS) != 0) {", "+\t\t\tif ((level = (Integer)this.matchingNodes.remove(field)) != null", "+\t\t\t\t&& typeInHierarchy", "+\t\t\t\t&& (this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\t}", "-\t\t\tthis.reportMatching(field, enclosingElement, type);", "+\t\t\tthis.reportMatching(field, enclosingElement, type, typeInHierarchy);", "-\t\t\tif ((level = (Integer)this.matchingNodes.remove(method)) != null) {", "-\t\t\t\tif ((this.matchContainer & SearchPattern.CLASS) != 0) {", "+\t\t\tif ((level = (Integer)this.matchingNodes.remove(method)) != null", "+\t\t\t\t&& typeInHierarchy", "+\t\t\t\t&& (this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\t}", "-\t\t\tthis.reportMatching(method, enclosingElement);", "+\t\t\tthis.reportMatching(method, enclosingElement, typeInHierarchy);"]}], "num": 27911}
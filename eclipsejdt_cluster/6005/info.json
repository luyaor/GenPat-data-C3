{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4dadd66ecc1c8642fe36453c96def557", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da387b930af151754c7c15cddf7c046e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "ba623d582045575b43eee2b86be165ff58225746", "commitAfterChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " boolean areMethodsEqual(MethodBinding one, MethodBinding substituteTwo)", "signatureAfterChange": " boolean areMethodsEqual(MethodBinding one, MethodBinding substituteTwo)", "diff": ["-\tTypeBinding[] oneParams = one.parameters;", "-\tTypeBinding[] twoParams = substituteTwo.parameters;", "-\tboolean checkParameters = false;", "-\tif (oneParams != twoParams) {", "-\t\tint length = oneParams.length;", "-\t\tif (length != twoParams.length) return false; // no match", "+\treturn areParametersEqual(one, substituteTwo) && !doTypeVariablesClash(one, substituteTwo);", "+}", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tif (oneParams[i] != twoParams[i]) {", "-\t\t\t\tif (!areTypesEqual(oneParams[i], twoParams[i])) {", "-\t\t\t\t\tif (one.areParameterErasuresEqual(substituteTwo)) // at least one parameter may cause a name clash", "-\t\t\t\t\t\tdetectNameClash(one, substituteTwo, true);", "-\t\t\t\t\treturn false; // no match but needed to check for a name clash", "-\t\t\t\t}", "-\t\t\t\tcheckParameters = true;", "-\t\t\t}", "-\treturn !detectNameClash(one, substituteTwo, checkParameters);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2cf886af8d34df7e70a8d172d215548", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "ba623d582045575b43eee2b86be165ff58225746", "commitAfterChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 14, "signatureBeforeChange": " boolean detectNameClash(MethodBinding one, MethodBinding substituteTwo, boolean checkParameters)", "signatureAfterChange": " boolean detectNameClash(MethodBinding current, MethodBinding inherited)", "diff": ["-boolean detectNameClash(MethodBinding one, MethodBinding substituteTwo, boolean checkParameters) {", "-\tif (doTypeVariablesClash(one, substituteTwo) || (checkParameters && doParametersClash(one, substituteTwo))) {", "-\t\tif (this.type == one.declaringClass)", "-\t\t\tproblemReporter(one).methodNameClash(one, substituteTwo);", "-\t\telse", "-\t\t\tproblemReporter().inheritedMethodsHaveNameClash(this.type, one, substituteTwo);", "+boolean detectNameClash(MethodBinding current, MethodBinding inherited) {", "+\tMethodBinding original = inherited.original(); // can be the same as inherited", "+\tif (!current.areParameterErasuresEqual(original)) return false;", "+\tif (doTypeVariablesClash(current, inherited) || doParametersClash(current, original)) {", "+\t\tproblemReporter(current).methodNameClash(current, original);", "+\t\treturn true;", "+\t}", "+\treturn false;", "+}"]}], "num": 6005}
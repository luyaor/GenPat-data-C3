{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55632372b553f66202ad46172e6ab4d1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "139c52c8dee2945cc2b3f3afb7ce2bca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java", "commitBeforeChange": "67744c35fb096b073b6eb207529145544c47d6b6", "commitAfterChange": "a69ec5abfba2adcf10fe50b7c7be7bc087bd47c7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic static CompilationUnitDeclaration process( \t\tICompilationUnit unitElement,  \t\tIProblemRequestor problemRequestor, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": "  \tpublic static CompilationUnitDeclaration process( \t\tICompilationUnit unitElement,  \t\tIProblemRequestor problemRequestor, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "diff": ["-\t\treturn process(null, unitElement, problemRequestor, new DefaultProblemFactory(), monitor);", "+\t\treturn process(null/*no CompilationUnitDeclaration*/, unitElement, null/*use default Parser*/,problemRequestor, new DefaultProblemFactory(), monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "661f61b117623ff00bf2fa95c69efab9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5d2cd7f1076b45eee90e6733e80765abd1df3d6a", "commitAfterChange": "14e86a8141996732826e41cf3c8dd392bb1fd5ba", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " \tpublic boolean hasClasspathCycle(IClasspathEntry[] preferredClasspath)", "signatureAfterChange": " \tpublic boolean hasClasspathCycle(IClasspathEntry[] preferredClasspath)", "diff": ["-\tpublic boolean hasClasspathCycle(IClasspathEntry[] preferredClasspath) {", "+\tpublic boolean hasClasspathCycle(IClasspathEntry[] preferredClasspath) {// TODO could reuse map and remove first arg", "-\t\tupdateCycleParticipants(preferredClasspath, new ArrayList(2), cycleParticipants, ResourcesPlugin.getWorkspace().getRoot(), new HashSet(2));", "+\t\tupdateCycleParticipants(preferredClasspath, new ArrayList(2), cycleParticipants, ResourcesPlugin.getWorkspace().getRoot(), new HashSet(2), null);"]}], "num": 1967}
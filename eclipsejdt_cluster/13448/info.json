{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "531e82c26e7da69139af4073877b1811", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b753746de12654f17405eb93356938d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "6aa15157c4a89778b30fbac85a8e1c76029da034", "commitAfterChange": "d40b3c41bcebac07f42f1f11c9b679087cfd1515", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " protected void checkNullConstraints(Scope scope, TypeBinding[] variables, int rank)", "signatureAfterChange": " protected void checkNullConstraints(Scope scope, TypeBinding[] variables, int rank)", "diff": ["+\tif (this.resolvedType.leafComponentType().isBaseType() && hasNullTypeAnnotation())", "+\t\tscope.problemReporter().illegalAnnotationForBaseType(this, this.annotations[0], this.resolvedType.tagBits & TagBits.AnnotationNullMASK);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dc0b74ec8f9c19d878d916f463bd5c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "546f2199bfab41bcca8f304a76f67bc6a06cc750", "commitAfterChange": "417ab6333031a259fd217d0086fde6427dace471", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tif (this.superTypeBinding.erasure().id == T_JavaLangEnum) {", "+\t\t\tscope.problemReporter().cannotExtendEnum(this.anonymousType.binding, this.type, this.superTypeBinding);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b48aee596a9f6022d0b254f3ac7b5fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "9c1e2e3de87cdd04985b57918d50a3f3fc191472", "commitAfterChange": "de85d73a10e0280a45c9d9fcbbd2b35068e06127", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["+\t\t} // TODO (stephan): else? (can that happen?)", "+", "+\t\tif (!argumentsTypeElided && blockScope.compilerOptions().isAnnotationBasedNullAnalysisEnabled) {", "+\t\t\tAbstractMethodDeclaration.createArgumentBindings(this.arguments, this.binding, this.scope);", "+\t\t\tvalidateNullAnnotations();", "+\t\t\t// no application of null-ness default, hence also no warning regarding redundant null annotation", "+\t\t\tmergeParameterNullAnnotations(blockScope);"]}], "num": 13448}
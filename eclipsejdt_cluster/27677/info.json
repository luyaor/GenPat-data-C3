{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e4efc7dc87f7197d01939865ed230de7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3234c2bbcfc884b8d50cb251ac587c95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "d90d9bd95abe34cc0cfe3b06356eb1c26ea7d5bf", "commitAfterChange": "a1fcf7304168cfe820abddf9b4c29fb602e9a7cd", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tprivate void findLocalMethodDeclarations(\r \t\tchar[] methodName,\r \t\tMethodBinding[] methods,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tTypeBinding receiverType)", "signatureAfterChange": "\r \tprivate void findLocalMethodDeclarations(\r \t\tchar[] methodName,\r \t\tMethodBinding[] methods,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tTypeBinding receiverType)", "diff": ["-\t\t\t// default parameters name\r", "-\t\t\tif(parameterNames == null) {\r", "-\t\t\t\tparameterNames = new char[length][];\r", "-\t\t\t\tfor (int i = 0; i < length; i++) {\r", "-\t\t\t\t\tparameterNames[i] = CharOperation.concat(ARG, String.valueOf(i).toCharArray());\r", "-\t\t\t\t}\r", "-\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc1b54a9e2d892703f06250610568781", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "76b281521e0c88d7bc9fbeb2c963d7e6c8914ee3", "commitAfterChange": "e4873234bb7d47f3f866e994a2466da3b0ee585f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "signatureAfterChange": " \tpublic static void resolvePolyExpressionArguments(Invocation invocation, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "diff": ["-\t\t\t\t\t\t\tTypeBinding[] innerArgumentTypes = null;", "-\t\t\t\t\t\t\tif (innerArguments != null) {", "-\t\t\t\t\t\t\t\tinnerArgumentTypes = new TypeBinding[innerArguments.length];", "-\t\t\t\t\t\t\t\tfor (int j = 0; j < innerArguments.length; j++)", "-\t\t\t\t\t\t\t\t\tinnerArgumentTypes[i] = innerArguments[i].resolvedType;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tMethodBinding improvedBinding = innerContext.inferInvocationType(innerInvocation, innerArgumentTypes, parameterizedMethod);", "+\t\t\t\t\t\t\tMethodBinding improvedBinding = innerContext.inferInvocationType(innerInvocation, parameterizedMethod);"]}], "num": 27677}
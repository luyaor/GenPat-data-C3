{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1a2ade34df36557a569848ffef0698c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac7428ee21887b2c67b5d815f0a29b21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "7df061f9da0ab96be87e5851cb157a28c5f5bca0", "commitAfterChange": "5138a70372af4817aefdd3da44dfadf7f7557bf3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " boolean areReturnTypesCompatible(MethodBinding one, MethodBinding two)", "signatureAfterChange": " boolean areReturnTypesCompatible(MethodBinding one, MethodBinding two)", "diff": ["-\tif (one.returnType == two.returnType) return true;", "-", "-\tif (areTypesEqual(one.returnType, two.returnType)) return true;", "-", "-\t// when sourceLevel < 1.5 but compliance >= 1.5, allow return types in binaries to be compatible instead of just equal", "-\tif (this.allowCompatibleReturnTypes &&", "-\t\t\tone.declaringClass instanceof BinaryTypeBinding &&", "-\t\t\ttwo.declaringClass instanceof BinaryTypeBinding) {", "-\t\treturn areReturnTypesCompatible0(one, two);", "-\t}", "-\treturn false;", "+\treturn areReturnTypesCompatible(one, two, this.type.scope.environment());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f922bf6a143102cdb993665dab51430b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "2f619c39de615cc5bdcbd828d00cede34184e047", "commitAfterChange": "7afd83b657aa4801d2456fea274c741b5880bf25", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\tswitch(nullStatus) {", "-\t\t\tcase FlowInfo.NULL :", "-\t\t\t\tflowInfo.markAsDefinitelyNull(this.binding);", "-\t\t\t\tbreak;", "-\t\t\tcase FlowInfo.NON_NULL :", "-\t\t\t\tflowInfo.markAsDefinitelyNonNull(this.binding);", "-\t\t\t\tbreak;", "-\t\t\tcase FlowInfo.POTENTIALLY_NULL :", "-\t\t\t\tflowInfo.markAsPotentiallyNull(this.binding);", "-\t\t\t\tbreak;", "-\t\t\tdefault:", "-\t\t\t\tflowInfo.markAsDefinitelyUnknown(this.binding);", "-\t\t}", "+\t\tflowInfo.markNullStatus(this.binding, nullStatus);"]}], "num": 45314}
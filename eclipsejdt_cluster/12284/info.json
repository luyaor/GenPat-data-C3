{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b1e07853c7f5d2c77f1c6b76db6a652", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56fb8f66a9d7a880fc41e7a41519d8cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "a347aeb50884e3df023ac18ad807d42fd445aa56", "commitAfterChange": "a435d5911504d8f414ca9e9a9003b7f07711d2a4", "methodNumberBeforeChange": 227, "methodNumberAfterChange": 227, "signatureBeforeChange": " \tprotected void setUpProjectCompliance(IJavaProject javaProject, String compliance, boolean useFullJCL) throws JavaModelException, IOException", "signatureAfterChange": " \tprotected void setUpProjectCompliance(IJavaProject javaProject, String compliance, boolean useFullJCL) throws JavaModelException, IOException", "diff": ["-\t\tString jclLibString;", "-\t\tif (compliance.charAt(2) > '7') {", "-\t\t\tjclLibString = \"JCL_LIB\";", "-\t\t\tnewJclLibString = \"JCL18_LIB\";", "-\t\t\tnewJclSrcString = \"JCL18_SRC\";", "-\t\t} else if (compliance.charAt(2) > '4') {", "-\t\t\tjclLibString = \"JCL_LIB\";", "-\t\t\tnewJclLibString = \"JCL15_LIB\";", "-\t\t\tnewJclSrcString = \"JCL15_SRC\";", "+\t\tif (useFullJCL) {", "+\t\t\tnewJclLibString = \"JCL18_FULL\";", "+\t\t\tnewJclSrcString = \"JCL18_SRC\"; // Use the same source", "-\t\t\tjclLibString = \"JCL15_LIB\";", "-\t\t\tnewJclLibString = \"JCL_LIB\";", "-\t\t\tnewJclSrcString = \"JCL_SRC\";", "+\t\t\tif (compliance.charAt(2) > '7') {", "+\t\t\t\tnewJclLibString = \"JCL18_LIB\";", "+\t\t\t\tnewJclSrcString = \"JCL18_SRC\";", "+\t\t\t} else if (compliance.charAt(2) > '4') {", "+\t\t\t\tnewJclLibString = \"JCL15_LIB\";", "+\t\t\t\tnewJclSrcString = \"JCL15_SRC\";", "+\t\t\t} else {", "+\t\t\t\tnewJclLibString = \"JCL_LIB\";", "+\t\t\t\tnewJclSrcString = \"JCL_SRC\";", "+\t\t\t}", "-\t\t", "-\t\t// replace JCL_LIB with JCL15_LIB, and JCL_SRC with JCL15_SRC", "-\t\t// At 1.8 compliance, replace JCL15_LIB with JCL18_LIB, JCL15_SRC with JCL18_SRC", "-\t\tIPath jclLib = new Path(jclLibString);", "-\t\tIPath jcl5Lib = new Path(\"JCL15_LIB\");", "-\t\tIPath jcl8Lib = new Path(\"JCL18_LIB\");", "-\t\tboolean compliance18Plus = compliance.charAt(2) > '7';", "+", "-\t\t\tif (useFullJCL) {", "-\t\t\t\tclasspath[i] = JavaCore.newVariableEntry(", "-\t\t\t\t\t\tnew Path(\"JCL18_FULL\"),", "-\t\t\t\t\t\tnew Path(newJclSrcString),", "-\t\t\t\t\t\tentry.getSourceAttachmentRootPath(),", "-\t\t\t\t\t\tentry.getAccessRules(),", "-\t\t\t\t\t\tnew IClasspathAttribute[0],", "-\t\t\t\t\t\tentry.isExported());", "-\t\t\t\tbreak;", "-\t\t\t} else if (path.equals(jclLib) || (compliance18Plus && path.equals(jcl5Lib)) || (!compliance18Plus && path.equals(jcl8Lib))) {", "+\t\t\t// Choose the new JCL path only if the current JCL path is different", "+\t\t\tif (isJCLPath(path) && !path.equals(newJclLibString)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3e7e338cc8350d0d860f90fa0eac3ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/BatchTestUtils.java", "commitBeforeChange": "5c04a73f2f7dbde661f920a53ef287a317d5389f", "commitAfterChange": "bc96e3fe1525ac02787685c40ced108ff079571b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic static String setupProcessorJar(String processorJar, String tmpDir) throws IOException", "signatureAfterChange": " \t \tpublic static String setupProcessorJar(String processorJar, String tmpDir) throws IOException", "diff": ["-", "-\tpublic static String setupProcessorJar(String processorJar, String tmpDir) throws IOException {", "-\t\tString resourceDir = getPluginDirectoryPath();", "-\t\tjava.io.File destinationDir = new java.io.File(tmpDir);", "-\t\tjava.io.File libraryFile =", "-\t\t\tnew java.io.File(tmpDir, processorJar);", "-\t\tif (!destinationDir.exists()) {", "-\t\t\tif (!destinationDir.mkdir()) {", "-\t\t\t\t//mkdir failed", "-\t\t\t\tthrow new IOException(\"Could not create the directory \" + destinationDir);", "-\t\t\t//copy the two files to the JCL directory", "-\t\t\tjava.io.File libraryResource =", "-\t\t\t\tnew java.io.File(resourceDir, processorJar);", "-\t\t\tcopy(libraryResource, libraryFile);", "-\t\t} else {", "-\t\t\t//check that the two files, jclMin.jar and jclMinsrc.zip are present", "-\t\t\t//copy either file that is missing or less recent than the one in workspace", "-\t\t\tjava.io.File libraryResource =", "-\t\t\t\tnew java.io.File(resourceDir, processorJar);", "-\t\t\tif ((libraryFile.lastModified() < libraryResource.lastModified())", "-\t\t\t\t\t|| (libraryFile.length() != libraryResource.length())) {", "-\t\t\t\tcopy(libraryResource, libraryFile);", "-\t\treturn libraryFile.getCanonicalPath();", "+\t", "+\tpublic static String setupProcessorJar(String processorJar, String tmpDir) throws IOException {", "+\t\tFile libDir = new File(getPluginDirectoryPath());", "+\t\tFile libFile = new File(libDir, processorJar);", "+\t\tFile destinationDir = new File(tmpDir);", "+\t\tFile destinationFile = new File(destinationDir, processorJar);", "+\t\tcopyResource(libFile, destinationFile);", "+\t\treturn destinationFile.getCanonicalPath();"]}], "num": 12284}
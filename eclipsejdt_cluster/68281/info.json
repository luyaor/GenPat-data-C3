{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e576cb7a4513f6133db21cdcc463eb8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37ccf806a7598760c9c894b45b0511c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "eb8f4b7b53c3aa43a99b2adcf9c05163aa41f6f6", "commitAfterChange": "d7573375da034a8df526c16250d3442a649a1b32", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " void add(JavaProject javaProject, IPath pathToAdd, int includeMask, HashSet visitedProjects, IClasspathEntry referringEntry) throws JavaModelException", "signatureAfterChange": " void add(JavaProject javaProject, IPath pathToAdd, int includeMask, HashSet visitedProjects, IClasspathEntry referringEntry) throws JavaModelException", "diff": ["-\t\t\t\tswitch (rawEntry.getEntryKind()) {", "+\t\t\t\trawKind: switch (rawEntry.getEntryKind()) {", "-\t\t\t\t\t\tint containerKind = container.getKind();", "-\t\t\t\t\t\tif ((containerKind == IClasspathContainer.K_APPLICATION && (includeMask & APPLICATION_LIBRARIES) != 0)", "-\t\t\t\t\t\t\t\t|| (containerKind == IClasspathContainer.K_SYSTEM && (includeMask & SYSTEM_LIBRARIES) != 0)) {", "-\t\t\t\t\t\t\tIPath path = entry.getPath();", "-\t\t\t\t\t\t\tif (pathToAdd == null || pathToAdd.equals(path)) {", "-\t\t\t\t\t\t\t\tString pathToString = path.getDevice() == null ? path.toString() : path.toOSString();", "-\t\t\t\t\t\t\t\tadd(projectPath.toString(), \"\", pathToString, false/*not a package*/, access); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\taddEnclosingProjectOrJar(path);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tswitch (container.getKind()) {", "+\t\t\t\t\t\t\tcase IClasspathContainer.K_APPLICATION:", "+\t\t\t\t\t\t\t\tif ((includeMask & APPLICATION_LIBRARIES) == 0) break rawKind;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase IClasspathContainer.K_SYSTEM:", "+\t\t\t\t\t\t\tcase IClasspathContainer.K_DEFAULT_SYSTEM:", "+\t\t\t\t\t\t\t\tif ((includeMask & SYSTEM_LIBRARIES) == 0) break rawKind;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tbreak rawKind;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\t\tif (pathToAdd == null || pathToAdd.equals(path)) {", "+\t\t\t\t\t\t\tString pathToString = path.getDevice() == null ? path.toString() : path.toOSString();", "+\t\t\t\t\t\t\tadd(projectPath.toString(), \"\", pathToString, false/*not a package*/, access); //$NON-NLS-1$", "+\t\t\t\t\t\t\taddEnclosingProjectOrJar(path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "593a9cf16744b9c8266661fad62f8b40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 114, "signatureBeforeChange": " \tpublic static int scanTypeBoundSignature(char[] string, int start)", "signatureAfterChange": " \tpublic static int scanTypeBoundSignature(char[] string, int start)", "diff": ["-\t\tif (c == Signature.C_STAR) { //$NON-NLS-1$", "-\t\t\treturn start;", "-\t\t}", "-\t", "-\t\t// need a minimum 4 chars \"+Lx;\"", "-\t\tif (start >= string.length - 3) { ", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\t// must start in \"+/-\"", "-\t\tif (c != Signature.C_SUPER && c != Signature.C_EXTENDS) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\tc = string[start + 1];", "+\t\t\tcase Signature.C_STAR :", "+\t\t\t\treturn start;", "-\t\t\t\treturn scanTypeBoundSignature(string, start + 1);", "+\t\t\t\t// need a minimum 4 chars \"+Lx;\"", "+\t\t\t\tif (start >= string.length - 3) {", "+\t\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\t// must start in \"+/-\"", "+\t\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\t\t", "+\t\t}", "+\t\tc = string[++start];", "+\t\tswitch (c) {", "+\t\t\tcase Signature.C_CAPTURE :", "+\t\t\t\treturn scanCaptureTypeSignature(string, start);", "+\t\t\tcase Signature.C_SUPER :", "+\t\t\tcase Signature.C_EXTENDS :", "+\t\t\t\treturn scanTypeBoundSignature(string, start);", "-\t\t\t\treturn scanClassTypeSignature(string, start + 1);", "+\t\t\t\treturn scanClassTypeSignature(string, start);", "-\t\t\t\treturn scanTypeVariableSignature(string, start + 1);", "+\t\t\t\treturn scanTypeVariableSignature(string, start);", "-\t\t\t\treturn scanArrayTypeSignature(string, start + 1);", "+\t\t\t\treturn scanArrayTypeSignature(string, start);"]}], "num": 68281}
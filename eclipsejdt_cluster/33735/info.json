{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7b0aba417674a32d351bedcb7c52e333", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20369d14677bfc48abc2c75f2ed43fc5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java", "commitBeforeChange": "49a66f9a973247a981c10aeaef835e85ffcc455f", "commitAfterChange": "e08c40cf1dd83a4533badddfba88090397fd7a51", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic abstract WildcardBinding getWildcard(ReferenceBinding genericType, int rank, TypeBinding bound, TypeBinding[] otherBounds, int boundKind);", "signatureAfterChange": "  \tpublic WildcardBinding getWildcard(ReferenceBinding genericType, int rank, TypeBinding bound, TypeBinding[] otherBounds, int boundKind)", "diff": ["-\tpublic abstract WildcardBinding getWildcard(ReferenceBinding genericType, int rank, TypeBinding bound, TypeBinding[] otherBounds, int boundKind);", "+\t*/ ", "+\tpublic WildcardBinding getWildcard(ReferenceBinding genericType, int rank, TypeBinding bound, TypeBinding[] otherBounds, int boundKind) {", "+\t\tif (genericType == null) // pseudo wildcard denoting composite bounds for lub computation", "+\t\t\tgenericType = ReferenceBinding.LUB_GENERIC;", "+\t\t", "+\t\tReferenceBinding unannotatedGenericType = (ReferenceBinding) getUnannotatedType(genericType);", "+\t\tint otherBoundsLength = otherBounds == null ? 0: otherBounds.length;", "+\t\tTypeBinding [] unannotatedOtherBounds = otherBounds == null ? null : new TypeBinding[otherBoundsLength];", "+\t\tfor (int i = 0; i < otherBoundsLength; i++) {", "+\t\t\tunannotatedOtherBounds[i] = getUnannotatedType(otherBounds[i]);", "+\t\t}", "+\t\tTypeBinding unannotatedBound = bound == null ? null : getUnannotatedType(bound);", "+", "+\t\tTypeBinding[] derivedTypes = this.types[unannotatedGenericType.id];  // by construction, cachedInfo != null now.", "+\t\tint i, length = derivedTypes.length;", "+\t\tfor (i = 0; i < length; i++) {", "+\t\t\tTypeBinding derivedType = derivedTypes[i];", "+\t\t\tif (derivedType == null) ", "+\t\t\t\tbreak;", "+\t\t\tif (!derivedType.isWildcard() || derivedType.actualType() != unannotatedGenericType || derivedType.hasTypeAnnotations())", "+\t\t\t\tcontinue;", "+\t\t\tif (derivedType.rank() != rank || derivedType.boundKind() != boundKind || derivedType.bound() != unannotatedBound)", "+\t\t\t\tcontinue;", "+\t\t\tif (Util.effectivelyEqual(derivedType.additionalBounds(), unannotatedOtherBounds))", "+\t\t\t\treturn (WildcardBinding) derivedType;", "+\t\t}", "+\t\t", "+\t\tif (i == length) {", "+\t\t\tSystem.arraycopy(derivedTypes, 0, derivedTypes = new TypeBinding[length * 2], 0, length);", "+\t\t\tthis.types[unannotatedGenericType.id] = derivedTypes;", "+\t\t}", "+\t\tTypeBinding wildcard = derivedTypes[i] = new WildcardBinding(unannotatedGenericType, rank, unannotatedBound, unannotatedOtherBounds, boundKind, this.environment);", "+\t", "+\t\tint typesLength = this.types.length;", "+\t\tif (this.typeid == typesLength)", "+\t\t\tSystem.arraycopy(this.types, 0, this.types = new TypeBinding[typesLength * 2][], 0, typesLength);", "+\t\tthis.types[this.typeid] = new TypeBinding[1];", "+\t\treturn (WildcardBinding) (this.types[wildcard.id = this.typeid++][0] = wildcard);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d8ea9c3a156780afa38f126b981d72d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java", "commitBeforeChange": "49a66f9a973247a981c10aeaef835e85ffcc455f", "commitAfterChange": "e08c40cf1dd83a4533badddfba88090397fd7a51", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic abstract ParameterizedTypeBinding getParameterizedType (ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType);", "signatureAfterChange": "  \tpublic ParameterizedTypeBinding getParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType)", "diff": ["-\tpublic abstract ParameterizedTypeBinding getParameterizedType (ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType);", "+\t*/ ", "+\tpublic ParameterizedTypeBinding getParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType) {", "+\t\tReferenceBinding unannotatedGenericType = (ReferenceBinding) getUnannotatedType(genericType);", "+\t\tint typeArgumentsLength = typeArguments == null ? 0: typeArguments.length;", "+\t\tTypeBinding [] unannotatedTypeArguments = typeArguments == null ? null : new TypeBinding[typeArgumentsLength];", "+\t\tfor (int i = 0; i < typeArgumentsLength; i++) {", "+\t\t\tunannotatedTypeArguments[i] = getUnannotatedType(typeArguments[i]);", "+\t\t}", "+\t\tReferenceBinding unannotatedEnclosingType = enclosingType == null ? null : (ReferenceBinding) getUnannotatedType(enclosingType);", "+\t\t", "+\t\tTypeBinding[] derivedTypes = this.types[unannotatedGenericType.id];", "+\t\tint i, length = derivedTypes.length;", "+\t\tfor (i = 0 ; i < length; i++) {", "+\t\t\tTypeBinding derivedType = derivedTypes[i];", "+\t\t\tif (derivedType == null) ", "+\t\t\t\tbreak;", "+\t\t\tif (!derivedType.isParameterizedType() || derivedType.actualType() != unannotatedGenericType || derivedType.hasTypeAnnotations())", "+\t\t\t\tcontinue;", "+\t\t\tif (derivedType.enclosingType() == unannotatedEnclosingType && Util.effectivelyEqual(derivedType.typeArguments(), unannotatedTypeArguments))", "+\t\t\t\treturn (ParameterizedTypeBinding) derivedType;", "+\t\t}", "+", "+\t\tif (i == length) {", "+\t\t\tSystem.arraycopy(derivedTypes, 0, derivedTypes = new TypeBinding[length * 2], 0, length);", "+\t\t\tthis.types[unannotatedGenericType.id] = derivedTypes;", "+\t\t}", "+\t\tTypeBinding parameterizedType = derivedTypes[i] = new ParameterizedTypeBinding(unannotatedGenericType, unannotatedTypeArguments, unannotatedEnclosingType, this.environment);", "+\t", "+\t\tint typesLength = this.types.length;", "+\t\tif (this.typeid == typesLength)", "+\t\t\tSystem.arraycopy(this.types, 0, this.types = new TypeBinding[typesLength * 2][], 0, typesLength);", "+\t\tthis.types[this.typeid] = new TypeBinding[1];", "+\t\treturn (ParameterizedTypeBinding) (this.types[parameterizedType.id = this.typeid++][0] = parameterizedType);", "+\t}"]}], "num": 33735}
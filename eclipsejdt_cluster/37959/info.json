{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e74f86e204917d254317f9cd5e5da896", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8ced3eb9e081fcc57b5e6b47ba74fe2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/FactoryPathConfigurationBlock.java", "commitBeforeChange": "b8409b2c5761cb2e6dbcdfc3bef92e6e755d2aa7", "commitAfterChange": "e968b992e38be58d07a46d70f656322d8b2edb33", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic void performDefaults()", "signatureAfterChange": " \tpublic void performDefaults()", "diff": ["+\t */", "-\t\ttry {", "-\t\t\tAptConfig.setContainers(fJProj, null);", "+\t\tMap<FactoryContainer, Boolean> defaults = AptConfig.getDefaultFactoryPath(fJProj);", "+\t\tfFactoryPathList.removeAllElements();", "+\t\tfor (Map.Entry<FactoryContainer, Boolean> e : defaults.entrySet()) {", "+\t\t\tFactoryContainer fc = (FactoryContainer)e.getKey();", "+\t\t\tfFactoryPathList.addElement(fc);", "+\t\t\tfFactoryPathList.setChecked(fc, ((Boolean)e.getValue()).booleanValue());", "-\t\tcatch (IOException e) {", "-\t\t\t// TODO: what?", "-\t\t\te.printStackTrace();", "-\t\t}", "-\t\tcatch (CoreException e) {", "-\t\t\t// TODO: what?", "-\t\t\te.printStackTrace();", "-\t\t}", "-\t\tinitListContents();", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1635fab95873543be40a0aa40236480", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "0106f28c24dc45effaea6c15d2fd93b3b22539d8", "commitAfterChange": "b7cb1f5ede11fb6e27dd568ceeb96e4eba267c2f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tProcessorEnvImpl env, \t\t\tIProgressMonitor progressMonitor) \tthrows CoreException", "signatureAfterChange": " \tpublic FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tProcessorEnvImpl env, \t\t\tIProgressMonitor progressMonitor) \tthrows CoreException", "diff": ["-\t\t\tif( !isGeneratedSourceFolderConfigured() ){", "-\t\t\t\tthrow new IllegalStateException(\"Generated source folder not configured type generated for \" + typeName + \" failed\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t}", "+\t\t\tfinal boolean sourcepathUpdated = ensureGeneratedSourceFolder(progressMonitor);", "+\t\t\t", "+\t\t\t\t", "+\t\t\t\tSystem.out.println(\"*** start of classpath ***\");", "+\t\t\t\tIClasspathEntry[] cp = _javaProject.getRawClasspath();", "+\t\t\t\tfor (IClasspathEntry c : cp) {", "+\t\t\t\t\tSystem.out.println(c);", "+\t\t\t\t}", "+\t\t\t\tSystem.out.println(\"*** end of classpath ***\");", "+\t\t\t\t", "-\t\t\treturn new FileGenerationResult(file, contentsDiffer);", "+\t\t\treturn new FileGenerationResult(file, contentsDiffer, sourcepathUpdated);", "-\t\t\tAptPlugin.log(e, \"failed to generate type \" + typeName); //$NON-NLS-1$\t\t\t", "+\t\t\tAptPlugin.log(e, \"(2)failed to generate type \" + typeName); //$NON-NLS-1$", "+\t\t\te.printStackTrace();"]}], "num": 37959}
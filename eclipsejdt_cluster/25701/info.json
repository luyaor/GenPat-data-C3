{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e02b351d8dc6547fbfa53bc2b75beba", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c5d185c7545cb8e03b2804dfd4d6bfb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "c539ab4170e4fe0d8578cc8fb0121c9a797f5894", "commitAfterChange": "44363e0012bf09a8a44565479ae5740426ed378a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t} else if (this.lhs.isSuper()) {", "-\t\t\tthis.binding = sourceType.addSyntheticSuperBridgeMethod(this.binding);", "+\t\t} else if (this.syntheticAccessor != null) {", "+\t\t\tif (this.lhs.isSuper() || isMethodReference())", "+\t\t\t\tthis.binding = this.syntheticAccessor;", "-\t\t\tbuffer.append(this.lhs.isSuper() ? sourceType.signature() : this.receiverType.signature());", "+\t\t\tif (this.lhs.isSuper()) {", "+\t\t\t\tif (this.lhs instanceof QualifiedSuperReference) {", "+\t\t\t\t\tQualifiedSuperReference qualifiedSuperReference = (QualifiedSuperReference) this.lhs;", "+\t\t\t\t\tTypeReference qualification = qualifiedSuperReference.qualification;", "+\t\t\t\t\tif (qualification.resolvedType.isInterface()) {", "+\t\t\t\t\t\tbuffer.append(sourceType.signature());", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbuffer.append(((QualifiedSuperReference) this.lhs).currentCompatibleType.signature());", "+\t\t\t\t\t}", "+\t\t\t\t} else { ", "+\t\t\t\t\tbuffer.append(sourceType.signature());", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tbuffer.append(this.receiverType.signature());", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "babbc53bd733c9a1e20259191d9e3d5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ImportRewriteAnalyzer.java", "commitBeforeChange": "34d4ca4280b68a204e5286da02786e0f5a69a506", "commitAfterChange": "fa6a9611391cd82599b293f23e547c97052d2713", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tpublic MultiTextEdit getResultingEdits(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "  \tpublic MultiTextEdit getResultingEdits(IProgressMonitor monitor) throws JavaModelException", "diff": ["+\t\t\t\t\t\t} else if (doStarImport && !currDecl.isOnDemand()) {", "+\t\t\t\t\t\t\tString simpleName = currDecl.getTypeQualifiedName();", "+\t\t\t\t\t\t\tif (simpleName.indexOf('.') != -1) {", "+\t\t\t\t\t\t\t\tString str= getNewImportString(currDecl.getElementName(), isStatic, lineDelim);", "+\t\t\t\t\t\t\t\tif (stringsToInsert.indexOf(str) == -1) {", "+\t\t\t\t\t\t\t\t\tstringsToInsert.add(str);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (!doStarImport || currDecl.isOnDemand() || onDemandConflicts == null || onDemandConflicts.contains(currDecl.getSimpleName())) {", "-\t\t\t\t\t\t\tint offset= region.getOffset();", "-\t\t\t\t\t\t\tremoveAndInsertNew(buffer, currPos, offset, stringsToInsert, resEdit);", "-\t\t\t\t\t\t\tstringsToInsert.clear();", "-\t\t\t\t\t\t\tcurrPos= offset + region.getLength();", "-\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (!doStarImport || currDecl.isOnDemand() || onDemandConflicts == null || onDemandConflicts.contains(currDecl.getSimpleName())) {", "+\t\t\t\t\t\tint offset= region.getOffset();", "+\t\t\t\t\t\tremoveAndInsertNew(buffer, currPos, offset, stringsToInsert, resEdit);", "+\t\t\t\t\t\tstringsToInsert.clear();", "+\t\t\t\t\t\tcurrPos= offset + region.getLength();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e138effe53656fd0a26ee98dbdf16795", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "1fa0b970f57a68665cdfde955081db2621c42276", "commitAfterChange": "be945f896dfe94a8d4114819ea1c2afbe987ee6b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["+\t\t\t\t} else if (_returnType.isArray() && _returnType.getElementType().isTypeVariable()) {", "+\t\t\t\t\tint dimensions = _returnType.getDimensions();", "+\t\t\t\t\tbuffer.append(_returnType.getElementType().getQualifiedName());", "+\t\t\t\t\tfor (int i = 0; i < dimensions; i++) {", "+\t\t\t\t\t\tbuffer.append('[').append(']');", "+\t\t\t\t\t}", "+\t\t\t\t\t} else if (parameter.isArray() && parameter.getElementType().isTypeVariable()) {", "+\t\t\t\t\t\tint dimensions = parameter.getDimensions();", "+\t\t\t\t\t\tbuffer.append(parameter.getElementType().getQualifiedName());", "+\t\t\t\t\t\tfor (int j = 0; j < dimensions; j++) {", "+\t\t\t\t\t\t\tbuffer.append('[').append(']');", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (thrownException.isArray() && thrownException.getElementType().isTypeVariable()) {", "+\t\t\t\t\t\tint dimensions = thrownException.getDimensions();", "+\t\t\t\t\t\tbuffer.append(thrownException.getElementType().getQualifiedName());", "+\t\t\t\t\t\tfor (int j = 0; j < dimensions; j++) {", "+\t\t\t\t\t\t\tbuffer.append('[').append(']');", "+\t\t\t\t\t\t}"]}], "num": 25701}
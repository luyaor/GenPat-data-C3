{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5cf79023c2ad0f6ccad601c052a1fedd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b47500394f62e3f162b2c0cb06691db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "21c2c8ab182b7aa411b8e7bf4277aee52240c980", "commitAfterChange": "f512a9071a69431983c5a97730f23f8ae82e0f5d", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 73, "signatureBeforeChange": " protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-\t\t\treport(match);", "+\t\t\tif (field.initialization instanceof AllocationExpression) {", "+\t\t\t\treportAccurateEnumConstructorReference(match, field, (AllocationExpression) field.initialization);", "+\t\t\t} else {", "+\t\t\t\treport(match);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a4e85f716ed8bc6424058fb67bc1783", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tprivate void formatEnumConstantArguments( \t\t\tEnumConstant enumConstant, \t\t\tboolean spaceBeforeOpenParen,  \t\t\tboolean spaceBetweenEmptyParameters, \t\t\tboolean spaceBeforeClosingParen,  \t\t\tboolean spaceBeforeFirstParameter,  \t\t\tboolean spaceBeforeComma,  \t\t\tboolean spaceAfterComma, \t\t\tint methodDeclarationParametersAlignment)", "signatureAfterChange": "  \tprivate void formatEnumConstantArguments( \t\t\tFieldDeclaration enumConstant, \t\t\tboolean spaceBeforeOpenParen,  \t\t\tboolean spaceBetweenEmptyParameters, \t\t\tboolean spaceBeforeClosingParen,  \t\t\tboolean spaceBeforeFirstParameter,  \t\t\tboolean spaceBeforeComma,  \t\t\tboolean spaceAfterComma, \t\t\tint methodDeclarationParametersAlignment)", "diff": ["-\t\t\tEnumConstant enumConstant,", "+\t\t\tFieldDeclaration enumConstant,", "-\t\tfinal Expression[] arguments = enumConstant.arguments;", "+\t\tfinal Expression[] arguments = ((AllocationExpression) enumConstant.initialization).arguments;"]}], "num": 60816}
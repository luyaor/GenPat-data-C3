{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d7ab17dfe4b46d8775e07debd27175be", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35456dff853e6fd19359dfcd9ac10856", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "a9c15bae1087a65c1bc60140ceb7a5a5416fd8a8", "commitAfterChange": "74110f56eda8b0a2f39e0bc3ea1b2554a9ed3db1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \tprotected void generateClasspathChangeDeltas(\r \t\tIClasspathEntry[] oldResolvedPath,\r \t\tIClasspathEntry[] newResolvedPath,\r \t\tJavaModelManager manager,\r \t\tJavaProject project)", "signatureAfterChange": "\r \tprotected void generateClasspathChangeDeltas(\r \t\tIClasspathEntry[] oldResolvedPath,\r \t\tIClasspathEntry[] newResolvedPath,\r \t\tJavaModelManager manager,\r \t\tJavaProject project)", "diff": ["-\r", "+\t\t\t\r", "+\t\tIndexManager indexManager = manager.getIndexManager();\r", "+\t\t\t\t// and remove the .java files from the index (.class files belong to binary folders which can be shared, \r", "+\t\t\t\t// so leave the index) \r", "+\t\t\t\t\t} else if (indexManager != null && changeKind == IClasspathEntry.CPE_SOURCE) {\r", "+\t\t\t\t\t\tindexManager.removeSourceFolderFromIndex(project, oldResolvedPath[i].getPath());\r", "-\t\t\t\t// Request indexing of the library\r", "-\t\t\t\tif (changeKind == IClasspathEntry.CPE_LIBRARY) {\r", "-\t\t\t\t\tIndexManager indexManager = JavaModelManager.getJavaModelManager().getIndexManager();\r", "-\t\t\t\t\tif (indexManager != null) {\r", "-\t\t\t\t\t\tboolean pathHasChanged = true;\r", "-\t\t\t\t\t\tIPath newPath = newResolvedPath[i].getPath();\r", "-\t\t\t\t\t\tfor (int j = 0; j < oldResolvedPath.length; j++) {\r", "-\t\t\t\t\t\t\tIClasspathEntry oldEntry = oldResolvedPath[j];\r", "-\t\t\t\t\t\t\tif (oldEntry.getPath().equals(newPath)) {\r", "-\t\t\t\t\t\t\t\tpathHasChanged = false;\r", "-\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t// Request indexing\r", "+\t\t\t\tif (indexManager != null) {\r", "+\t\t\t\t\tswitch (changeKind) {\r", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:\r", "+\t\t\t\t\t\t\tboolean pathHasChanged = true;\r", "+\t\t\t\t\t\t\tIPath newPath = newResolvedPath[i].getPath();\r", "+\t\t\t\t\t\t\tfor (int j = 0; j < oldResolvedPath.length; j++) {\r", "+\t\t\t\t\t\t\t\tIClasspathEntry oldEntry = oldResolvedPath[j];\r", "+\t\t\t\t\t\t\t\tif (oldEntry.getPath().equals(newPath)) {\r", "+\t\t\t\t\t\t\t\t\tpathHasChanged = false;\r", "+\t\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tif (pathHasChanged) {\r", "-\t\t\t\t\t\t\tindexManager.indexLibrary(newPath, project.getProject());\r", "-\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tif (pathHasChanged) {\r", "+\t\t\t\t\t\t\t\tindexManager.indexLibrary(newPath, project.getProject());\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE:\r", "+\t\t\t\t\t\t\tindexManager.indexSourceFolder(project, newResolvedPath[i].getPath());\r", "+\t\t\t\t\t\t\tbreak;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd683eb54e381c4912ebe112abd7247c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexAllProject.java", "commitBeforeChange": "a733986a1578e7c758b973d16a31f4933a7d337a", "commitAfterChange": "b67935aac29cdd7a483ded645c27f7d2da7bec90", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-\t\t\t\t\t\t\t\t\t\tif (proxy.getType() == IResource.FILE) {", "-\t\t\t\t\t\t\t\t\t\t\tif (Util.isJavaFileName(proxy.getName())) {", "-\t\t\t\t\t\t\t\t\t\t\t\tIResource resource = proxy.requestResource();", "-\t\t\t\t\t\t\t\t\t\t\t\tif (resource.getLocation() != null && (patterns == null || !Util.isExcluded(resource, patterns))) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tString name = new IFileDocument((IFile) resource).getName();", "-\t\t\t\t\t\t\t\t\t\t\t\t\tindexedFileNames.put(name, resource);", "+\t\t\t\t\t\t\t\t\t\tswitch(proxy.getType()) {", "+\t\t\t\t\t\t\t\t\t\t\tcase IResource.FILE :", "+\t\t\t\t\t\t\t\t\t\t\t\tif (Util.isJavaFileName(proxy.getName())) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tIResource resource = proxy.requestResource();", "+\t\t\t\t\t\t\t\t\t\t\t\t\tif (resource.getLocation() != null && (patterns == null || !Util.isExcluded(resource, patterns))) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tString name = new IFileDocument((IFile) resource).getName();", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tindexedFileNames.put(name, resource);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t\t\tcase IResource.FOLDER :", "+\t\t\t\t\t\t\t\t\t\t\t\tif (patterns != null && Util.isExcluded(proxy.requestResource(), patterns))", "+\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t\t\tif (proxy.getType() == IResource.FILE) {", "-\t\t\t\t\t\t\t\t\t\t\tif (Util.isJavaFileName(proxy.getName())) {", "-\t\t\t\t\t\t\t\t\t\t\t\tIResource resource = proxy.requestResource();", "-\t\t\t\t\t\t\t\t\t\t\t\tIPath path = resource.getLocation();", "-\t\t\t\t\t\t\t\t\t\t\t\tif (path != null && (patterns == null || !Util.isExcluded(resource, patterns))) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tString name = new IFileDocument((IFile) resource).getName();", "-\t\t\t\t\t\t\t\t\t\t\t\t\tindexedFileNames.put(name,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tindexedFileNames.get(name) == null || indexLastModified < path.toFile().lastModified()", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? (Object) resource", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: (Object) OK);", "+\t\t\t\t\t\t\t\t\t\tswitch(proxy.getType()) {", "+\t\t\t\t\t\t\t\t\t\t\tcase IResource.FILE :", "+\t\t\t\t\t\t\t\t\t\t\t\tif (Util.isJavaFileName(proxy.getName())) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tIResource resource = proxy.requestResource();", "+\t\t\t\t\t\t\t\t\t\t\t\t\tIPath path = resource.getLocation();", "+\t\t\t\t\t\t\t\t\t\t\t\t\tif (path != null && (patterns == null || !Util.isExcluded(resource, patterns))) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tString name = new IFileDocument((IFile) resource).getName();", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tindexedFileNames.put(name,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tindexedFileNames.get(name) == null || indexLastModified < path.toFile().lastModified()", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? (Object) resource", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: (Object) OK);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\t\t\tcase IResource.FOLDER :", "+\t\t\t\t\t\t\t\t\t\t\t\tif (patterns != null && Util.isExcluded(proxy.requestResource(), patterns))", "+\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;"]}], "num": 42259}
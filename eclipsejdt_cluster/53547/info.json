{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c870b3a8199a2295fe8e14ea10b6f61", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8a9e1a08d1d5bb60bf8f8c4e4d46cb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "b6755ce2d08e0d5d352a051fea787f1496b49482", "commitAfterChange": "5d6f5aaa0ef90debc42dc50e444944b70d619e1f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public FlowInfo analyseCode(MethodScope initializationScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(MethodScope initializationScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tif (this.initialization != null) {", "-\t\tif (this.binding.isNonNull()) {", "-\t\t\tint nullStatus = this.initialization.nullStatus(flowInfo, flowContext);", "-\t\t\t// check against annotation @NonNull:", "-\t\t\tif (nullStatus != FlowInfo.NON_NULL) {", "-\t\t\t\tchar[][] annotationName = initializationScope.environment().getNonNullAnnotationName();", "-\t\t\t\tinitializationScope.problemReporter().nullityMismatch(this.initialization, this.initialization.resolvedType, this.binding.type, nullStatus, annotationName);", "+\tif (this.initialization != null && this.binding != null) {", "+\t\tCompilerOptions options = initializationScope.compilerOptions();", "+\t\tif (options.isAnnotationBasedNullAnalysisEnabled) {", "+\t\t\tif (this.binding.isNonNull() || options.sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\t\t\tint nullStatus = this.initialization.nullStatus(flowInfo, flowContext);", "+\t\t\t\tNullAnnotationMatching.checkAssignment(initializationScope, flowContext, this.binding, nullStatus, this.initialization, this.initialization.resolvedType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec0505c1d9515866e082f5357039b660", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "d7a2176a086ffe5cc9f82c35abb4d496e220561a", "commitAfterChange": "583238ffeb9a97546ad084c6e7cea427e3752805", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\t// handle indirect inheritance thru variable secondary bound", "+\t\t\t// receiver may receive generic cast, as part of implicit conversion", "+\t\t\tTypeBinding oldReceiverType = this.actualReceiverType;", "+\t\t\tthis.actualReceiverType = this.actualReceiverType.getErasureCompatibleType(this.binding.declaringClass);", "-\t\t\t// compute generic cast if necessary", "-\t\t\tTypeBinding receiverErasure = this.actualReceiverType.erasure();", "-\t\t\tif (receiverErasure instanceof ReferenceBinding) {", "-\t\t\t\tif (receiverErasure.findSuperTypeOriginatingFrom(this.binding.declaringClass) == null) {", "-\t\t\t\t\tthis.receiverGenericCast = this.binding.declaringClass; // handle indirect inheritance thru variable secondary bound", "-\t\t\t\t}", "+\t\t\tif (this.actualReceiverType != oldReceiverType && this.receiver.postConversionType(scope) != this.actualReceiverType) { // record need for explicit cast at codegen since receiver could not handle it", "+\t\t\t\tthis.bits |= NeedReceiverGenericCast;"]}], "num": 53547}
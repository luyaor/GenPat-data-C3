{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b22aa99cb391ee91100c174e2e7dc161", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf42f9da6ff19f0b00f4ee6943ef2c47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathDirectory.java", "commitBeforeChange": "2f0c7ec523954b9442b914a192aeb84937c76666", "commitAfterChange": "e1ce38065823480549fe152214755fa58b2884e3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public NameEnvironmentAnswer findClass(String binaryFileName, String qualifiedPackageName, String qualifiedBinaryFileName)", "signatureAfterChange": "   public NameEnvironmentAnswer findClass(String binaryFileName, String qualifiedPackageName, String qualifiedBinaryFileName)", "diff": ["+\tClassFileReader reader = null;", "-\t\tClassFileReader reader = ClassFileReader.read(binaryLocation + qualifiedBinaryFileName);", "-\t\tif (reader != null) {", "-\t\t\tif (this.accessRuleSet == null)", "-\t\t\t\treturn new NameEnvironmentAnswer(reader, null);", "-\t\t\tString fileNameWithoutExtension = qualifiedBinaryFileName.substring(0, qualifiedBinaryFileName.length() - SuffixConstants.SUFFIX_CLASS.length);", "-\t\t\treturn new NameEnvironmentAnswer(reader, this.accessRuleSet.getViolatedRestriction(fileNameWithoutExtension.toCharArray()));", "-\t\t}", "-\t} catch (Exception e) {", "-\t\t// handle the case when the project is the output folder and the top-level package is a linked folder", "-\t\tif (binaryFolder instanceof IProject) {", "-\t\t\tIResource file = binaryFolder.findMember(qualifiedBinaryFileName);", "-\t\t\tif (file instanceof IFile) {", "-\t\t\t\tIPath location = file.getLocation();", "-\t\t\t\tif (location != null) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tClassFileReader reader = ClassFileReader.read(location.toString());", "-\t\t\t\t\t\tif (reader != null) {", "-\t\t\t\t\t\t\tif (this.accessRuleSet == null)", "-\t\t\t\t\t\t\t\treturn new NameEnvironmentAnswer(reader, null);", "-\t\t\t\t\t\t\tString fileNameWithoutExtension = qualifiedBinaryFileName.substring(0, qualifiedBinaryFileName.length() - SuffixConstants.SUFFIX_CLASS.length);", "-\t\t\t\t\t\t\treturn new NameEnvironmentAnswer(reader, this.accessRuleSet.getViolatedRestriction(fileNameWithoutExtension.toCharArray()));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (Exception ignored) { // treat as if class file is missing", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\treader = Util.newClassFileReader(this.binaryFolder.getFile(new Path(qualifiedBinaryFileName)));", "+\t} catch (CoreException e) {", "+\t\treturn null;", "+\t} catch (ClassFormatException e) {", "+\t\treturn null;", "+\t} catch (IOException e) {", "+\t\treturn null;", "+\t}", "+\tif (reader != null) {", "+\t\tif (this.accessRuleSet == null)", "+\t\t\treturn new NameEnvironmentAnswer(reader, null);", "+\t\tString fileNameWithoutExtension = qualifiedBinaryFileName.substring(0, qualifiedBinaryFileName.length() - SuffixConstants.SUFFIX_CLASS.length);", "+\t\treturn new NameEnvironmentAnswer(reader, this.accessRuleSet.getViolatedRestriction(fileNameWithoutExtension.toCharArray()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e12aeb86f9ba514020b1f54184ada854", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathSourceJar.java", "commitBeforeChange": "a7e924b1651a1b9026ccc6590ce8e03365836a1b", "commitAfterChange": "d3da1d109c57a90a2bd8342736abf401463d58e5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic NameEnvironmentAnswer findClass(char[] typeName, String qualifiedPackageName, String qualifiedBinaryFileName)", "signatureAfterChange": "  \tpublic NameEnvironmentAnswer findClass(char[] typeName, String qualifiedPackageName, String qualifiedBinaryFileName)", "diff": ["-\t\t\tZipEntry binaryEntry = this.zipFile.getEntry(qualifiedBinaryFileName);", "-\t\t\tif (binaryEntry != null) {", "-\t\t\t\tif (sourceEntry.getTime() > binaryEntry.getTime()) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\treturn new NameEnvironmentAnswer(new CompilationUnit(Util.getInputStreamAsCharArray(this.zipFile.getInputStream(sourceEntry), -1, this.encoding),", "-\t\t\t\t\t\t\t\tqualifiedBinaryFileName.substring(0, qualifiedBinaryFileName.length() - 6)  + SUFFIX_STRING_java, this.encoding),", "-\t\t\t\t\t\t\t\tfetchAccessRestriction(qualifiedBinaryFileName));", "-\t\t\t\t\t} catch (IOException e) {", "-\t\t\t\t\t\t// treat as if source file is missing", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tClassFileReader reader = ClassFileReader.read(this.zipFile, qualifiedBinaryFileName);", "-\t\t\t\t\t\tif (reader != null) return new NameEnvironmentAnswer(reader, ", "-\t\t\t\t\t\t\t\tfetchAccessRestriction(qualifiedBinaryFileName));", "-\t\t\t\t\t} catch(ClassFormatException e) {", "-\t\t\t\t\t\t// treat as if class file is missing", "-\t\t\t\t\t} catch (IOException e) {", "-\t\t\t\t\t\t// treat as if class file is missing", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\ttry {", "-\t\t\t\t\treturn new NameEnvironmentAnswer(new CompilationUnit(Util.getInputStreamAsCharArray(this.zipFile.getInputStream(sourceEntry), -1, this.encoding),", "-\t\t\t\t\t\t\tqualifiedBinaryFileName.substring(0, qualifiedBinaryFileName.length() - 6)  + SUFFIX_STRING_java, this.encoding),", "-\t\t\t\t\t\t\tfetchAccessRestriction(qualifiedBinaryFileName));", "-\t\t\t\t} catch (IOException e) {", "-\t\t\t\t\t// treat as if source file is missing", "-\t\t\t\t}", "+\t\t\ttry {", "+\t\t\t\treturn new NameEnvironmentAnswer(new CompilationUnit(Util.getInputStreamAsCharArray(this.zipFile.getInputStream(sourceEntry), -1, this.encoding),", "+\t\t\t\t\t\tqualifiedBinaryFileName.substring(0, qualifiedBinaryFileName.length() - 6)  + SUFFIX_STRING_java, this.encoding),", "+\t\t\t\t\t\tfetchAccessRestriction(qualifiedBinaryFileName));", "+\t\t\t} catch (IOException e) {", "+\t\t\t\t// treat as if source file is missing"]}], "num": 72938}
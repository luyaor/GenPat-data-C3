{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1410a8990a5ba58c600b82b70c6e9d43", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a9a724ebd1578ef690daa1506d3ec5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorDeclarationPattern.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public int matchLevel(Binding binding)", "signatureAfterChange": "\r public boolean matches(Binding binding)", "diff": ["+ */\r", "+public boolean matches(Binding binding) {\r", "+\tif (!(binding instanceof MethodBinding)) return false;\r", "+\r", "+\tMethodBinding method = (MethodBinding)binding;\r", "+\r", "+\t// must be a constructor\r", "+\tif (!method.isConstructor()) return false;\r", "+\t\r", "+\t// declaring type\r", "+\tReferenceBinding declaringType = method.declaringClass;\r", "+\tif (declaringType != null) {\r", "+\t\tif (!method.isStatic() && !method.isPrivate()) {\r", "+\t\t\tif (!this.matchesAsSubtype(declaringType, this.declaringSimpleName, this.declaringQualification))\r", "+\t\t\t\treturn false;\r", "+\t\t} else {\r", "+\t\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringType))\r", "+\t\t\t\treturn false;\r", "+\t\t}\r", "+\t}\r", "+\r", "+\t// parameter types\r", "+\tint parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\tif (parameterCount > -1) {\r", "+\t\tint argumentCount = method.parameters == null ? 0 : method.parameters.length;\r", "+\t\tif (parameterCount != argumentCount)\r", "+\t\t\treturn false;\r", "+\t\tfor (int i = 0; i < parameterCount; i++) {\r", "+\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "+\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "+\t\t\tif (!this.matchesType(type, qualification, method.parameters[i]))\r", "+\t\t\t\treturn false;\r", "+\t\t}\r", "+\t}\r", "+\r", "+\treturn true;\r", "+}\r", "- */\r", "-public int matchLevel(Binding binding) {\r", "-\tif (binding == null) return INACCURATE_MATCH;\r", "-\tif (!(binding instanceof MethodBinding)) return IMPOSSIBLE_MATCH;\r", "-\tint level;\r", "-\r", "-\tMethodBinding constructor = (MethodBinding)binding;\r", "-\t\r", "-\t// must be a constructor\r", "-\tif (!constructor.isConstructor()) return IMPOSSIBLE_MATCH;\r", "-\r", "-\t// declaring type\r", "-\tReferenceBinding declaringType = constructor.declaringClass;\r", "-\tif (!constructor.isStatic() && !constructor.isPrivate()) {\r", "-\t\tlevel = this.matchLevelAsSubtype(declaringType, this.declaringSimpleName, this.declaringQualification);\r", "-\t} else {\r", "-\t\tlevel = this.matchLevelForType(this.declaringSimpleName, this.declaringQualification, declaringType);\r", "-\t}\r", "-\tif (level == IMPOSSIBLE_MATCH) {\r", "-\t\treturn IMPOSSIBLE_MATCH;\r", "-\t}\r", "-\t\t\r", "-\t// parameter types\r", "-\tint parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\tif (parameterCount > -1) {\r", "-\t\tint argumentCount = constructor.parameters == null ? 0 : constructor.parameters.length;\r", "-\t\tif (parameterCount != argumentCount)\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\tfor (int i = 0; i < parameterCount; i++) {\r", "-\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "-\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "-\t\t\tint newLevel = this.matchLevelForType(type, qualification, constructor.parameters[i]);\r", "-\t\t\tswitch (newLevel) {\r", "-\t\t\t\tcase IMPOSSIBLE_MATCH:\r", "-\t\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t\t\tcase ACCURATE_MATCH: // keep previous level\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tdefault: // ie. INACCURATE_MATCH\r", "-\t\t\t\t\tlevel = newLevel;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\r", "-\treturn level;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc9e0793b0ee2bb43c855950a24ebce4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorDeclarationPattern.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public int matchLevel(Binding binding)", "signatureAfterChange": "\r public boolean matches(Binding binding)", "diff": ["+ */\r", "+public boolean matches(Binding binding) {\r", "+\tif (!(binding instanceof MethodBinding)) return false;\r", "+\r", "+\tMethodBinding method = (MethodBinding)binding;\r", "+\r", "+\t// must be a constructor\r", "+\tif (!method.isConstructor()) return false;\r", "+\t\r", "+\t// declaring type\r", "+\tReferenceBinding declaringType = method.declaringClass;\r", "+\tif (declaringType != null) {\r", "+\t\tif (!method.isStatic() && !method.isPrivate()) {\r", "+\t\t\tif (!this.matchesAsSubtype(declaringType, this.declaringSimpleName, this.declaringQualification))\r", "+\t\t\t\treturn false;\r", "+\t\t} else {\r", "+\t\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringType))\r", "+\t\t\t\treturn false;\r", "+\t\t}\r", "+\t}\r", "+\r", "+\t// parameter types\r", "+\tint parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\tif (parameterCount > -1) {\r", "+\t\tint argumentCount = method.parameters == null ? 0 : method.parameters.length;\r", "+\t\tif (parameterCount != argumentCount)\r", "+\t\t\treturn false;\r", "+\t\tfor (int i = 0; i < parameterCount; i++) {\r", "+\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "+\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "+\t\t\tif (!this.matchesType(type, qualification, method.parameters[i]))\r", "+\t\t\t\treturn false;\r", "+\t\t}\r", "+\t}\r", "+\r", "+\treturn true;\r", "+}\r", "- */\r", "-public int matchLevel(Binding binding) {\r", "-\tif (binding == null) return INACCURATE_MATCH;\r", "-\tif (!(binding instanceof MethodBinding)) return IMPOSSIBLE_MATCH;\r", "-\tint level;\r", "-\r", "-\tMethodBinding constructor = (MethodBinding)binding;\r", "-\t\r", "-\t// must be a constructor\r", "-\tif (!constructor.isConstructor()) return IMPOSSIBLE_MATCH;\r", "-\r", "-\t// declaring type\r", "-\tReferenceBinding declaringType = constructor.declaringClass;\r", "-\tif (!constructor.isStatic() && !constructor.isPrivate()) {\r", "-\t\tlevel = this.matchLevelAsSubtype(declaringType, this.declaringSimpleName, this.declaringQualification);\r", "-\t} else {\r", "-\t\tlevel = this.matchLevelForType(this.declaringSimpleName, this.declaringQualification, declaringType);\r", "-\t}\r", "-\tif (level == IMPOSSIBLE_MATCH) {\r", "-\t\treturn IMPOSSIBLE_MATCH;\r", "-\t}\r", "-\t\t\r", "-\t// parameter types\r", "-\tint parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\tif (parameterCount > -1) {\r", "-\t\tint argumentCount = constructor.parameters == null ? 0 : constructor.parameters.length;\r", "-\t\tif (parameterCount != argumentCount)\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\tfor (int i = 0; i < parameterCount; i++) {\r", "-\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "-\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "-\t\t\tint newLevel = this.matchLevelForType(type, qualification, constructor.parameters[i]);\r", "-\t\t\tswitch (newLevel) {\r", "-\t\t\t\tcase IMPOSSIBLE_MATCH:\r", "-\t\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t\t\tcase ACCURATE_MATCH: // keep previous level\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tdefault: // ie. INACCURATE_MATCH\r", "-\t\t\t\t\tlevel = newLevel;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\r", "-\treturn level;\r"]}], "num": 37319}
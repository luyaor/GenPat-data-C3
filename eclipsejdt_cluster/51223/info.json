{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69f0bd342f74f44aa502834b069a4b2a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f5a3fff9c946517451877c502324871", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "ea035aff9493ec8381c8d6bd9548845ad9f81e22", "commitAfterChange": "3c8b95412c50bb73a8372fbf9db9df68231cc311", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tpublic static void checkContainingAnnotation(ASTNode markerNode, Scope scope, ReferenceBinding container, ReferenceBinding repeatableAnnotation)", "signatureAfterChange": "  \tpublic static void checkContainerAnnotationType(ASTNode culpritNode, BlockScope scope, ReferenceBinding containerAnnotationType, ReferenceBinding repeatableAnnotationType, boolean useSite)", "diff": ["-\tpublic static void checkContainingAnnotation(ASTNode markerNode, Scope scope, ReferenceBinding container, ReferenceBinding repeatableAnnotation) {", "-\t\tMethodBinding[] annotationMethods = container.methods();", "+\tpublic static void checkContainerAnnotationType(ASTNode culpritNode, BlockScope scope, ReferenceBinding containerAnnotationType, ReferenceBinding repeatableAnnotationType, boolean useSite) {", "+\t\tMethodBinding[] annotationMethods = containerAnnotationType.methods();", "-\t\t\t\t\tif (TypeBinding.equalsEquals(array.elementsType(), repeatableAnnotation)) continue;", "+\t\t\t\t\tif (TypeBinding.equalsEquals(array.elementsType(), repeatableAnnotationType)) continue;", "-\t\t\t\tscope.problemReporter().containingAnnotationHasWrongValueType(markerNode, container, repeatableAnnotation, method.returnType);", "+\t\t\t\trepeatableAnnotationType.tagAsHavingDefectiveContainerType();", "+\t\t\t\tscope.problemReporter().containingAnnotationHasWrongValueType(culpritNode, containerAnnotationType, repeatableAnnotationType, method.returnType);", "-\t\t\t\t// Not the value() - must have default (or else isn't suitable as container", "+\t\t\t\t// Not the value() - must have default (or else isn't suitable as container)", "-\t\t\t\t\tscope.problemReporter().containingAnnotationHasNonDefaultMembers(markerNode, container, method.selector);", "+\t\t\t\t\trepeatableAnnotationType.tagAsHavingDefectiveContainerType();", "+\t\t\t\t\tscope.problemReporter().containingAnnotationHasNonDefaultMembers(culpritNode, containerAnnotationType, method.selector);", "-\t\t\tscope.problemReporter().containingAnnotationMustHaveValue(markerNode, container);", "+\t\t\trepeatableAnnotationType.tagAsHavingDefectiveContainerType();", "+\t\t\tscope.problemReporter().containingAnnotationMustHaveValue(culpritNode, containerAnnotationType);", "-\t\tcheckContainingAnnotationRetention(markerNode, scope, container, repeatableAnnotation);", "-\t\tif (markerNode instanceof Annotation)", "-\t\t\tcheckContainingAnnotationTarget((Annotation) markerNode, (BlockScope) scope, (TypeBinding) container, repeatableAnnotation);", "-\t\telse", "-\t\t\tcheckContainingAnnotationTarget(markerNode, scope, container, repeatableAnnotation);", "-\t\tcheckContaintAnnotationDocumented(markerNode, scope, container, repeatableAnnotation);", "-\t\tcheckContaintAnnotationInherited(markerNode, scope, container, repeatableAnnotation);", "-\t}", "+\t\tcheckContainingAnnotationRetention(culpritNode, scope, containerAnnotationType, repeatableAnnotationType);", "+\t\t", "+\t\tif (useSite)", "+\t\t\tcheckContainingAnnotationTargetAtUse((Annotation) culpritNode, scope, containerAnnotationType, repeatableAnnotationType);", "+\t\telse ", "+\t\t\tcheckContainingAnnotationTarget(culpritNode, scope, containerAnnotationType, repeatableAnnotationType);", "+\t\t", "+\t\tcheckContaintAnnotationDocumented(culpritNode, scope, containerAnnotationType, repeatableAnnotationType);", "+\t\tcheckContaintAnnotationInherited(culpritNode, scope, containerAnnotationType, repeatableAnnotationType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ba047fb69a14ac49f9e0f888403f8d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "3c8db8654fc8e2927c75863ec1232c9bc3800c9b", "commitAfterChange": "533660d1560f1a7aff4c5ccabdcd0cb35c0194c1", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tpublic static void checkContainerAnnotationType(ASTNode culpritNode, BlockScope scope, ReferenceBinding containerAnnotationType, ReferenceBinding repeatableAnnotationType, boolean useSite)", "signatureAfterChange": "  \tpublic static void checkContainerAnnotationType(ASTNode culpritNode, BlockScope scope, ReferenceBinding containerAnnotationType, ReferenceBinding repeatableAnnotationType, boolean useSite)", "diff": ["-\t\t\t\tscope.problemReporter().containingAnnotationHasWrongValueType(culpritNode, containerAnnotationType, repeatableAnnotationType, method.returnType);", "+\t\t\t\tscope.problemReporter().containerAnnotationTypeHasWrongValueType(culpritNode, containerAnnotationType, repeatableAnnotationType, method.returnType);", "-\t\t\t\t\tscope.problemReporter().containingAnnotationHasNonDefaultMembers(culpritNode, containerAnnotationType, method.selector);", "+\t\t\t\t\tscope.problemReporter().containerAnnotationTypeHasNonDefaultMembers(culpritNode, containerAnnotationType, method.selector);", "-\t\t\tscope.problemReporter().containingAnnotationMustHaveValue(culpritNode, containerAnnotationType);", "+\t\t\tscope.problemReporter().containerAnnotationTypeMustHaveValue(culpritNode, containerAnnotationType);", "-\t\t", "-\t\tcheckContainingAnnotationRetention(culpritNode, scope, containerAnnotationType, repeatableAnnotationType);", "-\t\t", "+", "-\t\tcheckContaintAnnotationDocumented(culpritNode, scope, containerAnnotationType, repeatableAnnotationType);", "-\t\tcheckContaintAnnotationInherited(culpritNode, scope, containerAnnotationType, repeatableAnnotationType);", "+\t\tlong annotationTypeBits = getAnnotationRetention(repeatableAnnotationType);", "+\t\tlong containerTypeBits = getAnnotationRetention(containerAnnotationType); ", "+\t\t// Due to clever layout of the bits, we can compare the absolute value directly", "+\t\tif (containerTypeBits < annotationTypeBits) {", "+\t\t\trepeatableAnnotationType.tagAsHavingDefectiveContainerType();", "+\t\t\tscope.problemReporter().containerAnnotationTypeHasShorterRetention(culpritNode, repeatableAnnotationType, getRetentionName(annotationTypeBits), containerAnnotationType, getRetentionName(containerTypeBits));", "+\t\t}", "+\t\t", "+\t\tif ((repeatableAnnotationType.getAnnotationTagBits() & TagBits.AnnotationDocumented) != 0 && (containerAnnotationType.getAnnotationTagBits() & TagBits.AnnotationDocumented) == 0) {", "+\t\t\trepeatableAnnotationType.tagAsHavingDefectiveContainerType();", "+\t\t\tscope.problemReporter().repeatableAnnotationTypeIsDocumented(culpritNode, repeatableAnnotationType, containerAnnotationType);", "+\t\t}", "+\t\t", "+\t\tif ((repeatableAnnotationType.getAnnotationTagBits() & TagBits.AnnotationInherited) != 0 && (containerAnnotationType.getAnnotationTagBits() & TagBits.AnnotationInherited) == 0) {", "+\t\t\trepeatableAnnotationType.tagAsHavingDefectiveContainerType();", "+\t\t\tscope.problemReporter().repeatableAnnotationTypeIsInherited(culpritNode, repeatableAnnotationType, containerAnnotationType);", "+\t\t}"]}], "num": 51223}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a6e5ce5d6e381dabf2427d736d8a01a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1258623ab0d8277e811f117f88b48384", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "b9e1f650b8042f3e1391656d8119b63cfa12caf6", "commitAfterChange": "50ccfd22c9edba40e321679792b900f0f1aa1621", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic MethodBinding findExactMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findExactMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\tboolean checkArgsForRawTypes = false;", "-\t\t// in 1.5 mode or higher, we're expecting that an exact match with more than 2 args is not that common", "-\t\t// so save some time by not calling findExactMatch & use that time to handle the more common cases with 1 or 2 args.", "-\t\tswitch (argumentTypes.length) {", "-\t\t\tcase 0 : break;", "-\t\t\tcase 1 :", "-\t\t\tcase 2 :", "-\t\t\t\tcheckArgsForRawTypes = compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5;", "-\t\t\tdefault :", "-\t\t\t\tif (compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5)", "-\t\t\t\t\treturn null; // skip find exact match since its less likely to find a match & raw type check is not worth it", "-\t\t}", "-\t\t\tif (checkArgsForRawTypes)", "+\t\t\t// in >= 1.5 mode, ensure the exactMatch did not match raw types", "+\t\t\tif (compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8b6d4e08071f46a42c770c53b5e5752", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/CharOperation.java", "commitBeforeChange": "c082b821c44009b576bd7c91d04ab7d83ce6f4a0", "commitAfterChange": "e96b81a52412e43aed69f6e87de2caadbf8506ca", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public static boolean isWhitespace(char c)", "signatureAfterChange": " public static boolean isWhitespace(char c)", "diff": ["+ * \r * @param c\r * @return boolean\r */", "-\tif (Character.isWhitespace(c)) {", "-\t\tswitch(c) {", "-\t\t\tcase 11 :", "-\t\t\tcase 12288 :", "-\t\t\tcase 28 :", "-\t\t\tcase 29 :", "-\t\t\tcase 30 :", "-\t\t\tcase 31 :", "-\t\t\tcase 5760 :", "-\t\t\tcase 8192 :", "-\t\t\tcase 8193 :", "-\t\t\tcase 8194 :", "-\t\t\tcase 8195 :", "-\t\t\tcase 8196 :", "-\t\t\tcase 8197 :", "-\t\t\tcase 8198 :", "-\t\t\tcase 8200 :", "-\t\t\tcase 8201 :", "-\t\t\tcase 8202 :", "-\t\t\tcase 8203 :", "-\t\t\tcase 8232 :", "-\t\t\tcase 8233 :", "-\t\t\t\treturn false;", "-\t\t\tdefault :", "-\t\t\t\treturn true;", "-\t\t}", "+\tswitch(c) {", "+\t\tcase 10 : /* \\u000a: LINE FEED               */", "+\t\tcase 12 : /* \\u000c: FORM FEED               */", "+\t\tcase 13 : /* \\u000d: CARRIAGE RETURN         */ ", "+\t\tcase 32 : /* \\u0020: SPACE                   */", "+\t\tcase 9  : /* \\u0009: HORIZONTAL TABULATION   */", "+\t\t\treturn true;", "+\t\tdefault :", "+\t\t\treturn false;", "-\treturn false;"]}], "num": 45344}
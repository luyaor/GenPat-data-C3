{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "53895266a57a9d4b84aadd253549439c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c82831292ff63113e18e98a947a9c54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "c0b519c3b149b13ea0f307f0d3414359b2cf0639", "commitAfterChange": "a8d9477532d4953ddbbeff7907775085b3a4bf13", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " private MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " private MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["-\t\t\t} else if (parameterType.isArrayType() && ((ArrayBinding) parameterType).leafComponentType == TypeBinding.VOID) {", "-\t\t\t\tmethodDecl.scope.problemReporter().argumentTypeCannotBeVoidArray(arg);", "-\t\t\t\tfoundArgProblem = true;", "-\t\t\t    if (leafType instanceof ReferenceBinding && (((ReferenceBinding) leafType).modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0)", "+\t\t\t\tif (leafType instanceof ReferenceBinding && (((ReferenceBinding) leafType).modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0)", "+\t\t\t\targ.binding = new LocalVariableBinding(arg, parameterType, arg.modifiers, true);", "-\t\tif (!foundArgProblem)", "+\t\tif (!foundArgProblem) {", "+\t\t}", "-\t\t    TypeBinding methodType = returnType.resolveType(methodDecl.scope, true /* check bounds*/);", "+\t\t\tTypeBinding methodType = returnType.resolveType(methodDecl.scope, true /* check bounds*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b7c42604d840b1bd0684059c0b5ddd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " private MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " private MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["-\tif (typeParameters != null) methodDecl.scope.connectTypeVariables(typeParameters);", "+\tif (typeParameters != null) {", "+\t\tmethodDecl.scope.connectTypeVariables(typeParameters);", "+\t\t// Perform deferred bound checks for type variables (only done after type variable hierarchy is connected)", "+\t\tfor (int i = 0, paramLength = typeParameters.length; i < paramLength; i++) {", "+\t\t\ttypeParameters[i].checkBounds(methodDecl.scope);", "+\t\t}", "+\t}", "-\t\t\tresolvedExceptionType = (ReferenceBinding) exceptionTypes[i].resolveType(methodDecl.scope);", "+\t\t\tresolvedExceptionType = (ReferenceBinding) exceptionTypes[i].resolveType(methodDecl.scope, true /* check bounds*/);", "-\t\t\tTypeBinding parameterType = arg.type.resolveType(methodDecl.scope);", "+\t\t\tTypeBinding parameterType = arg.type.resolveType(methodDecl.scope, true /* check bounds*/);", "-\t\t    TypeBinding methodType = returnType.resolveType(methodDecl.scope);", "+\t\t    TypeBinding methodType = returnType.resolveType(methodDecl.scope, true /* check bounds*/);"]}], "num": 5445}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb01fdb007a7cdc51f3b313e8f0da525", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77798593e3a930a1ff4c87530a25ce5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": " protected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final IProblem[] expected, final char[] displayString)", "signatureAfterChange": " \tprotected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final IProblem[] expected, final char[] displayString)", "diff": ["- */", "-protected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final IProblem[] expected, final char[] displayString) {", "-\tclass ResultRequestor extends Requestor {", "-\t\tArrayList collectedProblems = new ArrayList();", "-\t\tboolean gotDisplayString = false;", "-\t\tpublic void acceptResult(EvaluationResult result) {", "-\t\t\tif (result.hasValue()) {", "-\t\t\t\tif (CharOperation.equals(result.getValueDisplayString(), displayString)) {", "-\t\t\t\t\tgotDisplayString = true;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tassertTrue(\"Has problem\", result.hasProblems());", "-\t\t\t\tIProblem[] problems = result.getProblems();", "-\t\t\t\tfor (int i = 0; i < problems.length; i++) {", "-\t\t\t\t\t\tcollectedProblems.add(problems[i]);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "-\tResultRequestor requestor = new ResultRequestor();", "-\ttry {", "-\t\tcontext.evaluate(codeSnippet, getEnv(), getOptions(), requestor, getProblemFactory());", "-\t} catch (InstallException e) {", "-\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "-\t}", "-\tif (expected.length == requestor.collectedProblems.size()) {", "-\t\tfor (int i = 0; i < expected.length; i++) {", "-\t\t\tassertTrue(\"Problem mismatch\"+ requestor.collectedProblems.get(i), this.equals(expected[i], (IProblem)requestor.collectedProblems.get(i)));", "-\t\t}", "-\t} else {", "-\t\tassertTrue(\"Wrong problem count\", false);", "-\t}", "-\tassertTrue(\"Expected display string\", requestor.gotDisplayString);", "-}", "+\t */", "+\tprotected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final IProblem[] expected, final char[] displayString) {", "+\t\tclass ResultRequestor extends Requestor {", "+\t\t\tArrayList collectedProblems = new ArrayList();", "+\t\t\tboolean gotDisplayString = false;", "+\t\t\tpublic void acceptResult(EvaluationResult result) {", "+\t\t\t\tassertEquals(\"Evaluation type\", EvaluationResult.T_CODE_SNIPPET, result.getEvaluationType());", "+\t\t\t\t//assertEquals(\"Evaluation id\", codeSnippet, result.getEvaluationID());", "+\t\t\t\tif (result.hasValue()) {", "+\t\t\t\t\tif (CharOperation.equals(result.getValueDisplayString(), displayString)) {", "+\t\t\t\t\t\tgotDisplayString = true;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tassertTrue(\"Has problem\", result.hasProblems());", "+\t\t\t\t\tIProblem[] problems = result.getProblems();", "+\t\t\t\t\tfor (int i = 0; i < problems.length; i++) {", "+\t\t\t\t\t\tcollectedProblems.add(problems[i]);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tResultRequestor requestor = new ResultRequestor();", "+\t\ttry {", "+\t\t\tcontext.evaluate(codeSnippet, getEnv(), getCompilerOptions(), requestor, getProblemFactory());", "+\t\t} catch (InstallException e) {", "+\t\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "+\t\t}", "+\t\tif (expected.length == requestor.collectedProblems.size()) {", "+\t\t\tfor (int i = 0; i < expected.length; i++) {", "+\t\t\t\tassertTrue(\"Problem mismatch\" + requestor.collectedProblems.get(i), this.equals(expected[i], (IProblem)requestor.collectedProblems.get(i)));", "+\t\t\t}", "+\t\t} else {", "+\t\t\tassertTrue(\"Wrong problem count\", false);", "+\t\t}", "+\t\tassertTrue(\"Expected display string\", requestor.gotDisplayString);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f66a47018277d751b4bb7acb223b40a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void evaluateWithExpectedDisplayString(char[] codeSnippet, char[] displayString)", "signatureAfterChange": " \tpublic void evaluateWithExpectedDisplayString(char[] codeSnippet, char[] displayString)", "diff": ["- */", "-public void evaluateWithExpectedDisplayString(char[] codeSnippet, char[] displayString) {", "-\tRequestor requestor = new Requestor();", "-\ttry {", "-\t\tcontext.evaluate(codeSnippet, getEnv(), getOptions(), requestor, getProblemFactory());", "-\t} catch (InstallException e) {", "-\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "-\t}", "-\tif (requestor.resultIndex != 0) {", "-\t\tfor (int i = 0; i < requestor.resultIndex; i++){", "-\t\t\tSystem.out.println(\"unexpected result[\"+i+\"]: \" + requestor.results[i]);", "+\t */", "+\tpublic void evaluateWithExpectedDisplayString(char[] codeSnippet, char[] displayString) {", "+\t\tRequestor requestor = new Requestor();", "+\t\ttry {", "+\t\t\tcontext.evaluate(codeSnippet, getEnv(), getCompilerOptions(), requestor, getProblemFactory());", "+\t\t} catch (InstallException e) {", "+\t\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "+\t\t}", "+\t\tif (requestor.resultIndex != 0) {", "+\t\t\tfor (int i = 0; i < requestor.resultIndex; i++) {", "+\t\t\t\tSystem.out.println(\"unexpected result[\" + i + \"]: \" + requestor.results[i]);", "+\t\t\t}", "+\t\t}", "+\t\tassertTrue(\"Unexpected result\", requestor.resultIndex == 0);", "+\t\tEvaluationResult result = requestor.results[0];", "+\t\tassertTrue(\"Has problem\", !result.hasProblems());", "+\t\tassertTrue(\"Empty problem list\", result.getProblems().length == 0);", "+\t\tif (displayString == null) {", "+\t\t\tassertTrue(\"Has value\", !result.hasValue());", "+\t\t} else {", "+\t\t\tassertTrue(\"Has value\", result.hasValue());", "+\t\t\tassertEquals(\"Evaluation type\", EvaluationResult.T_CODE_SNIPPET, result.getEvaluationType());", "+\t\t\t//assertEquals(\"Evaluation id\", codeSnippet, result.getEvaluationID());", "+\t\t\tassertEquals(\"Value display string\", displayString, result.getValueDisplayString());", "-\tassertTrue(\"Unexpected result\", requestor.resultIndex == 0);", "-\tEvaluationResult result = requestor.results[0];", "-\tassertTrue(\"Has problem\", !result.hasProblems());", "-\tassertTrue(\"Empty problem list\", result.getProblems().length == 0);", "-\tif (displayString == null) {", "-\t\tassertTrue(\"Has value\", !result.hasValue());", "-\t} else {", "-\t\tassertTrue(\"Has value\", result.hasValue());", "-\t\tassertEquals(\"Evaluation type\", EvaluationResult.T_CODE_SNIPPET, result.getEvaluationType());", "-\t\t//assertEquals(\"Evaluation id\", codeSnippet, result.getEvaluationID());", "-\t\tassertEquals(\"Value display string\", displayString, result.getValueDisplayString());", "-}"]}], "num": 8957}
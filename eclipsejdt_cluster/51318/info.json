{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b41da96a706abeb48b3e14be705883f3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ead50abf47cd73c1d552ea6aeb17092", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "a746953c3c39228e621101bf14cd960b61f268e5", "commitAfterChange": "8d9e4d82b7907a3f11b58a9fee1e77dc3999b852", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " static int updateMatchRule(int matchRule)", "signatureAfterChange": " private static boolean validateCamelCasePattern(String stringPattern)", "diff": ["-static int updateMatchRule(int matchRule) {", "-\tif ((matchRule & R_CAMELCASE_MATCH) != 0) {", "-\t\tmatchRule &= ~R_CAMELCASE_MATCH;", "-\t\tmatchRule |= R_CAMEL_CASE_MATCH;", "-\t\tif ((matchRule & (R_PREFIX_MATCH | R_CASE_SENSITIVE)) == 0) {", "-\t\t\tmatchRule |= R_PREFIX_MATCH;", "-\t\t}", "+private static boolean validateCamelCasePattern(String stringPattern) {", "+\tif (stringPattern == null) return true;", "+\t// verify sting pattern validity", "+\tint length = stringPattern.length();", "+\tboolean validCamelCase = true;", "+\tboolean lowerCamelCase = false;", "+\tint uppercase = 0;", "+\tfor (int i=0; i<length && validCamelCase; i++) {", "+\t\tchar ch = stringPattern.charAt(i);", "+\t\tvalidCamelCase = i==0 ? ScannerHelper.isJavaIdentifierStart(ch) : ScannerHelper.isJavaIdentifierPart(ch);", "+\t\t// at least one uppercase character is need in CamelCase pattern", "+\t\t// (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=136313)", "+\t\tif (ScannerHelper.isUpperCase(ch)) uppercase++;", "+\t\tif (i==0) lowerCamelCase = uppercase == 0;", "-\treturn matchRule;", "+\tif (validCamelCase) {", "+\t\tvalidCamelCase = lowerCamelCase ? uppercase > 0 : uppercase > 1 ;", "+\t}", "+\treturn validCamelCase;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41301076b8f47c6ec3a018ac83211fed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "808ee1989aa546fef406f77c37a96f979df5219f", "commitAfterChange": "2528937997399f978f8c04c6800f46f957dbd27f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 23, "signatureBeforeChange": " public static int validateMatchRule(String stringPattern, int matchRule)", "signatureAfterChange": " public static int validateMatchRule(String stringPattern, int matchRule)", "diff": ["-\t\tif ((matchRule & R_PATTERN_MATCH) != 0 || (matchRule & R_PREFIX_MATCH) != 0 || (matchRule & R_CAMELCASE_MATCH) != 0) {", "+\t\tif ((matchRule & R_PATTERN_MATCH) != 0 || (matchRule & R_PREFIX_MATCH) != 0 || ", "+\t\t\t(matchRule & R_CAMEL_CASE_MATCH) != 0 || (matchRule & R_CAMELCASE_MATCH) != 0) {", "-\t\t// reset pattern match bit if any", "+\t\t// reset pattern match flag if any", "-\t\t// remove Camel Case and Prefix match bits if any", "+\t\t// remove Camel Case and Prefix match flags if any", "+\t\tmatchRule &= ~R_CAMEL_CASE_MATCH;", "-\tif ((matchRule & R_CAMELCASE_MATCH) != 0) {", "+\tif ((matchRule & R_CAMEL_CASE_MATCH) != 0) {", "+\t\tmatchRule &= ~R_CAMELCASE_MATCH; // in case of some user specify both constants", "-\t\t// Verify bits compatibility", "+\t\t// Verify flags compatibility", "+\t\tif (!validCamelCase) {", "+\t\t\tmatchRule &= ~R_CAMEL_CASE_MATCH;", "+\t\t\tmatchRule |= R_PREFIX_MATCH;", "+\t\t}", "+\t}", "+", "+\t// Verify deprecated Camel Case match rule for backward compatibility", "+\telse if ((matchRule & R_CAMELCASE_MATCH) != 0) {", "+\t\t// Verify sting pattern validity", "+\t\tint length = stringPattern.length();", "+\t\tboolean validCamelCase = true;", "+\t\tboolean uppercase = false;", "+\t\tfor (int i=0; i<length && validCamelCase; i++) {", "+\t\t\tchar ch = stringPattern.charAt(i);", "+\t\t\tvalidCamelCase = i==0 ? ScannerHelper.isJavaIdentifierStart(ch) : ScannerHelper.isJavaIdentifierPart(ch);", "+\t\t\t// at least one uppercase character is need in CamelCase pattern", "+\t\t\t// (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=136313)", "+\t\t\tif (!uppercase) uppercase = ScannerHelper.isUpperCase(ch);", "+\t\t}", "+\t\tvalidCamelCase = validCamelCase && uppercase;", "+\t\t// Verify flags compatibility"]}], "num": 51318}
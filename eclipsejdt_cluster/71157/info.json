{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0ec3a9aa4be1465a5465f7ed07899240", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4365e0c9de814f88bb5e47b240c9ba8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic TypeBinding checkFieldAccess(BlockScope scope)", "signatureAfterChange": "  public TypeBinding checkFieldAccess(BlockScope scope)", "diff": ["-\t", "-\tpublic TypeBinding checkFieldAccess(BlockScope scope) {", "-\t", "-\t\tFieldBinding fieldBinding = (FieldBinding) binding;", "-\t\t", "-\t\tbits &= ~RestrictiveFlagMASK; // clear bits", "-\t\tbits |= Binding.FIELD;", "-\t\tMethodScope methodScope = scope.methodScope();", "-\t\tboolean isStatic = fieldBinding.isStatic();", "-\t\tif (!isStatic) {", "-\t\t\t// must check for the static status....", "-\t\t\tif (methodScope.isStatic) {", "-\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, fieldBinding);", "-\t\t\t\tthis.constant = Constant.NotAConstant;", "-\t\t\t\treturn fieldBinding.type;", "-\t\t\t}", "-\t\t}", "-\t\tthis.constant = fieldBinding.constant();", "-\t", "-\t\tif (isFieldUseDeprecated(fieldBinding, scope, (this.bits & IsStrictlyAssigned) !=0))", "-\t\t\tscope.problemReporter().deprecatedField(fieldBinding, this);", "-\t", "-\t\tif ((this.bits & IsStrictlyAssigned) == 0", "-\t\t\t\t&& methodScope.enclosingSourceType() == fieldBinding.original().declaringClass", "-\t\t\t\t&& methodScope.lastVisibleFieldID >= 0", "-\t\t\t\t&& fieldBinding.id >= methodScope.lastVisibleFieldID", "-\t\t\t\t&& (!fieldBinding.isStatic() || methodScope.isStatic)) {", "-\t\t\tscope.problemReporter().forwardReference(this, 0, methodScope.enclosingSourceType());", "-\t\t\tthis.bits |= ASTNode.IgnoreNoEffectAssignCheck;", "-\t\t}", "-\t\treturn fieldBinding.type;", "-\t", "+", "+public TypeBinding checkFieldAccess(BlockScope scope) {", "+\tFieldBinding fieldBinding = (FieldBinding) this.binding;", "+\t", "+\tthis.bits &= ~ASTNode.RestrictiveFlagMASK; // clear bits", "+\tthis.bits |= Binding.FIELD;", "+\tMethodScope methodScope = scope.methodScope();", "+\tboolean isStatic = fieldBinding.isStatic();", "+\tif (!isStatic) {", "+\t\t// must check for the static status....", "+\t\tif (methodScope.isStatic) {", "+\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, fieldBinding);", "+\t\t\tthis.constant = Constant.NotAConstant;", "+\t\t\treturn fieldBinding.type;", "+\tthis.constant = fieldBinding.constant();", "+", "+\tif (isFieldUseDeprecated(fieldBinding, scope, (this.bits & ASTNode.IsStrictlyAssigned) !=0))", "+\t\tscope.problemReporter().deprecatedField(fieldBinding, this);", "+", "+\tif ((this.bits & ASTNode.IsStrictlyAssigned) == 0", "+\t\t\t&& methodScope.enclosingSourceType() == fieldBinding.original().declaringClass", "+\t\t\t&& methodScope.lastVisibleFieldID >= 0", "+\t\t\t&& fieldBinding.id >= methodScope.lastVisibleFieldID", "+\t\t\t&& (!fieldBinding.isStatic() || methodScope.isStatic)) {", "+\t\tscope.problemReporter().forwardReference(this, 0, methodScope.enclosingSourceType());", "+\t\tthis.bits |= ASTNode.IgnoreNoEffectAssignCheck;", "+\t}", "+\treturn fieldBinding.type;", "+", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8981661dbb2d7576bca95729bacddd7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "931e434bb3e4b9f62577b10f8123cfc028893969", "commitAfterChange": "c0b519c3b149b13ea0f307f0d3414359b2cf0639", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic TypeBinding checkFieldAccess(BlockScope scope)", "signatureAfterChange": " public TypeBinding checkFieldAccess(BlockScope scope)", "diff": ["-\t */", "-\tpublic TypeBinding checkFieldAccess(BlockScope scope) {", "-\t\tFieldBinding fieldBinding = (FieldBinding) binding;", "-\t\tMethodScope methodScope = scope.methodScope();", "-\t\t// check for forward references", "-\t\tif (this.indexOfFirstFieldBinding == 1", "-\t\t\t\t&& methodScope.enclosingSourceType() == fieldBinding.original().declaringClass", "-\t\t\t\t&& methodScope.lastVisibleFieldID >= 0", "-\t\t\t\t&& fieldBinding.id >= methodScope.lastVisibleFieldID", "-\t\t\t\t&& (!fieldBinding.isStatic() || methodScope.isStatic)) {", "-\t\t\tscope.problemReporter().forwardReference(this, 0, methodScope.enclosingSourceType());", "-\t\t}", "-\t\tbits &= ~RestrictiveFlagMASK; // clear bits", "-\t\tbits |= Binding.FIELD;", "-\t\treturn getOtherFieldBindings(scope);", "+ */", "+public TypeBinding checkFieldAccess(BlockScope scope) {", "+\tFieldBinding fieldBinding = (FieldBinding) this.binding;", "+\tMethodScope methodScope = scope.methodScope();", "+\t// check for forward references", "+\tif (this.indexOfFirstFieldBinding == 1", "+\t\t\t&& methodScope.enclosingSourceType() == fieldBinding.original().declaringClass", "+\t\t\t&& methodScope.lastVisibleFieldID >= 0", "+\t\t\t&& fieldBinding.id >= methodScope.lastVisibleFieldID", "+\t\t\t&& (!fieldBinding.isStatic() || methodScope.isStatic)) {", "+\t\tscope.problemReporter().forwardReference(this, 0, methodScope.enclosingSourceType());", "+\t}", "+\tthis.bits &= ~ASTNode.RestrictiveFlagMASK; // clear bits", "+\tthis.bits |= Binding.FIELD;", "+\treturn getOtherFieldBindings(scope);", "+}"]}], "num": 71157}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "372f6da4782c166d060fe0f186a78773", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99a9294553aeac6bb2e5d683109831da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void test012()", "signatureAfterChange": " public void test012()", "diff": ["-        \"{0}\\n\" + ", "-\t\t\" \\n\" + ", "-\t\t\" Usage: <options> <source files | directories>\\n\" + ", "-\t\t\" If directories are specified, then their source contents are compiled.\\n\" + ", "-\t\t\" Possible options are listed below. Options enabled by default are prefixed with ''+''\\n\" + ", "-\t\t\" \\n\" + ", "-\t\t\" Classpath options:\\n\" + ", "-\t\t\"    -cp -classpath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" + ", "-\t\t\"                       specify location for application classes and sources. Each\\n\" + ", "-\t\t\"                       directory or file can specify access rules for types between\\n\" + ", "-\t\t\"                       ''['' and '']'' (e.g. [-X] to forbid access to type X, [~X] to\\n\" + ", "-\t\t\"                       discourage access to type X, [+p/X:-p/*] to forbid access to all\\n\" + ", "-\t\t\"                       types in package p but allow access to p/X)\\n\" + ", "-\t\t\"    -bootclasspath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" + ", "-\t\t\"                       specify location for system classes. Each directory or file can\\n\" + ", "-\t\t\"                       specify access rules for types between ''['' and '']''\\n\" + ", "-\t\t\"    -sourcepath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" + ", "-\t\t\"                       specify location for application sources. Each directory or file can\\n\" + ", "-\t\t\"                       specify access rules for types between ''['' and '']''\\n\" + ", "-\t\t\"                       .class files created from source files contained in a jar file are put in the\\n\" + ", "-\t\t\"                       user.dir folder in case no destination directory is specified.\\n\" + ", "-\t\t\"    -extdirs <directories separated by \" + File.pathSeparator + \">\\n\" + ", "-\t\t\"                       specify location for extension zip/jar files\\n\" + ", "-\t\t\"    -endorseddirs <directories separated by \" + File.pathSeparator + \">\\n\" + ", "-\t\t\"                       specify location for endorsed zip/jar files\\n\" + ", "-\t\t\"    -d <dir>           destination directory (if omitted, no directory is created)\\n\" + ", "-\t\t\"    -d none            generate no .class files\\n\" + ", "-\t\t\"    -encoding <enc>    specify custom encoding for all sources. Each file/directory can override it\\n\" + ", "-\t\t\"                       when suffixed with ''[''<enc>'']'' (e.g. X.java[utf8])\\n\" + ", "-\t\t\" \\n\" + ", "-\t\t\" Compliance options:\\n\" + ", "-\t\t\"    -1.3               use 1.3 compliance level (implicit -source 1.3 -target 1.1)\\n\" + ", "-\t\t\"    -1.4             + use 1.4 compliance level (implicit -source 1.3 -target 1.2)\\n\" + ", "-\t\t\"    -1.5               use 1.5 compliance level (implicit -source 1.5 -target 1.5)\\n\" + ", "-\t\t\"    -1.6               use 1.6 compliance level (implicit -source 1.6 -target 1.6)\\n\" + ", "-\t\t\"    -source <version>  set source level: 1.3 to 1.6 (or 6 or 6.0)\\n\" + ", "-\t\t\"    -target <version>  set classfile target level: 1.1 to 1.6 (or 6 or 6.0)\\n\" + ", "-\t\t\" \\n\" + ", "-\t\t\" Warning options:\\n\" + ", "-\t\t\"    -deprecation     + deprecation outside deprecated code\\n\" + ", "-\t\t\"    -nowarn            disable all warnings\\n\" + ", "-\t\t\"    -warn:none         disable all warnings\\n\" + ", "-\t\t\"    -warn:<warnings separated by ,>    enable exactly the listed warnings\\n\" + ", "-\t\t\"    -warn:+<warnings separated by ,>   enable additional warnings\\n\" + ", "-\t\t\"    -warn:-<warnings separated by ,>   disable specific warnings\\n\" + ", "-\t\t\"      allDeprecation       deprecation including inside deprecated code\\n\" + ", "-\t\t\"      allJavadoc           invalid or missing javadoc\\n\" + ", "-\t\t\"      assertIdentifier   + ''assert'' used as identifier\\n\" + ", "-\t\t\"      boxing               autoboxing conversion\\n\" + ", "-\t\t\"      charConcat         + char[] in String concat\\n\" + ", "-\t\t\"      conditionAssign      possible accidental boolean assignment\\n\" + ", "-\t\t\"      constructorName    + method with constructor name\\n\" + ", "-\t\t\"      dep-ann              missing @Deprecated annotation\\n\" + ", "-\t\t\"      deprecation        + deprecation outside deprecated code\\n\" + ", "-\t\t\"      discouraged        + use of types matching a discouraged access rule\\n\" + ", "-\t\t\"      emptyBlock           undocumented empty block\\n\" + ", "-\t\t\"      enumSwitch           incomplete enum switch\\n\" + ", "-\t\t\"      fallthrough          possible fall-through case\\n\" + ", "-\t\t\"      fieldHiding          field hiding another variable\\n\" + ", "-\t\t\"      finalBound           type parameter with final bound\\n\" + ", "-\t\t\"      finally            + finally block not completing normally\\n\" + ", "-\t\t\"      forbidden          + use of types matching a forbidden access rule\\n\" + ", "-\t\t\"      hiding               macro for fieldHiding, localHiding, typeHiding and maskedCatchBlock\\n\" + ", "-\t\t\"      incomplete-switch    same as enumSwitch\\n\" + ", "-\t\t\"      indirectStatic       indirect reference to static member\\n\" + ", "-\t\t\"      intfAnnotation     + annotation type used as super interface\\n\" + ", "-\t\t\"      intfNonInherited   + interface non-inherited method compatibility\\n\" + ", "-\t\t\"      javadoc              invalid javadoc\\n\" + ", "-\t\t\"      localHiding          local variable hiding another variable\\n\" + ", "-\t\t\"      maskedCatchBlock   + hidden catch block\\n\" + ", "-\t\t\"      nls                  string literal lacking non-nls tag //$NON-NLS-<n>$\\n\" + ", "-\t\t\"      noEffectAssign     + assignment without effect\\n\" + ", "-\t\t\"      null                 missing or redundant null check\\n\" + ", "-\t\t\"      over-ann             missing @Override annotation\\n\" + ", "-\t\t\"      paramAssign          assignment to a parameter\\n\" + ", "-\t\t\"      pkgDefaultMethod   + attempt to override package-default method\\n\" + ", "-\t\t\"      raw                  usage of raw type\\n\" + ", "-\t\t\"      semicolon            unnecessary semicolon, empty statement\\n\" + ", "-\t\t\"      serial             + missing serialVersionUID\\n\" + ", "-\t\t\"      specialParamHiding   constructor or setter parameter hiding another field\\n\" + ", "-\t\t\"      static-access        macro for indirectStatic and staticReceiver\\n\" + ", "-\t\t\"      staticReceiver     + non-static reference to static member\\n\" + ", "-\t\t\"      suppress           + enable @SuppressWarnings\\n\" + ", "-\t\t\"      synthetic-access     same as syntheticAccess\\n\" + ", "-\t\t\"      syntheticAccess      synthetic access for innerclass\\n\" + ", "-\t\t\"      tasks(<tags separated by |>) tasks identified by tags inside comments\\n\" + ", "-\t\t\"      typeHiding         + type parameter hiding another type\\n\" + ", "-\t\t\"      unchecked          + unchecked type operation\\n\" + ", "-\t\t\"      unnecessaryElse      unnecessary else clause\\n\" + ", "-\t\t\"      unqualified-field-access same as unqualifiedField\\n\" + ", "-\t\t\"      unqualifiedField     unqualified reference to field\\n\" + ", "-\t\t\"      unused               macro for unusedArgument, unusedImport, unusedLabel,\\n\" + ", "-\t\t\"                               unusedLocal, unusedPrivate and unusedThrown\\n\" + ", "-\t\t\"      unusedArgument       unread method parameter\\n\" + ", "-\t\t\"      unusedImport       + unused import declaration\\n\" + ", "-\t\t\"      unusedLabel        + unused label\\n\" + ", "-\t\t\"      unusedLocal        + unread local variable\\n\" + ", "-\t\t\"      unusedPrivate      + unused private member declaration\\n\" + ", "-\t\t\"      unusedThrown         unused declared thrown exception\\n\" + ", "-\t\t\"      uselessTypeCheck     unnecessary cast/instanceof operation\\n\" + ", "-\t\t\"      varargsCast        + varargs argument need explicit cast\\n\" + ", "-\t\t\"      warningToken       + unhandled warning token in @SuppressWarnings\\n\" + ", "-\t\t\" \\n\" + ", "-\t\t\" Debug options:\\n\" + ", "-\t\t\"    -g[:lines,vars,source] custom debug info\\n\" + ", "-\t\t\"    -g:lines,source  + both lines table and source debug info\\n\" + ", "-\t\t\"    -g                 all debug info\\n\" + ", "-\t\t\"    -g:none            no debug info\\n\" + ", "-\t\t\"    -preserveAllLocals preserve unused local vars for debug purpose\\n\" + ", "-\t\t\" \\n\" + ", "-\t\t\" Ignored options:\\n\" + ", "-\t\t\"    -J<option>         pass option to virtual machine (ignored)\\n\" + ", "-\t\t\"    -X<option>         specify non-standard option (ignored)\\n\" + ", "-\t\t\"    -X                 print non-standard options and exit (ignored)\\n\" + ", "-\t\t\"    -O                 optimize for execution time (ignored)\\n\" + ", "-\t\t\" \\n\" + ", "-\t\t\" Advanced options:\\n\" + ", "-\t\t\"    @<file>            read command line arguments from file\\n\" + ", "-\t\t\"    -maxProblems <n>   max number of problems per compilation unit (100 by default)\\n\" + ", "-\t\t\"    -log <file>        log to a file. If the file extension is ''.xml'', then the log\\n\" + ", "-\t\t\"                       will be a xml file.\\n\" + ", "-\t\t\"    -proceedOnError    do not stop at first error, dumping class files with problem methods\\n\" + ", "-\t\t\"    -verbose           enable verbose output\\n\" + ", "-\t\t\"    -referenceInfo     compute reference info\\n\" + ", "-\t\t\"    -progress          show progress (only in -log mode)\\n\" + ", "-\t\t\"    -time              display speed information \\n\" + ", "-\t\t\"    -noExit            do not call System.exit(n) at end of compilation (n==0 if no error)\\n\" + ", "-\t\t\"    -repeat <n>        repeat compilation process <n> times for perf analysis\\n\" + ", "-\t\t\"    -inlineJSR         inline JSR bytecode (implicit if target >= 1.5)\\n\" + ", "-\t\t\"    -enableJavadoc     consider references in javadoc\\n\" + ", "-\t\t\"    -Xemacs            used to enable emacs-style output\\n\" + ", "-\t\t\" \\n\" + ", "-\t\t\"    -? -help           print this help message\\n\" + ", "-\t\t\"    -v -version        print compiler version\\n\" + ", "-\t\t\"    -showversion       print compiler version and continue\\n\" + ", "-\t\t\"\\n\";", "+        \"{0} {1}\\n\" + ", "+        \"{2}\\n\" + ", "+        \" \\n\" + ", "+        \" Usage: <options> <source files | directories>\\n\" + ", "+        \" If directories are specified, then their source contents are compiled.\\n\" + ", "+        \" Possible options are listed below. Options enabled by default are prefixed\\n\" + ", "+        \" with ''+''.\\n\" + ", "+        \" \\n\" + ", "+        \" Classpath options:\\n\" + ", "+        \"    -cp -classpath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" + ", "+        \"                       specify location for application classes and sources.\\n\" + ", "+        \"                       Each directory or file can specify access rules for\\n\" + ", "+        \"                       types between ''['' and '']'' (e.g. [-X] to forbid\\n\" + ", "+        \"                       access to type X, [~X] to discourage access to type X,\\n\" + ", "+        \"                       [+p/X:-p/*] to forbid access to all types in package p\\n\" + ", "+        \"                       but allow access to p/X)\\n\" + ", "+        \"    -bootclasspath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" + ", "+        \"                       specify location for system classes. Each directory or\\n\" + ", "+        \"                       file can specify access rules for types between ''[''\\n\" + ", "+        \"                       and '']''\\n\" + ", "+        \"    -sourcepath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" + ", "+        \"                       specify location for application sources. Each directory\\n\" + ", "+        \"                       or file can specify access rules for types between ''[''\\n\" + ", "+        \"                       and '']''.\\n\" + ", "+        \"                       .class files created from source files contained in a\\n\" + ", "+        \"                       jar file are put in the user.dir folder in case no\\n\" + ", "+        \"                       destination directory is specified.\\n\" + ", "+        \"    -extdirs <directories separated by \" + File.pathSeparator + \">\\n\" + ", "+        \"                       specify location for extension zip/jar files\\n\" + ", "+        \"    -endorseddirs <directories separated by \" + File.pathSeparator + \">\\n\" + ", "+        \"                       specify location for endorsed zip/jar files\\n\" + ", "+        \"    -d <dir>           destination directory (if omitted, no directory is\\n\" + ", "+        \"                       created)\\n\" + ", "+        \"    -d none            generate no .class files\\n\" + ", "+        \"    -encoding <enc>    specify custom encoding for all sources. Each\\n\" + ", "+        \"                       file/directory can override it when suffixed with\\n\" + ", "+        \"                       ''[''<enc>'']'' (e.g. X.java[utf8])\\n\" + ", "+        \" \\n\" + ", "+        \" Compliance options:\\n\" + ", "+        \"    -1.3               use 1.3 compliance level (implicit -source 1.3\\n\" + ", "+        \"                       -target 1.1)\\n\" + ", "+        \"    -1.4             + use 1.4 compliance level (implicit -source 1.3\\n\" + ", "+        \"                       -target 1.2)\\n\" + ", "+        \"    -1.5               use 1.5 compliance level (implicit -source 1.5\\n\" + ", "+        \"                       -target 1.5)\\n\" + ", "+        \"    -1.6               use 1.6 compliance level (implicit -source 1.6\\n\" + ", "+        \"                       -target 1.6)\\n\" + ", "+        \"    -source <version>  set source level: 1.3 to 1.6 (or 6 or 6.0)\\n\" + ", "+        \"    -target <version>  set classfile target level: 1.1 to 1.6 (or 6 or 6.0)\\n\" + ", "+        \" \\n\" + ", "+        \" Warning options:\\n\" + ", "+        \"    -deprecation     + deprecation outside deprecated code\\n\" + ", "+        \"    -nowarn -warn:none disable all warnings\\n\" + ", "+        \"    -?:warn -help:warn display advanced warning options\\n\" + ", "+        \" \\n\" + ", "+        \" Debug options:\\n\" + ", "+        \"    -g[:lines,vars,source] custom debug info\\n\" + ", "+        \"    -g:lines,source  + both lines table and source debug info\\n\" + ", "+        \"    -g                 all debug info\\n\" + ", "+        \"    -g:none            no debug info\\n\" + ", "+        \"    -preserveAllLocals preserve unused local vars for debug purpose\\n\" + ", "+        \" \\n\" + ", "+        \" Ignored options:\\n\" + ", "+        \"    -J<option>         pass option to virtual machine (ignored)\\n\" + ", "+        \"    -X<option>         specify non-standard option (ignored)\\n\" + ", "+        \"    -X                 print non-standard options and exit (ignored)\\n\" + ", "+        \"    -O                 optimize for execution time (ignored)\\n\" + ", "+        \" \\n\" + ", "+        \" Advanced options:\\n\" + ", "+        \"    @<file>            read command line arguments from file\\n\" + ", "+        \"    -maxProblems <n>   max number of problems per compilation unit (100 by\\n\" + ", "+        \"                       default)\\n\" + ", "+        \"    -log <file>        log to a file. If the file extension is ''.xml'', then\\n\" + ", "+        \"                       the log will be a xml file.\\n\" + ", "+        \"    -proceedOnError    do not stop at first error, dumping class files with\\n\" + ", "+        \"                       problem methods\\n\" + ", "+        \"    -verbose           enable verbose output\\n\" + ", "+        \"    -referenceInfo     compute reference info\\n\" + ", "+        \"    -progress          show progress (only in -log mode)\\n\" + ", "+        \"    -time              display speed information \\n\" + ", "+        \"    -noExit            do not call System.exit(n) at end of compilation (n==0\\n\" + ", "+        \"                       if no error)\\n\" + ", "+        \"    -repeat <n>        repeat compilation process <n> times for perf analysis\\n\" + ", "+        \"    -inlineJSR         inline JSR bytecode (implicit if target >= 1.5)\\n\" + ", "+        \"    -enableJavadoc     consider references in javadoc\\n\" + ", "+        \"    -Xemacs            used to enable emacs-style output\\n\" + ", "+        \" \\n\" + ", "+        \"    -? -help           print this help message\\n\" + ", "+        \"    -v -version        print compiler version\\n\" + ", "+        \"    -showversion       print compiler version and continue\\n\" + ", "+        \"\\n\";", "-\t\t\t\tMain.bind(\"misc.version\", new String[] {", "-\t\t\t\t\tMain.bind(\"compiler.name\"),", "-\t\t\t\t\tMain.bind(\"compiler.version\"),", "-\t\t\t\t\tMain.bind(\"compiler.copyright\")", "-\t\t\t\t}),", "+\t\t\tMain.bind(\"compiler.name\"),", "+\t\t\tMain.bind(\"compiler.version\"),", "+\t\t\tMain.bind(\"compiler.copyright\")", "+\t\t// because misc.version is mono-line - reconsider if this changes", "+//\t\tMessageFormat.format(expectedOutput, new String[] {", "+//\t\t\t\tMain.bind(\"misc.version\", new String[] {", "+//\t\t\t\t\tMain.bind(\"compiler.name\"),", "+//\t\t\t\t\tMain.bind(\"compiler.version\"),", "+//\t\t\t\t\tMain.bind(\"compiler.copyright\")", "+//\t\t\t\t}),", "+\t\t\t\t// File.pathSeparator", "+\t\t}),", "+        \"\", true);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e946b2854a4a152781f28125e9c8e7ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "2d9b05bb71b127652760933dafce873a5ec0cb28", "commitAfterChange": "0e036eabfb3d0e92b314882ef7004877396ca0ce", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " public void test032()", "signatureAfterChange": " public void test032()", "diff": ["-\t        \"1. WARNING in ---OUTPUT_DIR_PLACEHOLDER---\" + File.separator + \"p\" + File.separator + \"Z.java\\n\" + ", "+\t        \"1. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/p/Z.java\\n\" + ", "-\t        \"2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---\" + File.separator + \"p\" + File.separator + \"Z.java\\n\" + ", "+\t        \"2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/p/Z.java\\n\" + ", "-\t        \"3. WARNING in ---OUTPUT_DIR_PLACEHOLDER---\" + File.separator + \"p\" + File.separator + \"Z.java\\n\" + ", "+\t        \"3. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/p/Z.java\\n\" + ", "-\t        \"4. WARNING in ---OUTPUT_DIR_PLACEHOLDER---\" + File.separator + \"p\" + File.separator + \"Z.java\\n\" + ", "+\t        \"4. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/p/Z.java\\n\" + ", "-\t        \"5. WARNING in ---OUTPUT_DIR_PLACEHOLDER---\" + File.separator + \"p\" + File.separator + \"Z.java\\n\" + ", "+\t        \"5. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/p/Z.java\\n\" + ", "-        \"1. WARNING in ---OUTPUT_DIR_PLACEHOLDER---\" + File.separator + \"p\" + File.separator + \"Z.java\\n\" + ", "+        \"1. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/p/Z.java\\n\" + ", "-        \"2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---\" + File.separator + \"p\" + File.separator + \"Z.java\\n\" + ", "+        \"2. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/p/Z.java\\n\" + ", "-        \"3. WARNING in ---OUTPUT_DIR_PLACEHOLDER---\" + File.separator + \"p\" + File.separator + \"Z.java\\n\" + ", "+        \"3. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/p/Z.java\\n\" + ", "-        \"4. WARNING in ---OUTPUT_DIR_PLACEHOLDER---\" + File.separator + \"p\" + File.separator + \"Z.java\\n\" + ", "+        \"4. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/p/Z.java\\n\" + ", "-        \"5. WARNING in ---OUTPUT_DIR_PLACEHOLDER---\" + File.separator + \"p\" + File.separator + \"Z.java\\n\" + ", "+        \"5. WARNING in ---OUTPUT_DIR_PLACEHOLDER---/p/Z.java\\n\" + "]}], "num": 20218}
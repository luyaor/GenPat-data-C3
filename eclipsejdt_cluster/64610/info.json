{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a79d55d0f8a3b9d072dbb7d97d914266", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86b793ef0a080aca475ee5836b016aa0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "953f38ab5a79c58eb5d9e90ca68723f889e48081", "commitAfterChange": "48774e458dcfc41c34b203c6488c7b9a8716e5cc", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  protected void addDependentsOf(IPath path, boolean isStructuralChange, StringSet qualifiedNames, StringSet simpleNames, StringSet rootNames)", "signatureAfterChange": "  protected void addDependentsOf(IPath path, boolean isStructuralChange, StringSet qualifiedNames, StringSet simpleNames, StringSet rootNames)", "diff": ["-\t\t\tif (CharOperation.equals(last.toCharArray(), TypeConstants.PACKAGE_INFO_NAME))", "+\t\t\tif (CharOperation.equals(last.toCharArray(), TypeConstants.PACKAGE_INFO_NAME)) {", "+\t\t\t\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=323785, in the case of default package,", "+\t\t\t\t   there is no need to blame the package itself as there can be no annotations or documentation", "+\t\t\t\t   comment tags in the package-info file that can influence the rest of the package. Just bail out", "+\t\t\t\t   so we don't touch null objects below.", "+\t\t\t\t */", "+\t\t\t\tif (path.isEmpty())", "+\t\t\t\t\treturn;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a05d048696f673c01fcd298414b49ca6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "f447e8419317d96ca676850de75b170e4276d1fc", "commitAfterChange": "0b6cbc7336ec44b9257b7aa04e8ba2a7e4c8be56", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " \t \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["+\t\tif (codegenBinding.isVarargs())", "+\t\t\treturn; // completely managed by transforming into implicit lambda expression.", "+\t\t"]}], "num": 64610}
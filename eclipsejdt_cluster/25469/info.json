{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9daf3518baed5ca59ed18de8b6bbe0fd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bba4c8b3b2993edcb79fa777a62174de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/junit/extension/TestCase.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public static List buildTestsList(Class evaluationTestClass, int inheritedDepth, int sort)", "signatureAfterChange": " public static List buildTestsList(Class evaluationTestClass, int inheritedDepth)", "diff": ["+ */", "+public static List buildTestsList(Class evaluationTestClass, int inheritedDepth) {", "+\treturn buildTestsList(evaluationTestClass, inheritedDepth, ORDERING);", "+}", "-public static List buildTestsList(Class evaluationTestClass, int inheritedDepth, int sort) {", "-\t\t\t\t\t\t\t\tif (TESTS_NUMBERS != null && !tests.contains(methName)) {", "-\t\t\t\t\t\t\t\tif (TESTS_RANGE != null && TESTS_RANGE.length == 2 && !tests.contains(methName)) {", "-\t// Add corresponding tests", "-\tif (sort>0) {", "-\t} else if (sort<0) {", "-\t\t// TODO (frederic) implement execution in reverse order"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5d077b09d21c1de7a39db3cb8004448", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/junit/extension/TestCase.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " public static List buildTestsList(Class evaluationTestClass, int inheritedDepth, int sort)", "signatureAfterChange": " public static List buildTestsList(Class evaluationTestClass, int inheritedDepth, long ordering)", "diff": ["-public static List buildTestsList(Class evaluationTestClass, int inheritedDepth, int sort) {", "+public static List buildTestsList(Class evaluationTestClass, int inheritedDepth, long ordering) {", "-\t\t\t\t\t\t\t\tif (TESTS_NUMBERS != null && !tests.contains(methName)) {", "+\t\t\t\t\t\t\t\tif (TESTS_NUMBERS != null && !testNames.contains(methName)) {", "-\t\t\t\t\t\t\t\tif (TESTS_RANGE != null && TESTS_RANGE.length == 2 && !tests.contains(methName)) {", "+\t\t\t\t\t\t\t\tif (TESTS_RANGE != null && TESTS_RANGE.length == 2 && !testNames.contains(methName)) {", "-\t// Add corresponding tests", "+\t// Order tests", "-\tif (sort>0) {", "+\tif (ordering == ALPHA_REVERSE_SORT) {", "+\t\tCollections.sort(names, Collections.reverseOrder());", "+\t} else if (ordering == ALPHABETICAL_SORT) {", "-\t} else if (sort<0) {", "-\t\t// TODO (frederic) implement execution in reverse order", "+\t} else if (ordering != NO_ORDER) {", "+\t\tCollections.shuffle(names, new Random(ordering));", "+", "+\t// Add corresponding tests"]}], "num": 25469}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f453da25d330ecd292ffe7b134fcd54d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "004ef7e1c4404218fa129922aa76d693", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "14a4ce740e51b0d8505a35bf0508f7e51e888977", "commitAfterChange": "f62fc9bd4adc94855b1129f538fa2510e9047295", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "\r \tpublic void readVariables(String xmlString) throws IOException", "signatureAfterChange": "\r \tpublic void readVariables(String xmlString) throws IOException", "diff": ["-\t\t\t\t\tvariableNamesList.add(element.getAttribute(\"name\")); //$NON-NLS-1$\r", "-\t\t\t\t\tvariablePathsList.add(new Path(element.getAttribute(\"path\"))); //$NON-NLS-1$\r", "+\t\t\t\t\tVariables.put( \r", "+\t\t\t\t\t\telement.getAttribute(\"name\"), //$NON-NLS-1$\r", "+\t\t\t\t\t\tnew Path(element.getAttribute(\"path\"))); //$NON-NLS-1$\r", "-\t\t}\r", "-\t\t// set all variables at once\r", "-\t\ttry {\r", "-\t\t\tString[] variableNames = new String[variableNamesList.size()];\r", "-\t\t\tvariableNamesList.toArray(variableNames);\r", "-\t\t\tIPath[] variablePaths = new IPath[variablePathsList.size()];\r", "-\t\t\tvariablePathsList.toArray(variablePaths);\r", "-\t\t\tJavaCore.setClasspathVariables(variableNames, variablePaths, null);\r", "-\t\t} catch(JavaModelException e){\r", "-\t\t} catch(RuntimeException e){\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cad902351d1027ec7ef67802cb81f88e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "68e3f5a0117daa8b48e901ad002544900745ebec", "commitAfterChange": "c8a4dfe61867281668d74378b928130cf2069288", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["+\t\t", "+\t\tClass javacClass = Javac.class;", "+\t\t", "+\t\t/*", "+\t\t * Read in the compiler arguments first since we might need to modify", "+\t\t * the classpath if any access rules were specified", "+\t\t */", "+\t\tString [] compilerArgs = processCompilerArguments(javacClass);", "-        Class javacClass = Javac.class;", "-\t\tcmd.createArgument().setPath(classpath);", "+\t\tcreateClasspathArgument(cmd, classpath);", "-        ", "-       // retrieve the method getCurrentCompilerArgs() using reflect", "-        // This is done to improve the compatibility to ant 1.5", "-        Method getCurrentCompilerArgsMethod = null;", "-        try {", "-\t        getCurrentCompilerArgsMethod = javacClass.getMethod(\"getCurrentCompilerArgs\", null); //$NON-NLS-1$", "-        } catch(NoSuchMethodException e) {", "-        \t// if not found, then we cannot use this method (ant 1.5)", "-        \t// debug level is only available with ant 1.5.x", "-        }", "- \t    String[] compilerArgs = null;", "-        if (getCurrentCompilerArgsMethod != null) {", "-\t\t\ttry {", "-\t\t\t\tcompilerArgs = (String[]) getCurrentCompilerArgsMethod.invoke(this.attributes, null);", "-\t\t\t} catch (IllegalAccessException e) {", "-\t\t\t\t// should never happen", "-\t\t\t} catch (InvocationTargetException e) {", "-\t\t\t\t// should never happen", "-\t\t\t}", "-    \t}"]}], "num": 688}
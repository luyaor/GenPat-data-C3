{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49270eadc0afcd449a713840112af90f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17639bb3f993b8a2392fdc5fcb598ac0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "7bf89e29c34a348a2ed388f7cdb6c1016941cf61", "commitAfterChange": "cd5adcef3921beea7df4f6703ab58225bdb4ec39", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprotected void buildBodyDeclarations(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration, TypeDeclaration typeDecl)", "signatureAfterChange": "  \tprotected void buildBodyDeclarations(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration, AbstractTypeDeclaration typeDecl)", "diff": ["+\tprotected void buildBodyDeclarations(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration, AbstractTypeDeclaration typeDecl) {", "-\t", "-\tprotected void buildBodyDeclarations(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration, TypeDeclaration typeDecl) {", "-\t\t// add body declaration in the lexical order", "-\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] members = typeDeclaration.memberTypes;", "-\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] fields = typeDeclaration.fields;", "-\t\torg.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] methods = typeDeclaration.methods;", "-\t\t", "-\t\tint fieldsLength = fields == null? 0 : fields.length;", "-\t\tint methodsLength = methods == null? 0 : methods.length;", "-\t\tint membersLength = members == null ? 0 : members.length;", "-\t\tint fieldsIndex = 0;", "-\t\tint methodsIndex = 0;", "-\t\tint membersIndex = 0;", "-\t\t", "-\t\twhile ((fieldsIndex < fieldsLength)", "-\t\t\t|| (membersIndex < membersLength)", "-\t\t\t|| (methodsIndex < methodsLength)) {", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration nextFieldDeclaration = null;", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration nextMethodDeclaration = null;", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration nextMemberDeclaration = null;", "-\t\t", "-\t\t\tint position = Integer.MAX_VALUE;", "-\t\t\tint nextDeclarationType = -1;", "-\t\t\tif (fieldsIndex < fieldsLength) {", "-\t\t\t\tnextFieldDeclaration = fields[fieldsIndex];", "-\t\t\t\tif (nextFieldDeclaration.declarationSourceStart < position) {", "-\t\t\t\t\tposition = nextFieldDeclaration.declarationSourceStart;", "-\t\t\t\t\tnextDeclarationType = 0; // FIELD", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (methodsIndex < methodsLength) {", "-\t\t\t\tnextMethodDeclaration = methods[methodsIndex];", "-\t\t\t\tif (nextMethodDeclaration.declarationSourceStart < position) {", "-\t\t\t\t\tposition = nextMethodDeclaration.declarationSourceStart;", "-\t\t\t\t\tnextDeclarationType = 1; // METHOD", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (membersIndex < membersLength) {", "-\t\t\t\tnextMemberDeclaration = members[membersIndex];", "-\t\t\t\tif (nextMemberDeclaration.declarationSourceStart < position) {", "-\t\t\t\t\tposition = nextMemberDeclaration.declarationSourceStart;", "-\t\t\t\t\tnextDeclarationType = 2; // MEMBER", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tswitch (nextDeclarationType) {", "-\t\t\t\tcase 0 :", "-\t\t\t\t\tif (nextFieldDeclaration.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "-\t\t\t\t\t\ttypeDecl.bodyDeclarations().add(convert(nextFieldDeclaration));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcheckAndAddMultipleFieldDeclaration(fields, fieldsIndex, typeDecl.bodyDeclarations());", "-\t\t\t\t\t}", "-\t\t\t\t\tfieldsIndex++;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 1 :", "-\t\t\t\t\tmethodsIndex++;", "-\t\t\t\t\tif (!nextMethodDeclaration.isDefaultConstructor() && !nextMethodDeclaration.isClinit()) {", "-\t\t\t\t\t\ttypeDecl.bodyDeclarations().add(convert(nextMethodDeclaration));", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 2 :", "-\t\t\t\t\tmembersIndex++;", "-\t\t\t\t\tASTNode node = convert(nextMemberDeclaration);", "-\t\t\t\t\tif (node == null) {", "-\t\t\t\t\t\ttypeDecl.setFlags(typeDecl.getFlags() | ASTNode.MALFORMED);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\ttypeDecl.bodyDeclarations().add(node);", "-\t\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tconvert(typeDeclaration.javadoc, typeDecl);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a86149bf81ea03048ea360bd9fa23a2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tprivate void buildBodyDeclarations(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration, TypeDeclaration typeDecl)", "signatureAfterChange": " \t \tprotected void buildBodyDeclarations(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration, TypeDeclaration typeDecl)", "diff": ["-\t", "-\tprivate void buildBodyDeclarations(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration, TypeDeclaration typeDecl) {", "-\t\t\t\t\ttypeDecl.bodyDeclarations().add(convert(nextMemberDeclaration));", "-//\t\ttypeDecl.setJavadoc(convert(typeDeclaration.javadoc));", "+\t", "+\tprotected void buildBodyDeclarations(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration, TypeDeclaration typeDecl) {", "+\t\t// add body declaration in the lexical order", "+\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] members = typeDeclaration.memberTypes;", "+\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] fields = typeDeclaration.fields;", "+\t\torg.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] methods = typeDeclaration.methods;", "+\t\t", "+\t\tint fieldsLength = fields == null? 0 : fields.length;", "+\t\tint methodsLength = methods == null? 0 : methods.length;", "+\t\tint membersLength = members == null ? 0 : members.length;", "+\t\tint fieldsIndex = 0;", "+\t\tint methodsIndex = 0;", "+\t\tint membersIndex = 0;", "+\t\t", "+\t\twhile ((fieldsIndex < fieldsLength)", "+\t\t\t|| (membersIndex < membersLength)", "+\t\t\t|| (methodsIndex < methodsLength)) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration nextFieldDeclaration = null;", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration nextMethodDeclaration = null;", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration nextMemberDeclaration = null;", "+\t\t", "+\t\t\tint position = Integer.MAX_VALUE;", "+\t\t\tint nextDeclarationType = -1;", "+\t\t\tif (fieldsIndex < fieldsLength) {", "+\t\t\t\tnextFieldDeclaration = fields[fieldsIndex];", "+\t\t\t\tif (nextFieldDeclaration.declarationSourceStart < position) {", "+\t\t\t\t\tposition = nextFieldDeclaration.declarationSourceStart;", "+\t\t\t\t\tnextDeclarationType = 0; // FIELD", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (methodsIndex < methodsLength) {", "+\t\t\t\tnextMethodDeclaration = methods[methodsIndex];", "+\t\t\t\tif (nextMethodDeclaration.declarationSourceStart < position) {", "+\t\t\t\t\tposition = nextMethodDeclaration.declarationSourceStart;", "+\t\t\t\t\tnextDeclarationType = 1; // METHOD", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (membersIndex < membersLength) {", "+\t\t\t\tnextMemberDeclaration = members[membersIndex];", "+\t\t\t\tif (nextMemberDeclaration.declarationSourceStart < position) {", "+\t\t\t\t\tposition = nextMemberDeclaration.declarationSourceStart;", "+\t\t\t\t\tnextDeclarationType = 2; // MEMBER", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tswitch (nextDeclarationType) {", "+\t\t\t\tcase 0 :", "+\t\t\t\t\tcheckAndAddMultipleFieldDeclaration(fields, fieldsIndex, typeDecl.bodyDeclarations());", "+\t\t\t\t\tfieldsIndex++;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 1 :", "+\t\t\t\t\tmethodsIndex++;", "+\t\t\t\t\tif (!nextMethodDeclaration.isDefaultConstructor() && !nextMethodDeclaration.isClinit()) {", "+\t\t\t\t\t\ttypeDecl.bodyDeclarations().add(convert(nextMethodDeclaration));", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 2 :", "+\t\t\t\t\tmembersIndex++;", "+\t\t\t\t\tASTNode node = convert(nextMemberDeclaration);", "+\t\t\t\t\tif (node == null) {", "+\t\t\t\t\t\ttypeDecl.setFlags(typeDecl.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\ttypeDecl.bodyDeclarations().add(node);", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tconvert(typeDeclaration.javadoc, typeDecl);", "+\t}"]}], "num": 21656}
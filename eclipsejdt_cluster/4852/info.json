{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "522a42671720f65a935e35514741186a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b35b6e6b85584c26296c7a6884059c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 23, "signatureBeforeChange": " public boolean innersNeedUpdate()", "signatureAfterChange": "  public boolean isCompatibleWith(TypeBinding targetType, final Scope scope)", "diff": ["+", "+public boolean isCompatibleWith(TypeBinding targetType, final Scope scope) {", "+\tif (this.argumentsHaveErrors || this.binding == null || !this.binding.isValidBinding() || targetType == null || scope == null)", "+\t\treturn false;", "+\tTypeBinding originalExpectedType = this.expectedType;", "+\ttry {", "+\t\tthis.expectedType = targetType;", "+\t\t// No need to tunnel through overload resolution. this.binding is the MSMB.", "+\t\tMethodBinding method = isPolyExpression() ? ParameterizedGenericMethodBinding.computeCompatibleMethod18(this.binding.shallowOriginal(), this.argumentTypes, scope, this) : this.binding;", "+\t\tTypeBinding returnType;", "+\t\tif (method == null || !method.isValidBinding() || (returnType = method.returnType) == null || !returnType.isValidBinding())", "+\t\t\treturn false;", "+\t\tif (method == scope.environment().arrayClone)", "+\t\t\treturnType = this.actualReceiverType;", "+\t\treturn returnType != null && returnType.capture(scope, this.sourceEnd).isCompatibleWith(targetType, scope);", "+\t} finally {", "+\t\tthis.expectedType = originalExpectedType;", "+\t}", "+}", "-}", "-public boolean innersNeedUpdate() {", "-\treturn this.innerInferenceHelper != null;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d301602587b4cf9b488f828e9a391f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected final boolean areParametersAssignable(TypeBinding[] parameters, TypeBinding[] arguments)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "diff": ["-\t// Internal use only", "-\tprotected final boolean areParametersAssignable(TypeBinding[] parameters, TypeBinding[] arguments) {", "-\t\tif (parameters == arguments)", "-\t\t\treturn true;", "-", "-\t\tint length = parameters.length;", "-\t\tif (length != arguments.length)", "-\t\t\treturn false;", "-", "-\t\tfor (int i = 0; i < length; i++)", "-\t\t\tif (parameters[i] != arguments[i])", "-\t\t\t\tif (!arguments[i].isCompatibleWith(parameters[i]))", "-\t\t\t\t\treturn false;", "-\t\treturn true;", "-\t}", "+\t */", "+\tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite) {", "+", "+\t\tTypeBinding[] genericTypeArguments = invocationSite.genericTypeArguments();", "+\t\tTypeBinding[] parameters = method.parameters;", "+\t\tif (parameters == arguments ", "+\t\t\t\t&& (method.returnType.tagBits & HasTypeVariable) == 0 ", "+\t\t\t\t&& genericTypeArguments == null)", "+\t\t\treturn method;", "+", "+\t\tint argLength = arguments.length;", "+\t\tif (argLength != parameters.length)", "+\t\t\treturn null; // incompatible", "+", "+\t\tTypeVariableBinding[] typeVariables = method.typeVariables;", "+\t\tif (typeVariables != NoTypeVariables) { // generic method", "+\t\t\tmethod = ParameterizedGenericMethodBinding.computeCompatibleMethod(method, arguments, this, invocationSite);", "+\t\t\tif (method == null) return null; // incompatible", "+\t\t\tif (!method.isValidBinding()) return method; // bound check issue is taking precedence", "+\t\t\tparameters = method.parameters; // reacquire them after type inference has performed", "+\t\t} else if (genericTypeArguments != null && !(method instanceof ParameterizedGenericMethodBinding)) {", "+\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, TypeParameterArityMismatch);", "+\t\t}", "+\t\t", "+\t\targumentCompatibility: {", "+\t\t\tfor (int i = 0; i < argLength; i++)", "+\t\t\t\tif (parameters[i] != arguments[i] && !arguments[i].isCompatibleWith(parameters[i]))", "+\t\t\t\t\tbreak argumentCompatibility;", "+\t\t\treturn method; // compatible", "+\t\t}", "+\t\tif (genericTypeArguments != null) {", "+\t\t\treturn new ProblemMethodBinding(method, method.selector, arguments, ParameterizedMethodTypeMismatch);", "+\t\t}", "+\t\treturn null; // incompatible", "+\t}"]}], "num": 4852}
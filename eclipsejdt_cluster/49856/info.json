{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4cea8eb23536d63647a2ee42d0fbf1f8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "762cbb2a42eb64946739b17d1613e299", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 23, "signatureBeforeChange": "     \tprivate EndingOffsetFinder(int[] offsets)", "signatureAfterChange": " \t \tprivate CompilationUnit[] createASTsFrom(ICompilationParticipantResult[] cpResults)", "diff": ["-    \t */", "-    \tprivate EndingOffsetFinder(int[] offsets)", "-    \t{", "-    \t\tif(offsets == null)", "-    \t\t\tthrow new IllegalArgumentException(\"argument cannot be null.\"); //$NON-NLS-1$", "-    \t\t// sort the array first", "-    \t\tArrays.sort(offsets);", "-    \t", "-    \t\t// look for duplicates.\t\t", "-    \t\tint count = 0;\t", "-    \t\tfor( int i=0, len=offsets.length; i<len; i++){", "-    \t\t\tif( i == 0 ) ; // do nothing\t\t\t\t", "-    \t\t\telse if( offsets[i-1] == offsets[i] )", "-    \t\t\t\tcontinue;\t\t\t", "-    \t\t\tcount ++;", "-    \t\t}\t", "-    \t", "-    \t\tif( count != offsets.length ){", "-    \t\t\t_sortedStartingOffset = new int[count];", "-    \t", "-    \t\t\tint index = 0;", "-    \t\t\tfor( int i=0, len=offsets.length; i<len; i++){", "-    \t\t\t\tif( i != 0 && offsets[i-1] == offsets[i] )", "-    \t\t\t\t\tcontinue;", "-    \t\t\t\t_sortedStartingOffset[index++] = offsets[i];", "-    \t\t\t}\t\t", "-    \t\t}", "-    \t\telse{", "-    \t\t\t_sortedStartingOffset = offsets;", "-    \t\t}", "-    \t\t", "-    \t\t_endingOffsets = new int[count];", "-    \t\tfor( int i=0; i<count; i++ )", "-    \t\t\t_endingOffsets[i] = 0;", "-    \t}", "+\tprivate CompilationUnit[] createASTsFrom(ICompilationParticipantResult[] cpResults){", "+\t\tfinal int size = cpResults.length;", "+\t\tfinal IFile[] files = new IFile[size];", "+\t\tint i=0;", "+\t\tfor( ICompilationParticipantResult cpResult : cpResults )", "+\t\t\tfiles[i++] = cpResult.getFile();", "+\t\treturn createASTsFrom(files);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be6c30753747157c7797a95442c7f3d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/Factory.java", "commitBeforeChange": "f254767d87ae8dd4ff9c37cc7b1a6fc568af9dda", "commitAfterChange": "966710fd0db4acefe960a5bfb33635812ee1ac6d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private static Object performNecessaryTypeConversion(final TypeMirror expectedType, \t    \t\t\t\t\t\t\t\t\t\t\t     final Object value, \t    \t\t\t\t\t\t\t\t\t\t\t     final String name, \t    \t\t\t\t\t\t\t\t\t\t\t     final EclipseMirrorImpl parent, \t    \t\t\t\t\t\t\t\t\t\t\t     final ProcessorEnvImpl env)", "signatureAfterChange": "     private static Object performNecessaryTypeConversion(final TypeMirror expectedType, \t    \t\t\t\t\t\t\t\t\t\t\t     final Object value, \t    \t\t\t\t\t\t\t\t\t\t\t     final String name, \t    \t\t\t\t\t\t\t\t\t\t\t     final EclipseMirrorImpl parent, \t    \t\t\t\t\t\t\t\t\t\t\t     final ProcessorEnvImpl env)", "diff": ["-    \t\t\t\treturn new Short((short)b);", "+    \t\t\t\treturn new Short(b);", "-    \t\t\t\treturn new Integer((short)b);", "+    \t\t\t\treturn new Integer(b);", "-    \t\t\t\treturn new Long((long)b);", "+    \t\t\t\treturn new Long(b);", "-    \t\t\t\treturn new Float((float)b);", "+    \t\t\t\treturn new Float(b);", "-    \t\t\t\treturn new Double((double)b);", "+    \t\t\t\treturn new Double(b);", "-    \t\t\t\treturn new Integer((int)s ); ", "+    \t\t\t\treturn new Integer(s); ", "-    \t\t\t\treturn new Long((long)s);", "+    \t\t\t\treturn new Long(s);", "-    \t\t\t\treturn new Float((float)s);", "+    \t\t\t\treturn new Float(s);", "-    \t\t\t\treturn new Double((double)s);", "+    \t\t\t\treturn new Double(s);", "-    \t\t\t\treturn new Integer((int)c ); ", "+    \t\t\t\treturn new Integer(c); ", "-    \t\t\t\treturn new Long((long)c);", "+    \t\t\t\treturn new Long(c);", "-    \t\t\t\treturn new Float((float)c);", "+    \t\t\t\treturn new Float(c);", "-    \t\t\t\treturn new Double((double)c);", "+    \t\t\t\treturn new Double(c);", "-    \t\t\t\treturn new Long((long)i);", "+    \t\t\t\treturn new Long(i);", "-    \t\t\t\treturn new Float((float)i);", "+    \t\t\t\treturn new Float(i);", "-    \t\t\t\treturn new Double((double)i);", "+    \t\t\t\treturn new Double(i);", "-    \t\t\t\treturn new Float((float)l);", "+    \t\t\t\treturn new Float(l);", "-    \t\t\t\treturn new Double((double)l);    \t\t", "+    \t\t\t\treturn new Double(l);    \t\t", "-    \t\t\t\treturn new Double((double)f);    \t\t", "+    \t\t\t\treturn new Double(f);    \t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c85cd6dbb7ab31215eb4464a6282682c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "8c4c03ed87f5ba92a46a042a6bd51df21862c6ec", "commitAfterChange": "660d4f80c0f997ffc360c52bab006ded2ce3e10f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "signatureAfterChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "diff": ["+    \tMap<String,String> options;", "-    \t\treturn new HashMap<String, String>();", "+    \t\toptions = new HashMap<String, String>();", "-    \t\treturn op.parse();", "+    \t\toptions = op.parse();", "+    \t", "+    \t// Add sourcepath and classpath variables", "+    \ttry {", "+    \t\tIClasspathEntry[] classpathEntries = jproj.getResolvedClasspath(true);", "+    \t\tStringBuilder classpathSB = new StringBuilder();", "+    \t\tStringBuilder sourcepathSB = new StringBuilder();", "+    \t\tboolean firstCP = true;", "+    \t\tboolean firstSP = true;", "+    \t\tfor (IClasspathEntry entry : classpathEntries) {", "+    \t\t\tint kind = entry.getEntryKind();", "+    \t\t\tif (kind == IClasspathEntry.CPE_LIBRARY) {", "+\t    \t\t\tif (firstCP) {", "+\t    \t\t\t\tfirstCP = false;", "+\t    \t\t\t}", "+\t    \t\t\telse {", "+\t    \t\t\t\tclasspathSB.append(File.pathSeparatorChar);", "+\t    \t\t\t}", "+\t    \t\t\tclasspathSB.append(entry.getPath().toFile().getAbsolutePath());", "+    \t\t\t}", "+    \t\t\telse if (kind == IClasspathEntry.CPE_SOURCE) {", "+    \t\t\t\tif (firstSP) {", "+    \t\t\t\t\tfirstSP = false;", "+    \t\t\t\t}", "+    \t\t\t\telse {", "+    \t\t\t\t\tsourcepathSB.append(File.separatorChar);", "+    \t\t\t\t}", "+    \t\t\t\tsourcepathSB.append(entry.getPath().toFile().getAbsolutePath());", "+    \t\t\t}", "+    \t\t}", "+    \t\toptions.put(\"classpath\",classpathSB.toString());", "+    \t\toptions.put(\"sourcepath\", sourcepathSB.toString());", "+    \t}", "+    \tcatch (JavaModelException jme) {", "+    \t\tAptPlugin.log(jme, \"Could not get the classpath\");", "+    \t}", "+    \t", "+    \treturn options;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e076a909c028a1b90948515e5c26828d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/typeutils/TypeUtilsProc.java", "commitBeforeChange": "e254cb1235fced696c16505589db91831c0df710", "commitAfterChange": "fdf4380d8dd2e7b1f08462c3e15a52a8d6142eb4", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "signatureAfterChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "diff": ["-\t\tif (!examinePrimitives()) {", "-\t\t\treturn false;", "-\t\t}", "-\t\t", "-\t\tif (!examineNoType()) {", "-\t\t\treturn false;", "-\t\t}", "-\t\t", "-\t\tif (!examineGetDeclaredType()) {", "-\t\t\treturn false;", "-\t\t}", "-\t\t", "-\t\tif (!examineGetDeclaredTypeParameterized()) {", "-\t\t\treturn false;", "-\t\t}", "-", "-\t\tif (!examineGetDeclaredTypeNested()) {", "-\t\t\treturn false;", "-\t\t}", "-\t\t", "-\t\tif (!examineGetArrayTypeParameterized()) {", "-\t\t\treturn false;", "+\t\ttry {", "+    \t\tif (!examinePrimitives()) {", "+    \t\t\treturn false;", "+    \t\t}", "+    \t\t", "+    \t\tif (!examineNoType()) {", "+    \t\t\treturn false;", "+    \t\t}", "+    \t\t", "+    \t\tif (!examineGetDeclaredType()) {", "+    \t\t\treturn false;", "+    \t\t}", "+    \t\t", "+    \t\tif (!examineGetDeclaredTypeParameterized()) {", "+    \t\t\treturn false;", "+    \t\t}", "+    ", "+    \t\tif (!examineGetDeclaredTypeNested()) {", "+    \t\t\treturn false;", "+    \t\t}", "+    \t\t", "+    \t\tif (!examineGetArrayTypeParameterized()) {", "+    \t\t\treturn false;", "+    \t\t}", "+    \t\t", "+    \t\tif (!examineTypesAsMemberOf()) {", "+    \t\t\treturn false;", "+    \t\t}", "+    \t\t", "+    \t\tif (!examineTypesAsMemberOfSubclass()) {", "+    \t\t    return false;", "+    \t\t}", "+\t\t} catch (RuntimeException e) {", "+\t\t    StringWriter sw = new StringWriter();", "+\t\t    PrintWriter w = new PrintWriter(sw);", "+\t\t    e.printStackTrace(w);", "+\t\t    reportError(sw.toString());", "+\t\t    return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea761cb50a61de30ebb4480da5a4ea06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "6f6bc9d0562d23a055ee9e986cf21155795a29ff", "commitAfterChange": "7f289b483e1414e7141e9f94307fbe445e3b1b34", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     private void updateProblemLength()", "signatureAfterChange": "     private void updateProblemLength()", "diff": ["+    \t", "-    \t\tint fileIndex = -1;", "-    \t\t\t\tif( fileIndex == -1 )", "-    \t\t\t\t\tfileIndex = getFileIndex(file);", "-    \t\t\t\t// -2 means it's not one of the files that we are processing.", "-    \t\t\t\tif( fileIndex != -2 )", "-    \t\t\t\t\tcount ++;", "+    \t\t\t\tcount ++;", "-    \t\tif( fileIndex != -2 ){", "-    \t\t\tif( count > 0 ){", "+    \t\tif( count > 0 ){", "+    \t\t\tfinal CompilationUnit astUnit = getAstCompilationUnit(file);", "+    \t\t\tif( astUnit != null ){", "+    \t\t\t", "-\t    \t\t\t_astUnits[fileIndex].accept( lfinder );", "+\t    \t\t\t", "+\t    \t\t\tastUnit.accept( lfinder );", "-    \t\t\t// else everything is clear.", "+    \t\t\telse{", "+        \t\t\tfor(IProblem problem : entry.getValue() ){", "+        \t\t\t\t// set the -1 source end to be the same as the source start.", "+        \t\t\t\tif( problem.getSourceEnd() < problem.getSourceStart() )", "+        \t\t\t\t\tproblem.setSourceEnd(problem.getSourceStart());", "+        \t\t\t}", "+        \t\t}", "-    \t\telse{", "-    \t\t\tfor(IProblem problem : entry.getValue() ){", "-    \t\t\t\t// set the -1 source end to be the same as the source start.", "-    \t\t\t\tif( problem.getSourceEnd() < problem.getSourceStart() )", "-    \t\t\t\t\tproblem.setSourceEnd(problem.getSourceStart());", "-    \t\t\t}", "-    \t\t}", "+    \t\t"]}], "num": 49856}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "437b0b2346c053706fc867501b2faf41", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cbaeafb584d41f09d55e51aae5dbd12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMirrorImpl.java", "commitBeforeChange": "d10c3a13f9bf3e38045d73a77dc467fa13aa4633", "commitAfterChange": "dc0f545f068e33d369e4afe03a62ea04b3af5d6b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate Object convertJDTArrayToReflectionArray(Object jdtValue, TypeBinding jdtType, Class<?> expectedType)", "signatureAfterChange": " \tprivate Object convertJDTArrayToReflectionArray(Object jdtValue, TypeBinding jdtType, Class<?> expectedType)", "diff": ["-\t\tif (!jdtType.isArrayType() || !(jdtValue instanceof Object[])) {", "-\t\t\t// TODO: wrap solo element into one-length array", "+\t\tif (!jdtType.isArrayType()) {", "+\t\t\t// the compiler says that the type binding isn't an array type; this probably means", "+\t\t\t// that there's some sort of syntax error.", "+\t\tObject[] jdtArray;", "+\t\t// See bug 261969: it's legal to pass a solo element for an array-typed value", "+\t\tif (jdtValue != null && !(jdtValue instanceof Object[])) {", "+\t\t\t// Create an array of the expected type", "+\t\t\tjdtArray = (Object[]) Array.newInstance(jdtValue.getClass(), 1);", "+\t\t\tjdtArray[0] = jdtValue;", "+\t\t} else {", "+\t\t\tjdtArray = (Object[])jdtValue;", "+\t\t}", "-\t\tObject[] jdtArray = (Object[])jdtValue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80e38612693f3a87d32c52dd0bc75d47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5d2cd7f1076b45eee90e6733e80765abd1df3d6a", "commitAfterChange": "14e86a8141996732826e41cf3c8dd392bb1fd5ba", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 114, "signatureBeforeChange": " \tpublic void updateCycleParticipants( \t\t\tIClasspathEntry[] preferredClasspath,  \t\t\tArrayList prereqChain,  \t\t\tHashSet cycleParticipants,  \t\t\tIWorkspaceRoot workspaceRoot, \t\t\tHashSet traversed)", "signatureAfterChange": " \tpublic void updateCycleParticipants( \t\t\tIClasspathEntry[] preferredClasspath,  \t\t\tArrayList prereqChain,  \t\t\tHashSet cycleParticipants,  \t\t\tIWorkspaceRoot workspaceRoot, \t\t\tHashSet traversed, \t\t\tMap preferredClasspaths)", "diff": ["-\t\t\tHashSet traversed){", "+\t\t\tHashSet traversed,", "+\t\t\tMap preferredClasspaths){", "-\t\t\tIClasspathEntry[] classpath = preferredClasspath == null ? getResolvedClasspath(true) : preferredClasspath;", "+\t\t\tIClasspathEntry[] classpath = preferredClasspath;", "+\t\t\tif (classpath == null && preferredClasspaths != null) classpath = (IClasspathEntry[])preferredClasspaths.get(this);", "+\t\t\tif (classpath == null) classpath = getResolvedClasspath(true);", "-\t\t\t\t\t\t\t\tproject.updateCycleParticipants(null, prereqChain, cycleParticipants, workspaceRoot, traversed);", "+\t\t\t\t\t\t\t\tproject.updateCycleParticipants(null, prereqChain, cycleParticipants, workspaceRoot, traversed, preferredClasspaths);"]}], "num": 26508}
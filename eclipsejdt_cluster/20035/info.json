{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "793a2df7bdfda68d6ce63267460bcea4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e6cc8d4433d03e0263e416043c437fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "0848b8a6a9afff16623dfc6b0821adb833326b41", "commitAfterChange": "29d4a1149e392c0b5c052a9202992e800f5506a5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public FlowInfo analyseCode(MethodScope initializationScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(MethodScope initializationScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\tif (this.initialization != null) {", "+\t\tif (this.binding.isNonNull()) {", "+\t\t\tint nullStatus = this.initialization.nullStatus(flowInfo, flowContext);", "+\t\t\t// check against annotation @NonNull:", "+\t\t\tif (nullStatus != FlowInfo.NON_NULL) {", "+\t\t\t\tchar[][] annotationName = initializationScope.environment().getNonNullAnnotationName();", "+\t\t\t\tinitializationScope.problemReporter().nullityMismatch(this.initialization, this.initialization.resolvedType, this.binding.type, nullStatus, annotationName);", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7946e2caccee0c3c6a8e3a8e0b4128a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "89b5443004d9ddbeb89e7694fbe0c5e6bd87d8cd", "commitAfterChange": "77977ef4d2299bee1b96b81654af812c0dcdac27", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic static CompilationUnitDeclaration resolve( \t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\tIJavaProject javaProject, \t\tNodeSearcher nodeSearcher, \t\tMap options, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic static CompilationUnitDeclaration resolve( \t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\tIJavaProject javaProject, \t\tNodeSearcher nodeSearcher, \t\tMap options, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\tIProgressMonitor monitor)", "-\t\tthrows JavaModelException {", "+\t\tIProgressMonitor monitor) throws JavaModelException {", "-\t\t\t\t\ttrue); // generate code\t\t\t\t\t", "+\t\t\t\t\ttrue); // generate code", "+\t\t\tif (resolver.hasCompilationAborted) {", "+\t\t\t\t// the bindings could not be resolved due to missing types in name environment", "+\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=86541", "+\t\t\t\tCompilationUnitDeclaration unitDeclaration = parse(sourceUnit, nodeSearcher, options);", "+\t\t\t\tfinal int problemCount = unit.compilationResult.problemCount;", "+\t\t\t\tif (problemCount != 0) {", "+\t\t\t\t\tunitDeclaration.compilationResult.problems = new IProblem[problemCount];", "+\t\t\t\t\tSystem.arraycopy(unit.compilationResult.problems, 0, unitDeclaration.compilationResult.problems, 0, problemCount);", "+\t\t\t\t\tunitDeclaration.compilationResult.problemCount = problemCount;", "+\t\t\t\t}", "+\t\t\t\treturn unitDeclaration;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fcfff05c2658647a1a79e13b557c97c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "b14a6c4d09a9bece1bab75937908ff44df19fa09", "commitAfterChange": "a846071c58f9098177eef02be0134294158f9c4f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public FlowInfo analyseCode(MethodScope initializationScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(MethodScope initializationScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\tif (this.initialization != null) {", "+\t\tif (this.binding.isNonNull()) {", "+\t\t\tint nullStatus = this.initialization.nullStatus(flowInfo, flowContext);", "+\t\t\t// check against annotation @NonNull:", "+\t\t\tif (nullStatus != FlowInfo.NON_NULL) {", "+\t\t\t\tchar[][] annotationName = initializationScope.environment().getNonNullAnnotationName();", "+\t\t\t\tinitializationScope.problemReporter().nullityMismatch(this.initialization, this.initialization.resolvedType, this.binding.type, nullStatus, annotationName);", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 20035}
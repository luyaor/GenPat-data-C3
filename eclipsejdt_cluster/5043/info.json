{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30def5ad877ab7d25fd236978c137a7a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "867a3967f7ad6acbe2da5dd0019b4d5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 248, "methodNumberAfterChange": 322, "signatureBeforeChange": "\t \t \tpublic void testTypeDeclarationStatement()", "signatureAfterChange": "\t \t \tpublic void testTypeDeclarationStatement()", "diff": ["-\t\tTypeDeclaration x1 = ast.newTypeDeclaration();", "+\t\tAbstractTypeDeclaration x1 = ast.newTypeDeclaration();", "-\t\tassertTrue(x.getTypeDeclaration() == x1);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tassertTrue(x.getTypeDeclaration() == x1);", "+\t\t} else {", "+\t\t\tassertTrue(x.getDeclaration() == x1);", "+\t\t}", "-\t\tgenericPropertyTest(x, new Property(\"TypeDeclaration\", true, TypeDeclaration.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tTypeDeclaration result = targetAst.newTypeDeclaration();", "-\t\t\t\tif (parented) {", "-\t\t\t\t\ttargetAst.newTypeDeclarationStatement(result);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tgenericPropertyTest(x, new Property(\"TypeDeclaration\", true, TypeDeclaration.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tTypeDeclaration result = targetAst.newTypeDeclaration();", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newTypeDeclarationStatement(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t\tpublic ASTNode wrap() {", "-\t\t\t\t// return TypeDeclaration that embeds x", "-\t\t\t\tTypeDeclaration s1 = ast.newTypeDeclaration();", "-\t\t\t\tMethodDeclaration s2 = ast.newMethodDeclaration();", "-\t\t\t\ts1.bodyDeclarations().add(s2);", "-\t\t\t\tBlock s3 = ast.newBlock();", "-\t\t\t\ts2.setBody(s3);", "-\t\t\t\ts3.statements().add(x);", "-\t\t\t\treturn s1;", "-\t\t\t}", "-\t\t\tpublic void unwrap() {", "-\t\t\t\tBlock s3 = (Block) x.getParent();", "-\t\t\t\ts3.statements().remove(x);", "-\t\t\t}", "-\t\t\tpublic ASTNode get() {", "-\t\t\t\treturn x.getTypeDeclaration();", "-\t\t\t}", "-\t\t\tpublic void set(ASTNode value) {", "-\t\t\t\tx.setTypeDeclaration((TypeDeclaration) value);", "-\t\t\t}", "-\t\t});", "-", "-\t}\t", "+\t\t\t\tpublic ASTNode wrap() {", "+\t\t\t\t\t// return TypeDeclaration that embeds x", "+\t\t\t\t\tTypeDeclaration s1 = ast.newTypeDeclaration();", "+\t\t\t\t\tMethodDeclaration s2 = ast.newMethodDeclaration();", "+\t\t\t\t\ts1.bodyDeclarations().add(s2);", "+\t\t\t\t\tBlock s3 = ast.newBlock();", "+\t\t\t\t\ts2.setBody(s3);", "+\t\t\t\t\ts3.statements().add(x);", "+\t\t\t\t\treturn s1;", "+\t\t\t\t}", "+\t\t\t\tpublic void unwrap() {", "+\t\t\t\t\tBlock s3 = (Block) x.getParent();", "+\t\t\t\t\ts3.statements().remove(x);", "+\t\t\t\t}", "+\t\t\t\tpublic ASTNode get() {", "+\t\t\t\t\treturn x.getTypeDeclaration();", "+\t\t\t\t}", "+\t\t\t\tpublic void set(ASTNode value) {", "+\t\t\t\t\tx.setTypeDeclaration((TypeDeclaration) value);", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\t", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tgenericPropertyTest(x, new Property(\"Declaration\", true, AbstractTypeDeclaration.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tAbstractTypeDeclaration result = targetAst.newTypeDeclaration();", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newTypeDeclarationStatement(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t\tpublic ASTNode wrap() {", "+\t\t\t\t\t// return TypeDeclaration that embeds x", "+\t\t\t\t\tTypeDeclaration s1 = ast.newTypeDeclaration();", "+\t\t\t\t\tMethodDeclaration s2 = ast.newMethodDeclaration();", "+\t\t\t\t\ts1.bodyDeclarations().add(s2);", "+\t\t\t\t\tBlock s3 = ast.newBlock();", "+\t\t\t\t\ts2.setBody(s3);", "+\t\t\t\t\ts3.statements().add(x);", "+\t\t\t\t\treturn s1;", "+\t\t\t\t}", "+\t\t\t\tpublic void unwrap() {", "+\t\t\t\t\tBlock s3 = (Block) x.getParent();", "+\t\t\t\t\ts3.statements().remove(x);", "+\t\t\t\t}", "+\t\t\t\tpublic ASTNode get() {", "+\t\t\t\t\treturn x.getDeclaration();", "+\t\t\t\t}", "+\t\t\t\tpublic void set(ASTNode value) {", "+\t\t\t\t\tx.setDeclaration((AbstractTypeDeclaration) value);", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6cafd946881c04830fdd15b9662013e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 129, "signatureBeforeChange": "  \tpublic void testArrayType()", "signatureAfterChange": " \tpublic void testArrayType()", "diff": ["+\t}", "-\t\tassertTrue(x.getComponentType().getParent() == x);", "+\t\tif (this.ast.apiLevel() < AST.JLS8) {", "+\t\t\tassertTrue(getArrayComponentType(x).getParent() == x);", "+\t\t} else {", "+\t\t\tassertTrue(x.getElementType().getParent() == x);", "+\t\t}", "-\t\tgenericPropertyTest(x, new Property(\"ComponentType\", true, Type.class) { //$NON-NLS-1$", "-\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "-\t\t\t\tSimpleType result = targetAst.newSimpleType(", "-\t\t\t\t\ttargetAst.newSimpleName(\"a\")); //$NON-NLS-1$", "-\t\t\t\tif (parented) {", "-\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\tif (this.ast.apiLevel() < AST.JLS8) {", "+\t\t\tgenericPropertyTest(x, new Property(\"ComponentType\", true, Type.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tSimpleType result = targetAst.newSimpleType(", "+\t\t\t\t\t\ttargetAst.newSimpleName(\"a\")); //$NON-NLS-1$", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t\tpublic ASTNode wrap() {", "-\t\t\t\tArrayType result = ASTTest.this.ast.newArrayType(x);", "-\t\t\t\treturn result;", "-\t\t\t}", "-\t\t\tpublic void unwrap() {", "-\t\t\t\tArrayType a = (ArrayType) x.getParent();", "-\t\t\t\ta.setComponentType(ASTTest.this.ast.newPrimitiveType(PrimitiveType.INT));", "-\t\t\t}", "-\t\t\tpublic ASTNode get() {", "-\t\t\t\treturn x.getComponentType();", "-\t\t\t}", "-\t\t\tpublic void set(ASTNode value) {", "-\t\t\t\tx.setComponentType((Type) value);", "-\t\t\t}", "-\t\t});", "+\t\t\t\tpublic ASTNode wrap() {", "+\t\t\t\t\tArrayType result = ASTTest.this.ast.newArrayType(x);", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t\tpublic void unwrap() {", "+\t\t\t\t\tArrayType a = (ArrayType) x.getParent();", "+\t\t\t\t\tsetArrayComponentType(a, ASTTest.this.ast.newPrimitiveType(PrimitiveType.INT));", "+\t\t\t\t}", "+\t\t\t\tpublic ASTNode get() {", "+\t\t\t\t\treturn getArrayComponentType(x);", "+\t\t\t\t}", "+\t\t\t\tpublic void set(ASTNode value) {", "+\t\t\t\t\tsetArrayComponentType(x, (Type) value);", "+\t\t\t\t}", "+\t\t\t});", "-\t\tx.setComponentType(", "-\t\t\tthis.ast.newArrayType(this.ast.newPrimitiveType(PrimitiveType.INT), 4));", "+\t\t\tsetArrayComponentType(x,", "+\t\t\t\tthis.ast.newArrayType(this.ast.newPrimitiveType(PrimitiveType.INT), 4));", "+\t\t\tassertTrue(x.getDimensions() == 5);", "+\t\t\tassertTrue(x.getElementType().isPrimitiveType());", "+\t\t\tfinal ArrayType x3 = this.ast.newArrayType(x, 2);", "+\t\t\tassertTrue(x3.getDimensions() == 7);", "+\t\t} else {", "+\t\t\tgenericPropertyTest(x, new Property(\"ElementType\", true, Type.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tSimpleType result = targetAst.newSimpleType(", "+\t\t\t\t\t\ttargetAst.newSimpleName(\"a\")); //$NON-NLS-1$", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\ttargetAst.newArrayType(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t\tpublic ASTNode wrap() {", "+\t\t\t\t\tArrayType result = ASTTest.this.ast.newArrayType(x, 5);", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t\tpublic void unwrap() {", "+\t\t\t\t\tArrayType a = (ArrayType) x.getParent();", "+\t\t\t\t\ta.setElementType(ASTTest.this.ast.newPrimitiveType(PrimitiveType.INT));", "+\t\t\t\t}", "+\t\t\t\tpublic ASTNode get() {", "+\t\t\t\t\treturn x.getElementType();", "+\t\t\t\t}", "+\t\t\t\tpublic void set(ASTNode value) {", "+\t\t\t\t\tx.setElementType((Type) value);", "+\t\t\t\t}", "+\t\t\t});", "-\t\tassertTrue(x.getDimensions() == 5);", "-\t\tassertTrue(x.getElementType().isPrimitiveType());", "-\t\tfinal ArrayType x3 = this.ast.newArrayType(x, 2);", "-\t\tassertTrue(x3.getDimensions() == 7);", "-\t\t", "+\t\t\tx.setElementType(this.ast.newPrimitiveType(PrimitiveType.INT));", "+\t\t\tassertTrue(x.getDimensions() == 1);", "+\t\t\tassertTrue(x.getElementType().isPrimitiveType());", "+\t\t}", "+"]}], "num": 5043}
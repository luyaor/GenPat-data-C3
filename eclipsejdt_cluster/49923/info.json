{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "afe8e1d41eb42eb4aef28203d5242466", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2af4cd6e155eaaa623781a09077a7ea7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "6a44e0777af1a4632e0d20c0e9b92d35d2ad59f3", "commitAfterChange": "2ca339c139c0fe73a5bd2705f66592731098d347", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\tboolean preserveCurrentHandler =", "-\t\t\t\t(preserveExceptionHandler[i", "-\t\t\t\t\t/ ExceptionHandlingFlowContext.BitCacheSize]", "-\t\t\t\t\t\t& (1 << (i % ExceptionHandlingFlowContext.BitCacheSize)))", "-\t\t\t\t\t!= 0;", "-\t\t\tif (preserveCurrentHandler) {", "-\t\t\t\texceptionLabels[i] =", "-\t\t\t\t\tnew ExceptionLabel(", "-\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\tcatchArguments[i].binding.type);", "-\t\t\t}", "+\t\t\texceptionLabels[i] = new ExceptionLabel(codeStream, catchArguments[i].binding.type);", "-\t\t\t\tboolean preserveCurrentHandler =", "-\t\t\t\t\t(preserveExceptionHandler[i / ExceptionHandlingFlowContext.BitCacheSize]", "-\t\t\t\t\t\t\t& (1 << (i % ExceptionHandlingFlowContext.BitCacheSize))) != 0;", "-\t\t\t\tif (preserveCurrentHandler) {", "-\t\t\t\t\texceptionLabels[i].placeEnd();", "-\t\t\t\t}", "+\t\t\t\texceptionLabels[i].placeEnd();", "-\t\t\t\t\tboolean preserveCurrentHandler =", "-\t\t\t\t\t\t(preserveExceptionHandler[i / ExceptionHandlingFlowContext.BitCacheSize]", "-\t\t\t\t\t\t\t\t& (1 << (i % ExceptionHandlingFlowContext.BitCacheSize))) != 0;", "-\t\t\t\t\tif (preserveCurrentHandler) {", "-\t\t\t\t\t\t// May loose some local variable initializations : affecting the local variable attributes", "-\t\t\t\t\t\tif (preTryInitStateIndex != -1) {", "-\t\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(", "-\t\t\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\t\t\tpreTryInitStateIndex);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\texceptionLabels[i].place();", "-\t\t\t\t\t\tcodeStream.incrStackSize(1);", "-\t\t\t\t\t\t// optimizing the case where the exception variable is not actually used", "-\t\t\t\t\t\tLocalVariableBinding catchVar;", "-\t\t\t\t\t\tint varPC = codeStream.position;", "-\t\t\t\t\t\tif ((catchVar = catchArguments[i].binding).resolvedPosition != -1) {", "-\t\t\t\t\t\t\tcodeStream.store(catchVar, false);", "-\t\t\t\t\t\t\tcatchVar.recordInitializationStartPC(codeStream.position);", "-\t\t\t\t\t\t\tcodeStream.addVisibleLocalVariable(catchVar);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcodeStream.recordPositionsFrom(varPC, catchArguments[i].sourceStart);", "-\t\t\t\t\t\t// Keep track of the pcs at diverging point for computing the local attribute", "-\t\t\t\t\t\t// since not passing the catchScope, the block generation will exitUserScope(catchScope)", "-\t\t\t\t\t\tcatchBlocks[i].generateCode(scope, codeStream);", "+\t\t\t\t\t// May loose some local variable initializations : affecting the local variable attributes", "+\t\t\t\t\tif (preTryInitStateIndex != -1) {", "+\t\t\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(", "+\t\t\t\t\t\t\tcurrentScope,", "+\t\t\t\t\t\t\tpreTryInitStateIndex);", "+\t\t\t\t\texceptionLabels[i].place();", "+\t\t\t\t\tcodeStream.incrStackSize(1);", "+\t\t\t\t\t// optimizing the case where the exception variable is not actually used", "+\t\t\t\t\tLocalVariableBinding catchVar;", "+\t\t\t\t\tint varPC = codeStream.position;", "+\t\t\t\t\tif ((catchVar = catchArguments[i].binding).resolvedPosition != -1) {", "+\t\t\t\t\t\tcodeStream.store(catchVar, false);", "+\t\t\t\t\t\tcatchVar.recordInitializationStartPC(codeStream.position);", "+\t\t\t\t\t\tcodeStream.addVisibleLocalVariable(catchVar);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t}", "+\t\t\t\t\tcodeStream.recordPositionsFrom(varPC, catchArguments[i].sourceStart);", "+\t\t\t\t\t// Keep track of the pcs at diverging point for computing the local attribute", "+\t\t\t\t\t// since not passing the catchScope, the block generation will exitUserScope(catchScope)", "+\t\t\t\t\tcatchBlocks[i].generateCode(scope, codeStream);", "+", "-\t\t\t\t\tif (!catchExits[i] && preserveCurrentHandler) {", "+\t\t\t\t\tif (!catchExits[i]) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2da0530bf7d70b9e91eba3fb4aff3b2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "f174c5e3ec66ea2a46810b190cc3e9d57c0432d4", "commitAfterChange": "8bbacffbe712e7ac5a5d22a44809b44ff8a5e616", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic static void setOptions(Hashtable newOptions)", "signatureAfterChange": " \tpublic static void setOptions(Hashtable newOptions)", "diff": ["-\t\t// Backward compatibility", "+\t\t/* Test OPTION_DocCommentSupport", "-\t\t\t// bug 45112", "-\t\t\tif (CompilerOptions.OPTION_ReportInvalidAnnotation.equals(propertyName)) {", "-\t\t\t\tpreferences.setToDefault(OLD_COMPILER_PB_INVALID_ANNOTATION);", "+\t\t\t// set same value than missing javadoc comments overriding", "+\t\t\tif (CompilerOptions.OPTION_ReportMissingJavadocCommentsOverriding.equals(propertyName)) {", "+\t\t\t\tpreferences.setValue(COMPILER_DOC_COMMENT_SUPPORT, preferences.getString(propertyName));", "-\t\t\telse if (CompilerOptions.OPTION_ReportMissingAnnotation.equals(propertyName)) {", "-\t\t\t\tpreferences.setToDefault(OLD_COMPILER_PB_MISSING_ANNOTATION);", "-\t\t\t}", "-\t\t\t// end bug 45112", "-\t\t\t// bug 46854", "-\t\t\telse if (CompilerOptions.OPTION_ReportMissingJavadoc.equals(propertyName)) {", "-\t\t\t\tpreferences.setToDefault(OLD_COMPILER_PB_MISSING_JAVADOC);", "-\t\t\t}", "-\t\t\t// end bug 46854", "+\t\t*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec8e78f801a98879ed02d965cdcc2333", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "040c84dc10016217309fd40f1b8ccd3d71e38f2f", "commitAfterChange": "bdec4b054ab36f77efcbe45fb7ee23ad6e7359c7", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic static IClasspathContainer getClasspathContainer(IPath containerPath, IJavaProject project) throws JavaModelException", "signatureAfterChange": "\r \tpublic static IClasspathContainer getClasspathContainer(IPath containerPath, IJavaProject project) throws JavaModelException", "diff": ["-\t\t\t\t\tif (container != null){\r", "-\t\t\t\t\t\tIClasspathEntry[] entries = container.getClasspathEntries();\r", "-\t\t\t\t\t\t// validation - no nested classpath container\r", "-\t\t\t\t\t\tif (entries != null){\r", "-\t\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++){\r", "-\t\t\t\t\t\t\t\tIClasspathEntry entry = entries[i];\r", "-\t\t\t\t\t\t\t\tif (entry == null \r", "-\t\t\t\t\t\t\t\t\t\t|| entry.getEntryKind() == IClasspathEntry.CPE_CONTAINER \r", "-\t\t\t\t\t\t\t\t\t\t|| entry.getEntryKind() == IClasspathEntry.CPE_SOURCE){\r", "-\t\t\t\t\t\t\t\t\tthrow new JavaModelException(\r", "-\t\t\t\t\t\t\t\t\t\tnew JavaModelStatus(\r", "-\t\t\t\t\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CP_CONTAINER_ENTRY,\r", "-\t\t\t\t\t\t\t\t\t\t\tcontainerPath.toString()));\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r"]}], "num": 49923}
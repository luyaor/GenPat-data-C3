{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f87146e4d7f2787ea331da42e6d2f33", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b34d6bbc0c4f9b6a93c60ea53c49e42d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "95993961e278d83dc23d7d0203a47aaea09dd722", "commitAfterChange": "c3c99b10f2f19dad36a61c7652eeb013aefa3a8c", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void testParseCompilationUnit1() throws CoreException", "signatureAfterChange": " \tpublic void testParseCompilationUnit1() throws CoreException", "diff": ["-\t\t\tTypeDeclaration type = (TypeDeclaration)cu.types().get(0);", "+\t\t\tList types = cu.types();", "+\t\t\tassertEquals(\"Unexpected number of types in AST\", 1, types.size());", "+\t\t\tTypeDeclaration type = (TypeDeclaration)types.get(0);", "-\t\t\tITypeBinding[] interfaces = typeBinding.getInterfaces();", "-\t\t\tassertEquals(\"Should implement one interface\", 1, interfaces.length);", "-\t\t\tassertEquals(\"Unexpected interface name\", \"I\", interfaces[0].getName());", "+\t\t\tassertTypeBindingsEqual(", "+\t\t\t\t\"Unexpected interfaces\", ", "+\t\t\t\t\"I\",", "+\t\t\t\ttypeBinding.getInterfaces());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b497538b6f33a65d0a4f263ec4883fdc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/aptrounding/Round1GenAnnotationProcessor.java", "commitBeforeChange": "7064f5cf4e1b20562054db6ff22e27e2bfde4008", "commitAfterChange": "c020688b25edf08bbc7d8d68981663ad78d2a9d8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic void process()", "signatureAfterChange": " \t \tpublic void process()", "diff": ["+\t\t", "+\t\tfinal Collection<TypeDeclaration> typeDecls = _env.getTypeDeclarations();", "+\t\tfinal Messager msger = _env.getMessager();", "+\t\tif( typeDecls.size() == 1 ){", "+\t\t\tfinal TypeDeclaration type = typeDecls.iterator().next();", "+\t\t\tif( !type.getQualifiedName().equals( \"p1.X\") )", "+\t\t\t\tmsger.printError(\"Expected to find p1.X but got \" + type.getQualifiedName() ); ", "+\t\t}", "+\t\telse", "+\t\t\tmsger.printError(\"expected one type declaration but got \" + typeDecls );\t"]}], "num": 51937}
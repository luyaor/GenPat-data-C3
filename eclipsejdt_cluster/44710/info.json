{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bcf1e9e8c14be9fec2a3f1b3037fd529", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ea8c7ec4e42418d02b5307c42a853e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "74cb74226fe254108607eae80c548bb2b6719e32", "commitAfterChange": "dadef2fc0573a510ff313dd625ee1ba4e2b2e6e3", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tprivate int generateMethodParameters(final MethodBinding binding)", "signatureAfterChange": " \tprivate int generateMethodParameters(final MethodBinding binding)", "diff": ["-\t\t\t// take into account the synthetic argument names", "-\t\t\tint modifier = (! declaringClass.isPrivate()) || declaringClass.isAnonymousType() ? ClassFileConstants.AccMandated : ClassFileConstants.AccSynthetic;", "+\t\t\t// Take into account the synthetic argument names", "+\t\t\t// This tracks JLS8, paragraph 8.8.9", "+\t\t\tboolean anonymousWithLocalSuper = declaringClass.isAnonymousType() && declaringClass.superclass().isLocalType();", "+\t\t\tboolean anonymousWithNestedSuper = declaringClass.isAnonymousType() && declaringClass.superclass().isNestedType();", "+\t\t\tboolean isImplicitlyDeclared = ((! declaringClass.isPrivate()) || declaringClass.isAnonymousType()) && !anonymousWithLocalSuper;", "+\t\t\t\t\t// This behaviour tracks JLS 15.9.5.1", "+\t\t\t\t\t// This covers that the parameter ending up in a nested class must be mandated \"on the way in\", even if it", "+\t\t\t\t\t// isn't the first. The practical relevance of this is questionable, since the constructor call will be", "+\t\t\t\t\t// generated by the same constructor.", "+\t\t\t\t\tboolean couldForwardToMandated = anonymousWithNestedSuper ? declaringClass.superclass().enclosingType().equals(syntheticArgumentTypes[i]) : true;", "+\t\t\t\t\tint modifier = couldForwardToMandated && isImplicitlyDeclared ? ClassFileConstants.AccMandated : ClassFileConstants.AccSynthetic;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d709da5e5fbf8b7e73b5187016f96e21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "e749248b2d171474b4cec0b274f15c474b2172fa", "commitAfterChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " public void generateOuterAccess(Object[] mappingSequence, AstNode invocationSite, Scope scope)", "signatureAfterChange": " public void generateOuterAccess(Object[] mappingSequence, AstNode invocationSite, Binding target, Scope scope)", "diff": ["-public void generateOuterAccess(Object[] mappingSequence, AstNode invocationSite, Scope scope) {", "-\tif (mappingSequence == null)", "-\t\treturn;", "-\tif (mappingSequence == BlockScope.EmulationPathToImplicitThis) {", "-\t\tif (scope.methodScope().isConstructorCall){", "-\t\t\tscope.problemReporter().errorThisSuperInStatic(invocationSite);", "+public void generateOuterAccess(Object[] mappingSequence, AstNode invocationSite, Binding target, Scope scope) {", "+\tif (mappingSequence == null) {", "+\t\tif (target instanceof LocalVariableBinding) {", "+\t\t\tscope.problemReporter().needImplementation(); //TODO: should improve", "+\t\t} else {", "+\t\t\tscope.problemReporter().noSuchEnclosingInstance((ReferenceBinding)target, invocationSite, false);", "-\t\tthis.aload_0();", "-\tif (mappingSequence[0] instanceof FieldBinding) {", "+\tif (mappingSequence == BlockScope.NoEnclosingInstanceInConstructorCall) {", "+\t\tscope.problemReporter().noSuchEnclosingInstance((ReferenceBinding)target, invocationSite, true);", "+\t\treturn;", "+\t} else if (mappingSequence == BlockScope.NoEnclosingInstanceInStaticContext) {", "+\t\tscope.problemReporter().noSuchEnclosingInstance((ReferenceBinding)target, invocationSite, false);", "+\t\treturn;", "+\t}", "+\t", "+\tif (mappingSequence == BlockScope.EmulationPathToImplicitThis) {", "+\t\tthis.aload_0();", "+\t\treturn;", "+\t} else if (mappingSequence[0] instanceof FieldBinding) {", "-\t\tif (scope.methodScope().isConstructorCall){", "-\t\t\tscope.problemReporter().errorThisSuperInStatic(invocationSite);", "-\t\t}"]}], "num": 44710}
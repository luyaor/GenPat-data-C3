{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e437a91cea2f5540a9f24d8274b9ad3d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e9f2237c4171b1c176d692f2dc7bfc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["+\tfinal CompilerOptions compilerOptions = scope.compilerOptions();", "+\tif (compilerOptions.complianceLevel <= ClassFileConstants.JDK1_6", "+\t\t\t&& this.binding.isPolymorphic()) {", "+\t\tscope.problemReporter().polymorphicMethodNotBelow17(this);", "+\t\treturn null;", "+\t}", "+", "+\tif (((this.bits & ASTNode.InsideExpressionStatement) != 0)", "+\t\t\t&& this.binding.isPolymorphic()) {", "+\t\t// we only set the return type to be void if this method invocation is used inside an expression statement", "+\t\tthis.binding = scope.environment().updatePolymorphicMethodReturnType((PolymorphicMethodBinding) this.binding, TypeBinding.VOID);", "+\t}", "-\tfinal CompilerOptions compilerOptions = scope.compilerOptions();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf0e131ffd9cbbcba45a617096b869db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "e33f9e50507ed5c3d45f37527737576191428633", "commitAfterChange": "62bebd71f36545c90d6c943df5cd6ccb18d59a48", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic CompletionEngine( \t\tISearchableNameEnvironment nameEnvironment, \t\tICompletionRequestor requestor, \t\tMap settings, \t\tIJavaProject javaProject)", "signatureAfterChange": " \tpublic CompletionEngine( \t\tISearchableNameEnvironment nameEnvironment, \t\tICompletionRequestor requestor, \t\tMap settings, \t\tIJavaProject javaProject)", "diff": ["-\t\tproblemReporter = new ProblemReporter(", "+\t\tthis.problemReporter = new ProblemReporter(", "-\t\t\t\t\t\tif(actualCompletionPosition > start", "-\t\t\t\t\t\t\t&& lastErrorStart < start", "+\t\t\t\t\t\tif(CompletionEngine.this.actualCompletionPosition > start", "+\t\t\t\t\t\t\t&& this.lastErrorStart < start", "-\t\t\t\t\t\t\tlastErrorStart = start;", "+\t\t\t\t\t\t\tthis.lastErrorStart = start;", "-\t\t\tnew LookupEnvironment(this, this.compilerOptions, problemReporter, nameEnvironment);", "+\t\t\tnew LookupEnvironment(this, this.compilerOptions, this.problemReporter, nameEnvironment);", "-\t\t\tnew CompletionParser(problemReporter);", "+\t\t\tnew CompletionParser(this.problemReporter);"]}], "num": 4189}
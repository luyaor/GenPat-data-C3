{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55822695950f4abc007de4e97986ba2b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bbfad7dc923e0ffcb21143f28bbaed8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "commitAfterChange": "3320fdc3f1bfdb68e48d9e9d6105fc0796ce3132", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public boolean isTypeArgumentContainedBy(TypeBinding otherArgument)", "signatureAfterChange": " public boolean isTypeArgumentContainedBy(TypeBinding otherType)", "diff": ["-public boolean isTypeArgumentContainedBy(TypeBinding otherArgument) {", "-\tif (this == otherArgument)", "+public boolean isTypeArgumentContainedBy(TypeBinding otherType) {", "+\tif (this == otherType)", "-\tTypeBinding lowerBound = this;", "-\tTypeBinding upperBound = this;", "-\tif (isWildcard()) {", "-\t\tWildcardBinding wildcard = (WildcardBinding) this;", "-\t\tswitch(wildcard.boundKind) {", "-\t\t\tcase Wildcard.EXTENDS :", "-\t\t\t\tupperBound = wildcard.bound;", "-\t\t\t\tlowerBound = null;", "-\t\t\t\tbreak;", "-\t\t\tcase Wildcard. SUPER :", "-\t\t\t\tupperBound = wildcard;", "-\t\t\t\tlowerBound = wildcard.bound;", "-\t\t\t\tbreak;", "-\t\t\tcase Wildcard.UNBOUND :", "-\t\t\t\tupperBound = wildcard;", "-\t\t\t\tlowerBound = null;", "-\t\t}", "-\t}", "-\tif (otherArgument.isWildcard()) {", "-\t\tWildcardBinding otherWildcard = (WildcardBinding) otherArgument;", "-\t\tif (otherWildcard.otherBounds != null) return false; // not a true wildcard (intersection type)", "-\t\tswitch(otherWildcard.boundKind) {", "-\t\t\tcase Wildcard.EXTENDS:", "-\t\t\t\tif (otherWildcard.bound == this) return true; // ? extends T  <=  ? extends ? extends T", "-\t\t\t\treturn upperBound != null && upperBound.isCompatibleWith(otherWildcard.bound);", "-", "-\t\t\tcase Wildcard.SUPER :", "-\t\t\t\tif (otherWildcard.bound == this) return true; // ? super T  <=  ? super ? super T", "-\t\t\t\treturn lowerBound != null && otherWildcard.bound.isCompatibleWith(lowerBound);", "-", "-\t\t\tcase Wildcard.UNBOUND :", "-\t\t\t\treturn true;", "-\t\t}", "+\tswitch(otherType.kind()) {", "+\t\t// allow wildcard containment", "+\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\tTypeBinding lowerBound = this;", "+\t\t\tTypeBinding upperBound = this;", "+\t\t\tif (isWildcard()) {", "+\t\t\t\tWildcardBinding wildcard = (WildcardBinding) this;", "+\t\t\t\tswitch(wildcard.boundKind) {", "+\t\t\t\t\tcase Wildcard.EXTENDS :", "+\t\t\t\t\t\tupperBound = wildcard.bound;", "+\t\t\t\t\t\tlowerBound = null;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Wildcard. SUPER :", "+\t\t\t\t\t\tupperBound = wildcard;", "+\t\t\t\t\t\tlowerBound = wildcard.bound;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Wildcard.UNBOUND :", "+\t\t\t\t\t\tupperBound = wildcard;", "+\t\t\t\t\t\tlowerBound = null;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "+\t\t\tif (otherWildcard.otherBounds != null) return false; // not a true wildcard (intersection type)", "+\t\t\tswitch(otherWildcard.boundKind) {", "+\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\t\tif (otherWildcard.bound == this) return true; // ? extends T  <=  ? extends ? extends T", "+\t\t\t\t\treturn upperBound != null && upperBound.isCompatibleWith(otherWildcard.bound);", "+\t", "+\t\t\t\tcase Wildcard.SUPER :", "+\t\t\t\t\tif (otherWildcard.bound == this) return true; // ? super T  <=  ? super ? super T", "+\t\t\t\t\treturn lowerBound != null && otherWildcard.bound.isCompatibleWith(lowerBound);", "+\t", "+\t\t\t\tcase Wildcard.UNBOUND :", "+\t\t\t\tdefault:", "+\t\t\t\t\treturn true;", "+\t\t\t}", "+\t\t// allow List<?> to match List<? extends Object> (and reciprocally)", "+\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\tif (!this.isParameterizedType()) return false;", "+\t\t\tParameterizedTypeBinding paramType = (ParameterizedTypeBinding) this;", "+            ParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "+            if (paramType.type != otherParamType.type) ", "+                return false;", "+            if (!paramType.isStatic()) { // static member types do not compare their enclosing", "+            \tReferenceBinding enclosing = enclosingType();", "+            \tif (enclosing != null) {", "+            \t\tReferenceBinding otherEnclosing = otherParamType.enclosingType();", "+            \t\tif (otherEnclosing == null) return false;", "+            \t\tif ((otherEnclosing.tagBits & HasDirectWildcard) == 0) {", "+\t\t\t\t\t\tif (enclosing != otherEnclosing) return false;", "+            \t\t} else {", "+            \t\t\tif (!enclosing.isEquivalentTo(otherParamType.enclosingType())) return false;", "+            \t\t}", "+            \t}", "+            }", "+            int length = paramType.arguments == null ? 0 : paramType.arguments.length;", "+            TypeBinding[] otherArguments = otherParamType.arguments;", "+            int otherLength = otherArguments == null ? 0 : otherArguments.length;", "+            if (otherLength != length) ", "+                return false;", "+            nextArgument: for (int i = 0; i < length; i++) {", "+            \tTypeBinding argument = paramType.arguments[i];", "+            \tTypeBinding otherArgument = otherArguments[i];", "+            \tif (argument == otherArgument) ", "+            \t\tcontinue nextArgument;", "+            \tint kind = argument.kind();", "+            \tif (otherArgument.kind() != kind)", "+            \t\treturn false;", "+           \t\tswitch(kind) {", "+        \t\t\tcase Binding.PARAMETERIZED_TYPE :", "+        \t\t\t\tif (argument.isTypeArgumentContainedBy(otherArgument)) // recurse", "+\t        \t\t\t\tcontinue nextArgument;", "+        \t\t\t\tbreak;", "+        \t\t\tcase Binding.WILDCARD_TYPE :", "+        \t\t\t\tWildcardBinding wildcard = (WildcardBinding) argument;", "+        \t\t\t\totherWildcard = (WildcardBinding) otherArgument;", "+        \t\t\t\tswitch (wildcard.boundKind) {", "+        \t\t\t\t\tcase Wildcard.EXTENDS :", "+        \t\t\t\t\t\t// match \"? extends <upperBound>\" with \"?\"", "+        \t\t\t\t\t\tif (otherWildcard.boundKind == Wildcard.UNBOUND && wildcard.bound == wildcard.typeVariable().upperBound())", "+        \t\t\t\t\t\t\tcontinue nextArgument; ", "+        \t\t\t\t\t\tbreak;", "+        \t\t\t\t\tcase Wildcard.SUPER :", "+        \t\t\t\t\t\tbreak;", "+        \t\t\t\t\tcase Wildcard.UNBOUND :", "+        \t\t\t\t\t\t// match \"?\" with \"? extends <upperBound>\"", "+        \t\t\t\t\t\tif (otherWildcard.boundKind == Wildcard.EXTENDS && otherWildcard.bound == otherWildcard.typeVariable().upperBound())", "+        \t\t\t\t\t\t\tcontinue nextArgument; ", "+        \t\t\t\t\t\tbreak;", "+        \t\t\t\t}", "+        \t\t\t\tbreak;", "+           \t\t}", "+           \t\treturn false;", "+            }", "+            return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f55223de10ce0f04796a4adfb398eab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "3f665dc08ffa02e27b74efb0940c16f2120a11f8", "commitAfterChange": "307e2de84d078daed3099015a7ac89d980746b6b", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 35, "signatureBeforeChange": " public boolean isIntersectingWith(TypeBinding otherType)", "signatureAfterChange": " public boolean isProvablyDistinct(TypeBinding otherType)", "diff": ["- */", "-public boolean isIntersectingWith(TypeBinding otherType) {", "-\treturn this == otherType;", "-}", "+ */", "+public boolean isProvablyDistinct(TypeBinding otherType) {", "+\tif (this == otherType) ", "+\t    return false;", "+    if (otherType == null) ", "+        return true;", "+\t", "+    switch (kind()) {", "+", "+\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t    ParameterizedTypeBinding paramType = (ParameterizedTypeBinding) this;", "+\t\t    switch(otherType.kind()) {", "+\t\t    \tcase Binding.PARAMETERIZED_TYPE :", "+\t\t            ParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "+\t\t            if (paramType.genericType() != otherParamType.genericType()) ", "+\t\t                return true;", "+\t\t            if (!paramType.isStatic()) { // static member types do not compare their enclosing", "+\t\t            \tReferenceBinding enclosing = enclosingType();", "+\t\t            \tif (enclosing != null) {", "+\t\t            \t\tReferenceBinding otherEnclosing = otherParamType.enclosingType();", "+\t\t            \t\tif (otherEnclosing == null) return true;", "+\t\t            \t\tif ((otherEnclosing.tagBits & TagBits.HasDirectWildcard) == 0) {", "+\t\t\t\t\t\t\t\tif (enclosing != otherEnclosing) return true;", "+\t\t            \t\t} else {", "+\t\t            \t\t\tif (!enclosing.isEquivalentTo(otherParamType.enclosingType())) return true;", "+\t\t            \t\t}", "+\t\t            \t}", "+\t\t            }", "+\t\t            int length = paramType.arguments == null ? 0 : paramType.arguments.length;", "+\t\t            TypeBinding[] otherArguments = otherParamType.arguments;", "+\t\t            int otherLength = otherArguments == null ? 0 : otherArguments.length;", "+\t\t            if (otherLength != length) ", "+\t\t                return true;", "+\t\t            for (int i = 0; i < length; i++) {", "+\t\t            \tif (paramType.arguments[i].isProvablyDistinctTypeArgument(otherArguments[i], paramType, i))", "+\t\t            \t\treturn true;", "+\t\t            }", "+\t\t            return false;", "+", "+\t\t    \tcase Binding.GENERIC_TYPE :", "+\t\t            SourceTypeBinding otherGenericType = (SourceTypeBinding) otherType;", "+\t\t            if (paramType.genericType() != otherGenericType) ", "+\t\t                return true;", "+\t\t            if (!paramType.isStatic()) { // static member types do not compare their enclosing", "+\t\t            \tReferenceBinding enclosing = enclosingType();", "+\t\t            \tif (enclosing != null) {", "+\t\t            \t\tReferenceBinding otherEnclosing = otherGenericType.enclosingType();", "+\t\t            \t\tif (otherEnclosing == null) return true;", "+\t\t            \t\tif ((otherEnclosing.tagBits & TagBits.HasDirectWildcard) == 0) {", "+\t\t\t\t\t\t\t\tif (enclosing != otherEnclosing) return true;", "+\t\t            \t\t} else {", "+\t\t            \t\t\tif (!enclosing.isEquivalentTo(otherGenericType.enclosingType())) return true;", "+\t\t            \t\t}", "+\t\t            \t}", "+\t\t            }", "+\t\t            length = paramType.arguments == null ? 0 : paramType.arguments.length;", "+\t\t            otherArguments = otherGenericType.typeVariables();", "+\t\t            otherLength = otherArguments == null ? 0 : otherArguments.length;", "+\t\t            if (otherLength != length) ", "+\t\t                return true;", "+\t\t            for (int i = 0; i < length; i++) {", "+\t\t            \tif (paramType.arguments[i].isProvablyDistinctTypeArgument(otherArguments[i], paramType, i))", "+\t\t            \t\treturn true;", "+\t\t            }", "+\t\t            return false;", "+\t\t            ", "+\t\t    \tcase Binding.RAW_TYPE :", "+\t\t            return erasure() != otherType.erasure();", "+\t\t    }", "+\t        return true;", "+\t\t\t\t\t", "+\t\tcase Binding.RAW_TYPE :", "+", "+\t\t    switch(otherType.kind()) {", "+\t\t", "+\t\t    \tcase Binding.GENERIC_TYPE :", "+\t\t    \tcase Binding.PARAMETERIZED_TYPE :", "+\t\t    \tcase Binding.RAW_TYPE :", "+\t\t            return erasure() != otherType.erasure();", "+\t\t    }", "+\t        return true;", "+\t\t\t\t\t", "+\t\tdefault :", "+\t\t\tbreak;", "+\t}", "+    return true;", "+}"]}], "num": 67395}
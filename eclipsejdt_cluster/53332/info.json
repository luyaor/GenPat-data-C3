{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df668ef1a29a522811075b8c78948559", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02b87a526eb1ad03bd7ab8441a1ebb0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/IntersectionCastTypeBinding.java", "commitBeforeChange": "ddff16f6a6b8fee88d497b4653d14d58ccda81b4", "commitAfterChange": "128a99659b73df0d65c1b7965233f291b8bbcedc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic MethodBinding getSingleAbstractMethod(Scope scope)", "signatureAfterChange": " \t \tpublic MethodBinding getSingleAbstractMethod(Scope scope)", "diff": ["+\t\tif (this.singleAbstractMethod != null)", "+\t\t\treturn this.singleAbstractMethod;", "-\t\t\t\t\t\treturn new ProblemMethodBinding(TypeConstants.ANONYMOUS_METHOD, null, ProblemReasons.IntersectionHasMultipleFunctionalInterfaces);", "+\t\t\t\t\t\treturn this.singleAbstractMethod = new ProblemMethodBinding(TypeConstants.ANONYMOUS_METHOD, null, ProblemReasons.IntersectionHasMultipleFunctionalInterfaces);", "-\t\treturn sam; // I don't see a value in building the notional interface described in 9.8 - it appears just pedantic/normative - perhaps it plays a role in wildcard parameterized types ?", "+\t\treturn this.singleAbstractMethod = sam; // I don't see a value in building the notional interface described in 9.8 - it appears just pedantic/normative - perhaps it plays a role in wildcard parameterized types ?"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eb35a9e87d2d504a788b54af57fa6fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/IntersectionCastTypeBinding.java", "commitBeforeChange": "abe6a4b8c7a37b999ce782468f77dcc11e925eae", "commitAfterChange": "b3906111a4433325958de7604465d8f0e49325d2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic MethodBinding getSingleAbstractMethod(Scope scope, boolean replaceWildcards)", "signatureAfterChange": " \t \tpublic MethodBinding getSingleAbstractMethod(Scope scope, boolean replaceWildcards)", "diff": ["-\t\tif (this.singleAbstractMethod != null)", "-\t\t\treturn this.singleAbstractMethod;", "+\t\tint index = replaceWildcards ? 0 : 1;", "+\t\tif (this.singleAbstractMethod != null) {", "+\t\t\tif (this.singleAbstractMethod[index] != null)", "+\t\t\treturn this.singleAbstractMethod[index];", "+\t\t} else {", "+\t\t\tthis.singleAbstractMethod = new MethodBinding[2];", "+\t\t}", "-\t\t\t\t\t\treturn this.singleAbstractMethod = new ProblemMethodBinding(TypeConstants.ANONYMOUS_METHOD, null, ProblemReasons.IntersectionHasMultipleFunctionalInterfaces);", "+\t\t\t\t\t\treturn this.singleAbstractMethod[index] = new ProblemMethodBinding(TypeConstants.ANONYMOUS_METHOD, null, ProblemReasons.IntersectionHasMultipleFunctionalInterfaces);", "-\t\treturn this.singleAbstractMethod = sam; // I don't see a value in building the notional interface described in 9.8 - it appears just pedantic/normative - perhaps it plays a role in wildcard parameterized types ?", "+\t\treturn this.singleAbstractMethod[index] = sam; // I don't see a value in building the notional interface described in 9.8 - it appears just pedantic/normative - perhaps it plays a role in wildcard parameterized types ?"]}], "num": 53332}
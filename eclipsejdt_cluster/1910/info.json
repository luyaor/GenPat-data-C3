{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "037a8e265be97617e0dd581fd4fd5cdd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92e161e571685853f44951759bd77807", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "f34d0660fc08a428cce0fefe472952c23bd16c8b", "commitAfterChange": "26280894123d7ef2ecad980903e2002f03a13de2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void computeConversion(Scope scope, TypeBinding runtimeType, TypeBinding compileTimeType)", "signatureAfterChange": "  \tpublic void computeConversion(Scope scope, TypeBinding runtimeType, TypeBinding compileTimeType)", "diff": ["-\t\t\t\tthis.implicitConversion = UNBOXING;", "+\t\t\t\tthis.implicitConversion = TypeIds.UNBOXING;", "-\t\t\tthis.implicitConversion = BOXING | (boxedType.id << 4) + compileTimeType.id;", "+\t\t\tthis.implicitConversion = TypeIds.BOXING | (boxedType.id << 4) + compileTimeType.id;", "-\t\t} else if (this.constant != Constant.NotAConstant && this.constant.typeID() != T_JavaLangString) {", "-\t\t\tthis.implicitConversion = BOXING;", "+\t\t} else if (this.constant != Constant.NotAConstant && this.constant.typeID() != TypeIds.T_JavaLangString) {", "+\t\t\tthis.implicitConversion = TypeIds.BOXING;", "-\t\tif ((compileTimeTypeID = compileTimeType.id) == NoId) { // e.g. ? extends String  ==> String (103227)", "-\t\t\tcompileTimeTypeID = compileTimeType.erasure().id == T_JavaLangString ? T_JavaLangString : T_JavaLangObject;", "+\t\tif ((compileTimeTypeID = compileTimeType.id) == TypeIds.NoId) { // e.g. ? extends String  ==> String (103227)", "+\t\t\tcompileTimeTypeID = compileTimeType.erasure().id == TypeIds.T_JavaLangString ? TypeIds.T_JavaLangString : TypeIds.T_JavaLangObject;", "-\t\t\t\tthis.implicitConversion |= (T_int << 4) + compileTimeTypeID;", "+\t\t\t\tthis.implicitConversion |= (TypeIds.T_int << 4) + compileTimeTypeID;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc1aeee0f5e49b864e852af23bf825cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "8f906774856d3fb8be48e8c1fa76527878a0f865", "commitAfterChange": "ecf6de5abf72d6130a58d26da044687c85216430", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "signatureAfterChange": "  \tpublic void computeConversion(Scope scope, TypeBinding runtimeType, TypeBinding compileTimeType)", "diff": ["-\tpublic void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType) {", "+\tpublic void computeConversion(Scope scope, TypeBinding runtimeType, TypeBinding compileTimeType) {", "-\t\tif (runtimeTimeType == null || compileTimeType == null)", "+\t\tif (runtimeType == null || compileTimeType == null)", "-", "+\t\t", "-\t\tif (runtimeTimeType != NullBinding && runtimeTimeType.isBaseType()) {", "+\t\tif (runtimeType != NullBinding && runtimeType.isBaseType()) {", "-\t\t\t\tscope.problemReporter().autoboxing(this, compileTimeType, runtimeTimeType);", "+\t\t\t\tscope.problemReporter().autoboxing(this, compileTimeType, runtimeType);", "-\t\t\t\tTypeBinding boxedType = scope.environment().computeBoxingType(runtimeTimeType);", "-\t\t\t\tif (boxedType == runtimeTimeType) // Object o = 12;", "+\t\t\t\tTypeBinding boxedType = scope.environment().computeBoxingType(runtimeType);", "+\t\t\t\tif (boxedType == runtimeType) // Object o = 12;", "-", "-\t\tswitch (runtimeTimeType.id) {", "+\t\tint compileTimeTypeID, runtimeTypeID;", "+\t\tif ((compileTimeTypeID = compileTimeType.id) == NoId) { // e.g. ? extends String  ==> String (103227)", "+\t\t\tcompileTimeTypeID = compileTimeType.erasure().id == T_JavaLangString ? T_JavaLangString : T_JavaLangObject;", "+\t\t}\t\t", "+\t\tswitch (runtimeTypeID = runtimeType.id) {", "-\t\t\t\tthis.implicitConversion |= (T_int << 4) + compileTimeType.id;", "+\t\t\t\tthis.implicitConversion |= (T_int << 4) + compileTimeTypeID;", "-\t\t\t\tthis.implicitConversion |= (runtimeTimeType.id << 4) + compileTimeType.id;", "+\t\t\t\tthis.implicitConversion |= (runtimeTypeID << 4) + compileTimeTypeID;"]}], "num": 1910}
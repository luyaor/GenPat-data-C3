{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cfd2ec72fcb9a102df072218c1d60f0b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "133a3504d8fb5a46e27fcd4ced465b5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "14ba43da4ca84e6aa2e4b0e2b6c660335b90691e", "commitAfterChange": "b7f39314c9eefd05e7002c31c87dcdb0333c0655", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic static IClasspathEntry getResolvedClasspathEntry(IClasspathEntry entry)", "signatureAfterChange": " \tpublic static IClasspathEntry getResolvedClasspathEntry(IClasspathEntry entry)", "diff": ["-\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(resolvedResource.getName())) {", "-\t\t\t\t\t\t// internal binary archive", "-\t\t\t\t\t\treturn JavaCore.newLibraryEntry(", "-\t\t\t\t\t\t\t\tresolvedPath,", "-\t\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentPath()),", "-\t\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()),", "-\t\t\t\t\t\t\t\tentry.getAccessRules(),", "-\t\t\t\t\t\t\t\tentry.getExtraAttributes(),", "-\t\t\t\t\t\t\t\tentry.isExported());", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-", "+\t\t\t\t\t// internal binary archive", "+\t\t\t\t\treturn JavaCore.newLibraryEntry(", "+\t\t\t\t\t\t\tresolvedPath,", "+\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentPath()),", "+\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()),", "+\t\t\t\t\t\t\tentry.getAccessRules(),", "+\t\t\t\t\t\t\tentry.getExtraAttributes(),", "+\t\t\t\t\t\t\tentry.isExported());", "-\t\t\t\t// outside the workspace", "-\t\t\t\tString fileName = externalFile.getName().toLowerCase();", "-\t\t\t\tif (fileName.endsWith(SuffixConstants.SUFFIX_STRING_jar) || fileName.endsWith(SuffixConstants.SUFFIX_STRING_zip)) {", "-\t\t\t\t\t// external binary archive", "-\t\t\t\t\treturn JavaCore.newLibraryEntry(", "-\t\t\t\t\t\t\tresolvedPath,", "-\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentPath()),", "-\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()),", "-\t\t\t\t\t\t\tentry.getAccessRules(),", "-\t\t\t\t\t\t\tentry.getExtraAttributes(),", "-\t\t\t\t\t\t\tentry.isExported());", "-\t\t\t\t}", "+\t\t\t\t// external binary archive", "+\t\t\t\treturn JavaCore.newLibraryEntry(", "+\t\t\t\t\t\tresolvedPath,", "+\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentPath()),", "+\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()),", "+\t\t\t\t\t\tentry.getAccessRules(),", "+\t\t\t\t\t\tentry.getExtraAttributes(),", "+\t\t\t\t\t\tentry.isExported());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26f1a12f6573a4e5e44201d971ea6dfd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "94dcb6652f514256018e8c1f7dcc1acc7030201c", "commitAfterChange": "c1caadb3e97f0c5d02c6ad3748ed5e3373af3f00", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static String bind(String id)", "signatureAfterChange": " \tpublic static String bind(String id)", "diff": ["-\t\tif (id == null)", "-\t\t\treturn \"No message available\"; //$NON-NLS-1$", "-\t\tString message = null;", "-\t\ttry {", "-\t\t\tmessage = bundle.getString(id);", "-\t\t} catch (MissingResourceException e) {", "-\t\t\t// If we got an exception looking for the message, fail gracefully by just returning", "-\t\t\t// the id we were looking for.  In most cases this is semi-informative so is not too bad.", "-\t\t\treturn \"Missing message: \" + id + \" in: \" + bundleName; //$NON-NLS-2$ //$NON-NLS-1$", "-\t\t}", "-\t\t// for compatibility with MessageFormat which eliminates double quotes in original message", "-\t\tchar[] messageWithNoDoubleQuotes =", "-\t\t\tCharOperation.replace(message.toCharArray(), DOUBLE_QUOTES, SINGLE_QUOTE);", "-\t\treturn new String(messageWithNoDoubleQuotes);", "+\t\treturn bind(id, (String[])null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3128c465279aa04206b1e3eba0e2692b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java", "commitBeforeChange": "14ba43da4ca84e6aa2e4b0e2b6c660335b90691e", "commitAfterChange": "b7f39314c9eefd05e7002c31c87dcdb0333c0655", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void computeClasspathLocations( \tIWorkspaceRoot root, \tJavaProject javaProject, \tSimpleLookupTable binaryLocationsPerProject) throws CoreException", "signatureAfterChange": " private void computeClasspathLocations( \tIWorkspaceRoot root, \tJavaProject javaProject, \tSimpleLookupTable binaryLocationsPerProject) throws CoreException", "diff": ["-\t\t\t\t\t\tif (!(org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(path.lastSegment())))", "-\t\t\t\t\t\t\tcontinue nextEntry;", "-\t\t\t\t\tif (!(org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(path.lastSegment())))", "-\t\t\t\t\t\tcontinue nextEntry;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49c4fb221dbdacd3449d8f0078e0163b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/junit/extension/TestCase.java", "commitBeforeChange": "4ee7521407adee0dd67769699b7546434316be93", "commitAfterChange": "87ca0642cecf1a592acf4d3ae445abf58ff9ec9c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " protected void assumeTrue(String msg, boolean cond)", "signatureAfterChange": " protected void assumeTrue(String msg, boolean cond)", "diff": ["-\t} catch (ComparisonFailure cf) {", "-\t\tif (abortOnFailure) {", "-\t\t\tSystem.out.println(\"Failure while running test \"+Performance.getDefault().getDefaultScenarioId(this)+\"!!!\");", "-\t\t\tSystem.out.println(\"Actual output is:\");", "-\t\t\tSystem.out.println(Util.displayString(cf.getActual(), 2));", "-\t\t\tSystem.out.println();", "-\t\t\tthrow cf;", "-\t\t}", "-\t\tprintAssertionFailure(cf);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "575b5f3d1c823c4534302ba542219040", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "54636126e97a957a9925b609910f59ea39210fc8", "commitAfterChange": "917603919e9d38772fd63709feb3bbda7696f523", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic TextEdit format(int kind, String source, IRegion[] regions, int indentationLevel, String lineSeparator)", "signatureAfterChange": " \tpublic TextEdit format(int kind, String source, IRegion[] regions, int indentationLevel, String lineSeparator)", "diff": ["-\t\t\t\tboolean includeComments =  (kind & F_INCLUDE_COMMENTS) != 0 || FORCE_NEW_COMMENT_FORMAT;", "+\t\t\t\tboolean includeComments =  (kind & F_INCLUDE_COMMENTS) != 0 || FORCE_NEW_COMMENTS_FORMAT;", "-\t\t\t\tincludeComments =  (kind & F_INCLUDE_COMMENTS) != 0 || FORCE_NEW_COMMENT_FORMAT;", "+\t\t\t\tincludeComments =  (kind & F_INCLUDE_COMMENTS) != 0 || FORCE_NEW_COMMENTS_FORMAT;", "-\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=102780", "-\t\t\t\tif (ENABLE_NEW_JAVADOC_FORMAT) {", "-\t\t\t\t\treturn formatJavadoc(source, indentationLevel, lineSeparator, regions);", "-\t\t\t\t} else if (FORCE_NEW_COMMENT_FORMAT) {", "-\t\t\t\t\t// Skip the javadoc formatting using this constant", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t\t// In all other cases, use the old way to format javadoc comments", "-\t\t\t\tif (!PRINTED_OLD_JAVA_DOC_WARNING) {", "-\t\t\t\t\torg.eclipse.jdt.internal.core.util.Util.log(IStatus.WARNING, WARNING_JAVADOC_COMMENTS);", "-\t\t\t\t\tSystem.out.println(WARNING_JAVADOC_COMMENTS);", "-\t\t\t\t\tPRINTED_OLD_JAVA_DOC_WARNING = true;", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58c7a55db0bc2a8753123a85d9f81f95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java", "commitBeforeChange": "14ba43da4ca84e6aa2e4b0e2b6c660335b90691e", "commitAfterChange": "b7f39314c9eefd05e7002c31c87dcdb0333c0655", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\t \tpublic IResource resource(PackageFragmentRoot root)", "signatureAfterChange": "\t \tpublic IResource resource(PackageFragmentRoot root)", "diff": ["-\t\tif (this.resource == null && org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(this.jarPath.lastSegment())) {", "-\t\t\tthis.resource = JavaModel.getTarget(this.jarPath, false);", "-\t\t}", "-\t\tif (this.resource instanceof IResource) {", "-\t\t\treturn super.resource(root);", "-\t\t} else {", "+\t\tif (this.resource == null) {", "+\t\treturn super.resource(root);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fd9ff40995d6b4c12cfe39ecdc6b3c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "40b99e5148bf82c3e66b88907e69f5d1e18e6f74", "commitAfterChange": "85d2c2c8ac37bb6f0260d6630185def87956883b", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tprivate static void updateVariableValues( \t\tString[] variableNames, \t\tIPath[] variablePaths, \t\tIProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tprivate static void updateVariableValues( \t\tString[] variableNames, \t\tIPath[] variablePaths, \t\tIProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\t\t\t\t\t\t// ensures the project is getting rebuilt if only variable is modified", "-\t\t\t\t\t\t\t\tif (canChangeResources) {", "-\t\t\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t\t\taffectedProject.getProject().touch(progressMonitor);", "-\t\t\t\t\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "-\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"CPVariable SET - FAILED to touch project: \"+ affectedProject.getElementName()+\" for \"+ org.eclipse.jdt.internal.compiler.util.Util.toString(dbgVariableNames)); //$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\t\t\t\t\t\t\t\te.printStackTrace();", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "871c530aa87890462ff32f0af9d531df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "ddfc08455c51ec3ca9ceb0eaefe5f366b10475a4", "commitAfterChange": "47cd44339d540ba992e6757b69a80cc764284538", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic static IPath getClasspathVariable(final String variableName)", "signatureAfterChange": " \tpublic static IPath getClasspathVariable(final String variableName)", "diff": ["-\t\tif (variablePath != null && variablePath != JavaModelManager.VariablePreviouslyPersisted) {", "+\t\tif (variablePath != null) {", "-\t\t\t}", "-\t\t} else {", "-\t\t\tif (variablePath == JavaModelManager.VariablePreviouslyPersisted){", "-\t\t\t\tIPath persistedPath = (IPath)JavaModelManager.PreviouslyPersistedVariables.get(variableName);", "-\t\t\t\tJavaModelManager.variablePut(variableName, persistedPath);", "-\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "-\t\t\t\t\tSystem.out.println(\"CPVariable INIT - reusing cached value: \" + variableName + \" --> \" + persistedPath); //$NON-NLS-2$//$NON-NLS-1$", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e5b93681338c16cfd10b975f132f9b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/compiler/tool/Options.java", "commitBeforeChange": "1ec2b7315a64873d3fc6e56224b5e7356a454733", "commitAfterChange": "d239bd5948c1f3fdf8bc0b77924d220fefde31ce", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static int processOptionsFileManager(String option)", "signatureAfterChange": " \tpublic static int processOptionsFileManager(String option)", "diff": ["+\t}", "-\t\tif (\"-encoding\".equals(option)) {//$NON-NLS-1$", "-\t\t\treturn 1;", "-\t\t}", "-\t\tif (\"-d\".equals(option)) {//$NON-NLS-1$", "-\t\t\treturn 1;", "-\t\t}", "-\t\tif (\"-classpath\".equals(option)//$NON-NLS-1$", "-\t\t\t\t|| \"-cp\".equals(option)) {//$NON-NLS-1$", "-\t\t\treturn 1;", "-\t\t}", "-\t\tif (\"-bootclasspath\".equals(option)) {//$NON-NLS-1$", "-\t\t\treturn 1;", "-\t\t}", "-\t\tif (\"-sourcepath\".equals(option)) {//$NON-NLS-1$", "-\t\t\treturn 1;", "-\t\t}", "-\t\tif (\"-extdirs\".equals(option)) {//$NON-NLS-1$", "-\t\t\treturn 1;", "-\t\t}", "-\t\tif (\"-endorseddirs\".equals(option)) {//$NON-NLS-1$", "+\t\tif (FILE_MANAGER_OPTIONS.contains(option)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a713113281be001f5bac90a62f0f1a6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/Index.java", "commitBeforeChange": "0a2eedbd50adb9049a6119ce5bc61718d79db170", "commitAfterChange": "61838c2ec4c633bb2cdc1d21d43b28ec4bbd7a84", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void initialize(boolean reuseExistingFile) throws IOException", "signatureAfterChange": " \tpublic void initialize(boolean reuseExistingFile) throws IOException", "diff": ["-\t\t\t\tif (org.eclipse.jdt.internal.core.search.Util.bind(\"exception.wrongFormat\").equals(e.getMessage())) { //$NON-NLS-1$", "-\t\t\t\t\tInMemoryIndex mainIndex= new InMemoryIndex();\t\t\t", "-\t\t\t\t\tIndexOutput mainIndexOutput= new BlocksIndexOutput(indexFile);", "-\t\t\t\t\tmainIndex.save(mainIndexOutput);", "-\t\t\t\t} else {", "-\t\t\t\t\tmainIndexInput = null;", "-\t\t\t\t\tthrow e;", "-\t\t\t\t}", "+\t\t\t\tmainIndexInput = null;", "+\t\t\t\tthrow e;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b93b37a5acb3c561a3eabaab3a77c982", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/junit/extension/TestCase.java", "commitBeforeChange": "928bbf160d6f9d1eb9d492c7bd7fb73692671b03", "commitAfterChange": "c8a677fcf4f90b99bca8ae907d05299b956a00f6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " protected void assumeEquals(String msg, String expected, String actual)", "signatureAfterChange": " protected void assumeEquals(String expected, String actual)", "diff": ["+ */", "+protected void assumeEquals(String expected, String actual) {", "+\tassumeEquals(null, expected, actual);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8b8698fb3e05f1aafc3a571f619d78f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "02c514d098240b39ca407d5ca150d19b287af839", "commitAfterChange": "b38d183fc4bc8cb58dd4d9581cd22ea40ec0dfb9", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 11, "signatureBeforeChange": " protected void assertProblems(String message, String expected)", "signatureAfterChange": " protected void assertProblems(String message, String expected)", "diff": ["-\tString actual = Util.convertToIndependantLineDelimiter(this.problemRequestor.problems.toString());", "-\tString independantExpectedString = Util.convertToIndependantLineDelimiter(expected);", "-\tif (!independantExpectedString.equals(actual)){", "-\t \tSystem.out.println(Util.displayString(actual, 2));", "-\t}", "-\tassertEquals(", "-\t\tmessage,", "-\t\tindependantExpectedString,", "-\t\tactual);", "+\tassertProblems(message, expected, this.problemRequestor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c97645980d65a669557a90f20b438e67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClassNameTests.java", "commitBeforeChange": "e6d78cda375a26ce6fdb882d62ed50fe3c6a25b5", "commitAfterChange": "8aee5680d034dfec291b1e7b2abb4d9d081e8e31", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void setUp() throws Exception", "signatureAfterChange": " protected void setUp() throws Exception", "diff": ["-\tif (org.eclipse.jdt.internal.core.NameLookup.VERBOSE || org.eclipse.jdt.internal.core.search.BasicSearchEngine.VERBOSE) {", "-\t\tSystem.out.println(\"--------------------------------------------------------------------------------\");", "-\t\tSystem.out.println(\"Running test \"+getName()+\"...\");", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce40443f7f8927e066416b5b88b03e1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator2.java", "commitBeforeChange": "d9032a87dfcb69e19b4c3aae869d4a786d1fb149", "commitAfterChange": "eee6512d26cd1c50a9b02d1b4b78531f507d95fc", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tprivate void locateMatches(JavaProject javaProject) throws JavaModelException", "signatureAfterChange": " \tprivate void locateMatches(JavaProject javaProject, PotentialMatch[] potentialMatches, int start, int length) throws JavaModelException", "diff": ["-\t\t// copy array because elements  from the original are removed below", "+\t}", "+\tprivate void locateMatches(JavaProject javaProject, PotentialMatch[] potentialMatches, int start, int length) throws JavaModelException {", "+\t\t", "+\t\t// copy array because elements  from the original are removed below", "-\t\tSystem.arraycopy(potentialMatches, 0, copy, 0, length);", "+\t\tSystem.arraycopy(potentialMatches, start, copy, 0, length);", "-\t", "+\t\t", "-", "+\t\t", "-\t\t\tthis.createAndResolveBindings(potentialMatches);", "+\t\t\tthis.createAndResolveBindings(potentialMatches, start, length);", "-\t", "+\t\t", "-\t", "+\t\tpotentialMatches = null;", "+\t\t", "-\t\t\t\t\tif (this.options.verbose)", "-\t\t\t\t\t\tSystem.out.println(", "-\t\t\t\t\t\t\tUtil.bind(", "-\t\t\t\t\t\t\t\t\"compilation.process\" , //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\t\t\t\tString.valueOf(i + 1),", "-\t\t\t\t\t\t\t\t\tString.valueOf(totalUnits),", "-\t\t\t\t\t\t\t\t\tnew String(unitsToProcess[i].getFileName())}));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3419fd14d426afdb4bfabdf2321dc68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "14ba43da4ca84e6aa2e4b0e2b6c660335b90691e", "commitAfterChange": "b7f39314c9eefd05e7002c31c87dcdb0333c0655", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void computePackageFragmentRoots( \t\tIClasspathEntry resolvedEntry, \t\tObjectVector accumulatedRoots,  \t\tHashSet rootIDs,  \t\tIClasspathEntry referringEntry, \t\tboolean checkExistency, \t\tboolean retrieveExportedRoots, \t\tMap rootToResolvedEntries) throws JavaModelException", "signatureAfterChange": " \tpublic void computePackageFragmentRoots( \t\tIClasspathEntry resolvedEntry, \t\tObjectVector accumulatedRoots,  \t\tHashSet rootIDs,  \t\tIClasspathEntry referringEntry, \t\tboolean retrieveExportedRoots, \t\tMap rootToResolvedEntries) throws JavaModelException", "diff": ["-\t\tboolean checkExistency,", "-\t\t\t\t\tif (checkExistency) {", "-\t\t\t\t\t\tObject target = JavaModel.getTarget(entryPath, checkExistency);", "-\t\t\t\t\t\tif (target == null) return;", "-\t", "-\t\t\t\t\t\tif (target instanceof IFolder || target instanceof IProject){", "-\t\t\t\t\t\t\troot = getPackageFragmentRoot((IResource)target);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\troot = getFolderPackageFragmentRoot(entryPath);", "+\t\t\t\t\tObject target = JavaModel.getTarget(entryPath, true/*check existency*/);", "+\t\t\t\t\tif (target == null) return;", "+", "+\t\t\t\t\tif (target instanceof IFolder || target instanceof IProject){", "+\t\t\t\t\t\troot = getPackageFragmentRoot((IResource)target);", "-\t\t\t", "-\t\t\t\tif (referringEntry != null  && !resolvedEntry.isExported()) return;", "-\t\t\t\t", "-\t\t\t\tif (checkExistency) {", "-\t\t\t\t\tObject target = JavaModel.getTarget(entryPath, checkExistency);", "-\t\t\t\t\tif (target == null) return;", "-\t", "-\t\t\t\t\tif (target instanceof IResource){", "-\t\t\t\t\t\t// internal target", "-\t\t\t\t\t\troot = getPackageFragmentRoot((IResource) target, entryPath);", "-\t\t\t\t\t} else if (target instanceof File) {", "-\t\t\t\t\t\t// external target", "-\t\t\t\t\t\tif (JavaModel.isFile(target) && (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(entryPath.lastSegment()))) {", "-\t\t\t\t\t\t\troot = new JarPackageFragmentRoot(entryPath, this);", "-\t\t\t\t\t\t} else if (((File) target).isDirectory()) {", "-\t\t\t\t\t\t\troot = new ExternalPackageFragmentRoot(entryPath, this);", "-\t\t\t\t\t\t}", "+\t\t\t\tif (referringEntry != null  && !resolvedEntry.isExported()) ", "+\t\t\t\t\treturn;", "+\t\t\t\tObject target = JavaModel.getTarget(entryPath, true/*check existency*/);", "+\t\t\t\tif (target == null) ", "+\t\t\t\t\treturn;", "+", "+\t\t\t\tif (target instanceof IResource){", "+\t\t\t\t\t// internal target", "+\t\t\t\t\troot = getPackageFragmentRoot((IResource) target, entryPath);", "+\t\t\t\t} else if (target instanceof File) {", "+\t\t\t\t\t// external target", "+\t\t\t\t\tif (JavaModel.isFile(target)) {", "+\t\t\t\t\t\troot = new JarPackageFragmentRoot(entryPath, this);", "+\t\t\t\t\t} else if (((File) target).isDirectory()) {", "+\t\t\t\t\t\troot = new ExternalPackageFragmentRoot(entryPath, this);", "-\t\t\t\t} else {", "-\t\t\t\t\troot = getPackageFragmentRoot(entryPath);", "-\t\t\t\t\t\t\tcheckExistency, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edb8bf4f219980a911e162d4552bb5ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "97f8324e5173c25eb49866037a9ca2738b41d6bc", "commitAfterChange": "d3e0216a95fa30f6c7aa5765196e9b2431469696", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tprotected void assertSearchResults(String message, String expected, Object collector)", "signatureAfterChange": " \tprotected void assertSearchResults(String message, String expected, Object collector)", "diff": ["+\t\tassertSearchResults(message, expected, collector, true /* assertion */);", "+\t}", "-\t\tassertEquals(", "-\t\t\tmessage,", "-\t\t\texpected,", "-\t\t\tactual", "-\t\t);"]}], "num": 46525}
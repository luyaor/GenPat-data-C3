{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31c8472f0bf8a98b7f735a4dafa66f8c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21ca9908d668669d9c3e62948343faf6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AptBuilderTests.java", "commitBeforeChange": "7064f5cf4e1b20562054db6ff22e27e2bfde4008", "commitAfterChange": "c020688b25edf08bbc7d8d68981663ad78d2a9d8", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic void testAPTRounding()", "signatureAfterChange": " \t \tpublic void testAPTRounding()", "diff": ["-\t\tString codeA = \"package p1;\\n\"", "+\t\tString codeX = \"package p1;\\n\"", "-\t\t\t+ \"public class A {}\\n\";", "+\t\t\t+ \"public class X {}\\n\";", "-\t\tenv.addClass( srcRoot, \"p1\", \"A\", codeA );", "+\t\tenv.addClass( srcRoot, \"p1\", \"X\", codeX );", "-\t\tString codeB = \"package p1;\\n\"", "+\t\tString codeY = \"package p1;\\n\"", "-\t\t\t+ \"public class B { @GenBean2 test.Bean _bean = null; }\\n\";", "+\t\t\t+ \"public class Y { @GenBean2 test.Bean _bean = null; }\\n\";", "-\t\tenv.addClass( srcRoot, \"p1\", \"B\", codeB );", "+\t\tenv.addClass( srcRoot, \"p1\", \"Y\", codeY );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3718e2442616466801b9c42dfa2616ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/typeutils/TypeUtilsProc.java", "commitBeforeChange": "57b3e1abeb63c771e6bdc37b05f8550c215d97c4", "commitAfterChange": "8263b1bf4e0979f16664b3ec7a3f63f9c444d8c1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate boolean examineGetDeclaredTypeNested()", "signatureAfterChange": " \tprivate boolean examineGetDeclaredTypeNested()", "diff": ["-\t\tTypeElement mapDecl = _elementUtils.getTypeElement(\"java.util.HashMap\");", "-\t\tTypeElement iterDecl = _elementUtils.getTypeElement(\"java.util.HashMap.HashIterator\");", "+\t\tTypeElement elementOuter = _elementUtils.getTypeElement(\"targets.model.pd.Outer\");", "+\t\tTypeElement elementInner = _elementUtils.getTypeElement(\"targets.model.pd.Outer.Inner\");", "-\t\t// HashMap<String, Number[]>", "-\t\tDeclaredType outerType = _typeUtils.getDeclaredType(mapDecl, stringType, numberArrayType);", "-\t\t", "-\t\t// HashMap<String, Number[]>.HashIterator<Number[]>", "-\t\tDeclaredType decl = _typeUtils.getDeclaredType(outerType, iterDecl, new TypeMirror[] { numberArrayType });", "-\t\t", "+\t\t// Outer<T1, T2> ---> Outer<String, Number[]>", "+\t\tDeclaredType outerType = _typeUtils.getDeclaredType(elementOuter, stringType, numberArrayType);", "+", "+\t\t// Outer<T1, T2>.Inner<T2> ---> Outer<String, Number[]>.Inner<Number[]>", "+\t\tDeclaredType decl = _typeUtils.getDeclaredType(outerType, elementInner, new TypeMirror[] { numberArrayType });", "+", "-\t\t\treportError(\"Map<String, Number[]>.EntryIterator<Number[]> should have one argument but decl.getTypeArguments() returned \" + args.size());", "+\t\t\treportError(\"Outer<String, Number[]>.Inner<Number[]> should have one argument but decl.getTypeArguments() returned \" + args.size());", "-\t\t\treportError(\"First arg of Map<String, Number[]>.EntryIterator<Number[]> was expected to be Number[], but was: \" + args.get(0));", "+\t\t\treportError(\"First arg of Outer<String, Number[]>.Inner<Number[]> was expected to be Number[], but was: \" + args.get(0));"]}], "num": 2812}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb6879c10fe59b6ca46094f6c0f3fc00", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d94092cf2399336d7270fc95758314c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LongLiteral.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public final boolean mayRepresentMIN_VALUE()", "signatureAfterChange": " public LongLiteral convertToMinValue()", "diff": ["+}", "+public LongLiteral convertToMinValue() {", "+\tif (((this.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT) != 0) {", "+\t\treturn this;", "+\t}", "+\tchar[] token = this.reducedForm != null ? this.reducedForm : this.source;", "+\tswitch(token.length) {", "+\t\tcase 20 :", "+\t\t\t// 9223372036854775808L", "+\t\t\tif (CharOperation.equals(token, DECIMAL_MIN_VALUE, false)) {", "+\t\t\t\treturn new LongLiteralMinValue(this.source, this.reducedForm, this.sourceStart, this.sourceEnd);", "+\t\t\t}", "+\t\t\tbreak;", "+\t}", "+\treturn this;", "+}", "-", "-public final boolean mayRepresentMIN_VALUE(){", "-\t//a special autorized int literral is 9223372036854775808L", "-\t//which is ONE over the limit. This special case", "-\t//only is used in combinaison with - to denote", "-\t//the minimal value of int -9223372036854775808L", "-\treturn ((this.source.length == 20) &&", "-\t\t\t(this.source[0] == '9') &&", "-\t\t\t(this.source[1] == '2') &&", "-\t\t\t(this.source[2] == '2') &&", "-\t\t\t(this.source[3] == '3') &&", "-\t\t\t(this.source[4] == '3') &&", "-\t\t\t(this.source[5] == '7') &&", "-\t\t\t(this.source[6] == '2') &&", "-\t\t\t(this.source[7] == '0') &&", "-\t\t\t(this.source[8] == '3') &&", "-\t\t\t(this.source[9] == '6') &&", "-\t\t\t(this.source[10] == '8') &&", "-\t\t\t(this.source[11] == '5') &&", "-\t\t\t(this.source[12] == '4') &&", "-\t\t\t(this.source[13] == '7') &&", "-\t\t\t(this.source[14] == '7') &&", "-\t\t\t(this.source[15] == '5') &&", "-\t\t\t(this.source[16] == '8') &&", "-\t\t\t(this.source[17] == '0') &&", "-\t\t\t(this.source[18] == '8') &&", "-\t\t\t(((this.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT) == 0));", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e602281ba9cb5b4805fdb2356db822cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IntLiteral.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public final boolean mayRepresentMIN_VALUE()", "signatureAfterChange": " public IntLiteral convertToMinValue()", "diff": ["+}", "+public IntLiteral convertToMinValue() {", "+\tif (((this.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT) != 0) {", "+\t\treturn this;", "+\t}", "+\tchar[] token = this.reducedForm != null ? this.reducedForm : this.source;", "+\tswitch(token.length) {", "+\t\tcase 10 :", "+\t\t\t// 2147483648", "+\t\t\tif (CharOperation.equals(token, DECIMAL_MIN_VALUE)) {", "+\t\t\t\treturn new IntLiteralMinValue(this.source, this.reducedForm, this.sourceStart, this.sourceEnd);", "+\t\t\t}", "+\t\t\tbreak;", "+\t}", "+\treturn this;", "+}", "-", "-public final boolean mayRepresentMIN_VALUE(){", "-\t//a special autorized int literral is 2147483648", "-\t//which is ONE over the limit. This special case", "-\t//only is used in combinaison with - to denote", "-\t//the minimal value of int -2147483648", "-\treturn ((this.source.length == 10) &&", "-\t\t\t(this.source[0] == '2') &&", "-\t\t\t(this.source[1] == '1') &&", "-\t\t\t(this.source[2] == '4') &&", "-\t\t\t(this.source[3] == '7') &&", "-\t\t\t(this.source[4] == '4') &&", "-\t\t\t(this.source[5] == '8') &&", "-\t\t\t(this.source[6] == '3') &&", "-\t\t\t(this.source[7] == '6') &&", "-\t\t\t(this.source[8] == '4') &&", "-\t\t\t(this.source[9] == '8') &&", "-\t\t\t(((this.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT) == 0));"]}], "num": 51957}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "933a4f520f470199fc4ccdab87079892", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "650d926d477a7b1d4c64603a8ec6da9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "d822f3498ffb9e5cdd62d79ada53897bda8bb948", "commitAfterChange": "30d928a4ed94bdfc40106ae995b6d295a0fd9974", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t\t", "-\t\t\t\tif (this.caughtExceptionTypes[i].isUncheckedException(false)) {", "+\t\t\t\tif (this.caughtExceptionTypes[i].isUncheckedException(true)) {", "-\t\t\t\t\t\tflowInfo.unconditionalCopy().", "-\t\t\t\t\t\t\taddPotentialInitializationsFrom(", "-\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "-\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i]))", "-\t\t\t\t\t\t\t.addPotentialInitializationsFrom(tryInfo)", "-\t\t\t\t\t\t\t.addPotentialInitializationsFrom(handlingContext.initsOnReturn);", "+\t\t\t\t\t\thandlingContext.initsOnFinally.mitigateNullInfoOf(", "+\t\t\t\t\t\t\tflowInfo.unconditionalCopy().", "+\t\t\t\t\t\t\t\taddPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "+\t\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i])).", "+\t\t\t\t\t\t\t\taddPotentialInitializationsFrom(tryInfo).", "+\t\t\t\t\t\t\t\taddPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\t\thandlingContext.initsOnReturn));", "-\t\t\t\tFlowInfo catchInfo =", "+\t\t\t\tFlowInfo catchInfo;", "+\t\t\t\tif (this.caughtExceptionTypes[i].isUncheckedException(true)) {", "+\t\t\t\t\tcatchInfo =", "+\t\t\t\t\t\thandlingContext.initsOnFinally.mitigateNullInfoOf(", "+\t\t\t\t\t\t\tflowInfo.unconditionalCopy().", "+\t\t\t\t\t\t\t\taddPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "+\t\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i])).", "+\t\t\t\t\t\t\t\taddPotentialInitializationsFrom(tryInfo).", "+\t\t\t\t\t\t\t\taddPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\t\thandlingContext.initsOnReturn));", "+\t\t\t\t}", "+\t\t\t\telse {", "+\t\t\t\tcatchInfo =", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cac9226cec4e8e097138b4f297cac18b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "4588c3b4f2f50edc1b7f6b03c5e9b0e36a6638a1", "commitAfterChange": "3d13a3235f809dfb48a127bd36dbb2c405e56ef1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\t\tthis.catchExitInitStateIndexes = new int[catchCount];", "-\t\t\t\t}", "-\t\t\t\telse {", "+\t\t\t\t} else {", "+\t\t\t\tthis.catchExitInitStateIndexes[i] = currentScope.methodScope().recordInitializationStates(catchInfo);", "+\t\t\tthis.catchExitInitStateIndexes = new int[catchCount];", "-\t\t\t\t}", "-\t\t\t\telse {", "-\t\t\t\tcatchInfo =", "-\t\t\t\t\tflowInfo.unconditionalCopy()", "-\t\t\t\t\t\t.addPotentialInitializationsFrom(", "-\t\t\t\t\t\t\thandlingContext.initsOnException(", "-\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i]))", "-\t\t\t\t\t\t.addPotentialInitializationsFrom(", "-\t\t\t\t\t\t\ttryInfo.nullInfoLessUnconditionalCopy())", "-\t\t\t\t\t\t\t// remove null info to protect point of ", "-\t\t\t\t\t\t\t// exception null info ", "-\t\t\t\t\t\t.addPotentialInitializationsFrom(", "-\t\t\t\t\t\t\thandlingContext.initsOnReturn.", "-\t\t\t\t\t\t\t\tnullInfoLessUnconditionalCopy());", "+\t\t\t\t}else {", "+\t\t\t\t\tcatchInfo =", "+\t\t\t\t\t\tflowInfo.unconditionalCopy()", "+\t\t\t\t\t\t\t.addPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "+\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i]))", "+\t\t\t\t\t\t\t\t\t.addPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\ttryInfo.nullInfoLessUnconditionalCopy())", "+\t\t\t\t\t\t\t\t// remove null info to protect point of ", "+\t\t\t\t\t\t\t\t// exception null info ", "+\t\t\t\t\t\t\t.addPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\t\thandlingContext.initsOnReturn.", "+\t\t\t\t\t\t\t\t\tnullInfoLessUnconditionalCopy());", "+\t\t\t\tthis.catchExitInitStateIndexes[i] = currentScope.methodScope().recordInitializationStates(catchInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3ce51c80b4be060e013c3b26f271880", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "d9cbfd6f811edb92fc809248f3faf5313070d684", "commitAfterChange": "cdaab2bab93686ddb22cddbf86b514844fa4d1bb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t\tFlowInfo catchInfo =", "-\t\t\t\t\tflowInfo.unconditionalCopy().", "-\t\t\t\t\t\taddPotentialInitializationsFrom(", "-\t\t\t\t\t\t\thandlingContext.initsOnException(", "-\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i]))", "-\t\t\t\t\t\t.addPotentialInitializationsFrom(", "-\t\t\t\t\t\t\ttryInfo.nullInfoLessUnconditionalCopy())", "-\t\t\t\t\t\t\t// remove null info to protect point of ", "-\t\t\t\t\t\t\t// exception null info ", "-\t\t\t\t\t\t.addPotentialInitializationsFrom(", "-\t\t\t\t\t\t\thandlingContext.initsOnReturn.", "-\t\t\t\t\t\t\t\tnullInfoLessUnconditionalCopy());", "+\t\t\t\t", "+\t\t\t\tFlowInfo catchInfo;", "+\t\t\t\tif (this.caughtExceptionTypes[i].isUncheckedException(false)) {", "+\t\t\t\t\tcatchInfo =", "+\t\t\t\t\t\tflowInfo.unconditionalCopy().", "+\t\t\t\t\t\t\taddPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "+\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i]))", "+\t\t\t\t\t\t\t.addPotentialInitializationsFrom(tryInfo)", "+\t\t\t\t\t\t\t.addPotentialInitializationsFrom(handlingContext.initsOnReturn);", "+\t\t\t\t}", "+\t\t\t\telse {", "+\t\t\t\t\tcatchInfo =", "+\t\t\t\t\t\tflowInfo.unconditionalCopy().", "+\t\t\t\t\t\t\taddPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "+\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i]))", "+\t\t\t\t\t\t\t.addPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\ttryInfo.nullInfoLessUnconditionalCopy())", "+\t\t\t\t\t\t\t\t// remove null info to protect point of ", "+\t\t\t\t\t\t\t\t// exception null info ", "+\t\t\t\t\t\t\t.addPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\thandlingContext.initsOnReturn.", "+\t\t\t\t\t\t\t\t\tnullInfoLessUnconditionalCopy());", "+\t\t\t\t}"]}], "num": 63055}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "952ab463c30ed189c602eb91339b3744", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b9cd1a79e46bc6612e15ba1a396937a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/junit/extension/TestCase.java", "commitBeforeChange": "65d5b0757d9f6d9ae4d847cdc0ac64843f3b03b3", "commitAfterChange": "1e679d1a20634ff7b631ac043f1b9d1b716bcd23", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": " public static void assertEquals(String message, String expected, String actual)", "signatureAfterChange": " public static void assertStringEquals(String message, String expected, String actual, boolean showLineSeparators)", "diff": ["+}", "+public static void assertStringEquals(String message, String expected, String actual, boolean showLineSeparators) {", "-\tfinal String expectedWithLineSeparators = expected == null ? null : showLineSeparators(expected);", "-\tfinal String actualWithLineSeparators = actual == null ? null : showLineSeparators(actual);", "-\t", "-\tthrow new ComparisonFailure(", "-\t    formatted", "-\t\t\t+ \"\\n----------- Expected ------------\\n\" //$NON-NLS-1$", "-\t\t\t+ expectedWithLineSeparators", "-\t\t\t+ \"\\n------------ but was ------------\\n\" //$NON-NLS-1$", "-\t\t\t+ actualWithLineSeparators", "-\t\t\t+ \"\\n--------- Difference is ----------\\n\", //$NON-NLS-1$", "-\t    expectedWithLineSeparators, ", "-\t    actualWithLineSeparators);", "+\tif (showLineSeparators) {", "+\t\tfinal String expectedWithLineSeparators = showLineSeparators(expected);", "+\t\tfinal String actualWithLineSeparators = showLineSeparators(actual);", "+\t\tthrow new ComparisonFailure(", "+\t\t\t    formatted", "+\t\t\t\t\t+ \"\\n----------- Expected ------------\\n\" //$NON-NLS-1$", "+\t\t\t\t\t+ expectedWithLineSeparators", "+\t\t\t\t\t+ \"\\n------------ but was ------------\\n\" //$NON-NLS-1$", "+\t\t\t\t\t+ actualWithLineSeparators", "+\t\t\t\t\t+ \"\\n--------- Difference is ----------\\n\", //$NON-NLS-1$", "+\t\t\t    expectedWithLineSeparators, ", "+\t\t\t    actualWithLineSeparators);", "+\t} else {", "+\t\tthrow new ComparisonFailure(", "+\t\t\t    formatted", "+\t\t\t\t\t+ \"\\n----------- Expected ------------\\n\" //$NON-NLS-1$", "+\t\t\t\t\t+ expected", "+\t\t\t\t\t+ \"\\n------------ but was ------------\\n\" //$NON-NLS-1$", "+\t\t\t\t\t+ actual", "+\t\t\t\t\t+ \"\\n--------- Difference is ----------\\n\", //$NON-NLS-1$", "+\t\t\t    expected, ", "+\t\t\t    actual);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91aa4ddbe259bb3631c7e96ff09e0821", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "995521865cfd6e568bdd12bfb7d4a59fc50611ab", "commitAfterChange": "3efbae02af9125c723d4c2de65767b20d72aaa7a", "methodNumberBeforeChange": 1308, "methodNumberAfterChange": 1308, "signatureBeforeChange": " public void test1273()", "signatureAfterChange": " public void test1273()", "diff": ["-// FIXME javac8 rejects", "-\tthis.runConformTest(", "+\tString sourceX =", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"\t// some functor and functor instances definitions\\n\" +", "+\t\t\t\"\tstatic interface OO<T, E> { \\n\" +", "+\t\t\t\"\t\tpublic T eval(E x);\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\tstatic interface TO<T> extends OO<String, T> {\\n\" +", "+\t\t\t\"\t\tpublic String eval(T x);\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\tstatic interface TT extends TO<String> {\\n\" +", "+\t\t\t\"\t\tpublic String eval(String x);\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\tstatic final TO<Object> FUNC1 = null;\\n\" +", "+\t\t\t\"\tstatic final TT FUNC2 = null;\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"\t// some functor combinators\\n\" +", "+\t\t\t\"\tstatic <E> TO<E> combine(final TT x, final TO<? super E> y) { // # 1\\n\" +", "+\t\t\t\"\t\tSystem.out.println(\\\"#1#\\\");\\n\" +", "+\t\t\t\"\t\treturn new TO<E>() { public String eval(E o) { return x.eval(y.eval(o)); } }; \\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\tstatic <E, T> TO<T> combine(final TO<? super E> x, final OO<E, T> y) { // # 2\\n\" +", "+\t\t\t\"\t\tSystem.out.println(\\\"#2#\\\");\\n\" +", "+\t\t\t\"\t\treturn new TO<T>() { public String eval(T o) { return x.eval(y.eval(o)); } }; \\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\t// body of the test\\n\" +", "+\t\t\t\"\tstatic <E> void put(Class<E> type, TO<? super E> func) {\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\"\t\tput(Integer.class, combine(FUNC2, FUNC1));\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\\n\";", "+\tif (this.complianceLevel < ClassFileConstants.JDK1_8) {", "+\t\tthis.runConformTest(", "-\t\t\t\t\t\"X.java\",", "-\t\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\t\"\t// some functor and functor instances definitions\\n\" +", "-\t\t\t\t\t\"\tstatic interface OO<T, E> { \\n\" +", "-\t\t\t\t\t\"\t\tpublic T eval(E x);\\n\" +", "-\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\"\tstatic interface TO<T> extends OO<String, T> {\\n\" +", "-\t\t\t\t\t\"\t\tpublic String eval(T x);\\n\" +", "-\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\"\tstatic interface TT extends TO<String> {\\n\" +", "-\t\t\t\t\t\"\t\tpublic String eval(String x);\\n\" +", "-\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\"\tstatic final TO<Object> FUNC1 = null;\\n\" +", "-\t\t\t\t\t\"\tstatic final TT FUNC2 = null;\\n\" +", "-\t\t\t\t\t\"\\n\" +", "-\t\t\t\t\t\"\t// some functor combinators\\n\" +", "-\t\t\t\t\t\"\tstatic <E> TO<E> combine(final TT x, final TO<? super E> y) { // # 1\\n\" +", "-\t\t\t\t\t\"\t\tSystem.out.println(\\\"#1#\\\");\\n\" +", "-\t\t\t\t\t\"\t\treturn new TO<E>() { public String eval(E o) { return x.eval(y.eval(o)); } }; \\n\" +", "-\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\"\tstatic <E, T> TO<T> combine(final TO<? super E> x, final OO<E, T> y) { // # 2\\n\" +", "-\t\t\t\t\t\"\t\tSystem.out.println(\\\"#2#\\\");\\n\" +", "-\t\t\t\t\t\"\t\treturn new TO<T>() { public String eval(T o) { return x.eval(y.eval(o)); } }; \\n\" +", "-\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\"\t// body of the test\\n\" +", "-\t\t\t\t\t\"\tstatic <E> void put(Class<E> type, TO<? super E> func) {\\n\" +", "-\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\t\"\t\tput(Integer.class, combine(FUNC2, FUNC1));\\n\" +", "-\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\"}\\n\", // =================", "+\t\t\t\t\"X.java\",", "+\t\t\t\tsourceX,", "+\t} else {", "+\t\trunNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\tsourceX", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 28)\\n\" + ", "+\t\t\t\"\tput(Integer.class, combine(FUNC2, FUNC1));\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^\\n\" + ", "+\t\t\t\"The method combine(X.TT, X.TO<? super Object>) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\" );", "+\t}"]}], "num": 71500}
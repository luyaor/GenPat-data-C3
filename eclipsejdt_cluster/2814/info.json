{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e9f259750f490441ea50c689f25773e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4937b67b1f6ed275414444e90476f1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiProjectTests.java", "commitBeforeChange": "251f99acbb8995bd23d5e9a86fb5718901825772", "commitAfterChange": "b82e4a0e1d547d361495e1d72928b04c339786b5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic void testCycle4() throws JavaModelException", "signatureAfterChange": " \t \tpublic void testCycle4() throws JavaModelException", "diff": ["-\t\tenv.setBuildOrder(new String[]{\"P1\", \"P2\", \"P3\"});//$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ ", "-\t\tfullBuild();", "-\t\t", "-\t\texpectingCompilingOrder(new String[]{\"p2.Y\", \"p3.Z\", \"p2.Y\"});//$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$", "-\t\texpectingOnlySpecificProblemFor(p1,new Problem(\"p1\", \"A cycle was detected in the project's classpath.\", p1));//$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingOnlySpecificProblemsFor(p2,new Problem[]{", "-\t\t\tnew Problem(\"p2\", \"The import p1 cannot be resolved\", c2),//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tnew Problem(\"p2\", \"X cannot be resolved (or is not a valid return type) for the method zork\", c2),//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tnew Problem(\"p2\", \"X cannot be resolved or is not a type\", c2),//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tnew Problem(\"p2\", \"The method foo() is undefined for the type Y\", c2),//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tnew Problem(\"p2\", \"A cycle was detected in the project's classpath.\", p2)//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t});", "-\t\texpectingOnlySpecificProblemsFor(p3,new Problem[]{", "-\t\t\tnew Problem(\"p3\", \"X cannot be resolved (or is not a valid return type) for the method foo\", c3),//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tnew Problem(\"p3\", \"The import p1 cannot be resolved\", c3),//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tnew Problem(\"p3\", \"A cycle was detected in the project's classpath.\", p3)//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t});", "-", "-\t\tenv.addClass(root1, \"p1\", \"X\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\"package p1;\\n\"+ //$NON-NLS-1$", "-\t\t\t\"import p2.Y;\\n\"+ //$NON-NLS-1$", "-\t\t\t\"public class X {\\n\"+ //$NON-NLS-1$", "-\t\t\t\"  public void bar(Y y){\\n\"+ //$NON-NLS-1$", "-\t\t\t\"    y.zork();\\n\"+ //$NON-NLS-1$", "-\t\t\t\"  }\\n\"+ //$NON-NLS-1$", "-\t\t\t\"}\\n\" //$NON-NLS-1$", "-\t\t\t);", "-\t\tincrementalBuild();", "-\t\texpectingCompilingOrder(new String[]{\"p1.X\", \"p2.Y\", \"p3.Z\", \"p1.X\", \"p2.Y\"}); //$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ //$NON-NLS-4$//$NON-NLS-5$ ", "-\t\texpectingOnlySpecificProblemFor(p1,new Problem(\"p1\", \"A cycle was detected in the project's classpath.\", p1));//$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingOnlySpecificProblemFor(p2,new Problem(\"p2\", \"A cycle was detected in the project's classpath.\", p2));//$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingOnlySpecificProblemFor(p3,new Problem(\"p3\", \"A cycle was detected in the project's classpath.\", p3));//$NON-NLS-1$ //$NON-NLS-2$", "-", "-\t\tJavaCore.setOptions(options);", "+\t\ttry {", "+\t\t\tenv.setBuildOrder(new String[]{\"P1\", \"P2\", \"P3\"});//$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ ", "+\t\t\tfullBuild();", "+\t\t\t", "+\t\t\texpectingCompilingOrder(new String[]{\"p2.Y\", \"p3.Z\", \"p2.Y\"});//$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$", "+\t\t\texpectingOnlySpecificProblemFor(p1,new Problem(\"p1\", \"A cycle was detected in the project's classpath.\", p1));//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingOnlySpecificProblemsFor(p2,new Problem[]{", "+\t\t\t\tnew Problem(\"p2\", \"The import p1 cannot be resolved\", c2),//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p2\", \"X cannot be resolved (or is not a valid return type) for the method zork\", c2),//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p2\", \"X cannot be resolved or is not a type\", c2),//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p2\", \"The method foo() is undefined for the type Y\", c2),//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p2\", \"A cycle was detected in the project's classpath.\", p2)//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t});", "+\t\t\texpectingOnlySpecificProblemsFor(p3,new Problem[]{", "+\t\t\t\tnew Problem(\"p3\", \"X cannot be resolved (or is not a valid return type) for the method foo\", c3),//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p3\", \"The import p1 cannot be resolved\", c3),//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p3\", \"A cycle was detected in the project's classpath.\", p3)//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t});", "+\t", "+\t\t\tenv.addClass(root1, \"p1\", \"X\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\"package p1;\\n\"+ //$NON-NLS-1$", "+\t\t\t\t\"import p2.Y;\\n\"+ //$NON-NLS-1$", "+\t\t\t\t\"public class X {\\n\"+ //$NON-NLS-1$", "+\t\t\t\t\"  public void bar(Y y){\\n\"+ //$NON-NLS-1$", "+\t\t\t\t\"    y.zork();\\n\"+ //$NON-NLS-1$", "+\t\t\t\t\"  }\\n\"+ //$NON-NLS-1$", "+\t\t\t\t\"}\\n\" //$NON-NLS-1$", "+\t\t\t\t);", "+\t\t\tincrementalBuild();", "+\t\t\texpectingCompilingOrder(new String[]{\"p1.X\", \"p2.Y\", \"p3.Z\", \"p1.X\", \"p2.Y\"}); //$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ //$NON-NLS-4$//$NON-NLS-5$ ", "+\t\t\texpectingOnlySpecificProblemFor(p1,new Problem(\"p1\", \"A cycle was detected in the project's classpath.\", p1));//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingOnlySpecificProblemFor(p2,new Problem(\"p2\", \"A cycle was detected in the project's classpath.\", p2));//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingOnlySpecificProblemFor(p3,new Problem(\"p3\", \"A cycle was detected in the project's classpath.\", p3));//$NON-NLS-1$ //$NON-NLS-2$", "+\t", "+\t\t\tJavaCore.setOptions(options);", "+\t\t} finally {", "+\t\t\tenv.setBuildOrder(null);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1bfbc4db8c4e035506def69de7b9b8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiProjectTests.java", "commitBeforeChange": "251f99acbb8995bd23d5e9a86fb5718901825772", "commitAfterChange": "b82e4a0e1d547d361495e1d72928b04c339786b5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic void testCycle3() throws JavaModelException", "signatureAfterChange": " \t \tpublic void testCycle3() throws JavaModelException", "diff": ["-\t\tenv.setBuildOrder(new String[]{\"P1\", \"P2\", \"P3\"});//$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ ", "-\t\tfullBuild();", "-\t\t", "-\t\texpectingCompilingOrder(new String[]{\"p1.X\", \"p2.Y\", \"p3.Z\", \"p1.X\", \"p2.Y\", \"p3.Z\", \"p1.X\"});//$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ //$NON-NLS-4$//$NON-NLS-5$ //$NON-NLS-6$//$NON-NLS-7$", "-\t\texpectingOnlySpecificProblemFor(p1,new Problem(\"p1\", \"A cycle was detected in the project's classpath.\", p1));//$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingOnlySpecificProblemFor(p2,new Problem(\"p2\", \"A cycle was detected in the project's classpath.\", p2));//$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingOnlySpecificProblemFor(p3,new Problem(\"p3\", \"A cycle was detected in the project's classpath.\", p3));//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t", "-\t\tenv.addClass(root1, \"p1\", \"X\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\"package p1;\\n\"+ //$NON-NLS-1$", "-\t\t\t\"import p2.Y;\\n\"+ //$NON-NLS-1$", "-\t\t\t\"public class X {\\n\"+ //$NON-NLS-1$", "-\t\t\t\"  public void bar(Y y, int i){\\n\"+ //$NON-NLS-1$", "-\t\t\t\"    y.zork();\\n\"+ //$NON-NLS-1$", "-\t\t\t\"  }\\n\"+ //$NON-NLS-1$", "-\t\t\t\"}\\n\" //$NON-NLS-1$", "-\t\t\t);", "-\t\tincrementalBuild();", "-\t\t", "-\t\texpectingCompilingOrder(new String[]{\"p1.X\", \"p2.Y\", \"p3.Z\"}); //$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ ", "-\t\texpectingOnlySpecificProblemFor(p1,new Problem(\"p1\", \"A cycle was detected in the project's classpath.\", p1));//$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingOnlySpecificProblemsFor(p2,new Problem[]{", "-\t\t\t\tnew Problem(\"p2\", \"The method bar(Y, int) in the type X is not applicable for the arguments (Y)\", c2),//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tnew Problem(\"p2\", \"A cycle was detected in the project's classpath.\", p2)//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t});", "-\t\texpectingOnlySpecificProblemFor(p3,new Problem(\"p3\", \"A cycle was detected in the project's classpath.\", p3));//$NON-NLS-1$ //$NON-NLS-2$", "-", "-\t\tJavaCore.setOptions(options);", "+\t\ttry {", "+\t\t\tenv.setBuildOrder(new String[]{\"P1\", \"P2\", \"P3\"});//$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ ", "+\t\t\tfullBuild();", "+\t\t\t", "+\t\t\texpectingCompilingOrder(new String[]{\"p1.X\", \"p2.Y\", \"p3.Z\", \"p1.X\", \"p2.Y\", \"p3.Z\", \"p1.X\"});//$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ //$NON-NLS-4$//$NON-NLS-5$ //$NON-NLS-6$//$NON-NLS-7$", "+\t\t\texpectingOnlySpecificProblemFor(p1,new Problem(\"p1\", \"A cycle was detected in the project's classpath.\", p1));//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingOnlySpecificProblemFor(p2,new Problem(\"p2\", \"A cycle was detected in the project's classpath.\", p2));//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingOnlySpecificProblemFor(p3,new Problem(\"p3\", \"A cycle was detected in the project's classpath.\", p3));//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t", "+\t\t\tenv.addClass(root1, \"p1\", \"X\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\"package p1;\\n\"+ //$NON-NLS-1$", "+\t\t\t\t\"import p2.Y;\\n\"+ //$NON-NLS-1$", "+\t\t\t\t\"public class X {\\n\"+ //$NON-NLS-1$", "+\t\t\t\t\"  public void bar(Y y, int i){\\n\"+ //$NON-NLS-1$", "+\t\t\t\t\"    y.zork();\\n\"+ //$NON-NLS-1$", "+\t\t\t\t\"  }\\n\"+ //$NON-NLS-1$", "+\t\t\t\t\"}\\n\" //$NON-NLS-1$", "+\t\t\t\t);", "+\t\t\tincrementalBuild();", "+\t\t\t", "+\t\t\texpectingCompilingOrder(new String[]{\"p1.X\", \"p2.Y\", \"p3.Z\"}); //$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ ", "+\t\t\texpectingOnlySpecificProblemFor(p1,new Problem(\"p1\", \"A cycle was detected in the project's classpath.\", p1));//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\texpectingOnlySpecificProblemsFor(p2,new Problem[]{", "+\t\t\t\t\tnew Problem(\"p2\", \"The method bar(Y, int) in the type X is not applicable for the arguments (Y)\", c2),//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\tnew Problem(\"p2\", \"A cycle was detected in the project's classpath.\", p2)//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t});", "+\t\t\texpectingOnlySpecificProblemFor(p3,new Problem(\"p3\", \"A cycle was detected in the project's classpath.\", p3));//$NON-NLS-1$ //$NON-NLS-2$", "+\t", "+\t\t\tJavaCore.setOptions(options);", "+\t\t} finally {", "+\t\t\tenv.setBuildOrder(null);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f32016fa3691b47420b893951fa5357d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiProjectTests.java", "commitBeforeChange": "251f99acbb8995bd23d5e9a86fb5718901825772", "commitAfterChange": "b82e4a0e1d547d361495e1d72928b04c339786b5", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tpublic void testCycle5() throws JavaModelException", "signatureAfterChange": " \t \tpublic void testCycle5() throws JavaModelException", "diff": ["-\t\tenv.setBuildOrder(new String[]{\"P1\", \"P2\"});//$NON-NLS-1$ //$NON-NLS-2$", "-\t\tfullBuild();", "-\t\t", "-\t\texpectingCompilingOrder(new String[]{\"p1.X\", \"p2.Y\", \"p1.X\", \"p2.Y\"});//$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ //$NON-NLS-4$ ", "-\t\texpectingOnlySpecificProblemsFor(p1,new Problem[]{", "-\t\t\tnew Problem(\"p1\", \"The import p22 cannot be resolved\", c1),//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tnew Problem(\"p1\", \"A cycle was detected in the project's classpath.\", p1)//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t});", "-\t\texpectingOnlySpecificProblemsFor(p2,new Problem[]{", "-\t\t\tnew Problem(\"p2\", \"The import p11 cannot be resolved\", c2),//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tnew Problem(\"p2\", \"A cycle was detected in the project's classpath.\", p2)//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t});", "-\t\t", "-\t\tenv.addClass(root1, \"p11\", \"XX\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\"package p11;\\n\"+ //$NON-NLS-1$", "-\t\t\t\"public class XX {\\n\"+ //$NON-NLS-1$", "-\t\t\t\"}\\n\" //$NON-NLS-1$", "-\t\t\t);", "-\t\tenv.addClass(root2, \"p22\", \"YY\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\"package p22;\\n\"+ //$NON-NLS-1$", "-\t\t\t\"public class YY {\\n\"+ //$NON-NLS-1$", "-\t\t\t\"}\\n\" //$NON-NLS-1$", "-\t\t\t);", "+\t\ttry {", "+\t\t\tenv.setBuildOrder(new String[]{\"P1\", \"P2\"});//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tfullBuild();", "-\t\tincrementalBuild();", "-\t\t", "-\t\texpectingCompilingOrder(new String[]{\"p11.XX\", \"p22.YY\", \"p2.Y\", \"p1.X\"});//$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ //$NON-NLS-4$", "-\t\texpectingOnlySpecificProblemsFor(p1,new Problem[]{", "-\t\t\tnew Problem(\"p1\", \"The import p22 is never used\", c1),//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tnew Problem(\"p1\", \"A cycle was detected in the project's classpath.\", p1)//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t});", "-\t\texpectingOnlySpecificProblemsFor(p2,new Problem[]{", "-\t\t\tnew Problem(\"p2\", \"The import p11 is never used\", c2),//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tnew Problem(\"p2\", \"A cycle was detected in the project's classpath.\", p2)//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t});", "-\t\t", "-\t\tJavaCore.setOptions(options);", "+\t\t\texpectingCompilingOrder(new String[]{\"p1.X\", \"p2.Y\", \"p1.X\", \"p2.Y\"});//$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ //$NON-NLS-4$ ", "+\t\t\texpectingOnlySpecificProblemsFor(p1,new Problem[]{", "+\t\t\t\tnew Problem(\"p1\", \"The import p22 cannot be resolved\", c1),//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p1\", \"A cycle was detected in the project's classpath.\", p1)//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t});", "+\t\t\texpectingOnlySpecificProblemsFor(p2,new Problem[]{", "+\t\t\t\tnew Problem(\"p2\", \"The import p11 cannot be resolved\", c2),//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p2\", \"A cycle was detected in the project's classpath.\", p2)//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t});", "+\t\t\t", "+\t\t\tenv.addClass(root1, \"p11\", \"XX\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\"package p11;\\n\"+ //$NON-NLS-1$", "+\t\t\t\t\"public class XX {\\n\"+ //$NON-NLS-1$", "+\t\t\t\t\"}\\n\" //$NON-NLS-1$", "+\t\t\t\t);", "+\t\t\tenv.addClass(root2, \"p22\", \"YY\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\"package p22;\\n\"+ //$NON-NLS-1$", "+\t\t\t\t\"public class YY {\\n\"+ //$NON-NLS-1$", "+\t\t\t\t\"}\\n\" //$NON-NLS-1$", "+\t\t\t\t);", "+\t\t\t\t", "+\t\t\tincrementalBuild();", "+\t\t\t", "+\t\t\texpectingCompilingOrder(new String[]{\"p11.XX\", \"p22.YY\", \"p2.Y\", \"p1.X\"});//$NON-NLS-1$ //$NON-NLS-2$//$NON-NLS-3$ //$NON-NLS-4$", "+\t\t\texpectingOnlySpecificProblemsFor(p1,new Problem[]{", "+\t\t\t\tnew Problem(\"p1\", \"The import p22 is never used\", c1),//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p1\", \"A cycle was detected in the project's classpath.\", p1)//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t});", "+\t\t\texpectingOnlySpecificProblemsFor(p2,new Problem[]{", "+\t\t\t\tnew Problem(\"p2\", \"The import p11 is never used\", c2),//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tnew Problem(\"p2\", \"A cycle was detected in the project's classpath.\", p2)//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t});", "+\t\t\t", "+\t\t\tJavaCore.setOptions(options);", "+\t\t} finally {", "+\t\t\tenv.setBuildOrder(null);", "+\t\t}"]}], "num": 2814}
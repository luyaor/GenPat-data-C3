{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3fb887a22f32a4937e9dd61a714e4a59", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02e436d954cf9a672474b2274c232241", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 183, "methodNumberAfterChange": 183, "signatureBeforeChange": " protected void consumeTypeImportOnDemandDeclaration()", "signatureAfterChange": " protected void consumeTypeImportOnDemandDeclaration()", "diff": ["-\tImportReference impt = (ImportReference) astStack[astPtr];", "+\tImportReference impt = (ImportReference) this.astStack[this.astPtr];", "-\timpt.declarationEnd = endStatementPosition;", "+\timpt.declarationEnd = this.endStatementPosition;", "-\tif (currentElement != null) {", "-\t\tlastCheckPoint = impt.declarationSourceEnd + 1;", "-\t\tcurrentElement = currentElement.add(impt, 0);", "-\t\trestartRecovery = true;", "-\t\tlastIgnoredToken = -1;", "+\tif (this.currentElement != null) {", "+\t\tthis.lastCheckPoint = impt.declarationSourceEnd + 1;", "+\t\tthis.currentElement = this.currentElement.add(impt, 0);", "+\t\tthis.restartRecovery = true;", "+\t\tthis.lastIgnoredToken = -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2018db98bea66400d4b494b006a96a2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public Parser(ProblemReporter problemReporter, boolean optimizeStringLiterals)", "signatureAfterChange": "  public Parser(ProblemReporter problemReporter, boolean optimizeStringLiterals)", "diff": ["-\tastLengthStack = new int[50];", "-\texpressionLengthStack = new int[30];", "-\tintStack = new int[50];", "-\tidentifierStack = new char[30][];", "-\tidentifierLengthStack = new int[30];", "-\tnestedMethod = new int[30];", "-\trealBlockStack = new int[30];", "-\tidentifierPositionStack = new long[30];", "-\tvariablesCounter = new int[30];", "+\tthis.astLengthStack = new int[50];", "+\tthis.expressionLengthStack = new int[30];", "+\tthis.intStack = new int[50];", "+\tthis.identifierStack = new char[30][];", "+\tthis.identifierLengthStack = new int[30];", "+\tthis.nestedMethod = new int[30];", "+\tthis.realBlockStack = new int[30];", "+\tthis.identifierPositionStack = new long[30];", "+\tthis.variablesCounter = new int[30];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a24b7af2ade8fde3ebb48933c542d24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 155, "methodNumberAfterChange": 155, "signatureBeforeChange": " \t protected void consumeSingleTypeImportDeclaration()", "signatureAfterChange": " \t protected void consumeSingleTypeImportDeclaration()", "diff": ["-\tImportReference impt = (ImportReference) astStack[astPtr];", "+\tImportReference impt = (ImportReference) this.astStack[this.astPtr];", "-\timpt.declarationEnd = endStatementPosition;", "+\timpt.declarationEnd = this.endStatementPosition;", "-\tif (currentElement != null) {", "-\t\tlastCheckPoint = impt.declarationSourceEnd + 1;", "-\t\tcurrentElement = currentElement.add(impt, 0);", "-\t\tlastIgnoredToken = -1;", "-\t\trestartRecovery = true; ", "+\tif (this.currentElement != null) {", "+\t\tthis.lastCheckPoint = impt.declarationSourceEnd + 1;", "+\t\tthis.currentElement = this.currentElement.add(impt, 0);", "+\t\tthis.lastIgnoredToken = -1;", "+\t\tthis.restartRecovery = true; "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9154c6c1cbfd179261dca77afe5abb91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "ac2c3539b72e65a4a4e0b168769da151e63c5ff1", "commitAfterChange": "014710437062a15282800b8efb747a8973068ba8", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic CompilationUnitDeclaration resolve( \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit compilationUnit, \t\t\tNodeSearcher nodeSearcher, \t\t\tboolean verifyMethods, \t\t\tboolean analyzeCode, \t\t\tboolean generateCode)", "signatureAfterChange": " \tpublic CompilationUnitDeclaration resolve( \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit compilationUnit, \t\t\tNodeSearcher nodeSearcher, \t\t\tboolean verifyMethods, \t\t\tboolean analyzeCode, \t\t\tboolean generateCode)", "diff": ["-\t\t\tparseThreshold = 0; // will request a diet parse", "+\t\t\tthis.parseThreshold = 0; // will request a diet parse", "-\t\t\tunit = unitsToProcess[0];", "+\t\t\tunit = this.unitsToProcess[0];", "-\t\t\t\t\t\t((AbstractMethodDeclaration)node).parseStatements(parser, unit);", "+\t\t\t\t\t\t((AbstractMethodDeclaration)node).parseStatements(this.parser, unit);", "-\t\t \t\t\t\t\t((org.eclipse.jdt.internal.compiler.ast.Initializer) node).parseStatements(parser, enclosingTypeDeclaration, unit);", "+\t\t \t\t\t\t\t((org.eclipse.jdt.internal.compiler.ast.Initializer) node).parseStatements(this.parser, enclosingTypeDeclaration, unit);", "-\t\t\t\t\t\t\t((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)node).parseMethod(parser, unit);", "+\t\t\t\t\t\t\t((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration)node).parseMethod(this.parser, unit);", "-\t\t\t\t\tunit.scope.verifyMethods(lookupEnvironment.methodVerifier());", "+\t\t\t\t\tunit.scope.verifyMethods(this.lookupEnvironment.methodVerifier());", "-\t\t\tif (unitsToProcess != null) unitsToProcess[0] = null; // release reference to processed unit declaration", "-\t\t\trequestor.acceptResult(unit.compilationResult.tagAsAccepted());", "+\t\t\tif (this.unitsToProcess != null) this.unitsToProcess[0] = null; // release reference to processed unit declaration", "+\t\t\tthis.requestor.acceptResult(unit.compilationResult.tagAsAccepted());"]}], "num": 42774}
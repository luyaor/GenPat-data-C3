{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c72f0762d75d2a8341e16ce56e4eb615", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2c30e238e9c89da3ba96f3b61ce2c0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/workspace/Converter/junit/awtui/TestRunner.java", "commitBeforeChange": "5f14954289dcfe3aa64cd723a9ea9807dea33e05", "commitAfterChange": "4b4449dde49cdcaed9ae00d1ac057ecfeb8d8c23", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void addFailure(Test test, AssertionFailedError t)", "signatureAfterChange": "  \tpublic void testFailed(int status, Test test, Throwable t)", "diff": ["-\tpublic void addFailure(Test test, AssertionFailedError t) {", "-\t\tfNumberOfFailures.setText(Integer.toString(fTestResult.failureCount()));", "-\t\tappendFailure(\"Failure\", test, t);", "+", "+\tpublic void testFailed(int status, Test test, Throwable t) {", "+\t\tswitch (status) {", "+\t\t\tcase TestRunListener.STATUS_ERROR:", "+\t\t\t\tfNumberOfErrors.setText(Integer.toString(fTestResult.errorCount()));", "+\t\t\t\tappendFailure(\"Error\", test, t);", "+\t\t\t\tbreak;", "+\t\t\tcase TestRunListener.STATUS_FAILURE:", "+\t\t\t\tfNumberOfFailures.setText(Integer.toString(fTestResult.failureCount()));", "+\t\t\t\tappendFailure(\"Failure\", test, t);", "+\t\t\t\tbreak;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd11882cba41f5f635d7ece4ce5af42d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceBuildTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate long[] parseFile(String fileName, int iterations) throws InvalidInputException, IOException", "signatureAfterChange": " \tprivate long[] parseFile(String fileName, int kind, int iterations) throws InvalidInputException, IOException", "diff": ["+\tprivate long[] parseFile(String fileName, int kind, int iterations) throws InvalidInputException, IOException {", "+\t\t// Test for parser", "+\t\tFile file = new File(fileName);", "+\t\tchar[] content = Util.getFileCharContent(file, null);", "+\t\tCompilerOptions options = new CompilerOptions();", "+\t\toptions.sourceLevel = ClassFileConstants.JDK1_4;", "+\t\toptions.targetJDK = ClassFileConstants.JDK1_4;", "+\t\tProblemReporter problemReporter = ", "+\t\t\t\tnew ProblemReporter(", "+\t\t\t\t\tDefaultErrorHandlingPolicies.exitAfterAllProblems(), ", "+\t\t\t\t\toptions, ", "+\t\t\t\t\tnew DefaultProblemFactory());", "+\t\t// Create parser", "+        Parser parser = null;", "+\t\tswitch (kind) {", "+\t\tcase 1: // SourceElementParser", "+\t\t\t\tparser = new SourceElementParser(new SourceElementRequestorAdapter(), problemReporter.problemFactory, options, true, true);", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tparser = new Parser(problemReporter, true);", "+\t\t\t\tbreak;", "+", "+\t\t// Warm up", "+\t\tfor (int i = 0; i < 2; i++) {", "+\t\t\tICompilationUnit unit = new CompilationUnit(content, file.getName(), null);", "+\t\t\tCompilationResult unitResult = new CompilationResult(unit, 0, 1, options.maxProblemsPerUnit);\t\t\t\t", "+\t\t\tCompilationUnitDeclaration unitDeclaration = parser.dietParse(unit, unitResult);", "+\t\t\tparser.getMethodBodies(unitDeclaration);", "+\t\t}", "+", "+\t\t// Clean memory", "+\t\trunGc();", "+", "+\t\t// Measures", "+\t\tlong parsedLines = 0;", "+\t\tlong parsedCharacters = 0;", "+\t\tlong start = 0;", "+\t\tif (DEBUG) {", "+\t\t\tstart = System.currentTimeMillis();", "+\t\t}", "+\t\tstartMeasuring();", "+\t\tfor (int i = 0; i < iterations; i++) {", "+\t\t\tICompilationUnit unit = new CompilationUnit(content, file.getName(), null);", "+\t\t\tCompilationResult unitResult = new CompilationResult(unit, 0, 1, options.maxProblemsPerUnit);\t\t\t\t", "+\t\t\tCompilationUnitDeclaration unitDeclaration = parser.dietParse(unit, unitResult);", "+\t\t\tparser.getMethodBodies(unitDeclaration);", "+\t\t\tparsedCharacters += content.length;", "+\t\t\tparsedLines += unitResult.lineSeparatorPositions.length;", "+\t\t}", "+\t\tstopMeasuring();", "+", "+\t\t// Warn if measure time is not enough while debugging", "+\t\tif (DEBUG) {", "+\t\t\tlong time = System.currentTimeMillis() - start;", "+\t\t\tif (time < TIME_THRESHOLD) {", "+\t            System.err.println(parsedLines + \" lines/\"+ parsedCharacters + \" characters parsed\");", "+\t\t\t} else {", "+\t            System.out.println(parsedLines + \" lines/\"+ parsedCharacters + \" characters parsed\");", "+\t\t\t}", "+\t\t}", "+", "+\t\t// Return stats", "+\t\treturn new long[] { parsedCharacters, parsedLines };", "-\t */", "-\tprivate long[] parseFile(String fileName, int iterations) throws InvalidInputException, IOException {", "-", "-\t\t// Test for parser", "-\t\tFile file = new File(fileName);", "-\t\tchar[] content = Util.getFileCharContent(file, null);", "-\t\tCompilerOptions options = new CompilerOptions();", "-\t\toptions.sourceLevel = ClassFileConstants.JDK1_4;", "-\t\toptions.targetJDK = ClassFileConstants.JDK1_4;", "-\t\tProblemReporter problemReporter = ", "-\t\t\t\tnew ProblemReporter(", "-\t\t\t\t\tDefaultErrorHandlingPolicies.exitAfterAllProblems(), ", "-\t\t\t\t\toptions, ", "-\t\t\t\t\tnew DefaultProblemFactory());", "-        Parser parser = new Parser(problemReporter, true);", "-", "-\t\t// Warm-up", "-\t\tfor (int i = 0; i < 2; i++) {", "-\t\t\tICompilationUnit unit = new CompilationUnit(content, file.getName(), null);", "-\t\t\tCompilationResult unitResult = new CompilationResult(unit, 0, 1, options.maxProblemsPerUnit);\t\t\t\t", "-\t\t\tCompilationUnitDeclaration unitDeclaration = parser.dietParse(unit, unitResult);", "-\t\t\tparser.getMethodBodies(unitDeclaration);", "-\t\t}", "-", "-\t\t// Measures", "-\t\tlong parsedLines = 0;", "-\t\tlong parsedCharacters = 0;", "-\t\tlong start = 0;", "-\t\tif (DEBUG) {", "-\t\t\tstart = System.currentTimeMillis();", "-\t\t}", "-\t\tstartMeasuring();", "-\t\tfor (int i = 0; i < iterations; i++) {", "-\t\t\tICompilationUnit unit = new CompilationUnit(content, file.getName(), null);", "-\t\t\tCompilationResult unitResult = new CompilationResult(unit, 0, 1, options.maxProblemsPerUnit);\t\t\t\t", "-\t\t\tCompilationUnitDeclaration unitDeclaration = parser.dietParse(unit, unitResult);", "-\t\t\tparser.getMethodBodies(unitDeclaration);", "-\t\t\tparsedCharacters += content.length;", "-\t\t\tparsedLines += unitResult.lineSeparatorPositions.length;", "-\t\t}", "-\t\tstopMeasuring();", "-", "-\t\t// Warn if measure time is not enough while debugging", "-\t\tif (DEBUG) {", "-\t\t\tlong time = System.currentTimeMillis() - start;", "-\t\t\tif (time < TIME_THRESHOLD) {", "-\t            System.err.print(parsedLines + \" lines/\"+ parsedCharacters + \" characters parsed\");", "-\t\t\t} else {", "-\t            System.out.print(parsedLines + \" lines/\"+ parsedCharacters + \" characters parsed\");", "-\t\t\t}", "-\t\t}", "-", "-\t\t// Return stats", "-\t\treturn new long[] { parsedCharacters, parsedLines };", "-\t}"]}], "num": 37414}
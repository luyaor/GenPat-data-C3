{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b013441260851bd54be31012be9f1769", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0135e28a7a366edb724ded4b88b8f665", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "1f936417a416d90917cba09bee390af7aeeb85e8", "commitAfterChange": "cf0fc1d100d6a0dfa353e3125744fa10a50c8d3b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tstatic long requiredNullTagBits(TypeBinding type)", "signatureAfterChange": " \tstatic long requiredNullTagBits(TypeBinding type)", "diff": ["-\t\t\t// assume we must require @NonNull, unless: (1) lower @Nullable bound, or (2) no nullness specified", "-\t\t\tTypeVariableBinding typeVariable = (TypeVariableBinding)type;", "-\t\t\tboolean haveNullBits = false;", "+\t\t\t// assume we must require @NonNull, unless lower @Nullable bound", "+\t\t\t// (annotation directly on the TV has already been checked above)", "-\t\t\t\t\t\treturn TagBits.AnnotationNullable; // (1) type cannot require @NonNull", "-\t\t\t\t\thaveNullBits = tagBits != 0;", "+\t\t\t\t\t\treturn TagBits.AnnotationNullable; // type cannot require @NonNull", "-\t\t\tif (typeVariable.firstBound != null)", "-\t\t\t\thaveNullBits |= (typeVariable.firstBound.tagBits & TagBits.AnnotationNullMASK) != 0;", "-\t\t\tif (haveNullBits)", "-\t\t\t\treturn TagBits.AnnotationNonNull; // could require @NonNull (unless (2) unspecified nullness)", "+\t\t\treturn TagBits.AnnotationNonNull; // instantiation could require @NonNull"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "305d7217ac45bc7c7f6d2760a15fb43d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "06338d59e18dd650cacadfb53051f533c530fabf", "commitAfterChange": "07de476492c87dc4eb8797084ffe99575b2b9c74", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t\t\t@Override \t\t\tpublic boolean visit(ReferenceBinding referenceBinding)", "signatureAfterChange": " \t\t@Override \t\tpublic boolean visit(TypeVariableBinding typeVariable)", "diff": ["+\t\t}", "+\t\t@Override", "+\t\tpublic boolean visit(TypeVariableBinding typeVariable) {", "+\t\t\tif (!visit((ReferenceBinding)typeVariable))", "+\t\t\t\treturn false;", "+\t\t\tlong allNullBits = typeVariable.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\tif (typeVariable.firstBound != null)", "+\t\t\t\tallNullBits = typeVariable.firstBound.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\tfor (TypeBinding otherBound : typeVariable.otherUpperBounds())", "+\t\t\t\tallNullBits |= otherBound.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\tif (allNullBits == TagBits.AnnotationNullMASK) {", "+\t\t\t\tthis.typeWithContradiction = typeVariable;", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\treturn true;", "+\t\t}", "-\t\t\tReferenceBinding typeWithContradiction;", "-\t\t\t@Override", "-\t\t\tpublic boolean visit(ReferenceBinding referenceBinding) {", "-\t\t\t\tif ((referenceBinding.tagBits & TagBits.AnnotationNullMASK) == TagBits.AnnotationNullMASK) {", "-\t\t\t\t\tthis.typeWithContradiction = referenceBinding;", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\treturn true;", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f7a6e28f702a9d350a9d92a0e8eec52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBound.java", "commitBeforeChange": "ff2fe8665a4cc197831509bf8ec85eecac35f7cf", "commitAfterChange": "b035f7a4c467249c63cc869fd5f75e4bad8cf303", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tTypeBound(InferenceVariable inferenceVariable, TypeBinding typeBinding, int relation, boolean isSoft)", "signatureAfterChange": " \t \tTypeBound(InferenceVariable inferenceVariable, TypeBinding typeBinding, int relation, boolean isSoft)", "diff": ["+\t\tif (((inferenceVariable.tagBits | this.right.tagBits) & TagBits.AnnotationNullMASK) != 0) {", "+\t\t\tif ((inferenceVariable.tagBits & TagBits.AnnotationNullMASK) == (this.right.tagBits & TagBits.AnnotationNullMASK)) {", "+\t\t\t\t// strip off identical nullness on both sides:", "+\t\t\t\tthis.left = (InferenceVariable) inferenceVariable.withoutToplevelNullAnnotation();", "+\t\t\t\tthis.right = this.right.withoutToplevelNullAnnotation();", "+\t\t\t} else {", "+\t\t\t\tlong mask = 0;", "+\t\t\t\t// extract hint, e.g.: T#0 <: @NonNull Right  =>  T#0 hinted as @NonNull", "+\t\t\t\tswitch (relation) {", "+\t\t\t\t\tcase SAME: \t\tmask = TagBits.AnnotationNullMASK; break;", "+\t\t\t\t\tcase SUBTYPE: \tmask = TagBits.AnnotationNonNull; break;  // sub of @Nullable is irrelevant", "+\t\t\t\t\tcase SUPERTYPE: mask = TagBits.AnnotationNullable; break; // super of @NonNull is irrelevant", "+\t\t\t\t}", "+\t\t\t\tinferenceVariable.prototype().nullHints |= this.right.tagBits & mask;", "+\t\t\t}", "+\t\t}"]}], "num": 41057}
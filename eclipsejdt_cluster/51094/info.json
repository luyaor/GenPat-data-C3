{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c28cef18dc3d1340cbccc94207ec28f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "155cd2e76155bbb4c0b007c2d6b1c660", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java", "commitBeforeChange": "5f1e634c9572918b0d35dc54c9c744d979f875dc", "commitAfterChange": "f16285cd9a78748d8021cd667f1fa680e2a6b70b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t@Override \tpublic WildcardType getWildcardType(TypeMirror extendsBound, TypeMirror superBound)", "signatureAfterChange": " \t@Override \tpublic WildcardType getWildcardType(TypeMirror extendsBound, TypeMirror superBound)", "diff": ["-\t\t// TODO Auto-generated method stub", "-\t\treturn null;", "+\t\tif (extendsBound != null && superBound != null) {", "+\t\t\tthrow new IllegalArgumentException(\"Extends and super bounds cannot be set at the same time\"); //$NON-NLS-1$", "+\t\t}", "+\t\tif (extendsBound != null) {", "+\t\t\tTypeMirrorImpl extendsBoundMirrorType = (TypeMirrorImpl) extendsBound;", "+\t\t\tTypeBinding typeBinding = (TypeBinding) extendsBoundMirrorType._binding;", "+\t\t\treturn new WildcardTypeImpl(this._env.getLookupEnvironment().createWildcard(", "+\t\t\t\t\tnull,", "+\t\t\t\t\t0,", "+\t\t\t\t\ttypeBinding,", "+\t\t\t\t\tnull,", "+\t\t\t\t\tWildcard.EXTENDS));", "+\t\t}", "+\t\tif (superBound != null) {", "+\t\t\tTypeMirrorImpl superBoundMirrorType = (TypeMirrorImpl) superBound;", "+\t\t\tTypeBinding typeBinding = (TypeBinding) superBoundMirrorType._binding;", "+\t\t\treturn new WildcardTypeImpl(this._env.getLookupEnvironment().createWildcard(", "+\t\t\t\t\tnull,", "+\t\t\t\t\t0,", "+\t\t\t\t\ttypeBinding,", "+\t\t\t\t\tnull,", "+\t\t\t\t\tWildcard.SUPER));", "+\t\t}", "+\t\treturn new WildcardTypeImpl(this._env.getLookupEnvironment().createWildcard(", "+\t\t\t\tnull,", "+\t\t\t\t0,", "+\t\t\t\tnull,", "+\t\t\t\tnull,", "+\t\t\t\tWildcard.UNBOUND));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b87efb1016ccc944b52f44691645e621", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "2385c0aeda6d8b742ca24edae81655117601babd", "commitAfterChange": "bfe1e5f410410e285c8a77b5130cabdbc82cde90", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) methodBinding.declaringClass;", "+\t\t\t\t\t\t\tMethodDeclaration methodDecl = (MethodDeclaration) sourceType.scope.referenceContext.declarationOf(methodBinding);", "+\t\t\t\t\t\t\tif (isTypeUseCompatible(methodDecl.returnType, scope)) {", "+\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t\tFieldBinding sourceField = (FieldBinding) this.recipient;", "+\t\t\t\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) sourceField.declaringClass;", "+\t\t\t\t\t\t\tFieldDeclaration fieldDeclaration = sourceType.scope.referenceContext.declarationOf(sourceField);", "+\t\t\t\t\t\t\tif (isTypeUseCompatible(fieldDeclaration.type, scope)) {", "+\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tif ((((LocalVariableBinding)this.recipient).tagBits & TagBits.IsArgument) != 0) {", "+\t\t\t\t\t\tLocalVariableBinding localVariableBinding = (LocalVariableBinding)this.recipient;", "+\t\t\t\t\t\tif ((localVariableBinding.tagBits & TagBits.IsArgument) != 0) {", "-\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t\t\tif (isTypeUseCompatible(localVariableBinding.declaration.type, scope)) {", "+\t\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t\tif (isTypeUseCompatible(localVariableBinding.declaration.type, scope)) {", "+\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t\t}"]}], "num": 51094}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c46486629909a82909b658a02784fa33", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90f30546189fa4cf1439a083b6faa09a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/DependencyTests.java", "commitBeforeChange": "dade23c0ca1cb5b996dfae1d1cfc189d06d41a6f", "commitAfterChange": "b9f6281b56af6781d8bb8cc727077eb3dccaebba", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void testTypeVisibility2() throws JavaModelException", "signatureAfterChange": " \tpublic void testTypeVisibility2() throws JavaModelException", "diff": ["-\t\texpectingSpecificProblemFor(aPath, new Problem(\"A\", \"The type Foo is not visible\", aPath)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingSpecificProblemFor(aPath, new Problem(\"A\", \"The type Foos is not visible\", aPath)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(aPath, new Problem(\"A\", \"The type Foo is not visible\", aPath, 43, 68, CategorizedProblem.CAT_TYPE)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(aPath, new Problem(\"A\", \"The type Foos is not visible\", aPath, 93, 119, CategorizedProblem.CAT_TYPE)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingSpecificProblemFor(aPath, new Problem(\"A\", \"The type Foos is not visible\", aPath)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(aPath, new Problem(\"A\", \"The type Foos is not visible\", aPath, 93, 119, CategorizedProblem.CAT_TYPE)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingSpecificProblemFor(aPath, new Problem(\"A\", \"The type Foo is not visible\", aPath)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingSpecificProblemFor(aPath, new Problem(\"A\", \"The type Foos is not visible\", aPath)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(aPath, new Problem(\"A\", \"The type Foo is not visible\", aPath, 43, 68, CategorizedProblem.CAT_TYPE)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(aPath, new Problem(\"A\", \"The type Foos is not visible\", aPath, 93, 119, CategorizedProblem.CAT_TYPE)); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0d3b1d59fe64beaed35d3b74ec2c088", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/DependencyTests.java", "commitBeforeChange": "dade23c0ca1cb5b996dfae1d1cfc189d06d41a6f", "commitAfterChange": "b9f6281b56af6781d8bb8cc727077eb3dccaebba", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void testTypeVisibility() throws JavaModelException", "signatureAfterChange": " \tpublic void testTypeVisibility() throws JavaModelException", "diff": ["-\t\texpectingSpecificProblemFor(bPath, new Problem(\"B\", \"The type p1.A is not visible\", bPath)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingSpecificProblemFor(cPath, new Problem(\"C\", \"The hierarchy of the type C is inconsistent\", cPath)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(bPath, new Problem(\"B\", \"The type p1.A is not visible\", bPath, 35, 39, CategorizedProblem.CAT_TYPE)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(cPath, new Problem(\"C\", \"The hierarchy of the type C is inconsistent\", cPath, 25, 26, CategorizedProblem.CAT_TYPE)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingSpecificProblemFor(bPath, new Problem(\"B\", \"The type p1.A is not visible\", bPath)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingSpecificProblemFor(cPath, new Problem(\"C\", \"The hierarchy of the type C is inconsistent\", cPath)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(bPath, new Problem(\"B\", \"The type p1.A is not visible\", bPath, 35, 39, CategorizedProblem.CAT_TYPE)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(cPath, new Problem(\"C\", \"The hierarchy of the type C is inconsistent\", cPath, 25, 26, CategorizedProblem.CAT_TYPE)); //$NON-NLS-1$ //$NON-NLS-2$"]}], "num": 3615}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d3f00fbcd3a3cbec3db12eb85ab4d5b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fd99cfed5dc193cc103a9db09add8a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "20be6646800f3125c106d8286602e4c341b0c9f2", "commitAfterChange": "9edf0a990e69fc752ead21c476a00fb874aa8f40", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public void resolve(MethodScope initializationScope)", "signatureAfterChange": "\r public void resolve(MethodScope initializationScope)", "diff": ["-\t\t// cannot define static non-constant field inside nested class\r", "-\t\tif (binding.isStatic() && binding.constant == NotAConstant)\r", "-\t\t\tif (binding.declaringClass.isNestedType() && binding.declaringClass.isClass() && !binding.declaringClass.isStatic())\r", "-\t\t\t\tinitializationScope.problemReporter().unexpectedStaticModifierForField((SourceTypeBinding)binding.declaringClass, this);\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0635d32b611c590a971e0272f71c918", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " boolean checkInheritedReturnTypes(MethodBinding method, MethodBinding otherMethod)", "signatureAfterChange": " boolean checkInheritedReturnTypes(MethodBinding method, MethodBinding otherMethod)", "diff": ["-\tif (!this.type.isInterface())", "-\t\tif (method.declaringClass.isClass() || !this.type.implementsInterface(method.declaringClass, false))", "-\t\t\tif (otherMethod.declaringClass.isClass() || !this.type.implementsInterface(otherMethod.declaringClass, false))", "-\t\t\t\treturn true; // do not complain since the superclass already got blamed", "-", "+\t/* We used to have some checks here to see if we would have already blamed the super type and if so avoid blaming", "+\t   the current type again. I have gotten rid of them as they in fact short circuit error reporting in cases where", "+\t   they should not. This means that occasionally we would report the error twice - the diagnostics is valid however,", "+\t   albeit arguably redundant. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=334313. For an example of a test", "+\t   where we do this extra reporting see org.eclipse.jdt.core.tests.compiler.regression.MethodVerifyTest.test159()", "+\t */"]}], "num": 58932}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "816a5e51ae16b4569470a7538357a8ef", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "330b47afe811108ab42e8ac27cf66960", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorPattern.java", "commitBeforeChange": "562f566c1c2b8bfedaad7117a5b53ae2f781bec9", "commitAfterChange": "b11449e69404728ca4b19e3cce8d08756ffe4f52", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public ConstructorPattern( \tboolean findDeclarations, \tboolean findReferences, \tchar[] declaringSimpleName,\t \tchar[] declaringQualification, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tIMethod method, \tboolean varargs, \tint matchRule)", "signatureAfterChange": " public ConstructorPattern( \tboolean findDeclarations, \tboolean findReferences, \tchar[] declaringSimpleName,\t \tchar[] declaringQualification, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tIMethod method, \tboolean varargs, \tint matchRule)", "diff": ["-\tString uniqueKey = null;", "+\tString genericDeclaringTypeSignature = null;", "+//\tString genericSignature = null;", "-\t\tuniqueKey = ((ParameterizedSourceMethod)method).uniqueKey;", "+\t\tParameterizedSourceMethod parameterizedMethod = (ParameterizedSourceMethod) method;", "+\t\tgenericDeclaringTypeSignature = parameterizedMethod.genericDeclaringTypeSignature;", "+//\t\tgenericSignature = parameterizedMethod.genericSignature;", "-\t\tuniqueKey = ((ParameterizedBinaryMethod)method).uniqueKey;", "+\t\tParameterizedBinaryMethod parameterizedMethod = (ParameterizedBinaryMethod) method;", "+\t\tgenericDeclaringTypeSignature = parameterizedMethod.genericDeclaringTypeSignature;", "+//\t\tgenericSignature = parameterizedMethod.genericSignature;", "-\tif (uniqueKey != null) {", "-\t\tString methodReceiverType = Util.extractMethodReceiverType(uniqueKey);", "-\t\tif (methodReceiverType != null) {", "-\t\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(methodReceiverType);", "-\t\t\tsetTypeArguments(Util.getAllTypeArguments(this.typeSignatures));", "-\t\t} else {", "-\t\t\tstoreTypeSignaturesAndArguments(method.getDeclaringType());", "-\t\t}", "+\tif (genericDeclaringTypeSignature != null) {", "+\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(genericDeclaringTypeSignature);", "+\t\tsetTypeArguments(Util.getAllTypeArguments(this.typeSignatures));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6263e7ba979f969232af71712a8f036", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodPattern.java", "commitBeforeChange": "562f566c1c2b8bfedaad7117a5b53ae2f781bec9", "commitAfterChange": "b11449e69404728ca4b19e3cce8d08756ffe4f52", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public MethodPattern( \tboolean findDeclarations, \tboolean findReferences, \tchar[] selector,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] returnQualification,  \tchar[] returnSimpleName, \tString returnSignature, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tboolean varargs, \tIMethod method, \tint matchRule)", "signatureAfterChange": " public MethodPattern( \tboolean findDeclarations, \tboolean findReferences, \tchar[] selector,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] returnQualification,  \tchar[] returnSimpleName, \tString returnSignature, \tchar[][] parameterQualifications,  \tchar[][] parameterSimpleNames, \tString[] parameterSignatures, \tboolean varargs, \tIMethod method, \tint matchRule)", "diff": ["-\tString uniqueKey = null;", "+\tString genericDeclaringTypeSignature = null;", "+//\tString genericSignature = null;", "-\t\tuniqueKey = ((ParameterizedSourceMethod)method).uniqueKey;", "+\t\tParameterizedSourceMethod parameterizedMethod = (ParameterizedSourceMethod) method;", "+\t\tgenericDeclaringTypeSignature = parameterizedMethod.genericDeclaringTypeSignature;", "+//\t\tgenericSignature = parameterizedMethod.genericSignature;", "-\t\tuniqueKey = ((ParameterizedBinaryMethod)method).uniqueKey;", "+\t\tParameterizedBinaryMethod parameterizedMethod = (ParameterizedBinaryMethod) method;", "+\t\tgenericDeclaringTypeSignature = parameterizedMethod.genericDeclaringTypeSignature;", "+//\t\tgenericSignature = parameterizedMethod.genericSignature;", "-\tif (uniqueKey != null) {", "-\t\tString methodReceiverType = Util.extractMethodReceiverType(uniqueKey);", "-\t\tif (methodReceiverType != null) {", "-\t\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(methodReceiverType);", "-\t\t\tsetTypeArguments(Util.getAllTypeArguments(this.typeSignatures));", "-\t\t} else {", "-\t\t\tstoreTypeSignaturesAndArguments(declaringType);", "-\t\t}", "+\tif (genericDeclaringTypeSignature != null) {", "+\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(genericDeclaringTypeSignature);", "+\t\tsetTypeArguments(Util.getAllTypeArguments(this.typeSignatures));"]}], "num": 36681}
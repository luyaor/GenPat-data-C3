{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8501e9cd3ea61dc0915740c75fed41ea", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e37769165519d5c01ad608f3a70ddaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public TypeBinding convertUnresolvedBinaryToRawType(TypeBinding type)", "signatureAfterChange": " public TypeBinding convertUnresolvedBinaryToRawType(TypeBinding type)", "diff": ["-\t\tif (convertedEnclosing != originalEnclosing) {", "+\t\tif (TypeBinding.notEquals(convertedEnclosing, originalEnclosing)) {", "-\t\t} else if (originalEnclosing != convertedEnclosing) {", "+\t\t} else if (TypeBinding.notEquals(originalEnclosing, convertedEnclosing)) {", "-\tif (originalType != convertedType) {", "+\tif (TypeBinding.notEquals(originalType, convertedType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55ff57f20ebfe796ac660ae6cfd1c5b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public TypeBinding convertToRawType(TypeBinding type, boolean forceRawEnclosingType)", "signatureAfterChange": " public TypeBinding convertToRawType(TypeBinding type, boolean forceRawEnclosingType)", "diff": ["-\t\t\tneedToConvert = originalEnclosing != convertedEnclosing; // only convert generic or parameterized types", "+\t\t\tneedToConvert = TypeBinding.notEquals(originalEnclosing, convertedEnclosing); // only convert generic or parameterized types", "-\t\t} else if (originalEnclosing != convertedEnclosing) {", "+\t\t} else if (TypeBinding.notEquals(originalEnclosing, convertedEnclosing)) {", "-\tif (originalType != convertedType) {", "+\tif (TypeBinding.notEquals(originalType, convertedType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e6505014e285d0e0fd54a8383b2f760", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": "\t \tpublic int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments, boolean tiebreakingVarargsMethods)", "signatureAfterChange": "\t \tpublic int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments, boolean tiebreakingVarargsMethods)", "diff": ["-\t\t\t\tif (arg != param && !arg.isCompatibleWith(param.erasure(), this))", "+\t\t\t\tif (TypeBinding.notEquals(arg, param) && !arg.isCompatibleWith(param.erasure(), this))", "-\t\t\t\tif (param != arg) {", "+\t\t\t\tif (TypeBinding.notEquals(param, arg)) {", "-\t\t\t\t\t\tif (param != arg && parameterCompatibilityLevel(arg, param, env, tiebreakingVarargsMethods) == NOT_COMPATIBLE)", "+\t\t\t\t\t\tif (TypeBinding.notEquals(param, arg) && parameterCompatibilityLevel(arg, param, env, tiebreakingVarargsMethods) == NOT_COMPATIBLE)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fb41608bc84bba1a820d30c932d0f05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate ParameterizedGenericMethodBinding inferFromExpectedType(Scope scope, InferenceContext inferenceContext)", "signatureAfterChange": " \tprivate ParameterizedGenericMethodBinding inferFromExpectedType(Scope scope, InferenceContext inferenceContext)", "diff": ["-\t\t\tboolean argAlreadyInferred = argument != originalVariable;", "-\t\t\tif (originalVariable.firstBound == originalVariable.superclass) {", "+\t\t\tboolean argAlreadyInferred = TypeBinding.notEquals(argument, originalVariable);", "+\t\t\tif (TypeBinding.equalsEquals(originalVariable.firstBound, originalVariable.superclass)) {", "-\t\tthis.inferredReturnType = inferenceContext.hasExplicitExpectedType && this.returnType != oldReturnType;", "+\t\tthis.inferredReturnType = inferenceContext.hasExplicitExpectedType && TypeBinding.notEquals(this.returnType, oldReturnType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae5122fa717a77f0150d8d92f98575f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate void resolveThrowsTags(MethodScope methScope, boolean reportMissing)", "signatureAfterChange": " \tprivate void resolveThrowsTags(MethodScope methScope, boolean reportMissing)", "diff": ["-\t\t\t\t\t\twhile (j<thrownExceptionLength && exceptionBinding != md.thrownExceptions[j].resolvedType) j++;", "+\t\t\t\t\t\twhile (j<thrownExceptionLength && TypeBinding.notEquals(exceptionBinding, md.thrownExceptions[j].resolvedType)) j++;", "-\t\t\t\t\t\tif (exceptionBinding == typeBinding) {", "+\t\t\t\t\t\tif (TypeBinding.equalsEquals(exceptionBinding, typeBinding)) {", "-\t\t\t\t\t\twhile (k<thrownExceptionLength && exceptionBinding != md.thrownExceptions[k].resolvedType) k++;", "+\t\t\t\t\t\twhile (k<thrownExceptionLength && TypeBinding.notEquals(exceptionBinding, md.thrownExceptions[k].resolvedType)) k++;"]}], "num": 28306}
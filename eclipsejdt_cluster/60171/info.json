{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e1615c187b2cd74b7b14161daf19b25", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6979aa780eae907f6bf14784ef2a32ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "059f363b90720be2cfec29b82372fbde98d39325", "commitAfterChange": "609730836b397ffdc0b5952d3e247524104747b7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tpublic static void checkProjectPropertyFileUpdate(\r \t\tIResourceDelta delta,\r \t\tIJavaElement parent)", "signatureAfterChange": "\r \tpublic static void checkProjectPropertyFileUpdate(\r \t\tIResourceDelta delta,\r \t\tIJavaElement parent)", "diff": ["-\t\t\t\t\t\t\t\tIPath oldOutputLocation = null;\r", "-\t\t\t\t\t\t\t\t\toldOutputLocation = project.getOutputLocation();\r", "-\t\t\t\t\t\t\t\t\tif (outputLocation != null) {\r", "-\t\t\t\t\t\t\t\t\t\tproject.setOutputLocation0(outputLocation);\r", "+\t\t\t\t\t\t\t\t\tif (outputLocation == null) {\r", "+\t\t\t\t\t\t\t\t\t\toutputLocation = SetClasspathOperation.ReuseOutputLocation;\r", "-\t\t\t\t\t\t\t\t\t\tproject.setRawClasspath(fileEntries, null, true, false, project.getExpandedClasspath(true));\r", "-\t\t\t\t\t\t\t\t\t} catch (JavaModelException e) { // undo output location change\r", "-\t\t\t\t\t\t\t\t\t\tproject.setOutputLocation0(oldOutputLocation);\r", "+\t\t\t\t\t\t\t\t\t\tproject.setRawClasspath(fileEntries, outputLocation, null, true, false, project.getExpandedClasspath(true));\r", "+\t\t\t\t\t\t\t\t\t} catch (JavaModelException e) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93d28358c2165f7adbc7095b47a68f77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java", "commitBeforeChange": "70293ebfba1aa3d3dce9544e23e757d77487db91", "commitAfterChange": "2e4e63b9ed8aad7925bed1f9109d7e2d1a341f45", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate void resolveAnnotations( \t\t\tBlockScope scope, \t\t\tAnnotation[] annotations, \t\t\tBinding currentBinding)", "signatureAfterChange": "  \tprivate void resolveAnnotations( \t\t\tBlockScope scope, \t\t\tAnnotation[] annotations, \t\t\tBinding currentBinding)", "diff": ["-\t\tboolean resolved = false;", "+\t\tASTNode.resolveAnnotations(scope, annotations, currentBinding, true);", "+\t\tElement element = null;", "+\t\t", "-\t\t\tif (binding == null && !resolved) {", "-\t\t\t\tASTNode.resolveAnnotations(scope, annotations, currentBinding, true);", "-\t\t\t\tbinding = annotation.getCompilerAnnotation();", "-\t\t\t\tresolved = true;", "-\t\t\t}", "-\t\t\t\tTypeElement anno = (TypeElement)_factory.newElement(binding.getAnnotationType()); ", "-\t\t\t\tElement element = _factory.newElement(currentBinding);", "+\t\t\t\tTypeElement anno = (TypeElement)_factory.newElement(binding.getAnnotationType());", "+\t\t\t\tif (element == null) {", "+\t\t\t\t\telement = _factory.newElement(currentBinding);", "+\t\t\t\t}"]}], "num": 60171}
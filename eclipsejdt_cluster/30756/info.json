{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd40e6c642599945d3708b3201961597", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "077c845165f5eca9fb9a4c1c584cd5cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "6100c16f42a61b4785fb3431eabdff7008e0822d", "commitAfterChange": "ae1f54f274fcbc3fe4d90b39f8d538bfd84fcc06", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " boolean areReturnTypesEqual(MethodBinding one, MethodBinding substituteTwo)", "signatureAfterChange": " boolean areReturnTypesEqual(MethodBinding one, MethodBinding substituteTwo)", "diff": ["-\tif (one.returnType == substituteTwo.returnType) return true;", "-", "-\t// short is compatible with int, but as far as covariance is concerned, its not", "-\tif (one.returnType.isBaseType()) return false;", "-", "-\tif (!one.declaringClass.isInterface()) {", "-\t\tif (one.declaringClass.id == TypeIds.T_JavaLangObject)", "-\t\t\treturn substituteTwo.returnType.isCompatibleWith(one.returnType); // interface methods inherit from Object", "-\t\treturn one.returnType.isCompatibleWith(substituteTwo.returnType);", "-\t}", "-", "-\t// check for methods from Object, every interface inherits from Object", "-\tif (substituteTwo.declaringClass.id == TypeIds.T_JavaLangObject)", "-\t\treturn one.returnType.isCompatibleWith(substituteTwo.returnType);", "-", "-\t// both are interfaces, see if they're related", "-\tif (one.declaringClass.implementsInterface(substituteTwo.declaringClass, true))", "-\t\treturn one.returnType.isCompatibleWith(substituteTwo.returnType);", "-\tif (substituteTwo.declaringClass.implementsInterface(one.declaringClass, true))", "-\t\treturn substituteTwo.returnType.isCompatibleWith(one.returnType);", "-", "-\t// unrelated interfaces... one must be a subtype of the other", "-\treturn one.returnType.isCompatibleWith(substituteTwo.returnType)", "-\t\t|| substituteTwo.returnType.isCompatibleWith(one.returnType);", "+\treturn areReturnTypesCompatible(one, substituteTwo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9cae945d3d7a87e953bff661118d071", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "35bd4e1ac4b1e11c036461a7309d887d1527f75a", "commitAfterChange": "c62a418f35a40981606d85e97ecee9f9596fa8d0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " boolean areReturnTypesCompatible(MethodBinding one, MethodBinding substituteTwo)", "signatureAfterChange": " boolean areReturnTypesCompatible0(MethodBinding one, MethodBinding two)", "diff": ["-boolean areReturnTypesCompatible(MethodBinding one, MethodBinding substituteTwo) {", "-\tif (one.returnType == substituteTwo.returnType) return true;", "+}", "+boolean areReturnTypesCompatible0(MethodBinding one, MethodBinding two) {", "-\t\t\treturn substituteTwo.returnType.isCompatibleWith(one.returnType); // interface methods inherit from Object", "-\t\treturn one.returnType.isCompatibleWith(substituteTwo.returnType);", "+\t\t\treturn two.returnType.isCompatibleWith(one.returnType); // interface methods inherit from Object", "+\t\treturn one.returnType.isCompatibleWith(two.returnType);", "-\tif (substituteTwo.declaringClass.id == TypeIds.T_JavaLangObject)", "-\t\treturn one.returnType.isCompatibleWith(substituteTwo.returnType);", "+\tif (two.declaringClass.id == TypeIds.T_JavaLangObject)", "+\t\treturn one.returnType.isCompatibleWith(two.returnType);", "-\tif (one.declaringClass.implementsInterface(substituteTwo.declaringClass, true))", "-\t\treturn one.returnType.isCompatibleWith(substituteTwo.returnType);", "-\tif (substituteTwo.declaringClass.implementsInterface(one.declaringClass, true))", "-\t\treturn substituteTwo.returnType.isCompatibleWith(one.returnType);", "+\tif (one.declaringClass.implementsInterface(two.declaringClass, true))", "+\t\treturn one.returnType.isCompatibleWith(two.returnType);", "+\tif (two.declaringClass.implementsInterface(one.declaringClass, true))", "+\t\treturn two.returnType.isCompatibleWith(one.returnType);", "-\treturn one.returnType.isCompatibleWith(substituteTwo.returnType)", "-\t\t|| substituteTwo.returnType.isCompatibleWith(one.returnType);", "-}", "+\treturn one.returnType.isCompatibleWith(two.returnType)", "+\t\t|| two.returnType.isCompatibleWith(one.returnType);"]}], "num": 30756}
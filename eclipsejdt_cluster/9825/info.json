{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60c4999b9af11dc2cc33808bb93ff9f6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f85138dd0a8e970f74b28270e6dd17ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "03f4a4782f5839bc6b71dbdaa61bddb7d624d757", "commitAfterChange": "d9449e8887bdabd52ba7a1ff8609baf4e6dc9497", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": " \t \tprivate BlockScope lookupScope(ASTNode node)", "signatureAfterChange": " \t \tprivate BlockScope lookupScope(ASTNode node)", "diff": ["-\t\t\twhile(!(currentNode instanceof TypeDeclaration)) {", "+\t\t\twhile(!(currentNode instanceof AbstractTypeDeclaration)) {", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDecl = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) this.ast.getBindingResolver().getCorrespondingNode(currentNode);", "-\t\t\tif ((initializer.getModifiers() & Modifier.STATIC) != 0) {", "-\t\t\t\treturn typeDecl.staticInitializerScope;", "-\t\t\t} else {", "-\t\t\t\treturn typeDecl.initializerScope;", "+\t\t\tif (currentNode instanceof TypeDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDecl = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) this.ast.getBindingResolver().getCorrespondingNode(currentNode);", "+\t\t\t\tif ((initializer.getModifiers() & Modifier.STATIC) != 0) {", "+\t\t\t\t\treturn typeDecl.staticInitializerScope;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn typeDecl.initializerScope;", "+\t\t\t\t}", "+\t\t\t} else if (currentNode instanceof EnumDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.EnumDeclaration enumDecl = (org.eclipse.jdt.internal.compiler.ast.EnumDeclaration) this.ast.getBindingResolver().getCorrespondingNode(currentNode);", "+\t\t\t\tif ((initializer.getModifiers() & Modifier.STATIC) != 0) {", "+\t\t\t\t\treturn enumDecl.staticInitializerScope;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn enumDecl.initializerScope;", "+\t\t\t\t}", "+\t\t\t} else if (currentNode instanceof AnnotationTypeDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.AnnotationTypeDeclaration annotationTypeDecl = (org.eclipse.jdt.internal.compiler.ast.AnnotationTypeDeclaration) this.ast.getBindingResolver().getCorrespondingNode(currentNode);", "+\t\t\t\tif ((initializer.getModifiers() & Modifier.STATIC) != 0) {", "+\t\t\t\t\treturn annotationTypeDecl.staticInitializerScope;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn annotationTypeDecl.initializerScope;", "+\t\t\t\t}", "-\t\t\twhile(!(currentNode instanceof TypeDeclaration)) {", "+\t\t\twhile(!(currentNode instanceof AbstractTypeDeclaration)) {", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDecl = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) this.ast.getBindingResolver().getCorrespondingNode(currentNode);", "-\t\t\tif ((fieldDeclaration.getModifiers() & Modifier.STATIC) != 0) {", "-\t\t\t\treturn typeDecl.staticInitializerScope;", "-\t\t\t} else {", "-\t\t\t\treturn typeDecl.initializerScope;", "+\t\t\tif (currentNode instanceof TypeDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDecl = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) this.ast.getBindingResolver().getCorrespondingNode(currentNode);", "+\t\t\t\tif ((fieldDeclaration.getModifiers() & Modifier.STATIC) != 0) {", "+\t\t\t\t\treturn typeDecl.staticInitializerScope;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn typeDecl.initializerScope;", "+\t\t\t\t}", "+\t\t\t} else if (currentNode instanceof EnumDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.EnumDeclaration enumDecl = (org.eclipse.jdt.internal.compiler.ast.EnumDeclaration) this.ast.getBindingResolver().getCorrespondingNode(currentNode);", "+\t\t\t\tif ((fieldDeclaration.getModifiers() & Modifier.STATIC) != 0) {", "+\t\t\t\t\treturn enumDecl.staticInitializerScope;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn enumDecl.initializerScope;", "+\t\t\t\t}", "+\t\t\t} else if (currentNode instanceof AnnotationTypeDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.AnnotationTypeDeclaration annotationTypeDecl = (org.eclipse.jdt.internal.compiler.ast.AnnotationTypeDeclaration) this.ast.getBindingResolver().getCorrespondingNode(currentNode);", "+\t\t\t\tif ((fieldDeclaration.getModifiers() & Modifier.STATIC) != 0) {", "+\t\t\t\t\treturn annotationTypeDecl.staticInitializerScope;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn annotationTypeDecl.initializerScope;", "+\t\t\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd8c0f32fa30c55842f7fcbc0997d2b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "b25ed407ef1d09375524d9c9e824c1c1084b119b", "commitAfterChange": "0bd9f6472768db6e5f0062ffcfd17bd3adede039", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic TypeDeclaration convert(org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes)", "signatureAfterChange": " \tpublic TypeDeclaration convert(org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes)", "diff": ["-\t\t\tif (node instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {", "-\t\t\t\tif (node instanceof org.eclipse.jdt.internal.compiler.ast.Initializer) {", "-\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Initializer oldInitializer = (org.eclipse.jdt.internal.compiler.ast.Initializer) node;", "-\t\t\t\t\tInitializer initializer = this.ast.newInitializer();", "-\t\t\t\t\tinitializer.setBody(convert(oldInitializer.block));", "-\t\t\t\t\tinitializer.setModifiers(oldInitializer.modifiers);", "-\t\t\t\t\tinitializer.setSourceRange(oldInitializer.declarationSourceStart, oldInitializer.sourceEnd - oldInitializer.declarationSourceStart + 1);", "-\t\t\t\t\tsetJavaDocComment(initializer);", "-\t\t\t\t\ttypeDecl.bodyDeclarations().add(initializer);", "+\t\t\tif (node instanceof org.eclipse.jdt.internal.compiler.ast.Initializer) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Initializer oldInitializer = (org.eclipse.jdt.internal.compiler.ast.Initializer) node;", "+\t\t\t\tInitializer initializer = this.ast.newInitializer();", "+\t\t\t\tinitializer.setBody(convert(oldInitializer.block));", "+\t\t\t\tinitializer.setModifiers(oldInitializer.modifiers);", "+\t\t\t\tinitializer.setSourceRange(oldInitializer.declarationSourceStart, oldInitializer.sourceEnd - oldInitializer.declarationSourceStart + 1);", "+\t\t\t\tsetJavaDocComment(initializer);", "+\t\t\t\ttypeDecl.bodyDeclarations().add(initializer);", "+\t\t\t} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) node;", "+\t\t\t\tif (i > 0", "+\t\t\t\t\t&& (nodes[i - 1] instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "+\t\t\t\t\t&& ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)nodes[i - 1]).declarationSourceStart == fieldDeclaration.declarationSourceStart) {", "+\t\t\t\t\t// we have a multiple field declaration", "+\t\t\t\t\t// We retrieve the existing fieldDeclaration to add the new VariableDeclarationFragment", "+\t\t\t\t\tFieldDeclaration currentFieldDeclaration = (FieldDeclaration) typeDecl.bodyDeclarations().get(typeDecl.bodyDeclarations().size() - 1);", "+\t\t\t\t\tcurrentFieldDeclaration.fragments().add(convertToVariableDeclarationFragment(fieldDeclaration));", "-\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) node;", "-\t\t\t\t\tif (i > 0", "-\t\t\t\t\t\t&& (nodes[i - 1] instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "-\t\t\t\t\t\t&& ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)nodes[i - 1]).declarationSourceStart == fieldDeclaration.declarationSourceStart) {", "-\t\t\t\t\t\t// we have a multiple field declaration", "-\t\t\t\t\t\t// We retrieve the existing fieldDeclaration to add the new VariableDeclarationFragment", "-\t\t\t\t\t\tFieldDeclaration currentFieldDeclaration = (FieldDeclaration) typeDecl.bodyDeclarations().get(typeDecl.bodyDeclarations().size() - 1);", "-\t\t\t\t\t\tcurrentFieldDeclaration.fragments().add(convertToVariableDeclarationFragment(fieldDeclaration));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// we can create a new FieldDeclaration", "-\t\t\t\t\t\ttypeDecl.bodyDeclarations().add(convertToFieldDeclaration(fieldDeclaration));", "-\t\t\t\t\t}", "+\t\t\t\t\t// we can create a new FieldDeclaration", "+\t\t\t\t\ttypeDecl.bodyDeclarations().add(convertToFieldDeclaration(fieldDeclaration));"]}], "num": 9825}
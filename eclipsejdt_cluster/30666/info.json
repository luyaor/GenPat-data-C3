{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cbbe60d6d3bb7275c08ec28ac9a0d4e2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20d7f739ff9367f2561670a81826f51c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "5166ddb130bcb062c1e82da491c829c5d95a6211", "commitAfterChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 11, "signatureBeforeChange": " private MethodBinding createMethod(IBinaryMethod method, long sourceLevel)", "signatureAfterChange": " private MethodBinding createMethod(IBinaryMethod method, long sourceLevel)", "diff": ["+\tAnnotationBinding[][] paramAnnotations = null; ", "+\t\t\tif (this.environment.storeAnnotations)", "+\t\t\t\tparamAnnotations = new AnnotationBinding[size][];", "-\t\t\t\tif (i >= startIndex)   // skip the synthetic arg if necessary", "+\t\t\t\tif (i >= startIndex) {   // skip the synthetic arg if necessary", "+\t\t\t\t\t// 'paramAnnotations' line up with 'parameters'", "+\t\t\t\t\t// int parameter to method.getParameterAnnotations() include the synthetic arg", "+\t\t\t\t\tif (paramAnnotations != null)", "+\t\t\t\t\t\tparamAnnotations[i - startIndex] = createAnnotations(method.getParameterAnnotations(i), this.environment);", "+\t\t\t\t}", "-\t\t\t\tparameters = new TypeBinding[types.size()];", "+\t\t\t\tint numParam = types.size();", "+\t\t\t\tparameters = new TypeBinding[numParam];", "+\t\t\t\tif (this.environment.storeAnnotations) {", "+\t\t\t\t\tparamAnnotations = new AnnotationBinding[numParam][];", "+\t\t\t\t\tfor (int i = 0; i < numParam; i++)", "+\t\t\t\t\t\tparamAnnotations[i] = createAnnotations(method.getParameterAnnotations(i), this.environment);", "+\t\t\t\t}", "+\tif (this.environment.storeAnnotations)", "+\t\tresult.setAnnotations(", "+\t\t\tcreateAnnotations(method.getAnnotations(), this.environment),", "+\t\t\tparamAnnotations,", "+\t\t\tisAnnotationType() ? convertMemberValue(method.getDefaultValue(), this.environment) : null);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b09e90c2f66188c9349770ceb4ee8b86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "42f61a276ba7d1e6da8e4e7be639a302682158f7", "commitAfterChange": "51ef1f3e636c416c08f983016f64f795f2b9cc74", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void save(IProgressMonitor progress, boolean force) throws JavaModelException", "signatureAfterChange": " public void save(IProgressMonitor progress, boolean force) throws JavaModelException", "diff": ["+\t\tString stringContents = this.getContents();", "+\t\tif (stringContents == null) return;", "+", "+\t\t// Get encoding", "-\t\tString stringContents = this.getContents();", "-\t\tif (stringContents == null) return;", "+\t\t", "+\t\t// Create bytes array", "-\t\tByteArrayInputStream stream = new ByteArrayInputStream(bytes);", "+\t\t// Special case for UTF-8 BOM files", "+\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=110576", "+\t\tif (encoding.equals(org.eclipse.jdt.internal.compiler.util.Util.UTF_8)) {", "+\t\t\tIContentDescription description = this.file.getContentDescription();", "+\t\t\tif (description != null && description.getProperty(IContentDescription.BYTE_ORDER_MARK) != null) {", "+\t\t\t\tint bomLength= IContentDescription.BOM_UTF_8.length;", "+\t\t\t\tbyte[] bytesWithBOM= new byte[bytes.length + bomLength];", "+\t\t\t\tSystem.arraycopy(IContentDescription.BOM_UTF_8, 0, bytesWithBOM, 0, bomLength);", "+\t\t\t\tSystem.arraycopy(bytes, 0, bytesWithBOM, bomLength, bytes.length);", "+\t\t\t\tbytes= bytesWithBOM;", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\t// Set file contents", "+\t\tByteArrayInputStream stream = new ByteArrayInputStream(bytes);"]}], "num": 30666}
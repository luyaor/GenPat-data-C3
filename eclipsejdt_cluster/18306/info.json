{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce8c2bf0cde9989cb748c1191284c699", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "585df37aff5cab8dcfcc5d987bc2af15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "16a26bc49f78acb9a7d0c10a9d6bedce29952111", "commitAfterChange": "e70f557904c0f4a9dab2a8974c294cadedac3b10", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": "\r public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope)", "diff": ["-\tif (binding.isPrivate() \r", "-\t\t&& (currentScope.enclosingSourceType() != binding.declaringClass)\r", "-\t\t&& (binding.constant == NotAConstant)) {\r", "-\t\tsyntheticReadAccessor = binding.getSyntheticReadAccess();\r", "+\tif (binding.isPrivate()) {\r", "+\t\tif ((currentScope.enclosingSourceType() != binding.declaringClass) && (binding.constant == NotAConstant)) {\r", "+\t\t\tsyntheticReadAccessor =  ((SourceTypeBinding) binding.declaringClass).addSyntheticMethod(binding, true);\r", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldReadAccess(binding, this);\r", "+\t\t}\r", "+\r", "+\t} else if (receiver instanceof QualifiedSuperReference){ // qualified super\r", "+\r", "+\t\t// qualified super need emulation always\r", "+\t\tSourceTypeBinding destinationType = (SourceTypeBinding)(((QualifiedSuperReference)receiver).currentCompatibleType);\r", "+\t\tsyntheticReadAccessor = destinationType.addSyntheticMethod(binding, true);\r", "+\t\tcurrentScope.problemReporter().needToEmulateFieldReadAccess(binding, this);\r", "+\r", "+\t} else if (binding.isProtected()) {\r", "+\r", "+\t\tSourceTypeBinding enclosingSourceType;\r", "+\t\tif (((bits & DepthMASK) != 0) \r", "+\t\t\t\t&& binding.declaringClass.getPackage() \r", "+\t\t\t\t\t!= (enclosingSourceType = currentScope.enclosingSourceType()).getPackage()){\r", "+\r", "+\t\t\tSourceTypeBinding currentCompatibleType = (SourceTypeBinding)enclosingSourceType.enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);\r", "+\t\t\tsyntheticReadAccessor = currentCompatibleType.addSyntheticMethod(binding, true);\r", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldReadAccess(binding, this);\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa9c0c78c96d4df122833e5eb923ef4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "52b692ed21634a88100b21eba7894614726adbcf", "commitAfterChange": "0d07e8a93b23da2b01f8b175a71d349d77236596", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\tthis.codegenBinding = this.binding.original();", "+\tMethodBinding codegenBinding = this.binding.original();", "-\t\tif (currentScope.enclosingSourceType() != this.codegenBinding.declaringClass){", "+\t\tif (currentScope.enclosingSourceType() != codegenBinding.declaringClass){", "-\t\t\tthis.syntheticAccessor = ((SourceTypeBinding)this.codegenBinding.declaringClass).addSyntheticMethod(this.codegenBinding, isSuperAccess());", "-\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);", "+\t\t\tthis.syntheticAccessor = ((SourceTypeBinding)codegenBinding.declaringClass).addSyntheticMethod(codegenBinding, isSuperAccess());", "+\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(codegenBinding, this);", "-\t\tthis.syntheticAccessor = destinationType.addSyntheticMethod(this.codegenBinding, isSuperAccess());", "-\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);", "+\t\tthis.syntheticAccessor = destinationType.addSyntheticMethod(codegenBinding, isSuperAccess());", "+\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(codegenBinding, this);", "-\t\t\t\t&& this.codegenBinding.declaringClass.getPackage()", "+\t\t\t\t&& codegenBinding.declaringClass.getPackage()", "-\t\t\tthis.syntheticAccessor = currentCompatibleType.addSyntheticMethod(this.codegenBinding, isSuperAccess());", "-\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);", "+\t\t\tthis.syntheticAccessor = currentCompatibleType.addSyntheticMethod(codegenBinding, isSuperAccess());", "+\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(codegenBinding, this);"]}], "num": 18306}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a959cb1af6f8de531c93cd71f795e207", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75778f8c90575528d23258b14db81a1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HandleFactory.java", "commitBeforeChange": "29bba5ec8d05a9cd1832ad934d2530b41087b676", "commitAfterChange": "ca349eb1728a54f5c4569863d8f64340b099c4ce", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate IJavaElement createElement(Scope scope, int elementPosition, ICompilationUnit unit, HashSet existingElements, HashMap knownScopes)", "signatureAfterChange": " \tprivate IJavaElement createElement(Scope scope, int elementPosition, ICompilationUnit unit, HashSet existingElements, HashMap knownScopes)", "diff": ["-\t\t\t\t\tparentElement = createElement(scope.parent, elementPosition, unit, existingElements, knownScopes);", "-\t\t\t\t\tnewElement = new org.eclipse.jdt.internal.core.LambdaExpression((JavaElement) parentElement, (LambdaExpression) scope.referenceContext()).getMethod();", "-\t\t\t\t\tknownScopes.put(scope, newElement);", "-\t\t\t\t\treturn newElement;", "+\t\t\t\t\tLambdaExpression expression = (LambdaExpression) scope.referenceContext();", "+\t\t\t\t\tif (expression.binding != null && expression.binding.isValidBinding()) { // chain in lambda element only if resolved properly.", "+\t\t\t\t\t\tparentElement = createElement(scope.parent, elementPosition, unit, existingElements, knownScopes);", "+\t\t\t\t\t\tnewElement = new org.eclipse.jdt.internal.core.LambdaExpression((JavaElement) parentElement, expression).getMethod();", "+\t\t\t\t\t\tknownScopes.put(scope, newElement);", "+\t\t\t\t\t\treturn newElement;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e16faad2a7555baa1447b4a759c6710c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayInitializer.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedTb)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedTb)", "diff": ["-\t\t\tTypeBinding expectedElementsTb = binding.elementsType(scope);", "+\t\t\tTypeBinding expectedElementsTb = binding.elementsType();", "-\t\t\t\t\t\texpression.implicitWidening(expectedElementsTb, expressionTb);", "+\t\t\t\t\t\texpression.computeConversion(scope, expectedElementsTb, expressionTb);", "-\t\t\t\t\t\texpression.implicitWidening(expectedElementsTb, expressionTb);", "+\t\t\t\t\t\texpression.computeConversion(scope, expectedElementsTb, expressionTb);", "-\t\t\t\t\t\tscope.problemReporter().typeMismatchErrorActualTypeExpectedType(expression, expressionTb, expectedElementsTb);", "+\t\t\t\t\t\tscope.problemReporter().typeMismatchError(expressionTb, expectedElementsTb, expression);", "-\t\t\tTypeBinding probableTb = scope.createArray(leafElementType, dim);", "-\t\t\tscope.problemReporter().typeMismatchErrorActualTypeExpectedType(this, probableTb, expectedTb);", "+\t\t\tTypeBinding probableTb = scope.createArrayType(leafElementType, dim);", "+\t\t\tscope.problemReporter().typeMismatchError(probableTb, expectedTb, this);"]}], "num": 13976}
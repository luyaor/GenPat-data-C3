{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b02e3c339b1fb85e5373402668aa2cee", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e301960d5513f5a2184318d22813730", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "7693b6034c5b487d7e3d22ce3120cc397666c014", "commitAfterChange": "724710aa30292ac2abd638b547c00344cd47ea49", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tITypeBinding resolveArrayType(ITypeBinding typeBinding, int dimensions)", "signatureAfterChange": " \tITypeBinding resolveArrayType(ITypeBinding typeBinding, int dimensions)", "diff": ["- \t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding leafTypeBinding = null;", "- \t\tif (leafComponentType.isPrimitive()) {", "- \t \t\tString name = leafComponentType.getBinaryName();", "-\t\t\tswitch(name.charAt(0)) {", "-\t\t\t\tcase 'I' :", "-\t\t\t\t\tleafTypeBinding = org.eclipse.jdt.internal.compiler.lookup.TypeBinding.INT;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 'B' :", "-\t\t\t\t\tleafTypeBinding = org.eclipse.jdt.internal.compiler.lookup.TypeBinding.BYTE;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 'Z' :", "-\t\t\t\t\tleafTypeBinding = org.eclipse.jdt.internal.compiler.lookup.TypeBinding.BOOLEAN;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 'C' :", "-\t\t\t\t\tleafTypeBinding = org.eclipse.jdt.internal.compiler.lookup.TypeBinding.CHAR;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 'J' :", "-\t\t\t\t\tleafTypeBinding = org.eclipse.jdt.internal.compiler.lookup.TypeBinding.LONG;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 'S' :", "-\t\t\t\t\tleafTypeBinding = org.eclipse.jdt.internal.compiler.lookup.TypeBinding.SHORT;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 'D' :", "-\t\t\t\t\tleafTypeBinding = org.eclipse.jdt.internal.compiler.lookup.TypeBinding.DOUBLE;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 'F' :", "-\t\t\t\t\tleafTypeBinding = org.eclipse.jdt.internal.compiler.lookup.TypeBinding.FLOAT;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 'V' :", "-\t\t\t\t\tthrow new IllegalArgumentException();", "+\t\tif (!(leafComponentType instanceof TypeBinding)) return null;", "+\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding leafTypeBinding = ", "+\t\t\t\t\t\t\t\t\t\t\t((TypeBinding) leafComponentType).binding;", "+\t\tif (leafTypeBinding instanceof VoidTypeBinding) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\tif (typeBinding.isArray()) {", "+\t\t\treturn this.getTypeBinding(lookupEnvironment().createArrayType(", "+\t\t\t\t\t\t\t\t\t\t\tleafTypeBinding,", "+\t\t\t\t\t\t\t\t\t\t\tactualDimensions,", "+\t\t\t\t\t\t\t\t\t\t\tinsertAnnotations((((TypeBinding) typeBinding).binding).getTypeAnnotations(), dimensions)));", "+\t\t} else {", "+\t\t\treturn this.getTypeBinding(lookupEnvironment().createArrayType(", "+\t\t\t\t\t\t\t\t\t\t\tleafTypeBinding,", "+\t\t\t\t\t\t\t\t\t\t\tactualDimensions));", "+\t\t}", "+\t}", "- \t\t} else {", "- \t\t\tif (!(leafComponentType instanceof TypeBinding)) return null;", "- \t\t\tleafTypeBinding = ((TypeBinding) leafComponentType).binding;", "- \t\t}", "-\t\treturn this.getTypeBinding(lookupEnvironment().createArrayType(leafTypeBinding, actualDimensions));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c682261c2124bba9480417343be4f714", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "64be0e1955b0627416c496a964aba7a1211321fc", "commitAfterChange": "1b6125b922b604588bed2b5782d039674eb294dc", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " public void testBug118823() throws CoreException, InterruptedException, IOException", "signatureAfterChange": " public void testBug118823() throws CoreException, InterruptedException, IOException", "diff": ["-", "-\t\t// Get working copies and reconcile", "-\t\tthis.workingCopies[0] = getCompilationUnit(\"/P1/Test.java\").getWorkingCopy(this.wcOwner, this.problemRequestor, null);", "+", "+\t\t// Get first working copy and verify that there's no error", "-\t\tthis.workingCopies[0].getBuffer().setContents(source1);", "-\t\tthis.workingCopies[0].reconcile(AST.JLS3, true, null, null);", "+\t\tthis.workingCopies[0] = getCompilationUnit(\"/P1/Test.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "-\t\tthis.workingCopies[1] = getCompilationUnit(\"/P2/A.java\").getWorkingCopy(this.wcOwner, this.problemRequestor, null);", "+", "+\t\t// Get second working copy and verify that there's one error (missing secondary type)", "-\t\tthis.workingCopies[1].getBuffer().setContents(source2);", "-\t\tthis.workingCopies[1].reconcile(AST.JLS3, true, null, null);", "+\t\tthis.workingCopies[1] = getCompilationUnit(\"/P2/A.java\").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);", "-\t\t// DEBUG", "-\t\tJavaModelManager.VERBOSE = true;", "-\t\torg.eclipse.jdt.internal.core.search.BasicSearchEngine.VERBOSE = true;", "-\t\torg.eclipse.jdt.internal.core.NameLookup.VERBOSE = true;", "-\t\tSystem.out.println(\"--------------------------------------------------------------------------------\");", "-\t\tSystem.out.println(\"Running test \"+getName()+\"...\");", "-", "-\t\t// Delete file and recreate it with secondary outside eclipse", "+\t\t// Delete first workding copy file and recreate it with secondary outside eclipse", "-\t\tString sourceFilePath = ioFile.getCanonicalPath();", "-\t\tUtil.createFile(sourceFilePath, source1);", "-\t\t// Debug", "-\t\tSystem.out.println(\"File \"+sourceFilePath+\":\");", "-\t\tSystem.out.println(Util.fileContent(sourceFilePath));", "+\t\tUtil.createFile(ioFile.getCanonicalPath(), source1);", "+", "+\t\t// Get first working copy and verify that there's still no error", "-\t\tthis.workingCopies[0].reconcile(AST.JLS3, true, null, null);", "+\t\tthis.workingCopies[0].reconcile(AST.JLS3,", "+\t\t\ttrue, // force problem detection to see errors if any", "+\t\t\tnull,\t// do not use working copy owner to not use working copies in name lookup", "+\t\t\tnull);", "+", "+\t\t// Get second working copy and verify that there's any longer error", "-\t\tthis.workingCopies[1].reconcile(AST.JLS3, true, null, null);", "+\t\tthis.workingCopies[1].getBuffer().setContents(source2);", "+\t\tthis.workingCopies[1].reconcile(AST.JLS3,", "+\t\t\ttrue, // force problem detection to see errors if any", "+\t\t\tnull,\t// do not use working copy owner to not use working copies in name lookup", "+\t\t\tnull);", "-\t\t// DEBUG", "-\t\tSystem.out.println(\"--------------------------------------------------------------------------------\");", "-\t\tJavaModelManager.VERBOSE = false;", "-\t\torg.eclipse.jdt.internal.core.search.BasicSearchEngine.VERBOSE = false;", "-\t\torg.eclipse.jdt.internal.core.NameLookup.VERBOSE = false;", "-"]}], "num": 49147}
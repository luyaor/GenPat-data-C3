{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "012af43c2e9d297dfc6e3d3eff3fc585", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae8dfad4f6348268f296fa892f6febf3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "abc14013a8fd8f8040bc625a426663caf110b8a2", "commitAfterChange": "f04bcab2628ef5d21c040097a5d26e48d3262568", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "  \tprivate void findTypesAndPackages(char[] token, Scope scope)", "signatureAfterChange": "  \tprivate void findTypesAndPackages(char[] token, Scope scope)", "diff": ["-", "-\t\tif (token.length == 0)", "-\t\t\treturn;", "-", "-\t\tfindKeywords(token, baseTypes, scope);", "-\t\tnameEnvironment.findTypes(token, this);", "-\t\tnameEnvironment.findPackages(token, this);", "+\t\t", "+\t\tif (token.length == 0) {", "+\t\t\tif(expectedTypesPtr > -1) {", "+\t\t\t\tfor (int i = 0; i <= expectedTypesPtr; i++) {", "+\t\t\t\t\tif(expectedTypes[i] instanceof ReferenceBinding) {", "+\t\t\t\t\t\tReferenceBinding refBinding = (ReferenceBinding)expectedTypes[i];", "+\t\t\t\t\t\tif(!unitScope.isDefinedInSameUnit(refBinding)) {", "+\t\t\t\t\t\t\tint relevance = R_DEFAULT + R_CASE + R_EXPECTED_TYPE;", "+\t\t\t\t\t\t\tif(refBinding.isClass()) {", "+\t\t\t\t\t\t\t\trelevance += computeRelevanceForClass();", "+\t\t\t\t\t\t\t\trequestor.acceptClass(", "+\t\t\t\t\t\t\t\t\trefBinding.qualifiedPackageName(),", "+\t\t\t\t\t\t\t\t\trefBinding.sourceName(),", "+\t\t\t\t\t\t\t\t\trefBinding.sourceName(),", "+\t\t\t\t\t\t\t\t\trefBinding.modifiers,", "+\t\t\t\t\t\t\t\t\tstartPosition - offset, ", "+\t\t\t\t\t\t\t\t\tendPosition - offset,", "+\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\t\t\t\t} else if (refBinding.isInterface()) {", "+\t\t\t\t\t\t\t\trelevance += computeRelevanceForInterface();", "+\t\t\t\t\t\t\t\trequestor.acceptInterface(", "+\t\t\t\t\t\t\t\t\trefBinding.qualifiedPackageName(),", "+\t\t\t\t\t\t\t\t\trefBinding.sourceName(),", "+\t\t\t\t\t\t\t\t\trefBinding.sourceName(),", "+\t\t\t\t\t\t\t\t\trefBinding.modifiers,", "+\t\t\t\t\t\t\t\t\tstartPosition - offset, ", "+\t\t\t\t\t\t\t\t\tendPosition - offset,", "+\t\t\t\t\t\t\t\t\trelevance);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} ", "+\t\t} else {", "+\t\t\tfindKeywords(token, baseTypes, scope);", "+\t\t\tnameEnvironment.findTypes(token, this);", "+\t\t\tnameEnvironment.findPackages(token, this);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b66f5ca7dbafa0772e85f5a1062712f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 29, "signatureBeforeChange": " \t \tprivate TypeBinding[] getTypeBindingArguments()", "signatureAfterChange": " \t \tprivate TypeBinding[] getTypeBindingArguments()", "diff": ["-\t\tthis.types.toArray(arguments);", "+\t\tint rank = 0;", "+\t\tfor (int i = 0; i < size; i++) {", "+\t\t\tBindingKeyResolver resolver = (BindingKeyResolver) this.types.get(i);", "+\t\t\tTypeBinding binding;", "+\t\t\tint kind = resolver.wildcardKind;", "+\t\t\tswitch (kind) {", "+\t\t\t\tcase Wildcard.EXTENDS:", "+\t\t\t\tcase Wildcard.SUPER:", "+\t\t\t\t\tbinding = this.environment.createWildcard((ReferenceBinding) this.typeBinding, rank++, (TypeBinding) resolver.compilerBinding, null /*no extra bound*/, kind);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Wildcard.UNBOUND:", "+\t\t\t\t\tbinding = this.environment.createWildcard((ReferenceBinding) this.typeBinding, rank++, null/*no bound*/, null /*no extra bound*/, kind);", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tbinding = (TypeBinding) resolver.compilerBinding;", "+\t\t\t}", "+\t\t\tif (resolver.isCapture)", "+\t\t\t\tbinding = new CaptureBinding((WildcardBinding) binding);", "+\t\t\targuments[i] = binding;", "+\t\t}"]}], "num": 27613}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d3d2bb046b51efa5653dd7fca909b5bd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf7d25808e129685956e73002ed0acb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/diagnose/DiagnoseParser.java", "commitBeforeChange": "5fa6afe954089094ae8cca4de90fd35757e48b64", "commitAfterChange": "ae67359ba1af0f32a3cb74678feaffc1673aa2c9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   \tpublic void diagnoseParse()", "signatureAfterChange": "   \tpublic void diagnoseParse()", "diff": ["+\t\t", "+\t\tboolean forceRecoveryAfterLBracketMissing = false;", "+\t\tint forceRecoveryToken = -1;", "+\t\t\t\tif((tok != TokenNameRBRACE || (forceRecoveryToken != currentToken && (lexStream.flags(currentToken) & LexStream.LBRACE_MISSING) != 0))", "+\t\t\t\t\t&& (lexStream.flags(currentToken) & LexStream.IS_AFTER_JUMP) !=0) {", "+\t\t\t\t\tact = ERROR_ACTION;", "+\t\t\t\t\tif(forceRecoveryToken != currentToken", "+\t\t\t\t\t\t&& (lexStream.flags(currentToken) & LexStream.LBRACE_MISSING) != 0) {", "+\t\t\t\t\t\tforceRecoveryAfterLBracketMissing = true;", "+\t\t\t\t\t\tforceRecoveryToken = currentToken;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t", "-\t\t\t\tRepairCandidate candidate = errorRecovery(currentToken);", "+\t\t\t\tRepairCandidate candidate = errorRecovery(currentToken, forceRecoveryAfterLBracketMissing);", "+\t\t\t\t", "+\t\t\t\tforceRecoveryAfterLBracketMissing = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3577d0aff088075e8d6ef8700f57015", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "6c60dce535be3de6b04d99ba8ae08dbe91b94969", "commitAfterChange": "93bc0d951e48394510778784a6576e0cbdd0b011", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " DiskIndex mergeWith(MemoryIndex memoryIndex) throws IOException", "signatureAfterChange": " DiskIndex mergeWith(MemoryIndex memoryIndex) throws IOException", "diff": ["+\tboolean usingTmp = false;", "-\tDiskIndex newDiskIndex = new DiskIndex(new FileIndexLocation(new File(oldIndexFile.getPath() + \".tmp\"))); //$NON-NLS-1$", "+\tString indexFilePath = oldIndexFile.getPath();", "+\tif (indexFilePath.endsWith(TMP_EXT)) { // the tmp file could not be renamed last time", "+\t\tindexFilePath = indexFilePath.substring(0, indexFilePath.length()-TMP_EXT.length());", "+\t\tusingTmp = true;", "+\t} else {", "+\t\tindexFilePath += TMP_EXT;", "+\t}", "+\tDiskIndex newDiskIndex = new DiskIndex(new FileIndexLocation(new File(indexFilePath)));", "-\t\tif (!newIndexFile.renameTo(oldIndexFile)) {", "-\t\t\tif (DEBUG)", "-\t\t\t\tSystem.out.println(\"mergeWith - Failed to rename \" + this.indexLocation); //$NON-NLS-1$", "-\t\t\tthrow new IOException(\"Failed to rename index file \" + this.indexLocation); //$NON-NLS-1$", "+\t\tif (!usingTmp && !newIndexFile.renameTo(oldIndexFile)) {", "+\t\t\t// try again after waiting for two milli secs", "+\t\t\ttry {", "+\t\t\t\tThread.sleep(2);", "+\t\t\t} catch (InterruptedException e) {", "+\t\t\t\t//ignore", "+\t\t\t}", "+\t\t\tif (!newIndexFile.renameTo(oldIndexFile)) {", "+\t\t\t\tif (DEBUG)", "+\t\t\t\t\tSystem.out.println(\"mergeWith - Failed to rename \" + this.indexLocation); //$NON-NLS-1$", "+\t\t\t\tusingTmp = true;", "+\t\t\t}", "-\tnewDiskIndex.indexLocation = this.indexLocation;", "+\tif (!usingTmp) // rename done, use the new file", "+\t\tnewDiskIndex.indexLocation = this.indexLocation;"]}], "num": 60772}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "679a2ef2539e476e39b2c0ce83070937", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ea2139194c81317830543604107cdcd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "ff4b1a1f8468440c7b2d077cf2b465dbb33f40ff", "commitAfterChange": "ed6fd232f6d05dfc9074419f2fb6a1c7bcfbd150", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": "  \tprotected VariableDeclarationFragment convertToVariableDeclarationFragment(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration localDeclaration)", "signatureAfterChange": "  \tprotected VariableDeclarationFragment convertToVariableDeclarationFragment(org.eclipse.jdt.internal.compiler.ast.LocalDeclaration localDeclaration)", "diff": ["-\t\tint start = localDeclaration.sourceEnd;", "+\t\tint start = localDeclaration.sourceEnd; ", "+\t\tint extraDimension = retrieveExtraDimension(localDeclaration.sourceEnd + 1, this.compilationUnitSourceLength);", "+\t\tvariableDeclarationFragment.setExtraDimensions(extraDimension);", "+\t\tint end = start;", "-\t\t}", "-\t\tint end = retrievePositionBeforeNextCommaOrSemiColon(start, localDeclaration.declarationSourceEnd);", "-\t\tif (end == -1) {", "-\t\t\tif (hasInitialization) {", "-\t\t\t\t// the initiazation sourceEnd is modified during convert(initialization)", "-\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=128961", "-\t\t\t\tend = start - 1;", "+\t\t\tend = start - 1;", "+\t\t} else {", "+\t\t\t// we need to do it even if extendedDimension is null in case of syntax error in an array initializer", "+\t\t\t// start + 1 because we need the exclusive range for retrieveEndOfPotentialExtendedDimensions", "+\t\t\tint possibleEnd = retrieveEndOfPotentialExtendedDimensions(start + 1, localDeclaration.sourceEnd, localDeclaration.declarationSourceEnd);", "+\t\t\tif (possibleEnd != -1) {", "+\t\t\t\tend = possibleEnd;", "-\t\t\t\tend = localDeclaration.sourceEnd;", "+\t\t\t\tvariableDeclarationFragment.setFlags(variableDeclarationFragment.getFlags() | ASTNode.MALFORMED);", "-\t\tvariableDeclarationFragment.setExtraDimensions(retrieveExtraDimension(localDeclaration.sourceEnd + 1, this.compilationUnitSourceLength));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7dbc370a405c8c0b75aa7505304ab802", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "ff4b1a1f8468440c7b2d077cf2b465dbb33f40ff", "commitAfterChange": "ed6fd232f6d05dfc9074419f2fb6a1c7bcfbd150", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " \t \tprotected VariableDeclarationFragment convertToVariableDeclarationFragment(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration)", "signatureAfterChange": " \t \tprotected VariableDeclarationFragment convertToVariableDeclarationFragment(org.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration)", "diff": ["-\t\tint start = fieldDeclaration.sourceEnd;", "+\t\tint start = fieldDeclaration.sourceEnd; // need the exclusive range for retrieveEndOfPotentialExtendedDimensions", "+\t\tint end = start;", "+\t\tint extraDimensions = retrieveExtraDimension(fieldDeclaration.sourceEnd + 1, fieldDeclaration.declarationSourceEnd );", "+\t\tvariableDeclarationFragment.setExtraDimensions(extraDimensions);", "-\t\t}", "-\t\tint end = retrievePositionBeforeNextCommaOrSemiColon(start, fieldDeclaration.declarationSourceEnd);", "-\t\tif (end == -1) {", "-\t\t\tvariableDeclarationFragment.setSourceRange(fieldDeclaration.sourceStart, fieldDeclaration.declarationSourceEnd - fieldDeclaration.sourceStart + 1);", "-\t\t\tvariableDeclarationFragment.setFlags(variableDeclarationFragment.getFlags() | ASTNode.MALFORMED);", "+\t\t\tend = start - 1;", "-\t\t\tvariableDeclarationFragment.setSourceRange(fieldDeclaration.sourceStart, end - fieldDeclaration.sourceStart + 1);", "+\t\t\t// we need to do it even if extendedDimension is null in case of syntax error in an array initializer", "+\t\t\t// need the exclusive range for retrieveEndOfPotentialExtendedDimensions", "+\t\t\tend = retrieveEndOfPotentialExtendedDimensions(start + 1, fieldDeclaration.sourceEnd, fieldDeclaration.declarationSourceEnd);", "+\t\t\tif (end == -1) {", "+\t\t\t\tend = fieldDeclaration.declarationSourceEnd;", "+\t\t\t\tvariableDeclarationFragment.setFlags(variableDeclarationFragment.getFlags() | ASTNode.MALFORMED);", "+\t\t\t}", "-\t\tvariableDeclarationFragment.setExtraDimensions(retrieveExtraDimension(fieldDeclaration.sourceEnd + 1, fieldDeclaration.declarationSourceEnd ));", "+\t\tvariableDeclarationFragment.setSourceRange(fieldDeclaration.sourceStart, end - fieldDeclaration.sourceStart + 1);"]}], "num": 43771}
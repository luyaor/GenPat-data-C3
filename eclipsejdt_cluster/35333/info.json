{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "244ff4268d5bdf870a7fa5b46c916332", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68bbc689450ebdd73610866ef5f9c42b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\t\tif (element != null)", "+\t\tif (element != null) {", "-\t} else if (this.pattern.findReferences && reference instanceof MessageSend) {", "-\t\tIJavaElement focus = ((InternalSearchPattern) this.pattern).focus;", "-\t\t// verify closest match if pattern was bound", "-\t\t// (see bug 70827)", "-\t\tif (focus != null && focus.getElementType() == IJavaElement.METHOD) {", "-\t\t\tMethodBinding patternMethodBinding = locator.getMethodBinding((IMethod) focus);", "-\t\t\tif (patternMethodBinding != null && patternMethodBinding.isValidBinding()) {", "-\t\t\t\tMethodBinding method = ((MessageSend)reference).binding;", "-\t\t\t\tif (method != null) {", "-\t\t\t\t\tmethod = method.original();", "-\t\t\t\t\tif (method != null && patternMethodBinding.isPrivate() && patternMethodBinding.declaringClass != method.declaringClass)", "-\t\t\t\t\t\treturn; // finally the match was not possible", "+\t\t}", "+\t} else {", "+\t\tmatch = locator.newMethodReferenceMatch(element, accuracy, -1, -1, false /*not constructor*/, false/*not synthetic*/, reference);", "+\t\tif (this.pattern.findReferences && reference instanceof MessageSend) {", "+\t\t\tIJavaElement focus = ((InternalSearchPattern) this.pattern).focus;", "+\t\t\t// verify closest match if pattern was bound", "+\t\t\t// (see bug 70827)", "+\t\t\tif (focus != null && focus.getElementType() == IJavaElement.METHOD) {", "+\t\t\t\tMethodBinding patternMethodBinding = locator.getMethodBinding((IMethod) focus);", "+\t\t\t\tif (patternMethodBinding != null && patternMethodBinding.isValidBinding()) {", "+\t\t\t\t\tMethodBinding method = ((MessageSend)reference).binding;", "+\t\t\t\t\tif (method != null) {", "+\t\t\t\t\t\tmethod = method.original();", "+\t\t\t\t\t\tif (method != null && patternMethodBinding.isPrivate() && patternMethodBinding.declaringClass != method.declaringClass)", "+\t\t\t\t\t\t\treturn; // finally the match was not possible", "+\t\t\t\t\t}", "+\t\t\tmatchReportReference((MessageSend)reference, locator, ((MessageSend)reference).binding);", "+\t\t} else {", "+\t\t\tint offset = reference.sourceStart;", "+\t\t\tmatch.setOffset(offset);", "+\t\t\tmatch.setLength(reference.sourceEnd-offset+1);", "+\t\t\tlocator.report(match);", "-\t\tmatchReportReference((MessageSend)reference, element, accuracy, locator, ((MessageSend)reference).binding);", "-\t} else {", "-\t\tint offset = reference.sourceStart;", "-\t\tSearchMatch match = locator.newMethodReferenceMatch(element, accuracy, offset, reference.sourceEnd-offset+1, false /*not constructor*/, false/*not synthetic*/, reference);", "-\t\tlocator.report(match);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1755372d2be34c7063662f13ad06dd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " protected void matchReportReference(QualifiedNameReference qNameRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(QualifiedNameReference qNameRef, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["+", "+\t// Create search match to report", "+\tmatch = locator.newTypeReferenceMatch(element, accuracy, qNameRef);", "+", "-\t\t\t\t\tSearchMatch match = locator.newTypeReferenceMatch(element, accuracy, start, end-start+1, qNameRef);", "+\t\t\t\t\tmatch.setOffset(start);", "+\t\t\t\t\tmatch.setLength(end-start+1);", "-\tlocator.reportAccurateTypeReference(qNameRef, this.pattern.simpleName, element, accuracy);", "+\tlocator.reportAccurateTypeReference(match, qNameRef, this.pattern.simpleName);"]}], "num": 35333}
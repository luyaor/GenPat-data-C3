{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4531a3b722c39aa4b9123b2000ff4797", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80b2003315bcf7ddadb2674d16679885", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "c9f8678d902ff26bed49cb8c584175946154d27d", "commitAfterChange": "d1ebbec671e9a9d01699a83b7f5d2a928487175e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public static void compile(String commandLine, PrintWriter writer)", "signatureAfterChange": "\r public static void compile(String commandLine, PrintWriter writer)", "diff": ["-\tint count = 0;\r", "-\tString[] argv = new String[10];\r", "-\tint startIndex = 0;\r", "-\tint lastIndex = commandLine.indexOf('\"');\r", "-\tboolean insideQuotes = false;\r", "-\tboolean insideClasspath = false;\r", "-\tStringTokenizer tokenizer;\r", "-\twhile (lastIndex != -1) {\r", "-\t\tif (insideQuotes) {\r", "-\t\t\tif (count == argv.length) {\r", "-\t\t\t\tSystem.arraycopy(argv, 0, (argv = new String[count * 2]), 0, count);\r", "-\t\t\t}\r", "-\t\t\tif (insideClasspath) {\r", "-\t\t\t\targv[count-1] += commandLine.substring(startIndex, lastIndex);\r", "-\t\t\t\tinsideClasspath = false;\r", "-\t\t\t} else {\r", "-\t\t\t\targv[count++] = commandLine.substring(startIndex, lastIndex);\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\tString subCommandLine = commandLine.substring(startIndex, lastIndex);\r", "-\t\t\tif (subCommandLine.equals(File.pathSeparator)) {\r", "-\t\t\t\targv[count-1] += File.pathSeparator;\r", "-\t\t\t\tinsideClasspath = true;\r", "-\t\t\t} else {\r", "-\t\t\t\ttokenizer = new StringTokenizer(subCommandLine, File.pathSeparator + \" \"); //$NON-NLS-1$\r", "-\t\t\t\twhile (tokenizer.hasMoreTokens()) {\r", "-\t\t\t\t\tif (count == argv.length) {\r", "-\t\t\t\t\t\tSystem.arraycopy(argv, 0, (argv = new String[count * 2]), 0, count);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\targv[count++] = tokenizer.nextToken();\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tstartIndex = lastIndex + 1;\r", "-\t\tlastIndex = commandLine.indexOf('\"', startIndex);\r", "-\t\tinsideQuotes = !insideQuotes;\r", "-\t}\r", "-\tif (startIndex == 0) {\r", "-\t\ttokenizer = new StringTokenizer(commandLine);\r", "-\t\twhile (tokenizer.hasMoreTokens()) {\r", "-\t\t\tif (count == argv.length) {\r", "-\t\t\t\tSystem.arraycopy(argv, 0, (argv = new String[count * 2]), 0, count);\r", "-\t\t\t}\r", "-\t\t\targv[count++] = tokenizer.nextToken();\r", "-\t\t}\r", "-\t} else {\r", "-\t\tif (startIndex + 1 <= commandLine.length()) {\r", "-\t\t\tif (insideQuotes) {\r", "-\t\t\t\tif (count == argv.length) {\r", "-\t\t\t\t\tSystem.arraycopy(argv, 0, (argv = new String[count * 2]), 0, count);\r", "-\t\t\t\t}\r", "-\t\t\t\targv[count++] = commandLine.substring(startIndex, commandLine.length());\r", "-\t\t\t} else {\r", "-\t\t\t\ttokenizer = new StringTokenizer(commandLine.substring(startIndex, commandLine.length()), File.pathSeparator + \" \"); //$NON-NLS-1$\r", "-\t\t\t\twhile (tokenizer.hasMoreTokens()) {\r", "-\t\t\t\t\tif (count == argv.length) {\r", "-\t\t\t\t\t\tSystem.arraycopy(argv, 0, (argv = new String[count * 2]), 0, count);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\targv[count++] = tokenizer.nextToken();\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\tSystem.arraycopy(argv, 0, argv = new String[count], 0, count);\r", "-\tnew Main(writer, false).compile(argv);\r", "-}\r", "+\tnew Main(writer, false).compile(tokenize(commandLine));\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3e31b2515f0b31e4cfc5c1291188c6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tfinal private void markAsDefinitelyAssigned(int position)", "signatureAfterChange": " final private void markAsDefinitelyAssigned(int position)", "diff": ["+ */", "+final private void markAsDefinitelyAssigned(int position) {", "+\tif (this != DEAD_END) {", "+\t\t// position is zero-based", "-\t */", "-\tfinal private void markAsDefinitelyAssigned(int position) {", "-\t\t", "-\t\tif (this != DEAD_END) {", "-\t", "-\t\t\t// position is zero-based", "-\t\t\tif (position < BitCacheSize) {", "-\t\t\t\t// use bits", "-\t\t\t\tlong mask;", "-\t\t\t\tdefiniteInits |= (mask = 1L << position);", "-\t\t\t\tpotentialInits |= mask;", "-\t\t\t\tdefiniteNulls &= ~mask;", "-\t\t\t\tdefiniteNonNulls &= ~mask;", "-\t\t\t} else {", "-\t\t\t\t// use extra vector", "-\t\t\t\tint vectorIndex = (position / BitCacheSize) - 1;", "-\t\t\t\tif (extraDefiniteInits == null) {", "-\t\t\t\t\tint length;", "-\t\t\t\t\textraDefiniteInits = new long[length = vectorIndex + 1];", "-\t\t\t\t\textraPotentialInits = new long[length];", "-\t\t\t\t\textraDefiniteNulls = new long[length];", "-\t\t\t\t\textraDefiniteNonNulls = new long[length];", "-\t\t\t\t} else {", "-\t\t\t\t\tint oldLength; // might need to grow the arrays", "-\t\t\t\t\tif (vectorIndex >= (oldLength = extraDefiniteInits.length)) {", "-\t\t\t\t\t\tSystem.arraycopy(extraDefiniteInits, 0, (extraDefiniteInits = new long[vectorIndex + 1]), 0, oldLength);", "-\t\t\t\t\t\tSystem.arraycopy(extraPotentialInits, 0, (extraPotentialInits = new long[vectorIndex + 1]), 0, oldLength);", "-\t\t\t\t\t\tSystem.arraycopy(extraDefiniteNulls, 0, (extraDefiniteNulls = new long[vectorIndex + 1]), 0, oldLength);", "-\t\t\t\t\t\tSystem.arraycopy(extraDefiniteNonNulls, 0, (extraDefiniteNonNulls = new long[vectorIndex + 1]), 0, oldLength);", "-\t\t\t\t\t}", "+\t\t\tlong mask;", "+\t\t\tthis.definiteInits |= (mask = 1L << position);", "+\t\t\tthis.potentialInits |= mask;", "+\t\t} ", "+\t\telse {", "+\t\t\t// use extra vector", "+\t\t\tint vectorIndex = (position / BitCacheSize) - 1;", "+\t\t\tif (this.extra == null) {", "+\t\t\t\tint length = vectorIndex + 1;", "+\t\t\t\tthis.extra = new long[extraLength][];", "+\t\t\t\tfor (int j = 0; j < extraLength; j++) {", "+\t\t\t\t\tthis.extra[j] = new long[length];", "-\t\t\t\tlong mask;", "-\t\t\t\textraDefiniteInits[vectorIndex] |= (mask = 1L << (position % BitCacheSize));", "-\t\t\t\textraPotentialInits[vectorIndex] |= mask;", "-\t\t\t\textraDefiniteNulls[vectorIndex] &= ~mask;", "-\t\t\t\textraDefiniteNonNulls[vectorIndex] &= ~mask;", "-\t\t\t}", "-\t\t}", "-\t}", "+\t\t\telse {", "+\t\t\t\tint oldLength; // might need to grow the arrays", "+\t\t\t\tif (vectorIndex >= (oldLength = this.extra[0].length)) {", "+\t\t\t\t\tfor (int j = 0; j < extraLength; j++) {", "+\t\t\t\t\t\tSystem.arraycopy(this.extra[j], 0, ", "+\t\t\t\t\t\t\t(this.extra[j] = new long[vectorIndex + 1]), 0, ", "+\t\t\t\t\t\t\toldLength);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tlong mask;", "+\t\t\tthis.extra[0][vectorIndex] |= ", "+\t\t\t\t(mask = 1L << (position % BitCacheSize));", "+\t\t\tthis.extra[1][vectorIndex] |= mask;", "+\t}", "+}"]}], "num": 681}
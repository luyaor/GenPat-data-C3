{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b5c03461aa82481d2f79d2dc247b814", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "854c5ca4fd9a009b220a914420d73f8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java", "commitBeforeChange": "9ea930b8ef0b567a4e08013a97afc6ba878aa860", "commitAfterChange": "b63e8e4c0e47a3750b0c4a9f091dec5ceec8f467", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding type = this.resolvedType = this.qualification.resolveType(scope, true /* check bounds*/);", "+\t\tTypeBinding type = this.qualification.resolveType(scope, true /* check bounds*/);", "-\t\t// X.this is not a raw type as denoting enclosing instance", "-\t\tif (type.isRawType()) {", "-\t\t    RawTypeBinding rawType = (RawTypeBinding) type;", "-\t\t    type = this.resolvedType = rawType.type; // unwrap", "-\t\t}", "+\t\t// X.this is not a param/raw type as denoting enclosing instance", "+\t\tthis.resolvedType = type = type.erasure();", "+", "-\t\t// Its possible to qualify 'this' by the name of the current class", "+\t\t// It is possible to qualify 'this' by the name of the current class"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97174424df82d9550f21cefb634f113e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tthis.resolvedType = this.qualification.resolveType(scope);", "-\t\tif (this.resolvedType == null) return null;", "-", "+\t\tTypeBinding type = this.resolvedType = this.qualification.resolveType(scope);", "+\t\tif (type == null) return null;", "+\t\t// X.this is not a raw type as denoting enclosing instance", "+\t\tif (type.isRawType()) {", "+\t\t    RawTypeBinding rawType = (RawTypeBinding) type;", "+\t\t    type = this.resolvedType = rawType.type; // unwrap", "+\t\t}", "-\t\t\t&& this.currentCompatibleType != this.resolvedType) {", "+\t\t\t&& this.currentCompatibleType != type) {", "-\t\t\tscope.problemReporter().noSuchEnclosingInstance(this.resolvedType, this, false);", "-\t\t\treturn this.resolvedType;", "+\t\t\tscope.problemReporter().noSuchEnclosingInstance(type, this, false);", "+\t\t\treturn type;", "-\t\treturn this.resolvedType;", "+\t\treturn type;"]}], "num": 13317}
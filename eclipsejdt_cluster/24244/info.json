{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3600c7f120116266857a6d29e3d119e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "793481ae8d25cb0f871f2ade0c956120", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "59f6423cd622b0d720f99ad9e1b4c1b8377efe14", "commitAfterChange": "45797eb81fedd425de5e79dad7220a380a5e9acc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  protected void updateProblemsFor(String sourceLocation, CompilationResult result) throws CoreException", "signatureAfterChange": "  protected void updateProblemsFor(String sourceLocation, CompilationResult result) throws CoreException", "diff": ["-\tint problemCount = 0;", "-\tif (problems != null){", "-\t\tfor (int i = 0; i < problems.length; i++){", "-\t\t\tif (problems[i].getID() != IProblem.Task) problemCount++;", "-\t\t}", "+\tboolean hasNoProblems = problems == null;", "+\tfoundProblem : if (!hasNoProblems) {", "+\t\tfor (int i = 0, length = problems.length; i < length; i++)", "+\t\t\tif (problems[i].getID() != IProblem.Task) break foundProblem;", "+\t\thasNoProblems = true;", "-\tif (problemCount == 0)", "-\t\tif (markers.length == 0) return;", "+\tif (hasNoProblems && markers.length == 0) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe702d9e1f81101e60136f97ad23a949", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void checkComment()", "signatureAfterChange": " public void checkComment()", "diff": ["-\t\tint length = paramReferences == null ? 0 : paramReferences.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tthis.patternLocator.match(paramReferences[i], this.nodeSet);", "+\t\tif (paramReferences != null) {", "+\t\t\tfor (int i=0, length=paramReferences.length; i < length; i++) {", "+\t\t\t\tthis.patternLocator.match(paramReferences[i], this.nodeSet);", "+\t\t\t}", "-\t\tlength = paramTypeParameters == null ? 0 : paramTypeParameters.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tthis.patternLocator.match(paramTypeParameters[i], this.nodeSet);", "+\t\tif (paramTypeParameters != null) {", "+\t\t\tfor (int i=0, length=paramTypeParameters.length; i < length; i++) {", "+\t\t\t\tthis.patternLocator.match(paramTypeParameters[i], this.nodeSet);", "+\t\t\t}", "-\t\tlength = thrownExceptions == null ? 0 : thrownExceptions.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tthis.patternLocator.match(thrownExceptions[i], this.nodeSet);", "+\t\tif (thrownExceptions != null) {", "+\t\t\tfor (int i=0, length=thrownExceptions.length; i < length; i++) {", "+\t\t\t\tthis.patternLocator.match(thrownExceptions[i], this.nodeSet);", "+\t\t\t}", "-\t\tlength = references == null ? 0 : references.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tExpression reference = references[i];", "-\t\t\tif (reference instanceof TypeReference) {", "-\t\t\t\tTypeReference typeRef = (TypeReference) reference;", "-\t\t\t\tthis.patternLocator.match(typeRef, this.nodeSet);", "-\t\t\t} else if (reference instanceof JavadocFieldReference) {", "-\t\t\t\tJavadocFieldReference fieldRef = (JavadocFieldReference) reference;", "-\t\t\t\tthis.patternLocator.match(fieldRef, this.nodeSet);", "-\t\t\t\tif (fieldRef.receiver instanceof TypeReference && !fieldRef.receiver.isThis()) {", "-\t\t\t\t\tTypeReference typeRef = (TypeReference) fieldRef.receiver;", "+\t\tif (references != null) {", "+\t\t\tfor (int i=0, length=references.length; i < length; i++) {", "+\t\t\t\tExpression reference = references[i];", "+\t\t\t\tif (reference instanceof TypeReference) {", "+\t\t\t\t\tTypeReference typeRef = (TypeReference) reference;", "-\t\t\t\t}", "-\t\t\t} else if (reference instanceof JavadocMessageSend) {", "-\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) reference;", "-\t\t\t\tthis.patternLocator.match(messageSend, this.nodeSet);", "-\t\t\t\tif (messageSend.receiver instanceof TypeReference && !messageSend.receiver.isThis()) {", "-\t\t\t\t\tTypeReference typeRef = (TypeReference) messageSend.receiver;", "-\t\t\t\t\tthis.patternLocator.match(typeRef, this.nodeSet);", "-\t\t\t\t}", "-\t\t\t\tif (messageSend.arguments != null) {", "-\t\t\t\t\tfor (int a=0,al=messageSend.arguments.length; a<al; a++) {", "-\t\t\t\t\t\tJavadocArgumentExpression argument = (JavadocArgumentExpression) messageSend.arguments[a];", "-\t\t\t\t\t\tif (argument.argument != null && argument.argument.type != null) {", "-\t\t\t\t\t\t\tthis.patternLocator.match(argument.argument.type, this.nodeSet);", "+\t\t\t\t} else if (reference instanceof JavadocFieldReference) {", "+\t\t\t\t\tJavadocFieldReference fieldRef = (JavadocFieldReference) reference;", "+\t\t\t\t\tthis.patternLocator.match(fieldRef, this.nodeSet);", "+\t\t\t\t\tif (fieldRef.receiver instanceof TypeReference && !fieldRef.receiver.isThis()) {", "+\t\t\t\t\t\tTypeReference typeRef = (TypeReference) fieldRef.receiver;", "+\t\t\t\t\t\tthis.patternLocator.match(typeRef, this.nodeSet);", "+\t\t\t\t\t}", "+\t\t\t\t} else if (reference instanceof JavadocMessageSend) {", "+\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) reference;", "+\t\t\t\t\tthis.patternLocator.match(messageSend, this.nodeSet);", "+\t\t\t\t\tif (messageSend.receiver instanceof TypeReference && !messageSend.receiver.isThis()) {", "+\t\t\t\t\t\tTypeReference typeRef = (TypeReference) messageSend.receiver;", "+\t\t\t\t\t\tthis.patternLocator.match(typeRef, this.nodeSet);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (messageSend.arguments != null) {", "+\t\t\t\t\t\tfor (int a=0,al=messageSend.arguments.length; a<al; a++) {", "+\t\t\t\t\t\t\tJavadocArgumentExpression argument = (JavadocArgumentExpression) messageSend.arguments[a];", "+\t\t\t\t\t\t\tif (argument.argument != null && argument.argument.type != null) {", "+\t\t\t\t\t\t\t\tthis.patternLocator.match(argument.argument.type, this.nodeSet);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else if (reference instanceof JavadocAllocationExpression) {", "-\t\t\t\tJavadocAllocationExpression constructor = (JavadocAllocationExpression) reference;", "-\t\t\t\tthis.patternLocator.match(constructor, this.nodeSet);", "-\t\t\t\tif (constructor.type != null && !constructor.type.isThis()) {", "-\t\t\t\t\tthis.patternLocator.match(constructor.type, this.nodeSet);", "-\t\t\t\t}", "-\t\t\t\tif (constructor.arguments != null) {", "-\t\t\t\t\tfor (int a=0,al=constructor.arguments.length; a<al; a++) {", "-\t\t\t\t\t\tthis.patternLocator.match(constructor.arguments[a], this.nodeSet);", "-\t\t\t\t\t\tJavadocArgumentExpression argument = (JavadocArgumentExpression) constructor.arguments[a];", "-\t\t\t\t\t\tif (argument.argument != null && argument.argument.type != null) {", "-\t\t\t\t\t\t\tthis.patternLocator.match(argument.argument.type, this.nodeSet);", "+\t\t\t\t} else if (reference instanceof JavadocAllocationExpression) {", "+\t\t\t\t\tJavadocAllocationExpression constructor = (JavadocAllocationExpression) reference;", "+\t\t\t\t\tthis.patternLocator.match(constructor, this.nodeSet);", "+\t\t\t\t\tif (constructor.type != null && !constructor.type.isThis()) {", "+\t\t\t\t\t\tthis.patternLocator.match(constructor.type, this.nodeSet);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (constructor.arguments != null) {", "+\t\t\t\t\t\tfor (int a=0,al=constructor.arguments.length; a<al; a++) {", "+\t\t\t\t\t\t\tthis.patternLocator.match(constructor.arguments[a], this.nodeSet);", "+\t\t\t\t\t\t\tJavadocArgumentExpression argument = (JavadocArgumentExpression) constructor.arguments[a];", "+\t\t\t\t\t\t\tif (argument.argument != null && argument.argument.type != null) {", "+\t\t\t\t\t\t\t\tthis.patternLocator.match(argument.argument.type, this.nodeSet);", "+\t\t\t\t\t\t\t}"]}], "num": 24244}
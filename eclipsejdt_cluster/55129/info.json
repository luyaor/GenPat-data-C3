{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5bdf4df7786315b069b411e3f6e91d50", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f469000b64153055783c23090d770da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "eb71a6569553cf8d8553685f6e99ee5bc278eacc", "commitAfterChange": "15e3a9fc2ecd5761f01e0bac254435a2b7c9efda", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)", "signatureAfterChange": "  \tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)", "diff": ["-\tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary) {", "-\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "-\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX + libName;", "-\t\ttry {", "-\t\t\tString propertyValue = UserLibrary.serialize(entries, isSystemLibrary);", "-\t\t\tinstancePreferences.put(propertyName, propertyValue); // sends out a PreferenceChangeEvent (see", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// preferenceChange(...))", "-\t\t} catch (IOException e) {", "-\t\t\tUtil.log(e, \"Exception while serializing user library \" + libName); //$NON-NLS-1$", "-\t\t\treturn;", "+\tpublic void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)  {", "+\t\tsynchronized (this.userLibraries) {", "+\t\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "+\t\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "+\t\t\ttry {", "+\t\t\t\tString propertyValue = UserLibrary.serialize(entries, isSystemLibrary);", "+\t\t\t\tinstancePreferences.put(propertyName, propertyValue); // sends out a PreferenceChangeEvent (see preferenceChange(...))", "+\t\t\t} catch (IOException e) {", "+\t\t\t\tUtil.log(e, \"Exception while serializing user library \" + libName); //$NON-NLS-1$", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\ttry {", "+\t\t\t\tinstancePreferences.flush();", "+\t\t\t} catch (BackingStoreException e) {", "+\t\t\t\tUtil.log(e, \"Exception while saving user library \" + libName); //$NON-NLS-1$", "+\t\t\t}", "-\t\ttry {", "-\t\t\tinstancePreferences.flush();", "-\t\t} catch (BackingStoreException e) {", "-\t\t\tUtil.log(e, \"Exception while saving user library \" + libName); //$NON-NLS-1$", "-\t\t}", "-\t\t// No need to lock this.userLibraries since SetContainerOperation uses ISchedulingRule now.", "+\t\t// this.userLibraries was updated during the PreferenceChangeEvent (see preferenceChange(...))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fc72b59b58242b79b00cac9de568396", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "2fdac50d0a994a41e3b73d3202a0de983b014e1d", "commitAfterChange": "5291cd66203d5d42725b1c4b5cba50a5232bc244", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static void setUserLibraries(String[] newNames, UserLibrary[] newLibs, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \t \tpublic synchronized void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)", "diff": ["-\t */", "-\tpublic static void setUserLibraries(String[] newNames, UserLibrary[] newLibs, IProgressMonitor monitor) throws JavaModelException {", "-\t\tAssert.isTrue(newNames.length == newLibs.length, \"names and libraries should have the same length\"); //$NON-NLS-1$", "-\t\t", "-\t\tif (monitor == null) {", "-\t\t\tmonitor= new NullProgressMonitor();", "-\t\t}", "-\t\t", "-\t\ttry {", "-\t\t\tmonitor.beginTask(\"\", newNames.length);\t//$NON-NLS-1$", "-\t\t\tint last= newNames.length - 1;", "-\t\t\tfor (int i= 0; i < newLibs.length; i++) {", "-\t\t\t\tinternalSetUserLibrary(newNames[i], newLibs[i], i == last, true, new SubProgressMonitor(monitor, 1));", "-\t\t\t}", "-\t\t} finally {", "-\t\t\tmonitor.done();", "-\t\t}", "-\t}", "+\t", "+\tpublic synchronized void setUserLibrary(String libName, IClasspathEntry[] entries, boolean isSystemLibrary)  {", "+\t\tIEclipsePreferences instancePreferences = JavaModelManager.getJavaModelManager().getInstancePreferences();", "+\t\tString propertyName = CP_USERLIBRARY_PREFERENCES_PREFIX+libName;", "+\t\ttry {", "+\t\t\tString propertyValue = UserLibrary.serialize(entries, isSystemLibrary);", "+\t\t\tinstancePreferences.put(propertyName, propertyValue); // sends out a PreferenceChangeEvent (see preferenceChange(...))", "+\t\t} catch (IOException e) {", "+\t\t\tUtil.log(e, \"Exception while serializing user library \" + libName); //$NON-NLS-1$", "+\t\t\treturn;", "+\t\t}", "+\t\ttry {", "+\t\t\tinstancePreferences.flush();", "+\t\t} catch (BackingStoreException e) {", "+\t\t\tUtil.log(e, \"Exception while saving user library \" + libName); //$NON-NLS-1$", "+\t\t}", "+\t\t// this.userLibraries was updated during the PreferenceChangeEvent (see preferenceChange(...))", "+\t}"]}], "num": 55129}
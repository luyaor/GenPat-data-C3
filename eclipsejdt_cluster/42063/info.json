{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a94ec496dbbf2154cd05c5f917b91a5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "010e490dde429fef8fe98e395fb30ffa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/CommentTestCase.java", "commitBeforeChange": "7fcb2b2c0d1a3fd50800a5f58f5f92f3801e198b", "commitAfterChange": "c2b58c4eb72d10d22f987dbf463376e60403ddef", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \tprotected String testFormat(String text, int offset, int length, int kind, int indentationLevel)", "signatureAfterChange": "  \tprotected String testFormat(String text, int offset, int length, int kind)", "diff": ["+\t\treturn testFormat(text, offset, length, kind, getUserOptions());", "+\t}", "-\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0554fff08edab8e77e8bad965a50590a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "c1214b6b7704c3bec1f1750c6983e09a52efaa01", "commitAfterChange": "a5f15775fe7fcb24ae5a0930116a996c10a2359a", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["-\t\t\t\t\tTypeVariableBinding typeVariableBinding = (TypeVariableBinding) this.binding;", "-\t\t\t\t\tBinding declaringElement = typeVariableBinding.declaringElement;", "-\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t\tbuffer.append(typeVariableBinding.sourceName);", "-\t\t\t\t\tbuffer.append(':');", "-\t\t\t\t\tif (declaringElement instanceof org.eclipse.jdt.internal.compiler.lookup.TypeBinding) {", "-\t\t\t\t\t\tbuffer.append(this.resolver.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) declaringElement).getKey());", "-\t\t\t\t\t} else if (declaringElement instanceof org.eclipse.jdt.internal.compiler.lookup.MethodBinding) {", "-\t\t\t\t\t\tbuffer.append(getNonRecursiveKey(this.resolver.getMethodBinding((org.eclipse.jdt.internal.compiler.lookup.MethodBinding) declaringElement)));\t\t\t\t\t\t", "-\t\t\t\t\t}", "-\t\t\t\t\treturn String.valueOf(buffer);", "+\t\t\t\t\treturn getTypeVariableKey(true/*include declaring element*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a77489973310ee3748450d428d184654", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "6b6471423b89c70a33d53654f3143292c15724dc", "commitAfterChange": "dbb5484f1c0506305bb2de3acc0db3501ec7c329", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 15, "signatureBeforeChange": " private static void initVersion(StringBuffer buffer)", "signatureAfterChange": " private static void initVersion()", "diff": ["-private static void initVersion(StringBuffer buffer) {", "-\tBufferedReader buildnotesReader;", "-    try {", "-\t\tURL platformURL = Platform.getBundle(\"org.eclipse.jdt.core\").getEntry(\"/\");", "-\t\tString path = new File(FileLocator.toFileURL(platformURL).getFile(), \"buildnotes_jdt-core.html\").getAbsolutePath();", "-\t    buildnotesReader = new BufferedReader(new InputStreamReader(new FileInputStream(path)));", "-    } catch (IOException ioe) {", "-\t    ioe.printStackTrace();", "-\t    return;", "-    }", "-\tString line;", "-\tString patch_line = null;", "-\tJDT_CORE_HEAD = true;", "-\ttry {", "-\t\twhile ((line = buildnotesReader.readLine()) != null) {", "-\t\t\tif (line.startsWith(\"<a name=\\\"\")) {", "-\t\t\t\tboolean first = JDT_CORE_VERSION == null;", "-\t\t\t\tJDT_CORE_VERSION = line.substring(line.indexOf('\"')+1, line.lastIndexOf('\"'));", "-\t\t\t\tif (!first) break;", "-\t\t\t} else if (line.startsWith(\"Eclipse SDK \")) {", "-\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(line);", "-\t\t\t\ttokenizer.nextToken(); // 'Eclipse'", "-\t\t\t\ttokenizer.nextToken(); // 'SDK'", "-\t\t\t\tString milestone = tokenizer.nextToken();", "-\t\t\t\tECLIPSE_VERSION = \"v\"+milestone.charAt(0)+milestone.charAt(2);", "-\t\t\t\tECLIPSE_MILESTONE = milestone.substring(3);", "-\t\t\t\ttokenizer.nextToken(); // '-'", "-\t\t\t\tJDT_CORE_HEAD = tokenizer.nextToken().equals(\"%date%\");", "-\t\t\t} else if (line.startsWith(\"<h2>What's new\")) {", "-\t\t\t\tline = buildnotesReader.readLine();", "-\t\t\t\tif (line.startsWith(\"Patch\")) {", "-\t\t\t\t\tpatch_line = line;", "+private static void initVersion() {", "+\tif (JDT_CORE_VERSION == null) {", "+\t\tBufferedReader buildnotesReader;", "+\t    try {", "+\t\t\tURL platformURL = Platform.getBundle(\"org.eclipse.jdt.core\").getEntry(\"/\");", "+\t\t\tString path = new File(FileLocator.toFileURL(platformURL).getFile(), \"buildnotes_jdt-core.html\").getAbsolutePath();", "+\t\t    buildnotesReader = new BufferedReader(new InputStreamReader(new FileInputStream(path)));", "+\t    } catch (IOException ioe) {", "+\t\t    ioe.printStackTrace();", "+\t\t    return;", "+\t    }", "+\t\tString line;", "+\t\tJDT_CORE_HEAD = true;", "+\t\ttry {", "+\t\t\twhile ((line = buildnotesReader.readLine()) != null) {", "+\t\t\t\tif (line.startsWith(\"<a name=\\\"\")) {", "+\t\t\t\t\tboolean first = JDT_CORE_VERSION == null;", "+\t\t\t\t\tJDT_CORE_VERSION = line.substring(line.indexOf('\"')+1, line.lastIndexOf('\"'));", "+\t\t\t\t\tif (!first) break;", "+\t\t\t\t} else if (line.startsWith(\"Eclipse SDK \")) {", "-\t\t\t\t\ttokenizer.nextToken(); // 'Patch'", "-\t\t\t\t\tPATCH_VERSION = tokenizer.nextToken();", "-\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\t\tPATCH_BUG = tokenizer.nextToken();", "-\t\t\t\t\t}", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tInteger.parseInt(PATCH_BUG);", "-\t\t\t\t\t}", "-\t\t\t\t\tcatch (NumberFormatException nfe) {", "-\t\t\t\t\t\t// try to split", "-\t\t\t\t\t\tStringTokenizer bugTokenizer = new StringTokenizer(PATCH_BUG, \"+\");", "+\t\t\t\t\ttokenizer.nextToken(); // 'Eclipse'", "+\t\t\t\t\ttokenizer.nextToken(); // 'SDK'", "+\t\t\t\t\tString milestone = tokenizer.nextToken();", "+\t\t\t\t\tECLIPSE_VERSION = \"v\"+milestone.charAt(0)+milestone.charAt(2);", "+\t\t\t\t\tECLIPSE_MILESTONE = milestone.substring(3);", "+\t\t\t\t\ttokenizer.nextToken(); // '-'", "+\t\t\t\t\tJDT_CORE_HEAD = tokenizer.nextToken().equals(\"%date%\");", "+\t\t\t\t} else if (line.startsWith(\"<h2>What's new\")) {", "+\t\t\t\t\tline = buildnotesReader.readLine();", "+\t\t\t\t\tif (line.startsWith(\"Patch\")) {", "+\t\t\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(line);", "+\t\t\t\t\t\ttokenizer.nextToken(); // 'Patch'", "+\t\t\t\t\t\tPATCH_VERSION = tokenizer.nextToken();", "+\t\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\t\t\tPATCH_BUG = tokenizer.nextToken();", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\twhile (bugTokenizer.hasMoreTokens()) {", "-\t\t\t\t\t\t\t\tInteger.parseInt(bugTokenizer.nextToken());", "+\t\t\t\t\t\t\tInteger.parseInt(PATCH_BUG);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcatch (NumberFormatException nfe) {", "+\t\t\t\t\t\t\t// try to split", "+\t\t\t\t\t\t\tStringTokenizer bugTokenizer = new StringTokenizer(PATCH_BUG, \"+\");", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\twhile (bugTokenizer.hasMoreTokens()) {", "+\t\t\t\t\t\t\t\t\tInteger.parseInt(bugTokenizer.nextToken());", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tcatch (NumberFormatException nfe2) {", "+\t\t\t\t\t\t\t\tSystem.err.println(\"Invalid patch bug number noticed in JDT/Core buildnotes: \"+PATCH_BUG);", "-\t\t\t\t\t\tcatch (NumberFormatException nfe2) {", "-\t\t\t\t\t\t\tSystem.err.println(\"Invalid patch bug number noticed in JDT/Core buildnotes: \"+PATCH_BUG);", "-\t\t\t\t\t\t}", "+\t\t\t\t\tif (!JDT_CORE_HEAD) break;", "-\t\t\t\tif (!JDT_CORE_HEAD) break;", "+\t\t} catch (Exception e) {", "+\t\t\ttry {", "+\t\t        buildnotesReader.close();", "+\t        } catch (IOException ioe) {", "+\t\t        ioe.printStackTrace();", "+\t        }", "-\t} catch (Exception e) {", "-\t\ttry {", "-\t        buildnotesReader.close();", "-        } catch (IOException ioe) {", "-\t        ioe.printStackTrace();", "-        }", "-", "-\t// Log version info", "-\tbuffer.append(\"Version   : \");", "-\tif (PATCH_BUG != null) {", "-\t\tbuffer.append('\\'');", "-\t\tbuffer.append(patch_line);", "-\t\tbuffer.append(\"' applied on \");", "-\t}", "-\tif (JDT_CORE_HEAD) {", "-\t\tbuffer.append(\"HEAD on top of \");", "-\t}", "-\tbuffer.append(JDT_CORE_VERSION);", "-\tbuffer.append(LINE_SEPARATOR);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa12b65e18279d20d03fc6d6e42485e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "9a099ab7eaca6de468f171f604d52045eb064822", "commitAfterChange": "245938f53ddff468739c34085f55dc93baea5c7e", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": " public static String getOutputDirectory()", "signatureAfterChange": " public static String getOutputDirectory()", "diff": ["-\tString container = System.getProperty(\"jdt.test.output_directory\");", "-\tif (container == null){", "-\t\tcontainer = System.getProperty(\"user.home\");", "-\t\tif (container == null){", "-\t\t\treturn null;", "-\t\t}", "-\t}", "-\tif (Character.isLowerCase(container.charAt(0)) && ", "-\t\t\tcontainer.charAt(1) == ':') {", "-\t\treturn toNativePath(Character.toUpperCase(container.charAt(0))", "-\t\t\t\t+ container.substring(1)) + File.separator + OUTPUT_DIRECTORY;", "-\t}", "-\treturn toNativePath(container) + File.separator + OUTPUT_DIRECTORY;", "+\treturn OUTPUT_DIRECTORY;"]}], "num": 42063}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b7465627551e45737830f699cd3e15d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52115ed08d3148c9b3aef0c47cd2fdc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "78c62e3a4157070f714848f4de312a55f14f5144", "commitAfterChange": "fb48e11da0ebe84c63fab7b3cb5afd39c0ba6101", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic String toString()", "signatureAfterChange": " \tpublic String toString()", "diff": ["-                return new String(CharOperation.concat(WILDCARD_NAME, WILDCARD_EXTENDS, this.bound.debugName().toCharArray()));", "+            \tif (this.otherBounds == null)", "+                \treturn new String(CharOperation.concat(WILDCARD_NAME, WILDCARD_EXTENDS, this.bound.debugName().toCharArray()));", "+            \tStringBuffer buffer = new StringBuffer(this.bound.debugName());", "+            \tfor (int i = 0, length = this.otherBounds.length; i < length; i++) {", "+            \t\tbuffer.append('&').append(this.otherBounds[i].debugName());", "+            \t}", "+            \treturn buffer.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "996a7d8432c1bd63e43d49603ccb1e83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "0be5d06687e970925fd56f686bb007a501207716", "commitAfterChange": "d8a456bd9b26260c97b05c5b9053ba80ab69b578", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void testClasspathNoChanges() throws CoreException", "signatureAfterChange": " public void testClasspathNoChanges() throws CoreException", "diff": ["-\t\tIJavaProject classFileProject= this.createJavaProject(\"P\", new String[] {\"\"}, \"\");", "-\t\tIClasspathEntry[] oldClasspath= classFileProject.getRawClasspath();", "+\t\tIJavaProject p = this.createJavaProject(\"P\", new String[] {\"\"}, \"\");", "+\t\tIClasspathEntry[] oldClasspath= p.getRawClasspath();", "-\t\tclassFileProject.setRawClasspath(oldClasspath, null);", "-\t\tassertTrue(\"No deltas should be generated for the same classpath\", ", "-\t\t\tthis.deltaListener.deltas.length == 0);", "+\t\tp.setRawClasspath(oldClasspath, null);", "+", "+", "+//\t\ttry {", "+//\t\t\tjava.io.File file = p.getProject().getFile(JavaProject.CLASSPATH_FILENAME).getLocation().toFile();", "+//\t\t\tif (file.exists()){", "+//\t\t\t\tchar[] classpath = org.eclipse.jdt.internal.compiler.util.Util.getFileCharContent(file, \"UTF-8\");", "+//\t\t\t\tSystem.out.println(new String(classpath));", "+//\t\t\t}", "+//\t\t} catch(java.io.IOException e){", "+//\t\t}", "+", "+\t\tStringBuffer buffer = new StringBuffer(10);", "+\t\tfor (int i = 0; i < this.deltaListener.deltas.length; i++){", "+\t\t\tbuffer.append(this.deltaListener.deltas[i].toString()).append('\\n');", "+\t\t}", "+\t\tassertEquals(\"No deltas should be generated for the same classpath\", \"\", buffer.toString());"]}], "num": 66119}
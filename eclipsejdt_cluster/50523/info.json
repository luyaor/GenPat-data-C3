{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d0b72d72fdcdb489fc50cb2a54f1be0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e420c9b088b3fcc4e9d89251bd96c13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "d6d09dea522392b75a09fab15337bbc09b94d77c", "commitAfterChange": "92a1bed0a525f065b3afa8ca4370b68c7dfc54cc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeDeclaration convert( \t\tISourceType sourceType, \t\tboolean needFieldsAndMethods, \t\tboolean needMemberTypes, \t\tCompilationResult compilationResult)", "signatureAfterChange": " \tprivate TypeDeclaration convert( \t\tISourceType sourceType, \t\tboolean needFieldsAndMethods, \t\tboolean needMemberTypes, \t\tCompilationResult compilationResult)", "diff": ["-\t\t\tint neededCount = 1;", "-\t\t\tfor (int i = 0; i < sourceMethodCount; i++) {", "-\t\t\t\tif (sourceMethods[i].isConstructor()) {", "-\t\t\t\t\tneededCount = 0;", "-\t\t\t\t\t// Does not need the extra constructor since one constructor already exists.", "-\t\t\t\t\tbreak;", "+\t\t\tint neededCount = 0;", "+\t\t\tif (!type.isInterface()) {", "+\t\t\t\tneededCount = 1;", "+\t\t\t\tfor (int i = 0; i < sourceMethodCount; i++) {", "+\t\t\t\t\tif (sourceMethods[i].isConstructor()) {", "+\t\t\t\t\t\tneededCount = 0;", "+\t\t\t\t\t\t// Does not need the extra constructor since one constructor already exists.", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a14dbfa45e4a0765c0e24201d94920a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "64c036feb42317b40c2a6fddd8691411ae5f1d4f", "commitAfterChange": "a01e26a8e11c8b85d38d6d9a9bf9ac4143920bf1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate TypeParameter createTypeParameter(char[] typeParameterName, char[][] typeParameterBounds, int start, int end)", "signatureAfterChange": "  \tprivate TypeParameter createTypeParameter(char[] typeParameterName, char[][] typeParameterBounds, int start, int end)", "diff": ["-\t\t\tparameter.bounds = new TypeReference[length];", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tTypeReference bound = createTypeReference(typeParameterBounds[i], start, end);", "-\t\t\t\tbound.bits |= ASTNode.IsSuperType;", "-\t\t\t\tparameter.bounds[i] = bound;", "+\t\t\tif (length > 0) {", "+\t\t\t\tparameter.type = createTypeReference(typeParameterBounds[0], start, end);", "+\t\t\t\tif (length > 1) {", "+\t\t\t\t\tparameter.bounds = new TypeReference[length-1];", "+\t\t\t\t\tfor (int i = 1; i < length; i++) {", "+\t\t\t\t\t\tTypeReference bound = createTypeReference(typeParameterBounds[i], start, end);", "+\t\t\t\t\t\tbound.bits |= ASTNode.IsSuperType;", "+\t\t\t\t\t\tparameter.bounds[i-1] = bound;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af8710f273e3968afd0d735aa063f54e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeDeclaration convert(ISourceType sourceType, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate TypeDeclaration convert(ISourceType sourceType, CompilationResult compilationResult)", "diff": ["-\t\ttype.superInterfaces = new TypeReference[interfaceCount];", "-\t\tfor (int i = 0; i < interfaceCount; i++) {", "-\t\t\ttype.superInterfaces[i] = createTypeReference(interfaceNames[i], start, end);", "-\t\t\ttype.superInterfaces[i].bits |= ASTNode.IsSuperType;", "+\t\tif (interfaceCount > 0) {", "+\t\t\ttype.superInterfaces = new TypeReference[interfaceCount];", "+\t\t\tfor (int i = 0; i < interfaceCount; i++) {", "+\t\t\t\ttype.superInterfaces[i] = createTypeReference(interfaceNames[i], start, end);", "+\t\t\t\ttype.superInterfaces[i].bits |= ASTNode.IsSuperType;", "+\t\t\t}"]}], "num": 50523}
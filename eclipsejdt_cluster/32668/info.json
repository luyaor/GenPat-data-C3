{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "61458459e5610380412326511d46de6a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4b162018ce376d01615df2a89659d5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "9506194ecd38aa227915d4452e8097fba7bd6231", "commitAfterChange": "27a13e874a8de3a8e74e5e1ab65479e9dace8b8c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "signatureAfterChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "diff": ["-\t\t\treturn new TypeBound((InferenceVariable)subCandidate, superCandidate, SUBTYPE);", "+\t\t\treturn new TypeBound((InferenceVariable)subCandidate, superCandidate, SUBTYPE, this.isSoft);", "-\t\t\treturn new TypeBound((InferenceVariable)superCandidate, subCandidate, SUPERTYPE); // normalize to have variable on LHS", "+\t\t\treturn new TypeBound((InferenceVariable)superCandidate, subCandidate, SUPERTYPE, this.isSoft); // normalize to have variable on LHS", "-\t\t\t\t\treturn new ConstraintTypeFormula(sPrime, tPrime, SUBTYPE);", "+\t\t\t\t\treturn new ConstraintTypeFormula(sPrime, tPrime, SUBTYPE, this.isSoft);", "-\t\t\t\t\treturn new ConstraintTypeFormula(subCandidate, variable.bound, SUBTYPE);", "+\t\t\t\t\treturn new ConstraintTypeFormula(subCandidate, variable.bound, SUBTYPE, this.isSoft);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8511fc408f7fb103a89d0c7496ef014", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "9506194ecd38aa227915d4452e8097fba7bd6231", "commitAfterChange": "27a13e874a8de3a8e74e5e1ab65479e9dace8b8c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate Object reduceTypeEquality()", "signatureAfterChange": "  \tprivate Object reduceTypeEquality()", "diff": ["-\t\t\t\t\treturn new ConstraintTypeFormula(leftWC.bound, rightWC.bound, SAME);", "+\t\t\t\t\treturn new ConstraintTypeFormula(leftWC.bound, rightWC.bound, SAME, this.isSoft);", "-\t\t\t\t\treturn new TypeBound((InferenceVariable) this.left, this.right, SAME);", "+\t\t\t\t\treturn new TypeBound((InferenceVariable) this.left, this.right, SAME, this.isSoft);", "-\t\t\t\t\treturn new TypeBound((InferenceVariable) this.right, this.left, SAME);", "+\t\t\t\t\treturn new TypeBound((InferenceVariable) this.right, this.left, SAME, this.isSoft);", "-\t\t\t\t\t\tconstraints[i] = new ConstraintTypeFormula(leftParams[i], rightParams[i], SAME);", "+\t\t\t\t\t\tconstraints[i] = new ConstraintTypeFormula(leftParams[i], rightParams[i], SAME, this.isSoft);", "-\t\t\t\t\treturn new ConstraintTypeFormula(this.left.leafComponentType(), this.right.leafComponentType(), SAME);", "+\t\t\t\t\treturn new ConstraintTypeFormula(this.left.leafComponentType(), this.right.leafComponentType(), SAME, this.isSoft);"]}], "num": 32668}
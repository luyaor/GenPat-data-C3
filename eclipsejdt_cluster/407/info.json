{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce61567a4c4136601d4aa0332efc2bae", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2085346d4782b0f443f5b6415fe1f62e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "f427d3141850bb05b4f61e7a5e8cfb86bf8a4b90", "commitAfterChange": "bdac2d6f93f2862f6a2ad385b856d2f81a163437", "methodNumberBeforeChange": 142, "methodNumberAfterChange": 144, "signatureBeforeChange": " public void test122_unusual_classpath()", "signatureAfterChange": " public void test123_classpath()", "diff": ["-public void test122_unusual_classpath(){", "-\tthis.runConformTest(", "-\t\t\t\"X.java\",", "-\t\t\t\"/** */\\n\" + ", "-\t\t\t\"public class X {\\n\" + ", "-\t\t\t\"}\",", "-        \"\\\"\" + OUTPUT_DIR +  File.separator + \"X.java\\\"\"", "-        + \" -1.5 -g -preserveAllLocals\"", "-        + \" -cp \\\"\" + OUTPUT_DIR + \"[+**/OK2;~**/Warn;-KO]\"", "-        + \"\\\"\" + File.pathSeparator + File.pathSeparator + File.pathSeparator", "-        + \" -proceedOnError -referenceInfo -d \\\"\" + OUTPUT_DIR + \"\\\"\",", "-        \"\",", "-        \"\",", "-        true);", "+// without any error message though)", "+public void test123_classpath(){", "+\tString cp = OUTPUT_DIR + \"[+OK2\" + File.pathSeparator + File.pathSeparator + ", "+\t\t\tFile.pathSeparator + \"~Warn\" + File.pathSeparator + \"-KO]\";", "+\trunClasspathTest(", "+\t\tcp, ", "+\t\tnull,", "+\t\tnull);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e2e34d48c1e23bfea910c91d9cbb195", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_5.java", "commitBeforeChange": "7aa41fe639eb46a740b35e612973cada9ba8267f", "commitAfterChange": "7ec8f457fa5afa1822c5c5a2c51b29731a82c4ce", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 103, "signatureBeforeChange": " \tpublic void testBug209936a()", "signatureAfterChange": " \t \tpublic void testBug209936b()", "diff": ["-\t */", "-\tpublic void testBug209936a() {", "-\t\treportMissingJavadocComments = CompilerOptions.IGNORE;", "-\t\treportMissingJavadocCommentsVisibility = CompilerOptions.IGNORE;", "-\t\trunNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"p/X.java\",", "-\t\t\t\t\"package p;\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"public abstract class X extends Y {\\n\" + ", "-\t\t\t\t\"\tprotected class A extends Member {\\n\" + ", "-\t\t\t\t\"\t\t/**\\n\" + ", "-\t\t\t\t\"\t\t * @see Member#foo(Object, Object)\\n\" + ", "-\t\t\t\t\"\t\t */\\n\" + ", "-\t\t\t\t\"\t\tpublic void foo(Object source, Object data) {}\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\",", "-\t\t\t\t\"p/Y.java\",", "-\t\t\t\t\"package p;\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"import p1.Z;\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"public abstract class Y extends Z<Object> {\\n\" + ", "-\t\t\t\t\"}\",", "-\t\t\t\t\"p1/Z.java\",", "-\t\t\t\t\"package p1;\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"public abstract class Z<T> {\\n\" + ", "-\t\t\t\t\"\tprotected class Member {\\n\" + ", "-\t\t\t\t\"\t\tprotected void foo(Object source, Object data) {\\n\" + ", "-\t\t\t\t\"\t\t}\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in p\\\\X.java (at line 6)\\n\" + ", "-\t\t\t\"\t* @see Member#foo(Object, Object)\\n\" + ", "-\t\t\t\"\t              ^^^\\n\" + ", "-\t\t\t\"Javadoc: The method foo(Object, Object) from the type Z<T>.Member is not visible\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in p\\\\X.java (at line 8)\\n\" + ", "-\t\t\t\"\tpublic void foo(Object source, Object data) {}\\n\" + ", "-\t\t\t\"\t                       ^^^^^^\\n\" + ", "-\t\t\t\"Javadoc: Missing tag for parameter source\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in p\\\\X.java (at line 8)\\n\" + ", "-\t\t\t\"\tpublic void foo(Object source, Object data) {}\\n\" + ", "-\t\t\t\"\t                                      ^^^^\\n\" + ", "-\t\t\t\"Javadoc: Missing tag for parameter data\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "-\t}", "+\t", "+\tpublic void testBug209936b() {", "+\t\treportMissingJavadocCommentsVisibility = CompilerOptions.WARNING;", "+\t\trunNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"p/X.java\",", "+\t\t\t\t\"package p;\\n\" + ", "+\t\t\t\t\"public abstract class X extends Y {\\n\" + ", "+\t\t\t\t\"\tprotected class A extends Member {\\n\" + ", "+\t\t\t\t\"\t\t/**\\n\" + ", "+\t\t\t\t\"\t\t * @see Member#foo(Object, Object)\\n\" + ", "+\t\t\t\t\"\t\t */\\n\" + ", "+\t\t\t\t\"\t\tpublic void foo(Object source, Object data) {}\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t\t\t\"p/Y.java\",", "+\t\t\t\t\"package p;\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"import p1.Z;\\n\" + ", "+\t\t\t\t\"public abstract class Y extends Z<Object> {}\",", "+\t\t\t\t\"p1/Z.java\",", "+\t\t\t\t\"package p1;\\n\" + ", "+\t\t\t\t\"public abstract class Z<T> {\\n\" + ", "+\t\t\t\t\"\tprotected class Member {\\n\" + ", "+\t\t\t\t\"\t\tprotected void foo(Object source, Object data) {}\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in p\\\\X.java (at line 5)\\n\" + ", "+\t\t\t\"\t* @see Member#foo(Object, Object)\\n\" + ", "+\t\t\t\"\t       ^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f8c800f48e2661800f20d2928216706", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "9b8f1dcd38c87057db028efdf3b2fc2a80ef104e", "commitAfterChange": "6d4dee66f18491d80f490f87faf063aca0dd04ee", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 111, "signatureBeforeChange": " \tpublic void testBug86380_Type() throws CoreException", "signatureAfterChange": " \tpublic void testBug86380_Type() throws CoreException", "diff": ["-\t\t\t\" * Valid javadoc.\\n\" + ", "-\t\t\t\" * @see Test\\n\" + ", "-\t\t\t\" * @see Unknown\\n\" + ", "-\t\t\t\" * @see Test#foo()\\n\" + ", "-\t\t\t\" * @see Test#unknown()\\n\" + ", "-\t\t\t\" * @see Test#field\\n\" + ", "-\t\t\t\" * @see Test#unknown\\n\" + ", "-\t\t\t\" * @param unexpected\\n\" + ", "-\t\t\t\" * @throws unexpected\\n\" + ", "-\t\t\t\" * @return unexpected \\n\" + ", "+\t\t\t\" * @see Annot#field\\n\" + ", "+\t\t\t\"@Annot(value=11)\\n\" + ", "-\t\t\t\"/**\\n\" + ", "-\t\t\t\" * Invalid javadoc\\n\" + ", "-\t\t\t\" */\\n\" + ", "-\t\t\t\"public class Test {\\n\" + ", "-\t\t\t\"\tpublic int field;\\n\" + ", "+\t\t\t\"@Annot(12) public class Test {\\n\" + ", "+\t\t\t\"\tpublic int field = Annot.field;\\n\" + ", "-\t\tIType type = workingCopies[1].getType(\"Test\");", "+\t\tICompilationUnit unit = getCompilationUnit(\"JavaSearchBugs\", \"src\", \"b86380\", \"Annot.java\");", "+\t\tIType type = unit.getType(\"Annot\");", "-\t\t\t\"src/b86380/package-info.java b86380.package-info [Test] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/b86380/package-info.java b86380.package-info [Test] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/b86380/package-info.java b86380.package-info [Test] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/b86380/package-info.java b86380.package-info [Test] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/b86380/package-info.java b86380.package-info [Test] EXACT_MATCH INSIDE_JAVADOC\"", "+\t\t\t\"src/b86380/Test.java b86380.Test [Annot] EXACT_MATCH OUTSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/b86380/Test.java b86380.Test.field [Annot] EXACT_MATCH OUTSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/b86380/package-info.java b86380.package-info [Annot] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/b86380/package-info.java b86380.package-info [Annot] EXACT_MATCH OUTSIDE_JAVADOC\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b817e2667dd62fd2fa65ae6f80049b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "56dbcf2a723a2496d9406a9295b337384afdff1d", "commitAfterChange": "356ef270158cfd8719df7baf47652712175545cd", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void _test036()", "signatureAfterChange": " \tpublic void test036()", "diff": ["-\tpublic void _test036() {", "+\tpublic void test036() {", "-\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "-\t\t\t\"\timport static p.A.CONSTANT_I;\\n\" + ", "-\t\t\t\"\t              ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The type I is not visible\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tstatic int i = p.A.CONSTANT_I;\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The type I is not visible\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\"5. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\tstatic int m = CONSTANT_I;\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^\\n\" + ", "-\t\t\t\"CONSTANT_I cannot be resolved\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"6. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85bd09cc3ac7b67855080829baa428e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "c31c921d319cbf1346e5bfb26cf42ff15297484d", "commitAfterChange": "2becf6dcab514ae8708935b2b42eed94f2bad821", "methodNumberBeforeChange": 161, "methodNumberAfterChange": 161, "signatureBeforeChange": " \tpublic void test050b()", "signatureAfterChange": " \tpublic void test050b()", "diff": ["-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "-\t\t\t\"\tY foo(Object o) {  return null; } // duplicate\\n\" +", "-\t\t\t\"\t  ^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Duplicate method foo(Object) in type X.C1\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 11)\\n\" +", "-\t\t\t\"\tA<Y> foo(Object o) {  return null; } // duplicate\\n\" +", "-\t\t\t\"\t     ^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Duplicate method foo(Object) in type X.C3\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 12)\\n\" +", "+\t\t\t\"2. ERROR in X.java (at line 12)\\n\" +", "-\t\t\t\"5. ERROR in X.java (at line 15)\\n\" +", "-\t\t\t\"\tY foo(Object o) {  return null; } // duplicate\\n\" +", "-\t\t\t\"\t  ^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Duplicate method foo(Object) in type X.C4\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"6. ERROR in X.java (at line 16)\\n\" +", "+\t\t\t\"3. ERROR in X.java (at line 16)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85ecd6685c6dd61b4b959a0c44f424b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tpublic void testStringPatternNestedParam05() throws CoreException", "signatureAfterChange": " \tpublic void testStringNestedMultipleArguments01() throws CoreException", "diff": ["-\tpublic void testStringPatternNestedParam05() throws CoreException {", "-\t\tIJavaSearchScope scope = getJavaSearchScope15(\"g3.t\", true /* add all subpackages */);", "+\t// String pattern with nested multiple type arguments", "+\tpublic void testStringNestedMultipleArguments01() throws CoreException {", "+\t\tIJavaSearchScope scope = getJavaSearchCUScope(\"JavaSearch15\", \"g3/t/ref\", \"R1.java\");", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_wld [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_obj [GM<Object, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_wld [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_obj [GM<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_wld [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_obj [GM<Object, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_wld [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_obj [GM<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_wld [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_obj [GM<Object, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_wld [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [GM<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_obj [GM<Object, Exception, RuntimeException>] EXACT_MATCH\",", "+\t\t\t\"src/g3/t/ref/R1.java [GM] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_wld [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM<GM<?, ?, ?>,GM<?, ?, ?>,GM<?, ?, ?>>] ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_obj [GM<Object, Exception, RuntimeException>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_wld [GM<GS<?>, GS<?>, GS<?>>] ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_www [GM<GS<?>, GS<GS<?>>, GS<GS<GS<?>>>>] ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_obj [GM<GS<Object>, GS<? extends Throwable>, GS<? super RuntimeException>>] ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_wld [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [GM<g3.t.def.GM<?, ?, ?>, g3.t.def.GM<?, ?, ?>, g3.t.def.GM<?, ?, ?>>] ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [GM<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_obj [GM<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_wld [GM<g3.t.def.GS<?>, g3.t.def.GS<?>, g3.t.def.GS<?>>] ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_www [GM<g3.t.def.GS<?>, g3.t.def.GS<g3.t.def.GS<?>>, g3.t.def.GS<g3.t.def.GS<g3.t.def.GS<?>>>>] ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_obj [GM<g3.t.def.GS<java.lang.Object>, g3.t.def.GS<? extends java.lang.Throwable>, g3.t.def.GS<? super java.lang.RuntimeException>>] ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "941f95cd92f7e1a41f23fe8130b430b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b2e6c1de11c5945ad0058b70deb343fdac78d55b", "commitAfterChange": "f51fdf456ddb08b822391ad1e88baeaffa718152", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": " \tpublic void test080()", "signatureAfterChange": " \tpublic void test080()", "diff": ["-\t\t\t\t\"1. ERROR in test\\\\X.java (at line 2)\\n\" + ", "-\t\t\t\t\"\tpublic class X<A extends X1<X2<X3<String>>> {}\\n\" + ", "-\t\t\t\t\"\t                                        ^^^\\n\" + ", "-\t\t\t\t\"Syntax error, insert \\\">\\\" to complete ReferenceType1\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"2. ERROR in test\\\\X.java (at line 2)\\n\" + ", "-\t\t\t\t\"\tpublic class X<A extends X1<X2<X3<String>>> {}\\n\" + ", "-\t\t\t\t\"\t                                        ^^^\\n\" + ", "-\t\t\t\t\"Syntax error, insert \\\"Dimensions\\\" to complete ArrayType\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"3. ERROR in test\\\\X.java (at line 3)\\n\" + ", "-\t\t\t\t\"\tclass X1<A extends X2<X3<String>> {}\\n\" + ", "-\t\t\t\t\"\t                               ^^\\n\" + ", "-\t\t\t\t\"Syntax error, insert \\\">\\\" to complete ReferenceType1\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"4. ERROR in test\\\\X.java (at line 3)\\n\" + ", "-\t\t\t\t\"\tclass X1<A extends X2<X3<String>> {}\\n\" + ", "-\t\t\t\t\"\t                               ^^\\n\" + ", "-\t\t\t\t\"Syntax error, insert \\\"Dimensions\\\" to complete ArrayType\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"5. ERROR in test\\\\X.java (at line 4)\\n\" + ", "-\t\t\t\t\"\tclass X2<A extends X3<String> {}\\n\" + ", "-\t\t\t\t\"\t                            ^\\n\" + ", "-\t\t\t\t\"Syntax error, insert \\\">\\\" to complete ReferenceType1\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"6. ERROR in test\\\\X.java (at line 4)\\n\" + ", "-\t\t\t\t\"\tclass X2<A extends X3<String> {}\\n\" + ", "-\t\t\t\t\"\t                            ^\\n\" + ", "-\t\t\t\t\"Syntax error, insert \\\"Dimensions\\\" to complete ArrayType\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"7. ERROR in test\\\\X.java (at line 5)\\n\" + ", "-\t\t\t\t\"\tclass X3<A {}\\n\" + ", "-\t\t\t\t\"\t         ^\\n\" + ", "-\t\t\t\t\"Syntax error on token \\\"A\\\", > expected after this token\\n\" + ", "-\t\t\t\t\"----------\\n\"", "+\t\t\t\"1. ERROR in test\\\\X.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic class X<A extends X1<X2<X3<String>>> {}\\n\" + ", "+\t\t\t\"\t                                        ^^^\\n\" + ", "+\t\t\t\"Syntax error, insert \\\">\\\" to complete ReferenceType1\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in test\\\\X.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass X1<A extends X2<X3<String>> {}\\n\" + ", "+\t\t\t\"\t                               ^^\\n\" + ", "+\t\t\t\"Syntax error, insert \\\">\\\" to complete ReferenceType1\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in test\\\\X.java (at line 4)\\n\" + ", "+\t\t\t\"\tclass X2<A extends X3<String> {}\\n\" + ", "+\t\t\t\"\t                            ^\\n\" + ", "+\t\t\t\"Syntax error, insert \\\">\\\" to complete ReferenceType1\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in test\\\\X.java (at line 5)\\n\" + ", "+\t\t\t\"\tclass X3<A {}\\n\" + ", "+\t\t\t\"\t         ^\\n\" + ", "+\t\t\t\"Syntax error on token \\\"A\\\", > expected after this token\\n\" + ", "+\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc642de1d276e31d1fd5c218845915f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": " \tpublic void test088()", "signatureAfterChange": " \tpublic void test088()", "diff": ["-\t\t\t\"Name clash: The method addAll(Collection<? extends E>) of type ArrayList<T0> has the same erasure as addAll(Collection<? extends E>) of type Collection<String> but does not override it\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0>,Runnable {\\n\" + ", "-\t\t\t\"\t             ^\\n\" + ", "-\t\t\t\"The type X<T0> must implement the inherited abstract method Collection<String>.addAll(Collection<? extends String>)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0>,Runnable {\\n\" + ", "-\t\t\t\"\t             ^\\n\" + ", "-\t\t\t\"5. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0>,Runnable {\\n\" + ", "-\t\t\t\"\t             ^\\n\" + ", "-\t\t\t\"The type X<T0> must implement the inherited abstract method Collection<String>.add(String)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"6. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0>,Runnable {\\n\" + ", "-\t\t\t\"\t             ^\\n\" + ", "-\t\t\t\"The return type is incompatible with Iterable<String>.iterator(), Collection<String>.iterator(), AbstractList<T0>.iterator()\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"7. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 2)\\n\" + ", "-\t\t\t\"8. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df511248ce328ad27ece95f3cf377f5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest.java", "commitBeforeChange": "80724a8df94e8e8610a4d46586b0b0c806074736", "commitAfterChange": "687ab8ff39714b5ce9983d7c352a9d12d477edc9", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 121, "signatureBeforeChange": " public void test427736()", "signatureAfterChange": " public void test427736()", "diff": ["+\tMap customOptions = getCompilerOptions();", "+\t//customOptions.put(CompilerOptions.OPTION_DocCommentSupport, CompilerOptions.ENABLED);", "-\t\t\t\"public class Test1<K, V> {\\n\" +", "-\t\t\t\"  /**\\n\" +", "-\t\t\t\"   * @param <K2> unused\\n\" +", "-\t\t\t\"   * @param <V2> unused\\n\" +", "-\t\t\t\"   */\\n\" +", "-\t\t\t\"  private static class Node<K2, V2> {}\\n\" +", "-\t\t\t\"  \\n\" +", "-\t\t\t\"  @SuppressWarnings(\\\"unused\\\")\\n\" +", "-\t\t\t\"  private KeySetView<K, V> keySet(V mappedValue) {return null;}\\n\" +", "-\t\t\t\"  \\n\" +", "-\t\t\t\"  /**\\n\" +", "-\t\t\t\"   * See {@link #keySet() keySet()},\\n\" +", "-\t\t\t\"   * @param <K3> unused\\n\" +", "-\t\t\t\"   * @param <V3> unused\\n\" +", "-\t\t\t\"   */\\n\" +", "-\t\t\t\"  private static class KeySetView<K3, V3> {}\\n\" +", "-\t\t\t\"  \\n\" +", "-\t\t\t\"  private static <K4, V4> Node<K4, V4> untree0(Node<K4, V4> hi) {return hi;}\\n\" +", "-\t\t\t\"  void untreesomething(Node<K, V> n) {\\n\" +", "-\t\t\t\"    // The method untree0(Test1.Node<K4,V4>) in the type Test1<K,V> is not \\n\" +", "-\t\t\t\"    // applicable for the arguments (Test1.Node<K,V>)\\n\" +", "-\t\t\t\"    untree0(n);\\n\" +", "-\t\t\t\"  }\\n\" +", "-\t\t\t\"  \\n\" +", "-\t\t\t\"  private static <K4, V4> Node<K4, V4> tabAt0(Node<K4, V4>[] tab, int i) {return tab[i];}\\n\" +", "-\t\t\t\"  void tabatsomething(Node<K, V>[] t) {\\n\" +", "-\t\t\t\"    // The method tabAt0(Test2.Node<K4,V4>[], int) in the type Test2<K,V> is not \\n\" +", "-\t\t\t\"    // applicable for the arguments (Test2.Node<K,V>[], int)\\n\" +", "-\t\t\t\"    tabAt0(t, 0);\\n\" +", "-\t\t\t\"  }\\n\" +", "+\t\t\t\"class Test1<K, V> {\\n\" +", "+\t\t\t\" static class Node<K2, V2> {}\\n\" +", "+\t\t\t\" void keySet(V v) {}\\n\" +", "+\t\t\t\" /**\\n\" +", "+\t\t\t\"  * See {@link #keySet() keySet()},\\n\" +", "+\t\t\t\"  */\\n\" +", "+\t\t\t\" class KeySetView {}\\n\" +", "+\t\t\t\" static <K4, V4> void untree0(Node<K4, V4> hi) {}    \\n\" +", "+\t\t\t\" void untreesomething(Node<K, V> n) {\\n\" +", "+\t\t\t\"   untree0(n); \\n\" +", "+\t\t\t\" }\\n\" +", "-\t\t\"\");", "+\t\t\"\", null, true, customOptions);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2f9faab3b125bca9aac84ebb808ac6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "f08399b6c3b85028e58f14c2c7d9ea2ab9a83a79", "commitAfterChange": "3575e4b916e9151da43f7d5bca2f917975264d4c", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " public void test073()", "signatureAfterChange": " public void test073()", "diff": ["-\t\t\"4. ERROR in Y.java (at line 15)\\n\" +", "-\t\t\"\tbyte a = a();\\n\" +", "-\t\t\"\t         ^\\n\" +", "-\t\t\"The method a() is ambiguous for the type Y\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. ERROR in Y.java (at line 20)\\n\" +", "+\t\t\"4. ERROR in Y.java (at line 20)\\n\" +", "-\t\t\"6. ERROR in Y.java (at line 20)\\n\" +", "+\t\t\"5. ERROR in Y.java (at line 20)\\n\" +", "-\t\t\"7. ERROR in Y.java (at line 20)\\n\" +", "+\t\t\"6. ERROR in Y.java (at line 20)\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"8. ERROR in Y.java (at line 22)\\n\" +", "-\t\t\"\tbyte a = a();\\n\" +", "-\t\t\"\t         ^\\n\" +", "-\t\t\"The method a() is ambiguous for the type Y2\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3edb4ab02c22b5450f31474a62ea3be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "08c5b9004bde27fb4063ce300ce881966676fe74", "commitAfterChange": "28d58bf6eb942015446b8ffce8f446f86e9686d9", "methodNumberBeforeChange": 164, "methodNumberAfterChange": 164, "signatureBeforeChange": " public void test401789_401790a()", "signatureAfterChange": " public void test401789_401790a()", "diff": ["-\t\t\t\t\"\t^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"The constructor X.Y(X::goo) is undefined\\n\" + ", "+\t\t\t\t\"\t     ^^^^^^\\n\" + ", "+\t\t\t\t\"The type of goo() from the type X is int, this is incompatible with the descriptor\\'s return type: String\\n\" + ", "-\t\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"The constructor X((<no type> x) -> {\\n\" + ", "-\t\t\t\t\"  return 10;\\n\" + ", "-\t\t\t\t\"}) is undefined\\n\" + ", "+\t\t\t\t\"\t                     ^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from int to String\\n\" + ", "-\t\t\t\t\"\t^^^\\n\" + ", "-\t\t\t\t\"The method foo(I) in the type X is not applicable for the arguments (X::goo)\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^\\n\" + ", "+\t\t\t\t\"The type of goo() from the type X is int, this is incompatible with the descriptor\\'s return type: String\\n\" + ", "-\t\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"The constructor X((<no type> x) -> {\\n\" + ", "-\t\t\t\t\"  return 10;\\n\" + ", "-\t\t\t\t\"}) is undefined\\n\" + ", "+\t\t\t\t\"\t                    ^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from int to String\\n\" + ", "-\t\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"The constructor X((<no type> x) -> {\\n\" + ", "-\t\t\t\t\"  return 10;\\n\" + ", "-\t\t\t\t\"}) is undefined\\n\" + ", "+\t\t\t\t\"\t                    ^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from int to String\\n\" + ", "-\t\t\t\t\"6. ERROR in X.java (at line 20)\\n\" + ", "-\t\t\t\t\"\tnew X((x)->{ return 10;}).new Y((x) -> { return 0;});\\n\" + ", "-\t\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"The constructor X.Y((<no type> x) -> {\\n\" + ", "-\t\t\t\t\"  return 0;\\n\" + ", "-\t\t\t\t\"}) is undefined\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"7. ERROR in X.java (at line 21)\\n\" + ", "+\t\t\t\t\"6. ERROR in X.java (at line 21)\\n\" + ", "-\t\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"The constructor X((<no type> x) -> {\\n\" + ", "-\t\t\t\t\"  return 10;\\n\" + ", "-\t\t\t\t\"}) is undefined\\n\" + ", "+\t\t\t\t\"\t                    ^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from int to String\\n\" + ", "-\t\t\t\t\"8. ERROR in X.java (at line 26)\\n\" + ", "+\t\t\t\t\"7. ERROR in X.java (at line 26)\\n\" + ", "-\t\t\t\t\"\t^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"The constructor X(X::goo) is undefined\\n\" + ", "+\t\t\t\t\"\t      ^^^^^^\\n\" + ", "+\t\t\t\t\"The type of goo() from the type X is int, this is incompatible with the descriptor\\'s return type: String\\n\" + ", "-\t\t\t\t\"9. ERROR in X.java (at line 29)\\n\" + ", "+\t\t\t\t\"8. ERROR in X.java (at line 29)\\n\" + ", "-\t\t\t\t\"\t^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"The constructor X((<no type> x) -> 10) is undefined\\n\" + ", "+\t\t\t\t\"\t            ^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from int to String\\n\" + ", "-\t\t\t\t\"10. ERROR in X.java (at line 31)\\n\" + ", "+\t\t\t\t\"9. ERROR in X.java (at line 31)\\n\" + "]}], "num": 407}
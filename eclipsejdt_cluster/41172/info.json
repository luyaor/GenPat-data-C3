{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f6f077d1380e26d1605ff33c2d9a6e79", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78d8363de3035965aacb593d37bc87be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "fea48c1ab8bc004e73a7488c630798836bc78025", "commitAfterChange": "62174cb60f573d7f957b7c7e696b97cad27f7ffe", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "signatureAfterChange": "     public static Map<String, String> getProcessorOptions(IJavaProject jproj)", "diff": ["-    \tMap<String,String> options;", "-    \toptions = getRawProcessorOptions(jproj);", "+    \tMap<String,String> rawOptions = getRawProcessorOptions(jproj);", "+    \t// map is large enough to also include the programmatically generated options", "+    \tMap<String, String> options = new HashMap<String, String>(rawOptions.size() + 6);", "+    \t", "+    \t// Resolve path metavariables like %ROOT%", "+    \tfor (Map.Entry<String, String> entry : rawOptions.entrySet()) {", "+    \t\tString resolvedValue = resolveVarPath(jproj, entry.getValue());", "+    \t\tString value = (resolvedValue == null) ? entry.getValue() : resolvedValue;", "+    \t\toptions.put(entry.getKey(), value);", "+    \t}", "+    \t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f64bf1946a382aeaca5240b5ca5f9ee7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/AptConfigurationBlock.java", "commitBeforeChange": "790443c8ea7a17aa25cb0c35c01196da99d52e04", "commitAfterChange": "d7ed279f5216d32337e674d05a19fd9c56f52744", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tprivate void unpackProcessorOptions(String str)", "signatureAfterChange": " \tprivate void loadProcessorOptions(IJavaProject jproj)", "diff": ["-\tprivate void unpackProcessorOptions(String str) {", "+\tprivate void loadProcessorOptions(IJavaProject jproj) {", "-\t\tif (str != null) {", "-\t\t\tProcessorOptionsParser parser = new ProcessorOptionsParser(str);", "-\t\t\tMap<String, String> parsedOptions = parser.parse();", "-\t\t\tfor (Map.Entry<String, String> entry : parsedOptions.entrySet()) {", "-\t\t\t\tProcessorOption o = new ProcessorOption();", "-\t\t\t\to.key = entry.getKey();", "-\t\t\t\to.value = entry.getValue();", "-\t\t\t\toptions.add(o);", "-\t\t\t}", "+\t\tMap<String, String> parsedOptions = AptConfig.getRawProcessorOptions(jproj);", "+\t\tfor (Map.Entry<String, String> entry : parsedOptions.entrySet()) {", "+\t\t\tProcessorOption o = new ProcessorOption();", "+\t\t\to.key = entry.getKey();", "+\t\t\to.value = entry.getValue();", "+\t\t\toptions.add(o);"]}], "num": 41172}
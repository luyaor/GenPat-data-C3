{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9336e36e5d4d43bcd852295ea81ffeae", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c4292640a3dec75472c151d148e95cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "16d54acda4e0b7a146a54bf4587ffd8f08316b0a", "commitAfterChange": "adb31abd7b76aacf34a5241ce11f6a5ccfcea015", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void resolve(ClassScope classScope)", "signatureAfterChange": " \tpublic void resolve(ClassScope scope)", "diff": ["-\tpublic void resolve(ClassScope classScope) {", "-\t\tinternalResolve(classScope);", "-\t}", "+\tpublic void resolve(ClassScope scope) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8639f9facada7c3da608ef5e34b8582", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "4371b6d8f370e30de814aa3f488aa7fff3acceb1", "commitAfterChange": "653406a482474edc2d8737f13239902108d47273", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public void checkAnnotation()", "signatureAfterChange": "  public void checkAnnotation()", "diff": ["-\t\tthis.annotation.reportReferenceInfo(requestor);", "+\t\t// Report reference info in annotation @throws/@exception tags", "+\t\tTypeReference[] thrownExceptions = this.annotation.thrownExceptions;", "+\t\tint throwsTagsNbre = thrownExceptions == null ? 0 : thrownExceptions.length;", "+\t\tfor (int i = 0; i < throwsTagsNbre; i++) {", "+\t\t\tTypeReference typeRef = thrownExceptions[i];", "+\t\t\tif (typeRef instanceof AnnotationSingleTypeReference) {", "+\t\t\t\tAnnotationSingleTypeReference singleRef = (AnnotationSingleTypeReference) typeRef;", "+\t\t\t\trequestor.acceptTypeReference(singleRef.token, singleRef.sourceStart);", "+\t\t\t} else if (typeRef instanceof AnnotationQualifiedTypeReference) {", "+\t\t\t\tAnnotationQualifiedTypeReference qualifiedRef = (AnnotationQualifiedTypeReference) typeRef;", "+\t\t\t\trequestor.acceptTypeReference(qualifiedRef.tokens, qualifiedRef.sourceStart, qualifiedRef.sourceEnd);", "+\t\t\t}", "+\t\t}", "+", "+\t\t// Report reference info in annotation @see tags", "+\t\tExpression[] references = this.annotation.references;", "+\t\tint seeTagsNbre = references == null ? 0 : references.length;", "+\t\tfor (int i = 0; i < seeTagsNbre; i++) {", "+\t\t\tExpression reference = references[i];", "+\t\t\tif (reference instanceof AnnotationSingleTypeReference) {", "+\t\t\t\tAnnotationSingleTypeReference singleRef = (AnnotationSingleTypeReference) reference;", "+\t\t\t\trequestor.acceptTypeReference(singleRef.token, singleRef.sourceStart);", "+\t\t\t} else if (reference instanceof AnnotationQualifiedTypeReference) {", "+\t\t\t\tAnnotationQualifiedTypeReference qualifiedRef = (AnnotationQualifiedTypeReference) reference;", "+\t\t\t\trequestor.acceptTypeReference(qualifiedRef.tokens, qualifiedRef.sourceStart, qualifiedRef.sourceEnd);", "+\t\t\t} else if (reference instanceof AnnotationFieldReference) {", "+\t\t\t\tAnnotationFieldReference fieldRef = (AnnotationFieldReference) reference;", "+\t\t\t\trequestor.acceptFieldReference(fieldRef.token, fieldRef.sourceStart);", "+\t\t\t} else if (reference instanceof AnnotationMessageSend) {", "+\t\t\t\tAnnotationMessageSend messageSend = (AnnotationMessageSend) reference;", "+\t\t\t\tif (messageSend.arguments != null) {", "+\t\t\t\t\trequestor.acceptMethodReference(messageSend.selector, messageSend.arguments.length, messageSend.sourceStart);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 38101}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da40f93fd03c699f2203dc1e3272068b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b222b881b733511c44409284c1f91c0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "55c6ab9c45d49f1f177c61cec69726a778e34111", "commitAfterChange": "9e53891494288567535baf6ce8385d425d9822fd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashtableOfArrayToObject packageFragments, ICompilationUnit[] workingCopies)", "signatureAfterChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashtableOfArrayToObject packageFragments, ICompilationUnit[] workingCopies)", "diff": ["+\t\t\tHashSet visited = new HashSet();", "+\t\t\t\t", "+\t\t\t\tPackageFragment pkg = (PackageFragment) unitToLookInside.getParent();", "+\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot) pkg.getParent();", "+\t\t\t\tif (visited.contains(root)) continue;", "+\t\t\t\tString[] pkgName = pkg.names;", "+\t\t\t\tIPackageFragmentRoot[] roots = (IPackageFragmentRoot[]) packageFragments.get(pkgName);", "+\t\t\t\tif (roots == null) {", "+\t\t\t\t\tpackageFragments.put(pkgName, new IPackageFragmentRoot[] {root});", "+\t\t\t\t} else {", "+\t\t\t\t\tint rootLength = roots.length;", "+\t\t\t\t\tSystem.arraycopy(roots, 0, roots = new IPackageFragmentRoot[rootLength+1], 0, rootLength);", "+\t\t\t\t\troots[rootLength] = root;", "+\t\t\t\t\tpackageFragments.put(pkgName, roots);", "+\t\t\t\t}", "+\t\t\t\tvisited.add(root);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa0d59fabde94148a3e5e8037a568a89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "bf4fd359c98503d2401041bd16d54a83079f69fe", "commitAfterChange": "7183d81a2458b7a9ecc9004f74bf12b52ac2eafc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void initializeRoots()", "signatureAfterChange": " \t \tpublic void initializeRoots()", "diff": ["+\t\tHashMap newProjectDependencies = null;", "+\t\t\t\tnewProjectDependencies = new HashMap();", "-\t\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "+\t\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) {", "+\t\t\t\t\t\t\tIJavaProject key = model.getJavaProject(entry.getPath().segment(0)); // TODO (jerome) reuse handle", "+\t\t\t\t\t\t\tIJavaProject[] dependents = (IJavaProject[]) newProjectDependencies.get(key);", "+\t\t\t\t\t\t\tif (dependents == null) {", "+\t\t\t\t\t\t\t\tdependents = new IJavaProject[] {project};", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tint dependentsLength = dependents.length;", "+\t\t\t\t\t\t\t\tSystem.arraycopy(dependents, 0, dependents = new IJavaProject[dependentsLength+1], 0, dependentsLength);", "+\t\t\t\t\t\t\t\tdependents[dependentsLength] = project;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tnewProjectDependencies.put(key, dependents);", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t}", "+\t\t\t\tthis.projectDependencies = newProjectDependencies;"]}], "num": 19817}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b918c6b9bd1e4c2a5584bd8c4651e825", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f0597dad2b075d9051f70ab767c960e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTRecoveryPropagator.java", "commitBeforeChange": "7c5e971605e3df9f80c39caf6a5dabceeb49148b", "commitAfterChange": "ffe39da04df0f3a3dcc2e15c0353857438ce8e35", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tprivate boolean checkAndTagAsMalformed(ASTNode node)", "signatureAfterChange": " \t \tprivate boolean markIncludedProblems(int start, int end)", "diff": ["-\tprivate boolean checkAndTagAsMalformed(ASTNode node) {", "-\t\tboolean tagWithErrors = false;", "-\t\tsearch: for (int i = 0, max = this.problems.length; i < max; i++) {", "+\t", "+\tprivate boolean markIncludedProblems(int start, int end) {", "+\t\tboolean foundProblems = false;", "+\t\tnext: for (int i = 0, max = this.problems.length; i < max; i++) {", "+\t\t\t", "+\t\t\tif(this.usedOrIrrelevantProblems[i]) continue next;", "+\t\t\t", "-\t\t\t\t\tcontinue search;", "+\t\t\t\t\tthis.usedOrIrrelevantProblems[i] = true;", "+\t\t\t\t\tcontinue next;", "+\t\t\t\t\t", "+\t\t\t", "-\t\t\tint start = node.getStartPosition();", "-\t\t\tint end = start + node.getLength();", "-\t\t\t\tnode.setFlags(node.getFlags() | ASTNode.RECOVERED);", "-\t\t\t\ttagWithErrors = true;", "+\t\t\t\tthis.usedOrIrrelevantProblems[i] = true;", "+\t\t\t\tfoundProblems = true;", "-\t\treturn tagWithErrors;", "+\t\treturn foundProblems;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d5115264284b4cd94ff7695cf714e10", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "signatureAfterChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, int detailLevel, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "diff": ["-", "-\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "-", "-\tleftPattern.findIndexMatches(input, orCombiner, detailLevel, progressMonitor, scope);", "-\tif (progressMonitor != null && progressMonitor.isCanceled())", "-\t\tthrow new OperationCanceledException();", "-\trightPattern.findIndexMatches(input, orCombiner, detailLevel, progressMonitor, scope);", "+", "+\tfor (int i = 0, length = this.patterns.length; i < length; i++)", "+\t\tthis.patterns[i].findIndexMatches(input, orCombiner, detailLevel, progressMonitor, scope);"]}], "num": 16007}
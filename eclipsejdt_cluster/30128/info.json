{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5fd1cc177fb3a2e4a4ecb4ce796a2f5c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "932bdd51f00fb2f3b682df644fa6c2ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "fafb2dc68e9656aa163ddd55309d4bcb6df6ee09", "commitAfterChange": "56242f2c4a4e3fdfdcffa7d9541655946a7953f8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, int nullStatus)", "signatureAfterChange": " void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, int nullStatus)", "diff": ["+\tlong tagBits;", "+\tMethodBinding methodBinding = null;", "+\tboolean useTypeAnnotations = scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8;", "+\ttry {", "+\t\tmethodBinding = scope.methodScope().referenceMethodBinding();", "+\t\ttagBits = (useTypeAnnotations) ? methodBinding.returnType.tagBits : methodBinding.tagBits;", "+\t} catch (NullPointerException npe) {", "+\t\t// chain of references in try-block has several potential nulls;", "+\t\t// any null means we cannot perform the following check", "+\t\treturn;\t\t\t", "+\t}", "+\tif (useTypeAnnotations) {", "+\t\tint severity = findNullTypeAnnotationMismatch(methodBinding.returnType, this.expression.resolvedType, nullStatus);", "+\t\tif (severity == 3) {", "+\t\t\tscope.problemReporter().nullityMismatchingTypeAnnotation(this.expression, this.expression.resolvedType, methodBinding.returnType, severity);", "+\t\t\treturn;", "+\t\t} else if (severity == 2) {", "+\t\t\tflowContext.recordNullityMismatch(scope, this.expression, this.expression.resolvedType, methodBinding.returnType, nullStatus);", "+\t\t\treturn;", "+\t\t}", "+\t}", "-\t\tlong tagBits;", "-\t\tMethodBinding methodBinding = null;", "-\t\tboolean useTypeAnnotations = scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8;", "-\t\ttry {", "-\t\t\tmethodBinding = scope.methodScope().referenceMethodBinding();", "-\t\t\ttagBits = (useTypeAnnotations) ? methodBinding.returnType.tagBits : methodBinding.tagBits;", "-\t\t} catch (NullPointerException npe) {", "-\t\t\t// chain of references in try-block has several potential nulls;", "-\t\t\t// any null means we cannot perform the following check", "-\t\t\treturn;\t\t\t", "-\t\t}", "-\t\t\tif (useTypeAnnotations && (this.expression.resolvedType.tagBits & TagBits.AnnotationNullMASK) != 0) // TODO(stephan) more detailed checking", "-\t\t\t\tscope.problemReporter().nullityMismatchingTypeAnnotation(this.expression, this.expression.resolvedType, methodBinding.returnType, 3);", "-\t\t\telse", "-\t\t\t\tflowContext.recordNullityMismatch(scope, this.expression, this.expression.resolvedType, methodBinding.returnType, nullStatus);", "+\t\t\tflowContext.recordNullityMismatch(scope, this.expression, this.expression.resolvedType, methodBinding.returnType, nullStatus);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd71ff0e43cb5b76784fd0d4c597c6dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "c2e73e92d84b995d792bc11e9e3cc44e31128806", "commitAfterChange": "7530e9811f8e0b012d59fd23237f75cdb4977fd6", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "  private void evaluateNullAnnotations(long annotationTagBits)", "signatureAfterChange": "  private void evaluateNullAnnotations(long annotationTagBits)", "diff": ["-\tboolean isJdk18 = this.scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8;", "-\tif (isJdk18) {", "+\tboolean usesNullTypeAnnotations = this.scope.environment().usesNullTypeAnnotations();", "+\tif (usesNullTypeAnnotations) {", "-\t\t\t\tcheckRedundantNullnessDefaultRecurse(typeDecl, typeDecl.annotations, this.defaultNullness, isJdk18);", "+\t\t\t\tcheckRedundantNullnessDefaultRecurse(typeDecl, typeDecl.annotations, this.defaultNullness, true);", "-\t\t// transfer nullness info from tagBits to this.nullnessDefaultAnnotation", "+\t\t// transfer nullness info from tagBits to this.defaultNullness", "-\t\tif ((annotationTagBits & TagBits.AnnotationNullUnspecifiedByDefault) != 0)", "+\t\tif ((annotationTagBits & TagBits.AnnotationNullUnspecifiedByDefault) != 0) {", "-\t\telse if ((annotationTagBits & TagBits.AnnotationNonNullByDefault) != 0)", "+\t\t} else if ((annotationTagBits & TagBits.AnnotationNonNullByDefault) != 0) {", "+\t\t} else if (this.defaultNullness != 0) {", "+\t\t\t // NNBD with argument while NN & NU are SE5 annotations, revert to old default & encoding.", "+\t\t\tif (this.defaultNullness == NULL_UNSPECIFIED_BY_DEFAULT) {", "+\t\t\t\tannotationTagBits = TagBits.AnnotationNullUnspecifiedByDefault;", "+\t\t\t\tnewDefaultNullness = NULL_UNSPECIFIED_BY_DEFAULT;", "+\t\t\t} else {", "+\t\t\t\tannotationTagBits = TagBits.AnnotationNonNullByDefault;", "+\t\t\t\tnewDefaultNullness = NONNULL_BY_DEFAULT;", "+\t\t\t}", "+\t\t}"]}], "num": 30128}
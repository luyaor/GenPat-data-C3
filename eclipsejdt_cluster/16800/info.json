{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e060fe425b24be5d1b31d9a0b3ca977d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57da4917201fdb35a340f13c23973bc2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tpublic void test054()", "signatureAfterChange": "  \tpublic void test054()", "diff": ["-\t\t\t\"     8  invokestatic X.boom()Z [27]\\n\" + ", "+\t\t\t\"     8  invokestatic X.boom() : boolean  [27]\\n\" + ", "-\t\t\t\"    14  getstatic java/lang/System.out Ljava/io/PrintStream; [33]\\n\" + ", "+\t\t\t\"    14  getstatic java.lang.System.out : java.io.PrintStream [33]\\n\" + ", "-\t\t\t\"    18  invokevirtual java/io/PrintStream.println(I)V [39]\\n\" + ", "+\t\t\t\"    18  invokevirtual java.io.PrintStream.println(int) : void  [39]\\n\" + ", "-\t\t\t\"        [pc: 2, pc: 22] local: i index: 0 type: I\\n\";", "+\t\t\t\"        [pc: 2, pc: 22] local: i index: 0 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bea268db1af50b519875bf2a80ddb2d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "82dc67de142f757f6098e678017a2b32f752c9b7", "commitAfterChange": "5249d37677c0ce4d66ab262efb5c3dd4aa089796", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 143, "signatureBeforeChange": " public void test138()", "signatureAfterChange": " public void test138()", "diff": ["- this.runNegativeTest(", "-     new String[] {", "-    \t    \"X.java\",", "- \t\t\t\"public enum X {\\n\" +", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public enum X {\\n\" +", "-     },", "-\t\"----------\\n\" +", "-\t\"1. WARNING in X.java (at line 3)\\n\" +", "-\t\"\tdouble eval(double x, double y) {\\n\" +", "-\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\"The method eval(double, double) of type new X(){} should be tagged with @Override since it actually overrides a superclass method\\n\" +", "-\t\"----------\\n\" +", "-\t\"2. ERROR in X.java (at line 9)\\n\" +", "-\t\"\tabstract double eval(double x, double y);\\n\" +", "-\t\"\t                ^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\"The abstract method eval in type new X(){} can only be defined by an abstract class\\n\" +", "-\t\"----------\\n\");", "+\t\t },", "+\t\t\"----------\\n\" +", "+\t\t\"1. WARNING in X.java (at line 3)\\n\" +", "+\t\t\"\tdouble eval(double x, double y) {\\n\" +", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\"The method eval(double, double) of type new X(){} should be tagged with @Override since it actually overrides a superclass method\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tMINUS {\\n\" + ", "+\t\t\"\t^^^^^\\n\" + ", "+\t\t\"The enum constant MINUS cannot define abstract methods\\n\" + ", "+\t\t\"----------\\n\"", "+\t);"]}], "num": 16800}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "504fc3b0506d9032ef509a80c0a8e675", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20ae9cf475965af4070944f61d1bb0f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "a889669f3b6092488da28cece9e17491e979e98b", "commitAfterChange": "169461b0108d10746346c25bcb496c53ad944705", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "\r \tpublic static void setClasspathContainer(IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "\r \tpublic static void setClasspathContainer(IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\tIClasspathEntry[] rawClasspath = affectedProject.getRawClasspath();\r", "-\t\t\tfor (int j = 0, cpLength = rawClasspath.length; j <cpLength; j++) {", "-\t\t\t\tIClasspathEntry entry = rawClasspath[j];\r", "-\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_CONTAINER && entry.getPath().equals(containerPath)){\r", "-\t\t\t\t\tfound = true;\r", "-\t\t\t\t\tbreak;\r", "+\t\t\tif (affectedProject.getProject().exists()){\r", "+\t\t\t\tIClasspathEntry[] rawClasspath = affectedProject.getRawClasspath();\r", "+\t\t\t\tfor (int j = 0, cpLength = rawClasspath.length; j <cpLength; j++) {", "+\t\t\t\t\tIClasspathEntry entry = rawClasspath[j];\r", "+\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_CONTAINER && entry.getPath().equals(containerPath)){\r", "+\t\t\t\t\t\tfound = true;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff45f348048f1474e803dedbff9511f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "0f27abdc440c19d22cca8de897116ef5e59c08c4", "commitAfterChange": "b1c884262e1cb2a37d9804b581d279b5a78777c8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\t\t\t\t", "-   \t\t\t    if (enclosingType != null && enclosingType.isParameterizedType()) {", "-\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.createParameterizedType(currentType, null, enclosingType));", "-\t\t\t\t\treturn null;", "+\t\t\t\tif (currentType.erasure().isGenericType()) {", "+\t   \t\t\t    if (enclosingType != null && enclosingType.isParameterizedType()) {", "+\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.createParameterizedType(currentType, null, enclosingType));", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "+\t   \t\t\t    this.resolvedType = scope.environment().createRawType(currentType, enclosingType); // raw type", "-   \t\t\t    this.resolvedType = scope.environment().createRawType(currentType, enclosingType); // raw type"]}], "num": 39380}
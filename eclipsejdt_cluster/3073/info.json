{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c40bb6eee0c328be9cf3ed6d0217fbe", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "919e3c7b3a97d3d59ff5f7d4f1df7c3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java", "commitBeforeChange": "8470bf3553696af2786417fd29ff24b20a8b811a", "commitAfterChange": "aa5e9e84a2dc24b977832ac83a286e33c5f481ea", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(EnumDeclaration node)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(EnumDeclaration node)", "diff": ["+\t\tint constantsEnd = -1;", "-\t\t\tthis.wrapGroupEnd = this.tm.lastIndexIn(enumConstants.get(enumConstants.size() - 1), -1);", "+\t\t\tthis.wrapGroupEnd = constantsEnd = this.tm.lastIndexIn(enumConstants.get(enumConstants.size() - 1), -1);", "+\t\tif (!this.options.join_wrapped_lines) {", "+\t\t\t// preserve a line break between the last comma and semicolon", "+\t\t\tint commaIndex = -1;", "+\t\t\tint i = constantsEnd > 0 ? constantsEnd : this.tm.firstIndexAfter(node.getName(), TokenNameLBRACE);", "+\t\t\twhile (++i < this.tm.size()) {", "+\t\t\t\tToken t = this.tm.get(i);", "+\t\t\t\tif (t.isComment())", "+\t\t\t\t\tcontinue;", "+\t\t\t\tif (t.tokenType == TokenNameCOMMA) {", "+\t\t\t\t\tcommaIndex = i;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (t.tokenType == TokenNameSEMICOLON && commaIndex >= 0", "+\t\t\t\t\t\t&& this.tm.countLineBreaksBetween(this.tm.get(commaIndex), t) == 1) {", "+\t\t\t\t\tt.setWrapPolicy(new WrapPolicy(WrapMode.WHERE_NECESSARY, commaIndex, 0));", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb6f1c245ef533eee23b396545e7e58b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/LineBreaksPreparator.java", "commitBeforeChange": "2e56c16c054ee89ad0380a5a606694122f7187a1", "commitAfterChange": "9120b6c49a4b36e25b20147789ffde03aca85f97", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "  \tprivate boolean handleEmptyLinesIndentation(int openBraceIndex)", "signatureAfterChange": "  \tprivate void addEmptyLineTokenAfter(int tokenIndex)", "diff": ["-\tprivate boolean handleEmptyLinesIndentation(int openBraceIndex) {", "-\t\tToken open = this.tm.get(openBraceIndex);", "-\t\tToken next = this.tm.get(openBraceIndex + 1);", "-\t\tboolean isEmpty = next.tokenType == TokenNameRBRACE;", "-\t\tif (!isEmpty || this.tm.countLineBreaksBetween(open, next) < 2 || !this.options.indent_empty_lines)", "-\t\t\treturn isEmpty;", "+\tprivate void addEmptyLineTokenAfter(int tokenIndex) {", "+\t\tif (tokenIndex + 1 >= this.tm.size())", "+\t\t\treturn;", "+\t\tToken token = this.tm.get(tokenIndex);", "+\t\tToken next = this.tm.get(tokenIndex + 1);", "+\t\tif (this.tm.countLineBreaksBetween(token, next) < 2 || !this.options.indent_empty_lines)", "+\t\t\treturn;", "-\t\tfor (int i = open.originalEnd + 1; i < next.originalStart; i++) {", "+\t\tfor (int i = token.originalEnd + 1; i < next.originalStart; i++) {", "-\t\t\t\tthis.tm.insert(openBraceIndex + 1, emptyLineToken);", "-\t\t\t\treturn true;", "+\t\t\t\tthis.tm.insert(tokenIndex + 1, emptyLineToken);", "+\t\t\t\treturn;", "-\t\treturn true;", "+\t\tassert false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f33f500e25c5352c11bfed50c5f1d77b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(IfStatement node)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(IfStatement node)", "diff": ["-\t\t\tif (this.tm.get(thenIndex).getLineBreaksBefore() == 0)", "+\t\t\tif (this.tm.get(thenIndex).getLineBreaksBefore() == 0) {", "+\t\t\t\tthis.wrapParentIndex = this.tm.firstIndexAfter(node.getExpression(), TokenNameRPAREN);", "+\t\t\t\tthis.wrapGroupEnd = this.tm.lastIndexIn(node.getThenStatement(), -1);", "+\t\t\t\thandleWrap(this.options.alignment_for_compact_if, node);", "+\t\t\t}", "-\t\t\tif (this.tm.get(elseIndex).getLineBreaksBefore() == 0)", "+\t\t\tif (this.tm.get(elseIndex).getLineBreaksBefore() == 0) {", "-\t\t}", "-\t\tif (!this.wrapIndexes.isEmpty()) {", "-\t\t\tthis.wrapParentIndex = this.tm.firstIndexAfter(node.getExpression(), TokenNameRPAREN);", "-\t\t\tthis.wrapGroupEnd = this.tm.lastIndexIn(node, -1);", "-\t\t\thandleWrap(this.options.alignment_for_compact_if, node);", "+\t\t\t\tthis.wrapParentIndex = this.tm.firstIndexAfter(node.getExpression(), TokenNameRPAREN);", "+\t\t\t\tthis.wrapGroupEnd = this.tm.lastIndexIn(elseStatement, -1);", "+\t\t\t\thandleWrap(this.options.alignment_for_compact_if, node);", "+\t\t\t}"]}], "num": 3073}
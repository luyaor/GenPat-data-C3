{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1640597a31ba52b38efd5fcb5d2e7e76", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "974c968eede39e4a17cd552afef8ea6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 738, "methodNumberAfterChange": 738, "signatureBeforeChange": " public void test0718()", "signatureAfterChange": " public void test0718()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 13)\\n\" +", "-\t\t\"\tpublic class ActionImpl<T extends Base> extends Action<T> implements Comparable<ActionImpl> {\\n\" +", "-\t\t\"\t                                                                                ^^^^^^^^^^\\n\" +", "-\t\t\"X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 14)\\n\" +", "-\t\t\"\tpublic int compareTo(ActionImpl o) {\\n\" +", "-\t\t\"\t                     ^^^^^^^^^^\\n\" +", "-\t\t\"X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. WARNING in X.java (at line 20)\\n\" +", "-\t\t\"\tSet<ActionImpl> set = new TreeSet<ActionImpl>();\\n\" +", "-\t\t\"\t    ^^^^^^^^^^\\n\" +", "-\t\t\"X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in X.java (at line 20)\\n\" +", "-\t\t\"\tSet<ActionImpl> set = new TreeSet<ActionImpl>();\\n\" +", "-\t\t\"\t                                  ^^^^^^^^^^\\n\" +", "-\t\t\"X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. WARNING in X.java (at line 21)\\n\" +", "-\t\t\"\tCollections.max(set);\\n\" +", "-\t\t\"\t^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation max(Collection<? extends X.ActionImpl>) of the generic method max(Collection<? extends T>) of type Collections\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"6. ERROR in X.java (at line 23)\\n\" +", "-\t\t\"\tZork z;\\n\" +", "-\t\t\"\t^^^^\\n\" +", "-\t\t\"Zork cannot be resolved to a type\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\"\tpublic class ActionImpl<T extends Base> extends Action<T> implements Comparable<ActionImpl> {\\n\" + ", "+\t\t\"\t                                                                                ^^^^^^^^^^\\n\" + ", "+\t\t\"X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\"\tpublic int compareTo(ActionImpl o) {\\n\" + ", "+\t\t\"\t                     ^^^^^^^^^^\\n\" + ", "+\t\t\"X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\"\tSet<ActionImpl> set = new TreeSet<ActionImpl>();\\n\" + ", "+\t\t\"\t    ^^^^^^^^^^\\n\" + ", "+\t\t\"X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\"\tSet<ActionImpl> set = new TreeSet<ActionImpl>();\\n\" + ", "+\t\t\"\t                                  ^^^^^^^^^^\\n\" + ", "+\t\t\"X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 21)\\n\" + ", "+\t\t\"\tCollections.max(set);\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation max(Set<X.ActionImpl>) of the generic method max(Collection<? extends T>) of type Collections\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. ERROR in X.java (at line 23)\\n\" + ", "+\t\t\"\tZork z;\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba7280f4e255a229683711e76cf66a31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 887, "methodNumberAfterChange": 887, "signatureBeforeChange": " public void test0867()", "signatureAfterChange": " public void test0867()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 20)\\n\" +", "-\t\t\"\tList<List> o = Foo.foo1();\\n\" +", "-\t\t\"\t     ^^^^\\n\" +", "-\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. ERROR in X.java (at line 20)\\n\" +", "-\t\t\"\tList<List> o = Foo.foo1();\\n\" +", "-\t\t\"\t                   ^^^^\\n\" +", "-\t\t\"The method foo1() in the type Foo is not applicable for the arguments ()\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 21)\\n\" +", "-\t\t\"\tFoo.bar1(o);\\n\" +", "-\t\t\"\t    ^^^^\\n\" +", "-\t\t\"The method bar1(List<List<T>>) in the type Foo is not applicable for the arguments (List<List>)\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in X.java (at line 24)\\n\" +", "-\t\t\"\tList o = Foo.foo2();\\n\" +", "-\t\t\"\t^^^^\\n\" +", "-\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. WARNING in X.java (at line 25)\\n\" +", "-\t\t\"\tFoo.bar2(o);\\n\" +", "-\t\t\"\t^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation bar2(List) of the generic method bar2(List<T>) of type Foo\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"6. WARNING in X.java (at line 25)\\n\" +", "-\t\t\"\tFoo.bar2(o);\\n\" +", "-\t\t\"\t         ^\\n\" +", "-\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<T>\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\"\tList<List> o = Foo.foo1();\\n\" + ", "+\t\t\"\t     ^^^^\\n\" + ", "+\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 20)\\n\" + ", "+\t\t\"\tList<List> o = Foo.foo1();\\n\" + ", "+\t\t\"\t                   ^^^^\\n\" + ", "+\t\t\"The method foo1() in the type Foo is not applicable for the arguments ()\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 21)\\n\" + ", "+\t\t\"\tFoo.bar1(o);\\n\" + ", "+\t\t\"\t    ^^^^\\n\" + ", "+\t\t\"The method bar1(List<List<T>>) in the type Foo is not applicable for the arguments (List<List>)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 24)\\n\" + ", "+\t\t\"\tList o = Foo.foo2();\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 25)\\n\" + ", "+\t\t\"\tFoo.bar2(o);\\n\" + ", "+\t\t\"\t^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation bar2(List) of the generic method bar2(List<T>) of type Foo\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in X.java (at line 25)\\n\" + ", "+\t\t\"\tFoo.bar2(o);\\n\" + ", "+\t\t\"\t         ^\\n\" + ", "+\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Runnable>\\n\" + "]}], "num": 63648}
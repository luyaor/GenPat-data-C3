{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dba1c6bdcaf157f3203678d67b68df58", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94593fcb4e76370b62ea0a1154044738", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " public void testTypeRefGenericAll01_TypeArgument() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAll01_TypeArgument() throws CoreException", "diff": ["-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<\ufffd|Types|\ufffd> & Serializable, V extends A<? super Types>> {@135] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic.comp [\tComparable<\ufffd|String|\ufffd> comp;@239] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<\ufffd|Types|\ufffd, UClass, VClass> {@112] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, \ufffd|UClass|\ufffd, VClass> {@119] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, UClass, \ufffd|VClass|\ufffd> {@127] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric.test [\tTestGeneric<\ufffd|Types|\ufffd> test;@150] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<\ufffd|String|\ufffd> foo(TestGeneric<Types> param1, Comparable<String> param2) {@176] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<\ufffd|Types|\ufffd> param1, Comparable<String> param2) {@200] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<Types> param1, Comparable<\ufffd|String|\ufffd> param2) {@226] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<\ufffd|TestGeneric|\ufffd<Types>> bar() {@275] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<TestGeneric<\ufffd|Types|\ufffd>> bar() {@287] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements Comparable<\ufffd|Types|\ufffd>, Serializable {@373] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.VClass [class VClass extends A<\ufffd|Types|\ufffd> {}@519] EXACT_MATCH\"", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<!|Types|!> & Serializable, V extends A<? super Types>> {@135] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic.comp [\tComparable<!|String|!> comp;@239] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<!|Types|!, UClass, VClass> {@112] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, !|UClass|!, VClass> {@119] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, UClass, !|VClass|!> {@127] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric.test [\tTestGeneric<!|Types|!> test;@150] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<!|String|!> foo(TestGeneric<Types> param1, Comparable<String> param2) {@176] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<!|Types|!> param1, Comparable<String> param2) {@200] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<Types> param1, Comparable<!|String|!> param2) {@226] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<!|TestGeneric|!<Types>> bar() {@275] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<TestGeneric<!|Types|!>> bar() {@287] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements Comparable<!|Types|!>, Serializable {@373] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.VClass [class VClass extends A<!|Types|!> {}@519] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f41b2e69357accc54768a99dc64d62b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " public void testTypeRefGenericAll01_AllGenericFlags() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAll01_AllGenericFlags() throws CoreException", "diff": ["-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends \ufffd|Types|\ufffd, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {@99] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends \ufffd|Types|\ufffd & Comparable<Types> & Serializable, V extends A<? super Types>> {@116] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & \ufffd|Comparable|\ufffd<Types> & Serializable, V extends A<? super Types>> {@124] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<\ufffd|Types|\ufffd> & Serializable, V extends A<? super Types>> {@135] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & \ufffd|Serializable|\ufffd, V extends A<? super Types>> {@144] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends \ufffd|A|\ufffd<? super Types>> {@168] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super \ufffd|Types|\ufffd>> {@178] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic.field [\tGeneric<? extends \ufffd|Types|\ufffd, ?, ?> field;@207] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic.comp [\tComparable<\ufffd|String|\ufffd> comp;@239] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic.clazz [\tClass<? extends \ufffd|Exception|\ufffd> clazz;@270] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<\ufffd|Types|\ufffd, UClass, VClass> {@112] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, \ufffd|UClass|\ufffd, VClass> {@119] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, UClass, \ufffd|VClass|\ufffd> {@127] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric.test [\tTestGeneric<\ufffd|Types|\ufffd> test;@150] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<\ufffd|String|\ufffd> foo(TestGeneric<Types> param1, Comparable<String> param2) {@176] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<\ufffd|Types|\ufffd> param1, Comparable<String> param2) {@200] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<Types> param1, Comparable<\ufffd|String|\ufffd> param2) {@226] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<\ufffd|TestGeneric|\ufffd<Types>> bar() {@275] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<TestGeneric<\ufffd|Types|\ufffd>> bar() {@287] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements Comparable<\ufffd|Types|\ufffd>, Serializable {@373] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.VClass [class VClass extends A<\ufffd|Types|\ufffd> {}@519] EXACT_MATCH\"", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends !|Types|!, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {@99] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends !|Types|! & Comparable<Types> & Serializable, V extends A<? super Types>> {@116] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & !|Comparable|!<Types> & Serializable, V extends A<? super Types>> {@124] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<!|Types|!> & Serializable, V extends A<? super Types>> {@135] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & !|Serializable|!, V extends A<? super Types>> {@144] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends !|A|!<? super Types>> {@168] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super !|Types|!>> {@178] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic.field [\tGeneric<? extends !|Types|!, ?, ?> field;@207] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic.comp [\tComparable<!|String|!> comp;@239] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic.clazz [\tClass<? extends !|Exception|!> clazz;@270] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<!|Types|!, UClass, VClass> {@112] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, !|UClass|!, VClass> {@119] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, UClass, !|VClass|!> {@127] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric.test [\tTestGeneric<!|Types|!> test;@150] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<!|String|!> foo(TestGeneric<Types> param1, Comparable<String> param2) {@176] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<!|Types|!> param1, Comparable<String> param2) {@200] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<Types> param1, Comparable<!|String|!> param2) {@226] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<!|TestGeneric|!<Types>> bar() {@275] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<TestGeneric<!|Types|!>> bar() {@287] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements Comparable<!|Types|!>, Serializable {@373] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.VClass [class VClass extends A<!|Types|!> {}@519] EXACT_MATCH\""]}], "num": 43256}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "86212f383879e18c942746294c50fdda", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "433f92c2f967d2c0903c791a47dcb00a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "bc8a42889f857ed7728b976d31e674de6afdad4d", "commitAfterChange": "e50f3d9d374cf35289e57b1f80fafcaa8e59eb2e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void analyseCode( \t\tClassScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": " \tpublic void analyseCode( \t\tClassScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\t\tFlowInfo fieldInfo = flowInfo.copy();// so as not to propagate changes outside this type", "+\t\t\tFlowInfo fieldInfo = flowInfo.copy();", "+\t\t\t\tUnconditionalFlowInfo outerInfo = flowInfo.copy().unconditionalInits().discardFieldInitializations();", "+\t\t\t\tFlowInfo constructorInfo = fieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo);", "-\t\t\t\t\t\t((ConstructorDeclaration)method).analyseCode(", "-\t\t\t\t\t\t\tscope, ", "-\t\t\t\t\t\t\tinitializerContext, ", "-\t\t\t\t\t\t\tflowInfo.copy().unconditionalInits().addInitializationsFrom(fieldInfo.copy().unconditionalInits().discardNonFieldInitializations()));", "+\t\t\t\t\t\t((ConstructorDeclaration)method).analyseCode(scope, initializerContext, constructorInfo.copy());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1f3408e893e8879e0d6b1e5a8fa1474", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "bc8a42889f857ed7728b976d31e674de6afdad4d", "commitAfterChange": "e50f3d9d374cf35289e57b1f80fafcaa8e59eb2e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": " \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\t\tFlowInfo fieldInfo = flowInfo.copy(); // so as not to propagate changes outside this type", "+\t\t\tFlowInfo fieldInfo = flowInfo.copy();", "+\t\t\t", "+\t\t\t\tUnconditionalFlowInfo outerInfo = flowInfo.copy().unconditionalInits().discardFieldInitializations();", "+\t\t\t\tFlowInfo constructorInfo = fieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo);", "-\t\t\t\t\t\t((ConstructorDeclaration)method).analyseCode(", "-\t\t\t\t\t\t\tscope, ", "-\t\t\t\t\t\t\tinitializerContext, ", "-\t\t\t\t\t\t\tflowInfo.copy().unconditionalInits().addInitializationsFrom(fieldInfo.copy().unconditionalInits().discardNonFieldInitializations()));", "+\t\t\t\t\t\t((ConstructorDeclaration)method).analyseCode(scope, initializerContext, constructorInfo.copy());"]}], "num": 62053}
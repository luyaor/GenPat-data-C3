{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0a4d8ef68a04a6433f773497247fcdf", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27c05284b2ae012a11aaab3d28531a80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "da8689e6058c8df72d6de5be59efe4e5eaaa5d49", "commitAfterChange": "feb6545df47d2c5c5dddbb92489d5f562545b32e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r \tpublic static String[] getClasspathVariableNames()", "signatureAfterChange": "\r \tpublic static String[] getClasspathVariableNames()", "diff": ["-\t\tEnumeration vars = Variables.keys();\r", "+\t\tIterator vars = Variables.keySet().iterator();\r", "-\t\twhile (vars.hasMoreElements()) {\r", "-\t\t\tresult[index++] = (String) vars.nextElement();\r", "+\t\twhile (vars.hasNext()) {\r", "+\t\t\tresult[index++] = (String) vars.next();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64ea2cfae7f96a66cc2d6672cb49687e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 34, "signatureBeforeChange": " public SyntheticAccessMethodBinding[] syntheticAccessMethods()", "signatureAfterChange": " public SyntheticAccessMethodBinding[] syntheticAccessMethods()", "diff": ["+// TODO (philippe) could be a performance issue since some senders are building the list just to count them", "-\tEnumeration fieldsOrMethods = synthetics[METHOD_EMUL].keys();", "-\twhile (fieldsOrMethods.hasMoreElements()) {", "+\tIterator fieldsOrMethods = synthetics[METHOD_EMUL].keySet().iterator();", "+\twhile (fieldsOrMethods.hasNext()) {", "-\t\tObject fieldOrMethod = fieldsOrMethods.nextElement();", "+\t\tObject fieldOrMethod = fieldsOrMethods.next();", "-\t\t\t\tbindings[index++] = methodAccessors[1]; // normal access", "+\t\t\t\tbindings[index++] = methodAccessors[1]; // normal access or bridge"]}], "num": 21758}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c6af083b04b234bfc5a7671bb07aa93", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9294e6a044c0f0bd771004723494f727", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelStatus.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \tpublic String getMessage()", "signatureAfterChange": "\r public String getMessage()", "diff": ["-\t */\r", "-\tpublic String getMessage() {\r", "-\t\tif (getException() == null) {\r", "-\t\t\tswitch (getCode()) {\r", "-\t\t\t\tcase CORE_EXCEPTION :\r", "-\t\t\t\t\treturn \"Core exception.\";\r", "-\t\t\t\tcase BUILDER_INITIALIZATION_ERROR :\r", "-\t\t\t\t\treturn \"Builder initialization error.\";\r", "-\t\t\t\tcase BUILDER_SERIALIZATION_ERROR :\r", "-\t\t\t\t\treturn \"Builder serialization error.\";\r", "-\t\t\t\tcase DEVICE_PATH :\r", "-\t\t\t\t\treturn \"Operation requires a path with no device. Path specified was: \"\r", "-\t\t\t\t\t\t+ getPath().toString();\r", "-\t\t\t\tcase DOM_EXCEPTION :\r", "-\t\t\t\t\treturn \"JDOM error.\";\r", "-\t\t\t\tcase ELEMENT_DOES_NOT_EXIST :\r", "-\t\t\t\t\treturn fElements[0].getElementName() + \" does not exist.\";\r", "-\t\t\t\tcase EVALUATION_ERROR :\r", "-\t\t\t\t\treturn \"Evaluation error: \" + getString();\r", "-\t\t\t\tcase INDEX_OUT_OF_BOUNDS :\r", "-\t\t\t\t\treturn \"Index out of bounds.\";\r", "-\t\t\t\tcase INVALID_CONTENTS :\r", "-\t\t\t\t\treturn \"Invalid contents specified.\";\r", "-\t\t\t\tcase INVALID_DESTINATION :\r", "-\t\t\t\t\treturn \"Invalid destination: \" + fElements[0].getElementName();\r", "-\t\t\t\tcase INVALID_ELEMENT_TYPES :\r", "-\t\t\t\t\tStringBuffer buff =\r", "-\t\t\t\t\t\tnew StringBuffer(\"Operation not supported for specified element type(s): \");\r", "-\t\t\t\t\tfor (int i = 0; i < fElements.length; i++) {\r", "-\t\t\t\t\t\tif (i > 0) {\r", "-\t\t\t\t\t\t\tbuff.append(\", \");\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbuff.append(fElements[0].getElementName());\r", "+ */\r", "+public String getMessage() {\r", "+\tif (getException() == null) {\r", "+\t\tswitch (getCode()) {\r", "+\t\t\tcase CORE_EXCEPTION :\r", "+\t\t\t\treturn Util.bind(\"status.coreException\"/*nonNLS*/);\r", "+\t\t\tcase BUILDER_INITIALIZATION_ERROR:\r", "+\t\t\t\treturn Util.bind(\"build.initializationError\"/*nonNLS*/);\r", "+\t\t\tcase BUILDER_SERIALIZATION_ERROR:\r", "+\t\t\t\treturn Util.bind(\"build.serializationError\"/*nonNLS*/);\r", "+\t\t\tcase DEVICE_PATH:\r", "+\t\t\t\treturn Util.bind(\"status.cannotUseDeviceOnPath\"/*nonNLS*/, getPath().toString());\r", "+\t\t\tcase DOM_EXCEPTION:\r", "+\t\t\t\treturn Util.bind(\"status.JDOMError\"/*nonNLS*/);\r", "+\t\t\tcase ELEMENT_DOES_NOT_EXIST:\r", "+\t\t\t\treturn Util.bind(\"element.doesNotExist\"/*nonNLS*/,fElements[0].getElementName());\r", "+\t\t\tcase EVALUATION_ERROR:\r", "+\t\t\t\treturn Util.bind(\"status.evaluationError\"/*nonNLS*/, getString());\r", "+\t\t\tcase INDEX_OUT_OF_BOUNDS:\r", "+\t\t\t\treturn Util.bind(\"status.indexOutOfBounds\"/*nonNLS*/);\r", "+\t\t\tcase INVALID_CONTENTS:\r", "+\t\t\t\treturn Util.bind(\"status.invalidContents\"/*nonNLS*/);\r", "+\t\t\tcase INVALID_DESTINATION:\r", "+\t\t\t\treturn Util.bind(\"status.invalidDestination\"/*nonNLS*/, fElements[0].getElementName());\r", "+\t\t\tcase INVALID_ELEMENT_TYPES:\r", "+\t\t\t\tStringBuffer buff= new StringBuffer(Util.bind(\"operation.notSupported\"/*nonNLS*/));\r", "+\t\t\t\tfor (int i= 0; i < fElements.length; i++) {\r", "+\t\t\t\t\tif (i > 0) {\r", "+\t\t\t\t\t\tbuff.append(\", \"/*nonNLS*/);\r", "-\t\t\t\t\treturn buff.toString();\r", "-\t\t\t\tcase INVALID_NAME :\r", "-\t\t\t\t\treturn \"Invalid name specified: \" + getString();\r", "-\t\t\t\tcase INVALID_PACKAGE :\r", "-\t\t\t\t\treturn \"Invalid package: \" + getString();\r", "-\t\t\t\tcase INVALID_PATH :\r", "-\t\t\t\t\treturn \"Invalid path: \" + (getPath() == null ? \"null\" : getPath().toString());\r", "-\t\t\t\tcase INVALID_PROJECT :\r", "-\t\t\t\t\treturn \"Invalid project: \" + getString();\r", "-\t\t\t\tcase INVALID_RESOURCE :\r", "-\t\t\t\t\treturn \"Invalid resource: \" + getString();\r", "-\t\t\t\tcase INVALID_RESOURCE_TYPE :\r", "-\t\t\t\t\treturn \"Invalid resource type for \" + getString();\r", "-\t\t\t\tcase INVALID_SIBLING :\r", "-\t\t\t\t\treturn \"Invalid sibling: \" + fElements[0].getElementName();\r", "-\t\t\t\tcase IO_EXCEPTION :\r", "-\t\t\t\t\treturn \"IO exception.\";\r", "-\t\t\t\tcase NAME_COLLISION :\r", "-\t\t\t\t\tif (fElements != null && fElements.length > 0) {\r", "-\t\t\t\t\t\tIJavaElement element = fElements[0];\r", "-\t\t\t\t\t\tString name = element.getElementName();\r", "-\t\t\t\t\t\tif (element instanceof IPackageFragment\r", "-\t\t\t\t\t\t\t&& name.equals(IPackageFragment.DEFAULT_PACKAGE_NAME)) {\r", "-\t\t\t\t\t\t\treturn \"Default package cannot be renamed.\";\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\treturn \"Name collision.\";\r", "-\t\t\t\tcase NO_ELEMENTS_TO_PROCESS :\r", "-\t\t\t\t\treturn \"Operation requires one or more elements.\";\r", "-\t\t\t\tcase NULL_NAME :\r", "-\t\t\t\t\treturn \"Operation requires a name.\";\r", "-\t\t\t\tcase NULL_PATH :\r", "-\t\t\t\t\treturn \"Operation requires a path.\";\r", "-\t\t\t\tcase NULL_STRING :\r", "-\t\t\t\t\treturn \"Operation requires a string.\";\r", "-\t\t\t\tcase PATH_OUTSIDE_PROJECT :\r", "-\t\t\t\t\treturn \"Illegal path specified: \" + getPath().toString();\r", "-\t\t\t\tcase READ_ONLY :\r", "+\t\t\t\t\tbuff.append(fElements[0].getElementName());\r", "+\t\t\t\t}\r", "+\t\t\t\treturn buff.toString();\r", "+\t\t\tcase INVALID_NAME:\r", "+\t\t\t\treturn Util.bind(\"status.invalidName\"/*nonNLS*/, getString());\r", "+\t\t\tcase INVALID_PACKAGE:\r", "+\t\t\t\treturn Util.bind(\"status.invalidPackage\"/*nonNLS*/, getString());\r", "+\t\t\tcase INVALID_PATH:\r", "+\t\t\t\treturn Util.bind(\"status.invalidPath\"/*nonNLS*/, getPath() == null ? \"null\"/*nonNLS*/ : getPath().toString());\r", "+\t\t\tcase INVALID_PROJECT:\r", "+\t\t\t\treturn Util.bind(\"status.invalidProject\"/*nonNLS*/, getString());\r", "+\t\t\tcase INVALID_RESOURCE:\r", "+\t\t\t\treturn Util.bind(\"status.invalidResource\"/*nonNLS*/, getString());\r", "+\t\t\tcase INVALID_RESOURCE_TYPE:\r", "+\t\t\t\treturn Util.bind(\"status.invalidResourceType\"/*nonNLS*/, getString());\r", "+\t\t\tcase INVALID_SIBLING:\r", "+\t\t\t\treturn Util.bind(\"status.invalidSibling\"/*nonNLS*/, fElements[0].getElementName());\r", "+\t\t\tcase IO_EXCEPTION:\r", "+\t\t\t\treturn Util.bind(\"status.IOException\"/*nonNLS*/);\r", "+\t\t\tcase NAME_COLLISION:\r", "+\t\t\t\tif (fElements != null && fElements.length > 0) {\r", "-\t\t\t\t\tif (element instanceof IPackageFragment\r", "-\t\t\t\t\t\t&& name.equals(IPackageFragment.DEFAULT_PACKAGE_NAME)) {\r", "-\t\t\t\t\t\tname = \"Default package\";\r", "+\t\t\t\t\tif (element instanceof IPackageFragment && name.equals(IPackageFragment.DEFAULT_PACKAGE_NAME)) {\r", "+\t\t\t\t\t\treturn Util.bind(\"operation.cannotRenameDefaultPackage\"/*nonNLS*/);\r", "-\t\t\t\t\treturn name + \" is read-only.\";\r", "-\t\t\t\tcase RELATIVE_PATH :\r", "-\t\t\t\t\treturn \"Operation requires an absolute path. Relative path specified was: \"\r", "-\t\t\t\t\t\t+ getPath().toString();\r", "-\t\t\t\tcase TARGET_EXCEPTION :\r", "-\t\t\t\t\treturn \"Target exception.\";\r", "-\t\t\t\tcase UPDATE_CONFLICT :\r", "-\t\t\t\t\treturn \"Update conflict.\";\r", "-\t\t\t\tcase NO_LOCAL_CONTENTS :\r", "-\t\t\t\t\treturn \"Cannot find local contents for resource: \" + getPath().toString();\r", "-\t\t\t}\r", "-\t\t\treturn getString();\r", "-\t\t} else {\r", "-\t\t\tif (getCode() == CORE_EXCEPTION) {\r", "-\t\t\t\treturn \"Core exception: \" + getException().getMessage();\r", "-\t\t\t}\r", "-\t\t\treturn getException().getMessage();\r", "+\t\t\t\t}\r", "+\t\t\t\treturn Util.bind(\"status.nameCollision\"/*nonNLS*/);\r", "+\t\t\tcase NO_ELEMENTS_TO_PROCESS:\r", "+\t\t\t\treturn Util.bind(\"operation.needElements\"/*nonNLS*/);\r", "+\t\t\tcase NULL_NAME:\r", "+\t\t\t\treturn Util.bind(\"operation.needName\"/*nonNLS*/);\r", "+\t\t\tcase NULL_PATH:\r", "+\t\t\t\treturn Util.bind(\"operation.needPath\"/*nonNLS*/);\r", "+\t\t\tcase NULL_STRING:\r", "+\t\t\t\treturn Util.bind(\"operation.needString\"/*nonNLS*/);\r", "+\t\t\tcase PATH_OUTSIDE_PROJECT:\r", "+\t\t\t\treturn Util.bind(\"operation.pathOutsideProject\"/*nonNLS*/, getString(), fElements[0].getElementName());\r", "+\t\t\tcase READ_ONLY:\r", "+\t\t\t\tIJavaElement element = fElements[0];\r", "+\t\t\t\tString name = element.getElementName();\r", "+\t\t\t\tif (element instanceof IPackageFragment && name.equals(IPackageFragment.DEFAULT_PACKAGE_NAME)) {\r", "+\t\t\t\t\treturn Util.bind(\"status.defaultPackageReadOnly\"/*nonNLS*/);\r", "+\t\t\t\t}\r", "+\t\t\t\treturn  Util.bind(\"status.readOnly\"/*nonNLS*/, name);\r", "+\t\t\tcase RELATIVE_PATH:\r", "+\t\t\t\treturn Util.bind(\"operation.needAbsolutePath\"/*nonNLS*/, getPath().toString());\r", "+\t\t\tcase TARGET_EXCEPTION:\r", "+\t\t\t\treturn Util.bind(\"status.targetException\"/*nonNLS*/);\r", "+\t\t\tcase UPDATE_CONFLICT:\r", "+\t\t\t\treturn Util.bind(\"status.updateConflict\"/*nonNLS*/);\r", "+\t\t\tcase NO_LOCAL_CONTENTS :\r", "+\t\t\t\treturn Util.bind(\"status.noLocalContents\"/*nonNLS*/, getPath().toString());\r", "+\t\t}\r", "+\t\treturn getString();\r", "+\t} else {\r", "+\t\tif (getCode() == CORE_EXCEPTION){\r", "+\t\t\treturn Util.bind(\"status.coreExceptionWithArg\"/*nonNLS*/, getException().getMessage());\r", "+\t\t}\r", "+\t\treturn getException().getMessage();\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8e4570417be62019b344e4f53d3b93c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "667082d03e8bfe408693d885daad756a164263a3", "commitAfterChange": "8c67d56825136ce0d7026162576ad6997e930bdc", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": " \tpublic boolean visit(ArrayCreation node)", "signatureAfterChange": " \tpublic boolean visit(ArrayCreation node)", "diff": ["+\t\tArrayType replacingType= arrayType;", "-\t\tint nNewBrackets= nOldBrackets;", "-\t\t\tArrayType replacingType= (ArrayType) typeEvent.getNewValue();", "+\t\t\treplacingType= (ArrayType) typeEvent.getNewValue();", "-\t\t\tnNewBrackets= replacingType.getDimensions(); // is replaced type", "-\t\tvoidVisit(arrayType);", "-", "-\t\t\tint offset= getScanner().getTokenStartOffset(TerminalTokens.TokenNameLBRACKET, arrayType.getStartPosition());", "-\t\t\t// dimension node with expressions", "+\t\t\t// dimension node with expressions and/or annotations", "-\t\t\tif (hasDimensionChanges) {", "-\t\t\t\tRewriteEvent[] events= dimEvent.getChildren();", "-\t\t\t\t// offset on first opening brace", "-\t\t\t\tfor (int i= 0; i < events.length; i++) {", "-\t\t\t\t\tRewriteEvent event= events[i];", "-\t\t\t\t\tint changeKind= event.getChangeKind();", "-\t\t\t\t\tif (changeKind == RewriteEvent.INSERTED) { // insert new dimension", "-\t\t\t\t\t\teditGroup= getEditGroup(event);", "-\t\t\t\t\t\tdoTextInsert(offset, \"[\", editGroup); //$NON-NLS-1$", "-\t\t\t\t\t\tdoTextInsert(offset, (ASTNode) event.getNewValue(), 0, false, editGroup);", "-\t\t\t\t\t\tdoTextInsert(offset, \"]\", editGroup); //$NON-NLS-1$", "-\t\t\t\t\t\tnNewBrackets--;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tASTNode elem= (ASTNode) event.getOriginalValue();", "-\t\t\t\t\t\tint elemEnd= elem.getStartPosition() + elem.getLength();", "-\t\t\t\t\t\tint endPos= getScanner().getTokenEndOffset(TerminalTokens.TokenNameRBRACKET, elemEnd);", "-\t\t\t\t\t\tif (changeKind == RewriteEvent.REMOVED) {", "+\t\t\tRewriteEvent[] events= hasDimensionChanges ? dimEvent.getChildren() : null;", "+\t\t\tArrayType currentLevel= (ArrayType) replacingType.getElementType().getParent();", "+\t\t\tint i=0, dimSize= (events == null) ? 0 : events.length;", "+\t\t\tType elementType= arrayType.getElementType();", "+\t\t\tint offset= elementType.getStartPosition() + elementType.getLength();", "+\t\t\twhile(currentLevel != null) {", "+\t\t\t\tif (node.getAST().apiLevel() >= AST.JLS8) {", "+\t\t\t\t\trewriteTypeAnnotations(currentLevel, ArrayType.ANNOTATIONS_PROPERTY, offset);", "+\t\t\t\t}", "+\t\t\t\tif (i < dimSize) {", "+\t\t\t\t\t offset= getScanner().getTokenEndOffset(TerminalTokens.TokenNameLBRACKET, offset);", "+\t\t\t\t\tif (hasDimensionChanges) {", "+\t\t\t\t\t\tRewriteEvent event= events[i];", "+\t\t\t\t\t\tint changeKind= event.getChangeKind();", "+\t\t\t\t\t\tif (changeKind == RewriteEvent.INSERTED) { // insert new dimension", "-\t\t\t\t\t\t\tdoTextRemoveAndVisit(offset, endPos - offset, elem, editGroup);", "-\t\t\t\t\t\t} else if (changeKind == RewriteEvent.REPLACED) {", "-\t\t\t\t\t\t\teditGroup= getEditGroup(event);", "-\t\t\t\t\t\t\tSourceRange range= getExtendedRange(elem);", "-\t\t\t\t\t\t\tint elemOffset= range.getStartPosition();", "-\t\t\t\t\t\t\tint elemLength= range.getLength();", "-\t\t\t\t\t\t\tdoTextRemoveAndVisit(elemOffset, elemLength, elem, editGroup);", "-\t\t\t\t\t\t\tdoTextInsert(elemOffset, (ASTNode) event.getNewValue(), 0, false, editGroup);", "-\t\t\t\t\t\t\tnNewBrackets--;", "+\t\t\t\t\t\t\tint endPos= getScanner().getTokenStartOffset(TerminalTokens.TokenNameRBRACKET, offset);", "+\t\t\t\t\t\t\tdoTextRemove(offset, endPos - offset, editGroup);", "+\t\t\t\t\t\t\tdoTextInsert(offset, (ASTNode) event.getNewValue(), 0, false, editGroup);", "-\t\t\t\t\t\t\tvoidVisit(elem);", "-\t\t\t\t\t\t\tnNewBrackets--;", "+\t\t\t\t\t\t\tASTNode elem= (ASTNode) event.getOriginalValue();", "+\t\t\t\t\t\t\tint elemEnd= elem.getStartPosition() + elem.getLength();", "+\t\t\t\t\t\t\tint endPos= getScanner().getTokenStartOffset(TerminalTokens.TokenNameRBRACKET, elemEnd);", "+\t\t\t\t\t\t\tif (changeKind == RewriteEvent.REMOVED) {", "+\t\t\t\t\t\t\t\teditGroup= getEditGroup(event);", "+\t\t\t\t\t\t\t\tdoTextRemoveAndVisit(offset, endPos - offset, elem, editGroup);", "+\t\t\t\t\t\t\t} else if (changeKind == RewriteEvent.REPLACED) {", "+\t\t\t\t\t\t\t\teditGroup= getEditGroup(event);", "+\t\t\t\t\t\t\t\tSourceRange range= getExtendedRange(elem);", "+\t\t\t\t\t\t\t\tint elemOffset= range.getStartPosition();", "+\t\t\t\t\t\t\t\tint elemLength= range.getLength();", "+\t\t\t\t\t\t\t\tdoTextRemoveAndVisit(elemOffset, elemLength, elem, editGroup);", "+\t\t\t\t\t\t\t\tdoTextInsert(elemOffset, (ASTNode) event.getNewValue(), 0, false, editGroup);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tvoidVisit(elem);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\toffset= endPos;", "-\t\t\t\t\t\tnOldBrackets--;", "+\t\t\t\t\t\toffset= retrieveRightBracketEndPosition(offset, 1, true);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tASTNode elem= (ASTNode) node.dimensions().get(i);", "+\t\t\t\t\t\tvoidVisit(elem);", "+\t\t\t\t\t\toffset= retrieveRightBracketEndPosition(offset, 1, true);", "+\t\t\t\t} else if (i < nOldBrackets) {", "+\t\t\t\t\toffset= retrieveRightBracketEndPosition(offset, 1, false);", "+\t\t\t\t} else {", "+\t\t\t\t\tdoTextInsert(offset, \"[]\", editGroup); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\toffset= doVisit(node, ArrayCreation.DIMENSIONS_PROPERTY, offset);", "+\t\t\t\ti++;", "+\t\t\t\tif (currentLevel == replacingType) break;", "+\t\t\t\tcurrentLevel= (ArrayType) currentLevel.getParent();", "-\t\t\tif (nOldBrackets != nNewBrackets) {", "-\t\t\t\tif (!hasDimensionChanges) {", "-\t\t\t\t\toffset= getScanner().getTokenEndOffset(TerminalTokens.TokenNameRBRACKET, offset);", "-\t\t\t\t}", "-\t\t\t\trewriteExtraDimensions(nOldBrackets, nNewBrackets, offset, editGroup);", "+\t\t\tif (i < nOldBrackets) {", "+\t\t\t\tint endPos= retrieveRightBracketEndPosition(offset, nOldBrackets - i, false);", "+\t\t\t\tdoTextRemove(offset, endPos - offset, editGroup);"]}], "num": 39061}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44968227687f267b942e41ead997f1e1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9829f9d924f782d0e19b36cd89109f17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "eedafe9176d5ca60193623550822839844fd4aae", "commitAfterChange": "16a0328cb89c7e4d508e8edfc85e1af4879c13c7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tJavaProject initialProject,  \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet rootIDs, \t\tObjectVector accumulatedEntries, \t\tMap preferredClasspaths, \t\tMap preferredOutputs) throws JavaModelException", "signatureAfterChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tClasspathEntry referringEntry, \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet rootIDs, \t\tObjectVector accumulatedEntries, \t\tMap preferredClasspaths, \t\tMap preferredOutputs) throws JavaModelException", "diff": ["-\t\tJavaProject initialProject, ", "+\t\tClasspathEntry referringEntry,", "-\t\t\t\t? getResolvedClasspath(preferredClasspath, preferredOutput, ignoreUnresolvedVariable, generateMarkerOnError, null)", "+\t\t\t\t? getResolvedClasspath(preferredClasspath, preferredOutput, ignoreUnresolvedVariable, generateMarkerOnError, null /*no reverse map*/)", "-\t\tboolean isInitialProject = this.equals(initialProject);", "+\t\tboolean isInitialProject = referringEntry == null;", "-\t\t\t\t", "-\t\t\t\taccumulatedEntries.add(entry);", "+\t\t\t\t// combine restrictions along the project chain", "+\t\t\t\tClasspathEntry combinedEntry = entry.combineWith(referringEntry);", "+\t\t\t\taccumulatedEntries.add(combinedEntry);", "-\t\t\t\t\t\tif (JavaProject.hasJavaNature(projRsc)) {\t\t\t\t", "+\t\t\t\t\t\tif (JavaProject.hasJavaNature(projRsc)) {", "-\t\t\t\t\t\t\t\tinitialProject, ", "+\t\t\t\t\t\t\t\tcombinedEntry, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf4ca80c44d41bc906f70798cda9db5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tClasspathEntry referringEntry, \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet rootIDs, \t\tObjectVector accumulatedEntries, \t\tMap preferredClasspaths, \t\tMap preferredOutputs) throws JavaModelException", "signatureAfterChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tClasspathEntry referringEntry, \t\tHashSet rootIDs, \t\tObjectVector accumulatedEntries) throws JavaModelException", "diff": ["-\t\tboolean ignoreUnresolvedVariable,", "-\t\tboolean generateMarkerOnError,", "-\t\tObjectVector accumulatedEntries,", "-\t\tMap preferredClasspaths,", "-\t\tMap preferredOutputs) throws JavaModelException {", "+\t\tObjectVector accumulatedEntries) throws JavaModelException {", "-\t\tIClasspathEntry[] preferredClasspath = preferredClasspaths != null ? (IClasspathEntry[])preferredClasspaths.get(this) : null;", "-\t\tIPath preferredOutput = preferredOutputs != null ? (IPath)preferredOutputs.get(this) : null;", "-\t\tIClasspathEntry[] immediateClasspath = ", "-\t\t\tpreferredClasspath != null ", "-\t\t\t\t? getResolvedClasspath(preferredClasspath, preferredOutput, ignoreUnresolvedVariable, generateMarkerOnError, null /*no reverse map*/)", "-\t\t\t\t: getResolvedClasspath(ignoreUnresolvedVariable, generateMarkerOnError, false/*don't returnResolutionInProgress*/);", "+\t\tIClasspathEntry[] resolvedClasspath = getResolvedClasspath();", "-\t\tfor (int i = 0, length = immediateClasspath.length; i < length; i++){", "-\t\t\tClasspathEntry entry = (ClasspathEntry) immediateClasspath[i];", "+\t\tfor (int i = 0, length = resolvedClasspath.length; i < length; i++){", "+\t\t\tClasspathEntry entry = (ClasspathEntry) resolvedClasspath[i];", "-\t\t\t\t\t\t\t\tignoreUnresolvedVariable, ", "-\t\t\t\t\t\t\t\tfalse /* no marker when recursing in prereq*/,", "-\t\t\t\t\t\t\t\trootIDs,", "-\t\t\t\t\t\t\t\taccumulatedEntries,", "-\t\t\t\t\t\t\t\tpreferredClasspaths,", "-\t\t\t\t\t\t\t\tpreferredOutputs);", "+\t\t\t\t\t\t\t\trootIDs, ", "+\t\t\t\t\t\t\t\taccumulatedEntries);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f82ef3b7597768bb330c24568b13cb91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5d2cd7f1076b45eee90e6733e80765abd1df3d6a", "commitAfterChange": "14e86a8141996732826e41cf3c8dd392bb1fd5ba", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tJavaProject initialProject,  \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet visitedProjects,  \t\tObjectVector accumulatedEntries) throws JavaModelException", "signatureAfterChange": "\t\t\t \tprivate void computeExpandedClasspath( \t\tJavaProject initialProject,  \t\tboolean ignoreUnresolvedVariable, \t\tboolean generateMarkerOnError, \t\tHashSet visitedProjects,  \t\tObjectVector accumulatedEntries, \t\tMap preferredClasspaths, \t\tMap preferredOutputs) throws JavaModelException", "diff": ["-\t\tObjectVector accumulatedEntries) throws JavaModelException {", "+\t\tObjectVector accumulatedEntries,", "+\t\tMap preferredClasspaths,", "+\t\tMap preferredOutputs) throws JavaModelException {", "+\t\tIClasspathEntry[] preferredClasspath = preferredClasspaths != null ? (IClasspathEntry[])preferredClasspaths.get(this) : null;", "+\t\tIPath preferredOutput = preferredOutputs != null ? (IPath)preferredOutputs.get(this) : null;", "-\t\t\tgetResolvedClasspath(ignoreUnresolvedVariable, generateMarkerOnError);", "+\t\t\tpreferredClasspath != null ", "+\t\t\t\t? getResolvedClasspath(preferredClasspath, preferredOutput, ignoreUnresolvedVariable, generateMarkerOnError, null)", "+\t\t\t\t: getResolvedClasspath(ignoreUnresolvedVariable, generateMarkerOnError);", "-\t\t\t\t\t\t\t\taccumulatedEntries);", "+\t\t\t\t\t\t\t\taccumulatedEntries,", "+\t\t\t\t\t\t\t\tpreferredClasspaths,", "+\t\t\t\t\t\t\t\tpreferredOutputs);"]}], "num": 15125}
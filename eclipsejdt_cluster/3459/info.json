{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1eeb3db1cc9ff3a280db621618f6da4d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2963a37dde3d83fee88b96f98eeab68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "ee4d83d7907d1c854850e7422153c97613dbc079", "commitAfterChange": "fb501c24a3207cb0f14cd1498d97d7099d6695b8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r protected void storeProblemsFor(IResource resource, IProblem[] problems) throws CoreException", "signatureAfterChange": "\r protected void storeProblemsFor(IResource resource, IProblem[] problems) throws CoreException", "diff": ["-\tboolean classPathIsIncorrect = false;\r", "+\tString missingClassFile = null;\r", "-\t\t\t\tclassPathIsIncorrect = true;\r", "+\t\t\t\tString[] args = problem.getArguments();\r", "+\t\t\t\tmissingClassFile = args[0];\r", "-\t\tif (classPathIsIncorrect)\r", "-\t\t\tthrow new IncompleteClassPathException();\r", "+\t\tif (missingClassFile != null)\r", "+\t\t\tthrow new IncompleteClassPathException(missingClassFile);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e922b2cbadf2ea0aee627f3d661e81b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "a02dc2635b15c289c546ca96a49f66d7180ade17", "commitAfterChange": "efe1773a267b3bdb803164d9b413b69c3685878f", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void rebindInnerPolies(BoundSet bounds, TypeBinding[] parameterTypes)", "signatureAfterChange": " \tpublic void rebindInnerPolies(BoundSet bounds, TypeBinding[] parameterTypes)", "diff": ["-\t\tacceptPendingPolyArguments(bounds, parameterTypes, this.inferenceKind == CHECK_VARARG);", "+\t\tboolean isVarargs = this.inferenceKind == CHECK_VARARG;", "+\t\tacceptPendingPolyArguments(bounds, parameterTypes, isVarargs);", "-\t\t\t\tMethodBinding original = innerMessage.binding().original();", "+\t\t\t\tMethodBinding binding = innerMessage.binding(getParameter(parameterTypes, i, isVarargs));", "+\t\t\t\tif (binding == null)", "+\t\t\t\t\tcontinue;", "+\t\t\t\tMethodBinding original = binding.original();"]}], "num": 3459}
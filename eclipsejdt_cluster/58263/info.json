{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31ca46493d290b8503b2febc9bb08f7f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2648244b2bd443f79416ba5fc9bdd8b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprotected IClasspathEntry[] decodeClasspath(String xmlClasspath, boolean createMarker, boolean logProblems, Map unknownElements)", "signatureAfterChange": " \tpublic IClasspathEntry[] decodeClasspath(String xmlClasspath, Map unknownElements) throws IOException, AssertionFailedException", "diff": ["+\tpublic IClasspathEntry[] decodeClasspath(String xmlClasspath, Map unknownElements) throws IOException, AssertionFailedException {", "-\t */", "-\tprotected IClasspathEntry[] decodeClasspath(String xmlClasspath, boolean createMarker, boolean logProblems, Map unknownElements) {", "-", "+\t\tStringReader reader = new StringReader(xmlClasspath);", "+\t\tElement cpElement;", "-\t\t\tif (xmlClasspath == null) return null;", "-\t\t\tStringReader reader = new StringReader(xmlClasspath);", "-\t\t\tElement cpElement;", "-\t", "-\t\t\ttry {", "-\t\t\t\tDocumentBuilder parser =", "-\t\t\t\t\tDocumentBuilderFactory.newInstance().newDocumentBuilder();", "-\t\t\t\tcpElement = parser.parse(new InputSource(reader)).getDocumentElement();", "-\t\t\t} catch (SAXException e) {", "-\t\t\t\tthrow new IOException(Messages.file_badFormat); ", "-\t\t\t} catch (ParserConfigurationException e) {", "-\t\t\t\tthrow new IOException(Messages.file_badFormat); ", "-\t\t\t} finally {", "-\t\t\t\treader.close();", "-\t\t\t}", "-\t", "-\t\t\tif (!cpElement.getNodeName().equalsIgnoreCase(\"classpath\")) { //$NON-NLS-1$", "-\t\t\t\tthrow new IOException(Messages.file_badFormat); ", "-\t\t\t}", "-\t\t\tNodeList list = cpElement.getElementsByTagName(\"classpathentry\"); //$NON-NLS-1$", "-\t\t\tint length = list.getLength();", "-\t", "-\t\t\tfor (int i = 0; i < length; ++i) {", "-\t\t\t\tNode node = list.item(i);", "-\t\t\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {", "-\t\t\t\t\tIClasspathEntry entry = ClasspathEntry.elementDecode((Element)node, this, unknownElements);", "-\t\t\t\t\tif (entry != null){", "-\t\t\t\t\t\tif (entry.getContentKind() == ClasspathEntry.K_OUTPUT) { ", "-\t\t\t\t\t\t\tdefaultOutput = entry; // separate output", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tpaths.add(entry);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (IOException e) {", "-\t\t\t// bad format", "-\t\t\tif (createMarker && this.project.isAccessible()) {", "-\t\t\t\t\tthis.createClasspathProblemMarker(new JavaModelStatus(", "-\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "-\t\t\t\t\t\t\tMessages.bind(Messages.classpath_xmlFormatError, new String[] {this.getElementName(), e.getMessage()}))); ", "-\t\t\t}", "-\t\t\tif (logProblems) {", "-\t\t\t\tUtil.log(e, ", "-\t\t\t\t\t\"Exception while retrieving \"+ this.getPath() //$NON-NLS-1$", "-\t\t\t\t\t+\"/.classpath, will mark classpath as invalid\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\treturn INVALID_CLASSPATH;", "-\t\t} catch (AssertionFailedException e) { ", "-\t\t\t// failed creating CP entries from file", "-\t\t\tif (createMarker && this.project.isAccessible()) {", "-\t\t\t\tthis.createClasspathProblemMarker(new JavaModelStatus(", "-\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "-\t\t\t\t\t\tMessages.bind(Messages.classpath_illegalEntryInClasspathFile, new String[] {this.getElementName(), e.getMessage()}))); ", "-\t\t\t}", "-\t\t\tif (logProblems) {", "-\t\t\t\tUtil.log(e, ", "-\t\t\t\t\t\"Exception while retrieving \"+ this.getPath() //$NON-NLS-1$", "-\t\t\t\t\t+\"/.classpath, will mark classpath as invalid\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\treturn INVALID_CLASSPATH;", "+\t\t\tDocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();", "+\t\t\tcpElement = parser.parse(new InputSource(reader)).getDocumentElement();", "+\t\t} catch (SAXException e) {", "+\t\t\tthrow new IOException(Messages.file_badFormat); ", "+\t\t} catch (ParserConfigurationException e) {", "+\t\t\tthrow new IOException(Messages.file_badFormat); ", "+\t\t} finally {", "+\t\t\treader.close();", "-\t\t// return an empty classpath is it size is 0, to differenciate from a null classpath", "+\t", "+\t\tif (!cpElement.getNodeName().equalsIgnoreCase(\"classpath\")) { //$NON-NLS-1$", "+\t\t\tthrow new IOException(Messages.file_badFormat); ", "+\t\t}", "+\t\tNodeList list = cpElement.getElementsByTagName(\"classpathentry\"); //$NON-NLS-1$", "+\t\tint length = list.getLength();", "+\t", "+\t\tfor (int i = 0; i < length; ++i) {", "+\t\t\tNode node = list.item(i);", "+\t\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {", "+\t\t\t\tIClasspathEntry entry = ClasspathEntry.elementDecode((Element)node, this, unknownElements);", "+\t\t\t\tif (entry != null){", "+\t\t\t\t\tif (entry.getContentKind() == ClasspathEntry.K_OUTPUT) { ", "+\t\t\t\t\t\tdefaultOutput = entry; // separate output", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tpaths.add(entry);", "+\t\t\t}", "+\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t// return a new empty classpath is it size is 0, to differenciate from an INVALID_CLASSPATH", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5f894659e989eada44960783b1caf5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tprivate void disassemble(IExtendedAnnotation extendedAnnotation, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": " \t \tprivate void disassemble(IExtendedAnnotation extendedAnnotation, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["-", "+\t", "-\t\t\tcase IExtendedAnnotationConstants.METHOD_RETURN_TYPE :", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_RETURN:", "-\t\t}", "-\t\t", "-\t\tswitch(targetType) {", "-\t\t\tcase IExtendedAnnotationConstants.WILDCARD_BOUND :", "-\t\t\t\tint wildcardLocationType = extendedAnnotation.getWildcardLocationType();", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocationtype, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(wildcardLocationType),", "-\t\t\t\t\t\t\tgetTargetType(wildcardLocationType),", "-\t\t\t\t\t\t}));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 3);", "-\t\t\t\tdisassembleTargetTypeContents(true, wildcardLocationType, extendedAnnotation, buffer, lineSeparator, tabNumber + 3, mode);", "-\t\t\t\tbreak;", "-\t\t\tcase IExtendedAnnotationConstants.WILDCARD_BOUND_GENERIC_OR_ARRAY :", "-\t\t\t\twildcardLocationType = extendedAnnotation.getWildcardLocationType();", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocationtype, new String[] {", "-\t\t\t\t\t\t\tInteger.toString(wildcardLocationType),", "-\t\t\t\t\t\t\tgetTargetType(wildcardLocationType),", "-\t\t\t\t\t\t}));", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 3);", "-\t\t\t\tdisassembleTargetTypeContents(true, wildcardLocationType, extendedAnnotation, buffer, lineSeparator, tabNumber + 3, mode);", "-\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "-\t\t\t\tbuffer.append(", "-\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_locations, new String[] {", "-\t\t\t\t\t\t\ttoString(extendedAnnotation.getLocations()),", "-\t\t\t\t\t\t}));", "-\t\t\t\tbreak;", "-\t\t\tdefault:", "+\t\tdisassembleTypePathContents(targetType, extendedAnnotation, buffer, lineSeparator, tabNumber, mode);"]}], "num": 58263}
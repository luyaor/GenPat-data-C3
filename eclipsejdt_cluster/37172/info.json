{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a47f01d8d1532a27b002c62f26dd69fa", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "946975cd17faf9d883b24082c717abd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "dfc3b8264596f4754baac29eef1af815f182c4f3", "commitAfterChange": "db0143bfca2398448195a62173050bd24d4fcb31", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r private void findMessageSends(char[] token, TypeBinding[] argTypes, Scope scope)", "signatureAfterChange": "\r \tprivate void findMessageSends(\r \t\tchar[] token,\r \t\tTypeBinding[] argTypes,\r \t\tScope scope,\r \t\tInvocationSite invocationSite)", "diff": ["-}\r", "-private void findMessageSends(char[] token, TypeBinding[] argTypes, Scope scope) {\r", "-\tif (token == null) return;\r", "-\tboolean staticsOnly = false; // need to know if we're in a static context (or inside a constructor)\r", "-\tint tokenLength = token.length;\r", "-\tObjectVector methodsFound = new ObjectVector();\r", "-\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "-\t\tswitch (scope.kind) {\r", "-\t\t\tcase Scope.METHOD_SCOPE :\r", "-\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)\r", "-\t\t\t\tMethodScope methodScope = (MethodScope) scope;\r", "-\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase Scope.CLASS_SCOPE :\r", "-\t\t\t\tClassScope classScope = (ClassScope) scope;\r", "-\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;\r", "-\t\t\t\tfindMethods(token, argTypes, enclosingType, classScope, methodsFound, staticsOnly, true);\r", "-\t\t\t\tstaticsOnly |= enclosingType.isStatic();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "-\t\t\t\tbreak done;\r", "-\t\t}\r", "-\t\tscope = scope.parent;\r", "-\t}\r", "-}\r", "+\tprivate void findMessageSends(\r", "+\t\tchar[] token,\r", "+\t\tTypeBinding[] argTypes,\r", "+\t\tScope scope,\r", "+\t\tInvocationSite invocationSite) {\r", "+\t\tif (token == null)\r", "+\t\t\treturn;\r", "+\t\tboolean staticsOnly = false;\r", "+\t\t// need to know if we're in a static context (or inside a constructor)\r", "+\t\tint tokenLength = token.length;\r", "+\t\tObjectVector methodsFound = new ObjectVector();\r", "+\t\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "+\t\t\tswitch (scope.kind) {\r", "+\t\t\t\tcase Scope.METHOD_SCOPE :\r", "+\t\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)\r", "+\t\t\t\t\tMethodScope methodScope = (MethodScope) scope;\r", "+\t\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase Scope.CLASS_SCOPE :\r", "+\t\t\t\t\tClassScope classScope = (ClassScope) scope;\r", "+\t\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;\r", "+\t\t\t\t\tfindMethods(\r", "+\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\targTypes,\r", "+\t\t\t\t\t\tenclosingType,\r", "+\t\t\t\t\t\tclassScope,\r", "+\t\t\t\t\t\tmethodsFound,\r", "+\t\t\t\t\t\tstaticsOnly,\r", "+\t\t\t\t\t\ttrue,\r", "+\t\t\t\t\t\tinvocationSite);\r", "+\t\t\t\t\tstaticsOnly |= enclosingType.isStatic();\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "+\t\t\t\t\tbreak done;\r", "+\t\t\t}\r", "+\t\t\tscope = scope.parent;\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af5aeb8f5e256542c22d1c2ebe664ebe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r private void findMessageSends(char[] token, TypeBinding[] argTypes, Scope scope)", "signatureAfterChange": "\r \tprivate void findMessageSends(\r \t\tchar[] token,\r \t\tTypeBinding[] argTypes,\r \t\tScope scope,\r \t\tInvocationSite invocationSite)", "diff": ["-}\r", "-private void findMessageSends(char[] token, TypeBinding[] argTypes, Scope scope) {\r", "-\tif (token == null) return;\r", "-\tboolean staticsOnly = false; // need to know if we're in a static context (or inside a constructor)\r", "-\tint tokenLength = token.length;\r", "-\tObjectVector methodsFound = new ObjectVector();\r", "-\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "-\t\tswitch (scope.kind) {\r", "-\t\t\tcase Scope.METHOD_SCOPE :\r", "-\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)\r", "-\t\t\t\tMethodScope methodScope = (MethodScope) scope;\r", "-\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase Scope.CLASS_SCOPE :\r", "-\t\t\t\tClassScope classScope = (ClassScope) scope;\r", "-\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;\r", "-\t\t\t\tfindMethods(token, argTypes, enclosingType, classScope, methodsFound, staticsOnly, true);\r", "-\t\t\t\tstaticsOnly |= enclosingType.isStatic();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "-\t\t\t\tbreak done;\r", "-\t\t}\r", "-\t\tscope = scope.parent;\r", "-\t}\r", "-}\r", "+\tprivate void findMessageSends(\r", "+\t\tchar[] token,\r", "+\t\tTypeBinding[] argTypes,\r", "+\t\tScope scope,\r", "+\t\tInvocationSite invocationSite) {\r", "+\t\tif (token == null)\r", "+\t\t\treturn;\r", "+\t\tboolean staticsOnly = false;\r", "+\t\t// need to know if we're in a static context (or inside a constructor)\r", "+\t\tint tokenLength = token.length;\r", "+\t\tObjectVector methodsFound = new ObjectVector();\r", "+\t\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "+\t\t\tswitch (scope.kind) {\r", "+\t\t\t\tcase Scope.METHOD_SCOPE :\r", "+\t\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)\r", "+\t\t\t\t\tMethodScope methodScope = (MethodScope) scope;\r", "+\t\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase Scope.CLASS_SCOPE :\r", "+\t\t\t\t\tClassScope classScope = (ClassScope) scope;\r", "+\t\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;\r", "+\t\t\t\t\tfindMethods(\r", "+\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\targTypes,\r", "+\t\t\t\t\t\tenclosingType,\r", "+\t\t\t\t\t\tclassScope,\r", "+\t\t\t\t\t\tmethodsFound,\r", "+\t\t\t\t\t\tstaticsOnly,\r", "+\t\t\t\t\t\ttrue,\r", "+\t\t\t\t\t\tinvocationSite);\r", "+\t\t\t\t\tstaticsOnly |= enclosingType.isStatic();\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "+\t\t\t\t\tbreak done;\r", "+\t\t\t}\r", "+\t\t\tscope = scope.parent;\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b74fedba3ac87142e72be1e3729f8f07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r private void findMessageSends(char[] token, TypeBinding[] argTypes, Scope scope)", "signatureAfterChange": "\r \tprivate void findMessageSends(\r \t\tchar[] token,\r \t\tTypeBinding[] argTypes,\r \t\tScope scope,\r \t\tInvocationSite invocationSite)", "diff": ["-}\r", "-private void findMessageSends(char[] token, TypeBinding[] argTypes, Scope scope) {\r", "-\tif (token == null) return;\r", "-\tboolean staticsOnly = false; // need to know if we're in a static context (or inside a constructor)\r", "-\tint tokenLength = token.length;\r", "-\tObjectVector methodsFound = new ObjectVector();\r", "-\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "-\t\tswitch (scope.kind) {\r", "-\t\t\tcase Scope.METHOD_SCOPE :\r", "-\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)\r", "-\t\t\t\tMethodScope methodScope = (MethodScope) scope;\r", "-\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase Scope.CLASS_SCOPE :\r", "-\t\t\t\tClassScope classScope = (ClassScope) scope;\r", "-\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;\r", "-\t\t\t\tfindMethods(token, argTypes, enclosingType, classScope, methodsFound, staticsOnly, true);\r", "-\t\t\t\tstaticsOnly |= enclosingType.isStatic();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "-\t\t\t\tbreak done;\r", "-\t\t}\r", "-\t\tscope = scope.parent;\r", "-\t}\r", "-}\r", "+\tprivate void findMessageSends(\r", "+\t\tchar[] token,\r", "+\t\tTypeBinding[] argTypes,\r", "+\t\tScope scope,\r", "+\t\tInvocationSite invocationSite) {\r", "+\t\tif (token == null)\r", "+\t\t\treturn;\r", "+\t\tboolean staticsOnly = false;\r", "+\t\t// need to know if we're in a static context (or inside a constructor)\r", "+\t\tint tokenLength = token.length;\r", "+\t\tObjectVector methodsFound = new ObjectVector();\r", "+\t\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "+\t\t\tswitch (scope.kind) {\r", "+\t\t\t\tcase Scope.METHOD_SCOPE :\r", "+\t\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)\r", "+\t\t\t\t\tMethodScope methodScope = (MethodScope) scope;\r", "+\t\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase Scope.CLASS_SCOPE :\r", "+\t\t\t\t\tClassScope classScope = (ClassScope) scope;\r", "+\t\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;\r", "+\t\t\t\t\tfindMethods(\r", "+\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\targTypes,\r", "+\t\t\t\t\t\tenclosingType,\r", "+\t\t\t\t\t\tclassScope,\r", "+\t\t\t\t\t\tmethodsFound,\r", "+\t\t\t\t\t\tstaticsOnly,\r", "+\t\t\t\t\t\ttrue,\r", "+\t\t\t\t\t\tinvocationSite);\r", "+\t\t\t\t\tstaticsOnly |= enclosingType.isStatic();\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "+\t\t\t\t\tbreak done;\r", "+\t\t\t}\r", "+\t\t\tscope = scope.parent;\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c383f138be6df87f6bb3baf21389c778", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r private void findMessageSends(char[] token, TypeBinding[] argTypes, Scope scope)", "signatureAfterChange": "\r \tprivate void findMessageSends(\r \t\tchar[] token,\r \t\tTypeBinding[] argTypes,\r \t\tScope scope,\r \t\tInvocationSite invocationSite)", "diff": ["-}\r", "-private void findMessageSends(char[] token, TypeBinding[] argTypes, Scope scope) {\r", "-\tif (token == null) return;\r", "-\tboolean staticsOnly = false; // need to know if we're in a static context (or inside a constructor)\r", "-\tint tokenLength = token.length;\r", "-\tObjectVector methodsFound = new ObjectVector();\r", "-\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "-\t\tswitch (scope.kind) {\r", "-\t\t\tcase Scope.METHOD_SCOPE :\r", "-\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)\r", "-\t\t\t\tMethodScope methodScope = (MethodScope) scope;\r", "-\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase Scope.CLASS_SCOPE :\r", "-\t\t\t\tClassScope classScope = (ClassScope) scope;\r", "-\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;\r", "-\t\t\t\tfindMethods(token, argTypes, enclosingType, classScope, methodsFound, staticsOnly, true);\r", "-\t\t\t\tstaticsOnly |= enclosingType.isStatic();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "-\t\t\t\tbreak done;\r", "-\t\t}\r", "-\t\tscope = scope.parent;\r", "-\t}\r", "-}\r", "+\tprivate void findMessageSends(\r", "+\t\tchar[] token,\r", "+\t\tTypeBinding[] argTypes,\r", "+\t\tScope scope,\r", "+\t\tInvocationSite invocationSite) {\r", "+\t\tif (token == null)\r", "+\t\t\treturn;\r", "+\t\tboolean staticsOnly = false;\r", "+\t\t// need to know if we're in a static context (or inside a constructor)\r", "+\t\tint tokenLength = token.length;\r", "+\t\tObjectVector methodsFound = new ObjectVector();\r", "+\t\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "+\t\t\tswitch (scope.kind) {\r", "+\t\t\t\tcase Scope.METHOD_SCOPE :\r", "+\t\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)\r", "+\t\t\t\t\tMethodScope methodScope = (MethodScope) scope;\r", "+\t\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase Scope.CLASS_SCOPE :\r", "+\t\t\t\t\tClassScope classScope = (ClassScope) scope;\r", "+\t\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;\r", "+\t\t\t\t\tfindMethods(\r", "+\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\targTypes,\r", "+\t\t\t\t\t\tenclosingType,\r", "+\t\t\t\t\t\tclassScope,\r", "+\t\t\t\t\t\tmethodsFound,\r", "+\t\t\t\t\t\tstaticsOnly,\r", "+\t\t\t\t\t\ttrue,\r", "+\t\t\t\t\t\tinvocationSite);\r", "+\t\t\t\t\tstaticsOnly |= enclosingType.isStatic();\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "+\t\t\t\t\tbreak done;\r", "+\t\t\t}\r", "+\t\t\tscope = scope.parent;\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f32f0ae0450112ac24c5c2ea6ef4b14d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r private void findMessageSends(char[] token, TypeBinding[] argTypes, Scope scope)", "signatureAfterChange": "\r \tprivate void findMessageSends(\r \t\tchar[] token,\r \t\tTypeBinding[] argTypes,\r \t\tScope scope,\r \t\tInvocationSite invocationSite)", "diff": ["-}\r", "-private void findMessageSends(char[] token, TypeBinding[] argTypes, Scope scope) {\r", "-\tif (token == null) return;\r", "-\tboolean staticsOnly = false; // need to know if we're in a static context (or inside a constructor)\r", "-\tint tokenLength = token.length;\r", "-\tObjectVector methodsFound = new ObjectVector();\r", "-\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "-\t\tswitch (scope.kind) {\r", "-\t\t\tcase Scope.METHOD_SCOPE :\r", "-\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)\r", "-\t\t\t\tMethodScope methodScope = (MethodScope) scope;\r", "-\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase Scope.CLASS_SCOPE :\r", "-\t\t\t\tClassScope classScope = (ClassScope) scope;\r", "-\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;\r", "-\t\t\t\tfindMethods(token, argTypes, enclosingType, classScope, methodsFound, staticsOnly, true);\r", "-\t\t\t\tstaticsOnly |= enclosingType.isStatic();\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "-\t\t\t\tbreak done;\r", "-\t\t}\r", "-\t\tscope = scope.parent;\r", "-\t}\r", "-}\r", "+\tprivate void findMessageSends(\r", "+\t\tchar[] token,\r", "+\t\tTypeBinding[] argTypes,\r", "+\t\tScope scope,\r", "+\t\tInvocationSite invocationSite) {\r", "+\t\tif (token == null)\r", "+\t\t\treturn;\r", "+\t\tboolean staticsOnly = false;\r", "+\t\t// need to know if we're in a static context (or inside a constructor)\r", "+\t\tint tokenLength = token.length;\r", "+\t\tObjectVector methodsFound = new ObjectVector();\r", "+\t\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "+\t\t\tswitch (scope.kind) {\r", "+\t\t\t\tcase Scope.METHOD_SCOPE :\r", "+\t\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)\r", "+\t\t\t\t\tMethodScope methodScope = (MethodScope) scope;\r", "+\t\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase Scope.CLASS_SCOPE :\r", "+\t\t\t\t\tClassScope classScope = (ClassScope) scope;\r", "+\t\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;\r", "+\t\t\t\t\tfindMethods(\r", "+\t\t\t\t\t\ttoken,\r", "+\t\t\t\t\t\targTypes,\r", "+\t\t\t\t\t\tenclosingType,\r", "+\t\t\t\t\t\tclassScope,\r", "+\t\t\t\t\t\tmethodsFound,\r", "+\t\t\t\t\t\tstaticsOnly,\r", "+\t\t\t\t\t\ttrue,\r", "+\t\t\t\t\t\tinvocationSite);\r", "+\t\t\t\t\tstaticsOnly |= enclosingType.isStatic();\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "+\t\t\t\t\tbreak done;\r", "+\t\t\t}\r", "+\t\t\tscope = scope.parent;\r", "+\t\t}\r", "+\t}\r"]}], "num": 37172}
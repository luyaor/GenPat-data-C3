{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a9435ea3a51b2bce1368355a4ec514e0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88ba46d0a541633f87fab77b716fe7f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "933a38236fec815027c8518edb1dfd53dabc40b0", "commitAfterChange": "4cdd1f8c2ff41620decbc1c851f00b9241512965", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static TypeBinding[] greaterLowerBound(TypeBinding[] types, Scope scope)", "signatureAfterChange": " \tpublic static TypeBinding[] greaterLowerBound(TypeBinding[] types, Scope scope, LookupEnvironment environment)", "diff": ["-\tpublic static TypeBinding[] greaterLowerBound(TypeBinding[] types, /*@Nullable*/ Scope scope) {", "+\tpublic static TypeBinding[] greaterLowerBound(TypeBinding[] types, /*@Nullable*/ Scope scope, LookupEnvironment environment) {", "-\t\t\t\t\t\tif (iType.original().isCompatibleWith(jType.original(), scope)", "-\t\t\t\t\t\t\t\t|| jType.original().isCompatibleWith(iType.original(), scope)) ", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t// parameterized types are incompatible due to incompatible type arguments => unsatisfiable", "+\t\t\t\t\t\t// if the wider of the two types (judged by originals) has type variables", "+\t\t\t\t\t\t// substitute those with their upper bounds and re-check (see https://bugs.eclipse.org/413958):", "+\t\t\t\t\t\tParameterizedTypeBinding wideType, narrowType;", "+\t\t\t\t\t\tif (iType.original().isCompatibleWith(jType.original(), scope)) {", "+\t\t\t\t\t\t\twideType = (ParameterizedTypeBinding) jType;", "+\t\t\t\t\t\t\tnarrowType = (ParameterizedTypeBinding) iType;", "+\t\t\t\t\t\t} else if (jType.original().isCompatibleWith(iType.original(), scope)) {", "+\t\t\t\t\t\t\twideType = (ParameterizedTypeBinding) iType;", "+\t\t\t\t\t\t\tnarrowType = (ParameterizedTypeBinding) jType;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (wideType.arguments == null)", "+\t\t\t\t\t\t\tcontinue; // assume we already have an error here", "+\t\t\t\t\t\tint numTypeArgs = wideType.arguments.length;", "+\t\t\t\t\t\tTypeBinding[] bounds = new TypeBinding[numTypeArgs];", "+\t\t\t\t\t\tfor (int k = 0; k < numTypeArgs; k++) {", "+\t\t\t\t\t\t\tTypeBinding argument = wideType.arguments[k];", "+\t\t\t\t\t\t\tbounds[k] = argument.isTypeVariable() ? ((TypeVariableBinding)argument).upperBound() : argument;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tReferenceBinding wideOriginal = (ReferenceBinding) wideType.original();", "+\t\t\t\t\t\tTypeBinding substitutedWideType =", "+\t\t\t\t\t\t\t\tenvironment.createParameterizedType(wideOriginal, bounds, wideOriginal.enclosingType());", "+\t\t\t\t\t\t// if the narrow type is compatible with the substituted wide type, we keep silent, ", "+\t\t\t\t\t\t// substituting type variables with proper types can still satisfy all constraints,", "+\t\t\t\t\t\t// otherwise ... ", "+\t\t\t\t\t\tif (!narrowType.isCompatibleWith(substitutedWideType, scope)) {", "+\t\t\t\t\t\t\t// ... parameterized types are incompatible due to incompatible type arguments => unsatisfiable"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f901b570919c2af9fcbba7b4ab64872b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "610e59fb60c0fcb5310aaedafa338742894279de", "commitAfterChange": "e6df2c2fa90a49042ae2dd553d5c33f38c0b292b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static TypeBinding[] greaterLowerBound(TypeBinding[] types, Scope scope)", "signatureAfterChange": " \tpublic static TypeBinding[] greaterLowerBound(TypeBinding[] types, Scope scope, LookupEnvironment environment)", "diff": ["-\tpublic static TypeBinding[] greaterLowerBound(TypeBinding[] types, /*@Nullable*/ Scope scope) {", "+\tpublic static TypeBinding[] greaterLowerBound(TypeBinding[] types, /*@Nullable*/ Scope scope, LookupEnvironment environment) {", "-\t\t\t\t\t\tif (iType.original().isCompatibleWith(jType.original(), scope)", "-\t\t\t\t\t\t\t\t|| jType.original().isCompatibleWith(iType.original(), scope)) ", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t// parameterized types are incompatible due to incompatible type arguments => unsatisfiable", "+\t\t\t\t\t\t// if the wider of the two types (judged by originals) has type variables", "+\t\t\t\t\t\t// substitute those with their upper bounds and re-check (see https://bugs.eclipse.org/413958):", "+\t\t\t\t\t\tParameterizedTypeBinding wideType, narrowType;", "+\t\t\t\t\t\tif (iType.original().isCompatibleWith(jType.original(), scope)) {", "+\t\t\t\t\t\t\twideType = (ParameterizedTypeBinding) jType;", "+\t\t\t\t\t\t\tnarrowType = (ParameterizedTypeBinding) iType;", "+\t\t\t\t\t\t} else if (jType.original().isCompatibleWith(iType.original(), scope)) {", "+\t\t\t\t\t\t\twideType = (ParameterizedTypeBinding) iType;", "+\t\t\t\t\t\t\tnarrowType = (ParameterizedTypeBinding) jType;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (wideType.arguments == null)", "+\t\t\t\t\t\t\tcontinue; // assume we already have an error here", "+\t\t\t\t\t\tint numTypeArgs = wideType.arguments.length;", "+\t\t\t\t\t\tTypeBinding[] bounds = new TypeBinding[numTypeArgs];", "+\t\t\t\t\t\tfor (int k = 0; k < numTypeArgs; k++) {", "+\t\t\t\t\t\t\tTypeBinding argument = wideType.arguments[k];", "+\t\t\t\t\t\t\tbounds[k] = argument.isTypeVariable() ? ((TypeVariableBinding)argument).upperBound() : argument;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tReferenceBinding wideOriginal = (ReferenceBinding) wideType.original();", "+\t\t\t\t\t\tTypeBinding substitutedWideType =", "+\t\t\t\t\t\t\t\tenvironment.createParameterizedType(wideOriginal, bounds, wideOriginal.enclosingType());", "+\t\t\t\t\t\t// if the narrow type is compatible with the substituted wide type, we keep silent, ", "+\t\t\t\t\t\t// substituting type variables with proper types can still satisfy all constraints,", "+\t\t\t\t\t\t// otherwise ... ", "+\t\t\t\t\t\tif (!narrowType.isCompatibleWith(substitutedWideType, scope)) {", "+\t\t\t\t\t\t\t// ... parameterized types are incompatible due to incompatible type arguments => unsatisfiable"]}], "num": 10204}
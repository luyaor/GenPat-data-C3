{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2fcf539ceff86d3d95ccd78ebee1bcb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d5cc8d6c39a6f6b8dc07ac20b1b4807", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 129, "signatureBeforeChange": " \tprivate int retrieveRightBraceOrSemiColonPosition(MethodDeclaration node, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": " \tprotected int retrieveRightBraceOrSemiColonPosition(int start, int end)", "diff": ["-\t */", "-\tprivate int retrieveRightBraceOrSemiColonPosition(MethodDeclaration node, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration) {", "-\t\tint start = node.getStartPosition();", "-\t\tthis.scanner.resetTo(start, methodDeclaration.declarationSourceEnd);", "-\t\ttry {", "-\t\t\tint token;", "-\t\t\tint braceCounter = 0;", "-\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameLBRACE :", "-\t\t\t\t\t\tbraceCounter++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameRBRACE :", "-\t\t\t\t\t\tbraceCounter--;", "-\t\t\t\t\t\tif (braceCounter == 0) {", "-\t\t\t\t\t\t\treturn this.scanner.currentPosition;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameSEMICOLON :", "-\t\t\t\t\t\tif (braceCounter == 0) {", "-\t\t\t\t\t\t\treturn this.scanner.currentPosition;", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t\treturn -1;", "-\t}", "+\t */", "+\tprotected int retrieveRightBraceOrSemiColonPosition(int start, int end) {", "+\t\tthis.scanner.resetTo(start, end);", "+\t\ttry {", "+\t\t\tint token;", "+\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\tswitch(token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameRBRACE :", "+\t\t\t\t\t\treturn this.scanner.currentPosition - 1;", "+\t\t\t\t\tcase TerminalTokens.TokenNameSEMICOLON :", "+\t\t\t\t\t\treturn this.scanner.currentPosition - 1;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t\treturn -1;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81d36a93dae8b9240ad132fecf8eb7a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "33e03339ed2881c9f793c3a49497633bbac5c8a8", "commitAfterChange": "09c3f545375b31028657f0b8044c5cbcb5324abc", "methodNumberBeforeChange": 187, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void recordCompletionOnReference()", "signatureAfterChange": " protected void checkAndSetModifiers(int flag)", "diff": ["+}", "+protected void checkAndSetModifiers(int flag) {", "+\tsuper.checkAndSetModifiers(flag);", "+\t", "+\tif (this.isInsideMethod()) {", "+\t\tthis.hasUnusedModifiers = true;", "+\t}", "-public void recordCompletionOnReference(){", "-", "-\tif (currentElement instanceof RecoveredType){", "-\t\tRecoveredType recoveredType = (RecoveredType)currentElement;", "-", "-\t\t/* filter out cases where scanner is still inside type header */", "-\t\tif (!recoveredType.foundOpeningBrace) return;", "-", "-\t\t/* generate a pseudo field with a completion on type reference */", "-\t\tcurrentElement.add(", "-\t\t\tnew CompletionOnFieldType(this.getTypeReference(0), false), 0);", "-\t\treturn;", "-\t}", "-\tif (!diet) return; // only record references attached to types", "-", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d95d3ac8454adcf0c505e964f13c9497", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "b9151e9319708f3d004c77f114c4f35584a87c41", "commitAfterChange": "ee4aaa82998d38e6753ee8cc828566dd18d4910f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tICompilationUnit unit, \t\tboolean resolveBindings, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic static CompilationUnit parseCompilationUnit(char[] source)", "diff": ["-\t */", "-\tpublic static CompilationUnit parseCompilationUnit(", "-\t\tICompilationUnit unit,", "-\t\tboolean resolveBindings,", "-\t\tWorkingCopyOwner owner,", "-\t\tIProgressMonitor monitor) {", "-\t\t", "-\t\tif (unit == null) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\ttry {", "-\t\t\tASTParser c = ASTParser.newParser(AST.LEVEL_2_0);", "-\t\t\tc.setSource(unit);", "-\t\t\tc.setResolveBindings(resolveBindings);", "-\t\t\tc.setWorkingCopyOwner(owner);", "-\t\t\tASTNode result = c.createAST(monitor);", "-\t\t\treturn (CompilationUnit) result;", "-\t\t} catch (IllegalStateException e) {", "-\t\t\t// convert ASTParser's complaints into old form", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc3025129568870d7a9710675dab3292", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "c99e3bd7df24eb7b0133eb18cfef3f12a0f60a4d", "commitAfterChange": "639c767e46ba1affc29fe53d2703bf4af137793b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate Compiler( \t\t\tINameEnvironment environment, \t\t\tIErrorHandlingPolicy policy, \t\t\tMap settings, \t\t\tfinal ICompilerRequestor requestor, \t\t\tIProblemFactory problemFactory, \t\t\tPrintWriter out, \t\t\tboolean parseLiteralExpressionsAsConstants, \t\t\tboolean storeAnnotations, \t\t\tboolean flag, \t\t\tboolean statementsRecovery)", "signatureAfterChange": " \tpublic Compiler( \t\t\tINameEnvironment environment, \t\t\tIErrorHandlingPolicy policy, \t\t\tCompilerOptions options, \t\t\tfinal ICompilerRequestor requestor, \t\t\tIProblemFactory problemFactory, \t\t\tPrintWriter out)", "diff": ["-\tprivate Compiler(", "+\tpublic Compiler(", "-\t\t\tMap settings,", "+\t\t\tCompilerOptions options,", "-\t\t\tPrintWriter out,", "-\t\t\tboolean parseLiteralExpressionsAsConstants,", "-\t\t\tboolean storeAnnotations,", "-\t\t\tboolean flag,", "-\t\t\tboolean statementsRecovery) {", "-", "-\t\t// create a problem handler given a handling policy", "-\t\tthis.options = new CompilerOptions(settings);", "-\t\tthis.options.performStatementsRecovery = statementsRecovery;", "-\t\tif (flag) { // boolean parameters are significant, pass them down", "-\t\t\tthis.options.parseLiteralExpressionsAsConstants = parseLiteralExpressionsAsConstants;", "-\t\t\tthis.options.storeAnnotations = storeAnnotations;", "-\t\t}", "+\t\t\tPrintWriter out) {", "+\t\t", "+\t\tthis.options = options;"]}], "num": 39192}
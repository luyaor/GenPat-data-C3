{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a997437428aaea8bdd9c15f3836aea64", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27ec0ab4527252dfd5add3614aed8f43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "3916c67b0128c74e08a07f109332d68e11705964", "commitAfterChange": "db24d1d0025b319685ad3bf80253e7a07fb708a2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t\t\tpublic void run(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \t\tpublic boolean accept(File project)", "diff": ["+\tclass FullSourceProjectsFilter implements FileFilter {", "+\t\tpublic boolean accept(File project) {", "+\t\t\tif (project.isDirectory()) {", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(project.getName(), \".\");", "+\t\t\t\tString token = tokenizer.nextToken();", "+\t\t\t\tif (token.equals(\"org\") && tokenizer.hasMoreTokens()) {", "+\t\t\t\t\ttoken = tokenizer.nextToken();", "+\t\t\t\t\tif (token.equals(\"junit\") && !tokenizer.hasMoreTokens()) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (token.equals(\"apache\")) {", "+\t\t\t\t\t\ttoken = tokenizer.nextToken();", "+\t\t\t\t\t\tif (token.equals(\"ant\") || token.equals(\"lucene\")) {", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (token.equals(\"eclipse\") && tokenizer.hasMoreTokens()) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn false;", "+\t\t}", "-\t\tworkspace.run(new IWorkspaceRunnable() {", "-\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "-\t\t\t\tFile targetWorkspaceDir = new File(targetWorkspacePath);", "-\t\t\t\tString[] projectNames = targetWorkspaceDir.list();", "-\t\t\t\tfor (int i = 0, length = projectNames.length; i < length; i++) {", "-\t\t\t\t\tString projectName = projectNames[i];", "-\t\t\t\t\tif (\".metadata\".equals(projectName)) continue;", "-\t\t\t\t\tIProject project = workspaceRoot.getProject(projectName);", "-\t\t\t\t\tproject.create(monitor);", "-\t\t\t\t\tproject.open(monitor);", "-\t\t\t\t}", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "820793820cc7d4f213f7e0aa023d1175", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "77a3f0ef0843986d234b9abed2484dc331ca0785", "commitAfterChange": "ea1f546a7a5336c97828f68872ee2e37a2bb6f08", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " public void processPathEntries(final int defaultSize, final ArrayList paths,  \t\t\tfinal String currentPath, String customEncoding, boolean isSourceOnly, \t\t\tboolean rejectDestinationPathOnJars) \t\tthrows InvalidInputException", "signatureAfterChange": " public void processPathEntries(final int defaultSize, final ArrayList paths,  \t\t\tfinal String currentPath, String customEncoding, boolean isSourceOnly, \t\t\tboolean rejectDestinationPathOnJars) \t\tthrows InvalidInputException", "diff": ["+\tArrayList tokens = new ArrayList();", "+\twhile (tokenizer.hasMoreTokens()) {", "+\t\ttokens.add(tokenizer.nextToken());", "+\t}", "-\tfinal int destinatonPathStart = 9;", "+\tfinal int destinationPathStart = 9;", "+\tfinal int bracketOpened = 10;", "+\t// '.*[.*'", "+\tfinal int bracketClosed = 11;", "+\t// '.*([.*])+'", "+\t", "-\twhile (tokenizer.hasMoreTokens() && state != error) {", "-\t\ttoken = tokenizer.nextToken();", "+\tint cursor = 0, tokensNb = tokens.size(), bracket = -1;", "+\twhile (cursor < tokensNb && state != error) {", "+\t\ttoken = (String) tokens.get(cursor++);", "+\t\t\tcase bracketOpened:", "+\t\t\tcase bracketClosed:", "+\t\t\t\tcursor = bracket + 1;", "+\t\t\t\tstate = rulesStart;", "+\t\t\t\tbreak;", "-\t\t\t\tstate = rulesStart;", "+\t\t\t\tbracket = cursor - 1;", "+\t\t\tcase bracketClosed:", "+\t\t\t\tstate = bracketOpened;", "-\t\t\t\tstate = destinatonPathStart;", "+\t\t\t\tstate = destinationPathStart;", "+\t\t\tcase bracketOpened:", "+\t\t\tcase bracketOpened:", "+\t\t\t\tstate = bracketClosed;", "+\t\t\t\tbreak;", "+\t\t\tcase bracketClosed:", "-\t\t\tcase destinatonPathStart:", "+\t\t\tcase destinationPathStart:", "+\t\t\tcase bracketClosed:", "+\t\t\t\tfor (int i = bracket; i < cursor ; i++) {", "+\t\t\t\t\tcurrentClasspathName += (String) tokens.get(i);", "+\t\t\t\t}", "+\t\t\t\tstate = readyToClose;", "+\t\t\t\tbreak;", "+\t\t\tcase bracketOpened:", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tif (state == bracketClosed && cursor == tokensNb) {", "+\t\t\tcursor = bracket + 1;", "+\t\t\tstate = rulesStart;", "+\t\tcase bracketOpened:", "+\t\tcase bracketClosed:"]}], "num": 14459}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "550e64b0c911815516ca06c894778a5b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "511f387f1619a6405b5a377e8a5cb57a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java", "commitBeforeChange": "ffcab3bbd38103e7f6861237d076c93f4488ed08", "commitAfterChange": "47edf8779d5fde154f431bcc7b03f2f397cce5d5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(MethodDeclaration node)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(MethodDeclaration node)", "diff": ["+\t\t\tthis.wrapParentIndex = this.tm.findFirstTokenInLine(this.tm.firstIndexIn(node.getName(), -1));", "-\t\t\tif (node.getReturnType2() != null && !node.modifiers().isEmpty())", "-\t\t\t\tthis.wrapIndexes.add(this.tm.firstIndexIn(node.getReturnType2(), -1));", "+\t\t\tif (node.getReturnType2() != null) {", "+\t\t\t\tint returTypeIndex = this.tm.firstIndexIn(node.getReturnType2(), -1);", "+\t\t\t\tif (returTypeIndex != this.wrapParentIndex)", "+\t\t\t\t\tthis.wrapIndexes.add(returTypeIndex);", "+\t\t\t}", "-\t\t\tthis.wrapParentIndex = this.tm.findFirstTokenInLine(this.tm.firstIndexIn(node.getName(), -1));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bab5a5cfb0d5265188ffc543c18a6be8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Block.java", "commitBeforeChange": "593b7c498e35f1adb3620eff493d0f4b5e771b68", "commitAfterChange": "3b34d278ba258a10a58d188a2047da908229b941", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " @Override public boolean doesNotCompleteNormally()", "signatureAfterChange": " @Override public boolean doesNotCompleteNormally()", "diff": ["+// A block does not complete normally if the last statement which we presume is reachable does not complete normally.", "-\treturn this.statements != null && this.statements.length > 0 && this.statements[this.statements.length - 1].doesNotCompleteNormally();", "+\tint length = this.statements == null ? 0 : this.statements.length;", "+\treturn length > 0 && this.statements[length - 1].doesNotCompleteNormally();", "+}"]}], "num": 1712}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac3d87c2051be9e3a74a4ffaf4425bf5", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52fef86c8a0d5203133ebfd345cdc252", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic boolean visit(LocalTypeDeclaration typeDeclaration, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope scope)", "diff": ["-public class TypeDeclarationVisitor extends AbstractSyntaxTreeVisitorAdapter {", "-\tpublic boolean visit(LocalTypeDeclaration typeDeclaration, BlockScope scope) {", "-\t\tReferenceBinding binding = typeDeclaration.binding;", "-\t\tif (SuperTypeNamesCollector.this.matches(binding))", "-\t\t\tSuperTypeNamesCollector.this.collectSuperTypeNames(binding);", "-\t\treturn true;", "-\t}", "+public class TypeDeclarationVisitor extends ASTVisitor {", "+\tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope scope) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56b1c700ae550b8fbc64181abe5e1a18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic boolean visit( \t\t\tAnonymousLocalTypeDeclaration anonymousTypeDeclaration, \t\t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(ConstructorDeclaration constructorDeclaration, ClassScope scope)", "diff": ["-public class LocalDeclarationVisitor extends AbstractSyntaxTreeVisitorAdapter {", "-\tpublic boolean visit(", "-\t\t\tAnonymousLocalTypeDeclaration anonymousTypeDeclaration,", "-\t\t\tBlockScope scope) {", "-\t\tif ((matchSet.matchContainer & SearchPattern.METHOD) != 0) {", "-\t\t\tmatchSet.checkMatching(anonymousTypeDeclaration);", "-\t\t}", "-\t\treturn true; ", "-\t}", "+public class NoClassNoMethodDeclarationVisitor extends AbstractSyntaxTreeVisitorAdapter {", "+\tpublic boolean visit(ConstructorDeclaration constructorDeclaration, ClassScope scope) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6c6645ec1a685fac43f68c401e06a65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic boolean visit( \t\t\tAnonymousLocalTypeDeclaration anonymousTypeDeclaration, \t\t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope scope)", "diff": ["-public class LocalDeclarationVisitor extends AbstractSyntaxTreeVisitorAdapter {", "-\tpublic boolean visit(", "-\t\t\tAnonymousLocalTypeDeclaration anonymousTypeDeclaration,", "-\t\t\tBlockScope scope) {", "-\t\tnotifySourceElementRequestor(anonymousTypeDeclaration, sourceType == null);", "-\t\treturn false; // don't visit members as this was done during notifySourceElementRequestor(...)", "-\t}", "+public class LocalDeclarationVisitor extends ASTVisitor {", "+\tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope scope) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d13eeb45538effc92247db0233031945", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic boolean visit( \t\t\tAnonymousLocalTypeDeclaration anonymousTypeDeclaration, \t\t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(AnonymousLocalTypeDeclaration anonymousTypeDeclaration, BlockScope scope)", "diff": ["-public class LocalDeclarationVisitor extends AbstractSyntaxTreeVisitorAdapter {", "-\tpublic boolean visit(", "-\t\t\tAnonymousLocalTypeDeclaration anonymousTypeDeclaration,", "-\t\t\tBlockScope scope) {", "-\t\tif ((matchSet.matchContainer & SearchPattern.METHOD) != 0) {", "-\t\t\tmatchSet.checkMatching(anonymousTypeDeclaration);", "-\t\t}", "-\t\treturn true; ", "-\t}", "+public class MethodButNoClassDeclarationVisitor extends NoClassNoMethodDeclarationVisitor {", "+\tpublic boolean visit(AnonymousLocalTypeDeclaration anonymousTypeDeclaration, BlockScope scope) {", "+\t\tmatchSet.checkMatching(anonymousTypeDeclaration);", "+\t\treturn true; ", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e98a83e552e281df05f682cfbf37c461", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic boolean visit( \t\t\tConstructorDeclaration constructorDeclaration, \t\t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit(ConstructorDeclaration constructorDeclaration, ClassScope scope)", "diff": ["-\t}", "-\tpublic boolean visit(", "-\t\t\tConstructorDeclaration constructorDeclaration,", "-\t\t\tClassScope scope) {", "-\t\tif ((matchSet.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\tmatchSet.checkMatching(constructorDeclaration);", "-\t\t}", "+public class ClassButNoMethodDeclarationVisitor extends AbstractSyntaxTreeVisitorAdapter {", "+\tpublic boolean visit(ConstructorDeclaration constructorDeclaration, ClassScope scope) {", "+\t\tmatchSet.checkMatching(constructorDeclaration);", "+\t\treturn (constructorDeclaration.bits & AstNode.HasLocalTypeMASK) != 0; // continue only if it has local type", "+\t}"]}], "num": 62801}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b7ae1fa312db5c4a704a4c6fe2e8714", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11f815313bb426d057cb82a45cf9b5ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "7a73f29da5ea73cce41fc54b0fc3ad302149f476", "commitAfterChange": "01023454337af8ada2f5699e5de8fcd7a8d40840", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": "  \tpublic Type convertType(TypeReference typeReference)", "diff": ["-\t\t\t\tint end = retrieveEndOfElementTypeNamePosition(sourceStart, sourceStart + length);", "+\t\t\t\tint[] positions = retrieveEndOfElementTypeNamePosition(sourceStart, sourceStart + length);", "+\t\t\t\tint end = positions[1];", "-\t\t\t\tint end = retrieveEndOfElementTypeNamePosition(sourceStart, sourceStart + length);", "+\t\t\t\tint[] positions = retrieveEndOfElementTypeNamePosition(sourceStart, sourceStart + length);", "+\t\t\t\tint end = positions[1];", "-\t\t\t\tsimpleName.setSourceRange(sourceStart, end - sourceStart + 1);", "+\t\t\t\tif (positions[0] != -1) {", "+\t\t\t\t\tsimpleName.setSourceRange(positions[0], end - positions[0] + 1);", "+\t\t\t\t} else {", "+\t\t\t\t\tsimpleName.setSourceRange(sourceStart, end - sourceStart + 1);\t\t\t\t\t", "+\t\t\t\t}", "+", "-\t\t\t\tint end = retrieveEndOfElementTypeNamePosition(sourceStart, sourceStart + length);", "+\t\t\t\tint[] positions = retrieveEndOfElementTypeNamePosition(sourceStart, sourceStart + length);", "+\t\t\t\tint end = positions[1];", "-\t\t\t\tsimpleName.setSourceRange(sourceStart, end - sourceStart + 1);", "+\t\t\t\tif (positions[0] != -1) {", "+\t\t\t\t\tsimpleName.setSourceRange(positions[0], end - positions[0] + 1);", "+\t\t\t\t} else {", "+\t\t\t\t\tsimpleName.setSourceRange(sourceStart, end - sourceStart + 1);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26ed570233307fd66c6ee21bf192579a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "14369aade824a8ea9cd172f06aeb63b163bb9bf0", "commitAfterChange": "76049c710d8a15447cdfbafce1296b7824e89c76", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "  private void rehash()", "signatureAfterChange": "  private void rehash()", "diff": ["+", "+\tnewScope.projectPaths.ensureCapacity(this.projectPaths.size());", "-\t\tif ((currentPath = this.relativePaths[i]) != null)", "-\t\t\tnewScope.add(currentPath, this.containerPaths[i], this.isPkgPath[i], this.pathRestrictions == null ? null : this.pathRestrictions[i]);", "+\t\tif ((currentPath = this.relativePaths[i]) != null) {", "+\t\t\tint idx = this.projectIndexes[i];", "+\t\t\tString projectPath = idx == -1 ? null : (String)this.projectPaths.get(idx);", "+\t\t\tnewScope.add(projectPath, currentPath, this.containerPaths[i], this.isPkgPath[i], this.pathRestrictions == null ? null : this.pathRestrictions[i]);", "+\t\t}", "+\tthis.projectPaths = newScope.projectPaths;", "+\tthis.projectIndexes = newScope.projectIndexes;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c17d082c1dc3a4c2e0d7757dd2bfbd27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "b2a1a7d064fd5695fce4ad30f84d3e52d57db8d6", "commitAfterChange": "58d495f741112fe1313f49af60925198c18bb8e1", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void process(CompilationUnitDeclaration unit, int i)", "signatureAfterChange": " \tpublic void process(CompilationUnitDeclaration unit, int i)", "diff": ["-", "+\t\tlong parseStart = System.currentTimeMillis();", "+\t\t", "+", "+\t\tlong resolveStart = System.currentTimeMillis();", "+\t\tthis.stats.parseTime += resolveStart - parseStart;", "+\t\tlong analyzeStart = System.currentTimeMillis();", "+\t\tthis.stats.resolveTime += analyzeStart - resolveStart;", "+", "+", "+\t\tlong generateStart = System.currentTimeMillis();", "+\t\tthis.stats.analyzeTime += generateStart - analyzeStart;", "+\t\tthis.stats.generateTime += System.currentTimeMillis() - generateStart;", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db80b0491f60940f1ea1ba80bba44105", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "b2a1a7d064fd5695fce4ad30f84d3e52d57db8d6", "commitAfterChange": "58d495f741112fe1313f49af60925198c18bb8e1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void compile(ICompilationUnit[] sourceUnits)", "signatureAfterChange": " \tpublic void compile(ICompilationUnit[] sourceUnits)", "diff": ["+\t\tthis.stats.startTime = System.currentTimeMillis();", "+\t\t\t\tthis.stats.lineCount += unit.compilationResult.lineSeparatorPositions.length;", "+\t\t\t\tlong acceptStart = System.currentTimeMillis();", "+\t\t\t\tthis.stats.generateTime += System.currentTimeMillis() - acceptStart; // record accept time as part of generation", "+\t\t\tthis.stats.endTime = System.currentTimeMillis();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebac8faa05f505f284b69469afd38d57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "3955cb5ed164f548af2b37e146846edf5ccfd711", "commitAfterChange": "c52fdadde45f5a8a52e99f0d46c9c166e07a1017", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "  private void denseCycleDetection(final int numberOfParticipants) throws CoreException", "signatureAfterChange": "  private void denseCycleDetection(final int numberOfParticipants) throws CoreException", "diff": ["-//\tfinal long[] start = new long[1];", "-//\tfinal long[] time = new long[1];", "+\tfinal long[] start = new long[1];", "+\tfinal long[] time = new long[1];", "-//\t\t\t\t\tlong start = System.currentTimeMillis(); // time spent in individual CP setting", "+\t\t\t\t\tlong start = System.currentTimeMillis(); // time spent in individual CP setting", "-//\t\t\t\t\ttime[0] += System.currentTimeMillis() - start;", "+\t\t\t\t\ttime[0] += System.currentTimeMillis() - start;", "-//\t\t\t\tstart[0] = System.currentTimeMillis(); // time spent in delta refresh", "+\t\t\t\tstart[0] = System.currentTimeMillis(); // time spent in delta refresh", "-//\t\ttime[0] += System.currentTimeMillis()-start[0];", "-//\t\tSystem.out.println(\"Dense cycle check (\"+numberOfParticipants+\" participants) : \"+ time[0]+\" ms\");", "+\t\ttime[0] += System.currentTimeMillis()-start[0];", "+\t\tSystem.out.println(\"Dense cycle check (\"+numberOfParticipants+\" participants) : \"+ time[0]+\" ms\");"]}], "num": 27389}
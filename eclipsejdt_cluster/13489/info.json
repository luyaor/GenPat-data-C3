{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eef38e204ac2e16a3f5292d88746eace", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b3ea804cae8af9b517b4286c6d0d248", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "c184ff0d8868e4e4a23c45be667e27d2482aa33f", "commitAfterChange": "5f9b5f6bde6ddbfdbfa46be3b81806de99313773", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic FlowInfo addInitializationsFrom(FlowInfo inits)", "signatureAfterChange": " \tpublic FlowInfo addInitializationsFrom(FlowInfo inits)", "diff": ["-\t\tdefiniteNulls |= otherInits.definiteNulls;", "+\t\tdefiniteNulls = (definiteNulls | otherInits.definiteNulls) & ~otherInits.definiteNonNulls;", "-\t\tdefiniteNonNulls |= otherInits.definiteNonNulls;", "+\t\tdefiniteNonNulls = (definiteNonNulls | otherInits.definiteNonNulls) & ~otherInits.definiteNulls;", "+\t\t// fix-up null/non-null infos since cannot overlap: <defN1:0,defNoN1:1>  + <defN2:1,defNoN2:0>  --> <defN:0,defNon:0>", "-\t\t\t\t\twhile (i < length) {", "+\t\t\t\t\tfor (; i < length; i++) {", "-\t\t\t\t\t\textraDefiniteNulls[i] |= otherInits.extraDefiniteNulls[i];", "-\t\t\t\t\t\textraDefiniteNonNulls[i] |= otherInits.extraDefiniteNonNulls[i++];", "+\t\t\t\t\t\textraDefiniteNulls[i] = (extraDefiniteNulls[i] | otherInits.extraDefiniteNulls[i]) & ~otherInits.extraDefiniteNonNulls[i];", "+\t\t\t\t\t\textraDefiniteNonNulls[i] = (extraDefiniteNonNulls[i] | otherInits.extraDefiniteNonNulls[i]) & ~otherInits.extraDefiniteNulls[i];", "-\t\t\t\t\twhile (i < otherLength) {", "-\t\t\t\t\t\textraPotentialInits[i] = otherInits.extraPotentialInits[i++];", "+\t\t\t\t\tfor (; i < otherLength; i++) {", "+\t\t\t\t\t\textraPotentialInits[i] = otherInits.extraPotentialInits[i];", "-\t\t\t\t\twhile (i < otherLength) {", "+\t\t\t\t\tfor (; i < otherLength; i++) {", "-\t\t\t\t\t\textraDefiniteNulls[i] |= otherInits.extraDefiniteNulls[i];", "-\t\t\t\t\t\textraDefiniteNonNulls[i] |= otherInits.extraDefiniteNonNulls[i++];", "+\t\t\t\t\t\textraDefiniteNulls[i] = (extraDefiniteNulls[i] | otherInits.extraDefiniteNulls[i]) & ~otherInits.extraDefiniteNonNulls[i];", "+\t\t\t\t\t\textraDefiniteNonNulls[i] = (extraDefiniteNonNulls[i] | otherInits.extraDefiniteNonNulls[i]) & ~otherInits.extraDefiniteNulls[i];", "-\t\t\t\t\twhile (i < length) {", "+\t\t\t\t\tfor (; i < length; i++) {", "-\t\t\t\t\t\textraDefiniteNonNulls[i++] = 0;", "+\t\t\t\t\t\textraDefiniteNonNulls[i] = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ec7664581ea76f0b097d36eaefac350", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "0ef15ab3e77b7c293b04de9a99ac186cbe5a3c0f", "commitAfterChange": "dd6bc11628a6724c7599b64bbc9d6dfcf59daa40", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic FlowInfo addInitializationsFrom(FlowInfo inits)", "signatureAfterChange": " \tpublic FlowInfo addInitializationsFrom(FlowInfo inits)", "diff": ["+\t\t// union of definitely null variables, ", "+\t\tdefiniteNulls |= otherInits.definiteNulls;", "+\t\t// union of definitely non null variables,", "+\t\tdefiniteNonNulls |= otherInits.definiteNonNulls;", "+", "-\t\t\t\t\t\textraPotentialInits[i] |= otherInits.extraPotentialInits[i++];", "+\t\t\t\t\t\textraPotentialInits[i] |= otherInits.extraPotentialInits[i];", "+\t\t\t\t\t\textraDefiniteNulls[i] |= otherInits.extraDefiniteNulls[i];", "+\t\t\t\t\t\textraDefiniteNonNulls[i] |= otherInits.extraDefiniteNonNulls[i++];", "-\t\t\t\t\t\textraPotentialInits[i] |= otherInits.extraPotentialInits[i++];", "+\t\t\t\t\t\textraPotentialInits[i] |= otherInits.extraPotentialInits[i];", "+\t\t\t\t\t\textraDefiniteNulls[i] |= otherInits.extraDefiniteNulls[i];", "+\t\t\t\t\t\textraDefiniteNonNulls[i] |= otherInits.extraDefiniteNonNulls[i++];", "-\t\t\t\t\twhile (i < length)", "-\t\t\t\t\t\textraDefiniteInits[i++] = 0;", "+\t\t\t\t\twhile (i < length) {", "+\t\t\t\t\t\textraDefiniteInits[i] = 0;", "+\t\t\t\t\t\textraDefiniteNulls[i] = 0;", "+\t\t\t\t\t\textraDefiniteNonNulls[i++] = 0;", "+\t\t\t\t\t}", "+\t\t\t\tSystem.arraycopy(otherInits.extraDefiniteNulls, 0, (extraDefiniteNulls = new long[otherLength]), 0, otherLength);\t\t\t", "+\t\t\t\tSystem.arraycopy(otherInits.extraDefiniteNonNulls, 0, (extraDefiniteNonNulls = new long[otherLength]), 0, otherLength);\t\t\t"]}], "num": 13489}
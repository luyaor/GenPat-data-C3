{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "982717a25592a8a2adbad8151a9182bf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f6dfe7810f9b2f810ca01668be167a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedSourceFolderManager.java", "commitBeforeChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "commitAfterChange": "6fea7eafdd413dccff31028f8da1f1ac6859e6fe", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic GeneratedSourceFolderManager(AptProject aptProject)", "signatureAfterChange": " \tpublic GeneratedSourceFolderManager(AptProject aptProject)", "diff": ["-\t\t// get generated source dir from config ", "-\t\t// default value is set in org.eclipse.jdt.apt.core.internal.util.AptCorePreferenceInitializer", "-\t\t_generatedSourceFolderName = AptConfig.getString( javaProject, AptPreferenceConstants.APT_GENSRCDIR);", "-\t\t// properly initialize the GeneratedFileManager if project path is up-to-date and the generated ", "-\t\t// source folder is there.", "-\t\tfinal IFolder folder = getFolder();", "-\t\tif(folder.exists()){", "-\t\t\tboolean uptodate = false;", "-\t\t\ttry{", "-\t\t\t\tuptodate = ClasspathUtil.isProjectClassPathUpToDate(javaProject, null, folder.getFullPath(), null);", "-\t\t\t}catch(JavaModelException e){", "-\t\t\t\te.printStackTrace();", "+\t\t// Set _generatedSourceFolder only if APT is enabled, the folder exists,", "+\t\t// and the folder is on the classpath.  ", "+\t\t// Otherwise leave it null, which will cause us to try to fix things later on.", "+\t\tif (AptConfig.isEnabled(javaProject)) {", "+\t\t\tfinal IFolder folder = getFolder();", "+\t\t\tif (folder.exists()) {", "+\t\t\t\tif (isOnClasspath(folder)) {", "+\t\t\t\t\t_generatedSourceFolder = folder;", "+\t\t\t\t}", "-\t\t\tif( uptodate )", "-\t\t\t\t_generatedSourceFolder = folder;", "-\t\t}\t", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d481de311b5ea4315847a0d292d66eca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "0fcbdf3f242eca695398990480b5252f47b13157", "commitAfterChange": "bdb5fd6b326428cc9f0c1c9c5974b9a701aacf91", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic GeneratedFileManager(final AptProject aptProject)", "signatureAfterChange": " \tpublic GeneratedFileManager(final AptProject aptProject, final GeneratedSourceFolderManager gsfm)", "diff": ["-\tpublic GeneratedFileManager(final AptProject aptProject) {", "-\t\t_aptProject = aptProject;", "-\t\tfinal IJavaProject javaProject = aptProject.getJavaProject();", "-\t\t", "-\t\t// get generated source dir from config ", "-\t\t// default value is set in org.eclipse.jdt.apt.core.internal.util.AptCorePreferenceInitializer", "-\t\t_generatedSourceFolderName = AptConfig.getString( javaProject, AptPreferenceConstants.APT_GENSRCDIR);", "-\t\t// properly initialize the GeneratedFileManager if project path is up-to-date and the generated ", "-\t\t// source folder is there.", "-\t\tfinal IFolder folder = javaProject.getProject().getFolder(_generatedSourceFolderName);", "-\t\tif(folder.exists()){", "-\t\t\tboolean uptodate = false;", "-\t\t\ttry{", "-\t\t\t\tuptodate = isProjectClassPathUpToDate(javaProject, null, folder.getFullPath(), null);", "-\t\t\t}catch(JavaModelException e){", "-\t\t\t\te.printStackTrace();", "-\t\t\t}", "-\t\t\tif( uptodate )", "-\t\t\t\t_generatedSourceFolder = folder;", "-\t\t}\t", "+\tpublic GeneratedFileManager(final AptProject aptProject, final GeneratedSourceFolderManager gsfm) {", "+\t\t_jProject = aptProject.getJavaProject();", "+\t\t_gsfm = gsfm;"]}], "num": 62195}
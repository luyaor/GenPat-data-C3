{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "15d8d5705318a0cec1e82e052ad922b1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "069c8987134d300960eee48d7a7247d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "a0fd6dae6dbb696f05ef352cad9852f287a5aeec", "commitAfterChange": "3f1cbb254c604c7416bb668e3ca0c2f6d90b8afc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate Object reduceReferenceExpressionCompatibility(ReferenceExpression reference, InferenceContext18 inferenceContext)", "signatureAfterChange": "  \tprivate Object reduceReferenceExpressionCompatibility(ReferenceExpression reference, InferenceContext18 inferenceContext)", "diff": ["-\t\t\treference.resolveTypeExpecting(reference.enclosingScope, t);", "-\t\t\tMethodBinding compileTimeDecl = reference.binding;", "-\t\t\tif (compileTimeDecl == null || !compileTimeDecl.isValidBinding())", "+\t\t\t// Note: we currently don't distinguish search for a potentially-applicable method from searching the compiler-time declaration,", "+\t\t\t// hence reusing the method binding from above", "+\t\t\tMethodBinding compileTimeDecl = potentiallyApplicable;", "+\t\t\tif (!compileTimeDecl.isValidBinding())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ffefdf7c26587086c018968ff43c827", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public MethodBinding findMethodForArray(ArrayBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " public MethodBinding findMethodForArray(ArrayBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\tif (!areParametersAssignable(methodBinding.parameters, argumentTypes))", "+\t    MethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "+\t    if (compatibleMethod == null)", "+\t    methodBinding = compatibleMethod;", "-\t\t\treturn new ProblemMethodBinding(selector, methodBinding.parameters, methodBinding.declaringClass, NotVisible);", "+\t\t\treturn new ProblemMethodBinding(methodBinding, selector, methodBinding.parameters, NotVisible);"]}], "num": 65125}
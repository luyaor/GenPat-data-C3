{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4fb883c6388a8b08a73de9cd8b782120", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b636564277e7433518396b1a634a0fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FakedTrackingVariable.java", "commitBeforeChange": "96ef6a1342ca74d72728b34641d9caf80d6d6997", "commitAfterChange": "2dc8c8168c71292aca0a9b4cb34971871475b18a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static void analyseCloseableAllocation(BlockScope scope, FlowInfo flowInfo, AllocationExpression allocation)", "signatureAfterChange": " \tpublic static void analyseCloseableAllocation(BlockScope scope, FlowInfo flowInfo, AllocationExpression allocation)", "diff": ["-\t\t\t\t\tif (innerTracker == allocation.closeTracker)", "-\t\t\t\t\t\treturn; // self wrap (res = new Res(res)) -> neither change (here) nor remove (below)", "+\t\t\t\t\tFakedTrackingVariable currentInner = innerTracker;", "+\t\t\t\t\tdo {", "+\t\t\t\t\t\tif (currentInner == allocation.closeTracker)", "+\t\t\t\t\t\t\treturn; // self wrap (res = new Res(res)) -> neither change (here) nor remove (below)", "+\t\t\t\t\t\t// also check for indirect cycles, see https://bugs.eclipse.org/368709", "+\t\t\t\t\t\tcurrentInner = currentInner.innerTracker;", "+\t\t\t\t\t} while (currentInner != null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b980667c7e924f5bd32ea4ea3af45d12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FakedTrackingVariable.java", "commitBeforeChange": "96ef6a1342ca74d72728b34641d9caf80d6d6997", "commitAfterChange": "2dc8c8168c71292aca0a9b4cb34971871475b18a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static void preConnectTrackerAcrossAssignment(ASTNode location, LocalVariableBinding local, Expression rhs)", "signatureAfterChange": " \tpublic static void preConnectTrackerAcrossAssignment(ASTNode location, LocalVariableBinding local, Expression rhs)", "diff": ["-\t\t\t\t((AllocationExpression)rhs).closeTracker = closeTracker;", "+\t\t\t\tAllocationExpression allocation = (AllocationExpression)rhs;", "+\t\t\t\tallocation.closeTracker = closeTracker;", "+\t\t\t\tif (allocation.arguments != null && allocation.arguments.length > 0) {", "+\t\t\t\t\t// also push into nested allocations, see https://bugs.eclipse.org/368709", "+\t\t\t\t\tpreConnectTrackerAcrossAssignment(location, local, allocation.arguments[0]);", "+\t\t\t\t}"]}], "num": 5835}
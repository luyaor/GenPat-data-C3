{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb5cdef0eba86e346c8e97a2c669d8ef", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a20f3cfd0f6b4ee3db49c34312dcaf1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "ff2fe8665a4cc197831509bf8ec85eecac35f7cf", "commitAfterChange": "b035f7a4c467249c63cc869fd5f75e4bad8cf303", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic void testNullTypeInference2f()", "signatureAfterChange": " \tpublic void testNullTypeInference2f()", "diff": ["-\t\t\t\"2. WARNING in PolyNull.java (at line 9)\\n\" + ", "-\t\t\t\"\treturn extract(i -> needNN(i), \\\"ola\\\");\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'String\\' needs unchecked conversion to conform to \\'@NonNull String\\'\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in PolyNull.java (at line 9)\\n\" + ", "+\t\t\t\"2. ERROR in PolyNull.java (at line 9)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3de61a89ce8709be44ad59b1eebe316b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "2070676b1e20c45846e614809eff55257373d539", "commitAfterChange": "3e7114db66d7154ea4072c5af4dcd065de055bb8", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void testConditional1()", "signatureAfterChange": " \tpublic void testConditional1()", "diff": ["-\t// TODO(Stephan): Fix lub computation to create an intersection type when annotations differ. See comment in Scope#lowerUpperBound.", "-\t\t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\treturn f == 0 ? good : dubious;\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'List<String>\\' needs unchecked conversion to conform to \\'List<@NonNull String>\\'\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\treturn f == 2 ? dubious : good;\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'List<String>\\' needs unchecked conversion to conform to \\'List<@NonNull String>\\'\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f977275571c718bd6359684b91d4192", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "a170a70f9fd89b9996c94f318397ff4dca1db782", "commitAfterChange": "25c55f5a3b95044fb71ce56ee0bb0a797b58daa1", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void testBinary05()", "signatureAfterChange": " \tpublic void testBinary05()", "diff": ["-\t// TODO(Stephan) : 3rd error message looks weird. We need to clone and set the bits for allocation expression or otherwise handle.", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"3. WARNING in Y1.java (at line 6)\\n\" + ", "-\t\t\t\t\"\tx.<@NonNull Object>foo(new Object());\\n\" + ", "-\t\t\t\t\"\t                       ^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Null type safety (type annotations): The expression of type \\'Object\\' needs unchecked conversion to conform to \\'@NonNull Object\\'\\n\" + ", "-\t\t\t\t\"----------\\n\"", "-\t\t\t\t);", "+\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a96ddf39963fdea5b3dd216c2a3efec7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void testBinary05()", "signatureAfterChange": " \tpublic void testBinary05()", "diff": ["+\t// TODO(Stephan) : 3rd error message looks weird. We need to clone and set the bits for allocation expression or otherwise handle.", "-\t\t\t\t\"Null constraint mismatch: The type '@NonNull Object' is not a valid substitute for the type parameter 'S' which is constrained as '@Nullable'\\n\" + ", "+\t\t\t\t\"Null constraint mismatch: The type \\'@NonNull Object\\' is not a valid substitute for the type parameter \\'S\\' which is constrained as \\'@Nullable\\'\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in Y1.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tx.<@NonNull Object>foo(new Object());\\n\" + ", "+\t\t\t\t\"\t                       ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Null type safety (type annotations): The expression of type \\'Object\\' needs unchecked conversion to conform to \\'@NonNull Object\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc189edb9c750547b96bca3b6cc4af4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  \tpublic void testConditional1()", "signatureAfterChange": " \tpublic void testConditional1()", "diff": ["-", "+\t// TODO(Stephan): Fix lub computation to create an intersection type when annotations differ. See comment in Scope#lowerUpperBound.", "-\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "-\t\t\t\"\treturn f == 0 ? good : dubious;\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Null type safety (type annotations): The expression of type \\'List<String>\\' needs unchecked conversion to conform to \\'List<@NonNull String>\\'\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 8)\\n\" + "]}], "num": 64802}
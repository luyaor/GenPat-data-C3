{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8261c7b59e955481eaf172eeea324962", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03babc343ec8a6ae31f97f472e6631e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "d6269129563f98355327b1ab05b64efc1651a96c", "commitAfterChange": "3a42960d70f16619a40a10161fc61740ab2695a4", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 154, "signatureBeforeChange": " public void incompatibleReturnType(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " public void incompatibleReturnType(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-\t\tsourceEnd = returnType.sourceEnd;", "+\t\tif (returnType instanceof ParameterizedSingleTypeReference) {", "+\t\t\tParameterizedSingleTypeReference typeReference = (ParameterizedSingleTypeReference) returnType;", "+\t\t\tTypeReference[] typeArguments = typeReference.typeArguments;", "+\t\t\tif (typeArguments[typeArguments.length - 1].sourceEnd > typeReference.sourceEnd) {", "+\t\t\t\tsourceEnd = retrieveClosingAngleBracketPosition(typeReference.sourceEnd);", "+\t\t\t} else {", "+\t\t\t\tsourceEnd = returnType.sourceEnd;", "+\t\t\t}", "+\t\t} else if (returnType instanceof ParameterizedQualifiedTypeReference) {", "+\t\t\tParameterizedQualifiedTypeReference typeReference = (ParameterizedQualifiedTypeReference) returnType;", "+\t\t\tsourceEnd = retrieveClosingAngleBracketPosition(typeReference.sourceEnd);", "+\t\t} else {", "+\t\t\tsourceEnd = returnType.sourceEnd;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea7ea8270fa337b97f34c951f3ff55fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "78e8a5c1a2e383b6d515ba3aab0d674e5548befa", "commitAfterChange": "4cb6b481d6e3c4ba44985d7b9c454fbe1bc42a7d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tITypeBinding resolveType(Type type)", "signatureAfterChange": "\r \tITypeBinding resolveType(Type type)", "diff": ["-\t\tTypeReference typeReference = (TypeReference) this.newAstToOldAst.get(type);\r", "-\t\tif (typeReference == null) {\r", "-\t\t\treturn super.resolveType(type);\r", "+\t\tAstNode node = (AstNode) this.newAstToOldAst.get(type);\r", "+\t\tif (node != null) {\r", "+\t\t\tif (node instanceof TypeReference) {\r", "+\t\t\t\tTypeReference typeReference = (TypeReference) node;\r", "+\t\t\t\treturn this.getTypeBinding(typeReference.binding);\r", "+\t\t\t} else if (node instanceof SingleNameReference) {\r", "+\t\t\t\tSingleNameReference singleNameReference = (SingleNameReference) node;\r", "+\t\t\t\tif (singleNameReference.isTypeReference()) {\r", "+\t\t\t\t\treturn this.getTypeBinding((ReferenceBinding)singleNameReference.binding);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// it should be a type reference\r", "+\t\t\t\t\treturn null;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "-\t\treturn this.getTypeBinding(typeReference.binding);\r", "+\t\treturn null;\r"]}], "num": 18844}
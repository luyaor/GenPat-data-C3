{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36338b8b4a617ed8b11e233663cf0a66", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce027507b3b1138f3af1395ee363eda3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "370fc9797484c96c0e1fdf0a7794604c16e52ccb", "commitAfterChange": "c50ca866bcc8a651da6c9f1ec9e6c29c39dc7ade", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " private boolean isCompatibleWith0(TypeBinding otherType)", "signatureAfterChange": " private boolean isCompatibleWith0(TypeBinding otherType, Scope captureScope)", "diff": ["-private boolean isCompatibleWith0(TypeBinding otherType) {", "+private boolean isCompatibleWith0(TypeBinding otherType, /*@Nullable*/ Scope captureScope) {", "-\t\t\tif (otherReferenceType.isInterface()) // could be annotation type", "-\t\t\t\treturn implementsInterface(otherReferenceType, true);", "+\t\t\tif (otherReferenceType.isInterface()) { // could be annotation type", "+\t\t\t\tif (implementsInterface(otherReferenceType, true))", "+\t\t\t\t\treturn true;", "+\t\t\t\tif (this instanceof TypeVariableBinding && captureScope != null) {", "+\t\t\t\t\tTypeVariableBinding typeVariable = (TypeVariableBinding) this;", "+\t\t\t\t\tif (typeVariable.firstBound instanceof ParameterizedTypeBinding) {", "+\t\t\t\t\t\tTypeBinding bound = typeVariable.firstBound.capture(captureScope, -1); // no position needed as this capture will never escape this context", "+\t\t\t\t\t\treturn bound.isCompatibleWith(otherReferenceType);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5183413a53b682993c239607bd7780a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "ead8e814ab499b7622eb426e1befbcf339b11ce8", "commitAfterChange": "557b79fe942a0c2ecd096efec77764eeda1e9de9", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " private boolean isCompatibleWith0(TypeBinding otherType)", "signatureAfterChange": " private boolean isCompatibleWith0(TypeBinding otherType, Scope captureScope)", "diff": ["-private boolean isCompatibleWith0(TypeBinding otherType) {", "+private boolean isCompatibleWith0(TypeBinding otherType, /*@Nullable*/ Scope captureScope) {", "-\t\t\tif (otherReferenceType.isInterface()) // could be annotation type", "-\t\t\t\treturn implementsInterface(otherReferenceType, true);", "+\t\t\tif (otherReferenceType.isInterface()) { // could be annotation type", "+\t\t\t\tif (implementsInterface(otherReferenceType, true))", "+\t\t\t\t\treturn true;", "+\t\t\t\tif (this instanceof TypeVariableBinding && captureScope != null) {", "+\t\t\t\t\tTypeVariableBinding typeVariable = (TypeVariableBinding) this;", "+\t\t\t\t\tif (typeVariable.firstBound instanceof ParameterizedTypeBinding) {", "+\t\t\t\t\t\tTypeBinding bound = typeVariable.firstBound.capture(captureScope, -1); // no position needed as this capture will never escape this context", "+\t\t\t\t\t\treturn bound.isCompatibleWith(otherReferenceType);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 13552}
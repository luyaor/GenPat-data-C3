{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f2299dd9be100ed9324fba459771446", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "533b98b21f8276b409608da851c8cd42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NamedMember.java", "commitBeforeChange": "1252d6bab1f9d9bcd087d91685fabf29808e5435", "commitAfterChange": "fe80fb2f9320067d19b473914ec4b9e11a8d423c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprotected String getKey(IMethod method, boolean forceOpen) throws JavaModelException", "signatureAfterChange": " \t \tprotected String getKey(IMethod method, boolean forceOpen) throws JavaModelException", "diff": ["+\t\t// type parameters", "+\t\tif (forceOpen) {", "+\t\t\tITypeParameter[] typeParameters = method.getTypeParameters();", "+\t\t\tint length = typeParameters.length;", "+\t\t\tif (length > 0) {", "+\t\t\t\tkey.append('<');", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tITypeParameter typeParameter = typeParameters[i];", "+\t\t\t\t\tString[] bounds = typeParameter.getBounds();", "+\t\t\t\t\tint boundsLength = bounds.length;", "+\t\t\t\t\tchar[][] boundSignatures = new char[boundsLength][];", "+\t\t\t\t\tfor (int j = 0; j < boundsLength; j++) {", "+\t\t\t\t\t\tboundSignatures[j] = Signature.createCharArrayTypeSignature(bounds[j].toCharArray(), method.isBinary());", "+\t\t\t\t\t\tCharOperation.replace(boundSignatures[j], '.', '/');", "+\t\t\t\t\t}", "+\t\t\t\t\tchar[] sig = Signature.createTypeParameterSignature(typeParameter.getElementName().toCharArray(), boundSignatures);", "+\t\t\t\t\tkey.append(sig);", "+\t\t\t\t}", "+\t\t\t\tkey.append('>');", "+\t\t\t}", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bd5feb8c3d2c490caf8652499035fd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "23d1f03b5721ce2de9c0b6bda12e344c2ac468ba", "commitAfterChange": "966ae4bbaf97367f3fc38a9b2c2261f477021842", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void notifySourceElementRequestor(FieldDeclaration fieldDeclaration)", "signatureAfterChange": " private void notifySourceElementRequestor(TypeParameter[] typeParameters)", "diff": ["+private void notifySourceElementRequestor(TypeParameter[] typeParameters) {", "+\tif (typeParameters != null) {", "+\t\tint typeParametersLength = typeParameters.length;", "+\t\tfor (int i = 0; i < typeParametersLength; i++) {", "+\t\t\tTypeParameter typeParameter = typeParameters[i];", "+\t\t\tTypeReference[] bounds = typeParameter.bounds;", "+\t\t\tchar[][] typeParameterBounds = null;", "+\t\t\tif (bounds != null) {", "+\t\t\t\tint boundLength = bounds.length;", "+\t\t\t\tchar[][] boundNames = new char[boundLength][];", "+\t\t\t\tfor (int j = 0; j < boundLength; j++) {", "+\t\t\t\t\tboundNames[j] = ", "+\t\t\t\t\t\tCharOperation.concatWith(bounds[j].getParameterizedTypeName(), '.'); ", "+\t\t\t\t}", "+\t\t\t\ttypeParameterBounds = boundNames;", "+\t\t\t}", "+\t\t\trequestor.enterTypeParameter(", "+\t\t\t\ttypeParameter.declarationSourceStart, ", "+\t\t\t\ttypeParameter.name, ", "+\t\t\t\ttypeParameter.sourceStart, ", "+\t\t\t\ttypeParameter.sourceEnd,", "+\t\t\t\ttypeParameterBounds);", "+\t\t\trequestor.exitTypeParameter(typeParameter.declarationSourceEnd);", "+\t\t}", "+\t}", "+}"]}], "num": 26440}
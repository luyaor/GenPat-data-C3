{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b166b8c9409c707420e1014cf194775e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d77d86fcddc9666a7d198369a2abcc8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "0b88f9a0bb1950edae0865a8658608a49edfc445", "commitAfterChange": "39c80376eb5a4ddf3b0cc660e46c4e7575c329d8", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite, boolean inStaticContext)", "diff": ["-\t\t\tfor (int index = 0, length = receiverMethods.length; index < length; index++) {", "-\t\t\t\tMethodBinding binding = receiverMethods[index];", "-\t\t\t\tif (binding.canBeSeenBy(receiverType, invocationSite, this)) {", "-\t\t\t\t\tfound.add(binding);", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tif (receiverMethods.length > 0)", "+\t\t\t\tfound.addAll(receiverMethods);", "-\t\tif (receiverTypeIsInterface) {", "-\t\t\tif (candidatesCount == 1) {", "+\t\tfor (int i = 0; i < candidatesCount; i++) {", "+\t\t\tMethodBinding methodBinding = candidates[i];", "+\t\t\tif (methodBinding.canBeSeenBy(receiverType, invocationSite, this)) {", "+\t\t\t\tif (visiblesCount != i) {", "+\t\t\t\t\tcandidates[i] = null;", "+\t\t\t\t\tcandidates[visiblesCount] = methodBinding;", "+\t\t\t\t}", "+\t\t\t\tvisiblesCount++;", "+\t\t\t}", "+\t\t}", "+\t\tswitch (visiblesCount) {", "+\t\t\tcase 0 :", "+\t\t\t\tMethodBinding interfaceMethod =", "+\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, null);", "+\t\t\t\tif (interfaceMethod != null) return interfaceMethod;", "+\t\t\t\tMethodBinding candidate = candidates[0];", "+\t\t\t\treturn new ProblemMethodBinding(candidates[0], candidates[0].selector, candidates[0].parameters, ", "+\t\t\t\t\t\tcandidate.isStatic() && candidate.declaringClass.isInterface() ? ProblemReasons.NonStaticOrAlienTypeReceiver : ProblemReasons.NotVisible);", "+\t\t\tcase 1 :", "+\t\t\t\tif (searchForDefaultAbstractMethod)", "+\t\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, candidates[0]);", "-\t\t\t}", "-\t\t\tvisiblesCount = candidatesCount;", "-\t\t} else {", "-\t\t\tfor (int i = 0; i < candidatesCount; i++) {", "-\t\t\t\tMethodBinding methodBinding = candidates[i];", "-\t\t\t\tif (methodBinding.canBeSeenBy(receiverType, invocationSite, this)) {", "-\t\t\t\t\tif (visiblesCount != i) {", "-\t\t\t\t\t\tcandidates[i] = null;", "-\t\t\t\t\t\tcandidates[visiblesCount] = methodBinding;", "-\t\t\t\t\t}", "-\t\t\t\t\tvisiblesCount++;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tswitch (visiblesCount) {", "-\t\t\t\tcase 0 :", "-\t\t\t\t\tMethodBinding interfaceMethod =", "-\t\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, null);", "-\t\t\t\t\tif (interfaceMethod != null) return interfaceMethod;", "-\t\t\t\t\treturn new ProblemMethodBinding(candidates[0], candidates[0].selector, candidates[0].parameters, ProblemReasons.NotVisible);", "-\t\t\t\tcase 1 :", "-\t\t\t\t\tif (searchForDefaultAbstractMethod)", "-\t\t\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, candidates[0]);", "-\t\t\t\t\tunitScope.recordTypeReferences(candidates[0].thrownExceptions);", "-\t\t\t\t\treturn candidates[0];", "-\t\t\t\tdefault :", "-\t\t\t\t\tbreak;", "-\t\t\t}", "+\t\t\tdefault :", "+\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba65369781325e222c7f7bc67c37f1e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "01e38ca56c46a7423b9b7fff661e362555ab1e50", "commitAfterChange": "80afe0245e61b0a1bc378b68d1e49e7223b1baa6", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\t\tif (isCompliant14 && (receiverType.isAbstract() || receiverType.isTypeVariable())) {", "-\t\t\t\t\t\t\t\tMethodBinding interfaceMethod =", "-\t\t\t\t\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found);", "-\t\t\t\t\t\t\t\tif (interfaceMethod != null && interfaceMethod.isValidBinding()) {", "-\t\t\t\t\t\t\t\t\tcandidates = new MethodBinding[] {compatibleMethod, interfaceMethod};", "-\t\t\t\t\t\t\t\t\treturn mostSpecificMethodBinding(candidates, 2, argumentTypes, invocationSite, receiverType);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (isCompliant14 && (receiverType.isAbstract() || receiverType.isTypeVariable()))", "+\t\t\t\t\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, compatibleMethod);", "-\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found);", "+\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, null);", "-\t\t\tif (isCompliant14 && (receiverType.isAbstract() || receiverType.isTypeVariable())) {", "-\t\t\t\tMethodBinding interfaceMethod =", "-\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found);", "-\t\t\t\tif (interfaceMethod != null && interfaceMethod.isValidBinding()) {", "-\t\t\t\t\tcandidates = new MethodBinding[] {candidates[0], interfaceMethod};", "-\t\t\t\t\treturn mostSpecificMethodBinding(candidates, 2, argumentTypes, invocationSite, receiverType);", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tif (isCompliant14 && (receiverType.isAbstract() || receiverType.isTypeVariable()))", "+\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, candidates[0]);", "-\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found);", "+\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, null);", "-\t\t\t\tMethodBinding interfaceMethod =", "-\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found);", "-\t\t\t\tif (interfaceMethod != null && interfaceMethod.isValidBinding()) {", "-\t\t\t\t\tcandidates = new MethodBinding[] {mostSpecificMethod, interfaceMethod};", "-\t\t\t\t\treturn mostSpecificMethodBinding(candidates, 2, argumentTypes, invocationSite, receiverType);", "-\t\t\t\t}", "+\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, mostSpecificMethod);"]}], "num": 25940}
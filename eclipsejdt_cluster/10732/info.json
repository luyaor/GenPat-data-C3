{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33161acd69c47a2746de5ae3975fd7ee", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3aafb2ce30fb09111bf5f995fa1e1d82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected SearchableEnvironment getSearchableEnvironment()", "signatureAfterChange": " \tprivate IPackageFragment[] getPackageFragmentsInRoots(IPackageFragmentRoot[] roots, IJavaProject project)", "diff": ["-\tprotected SearchableEnvironment getSearchableEnvironment() {", "+\tprivate IPackageFragment[] getPackageFragmentsInRoots(IPackageFragmentRoot[] roots, IJavaProject project) {", "-\t\treturn fSearchableEnvironment;", "+\t\t// The following code assumes that all the roots have the given project as their parent", "+\t\tArrayList frags = new ArrayList();", "+\t\tfor (int i = 0; i < roots.length; i++) {", "+\t\t\tIPackageFragmentRoot root = roots[i];", "+\t\t\ttry {", "+\t\t\t\tIJavaElement[] pkgs = root.getChildren();", "+", "+\t\t\t\t/* 2 jar package fragment roots can be equals but not belonging ", "+\t\t\t\t   to the same project. As a result, they share the same element info.", "+\t\t\t\t   So this jar package fragment root could get the children of", "+\t\t\t\t   another jar package fragment root.", "+\t\t\t\t   The following code ensures that the children of this jar package", "+\t\t\t\t   fragment root have the given project as a great parent.", "+\t\t\t\t */", "+\t\t\t\tint length = pkgs.length;", "+\t\t\t\tif (length == 0) continue;", "+\t\t\t\tif (pkgs[0].getParent().getParent().equals(project)) {", "+\t\t\t\t\t// the children have the right parent, simply add them to the list", "+\t\t\t\t\tfor (int j = 0; j < length; j++) {", "+\t\t\t\t\t\tfrags.add(pkgs[j]);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t// create a new handle with the root as the parent", "+\t\t\t\t\tfor (int j = 0; j < length; j++) {", "+\t\t\t\t\t\tfrags.add(root.getPackageFragment(pkgs[j].getElementName()));", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// do nothing", "+\t\t\t}", "+\t\t}", "+\t\tIPackageFragment[] fragments = new IPackageFragment[frags.size()];", "+\t\tfrags.toArray(fragments);", "+\t\treturn fragments;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5183d137eacc60bf5ac8c6fa3b2bd453", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "40b99e5148bf82c3e66b88907e69f5d1e18e6f74", "commitAfterChange": "85d2c2c8ac37bb6f0260d6630185def87956883b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected void generateClasspathChangeDeltas()", "signatureAfterChange": " \tprotected void generateClasspathChangeDeltas()", "diff": ["-\t\t\t\t\t\tnewSourcePath,", "-\t\t\t\t\t\tnull/*not a source root path*/);", "-\t\t\t\tint sourceAttachmentRootFlags = ", "-\t\t\t\t\tthis.getSourceAttachmentDeltaFlag(", "-\t\t\t\t\t\toldResolvedPath[i].getSourceAttachmentRootPath(),", "-\t\t\t\t\t\tnewResolvedPath[index].getSourceAttachmentRootPath(),", "-\t\t\t\t\t\tnewSourcePath/*in case both root paths are null*/);", "+\t\t\t\t\t\tnewSourcePath);", "+\t\t\t\tIPath oldRootPath = oldResolvedPath[i].getSourceAttachmentRootPath();", "+\t\t\t\tIPath newRootPath = newResolvedPath[index].getSourceAttachmentRootPath();", "+\t\t\t\tint sourceAttachmentRootFlags = getSourceAttachmentDeltaFlag(oldRootPath, newRootPath);", "-\t\t\t\t\taddClasspathDeltas(", "-\t\t\t\t\t\tproject.computePackageFragmentRoots(oldResolvedPath[i]),", "-\t\t\t\t\t\tflags,", "-\t\t\t\t\t\tdelta);", "+\t\t\t\t\taddClasspathDeltas(project.computePackageFragmentRoots(oldResolvedPath[i]), flags, delta);", "+\t\t\t\t} else {", "+\t\t\t\t\tif (oldRootPath == null && newRootPath == null) {", "+\t\t\t\t\t\t// if source path is specified and no root path, it needs to be recomputed dynamically", "+\t\t\t\t\t\t// force detach source on jar package fragment roots (source will be lazily computed when needed)", "+\t\t\t\t\t\tIPackageFragmentRoot[] computedRoots = project.computePackageFragmentRoots(oldResolvedPath[i]);", "+\t\t\t\t\t\tfor (int j = 0; j < computedRoots.length; j++) {", "+\t\t\t\t\t\t\tIPackageFragmentRoot root = computedRoots[j];", "+\t\t\t\t\t\t\t// force detach source on jar package fragment roots (source will be lazily computed when needed)", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\troot.close();", "+\t\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t\t// ignore", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t((PackageFragmentRoot) root).setSourceAttachmentProperty(null);// loose info - will be recomputed", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t} else {", "+\t\t\tthis.identicalRoots = true;"]}], "num": 10732}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5d0d24f8638c3ee9c80b6132b14b6fe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38019d579b98e6831ec90338a0b74e77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void connect( \t\tIGenericType suppliedType, \t\tIGenericType superclass, \t\tIGenericType[] superinterfaces)", "signatureAfterChange": " \tpublic void connect( \t\tIGenericType suppliedType, \t\tIGenericType superclass, \t\tIGenericType[] superinterfaces)", "diff": ["-\t\tif (suppliedType.isClass()) {", "-\t\t\tif (superHandle == null) {", "-\t\t\t\tthis.hierarchy.addRootClass(typeHandle);", "-\t\t\t} else {", "-\t\t\t\tthis.hierarchy.cacheSuperclass(typeHandle, superHandle);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tthis.hierarchy.addInterface(typeHandle);", "-\t\t}", "+\t\tswitch (suppliedType.getKind()) {", "+\t\t\tcase IGenericType.CLASS :", "+\t\t\t\tif (superHandle == null) {", "+\t\t\t\t\tthis.hierarchy.addRootClass(typeHandle);", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.hierarchy.cacheSuperclass(typeHandle, superHandle);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase IGenericType.INTERFACE :", "+\t\t\t\tthis.hierarchy.addInterface(typeHandle);", "+\t\t\t\tbreak;", "+\t\t\tcase IGenericType.ENUM :", "+\t\t\t\t// TODO (jerome) add support - enum extends Enum implicitly", "+\t\t\t\tbreak;", "+\t\t\tcase IGenericType.ANNOTATION_TYPE :", "+\t\t\t\tbreak;", "+\t\t}\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64c3fa8270c47141009047ccff61e1e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "4c1d7dbf50aec44bcaa78488f6494cabd5c936ec", "commitAfterChange": "1159f42f3e1e1aaac22ff9f396ef841945f2fbd4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public boolean contains(IResource resource)", "signatureAfterChange": " public boolean contains(IResource resource)", "diff": ["+\tswitch (resource.getType()) {", "+\t\tcase IResource.ROOT:", "+\t\tcase IResource.PROJECT:", "+\t\t\treturn true;", "+\t}", "+\t// file or folder", "-\t\tif (!resource.isAccessible()) return false;", "+", "-\t\t\t\tif (entryPath.isPrefixOf(path) ", "-\t\t\t\t\t\t&& (innerMostEntry == null || innerMostEntry.getPath().isPrefixOf(entryPath))) {", "+\t\t\t\tif ((innerMostEntry == null || innerMostEntry.getPath().isPrefixOf(entryPath))", "+\t\t\t\t\t\t&& entryPath.isPrefixOf(path)) {", "-\t\t\t\t\tbreak; // don't return here as we could have src=bin or lib=bin", "-\t\t\t\tif (innerMostEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE) {", "-\t\t\t\t\t// .class files are not visible in source folders ", "-\t\t\t\t\treturn !Util.isClassFileName(path.lastSegment());", "-\t\t\t\t} else {", "-\t\t\t\t\t// .java files are not visible in library folders", "-\t\t\t\t\treturn !Util.isJavaFileName(path.lastSegment());", "+\t\t\t\tif  (resource instanceof IFolder) {", "+\t\t\t\t\t // folders are always included in src/lib entries", "+\t\t\t\t\t return true;", "+\t\t\t\t}", "+\t\t\t\tswitch (innerMostEntry.getEntryKind()) {", "+\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE:", "+\t\t\t\t\t\t// .class files are not visible in source folders ", "+\t\t\t\t\t\treturn !Util.isClassFileName(path.lastSegment());", "+\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:", "+\t\t\t\t\t\t// .java files are not visible in library folders", "+\t\t\t\t\t\treturn !Util.isJavaFileName(path.lastSegment());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c598accbe27f39d2f6e8a1b520aa99c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void resolveStatements()", "signatureAfterChange": "  \tpublic void resolveStatements()", "diff": ["-\t\tif (!scope.enclosingSourceType().isInterface()){", "-", "-\t\t\t// if a method has an semicolon body and is not declared as abstract==>error", "-\t\t\t// native methods may have a semicolon body ", "-\t\t\tif ((modifiers & AccSemicolonBody) != 0) {", "-\t\t\t\tif ((modifiers & AccNative) == 0)", "-\t\t\t\t\tif ((modifiers & AccAbstract) == 0)", "-\t\t\t\t\t\tscope.problemReporter().methodNeedBody(this);", "-\t\t\t} else {", "-\t\t\t\t// the method HAS a body --> abstract native modifiers are forbiden", "-\t\t\t\tif (((modifiers & AccNative) != 0) || ((modifiers & AccAbstract) != 0))", "-\t\t\t\t\tscope.problemReporter().methodNeedingNoBody(this);", "-\t\t\t}", "+\t\tswitch (scope.referenceType().getKind()) {", "+\t\t\tcase IGenericType.ENUM :", "+\t\t\t\tif (this.selector == TypeConstants.VALUES) break;", "+\t\t\t\tif (this.selector == TypeConstants.VALUEOF) break;", "+\t\t\tcase IGenericType.CLASS :", "+\t\t\t\t// if a method has an semicolon body and is not declared as abstract==>error", "+\t\t\t\t// native methods may have a semicolon body ", "+\t\t\t\tif ((modifiers & AccSemicolonBody) != 0) {", "+\t\t\t\t\tif ((modifiers & AccNative) == 0)", "+\t\t\t\t\t\tif ((modifiers & AccAbstract) == 0)", "+\t\t\t\t\t\t\tscope.problemReporter().methodNeedBody(this);", "+\t\t\t\t} else {", "+\t\t\t\t\t// the method HAS a body --> abstract native modifiers are forbiden", "+\t\t\t\t\tif (((modifiers & AccNative) != 0) || ((modifiers & AccAbstract) != 0))", "+\t\t\t\t\t\tscope.problemReporter().methodNeedingNoBody(this);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3698ef1b1dda0e0c45654a433cc8b08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprivate boolean selectDeclaration(TypeDeclaration typeDeclaration, char[] assistIdentifier, char[] packageName)", "signatureAfterChange": " \tprivate boolean selectDeclaration(TypeDeclaration typeDeclaration, char[] assistIdentifier, char[] packageName)", "diff": ["-\t\t\t", "-\t\t\tif(!typeDeclaration.isInterface()) {", "-\t\t\t\tthis.requestor.acceptClass(", "-\t\t\t\t\tpackageName,", "-\t\t\t\t\tqualifiedSourceName,", "-\t\t\t\t\tfalse,", "-\t\t\t\t\ttrue,", "-\t\t\t\t\tthis.actualSelectionStart,", "-\t\t\t\t\tthis.actualSelectionEnd);", "-\t\t\t} else {", "-\t\t\t\tthis.requestor.acceptInterface(", "-\t\t\t\t\tpackageName,", "-\t\t\t\t\tqualifiedSourceName,", "-\t\t\t\t\tfalse,", "-\t\t\t\t\ttrue,", "-\t\t\t\t\tthis.actualSelectionStart,", "-\t\t\t\t\tthis.actualSelectionEnd);", "-\t\t\t}", "+\t\t\tswitch (typeDeclaration.getKind()) {", "+\t\t\t\tcase IGenericType.CLASS :", "+\t\t\t\t\tthis.requestor.acceptClass(", "+\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\tqualifiedSourceName,", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\t\tthis.actualSelectionEnd);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IGenericType.INTERFACE :", "+\t\t\t\t\tthis.requestor.acceptInterface(", "+\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\tqualifiedSourceName,", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\t\tthis.actualSelectionEnd);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IGenericType.ENUM :", "+\t\t\t\t\t// TODO (david) need support", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IGenericType.ANNOTATION_TYPE :", "+\t\t\t\t\t// TODO (david) need support", "+\t\t\t\t\tbreak;", "+\t\t\t}\t\t\t"]}], "num": 30238}
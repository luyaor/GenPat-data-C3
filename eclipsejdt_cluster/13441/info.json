{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5144c9ceee9978778bba17104de60bee", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c37390bcc8031b3d4c06abd2f5d1f22b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void test006()", "signatureAfterChange": " \tpublic void test006()", "diff": ["-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X<T> {\\n\" +", "-\t\t\t\t\"   void test() {\\n\" +", "-\t\t\t\t\"   \tnew Y<Object>().foo(\\\"X\\\");\\n\" +", "-\t\t\t\t\"   \tnew Y<Object>().foo2(\\\"X\\\");\\n\" +", "-\t\t\t\t\"   }\\n\" +", "-\t\t\t\t\"\t<U1> U1 foo(U1 t) {return null;}\\n\" +", "-\t\t\t\t\"\t<U2> U2 foo2(U2 t) {return null;}\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"class Y<T2> extends X<T2> {\\n\" +", "-\t\t\t\t\"\tvoid foo(T2 t) {}\\n\" +", "-\t\t\t\t\"\t<U3> void foo2(T2 t) {}\\n\" +", "-\t\t\t\t\"}\\n\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" +", "+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\"\tnew Y<Object>().foo(\\\"X\\\");\\n\" + ", "+\t\t\"\t                ^^^\\n\" + ", "+\t\t\"The method foo(Object) is ambiguous for the type Y<Object>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tnew Y<Object>().foo2(\\\"X\\\");\\n\" + ", "+\t\t\"\t                ^^^^\\n\" + ", "+\t\t\"The method foo2(Object) is ambiguous for the type Y<Object>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\"\tvoid foo(T2 t) {}\\n\" + ", "+\t\t\"\t     ^^^^^^^^^\\n\" + ", "+\t\t\"Name clash: The method foo(T2) of type Y<T2> has the same erasure as foo(U1) of type X<T> but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\"\t<U3> void foo2(T2 t) {}\\n\" + ", "+\t\t\"\t          ^^^^^^^^^^\\n\" + ", "+\t\t\"Name clash: The method foo2(T2) of type Y<T2> has the same erasure as foo2(U2) of type X<T> but does not override it\\n\" + ", "+\t\t\"----------\\n\":", "+\t\t\t\"----------\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\t\"----------\\n\";", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X<T> {\\n\" +", "+\t\t\t\t\"   void test() {\\n\" +", "+\t\t\t\t\"   \tnew Y<Object>().foo(\\\"X\\\");\\n\" +", "+\t\t\t\t\"   \tnew Y<Object>().foo2(\\\"X\\\");\\n\" +", "+\t\t\t\t\"   }\\n\" +", "+\t\t\t\t\"\t<U1> U1 foo(U1 t) {return null;}\\n\" +", "+\t\t\t\t\"\t<U2> U2 foo2(U2 t) {return null;}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y<T2> extends X<T2> {\\n\" +", "+\t\t\t\t\"\tvoid foo(T2 t) {}\\n\" +", "+\t\t\t\t\"\t<U3> void foo2(T2 t) {}\\n\" +", "+\t\t\t\t\"}\\n\"", "+\t\t\t},", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecfd24302b2f1b948b9282b5fed0f4b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "6467f6dd1cb134689a9fdd8d844169d55dd11609", "commitAfterChange": "eaaf8d51568dee07a03eec3ae337eaee38c80f58", "methodNumberBeforeChange": 203, "methodNumberAfterChange": 203, "signatureBeforeChange": " \tpublic void test071()", "signatureAfterChange": " \tpublic void test071()", "diff": ["-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"D.java\",", "-\t\t\t\t\"class D extends B<Integer> {\\n\" +", "-\t\t\t\t\"\t@Override void m(Number t) {}\\n\" + ", "-\t\t\t\t\"\t@Override void m(Integer t) {}\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"class A<T extends Number> { void m(T t) {} }\\n\" +", "-\t\t\t\t\"class B<S extends Integer> extends A<S> { @Override void m(S t) {} }\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "+\t\tString expectedOutput = new CompilerOptions(getCompilerOptions()).sourceLevel < ClassFileConstants.JDK1_6", "+\t\t?\t\"----------\\n\" + ", "-\t\t);", "+\t\t:\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in D.java (at line 2)\\n\" + ", "+\t\t\t\"\t@Override void m(Number t) {}\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method m(Number) of type D has the same erasure as m(T) of type A<T> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in D.java (at line 2)\\n\" + ", "+\t\t\t\"\t@Override void m(Number t) {}\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The method m(Number) of type D must override or implement a supertype method\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in D.java (at line 6)\\n\" + ", "+\t\t\t\"\tclass B<S extends Integer> extends A<S> { @Override void m(S t) {} }\\n\" + ", "+\t\t\t\"\t                  ^^^^^^^\\n\" + ", "+\t\t\t\"The type parameter S should not be bounded by the final type Integer. Final types cannot be further extended\\n\" + ", "+\t\t\t\"----------\\n\";", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"D.java\",", "+\t\t\t\t\"class D extends B<Integer> {\\n\" +", "+\t\t\t\t\"\t@Override void m(Number t) {}\\n\" + ", "+\t\t\t\t\"\t@Override void m(Integer t) {}\\n\" + ", "+\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\"class A<T extends Number> { void m(T t) {} }\\n\" +", "+\t\t\t\t\"class B<S extends Integer> extends A<S> { @Override void m(S t) {} }\"", "+\t\t\t},", "+\t\t\texpectedOutput);"]}], "num": 13441}
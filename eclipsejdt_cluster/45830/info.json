{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "532a985601f726984e5d3f7612ba69e5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0875214e18d7d9b3ed68e8dc8ffc0202", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationMirrorImpl.java", "commitBeforeChange": "72643ddaac52d3ea6e2573fbe40b9af5d9586d1e", "commitAfterChange": "965ee55c83771df9f7f21b38b9a78903a86f630d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public Map<AnnotationTypeElementDeclaration, AnnotationValue> getElementValues()", "signatureAfterChange": "      public Map<AnnotationTypeElementDeclaration, AnnotationValue> getElementValues()", "diff": ["+\t\tif (pairs.length == 0) {", "+\t\t\treturn Collections.emptyMap();", "+\t\t}", "+\t\t", "+\t\tfinal Map<AnnotationTypeElementDeclaration, AnnotationValue> result =", "+\t\t\tnew LinkedHashMap<AnnotationTypeElementDeclaration, AnnotationValue>(pairs.length * 4 / 3 + 1 );", "-\t\t\t final Map<AnnotationTypeElementDeclaration, AnnotationValue> result =", "-                 new LinkedHashMap<AnnotationTypeElementDeclaration, AnnotationValue>(pairs.length * 4 / 3 + 1 );", "-\t\t\t return result;", "-        return Collections.emptyMap();", "+        return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b4495c82fbe44ba6d577502df5e5aa2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "7064f5cf4e1b20562054db6ff22e27e2bfde4008", "commitAfterChange": "c020688b25edf08bbc7d8d68981663ad78d2a9d8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      private TypeDeclaration getTypeDeclarationInBatch(String name)", "signatureAfterChange": "      private TypeDeclaration getTypeDeclarationInBatch(String name)", "diff": ["-\t\tITypeBinding typeBinding = _astUnits[0].getAST().resolveWellKnownType(name);", "+\t\tITypeBinding typeBinding = null;", "-\t\tif(typeBinding == null){", "-\t\t\t// then look into the current compilation units\t\t\t", "-\t\t\tASTNode node = null;", "-\t\t\tfor( int i=0, len=_astUnits.length; i<len; i++ )", "-\t\t\t\tnode = _astUnits[i].findDeclaringNode(typeKey);\t\t\t", "-\t\t\tif( node != null ){", "-\t\t\t\tfinal int nodeType = node.getNodeType();", "-\t\t\t\tif( nodeType == ASTNode.TYPE_DECLARATION ||", "-\t\t\t\t\tnodeType == ASTNode.ANNOTATION_TYPE_DECLARATION ||", "-\t\t\t\t\tnodeType == ASTNode.ENUM_DECLARATION )", "-\t\t\t\ttypeBinding = ((AbstractTypeDeclaration)node).resolveBinding();", "+\t\tif( _astUnits.length > 0 ){", "+\t\t\t_astUnits[0].getAST().resolveWellKnownType(name);", "+\t\t\t", "+\t\t\tif(typeBinding == null){", "+\t\t\t\t// then look into the current compilation units\t\t\t", "+\t\t\t\tASTNode node = null;", "+\t\t\t\tfor( int i=0, len=_astUnits.length; i<len; i++ )", "+\t\t\t\t\tnode = _astUnits[i].findDeclaringNode(typeKey);\t\t\t", "+\t\t\t\tif( node != null ){", "+\t\t\t\t\tfinal int nodeType = node.getNodeType();", "+\t\t\t\t\tif( nodeType == ASTNode.TYPE_DECLARATION ||", "+\t\t\t\t\t\tnodeType == ASTNode.ANNOTATION_TYPE_DECLARATION ||", "+\t\t\t\t\t\tnodeType == ASTNode.ENUM_DECLARATION )", "+\t\t\t\t\ttypeBinding = ((AbstractTypeDeclaration)node).resolveBinding();", "+\t\t\t\t}", "+\t\t\tif( typeBinding != null )", "+\t\t\t\treturn Factory.createReferenceType(typeBinding, this);", "-\t\tif( typeBinding != null )", "-\t\t\treturn Factory.createReferenceType(typeBinding, this);"]}], "num": 45830}
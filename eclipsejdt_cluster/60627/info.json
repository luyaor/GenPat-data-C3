{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94f7cf2be18e4b64331bef476a66412a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d57a10d258987c22864c5c6ff52cffc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "d11e0b7b2ec4acf083dada122937da91409bfbab", "commitAfterChange": "e9864a131b54828255a924bbf70ed7031ad409fb", "methodNumberBeforeChange": 152, "methodNumberAfterChange": 153, "signatureBeforeChange": " protected void consumeRule(int act)", "signatureAfterChange": " protected void consumeRule(int act)", "diff": ["-  switch ( act ) {", "-    case 26 : // System.out.println(\"Type ::= PrimitiveType\");  //$NON-NLS-1$", "-\t\t    consumePrimitiveType();  ", "-\t\t\tbreak ;", "- ", "-    case 40 : // System.out.println(\"ReferenceType ::= ClassOrInterfaceType\");  //$NON-NLS-1$", "-\t\t    consumeReferenceType();   ", "-\t\t\tbreak ;", "- ", "-    case 49 : // System.out.println(\"QualifiedName ::= Name DOT SimpleName\");  //$NON-NLS-1$", "-\t\t    consumeQualifiedName();  ", "-\t\t\tbreak ;", "- ", "-    case 50 : // System.out.println(\"CompilationUnit ::= EnterCompilationUnit PackageDeclarationopt...\");  //$NON-NLS-1$", "-\t\t    consumeCompilationUnit();  ", "-\t\t\tbreak ;", "- ", "-    case 51 : // System.out.println(\"EnterCompilationUnit ::=\");  //$NON-NLS-1$", "-\t\t    consumeEnterCompilationUnit();  ", "-\t\t\tbreak ;", "- ", "-    case 64 : // System.out.println(\"CatchHeader ::= catch LPAREN FormalParameter RPAREN LBRACE\");  //$NON-NLS-1$", "-\t\t    consumeCatchHeader();  ", "-\t\t\tbreak ;", "- ", "-    case 66 : // System.out.println(\"ImportDeclarations ::= ImportDeclarations ImportDeclaration\");  //$NON-NLS-1$", "-\t\t    consumeImportDeclarations();  ", "-\t\t\tbreak ;", "- ", "-    case 68 : // System.out.println(\"TypeDeclarations ::= TypeDeclarations TypeDeclaration\");  //$NON-NLS-1$", "-\t\t    consumeTypeDeclarations();  ", "-\t\t\tbreak ;", "- ", "-    case 69 : // System.out.println(\"PackageDeclaration ::= PackageDeclarationName SEMICOLON\");  //$NON-NLS-1$", "-\t\t     consumePackageDeclaration();  ", "-\t\t\tbreak ;", "- ", "-    case 70 : // System.out.println(\"PackageDeclarationName ::= package Name\");  //$NON-NLS-1$", "-\t\t     consumePackageDeclarationName();  ", "-\t\t\tbreak ;", "- ", "-    case 73 : // System.out.println(\"SingleTypeImportDeclaration ::= SingleTypeImportDeclarationName...\");  //$NON-NLS-1$", "-\t\t    consumeSingleTypeImportDeclaration();  ", "-\t\t\tbreak ;", "- ", "-    case 74 : // System.out.println(\"SingleTypeImportDeclarationName ::= import Name\");  //$NON-NLS-1$", "-\t\t    consumeSingleTypeImportDeclarationName();  ", "-\t\t\tbreak ;", "- ", "-    case 75 : // System.out.println(\"TypeImportOnDemandDeclaration ::= TypeImportOnDemandDeclarationName\");  //$NON-NLS-1$", "-\t\t    consumeTypeImportOnDemandDeclaration();  ", "-\t\t\tbreak ;", "- ", "-    case 76 : // System.out.println(\"TypeImportOnDemandDeclarationName ::= import Name DOT MULTIPLY\");  //$NON-NLS-1$", "-\t\t    consumeTypeImportOnDemandDeclarationName();  ", "-\t\t\tbreak ;", "- ", "-     case 79 : // System.out.println(\"TypeDeclaration ::= SEMICOLON\");  //$NON-NLS-1$", "-\t\t    consumeEmptyTypeDeclaration();  ", "-\t\t\tbreak ;", "- ", "-    case 93 : // System.out.println(\"ClassDeclaration ::= ClassHeader ClassBody\");  //$NON-NLS-1$", "-\t\t    consumeClassDeclaration();  ", "-\t\t\tbreak ;", "- ", "-    case 94 : // System.out.println(\"ClassHeader ::= ClassHeaderName ClassHeaderExtendsopt...\");  //$NON-NLS-1$", "-\t\t    consumeClassHeader();  ", "-\t\t\tbreak ;", "- ", "-    case 95 : // System.out.println(\"ClassHeaderName ::= Modifiersopt class Identifier\");  //$NON-NLS-1$", "-\t\t    consumeClassHeaderName();  ", "-\t\t\tbreak ;", "- ", "-    case 96 : // System.out.println(\"ClassHeaderExtends ::= extends ClassType\");  //$NON-NLS-1$", "-\t\t    consumeClassHeaderExtends();  ", "-\t\t\tbreak ;", "- ", "-    case 97 : // System.out.println(\"ClassHeaderImplements ::= implements InterfaceTypeList\");  //$NON-NLS-1$", "-\t\t    consumeClassHeaderImplements();  ", "-\t\t\tbreak ;", "- ", "-    case 99 : // System.out.println(\"InterfaceTypeList ::= InterfaceTypeList COMMA InterfaceType\");  //$NON-NLS-1$", "-\t\t    consumeInterfaceTypeList();  ", "-\t\t\tbreak ;", "- ", "-    case 100 : // System.out.println(\"InterfaceType ::= ClassOrInterfaceType\");  //$NON-NLS-1$", "-\t\t    consumeInterfaceType();  ", "-\t\t\tbreak ;", "- ", "-    case 103 : // System.out.println(\"ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration\");  //$NON-NLS-1$", "-\t\t    consumeClassBodyDeclarations();  ", "-\t\t\tbreak ;", "- ", "-    case 107 : // System.out.println(\"ClassBodyDeclaration ::= Diet NestedMethod Block\");  //$NON-NLS-1$", "-\t\t    consumeClassBodyDeclaration();  ", "-\t\t\tbreak ;", "- ", "-    case 108 : // System.out.println(\"Diet ::=\");  //$NON-NLS-1$", "-\t\t    consumeDiet();  ", "-\t\t\tbreak ;", "+\tswitch ( act ) {", "+\tcase 26 : // System.out.println(\"Type ::= PrimitiveType\");  //$NON-NLS-1$", "+\t\tconsumePrimitiveType();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 40 : // System.out.println(\"ReferenceType ::= ClassOrInterfaceType\");  //$NON-NLS-1$", "+\t\tconsumeReferenceType();   ", "+\t\tbreak ;", "+\t\t", "+\tcase 49 : // System.out.println(\"QualifiedName ::= Name DOT SimpleName\");  //$NON-NLS-1$", "+\t\tconsumeQualifiedName();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 50 : // System.out.println(\"CompilationUnit ::= EnterCompilationUnit PackageDeclarationopt...\");  //$NON-NLS-1$", "+\t\tconsumeCompilationUnit();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 51 : // System.out.println(\"EnterCompilationUnit ::=\");  //$NON-NLS-1$", "+\t\tconsumeEnterCompilationUnit();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 64 : // System.out.println(\"CatchHeader ::= catch LPAREN FormalParameter RPAREN LBRACE\");  //$NON-NLS-1$", "+\t\tconsumeCatchHeader();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 66 : // System.out.println(\"ImportDeclarations ::= ImportDeclarations ImportDeclaration\");  //$NON-NLS-1$", "+\t\tconsumeImportDeclarations();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 68 : // System.out.println(\"TypeDeclarations ::= TypeDeclarations TypeDeclaration\");  //$NON-NLS-1$", "+\t\tconsumeTypeDeclarations();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 69 : // System.out.println(\"PackageDeclaration ::= PackageDeclarationName SEMICOLON\");  //$NON-NLS-1$", "+\t\tconsumePackageDeclaration();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 70 : // System.out.println(\"PackageDeclarationName ::= package Name\");  //$NON-NLS-1$", "+\t\tconsumePackageDeclarationName();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 73 : // System.out.println(\"SingleTypeImportDeclaration ::= SingleTypeImportDeclarationName...\");  //$NON-NLS-1$", "+\t\tconsumeSingleTypeImportDeclaration();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 74 : // System.out.println(\"SingleTypeImportDeclarationName ::= import Name\");  //$NON-NLS-1$", "+\t\tconsumeSingleTypeImportDeclarationName();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 75 : // System.out.println(\"TypeImportOnDemandDeclaration ::= TypeImportOnDemandDeclarationName\");  //$NON-NLS-1$", "+\t\tconsumeTypeImportOnDemandDeclaration();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 76 : // System.out.println(\"TypeImportOnDemandDeclarationName ::= import Name DOT MULTIPLY\");  //$NON-NLS-1$", "+\t\tconsumeTypeImportOnDemandDeclarationName();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 79 : // System.out.println(\"TypeDeclaration ::= SEMICOLON\");  //$NON-NLS-1$", "+\t\tconsumeEmptyTypeDeclaration();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 93 : // System.out.println(\"ClassDeclaration ::= ClassHeader ClassBody\");  //$NON-NLS-1$", "+\t\tconsumeClassDeclaration();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 94 : // System.out.println(\"ClassHeader ::= ClassHeaderName ClassHeaderExtendsopt...\");  //$NON-NLS-1$", "+\t\tconsumeClassHeader();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 95 : // System.out.println(\"ClassHeaderName ::= Modifiersopt class Identifier\");  //$NON-NLS-1$", "+\t\tconsumeClassHeaderName();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 96 : // System.out.println(\"ClassHeaderExtends ::= extends ClassType\");  //$NON-NLS-1$", "+\t\tconsumeClassHeaderExtends();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 97 : // System.out.println(\"ClassHeaderImplements ::= implements InterfaceTypeList\");  //$NON-NLS-1$", "+\t\tconsumeClassHeaderImplements();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 99 : // System.out.println(\"InterfaceTypeList ::= InterfaceTypeList COMMA InterfaceType\");  //$NON-NLS-1$", "+\t\tconsumeInterfaceTypeList();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 100 : // System.out.println(\"InterfaceType ::= ClassOrInterfaceType\");  //$NON-NLS-1$", "+\t\tconsumeInterfaceType();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 103 : // System.out.println(\"ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration\");  //$NON-NLS-1$", "+\t\tconsumeClassBodyDeclarations();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 107 : // System.out.println(\"ClassBodyDeclaration ::= Diet NestedMethod Block\");  //$NON-NLS-1$", "+\t\tconsumeClassBodyDeclaration();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 108 : // System.out.println(\"Diet ::=\");  //$NON-NLS-1$", "+\t\tconsumeDiet();  ", "+\t\tbreak ;", "-    case 109 : // System.out.println(\"Initializer ::= Diet NestedMethod Block\");  //$NON-NLS-1$", "-\t\t    consumeClassBodyDeclaration();  ", "-\t\t\tbreak ;", "- ", "-    case 116 : // System.out.println(\"ClassMemberDeclaration ::= SEMICOLON\");  //$NON-NLS-1$", "-\t\t    consumeEmptyClassMemberDeclaration();  ", "-\t\t\tbreak ;", "+\tcase 109 : // System.out.println(\"Initializer ::= Diet NestedMethod Block\");  //$NON-NLS-1$", "+\t\tconsumeClassBodyDeclaration();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 116 : // System.out.println(\"ClassMemberDeclaration ::= SEMICOLON\");  //$NON-NLS-1$", "+\t\tconsumeEmptyClassMemberDeclaration();  ", "+\t\tbreak ;", "-    case 117 : // System.out.println(\"FieldDeclaration ::= Modifiersopt Type VariableDeclarators SEMICOLON\");  //$NON-NLS-1$", "-\t\t    consumeFieldDeclaration();  ", "-\t\t\tbreak ;", "- ", "-    case 119 : // System.out.println(\"VariableDeclarators ::= VariableDeclarators COMMA VariableDeclarator\");  //$NON-NLS-1$", "-\t\t    consumeVariableDeclarators();  ", "-\t\t\tbreak ;", "- ", "-    case 122 : // System.out.println(\"EnterVariable ::=\");  //$NON-NLS-1$", "-\t\t    consumeEnterVariable();  ", "-\t\t\tbreak ;", "- ", "-    case 123 : // System.out.println(\"ExitVariableWithInitialization ::=\");  //$NON-NLS-1$", "-\t\t    consumeExitVariableWithInitialization();  ", "-\t\t\tbreak ;", "- ", "-    case 124 : // System.out.println(\"ExitVariableWithoutInitialization ::=\");  //$NON-NLS-1$", "-\t\t    consumeExitVariableWithoutInitialization();  ", "-\t\t\tbreak ;", "- ", "-    case 125 : // System.out.println(\"ForceNoDiet ::=\");  //$NON-NLS-1$", "-\t\t    consumeForceNoDiet();  ", "-\t\t\tbreak ;", "- ", "-    case 126 : // System.out.println(\"RestoreDiet ::=\");  //$NON-NLS-1$", "-\t\t    consumeRestoreDiet();  ", "-\t\t\tbreak ;", "- ", "-    case 131 : // System.out.println(\"MethodDeclaration ::= MethodHeader MethodBody\");  //$NON-NLS-1$", "-\t\t    // set to true to consume a method with a body", "-  consumeMethodDeclaration(true);   ", "-\t\t\tbreak ;", "- ", "-    case 132 : // System.out.println(\"AbstractMethodDeclaration ::= MethodHeader SEMICOLON\");  //$NON-NLS-1$", "-\t\t    // set to false to consume a method without body", "-  consumeMethodDeclaration(false);  ", "-\t\t\tbreak ;", "- ", "-    case 133 : // System.out.println(\"MethodHeader ::= MethodHeaderName MethodHeaderParameters...\");  //$NON-NLS-1$", "-\t\t    consumeMethodHeader();  ", "-\t\t\tbreak ;", "- ", "-    case 134 : // System.out.println(\"MethodHeaderName ::= Modifiersopt Type Identifier LPAREN\");  //$NON-NLS-1$", "-\t\t    consumeMethodHeaderName();  ", "-\t\t\tbreak ;", "- ", "-    case 135 : // System.out.println(\"MethodHeaderParameters ::= FormalParameterListopt RPAREN\");  //$NON-NLS-1$", "-\t\t    consumeMethodHeaderParameters();  ", "-\t\t\tbreak ;", "- ", "-    case 136 : // System.out.println(\"MethodHeaderExtendedDims ::= Dimsopt\");  //$NON-NLS-1$", "-\t\t    consumeMethodHeaderExtendedDims();  ", "-\t\t\tbreak ;", "- ", "-    case 137 : // System.out.println(\"MethodHeaderThrowsClause ::= throws ClassTypeList\");  //$NON-NLS-1$", "-\t\t    consumeMethodHeaderThrowsClause();  ", "-\t\t\tbreak ;", "- ", "-    case 138 : // System.out.println(\"ConstructorHeader ::= ConstructorHeaderName MethodHeaderParameters\");  //$NON-NLS-1$", "-\t\t    consumeConstructorHeader();  ", "-\t\t\tbreak ;", "- ", "-    case 139 : // System.out.println(\"ConstructorHeaderName ::= Modifiersopt Identifier LPAREN\");  //$NON-NLS-1$", "-\t\t    consumeConstructorHeaderName();  ", "-\t\t\tbreak ;", "- ", "-    case 141 : // System.out.println(\"FormalParameterList ::= FormalParameterList COMMA FormalParameter\");  //$NON-NLS-1$", "-\t\t    consumeFormalParameterList();  ", "-\t\t\tbreak ;", "- ", "-    case 142 : // System.out.println(\"FormalParameter ::= Modifiersopt Type VariableDeclaratorId\");  //$NON-NLS-1$", "-\t\t    // the boolean is used to know if the modifiers should be reset", "- \tconsumeFormalParameter();  ", "-\t\t\tbreak ;", "- ", "-    case 144 : // System.out.println(\"ClassTypeList ::= ClassTypeList COMMA ClassTypeElt\");  //$NON-NLS-1$", "-\t\t    consumeClassTypeList();  ", "-\t\t\tbreak ;", "- ", "-    case 145 : // System.out.println(\"ClassTypeElt ::= ClassType\");  //$NON-NLS-1$", "-\t\t    consumeClassTypeElt();  ", "-\t\t\tbreak ;", "- ", "-    case 146 : // System.out.println(\"MethodBody ::= NestedMethod LBRACE BlockStatementsopt RBRACE\");  //$NON-NLS-1$", "-\t\t    consumeMethodBody();  ", "-\t\t\tbreak ;", "- ", "-    case 147 : // System.out.println(\"NestedMethod ::=\");  //$NON-NLS-1$", "-\t\t    consumeNestedMethod();  ", "-\t\t\tbreak ;", "- ", "-    case 148 : // System.out.println(\"StaticInitializer ::= StaticOnly Block\");  //$NON-NLS-1$", "-\t\t    consumeStaticInitializer();  ", "-\t\t\tbreak ;", "+\tcase 117 : // System.out.println(\"FieldDeclaration ::= Modifiersopt Type VariableDeclarators SEMICOLON\");  //$NON-NLS-1$", "+\t\tconsumeFieldDeclaration();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 119 : // System.out.println(\"VariableDeclarators ::= VariableDeclarators COMMA VariableDeclarator\");  //$NON-NLS-1$", "+\t\tconsumeVariableDeclarators();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 122 : // System.out.println(\"EnterVariable ::=\");  //$NON-NLS-1$", "+\t\tconsumeEnterVariable();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 123 : // System.out.println(\"ExitVariableWithInitialization ::=\");  //$NON-NLS-1$", "+\t\tconsumeExitVariableWithInitialization();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 124 : // System.out.println(\"ExitVariableWithoutInitialization ::=\");  //$NON-NLS-1$", "+\t\tconsumeExitVariableWithoutInitialization();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 125 : // System.out.println(\"ForceNoDiet ::=\");  //$NON-NLS-1$", "+\t\tconsumeForceNoDiet();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 126 : // System.out.println(\"RestoreDiet ::=\");  //$NON-NLS-1$", "+\t\tconsumeRestoreDiet();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 131 : // System.out.println(\"MethodDeclaration ::= MethodHeader MethodBody\");  //$NON-NLS-1$", "+\t\t// set to true to consume a method with a body", "+\t\tconsumeMethodDeclaration(true);   ", "+\t\tbreak ;", "+\t\t", "+\tcase 132 : // System.out.println(\"AbstractMethodDeclaration ::= MethodHeader SEMICOLON\");  //$NON-NLS-1$", "+\t\t// set to false to consume a method without body", "+\t\tconsumeMethodDeclaration(false);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 133 : // System.out.println(\"MethodHeader ::= MethodHeaderName MethodHeaderParameters...\");  //$NON-NLS-1$", "+\t\tconsumeMethodHeader();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 134 : // System.out.println(\"MethodHeaderName ::= Modifiersopt Type Identifier LPAREN\");  //$NON-NLS-1$", "+\t\tconsumeMethodHeaderName();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 135 : // System.out.println(\"MethodHeaderParameters ::= FormalParameterListopt RPAREN\");  //$NON-NLS-1$", "+\t\tconsumeMethodHeaderParameters();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 136 : // System.out.println(\"MethodHeaderExtendedDims ::= Dimsopt\");  //$NON-NLS-1$", "+\t\tconsumeMethodHeaderExtendedDims();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 137 : // System.out.println(\"MethodHeaderThrowsClause ::= throws ClassTypeList\");  //$NON-NLS-1$", "+\t\tconsumeMethodHeaderThrowsClause();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 138 : // System.out.println(\"ConstructorHeader ::= ConstructorHeaderName MethodHeaderParameters\");  //$NON-NLS-1$", "+\t\tconsumeConstructorHeader();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 139 : // System.out.println(\"ConstructorHeaderName ::= Modifiersopt Identifier LPAREN\");  //$NON-NLS-1$", "+\t\tconsumeConstructorHeaderName();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 141 : // System.out.println(\"FormalParameterList ::= FormalParameterList COMMA FormalParameter\");  //$NON-NLS-1$", "+\t\tconsumeFormalParameterList();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 142 : // System.out.println(\"FormalParameter ::= Modifiersopt Type VariableDeclaratorId\");  //$NON-NLS-1$", "+\t\t// the boolean is used to know if the modifiers should be reset", "+\t\tconsumeFormalParameter();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 144 : // System.out.println(\"ClassTypeList ::= ClassTypeList COMMA ClassTypeElt\");  //$NON-NLS-1$", "+\t\tconsumeClassTypeList();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 145 : // System.out.println(\"ClassTypeElt ::= ClassType\");  //$NON-NLS-1$", "+\t\tconsumeClassTypeElt();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 146 : // System.out.println(\"MethodBody ::= NestedMethod LBRACE BlockStatementsopt RBRACE\");  //$NON-NLS-1$", "+\t\tconsumeMethodBody();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 147 : // System.out.println(\"NestedMethod ::=\");  //$NON-NLS-1$", "+\t\tconsumeNestedMethod();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 148 : // System.out.println(\"StaticInitializer ::= StaticOnly Block\");  //$NON-NLS-1$", "+\t\tconsumeStaticInitializer();  ", "+\t\tbreak ;", "-    case 149 : // System.out.println(\"StaticOnly ::= static\");  //$NON-NLS-1$", "-\t\t    consumeStaticOnly();  ", "-\t\t\tbreak ;", "- ", "-    case 150 : // System.out.println(\"ConstructorDeclaration ::= ConstructorHeader MethodBody\");  //$NON-NLS-1$", "-\t\t    consumeConstructorDeclaration() ;  ", "-\t\t\tbreak ;", "- ", "-    case 151 : // System.out.println(\"ConstructorDeclaration ::= ConstructorHeader SEMICOLON\");  //$NON-NLS-1$", "-\t\t    consumeInvalidConstructorDeclaration() ;  ", "-\t\t\tbreak ;", "- ", "-    case 152 : // System.out.println(\"ExplicitConstructorInvocation ::= this LPAREN ArgumentListopt RPAREN\");  //$NON-NLS-1$", "-\t\t    consumeExplicitConstructorInvocation(0,ExplicitConstructorCall.This);  ", "-\t\t\tbreak ;", "- ", "-    case 153 : // System.out.println(\"ExplicitConstructorInvocation ::= super LPAREN ArgumentListopt...\");  //$NON-NLS-1$", "-\t\t    consumeExplicitConstructorInvocation(0,ExplicitConstructorCall.Super);  ", "-\t\t\tbreak ;", "- ", "-    case 154 : // System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT super LPAREN...\");  //$NON-NLS-1$", "-\t\t    consumeExplicitConstructorInvocation(1, ExplicitConstructorCall.Super);  ", "-\t\t\tbreak ;", "- ", "-    case 155 : // System.out.println(\"ExplicitConstructorInvocation ::= Name DOT super LPAREN...\");  //$NON-NLS-1$", "-\t\t    consumeExplicitConstructorInvocation(2, ExplicitConstructorCall.Super);  ", "-\t\t\tbreak ;", "- ", "-    case 156 : // System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT this LPAREN...\");  //$NON-NLS-1$", "-\t\t    consumeExplicitConstructorInvocation(1, ExplicitConstructorCall.This);  ", "-\t\t\tbreak ;", "- ", "-    case 157 : // System.out.println(\"ExplicitConstructorInvocation ::= Name DOT this LPAREN...\");  //$NON-NLS-1$", "-\t\t    consumeExplicitConstructorInvocation(2, ExplicitConstructorCall.This);  ", "-\t\t\tbreak ;", "- ", "-    case 158 : // System.out.println(\"InterfaceDeclaration ::= InterfaceHeader InterfaceBody\");  //$NON-NLS-1$", "-\t\t    consumeInterfaceDeclaration();  ", "-\t\t\tbreak ;", "- ", "-    case 159 : // System.out.println(\"InterfaceHeader ::= InterfaceHeaderName InterfaceHeaderExtendsopt\");  //$NON-NLS-1$", "-\t\t    consumeInterfaceHeader();  ", "-\t\t\tbreak ;", "- ", "-    case 160 : // System.out.println(\"InterfaceHeaderName ::= Modifiersopt interface Identifier\");  //$NON-NLS-1$", "-\t\t    consumeInterfaceHeaderName();  ", "-\t\t\tbreak ;", "- ", "-    case 162 : // System.out.println(\"InterfaceHeaderExtends ::= extends InterfaceTypeList\");  //$NON-NLS-1$", "-\t\t    consumeInterfaceHeaderExtends();  ", "-\t\t\tbreak ;", "- ", "-    case 165 : // System.out.println(\"InterfaceMemberDeclarations ::= InterfaceMemberDeclarations...\");  //$NON-NLS-1$", "-\t\t    consumeInterfaceMemberDeclarations();  ", "-\t\t\tbreak ;", "- ", "-    case 166 : // System.out.println(\"InterfaceMemberDeclaration ::= SEMICOLON\");  //$NON-NLS-1$", "-\t\t    consumeEmptyInterfaceMemberDeclaration();  ", "-\t\t\tbreak ;", "- ", "-    case 169 : // System.out.println(\"InterfaceMemberDeclaration ::= InvalidMethodDeclaration\");  //$NON-NLS-1$", "-\t\t    ignoreMethodBody();  ", "-\t\t\tbreak ;", "- ", "-    case 170 : // System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader MethodBody\");  //$NON-NLS-1$", "-\t\t    ignoreInvalidConstructorDeclaration(true);   ", "-\t\t\tbreak ;", "- ", "-    case 171 : // System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader SEMICOLON\");  //$NON-NLS-1$", "-\t\t    ignoreInvalidConstructorDeclaration(false);   ", "-\t\t\tbreak ;", "- ", "-    case 177 : // System.out.println(\"ArrayInitializer ::= LBRACE ,opt RBRACE\");  //$NON-NLS-1$", "-\t\t    consumeEmptyArrayInitializer();  ", "-\t\t\tbreak ;", "- ", "-    case 178 : // System.out.println(\"ArrayInitializer ::= LBRACE VariableInitializers RBRACE\");  //$NON-NLS-1$", "-\t\t    consumeArrayInitializer();  ", "-\t\t\tbreak ;", "- ", "-    case 179 : // System.out.println(\"ArrayInitializer ::= LBRACE VariableInitializers COMMA RBRACE\");  //$NON-NLS-1$", "-\t\t    consumeArrayInitializer();  ", "-\t\t\tbreak ;", "- ", "-    case 181 : // System.out.println(\"VariableInitializers ::= VariableInitializers COMMA...\");  //$NON-NLS-1$", "-\t\t    consumeVariableInitializers();  ", "-\t\t\tbreak ;", "- ", "-    case 182 : // System.out.println(\"Block ::= OpenBlock LBRACE BlockStatementsopt RBRACE\");  //$NON-NLS-1$", "-\t\t    consumeBlock();  ", "-\t\t\tbreak ;", "- ", "-    case 183 : // System.out.println(\"OpenBlock ::=\");  //$NON-NLS-1$", "-\t\t    consumeOpenBlock() ;  ", "-\t\t\tbreak ;", "- ", "-    case 185 : // System.out.println(\"BlockStatements ::= BlockStatements BlockStatement\");  //$NON-NLS-1$", "-\t\t    consumeBlockStatements() ;  ", "-\t\t\tbreak ;", "- ", "-    case 189 : // System.out.println(\"BlockStatement ::= InvalidInterfaceDeclaration\");  //$NON-NLS-1$", "-\t\t    ignoreInterfaceDeclaration();  ", "-\t\t\tbreak ;", "- ", "-    case 190 : // System.out.println(\"LocalVariableDeclarationStatement ::= LocalVariableDeclaration...\");  //$NON-NLS-1$", "-\t\t    consumeLocalVariableDeclarationStatement();  ", "-\t\t\tbreak ;", "- ", "-    case 191 : // System.out.println(\"LocalVariableDeclaration ::= Type PushModifiers VariableDeclarators\");  //$NON-NLS-1$", "-\t\t    consumeLocalVariableDeclaration();  ", "-\t\t\tbreak ;", "- ", "-    case 192 : // System.out.println(\"LocalVariableDeclaration ::= Modifiers Type PushModifiers...\");  //$NON-NLS-1$", "-\t\t    consumeLocalVariableDeclaration();  ", "-\t\t\tbreak ;", "- ", "-    case 193 : // System.out.println(\"PushModifiers ::=\");  //$NON-NLS-1$", "-\t\t    consumePushModifiers();  ", "-\t\t\tbreak ;", "- ", "-    case 217 : // System.out.println(\"EmptyStatement ::= SEMICOLON\");  //$NON-NLS-1$", "-\t\t    consumeEmptyStatement();  ", "-\t\t\tbreak ;", "- ", "-    case 218 : // System.out.println(\"LabeledStatement ::= Identifier COLON Statement\");  //$NON-NLS-1$", "-\t\t    consumeStatementLabel() ;  ", "-\t\t\tbreak ;", "- ", "-    case 219 : // System.out.println(\"LabeledStatementNoShortIf ::= Identifier COLON StatementNoShortIf\");  //$NON-NLS-1$", "-\t\t    consumeStatementLabel() ;  ", "-\t\t\tbreak ;", "- ", "-     case 220 : // System.out.println(\"ExpressionStatement ::= StatementExpression SEMICOLON\");  //$NON-NLS-1$", "-\t\t    consumeExpressionStatement();  ", "-\t\t\tbreak ;", "- ", "-    case 229 : // System.out.println(\"IfThenStatement ::= if LPAREN Expression RPAREN Statement\");  //$NON-NLS-1$", "-\t\t    consumeStatementIfNoElse();  ", "-\t\t\tbreak ;", "- ", "-    case 230 : // System.out.println(\"IfThenElseStatement ::= if LPAREN Expression RPAREN...\");  //$NON-NLS-1$", "-\t\t    consumeStatementIfWithElse();  ", "-\t\t\tbreak ;", "- ", "-    case 231 : // System.out.println(\"IfThenElseStatementNoShortIf ::= if LPAREN Expression RPAREN...\");  //$NON-NLS-1$", "-\t\t    consumeStatementIfWithElse();  ", "-\t\t\tbreak ;", "- ", "-    case 232 : // System.out.println(\"SwitchStatement ::= switch LPAREN Expression RPAREN OpenBlock...\");  //$NON-NLS-1$", "-\t\t    consumeStatementSwitch() ;  ", "-\t\t\tbreak ;", "- ", "-    case 233 : // System.out.println(\"SwitchBlock ::= LBRACE RBRACE\");  //$NON-NLS-1$", "-\t\t    consumeEmptySwitchBlock() ;  ", "-\t\t\tbreak ;", "- ", "-    case 236 : // System.out.println(\"SwitchBlock ::= LBRACE SwitchBlockStatements SwitchLabels RBRACE\");  //$NON-NLS-1$", "-\t\t    consumeSwitchBlock() ;  ", "-\t\t\tbreak ;", "- ", "-    case 238 : // System.out.println(\"SwitchBlockStatements ::= SwitchBlockStatements SwitchBlockStatement\");  //$NON-NLS-1$", "-\t\t    consumeSwitchBlockStatements() ;  ", "-\t\t\tbreak ;", "- ", "-    case 239 : // System.out.println(\"SwitchBlockStatement ::= SwitchLabels BlockStatements\");  //$NON-NLS-1$", "-\t\t    consumeSwitchBlockStatement() ;  ", "-\t\t\tbreak ;", "- ", "-    case 241 : // System.out.println(\"SwitchLabels ::= SwitchLabels SwitchLabel\");  //$NON-NLS-1$", "-\t\t    consumeSwitchLabels() ;  ", "-\t\t\tbreak ;", "- ", "-     case 242 : // System.out.println(\"SwitchLabel ::= case ConstantExpression COLON\");  //$NON-NLS-1$", "-\t\t    consumeCaseLabel();  ", "-\t\t\tbreak ;", "- ", "-     case 243 : // System.out.println(\"SwitchLabel ::= default COLON\");  //$NON-NLS-1$", "-\t\t    consumeDefaultLabel();  ", "-\t\t\tbreak ;", "- ", "-    case 244 : // System.out.println(\"WhileStatement ::= while LPAREN Expression RPAREN Statement\");  //$NON-NLS-1$", "-\t\t    consumeStatementWhile() ;  ", "-\t\t\tbreak ;", "- ", "-    case 245 : // System.out.println(\"WhileStatementNoShortIf ::= while LPAREN Expression RPAREN...\");  //$NON-NLS-1$", "-\t\t    consumeStatementWhile() ;  ", "-\t\t\tbreak ;", "- ", "-    case 246 : // System.out.println(\"DoStatement ::= do Statement while LPAREN Expression RPAREN...\");  //$NON-NLS-1$", "-\t\t    consumeStatementDo() ;  ", "-\t\t\tbreak ;", "- ", "-    case 247 : // System.out.println(\"ForStatement ::= for LPAREN ForInitopt SEMICOLON Expressionopt...\");  //$NON-NLS-1$", "-\t\t    consumeStatementFor() ;  ", "-\t\t\tbreak ;", "- ", "-    case 248 : // System.out.println(\"ForStatementNoShortIf ::= for LPAREN ForInitopt SEMICOLON...\");  //$NON-NLS-1$", "-\t\t    consumeStatementFor() ;  ", "-\t\t\tbreak ;", "- ", "-    case 249 : // System.out.println(\"ForInit ::= StatementExpressionList\");  //$NON-NLS-1$", "-\t\t    consumeForInit() ;  ", "-\t\t\tbreak ;", "- ", "-    case 253 : // System.out.println(\"StatementExpressionList ::= StatementExpressionList COMMA...\");  //$NON-NLS-1$", "-\t\t    consumeStatementExpressionList() ;  ", "-\t\t\tbreak ;", "- ", "-    case 254 : // System.out.println(\"AssertStatement ::= assert Expression SEMICOLON\");  //$NON-NLS-1$", "-\t\t    consumeSimpleAssertStatement() ;  ", "-\t\t\tbreak ;", "- ", "-    case 255 : // System.out.println(\"AssertStatement ::= assert Expression COLON Expression SEMICOLON\");  //$NON-NLS-1$", "-\t\t    consumeAssertStatement() ;  ", "-\t\t\tbreak ;", "- ", "-    case 256 : // System.out.println(\"BreakStatement ::= break SEMICOLON\");  //$NON-NLS-1$", "-\t\t    consumeStatementBreak() ;  ", "-\t\t\tbreak ;", "- ", "-    case 257 : // System.out.println(\"BreakStatement ::= break Identifier SEMICOLON\");  //$NON-NLS-1$", "-\t\t    consumeStatementBreakWithLabel() ;  ", "-\t\t\tbreak ;", "- ", "-    case 258 : // System.out.println(\"ContinueStatement ::= continue SEMICOLON\");  //$NON-NLS-1$", "-\t\t    consumeStatementContinue() ;  ", "-\t\t\tbreak ;", "- ", "-    case 259 : // System.out.println(\"ContinueStatement ::= continue Identifier SEMICOLON\");  //$NON-NLS-1$", "-\t\t    consumeStatementContinueWithLabel() ;  ", "-\t\t\tbreak ;", "- ", "-    case 260 : // System.out.println(\"ReturnStatement ::= return Expressionopt SEMICOLON\");  //$NON-NLS-1$", "-\t\t    consumeStatementReturn() ;  ", "-\t\t\tbreak ;", "- ", "-    case 261 : // System.out.println(\"ThrowStatement ::= throw Expression SEMICOLON\");  //$NON-NLS-1$", "-\t\t    consumeStatementThrow();", "- ", "-\t\t\tbreak ;", "- ", "-    case 262 : // System.out.println(\"SynchronizedStatement ::= OnlySynchronized LPAREN Expression RPAREN\");  //$NON-NLS-1$", "-\t\t    consumeStatementSynchronized();  ", "-\t\t\tbreak ;", "- ", "-    case 263 : // System.out.println(\"OnlySynchronized ::= synchronized\");  //$NON-NLS-1$", "-\t\t    consumeOnlySynchronized();  ", "-\t\t\tbreak ;", "- ", "-    case 264 : // System.out.println(\"TryStatement ::= try Block Catches\");  //$NON-NLS-1$", "-\t\t    consumeStatementTry(false);  ", "-\t\t\tbreak ;", "- ", "-    case 265 : // System.out.println(\"TryStatement ::= try Block Catchesopt Finally\");  //$NON-NLS-1$", "-\t\t    consumeStatementTry(true);  ", "-\t\t\tbreak ;", "- ", "-    case 267 : // System.out.println(\"Catches ::= Catches CatchClause\");  //$NON-NLS-1$", "-\t\t    consumeCatches();  ", "-\t\t\tbreak ;", "- ", "-    case 268 : // System.out.println(\"CatchClause ::= catch LPAREN FormalParameter RPAREN Block\");  //$NON-NLS-1$", "-\t\t    consumeStatementCatch() ;  ", "-\t\t\tbreak ;", "- ", "-    case 270 : // System.out.println(\"PushLPAREN ::= LPAREN\");  //$NON-NLS-1$", "-\t\t    consumeLeftParen();  ", "-\t\t\tbreak ;", "- ", "-    case 271 : // System.out.println(\"PushRPAREN ::= RPAREN\");  //$NON-NLS-1$", "-\t\t    consumeRightParen();  ", "-\t\t\tbreak ;", "- ", "-    case 276 : // System.out.println(\"PrimaryNoNewArray ::= this\");  //$NON-NLS-1$", "-\t\t    consumePrimaryNoNewArrayThis();  ", "-\t\t\tbreak ;", "- ", "-    case 277 : // System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Expression PushRPAREN\");  //$NON-NLS-1$", "-\t\t    consumePrimaryNoNewArray();  ", "-\t\t\tbreak ;", "- ", "-    case 280 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT this\");  //$NON-NLS-1$", "-\t\t    consumePrimaryNoNewArrayNameThis();  ", "-\t\t\tbreak ;", "- ", "-    case 281 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT super\");  //$NON-NLS-1$", "-\t\t    consumePrimaryNoNewArrayNameSuper();  ", "-\t\t\tbreak ;", "- ", "-    case 282 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT class\");  //$NON-NLS-1$", "-\t\t    consumePrimaryNoNewArrayName();  ", "-\t\t\tbreak ;", "- ", "-    case 283 : // System.out.println(\"PrimaryNoNewArray ::= ArrayType DOT class\");  //$NON-NLS-1$", "-\t\t    consumePrimaryNoNewArrayArrayType();  ", "-\t\t\tbreak ;", "- ", "-    case 284 : // System.out.println(\"PrimaryNoNewArray ::= PrimitiveType DOT class\");  //$NON-NLS-1$", "-\t\t    consumePrimaryNoNewArrayPrimitiveType();  ", "-\t\t\tbreak ;", "- ", "-    case 287 : // System.out.println(\"AllocationHeader ::= new ClassType LPAREN ArgumentListopt RPAREN\");  //$NON-NLS-1$", "-\t\t    consumeAllocationHeader();  ", "-\t\t\tbreak ;", "- ", "-    case 288 : // System.out.println(\"ClassInstanceCreationExpression ::= new ClassType LPAREN...\");  //$NON-NLS-1$", "-\t\t    consumeClassInstanceCreationExpression();  ", "-\t\t\tbreak ;", "- ", "-    case 289 : // System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new SimpleName...\");  //$NON-NLS-1$", "-\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "-\t\t\tbreak ;", "- ", "-    case 290 : // System.out.println(\"ClassInstanceCreationExpression ::=...\");  //$NON-NLS-1$", "-\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "-\t\t\tbreak ;", "- ", "-    case 291 : // System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\");  //$NON-NLS-1$", "-\t\t    consumeClassInstanceCreationExpressionName() ;  ", "-\t\t\tbreak ;", "- ", "-    case 292 : // System.out.println(\"ClassBodyopt ::=\");  //$NON-NLS-1$", "-\t\t    consumeClassBodyopt();  ", "-\t\t\tbreak ;", "- ", "-    case 294 : // System.out.println(\"EnterAnonymousClassBody ::=\");  //$NON-NLS-1$", "-\t\t    consumeEnterAnonymousClassBody();  ", "-\t\t\tbreak ;", "- ", "-    case 296 : // System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\");  //$NON-NLS-1$", "-\t\t    consumeArgumentList();  ", "-\t\t\tbreak ;", "- ", "-    case 297 : // System.out.println(\"ArrayCreationHeader ::= new PrimitiveType DimWithOrWithOutExprs\");  //$NON-NLS-1$", "-\t\t    consumeArrayCreationHeader();  ", "-\t\t\tbreak ;", "- ", "-    case 298 : // System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\");  //$NON-NLS-1$", "-\t\t    consumeArrayCreationHeader();  ", "-\t\t\tbreak ;", "- ", "-    case 299 : // System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new PrimitiveType...\");  //$NON-NLS-1$", "-\t\t    consumeArrayCreationExpressionWithoutInitializer();  ", "-\t\t\tbreak ;", "- ", "-    case 300 : // System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType...\");  //$NON-NLS-1$", "-\t\t    consumeArrayCreationExpressionWithInitializer();  ", "-\t\t\tbreak ;", "- ", "-    case 301 : // System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new ClassOrInterfaceType...\");  //$NON-NLS-1$", "-\t\t    consumeArrayCreationExpressionWithoutInitializer();  ", "-\t\t\tbreak ;", "- ", "-    case 302 : // System.out.println(\"ArrayCreationWithArrayInitializer ::= new ClassOrInterfaceType...\");  //$NON-NLS-1$", "-\t\t    consumeArrayCreationExpressionWithInitializer();  ", "-\t\t\tbreak ;", "- ", "-    case 304 : // System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs DimWithOrWithOutExpr\");  //$NON-NLS-1$", "-\t\t    consumeDimWithOrWithOutExprs();  ", "-\t\t\tbreak ;", "- ", "-     case 306 : // System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\");  //$NON-NLS-1$", "-\t\t    consumeDimWithOrWithOutExpr();  ", "-\t\t\tbreak ;", "- ", "-     case 307 : // System.out.println(\"Dims ::= DimsLoop\");  //$NON-NLS-1$", "-\t\t    consumeDims();  ", "-\t\t\tbreak ;", "- ", "-     case 310 : // System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\");  //$NON-NLS-1$", "-\t\t    consumeOneDimLoop();  ", "-\t\t\tbreak ;", "- ", "-    case 311 : // System.out.println(\"FieldAccess ::= Primary DOT Identifier\");  //$NON-NLS-1$", "-\t\t    consumeFieldAccess(false);  ", "-\t\t\tbreak ;", "- ", "-    case 312 : // System.out.println(\"FieldAccess ::= super DOT Identifier\");  //$NON-NLS-1$", "-\t\t    consumeFieldAccess(true);  ", "-\t\t\tbreak ;", "- ", "-    case 313 : // System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\");  //$NON-NLS-1$", "-\t\t    consumeMethodInvocationName();  ", "-\t\t\tbreak ;", "- ", "-    case 314 : // System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN ArgumentListopt\");  //$NON-NLS-1$", "-\t\t    consumeMethodInvocationPrimary();  ", "-\t\t\tbreak ;", "- ", "-    case 315 : // System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN ArgumentListopt...\");  //$NON-NLS-1$", "-\t\t    consumeMethodInvocationSuper();  ", "-\t\t\tbreak ;", "- ", "-    case 316 : // System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\");  //$NON-NLS-1$", "-\t\t    consumeArrayAccess(true);  ", "-\t\t\tbreak ;", "- ", "-    case 317 : // System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression RBRACKET\");  //$NON-NLS-1$", "-\t\t    consumeArrayAccess(false);  ", "-\t\t\tbreak ;", "- ", "-    case 318 : // System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer LBRACKET...\");  //$NON-NLS-1$", "-\t\t    consumeArrayAccess(false);  ", "-\t\t\tbreak ;", "- ", "-    case 320 : // System.out.println(\"PostfixExpression ::= Name\");  //$NON-NLS-1$", "-\t\t    consumePostfixExpression();  ", "-\t\t\tbreak ;", "- ", "-    case 323 : // System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\");  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.PLUS,true);  ", "-\t\t\tbreak ;", "- ", "-    case 324 : // System.out.println(\"PostDecrementExpression ::= PostfixExpression MINUS_MINUS\");  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.MINUS,true);  ", "-\t\t\tbreak ;", "- ", "-    case 325 : // System.out.println(\"PushPosition ::=\");  //$NON-NLS-1$", "-\t\t    consumePushPosition();  ", "-\t\t\tbreak ;", "- ", "-    case 328 : // System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\");  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.PLUS);  ", "-\t\t\tbreak ;", "- ", "-    case 329 : // System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\");  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.MINUS);  ", "-\t\t\tbreak ;", "- ", "-    case 331 : // System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition UnaryExpression\");  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.PLUS,false);  ", "-\t\t\tbreak ;", "- ", "-    case 332 : // System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition UnaryExpression\");  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.MINUS,false);  ", "-\t\t\tbreak ;", "- ", "-    case 334 : // System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition UnaryExpression\");  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.TWIDDLE);  ", "-\t\t\tbreak ;", "- ", "-    case 335 : // System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition UnaryExpression\");  //$NON-NLS-1$", "-\t\t    consumeUnaryExpression(OperatorIds.NOT);  ", "-\t\t\tbreak ;", "- ", "-    case 337 : // System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt PushRPAREN...\");  //$NON-NLS-1$", "-\t\t    consumeCastExpression();  ", "-\t\t\tbreak ;", "- ", "-    case 338 : // System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\");  //$NON-NLS-1$", "-\t\t    consumeCastExpression();  ", "-\t\t\tbreak ;", "- ", "-    case 339 : // System.out.println(\"CastExpression ::= PushLPAREN Expression PushRPAREN...\");  //$NON-NLS-1$", "-\t\t    consumeCastExpressionLL1();  ", "-\t\t\tbreak ;", "- ", "-    case 340 : // System.out.println(\"InsideCastExpression ::=\");  //$NON-NLS-1$", "-\t\t    consumeInsideCastExpression();  ", "-\t\t\tbreak ;", "- ", "-    case 341 : // System.out.println(\"InsideCastExpressionLL1 ::=\");  //$NON-NLS-1$", "-\t\t    consumeInsideCastExpressionLL1();  ", "-\t\t\tbreak ;", "- ", "-    case 343 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression MULTIPLY...\");  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MULTIPLY);  ", "-\t\t\tbreak ;", "- ", "-    case 344 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression DIVIDE...\");  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.DIVIDE);  ", "-\t\t\tbreak ;", "- ", "-    case 345 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression REMAINDER...\");  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.REMAINDER);  ", "-\t\t\tbreak ;", "- ", "-    case 347 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\");  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.PLUS);  ", "-\t\t\tbreak ;", "- ", "-    case 348 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\");  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.MINUS);  ", "-\t\t\tbreak ;", "- ", "-    case 350 : // System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT AdditiveExpression\");  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LEFT_SHIFT);  ", "-\t\t\tbreak ;", "- ", "-    case 351 : // System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT AdditiveExpression\");  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.RIGHT_SHIFT);  ", "-\t\t\tbreak ;", "- ", "-    case 352 : // System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT...\");  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak ;", "- ", "-    case 354 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS ShiftExpression\");  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS);  ", "-\t\t\tbreak ;", "- ", "-    case 355 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\");  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER);  ", "-\t\t\tbreak ;", "- ", "-    case 356 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL...\");  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.LESS_EQUAL);  ", "-\t\t\tbreak ;", "- ", "-    case 357 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER_EQUAL...\");  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.GREATER_EQUAL);  ", "-\t\t\tbreak ;", "- ", "-    case 358 : // System.out.println(\"RelationalExpression ::= RelationalExpression instanceof...\");  //$NON-NLS-1$", "-\t\t    consumeInstanceOfExpression(OperatorIds.INSTANCEOF);  ", "-\t\t\tbreak ;", "- ", "-    case 360 : // System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\");  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.EQUAL_EQUAL);  ", "-\t\t\tbreak ;", "- ", "-    case 361 : // System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\");  //$NON-NLS-1$", "-\t\t    consumeEqualityExpression(OperatorIds.NOT_EQUAL);  ", "-\t\t\tbreak ;", "- ", "-    case 363 : // System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\");  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND);  ", "-\t\t\tbreak ;", "- ", "-    case 365 : // System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR AndExpression\");  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.XOR);  ", "-\t\t\tbreak ;", "- ", "-    case 367 : // System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\");  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR);  ", "-\t\t\tbreak ;", "- ", "-    case 369 : // System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression AND_AND...\");  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.AND_AND);  ", "-\t\t\tbreak ;", "- ", "-    case 371 : // System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression OR_OR...\");  //$NON-NLS-1$", "-\t\t    consumeBinaryExpression(OperatorIds.OR_OR);  ", "-\t\t\tbreak ;", "- ", "-    case 373 : // System.out.println(\"ConditionalExpression ::= ConditionalOrExpression QUESTION...\");  //$NON-NLS-1$", "-\t\t    consumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;  ", "-\t\t\tbreak ;", "- ", "-    case 376 : // System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\");  //$NON-NLS-1$", "-\t\t    consumeAssignment();  ", "-\t\t\tbreak ;", "- ", "-    case 378 : // System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\");  //$NON-NLS-1$", "-\t\t    ignoreExpressionAssignment(); ", "-\t\t\tbreak ;", "- ", "-    case 379 : // System.out.println(\"AssignmentOperator ::= EQUAL\");  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(EQUAL);  ", "-\t\t\tbreak ;", "- ", "-    case 380 : // System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\");  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(MULTIPLY);  ", "-\t\t\tbreak ;", "- ", "-    case 381 : // System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\");  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(DIVIDE);  ", "-\t\t\tbreak ;", "- ", "-    case 382 : // System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\");  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(REMAINDER);  ", "-\t\t\tbreak ;", "- ", "-    case 383 : // System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\");  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(PLUS);  ", "-\t\t\tbreak ;", "- ", "-    case 384 : // System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\");  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(MINUS);  ", "-\t\t\tbreak ;", "- ", "-    case 385 : // System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\");  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(LEFT_SHIFT);  ", "-\t\t\tbreak ;", "- ", "-    case 386 : // System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\");  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(RIGHT_SHIFT);  ", "-\t\t\tbreak ;", "- ", "-    case 387 : // System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\");  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\tbreak ;", "- ", "-    case 388 : // System.out.println(\"AssignmentOperator ::= AND_EQUAL\");  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(AND);  ", "-\t\t\tbreak ;", "- ", "-    case 389 : // System.out.println(\"AssignmentOperator ::= XOR_EQUAL\");  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(XOR);  ", "-\t\t\tbreak ;", "- ", "-    case 390 : // System.out.println(\"AssignmentOperator ::= OR_EQUAL\");  //$NON-NLS-1$", "-\t\t    consumeAssignmentOperator(OR);  ", "-\t\t\tbreak ;", "- ", "-    case 397 : // System.out.println(\"Expressionopt ::=\");  //$NON-NLS-1$", "-\t\t    consumeEmptyExpression();  ", "-\t\t\tbreak ;", "- ", "-    case 401 : // System.out.println(\"ImportDeclarationsopt ::=\");  //$NON-NLS-1$", "-\t\t    consumeEmptyImportDeclarationsopt();  ", "-\t\t\tbreak ;", "- ", "-    case 402 : // System.out.println(\"ImportDeclarationsopt ::= ImportDeclarations\");  //$NON-NLS-1$", "-\t\t    consumeImportDeclarationsopt();  ", "-\t\t\tbreak ;", "- ", "-    case 403 : // System.out.println(\"TypeDeclarationsopt ::=\");  //$NON-NLS-1$", "-\t\t    consumeEmptyTypeDeclarationsopt();  ", "-\t\t\tbreak ;", "- ", "-    case 404 : // System.out.println(\"TypeDeclarationsopt ::= TypeDeclarations\");  //$NON-NLS-1$", "-\t\t    consumeTypeDeclarationsopt();  ", "-\t\t\tbreak ;", "- ", "-    case 405 : // System.out.println(\"ClassBodyDeclarationsopt ::=\");  //$NON-NLS-1$", "-\t\t    consumeEmptyClassBodyDeclarationsopt();  ", "-\t\t\tbreak ;", "- ", "-    case 406 : // System.out.println(\"ClassBodyDeclarationsopt ::= NestedType ClassBodyDeclarations\");  //$NON-NLS-1$", "-\t\t    consumeClassBodyDeclarationsopt();  ", "-\t\t\tbreak ;", "- ", "-     case 407 : // System.out.println(\"Modifiersopt ::=\");  //$NON-NLS-1$", "-\t\t    consumeDefaultModifiers();  ", "-\t\t\tbreak ;", "- ", "-    case 408 : // System.out.println(\"Modifiersopt ::= Modifiers\");  //$NON-NLS-1$", "-\t\t    consumeModifiers();  ", "-\t\t\tbreak ;", "- ", "-    case 409 : // System.out.println(\"BlockStatementsopt ::=\");  //$NON-NLS-1$", "-\t\t    consumeEmptyBlockStatementsopt();  ", "-\t\t\tbreak ;", "- ", "-     case 411 : // System.out.println(\"Dimsopt ::=\");  //$NON-NLS-1$", "-\t\t    consumeEmptyDimsopt();  ", "-\t\t\tbreak ;", "- ", "-     case 413 : // System.out.println(\"ArgumentListopt ::=\");  //$NON-NLS-1$", "-\t\t    consumeEmptyArgumentListopt();  ", "-\t\t\tbreak ;", "- ", "-    case 417 : // System.out.println(\"FormalParameterListopt ::=\");  //$NON-NLS-1$", "-\t\t    consumeFormalParameterListopt();  ", "-\t\t\tbreak ;", "- ", "-     case 421 : // System.out.println(\"InterfaceMemberDeclarationsopt ::=\");  //$NON-NLS-1$", "-\t\t    consumeEmptyInterfaceMemberDeclarationsopt();  ", "-\t\t\tbreak ;", "- ", "-     case 422 : // System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\");  //$NON-NLS-1$", "-\t\t    consumeInterfaceMemberDeclarationsopt();  ", "-\t\t\tbreak ;", "- ", "-    case 423 : // System.out.println(\"NestedType ::=\");  //$NON-NLS-1$", "-\t\t    consumeNestedType();  ", "-\t\t\tbreak ;", "+\tcase 149 : // System.out.println(\"StaticOnly ::= static\");  //$NON-NLS-1$", "+\t\tconsumeStaticOnly();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 150 : // System.out.println(\"ConstructorDeclaration ::= ConstructorHeader MethodBody\");  //$NON-NLS-1$", "+\t\tconsumeConstructorDeclaration() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 151 : // System.out.println(\"ConstructorDeclaration ::= ConstructorHeader SEMICOLON\");  //$NON-NLS-1$", "+\t\tconsumeInvalidConstructorDeclaration() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 152 : // System.out.println(\"ExplicitConstructorInvocation ::= this LPAREN ArgumentListopt RPAREN\");  //$NON-NLS-1$", "+\t\tconsumeExplicitConstructorInvocation(0,ExplicitConstructorCall.This);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 153 : // System.out.println(\"ExplicitConstructorInvocation ::= super LPAREN ArgumentListopt...\");  //$NON-NLS-1$", "+\t\tconsumeExplicitConstructorInvocation(0,ExplicitConstructorCall.Super);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 154 : // System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT super LPAREN...\");  //$NON-NLS-1$", "+\t\tconsumeExplicitConstructorInvocation(1, ExplicitConstructorCall.Super);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 155 : // System.out.println(\"ExplicitConstructorInvocation ::= Name DOT super LPAREN...\");  //$NON-NLS-1$", "+\t\tconsumeExplicitConstructorInvocation(2, ExplicitConstructorCall.Super);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 156 : // System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT this LPAREN...\");  //$NON-NLS-1$", "+\t\tconsumeExplicitConstructorInvocation(1, ExplicitConstructorCall.This);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 157 : // System.out.println(\"ExplicitConstructorInvocation ::= Name DOT this LPAREN...\");  //$NON-NLS-1$", "+\t\tconsumeExplicitConstructorInvocation(2, ExplicitConstructorCall.This);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 158 : // System.out.println(\"InterfaceDeclaration ::= InterfaceHeader InterfaceBody\");  //$NON-NLS-1$", "+\t\tconsumeInterfaceDeclaration();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 159 : // System.out.println(\"InterfaceHeader ::= InterfaceHeaderName InterfaceHeaderExtendsopt\");  //$NON-NLS-1$", "+\t\tconsumeInterfaceHeader();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 160 : // System.out.println(\"InterfaceHeaderName ::= Modifiersopt interface Identifier\");  //$NON-NLS-1$", "+\t\tconsumeInterfaceHeaderName();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 162 : // System.out.println(\"InterfaceHeaderExtends ::= extends InterfaceTypeList\");  //$NON-NLS-1$", "+\t\tconsumeInterfaceHeaderExtends();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 165 : // System.out.println(\"InterfaceMemberDeclarations ::= InterfaceMemberDeclarations...\");  //$NON-NLS-1$", "+\t\tconsumeInterfaceMemberDeclarations();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 166 : // System.out.println(\"InterfaceMemberDeclaration ::= SEMICOLON\");  //$NON-NLS-1$", "+\t\tconsumeEmptyInterfaceMemberDeclaration();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 169 : // System.out.println(\"InterfaceMemberDeclaration ::= InvalidMethodDeclaration\");  //$NON-NLS-1$", "+\t\tignoreMethodBody();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 170 : // System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader MethodBody\");  //$NON-NLS-1$", "+\t\tignoreInvalidConstructorDeclaration(true);   ", "+\t\tbreak ;", "+\t\t", "+\tcase 171 : // System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader SEMICOLON\");  //$NON-NLS-1$", "+\t\tignoreInvalidConstructorDeclaration(false);   ", "+\t\tbreak ;", "+\t\t", "+\tcase 177 : // System.out.println(\"ArrayInitializer ::= LBRACE ,opt RBRACE\");  //$NON-NLS-1$", "+\t\tconsumeEmptyArrayInitializer();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 178 : // System.out.println(\"ArrayInitializer ::= LBRACE VariableInitializers RBRACE\");  //$NON-NLS-1$", "+\t\tconsumeArrayInitializer();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 179 : // System.out.println(\"ArrayInitializer ::= LBRACE VariableInitializers COMMA RBRACE\");  //$NON-NLS-1$", "+\t\tconsumeArrayInitializer();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 181 : // System.out.println(\"VariableInitializers ::= VariableInitializers COMMA...\");  //$NON-NLS-1$", "+\t\tconsumeVariableInitializers();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 182 : // System.out.println(\"Block ::= OpenBlock LBRACE BlockStatementsopt RBRACE\");  //$NON-NLS-1$", "+\t\tconsumeBlock();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 183 : // System.out.println(\"OpenBlock ::=\");  //$NON-NLS-1$", "+\t\tconsumeOpenBlock() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 185 : // System.out.println(\"BlockStatements ::= BlockStatements BlockStatement\");  //$NON-NLS-1$", "+\t\tconsumeBlockStatements() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 189 : // System.out.println(\"BlockStatement ::= InvalidInterfaceDeclaration\");  //$NON-NLS-1$", "+\t\tignoreInterfaceDeclaration();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 190 : // System.out.println(\"LocalVariableDeclarationStatement ::= LocalVariableDeclaration...\");  //$NON-NLS-1$", "+\t\tconsumeLocalVariableDeclarationStatement();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 191 : // System.out.println(\"LocalVariableDeclaration ::= Type PushModifiers VariableDeclarators\");  //$NON-NLS-1$", "+\t\tconsumeLocalVariableDeclaration();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 192 : // System.out.println(\"LocalVariableDeclaration ::= Modifiers Type PushModifiers...\");  //$NON-NLS-1$", "+\t\tconsumeLocalVariableDeclaration();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 193 : // System.out.println(\"PushModifiers ::=\");  //$NON-NLS-1$", "+\t\tconsumePushModifiers();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 217 : // System.out.println(\"EmptyStatement ::= SEMICOLON\");  //$NON-NLS-1$", "+\t\tconsumeEmptyStatement();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 218 : // System.out.println(\"LabeledStatement ::= Identifier COLON Statement\");  //$NON-NLS-1$", "+\t\tconsumeStatementLabel() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 219 : // System.out.println(\"LabeledStatementNoShortIf ::= Identifier COLON StatementNoShortIf\");  //$NON-NLS-1$", "+\t\tconsumeStatementLabel() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 220 : // System.out.println(\"ExpressionStatement ::= StatementExpression SEMICOLON\");  //$NON-NLS-1$", "+\t\tconsumeExpressionStatement();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 229 : // System.out.println(\"IfThenStatement ::= if LPAREN Expression RPAREN Statement\");  //$NON-NLS-1$", "+\t\tconsumeStatementIfNoElse();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 230 : // System.out.println(\"IfThenElseStatement ::= if LPAREN Expression RPAREN...\");  //$NON-NLS-1$", "+\t\tconsumeStatementIfWithElse();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 231 : // System.out.println(\"IfThenElseStatementNoShortIf ::= if LPAREN Expression RPAREN...\");  //$NON-NLS-1$", "+\t\tconsumeStatementIfWithElse();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 232 : // System.out.println(\"SwitchStatement ::= switch LPAREN Expression RPAREN OpenBlock...\");  //$NON-NLS-1$", "+\t\tconsumeStatementSwitch() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 233 : // System.out.println(\"SwitchBlock ::= LBRACE RBRACE\");  //$NON-NLS-1$", "+\t\tconsumeEmptySwitchBlock() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 236 : // System.out.println(\"SwitchBlock ::= LBRACE SwitchBlockStatements SwitchLabels RBRACE\");  //$NON-NLS-1$", "+\t\tconsumeSwitchBlock() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 238 : // System.out.println(\"SwitchBlockStatements ::= SwitchBlockStatements SwitchBlockStatement\");  //$NON-NLS-1$", "+\t\tconsumeSwitchBlockStatements() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 239 : // System.out.println(\"SwitchBlockStatement ::= SwitchLabels BlockStatements\");  //$NON-NLS-1$", "+\t\tconsumeSwitchBlockStatement() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 241 : // System.out.println(\"SwitchLabels ::= SwitchLabels SwitchLabel\");  //$NON-NLS-1$", "+\t\tconsumeSwitchLabels() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 242 : // System.out.println(\"SwitchLabel ::= case ConstantExpression COLON\");  //$NON-NLS-1$", "+\t\tconsumeCaseLabel();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 243 : // System.out.println(\"SwitchLabel ::= default COLON\");  //$NON-NLS-1$", "+\t\tconsumeDefaultLabel();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 244 : // System.out.println(\"WhileStatement ::= while LPAREN Expression RPAREN Statement\");  //$NON-NLS-1$", "+\t\tconsumeStatementWhile() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 245 : // System.out.println(\"WhileStatementNoShortIf ::= while LPAREN Expression RPAREN...\");  //$NON-NLS-1$", "+\t\tconsumeStatementWhile() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 246 : // System.out.println(\"DoStatement ::= do Statement while LPAREN Expression RPAREN...\");  //$NON-NLS-1$", "+\t\tconsumeStatementDo() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 247 : // System.out.println(\"ForStatement ::= for LPAREN ForInitopt SEMICOLON Expressionopt...\");  //$NON-NLS-1$", "+\t\tconsumeStatementFor() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 248 : // System.out.println(\"ForStatementNoShortIf ::= for LPAREN ForInitopt SEMICOLON...\");  //$NON-NLS-1$", "+\t\tconsumeStatementFor() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 249 : // System.out.println(\"ForInit ::= StatementExpressionList\");  //$NON-NLS-1$", "+\t\tconsumeForInit() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 253 : // System.out.println(\"StatementExpressionList ::= StatementExpressionList COMMA...\");  //$NON-NLS-1$", "+\t\tconsumeStatementExpressionList() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 254 : // System.out.println(\"AssertStatement ::= assert Expression SEMICOLON\");  //$NON-NLS-1$", "+\t\tconsumeSimpleAssertStatement() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 255 : // System.out.println(\"AssertStatement ::= assert Expression COLON Expression SEMICOLON\");  //$NON-NLS-1$", "+\t\tconsumeAssertStatement() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 256 : // System.out.println(\"BreakStatement ::= break SEMICOLON\");  //$NON-NLS-1$", "+\t\tconsumeStatementBreak() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 257 : // System.out.println(\"BreakStatement ::= break Identifier SEMICOLON\");  //$NON-NLS-1$", "+\t\tconsumeStatementBreakWithLabel() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 258 : // System.out.println(\"ContinueStatement ::= continue SEMICOLON\");  //$NON-NLS-1$", "+\t\tconsumeStatementContinue() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 259 : // System.out.println(\"ContinueStatement ::= continue Identifier SEMICOLON\");  //$NON-NLS-1$", "+\t\tconsumeStatementContinueWithLabel() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 260 : // System.out.println(\"ReturnStatement ::= return Expressionopt SEMICOLON\");  //$NON-NLS-1$", "+\t\tconsumeStatementReturn() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 261 : // System.out.println(\"ThrowStatement ::= throw Expression SEMICOLON\");  //$NON-NLS-1$", "+\t\tconsumeStatementThrow();", "+\t\t", "+\t\tbreak ;", "+\t\t", "+\tcase 262 : // System.out.println(\"SynchronizedStatement ::= OnlySynchronized LPAREN Expression RPAREN\");  //$NON-NLS-1$", "+\t\tconsumeStatementSynchronized();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 263 : // System.out.println(\"OnlySynchronized ::= synchronized\");  //$NON-NLS-1$", "+\t\tconsumeOnlySynchronized();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 264 : // System.out.println(\"TryStatement ::= try TryBlock Catches\");  //$NON-NLS-1$", "+\t\tconsumeStatementTry(false);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 265 : // System.out.println(\"TryStatement ::= try TryBlock Catchesopt Finally\");  //$NON-NLS-1$", "+\t\tconsumeStatementTry(true);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 267 : // System.out.println(\"ExitTryBlock ::=\");  //$NON-NLS-1$", "+\t\tconsumeExitTryBlock();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 269 : // System.out.println(\"Catches ::= Catches CatchClause\");  //$NON-NLS-1$", "+\t\tconsumeCatches();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 270 : // System.out.println(\"CatchClause ::= catch LPAREN FormalParameter RPAREN Block\");  //$NON-NLS-1$", "+\t\tconsumeStatementCatch() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 272 : // System.out.println(\"PushLPAREN ::= LPAREN\");  //$NON-NLS-1$", "+\t\tconsumeLeftParen();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 273 : // System.out.println(\"PushRPAREN ::= RPAREN\");  //$NON-NLS-1$", "+\t\tconsumeRightParen();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 278 : // System.out.println(\"PrimaryNoNewArray ::= this\");  //$NON-NLS-1$", "+\t\tconsumePrimaryNoNewArrayThis();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 279 : // System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Expression PushRPAREN\");  //$NON-NLS-1$", "+\t\tconsumePrimaryNoNewArray();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 282 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT this\");  //$NON-NLS-1$", "+\t\tconsumePrimaryNoNewArrayNameThis();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 283 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT super\");  //$NON-NLS-1$", "+\t\tconsumePrimaryNoNewArrayNameSuper();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 284 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT class\");  //$NON-NLS-1$", "+\t\tconsumePrimaryNoNewArrayName();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 285 : // System.out.println(\"PrimaryNoNewArray ::= ArrayType DOT class\");  //$NON-NLS-1$", "+\t\tconsumePrimaryNoNewArrayArrayType();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 286 : // System.out.println(\"PrimaryNoNewArray ::= PrimitiveType DOT class\");  //$NON-NLS-1$", "+\t\tconsumePrimaryNoNewArrayPrimitiveType();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 289 : // System.out.println(\"AllocationHeader ::= new ClassType LPAREN ArgumentListopt RPAREN\");  //$NON-NLS-1$", "+\t\tconsumeAllocationHeader();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 290 : // System.out.println(\"ClassInstanceCreationExpression ::= new ClassType LPAREN...\");  //$NON-NLS-1$", "+\t\tconsumeClassInstanceCreationExpression();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 291 : // System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new SimpleName...\");  //$NON-NLS-1$", "+\t\tconsumeClassInstanceCreationExpressionQualified() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 292 : // System.out.println(\"ClassInstanceCreationExpression ::=...\");  //$NON-NLS-1$", "+\t\tconsumeClassInstanceCreationExpressionQualified() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 293 : // System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\");  //$NON-NLS-1$", "+\t\tconsumeClassInstanceCreationExpressionName() ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 294 : // System.out.println(\"ClassBodyopt ::=\");  //$NON-NLS-1$", "+\t\tconsumeClassBodyopt();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 296 : // System.out.println(\"EnterAnonymousClassBody ::=\");  //$NON-NLS-1$", "+\t\tconsumeEnterAnonymousClassBody();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 298 : // System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\");  //$NON-NLS-1$", "+\t\tconsumeArgumentList();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 299 : // System.out.println(\"ArrayCreationHeader ::= new PrimitiveType DimWithOrWithOutExprs\");  //$NON-NLS-1$", "+\t\tconsumeArrayCreationHeader();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 300 : // System.out.println(\"ArrayCreationHeader ::= new ClassOrInterfaceType...\");  //$NON-NLS-1$", "+\t\tconsumeArrayCreationHeader();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 301 : // System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new PrimitiveType...\");  //$NON-NLS-1$", "+\t\tconsumeArrayCreationExpressionWithoutInitializer();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 302 : // System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType...\");  //$NON-NLS-1$", "+\t\tconsumeArrayCreationExpressionWithInitializer();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 303 : // System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new ClassOrInterfaceType...\");  //$NON-NLS-1$", "+\t\tconsumeArrayCreationExpressionWithoutInitializer();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 304 : // System.out.println(\"ArrayCreationWithArrayInitializer ::= new ClassOrInterfaceType...\");  //$NON-NLS-1$", "+\t\tconsumeArrayCreationExpressionWithInitializer();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 306 : // System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs DimWithOrWithOutExpr\");  //$NON-NLS-1$", "+\t\tconsumeDimWithOrWithOutExprs();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 308 : // System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\");  //$NON-NLS-1$", "+\t\tconsumeDimWithOrWithOutExpr();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 309 : // System.out.println(\"Dims ::= DimsLoop\");  //$NON-NLS-1$", "+\t\tconsumeDims();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 312 : // System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\");  //$NON-NLS-1$", "+\t\tconsumeOneDimLoop();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 313 : // System.out.println(\"FieldAccess ::= Primary DOT Identifier\");  //$NON-NLS-1$", "+\t\tconsumeFieldAccess(false);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 314 : // System.out.println(\"FieldAccess ::= super DOT Identifier\");  //$NON-NLS-1$", "+\t\tconsumeFieldAccess(true);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 315 : // System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\");  //$NON-NLS-1$", "+\t\tconsumeMethodInvocationName();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 316 : // System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN ArgumentListopt\");  //$NON-NLS-1$", "+\t\tconsumeMethodInvocationPrimary();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 317 : // System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN ArgumentListopt...\");  //$NON-NLS-1$", "+\t\tconsumeMethodInvocationSuper();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 318 : // System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\");  //$NON-NLS-1$", "+\t\tconsumeArrayAccess(true);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 319 : // System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression RBRACKET\");  //$NON-NLS-1$", "+\t\tconsumeArrayAccess(false);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 320 : // System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer LBRACKET...\");  //$NON-NLS-1$", "+\t\tconsumeArrayAccess(false);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 322 : // System.out.println(\"PostfixExpression ::= Name\");  //$NON-NLS-1$", "+\t\tconsumePostfixExpression();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 325 : // System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\");  //$NON-NLS-1$", "+\t\tconsumeUnaryExpression(OperatorIds.PLUS,true);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 326 : // System.out.println(\"PostDecrementExpression ::= PostfixExpression MINUS_MINUS\");  //$NON-NLS-1$", "+\t\tconsumeUnaryExpression(OperatorIds.MINUS,true);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 327 : // System.out.println(\"PushPosition ::=\");  //$NON-NLS-1$", "+\t\tconsumePushPosition();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 330 : // System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\");  //$NON-NLS-1$", "+\t\tconsumeUnaryExpression(OperatorIds.PLUS);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 331 : // System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\");  //$NON-NLS-1$", "+\t\tconsumeUnaryExpression(OperatorIds.MINUS);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 333 : // System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition UnaryExpression\");  //$NON-NLS-1$", "+\t\tconsumeUnaryExpression(OperatorIds.PLUS,false);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 334 : // System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition UnaryExpression\");  //$NON-NLS-1$", "+\t\tconsumeUnaryExpression(OperatorIds.MINUS,false);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 336 : // System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition UnaryExpression\");  //$NON-NLS-1$", "+\t\tconsumeUnaryExpression(OperatorIds.TWIDDLE);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 337 : // System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition UnaryExpression\");  //$NON-NLS-1$", "+\t\tconsumeUnaryExpression(OperatorIds.NOT);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 339 : // System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt PushRPAREN...\");  //$NON-NLS-1$", "+\t\tconsumeCastExpression();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 340 : // System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN...\");  //$NON-NLS-1$", "+\t\tconsumeCastExpression();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 341 : // System.out.println(\"CastExpression ::= PushLPAREN Expression PushRPAREN...\");  //$NON-NLS-1$", "+\t\tconsumeCastExpressionLL1();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 342 : // System.out.println(\"InsideCastExpression ::=\");  //$NON-NLS-1$", "+\t\tconsumeInsideCastExpression();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 343 : // System.out.println(\"InsideCastExpressionLL1 ::=\");  //$NON-NLS-1$", "+\t\tconsumeInsideCastExpressionLL1();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 345 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression MULTIPLY...\");  //$NON-NLS-1$", "+\t\tconsumeBinaryExpression(OperatorIds.MULTIPLY);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 346 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression DIVIDE...\");  //$NON-NLS-1$", "+\t\tconsumeBinaryExpression(OperatorIds.DIVIDE);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 347 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression REMAINDER...\");  //$NON-NLS-1$", "+\t\tconsumeBinaryExpression(OperatorIds.REMAINDER);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 349 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS...\");  //$NON-NLS-1$", "+\t\tconsumeBinaryExpression(OperatorIds.PLUS);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 350 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS...\");  //$NON-NLS-1$", "+\t\tconsumeBinaryExpression(OperatorIds.MINUS);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 352 : // System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT AdditiveExpression\");  //$NON-NLS-1$", "+\t\tconsumeBinaryExpression(OperatorIds.LEFT_SHIFT);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 353 : // System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT AdditiveExpression\");  //$NON-NLS-1$", "+\t\tconsumeBinaryExpression(OperatorIds.RIGHT_SHIFT);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 354 : // System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT...\");  //$NON-NLS-1$", "+\t\tconsumeBinaryExpression(OperatorIds.UNSIGNED_RIGHT_SHIFT);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 356 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS ShiftExpression\");  //$NON-NLS-1$", "+\t\tconsumeBinaryExpression(OperatorIds.LESS);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 357 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER...\");  //$NON-NLS-1$", "+\t\tconsumeBinaryExpression(OperatorIds.GREATER);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 358 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL...\");  //$NON-NLS-1$", "+\t\tconsumeBinaryExpression(OperatorIds.LESS_EQUAL);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 359 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER_EQUAL...\");  //$NON-NLS-1$", "+\t\tconsumeBinaryExpression(OperatorIds.GREATER_EQUAL);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 360 : // System.out.println(\"RelationalExpression ::= RelationalExpression instanceof...\");  //$NON-NLS-1$", "+\t\tconsumeInstanceOfExpression(OperatorIds.INSTANCEOF);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 362 : // System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL...\");  //$NON-NLS-1$", "+\t\tconsumeEqualityExpression(OperatorIds.EQUAL_EQUAL);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 363 : // System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL...\");  //$NON-NLS-1$", "+\t\tconsumeEqualityExpression(OperatorIds.NOT_EQUAL);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 365 : // System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\");  //$NON-NLS-1$", "+\t\tconsumeBinaryExpression(OperatorIds.AND);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 367 : // System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR AndExpression\");  //$NON-NLS-1$", "+\t\tconsumeBinaryExpression(OperatorIds.XOR);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 369 : // System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR...\");  //$NON-NLS-1$", "+\t\tconsumeBinaryExpression(OperatorIds.OR);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 371 : // System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression AND_AND...\");  //$NON-NLS-1$", "+\t\tconsumeBinaryExpression(OperatorIds.AND_AND);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 373 : // System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression OR_OR...\");  //$NON-NLS-1$", "+\t\tconsumeBinaryExpression(OperatorIds.OR_OR);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 375 : // System.out.println(\"ConditionalExpression ::= ConditionalOrExpression QUESTION...\");  //$NON-NLS-1$", "+\t\tconsumeConditionalExpression(OperatorIds.QUESTIONCOLON) ;  ", "+\t\tbreak ;", "+\t\t", "+\tcase 378 : // System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator...\");  //$NON-NLS-1$", "+\t\tconsumeAssignment();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 380 : // System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\");  //$NON-NLS-1$", "+\t\tignoreExpressionAssignment(); ", "+\t\tbreak ;", "+\t\t", "+\tcase 381 : // System.out.println(\"AssignmentOperator ::= EQUAL\");  //$NON-NLS-1$", "+\t\tconsumeAssignmentOperator(EQUAL);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 382 : // System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\");  //$NON-NLS-1$", "+\t\tconsumeAssignmentOperator(MULTIPLY);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 383 : // System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\");  //$NON-NLS-1$", "+\t\tconsumeAssignmentOperator(DIVIDE);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 384 : // System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\");  //$NON-NLS-1$", "+\t\tconsumeAssignmentOperator(REMAINDER);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 385 : // System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\");  //$NON-NLS-1$", "+\t\tconsumeAssignmentOperator(PLUS);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 386 : // System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\");  //$NON-NLS-1$", "+\t\tconsumeAssignmentOperator(MINUS);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 387 : // System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\");  //$NON-NLS-1$", "+\t\tconsumeAssignmentOperator(LEFT_SHIFT);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 388 : // System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\");  //$NON-NLS-1$", "+\t\tconsumeAssignmentOperator(RIGHT_SHIFT);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 389 : // System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\");  //$NON-NLS-1$", "+\t\tconsumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 390 : // System.out.println(\"AssignmentOperator ::= AND_EQUAL\");  //$NON-NLS-1$", "+\t\tconsumeAssignmentOperator(AND);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 391 : // System.out.println(\"AssignmentOperator ::= XOR_EQUAL\");  //$NON-NLS-1$", "+\t\tconsumeAssignmentOperator(XOR);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 392 : // System.out.println(\"AssignmentOperator ::= OR_EQUAL\");  //$NON-NLS-1$", "+\t\tconsumeAssignmentOperator(OR);  ", "+\t\tbreak ;", "+\t\t", "+\tcase 399 : // System.out.println(\"Expressionopt ::=\");  //$NON-NLS-1$", "+\t\tconsumeEmptyExpression();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 403 : // System.out.println(\"ImportDeclarationsopt ::=\");  //$NON-NLS-1$", "+\t\tconsumeEmptyImportDeclarationsopt();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 404 : // System.out.println(\"ImportDeclarationsopt ::= ImportDeclarations\");  //$NON-NLS-1$", "+\t\tconsumeImportDeclarationsopt();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 405 : // System.out.println(\"TypeDeclarationsopt ::=\");  //$NON-NLS-1$", "+\t\tconsumeEmptyTypeDeclarationsopt();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 406 : // System.out.println(\"TypeDeclarationsopt ::= TypeDeclarations\");  //$NON-NLS-1$", "+\t\tconsumeTypeDeclarationsopt();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 407 : // System.out.println(\"ClassBodyDeclarationsopt ::=\");  //$NON-NLS-1$", "+\t\tconsumeEmptyClassBodyDeclarationsopt();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 408 : // System.out.println(\"ClassBodyDeclarationsopt ::= NestedType ClassBodyDeclarations\");  //$NON-NLS-1$", "+\t\tconsumeClassBodyDeclarationsopt();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 409 : // System.out.println(\"Modifiersopt ::=\");  //$NON-NLS-1$", "+\t\tconsumeDefaultModifiers();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 410 : // System.out.println(\"Modifiersopt ::= Modifiers\");  //$NON-NLS-1$", "+\t\tconsumeModifiers();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 411 : // System.out.println(\"BlockStatementsopt ::=\");  //$NON-NLS-1$", "+\t\tconsumeEmptyBlockStatementsopt();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 413 : // System.out.println(\"Dimsopt ::=\");  //$NON-NLS-1$", "+\t\tconsumeEmptyDimsopt();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 415 : // System.out.println(\"ArgumentListopt ::=\");  //$NON-NLS-1$", "+\t\tconsumeEmptyArgumentListopt();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 419 : // System.out.println(\"FormalParameterListopt ::=\");  //$NON-NLS-1$", "+\t\tconsumeFormalParameterListopt();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 423 : // System.out.println(\"InterfaceMemberDeclarationsopt ::=\");  //$NON-NLS-1$", "+\t\tconsumeEmptyInterfaceMemberDeclarationsopt();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 424 : // System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType...\");  //$NON-NLS-1$", "+\t\tconsumeInterfaceMemberDeclarationsopt();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 425 : // System.out.println(\"NestedType ::=\");  //$NON-NLS-1$", "+\t\tconsumeNestedType();  ", "+\t\tbreak ;", "-     case 424 : // System.out.println(\"ForInitopt ::=\");  //$NON-NLS-1$", "-\t\t    consumeEmptyForInitopt();  ", "-\t\t\tbreak ;", "- ", "-     case 426 : // System.out.println(\"ForUpdateopt ::=\");  //$NON-NLS-1$", "-\t\t    consumeEmptyForUpdateopt();  ", "-\t\t\tbreak ;", "- ", "-     case 430 : // System.out.println(\"Catchesopt ::=\");  //$NON-NLS-1$", "-\t\t    consumeEmptyCatchesopt();  ", "-\t\t\tbreak ;", "- ", "+\tcase 426 : // System.out.println(\"ForInitopt ::=\");  //$NON-NLS-1$", "+\t\tconsumeEmptyForInitopt();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 428 : // System.out.println(\"ForUpdateopt ::=\");  //$NON-NLS-1$", "+\t\tconsumeEmptyForUpdateopt();  ", "+\t\tbreak ;", "+\t\t", "+\tcase 432 : // System.out.println(\"Catchesopt ::=\");  //$NON-NLS-1$", "+\t\tconsumeEmptyCatchesopt();  ", "+\t\tbreak ;", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e64f49dc0fae9309661e9490cf9a9538", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "d4b8f1437bd894de59822a00977399b8af50c7a1", "commitAfterChange": "00e190bf5f96c54b05d4853702eef90ea6dc4747", "methodNumberBeforeChange": 144, "methodNumberAfterChange": 144, "signatureBeforeChange": " \tprotected void consumeRule(int act)", "signatureAfterChange": " protected void consumeRule(int act)", "diff": ["-\t // This method is part of an automatic generation : do NOT edit-modify  ", "-\tprotected void consumeRule(int act) {", "-\t  switch ( act ) {", "-\t    case 29 : // System.out.println(\"Type ::= PrimitiveType\");", "-\t\t\t    consumePrimitiveType();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 43 : // System.out.println(\"ReferenceType ::= ClassOrInterfaceType\");", "-\t\t\t    consumeReferenceType();   ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 52 : // System.out.println(\"QualifiedName ::= Name DOT SimpleName\");", "-\t\t\t    consumeQualifiedName();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 53 : // System.out.println(\"CompilationUnit ::= EnterCompilationUnit PackageDeclarationopt ImportDeclarationsopt\");", "-\t\t\t    consumeCompilationUnit();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 54 : // System.out.println(\"EnterCompilationUnit ::=\");", "-\t\t\t    consumeEnterCompilationUnit();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 66 : // System.out.println(\"CatchHeader ::= catch LPAREN FormalParameter RPAREN LBRACE\");", "-\t\t\t    consumeCatchHeader();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 68 : // System.out.println(\"ImportDeclarations ::= ImportDeclarations ImportDeclaration\");", "-\t\t\t    consumeImportDeclarations();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 70 : // System.out.println(\"TypeDeclarations ::= TypeDeclarations TypeDeclaration\");", "-\t\t\t    consumeTypeDeclarations();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 71 : // System.out.println(\"PackageDeclaration ::= PackageDeclarationName SEMICOLON\");", "-\t\t\t     consumePackageDeclaration();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 72 : // System.out.println(\"PackageDeclarationName ::= package Name\");", "-\t\t\t     consumePackageDeclarationName();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 75 : // System.out.println(\"SingleTypeImportDeclaration ::= SingleTypeImportDeclarationName SEMICOLON\");", "-\t\t\t    consumeSingleTypeImportDeclaration();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 76 : // System.out.println(\"SingleTypeImportDeclarationName ::= import Name\");", "-\t\t\t    consumeSingleTypeImportDeclarationName();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 77 : // System.out.println(\"TypeImportOnDemandDeclaration ::= TypeImportOnDemandDeclarationName SEMICOLON\");", "-\t\t\t    consumeTypeImportOnDemandDeclaration();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 78 : // System.out.println(\"TypeImportOnDemandDeclarationName ::= import Name DOT MULTIPLY\");", "-\t\t\t    consumeTypeImportOnDemandDeclarationName();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t     case 81 : // System.out.println(\"TypeDeclaration ::= SEMICOLON\");", "-\t\t\t    consumeEmptyTypeDeclaration();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 95 : // System.out.println(\"ClassDeclaration ::= ClassHeader ClassBody\");", "-\t\t\t    consumeClassDeclaration();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 96 : // System.out.println(\"ClassHeader ::= ClassHeaderName ClassHeaderExtendsopt ClassHeaderImplementsopt\");", "-\t\t\t    consumeClassHeader();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 97 : // System.out.println(\"ClassHeaderName ::= Modifiersopt class Identifier\");", "-\t\t\t    consumeClassHeaderName();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 98 : // System.out.println(\"ClassHeaderExtends ::= extends ClassType\");", "-\t\t\t    consumeClassHeaderExtends();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 99 : // System.out.println(\"ClassHeaderImplements ::= implements InterfaceTypeList\");", "-\t\t\t    consumeClassHeaderImplements();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 101 : // System.out.println(\"InterfaceTypeList ::= InterfaceTypeList COMMA InterfaceType\");", "-\t\t\t    consumeInterfaceTypeList();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 102 : // System.out.println(\"InterfaceType ::= ClassOrInterfaceType\");", "-\t\t\t    consumeInterfaceType();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 105 : // System.out.println(\"ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration\");", "-\t\t\t    consumeClassBodyDeclarations();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 109 : // System.out.println(\"ClassBodyDeclaration ::= Diet NestedMethod Block\");", "-\t\t\t    consumeClassBodyDeclaration();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 110 : // System.out.println(\"Diet ::=\");", "-\t\t\t    consumeDiet();  ", "-\t\t\t\tbreak ;", "-\t", "-\t    case 111 : // System.out.println(\"Initializer ::= Diet NestedMethod Block\");", "-\t\t\t    consumeClassBodyDeclaration();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 118 : // System.out.println(\"ClassMemberDeclaration ::= SEMICOLON\");", "-\t\t\t    consumeEmptyClassMemberDeclaration();  ", "-\t\t\t\tbreak ;", "-\t", "-\t    case 119 : // System.out.println(\"FieldDeclaration ::= Modifiersopt Type VariableDeclarators SEMICOLON\");", "-\t\t\t    consumeFieldDeclaration();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 121 : // System.out.println(\"VariableDeclarators ::= VariableDeclarators COMMA VariableDeclarator\");", "-\t\t\t    consumeVariableDeclarators();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 124 : // System.out.println(\"EnterVariable ::=\");", "-\t\t\t    consumeEnterVariable();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 125 : // System.out.println(\"ExitVariableWithInitialization ::=\");", "-\t\t\t    consumeExitVariableWithInitialization();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 126 : // System.out.println(\"ExitVariableWithoutInitialization ::=\");", "-\t\t\t    consumeExitVariableWithoutInitialization();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 127 : // System.out.println(\"ForceNoDiet ::=\");", "-\t\t\t    consumeForceNoDiet();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 128 : // System.out.println(\"RestoreDiet ::=\");", "-\t\t\t    consumeRestoreDiet();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 133 : // System.out.println(\"MethodDeclaration ::= MethodHeader MethodBody\");", "-\t\t\t    // set to true to consume a method with a body", "-\t  consumeMethodDeclaration(true);   ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 134 : // System.out.println(\"AbstractMethodDeclaration ::= MethodHeader SEMICOLON\");", "-\t\t\t    // set to false to consume a method without body", "-\t  consumeMethodDeclaration(false);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 135 : // System.out.println(\"MethodHeader ::= MethodHeaderName MethodHeaderParameters MethodHeaderExtendedDims\");", "-\t\t\t    consumeMethodHeader();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 136 : // System.out.println(\"MethodPushModifiersHeader ::= MethodPushModifiersHeaderName MethodHeaderParameters\");", "-\t\t\t    consumeMethodHeader();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 137 : // System.out.println(\"MethodPushModifiersHeaderName ::= Modifiers Type PushModifiers Identifier LPAREN\");", "-\t\t\t    consumeMethodPushModifiersHeaderName();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 138 : // System.out.println(\"MethodPushModifiersHeaderName ::= Type PushModifiers Identifier LPAREN\");", "-\t\t\t    consumeMethodPushModifiersHeaderName();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 139 : // System.out.println(\"MethodHeaderName ::= Modifiersopt Type Identifier LPAREN\");", "-\t\t\t    consumeMethodHeaderName();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 140 : // System.out.println(\"MethodHeaderParameters ::= FormalParameterListopt RPAREN\");", "-\t\t\t    consumeMethodHeaderParameters();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 141 : // System.out.println(\"MethodHeaderExtendedDims ::= Dimsopt\");", "-\t\t\t    consumeMethodHeaderExtendedDims();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 142 : // System.out.println(\"MethodHeaderThrowsClause ::= throws ClassTypeList\");", "-\t\t\t    consumeMethodHeaderThrowsClause();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 143 : // System.out.println(\"ConstructorHeader ::= ConstructorHeaderName MethodHeaderParameters...\");", "-\t\t\t    consumeConstructorHeader();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 144 : // System.out.println(\"ConstructorHeaderName ::= Modifiersopt Identifier LPAREN\");", "-\t\t\t    consumeConstructorHeaderName();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 146 : // System.out.println(\"FormalParameterList ::= FormalParameterList COMMA FormalParameter\");", "-\t\t\t    consumeFormalParameterList();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 147 : // System.out.println(\"FormalParameter ::= Modifiersopt Type VariableDeclaratorId\");", "-\t\t\t    // the boolean is used to know if the modifiers should be reset", "-\t \tconsumeFormalParameter();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 149 : // System.out.println(\"ClassTypeList ::= ClassTypeList COMMA ClassTypeElt\");", "-\t\t\t    consumeClassTypeList();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 150 : // System.out.println(\"ClassTypeElt ::= ClassType\");", "-\t\t\t    consumeClassTypeElt();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 151 : // System.out.println(\"MethodBody ::= NestedMethod LBRACE BlockStatementsopt RBRACE\");", "-\t\t\t    consumeMethodBody();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 152 : // System.out.println(\"NestedMethod ::=\");", "-\t\t\t    consumeNestedMethod();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 153 : // System.out.println(\"StaticInitializer ::= StaticOnly Block\");", "-\t\t\t    consumeStaticInitializer();  ", "-\t\t\t\tbreak ;", "-\t", "-\t    case 154 : // System.out.println(\"StaticOnly ::= static\");", "-\t\t\t    consumeStaticOnly();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 155 : // System.out.println(\"ConstructorDeclaration ::= ConstructorHeader ConstructorBody\");", "-\t\t\t    consumeConstructorDeclaration() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 156 : // System.out.println(\"ConstructorDeclaration ::= ConstructorHeader SEMICOLON\");", "-\t\t\t    consumeInvalidConstructorDeclaration() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 157 : // System.out.println(\"ConstructorBody ::= NestedMethod LBRACE ConstructorBlockStatementsopt RBRACE\");", "-\t\t\t    consumeConstructorBody();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 160 : // System.out.println(\"ConstructorBlockStatementsopt ::= ExplicitConstructorInvocation BlockStatements\");", "-\t\t\t     consumeConstructorBlockStatements();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 161 : // System.out.println(\"ExplicitConstructorInvocation ::= this LPAREN ArgumentListopt RPAREN SEMICOLON\");", "-\t\t\t    consumeExplicitConstructorInvocation(0,ExplicitConstructorCall.This);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 162 : // System.out.println(\"ExplicitConstructorInvocation ::= super LPAREN ArgumentListopt RPAREN SEMICOLON\");", "-\t\t\t    consumeExplicitConstructorInvocation(0,ExplicitConstructorCall.Super);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 163 : // System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT super LPAREN ArgumentListopt RPAREN\");", "-\t\t\t    consumeExplicitConstructorInvocation(1, ExplicitConstructorCall.Super);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 164 : // System.out.println(\"ExplicitConstructorInvocation ::= Name DOT super LPAREN ArgumentListopt RPAREN...\");", "-\t\t\t    consumeExplicitConstructorInvocation(2, ExplicitConstructorCall.Super);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 165 : // System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT this LPAREN ArgumentListopt RPAREN...\");", "-\t\t\t    consumeExplicitConstructorInvocation(1, ExplicitConstructorCall.This);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 166 : // System.out.println(\"ExplicitConstructorInvocation ::= Name DOT this LPAREN ArgumentListopt RPAREN...\");", "-\t\t\t    consumeExplicitConstructorInvocation(2, ExplicitConstructorCall.This);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 167 : // System.out.println(\"InterfaceDeclaration ::= InterfaceHeader InterfaceBody\");", "-\t\t\t    consumeInterfaceDeclaration();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 168 : // System.out.println(\"InterfaceHeader ::= InterfaceHeaderName InterfaceHeaderExtendsopt\");", "-\t\t\t    consumeInterfaceHeader();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 169 : // System.out.println(\"InterfaceHeaderName ::= Modifiersopt interface Identifier\");", "-\t\t\t    consumeInterfaceHeaderName();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 171 : // System.out.println(\"InterfaceHeaderExtends ::= extends InterfaceTypeList\");", "-\t\t\t    consumeInterfaceHeaderExtends();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 174 : // System.out.println(\"InterfaceMemberDeclarations ::= InterfaceMemberDeclarations...\");", "-\t\t\t    consumeInterfaceMemberDeclarations();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 175 : // System.out.println(\"InterfaceMemberDeclaration ::= SEMICOLON\");", "-\t\t\t    consumeEmptyInterfaceMemberDeclaration();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 178 : // System.out.println(\"InterfaceMemberDeclaration ::= InvalidMethodDeclaration\");", "-\t\t\t    ignoreMethodBody();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 179 : // System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader ConstructorBody\");", "-\t\t\t    ignoreInvalidConstructorDeclaration(true);   ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 180 : // System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader SEMICOLON\");", "-\t\t\t    ignoreInvalidConstructorDeclaration(false);   ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 186 : // System.out.println(\"ArrayInitializer ::= LBRACE ,opt RBRACE\");", "-\t\t\t    consumeEmptyArrayInitializer();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 187 : // System.out.println(\"ArrayInitializer ::= LBRACE VariableInitializers RBRACE\");", "-\t\t\t    consumeArrayInitializer();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 188 : // System.out.println(\"ArrayInitializer ::= LBRACE VariableInitializers COMMA RBRACE\");", "-\t\t\t    consumeArrayInitializer();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 190 : // System.out.println(\"VariableInitializers ::= VariableInitializers COMMA VariableInitializer\");", "-\t\t\t    consumeVariableInitializers();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 191 : // System.out.println(\"Block ::= OpenBlock LBRACE BlockStatementsopt RBRACE\");", "-\t\t\t    consumeBlock();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 192 : // System.out.println(\"OpenBlock ::=\");", "-\t\t\t    consumeOpenBlock() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 194 : // System.out.println(\"BlockStatements ::= BlockStatements BlockStatement\");", "-\t\t\t    consumeBlockStatements() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 198 : // System.out.println(\"BlockStatement ::= InvalidInterfaceDeclaration\");", "-\t\t\t    ignoreInterfaceDeclaration();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 199 : // System.out.println(\"LocalVariableDeclarationStatement ::= LocalVariableDeclaration SEMICOLON\");", "-\t\t\t    consumeLocalVariableDeclarationStatement();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 200 : // System.out.println(\"LocalVariableDeclaration ::= Type PushModifiers VariableDeclarators\");", "-\t\t\t    consumeLocalVariableDeclaration();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 201 : // System.out.println(\"LocalVariableDeclaration ::= Modifiers Type PushModifiers VariableDeclarators\");", "-\t\t\t    consumeLocalVariableDeclaration();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 202 : // System.out.println(\"PushModifiers ::=\");", "-\t\t\t    consumePushModifiers();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 226 : // System.out.println(\"EmptyStatement ::= SEMICOLON\");", "-\t\t\t    consumeEmptyStatement();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 227 : // System.out.println(\"LabeledStatement ::= Identifier COLON Statement\");", "-\t\t\t    consumeStatementLabel() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 228 : // System.out.println(\"LabeledStatementNoShortIf ::= Identifier COLON StatementNoShortIf\");", "-\t\t\t    consumeStatementLabel() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t     case 229 : // System.out.println(\"ExpressionStatement ::= StatementExpression SEMICOLON\");", "-\t\t\t    consumeExpressionStatement();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 237 : // System.out.println(\"IfThenStatement ::= if LPAREN Expression RPAREN Statement\");", "-\t\t\t    consumeStatementIfNoElse();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 238 : // System.out.println(\"IfThenElseStatement ::= if LPAREN Expression RPAREN StatementNoShortIf else...\");", "-\t\t\t    consumeStatementIfWithElse();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 239 : // System.out.println(\"IfThenElseStatementNoShortIf ::= if LPAREN Expression RPAREN StatementNoShortIf...\");", "-\t\t\t    consumeStatementIfWithElse();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 240 : // System.out.println(\"SwitchStatement ::= switch OpenBlock LPAREN Expression RPAREN SwitchBlock\");", "-\t\t\t    consumeStatementSwitch() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 241 : // System.out.println(\"SwitchBlock ::= LBRACE RBRACE\");", "-\t\t\t    consumeEmptySwitchBlock() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 244 : // System.out.println(\"SwitchBlock ::= LBRACE SwitchBlockStatements SwitchLabels RBRACE\");", "-\t\t\t    consumeSwitchBlock() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 246 : // System.out.println(\"SwitchBlockStatements ::= SwitchBlockStatements SwitchBlockStatement\");", "-\t\t\t    consumeSwitchBlockStatements() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 247 : // System.out.println(\"SwitchBlockStatement ::= SwitchLabels BlockStatements\");", "-\t\t\t    consumeSwitchBlockStatement() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 249 : // System.out.println(\"SwitchLabels ::= SwitchLabels SwitchLabel\");", "-\t\t\t    consumeSwitchLabels() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t     case 250 : // System.out.println(\"SwitchLabel ::= case ConstantExpression COLON\");", "-\t\t\t    consumeCaseLabel();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t     case 251 : // System.out.println(\"SwitchLabel ::= default COLON\");", "-\t\t\t    consumeDefaultLabel();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 252 : // System.out.println(\"WhileStatement ::= while LPAREN Expression RPAREN Statement\");", "-\t\t\t    consumeStatementWhile() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 253 : // System.out.println(\"WhileStatementNoShortIf ::= while LPAREN Expression RPAREN StatementNoShortIf\");", "-\t\t\t    consumeStatementWhile() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 254 : // System.out.println(\"DoStatement ::= do Statement while LPAREN Expression RPAREN SEMICOLON\");", "-\t\t\t    consumeStatementDo() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 255 : // System.out.println(\"ForStatement ::= for LPAREN ForInitopt SEMICOLON Expressionopt SEMICOLON...\");", "-\t\t\t    consumeStatementFor() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 256 : // System.out.println(\"ForStatementNoShortIf ::= for LPAREN ForInitopt SEMICOLON Expressionopt SEMICOLON\");", "-\t\t\t    consumeStatementFor() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 257 : // System.out.println(\"ForInit ::= StatementExpressionList\");", "-\t\t\t    consumeForInit() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 261 : // System.out.println(\"StatementExpressionList ::= StatementExpressionList COMMA StatementExpression\");", "-\t\t\t    consumeStatementExpressionList() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 262 : // System.out.println(\"AssertStatement ::= assert Expression SEMICOLON\");", "-\t\t\t    consumeSimpleAssertStatement() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 263 : // System.out.println(\"AssertStatement ::= assert Expression COLON Expression SEMICOLON\");", "-\t\t\t    consumeAssertStatement() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 264 : // System.out.println(\"BreakStatement ::= break SEMICOLON\");", "-\t\t\t    consumeStatementBreak() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 265 : // System.out.println(\"BreakStatement ::= break Identifier SEMICOLON\");", "-\t\t\t    consumeStatementBreakWithLabel() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 266 : // System.out.println(\"ContinueStatement ::= continue SEMICOLON\");", "-\t\t\t    consumeStatementContinue() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 267 : // System.out.println(\"ContinueStatement ::= continue Identifier SEMICOLON\");", "-\t\t\t    consumeStatementContinueWithLabel() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 268 : // System.out.println(\"ReturnStatement ::= return Expressionopt SEMICOLON\");", "-\t\t\t    consumeStatementReturn() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 269 : // System.out.println(\"ThrowStatement ::= throw Expression SEMICOLON\");", "-\t\t\t    consumeStatementThrow();", "-\t ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 270 : // System.out.println(\"SynchronizedStatement ::= OnlySynchronized LPAREN Expression RPAREN Block\");", "-\t\t\t    consumeStatementSynchronized();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 271 : // System.out.println(\"OnlySynchronized ::= synchronized\");", "-\t\t\t    consumeOnlySynchronized();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 272 : // System.out.println(\"TryStatement ::= try Block Catches\");", "-\t\t\t    consumeStatementTry(false);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 273 : // System.out.println(\"TryStatement ::= try Block Catchesopt Finally\");", "-\t\t\t    consumeStatementTry(true);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 275 : // System.out.println(\"Catches ::= Catches CatchClause\");", "-\t\t\t    consumeCatches();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 276 : // System.out.println(\"CatchClause ::= catch LPAREN FormalParameter RPAREN Block\");", "-\t\t\t    consumeStatementCatch() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 278 : // System.out.println(\"PushLPAREN ::= LPAREN\");", "-\t\t\t    consumeLeftParen();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 279 : // System.out.println(\"PushRPAREN ::= RPAREN\");", "-\t\t\t    consumeRightParen();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 283 : // System.out.println(\"PrimaryNoNewArray ::= this\");", "-\t\t\t    consumePrimaryNoNewArrayThis();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 284 : // System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Expression PushRPAREN\");", "-\t\t\t    consumePrimaryNoNewArray();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 287 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT this\");", "-\t\t\t    consumePrimaryNoNewArrayNameThis();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 288 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT super\");", "-\t\t\t    consumePrimaryNoNewArrayNameSuper();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 289 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT class\");", "-\t\t\t    consumePrimaryNoNewArrayName();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 290 : // System.out.println(\"PrimaryNoNewArray ::= ArrayType DOT class\");", "-\t\t\t    consumePrimaryNoNewArrayArrayType();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 291 : // System.out.println(\"PrimaryNoNewArray ::= PrimitiveType DOT class\");", "-\t\t\t    consumePrimaryNoNewArrayPrimitiveType();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 294 : // System.out.println(\"AllocationHeader ::= new ClassType LPAREN ArgumentListopt RPAREN\");", "-\t\t\t    consumeAllocationHeader();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 295 : // System.out.println(\"ClassInstanceCreationExpression ::= new ClassType LPAREN ArgumentListopt RPAREN...\");", "-\t\t\t    consumeClassInstanceCreationExpression();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 296 : // System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new SimpleName LPAREN...\");", "-\t\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 297 : // System.out.println(\"ClassInstanceCreationExpression ::= ClassInstanceCreationExpressionName new...\");", "-\t\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 298 : // System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\");", "-\t\t\t    consumeClassInstanceCreationExpressionName() ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 299 : // System.out.println(\"ClassBodyopt ::=\");", "-\t\t\t    consumeClassBodyopt();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 301 : // System.out.println(\"EnterAnonymousClassBody ::=\");", "-\t\t\t    consumeEnterAnonymousClassBody();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 303 : // System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\");", "-\t\t\t    consumeArgumentList();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 304 : // System.out.println(\"ArrayCreationExpression ::= new PrimitiveType DimWithOrWithOutExprs...\");", "-\t\t\t    consumeArrayCreationExpression();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 305 : // System.out.println(\"ArrayCreationExpression ::= new ClassOrInterfaceType DimWithOrWithOutExprs...\");", "-\t\t\t    consumeArrayCreationExpression();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 307 : // System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs DimWithOrWithOutExpr\");", "-\t\t\t    consumeDimWithOrWithOutExprs();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t     case 309 : // System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\");", "-\t\t\t    consumeDimWithOrWithOutExpr();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t     case 310 : // System.out.println(\"Dims ::= DimsLoop\");", "-\t\t\t    consumeDims();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t     case 313 : // System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\");", "-\t\t\t    consumeOneDimLoop();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 314 : // System.out.println(\"FieldAccess ::= Primary DOT Identifier\");", "-\t\t\t    consumeFieldAccess(false);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 315 : // System.out.println(\"FieldAccess ::= super DOT Identifier\");", "-\t\t\t    consumeFieldAccess(true);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 316 : // System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\");", "-\t\t\t    consumeMethodInvocationName();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 317 : // System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN ArgumentListopt RPAREN\");", "-\t\t\t    consumeMethodInvocationPrimary();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 318 : // System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN ArgumentListopt RPAREN\");", "-\t\t\t    consumeMethodInvocationSuper();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 319 : // System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\");", "-\t\t\t    consumeArrayAccess(true);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 320 : // System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression RBRACKET\");", "-\t\t\t    consumeArrayAccess(false);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 322 : // System.out.println(\"PostfixExpression ::= Name\");", "-\t\t\t    consumePostfixExpression();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 325 : // System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\");", "-\t\t\t    consumeUnaryExpression(OperatorExpression.PLUS,true);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 326 : // System.out.println(\"PostDecrementExpression ::= PostfixExpression MINUS_MINUS\");", "-\t\t\t    consumeUnaryExpression(OperatorExpression.MINUS,true);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 327 : // System.out.println(\"PushPosition ::=\");", "-\t\t\t    consumePushPosition();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 330 : // System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\");", "-\t\t\t    consumeUnaryExpression(OperatorExpression.PLUS);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 331 : // System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\");", "-\t\t\t    consumeUnaryExpression(OperatorExpression.MINUS);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 333 : // System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition UnaryExpression\");", "-\t\t\t    consumeUnaryExpression(OperatorExpression.PLUS,false);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 334 : // System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition UnaryExpression\");", "-\t\t\t    consumeUnaryExpression(OperatorExpression.MINUS,false);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 336 : // System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition UnaryExpression\");", "-\t\t\t    consumeUnaryExpression(OperatorExpression.TWIDDLE);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 337 : // System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition UnaryExpression\");", "-\t\t\t    consumeUnaryExpression(OperatorExpression.NOT);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 339 : // System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt PushRPAREN InsideCastExpression\");", "-\t\t\t    consumeCastExpression();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 340 : // System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN InsideCastExpression...\");", "-\t\t\t    consumeCastExpression();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 341 : // System.out.println(\"CastExpression ::= PushLPAREN Expression PushRPAREN InsideCastExpressionLL1...\");", "-\t\t\t    consumeCastExpressionLL1();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 342 : // System.out.println(\"InsideCastExpression ::=\");", "-\t\t\t    consumeInsideCastExpression();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 343 : // System.out.println(\"InsideCastExpressionLL1 ::=\");", "-\t\t\t    consumeInsideCastExpressionLL1();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 345 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression MULTIPLY UnaryExpression\");", "-\t\t\t    consumeBinaryExpression(OperatorExpression.MULTIPLY);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 346 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression DIVIDE UnaryExpression\");", "-\t\t\t    consumeBinaryExpression(OperatorExpression.DIVIDE);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 347 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression REMAINDER UnaryExpression\");", "-\t\t\t    consumeBinaryExpression(OperatorExpression.REMAINDER);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 349 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS MultiplicativeExpression\");", "-\t\t\t    consumeBinaryExpression(OperatorExpression.PLUS);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 350 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS MultiplicativeExpression\");", "-\t\t\t    consumeBinaryExpression(OperatorExpression.MINUS);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 352 : // System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT AdditiveExpression\");", "-\t\t\t    consumeBinaryExpression(OperatorExpression.LEFT_SHIFT);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 353 : // System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT AdditiveExpression\");", "-\t\t\t    consumeBinaryExpression(OperatorExpression.RIGHT_SHIFT);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 354 : // System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT AdditiveExpression\");", "-\t\t\t    consumeBinaryExpression(OperatorExpression.UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 356 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS ShiftExpression\");", "-\t\t\t    consumeBinaryExpression(OperatorExpression.LESS);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 357 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER ShiftExpression\");", "-\t\t\t    consumeBinaryExpression(OperatorExpression.GREATER);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 358 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL ShiftExpression\");", "-\t\t\t    consumeBinaryExpression(OperatorExpression.LESS_EQUAL);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 359 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER_EQUAL ShiftExpression\");", "-\t\t\t    consumeBinaryExpression(OperatorExpression.GREATER_EQUAL);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 360 : // System.out.println(\"RelationalExpression ::= RelationalExpression instanceof ReferenceType\");", "-\t\t\t    consumeInstanceOfExpression(OperatorExpression.INSTANCEOF);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 362 : // System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL RelationalExpression\");", "-\t\t\t    consumeEqualityExpression(OperatorExpression.EQUAL_EQUAL);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 363 : // System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL RelationalExpression\");", "-\t\t\t    consumeEqualityExpression(OperatorExpression.NOT_EQUAL);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 365 : // System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\");", "-\t\t\t    consumeBinaryExpression(OperatorExpression.AND);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 367 : // System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR AndExpression\");", "-\t\t\t    consumeBinaryExpression(OperatorExpression.XOR);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 369 : // System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR ExclusiveOrExpression\");", "-\t\t\t    consumeBinaryExpression(OperatorExpression.OR);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 371 : // System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression AND_AND InclusiveOrExpression\");", "-\t\t\t    consumeBinaryExpression(OperatorExpression.AND_AND);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 373 : // System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression OR_OR ConditionalAndExpression\");", "-\t\t\t    consumeBinaryExpression(OperatorExpression.OR_OR);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 375 : // System.out.println(\"ConditionalExpression ::= ConditionalOrExpression QUESTION Expression COLON...\");", "-\t\t\t    consumeConditionalExpression(OperatorExpression.QUESTIONCOLON) ;  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 378 : // System.out.println(\"Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression\");", "-\t\t\t    consumeAssignment();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 380 : // System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\");", "-\t\t\t    ignoreExpressionAssignment(); ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 381 : // System.out.println(\"LeftHandSide ::= Name\");", "-\t\t\t    consumeLeftHandSide();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 384 : // System.out.println(\"AssignmentOperator ::= EQUAL\");", "-\t\t\t    consumeAssignmentOperator(EQUAL);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 385 : // System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\");", "-\t\t\t    consumeAssignmentOperator(MULTIPLY);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 386 : // System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\");", "-\t\t\t    consumeAssignmentOperator(DIVIDE);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 387 : // System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\");", "-\t\t\t    consumeAssignmentOperator(REMAINDER);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 388 : // System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\");", "-\t\t\t    consumeAssignmentOperator(PLUS);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 389 : // System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\");", "-\t\t\t    consumeAssignmentOperator(MINUS);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 390 : // System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\");", "-\t\t\t    consumeAssignmentOperator(LEFT_SHIFT);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 391 : // System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\");", "-\t\t\t    consumeAssignmentOperator(RIGHT_SHIFT);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 392 : // System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\");", "-\t\t\t    consumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 393 : // System.out.println(\"AssignmentOperator ::= AND_EQUAL\");", "-\t\t\t    consumeAssignmentOperator(AND);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 394 : // System.out.println(\"AssignmentOperator ::= XOR_EQUAL\");", "-\t\t\t    consumeAssignmentOperator(XOR);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 395 : // System.out.println(\"AssignmentOperator ::= OR_EQUAL\");", "-\t\t\t    consumeAssignmentOperator(OR);  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 402 : // System.out.println(\"Expressionopt ::=\");", "-\t\t\t    consumeEmptyExpression();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 406 : // System.out.println(\"ImportDeclarationsopt ::=\");", "-\t\t\t    consumeEmptyImportDeclarationsopt();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 407 : // System.out.println(\"ImportDeclarationsopt ::= ImportDeclarations\");", "-\t\t\t    consumeImportDeclarationsopt();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 408 : // System.out.println(\"TypeDeclarationsopt ::=\");", "-\t\t\t    consumeEmptyTypeDeclarationsopt();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 409 : // System.out.println(\"TypeDeclarationsopt ::= TypeDeclarations\");", "-\t\t\t    consumeTypeDeclarationsopt();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 410 : // System.out.println(\"ClassBodyDeclarationsopt ::=\");", "-\t\t\t    consumeEmptyClassBodyDeclarationsopt();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 411 : // System.out.println(\"ClassBodyDeclarationsopt ::= NestedType ClassBodyDeclarations\");", "-\t\t\t    consumeClassBodyDeclarationsopt();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t     case 412 : // System.out.println(\"Modifiersopt ::=\");", "-\t\t\t    consumeDefaultModifiers();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 413 : // System.out.println(\"Modifiersopt ::= Modifiers\");", "-\t\t\t    consumeModifiers();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 414 : // System.out.println(\"BlockStatementsopt ::=\");", "-\t\t\t    consumeEmptyBlockStatementsopt();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t     case 416 : // System.out.println(\"Dimsopt ::=\");", "-\t\t\t    consumeEmptyDimsopt();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t     case 418 : // System.out.println(\"ArgumentListopt ::=\");", "-\t\t\t    consumeEmptyArgumentListopt();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 422 : // System.out.println(\"FormalParameterListopt ::=\");", "-\t\t\t    consumeFormalParameterListopt();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t     case 426 : // System.out.println(\"InterfaceMemberDeclarationsopt ::=\");", "-\t\t\t    consumeEmptyInterfaceMemberDeclarationsopt();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t     case 427 : // System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType InterfaceMemberDeclarations\");", "-\t\t\t    consumeInterfaceMemberDeclarationsopt();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t    case 428 : // System.out.println(\"NestedType ::=\");", "-\t\t\t    consumeNestedType();  ", "-\t\t\t\tbreak ;", "-\t", "-\t     case 429 : // System.out.println(\"ForInitopt ::=\");", "-\t\t\t    consumeEmptyForInitopt();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t     case 431 : // System.out.println(\"ForUpdateopt ::=\");", "-\t\t\t    consumeEmptyForUpdateopt();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t     case 435 : // System.out.println(\"Catchesopt ::=\");", "-\t\t\t    consumeEmptyCatchesopt();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t     case 437 : // System.out.println(\"ArrayInitializeropt ::=\");", "-\t\t\t    consumeEmptyArrayInitializeropt();  ", "-\t\t\t\tbreak ;", "-\t ", "-\t\t}", "-\t} ", "+ // This method is part of an automatic generation : do NOT edit-modify  ", "+protected void consumeRule(int act) {", "+  switch ( act ) {", "+    case 29 : // System.out.println(\"Type ::= PrimitiveType\");", "+\t\t    consumePrimitiveType();  ", "+\t\t\tbreak ;", "+ ", "+    case 43 : // System.out.println(\"ReferenceType ::= ClassOrInterfaceType\");", "+\t\t    consumeReferenceType();   ", "+\t\t\tbreak ;", "+ ", "+    case 52 : // System.out.println(\"QualifiedName ::= Name DOT SimpleName\");", "+\t\t    consumeQualifiedName();  ", "+\t\t\tbreak ;", "+ ", "+    case 53 : // System.out.println(\"CompilationUnit ::= EnterCompilationUnit PackageDeclarationopt ImportDeclarationsopt\");", "+\t\t    consumeCompilationUnit();  ", "+\t\t\tbreak ;", "+ ", "+    case 54 : // System.out.println(\"EnterCompilationUnit ::=\");", "+\t\t    consumeEnterCompilationUnit();  ", "+\t\t\tbreak ;", "+ ", "+    case 66 : // System.out.println(\"CatchHeader ::= catch LPAREN FormalParameter RPAREN LBRACE\");", "+\t\t    consumeCatchHeader();  ", "+\t\t\tbreak ;", "+ ", "+    case 68 : // System.out.println(\"ImportDeclarations ::= ImportDeclarations ImportDeclaration\");", "+\t\t    consumeImportDeclarations();  ", "+\t\t\tbreak ;", "+ ", "+    case 70 : // System.out.println(\"TypeDeclarations ::= TypeDeclarations TypeDeclaration\");", "+\t\t    consumeTypeDeclarations();  ", "+\t\t\tbreak ;", "+ ", "+    case 71 : // System.out.println(\"PackageDeclaration ::= PackageDeclarationName SEMICOLON\");", "+\t\t     consumePackageDeclaration();  ", "+\t\t\tbreak ;", "+ ", "+    case 72 : // System.out.println(\"PackageDeclarationName ::= package Name\");", "+\t\t     consumePackageDeclarationName();  ", "+\t\t\tbreak ;", "+ ", "+    case 75 : // System.out.println(\"SingleTypeImportDeclaration ::= SingleTypeImportDeclarationName SEMICOLON\");", "+\t\t    consumeSingleTypeImportDeclaration();  ", "+\t\t\tbreak ;", "+ ", "+    case 76 : // System.out.println(\"SingleTypeImportDeclarationName ::= import Name\");", "+\t\t    consumeSingleTypeImportDeclarationName();  ", "+\t\t\tbreak ;", "+ ", "+    case 77 : // System.out.println(\"TypeImportOnDemandDeclaration ::= TypeImportOnDemandDeclarationName SEMICOLON\");", "+\t\t    consumeTypeImportOnDemandDeclaration();  ", "+\t\t\tbreak ;", "+ ", "+    case 78 : // System.out.println(\"TypeImportOnDemandDeclarationName ::= import Name DOT MULTIPLY\");", "+\t\t    consumeTypeImportOnDemandDeclarationName();  ", "+\t\t\tbreak ;", "+ ", "+     case 81 : // System.out.println(\"TypeDeclaration ::= SEMICOLON\");", "+\t\t    consumeEmptyTypeDeclaration();  ", "+\t\t\tbreak ;", "+ ", "+    case 95 : // System.out.println(\"ClassDeclaration ::= ClassHeader ClassBody\");", "+\t\t    consumeClassDeclaration();  ", "+\t\t\tbreak ;", "+ ", "+    case 96 : // System.out.println(\"ClassHeader ::= ClassHeaderName ClassHeaderExtendsopt ClassHeaderImplementsopt\");", "+\t\t    consumeClassHeader();  ", "+\t\t\tbreak ;", "+ ", "+    case 97 : // System.out.println(\"ClassHeaderName ::= Modifiersopt class Identifier\");", "+\t\t    consumeClassHeaderName();  ", "+\t\t\tbreak ;", "+ ", "+    case 98 : // System.out.println(\"ClassHeaderExtends ::= extends ClassType\");", "+\t\t    consumeClassHeaderExtends();  ", "+\t\t\tbreak ;", "+ ", "+    case 99 : // System.out.println(\"ClassHeaderImplements ::= implements InterfaceTypeList\");", "+\t\t    consumeClassHeaderImplements();  ", "+\t\t\tbreak ;", "+ ", "+    case 101 : // System.out.println(\"InterfaceTypeList ::= InterfaceTypeList COMMA InterfaceType\");", "+\t\t    consumeInterfaceTypeList();  ", "+\t\t\tbreak ;", "+ ", "+    case 102 : // System.out.println(\"InterfaceType ::= ClassOrInterfaceType\");", "+\t\t    consumeInterfaceType();  ", "+\t\t\tbreak ;", "+ ", "+    case 105 : // System.out.println(\"ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration\");", "+\t\t    consumeClassBodyDeclarations();  ", "+\t\t\tbreak ;", "+ ", "+    case 109 : // System.out.println(\"ClassBodyDeclaration ::= Diet NestedMethod Block\");", "+\t\t    consumeClassBodyDeclaration();  ", "+\t\t\tbreak ;", "+ ", "+    case 110 : // System.out.println(\"Diet ::=\");", "+\t\t    consumeDiet();  ", "+\t\t\tbreak ;", "+", "+    case 111 : // System.out.println(\"Initializer ::= Diet NestedMethod Block\");", "+\t\t    consumeClassBodyDeclaration();  ", "+\t\t\tbreak ;", "+ ", "+    case 118 : // System.out.println(\"ClassMemberDeclaration ::= SEMICOLON\");", "+\t\t    consumeEmptyClassMemberDeclaration();  ", "+\t\t\tbreak ;", "+", "+    case 119 : // System.out.println(\"FieldDeclaration ::= Modifiersopt Type VariableDeclarators SEMICOLON\");", "+\t\t    consumeFieldDeclaration();  ", "+\t\t\tbreak ;", "+ ", "+    case 121 : // System.out.println(\"VariableDeclarators ::= VariableDeclarators COMMA VariableDeclarator\");", "+\t\t    consumeVariableDeclarators();  ", "+\t\t\tbreak ;", "+ ", "+    case 124 : // System.out.println(\"EnterVariable ::=\");", "+\t\t    consumeEnterVariable();  ", "+\t\t\tbreak ;", "+ ", "+    case 125 : // System.out.println(\"ExitVariableWithInitialization ::=\");", "+\t\t    consumeExitVariableWithInitialization();  ", "+\t\t\tbreak ;", "+ ", "+    case 126 : // System.out.println(\"ExitVariableWithoutInitialization ::=\");", "+\t\t    consumeExitVariableWithoutInitialization();  ", "+\t\t\tbreak ;", "+ ", "+    case 127 : // System.out.println(\"ForceNoDiet ::=\");", "+\t\t    consumeForceNoDiet();  ", "+\t\t\tbreak ;", "+ ", "+    case 128 : // System.out.println(\"RestoreDiet ::=\");", "+\t\t    consumeRestoreDiet();  ", "+\t\t\tbreak ;", "+ ", "+    case 133 : // System.out.println(\"MethodDeclaration ::= MethodHeader MethodBody\");", "+\t\t    // set to true to consume a method with a body", "+\t\t\tconsumeMethodDeclaration(true);   ", "+\t\t\tbreak ;", "+ ", "+    case 134 : // System.out.println(\"AbstractMethodDeclaration ::= MethodHeader SEMICOLON\");", "+\t\t    // set to false to consume a method without body", "+\t\t\tconsumeMethodDeclaration(false);  ", "+\t\t\tbreak ;", "+ ", "+    case 135 : // System.out.println(\"MethodHeader ::= MethodHeaderName MethodHeaderParameters MethodHeaderExtendedDims\");", "+\t\t    consumeMethodHeader();  ", "+\t\t\tbreak ;", "+ ", "+    case 136 : // System.out.println(\"MethodPushModifiersHeader ::= MethodPushModifiersHeaderName MethodHeaderParameters\");", "+\t\t    consumeMethodHeader();  ", "+\t\t\tbreak ;", "+ ", "+    case 137 : // System.out.println(\"MethodPushModifiersHeaderName ::= Modifiers Type PushModifiers Identifier LPAREN\");", "+\t\t    consumeMethodPushModifiersHeaderName();  ", "+\t\t\tbreak ;", "+ ", "+    case 138 : // System.out.println(\"MethodPushModifiersHeaderName ::= Type PushModifiers Identifier LPAREN\");", "+\t\t    consumeMethodPushModifiersHeaderName();  ", "+\t\t\tbreak ;", "+ ", "+    case 139 : // System.out.println(\"MethodHeaderName ::= Modifiersopt Type Identifier LPAREN\");", "+\t\t    consumeMethodHeaderName();  ", "+\t\t\tbreak ;", "+ ", "+    case 140 : // System.out.println(\"MethodHeaderParameters ::= FormalParameterListopt RPAREN\");", "+\t\t    consumeMethodHeaderParameters();  ", "+\t\t\tbreak ;", "+ ", "+    case 141 : // System.out.println(\"MethodHeaderExtendedDims ::= Dimsopt\");", "+\t\t    consumeMethodHeaderExtendedDims();  ", "+\t\t\tbreak ;", "+ ", "+    case 142 : // System.out.println(\"MethodHeaderThrowsClause ::= throws ClassTypeList\");", "+\t\t    consumeMethodHeaderThrowsClause();  ", "+\t\t\tbreak ;", "+ ", "+    case 143 : // System.out.println(\"ConstructorHeader ::= ConstructorHeaderName MethodHeaderParameters...\");", "+\t\t    consumeConstructorHeader();  ", "+\t\t\tbreak ;", "+ ", "+    case 144 : // System.out.println(\"ConstructorHeaderName ::= Modifiersopt Identifier LPAREN\");", "+\t\t    consumeConstructorHeaderName();  ", "+\t\t\tbreak ;", "+ ", "+    case 146 : // System.out.println(\"FormalParameterList ::= FormalParameterList COMMA FormalParameter\");", "+\t\t    consumeFormalParameterList();  ", "+\t\t\tbreak ;", "+ ", "+    case 147 : // System.out.println(\"FormalParameter ::= Modifiersopt Type VariableDeclaratorId\");", "+\t\t    // the boolean is used to know if the modifiers should be reset", "+ \tconsumeFormalParameter();  ", "+\t\t\tbreak ;", "+ ", "+    case 149 : // System.out.println(\"ClassTypeList ::= ClassTypeList COMMA ClassTypeElt\");", "+\t\t    consumeClassTypeList();  ", "+\t\t\tbreak ;", "+ ", "+    case 150 : // System.out.println(\"ClassTypeElt ::= ClassType\");", "+\t\t    consumeClassTypeElt();  ", "+\t\t\tbreak ;", "+ ", "+    case 151 : // System.out.println(\"MethodBody ::= NestedMethod LBRACE BlockStatementsopt RBRACE\");", "+\t\t    consumeMethodBody();  ", "+\t\t\tbreak ;", "+ ", "+    case 152 : // System.out.println(\"NestedMethod ::=\");", "+\t\t    consumeNestedMethod();  ", "+\t\t\tbreak ;", "+ ", "+    case 153 : // System.out.println(\"StaticInitializer ::= StaticOnly Block\");", "+\t\t    consumeStaticInitializer();  ", "+\t\t\tbreak ;", "+", "+    case 154 : // System.out.println(\"StaticOnly ::= static\");", "+\t\t    consumeStaticOnly();  ", "+\t\t\tbreak ;", "+ ", "+    case 155 : // System.out.println(\"ConstructorDeclaration ::= ConstructorHeader ConstructorBody\");", "+\t\t    consumeConstructorDeclaration() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 156 : // System.out.println(\"ConstructorDeclaration ::= ConstructorHeader SEMICOLON\");", "+\t\t    consumeInvalidConstructorDeclaration() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 157 : // System.out.println(\"ConstructorBody ::= NestedMethod LBRACE ConstructorBlockStatementsopt RBRACE\");", "+\t\t    consumeConstructorBody();  ", "+\t\t\tbreak ;", "+ ", "+    case 160 : // System.out.println(\"ConstructorBlockStatementsopt ::= ExplicitConstructorInvocation BlockStatements\");", "+\t\t     consumeConstructorBlockStatements();  ", "+\t\t\tbreak ;", "+ ", "+    case 161 : // System.out.println(\"ExplicitConstructorInvocation ::= this LPAREN ArgumentListopt RPAREN SEMICOLON\");", "+\t\t    consumeExplicitConstructorInvocation(0,ExplicitConstructorCall.This);  ", "+\t\t\tbreak ;", "+ ", "+    case 162 : // System.out.println(\"ExplicitConstructorInvocation ::= super LPAREN ArgumentListopt RPAREN SEMICOLON\");", "+\t\t    consumeExplicitConstructorInvocation(0,ExplicitConstructorCall.Super);  ", "+\t\t\tbreak ;", "+ ", "+    case 163 : // System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT super LPAREN ArgumentListopt RPAREN\");", "+\t\t    consumeExplicitConstructorInvocation(1, ExplicitConstructorCall.Super);  ", "+\t\t\tbreak ;", "+ ", "+    case 164 : // System.out.println(\"ExplicitConstructorInvocation ::= Name DOT super LPAREN ArgumentListopt RPAREN...\");", "+\t\t    consumeExplicitConstructorInvocation(2, ExplicitConstructorCall.Super);  ", "+\t\t\tbreak ;", "+ ", "+    case 165 : // System.out.println(\"ExplicitConstructorInvocation ::= Primary DOT this LPAREN ArgumentListopt RPAREN...\");", "+\t\t    consumeExplicitConstructorInvocation(1, ExplicitConstructorCall.This);  ", "+\t\t\tbreak ;", "+ ", "+    case 166 : // System.out.println(\"ExplicitConstructorInvocation ::= Name DOT this LPAREN ArgumentListopt RPAREN...\");", "+\t\t    consumeExplicitConstructorInvocation(2, ExplicitConstructorCall.This);  ", "+\t\t\tbreak ;", "+ ", "+    case 167 : // System.out.println(\"InterfaceDeclaration ::= InterfaceHeader InterfaceBody\");", "+\t\t    consumeInterfaceDeclaration();  ", "+\t\t\tbreak ;", "+ ", "+    case 168 : // System.out.println(\"InterfaceHeader ::= InterfaceHeaderName InterfaceHeaderExtendsopt\");", "+\t\t    consumeInterfaceHeader();  ", "+\t\t\tbreak ;", "+ ", "+    case 169 : // System.out.println(\"InterfaceHeaderName ::= Modifiersopt interface Identifier\");", "+\t\t    consumeInterfaceHeaderName();  ", "+\t\t\tbreak ;", "+ ", "+    case 171 : // System.out.println(\"InterfaceHeaderExtends ::= extends InterfaceTypeList\");", "+\t\t    consumeInterfaceHeaderExtends();  ", "+\t\t\tbreak ;", "+ ", "+    case 174 : // System.out.println(\"InterfaceMemberDeclarations ::= InterfaceMemberDeclarations...\");", "+\t\t    consumeInterfaceMemberDeclarations();  ", "+\t\t\tbreak ;", "+ ", "+    case 175 : // System.out.println(\"InterfaceMemberDeclaration ::= SEMICOLON\");", "+\t\t    consumeEmptyInterfaceMemberDeclaration();  ", "+\t\t\tbreak ;", "+ ", "+    case 178 : // System.out.println(\"InterfaceMemberDeclaration ::= InvalidMethodDeclaration\");", "+\t\t    ignoreMethodBody();  ", "+\t\t\tbreak ;", "+ ", "+    case 179 : // System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader ConstructorBody\");", "+\t\t    ignoreInvalidConstructorDeclaration(true);   ", "+\t\t\tbreak ;", "+ ", "+    case 180 : // System.out.println(\"InvalidConstructorDeclaration ::= ConstructorHeader SEMICOLON\");", "+\t\t    ignoreInvalidConstructorDeclaration(false);   ", "+\t\t\tbreak ;", "+ ", "+    case 186 : // System.out.println(\"ArrayInitializer ::= LBRACE ,opt RBRACE\");", "+\t\t    consumeEmptyArrayInitializer();  ", "+\t\t\tbreak ;", "+ ", "+    case 187 : // System.out.println(\"ArrayInitializer ::= LBRACE VariableInitializers RBRACE\");", "+\t\t    consumeArrayInitializer();  ", "+\t\t\tbreak ;", "+ ", "+    case 188 : // System.out.println(\"ArrayInitializer ::= LBRACE VariableInitializers COMMA RBRACE\");", "+\t\t    consumeArrayInitializer();  ", "+\t\t\tbreak ;", "+ ", "+    case 190 : // System.out.println(\"VariableInitializers ::= VariableInitializers COMMA VariableInitializer\");", "+\t\t    consumeVariableInitializers();  ", "+\t\t\tbreak ;", "+ ", "+    case 191 : // System.out.println(\"Block ::= OpenBlock LBRACE BlockStatementsopt RBRACE\");", "+\t\t    consumeBlock();  ", "+\t\t\tbreak ;", "+ ", "+    case 192 : // System.out.println(\"OpenBlock ::=\");", "+\t\t    consumeOpenBlock() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 194 : // System.out.println(\"BlockStatements ::= BlockStatements BlockStatement\");", "+\t\t    consumeBlockStatements() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 198 : // System.out.println(\"BlockStatement ::= InvalidInterfaceDeclaration\");", "+\t\t    ignoreInterfaceDeclaration();  ", "+\t\t\tbreak ;", "+ ", "+    case 199 : // System.out.println(\"LocalVariableDeclarationStatement ::= LocalVariableDeclaration SEMICOLON\");", "+\t\t    consumeLocalVariableDeclarationStatement();  ", "+\t\t\tbreak ;", "+ ", "+    case 200 : // System.out.println(\"LocalVariableDeclaration ::= Type PushModifiers VariableDeclarators\");", "+\t\t    consumeLocalVariableDeclaration();  ", "+\t\t\tbreak ;", "+ ", "+    case 201 : // System.out.println(\"LocalVariableDeclaration ::= Modifiers Type PushModifiers VariableDeclarators\");", "+\t\t    consumeLocalVariableDeclaration();  ", "+\t\t\tbreak ;", "+ ", "+    case 202 : // System.out.println(\"PushModifiers ::=\");", "+\t\t    consumePushModifiers();  ", "+\t\t\tbreak ;", "+ ", "+    case 226 : // System.out.println(\"EmptyStatement ::= SEMICOLON\");", "+\t\t    consumeEmptyStatement();  ", "+\t\t\tbreak ;", "+ ", "+    case 227 : // System.out.println(\"LabeledStatement ::= Identifier COLON Statement\");", "+\t\t    consumeStatementLabel() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 228 : // System.out.println(\"LabeledStatementNoShortIf ::= Identifier COLON StatementNoShortIf\");", "+\t\t    consumeStatementLabel() ;  ", "+\t\t\tbreak ;", "+ ", "+     case 229 : // System.out.println(\"ExpressionStatement ::= StatementExpression SEMICOLON\");", "+\t\t    consumeExpressionStatement();  ", "+\t\t\tbreak ;", "+ ", "+    case 237 : // System.out.println(\"IfThenStatement ::= if LPAREN Expression RPAREN Statement\");", "+\t\t    consumeStatementIfNoElse();  ", "+\t\t\tbreak ;", "+ ", "+    case 238 : // System.out.println(\"IfThenElseStatement ::= if LPAREN Expression RPAREN StatementNoShortIf else...\");", "+\t\t    consumeStatementIfWithElse();  ", "+\t\t\tbreak ;", "+ ", "+    case 239 : // System.out.println(\"IfThenElseStatementNoShortIf ::= if LPAREN Expression RPAREN StatementNoShortIf...\");", "+\t\t    consumeStatementIfWithElse();  ", "+\t\t\tbreak ;", "+ ", "+    case 240 : // System.out.println(\"SwitchStatement ::= switch OpenBlock LPAREN Expression RPAREN SwitchBlock\");", "+\t\t    consumeStatementSwitch() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 241 : // System.out.println(\"SwitchBlock ::= LBRACE RBRACE\");", "+\t\t    consumeEmptySwitchBlock() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 244 : // System.out.println(\"SwitchBlock ::= LBRACE SwitchBlockStatements SwitchLabels RBRACE\");", "+\t\t    consumeSwitchBlock() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 246 : // System.out.println(\"SwitchBlockStatements ::= SwitchBlockStatements SwitchBlockStatement\");", "+\t\t    consumeSwitchBlockStatements() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 247 : // System.out.println(\"SwitchBlockStatement ::= SwitchLabels BlockStatements\");", "+\t\t    consumeSwitchBlockStatement() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 249 : // System.out.println(\"SwitchLabels ::= SwitchLabels SwitchLabel\");", "+\t\t    consumeSwitchLabels() ;  ", "+\t\t\tbreak ;", "+ ", "+     case 250 : // System.out.println(\"SwitchLabel ::= case ConstantExpression COLON\");", "+\t\t    consumeCaseLabel();  ", "+\t\t\tbreak ;", "+ ", "+     case 251 : // System.out.println(\"SwitchLabel ::= default COLON\");", "+\t\t    consumeDefaultLabel();  ", "+\t\t\tbreak ;", "+ ", "+    case 252 : // System.out.println(\"WhileStatement ::= while LPAREN Expression RPAREN Statement\");", "+\t\t    consumeStatementWhile() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 253 : // System.out.println(\"WhileStatementNoShortIf ::= while LPAREN Expression RPAREN StatementNoShortIf\");", "+\t\t    consumeStatementWhile() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 254 : // System.out.println(\"DoStatement ::= do Statement while LPAREN Expression RPAREN SEMICOLON\");", "+\t\t    consumeStatementDo() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 255 : // System.out.println(\"ForStatement ::= for LPAREN ForInitopt SEMICOLON Expressionopt SEMICOLON...\");", "+\t\t    consumeStatementFor() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 256 : // System.out.println(\"ForStatementNoShortIf ::= for LPAREN ForInitopt SEMICOLON Expressionopt SEMICOLON\");", "+\t\t    consumeStatementFor() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 257 : // System.out.println(\"ForInit ::= StatementExpressionList\");", "+\t\t    consumeForInit() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 261 : // System.out.println(\"StatementExpressionList ::= StatementExpressionList COMMA StatementExpression\");", "+\t\t    consumeStatementExpressionList() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 262 : // System.out.println(\"AssertStatement ::= assert Expression SEMICOLON\");", "+\t\t    consumeSimpleAssertStatement() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 263 : // System.out.println(\"AssertStatement ::= assert Expression COLON Expression SEMICOLON\");", "+\t\t    consumeAssertStatement() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 264 : // System.out.println(\"BreakStatement ::= break SEMICOLON\");", "+\t\t    consumeStatementBreak() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 265 : // System.out.println(\"BreakStatement ::= break Identifier SEMICOLON\");", "+\t\t    consumeStatementBreakWithLabel() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 266 : // System.out.println(\"ContinueStatement ::= continue SEMICOLON\");", "+\t\t    consumeStatementContinue() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 267 : // System.out.println(\"ContinueStatement ::= continue Identifier SEMICOLON\");", "+\t\t    consumeStatementContinueWithLabel() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 268 : // System.out.println(\"ReturnStatement ::= return Expressionopt SEMICOLON\");", "+\t\t    consumeStatementReturn() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 269 : // System.out.println(\"ThrowStatement ::= throw Expression SEMICOLON\");", "+\t\t    consumeStatementThrow();", "+ ", "+\t\t\tbreak ;", "+ ", "+    case 270 : // System.out.println(\"SynchronizedStatement ::= OnlySynchronized LPAREN Expression RPAREN Block\");", "+\t\t    consumeStatementSynchronized();  ", "+\t\t\tbreak ;", "+ ", "+    case 271 : // System.out.println(\"OnlySynchronized ::= synchronized\");", "+\t\t    consumeOnlySynchronized();  ", "+\t\t\tbreak ;", "+ ", "+    case 272 : // System.out.println(\"TryStatement ::= try Block Catches\");", "+\t\t    consumeStatementTry(false);  ", "+\t\t\tbreak ;", "+ ", "+    case 273 : // System.out.println(\"TryStatement ::= try Block Catchesopt Finally\");", "+\t\t    consumeStatementTry(true);  ", "+\t\t\tbreak ;", "+ ", "+    case 275 : // System.out.println(\"Catches ::= Catches CatchClause\");", "+\t\t    consumeCatches();  ", "+\t\t\tbreak ;", "+ ", "+    case 276 : // System.out.println(\"CatchClause ::= catch LPAREN FormalParameter RPAREN Block\");", "+\t\t    consumeStatementCatch() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 278 : // System.out.println(\"PushLPAREN ::= LPAREN\");", "+\t\t    consumeLeftParen();  ", "+\t\t\tbreak ;", "+ ", "+    case 279 : // System.out.println(\"PushRPAREN ::= RPAREN\");", "+\t\t    consumeRightParen();  ", "+\t\t\tbreak ;", "+ ", "+    case 284 : // System.out.println(\"PrimaryNoNewArray ::= this\");", "+\t\t    consumePrimaryNoNewArrayThis();  ", "+\t\t\tbreak ;", "+ ", "+    case 285 : // System.out.println(\"PrimaryNoNewArray ::= PushLPAREN Expression PushRPAREN\");", "+\t\t    consumePrimaryNoNewArray();  ", "+\t\t\tbreak ;", "+ ", "+    case 288 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT this\");", "+\t\t    consumePrimaryNoNewArrayNameThis();  ", "+\t\t\tbreak ;", "+ ", "+    case 289 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT super\");", "+\t\t    consumePrimaryNoNewArrayNameSuper();  ", "+\t\t\tbreak ;", "+ ", "+    case 290 : // System.out.println(\"PrimaryNoNewArray ::= Name DOT class\");", "+\t\t    consumePrimaryNoNewArrayName();  ", "+\t\t\tbreak ;", "+ ", "+    case 291 : // System.out.println(\"PrimaryNoNewArray ::= ArrayType DOT class\");", "+\t\t    consumePrimaryNoNewArrayArrayType();  ", "+\t\t\tbreak ;", "+ ", "+    case 292 : // System.out.println(\"PrimaryNoNewArray ::= PrimitiveType DOT class\");", "+\t\t    consumePrimaryNoNewArrayPrimitiveType();  ", "+\t\t\tbreak ;", "+ ", "+    case 295 : // System.out.println(\"AllocationHeader ::= new ClassType LPAREN ArgumentListopt RPAREN\");", "+\t\t    consumeAllocationHeader();  ", "+\t\t\tbreak ;", "+ ", "+    case 296 : // System.out.println(\"ClassInstanceCreationExpression ::= new ClassType LPAREN ArgumentListopt RPAREN...\");", "+\t\t    consumeClassInstanceCreationExpression();  ", "+\t\t\tbreak ;", "+ ", "+    case 297 : // System.out.println(\"ClassInstanceCreationExpression ::= Primary DOT new SimpleName LPAREN...\");", "+\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 298 : // System.out.println(\"ClassInstanceCreationExpression ::= ClassInstanceCreationExpressionName new...\");", "+\t\t    consumeClassInstanceCreationExpressionQualified() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 299 : // System.out.println(\"ClassInstanceCreationExpressionName ::= Name DOT\");", "+\t\t    consumeClassInstanceCreationExpressionName() ;  ", "+\t\t\tbreak ;", "+ ", "+    case 300 : // System.out.println(\"ClassBodyopt ::=\");", "+\t\t    consumeClassBodyopt();  ", "+\t\t\tbreak ;", "+ ", "+    case 302 : // System.out.println(\"EnterAnonymousClassBody ::=\");", "+\t\t    consumeEnterAnonymousClassBody();  ", "+\t\t\tbreak ;", "+ ", "+    case 304 : // System.out.println(\"ArgumentList ::= ArgumentList COMMA Expression\");", "+\t\t    consumeArgumentList();  ", "+\t\t\tbreak ;", "+ ", "+    case 305 : // System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new PrimitiveType DimWithOrWithOutExprs\");", "+\t\t    consumeArrayCreationExpressionWithoutInitializer();  ", "+\t\t\tbreak ;", "+ ", "+    case 306 : // System.out.println(\"ArrayCreationWithArrayInitializer ::= new PrimitiveType DimWithOrWithOutExprs...\");", "+\t\t    consumeArrayCreationExpressionWithInitializer();  ", "+\t\t\tbreak ;", "+ ", "+    case 307 : // System.out.println(\"ArrayCreationWithoutArrayInitializer ::= new ClassOrInterfaceType...\");", "+\t\t    consumeArrayCreationExpressionWithoutInitializer();  ", "+\t\t\tbreak ;", "+ ", "+    case 308 : // System.out.println(\"ArrayCreationWithArrayInitializer ::= new ClassOrInterfaceType...\");", "+\t\t    consumeArrayCreationExpressionWithInitializer();  ", "+\t\t\tbreak ;", "+ ", "+    case 310 : // System.out.println(\"DimWithOrWithOutExprs ::= DimWithOrWithOutExprs DimWithOrWithOutExpr\");", "+\t\t    consumeDimWithOrWithOutExprs();  ", "+\t\t\tbreak ;", "+ ", "+     case 312 : // System.out.println(\"DimWithOrWithOutExpr ::= LBRACKET RBRACKET\");", "+\t\t    consumeDimWithOrWithOutExpr();  ", "+\t\t\tbreak ;", "+ ", "+     case 313 : // System.out.println(\"Dims ::= DimsLoop\");", "+\t\t    consumeDims();  ", "+\t\t\tbreak ;", "+ ", "+     case 316 : // System.out.println(\"OneDimLoop ::= LBRACKET RBRACKET\");", "+\t\t    consumeOneDimLoop();  ", "+\t\t\tbreak ;", "+ ", "+    case 317 : // System.out.println(\"FieldAccess ::= Primary DOT Identifier\");", "+\t\t    consumeFieldAccess(false);  ", "+\t\t\tbreak ;", "+ ", "+    case 318 : // System.out.println(\"FieldAccess ::= super DOT Identifier\");", "+\t\t    consumeFieldAccess(true);  ", "+\t\t\tbreak ;", "+ ", "+    case 319 : // System.out.println(\"MethodInvocation ::= Name LPAREN ArgumentListopt RPAREN\");", "+\t\t    consumeMethodInvocationName();  ", "+\t\t\tbreak ;", "+ ", "+    case 320 : // System.out.println(\"MethodInvocation ::= Primary DOT Identifier LPAREN ArgumentListopt RPAREN\");", "+\t\t    consumeMethodInvocationPrimary();  ", "+\t\t\tbreak ;", "+ ", "+    case 321 : // System.out.println(\"MethodInvocation ::= super DOT Identifier LPAREN ArgumentListopt RPAREN\");", "+\t\t    consumeMethodInvocationSuper();  ", "+\t\t\tbreak ;", "+ ", "+    case 322 : // System.out.println(\"ArrayAccess ::= Name LBRACKET Expression RBRACKET\");", "+\t\t    consumeArrayAccess(true);  ", "+\t\t\tbreak ;", "+ ", "+    case 323 : // System.out.println(\"ArrayAccess ::= PrimaryNoNewArray LBRACKET Expression RBRACKET\");", "+\t\t    consumeArrayAccess(false);  ", "+\t\t\tbreak ;", "+    case 324 : // System.out.println(\"ArrayAccess ::= ArrayCreationWithArrayInitializer LBRACKET Expression RBRACKET\");", "+\t\t    consumeArrayAccess(false);  ", "+\t\t\tbreak ;", "+ ", "+    case 326 : // System.out.println(\"PostfixExpression ::= Name\");", "+\t\t    consumePostfixExpression();  ", "+\t\t\tbreak ;", "+ ", "+    case 329 : // System.out.println(\"PostIncrementExpression ::= PostfixExpression PLUS_PLUS\");", "+\t\t    consumeUnaryExpression(OperatorExpression.PLUS,true);  ", "+\t\t\tbreak ;", "+ ", "+    case 330 : // System.out.println(\"PostDecrementExpression ::= PostfixExpression MINUS_MINUS\");", "+\t\t    consumeUnaryExpression(OperatorExpression.MINUS,true);  ", "+\t\t\tbreak ;", "+ ", "+    case 331 : // System.out.println(\"PushPosition ::=\");", "+\t\t    consumePushPosition();  ", "+\t\t\tbreak ;", "+ ", "+    case 334 : // System.out.println(\"UnaryExpression ::= PLUS PushPosition UnaryExpression\");", "+\t\t    consumeUnaryExpression(OperatorExpression.PLUS);  ", "+\t\t\tbreak ;", "+ ", "+    case 335 : // System.out.println(\"UnaryExpression ::= MINUS PushPosition UnaryExpression\");", "+\t\t    consumeUnaryExpression(OperatorExpression.MINUS);  ", "+\t\t\tbreak ;", "+ ", "+    case 337 : // System.out.println(\"PreIncrementExpression ::= PLUS_PLUS PushPosition UnaryExpression\");", "+\t\t    consumeUnaryExpression(OperatorExpression.PLUS,false);  ", "+\t\t\tbreak ;", "+ ", "+    case 338 : // System.out.println(\"PreDecrementExpression ::= MINUS_MINUS PushPosition UnaryExpression\");", "+\t\t    consumeUnaryExpression(OperatorExpression.MINUS,false);  ", "+\t\t\tbreak ;", "+ ", "+    case 340 : // System.out.println(\"UnaryExpressionNotPlusMinus ::= TWIDDLE PushPosition UnaryExpression\");", "+\t\t    consumeUnaryExpression(OperatorExpression.TWIDDLE);  ", "+\t\t\tbreak ;", "+ ", "+    case 341 : // System.out.println(\"UnaryExpressionNotPlusMinus ::= NOT PushPosition UnaryExpression\");", "+\t\t    consumeUnaryExpression(OperatorExpression.NOT);  ", "+\t\t\tbreak ;", "+ ", "+    case 343 : // System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt PushRPAREN InsideCastExpression\");", "+\t\t    consumeCastExpression();  ", "+\t\t\tbreak ;", "+ ", "+    case 344 : // System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN InsideCastExpression...\");", "+\t\t    consumeCastExpression();  ", "+\t\t\tbreak ;", "+ ", "+    case 345 : // System.out.println(\"CastExpression ::= PushLPAREN Expression PushRPAREN InsideCastExpressionLL1...\");", "+\t\t    consumeCastExpressionLL1();  ", "+\t\t\tbreak ;", "+ ", "+    case 346 : // System.out.println(\"InsideCastExpression ::=\");", "+\t\t    consumeInsideCastExpression();  ", "+\t\t\tbreak ;", "+ ", "+    case 347 : // System.out.println(\"InsideCastExpressionLL1 ::=\");", "+\t\t    consumeInsideCastExpressionLL1();  ", "+\t\t\tbreak ;", "+ ", "+    case 349 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression MULTIPLY UnaryExpression\");", "+\t\t    consumeBinaryExpression(OperatorExpression.MULTIPLY);  ", "+\t\t\tbreak ;", "+ ", "+    case 350 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression DIVIDE UnaryExpression\");", "+\t\t    consumeBinaryExpression(OperatorExpression.DIVIDE);  ", "+\t\t\tbreak ;", "+ ", "+    case 351 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression REMAINDER UnaryExpression\");", "+\t\t    consumeBinaryExpression(OperatorExpression.REMAINDER);  ", "+\t\t\tbreak ;", "+ ", "+    case 353 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS MultiplicativeExpression\");", "+\t\t    consumeBinaryExpression(OperatorExpression.PLUS);  ", "+\t\t\tbreak ;", "+ ", "+    case 354 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS MultiplicativeExpression\");", "+\t\t    consumeBinaryExpression(OperatorExpression.MINUS);  ", "+\t\t\tbreak ;", "+ ", "+    case 356 : // System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT AdditiveExpression\");", "+\t\t    consumeBinaryExpression(OperatorExpression.LEFT_SHIFT);  ", "+\t\t\tbreak ;", "+ ", "+    case 357 : // System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT AdditiveExpression\");", "+\t\t    consumeBinaryExpression(OperatorExpression.RIGHT_SHIFT);  ", "+\t\t\tbreak ;", "+ ", "+    case 358 : // System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT AdditiveExpression\");", "+\t\t    consumeBinaryExpression(OperatorExpression.UNSIGNED_RIGHT_SHIFT);  ", "+\t\t\tbreak ;", "+ ", "+    case 360 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS ShiftExpression\");", "+\t\t    consumeBinaryExpression(OperatorExpression.LESS);  ", "+\t\t\tbreak ;", "+ ", "+    case 361 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER ShiftExpression\");", "+\t\t    consumeBinaryExpression(OperatorExpression.GREATER);  ", "+\t\t\tbreak ;", "+ ", "+    case 362 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL ShiftExpression\");", "+\t\t    consumeBinaryExpression(OperatorExpression.LESS_EQUAL);  ", "+\t\t\tbreak ;", "+ ", "+    case 363 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER_EQUAL ShiftExpression\");", "+\t\t    consumeBinaryExpression(OperatorExpression.GREATER_EQUAL);  ", "+\t\t\tbreak ;", "+ ", "+    case 364 : // System.out.println(\"RelationalExpression ::= RelationalExpression instanceof ReferenceType\");", "+\t\t    consumeInstanceOfExpression(OperatorExpression.INSTANCEOF);  ", "+\t\t\tbreak ;", "+ ", "+    case 366 : // System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL RelationalExpression\");", "+\t\t    consumeEqualityExpression(OperatorExpression.EQUAL_EQUAL);  ", "+\t\t\tbreak ;", "+ ", "+    case 367 : // System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL RelationalExpression\");", "+\t\t    consumeEqualityExpression(OperatorExpression.NOT_EQUAL);  ", "+\t\t\tbreak ;", "+ ", "+    case 369 : // System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\");", "+\t\t    consumeBinaryExpression(OperatorExpression.AND);  ", "+\t\t\tbreak ;", "+ ", "+    case 371 : // System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR AndExpression\");", "+\t\t    consumeBinaryExpression(OperatorExpression.XOR);  ", "+\t\t\tbreak ;", "+ ", "+    case 373 : // System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR ExclusiveOrExpression\");", "+\t\t    consumeBinaryExpression(OperatorExpression.OR);  ", "+\t\t\tbreak ;", "+ ", "+    case 375 : // System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression AND_AND InclusiveOrExpression\");", "+\t\t    consumeBinaryExpression(OperatorExpression.AND_AND);  ", "+\t\t\tbreak ;", "+ ", "+    case 377 : // System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression OR_OR ConditionalAndExpression\");", "+\t\t    consumeBinaryExpression(OperatorExpression.OR_OR);  ", "+\t\t\tbreak ;", "+ ", "+    case 379 : // System.out.println(\"ConditionalExpression ::= ConditionalOrExpression QUESTION Expression COLON...\");", "+\t\t    consumeConditionalExpression(OperatorExpression.QUESTIONCOLON) ;  ", "+\t\t\tbreak ;", "+ ", "+    case 382 : // System.out.println(\"Assignment ::= PostfixExpression AssignmentOperator AssignmentExpression\");", "+\t\t    consumeAssignment();  ", "+\t\t\tbreak ;", "+ ", "+    case 384 : // System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\");", "+\t\t    ignoreExpressionAssignment(); ", "+\t\t\tbreak ;", "+ ", "+    case 385 : // System.out.println(\"AssignmentOperator ::= EQUAL\");", "+\t\t    consumeAssignmentOperator(EQUAL);  ", "+\t\t\tbreak ;", "+ ", "+    case 386 : // System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\");", "+\t\t    consumeAssignmentOperator(MULTIPLY);  ", "+\t\t\tbreak ;", "+ ", "+    case 387 : // System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\");", "+\t\t    consumeAssignmentOperator(DIVIDE);  ", "+\t\t\tbreak ;", "+ ", "+    case 388 : // System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\");", "+\t\t    consumeAssignmentOperator(REMAINDER);  ", "+\t\t\tbreak ;", "+ ", "+    case 389 : // System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\");", "+\t\t    consumeAssignmentOperator(PLUS);  ", "+\t\t\tbreak ;", "+ ", "+    case 390 : // System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\");", "+\t\t    consumeAssignmentOperator(MINUS);  ", "+\t\t\tbreak ;", "+ ", "+    case 391 : // System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\");", "+\t\t    consumeAssignmentOperator(LEFT_SHIFT);  ", "+\t\t\tbreak ;", "+ ", "+    case 392 : // System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\");", "+\t\t    consumeAssignmentOperator(RIGHT_SHIFT);  ", "+\t\t\tbreak ;", "+ ", "+    case 393 : // System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\");", "+\t\t    consumeAssignmentOperator(UNSIGNED_RIGHT_SHIFT);  ", "+\t\t\tbreak ;", "+ ", "+    case 394 : // System.out.println(\"AssignmentOperator ::= AND_EQUAL\");", "+\t\t    consumeAssignmentOperator(AND);  ", "+\t\t\tbreak ;", "+ ", "+    case 395 : // System.out.println(\"AssignmentOperator ::= XOR_EQUAL\");", "+\t\t    consumeAssignmentOperator(XOR);  ", "+\t\t\tbreak ;", "+ ", "+    case 396 : // System.out.println(\"AssignmentOperator ::= OR_EQUAL\");", "+\t\t    consumeAssignmentOperator(OR);  ", "+\t\t\tbreak ;", "+ ", "+    case 403 : // System.out.println(\"Expressionopt ::=\");", "+\t\t    consumeEmptyExpression();  ", "+\t\t\tbreak ;", "+ ", "+    case 407 : // System.out.println(\"ImportDeclarationsopt ::=\");", "+\t\t    consumeEmptyImportDeclarationsopt();  ", "+\t\t\tbreak ;", "+ ", "+    case 408 : // System.out.println(\"ImportDeclarationsopt ::= ImportDeclarations\");", "+\t\t    consumeImportDeclarationsopt();  ", "+\t\t\tbreak ;", "+ ", "+    case 409 : // System.out.println(\"TypeDeclarationsopt ::=\");", "+\t\t    consumeEmptyTypeDeclarationsopt();  ", "+\t\t\tbreak ;", "+ ", "+    case 410 : // System.out.println(\"TypeDeclarationsopt ::= TypeDeclarations\");", "+\t\t    consumeTypeDeclarationsopt();  ", "+\t\t\tbreak ;", "+ ", "+    case 411 : // System.out.println(\"ClassBodyDeclarationsopt ::=\");", "+\t\t    consumeEmptyClassBodyDeclarationsopt();  ", "+\t\t\tbreak ;", "+ ", "+    case 412 : // System.out.println(\"ClassBodyDeclarationsopt ::= NestedType ClassBodyDeclarations\");", "+\t\t    consumeClassBodyDeclarationsopt();  ", "+\t\t\tbreak ;", "+ ", "+     case 413 : // System.out.println(\"Modifiersopt ::=\");", "+\t\t    consumeDefaultModifiers();  ", "+\t\t\tbreak ;", "+ ", "+    case 414 : // System.out.println(\"Modifiersopt ::= Modifiers\");", "+\t\t    consumeModifiers();  ", "+\t\t\tbreak ;", "+ ", "+    case 415 : // System.out.println(\"BlockStatementsopt ::=\");", "+\t\t    consumeEmptyBlockStatementsopt();  ", "+\t\t\tbreak ;", "+ ", "+     case 417 : // System.out.println(\"Dimsopt ::=\");", "+\t\t    consumeEmptyDimsopt();  ", "+\t\t\tbreak ;", "+ ", "+     case 419 : // System.out.println(\"ArgumentListopt ::=\");", "+\t\t    consumeEmptyArgumentListopt();  ", "+\t\t\tbreak ;", "+ ", "+    case 423 : // System.out.println(\"FormalParameterListopt ::=\");", "+\t\t    consumeFormalParameterListopt();  ", "+\t\t\tbreak ;", "+ ", "+     case 427 : // System.out.println(\"InterfaceMemberDeclarationsopt ::=\");", "+\t\t    consumeEmptyInterfaceMemberDeclarationsopt();  ", "+\t\t\tbreak ;", "+ ", "+     case 428 : // System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType InterfaceMemberDeclarations\");", "+\t\t    consumeInterfaceMemberDeclarationsopt();  ", "+\t\t\tbreak ;", "+ ", "+    case 429 : // System.out.println(\"NestedType ::=\");", "+\t\t    consumeNestedType();  ", "+\t\t\tbreak ;", "+", "+     case 430 : // System.out.println(\"ForInitopt ::=\");", "+\t\t    consumeEmptyForInitopt();  ", "+\t\t\tbreak ;", "+ ", "+     case 432 : // System.out.println(\"ForUpdateopt ::=\");", "+\t\t    consumeEmptyForUpdateopt();  ", "+\t\t\tbreak ;", "+ ", "+     case 436 : // System.out.println(\"Catchesopt ::=\");", "+\t\t    consumeEmptyCatchesopt();  ", "+\t\t\tbreak ;", "+ ", "+\t}", "+} "]}], "num": 60627}
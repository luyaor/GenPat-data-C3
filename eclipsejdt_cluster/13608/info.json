{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "73d7f8b339c5d6faaca6ae7ffd1e3a63", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ea44db2dcf5c167e53c19718f0bd8a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "0c3f0e73c9b880723c6ae1f54311b67b204648b1", "commitAfterChange": "50e0e7da8192eb9b9c5384858d97fb1be7728cb8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r \tprotected void seekQualifiedMemberTypes(String qualifiedName, IType type, boolean partialMatch, IJavaElementRequestor requestor)", "signatureAfterChange": "\r \tprotected void seekQualifiedMemberTypes(String qualifiedName, IType type, boolean partialMatch, IJavaElementRequestor requestor, int acceptFlags)", "diff": ["-\t */\r", "-\tprotected void seekQualifiedMemberTypes(String qualifiedName, IType type, boolean partialMatch, IJavaElementRequestor requestor) {\r", "-\t\tif (type == null)\r", "-\t\t\treturn;\r", "-\t\tIType[] types= null;\r", "-\t\ttry {\r", "-\t\t\ttypes= type.getTypes();\r", "-\t\t} catch (JavaModelException npe) {\r", "-\t\t\treturn; // the enclosing type is not present\r", "-\t\t}\r", "-\t\tString matchName= qualifiedName;\r", "-\t\tint index= qualifiedName.indexOf('$');\r", "-\t\tboolean nested= false;\r", "-\t\tif (index != -1) {\r", "-\t\t\tmatchName= qualifiedName.substring(0, index);\r", "-\t\t\tnested= true;\r", "-\t\t}\r", "-\t\tint length= types.length;\r", "-\t\tfor (int i= 0; i < length; i++) {\r", "-\t\t\tif (requestor.isCanceled())\r", "-\t\t\t\treturn;\r", "-\t\t\tIType memberType= types[i];\r", "-\t\t\tif (nameMatches(matchName, memberType, partialMatch))\r", "-\t\t\t\tif (nested) {\r", "-\t\t\t\t\tseekQualifiedMemberTypes(qualifiedName.substring(index + 1, qualifiedName.length()), memberType, partialMatch, requestor);\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\trequestor.acceptMemberType(memberType);\r", "-\t\t\t\t}\r", "-\t\t}\r", "-\t}\r", "+\t */\r", "+\tprotected void seekQualifiedMemberTypes(String qualifiedName, IType type, boolean partialMatch, IJavaElementRequestor requestor, int acceptFlags) {\r", "+\t\tif (type == null)\r", "+\t\t\treturn;\r", "+\t\tIType[] types= null;\r", "+\t\ttry {\r", "+\t\t\ttypes= type.getTypes();\r", "+\t\t} catch (JavaModelException npe) {\r", "+\t\t\treturn; // the enclosing type is not present\r", "+\t\t}\r", "+\t\tString matchName= qualifiedName;\r", "+\t\tint index= qualifiedName.indexOf('$');\r", "+\t\tboolean nested= false;\r", "+\t\tif (index != -1) {\r", "+\t\t\tmatchName= qualifiedName.substring(0, index);\r", "+\t\t\tnested= true;\r", "+\t\t}\r", "+\t\tint length= types.length;\r", "+\t\tfor (int i= 0; i < length; i++) {\r", "+\t\t\tif (requestor.isCanceled())\r", "+\t\t\t\treturn;\r", "+\t\t\tIType memberType= types[i];\r", "+\t\t\tif (nameMatches(matchName, memberType, partialMatch))\r", "+\t\t\t\tif (nested) {\r", "+\t\t\t\t\tseekQualifiedMemberTypes(qualifiedName.substring(index + 1, qualifiedName.length()), memberType, partialMatch, requestor, acceptFlags);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tif (acceptType(memberType, acceptFlags)) requestor.acceptMemberType(memberType);\r", "+\t\t\t\t}\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e039f3a43d9f8c8adb2558d5a1775b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "0b147b41fd14622e58b9abe70d023e6b22dcfbf7", "commitAfterChange": "224ac51338df376ffd0a9a55fd7c92d9e76b9040", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r \tprotected void seekTypesInSourcePackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "signatureAfterChange": "\r \tprotected void seekTypesInSourcePackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "diff": ["-\t\tICompilationUnit[] compilationUnits= null;\r", "+\t\tICompilationUnit[] compilationUnits = null;\r", "-\t\t\tcompilationUnits= pkg.getCompilationUnits();\r", "+\t\t\tcompilationUnits = pkg.getCompilationUnits();\r", "-\t\tString matchName= name;\r", "+\t\tString matchName = name;\r", "-\t\tboolean memberType= false;\r", "+\t\tboolean potentialMemberType = false;\r", "+\t\tString potentialMatchName = null;\r", "-\t\t\tmatchName= name.substring(0, index);\r", "-\t\t\tmemberType= true;\r", "+\t\t\tpotentialMatchName = name.substring(0, index);\r", "+\t\t\tpotentialMemberType = true;\r", "-\t\tString unitName= partialMatch ? matchName.toLowerCase() : matchName + \".java\"; //$NON-NLS-1$\r", "+\t\tString unitName = partialMatch ? matchName.toLowerCase() : matchName + \".java\"; //$NON-NLS-1$\r", "+\t\tString potentialUnitName = null;\r", "+\t\tif (potentialMemberType) {\r", "+\t\t\tpotentialUnitName = partialMatch ? potentialMatchName.toLowerCase() : potentialMatchName + \".java\"; //$NON-NLS-1$\r", "+\t\t}\r", "-\t\t\t\t\tif (nameMatches(matchName, type, partialMatch))\r", "-\t\t\t\t\t\tif (!memberType) {\r", "-\t\t\t\t\t\t\tif (acceptType(type, acceptFlags)) requestor.acceptType(type);\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\tseekQualifiedMemberTypes(name.substring(index + 1, name.length()), type, partialMatch, requestor, acceptFlags);\r", "-\t\t\t\t\t\t}\r", "+\t\t\t\t\tif (nameMatches(matchName, type, partialMatch)) {\r", "+\t\t\t\t\t\tif (acceptType(type, acceptFlags)) requestor.acceptType(type);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t} else \tif (potentialMemberType && nameMatches(potentialUnitName, compilationUnit, partialMatch)) {\r", "+\t\t\t\tIType[] types= null;\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\ttypes= compilationUnit.getTypes();\r", "+\t\t\t\t} catch (JavaModelException npe) {\r", "+\t\t\t\t\tcontinue; // the compilation unit is not present\r", "+\t\t\t\t}\r", "+\t\t\t\tint typeLength= types.length;\r", "+\t\t\t\tfor (int j= 0; j < typeLength; j++) {\r", "+\t\t\t\t\tif (requestor.isCanceled())\r", "+\t\t\t\t\t\treturn;\r", "+\t\t\t\t\tIType type= types[j];\r", "+\t\t\t\t\tif (nameMatches(potentialMatchName, type, partialMatch)) {\r", "+\t\t\t\t\t\tseekQualifiedMemberTypes(name.substring(index + 1, name.length()), type, partialMatch, requestor, acceptFlags);\r", "+\t\t\t\t\t}\r", "+\r"]}], "num": 13608}
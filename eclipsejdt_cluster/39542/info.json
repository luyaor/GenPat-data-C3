{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28163634d03bf755a9b108885ab8d2a3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06a86e91a293cb3bd209dbcae25b5772", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "9bafd098a4f01cb487df1e23626d9ca01b29c273", "commitAfterChange": "79363a0cf2877d51c36b4085a9d2b719b103bf6c", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " \tpublic boolean visit(Initializer initializer, MethodScope scope)", "signatureAfterChange": " \tpublic boolean visit(IntersectionCastTypeReference intersectionCastTypeReference, BlockScope scope)", "diff": ["+\t */", "+\tpublic boolean visit(IntersectionCastTypeReference intersectionCastTypeReference, BlockScope scope) {", "+\t\tint length = intersectionCastTypeReference.typeReferences == null ? 0 : intersectionCastTypeReference.typeReferences.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tintersectionCastTypeReference.typeReferences[i].traverse(this, scope);", "+\t\t\tif (i != length - 1) {", "+\t\t\t\t// Borrowing the formatting option from binary operators", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameAND, this.preferences.insert_space_before_binary_operator);", "+\t\t\t\tif (this.preferences.insert_space_after_binary_operator) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a9a816fbe5e482a75beeb95d05063ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "aa717ce56e721f6ed4fc92594ba56da9f08c982e", "commitAfterChange": "5e93996c6b4562ee73fa5730afbd832d1574cd08", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "\t  \tprivate void formatMessageSend( \t\tMessageSend messageSend, \t\tBlockScope scope, \t\tAlignment messageAlignment)", "signatureAfterChange": "\t  \tprivate void formatMessageSend( \t\tMessageSend messageSend, \t\tBlockScope scope, \t\tAlignment messageAlignment)", "diff": ["-\t\t\tint argumentLength = arguments.length;", "-\t\t\tAlignment argumentsAlignment = this.scribe.createAlignment(", "-\t\t\t\t\t\"messageArguments\", //$NON-NLS-1$", "-\t\t\t\t\tthis.preferences.message_send_arguments_alignment,", "-\t\t\t\t\targumentLength,", "-\t\t\t\t\tthis.scribe.scanner.currentPosition);", "-\t\t\tthis.scribe.enterAlignment(argumentsAlignment);", "-\t\t\tboolean ok = false;", "-\t\t\tdo {", "-\t\t\t\ttry {", "-\t\t\t\t\tif (this.preferences.insert_space_within_message_send) {", "-\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t}", "-\t\t\t\t\tfor (int i = 0; i < argumentLength; i++) {", "-\t\t\t\t\t\tif (i > 0) {", "-\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_messagesend_arguments);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.scribe.alignFragment(argumentsAlignment, i);", "-\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_messagesend_arguments) {", "+\t\t\tint argumentsLength = arguments.length;", "+\t\t\tif (argumentsLength > 1) {", "+\t\t\t\tAlignment argumentsAlignment = this.scribe.createAlignment(", "+\t\t\t\t\t\t\"messageArguments\", //$NON-NLS-1$", "+\t\t\t\t\t\tthis.preferences.message_send_arguments_alignment,", "+\t\t\t\t\t\targumentsLength,", "+\t\t\t\t\t\tthis.scribe.scanner.currentPosition);", "+\t\t\t\tthis.scribe.enterAlignment(argumentsAlignment);", "+\t\t\t\tboolean ok = false;", "+\t\t\t\tdo {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tif (this.preferences.insert_space_within_message_send) {", "-\t\t\t\t\t\targuments[i].traverse(this, scope);", "+\t\t\t\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "+\t\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_messagesend_arguments);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.scribe.alignFragment(argumentsAlignment, i);", "+\t\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_messagesend_arguments) {", "+\t\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\targuments[i].traverse(this, scope);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tok = true;", "+\t\t\t\t\t} catch (AlignmentException e) {", "+\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t\t\tok = true;", "-\t\t\t\t} catch (AlignmentException e) {", "-\t\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t\t} while (!ok);", "+\t\t\t\tthis.scribe.exitAlignment(argumentsAlignment, true);", "+\t\t\t} else {", "+\t\t\t\tif (this.preferences.insert_space_within_message_send) {", "+\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t} while (!ok);", "-\t\t\tthis.scribe.exitAlignment(argumentsAlignment, true);", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_within_message_send);", "-\t\t} else {", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_arguments);", "+\t\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "+\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_messagesend_arguments);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_messagesend_arguments) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t\targuments[i].traverse(this, scope);", "+\t\t\t\t}", "+\t\t\t}", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_arguments);"]}], "num": 39542}
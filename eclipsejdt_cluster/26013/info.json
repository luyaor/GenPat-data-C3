{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5260ded27c275272ab5d009fde2c75d3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a397bacfd140fe07381ca9e6dbe2f233", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 36, "signatureBeforeChange": " \t\tpublic synchronized void updateClasspathInformation(IClasspathEntry[] newRawClasspath)", "signatureAfterChange": " \t\tpublic synchronized IClasspathEntry[] readAndCacheClasspath(JavaProject javaProject)", "diff": ["-\t\t// updating raw classpath need to flush obsoleted cached information about resolved entries", "-\t\tpublic synchronized void updateClasspathInformation(IClasspathEntry[] newRawClasspath) {", "-", "-\t\t\tthis.resolvedClasspath = null;", "-\t\t\tthis.resolvedPathToRawEntries = null;", "+\t\t */", "+\t\tpublic synchronized IClasspathEntry[] readAndCacheClasspath(JavaProject javaProject) {", "+\t\t\t// read file entries and update status", "+\t\t\tIClasspathEntry[] classpath;", "+\t\t\tIJavaModelStatus status;", "+\t\t\ttry {", "+\t\t\t\tclasspath = javaProject.readFileEntriesWithException(null/*not interested in unknown elements*/);", "+\t\t\t\tstatus = JavaModelStatus.VERIFIED_OK;", "+\t\t\t} catch (CoreException e) {", "+\t\t\t\tclasspath = JavaProject.INVALID_CLASSPATH;", "+\t\t\t\tstatus = ", "+\t\t\t\t\tnew JavaModelStatus(", "+\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "+\t\t\t\t\t\tMessages.bind(Messages.classpath_cannotReadClasspathFile, javaProject.getElementName()));", "+\t\t\t} catch (IOException e) {", "+\t\t\t\tclasspath = JavaProject.INVALID_CLASSPATH;", "+\t\t\t\tif (Messages.file_badFormat.equals(e.getMessage()))", "+\t\t\t\t\tstatus = ", "+\t\t\t\t\t\tnew JavaModelStatus(", "+\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "+\t\t\t\t\t\t\tMessages.bind(Messages.classpath_xmlFormatError, javaProject.getElementName(), Messages.file_badFormat));", "+\t\t\t\telse\t\t\t\t", "+\t\t\t\t\tstatus = ", "+\t\t\t\t\t\tnew JavaModelStatus(", "+\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "+\t\t\t\t\t\t\tMessages.bind(Messages.classpath_cannotReadClasspathFile, javaProject.getElementName()));", "+\t\t\t} catch (AssertionFailedException e) {", "+\t\t\t\tclasspath = JavaProject.INVALID_CLASSPATH;", "+\t\t\t\tstatus =  ", "+\t\t\t\t\tnew JavaModelStatus(", "+\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "+\t\t\t\t\t\tMessages.bind(Messages.classpath_illegalEntryInClasspathFile, new String[] {javaProject.getElementName(), e.getMessage()}));", "+\t\t\t}", "+\t\t", "+\t\t\t// extract out the output location", "+\t\t\tIPath output = null;", "+\t\t\tif (classpath.length > 0) {", "+\t\t\t\tIClasspathEntry entry = classpath[classpath.length - 1];", "+\t\t\t\tif (entry.getContentKind() == ClasspathEntry.K_OUTPUT) {", "+\t\t\t\t\toutput = entry.getPath();", "+\t\t\t\t\tIClasspathEntry[] copy = new IClasspathEntry[classpath.length - 1];", "+\t\t\t\t\tSystem.arraycopy(classpath, 0, copy, 0, copy.length);", "+\t\t\t\t\tclasspath = copy;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\t// store new raw classpath, new output and new status, and null out resolved info", "+\t\t\tsetClasspath(classpath, output, status, null, null, null);", "+\t\t\t", "+\t\t\treturn classpath;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a54197ccd7cb8003076fc07dcf27b546", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/Java50Tests.java", "commitBeforeChange": "eadf5ba6d44f28f071965cf829d67590b0a71974", "commitAfterChange": "67ea81843f1f922a9502d78e868c5fb128acafba", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void testParameterizedMemberType() throws JavaModelException", "signatureAfterChange": "  \tpublic void testParameterizedMemberType() throws JavaModelException", "diff": ["-\t\t\t\"class A<T> extends B<B<T>.M> {}\\n\" + ", "+\t\t\t\"class A<T> extends B<B<T>.M> {}\"", "+\t\t);", "+", "+\t\tIPath bPath = env.addClass(projectPath, \"\", \"B\",", "-\t\t); ", "+\t\t);", "-\t\tenv.addClass(projectPath, \"\", \"A\",", "-\t\t\t\"class A<T> extends B<B<T>.M> {}\\n\" + ", "+\t\tenv.addClass(projectPath, \"\", \"B\",", "-\t\t); ", "+\t\t);", "-\t\texpectingProblemsFor(", "-\t\t\tnew IPath[] {aPath, xPath},", "-\t\t\t\"Problem : The hierarchy of the type A is inconsistent [ resource : </Project/A.java> range : <6,7> category : <40> severity : <2>]\\n\" + ", "-\t\t\t\"Problem : Missing cannot be resolved to a type [ resource : </Project/A.java> range : <51,58> category : <40> severity : <2>]\\n\" + ", "-\t\t\t\"Problem : The hierarchy of the type X is inconsistent [ resource : </Project/X.java> range : <6,7> category : <40> severity : <2>]\"", "-\t\t);", "+\t\texpectingSpecificProblemFor(xPath, new Problem(\"X\", \"The hierarchy of the type X is inconsistent\", xPath, 6, 7, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(aPath, new Problem(\"A\", \"The hierarchy of the type A is inconsistent\", aPath, 6, 7, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(bPath, new Problem(\"B\", \"Missing cannot be resolved to a type\", bPath, 19, 26, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingProblemsFor(", "-\t\t\tnew IPath[] {aPath, xPath},", "-\t\t\t\"Problem : The hierarchy of the type A is inconsistent [ resource : </Project/A.java> range : <6,7> category : <40> severity : <2>]\\n\" + ", "-\t\t\t\"Problem : Missing cannot be resolved to a type [ resource : </Project/A.java> range : <51,58> category : <40> severity : <2>]\\n\" + ", "-\t\t\t\"Problem : The hierarchy of the type X is inconsistent [ resource : </Project/X.java> range : <6,7> category : <40> severity : <2>]\"", "-\t\t);", "+\t\texpectingSpecificProblemFor(xPath, new Problem(\"X\", \"The hierarchy of the type X is inconsistent\", xPath, 6, 7, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(aPath, new Problem(\"A\", \"The hierarchy of the type A is inconsistent\", aPath, 6, 7, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(bPath, new Problem(\"B\", \"Missing cannot be resolved to a type\", bPath, 19, 26, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tenv.addClass(projectPath, \"\", \"A\",", "-\t\t\t\"class A<T> extends B<B<T>.M> {}\\n\" + ", "+\t\tenv.addClass(projectPath, \"\", \"B\",", "-\t\t); ", "-", "-\t\tincrementalBuild(projectPath);", "-\t\texpectingProblemsFor(", "-\t\t\tnew IPath[] {aPath, xPath},", "-\t\t\t\"Problem : The hierarchy of the type A is inconsistent [ resource : </Project/A.java> range : <6,7> category : <40> severity : <2>]\\n\" + ", "-\t\t\t\"Problem : Missing cannot be resolved to a type [ resource : </Project/A.java> range : <51,58> category : <40> severity : <2>]\\n\" + ", "-\t\t\t\"Problem : The hierarchy of the type X is inconsistent [ resource : </Project/X.java> range : <6,7> category : <40> severity : <2>]\"", "-\t\tenv.addClass(projectPath, \"\", \"A\",", "-\t\t\t\"class A<T> extends B<B<T>.M> {}\\n\" + ", "+\t\tincrementalBuild(projectPath);", "+\t\texpectingSpecificProblemFor(xPath, new Problem(\"X\", \"The hierarchy of the type X is inconsistent\", xPath, 6, 7, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(aPath, new Problem(\"A\", \"The hierarchy of the type A is inconsistent\", aPath, 6, 7, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingSpecificProblemFor(bPath, new Problem(\"B\", \"Missing cannot be resolved to a type\", bPath, 19, 26, CategorizedProblem.CAT_TYPE, IMarker.SEVERITY_ERROR)); //$NON-NLS-1$ //$NON-NLS-2$", "+", "+\t\tenv.addClass(projectPath, \"\", \"B\",", "-\t\t); ", "+\t\t);"]}], "num": 26013}
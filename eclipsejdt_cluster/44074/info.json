{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "960904d746bc18a159c17004834a926a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a6f17e7cb3b232aa488b8a152b97efc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "575e550c3da950f3c54755e34320456663152397", "commitAfterChange": "f263f2ef7943b444a7df1ecbae4d4e44696c99a8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "signatureAfterChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "diff": ["-\t\t\t\tReferenceBinding originalGenericType = (ReferenceBinding) originalType;", "+\t\t\t\tReferenceBinding originalReferenceType = (ReferenceBinding) originalType;", "-\t\t            return substitution.environment().createRawType(originalGenericType, substitutedEnclosing);", "+\t\t            return substitution.environment().createRawType(originalReferenceType, substitutedEnclosing);", "-\t\t\t    // treat as if parameterized with its type variables", "-\t\t\t\tTypeVariableBinding[] originalVariables = originalGenericType.typeVariables();", "-\t\t\t\tint length = originalVariables.length;", "-\t\t\t\tSystem.arraycopy(originalVariables, 0, originalArguments = new TypeBinding[length], 0, length);", "-\t\t\t\tsubstitutedArguments = substitute(substitution, originalArguments);", "+\t\t\t    // treat as if parameterized with its type variables (non generic type gets 'null' arguments)", "+\t\t\t\toriginalArguments = originalReferenceType.typeVariables();", "+\t\t\t\tif (originalArguments == NoTypeVariables) {", "+\t\t\t\t\toriginalArguments = null;", "+\t\t\t\t\tsubstitutedArguments = null;", "+\t\t\t\t} else {", "+\t\t\t\t\tsubstitutedArguments = substitute(substitution, originalArguments);", "+\t\t\t\t}", "-\t\t\t\t\t\t\toriginalGenericType, substitutedArguments, substitutedEnclosing);", "+\t\t\t\t\t\t\toriginalReferenceType, substitutedArguments, substitutedEnclosing);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "984648f5121e25fab6eee0a420220af3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "d020ac06f382c23053bc9e518001a91176eaef5f", "commitAfterChange": "e2994fdb966db860a3ca2c7d3ca25f9fbb24e091", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "signatureAfterChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "diff": ["-\t\t\t\t// fall thru in case enclosing is generic", "-\t\t\tcase Binding.GENERIC_TYPE:", "+\t\t\t\t", "+\t\t\t    // treat as if parameterized with its type variables (non generic type gets 'null' arguments)", "+\t\t\t\tif (substitutedEnclosing != originalEnclosing) {", "+\t\t\t\t\treturn substitution.isRawSubstitution() ", "+\t\t\t\t\t\t? substitution.environment().createRawType(originalReferenceType, substitutedEnclosing)", "+\t\t\t\t\t\t:  substitution.environment().createParameterizedType(originalReferenceType, null, substitutedEnclosing);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.GENERIC_TYPE:", "+\t\t\t\toriginalReferenceType = (ReferenceBinding) originalType;", "+\t\t\t\toriginalEnclosing = originalType.enclosingType();", "+\t\t\t\tsubstitutedEnclosing = originalEnclosing;", "+\t\t\t\tif (originalEnclosing != null) {", "+\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) substitute(substitution, originalEnclosing);", "+\t\t\t\t}", "+\t\t\t\t", "-\t\t            return substitution.environment().createRawType(originalReferenceType, substitutedEnclosing);", "-\t            }", "+\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing);", "+\t\t\t\t}", "-\t\t\t\tif (originalArguments == NoTypeVariables) {", "-\t\t\t\t\toriginalArguments = null;", "-\t\t\t\t\tsubstitutedArguments = null;", "-\t\t\t\t} else {", "-\t\t\t\t\tsubstitutedArguments = substitute(substitution, originalArguments);", "-\t\t\t\t}", "+\t\t\t\tsubstitutedArguments = substitute(substitution, originalArguments);", "-\t\t\t\t\treturn substitution.environment().createParameterizedType(", "-\t\t\t\t\t\t\toriginalReferenceType, substitutedArguments, substitutedEnclosing);", "+\t\t\t\t\treturn substitution.environment().createParameterizedType(originalReferenceType, substitutedArguments, substitutedEnclosing);"]}], "num": 44074}
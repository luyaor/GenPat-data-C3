{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69f6cf2ca7d48263ad912f0d2b213ddd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d1a1c1d646fcbf46a9b16a44c298108", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ReadManager.java", "commitBeforeChange": "48628a48bc30e9f74feb6b693bbfe398c063e4b8", "commitAfterChange": "fea4095ba208aac8a9915b5d68b0792beec39b62", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public void run()", "signatureAfterChange": "  public void run()", "diff": ["-\twhile (this.readingThreads != null && this.nextFileToRead < this.units.length) {", "-\t\tICompilationUnit unit = null;", "-\t\tint position = -1;", "-\t\tsynchronized (this) {", "-\t\t\tif (this.readingThreads == null) return;", "-", "-\t\t\twhile (this.filesRead[this.nextAvailablePosition] != null) {", "-\t\t\t\tthis.sleepingThreadCount++;", "-\t\t\t\ttry {", "-\t\t\t\t\twait(250); // wait until a spot in contents is available", "-\t\t\t\t} catch (InterruptedException e) { // ignore", "-\t\t\t\t}", "-\t\t\t\tthis.sleepingThreadCount--;", "+\ttry {", "+\t\twhile (this.readingThreads != null && this.nextFileToRead < this.units.length) {", "+\t\t\tICompilationUnit unit = null;", "+\t\t\tint position = -1;", "+\t\t\tsynchronized (this) {", "+\t", "+\t\t\t\twhile (this.filesRead[this.nextAvailablePosition] != null) {", "+\t\t\t\t\tthis.sleepingThreadCount++;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\twait(250); // wait until a spot in contents is available", "+\t\t\t\t\t} catch (InterruptedException e) { // ignore", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.sleepingThreadCount--;", "+\t\t\t\t\tif (this.readingThreads == null) return;", "+\t\t\t\t}", "+\t", "+\t\t\t\tif (this.nextFileToRead >= this.units.length) return;", "+\t\t\t\tunit = this.units[this.nextFileToRead++];", "+\t\t\t\tposition = this.nextAvailablePosition;", "+\t\t\t\tif (++this.nextAvailablePosition >= this.contentsRead.length)", "+\t\t\t\t\tthis.nextAvailablePosition = 0;", "+\t\t\t\tthis.filesRead[position] = unit;", "+\t\t\t\tthis.contentsRead[position] = readInProcessMarker; // mark the spot so we know its being read", "-", "-\t\t\tif (this.nextFileToRead >= this.units.length) return;", "-\t\t\tunit = this.units[this.nextFileToRead++];", "-\t\t\tposition = this.nextAvailablePosition;", "-\t\t\tif (++this.nextAvailablePosition >= this.contentsRead.length)", "-\t\t\t\tthis.nextAvailablePosition = 0;", "-\t\t\tthis.filesRead[position] = unit;", "-\t\t\tthis.contentsRead[position] = readInProcessMarker; // mark the spot so we know its being read", "+\t\t\tchar[] result = unit.getContents();", "+\t\t\tsynchronized (this) {", "+\t\t\t\tif (this.filesRead[position] == unit) {", "+\t\t\t\t\tif (this.contentsRead[position] == null) // wake up main thread which is waiting for this file", "+\t\t\t\t\t\tnotifyAll();", "+\t\t\t\t\tthis.contentsRead[position] = result;", "+\t\t\t\t}", "+\t\t\t}", "-\t\tchar[] result = unit.getContents();", "+\t} catch (Error e) {", "-\t\t\tif (this.filesRead[position] == unit) {", "-\t\t\t\tif (this.contentsRead[position] == null) // wake up main thread which is waiting for this file", "-\t\t\t\t\tnotifyAll();", "-\t\t\t\tthis.contentsRead[position] = result;", "-\t\t\t}", "+\t\t\tthis.caughtException = e;", "+\t\t\tshutdown();", "+\t\treturn;", "+\t} catch (RuntimeException e) {", "+\t\tsynchronized (this) {", "+\t\t\tthis.caughtException = e;", "+\t\t\tshutdown();", "+\t\t}", "+\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56ec526ecfd1f20cee1e5f5c1aca6bb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/AnnotationInvocationHandler.java", "commitBeforeChange": "b4f6df5ae08d61af8762ee59e5c247a670be227d", "commitAfterChange": "7007043cae1b12e48764a4ad7f71075181f1dd30", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate Object _getReflectionValue(final Object domValue, final Class expectedType) \t\tthrows IllegalAccessException, NoSuchFieldException", "signatureAfterChange": "  \tprivate Object _getReflectionValue(final Object domValue, final Class expectedType)", "diff": ["-\t\tthrows IllegalAccessException, NoSuchFieldException", "-\t        \tfinal Field returnedField = expectedType.getField( varBinding.getName() );", "-\t        \treturn returnedField == null ? null : returnedField.get(null);", "+\t        \ttry {", "+\t        \t\tfinal Field returnedField = expectedType.getField( varBinding.getName() );", "+\t        \t\treturn returnedField == null ? null : returnedField.get(null);", "+\t        \t}", "+\t        \tcatch (NoSuchFieldException nsfe) {", "+\t        \t\treturn null;", "+\t        \t}", "+\t        \tcatch (IllegalAccessException iae) {", "+\t        \t\treturn null;", "+\t        \t}", "-\t\t\tassert expectedType.isArray();", "+\t\t\tif(!expectedType.isArray())", "+\t\t\t\treturn null; // bad user source", "+\t    \t// Make sure the expected value is not a String or a primitive", "+\t    \tif (expectedType.isPrimitive() || expectedType == String.class) {", "+\t    \t\treturn domValue;", "+\t    \t}", "+\t    \t"]}], "num": 37295}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "becf14c1436c1526dbb2931d76c08c21", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eebb2ab837dd333ffa05d84a53c6bd6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": " public String toString()", "signatureAfterChange": " public String toString()", "diff": ["-\tfor (Iterator iter = this.matchingNodes.keySet().iterator(); iter.hasNext();) {", "-\t\tresult.append(\"\\n\"); //$NON-NLS-1$", "-\t\tAstNode node = (AstNode)iter.next();", "-\t\tObject value = this.matchingNodes.get(node);", "-\t\tif (value instanceof Integer) {", "-\t\t\tresult.append('\\t');", "-\t\t\tint accuracy = ((Integer)value).intValue();", "-\t\t\tswitch (accuracy) {", "-\t\t\t\tcase SearchPattern.IMPOSSIBLE_MATCH:", "-\t\t\t\t\tresult.append(\"IMPOSSIBLE_MATCH: \"); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase SearchPattern.POTENTIAL_MATCH:", "-\t\t\t\t\tresult.append(\"POTENTIAL_MATCH: \"); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase SearchPattern.INACCURATE_MATCH:", "-\t\t\t\t\tresult.append(\"INACCURATE_MATCH: \"); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase SearchPattern.ACCURATE_MATCH:", "-\t\t\t\t\tresult.append(\"ACCURATE_MATCH: \"); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t} ", "+\tObject[] keyTable = this.matchingNodes.keyTable;", "+\tObject[] valueTable = this.matchingNodes.valueTable;", "+\tfor (int i = 0, l = keyTable.length; i < l; i++) {", "+\t\tAstNode node = (AstNode) keyTable[i];", "+\t\tif (node == null) continue;", "+\t\tresult.append(\"\\n\\t\"); //$NON-NLS-1$", "+\t\tresult.append(valueTable[i] == EXACT_MATCH", "+\t\t\t? \"ACCURATE_MATCH: \" //$NON-NLS-1$", "+\t\t\t: \"INACCURATE_MATCH: \"); //$NON-NLS-1$", "+", "-\tfor (Iterator iter = this.potentialMatchingNodes.keySet().iterator(); iter.hasNext();) {", "-\t\tresult.append(\"\\n\"); //$NON-NLS-1$", "-\t\tAstNode node = (AstNode)iter.next();", "-\t\tObject value = this.potentialMatchingNodes.get(node);", "-\t\tif (value instanceof Integer) {", "-\t\t\tresult.append(\"\\t\"); //$NON-NLS-1$", "-\t\t\tint accuracy = ((Integer)value).intValue();", "-\t\t\tswitch (accuracy) {", "-\t\t\t\tcase SearchPattern.IMPOSSIBLE_MATCH:", "-\t\t\t\t\tresult.append(\"IMPOSSIBLE_MATCH: \"); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase SearchPattern.POTENTIAL_MATCH:", "-\t\t\t\t\tresult.append(\"POTENTIAL_MATCH: \"); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase SearchPattern.INACCURATE_MATCH:", "-\t\t\t\t\tresult.append(\"INACCURATE_MATCH: \"); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase SearchPattern.ACCURATE_MATCH:", "-\t\t\t\t\tresult.append(\"ACCURATE_MATCH: \"); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "+\tObject[] nodes = this.potentialMatchingNodesSet.values;", "+\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\tAstNode node = (AstNode) nodes[i];", "+\t\tif (node == null) continue;", "+\t\tresult.append(\"\\nPOTENTIAL_MATCH: \"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bed0d0c7c2814048eac9d9774fb8119", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "0243628c08ab4b4900a7554ddbc8a451c6a47550", "commitAfterChange": "047584befb8673c45fb37a5eec1f22e3adb791d0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void acceptBinaryMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, char[] uniqueKey, boolean isConstructor)", "signatureAfterChange": " protected void acceptBinaryMethod( \t\tIType type, \t\tchar[] selector, \t\tchar[][] parameterPackageNames, \t\tchar[][] parameterTypeNames, \t\tString[] parameterSignatures, \t\tchar[][] typeParameterNames, \t\tchar[][][] typeParameterBoundNames, \t\tchar[] uniqueKey, \t\tboolean isConstructor)", "diff": ["- */", "-protected void acceptBinaryMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, char[] uniqueKey, boolean isConstructor) {", "-\tIMethod method= type.getMethod(new String(selector), parameterSignatures);", "-\tif (method.exists()) {", "-\t\ttry {", "-\t\t\tif(!isConstructor || ((JavaElement)method).getSourceMapper() == null) {", "-\t\t\t\tif (uniqueKey != null)", "-\t\t\t\t\tmethod = new ResolvedBinaryMethod(", "-\t\t\t\tISourceRange range = method.getSourceRange();", "-\t\t\t\tif (range.getOffset() != -1 && range.getLength() != 0 ) {", "-\t\t\t\t\tif (uniqueKey != null)", "-\t\t\t\t\t\tmethod = new ResolvedBinaryMethod(", "-\t\t\t\t\t\t\t\t(JavaElement)method.getParent(),", "-\t\t\t\t\t\t\t\tmethod.getElementName(),", "-\t\t\t\t\t\t\t\tmethod.getParameterTypes(),", "-\t\t\t\t\t\t\t\tnew String(uniqueKey));", "-\t\t\t\t\taddElement(method);", "-\t\t\t\t\tif(SelectionEngine.DEBUG){", "-\t\t\t\t\t\tSystem.out.print(\"SELECTION - accept method(\"); //$NON-NLS-1$", "-\t\t\t\t\t\tSystem.out.print(method.toString());", "-\t\t\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// no range was actually found, but a method was originally given -> default constructor", "-\t\t\t\t\taddElement(type);", "-\t\t\t\t\tif(SelectionEngine.DEBUG){", "-\t\t\t\t\t\tSystem.out.print(\"SELECTION - accept type(\"); //$NON-NLS-1$", "-\t\t\t\t\t\tSystem.out.print(type.toString());", "-\t\t\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// an exception occurs, return nothing", "+ */", "+protected void acceptBinaryMethod(", "+\t\tIType type,", "+\t\tchar[] selector,", "+\t\tchar[][] parameterPackageNames,", "+\t\tchar[][] parameterTypeNames,", "+\t\tString[] parameterSignatures,", "+\t\tchar[][] typeParameterNames,", "+\t\tchar[][][] typeParameterBoundNames,", "+\t\tchar[] uniqueKey,", "+\t\tboolean isConstructor) {", "+\tIMethod method= type.getMethod(new String(selector), parameterSignatures);", "+\t", "+\tif (method.exists()) {", "+\t\tif (typeParameterNames != null && typeParameterNames.length != 0) {", "+\t\t\tIMethod[] methods = type.findMethods(method);", "+\t\t\tif (methods.length > 1) {", "+\t\t\t\tfor (int i = 0; i < methods.length; i++) {", "+\t\t\t\t\tif (areTypeParametersCompatible(methods[i], typeParameterNames, typeParameterBoundNames)) {", "+\t\t\t\t\t\tacceptBinaryMethod(type, method, uniqueKey, isConstructor);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}", "+\t\tacceptBinaryMethod(type, method, uniqueKey, isConstructor);"]}], "num": 1460}
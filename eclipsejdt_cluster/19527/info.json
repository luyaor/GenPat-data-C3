{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44f55f2395e5894ffa202535dde9bd49", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "598c3ce81fb90fda1ff019135bbd4e01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "c6d4125101bf5167c8111f17bf85f3fddd64ca03", "commitAfterChange": "42809a61ef9e5b72c9cffca62cbb33391fa05b96", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(ISourceMethod sourceMethod, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(ISourceMethod sourceMethod, CompilationResult compilationResult)", "diff": ["-\t\t\tchar[][][] typeParameterBounds = sourceMethod.getTypeParameterBounds();", "-\t\t\ttypeParams = new TypeParameter[parameterCount];", "-\t\t\tfor (int i = 0; i < parameterCount; i++) {", "-\t\t\t\ttypeParams[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);", "+\t\t\tif (parameterCount > 0) { // method's type parameters must be null if no type parameter", "+\t\t\t\tchar[][][] typeParameterBounds = sourceMethod.getTypeParameterBounds();", "+\t\t\t\ttypeParams = new TypeParameter[parameterCount];", "+\t\t\t\tfor (int i = 0; i < parameterCount; i++) {", "+\t\t\t\t\ttypeParams[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);", "+\t\t\t\t}", "-\t\tmethod.modifiers = sourceMethod.getModifiers();", "+\t\tint modifiers = sourceMethod.getModifiers();", "+\t\tboolean isVarargs = (modifiers & AccVarargs) != 0;", "+\t\tmethod.modifiers = modifiers & ~AccVarargs;", "-\t\t\t\t\tfalse);", "+\t\t\t\t\tisVarargs && i == argumentCount-1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7aad98bba9e8192d73ce6c01433891e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(ISourceMethod sourceMethod, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(ISourceMethod sourceMethod, CompilationResult compilationResult)", "diff": ["+\t\t/* convert type parameters */", "+\t\tchar[][] typeParameterNames = sourceMethod.getTypeParameterNames();", "+\t\tTypeParameter[] typeParams = null;", "+\t\tif (typeParameterNames != null) {", "+\t\t\tint parameterCount = typeParameterNames.length;", "+\t\t\tchar[][][] typeParameterBounds = sourceMethod.getTypeParameterBounds();", "+\t\t\ttypeParams = new TypeParameter[parameterCount];", "+\t\t\tfor (int i = 0; i < parameterCount; i++) {", "+\t\t\t\ttypeParams[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\t\tdecl.typeParameters = typeParams;", "+\t\t\tdecl.typeParameters = typeParams;", "-\t\t\t\t\tAccDefault);", "+\t\t\t\t\tAccDefault,", "+\t\t\t\t\tfalse);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9a4cae36adfda01f3744472a3f8e39c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "6dc0991802c8a76a225272c60d27e3132dfbe9b2", "commitAfterChange": "9a8dbf2c325d5ae6a7dd8f3876b878a799f4a5c2", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "signatureAfterChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "diff": ["-\t\t\t\tTypeBinding[] parameterTypes = enclosingMethod.parameters;", "-\t\t\t\tint length = parameterTypes.length;", "-\t\t\t\tchar[][] parameterPackageNames = new char[length][];", "-\t\t\t\tchar[][] parameterTypeNames = new char[length][];", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tparameterPackageNames[i] = parameterTypes[i].qualifiedPackageName();", "-\t\t\t\t\tparameterTypeNames[i] = parameterTypes[i].qualifiedSourceName();", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t\tparameterPackageNames,", "-\t\t\t\t\tparameterTypeNames,", "-\t\t\t\t\tenclosingMethod.isConstructor(),", "+\t\t\t\t\tenclosingMethod.sourceStart(),", "+\t\t\t\t\tenclosingMethod.sourceEnd(),"]}], "num": 19527}
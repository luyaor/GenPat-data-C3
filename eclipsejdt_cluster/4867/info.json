{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5c455e097c59d7dc160c3ac94a4a8aa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dcc9eb1bae53ce0e3f0b32918264d01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "644c4d9043a8634631a6c37637807f9484dbb1d4", "commitAfterChange": "fff3d1bb7cd12822df70202db7e6a801aeeb63a2", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  protected TypeBinding findMethodBinding(BlockScope scope)", "signatureAfterChange": "  protected TypeBinding findMethodBinding(BlockScope scope)", "diff": ["-\t/* There are embedded assumptions in the JLS8 type inference scheme that a successful solution of the type equations results in an", "-\t   applicable method. This appears to be a tenuous assumption, at least one not made by the JLS7 engine or the reference compiler and ", "-\t   there are cases where this assumption would appear invalid: See https://bugs.eclipse.org/bugs/show_bug.cgi?id=426537, where we allow ", "-\t   certain compatibility constrains around raw types to be violated. ", "-       ", "-       Here, we filter out such inapplicable methods with raw type usage that may have sneaked past overload resolution and type inference, ", "-       playing the devils advocate, blaming the invocations with raw arguments that should not go blameless. At this time this is in the ", "-       nature of a point fix and is not a general solution which needs to come later (that also includes AE, QAE and ECC)", "-    */", "-\tfinal CompilerOptions compilerOptions = scope.compilerOptions();", "-\tif (compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8 && this.binding instanceof ParameterizedGenericMethodBinding && this.binding.isValidBinding()) {", "-\t\tif (!compilerOptions.postResolutionRawTypeCompatibilityCheck)", "-\t\t\treturn this.binding.returnType;", "-\t\tParameterizedGenericMethodBinding pgmb = (ParameterizedGenericMethodBinding) this.binding;", "-\t\tint length = pgmb.typeArguments == null ? 0 : pgmb.typeArguments.length;", "-\t\tboolean sawRawType = false;", "-\t\tfor (int i = 0;  i < length; i++) {", "-\t\t\t/* Must check compatibility against capture free method. Formal parameters cannot have captures, but our machinery is not up to snuff to", "-\t\t\t   construct a PGMB without captures at the moment - for one thing ITCB does not support uncapture() yet, for another, INTERSECTION_CAST_TYPE", "-\t\t\t   does not appear fully hooked up into isCompatibleWith and isEquivalent to everywhere. At the moment, bail out if we see capture.", "-\t\t\t*/   ", "-\t\t\tif (pgmb.typeArguments[i].isCapture())", "-\t\t\t\treturn this.binding.returnType;", "-\t\t\tif (pgmb.typeArguments[i].isRawType())", "-\t\t\t\tsawRawType = true;", "-\t\t}", "-\t\tif (!sawRawType)", "-\t\t\treturn this.binding.returnType;", "-\t\tlength = this.arguments == null ? 0 : this.arguments.length;", "-\t\tif (length == 0)", "-\t\t\treturn this.binding.returnType;", "-\t\tTypeBinding [] finalArgumentTypes = new TypeBinding[length];", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tTypeBinding finalArgumentType = this.arguments[i].resolvedType;", "-\t\t\tif (finalArgumentType == null || !finalArgumentType.isValidBinding())  // already sided with the devil.", "-\t\t\t\treturn this.binding.returnType;", "-\t\t\tfinalArgumentTypes[i] = finalArgumentType; ", "-\t\t}", "-\t\tif (scope.parameterCompatibilityLevel(this.binding, finalArgumentTypes, false) == Scope.NOT_COMPATIBLE)", "-\t\t\tthis.binding = new ProblemMethodBinding(this.binding.original(), this.binding.selector, finalArgumentTypes, ProblemReasons.NotFound);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6334e9017c1eddd79c05fdd1cad97f3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java", "commitBeforeChange": "8aafce61e7410d4bb8f6ef8997fff5b6f73c246f", "commitAfterChange": "4a0e763ec848dfb4aae74e117447af4a67fb4eec", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic IJavaElement getJavaElement()", "signatureAfterChange": " \tpublic IJavaElement getJavaElement()", "diff": ["+\t\tJavaElement element = getUnresolvedJavaElement();", "+\t\tif (element == null)", "+\t\t\treturn null;", "+\t\treturn element.resolved(this.binding);", "+\t}", "-\t\t\treturn declaringType.getField(getName());"]}], "num": 4867}
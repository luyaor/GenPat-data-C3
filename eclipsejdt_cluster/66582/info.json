{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b489b76ef0e416f1d6b3cdd6cd538c5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99c903c228a1e5c245557f8d646ba4d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "0ee327f784f1f4e34e68a84648fe26304fce751c", "commitAfterChange": "5b5d83d3544b223e577e7fddd59f42874f12eb50", "methodNumberBeforeChange": 166, "methodNumberAfterChange": 166, "signatureBeforeChange": " \tprivate Map secondaryTypesSearching(IJavaProject project, boolean waitForIndexes, IProgressMonitor monitor, final PerProjectInfo projectInfo) throws JavaModelException", "signatureAfterChange": " \tprivate Map secondaryTypesSearching(IJavaProject project, boolean waitForIndexes, IProgressMonitor monitor, final PerProjectInfo projectInfo) throws JavaModelException", "diff": ["-\t\tIterator packages = secondaryTypes.keySet().iterator();", "+\t\tIterator packages = secondaryTypes.values().iterator();", "-\t\t\tString packName = (String) packages.next();", "-\t\t\tHashMap types = (HashMap) secondaryTypes.get(packName);", "-\t\t\tIterator names = types.keySet().iterator();", "+\t\t\tHashMap types = (HashMap) packages.next();", "+\t\t\tIterator names = types.entrySet().iterator();", "-\t\t\t\tString typeName = (String) names.next();", "-\t\t\t\tString path = (String) types.get(typeName);", "+\t\t\t\tMap.Entry entry = (Map.Entry) names.next();", "+\t\t\t\tString typeName = (String) entry.getKey();", "+\t\t\t\tString path = (String) entry.getValue();", "-\t\t\t\tIterator keys = secondaryTypes.keySet().iterator();", "-\t\t\t\twhile (keys.hasNext()) {", "-\t\t\t\t\tString qualifiedName = (String) keys.next();", "-\t\t\t\t\tUtil.verbose(\"\t\t- \"+qualifiedName+'-'+secondaryTypes.get(qualifiedName) ); //$NON-NLS-1$", "+\t\t\t\tIterator entries = secondaryTypes.entrySet().iterator();", "+\t\t\t\twhile (entries.hasNext()) {", "+\t\t\t\t\tMap.Entry entry = (Map.Entry) entries.next();", "+\t\t\t\t\tString qualifiedName = (String) entry.getKey();", "+\t\t\t\t\tUtil.verbose(\"\t\t- \"+qualifiedName+'-'+ entry.getValue()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f63975a921c13869651759eb363489d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "fde095e0f0a4d97a0e65a7c6307c3d16195d07f7", "commitAfterChange": "9ea1cdb7f6499dc7c1092eeaa0da392a32816565", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 69, "signatureBeforeChange": " public void store(OutputStream output, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " @SuppressWarnings(\"unchecked\") public void store(OutputStream output, IProgressMonitor monitor) throws JavaModelException", "diff": ["+@SuppressWarnings(\"unchecked\")", "-\t\tHashtable hashtable = new Hashtable();", "-\t\tHashtable hashtable2 = new Hashtable();", "+\t\tHashtable<IType, Integer> hashtable = new Hashtable<>();", "+\t\tHashtable<Integer, IType> hashtable2 = new Hashtable<>();", "-\t\t\tMap.Entry entry = (Map.Entry) types[i];", "-\t\t\tObject t = entry.getKey();", "+\t\t\tMap.Entry<IType, IType> entry = (Map.Entry<IType, IType>) types[i];", "+\t\t\tIType t = entry.getKey();", "-\t\t\tObject superClass = entry.getValue();", "+\t\t\tIType superClass = entry.getValue();", "-\t\ttypes = this.typeToSuperInterfaces.entrySet().toArray();", "-\t\tfor (int i = 0; i < types.length; i++) {", "-\t\t\tMap.Entry entry = (Map.Entry) types[i];", "-\t\t\tObject t = entry.getKey();", "+\t\tObject[] intfs = this.typeToSuperInterfaces.entrySet().toArray();", "+\t\tfor (int i = 0; i < intfs.length; i++) {", "+\t\t\tMap.Entry<IType, IType[]> entry = (Map.Entry<IType, IType[]>) intfs[i];", "+\t\t\tIType t = entry.getKey();", "-\t\t\tObject[] sp = (Object[]) entry.getValue();", "+\t\t\tIType[] sp = entry.getValue();", "-\t\t\t\t\tObject superInterface = sp[j];", "+\t\t\t\t\tIType superInterface = sp[j];", "-\t\t\toutput.write(((String)this.missingTypes.get(i)).getBytes());", "+\t\t\toutput.write((this.missingTypes.get(i)).getBytes());", "-\t\t\tIType t = (IType)hashtable2.get(new Integer(i));", "+\t\t\tIType t = hashtable2.get(new Integer(i));", "-\t\t\toutput.write(flagsToBytes((Integer)this.typeFlags.get(t)));", "+\t\t\toutput.write(flagsToBytes(this.typeFlags.get(t)));", "-\t\t\tMap.Entry entry = (Map.Entry) types[i];", "-\t\t\tIJavaElement key = (IJavaElement) entry.getKey();", "-\t\t\tIJavaElement value = (IJavaElement) entry.getValue();", "+\t\t\tMap.Entry<IType, IType> entry = (Map.Entry<IType, IType>) types[i];", "+\t\t\tIJavaElement key = entry.getKey();", "+\t\t\tIJavaElement value = entry.getValue();", "-\t\t\toutput.write(((Integer)hashtable.get(key)).toString().getBytes());", "+\t\t\toutput.write(hashtable.get(key).toString().getBytes());", "-\t\t\toutput.write(((Integer)hashtable.get(value)).toString().getBytes());", "+\t\t\toutput.write(hashtable.get(value).toString().getBytes());", "-\t\ttypes = this.typeToSuperInterfaces.entrySet().toArray();", "-\t\tfor (int i = 0; i < types.length; i++) {", "-\t\t\tMap.Entry entry = (Map.Entry) types[i];", "-\t\t\tIJavaElement key = (IJavaElement) entry.getKey();", "-\t\t\tIJavaElement[] values = (IJavaElement[]) entry.getValue();", "+\t\tintfs = this.typeToSuperInterfaces.entrySet().toArray();", "+\t\tfor (int i = 0; i < intfs.length; i++) {", "+\t\t\tMap.Entry<IType, IType[]> entry = (Map.Entry<IType, IType[]>) intfs[i];", "+\t\t\tIJavaElement key = entry.getKey();", "+\t\t\tIJavaElement[] values = entry.getValue();", "-\t\t\t\toutput.write(((Integer)hashtable.get(key)).toString().getBytes());", "+\t\t\t\toutput.write(hashtable.get(key).toString().getBytes());", "-\t\t\t\t\toutput.write(((Integer)hashtable.get(value)).toString().getBytes());", "+\t\t\t\t\toutput.write(hashtable.get(value).toString().getBytes());"]}], "num": 66582}
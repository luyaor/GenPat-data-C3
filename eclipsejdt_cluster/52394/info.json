{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32aac17eea9818ed1e9376daddf32343", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9194c824bbe1989aee650a96b32fbd21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/TypeNameMatchRequestorWrapper.java", "commitBeforeChange": "c93b7fc02953335388042ab5bd4ec34f70464821", "commitAfterChange": "c9213ae595dd32af0d2b3bd7c31b733e8b1d0dd1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path, AccessRestriction access)", "signatureAfterChange": " public void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path, AccessRestriction access)", "diff": ["-\t\tif (this.scope instanceof JavaSearchScope) {", "-\t\t\tString projectPath = ((JavaSearchScope)this.scope).projectPathFor(path);", "-\t\t\tif (projectPath == null) {", "-\t\t\t\tif (this.workingCopies == null) {", "-\t\t\t\t\t// Internal resource, project path won't be store as it can be computed from path", "-\t\t\t\t\tTypeNameMatch match = new TypeNameMatch(modifiers, packageName, simpleTypeName, enclosingTypeNames, path);", "-\t\t\t\t\tthis.requestor.acceptTypeNameMatch(match);", "-\t\t\t\t} else {", "-\t\t\t\t\t// Internal working copy, project path won't be store as it can be computed from path", "-\t\t\t\t\tWorkingCopiesTypeNameMatch match = new WorkingCopiesTypeNameMatch(modifiers, packageName, simpleTypeName, enclosingTypeNames, path, this.workingCopies);", "-\t\t\t\t\tthis.requestor.acceptTypeNameMatch(match);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\t// External resource, store specific project path", "-\t\t\t\tExternalTypeNameMatch match = new ExternalTypeNameMatch(modifiers, packageName, simpleTypeName, enclosingTypeNames, path, projectPath);", "-\t\t\t\tthis.requestor.acceptTypeNameMatch(match);", "+//\t\tif (this.handleFactory == null) {", "+//\t\t\tthis.handleFactory = new HandleFactory();", "+//\t\t}", "+//\t\tOpenable openable = this.handleFactory.createOpenable(path, this.scope);", "+//\t\tif (openable != null) {", "+//\t\t\ttry {", "+//\t\t\t\tIType type = null;", "+//\t\t\t\tswitch (openable.getElementType()) {", "+//\t\t\t\t\tcase IJavaElement.CLASS_FILE:", "+//\t\t\t\t\t\ttype = ((IClassFile)openable).getType();", "+//\t\t\t\t\t\tbreak;", "+//\t\t\t\t\tcase IJavaElement.COMPILATION_UNIT:", "+//\t\t\t\t\t\tint length = enclosingTypeNames == null ? 0 : enclosingTypeNames.length;", "+//\t\t\t\t\t\tif (length == 0) {", "+//\t\t\t\t\t\t\ttype = ((ICompilationUnit)openable).getType(new String(simpleTypeName));", "+//\t\t\t\t\t\t} else {", "+//\t\t\t\t\t\t\ttype = ((ICompilationUnit)openable).getType(new String(enclosingTypeNames[0]));", "+//\t\t\t\t\t\t\tfor (int i=1; i<length; i++) {", "+//\t\t\t\t\t\t\t\ttype = type.getType(new String(enclosingTypeNames[i]));", "+//\t\t\t\t\t\t\t}", "+//\t\t\t\t\t\t\ttype = type.getType(new String(simpleTypeName));", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t\tbreak;", "+//\t\t\t\t}", "+//\t\t\t\tif (type != null) {", "+//\t\t\t\t\tthis.requestor.acceptTypeNameMatch(new TypeNameMatch(type, modifiers));", "+//\t\t\t\t}", "+//\t\t\t} catch (JavaModelException e) {", "+//\t\t\t\t// skip", "+//\t\t\t}", "+//\t\t}", "+\t\ttry {", "+\t\t\tint separatorIndex= path.indexOf(IJavaSearchScope.JAR_FILE_ENTRY_SEPARATOR);", "+\t\t\tIType type = separatorIndex == -1", "+\t\t\t\t? createTypeFromPath(path, new String(simpleTypeName), enclosingTypeNames)", "+\t\t\t\t: createTypeFromJar(path, separatorIndex);", "+\t\t\tif (type != null) {", "+\t\t\t\tthis.requestor.acceptTypeNameMatch(new TypeNameMatch(type, modifiers));", "+\t\t} catch (JavaModelException e) {", "+\t\t\t// skip"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dec772efe2ccfc672267f35e19b4cfc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/TypeNameMatchRequestorWrapper.java", "commitBeforeChange": "8a1e311af393ccdbbaab4d3836c703deb332d624", "commitAfterChange": "c0735951a055fba3f0be3b86f55a77d744b6fbe2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path, AccessRestriction access)", "signatureAfterChange": " public void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path, AccessRestriction access)", "diff": ["-//\t\tif (this.handleFactory == null) {", "-//\t\t\tthis.handleFactory = new HandleFactory();", "-//\t\t}", "-//\t\tOpenable openable = this.handleFactory.createOpenable(path, this.scope);", "-//\t\tif (openable != null) {", "-//\t\t\ttry {", "-//\t\t\t\tIType type = null;", "-//\t\t\t\tswitch (openable.getElementType()) {", "-//\t\t\t\t\tcase IJavaElement.CLASS_FILE:", "-//\t\t\t\t\t\ttype = ((IClassFile)openable).getType();", "-//\t\t\t\t\t\tbreak;", "-//\t\t\t\t\tcase IJavaElement.COMPILATION_UNIT:", "-//\t\t\t\t\t\tint length = enclosingTypeNames == null ? 0 : enclosingTypeNames.length;", "-//\t\t\t\t\t\tif (length == 0) {", "-//\t\t\t\t\t\t\ttype = ((ICompilationUnit)openable).getType(new String(simpleTypeName));", "-//\t\t\t\t\t\t} else {", "-//\t\t\t\t\t\t\ttype = ((ICompilationUnit)openable).getType(new String(enclosingTypeNames[0]));", "-//\t\t\t\t\t\t\tfor (int i=1; i<length; i++) {", "-//\t\t\t\t\t\t\t\ttype = type.getType(new String(enclosingTypeNames[i]));", "-//\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t\ttype = type.getType(new String(simpleTypeName));", "-//\t\t\t\t\t\t}", "-//\t\t\t\t\t\tbreak;", "-//\t\t\t\t}", "-//\t\t\t\tif (type != null) {", "-//\t\t\t\t\tthis.requestor.acceptTypeNameMatch(new TypeNameMatch(type, modifiers));", "-//\t\t\t\t}", "-//\t\t\t} catch (JavaModelException e) {", "-//\t\t\t\t// skip", "-//\t\t\t}", "-//\t\t}", "-\t\t\t\tthis.requestor.acceptTypeNameMatch(new TypeNameMatch(type, modifiers));", "+\t\t\t\tthis.requestor.acceptTypeNameMatch(new JavaSearchTypeNameMatch(type, modifiers));"]}], "num": 52394}
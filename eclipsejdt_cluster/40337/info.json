{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "150192031dc7d5f8f282142c798f842d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "285bab0998b08d0eb45cf3fa16afc247", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingOpenable.java", "commitBeforeChange": "be89ab2e0ec1e398e3b0603a492d22c9815a6eef", "commitAfterChange": "0460b2dc122bab8976f113fd5dfefdda9aaa1649", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r private void buildTypeBindings(final char[] source)", "signatureAfterChange": "\r private void buildTypeBindings(final char[] source)", "diff": ["-\t\t// source unit\r", "-\t\tICompilationUnit sourceUnit = new ICompilationUnit() {\r", "-\t\t\tpublic char[] getContents() {\r", "-\t\t\t\treturn source;\r", "-\t\t\t}\r", "-\t\t\tpublic char[] getFileName() {\r", "-\t\t\t\treturn EMPTY_FILE_NAME; // not used\r", "-\t\t\t}\r", "-\t\t\tpublic char[] getMainTypeName() {\r", "-\t\t\t\treturn null; // don't need to check if main type name == compilation unit name\r", "-\t\t\t}\r", "-\t\t};\r", "-\t\t\r", "-\t\tCompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0);  \r", "-\t\tthis.parsedUnit = this.locator.parser.dietParse(sourceUnit, compilationResult);\r", "-\r", "+\t\tthis.parsedUnit = this.locator.dietParse(source);\r", "+\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9e7beefa0583d5da2c52c908bb70c22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJarFileToIndex.java", "commitBeforeChange": "70b32514588b091b133b82607c10c8c78d5b8fe3", "commitAfterChange": "aaa63e79319475935e2167f567ed10fa3d10e895", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-\t\t\t\t\t\t\tJarFileEntryDocument entryDocument = new JarFileEntryDocument(ze, null, zipFilePath);", "-\t\t\t\t\t\t\tindexedFileNames.put(entryDocument.getName(), EXISTS);", "+\t\t\t\t\t\t\tJavaSearchDocument entryDocument = new JavaSearchDocument(ze, zipFilePath, null, null);", "+\t\t\t\t\t\t\tindexedFileNames.put(entryDocument.getPath(), EXISTS);", "+\t\t\t\tSearchParticipant participant = SearchEngine.getDefaultSearchParticipant();", "-\t\t\t\t\t\tSearchParticipant participant = SearchEngine.getDefaultSearchParticipant();", "-\t\t\t\t\t\tJarFileEntryDocument entryDocument = new JarFileEntryDocument(ze, null, zipFilePath);", "-\t\t\t\t\t\tSearchDocument document = new JavaSearchDocument(entryDocument.getName(), participant) {", "-\t\t\t\t\t\t\tpublic byte[] getByteContents() {", "-\t\t\t\t\t\t\t\treturn classFileBytes;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tpublic String toString() {", "-\t\t\t\t\t\t\t\treturn \"JarEntryDocument for \" + getPath(); //$NON-NLS-1$", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t};", "-\t\t\t\t\t\tthis.manager.indexDocument(document, participant, index);", "+\t\t\t\t\t\tJavaSearchDocument entryDocument = new JavaSearchDocument(ze, zipFilePath, classFileBytes, participant);", "+\t\t\t\t\t\tthis.manager.indexDocument(entryDocument, participant, index);"]}], "num": 40337}
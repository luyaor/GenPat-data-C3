{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1021cfd7a99759b97cb68d43e5a774fe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37d8997103a62d3889380f7e7afceb25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void analyseArguments(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, MethodBinding methodBinding, Expression[] arguments)", "signatureAfterChange": " protected void analyseArguments(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, MethodBinding methodBinding, Expression[] arguments)", "diff": ["+\t\tTypeBinding varArgsType = null;", "+\t\tboolean passThrough = false;", "-\t\t\tboolean passThrough = false;", "-\t\t\t\t\tTypeBinding varArgsType = methodBinding.parameters[varArgPos];", "+\t\t\t\t\tvarArgsType = methodBinding.parameters[varArgPos];", "-\t\t\t\tExpression argument = arguments[i];", "-\t\t\t\t// prefer check based on type annotations:", "-\t\t\t\tint severity = findNullTypeAnnotationMismatch(expectedType, argument.resolvedType);", "-\t\t\t\tif (severity > 0) {", "-\t\t\t\t\t// immediate reporting:", "-\t\t\t\t\tcurrentScope.problemReporter().nullityMismatchingTypeAnnotation(argument, argument.resolvedType, expectedType, severity==1, currentScope.environment());", "-\t\t\t\t\t// next check flow-based null status against null JDK15-style annotations:", "-\t\t\t\t} else if (hasJDK15NullAnnotations && methodBinding.parameterNonNullness[i] == Boolean.TRUE) {", "-\t\t\t\t\tint nullStatus = argument.nullStatus(flowInfo, flowContext); // slight loss of precision: should also use the null info from the receiver.", "-\t\t\t\t\tif (nullStatus != FlowInfo.NON_NULL) // if required non-null is not provided", "-\t\t\t\t\t\tflowContext.recordNullityMismatch(currentScope, argument, argument.resolvedType, expectedType, nullStatus);", "+\t\t\t\tanalyseOneArgument18(currentScope, flowContext, flowInfo, expectedType, arguments[i]);", "+\t\t\t}", "+\t\t\tif (!passThrough && varArgsType instanceof ArrayBinding) {", "+\t\t\t\tTypeBinding expectedType = ((ArrayBinding) varArgsType).elementsType();", "+\t\t\t\tfor (int i = numParamsToCheck; i < arguments.length; i++) {", "+\t\t\t\t\tanalyseOneArgument18(currentScope, flowContext, flowInfo, expectedType, arguments[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8497ad57dac1c13d5ed4affb65d04a8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "c67d112c20f07c2dcda11714ef23687a9781a753", "commitAfterChange": "af79dfe4ab6f88841082d7727b71d3b65b4f7778", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 8, "signatureBeforeChange": " void analyseOneArgument18(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, \t\tTypeBinding expectedType, Expression argument)", "signatureAfterChange": " void analyseOneArgument18(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, \t\tTypeBinding expectedType, Expression argument)", "diff": ["-\tint nullStatus = argument.nullStatus(flowInfo, flowContext); // slight loss of precision: should also use the null info from the receiver.", "-\tint severity = findNullTypeAnnotationMismatch(expectedType, argument.resolvedType, nullStatus);", "-\tswitch (severity) {", "-\t\tcase 2:", "-\t\t\t// immediate reporting:", "-\t\t\tcurrentScope.problemReporter().nullityMismatchingTypeAnnotation(argument, argument.resolvedType, expectedType, severity);", "-\t\t\treturn;", "-\t\tcase 1:", "-\t\t\tflowContext.recordNullityMismatch(currentScope, argument, argument.resolvedType, expectedType, nullStatus);", "-\t\t\treturn;", "-\t}", "-\tif ((expectedType.tagBits & TagBits.AnnotationNonNull) != 0 && nullStatus != FlowInfo.NON_NULL) {", "+\tint nullStatus = argument.nullStatus(flowInfo, flowContext);", "+\tNullAnnotationStatus annotationStatus = findNullTypeAnnotationMismatch(expectedType, argument.resolvedType, nullStatus);", "+\tif (annotationStatus.isDefiniteMismatch()) {", "+\t\t// immediate reporting:", "+\t\tcurrentScope.problemReporter().nullityMismatchingTypeAnnotation(argument, argument.resolvedType, expectedType, annotationStatus);", "+\t} else if (annotationStatus.isUnchecked()) {"]}], "num": 65011}
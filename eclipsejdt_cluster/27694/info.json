{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f5a9ce544efa30569feba6c1b30491a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77780d879e4053b04e2a6cb8e79c8dcd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "ca349eb1728a54f5c4569863d8f64340b099c4ce", "commitAfterChange": "2575bc1675526f9cf1bae80cf41843bf7eedd3c4", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tpublic static ParameterizedGenericMethodBinding checkForContraditions( \t\t\tfinal ParameterizedGenericMethodBinding method, final InvocationSite invocationSite, final Scope scope)", "signatureAfterChange": " \tpublic static MethodBinding checkForContraditions( \t\t\tfinal MethodBinding method, final InvocationSite invocationSite, final Scope scope)", "diff": ["-\tpublic static ParameterizedGenericMethodBinding checkForContraditions(", "-\t\t\tfinal ParameterizedGenericMethodBinding method, final InvocationSite invocationSite, final Scope scope) {", "+\t */", "+\tpublic static MethodBinding checkForContraditions(", "+\t\t\tfinal MethodBinding method, final InvocationSite invocationSite, final Scope scope) {", "+\t\t\tif (scope == null)", "+\t\t\t\treturn new ProblemMethodBinding(method, method.selector, method.parameters, ProblemReasons.ContradictoryNullAnnotations);", "+\t\t\t\tif (scope == null)", "+\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, method.parameters, ProblemReasons.ContradictoryNullAnnotations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef540c373db419a22e0eb72691fb99dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "8b61d97704a2b67ed3d29404b8692bdbf30b8b5d", "commitAfterChange": "7fa6d6b6f60d0d2345e743063241c3eb3452b00f", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "  public SearchMatch newDeclarationMatch( \t\tIJavaElement element, \t\tint accuracy, \t\tint offset,   \t\tint length, \t\tSearchParticipant participant,  \t\tIResource resource)", "signatureAfterChange": "  public SearchMatch newDeclarationMatch( \t\tIJavaElement element, \t\tBinding binding, \t\tint accuracy, \t\tint offset,   \t\tint length, \t\tSearchParticipant participant,  \t\tIResource resource)", "diff": ["+\t\tBinding binding,", "-\t\t\treturn new TypeDeclarationMatch(element, accuracy, offset, length, participant, resource);", "+\t\t\treturn new TypeDeclarationMatch(binding == null ? element : ((JavaElement) element).resolved(binding), accuracy, offset, length, participant, resource);", "-\t\t\treturn new FieldDeclarationMatch(element, accuracy, offset, length, participant, resource);", "+\t\t\treturn new FieldDeclarationMatch(binding == null ? element : ((JavaElement) element).resolved(binding), accuracy, offset, length, participant, resource);", "-\t\t\treturn new MethodDeclarationMatch(element, accuracy, offset, length, participant, resource);", "+\t\t\treturn new MethodDeclarationMatch(binding == null ? element : ((JavaElement) element).resolved(binding), accuracy, offset, length, participant, resource);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f637de9eb7fc4e15f9972fcb1c8ae556", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "1a94a1e6652f1701b8c360d56d755e5438b79c26", "commitAfterChange": "3b002cab97d2ee77b59be67feaf705de255bc1fb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " static Classpath getClasspath(String classpathName, String encoding, boolean isSourceOnly, AccessRuleSet accessRuleSet)", "signatureAfterChange": " static Classpath getClasspath(String classpathName, String encoding,  \t\tboolean isSourceOnly, AccessRuleSet accessRuleSet,  \t\tString destinationPath)", "diff": ["-static Classpath getClasspath(String classpathName, String encoding, boolean isSourceOnly, AccessRuleSet accessRuleSet) {", "+static Classpath getClasspath(String classpathName, String encoding, ", "+\t\tboolean isSourceOnly, AccessRuleSet accessRuleSet, ", "+\t\tString destinationPath) {", "-\t\t\tresult = new ClasspathDirectory(file, encoding, isSourceOnly ? ClasspathLocation.SOURCE : ClasspathLocation.SOURCE | ClasspathLocation.BINARY, accessRuleSet);", "+\t\t\tresult = new ClasspathDirectory(file, encoding, ", "+\t\t\t\t\tisSourceOnly ? ClasspathLocation.SOURCE : ", "+\t\t\t\t\t\tClasspathLocation.SOURCE | ClasspathLocation.BINARY, ", "+\t\t\t\t\taccessRuleSet,", "+\t\t\t\t\tdestinationPath == null || destinationPath == Main.NONE ?", "+\t\t\t\t\t\tdestinationPath : // keep == comparison valid", "+\t\t\t\t\t\tconvertPathSeparators(destinationPath));", "-\t} else {", "+\t} else { ", "-\t\t\t\tresult = new ClasspathSourceJar(file, true, accessRuleSet, encoding);\t\t\t", "+\t\t\t\tresult = new ClasspathSourceJar(file, true, accessRuleSet, ", "+\t\t\t\t\tencoding, ", "+\t\t\t\t\tdestinationPath == null || destinationPath == Main.NONE ?", "+\t\t\t\t\t\tdestinationPath : // keep == comparison valid", "+\t\t\t\t\t\tconvertPathSeparators(destinationPath));", "-\t\t\t\tresult = new ClasspathJar(file, true, accessRuleSet);", "+\t\t\t\tif (destinationPath != null) {", "+\t\t\t\t\tresult = null; // [-d dir] not allowed for binaries only jar", "+\t\t\t\t} else {", "+\t\t\t\t\tresult = new ClasspathJar(file, true, accessRuleSet, null);", "+\t\t\t\t}"]}], "num": 27694}
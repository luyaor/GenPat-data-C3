{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75813c5a6306807bb04c37ab9a49a909", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d6cb697516fb0a4a26d3fc9eb34a6d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "319e132378b5c1c0aece8d1d96f3f91cd79e4d01", "commitAfterChange": "55099d2c60113e1ad2e8ab8558e8720dd555fab8", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t\tif ((annotationType.tagBits & TagBits.AnnotationTargetMASK) == TagBits.AnnotationForTypeUse) {", "-\t\t\t\t\t\t\tif (variable.type != null) {", "+\t\t\t\t\t\tif (scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_8) {", "+\t\t\t\t\t\t\tvariable.tagBits |= tagBits;", "+\t\t\t\t\t\t\tif ((variable.tagBits & TAGBITS_NULLABLE_OR_NONNULL) == TAGBITS_NULLABLE_OR_NONNULL) {", "+\t\t\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(this);", "+\t\t\t\t\t\t\t\tvariable.tagBits &= ~TAGBITS_NULLABLE_OR_NONNULL; // avoid secondary problems", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (variable.type != null) {", "+\t\t\t\t\t\t\t// bits not relating to null analysis go into the variable:", "+\t\t\t\t\t\t\tvariable.tagBits |= tagBits & ~TagBits.AnnotationNullMASK;", "+\t\t\t\t\t\t\t// null bits go into the type:", "+\t\t\t\t\t\t\tlong nullTagBits = tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\t\t\tif (nullTagBits != 0) {", "-\t\t\t\t\t\t\t\t\tlong nullTagBits = tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\t\t\t\t\tvariable.type = scope.environment().createAnnotatedType(variable.type, nullTagBits);", "-\t\t\t\t\t\t\t\t\tif ((variable.type.tagBits & TAGBITS_NULLABLE_OR_NONNULL) == TAGBITS_NULLABLE_OR_NONNULL) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(this);", "-\t\t\t\t\t\t\t\t\t\tvariable.type.tagBits &= ~TAGBITS_NULLABLE_OR_NONNULL; // avoid secondary problems", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tif (scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_8) {", "-\t\t\t\t\t\t\t\tvariable.tagBits |= tagBits;", "-\t\t\t\t\t\t\t\tif ((variable.tagBits & TAGBITS_NULLABLE_OR_NONNULL) == TAGBITS_NULLABLE_OR_NONNULL) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(this);", "-\t\t\t\t\t\t\t\t\tvariable.tagBits &= ~TAGBITS_NULLABLE_OR_NONNULL; // avoid secondary problems", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else if (variable.type != null) {", "-\t\t\t\t\t\t\t\t// bits not relating to null analysis go into the variable:", "-\t\t\t\t\t\t\t\tvariable.tagBits |= tagBits & ~TagBits.AnnotationNullMASK;", "-\t\t\t\t\t\t\t\t// null bits go into the type:", "-\t\t\t\t\t\t\t\tlong nullTagBits = tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\t\t\t\tif (nullTagBits != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0e79917eaad71c3e6e8ef9b8c57c5e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "da50a11f1737dbee3925e1da64ad7f9cbaff2e84", "commitAfterChange": "99342a278896e2f8caf142911ce817f7cc97d106", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public void bindArguments()", "signatureAfterChange": "\r public void bindArguments()", "diff": ["-\t\t\tArgument argument = arguments[i];\r", "-\t\t\tif (argument.type != null) argument.type.binding = binding.parameters[i]; // record the resolved type into the type reference\r", "-\t\t\tint modifierFlag = argument.modifiers;\r", "-\t\t\tif ((argument.binding = scope.duplicateName(argument.name)) != null) {\r", "-\t\t\t\t//the name already exist....may carry on with the first binding ....\r", "-\t\t\t\tscope.problemReporter().redefineArgument(argument);\r", "-\t\t\t} else {\r", "-\t\t\t\tscope.addLocalVariable(argument.binding = new LocalVariableBinding(argument.name, binding.parameters[i], modifierFlag, true)); //true stand for argument instead of just local\r", "-\t\t\t\tif (isTypeUseDeprecated(binding.parameters[i], scope))\r", "-\t\t\t\t\tscope.problemReporter().deprecatedType(binding.parameters[i], argument.type);\r", "-\t\t\t\targument.binding.declaration = argument;\r", "-\t\t\t\targument.binding.used = binding.isAbstract() | binding.isNative(); // by default arguments in abstract/native methods are considered to be used (no complaint is expected)\r", "-\t\t\t}\r", "+\t\t\targuments[i].bind(scope, binding.parameters[i], binding.isAbstract() | binding.isNative());// by default arguments in abstract/native methods are considered to be used (no complaint is expected)\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e296eda27f6df68f78800f14dfcb9348", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "93e5ff3a6545305db70cc209a35909ba11267a03", "commitAfterChange": "68db0a50107f072688f40bcdb70cc1c2cadc3119", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t\tif (scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_8) {", "-\t\t\t\t\t\t\tvariable.tagBits |= tagBits;", "-\t\t\t\t\t\t\tif ((variable.tagBits & TagBits.AnnotationNullMASK) == TagBits.AnnotationNullMASK) {", "-\t\t\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(this);", "-\t\t\t\t\t\t\t\tvariable.tagBits &= ~TagBits.AnnotationNullMASK; // avoid secondary problems", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else if (variable.type != null) {", "-\t\t\t\t\t\t\t// bits not relating to null analysis go into the variable:", "-\t\t\t\t\t\t\tvariable.tagBits |= tagBits & ~TagBits.AnnotationNullMASK;", "-\t\t\t\t\t\t\t// null bits go into the type:", "-\t\t\t\t\t\t\tlong nullTagBits = tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\t\t\tif (nullTagBits != 0) {", "-\t\t\t\t\t\t\t\tif (variable.type.isBaseType()) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().illegalAnnotationForBaseType(this, variable.type);", "-\t\t\t\t\t\t\t\t} else if (variable.declaration.type instanceof QualifiedTypeReference) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().nullAnnotationUnsupportedLocation(this);", "-\t\t\t\t\t\t\t\t} else if (nullTagBits != (variable.type.tagBits & TagBits.AnnotationNullMASK)) {", "-\t\t\t\t\t\t\t\t\tif (((variable.type.tagBits & TagBits.AnnotationNullMASK) | nullTagBits ) == TagBits.AnnotationNullMASK) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(this);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tvariable.tagBits |= tagBits;", "+\t\t\t\t\t\tif ((variable.tagBits & TagBits.AnnotationNullMASK) == TagBits.AnnotationNullMASK) {", "+\t\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(this);", "+\t\t\t\t\t\t\tvariable.tagBits &= ~TagBits.AnnotationNullMASK; // avoid secondary problems"]}], "num": 24296}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "90bd6ef4955b5b39eb8082d963e9091a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22000dd7768149eb110465d139692778", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\t\t\t\tif (expressionType instanceof ReferenceBinding) {", "-\t\t\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\t\t\tif (match == null) {", "-\t\t\t\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, null, true);", "+\t\t\t\t\t\tTypeBinding match = expressionType.findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\tif (match == null) {", "+\t\t\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t\tif (castType instanceof ReferenceBinding) {", "-\t\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\tif (match != null) {", "-\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\tTypeBinding match = expressionType.findSuperTypeWithSameErasure(castType);", "+\t\t\t\tif (match != null) {", "+\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\tif (castType instanceof ReferenceBinding) {", "-\t\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\tif (match != null) {", "-\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\tmatch = expressionType.findSuperTypeWithSameErasure(castType);", "+\t\t\t\tif (match != null) {", "+\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\t\tmatch = expressionType.findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeWithSameErasure(interfaceType);", "+\t\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(interfaceType);", "-\t\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeWithSameErasure(expressionType);", "+\t\t\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(expressionType);", "-\t\t\t\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\t\tmatch = expressionType.findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeWithSameErasure(expressionType);", "+\t\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(expressionType);", "-\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)expressionType).findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\t\t\tmatch = expressionType.findSuperTypeWithSameErasure(castType);", "-\t\t\t\t\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeWithSameErasure(expressionType);", "+\t\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(expressionType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2577776944ceac00124fdb962b82a9aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "6acdb4510909317e02bb4ba566a6d0b5f09916da", "commitAfterChange": "9b7b19bdcdbcea831580c60277f290356f5e2da7", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 123, "signatureBeforeChange": " protected void validateOptions(boolean didSpecifyCompliance)", "signatureAfterChange": " protected void validateOptions(boolean didSpecifyCompliance)", "diff": ["-\tfinal Object sourceVersion = this.options.get(CompilerOptions.OPTION_Source);", "-\tfinal Object compliance = this.options.get(CompilerOptions.OPTION_Compliance);", "+\tfinal String sourceVersion = this.options.get(CompilerOptions.OPTION_Source);", "+\tfinal String compliance = this.options.get(CompilerOptions.OPTION_Compliance);", "-\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_8)); //$NON-NLS-1$", "+\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_8)); //$NON-NLS-1$", "-\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_7)); //$NON-NLS-1$", "+\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_7)); //$NON-NLS-1$", "-\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "+\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "-\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "+\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "-\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", (String)this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "+\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForSource\", this.options.get(CompilerOptions.OPTION_Compliance), CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "-\t\tfinal Object targetVersion = this.options.get(CompilerOptions.OPTION_TargetPlatform);", "+\t\tfinal String targetVersion = this.options.get(CompilerOptions.OPTION_TargetPlatform);", "-\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForGenericSource\", (String) targetVersion, (String) sourceVersion)); //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForGenericSource\", targetVersion, sourceVersion)); //$NON-NLS-1$", "-\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleSourceForCldcTarget\", (String) targetVersion, (String) sourceVersion)); //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleSourceForCldcTarget\", targetVersion, sourceVersion)); //$NON-NLS-1$", "-\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForCldcTarget\", (String) targetVersion, (String) sourceVersion)); //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForCldcTarget\", targetVersion, sourceVersion)); //$NON-NLS-1$", "-\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", (String) targetVersion, CompilerOptions.VERSION_1_8)); //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", targetVersion, CompilerOptions.VERSION_1_8)); //$NON-NLS-1$", "-\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", (String) targetVersion, CompilerOptions.VERSION_1_7)); //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", targetVersion, CompilerOptions.VERSION_1_7)); //$NON-NLS-1$", "-\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", (String) targetVersion, CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", targetVersion, CompilerOptions.VERSION_1_6)); //$NON-NLS-1$", "-\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", (String) targetVersion, CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", targetVersion, CompilerOptions.VERSION_1_5)); //$NON-NLS-1$", "-\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", (String) targetVersion, CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleTargetForSource\", targetVersion, CompilerOptions.VERSION_1_4)); //$NON-NLS-1$", "-\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForTarget\", (String)this.options.get(CompilerOptions.OPTION_Compliance), (String) targetVersion)); //$NON-NLS-1$", "+\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.incompatibleComplianceForTarget\", this.options.get(CompilerOptions.OPTION_Compliance), targetVersion)); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de60b56c6fd7c6ae056fa7877b2e37b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "\r protected void traverseDelta(IResourceDelta delta, Openable parentElement)", "signatureAfterChange": "\r protected void traverseDelta(IResourceDelta delta, Openable parentElement)", "diff": ["-\t\t\t\t\tswitch(res.getType()) {\r", "-\t\t\t\t\t\tcase IResource.FILE :\r", "-\t\t\t\t\t\tcase IResource.FOLDER:\r", "-\t\t\t\t\t\t\tIProject fileProject = delta.getResource().getProject();\r", "-\t\t\t\t\t\t\tIJavaProject project = (IJavaProject) JavaCore.create(fileProject);\r", "-\t\t\t\t\t\t\ttry {\r", "-\t\t\t\t\t\t\t\tIPackageFragmentRoot pkgRoot;\r", "-\t\t\t\t\t\t\t\tif (parentElement != null \r", "-\t\t\t\t\t\t\t\t\t&& ((pkgRoot = parentElement.getPackageFragmentRoot()) != null)\r", "-\t\t\t\t\t\t\t\t\t&& !pkgRoot.exists()) {\r", "-\t\t\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "-\t\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t} catch(JavaModelException e) {\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tPackageFragmentRoot pkgRoot;\r", "+\t\t\t\t\tif (res.getType() == IResource.FILE \r", "+\t\t\t\t\t\t&& parentElement != null \r", "+\t\t\t\t\t\t&& !parentElement.equals(element.getParent())\r", "+\t\t\t\t\t\t&& ((pkgRoot = element.getPackageFragmentRoot()) == null || !isOnClasspath(pkgRoot))){\r", "+\t\t\t\t\t\ttry { // fake compilation/class file scenario (see JavaCore.createCompilationUnitFrom & createClassFileFrom\r", "+\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t} catch(JavaModelException e) {\r", "+\t\t\t\t\t\t}\r", "-\t\t\t\t\tswitch(res.getType()) {\r", "-\t\t\t\t\t\tcase IResource.FILE :\r", "-\t\t\t\t\t\tcase IResource.FOLDER:\r", "-\t\t\t\t\t\t\tIProject fileProject = delta.getResource().getProject();\r", "-\t\t\t\t\t\t\tIJavaProject project = (IJavaProject) JavaCore.create(fileProject);\r", "-\t\t\t\t\t\t\ttry {\r", "-\t\t\t\t\t\t\t\tIPackageFragmentRoot pkgRoot;\r", "-\t\t\t\t\t\t\t\tif (parentElement != null \r", "-\t\t\t\t\t\t\t\t\t&& ((pkgRoot = parentElement.getPackageFragmentRoot()) != null)\r", "-\t\t\t\t\t\t\t\t\t&& !pkgRoot.exists()) {\r", "-\t\t\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "-\t\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t} catch(JavaModelException e) {\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tif (res.getType() == IResource.FILE \r", "+\t\t\t\t\t\t&& parentElement != null \r", "+\t\t\t\t\t\t&& !parentElement.equals(element.getParent())\r", "+\t\t\t\t\t\t&& ((pkgRoot = element.getPackageFragmentRoot()) == null || !isOnClasspath(pkgRoot))){\r", "+\t\t\t\t\t\ttry { // fake compilation/class file scenario (see JavaCore.createCompilationUnitFrom & createClassFileFrom\r", "+\t\t\t\t\t\t\tnonJavaResourcesChanged(parentElement, delta);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t} catch(JavaModelException e) {\r", "+\t\t\t\t\t\t}\r"]}], "num": 7095}
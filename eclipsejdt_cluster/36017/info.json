{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ccc84ea604abecf52d4a95248d219c5b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ffb333b3f57aecb18ab74bcb5cf9158", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "30dfd49146d073c0ca77ec54f45987be483492de", "commitAfterChange": "b6791838b5fdf2dfb8325a3a5a7e1c11f48ab412", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": " public TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["-\t\tthis.constant = FieldReference.getConstantFor((FieldBinding) this.binding, this, false, scope);", "+\t\tthis.constant = ((FieldBinding) this.binding).constant();", "-\tthis.constant =", "-\t\t((this.bits & Binding.FIELD) != 0)", "-\t\t\t? FieldReference.getConstantFor((FieldBinding) this.binding, this, false, scope)", "-\t\t\t: ((VariableBinding) this.binding).constant();", "+\tthis.constant =((VariableBinding) this.binding).constant();", "-\t\t\t\t\tthis.constant = NotAConstant; //don't fill other constants slots...", "+\t\t\t\t\tthis.constant = Constant.NotAConstant; //don't fill other constants slots...", "-\t\t\tConstant someConstant = FieldReference.getConstantFor(field, this, false, scope);", "-\t\t\tif (this.constant != NotAConstant){", "-\t\t\t\tthis.constant = someConstant;", "+\t\t\tif (this.constant != Constant.NotAConstant){", "+\t\t\t\tthis.constant = field.constant();", "-\t\t\tthis.constant = NotAConstant; //don't fill other constants slots...", "+\t\t\tthis.constant = Constant.NotAConstant; //don't fill other constants slots..."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f4b2452e64697ab7b4852720cacdda4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "30dfd49146d073c0ca77ec54f45987be483492de", "commitAfterChange": "b6791838b5fdf2dfb8325a3a5a7e1c11f48ab412", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["-\t\t\tthis.constant = FieldReference.getConstantFor((FieldBinding) binding, this, false, scope);", "+\t\t\tthis.constant = ((FieldBinding) binding).constant();", "-\t\tthis.constant = field != null", "-\t\t\t\t? FieldReference.getConstantFor((FieldBinding) binding, this, false, scope)", "-\t\t\t\t: ((VariableBinding) binding).constant();", "+\t\tthis.constant = ((VariableBinding) binding).constant();", "-\t\t\t\tConstant someConstant = FieldReference.getConstantFor(field, this, false, scope);", "-\t\t\t\tif (this.constant != NotAConstant) {", "-\t\t\t\t\tthis.constant = someConstant;\t\t\t\t\t", "+\t\t\t\tif (this.constant != Constant.NotAConstant) {", "+\t\t\t\t\tthis.constant = field.constant();\t\t\t\t\t", "-\t\t\t\tconstant = NotAConstant; //don't fill other constants slots...", "+\t\t\t\tconstant = Constant.NotAConstant; //don't fill other constants slots..."]}], "num": 36017}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3159b683925cb1a0fc182ff6edc1b3f0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9907c40f8e052c6366f4fff697c91dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void resolveStatements()", "signatureAfterChange": "  \tpublic void resolveStatements()", "diff": ["-\t\t\tif (this.scope.compilerOptions().sourceLevel < JDK1_5) break checkOverride;", "+\t\t\tif (this.scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_5) break checkOverride;", "-\t\t\t\tif ((bindingModifiers & AccOverriding) == 0 || isInterfaceMethod)", "+\t\t\t\tif ((bindingModifiers & ExtraCompilerModifiers.AccOverriding) == 0 || isInterfaceMethod)", "-\t\t\t} else if (!isInterfaceMethod \t&& (bindingModifiers & (AccStatic|AccOverriding)) == AccOverriding) {", "+\t\t\t} else if (!isInterfaceMethod \t&& (bindingModifiers & (ClassFileConstants.AccStatic|ExtraCompilerModifiers.AccOverriding)) == ExtraCompilerModifiers.AccOverriding) {", "-\t\t\t\tif ((this.modifiers & AccSemicolonBody) != 0) {", "-\t\t\t\t\tif ((this.modifiers & AccNative) == 0)", "-\t\t\t\t\t\tif ((this.modifiers & AccAbstract) == 0)", "+\t\t\t\tif ((this.modifiers & ExtraCompilerModifiers.AccSemicolonBody) != 0) {", "+\t\t\t\t\tif ((this.modifiers & ClassFileConstants.AccNative) == 0)", "+\t\t\t\t\t\tif ((this.modifiers & ClassFileConstants.AccAbstract) == 0)", "-\t\t\t\t\tif (((this.modifiers & AccNative) != 0) || ((this.modifiers & AccAbstract) != 0))", "+\t\t\t\t\tif (((this.modifiers & ClassFileConstants.AccNative) != 0) || ((this.modifiers & ClassFileConstants.AccAbstract) != 0))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee553c245dbb27eb48b3b0e45438dbe6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "6467f6dd1cb134689a9fdd8d844169d55dd11609", "commitAfterChange": "eaaf8d51568dee07a03eec3ae337eaee38c80f58", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void resolveStatements()", "signatureAfterChange": "  \tpublic void resolveStatements()", "diff": ["-\t\t\tif (compilerOptions.sourceLevel < ClassFileConstants.JDK1_5) break checkOverride;", "+\t\t\tlong sourceLevel = compilerOptions.sourceLevel;", "+\t\t\tif (sourceLevel < ClassFileConstants.JDK1_5) break checkOverride;", "-\t\t\t\tif ((bindingModifiers & ExtraCompilerModifiers.AccOverriding) == 0 || isInterfaceMethod || this.binding.isStatic())", "-\t\t\t\t\t// claims to override, and doesn't actually do so", "-\t\t\t\t\tthis.scope.problemReporter().methodMustOverride(this);\t\t\t\t\t", "-\t\t\t} else if (!isInterfaceMethod \t&& (bindingModifiers & (ClassFileConstants.AccStatic|ExtraCompilerModifiers.AccOverriding)) == ExtraCompilerModifiers.AccOverriding) {", "+\t\t\t\t// no static method is considered overriding", "+\t\t\t\tif (!isInterfaceMethod && (bindingModifiers & (ClassFileConstants.AccStatic|ExtraCompilerModifiers.AccOverriding)) == ExtraCompilerModifiers.AccOverriding)", "+\t\t\t\t\tbreak checkOverride;", "+\t\t\t\t//\tin 1.5, strictly for overriding superclass method", "+\t\t\t\t//\tin 1.6 and above, also tolerate implementing interface method", "+\t\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_6", "+\t\t\t\t\t\t&& ((bindingModifiers & (ClassFileConstants.AccStatic|ExtraCompilerModifiers.AccImplementing)) == ExtraCompilerModifiers.AccImplementing))", "+\t\t\t\t\tbreak checkOverride;", "+\t\t\t\t// claims to override, and doesn't actually do so", "+\t\t\t\tthis.scope.problemReporter().methodMustOverride(this);\t\t\t\t\t", "+\t\t\t} else if (!isInterfaceMethod \t", "+\t\t\t\t\t\t&& (bindingModifiers & (ClassFileConstants.AccStatic|ExtraCompilerModifiers.AccOverriding)) == ExtraCompilerModifiers.AccOverriding) {", "-\t\t", "+\t\t\t\t"]}], "num": 55707}
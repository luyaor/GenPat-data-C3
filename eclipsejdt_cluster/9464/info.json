{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d5779bbc0a43dbea1c8ea044ceefffc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03888303ec6619bad3bb96db1b3d64bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "74d118e989117eba0163f0f707314197db0891af", "commitAfterChange": "43cdae5117454d896e9e9cf435f63b0b509e3a4c", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 134, "signatureBeforeChange": " public void testBug392245_tmp_warning()", "signatureAfterChange": " public void testDefault06_bin()", "diff": ["-public void testBug392245_tmp_warning() {", "-\trunNegativeTestWithLibs(", "-\t\tnew String[] {", "-\t\t\t\"X.java\",", "-\t\t\t\"import org.eclipse.jdt.annotation.*;\\n\" +", "-\t\t\t\"@NonNullByDefault(DefaultLocation.TYPE_ARGUMENT)\\n\" +", "-\t\t\t\"public class X {\\n\" +", "-\t\t\t\"\tvoid m(Object o) {}\\n\" +", "-\t\t\t\"\tvoid test() {\\n\" +", "-\t\t\t\"\t\tm(null); // ERR\\n\" + // since @NonNullByDefault is still interpreted as all or nothing", "-\t\t\t\"\t}\\n\" +", "-\t\t\t\"}\\n\"", "-\t\t},", "-\t\t\"----------\\n\" + ", "-\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "-\t\t\"\t@NonNullByDefault(DefaultLocation.TYPE_ARGUMENT)\\n\" + ", "-\t\t\"\t                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Arguments controling the details of the nullness default are not yet evaluated by the analysis.\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\"\tm(null); // ERR\\n\" + ", "-\t\t\"\t  ^^^^\\n\" + ", "-\t\t\"Null type mismatch: required \\'@NonNull Object\\' but the provided value is null\\n\" + ", "-\t\t\"----------\\n\");", "-}", "+// apply default to type parameter - inner class", "+public void testDefault06_bin() {", "+\trunConformTestWithLibs(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"import org.eclipse.jdt.annotation.*;\\n\" +", "+\t\t\t\"@NonNullByDefault(DefaultLocation.TYPE_PARAMETER)\\n\" +", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"\tstatic class Inner<T> {\\n\" +", "+\t\t\t\"\t\tT process(T t) {\\n\" +", "+\t\t\t\"\t\t\treturn t;\\n\" +", "+\t\t\t\" \t\t}\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\\n\"", "+\t\t},", "+\t\tgetCompilerOptions(),", "+\t\t\"\");", "+\trunNegativeTestWithLibs(", "+\t\tnew String[] {", "+\t\t\t\"Y.java\",", "+\t\t\t\"import org.eclipse.jdt.annotation.*;\\n\" +", "+\t\t\t\"public class Y {\\n\" +", "+\t\t\t\"\tvoid test(X.Inner<Number> inum) {\\n\" +", "+\t\t\t\"\t\t@NonNull Number nnn = inum.process(null); // ERR on argument\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\\n\"", "+\t\t},", "+\t\tgetCompilerOptions(),", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in Y.java (at line 4)\\n\" + ", "+\t\t\"\t@NonNull Number nnn = inum.process(null); // ERR on argument\\n\" + ", "+\t\t\"\t                                   ^^^^\\n\" + ", "+\t\t\"Null type mismatch: required \\'@NonNull Number\\' but the provided value is null\\n\" + ", "+\t\t\"----------\\n\");}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bab27bbd648fd7c4290e174e5bce74a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "c45031a708344453f01f911278a63ebae41b9cba", "commitAfterChange": "c49a7bd34f8c2781dba76984d24d83335183205f", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void testBinary08()", "signatureAfterChange": " \tpublic void testBinary08()", "diff": ["+\t\trunNegativeTestWithLibs(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"p/X1.java\",", "+\t\t\t\t\t\"package p;\\n\" +", "+\t\t\t\t\t\"import java.util.*;\\n\" +", "+\t\t\t\t\t\"import org.eclipse.jdt.annotation.*;\\n\" +", "+\t\t\t\t\t\"public abstract class X1 {\\n\" +", "+\t\t\t\t\t\"    public class Inner {}\\n\" +", "+\t\t\t\t\t\"    public Object []@NonNull[] arrays(Object @NonNull[][] oa1) { return null; }\\n\" +", "+\t\t\t\t\t\"    public void nesting(@NonNull Inner i1, X1.@Nullable Inner i2) { }\\n\" +", "+\t\t\t\t\t\"    public void wildcard1(List<@Nullable ? extends @NonNull X1> l) { } // contradiction\\n\" +", "+\t\t\t\t\t\"    public void wildcard2(List<? super @NonNull X1> l) { }\\n\" +", "+\t\t\t\t\t\"}\\n\"", "+\t\t\t\t},", "+\t\t\t\tcustomOptions,", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in p\\\\X1.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tpublic void wildcard1(List<@Nullable ? extends @NonNull X1> l) { } // contradiction\\n\" + ", "+\t\t\t\t\"\t                                               ^^^^^^^^\\n\" + ", "+\t\t\t\t\"This nullness annotation conflicts with a \\'@Nullable\\' annotation which is effective on the same type parameter \\n\" + ", "+\t\t\t\t\"----------\\n\");", "+\t\t// fix the error:", "-\t\t\t\t\t\"    public void wildcard1(List<@Nullable ? extends @NonNull X1> l) { }\\n\" + // contradiction", "+\t\t\t\t\t\"    public void wildcard1(List<@Nullable ? extends X1> l) { }\\n\" +", "-// FIXME(stephan): add desired error messages:", "+", "-//\t\t\t\t\t\"import java.util.*;\\n\" +", "+\t\t\t\t\t\"import java.util.*;\\n\" +", "-\t\t\t\t\t\"\t\tObject @NonNull[][] a = new Object[0][];\\n\" + // unsafe", "-\t\t\t\t\t\"\t\tx.arrays(a)[0] = null;\\n\" + // illegal", "-\t\t\t\t\t\"\t\tx.nesting(null, null);\\n\" + // 1st null is illegal", "-//\t\t\t\t\t\"\t\tx.wildcard2(new ArrayList<@NonNull Object>());\\n\" +", "+\t\t\t\t\t\"\t\tObject @NonNull[][] a = new Object[0][]; // unsafe\\n\" +", "+\t\t\t\t\t\"\t\tx.arrays(a)[0] = null; // illegal\\n\" +", "+\t\t\t\t\t\"\t\tx.nesting(null, null); // 1st null is illegal\\n\" +", "+\t\t\t\t\t\"\t\tx.wildcard2(new ArrayList<@NonNull Object>());\\n\" +", "+\t\t\t\t\t\"\t\tx.wildcard2(new ArrayList<@Nullable Object>()); // incompatible(1)\\n\" +", "+\t\t\t\t\t\"\t\tx.wildcard1(new ArrayList<@NonNull X1>()); // incompatible(2)\\n\" +", "-//\t\t\t\t\"1. ERROR in Y1.java (at line 5)\\n\" + ", "-//\t\t\t\t\"\tX1<@Nullable String> maybeStrings;\\n\" + ", "-//\t\t\t\t\"\t   ^^^^^^^^^^^^^^^^\\n\" + ", "-//\t\t\t\t\"Incompatible type argument ...\\n\" + ", "-//\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"1. WARNING in Y1.java (at line 5)\\n\" + ", "-\t\t\t\t\"\tObject @NonNull[][] a = new Object[0][];\\n\" + ", "+\t\t\t\t\"1. WARNING in Y1.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tObject @NonNull[][] a = new Object[0][]; // unsafe\\n\" + ", "-\t\t\t\t\"2. ERROR in Y1.java (at line 6)\\n\" + ", "-\t\t\t\t\"\tx.arrays(a)[0] = null;\\n\" + ", "+\t\t\t\t\"2. ERROR in Y1.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tx.arrays(a)[0] = null; // illegal\\n\" + ", "-\t\t\t\t\"3. ERROR in Y1.java (at line 7)\\n\" + ", "-\t\t\t\t\"\tx.nesting(null, null);\\n\" + ", "+\t\t\t\t\"3. ERROR in Y1.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tx.nesting(null, null); // 1st null is illegal\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in Y1.java (at line 10)\\n\" + ", "+\t\t\t\t\"\tx.wildcard2(new ArrayList<@Nullable Object>()); // incompatible(1)\\n\" + ", "+\t\t\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Null type mismatch (type annotations): required \\'List<? super @NonNull X1>\\' but this expression has type \\'ArrayList<@Nullable Object>\\'\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. ERROR in Y1.java (at line 11)\\n\" + ", "+\t\t\t\t\"\tx.wildcard1(new ArrayList<@NonNull X1>()); // incompatible(2)\\n\" + ", "+\t\t\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Null type mismatch (type annotations): required \\'List<@Nullable ? extends p.X1>\\' but this expression has type \\'ArrayList<@NonNull X1>\\'\\n\" + ", "+\t\t\t\t\"----------\\n\");", "+\t}"]}], "num": 9464}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2f6d0dc47fdfd7606435cc4426d2bc5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4257e70fdc87ea4eb0b6677e0c296e2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate static SearchPattern createTypePattern(String patternString, int limitTo, int matchRule)", "signatureAfterChange": " \tprivate static SearchPattern createTypePattern(String patternString, int limitTo, int matchRule)", "diff": ["-\t\tboolean storeType = true, storeParam = true;", "-\t\tint parameterized = 0;", "-\t\tint paramPtr = -1;", "-\t\tchar[] paramName = null;", "-\t\tchar[][] paramNames = null;", "-\t\tint[] wildcards = null;", "+\t\tint paramCount = 0;", "-\t\t\tif (token != TerminalTokens.TokenNameWHITESPACE) {", "-\t\t\t\tif (storeParam) {", "+\t\t\tswitch (token) {", "+\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE:", "+\t\t\t\t\tif (paramCount == 0) break;", "+\t\t\t\t\t// fall through default case if we're inside a type argument...", "+\t\t\t\tdefault: // all other tokens are considered identifiers (see bug 21763 Problem in Java search [search])", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameMULTIPLY:", "-\t\t\t\t\t\t\tif (parameterized > 0) {", "-\t\t\t\t\t\t\t\t// TODO (frederic) Should warn user that syntax is not valid", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameQUESTION:", "-\t\t\t\t\t\t\tif (parameterized > 0) {", "-\t\t\t\t\t\t\t\tif (wildcards[paramPtr] == -1) {", "-\t\t\t\t\t\t\t\t\twildcards[paramPtr] = Wildcard.UNBOUND;", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t// TODO (frederic) Should warn user that syntax is not valid", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameextends:", "-\t\t\t\t\t\t\tif (parameterized > 0) {", "-\t\t\t\t\t\t\t\tif (wildcards[paramPtr] == Wildcard.UNBOUND) {", "-\t\t\t\t\t\t\t\t\twildcards[paramPtr] = Wildcard.EXTENDS;", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t// TODO (frederic) Should warn user that syntax is not valid", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TerminalTokens.TokenNamesuper:", "-\t\t\t\t\t\t\tif (parameterized > 0) {", "-\t\t\t\t\t\t\t\tif (wildcards[paramPtr] == Wildcard.UNBOUND) {", "-\t\t\t\t\t\t\t\t\twildcards[paramPtr] = Wildcard.SUPER;", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t// TODO (frederic) Should warn user that syntax is not valid", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameCOMMA:", "-\t\t\t\t\t\t\tif (parameterized == 1 && storeParam) {", "-\t\t\t\t\t\t\t\tif (paramPtr < paramNames.length) {", "-\t\t\t\t\t\t\t\t\tparamNames[paramPtr++] = paramName;", "-\t\t\t\t\t\t\t\t\tparamName = null;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\twildcards[paramPtr] = -1;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tif (parameterized == 1) {", "-\t\t\t\t\t\t\t\tif (storeParam) {", "-\t\t\t\t\t\t\t\t\tstoreParam = false;", "-\t\t\t\t\t\t\t\t\tif (paramPtr < paramNames.length) {", "-\t\t\t\t\t\t\t\t\t\tparamNames[paramPtr] = paramName;", "-\t\t\t\t\t\t\t\t\t\tparamName = null;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tparameterized--;", "+\t\t\t\t\t\t\tparamCount++;", "-\t\t\t\t\t\t\tif (parameterized == 0) {", "-\t\t\t\t\t\t\t\tparamNames = new char[10][]; // 10 parameters max", "-\t\t\t\t\t\t\t\tparamPtr++;", "-\t\t\t\t\t\t\t\twildcards = new int[10]; // 10 parameters max", "-\t\t\t\t\t\t\t\twildcards[paramPtr] = -1;", "-\t\t\t\t\t\t\t\tstoreType = false;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tparameterized++;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier:", "-\t\t\t\t\t\t\tif (parameterized == 1 && storeParam) {", "-\t\t\t\t\t\t\t\tif (paramName == null) {", "-\t\t\t\t\t\t\t\t\t// never store id at this index", "-\t\t\t\t\t\t\t\t\tparamName = scanner.getCurrentIdentifierSource();", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tparamName = CharOperation.concat(paramName, scanner.getCurrentIdentifierSource());", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameDOT:", "-\t\t\t\t\t\t\tif (parameterized == 1 && storeParam && paramName != null) {", "-\t\t\t\t\t\t\t\tparamName = CharOperation.append(paramName, '.');", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tparamCount--;", "-\t\t\t\t}", "-\t\t\t\tif (storeType) { // store type if not in type arguments declaration", "-\t\t\t\t}", "-\t\t\t\tstoreType = parameterized == 0;", "-\t\t// Resize param names array if necessary", "-\t\tif (paramPtr >= 0) {", "-\t\t\tSystem.arraycopy(paramNames, 0, paramNames = new char[paramPtr+1][], 0, paramPtr+1);", "-\t\t\tSystem.arraycopy(wildcards, 0, wildcards = new int[paramPtr+1], 0, paramPtr+1);", "-\t\t}", "-\t", "+\t\tchar[] typeSignature = null;", "-\t\t\tchar[] typePart = type.toCharArray();", "+\t\t\t// get type part and signature", "+\t\t\tchar[] typePart = null;", "+\t\t\ttry {", "+\t\t\t\tString signature = Signature.createTypeSignature(type, false);", "+\t\t\t\tif (signature.indexOf(Signature.C_GENERIC_START) < 0) {", "+\t\t\t\t\ttypePart = type.toCharArray();", "+\t\t\t\t} else {", "+\t\t\t\t\ttypeSignature = signature.toCharArray();", "+\t\t\t\t\ttypePart = Signature.toCharArray(Signature.getTypeErasure(typeSignature));", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcatch (IllegalArgumentException iae) {", "+\t\t\t\t// string is not a valid type syntax", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\t// get qualification name", "-\t\t\t\treturn new TypeReferencePattern(qualificationChars, typeChars, paramNames, false /* not generic */, wildcards, matchRule);", "+\t\t\t\treturn new TypeReferencePattern(qualificationChars, typeChars, typeSignature, false /* not generic */, matchRule);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81aca92c6fe964b97fba64e1f37d1b72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/StringLiteral.java", "commitBeforeChange": "61c4f34a99fac56b19ac1994f5a7274231102e0c", "commitAfterChange": "51338ea2c291fc027c3057bd509f9115f23d8914", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic String getLiteralValue()", "signatureAfterChange": "  \tpublic String getLiteralValue()", "diff": ["-\t\tStringBuffer b = new StringBuffer(len - 2);", "-\t\tfor (int i = 1; i< len - 1; i++) {", "-\t\t\tchar c = s.charAt(i);", "-\t\t\tif (c == '\\\"') {", "-\t\t\t\tthrow new IllegalArgumentException();", "+\t\t", "+\t\tScanner scanner = getAST().scanner;", "+\t\tchar[] source = s.toCharArray();", "+\t\tscanner.setSource(source);", "+\t\tscanner.resetTo(0, source.length);", "+\t\ttry {", "+\t\t\tint tokenType = scanner.getNextToken();", "+\t\t\tswitch(tokenType) {", "+\t\t\t\tcase Scanner.TokenNameStringLiteral:", "+\t\t\t\t\treturn new String(scanner.getCurrentTokenSourceString());", "+\t\t\t\tdefault:", "+\t\t\t\t\tthrow new IllegalArgumentException();", "-\t\t\tif (c == '\\\\') {", "-\t\t\t\t// legal: b, t, n, f, r, \", ', \\, 0, 1, 2, 3, 4, 5, 6, or 7", "-\t\t\t\tchar nextChar;", "-\t\t\t\tif ((i + 1) < len - 1) {", "-\t\t\t\t\tnextChar = s.charAt(i + 1);", "-\t\t\t\t\ti++;", "-\t\t\t\t\tswitch(nextChar) {", "-\t\t\t\t\t\tcase 'b' :", "-\t\t\t\t\t\t\tb.append('\\b');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase 't' :", "-\t\t\t\t\t\t\tb.append('\\t');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase 'n' :", "-\t\t\t\t\t\t\tb.append('\\n');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase 'f' :", "-\t\t\t\t\t\t\tb.append('\\f');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase 'r' :", "-\t\t\t\t\t\t\tb.append('\\r');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '\\\"':", "-\t\t\t\t\t\t\tb.append('\\\"');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '\\'':", "-\t\t\t\t\t\t\tb.append('\\'');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '\\\\':", "-\t\t\t\t\t\t\tb.append('\\\\');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '0' :", "-\t\t\t\t\t\t\tb.append('\\0');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '1' :", "-\t\t\t\t\t\t\tb.append('\\1');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '2' :", "-\t\t\t\t\t\t\tb.append('\\2');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '3' :", "-\t\t\t\t\t\t\tb.append('\\3');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '4' :", "-\t\t\t\t\t\t\tb.append('\\4');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '5' :", "-\t\t\t\t\t\t\tb.append('\\5');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '6' :", "-\t\t\t\t\t\t\tb.append('\\6');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '7' :", "-\t\t\t\t\t\t\tb.append('\\7');", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase 'u' :", "-\t\t\t\t\t\t\t//handle the case of unicode.", "-\t\t\t\t\t\t\tint currentPosition = i + 1;", "-\t\t\t\t\t\t\tint c1 = 0, c2 = 0, c3 = 0, c4 = 0;", "-\t\t\t\t\t\t\tif ((c1 = Character.getNumericValue(s.charAt(currentPosition++))) > 15", "-\t\t\t\t\t\t\t\t|| c1 < 0", "-\t\t\t\t\t\t\t\t|| (c2 = Character.getNumericValue(s.charAt(currentPosition++))) > 15", "-\t\t\t\t\t\t\t\t|| c2 < 0", "-\t\t\t\t\t\t\t\t|| (c3 = Character.getNumericValue(s.charAt(currentPosition++))) > 15", "-\t\t\t\t\t\t\t\t|| c3 < 0", "-\t\t\t\t\t\t\t\t|| (c4 = Character.getNumericValue(s.charAt(currentPosition++))) > 15", "-\t\t\t\t\t\t\t\t|| c4 < 0){", "-\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid string literal\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tb.append((char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4));", "-\t\t\t\t\t\t\t\ti = currentPosition - 1;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid string literal\");//$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid string literal\");//$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tb.append(c);", "-\t\t\t}", "+\t\t} catch(InvalidInputException e) {", "+\t\t\tthrow new IllegalArgumentException();", "-\t\treturn b.toString();\t\t\t"]}], "num": 41709}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9bb7ee15dfffb401ffc78501254d248", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14993048c1bedf5fd838f40668348539", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "cb9297d0b2c1bdcf8963e89b9c822b2bdceb54dc", "commitAfterChange": "4a7fb72faa1d4eb35981dd799c06dbffe9837a2f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["-\t\tthis.tagValue = NO_TAG_VALUE;", "+\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\t\tcase 'a':", "+\t\t\t\t\t\tif (length == TAG_AUTHOR_LENGTH && CharOperation.equals(TAG_AUTHOR, tagName)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_AUTHOR_VALUE;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t} else if (length == TAG_CODE_LENGTH && this.inlineTagStarted && CharOperation.equals(TAG_CODE, tagName)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_CODE_VALUE;", "+\t\t\t\t\t\t} else if (length == TAG_LITERAL_LENGTH && this.inlineTagStarted && CharOperation.equals(TAG_LITERAL, tagName)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_LITERAL_VALUE;", "+\t\t\t\t\t\t} else if (length == TAG_SERIAL_LENGTH && CharOperation.equals(TAG_SERIAL, tagName)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_SERIAL_VALUE;", "+\t\t\t\t\t\t} else if (length == TAG_SERIAL_DATA_LENGTH && CharOperation.equals(TAG_SERIAL_DATA, tagName)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_SERIAL_DATA_VALUE;", "+\t\t\t\t\t\t} else if (length == TAG_SERIAL_FIELD_LENGTH && CharOperation.equals(TAG_SERIAL_FIELD, tagName)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_SERIAL_FIELD_VALUE;", "+\t\t\t\t\t\t} else if (length == TAG_SINCE_LENGTH && CharOperation.equals(TAG_SINCE, tagName)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_SINCE_VALUE;", "+\t\t\t\t\t\t} else if (length == TAG_VERSION_LENGTH && CharOperation.equals(TAG_VERSION, tagName)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_VERSION_VALUE;", "-\t\tif (! alreadyParsedTag && this.reportProblems && verifyEndLine(this.scanner.currentPosition)) {", "+\t\tif (this.tagValue != TAG_OTHERS_VALUE && ! alreadyParsedTag && this.reportProblems && verifyEndLine(this.scanner.currentPosition)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73bd66e40c37a02361db8264aa18911f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " private void buildMoreGenericsCompletionContext(ASTNode node, boolean consumeTypeArguments)", "signatureAfterChange": " private void buildMoreGenericsCompletionContext(ASTNode node, boolean consumeTypeArguments)", "diff": ["-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.currentElement = this.currentElement.add(ref, 0);", "+\t\t\t\t\t\t} else {\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tif (prevKind == K_BETWEEN_NEW_AND_LEFT_BRACKET) {", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tAllocationExpression exp;", "+\t\t\t\t\t\t\t\tif (this.expressionPtr > -1 && this.expressionStack[this.expressionPtr] instanceof AllocationExpression) {", "+\t\t\t\t\t\t\t\t\texp = new QualifiedAllocationExpression();", "+\t\t\t\t\t\t\t\t\texp.type = ref;", "+\t\t\t\t\t\t\t\t\t((QualifiedAllocationExpression)exp).enclosingInstance = this.expressionStack[this.expressionPtr];", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\texp = new AllocationExpression();", "+\t\t\t\t\t\t\t\t\texp.type = ref;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (isInsideReturn()) {", "+\t\t\t\t\t\t\t\t\tReturnStatement returnStatement = new ReturnStatement(exp, exp.sourceStart, exp.sourceEnd);", "+\t\t\t\t\t\t\t\t\tthis.enclosingNode = returnStatement;", "+\t\t\t\t\t\t\t\t\tthis.currentElement  = this.currentElement.add(returnStatement,0);", "+\t\t\t\t\t\t\t\t} else if (this.currentElement instanceof RecoveredLocalVariable) {", "+\t\t\t\t\t\t\t\t\tif (((RecoveredLocalVariable)this.currentElement).localDeclaration.initialization == null) {", "+\t\t\t\t\t\t\t\t\t\tthis.enclosingNode = ((RecoveredLocalVariable) this.currentElement).localDeclaration;", "+\t\t\t\t\t\t\t\t\t\tthis.currentElement = this.currentElement.add(exp, 0);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} else if (this.currentElement instanceof RecoveredField) {", "+\t\t\t\t\t\t\t\t\tif (((RecoveredField) this.currentElement).fieldDeclaration.initialization == null) {", "+\t\t\t\t\t\t\t\t\t\tthis.enclosingNode = ((RecoveredField) this.currentElement).fieldDeclaration;", "+\t\t\t\t\t\t\t\t\t\tthis.currentElement = this.currentElement.add(exp, 0);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tthis.currentElement = this.currentElement.add(ref, 0);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tthis.currentElement = this.currentElement.add(ref, 0);", "+\t\t\t\t\t\t\t}"]}], "num": 5379}
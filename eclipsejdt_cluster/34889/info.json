{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dfa7fe9827e706a7479eb9712349d2bd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20c4f8f5e66841cc95f7417b32a2f566", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "79230cd7762a4c67bbe12b2445e22b464f420455", "commitAfterChange": "0e2b95cbd8acd25a30eff4aa5a4e5b34fa13b0c5", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r public void searchAllTypeNames(\r \tIWorkspace workspace,\r \tchar[] packageName, \r \tchar[] typeName,\r \tint matchMode, \r \tboolean isCaseSensitive,\r \tint searchFor, \r \tIJavaSearchScope scope, \r \tfinal ITypeNameRequestor nameRequestor,\r \tint waitingPolicy,\r \tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": "\r public void searchAllTypeNames(\r \tIWorkspace workspace,\r \tchar[] packageName, \r \tchar[] typeName,\r \tint matchMode, \r \tboolean isCaseSensitive,\r \tint searchFor, \r \tIJavaSearchScope scope, \r \tfinal ITypeNameRequestor nameRequestor,\r \tint waitingPolicy,\r \tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\tindexManager.performConcurrentJob(\r", "-\t\tnew PatternSearchJob(pattern, scope, IInfoConstants.NameInfo | IInfoConstants.PathInfo, searchRequestor, indexManager),\r", "-\t\twaitingPolicy,\r", "-\t\tprogressMonitor);\t\r", "+\ttry {\r", "+\t\tif (progressMonitor != null) {\r", "+\t\t\tprogressMonitor.beginTask(Util.bind(\"engine.searching\"), 100); //$NON-NLS-1$\r", "+\t\t}\r", "+\t\tindexManager.performConcurrentJob(\r", "+\t\t\tnew PatternSearchJob(pattern, scope, IInfoConstants.NameInfo | IInfoConstants.PathInfo, searchRequestor, indexManager),\r", "+\t\t\twaitingPolicy,\r", "+\t\t\tprogressMonitor);\t\r", "+\t} finally {\r", "+\t\tif (progressMonitor != null) {\r", "+\t\t\tprogressMonitor.done();\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65ed86877c0a2823d1e2782f1a0f5404", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJarFileToIndex.java", "commitBeforeChange": "ce9d82264275b3c4ad926312ca4ca735e225fab4", "commitAfterChange": "3f70f3f99df21def4574d8396aee2d34db8ebf8e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public boolean execute()", "signatureAfterChange": "\r public boolean execute()", "diff": ["+\tIIndex index = null;\r", "-\t\tIIndex index = (IIndex) manager.getIndex(indexedPath, false);\r", "+\t\tindex = (IIndex) manager.getIndex(indexedPath, false);\r", "+\t\t// something wrong happened during indexing this file, so we can get rid of it\r", "+\t\tif (index != null) {\r", "+\t\t\tFile indexFile = index.getIndexFile();\r", "+\t\t\tif (indexFile != null) {\r", "+\t\t\t\tindexFile.delete();\r", "+\t\t\t}\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97e93afe1b10302e4c13510679a77029", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "45ea0c0963e46daaae31261dbb16943dd8fe31f9", "commitAfterChange": "2eac8e5fe7a3ec66583085fd9b264a552c7df520", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic CompilationUnitDeclaration resolve( \t\t\tICompilationUnit sourceUnit,  \t\t\tboolean verifyMethods, \t\t\tboolean analyzeCode, \t\t\tboolean generateCode)", "signatureAfterChange": " \tpublic CompilationUnitDeclaration resolve( \t\t\tCompilationUnitDeclaration unit,  \t\t\tICompilationUnit sourceUnit,  \t\t\tboolean verifyMethods, \t\t\tboolean analyzeCode, \t\t\tboolean generateCode)", "diff": ["+\t\t\tCompilationUnitDeclaration unit, ", "-\t\tCompilationUnitDeclaration unit = null;", "-\t\t\t// build and record parsed units", "-\t\t\tparseThreshold = 0; // will request a full parse", "-\t\t\tbeginToCompile(new ICompilationUnit[] { sourceUnit });", "-\t\t\t// process all units (some more could be injected in the loop by the lookup environment)", "-\t\t\tunit = unitsToProcess[0];", "-\t\t\tgetMethodBodies(unit, 0);", "+\t\t\tif (unit == null) {", "+\t\t\t\t// build and record parsed units", "+\t\t\t\tparseThreshold = 0; // will request a full parse", "+\t\t\t\tbeginToCompile(new ICompilationUnit[] { sourceUnit });", "+\t\t\t\t// process all units (some more could be injected in the loop by the lookup environment)", "+\t\t\t\tunit = unitsToProcess[0];", "+\t\t\t\tgetMethodBodies(unit, 0);", "+\t\t\t} else {", "+\t\t\t\t// initial type binding creation", "+\t\t\t\tlookupEnvironment.buildTypeBindings(unit);", "+", "+\t\t\t\t// binding resolution", "+\t\t\t\tlookupEnvironment.completeTypeBindings();", "+\t\t\t}", "-\t\t\tunitsToProcess[0] = null; // release reference to processed unit declaration", "+\t\t\tif (unitsToProcess != null) unitsToProcess[0] = null; // release reference to processed unit declaration"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbbbd2557b70304e32954c6786ef1696", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompiler.java", "commitBeforeChange": "46ea3b2fef612e233f18c1fb6cfcae1d94121264", "commitAfterChange": "b8315251ffb02e48cefcddb514a7641a6c9516c4", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic CompilationTask getTask(Writer out, \t\t\tJavaFileManager fileManager, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener, \t\t\tIterable<String> options, \t\t\tIterable<String> classes, \t\t\tIterable<? extends JavaFileObject> compilationUnits)", "signatureAfterChange": " \tpublic CompilationTask getTask(Writer out, \t\t\tJavaFileManager fileManager, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener, \t\t\tIterable<String> options, \t\t\tIterable<String> classes, \t\t\tIterable<? extends JavaFileObject> compilationUnits)", "diff": ["-\t\tthis.fileManager = fileManager;", "+\t\tif (fileManager != null) {", "+\t\t\tthis.fileManager = fileManager;", "+\t\t} else {", "+\t\t\tthis.fileManager = this.getStandardFileManager(diagnosticListener, null, null);", "+\t\t}", "-\t\tfor (Iterator<String> iterator = options.iterator(); iterator.hasNext(); ) {", "-\t\t\tfileManager.handleOption(iterator.next(), iterator);", "-\t\t}", "-\t\t", "-\t\tfor (String option : options) {", "-\t\t\tallOptions.add(option);", "+\t\tif (options != null) {", "+    \t\tfor (Iterator<String> iterator = options.iterator(); iterator.hasNext(); ) {", "+    \t\t\tthis.fileManager.handleOption(iterator.next(), iterator);", "+    \t\t}", "+    \t\tfor (String option : options) {", "+    \t\t\tallOptions.add(option);", "+    \t\t}"]}], "num": 34889}
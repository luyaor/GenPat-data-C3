{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc32837dd8495b1663293459c9b5c1bb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5eb59e2ffdbd36c5c0998753722ec423", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "1209010fd2d01b73be2d5ddcc68dee954a4dfb12", "commitAfterChange": "e2d64401ee163038583789c4f8e64653502b280a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": "\r public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope)", "diff": ["+\t\t\treturn;\r", "+\t\t}\r", "+\t\t// if the binding declaring class is not visible, need special action\r", "+\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding\r", "+\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type\r", "+\t\t// and not from Object or implicit static field access.\t\r", "+\t\tif (fieldBinding.declaringClass != this.actualReceiverType\r", "+\t\t\t&& !this.actualReceiverType.isArrayType()\t\r", "+\t\t\t&& fieldBinding.declaringClass != null\r", "+\t\t\t&& fieldBinding.constant == NotAConstant\r", "+\t\t\t&& ((currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4 \r", "+\t\t\t\t\t&& !fieldBinding.isStatic()\r", "+\t\t\t\t\t&& fieldBinding.declaringClass.id != T_Object) // no change for Object fields (if there was any)\r", "+\t\t\t\t|| !fieldBinding.declaringClass.canBeSeenBy(currentScope))){\r", "+\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)this.actualReceiverType);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64b530a1619f78a4fa28b5d3286366e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "1209010fd2d01b73be2d5ddcc68dee954a4dfb12", "commitAfterChange": "e2d64401ee163038583789c4f8e64653502b280a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": "\r public void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope)", "diff": ["+\t\t\treturn;\r", "+\t\t}\r", "+\t\t// if the binding declaring class is not visible, need special action\r", "+\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding\r", "+\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type\r", "+\t\t// and not from Object or implicit static field access.\t\r", "+\t\tif (fieldBinding.declaringClass != this.actualReceiverType\r", "+\t\t\t&& !this.actualReceiverType.isArrayType()\t\r", "+\t\t\t&& fieldBinding.declaringClass != null\r", "+\t\t\t&& fieldBinding.constant == NotAConstant\r", "+\t\t\t&& ((currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4 \r", "+\t\t\t\t\t&& !fieldBinding.isStatic()\r", "+\t\t\t\t\t&& fieldBinding.declaringClass.id != T_Object) // no change for Object fields (if there was any)\r", "+\t\t\t\t|| !fieldBinding.declaringClass.canBeSeenBy(currentScope))){\r", "+\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)this.actualReceiverType);\r"]}], "num": 33195}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26f95641d2f09bfc27ec8ee17e44b60a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "490ec6532dfa7aa701e7fdc11b37e8f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "2a736526cf0c07c962b917711ed6666ebeefdfa1", "commitAfterChange": "c012c3900814a42f4ddf6062be7a4a09cfd10693", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic void saving(ISaveContext context) throws CoreException", "signatureAfterChange": " \tpublic void saving(ISaveContext context) throws CoreException", "diff": ["+\t    // save container values on snapshot/full save", "+\t\tPreferences preferences = JavaCore.getPlugin().getPluginPreferences();", "+\t\tIJavaProject[] projects = getJavaModel().getJavaProjects();", "+\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t    IJavaProject project = projects[i];", "+\t\t\tMap projectContainers = (Map)this.containers.get(project);", "+\t\t\tif (projectContainers == null) continue;", "+\t\t\tfor (Iterator keys = projectContainers.keySet().iterator(); keys.hasNext();) {", "+\t\t\t    IPath containerPath = (IPath) keys.next();", "+\t\t\t    IClasspathContainer container = (IClasspathContainer) projectContainers.get(containerPath);", "+\t\t\t\tString containerKey = CP_CONTAINER_PREFERENCES_PREFIX+project.getElementName() +\"|\"+containerPath;//$NON-NLS-1$", "+\t\t\t\tString containerString = CP_ENTRY_IGNORE;", "+\t\t\t\ttry {", "+\t\t\t\t\tif (container != null) {", "+\t\t\t\t\t\tcontainerString = ((JavaProject)project).encodeClasspath(container.getClasspathEntries(), null, false);", "+\t\t\t\t\t}", "+\t\t\t\t} catch(JavaModelException e){", "+\t\t\t\t\t// could not encode entry: leave it as CP_ENTRY_IGNORE", "+\t\t\t\t}", "+\t\t\t\tpreferences.setDefault(containerKey, CP_ENTRY_IGNORE); // use this default to get rid of removed ones", "+\t\t\t\tpreferences.setValue(containerKey, containerString);", "+\t\t\t}", "+\t\t}", "+\t\tJavaCore.getPlugin().savePluginPreferences();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f736b721047cbffc2be457918f0be98b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java", "commitBeforeChange": "c658da8ee403c4a9726e31e0b3916361b6795525", "commitAfterChange": "bb6a78d249db719996651e9dce01af3d16d29c93", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t@Override \tpublic void printMessage(Kind kind, CharSequence msg, Element e, \t\t\tAnnotationMirror a, AnnotationValue v)", "signatureAfterChange": " \t@Override \tpublic void printMessage(Kind kind, CharSequence msg, Element e, \t\t\tAnnotationMirror a, AnnotationValue v)", "diff": ["+\t\tCategorizedProblem problem = null;", "+\t\t\t\t\tVariableElementImpl variableElementImpl = (VariableElementImpl) e;", "+\t\t\t\t\tbinding = variableElementImpl._binding;", "+\t\t\t\t\tif (binding instanceof FieldBinding) {", "+\t\t\t\t\t\tFieldBinding fieldBinding = (FieldBinding) binding;", "+\t\t\t\t\t\tFieldDeclaration fieldDeclaration = fieldBinding.sourceField();", "+\t\t\t\t\t\tif (fieldDeclaration != null) {", "+\t\t\t\t\t\t\tReferenceBinding declaringClass = fieldBinding.declaringClass;", "+\t\t\t\t\t\t\tif (declaringClass instanceof SourceTypeBinding) {", "+\t\t\t\t\t\t\t\tSourceTypeBinding sourceTypeBinding = (SourceTypeBinding) declaringClass;", "+\t\t\t\t\t\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) sourceTypeBinding.scope.referenceContext();", "+\t\t\t\t\t\t\t\treferenceContext = typeDeclaration;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tstartPosition = fieldDeclaration.sourceStart;", "+\t\t\t\t\t\t\tendPosition = fieldDeclaration.sourceEnd;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\tresult.record(new BatchAptProblem(", "-\t\t\t\t\t\t\tresult.fileName, ", "+\t\t\t\t\tproblem = new BatchAptProblem(", "+\t\t\t\t\t\t\tresult.fileName,", "-\t\t\t\t\t\t\tnew String[0],", "+\t\t\t\t\t\t\tNO_ARGUMENTS,", "-\t\t\t\t\t\t\tcolumnNumber),", "-\t\t\t\t\t\treferenceContext);", "+\t\t\t\t\t\t\tcolumnNumber);", "-\t\t\t\t\t// TODO (olivier) need a way to find a context to report the error", "-\t\t\t\t\t_compiler.globalErrorsCount++;", "+\t\t\t\t\tproblem = new BatchAptProblem(", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tString.valueOf(builder),", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\tNO_ARGUMENTS,", "+\t\t\t\t\t\t\tProblemSeverities.Error,", "+\t\t\t\t\t\t\tstartPosition,", "+\t\t\t\t\t\t\tendPosition,", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t1);", "+\t\t\tcase MANDATORY_WARNING :", "+\t\t\tcase NOTE :", "+\t\t\tcase OTHER :", "-\t\t\t\t\tresult.record(new BatchAptProblem(", "-\t\t\t\t\t\t\tresult.fileName, ", "+\t\t\t\t\tproblem = new BatchAptProblem(", "+\t\t\t\t\t\t\tresult.fileName,", "-\t\t\t\t\t\t\tnew String[0],", "+\t\t\t\t\t\t\tNO_ARGUMENTS,", "-\t\t\t\t\t\t\tcolumnNumber),", "-\t\t\t\t\t\treferenceContext);", "+\t\t\t\t\t\t\tcolumnNumber);", "-\t\t\t\t\t// TODO (olivier) need a way to find a context to report the warning", "-\t\t\t\t\t_compiler.globalWarningsCount++;", "+\t\t\t\t\tproblem = new BatchAptProblem(", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tString.valueOf(builder),", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\tNO_ARGUMENTS,", "+\t\t\t\t\t\t\tProblemSeverities.Warning,", "+\t\t\t\t\t\t\tstartPosition,", "+\t\t\t\t\t\t\tendPosition,", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t1);", "+\t\tif (problem != null) {", "+\t\t\tthis._compiler.addExtraProblems(problem);", "+\t\t}"]}], "num": 21955}
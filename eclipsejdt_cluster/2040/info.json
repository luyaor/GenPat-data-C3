{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "720253fc0573fb5f4b2f1f4f05eed5cb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12028edd24a2d9b3c90edb70fa7f50f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "6c5ed1b4ed06e066835a3bf2ea35d093c31d8a42", "commitAfterChange": "8bc47c693f418d320513158fd7b4c7024ff227d6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r protected int computeDepth(String projectName, StringHashtableOfInt depthTable, String dependentProjectName, boolean generateMarkerOnError) throws JavaModelException", "signatureAfterChange": "\r protected int computeDepth(String projectName, StringHashtableOfInt depthTable) throws JavaModelException", "diff": ["- */\r", "-protected int computeDepth(String projectName, StringHashtableOfInt depthTable, String dependentProjectName, boolean generateMarkerOnError) throws JavaModelException {\r", "-\tint depth = depthTable.get(projectName);\r", "-\tswitch (depth) {\r", "-\t\tcase -2: // project already visited -> it's a cycle\r", "-\t\t\tif (generateMarkerOnError) {\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tIMarker marker = this.workspace.getRoot().getProject(dependentProjectName).createMarker(IJavaModelMarker.TRANSIENT_PROBLEM);\r", "-\t\t\t\t\tmarker.setAttributes(\r", "-\t\t\t\t\t\tnew String[]{ IMarker.MESSAGE, IMarker.PRIORITY, IMarker.LOCATION, IJavaModelMarker.CYCLE_DETECTED},\r", "-\t\t\t\t\t\tnew Object[]{ Util.bind(\"classpath.cycle\"), new Integer(IMarker.PRIORITY_HIGH), dependentProjectName, dependentProjectName}); //$NON-NLS-1$\r", "-\t\t\t\t} catch (CoreException e) {\r", "-\t\t\t\t\te.printStackTrace();\r", "-\t\t\t\t}\r", "-\t\t\t} else {\r", "-\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION));\r", "-\t\t\t}\r", "-\t\t\treturn -1;\r", "-\t\tcase -1:\r", "-\t\t\tdepthTable.put(projectName, -2); // mark we're visiting the project\r", "-\t\t\tint prereqDepth = -1;\r", "-\t\t\tJavaProject project = (JavaProject)this.getJavaProject(projectName);\r", "-\t\t\tString[] prerequisites = null;\r", "-\t\t\ttry {\r", "-\t\t\t\tprerequisites = project.getRequiredProjectNames();\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\tprerequisites = JavaProject.NO_PREREQUISITES;\r", "-\t\t\t}\r", "-\t\t\tfor (int i = 0, length = prerequisites.length; i < length; i++) {\r", "-\t\t\t\tString prerequisite = prerequisites[i];\r", "-\t\t\t\tprereqDepth = \r", "-\t\t\t\t\tMath.max(\r", "-\t\t\t\t\t\tprereqDepth, \r", "-\t\t\t\t\t\tthis.computeDepth(prerequisite, depthTable, projectName, generateMarkerOnError)\r", "-\t\t\t\t\t);\r", "-\t\t\t}\r", "-\t\t\tdepth = 1 + prereqDepth;\r", "-\t\t\tdepthTable.put(projectName, depth);\r", "-\t\t\treturn depth;\r", "-\t\tdefault:\r", "-\t\t\treturn depth;\r", "-\t}\r", "-}\r", "+ */\r", "+protected int computeDepth(String projectName, StringHashtableOfInt depthTable) throws JavaModelException {\r", "+\tint depth = depthTable.get(projectName);\r", "+\tswitch (depth) {\r", "+\t\tcase -2: // project already visited -> it's a cycle\r", "+\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION));\r", "+\t\tcase -1:\r", "+\t\t\tdepthTable.put(projectName, -2); // mark we're visiting the project\r", "+\t\t\tint prereqDepth = -1;\r", "+\t\t\tJavaProject project = (JavaProject)this.getJavaProject(projectName);\r", "+\t\t\tString[] prerequisites = null;\r", "+\t\t\ttry {\r", "+\t\t\t\tprerequisites = project.getRequiredProjectNames();\r", "+\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\tprerequisites = JavaProject.NO_PREREQUISITES;\r", "+\t\t\t}\r", "+\t\t\tfor (int i = 0, length = prerequisites.length; i < length; i++) {\r", "+\t\t\t\tString prerequisite = prerequisites[i];\r", "+\t\t\t\tprereqDepth = \r", "+\t\t\t\t\tMath.max(\r", "+\t\t\t\t\t\tprereqDepth, \r", "+\t\t\t\t\t\tthis.computeDepth(prerequisite, depthTable)\r", "+\t\t\t\t\t);\r", "+\t\t\t}\r", "+\t\t\tdepth = 1 + prereqDepth;\r", "+\t\t\tdepthTable.put(projectName, depth);\r", "+\t\t\treturn depth;\r", "+\t\tdefault:\r", "+\t\t\treturn depth;\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fca3327a1e6247f7515469507bb593fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "fffe8da84c964b60e288768d8e57c80a69c56c45", "commitAfterChange": "ca90b449777a23332f56adb04bd90d73e5c66a40", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  protected IProject[] build(int kind, Map ignored, IProgressMonitor monitor) throws CoreException", "signatureAfterChange": "  protected IProject[] build(int kind, Map ignored, IProgressMonitor monitor) throws CoreException", "diff": ["-\t\tIMarker marker = currentProject.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);", "-\t\tmarker.setAttributes(", "-\t\t\tnew String[] {IMarker.MESSAGE, IMarker.SEVERITY, IJavaModelMarker.CATEGORY_ID, IMarker.SOURCE_ID},", "-\t\t\tnew Object[] {", "-\t\t\t\tMessages.bind(Messages.build_inconsistentProject, e.getLocalizedMessage()),", "-\t\t\t\tnew Integer(IMarker.SEVERITY_ERROR),", "-\t\t\t\tnew Integer(CategorizedProblem.CAT_BUILDPATH),", "-\t\t\t\tJavaBuilder.SOURCE_ID", "-\t\t\t}", "-\t\t);", "+\t\tcreateInconsistentBuildMarker(e);", "-\t\tIMarker marker = currentProject.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);", "-\t\tmarker.setAttributes(", "-\t\t\tnew String[] {IMarker.MESSAGE, IMarker.SEVERITY, IJavaModelMarker.CATEGORY_ID, IMarker.SOURCE_ID},", "-\t\t\tnew Object[] {", "-\t\t\t\tMessages.bind(Messages.build_inconsistentProject, e.getLocalizedMessage()),", "-\t\t\t\tnew Integer(IMarker.SEVERITY_ERROR),", "-\t\t\t\tnew Integer(CategorizedProblem.CAT_BUILDPATH),", "-\t\t\t\tJavaBuilder.SOURCE_ID", "-\t\t\t}", "-\t\t);", "+\t\tcreateInconsistentBuildMarker(e.coreException);"]}], "num": 2040}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f077f4c54dc2f3ee158a54d9e9decc7e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f51e0737427443404959d1f4390b4bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "79774393baaba7f9e5f3461242a5b822bf662647", "commitAfterChange": "8b644ce068ecf49daa5da8af14e814933ab3df61", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  protected void checkAgainstNullTypeAnnotation(BlockScope scope, TypeBinding requiredType, Expression expression, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  protected void checkAgainstNullTypeAnnotation(BlockScope scope, TypeBinding requiredType, Expression expression, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\tinternalCheckAgainstNullTypeAnnotation(scope, requiredType, ce.valueIfTrue, ce.ifTrueNullStatus, flowContext);", "-\t\tinternalCheckAgainstNullTypeAnnotation(scope, requiredType, ce.valueIfFalse, ce.ifFalseNullStatus, flowContext);", "+\t\tinternalCheckAgainstNullTypeAnnotation(scope, requiredType, ce.valueIfTrue, ce.ifTrueNullStatus, flowContext, flowInfo);", "+\t\tinternalCheckAgainstNullTypeAnnotation(scope, requiredType, ce.valueIfFalse, ce.ifFalseNullStatus, flowContext, flowInfo);", "-\tinternalCheckAgainstNullTypeAnnotation(scope, requiredType, expression, nullStatus, flowContext);", "+\tinternalCheckAgainstNullTypeAnnotation(scope, requiredType, expression, nullStatus, flowContext, flowInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d903ce4c18a8c60c4e16df2b357d9ad6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "b93a217fe6b68aa2016c37812b125d5d097ba1a3", "commitAfterChange": "1beaef02926dace59f07acb73879fd00f7c0b3eb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "  protected void checkAgainstNullTypeAnnotation(BlockScope scope, TypeBinding requiredType, Expression expression, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  protected void checkAgainstNullTypeAnnotation(BlockScope scope, TypeBinding requiredType, Expression expression, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\tif (expression instanceof ConditionalExpression && expression.isPolyExpression()) {", "+\t\t// drill into both branches using existing nullStatus per branch:", "+\t\tConditionalExpression ce = (ConditionalExpression) expression;", "+\t\tinternalCheckAgainstNullTypeAnnotation(scope, requiredType, ce.valueIfTrue, ce.ifTrueNullStatus, flowContext);", "+\t\tinternalCheckAgainstNullTypeAnnotation(scope, requiredType, ce.valueIfFalse, ce.ifFalseNullStatus, flowContext);", "+\t\treturn;", "+\t}", "+\tinternalCheckAgainstNullTypeAnnotation(scope, requiredType, expression, nullStatus, flowContext);", "+}"]}], "num": 59594}
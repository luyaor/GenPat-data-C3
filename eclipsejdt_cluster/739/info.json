{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1ddebd5a8b3b93451b74e8c53dadf3e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bfd784498e10423f8f1739baebe518c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "3388256fa80bf40daffa9f485d2674986c875b82", "commitAfterChange": "7a73f29da5ea73cce41fc54b0fc3ad302149f476", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic ASTNode convert(boolean isInterface, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": "  \tpublic ASTNode convert(boolean isInterface, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "diff": ["-\t\t\tName thrownException;", "-\t\t\tint i = 0;", "-\t\t\tdo {", "-\t\t\t\tthrownException = convert(thrownExceptions[i++]);", "-\t\t\t\tmethodDecl.thrownExceptions().add(thrownException);", "-\t\t\t} while (i < thrownExceptionsLength);", "-\t\t\tmethodHeaderEnd = thrownException.getStartPosition() + thrownException.getLength();", "+\t\t\tif (this.ast.apiLevel() < AST.JLS8) {", "+\t\t\t\tName thrownException;", "+\t\t\t\tint i = 0;", "+\t\t\t\tdo {", "+\t\t\t\t\tthrownException = convert(thrownExceptions[i++]);", "+\t\t\t\t\tmethodDecl.thrownExceptions().add(thrownException);", "+\t\t\t\t} while (i < thrownExceptionsLength);", "+\t\t\t\tmethodHeaderEnd = thrownException.getStartPosition() + thrownException.getLength();\t\t\t\t", "+\t\t\t} else {", "+\t\t\t\tType thrownExceptionType;", "+\t\t\t\tint i = 0;", "+\t\t\t\tdo {", "+\t\t\t\t\tthrownExceptionType = convertType(thrownExceptions[i++]);", "+\t\t\t\t\tmethodDecl.thrownExceptionTypes().add(thrownExceptionType);", "+\t\t\t\t} while (i < thrownExceptionsLength);", "+\t\t\t\tmethodHeaderEnd = thrownExceptionType.getStartPosition() + thrownExceptionType.getLength();\t\t\t\t", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8ac45feb0817927b22315566210e0db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "9047de642a4fe05a5bba1fa6d221ad8ba57bc55b", "commitAfterChange": "d6effcfe4a21d9ecb9e022e5dc306788e2e35beb", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\t\t\t\t\t\t\tif (original.thrownExceptions != original2.thrownExceptions) {", "-\t\t\t\t\t\t\t\tif (original2.thrownExceptions == Binding.NO_EXCEPTIONS) {", "+\t\t\t\t\t\t\tif (current.thrownExceptions != next.thrownExceptions) {", "+\t\t\t\t\t\t\t\tif (next.thrownExceptions == Binding.NO_EXCEPTIONS) {", "-\t\t\t\t\t\t\t\t\t\tmostSpecificExceptions = original.thrownExceptions;", "+\t\t\t\t\t\t\t\t\t\tmostSpecificExceptions = current.thrownExceptions;", "-\t\t\t\t\t\t\t\t\tint original2Length = original2.thrownExceptions.length;", "+\t\t\t\t\t\t\t\t\tint nextLength = next.thrownExceptions.length;", "-\t\t\t\t\t\t\t\t\t\tfor (int s = 0; s < original2Length; s++) {", "-\t\t\t\t\t\t\t\t\t\t\tif (exception.isCompatibleWith(original2.thrownExceptions[s])) {", "+\t\t\t\t\t\t\t\t\t\tfor (int s = 0; s < nextLength; s++) {", "+\t\t\t\t\t\t\t\t\t\t\tReferenceBinding nextException = next.thrownExceptions[s];", "+\t\t\t\t\t\t\t\t\t\t\tif (exception.isCompatibleWith(nextException)) {", "-\t\t\t\t\t\t\t\t\t\t\t} else if (original2.thrownExceptions[s].isCompatibleWith(exception)) {", "-\t\t\t\t\t\t\t\t\t\t\t\ttemp.add(original2.thrownExceptions[s]);", "+\t\t\t\t\t\t\t\t\t\t\t} else if (nextException.isCompatibleWith(exception)) {", "+\t\t\t\t\t\t\t\t\t\t\t\ttemp.add(nextException);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0f6940ee83512931f8c529d3b24e807", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingMethodDeclTest.java", "commitBeforeChange": "8db9affa29727763215f4c4f12ddd26301a2c48f", "commitAfterChange": "6bc11449bdc77b64b2e9fa71343f1b205e63ae9f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": "     \tpublic void testListRemoves_only_2() throws Exception", "signatureAfterChange": "     \tpublic void testListRemoves() throws Exception", "diff": ["-\tpublic void testListRemoves_only_2() throws Exception {", "+\tpublic void testListRemoves() throws Exception {", "-\t\t\trewrite.set(methodDecl, INTERNAL_METHOD_MODIFIERS_PROPERTY, new Integer(0), null);", "+\t\t\tsetModifiers(rewrite, methodDecl, 0);", "-\t\t\tList thrownExceptions= methodDecl.thrownExceptions();", "+\t\t\tList thrownExceptions= getThrownExceptions(methodDecl);", "-\t\t\tList thrownExceptions= methodDecl.thrownExceptions();", "+\t\t\tList thrownExceptions= getThrownExceptions(methodDecl);", "-\t\t\tList thrownExceptions= methodDecl.thrownExceptions();", "+\t\t\tList thrownExceptions= getThrownExceptions(methodDecl);", "-\t\t\tList thrownExceptions= methodDecl.thrownExceptions();", "+\t\t\tList thrownExceptions= getThrownExceptions(methodDecl);", "-\t\t\tList thrownExceptions= methodDecl.thrownExceptions();", "+\t\t\tList thrownExceptions= getThrownExceptions(methodDecl);"]}], "num": 739}
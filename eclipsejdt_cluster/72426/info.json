{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25dffb83d21be0e44e1d63b1ab855227", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a148f6b5842408054b3da58dd742b8bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "11c24986fc925cfc43f4c88e72e0daee39a1576b", "commitAfterChange": "55350d5af8386833b94a470ab6a0d389ee3fc665", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType)", "signatureAfterChange": " \tprivate void findConstructors( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean forAnonymousType)", "diff": ["-\t", "+\t\t\t\t\t", "+\t\t\t\t\tboolean hasRestrictedAccess = false;", "+//\t\t\t\t\tboolean hasRestrictedAccess = constructor.declaringClass.hasRestrictedAccess();", "+//\t\t\t\t\tif(this.options.checkRestrictions && hasRestrictedAccess) continue next;", "+\t\t\t\t\t", "+\t\t\t\t\t\trelevance += computeRelevanceForRestrictions(hasRestrictedAccess);", "+\t\t\t\t\t\trelevance += computeRelevanceForRestrictions(hasRestrictedAccess);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7ae693338a44067aed31848a3289735", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "f4bdb5d912579981f22fe9e7c4679e93b1a5f059", "commitAfterChange": "a3a09ad256da223aa1f3d2fe29b81e346d09a16c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": " \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["+\t\t\tboolean didAlreadyComplain = false;", "-\t\t\t\tif ((caseIndex < caseCount)", "-\t\t\t\t\t&& (statement == cases[caseIndex])) { // statements[i] is a case or a default case", "+\t\t\t\tif ((caseIndex < caseCount) && (statement == cases[caseIndex])) { // statement is a case", "-\t\t\t\t} else {", "-\t\t\t\t\tif (statement == defaultCase) {", "-\t\t\t\t\t\tcaseInits = caseInits.mergedWith(flowInfo.copy().unconditionalInits());", "-\t\t\t\t\t}", "+\t\t\t\t\tdidAlreadyComplain = false; // reset complaint", "+\t\t\t\t} else if (statement == defaultCase) { // statement is the default case", "+\t\t\t\t\tcaseInits = caseInits.mergedWith(flowInfo.copy().unconditionalInits());", "+\t\t\t\t\tdidAlreadyComplain = false; // reset complaint", "-\t\t\t\tif (!caseInits.complainIfUnreachable(statement, scope)) {", "+\t\t\t\tif (!caseInits.complainIfUnreachable(statement, scope, didAlreadyComplain)) {", "+\t\t\t\t} else {", "+\t\t\t\t\tdidAlreadyComplain = true;"]}], "num": 72426}
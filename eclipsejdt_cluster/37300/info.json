{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "654c714167e6805483d28af596090d8b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "041a1d0b0d7bbaed9315b30a12f97349", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/QualifiedTypeDeclarationPattern.java", "commitBeforeChange": "cbbe8b69b29b99c8c679b98644156abe11f1564d", "commitAfterChange": "ab74babcdf0f89ee66e36b91189c0d301a4da95d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void decodeIndexKey(char[] key)", "signatureAfterChange": " public void decodeIndexKey(char[] key)", "diff": ["-\tint start = slash + 1;", "-\tslash = CharOperation.indexOf(SEPARATOR, key, start);", "-\tint secondSlash = CharOperation.indexOf(SEPARATOR, key, slash + 1);", "-\tthis.packageIndex = -1; // used to compute package vs. enclosingTypeNames in MultiTypeDeclarationPattern", "-\tif (start + 1 == secondSlash) {", "-\t\tthis.qualification = CharOperation.NO_CHAR; // no package name or enclosingTypeNames", "-\t} else if (slash + 1 == secondSlash) {", "-\t\tthis.qualification = CharOperation.subarray(key, start, slash); // only a package name", "-\t} else if (slash == start) {", "-\t\tthis.qualification = CharOperation.subarray(key, slash + 1, secondSlash); // no package name", "-\t\tthis.packageIndex = 0;", "+\tint start = ++slash;", "+\tif (key[start] == SEPARATOR) {", "+\t\tthis.pkg = CharOperation.NO_CHAR;", "-\t\tthis.qualification = CharOperation.subarray(key, start, secondSlash);", "-\t\tthis.packageIndex = slash - start;", "-\t\tthis.qualification[this.packageIndex] = '.';", "+\t\tslash = CharOperation.indexOf(SEPARATOR, key, start);", "+\t\tthis.pkg = internedPackageNames.add(CharOperation.subarray(key, start, slash));", "+\tthis.qualification = this.pkg;", "+", "+\t// Retrieve enclosing type names", "+\tstart = slash + 1;", "+\tlast -= 2; // position of ending slash", "+\tif (start == last) {", "+\t\tthis.enclosingTypeNames = CharOperation.NO_CHAR_CHAR;", "+\t} else {", "+\t\tint length = this.qualification.length;", "+\t\tint size = last - start;", "+\t\tSystem.arraycopy(this.qualification, 0, this.qualification = new char[length+1+size], 0, length);", "+\t\tthis.qualification[length] = '.';", "+\t\tif (last == (start+1) && key[start] == ZERO_CHAR) {", "+\t\t\tthis.enclosingTypeNames = ONE_ZERO_CHAR;", "+\t\t\tthis.qualification[length+1] = ZERO_CHAR;", "+\t\t} else {", "+\t\t\tthis.enclosingTypeNames = CharOperation.splitOn('.', key, start, last);", "+\t\t\tSystem.arraycopy(key, start, this.qualification, length+1, size);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95e7b24527d5d06cc2e230ce859a19c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredField.java", "commitBeforeChange": "f338c86815ffb4c165b8024ba4f28cade0b2b75f", "commitAfterChange": "a98d7d87df415161ba75f53acbdbe8d316ea160c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public RecoveredElement add(LambdaExpression expression, int bracketBalanceValue)", "signatureAfterChange": " public RecoveredElement add(TypeDeclaration typeDeclaration, int bracketBalanceValue)", "diff": ["- */", "-public RecoveredElement add(LambdaExpression expression, int bracketBalanceValue) {", "-", "-\tif (this.alreadyCompletedFieldInitialization) {", "-\t\treturn super.add(expression, bracketBalanceValue);", "-\t} else {", "-\t\tif (expression.sourceEnd > 0)", "-\t\t\t\tthis.alreadyCompletedFieldInitialization = true;", "-\t\t// else we may still be inside the initialization, having parsed only a part of it yet", "-\t\tthis.fieldDeclaration.initialization = expression;", "-\t\tthis.fieldDeclaration.declarationSourceEnd = expression.sourceEnd;", "-\t\tthis.fieldDeclaration.declarationEnd = expression.sourceEnd;", "-\t\treturn this.initializerLambda = new RecoveredLambdaExpression(expression, this, bracketBalanceValue);"]}], "num": 37300}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb12ce8137069f932fc24ba9c516219e", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a2b9440139b2773dd8a9b9ab0b506a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "59ccdbf9540bdb894570a3ebe1e5cfa637624073", "commitAfterChange": "29911619e9eb038f230f09e2190cd9ca1e9cfd72", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["-\t\tif (this.didResolve) { // is a shared type reference which was already resolved", "+\t\tif ((this.bits & ASTNode.DidResolve) != 0) { // is a shared type reference which was already resolved", "-\t    this.didResolve = true;", "-\t    boolean isClassScope = scope.kind == Scope.CLASS_SCOPE;", "-\t    Binding binding = scope.getPackage(this.tokens);", "-\t    if (binding != null && !binding.isValidBinding()) {", "-\t    \tthis.resolvedType = (ReferenceBinding) binding;", "+\t\tthis.bits |= ASTNode.DidResolve;", "+\t\tboolean isClassScope = scope.kind == Scope.CLASS_SCOPE;", "+\t\tBinding binding = scope.getPackage(this.tokens);", "+\t\tif (binding != null && !binding.isValidBinding()) {", "+\t\t\tthis.resolvedType = (ReferenceBinding) binding;", "-\t\t\t    TypeReference[] args = this.typeArguments[i];", "-\t\t\t    if (args != null) {", "+\t\t\t\tTypeReference[] args = this.typeArguments[i];", "+\t\t\t\tif (args != null) {", "-\t\t\t\t\t    TypeReference typeArgument = args[j];", "-\t\t\t\t\t    if (isClassScope) {", "-\t\t\t\t\t    \ttypeArgument.resolveType((ClassScope) scope);", "-\t\t\t\t\t    } else {", "-\t\t\t\t\t    \ttypeArgument.resolveType((BlockScope) scope, checkBounds);", "-\t\t\t\t\t    }", "+\t\t\t\t\t\tTypeReference typeArgument = args[j];", "+\t\t\t\t\t\tif (isClassScope) {", "+\t\t\t\t\t\t\ttypeArgument.resolveType((ClassScope) scope);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\ttypeArgument.resolveType((BlockScope) scope, checkBounds);", "+\t\t\t\t\t\t}", "-\t\t\t    }\t\t\t\t", "+\t\t\t\t}", "-\t    PackageBinding packageBinding = binding == null ? null : (PackageBinding) binding;", "+\t\tPackageBinding packageBinding = binding == null ? null : (PackageBinding) binding;", "-\t    for (int i = packageBinding == null ? 0 : packageBinding.compoundName.length, max = this.tokens.length; i < max; i++) {", "+\t\tfor (int i = packageBinding == null ? 0 : packageBinding.compoundName.length, max = this.tokens.length; i < max; i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99e18bb5bf7006cfc26f176a744d434a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "59ccdbf9540bdb894570a3ebe1e5cfa637624073", "commitAfterChange": "29911619e9eb038f230f09e2190cd9ca1e9cfd72", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "diff": ["-\t\tif (this.didResolve) { // is a shared type reference which was already resolved", "+\t\tif ((this.bits & ASTNode.DidResolve) != 0) { // is a shared type reference which was already resolved", "-\t    this.didResolve = true;", "+\t\tthis.bits |= ASTNode.DidResolve;", "-\t\t\t    boolean isClassScope = scope.kind == Scope.CLASS_SCOPE;", "+\t\t\t\tboolean isClassScope = scope.kind == Scope.CLASS_SCOPE;", "-\t\t\t\t    TypeReference typeArgument = this.typeArguments[i];", "-\t\t\t\t    if (isClassScope) {", "-\t\t\t\t    \ttypeArgument.resolveType((ClassScope) scope);", "-\t\t\t\t    } else {", "-\t\t\t\t    \ttypeArgument.resolveType((BlockScope) scope, checkBounds);", "-\t\t\t\t    }", "-\t\t\t\t}\t\t\t\t", "+\t\t\t\t\tTypeReference typeArgument = this.typeArguments[i];", "+\t\t\t\t\tif (isClassScope) {", "+\t\t\t\t\t\ttypeArgument.resolveType((ClassScope) scope);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\ttypeArgument.resolveType((BlockScope) scope, checkBounds);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tthis.resolvedType = scope.getMemberType(token, enclosingType);\t\t    ", "+\t\t\tthis.resolvedType = scope.getMemberType(token, enclosingType);"]}], "num": 64762}
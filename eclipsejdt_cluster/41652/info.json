{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c5cf20a409c5f8c441b00e43c9c9b97", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e0b906b03fcdcffe466c45366216515", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "2cc831f9f10c3e24fea148434274a75abab8dd26", "commitAfterChange": "56054b620e1ac782aff2fc22f58c08767c873829", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void analyseCode( \t\tClassScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void analyseCode( \t\tClassScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\t\t\t\t// special test for empty methods that should return something", "-\t\t\t\t\tif ((statements == null) && (returnType != VoidBinding)) {", "-\t\t\t\t\t\tscope.problemReporter().shouldReturn(returnType, this);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tscope.problemReporter().shouldReturn(", "-\t\t\t\t\t\t\treturnType,", "-\t\t\t\t\t\t\tstatements[statements.length - 1]);", "-\t\t\t\t\t}", "+\t\t\t\t\tscope.problemReporter().shouldReturn(returnType, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2eb34f1bb863a132896a9bcd636d9fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "bf1ba1c1732b0be00fbd03cfd8ae394b6a169e63", "commitAfterChange": "debb51f61b0b4a5b1a6926f67a451ba72125546c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void analyseCode( \t\tClassScope classScope, \t\tInitializationFlowContext initializationContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void analyseCode( \t\tClassScope classScope, \t\tInitializationFlowContext initializationContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\t\tTypeBinding returnType = binding.returnType;", "-\t\t\tif ((returnType == VoidBinding) || isAbstract()) {", "+\t\t\tTypeBinding returnTypeBinding = binding.returnType;", "+\t\t\tif ((returnTypeBinding == VoidBinding) || isAbstract()) {", "-\t\t\t\t\tscope.problemReporter().shouldReturn(returnType, this);", "+\t\t\t\t\tscope.problemReporter().shouldReturn(returnTypeBinding, this);"]}], "num": 41652}
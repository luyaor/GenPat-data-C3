{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cd38566e921a2ab3b7582173b7582025", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b1ad173c833bb58d94aa46eb46d3d71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elementutils/ElementUtilsProc.java", "commitBeforeChange": "4b460199498c48cda44ce10125aa5901a10bff62", "commitAfterChange": "ccd12469d7fc21a8e1a0a597451a059df56002ad", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate boolean examineGetDocComment()", "signatureAfterChange": " \tprivate boolean examineGetDocComment()", "diff": ["-\t\tnameToDoc.put(\"FChildI\", \" Javadoc on nested interface FChildI\\n\");", "+\t\tnameToDoc.put(\"FChildI\", ", "+\t\t\t\t\" Javadoc on nested interface FChildI\\n\" +", "+\t\t\t\t\"\\tthis line has tab after asterisk and ends with another tab\\t\\n\" +", "+\t\t\t\t\"\\tthis one too\\t\\n\" +", "+\t\t\t\t\"   this line has three spaces after asterisk and ends with three spaces   \\n\" +", "+\t\t\t\t\" this line has only one space before the asterisk\\n\");", "+\t\tnameToDoc.put(\"_fieldT1_private\", ", "+\t\t\t\t\"\\n\" +", "+\t\t\t\t\" Javadoc on _fieldT1_private\\n\" +", "+\t\t\t\t\"  this line starts with two spaces, no asterisk\\n\" +", "+\t\t\t\t\"        This line starts, contains\\tand ends with a tab\\t\\n\" +", "+\t\t\t\t\"                 This line starts with a space, tab, space, tab, space\\n\");", "+\t\tnameToDoc.put(\"getAnonymousObjectAbstract\", \"\");", "+\t\tnameToDoc.put(\"add\", \"\\n\t@add(int)\\n\");", "+\t\tnameToDoc.put(\"foo\", \"\\n Creates a new instance of AllChecks \\n\");", "+\t\tnameToDoc.put(\"bar\", \" @bar\\t(int)\\n\");", "+\t\tnameToDoc.put(\"bar2\", \"\\t@bar2(int)\\n\");", "+\t\tnameToDoc.put(\"m\", \"                Method\\tm\\n\");", "+\t\tnameToDoc.put(\"m1\", \"This is a comment for the method m1,\\n\" + ", "+\t\t\t\t\"  it is on two lines\\n\");", "+\t\tnameToDoc.put(\"m2\", \"Another comment - starts on first line and\\n\" + ", "+\t\t\t\t\"    continue on the second line \");", "+\t\tnameToDoc.put(\"m3\", \" One more test case that.\\n\" + ", "+\t\t\t\t\" needs\\n\" + ", "+\t\t\t\t\" to be verified.\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\" An empty line with no spaces need to be seen as an empty line.\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\" End of the comment.\\n\");", "-\t\t", "-\t\t\t\t\treportError(\"examineGetDocComment: Expected getDocComment(\" + name + \") to return null, but got \" + actual);", "+\t\t\t\t\treportError(\"examineGetDocComment: Expected getDocComment(\" + name + \") to return null, but got \" + _elementUtils.getDocComment(e));", "-\t\t\t\t\t\treportError(\"examineGetDocComment: Unexpected result from getDocComment(\" + name + \"): \" + actual);", "+\t\t\t\t\t\treportError(\"examineGetDocComment: Unexpected result from getDocComment(\" + name + \"): \" + _elementUtils.getDocComment(e));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61f2fb1b57b995c7cc90c3ea592e1c89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/FileGenerationTests.java", "commitBeforeChange": "f2e69392c2b77f78381f44504717309f40a69302", "commitAfterChange": "cfc6d63918bb7d5d29292fed4468743597d36bdc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic void testTextFileGen() throws Exception", "signatureAfterChange": " \t \tpublic void testTextFileGen() throws Exception", "diff": ["+\t\tfinal String TEXT_FILE_NAME = \"TextFile.txt\";", "+", "+\t\tclearProcessorResult(TextGenAnnotationProcessor.class);", "-\t\t\t\t\"@TextGenAnnotation\" + \"\\n\" +", "+\t\t\t\t\"@TextGenAnnotation(\\\"\" + TEXT_FILE_NAME + \"\\\")\" + \"\\n\" +", "-\t\tFile theFile = new File(new File(outputRootPath), TextGenAnnotationProcessor.FILE_NAME);", "+\t\tFile theFile = new File(new File(outputRootPath), TEXT_FILE_NAME);", "-\t\t", "-\t\t// Look for the file again", "+\t\tcheckProcessorResult(TextGenAnnotationProcessor.class);", "-\t\t// remove the annotation, and the file should be deleted", "+\t\t// Change the annotation to specify an illegal filename, and an exception should be thrown", "+\t\tcode = ", "+\t\t\t\"package test;\" + \"\\n\" +", "+\t\t\t\"import org.eclipse.jdt.apt.tests.annotations.filegen.TextGenAnnotation;\" + \"\\n\" +", "+\t\t\t\"@TextGenAnnotation(\\\">.txt\\\")\" + \"\\n\" +", "+\t\t\t\"public class Test\" + \"\\n\" +", "+\t\t\t\"{\" + \"\\n\" +", "+\t\t\t\"}\";", "+\t\tenv.addClass(srcRoot, \"test\", \"Test\", code);", "+\t\t", "+\t\tfullBuild( project.getFullPath() );", "+\t\texpectingNoProblems();", "+\t\tassertEquals(\"Could not generate text file due to IOException\", getProcessorResult(TextGenAnnotationProcessor.class));", "+\t\tassertTrue(\"File was found, but should be deleted: \" + theFile.getAbsolutePath(), !theFile.exists());", "+\t\t", "+\t\t// remove the annotation, and the file should be deleted and processor should not run", "-\t\t", "-\t\t// Look for the file -- it should be gone", "+\t\tassertEquals(null, getProcessorResult(TextGenAnnotationProcessor.class));"]}], "num": 11326}
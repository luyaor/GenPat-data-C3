{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a8fdc4f216b288d46fc66a73302ebb3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3420d41eec44de38fca021cd9c9bf45b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "71df68ac6bbd7c5b4b673539241b9c1cc905574c", "commitAfterChange": "04c08732703d5f5e97b66e89468d2f87b7f84cff", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic IType findType(String typeName, String packageName, boolean partialMatch, int acceptFlags, boolean considerSecondaryTypes, boolean waitForIndexes, IProgressMonitor monitor)", "signatureAfterChange": " \tpublic IType findType(String typeName, String packageName, boolean partialMatch, int acceptFlags, boolean considerSecondaryTypes, boolean waitForIndexes, IProgressMonitor monitor)", "diff": ["-\t\tIJavaProject project = null;", "+\t\tHashSet projects = null;", "-\t\t\tif (considerSecondaryTypes && project == null) {", "-\t\t\t\tproject = packages[i].getJavaProject();", "+\t\t\tif (considerSecondaryTypes) {", "+\t\t\t\tif (projects == null) projects = new HashSet(3);", "+\t\t\t\tprojects.add(packages[i].getJavaProject());", "-\t\tif (considerSecondaryTypes && project != null) {", "-\t\t\ttype = findSecondaryType(packageName, typeName, project, waitForIndexes, monitor);", "+\t\tif (considerSecondaryTypes && projects != null) {", "+\t\t\tIterator allProjects = projects.iterator();", "+\t\t\twhile (type == null && allProjects.hasNext()) {", "+\t\t\t\ttype = findSecondaryType(packageName, typeName, (IJavaProject) allProjects.next(), waitForIndexes, monitor);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51e73be63d364d88f92704e7d87df546", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/MemberDeclarationImpl.java", "commitBeforeChange": "03e205d7db02078dce9accf78d78c9d9a6ce6117", "commitAfterChange": "7ff51a474972e200f8003fdc2186f43ef4e82e14", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public String getDocComment()", "signatureAfterChange": "      public String getDocComment()", "diff": ["-\t\t\tfinal BodyDeclaration bodyDecl = (BodyDeclaration)getAstNode();", "-\t\t\tif( bodyDecl != null ){", "-\t\t\t\tfinal Javadoc javaDoc = bodyDecl.getJavadoc();", "-\t            if( javaDoc == null ) return \"\";", "-\t            return javaDoc.toString();", "-\t\t\t}", "-\t\t\treturn \"\";", "+        \tfinal ASTNode node = getAstNode();        \t", "+        \tif(node != null){", "+        \t\tif( node instanceof BodyDeclaration )", "+        \t\t\t", "+        \t\t\treturn getDocComment((BodyDeclaration)node);", "+", "+        \t\telse if( node.getNodeType() == ASTNode.VARIABLE_DECLARATION_FRAGMENT ){", "+        \t\t\tfinal ASTNode parent = node.getParent();", "+        \t\t\t// a field declaration", "+        \t\t\tif( parent instanceof BodyDeclaration )", "+        \t\t\t\treturn getDocComment((BodyDeclaration)parent);", "+        \t\t\t", "+        \t\t}", "+        \t\treturn \"\";", "+        \t}  ", "-", "+    }"]}], "num": 7293}
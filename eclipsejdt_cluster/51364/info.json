{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51bf22eb1555e7ca571d1e273b2bb6ff", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29fc9abd209a883d54bc81aedd9d12b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public void checkComment()", "signatureAfterChange": "  public void checkComment()", "diff": ["-\tsuper.checkComment();", "+\tif (this.currentElement != null && this.scanner.commentPtr >= 0) {", "+\t\tflushCommentsDefinedPriorTo(this.endStatementPosition); // discard obsolete comments during recovery", "+\t}", "+\t", "+\tint lastComment = this.scanner.commentPtr;", "+\t", "+\tif (this.modifiersSourceStart >= 0) {", "+\t\t// eliminate comments located after modifierSourceStart if positionned", "+\t\twhile (lastComment >= 0 && Math.abs(this.scanner.commentStarts[lastComment]) > this.modifiersSourceStart) lastComment--;", "+\t}", "+\tif (lastComment >= 0) {", "+\t\t// consider all remaining leading comments to be part of current declaration", "+\t\tthis.modifiersSourceStart = Math.abs(this.scanner.commentStarts[0]); ", "+\t", "+\t\t// check deprecation in last comment if javadoc (can be followed by non-javadoc comments which are simply ignored)\t", "+\t\twhile (lastComment >= 0 && this.scanner.commentStops[lastComment] < 0) lastComment--; // non javadoc comment have negative end positions", "+\t\tif (lastComment >= 0 && this.javadocParser != null) {", "+\t\t\tif (this.javadocParser.checkDeprecation(", "+\t\t\t\t\tthis.scanner.commentStarts[lastComment],", "+\t\t\t\t\tthis.scanner.commentStops[lastComment] - 1)) { //stop is one over,", "+\t\t\t\tcheckAndSetModifiers(AccDeprecated);", "+\t\t\t}", "+\t\t\tthis.javadoc = this.javadocParser.docComment;\t// null if check javadoc is not activated ", "+\t\t}", "+\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0cb7d5ee68796cd1dc83e7d576c9be0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "a2c7422a98f9fe97d80f79f81662377c27d5775b", "commitAfterChange": "dc94927bfc82d6d86b8d7e3196266d1ecd1abb77", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void checkComment()", "signatureAfterChange": " public void checkComment()", "diff": ["-\tsuper.checkComment();", "+\t// discard obsolete comments while inside methods or fields initializer (see bug 74369)", "+\tif (!(this.diet && this.dietInt==0) && this.scanner.commentPtr >= 0) {", "+\t\tflushCommentsDefinedPriorTo(this.endStatementPosition);", "+\t}", "+\t", "+\tint lastComment = this.scanner.commentPtr;", "+\t", "+\tif (this.modifiersSourceStart >= 0) {", "+\t\t// eliminate comments located after modifierSourceStart if positionned", "+\t\twhile (lastComment >= 0 && Math.abs(this.scanner.commentStarts[lastComment]) > this.modifiersSourceStart) lastComment--;", "+\t}", "+\tif (lastComment >= 0) {", "+\t\t// consider all remaining leading comments to be part of current declaration", "+\t\tthis.modifiersSourceStart = Math.abs(this.scanner.commentStarts[0]); ", "+\t", "+\t\t// check deprecation in last comment if javadoc (can be followed by non-javadoc comments which are simply ignored)\t", "+\t\twhile (lastComment >= 0 && this.scanner.commentStops[lastComment] < 0) lastComment--; // non javadoc comment have negative end positions", "+\t\tif (lastComment >= 0 && this.javadocParser != null) {", "+\t\t\tint commentEnd = this.scanner.commentStops[lastComment] - 1; //stop is one over,", "+\t\t\t// do not report problem before last parsed comment while recovering code...", "+\t\t\tthis.javadocParser.reportProblems = this.currentElement == null || commentEnd > this.lastJavadocEnd;", "+\t\t\tif (this.javadocParser.checkDeprecation(lastComment)) {", "+\t\t\t\tcheckAndSetModifiers(ClassFileConstants.AccDeprecated);", "+\t\t\t}", "+\t\t\tthis.javadoc = this.javadocParser.docComment;\t// null if check javadoc is not activated", "+\t\t\tif (currentElement == null) this.lastJavadocEnd = commentEnd;", "+\t\t}", "+\t}"]}], "num": 51364}
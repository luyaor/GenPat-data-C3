{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a687d4eced5a6715d8de4803355702b0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3694f4f6e9fe74060711ff7538fb1cd8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "f342df887ac2bde5a33a69c02311bfd7246a7e43", "commitAfterChange": "aba5db418de65ea21899bfdf893833cd0fc3f586", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate boolean examineGetAnnotation()", "signatureAfterChange": " \tprivate boolean examineGetAnnotation()", "diff": ["+\t\tTypedAnnos.AnnoArrayInt annoArrayInt = annotatedElement.getAnnotation(TypedAnnos.AnnoArrayInt.class);", "+\t\tif (null == annoArrayInt) {", "+\t\t\treportError(badValue + \"AnnoArrayInt\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tint[] arrayInt = annoArrayInt.value();", "+\t\tif (arrayInt == null || arrayInt.length != 3 || arrayInt[1] != 8) {", "+\t\t\treportError(badValue + \"AnnoArrayInt contents\");", "+\t\t\treturn false;", "+\t\t}", "+\t\t//TODO: AnnoArrayString", "+\t\t//TODO: AnnoArrayAnnoChar", "+\t\t//TODO: AnnoArrayEnumConst"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1e4d92732fceb92dd4aa1ab8a2cfc56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "0218d2fde27ae288f3eb227e030a2aee2bd32f49", "commitAfterChange": "025f6a96e3e3c149e01b0d88c99b73f42c4c49af", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic static JavaElement getUnresolvedJavaElement(MethodBinding methodBinding, WorkingCopyOwner workingCopyOwner, BindingsToNodesMap bindingsToNodes)", "signatureAfterChange": " \tpublic static JavaElement getUnresolvedJavaElement(MethodBinding methodBinding, WorkingCopyOwner workingCopyOwner, BindingsToNodesMap bindingsToNodes)", "diff": ["+\t\t\tReferenceBinding enclosingType = original.declaringClass.enclosingType();", "+\t\t\tboolean isInnerBinaryTypeConstructor = isBinary && original.isConstructor() && enclosingType != null;", "-\t\t\tif (isBinary) {", "-\t\t\t\tReferenceBinding enclosingType = original.declaringClass.enclosingType();", "-\t\t\t\tboolean isInnerBinaryTypeConstructor = original.isConstructor() && enclosingType != null;", "-\t\t\t\tint declaringIndex = isInnerBinaryTypeConstructor ? 1 : 0;", "-\t\t\t\tString[] parameterSignatures = new String[declaringIndex + length];", "-\t\t\t\tif (isInnerBinaryTypeConstructor) {", "-\t\t\t\t\tparameterSignatures[0] = new String(enclosingType.genericTypeSignature()).replace('/', '.');", "-\t\t\t\t}", "-\t\t\t\tfor (int i = 0;  i < length; i++) {", "-\t\t\t\t\tchar[] signature = parameters[i].genericTypeSignature();", "+\t\t\tint declaringIndex = isInnerBinaryTypeConstructor ? 1 : 0;", "+\t\t\tString[] parameterSignatures = new String[declaringIndex + length];", "+\t\t\tif (isInnerBinaryTypeConstructor)", "+\t\t\t\tparameterSignatures[0] = new String(enclosingType.genericTypeSignature()).replace('/', '.');", "+\t\t\tfor (int i = 0;  i < length; i++) {", "+\t\t\t\tchar[] signature = parameters[i].genericTypeSignature();", "+\t\t\t\tif (isBinary) {", "-\t\t\t\t\tparameterSignatures[declaringIndex + i] = new String(signature);", "+\t\t\t\t} else {", "+\t\t\t\t\tsignature = toUnresolvedTypeSignature(signature);", "-\t\t\t\tIMethod result = declaringType.getMethod(selector, parameterSignatures);", "-\t\t\t\treturn (JavaElement) result;", "+\t\t\t\tparameterSignatures[declaringIndex + i] = new String(signature);", "+\t\t\tIMethod result = declaringType.getMethod(selector, parameterSignatures);", "+\t\t\tif (isBinary)", "+\t\t\t\treturn (JavaElement) result;", "+\t\t\tif (result.exists()) // if perfect match (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=249567 )", "+\t\t\t\treturn (JavaElement) result;", "-\t\t\treturn findMethod(selector, parameters, methods);", "-\t\t}", "-\t}", "+\t\t\tIMethod[] candidates = Member.findMethods(result, methods);", "+\t\t\tif (candidates == null || candidates.length == 0)", "+\t\t\treturn (JavaElement) candidates[0];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3c0a98bab4f44b1f765a5d5db7af163", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "d10c3a13f9bf3e38045d73a77dc467fa13aa4633", "commitAfterChange": "dc0f545f068e33d369e4afe03a62ea04b3af5d6b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate boolean examineGetAnnotation()", "signatureAfterChange": " \tprivate boolean examineGetAnnotation()", "diff": ["+\t\t", "-\t\t//TODO: AnnoArrayString", "+\t\t", "+\t\tTypedAnnos.AnnoArrayString annoArrayString = annotatedElement.getAnnotation(TypedAnnos.AnnoArrayString.class);", "+\t\tif (null == annoArrayString) {", "+\t\t\treportError(badValue + \"AnnoArrayString\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tString[] arrayString = annoArrayString.value();", "+\t\tif (arrayString == null || arrayString.length != 2 || !\"quux\".equals(arrayString[1])) {", "+\t\t\treportError(badValue + \"AnnoArrayString contents\");", "+\t\t\treturn false;", "+\t\t}"]}], "num": 24492}
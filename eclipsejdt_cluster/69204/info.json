{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee3b83f6900fd9a16141d25fa63c7b20", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "307409fdeda47bdcf57e99462fa1fbbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void traverse(ASTVisitor visitor, BlockScope blockScope)", "signatureAfterChange": " \tpublic void traverse(ASTVisitor visitor, BlockScope blockScope)", "diff": ["-\t\t\t\tif (superclass != null)", "-\t\t\t\t\tsuperclass.traverse(visitor, scope);", "-\t\t\t\tif (superInterfaces != null) {", "-\t\t\t\t\tint superInterfaceLength = superInterfaces.length;", "-\t\t\t\t\tfor (int i = 0; i < superInterfaceLength; i++)", "-\t\t\t\t\t\tsuperInterfaces[i].traverse(visitor, scope);", "+\t\t\t\tif (this.annotations != null) {", "+\t\t\t\t\tint annotationsLength = this.annotations.length;", "+\t\t\t\t\tfor (int i = 0; i < annotationsLength; i++)", "+\t\t\t\t\t\tthis.annotations[i].traverse(visitor, scope);", "-\t\t\t\tif (memberTypes != null) {", "-\t\t\t\t\tint memberTypesLength = memberTypes.length;", "-\t\t\t\t\tfor (int i = 0; i < memberTypesLength; i++)", "-\t\t\t\t\t\tmemberTypes[i].traverse(visitor, scope);", "+\t\t\t\tif (this.superclass != null)", "+\t\t\t\t\tthis.superclass.traverse(visitor, scope);", "+\t\t\t\tif (this.superInterfaces != null) {", "+\t\t\t\t\tint length = this.superInterfaces.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\t\tthis.superInterfaces[i].traverse(visitor, scope);", "-\t\t\t\tif (fields != null) {", "-\t\t\t\t\tint fieldsLength = fields.length;", "-\t\t\t\t\tfor (int i = 0; i < fieldsLength; i++) {", "+\t\t\t\tif (this.typeParameters != null) {", "+\t\t\t\t\tint length = this.typeParameters.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tthis.typeParameters[i].traverse(visitor, scope);", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tif (this.memberTypes != null) {", "+\t\t\t\t\tint length = this.memberTypes.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\t\tthis.memberTypes[i].traverse(visitor, scope);", "+\t\t\t\t}", "+\t\t\t\tif (this.enums != null) {", "+\t\t\t\t\tint length = this.enums.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\t\tthis.enums[i].traverse(visitor, scope);", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tif (this.fields != null) {", "+\t\t\t\t\tint length = this.fields.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tif ((field = fields[i]).isStatic()) {", "+\t\t\t\t\t\tif ((field = this.fields[i]).isStatic()) {", "-\t\t\t\tif (methods != null) {", "-\t\t\t\t\tint methodsLength = methods.length;", "-\t\t\t\t\tfor (int i = 0; i < methodsLength; i++)", "-\t\t\t\t\t\tmethods[i].traverse(visitor, scope);", "+\t\t\t\tif (this.methods != null) {", "+\t\t\t\t\tint length = this.methods.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\t\tthis.methods[i].traverse(visitor, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37d230aeda3bbed03e1c18203948d869", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "01bb8fe9f8248cd9358b14893bccaf44dc8edaf8", "commitAfterChange": "bebbc656cd8c0b5b2b17917b50736d005533495d", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["+\t\t\tif (found.size == 0) return null;", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=69471", "+\t\t\t// bad guesses are foo(), when argument types have been supplied", "+\t\t\t// and foo(X, Y), when the argument types are (int, float, Y)", "+\t\t\t// so answer the method with the most argType matches and least parameter type mismatches", "+\t\t\tint bestArgMatches = -1;", "+\t\t\tint bestParamMatches = -1;", "+\t\t\tMethodBinding bestGuess = (MethodBinding) found.elementAt(0); // if no good match so just use the first one found", "-\t\t\t\tnextArg: for (int a = 0; a < argLength; a++) {", "+\t\t\t\tint argMatches = 0;", "+\t\t\t\tnext: for (int a = 0; a < argLength; a++) {", "-\t\t\t\t\tfor (int p = 0; p < paramLength; p++)", "-\t\t\t\t\t\tif (params[p] == arg)", "-\t\t\t\t\t\t\tcontinue nextArg;", "-\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\tfor (int p = a == 0 ? 0 : a - 1; p < paramLength && p < a + 1; p++) { // look one slot before & after to see if the type matches", "+\t\t\t\t\t\tif (params[p] == arg) {", "+\t\t\t\t\t\t\targMatches++;", "+\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\treturn methodBinding;", "+\t\t\t\tint paramMatches = 0;", "+\t\t\t\tnext: for (int p = 0; p < paramLength; p++) {", "+\t\t\t\t\tTypeBinding param = params[p];", "+\t\t\t\t\tfor (int a = p == 0 ? 0 : p - 1; a < argLength && a < p + 1; a++) { // look one slot before & after to see if the type matches", "+\t\t\t\t\t\tif (param == argumentTypes[a]) {", "+\t\t\t\t\t\t\tparamMatches++;", "+\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (argMatches + paramMatches < bestArgMatches + bestParamMatches)", "+\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\tif (argMatches + paramMatches == bestArgMatches + bestParamMatches) {", "+\t\t\t\t\tint diff1 = paramLength < argLength ? 2 * (argLength - paramLength) : paramLength - argLength;", "+\t\t\t\t\tint bestLength = bestGuess.parameters.length;", "+\t\t\t\t\tint diff2 = bestLength < argLength ? 2 * (argLength - bestLength) : bestLength - argLength;", "+\t\t\t\t\tif (diff1 >= diff2)", "+\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t}", "+\t\t\t\tbestArgMatches = argMatches;", "+\t\t\t\tbestParamMatches = paramMatches;", "+\t\t\t\tbestGuess = methodBinding;", "-\t\t\tif (found.size == 0) return null;", "-\t\t\treturn (MethodBinding) found.elementAt(0); // no good match so just use the first one found", "+\t\t\treturn bestGuess;"]}], "num": 69204}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "266de6082c4da10dc496c3030dc80dd3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64a5dde86c649cbe76d87790de6b1cc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FinallyFlowContext.java", "commitBeforeChange": "d5a32e245b27c645dcf70347396d7253765682d3", "commitAfterChange": "562bd70d52b78a80d9ea0f036f9a91cfb91468db", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\t\tASTNode location, int checkType, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\t\tASTNode location, int checkType, FlowInfo flowInfo)", "diff": ["+\t\t\t// if reference is being recorded inside an assert, we will not raise redundant null check warnings", "+\t\t\tcheckType |= (this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING);", "+\t\t\tint checkTypeWithoutHideNullWarning = checkType & ~FlowContext.HIDE_NULL_COMPARISON_WARNING_MASK;", "-\t\t\t\tswitch (checkType) {", "+\t\t\t\tswitch (checkTypeWithoutHideNullWarning) {", "-\t\t\t\t\t\t\tif (checkType == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "-\t\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "+\t\t\t\t\t\t\tif (checkTypeWithoutHideNullWarning == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "+\t\t\t\t\t\t\t\tif ((checkType & HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else if (checkType == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NULL)) {", "-\t\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, reference);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "+\t\t\t\t\t\t\t} else if (checkTypeWithoutHideNullWarning == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NULL)) {", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, reference);", "+\t\t\t\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t\tswitch(checkType & CONTEXT_MASK) {", "+\t\t\t\t\t\t\tswitch(checkTypeWithoutHideNullWarning & CONTEXT_MASK) {", "-\t\t\t\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "+\t\t\t\t\t\t\t\t\tif ((checkType & HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t\tswitch(checkType & CONTEXT_MASK) {", "+\t\t\t\t\t\t\tswitch(checkTypeWithoutHideNullWarning & CONTEXT_MASK) {", "-\t\t\t\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\tswitch (checkType) {", "+\t\t\t\tswitch (checkTypeWithoutHideNullWarning) {", "-\t\t\t\t\t\t\tif (checkType == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "-\t\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "+\t\t\t\t\t\t\tif (checkTypeWithoutHideNullWarning == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "+\t\t\t\t\t\t\t\tif ((checkType & HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "+\t\t\t\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t\tswitch(checkType & CONTEXT_MASK) {", "+\t\t\t\t\t\t\tswitch(checkTypeWithoutHideNullWarning & CONTEXT_MASK) {", "-\t\t\t\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "+\t\t\t\t\t\t\t\t\tif ((checkType & HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t\tswitch(checkType & CONTEXT_MASK) {", "+\t\t\t\t\t\t\tswitch(checkTypeWithoutHideNullWarning & CONTEXT_MASK) {", "-\t\t\t\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t// if the contention is inside assert statement, we want to avoid null warnings only in case of", "-\t\t\t// comparisons and not in case of assignment, instanceof, or may be null.", "-\t\t\tif(((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) || checkType == MAY_NULL", "-\t\t\t\t\t|| (checkType & CONTEXT_MASK) == FlowContext.IN_ASSIGNMENT", "-\t\t\t\t\t|| (checkType & CONTEXT_MASK) == FlowContext.IN_INSTANCEOF) {", "-\t\t\t\trecordNullReference(local, location, checkType);", "-\t\t\t}", "+\t\t\trecordNullReference(local, location, checkType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c7b5e346520c2701024a145b9f643f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "d5a32e245b27c645dcf70347396d7253765682d3", "commitAfterChange": "562bd70d52b78a80d9ea0f036f9a91cfb91468db", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\tASTNode location, int checkType, FlowInfo flowInfo)", "signatureAfterChange": " public void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\tASTNode location, int checkType, FlowInfo flowInfo)", "diff": ["-\tswitch (checkType) {", "+\t// if reference is being recorded inside an assert, we will not raise redundant null check warnings", "+\tcheckType |= (this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING);", "+\tint checkTypeWithoutHideNullWarning = checkType & ~FlowContext.HIDE_NULL_COMPARISON_WARNING_MASK;", "+\tswitch (checkTypeWithoutHideNullWarning) {", "-\t\t\t\tif (checkType == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "-\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "+\t\t\t\tif (checkTypeWithoutHideNullWarning == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "+\t\t\t\t\tif ((checkType & HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t}", "+\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t}", "+\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, location);", "+\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\tswitch(checkType & CONTEXT_MASK) {", "+\t\t\t\tswitch(checkTypeWithoutHideNullWarning & CONTEXT_MASK) {", "-\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "+\t\t\t\t\t\tif ((checkType & HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\tswitch(checkType & CONTEXT_MASK) {", "+\t\t\t\tswitch(checkTypeWithoutHideNullWarning & CONTEXT_MASK) {", "-\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d853b350cdc3c52b12a22795b30752b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "d5a32e245b27c645dcf70347396d7253765682d3", "commitAfterChange": "562bd70d52b78a80d9ea0f036f9a91cfb91468db", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  public void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\tASTNode location, int checkType, FlowInfo flowInfo)", "signatureAfterChange": "  public void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\tASTNode location, int checkType, FlowInfo flowInfo)", "diff": ["-\tswitch (checkType) {", "+\t// if reference is being recorded inside an assert, we will not raise redundant null check warnings", "+\tcheckType |= (this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING);", "+\tint checkTypeWithoutHideNullWarning = checkType & ~FlowContext.HIDE_NULL_COMPARISON_WARNING_MASK;", "+\tswitch (checkTypeWithoutHideNullWarning) {", "-\t\t\t\tif (checkType == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "+\t\t\t\tif (checkTypeWithoutHideNullWarning == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NON_NULL)) {", "-\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t}", "+\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, reference);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t}", "+\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, reference);", "+\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\tif (checkType == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NULL)) {", "+\t\t\t\tif (checkTypeWithoutHideNullWarning == (CAN_ONLY_NULL_NON_NULL | IN_COMPARISON_NULL)) {", "-\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t}", "+\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t}", "+\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "+\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\trecordNullReference(local, reference, checkType);", "-\t\t\t\t}", "+\t\t\t\trecordNullReference(local, reference, checkType);", "-\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t// knowing 'local' can be non-null, we're only interested in seeing whether it can *only* be non-null ", "-\t\t\t\t\t\trecordNullReference(local, reference, CAN_ONLY_NON_NULL | checkType & CONTEXT_MASK);", "+\t\t\t\t\t\t// knowing 'local' can be non-null, we're only interested in seeing whether it can *only* be non-null", "+\t\t\t\t\t\trecordNullReference(local, reference, CAN_ONLY_NON_NULL | checkType & (CONTEXT_MASK|HIDE_NULL_COMPARISON_WARNING_MASK));", "-\t\t\t\t\t\trecordNullReference(local, reference, CAN_ONLY_NULL | checkType & CONTEXT_MASK);", "+\t\t\t\t\t\trecordNullReference(local, reference, CAN_ONLY_NULL | checkType & (CONTEXT_MASK|HIDE_NULL_COMPARISON_WARNING_MASK));", "-\t\t\t\t}", "-\t\t\t\tswitch(checkType & CONTEXT_MASK) {", "+\t\t\t\tswitch(checkTypeWithoutHideNullWarning & CONTEXT_MASK) {", "-\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tflowInfo.initsWhenFalse().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0) {", "-\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t\tflowInfo.initsWhenTrue().setReachMode(FlowInfo.UNREACHABLE_BY_NULLANALYSIS);", "-\t\t\t\tswitch(checkType & CONTEXT_MASK) {", "+\t\t\t\tswitch(checkTypeWithoutHideNullWarning & CONTEXT_MASK) {", "-\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t\t\t\tif (((checkType & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "+\t\t\t\t\t\tif (((checkTypeWithoutHideNullWarning & CHECK_MASK) == CAN_ONLY_NULL) && (reference.implicitConversion & TypeIds.UNBOXING) != 0) { // check for auto-unboxing first and report appropriate warning", "-\t\t\t// if the contention is inside assert statement, we want to avoid null warnings only in case of", "-\t\t\t// comparisons and not in case of assignment and instanceof", "-\t\t\tif ((this.tagBits & FlowContext.HIDE_NULL_COMPARISON_WARNING) == 0 ", "-\t\t\t\t\t|| (checkType & CONTEXT_MASK) == FlowContext.IN_ASSIGNMENT", "-\t\t\t\t\t|| (checkType & CONTEXT_MASK) == FlowContext.IN_INSTANCEOF) {", "-\t\t\t\trecordNullReference(local, reference, checkType);", "-\t\t\t}", "+\t\t\trecordNullReference(local, reference, checkType);"]}], "num": 49938}
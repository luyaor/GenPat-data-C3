{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c708b8c9852d91c7ab850f768ca01b03", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb58ecbe02941670f0647e6d74fa9dcd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 112, "signatureBeforeChange": " \t \tprivate void recordPendingNameScopeResolution(Name name)", "signatureAfterChange": " \t \tprotected void recordPendingNameScopeResolution(Name name)", "diff": ["+\tprotected void recordPendingNameScopeResolution(Name name) {", "+\t\tif (this.pendingNameScopeResolution == null) {", "+\t\t\tthis.pendingNameScopeResolution = new HashSet();", "+\t\tthis.pendingNameScopeResolution.add(name);", "-\t", "-\tprivate void recordPendingNameScopeResolution(Name name) {", "-\t\tif (this.pendingNameScopeResolution == null) {", "-\t\t\tthis.pendingNameScopeResolution = new HashSet();", "-\t\t}", "-\t\tthis.pendingNameScopeResolution.add(name);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcc81e4621bc058d3d4af053857b489f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 104, "signatureBeforeChange": "  \tprivate InfixExpression.Operator getOperatorFor(int operatorID)", "signatureAfterChange": " \t \tprotected InfixExpression.Operator getOperatorFor(int operatorID)", "diff": ["+\t", "+\tprotected InfixExpression.Operator getOperatorFor(int operatorID) {", "+\t\tswitch (operatorID) {", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.EQUAL_EQUAL :", "+\t\t\t\treturn InfixExpression.Operator.EQUALS;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS_EQUAL :", "+\t\t\t\treturn InfixExpression.Operator.LESS_EQUALS;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER_EQUAL :", "+\t\t\t\treturn InfixExpression.Operator.GREATER_EQUALS;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.NOT_EQUAL :", "+\t\t\t\treturn InfixExpression.Operator.NOT_EQUALS;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LEFT_SHIFT :", "+\t\t\t\treturn InfixExpression.Operator.LEFT_SHIFT;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.RIGHT_SHIFT :", "+\t\t\t\treturn InfixExpression.Operator.RIGHT_SHIFT_SIGNED;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.UNSIGNED_RIGHT_SHIFT :", "+\t\t\t\treturn InfixExpression.Operator.RIGHT_SHIFT_UNSIGNED;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR_OR :", "+\t\t\t\treturn InfixExpression.Operator.CONDITIONAL_OR;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND_AND :", "+\t\t\t\treturn InfixExpression.Operator.CONDITIONAL_AND;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.PLUS :", "+\t\t\t\treturn InfixExpression.Operator.PLUS;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MINUS :", "+\t\t\t\treturn InfixExpression.Operator.MINUS;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.REMAINDER :", "+\t\t\t\treturn InfixExpression.Operator.REMAINDER;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.XOR :", "+\t\t\t\treturn InfixExpression.Operator.XOR;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND :", "+\t\t\t\treturn InfixExpression.Operator.AND;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MULTIPLY :", "+\t\t\t\treturn InfixExpression.Operator.TIMES;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR :", "+\t\t\t\treturn InfixExpression.Operator.OR;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.DIVIDE :", "+\t\t\t\treturn InfixExpression.Operator.DIVIDE;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER :", "+\t\t\t\treturn InfixExpression.Operator.GREATER;", "+\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS :", "+\t\t\t\treturn InfixExpression.Operator.LESS;", "+\t\t}", "+\t\treturn null;", "+\t}", "-\tprivate InfixExpression.Operator getOperatorFor(int operatorID) {", "-\t\tswitch (operatorID) {", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.EQUAL_EQUAL :", "-\t\t\t\treturn InfixExpression.Operator.EQUALS;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS_EQUAL :", "-\t\t\t\treturn InfixExpression.Operator.LESS_EQUALS;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER_EQUAL :", "-\t\t\t\treturn InfixExpression.Operator.GREATER_EQUALS;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.NOT_EQUAL :", "-\t\t\t\treturn InfixExpression.Operator.NOT_EQUALS;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LEFT_SHIFT :", "-\t\t\t\treturn InfixExpression.Operator.LEFT_SHIFT;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.RIGHT_SHIFT :", "-\t\t\t\treturn InfixExpression.Operator.RIGHT_SHIFT_SIGNED;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.UNSIGNED_RIGHT_SHIFT :", "-\t\t\t\treturn InfixExpression.Operator.RIGHT_SHIFT_UNSIGNED;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR_OR :", "-\t\t\t\treturn InfixExpression.Operator.CONDITIONAL_OR;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND_AND :", "-\t\t\t\treturn InfixExpression.Operator.CONDITIONAL_AND;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.PLUS :", "-\t\t\t\treturn InfixExpression.Operator.PLUS;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MINUS :", "-\t\t\t\treturn InfixExpression.Operator.MINUS;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.REMAINDER :", "-\t\t\t\treturn InfixExpression.Operator.REMAINDER;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.XOR :", "-\t\t\t\treturn InfixExpression.Operator.XOR;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.AND :", "-\t\t\t\treturn InfixExpression.Operator.AND;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.MULTIPLY :", "-\t\t\t\treturn InfixExpression.Operator.TIMES;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.OR :", "-\t\t\t\treturn InfixExpression.Operator.OR;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.DIVIDE :", "-\t\t\t\treturn InfixExpression.Operator.DIVIDE;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.GREATER :", "-\t\t\t\treturn InfixExpression.Operator.GREATER;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.LESS :", "-\t\t\t\treturn InfixExpression.Operator.LESS;", "-\t\treturn null;"]}], "num": 55649}
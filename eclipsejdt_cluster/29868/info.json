{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dec714ef0f9117e520b5433b288ec3a2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ef463cbdbc6e109a44f146362adf714", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "bac18f086dd9a87e1d5b6dea3b31ca1c92463a84", "commitAfterChange": "1b53a525120894192853120c7678edb264d25490", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public final void addLocalType(TypeDeclaration localType)", "signatureAfterChange": " public final void addLocalType(TypeDeclaration localType)", "diff": ["+\t", "+\t// See comment in addAnonymousType.", "+\tMethodScope methodScope = methodScope();", "+\twhile (methodScope != null && methodScope.referenceContext instanceof LambdaExpression) {", "+\t\tLambdaExpression lambda = (LambdaExpression) methodScope.referenceContext;", "+\t\tif (!lambda.scope.isStatic) {", "+\t\t\tlambda.shouldCaptureInstance = true;", "+\t\t}", "+\t\tmethodScope = methodScope.enclosingMethodScope();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23864ed362eda01652f4c23e6db8ce7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "bac18f086dd9a87e1d5b6dea3b31ca1c92463a84", "commitAfterChange": "1b53a525120894192853120c7678edb264d25490", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final void addAnonymousType(TypeDeclaration anonymousType, ReferenceBinding superBinding)", "signatureAfterChange": " public final void addAnonymousType(TypeDeclaration anonymousType, ReferenceBinding superBinding)", "diff": ["+\t", "+\t/* Tag any enclosing lambdas as instance capturing. Strictly speaking they need not be, unless the local/anonymous type references enclosing instance state.", "+\t   but the types themselves track enclosing types regardless of whether the state is accessed or not. This creates a mismatch in expectations in code generation", "+\t   time, if we choose to make the lambda method static. To keep things simple and avoid a messy rollback, we force the lambda to be an instance method under ", "+\t   this situation. However if per source, the lambda occurs in a static context, we would generate a static synthetic method.", "+\t*/", "+\tMethodScope methodScope = methodScope();", "+\twhile (methodScope != null && methodScope.referenceContext instanceof LambdaExpression) {", "+\t\tLambdaExpression lambda = (LambdaExpression) methodScope.referenceContext;", "+\t\tif (!lambda.scope.isStatic) {", "+\t\t\tlambda.shouldCaptureInstance = true;", "+\t\t}", "+\t\tmethodScope = methodScope.enclosingMethodScope();", "+\t}"]}], "num": 29868}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3c418ee992094b9a5e3a0e8780f3844", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "138f1d69e6671c32e7fd6a667a85a5da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void test005()", "signatureAfterChange": "  \tpublic void test005()", "diff": ["+\t\t\t\"1. WARNING in L.java (at line 1)\\n\" + ", "+\t\t\t\"\tclass L<T> implements I { public T foo() {return null;} }\\n\" + ", "+\t\t\t\"\t                      ^\\n\" + ", "+\t\t\t\"Type safety: I is a raw type. References to generic type I<U> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in W.java (at line 1)\\n\" + ", "+\t\t\t\"1. WARNING in W.java (at line 1)\\n\" + ", "+\t\t\t\"\tclass W<T> extends X { @Override public T foo() { return super.foo(); } }\\n\" + ", "+\t\t\t\"\t                   ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<U> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in W.java (at line 1)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0e4884b68203cb2fff5faa3db1c5cba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void test006()", "signatureAfterChange": "  \tpublic void test006()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in J.java (at line 1)\\n\" + ", "-\t\t\t\"\tclass J<T> implements I<B> { public T foo() {return null;} }\\n\" + ", "-\t\t\t\"\t                                      ^^^^^\\n\" + ", "-\t\t\t\"The return type is incompatible with I<B>.foo()\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in Y.java (at line 1)\\n\" + ", "-\t\t\t\"\tclass Y<T> extends X<A> { public T foo() { return super.foo(); } }\\n\" + ", "-\t\t\t\"\t                                   ^^^^^\\n\" + ", "-\t\t\t\"The return type is incompatible with X<A>.foo()\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in Y.java (at line 1)\\n\" + ", "-\t\t\t\"\tclass Y<T> extends X<A> { public T foo() { return super.foo(); } }\\n\" + ", "-\t\t\t\"\t                                                  ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from A to T\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in W.java (at line 1)\\n\" + ", "-\t\t\t\"\tclass W<T> extends X { @Override public T foo() { return super.foo(); } }\\n\" + ", "-\t\t\t\"\t                                                         ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from Object to T\\n\" + ", "-\t\t\t\"----------\\n\",", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in J.java (at line 1)\\n\" + ", "+\t\t\t\t\"\tclass J<T> implements I<B> { public T foo() {return null;} }\\n\" + ", "+\t\t\t\t\"\t                                      ^^^^^\\n\" + ", "+\t\t\t\t\"The return type is incompatible with I<B>.foo()\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in L.java (at line 1)\\n\" + ", "+\t\t\t\t\"\tclass L<T> implements I { public T foo() {return null;} }\\n\" + ", "+\t\t\t\t\"\t                      ^\\n\" + ", "+\t\t\t\t\"Type safety: I is a raw type. References to generic type I<U> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in Y.java (at line 1)\\n\" + ", "+\t\t\t\t\"\tclass Y<T> extends X<A> { public T foo() { return super.foo(); } }\\n\" + ", "+\t\t\t\t\"\t                                   ^^^^^\\n\" + ", "+\t\t\t\t\"The return type is incompatible with X<A>.foo()\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in Y.java (at line 1)\\n\" + ", "+\t\t\t\t\"\tclass Y<T> extends X<A> { public T foo() { return super.foo(); } }\\n\" + ", "+\t\t\t\t\"\t                                                  ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from A to T\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in W.java (at line 1)\\n\" + ", "+\t\t\t\t\"\tclass W<T> extends X { @Override public T foo() { return super.foo(); } }\\n\" + ", "+\t\t\t\t\"\t                   ^\\n\" + ", "+\t\t\t\t\"Type safety: X is a raw type. References to generic type X<U> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in W.java (at line 1)\\n\" + ", "+\t\t\t\t\"\tclass W<T> extends X { @Override public T foo() { return super.foo(); } }\\n\" + ", "+\t\t\t\t\"\t                                                         ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type mismatch: cannot convert from Object to T\\n\" + ", "+\t\t\t\t\"----------\\n\","]}], "num": 50036}
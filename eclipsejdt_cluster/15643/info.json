{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3f75557791fc8a8ab000d81d44c70c4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "385daa119a0c10d90b2e6bbaaa7c2d46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "26b7bc79d6fe197e511251cd0d01440df4f556c7", "commitAfterChange": "45bb5124d83d6e1fe4a264c979e1e6a5308463bd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void bindThrownExceptions()", "signatureAfterChange": " \tpublic void bindThrownExceptions()", "diff": ["+\t\t\tint thrownExceptionLength = this.thrownExceptions.length;", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tthis.thrownExceptions[i].binding = this.binding.thrownExceptions[i];", "+\t\t\tif (length == thrownExceptionLength) {", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tthis.thrownExceptions[i].binding = this.binding.thrownExceptions[i];", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tint bindingIndex = 0;", "+\t\t\t\tfor (int i = 0; i < thrownExceptionLength && bindingIndex < length; i++) {", "+\t\t\t\t\tTypeReference thrownException = this.thrownExceptions[i];", "+\t\t\t\t\tReferenceBinding thrownExceptionBinding = this.binding.thrownExceptions[bindingIndex];", "+\t\t\t\t\tchar[][] bindingCompoundName = thrownExceptionBinding.compoundName;", "+\t\t\t\t\tif (thrownException instanceof SingleTypeReference) {", "+\t\t\t\t\t\t// single type reference", "+\t\t\t\t\t\tint lengthName = bindingCompoundName.length;", "+\t\t\t\t\t\tchar[] thrownExceptionTypeName = thrownException.getTypeName()[0];", "+\t\t\t\t\t\tif (CharOperation.equals(thrownExceptionTypeName, bindingCompoundName[lengthName - 1])) {", "+\t\t\t\t\t\t\tthrownException.binding = thrownExceptionBinding;", "+\t\t\t\t\t\t\tbindingIndex++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// qualified type reference", "+\t\t\t\t\t\tif (CharOperation.equals(thrownException.getTypeName(), bindingCompoundName)) {", "+\t\t\t\t\t\t\tthrownException.binding = thrownExceptionBinding;", "+\t\t\t\t\t\t\tbindingIndex++;", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9350b1efc23d67e414a0a449d10b99a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/impl/FormatterOptions.java", "commitBeforeChange": "98f0de74a38b5d56ad4c7ad7bb857ae598d48654", "commitAfterChange": "ecaac3d2c5c743a7471099f473eb673438f5a50a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public FormatterOptions(Map settings)", "signatureAfterChange": " public FormatterOptions(Map settings)", "diff": ["-\tif (settings == null) return;", "+\tMap javaCoreOptions = JavaCore.getOptions();", "+\t", "+\tif (settings != null) {", "+\t\tObject[] presetEntries = settings.entrySet().toArray();", "+\t\t", "+\t\tfor (int i = 0, max = presetEntries.length; i < max; i++){", "+\t\t\tMap.Entry entry = (Map.Entry)presetEntries[i];", "+\t\t\tif (!(entry.getKey() instanceof String)) continue;", "+\t\t\tif (!(entry.getValue() instanceof String)) continue;", "+\t\t\tString optionID = (String) entry.getKey();", "+\t\t\tString optionValue = (String) entry.getValue();", "+\t", "+\t\t\tjavaCoreOptions.put(optionID, optionValue);", "+\t\t}\t", "+\t}", "+", "+\tObject[] entries = javaCoreOptions.entrySet().toArray();", "+", "+\tif (entries == null) {", "+\t\treturn;", "+\t}", "-\tObject[] entries = settings.entrySet().toArray();", "+\t\tif(optionID.equals(OPTION_InsertSpaceAfterCast)){", "+\t\t\tif (optionValue.equals(INSERT)){", "+\t\t\t\tthis.spaceInCastExpression = true;", "+\t\t\t} else if (optionValue.equals(DO_NOT_INSERT)){", "+\t\t\t\tthis.spaceInCastExpression = false;", "+\t\t\t}", "+\t\t\tcontinue;", "+\t\t}\t\t"]}], "num": 15643}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "77a856abc04154cdbefb4e56c1eda0e8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00262b76582e5f54558e27c96fa3b404", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic boolean visit( \t\tCompoundAssignment compoundAssignment, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tCompoundAssignment compoundAssignment, \t\tBlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (compoundAssignment.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (compoundAssignment.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "003acdb6cb91839d0f7ddd868e89e768", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "adb1e4d21f756fdc893d84befd3e859cfa2aa662", "commitAfterChange": "2941812daedfecddb313ba4dd0685bac7c26b287", "methodNumberBeforeChange": 393, "methodNumberAfterChange": 393, "signatureBeforeChange": " \tpublic void test374()", "signatureAfterChange": " \tpublic void test374()", "diff": ["-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_ARRAY_INITIALIZER_BRACE_POSITION, DefaultCodeFormatterConstants.NEXT_LINE);", "-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_ARRAY_INITIALIZER_CONTINUATION_INDENTATION, \"1\");", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ARRAY_INITIALIZER, DefaultCodeFormatterConstants.NEXT_LINE);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_CONTINUATION_INDENTATION_FOR_ARRAY_INITIALIZER, \"1\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0045712bcccdb6460dd82bb0f26dbd0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/runtime/TargetInterface.java", "commitBeforeChange": "b2a1a7d064fd5695fce4ad30f84d3e52d57db8d6", "commitAfterChange": "58d495f741112fe1313f49af60925198c18bb8e1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void sendClasses(boolean mustRun, ClassFile[] classes) throws TargetException", "signatureAfterChange": " public void sendClasses(boolean mustRun, ClassFile[] classes) throws TargetException", "diff": ["-\t\t\t\t\tClassFile.writeToDisk(true, \"d:\\\\eval\\\\snippets\", className, classes[0]);", "+\t\t\t\t\tUtil.writeToDisk(true, \"d:\\\\eval\\\\snippets\", className, classes[0]);", "-\t\t\t\t\tClassFile.writeToDisk(true, dirName, className, classes[i]);", "+\t\t\t\t\tUtil.writeToDisk(true, dirName, className, classes[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "008a287bf94d1bddf6c59ec24f435fa5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 72, "signatureBeforeChange": " public int literalIndexForJavaLangVoidTYPE()", "signatureAfterChange": " public int literalIndexForJavaLangVoidTYPE()", "diff": ["-\tif ((index = wellKnownFields[TYPE_VOID_FIELD]) == 0) {", "+\tif ((index = wellKnownFields[JAVA_LANG_VOID_TYPE_FIELD]) == 0) {", "-\t\tindex = wellKnownFields[TYPE_VOID_FIELD] = currentIndex++;", "+\t\tindex = wellKnownFields[JAVA_LANG_VOID_TYPE_FIELD] = currentIndex++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00ac86f3c3cc9e2a57cca466dd20bfa8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AbstractCompletionTest.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " private AstNode findMethod(TypeDeclaration type, int cursorLocation)", "signatureAfterChange": " private ASTNode findMethod(TypeDeclaration type, int cursorLocation)", "diff": ["-private AstNode findMethod(TypeDeclaration type, int cursorLocation) {", "+private ASTNode findMethod(TypeDeclaration type, int cursorLocation) {", "-\t\t\tAstNode method = findMethod(memberType, cursorLocation);", "+\t\t\tASTNode method = findMethod(memberType, cursorLocation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0121ea4a7b10d4a4443489f73020f581", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "93ae272625cf7aea539e03a762b5190105386996", "commitAfterChange": "c6f78f890c1ca00b0157b632da091fae2c781833", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 53, "signatureBeforeChange": "  \tprivate void printRule(StringBuffer stringBuffer)", "signatureAfterChange": "  \tprivate void printRule(StringBuffer stringBuffer)", "diff": ["-\t\t\tif ((i % this.tabSize) == 0) { ", "+\t\t\tif ((i % this.tabLength) == 0) { ", "-\t\tfor (int i = 0; i < (pageWidth / tabSize); i++) {", "+\t\tfor (int i = 0; i < (pageWidth / tabLength); i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "013ea05d603fe7abb87a58bfd1f1b611", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 89, "signatureBeforeChange": " \tpublic boolean visit( \t\tPostfixExpression postfixExpression, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tPostfixExpression postfixExpression, \t\tBlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (postfixExpression.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (postfixExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "015d147763b385538e8c56a47b687a00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/GetKeyVisitor.java", "commitBeforeChange": "b9942ecaf3eefba2dbc5e187c939df5cfcc2d6c7", "commitAfterChange": "2ea28b71481adeeaf9e7adba83fdf2894ac85ffd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic boolean visit(ClassInstanceCreation node)", "signatureAfterChange": " \tpublic boolean visit(ClassInstanceCreation node)", "diff": ["-\t\tAssert.assertNotNull(constructorBinding);", "-\t\tAssert.assertNotNull(constructorBinding.getKey());", "+\t\tTestCase.assertNotNull(constructorBinding);", "+\t\tTestCase.assertNotNull(constructorBinding.getKey());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01ef080ea8899628f97943ab82fb4f08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java", "commitBeforeChange": "0927ffa25a2592bfca0a67c9cc9e0e69775118de", "commitAfterChange": "7b934c773095ee4cd83d9fe1d55bbb70d8656cbb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void resolve(BlockScope scope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\t\t\t    id = T_Object;", "+\t\t\t\t\t    id = T_JavaLangObject;", "-\t\t\t\t\tcase T_String :", "+\t\t\t\t\tcase T_JavaLangString :"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0254cade2268833a8b6baa4dd069f6f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": " public TypeBinding postConversionType(Scope scope)", "signatureAfterChange": " public TypeBinding postConversionType(Scope scope)", "diff": ["-\tTypeBinding requiredGenericCast = getGenericCast(this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length);", "+\tTypeBinding requiredGenericCast = getGenericCast(this.otherBindings == null ? 0 : this.otherBindings.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0328c0d450207818d50ee306cd589bc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a9148d83826c8b325659677acdd7510402269480", "commitAfterChange": "782f6e9cb0504d85147d9d1dc9d60533d3715c50", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "\r \tprivate void findVariableName(char[] token, char[] qualifiedPackageName, char[] qualifiedSourceName, char[] sourceName, char[][] excludeNames, int dim)", "signatureAfterChange": "\r \tprivate void findVariableName(char[] token, char[] qualifiedPackageName, char[] qualifiedSourceName, char[] sourceName, char[][] excludeNames, int dim)", "diff": ["-\t\t\t\tnameScanner.setSourceBuffer(sourceName);\r", "+\t\t\t\tnameScanner.setSource(sourceName);\r", "-\t\t\t\t\tnameScanner.setSourceBuffer(name);\r", "+\t\t\t\t\tnameScanner.setSource(name);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "032ebbc1762b73ca5610e2108a40d28a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4a7fb72faa1d4eb35981dd799c06dbffe9837a2f", "commitAfterChange": "af607e2e1ad6576e50200e327ea9acd540ed1ad7", "methodNumberBeforeChange": 338, "methodNumberAfterChange": 338, "signatureBeforeChange": " public void testBug110336e() throws CoreException", "signatureAfterChange": " public void testBug110336e() throws CoreException", "diff": ["-\tTypeReferencesCollector collector = new TypeReferencesCollector();", "+\tTypeReferenceCollector collector = new TypeReferenceCollector();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "034a72e15a7576eaefee5edc0e570a5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/SourceElementParserTest.java", "commitBeforeChange": "0c486e9f722d5cf66150a2a8bb111fadf3c196f6", "commitAfterChange": "5e6cea593f4be5a13a34ce02970d8b34d029a673", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void addTypeParameter(TypeParameterInfo typeParameterInfo)", "signatureAfterChange": " public void addTypeParameter(TypeParameterInfo typeParameterInfo)", "diff": ["-\t\tcurrentMethod.typeParameterBounds = new char[][][] {typeParameterInfo.typeParameterBounds};", "+\t\tcurrentMethod.typeParameterBounds = new char[][][] {typeParameterInfo.bounds};", "-\t\tcurrentMethod.typeParameterBounds[length] = typeParameterInfo.typeParameterBounds;", "+\t\tcurrentMethod.typeParameterBounds[length] = typeParameterInfo.bounds;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "038b4f9861425557b25b0e11cda37b40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void addProblemMethod( \t\tAbstractMethodDeclaration method, \t\tMethodBinding methodBinding, \t\tIProblem[] problems)", "signatureAfterChange": " \tpublic void addProblemMethod( \t\tAbstractMethodDeclaration method, \t\tMethodBinding methodBinding, \t\tCategorizedProblem[] problems)", "diff": ["-\t\tIProblem[] problems) {", "+\t\tCategorizedProblem[] problems) {", "-\t\t\t\tIProblem problem = problems[i];", "+\t\t\t\tCategorizedProblem problem = problems[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03d1f50c866a34e4a629c6d66aa4b7f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "418f1d61f23f33e0e639dfcb37d7371b9ddc656a", "commitAfterChange": "9fedbc20e6a58ab4ca985b6cd53ab67968737404", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 117, "signatureBeforeChange": "  \tprivate long[] scanAllIdentifiersPositions(int start, int end, int length)", "signatureAfterChange": "  \tprivate long[] scanAllIdentifiersPositions(int start, int end, int length)", "diff": ["-\t\t\twhile((token = scanner.getNextToken()) != Scanner.TokenNameEOF)  {", "-\t\t\t\tif (token == Scanner.TokenNameIdentifier) {", "+\t\t\twhile((token = scanner.getNextToken()) != ITerminalSymbols.TokenNameEOF)  {", "+\t\t\t\tif (token == ITerminalSymbols.TokenNameIdentifier) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04431fb19462f88da29595f8adbb0910", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "71725fa0b3f37c13b379d2428278affd17099fb7", "commitAfterChange": "825afbe96327e445bddd85dee169dccb701b4c5f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate void resolveTypeParameterTags(Scope scope, boolean reportMissing)", "signatureAfterChange": " \tprivate void resolveTypeParameterTags(Scope scope, boolean reportMissing)", "diff": ["-\t\t\t\t\t\tJavadocSingleNameReference param = this.paramReferences[i];", "+\t\t\t\t\t\tJavadocSingleTypeReference param = this.paramTypeParameters[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0458c8fb30435cf3ff16375b1e4e1346", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "7bf8b664251457ee19a0ca0f4e524593e5cebbd2", "commitAfterChange": "c844b42e53f5e6c13f3c402081599074b3dd58c2", "methodNumberBeforeChange": 178, "methodNumberAfterChange": 178, "signatureBeforeChange": " public void testBug95794b() throws CoreException", "signatureAfterChange": " public void testBug95794b() throws CoreException", "diff": ["-\tsearch(type, ALL_OCCURRENCES, getJavaSearchScopeBugs(), occurencesCollector);", "+\tsearch(type, ALL_OCCURRENCES, getJavaSearchScope(), occurencesCollector);", "-\tsearch(type, REFERENCES, getJavaSearchScopeBugs(), referencesCollector);", "+\tsearch(type, REFERENCES, getJavaSearchScope(), referencesCollector);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04643df18a25cd802d691589a3dbecc6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "commitAfterChange": "b21cadb5eae53d9f84dce9f073b5350a267b6ad6", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "  protected void report(SearchMatch match) throws CoreException", "signatureAfterChange": "  protected void report(SearchMatch match) throws CoreException", "diff": ["-\tif (SearchEngine.VERBOSE) {", "+\tif (SearchBasicEngine.VERBOSE) {", "-\tif (SearchEngine.VERBOSE)", "+\tif (SearchBasicEngine.VERBOSE)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "049d61241298cea5ab1ae7585826cfb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "848c4ddf1895eb24711ea8c54b1168746cb07972", "commitAfterChange": "b136d601b8b65cbe6a937874c4ada8fd9c6f056d", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 44, "signatureBeforeChange": " public void deprecatedType(TypeBinding type, AstNode location)", "signatureAfterChange": " public void deprecatedType(TypeBinding type, AstNode location)", "diff": ["-\tif ((location.bits & AstNode.InsideAnnotation) != 0) {", "-\t\tid |= IProblem.Annotation;", "+\tif ((location.bits & AstNode.InsideJavadoc) != 0) {", "+\t\tid |= IProblem.Javadoc;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04c2a1fc606bcfed9ea9660d795f7e08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void generateOptimizedLogicalXor( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedLogicalXor( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tBranchLabel trueLabel, \t\tBranchLabel falseLabel, \t\tboolean valueRequired)", "diff": ["-\t\tLabel trueLabel,", "-\t\tLabel falseLabel,", "+\t\tBranchLabel trueLabel,", "+\t\tBranchLabel falseLabel,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "052595ef855c066f8695fa7803ef31d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "12bb3007708f198ce96e1ee7074598576067e3f5", "commitAfterChange": "995521865cfd6e568bdd12bfb7d4a59fc50611ab", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tprivate int compatibilityLevel18FromInner(MethodBinding method, InnerInferenceHelper innerInferenceHelper, Expression invocArg, int argLen, int i, boolean[] isVarArgs)", "signatureAfterChange": "  \tprivate int compatibilityLevel18FromInner(MethodBinding method, InnerInferenceHelper innerInferenceHelper, Expression invocArg, int argLen, int i, boolean[] isVarArgs)", "diff": ["-\t\t\t\tint level = compatibilityLevel18FromInner(method, innerInferenceHelper, ce.valueIfTrue, argLen, compatible, isVarArgs);", "+\t\t\t\tint level = compatibilityLevel18FromInner(method, innerInferenceHelper, ce.valueIfTrue, argLen, i, isVarArgs);", "-\t\t\t\tint level2 = compatibilityLevel18FromInner(method, innerInferenceHelper, ce.valueIfFalse, argLen, compatible, isVarArgs);", "+\t\t\t\tint level2 = compatibilityLevel18FromInner(method, innerInferenceHelper, ce.valueIfFalse, argLen, i, isVarArgs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "054f270b15b46b4f9e8ccc7bdd99f489", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 176, "methodNumberAfterChange": 176, "signatureBeforeChange": " protected void consumeInterfaceHeaderName1()", "signatureAfterChange": " protected void consumeInterfaceHeaderName1()", "diff": ["-\t\t\ttypeDecl.bits |= ASTNode.IsMemberTypeMASK;", "+\t\t\ttypeDecl.bits |= ASTNode.IsMemberType;", "-\t\ttypeDecl.bits |= ASTNode.IsLocalTypeMASK;", "+\t\ttypeDecl.bits |= ASTNode.IsLocalType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "057b70e81dcbba7ccc80988d0a20de71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "fe905e29a608f61f2afe181f4c1e4e27bb2b95dc", "commitAfterChange": "53a7cfa9bf2a3a1ade921d716dbdc58a4bfc35d4", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tprivate void updateIndex(Openable element, IResourceDelta delta)", "signatureAfterChange": " \tprivate void updateIndex(Openable element, IResourceDelta delta)", "diff": ["-\t\t\t\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isJavaFileName(name)) {", "+\t\t\t\t\t\t\t\t\tif (org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(name)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05e737eece3beb2434fea506a5b25732", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "7aac6f03ecf70666410b0e689c91dafd6d67757a", "commitAfterChange": "465d091146b1d6997709777ea444048487da1d8d", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic boolean visit( \t\t\tAnnotationTypeMemberDeclaration annotationTypeMemberDeclaration, \t\t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\t\tAnnotationMethodDeclaration annotationTypeMemberDeclaration, \t\t\tClassScope scope)", "diff": ["-\t\t\tAnnotationTypeMemberDeclaration annotationTypeMemberDeclaration,", "+\t\t\tAnnotationMethodDeclaration annotationTypeMemberDeclaration,", "-\t\tExpression defaultValue = annotationTypeMemberDeclaration.memberValue;", "+\t\tExpression defaultValue = annotationTypeMemberDeclaration.defaultValue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0600544200a958e8835abb85a41b2899", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "0927ffa25a2592bfca0a67c9cc9e0e69775118de", "commitAfterChange": "7b934c773095ee4cd83d9fe1d55bbb70d8656cbb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public static final TypeBinding wellKnownType(Scope scope, int id)", "signatureAfterChange": " public static final TypeBinding wellKnownType(Scope scope, int id)", "diff": ["-\t\t\tcase T_Object :", "+\t\t\tcase T_JavaLangObject :", "-\t\t\tcase T_String :", "+\t\t\tcase T_JavaLangString :"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06d341ef8336070929a941d0eea5e9bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "848c4ddf1895eb24711ea8c54b1168746cb07972", "commitAfterChange": "b136d601b8b65cbe6a937874c4ada8fd9c6f056d", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 42, "signatureBeforeChange": " public void deprecatedField(FieldBinding field, AstNode location)", "signatureAfterChange": " public void deprecatedField(FieldBinding field, AstNode location)", "diff": ["-\tif ((location.bits & AstNode.InsideAnnotation) != 0) {", "-\t\tid |= IProblem.Annotation;", "+\tif ((location.bits & AstNode.InsideJavadoc) != 0) {", "+\t\tid |= IProblem.Javadoc;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07353ba59b80220fe59eda6e1fb16914", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "8b532c89fe75cdcd516dedb1f57b44f4fab79fb0", "commitAfterChange": "14eef462fbaf0bab3c247296c2a42a1fdc4f58a6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate BinaryExpressionFragmentBuilder buildFragments(BinaryExpression binaryExpression, BlockScope scope)", "signatureAfterChange": "  \tprivate BinaryExpressionFragmentBuilder buildFragments(BinaryExpression binaryExpression, BlockScope scope)", "diff": ["-\t\tswitch((binaryExpression.bits & EqualExpression.OperatorMASK) >> EqualExpression.OperatorSHIFT) {", "+\t\tswitch((binaryExpression.bits & AstNode.OperatorMASK) >> AstNode.OperatorSHIFT) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "076c9eb61dd0f9af259329218a62c430", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "517b7635549251305475f5979e09084934078df3", "commitAfterChange": "1d890ea58166bb002c22a6562a5afba809d4c5d9", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void reset(ClassFile givenClassFile)", "signatureAfterChange": " public void reset(ClassFile givenClassFile)", "diff": ["-\tif (this.stackMarkers != null) {", "-\t\tthis.stackMarkers.clear();", "+\tif (this.stackDepthMarkers != null) {", "+\t\tthis.stackDepthMarkers.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07ac2bca05fb3f8f22d88c6ef5d18f96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39efbf0f3eb32e59d7a65e03590993d59dc6817b", "commitAfterChange": "84bab690fce0d07b753bfc05c56b8e56d168a1a6", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 139, "signatureBeforeChange": " \tprotected void setModifiers(FieldDeclaration fieldDeclaration, org.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDecl)", "signatureAfterChange": " \tprotected void setModifiers(FieldDeclaration fieldDeclaration, org.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDecl)", "diff": ["-\t\t\tcase AST.JLS2 :", "-\t\t\t\tfieldDeclaration.setModifiers(fieldDecl.modifiers & CompilerModifiers.AccJustFlag);", "+\t\t\tcase AST.JLS2_INTERNAL :", "+\t\t\t\tfieldDeclaration.internalSetModifiers(fieldDecl.modifiers & CompilerModifiers.AccJustFlag);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07e6f8f47c7b5f6550d631727b5ca12b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "caf64c6ca6cb6ffdc91f9978b4ee34c5d2fad461", "commitAfterChange": "6545e2eba728ce5d7f114b77afe5ab08a731f692", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  void checkInheritedMethods(MethodBinding[] methods, int length, boolean[] isOverridden)", "signatureAfterChange": "  void checkInheritedMethods(MethodBinding[] methods, int length, boolean[] isOverridden)", "diff": ["-\t\tMethodBinding bestAbstractMethod = length == 1 ? methods[0] : findBestInheritedAbstractMethod(methods, length);", "+\t\tMethodBinding bestAbstractMethod = length == 1 ? methods[0] : findBestInheritedAbstractOrDefaultMethod(methods, length);", "-\t\tMethodBinding bestAbstractMethod = findBestInheritedAbstractMethod(methods, length);", "+\t\tMethodBinding bestAbstractMethod = findBestInheritedAbstractOrDefaultMethod(methods, length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07ea5fe701965ed34196ef016c8d1512", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  \tprivate void findFieldsAndMethods( \t\tchar[] token, \t\tTypeBinding receiverType, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "signatureAfterChange": "  \tprivate void findFieldsAndMethods( \t\tchar[] token, \t\tTypeBinding receiverType, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "diff": ["-\t\t\t\trelevance += computeRelevanceForExpectingType(BaseTypes.IntBinding);", "+\t\t\t\trelevance += computeRelevanceForExpectingType(TypeBinding.INT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07efc53570b537edcf22e5279a075eb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/ClasspathMultiDirectory.java", "commitBeforeChange": "6fd2d27e76da885e08b25f5a065ea5e0c622d413", "commitAfterChange": "8b76fbadc737bd965aca978e0e3517802f9a8476", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \r public boolean equals(Object o)", "signatureAfterChange": "\r \r public boolean equals(Object o)", "diff": ["-\treturn binaryPath.equalsIgnoreCase(md.binaryPath) && sourcePath.equalsIgnoreCase(md.sourcePath);\r", "-}\r", "+\treturn binaryPath.equals(md.binaryPath) && sourcePath.equals(md.sourcePath);\r", "+} \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07f98f40e3471f433ae5683ff37b71be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/FactoryPathConfigurationBlock.java", "commitBeforeChange": "d2e007901d54a516821cedcfd5f65fdb2954f273", "commitAfterChange": "fa2cb5bc47f7fe5d18ae109d09f3bf4ba668083f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic FactoryPathConfigurationBlock(IStatusChangeListener context, \t\t\tIProject project, IWorkbenchPreferenceContainer container)", "signatureAfterChange": " \tpublic FactoryPathConfigurationBlock(IStatusChangeListener context, \t\t\tIProject project, IWorkbenchPreferenceContainer container)", "diff": ["-\t\tImportOrganizeAdapter adapter= new ImportOrganizeAdapter();", "+\t\tFactoryPathAdapter adapter= new FactoryPathAdapter();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07fc030490b2cb8af1b4757af40b7030", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "a08e8dc8e9230a115f0cfdb4f78a05f8533a21b8", "commitAfterChange": "7df061f9da0ab96be87e5851cb157a28c5f5bca0", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " \tpublic boolean match(VariableDeclarationFragment node, Object other)", "signatureAfterChange": " \tpublic boolean match(VariableDeclarationFragment node, Object other)", "diff": ["-\t\t\t\t\t\tsafeSubtreeListMatch(node.getExtraDimensionInfos(), o.getExtraDimensionInfos()))", "+\t\t\t\t\t\tsafeSubtreeListMatch(node.extraDimensionInfos(), o.extraDimensionInfos()))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0832d5be03acf5ea6fc2d92b572b34bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r public int literalIndexForJavaLangErrorConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangErrorConstructor()", "diff": ["-\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "086d6b50fc902e8b4238951834ef0737", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/ExecutionTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic void testFailure() throws JavaModelException", "signatureAfterChange": " \t \tpublic void testFailure() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08a2ee6629b6c5291717af27791f1b62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "649631b834e755f12bf40b9c916ce9dfc765a8d0", "commitAfterChange": "19a679a95bc1c8afc10cb50ce5a617f6914888ae", "methodNumberBeforeChange": 164, "methodNumberAfterChange": 168, "signatureBeforeChange": " \tprivate void createTypeProposal( \t\t\tReferenceBinding refBinding, \t\t\tchar[] typeName, \t\t\tint accessibility, \t\t\tchar[] completionName, \t\t\tint relevance, \t\t\tBinding[] missingElements, \t\t\tint[] missingElementsStarts, \t\t\tint[] missingElementsEnds, \t\t\tboolean missingElementsHaveProblems)", "signatureAfterChange": " \tprivate void createTypeProposal( \t\t\tReferenceBinding refBinding, \t\t\tchar[] typeName, \t\t\tint accessibility, \t\t\tchar[] completionName, \t\t\tint relevance, \t\t\tBinding[] missingElements, \t\t\tint[] missingElementsStarts, \t\t\tint[] missingElementsEnds, \t\t\tboolean missingElementsHaveProblems)", "diff": ["-\t\t\tproposal.setSignature(getSignature(refBinding));", "+\t\t\tproposal.setSignature(getCompletedTypeSignature(refBinding));", "-\t\t\tproposal.setSignature(getSignature(refBinding));", "+\t\t\tproposal.setSignature(getCompletedTypeSignature(refBinding));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08baedfb5a1fadad4695d2964f323ee3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "1e4efd37f7fb00c3294d231f7375bee387900c19", "commitAfterChange": "a9adab1d13c19ec53df5d462147c7a9d9ca97b01", "methodNumberBeforeChange": 322, "methodNumberAfterChange": 322, "signatureBeforeChange": "  \tpublic void test299()", "signatureAfterChange": "  \tpublic void test299()", "diff": ["-\t\toptions.put(JavaCore.FORMATTER_TAB_CHAR, JavaCore.TAB);", "-\t\toptions.put(JavaCore.FORMATTER_LINE_SPLIT, \"80\");", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_TAB_CHAR, JavaCore.TAB);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_LINE_SPLIT, \"80\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08cb3919b80911c6cc1ce3b23e721f03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/base/XMLComparer.java", "commitBeforeChange": "e5afcb0ec821099a058acc796f2348c4c58a2e3e", "commitAfterChange": "1a36ae2092977e6a13134bbe916d1e02aefe6f2e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate boolean compareAnnotationValuesNodes(Element actual, Element expected)", "signatureAfterChange": " \tprivate boolean compareAnnotationValuesNodes(Element actual, Element expected)", "diff": ["-\t\t\tif (nExpected.getNodeType() == Node.ELEMENT_NODE && ANNOTATION_VALUE.equals(nExpected.getNodeName())) {", "+\t\t\tif (nExpected.getNodeType() == Node.ELEMENT_NODE && ANNOTATION_VALUE_TAG.equals(nExpected.getNodeName())) {", "-\t\t\t\t\t\t!ANNOTATION_VALUE.equals(nActual.getNodeName()))) {", "+\t\t\t\t\t\t!ANNOTATION_VALUE_TAG.equals(nActual.getNodeName()))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09cbee55a0f211696471810001f819fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java", "commitBeforeChange": "522e84acc5c220c07378cd67640c99884ac9cc9d", "commitAfterChange": "e5f48a4d4e39a733649e1d7678dd3cc38b1f57e5", "methodNumberBeforeChange": 253, "methodNumberAfterChange": 253, "signatureBeforeChange": " \tpublic void testSingleVariableDeclaration()", "signatureAfterChange": " \tpublic void testSingleVariableDeclaration()", "diff": ["-\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\tif (ast.apiLevel() >= AST.JLS3) {", "-\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\tif (ast.apiLevel() == AST.JLS2) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09d44a2f88ddc65396eb65e8cbc67e35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "4ab9f51613d504c2ff6edffad453d042a8c04058", "commitAfterChange": "d588d04827eba4279cf3ad675c4250450aee4bea", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " public void test044()", "signatureAfterChange": " public void test044()", "diff": ["-        + \" -bootclasspath \" + getLibraryClasses()", "-        + \" -cp \" + getJCEJar()", "+        + \" -bootclasspath \" + getLibraryClassesAsQuotedString()", "+        + \" -cp \" + getJCEJarAsQuotedString()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09f149dbedd0fc59f21a2ddc69aa43c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "4b36d8d902157ef078af37f3d78b4138152d8889", "commitAfterChange": "9ef1e97f6b56081e8537310fc409f77c2ce56944", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": " \tpublic void resetWorkspace()", "signatureAfterChange": " \tpublic void resetWorkspace()", "diff": ["-\t\tif (fProjects != null) {", "-\t\t\tEnumeration projectNames = fProjects.keys();", "+\t\tif (projects != null) {", "+\t\t\tEnumeration projectNames = projects.keys();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a8e6c32a2e263cd14581abbc2f070a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public int literalIndexForJavaLangCharacterTYPE()", "signatureAfterChange": " public int literalIndexForJavaLangCharacterTYPE()", "diff": ["-\tif ((index = wellKnownFields[TYPE_CHARACTER_FIELD]) == 0) {", "+\tif ((index = wellKnownFields[JAVA_LANG_CHARACTER_TYPE_FIELD]) == 0) {", "-\t\tindex = wellKnownFields[TYPE_CHARACTER_FIELD] = currentIndex++;", "+\t\tindex = wellKnownFields[JAVA_LANG_CHARACTER_TYPE_FIELD] = currentIndex++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a99a0365256f486040b205198a64bda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "5e70a582e36fd39d7629b8f556b66f50a1050058", "commitAfterChange": "5ca447c521262374b5199c22b8bb8d32a007f444", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public final boolean getNextCharAsDigit(int radix)", "signatureAfterChange": " public final boolean getNextCharAsDigit(int radix)", "diff": ["-\t\t\tif (Character.digit(this.currentCharacter, radix) == -1) {", "+\t\t\tif (ScannerHelper.digit(this.currentCharacter, radix) == -1) {", "-\t\t\tif (Character.digit(this.currentCharacter, radix) == -1) {", "+\t\t\tif (ScannerHelper.digit(this.currentCharacter, radix) == -1) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0aac7fd3b6a8ec1b740bca9135c1fcd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "0f5d04adf9d2fa735fce5517c85c8317372cf6c0", "commitAfterChange": "6cefacaaf91a5190221cb83191ea60dad1636887", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public static final boolean equals(char[] first, char[] second, int secondStart, int secondEnd, boolean isCaseSensitive)", "signatureAfterChange": " public static final boolean equals(char[] first, char[] second, int secondStart, int secondEnd, boolean isCaseSensitive)", "diff": ["-\t\t\tif (Character.toLowerCase(first[i]) != Character.toLowerCase(second[i+secondStart]))", "+\t\t\tif (ScannerHelper.toLowerCase(first[i]) != ScannerHelper.toLowerCase(second[i+secondStart]))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b1c5f72f31de11f128336514dbc6f0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "580481ae11bd0f856242b0cf44caa66107bf550d", "commitAfterChange": "d08e87c35b21123010227cf2729df51d820e4d50", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames, TypeAnnotationWalker walker)", "signatureAfterChange": " ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames, ITypeAnnotationWalker walker)", "diff": ["-ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames, TypeAnnotationWalker walker) {", "+ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames, ITypeAnnotationWalker walker) {", "-\tif (walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "+\tif (walker != ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b2877a81e6e7977a91065e0e2f7162d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "0f5d04adf9d2fa735fce5517c85c8317372cf6c0", "commitAfterChange": "6cefacaaf91a5190221cb83191ea60dad1636887", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate static char[] removePrefix(char[] name, char[][] prefixes)", "signatureAfterChange": " \t \tprivate static char[] removePrefix(char[] name, char[][] prefixes)", "diff": ["-\t\t\t\t\t\tif(Character.toLowerCase(prefix[currLen]) != Character.toLowerCase(name[currLen])) {", "+\t\t\t\t\t\tif(ScannerHelper.toLowerCase(prefix[currLen]) != ScannerHelper.toLowerCase(name[currLen])) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b384ffdc5f293b1bece727169b4ae1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "f4ae30ee64cb68925e4cce6d6bbe9028d7c3e161", "commitAfterChange": "0123af92e87cd6973f84900ca6492fde5723608b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " private int decodeElementValue(int offset)", "signatureAfterChange": " private int decodeElementValue(int offset)", "diff": ["-\t\t\treadOffset += decodeAnnotation(readOffset);", "+\t\t\treadOffset = decodeAnnotation(readOffset);", "-\t\t\t\treadOffset = decodeElementValueForJavaLangAnnotationTarget(readOffset);", "+\t\t\t\treadOffset = decodeElementValue(readOffset);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b40a0c3383652c96f8963778234f66f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 22, "signatureBeforeChange": " public NameReference getUnspecifiedReferenceOptimized()", "signatureAfterChange": " public NameReference getUnspecifiedReferenceOptimized()", "diff": ["-\t\tref.bits &= ~AstNode.RestrictiveFlagMASK;", "+\t\tref.bits &= ~ASTNode.RestrictiveFlagMASK;", "-\tref.bits &= ~AstNode.RestrictiveFlagMASK;", "+\tref.bits &= ~ASTNode.RestrictiveFlagMASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b60f9b1decd5180f4726ef54e17d9d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "8b532c89fe75cdcd516dedb1f57b44f4fab79fb0", "commitAfterChange": "14eef462fbaf0bab3c247296c2a42a1fdc4f58a6", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic boolean visit(EqualExpression equalExpression, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(EqualExpression equalExpression, BlockScope scope)", "diff": ["-\t\tif ((equalExpression.bits & EqualExpression.OperatorMASK) >> EqualExpression.OperatorSHIFT == OperatorIds.EQUAL_EQUAL) {", "+\t\tif ((equalExpression.bits & AstNode.OperatorMASK) >> AstNode.OperatorSHIFT == OperatorIds.EQUAL_EQUAL) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b779d9a33bce29225b4a3f59ceed4cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 199, "methodNumberAfterChange": 199, "signatureBeforeChange": " \tpublic void getMethodBodies(CompilationUnitDeclaration unit)", "signatureAfterChange": " \tpublic void getMethodBodies(CompilationUnitDeclaration unit)", "diff": ["-\t\tif ((unit.bits & AstNode.HasAllMethodBodies) != 0)", "+\t\tif ((unit.bits & ASTNode.HasAllMethodBodies) != 0)", "-\t\tunit.bits |= AstNode.HasAllMethodBodies;", "+\t\tunit.bits |= ASTNode.HasAllMethodBodies;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0be452a64b47746a74822d626b3fd6fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "e91a03d6ffd76cb11afae070200dbbbe73ce30b0", "commitAfterChange": "1ea5f94648ece67f779d3f9547f2c42cabdfedc2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic ExceptionHandlingFlowContext( \t\tFlowContext parent, \t\tAstNode associatedNode, \t\tReferenceBinding[] handledExceptions, \t\tBlockScope scope, \t\tUnconditionalFlowInfo flowInfo)", "signatureAfterChange": " \t \tpublic ExceptionHandlingFlowContext( \t\tFlowContext parent, \t\tAstNode associatedNode, \t\tReferenceBinding[] handledExceptions, \t\tBlockScope scope, \t\tUnconditionalFlowInfo flowInfo)", "diff": ["-\t\t\t\tthis.initsOnExceptions[i] = FlowInfo.DeadEnd;", "+\t\t\t\tthis.initsOnExceptions[i] = FlowInfo.DEAD_END;", "-\t\tthis.initsOnReturn = FlowInfo.DeadEnd;\t", "+\t\tthis.initsOnReturn = FlowInfo.DEAD_END;\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bfb4f9a5d92b30b11ac5c707e7e401d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "4487a0366e0f035f49191977aab58e81914bdb03", "commitAfterChange": "b87a48f28396e996ab68c113463e4c4d84b67cd4", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\tfor (int i = 0; i < candidatesCount; i++) {", "+\t\t\tfor (int i = 0; i < visiblesCount; i++) {", "-\t\t\t\t\tfor (int j = i + 1; j < candidatesCount; j++)", "+\t\t\t\t\tfor (int j = i + 1; j < visiblesCount; j++)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c16b785c902cddcd8817add3fe4debf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RunJavaSearchTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": " public static Test suite()", "diff": ["-\tJavaSearchTests.TEST_SUITES = new ArrayList(Arrays.asList(getJavaSearchTestClasses()));", "-\tList allClasses = new ArrayList(JavaSearchTests.TEST_SUITES);", "+\tAbstractJavaSearchTests.TEST_SUITES = new ArrayList(Arrays.asList(getJavaSearchTestClasses()));", "+\tList allClasses = new ArrayList(AbstractJavaSearchTests.TEST_SUITES);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c47eac87c4c8be46baf34cce4ac6c95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/CompilationProcessorEnv.java", "commitBeforeChange": "7f0c1689dc377b26f3ac2b4c2b21446a43dd3383", "commitAfterChange": "f7a77c5e8210599982f60934db59bb901b30cb8c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "          public static ProcessorEnvImpl newBuildEnv(     \t\tICompilationParticipantResult[] filesWithAnnotation,     \t\tfinal ICompilationParticipantResult[] additionalFiles,     \t\tIJavaProject javaProj )", "signatureAfterChange": "          public static ProcessorEnvImpl newBuildEnv(     \t\tBuildContext[] filesWithAnnotation,     \t\tfinal BuildContext[] additionalFiles,     \t\tIJavaProject javaProj )", "diff": ["-    \t\tICompilationParticipantResult[] filesWithAnnotation,", "-    \t\tfinal ICompilationParticipantResult[] additionalFiles,", "+    \t\tBuildContext[] filesWithAnnotation,", "+    \t\tfinal BuildContext[] additionalFiles,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ce62eef6586a500ca587976a6c11421", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "816264402111966caf3ec35b2e4d3edb53f19d43", "commitAfterChange": "44c1c470b0c8ef16ec270452a9bc7b0a267cf8d1", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic static void resolve( \t\t\tString[] sourceUnits, \t\t\tString[] encodings, \t\t\tString[] bindingKeys, \t\t\tFileASTRequestor requestor, \t\t\tint apiLevel, \t\t\tMap options, \t\t\tList classpaths, \t\t\tint flags, \t\t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic static void resolve( \t\t\tString[] sourceUnits, \t\t\tString[] encodings, \t\t\tString[] bindingKeys, \t\t\tFileASTRequestor requestor, \t\t\tint apiLevel, \t\t\tMap options, \t\t\tList classpaths, \t\t\tint flags, \t\t\tIProgressMonitor monitor)", "diff": ["-\t\t\tINameEnviromentWithProgress environment = null;", "+\t\t\tINameEnvironmentWithProgress environment = null;", "-\t\t\t\tenvironment = new NameEnviromentWithProgress(allEntries, null, monitor);", "+\t\t\t\tenvironment = new NameEnvironmentWithProgress(allEntries, null, monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d248905465c145ecbfa3d3afaad61fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 72, "signatureBeforeChange": " \tpublic boolean visit(FalseLiteral falseLiteral, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(FalseLiteral falseLiteral, BlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (falseLiteral.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (falseLiteral.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d2b4c4c39c738d68de8939b4665038a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapExecutor.java", "commitBeforeChange": "2073ae07201f3b4750a106d0cadf90473710a63d", "commitAfterChange": "10545bbf89db4e21cbdfaf0260ea872d78aa91e9", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tprivate void checkForceWrap(Token token, int currentIndent) throws WrapRestartException", "signatureAfterChange": "  \tprivate void checkForceWrap(Token token, int currentIndent) throws WrapRestartThrowable", "diff": ["-\tprivate void checkForceWrap(Token token, int currentIndent) throws WrapRestartException {", "+\tprivate void checkForceWrap(Token token, int currentIndent) throws WrapRestartThrowable {", "-\t\t\t\tthrow new WrapRestartException(-1);", "+\t\t\t\tthrow new WrapRestartThrowable(-1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d2f0f511ff660b76483eab9dae0b828", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate void complete(AstNode astNode, AstNode astNodeParent, Binding qualifiedBinding, Scope scope)", "signatureAfterChange": "  \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope)", "diff": ["-\tprivate void complete(AstNode astNode, AstNode astNodeParent, Binding qualifiedBinding, Scope scope) {", "+\tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d3a2176f3e8fe14fcc4e04541f69513", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 107, "signatureBeforeChange": " \tpublic boolean visit(TrueLiteral trueLiteral, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(TrueLiteral trueLiteral, BlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (trueLiteral.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (trueLiteral.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d40868334c4fe847ad4a5980418bc39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "640de02ed7a46754fc81ecefbe0e3191bb430443", "commitAfterChange": "07fae5581eda38b99c92be21c6474426869ec014", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 45, "signatureBeforeChange": "  \t\tpublic void setLog(String logFileName) throws InvalidInputException", "signatureAfterChange": "  \t\tpublic void setLog(String logFileName) throws InvalidInputException", "diff": ["-\t\t\t\t\t\tthis.isXml = true;", "+\t\t\t\t\t\tthis.tagBits |= XML;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d563b7d192788f939678080c6c6238b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateMethodOperation.java", "commitBeforeChange": "90d481edc9060cc498a8f085b08186108312e37b", "commitAfterChange": "f3a3c06f6e68ab7680c250209b9759ac3d56fec6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected IJavaElement generateResultHandle()", "signatureAfterChange": " protected IJavaElement generateResultHandle()", "diff": ["-\tString[] types = convertDOMMethodTypesToSignatures();", "-\tString name = computeName();", "+\tString[] types = convertASTMethodTypesToSignatures();", "+\tString name = getASTNodeName();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e2f8245c2bc3c8ede196e82c93b725d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "058f4956c302999db0dab277cf91883f2d016e2b", "commitAfterChange": "27d9d524a3b624cfc1260a727d1dfb92d53ae22a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tboolean unnecessaryLeftCast = (left.bits & UnnecessaryCastMask) != 0;", "-\t\t\tboolean unnecessaryRightCast = (right.bits & UnnecessaryCastMask) != 0;", "+\t\t\tboolean unnecessaryLeftCast = (left.bits & UnnecessaryCastMASK) != 0;", "+\t\t\tboolean unnecessaryRightCast = (right.bits & UnnecessaryCastMASK) != 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e6cd1e7837f6e9a83d04429a0dd9cb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompoundAssignment.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic CompoundAssignment(Expression lhs, Expression expression,int operator, int sourceEnd)", "signatureAfterChange": "  \tpublic CompoundAssignment(Expression lhs, Expression expression,int operator, int sourceEnd)", "diff": ["-\t\tlhs.bits &= ~IsStrictlyAssignedMASK; // tag lhs as NON assigned - it is also a read access", "-\t\tlhs.bits |= IsCompoundAssignedMASK; // tag lhs as assigned by compound", "+\t\tlhs.bits &= ~IsStrictlyAssigned; // tag lhs as NON assigned - it is also a read access", "+\t\tlhs.bits |= IsCompoundAssigned; // tag lhs as assigned by compound"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ef408236a0483a7ec27c18c0047aee3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DocCommentParser.java", "commitBeforeChange": "5e70a582e36fd39d7629b8f556b66f50a1050058", "commitAfterChange": "5ca447c521262374b5199c22b8bb8d32a007f444", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["-\t\tif (this.scanner.currentCharacter != ' ' && !Character.isWhitespace(this.scanner.currentCharacter)) {", "+\t\tif (this.scanner.currentCharacter != ' ' && !ScannerHelper.isWhitespace(this.scanner.currentCharacter)) {", "-\t\t\t\t\t\tif (this.scanner.currentCharacter == ' ' || Character.isWhitespace(this.scanner.currentCharacter)) {", "+\t\t\t\t\t\tif (this.scanner.currentCharacter == ' ' || ScannerHelper.isWhitespace(this.scanner.currentCharacter)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f172348d65491d3628e52dfeab982d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " \tpublic void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t\t\t\tfield.bits &= ~ASTNode.IsReachableMASK;", "+\t\t\t\t\t\tfield.bits &= ~ASTNode.IsReachable;", "-\t\t\t\t\t\tfield.bits &= ~ASTNode.IsReachableMASK;", "+\t\t\t\t\t\tfield.bits &= ~ASTNode.IsReachable;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f54ffff3cac4b1d03abf58e67aa478d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate BinaryExpressionFragmentBuilder buildFragments(BinaryExpression binaryExpression, BlockScope scope)", "signatureAfterChange": "  \tprivate BinaryExpressionFragmentBuilder buildFragments(BinaryExpression binaryExpression, BlockScope scope)", "diff": ["-\t\tswitch((binaryExpression.bits & AstNode.OperatorMASK) >> AstNode.OperatorSHIFT) {", "+\t\tswitch((binaryExpression.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f9f1fcd5ecc95a46ea0a7f86714a3b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "d7e7bb059880a6c87ea3290708d2d0a9f9e7ebe8", "commitAfterChange": "a415220ad0bdc743d286b40ccc481ededfe8132e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void generateOptimizedLogicalAnd( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedLogicalAnd( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "diff": ["-\t\t\tif ((condConst = left.conditionalConstant()) != NotAConstant) {", "+\t\t\tif ((condConst = left.optimizedBooleanConstant()) != NotAConstant) {", "-\t\t\tif ((condConst = right.conditionalConstant()) != NotAConstant) {", "+\t\t\tif ((condConst = right.optimizedBooleanConstant()) != NotAConstant) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fc8d844ee037151c5b4fc6ce17a3a2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "60e84a84d2c785be17a379ead199176b00163ca2", "commitAfterChange": "dd81d5614e9912f7c701e3f5c6100178a60401f0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void manageSyntheticWriteAccessIfNecessary( \t\tBlockScope currentScope, \t\tFieldBinding fieldBinding, \t\tTypeBinding lastReceiverType)", "signatureAfterChange": " \tpublic void manageSyntheticWriteAccessIfNecessary( \t\tBlockScope currentScope, \t\tFieldBinding fieldBinding, \t\tTypeBinding lastReceiverType)", "diff": ["-\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type", "+\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\t\t&& ((currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4", "+\t\t\t&& ((currentScope.environment().options.targetJDK >= CompilerOptions.JDK1_2"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fc8ebef2f2436618fb23afda60c14ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "3c97a12fe797bc8f1a4e22eb2cfe11932a52f122", "commitAfterChange": "cb3bfb0879489be8fed32e037d62f37c21d37c6b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": " void checkMethods()", "signatureAfterChange": " void checkMethods()", "diff": ["-\t\t\t\t\t\tif (foundMatch[j] == 0 && doesMethodOverride(currentMethod, inheritedMethod)) {", "+\t\t\t\t\t\tif (foundMatch[j] == 0 && doesSubstituteMethodOverride(currentMethod, inheritedMethod)) {", "-\t\t\t\t\tif (doesMethodOverride(inheritedMethod, otherInheritedMethod)) {", "+\t\t\t\t\tif (doesSubstituteMethodOverride(inheritedMethod, otherInheritedMethod)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0feb07eab6b3be8ef308ac6ee2e7cf02", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TrueLiteral.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "signatureAfterChange": " public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired)", "diff": ["-public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired) {", "+public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1010004023635bf8b7c6a740a853984f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "9bef3f15c43b07a14e76957980f62386b2bcee10", "commitAfterChange": "73f504e7d77d95d8fc2d6621b5727e1e3ab07530", "methodNumberBeforeChange": 274, "methodNumberAfterChange": 274, "signatureBeforeChange": " protected void consumeStatementReturn()", "signatureAfterChange": " protected void consumeStatementReturn()", "diff": ["-\t\t\t\tthis.endPosition)", "+\t\t\t\tthis.endStatementPosition)", "-\t\tpushOnAstStack(new ReturnStatement(null, this.intStack[this.intPtr--], this.endPosition));", "+\t\tpushOnAstStack(new ReturnStatement(null, this.intStack[this.intPtr--], this.endStatementPosition));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "104c7e90e01040244fcda57763ad9b8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "82eb8210126dce9dcecaa23100608377607eb4d3", "commitAfterChange": "39a2af446e48bb6f168906e833c304457e17e4cf", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic void testParameterizedArrayTypeSingleArgument04() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedArrayTypeSingleArgument04() throws CoreException", "diff": ["-\t\tSourceType type = selectSourceType(unit,  \"g6.t.def.List<g6.t.def.List<Exception>[]>\"); //$NON-NLS-1$", "+\t\tIType type = selectType(unit,  \"g6.t.def.List<g6.t.def.List<Exception>[]>\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "111fa0663ca5634e36ad81c6a4cf5d3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "580481ae11bd0f856242b0cf44caa66107bf550d", "commitAfterChange": "d08e87c35b21123010227cf2729df51d820e4d50", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "  public TypeBinding getTypeFromTypeSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType,  \t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker)", "signatureAfterChange": "  public TypeBinding getTypeFromTypeSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType,  \t\tchar[][][] missingTypeNames, ITypeAnnotationWalker walker)", "diff": ["-\t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker) ", "+\t\tchar[][][] missingTypeNames, ITypeAnnotationWalker walker) ", "-\tif (dimension > 0 && walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "+\tif (dimension > 0 && walker != ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1149d20c4e2629c0a269666112d044c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Initializer.java", "commitBeforeChange": "39efbf0f3eb32e59d7a65e03590993d59dc6817b", "commitAfterChange": "84bab690fce0d07b753bfc05c56b8e56d168a1a6", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tASTNode clone0(AST target)", "signatureAfterChange": " \tASTNode clone0(AST target)", "diff": ["-\t\tif (this.ast.apiLevel == AST.JLS2) {", "-\t\t\tresult.setModifiers(getModifiers());", "+\t\tif (this.ast.apiLevel == AST.JLS2_INTERNAL) {", "+\t\t\tresult.internalSetModifiers(getModifiers());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "118bc3a9210e0315afdfccbcbf94676f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t&& ((type.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT) == 0) { // no extra parenthesis around type: ((A))exp", "+\t\t\t\t&& ((type.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT) == 0) { // no extra parenthesis around type: ((A))exp"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "119fbe2733ebc69a5b80fe573263b86b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "83dc88df7a1508be17b764df4120ac8a34178f58", "commitAfterChange": "f428b70bc80bfdae47260a00a8636113b21b698c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public final boolean canBeSeenBy(TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "signatureAfterChange": " public final boolean canBeSeenBy(TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "diff": ["-\t\t\tif (currentType.findSuperTypeWithSameErasure(declaringErasure) != null) {", "+\t\t\tif (currentType.findSuperTypeOriginatingFrom(declaringErasure) != null) {", "-\t\t\t\tif (currentType == receiverErasure || receiverErasure.findSuperTypeWithSameErasure(currentType) != null) {", "+\t\t\t\tif (currentType == receiverErasure || receiverErasure.findSuperTypeOriginatingFrom(currentType) != null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11e991d0a42d7ab3aa56992e0400b9da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired)", "diff": ["-\tpublic void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired) {", "+\tpublic void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1243e0b838c3f0b5c5bb6a25cc9fb553", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "6fdaa2b9d78c89a1ed2269f5279c3e02cee4b6cd", "commitAfterChange": "8ec1d344fc5f9b16a04a2a15e36cb4db52cac4eb", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void cacheZipFiles()", "signatureAfterChange": " \tpublic void cacheZipFiles()", "diff": ["-\t\tif (this.zipFiles.getCurrent() != null) return;", "-\t\tthis.zipFiles.setCurrent(new HashMap());", "+\t\tif (this.zipFiles.get() != null) return;", "+\t\tthis.zipFiles.set(new HashMap());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "126b51bdef16c726fb189183a3d765af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/JDIStackFrame.java", "commitBeforeChange": "b3c38270b99ecd1520eea104e9cdb0099eab8f71", "commitAfterChange": "41ef4898bfd4399802c4b7fddb8b2e4f958ada78", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected ThreadReference getDebuggedThread(DebugEvaluationTest test)", "signatureAfterChange": " protected ThreadReference getDebuggedThread(DebugEvaluationTest test)", "diff": ["-\t\t\tTestCase.assertTrue(\"Target exception \" + e.getMessage(), false);", "+\t\t\tAssert.assertTrue(\"Target exception \" + e.getMessage(), false);", "-\t\t\t\tTestCase.assertTrue(\"Compilation error in user code\", false);", "+\t\t\t\tAssert.assertTrue(\"Compilation error in user code\", false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13432781def8a7c1cc3434c47bd82127", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 119, "methodNumberAfterChange": 119, "signatureBeforeChange": " public void test150() throws JavaModelException", "signatureAfterChange": " public void test150() throws JavaModelException", "diff": ["-\t\t\"int[KEYWORD]{int, null, null, int, null, \"+this.positions+R_DICNR+\"}\\n\" + ", "-\t\t\"InterruptedException[TYPE_REF]{InterruptedException, java.lang, Ljava.lang.InterruptedException;, null, null, \"+this.positions+R_DIUNR+\"}\"", "+\t\t\"int[KEYWORD]{int, null, null, int, null, \"+this.positions+R_DRICNR+\"}\\n\" + ", "+\t\t\"InterruptedException[TYPE_REF]{InterruptedException, java.lang, Ljava.lang.InterruptedException;, null, null, \"+this.positions+R_DRIUNR+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "138c2b7642be895287b1b3fd7b4e51e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "20306af2785b6993ef03f5b59102e1d76672145c", "commitAfterChange": "288301050e750c96e441bffa1d7a0c7b5ea96099", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void autoboxing(Expression expression, TypeBinding originalType, TypeBinding convertedType)", "signatureAfterChange": " public void autoboxing(Expression expression, TypeBinding originalType, TypeBinding convertedType)", "diff": ["-\tif (this.options.getSeverity(IProblem.BoxingConversion) == ProblemSeverities.Ignore) return;", "+\tif (this.options.getSeverity(CompilerOptions.AutoBoxing) == ProblemSeverities.Ignore) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13d0dc814dde7e21264f5541dcfd28da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4a7fb72faa1d4eb35981dd799c06dbffe9837a2f", "commitAfterChange": "af607e2e1ad6576e50200e327ea9acd540ed1ad7", "methodNumberBeforeChange": 340, "methodNumberAfterChange": 340, "signatureBeforeChange": " public void testBug110336g() throws CoreException", "signatureAfterChange": " public void testBug110336g() throws CoreException", "diff": ["-\tTypeReferencesCollector collector = new TypeReferencesCollector();", "+\tTypeReferenceCollector collector = new TypeReferenceCollector();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1513dca5653fda71c74f043c56ff546e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 85, "signatureBeforeChange": " \tpublic boolean visit(MessageSend messageSend, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(MessageSend messageSend, BlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (messageSend.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (messageSend.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1514d360ee0f62e7db673cd6456f2270", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionNodeDetector.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic CompletionNodeDetector(AstNode searchedNode, AstNode visitedAst)", "signatureAfterChange": " \t \tpublic CompletionNodeDetector(ASTNode searchedNode, ASTNode visitedAst)", "diff": ["-\tpublic CompletionNodeDetector(AstNode searchedNode, AstNode visitedAst){", "+\tpublic CompletionNodeDetector(ASTNode searchedNode, ASTNode visitedAst){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "158be4c3c0888fc9adba0b686548b571", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tpublic boolean visit( \t\tConditionalExpression conditionalExpression, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tConditionalExpression conditionalExpression, \t\tBlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (conditionalExpression.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (conditionalExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15d49ab1b4aa83f0bfc315020ac7134e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "f9968462ad3e78057baba9747e91f7b6e3ea59e1", "commitAfterChange": "1f65e2f1d1142c8be683dea8425f1840c9121137", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " void checkMethods()", "signatureAfterChange": " void checkMethods()", "diff": ["-\t\t\t\t\t\tif (foundMatch[j] == 0 && doesSubstituteMethodOverride(currentMethod, inheritedMethod)) {", "+\t\t\t\t\t\tif (foundMatch[j] == 0 && isSubstituteParameterSubsignature(currentMethod, inheritedMethod)) {", "-\t\t\t\t\t\t&& doesSubstituteMethodOverride(inheritedMethod, otherInheritedMethod)) {", "+\t\t\t\t\t\t&& isSubstituteParameterSubsignature(inheritedMethod, otherInheritedMethod)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15e82814dcb9076c8887ca18742e02d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java", "commitBeforeChange": "f03e24a20423490ce43dd47d116e6771e9f8b29a", "commitAfterChange": "0425932939e44005b87b30f06674df053a397223", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tASTNode clone(AST target)", "signatureAfterChange": " \tASTNode clone(AST target)", "diff": ["-\t\tif (this.ast.API_LEVEL == AST.LEVEL_2_0) {", "+\t\tif (this.ast.apiLevel == AST.LEVEL_2_0) {", "-\t\tif (this.ast.API_LEVEL >= AST.LEVEL_3_0) {", "+\t\tif (this.ast.apiLevel >= AST.LEVEL_3_0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "166f648816fdd58d260740efe813b31e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "c16162b1194f3110eda140f5ccdd35c2ba36455d", "commitAfterChange": "8d1ff9b80d2587df4aa2d0a1ee1f5a75472a5feb", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r \r protected void updateIndex(Openable element, IResourceDelta delta)", "signatureAfterChange": "\r \r protected void updateIndex(Openable element, IResourceDelta delta)", "diff": ["-\t\t\t\t\t\t\tindexManager.indexJarFile(root.getPath(), root.getJavaProject().getElementName());\r", "+\t\t\t\t\t\t\tindexManager.indexLibrary(root.getPath(), root.getJavaProject().getProject());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1679f5b7fc74ac9ad5be5ad015ef8106", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetParser.java", "commitBeforeChange": "5cb7a8282e40bea7ee7271bbdb7d8b845c76f5b3", "commitAfterChange": "2aa78105ee4089b7ff1a9a2c35425f71b0b156d5", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "\r protected NameReference getUnspecifiedReferenceOptimized()", "signatureAfterChange": "\r protected NameReference getUnspecifiedReferenceOptimized()", "diff": ["-\t\t\tref.bits &= ~NameReference.RestrictiveFlagMASK;\r", "+\t\t\tref.bits &= ~AstNode.RestrictiveFlagMASK;\r", "-\t\tref.bits &= ~NameReference.RestrictiveFlagMASK;\r", "+\t\tref.bits &= ~AstNode.RestrictiveFlagMASK;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1720a6491c90704d0df0c7ee1496a3be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java", "commitBeforeChange": "ee4aaa82998d38e6753ee8cc828566dd18d4910f", "commitAfterChange": "24c9e84b2ec4fea87b1bf2f444e5d541a0e3f479", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  \tfinal void preReplaceChild(ASTNode oldChild, ASTNode newChild, ChildPropertyDescriptor property)", "signatureAfterChange": "  \tfinal void preReplaceChild(ASTNode oldChild, ASTNode newChild, ChildPropertyDescriptor property)", "diff": ["-\t\tif ((this.flags & PROTECT) != 0) {", "+\t\tif ((this.typeAndFlags & PROTECT) != 0) {", "-\t\t\tif ((oldChild.flags & PROTECT) != 0) {", "+\t\t\tif ((oldChild.typeAndFlags & PROTECT) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1751d7b37de8a9093f2b9524aa18d7ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "9a76fb8f9434ae4b71dc267e686b050759ff3536", "commitAfterChange": "e5d54da7cf77d6614acfbbcede23df9b9dad68f9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  protected void createErrorFor(IResource resource, String message)", "signatureAfterChange": "  protected void createErrorFor(IResource resource, String message)", "diff": ["-\t\tIMarker marker = resource.createMarker(JavaBuilder.ProblemMarkerTag);", "+\t\tIMarker marker = resource.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17707edbf056d1290ba3fc444e6fd743", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SubstringCompletionTests.java", "commitBeforeChange": "f2edf9ba686cfe4ee8301f7995d717a549acb9e1", "commitAfterChange": "5e9cb8a680609e97a11e6fc9b255fcb2043219aa", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static Test suite()", "signatureAfterChange": "  public static Test suite()", "diff": ["-\t\treturn buildModelTestSuite(CompletionTests.class);", "+\t\treturn buildModelTestSuite(SubstringCompletionTests.class);", "-\tTestSuite suite = new Suite(CompletionTests.class.getName());", "+\tTestSuite suite = new Suite(SubstringCompletionTests.class.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17916a421c42a852c4e6c853bff6acc2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/OutputFolderTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void testProjectWithSrcBin() throws JavaModelException", "signatureAfterChange": "  \tpublic void testProjectWithSrcBin() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17ed064b481135d81b5a3179a723eb02", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "  public void test080() throws JavaModelException", "signatureAfterChange": "  public void test080() throws JavaModelException", "diff": ["-\t\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link BasicTestTextIns#BasicTestTextIns(int, float, Class)}, Ljavadoc.text.BasicTestTextIns;, (IFLjava.lang.Class;)V, BasicTestTextIns, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\\n\" + ", "-\t\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link BasicTestTextIns#BasicTestTextIns()}, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\"", "+\t\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link BasicTestTextIns#BasicTestTextIns(int, float, Class)}, Ljavadoc.text.BasicTestTextIns;, (IFLjava.lang.Class;)V, BasicTestTextIns, (xxx, real, clazz), \"+this.positions+R_DRINRIT+\"}\\n\" + ", "+\t\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link BasicTestTextIns#BasicTestTextIns()}, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+R_DRINRIT+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18db46bad34a5994ff845f96d89ba59f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "a874d0a70b41fd8d47271a00c32dea355d363a74", "commitAfterChange": "e567f019a8e7a1152204aae3d1ce4204c41c7aea", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected IJavaElement findElement(IJavaElement element, int accuracy)", "signatureAfterChange": " protected IJavaElement findElement(IJavaElement element, int accuracy)", "diff": ["-\tif (accuracy != IJavaSearchResultCollector.EXACT_MATCH) return null;", "+\tif (accuracy != SearchMatch.A_ACCURATE) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18f9a3df646c14e624136ab74cca7aba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/OutputFolderTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic void testProjectWith3Src2Bin() throws JavaModelException", "signatureAfterChange": "  \tpublic void testProjectWith3Src2Bin() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19841be71930914f65983330dcbc31fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "cdbba3fe3494f2d010469af9060ef95e48842233", "commitAfterChange": "35725fdbc820b5d03438d3e4a4d3db79142d2182", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \tpublic MethodBinding findExactMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r \tpublic MethodBinding findExactMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "diff": ["-\t\tcompilationUnitScope().recordReferences(argumentTypes);\r", "+\t\tcompilationUnitScope().recordTypeReferences(argumentTypes);\r", "-\t\t\tcompilationUnitScope().recordReferences(exactMethod.thrownExceptions);\r", "+\t\t\tcompilationUnitScope().recordTypeReferences(exactMethod.thrownExceptions);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a099f7957021e307a54bad257253500", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "57e05ac5c8db0c06028159bb169607bae2e0ec84", "commitAfterChange": "93b35a5a711d0edb75c141799c4443c91fb39f10", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " private CompilationUnitDeclaration buildBindings(ICompilationUnit compilationUnit) throws JavaModelException", "signatureAfterChange": " private CompilationUnitDeclaration buildBindings(ICompilationUnit compilationUnit) throws JavaModelException", "diff": ["-\t\t\t(IFile)compilationUnit.getOriginalElement().getUnderlyingResource() :", "-\t\t\t(IFile)compilationUnit.getUnderlyingResource();", "+\t\t\t(IFile)compilationUnit.getOriginalElement().getResource() :", "+\t\t\t(IFile)compilationUnit.getResource();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aa94185edae68bed526a4fc3d49fc47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4a7fb72faa1d4eb35981dd799c06dbffe9837a2f", "commitAfterChange": "af607e2e1ad6576e50200e327ea9acd540ed1ad7", "methodNumberBeforeChange": 335, "methodNumberAfterChange": 335, "signatureBeforeChange": " public void testBug110336b() throws CoreException", "signatureAfterChange": " public void testBug110336b() throws CoreException", "diff": ["-\tTypeReferencesCollector collector = new TypeReferencesCollector();", "+\tTypeReferenceCollector collector = new TypeReferenceCollector();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ade4ebc1a2bffc0aaf3327eb8c83815", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/Java8ElementProcessor.java", "commitBeforeChange": "73197a47274e75e8fe1581fdac3a086fb2ddf471", "commitAfterChange": "340440fc2f9b9eb03b89c385f562976def2c6c0e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic void testTypeAnnotations5()", "signatureAfterChange": " \t \tpublic void testTypeAnnotations5()", "diff": ["-\t\tverifyTypeAnnotations(typeMirror, new String[]{\"@Type(value=e1)\"});", "+\t\tverifyAnnotations(typeMirror, new String[]{\"@Type(value=e1)\"});", "-\t\tverifyTypeAnnotations(typeMirror, new String[]{\"@Type(value=e2)\"});", "+\t\tverifyAnnotations(typeMirror, new String[]{\"@Type(value=e2)\"});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b736b417fb19755086d1391805f9d12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiSourceFolderAndOutputFolderTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void test0001() throws JavaModelException", "signatureAfterChange": "  \tpublic void test0001() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bfc1e56d76236d215912f847ebbdc3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "e0259efe596fb3e88871acf616821dc2f984a25a", "commitAfterChange": "6ccbe6e7a1eb8a287ad2e183536fbec86fa90b93", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["-\t\t\t\t\t\tbuffer.append(this.resolver.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) declaringElement).getQualifiedName());", "+\t\t\t\t\t\tbuffer.append(this.resolver.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) declaringElement).getKey());", "-\t\t\t\t\t\tbuffer.append(this.resolver.getMethodBinding((org.eclipse.jdt.internal.compiler.lookup.MethodBinding) declaringElement).getName());\t\t\t\t\t\t", "+\t\t\t\t\t\tbuffer.append(this.resolver.getMethodBinding((org.eclipse.jdt.internal.compiler.lookup.MethodBinding) declaringElement).getKey());\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c57e2000e707d3fee50b1da51566cb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "da3abb814c31b6e1c2d43312de494af316e19273", "commitAfterChange": "8af0e3d96f10bb27360a77bbd330487cf3fdc8dd", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprivate Object parseMember(Object receiver) throws InvalidInputException", "signatureAfterChange": " \tprivate Object parseMember(Object receiver) throws InvalidInputException", "diff": ["-", "+\t", "-", "+\t", "-", "+\t", "-\t\tint end = getEndPosition() - 1;", "+\t\tint end = getTokenEndPosition() - 1;", "-\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidSeeReference(start, end);", "+\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidReference(start, end);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cc1fd501061f329f4e81c324eb2ff97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 90, "signatureBeforeChange": " \tpublic boolean visit(PrefixExpression prefixExpression, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(PrefixExpression prefixExpression, BlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (prefixExpression.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (prefixExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cd7408c72ba5c6561d828877ab8f2c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/jdom/DOMFactory.java", "commitBeforeChange": "ab36391231f1ea61e75e0e00b3dc8ffe91eda55e", "commitAfterChange": "6c476fc2e300888d931411f675ed8c5c5f714198", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r public IDOMMethod createMethod()", "signatureAfterChange": "\r public IDOMMethod createMethod()", "diff": ["-\treturn createMethod(\"public void newMethod() {\"+ JavaModelManager.LINE_SEPARATOR+\"}\"+ JavaModelManager.LINE_SEPARATOR); //$NON-NLS-2$ //$NON-NLS-1$\r", "+\treturn createMethod(\"public void newMethod() {\"+ Util.LINE_SEPARATOR+\"}\"+ Util.LINE_SEPARATOR); //$NON-NLS-2$ //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d33f6c10fe0018d883bdac8ec8cb20e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "32aae0cf1b9f94fe336a2b34d2b2b110c5363f4a", "commitAfterChange": "7fa614421be752542e93fc8394ff005421401e06", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " protected IGenericType createInfoFromClassFile(Openable handle, String osPath)", "signatureAfterChange": " protected IBinaryType createInfoFromClassFile(Openable handle, String osPath)", "diff": ["-protected IGenericType createInfoFromClassFile(Openable handle, String osPath) {", "-\tIGenericType info = null;", "+protected IBinaryType createInfoFromClassFile(Openable handle, String osPath) {", "+\tIBinaryType info = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d3430577c184cbe8f7a9858ebf25423", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/VerifyTests.java", "commitBeforeChange": "4b36d8d902157ef078af37f3d78b4138152d8889", "commitAfterChange": "9ef1e97f6b56081e8537310fc409f77c2ce56944", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate File locate(String fileName)", "signatureAfterChange": " \tprivate File locate(String fileName)", "diff": ["-\t\t\tfor (int i= 0; i < fPathItems.length; i++) {", "-\t\t\t\tpath= new File(fPathItems[i], fileName);", "+\t\t\tfor (int i= 0; i < pathItems.length; i++) {", "+\t\t\t\tpath= new File(pathItems[i], fileName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d5cb1f5713a20065f7cb583f8d4c32e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "2579944d091917e27cee3c25e303d9cdf8721b08", "commitAfterChange": "ff568cfa3818ea8ce091951aa40f00dde1253577", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["-\t\tfinal Object insertNewLineAfterArgAnnotationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ARG_ANNOTATION);", "+\t\tfinal Object insertNewLineAfterArgAnnotationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PARAMETER);", "-\t\t\tthis.insert_new_line_after_arg_annotation = JavaCore.INSERT.equals(insertNewLineAfterArgAnnotationOption);", "+\t\t\tthis.insert_new_line_after_annotation_on_parameter = JavaCore.INSERT.equals(insertNewLineAfterArgAnnotationOption);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d9aa593e8cf9907ab574c15c9ebe713", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/ClasspathMultiDirectory.java", "commitBeforeChange": "d12bc71c18644c70f55803c4984554c1c7ec2c7f", "commitAfterChange": "02e41bd22396d523c7a0e7b774bb557781eb6970", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \r public boolean equals(Object o)", "signatureAfterChange": "\r \r public boolean equals(Object o)", "diff": ["-\treturn binaryPath.equals(md.binaryPath) && sourcePath.equals(md.sourcePath);\r", "+\treturn binaryPath.equalsIgnoreCase(md.binaryPath) && sourcePath.equalsIgnoreCase(md.sourcePath);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1da31ce98bcc500e37f89d14a44b6120", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \t \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\t\t\t\t\t\t&& (this.initialization.bits & ASTNode.UnnecessaryCastMASK) == 0) {", "+\t\t\t\t\t\t\t\t&& (this.initialization.bits & ASTNode.UnnecessaryCast) == 0) {", "-\t\t\t\t\t\t\t\t&& (this.initialization.bits & ASTNode.UnnecessaryCastMASK) == 0) {", "+\t\t\t\t\t\t\t\t&& (this.initialization.bits & ASTNode.UnnecessaryCast) == 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1df28e02e47739d7ba01575267f2a818", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocBugsCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  public void testBug115662b() throws JavaModelException", "signatureAfterChange": "  public void testBug115662b() throws JavaModelException", "diff": ["-\t\t\"toString[METHOD_REF]{toString(), Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, \"+this.positions+R_DICNRNS+\"}\\n\" + ", "-\t\t\"toto[FIELD_REF]{toto, Lbugs.b115662.Tests;, I, toto, null, \"+this.positions+R_DICNRNS+\"}\"", "+\t\t\"toString[METHOD_REF]{toString(), Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, \"+this.positions+R_DRICNRNS+\"}\\n\" + ", "+\t\t\"toto[FIELD_REF]{toto, Lbugs.b115662.Tests;, I, toto, null, \"+this.positions+R_DRICNRNS+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e010e80217e5a8fb774f266bfa2410f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelOperation.java", "commitBeforeChange": "6996eefbec9d323db44565ecead4e729b89052e5", "commitAfterChange": "85690335169bc4bb1017b41c44ec8851cb7cf6e5", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " protected void deleteEmptyPackageFragment( \tIPackageFragment fragment, \tboolean force) \tthrows JavaModelException", "signatureAfterChange": " protected void deleteEmptyPackageFragment( \tIPackageFragment fragment, \tboolean force) \tthrows JavaModelException", "diff": ["-\tIContainer resource = (IContainer) fragment.getCorrespondingResource();", "-\tIResource rootResource = fragment.getParent().getUnderlyingResource();", "+\tIContainer resource = (IContainer) fragment.getResource();", "+\tIResource rootResource = fragment.getParent().getResource();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e8c574d13545d1c4aa85f76b432b5a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tbreakLabel = new Label();", "-\t\tcontinueLabel = new Label();", "+\t\tbreakLabel = new BranchLabel();", "+\t\tcontinueLabel = new BranchLabel();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f3c36ce9e25337e87786d3e2cf399b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "38c895fd64a92567249832dd2a8d427fc1bcacc2", "commitAfterChange": "47b4b871bf6d388352229c39f2d0357c2b36e470", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": " \tpublic boolean visit( \t\tExplicitConstructorCall explicitConstructor, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tExplicitConstructorCall explicitConstructor, \t\tBlockScope scope)", "diff": ["-\t\t\tif (this.preferences.insert_space_within_message_send) {", "+\t\t\tif (this.preferences.insert_space_after_opening_paren_in_message_send) {", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_within_message_send); ", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_message_send); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f875909c27f0226138a0441b88d3a46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 128, "signatureBeforeChange": " public void invalidType(AstNode location, TypeBinding type)", "signatureAfterChange": " public void invalidType(ASTNode location, TypeBinding type)", "diff": ["-public void invalidType(AstNode location, TypeBinding type) {", "+public void invalidType(ASTNode location, TypeBinding type) {", "-\tif ((location.bits & AstNode.InsideJavadoc) != 0) {", "+\tif ((location.bits & ASTNode.InsideJavadoc) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fe0ace356f62db13b28705c57f9b0b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "82eb8210126dce9dcecaa23100608377607eb4d3", "commitAfterChange": "39a2af446e48bb6f168906e833c304457e17e4cf", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tpublic void testParameterizedArrayTypeSingleArgument03() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedArrayTypeSingleArgument03() throws CoreException", "diff": ["-\t\tSourceType type = selectSourceType(unit,  \"g6.t.def.List<Exception>\", 2 /* 2nd occurence*/); //$NON-NLS-1$", "+\t\tIType type = selectType(unit,  \"g6.t.def.List<Exception>\", 2 /* 2nd occurence*/); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2051e235106b06bfa86039dad106a3ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "80d1a1c8c9608e72c63b677a4e2d1f5e89ff648c", "commitAfterChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "methodNumberBeforeChange": 155, "methodNumberAfterChange": 155, "signatureBeforeChange": "\r protected void consumeStatementIfNoElse()", "signatureAfterChange": "\r protected void consumeStatementIfNoElse()", "diff": ["-\t\t\t\tendPosition); \r", "+\t\t\t\tendStatementPosition); \r", "-\t\t\t\tendPosition); \r", "+\t\t\t\tendStatementPosition); \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20577fa84b4d259afc8624c149b69f49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java", "commitBeforeChange": "adda76dd8bf9eeacb64e3f4f77b7d994b5e9cb4d", "commitAfterChange": "bad954afb2676759183aeb6e67aac62fcd10e156", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " public void testPackageFragmentNonJavaResources7() throws JavaModelException", "signatureAfterChange": " public void testPackageFragmentNonJavaResources7() throws CoreException", "diff": ["-public void testPackageFragmentNonJavaResources7() throws JavaModelException {\t", "-\t// regular zip package without resources", "+public void testPackageFragmentNonJavaResources7() throws CoreException {\t", "-\tassertResourceNamesEqual(", "+\tassertResourceTreeEquals("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20c1eb2349364e59d4a6dc1c39c086cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java", "commitBeforeChange": "7184fe7e9ce3404df3f6147602a0f216b79ebe44", "commitAfterChange": "b22251ac966c7d61e7443863a4e62a37844f5e08", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public String normalizedPath()", "signatureAfterChange": " public String normalizedPath()", "diff": ["-\tString rawName = this.zipFile.getName();", "+\tString rawName = this.file.getPath();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21b32030ed64540a2cf20a563aa5594f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void test020() throws JavaModelException", "signatureAfterChange": " public void test020() throws JavaModelException", "diff": ["-\t\t\"foo[FIELD_REF]{foo, Ljavadoc.methods.tags.BasicTestMethods;, I, foo, null, \"+this.positions+R_DICNRNS+\"}\\n\" + ", "-\t\t\"foo[METHOD_REF]{foo(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, foo, null, \"+this.positions+R_DICNRNS+\"}\"", "+\t\t\"foo[FIELD_REF]{foo, Ljavadoc.methods.tags.BasicTestMethods;, I, foo, null, \"+this.positions+R_DRICNRNS+\"}\\n\" + ", "+\t\t\"foo[METHOD_REF]{foo(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, foo, null, \"+this.positions+R_DRICNRNS+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "226e9e3acae62d82ccadff51a4a64055", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 41, "signatureBeforeChange": "\r public int literalIndexForJavaLangNoClassDefFoundErrorStringConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangNoClassDefFoundErrorStringConstructor()", "diff": ["-\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "230c2063ee9702e56a2bdfd6c71e6d0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic void generateMissingAbstractMethods(MethodDeclaration[] methodDeclarations, CompilationResult compilationResult)", "signatureAfterChange": " \tpublic void generateMissingAbstractMethods(MethodDeclaration[] methodDeclarations, CompilationResult compilationResult)", "diff": ["-\t\t \t\tIProblem[] problems = compilationResult.problems;", "+\t\t \t\tCategorizedProblem[] problems = compilationResult.problems;", "-\t\t\t\t\tIProblem problem = problems[j];", "+\t\t\t\t\tCategorizedProblem problem = problems[j];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "236500ba22372b032300df383ccefe58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "57e05ac5c8db0c06028159bb169607bae2e0ec84", "commitAfterChange": "93b35a5a711d0edb75c141799c4443c91fb39f10", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " private IResource getResource(IJavaElement element) throws JavaModelException", "signatureAfterChange": " private IResource getResource(IJavaElement element)", "diff": ["-private IResource getResource(IJavaElement element) throws JavaModelException {", "+private IResource getResource(IJavaElement element) {", "-\t\t\t\treturn cu.getOriginalElement().getUnderlyingResource();", "+\t\t\t\treturn cu.getOriginalElement().getResource();", "-\t\t\t\treturn cu.getUnderlyingResource();", "+\t\t\t\treturn cu.getResource();", "-\treturn element.getUnderlyingResource();", "+\treturn element.getResource();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2396a4ccdd6c65686de034dee36523c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic boolean visit(Assignment assignment, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(Assignment assignment, BlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (assignment.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (assignment.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23c170a17630a6adb6f4f75bdc4956b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "0927ffa25a2592bfca0a67c9cc9e0e69775118de", "commitAfterChange": "7b934c773095ee4cd83d9fe1d55bbb70d8656cbb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "signatureAfterChange": " public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "diff": ["-\t\t    if ((originalBinding.returnType.tagBits & TagBits.HasTypeVariable) != 0 && runtimeTimeType.id != T_Object) {", "+\t\t    if ((originalBinding.returnType.tagBits & TagBits.HasTypeVariable) != 0 && runtimeTimeType.id != T_JavaLangObject) {", "-\t\t\t\t\t\t&& runtimeTimeType.id != T_Object", "+\t\t\t\t\t\t&& runtimeTimeType.id != T_JavaLangObject"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23de19d74f0223119f162e449f8c221f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tprivate void updateReadOnlyPackageFragmentsForCopy(IContainer sourceFolder, IPackageFragmentRoot root, String[] newFragName)", "signatureAfterChange": " \t \tprivate void updateReadOnlyPackageFragmentsForCopy(IContainer sourceFolder, PackageFragmentRoot root, String[] newFragName)", "diff": ["-\tprivate void updateReadOnlyPackageFragmentsForCopy(IContainer sourceFolder, IPackageFragmentRoot root, String[] newFragName) {", "-\t\tIContainer parentFolder = (IContainer) root.getResource();", "+\tprivate void updateReadOnlyPackageFragmentsForCopy(IContainer sourceFolder, PackageFragmentRoot root, String[] newFragName) {", "+\t\tIContainer parentFolder = (IContainer) root.resource();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "245d2b9aa0cba9b1c182463ae11bf5fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "006840496c634605eabe839d601b387cc5a67afc", "commitAfterChange": "141f925aec4c96ac1d9b6f8adc8864f93d5076e0", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \t \tpublic ClassInstanceCreation convert(AnonymousLocalTypeDeclaration expression)", "signatureAfterChange": " \t \tpublic ClassInstanceCreation convert(AnonymousLocalTypeDeclaration expression)", "diff": ["-\t\t\tclassInstanceCreation.resolveTypeBinding();", "+\t\t\tanonymousClassDeclaration.resolveBinding();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "246d7e438043a3f04367021cc6b40164", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public int literalIndexForJavaLangClassGetComponentType()", "signatureAfterChange": " public int literalIndexForJavaLangClassGetComponentType()", "diff": ["-\tif ((index = wellKnownMethods[GETCOMPONENTTYPE_CLASS_METHOD]) == 0) {", "+\tif ((index = wellKnownMethods[CLASS_GETCOMPONENTTYPE_METHOD]) == 0) {", "-\t\tindex = wellKnownMethods[GETCOMPONENTTYPE_CLASS_METHOD] = currentIndex++;", "+\t\tindex = wellKnownMethods[CLASS_GETCOMPONENTTYPE_METHOD] = currentIndex++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24c0283a002c47b2f2c457b66ceba6f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void generateOptimizedNonBooleanEqual(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedNonBooleanEqual(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired)", "diff": ["-\tpublic void generateOptimizedNonBooleanEqual(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired) {", "+\tpublic void generateOptimizedNonBooleanEqual(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "253fdc75cb331f5e7e6e678b89efbf42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 54, "signatureBeforeChange": "\r public int literalIndexForJavaLangStringBufferConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangStringBufferConstructor()", "diff": ["-\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25927db8315d387ba947648f08bc1e29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void resolve(MethodScope initializationScope)", "signatureAfterChange": "  \tpublic void resolve(MethodScope initializationScope)", "diff": ["-\t\t\t\t\t\t\t\t\t&& (this.initialization.bits & ASTNode.UnnecessaryCastMASK) == 0) {", "+\t\t\t\t\t\t\t\t\t&& (this.initialization.bits & ASTNode.UnnecessaryCast) == 0) {", "-\t\t\t\t\t\t\t\t\t&& (this.initialization.bits & ASTNode.UnnecessaryCastMASK) == 0) {", "+\t\t\t\t\t\t\t\t\t&& (this.initialization.bits & ASTNode.UnnecessaryCast) == 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25b07fe39e1ab38f0527b7407862cf04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39efbf0f3eb32e59d7a65e03590993d59dc6817b", "commitAfterChange": "84bab690fce0d07b753bfc05c56b8e56d168a1a6", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": "  \tpublic Type convertType(TypeReference typeReference)", "diff": ["-\t\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\tcase AST.JLS2_INTERNAL :", "-\t\t\t\t\tcase AST.JLS2 : {", "+\t\t\t\t\tcase AST.JLS2_INTERNAL : {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25b44edd34ac869a402b03e2fbafafe8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void generateOptimizedBoolean( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedBoolean( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tBranchLabel trueLabel, \t\tBranchLabel falseLabel, \t\tboolean valueRequired)", "diff": ["-\t\tLabel trueLabel,", "-\t\tLabel falseLabel,", "+\t\tBranchLabel trueLabel,", "+\t\tBranchLabel falseLabel,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25cbdefe35c4de48d1ccbd11205e3502", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " public void test070() throws JavaModelException", "signatureAfterChange": " public void test070() throws JavaModelException", "diff": ["-\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns(int, float, Class)}, Ljavadoc.text.BasicTestTextIns;, (IFLjava.lang.Class;)V, BasicTestTextIns, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\\n\" + ", "-\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns()}, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+JAVADOC_RELEVANCE_IT+\"}\"", "+\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns(int, float, Class)}, Ljavadoc.text.BasicTestTextIns;, (IFLjava.lang.Class;)V, BasicTestTextIns, (xxx, real, clazz), \"+this.positions+R_DRINRIT+\"}\\n\" + ", "+\t\t\"BasicTestTextIns[JAVADOC_METHOD_REF]{{@link #BasicTestTextIns()}, Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+R_DRINRIT+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26042c3456bb22eb31501f7f8756a472", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "2638be2ccc1738a8756046b508b2a9be01dab4c9", "commitAfterChange": "2af4d6c5a01ec5b5f71fc5f4417f402b3cbb8976", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void generateMethodInfoHeaderForClinit()", "signatureAfterChange": " \tpublic void generateMethodInfoHeaderForClinit()", "diff": ["-\t\tint nameIndex = constantPool.literalIndex(QualifiedNamesConstants.Clinit);", "+\t\tint nameIndex = constantPool.literalIndex(ConstantPool.Clinit);", "-\t\t\tconstantPool.literalIndex(QualifiedNamesConstants.ClinitSignature);", "+\t\t\tconstantPool.literalIndex(ConstantPool.ClinitSignature);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26839e758966316425335b73d7ac7a02", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiSourceFolderAndOutputFolderTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic void test0007() throws JavaModelException", "signatureAfterChange": " \t \tpublic void test0007() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26a2943279178f6566877236ff272d2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HandleFactory.java", "commitBeforeChange": "fe905e29a608f61f2afe181f4c1e4e27bb2b95dc", "commitAfterChange": "53a7cfa9bf2a3a1ade921d716dbdc58a4bfc35d4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic Openable createOpenable(String resourcePath, IJavaSearchScope scope)", "signatureAfterChange": " \tpublic Openable createOpenable(String resourcePath, IJavaSearchScope scope)", "diff": ["-\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isJavaFileName(simpleName)) {", "+\t\t\tif (org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(simpleName)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "272cccf750740fe8a7739200cdad3336", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void addLabel(Label aLabel)", "signatureAfterChange": " public void addLabel(BranchLabel aLabel)", "diff": ["-public void addLabel(Label aLabel) {", "+public void addLabel(BranchLabel aLabel) {", "-\t\tSystem.arraycopy(labels, 0, labels = new Label[countLabels + LABELS_INCREMENT], 0, countLabels);", "+\t\tSystem.arraycopy(labels, 0, labels = new BranchLabel[countLabels + LABELS_INCREMENT], 0, countLabels);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27350e6b7174306d0bf22caacce6b98d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java", "commitBeforeChange": "810d2a46e73e304780d3a58f117d6c63103b4e72", "commitAfterChange": "43bf242c384a6b4ad5daf26c5b4617ec68564235", "methodNumberBeforeChange": 227, "methodNumberAfterChange": 227, "signatureBeforeChange": " \tpublic void testExtraDimension()", "signatureAfterChange": " \tpublic void testExtraDimension()", "diff": ["-\t\tExtraDimension x1 = this.ast.newExtraDimension();", "+\t\tDimension x1 = this.ast.newDimension();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27c028ca3f60361c16537fc4a99888b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "60adc6e9bd2a19d1f00a26879d59da4db15980bb", "commitAfterChange": "2fa8bdc58397f8ba42986ed8442348506f4b1424", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r public void setUnreachableCodeSeverity(int flag)", "signatureAfterChange": "\r public void setUnreachableCodeSeverity(int flag)", "diff": ["-\t\tcase ERROR : \r", "+\t\tcase Error : \r", "-\t\tcase WARNING : \r", "+\t\tcase Warning : \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28656768b7bcaf2a979482aeab9e9c82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "57be54931a21775011b9d46837f226f82fd878f2", "commitAfterChange": "69b7d322507c416d24ecb0826f4b72b49ddbac45", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void recordContinueFrom(FlowContext innerFlowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public void recordContinueFrom(FlowContext innerFlowContext, FlowInfo flowInfo)", "diff": ["-\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0)\t{", "-\t\tif ((this.initsOnContinue.tagBits & FlowInfo.UNREACHABLE) == 0) {", "+\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE_OR_DEAD) == 0)\t{", "+\t\tif ((this.initsOnContinue.tagBits & FlowInfo.UNREACHABLE_OR_DEAD) == 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "287cb78295cc1d189a6809a5f0d1235b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiSourceFolderAndOutputFolderTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void test0010() throws JavaModelException", "signatureAfterChange": " \tpublic void test0010() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28adc8d7e4f48b1b73f93969bc75444a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "e91a03d6ffd76cb11afae070200dbbbe73ce30b0", "commitAfterChange": "1ea5f94648ece67f779d3f9547f2c42cabdfedc2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic UnconditionalFlowInfo addInitializationsFrom(UnconditionalFlowInfo otherInits)", "signatureAfterChange": " \tpublic UnconditionalFlowInfo addInitializationsFrom(UnconditionalFlowInfo otherInits)", "diff": ["-\t\tif (this == DeadEnd)", "+\t\tif (this == DEAD_END)", "-\t\tif (otherInits == DeadEnd)", "+\t\tif (otherInits == DEAD_END)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28b50497a4cfb9a8fa7396b7ec453d98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 54, "signatureBeforeChange": "\r public int literalIndexForJavaLangStringBufferConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangStringBufferConstructor()", "diff": ["-\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2936bdb3e9d635c2319000f4925613ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowInfo.java", "commitBeforeChange": "afec7d4a120ad9d3de76bf79cb0366f8fe30669d", "commitAfterChange": "57c6d386f529d0e8572acc77526ab668fb7c3818", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tabstract public UnconditionalFlowInfo addInitializationsFrom(UnconditionalFlowInfo otherInits);", "signatureAfterChange": " \tabstract public FlowInfo addInitializationsFrom(FlowInfo otherInits);", "diff": ["-\tabstract public UnconditionalFlowInfo addInitializationsFrom(UnconditionalFlowInfo otherInits);", "+\tabstract public FlowInfo addInitializationsFrom(FlowInfo otherInits);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "294040350563c77ce24c201a681272c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "4b36d8d902157ef078af37f3d78b4138152d8889", "commitAfterChange": "9ef1e97f6b56081e8537310fc409f77c2ce56944", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " \tpublic void removeFolder(IPath folderPath)", "signatureAfterChange": " \tpublic void removeFolder(IPath folderPath)", "diff": ["-\t\tcheckAssertion(\"a workspace must be open\", fIsOpen); //$NON-NLS-1$", "-\t\tIFolder folder = fWorkspace.getRoot().getFolder(folderPath);", "+\t\tcheckAssertion(\"a workspace must be open\", isOpen); //$NON-NLS-1$", "+\t\tIFolder folder = workspace.getRoot().getFolder(folderPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29d1d8b3a8b399fb0973facb7c58b7be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "adb1e4d21f756fdc893d84befd3e859cfa2aa662", "commitAfterChange": "2941812daedfecddb313ba4dd0685bac7c26b287", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 120, "signatureBeforeChange": " \tpublic void test098()", "signatureAfterChange": " \tpublic void test098()", "diff": ["-\t\tpreferences.anonymous_type_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "-\t\tpreferences.method_declaration_brace_position = DefaultCodeFormatterConstants.NEXT_LINE;", "+\t\tpreferences.brace_position_for_anonymous_type_declaration = DefaultCodeFormatterConstants.NEXT_LINE;", "+\t\tpreferences.brace_position_for_method_declaration = DefaultCodeFormatterConstants.NEXT_LINE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29e32aa396a06d7b85f16f696478e686", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "fe905e29a608f61f2afe181f4c1e4e27bb2b95dc", "commitAfterChange": "53a7cfa9bf2a3a1ade921d716dbdc58a4bfc35d4", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  void removePackage(IResourceDelta sourceDelta)", "signatureAfterChange": "  void removePackage(IResourceDelta sourceDelta)", "diff": ["-\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isJavaFileName(typeLocatorPath.lastSegment()))", "+\t\t\tif (org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(typeLocatorPath.lastSegment()))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29e7b633c5861f0e261e2ec62324096d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected void evaluateWithExpectedProblem(GlobalVariable var, IProblem expected)", "signatureAfterChange": " \tprotected void evaluateWithExpectedProblem(GlobalVariable var, CategorizedProblem expected)", "diff": ["-\tprotected void evaluateWithExpectedProblem(GlobalVariable var, IProblem expected) {", "+\tprotected void evaluateWithExpectedProblem(GlobalVariable var, CategorizedProblem expected) {", "-\t\t\tIProblem[] problems = result.getProblems();", "+\t\t\tCategorizedProblem[] problems = result.getProblems();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a35a833d3e87dff690246c3134d8c18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "522e84acc5c220c07378cd67640c99884ac9cc9d", "commitAfterChange": "e5f48a4d4e39a733649e1d7678dd3cc38b1f57e5", "methodNumberBeforeChange": 599, "methodNumberAfterChange": 599, "signatureBeforeChange": "  \tpublic void testSuperMethodInvocation()", "signatureAfterChange": "  \tpublic void testSuperMethodInvocation()", "diff": ["-\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\tif (ast.apiLevel() >= AST.JLS3) {", "-\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\tif (ast.apiLevel() >= AST.JLS3) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a5dc82d8e4fd81b7350e81bcd60089b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/OutputFolderTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void testProjectWith2SrcBin() throws JavaModelException", "signatureAfterChange": "  \tpublic void testProjectWith2SrcBin() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2af10e890318731de61832928bd3b48c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 41, "signatureBeforeChange": "\r public int literalIndexForJavaLangNoClassDefFoundErrorStringConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangNoClassDefFoundErrorStringConstructor()", "diff": ["-\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bbe38960503885a250c9272bfc2063b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SyntheticMethodBinding.java", "commitBeforeChange": "d3f4f7dc5cd4aef3b0604e519603fa156a7db8f9", "commitAfterChange": "f1f4a4119f1226b6996589389edda1c170b485ed", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void initializeMethodAccessor(MethodBinding accessedMethod, boolean isSuperAccess, ReferenceBinding receiverType)", "signatureAfterChange": " \tpublic void initializeMethodAccessor(MethodBinding accessedMethod, boolean isSuperAccess, ReferenceBinding receiverType)", "diff": ["-\t\t\t\t\tif (CharOperation.equals(this.selector, methods[i].selector) && areParametersEqual(methods[i])) {", "+\t\t\t\t\tif (CharOperation.equals(this.selector, methods[i].selector) && areParameterErasuresEqual(methods[i])) {", "-\t\t\t\t\t\tif (CharOperation.equals(this.selector, knownAccessMethods[i].selector) && areParametersEqual(knownAccessMethods[i])) {", "+\t\t\t\t\t\tif (CharOperation.equals(this.selector, knownAccessMethods[i].selector) && areParameterErasuresEqual(knownAccessMethods[i])) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c1523e300fcf7274b5b50b99fb027d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "418f1d61f23f33e0e639dfcb37d7371b9ddc656a", "commitAfterChange": "9fedbc20e6a58ab4ca985b6cd53ab67968737404", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " \tprivate int retrieveIdentifierEndPosition(int start, int end)", "signatureAfterChange": " \tprivate int retrieveIdentifierEndPosition(int start, int end)", "diff": ["-\t\t\twhile ((token = scanner.getNextToken()) != Scanner.TokenNameEOF) {", "+\t\t\twhile ((token = scanner.getNextToken()) != ITerminalSymbols.TokenNameEOF) {", "-\t\t\t\t\tcase Scanner.TokenNameIdentifier://110", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameIdentifier://110"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c3bd6dabfa64ea8075752c343044b24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocBugsCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void testBug114341a() throws JavaModelException", "signatureAfterChange": " public void testBug114341a() throws JavaModelException", "diff": ["-\t\t\"Secondary.Member[JAVADOC_TYPE_REF]{{@link Member}, javadoc.text, Ljavadoc.text.Secondary$Member;, null, null, \"+this.positions+R_DICNRIT+\"}\\n\" + ", "-\t\t\"Secondary.Member[TYPE_REF]{Member, javadoc.text, Ljavadoc.text.Secondary$Member;, null, null, \"+this.positions+R_DICNR+\"}\"", "+\t\t\"Secondary.Member[JAVADOC_TYPE_REF]{{@link Member}, javadoc.text, Ljavadoc.text.Secondary$Member;, null, null, \"+this.positions+R_DRICNRIT+\"}\\n\" + ", "+\t\t\"Secondary.Member[TYPE_REF]{Member, javadoc.text, Ljavadoc.text.Secondary$Member;, null, null, \"+this.positions+R_DRICNR+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c557ac02a4c87f04a646a9fae77e885", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java", "commitBeforeChange": "f03e24a20423490ce43dd47d116e6771e9f8b29a", "commitAfterChange": "0425932939e44005b87b30f06674df053a397223", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tTypeDeclaration(AST ast)", "signatureAfterChange": " \tTypeDeclaration(AST ast)", "diff": ["-\t\tif (ast.API_LEVEL == AST.LEVEL_2_0) {", "+\t\tif (ast.apiLevel == AST.LEVEL_2_0) {", "-\t\tif (ast.API_LEVEL >= AST.LEVEL_3_0) {", "+\t\tif (ast.apiLevel >= AST.LEVEL_3_0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c86b78cfeb43df8d96f95253dfa6b53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "7f0c1689dc377b26f3ac2b4c2b21446a43dd3383", "commitAfterChange": "f7a77c5e8210599982f60934db59bb901b30cb8c", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tprivate void cleanupAllGeneratedFilesFrom(ICompilationParticipantResult[] cpResults)", "signatureAfterChange": " \t \tprivate void cleanupAllGeneratedFilesFrom(BuildContext[] cpResults)", "diff": ["-\tprivate void cleanupAllGeneratedFilesFrom(ICompilationParticipantResult[] cpResults){", "+\tprivate void cleanupAllGeneratedFilesFrom(BuildContext[] cpResults){", "-\t\t\tfor( ICompilationParticipantResult cpResult : cpResults){\t\t\t", "+\t\t\tfor( BuildContext cpResult : cpResults){\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c956e7c57b6ac391729c5412de61a0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5c72ddaa5e79d3bcf534f5780ca88a7a97636e7a", "commitAfterChange": "488a4d6e7cacdc0e333c16a8fdbbfb759cc631cd", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void createClasspathProblemMarker(IJavaModelStatus status)", "signatureAfterChange": " \tpublic void createClasspathProblemMarker(IJavaModelStatus status)", "diff": ["-\t\t\t\t\tIMarker.GENERATED_BY,", "+\t\t\t\t\tIMarker.SOURCE_ID,", "-\t\t\t\t\tJavaBuilder.GENERATED_BY,", "+\t\t\t\t\tJavaBuilder.SOURCE_ID,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cecc151e8e34f404d68a2fc812609c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\t\t\t\t\t? (AstNode) currentScope.methodScope().referenceContext", "-\t\t\t\t\t\t: (AstNode) this,", "+\t\t\t\t\t\t? (ASTNode) currentScope.methodScope().referenceContext", "+\t\t\t\t\t\t: (ASTNode) this,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d27b330b218255f2fc89ce80e3724c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tthis.receiver.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\tthis.receiver.bits |= DisableUnnecessaryCastCheck; // will check later on", "-\t\t\t\targument.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\t\t\targument.bits |= DisableUnnecessaryCastCheck; // will check later on"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e3b0e3e555e0b928a0e7423987b571b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "d1facd69b9dc2127e7162415007081afa0f4348b", "commitAfterChange": "a31fc41a761266e1336ef1dbd295debe293f4d81", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "signatureAfterChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "diff": ["-\t\t\t\tif (!tPrime.isNormalBaseType() && !sPrime.isNormalBaseType()) {", "+\t\t\t\tif (!tPrime.isPrimitiveType() && !sPrime.isPrimitiveType()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e6292d23c305b67c9619da4f978d75d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "6defd2b79520062f5150164ded77c2d030acc168", "commitAfterChange": "d351702f3561d64a024c15ffbed0faad48ce2838", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void checkComment()", "signatureAfterChange": " public void checkComment()", "diff": ["-\t\tTypeReference[] thrownExceptions = this.javadoc.thrownExceptions;", "+\t\tTypeReference[] thrownExceptions = this.javadoc.exceptionReferences;", "-\t\tExpression[] references = this.javadoc.references;", "+\t\tExpression[] references = this.javadoc.seeReferences;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e7e13aa047fd9d91fc79adf16de3eee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "4ab9f51613d504c2ff6edffad453d042a8c04058", "commitAfterChange": "d588d04827eba4279cf3ad675c4250450aee4bea", "methodNumberBeforeChange": 162, "methodNumberAfterChange": 162, "signatureBeforeChange": " public void test141_null_ref_option()", "signatureAfterChange": " public void test141_null_ref_option()", "diff": ["-     + \" -bootclasspath \" + getLibraryClasses()", "-     + \" -cp \" + getJCEJar()", "+     + \" -bootclasspath \" + getLibraryClassesAsQuotedString()", "+     + \" -cp \" + getJCEJarAsQuotedString()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ef15e2562b9a136a60e923511c79764", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "38c895fd64a92567249832dd2a8d427fc1bcacc2", "commitAfterChange": "47b4b871bf6d388352229c39f2d0357c2b36e470", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic boolean visit( \t\tAllocationExpression allocationExpression, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tAllocationExpression allocationExpression, \t\tBlockScope scope)", "diff": ["-\t\t\tif (this.preferences.insert_space_within_message_send) {", "+\t\t\tif (this.preferences.insert_space_after_opening_paren_in_message_send) {", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_within_message_send); ", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_message_send); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f81476fd60e8f12fb2f4789660d1c08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\t\tcaseLabels[i].tagBits |= Label.USED;", "+\t\t\t\tcaseLabels[i].tagBits |= BranchLabel.USED;", "-\t\t\tif (needSwitch) defaultLabel.tagBits |= Label.USED;", "+\t\t\tif (needSwitch) defaultLabel.tagBits |= BranchLabel.USED;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fc6380940e50e3c3fb847231881fccd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic boolean equals(IProblem pb1, IProblem pb2)", "signatureAfterChange": " \tpublic boolean equals(CategorizedProblem pb1, CategorizedProblem pb2)", "diff": ["-\tpublic boolean equals(IProblem pb1, IProblem pb2) {", "+\tpublic boolean equals(CategorizedProblem pb1, CategorizedProblem pb2) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fd7de11450be83370d0486e7cdcebf7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "62ce2e8c5f0cb8acac7a47921bf6e9ae7974c7a1", "commitAfterChange": "3c755125fb6d43834cd7c6dfb58024a6d397b566", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "  public void test060() throws JavaModelException", "signatureAfterChange": "  public void test060() throws JavaModelException", "diff": ["-\t\t\"method[METHOD_REF]{method(String, boolean, Object), Ljavadoc.methods.tags.BasicTestMethods;, (Ljava.lang.String;ZLjava.lang.Object;)V, method, (str, flag, obj), \"+this.positions+R_DICUNR+\"}\\n\" + ", "-\t\t\"method[METHOD_REF]{method(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, method, null, \"+this.positions+R_DICUNR+\"}\"", "+\t\t\"method[METHOD_REF]{method(String, boolean, Object), Ljavadoc.methods.tags.BasicTestMethods;, (Ljava.lang.String;ZLjava.lang.Object;)V, method, (str, flag, obj), \"+this.positions+R_DICNRNS+\"}\\n\" + ", "+\t\t\"method[METHOD_REF]{method(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, method, null, \"+this.positions+R_DICNRNS+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3020f76f6757105769a96e8e0fa262d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": "  public void test131() throws JavaModelException", "signatureAfterChange": "  public void test131() throws JavaModelException", "diff": ["-\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(int, float, Class), Ljavadoc.methods.tags.BasicTestMethods;, (IFLjava.lang.Class;)V, BasicTestMethods, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, BasicTestMethods, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(int, float, Class), Ljavadoc.methods.tags.BasicTestMethods;, (IFLjava.lang.Class;)V, BasicTestMethods, (xxx, real, clazz), \"+this.positions+R_DRINR+\"}\\n\" + ", "+\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, BasicTestMethods, null, \"+this.positions+R_DRINR+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3185d3e944e50514385fe0859452d274", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/SourceIndexerRequestor.java", "commitBeforeChange": "0c486e9f722d5cf66150a2a8bb111fadf3c196f6", "commitAfterChange": "5e6cea593f4be5a13a34ce02970d8b34d029a673", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void enterClass(TypeInfo typeInfo)", "signatureAfterChange": " public void enterClass(TypeInfo typeInfo)", "diff": ["-\t\t\ttypeParameterSignatures[i] = Signature.createTypeParameterSignature(typeParameterInfo.name, typeParameterInfo.typeParameterBounds == null ? CharOperation.NO_CHAR_CHAR : typeParameterInfo.typeParameterBounds);", "+\t\t\ttypeParameterSignatures[i] = Signature.createTypeParameterSignature(typeParameterInfo.name, typeParameterInfo.bounds == null ? CharOperation.NO_CHAR_CHAR : typeParameterInfo.bounds);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31cfad9b4eafa66a6596889270bcc97b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "1cff9f79be5fd6fcc760af55214bca85f6dbdfe8", "commitAfterChange": "44e5c18196c499f093f9a9c5c2b69d6196e72c0a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tvoid checkAssignmentEffect(BlockScope scope)", "signatureAfterChange": "  \tvoid checkAssignmentEffect(BlockScope scope)", "diff": ["-\t\t\tthis.hasNoEffect = true;", "+\t\t\tthis.bits |= IsAssignmentWithNoEffectMASK; // record assignment has no effect"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31e7e4c804093aeec4ecced0d513b532", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "badff9a93fec2ed67e9ce195f8709b06674bcf81", "commitAfterChange": "30a989f2410943e7f57d79a197cf0ec585ffc59e", "methodNumberBeforeChange": 346, "methodNumberAfterChange": 346, "signatureBeforeChange": " protected TypeReference getTypeReferenceForGenericType(int dim, int identifierLength, int numberOfIdentifiers)", "signatureAfterChange": " protected TypeReference getTypeReferenceForGenericType(int dim, int identifierLength, int numberOfIdentifiers)", "diff": ["-\t\t\tparameterizedSingleTypeReference.sourceEnd = this.endPosition;", "+\t\t\tparameterizedSingleTypeReference.sourceEnd = this.endStatementPosition;", "-\t\t\tparameterizedQualifiedTypeReference.sourceEnd = this.endPosition;", "+\t\t\tparameterizedQualifiedTypeReference.sourceEnd = this.endStatementPosition;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32499b7f8396bee5058deeb0b817953e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39efbf0f3eb32e59d7a65e03590993d59dc6817b", "commitAfterChange": "84bab690fce0d07b753bfc05c56b8e56d168a1a6", "methodNumberBeforeChange": 144, "methodNumberAfterChange": 144, "signatureBeforeChange": " \tprotected void setModifiers(TypeDeclaration typeDecl, org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration)", "signatureAfterChange": " \tprotected void setModifiers(TypeDeclaration typeDecl, org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration)", "diff": ["-\t\t\tcase AST.JLS2 :", "+\t\t\tcase AST.JLS2_INTERNAL :", "-\t\t\t\ttypeDecl.setModifiers(modifiers);", "+\t\t\t\ttypeDecl.internalSetModifiers(modifiers);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "327e7ba2dc48696fdac8f811d721546d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39efbf0f3eb32e59d7a65e03590993d59dc6817b", "commitAfterChange": "84bab690fce0d07b753bfc05c56b8e56d168a1a6", "methodNumberBeforeChange": 146, "methodNumberAfterChange": 146, "signatureBeforeChange": " \tprotected void setModifiers(VariableDeclarationStatement variableDeclarationStatement, LocalDeclaration localDeclaration)", "signatureAfterChange": " \tprotected void setModifiers(VariableDeclarationStatement variableDeclarationStatement, LocalDeclaration localDeclaration)", "diff": ["-\t\t\tcase AST.JLS2 :", "+\t\t\tcase AST.JLS2_INTERNAL :", "-\t\t\t\tvariableDeclarationStatement.setModifiers(modifiers);", "+\t\t\t\tvariableDeclarationStatement.internalSetModifiers(modifiers);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32ade4a926b7b1d681f89687a3cfb752", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "418f1d61f23f33e0e639dfcb37d7371b9ddc656a", "commitAfterChange": "9fedbc20e6a58ab4ca985b6cd53ab67968737404", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": " \tprivate int retrieveRightBracketPosition(int start, int end)", "signatureAfterChange": " \tprivate int retrieveRightBracketPosition(int start, int end)", "diff": ["-\t\t\twhile ((token = scanner.getNextToken()) != Scanner.TokenNameEOF) {", "+\t\t\twhile ((token = scanner.getNextToken()) != ITerminalSymbols.TokenNameEOF) {", "-\t\t\t\t\tcase Scanner.TokenNameRBRACKET:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameRBRACKET:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32dbddb987197fe8856a2f0f2edbee78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetParser.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected void consumeClassHeaderName1()", "signatureAfterChange": " protected void consumeClassHeaderName1()", "diff": ["-\t\t\ttypeDecl.bits |= ASTNode.IsMemberTypeMASK;", "+\t\t\ttypeDecl.bits |= ASTNode.IsMemberType;", "-\t\ttypeDecl.bits |= ASTNode.IsLocalTypeMASK;", "+\t\ttypeDecl.bits |= ASTNode.IsLocalType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3367a4619399abbc7e54ddfe0416b2c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "bd9b00bcf9923b9da6ff38651a157fa6bc3f2dc8", "commitAfterChange": "ff2b96761b3897e8f6c8feeb8c31198c182dd190", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\tif ((tryInfo.tagBits & FlowInfo.UNREACHABLE) != 0)", "+\t\t\tif ((tryInfo.tagBits & FlowInfo.UNREACHABLE_OR_DEAD) != 0)", "-\t\t\tif ((tryInfo.tagBits & FlowInfo.UNREACHABLE) != 0)", "+\t\t\tif ((tryInfo.tagBits & FlowInfo.UNREACHABLE_OR_DEAD) != 0)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3389f78e66d234c336337f38718d2aa0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationExpression.java", "commitBeforeChange": "f03e24a20423490ce43dd47d116e6771e9f8b29a", "commitAfterChange": "0425932939e44005b87b30f06674df053a397223", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tASTNode clone(AST target)", "signatureAfterChange": " \tASTNode clone(AST target)", "diff": ["-\t\tif (this.ast.API_LEVEL == AST.LEVEL_2_0) {", "+\t\tif (this.ast.apiLevel == AST.LEVEL_2_0) {", "-\t\tif (this.ast.API_LEVEL >= AST.LEVEL_3_0) {", "+\t\tif (this.ast.apiLevel >= AST.LEVEL_3_0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33a14b075ce3231c8b7b366af3e4fbe5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "740d8a3bbf7d827a9782a8704551b5892c828d42", "commitAfterChange": "37fa53fe1bcd1db81d377f564f101511c07818f5", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public final boolean canBeSeenBy(TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "signatureAfterChange": " public final boolean canBeSeenBy(TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "diff": ["-\t\t\tif (currentType.findSuperTypeErasingTo(declaringErasure) != null) {", "+\t\t\tif (currentType.findSuperTypeWithSameErasure(declaringErasure) != null) {", "-\t\t\t\tif (currentType == receiverErasure || ((ReferenceBinding)receiverErasure).findSuperTypeErasingTo(currentType) != null){", "+\t\t\t\tif (currentType == receiverErasure || ((ReferenceBinding)receiverErasure).findSuperTypeWithSameErasure(currentType) != null){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3470e6089ded001ac9366d62e3e45e68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "fe905e29a608f61f2afe181f4c1e4e27bb2b95dc", "commitAfterChange": "53a7cfa9bf2a3a1ade921d716dbdc58a4bfc35d4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static IStatus validateCompilationUnitName(String name)", "signatureAfterChange": " \tpublic static IStatus validateCompilationUnitName(String name)", "diff": ["-\t\tif (!org.eclipse.jdt.internal.compiler.util.Util.isJavaFileName(name)) {", "+\t\tif (!org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(name)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "348f0db04ca7e09e823aadc3735b0706", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "8b532c89fe75cdcd516dedb1f57b44f4fab79fb0", "commitAfterChange": "14eef462fbaf0bab3c247296c2a42a1fdc4f58a6", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " \tpublic boolean visit(UnaryExpression unaryExpression, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(UnaryExpression unaryExpression, BlockScope scope)", "diff": ["-\t\tswitch((unaryExpression.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) {", "+\t\tswitch((unaryExpression.bits & AstNode.OperatorMASK) >> AstNode.OperatorSHIFT) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34c41e92c37edcac6ead6856a473b0b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "7b95d4ed246f480797d7b1d267214351b110163a", "commitAfterChange": "b158e029ba7c3181b67cc20c9651eac7218bfbe8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": " public static Test suite()", "diff": ["+ */", "-\treturn buildMinimalComplianceTestSuite(testClass(), F_1_5);", "+\treturn buildUniqueComplianceTestSuite(testClass(), COMPLIANCE_1_5);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "353c1fbc17e9a101ed25dfb650f01282", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowInfo.java", "commitBeforeChange": "afec7d4a120ad9d3de76bf79cb0366f8fe30669d", "commitAfterChange": "57c6d386f529d0e8572acc77526ab668fb7c3818", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tabstract public UnconditionalFlowInfo addPotentialInitializationsFrom(UnconditionalFlowInfo otherInits);", "signatureAfterChange": "  \tabstract public FlowInfo addPotentialInitializationsFrom(FlowInfo otherInits);", "diff": ["-\tabstract public UnconditionalFlowInfo addPotentialInitializationsFrom(UnconditionalFlowInfo otherInits);", "+\tabstract public FlowInfo addPotentialInitializationsFrom(FlowInfo otherInits);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "354ff754420e789845713bd9ebee4a87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "7f0c1689dc377b26f3ac2b4c2b21446a43dd3383", "commitAfterChange": "f7a77c5e8210599982f60934db59bb901b30cb8c", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tprivate CompilationUnit[] createASTsFrom(ICompilationParticipantResult[] cpResults)", "signatureAfterChange": " \t \tprivate CompilationUnit[] createASTsFrom(BuildContext[] cpResults)", "diff": ["-\tprivate CompilationUnit[] createASTsFrom(ICompilationParticipantResult[] cpResults){", "+\tprivate CompilationUnit[] createASTsFrom(BuildContext[] cpResults){", "-\t\tfor( ICompilationParticipantResult cpResult : cpResults )", "+\t\tfor( BuildContext cpResult : cpResults )"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "356c14846482ea29f2ce5247b41cbad2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java", "commitBeforeChange": "98d0749123d10e91b3924cae016a7083355abf01", "commitAfterChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public FieldBinding findFieldForCodeSnippet(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite)", "signatureAfterChange": "  public FieldBinding findFieldForCodeSnippet(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite)", "diff": ["-\t\torg.eclipse.jdt.internal.core.util.SimpleSet interfacesSeen = new org.eclipse.jdt.internal.core.util.SimpleSet(lastPosition * 2);", "+\t\torg.eclipse.jdt.internal.compiler.util.SimpleSet interfacesSeen = new org.eclipse.jdt.internal.compiler.util.SimpleSet(lastPosition * 2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3609231e6fbbc6208876dff192d58b85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/ClasspathTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void testMissingLibrary1() throws JavaModelException", "signatureAfterChange": "  \tpublic void testMissingLibrary1() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "364f5233db970197ff48dc8ae849b0c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "6fdaa2b9d78c89a1ed2269f5279c3e02cee4b6cd", "commitAfterChange": "8ec1d344fc5f9b16a04a2a15e36cb4db52cac4eb", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void setUnitsToLookInside(ICompilationUnit[] unitsToLookInside)", "signatureAfterChange": " public void setUnitsToLookInside(ICompilationUnit[] unitsToLookInside)", "diff": ["-\t\tthis.unitsToLookInside.setCurrent(null); ", "+\t\tthis.unitsToLookInside.set(null); ", "-\t\tthis.unitsToLookInside.setCurrent(workingCopies);", "+\t\tthis.unitsToLookInside.set(workingCopies);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3656c39b38c43593a7695b3e48ad6cc7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "60e84a84d2c785be17a379ead199176b00163ca2", "commitAfterChange": "dd81d5614e9912f7c701e3f5c6100178a60401f0", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": " public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope)", "diff": ["-\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type", "+\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\t\t&& ((currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4 ", "+\t\t\t&& ((currentScope.environment().options.targetJDK >= CompilerOptions.JDK1_2 "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36d7c9b3bc372135470e7c27ff9ff967", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "60adc6e9bd2a19d1f00a26879d59da4db15980bb", "commitAfterChange": "2fa8bdc58397f8ba42986ed8442348506f4b1424", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public void setMaskedCatchBlockSeverity(int flag)", "signatureAfterChange": "\r public void setMaskedCatchBlockSeverity(int flag)", "diff": ["-\t\tcase ERROR : \r", "+\t\tcase Error : \r", "-\t\tcase WARNING : \r", "+\t\tcase Warning : \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "371a55e1ff3b559dfb49bba73616188f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic boolean visit( \t\tArrayTypeReference arrayTypeReference, \t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tArrayTypeReference arrayTypeReference, \t\tClassScope scope)", "diff": ["-\t\tfinal int numberOfParens = (arrayTypeReference.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (arrayTypeReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37b435d5985118101a9da11cd3a035d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationStatement.java", "commitBeforeChange": "f03e24a20423490ce43dd47d116e6771e9f8b29a", "commitAfterChange": "0425932939e44005b87b30f06674df053a397223", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tASTNode clone(AST target)", "signatureAfterChange": " \tASTNode clone(AST target)", "diff": ["-\t\tif (this.ast.API_LEVEL == AST.LEVEL_2_0) {", "+\t\tif (this.ast.apiLevel == AST.LEVEL_2_0) {", "-\t\tif (this.ast.API_LEVEL >= AST.LEVEL_3_0) {", "+\t\tif (this.ast.apiLevel >= AST.LEVEL_3_0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "384f86c43a6927dcdbc1caa234b872c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " protected void reportDeclaration(AstNode reference, IJavaElement element, MatchLocator locator, SimpleSet knownTypes) throws CoreException", "signatureAfterChange": " protected void reportDeclaration(ASTNode reference, IJavaElement element, MatchLocator locator, SimpleSet knownTypes) throws CoreException", "diff": ["-protected void reportDeclaration(AstNode reference, IJavaElement element, MatchLocator locator, SimpleSet knownTypes) throws CoreException {", "+protected void reportDeclaration(ASTNode reference, IJavaElement element, MatchLocator locator, SimpleSet knownTypes) throws CoreException {", "-\t\tswitch (qNameRef.bits & AstNode.RestrictiveFlagMASK) {", "+\t\tswitch (qNameRef.bits & ASTNode.RestrictiveFlagMASK) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "387cd409decc4b974090adcf9016019c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/jdom/SimpleDOMBuilder.java", "commitBeforeChange": "6667f48fb414bf631c6788d57b69b16addac46f0", "commitAfterChange": "c62484c76d34e1754fa4fc8cfcdf45889f18f642", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " protected void enterType(int declarationStart, int modifiers, char[] name,  \tint nameStart, int nameEnd, char[] superclass, char[][] superinterfaces, boolean isClass)", "signatureAfterChange": " protected void enterType(int declarationStart, int modifiers, char[] name,  \tint nameStart, int nameEnd, char[] superclass, char[][] superinterfaces, boolean isClass)", "diff": ["-\t\t\tmodifiers, CharArrayOps.charcharToString(superinterfaces), isClass);", "+\t\t\tmodifiers, CharOperation.charArrayToStringArray(superinterfaces), isClass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "388794eb1fbddb50687c41ff653e0b7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CategorizedProblem.java", "commitBeforeChange": "483f0c94ed49be94b6d4e2e084dd5fe4f47669bc", "commitAfterChange": "036ba18d861d169a393293695dfa5ce3a6379661", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public String[] getExtraMarkerAttributeNames()", "signatureAfterChange": " public String[] getExtraMarkerAttributeNames()", "diff": ["-\treturn DefaultProblem.EMPTY_NAMES;", "+\treturn CharOperation.NO_STRINGS;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38a096afc4c85df2616cb9450f0ca87c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java", "commitBeforeChange": "a48e75f04164175f754e5a12c66f6007a59c2844", "commitAfterChange": "7c117e96e6dd4f4dd7cd3b7899edae5055896b1d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public char[] getImport(int lineNumber)", "signatureAfterChange": " public char[] getImport(int lineNumber)", "diff": ["-\tint importStartLine = this.lineNumberOffset - 1 - this.imports.length;", "-\treturn this.imports[lineNumber - importStartLine];", "+\tint importStartLine = this.lineNumberOffset - 1 - this.snippetImports.length;", "+\treturn this.snippetImports[lineNumber - importStartLine];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38deb90217c8f949cb4bbea9644f68f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "7f0c1689dc377b26f3ac2b4c2b21446a43dd3383", "commitAfterChange": "f7a77c5e8210599982f60934db59bb901b30cb8c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprivate Set<AnnotationProcessorFactory> build(final ProcessorEnvImpl processorEnv)", "signatureAfterChange": " \tprivate Set<AnnotationProcessorFactory> build(final ProcessorEnvImpl processorEnv)", "diff": ["-\t\t\tfinal ICompilationParticipantResult[] results = processorEnv.getFilesWithAnnotation();", "+\t\t\tfinal BuildContext[] results = processorEnv.getFilesWithAnnotation();", "-\t\t\tfor( ICompilationParticipantResult result : results ){", "+\t\t\tfor( BuildContext result : results ){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39290e1b1a537e582c20ec2a6859fb56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic boolean visit( \t\tArrayQualifiedTypeReference arrayQualifiedTypeReference, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tArrayQualifiedTypeReference arrayQualifiedTypeReference, \t\tBlockScope scope)", "diff": ["-\t\t\tfinal int numberOfParens = (arrayQualifiedTypeReference.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\t\tfinal int numberOfParens = (arrayQualifiedTypeReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "393a21bb727ca5587d606d5ffa8b1674", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "418f1d61f23f33e0e639dfcb37d7371b9ddc656a", "commitAfterChange": "9fedbc20e6a58ab4ca985b6cd53ab67968737404", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": " \tprivate int retrieveStartingCatchPosition(int start, int end)", "signatureAfterChange": " \tprivate int retrieveStartingCatchPosition(int start, int end)", "diff": ["-\t\t\twhile ((token = scanner.getNextToken()) != Scanner.TokenNameEOF) {", "+\t\t\twhile ((token = scanner.getNextToken()) != ITerminalSymbols.TokenNameEOF) {", "-\t\t\t\t\tcase Scanner.TokenNamecatch://225", "+\t\t\t\t\tcase ITerminalSymbols.TokenNamecatch://225"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3944d1e7e4f336bb77b8cb311309e171", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapExecutor.java", "commitBeforeChange": "2073ae07201f3b4750a106d0cadf90473710a63d", "commitAfterChange": "10545bbf89db4e21cbdfaf0260ea872d78aa91e9", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tprivate void checkTopPriorityWraps(int wrapIndex) throws WrapRestartException", "signatureAfterChange": "  \tprivate void checkTopPriorityWraps(int wrapIndex) throws WrapRestartThrowable", "diff": ["-\tprivate void checkTopPriorityWraps(int wrapIndex) throws WrapRestartException {", "+\tprivate void checkTopPriorityWraps(int wrapIndex) throws WrapRestartThrowable {", "-\t\t\tthrow new WrapRestartException(wrapIndex);", "+\t\t\tthrow new WrapRestartThrowable(wrapIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a3266b27d0d32eadb0ea32695d7cd88", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "62ce2e8c5f0cb8acac7a47921bf6e9ae7974c7a1", "commitAfterChange": "3c755125fb6d43834cd7c6dfb58024a6d397b566", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "  public void test061() throws JavaModelException", "signatureAfterChange": "  public void test061() throws JavaModelException", "diff": ["-\t\t\"method[METHOD_REF]{method(String, boolean, Object), Ljavadoc.methods.tags.BasicTestMethods;, (Ljava.lang.String;ZLjava.lang.Object;)V, method, (str, flag, obj), [116, 145], \"+R_DICUNR+\"}\\n\" + ", "-\t\t\"method[METHOD_REF]{method(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, method, null, [116, 145], \"+R_DICUNR+\"}\"", "+\t\t\"method[METHOD_REF]{method(String, boolean, Object), Ljavadoc.methods.tags.BasicTestMethods;, (Ljava.lang.String;ZLjava.lang.Object;)V, method, (str, flag, obj), [116, 145], \"+R_DICNRNS+\"}\\n\" + ", "+\t\t\"method[METHOD_REF]{method(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, method, null, [116, 145], \"+R_DICNRNS+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ac310a619be61e0ecfeb43ca027fc8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "e91a03d6ffd76cb11afae070200dbbbe73ce30b0", "commitAfterChange": "1ea5f94648ece67f779d3f9547f2c42cabdfedc2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t\treturn FlowInfo.DeadEnd;", "+\t\t\t\treturn FlowInfo.DEAD_END;", "-\treturn FlowInfo.DeadEnd;", "+\treturn FlowInfo.DEAD_END;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b1d6a444a401b2a58dd64e483459c1e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "7f0c1689dc377b26f3ac2b4c2b21446a43dd3383", "commitAfterChange": "f7a77c5e8210599982f60934db59bb901b30cb8c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprivate void runAPTInFileBasedMode(final ProcessorEnvImpl processorEnv, \t\t\t\t\t\t\t\t\t   final Map<IFile, Set<IFile>> lastGeneratedFiles)", "signatureAfterChange": " \t \tprivate void runAPTInFileBasedMode(final ProcessorEnvImpl processorEnv, \t\t\t\t\t\t\t\t\t   final Map<IFile, Set<IFile>> lastGeneratedFiles)", "diff": ["-\t\tfinal ICompilationParticipantResult[] cpResults = processorEnv.getFilesWithAnnotation();", "+\t\tfinal BuildContext[] cpResults = processorEnv.getFilesWithAnnotation();", "-\t\tfor (ICompilationParticipantResult curResult : cpResults ) {\t\t\t", "+\t\tfor (BuildContext curResult : cpResults ) {\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b3d6480e00daa3643e1f3718407c600", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor2.java", "commitBeforeChange": "cfebe74b0993aa8e5991953b9cbb508424b8c095", "commitAfterChange": "c16713f6dd450429a4303737780dffe1c893ae16", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tpublic boolean visit(AnnotationTypeDeclaration node)", "signatureAfterChange": "  \tpublic boolean visit(AnnotationTypeDeclaration node)", "diff": ["-\t\t// TODO (olivier) might want to add an option for annotation type", "-\t\tboolean indent_body_declarations_compare_to_header = this.preferences.indent_body_declarations_compare_to_type_header;", "+\t\tboolean indent_body_declarations_compare_to_header = this.preferences.indent_body_declarations_compare_to_annotation_declaration_header;", "-\t\t// TODO (olivier) might want an option for annotation type", "-\t\tif (this.preferences.insert_new_line_in_empty_type_declaration) {", "+\t\tif (this.preferences.insert_new_line_in_empty_annotation_declaration) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b4ef315e8b7221b82822dc9ecad81e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "60adc6e9bd2a19d1f00a26879d59da4db15980bb", "commitAfterChange": "2fa8bdc58397f8ba42986ed8442348506f4b1424", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public void setAccessEmulationSeverity(int flag)", "signatureAfterChange": "\r public void setAccessEmulationSeverity(int flag)", "diff": ["-\t\tcase ERROR : \r", "+\t\tcase Error : \r", "-\t\tcase WARNING : \r", "+\t\tcase Warning : \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b8ff6f68ad9d2204a4563fe6fdb2574", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "60e84a84d2c785be17a379ead199176b00163ca2", "commitAfterChange": "dd81d5614e9912f7c701e3f5c6100178a60401f0", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": " \tpublic void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope)", "diff": ["-\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type", "+\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\t\t&& ((currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4", "+\t\t\t&& ((currentScope.environment().options.targetJDK >= CompilerOptions.JDK1_2"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c10f447dc09f4bef8937021273585df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "522e84acc5c220c07378cd67640c99884ac9cc9d", "commitAfterChange": "e5f48a4d4e39a733649e1d7678dd3cc38b1f57e5", "methodNumberBeforeChange": 564, "methodNumberAfterChange": 564, "signatureBeforeChange": "  \tpublic void testConstructorInvocation()", "signatureAfterChange": "  \tpublic void testConstructorInvocation()", "diff": ["-\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\tif (ast.apiLevel() >= AST.JLS3) {", "-\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\tif (ast.apiLevel() >= AST.JLS3) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c15286e24af9292ad7a183ceafba814", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "82eb8210126dce9dcecaa23100608377607eb4d3", "commitAfterChange": "39a2af446e48bb6f168906e833c304457e17e4cf", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void testParameterizedArrayTypeMultipleArguments02() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedArrayTypeMultipleArguments02() throws CoreException", "diff": ["-\t\tSourceType type = selectSourceType(unit,  \"Table<String, Exception>.Entry<String, Exception>\"); //$NON-NLS-1$", "+\t\tIType type = selectType(unit,  \"Table<String, Exception>.Entry<String, Exception>\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d05b531905c3955dde252582649c7d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "60e84a84d2c785be17a379ead199176b00163ca2", "commitAfterChange": "dd81d5614e9912f7c701e3f5c6100178a60401f0", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": " public void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope)", "diff": ["-\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type", "+\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\t\t&& ((currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4 ", "+\t\t\t&& ((currentScope.environment().options.targetJDK >= CompilerOptions.JDK1_2 "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dfc99867340d685a7d5dd60c647367e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "e556f9da5ae6c442ae4aa18b3f85e0ca7f743a2a", "commitAfterChange": "395344ae2ca7fe7319b203ab5ef051651606e818", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t\t\t\t\t.addPotentialInitializationsFrom(", "-\t\t\t\t\t\t\t\ttryInfo.nullInfoLessUnconditionalCopy())", "-\t\t\t\t\t\t\t\t// remove null info to protect point of", "-\t\t\t\t\t\t\t\t// exception null info", "+\t\t\t\t\t\t\t.addPotentialInitializationsFrom(tryInfo.unconditionalCopy())", "-\t\t\t\t\t\t\t\t\t.addPotentialInitializationsFrom(", "-\t\t\t\t\t\t\t\ttryInfo.nullInfoLessUnconditionalCopy())", "-\t\t\t\t\t\t\t\t// remove null info to protect point of", "-\t\t\t\t\t\t\t\t// exception null info", "+\t\t\t\t\t\t\t\t\t.addPotentialInitializationsFrom(tryInfo.unconditionalCopy())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f1661fde338924744312d9c6d4ebc2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "4c63cc3384193b40f8ecd10e816b8df4cb59320a", "commitAfterChange": "0307cad3f1b01ed5d7ce67bc78cd9b706e4819f3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tvoid printModifiers(List ext)", "signatureAfterChange": " \tvoid printModifiers(List ext)", "diff": ["-\t\t\tExtendedModifier p = (ExtendedModifier) it.next();", "+\t\t\tASTNode p = (ASTNode) it.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f1fef1903af88b717fdd4d9c2c16d4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiSourceFolderAndOutputFolderTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t\t \tpublic void test0004() throws JavaModelException", "signatureAfterChange": " \t\t \tpublic void test0004() throws JavaModelException", "diff": ["-\t\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f3aae90f27d78460d0ca8e7e8d0d42c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java", "commitBeforeChange": "522e84acc5c220c07378cd67640c99884ac9cc9d", "commitAfterChange": "e5f48a4d4e39a733649e1d7678dd3cc38b1f57e5", "methodNumberBeforeChange": 256, "methodNumberAfterChange": 256, "signatureBeforeChange": " \tpublic void testVariableDeclarationStatement()", "signatureAfterChange": " \tpublic void testVariableDeclarationStatement()", "diff": ["-\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\tif (ast.apiLevel() >= AST.JLS3) {", "-\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\tif (ast.apiLevel() == AST.JLS2) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "405a44c1b313f8b4c5c8a3019bca67ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic boolean visit(IntLiteral intLiteral, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(IntLiteral intLiteral, BlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (intLiteral.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (intLiteral.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4135afd3defc1d20b3b632e7bc9af7d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFlattener.java", "commitBeforeChange": "810d2a46e73e304780d3a58f117d6c63103b4e72", "commitAfterChange": "43bf242c384a6b4ad5daf26c5b4617ec68564235", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic boolean visit(ArrayCreation node)", "signatureAfterChange": " \tpublic boolean visit(ArrayCreation node)", "diff": ["-\t\t\tinternalVisitExtraDimensionAnnotations(arrayType, i, astLevelGTE8);", "+\t\t\tinternalVisitDimensionAnnotations(arrayType, i, astLevelGTE8);", "-\t\t\tinternalVisitExtraDimensionAnnotations(arrayType, i, astLevelGTE8);", "+\t\t\tinternalVisitDimensionAnnotations(arrayType, i, astLevelGTE8);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41b88573868a3f56897a6e66860d1b29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java", "commitBeforeChange": "84bab690fce0d07b753bfc05c56b8e56d168a1a6", "commitAfterChange": "72404957161b9a06b0beff261255d6fcbe542913", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tASTNode clone0(AST target)", "signatureAfterChange": " \tASTNode clone0(AST target)", "diff": ["-\t\tif (this.ast.apiLevel == AST.JLS2) {", "-\t\t\tresult.setModifiers(getModifiers());", "+\t\tif (this.ast.apiLevel == AST.JLS2_INTERNAL) {", "+\t\t\tresult.internalSetModifiers(getModifiers());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41efd50dd911300a9aa5fb016b829f75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "79620cc5a2ab93e8afb2f50dfb60d3aac3ac52a1", "commitAfterChange": "bb83bb6bb9594ac07e759b1e208acbe513439625", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void checkTaskTag(int commentStart, int commentEnd) throws InvalidInputException", "signatureAfterChange": " public void checkTaskTag(int commentStart, int commentEnd) throws InvalidInputException", "diff": ["-\t\twhile (ScannerHelper.isWhitespace(src[end]) && msgStart <= end)", "+\t\twhile (CharOperation.isWhitespace(src[end]) && msgStart <= end)", "-\t\twhile (ScannerHelper.isWhitespace(src[msgStart]) && msgStart <= end)", "+\t\twhile (CharOperation.isWhitespace(src[msgStart]) && msgStart <= end)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41fd0b9eb210f2e3152fa09e003b0f18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "9f0dbd12be2b0343b01b9196da38099302e8dc06", "commitAfterChange": "b184f2349eaec2fcfb27dfe305b657dc3486d80d", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " public IJavaElement getSharedWorkingCopy(IProgressMonitor pm, IBufferFactory factory, IProblemRequestor problemRequestor) throws JavaModelException", "signatureAfterChange": " public IJavaElement getSharedWorkingCopy(IProgressMonitor pm, IBufferFactory factory, IProblemRequestor problemRequestor) throws JavaModelException", "diff": ["-\t\tCreateSharedWorkingCopyOperation op = new CreateSharedWorkingCopyOperation(this, perFactoryWorkingCopies, factory, problemRequestor);", "+\t\tCreateWorkingCopyOperation op = new CreateWorkingCopyOperation(this, perFactoryWorkingCopies, factory, problemRequestor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4200b6574730c705f642f522a3af44b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "ddb739634f2059bc14c63ee2cf285cdd10a0b109", "commitAfterChange": "91f3c8870f13ed83ebd6280cbfe1b3f0285abeea", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r private static SearchPattern createFieldPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "signatureAfterChange": "\r private static SearchPattern createFieldPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "diff": ["-\t\tcase IJavaSearchConstants.READ_REFERENCES :\r", "+\t\tcase IJavaSearchConstants.READ_ACCESSES :\r", "-\t\tcase IJavaSearchConstants.WRITE_REFERENCES :\r", "+\t\tcase IJavaSearchConstants.WRITE_ACCESSES :\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "420c2c711fc1df2be75d039ec993fce2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CascadingMethodInvocationFragmentBuilder.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic boolean visit(MessageSend messageSend, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(MessageSend messageSend, BlockScope scope)", "diff": ["-\t\tif ((messageSend.receiver.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT == 0) {", "+\t\tif ((messageSend.receiver.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT == 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42d07aef69daa10ab18ffc48d73564ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "08e53f04ea3f08ae64f9c886944b4a8be7e4b3d7", "commitAfterChange": "d2ac97129da79ea53e4e3d6f928f1d633472cd5b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void testCompletionFindField1() throws JavaModelException", "signatureAfterChange": " public void testCompletionFindField1() throws JavaModelException", "diff": ["-\t\t\"element:var    completion:this.var    relevance:\"+(R_DEFAULT + R_CASE + R_EXPECTED_TYPE)+\"\\n\"+", "-\t\t\"element:var    completion:var    relevance:\"+(R_DEFAULT + R_CASE + R_EXPECTED_TYPE),", "+\t\t\"element:var    completion:this.var    relevance:\"+(R_DEFAULT + R_CASE + R_EXACT_EXPECTED_TYPE)+\"\\n\"+", "+\t\t\"element:var    completion:var    relevance:\"+(R_DEFAULT + R_CASE + R_EXACT_EXPECTED_TYPE),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43c31b57ff3559882536dfd98dabe386", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/DefaultProblemFactory.java", "commitBeforeChange": "b136d601b8b65cbe6a937874c4ada8fd9c6f056d", "commitAfterChange": "4c6ae9dae1fc96f9fd302751a25b14b4f972fb0f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final String getLocalizedMessage(int id, String[] problemArguments)", "signatureAfterChange": " public final String getLocalizedMessage(int id, String[] problemArguments)", "diff": ["-\tif ((id & IProblem.Annotation) != 0) {", "-\t\toutput.append(messageTemplates[IProblem.AnnotationMessagePrefix & IProblem.IgnoreCategoriesMask]);", "+\tif ((id & IProblem.Javadoc) != 0) {", "+\t\toutput.append(messageTemplates[IProblem.JavadocMessagePrefix & IProblem.IgnoreCategoriesMask]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43ec7948e7c80ce5617be8010b8ac1c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "6c8b6c70bde19844df9a948acbc4f151c3d9aa74", "commitAfterChange": "da5be92848053087506e3795d2b7a39a9d351430", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void checkComment()", "signatureAfterChange": " public void checkComment()", "diff": ["-\t\tTypeReference[] thrownExceptions = this.javadoc.exceptionReferences;", "+\t\tTypeReference[] thrownExceptions = this.javadoc.thrownExceptions;", "-\t\tExpression[] references = this.javadoc.seeReferences;", "+\t\tExpression[] references = this.javadoc.references;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "446136d72a5fc5c5adeddc38a5065cca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void generateOptimizedLessThanOrEqual( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedLessThanOrEqual( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tBranchLabel trueLabel, \t\tBranchLabel falseLabel, \t\tboolean valueRequired)", "diff": ["-\t\tLabel trueLabel,", "-\t\tLabel falseLabel,", "+\t\tBranchLabel trueLabel,", "+\t\tBranchLabel falseLabel,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44afb2578cb6eea381f3d0b3fce396a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "7bf8b664251457ee19a0ca0f4e524593e5cebbd2", "commitAfterChange": "c844b42e53f5e6c13f3c402081599074b3dd58c2", "methodNumberBeforeChange": 408, "methodNumberAfterChange": 417, "signatureBeforeChange": " public void testBug160324c() throws CoreException", "signatureAfterChange": " public void testBug160324c() throws CoreException", "diff": ["-\t\tgetJavaSearchScopeBugs(),", "+\t\tgetJavaSearchScope(),", "-\t\tgetJavaSearchScopeBugs(),", "+\t\tgetJavaSearchScope(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44ff1d708269b80b51a95936ec0143a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/Index.java", "commitBeforeChange": "70b32514588b091b133b82607c10c8c78d5b8fe3", "commitAfterChange": "aaa63e79319475935e2167f567ed10fa3d10e895", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void add(IDocument document, IIndexer indexer) throws IOException", "signatureAfterChange": " \tpublic void add(SearchDocument document, IIndexer indexer) throws IOException", "diff": ["-\tpublic void add(IDocument document, IIndexer indexer) throws IOException {", "+\tpublic void add(SearchDocument document, IIndexer indexer) throws IOException {", "-\t\tIndexedFile indexedFile= addsIndex.getIndexedFile(document.getName());", "+\t\tIndexedFile indexedFile= addsIndex.getIndexedFile(document.getPath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45a1156886ba04db992ce83163efdf18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/jdom/DOMPackage.java", "commitBeforeChange": "ab36391231f1ea61e75e0e00b3dc8ffe91eda55e", "commitAfterChange": "6c476fc2e300888d931411f675ed8c5c5f714198", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r protected void appendFragmentedContents(CharArrayBuffer buffer)", "signatureAfterChange": "\r protected void appendFragmentedContents(CharArrayBuffer buffer)", "diff": ["-\t\t\t.append(JavaModelManager.LINE_SEPARATOR)\r", "-\t\t\t.append(JavaModelManager.LINE_SEPARATOR);\r", "+\t\t\t.append(Util.LINE_SEPARATOR)\r", "+\t\t\t.append(Util.LINE_SEPARATOR);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45b86cddb0eaac6fb6e34986e627a04a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void testBug45596b()", "signatureAfterChange": " \tpublic void testBug45596b()", "diff": ["-\t\treportMissingJavadoc = CompilerOptions.DISABLED;", "+\t\treportMissingJavadocComments = CompilerOptions.IGNORE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45e71058fd61fe4104119e202191a826", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 41, "signatureBeforeChange": "\r public int literalIndexForJavaLangNoClassDefFoundErrorStringConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangNoClassDefFoundErrorStringConstructor()", "diff": ["-\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4614ad6b6b1ef338bbd78b2b7d38c0e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/jdom/SimpleDOMBuilder.java", "commitBeforeChange": "6667f48fb414bf631c6788d57b69b16addac46f0", "commitAfterChange": "c62484c76d34e1754fa4fc8cfcdf45889f18f642", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void enterField(int declarationStart, int modifiers, char[] type, char[] name, int nameStart, int nameEnd)", "signatureAfterChange": " public void enterField(int declarationStart, int modifiers, char[] type, char[] name, int nameStart, int nameEnd)", "diff": ["-\tfNode = new DOMField(fDocument, sourceRange, CharArrayOps.charToString(name), nameRange, ", "-\t\tmodifiers, CharArrayOps.charToString(type), isSecondary);", "+\tfNode = new DOMField(fDocument, sourceRange, CharOperation.charToString(name), nameRange, ", "+\t\tmodifiers, CharOperation.charToString(type), isSecondary);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "463a2b42116d2a337e562810c20485ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "0f5d04adf9d2fa735fce5517c85c8317372cf6c0", "commitAfterChange": "6cefacaaf91a5190221cb83191ea60dad1636887", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " public static final boolean prefixEquals( \tchar[] prefix, \tchar[] name, \tboolean isCaseSensitive)", "signatureAfterChange": " public static final boolean prefixEquals( \tchar[] prefix, \tchar[] name, \tboolean isCaseSensitive)", "diff": ["-\t\tif (Character.toLowerCase(prefix[i])", "-\t\t\t!= Character.toLowerCase(name[i]))", "+\t\tif (ScannerHelper.toLowerCase(prefix[i])", "+\t\t\t!= ScannerHelper.toLowerCase(name[i]))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46442567e5f8375a91d62084f5f441ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/JDIStackFrame.java", "commitBeforeChange": "41ef4898bfd4399802c4b7fddb8b2e4f958ada78", "commitAfterChange": "28a0f94188bd26e1014d346f5919c1c6d87c7904", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected ThreadReference getDebuggedThread(DebugEvaluationTest test)", "signatureAfterChange": " protected ThreadReference getDebuggedThread(DebugEvaluationTest test)", "diff": ["-\t\t\tAssert.assertTrue(\"Target exception \" + e.getMessage(), false);", "+\t\t\tTestCase.assertTrue(\"Target exception \" + e.getMessage(), false);", "-\t\t\t\tAssert.assertTrue(\"Compilation error in user code\", false);", "+\t\t\t\tTestCase.assertTrue(\"Compilation error in user code\", false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "467411c3352e983db2f9a4c5f2167209", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AbstractSelectionTest.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected AstNode findMethod(TypeDeclaration type, int cursorLocation)", "signatureAfterChange": " protected ASTNode findMethod(TypeDeclaration type, int cursorLocation)", "diff": ["-protected AstNode findMethod(TypeDeclaration type, int cursorLocation) {", "+protected ASTNode findMethod(TypeDeclaration type, int cursorLocation) {", "-\t\t\tAstNode method = findMethod(memberType, cursorLocation);", "+\t\t\tASTNode method = findMethod(memberType, cursorLocation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46a8456a5755f5b6f668c56f5f3a7c52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "7bf8b664251457ee19a0ca0f4e524593e5cebbd2", "commitAfterChange": "c844b42e53f5e6c13f3c402081599074b3dd58c2", "methodNumberBeforeChange": 177, "methodNumberAfterChange": 177, "signatureBeforeChange": " public void testBug95794() throws CoreException", "signatureAfterChange": " public void testBug95794() throws CoreException", "diff": ["-\tsearch(type, ALL_OCCURRENCES, getJavaSearchScopeBugs(), occurencesCollector);", "+\tsearch(type, ALL_OCCURRENCES, getJavaSearchScope(), occurencesCollector);", "-\tsearch(type, REFERENCES, getJavaSearchScopeBugs(), referencesCollector);", "+\tsearch(type, REFERENCES, getJavaSearchScope(), referencesCollector);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4759e92048d02b47b436a15623bf1aa9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "f9968462ad3e78057baba9747e91f7b6e3ea59e1", "commitAfterChange": "1f65e2f1d1142c8be683dea8425f1840c9121137", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " void checkForNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " void checkForNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-\t\t\t\tif (substitute != null && !doesSubstituteMethodOverride(currentMethod, substitute) && detectNameClash(currentMethod, substitute))", "+\t\t\t\tif (substitute != null && !isSubstituteParameterSubsignature(currentMethod, substitute) && detectNameClash(currentMethod, substitute))", "-\t\t\t\t\tif (substitute != null && !doesSubstituteMethodOverride(currentMethod, substitute) && detectNameClash(currentMethod, substitute))", "+\t\t\t\t\tif (substitute != null && !isSubstituteParameterSubsignature(currentMethod, substitute) && detectNameClash(currentMethod, substitute))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47cf10a5c08c1d3a1e02ebcc17d0a1b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java", "commitBeforeChange": "e0c471a33f6a2dbfcbdc998c17f7bfabb120c31b", "commitAfterChange": "efe090f6261554948e74283c11a7aa9dc9b10357", "methodNumberBeforeChange": 221, "methodNumberAfterChange": 221, "signatureBeforeChange": " \tpublic void testMethodDeclaration()", "signatureAfterChange": " \tpublic void testMethodDeclaration()", "diff": ["-\t\t\tx1.thrownExceptions().add(this.T3);", "-\t\t\tx1.thrownExceptions().add(this.T4);\t\t\t", "+\t\t\tx1.thrownExceptionTypes().add(this.T3);", "+\t\t\tx1.thrownExceptionTypes().add(this.T4);\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47e1584319f0bbc5fe36e6b9b3bd3472", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprotected void handleInternalException( \t\tAbortCompilation abortException, \t\tCompilationUnitDeclaration unit)", "signatureAfterChange": " \tprotected void handleInternalException( \t\tAbortCompilation abortException, \t\tCompilationUnitDeclaration unit)", "diff": ["-\t\t\t\t\tIProblem distantProblem = abortException.problem;", "-\t\t\t\t\tIProblem[] knownProblems = result.problems;", "+\t\t\t\tCategorizedProblem distantProblem = abortException.problem;", "+\t\t\t\tCategorizedProblem[] knownProblems = result.problems;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4831b9b593ac9443c2ccaa17f534e7c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "60e84a84d2c785be17a379ead199176b00163ca2", "commitAfterChange": "dd81d5614e9912f7c701e3f5c6100178a60401f0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope)", "diff": ["-\t// NOTE: from 1.4 on, method's declaring class is touched if any different from receiver type", "+\t// NOTE: from target 1.2 on, method's declaring class is touched if any different from receiver type", "-\t\t&& ((currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4", "+\t\t&& ((currentScope.environment().options.targetJDK >= CompilerOptions.JDK1_2"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "487b35c4b79bfc38fae8c385eac77589", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredType.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public TypeDeclaration updatedTypeDeclaration()", "signatureAfterChange": " public TypeDeclaration updatedTypeDeclaration()", "diff": ["-\t\ttypeDeclaration.bits |= ASTNode.IsMemberTypeMASK;", "+\t\ttypeDeclaration.bits |= ASTNode.IsMemberType;", "-\t\ttypeDeclaration.bits |= ASTNode.IsLocalTypeMASK;", "+\t\ttypeDeclaration.bits |= ASTNode.IsLocalType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4882a6b84f8a94c899cf4b362a7602e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "a08e8dc8e9230a115f0cfdb4f78a05f8533a21b8", "commitAfterChange": "7df061f9da0ab96be87e5851cb157a28c5f5bca0", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic boolean match(MethodDeclaration node, Object other)", "signatureAfterChange": " \tpublic boolean match(MethodDeclaration node, Object other)", "diff": ["-\t\t\t\t\t\t\t(safeSubtreeListMatch(node.getExtraDimensionInfos(), o.getExtraDimensionInfos())", "+\t\t\t\t\t\t\t(safeSubtreeListMatch(node.extraDimensionInfos(), o.extraDimensionInfos())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48c7da406c0af09480b94d922b398f9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t\t\tif ((this.bits & IsStrictlyAssignedMASK) == 0) {", "+\t\t\t\t\t\t\tif ((this.bits & IsStrictlyAssigned) == 0) {", "-\t\t\t\t\t\t\t(((this.bits & IsStrictlyAssignedMASK) == 0) ", "+\t\t\t\t\t\t\t(((this.bits & IsStrictlyAssigned) == 0) "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a71affd9e454fea0c1b1b1d2386997b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/JDIStackFrame.java", "commitBeforeChange": "40ec9af01314d5e3524995c03a17726a02c7901e", "commitAfterChange": "7c506de6f0d19a04dfded8c3a83a516e90afc5b6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected ThreadReference getDebuggedThread(DebugEvaluationTest test)", "signatureAfterChange": " protected ThreadReference getDebuggedThread(DebugEvaluationTest test)", "diff": ["-\t\t\tEvaluationTest.assertTrue(\"Target exception \" + e.getMessage(), false);", "+\t\t\tAssert.assertTrue(\"Target exception \" + e.getMessage(), false);", "-\t\t\t\tEvaluationTest.assertTrue(\"Compilation error in user code\", false);", "+\t\t\t\tAssert.assertTrue(\"Compilation error in user code\", false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a87916e8494bff5ca32c6fcda4a686c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java", "commitBeforeChange": "522e84acc5c220c07378cd67640c99884ac9cc9d", "commitAfterChange": "e5f48a4d4e39a733649e1d7678dd3cc38b1f57e5", "methodNumberBeforeChange": 200, "methodNumberAfterChange": 200, "signatureBeforeChange": " \tpublic void testConstructorInvocation()", "signatureAfterChange": " \tpublic void testConstructorInvocation()", "diff": ["-\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\tif (ast.apiLevel() >= AST.JLS3) {", "-\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\tif (ast.apiLevel() == AST.JLS2) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b24ad09e5373a27a2bd61763851203c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": " protected void consumeInterfaceDeclaration()", "signatureAfterChange": " protected void consumeInterfaceDeclaration()", "diff": ["-\t\ttypeDecl.bits |= AstNode.AddAssertionMASK;", "+\t\ttypeDecl.bits |= ASTNode.AddAssertionMASK;", "-\t\ttypeDecl.bits |= AstNode.UndocumentedEmptyBlockMASK;", "+\t\ttypeDecl.bits |= ASTNode.UndocumentedEmptyBlockMASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b2934587eb8dcd905ae37c5c1212a74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "  public void test059() throws JavaModelException", "signatureAfterChange": "  public void test059() throws JavaModelException", "diff": ["-\t\t\"method[METHOD_REF]{method(String, boolean, Object), Ljavadoc.methods.tags.BasicTestMethods;, (Ljava.lang.String;ZLjava.lang.Object;)V, method, (str, flag, obj), \"+this.positions+R_DICNRNS+\"}\\n\" + ", "-\t\t\"method[METHOD_REF]{method(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, method, null, \"+this.positions+R_DICNRNS+\"}\"", "+\t\t\"method[METHOD_REF]{method(String, boolean, Object), Ljavadoc.methods.tags.BasicTestMethods;, (Ljava.lang.String;ZLjava.lang.Object;)V, method, (str, flag, obj), \"+this.positions+R_DRICNRNS+\"}\\n\" + ", "+\t\t\"method[METHOD_REF]{method(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, method, null, \"+this.positions+R_DRICNRNS+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b2db8dbbe89070a4374c934e23a186c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsTests.java", "commitBeforeChange": "881da43b7e0b2ca5798e9c55f57054ccdaa23c6e", "commitAfterChange": "be760997ffe69084a7c4bd4d1ab81289e2452d86", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  String getOutputFolder()", "signatureAfterChange": "  IPath getOutputFolder()", "diff": ["-String getOutputFolder() {", "-\treturn \"default\";", "+IPath getOutputFolder() {", "+\treturn OUTPUT_FOLDER;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b87d26ef2393d1eb4e78844ecab3a89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public int literalIndexForJavaLangByteTYPE()", "signatureAfterChange": " public int literalIndexForJavaLangByteTYPE()", "diff": ["-\tif ((index = wellKnownFields[TYPE_BYTE_FIELD]) == 0) {", "+\tif ((index = wellKnownFields[JAVA_LANG_BYTE_TYPE_FIELD]) == 0) {", "-\t\tindex = wellKnownFields[TYPE_BYTE_FIELD] = currentIndex++;", "+\t\tindex = wellKnownFields[JAVA_LANG_BYTE_TYPE_FIELD] = currentIndex++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c0d3df297b38f08b31c6d04107833ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "4b36d8d902157ef078af37f3d78b4138152d8889", "commitAfterChange": "9ef1e97f6b56081e8537310fc409f77c2ce56944", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void close()", "signatureAfterChange": " \tpublic void close()", "diff": ["-\t\t\tif (fProjects != null) {", "-\t\t\t\tEnumeration projectNames = fProjects.keys();", "+\t\t\tif (projects != null) {", "+\t\t\t\tEnumeration projectNames = projects.keys();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c3eb6ec21503849b2040d28720db5b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "3e87eca7a8519c63afbfa4ffe7e9a68e0e861f3c", "commitAfterChange": "54a06e0d878964c3f3d2d5161d8e69297e52b06d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \tpublic char[] findSource(IType type, IBinaryType info)", "signatureAfterChange": "\r \tpublic char[] findSource(IType type, IBinaryType info)", "diff": ["-\t\t\t\t\t\tsource = BufferManager.bytesToChar(bytes);\r", "-\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t\tsource = Util.bytesToChar(bytes);\r", "+\t\t\t\t\t} catch (IOException e) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c430091d5c65f5029ed269a2a2540e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 73, "signatureBeforeChange": " \tpublic boolean visit(FieldReference fieldReference, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(FieldReference fieldReference, BlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (fieldReference.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (fieldReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c9753c229bc95e43516ea34aa2c59d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "7a1c2ec10fa6c29fd19952e2b899ad7b8ee3f72a", "commitAfterChange": "c4b36d06173d8e97d900cc6848a6ef22d1e840e1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \t\tBindingTables()", "signatureAfterChange": "  \t\tBindingTables()", "diff": ["-\t\t\tthis.compilerBindingsToASTBindings = new HashMap();", "-\t\t\tthis.bindingKeysToBindings = new HashMap();", "+\t\t\tthis.compilerBindingsToASTBindings = new ConcurrentHashMap();", "+\t\t\tthis.bindingKeysToBindings = new ConcurrentHashMap();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cff77a5bb643904a2303246b9ee0bce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe2.java", "commitBeforeChange": "5e70a582e36fd39d7629b8f556b66f50a1050058", "commitAfterChange": "5ca447c521262374b5199c22b8bb8d32a007f444", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  \tprivate void printBlockComment(char[] s, boolean isJavadoc)", "signatureAfterChange": "  \tprivate void printBlockComment(char[] s, boolean isJavadoc)", "diff": ["-\t\t\t\t\t\tif (Character.isWhitespace((char) currentCharacter)) {", "+\t\t\t\t\t\tif (ScannerHelper.isWhitespace((char) currentCharacter)) {", "-\t\t\t\t\t\t\twhile(currentCharacter != -1 && currentCharacter != '\\r' && currentCharacter != '\\n' && Character.isWhitespace((char) currentCharacter)) {", "+\t\t\t\t\t\t\twhile(currentCharacter != -1 && currentCharacter != '\\r' && currentCharacter != '\\n' && ScannerHelper.isWhitespace((char) currentCharacter)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d2a9cd2534a023021634dd1db4a81aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "7bf8b664251457ee19a0ca0f4e524593e5cebbd2", "commitAfterChange": "c844b42e53f5e6c13f3c402081599074b3dd58c2", "methodNumberBeforeChange": 179, "methodNumberAfterChange": 179, "signatureBeforeChange": " public void testBug95794c() throws CoreException", "signatureAfterChange": " public void testBug95794c() throws CoreException", "diff": ["-\tsearch(field, ALL_OCCURRENCES, getJavaSearchScopeBugs(), occurencesCollector);", "+\tsearch(field, ALL_OCCURRENCES, getJavaSearchScope(), occurencesCollector);", "-\tsearch(field, REFERENCES, getJavaSearchScopeBugs(), referencesCollector);", "+\tsearch(field, REFERENCES, getJavaSearchScope(), referencesCollector);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d3c9f24ce4de7123e182bdc6aebab30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "0f5d04adf9d2fa735fce5517c85c8317372cf6c0", "commitAfterChange": "6cefacaaf91a5190221cb83191ea60dad1636887", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void checkTaskTag(int commentStart, int commentEnd) throws InvalidInputException", "signatureAfterChange": " public void checkTaskTag(int commentStart, int commentEnd) throws InvalidInputException", "diff": ["-\t\t\t\t\t\tif (this.isTaskCaseSensitive || (Character.toLowerCase(sc) != Character.toLowerCase(tc))) { \t// case insensitive check", "+\t\t\t\t\t\tif (this.isTaskCaseSensitive || (ScannerHelper.toLowerCase(sc) != ScannerHelper.toLowerCase(tc))) { \t// case insensitive check"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d942d4df41f2d44459859865dc0f3df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/IndexSummary.java", "commitBeforeChange": "a7e6b3d174d33a8a3b8d03f466c6cb3381f5f0c9", "commitAfterChange": "2e2e66f7f68b994d0931afecfd3c1e559acd59d5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tpublic int getBlockNumForFileNum(int fileNum)", "signatureAfterChange": "\r \tpublic int getBlockNumForFileNum(int fileNum)", "diff": ["-\t\t\tFirstFileInBlock entry= (FirstFileInBlock) firstFilesInBlocks.elementAt(mid);\r", "+\t\t\tFirstFileInBlock entry= (FirstFileInBlock) firstFilesInBlocks.get(mid);\r", "-\t\tFirstFileInBlock entry= (FirstFileInBlock) firstFilesInBlocks.elementAt(max);\r", "+\t\tFirstFileInBlock entry= (FirstFileInBlock) firstFilesInBlocks.get(max);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4da1f32b6769d76ab1ef807dbb2d9269", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java", "commitBeforeChange": "7184fe7e9ce3404df3f6147602a0f216b79ebe44", "commitAfterChange": "b22251ac966c7d61e7443863a4e62a37844f5e08", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public String toString()", "signatureAfterChange": " public String toString()", "diff": ["-\treturn \"Classpath for jar file \" + this.zipFile.getName(); //$NON-NLS-1$", "+\treturn \"Classpath for jar file \" + this.file.getPath(); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4db3135239f449356e20e2a501cf1bc5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "2638be2ccc1738a8756046b508b2a9be01dab4c9", "commitAfterChange": "2af4d6c5a01ec5b5f71fc5f4417f402b3cbb8976", "methodNumberBeforeChange": 265, "methodNumberAfterChange": 265, "signatureBeforeChange": " public void newStringContatenation()", "signatureAfterChange": " public void newStringContatenation()", "diff": ["-\t\twriteUnsignedShort(constantPool.literalIndexForType(QualifiedNamesConstants.JavaLangStringBuilderConstantPoolName));", "+\t\twriteUnsignedShort(constantPool.literalIndexForType(ConstantPool.JavaLangStringBuilderConstantPoolName));", "-\t\twriteUnsignedShort(constantPool.literalIndexForType(QualifiedNamesConstants.JavaLangStringBufferConstantPoolName));", "+\t\twriteUnsignedShort(constantPool.literalIndexForType(ConstantPool.JavaLangStringBufferConstantPoolName));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e51ac2c59081b43ba28291b84214ebe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/FieldBinding.java", "commitBeforeChange": "740d8a3bbf7d827a9782a8704551b5892c828d42", "commitAfterChange": "37fa53fe1bcd1db81d377f564f101511c07818f5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public final boolean canBeSeenBy(TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "signatureAfterChange": "  public final boolean canBeSeenBy(TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "diff": ["-\t\t\tif (currentType.findSuperTypeErasingTo(declaringErasure) != null) {", "+\t\t\tif (currentType.findSuperTypeWithSameErasure(declaringErasure) != null) {", "-\t\t\t\tif (currentType == receiverErasure || receiverErasure.findSuperTypeErasingTo(currentType) != null){", "+\t\t\t\tif (currentType == receiverErasure || receiverErasure.findSuperTypeWithSameErasure(currentType) != null){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e6de93e3ca62e92f04d85ebd6fcf2fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic boolean isDefaultConstructor()", "signatureAfterChange": " \tpublic boolean isDefaultConstructor()", "diff": ["-\t\t\treturn (this.binding.modifiers & CompilerModifiers.AccIsDefaultConstructor) != 0;", "+\t\t\treturn (this.binding.modifiers & ExtraCompilerModifiers.AccIsDefaultConstructor) != 0;", "-\t\treturn (this.binding.modifiers & CompilerModifiers.AccIsDefaultConstructor) != 0;", "+\t\treturn (this.binding.modifiers & ExtraCompilerModifiers.AccIsDefaultConstructor) != 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e72039fe2f61f284b51385954494fe7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "418f1d61f23f33e0e639dfcb37d7371b9ddc656a", "commitAfterChange": "9fedbc20e6a58ab4ca985b6cd53ab67968737404", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 118, "signatureBeforeChange": " \t \tprivate void retrieveIdentifierAndSetPositions(int start, int end, Name name)", "signatureAfterChange": " \t \tprivate void retrieveIdentifierAndSetPositions(int start, int end, Name name)", "diff": ["-\t\t\twhile((token = scanner.getNextToken()) != Scanner.TokenNameEOF)  {", "-\t\t\t\tif (token == Scanner.TokenNameIdentifier) {", "+\t\t\twhile((token = scanner.getNextToken()) != ITerminalSymbols.TokenNameEOF)  {", "+\t\t\t\tif (token == ITerminalSymbols.TokenNameIdentifier) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e7ffb0fb48e7cec00e887487b0008fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "38c895fd64a92567249832dd2a8d427fc1bcacc2", "commitAfterChange": "47b4b871bf6d388352229c39f2d0357c2b36e470", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tprivate void formatCascadingMessageSends(CascadingMethodInvocationFragmentBuilder builder, BlockScope scope)", "signatureAfterChange": "  \tprivate void formatCascadingMessageSends(CascadingMethodInvocationFragmentBuilder builder, BlockScope scope)", "diff": ["-\t\t\t\tif (this.preferences.insert_space_within_message_send) {", "+\t\t\t\tif (this.preferences.insert_space_after_opening_paren_in_message_send) {", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_within_message_send);", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_message_send);", "+\t\t\t\t\t\tif (this.preferences.insert_space_after_opening_paren_in_message_send) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (this.preferences.insert_space_within_message_send) {", "-\t\t\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_within_message_send);", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_message_send);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f262bb78f2c5f08444f95cf4ba14139", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "80d1a1c8c9608e72c63b677a4e2d1f5e89ff648c", "commitAfterChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "methodNumberBeforeChange": 163, "methodNumberAfterChange": 163, "signatureBeforeChange": "\r protected void consumeStatementWhile()", "signatureAfterChange": "\r protected void consumeStatementWhile()", "diff": ["-\t\t\t\tendPosition); \r", "+\t\t\t\tendStatementPosition); \r", "-\t\t\t\tendPosition); \r", "+\t\t\t\tendStatementPosition); \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f2b94c7b4192f08de44eb3d6ff7c90f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "fe25f265c04b05b78a3922c802443d0f290eb28d", "commitAfterChange": "24d226ada8d61f965d94976697c07601e6dce9f7", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public synchronized Index recreateIndex(IPath path)", "signatureAfterChange": " public synchronized Index recreateIndex(IPath path)", "diff": ["-\t\t\tJobManager.verbose(\"-> recreating index: \"+indexPath+\" for path: \"+path.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tUtil.verbose(\"-> recreating index: \"+indexPath+\" for path: \"+path.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tJobManager.verbose(\"-> failed to recreate index for path: \"+path.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tUtil.verbose(\"-> failed to recreate index for path: \"+path.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f5dbc04982e592229b8560ea5f56ee7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchParticipant.java", "commitBeforeChange": "fe905e29a608f61f2afe181f4c1e4e27bb2b95dc", "commitAfterChange": "53a7cfa9bf2a3a1ade921d716dbdc58a4bfc35d4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void indexDocument(SearchDocument document, IPath indexPath)", "signatureAfterChange": " \tpublic void indexDocument(SearchDocument document, IPath indexPath)", "diff": ["-\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isJavaFileName(documentPath)) {", "+\t\tif (org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(documentPath)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f76969f8d9c0d53a6bf0f41f5bb54bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic void testBug45592()", "signatureAfterChange": " \tpublic void testBug45592()", "diff": ["-\t\treportMissingJavadoc = CompilerOptions.DISABLED;", "+\t\treportMissingJavadocComments = CompilerOptions.IGNORE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f9e1446068f2a6adf9f3187676be89c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "adb1e4d21f756fdc893d84befd3e859cfa2aa662", "commitAfterChange": "2941812daedfecddb313ba4dd0685bac7c26b287", "methodNumberBeforeChange": 394, "methodNumberAfterChange": 394, "signatureBeforeChange": " \tpublic void test375()", "signatureAfterChange": " \tpublic void test375()", "diff": ["-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_ARRAY_INITIALIZER_BRACE_POSITION, DefaultCodeFormatterConstants.END_OF_LINE);", "-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_ARRAY_INITIALIZER_CONTINUATION_INDENTATION, \"1\");", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ARRAY_INITIALIZER, DefaultCodeFormatterConstants.END_OF_LINE);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_CONTINUATION_INDENTATION_FOR_ARRAY_INITIALIZER, \"1\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fdfd042a2df3ca792c14fbe7e9cc7d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 50, "signatureBeforeChange": "\r public int literalIndexForJavaLangStringBufferConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangStringBufferConstructor()", "diff": ["-\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "500bbc88e4b6fb7f04466188e30f4012", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java", "commitBeforeChange": "522e84acc5c220c07378cd67640c99884ac9cc9d", "commitAfterChange": "e5f48a4d4e39a733649e1d7678dd3cc38b1f57e5", "methodNumberBeforeChange": 208, "methodNumberAfterChange": 208, "signatureBeforeChange": " \tpublic void testFieldDeclaration()", "signatureAfterChange": " \tpublic void testFieldDeclaration()", "diff": ["-\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\tif (ast.apiLevel() >= AST.JLS3) {", "-\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\tif (ast.apiLevel() == AST.JLS2) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "506821111d8d05ce662bceca4be2af6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationMirrorImpl.java", "commitBeforeChange": "ee22b953168e5eb2f8830ee8c58b8b5ee9e24014", "commitAfterChange": "263941e543d760da46f092c40a60d9eb4c5dc908", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public Object getValue(final String memberName)", "signatureAfterChange": "     public Object getValue(final String memberName)", "diff": ["-\t\tfinal IResolvedMemberValuePair[] declaredPairs = _domAnnotation.getDeclaredMemberValuePairs();", "-\t\tfor( IResolvedMemberValuePair pair : declaredPairs ){\t\t\t", "+\t\tfinal IMemberValuePairBinding[] declaredPairs = _domAnnotation.getDeclaredMemberValuePairs();", "+\t\tfor( IMemberValuePairBinding pair : declaredPairs ){\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "508c88253afed907743de80afe2b9148", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/JDIStackFrame.java", "commitBeforeChange": "b9942ecaf3eefba2dbc5e187c939df5cfcc2d6c7", "commitAfterChange": "2ea28b71481adeeaf9e7adba83fdf2894ac85ffd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected ThreadReference getDebuggedThread(DebugEvaluationTest test)", "signatureAfterChange": " protected ThreadReference getDebuggedThread(DebugEvaluationTest test)", "diff": ["-\t\t\tAssert.assertTrue(\"Target exception \" + e.getMessage(), false);", "+\t\t\tTestCase.assertTrue(\"Target exception \" + e.getMessage(), false);", "-\t\t\t\tAssert.assertTrue(\"Compilation error in user code\", false);", "+\t\t\t\tTestCase.assertTrue(\"Compilation error in user code\", false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50b9b30b1fdf41bb51fa0306a9602d47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterAST8Test.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 128, "signatureBeforeChange": " \tpublic void test0126() throws JavaModelException", "signatureAfterChange": " \tpublic void test0126() throws JavaModelException", "diff": ["-\t\tvariableDeclarationFragment.extraDimensionInfos().clear();", "-\t\tvariableDeclarationFragment.extraDimensionInfos().add(this.ast.newExtraDimension());", "+\t\tvariableDeclarationFragment.extraDimensions().clear();", "+\t\tvariableDeclarationFragment.extraDimensions().add(this.ast.newExtraDimension());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51185ab0ab63bfe7fded86b7c6fcb272", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 87, "signatureBeforeChange": " \tpublic boolean visit(NullLiteral nullLiteral, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(NullLiteral nullLiteral, BlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (nullLiteral.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (nullLiteral.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5156b82945288a02776e76e040e40bba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "57e05ac5c8db0c06028159bb169607bae2e0ec84", "commitAfterChange": "93b35a5a711d0edb75c141799c4443c91fb39f10", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public CompilationUnitDeclaration buildBindings(org.eclipse.jdt.core.ICompilationUnit compilationUnit) throws JavaModelException", "signatureAfterChange": " public CompilationUnitDeclaration buildBindings(org.eclipse.jdt.core.ICompilationUnit compilationUnit) throws JavaModelException", "diff": ["-\t\t\t(IFile)compilationUnit.getOriginalElement().getUnderlyingResource() :", "-\t\t\t(IFile)compilationUnit.getUnderlyingResource();", "+\t\t\t(IFile)compilationUnit.getOriginalElement().getResource() :", "+\t\t\t(IFile)compilationUnit.getResource();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51a407c2bd2a5116a9c24306e4762d7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMethod.java", "commitBeforeChange": "ba3c10ade533fbab6aaf6443788fbfcae5452e68", "commitAfterChange": "207683ceeef557e028c3a7026580ffe6ac9e1870", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public IMemberValuePair getDefaultValue() throws JavaModelException", "signatureAfterChange": " public IMemberValuePair getDefaultValue() throws JavaModelException", "diff": ["-\tSourceMethodInfo sourceMethodInfo = (SourceMethodInfo) getElementInfo();", "+\tSourceMethodElementInfo sourceMethodInfo = (SourceMethodElementInfo) getElementInfo();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51daed35d2f92d412a71abd1b2c9b85f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java", "commitBeforeChange": "ee4aaa82998d38e6753ee8cc828566dd18d4910f", "commitAfterChange": "24c9e84b2ec4fea87b1bf2f444e5d541a0e3f479", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t\tpublic Object remove(int index)", "signatureAfterChange": " \t\tpublic Object remove(int index)", "diff": ["-\t\t\tif ((ASTNode.this.flags & PROTECT) != 0) {", "+\t\t\tif ((ASTNode.this.typeAndFlags & PROTECT) != 0) {", "-\t\t\tif ((oldChild.flags & PROTECT) != 0) {", "+\t\t\tif ((oldChild.typeAndFlags & PROTECT) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "521d0d91ee18f6b6dad18d33f198bd25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/IncrementalTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void _testWrongCompilationUnitLocation() throws JavaModelException", "signatureAfterChange": " \tpublic void _testWrongCompilationUnitLocation() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5264b078355ceb541deb87278d237bac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "60adc6e9bd2a19d1f00a26879d59da4db15980bb", "commitAfterChange": "2fa8bdc58397f8ba42986ed8442348506f4b1424", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \r public void setOverriddenPackageDefaultMethodSeverity(int flag)", "signatureAfterChange": "\r \r public void setOverriddenPackageDefaultMethodSeverity(int flag)", "diff": ["-\t\tcase ERROR : \r", "+\t\tcase Error : \r", "-\t\tcase WARNING : \r", "+\t\tcase Warning : \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5281e2a89a31da1732a511a09fd7f8b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": " public void test130() throws JavaModelException", "signatureAfterChange": " public void test130() throws JavaModelException", "diff": ["-\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(int, float, Class), Ljavadoc.methods.tags.BasicTestMethods;, (IFLjava.lang.Class;)V, BasicTestMethods, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, BasicTestMethods, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(int, float, Class), Ljavadoc.methods.tags.BasicTestMethods;, (IFLjava.lang.Class;)V, BasicTestMethods, (xxx, real, clazz), \"+this.positions+R_DRINR+\"}\\n\" + ", "+\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, BasicTestMethods, null, \"+this.positions+R_DRINR+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52f15baa2be423de512242edc2fdd490", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "0927ffa25a2592bfca0a67c9cc9e0e69775118de", "commitAfterChange": "7b934c773095ee4cd83d9fe1d55bbb70d8656cbb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\t  \tpublic void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "signatureAfterChange": "\t  \tpublic void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "diff": ["-\t\t\t\t&& (((operation.left.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_String) // exclude string concatenation which would occur backwards", "-\t\t\t\t&& (((operation.right.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_String)) { // exclude string concatenation which would occur backwards", "+\t\t\t\t&& (((operation.left.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_JavaLangString) // exclude string concatenation which would occur backwards", "+\t\t\t\t&& (((operation.right.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_JavaLangString)) { // exclude string concatenation which would occur backwards"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52f5ba38254ce01c97f6139f9f97cc57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ClassInstanceCreation.java", "commitBeforeChange": "06e8c1940b7fce6b86315eb81900d27eb1279bce", "commitAfterChange": "91510ee1ea5206403f95c9b316aaa14af70c8d8e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tASTNode clone0(AST target)", "signatureAfterChange": " \tASTNode clone0(AST target)", "diff": ["-\t\t\tresult.typeParameters().addAll(ASTNode.copySubtrees(target, typeParameters()));", "+\t\t\tresult.typeArguments().addAll(ASTNode.copySubtrees(target, typeArguments()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53566e32c376ce83e6a5f8e5a2938cd2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "418f1d61f23f33e0e639dfcb37d7371b9ddc656a", "commitAfterChange": "9fedbc20e6a58ab4ca985b6cd53ab67968737404", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " \tprivate int retrieveStartBlockPosition(int start, int end)", "signatureAfterChange": " \tprivate int retrieveStartBlockPosition(int start, int end)", "diff": ["-\t\t\twhile ((token = scanner.getNextToken()) != Scanner.TokenNameEOF) {", "+\t\t\twhile ((token = scanner.getNextToken()) != ITerminalSymbols.TokenNameEOF) {", "-\t\t\t\t\tcase Scanner.TokenNameLBRACE://110", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameLBRACE://110"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53861ac23456c75e2c39eba22dc81459", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "3e87eca7a8519c63afbfa4ffe7e9a68e0e861f3c", "commitAfterChange": "54a06e0d878964c3f3d2d5161d8e69297e52b06d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "signatureAfterChange": "\r \tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "diff": ["-\t\t\t\tfinal char[] source = PotentialMatch.getContents(file);\r", "+\t\t\t\tfinal char[] source = Util.getResourceContentsAsCharArray(file);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5399bd7617999092afba6e2a82551eb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/SimpleIndexInput.java", "commitBeforeChange": "70b32514588b091b133b82607c10c8c78d5b8fe3", "commitAfterChange": "aaa63e79319475935e2167f567ed10fa3d10e895", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic IndexedFile getIndexedFile(IDocument document)", "signatureAfterChange": " \tpublic IndexedFile getIndexedFile(SearchDocument document)", "diff": ["-\tpublic IndexedFile getIndexedFile(IDocument document) {", "-\t\tString name= document.getName();", "+\tpublic IndexedFile getIndexedFile(SearchDocument document) {", "+\t\tString name= document.getPath();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53abcb76e84e5fc28387dac4db7e0623", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void addProblemClinit(IProblem[] problems)", "signatureAfterChange": " \tpublic void addProblemClinit(CategorizedProblem[] problems)", "diff": ["-\tpublic void addProblemClinit(IProblem[] problems) {", "+\tpublic void addProblemClinit(CategorizedProblem[] problems) {", "-\t\t\t\tIProblem problem = problems[i];", "+\t\t\t\tCategorizedProblem problem = problems[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53c26c1fada58061dd70ba7de3685343", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " protected AstNode wrapWithExplicitConstructorCallIfNeeded(AstNode ast)", "signatureAfterChange": " protected ASTNode wrapWithExplicitConstructorCallIfNeeded(ASTNode ast)", "diff": ["-protected AstNode wrapWithExplicitConstructorCallIfNeeded(AstNode ast) {", "+protected ASTNode wrapWithExplicitConstructorCallIfNeeded(ASTNode ast) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "545709193f78e2fa18c30392ffa7ab75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic boolean visit( \t\tArrayTypeReference arrayTypeReference, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tArrayTypeReference arrayTypeReference, \t\tBlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (arrayTypeReference.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (arrayTypeReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "546cc5e89f1d71dcb1c48f6fb0552cdf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "6fdaa2b9d78c89a1ed2269f5279c3e02cee4b6cd", "commitAfterChange": "8ec1d344fc5f9b16a04a2a15e36cb4db52cac4eb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic DeltaProcessor getDeltaProcessor()", "signatureAfterChange": "  \tpublic DeltaProcessor getDeltaProcessor()", "diff": ["-\t\tDeltaProcessor deltaProcessor = (DeltaProcessor)this.deltaProcessors.getCurrent();", "+\t\tDeltaProcessor deltaProcessor = (DeltaProcessor)this.deltaProcessors.get();", "-\t\tthis.deltaProcessors.setCurrent(deltaProcessor);", "+\t\tthis.deltaProcessors.set(deltaProcessor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54bbe0a2ad292fb79395cb55e1127227", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": "\r public int literalIndexForJavaLangErrorConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangErrorConstructor()", "diff": ["-\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54c42e5f1038d68673295b5b54a9aea7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/CompletionRequestor.java", "commitBeforeChange": "9f83390b8974225073423e6d4d9c0d282b2dec03", "commitAfterChange": "187fc3c8a943e9120c4cf02223f70b9ac6c29cbc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic final boolean isIgnored(int completionProposalKind)", "signatureAfterChange": " \tpublic final boolean isIgnored(int completionProposalKind)", "diff": ["-\t\tif (completionProposalKind < CompletionProposal.ANONYMOUS_CLASS_DECLARATION", "-\t\t\t|| completionProposalKind > CompletionProposal.METHOD_NAME_REFERENCE) {", "+\t\tif (completionProposalKind < CompletionProposal.FIRST_KIND", "+\t\t\t|| completionProposalKind > CompletionProposal.LAST_KIND) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5599c6f2652ea15957054227ab9998a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "4b94aeae3b2f17272ac43325195dd1b4ff823c4d", "commitAfterChange": "954897e3771c12ba59b2bd8c81018b01e7959d76", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public int scanIdentifierOrKeyword()", "signatureAfterChange": " public int scanIdentifierOrKeyword()", "diff": ["-\t\t\t\t\t\t\treturn TokenNameERROR; //const is not used in java ???????", "+\t\t\t\t\t\t\treturn TokenNameconst; //const is not used in java ???????", "-\t\t\t\t\treturn TokenNameERROR;", "+\t\t\t\t\treturn TokenNamegoto;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55e9a40f1e94d6784cb8f08ac1c4b8ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java", "commitBeforeChange": "c4f17ac79e05c4dff8c3cc6e660e1fc73ee3406f", "commitAfterChange": "29d06747dc9924aaa37b6f5478bee32ae657345a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate void resolveAnnotations( \t\t\tBlockScope scope, \t\t\tAnnotation[] annotations, \t\t\tBinding currentBinding)", "signatureAfterChange": "  \tprivate void resolveAnnotations( \t\t\tBlockScope scope, \t\t\tAnnotation[] annotations, \t\t\tBinding currentBinding)", "diff": ["-\t\t\t\tTypeElement anno = (TypeElement)ElementFactory.newElement(binding.getAnnotationType()); ", "-\t\t\t\tElement element = ElementFactory.newElement(currentBinding);", "+\t\t\t\tTypeElement anno = (TypeElement)Factory.newElement(binding.getAnnotationType()); ", "+\t\t\t\tElement element = Factory.newElement(currentBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "563fde2c1dac0f7a1f3fd08fbd734166", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FloatLiteral.java", "commitBeforeChange": "7111a90a9313c88b41ed63cd6da2db497c5fcfb7", "commitAfterChange": "b1e8bf37aa256ab5bf86ee13594009ed0a13e10a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void computeConstant()", "signatureAfterChange": " \tpublic void computeConstant()", "diff": ["-\t\t\t\tconstant = Constant.fromValue(v);", "+\t\t\t\tconstant = FloatConstant.fromValue(v);", "-\t\tconstant = Constant.fromValue(value);", "+\t\tconstant = FloatConstant.fromValue(value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "567811e37eb6c69cfdfe7da9c691d77e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetEvaluator.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected void addEvaluationResultForCompilationProblem(Map resultsByIDs, IProblem problem, char[] cuSource)", "signatureAfterChange": " protected void addEvaluationResultForCompilationProblem(Map resultsByIDs, CategorizedProblem problem, char[] cuSource)", "diff": ["-protected void addEvaluationResultForCompilationProblem(Map resultsByIDs, IProblem problem, char[] cuSource) {", "+protected void addEvaluationResultForCompilationProblem(Map resultsByIDs, CategorizedProblem problem, char[] cuSource) {", "-\t\tresultsByIDs.put(evaluationID, new EvaluationResult(evaluationID, evaluationType, new IProblem[] {problem}));", "+\t\tresultsByIDs.put(evaluationID, new EvaluationResult(evaluationID, evaluationType, new CategorizedProblem[] {problem}));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56fa7590351d5f35fc0a5625fa54b912", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "2579944d091917e27cee3c25e303d9cdf8721b08", "commitAfterChange": "ff568cfa3818ea8ce091951aa40f00dde1253577", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic Map getMap()", "signatureAfterChange": "  \tpublic Map getMap()", "diff": ["-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ARG_ANNOTATION, this.insert_new_line_after_arg_annotation ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PARAMETER, this.insert_new_line_after_annotation_on_parameter ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56fcdb106c8aa020b5eaa20e368aa519", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/jdom/DOMBuilder.java", "commitBeforeChange": "6667f48fb414bf631c6788d57b69b16addac46f0", "commitAfterChange": "c62484c76d34e1754fa4fc8cfcdf45889f18f642", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  protected void enterType(int declarationStart, int[] javaDocPositions,  \tint modifiers, int modifiersStart, int keywordStart, char[] name,  \tint nameStart, int nameEnd, char[] superclass, int superclassStart,  \tint superclassEnd, char[][] superinterfaces, int[] superinterfaceStarts,  \tint[] superinterfaceEnds, int bodyStart, boolean isClass)", "signatureAfterChange": "  protected void enterType(int declarationStart, int[] javaDocPositions,  \tint modifiers, int modifiersStart, int keywordStart, char[] name,  \tint nameStart, int nameEnd, char[] superclass, int superclassStart,  \tint superclassEnd, char[][] superinterfaces, int[] superinterfaceStarts,  \tint[] superinterfaceEnds, int bodyStart, boolean isClass)", "diff": ["-\t\t\tCharArrayOps.charcharToString(superinterfaces), interfacesRange,", "+\t\t\tCharOperation.charArrayToStringArray(superinterfaces), interfacesRange,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57203a4582a4c76702bf9fbe83357e81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/BatchTestUtils.java", "commitBeforeChange": "bae68eab8d9783265835f0199563e8e119dce3af", "commitAfterChange": "fa6890a86857b15557d9a3a779671e0cc8210b0e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static void compileOneClass(JavaCompiler compiler, File inputFile, List<String> options)", "signatureAfterChange": " \tpublic static void compileOneClass(JavaCompiler compiler, File inputFile, List<String> options)", "diff": ["-\t", "-\t\t", "+", "-\t\toptions.add(_tmpSrcFolderName + File.pathSeparator + _tmpGenFolderName + File.pathSeparator + _processorJarName);", "+\t\toptions.add(_tmpSrcFolderName + File.pathSeparator + _tmpGenFolderName + File.pathSeparator + _processorJarPath);", "-\t\toptions.add(_processorJarName);", "+\t\toptions.add(_processorJarPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57377cd43b48ede4b129f594a0078d7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "1bb29de87657371d6b2e9a01ac3484f13516eab9", "commitAfterChange": "b208e61b699229b414f76c3c9bfed66b1f92d991", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "  public PackageReferenceMatch newPackageReferenceMatch( \t\tIJavaElement enclosingElement, \t\tint accuracy, \t\tint offset, \t\tint length, \t\tASTNode reference)", "signatureAfterChange": "  public InternalPackageReferenceMatch newPackageReferenceMatch( \t\tIJavaElement enclosingElement, \t\tint accuracy, \t\tint offset, \t\tint length, \t\tASTNode reference)", "diff": ["-public PackageReferenceMatch newPackageReferenceMatch(", "+public InternalPackageReferenceMatch newPackageReferenceMatch(", "-\treturn new PackageReferenceMatch(enclosingElement, accuracy, offset, length, insideDocComment, participant, resource);", "+\treturn new InternalPackageReferenceMatch(enclosingElement, accuracy, offset, length, insideDocComment, participant, resource);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57b95a74ba37951610c3c758549ac82b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "d1facd69b9dc2127e7162415007081afa0f4348b", "commitAfterChange": "a31fc41a761266e1336ef1dbd295debe293f4d81", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic Object reduce(InferenceContext18 inferenceContext)", "signatureAfterChange": " \tpublic Object reduce(InferenceContext18 inferenceContext)", "diff": ["-\t\t\tif (this.left.isNormalBaseType()) {", "+\t\t\tif (this.left.isPrimitiveType()) {", "-\t\t\tif (this.right.isNormalBaseType()) {", "+\t\t\tif (this.right.isPrimitiveType()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57d513d57e82f872d2c45fa8d43533fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetParser.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " protected void consumeInterfaceHeaderName1()", "signatureAfterChange": " protected void consumeInterfaceHeaderName1()", "diff": ["-\t\t\ttypeDecl.bits |= ASTNode.IsMemberTypeMASK;", "+\t\t\ttypeDecl.bits |= ASTNode.IsMemberType;", "-\t\ttypeDecl.bits |= ASTNode.IsLocalTypeMASK;", "+\t\ttypeDecl.bits |= ASTNode.IsLocalType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58352f8d0c84681e55ee5ad8697361b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "b9de5f3466a9b4d6687de837720c445097067b16", "commitAfterChange": "39416e9e4305b172d90b88aed3085d98ded0a86c", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "\r \tpublic void reportAccurateReference(\r \t\tint sourceStart,\r \t\tint sourceEnd,\r \t\tchar[][] tokens,\r \t\tIJavaElement element,\r \t\tint[] accuracies)\r \t\tthrows CoreException", "signatureAfterChange": "\r \tpublic void reportAccurateReference(\r \t\tint sourceStart,\r \t\tint sourceEnd,\r \t\tchar[][] tokens,\r \t\tIJavaElement element,\r \t\tint[] accuracies)\r \t\tthrows CoreException", "diff": ["-\t\t\tif (token != TerminalSymbols.TokenNameEOF) {\r", "+\t\t\tif (token != ITerminalSymbols.TokenNameEOF) {\r", "-\t\t} while (token != TerminalSymbols.TokenNameEOF);\r", "+\t\t} while (token != ITerminalSymbols.TokenNameEOF);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58c106025f21a0685169080d2ab16d5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void testBug47341()", "signatureAfterChange": " \tpublic void testBug47341()", "diff": ["-\t\treportMissingJavadoc = CompilerOptions.DISABLED;", "+\t\treportMissingJavadocComments = CompilerOptions.IGNORE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "591029b0d56bba7286b1a51ecf7988ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tprivate void updateReadOnlyPackageFragmentsForMove(IContainer sourceFolder, IPackageFragmentRoot root, String[] newFragName, boolean sourceFolderIsReadOnly)", "signatureAfterChange": "  \tprivate void updateReadOnlyPackageFragmentsForMove(IContainer sourceFolder, PackageFragmentRoot root, String[] newFragName, boolean sourceFolderIsReadOnly)", "diff": ["-\tprivate void updateReadOnlyPackageFragmentsForMove(IContainer sourceFolder, IPackageFragmentRoot root, String[] newFragName, boolean sourceFolderIsReadOnly) {", "-\t\tIContainer parentFolder = (IContainer) root.getResource();", "+\tprivate void updateReadOnlyPackageFragmentsForMove(IContainer sourceFolder, PackageFragmentRoot root, String[] newFragName, boolean sourceFolderIsReadOnly) {", "+\t\tIContainer parentFolder = (IContainer) root.resource();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59383c9018373e84018a35675a46c309", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/base/XMLComparer.java", "commitBeforeChange": "e5afcb0ec821099a058acc796f2348c4c58a2e3e", "commitAfterChange": "1a36ae2092977e6a13134bbe916d1e02aefe6f2e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate boolean collectAnnotations(Element annotsNode, Map<String, Element> map)", "signatureAfterChange": " \tprivate boolean collectAnnotations(Element annotsNode, Map<String, Element> map)", "diff": ["-\t\t\tString sname = e.getAttribute(SNAME);", "+\t\t\tString sname = e.getAttribute(SNAME_TAG);", "-\t\t\tif (ANNOTATION.equals(nodeName)) {", "+\t\t\tif (ANNOTATION_TAG.equals(nodeName)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a0ffdac9d63636f2f32dea12400d5ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic boolean visit( \t\tArrayQualifiedTypeReference arrayQualifiedTypeReference, \t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tArrayQualifiedTypeReference arrayQualifiedTypeReference, \t\tClassScope scope)", "diff": ["-\t\t\tfinal int numberOfParens = (arrayQualifiedTypeReference.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\t\tfinal int numberOfParens = (arrayQualifiedTypeReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a21c0be0532ee3c34ae20fcf57b0ae4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 231, "methodNumberAfterChange": 231, "signatureBeforeChange": " public void javadocMissingThrowsTag(TypeReference typeRef, int modifiers)", "signatureAfterChange": " public void javadocMissingThrowsTag(TypeReference typeRef, int modifiers)", "diff": ["-\tboolean overriding = (modifiers & (CompilerModifiers.AccImplementing|CompilerModifiers.AccOverriding)) != 0;", "+\tboolean overriding = (modifiers & (ExtraCompilerModifiers.AccImplementing|ExtraCompilerModifiers.AccOverriding)) != 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a686c73452ff1137cffc15b327b6095", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreatePackageFragmentOperation.java", "commitBeforeChange": "812814d4d7336d2de6b5ef94acb359cf36b0dc37", "commitAfterChange": "1c9f4163e7dbad2c87f2cb1e6a01930489865cd1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public IJavaModelStatus verify()", "signatureAfterChange": " public IJavaModelStatus verify()", "diff": ["-\tString[] names = Signature.getSimpleNames(fName);", "+\tString[] names = Util.getTrimmedSimpleNames(fName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a8240d6dd3384b47f6f9559ea09a963", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java", "commitBeforeChange": "f03e24a20423490ce43dd47d116e6771e9f8b29a", "commitAfterChange": "0425932939e44005b87b30f06674df053a397223", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tASTNode clone(AST target)", "signatureAfterChange": " \tASTNode clone(AST target)", "diff": ["-\t\tif (this.ast.API_LEVEL == AST.LEVEL_2_0) {", "+\t\tif (this.ast.apiLevel == AST.LEVEL_2_0) {", "-\t\tif (this.ast.API_LEVEL >= AST.LEVEL_3_0) {", "+\t\tif (this.ast.apiLevel >= AST.LEVEL_3_0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5adbc82c88e989bed067a24856c08121", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "418f1d61f23f33e0e639dfcb37d7371b9ddc656a", "commitAfterChange": "9fedbc20e6a58ab4ca985b6cd53ab67968737404", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": "  \tprivate int retrieveProperRightBracketPosition(int bracketNumber, int start, int end)", "signatureAfterChange": "  \tprivate int retrieveProperRightBracketPosition(int bracketNumber, int start, int end)", "diff": ["-\t\t\twhile ((token = scanner.getNextToken()) != Scanner.TokenNameEOF) {", "+\t\t\twhile ((token = scanner.getNextToken()) != ITerminalSymbols.TokenNameEOF) {", "-\t\t\t\t\tcase Scanner.TokenNameRBRACKET:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameRBRACKET:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b0d102e363f0b77375badad63fee9a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 75, "signatureBeforeChange": " public int literalIndexForJavaLangObjectGetClass()", "signatureAfterChange": " public int literalIndexForJavaLangObjectGetClass()", "diff": ["-\tif ((index = wellKnownMethods[GETCLASS_OBJECT_METHOD]) == 0) {", "+\tif ((index = wellKnownMethods[OBJECT_GETCLASS_METHOD]) == 0) {", "-\t\tindex = wellKnownMethods[GETCLASS_OBJECT_METHOD] = currentIndex++;", "+\t\tindex = wellKnownMethods[OBJECT_GETCLASS_METHOD] = currentIndex++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b6cc2bfeb351d7007d88b5e0b0aa40b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "16bbff04917b9cd9bd7cceaf4adfc1563daef0bc", "commitAfterChange": "898da07e1ab8f70e81db909fb2e1c38edc9b87c3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static int getIrritant(int problemID)", "signatureAfterChange": " public static int getIrritant(int problemID)", "diff": ["-\t\tcase IProblem.ReferenceExpressionParameterMismatchPromisedNullable:", "+\t\tcase IProblem.ReferenceExpressionParameterNullityMismatch:", "-\t\tcase IProblem.ReferenceExpressionParameterRequiredNonnullUnchecked:", "+\t\tcase IProblem.ReferenceExpressionParameterNullityUnchecked:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b84ef24863dac84fc96305f41a18bec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ClassFileMatchLocator.java", "commitBeforeChange": "6d93b4bb6f9802710e765aaa00d3450185e4689f", "commitAfterChange": "b4c2385c81cd66eb677f15796da3c5ed6a182754", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void locateMatches(MatchLocator locator, ClassFile classFile, IBinaryType info) throws CoreException", "signatureAfterChange": " public void locateMatches(MatchLocator locator, ClassFile classFile, IBinaryType info) throws CoreException", "diff": ["-\t\t\t\tMethodBinding[] methods = binding.methods();", "+\t\t\t\tMethodBinding[] methods = binding.availableMethods(); // resilience", "-\t\t\t\tFieldBinding[] fields = binding.fields();", "+\t\t\t\tFieldBinding[] fields = binding.availableFields();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b8a18efd68ede323daf570a1711728c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/GetKeyVisitor.java", "commitBeforeChange": "41ef4898bfd4399802c4b7fddb8b2e4f958ada78", "commitAfterChange": "28a0f94188bd26e1014d346f5919c1c6d87c7904", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic boolean visit(ClassInstanceCreation node)", "signatureAfterChange": " \tpublic boolean visit(ClassInstanceCreation node)", "diff": ["-\t\tAssert.assertNotNull(constructorBinding);", "-\t\tAssert.assertNotNull(constructorBinding.getKey());", "+\t\tTestCase.assertNotNull(constructorBinding);", "+\t\tTestCase.assertNotNull(constructorBinding.getKey());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b99dd9c68a5ddea4afe073107318955", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "807b33cf50fdb479db403880e28eb0989e0fbdba", "commitAfterChange": "ec8ef2b0e48215b6eaf284990dd1417e7ae7aeb1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void indexLibrary(IPath path, IProject requestingProject)", "signatureAfterChange": " public void indexLibrary(IPath path, IProject requestingProject)", "diff": ["-\t\trequest = new AddJarFileToIndex((IFile)target, this);", "+\t\trequest = new AddJarFileToIndex((IFile) target, this);", "-\t\tif (((java.io.File)target).isFile()) {", "+\t\tif (((java.io.File) target).isFile()) {", "-\t} else if (target instanceof IFolder) {", "-\t\trequest = new IndexBinaryFolder((IFolder)target, this);", "+\t} else if (target instanceof IContainer) {", "+\t\trequest = new IndexBinaryFolder((IContainer) target, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ba347aae5cf3a7defefc1a56e609c8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "418f1d61f23f33e0e639dfcb37d7371b9ddc656a", "commitAfterChange": "9fedbc20e6a58ab4ca985b6cd53ab67968737404", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": " \tprivate int retrieveEndOfRightParenthesisPosition(int start, int end)", "signatureAfterChange": " \tprivate int retrieveEndOfRightParenthesisPosition(int start, int end)", "diff": ["-\t\t\twhile ((token = scanner.getNextToken()) != Scanner.TokenNameEOF) {", "+\t\t\twhile ((token = scanner.getNextToken()) != ITerminalSymbols.TokenNameEOF) {", "-\t\t\t\t\tcase Scanner.TokenNameRPAREN:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameRPAREN:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c31bc619d2bf24fb1908da6d692d02b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BasicBuildTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void testToDoMarker() throws JavaModelException", "signatureAfterChange": " \tpublic void testToDoMarker() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c3b8e5bbc04b44038db70017d67b02d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ClassInstanceCreation.java", "commitBeforeChange": "06e8c1940b7fce6b86315eb81900d27eb1279bce", "commitAfterChange": "91510ee1ea5206403f95c9b316aaa14af70c8d8e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tClassInstanceCreation (AST ast)", "signatureAfterChange": " \tClassInstanceCreation (AST ast)", "diff": ["-\t\t\tthis.typeParameters = new ASTNode.NodeList(TYPE_PARAMETERS_PROPERTY);", "+\t\t\tthis.typeArguments = new ASTNode.NodeList(TYPE_ARGUMENTS_PROPERTY);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c4bbb7524047d95c0c58c1070f3fec4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "418f1d61f23f33e0e639dfcb37d7371b9ddc656a", "commitAfterChange": "9fedbc20e6a58ab4ca985b6cd53ab67968737404", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "  \tprivate int retrieveElseEndingPosition(int start, int end)", "signatureAfterChange": "  \tprivate int retrieveElseEndingPosition(int start, int end)", "diff": ["-\t\t\twhile ((token = scanner.getNextToken()) != Scanner.TokenNameEOF) {", "+\t\t\twhile ((token = scanner.getNextToken()) != ITerminalSymbols.TokenNameEOF) {", "-\t\t\t\t\tcase Scanner.TokenNameelse:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameelse:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c5bb9316dcd80595fcf59304ee1ae77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "fe905e29a608f61f2afe181f4c1e4e27bb2b95dc", "commitAfterChange": "53a7cfa9bf2a3a1ade921d716dbdc58a4bfc35d4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  protected void findSourceFiles(IResourceDelta sourceDelta, ClasspathMultiDirectory md, int segmentCount) throws CoreException", "signatureAfterChange": "  protected void findSourceFiles(IResourceDelta sourceDelta, ClasspathMultiDirectory md, int segmentCount) throws CoreException", "diff": ["-\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isJavaFileName(resourceName)) {", "+\t\t\tif (org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(resourceName)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cb8ab04045c17f87e0ea1ec5f083639", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 238, "methodNumberAfterChange": 238, "signatureBeforeChange": "  public void parse( \tFieldDeclaration field,  \tTypeDeclaration type,  \tCompilationUnitDeclaration unit, \tchar[] initializationSource)", "signatureAfterChange": "  public void parse( \tFieldDeclaration field,  \tTypeDeclaration type,  \tCompilationUnitDeclaration unit, \tchar[] initializationSource)", "diff": ["-\tif ((type.bits & AstNode.HasLocalTypeMASK) != 0) {", "-\t\tfield.bits |= AstNode.HasLocalTypeMASK;", "+\tif ((type.bits & ASTNode.HasLocalTypeMASK) != 0) {", "+\t\tfield.bits |= ASTNode.HasLocalTypeMASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cc4018ec41b17623f541dace04dd9c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tvoid computeLocalVariablePositions(int ilocal, int initOffset, CodeStream codeStream)", "signatureAfterChange": " \tvoid computeLocalVariablePositions(int ilocal, int initOffset, CodeStream codeStream)", "diff": ["-\t\t\t\t\t&& ((local.declaration.bits & AstNode.IsLocalDeclarationReachableMASK) != 0)) { // declaration is reachable", "+\t\t\t\t\t&& ((local.declaration.bits & ASTNode.IsLocalDeclarationReachableMASK) != 0)) { // declaration is reachable", "-\t\t\t\t\t\t\tlocal.declaration == null ? (AstNode)this.methodScope().referenceContext : local.declaration);", "+\t\t\t\t\t\t\tlocal.declaration == null ? (ASTNode)this.methodScope().referenceContext : local.declaration);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cf1d9c47eb2d013f4108c804b51ecf8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "418f1d61f23f33e0e639dfcb37d7371b9ddc656a", "commitAfterChange": "9fedbc20e6a58ab4ca985b6cd53ab67968737404", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " \tprivate void retrieveRightBracePosition(ASTNode node)", "signatureAfterChange": " \tprivate void retrieveRightBracePosition(ASTNode node)", "diff": ["-\t\t\twhile ((token = scanner.getNextToken()) != Scanner.TokenNameEOF) {", "+\t\t\twhile ((token = scanner.getNextToken()) != ITerminalSymbols.TokenNameEOF) {", "-\t\t\t\t\tcase Scanner.TokenNameRBRACE:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameRBRACE:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d789439f893e2846de2b7b0ea3ba6d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "c4f17ac79e05c4dff8c3cc6e660e1fc73ee3406f", "commitAfterChange": "29d06747dc9924aaa37b6f5478bee32ae657345a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "signatureAfterChange": " \t@Override \tpublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)", "diff": ["-\t\tSet<String> expectedRootElementNames = new HashSet<String>(_rootElementNames.length);", "-\t\tfor (String name : _rootElementNames) {", "+\t\tSet<String> expectedRootElementNames = new HashSet<String>(ROOT_ELEMENT_NAMES.length);", "+\t\tfor (String name : ROOT_ELEMENT_NAMES) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d8101a0c3e93a76b1c5d36a5862766c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java", "commitBeforeChange": "522e84acc5c220c07378cd67640c99884ac9cc9d", "commitAfterChange": "e5f48a4d4e39a733649e1d7678dd3cc38b1f57e5", "methodNumberBeforeChange": 215, "methodNumberAfterChange": 215, "signatureBeforeChange": " \tpublic void testInitializer()", "signatureAfterChange": " \tpublic void testInitializer()", "diff": ["-\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\tif (ast.apiLevel() >= AST.JLS3) {", "-\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\tif (ast.apiLevel() == AST.JLS2) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e32cb0ad369d8bf12c33cc951eeb553", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 54, "signatureBeforeChange": "\r public int literalIndexForJavaLangStringBufferConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangStringBufferConstructor()", "diff": ["-\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ebf9a35038da7cb4f18a9c0468b6e1e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiSourceFolderAndOutputFolderTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic void test0006() throws JavaModelException", "signatureAfterChange": " \t \tpublic void test0006() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ef5bbc6544b10437453ffce102350d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/PackageBinding.java", "commitBeforeChange": "490cc39003ba5daaddf4fdf25c1c4ad52d071fa8", "commitAfterChange": "63cc2b02a5dc2c73f3b525966213744b7c2edcf0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " private void addNotFoundPackage(char[] simpleName)", "signatureAfterChange": " private void addNotFoundPackage(char[] simpleName)", "diff": ["-\tknownPackages.put(simpleName, environment.theNotFoundPackage);", "+\tknownPackages.put(simpleName, LookupEnvironment.TheNotFoundPackage);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f130d7047296c6a9dfad3fd9bd9d1b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic boolean visit(ArrayReference arrayReference, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(ArrayReference arrayReference, BlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (arrayReference.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (arrayReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f2632aced80795a9f49d99127de79f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/WhileStatement.java", "commitBeforeChange": "a8ebe98c7b687ea450305732efa25afb0944336e", "commitAfterChange": "96a09d96e56ab454cb92b7163871c6f3413e482e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t\t\tmergedInfo.setReachMode(FlowInfo.UNREACHABLE);", "+\t\t\t\t\tmergedInfo.setReachMode(FlowInfo.UNREACHABLE_OR_DEAD);", "-\t\t\t\t\tactionInfo.setReachMode(FlowInfo.UNREACHABLE);", "+\t\t\t\t\tactionInfo.setReachMode(FlowInfo.UNREACHABLE_OR_DEAD);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f26c9052b5be61b0d3c8ad5e35cb125", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelOperation.java", "commitBeforeChange": "6fdaa2b9d78c89a1ed2269f5279c3e02cee4b6cd", "commitAfterChange": "8ec1d344fc5f9b16a04a2a15e36cb4db52cac4eb", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tprotected ArrayList getCurrentOperationStack()", "signatureAfterChange": " \tprotected ArrayList getCurrentOperationStack()", "diff": ["-\t\tArrayList stack = (ArrayList)operationStacks.getCurrent();", "+\t\tArrayList stack = (ArrayList)operationStacks.get();", "-\t\t\toperationStacks.setCurrent(stack);", "+\t\t\toperationStacks.set(stack);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ffb23c4d735c7629863c55aa4b676bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "e67c77fc5e097eac99c8909bb016eff7011eb0ce", "commitAfterChange": "5d677f26e6a9dfca4bbd2cd8a965c43c4f46ed94", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "  protected void initialize(int size)", "signatureAfterChange": "  protected void initialize(int size)", "diff": ["-\tthis.paths = new String[extraRoom];", "+\tthis.relativePaths = new String[extraRoom];", "-\tthis.pathWithSubFolders = new boolean[extraRoom];", "+\tthis.isPkgPath = new boolean[extraRoom];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "601bdde1a1868e7c5e28f0e9fdd5e349", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java", "commitBeforeChange": "876aa677201567f6dd87fe8c0b5a5326661e4029", "commitAfterChange": "955478e6d2220d787f88d27b5ca186d67f088e58", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void setUpSuite() throws Exception", "signatureAfterChange": " \tpublic void setUpSuite() throws Exception", "diff": ["-\t\tif (!setupProject) {", "+\t\tif (!PROJECT_SETUP) {", "-\t\t\tsetupProject = true;", "+\t\t\tPROJECT_SETUP = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "605b86973a417eb5368c77c86763bf6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationFragment.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tfinal List internalGetChildListProperty(ChildListPropertyDescriptor property)", "signatureAfterChange": " \tfinal List internalGetChildListProperty(ChildListPropertyDescriptor property)", "diff": ["-\t\tif (property == EXTRA_DIMENSION_INFOS_PROPERTY) {", "-\t\t\treturn extraDimensionInfos();", "+\t\tif (property == EXTRA_DIMENSIONS2_PROPERTY) {", "+\t\t\treturn extraDimensions();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "606c385821a55f68a6a585acfaaf724b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate void selectLocalDeclaration(AstNode node)", "signatureAfterChange": " \tprivate void selectLocalDeclaration(ASTNode node)", "diff": ["-\tprivate void selectLocalDeclaration(AstNode node) {", "+\tprivate void selectLocalDeclaration(ASTNode node) {", "-\t\tclass Visitor extends AbstractSyntaxTreeVisitorAdapter {", "+\t\tclass Visitor extends ASTVisitor {", "-\t\t\tpublic boolean visit(LocalTypeDeclaration localTypeDeclaration, BlockScope scope) {", "+\t\t\tpublic boolean visit(TypeDeclaration localTypeDeclaration, BlockScope scope) {", "-\t\t\tpublic boolean visit(MemberTypeDeclaration memberTypeDeclaration, ClassScope scope) {", "+\t\t\tpublic boolean visit(TypeDeclaration memberTypeDeclaration, ClassScope scope) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "608e6f2a320aae028ae44ed752354707", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "79620cc5a2ab93e8afb2f50dfb60d3aac3ac52a1", "commitAfterChange": "bb83bb6bb9594ac07e759b1e208acbe513439625", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void checkTaskTag(int commentStart, int commentEnd) throws InvalidInputException", "signatureAfterChange": " public void checkTaskTag(int commentStart, int commentEnd) throws InvalidInputException", "diff": ["-\t\twhile (ScannerHelper.isWhitespace(src[end]) && msgStart <= end)", "+\t\twhile (CharOperation.isWhitespace(src[end]) && msgStart <= end)", "-\t\twhile (ScannerHelper.isWhitespace(src[msgStart]) && msgStart <= end)", "+\t\twhile (CharOperation.isWhitespace(src[msgStart]) && msgStart <= end)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60a3e7370f7555c60d45729a05caba2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/DefaultProblemFactory.java", "commitBeforeChange": "80c078ddcf769ceb84a30bdd1354fc49a196e760", "commitAfterChange": "1e3ac51cb3938f7e9fd57cd2551e590148671265", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public final String getLocalizedMessage(int id, String[] problemArguments)", "signatureAfterChange": "\r public final String getLocalizedMessage(int id, String[] problemArguments)", "diff": ["-\t\tmessageTemplates[(id & ProblemIrritants.IgnoreCategoriesMask)]; \r", "+\t\tmessageTemplates[(id & IProblem.IgnoreCategoriesMask)]; \r", "-\t\t\t\t\t\t+ (id & ProblemIrritants.IgnoreCategoriesMask)\r", "+\t\t\t\t\t\t+ (id & IProblem.IgnoreCategoriesMask)\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60bd48e8590cebbabf4eb05c26b2dba9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": "  public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\t\t\tcodeStream.generateStringAppend(currentScope, null, expression);", "+\t\t\tcodeStream.generateStringConcatenationAppend(currentScope, null, expression);", "-\t\t\tcodeStream.generateStringAppend(currentScope, null, expression);", "+\t\t\tcodeStream.generateStringConcatenationAppend(currentScope, null, expression);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "611226bdba4f09c4a61021be5e72934f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "1e8b2938724cc683c4116dd457826556b875a42f", "commitAfterChange": "eb727711bfbefbe06ad25a796b42d61ffab45eca", "methodNumberBeforeChange": 257, "methodNumberAfterChange": 257, "signatureBeforeChange": " public void unsafeWildcardInvocation(ASTNode location, TypeBinding receiverType, MethodBinding method, TypeBinding[] arguments)", "signatureAfterChange": " public void unsafeWildcardInvocation(ASTNode location, TypeBinding receiverType, MethodBinding method, TypeBinding[] arguments)", "diff": ["-\t\t\tIProblem.UnsafeWildcardConstructorInvocation,", "+\t\t\tIProblem.WildcardConstructorInvocation,", "-\t\t\tIProblem.UnsafeWildcardMethodInvocation,", "+\t\t\tIProblem.WildcardMethodInvocation,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "619791866580a71a8e536824652bbef5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "418f1d61f23f33e0e639dfcb37d7371b9ddc656a", "commitAfterChange": "9fedbc20e6a58ab4ca985b6cd53ab67968737404", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": " \tprivate int retrieveEndOfElementTypeNamePosition(int start, int end)", "signatureAfterChange": " \tprivate int retrieveEndOfElementTypeNamePosition(int start, int end)", "diff": ["-\t\t\twhile ((token = scanner.getNextToken()) != Scanner.TokenNameEOF) {", "+\t\t\twhile ((token = scanner.getNextToken()) != ITerminalSymbols.TokenNameEOF) {", "-\t\t\t\t\tcase Scanner.TokenNameIdentifier:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameIdentifier:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61a6c435c41ab1074993c4ed1865582e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t\tpublic void acceptProblem(IProblem problem, char[] fragmentSource, int fragmentKind)", "signatureAfterChange": " \t\tpublic void acceptProblem(CategorizedProblem problem, char[] fragmentSource, int fragmentKind)", "diff": ["-\t\tpublic void acceptProblem(IProblem problem, char[] fragmentSource, int fragmentKind) {", "-\t\t\tthis.acceptResult(new EvaluationResult(fragmentSource, fragmentKind, new IProblem[]{problem}));", "+\t\tpublic void acceptProblem(CategorizedProblem problem, char[] fragmentSource, int fragmentKind) {", "+\t\t\tthis.acceptResult(new EvaluationResult(fragmentSource, fragmentKind, new CategorizedProblem[]{problem}));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61e4a51c675313cad5f016e4f8ce8545", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": "\r public int literalIndexForJavaLangErrorConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangErrorConstructor()", "diff": ["-\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "625e5500f5b85e06ed6414aa7880b6a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 229, "methodNumberAfterChange": 229, "signatureBeforeChange": " public void javadocMissingReturnTag(int sourceStart, int sourceEnd, int modifiers)", "signatureAfterChange": " public void javadocMissingReturnTag(int sourceStart, int sourceEnd, int modifiers)", "diff": ["-\tboolean overriding = (modifiers & (CompilerModifiers.AccImplementing|CompilerModifiers.AccOverriding)) != 0;", "+\tboolean overriding = (modifiers & (ExtraCompilerModifiers.AccImplementing|ExtraCompilerModifiers.AccOverriding)) != 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62bb4e28644d582dcdff55b77c6b5a93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/Factory.java", "commitBeforeChange": "ea035aff9493ec8381c8d6bd9548845ad9f81e22", "commitAfterChange": "3c8b95412c50bb73a8372fbf9db9df68231cc311", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic static AnnotationBinding [] getOnlyUnpackedAnnotationBindings(AnnotationBinding [] annotations)", "signatureAfterChange": " \tpublic static AnnotationBinding [] getOnlyUnpackedAnnotationBindings(AnnotationBinding [] annotations)", "diff": ["-\t\t\tif (containeeType == null || !containeeType.isAnnotationType() || !containeeType.isRepeatableAnnotation())", "+\t\t\tif (containeeType == null || !containeeType.isAnnotationType() || !containeeType.isRepeatableAnnotationType())", "-\t\t\tif (containeeType.resolveContainerAnnotation() != annotationType)", "+\t\t\tif (containeeType.containerAnnotationType() != annotationType)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62bc2cb19b1cee99ef703abbc950f409", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchySerializationTests.java", "commitBeforeChange": "af37040eef45725f099f6a0142d7c216f59182a5", "commitAfterChange": "ff301078422c2e67aec7a979ef2ae20e08f488f8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " private static void compareTypeHierarchy(String focus, TypeHierarchy stored, TypeHierarchy loaded)", "signatureAfterChange": " private static void compareTypeHierarchy(String focus, TypeHierarchy stored, TypeHierarchy loaded)", "diff": ["-\tcompare(\"[\"+focus+\"] all missing types are not the same\", rootInterfaces1, rootInterfaces2);", "+\tcompare(\"[\"+focus+\"] all missing types are not the same\", missingTypes1, missingTypes2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6330f57bf38099becc1751e3dd59ba4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "60e84a84d2c785be17a379ead199176b00163ca2", "commitAfterChange": "dd81d5614e9912f7c701e3f5c6100178a60401f0", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t\t \tpublic void manageSyntheticReadAccessIfNecessary( \t\tBlockScope currentScope, \t\tFieldBinding fieldBinding, \t\tTypeBinding lastReceiverType, \t\tint index)", "signatureAfterChange": " \t\t \tpublic void manageSyntheticReadAccessIfNecessary( \t\tBlockScope currentScope, \t\tFieldBinding fieldBinding, \t\tTypeBinding lastReceiverType, \t\tint index)", "diff": ["-\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type", "+\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\t\t&& ((currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4", "+\t\t\t&& ((currentScope.environment().options.targetJDK >= CompilerOptions.JDK1_2"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "639ff53fc07f80491ca6e6982558749a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39efbf0f3eb32e59d7a65e03590993d59dc6817b", "commitAfterChange": "84bab690fce0d07b753bfc05c56b8e56d168a1a6", "methodNumberBeforeChange": 142, "methodNumberAfterChange": 142, "signatureBeforeChange": " \tprotected void setModifiers(SingleVariableDeclaration variableDecl, Argument argument)", "signatureAfterChange": " \tprotected void setModifiers(SingleVariableDeclaration variableDecl, Argument argument)", "diff": ["-\t\t\tcase AST.JLS2 :", "-\t\t\t\tvariableDecl.setModifiers(argument.modifiers & CompilerModifiers.AccJustFlag);", "+\t\t\tcase AST.JLS2_INTERNAL :", "+\t\t\t\tvariableDecl.internalSetModifiers(argument.modifiers & CompilerModifiers.AccJustFlag);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63a6b24601335912f05ec982d976f17b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocBugsCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void testBug117183a() throws JavaModelException", "signatureAfterChange": " public void testBug117183a() throws JavaModelException", "diff": ["-\t\t\"A_STATIC_FIELD[JAVADOC_FIELD_REF]{{@link Reference#A_STATIC_FIELD}, Ljavadoc.bugs.Reference;, I, A_STATIC_FIELD, null, \"+this.positions+R_DICNRIT+\"}\\n\" + ", "-\t\t\"A_STATIC_FIELD[JAVADOC_VALUE_REF]{{@value Reference#A_STATIC_FIELD}, Ljavadoc.bugs.Reference;, I, A_STATIC_FIELD, null, \"+this.positions+R_DICNRIT+\"}\"", "+\t\t\"A_STATIC_FIELD[JAVADOC_FIELD_REF]{{@link Reference#A_STATIC_FIELD}, Ljavadoc.bugs.Reference;, I, A_STATIC_FIELD, null, \"+this.positions+R_DRICNRIT+\"}\\n\" + ", "+\t\t\"A_STATIC_FIELD[JAVADOC_VALUE_REF]{{@value Reference#A_STATIC_FIELD}, Ljavadoc.bugs.Reference;, I, A_STATIC_FIELD, null, \"+this.positions+R_DRICNRIT+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64296a05a5b0e7e719bd8888f171db14", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39efbf0f3eb32e59d7a65e03590993d59dc6817b", "commitAfterChange": "84bab690fce0d07b753bfc05c56b8e56d168a1a6", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \t \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall statement)", "signatureAfterChange": " \t \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall statement)", "diff": ["-\t\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\tcase AST.JLS2_INTERNAL :", "-\t\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\tcase AST.JLS2_INTERNAL :"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6438a556cfbabaaaa596f547af286d7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/ClasspathDirectory.java", "commitBeforeChange": "bd66f33da6dcc33c67153a2129d6fec0fda88ac8", "commitAfterChange": "dc4de554479d1bd7115bbb51a83f104f76dfaa9e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \r ClasspathDirectory(String binaryPath)", "signatureAfterChange": "\r \r ClasspathDirectory(String binaryPath)", "diff": ["-\tthis.missingPackages = new LookupTable(11);\r", "-\tthis.directoryCache = new LookupTable(11);\r", "+\tthis.missingPackages = new SimpleLookupTable(11);\r", "+\tthis.directoryCache = new SimpleLookupTable(11);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64422b3a80f0244f7fcb898db42d189c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java", "commitBeforeChange": "ee4aaa82998d38e6753ee8cc828566dd18d4910f", "commitAfterChange": "24c9e84b2ec4fea87b1bf2f444e5d541a0e3f479", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t\tpublic Object set(int index, Object element)", "signatureAfterChange": " \t\tpublic Object set(int index, Object element)", "diff": ["-\t\t\tif ((ASTNode.this.flags & PROTECT) != 0) {", "+\t\t\tif ((ASTNode.this.typeAndFlags & PROTECT) != 0) {", "-\t\t\tif ((oldChild.flags & PROTECT) != 0) {", "+\t\t\tif ((oldChild.typeAndFlags & PROTECT) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64a4c735806d1054f346351366069dda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "fe905e29a608f61f2afe181f4c1e4e27bb2b95dc", "commitAfterChange": "53a7cfa9bf2a3a1ade921d716dbdc58a4bfc35d4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tIType findSecondaryType(String typeName, IPackageFragment pkg, boolean partialMatch, final int acceptFlags)", "signatureAfterChange": " \tIType findSecondaryType(String typeName, IPackageFragment pkg, boolean partialMatch, final int acceptFlags)", "diff": ["-\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isJavaFileName(pathname)) {", "+\t\t\t\t\tif (org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(pathname)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "652b556cb67d9545dee7ff8ef62e3125", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/WhileStatement.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tbreakLabel = new Label();", "-\t\tcontinueLabel = new Label(); ", "+\t\tbreakLabel = new BranchLabel();", "+\t\tcontinueLabel = new BranchLabel(); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65bb59d9556dc3ed688a95325f3eb96d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "06e8c1940b7fce6b86315eb81900d27eb1279bce", "commitAfterChange": "91510ee1ea5206403f95c9b316aaa14af70c8d8e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic boolean match(ClassInstanceCreation node, Object other)", "signatureAfterChange": " \tpublic boolean match(ClassInstanceCreation node, Object other)", "diff": ["-\t\t\tif (!safeSubtreeListMatch(node.typeParameters(), o.typeParameters())) {", "+\t\t\tif (!safeSubtreeListMatch(node.typeArguments(), o.typeArguments())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "660d3e9404675a843f6cb34cf99abecd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/VerifyTests.java", "commitBeforeChange": "4b36d8d902157ef078af37f3d78b4138152d8889", "commitAfterChange": "9ef1e97f6b56081e8537310fc409f77c2ce56944", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprotected boolean isExcluded(String name)", "signatureAfterChange": " \tprotected boolean isExcluded(String name)", "diff": ["-\t\tfor (int i= 0; i < fExcluded.length; i++) {", "-\t\t\tif (name.startsWith(fExcluded[i])) {", "+\t\tfor (int i= 0; i < excluded.length; i++) {", "+\t\t\tif (name.startsWith(excluded[i])) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66314cc8b95325d0ffd327b759d5f266", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "0927ffa25a2592bfca0a67c9cc9e0e69775118de", "commitAfterChange": "7b934c773095ee4cd83d9fe1d55bbb70d8656cbb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["-\t\t\t\t\t&& this.binding.declaringClass.id != T_Object) // no change for Object fields (if there was any)", "+\t\t\t\t\t&& this.binding.declaringClass.id != T_JavaLangObject) // no change for Object fields (if there was any)", "-\t\t\t\t&& this.binding.declaringClass.id != T_Object) //no change for Object fields (in case there was)", "+\t\t\t\t&& this.binding.declaringClass.id != T_JavaLangObject) //no change for Object fields (in case there was)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "671c3a889205c256dc3d45c4f54b54ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/OutputFolderTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void testProjectWith2SrcAsBin() throws JavaModelException", "signatureAfterChange": "  \tpublic void testProjectWith2SrcAsBin() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6774ffc8d111de3676273d5de61575fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "816264402111966caf3ec35b2e4d3edb53f19d43", "commitAfterChange": "44c1c470b0c8ef16ec270452a9bc7b0a267cf8d1", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic static CompilationUnitDeclaration resolve( \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\t\tIJavaProject javaProject, \t\t\tList classpaths, \t\t\tNodeSearcher nodeSearcher, \t\t\tMap options, \t\t\tWorkingCopyOwner owner, \t\t\tint flags, \t\t\tIProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic static CompilationUnitDeclaration resolve( \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\t\tIJavaProject javaProject, \t\t\tList classpaths, \t\t\tNodeSearcher nodeSearcher, \t\t\tMap options, \t\t\tWorkingCopyOwner owner, \t\t\tint flags, \t\t\tIProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\tINameEnviromentWithProgress environment = null;", "+\t\tINameEnvironmentWithProgress environment = null;", "-\t\t\t\tenvironment = new NameEnviromentWithProgress(allEntries, null, monitor);", "+\t\t\t\tenvironment = new NameEnvironmentWithProgress(allEntries, null, monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "678f52fec28e92871341707b47b184c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public int literalIndexForJavaLangDoubleTYPE()", "signatureAfterChange": " public int literalIndexForJavaLangDoubleTYPE()", "diff": ["-\tif ((index = wellKnownFields[TYPE_DOUBLE_FIELD]) == 0) {", "+\tif ((index = wellKnownFields[JAVA_LANG_DOUBLE_TYPE_FIELD]) == 0) {", "-\t\tindex = wellKnownFields[TYPE_DOUBLE_FIELD] = currentIndex++;", "+\t\tindex = wellKnownFields[JAVA_LANG_DOUBLE_TYPE_FIELD] = currentIndex++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6833e726c0d7b6ecdb9832c4acb477f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTypeCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  public void test023() throws JavaModelException", "signatureAfterChange": "  public void test023() throws JavaModelException", "diff": ["-\t\t\"java.lang[PACKAGE_REF]{java.lang, java.lang, null, null, null, \"+this.positions+R_DICQNR+\"}\\n\" + ", "-\t\t\"java.io[PACKAGE_REF]{java.io, java.io, null, null, null, \"+this.positions+R_DICQNR+\"}\"", "+\t\t\"java.lang[PACKAGE_REF]{java.lang, java.lang, null, null, null, \"+this.positions+R_DRICQNR+\"}\\n\" + ", "+\t\t\"java.io[PACKAGE_REF]{java.io, java.io, null, null, null, \"+this.positions+R_DRICQNR+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "686a49a299bcc271029193ad7854a6c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 92, "signatureBeforeChange": " \tpublic boolean visit( \t\tQualifiedNameReference qualifiedNameReference, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tQualifiedNameReference qualifiedNameReference, \t\tBlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (qualifiedNameReference.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (qualifiedNameReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68a87c0478459aabe27b6c8f3a3cf2cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "7f0c1689dc377b26f3ac2b4c2b21446a43dd3383", "commitAfterChange": "f7a77c5e8210599982f60934db59bb901b30cb8c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \t \tpublic static Set<AnnotationProcessorFactory> runAPTDuringBuild( \t\t\tICompilationParticipantResult[] filesWithAnnotations,  \t\t\tICompilationParticipantResult[] filesWithoutAnnotations, \t\t\tAptProject aptProject,  \t\t\tMap<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tSet<AnnotationProcessorFactory> dispatchedBatchFactories, \t\t\tboolean isFullBuild)", "signatureAfterChange": " \t \t \tpublic static Set<AnnotationProcessorFactory> runAPTDuringBuild( \t\t\tBuildContext[] filesWithAnnotations,  \t\t\tBuildContext[] filesWithoutAnnotations, \t\t\tAptProject aptProject,  \t\t\tMap<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tSet<AnnotationProcessorFactory> dispatchedBatchFactories, \t\t\tboolean isFullBuild)", "diff": ["-\t\t\tICompilationParticipantResult[] filesWithAnnotations, ", "-\t\t\tICompilationParticipantResult[] filesWithoutAnnotations,", "+\t\t\tBuildContext[] filesWithAnnotations, ", "+\t\t\tBuildContext[] filesWithoutAnnotations,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68de826b67e751a648b2cce0b5ee92f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "0927ffa25a2592bfca0a67c9cc9e0e69775118de", "commitAfterChange": "7b934c773095ee4cd83d9fe1d55bbb70d8656cbb", "methodNumberBeforeChange": 180, "methodNumberAfterChange": 180, "signatureBeforeChange": " public void invokeStringConcatenationAppendForType(int typeID)", "signatureAfterChange": " public void invokeStringConcatenationAppendForType(int typeID)", "diff": ["-\t\tcase T_Object :", "+\t\tcase T_JavaLangObject :", "-\t\tcase T_String :", "+\t\tcase T_JavaLangString :"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6950994a86b578a24c188517ee1594ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiSourceFolderAndOutputFolderTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic void test0005() throws JavaModelException", "signatureAfterChange": " \t \tpublic void test0005() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "699cd225f95db4c2ea74348ba9fa1ddd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": "\r public int literalIndexForJavaLangErrorConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangErrorConstructor()", "diff": ["-\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69b2bf2a8839187f035d119416e11191", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": "  public void test133() throws JavaModelException", "signatureAfterChange": "  public void test133() throws JavaModelException", "diff": ["-\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(int, float, Class), Ljavadoc.methods.tags.BasicTestMethods;, (IFLjava.lang.Class;)V, BasicTestMethods, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, BasicTestMethods, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(int, float, Class), Ljavadoc.methods.tags.BasicTestMethods;, (IFLjava.lang.Class;)V, BasicTestMethods, (xxx, real, clazz), \"+this.positions+R_DRINR+\"}\\n\" + ", "+\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, BasicTestMethods, null, \"+this.positions+R_DRINR+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a16cd0f56ca11d93bd3a6f4c8b7c0ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/Java8ElementProcessor.java", "commitBeforeChange": "73197a47274e75e8fe1581fdac3a086fb2ddf471", "commitAfterChange": "340440fc2f9b9eb03b89c385f562976def2c6c0e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic void testTypeAnnotations11()", "signatureAfterChange": "  \tpublic void testTypeAnnotations11()", "diff": ["-\t\tverifyTypeAnnotations(xy, new String[]{});", "-\t\tverifyTypeAnnotations(xy.asType(), new String[]{\"@Type(value=xy)\"});", "+\t\tverifyAnnotations(xy, new String[]{});", "+\t\tverifyAnnotations(xy.asType(), new String[]{\"@Type(value=xy)\"});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a31cf5161f6d2be43c05efe785112a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "6fdaa2b9d78c89a1ed2269f5279c3e02cee4b6cd", "commitAfterChange": "8ec1d344fc5f9b16a04a2a15e36cb4db52cac4eb", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void flushZipFiles()", "signatureAfterChange": " \tpublic void flushZipFiles()", "diff": ["-\t\tHashMap map = (HashMap)this.zipFiles.getCurrent();", "+\t\tHashMap map = (HashMap)this.zipFiles.get();", "-\t\tthis.zipFiles.setCurrent(null);", "+\t\tthis.zipFiles.set(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a38ecc9e51864e68185717d853f7e99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "  public void test072() throws JavaModelException", "signatureAfterChange": "  public void test072() throws JavaModelException", "diff": ["-\t\t\"BasicTestTextIns[METHOD_REF<CONSTRUCTOR>]{BasicTestTextIns(int, float, Class), Ljavadoc.text.BasicTestTextIns;, (IFLjava.lang.Class;)V, BasicTestTextIns, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"BasicTestTextIns[METHOD_REF<CONSTRUCTOR>]{BasicTestTextIns(), Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"BasicTestTextIns[METHOD_REF<CONSTRUCTOR>]{BasicTestTextIns(int, float, Class), Ljavadoc.text.BasicTestTextIns;, (IFLjava.lang.Class;)V, BasicTestTextIns, (xxx, real, clazz), \"+this.positions+R_DRINR+\"}\\n\" + ", "+\t\t\"BasicTestTextIns[METHOD_REF<CONSTRUCTOR>]{BasicTestTextIns(), Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+R_DRINR+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a9d06a43c5f69d667f100f56a8a33bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/VerifyTests.java", "commitBeforeChange": "4b36d8d902157ef078af37f3d78b4138152d8889", "commitAfterChange": "9ef1e97f6b56081e8537310fc409f77c2ce56944", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic VerifyClassLoader()", "signatureAfterChange": " \tpublic VerifyClassLoader()", "diff": ["-\t\tfPathItems= new String[i];", "+\t\tpathItems= new String[i];", "-\t\t\tfPathItems[i++]= st.nextToken();", "+\t\t\tpathItems[i++]= st.nextToken();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ac8689ddf7d8f6c2505345ff920220a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "5c72ddaa5e79d3bcf534f5780ca88a7a97636e7a", "commitAfterChange": "488a4d6e7cacdc0e333c16a8fdbbfb759cc631cd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  protected void createProblemFor(IResource resource, IMember javaElement, String message, String problemSeverity)", "signatureAfterChange": "  protected void createProblemFor(IResource resource, IMember javaElement, String message, String problemSeverity)", "diff": ["-\t\t\tnew String[] {IMarker.MESSAGE, IMarker.SEVERITY, IMarker.CHAR_START, IMarker.CHAR_END, IMarker.GENERATED_BY},", "-\t\t\tnew Object[] {message, new Integer(severity), new Integer(start), new Integer(end), JavaBuilder.GENERATED_BY});", "+\t\t\tnew String[] {IMarker.MESSAGE, IMarker.SEVERITY, IMarker.CHAR_START, IMarker.CHAR_END, IMarker.SOURCE_ID},", "+\t\t\tnew Object[] {message, new Integer(severity), new Integer(start), new Integer(end), JavaBuilder.SOURCE_ID});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ae982c3c5d6b19ad5db42d81ff982fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "4b36d8d902157ef078af37f3d78b4138152d8889", "commitAfterChange": "9ef1e97f6b56081e8537310fc409f77c2ce56944", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic void removeFile(IPath filePath)", "signatureAfterChange": " \tpublic void removeFile(IPath filePath)", "diff": ["-\t\tcheckAssertion(\"a workspace must be open\", fIsOpen); //$NON-NLS-1$", "+\t\tcheckAssertion(\"a workspace must be open\", isOpen); //$NON-NLS-1$", "-\t\t\tfWorkspace.getRoot().getFile(filePath).delete(true, null);", "+\t\t\tworkspace.getRoot().getFile(filePath).delete(true, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b33e076242a1665d3818357731e2a00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "8b532c89fe75cdcd516dedb1f57b44f4fab79fb0", "commitAfterChange": "14eef462fbaf0bab3c247296c2a42a1fdc4f58a6", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \t\t\t \tpublic PrefixExpression convert(UnaryExpression expression)", "signatureAfterChange": " \t\t\t \tpublic PrefixExpression convert(UnaryExpression expression)", "diff": ["-\t\tswitch ((expression.bits & UnaryExpression.OperatorMASK) >> UnaryExpression.OperatorSHIFT) {", "+\t\tswitch ((expression.bits & AstNode.OperatorMASK) >> AstNode.OperatorSHIFT) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bbc7342c13123f1e6f52f97b82ca678", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ParameterizedType.java", "commitBeforeChange": "c6d868d8783a57da635a4ee823bfa99a77283712", "commitAfterChange": "eb94d4f8322ccc35580c2be98b06636564603ba3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tint treeSize()", "signatureAfterChange": " \tint treeSize()", "diff": ["-\t\t\t+ (this.typeName == null ? 0 : getName().treeSize())", "+\t\t\t+ (this.type == null ? 0 : getType().treeSize())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bd4dfd4a945f10c2c4abd478605ab8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/jdom/DOMType.java", "commitBeforeChange": "ec3a4c33f32cf58050110cfdf8e4a7a59380d854", "commitAfterChange": "de600e80bc6b398dc98185397349cc8cf2c9ff79", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r void normalize(ILineStartFinder finder)", "signatureAfterChange": "\r void normalize(ILineStartFinder finder)", "diff": ["-\tscanner.setSourceBuffer(fDocument);\r", "+\tscanner.setSource(fDocument);\r", "-\t\tscanner.setSourceBuffer(fDocument);\r", "+\t\tscanner.setSource(fDocument);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cc2d46e0e733afb5fba9cf417a62121", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/IndexSummary.java", "commitBeforeChange": "a7e6b3d174d33a8a3b8d03f466c6cb3381f5f0c9", "commitAfterChange": "2e2e66f7f68b994d0931afecfd3c1e559acd59d5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \tpublic int getBlockNumForWord(char[] word)", "signatureAfterChange": "\r \tpublic int getBlockNumForWord(char[] word)", "diff": ["-\t\t\tFirstWordInBlock entry= (FirstWordInBlock) firstWordsInBlocks.elementAt(mid);\r", "+\t\t\tFirstWordInBlock entry= (FirstWordInBlock) firstWordsInBlocks.get(mid);\r", "-\t\tFirstWordInBlock entry= (FirstWordInBlock) firstWordsInBlocks.elementAt(max);\r", "+\t\tFirstWordInBlock entry= (FirstWordInBlock) firstWordsInBlocks.get(max);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d0fe30cdb2f749440e7ccdd2c76b156", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "7aac6f03ecf70666410b0e689c91dafd6d67757a", "commitAfterChange": "465d091146b1d6997709777ea444048487da1d8d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t\t \tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": " \t\t \tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "diff": ["-\t\tif (methodDeclaration instanceof org.eclipse.jdt.internal.compiler.ast.AnnotationTypeMemberDeclaration) {", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.AnnotationTypeMemberDeclaration) methodDeclaration);", "+\t\tif (methodDeclaration instanceof org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration) methodDeclaration);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d1fe236f81f6fc45c3f57acbdd309b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "9fb326cf9292ef697cc0b0a821a4d5b0ffa7d58e", "commitAfterChange": "0a632290335585dcfcbc973314f95aa73bf77586", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r \r \tprivate void findIntefacesMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tReferenceBinding[] itsInterfaces,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tboolean isCompletingDeclaration,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope,\r \t\tboolean implicitCall)", "signatureAfterChange": "\r \r \tprivate void findIntefacesMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tReferenceBinding[] itsInterfaces,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tboolean isCompletingDeclaration,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope,\r \t\tboolean implicitCall)", "diff": ["-\t\t\t\t\t\t\t\tcurrentType.methods(),\r", "+\t\t\t\t\t\t\t\tcurrentType.availableMethods(),\r", "-\t\t\t\t\t\t\t\tcurrentType.methods(),\r", "+\t\t\t\t\t\t\t\tcurrentType.availableMethods(),\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d57853113b3cf9b04cab7841a057e80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowInfo.java", "commitBeforeChange": "a8ebe98c7b687ea450305732efa25afb0944336e", "commitAfterChange": "96a09d96e56ab454cb92b7163871c6f3413e482e", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public static UnconditionalFlowInfo mergedOptimizedBranchesIfElse( \t\tFlowInfo initsWhenTrue, boolean isOptimizedTrue, \t\tFlowInfo initsWhenFalse, boolean isOptimizedFalse, \t\tboolean allowFakeDeadBranch, FlowInfo flowInfo, IfStatement ifStatement)", "signatureAfterChange": " public static UnconditionalFlowInfo mergedOptimizedBranchesIfElse( \t\tFlowInfo initsWhenTrue, boolean isOptimizedTrue, \t\tFlowInfo initsWhenFalse, boolean isOptimizedFalse, \t\tboolean allowFakeDeadBranch, FlowInfo flowInfo, IfStatement ifStatement)", "diff": ["-\t\t\tmergedInfo = initsWhenFalse.setReachMode(FlowInfo.UNREACHABLE).", "+\t\t\tmergedInfo = initsWhenFalse.setReachMode(FlowInfo.UNREACHABLE_OR_DEAD).", "-\t\t\tmergedInfo = initsWhenTrue.setReachMode(FlowInfo.UNREACHABLE).", "+\t\t\tmergedInfo = initsWhenTrue.setReachMode(FlowInfo.UNREACHABLE_OR_DEAD)."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d5bcbf00cba0c9d031300f7bea2e489", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "df7db86dfdaff61d3ebc9328b44d180f263988fe", "commitAfterChange": "d781dcbe8a593d5ba6dc04230bf23771b905f7bd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private final void checkNonNullTag(int commentStart, int commentEnd)", "signatureAfterChange": " private final void checkNonNullTag(int commentStart, int commentEnd)", "diff": ["-\t\t\t\telse if (!CharOperation.isWhitespace(currentChar)) {", "+\t\t\t\telse if (!ScannerHelper.isWhitespace(currentChar)) {", "-\t\t\t\tif (currentChar != '*' && !CharOperation.isWhitespace(currentChar)) {", "+\t\t\t\tif (currentChar != '*' && !ScannerHelper.isWhitespace(currentChar)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d63868fc4a6cf198df23196ce42ec8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "580481ae11bd0f856242b0cf44caa66107bf550d", "commitAfterChange": "d08e87c35b21123010227cf2729df51d820e4d50", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  private TypeAnnotationWalker getTypeAnnotationWalker(IBinaryTypeAnnotation[] annotations)", "signatureAfterChange": "  private ITypeAnnotationWalker getTypeAnnotationWalker(IBinaryTypeAnnotation[] annotations)", "diff": ["-private TypeAnnotationWalker getTypeAnnotationWalker(IBinaryTypeAnnotation[] annotations) {", "+private ITypeAnnotationWalker getTypeAnnotationWalker(IBinaryTypeAnnotation[] annotations) {", "-\t\treturn TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER;", "+\t\treturn ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d656cf3326e5ac085ea6b7b3a482939", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ListRewrite.java", "commitBeforeChange": "1a4eed4ffa5088e3ebe92ac8897cc3720d983860", "commitAfterChange": "f1f25c6cdf998a1ec590849c8e88206d0ec0f3ca", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " ListRewrite(ASTRewrite rewriter, ASTNode parent, StructuralPropertyDescriptor childProperty)", "signatureAfterChange": " ListRewrite(ASTRewrite rewriter, ASTNode parent, ChildListPropertyDescriptor childProperty)", "diff": ["-\t/* package*/ ListRewrite(ASTRewrite rewriter, ASTNode parent, StructuralPropertyDescriptor childProperty) {", "+\t/* package*/ ListRewrite(ASTRewrite rewriter, ASTNode parent, ChildListPropertyDescriptor childProperty) {", "-\t\tthis.childProperty= childProperty;", "+\t\tthis.childListProperty= childProperty;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d88258b077e29ef2bbb5f623ea08093", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "4b36d8d902157ef078af37f3d78b4138152d8889", "commitAfterChange": "9ef1e97f6b56081e8537310fc409f77c2ce56944", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic void renameCU(IPath packagePath, String cuName, String newName)", "signatureAfterChange": " \tpublic void renameCU(IPath packagePath, String cuName, String newName)", "diff": ["-\t\tcheckAssertion(\"a workspace must be open\", fIsOpen); //$NON-NLS-1$", "-\t\tIFolder packageFolder = fWorkspace.getRoot().getFolder(packagePath);", "+\t\tcheckAssertion(\"a workspace must be open\", isOpen); //$NON-NLS-1$", "+\t\tIFolder packageFolder = workspace.getRoot().getFolder(packagePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d8c388d2d1fac41ebdf36ff3d9b9f63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": "  public void test134() throws JavaModelException", "signatureAfterChange": "  public void test134() throws JavaModelException", "diff": ["-\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(int, float, Class), Ljavadoc.methods.tags.BasicTestMethods;, (IFLjava.lang.Class;)V, BasicTestMethods, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, BasicTestMethods, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(int, float, Class), Ljavadoc.methods.tags.BasicTestMethods;, (IFLjava.lang.Class;)V, BasicTestMethods, (xxx, real, clazz), \"+this.positions+R_DRINR+\"}\\n\" + ", "+\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, BasicTestMethods, null, \"+this.positions+R_DRINR+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6daa2bd7735bcd7e97abcaa94561fa9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 203, "methodNumberAfterChange": 203, "signatureBeforeChange": " protected NameReference getUnspecifiedReferenceOptimized()", "signatureAfterChange": " protected NameReference getUnspecifiedReferenceOptimized()", "diff": ["-\t\tref.bits &= ~AstNode.RestrictiveFlagMASK;", "+\t\tref.bits &= ~ASTNode.RestrictiveFlagMASK;", "-\tref.bits &= ~AstNode.RestrictiveFlagMASK;", "+\tref.bits &= ~ASTNode.RestrictiveFlagMASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6dc8a158f99bd7a96a5a9556c19bb74d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/Constant.java", "commitBeforeChange": "0927ffa25a2592bfca0a67c9cc9e0e69775118de", "commitAfterChange": "7b934c773095ee4cd83d9fe1d55bbb70d8656cbb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic final Constant castTo(int conversionToTargetType)", "signatureAfterChange": "  \tpublic final Constant castTo(int conversionToTargetType)", "diff": ["-\t\t    case (T_String<<4)+T_String  \t : return this;   ", "+\t\t    case (T_JavaLangString<<4)+T_JavaLangString  \t : return this;   "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6df5c407437bdba79ade3ff04469f00a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TestAll.java", "commitBeforeChange": "7ba9ff29fe6b05ec0a2f58eaa1f5d3e68bb11101", "commitAfterChange": "427a01e331e57852efc472cca3a8360bd121fda9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": " public static Test suite()", "diff": ["-\t\ttests_1_8.add(ClassFileReaderTest_1_8.class);", "+\t\t// TODO(stephan) temporary workaround, several tests currently fail at 1.8:", "+\t\ttests_1_8.remove(NullAnnotationTest.class);", "+\t\t//"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e5ec93216c1637c13611543f6eb39c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public int literalIndexForJavaLangClassDesiredAssertionStatus()", "signatureAfterChange": " public int literalIndexForJavaLangClassDesiredAssertionStatus()", "diff": ["-\tif ((index = wellKnownMethods[DESIREDASSERTIONSTATUS_CLASS_METHOD]) == 0) {", "+\tif ((index = wellKnownMethods[CLASS_DESIREDASSERTIONSTATUS_METHOD]) == 0) {", "-\t\tindex = wellKnownMethods[DESIREDASSERTIONSTATUS_CLASS_METHOD] = currentIndex++;", "+\t\tindex = wellKnownMethods[CLASS_DESIREDASSERTIONSTATUS_METHOD] = currentIndex++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ea94734977a4cbd42e5fd6607ec440f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetParser.java", "commitBeforeChange": "80c078ddcf769ceb84a30bdd1354fc49a196e760", "commitAfterChange": "1e3ac51cb3938f7e9fd57cd2551e590148671265", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "\r protected CompilationUnitDeclaration endParse(int act)", "signatureAfterChange": "\r protected CompilationUnitDeclaration endParse(int act)", "diff": ["-\t\t\t\tif (unitResult.problems[i].getID() == ProblemIrritants.UnmatchedBracket) continue;\r", "+\t\t\t\tif (unitResult.problems[i].getID() == IProblem.UnmatchedBracket) continue;\r", "-\t\t\t\tif (unitResult.problems[i].getID() == ProblemIrritants.UnmatchedBracket) continue;\r", "+\t\t\t\tif (unitResult.problems[i].getID() == IProblem.UnmatchedBracket) continue;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f06a7cd06b9edc51d1bf3a789dfa144", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tbreakLabel = new Label();", "-\t\tcontinueLabel = new Label();", "+\t\tbreakLabel = new BranchLabel();", "+\t\tcontinueLabel = new BranchLabel();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f39f5d9886799f208f33379447a796a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 375, "methodNumberAfterChange": 375, "signatureBeforeChange": "  public void parse( \tFieldDeclaration field,  \tTypeDeclaration type,  \tCompilationUnitDeclaration unit, \tchar[] initializationSource)", "signatureAfterChange": "  public void parse( \tFieldDeclaration field,  \tTypeDeclaration type,  \tCompilationUnitDeclaration unit, \tchar[] initializationSource)", "diff": ["-\tif ((type.bits & ASTNode.HasLocalTypeMASK) != 0) {", "-\t\tfield.bits |= ASTNode.HasLocalTypeMASK;", "+\tif ((type.bits & ASTNode.HasLocalType) != 0) {", "+\t\tfield.bits |= ASTNode.HasLocalType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f4f6a3b29db35ac632e0ded4b6a7ebc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "402653abbf6df07a839776c5127b35c1c823b730", "commitAfterChange": "5dab0398c0d6854f764e312cc3cc66813d6d2f2e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic static IStatus validatePackageName(String name)", "signatureAfterChange": " \tpublic static IStatus validatePackageName(String name)", "diff": ["-\t\tif (Character.isWhitespace(name.charAt(0)) || Character.isWhitespace(name.charAt(name.length() - 1))) {", "+\t\tif (Scanner.isWhitespace(name.charAt(0)) || Scanner.isWhitespace(name.charAt(name.length() - 1))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f87db1e1502a70de7ff5ed2c7913d66", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "38c895fd64a92567249832dd2a8d427fc1bcacc2", "commitAfterChange": "47b4b871bf6d388352229c39f2d0357c2b36e470", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": " \tpublic boolean visit( \t\tQualifiedAllocationExpression qualifiedAllocationExpression, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tQualifiedAllocationExpression qualifiedAllocationExpression, \t\tBlockScope scope)", "diff": ["-\t\t\tif (this.preferences.insert_space_within_message_send) {", "+\t\t\tif (this.preferences.insert_space_after_opening_paren_in_message_send) {", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_within_message_send); ", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_message_send); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fbffd9432bd65d5b654b6b5957bf6fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "bc892c746726fd053703fa54d2af3fc252846de3", "commitAfterChange": "9311f01535700952280c267b61bac8e5f05b9f55", "methodNumberBeforeChange": 260, "methodNumberAfterChange": 258, "signatureBeforeChange": " protected void consumeRule(int act)", "signatureAfterChange": " protected void consumeRule(int act)", "diff": ["-\t\t    consumeEmptyClassMemberDeclaration();  ", "+\t\t    consumeEmptyTypeDeclaration();  ", "-\t\t    consumeEmptyInterfaceMemberDeclaration();  ", "+\t\t    consumeEmptyTypeDeclaration();  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7000a203bf2c1ffb1bebea6a8658e26e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IfStatement.java", "commitBeforeChange": "d7e7bb059880a6c87ea3290708d2d0a9f9e7ebe8", "commitAfterChange": "a415220ad0bdc743d286b40ccc481ededfe8132e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\t\t\t\t|| (((cst = condition.conditionalConstant()) != NotAConstant)", "+\t\t\t\t\t|| (((cst = condition.optimizedBooleanConstant()) != NotAConstant)", "-\t\t\t\t\t|| (((cst = condition.conditionalConstant()) != NotAConstant)", "+\t\t\t\t\t|| (((cst = condition.optimizedBooleanConstant()) != NotAConstant)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70c9073ff37821fb7f6d687c05334d3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/UserLibraryManager.java", "commitBeforeChange": "b2c4ebbc2f8cac6aae79ed28b8148f90096919f6", "commitAfterChange": "c79924988b83a4410dc68ac4bbc9ed2e5112cc61", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static IClasspathContainer getUserLibrary(String name)", "signatureAfterChange": " \tpublic static UserLibrary getUserLibrary(String name)", "diff": ["-\tpublic static IClasspathContainer getUserLibrary(String name) {", "-\t\treturn (IClasspathContainer) getLibraryMap().get(name);", "+\tpublic static UserLibrary getUserLibrary(String name) {", "+\t\treturn (UserLibrary) getLibraryMap().get(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "710b382a3e10f86f7ea22bd2e010be5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "848c4ddf1895eb24711ea8c54b1168746cb07972", "commitAfterChange": "b136d601b8b65cbe6a937874c4ada8fd9c6f056d", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 117, "signatureBeforeChange": " public void invalidField(FieldReference fieldRef, TypeBinding searchedType)", "signatureAfterChange": " public void invalidField(FieldReference fieldRef, TypeBinding searchedType)", "diff": ["-\t\t\t\tIProblem.NotVisibleType, // cannot occur in annotations", "+\t\t\t\tIProblem.NotVisibleType, // cannot occur in javadoc comments", "-\tif ((fieldRef.bits & AstNode.InsideAnnotation) != 0) {", "-\t\tid |= IProblem.Annotation;", "+\tif ((fieldRef.bits & AstNode.InsideJavadoc) != 0) {", "+\t\tid |= IProblem.Javadoc;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71354ea8536c3bd2fc25ec32accf9f64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintFormula.java", "commitBeforeChange": "d1facd69b9dc2127e7162415007081afa0f4348b", "commitAfterChange": "a31fc41a761266e1336ef1dbd295debe293f4d81", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean isCompatibleWithInLooseInvocationContext(TypeBinding one, TypeBinding two, InferenceContext18 context)", "signatureAfterChange": " \tprotected boolean isCompatibleWithInLooseInvocationContext(TypeBinding one, TypeBinding two, InferenceContext18 context)", "diff": ["-\t\tif (one.isNormalBaseType()) {", "+\t\tif (one.isPrimitiveType()) {", "-\t\t} else if (two.isNormalBaseType()) {", "+\t\t} else if (two.isPrimitiveType()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71bd625cccbfb9e528274cd0d5945cea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferenceLocator.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-protected void matchReportReference(AstNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException {", "+protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException {", "-\t\t\tswitch (qNameRef.bits & AstNode.RestrictiveFlagMASK) {", "+\t\t\tswitch (qNameRef.bits & ASTNode.RestrictiveFlagMASK) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71e4d436e2238383a8b47f6ba64c3fc7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "57e05ac5c8db0c06028159bb169607bae2e0ec84", "commitAfterChange": "93b35a5a711d0edb75c141799c4443c91fb39f10", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void locateMatches( \t\tString[] filePaths,  \t\tIWorkspace workspace, \t\tIWorkingCopy[] workingCopies,  \t\tIProgressMonitor progressMonitor) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic void locateMatches( \t\tString[] filePaths,  \t\tIWorkspace workspace, \t\tIWorkingCopy[] workingCopies,  \t\tIProgressMonitor progressMonitor) \t\tthrows JavaModelException", "diff": ["-\t\t\t\t\t\tresource = workingCopy.getOriginalElement().getUnderlyingResource();", "+\t\t\t\t\t\tresource = workingCopy.getOriginalElement().getResource();", "-\t\t\t\t\t\tresource = openable.getUnderlyingResource();", "+\t\t\t\t\t\tresource = openable.getResource();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72b9fb5efa2eb0b476607185aec3d3ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/CompilationUnitLocationTests.java", "commitBeforeChange": "d401884a43c6ad3b0ed7439a466bbdea10cca2d2", "commitAfterChange": "e471353a00f4151e770cf4f074b2e3002113d901", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void testWrongCompilationUnitLocation()", "signatureAfterChange": " \tpublic void testWrongCompilationUnitLocation()", "diff": ["-\t\tenv.addExternalJar(projectPath, env.getMinimalJarPath());", "+\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72d8213dfe5f014e0e475988e4f3aa3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/InitializationFlowContext.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic void recordHandlingException( \t\tReferenceBinding exceptionType, \t\tUnconditionalFlowInfo flowInfo, \t\tTypeBinding raisedException, \t\tAstNode invocationSite, \t\tboolean wasMasked)", "signatureAfterChange": " \t \tpublic void recordHandlingException( \t\tReferenceBinding exceptionType, \t\tUnconditionalFlowInfo flowInfo, \t\tTypeBinding raisedException, \t\tASTNode invocationSite, \t\tboolean wasMasked)", "diff": ["-\t\tAstNode invocationSite,", "+\t\tASTNode invocationSite,", "-\t\t\t\t(exceptionThrowers = new AstNode[size * 2]),", "+\t\t\t\t(exceptionThrowers = new ASTNode[size * 2]),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "736fee24408f8fa7a53e0fee8a93cd73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 96, "signatureBeforeChange": " \tpublic boolean visit( \t\tQualifiedTypeReference qualifiedTypeReference, \t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tQualifiedTypeReference qualifiedTypeReference, \t\tClassScope scope)", "diff": ["-\t\t\tfinal int numberOfParens = (qualifiedTypeReference.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\t\tfinal int numberOfParens = (qualifiedTypeReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74d8d8425cf79dc58554757e5c1e5ee7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "0f5d04adf9d2fa735fce5517c85c8317372cf6c0", "commitAfterChange": "6cefacaaf91a5190221cb83191ea60dad1636887", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void checkTaskTag(int commentStart, int commentEnd) throws InvalidInputException", "signatureAfterChange": " public void checkTaskTag(int commentStart, int commentEnd) throws InvalidInputException", "diff": ["-\t\t\t\t\t\tif (this.isTaskCaseSensitive || (Character.toLowerCase(sc) != Character.toLowerCase(tc))) { \t// case insensitive check", "+\t\t\t\t\t\tif (this.isTaskCaseSensitive || (ScannerHelper.toLowerCase(sc) != ScannerHelper.toLowerCase(tc))) { \t// case insensitive check"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "755f0b94fc8b900cdb17fb93b11cad7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "adb1e4d21f756fdc893d84befd3e859cfa2aa662", "commitAfterChange": "2941812daedfecddb313ba4dd0685bac7c26b287", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprivate void formatAnonymousTypeDeclaration(TypeDeclaration typeDeclaration)", "signatureAfterChange": "  \tprivate void formatAnonymousTypeDeclaration(TypeDeclaration typeDeclaration)", "diff": ["-\t\tString anonymous_type_declaration_brace_position = this.preferences.anonymous_type_declaration_brace_position;", "+\t\tString anonymous_type_declaration_brace_position = this.preferences.brace_position_for_anonymous_type_declaration;", "-\t\tformatTypeOpeningBrace(anonymous_type_declaration_brace_position, this.preferences.insert_space_before_anonymous_type_open_brace, typeDeclaration);", "+\t\tformatTypeOpeningBrace(anonymous_type_declaration_brace_position, this.preferences.insert_space_before_opening_brace_in_anonymous_type_declaration, typeDeclaration);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "757b31aaa19acaf61baf4af8dd95d918", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  public void test031() throws JavaModelException", "signatureAfterChange": "  public void test031() throws JavaModelException", "diff": ["-\t\t\"foo[JAVADOC_FIELD_REF]{{@link BasicTestTextIns#foo}, Ljavadoc.text.BasicTestTextIns;, I, foo, null, \"+this.positions+R_DICNRIT+\"}\\n\" + ", "-\t\t\"foo[JAVADOC_VALUE_REF]{{@value BasicTestTextIns#foo}, Ljavadoc.text.BasicTestTextIns;, I, foo, null, \"+this.positions+R_DICNRIT+\"}\"", "+\t\t\"foo[JAVADOC_FIELD_REF]{{@link BasicTestTextIns#foo}, Ljavadoc.text.BasicTestTextIns;, I, foo, null, \"+this.positions+R_DRICNRIT+\"}\\n\" + ", "+\t\t\"foo[JAVADOC_VALUE_REF]{{@value BasicTestTextIns#foo}, Ljavadoc.text.BasicTestTextIns;, I, foo, null, \"+this.positions+R_DRICNRIT+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75d079e03a7559d1f94accf684cdafb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "7f0c1689dc377b26f3ac2b4c2b21446a43dd3383", "commitAfterChange": "f7a77c5e8210599982f60934db59bb901b30cb8c", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tprivate static String getFileNamesForPrinting(final ProcessorEnvImpl processorEnv)", "signatureAfterChange": " \tprivate static String getFileNamesForPrinting(final ProcessorEnvImpl processorEnv)", "diff": ["-\t\tfinal ICompilationParticipantResult[] results = processorEnv.getFilesWithAnnotation();", "+\t\tfinal BuildContext[] results = processorEnv.getFilesWithAnnotation();", "-\t\t\tfor (ICompilationParticipantResult curResult : results) {", "+\t\t\tfor (BuildContext curResult : results) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75dc09fceb6a9b9e99f0f8ee714a49dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "69458def708eedff53dace674666304d76a16916", "commitAfterChange": "57f3418737401a9accef24fe5cc12793778014a7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected String getPluginDirectoryPath()", "signatureAfterChange": " \tprotected String getPluginDirectoryPath()", "diff": ["-\t\t\treturn new File(Platform.asLocalURL(platformURL).getFile()).getAbsolutePath();", "+\t\t\treturn new File(FileLocator.toFileURL(platformURL).getFile()).getAbsolutePath();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "762f57248ca1a2299f75895e32cf1a40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 365, "methodNumberAfterChange": 365, "signatureBeforeChange": " protected void markInitializersWithLocalType(TypeDeclaration type)", "signatureAfterChange": " protected void markInitializersWithLocalType(TypeDeclaration type)", "diff": ["-\tif (type.fields == null || (type.bits & ASTNode.HasLocalTypeMASK) == 0) return;", "+\tif (type.fields == null || (type.bits & ASTNode.HasLocalType) == 0) return;", "-\t\t\tfield.bits |= ASTNode.HasLocalTypeMASK;", "+\t\t\tfield.bits |= ASTNode.HasLocalType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "766783787895f2c1a9166c187048f78a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "adb1e4d21f756fdc893d84befd3e859cfa2aa662", "commitAfterChange": "2941812daedfecddb313ba4dd0685bac7c26b287", "methodNumberBeforeChange": 397, "methodNumberAfterChange": 397, "signatureBeforeChange": " \tpublic void test378()", "signatureAfterChange": " \tpublic void test378()", "diff": ["-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_ARRAY_INITIALIZER_BRACE_POSITION, DefaultCodeFormatterConstants.END_OF_LINE);", "-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_ARRAY_INITIALIZER_CONTINUATION_INDENTATION, \"1\");", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ARRAY_INITIALIZER, DefaultCodeFormatterConstants.END_OF_LINE);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_CONTINUATION_INDENTATION_FOR_ARRAY_INITIALIZER, \"1\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76a2dbec57f65c63b39d75b9b8b8f8e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 45, "signatureBeforeChange": "\r public int literalIndexForJavaLangNoClassDefFoundErrorStringConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangNoClassDefFoundErrorStringConstructor()", "diff": ["-\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76b8fc837a98eb7f54fb6acb2a825615", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "fe905e29a608f61f2afe181f4c1e4e27bb2b95dc", "commitAfterChange": "53a7cfa9bf2a3a1ade921d716dbdc58a4bfc35d4", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic static IJavaElement determineIfOnClasspath( \t\tIResource resource, \t\tIJavaProject project)", "signatureAfterChange": " \tpublic static IJavaElement determineIfOnClasspath( \t\tIResource resource, \t\tIJavaProject project)", "diff": ["-\t\t\t\torg.eclipse.jdt.internal.compiler.util.Util.isJavaFileName(resourcePath.lastSegment())", "+\t\t\t\torg.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(resourcePath.lastSegment())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "775bf669713fcb0945f76bb76e6b2a0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (valueIfTrue instanceof CastExpression) valueIfTrue.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\tif (valueIfTrue instanceof CastExpression) valueIfTrue.bits |= DisableUnnecessaryCastCheck; // will check later on", "-\t\tif (valueIfFalse instanceof CastExpression) valueIfFalse.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\tif (valueIfFalse instanceof CastExpression) valueIfFalse.bits |= DisableUnnecessaryCastCheck; // will check later on"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "777a3d3dfab79075da65b253f9a25327", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "0927ffa25a2592bfca0a67c9cc9e0e69775118de", "commitAfterChange": "7b934c773095ee4cd83d9fe1d55bbb70d8656cbb", "methodNumberBeforeChange": 192, "methodNumberAfterChange": 192, "signatureBeforeChange": " public void invokeStringValueOf(int typeID)", "signatureAfterChange": " public void invokeStringValueOf(int typeID)", "diff": ["-\t\tcase T_Object :", "-\t\tcase T_String :", "+\t\tcase T_JavaLangObject :", "+\t\tcase T_JavaLangString :"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77f0d0ddf029d332cb813d5f5c0d35ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 83, "signatureBeforeChange": " \tpublic boolean visit(LongLiteral longLiteral, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(LongLiteral longLiteral, BlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (longLiteral.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (longLiteral.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77ff50a3f1f66058abc4680aa61bb5c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 38, "signatureBeforeChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "signatureAfterChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "diff": ["-\t\t\tAstNode node = (AstNode) nodes[i];", "+\t\t\tASTNode node = (ASTNode) nodes[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "781cb33b73e206b7f3a9bd5a19e6f3f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "fd8b9a432900e078bd3ec0b84289455beeec7157", "commitAfterChange": "727ece7c4e37d8cf0a8a8c9e31dcb1989a9402e6", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " protected int resolveLevelAsSubtype(char[] qualifiedPattern, ReferenceBinding type)", "signatureAfterChange": " protected int resolveLevelAsSubtype(char[] qualifiedPattern, ReferenceBinding type)", "diff": ["-\t\tif (level != IMPOSSIBLE_MATCH) return level | SUB_TYPE_FLAVOR; // add flavor to returned level", "+\t\tif (level != IMPOSSIBLE_MATCH) return level | SUB_INVOCATION_FLAVOR; // add flavor to returned level", "-\t\tif (level != IMPOSSIBLE_MATCH) return level | SUB_TYPE_FLAVOR; // add flavor to returned level", "+\t\tif (level != IMPOSSIBLE_MATCH) return level | SUB_INVOCATION_FLAVOR; // add flavor to returned level"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7874d92c2fb4e2d3eda4c867ef0e1f9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic LoopingFlowContext( \t\tFlowContext parent, \t\tFlowInfo upstreamNullFlowInfo, \t\tASTNode associatedNode, \t\tLabel breakLabel, \t\tLabel continueLabel, \t\tScope associatedScope)", "signatureAfterChange": " \t \tpublic LoopingFlowContext( \t\tFlowContext parent, \t\tFlowInfo upstreamNullFlowInfo, \t\tASTNode associatedNode, \t\tBranchLabel breakLabel, \t\tBranchLabel continueLabel, \t\tScope associatedScope)", "diff": ["-\t\tLabel breakLabel,", "-\t\tLabel continueLabel,", "+\t\tBranchLabel breakLabel,", "+\t\tBranchLabel continueLabel,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78e57d004c6b74719f31ba3263ba1048", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/diagnose/DiagnoseParser.java", "commitBeforeChange": "0f5d04adf9d2fa735fce5517c85c8317372cf6c0", "commitAfterChange": "6cefacaaf91a5190221cb83191ea60dad1636887", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprivate int misspell(int sym, int tok)", "signatureAfterChange": " \tprivate int misspell(int sym, int tok)", "diff": ["-\t\t\ts1[k] = Character.toLowerCase(c);", "+\t\t\ts1[k] = ScannerHelper.toLowerCase(c);", "-\t\t\ts2[k] = Character.toLowerCase(c);", "+\t\t\ts2[k] = ScannerHelper.toLowerCase(c);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7906ab8c7a3e79609b9251dc82345a2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public int literalIndexForJavaLangFloatTYPE()", "signatureAfterChange": " public int literalIndexForJavaLangFloatTYPE()", "diff": ["-\tif ((index = wellKnownFields[TYPE_FLOAT_FIELD]) == 0) {", "+\tif ((index = wellKnownFields[JAVA_LANG_FLOAT_TYPE_FIELD]) == 0) {", "-\t\tindex = wellKnownFields[TYPE_FLOAT_FIELD] = currentIndex++;", "+\t\tindex = wellKnownFields[JAVA_LANG_FLOAT_TYPE_FIELD] = currentIndex++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7976efa6dc7a7d8fdfb6334c66abf71a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 287, "methodNumberAfterChange": 287, "signatureBeforeChange": " public void optimizeBranch(int oldPosition, Label lbl)", "signatureAfterChange": " public void optimizeBranch(int oldPosition, BranchLabel lbl)", "diff": ["-public void optimizeBranch(int oldPosition, Label lbl) {", "+public void optimizeBranch(int oldPosition, BranchLabel lbl) {", "-\t\tLabel label = this.labels[i];", "+\t\tBranchLabel label = this.labels[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79a7693a4a2550d3f0b135bb74705821", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/CopyResourceTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void testProjectWith2Src2Bin() throws JavaModelException", "signatureAfterChange": "  \tpublic void testProjectWith2Src2Bin() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a94afdc85fd55cc5d8ed614d643208e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": "\r public int literalIndexForJavaLangErrorConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangErrorConstructor()", "diff": ["-\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7aa7eee8aa5a1ff4dbadddc26ca2d2a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/OutputFolderTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void testSimpleProject() throws JavaModelException", "signatureAfterChange": "  \tpublic void testSimpleProject() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ac5bd8093dc857ec04751ab8c852aeb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " public void deprecatedType(TypeBinding type, AstNode location)", "signatureAfterChange": " public void deprecatedType(TypeBinding type, ASTNode location)", "diff": ["-public void deprecatedType(TypeBinding type, AstNode location) {", "+public void deprecatedType(TypeBinding type, ASTNode location) {", "-\tif ((location.bits & AstNode.InsideJavadoc) != 0) {", "+\tif ((location.bits & ASTNode.InsideJavadoc) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b52f4de167b85e85a4aa4a622b18a3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TestAll.java", "commitBeforeChange": "9608f18cebf8754825a0dfb19f5331e058693585", "commitAfterChange": "bb00fa606e0fd8f3e90baadd6636bd41e8fd0084", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": " public static Test suite()", "diff": ["-\tfor (int i=0, l=JavadocTest.allTestClasses.size(); i<l; i++) {", "-\t\tstandardTests.add(JavadocTest.allTestClasses.get(i));", "+\tfor (int i=0, l=JavadocTest.ALL_CLASSES.size(); i<l; i++) {", "+\t\tstandardTests.add(JavadocTest.ALL_CLASSES.get(i));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b8bb502e84e8144389487073ec27290", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public int literalIndexForJavaLangClassForName()", "signatureAfterChange": " public int literalIndexForJavaLangClassForName()", "diff": ["-\tif ((index = wellKnownMethods[FORNAME_CLASS_METHOD]) == 0) {", "+\tif ((index = wellKnownMethods[CLASS_FORNAME_METHOD]) == 0) {", "-\t\tindex = wellKnownMethods[FORNAME_CLASS_METHOD] = currentIndex++;", "+\t\tindex = wellKnownMethods[CLASS_FORNAME_METHOD] = currentIndex++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b95fa24e0ed62b95fb2f30c7e7875ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ListRewrite.java", "commitBeforeChange": "a2d2be92ededb467e24ec541264fdd8abe9bb244", "commitAfterChange": "0325089db3ca0a8e6a36752438c4d3b535f031b0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " ListRewrite(ASTRewrite rewriter, ASTNode parent, StructuralPropertyDescriptor childProperty)", "signatureAfterChange": " ListRewrite(ASTRewrite rewriter, ASTNode parent, ChildListPropertyDescriptor childProperty)", "diff": ["-\t/* package*/ ListRewrite(ASTRewrite rewriter, ASTNode parent, StructuralPropertyDescriptor childProperty) {", "+\t/* package*/ ListRewrite(ASTRewrite rewriter, ASTNode parent, ChildListPropertyDescriptor childProperty) {", "-\t\tthis.childProperty= childProperty;", "+\t\tthis.childListProperty= childProperty;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ba451b23a90bea985f553b1e933d01d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 100, "signatureBeforeChange": " \tpublic boolean visit( \t\tSingleTypeReference singleTypeReference, \t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tSingleTypeReference singleTypeReference, \t\tClassScope scope)", "diff": ["-\t\tfinal int numberOfParens = (singleTypeReference.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (singleTypeReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cd55da4e78e855119b861156f805ff5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDelta.java", "commitBeforeChange": "f5dedbad023ed535da8140c4ada528c2bf574f20", "commitAfterChange": "b7dcee8ec99a66c7cd3b7ec7ac6ac22c9994d5db", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void movedFrom(IJavaElement movedFromElement, IJavaElement movedToElement)", "signatureAfterChange": " public void movedFrom(IJavaElement movedFromElement, IJavaElement movedToElement)", "diff": ["-\tremovedDelta.fKind = REMOVED;", "-\tremovedDelta.fChangeFlags |= F_MOVED_TO;", "+\tremovedDelta.kind = REMOVED;", "+\tremovedDelta.changeFlags |= F_MOVED_TO;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d175c8f89d063a59ba1424d6f866a6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java", "commitBeforeChange": "84bab690fce0d07b753bfc05c56b8e56d168a1a6", "commitAfterChange": "72404957161b9a06b0beff261255d6fcbe542913", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tASTNode clone0(AST target)", "signatureAfterChange": " \tASTNode clone0(AST target)", "diff": ["-\t\tif (this.ast.apiLevel == AST.JLS2) {", "-\t\t\tresult.setModifiers(getModifiers());", "+\t\tif (this.ast.apiLevel == AST.JLS2_INTERNAL) {", "+\t\t\tresult.internalSetModifiers(getModifiers());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d47075094f6c82061f2d899afc3b44e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " public int literalIndexForJavaLangShortTYPE()", "signatureAfterChange": " public int literalIndexForJavaLangShortTYPE()", "diff": ["-\tif ((index = wellKnownFields[TYPE_SHORT_FIELD]) == 0) {", "+\tif ((index = wellKnownFields[JAVA_LANG_SHORT_TYPE_FIELD]) == 0) {", "-\t\tindex = wellKnownFields[TYPE_SHORT_FIELD] = currentIndex++;", "+\t\tindex = wellKnownFields[JAVA_LANG_SHORT_TYPE_FIELD] = currentIndex++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d6a372fecd3d4db8d59f66c791cde83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "a9567e58ade978b67e4f2db4ee5fe35bc3c0d3fe", "commitAfterChange": "0b6f06d77f121375ae3494c8c329aad2cfc0a1a4", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  static Object convertMemberValue(Object binaryValue, LookupEnvironment env, char[][][] missingTypeNames, boolean resolveEnumConstants)", "signatureAfterChange": "  static Object convertMemberValue(Object binaryValue, LookupEnvironment env, char[][][] missingTypeNames, boolean resolveEnumConstants)", "diff": ["-\t\treturn env.getTypeFromSignature(((ClassSignature) binaryValue).getTypeName(), 0, -1, false, null, missingTypeNames, TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER);", "+\t\treturn env.getTypeFromSignature(((ClassSignature) binaryValue).getTypeName(), 0, -1, false, null, missingTypeNames, ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER);", "-\t\tReferenceBinding enumType = (ReferenceBinding) env.getTypeFromSignature(ref.getTypeName(), 0, -1, false, null, missingTypeNames, TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER);", "+\t\tReferenceBinding enumType = (ReferenceBinding) env.getTypeFromSignature(ref.getTypeName(), 0, -1, false, null, missingTypeNames, ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d96a81424c698a0ae806fcc26569ecd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tthis.receiver.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\tthis.receiver.bits |= DisableUnnecessaryCastCheck; // will check later on", "-\t\t\t\targument.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\t\t\targument.bits |= DisableUnnecessaryCastCheck; // will check later on"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d9bf859457200e4b641cf6a029839fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/Java8ElementProcessor.java", "commitBeforeChange": "73197a47274e75e8fe1581fdac3a086fb2ddf471", "commitAfterChange": "340440fc2f9b9eb03b89c385f562976def2c6c0e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic void testTypeAnnotations1()", "signatureAfterChange": " \t \tpublic void testTypeAnnotations1()", "diff": ["-\t\tverifyTypeAnnotations(typeMirror, new String[]{\"@Type(value=p1)\"});", "+\t\tverifyAnnotations(typeMirror, new String[]{\"@Type(value=p1)\"});", "-\t\tverifyTypeAnnotations(typeMirror, new String[]{\"@Type(value=p2)\"});", "+\t\tverifyAnnotations(typeMirror, new String[]{\"@Type(value=p2)\"});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7de4f999e4844bed65b857f2e76b1072", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java", "commitBeforeChange": "39efbf0f3eb32e59d7a65e03590993d59dc6817b", "commitAfterChange": "84bab690fce0d07b753bfc05c56b8e56d168a1a6", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tASTNode clone0(AST target)", "signatureAfterChange": " \tASTNode clone0(AST target)", "diff": ["-\t\tif (this.ast.apiLevel == AST.JLS2) {", "-\t\t\tresult.setModifiers(getModifiers());", "+\t\tif (this.ast.apiLevel == AST.JLS2_INTERNAL) {", "+\t\t\tresult.internalSetModifiers(getModifiers());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e156a97e7e6fb3ea60cd313040cbb77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/CompilationResult.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void discardSuppressedWarnings()", "signatureAfterChange": "  \tpublic void discardSuppressedWarnings()", "diff": ["-\t\t\tIProblem problem = this.problems[i];", "+\t\t\tCategorizedProblem problem = this.problems[i];", "-\t\t\t\tIProblem problem;", "+\t\t\t\tCategorizedProblem problem;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e1f643fe89474ee35ca2aeeca1cc711", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/Factory.java", "commitBeforeChange": "ea035aff9493ec8381c8d6bd9548845ad9f81e22", "commitAfterChange": "3c8b95412c50bb73a8372fbf9db9df68231cc311", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic static AnnotationBinding [] getPackedAnnotationBindings(AnnotationBinding [] annotations)", "signatureAfterChange": " \tpublic static AnnotationBinding [] getPackedAnnotationBindings(AnnotationBinding [] annotations)", "diff": ["-\t\t\tif (!annotationType.isRepeatableAnnotation())", "+\t\t\tif (!annotationType.isRepeatableAnnotationType())", "-\t\t\tReferenceBinding containerType = annotationType.resolveContainerAnnotation();", "+\t\t\tReferenceBinding containerType = annotationType.containerAnnotationType();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e462af0ec7cb1260d4b55f8334dc22f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "a00b91e363390d5872f24709421a2a2b1249ea30", "commitAfterChange": "61bf91bb0112a7323235a8711e82564a6109221c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " void checkMethods()", "signatureAfterChange": " void checkMethods()", "diff": ["-\t\t\t\t\t\tif (areMethodsEqual(currentMethod, inheritedMethod)) {", "+\t\t\t\t\t\tif (doesMethodOverride(currentMethod, inheritedMethod)) {", "-\t\t\t\t\tif (areMethodsEqual(inheritedMethod, otherInheritedMethod)) {", "+\t\t\t\t\tif (doesMethodOverride(inheritedMethod, otherInheritedMethod)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ea9550a783847c10609b1767af95e4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic TypeBinding checkFieldAccess(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding checkFieldAccess(BlockScope scope)", "diff": ["-\t\tif (isFieldUseDeprecated(fieldBinding, scope, (this.bits & IsStrictlyAssignedMASK) !=0))", "+\t\tif (isFieldUseDeprecated(fieldBinding, scope, (this.bits & IsStrictlyAssigned) !=0))", "-\t\tif ((this.bits & IsStrictlyAssignedMASK) == 0", "+\t\tif ((this.bits & IsStrictlyAssigned) == 0"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7efe094187828ef45f3013d068e86378", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "a9567e58ade978b67e4f2db4ee5fe35bc3c0d3fe", "commitAfterChange": "0b6f06d77f121375ae3494c8c329aad2cfc0a1a4", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  private TypeAnnotationWalker getTypeAnnotationWalker(IBinaryTypeAnnotation[] annotations)", "signatureAfterChange": "  private ITypeAnnotationWalker getTypeAnnotationWalker(IBinaryTypeAnnotation[] annotations)", "diff": ["-private TypeAnnotationWalker getTypeAnnotationWalker(IBinaryTypeAnnotation[] annotations) {", "+private ITypeAnnotationWalker getTypeAnnotationWalker(IBinaryTypeAnnotation[] annotations) {", "-\t\treturn TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER;", "+\t\treturn ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f2261e7a87404b53ef8415ef3047d1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "7aac6f03ecf70666410b0e689c91dafd6d67757a", "commitAfterChange": "465d091146b1d6997709777ea444048487da1d8d", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " protected void consumeAnnotationTypeMemberDeclaration()", "signatureAfterChange": " protected void consumeAnnotationTypeMemberDeclaration()", "diff": ["-\tAnnotationTypeMemberDeclaration annotationTypeMemberDeclaration = (AnnotationTypeMemberDeclaration) this.astStack[this.astPtr];", "+\tAnnotationMethodDeclaration annotationTypeMemberDeclaration = (AnnotationMethodDeclaration) this.astStack[this.astPtr];", "-\t\tannotationTypeMemberDeclaration.memberValue = this.expressionStack[this.expressionPtr--];", "+\t\tannotationTypeMemberDeclaration.defaultValue = this.expressionStack[this.expressionPtr--];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f3effb666003fdf5ec1f4e896c403ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "5cb7a8282e40bea7ee7271bbdb7d8b845c76f5b3", "commitAfterChange": "2aa78105ee4089b7ff1a9a2c35425f71b0b156d5", "methodNumberBeforeChange": 189, "methodNumberAfterChange": 189, "signatureBeforeChange": "\r protected NameReference getUnspecifiedReferenceOptimized()", "signatureAfterChange": "\r protected NameReference getUnspecifiedReferenceOptimized()", "diff": ["-\t\tref.bits &= ~NameReference.RestrictiveFlagMASK;\r", "+\t\tref.bits &= ~AstNode.RestrictiveFlagMASK;\r", "-\tref.bits &= ~NameReference.RestrictiveFlagMASK;\r", "+\tref.bits &= ~AstNode.RestrictiveFlagMASK;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f4c633805282e85018b08916978bb9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "5e70a582e36fd39d7629b8f556b66f50a1050058", "commitAfterChange": "5ca447c521262374b5199c22b8bb8d32a007f444", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public final boolean getNextCharAsDigit(int radix)", "signatureAfterChange": " public final boolean getNextCharAsDigit(int radix)", "diff": ["-\t\t\tif (Character.digit(this.currentCharacter, radix) == -1) {", "+\t\t\tif (ScannerHelper.digit(this.currentCharacter, radix) == -1) {", "-\t\t\tif (Character.digit(this.currentCharacter, radix) == -1) {", "+\t\t\tif (ScannerHelper.digit(this.currentCharacter, radix) == -1) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f6227b0d6b42244ecee7b4027fbefe0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "80d1a1c8c9608e72c63b677a4e2d1f5e89ff648c", "commitAfterChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "methodNumberBeforeChange": 156, "methodNumberAfterChange": 156, "signatureBeforeChange": "\r protected void consumeStatementIfWithElse()", "signatureAfterChange": "\r protected void consumeStatementIfWithElse()", "diff": ["-\t\t\t\tendPosition); \r", "+\t\t\t\tendStatementPosition); \r", "-\t\t\tendPosition)); \r", "+\t\t\tendStatementPosition)); \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f67207464d519f44fd972166479c7a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ClasspathSourceDirectory.java", "commitBeforeChange": "fe905e29a608f61f2afe181f4c1e4e27bb2b95dc", "commitAfterChange": "53a7cfa9bf2a3a1ade921d716dbdc58a4bfc35d4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  String[] directoryList(String qualifiedPackageName)", "signatureAfterChange": "  String[] directoryList(String qualifiedPackageName)", "diff": ["-\t\t\t\tif (m.getType() == IResource.FILE && org.eclipse.jdt.internal.compiler.util.Util.isJavaFileName(name = m.getName()))", "+\t\t\t\tif (m.getType() == IResource.FILE && org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(name = m.getName()))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fc21194df5915942033f624aa0dd973", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 41, "signatureBeforeChange": "\r public int literalIndexForJavaLangNoClassDefFoundErrorStringConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangNoClassDefFoundErrorStringConstructor()", "diff": ["-\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "801b533b1ead8a594ad28c1072081170", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "848c4ddf1895eb24711ea8c54b1168746cb07972", "commitAfterChange": "b136d601b8b65cbe6a937874c4ada8fd9c6f056d", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 59, "signatureBeforeChange": " public void errorNoMethodFor(MessageSend messageSend, TypeBinding recType, TypeBinding[] params)", "signatureAfterChange": " public void errorNoMethodFor(MessageSend messageSend, TypeBinding recType, TypeBinding[] params)", "diff": ["-\tif ((messageSend.bits & AstNode.InsideAnnotation) != 0) {", "-\t\tid |= IProblem.Annotation;", "+\tif ((messageSend.bits & AstNode.InsideJavadoc) != 0) {", "+\t\tid |= IProblem.Javadoc;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80a745ec323e4d187a1e4ced71dc1217", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "a9567e58ade978b67e4f2db4ee5fe35bc3c0d3fe", "commitAfterChange": "0b6f06d77f121375ae3494c8c329aad2cfc0a1a4", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames, TypeAnnotationWalker walker)", "signatureAfterChange": " ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames, ITypeAnnotationWalker walker)", "diff": ["-ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames, TypeAnnotationWalker walker) {", "+ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames, ITypeAnnotationWalker walker) {", "-\tif (walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "+\tif (walker != ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80ab87442d0053c7d9ea9e9cbe833e77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "a08e8dc8e9230a115f0cfdb4f78a05f8533a21b8", "commitAfterChange": "7df061f9da0ab96be87e5851cb157a28c5f5bca0", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic boolean match(SingleVariableDeclaration node, Object other)", "signatureAfterChange": " \tpublic boolean match(SingleVariableDeclaration node, Object other)", "diff": ["-\t \t\t\t\t\t\tsafeSubtreeListMatch(node.getExtraDimensionInfos(), o.getExtraDimensionInfos()))", "+\t \t\t\t\t\t\tsafeSubtreeListMatch(node.extraDimensionInfos(), o.extraDimensionInfos()))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "810af4e16ac32c4da8bb018a275fd4a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "a08e8dc8e9230a115f0cfdb4f78a05f8533a21b8", "commitAfterChange": "7df061f9da0ab96be87e5851cb157a28c5f5bca0", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic boolean visit(MethodDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(MethodDeclaration node)", "diff": ["-\t\t\tList dimensions = node.getExtraDimensionInfos();", "+\t\t\tList dimensions = node.extraDimensionInfos();", "-\t\t\t\tvisit((DimensionInfo) dimensions.get(i));", "+\t\t\t\tvisit((ExtraDimension) dimensions.get(i));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8195a1f02df5085fcfcff1752637aa14", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/VariablesEvaluator.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected void addEvaluationResultForCompilationProblem(Map resultsByIDs, IProblem problem, char[] cuSource)", "signatureAfterChange": " protected void addEvaluationResultForCompilationProblem(Map resultsByIDs, CategorizedProblem problem, char[] cuSource)", "diff": ["-protected void addEvaluationResultForCompilationProblem(Map resultsByIDs, IProblem problem, char[] cuSource) {", "+protected void addEvaluationResultForCompilationProblem(Map resultsByIDs, CategorizedProblem problem, char[] cuSource) {", "-\t\tresultsByIDs.put(evaluationID, new EvaluationResult(evaluationID, evaluationType, new IProblem[] {problem}));", "+\t\tresultsByIDs.put(evaluationID, new EvaluationResult(evaluationID, evaluationType, new CategorizedProblem[] {problem}));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81d888b1cf4beb35ceff3a81487f6c16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "61910f9ffdfc607d31120af5ce39e6bf8d69bab0", "commitAfterChange": "3a10f90d587275b68cb248facf53e1ae26bb70b8", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tprotected void runJavac( \t\t\tString[] testFiles,  \t\t\tfinal String expectedProblemLog,  \t\t\tfinal String expectedSuccessOutputString,  \t\t\tboolean shouldFlushOutputDirectory)", "signatureAfterChange": " \tprotected void runJavac( \t\t\tString[] testFiles,  \t\t\tfinal String expectedProblemLog,  \t\t\tfinal String expectedSuccessOutputString,  \t\t\tboolean shouldFlushOutputDirectory)", "diff": ["-\t\t\tFile javacOutputDirectory = new File(JAVAC_OUTPUT_DIR);", "+\t\t\tFile javacOutputDirectory = new File(JAVAC_OUTPUT_DIR_NAME);", "-\t\t\tString[] classpath = Util.concatWithClassLibs(JAVAC_OUTPUT_DIR, false);", "+\t\t\tString[] classpath = Util.concatWithClassLibs(JAVAC_OUTPUT_DIR_NAME, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8210133ab8a34fc197340bf771dc4ff2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "6d8036f4b0f90ef715394ba92952a819714c2135", "commitAfterChange": "02733ea32199eef92e7e8bc7be9f2db172e7eedd", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void report(int sourceStart, int sourceEnd, IJavaElement element, int accuracy) throws CoreException", "signatureAfterChange": " public void report(int sourceStart, int sourceEnd, IJavaElement element, int accuracy) throws CoreException", "diff": ["-\t\t\tIResource res = this.currentPotentialMatch.resource;", "+\t\t\tIResource res = this.currentPossibleMatch.resource;", "-\t\treport(this.currentPotentialMatch.resource, sourceStart, sourceEnd, element, accuracy);", "+\t\treport(this.currentPossibleMatch.resource, sourceStart, sourceEnd, element, accuracy);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "828edebd7ecb188471ac984c023a4ac8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ClassInstanceCreation.java", "commitBeforeChange": "f03e24a20423490ce43dd47d116e6771e9f8b29a", "commitAfterChange": "0425932939e44005b87b30f06674df053a397223", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tvoid accept0(ASTVisitor visitor)", "signatureAfterChange": " \tvoid accept0(ASTVisitor visitor)", "diff": ["-\t\t\tif (this.ast.API_LEVEL == AST.LEVEL_2_0) {", "+\t\t\tif (this.ast.apiLevel == AST.LEVEL_2_0) {", "-\t\t\tif (this.ast.API_LEVEL >= AST.LEVEL_3_0) {", "+\t\t\tif (this.ast.apiLevel >= AST.LEVEL_3_0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83e155fd8b67288bae4a0fb14532de9f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "cf143a6a7ccd7553042fd4fda437966abe78a9e6", "commitAfterChange": "31d3be0ab92dab378331be6840b8f198d91f8e2d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprivate void disassemble(IAnnotationComponentValue annotationComponentValue, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": "  \tprivate void disassemble(IAnnotationComponentValue annotationComponentValue, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["-\t\t\t\t\tcase IConstantPoolConstant.CONSTANT_String:", "-\t\t\t\t\t\tvalue = \"\\\"\" + decodeStringValue(constantPoolEntry.getStringValue()) + \"\\\"\";//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\t\tcase IConstantPoolConstant.CONSTANT_Utf8:", "+\t\t\t\t\t\tvalue = \"\\\"\" + decodeStringValue(constantPoolEntry.getUtf8Value()) + \"\\\"\";//$NON-NLS-1$//$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "852223fcf7b321606cb2427ef8d5e908", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void generateOptimizedGreaterThanOrEqual( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedGreaterThanOrEqual( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tBranchLabel trueLabel, \t\tBranchLabel falseLabel, \t\tboolean valueRequired)", "diff": ["-\t\tLabel trueLabel,", "-\t\tLabel falseLabel,", "+\t\tBranchLabel trueLabel,", "+\t\tBranchLabel falseLabel,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8567c348ec272a581a06ac1e21ef8ce6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void generateOptimizedLessThan( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedLessThan( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tBranchLabel trueLabel, \t\tBranchLabel falseLabel, \t\tboolean valueRequired)", "diff": ["-\t\tLabel trueLabel,", "-\t\tLabel falseLabel,", "+\t\tBranchLabel trueLabel,", "+\t\tBranchLabel falseLabel,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "856db03d80e97615cc1541023cae09f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelStatus.java", "commitBeforeChange": "cdf4427e144add1a36f3939b37283556991d4db8", "commitAfterChange": "75f702ac7a9f5b98d8daf289140c0d700af63244", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic JavaModelStatus(CoreException coreException)", "signatureAfterChange": " \tpublic JavaModelStatus(CoreException coreException)", "diff": ["-\t\tfElements= JavaElementInfo.fgEmptyChildren;", "+\t\telements= JavaElementInfo.NO_CHILDREN;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85d57a2a5cd3ba2c3f2e12c4bfffc7f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiSourceFolderAndOutputFolderTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic void test0009() throws JavaModelException", "signatureAfterChange": " \t \tpublic void test0009() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85fa89e169e28f6eab8768bd4d98358d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "57be54931a21775011b9d46837f226f82fd878f2", "commitAfterChange": "69b7d322507c416d24ecb0826f4b72b49ddbac45", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t\t\t(catchInfo.tagBits & FlowInfo.UNREACHABLE) != 0;", "+\t\t\t\t\t(catchInfo.tagBits & FlowInfo.UNREACHABLE_OR_DEAD) != 0;", "-\t\t\t\t\t(catchInfo.tagBits & FlowInfo.UNREACHABLE) != 0;", "+\t\t\t\t\t(catchInfo.tagBits & FlowInfo.UNREACHABLE_OR_DEAD) != 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "862b2c785c8ec5743f939b4942e83f97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "83dc88df7a1508be17b764df4120ac8a34178f58", "commitAfterChange": "f428b70bc80bfdae47260a00a8636113b21b698c", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public boolean hasIncompatibleSuperType(ReferenceBinding otherType)", "signatureAfterChange": " public boolean hasIncompatibleSuperType(ReferenceBinding otherType)", "diff": ["-\t\tmatch = otherType.findSuperTypeWithSameErasure(currentType);", "+\t\tmatch = otherType.findSuperTypeOriginatingFrom(currentType);", "-\t\tmatch = otherType.findSuperTypeWithSameErasure(currentType);", "+\t\tmatch = otherType.findSuperTypeOriginatingFrom(currentType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8638a90bed3981347c8fb3ed97fe2462", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "2923ed68c1f82d0e305a158b4c5d393b708481eb", "commitAfterChange": "78fb30efd0199bf293193efc0adbb492172aafcc", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tscope.referenceCompilationUnit().recordSuppressWarnings(CompilerOptions.NonExternalizedString, null, this.sourceStart, this.declarationSourceEnd);", "+\t\tscope.referenceCompilationUnit().recordSuppressWarnings(IrritantSet.NLS, null, this.sourceStart, this.declarationSourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "867414867a50566386828f5b75c0db4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprotected void evaluateWithExpectedProblem(char[] codeSnippet, IProblem expected)", "signatureAfterChange": " \tprotected void evaluateWithExpectedProblem(char[] codeSnippet, CategorizedProblem expected)", "diff": ["-\tprotected void evaluateWithExpectedProblem(char[] codeSnippet, IProblem expected) {", "+\tprotected void evaluateWithExpectedProblem(char[] codeSnippet, CategorizedProblem expected) {", "-\t\t\tIProblem[] problems = result.getProblems();", "+\t\t\tCategorizedProblem[] problems = result.getProblems();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86799229d587010a98503189608c5a38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "4b94aeae3b2f17272ac43325195dd1b4ff823c4d", "commitAfterChange": "954897e3771c12ba59b2bd8c81018b01e7959d76", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public int scanIdentifierOrKeyword()", "signatureAfterChange": " public int scanIdentifierOrKeyword()", "diff": ["-\t\t\t\t\t\t\treturn TokenNameERROR; //const is not used in java ???????", "+\t\t\t\t\t\t\treturn TokenNameconst; //const is not used in java ???????", "-\t\t\t\t\treturn TokenNameERROR;", "+\t\t\t\t\treturn TokenNamegoto;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "871dafdd7867ace2f121143307adac13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "0927ffa25a2592bfca0a67c9cc9e0e69775118de", "commitAfterChange": "7b934c773095ee4cd83d9fe1d55bbb70d8656cbb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\t\tif ((operationTypeID = (this.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) == T_String) {", "+\t\tif ((operationTypeID = (this.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) == T_JavaLangString) {", "-\t\tif ((operationTypeID = (this.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) == T_String) {", "+\t\tif ((operationTypeID = (this.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) == T_JavaLangString) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "872d0732e56d4ef31e751b30c2114433", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 193, "methodNumberAfterChange": 193, "signatureBeforeChange": " \tpublic void testTypeAnnotations12()", "signatureAfterChange": " \tpublic void testTypeAnnotations12()", "diff": ["-\t\tx1.extraDimensionInfos().add(x2);", "+\t\tx1.extraDimensions().add(x2);", "-\t\tx1.extraDimensionInfos().add(x2);", "+\t\tx1.extraDimensions().add(x2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87a92ab815701a58cac7ca6958a0789e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "458161dc550c876a0d717a9a36eda696046c367f", "commitAfterChange": "59d8c0d8b554a42bbafdc0ad10f524f90fa03b31", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " private void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, boolean typeInHierarchy) throws CoreException", "signatureAfterChange": " private void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, boolean typeInHierarchy) throws CoreException", "diff": ["-\t\t\t\tif ((this.matchContainer & SearchPattern.METHOD) != 0)", "+\t\t\t\tif ((this.matchContainer & PatternLocator.METHOD_CONTAINER) != 0)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8818a560488b3e0ef176667124f8cc10", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationMirrorImpl.java", "commitBeforeChange": "ee22b953168e5eb2f8830ee8c58b8b5ee9e24014", "commitAfterChange": "263941e543d760da46f092c40a60d9eb4c5dc908", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public Map<AnnotationTypeElementDeclaration, AnnotationValue> getElementValues()", "signatureAfterChange": "      public Map<AnnotationTypeElementDeclaration, AnnotationValue> getElementValues()", "diff": ["-\t\tfinal IResolvedMemberValuePair[] pairs = _domAnnotation.getDeclaredMemberValuePairs();", "+\t\tfinal IMemberValuePairBinding[] pairs = _domAnnotation.getDeclaredMemberValuePairs();", "-\t\tfor( IResolvedMemberValuePair pair : pairs ){", "+\t\tfor( IMemberValuePairBinding pair : pairs ){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "882220e81f03bda6480cf493dadd18ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic boolean visit(ArrayInitializer arrayInitializer, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(ArrayInitializer arrayInitializer, BlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (arrayInitializer.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (arrayInitializer.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88b78e45af2b75eb546f20750f18d7cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/KeyToSignature.java", "commitBeforeChange": "c8e15e54a9c939b00c0cb0ce73960666b12c6e8f", "commitAfterChange": "e75e459d2433b031258505e58fc5ac2021396b35", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tpublic String[] getTypeArguments()", "signatureAfterChange": " \t \tpublic String[] getTypeArguments()", "diff": ["-\t\tint length = this.arguments.size();", "+\t\tint length = this.typeArguments.size();", "-\t\t\tresult[i] = ((KeyToSignature) this.arguments.get(i)).signature.toString();", "+\t\t\tresult[i] = ((KeyToSignature) this.typeArguments.get(i)).signature.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88ee3e0bba817b92ade85d23ef47bc93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 50, "signatureBeforeChange": "\r public int literalIndexForJavaLangStringBufferConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangStringBufferConstructor()", "diff": ["-\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "891bd33d3059da9a2d5793372b42c685", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 45, "signatureBeforeChange": "\r public int literalIndexForJavaLangNoClassDefFoundErrorStringConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangNoClassDefFoundErrorStringConstructor()", "diff": ["-\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "891c52fd8ef5cbb43cc0aca407c7dca7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AssignmentTest.java", "commitBeforeChange": "44551786632702a9dab25973852c4b7635c7db54", "commitAfterChange": "201cbac7396dbd82a54c65af692f316f33ec5c19", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void test059_definite_unassignment_assign_in_for_condition()", "signatureAfterChange": " public void test059_definite_unassignment_assign_in_for_condition()", "diff": ["-\t\tJavacTestOptions.EclipseJustification.EclipseBug235555 /* javac test options */);", "+\t\tJavacTestOptions.JavacHasABug.JavacBug4660984 /* javac test options */);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "893a1dc349c5d6fcc3cc87503c10a41b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ArrayType.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tfinal List internalGetChildListProperty(ChildListPropertyDescriptor property)", "signatureAfterChange": " \tfinal List internalGetChildListProperty(ChildListPropertyDescriptor property)", "diff": ["-\t\tif (property == ANNOTATIONS_PROPERTY) {", "-\t\t\treturn annotations();", "+\t\tif (property == DIMENSIONS_PROPERTY) {", "+\t\t\treturn dimensions();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "895322a8612a95f464e648678af637e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "0927ffa25a2592bfca0a67c9cc9e0e69775118de", "commitAfterChange": "7b934c773095ee4cd83d9fe1d55bbb70d8656cbb", "methodNumberBeforeChange": 345, "methodNumberAfterChange": 345, "signatureBeforeChange": " public void unusedPrivateMethod(AbstractMethodDeclaration methodDecl)", "signatureAfterChange": " public void unusedPrivateMethod(AbstractMethodDeclaration methodDecl)", "diff": ["-\t\t\t&& TypeIds.T_Object == method.returnType.id", "+\t\t\t&& TypeIds.T_JavaLangObject == method.returnType.id", "-\t\t\t&& TypeIds.T_Object == method.returnType.id", "+\t\t\t&& TypeIds.T_JavaLangObject == method.returnType.id"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89982ffc2fa437db5edfe3bc5a631c3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HandleFactory.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic IJavaElement createElement(final AstNode toBeFound, CompilationUnitDeclaration parsedUnit, final Openable openable)", "signatureAfterChange": " \tpublic IJavaElement createElement(final ASTNode toBeFound, CompilationUnitDeclaration parsedUnit, final Openable openable)", "diff": ["-\tpublic IJavaElement createElement(final AstNode toBeFound, CompilationUnitDeclaration parsedUnit, final Openable openable) {", "+\tpublic IJavaElement createElement(final ASTNode toBeFound, CompilationUnitDeclaration parsedUnit, final Openable openable) {", "-\t\tclass Visitor extends AbstractSyntaxTreeVisitorAdapter {", "+\t\tclass Visitor extends ASTVisitor {", "-\t\t\t", "-\t\t\tpublic boolean visit(AnonymousLocalTypeDeclaration node, BlockScope scope) {", "-\t\t\t\tcurrentElement = updateOccurenceCount(((IMember)currentElement).getType(\"\", 1)); //$NON-NLS-1$", "-\t\t\t\tif (node == toBeFound) throw new EndVisit();", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tpublic void endVisit(AnonymousLocalTypeDeclaration node, BlockScope scope) {", "-\t\t\t\tcurrentElement = currentElement.getParent();", "-\t\t\t}", "-\t\t\tpublic boolean visit(LocalTypeDeclaration node, BlockScope scope) {", "-\t\t\t\tcurrentElement = updateOccurenceCount(((IMember)currentElement).getType(new String(node.name), 1));", "+\t\t\tpublic boolean visit(TypeDeclaration node, BlockScope scope) {", "+\t\t\t\tif ((node.bits & ASTNode.IsAnonymousTypeMASK) != 0) {", "+\t\t\t\t\tcurrentElement = updateOccurenceCount(((IMember)currentElement).getType(\"\", 1)); //$NON-NLS-1$", "+\t\t\t\t} else {", "+\t\t\t\t\tcurrentElement = updateOccurenceCount(((IMember)currentElement).getType(new String(node.name), 1));", "+\t\t\t\t}", "-\t\t\tpublic void endVisit(LocalTypeDeclaration node, BlockScope scope) {", "-\t\t\t\tcurrentElement = currentElement.getParent();", "+\t\t\tpublic void endVisit(TypeDeclaration node, BlockScope scope) {", "+\t\t\t\tif ((node.bits & ASTNode.IsMemberTypeMASK) != 0) {", "+\t\t\t\t\tcurrentElement = ((IType)currentElement).getDeclaringType();", "+\t\t\t\t} else {", "+\t\t\t\t\tcurrentElement = currentElement.getParent();", "+\t\t\t\t}", "-\t\t\tpublic boolean visit(MemberTypeDeclaration node, ClassScope scope) {", "+\t\t\tpublic boolean visit(TypeDeclaration node, ClassScope scope) {", "-\t\t\tpublic void endVisit(MemberTypeDeclaration node, ClassScope scope) {", "-\t\t\t\tcurrentElement = ((IType)currentElement).getDeclaringType();", "+\t\t\tpublic void endVisit(TypeDeclaration node, ClassScope scope) {", "+\t\t\t\tcurrentElement = currentElement.getParent();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89a7f93e158a8c06563f8984bfa44457", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39efbf0f3eb32e59d7a65e03590993d59dc6817b", "commitAfterChange": "84bab690fce0d07b753bfc05c56b8e56d168a1a6", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 143, "signatureBeforeChange": " \t \tprotected void setModifiers(SingleVariableDeclaration variableDecl, LocalDeclaration localDeclaration)", "signatureAfterChange": " \t \tprotected void setModifiers(SingleVariableDeclaration variableDecl, LocalDeclaration localDeclaration)", "diff": ["-\t\tcase AST.JLS2 :", "-\t\t\tvariableDecl.setModifiers(localDeclaration.modifiers & CompilerModifiers.AccJustFlag);", "+\t\tcase AST.JLS2_INTERNAL :", "+\t\t\tvariableDecl.internalSetModifiers(localDeclaration.modifiers & CompilerModifiers.AccJustFlag);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89e8f99a9f2d45664173a6db21ff5ebc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 54, "signatureBeforeChange": "\r public int literalIndexForJavaLangStringBufferConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangStringBufferConstructor()", "diff": ["-\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a065082bf81881b3125ef3274133290", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void generateOptimizedGreaterThan( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedGreaterThan( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tBranchLabel trueLabel, \t\tBranchLabel falseLabel, \t\tboolean valueRequired)", "diff": ["-\t\tLabel trueLabel,", "-\t\tLabel falseLabel,", "+\t\tBranchLabel trueLabel,", "+\t\tBranchLabel falseLabel,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a35327d126152362fa0fe438a189dbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\t\t\t\t\t\tcodeStream.generateStringAppend(currentScope, this, expression);", "+\t\t\t\t\t\tcodeStream.generateStringConcatenationAppend(currentScope, this, expression);", "-\t\t\tcodeStream.generateStringAppend(currentScope, null, expression);", "+\t\t\tcodeStream.generateStringConcatenationAppend(currentScope, null, expression);", "+\t\t\t// no need for generic cast on previous #getfield since using Object string buffer methods.\t\t\t", "+\t\t\t\t// no need for generic cast as value got dupped"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a6ad784a7057d07eefc23e3925c8c80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterAST8Test.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 130, "methodNumberAfterChange": 130, "signatureBeforeChange": " \tpublic void test0128() throws JavaModelException", "signatureAfterChange": " \tpublic void test0128() throws JavaModelException", "diff": ["-\t\tvariableDeclarationFragment.extraDimensionInfos().clear();", "-\t\tvariableDeclarationFragment.extraDimensionInfos().add(this.ast.newExtraDimension());", "+\t\tvariableDeclarationFragment.extraDimensions().clear();", "+\t\tvariableDeclarationFragment.extraDimensions().add(this.ast.newExtraDimension());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b573ab363e690b5ee11051af102d00b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " protected void consumeClassDeclaration()", "signatureAfterChange": " protected void consumeClassDeclaration()", "diff": ["-\t\ttypeDecl.bits |= AstNode.AddAssertionMASK;", "+\t\ttypeDecl.bits |= ASTNode.AddAssertionMASK;", "-\t\ttypeDecl.bits |= AstNode.UndocumentedEmptyBlockMASK;", "+\t\ttypeDecl.bits |= ASTNode.UndocumentedEmptyBlockMASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ba3429620d105c99f84d231a6238dab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \t \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\t\t\t&& (this.expression.bits & ASTNode.UnnecessaryCastMASK) == 0) {", "+\t\t\t\t\t&& (this.expression.bits & ASTNode.UnnecessaryCast) == 0) {", "-\t\t\t\t\t&& (this.expression.bits & ASTNode.UnnecessaryCastMASK) == 0) {", "+\t\t\t\t\t&& (this.expression.bits & ASTNode.UnnecessaryCast) == 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bacaab244b7585862f9d5e7e83f1310", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void testBug47339c()", "signatureAfterChange": " \tpublic void testBug47339c()", "diff": ["-\t\treportMissingJavadoc = CompilerOptions.DISABLED;", "+\t\treportMissingJavadocComments = CompilerOptions.IGNORE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bedb6f39c693b43970da1514dac3a60", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java", "commitBeforeChange": "56fd729d2f45ec0b9c9fda262c4722902ccba4f8", "commitAfterChange": "880fcfdc9d3f451c53fbdd4300c71ec2c6ba2a25", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprivate void getKey(BlockScope scope, StringBuffer buffer)", "signatureAfterChange": " \t \tprivate void getScopeKey(BlockScope scope, StringBuffer buffer)", "diff": ["-\tprivate void getKey(BlockScope scope, StringBuffer buffer) {", "+\tprivate void getScopeKey(BlockScope scope, StringBuffer buffer) {", "-\t\t\tgetKey((BlockScope)scope.parent, buffer);", "-\t\t\tbuffer.append('/');", "+\t\t\tgetScopeKey((BlockScope)scope.parent, buffer);", "+\t\t\tbuffer.append('#');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c0e300fff2013b6711b2ea9f8f2bb5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "f03e24a20423490ce43dd47d116e6771e9f8b29a", "commitAfterChange": "0425932939e44005b87b30f06674df053a397223", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " \tpublic TypeDeclarationStatement  \t\t\tnewTypeDeclarationStatement(AbstractTypeDeclaration decl)", "signatureAfterChange": " \tpublic TypeDeclarationStatement  \t\t\tnewTypeDeclarationStatement(AbstractTypeDeclaration decl)", "diff": ["-\t\tif (this.API_LEVEL == AST.LEVEL_2_0) {", "+\t\tif (this.apiLevel == AST.LEVEL_2_0) {", "-\t\tif (this.API_LEVEL >= AST.LEVEL_3_0) {", "+\t\tif (this.apiLevel >= AST.LEVEL_3_0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c8759cb6e36a8851884bb0a7d10df88", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "8b532c89fe75cdcd516dedb1f57b44f4fab79fb0", "commitAfterChange": "14eef462fbaf0bab3c247296c2a42a1fdc4f58a6", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic boolean visit(BinaryExpression binaryExpression, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(BinaryExpression binaryExpression, BlockScope scope)", "diff": ["-\t\tswitch((binaryExpression.bits & EqualExpression.OperatorMASK) >> EqualExpression.OperatorSHIFT) {", "+\t\tswitch((binaryExpression.bits & AstNode.OperatorMASK) >> AstNode.OperatorSHIFT) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cc1bae9c8ada995a0ed68b62e4efb77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "ab36391231f1ea61e75e0e00b3dc8ffe91eda55e", "commitAfterChange": "6c476fc2e300888d931411f675ed8c5c5f714198", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r public IType createType(String content, IJavaElement sibling, boolean force, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "\r public IType createType(String content, IJavaElement sibling, boolean force, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\tsource = \"package \" + pkg.getElementName() + \";\"  + JavaModelManager.LINE_SEPARATOR + JavaModelManager.LINE_SEPARATOR; //$NON-NLS-1$ //$NON-NLS-2$\r", "+\t\t\tsource = \"package \" + pkg.getElementName() + \";\"  + Util.LINE_SEPARATOR + Util.LINE_SEPARATOR; //$NON-NLS-1$ //$NON-NLS-2$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cf0de6aa874656d7fc78033eb73d47a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  public void test033() throws JavaModelException", "signatureAfterChange": "  public void test033() throws JavaModelException", "diff": ["-\t\t\"foo[JAVADOC_FIELD_REF]{{@link OtherFields#foo}, Ljavadoc.text.OtherFields;, I, foo, null, \"+this.positions+R_DICNRIT+\"}\\n\" + ", "-\t\t\"foo[JAVADOC_VALUE_REF]{{@value OtherFields#foo}, Ljavadoc.text.OtherFields;, I, foo, null, \"+this.positions+R_DICNRIT+\"}\"", "+\t\t\"foo[JAVADOC_FIELD_REF]{{@link OtherFields#foo}, Ljavadoc.text.OtherFields;, I, foo, null, \"+this.positions+R_DRICNRIT+\"}\\n\" + ", "+\t\t\"foo[JAVADOC_VALUE_REF]{{@value OtherFields#foo}, Ljavadoc.text.OtherFields;, I, foo, null, \"+this.positions+R_DRICNRIT+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8da8c3b1442ad090ce4b69813b228866", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "2638be2ccc1738a8756046b508b2a9be01dab4c9", "commitAfterChange": "2af4d6c5a01ec5b5f71fc5f4417f402b3cbb8976", "methodNumberBeforeChange": 173, "methodNumberAfterChange": 173, "signatureBeforeChange": " public void invokeEnumOrdinal(char[] enumTypeConstantPoolName)", "signatureAfterChange": " public void invokeEnumOrdinal(char[] enumTypeConstantPoolName)", "diff": ["-\t\t\tQualifiedNamesConstants.Ordinal,", "-\t\t\tQualifiedNamesConstants.OrdinalSignature);", "+\t\t\tConstantPool.Ordinal,", "+\t\t\tConstantPool.OrdinalSignature);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e17792065955d496881c7c8d331804a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprotected void evaluateWithExpectedImportProblem(char[] codeSnippet, char[] importDeclaration, Map options, IProblem expected)", "signatureAfterChange": " \tprotected void evaluateWithExpectedImportProblem(char[] codeSnippet, char[] importDeclaration, Map options, CategorizedProblem expected)", "diff": ["-\tprotected void evaluateWithExpectedImportProblem(char[] codeSnippet, char[] importDeclaration, Map options, IProblem expected) {", "+\tprotected void evaluateWithExpectedImportProblem(char[] codeSnippet, char[] importDeclaration, Map options, CategorizedProblem expected) {", "-\t\t\tIProblem[] problems = result.getProblems();", "+\t\t\tCategorizedProblem[] problems = result.getProblems();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e1bd19ba765dc6752fb42964b500e55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void testBug45596a()", "signatureAfterChange": " \tpublic void testBug45596a()", "diff": ["-\t\treportMissingJavadoc = CompilerOptions.DISABLED;", "+\t\treportMissingJavadocComments = CompilerOptions.IGNORE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e88cc9e67bd3b1065c0e539d4273ed0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/comment/SubstitutionTextReader.java", "commitBeforeChange": "5e70a582e36fd39d7629b8f556b66f50a1050058", "commitAfterChange": "5ca447c521262374b5199c22b8bb8d32a007f444", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprotected int nextChar() throws IOException", "signatureAfterChange": " \tprotected int nextChar() throws IOException", "diff": ["-\t\t\tif (fSkipWhiteSpace && Character.isWhitespace((char)ch)) {", "+\t\t\tif (fSkipWhiteSpace && ScannerHelper.isWhitespace((char)ch)) {", "-\t\t\t\t} while (Character.isWhitespace((char)ch));", "+\t\t\t\t} while (ScannerHelper.isWhitespace((char)ch));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e89bdf2dacb9f08de27bccc8633f99d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "02e41bd22396d523c7a0e7b774bb557781eb6970", "commitAfterChange": "4e3cdd53887918496e5ba73e90ca2f99858ae83c", "methodNumberBeforeChange": 153, "methodNumberAfterChange": 153, "signatureBeforeChange": "\r protected void consumeStatementIfNoElse()", "signatureAfterChange": "\r protected void consumeStatementIfNoElse()", "diff": ["-\t\t\t\tendPosition); \r", "+\t\t\t\tendStatementPosition); \r", "-\t\t\t\tendPosition); \r", "+\t\t\t\tendStatementPosition); \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eb3bc4e5c900d02634ec09178aa644f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/ClasspathDirectory.java", "commitBeforeChange": "bd66f33da6dcc33c67153a2129d6fec0fda88ac8", "commitAfterChange": "dc4de554479d1bd7115bbb51a83f104f76dfaa9e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \r void reset()", "signatureAfterChange": "\r \r void reset()", "diff": ["-\tthis.missingPackages = new LookupTable(11);\r", "-\tthis.directoryCache = new LookupTable(11);\r", "+\tthis.missingPackages = new SimpleLookupTable(11);\r", "+\tthis.directoryCache = new SimpleLookupTable(11);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f25c0c3ed877510f0a82ca8c95b44b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "a08e8dc8e9230a115f0cfdb4f78a05f8533a21b8", "commitAfterChange": "7df061f9da0ab96be87e5851cb157a28c5f5bca0", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": " \tpublic boolean visit(VariableDeclarationFragment node)", "signatureAfterChange": " \tpublic boolean visit(VariableDeclarationFragment node)", "diff": ["-\t\t\tList dimensions = node.getExtraDimensionInfos();", "+\t\t\tList dimensions = node.extraDimensionInfos();", "-\t\t\t\tvisit((DimensionInfo) dimensions.get(i));", "+\t\t\t\tvisit((ExtraDimension) dimensions.get(i));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f6919507df7e3b51f7ae389f7d84445", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/BlocksIndexInput.java", "commitBeforeChange": "70b32514588b091b133b82607c10c8c78d5b8fe3", "commitAfterChange": "aaa63e79319475935e2167f567ed10fa3d10e895", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic IndexedFile getIndexedFile(IDocument document) throws java.io.IOException", "signatureAfterChange": " \tpublic IndexedFile getIndexedFile(SearchDocument document) throws java.io.IOException", "diff": ["-\tpublic IndexedFile getIndexedFile(IDocument document) throws java.io.IOException {", "+\tpublic IndexedFile getIndexedFile(SearchDocument document) throws java.io.IOException {", "-\t\tString name= document.getName();", "+\t\tString name= document.getPath();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fa542ab10b29542689578516d765fc7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/comment/CommentLine.java", "commitBeforeChange": "5e70a582e36fd39d7629b8f556b66f50a1050058", "commitAfterChange": "5ca447c521262374b5199c22b8bb8d32a007f444", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprotected void tokenizeLine(final int line)", "signatureAfterChange": " \tprotected void tokenizeLine(final int line)", "diff": ["-\t\t\twhile (offset < length && Character.isWhitespace(content.charAt(offset)))", "+\t\t\twhile (offset < length && ScannerHelper.isWhitespace(content.charAt(offset)))", "-\t\t\twhile (index < length && !Character.isWhitespace(content.charAt(index)))", "+\t\t\twhile (index < length && !ScannerHelper.isWhitespace(content.charAt(index)))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fd4ac88ca39a31c5c75d0b7654166bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "a874d0a70b41fd8d47271a00c32dea355d363a74", "commitAfterChange": "e567f019a8e7a1152204aae3d1ce4204c41c7aea", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  protected void report(SearchMatch match) throws CoreException", "signatureAfterChange": "  protected void report(SearchMatch match) throws CoreException", "diff": ["-\t\tSystem.out.println(match.getAccuracy() == IJavaSearchResultCollector.EXACT_MATCH", "+\t\tSystem.out.println(match.getAccuracy() == SearchMatch.A_ACCURATE"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fe8b5aab099e3983ad62a5b3e11fa27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "fbe3f3aabed3fd943703368b065a95bc68cf5a8d", "commitAfterChange": "3b51e6fd25bf226c9bb29d6317b71df712cf5255", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 45, "signatureBeforeChange": "\r public int literalIndexForJavaLangNoClassDefFoundErrorStringConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangNoClassDefFoundErrorStringConstructor()", "diff": ["-\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "910ba05085c53e1824f994ee1391fa3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "df7db86dfdaff61d3ebc9328b44d180f263988fe", "commitAfterChange": "d781dcbe8a593d5ba6dc04230bf23771b905f7bd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void checkTaskTag(int commentStart, int commentEnd) throws InvalidInputException", "signatureAfterChange": " public void checkTaskTag(int commentStart, int commentEnd) throws InvalidInputException", "diff": ["-\t\twhile (CharOperation.isWhitespace(src[end]) && msgStart <= end)", "+\t\twhile (ScannerHelper.isWhitespace(src[end]) && msgStart <= end)", "-\t\twhile (CharOperation.isWhitespace(src[msgStart]) && msgStart <= end)", "+\t\twhile (ScannerHelper.isWhitespace(src[msgStart]) && msgStart <= end)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91a3b4a6f0c5bba00fbf77447ce2c3ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "ba1917d8323b975c43d151520213a593a77dc7c0", "commitAfterChange": "90b8a1490825ac6e9009b801582efb3d76f604dd", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tvoid reconcileClasspathFileUpdate(IResourceDelta delta, IFile file, JavaProject project)", "signatureAfterChange": " \tvoid reconcileClasspathFileUpdate(IResourceDelta delta, IFile file, JavaProject project)", "diff": ["-\t\t\t\t\tJavaModelManager.PerProjectInfo info = project.getJavaModelManager().getPerProjectInfoCheckExistence(project.getProject());", "+\t\t\t\t\tJavaModelManager.PerProjectInfo info = JavaModelManager.getJavaModelManager().getPerProjectInfoCheckExistence(project.getProject());", "-\t\t\t\t\tJavaModelManager.PerProjectInfo info = project.getJavaModelManager().getPerProjectInfoCheckExistence(project.getProject());", "+\t\t\t\t\tJavaModelManager.PerProjectInfo info = JavaModelManager.getJavaModelManager().getPerProjectInfoCheckExistence(project.getProject());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91a6ee5716b6b8afe8020c277ae35676", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "08e53f04ea3f08ae64f9c886944b4a8be7e4b3d7", "commitAfterChange": "d2ac97129da79ea53e4e3d6f928f1d633472cd5b", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " public void testCompletionReturnStatementIsParent1() throws JavaModelException", "signatureAfterChange": " public void testCompletionReturnStatementIsParent1() throws JavaModelException", "diff": ["-\t\t\"element:zz11    completion:zz11    relevance:\"+(R_DEFAULT + R_CASE + R_EXPECTED_TYPE)+\"\\n\" +", "-\t\t\"element:zz11M    completion:zz11M()    relevance:\"+(R_DEFAULT + R_CASE + R_EXPECTED_TYPE)+\"\\n\" +", "+\t\t\"element:zz11    completion:zz11    relevance:\"+(R_DEFAULT + R_CASE + R_EXACT_EXPECTED_TYPE)+\"\\n\" +", "+\t\t\"element:zz11M    completion:zz11M()    relevance:\"+(R_DEFAULT + R_CASE + R_EXACT_EXPECTED_TYPE)+\"\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91c3cf1210f1e31458960f833d517ff1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tpublic boolean visit(EqualExpression equalExpression, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(EqualExpression equalExpression, BlockScope scope)", "diff": ["-\t\tif ((equalExpression.bits & AstNode.OperatorMASK) >> AstNode.OperatorSHIFT == OperatorIds.EQUAL_EQUAL) {", "+\t\tif ((equalExpression.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT == OperatorIds.EQUAL_EQUAL) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91cdee37f2c59e116e1b516e9c1646fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "60adc6e9bd2a19d1f00a26879d59da4db15980bb", "commitAfterChange": "2fa8bdc58397f8ba42986ed8442348506f4b1424", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r public void setUnusedArgumentSeverity(int flag)", "signatureAfterChange": "\r public void setUnusedArgumentSeverity(int flag)", "diff": ["-\t\tcase ERROR : \r", "+\t\tcase Error : \r", "-\t\tcase WARNING : \r", "+\t\tcase Warning : \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91d652cf95d7e9413be5f8cac8363994", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/PerfTests.java", "commitBeforeChange": "7007043cae1b12e48764a4ad7f71075181f1dd30", "commitAfterChange": "39c2952e6c0f1f5ea5630a9c8f33da78f52c9d80", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void setUp() throws Exception", "signatureAfterChange": "  \tpublic void setUp() throws Exception", "diff": ["-\t\tFile f = new File(Platform.asLocalURL(platformURL).getFile());", "+\t\tFile f = new File(FileLocator.toFileURL(platformURL).getFile());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91e199d14afca36de18c138d0f5b0bc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IfStatement.java", "commitBeforeChange": "a8ebe98c7b687ea450305732efa25afb0944336e", "commitAfterChange": "96a09d96e56ab454cb92b7163871c6f3413e482e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\tthenFlowInfo.setReachMode(FlowInfo.UNREACHABLE);", "+\t\tthenFlowInfo.setReachMode(FlowInfo.UNREACHABLE_OR_DEAD);", "-\t\telseFlowInfo.setReachMode(FlowInfo.UNREACHABLE);", "+\t\telseFlowInfo.setReachMode(FlowInfo.UNREACHABLE_OR_DEAD);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92112f92bbdd4bba620c658618ed8fd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/SelectionTest2.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " void checkMethodParse( \t\tSelectionParser parser, \t\tchar[] source,  \t\tint selectionStart, \t\tint selectionEnd,  \t\tString expectedSelection,  \t\tString expectedUnitToString,  \t\tString expectedSelectionIdentifier,  \t\tString expectedSelectedSource,  \t\tString testName)", "signatureAfterChange": " void checkMethodParse( \t\tSelectionParser parser, \t\tchar[] source,  \t\tint selectionStart, \t\tint selectionEnd,  \t\tString expectedSelection,  \t\tString expectedUnitToString,  \t\tString expectedSelectionIdentifier,  \t\tString expectedSelectedSource,  \t\tString testName)", "diff": ["-\tAstNode foundMethod = null;", "+\tASTNode foundMethod = null;", "-\t\t\tAstNode method = findMethod(type, selectionStart);", "+\t\t\tASTNode method = findMethod(type, selectionStart);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93fa55c0d5ad7e15639f84d994c2ee9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/CompletionProposal.java", "commitBeforeChange": "9f83390b8974225073423e6d4d9c0d282b2dec03", "commitAfterChange": "187fc3c8a943e9120c4cf02223f70b9ac6c29cbc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tCompletionProposal(int kind, int completionLocation)", "signatureAfterChange": " \tCompletionProposal(int kind, int completionLocation)", "diff": ["-\t\tif ((kind < CompletionProposal.ANONYMOUS_CLASS_DECLARATION)", "-\t\t\t\t|| (kind > CompletionProposal.METHOD_NAME_REFERENCE)) {", "+\t\tif ((kind < CompletionProposal.FIRST_KIND)", "+\t\t\t\t|| (kind > CompletionProposal.LAST_KIND)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "947714e72e5aa98958c6a36eeaa9240d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "4ab9f51613d504c2ff6edffad453d042a8c04058", "commitAfterChange": "d588d04827eba4279cf3ad675c4250450aee4bea", "methodNumberBeforeChange": 167, "methodNumberAfterChange": 167, "signatureBeforeChange": " public void test146_declared_thrown_checked_exceptions()", "signatureAfterChange": " public void test146_declared_thrown_checked_exceptions()", "diff": ["-  + \" -bootclasspath \" + getLibraryClasses()", "-  + \" -cp \" + getJCEJar()", "+  + \" -bootclasspath \" + getLibraryClassesAsQuotedString()", "+  + \" -cp \" + getJCEJarAsQuotedString()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9487e7e457dfcec57e569b4d6e0dc387", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 50, "signatureBeforeChange": "\r public int literalIndexForJavaLangStringBufferConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangStringBufferConstructor()", "diff": ["-\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "952869779ffd6b41e55f573f2ca0b422", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "b9de5f3466a9b4d6687de837720c445097067b16", "commitAfterChange": "39416e9e4305b172d90b88aed3085d98ded0a86c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r private static synchronized char[] scannedIdentifier(String id)", "signatureAfterChange": "\r private static synchronized char[] scannedIdentifier(String id)", "diff": ["-\t\tif (token == TerminalSymbols.TokenNameIdentifier \r", "-\t\t\t&& nextToken == TerminalSymbols.TokenNameEOF\r", "+\t\tif (token == ITerminalSymbols.TokenNameIdentifier \r", "+\t\t\t&& nextToken == ITerminalSymbols.TokenNameEOF\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95ece0ee054c9ae7f06040caec9f4cef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "df7db86dfdaff61d3ebc9328b44d180f263988fe", "commitAfterChange": "d781dcbe8a593d5ba6dc04230bf23771b905f7bd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private final void checkNonNullTag(int commentStart, int commentEnd)", "signatureAfterChange": " private final void checkNonNullTag(int commentStart, int commentEnd)", "diff": ["-\t\t\t\telse if (!CharOperation.isWhitespace(currentChar)) {", "+\t\t\t\telse if (!ScannerHelper.isWhitespace(currentChar)) {", "-\t\t\t\tif (currentChar != '*' && !CharOperation.isWhitespace(currentChar)) {", "+\t\t\t\tif (currentChar != '*' && !ScannerHelper.isWhitespace(currentChar)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "966565541e61c97515a9d3eddc8bc149", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t\t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t\t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif ((leftIsCast = left instanceof CastExpression) == true) left.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\tif ((leftIsCast = left instanceof CastExpression) == true) left.bits |= DisableUnnecessaryCastCheck; // will check later on", "-\t\tif ((rightIsCast = right instanceof CastExpression) == true) right.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\tif ((rightIsCast = right instanceof CastExpression) == true) right.bits |= DisableUnnecessaryCastCheck; // will check later on"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96f2ebd8f7da211c7bc1b83b1c843632", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "272d365c8c794b76444b3643d2b9ddaaf32b6191", "commitAfterChange": "6c8b6c70bde19844df9a948acbc4f151c3d9aa74", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void checkComment()", "signatureAfterChange": " public void checkComment()", "diff": ["-\t\tTypeReference[] thrownExceptions = this.javadoc.thrownExceptions;", "+\t\tTypeReference[] thrownExceptions = this.javadoc.exceptionReferences;", "-\t\tExpression[] references = this.javadoc.references;", "+\t\tExpression[] references = this.javadoc.seeReferences;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9729c2cabb770e26eb6389aa4064e0ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "7ffcb2a7af26043f6494026025d910fb887342cc", "commitAfterChange": "539039c13c4eacb615ac208c3a1858f04a9b8067", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " protected int resolveLevelAsSubtype(char[] qualifiedPattern, ReferenceBinding type)", "signatureAfterChange": " protected int resolveLevelAsSubtype(char[] qualifiedPattern, ReferenceBinding type)", "diff": ["-\t\tif (level != IMPOSSIBLE_MATCH) return level | POLYMORPHIC_FLAVOR; // this is a polymorphic method => add flavor to returned level", "+\t\tif (level != IMPOSSIBLE_MATCH) return level | SUB_TYPE_FLAVOR; // add flavor to returned level", "-\t\tif (level != IMPOSSIBLE_MATCH) return level | POLYMORPHIC_FLAVOR; // this is a polymorphic method => add flavor to returned level", "+\t\tif (level != IMPOSSIBLE_MATCH) return level | SUB_TYPE_FLAVOR; // add flavor to returned level"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97473d04c76038fb72c563a4d981132b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  public void test021() throws JavaModelException", "signatureAfterChange": "  public void test021() throws JavaModelException", "diff": ["-\t\t\"foo[FIELD_REF]{foo, Ljavadoc.methods.tags.BasicTestMethods;, I, foo, null, \"+this.positions+R_DICNRNS+\"}\\n\" + ", "-\t\t\"foo[METHOD_REF]{foo(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, foo, null, \"+this.positions+R_DICNRNS+\"}\"", "+\t\t\"foo[FIELD_REF]{foo, Ljavadoc.methods.tags.BasicTestMethods;, I, foo, null, \"+this.positions+R_DRICNRNS+\"}\\n\" + ", "+\t\t\"foo[METHOD_REF]{foo(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, foo, null, \"+this.positions+R_DRICNRNS+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "975b3f824f163d704c288a490ccb2530", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public int literalIndexForJavaLangLongTYPE()", "signatureAfterChange": " public int literalIndexForJavaLangLongTYPE()", "diff": ["-\tif ((index = wellKnownFields[TYPE_LONG_FIELD]) == 0) {", "+\tif ((index = wellKnownFields[JAVA_LANG_LONG_TYPE_FIELD]) == 0) {", "-\t\tindex = wellKnownFields[TYPE_LONG_FIELD] = currentIndex++;", "+\t\tindex = wellKnownFields[JAVA_LANG_LONG_TYPE_FIELD] = currentIndex++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9760117b4d79c61799f8040e1de4b23d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "79620cc5a2ab93e8afb2f50dfb60d3aac3ac52a1", "commitAfterChange": "bb83bb6bb9594ac07e759b1e208acbe513439625", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private final void checkNonNullTag(int commentStart, int commentEnd)", "signatureAfterChange": " private final void checkNonNullTag(int commentStart, int commentEnd)", "diff": ["-\t\t\t\telse if (!ScannerHelper.isWhitespace(currentChar)) {", "+\t\t\t\telse if (!CharOperation.isWhitespace(currentChar)) {", "-\t\t\t\tif (currentChar != '*' && !ScannerHelper.isWhitespace(currentChar)) {", "+\t\t\t\tif (currentChar != '*' && !CharOperation.isWhitespace(currentChar)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9768c08229cdd67c955e9c343397ea6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/DocumentElementParser.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " protected void consumeClassHeaderName1()", "signatureAfterChange": " protected void consumeClassHeaderName1()", "diff": ["-\t\t\ttypeDecl.bits |= ASTNode.IsMemberTypeMASK;", "+\t\t\ttypeDecl.bits |= ASTNode.IsMemberType;", "-\t\ttypeDecl.bits |= ASTNode.IsLocalTypeMASK;", "+\t\ttypeDecl.bits |= ASTNode.IsLocalType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97a4ca17064fb2c86eac313748d2d701", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void testBug45958c()", "signatureAfterChange": " \tpublic void testBug45958c()", "diff": ["-\t\treportMissingJavadoc = CompilerOptions.DISABLED;", "+\t\treportMissingJavadocComments = CompilerOptions.IGNORE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9844c148b90eb9d594167922f703d281", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ClassInstanceCreation.java", "commitBeforeChange": "06e8c1940b7fce6b86315eb81900d27eb1279bce", "commitAfterChange": "91510ee1ea5206403f95c9b316aaa14af70c8d8e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tint treeSize()", "signatureAfterChange": " \tint treeSize()", "diff": ["-\t\t// n.b. typeParameters == null for ast.API_LEVEL == 2.0", "+\t\t// n.b. typeArguments == null for ast.API_LEVEL == 2.0", "-\t\t\t+ (this.typeParameters == null ? 0 : this.typeParameters.listSize())", "+\t\t\t+ (this.typeArguments == null ? 0 : this.typeArguments.listSize())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9858b1bdece565c7d5e1418e5994a480", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "0927ffa25a2592bfca0a67c9cc9e0e69775118de", "commitAfterChange": "7b934c773095ee4cd83d9fe1d55bbb70d8656cbb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": "  public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\t\tif ((operationTypeID = (this.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) == T_String) {", "+\t\tif ((operationTypeID = (this.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) == T_JavaLangString) {", "-\t\tif ((operationTypeID = (this.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) == T_String) {", "+\t\tif ((operationTypeID = (this.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) == T_JavaLangString) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9860eb6ae6abd2aea8775f0e5df59614", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationMirrorImpl.java", "commitBeforeChange": "ee22b953168e5eb2f8830ee8c58b8b5ee9e24014", "commitAfterChange": "263941e543d760da46f092c40a60d9eb4c5dc908", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public ITypeBinding[] getMemberValueTypeBinding(String membername)", "signatureAfterChange": "     public ITypeBinding[] getMemberValueTypeBinding(String membername)", "diff": ["-\t\tfinal IResolvedMemberValuePair[] declaredPairs = _domAnnotation.getDeclaredMemberValuePairs();", "-\t\tfor( IResolvedMemberValuePair pair : declaredPairs ){\t\t\t", "+\t\tfinal IMemberValuePairBinding[] declaredPairs = _domAnnotation.getDeclaredMemberValuePairs();", "+\t\tfor( IMemberValuePairBinding pair : declaredPairs ){\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98824dd18de305f1c9cabd4689b4e226", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/GetKeyVisitor.java", "commitBeforeChange": "b3c38270b99ecd1520eea104e9cdb0099eab8f71", "commitAfterChange": "41ef4898bfd4399802c4b7fddb8b2e4f958ada78", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic boolean visit(ClassInstanceCreation node)", "signatureAfterChange": " \tpublic boolean visit(ClassInstanceCreation node)", "diff": ["-\t\tTestCase.assertNotNull(constructorBinding);", "-\t\tTestCase.assertNotNull(constructorBinding.getKey());", "+\t\tAssert.assertNotNull(constructorBinding);", "+\t\tAssert.assertNotNull(constructorBinding.getKey());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98a084da268f8fe3e4d878783c68a3a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateTypeMemberOperation.java", "commitBeforeChange": "5e70a582e36fd39d7629b8f556b66f50a1050058", "commitAfterChange": "5ca447c521262374b5199c22b8bb8d32a007f444", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private String removeIndentAndNewLines(String code, IDocument document, ICompilationUnit cu)", "signatureAfterChange": " private String removeIndentAndNewLines(String code, IDocument document, ICompilationUnit cu)", "diff": ["-\t\tif (!Character.isWhitespace(code.charAt(++firstNonWhiteSpace)))", "+\t\tif (!ScannerHelper.isWhitespace(code.charAt(++firstNonWhiteSpace)))", "-\t\tif (!Character.isWhitespace(code.charAt(--lastNonWhiteSpace)))", "+\t\tif (!ScannerHelper.isWhitespace(code.charAt(--lastNonWhiteSpace)))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98c908485fe8f05dc084c1cf1c28859e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  public void test023() throws JavaModelException", "signatureAfterChange": "  public void test023() throws JavaModelException", "diff": ["-\t\t\"foo[FIELD_REF]{foo, Ljavadoc.methods.tags.OtherFields;, I, foo, null, \"+this.positions+R_DICNRNS+\"}\\n\" + ", "-\t\t\"foo[METHOD_REF]{foo(), Ljavadoc.methods.tags.OtherFields;, ()V, foo, null, \"+this.positions+R_DICNRNS+\"}\"", "+\t\t\"foo[FIELD_REF]{foo, Ljavadoc.methods.tags.OtherFields;, I, foo, null, \"+this.positions+R_DRICNRNS+\"}\\n\" + ", "+\t\t\"foo[METHOD_REF]{foo(), Ljavadoc.methods.tags.OtherFields;, ()V, foo, null, \"+this.positions+R_DRICNRNS+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99a70f70a10b50542e6eb630793092ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "fbe3f3aabed3fd943703368b065a95bc68cf5a8d", "commitAfterChange": "3b51e6fd25bf226c9bb29d6317b71df712cf5255", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": "\r public int literalIndexForJavaLangErrorConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangErrorConstructor()", "diff": ["-\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99dd906469a1239538a91e3303337658", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/compiler/BuildContext.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void recordNewProblems(CategorizedProblem[] newProblems)", "signatureAfterChange": " public void recordNewProblems(CategorizedProblem[] newProblems)", "diff": ["-\tIProblem[] merged = new IProblem[length1 + length2];", "+\tCategorizedProblem[] merged = new CategorizedProblem[length1 + length2];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ab6d18ae3580b8a8bb4cd1da547f3b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 50, "signatureBeforeChange": "\r public int literalIndexForJavaLangStringBufferConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangStringBufferConstructor()", "diff": ["-\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b64cf0602a3578be138dceffb610e01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic boolean visit(CharLiteral charLiteral, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(CharLiteral charLiteral, BlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (charLiteral.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (charLiteral.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b8dcce27717e61dba55725067f9b20f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "62ce2e8c5f0cb8acac7a47921bf6e9ae7974c7a1", "commitAfterChange": "3c755125fb6d43834cd7c6dfb58024a6d397b566", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "  public void test059() throws JavaModelException", "signatureAfterChange": "  public void test059() throws JavaModelException", "diff": ["-\t\t\"method[METHOD_REF]{method(String, boolean, Object), Ljavadoc.methods.tags.BasicTestMethods;, (Ljava.lang.String;ZLjava.lang.Object;)V, method, (str, flag, obj), \"+this.positions+R_DICUNR+\"}\\n\" + ", "-\t\t\"method[METHOD_REF]{method(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, method, null, \"+this.positions+R_DICUNR+\"}\"", "+\t\t\"method[METHOD_REF]{method(String, boolean, Object), Ljavadoc.methods.tags.BasicTestMethods;, (Ljava.lang.String;ZLjava.lang.Object;)V, method, (str, flag, obj), \"+this.positions+R_DICNRNS+\"}\\n\" + ", "+\t\t\"method[METHOD_REF]{method(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, method, null, \"+this.positions+R_DICNRNS+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c7d33467a5717c5ec8ad856fad43246", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "a08e8dc8e9230a115f0cfdb4f78a05f8533a21b8", "commitAfterChange": "7df061f9da0ab96be87e5851cb157a28c5f5bca0", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": "  \tprotected void setExtraAnnotatedDimensions(int start, int end, TypeReference type, final List extraAnnotatedDimensions, int extraDimension)", "signatureAfterChange": "  \tprotected void setExtraAnnotatedDimensions(int start, int end, TypeReference type, final List extraAnnotatedDimensions, int extraDimension)", "diff": ["-\t\t\t\tDimensionInfo dim = convertToDimensionInfo(start, end, (annotationsOnDims == null) ? null : annotationsOnDims[i]);", "+\t\t\t\tExtraDimension dim = convertToExtraDimensions(start, end, (annotationsOnDims == null) ? null : annotationsOnDims[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9df75847fc269f1c3c14eb181549e766", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "4b36d8d902157ef078af37f3d78b4138152d8889", "commitAfterChange": "9ef1e97f6b56081e8537310fc409f77c2ce56944", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic void removeClass(IPath packagePath, String className)", "signatureAfterChange": " \tpublic void removeClass(IPath packagePath, String className)", "diff": ["-\t\tcheckAssertion(\"a workspace must be open\", fIsOpen); //$NON-NLS-1$", "+\t\tcheckAssertion(\"a workspace must be open\", isOpen); //$NON-NLS-1$", "-\t\tIFolder packageFolder = fWorkspace.getRoot().getFolder(packagePath);", "+\t\tIFolder packageFolder = workspace.getRoot().getFolder(packagePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e4d3fb7d1984a7feb6cd5d0fbf0ddfa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 45, "signatureBeforeChange": "\r public int literalIndexForJavaLangNoClassDefFoundErrorStringConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangNoClassDefFoundErrorStringConstructor()", "diff": ["-\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e6629ac304c28b695c9711749fe1d28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "418f1d61f23f33e0e639dfcb37d7371b9ddc656a", "commitAfterChange": "9fedbc20e6a58ab4ca985b6cd53ab67968737404", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 110, "signatureBeforeChange": " \t \tprivate void setJavaDocComment(BodyDeclaration bodyDeclaration)", "signatureAfterChange": " \t \tprivate void setJavaDocComment(BodyDeclaration bodyDeclaration)", "diff": ["-\t\t\twhile ((token = scanner.getNextToken()) != Scanner.TokenNameEOF) {", "+\t\t\twhile ((token = scanner.getNextToken()) != ITerminalSymbols.TokenNameEOF) {", "-\t\t\t\t\tcase Scanner.TokenNameCOMMENT_JAVADOC: //1003", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_JAVADOC: //1003"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e979f050e75fe6e1e8fd96db349baeb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "a8ebe98c7b687ea450305732efa25afb0944336e", "commitAfterChange": "96a09d96e56ab454cb92b7163871c6f3413e482e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t\t\tcatchInfo.setReachMode(FlowInfo.UNREACHABLE);", "+\t\t\t\t\tcatchInfo.setReachMode(FlowInfo.UNREACHABLE_OR_DEAD);", "-\t\t\t\t\tcatchInfo.setReachMode(FlowInfo.UNREACHABLE);", "+\t\t\t\t\tcatchInfo.setReachMode(FlowInfo.UNREACHABLE_OR_DEAD);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f0de606c07e88a0d230b44cf56586d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "df7db86dfdaff61d3ebc9328b44d180f263988fe", "commitAfterChange": "d781dcbe8a593d5ba6dc04230bf23771b905f7bd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void checkTaskTag(int commentStart, int commentEnd) throws InvalidInputException", "signatureAfterChange": " public void checkTaskTag(int commentStart, int commentEnd) throws InvalidInputException", "diff": ["-\t\twhile (CharOperation.isWhitespace(src[end]) && msgStart <= end)", "+\t\twhile (ScannerHelper.isWhitespace(src[end]) && msgStart <= end)", "-\t\twhile (CharOperation.isWhitespace(src[msgStart]) && msgStart <= end)", "+\t\twhile (ScannerHelper.isWhitespace(src[msgStart]) && msgStart <= end)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f4e4938089c9ed1205359441745932b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoubleLiteral.java", "commitBeforeChange": "7111a90a9313c88b41ed63cd6da2db497c5fcfb7", "commitAfterChange": "b1e8bf37aa256ab5bf86ee13594009ed0a13e10a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void computeConstant()", "signatureAfterChange": " \tpublic void computeConstant()", "diff": ["-\t\t\t\tconstant = Constant.fromValue(v);", "+\t\t\t\tconstant = DoubleConstant.fromValue(v);", "-\t\tconstant = Constant.fromValue(value);", "+\t\tconstant = DoubleConstant.fromValue(value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a05d3cb4f59f59bad36858bd69c45409", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/FlowAnalysisTest.java", "commitBeforeChange": "44551786632702a9dab25973852c4b7635c7db54", "commitAfterChange": "201cbac7396dbd82a54c65af692f316f33ec5c19", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " public void test046()", "signatureAfterChange": " public void test046()", "diff": ["-\t\tJavacTestOptions.EclipseJustification.EclipseBug235555);", "+\t\tJavacTestOptions.JavacHasABug.JavacBug4660984);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a17d0ea2171db540068d5f1975df1ac8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "c2f0554c826ed78a65c1025711fc6a0df2b79308", "commitAfterChange": "473e73e956d6ff2c0ecfedc365eaef22bfab27ea", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic String createIndentationString(final int indentationLevel)", "signatureAfterChange": " \t \tpublic String createIndentationString(final int indentationLevel)", "diff": ["-\t\t\t\treturn Scribe2.EMPTY_STRING;", "+\t\t\t\treturn Util.EMPTY_STRING;", "-\t\t\treturn Scribe2.EMPTY_STRING;", "+\t\t\treturn Util.EMPTY_STRING;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1f3ccca021bbdde27440b32ad5eeb21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\tenclosingInstance.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\t\t\tenclosingInstance.bits |= DisableUnnecessaryCastCheck; // will check later on", "-\t\t\t\t\targument.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\t\t\t\targument.bits |= DisableUnnecessaryCastCheck; // will check later on"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a25e26720288cbd360504b7a251df7bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r public int literalIndexForJavaLangErrorConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangErrorConstructor()", "diff": ["-\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2a4cda89638624623f2002102b5993e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39efbf0f3eb32e59d7a65e03590993d59dc6817b", "commitAfterChange": "84bab690fce0d07b753bfc05c56b8e56d168a1a6", "methodNumberBeforeChange": 145, "methodNumberAfterChange": 145, "signatureBeforeChange": " \tprotected void setModifiers(VariableDeclarationExpression variableDeclarationExpression, LocalDeclaration localDeclaration)", "signatureAfterChange": " \tprotected void setModifiers(VariableDeclarationExpression variableDeclarationExpression, LocalDeclaration localDeclaration)", "diff": ["-\t\t\tcase AST.JLS2 :", "+\t\t\tcase AST.JLS2_INTERNAL :", "-\t\t\t\tvariableDeclarationExpression.setModifiers(modifiers);", "+\t\t\t\tvariableDeclarationExpression.internalSetModifiers(modifiers);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2a9c8219f49c70f8c07c10de9b6065c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest.java", "commitBeforeChange": "61910f9ffdfc607d31120af5ce39e6bf8d69bab0", "commitAfterChange": "3a10f90d587275b68cb248facf53e1ae26bb70b8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprotected void runJavac( \t\t\tString[] testFiles,  \t\t\tfinal String expectedProblemLog,  \t\t\tfinal String expectedSuccessOutputString,  \t\t\tboolean shouldFlushOutputDirectory)", "signatureAfterChange": " \tprotected void runJavac( \t\t\tString[] testFiles,  \t\t\tfinal String expectedProblemLog,  \t\t\tfinal String expectedSuccessOutputString,  \t\t\tboolean shouldFlushOutputDirectory)", "diff": ["-\t\t\tFile javacOutputDirectory = new File(JAVAC_OUTPUT_DIR);", "+\t\t\tFile javacOutputDirectory = new File(JAVAC_OUTPUT_DIR_NAME);", "-\t\t\tString[] classpath = Util.concatWithClassLibs(JAVAC_OUTPUT_DIR, false);", "+\t\t\tString[] classpath = Util.concatWithClassLibs(JAVAC_OUTPUT_DIR_NAME, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a35472d72470461d62a3428c2b7f316f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "0f5d04adf9d2fa735fce5517c85c8317372cf6c0", "commitAfterChange": "6cefacaaf91a5190221cb83191ea60dad1636887", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public static final boolean equals( \tchar[] first, \tchar[] second, \tboolean isCaseSensitive)", "signatureAfterChange": " public static final boolean equals( \tchar[] first, \tchar[] second, \tboolean isCaseSensitive)", "diff": ["-\t\tif (Character.toLowerCase(first[i])", "-\t\t\t!= Character.toLowerCase(second[i]))", "+\t\tif (ScannerHelper.toLowerCase(first[i])", "+\t\t\t!= ScannerHelper.toLowerCase(second[i]))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a36ec2e6887949abff5aa724d9df2c97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "4ab9f51613d504c2ff6edffad453d042a8c04058", "commitAfterChange": "d588d04827eba4279cf3ad675c4250450aee4bea", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void test007()", "signatureAfterChange": " public void test007()", "diff": ["-        + \" -bootclasspath \" + getLibraryClasses()", "-        + \" -cp \" + getJCEJar()", "+        + \" -bootclasspath \" + getLibraryClassesAsQuotedString()", "+        + \" -cp \" + getJCEJarAsQuotedString()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3cc8e6fccd9cd05b27f12d7f0201fab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "a08e8dc8e9230a115f0cfdb4f78a05f8533a21b8", "commitAfterChange": "7df061f9da0ab96be87e5851cb157a28c5f5bca0", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " \tpublic boolean visit(SingleVariableDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(SingleVariableDeclaration node)", "diff": ["-\t\t\tList dimensions = node.getExtraDimensionInfos();", "+\t\t\tList dimensions = node.extraDimensionInfos();", "-\t\t\t\tvisit((DimensionInfo) dimensions.get(i));", "+\t\t\t\tvisit((ExtraDimension) dimensions.get(i));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3e5d1d2f46bb56206d650515462bc4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocPackageCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void test041() throws JavaModelException", "signatureAfterChange": " public void test041() throws JavaModelException", "diff": ["-\t\t\"OtherTypes[METHOD_REF<CONSTRUCTOR>]{OtherTypes(Object, String), Ljavadoc.tags.OtherTypes;, (Ljava.lang.Object;Ljava.lang.String;)V, OtherTypes, (obj, str), \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"OtherTypes[METHOD_REF<CONSTRUCTOR>]{OtherTypes(int), Ljavadoc.tags.OtherTypes;, (I)V, OtherTypes, (x), \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"OtherTypes[METHOD_REF<CONSTRUCTOR>]{OtherTypes(Object, String), Ljavadoc.tags.OtherTypes;, (Ljava.lang.Object;Ljava.lang.String;)V, OtherTypes, (obj, str), \"+this.positions+R_DRINR+\"}\\n\" + ", "+\t\t\"OtherTypes[METHOD_REF<CONSTRUCTOR>]{OtherTypes(int), Ljavadoc.tags.OtherTypes;, (I)V, OtherTypes, (x), \"+this.positions+R_DRINR+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a48f31485228afc071721d07bc7a93e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic void testBug47339a()", "signatureAfterChange": " \tpublic void testBug47339a()", "diff": ["-\t\treportMissingJavadoc = CompilerOptions.DISABLED;", "+\t\treportMissingJavadocComments = CompilerOptions.IGNORE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4a1cd5d34f5fc046786f276a10a0bb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void testBug46901()", "signatureAfterChange": " \tpublic void testBug46901()", "diff": ["-\t\treportMissingJavadoc = CompilerOptions.DISABLED;", "+\t\treportMissingJavadocComments = CompilerOptions.IGNORE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4a2b3706a50dffd51359fb92333601e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void generateOptimizedBoolean( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedBoolean( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tBranchLabel trueLabel, \t\tBranchLabel falseLabel, \t\tboolean valueRequired)", "diff": ["-\t\tLabel trueLabel,", "-\t\tLabel falseLabel,", "+\t\tBranchLabel trueLabel,", "+\t\tBranchLabel falseLabel,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5e28c94dd548a05038163e72ae3c4d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "3631cf47f01fc0da1be7732f6c067adbe5bd4214", "commitAfterChange": "bcf1522935dfbdb0bc359777ceee5d7211666ccc", "methodNumberBeforeChange": 243, "methodNumberAfterChange": 246, "signatureBeforeChange": " protected void reportSyntaxError(int act, int currentKind, int topOfStackState)", "signatureAfterChange": " protected void reportSyntaxError(int act, int currentKind, int topOfStackState)", "diff": ["-\tString tokenName = name[symbol_index[currentKind]];", "+\tString tokenName = name[terminal_index[currentKind]];", "-\t\t\texpectings[i] = name[symbol_index[indexes[i]]];", "+\t\t\texpectings[i] = name[terminal_index[indexes[i]]];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6251dafdf7da6880ddd6e58d0078a63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "a8ebe98c7b687ea450305732efa25afb0944336e", "commitAfterChange": "96a09d96e56ab454cb92b7163871c6f3413e482e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " private void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " private void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t\t\tstaticFieldInfo = FlowInfo.initial(this.maxFieldCount).setReachMode(FlowInfo.UNREACHABLE);", "+\t\t\t\t\tstaticFieldInfo = FlowInfo.initial(this.maxFieldCount).setReachMode(FlowInfo.UNREACHABLE_OR_DEAD);", "-\t\t\t\t\tnonStaticFieldInfo = FlowInfo.initial(this.maxFieldCount).setReachMode(FlowInfo.UNREACHABLE);", "+\t\t\t\t\tnonStaticFieldInfo = FlowInfo.initial(this.maxFieldCount).setReachMode(FlowInfo.UNREACHABLE_OR_DEAD);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a744c23c87e55065328846fe1fb51053", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocBugsCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void testBug115662a() throws JavaModelException", "signatureAfterChange": " public void testBug115662a() throws JavaModelException", "diff": ["-\t\t\"toString[METHOD_REF]{toString(), Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, \"+this.positions+R_DICNRNS+\"}\\n\" + ", "-\t\t\"toto[FIELD_REF]{toto, Lbugs.b115662.Tests;, I, toto, null, \"+this.positions+R_DICNRNS+\"}\"", "+\t\t\"toString[METHOD_REF]{toString(), Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, \"+this.positions+R_DRICNRNS+\"}\\n\" + ", "+\t\t\"toto[FIELD_REF]{toto, Lbugs.b115662.Tests;, I, toto, null, \"+this.positions+R_DRICNRNS+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a78ee19bcea1d32ad1e7935c6646fde8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java", "commitBeforeChange": "522e84acc5c220c07378cd67640c99884ac9cc9d", "commitAfterChange": "e5f48a4d4e39a733649e1d7678dd3cc38b1f57e5", "methodNumberBeforeChange": 241, "methodNumberAfterChange": 241, "signatureBeforeChange": " \tpublic void testSuperMethodInvocation()", "signatureAfterChange": " \tpublic void testSuperMethodInvocation()", "diff": ["-\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\tif (ast.apiLevel() >= AST.JLS3) {", "-\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\tif (ast.apiLevel() == AST.JLS2) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7acb2ea5e6477d60c37e6c11b486caa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "c9d6ebaa0d13be6fc2e748dee3cae777e5c9d89a", "commitAfterChange": "0011958a7781b8e34a2680d48e8c358ce935fb15", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "\r public void initialize()", "signatureAfterChange": "\r public void initialize()", "diff": ["-\tthis.inInitializerStack[this.inInitializerPtr = 0] = false;\r", "+\tthis.inFieldInitializationStack[this.inFieldInitializationPtr = 0] = false;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7b99dfee82abcfe777f5366cae3e845", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRootInfo.java", "commitBeforeChange": "0ff40cf9419ba675580163e104091de3b2c53d9a", "commitAfterChange": "afc22404ca214f45a7f8e88b727a46f3daf1f07d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " synchronized Object[] getNonJavaResources(IJavaProject project, IResource underlyingResource, PackageFragmentRoot handle)", "signatureAfterChange": " synchronized Object[] getNonJavaResources(IJavaProject project, IResource underlyingResource, PackageFragmentRoot handle)", "diff": ["-\tObject[] nonJavaResources = this.fNonJavaResources;", "+\tObject[] nonJavaResources = this.nonJavaResources;", "-\t\tthis.fNonJavaResources = nonJavaResources;", "+\t\tthis.nonJavaResources = nonJavaResources;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7c4e3346caea0dfdedd2b240047f565", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic boolean visit(DoubleLiteral doubleLiteral, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(DoubleLiteral doubleLiteral, BlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (doubleLiteral.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (doubleLiteral.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8737728cc5c0ba6a87146662ff161d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 93, "signatureBeforeChange": " \tpublic boolean visit( \t\tQualifiedSuperReference qualifiedSuperReference, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tQualifiedSuperReference qualifiedSuperReference, \t\tBlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (qualifiedSuperReference.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (qualifiedSuperReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8d5dcdd53d0bf175f12c38b7dcd6b8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "058f4956c302999db0dab277cf91883f2d016e2b", "commitAfterChange": "27d9d524a3b624cfc1260a727d1dfb92d53ae22a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, boolean leftIsCast, Expression right, int rightTypeId, boolean rightIsCast)", "signatureAfterChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, boolean leftIsCast, Expression right, int rightTypeId, boolean rightIsCast)", "diff": ["-\t\t\tif ((left.bits & UnnecessaryCastMask) == 0 && left.resolvedType.isBaseType()) {", "+\t\t\tif ((left.bits & UnnecessaryCastMASK) == 0 && left.resolvedType.isBaseType()) {", "-\t\t\tif ((right.bits & UnnecessaryCastMask) == 0 && right.resolvedType.isBaseType()) {", "+\t\t\tif ((right.bits & UnnecessaryCastMASK) == 0 && right.resolvedType.isBaseType()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8e2dbfc00d9031b787fd5194141ddd2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTextCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "  public void test071() throws JavaModelException", "signatureAfterChange": "  public void test071() throws JavaModelException", "diff": ["-\t\t\"BasicTestTextIns[METHOD_REF<CONSTRUCTOR>]{BasicTestTextIns(int, float, Class), Ljavadoc.text.BasicTestTextIns;, (IFLjava.lang.Class;)V, BasicTestTextIns, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"BasicTestTextIns[METHOD_REF<CONSTRUCTOR>]{BasicTestTextIns(), Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"BasicTestTextIns[METHOD_REF<CONSTRUCTOR>]{BasicTestTextIns(int, float, Class), Ljavadoc.text.BasicTestTextIns;, (IFLjava.lang.Class;)V, BasicTestTextIns, (xxx, real, clazz), \"+this.positions+R_DRINR+\"}\\n\" + ", "+\t\t\"BasicTestTextIns[METHOD_REF<CONSTRUCTOR>]{BasicTestTextIns(), Ljavadoc.text.BasicTestTextIns;, ()V, BasicTestTextIns, null, \"+this.positions+R_DRINR+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8f0a3039da0cf2f0323c88debb086c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/CompilationResult.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tprivate void quickPrioritize(IProblem[] list, int left, int right)", "signatureAfterChange": " \t \tprivate void quickPrioritize(CategorizedProblem[] list, int left, int right)", "diff": ["-\tprivate void quickPrioritize(IProblem[] list, int left, int right) {", "+\tprivate void quickPrioritize(CategorizedProblem[] list, int left, int right) {", "-\t\t\t\tIProblem tmp = list[left];", "+\t\t\t\tCategorizedProblem tmp = list[left];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a925771f0aecf82a992f65b1499570cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SyntheticMethodBinding.java", "commitBeforeChange": "d3f4f7dc5cd4aef3b0604e519603fa156a7db8f9", "commitAfterChange": "f1f4a4119f1226b6996589389edda1c170b485ed", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t public void initializeConstructorAccessor(MethodBinding accessedConstructor)", "signatureAfterChange": " \t public void initializeConstructorAccessor(MethodBinding accessedConstructor)", "diff": ["-\t\t\t\t\tif (CharOperation.equals(this.selector, methods[i].selector)", "-\t\t\t\t\t\t&& areParametersEqual(methods[i])) {", "+\t\t\t\t\tif (CharOperation.equals(this.selector, methods[i].selector) && areParameterErasuresEqual(methods[i])) {", "-\t\t\t\t\t\tif (CharOperation.equals(this.selector, knownSyntheticMethods[i].selector)", "-\t\t\t\t\t\t\t\t&& areParametersEqual(knownSyntheticMethods[i])) {", "+\t\t\t\t\t\tif (CharOperation.equals(this.selector, knownSyntheticMethods[i].selector) && areParameterErasuresEqual(knownSyntheticMethods[i])) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a92cb1836d615009053c9291e238697b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMirrorImpl.java", "commitBeforeChange": "c4f17ac79e05c4dff8c3cc6e660e1fc73ee3406f", "commitAfterChange": "29d06747dc9924aaa37b6f5478bee32ae657345a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic DeclaredType getAnnotationType()", "signatureAfterChange": "  \tpublic DeclaredType getAnnotationType()", "diff": ["-\t\treturn DeclaredTypeImpl.newDeclaredTypeImpl(annoType);", "+\t\treturn Factory.newDeclaredType(annoType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9c626ae29130ee5ade30ad046604871", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "7b0f09fd73b49ba4dc507ba4a634d425ab3e92c2", "commitAfterChange": "90ccf89195ab29ecb5a569cf526f683aefa3263d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public void destroy()", "signatureAfterChange": "\r public void destroy()", "diff": ["-\t\t\tSystem.out.println(\"Decrementing use count of shared working copy \" + this.toDebugString());//$NON-NLS-1$\r", "+\t\t\tSystem.out.println(\"Decrementing use count of shared working copy \" + this.toStringWithAncestors());//$NON-NLS-1$\r", "-\t\t\t\t\tSystem.out.println(\"Destroying shared working copy \" + this.toDebugString());//$NON-NLS-1$\r", "+\t\t\t\t\tSystem.out.println(\"Destroying shared working copy \" + this.toStringWithAncestors());//$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9e54322beabaefa5cdc20f5e719be70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "60e84a84d2c785be17a379ead199176b00163ca2", "commitAfterChange": "dd81d5614e9912f7c701e3f5c6100178a60401f0", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void manageSyntheticWriteAccessIfNecessary( \t\tBlockScope currentScope, \t\tFieldBinding fieldBinding, \t\tTypeBinding lastReceiverType)", "signatureAfterChange": " \tpublic void manageSyntheticWriteAccessIfNecessary( \t\tBlockScope currentScope, \t\tFieldBinding fieldBinding, \t\tTypeBinding lastReceiverType)", "diff": ["-\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type", "+\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\t\t&& ((currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4", "+\t\t\t&& ((currentScope.environment().options.targetJDK >= CompilerOptions.JDK1_2"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab51ff06912dd247c32d1f98e8c42217", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/GetKeyVisitor.java", "commitBeforeChange": "bcd9f90c4bf8ea31b98c4f2aa0b3396ae50236cb", "commitAfterChange": "44a4773fe1e43ab7b0b1007569e920d404685d06", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic boolean visit(ClassInstanceCreation node)", "signatureAfterChange": " \tpublic boolean visit(ClassInstanceCreation node)", "diff": ["-\t\tAssert.assertNotNull(constructorBinding);", "-\t\tAssert.assertNotNull(constructorBinding.getKey());", "+\t\tTestCase.assertNotNull(constructorBinding);", "+\t\tTestCase.assertNotNull(constructorBinding.getKey());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab5ed6b3ebf4fbc875c011c273c57dd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tsynchronized ITypeBinding resolveType(Type type)", "signatureAfterChange": " \tsynchronized ITypeBinding resolveType(Type type)", "diff": ["-\t\t\t\t\t\treturn getTypeBinding(this.scope.createArray(arrayBinding.leafComponentType, arrayType.getDimensions()));", "+\t\t\t\t\t\treturn getTypeBinding(this.scope.createArrayType(arrayBinding.leafComponentType, arrayType.getDimensions()));", "-\t\t\t\t\t\treturn getTypeBinding(this.scope.createArray(binding, arrayType.getDimensions()));", "+\t\t\t\t\t\treturn getTypeBinding(this.scope.createArrayType(binding, arrayType.getDimensions()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab7c04a3bfa99222cc6a95cff3037ad5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "60adc6e9bd2a19d1f00a26879d59da4db15980bb", "commitAfterChange": "2fa8bdc58397f8ba42986ed8442348506f4b1424", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r public void setAssertIdentifierSeverity(int flag)", "signatureAfterChange": "\r public void setAssertIdentifierSeverity(int flag)", "diff": ["-\t\tcase ERROR : \r", "+\t\tcase Error : \r", "-\t\tcase WARNING : \r", "+\t\tcase Warning : \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abc51c4388e360b74948c63ffdc89b50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "adb1e4d21f756fdc893d84befd3e859cfa2aa662", "commitAfterChange": "2941812daedfecddb313ba4dd0685bac7c26b287", "methodNumberBeforeChange": 395, "methodNumberAfterChange": 395, "signatureBeforeChange": " \tpublic void test376()", "signatureAfterChange": " \tpublic void test376()", "diff": ["-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_ARRAY_INITIALIZER_BRACE_POSITION, DefaultCodeFormatterConstants.END_OF_LINE);", "-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_ARRAY_INITIALIZER_CONTINUATION_INDENTATION, \"1\");", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ARRAY_INITIALIZER, DefaultCodeFormatterConstants.END_OF_LINE);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_CONTINUATION_INDENTATION_FOR_ARRAY_INITIALIZER, \"1\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac4e63dde4e3b79c80c4e49e1762fc14", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTypeCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " public void test109() throws JavaModelException", "signatureAfterChange": " public void test109() throws JavaModelException", "diff": ["-\t\t\t\"ZBasicTestTypes[TYPE_REF]{ZBasicTestTypes, javadoc.types, Ljavadoc.types.ZBasicTestTypes;, null, null, \"+this.positions+R_DICNR+\"}\\n\" + ", "-\t\t\t\"ZBasicTestTypes[JAVADOC_TYPE_REF]{{@link ZBasicTestTypes}, javadoc.types, Ljavadoc.types.ZBasicTestTypes;, null, null, \"+this.positions+R_DICNRIT+\"}\"", "+\t\t\t\"ZBasicTestTypes[TYPE_REF]{ZBasicTestTypes, javadoc.types, Ljavadoc.types.ZBasicTestTypes;, null, null, \"+this.positions+R_DRICNR+\"}\\n\" + ", "+\t\t\t\"ZBasicTestTypes[JAVADOC_TYPE_REF]{{@link ZBasicTestTypes}, javadoc.types, Ljavadoc.types.ZBasicTestTypes;, null, null, \"+this.positions+R_DRICNRIT+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac5040344899c1844f6e258baf794015", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "522e84acc5c220c07378cd67640c99884ac9cc9d", "commitAfterChange": "e5f48a4d4e39a733649e1d7678dd3cc38b1f57e5", "methodNumberBeforeChange": 302, "methodNumberAfterChange": 302, "signatureBeforeChange": "\t \t \tpublic void testMethodInvocation()", "signatureAfterChange": "\t \t \tpublic void testMethodInvocation()", "diff": ["-\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\tif (ast.apiLevel() >= AST.JLS3) {", "-\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\tif (ast.apiLevel() >= AST.JLS3) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac938860c2b3142bc8945bc2dfc02369", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 364, "methodNumberAfterChange": 364, "signatureBeforeChange": " protected void markEnclosingMemberWithLocalType()", "signatureAfterChange": " protected void markEnclosingMemberWithLocalType()", "diff": ["-\t\t\tnode.bits |= ASTNode.HasLocalTypeMASK;", "+\t\t\tnode.bits |= ASTNode.HasLocalType;", "-\t\t((ASTNode)this.referenceContext).bits |= ASTNode.HasLocalTypeMASK;", "+\t\t((ASTNode)this.referenceContext).bits |= ASTNode.HasLocalType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad0b6ae366f0715a418c8d3d50070732", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic boolean visit(CastExpression castExpression, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(CastExpression castExpression, BlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (castExpression.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (castExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad1f2d83cff2387f40e248a420748394", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tbreakLabel = new Label();", "-\t\tcontinueLabel = new Label();", "+\t\tbreakLabel = new BranchLabel();", "+\t\tcontinueLabel = new BranchLabel();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad850a6abbdd6dda038142bf3ab21d9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "60adc6e9bd2a19d1f00a26879d59da4db15980bb", "commitAfterChange": "2fa8bdc58397f8ba42986ed8442348506f4b1424", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r public void setNonExternalizedStringLiteralSeverity(int flag)", "signatureAfterChange": "\r public void setNonExternalizedStringLiteralSeverity(int flag)", "diff": ["-\t\tcase ERROR : \r", "+\t\tcase Error : \r", "-\t\tcase WARNING : \r", "+\t\tcase Warning : \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adc6c5e3e6e14d432cd0ab2e7917cd0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "6fdaa2b9d78c89a1ed2269f5279c3e02cee4b6cd", "commitAfterChange": "8ec1d344fc5f9b16a04a2a15e36cb4db52cac4eb", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic HashMap getTemporaryCache()", "signatureAfterChange": " \tpublic HashMap getTemporaryCache()", "diff": ["-\t\tHashMap result = (HashMap)this.temporaryCache.getCurrent();", "+\t\tHashMap result = (HashMap)this.temporaryCache.get();", "-\t\t\tthis.temporaryCache.setCurrent(result);", "+\t\t\tthis.temporaryCache.set(result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae6cf9e03327cdb44849559ad16164ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "60adc6e9bd2a19d1f00a26879d59da4db15980bb", "commitAfterChange": "2fa8bdc58397f8ba42986ed8442348506f4b1424", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public void setUnusedLocalVariableSeverity(int flag)", "signatureAfterChange": "\r public void setUnusedLocalVariableSeverity(int flag)", "diff": ["-\t\tcase ERROR : \r", "+\t\tcase Error : \r", "-\t\tcase WARNING : \r", "+\t\tcase Warning : \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aebda05d51cd04022bebafd17a3923ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "d7e7bb059880a6c87ea3290708d2d0a9f9e7ebe8", "commitAfterChange": "a415220ad0bdc743d286b40ccc481ededfe8132e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void generateOptimizedLogicalXor( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedLogicalXor( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "diff": ["-\t\t\tif ((condConst = left.conditionalConstant()) != NotAConstant) {", "+\t\t\tif ((condConst = left.optimizedBooleanConstant()) != NotAConstant) {", "-\t\t\tif ((condConst = right.conditionalConstant()) != NotAConstant) {", "+\t\t\tif ((condConst = right.optimizedBooleanConstant()) != NotAConstant) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aeef5440247d78a1812d7f52f4c374ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "60e84a84d2c785be17a379ead199176b00163ca2", "commitAfterChange": "dd81d5614e9912f7c701e3f5c6100178a60401f0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": " public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope)", "diff": ["-\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type", "+\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\t&& ((currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4", "+\t\t&& ((currentScope.environment().options.targetJDK >= CompilerOptions.JDK1_2"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af09708351cd17ecf9759d854345349c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "57be54931a21775011b9d46837f226f82fd878f2", "commitAfterChange": "69b7d322507c416d24ecb0826f4b72b49ddbac45", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void recordReturnFrom(UnconditionalFlowInfo flowInfo)", "signatureAfterChange": "  public void recordReturnFrom(UnconditionalFlowInfo flowInfo)", "diff": ["-\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0) {", "-\t\tif ((this.initsOnReturn.tagBits & FlowInfo.UNREACHABLE) == 0) {", "+\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE_OR_DEAD) == 0) {", "+\t\tif ((this.initsOnReturn.tagBits & FlowInfo.UNREACHABLE_OR_DEAD) == 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af5330cabaae50289b66b4ebf1008493", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 99, "signatureBeforeChange": " \tpublic boolean visit( \t\tSingleTypeReference singleTypeReference, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tSingleTypeReference singleTypeReference, \t\tBlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (singleTypeReference.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (singleTypeReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af727c5829db0089680c3163325f7833", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "0f5d04adf9d2fa735fce5517c85c8317372cf6c0", "commitAfterChange": "6cefacaaf91a5190221cb83191ea60dad1636887", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic final static boolean endsWithIgnoreCase(String str, String end)", "signatureAfterChange": " \tpublic final static boolean endsWithIgnoreCase(String str, String end)", "diff": ["-\t\t\tif(Character.toLowerCase(end.charAt(endLength - i)) != Character.toLowerCase(str.charAt(strLength - i)))", "+\t\t\tif(ScannerHelper.toLowerCase(end.charAt(endLength - i)) != ScannerHelper.toLowerCase(str.charAt(strLength - i)))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afda1d6f379bd39ee9edbbe18caee36e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ClassInstanceCreation.java", "commitBeforeChange": "06e8c1940b7fce6b86315eb81900d27eb1279bce", "commitAfterChange": "91510ee1ea5206403f95c9b316aaa14af70c8d8e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tfinal List internalGetChildListProperty(ChildListPropertyDescriptor property)", "signatureAfterChange": " \tfinal List internalGetChildListProperty(ChildListPropertyDescriptor property)", "diff": ["-\t\tif (property == TYPE_PARAMETERS_PROPERTY) {", "-\t\t\treturn typeParameters();", "+\t\tif (property == TYPE_ARGUMENTS_PROPERTY) {", "+\t\t\treturn typeArguments();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afec00f45968870454471627f7b5fe8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "c93b7fc02953335388042ab5bd4ec34f70464821", "commitAfterChange": "c9213ae595dd32af0d2b3bd7c31b733e8b1d0dd1", "methodNumberBeforeChange": 382, "methodNumberAfterChange": 384, "signatureBeforeChange": " public void testBug148380_SearchAllTypes_cu_wksp() throws CoreException, JavaModelException", "signatureAfterChange": " public void testBug148380_SearchAllTypes_cu_wksp() throws CoreException, JavaModelException", "diff": ["-\tTestTypeNameMatchRequestor requestor = new TestTypeNameMatchRequestor();", "+\tTypeNameMatchCollector requestor = new TypeNameMatchCollector();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b02db5775db2efbba018a34fe6658647", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "adb1e4d21f756fdc893d84befd3e859cfa2aa662", "commitAfterChange": "2941812daedfecddb313ba4dd0685bac7c26b287", "methodNumberBeforeChange": 398, "methodNumberAfterChange": 398, "signatureBeforeChange": " \tpublic void test379()", "signatureAfterChange": " \tpublic void test379()", "diff": ["-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_ARRAY_INITIALIZER_BRACE_POSITION, DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED);", "-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_ARRAY_INITIALIZER_CONTINUATION_INDENTATION, \"1\");", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ARRAY_INITIALIZER, DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_CONTINUATION_INDENTATION_FOR_ARRAY_INITIALIZER, \"1\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b02e0f8ea1b601d465b0af286194c0bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected boolean hasPossibleNodes(int start, int end)", "signatureAfterChange": " protected boolean hasPossibleNodes(int start, int end)", "diff": ["-\t\tAstNode node = (AstNode) nodes[i];", "+\t\tASTNode node = (ASTNode) nodes[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0ae38cf20ccec9afaf56f158a20ed60", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "0927ffa25a2592bfca0a67c9cc9e0e69775118de", "commitAfterChange": "7b934c773095ee4cd83d9fe1d55bbb70d8656cbb", "methodNumberBeforeChange": 181, "methodNumberAfterChange": 181, "signatureBeforeChange": "  public void invokeJavaLangAssertionErrorConstructor(int typeBindingID)", "signatureAfterChange": "  public void invokeJavaLangAssertionErrorConstructor(int typeBindingID)", "diff": ["-\t\tcase T_Object :", "-\t\tcase T_String :", "+\t\tcase T_JavaLangObject :", "+\t\tcase T_JavaLangString :"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0c745146deaf353852997289b1a78f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope unused)", "signatureAfterChange": " \tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope unused)", "diff": ["-\t\t\tif ((typeDeclaration.bits & ASTNode.IsAnonymousTypeMASK) != 0) {\t\t\t\t", "+\t\t\tif ((typeDeclaration.bits & ASTNode.IsAnonymousType) != 0) {\t\t\t\t", "-\t\t\tif ((typeDeclaration.bits & ASTNode.IsAnonymousTypeMASK) != 0) {\t\t\t\t", "+\t\t\tif ((typeDeclaration.bits & ASTNode.IsAnonymousType) != 0) {\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b113fbf75a6483daf8a87b06f7b9c0c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/FactoryPathConfigurationBlock.java", "commitBeforeChange": "6a39aeee024a65d73e9084e99bead655e3ded072", "commitAfterChange": "30a0d8b166ac2fa2854a231544dfecb8e382982a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t@SuppressWarnings(\"unchecked\" \tprivate List<FactoryContainer> getListContents()", "signatureAfterChange": " \t@SuppressWarnings(\"unchecked\" \tprivate List<FactoryPathEntry> getListContents()", "diff": ["-\tprivate List<FactoryContainer> getListContents() {", "-\t\tList<FactoryContainer> contents= fFactoryPathList.getElements();", "+\tprivate List<FactoryPathEntry> getListContents() {", "+\t\tList<FactoryPathEntry> contents= fFactoryPathList.getElements();", "+\t\treturn contents;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1a7f5a37221fab5ee0f888a59868045", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "60adc6e9bd2a19d1f00a26879d59da4db15980bb", "commitAfterChange": "2fa8bdc58397f8ba42986ed8442348506f4b1424", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public void setImportProblemSeverity(int flag)", "signatureAfterChange": "\r public void setImportProblemSeverity(int flag)", "diff": ["-\t\tcase ERROR : \r", "+\t\tcase Error : \r", "-\t\tcase WARNING : \r", "+\t\tcase Warning : \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1a937294bdec90b0da3eaf2e90b5925", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic boolean visit( \t\tAllocationExpression allocationExpression, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tAllocationExpression allocationExpression, \t\tBlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (allocationExpression.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (allocationExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2021d88cc416fd6f0a69f498790abe2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/CompilationResult.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tprivate static void quickSort(IProblem[] list, int left, int right)", "signatureAfterChange": " \t \tprivate static void quickSort(CategorizedProblem[] list, int left, int right)", "diff": ["-\tprivate static void quickSort(IProblem[] list, int left, int right) {", "+\tprivate static void quickSort(CategorizedProblem[] list, int left, int right) {", "-\t\t\t\tIProblem tmp = list[left];", "+\t\t\t\tCategorizedProblem tmp = list[left];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b24827b6e6d34dc6dc70c28532d2c3ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/IndexedFile.java", "commitBeforeChange": "70b32514588b091b133b82607c10c8c78d5b8fe3", "commitAfterChange": "aaa63e79319475935e2167f567ed10fa3d10e895", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic IndexedFile(IDocument document, int fileNum)", "signatureAfterChange": " \tpublic IndexedFile(SearchDocument document, int fileNum)", "diff": ["-\tpublic IndexedFile(IDocument document, int fileNum) {", "+\tpublic IndexedFile(SearchDocument document, int fileNum) {", "-\t\tthis.path= document.getName();", "+\t\tthis.path= document.getPath();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b24b5da4fb9e1be25066b9a9452daeaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "a874d0a70b41fd8d47271a00c32dea355d363a74", "commitAfterChange": "e567f019a8e7a1152204aae3d1ce4204c41c7aea", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\t\tif (accuracy != IJavaSearchResultCollector.EXACT_MATCH) return;", "+\t\tif (accuracy != SearchMatch.A_ACCURATE) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b292bb102daea60986d9c100fcaebdbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public int literalIndexForJavaLangBooleanTYPE()", "signatureAfterChange": " public int literalIndexForJavaLangBooleanTYPE()", "diff": ["-\tif ((index = wellKnownFields[TYPE_BOOLEAN_FIELD]) == 0) {", "+\tif ((index = wellKnownFields[JAVA_LANG_BOOLEAN_TYPE_FIELD]) == 0) {", "-\t\tindex = wellKnownFields[TYPE_BOOLEAN_FIELD] = currentIndex++;", "+\t\tindex = wellKnownFields[JAVA_LANG_BOOLEAN_TYPE_FIELD] = currentIndex++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b31fe287c5fe4bfe624b14c0304920fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "60adc6e9bd2a19d1f00a26879d59da4db15980bb", "commitAfterChange": "2fa8bdc58397f8ba42986ed8442348506f4b1424", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r public void setMethodWithConstructorNameSeverity(int flag)", "signatureAfterChange": "\r public void setMethodWithConstructorNameSeverity(int flag)", "diff": ["-\t\tcase ERROR : \r", "+\t\tcase Error : \r", "-\t\tcase WARNING : \r", "+\t\tcase Warning : \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b328ded56e884ced7c525de5cf72e629", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "79620cc5a2ab93e8afb2f50dfb60d3aac3ac52a1", "commitAfterChange": "bb83bb6bb9594ac07e759b1e208acbe513439625", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private final void checkNonNullTag(int commentStart, int commentEnd)", "signatureAfterChange": " private final void checkNonNullTag(int commentStart, int commentEnd)", "diff": ["-\t\t\t\telse if (!ScannerHelper.isWhitespace(currentChar)) {", "+\t\t\t\telse if (!CharOperation.isWhitespace(currentChar)) {", "-\t\t\t\tif (currentChar != '*' && !ScannerHelper.isWhitespace(currentChar)) {", "+\t\t\t\tif (currentChar != '*' && !CharOperation.isWhitespace(currentChar)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b388f4e59989669c3b6fefb236d95979", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 227, "methodNumberAfterChange": 227, "signatureBeforeChange": " public void javadocMissingParamTag(char[] name, int sourceStart, int sourceEnd, int modifiers)", "signatureAfterChange": " public void javadocMissingParamTag(char[] name, int sourceStart, int sourceEnd, int modifiers)", "diff": ["-\tboolean overriding = (modifiers & (CompilerModifiers.AccImplementing|CompilerModifiers.AccOverriding)) != 0;", "+\tboolean overriding = (modifiers & (ExtraCompilerModifiers.AccImplementing|ExtraCompilerModifiers.AccOverriding)) != 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3b82aa8168c2451b383485c382d1553", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "89aa9a93a47695cf0df5a96fb88f12b96bbc9c64", "commitAfterChange": "45ae48e8cd32bd2f1c31e3208f3342c4041866de", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tprivate void formatOpeningBrace(String bracePosition, boolean insertSpaceBeforeBrace)", "signatureAfterChange": "  \tprivate void formatOpeningBrace(String bracePosition, boolean insertSpaceBeforeBrace)", "diff": ["-\t\tif (bracePosition.equals(FormattingPreferences.NEXT_LINE)) {", "+\t\tif (bracePosition.equals(DefaultCodeFormatterConstants.NEXT_LINE)) {", "-\t\t} else if (bracePosition.equals(FormattingPreferences.NEXT_LINE_SHIFTED)) {", "+\t\t} else if (bracePosition.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3dbd6cfa9c44365de1ff15f01383767", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "da3abb814c31b6e1c2d43312de494af316e19273", "commitAfterChange": "8af0e3d96f10bb27360a77bbd330487cf3fdc8dd", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected boolean parseParam()", "signatureAfterChange": " \tprotected boolean parseParam()", "diff": ["-\t\t\t\t\tend = getEndPosition();", "+\t\t\t\t\tend = getTokenEndPosition();", "-\t\t\tend = getEndPosition();", "+\t\t\tend = getTokenEndPosition();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3e31a00d43d435aa9c4fe2e2d7465fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AbstractSelectionTest.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void checkMethodParse( \t\tchar[] source,  \t\tint selectionStart, \t\tint selectionEnd,  \t\tString expectedSelection,  \t\tString expectedUnitToString,  \t\tString expectedSelectionIdentifier,  \t\tString expectedSelectedSource, \t\tString[] expectedLabels, \t\tString testName)", "signatureAfterChange": " public void checkMethodParse( \t\tchar[] source,  \t\tint selectionStart, \t\tint selectionEnd,  \t\tString expectedSelection,  \t\tString expectedUnitToString,  \t\tString expectedSelectionIdentifier,  \t\tString expectedSelectedSource, \t\tString[] expectedLabels, \t\tString testName)", "diff": ["-\tAstNode foundMethod = null;", "+\tASTNode foundMethod = null;", "-\t\t\tAstNode method = findMethod(type, selectionStart);", "+\t\t\tASTNode method = findMethod(type, selectionStart);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b40fd143c422dac3725192b26b7ef0e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDelta.java", "commitBeforeChange": "bc334d447f9fedc80a94198538b7c7d486280e6a", "commitAfterChange": "fb9438df420a9ff76955a367112f1094d4a61ae7", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "\r public String toDebugString(int depth)", "signatureAfterChange": "\r public String toDebugString(int depth)", "diff": ["-\t\tbuffer.append(\"MOVED_FROM(\" + ((JavaElement)getMovedFromElement()).toDebugString() + \")\"); //$NON-NLS-1$ //$NON-NLS-2$\r", "+\t\tbuffer.append(\"MOVED_FROM(\" + ((JavaElement)getMovedFromElement()).toStringWithAncestors() + \")\"); //$NON-NLS-1$ //$NON-NLS-2$\r", "-\t\tbuffer.append(\"MOVED_TO(\" + ((JavaElement)getMovedToElement()).toDebugString() + \")\"); //$NON-NLS-1$ //$NON-NLS-2$\r", "+\t\tbuffer.append(\"MOVED_TO(\" + ((JavaElement)getMovedToElement()).toStringWithAncestors() + \")\"); //$NON-NLS-1$ //$NON-NLS-2$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b438d0265034214ff00f4474f399c4b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprivate boolean dumpEqualityExpression( \t\tBinaryExpression binaryExpression, \t\tint operator, \t\tBlockScope scope)", "signatureAfterChange": "  \tprivate boolean dumpEqualityExpression( \t\tBinaryExpression binaryExpression, \t\tint operator, \t\tBlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (binaryExpression.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (binaryExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b46fcf2554faba7eff0811dc42093309", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 120, "signatureBeforeChange": " public void invalidMethod(MessageSend messageSend, MethodBinding method)", "signatureAfterChange": " public void invalidMethod(MessageSend messageSend, MethodBinding method)", "diff": ["-\t\t\t\tif ((messageSend.bits & AstNode.InsideJavadoc) != 0) {", "+\t\t\t\tif ((messageSend.bits & ASTNode.InsideJavadoc) != 0) {", "-\tif ((messageSend.bits & AstNode.InsideJavadoc) != 0) {", "+\tif ((messageSend.bits & ASTNode.InsideJavadoc) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4799f944a05133a940b370b71d3a431", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 117, "signatureBeforeChange": "  public void test148() throws JavaModelException", "signatureAfterChange": "  public void test148() throws JavaModelException", "diff": ["-\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(int, float, Class), Ljavadoc.methods.tags.BasicTestMethods;, (IFLjava.lang.Class;)V, BasicTestMethods, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, BasicTestMethods, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(int, float, Class), Ljavadoc.methods.tags.BasicTestMethods;, (IFLjava.lang.Class;)V, BasicTestMethods, (xxx, real, clazz), \"+this.positions+R_DRINR+\"}\\n\" + ", "+\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, BasicTestMethods, null, \"+this.positions+R_DRINR+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b47f481d99e970597d7d884b9bcc6b2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void generateOptimizedBoolean( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedBoolean( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tBranchLabel trueLabel, \t\tBranchLabel falseLabel, \t\tboolean valueRequired)", "diff": ["-\t\tLabel trueLabel,", "-\t\tLabel falseLabel,", "+\t\tBranchLabel trueLabel,", "+\t\tBranchLabel falseLabel,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4880f91d5c33264f722008ec183ceb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/CompilationResult.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic IProblem[] getTasks()", "signatureAfterChange": " \tpublic CategorizedProblem[] getTasks()", "diff": ["-\tpublic IProblem[] getTasks() {", "+\tpublic CategorizedProblem[] getTasks() {", "-\t\t\t\tSystem.arraycopy(this.tasks, 0, (this.tasks = new IProblem[this.taskCount]), 0, this.taskCount);", "+\t\t\t\tSystem.arraycopy(this.tasks, 0, (this.tasks = new CategorizedProblem[this.taskCount]), 0, this.taskCount);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4f9e38b1872b5e671792cb9bce053d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRootInfo.java", "commitBeforeChange": "0ff40cf9419ba675580163e104091de3b2c53d9a", "commitAfterChange": "afc22404ca214f45a7f8e88b727a46f3daf1f07d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Object[] getNonJavaResources()", "signatureAfterChange": " public Object[] getNonJavaResources()", "diff": ["-\tfNonJavaResources = NO_NON_JAVA_RESOURCES;", "-\treturn fNonJavaResources;", "+\tnonJavaResources = NO_NON_JAVA_RESOURCES;", "+\treturn nonJavaResources;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b555ed93d7ae757c0d2d699d66ef49dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic boolean visit( \t\tArrayAllocationExpression arrayAllocationExpression, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tArrayAllocationExpression arrayAllocationExpression, \t\tBlockScope scope)", "diff": ["-\t\t\tfinal int numberOfParens = (arrayAllocationExpression.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\t\tfinal int numberOfParens = (arrayAllocationExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5708a8f6d0197778701def1b7646c25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/OutputFolderTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void testProjectWith2Src2Bin() throws JavaModelException", "signatureAfterChange": "  \tpublic void testProjectWith2Src2Bin() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5d0cd601ed67ba67ddc01c8389a00de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceTypeElementInfo.java", "commitBeforeChange": "7234934f3efed703cbf030a33d03d36a447aeef6", "commitAfterChange": "34106cbe5c11d866864bb97a52bcf55f920c9662", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public ISourceField[] getFields()", "signatureAfterChange": " public ISourceField[] getFields()", "diff": ["-\tint length = this.fChildren.length;", "+\tint length = this.children.length;", "-\t\tIJavaElement child = this.fChildren[i];", "+\t\tIJavaElement child = this.children[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b61da7e3fa691b0939002c41afea5d3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "5e70a582e36fd39d7629b8f556b66f50a1050058", "commitAfterChange": "5ca447c521262374b5199c22b8bb8d32a007f444", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "  \tprivate void printBlockComment(char[] s, boolean isJavadoc)", "signatureAfterChange": "  \tprivate void printBlockComment(char[] s, boolean isJavadoc)", "diff": ["-\t\t\t\t\t\tif (Character.isWhitespace((char) currentCharacter)) {", "+\t\t\t\t\t\tif (ScannerHelper.isWhitespace((char) currentCharacter)) {", "-\t\t\t\t\t\t\twhile(currentCharacter != -1 && currentCharacter != '\\r' && currentCharacter != '\\n' && Character.isWhitespace((char) currentCharacter)) {", "+\t\t\t\t\t\t\twhile(currentCharacter != -1 && currentCharacter != '\\r' && currentCharacter != '\\n' && ScannerHelper.isWhitespace((char) currentCharacter)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b67f8d6b9aba0ffdc2918753ba2bb082", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "77ac300d6d124e9b071b4e62fab3a583e6eecdc4", "commitAfterChange": "fbf658958d1eb066a4b5c16fdea253c3d8d5019c", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tpublic boolean isCompatibleWith(TypeBinding left, Scope someScope)", "signatureAfterChange": " \t \tpublic boolean isCompatibleWith(TypeBinding left, Scope someScope)", "diff": ["-\t\tfinal MethodBinding sam = left.getSingleAbstractMethod(this.parentScope);", "+\t\tfinal MethodBinding sam = left.getSingleAbstractMethod(this.enclosingScope);", "-\t\tcopy.resolveType(this.parentScope);", "+\t\tcopy.resolveType(this.enclosingScope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6a02d84afefd7e0f2153ab1784b02d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/IndexSummary.java", "commitBeforeChange": "a7e6b3d174d33a8a3b8d03f466c6cb3381f5f0c9", "commitAfterChange": "2e2e66f7f68b994d0931afecfd3c1e559acd59d5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public int getFirstBlockLocationForPrefix(char[] prefix)", "signatureAfterChange": "\r public int getFirstBlockLocationForPrefix(char[] prefix)", "diff": ["-\t\tFirstWordInBlock entry = (FirstWordInBlock) firstWordsInBlocks.elementAt(mid);\r", "+\t\tFirstWordInBlock entry = (FirstWordInBlock) firstWordsInBlocks.get(mid);\r", "-\t\t\tFirstWordInBlock entry = (FirstWordInBlock) firstWordsInBlocks.elementAt(match);\r", "+\t\t\tFirstWordInBlock entry = (FirstWordInBlock) firstWordsInBlocks.get(match);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6cf277fe48441310a1d7aba96742321", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "bd9b00bcf9923b9da6ff38651a157fa6bc3f2dc8", "commitAfterChange": "ff2b96761b3897e8f6c8feeb8c31198c182dd190", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " private void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " private void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t\tif ((staticFieldInfo.tagBits & FlowInfo.UNREACHABLE) != 0)", "+\t\t\t\tif ((staticFieldInfo.tagBits & FlowInfo.UNREACHABLE_OR_DEAD) != 0)", "-\t\t\t\tif ((nonStaticFieldInfo.tagBits & FlowInfo.UNREACHABLE) != 0)", "+\t\t\t\tif ((nonStaticFieldInfo.tagBits & FlowInfo.UNREACHABLE_OR_DEAD) != 0)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6dda50783001ac9a0eef8c76bb1d69d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "cdbba3fe3494f2d010469af9060ef95e48842233", "commitAfterChange": "35725fdbc820b5d03438d3e4a4d3db79142d2182", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "diff": ["-\t\tcompilationUnitScope().recordReferences(argumentTypes);\r", "+\t\tcompilationUnitScope().recordTypeReferences(argumentTypes);\r", "-\t\t\tcompilationUnitScope().recordReferences(visible[0].thrownExceptions);\r", "+\t\t\tcompilationUnitScope().recordTypeReferences(visible[0].thrownExceptions);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b741be64eddab22f8060b7643b501a56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 102, "signatureBeforeChange": " \tpublic boolean visit(SuperReference superReference, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(SuperReference superReference, BlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (superReference.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (superReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b81f66e611e4da3bd572b03063ec3b73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "130a55997b08af356a22f13721ef702eb35b7557", "commitAfterChange": "5cb7a8282e40bea7ee7271bbdb7d8b845c76f5b3", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r public NameReference getUnspecifiedReferenceOptimized()", "signatureAfterChange": "\r public NameReference getUnspecifiedReferenceOptimized()", "diff": ["-\t\tref.bits &= ~NameReference.RestrictiveFlagMASK;\r", "+\t\tref.bits &= ~AstNode.RestrictiveFlagMASK;\r", "-\tref.bits &= ~NameReference.RestrictiveFlagMASK;\r", "+\tref.bits &= ~AstNode.RestrictiveFlagMASK;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b90062abc59883597baf7d85d372995e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "08e53f04ea3f08ae64f9c886944b4a8be7e4b3d7", "commitAfterChange": "d2ac97129da79ea53e4e3d6f928f1d633472cd5b", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "  public void testCompletionCastIsParent1() throws JavaModelException", "signatureAfterChange": "  public void testCompletionCastIsParent1() throws JavaModelException", "diff": ["-\t\t\"element:zz11    completion:zz11    relevance:\"+(R_DEFAULT + R_CASE + R_EXPECTED_TYPE)+\"\\n\" +", "-\t\t\"element:zz11M    completion:zz11M()    relevance:\"+(R_DEFAULT + R_CASE + R_EXPECTED_TYPE)+\"\\n\" +", "+\t\t\"element:zz11    completion:zz11    relevance:\"+(R_DEFAULT + R_CASE + R_EXACT_EXPECTED_TYPE)+\"\\n\" +", "+\t\t\"element:zz11M    completion:zz11M()    relevance:\"+(R_DEFAULT + R_CASE + R_EXACT_EXPECTED_TYPE)+\"\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9077d4cced47c9e26798bd78ddb8141", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/BinaryExpressionFragmentBuilder.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate boolean buildFragments(Expression expression)", "signatureAfterChange": "  \tprivate boolean buildFragments(Expression expression)", "diff": ["-\t\tif (((expression.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT) != 0) {", "+\t\tif (((expression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9a1479254f9aadb4ea6be7af285c215", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "9fb326cf9292ef697cc0b0a821a4d5b0ffa7d58e", "commitAfterChange": "0a632290335585dcfcbc973314f95aa73bf77586", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r \tprivate void findMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tboolean isCompletingDeclaration,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope,\r \t\tboolean implicitCall)", "signatureAfterChange": "\r \tprivate void findMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tboolean isCompletingDeclaration,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope,\r \t\tboolean implicitCall)", "diff": ["-\t\t\t\t\tcurrentType.methods(),\r", "+\t\t\t\t\tcurrentType.availableMethods(),\r", "-\t\t\t\t\tcurrentType.methods(),\r", "+\t\t\t\t\tcurrentType.availableMethods(),\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba1da35e2e8a322cb5e5ff9a802dcdc2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void testBug47339b()", "signatureAfterChange": " \tpublic void testBug47339b()", "diff": ["-\t\treportMissingJavadoc = CompilerOptions.DISABLED;", "+\t\treportMissingJavadocComments = CompilerOptions.IGNORE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba33ce6da8b9754d633e8fa4a9c5fbf5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "77ac300d6d124e9b071b4e62fab3a583e6eecdc4", "commitAfterChange": "fbf658958d1eb066a4b5c16fdea253c3d8d5019c", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tLambdaExpression copy()", "signatureAfterChange": "  \tLambdaExpression copy()", "diff": ["-\t\tfinal Parser parser = new Parser(this.parentScope.problemReporter(), false);", "+\t\tfinal Parser parser = new Parser(this.enclosingScope.problemReporter(), false);", "-\t\tCompilationUnitDeclaration unit = this.parentScope.referenceCompilationUnit();", "+\t\tCompilationUnitDeclaration unit = this.enclosingScope.referenceCompilationUnit();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bab83130c640fa5bef9523dfc2c7bb61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 227, "methodNumberAfterChange": 227, "signatureBeforeChange": " protected void markInitializersWithLocalType(TypeDeclaration type)", "signatureAfterChange": " protected void markInitializersWithLocalType(TypeDeclaration type)", "diff": ["-\tif (type.fields == null || (type.bits & AstNode.HasLocalTypeMASK) == 0) return;", "+\tif (type.fields == null || (type.bits & ASTNode.HasLocalTypeMASK) == 0) return;", "-\t\t\tfield.bits |= AstNode.HasLocalTypeMASK;", "+\t\t\tfield.bits |= ASTNode.HasLocalTypeMASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baba145ce7d8e274591bc5871de05518", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultASTVisitor.java", "commitBeforeChange": "a2a0577109951f3af96b6ee7e6f23d457b52d52d", "commitAfterChange": "1987bebfc0499fe07d643a641d2e74ff184f5cc7", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void endVisit(FieldDeclaration node)", "signatureAfterChange": " \tpublic void endVisit(IntersectionType node)", "diff": ["+\t}", "+\tpublic void endVisit(IntersectionType node) {", "+\t\tendVisit(node);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "babbe7540b32e58c3f53e805aee8290a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "418f1d61f23f33e0e639dfcb37d7371b9ddc656a", "commitAfterChange": "9fedbc20e6a58ab4ca985b6cd53ab67968737404", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " \tprivate void retrieveColonPosition(ASTNode node)", "signatureAfterChange": " \tprivate void retrieveColonPosition(ASTNode node)", "diff": ["-\t\t\twhile ((token = scanner.getNextToken()) != Scanner.TokenNameEOF) {", "+\t\t\twhile ((token = scanner.getNextToken()) != ITerminalSymbols.TokenNameEOF) {", "-\t\t\t\t\tcase Scanner.TokenNameCOLON:", "+\t\t\t\t\tcase ITerminalSymbols.TokenNameCOLON:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb06dc11bc410c56834378fbc59f2cdd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "0f5d04adf9d2fa735fce5517c85c8317372cf6c0", "commitAfterChange": "6cefacaaf91a5190221cb83191ea60dad1636887", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public static final boolean fragmentEquals( \tchar[] fragment, \tchar[] name, \tint startIndex, \tboolean isCaseSensitive)", "signatureAfterChange": " public static final boolean fragmentEquals( \tchar[] fragment, \tchar[] name, \tint startIndex, \tboolean isCaseSensitive)", "diff": ["-\t\tif (Character.toLowerCase(fragment[i])", "-\t\t\t!= Character.toLowerCase(name[i + startIndex]))", "+\t\tif (ScannerHelper.toLowerCase(fragment[i])", "+\t\t\t!= ScannerHelper.toLowerCase(name[i + startIndex]))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb1ed0f0e2926b95838b55a533eaa4dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void addProblemConstructor( \t\tAbstractMethodDeclaration method, \t\tMethodBinding methodBinding, \t\tIProblem[] problems)", "signatureAfterChange": " \tpublic void addProblemConstructor( \t\tAbstractMethodDeclaration method, \t\tMethodBinding methodBinding, \t\tCategorizedProblem[] problems)", "diff": ["-\t\tIProblem[] problems) {", "+\t\tCategorizedProblem[] problems) {", "-\t\t\t\tIProblem problem = problems[i];", "+\t\t\t\tCategorizedProblem problem = problems[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb5baaff0888b0fe3e8cfbea1a9e21f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java", "commitBeforeChange": "f03e24a20423490ce43dd47d116e6771e9f8b29a", "commitAfterChange": "0425932939e44005b87b30f06674df053a397223", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tASTNode clone(AST target)", "signatureAfterChange": " \tASTNode clone(AST target)", "diff": ["-\t\tif (this.ast.API_LEVEL == AST.LEVEL_2_0) {", "+\t\tif (this.ast.apiLevel == AST.LEVEL_2_0) {", "-\t\tif (this.ast.API_LEVEL >= AST.LEVEL_3_0) {", "+\t\tif (this.ast.apiLevel >= AST.LEVEL_3_0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb87711bd87d42acfc0d14c351322075", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "7f0c1689dc377b26f3ac2b4c2b21446a43dd3383", "commitAfterChange": "f7a77c5e8210599982f60934db59bb901b30cb8c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     ProcessorEnvImpl( \t\t\tfinal ICompilationParticipantResult[] filesWithAnnotations, \t\t\tfinal ICompilationParticipantResult[] additionalFiles, \t\t\tfinal IJavaProject javaProj)", "signatureAfterChange": "     ProcessorEnvImpl( \t\t\tfinal BuildContext[] filesWithAnnotations, \t\t\tfinal BuildContext[] additionalFiles, \t\t\tfinal IJavaProject javaProj)", "diff": ["-\t\t\tfinal ICompilationParticipantResult[] filesWithAnnotations,", "-\t\t\tfinal ICompilationParticipantResult[] additionalFiles,", "+\t\t\tfinal BuildContext[] filesWithAnnotations,", "+\t\t\tfinal BuildContext[] additionalFiles,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbc6cd2850e19cc30ed734dd5ff3ae41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": " public TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["-\t\tif (isFieldUseDeprecated((FieldBinding) this.binding, scope, (this.bits & IsStrictlyAssignedMASK) !=0 && this.indexOfFirstFieldBinding == length)) {", "+\t\tif (isFieldUseDeprecated((FieldBinding) this.binding, scope, (this.bits & IsStrictlyAssigned) !=0 && this.indexOfFirstFieldBinding == length)) {", "-\t\t\tif (isFieldUseDeprecated(field, scope, (this.bits & IsStrictlyAssignedMASK) !=0 && index+1 == length)) {", "+\t\t\tif (isFieldUseDeprecated(field, scope, (this.bits & IsStrictlyAssigned) !=0 && index+1 == length)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc4de38a328167c40dcc60bc5525e895", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "a9567e58ade978b67e4f2db4ee5fe35bc3c0d3fe", "commitAfterChange": "0b6f06d77f121375ae3494c8c329aad2cfc0a1a4", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "  public TypeBinding getTypeFromTypeSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType,  \t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker)", "signatureAfterChange": "  public TypeBinding getTypeFromTypeSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType,  \t\tchar[][][] missingTypeNames, ITypeAnnotationWalker walker)", "diff": ["-\t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker) ", "+\t\tchar[][][] missingTypeNames, ITypeAnnotationWalker walker) ", "-\tif (dimension > 0 && walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "+\tif (dimension > 0 && walker != ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc9b637ad8ecbf689f49da3520f2d724", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java", "commitBeforeChange": "f03e24a20423490ce43dd47d116e6771e9f8b29a", "commitAfterChange": "0425932939e44005b87b30f06674df053a397223", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tvoid accept0(ASTVisitor visitor)", "signatureAfterChange": " \tvoid accept0(ASTVisitor visitor)", "diff": ["-\t\t\tif (this.ast.API_LEVEL == AST.LEVEL_2_0) {", "+\t\t\tif (this.ast.apiLevel == AST.LEVEL_2_0) {", "-\t\t\tif (this.ast.API_LEVEL >= AST.LEVEL_3_0) {", "+\t\t\tif (this.ast.apiLevel >= AST.LEVEL_3_0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bca1dd2b8c9463fc8b164f11ba88fddf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void testBug45958()", "signatureAfterChange": " \tpublic void testBug45958()", "diff": ["-\t\treportMissingJavadoc = CompilerOptions.DISABLED;", "+\t\treportMissingJavadocComments = CompilerOptions.IGNORE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd2dd7ac8d541c700bc79aeca35fbc41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/BaseProcessorEnv.java", "commitBeforeChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "commitAfterChange": "6fea7eafdd413dccff31028f8da1f1ac6859e6fe", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public TypeDeclaration getTypeDeclaration(String name)", "signatureAfterChange": "     public TypeDeclaration getTypeDeclaration(String name)", "diff": ["-\t\ttypeBinding = getTypeBinding(typeKey);", "+\t\ttypeBinding = getTypeDefinitionBindingFromName(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd34d82381ab22d5a9f02b381e4692a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39efbf0f3eb32e59d7a65e03590993d59dc6817b", "commitAfterChange": "84bab690fce0d07b753bfc05c56b8e56d168a1a6", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": "  \tpublic Expression convert(MessageSend expression)", "signatureAfterChange": "  \tpublic Expression convert(MessageSend expression)", "diff": ["-\t\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\tcase AST.JLS2_INTERNAL :", "-\t\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\tcase AST.JLS2_INTERNAL :"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd8a929c5b2ecafc9b81e21579606402", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingComparator.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tstatic boolean isEqual(FieldBinding fieldBinding, FieldBinding fieldBinding2)", "signatureAfterChange": "  \tstatic boolean isEqual(FieldBinding fieldBinding, FieldBinding fieldBinding2)", "diff": ["-\t\treturn (fieldBinding.modifiers & CompilerModifiers.AccJustFlag) == (fieldBinding2.modifiers & CompilerModifiers.AccJustFlag)", "+\t\treturn (fieldBinding.modifiers & ExtraCompilerModifiers.AccJustFlag) == (fieldBinding2.modifiers & ExtraCompilerModifiers.AccJustFlag)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd8d4296b032b341654e31de8e99cc3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/Java8ElementProcessor.java", "commitBeforeChange": "73197a47274e75e8fe1581fdac3a086fb2ddf471", "commitAfterChange": "340440fc2f9b9eb03b89c385f562976def2c6c0e", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic void testTypeAnnotations12()", "signatureAfterChange": "  \tpublic void testTypeAnnotations12()", "diff": ["-\t\tverifyTypeAnnotations(typeMirror, new String[]{\"@Type(value=receiver)\"});", "+\t\tverifyAnnotations(typeMirror, new String[]{\"@Type(value=receiver)\"});", "-\t\tverifyTypeAnnotations(type.getReceiverType(), new String[]{\"@Type(value=receiver)\"});", "+\t\tverifyAnnotations(type.getReceiverType(), new String[]{\"@Type(value=receiver)\"});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdf87b4002061aaadc4294b95fe10f13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "60e84a84d2c785be17a379ead199176b00163ca2", "commitAfterChange": "dd81d5614e9912f7c701e3f5c6100178a60401f0", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void manageSyntheticReadAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": " \tpublic void manageSyntheticReadAccessIfNecessary(BlockScope currentScope)", "diff": ["-\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type", "+\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\t\t&& ((currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4", "+\t\t\t&& ((currentScope.environment().options.targetJDK >= CompilerOptions.JDK1_2"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be6a5e4e1c8ad43bdf7c420db37774e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "c93b7fc02953335388042ab5bd4ec34f70464821", "commitAfterChange": "c9213ae595dd32af0d2b3bd7c31b733e8b1d0dd1", "methodNumberBeforeChange": 381, "methodNumberAfterChange": 383, "signatureBeforeChange": " public void testBug148380_SearchAllTypes_cu() throws CoreException, JavaModelException", "signatureAfterChange": " public void testBug148380_SearchAllTypes_cu() throws CoreException, JavaModelException", "diff": ["-\tTestTypeNameMatchRequestor requestor = new TestTypeNameMatchRequestor();", "+\tTypeNameMatchCollector requestor = new TypeNameMatchCollector();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be7f4553f74c3ab80a73ba5c24ebd9f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "60e84a84d2c785be17a379ead199176b00163ca2", "commitAfterChange": "dd81d5614e9912f7c701e3f5c6100178a60401f0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": " public void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope)", "diff": ["-\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type", "+\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\t&& ((currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4", "+\t\t&& ((currentScope.environment().options.targetJDK >= CompilerOptions.JDK1_2"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "befe278d805a931e6c2b78bb4378df20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "045a67be23e966bc4b7f49b2b17d7449e71c3890", "commitAfterChange": "09d26eca94e41cb67a73a9cec71e813ec866fc65", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate static CompilationUnitDeclaration parseCompilationUnit(char[] source, Map settings)", "signatureAfterChange": "  \tprivate static CompilationUnitDeclaration parseCompilationUnit(char[] source, Map settings)", "diff": ["-\t\tParser parser =", "-\t\t\tnew Parser(", "+\t\tCodeFormatterParser parser =", "+\t\t\tnew CodeFormatterParser("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf105c134b4a7cd710624788dc4f7fc2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 98, "signatureBeforeChange": " \tpublic boolean visit(SingleNameReference singleNameReference, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(SingleNameReference singleNameReference, BlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (singleNameReference.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (singleNameReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf19564f3fe3aee58023b206f04d4938", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void testBug47339()", "signatureAfterChange": " \tpublic void testBug47339()", "diff": ["-\t\treportMissingJavadoc = CompilerOptions.DISABLED;", "+\t\treportMissingJavadocComments = CompilerOptions.IGNORE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf3bcd3309304891eade7a3056d87907", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "c1f8b23725dd7ea4b476b40485a277dac1e772a8", "commitAfterChange": "9aadd271aa6b9408f381dcc08f67ae2c31958a0a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic void run(IProgressMonitor monitor)", "signatureAfterChange": " \t \tpublic void run(IProgressMonitor monitor)", "diff": ["-\t\t\t\t( _compilationUnit != null && ! AptUtil.hasAnnotationInstance( _compilationUnit ) ) ||", "-\t\t\t\t( _file!= null && !  AptUtil.hasAnnotationInstance( _file ) ) )", "+\t\t\t\t( _compilationUnit != null && ! ScannerUtil.hasAnnotationInstance( _compilationUnit ) ) ||", "+\t\t\t\t( _file!= null && !  ScannerUtil.hasAnnotationInstance( _file ) ) )"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfcbeda5bcd8a66560c668b0128eb2e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "7f0c1689dc377b26f3ac2b4c2b21446a43dd3383", "commitAfterChange": "f7a77c5e8210599982f60934db59bb901b30cb8c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate APTDispatchRunnable(  \t\t\tICompilationParticipantResult[] filesWithAnnotation, \t\t\tICompilationParticipantResult[] filesWithoutAnnotation, \t\t\tAptProject aptProject,  \t\t\tMap<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tSet<AnnotationProcessorFactory> dispatchedBatchFactories, \t\t\tboolean isFullBuild)", "signatureAfterChange": " \tprivate APTDispatchRunnable(  \t\t\tBuildContext[] filesWithAnnotation, \t\t\tBuildContext[] filesWithoutAnnotation, \t\t\tAptProject aptProject,  \t\t\tMap<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tSet<AnnotationProcessorFactory> dispatchedBatchFactories, \t\t\tboolean isFullBuild)", "diff": ["-\t\t\tICompilationParticipantResult[] filesWithAnnotation,", "-\t\t\tICompilationParticipantResult[] filesWithoutAnnotation,", "+\t\t\tBuildContext[] filesWithAnnotation,", "+\t\t\tBuildContext[] filesWithoutAnnotation,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c014f516049defff21b6bb79c32efb1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "522e84acc5c220c07378cd67640c99884ac9cc9d", "commitAfterChange": "e5f48a4d4e39a733649e1d7678dd3cc38b1f57e5", "methodNumberBeforeChange": 569, "methodNumberAfterChange": 569, "signatureBeforeChange": "  \tpublic void testSuperConstructorInvocation()", "signatureAfterChange": "  \tpublic void testSuperConstructorInvocation()", "diff": ["-\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\tif (ast.apiLevel() >= AST.JLS3) {", "-\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\tif (ast.apiLevel() >= AST.JLS3) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c05e9ae5b8151c5a9c640a1785e162ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceJavadocParser.java", "commitBeforeChange": "5e70a582e36fd39d7629b8f556b66f50a1050058", "commitAfterChange": "5ca447c521262374b5199c22b8bb8d32a007f444", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected void parseSimpleTag()", "signatureAfterChange": " protected void parseSimpleTag()", "diff": ["-\t\t\t\tif (Character.isWhitespace(c) || c == '*') {", "+\t\t\t\tif (ScannerHelper.isWhitespace(c) || c == '*') {", "-\t\t\t\tif (Character.isWhitespace(c) || c == '*') {", "+\t\t\t\tif (ScannerHelper.isWhitespace(c) || c == '*') {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0681019a5ace1f0827ab178327f0fc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/SampleASTs.java", "commitBeforeChange": "810d2a46e73e304780d3a58f117d6c63103b4e72", "commitAfterChange": "43bf242c384a6b4ad5daf26c5b4617ec68564235", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static ASTNode oneOfEach(AST target)", "signatureAfterChange": " \tpublic static ASTNode oneOfEach(AST target)", "diff": ["-\t\t\tExtraDimension ed = target.newExtraDimension();", "+\t\t\tDimension ed = target.newDimension();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c095fae8809265aaeaee829c5a7cfc52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "82eb8210126dce9dcecaa23100608377607eb4d3", "commitAfterChange": "39a2af446e48bb6f168906e833c304457e17e4cf", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tpublic void testParameterizedArrayTypeMultipleArguments04() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedArrayTypeMultipleArguments04() throws CoreException", "diff": ["-\t\tSourceType type = selectSourceType(unit,  \"Table<String, Table<String, Exception>.Entry<String, Exception>[]>.Entry<String, Table<String, Exception>.Entry<String, Exception>[]>\"); //$NON-NLS-1$", "+\t\tIType type = selectType(unit,  \"Table<String, Table<String, Exception>.Entry<String, Exception>[]>.Entry<String, Table<String, Exception>.Entry<String, Exception>[]>\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c105df6d0536aee9858f31021e0a5c93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "a00b91e363390d5872f24709421a2a2b1249ea30", "commitAfterChange": "61bf91bb0112a7323235a8711e82564a6109221c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " void checkMethods()", "signatureAfterChange": " void checkMethods()", "diff": ["-\t\t\t\t\t\tif (foundMatch[j] == 0 && areMethodsEqual(currentMethod, inheritedMethod)) {", "+\t\t\t\t\t\tif (foundMatch[j] == 0 && doesMethodOverride(currentMethod, inheritedMethod)) {", "-\t\t\t\t\tif (areMethodsEqual(inheritedMethod, otherInheritedMethod)) {", "+\t\t\t\t\tif (doesMethodOverride(inheritedMethod, otherInheritedMethod)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c11e51842c90a51d31b42b0235731fbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic SearchableEnvironment(JavaProject project, org.eclipse.jdt.core.ICompilationUnit[] workingCopies) throws JavaModelException", "signatureAfterChange": " \tpublic SearchableEnvironment(JavaProject project, org.eclipse.jdt.core.ICompilationUnit[] workingCopies) throws JavaModelException", "diff": ["-\t\t\tthis.searchScope = SearchBasicEngine.createJavaSearchScope(new IJavaElement[] {project});", "+\t\t\tthis.searchScope = BasicSearchEngine.createJavaSearchScope(new IJavaElement[] {project});", "-\t\t\tthis.searchScope = SearchBasicEngine.createJavaSearchScope(this.nameLookup.packageFragmentRoots);", "+\t\t\tthis.searchScope = BasicSearchEngine.createJavaSearchScope(this.nameLookup.packageFragmentRoots);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1994ebe4f6115380de13ecad19ba244", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/FieldBinding.java", "commitBeforeChange": "83dc88df7a1508be17b764df4120ac8a34178f58", "commitAfterChange": "f428b70bc80bfdae47260a00a8636113b21b698c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public final boolean canBeSeenBy(TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "signatureAfterChange": "  public final boolean canBeSeenBy(TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "diff": ["-\t\t\tif (currentType.findSuperTypeWithSameErasure(declaringErasure) != null) {", "+\t\t\tif (currentType.findSuperTypeOriginatingFrom(declaringErasure) != null) {", "-\t\t\t\tif (currentType == receiverErasure || receiverErasure.findSuperTypeWithSameErasure(currentType) != null) {", "+\t\t\t\tif (currentType == receiverErasure || receiverErasure.findSuperTypeOriginatingFrom(currentType) != null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1d51f320bd555560b7f04d584d2009a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tif ((bits & IsReachableMASK) == 0) {", "+\t\tif ((bits & IsReachable) == 0) {", "-\t\t\t\t|| ((this.action.bits & IsUsefulEmptyStatementMASK) != 0)) {", "+\t\t\t\t|| ((this.action.bits & IsUsefulEmptyStatement) != 0)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c242758ce0b72aa6145e38b6d10e2de6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void complainIfUnusedExceptionHandlers(AbstractMethodDeclaration method)", "signatureAfterChange": "  \tpublic void complainIfUnusedExceptionHandlers(AbstractMethodDeclaration method)", "diff": ["-\t\tif ((method.binding.modifiers & (CompilerModifiers.AccOverriding | CompilerModifiers.AccImplementing)) != 0", "+\t\tif ((method.binding.modifiers & (ExtraCompilerModifiers.AccOverriding | ExtraCompilerModifiers.AccImplementing)) != 0"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c37f58c2361e80cfba8df0dac5efe07d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "4b36d8d902157ef078af37f3d78b4138152d8889", "commitAfterChange": "9ef1e97f6b56081e8537310fc409f77c2ce56944", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tpublic void removePackage(IPath packageFragmentRootPath, String packageName)", "signatureAfterChange": " \tpublic void removePackage(IPath packageFragmentRootPath, String packageName)", "diff": ["-\t\tcheckAssertion(\"a workspace must be open\", fIsOpen); //$NON-NLS-1$", "+\t\tcheckAssertion(\"a workspace must be open\", isOpen); //$NON-NLS-1$", "-\t\tIFolder folder = fWorkspace.getRoot().getFolder(path);", "+\t\tIFolder folder = workspace.getRoot().getFolder(path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3d537a2c1dbfb40f81c5a161ca8cc13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4a7fb72faa1d4eb35981dd799c06dbffe9837a2f", "commitAfterChange": "af607e2e1ad6576e50200e327ea9acd540ed1ad7", "methodNumberBeforeChange": 339, "methodNumberAfterChange": 339, "signatureBeforeChange": " public void testBug110336f() throws CoreException", "signatureAfterChange": " public void testBug110336f() throws CoreException", "diff": ["-\tTypeReferencesCollector collector = new TypeReferencesCollector();", "+\tTypeReferenceCollector collector = new TypeReferenceCollector();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5112fde099c27728c2b4f29be0885f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39efbf0f3eb32e59d7a65e03590993d59dc6817b", "commitAfterChange": "84bab690fce0d07b753bfc05c56b8e56d168a1a6", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": " \tprotected void setModifiers(Initializer initializer, org.eclipse.jdt.internal.compiler.ast.Initializer oldInitializer)", "signatureAfterChange": " \tprotected void setModifiers(Initializer initializer, org.eclipse.jdt.internal.compiler.ast.Initializer oldInitializer)", "diff": ["-\t\t\tcase AST.JLS2: ", "-\t\t\t\tinitializer.setModifiers(oldInitializer.modifiers & CompilerModifiers.AccJustFlag);", "+\t\t\tcase AST.JLS2_INTERNAL: ", "+\t\t\t\tinitializer.internalSetModifiers(oldInitializer.modifiers & CompilerModifiers.AccJustFlag);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c529200838442934559a1c7f84a94698", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelStatus.java", "commitBeforeChange": "cdf4427e144add1a36f3939b37283556991d4db8", "commitAfterChange": "75f702ac7a9f5b98d8daf289140c0d700af63244", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic boolean matches(int mask)", "signatureAfterChange": " \tpublic boolean matches(int mask)", "diff": ["-\t\t\tfor (int i = 0, max = fChildren.length; i < max; i++) {", "-\t\t\t\tif (matches((JavaModelStatus) fChildren[i], mask))", "+\t\t\tfor (int i = 0, max = children.length; i < max; i++) {", "+\t\t\t\tif (matches((JavaModelStatus) children[i], mask))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c56afcf6c7bd489ed061c45ac9f02f79", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "commitAfterChange": "6fea7eafdd413dccff31028f8da1f1ac6859e6fe", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private TypeDeclaration getTypeDeclarationInBatch(String name)", "signatureAfterChange": "      private TypeDeclaration getTypeDeclarationInBatch(String name)", "diff": ["-\t\ttypeBinding = getTypeBinding(typeKey);", "+\t\ttypeBinding = getTypeDefinitionBindingFromName(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6328cd8474404733ec942a41b7af331", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java", "commitBeforeChange": "807b33cf50fdb479db403880e28eb0989e0fbdba", "commitAfterChange": "ec8ef2b0e48215b6eaf284990dd1417e7ae7aeb1", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " protected IBuffer openBuffer(IProgressMonitor pm, Object info) throws JavaModelException", "signatureAfterChange": " protected IBuffer openBuffer(IProgressMonitor pm, Object info) throws JavaModelException", "diff": ["-\t\t\t\tIFolder pkgFolder = (IFolder) getParent().getResource();", "+\t\t\t\tIContainer pkgFolder = (IContainer) getParent().getResource();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6a7900b0a09bb9d60417c6f858a211c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " public void deprecatedField(FieldBinding field, AstNode location)", "signatureAfterChange": " public void deprecatedField(FieldBinding field, ASTNode location)", "diff": ["-public void deprecatedField(FieldBinding field, AstNode location) {", "+public void deprecatedField(FieldBinding field, ASTNode location) {", "-\tif ((location.bits & AstNode.InsideJavadoc) != 0) {", "+\tif ((location.bits & ASTNode.InsideJavadoc) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c706ba6a39f91030cf2f7b3d4744bb5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/ClasspathTests.java", "commitBeforeChange": "d401884a43c6ad3b0ed7439a466bbdea10cca2d2", "commitAfterChange": "e471353a00f4151e770cf4f074b2e3002113d901", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void testMissingLibrary()", "signatureAfterChange": "  \tpublic void testMissingLibrary()", "diff": ["-\t\tenv.addExternalJar(projectPath, env.getMinimalJarPath());", "+\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c718190308c137887529e737cdc37932", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "60e84a84d2c785be17a379ead199176b00163ca2", "commitAfterChange": "dd81d5614e9912f7c701e3f5c6100178a60401f0", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void manageSyntheticReadAccessIfNecessary( \t\tBlockScope currentScope, \t\tFieldBinding fieldBinding, \t\tTypeBinding lastReceiverType, \t\tint index)", "signatureAfterChange": " \tpublic void manageSyntheticReadAccessIfNecessary( \t\tBlockScope currentScope, \t\tFieldBinding fieldBinding, \t\tTypeBinding lastReceiverType, \t\tint index)", "diff": ["-\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type", "+\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\t\t&& ((currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4", "+\t\t\t&& ((currentScope.environment().options.targetJDK >= CompilerOptions.JDK1_2"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7b49e2b02f7109a1afb9162a60cc4b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic boolean visit(BinaryExpression binaryExpression, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(BinaryExpression binaryExpression, BlockScope scope)", "diff": ["-\t\tswitch((binaryExpression.bits & AstNode.OperatorMASK) >> AstNode.OperatorSHIFT) {", "+\t\tswitch((binaryExpression.bits & ASTNode.OperatorMASK) >> ASTNode.OperatorSHIFT) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8175e600f53928b9f8b95669ee800c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/ExecutionTests.java", "commitBeforeChange": "d401884a43c6ad3b0ed7439a466bbdea10cca2d2", "commitAfterChange": "e471353a00f4151e770cf4f074b2e3002113d901", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic void testFailure()", "signatureAfterChange": " \t \tpublic void testFailure()", "diff": ["-\t\tenv.addExternalJar(projectPath, env.getMinimalJarPath());", "+\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c84c05a94cbd9ee373c7ec2294deb31a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\t\t\t\t\tcodeStream.generateStringAppend(currentScope, this, expression);", "+\t\t\t\t\tcodeStream.generateStringConcatenationAppend(currentScope, this, expression);", "-\t\tcodeStream.generateStringAppend(currentScope, null, expression);", "+\t\tcodeStream.generateStringConcatenationAppend(currentScope, null, expression);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8a270218b1e9856eeba7d0f2d2c3e63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CreationReference.java", "commitBeforeChange": "1534c3fb9312be746c807d9f0aa370d7a2598284", "commitAfterChange": "f9b5a54e0afa9af686e707bcc0c484de0728c860", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tint treeSize()", "signatureAfterChange": " \tint treeSize()", "diff": ["-\t\t\t+ (this.expression == null ? 0 : getExpression().treeSize())", "+\t\t\t+ (this.type == null ? 0 : getType().treeSize())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c961cc070b04d5cd8fb38abd2a3337a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void testBug47215()", "signatureAfterChange": " \tpublic void testBug47215()", "diff": ["-\t\treportMissingJavadoc = CompilerOptions.DISABLED;", "+\t\treportMissingJavadocComments = CompilerOptions.IGNORE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9762916feccb120c163a86ad851b332", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "c9d6ebaa0d13be6fc2e748dee3cae777e5c9d89a", "commitAfterChange": "0011958a7781b8e34a2680d48e8c358ce935fb15", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 56, "signatureBeforeChange": "\r protected void resetStacks()", "signatureAfterChange": "\r protected void resetStacks()", "diff": ["-\tthis.inInitializerStack[this.inInitializerPtr = 0] = false;\r", "+\tthis.inFieldInitializationStack[this.inFieldInitializationPtr = 0] = false;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9d8bae439bac9d148b21cf5ee9f1c95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "5c72ddaa5e79d3bcf534f5780ca88a7a97636e7a", "commitAfterChange": "488a4d6e7cacdc0e333c16a8fdbbfb759cc631cd", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  protected void clean(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": "  protected void clean(IProgressMonitor monitor) throws CoreException", "diff": ["-\t\tmarker.setAttribute(IMarker.GENERATED_BY, JavaBuilder.GENERATED_BY);", "+\t\tmarker.setAttribute(IMarker.SOURCE_ID, JavaBuilder.SOURCE_ID);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9e850c65e8364c69c4f4df561041042", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void generateOptimizedBooleanEqual(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedBooleanEqual(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired)", "diff": ["-\tpublic void generateOptimizedBooleanEqual(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired) {", "+\tpublic void generateOptimizedBooleanEqual(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca142e5a882afb42ccee1f2862b8fbad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4a7fb72faa1d4eb35981dd799c06dbffe9837a2f", "commitAfterChange": "af607e2e1ad6576e50200e327ea9acd540ed1ad7", "methodNumberBeforeChange": 336, "methodNumberAfterChange": 336, "signatureBeforeChange": " public void testBug110336c() throws CoreException", "signatureAfterChange": " public void testBug110336c() throws CoreException", "diff": ["-\tTypeReferencesCollector collector = new TypeReferencesCollector();", "+\tTypeReferenceCollector collector = new TypeReferenceCollector();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb977dbe0efa2dbe9a859910ee54d3dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiSourceFolderAndOutputFolderTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tpublic void test0008() throws JavaModelException", "signatureAfterChange": " \t \tpublic void test0008() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbc819da988142eb326cb859e2b1eb57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/ClasspathTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void testMissingLibrary2() throws JavaModelException", "signatureAfterChange": " \t \tpublic void testMissingLibrary2() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc0229db373f8136108f80baabbb7f30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void testBug45596()", "signatureAfterChange": " \tpublic void testBug45596()", "diff": ["-\t\treportMissingJavadoc = CompilerOptions.DISABLED;", "+\t\treportMissingJavadocComments = CompilerOptions.IGNORE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc5598594efcb3a166af7ef2e9f62c9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredType.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public Statement updatedStatement()", "signatureAfterChange": " public Statement updatedStatement()", "diff": ["-\tif ((typeDeclaration.bits & ASTNode.IsAnonymousTypeMASK) != 0 && !this.preserveContent){", "+\tif ((typeDeclaration.bits & ASTNode.IsAnonymousType) != 0 && !this.preserveContent){", "-\tif ((updatedType.bits & ASTNode.IsAnonymousTypeMASK) != 0){", "+\tif ((updatedType.bits & ASTNode.IsAnonymousType) != 0){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc82be4d495fd7814b541bd98b9ecc15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public SyntheticFieldBinding addSyntheticFieldForSwitchEnum(char[] fieldName, String key)", "signatureAfterChange": " public SyntheticFieldBinding addSyntheticFieldForSwitchEnum(char[] fieldName, String key)", "diff": ["-\t\t\tscope.createArrayType(BaseTypes.IntBinding,1),", "+\t\t\tscope.createArrayType(TypeBinding.INT,1),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc9815de9eee25e8e97749c8ee55af7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "522e84acc5c220c07378cd67640c99884ac9cc9d", "commitAfterChange": "e5f48a4d4e39a733649e1d7678dd3cc38b1f57e5", "methodNumberBeforeChange": 153, "methodNumberAfterChange": 153, "signatureBeforeChange": "\t\t  \tpublic void testPackageDeclaration()", "signatureAfterChange": "\t\t  \tpublic void testPackageDeclaration()", "diff": ["-\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\tif (ast.apiLevel() >= AST.JLS3) {", "-\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\tif (ast.apiLevel() >= AST.JLS3) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccb1ece16fa57a351f860678dd203cdc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "32aae0cf1b9f94fe336a2b34d2b2b110c5363f4a", "commitAfterChange": "7fa614421be752542e93fc8394ff005421401e06", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " protected IGenericType createInfoFromClassFileInJar(Openable classFile)", "signatureAfterChange": " protected IBinaryType createInfoFromClassFileInJar(Openable classFile)", "diff": ["-protected IGenericType createInfoFromClassFileInJar(Openable classFile) {", "+protected IBinaryType createInfoFromClassFileInJar(Openable classFile) {", "-\tIGenericType info = null;", "+\tIBinaryType info = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd220ebfc48906333e349994ccd1a73e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 45, "signatureBeforeChange": "\r public int literalIndexForJavaLangNoClassDefFoundErrorStringConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangNoClassDefFoundErrorStringConstructor()", "diff": ["-\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd3c953b270c94789ab9024b1fa4d5d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestMixed.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void testBug45669()", "signatureAfterChange": " \tpublic void testBug45669()", "diff": ["-\t\treportMissingJavadoc = CompilerOptions.DISABLED;", "+\t\treportMissingJavadocComments = CompilerOptions.IGNORE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd40419398ba8ce20ae8f9bf06204d56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiSourceFolderAndOutputFolderTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic void test0003() throws JavaModelException", "signatureAfterChange": " \t \tpublic void test0003() throws JavaModelException", "diff": ["-\t\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd5100e79ea1726f14f66b37498c7303", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java", "commitBeforeChange": "522e84acc5c220c07378cd67640c99884ac9cc9d", "commitAfterChange": "e5f48a4d4e39a733649e1d7678dd3cc38b1f57e5", "methodNumberBeforeChange": 239, "methodNumberAfterChange": 239, "signatureBeforeChange": " \tpublic void testSuperConstructorInvocation()", "signatureAfterChange": " \tpublic void testSuperConstructorInvocation()", "diff": ["-\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\tif (ast.apiLevel() >= AST.JLS3) {", "-\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\tif (ast.apiLevel() == AST.JLS2) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd7adc7c51d9ecdeac6891ecb1af85f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "ddb739634f2059bc14c63ee2cf285cdd10a0b109", "commitAfterChange": "91f3c8870f13ed83ebd6280cbfe1b3f0285abeea", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public static SearchPattern createPattern(IJavaElement element, int limitTo)", "signatureAfterChange": "\r public static SearchPattern createPattern(IJavaElement element, int limitTo)", "diff": ["-\t\t\t\tcase IJavaSearchConstants.READ_REFERENCES :\r", "+\t\t\t\tcase IJavaSearchConstants.READ_ACCESSES :\r", "-\t\t\t\tcase IJavaSearchConstants.WRITE_REFERENCES :\r", "+\t\t\t\tcase IJavaSearchConstants.WRITE_ACCESSES :\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce4b72ecadf4b79bba63460c34415082", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "89ef09645851a8ee6148fbadacf6f02e79a10a01", "commitAfterChange": "8983e10a013112f0cd11b492da79e7a8ff476589", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " static String[] convertTypeNamesToSigs(char[][] typeNames)", "signatureAfterChange": " static String[] convertTypeNamesToSigs(char[][] typeNames)", "diff": ["-\t\treturn fgEmptyStringArray;", "+\t\treturn NO_STRINGS;", "-\t\treturn fgEmptyStringArray;", "+\t\treturn NO_STRINGS;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce61b07b92fcd28ed1f0d597b62fe436", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "1bb29de87657371d6b2e9a01ac3484f13516eab9", "commitAfterChange": "b208e61b699229b414f76c3c9bfed66b1f92d991", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "  public MethodReferenceMatch newMethodReferenceMatch( \t\tIJavaElement enclosingElement, \t\tBinding enclosingBinding, \t\tint accuracy, \t\tint offset, \t\tint length, \t\tboolean isConstructor, \t\tboolean isSynthetic, \t\tASTNode reference)", "signatureAfterChange": "  public InternalMethodReferenceMatch newMethodReferenceMatch( \t\tIJavaElement enclosingElement, \t\tBinding enclosingBinding, \t\tint accuracy, \t\tint offset, \t\tint length, \t\tboolean isConstructor, \t\tboolean isSynthetic, \t\tASTNode reference)", "diff": ["-public MethodReferenceMatch newMethodReferenceMatch(", "+public InternalMethodReferenceMatch newMethodReferenceMatch(", "-\treturn new MethodReferenceMatch(enclosingElement, accuracy, offset, length, isConstructor, isSynthetic, isOverridden, insideDocComment, participant, resource);", "+\treturn new InternalMethodReferenceMatch(enclosingElement, accuracy, offset, length, isConstructor, isSynthetic, isOverridden, insideDocComment, participant, resource);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce659f9644dde3957fcb7d6c45ba1fbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "9fb326cf9292ef697cc0b0a821a4d5b0ffa7d58e", "commitAfterChange": "0a632290335585dcfcbc973314f95aa73bf77586", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r \r \tprivate void findFields(\r \t\tchar[] fieldName,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector fieldsFound,\r \t\tObjectVector localsFound,\r \t\tboolean onlyStaticFields,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope,\r \t\tboolean implicitCall)", "signatureAfterChange": "\r \r \tprivate void findFields(\r \t\tchar[] fieldName,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector fieldsFound,\r \t\tObjectVector localsFound,\r \t\tboolean onlyStaticFields,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope,\r \t\tboolean implicitCall)", "diff": ["-\t\t\t\tcurrentType.fields(),\r", "+\t\t\t\tcurrentType.availableFields(),\r", "-\t\t\t\t\t\t\tanInterface.fields(),\r", "+\t\t\t\t\t\t\tanInterface.availableFields(),\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce72cc3f2cd4347c8292748b3a5ac0d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprotected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final IProblem[] expected, final char[] displayString)", "signatureAfterChange": " \tprotected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final CategorizedProblem[] expected, final char[] displayString)", "diff": ["-\tprotected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final IProblem[] expected, final char[] displayString) {", "+\tprotected void evaluateWithExpectedWarningAndDisplayString(final char[] codeSnippet, final CategorizedProblem[] expected, final char[] displayString) {", "-\t\t\t\t\tIProblem[] problems = result.getProblems();", "+\t\t\t\t\tCategorizedProblem[] problems = result.getProblems();", "-\t\t\t\tassertTrue(\"Problem mismatch\" + requestor.collectedProblems.get(i), this.equals(expected[i], (IProblem)requestor.collectedProblems.get(i)));", "+\t\t\t\tassertTrue(\"Problem mismatch\" + requestor.collectedProblems.get(i), this.equals(expected[i], (CategorizedProblem)requestor.collectedProblems.get(i)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cea64d06b1c597b23bc54efc7d4ded1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/CodeSnippetParsingUtil.java", "commitBeforeChange": "234e90f1063594cbfe450e6804c5db0a515eda2c", "commitAfterChange": "0af096b2d34684a162b7a195205699b7a15a3c32", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic static ConstructorDeclaration parseStatements(char[] source, int offset, int length, Map settings, boolean recordParsingInformation)", "signatureAfterChange": " \t \tpublic static ConstructorDeclaration parseStatements(char[] source, int offset, int length, Map settings, boolean recordParsingInformation)", "diff": ["-\t\tParser parser = new Parser(problemReporter, false);", "+\t\tCommentRecorderParser parser = new CommentRecorderParser(problemReporter, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf18dfc4b1d6d9ac0fe87a7f4bfb2713", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r public int literalIndexForJavaLangErrorConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangErrorConstructor()", "diff": ["-\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf58e06911b267193277ce1f5d04db51", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 178, "methodNumberAfterChange": 178, "signatureBeforeChange": " public void inlineForwardReferencesFromLabelsTargeting(Label label, int gotoLocation)", "signatureAfterChange": " public void inlineForwardReferencesFromLabelsTargeting(BranchLabel label, int gotoLocation)", "diff": ["-public void inlineForwardReferencesFromLabelsTargeting(Label label, int gotoLocation) {", "+public void inlineForwardReferencesFromLabelsTargeting(BranchLabel label, int gotoLocation) {", "-\t\tLabel currentLabel = labels[i];", "+\t\tBranchLabel currentLabel = labels[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfc120eb886b75b5d03496509a8262b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetParser.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " protected NameReference getUnspecifiedReferenceOptimized()", "signatureAfterChange": " protected NameReference getUnspecifiedReferenceOptimized()", "diff": ["-\t\t\tref.bits &= ~AstNode.RestrictiveFlagMASK;", "+\t\t\tref.bits &= ~ASTNode.RestrictiveFlagMASK;", "-\t\tref.bits &= ~AstNode.RestrictiveFlagMASK;", "+\t\tref.bits &= ~ASTNode.RestrictiveFlagMASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d01b6ddf6fe5be55f1a188d7afba6281", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/AbstractCompletionTest.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void checkMethodParse( \t\tchar[] source,  \t\tint cursorLocation,  \t\tString expectedCompletion,  \t\tString expectedParentCompletion, \t\tString expectedUnitToString,  \t\tString expectedCompletionIdentifier,  \t\tString expectedReplacedSource, \t\tString[] expectedLabels, \t\tString testName)", "signatureAfterChange": " public void checkMethodParse( \t\tchar[] source,  \t\tint cursorLocation,  \t\tString expectedCompletion,  \t\tString expectedParentCompletion, \t\tString expectedUnitToString,  \t\tString expectedCompletionIdentifier,  \t\tString expectedReplacedSource, \t\tString[] expectedLabels, \t\tString testName)", "diff": ["-\tAstNode foundMethod = null;", "+\tASTNode foundMethod = null;", "-\t\t\tAstNode method = findMethod(type, cursorLocation);", "+\t\t\tASTNode method = findMethod(type, cursorLocation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d08cebec23241720711ecd8978f93a70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "fe905e29a608f61f2afe181f4c1e4e27bb2b95dc", "commitAfterChange": "53a7cfa9bf2a3a1ade921d716dbdc58a4bfc35d4", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public ICompilationUnit getCompilationUnit(String cuName)", "signatureAfterChange": " public ICompilationUnit getCompilationUnit(String cuName)", "diff": ["-\tif (!org.eclipse.jdt.internal.compiler.util.Util.isJavaFileName(cuName)) {", "+\tif (!org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(cuName)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0ae5cfffa6dc1d8ea2844535d33fa5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": "  public void test132() throws JavaModelException", "signatureAfterChange": "  public void test132() throws JavaModelException", "diff": ["-\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(int, float, Class), Ljavadoc.methods.tags.BasicTestMethods;, <T:Ljava.lang.Object;>(IFLjava.lang.Class<TT;>;)V, BasicTestMethods, (xxx, real, clazz), \"+this.positions+JAVADOC_RELEVANCE+\"}\\n\" + ", "-\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, BasicTestMethods, null, \"+this.positions+JAVADOC_RELEVANCE+\"}\"", "+\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(int, float, Class), Ljavadoc.methods.tags.BasicTestMethods;, <T:Ljava.lang.Object;>(IFLjava.lang.Class<TT;>;)V, BasicTestMethods, (xxx, real, clazz), \"+this.positions+R_DRINR+\"}\\n\" + ", "+\t\t\"BasicTestMethods[METHOD_REF<CONSTRUCTOR>]{BasicTestMethods(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, BasicTestMethods, null, \"+this.positions+R_DRINR+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0b707f1064f8c17475bc6a62427662a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic boolean visit(ClassLiteralAccess classLiteral, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(ClassLiteralAccess classLiteral, BlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (classLiteral.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (classLiteral.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d118590c4e1f7b387a9eac07db1581a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java", "commitBeforeChange": "522e84acc5c220c07378cd67640c99884ac9cc9d", "commitAfterChange": "e5f48a4d4e39a733649e1d7678dd3cc38b1f57e5", "methodNumberBeforeChange": 221, "methodNumberAfterChange": 221, "signatureBeforeChange": " \tpublic void testMethodInvocation()", "signatureAfterChange": " \tpublic void testMethodInvocation()", "diff": ["-\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\tif (ast.apiLevel() >= AST.JLS3) {", "-\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\tif (ast.apiLevel() == AST.JLS2) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d19bcca264bb3e1a9123d9feb0ce2990", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "458161dc550c876a0d717a9a36eda696046c367f", "commitAfterChange": "59d8c0d8b554a42bbafdc0ad10f524f90fa03b31", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " private void reportMatching(FieldDeclaration field, IJavaElement parent, TypeDeclaration type, boolean typeInHierarchy) throws CoreException", "signatureAfterChange": " private void reportMatching(FieldDeclaration field, IJavaElement parent, TypeDeclaration type, boolean typeInHierarchy) throws CoreException", "diff": ["-\t\t\t\tif ((this.matchContainer & SearchPattern.FIELD) != 0)", "+\t\t\t\tif ((this.matchContainer & PatternLocator.FIELD_CONTAINER) != 0)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1c79032b1530efdebf54509ba78cbde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "82eb8210126dce9dcecaa23100608377607eb4d3", "commitAfterChange": "39a2af446e48bb6f168906e833c304457e17e4cf", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic void testParameterizedArrayTypeSingleArgument01() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedArrayTypeSingleArgument01() throws CoreException", "diff": ["-\t\tSourceType type = selectSourceType(unit,  \"List\", 2 /* 2nd occurence*/); //$NON-NLS-1$", "+\t\tIType type = selectType(unit,  \"List\", 2 /* 2nd occurence*/); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2434db0cc67b1ba1b9b80c4586aca92", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java", "commitBeforeChange": "522e84acc5c220c07378cd67640c99884ac9cc9d", "commitAfterChange": "e5f48a4d4e39a733649e1d7678dd3cc38b1f57e5", "methodNumberBeforeChange": 255, "methodNumberAfterChange": 255, "signatureBeforeChange": " \tpublic void testVariableDeclarationExpression()", "signatureAfterChange": " \tpublic void testVariableDeclarationExpression()", "diff": ["-\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\tif (ast.apiLevel() >= AST.JLS3) {", "-\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\tif (ast.apiLevel() == AST.JLS2) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d277a8b0b0c881b0a2c1c64c58e2c9cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/EvaluationContext.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void evaluateImports(INameEnvironment environment, IRequestor requestor, IProblemFactory problemFactory)", "signatureAfterChange": " public void evaluateImports(INameEnvironment environment, IRequestor requestor, IProblemFactory problemFactory)", "diff": ["-\t\tIProblem[] problems = new IProblem[] {null};", "+\t\tCategorizedProblem[] problems = new CategorizedProblem[] {null};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d286b3d9907f862466651954b5a22c0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreatePackageFragmentOperation.java", "commitBeforeChange": "812814d4d7336d2de6b5ef94acb359cf36b0dc37", "commitAfterChange": "1c9f4163e7dbad2c87f2cb1e6a01930489865cd1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected void executeOperation() throws JavaModelException", "signatureAfterChange": " protected void executeOperation() throws JavaModelException", "diff": ["-\tString[] names = Signature.getSimpleNames(fName);", "+\tString[] names = Util.getTrimmedSimpleNames(fName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d29d7c4121deb7b2031b5c4f276ed10d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r public int literalIndexForJavaLangErrorConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangErrorConstructor()", "diff": ["-\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2c4bead18f89d5d49f7421156757a9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "d7e7bb059880a6c87ea3290708d2d0a9f9e7ebe8", "commitAfterChange": "a415220ad0bdc743d286b40ccc481ededfe8132e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void generateOptimizedLogicalOr( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedLogicalOr( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "diff": ["-\t\t\tif ((condConst = left.conditionalConstant()) != NotAConstant) {", "+\t\t\tif ((condConst = left.optimizedBooleanConstant()) != NotAConstant) {", "-\t\t\tif ((condConst = right.conditionalConstant()) != NotAConstant) {", "+\t\t\tif ((condConst = right.optimizedBooleanConstant()) != NotAConstant) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2fe9ffff51e7bfbff744f9f66a5a861", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/valueconversion/ValueConversionProcessor.java", "commitBeforeChange": "d8339605195e4a27842529cbdd4cfc67b77ac59c", "commitAfterChange": "ce1a50c038f410b16a75eb29a8e1c64f33a61360", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprivate void compare(final String name, final Object actualValue)", "signatureAfterChange": " \t \tprivate void compare(final String name, final Object actualValue)", "diff": ["-\t\t\t\tTestCase.assertNotNull(\"unexpected member \" + name, null);", "+\t\t\t\tAssert.assertNotNull(\"unexpected member \" + name, null);", "-\t\t\t\tTestCase.assertNotNull(\"unexpected member \" + name, null);", "+\t\t\t\tAssert.assertNotNull(\"unexpected member \" + name, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d325bc540dfc7cff62099b0d7a840b28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 101, "signatureBeforeChange": " \tpublic boolean visit(StringLiteral stringLiteral, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(StringLiteral stringLiteral, BlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (stringLiteral.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (stringLiteral.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d340e756c0da94a35e36454af8e1beb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool.tests/src/org/eclipse/jdt/compiler/tool/tests/CompilerToolTests.java", "commitBeforeChange": "f6d7e4c8ebdaaf8a904962804a027a09edc0c0d3", "commitAfterChange": "30e98d6cc084dfe1b207ffb7493b2de7b6cec8c4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void testCompilerOneClassWithSystemCompiler()", "signatureAfterChange": "  \tpublic void testCompilerOneClassWithSystemCompiler()", "diff": ["-\t\tForwardingJavaFileManager<StandardJavaFileManager> forwardingJavaFileManager = new ForwardingJavaFileManager<StandardJavaFileManager>(manager) {", "+\t\tForwardingJavaFileManager<JavaFileManager> forwardingJavaFileManager = new ForwardingJavaFileManager<JavaFileManager>(manager) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d346c68087aec40f8f17710d48ae6a51", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 94, "signatureBeforeChange": " \tpublic boolean visit( \t\tQualifiedThisReference qualifiedThisReference, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tQualifiedThisReference qualifiedThisReference, \t\tBlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (qualifiedThisReference.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (qualifiedThisReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d40c2898822eb5089f9117eefeee4243", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "82eb8210126dce9dcecaa23100608377607eb4d3", "commitAfterChange": "39a2af446e48bb6f168906e833c304457e17e4cf", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic void testParameterizedArrayTypeMultipleArguments03() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedArrayTypeMultipleArguments03() throws CoreException", "diff": ["-\t\tSourceType type = selectSourceType(unit,  \"Table<String, Exception>.Entry<String, Exception>\", 2); //$NON-NLS-1$", "+\t\tIType type = selectType(unit,  \"Table<String, Exception>.Entry<String, Exception>\", 2); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d416feba866acac52d016aa4e0519935", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate void setJavadocOptions()", "signatureAfterChange": " \tprivate void setJavadocOptions()", "diff": ["-\t\tthis.javaProject.setOption(JavaCore.COMPILER_PB_MISSING_JAVADOC, JavaCore.ENABLED);", "+\t\tthis.javaProject.setOption(JavaCore.COMPILER_PB_MISSING_JAVADOC_COMMENTS, JavaCore.ERROR);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d43794e87d44be4977531c1df05fb925", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39efbf0f3eb32e59d7a65e03590993d59dc6817b", "commitAfterChange": "84bab690fce0d07b753bfc05c56b8e56d168a1a6", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 141, "signatureBeforeChange": " \tprotected void setModifiers(MethodDeclaration methodDecl, AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": " \tprotected void setModifiers(MethodDeclaration methodDecl, AbstractMethodDeclaration methodDeclaration)", "diff": ["-\t\t\tcase AST.JLS2 :", "-\t\t\t\tmethodDecl.setModifiers(methodDeclaration.modifiers & CompilerModifiers.AccJustFlag);", "+\t\t\tcase AST.JLS2_INTERNAL :", "+\t\t\t\tmethodDecl.internalSetModifiers(methodDeclaration.modifiers & CompilerModifiers.AccJustFlag);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4f5a0ad064d7c4925d44ebf37ed71d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "4119a65befb0f1b826133c8b40790cea36510774", "commitAfterChange": "199c84f2cae998bf19dec5ba0cb5f860d990b3fa", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tstatic void createPrintStream(Class testClass, PrintStream[] logStreams, int count, String prefix)", "signatureAfterChange": " \tstatic void createPrintStream(Class testClass, PrintStream[] logStreams, int count, String prefix)", "diff": ["-\t\t\tfor (int i=0, ln=LOG_TYPES.length; i<ln; i++) {", "+\t\t\tfor (int i=0, ln=DIM_NAMES.length; i<ln; i++) {", "-\t\t\t\tFile logFile = new File(LOG_DIR, suiteTypeName+'_'+LOG_TYPES[i]+\".log\");", "+\t\t\t\tFile logFile = new File(LOG_DIR, suiteTypeName+'_'+DIM_NAMES[i]+\".log\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d502a049c76e570131cedaf80a14bf42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiSourceFolderAndOutputFolderTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void test0002() throws JavaModelException", "signatureAfterChange": "  \tpublic void test0002() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5a8d6aa008196e84d4c14345765382b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "f9968462ad3e78057baba9747e91f7b6e3ea59e1", "commitAfterChange": "1f65e2f1d1142c8be683dea8425f1840c9121137", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "signatureAfterChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "diff": ["-\t\t\t\t\t\tif (lookupEnvironment.methodVerifier().doesMethodOverride(otherMethod, method)) {", "+\t\t\t\t\t\tif (lookupEnvironment.methodVerifier().isMethodSubsignature(otherMethod, method)) {", "-\t\t\t\t\t\tif (lookupEnvironment.methodVerifier().doesMethodOverride(otherMethod, method)) {", "+\t\t\t\t\t\tif (lookupEnvironment.methodVerifier().isMethodSubsignature(otherMethod, method)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6ccad8d973cbdaa7374c49d8737f353", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "7b084156620c5c922d11b27bd8e1266a04bb9736", "commitAfterChange": "b85e68b4448fd6d8525b5e65084449dd71c2c8ad", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["-\t\t\t\t\t\t\t\tMethodBinding[] castTypeMethods = getAllInheritedMethods((ReferenceBinding) castType);", "-\t\t\t\t\t\t\t\tMethodBinding[] expressionTypeMethods = getAllInheritedMethods((ReferenceBinding) expressionType);", "+\t\t\t\t\t\t\t\t// look at original methods rather than the parameterized variants at 1.4 to detect", "+\t\t\t\t\t\t\t\t// covariance. Otherwise when confronted with one raw type and one parameterized type,", "+\t\t\t\t\t\t\t\t// we could mistakenly detect covariance and scream foul. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=332744", "+\t\t\t\t\t\t\t\tMethodBinding[] castTypeMethods = getAllOriginalInheritedMethods((ReferenceBinding) castType);", "+\t\t\t\t\t\t\t\tMethodBinding[] expressionTypeMethods = getAllOriginalInheritedMethods((ReferenceBinding) expressionType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6d0544923be76f0ab90414d63206489", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocTypeCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public void test112() throws JavaModelException", "signatureAfterChange": " public void test112() throws JavaModelException", "diff": ["-\t\t\t\"ZBasicTestTypes.Inner[TYPE_REF]{Inner, javadoc.types, Ljavadoc.types.ZBasicTestTypes$Inner;, null, null, \"+this.positions+R_DICNR+\"}\\n\" + ", "-\t\t\t\"ZBasicTestTypes.Inner[JAVADOC_TYPE_REF]{{@link Inner}, javadoc.types, Ljavadoc.types.ZBasicTestTypes$Inner;, null, null, \"+this.positions+R_DICNRIT+\"}\"", "+\t\t\t\"ZBasicTestTypes.Inner[TYPE_REF]{Inner, javadoc.types, Ljavadoc.types.ZBasicTestTypes$Inner;, null, null, \"+this.positions+R_DRICNR+\"}\\n\" + ", "+\t\t\t\"ZBasicTestTypes.Inner[JAVADOC_TYPE_REF]{{@link Inner}, javadoc.types, Ljavadoc.types.ZBasicTestTypes$Inner;, null, null, \"+this.positions+R_DRICNRIT+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6f9e32a64dc160166336ed1190a0fa1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/TestUtil.java", "commitBeforeChange": "7007043cae1b12e48764a4ad7f71075181f1dd30", "commitAfterChange": "39c2952e6c0f1f5ea5630a9c8f33da78f52c9d80", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static java.io.File getFileInPlugin(Plugin plugin, IPath path)", "signatureAfterChange": " \tpublic static java.io.File getFileInPlugin(Plugin plugin, IPath path)", "diff": ["-\t\t\tURL localURL = Platform.asLocalURL( installURL );", "+\t\t\tURL localURL = FileLocator.toFileURL( installURL );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d77dbd681501e28e70a5d88413ae22aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnMessageSend.java", "commitBeforeChange": "98d0749123d10e91b3924cae016a7083355abf01", "commitAfterChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tprivate MethodBinding findNonDefaultAbstractMethod(MethodBinding methodBinding)", "signatureAfterChange": " \tprivate MethodBinding findNonDefaultAbstractMethod(MethodBinding methodBinding)", "diff": ["-\t\t\torg.eclipse.jdt.internal.core.util.SimpleSet interfacesSeen = new org.eclipse.jdt.internal.core.util.SimpleSet(itsInterfaces.length * 2);", "+\t\t\torg.eclipse.jdt.internal.compiler.util.SimpleSet interfacesSeen = new org.eclipse.jdt.internal.compiler.util.SimpleSet(itsInterfaces.length * 2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d80fb7f5afd2131b687b83521db7a516", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "cfebe74b0993aa8e5991953b9cbb508424b8c095", "commitAfterChange": "c16713f6dd450429a4303737780dffe1c893ae16", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tprivate void format(TypeDeclaration typeDeclaration)", "signatureAfterChange": "  \tprivate void format(TypeDeclaration typeDeclaration)", "diff": ["-\t\t\t\t// TODO (olivier) might want to add an option for annotation type", "-\t\t\t\tindent_body_declarations_compare_to_header = this.preferences.indent_body_declarations_compare_to_type_header;", "+\t\t\t\tindent_body_declarations_compare_to_header = this.preferences.indent_body_declarations_compare_to_annotation_declaration_header;", "-\t\t\t\t// TODO (olivier) might want an option for annotation type", "-\t\t\t\tif (this.preferences.insert_new_line_in_empty_type_declaration) {", "+\t\t\t\tif (this.preferences.insert_new_line_in_empty_annotation_declaration) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8a60ac90b564e91482352c21c5bf58c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "7aac6f03ecf70666410b0e689c91dafd6d67757a", "commitAfterChange": "465d091146b1d6997709777ea444048487da1d8d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.AnnotationTypeMemberDeclaration annotationTypeMemberDeclaration)", "signatureAfterChange": " \t \tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration annotationTypeMemberDeclaration)", "diff": ["-\tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.AnnotationTypeMemberDeclaration annotationTypeMemberDeclaration) {", "+\tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration annotationTypeMemberDeclaration) {", "-\t\torg.eclipse.jdt.internal.compiler.ast.Expression memberValue = annotationTypeMemberDeclaration.memberValue;", "+\t\torg.eclipse.jdt.internal.compiler.ast.Expression memberValue = annotationTypeMemberDeclaration.defaultValue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8bbdb32b83fef883e6644ea197da577", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "9161e70641968b4f408d9d0aea97cd4b625c4612", "commitAfterChange": "3a032d6d22a45470265780981aec9b2bfbd82a52", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "  public InternalPackageReferenceMatch newPackageReferenceMatch( \t\tIJavaElement enclosingElement, \t\tint accuracy, \t\tint offset, \t\tint length, \t\tASTNode reference)", "signatureAfterChange": "  public PackageReferenceMatch newPackageReferenceMatch( \t\tIJavaElement enclosingElement, \t\tint accuracy, \t\tint offset, \t\tint length, \t\tASTNode reference)", "diff": ["-public InternalPackageReferenceMatch newPackageReferenceMatch(", "+public PackageReferenceMatch newPackageReferenceMatch(", "-\treturn new InternalPackageReferenceMatch(enclosingElement, accuracy, offset, length, insideDocComment, participant, resource);", "+\treturn new PackageReferenceMatch(enclosingElement, accuracy, offset, length, insideDocComment, participant, resource);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d94b8e781c4e9453deff5f988db755b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "848c4ddf1895eb24711ea8c54b1168746cb07972", "commitAfterChange": "b136d601b8b65cbe6a937874c4ada8fd9c6f056d", "methodNumberBeforeChange": 142, "methodNumberAfterChange": 128, "signatureBeforeChange": " public void invalidType(AstNode location, TypeBinding type)", "signatureAfterChange": " public void invalidType(AstNode location, TypeBinding type)", "diff": ["-\tif ((location.bits & AstNode.InsideAnnotation) != 0) {", "-\t\tid |= IProblem.Annotation;", "+\tif ((location.bits & AstNode.InsideJavadoc) != 0) {", "+\t\tid |= IProblem.Javadoc;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d98e42d4ee14629d4a9823bc7c3de45a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a73c1b70646c33788c416636d54ca7b824b36c44", "commitAfterChange": "89bcdbe3377ffa239857ce6e220c3e9a2f048f0c", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 53, "signatureBeforeChange": "  \tprivate void printRule(StringBuffer stringBuffer)", "signatureAfterChange": "  \tprivate void printRule(StringBuffer stringBuffer)", "diff": ["-\t\t\tif ((i % this.tabSize) == 0) { ", "+\t\t\tif ((i % this.tabLength) == 0) { ", "-\t\tfor (int i = 0; i < (pageWidth / tabSize); i++) {", "+\t\tfor (int i = 0; i < (pageWidth / tabLength); i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da72a80767aea10c17caea62932840ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/IndexSummary.java", "commitBeforeChange": "a7e6b3d174d33a8a3b8d03f466c6cb3381f5f0c9", "commitAfterChange": "2e2e66f7f68b994d0931afecfd3c1e559acd59d5", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r \tpublic void write(RandomAccessFile raf) throws IOException", "signatureAfterChange": "\r \tpublic void write(RandomAccessFile raf) throws IOException", "diff": ["-\t\t\tFirstFileInBlock entry= (FirstFileInBlock) firstFilesInBlocks.elementAt(i);\r", "+\t\t\tFirstFileInBlock entry= (FirstFileInBlock) firstFilesInBlocks.get(i);\r", "-\t\t\tFirstWordInBlock entry= (FirstWordInBlock) firstWordsInBlocks.elementAt(i);\r", "+\t\t\tFirstWordInBlock entry= (FirstWordInBlock) firstWordsInBlocks.get(i);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db46da6beaac7a5528314cf570dcba29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "60adc6e9bd2a19d1f00a26879d59da4db15980bb", "commitAfterChange": "2fa8bdc58397f8ba42986ed8442348506f4b1424", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public void setDeprecationUseSeverity(int flag)", "signatureAfterChange": "\r public void setDeprecationUseSeverity(int flag)", "diff": ["-\t\tcase ERROR : \r", "+\t\tcase Error : \r", "-\t\tcase WARNING : \r", "+\t\tcase Warning : \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db54446b6bf5026aa002c8e0e9d86dd0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "  public void test061() throws JavaModelException", "signatureAfterChange": "  public void test061() throws JavaModelException", "diff": ["-\t\t\"method[METHOD_REF]{method(String, boolean, Object), Ljavadoc.methods.tags.BasicTestMethods;, (Ljava.lang.String;ZLjava.lang.Object;)V, method, (str, flag, obj), [116, 145], \"+R_DICNRNS+\"}\\n\" + ", "-\t\t\"method[METHOD_REF]{method(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, method, null, [116, 145], \"+R_DICNRNS+\"}\"", "+\t\t\"method[METHOD_REF]{method(String, boolean, Object), Ljavadoc.methods.tags.BasicTestMethods;, (Ljava.lang.String;ZLjava.lang.Object;)V, method, (str, flag, obj), [116, 145], \"+R_DRICNRNS+\"}\\n\" + ", "+\t\t\"method[METHOD_REF]{method(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, method, null, [116, 145], \"+R_DRICNRNS+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbaf545398715f99cb68c9d0f705b2ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "904e81d11d3fc634ae2d9d861dc6c73c9ea81e03", "commitAfterChange": "2fce9fdec7d24fd4985bfaa8a4da9bdc5aff2660", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 62, "signatureBeforeChange": " \tpublic boolean visit(Javadoc node)", "signatureAfterChange": " \tpublic boolean visit(TextElement node)", "diff": ["-\t\tthis.buffer.append(node.getComment());", "+\t */", "+\tpublic boolean visit(TextElement node) {", "+\t\tthis.buffer.append(node.getText());", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dca35fa62c290bb3a71508b526d3d8f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "fbe3f3aabed3fd943703368b065a95bc68cf5a8d", "commitAfterChange": "3b51e6fd25bf226c9bb29d6317b71df712cf5255", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 54, "signatureBeforeChange": "\r public int literalIndexForJavaLangStringBufferConstructor()", "signatureAfterChange": "\r public int literalIndexForJavaLangStringBufferConstructor()", "diff": ["-\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE]) == 0) {\r", "+\t\t\t\tif ((nameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE]) == 0) {\r", "-\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[STRING_CONSTR_METHOD_NAME_AND_TYPE] = currentIndex++;\r", "+\t\t\t\t\tnameAndTypeIndex = wellKnownMethodNameAndTypes[CONSTR_STRING_METHOD_NAME_AND_TYPE] = currentIndex++;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de98f6d5eaa98d34ce02296820cd037a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/ErrorsTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void testRenameToNonJava() throws JavaModelException", "signatureAfterChange": " \tpublic void testRenameToNonJava() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e02d39dbf763865cebfa1de70591508b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4a7fb72faa1d4eb35981dd799c06dbffe9837a2f", "commitAfterChange": "af607e2e1ad6576e50200e327ea9acd540ed1ad7", "methodNumberBeforeChange": 337, "methodNumberAfterChange": 337, "signatureBeforeChange": " public void testBug110336d() throws CoreException", "signatureAfterChange": " public void testBug110336d() throws CoreException", "diff": ["-\tTypeReferencesCollector collector = new TypeReferencesCollector();", "+\tTypeReferenceCollector collector = new TypeReferenceCollector();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0566c7d781e4ea4593329fae6d08121", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "3063510b6278d40b2b6e617ad11406df75b833c6", "commitAfterChange": "e7016fd643277f721c7fc9c36d93d79fa7c0ea54", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tprotected void initializeDefaultPluginPreferences()", "signatureAfterChange": " \tprotected void initializeDefaultPluginPreferences()", "diff": ["-\t\tpreferences.setDefault(COMPILER_PB_CHAR_ARRAY_NEED_STRING_CONVERSION, WARNING); ", "-\t\toptionNames.add(COMPILER_PB_CHAR_ARRAY_NEED_STRING_CONVERSION);", "+\t\tpreferences.setDefault(COMPILER_PB_CHAR_ARRAY_IN_STRING_CONCATENATION, WARNING); ", "+\t\toptionNames.add(COMPILER_PB_CHAR_ARRAY_IN_STRING_CONCATENATION);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e09908152239433ea9821741d8c6b4a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "60e84a84d2c785be17a379ead199176b00163ca2", "commitAfterChange": "dd81d5614e9912f7c701e3f5c6100178a60401f0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope)", "diff": ["-\t// NOTE: from 1.4 on, method's declaring class is touched if any different from receiver type", "+\t// NOTE: from target 1.2 on, method's declaring class is touched if any different from receiver type", "-\t\t&& ((currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4", "+\t\t&& ((currentScope.environment().options.targetJDK >= CompilerOptions.JDK1_2"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0f2a642b2f79ad4b81446b78a3fd318", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Initializer.java", "commitBeforeChange": "f03e24a20423490ce43dd47d116e6771e9f8b29a", "commitAfterChange": "0425932939e44005b87b30f06674df053a397223", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tASTNode clone(AST target)", "signatureAfterChange": " \tASTNode clone(AST target)", "diff": ["-\t\tif (this.ast.API_LEVEL == AST.LEVEL_2_0) {", "+\t\tif (this.ast.apiLevel == AST.LEVEL_2_0) {", "-\t\tif (this.ast.API_LEVEL >= AST.LEVEL_3_0) {", "+\t\tif (this.ast.apiLevel >= AST.LEVEL_3_0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1443692d4dc13fa3c0f02debddcc064", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "07a11e1e272139637f646eb5763c54327cd4bc46", "commitAfterChange": "64048b0f093f9425eaa40658b41da232045fddbb", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \t \tprivate void cleanupAllGeneratedFilesFrom(BuildContext[] cpResults)", "signatureAfterChange": " \t \tprivate void cleanupAllGeneratedFilesFrom(BuildContext[] cpResults)", "diff": ["-\t\tfinal List<IFile> deleted = new ArrayList<IFile>();", "+\t\tfinal Set<IFile> deleted = new HashSet<IFile>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1ee5effe546811d2d1204d8cef0ec07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BasicBuildTests.java", "commitBeforeChange": "d401884a43c6ad3b0ed7439a466bbdea10cca2d2", "commitAfterChange": "e471353a00f4151e770cf4f074b2e3002113d901", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void testBuild()", "signatureAfterChange": " \t \tpublic void testBuild()", "diff": ["-\t\tenv.addExternalJar(projectPath, env.getMinimalJarPath());", "+\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1f2c6c3369f2fcda4cc0922f89d8581", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterJavadocDontIndentTagsTests.java", "commitBeforeChange": "881da43b7e0b2ca5798e9c55f57054ccdaa23c6e", "commitAfterChange": "be760997ffe69084a7c4bd4d1ab81289e2452d86", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  String getOutputFolder()", "signatureAfterChange": " IPath getOutputFolder()", "diff": ["-String getOutputFolder() {", "-\treturn \"dont_indent_tags\";", "+ */", "+IPath getOutputFolder() {", "+\treturn OUTPUT_FOLDER;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e20496e8fb3efea0a6a1bca40d51da3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "0927ffa25a2592bfca0a67c9cc9e0e69775118de", "commitAfterChange": "7b934c773095ee4cd83d9fe1d55bbb70d8656cbb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "signatureAfterChange": " public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "diff": ["-\t\t\t&& (((operation.left.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_String) // exclude string concatenation which would occur backwards", "-\t\t\t&& (((operation.right.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_String)) { // exclude string concatenation which would occur backwards", "+\t\t\t&& (((operation.left.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_JavaLangString) // exclude string concatenation which would occur backwards", "+\t\t\t&& (((operation.right.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) != T_JavaLangString)) { // exclude string concatenation which would occur backwards"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e22d6231852a41bdfc3cfe4f95df354d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/OutputFolderTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void testProjectWithBin() throws JavaModelException", "signatureAfterChange": "  \tpublic void testProjectWithBin() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2733a0c54654409ac96253c353d2be2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 147, "signatureBeforeChange": " \tprotected void setModifiers(VariableDeclarationExpression variableDeclarationExpression, LocalDeclaration localDeclaration)", "signatureAfterChange": " \tprotected void setModifiers(VariableDeclarationExpression variableDeclarationExpression, LocalDeclaration localDeclaration)", "diff": ["-\t\t\t\tint modifiers = localDeclaration.modifiers & CompilerModifiers.AccJustFlag;", "-\t\t\t\tmodifiers &= ~CompilerModifiers.AccBlankFinal;", "+\t\t\t\tint modifiers = localDeclaration.modifiers & ExtraCompilerModifiers.AccJustFlag;", "+\t\t\t\tmodifiers &= ~ExtraCompilerModifiers.AccBlankFinal;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2a069dcf9c7d9ef1474361145b5c9c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "4ab9f51613d504c2ff6edffad453d042a8c04058", "commitAfterChange": "d588d04827eba4279cf3ad675c4250450aee4bea", "methodNumberBeforeChange": 163, "methodNumberAfterChange": 163, "signatureBeforeChange": " public void test142_null_ref_option()", "signatureAfterChange": " public void test142_null_ref_option()", "diff": ["-  + \" -bootclasspath \" + getLibraryClasses()", "-  + \" -cp \" + getJCEJar()", "+  + \" -bootclasspath \" + getLibraryClassesAsQuotedString()", "+  + \" -cp \" + getJCEJarAsQuotedString()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2b2ab407b7d1bf30e448eb91b9e63ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java", "commitBeforeChange": "0f5d04adf9d2fa735fce5517c85c8317372cf6c0", "commitAfterChange": "6cefacaaf91a5190221cb83191ea60dad1636887", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\t\t&& !Character.isJavaIdentifierStart(this.currentCharacter)){", "+\t\t\t\t\t&& !ScannerHelper.isJavaIdentifierStart(this.currentCharacter)){", "-\t\t\t\t\tif (Character.isJavaIdentifierStart(this.currentCharacter))", "+\t\t\t\t\tif (ScannerHelper.isJavaIdentifierStart(this.currentCharacter))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2c7a318d0431fa8ac24223214e526dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "5b94dafeec5a7664c8e7b716ab50c1465383930c", "commitAfterChange": "956f2eb6ab71716f2bca57aa07a9ec66902d3e3f", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tprotected void updateProjectReferencesIfNecessary() throws JavaModelException", "signatureAfterChange": " \tprotected void updateProjectReferencesIfNecessary() throws JavaModelException", "diff": ["-\t\t\tIProject[] projectReferences = description.getReferencedProjects();", "+\t\t\tIProject[] projectReferences = description.getDynamicReferences();", "-\t\t\tdescription.setReferencedProjects(requiredProjectArray);", "+\t\t\tdescription.setDynamicReferences(requiredProjectArray);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2d7813f4dd8c165ef4428e64225b47e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "82eb8210126dce9dcecaa23100608377607eb4d3", "commitAfterChange": "39a2af446e48bb6f168906e833c304457e17e4cf", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tpublic void testParameterizedArrayTypeSingleArgument02() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedArrayTypeSingleArgument02() throws CoreException", "diff": ["-\t\tSourceType type = selectSourceType(unit,  \"List<Exception>\"); //$NON-NLS-1$", "+\t\tIType type = selectType(unit,  \"List<Exception>\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3f121db6309c0e429248110032e7d5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowInfo.java", "commitBeforeChange": "a8ebe98c7b687ea450305732efa25afb0944336e", "commitAfterChange": "96a09d96e56ab454cb92b7163871c6f3413e482e", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public static UnconditionalFlowInfo mergedOptimizedBranches( \t\tFlowInfo initsWhenTrue, boolean isOptimizedTrue, \t\tFlowInfo initsWhenFalse, boolean isOptimizedFalse, \t\tboolean allowFakeDeadBranch)", "signatureAfterChange": " public static UnconditionalFlowInfo mergedOptimizedBranches( \t\tFlowInfo initsWhenTrue, boolean isOptimizedTrue, \t\tFlowInfo initsWhenFalse, boolean isOptimizedFalse, \t\tboolean allowFakeDeadBranch)", "diff": ["-\t\t\tmergedInfo = initsWhenFalse.setReachMode(FlowInfo.UNREACHABLE).", "+\t\t\tmergedInfo = initsWhenFalse.setReachMode(FlowInfo.UNREACHABLE_OR_DEAD).", "-\t\t\tmergedInfo = initsWhenTrue.setReachMode(FlowInfo.UNREACHABLE).", "+\t\t\tmergedInfo = initsWhenTrue.setReachMode(FlowInfo.UNREACHABLE_OR_DEAD)."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e432931c44b47f289c98f7a548ba5d74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementsImpl.java", "commitBeforeChange": "82fb6745d0f2bc2c9b5e4740da70b2e364d6955a", "commitAfterChange": "c295624cf25dea9fdc929a62413bd288dbeb35d7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t@Override \tpublic List<? extends AnnotationMirror> getAllAnnotationMirrors(Element e)", "signatureAfterChange": " \t@Override \tpublic List<? extends AnnotationMirror> getAllAnnotationMirrors(Element e)", "diff": ["-\t\t\t\tlist.add(AnnotationMirrorImpl.getAnnotationMirror(annotation));", "+\t\t\t\tlist.add(Factory.newAnnotationMirror(annotation));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e499736f571637b2459b0f1ce116a93b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "7aac6f03ecf70666410b0e689c91dafd6d67757a", "commitAfterChange": "465d091146b1d6997709777ea444048487da1d8d", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " protected void consumeAnnotationTypeMemberHeaderExtendedDims()", "signatureAfterChange": " protected void consumeAnnotationTypeMemberHeaderExtendedDims()", "diff": ["-\tAnnotationTypeMemberDeclaration annotationTypeMemberDeclaration = (AnnotationTypeMemberDeclaration) this.astStack[this.astPtr];", "+\tAnnotationMethodDeclaration annotationTypeMemberDeclaration = (AnnotationMethodDeclaration) this.astStack[this.astPtr];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e509afa6631b6b044021f0df429ab0d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ClassFileMatchLocator.java", "commitBeforeChange": "b4c2385c81cd66eb677f15796da3c5ed6a182754", "commitAfterChange": "b3636fbe84dc03d36ed04f5ddfc2bf9c91fd0e1f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void locateMatches(MatchLocator locator, ClassFile classFile, IBinaryType info) throws CoreException", "signatureAfterChange": " public void locateMatches(MatchLocator locator, ClassFile classFile, IBinaryType info) throws CoreException", "diff": ["-\t\t\t\tMethodBinding[] methods = binding.availableMethods(); // resilience", "+\t\t\t\tMethodBinding[] methods = binding.methods();", "-\t\t\t\tFieldBinding[] fields = binding.availableFields();", "+\t\t\t\tFieldBinding[] fields = binding.fields();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e625657b3da64d0925a971670147e8f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "fe905e29a608f61f2afe181f4c1e4e27bb2b95dc", "commitAfterChange": "53a7cfa9bf2a3a1ade921d716dbdc58a4bfc35d4", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic static IJavaElement create(IFile file, IJavaProject project)", "signatureAfterChange": " \tpublic static IJavaElement create(IFile file, IJavaProject project)", "diff": ["-\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isJavaFileName(name))", "+\t\t\tif (org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(name))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6fdad8b0653fe9cd7d1f7242c35f4db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "c2ef81eceba8bbab7803011fefc859183866d6fe", "commitAfterChange": "4b829c0f70a09c82336a82755fb6c8640ac8f757", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 154, "signatureBeforeChange": "\r protected void consumeStatementIfNoElse()", "signatureAfterChange": "\r protected void consumeStatementIfNoElse()", "diff": ["-\t\t\t\tendPosition); \r", "+\t\t\t\tendStatementPosition); \r", "-\t\t\t\tendPosition); \r", "+\t\t\t\tendStatementPosition); \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e71c86a7a18d5fb37403b145d7080ca4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/MultiSourceFolderAndOutputFolderTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void test0011() throws JavaModelException", "signatureAfterChange": " \tpublic void test0011() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e74379866ff2b8f36fbf2f8ac8ed0b5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 223, "methodNumberAfterChange": 223, "signatureBeforeChange": " public void javadocMissing(int sourceStart, int sourceEnd, int modifiers)", "signatureAfterChange": " public void javadocMissing(int sourceStart, int sourceEnd, int modifiers)", "diff": ["-\tboolean overriding = (modifiers & (CompilerModifiers.AccImplementing|CompilerModifiers.AccOverriding)) != 0;", "+\tboolean overriding = (modifiers & (ExtraCompilerModifiers.AccImplementing|ExtraCompilerModifiers.AccOverriding)) != 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7a0164068f135363c39792eea0d0853", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "8b532c89fe75cdcd516dedb1f57b44f4fab79fb0", "commitAfterChange": "14eef462fbaf0bab3c247296c2a42a1fdc4f58a6", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \t \tpublic Expression convert(EqualExpression expression)", "signatureAfterChange": " \t \tpublic Expression convert(EqualExpression expression)", "diff": ["-\t\tswitch ((expression.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) {", "+\t\tswitch ((expression.bits & AstNode.OperatorMASK) >> AstNode.OperatorSHIFT) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7cb85d5f59a2702f94661ce8e7fa63d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "99d1c9e7b8ac9fe9595eeb74ab1264a2c76cb21d", "commitAfterChange": "f5ba3eda07b1ea41890a7ce793b9da47e6b4d63e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic Main(PrintWriter outWriter, PrintWriter errWriter, boolean systemExitWhenFinished)", "signatureAfterChange": "  \tpublic Main(PrintWriter outWriter, PrintWriter errWriter, boolean systemExitWhenFinished)", "diff": ["-\t\t\tCompilerOptions.DO_NOT_GENERATE);", "+\t\t\tCompilerOptions.GENERATE);", "-\t\t\tCompilerOptions.DO_NOT_GENERATE);", "+\t\t\tCompilerOptions.GENERATE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8a35263f29eb72e103ee5d8d815a2c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelStatus.java", "commitBeforeChange": "cdf4427e144add1a36f3939b37283556991d4db8", "commitAfterChange": "75f702ac7a9f5b98d8daf289140c0d700af63244", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic boolean isMultiStatus()", "signatureAfterChange": " \tpublic boolean isMultiStatus()", "diff": ["-\t\treturn fChildren != fgEmptyChildren;", "+\t\treturn children != NO_CHILDREN;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8a43a1b5d4abd3cca691bf4bd561811", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "fe905e29a608f61f2afe181f4c1e4e27bb2b95dc", "commitAfterChange": "53a7cfa9bf2a3a1ade921d716dbdc58a4bfc35d4", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic boolean contains(IResource resource)", "signatureAfterChange": " \tpublic boolean contains(IResource resource)", "diff": ["-\t\t\t\t\treturn !org.eclipse.jdt.internal.compiler.util.Util.isJavaFileName(fullPath.lastSegment());", "+\t\t\t\t\treturn !org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(fullPath.lastSegment());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8be082a8ae763954302558ebb910eba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "98d0749123d10e91b3924cae016a7083355abf01", "commitAfterChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "signatureAfterChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "diff": ["-\torg.eclipse.jdt.internal.core.util.SimpleSet interfacesSeen = new org.eclipse.jdt.internal.core.util.SimpleSet(lastPosition * 2);", "+\torg.eclipse.jdt.internal.compiler.util.SimpleSet interfacesSeen = new org.eclipse.jdt.internal.compiler.util.SimpleSet(lastPosition * 2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8f25b0a04be9e379f9fdf7d256fba0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "b136d601b8b65cbe6a937874c4ada8fd9c6f056d", "commitAfterChange": "4c6ae9dae1fc96f9fd302751a25b14b4f972fb0f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public Parser(ProblemReporter problemReporter, boolean optimizeStringLiterals)", "signatureAfterChange": "  public Parser(ProblemReporter problemReporter, boolean optimizeStringLiterals)", "diff": ["-\t// annotation support", "-\tthis.annotationParser = new AnnotationParser(this);\t", "+\t// javadoc support", "+\tthis.javadocParser = new JavadocParser(this);\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e909940235d64b7525560dda34d46cf2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/CompletionRequestor.java", "commitBeforeChange": "9f83390b8974225073423e6d4d9c0d282b2dec03", "commitAfterChange": "187fc3c8a943e9120c4cf02223f70b9ac6c29cbc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic final void setIgnored(int completionProposalKind, boolean ignore)", "signatureAfterChange": " \tpublic final void setIgnored(int completionProposalKind, boolean ignore)", "diff": ["-\t\tif (completionProposalKind < CompletionProposal.ANONYMOUS_CLASS_DECLARATION", "-\t\t\t|| completionProposalKind > CompletionProposal.METHOD_NAME_REFERENCE) {", "+\t\tif (completionProposalKind < CompletionProposal.FIRST_KIND", "+\t\t\t|| completionProposalKind > CompletionProposal.LAST_KIND) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e947729b088570a039bb3e557cdb1f64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "  public void test060() throws JavaModelException", "signatureAfterChange": "  public void test060() throws JavaModelException", "diff": ["-\t\t\"method[METHOD_REF]{method(String, boolean, Object), Ljavadoc.methods.tags.BasicTestMethods;, (Ljava.lang.String;ZLjava.lang.Object;)V, method, (str, flag, obj), \"+this.positions+R_DICNRNS+\"}\\n\" + ", "-\t\t\"method[METHOD_REF]{method(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, method, null, \"+this.positions+R_DICNRNS+\"}\"", "+\t\t\"method[METHOD_REF]{method(String, boolean, Object), Ljavadoc.methods.tags.BasicTestMethods;, (Ljava.lang.String;ZLjava.lang.Object;)V, method, (str, flag, obj), \"+this.positions+R_DRICNRNS+\"}\\n\" + ", "+\t\t\"method[METHOD_REF]{method(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, method, null, \"+this.positions+R_DRICNRNS+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e965b122022064ec6a589ccea909e6e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "045a67be23e966bc4b7f49b2b17d7449e71c3890", "commitAfterChange": "09d26eca94e41cb67a73a9cec71e813ec866fc65", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate static ConstructorDeclaration parseStatements(char[] source, Map settings)", "signatureAfterChange": "  \tprivate static ConstructorDeclaration parseStatements(char[] source, Map settings)", "diff": ["-\t\tParser parser = new Parser(problemReporter, false);", "+\t\tCodeFormatterParser parser = new CodeFormatterParser(problemReporter, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e97e25f7f38861d4b4826458039b1583", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java", "commitBeforeChange": "522e84acc5c220c07378cd67640c99884ac9cc9d", "commitAfterChange": "e5f48a4d4e39a733649e1d7678dd3cc38b1f57e5", "methodNumberBeforeChange": 233, "methodNumberAfterChange": 233, "signatureBeforeChange": " \tpublic void testPackageDeclaration()", "signatureAfterChange": " \tpublic void testPackageDeclaration()", "diff": ["-\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\tif (ast.apiLevel() >= AST.JLS3) {", "-\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\tif (ast.apiLevel() == AST.JLS2) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9c7b915baf10981f0694f5ac9023d5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  public void test022() throws JavaModelException", "signatureAfterChange": "  public void test022() throws JavaModelException", "diff": ["-\t\t\"foo[FIELD_REF]{foo, Ljavadoc.methods.tags.BasicTestMethods;, I, foo, null, \"+this.positions+R_DICNRNS+\"}\\n\" + ", "-\t\t\"foo[METHOD_REF]{foo(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, foo, null, \"+this.positions+R_DICNRNS+\"}\"", "+\t\t\"foo[FIELD_REF]{foo, Ljavadoc.methods.tags.BasicTestMethods;, I, foo, null, \"+this.positions+R_DRICNRNS+\"}\\n\" + ", "+\t\t\"foo[METHOD_REF]{foo(), Ljavadoc.methods.tags.BasicTestMethods;, ()V, foo, null, \"+this.positions+R_DRICNRNS+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9cef7837d9fa2f08e649610d7f157aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "995fcf13bc3ad1e9b32a28fa575739b0c1b6aa41", "commitAfterChange": "125f2e11905eb2190c50776a296c49a5b3f7e6c1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \r public CompilationUnitScope(CompilationUnitDeclaration unit, LookupEnvironment environment)", "signatureAfterChange": "\r \r public CompilationUnitScope(CompilationUnitDeclaration unit, LookupEnvironment environment)", "diff": ["-\t\tthis.typeReferences = new ObjectVector();\r", "+\t\tthis.referencedTypes = new ObjectVector();\r", "-\t\tthis.typeReferences = null;\r", "+\t\tthis.referencedTypes = null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea87d920e4a178d35cdba1ac3213816d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "580481ae11bd0f856242b0cf44caa66107bf550d", "commitAfterChange": "d08e87c35b21123010227cf2729df51d820e4d50", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  static Object convertMemberValue(Object binaryValue, LookupEnvironment env, char[][][] missingTypeNames, boolean resolveEnumConstants)", "signatureAfterChange": "  static Object convertMemberValue(Object binaryValue, LookupEnvironment env, char[][][] missingTypeNames, boolean resolveEnumConstants)", "diff": ["-\t\treturn env.getTypeFromSignature(((ClassSignature) binaryValue).getTypeName(), 0, -1, false, null, missingTypeNames, TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER);", "+\t\treturn env.getTypeFromSignature(((ClassSignature) binaryValue).getTypeName(), 0, -1, false, null, missingTypeNames, ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER);", "-\t\tReferenceBinding enumType = (ReferenceBinding) env.getTypeFromSignature(ref.getTypeName(), 0, -1, false, null, missingTypeNames, TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER);", "+\t\tReferenceBinding enumType = (ReferenceBinding) env.getTypeFromSignature(ref.getTypeName(), 0, -1, false, null, missingTypeNames, ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ead18c1c9d666d6d2ed3f6984eff0b88", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tfinal List internalGetChildListProperty(ChildListPropertyDescriptor property)", "signatureAfterChange": " \tfinal List internalGetChildListProperty(ChildListPropertyDescriptor property)", "diff": ["-\t\tif (property == EXTRA_DIMENSION_INFOS_PROPERTY) {", "-\t\t\treturn extraDimensionInfos();", "+\t\tif (property == EXTRA_DIMENSIONS2_PROPERTY) {", "+\t\t\treturn extraDimensions();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb71c3a89fcc30de2b585bf0dfacbd10", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterAST8Test.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 129, "signatureBeforeChange": " \tpublic void test0127() throws JavaModelException", "signatureAfterChange": " \tpublic void test0127() throws JavaModelException", "diff": ["-\t\tvariableDeclarationFragment.extraDimensionInfos().clear();", "-\t\tvariableDeclarationFragment.extraDimensionInfos().add(this.ast.newExtraDimension());", "+\t\tvariableDeclarationFragment.extraDimensions().clear();", "+\t\tvariableDeclarationFragment.extraDimensions().add(this.ast.newExtraDimension());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb98121e6e5500a8d4e1d1eeededc77c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IntLiteral.java", "commitBeforeChange": "5e70a582e36fd39d7629b8f556b66f50a1050058", "commitAfterChange": "5ca447c521262374b5199c22b8bb8d32a007f444", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void computeConstant()", "signatureAfterChange": " public void computeConstant()", "diff": ["-\t\t\tif ((digitValue = Character.digit(source[j++],radix))\t< 0 ) \t", "+\t\t\tif ((digitValue = ScannerHelper.digit(source[j++],radix))\t< 0 ) \t", "-\t\t\tif ((digitValue = Character.digit(source[i],10))\t< 0 ) ", "+\t\t\tif ((digitValue = ScannerHelper.digit(source[i],10))\t< 0 ) "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebdee9c4cf015e4a94cb139b3315bf1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingComparator.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tstatic boolean isEqual(VariableBinding variableBinding, VariableBinding variableBinding2)", "signatureAfterChange": "  \tstatic boolean isEqual(VariableBinding variableBinding, VariableBinding variableBinding2)", "diff": ["-\t\treturn (variableBinding.modifiers & CompilerModifiers.AccJustFlag) == (variableBinding2.modifiers & CompilerModifiers.AccJustFlag)", "+\t\treturn (variableBinding.modifiers & ExtraCompilerModifiers.AccJustFlag) == (variableBinding2.modifiers & ExtraCompilerModifiers.AccJustFlag)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec0439854981602eb0379690840819a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsClearBlankLinesTests.java", "commitBeforeChange": "881da43b7e0b2ca5798e9c55f57054ccdaa23c6e", "commitAfterChange": "be760997ffe69084a7c4bd4d1ab81289e2452d86", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  String getOutputFolder()", "signatureAfterChange": " IPath getOutputFolder()", "diff": ["-String getOutputFolder() {", "-\treturn \"clear_blank_lines\";", "+ */", "+IPath getOutputFolder() {", "+\treturn OUTPUT_FOLDER;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec163605df8b994383cb27ad016fac59", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTestsRequestor2.java", "commitBeforeChange": "fb96a1c85d64a712beb45b02ec6ef71c691d3831", "commitAfterChange": "382b067fdb60eb61ee53faad83800b76fff0bbbf", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic void allowAllRequiredProposals()", "signatureAfterChange": " \t \tpublic void allowAllRequiredProposals()", "diff": ["-\t\tfor (int i = CompletionProposal.ANONYMOUS_CLASS_DECLARATION; i <= CompletionProposal.JAVADOC_INLINE_TAG; i++) {", "-\t\t\tfor (int j = CompletionProposal.ANONYMOUS_CLASS_DECLARATION; j <= CompletionProposal.JAVADOC_INLINE_TAG; j++) {", "+\t\tfor (int i = CompletionProposal.ANONYMOUS_CLASS_DECLARATION; i <= CompletionProposal.TYPE_IMPORT; i++) {", "+\t\t\tfor (int j = CompletionProposal.ANONYMOUS_CLASS_DECLARATION; j <= CompletionProposal.TYPE_IMPORT; j++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecae7fe60ca86475cc3c4f7ec6370eea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4a7fb72faa1d4eb35981dd799c06dbffe9837a2f", "commitAfterChange": "af607e2e1ad6576e50200e327ea9acd540ed1ad7", "methodNumberBeforeChange": 334, "methodNumberAfterChange": 334, "signatureBeforeChange": " public void testBug110336a() throws CoreException", "signatureAfterChange": " public void testBug110336a() throws CoreException", "diff": ["-\tTypeReferencesCollector collector = new TypeReferencesCollector();", "+\tTypeReferenceCollector collector = new TypeReferenceCollector();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ece17c7d9bb9934fedc6014839de3d7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "84bab690fce0d07b753bfc05c56b8e56d168a1a6", "commitAfterChange": "72404957161b9a06b0beff261255d6fcbe542913", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tpublic boolean visit(TypeDeclarationStatement node)", "signatureAfterChange": " \tpublic boolean visit(TypeDeclarationStatement node)", "diff": ["-\t\tif (node.getAST().apiLevel() == AST.JLS2) {", "-\t\t\tnode.getTypeDeclaration().accept(this);", "+\t\tif (node.getAST().apiLevel() == AST.JLS2_INTERNAL) {", "+\t\t\tnode.internalGetTypeDeclaration().accept(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecfbb3ccd9f6918f44f8e7221a693a67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, boolean leftIsCast, Expression right, int rightTypeId, boolean rightIsCast)", "signatureAfterChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, boolean leftIsCast, Expression right, int rightTypeId, boolean rightIsCast)", "diff": ["-\t\t\tif ((left.bits & UnnecessaryCastMASK) == 0 && left.resolvedType.isBaseType()) {", "+\t\t\tif ((left.bits & UnnecessaryCast) == 0 && left.resolvedType.isBaseType()) {", "-\t\t\tif ((right.bits & UnnecessaryCastMASK) == 0 && right.resolvedType.isBaseType()) {", "+\t\t\tif ((right.bits & UnnecessaryCast) == 0 && right.resolvedType.isBaseType()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed578e383188fb93077da92f9982e44a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FalseLiteral.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "signatureAfterChange": " public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired)", "diff": ["-public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired) {", "+public void generateOptimizedBoolean(BlockScope currentScope, CodeStream codeStream, BranchLabel trueLabel, BranchLabel falseLabel, boolean valueRequired) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edbb7c7c672ba71a168d6b1c8814c13a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocBugsCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void testBug114341d() throws JavaModelException", "signatureAfterChange": " public void testBug114341d() throws JavaModelException", "diff": ["-\t\t\"Secondary.Member[JAVADOC_TYPE_REF]{{@link Member}, javadoc.text, Ljavadoc.text.Secondary$Member;, null, null, \"+this.positions+R_DICNRIT+\"}\\n\" + ", "-\t\t\"Secondary.Member[TYPE_REF]{Member, javadoc.text, Ljavadoc.text.Secondary$Member;, null, null, \"+this.positions+R_DICNR+\"}\"", "+\t\t\"Secondary.Member[JAVADOC_TYPE_REF]{{@link Member}, javadoc.text, Ljavadoc.text.Secondary$Member;, null, null, \"+this.positions+R_DRICNRIT+\"}\\n\" + ", "+\t\t\"Secondary.Member[TYPE_REF]{Member, javadoc.text, Ljavadoc.text.Secondary$Member;, null, null, \"+this.positions+R_DRICNR+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edc801e65fe3add9b07c46a3e46a6abb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "4ab9f51613d504c2ff6edffad453d042a8c04058", "commitAfterChange": "d588d04827eba4279cf3ad675c4250450aee4bea", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void test008()", "signatureAfterChange": " public void test008()", "diff": ["-        + \" -bootclasspath \" + getLibraryClasses()", "-        + \" -cp \" + getJCEJar()", "+        + \" -bootclasspath \" + getLibraryClassesAsQuotedString()", "+        + \" -cp \" + getJCEJarAsQuotedString()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee14ede22edfd85341c1ce170e55cc3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 315, "methodNumberAfterChange": 314, "signatureBeforeChange": " protected void writePosition(Label label, int forwardReference)", "signatureAfterChange": " protected void writePosition(BranchLabel label, int forwardReference)", "diff": ["-protected void writePosition(Label label, int forwardReference) {", "+protected void writePosition(BranchLabel label, int forwardReference) {", "-\t\tif ((label.tagBits & Label.WIDE) != 0) {", "+\t\tif ((label.tagBits & BranchLabel.WIDE) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee65d7c7f1741edea25b798f7cdfe389", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/DocumentElementParser.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " protected void consumeInterfaceHeaderName1()", "signatureAfterChange": " protected void consumeInterfaceHeaderName1()", "diff": ["-\t\t\ttypeDecl.bits |= ASTNode.IsMemberTypeMASK;", "+\t\t\ttypeDecl.bits |= ASTNode.IsMemberType;", "-\t\ttypeDecl.bits |= ASTNode.IsLocalTypeMASK;", "+\t\ttypeDecl.bits |= ASTNode.IsLocalType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee6d9a5a67eb2fc16ae555474037eb5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 105, "signatureBeforeChange": " \tpublic boolean visit(ThisReference thisReference, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(ThisReference thisReference, BlockScope scope)", "diff": ["-\t\t\tfinal int numberOfParens = (thisReference.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\t\tfinal int numberOfParens = (thisReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef99b01572f5a357dd5b1627d89b7ae8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "83dc88df7a1508be17b764df4120ac8a34178f58", "commitAfterChange": "f428b70bc80bfdae47260a00a8636113b21b698c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, InferenceContext inferenceContext, int constraint)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, InferenceContext inferenceContext, int constraint)", "diff": ["-\t\t        actualEquivalent = actualType.findSuperTypeWithSameErasure(this.type);", "+\t\t        actualEquivalent = actualType.findSuperTypeOriginatingFrom(this.type);", "-\t\t        formalEquivalent = this.findSuperTypeWithSameErasure(actualType);", "+\t\t        formalEquivalent = this.findSuperTypeOriginatingFrom(actualType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f01b2a638166c0aed6e3bbaa041be895", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDelta.java", "commitBeforeChange": "f5dedbad023ed535da8140c4ada528c2bf574f20", "commitAfterChange": "b7dcee8ec99a66c7cd3b7ec7ac6ac22c9994d5db", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void movedTo(IJavaElement movedToElement, IJavaElement movedFromElement)", "signatureAfterChange": " public void movedTo(IJavaElement movedToElement, IJavaElement movedFromElement)", "diff": ["-\taddedDelta.fKind = ADDED;", "-\taddedDelta.fChangeFlags |= F_MOVED_FROM;", "+\taddedDelta.kind = ADDED;", "+\taddedDelta.changeFlags |= F_MOVED_FROM;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f02e793f672d136dad27cff45b3ba3af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "0f5d04adf9d2fa735fce5517c85c8317372cf6c0", "commitAfterChange": "6cefacaaf91a5190221cb83191ea60dad1636887", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " public static final boolean match( \tchar[] pattern, \tint patternStart, \tint patternEnd, \tchar[] name, \tint nameStart, \tint nameEnd, \tboolean isCaseSensitive)", "signatureAfterChange": " public static final boolean match( \tchar[] pattern, \tint patternStart, \tint patternEnd, \tchar[] name, \tint nameStart, \tint nameEnd, \tboolean isCaseSensitive)", "diff": ["-\t\t\t\t: Character.toLowerCase(name[iName]))", "+\t\t\t\t: ScannerHelper.toLowerCase(name[iName]))", "-\t\tif ((isCaseSensitive ? name[iName] : Character.toLowerCase(name[iName]))", "+\t\tif ((isCaseSensitive ? name[iName] : ScannerHelper.toLowerCase(name[iName]))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f093c80baa710f1cd28f6973835599fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "f9968462ad3e78057baba9747e91f7b6e3ea59e1", "commitAfterChange": "1f65e2f1d1142c8be683dea8425f1840c9121137", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " void checkMethods()", "signatureAfterChange": " void checkMethods()", "diff": ["-\t\t\t\t\t\tif (doesMethodOverride(currentMethod, inheritedMethod)) {", "+\t\t\t\t\t\tif (isParameterSubsignature(currentMethod, inheritedMethod)) {", "-\t\t\t\t\tif (doesMethodOverride(inheritedMethod, otherInheritedMethod)) {", "+\t\t\t\t\tif (isParameterSubsignature(inheritedMethod, otherInheritedMethod)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0eac3701f805fd7b06439815fe634da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "5e70a582e36fd39d7629b8f556b66f50a1050058", "commitAfterChange": "5ca447c521262374b5199c22b8bb8d32a007f444", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["-\t\tif (this.scanner.currentCharacter != ' ' && !Character.isWhitespace(this.scanner.currentCharacter)) {", "+\t\tif (this.scanner.currentCharacter != ' ' && !ScannerHelper.isWhitespace(this.scanner.currentCharacter)) {", "-\t\t\t\t\t\tif (this.scanner.currentCharacter == ' ' || Character.isWhitespace(this.scanner.currentCharacter)) {", "+\t\t\t\t\t\tif (this.scanner.currentCharacter == ' ' || ScannerHelper.isWhitespace(this.scanner.currentCharacter)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0fa9b99acc053c4125c53d2ab85f52c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/CopyResourceTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void testProjectWith2SrcAsBin() throws JavaModelException", "signatureAfterChange": "  \tpublic void testProjectWith2SrcAsBin() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f11640d5e423d823cbd86b406e2586cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterJavadocDontIndentTagsDescriptionTests.java", "commitBeforeChange": "881da43b7e0b2ca5798e9c55f57054ccdaa23c6e", "commitAfterChange": "be760997ffe69084a7c4bd4d1ab81289e2452d86", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  String getOutputFolder()", "signatureAfterChange": " IPath getOutputFolder()", "diff": ["-String getOutputFolder() {", "-\treturn \"dont_indent_descr\";", "+ */", "+IPath getOutputFolder() {", "+\treturn OUTPUT_FOLDER;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f11a9bc47c47ec0b46da48cc7a87f04e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 95, "signatureBeforeChange": " \tpublic boolean visit( \t\tQualifiedTypeReference qualifiedTypeReference, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tQualifiedTypeReference qualifiedTypeReference, \t\tBlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (qualifiedTypeReference.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (qualifiedTypeReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f12b5a70b4713b62351c33e33d87f49a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "4253c3857fdc6ac2b7d8f2fab949e195fec88f49", "commitAfterChange": "72ac6cbecbda631e09e5ff29bcd95cc93135ab26", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "  void compareFormattedSource() throws IOException, Exception", "signatureAfterChange": "  void compareFormattedSource() throws IOException, Exception", "diff": ["-\t\t\t\t\tString expected = removeKnownDifferences(oldComment);", "-\t\t\t\t\tString actual = removeKnownDifferences(newComment);", "+\t\t\t\t\tString expected = cleanAllKnownDifferences(oldComment);", "+\t\t\t\t\tString actual = cleanAllKnownDifferences(newComment);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f145244e90a9c5027551725b03b67689", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 157, "methodNumberAfterChange": 157, "signatureBeforeChange": "\r protected void consumeStatementLabel()", "signatureAfterChange": "\r protected void consumeStatementLabel()", "diff": ["-\t\t\t\tendPosition); \r", "+\t\t\t\tendStatementPosition); \r", "-\t\t\t\tendPosition); \r", "+\t\t\t\tendStatementPosition); \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1476951d623d8ca6b22b65fe17b03cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "985d5704b5812718c29d572a9f4e88e4ef1e7e81", "commitAfterChange": "f881f7f3af831f777efbcae1d912f604e776b198", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " public void forbiddenReference(TypeBinding type, ASTNode location, String messageTemplate)", "signatureAfterChange": " public void forbiddenReference(TypeBinding type, ASTNode location, String messageTemplate)", "diff": ["-\t\tnew String[] { Util.bindMessage(messageTemplate, new String[]{ new String(type.shortReadableName()) } ) },", "+\t\tnew String[] { MessageFormat.format(messageTemplate, new String[]{ new String(type.shortReadableName())})},"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f15f231869110a5c4a3d4c263e0a5d40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BasicBuildTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void testBuild() throws JavaModelException", "signatureAfterChange": " \t \tpublic void testBuild() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2722d42edc1b98c1b122155918c61a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "2638be2ccc1738a8756046b508b2a9be01dab4c9", "commitAfterChange": "2af4d6c5a01ec5b5f71fc5f4417f402b3cbb8976", "methodNumberBeforeChange": 183, "methodNumberAfterChange": 183, "signatureBeforeChange": " public void invokeJavaLangEnumname(TypeBinding typeBinding)", "signatureAfterChange": " public void invokeJavaLangEnumname(TypeBinding typeBinding)", "diff": ["-\t\t\tQualifiedNamesConstants.Name,", "-\t\t\tQualifiedNamesConstants.NameSignature);", "+\t\t\tConstantPool.Name,", "+\t\t\tConstantPool.NameSignature);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f29e755cd5702bd19d198ae58ff7ca2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/ExecutionTests.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void testSuccess() throws JavaModelException", "signatureAfterChange": " \t \tpublic void testSuccess() throws JavaModelException", "diff": ["-\t\tenv.addExternalJar(projectPath, Util.getJavaClassLib());", "+\t\tenv.addExternalJars(projectPath, Util.getJavaClassLibs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f32829e52c1f2d18251988ac943cfe9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public int literalIndexForJavaLangIntegerTYPE()", "signatureAfterChange": " public int literalIndexForJavaLangIntegerTYPE()", "diff": ["-\tif ((index = wellKnownFields[TYPE_INTEGER_FIELD]) == 0) {", "+\tif ((index = wellKnownFields[JAVA_LANG_INTEGER_TYPE_FIELD]) == 0) {", "-\t\tindex = wellKnownFields[TYPE_INTEGER_FIELD] = currentIndex++;", "+\t\tindex = wellKnownFields[JAVA_LANG_INTEGER_TYPE_FIELD] = currentIndex++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f32dcc59d97d4c7b118bc61b891825ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "e9e152854a18ad6afb2bc47a55019e2460208202", "commitAfterChange": "a6585bad0d98e698a5f87d043a6edca3334c865d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \t\tBindingTables()", "signatureAfterChange": "  \t\tBindingTables()", "diff": ["-\t\t\tthis.compilerBindingsToASTBindings = new HashMap();", "-\t\t\tthis.bindingKeysToBindings = new HashMap();", "+\t\t\tthis.compilerBindingsToASTBindings = new ConcurrentHashMap();", "+\t\t\tthis.bindingKeysToBindings = new ConcurrentHashMap();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f40fa44f07d26dfad026a6bb983b7162", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "e7e7564689e931d1fed71c56fbe47c45f27678fe", "commitAfterChange": "e414d36721aa05dbbac7b21bf49fdccb073e6286", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 54, "signatureBeforeChange": "  \tprivate void printRule(StringBuffer stringBuffer)", "signatureAfterChange": "  \tprivate void printRule(StringBuffer stringBuffer)", "diff": ["-\t\t\tif ((i % this.tabLength) == 0) { ", "+\t\t\tif ((i % this.tabSize) == 0) { ", "-\t\tfor (int i = 0; i < (pageWidth / tabLength); i++) {", "+\t\tfor (int i = 0; i < (pageWidth / tabSize); i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4932ab85b89da3e61e210b798991835", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 79, "signatureBeforeChange": " \tpublic boolean visit( \t\tInstanceOfExpression instanceOfExpression, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tInstanceOfExpression instanceOfExpression, \t\tBlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (instanceOfExpression.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (instanceOfExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f52f4de97a3bf1a8fdd4c10ac26d47eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "4a7fb72faa1d4eb35981dd799c06dbffe9837a2f", "commitAfterChange": "af607e2e1ad6576e50200e327ea9acd540ed1ad7", "methodNumberBeforeChange": 341, "methodNumberAfterChange": 341, "signatureBeforeChange": " public void testBug110336h() throws CoreException", "signatureAfterChange": " public void testBug110336h() throws CoreException", "diff": ["-\tTypeReferencesCollector collector = new TypeReferencesCollector();", "+\tTypeReferenceCollector collector = new TypeReferenceCollector();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5edf62bb03fb22abf0c3ecc50dd1b8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "69458def708eedff53dace674666304d76a16916", "commitAfterChange": "57f3418737401a9accef24fe5cc12793778014a7", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprivate static String getPluginDirectoryPath()", "signatureAfterChange": " \tprivate static String getPluginDirectoryPath()", "diff": ["-\t\t\treturn new File(Platform.asLocalURL(platformURL).getFile()).getAbsolutePath();", "+\t\t\treturn new File(FileLocator.toFileURL(platformURL).getFile()).getAbsolutePath();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f647bbd86b8fc912939a57b958267f0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocPackageCompletionModelTest.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  public void test013() throws JavaModelException", "signatureAfterChange": "  public void test013() throws JavaModelException", "diff": ["-\t\t\"java.lang.annotation[PACKAGE_REF]{java.lang.annotation, java.lang.annotation, null, null, null, \"+this.positions+R_DICQNR+\"}\\n\" + ", "-\t\t\"java.lang[PACKAGE_REF]{java.lang, java.lang, null, null, null, \"+this.positions+R_DICQNR+\"}\"", "+\t\t\"java.lang.annotation[PACKAGE_REF]{java.lang.annotation, java.lang.annotation, null, null, null, \"+this.positions+R_DRICQNR+\"}\\n\" + ", "+\t\t\"java.lang[PACKAGE_REF]{java.lang, java.lang, null, null, null, \"+this.positions+R_DRICQNR+\"}\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f64c3705252ab854e0e2b19af612000c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "9161e70641968b4f408d9d0aea97cd4b625c4612", "commitAfterChange": "3a032d6d22a45470265780981aec9b2bfbd82a52", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "  public InternalMethodReferenceMatch newMethodReferenceMatch( \t\tIJavaElement enclosingElement, \t\tBinding enclosingBinding, \t\tint accuracy, \t\tint offset, \t\tint length, \t\tboolean isConstructor, \t\tboolean isSynthetic, \t\tASTNode reference)", "signatureAfterChange": "  public MethodReferenceMatch newMethodReferenceMatch( \t\tIJavaElement enclosingElement, \t\tBinding enclosingBinding, \t\tint accuracy, \t\tint offset, \t\tint length, \t\tboolean isConstructor, \t\tboolean isSynthetic, \t\tASTNode reference)", "diff": ["-public InternalMethodReferenceMatch newMethodReferenceMatch(", "+public MethodReferenceMatch newMethodReferenceMatch(", "-\treturn new InternalMethodReferenceMatch(enclosingElement, accuracy, offset, length, isConstructor, isSynthetic, isOverridden, insideDocComment, participant, resource);", "+\treturn new MethodReferenceMatch(enclosingElement, accuracy, offset, length, isConstructor, isSynthetic, isOverridden, insideDocComment, participant, resource);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f66c29713c1e0f27953ccdd7aac0cd95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "1534c3fb9312be746c807d9f0aa370d7a2598284", "commitAfterChange": "f9b5a54e0afa9af686e707bcc0c484de0728c860", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic boolean match(CreationReference node, Object other)", "signatureAfterChange": " \tpublic boolean match(CreationReference node, Object other)", "diff": ["-\t\t\tsafeSubtreeMatch(node.getExpression(), o.getExpression())", "+\t\t\tsafeSubtreeMatch(node.getType(), o.getType())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f694a709c123d7cae9b3d05d43d84f2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/NamingConventions.java", "commitBeforeChange": "0f5d04adf9d2fa735fce5517c85c8317372cf6c0", "commitAfterChange": "6cefacaaf91a5190221cb83191ea60dad1636887", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tprivate static char[] suggestAccessorName(IJavaProject project, char[] fieldName, int modifiers)", "signatureAfterChange": " \t \tprivate static char[] suggestAccessorName(IJavaProject project, char[] fieldName, int modifiers)", "diff": ["-\t\tif (name.length > 0 && Character.isLowerCase(name[0])) {", "-\t\t\tname[0] = Character.toUpperCase(name[0]);", "+\t\tif (name.length > 0 && ScannerHelper.isLowerCase(name[0])) {", "+\t\t\tname[0] = ScannerHelper.toUpperCase(name[0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7232934015df23627ba7b52720666ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t\t \tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": " \t\t \tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "diff": ["-\t\t\t\tIProblem[] problems = methodDeclaration.compilationResult().problems;", "+\t\t\t\tCategorizedProblem[] problems = methodDeclaration.compilationResult().problems;", "-\t\t\t\t\t\tIProblem currentProblem = problems[i];", "+\t\t\t\t\t\tCategorizedProblem currentProblem = problems[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7324f8ee74698bdd226591e34e23cee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "adb1e4d21f756fdc893d84befd3e859cfa2aa662", "commitAfterChange": "2941812daedfecddb313ba4dd0685bac7c26b287", "methodNumberBeforeChange": 396, "methodNumberAfterChange": 396, "signatureBeforeChange": " \tpublic void test377()", "signatureAfterChange": " \tpublic void test377()", "diff": ["-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_ARRAY_INITIALIZER_BRACE_POSITION, DefaultCodeFormatterConstants.END_OF_LINE);", "-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_ARRAY_INITIALIZER_CONTINUATION_INDENTATION, \"1\");", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ARRAY_INITIALIZER, DefaultCodeFormatterConstants.END_OF_LINE);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_CONTINUATION_INDENTATION_FOR_ARRAY_INITIALIZER, \"1\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f80e72f9524810d9dc11a044207aa34a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "517b7635549251305475f5979e09084934078df3", "commitAfterChange": "1d890ea58166bb002c22a6562a5afba809d4c5d9", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void init(ClassFile targetClassFile)", "signatureAfterChange": " public void init(ClassFile targetClassFile)", "diff": ["-\tif (this.stackMarkers != null) {", "-\t\tthis.stackMarkers.clear();", "+\tif (this.stackDepthMarkers != null) {", "+\t\tthis.stackDepthMarkers.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f82f37322592d50f8eaa71524fe58b22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ClassInstanceCreation.java", "commitBeforeChange": "f03e24a20423490ce43dd47d116e6771e9f8b29a", "commitAfterChange": "0425932939e44005b87b30f06674df053a397223", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tASTNode clone(AST target)", "signatureAfterChange": " \tASTNode clone(AST target)", "diff": ["-\t\tif (this.ast.API_LEVEL == AST.LEVEL_2_0) {", "+\t\tif (this.ast.apiLevel == AST.LEVEL_2_0) {", "-\t\tif (this.ast.API_LEVEL >= AST.LEVEL_3_0) {", "+\t\tif (this.ast.apiLevel >= AST.LEVEL_3_0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8533cc8d89ad4973da133e4902eec98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " protected void consumeClassHeaderName1()", "signatureAfterChange": " protected void consumeClassHeaderName1()", "diff": ["-\t\t\ttypeDecl.bits |= ASTNode.IsMemberTypeMASK;", "+\t\t\ttypeDecl.bits |= ASTNode.IsMemberType;", "-\t\ttypeDecl.bits |= ASTNode.IsLocalTypeMASK;", "+\t\ttypeDecl.bits |= ASTNode.IsLocalType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f91d9710d6121515cf0646b047748244", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void computeLocalVariablePositions(int initOffset, CodeStream codeStream)", "signatureAfterChange": " \tpublic void computeLocalVariablePositions(int initOffset, CodeStream codeStream)", "diff": ["-\t\t\t\t\t&& ((local.declaration.bits & AstNode.IsLocalDeclarationReachableMASK) != 0)) { // declaration is reachable", "+\t\t\t\t\t&& ((local.declaration.bits & ASTNode.IsLocalDeclarationReachableMASK) != 0)) { // declaration is reachable", "-\t\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForArgument(argument, (AstNode)this.referenceContext); ", "+\t\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForArgument(argument, (ASTNode)this.referenceContext); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9490503f67b99ea160dda6176b384a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "1e4efd37f7fb00c3294d231f7375bee387900c19", "commitAfterChange": "a9adab1d13c19ec53df5d462147c7a9d9ca97b01", "methodNumberBeforeChange": 321, "methodNumberAfterChange": 321, "signatureBeforeChange": "  \tpublic void test298()", "signatureAfterChange": "  \tpublic void test298()", "diff": ["-\t\toptions.put(JavaCore.FORMATTER_TAB_CHAR, JavaCore.TAB);", "-\t\toptions.put(JavaCore.FORMATTER_LINE_SPLIT, \"80\");", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_TAB_CHAR, JavaCore.TAB);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_LINE_SPLIT, \"80\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9f852406ccff11aa624db8998f27954", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "7aac6f03ecf70666410b0e689c91dafd6d67757a", "commitAfterChange": "465d091146b1d6997709777ea444048487da1d8d", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " protected void consumeAnnotationTypeMemberDeclarationHeader()", "signatureAfterChange": " protected void consumeAnnotationTypeMemberDeclarationHeader()", "diff": ["-\tAnnotationTypeMemberDeclaration annotationTypeMemberDeclaration = new AnnotationTypeMemberDeclaration(this.compilationUnit.compilationResult);", "+\tAnnotationMethodDeclaration annotationTypeMemberDeclaration = new AnnotationMethodDeclaration(this.compilationUnit.compilationResult);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa05c00b6a0d1aeb79055dc745433054", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/PackageBinding.java", "commitBeforeChange": "490cc39003ba5daaddf4fdf25c1c4ad52d071fa8", "commitAfterChange": "63cc2b02a5dc2c73f3b525966213744b7c2edcf0", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  PackageBinding getPackage(char[] name)", "signatureAfterChange": "  PackageBinding getPackage(char[] name)", "diff": ["-\t\tif (binding == environment.theNotFoundPackage)", "+\t\tif (binding == LookupEnvironment.TheNotFoundPackage)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa6b011c07c5eb541378c919aa7a7e33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "fe25f265c04b05b78a3922c802443d0f290eb28d", "commitAfterChange": "24d226ada8d61f965d94976697c07601e6dce9f7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \tpublic synchronized void request(IJob job)", "signatureAfterChange": " \t \tpublic synchronized void request(IJob job)", "diff": ["-\t\t\tJobManager.verbose(\"REQUEST   background job - \" + job); //$NON-NLS-1$", "-\t\t\tJobManager.verbose(\"AWAITING JOBS count: \" + awaitingJobsCount()); //$NON-NLS-1$", "+\t\t\tUtil.verbose(\"REQUEST   background job - \" + job); //$NON-NLS-1$", "+\t\t\tUtil.verbose(\"AWAITING JOBS count: \" + awaitingJobsCount()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa7a24aa4e57e76afbf3ec449e2cde49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "e91a03d6ffd76cb11afae070200dbbbe73ce30b0", "commitAfterChange": "1ea5f94648ece67f779d3f9547f2c42cabdfedc2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic UnconditionalFlowInfo addPotentialInitializationsFrom(UnconditionalFlowInfo otherInits)", "signatureAfterChange": " \tpublic UnconditionalFlowInfo addPotentialInitializationsFrom(UnconditionalFlowInfo otherInits)", "diff": ["-\t\tif (this == DeadEnd){", "+\t\tif (this == DEAD_END){", "-\t\tif (otherInits == DeadEnd){", "+\t\tif (otherInits == DEAD_END){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb4356cabb075173d03261d3360cf2f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "69458def708eedff53dace674666304d76a16916", "commitAfterChange": "57f3418737401a9accef24fe5cc12793778014a7", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": " \tprotected String getPluginDirectoryPath()", "signatureAfterChange": " \tprotected String getPluginDirectoryPath()", "diff": ["-\t\t\treturn new File(Platform.asLocalURL(platformURL).getFile()).getAbsolutePath();", "+\t\t\treturn new File(FileLocator.toFileURL(platformURL).getFile()).getAbsolutePath();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbc59be2d9221da34a55003dd9b2d3bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "4b36d8d902157ef078af37f3d78b4138152d8889", "commitAfterChange": "9ef1e97f6b56081e8537310fc409f77c2ce56944", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void removeBinaryClass(IPath packagePath, String className)", "signatureAfterChange": " \tpublic void removeBinaryClass(IPath packagePath, String className)", "diff": ["-\t\tcheckAssertion(\"a workspace must be open\", fIsOpen); //$NON-NLS-1$", "+\t\tcheckAssertion(\"a workspace must be open\", isOpen); //$NON-NLS-1$", "-\t\tIFolder packageFolder = fWorkspace.getRoot().getFolder(packagePath);", "+\t\tIFolder packageFolder = workspace.getRoot().getFolder(packagePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc1fc3cd6a67841aba07594b1ea7fcde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "6024db2244852bf1a14f4a11a2132399927fa015", "commitAfterChange": "8238d4886dd5cc2d15b3226c07195562e9c81134", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "signatureAfterChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "diff": ["-\t\t\t\tif (!tPrime.isBaseType() && !sPrime.isBaseType()) {", "+\t\t\t\tif (!tPrime.isNormalBaseType() && !sPrime.isNormalBaseType()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc727d9fcd21ad7d1b6c337f2a301c08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/JDIStackFrame.java", "commitBeforeChange": "bcd9f90c4bf8ea31b98c4f2aa0b3396ae50236cb", "commitAfterChange": "44a4773fe1e43ab7b0b1007569e920d404685d06", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected ThreadReference getDebuggedThread(DebugEvaluationTest test)", "signatureAfterChange": " protected ThreadReference getDebuggedThread(DebugEvaluationTest test)", "diff": ["-\t\t\tAssert.assertTrue(\"Target exception \" + e.getMessage(), false);", "+\t\t\tTestCase.assertTrue(\"Target exception \" + e.getMessage(), false);", "-\t\t\t\tAssert.assertTrue(\"Compilation error in user code\", false);", "+\t\t\t\tTestCase.assertTrue(\"Compilation error in user code\", false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd0234d930e33e8a7531ef617959052b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "6ec2bf68626c3baaf2de76ad471eae21612974d2", "commitAfterChange": "5f8cfe2efe8d090091876dd299bd5bd9c4957228", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic static IStatus validatePackageName(String name)", "signatureAfterChange": " \tpublic static IStatus validatePackageName(String name)", "diff": ["-\t\tif (Scanner.isWhitespace(name.charAt(0)) || Scanner.isWhitespace(name.charAt(name.length() - 1))) {", "+\t\tif (CharOperation.isWhitespace(name.charAt(0)) || CharOperation.isWhitespace(name.charAt(name.length() - 1))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd1e830a77d0aca7c34f2311fb892e8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "84a8f41b2dd2dacf2e433dcace83425a3df5cf2d", "commitAfterChange": "2cb54434593d4e5dfdb20e79742efc2e53dbb162", "methodNumberBeforeChange": 148, "methodNumberAfterChange": 148, "signatureBeforeChange": " \tprotected void setModifiers(VariableDeclarationStatement variableDeclarationStatement, LocalDeclaration localDeclaration)", "signatureAfterChange": " \tprotected void setModifiers(VariableDeclarationStatement variableDeclarationStatement, LocalDeclaration localDeclaration)", "diff": ["-\t\t\t\tint modifiers = localDeclaration.modifiers & CompilerModifiers.AccJustFlag;", "-\t\t\t\tmodifiers &= ~CompilerModifiers.AccBlankFinal;", "+\t\t\t\tint modifiers = localDeclaration.modifiers & ExtraCompilerModifiers.AccJustFlag;", "+\t\t\t\tmodifiers &= ~ExtraCompilerModifiers.AccBlankFinal;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdb0872bbf73a1e65d86c1bda317e2f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 74, "signatureBeforeChange": " \tpublic boolean visit(FloatLiteral floatLiteral, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(FloatLiteral floatLiteral, BlockScope scope)", "diff": ["-\t\tfinal int numberOfParens = (floatLiteral.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\tfinal int numberOfParens = (floatLiteral.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe98ada7fa65102a297c0af89654f19c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/jdom/DOMBuilder.java", "commitBeforeChange": "6667f48fb414bf631c6788d57b69b16addac46f0", "commitAfterChange": "c62484c76d34e1754fa4fc8cfcdf45889f18f642", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void enterField(int declarationStart, int[] javaDocPositions, int modifiers, int modifiersStart,  \tchar[] type, int typeStart, int typeEnd, int typeDimensionCount, char[] name,  \tint nameStart, int nameEnd, int extendedTypeDimensionCount,  \tint extendedTypeDimensionEnd)", "signatureAfterChange": " public void enterField(int declarationStart, int[] javaDocPositions, int modifiers, int modifiersStart,  \tchar[] type, int typeStart, int typeEnd, int typeDimensionCount, char[] name,  \tint nameStart, int nameEnd, int extendedTypeDimensionCount,  \tint extendedTypeDimensionEnd)", "diff": ["-\tfNode = new DOMField(fDocument, sourceRange, CharArrayOps.charToString(name), nameRange, commentRange, ", "-\t\tmodifiers, modifiersRange, typeRange, CharArrayOps.charToString(type), hasInitializer, ", "+\tfNode = new DOMField(fDocument, sourceRange, CharOperation.charToString(name), nameRange, commentRange, ", "+\t\tmodifiers, modifiersRange, typeRange, CharOperation.charToString(type), hasInitializer, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff6122adea209b4495a36738574bd41e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "82eb8210126dce9dcecaa23100608377607eb4d3", "commitAfterChange": "39a2af446e48bb6f168906e833c304457e17e4cf", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic void testParameterizedArrayTypeMultipleArguments01() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedArrayTypeMultipleArguments01() throws CoreException", "diff": ["-\t\tSourceType type = selectSourceType(unit,  \"Table.Entry\"); //$NON-NLS-1$", "+\t\tIType type = selectType(unit,  \"Table.Entry\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffa8f23b73023bda4a7b544fd0f83d69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/jdom/DOMFactory.java", "commitBeforeChange": "ab36391231f1ea61e75e0e00b3dc8ffe91eda55e", "commitAfterChange": "6c476fc2e300888d931411f675ed8c5c5f714198", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r public IDOMType createType()", "signatureAfterChange": "\r public IDOMType createType()", "diff": ["-\treturn createType(\"public class AClass {\"+ JavaModelManager.LINE_SEPARATOR +\"}\"+ JavaModelManager.LINE_SEPARATOR); //$NON-NLS-2$ //$NON-NLS-1$\r", "+\treturn createType(\"public class AClass {\"+ Util.LINE_SEPARATOR +\"}\"+ Util.LINE_SEPARATOR); //$NON-NLS-2$ //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffd64870e0b0040358d11bc77d217dff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "427c6bb8409cfca7ba06dea34bdeec6d0eb2d557", "commitAfterChange": "93b7df03b3f298ab65a83070f27251430e6fab81", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t&& (this.expression.bits & ASTNode.UnnecessaryCastMASK) == 0) {", "+\t\t\t\t\t&& (this.expression.bits & ASTNode.UnnecessaryCast) == 0) {", "-\t\t\t\t\t&& (this.expression.bits & ASTNode.UnnecessaryCastMASK) == 0) {", "+\t\t\t\t\t&& (this.expression.bits & ASTNode.UnnecessaryCast) == 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffeedb13dc7a0b5f18524b2d0dff289e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "b9de5f3466a9b4d6687de837720c445097067b16", "commitAfterChange": "39416e9e4305b172d90b88aed3085d98ded0a86c", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r \tpublic void reportAccurateReference(\r \t\tint sourceStart,\r \t\tint sourceEnd,\r \t\tchar[][] qualifiedName,\r \t\tIJavaElement element,\r \t\tint accuracy)\r \t\tthrows CoreException", "signatureAfterChange": "\r \tpublic void reportAccurateReference(\r \t\tint sourceStart,\r \t\tint sourceEnd,\r \t\tchar[][] qualifiedName,\r \t\tIJavaElement element,\r \t\tint accuracy)\r \t\tthrows CoreException", "diff": ["-\t\t\tif (token != TerminalSymbols.TokenNameEOF) {\r", "+\t\t\tif (token != ITerminalSymbols.TokenNameEOF) {\r", "-\t\t} while (token != TerminalSymbols.TokenNameEOF);\r", "+\t\t} while (token != ITerminalSymbols.TokenNameEOF);\r"]}], "num": 37046}
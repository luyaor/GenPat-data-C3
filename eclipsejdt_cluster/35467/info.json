{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "99935d1a38994cf311bd9efc2693d29d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c36eb46c95523904f99e2d8074438e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "a2ae3e117eaea10fecaf3678af5938ffa98d76f4", "commitAfterChange": "71ab6b3956db9fea4a8f81e891e05ac4d44d96d9", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r public int literalIndex(MethodBinding aMethodBinding)", "signatureAfterChange": "\r public int literalIndex(MethodBinding aMethodBinding)", "diff": ["+\t\t\t\tif (index > 0xFFFF){\r", "+\t\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());\r", "+\t\t\t\t}\r", "+\t\t\t\tif (index > 0xFFFF){\r", "+\t\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());\r", "+\t\t\t\t}\r", "+\t\t\t\tif (index > 0xFFFF){\r", "+\t\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());\r", "+\t\t\t\t}\r", "+\t\t\t\tif (index > 0xFFFF){\r", "+\t\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e94bd61f75d203e6f17ab22225f73933", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "36af4ca0b413cc401b0bc4442925b5f641f8df7a", "commitAfterChange": "15070dfb720141f260eff9f86b3742c51648d5f0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void computeLocalVariablePositions(int initOffset, CodeStream codeStream)", "signatureAfterChange": " \tpublic void computeLocalVariablePositions(int initOffset, CodeStream codeStream)", "diff": ["-\t\t\t// check for too many arguments/local variables", "-\t\t\tif (this.offset > 0xFF) { // no more than 255 words of arguments", "-\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForArgument(local, local.declaration);", "-\t\t\t}", "-", "+\t\t\t}", "+\t\t\t// check for too many arguments/local variables", "+\t\t\tif (this.offset > 0xFF) { // no more than 255 words of arguments", "+\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForArgument(local, local.declaration);", "-\t\t\t\tif (this.offset > 0xFF) { // no more than 255 words of arguments", "-\t\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForArgument(argument, (AstNode)this.referenceContext); ", "-\t\t\t\t}", "+\t\t\t\tif (this.offset > 0xFF) { // no more than 255 words of arguments", "+\t\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForArgument(argument, (AstNode)this.referenceContext); ", "+\t\t\t\t}"]}], "num": 35467}
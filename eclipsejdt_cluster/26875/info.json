{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d8a59604f4aeb8e6ccddff5eb5a30076", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15465f77d492838f2e135393166929e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic MethodBinding getConstructor(ReferenceBinding receiverType, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": "  \tpublic MethodBinding getConstructor(ReferenceBinding receiverType, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\tif (methodBinding != null && methodBinding.canBeSeenBy(invocationSite, this))", "+\t\t\tif (methodBinding != null && methodBinding.canBeSeenBy(invocationSite, this)) {", "+\t\t\t    // targeting a non generic constructor with type arguments ?", "+\t\t\t    if (invocationSite.genericTypeArguments() != null)", "+\t\t\t    \tmethodBinding = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);\t\t\t\t", "+\t\t\t}", "-\t\t\tfor (int i = 0, length = methods.length; i < length; i++)", "-\t\t\t\tif (areParametersAssignable(methods[i].parameters, argumentTypes))", "-\t\t\t\t\tcompatible[compatibleIndex++] = methods[i];", "-\t\t\tif (compatibleIndex == 0)", "-\t\t\t\treturn new ProblemMethodBinding(", "-\t\t\t\t\tConstructorDeclaration.ConstantPoolName,", "-\t\t\t\t\targumentTypes,", "-\t\t\t\t\tNotFound);", "+\t\t\tMethodBinding problemMethod = null;", "+\t\t\tfor (int i = 0, length = methods.length; i < length; i++) {", "+\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methods[i], argumentTypes, invocationSite);", "+\t\t\t\tif (compatibleMethod != null) {", "+\t\t\t\t\tif (compatibleMethod.isValidBinding())", "+\t\t\t\t\t\tcompatible[compatibleIndex++] = compatibleMethod;", "+\t\t\t\t\telse if (problemMethod == null)", "+\t\t\t\t\t\tproblemMethod = compatibleMethod;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (compatibleIndex == 0) {", "+\t\t\t\tif (problemMethod == null)", "+\t\t\t\t\treturn new ProblemMethodBinding(ConstructorDeclaration.ConstantPoolName, argumentTypes, NotFound);", "+\t\t\t\treturn problemMethod;", "+\t\t\t}", "-\t\t\treturn mostSpecificClassMethodBinding(visible, visibleIndex);", "+\t\t\treturn mostSpecificClassMethodBinding(visible, visibleIndex, invocationSite);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e80e29978d5aa7f10f3dcf4f38e52c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType,  \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tMethodBinding matchingMethod, \t\tObjectVector found)", "signatureAfterChange": " \tpublic MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType,  \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tMethodBinding matchingMethod, \t\tObjectVector found)", "diff": ["+\t\tMethodBinding problemMethod = null;", "-\t\t\tif (areParametersAssignable(methodBinding.parameters, argumentTypes))", "-\t\t\t\tcandidates[candidatesCount++] = methodBinding;", "+\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "+\t\t\tif (compatibleMethod != null) {", "+\t\t\t\tif (compatibleMethod.isValidBinding())", "+\t\t\t\t\tcandidates[candidatesCount++] = compatibleMethod;", "+\t\t\t\telse if (problemMethod == null)", "+\t\t\t\t\tproblemMethod = compatibleMethod;", "+\t\t\t}", "+", "+\t\t\tif (problemMethod != null) return problemMethod;", "-\t\treturn mostSpecificInterfaceMethodBinding(candidates, candidatesCount);", "+\t\treturn mostSpecificInterfaceMethodBinding(candidates, candidatesCount, invocationSite);"]}], "num": 26875}
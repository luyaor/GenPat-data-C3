{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "151d8141a99ba6159dd8236d24315c16", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e8a8881ba8eead8510a53b9f9839dfd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/BaseProcessorEnv.java", "commitBeforeChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "commitAfterChange": "6fea7eafdd413dccff31028f8da1f1ac6859e6fe", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic IFile getDeclaringFileForBinding(final IBinding binding)", "signatureAfterChange": " \tpublic IFile getDeclaringFileForBinding(final IBinding binding)", "diff": ["+\t\t\tICompilationUnit unit = _typeBinding2ModelCompUnit.get(type);", "+\t\t\tif( unit != null )", "+\t\t\t\treturn (IFile)unit.getResource();", "-\t\t\tfinal String pathname = qname.replace('.', File.separatorChar);", "-\t\t\tfinal IPath path = Path.fromOSString(pathname);", "-\t\t\ttry{", "-\t\t\t\t// the element would be a compilation unit.", "-\t\t\t\tfinal IJavaElement element = _javaProject.findElement(path);", "-\t\t\t\tif( element == null ) return null;", "-\t\t\t\treturn (IFile)element.getResource();", "-\t\t\t}", "-\t\t\tcatch(JavaModelException e){", "-\t\t\t\tthrow new IllegalStateException(e);", "-\t\t\t}", "+\t\t\tunit = getICompilationUnitForTopLevelType(qname);", "+\t\t\tif( unit == null )", "+\t\t\t\treturn null;", "+\t\t\treturn (IFile)unit.getResource();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f1dd3592d53661cc53550428f57b48c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/BaseProcessorEnv.java", "commitBeforeChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "commitAfterChange": "6fea7eafdd413dccff31028f8da1f1ac6859e6fe", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 27, "signatureBeforeChange": "     public CompilationUnit getCompilationUnitForBinding(final IBinding binding)", "signatureAfterChange": "     public CompilationUnit getCompilationUnitForBinding(final IBinding binding)", "diff": ["+\t\t\t\t// binary type don't have compilation unit.", "+\t\t\t\tif( !typeBinding.isFromSource() )", "+\t\t\t\t\treturn null;", "-\t\t\t\t\tfinal String pathname = qname.replace('.', File.separatorChar);", "-\t\t\t\t\tfinal IPath path = Path.fromOSString(pathname);", "-\t\t\t\t\ttry{", "-\t\t\t\t\t\tunit = (ICompilationUnit)_javaProject.findElement(path);", "-\t\t\t\t\t\t_typeBinding2ModelCompUnit.put(typeBinding, unit);", "-\t\t\t\t\t}", "-\t\t\t\t\tcatch(JavaModelException e){", "-\t\t\t\t\t\tthrow new IllegalStateException(e);", "-\t\t\t\t\t}", "+\t\t\t\t\tunit = getICompilationUnitForTopLevelType(qname);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f89e3b77492f7255aa569ab92320b3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "commitAfterChange": "192820efad9191d4773fbd88aa6d8a5ea915ea14", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tboolean incorporate(InferenceContext18 context, TypeBound [] first, TypeBound [] next) throws InferenceFailureException", "signatureAfterChange": " \tboolean incorporate(InferenceContext18 context, TypeBound [] first, TypeBound [] next) throws InferenceFailureException", "diff": ["-\t\t\t// We come in with capture(gA), we need to work with gA below. It was necessary to establish capture at the call site.", "-\t\t\tParameterizedTypeBinding cgA = capt.getValue();", "-\t\t\tParameterizedTypeBinding gA = (ParameterizedTypeBinding) cgA.uncapture(context.scope);", "+\t\t\tParameterizedTypeBinding gA = capt.getValue();", "-\t\t\t\tTypeBinding cai = cgA.arguments[i];", "-\t\t\t\t\t\t\t\t/* With the expected type's declared type being Collector<? super T, A, R> and gAlpha being Collector<T#0,?#1,List<T#0>#2> and cgA being", "-\t\t\t\t\t\t\t\t   Collector<T#0,capture#1-of ?,List<T#0>>, without the constraint reduction below - we will never discover A to be capture#1-of ? and", "-\t\t\t\t\t\t\t\t   claim A is jlO. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c24 - #27", "-\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\tif (!reduceOneConstraint(context, ConstraintTypeFormula.create(bound.right, cai, ReductionResult.SAME)))", "-\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t// Our = reduction transitively adds a new bound that necessitates the check below for capture. ", "-\t\t\t\t\t\t\t\tif (!(bound.right instanceof InferenceVariable) && !bound.right.isCapture())", "+\t\t\t\t\t\t\t\tif (InferenceContext18.SHOULD_WORKAROUND_BUG_JDK_8054721) {", "+\t\t\t\t\t\t\t\t\tif (bound.right instanceof CaptureBinding)", "+\t\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (!(bound.right instanceof InferenceVariable))"]}], "num": 60083}
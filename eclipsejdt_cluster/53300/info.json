{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7dd0ef4a2f0685cedf981d542fe1e4e1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f9b6c001e04577b7cf29c01317c9be0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 117, "signatureBeforeChange": " \tpublic void test037b()", "signatureAfterChange": " \tpublic void test037b()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in XX.java (at line 1)\\n\" +", "-\t\t\t\"\tpublic class XX implements I, J { public void foo(A<String> a) {} }\\n\" +", "-\t\t\t\"\t             ^^\\n\" +", "-\t\t\t\"The type XX must implement the inherited abstract method I.foo(A)\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in XX.java (at line 1)\\n\" +", "-\t\t\t\"\tpublic class XX implements I, J { public void foo(A<String> a) {} }\\n\" +", "-\t\t\t\"\t                                              ^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Name clash: The method foo(A<String>) of type XX has the same erasure as foo(A) of type I but does not override it\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in XX.java (at line 2)\\n\" +", "-\t\t\t\"\tclass YY implements J, I { public void foo(A<String> a) {} }\\n\" +", "-\t\t\t\"\t      ^^\\n\" +", "-\t\t\t\"The type YY must implement the inherited abstract method I.foo(A)\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in XX.java (at line 2)\\n\" +", "-\t\t\t\"\tclass YY implements J, I { public void foo(A<String> a) {} }\\n\" +", "-\t\t\t\"\t                                       ^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Name clash: The method foo(A<String>) of type YY has the same erasure as foo(A) of type I but does not override it\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in XX.java (at line 3)\\n\" +", "-\t\t\t\"\tclass ZZ implements K { public void foo(A<String> a) {} }\\n\" +", "-\t\t\t\"\t      ^^\\n\" +", "-\t\t\t\"The type ZZ must implement the inherited abstract method I.foo(A)\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"6. ERROR in XX.java (at line 3)\\n\" +", "-\t\t\t\"\tclass ZZ implements K { public void foo(A<String> a) {} }\\n\" +", "-\t\t\t\"\t                                    ^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Name clash: The method foo(A<String>) of type ZZ has the same erasure as foo(A) of type I but does not override it\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"7. WARNING in XX.java (at line 4)\\n\" +", "-\t\t\t\"\tinterface I { void foo(A a); }\\n\" +", "-\t\t\t\"\t                       ^\\n\" +", "-\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in XX.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class XX implements I, J { public void foo(A<String> a) {} }\\n\" + ", "+\t\t\t\"\t             ^^\\n\" + ", "+\t\t\t\"The type XX must implement the inherited abstract method I.foo(A)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in XX.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class XX implements I, J { public void foo(A<String> a) {} }\\n\" + ", "+\t\t\t\"\t                                              ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(A<String>) of type XX has the same erasure as foo(A) of type I but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in XX.java (at line 2)\\n\" + ", "+\t\t\t\"\tclass YY implements J, I { public void foo(A<String> a) {} }\\n\" + ", "+\t\t\t\"\t      ^^\\n\" + ", "+\t\t\t\"The type YY must implement the inherited abstract method I.foo(A)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in XX.java (at line 2)\\n\" + ", "+\t\t\t\"\tclass YY implements J, I { public void foo(A<String> a) {} }\\n\" + ", "+\t\t\t\"\t                                       ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(A<String>) of type YY has the same erasure as foo(A) of type I but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in XX.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass ZZ implements K { public void foo(A<String> a) {} }\\n\" + ", "+\t\t\t\"\t      ^^\\n\" + ", "+\t\t\t\"The type ZZ must implement the inherited abstract method I.foo(A)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in XX.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass ZZ implements K { public void foo(A<String> a) {} }\\n\" + ", "+\t\t\t\"\t                                    ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(A<String>) of type ZZ has the same erasure as foo(A) of type I but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in XX.java (at line 4)\\n\" + ", "+\t\t\t\"\tinterface I { void foo(A a); }\\n\" + ", "+\t\t\t\"\t                       ^\\n\" + ", "+\t\t\t\"A is a raw type. References to generic type A<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. ERROR in XX.java (at line 6)\\n\" + ", "+\t\t\t\"\tinterface K extends I { void foo(A<String> a); }\\n\" + ", "+\t\t\t\"\t                             ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(A<String>) of type K has the same erasure as foo(A) of type I but does not override it\\n\" + ", "-\t\t\t// XX/YY/ZZ is not abstract and does not override abstract method foo(A) in I"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f24c5098d05106f96a92d3208723e37", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "2385c0aeda6d8b742ca24edae81655117601babd", "commitAfterChange": "bfe1e5f410410e285c8a77b5130cabdbc82cde90", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "\r \tpublic void test0390882()", "signatureAfterChange": "\r \tpublic void test0390882()", "diff": ["+\t\t\t\t\"----------\\n\" + \r", "+\t\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + \r", "+\t\t\t\t\"\tpublic void foobar(@Marker java.lang.Integer arg) {}\\n\" + \r", "+\t\t\t\t\"\t                   ^^^^^^^\\n\" + \r", "+\t\t\t\t\"The annotation @Marker is disallowed for this location\\n\" + \r"]}], "num": 53300}
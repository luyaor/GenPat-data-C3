{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "579ee4092ecf100565bd379795b2a4ed", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ae06cc81c793702ca978f4870c3016c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic void locateMatches(String[] filePaths, IWorkspace workspace)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic void locateMatches(String[] filePaths, IWorkspace workspace)\r \t\tthrows JavaModelException", "diff": ["+\t\t\tJavaProject javaProject = null;\r", "-\t\t\t\tJavaProject javaProject = (JavaProject) openable.getJavaProject();\r", "+\t\t\t\tjavaProject = (JavaProject) openable.getJavaProject();\r", "-\t\t\t\t\t\tthis.locateMatches();\r", "+\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\tthis.locateMatches();\r", "+\t\t\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\t\t\tif (e.getException() instanceof CoreException) {\r", "+\t\t\t\t\t\t\t\tthrow e;\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t// problem with classpath in this project -> skip it\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "-\t\t\tthis.locateMatches();\r", "+\t\t\ttry {\r", "+\t\t\t\tthis.locateMatches();\r", "+\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\tif (e.getException() instanceof CoreException) {\r", "+\t\t\t\t\tthrow e;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// problem with classpath in last project -> skip it\r", "+\t\t\t\t}\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e614df288918bed933989a7e8bb364eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "0ec72d2d01e922936e8894589d46ed7fef008881", "commitAfterChange": "82ebc709013252385fce65c14aa676e8e0d39c6f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": "\r \tprotected void executeOperation() throws JavaModelException", "diff": ["+\t\t// project reference updated - may throw an exception if unable to write .project file\r", "+\t\tupdateProjectReferencesIfNecessary();\r", "+\r", "+\t\t// classpath file updated - may throw an exception if unable to write .classpath file\r", "-\t\tif (this.newRawPath != ReuseClasspath){\r", "-\t\t\tupdateClasspath();\r", "-\t\t}\r", "-\t\tif (this.newOutputLocation != ReuseOutputLocation){\r", "-\t\t\tupdateOutputLocation();\r", "+\t\t// perform classpath and output location updates, if exception occurs in classpath update,\r", "+\t\t// make sure the output location is updated before surfacing the exception (in case the output\r", "+\t\t// location update also throws an exception, give priority to the classpath update one).\r", "+\t\tJavaModelException originalException = null;\r", "+\r", "+\t\ttry {\r", "+\t\t\tif (this.newRawPath != ReuseClasspath) updateClasspath();\r", "+\r", "+\t\t} catch(JavaModelException e){\r", "+\t\t\toriginalException = e;\r", "+\t\t\tthrow e;\r", "+\r", "+\t\t} finally { // if traversed by an exception we still need to update the output location when necessary\r", "+\r", "+\t\t\ttry {\r", "+\t\t\t\tif (this.newOutputLocation != ReuseOutputLocation) updateOutputLocation();\r", "+\r", "+\t\t\t} catch(JavaModelException e){\r", "+\t\t\t\tif (originalException != null) throw originalException; \r", "+\t\t\t\tthrow e;\r", "+\t\t\t}\r"]}], "num": 62445}
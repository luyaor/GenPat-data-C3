{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1bab1c8323b3e2aeb1cd9c8598e5f1e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3432fc19d0ae30edafe4879f77c9fdfe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/diagnose/DiagnoseParser.java", "commitBeforeChange": "0534618c17c0b5f6c361eb5acf9c22731255984f", "commitAfterChange": "d85ef445439a7932d1fe7c7dafa9bf16e2d2dd51", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tprivate void reportPrimaryError(int msgCode, int nameIndex, int token, int scopeNameIndex)", "signatureAfterChange": " \tprivate void reportPrimaryError(int msgCode, int nameIndex, int token, int scopeNameIndex)", "diff": ["+\t\tint addedToken = -1;", "+\t\tif(recoveryScanner != null) {", "+\t\t\tif (nameIndex >= 0) {", "+\t\t\t\taddedToken = Parser.reverse_index[nameIndex];", "+\t\t\t}", "+\t\t}", "-\t\t\t\tproblemReporter().parseErrorInsertBeforeToken(", "+\t\t\t\tif(recoveryScanner != null) {", "+\t\t\t\t\tif(addedToken > -1) {", "+\t\t\t\t\t\trecoveryScanner.insertToken(addedToken, -1, errorStart);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint[] template = getNTermTemplate(-addedToken);", "+\t\t\t\t\t\tif(template != null) {", "+\t\t\t\t\t\t\trecoveryScanner.insertTokens(template, -1, errorStart);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif(this.reportProblem) problemReporter().parseErrorInsertBeforeToken(", "-\t\t\t\tproblemReporter().parseErrorInsertAfterToken(", "+\t\t\t\tif(recoveryScanner != null) {", "+\t\t\t\t\tif(addedToken > -1) {", "+\t\t\t\t\t\trecoveryScanner.insertToken(addedToken, -1, errorEnd);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint[] template = getNTermTemplate(-addedToken);", "+\t\t\t\t\t\tif(template != null) {", "+\t\t\t\t\t\t\trecoveryScanner.insertTokens(template, -1, errorEnd);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif(this.reportProblem) problemReporter().parseErrorInsertAfterToken(", "-\t\t\t\tproblemReporter().parseErrorDeleteToken(", "+\t\t\t\tif(recoveryScanner != null) {", "+\t\t\t\t\trecoveryScanner.removeTokens(errorStart, errorEnd);", "+\t\t\t\t}", "+\t\t\t\tif(this.reportProblem) problemReporter().parseErrorDeleteToken(", "-\t\t\t\t\tproblemReporter().parseErrorReplaceToken(", "+\t\t\t\t\tif(recoveryScanner != null) {", "+\t\t\t\t\t\trecoveryScanner.removeTokens(errorStart, errorEnd);", "+\t\t\t\t\t}", "+\t\t\t\t\tif(this.reportProblem) problemReporter().parseErrorReplaceToken(", "-\t\t\t\t\tproblemReporter().parseErrorInvalidToken(", "+\t\t\t\t\tif(recoveryScanner != null) {", "+\t\t\t\t\t\tif(addedToken > -1) {", "+\t\t\t\t\t\t\trecoveryScanner.replaceTokens(addedToken, errorStart, errorEnd);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint[] template = getNTermTemplate(-addedToken);", "+\t\t\t\t\t\t\tif(template != null) {", "+\t\t\t\t\t\t\t\trecoveryScanner.replaceTokens(template, errorStart, errorEnd);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif(this.reportProblem) problemReporter().parseErrorInvalidToken(", "-\t\t\t\tproblemReporter().parseErrorReplaceToken(", "+\t\t\t\tif(recoveryScanner != null) {", "+\t\t\t\t\tif(addedToken > -1) {", "+\t\t\t\t\t\trecoveryScanner.replaceTokens(addedToken, errorStart, errorEnd);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint[] template = getNTermTemplate(-addedToken);", "+\t\t\t\t\t\tif(template != null) {", "+\t\t\t\t\t\t\trecoveryScanner.replaceTokens(template, errorStart, errorEnd);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif(this.reportProblem) problemReporter().parseErrorReplaceToken(", "+\t\t\t\t", "+\t\t\t\tint[] addedTokens = null;", "+\t            int addedTokenCount = 0;", "+\t            if(this.recoveryScanner != null) {", "+\t            \taddedTokens = new int[Parser.scope_rhs.length - Parser.scope_suffix[- nameIndex]];", "+\t            }", "+\t            ", "-\t\t\t\t\t\t", "+\t\t\t\t\t", "+\t\t\t\t\tif(addedTokens != null) {", "+\t                \tint tmpAddedToken = Parser.reverse_index[Parser.scope_rhs[i]];", "+\t\t                if (tmpAddedToken > -1) {", "+\t\t                \tint length = addedTokens.length;", "+\t\t                \tif(addedTokenCount == length) {", "+\t\t                \t\tSystem.arraycopy(addedTokens, 0, addedTokens = new int[length * 2], 0, length);", "+\t\t                \t}", "+\t\t                \taddedTokens[addedTokenCount++] = tmpAddedToken;", "+\t\t                } else {", "+\t\t                \tint[] template = getNTermTemplate(-tmpAddedToken);", "+\t\t                \tif(template != null) {", "+\t\t\t                \tfor (int j = 0; j < template.length; j++) {", "+\t\t\t\t\t\t\t\t\tint length = addedTokens.length;", "+\t\t                \t\t\tif(addedTokenCount == length) {", "+\t\t\t\t                \t\tSystem.arraycopy(addedTokens, 0, addedTokens = new int[length * 2], 0, length);", "+\t\t\t\t                \t}", "+\t\t                \t\t\taddedTokens[addedTokenCount++] = template[j];", "+\t\t\t\t\t\t\t\t}", "+\t\t                \t} else {", "+\t\t\t                \taddedTokenCount = 0;", "+\t\t\t                \taddedTokens = null;", "+\t\t                \t}", "+\t\t                }", "+\t                }", "+\t\t\t\tif(addedTokenCount > 0) {", "+\t            \tSystem.arraycopy(addedTokens, 0, addedTokens = new int[addedTokenCount], 0, addedTokenCount);", "+\t            \t", "+\t            \tint completedToken = -1;", "+\t            \tif(scopeNameIndex != 0) {", "+\t            \t\tcompletedToken = -Parser.reverse_index[scopeNameIndex];", "+\t            \t}", "+\t            \tthis.recoveryScanner.insertTokens(addedTokens, completedToken, errorEnd);", "+\t            }", "+\t\t\t\t", "-\t\t\t\t\tproblemReporter().parseErrorInsertToComplete(", "+\t\t\t\t\tif(this.reportProblem) problemReporter().parseErrorInsertToComplete(", "-\t\t\t\t\tproblemReporter().parseErrorInsertToCompleteScope(", "+\t\t\t\t\tif(this.reportProblem) problemReporter().parseErrorInsertToCompleteScope(", "-\t\t\t\tproblemReporter().parseErrorUnexpectedEnd(", "+\t\t\t\tif(this.reportProblem) problemReporter().parseErrorUnexpectedEnd(", "-\t\t\t\tproblemReporter().parseErrorMergeTokens(", "+\t\t\t\tif(recoveryScanner != null) {", "+\t\t\t\t\tif(addedToken > -1) {", "+\t\t\t\t\t\trecoveryScanner.replaceTokens(addedToken, errorStart, errorEnd);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint[] template = getNTermTemplate(-addedToken);", "+\t\t\t\t\t\tif(template != null) {", "+\t\t\t\t\t\t\trecoveryScanner.replaceTokens(template, errorStart, errorEnd);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif(this.reportProblem) problemReporter().parseErrorMergeTokens(", "-\t\t\t\tproblemReporter().parseErrorMisplacedConstruct(", "+\t\t\t\tif(recoveryScanner != null) {", "+\t\t\t\t\trecoveryScanner.removeTokens(errorStart, errorEnd);", "+\t\t\t\t}", "+\t\t\t\tif(this.reportProblem) problemReporter().parseErrorMisplacedConstruct(", "-\t\t\t\t\tproblemReporter().parseErrorNoSuggestion(", "+\t\t\t\t\tif(recoveryScanner != null) {", "+\t\t\t\t\t\trecoveryScanner.removeTokens(errorStart, errorEnd);", "+\t\t\t\t\t}", "+\t\t\t\t\tif(this.reportProblem) problemReporter().parseErrorNoSuggestion(", "-\t\t\t\t\tproblemReporter().parseErrorReplaceToken(", "+\t\t\t\t\tif(recoveryScanner != null) {", "+\t\t\t\t\t\tif(addedToken > -1) {", "+\t\t\t\t\t\t\trecoveryScanner.replaceTokens(addedToken, errorStart, errorEnd);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint[] template = getNTermTemplate(-addedToken);", "+\t\t\t\t\t\t\tif(template != null) {", "+\t\t\t\t\t\t\t\trecoveryScanner.replaceTokens(template, errorStart, errorEnd);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif(this.reportProblem) problemReporter().parseErrorReplaceToken("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "746a78e268b23dac7120c0aa4537154e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/diagnose/DiagnoseParser.java", "commitBeforeChange": "0534618c17c0b5f6c361eb5acf9c22731255984f", "commitAfterChange": "d85ef445439a7932d1fe7c7dafa9bf16e2d2dd51", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tprivate void reportSecondaryError(int msgCode,\tint nameIndex,\tint leftToken,\tint rightToken, int scopeNameIndex)", "signatureAfterChange": "  \tprivate void reportSecondaryError(int msgCode,\tint nameIndex,\tint leftToken,\tint rightToken, int scopeNameIndex)", "diff": ["+\t\tint addedToken = -1;", "+\t\tif(recoveryScanner != null) {", "+\t\t\tif (nameIndex >= 0) {", "+\t\t\t\taddedToken = Parser.reverse_index[nameIndex];", "+\t\t\t}", "+\t\t}", "+\t\t", "-\t\t\t\tproblemReporter().parseErrorMisplacedConstruct(", "+\t\t\t\tif(recoveryScanner != null) {", "+\t\t\t\t\trecoveryScanner.removeTokens(errorStart, errorEnd);", "+\t\t\t\t}", "+\t\t\t\tif(this.reportProblem) problemReporter().parseErrorMisplacedConstruct(", "+\t            ", "+\t            int[] addedTokens = null;", "+\t            int addedTokenCount = 0;", "+\t            if(this.recoveryScanner != null) {", "+\t            \taddedTokens = new int[Parser.scope_rhs.length - Parser.scope_suffix[- nameIndex]];", "+\t            }", "+\t            ", "+\t                ", "+\t                ", "+\t                if(addedTokens != null) {", "+\t                \tint tmpAddedToken = Parser.reverse_index[Parser.scope_rhs[i]];", "+\t\t                if (tmpAddedToken > -1) {", "+\t\t                \tint length = addedTokens.length;", "+\t\t                \tif(addedTokenCount == length) {", "+\t\t                \t\tSystem.arraycopy(addedTokens, 0, addedTokens = new int[length * 2], 0, length);", "+\t\t                \t}", "+\t\t                \taddedTokens[addedTokenCount++] = tmpAddedToken;", "+\t\t                } else {", "+\t\t                \tint[] template = getNTermTemplate(-tmpAddedToken);", "+\t\t                \tif(template != null) {", "+\t\t\t                \tfor (int j = 0; j < template.length; j++) {", "+\t\t\t\t\t\t\t\t\tint length = addedTokens.length;", "+\t\t                \t\t\tif(addedTokenCount == length) {", "+\t\t\t\t                \t\tSystem.arraycopy(addedTokens, 0, addedTokens = new int[length * 2], 0, length);", "+\t\t\t\t                \t}", "+\t\t                \t\t\taddedTokens[addedTokenCount++] = template[j];", "+\t\t\t\t\t\t\t\t}", "+\t\t                \t} else {", "+\t\t\t                \taddedTokenCount = 0;", "+\t\t\t                \taddedTokens = null;", "+\t\t                \t}", "+\t\t                }", "+\t                }", "+\t            }", "+\t            if(addedTokenCount > 0) {", "+\t            \tSystem.arraycopy(addedTokens, 0, addedTokens = new int[addedTokenCount], 0, addedTokenCount);", "+\t            \tint completedToken = -1;", "+\t            \tif(scopeNameIndex != 0) {", "+\t            \t\tcompletedToken = -Parser.reverse_index[scopeNameIndex];", "+\t            \t}", "+\t            \tthis.recoveryScanner.insertTokens(addedTokens, completedToken, errorEnd);", "-\t                problemReporter().parseErrorInsertToComplete(", "+\t                if(this.reportProblem) problemReporter().parseErrorInsertToComplete(", "-\t            \tproblemReporter().parseErrorInsertToCompletePhrase(", "+\t            \tif(this.reportProblem) problemReporter().parseErrorInsertToCompletePhrase(", "-\t\t\t\tproblemReporter().parseErrorMergeTokens(", "+\t\t\t\tif(recoveryScanner != null) {", "+\t\t\t\t\tif(addedToken > -1) {", "+\t\t\t\t\t\trecoveryScanner.replaceTokens(addedToken, errorStart, errorEnd);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint[] template = getNTermTemplate(-addedToken);", "+\t\t\t\t\t\tif(template != null) {", "+\t\t\t\t\t\t\trecoveryScanner.replaceTokens(template, errorStart, errorEnd);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif(this.reportProblem) problemReporter().parseErrorMergeTokens(", "-\t\t\t\tproblemReporter().parseErrorDeleteTokens(", "+\t\t\t\tif(recoveryScanner != null) {", "+\t\t\t\t\trecoveryScanner.removeTokens(errorStart, errorEnd);", "+\t\t\t\t}", "+\t\t\t\tif(this.reportProblem) problemReporter().parseErrorDeleteTokens(", "-\t\t\t\t\tproblemReporter().parseErrorNoSuggestionForTokens(", "+\t\t\t\t\tif(recoveryScanner != null) {", "+\t\t\t\t\t\trecoveryScanner.removeTokens(errorStart, errorEnd);", "+\t\t\t\t\t}", "+\t\t\t\t\tif(this.reportProblem) problemReporter().parseErrorNoSuggestionForTokens(", "-\t\t\t\t\tproblemReporter().parseErrorReplaceTokens(", "+\t\t\t\t\tif(recoveryScanner != null) {", "+\t\t\t\t\t\tif(addedToken > -1) {", "+\t\t\t\t\t\t\trecoveryScanner.replaceTokens(addedToken, errorStart, errorEnd);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint[] template = getNTermTemplate(-addedToken);", "+\t\t\t\t\t\t\tif(template != null) {", "+\t\t\t\t\t\t\t\trecoveryScanner.replaceTokens(template, errorStart, errorEnd);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif(this.reportProblem) problemReporter().parseErrorReplaceTokens("]}], "num": 33292}
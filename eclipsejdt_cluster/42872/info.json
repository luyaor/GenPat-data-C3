{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75d450ed7cafb3b844c8c7cb71ca3ecf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "325a644b496837af554de371503659e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "dfc3b8264596f4754baac29eef1af815f182c4f3", "commitAfterChange": "db0143bfca2398448195a62173050bd24d4fcb31", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r private void findFieldsAndMethods(char[] token, TypeBinding receiverType, Scope scope)", "signatureAfterChange": "\r \tprivate void findFieldsAndMethods(\r \t\tchar[] token,\r \t\tTypeBinding receiverType,\r \t\tScope scope,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope)", "diff": ["-}\r", "-private void findFieldsAndMethods(char[] token, TypeBinding receiverType, Scope scope) {\r", "-\tif (token == null) return;\r", "-\tif (receiverType.isBaseType()) return; // nothing else is possible with base types\r", "-\tif (receiverType.isArrayType()) {\r", "-\t\tif (token.length <= lengthField.length && CharOperation.prefixEquals(token, lengthField, false /* ignore case */))\r", "-\t\t\t\tlengthField,\r", "-\t\t\t\tlengthField,\r", "-\t\t\t\tCompilerModifiers.AccPublic,\r", "-\r", "-\t\treceiverType = scope.getJavaLangObject();\r", "-\tfindFields(token, (ReferenceBinding) receiverType, scope, new ObjectVector(), false);\r", "-\tfindMethods(token, null, (ReferenceBinding) receiverType, scope, new ObjectVector(), false, false);\r", "-}\r", "+\tprivate void findFieldsAndMethods(\r", "+\t\tchar[] token,\r", "+\t\tTypeBinding receiverType,\r", "+\t\tScope scope,\r", "+\t\tInvocationSite invocationSite,\r", "+\t\tScope invocationScope) {\r", "+\t\tif (token == null)\r", "+\t\t\treturn;\r", "+\t\tif (receiverType.isBaseType())\r", "+\t\t\treturn; // nothing else is possible with base types\r", "+\t\tif (receiverType.isArrayType()) {\r", "+\t\t\tif (token.length <= lengthField.length\r", "+\t\t\t\t&& CharOperation.prefixEquals(token, lengthField, false /* ignore case */\r", "+\t\t\t\t))\r", "+\t\t\t\trequestor.acceptField(\r", "+\t\t\t\t\tNoChar,\r", "+\t\t\t\t\tNoChar,\r", "+\t\t\t\t\tlengthField,\r", "+\t\t\t\t\tNoChar,\r", "+\t\t\t\t\tNoChar,\r", "+\t\t\t\t\tlengthField,\r", "+\t\t\t\t\tCompilerModifiers.AccPublic,\r", "+\t\t\t\t\tstartPosition,\r", "+\t\t\t\t\tendPosition);\r", "+\r", "+\t\t\treceiverType = scope.getJavaLangObject();\r", "+\t\t}\r", "+\r", "+\t\tfindFields(\r", "+\t\t\ttoken,\r", "+\t\t\t(ReferenceBinding) receiverType,\r", "+\t\t\tscope,\r", "+\t\t\tnew ObjectVector(),\r", "+\t\t\tnew ObjectVector(),\r", "+\t\t\tfalse,\r", "+\t\t\tinvocationSite,\r", "+\t\t\tinvocationScope);\r", "+\t\tfindMethods(\r", "+\t\t\ttoken,\r", "+\t\t\tnull,\r", "+\t\t\t(ReferenceBinding) receiverType,\r", "+\t\t\tscope,\r", "+\t\t\tnew ObjectVector(),\r", "+\t\t\tfalse,\r", "+\t\t\tfalse,\r", "+\t\t\tinvocationSite);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da640ba8636afc84d919c706a3eaf9d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r private void findFieldsAndMethods(char[] token, TypeBinding receiverType, Scope scope)", "signatureAfterChange": "\r \tprivate void findFieldsAndMethods(\r \t\tchar[] token,\r \t\tTypeBinding receiverType,\r \t\tScope scope,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope)", "diff": ["-}\r", "-private void findFieldsAndMethods(char[] token, TypeBinding receiverType, Scope scope) {\r", "-\tif (token == null) return;\r", "-\tif (receiverType.isBaseType()) return; // nothing else is possible with base types\r", "-\tif (receiverType.isArrayType()) {\r", "-\t\tif (token.length <= lengthField.length && CharOperation.prefixEquals(token, lengthField, false /* ignore case */))\r", "-\t\t\t\tlengthField,\r", "-\t\t\t\tlengthField,\r", "-\t\t\t\tCompilerModifiers.AccPublic,\r", "-\r", "-\t\treceiverType = scope.getJavaLangObject();\r", "-\tfindFields(token, (ReferenceBinding) receiverType, scope, new ObjectVector(), false);\r", "-\tfindMethods(token, null, (ReferenceBinding) receiverType, scope, new ObjectVector(), false, false);\r", "-}\r", "+\tprivate void findFieldsAndMethods(\r", "+\t\tchar[] token,\r", "+\t\tTypeBinding receiverType,\r", "+\t\tScope scope,\r", "+\t\tInvocationSite invocationSite,\r", "+\t\tScope invocationScope) {\r", "+\t\tif (token == null)\r", "+\t\t\treturn;\r", "+\t\tif (receiverType.isBaseType())\r", "+\t\t\treturn; // nothing else is possible with base types\r", "+\t\tif (receiverType.isArrayType()) {\r", "+\t\t\tif (token.length <= lengthField.length\r", "+\t\t\t\t&& CharOperation.prefixEquals(token, lengthField, false /* ignore case */\r", "+\t\t\t\t))\r", "+\t\t\t\trequestor.acceptField(\r", "+\t\t\t\t\tNoChar,\r", "+\t\t\t\t\tNoChar,\r", "+\t\t\t\t\tlengthField,\r", "+\t\t\t\t\tNoChar,\r", "+\t\t\t\t\tNoChar,\r", "+\t\t\t\t\tlengthField,\r", "+\t\t\t\t\tCompilerModifiers.AccPublic,\r", "+\t\t\t\t\tstartPosition,\r", "+\t\t\t\t\tendPosition);\r", "+\r", "+\t\t\treceiverType = scope.getJavaLangObject();\r", "+\t\t}\r", "+\r", "+\t\tfindFields(\r", "+\t\t\ttoken,\r", "+\t\t\t(ReferenceBinding) receiverType,\r", "+\t\t\tscope,\r", "+\t\t\tnew ObjectVector(),\r", "+\t\t\tnew ObjectVector(),\r", "+\t\t\tfalse,\r", "+\t\t\tinvocationSite,\r", "+\t\t\tinvocationScope);\r", "+\t\tfindMethods(\r", "+\t\t\ttoken,\r", "+\t\t\tnull,\r", "+\t\t\t(ReferenceBinding) receiverType,\r", "+\t\t\tscope,\r", "+\t\t\tnew ObjectVector(),\r", "+\t\t\tfalse,\r", "+\t\t\tfalse,\r", "+\t\t\tinvocationSite);\r"]}], "num": 42872}
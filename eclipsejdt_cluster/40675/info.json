{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a246e4ab24c77a8881eaf09e3c4b625", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "326762f71c3d9ed0b12936c68f0cb13b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void test007()", "signatureAfterChange": " public void test007()", "diff": ["-\t\t\"     2  newarray #10 int\\n\" + ", "+\t\t\"     2  newarray int [10]\\n\" + ", "-\t\t\"    47  astore_2\\n\" + ", "-\t\t\"    48  aload_2\\n\" + ", "-\t\t\"    49  astore 6\\n\" + ", "+\t\t\"    47  astore_2 [tab]\\n\" + ", "+\t\t\"    48  aload_2 [tab]\\n\" + ", "+\t\t\"    49  astore [local_6]\\n\" + ", "-\t\t\"    52  istore 4\\n\" + ", "-\t\t\"    54  aload 6\\n\" + ", "+\t\t\"    52  istore [local_4]\\n\" + ", "+\t\t\"    54  aload [local_6]\\n\" + ", "-\t\t\"    57  istore 5\\n\" + ", "+\t\t\"    57  istore [local_5]\\n\" + ", "-\t\t\"    62  aload 6\\n\" + ", "-\t\t\"    64  iload 4\\n\" + ", "+\t\t\"    62  aload [local_6]\\n\" + ", "+\t\t\"    64  iload [local_4]\\n\" + ", "-\t\t\"    67  istore_3\\n\" + ", "-\t\t\"    68  iload_3\\n\" + ", "-\t\t\"    69  istore_1\\n\" + ", "-\t\t\"    70  iinc 4 1\\n\" + ", "-\t\t\"    73  iload 4\\n\" + ", "-\t\t\"    75  iload 5\\n\" + ", "+\t\t\"    67  istore_3 [e]\\n\" + ", "+\t\t\"    68  iload_3 [e]\\n\" + ", "+\t\t\"    69  istore_1 [i]\\n\" + ", "+\t\t\"    70  iinc 4 1 [local_4]\\n\" + ", "+\t\t\"    73  iload [local_4]\\n\" + ", "+\t\t\"    75  iload [local_5]\\n\" + ", "-\t\t\"    80  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    83  ldc #23 <String \\\"SUCCESS\\\">\\n\" + ", "-\t\t\"    85  invokevirtual #29 <Method java/io/PrintStream.println(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    80  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    83  ldc <String \\\"SUCCESS\\\"> [23]\\n\" + ", "+\t\t\"    85  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [29]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45593bf99797a9aab28702bc34ddb03f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1037, "methodNumberAfterChange": 1037, "signatureBeforeChange": " public void test1013()", "signatureAfterChange": " public void test1013()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 14)\\r\\n\" +", "-\t\t\"\tvoid foo(List l1, List<X> l2) {\\r\\n\" +", "-\t\t\"\t         ^^^^\\n\" +", "-\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 15)\\r\\n\" +", "-\t\t\"\tX x = bar1(l1, l2);\\r\\n\" +", "-\t\t\"\t      ^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation bar1(List, List) of the generic method bar1(List<T>, List<T>) of type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 15)\\r\\n\" +", "-\t\t\"\tX x = bar1(l1, l2);\\r\\n\" +", "-\t\t\"\t      ^^^^^^^^^^^^\\n\" +", "-\t\t\"Type mismatch: cannot convert from Object to X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in X.java (at line 15)\\r\\n\" +", "-\t\t\"\tX x = bar1(l1, l2);\\r\\n\" +", "-\t\t\"\t           ^^\\n\" +", "-\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<T>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. WARNING in X.java (at line 17)\\r\\n\" +", "-\t\t\"\tList<X> lx = bar2(l1, l2);\\r\\n\" +", "-\t\t\"\t             ^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation bar2(List, List) of the generic method bar2(List<T>, List<T>) of type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"6. WARNING in X.java (at line 17)\\r\\n\" +", "-\t\t\"\tList<X> lx = bar2(l1, l2);\\r\\n\" +", "-\t\t\"\t             ^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<X>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"7. WARNING in X.java (at line 17)\\r\\n\" +", "-\t\t\"\tList<X> lx = bar2(l1, l2);\\r\\n\" +", "-\t\t\"\t                  ^^\\n\" +", "-\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<T>\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\"\tvoid foo(List l1, List<X> l2) {\\n\" + ", "+\t\t\"\t         ^^^^\\n\" + ", "+\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\"\tX x = bar1(l1, l2);\\n\" + ", "+\t\t\"\t      ^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation bar1(List, List<X>) of the generic method bar1(List<T>, List<T>) of type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\"\tX x = bar1(l1, l2);\\n\" + ", "+\t\t\"\t      ^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Object to X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\"\tX x = bar1(l1, l2);\\n\" + ", "+\t\t\"\t           ^^\\n\" + ", "+\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<X>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 17)\\n\" + ", "+\t\t\"\tList<X> lx = bar2(l1, l2);\\n\" + ", "+\t\t\"\t             ^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation bar2(List, List<X>) of the generic method bar2(List<T>, List<T>) of type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in X.java (at line 17)\\n\" + ", "+\t\t\"\tList<X> lx = bar2(l1, l2);\\n\" + ", "+\t\t\"\t             ^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<X>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"7. WARNING in X.java (at line 17)\\n\" + ", "+\t\t\"\tList<X> lx = bar2(l1, l2);\\n\" + ", "+\t\t\"\t                  ^^\\n\" + ", "+\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<X>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5653f872e6eb4a000199c523f8ded363", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void test019()", "signatureAfterChange": " public void test019()", "diff": ["-\t\t\"     1  newarray #10 int\\n\" + ", "-\t\t\"     3  astore_1\\n\" + ", "-\t\t\"     4  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"     7  ldc #23 <String \\\"SUC\\\">\\n\" + ", "-\t\t\"     9  invokevirtual #29 <Method java/io/PrintStream.print(Ljava/lang/String;)V>\\n\" + ", "-\t\t\"    12  aload_1\\n\" + ", "-\t\t\"    13  astore 4\\n\" + ", "+\t\t\"     1  newarray int [10]\\n\" + ", "+\t\t\"     3  astore_1 [tab]\\n\" + ", "+\t\t\"     4  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"     7  ldc <String \\\"SUC\\\"> [23]\\n\" + ", "+\t\t\"     9  invokevirtual java/io/PrintStream.print(Ljava/lang/String;)V [29]\\n\" + ", "+\t\t\"    12  aload_1 [tab]\\n\" + ", "+\t\t\"    13  astore [local_4]\\n\" + ", "-\t\t\"    16  istore_2\\n\" + ", "-\t\t\"    17  aload 4\\n\" + ", "+\t\t\"    16  istore_2 [local_2]\\n\" + ", "+\t\t\"    17  aload [local_4]\\n\" + ", "-\t\t\"    20  istore_3\\n\" + ", "+\t\t\"    20  istore_3 [local_3]\\n\" + ", "-\t\t\"    24  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    27  ldc #31 <String \\\"1x\\\">\\n\" + ", "-\t\t\"    29  invokevirtual #29 <Method java/io/PrintStream.print(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    24  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    27  ldc <String \\\"1x\\\"> [31]\\n\" + ", "+\t\t\"    29  invokevirtual java/io/PrintStream.print(Ljava/lang/String;)V [29]\\n\" + ", "-\t\t\"    35  iload_2\\n\" + ", "-\t\t\"    36  iload_3\\n\" + ", "+\t\t\"    35  iload_2 [local_2]\\n\" + ", "+\t\t\"    36  iload_3 [local_3]\\n\" + ", "-\t\t\"    40  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    43  ldc #33 <String \\\"CESS\\\">\\n\" + ", "-\t\t\"    45  invokevirtual #36 <Method java/io/PrintStream.println(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    40  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    43  ldc <String \\\"CESS\\\"> [33]\\n\" + ", "+\t\t\"    45  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [36]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74b7c17c761384c9875e23d6473f9cc8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ConstantTest.java", "commitBeforeChange": "de542d47e7857076ff550f4560e517bc0773f2ce", "commitAfterChange": "29901dd2faebfaef1b4d98d076ffc43db80ce6e9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void test009()", "signatureAfterChange": " public void test009()", "diff": ["-\t\t\"    39  invokevirtual #41 <Method java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>\\n\" + ", "+\t\t\"    39  invokevirtual #41 <Method java/lang/StringBuffer.append(Ljava/lang/Object;)Ljava/lang/StringBuffer;>\\n\" + ", "-\t\t\"    44  invokevirtual #41 <Method java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>\\n\" + ", "-\t\t\"    47  invokevirtual #47 <Method java/lang/StringBuffer.toString()Ljava/lang/String;>\\n\" + ", "-\t\t\"    50  ldc #49 <String \\\"[null]\\\">\\n\" + ", "+\t\t\"    44  invokevirtual #46 <Method java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>\\n\" + ", "+\t\t\"    47  invokevirtual #50 <Method java/lang/StringBuffer.toString()Ljava/lang/String;>\\n\" + ", "+\t\t\"    50  ldc #52 <String \\\"[null]\\\">\\n\" + ", "-\t\t\"    64  ldc #51 <String \\\"3\\\">\\n\" + ", "+\t\t\"    64  ldc #54 <String \\\"3\\\">\\n\" + ", "-\t\t\"    78  ldc #53 <String \\\"4\\\">\\n\" + ", "+\t\t\"    78  ldc #56 <String \\\"4\\\">\\n\" + ", "-\t\t\"    83  ldc #55 <String \\\"aaa\\\">\\n\" + ", "+\t\t\"    83  ldc #58 <String \\\"aaa\\\">\\n\" + ", "-\t\t\"    89  ldc #57 <String \\\"5\\\">\\n\" + ", "-\t\t\"    91  invokevirtual #60 <Method java/io/PrintStream.println(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    89  ldc #60 <String \\\"5\\\">\\n\" + ", "+\t\t\"    91  invokevirtual #63 <Method java/io/PrintStream.println(Ljava/lang/String;)V>\\n\" + ", "-\t\t\"    39  invokevirtual #41 <Method java/lang/StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder;>\\n\" + ", "+\t\t\"    39  invokevirtual #41 <Method java/lang/StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;>\\n\" + ", "-\t\t\"    44  invokevirtual #41 <Method java/lang/StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder;>\\n\" + ", "-\t\t\"    47  invokevirtual #47 <Method java/lang/StringBuilder.toString()Ljava/lang/String;>\\n\" + ", "-\t\t\"    50  ldc #49 <String \\\"[null]\\\">\\n\" + ", "+\t\t\"    44  invokevirtual #46 <Method java/lang/StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder;>\\n\" + ", "+\t\t\"    47  invokevirtual #50 <Method java/lang/StringBuilder.toString()Ljava/lang/String;>\\n\" + ", "+\t\t\"    50  ldc #52 <String \\\"[null]\\\">\\n\" + ", "-\t\t\"    64  ldc #51 <String \\\"3\\\">\\n\" + ", "+\t\t\"    64  ldc #54 <String \\\"3\\\">\\n\" + ", "-\t\t\"    78  ldc #53 <String \\\"4\\\">\\n\" + ", "+\t\t\"    78  ldc #56 <String \\\"4\\\">\\n\" + ", "-\t\t\"    83  ldc #55 <String \\\"aaa\\\">\\n\" + ", "+\t\t\"    83  ldc #58 <String \\\"aaa\\\">\\n\" + ", "-\t\t\"    89  ldc #57 <String \\\"5\\\">\\n\" + ", "-\t\t\"    91  invokevirtual #60 <Method java/io/PrintStream.println(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    89  ldc #60 <String \\\"5\\\">\\n\" + ", "+\t\t\"    91  invokevirtual #63 <Method java/io/PrintStream.println(Ljava/lang/String;)V>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9eccce2bd2285b07e1f611602c40f846", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void testStringParameterizedSingleArgument01() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedSingleArgument01() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R1.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R1.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2a6fdb091e1a6f9ac165e35cfb064e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StackMapAttributeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void test046()", "signatureAfterChange": " \tpublic void test046()", "diff": ["-\t\t\t\t\"public class X {\\r\\n\" + ", "-\t\t\t\t\"\tclass E1 extends RuntimeException {\\r\\n\" + ", "-\t\t\t\t\"\t\tprivate static final long serialVersionUID = 1L;\\r\\n\" + ", "-\t\t\t\t\"\t}\\r\\n\" + ", "-\t\t\t\t\"\tstatic Object bar() {\\r\\n\" + ", "-\t\t\t\t\"\t\treturn new Object() {\\r\\n\" + ", "-\t\t\t\t\"\t\t\tpublic void foo() {\\r\\n\" + ", "-\t\t\t\t\"\t\t\t\tif (condition())\\r\\n\" + ", "-\t\t\t\t\"\t\t\t\t\tthrow new E1();\\r\\n\" + ", "-\t\t\t\t\"\t\t\t}\\r\\n\" + ", "-\t\t\t\t\"\t\t};\\r\\n\" + ", "-\t\t\t\t\"\t}\\r\\n\" + ", "-\t\t\t\t\"\tstatic boolean condition() {\\r\\n\" + ", "-\t\t\t\t\"\t\treturn false;\\r\\n\" + ", "-\t\t\t\t\"\t}\\r\\n\" + ", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\r\\n\" + ", "-\t\t\t\t\"\t}\\r\\n\" + ", "-\t\t\t\t\"}\\r\\n\" + ", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tclass E1 extends RuntimeException {\\n\" + ", "+\t\t\t\t\"\t\tprivate static final long serialVersionUID = 1L;\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tstatic Object bar() {\\n\" + ", "+\t\t\t\t\"\t\treturn new Object() {\\n\" + ", "+\t\t\t\t\"\t\t\tpublic void foo() {\\n\" + ", "+\t\t\t\t\"\t\t\t\tif (condition())\\n\" + ", "+\t\t\t\t\"\t\t\t\t\tthrow new E1();\\n\" + ", "+\t\t\t\t\"\t\t\t}\\n\" + ", "+\t\t\t\t\"\t\t};\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tstatic boolean condition() {\\n\" + ", "+\t\t\t\t\"\t\treturn false;\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b330603744202ea89a221f7d5e85e521", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " \tpublic void testStringNestedMultipleArguments05() throws CoreException", "signatureAfterChange": " \tpublic void testStringNestedMultipleArguments05() throws CoreException", "diff": ["-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_wld [NGM.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic<NGM.Generic<?, ?, ?>,NGM.Generic<?, ?, ?>,NGM.Generic<?, ?, ?>>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_obj [NGM.Generic<Object, Exception, RuntimeException>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_wld [NGM.Generic<NGS.Generic<?>, NGS.Generic<?>, NGS.Generic<?>>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_www [NGM.Generic<NGS.Generic<?>, NGS.Generic<NGS.Generic<?>>, NGS.Generic<NGS.Generic<NGS.Generic<?>>>>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_obj [NGM.Generic<NGS.Generic<Object>, NGS.Generic<? extends Throwable>, NGS.Generic<? super RuntimeException>>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_wld [NGM.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [NGM.Generic<g3.t.def.NGM.Generic<?, ?, ?>, g3.t.def.NGM.Generic<?, ?, ?>, g3.t.def.NGM.Generic<?, ?, ?>>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [NGM.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [NGM.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [NGM.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_obj [NGM.Generic<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_wld [NGM.Generic<g3.t.def.NGS.Generic<?>, g3.t.def.NGS.Generic<?>, g3.t.def.NGS.Generic<?>>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_www [NGM.Generic<g3.t.def.NGS.Generic<?>, g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<?>>, g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<?>>>>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_obj [NGM.Generic<g3.t.def.NGS.Generic<java.lang.Object>, g3.t.def.NGS.Generic<? extends java.lang.Throwable>, g3.t.def.NGS.Generic<? super java.lang.RuntimeException>>] COMPATIBLE_MATCH\",", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_wld [NGM.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic<NGM.Generic<?, ?, ?>,NGM.Generic<?, ?, ?>,NGM.Generic<?, ?, ?>>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_obj [NGM.Generic<Object, Exception, RuntimeException>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_wld [NGM.Generic<NGS.Generic<?>, NGS.Generic<?>, NGS.Generic<?>>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_www [NGM.Generic<NGS.Generic<?>, NGS.Generic<NGS.Generic<?>>, NGS.Generic<NGS.Generic<NGS.Generic<?>>>>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_obj [NGM.Generic<NGS.Generic<Object>, NGS.Generic<? extends Throwable>, NGS.Generic<? super RuntimeException>>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_wld [NGM.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [NGM.Generic<g3.t.def.NGM.Generic<?, ?, ?>, g3.t.def.NGM.Generic<?, ?, ?>, g3.t.def.NGM.Generic<?, ?, ?>>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [NGM.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [NGM.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [NGM.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_obj [NGM.Generic<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_wld [NGM.Generic<g3.t.def.NGS.Generic<?>, g3.t.def.NGS.Generic<?>, g3.t.def.NGS.Generic<?>>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_www [NGM.Generic<g3.t.def.NGS.Generic<?>, g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<?>>, g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<?>>>>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_obj [NGM.Generic<g3.t.def.NGS.Generic<java.lang.Object>, g3.t.def.NGS.Generic<? extends java.lang.Throwable>, g3.t.def.NGS.Generic<? super java.lang.RuntimeException>>] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb440e10f1962b684a70ee74a7e85b60", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": " public void testTypeRefGenericsTest11_TypeArgument() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericsTest11_TypeArgument() throws CoreException", "diff": ["-\t\t\"src/test11/Test.java test11.Test.z [\t\t\ufffd|Y|\ufffd<X<? extends Object>, X<? super String>, X<? extends Exception>>,@42] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tY<\ufffd|X|\ufffd<? extends Object>, X<? super String>, X<? extends Exception>>,@44] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tY<X<? extends Object>, \ufffd|X|\ufffd<? super String>, X<? extends Exception>>,@65] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tY<X<? extends Object>, X<? super String>, \ufffd|X|\ufffd<? extends Exception>>,@84] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\t\ufffd|X|\ufffd<Y<? extends Object, ? super String, X<? extends Exception>>>,@111] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tX<\ufffd|Y|\ufffd<? extends Object, ? super String, X<? extends Exception>>>,@113] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tX<Y<? extends Object, ? super String, \ufffd|X|\ufffd<? extends Exception>>>,@149] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\t\ufffd|Z|\ufffd<? extends Object, X<? super String>, X<X<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@177] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, \ufffd|X|\ufffd<? super String>, X<X<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@197] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, \ufffd|X|\ufffd<X<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@216] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<\ufffd|X|\ufffd<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@218] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<X<? extends Exception>>, \ufffd|X|\ufffd<X<X<? extends java.io.Serializable>>>>,@243] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<X<? extends Exception>>, X<\ufffd|X|\ufffd<X<? extends java.io.Serializable>>>>,@245] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<X<? extends Exception>>, X<X<\ufffd|X|\ufffd<? extends java.io.Serializable>>>>,@247] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\t\ufffd|X|\ufffd<X<X<X<? super String>>>>> z;@287] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tX<\ufffd|X|\ufffd<X<X<? super String>>>>> z;@289] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tX<X<\ufffd|X|\ufffd<X<? super String>>>>> z;@291] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tX<X<X<\ufffd|X|\ufffd<? super String>>>>> z;@293] EXACT_MATCH\"", "+\t\t\"src/test11/Test.java test11.Test.z [\t\t!|Y|!<X<? extends Object>, X<? super String>, X<? extends Exception>>,@42] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tY<!|X|!<? extends Object>, X<? super String>, X<? extends Exception>>,@44] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tY<X<? extends Object>, !|X|!<? super String>, X<? extends Exception>>,@65] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tY<X<? extends Object>, X<? super String>, !|X|!<? extends Exception>>,@84] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\t!|X|!<Y<? extends Object, ? super String, X<? extends Exception>>>,@111] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tX<!|Y|!<? extends Object, ? super String, X<? extends Exception>>>,@113] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tX<Y<? extends Object, ? super String, !|X|!<? extends Exception>>>,@149] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\t!|Z|!<? extends Object, X<? super String>, X<X<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@177] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, !|X|!<? super String>, X<X<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@197] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, !|X|!<X<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@216] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<!|X|!<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@218] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<X<? extends Exception>>, !|X|!<X<X<? extends java.io.Serializable>>>>,@243] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<X<? extends Exception>>, X<!|X|!<X<? extends java.io.Serializable>>>>,@245] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<X<? extends Exception>>, X<X<!|X|!<? extends java.io.Serializable>>>>,@247] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\t!|X|!<X<X<X<? super String>>>>> z;@287] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tX<!|X|!<X<X<? super String>>>>> z;@289] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tX<X<!|X|!<X<? super String>>>>> z;@291] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tX<X<X<!|X|!<? super String>>>>> z;@293] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8dde23988297072311592210bd9c887", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void testStringParameterizedMultipleArguments01() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedMultipleArguments01() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R1.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R1.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EQUIVALENT_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EQUIVALENT_RAW_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cda3dff1c06fada5a4860488d8709d84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "314f66e76f751455a7dd539f576706f5f92aab24", "commitAfterChange": "5d2ad0b940570868aeb3a33317182334e9423c29", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tpublic void test085()", "signatureAfterChange": " \tpublic void test085()", "diff": ["-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"\t                                ^\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"\t                                ^^\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"\t                                ^^^\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid reference\\n\"", "+\t\t\t\t+ \"\t                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"Javadoc: Unexpected text\\n\""]}], "num": 40675}
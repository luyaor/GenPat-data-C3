{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3148da0cd30673d64d5890fba8a12b5b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91f586dbe4c4a23a426046f1c4645d25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "586a10aecb6a4534c8783bac3b835a12b6c01444", "commitAfterChange": "246ca33259b64e75a96042ce92db878077ac86aa", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \t \tpublic boolean isCompatibleWith(TypeBinding left, final Scope someScope)", "signatureAfterChange": " \t \tpublic boolean isCompatibleWith(TypeBinding left, final Scope someScope)", "diff": ["-// FIXME: we don't yet have the same, should we compute it here & now?", "-//\t\t\t\t\t\tif (sam.returnType.id == TypeIds.T_void) {", "-//\t\t\t\t\t\t\tif (!this.voidCompatible)", "-//\t\t\t\t\t\t\t\treturn false;", "-//\t\t\t\t\t\t} else {", "-//\t\t\t\t\t\t\tif (!this.valueCompatible)", "-//\t\t\t\t\t\t\t\treturn false;", "-//\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak shapeAnalysis;", "-\t\t\t\t\tthis.voidCompatible = expressionBody.statementExpression();", "+\t\t\t\t\tthis.voidCompatible = this.assistNode ? true : expressionBody.statementExpression();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af838ae7ddb1be90ba5b5cb5920da0c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "c35f48a470f9475e0b73c6c14c2a26ca2378ab58", "commitAfterChange": "3c7abdea60e3dea7a9b2b822e92d260aea9179a7", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic boolean isCompatibleWith(TypeBinding left, Scope someScope)", "signatureAfterChange": " \t \tpublic boolean isCompatibleWith(TypeBinding left, Scope someScope)", "diff": ["-\t\tif (sam.returnType.id == TypeIds.T_void) {", "-\t\t\tif (!this.voidCompatible)", "-\t\t\t\treturn false;", "-\t\t} else {", "-\t\t\tif (!this.valueCompatible)", "-\t\t\t\treturn false;", "-\t\t}", "+\t\tif (this.shapeAnalysisComplete && squarePegInRoundHole(sam))", "+\t\t\treturn false;", "-", "+\t\t\tif (!this.shapeAnalysisComplete) {", "+\t\t\t\tthis.valueCompatible = copy.doesNotCompleteNormally();", "+\t\t\t\tthis.shapeAnalysisComplete = true;", "+\t\t\t\tif (squarePegInRoundHole(sam))", "+\t\t\t\t\treturn false;", "+\t\t\t}"]}], "num": 35179}
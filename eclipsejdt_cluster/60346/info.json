{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d1547008b814d75b392d04f39d041db", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e5446fa9b17b12821418ab65a165449", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "418d08685e8bc0508d05dda65dd277f56261854f", "commitAfterChange": "2d42c7f71ce65658f51f1f08922e1c6e3b9d54f4", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 74, "signatureBeforeChange": " private final boolean atReferenceExpression()", "signatureAfterChange": " private final boolean atReferenceExpression()", "diff": ["-}", "-private final boolean atReferenceExpression() {", "-", "-\t/* The cursor is at a '<' that figures just past the non terminal symbol `Name' and the parser is parsing a primary expression.", "-\t   Look ahead and answer true if we are at a method or constructor reference expression and false otherwise.", "-", "-\t   ReferenceExpression ::= Name OnlyTypeArgumentsForReferenceExpression Dimsopt '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t   ReferenceExpression ::= Name OnlyTypeArgumentsForReferenceExpression '.' ClassOrInterfaceType Dimsopt '::' NonWildTypeArgumentsopt IdentifierOrNew", "-\t   ", "-\t    Note: At this point, we don't handle annotations on dimensions, I think it is illegal, but needs to be verified.", "-\t*/ ", "-\t", "-\tint savedCurrentPosition = this.currentPosition;", "-\tint savedStartPosition = this.startPosition;", "-\tchar savedCurrentCharacter = this.currentCharacter;", "-\tchar[] savedWithoutUnicodeBuffer = null;", "-\tint savedWithoutUnicodePtr = this.withoutUnicodePtr;", "-\tif (savedWithoutUnicodePtr != 0) {", "-\t\tint length = this.withoutUnicodeBuffer.length;", "-\t\tSystem.arraycopy(this.withoutUnicodeBuffer, 0, savedWithoutUnicodeBuffer = new char [length], 0, length);", "-\t}", "-", "-\tboolean atReferenceExpression = false;", "-\tboolean whiteSpace;", "-\t", "-\tboolean justPastIdentifier = true, justPastDot = false, justPastTypeArguments = false;", "-\tchar c = '<';", "-\t", "-\ttry {", "-\t\tdone:", "-\t\t\twhile (true) {", "-\t\t\t\tNextToken: switch (c) {", "-\t\t\t\t\tcase '[' :", "-\t\t\t\t\tcase ']' :", "-\t\t\t\t\t\tbreak NextToken; // good enough for now.", "-\t\t\t\t\tcase '<' :", "-\t\t\t\t\t\tif (justPastIdentifier) {", "-\t\t\t\t\t\t\tjumpOver('<' , '>', blackListedTokens);", "-\t\t\t\t\t\t\tif (this.currentCharacter != '>')", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\t\t\tjustPastIdentifier = false;", "-\t\t\t\t\t\t\tjustPastTypeArguments = true;", "-\t\t\t\t\t\t\tjustPastDot = false;", "-\t\t\t\t\t\t\tbreak NextToken;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\tcase '.' :", "-\t\t\t\t\t\tif (justPastIdentifier || justPastTypeArguments) {", "-\t\t\t\t\t\t\tjustPastIdentifier = false;", "-\t\t\t\t\t\t\tjustPastTypeArguments = false;", "-\t\t\t\t\t\t\tjustPastDot = true;", "-\t\t\t\t\t\t\tbreak NextToken;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\tcase ':' :", "-\t\t\t\t\t\tif (justPastIdentifier || justPastTypeArguments) {", "-\t\t\t\t\t\t\tif (getNextChar(':')) {", "-\t\t\t\t\t\t\t\tatReferenceExpression = true;", "-\t\t\t\t\t\t\t\tbreak done;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tif (!justPastDot) {", "-\t\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (c < ScannerHelper.MAX_OBVIOUS) {", "-\t\t\t\t\t\t\tif ((ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[c] & ScannerHelper.C_IDENT_START) != 0) {", "-\t\t\t\t\t\t\t\tscanIdentifierOrKeyword();", "-\t\t\t\t\t\t\t\tjustPastDot = false;", "-\t\t\t\t\t\t\t\tjustPastIdentifier = true;", "-\t\t\t\t\t\t\t\tjustPastTypeArguments = false;", "-\t\t\t\t\t\t\t\tbreak NextToken;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean isJavaIdStart;", "-\t\t\t\t\t\tif (c >= HIGH_SURROGATE_MIN_VALUE && c <= HIGH_SURROGATE_MAX_VALUE) {", "-\t\t\t\t\t\t\t// Unicode 4 detection", "-\t\t\t\t\t\t\tchar low = (char) getNextChar();", "-\t\t\t\t\t\t\tif (low < LOW_SURROGATE_MIN_VALUE || low > LOW_SURROGATE_MAX_VALUE) {", "-\t\t\t\t\t\t\t\t// illegal low surrogate", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tisJavaIdStart = ScannerHelper.isJavaIdentifierStart(this.complianceLevel, c, low);", "-\t\t\t\t\t\t} else if (c >= LOW_SURROGATE_MIN_VALUE && c <= LOW_SURROGATE_MAX_VALUE) {", "-\t\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// optimized case already checked", "-\t\t\t\t\t\t\tisJavaIdStart = ScannerHelper.isJavaIdentifierStart(this.complianceLevel, c);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (isJavaIdStart) {", "-\t\t\t\t\t\t\tscanIdentifierOrKeyword();", "-\t\t\t\t\t\t\tjustPastDot = false;", "-\t\t\t\t\t\t\tjustPastIdentifier = true;", "-\t\t\t\t\t\t\tjustPastTypeArguments = false;", "-\t\t\t\t\t\t\tbreak NextToken;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t}", "-\t\t\t\tdo { // skip past white space", "-\t\t\t\t\tthis.startPosition = this.currentPosition;", "-\t\t\t\t\tif (((this.currentCharacter = this.source[this.currentPosition++]) == '\\\\')", "-\t\t\t\t\t\t\t&& (this.source[this.currentPosition] == 'u')) {", "-\t\t\t\t\t\twhiteSpace = jumpOverUnicodeWhiteSpace();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\twhiteSpace = CharOperation.isWhitespace(this.currentCharacter);", "-\t\t\t\t\t}", "-\t\t\t\t} while (whiteSpace);", "-\t\t\t\tc = this.currentCharacter;  //next non-white character, loop back to decide what to do.", "-\t\t\t}\t", "-\t} catch (Exception e) {", "-\t\t// ignore", "-\t} finally {", "-\t\t// Restore status quo ante and return suitable value.", "-\t\tthis.currentPosition = savedCurrentPosition;", "-\t\tthis.startPosition = savedStartPosition;", "-\t\tthis.currentCharacter = savedCurrentCharacter;", "-\t\tthis.withoutUnicodePtr = savedWithoutUnicodePtr;", "-\t\tif (savedWithoutUnicodePtr != 0) {", "-\t\t\tSystem.arraycopy(savedWithoutUnicodeBuffer, 0, this.withoutUnicodeBuffer, 0, savedWithoutUnicodeBuffer.length);", "-\t\t}", "-\t}", "-\treturn atReferenceExpression;", "-}", "+}", "+private final boolean atReferenceExpression() { // Did the '<' we saw just now herald a reference expression ?", "+\treturn getVanguardParser().parse(TokenNameCOLON_COLON);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8ad9f2500fdeb9e21f0bf08661aca34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor2.java", "commitBeforeChange": "bef94b122a5806a6bc4d6007e2830abcf111676d", "commitAfterChange": "280d119d240fe15fdcda0abda2f680707bc40458", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "  \tpublic boolean visit(MethodInvocation node)", "signatureAfterChange": "  \tpublic boolean visit(MethodInvocation node)", "diff": ["+\t\t\t// check the first fragment", "+\t\t\tfinal Expression firstFragment = (Expression) fragments.get(0);", "+\t\t\tswitch(firstFragment.getNodeType()) {", "+\t\t\t\tcase ASTNode.METHOD_INVOCATION :", "+\t\t\t\t\tformatSingleMethodInvocation((MethodInvocation) firstFragment);", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tfirstFragment.accept(this);", "+\t\t\t}", "+\t\t\tAlignment2 cascadingMessageSendAlignment =", "+\t\t\t\tthis.scribe.createAlignment(", "+\t\t\t\t\t\"cascadingMessageSendAlignment\", //$NON-NLS-1$", "+\t\t\t\t\tthis.preferences.alignment_for_selector_in_method_invocation,", "+\t\t\t\t\tAlignment.R_INNERMOST,", "+\t\t\t\t\tfragmentsLength,", "+\t\t\t\t\tthis.scribe.scanner.currentPosition);", "+\t\t\tthis.scribe.enterAlignment(cascadingMessageSendAlignment);", "+\t\t\tboolean ok = false;", "+\t\t\tdo {", "+\t\t\t\ttry {", "+\t\t\t\t\tthis.scribe.alignFragment(cascadingMessageSendAlignment, 0);", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDOT);", "+\t\t\t\t\tfor (int i = 1; i < fragmentsLength - 1; i++) {", "+\t\t\t\t\t\tMethodInvocation  currentMethodInvocation = (MethodInvocation) fragments.get(i);", "+\t\t\t\t\t\tformatSingleMethodInvocation(currentMethodInvocation);", "+\t\t\t\t\t\tthis.scribe.alignFragment(cascadingMessageSendAlignment, i);", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDOT);", "+\t\t\t\t\t}", "+\t\t\t\t\tMethodInvocation  currentMethodInvocation = (MethodInvocation) fragments.get(fragmentsLength - 1);", "+\t\t\t\t\tformatSingleMethodInvocation(currentMethodInvocation);", "+\t\t\t\t\tok = true;", "+\t\t\t\t} catch(AlignmentException e){", "+\t\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t\t}", "+\t\t\t} while (!ok);\t\t", "+\t\t\tthis.scribe.exitAlignment(cascadingMessageSendAlignment, true);", "-\t\t\tfinal List typeArguments = node.typeArguments();", "-\t\t\tfinal int typeArgumentsLength = typeArguments.size();", "-\t\t\tif (typeArgumentsLength != 0) {", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_type_arguments); ", "-\t\t\t\tif (this.preferences.insert_space_after_opening_angle_bracket_in_type_arguments) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t\tfor (int i = 0; i < typeArgumentsLength - 1; i++) {", "-\t\t\t\t\t((Type) typeArguments.get(i)).accept(this);", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_type_arguments);", "-\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_type_arguments) {", "-\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t}\t\t\t\t", "-\t\t\t\t}", "-\t\t\t\t((Type) typeArguments.get(typeArgumentsLength - 1)).accept(this);", "-\t\t\t\tif (isClosingGenericToken()) {", "-\t\t\t\t\tthis.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_type_arguments); ", "-\t\t\t\t}", "-\t\t\t\tif (this.preferences.insert_space_after_closing_angle_bracket_in_type_arguments) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier); // selector", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_method_invocation);", "-", "-\t\t\tfinal List arguments = node.arguments();", "-\t\t\tfinal int argumentsLength = arguments.size();", "-\t\t\tif (argumentsLength != 0) {", "-\t\t\t\tif (this.preferences.insert_space_after_opening_paren_in_method_invocation) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t\tif (argumentsLength > 1) {", "-\t\t\t\t\tAlignment2 argumentsAlignment = this.scribe.createAlignment(", "-\t\t\t\t\t\t\t\"messageArguments\", //$NON-NLS-1$", "-\t\t\t\t\t\t\tthis.preferences.alignment_for_arguments_in_method_invocation,", "-\t\t\t\t\t\t\targumentsLength,", "-\t\t\t\t\t\t\tthis.scribe.scanner.currentPosition);", "-\t\t\t\t\tthis.scribe.enterAlignment(argumentsAlignment);", "-\t\t\t\t\tboolean ok = false;", "-\t\t\t\t\tdo {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "-\t\t\t\t\t\t\t\tif (i > 0) {", "-\t\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_method_invocation_arguments);", "-\t\t\t\t\t\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tthis.scribe.alignFragment(argumentsAlignment, i);", "-\t\t\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_method_invocation_arguments) {", "-\t\t\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t((Expression) arguments.get(i)).accept(this);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tok = true;", "-\t\t\t\t\t\t} catch (AlignmentException e) {", "-\t\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} while (!ok);", "-\t\t\t\t\tthis.scribe.exitAlignment(argumentsAlignment, true);", "-\t\t\t\t} else {", "-\t\t\t\t\tfor (int i = 0; i < argumentsLength; i++) {", "-\t\t\t\t\t\tif (i > 0) {", "-\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_method_invocation_arguments);", "-\t\t\t\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (i > 0 && this.preferences.insert_space_after_comma_in_method_invocation_arguments) {", "-\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t((Expression) arguments.get(i)).accept(this);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_method_invocation); ", "-\t\t\t} else {", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_between_empty_parens_in_method_invocation);", "-\t\t\t}\t\t\t", "+\t\t\tformatSingleMethodInvocation(node);\t\t\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb9a46a52c3ebc7d4bac571c644abe17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "f4680a34e1f2039b2a192d0a537b3157d981aa26", "commitAfterChange": "41f0eedac440a5a7408e664ba09866184ebddd55", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic boolean visit(ArrayInitializer arrayInitializer, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(ArrayInitializer arrayInitializer, BlockScope scope)", "diff": ["-\t", "-\t\tfinal int numberOfParens = (arrayInitializer.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "-\t\tif (numberOfParens > 0) {", "-\t\t\tmanageOpeningParenthesizedExpression(arrayInitializer, numberOfParens);", "-\t\t}", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACE, this.preferences.insert_space_before_opening_brace_in_array_initializer);", "-\t\t", "-\t\tfinal Expression[] expressions = arrayInitializer.expressions;", "-\t\tif (expressions != null) {", "-\t\t\tint expressionsLength = expressions.length;", "-\t\t\tif (expressionsLength > 1) {", "-\t\t\t\tAlignment arrayInitializerAlignment =this.scribe.createAlignment(", "-\t\t\t\t\t\t\"array_initializer\",//$NON-NLS-1$", "-\t\t\t\t\t\tthis.preferences.array_initializer_expressions_alignment,", "-\t\t\t\t\t\tAlignment.R_OUTERMOST,", "-\t\t\t\t\t\texpressionsLength,", "-\t\t\t\t\t\tthis.scribe.scanner.currentPosition,", "-\t\t\t\t\t\ttrue);", "-\t\t\t\tthis.scribe.enterAlignment(arrayInitializerAlignment);", "-\t\t\t\tboolean ok = false;", "-\t\t\t\tdo {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tthis.scribe.alignFragment(arrayInitializerAlignment, 0);", "-\t\t\t\t\t\tif (this.preferences.insert_space_before_first_initializer) {", "-\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\texpressions[0].traverse(this, scope);", "-\t\t\t\t\t\tfor (int i = 1; i < expressionsLength; i++) {", "-\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t\t\tthis.scribe.alignFragment(arrayInitializerAlignment, i);", "-\t\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_array_initializer) {", "-\t\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\texpressions[i].traverse(this, scope);", "-\t\t\t\t\t\t\tif (i == expressionsLength - 1) {", "-\t\t\t\t\t\t\t\tif (isComma()) {", "-\t\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tok = true;", "-\t\t\t\t\t} catch (AlignmentException e) {", "-\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t\t\t}", "-\t\t\t\t} while (!ok);", "-\t\t\t\tthis.scribe.exitAlignment(arrayInitializerAlignment, true);", "-\t\t\t} else {", "-\t\t\t\t// we don't need to use an alignment", "-\t\t\t\tif (this.preferences.insert_space_before_first_initializer) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t\texpressions[0].traverse(this, scope);", "-\t\t\t\tif (expressionsLength == 1) {", "-\t\t\t\t\tif (isComma()) {", "-\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tfor (int i = 1; i < expressionsLength; i++) {", "-\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_array_initializer) {", "-\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\texpressions[i].traverse(this, scope);", "-\t\t\t\t\t\tif (i == expressionsLength - 1) {", "-\t\t\t\t\t\t\tif (isComma()) {", "-\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (this.preferences.insert_new_line_before_closing_brace_in_array_initializer) {", "-\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t}", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE, this.preferences.insert_space_before_closing_brace_in_array_initializer, true); ", "-\t\t} else {", "-\t\t\tif (this.preferences.insert_new_line_before_closing_brace_in_array_initializer) {", "-\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t}", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE, this.preferences.insert_space_between_empty_array_initializer, true);", "-\t\t}", "-\t", "-\t\tif (numberOfParens > 0) {", "-\t\t\tmanageClosingParenthesizedExpression(arrayInitializer, numberOfParens);", "-\t\t}", "+\t\tformatArrayInitializer(arrayInitializer, scope, this.preferences.insert_space_before_opening_brace_in_array_initializer || this.preferences.insert_space_after_assignment_operators);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e789b61add0915b7bf7aba16b4816480", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": " \tpublic boolean visit( \t\tMethodDeclaration methodDeclaration, \t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit(ForeachStatement forStatement, BlockScope scope)", "diff": ["+\t}", "+\tpublic boolean visit(ForeachStatement forStatement, BlockScope scope) {", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNamefor);", "+\t    final int line = this.scribe.line;", "+\t    this.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_for);", "+\t\t", "+\t\tif (this.preferences.insert_space_after_opening_paren_in_for) {", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\tformatLocalDeclaration(forStatement.elementVariable, scope, false, false);", "+", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOLON, this.preferences.insert_space_before_colon_in_for);", "+\t\tif (this.preferences.insert_space_after_colon_in_for) {", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\tforStatement.collection.traverse(this, scope);", "+", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_for);", "+\t\t", "+\t\tfinal Statement action = forStatement.action;", "+\t\tif (action != null) {", "+\t\t\tif (action instanceof Block) {", "+\t            formatLeftCurlyBrace(line, this.preferences.brace_position_for_block);", "+\t\t\t\taction.traverse(this, scope);", "+\t\t\t} else if (action instanceof EmptyStatement) {", "+\t\t\t\t/*", "+\t\t\t\t * This is an empty statement", "+\t\t\t\t */", "+\t\t\t\tformatNecessaryEmptyStatement();", "+\t\t\t} else {", "+\t\t\t\tthis.scribe.indent();", "+\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\taction.traverse(this, scope);", "+\t\t\t\tthis.scribe.unIndent();", "+\t\t\t}", "+\t\t\tif (action instanceof Expression) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "+\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t}", "+\t\t} else {", "+\t\t\t/*", "+\t\t\t * This is an empty statement", "+\t\t\t */", "+\t\t\tformatNecessaryEmptyStatement(); ", "-        this.scribe.printModifiers();"]}], "num": 60346}
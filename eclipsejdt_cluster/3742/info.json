{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c5fb7f4120b592bd27e867befff86b7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23997f6192f1d0fead57d72c85727d4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "57623b33d25715d5f74d74bcaf764c593b3b85bb", "commitAfterChange": "ff87b767c4053ccd41ecd29d3c7d092a291a80c8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprotected void handleInternalException( \t\tThrowable internalException, \t\tCompilationUnitDeclaration unit, \t\tCompilationResult result)", "signatureAfterChange": " \tprotected void handleInternalException( \t\tThrowable internalException, \t\tCompilationUnitDeclaration unit, \t\tCompilationResult result)", "diff": ["-\t\t/* find a compilation result */", "-\t\tif ((unit != null)) // basing result upon the current unit if available", "+\t\tif ((result == null) && (unit != null)) {", "+\t\t}", "+\t\t// Lookup environment may be in middle of connecting types", "+\t\tif ((result == null) && lookupEnvironment.unitBeingCompleted != null) {", "+\t\t    result = lookupEnvironment.unitBeingCompleted.compilationResult;", "+\t\t}\t\t", "+\t\t// Lookup environment may be in middle of connecting types", "+\t\tif ((result == null) && lookupEnvironment.unitBeingCompleted != null) {", "+\t\t    result = lookupEnvironment.unitBeingCompleted.compilationResult;", "+\t\t}\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74d8bc793bb951823d577d5be1bdb5d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void matchReportReference(MessageSend messageSend, MatchLocator locator, MethodBinding methodBinding) throws CoreException", "signatureAfterChange": " void matchReportReference(MessageSend messageSend, MatchLocator locator, MethodBinding methodBinding) throws CoreException", "diff": ["+", "+\t\t// Special case for errors", "+\t\tif (match.getRule() != 0 && messageSend.resolvedType == null) {", "+\t\t\tmatch.setRule(SearchPattern.R_ERASURE_MATCH);", "+\t\t}", "+", "+\t\t// Special case for errors", "+\t\tif (match.getRule() != 0 && messageSend.resolvedType == null) {", "+\t\t\tmatch.setRule(SearchPattern.R_ERASURE_MATCH);", "+\t\t}"]}], "num": 3742}
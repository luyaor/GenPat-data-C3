{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1ac96648fc30a85265fe8cd4412dd8b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8aa03aa1961d443856043102a477eef9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "bb2764b7c9684437daed0c78212438ce2fa74511", "commitAfterChange": "d4d6b0243291019997a7d2e0c012e405a0f88778", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  \tprivate void generateAnnotation(Annotation annotation, int currentOffset)", "signatureAfterChange": "  \tprivate void generateAnnotation(Annotation annotation, int currentOffset)", "diff": ["+\t\t\tint memberValuePairOffset = this.contentsOffset;", "-\t\t\t\tfor (int i = 0; i < memberValuePairsLength; i++) {", "+\t\t\t\tloop: for (int i = 0; i < memberValuePairsLength; i++) {", "-\t\t\t\t\t\t\tgenerateElementValue(memberValuePair.value, methodBinding.returnType, startingContentsOffset);", "+\t\t\t\t\t\t\tgenerateElementValue(memberValuePair.value, methodBinding.returnType, memberValuePairOffset);", "+\t\t\t\t\t\t\tif (this.contentsOffset == memberValuePairOffset) {", "+\t\t\t\t\t\t\t\t// ignore all annotation values", "+\t\t\t\t\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "+\t\t\t\t\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "+\t\t\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t\t\t}", "+\t\t\t\tint memberValuePairOffset = this.contentsOffset;", "-\t\t\t\t\tgenerateElementValue(singleMemberAnnotation.memberValue, methodBinding.returnType, startingContentsOffset);", "+\t\t\t\t\tgenerateElementValue(singleMemberAnnotation.memberValue, methodBinding.returnType, memberValuePairOffset);", "+\t\t\t\t\tif (this.contentsOffset == memberValuePairOffset) {", "+\t\t\t\t\t\t// ignore annotation value", "+\t\t\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "+\t\t\t\t\t\tthis.contents[this.contentsOffset++] = 0;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5ccbee68b4e4bd83a6d3fe1b4cdbc15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ExceptionLabel.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic void placeStart()", "signatureAfterChange": "  public void placeStart()", "diff": ["+public void placeStart() {", "+\tint startPosition = codeStream.position;", "+\tif (this.count > 0 && this.ranges[this.count-1] == startPosition) { // start == previous end ?", "+\t\t// reopen current handler", "+\t\tthis.count--;", "+\t\treturn;", "+\t// only need to grow on even additions (i.e. placeStart only)", "+\tint length;", "+\tif (this.count == (length = this.ranges.length)) {", "+\t\tSystem.arraycopy(this.ranges, 0, this.ranges = new int[length*2], 0, length);", "+\tthis.ranges[this.count++] = codeStream.position;", "+}", "-\t", "-\tpublic void placeStart() {", "-", "-\t\tthis.start = codeStream.position;", "-\t}"]}], "num": 38726}
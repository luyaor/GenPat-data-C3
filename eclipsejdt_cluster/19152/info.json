{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e0c52040e690a3dc4f40c9203616b53", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14df50f41182b1a64c23732a19ba53ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "1c5093c74409d802b34134e981077f69adbcd0bf", "commitAfterChange": "761a8f63f56b2330a56c02cc774e205d5e9010ea", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "         public void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event)", "signatureAfterChange": "         public void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event)", "diff": ["-        \tif (propertyName.startsWith(CP_VARIABLE_PREFERENCES_PREFIX)) {", "-        \t\tString varName = propertyName.substring(CP_VARIABLE_PREFERENCES_PREFIX.length());", "-        \t\tJavaModelManager manager = getJavaModelManager();", "-        \t\tif (manager.variablesWithInitializer.contains(varName)) {", "-        \t\t\t// revert preference value as we will not apply it to JavaCore classpath variable", "-        \t\t\tString oldValue = (String) event.getOldValue();", "-        \t\t\tif (oldValue == null) {", "-        \t\t\t\t// unexpected old value => remove variable from set", "-        \t\t\t\tmanager.variablesWithInitializer.remove(varName);", "-        \t\t\t} else {", "-        \t\t\t\tmanager.getInstancePreferences().put(varName, oldValue);", "-        \t\t\t}", "-        \t\t} else {", "-        \t\t\tString newValue = (String)event.getNewValue();", "-        \t\t\tIPath newPath;", "-        \t\t\tif (newValue != null && !(newValue = newValue.trim()).equals(CP_ENTRY_IGNORE)) {", "-        \t\t\t\tnewPath = new Path(newValue);", "-        \t\t\t} else {", "-        \t\t\t\tnewPath = null;", "-        \t\t\t}", "-        \t\t\ttry {", "-        \t\t\t\tSetVariablesOperation operation = new SetVariablesOperation(new String[] {varName}, new IPath[] {newPath}, false/*don't update preferences*/);", "-        \t\t\t\toperation.runOperation(null/*no progress available*/);", "-        \t\t\t} catch (JavaModelException e) {", "-        \t\t\t\tUtil.log(e, \"Could not set classpath variable \" + varName + \" to \" + newPath); //$NON-NLS-1$ //$NON-NLS-2$", "-        \t\t\t}", "-        \t\t}", "-        \t} else if (propertyName.startsWith(CP_CONTAINER_PREFERENCES_PREFIX)) {", "-        \t\trecreatePersistedContainer(propertyName, (String)event.getNewValue(), false);", "-        \t} else if (propertyName.equals(JavaCore.CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER) ||", "-\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER) ||", "-\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_DUPLICATE_RESOURCE) ||", "-\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_RECREATE_MODIFIED_CLASS_FILES_IN_OUTPUT_FOLDER) ||", "-\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH) ||", "-\t\t\t\tpropertyName.equals(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS) ||", "-\t\t\t\tpropertyName.equals(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS) ||", "-\t\t\t\tpropertyName.equals(JavaCore.CORE_INCOMPLETE_CLASSPATH) ||", "-\t\t\t\tpropertyName.equals(JavaCore.CORE_CIRCULAR_CLASSPATH) ||", "-\t\t\t\tpropertyName.equals(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL)) {", "-\t\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\t\t\tIJavaModel model = manager.getJavaModel();", "-\t\t\t\tIJavaProject[] projects;", "-\t\t\t\ttry {", "-\t\t\t\t\tprojects = model.getJavaProjects();", "-\t\t\t\t\tfor (int i = 0, pl = projects.length; i < pl; i++) {", "-\t\t\t\t\t\tJavaProject javaProject = (JavaProject) projects[i];", "-\t\t\t\t\t\tmanager.deltaState.addClasspathValidation(javaProject);", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t// need to touch the project to force validation by DeltaProcessor", "-\t\t\t\t            javaProject.getProject().touch(null);", "-\t\t\t\t        } catch (CoreException e) {", "-\t\t\t\t            // skip", "-\t\t\t\t        }", "+        \tif (propertyName.startsWith(JavaCore.PLUGIN_ID)) {", "+\t        \tif (propertyName.startsWith(CP_VARIABLE_PREFERENCES_PREFIX)) {", "+\t        \t\tString varName = propertyName.substring(CP_VARIABLE_PREFERENCES_PREFIX.length());", "+\t        \t\tJavaModelManager manager = getJavaModelManager();", "+\t        \t\tif (manager.variablesWithInitializer.contains(varName)) {", "+\t        \t\t\t// revert preference value as we will not apply it to JavaCore classpath variable", "+\t        \t\t\tString oldValue = (String) event.getOldValue();", "+\t        \t\t\tif (oldValue == null) {", "+\t        \t\t\t\t// unexpected old value => remove variable from set", "+\t        \t\t\t\tmanager.variablesWithInitializer.remove(varName);", "+\t        \t\t\t} else {", "+\t        \t\t\t\tmanager.getInstancePreferences().put(varName, oldValue);", "+\t        \t\t\t}", "+\t        \t\t} else {", "+\t        \t\t\tString newValue = (String)event.getNewValue();", "+\t        \t\t\tIPath newPath;", "+\t        \t\t\tif (newValue != null && !(newValue = newValue.trim()).equals(CP_ENTRY_IGNORE)) {", "+\t        \t\t\t\tnewPath = new Path(newValue);", "+\t        \t\t\t} else {", "+\t        \t\t\t\tnewPath = null;", "+\t        \t\t\t}", "+\t        \t\t\ttry {", "+\t        \t\t\t\tSetVariablesOperation operation = new SetVariablesOperation(new String[] {varName}, new IPath[] {newPath}, false/*don't update preferences*/);", "+\t        \t\t\t\toperation.runOperation(null/*no progress available*/);", "+\t        \t\t\t} catch (JavaModelException e) {", "+\t        \t\t\t\tUtil.log(e, \"Could not set classpath variable \" + varName + \" to \" + newPath); //$NON-NLS-1$ //$NON-NLS-2$", "+\t        \t\t\t}", "+\t        \t\t}", "+\t        \t} else if (propertyName.startsWith(CP_CONTAINER_PREFERENCES_PREFIX)) {", "+\t        \t\trecreatePersistedContainer(propertyName, (String)event.getNewValue(), false);", "+\t        \t} else if (propertyName.equals(JavaCore.CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER) ||", "+\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER) ||", "+\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_DUPLICATE_RESOURCE) ||", "+\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_RECREATE_MODIFIED_CLASS_FILES_IN_OUTPUT_FOLDER) ||", "+\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH) ||", "+\t\t\t\t\tpropertyName.equals(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS) ||", "+\t\t\t\t\tpropertyName.equals(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS) ||", "+\t\t\t\t\tpropertyName.equals(JavaCore.CORE_INCOMPLETE_CLASSPATH) ||", "+\t\t\t\t\tpropertyName.equals(JavaCore.CORE_CIRCULAR_CLASSPATH) ||", "+\t\t\t\t\tpropertyName.equals(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL)) {", "+\t\t\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\t\t\t\tIJavaModel model = manager.getJavaModel();", "+\t\t\t\t\tIJavaProject[] projects;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tprojects = model.getJavaProjects();", "+\t\t\t\t\t\tfor (int i = 0, pl = projects.length; i < pl; i++) {", "+\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject) projects[i];", "+\t\t\t\t\t\t\tmanager.deltaState.addClasspathValidation(javaProject);", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t// need to touch the project to force validation by DeltaProcessor", "+\t\t\t\t\t            javaProject.getProject().touch(null);", "+\t\t\t\t\t        } catch (CoreException e) {", "+\t\t\t\t\t            // skip", "+\t\t\t\t\t        }", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t// skip", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t// skip", "+\t        \t} else if (propertyName.startsWith(CP_USERLIBRARY_PREFERENCES_PREFIX)) {", "+\t\t\t\t\tString libName = propertyName.substring(CP_USERLIBRARY_PREFERENCES_PREFIX.length());", "+\t\t\t\t\tUserLibraryManager manager = JavaModelManager.getUserLibraryManager();", "+\t        \t\tmanager.updateUserLibrary(libName, (String)event.getNewValue());", "+\t        \t}", "+\t        }", "+        \t// Reset all project caches (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=233568 )", "+        \ttry {", "+        \t\tIJavaProject[] projects = JavaModelManager.getJavaModelManager().getJavaModel().getJavaProjects();", "+\t        \tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\t\t\t((JavaProject) projects[i]).resetCaches();", "-        \t} else if (propertyName.startsWith(CP_USERLIBRARY_PREFERENCES_PREFIX)) {", "-\t\t\t\tString libName = propertyName.substring(CP_USERLIBRARY_PREFERENCES_PREFIX.length());", "-\t\t\t\tUserLibraryManager manager = JavaModelManager.getUserLibraryManager();", "-        \t\tmanager.updateUserLibrary(libName, (String)event.getNewValue());", "+        \t} catch (JavaModelException e) {", "+        \t\t// cannot retrieve Java projects"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "243f5b1f3c62755bbdec696ae84ce27a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator2.java", "commitBeforeChange": "8eff811a28d835d940585e1dd6e43b7e81d9c25c", "commitAfterChange": "ecd6b6b03e84e16fa2ef3316475695c9990930d4", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprotected boolean createHierarchyResolver()", "signatureAfterChange": " \tprotected boolean createHierarchyResolver(PotentialMatch[] potentialMatches)", "diff": ["-\tprotected boolean createHierarchyResolver() {", "+\tprotected boolean createHierarchyResolver(PotentialMatch[] potentialMatches) {", "-\t\t\t\tif (!focusType.isBinary()) {", "-\t\t\t\t\t// cache all types in the focus' compilation unit (even secondary types)", "-\t\t\t\t\tthis.accept((ICompilationUnit)focusType.getCompilationUnit());", "+\t\t\t\t// cache focus type if not a potential match", "+\t\t\t\tchar[][] compoundName = CharOperation.splitOn('.', focusType.getFullyQualifiedName().toCharArray());", "+\t\t\t\tboolean isPotentialMatch = false;", "+\t\t\t\tfor (int i = 0, length = potentialMatches.length; i < length; i++) {", "+\t\t\t\t\tif (CharOperation.equals(potentialMatches[i].compoundName, compoundName)) {", "+\t\t\t\t\t\tisPotentialMatch = true;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (!isPotentialMatch) {", "+\t\t\t\t\tif (focusType.isBinary()) {", "+\t\t\t\t\t\t// cache binary type", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tthis.cacheBinaryType(focusType);", "+\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// cache all types in the focus' compilation unit (even secondary types)", "+\t\t\t\t\t\tthis.accept((ICompilationUnit)focusType.getCompilationUnit());", "+\t\t\t\t\t}", "-\t\t\t\tchar[] fullyQualifiedName = focusType.getFullyQualifiedName().toCharArray();", "+\t\t\t\t// resolve focus type", "-\t\t\t\tif (this.hierarchyResolver.setFocusType(CharOperation.splitOn('.', fullyQualifiedName)) == null) {", "+\t\t\t\tif (this.hierarchyResolver.setFocusType(compoundName) == null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "963733d15519106423ef784b23c17264", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "6e412529e3c9d841ef857516943929ed94e3593c", "commitAfterChange": "cdf9b8e4c56a386ff2dde986be8b72d07aa1cb88", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic void resourceChanged(IResourceChangeEvent event)", "signatureAfterChange": " \tpublic void resourceChanged(IResourceChangeEvent event)", "diff": ["-\t\t\t\tcase IResourceChangeEvent.PRE_AUTO_BUILD :", "-\t\t\t\t\t// this.processPostChange = false;", "-\t\t\t\t\tif(isAffectedBy(delta)) { // avoid populating for SYNC or MARKER deltas", "-\t\t\t\t\t\tupdateClasspathMarkers(delta);", "-\t\t\t\t\t\tJavaBuilder.buildStarting();", "-\t\t\t\t\t}", "-\t\t\t\t\t// does not fire any deltas", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase IResourceChangeEvent.POST_AUTO_BUILD :", "-\t\t\t\t\tJavaBuilder.buildFinished();", "-\t\t\t\t\tbreak;", "-\t\t\t\t\t", "+\t\t\t\t\treturn;", "+\t\t\t\t\t", "+\t\t\t\tcase IResourceChangeEvent.PRE_AUTO_BUILD :", "+\t\t\t\t    DeltaProcessingState.ProjectUpdateInfo[] updates = this.state.removeAllProjectUpdates();", "+\t\t\t\t\tif (updates != null) {", "+\t\t\t\t\t    for (int i = 0, length = updates.length; i < length; i++) {", "+\t\t\t\t\t        try {", "+\t\t\t\t\t\t        updates[i].updateProjectReferencesIfNecessary();", "+\t\t\t\t\t        } catch(JavaModelException e) {", "+\t\t\t\t\t            // do nothing", "+\t\t\t\t\t        }", "+\t\t\t\t\t    }", "+\t\t\t\t\t}", "+\t\t\t\t\t// this.processPostChange = false;", "+\t\t\t\t\tif(isAffectedBy(delta)) { // avoid populating for SYNC or MARKER deltas", "+\t\t\t\t\t\tupdateClasspathMarkers(delta);", "+\t\t\t\t\t\tJavaBuilder.buildStarting();", "+\t\t\t\t\t}", "+\t\t\t\t\t// does not fire any deltas", "+\t\t\t\t\treturn;", "+", "+\t\t\t\tcase IResourceChangeEvent.POST_AUTO_BUILD :", "+\t\t\t\t\tJavaBuilder.buildFinished();", "+\t\t\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eee658b91d7fd67e5d94e0c35eb4b560", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Region.java", "commitBeforeChange": "71461454c011188604de602b101178a9fe2bbd9e", "commitAfterChange": "0bc13ec7a82e3d51d40616081c389f8948d01d76", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void add(IJavaElement element)", "signatureAfterChange": " public void add(IJavaElement element)", "diff": ["+\t\tif (element.getElementType() == IJavaElement.JAVA_PROJECT) {", "+\t\t\t// add jar roots as well so that jars don't rely on their parent to know ", "+\t\t\t// if they are contained in the region", "+\t\t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=146615)", "+\t\t\ttry {", "+\t\t\t\tIPackageFragmentRoot[] roots = ((IJavaProject) element).getPackageFragmentRoots();", "+\t\t\t\tfor (int i = 0, length = roots.length; i < length; i++) {", "+\t\t\t\t\tif (roots[i].isArchive() && !fRootElements.contains(roots[i]))", "+\t\t\t\t\t\tfRootElements.add(roots[i]);", "+\t\t\t\t}", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// project doesn't exist", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6cf6f068e7c4808953579a12f66154d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "ff87b767c4053ccd41ecd29d3c7d092a291a80c8", "commitAfterChange": "4087ac1aa417421fb04162f5881ab742333fa4e1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprivate void  checkParameterizedTypeBounds()", "signatureAfterChange": " \tpublic void  checkParameterizedTypeBounds()", "diff": ["-\tprivate void  checkParameterizedTypeBounds() {", "+\tpublic void  checkParameterizedTypeBounds() {", "+\t\t// propagate to member types", "+\t\tReferenceBinding[] memberTypes = referenceContext.binding.memberTypes;", "+\t\tif (memberTypes != null && memberTypes != NoMemberTypes) {", "+\t\t\tfor (int i = 0, size = memberTypes.length; i < size; i++)", "+\t\t\t\t ((SourceTypeBinding) memberTypes[i]).scope.checkParameterizedTypeBounds();", "+\t\t}\t\t"]}], "num": 19152}
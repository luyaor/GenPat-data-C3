{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b83c76e5178e8e8512d907331658324c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad56c9c96d8be374801aef85d5e1c71a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java", "commitBeforeChange": "7a140644bb864b33a5703af3dc19c84a2bcb243d", "commitAfterChange": "0f61b5a730cd24bb7ab05a282fa3a07ec8b534a5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\tif (this.type.annotations != null", "+\t\t\t\t\t&& (referenceType.tagBits & TagBits.AnnotationNullMASK) == TagBits.AnnotationNullMASK)", "+\t\t\t{", "+\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(this.type.annotations[this.type.annotations.length-1]);", "+\t\t\t}", "+\t\t\t\tlong[] nullTagBitsPerDimension = ((ArrayBinding)this.resolvedType).nullTagBitsPerDimension;", "+\t\t\t\tif (nullTagBitsPerDimension != null) {", "+\t\t\t\t\tfor (int i = 0; i < this.annotationsOnDimensions.length; i++) {", "+\t\t\t\t\t\tif ((nullTagBitsPerDimension[i] & TagBits.AnnotationNullMASK) == TagBits.AnnotationNullMASK) {", "+\t\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(this.annotationsOnDimensions[i]);", "+\t\t\t\t\t\t\tnullTagBitsPerDimension[i] = 0;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f309f3cb126159fc680c9c048af1a0bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": " \tpublic boolean visit( \t\tSynchronizedStatement synchronizedStatement, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(NormalAnnotation annotation, ClassScope scope)", "diff": ["+\t}", "+\tpublic boolean visit(NormalAnnotation annotation, ClassScope scope) {", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameAT);", "+\t\tif (this.preferences.insert_space_after_at_in_annotation) {", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\tthis.scribe.printQualifiedReference(annotation.sourceEnd);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_annotation);", "+\t\tif (this.preferences.insert_space_after_opening_paren_in_annotation) {", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\tMemberValuePair[] memberValuePairs = annotation.memberValuePairs;", "+\t\tif (memberValuePairs != null) {", "+\t\t\tint length = memberValuePairs.length;", "+\t\t\tfor (int i = 0; i < length - 1; i++) {", "+\t\t\t\tmemberValuePairs[i].traverse(this, scope);", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_annotation);", "+\t\t\t\tif (this.preferences.insert_space_after_comma_in_annotation) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tmemberValuePairs[length - 1].traverse(this, scope);", "+\t\t}", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_annotation);", "+\t\treturn false;", "+\t}"]}], "num": 33983}
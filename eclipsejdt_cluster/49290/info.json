{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e59b8aa582e679c9d8c23d9d08291bb7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9262b5b87f25a8d01241e7ac7de86d4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " protected int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType)", "signatureAfterChange": " protected int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType, int nullStatus)", "diff": ["-protected int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType) {", "+// return: severity: 0 = no problem; 1 = flow related problem; 2 = unchecked wrt type detail; 3 = conflicting annotations", "+protected int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType, int nullStatus) {", "-\t\t\t\t\t\tif (requiredBits != 0 && requiredBits != providedBits) {", "-\t\t\t\t\t\t\tif (providedBits == 0)", "-\t\t\t\t\t\t\t\tseverity = 1; // need unchecked conversion regarding type detail", "-\t\t\t\t\t\t\telse", "-\t\t\t\t\t\t\t\treturn 2; // mismatching annotations", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (i > 0)", "+\t\t\t\t\t\t\tnullStatus = 0; // don't use beyond the outermost dimension", "+\t\t\t\t\t\tseverity = Math.max(severity, computeNullProblemSeverity(requiredBits, providedBits, nullStatus));", "+\t\t\t\t\t\tif (severity == 3)", "+\t\t\t\t\t\t\treturn severity;", "+\t\t\t} else if (providedType.id == TypeIds.T_null) {", "+\t\t\t\tif (dims > 0 && requiredDimsTagBits[0] == TagBits.AnnotationNonNull)", "+\t\t\t\t\treturn 1;", "+\t\t\t}", "+\t\t}", "+\t} else if (requiredType instanceof ParameterizedTypeBinding) {", "+\t\tlong requiredBits = requiredType.tagBits & TagBits.AnnotationNullMASK;", "+\t\tif (requiredBits == TagBits.AnnotationNullable)", "+\t\t\treturn 0; // accepting anything", "+\t\tlong providedBits = providedType.tagBits & TagBits.AnnotationNullMASK;", "+\t\tseverity = computeNullProblemSeverity(requiredBits, providedBits, nullStatus);", "+\t\t// TODO(stephan): descend into type parameters", "+\t}", "+\treturn severity;", "+}", "-\treturn severity;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffd3a40d38be0b908b9d7a8f27327d22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java", "commitBeforeChange": "5499d7ab628f0d031c84d349d565b52915f502cb", "commitAfterChange": "48aaa503eb58e270f9afd7df4a85cb65e562a44f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\tLookupEnvironment environment = scope.environment();", "+\t\t\tif (environment.usesNullTypeAnnotations() ", "+\t\t\t\t\t&& this.annotationsOnDimensions == null // don't annotate if explicit annotations are given on dimensions ...", "+\t\t\t\t\t&& ((referenceType.tagBits & TagBits.AnnotationNullMASK) == 0)  // ... or leaf type", "+\t\t\t\t\t&& this.expectedType != null) // need this to determine our action", "+\t\t\t{", "+\t\t\t\tExpression lastDim = this.dimensions[this.dimensions.length-1];", "+\t\t\t\tif (lastDim instanceof IntLiteral && ((IntLiteral) lastDim).value == 0) {", "+\t\t\t\t\tlong tagBit = this.expectedType.leafComponentType().tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\t// let new X[0] be seen as \"@NonNull X[]\", or \"@Nullable X[]\" just as expected", "+\t\t\t\t\tAnnotationBinding[] nullAnnotations = environment.nullAnnotationsFromTagBits(tagBit);", "+\t\t\t\t\tif (nullAnnotations != null)", "+\t\t\t\t\t\treferenceType = environment.createAnnotatedType(referenceType, nullAnnotations);", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 49290}
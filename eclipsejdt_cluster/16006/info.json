{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "707a3840e0b1ddbbf6f5f46f39ceb0ec", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "494a4e2f1976711ebd6e0075611aed7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "b5c8750a0ee496ea162f56c86aa0c17734837d78", "commitAfterChange": "4a527830b1c1be247e88d2c75fe787e73bc4e15a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic static IClasspathContainer getClasspathContainer(final IPath containerPath, final IJavaProject project) throws JavaModelException", "signatureAfterChange": " \tpublic static IClasspathContainer getClasspathContainer(IPath containerPath, IJavaProject project) throws JavaModelException", "diff": ["-\tpublic static IClasspathContainer getClasspathContainer(final IPath containerPath, final IJavaProject project) throws JavaModelException {", "+\tpublic static IClasspathContainer getClasspathContainer(IPath containerPath, IJavaProject project) throws JavaModelException {", "-\t\tIClasspathContainer container = JavaModelManager.getJavaModelManager().containerGet(project, containerPath);", "-\t\tif (container == JavaModelManager.CONTAINER_INITIALIZATION_IN_PROGRESS) return null; // break cycle", "-", "-\t\tif (container == null){", "-\t\t\tfinal ClasspathContainerInitializer initializer = JavaCore.getClasspathContainerInitializer(containerPath.segment(0));", "-\t\t\tif (initializer != null){", "-\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "-\t\t\t\t\tUtil.verbose(", "-\t\t\t\t\t\t\"CPContainer INIT - triggering initialization\\n\" + //$NON-NLS-1$", "-\t\t\t\t\t\t\"\tproject: \" + project.getElementName() + '\\n' + //$NON-NLS-1$", "-\t\t\t\t\t\t\"\tcontainer path: \" + containerPath + '\\n' + //$NON-NLS-1$", "-\t\t\t\t\t\t\"\tinitializer: \" + initializer + '\\n' + //$NON-NLS-1$", "-\t\t\t\t\t\t\"\tinvocation stack trace:\"); //$NON-NLS-1$", "-\t\t\t\t\tnew Exception(\"<Fake exception>\").printStackTrace(System.out); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tJavaModelManager.getJavaModelManager().containerPut(project, containerPath, JavaModelManager.CONTAINER_INITIALIZATION_IN_PROGRESS); // avoid initialization cycles", "-\t\t\t\tboolean ok = false;", "-\t\t\t\ttry {", "-\t\t\t\t\t// let OperationCanceledException go through", "-\t\t\t\t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=59363)", "-\t\t\t\t\tinitializer.initialize(containerPath, project);", "-\t\t\t\t\t", "-\t\t\t\t\t// retrieve value (if initialization was successful)", "-\t\t\t\t\tcontainer = JavaModelManager.getJavaModelManager().containerGet(project, containerPath);", "-\t\t\t\t\tif (container == JavaModelManager.CONTAINER_INITIALIZATION_IN_PROGRESS) return null; // break cycle", "-\t\t\t\t\tok = true;", "-\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\tif (e instanceof JavaModelException) {", "-\t\t\t\t\t\tthrow (JavaModelException) e;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tthrow new JavaModelException(e);", "-\t\t\t\t\t}", "-\t\t\t\t} catch (RuntimeException e) {", "-\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE) {", "-\t\t\t\t\t\te.printStackTrace();", "-\t\t\t\t\t}", "-\t\t\t\t\tthrow e;", "-\t\t\t\t} catch (Error e) {", "-\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE) {", "-\t\t\t\t\t\te.printStackTrace();", "-\t\t\t\t\t}", "-\t\t\t\t\tthrow e;", "-\t\t\t\t} finally {", "-\t\t\t\t\tif (!ok) {", "-\t\t\t\t\t\tJavaModelManager.getJavaModelManager().containerPut(project, containerPath, null); // flush cache", "-\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE) {", "-\t\t\t\t\t\t\tif (container == JavaModelManager.CONTAINER_INITIALIZATION_IN_PROGRESS) {", "-\t\t\t\t\t\t\t\tUtil.verbose(", "-\t\t\t\t\t\t\t\t\t\"CPContainer INIT - FAILED (initializer did not initialize container)\\n\" + //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t\"\tproject: \" + project.getElementName() + '\\n' + //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t\"\tcontainer path: \" + containerPath + '\\n' + //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t\"\tinitializer: \" + initializer); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tUtil.verbose(", "-\t\t\t\t\t\t\t\t\t\"CPContainer INIT - FAILED (see exception above)\\n\" + //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t\"\tproject: \" + project.getElementName() + '\\n' + //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t\"\tcontainer path: \" + containerPath + '\\n' + //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t\"\tinitializer: \" + initializer); //$NON-NLS-1$", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "-\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t\tbuffer.append(\"CPContainer INIT - after resolution\\n\"); //$NON-NLS-1$", "-\t\t\t\t\tbuffer.append(\"\tproject: \" + project.getElementName() + '\\n'); //$NON-NLS-1$", "-\t\t\t\t\tbuffer.append(\"\tcontainer path: \" + containerPath + '\\n'); //$NON-NLS-1$", "-\t\t\t\t\tif (container != null){", "-\t\t\t\t\t\tbuffer.append(\"\tcontainer: \"+container.getDescription()+\" {\\n\"); //$NON-NLS-2$//$NON-NLS-1$", "-\t\t\t\t\t\tIClasspathEntry[] entries = container.getClasspathEntries();", "-\t\t\t\t\t\tif (entries != null){", "-\t\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++){", "-\t\t\t\t\t\t\t\tbuffer.append(\"\t\t\" + entries[i] + '\\n'); //$NON-NLS-1$", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbuffer.append(\"\t}\");//$NON-NLS-1$", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tbuffer.append(\"\tcontainer: {unbound}\");//$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tUtil.verbose(buffer.toString());", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "-\t\t\t\t\tUtil.verbose(", "-\t\t\t\t\t\t\"CPContainer INIT - no initializer found\\n\" + //$NON-NLS-1$", "-\t\t\t\t\t\t\"\tproject: \" + project.getElementName() + '\\n' + //$NON-NLS-1$", "-\t\t\t\t\t\t\"\tcontainer path: \" + containerPath); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\tIClasspathContainer container = JavaModelManager.getJavaModelManager().getClasspathContainer(containerPath, project);", "+\t\tif (container == JavaModelManager.CONTAINER_INITIALIZATION_IN_PROGRESS) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9580a806f412be61244b877f9ec112a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "2e8c81b48304c9e33747060a2a7fcd8295c64afe", "commitAfterChange": "50125dca81221f803e384aaa4267a637e226f1c2", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void performPreBuildCheck( \t\tIResourceDelta delta, \t\tIJavaElement parent)", "signatureAfterChange": " \tpublic void performPreBuildCheck( \t\tIResourceDelta delta, \t\tIJavaElement parent)", "diff": ["-\t\t\t\t\t/* check classpath property file change */", "-\t\t\t\t\tif (file.getName().equals(", "-\t\t\t\t\t\t\tproject.computeSharedPropertyFileName(", "-\t\t\t\t\t\t\t\tproject.getClasspathPropertyName()))) {", "-\t", "-\t\t\t\t\t\tswitch (delta.getKind()) {", "-\t\t\t\t\t\t\tcase IResourceDelta.REMOVED : // recreate one based on in-memory path", "-\t\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t\tproject.saveClasspath(project.getRawClasspath(), project.getOutputLocation());", "-\t\t\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\t\t\tif (project.getProject().isAccessible()) {", "-\t\t\t\t\t\t\t\t\t\tUtil.log(e, \"Could not save classpath for \"+ project.getPath()); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase IResourceDelta.CHANGED :", "-\t\t\t\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.CONTENT) == 0  // only consider content change", "-\t\t\t\t\t\t\t\t\t\t&& (delta.getFlags() & IResourceDelta.MOVED_FROM) == 0) // and also move and overide scenario (see http://dev.eclipse.org/bugs/show_bug.cgi?id=21420)", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase IResourceDelta.ADDED :", "-\t\t\t\t\t\t\t\t// check if any actual difference", "-\t\t\t\t\t\t\t\tproject.flushClasspathProblemMarkers(false, true);", "-\t\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t\t// force to (re)read the property file", "-\t\t\t\t\t\t\t\t\tIClasspathEntry[] fileEntries = null;", "-\t\t\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\t\t\tString fileClasspathString = project.loadClasspath();", "-\t\t\t\t\t\t\t\t\t\tif (fileClasspathString != null) {", "-\t\t\t\t\t\t\t\t\t\t\tfileEntries = project.readPaths(fileClasspathString);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t} catch(JavaModelException e) {", "-\t\t\t\t\t\t\t\t\t\tif (project.getProject().isAccessible()) {", "-\t\t\t\t\t\t\t\t\t\t\tUtil.log(e, ", "-\t\t\t\t\t\t\t\t\t\t\t\t\"Exception while retrieving \"+ project.getPath() //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t\t\t\t+\"/.classpath, ignore change\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tproject.createClasspathProblemMarker(", "-\t\t\t\t\t\t\t\t\t\t\tUtil.bind(\"classpath.cannotReadClasspathFile\", project.getElementName()), //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "-\t\t\t\t\t\t\t\t\t\t\tfalse,\t//  cycle error", "-\t\t\t\t\t\t\t\t\t\t\ttrue);\t//\tfile format error", "-\t\t\t\t\t\t\t\t\t} catch (IOException e) {", "-\t\t\t\t\t\t\t\t\t\tif (project.getProject().isAccessible()) {", "-\t\t\t\t\t\t\t\t\t\t\tUtil.log(e, ", "-\t\t\t\t\t\t\t\t\t\t\t\t\"Exception while retrieving \"+ project.getPath() //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t\t\t\t+\"/.classpath, ignore change\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tproject.createClasspathProblemMarker(", "-\t\t\t\t\t\t\t\t\t\t\tUtil.bind(\"classpath.cannotReadClasspathFile\", project.getElementName()), //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "-\t\t\t\t\t\t\t\t\t\t\tfalse,\t//  cycle error", "-\t\t\t\t\t\t\t\t\t\t\ttrue);\t//\tfile format error", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (fileEntries == null)", "-\t\t\t\t\t\t\t\t\t\tbreak; // could not read, ignore ", "-\t\t\t\t\t\t\t\t\tif (project.isClasspathEqualsTo(project.getRawClasspath(), project.getOutputLocation(), fileEntries))", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t", "-\t\t\t\t\t\t\t\t\t// will force an update of the classpath/output location based on the file information", "-\t\t\t\t\t\t\t\t\t// extract out the output location", "-\t\t\t\t\t\t\t\t\tIPath outputLocation = null;", "-\t\t\t\t\t\t\t\t\tif (fileEntries != null && fileEntries.length > 0) {", "-\t\t\t\t\t\t\t\t\t\tIClasspathEntry entry = fileEntries[fileEntries.length - 1];", "-\t\t\t\t\t\t\t\t\t\tif (entry.getContentKind() == ClasspathEntry.K_OUTPUT) {", "-\t\t\t\t\t\t\t\t\t\t\toutputLocation = entry.getPath();", "-\t\t\t\t\t\t\t\t\t\t\tIClasspathEntry[] copy = new IClasspathEntry[fileEntries.length - 1];", "-\t\t\t\t\t\t\t\t\t\t\tSystem.arraycopy(fileEntries, 0, copy, 0, copy.length);", "-\t\t\t\t\t\t\t\t\t\t\tfileEntries = copy;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t// restore output location\t\t\t\t", "-\t\t\t\t\t\t\t\t\tif (outputLocation == null) {", "-\t\t\t\t\t\t\t\t\t\toutputLocation = SetClasspathOperation.ReuseOutputLocation;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tproject.setRawClasspath(", "-\t\t\t\t\t\t\t\t\t\tfileEntries, ", "-\t\t\t\t\t\t\t\t\t\toutputLocation, ", "-\t\t\t\t\t\t\t\t\t\tnull, // monitor", "-\t\t\t\t\t\t\t\t\t\ttrue, // canChangeResource", "-\t\t\t\t\t\t\t\t\t\tfalse, // forceSave", "-\t\t\t\t\t\t\t\t\t\tproject.getResolvedClasspath(true), // ignoreUnresolvedVariable", "-\t\t\t\t\t\t\t\t\t\ttrue); // needValidation", "-\t\t\t\t\t\t\t\t} catch (RuntimeException e) {", "-\t\t\t\t\t\t\t\t\t// setRawClasspath might fire a delta, and a listener may throw an exception", "-\t\t\t\t\t\t\t\t\tif (project.getProject().isAccessible()) {", "-\t\t\t\t\t\t\t\t\t\tUtil.log(e, \"Could not set classpath for \"+ project.getPath()); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\t\t\t\t// happens if the .classpath could not be written to disk", "-\t\t\t\t\t\t\t\t\tif (project.getProject().isAccessible()) {", "-\t\t\t\t\t\t\t\t\t\tUtil.log(e, \"Could not set classpath for \"+ project.getPath()); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t", "-\t\t\t\t\t\t}", "+\t\t\t\t\t/* check classpath file change */", "+\t\t\t\t\tif (file.getName().equals(JavaProject.CLASSPATH_FILENAME)) {", "+\t\t\t\t\t\treconcileClasspathFileUpdate(delta, file, project);", "+\t\t\t\t\t\tbreak;", "+//\t\t\t\t\t/* check custom preference file change */", "+//\t\t\t\t\tif (file.getName().equals(JavaProject.PREF_FILENAME)) {", "+//\t\t\t\t\t\treconcilePreferenceFileUpdate(delta, file, project);", "+//\t\t\t\t\t\tbreak;", "+//\t\t\t\t\t}"]}], "num": 16006}
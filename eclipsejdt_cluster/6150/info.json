{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a53a746aa92a73c426c61c4cae8d99f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23e71916d2e4cc00619a45e084887a71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "4facfcdf4a36f611ae455f345faa2a13f779251b", "commitAfterChange": "9b4626a240c7fe9f3a95f4bc274592915f73c7ef", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(ISourceMethod sourceMethod, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(SourceMethodElementInfo sourceMethod, CompilationResult compilationResult)", "diff": ["-\tprivate AbstractMethodDeclaration convert(ISourceMethod sourceMethod, CompilationResult compilationResult) {", "+\tprivate AbstractMethodDeclaration convert(SourceMethodElementInfo sourceMethod, CompilationResult compilationResult) {", "+\t\tint modifiers = sourceMethod.getModifiers();", "-\t\t\tMethodDeclaration decl = new MethodDeclaration(compilationResult);", "-\t\t\t/* convert return type */", "-\t\t\tdecl.returnType =", "-\t\t\t\tcreateTypeReference(sourceMethod.getReturnTypeName(), start, end);", "-\t\t\tmethod = decl;", "+\t\t\tMethodDeclaration decl;", "+\t\t\tif (sourceMethod.isAnnotationMethod()) {", "+\t\t\t\tAnnotationMethodDeclaration annotationMethodDeclaration = new AnnotationMethodDeclaration(compilationResult);", "+", "+\t\t\t\t/* conversion of default value */", "+\t\t\t\tif ((this.flags & FIELD_INITIALIZATION) != 0) {", "+\t\t\t\t\tchar[] defaultValueSource = sourceMethod.getDefaultValueSource();", "+\t\t\t\t\tif (defaultValueSource != null) {", "+\t\t\t\t\t\tif (this.parser == null) {", "+\t\t\t\t\t\t\tthis.parser = new Parser(this.problemReporter, true);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// TODO (jerome) handle Annotation and MemberValusArrayInitializer)", "+\t\t\t\t\t\tExpression expression =  this.parser.parseExpression(defaultValueSource, 0, defaultValueSource.length, this.unit);", "+\t\t\t\t\t\tif (expression != null) {", "+\t\t\t\t\t\t\tannotationMethodDeclaration.defaultValue = expression;", "+\t\t\t\t\t\t\tmodifiers |= AccAnnotationDefault;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tdecl = annotationMethodDeclaration;", "+\t\t\t} else {", "+\t\t\t\tdecl = new MethodDeclaration(compilationResult);", "+\t\t\t}", "+\t\t\t", "+\t\t\t// convert return type", "+\t\t\tdecl.returnType = createTypeReference(sourceMethod.getReturnTypeName(), start, end);", "+\t\t\t", "+\t\t\t// type parameters", "+\t\t\t", "+\t\t\tmethod = decl;", "-\t\tint modifiers = sourceMethod.getModifiers();", "-\t\tif ((this.flags & LOCAL_TYPE) != 0 && sourceMethod instanceof SourceMethodElementInfo) {", "-\t\t\tIJavaElement[] children = ((SourceMethodElementInfo)sourceMethod).getChildren();", "+\t\tif ((this.flags & LOCAL_TYPE) != 0) {", "+\t\t\tIJavaElement[] children = sourceMethod.getChildren();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a86bd1aea540cf2917b6afcfee34bce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "f88c1fe220ded26227925e3745e5515c08409c5d", "commitAfterChange": "8f896a654035e16596d9bc3a2404427ff7b3145b", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tprivate boolean complete( \t\t\tASTNode astNode, \t\t\tASTNode astNodeParent, \t\t\tASTNode enclosingNode, \t\t\tCompilationUnitDeclaration compilationUnitDeclaration, \t\t\tBinding qualifiedBinding, \t\t\tScope scope, \t\t\tboolean insideTypeAnnotation)", "signatureAfterChange": "  \tprivate boolean complete( \t\t\tASTNode astNode, \t\t\tASTNode astNodeParent, \t\t\tASTNode enclosingNode, \t\t\tCompilationUnitDeclaration compilationUnitDeclaration, \t\t\tBinding qualifiedBinding, \t\t\tScope scope, \t\t\tboolean insideTypeAnnotation)", "diff": ["-\t\t\t\t\tthis.findEnumConstant(this.completionToken, (SwitchStatement) astNodeParent);", "+\t\t\t\t\tthis.findEnumConstantsFromSwithStatement(this.completionToken, (SwitchStatement) astNodeParent);", "+\t\t\t\tif (this.expectedTypesPtr > -1) {", "+\t\t\t\t\tthis.assistNodeIsEnum = true;", "+\t\t\t\t\tdone : for (int i = 0; i <= this.expectedTypesPtr; i++) {", "+\t\t\t\t\t\tif (!this.expectedTypes[i].isEnum()) {", "+\t\t\t\t\t\t\tthis.assistNodeIsEnum = false;", "+\t\t\t\t\t\t\tbreak done;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\t\t\tif (this.expectedTypesPtr > -1) {", "+\t\t\t\t\t\t\tthis.assistNodeIsEnum = true;", "+\t\t\t\t\t\t\tdone : for (int i = 0; i <= this.expectedTypesPtr; i++) {", "+\t\t\t\t\t\t\t\tif (!this.expectedTypes[i].isEnum()) {", "+\t\t\t\t\t\t\t\t\tthis.assistNodeIsEnum = false;", "+\t\t\t\t\t\t\t\t\tbreak done;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83ad56ab5b5d8becc0dd81e11bec2520", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/FactoryPathConfigurationBlock.java", "commitBeforeChange": "d2e007901d54a516821cedcfd5f65fdb2954f273", "commitAfterChange": "fa2cb5bc47f7fe5d18ae109d09f3bf4ba668083f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void buttonPressed(int index)", "signatureAfterChange": " \tpublic void buttonPressed(int index)", "diff": ["-\t\t// TODO Auto-generated method stub", "+\t\tif (index == IDX_ADDEXTJAR) { // add new", "+\t\t\tFactoryContainer[] newEntries= openExtJarFileDialog(null);", "+\t\t\tint insertAt;", "+\t\t\tList selectedElements= fFactoryPathList.getSelectedElements();", "+\t\t\tif (selectedElements.size() == 1) {", "+\t\t\t\tinsertAt= fFactoryPathList.getIndexOfElement(selectedElements.get(0)) + 1;", "+\t\t\t} else {", "+\t\t\t\tinsertAt= fFactoryPathList.getSize();", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < newEntries.length; ++i) {", "+\t\t\t\tfFactoryPathList.addElement(newEntries[i], insertAt + i);", "+\t\t\t\tfFactoryPathList.setChecked(newEntries[i], true);", "+\t\t\t}", "+\t\t}"]}], "num": 6150}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9082a562635540901709ca1a51b92c77", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "006dc60a70f8c20d8d3ef0e79ec22955", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "c62ecfd031507c11ea236866605fedd6f3a952c5", "commitAfterChange": "ded73445e8c5cf2db0a4abcc53e1680f02ae6cf7", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 337, "signatureBeforeChange": " public void testBug286601k()", "signatureAfterChange": " public void testBug330313_b286601_08()", "diff": ["-}", "-public void testBug286601k() {", "-\tthis.formatterPrefs.join_wrapped_lines = false;", "-\tthis.formatterPrefs.tab_char = DefaultCodeFormatterOptions.SPACE;", "-\tthis.formatterPrefs.alignment_for_expressions_in_array_initializer = DefaultCodeFormatterConstants.WRAP_ONE_PER_LINE;", "-\tsetUpBracesPreferences(DefaultCodeFormatterConstants.NEXT_LINE);", "-\tString source =", "-\t\t\"package massive;\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"public class X07 {\\n\" +", "-\t\t\"    private MinimizedFileSystemElement selectFiles(final Object rootFileSystemObject, final IImportStructureProvider structureProvider) {\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"        BusyIndicator.showWhile(getShell().getDisplay(), new Runnable() {\\n\" +", "-\t\t\"            public void run() {\\n\" +", "-\t\t\"                //Create the root element from the supplied file system object\\n\" +", "-\t\t\"            }\\n\" +", "-\t\t\"        });\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"        return null;\\n\" +", "-\t\t\"    }\\n\" +", "-\t\t\"}\\n\";", "-\tformatSource(source,", "-\t\t\"package massive;\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"public class X07\\n\" +", "-\t\t\"{\\n\" +", "-\t\t\"    private MinimizedFileSystemElement selectFiles(\\n\" +", "-\t\t\"            final Object rootFileSystemObject,\\n\" +", "-\t\t\"            final IImportStructureProvider structureProvider)\\n\" +", "-\t\t\"    {\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"        BusyIndicator.showWhile(getShell().getDisplay(), new Runnable()\\n\" +", "-\t\t\"        {\\n\" +", "-\t\t\"            public void run()\\n\" +", "-\t\t\"            {\\n\" +", "-\t\t\"                // Create the root element from the supplied file system object\\n\" +", "-\t\t\"            }\\n\" +", "-\t\t\"        });\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"        return null;\\n\" +", "-\t\t\"    }\\n\" +", "+}", "+public void testBug330313_b286601_08() {", "+\tthis.formatterPrefs.join_wrapped_lines = false;", "+\tthis.formatterPrefs.alignment_for_expressions_in_array_initializer = Alignment.M_ONE_PER_LINE_SPLIT;", "+\tsetUpBracesPreferences(DefaultCodeFormatterConstants.NEXT_LINE);", "+\tString source =", "+\t\t\"package b286601;\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"public class X08 {\\n\" + ", "+\t\t\"    private MinimizedFileSystemElement selectFiles(final Object rootFileSystemObject, final IImportStructureProvider structureProvider) {\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"        BusyIndicator.showWhile(getShell().getDisplay(), new Runnable() {\\n\" + ", "+\t\t\"            public void run() {\\n\" + ", "+\t\t\"                //Create the root element from the supplied file system object\\n\" + ", "+\t\t\"            }\\n\" + ", "+\t\t\"        });\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"        return null;\\n\" + ", "+\t\t\"    }\\n\" + ", "+\t\t\"}\\n\";", "+\tformatSource(source,", "+\t\t\"package b286601;\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"public class X08\\n\" + ", "+\t\t\"{\\n\" + ", "+\t\t\"\tprivate MinimizedFileSystemElement selectFiles(\\n\" + ", "+\t\t\"\t\t\tfinal Object rootFileSystemObject,\\n\" + ", "+\t\t\"\t\t\tfinal IImportStructureProvider structureProvider)\\n\" + ", "+\t\t\"\t{\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"\t\tBusyIndicator.showWhile(getShell().getDisplay(), new Runnable()\\n\" + ", "+\t\t\"\t\t{\\n\" + ", "+\t\t\"\t\t\tpublic void run()\\n\" + ", "+\t\t\"\t\t\t{\\n\" + ", "+\t\t\"\t\t\t\t// Create the root element from the supplied file system object\\n\" + ", "+\t\t\"\t\t\t}\\n\" + ", "+\t\t\"\t\t});\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"\t\treturn null;\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"}\\n\"", "+\t);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0141d810eae0f9847019458fd1f6192a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "3a514d6cf7a163df7c9aa1b24e69e8f3a5b39e3c", "commitAfterChange": "0aeaaba7ea908a19742d309ce070fd6d99b6c4d4", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void testBug47968type() throws CoreException", "signatureAfterChange": " \tpublic void testBug47968type() throws CoreException", "diff": ["-//\t\tJavaSearchResultCollector result = new JavaSearchResultCollector();", "-//\t\tresult.showAccuracy = true;", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [Bug47968] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [Bug47968] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [Bug47968] EXACT_MATCH\",", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s.y [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java j2.Bug47968s() [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [Bug47968] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j2/Bug47968s.java void j2.Bug47968s.bar() [Bug47968] EXACT_MATCH INSIDE_JAVADOC\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0899f7d4559696db9fd769a11a7ee230", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void testStringNoArgument07() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument07() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [Generic<Object, Exception, RuntimeException>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic<?, ?, ?>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [Generic<Object, Exception, RuntimeException>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [Generic<?, ?, ?>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [Generic<Object>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic<Exception>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic.MemberGeneric] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [Generic<Object>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [Generic<Exception>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [Generic<?>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [Generic<? extends Throwable>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [Generic<? super RuntimeException>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic.MemberGeneric] EXACT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [Generic<Object, Exception, RuntimeException>.MemberGeneric] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic<?, ?, ?>.MemberGeneric] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic.MemberGeneric] EXACT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [Generic<Object, Exception, RuntimeException>.MemberGeneric] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [Generic<?, ?, ?>.MemberGeneric] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic.MemberGeneric] EXACT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [Generic<Object>.MemberGeneric] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic<Exception>.MemberGeneric] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>.MemberGeneric] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>.MemberGeneric] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>.MemberGeneric] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic.MemberGeneric] EXACT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [Generic<Object>.MemberGeneric] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [Generic<Exception>.MemberGeneric] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [Generic<?>.MemberGeneric] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [Generic<? extends Throwable>.MemberGeneric] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [Generic<? super RuntimeException>.MemberGeneric] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0aa01db76931a18b4d00e2bd98d926e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void test022()", "signatureAfterChange": " public void test022()", "diff": ["-\t\t\"     0  new java/util/ArrayList [17]\\n\" + ", "+\t\t\"     0  new java.util.ArrayList [17]\\n\" + ", "-\t\t\"     4  invokespecial java/util/ArrayList.<init>()V [18]\\n\" + ", "+\t\t\"     4  invokespecial java.util.ArrayList() [18]\\n\" + ", "-\t\t\"    14  new java/lang/Integer [20]\\n\" + ", "+\t\t\"    14  new java.lang.Integer [20]\\n\" + ", "-\t\t\"    19  invokespecial java/lang/Integer.<init>(I)V [23]\\n\" + ", "-\t\t\"    22  invokevirtual java/util/ArrayList.add(Ljava/lang/Object;)Z [27]\\n\" + ", "+\t\t\"    19  invokespecial java.lang.Integer(int) [23]\\n\" + ", "+\t\t\"    22  invokevirtual java.util.ArrayList.add(java.lang.Object) : boolean  [27]\\n\" + ", "-\t\t\"    38  invokevirtual java/util/ArrayList.iterator()Ljava/util/Iterator; [31]\\n\" + ", "-\t\t\"    41  astore [local_4]\\n\" + ", "+\t\t\"    38  invokevirtual java.util.ArrayList.iterator() : java.util.Iterator  [31]\\n\" + ", "+\t\t\"    41  astore 4\\n\" + ", "-\t\t\"    46  aload [local_4]\\n\" + ", "-\t\t\"    48  invokeinterface java/util/Iterator.next()Ljava/lang/Object; [37] [nargs: 1]\\n\" + ", "-\t\t\"    53  checkcast java/lang/Integer [20]\\n\" + ", "+\t\t\"    46  aload 4\\n\" + ", "+\t\t\"    48  invokeinterface java.util.Iterator.next() : java.lang.Object  [37] [nargs: 1]\\n\" + ", "+\t\t\"    53  checkcast java.lang.Integer [20]\\n\" + ", "-\t\t\"    59  invokevirtual java/lang/Integer.intValue()I [41]\\n\" + ", "+\t\t\"    59  invokevirtual java.lang.Integer.intValue() : int  [41]\\n\" + ", "-\t\t\"    64  aload [local_4]\\n\" + ", "-\t\t\"    66  invokeinterface java/util/Iterator.hasNext()Z [45] [nargs: 1]\\n\" + ", "+\t\t\"    64  aload 4\\n\" + ", "+\t\t\"    66  invokeinterface java.util.Iterator.hasNext() : boolean  [45] [nargs: 1]\\n\" + ", "-\t\t\"    74  getstatic java/lang/System.out Ljava/io/PrintStream; [51]\\n\" + ", "+\t\t\"    74  getstatic java.lang.System.out : java.io.PrintStream [51]\\n\" + ", "-\t\t\"    78  invokevirtual java/io/PrintStream.println(I)V [56]\\n\" + ", "+\t\t\"    78  invokevirtual java.io.PrintStream.println(int) : void  [56]\\n\" + ", "-\t\t\"        [pc: 0, pc: 82] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 8, pc: 82] local: arrayList index: 1 type: Ljava/util/ArrayList;\\n\" + ", "-\t\t\"        [pc: 10, pc: 35] local: i index: 2 type: I\\n\" + ", "-\t\t\"        [pc: 37, pc: 82] local: sum index: 2 type: I\\n\" + ", "-\t\t\"        [pc: 57, pc: 74] local: e index: 3 type: Ljava/lang/Integer;\\n\" + ", "+\t\t\"        [pc: 0, pc: 82] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 8, pc: 82] local: arrayList index: 1 type: java.util.ArrayList\\n\" + ", "+\t\t\"        [pc: 10, pc: 35] local: i index: 2 type: int\\n\" + ", "+\t\t\"        [pc: 37, pc: 82] local: sum index: 2 type: int\\n\" + ", "+\t\t\"        [pc: 57, pc: 74] local: e index: 3 type: java.lang.Integer\\n\" + ", "-\t\t\"        [pc: 8, pc: 82] local: arrayList index: 1 type: Ljava/util/ArrayList<Ljava/lang/Integer;>;\\n\";", "+\t\t\"        [pc: 8, pc: 82] local: arrayList index: 1 type: java.util.ArrayList<java.lang.Integer>\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "121cdde3df0be09d61f996875734861e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 153, "methodNumberAfterChange": 153, "signatureBeforeChange": " \tpublic void test048d()", "signatureAfterChange": " \tpublic void test048d()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X5.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic Object foo(I<String> z) { return null; }\\n\" + ", "+\t\t\t\"\t              ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(I<String>) of type X5 has the same erasure as foo(I<? extends T>) of type Y<T> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+/* javac 7", "+X.java:2: name clash: foo(I<String>) in X5 and foo(I<? extends T>) in Y have the", "+ same erasure, yet neither overrides the other", "+    public Object foo(I<String> z) { return null; }", "+                  ^", "+  where T is a type-variable:", "+    T extends Object declared in class Y", "+1 error", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "187f619db142596169f8cf3a8c03584b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void testStringNoArgument05() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument05() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_obj [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_exc [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_thr [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_run [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_obj [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_exc [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_thr [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_run [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_thr [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_run [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_thr [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_run [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [GenericMember] COMPATIBLE_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [GenericMember] EQUIVALENT_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1963a36ef0e5eff0184e9103803d2405", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 331, "methodNumberAfterChange": 332, "signatureBeforeChange": " public void testBug330313_wksp1_53_njl_bnl()", "signatureAfterChange": " public void testBug330313_wksp1_53_njl_bnl()", "diff": ["-\t\t\"\t\t\t{ 24, 15 } },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 24, 15 } },\\n\" + ", "-\t\t\"\t\t\t{ 8, 18 },\\n\" + ", "-\t\t\"\t\t\t{ 15, 64 },\\n\" + ", "-\t\t\"\t\t\t{ 23, 16 },\\n\" + ", "-\t\t\"\t\t\t{ 24, 17 },\\n\" + ", "-\t\t\"\t\t\t{ 55, 0 } },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 8, 18 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 15, 64 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 23, 16 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 24, 17 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 55, 0 } },\\n\" + ", "-\t\t\"\t\t\t{/* EOL */\\n\" + ", "-\t\t\"\t\t\t{ 0, -1 },\\n\" + ", "-\t\t\"\t\t\t{ 8, 1792 },\\n\" + ", "-\t\t\"\t\t\t{ 23, 24 },\\n\" + ", "-\t\t\"\t\t\t{ 24, 25 },\\n\" + ", "-\t\t\"\t\t\t{ 40, 23 },\\n\" + ", "-\t\t\"\t\t\t{ 55, 22 },\\n\" + ", "-\t\t\"\t\t\t{ 103, 19 },\\n\" + ", "-\t\t\"\t\t\t{ 104, 20 },\\n\" + ", "-\t\t\"\t\t\t{ 108, 21 },\\n\" + ", "-\t\t\"\t\t\t{ 12, 1856 },\\n\" + ", "-\t\t\"\t\t\t{ 13, 1920 } },\\n\" + ", "-\t\t\"\t};\\n\" + ", "+\t\t\"\t\t\t{\\n\" + ", "+\t\t\"\t\t\t\t\t/* EOL */{ 0, -1 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 8, 1792 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 23, 24 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 24, 25 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 40, 23 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 55, 22 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 103, 19 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 104, 20 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 108, 21 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 12, 1856 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 13, 1920 } }, };\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "236197ea0da2cd4c69c2c36ac0f5cddd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 725, "methodNumberAfterChange": 725, "signatureBeforeChange": " public void test0706a()", "signatureAfterChange": " public void test0706a()", "diff": ["-\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return;", "-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "-\t\t\"\tAA<Object> res1 = bb.test();\\n\" +", "-\t\t\"\t                     ^^^^\\n\" +", "-\t\t\"The method test() is ambiguous for the type BB\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 5)\\n\" +", "-\t\t\"\tAA res3 = bb.test();\\n\" +", "-\t\t\"\t^^\\n\" +", "-\t\t\"AA is a raw type. References to generic type AA<T> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 5)\\n\" +", "-\t\t\"\tAA res3 = bb.test();\\n\" +", "-\t\t\"\t             ^^^^\\n\" +", "-\t\t\"The method test() is ambiguous for the type BB\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tAA<Object> res1 = bb.test();\\n\" + ", "+\t\t\"\t                     ^^^^\\n\" + ", "+\t\t\"The method test() is ambiguous for the type BB\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tAA res3 = bb.test();\\n\" + ", "+\t\t\"\t^^\\n\" + ", "+\t\t\"AA is a raw type. References to generic type AA<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tAA res3 = bb.test();\\n\" + ", "+\t\t\"\t             ^^^^\\n\" + ", "+\t\t\"The method test() is ambiguous for the type BB\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\"\tclass BB extends AA<CC> { <U> BB test() {return null;} }\\n\" + ", "+\t\t\"\t                                 ^^^^^^\\n\" + ", "+\t\t\"Name clash: The method test() of type BB has the same erasure as test() of type AA<T> but does not override it\\n\" + ", "-\t\t// 4: reference to test is ambiguous, both method test() in AA<CC> and method <U>test() in BB match", "-\t\t// 5: reference to test is ambiguous, both method test() in AA<CC> and method <U>test() in BB match", "+/*", "+X.java:4: reference to test is ambiguous, both method test() in AA and method <U>test() in BB match", "+                AA<Object> res1 = bb.test();", "+                                    ^", "+  where U is a type-variable:", "+    U extends Object declared in method <U>test()", "+X.java:5: reference to test is ambiguous, both method test() in AA and method <U>test() in BB match", "+                AA res3 = bb.test();", "+                            ^", "+  where U is a type-variable:", "+    U extends Object declared in method <U>test()", "+X.java:9: name clash: <U>test() in BB and test() in AA have the same erasure, yet neither overrides the other", "+class BB extends AA<CC> { <U> BB test() {return null;} }", "+                                 ^", "+  where U is a type-variable:", "+    U extends Object declared in method <U>test()", "+3 errors", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ec2f47ec8a3631ada7411535f6cd60b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void testStringParameterizedMultipleArguments01() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedMultipleArguments01() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R1.java [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R1.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_wld [Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_wld [Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_wld [Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_wld [Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] COMPATIBLE_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EQUIVALENT_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2eef8a3f675d158b3d70054d1532f5b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tpublic void testStringNestedSingleArgument03() throws CoreException", "signatureAfterChange": " \tpublic void testStringNestedSingleArgument03() throws CoreException", "diff": ["-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_wld [GS<GM<?, ?, ?>.Generic<?, ?, ?>>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GS<GM<GM<?, ?, ?>.Generic<?,?,?>,GM<?, ?, ?>.Generic<?,?,?>,GM<?, ?, ?>.Generic<?,?,?>>.Generic<?,?,?>>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_obj [GS<GM<Object, Exception, RuntimeException>.Generic<Object, Exception, RuntimeException>>.Generic<Exception>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_wld [GS<?>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_wld [GS<?>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_wld [GS<?>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_www [GS<?>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_www [GS<GS<?>.Generic<?>>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_www [GS<?>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_www [GS<GS<GS<?>.Generic<?>>.Generic<?>>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_www [GS<GS<?>.Generic<?>>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_www [GS<?>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_obj [GS<Object>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_obj [GS<? extends Throwable>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_obj [GS<? super RuntimeException>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_wld [GS<g3.t.def.GM<?, ?, ?>.Generic<?, ?, ?>>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [GS<g3.t.def.GM<g3.t.def.GM<?, ?, ?>.Generic<?,?,?>,g3.t.def.GM<?, ?, ?>.Generic<?,?,?>,g3.t.def.GM<?, ?, ?>.Generic<?,?,?>>.Generic<?,?,?>>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_obj [GS<g3.t.def.GM<Object, Exception, RuntimeException>.Generic<Object, Exception, RuntimeException>>.Generic<Exception>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_wld [GS<?>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_wld [GS<?>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_wld [GS<?>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_www [GS<?>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_www [GS<g3.t.def.GS<?>.Generic<?>>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_www [GS<?>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_www [GS<g3.t.def.GS<g3.t.def.GS<?>.Generic<?>>.Generic<?>>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_www [GS<g3.t.def.GS<?>.Generic<?>>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_www [GS<?>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_obj [GS<Object>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_obj [GS<? extends Throwable>.Generic<?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_obj [GS<? super RuntimeException>.Generic<?>] COMPATIBLE_MATCH\",", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_wld [GS<GM<?, ?, ?>.Generic<?, ?, ?>>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GS<GM<GM<?, ?, ?>.Generic<?,?,?>,GM<?, ?, ?>.Generic<?,?,?>,GM<?, ?, ?>.Generic<?,?,?>>.Generic<?,?,?>>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_obj [GS<GM<Object, Exception, RuntimeException>.Generic<Object, Exception, RuntimeException>>.Generic<Exception>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_wld [GS<?>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_wld [GS<?>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_wld [GS<?>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_www [GS<?>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_www [GS<GS<?>.Generic<?>>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_www [GS<?>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_www [GS<GS<GS<?>.Generic<?>>.Generic<?>>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_www [GS<GS<?>.Generic<?>>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_www [GS<?>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_obj [GS<Object>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_obj [GS<? extends Throwable>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_obj [GS<? super RuntimeException>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_wld [GS<g3.t.def.GM<?, ?, ?>.Generic<?, ?, ?>>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [GS<g3.t.def.GM<g3.t.def.GM<?, ?, ?>.Generic<?,?,?>,g3.t.def.GM<?, ?, ?>.Generic<?,?,?>,g3.t.def.GM<?, ?, ?>.Generic<?,?,?>>.Generic<?,?,?>>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_obj [GS<g3.t.def.GM<Object, Exception, RuntimeException>.Generic<Object, Exception, RuntimeException>>.Generic<Exception>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_wld [GS<?>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_wld [GS<?>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_wld [GS<?>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_www [GS<?>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_www [GS<g3.t.def.GS<?>.Generic<?>>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_www [GS<?>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_www [GS<g3.t.def.GS<g3.t.def.GS<?>.Generic<?>>.Generic<?>>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_www [GS<g3.t.def.GS<?>.Generic<?>>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_www [GS<?>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_obj [GS<Object>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_obj [GS<? extends Throwable>.Generic<?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_obj [GS<? super RuntimeException>.Generic<?>] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31985b25811e464e7bc17851091ad8cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void testElementPatternNestedParam05() throws CoreException", "signatureAfterChange": " \tpublic void testTypeNestedMultipleArguments01() throws CoreException", "diff": ["-\tpublic void testElementPatternNestedParam05() throws CoreException {", "+\t// Source type pattern on nested multiple type arguments", "+\tpublic void testTypeNestedMultipleArguments01() throws CoreException {", "-\t\t\t\"src/g3/t/ref/R1.java [g3.t.def.GM] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_wld [GM] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_obj [GM] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_wld [GM] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_www [GM] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_obj [GM] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_wld [g3.t.def.GM] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [g3.t.def.GM] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [g3.t.def.GM] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [g3.t.def.GM] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [g3.t.def.GM] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_obj [g3.t.def.GM] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_wld [g3.t.def.GM] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_www [g3.t.def.GM] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_obj [g3.t.def.GM] EXACT_MATCH\",", "+\t\t\t\"src/g3/t/ref/R1.java [g3.t.def.GM] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_wld [GM] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_www [GM] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgsm_obj [GM] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_wld [GM] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_www [GM] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.sgms_obj [GM] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_wld [g3.t.def.GM] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [g3.t.def.GM] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [g3.t.def.GM] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [g3.t.def.GM] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_www [g3.t.def.GM] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgsm_obj [g3.t.def.GM] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_wld [g3.t.def.GM] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_www [g3.t.def.GM] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R1.java g3.t.ref.R1.qgms_obj [g3.t.def.GM] ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "326762f71c3d9ed0b12936c68f0cb13b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void test007()", "signatureAfterChange": " public void test007()", "diff": ["-\t\t\"     2  newarray #10 int\\n\" + ", "+\t\t\"     2  newarray int [10]\\n\" + ", "-\t\t\"    47  astore_2\\n\" + ", "-\t\t\"    48  aload_2\\n\" + ", "-\t\t\"    49  astore 6\\n\" + ", "+\t\t\"    47  astore_2 [tab]\\n\" + ", "+\t\t\"    48  aload_2 [tab]\\n\" + ", "+\t\t\"    49  astore [local_6]\\n\" + ", "-\t\t\"    52  istore 4\\n\" + ", "-\t\t\"    54  aload 6\\n\" + ", "+\t\t\"    52  istore [local_4]\\n\" + ", "+\t\t\"    54  aload [local_6]\\n\" + ", "-\t\t\"    57  istore 5\\n\" + ", "+\t\t\"    57  istore [local_5]\\n\" + ", "-\t\t\"    62  aload 6\\n\" + ", "-\t\t\"    64  iload 4\\n\" + ", "+\t\t\"    62  aload [local_6]\\n\" + ", "+\t\t\"    64  iload [local_4]\\n\" + ", "-\t\t\"    67  istore_3\\n\" + ", "-\t\t\"    68  iload_3\\n\" + ", "-\t\t\"    69  istore_1\\n\" + ", "-\t\t\"    70  iinc 4 1\\n\" + ", "-\t\t\"    73  iload 4\\n\" + ", "-\t\t\"    75  iload 5\\n\" + ", "+\t\t\"    67  istore_3 [e]\\n\" + ", "+\t\t\"    68  iload_3 [e]\\n\" + ", "+\t\t\"    69  istore_1 [i]\\n\" + ", "+\t\t\"    70  iinc 4 1 [local_4]\\n\" + ", "+\t\t\"    73  iload [local_4]\\n\" + ", "+\t\t\"    75  iload [local_5]\\n\" + ", "-\t\t\"    80  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    83  ldc #23 <String \\\"SUCCESS\\\">\\n\" + ", "-\t\t\"    85  invokevirtual #29 <Method java/io/PrintStream.println(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    80  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    83  ldc <String \\\"SUCCESS\\\"> [23]\\n\" + ", "+\t\t\"    85  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [29]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35ad0f65181d5cfa3b72e07276ed610c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void test005()", "signatureAfterChange": " \tpublic void test005()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return;", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\"\tnew X().foo();\\n\" +", "-\t\t\t\"\t        ^^^\\n\" +", "-\t\t\t\"The method foo() is ambiguous for the type X\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\t<S extends A> void foo() { }\\n\" + ", "+\t\t\t\"\t                   ^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\t<N extends B> N foo() { return null; }\\n\" + ", "+\t\t\t\"\t                ^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+/* javac 7", "+X.java:3: name clash: <N>foo() and <S>foo() have the same erasure", "+                 <N extends B> N foo() { return null; }", "+                                 ^", "+  where N,S are type-variables:", "+    N extends B declared in method <N>foo()", "+    S extends A declared in method <S>foo()", "+1 error", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "367ab3cc74472d997c48a597a9e242ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void testBug95521()", "signatureAfterChange": " \tpublic void testBug95521()", "diff": ["-\t\t\t\"1. ERROR in test\\\\X.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\r\\n\" + ", "+\t\t\t\"1. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\n\" + ", "-\t\t\t\"2. ERROR in test\\\\X.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\r\\n\" + ", "+\t\t\t\"2. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\n\" + ", "-\t\t\t\"3. ERROR in test\\\\X.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\r\\n\" + ", "+\t\t\t\"3. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\n\" + ", "-\t\t\t\"4. ERROR in test\\\\X.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\r\\n\" + ", "+\t\t\t\"4. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\n\" + ", "-\t\t\t\"5. ERROR in test\\\\X.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\r\\n\" + ", "+\t\t\t\"5. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\n\" + ", "-\t\t\t\"6. ERROR in test\\\\X.java (at line 15)\\r\\n\" + ", "-\t\t\t\"\t* @param <T>\\r\\n\" + ", "+\t\t\t\"6. ERROR in test\\\\X.java (at line 15)\\n\" + ", "+\t\t\t\"\t* @param <T>\\n\" + ", "-\t\t\t\"7. ERROR in test\\\\X.java (at line 19)\\r\\n\" + ", "-\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\r\\n\" + ", "+\t\t\t\"7. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\n\" + ", "-\t\t\t\"8. ERROR in test\\\\X.java (at line 19)\\r\\n\" + ", "-\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\r\\n\" + ", "-\t\t\t\"\t                            ^\\n\" + ", "-\t\t\t\"T cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"9. ERROR in test\\\\X.java (at line 19)\\r\\n\" + ", "-\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\r\\n\" + ", "+\t\t\t\"8. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\n\" + ", "-\t\t\t\"10. ERROR in test\\\\X.java (at line 19)\\r\\n\" + ", "-\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\r\\n\" + ", "+\t\t\t\"9. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\n\" + ", "+\t\t\t\"\t                            ^\\n\" + ", "+\t\t\t\"T cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\n\" + ", "-\t\t\t\"11. ERROR in test\\\\X.java (at line 19)\\r\\n\" + ", "-\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\r\\n\" + ", "+\t\t\t\"11. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\n\" + ", "-\t\t\t\"12. ERROR in test\\\\X.java (at line 22)\\r\\n\" + ", "-\t\t\t\"\t* @param <T>\\r\\n\" + ", "+\t\t\t\"12. ERROR in test\\\\X.java (at line 22)\\n\" + ", "+\t\t\t\"\t* @param <T>\\n\" + ", "-\t\t\t\"13. ERROR in test\\\\X.java (at line 24)\\r\\n\" + ", "-\t\t\t\"\tclass G<T> {}\\r\\n\" + ", "+\t\t\t\"13. ERROR in test\\\\X.java (at line 24)\\n\" + ", "+\t\t\t\"\tclass G<T> {}\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c9134f00759735477f5bcc0fe83a729", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void test021()", "signatureAfterChange": " public void test021()", "diff": ["-\t\t\"      2  newarray #10 int\\n\" + ", "+\t\t\"      2  newarray int [10]\\n\" + ", "-\t\t\"     47  astore_1\\n\" + ", "+\t\t\"     47  astore_1 [tab]\\n\" + ", "-\t\t\"     49  istore_2\\n\" + ", "+\t\t\"     49  istore_2 [sum]\\n\" + ", "-\t\t\"     51  istore_3\\n\" + ", "-\t\t\"     52  iinc 3 1\\n\" + ", "-\t\t\"     55  aload_1\\n\" + ", "-\t\t\"     56  astore 7\\n\" + ", "+\t\t\"     51  istore_3 [i]\\n\" + ", "+\t\t\"     52  iinc 3 1 [i]\\n\" + ", "+\t\t\"     55  aload_1 [tab]\\n\" + ", "+\t\t\"     56  astore [local_7]\\n\" + ", "-\t\t\"     59  istore 5\\n\" + ", "-\t\t\"     61  aload 7\\n\" + ", "+\t\t\"     59  istore [local_5]\\n\" + ", "+\t\t\"     61  aload [local_7]\\n\" + ", "-\t\t\"     64  istore 6\\n\" + ", "+\t\t\"     64  istore [local_6]\\n\" + ", "-\t\t\"     69  aload 7\\n\" + ", "-\t\t\"     71  iload 5\\n\" + ", "+\t\t\"     69  aload [local_7]\\n\" + ", "+\t\t\"     71  iload [local_5]\\n\" + ", "-\t\t\"     74  istore 4\\n\" + ", "-\t\t\"     76  iload_2\\n\" + ", "-\t\t\"     77  iload 4\\n\" + ", "+\t\t\"     74  istore [e]\\n\" + ", "+\t\t\"     76  iload_2 [sum]\\n\" + ", "+\t\t\"     77  iload [e]\\n\" + ", "-\t\t\"     80  istore_2\\n\" + ", "-\t\t\"     81  iload_3\\n\" + ", "+\t\t\"     80  istore_2 [sum]\\n\" + ", "+\t\t\"     81  iload_3 [i]\\n\" + ", "-\t\t\"     89  iload 4\\n\" + ", "+\t\t\"     89  iload [e]\\n\" + ", "-\t\t\"     98  iinc 5 1\\n\" + ", "-\t\t\"    101  iload 5\\n\" + ", "-\t\t\"    103  iload 6\\n\" + ", "+\t\t\"     98  iinc 5 1 [local_5]\\n\" + ", "+\t\t\"    101  iload [local_5]\\n\" + ", "+\t\t\"    103  iload [local_6]\\n\" + ", "-\t\t\"    111  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    114  iload_2\\n\" + ", "-\t\t\"    115  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\"    111  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    114  iload_2 [sum]\\n\" + ", "+\t\t\"    115  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f6ce96e48b32027a49176d5284605b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tpublic void testStringPatternAnyStrings04() throws CoreException", "signatureAfterChange": " \tpublic void testStringAnyStrings04() throws CoreException", "diff": ["-\tpublic void testStringPatternAnyStrings04() throws CoreException {", "+\tpublic void testStringAnyStrings04() throws CoreException {", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Member] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Member] COMPATIBLE_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40fa148755f3da4bce20395e849884d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void testSinglePatternSimpleName08() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument08() throws CoreException", "diff": ["-\tpublic void testSinglePatternSimpleName08() throws CoreException {", "+\tpublic void testStringNoArgument08() throws CoreException {", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_obj [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_exc [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_thr [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_run [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_obj [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_exc [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_thr [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_run [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_thr [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_run [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_thr [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_run [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [NonGeneric.GenericMember] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45593bf99797a9aab28702bc34ddb03f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1037, "methodNumberAfterChange": 1037, "signatureBeforeChange": " public void test1013()", "signatureAfterChange": " public void test1013()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 14)\\r\\n\" +", "-\t\t\"\tvoid foo(List l1, List<X> l2) {\\r\\n\" +", "-\t\t\"\t         ^^^^\\n\" +", "-\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 15)\\r\\n\" +", "-\t\t\"\tX x = bar1(l1, l2);\\r\\n\" +", "-\t\t\"\t      ^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation bar1(List, List) of the generic method bar1(List<T>, List<T>) of type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 15)\\r\\n\" +", "-\t\t\"\tX x = bar1(l1, l2);\\r\\n\" +", "-\t\t\"\t      ^^^^^^^^^^^^\\n\" +", "-\t\t\"Type mismatch: cannot convert from Object to X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in X.java (at line 15)\\r\\n\" +", "-\t\t\"\tX x = bar1(l1, l2);\\r\\n\" +", "-\t\t\"\t           ^^\\n\" +", "-\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<T>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. WARNING in X.java (at line 17)\\r\\n\" +", "-\t\t\"\tList<X> lx = bar2(l1, l2);\\r\\n\" +", "-\t\t\"\t             ^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation bar2(List, List) of the generic method bar2(List<T>, List<T>) of type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"6. WARNING in X.java (at line 17)\\r\\n\" +", "-\t\t\"\tList<X> lx = bar2(l1, l2);\\r\\n\" +", "-\t\t\"\t             ^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<X>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"7. WARNING in X.java (at line 17)\\r\\n\" +", "-\t\t\"\tList<X> lx = bar2(l1, l2);\\r\\n\" +", "-\t\t\"\t                  ^^\\n\" +", "-\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<T>\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\"\tvoid foo(List l1, List<X> l2) {\\n\" + ", "+\t\t\"\t         ^^^^\\n\" + ", "+\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\"\tX x = bar1(l1, l2);\\n\" + ", "+\t\t\"\t      ^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation bar1(List, List<X>) of the generic method bar1(List<T>, List<T>) of type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\"\tX x = bar1(l1, l2);\\n\" + ", "+\t\t\"\t      ^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Object to X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\"\tX x = bar1(l1, l2);\\n\" + ", "+\t\t\"\t           ^^\\n\" + ", "+\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<X>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 17)\\n\" + ", "+\t\t\"\tList<X> lx = bar2(l1, l2);\\n\" + ", "+\t\t\"\t             ^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation bar2(List, List<X>) of the generic method bar2(List<T>, List<T>) of type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in X.java (at line 17)\\n\" + ", "+\t\t\"\tList<X> lx = bar2(l1, l2);\\n\" + ", "+\t\t\"\t             ^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<X>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"7. WARNING in X.java (at line 17)\\n\" + ", "+\t\t\"\tList<X> lx = bar2(l1, l2);\\n\" + ", "+\t\t\"\t                  ^^\\n\" + ", "+\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<X>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47c8454c4422e0155ead2ba1efdbbfe6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic void testStringNoArgument06() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument06() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Generic<Object, Exception, RuntimeException>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Generic<Exception, Exception, RuntimeException>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Generic<?, ?, ?>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic.Member] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Generic<Object, Exception, RuntimeException>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Generic<Exception, Exception, RuntimeException>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Generic<?, ?, ?>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Generic<Object>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Generic<Exception>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic<?>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic<? extends Throwable>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic<? super RuntimeException>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic.Member] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Generic<Object>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Generic<Exception>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Generic<?>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Generic<? extends Throwable>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic<? super RuntimeException>.Member] EQUIVALENT_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic.Member] EXACT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Generic<Object, Exception, RuntimeException>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Generic<Exception, Exception, RuntimeException>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Generic<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic.Member] EXACT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Generic<Object, Exception, RuntimeException>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Generic<Exception, Exception, RuntimeException>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Generic<?, ?, ?>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic.Member] EXACT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Generic<Object>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Generic<Exception>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic<?>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic<? extends Throwable>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic<? super RuntimeException>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic.Member] EXACT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Generic<Object>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Generic<Exception>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Generic<?>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Generic<? extends Throwable>.Member] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic<? super RuntimeException>.Member] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48f78cc3342cb00cb248db1557091920", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic void testStringAnyStrings04() throws CoreException", "signatureAfterChange": " \tpublic void testStringAnyStrings04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Member] COMPATIBLE_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Member] EQUIVALENT_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a363968e5e357b79b22b8859ed82901", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void testStringNoArgument04() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric] COMPATIBLE_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b4f01a40f1ae4537e8d3c88db8944fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": " public void testTypeRefGenericsTest07_TypeArgument() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericsTest07_TypeArgument() throws CoreException", "diff": ["-\t\t\"src/test07/Test.java test07.Test.y1 [\tY<\ufffd|Y|\ufffd<Exception>> y1;@39] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.y1 [\tY<Y<\ufffd|Exception|\ufffd>> y1;@41] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.y2 [\tY<\ufffd|X|\ufffd<Object, String, Exception>> y2;@60] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.y2 [\tY<X<\ufffd|Object|\ufffd, String, Exception>> y2;@62] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.y2 [\tY<X<Object, \ufffd|String|\ufffd, Exception>> y2;@70] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.y2 [\tY<X<Object, String, \ufffd|Exception|\ufffd>> y2;@78] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.x1 [\tX<\ufffd|Y|\ufffd<Object>, Y<String>, Y<Exception>> x1;@97] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.x1 [\tX<Y<\ufffd|Object|\ufffd>, Y<String>, Y<Exception>> x1;@99] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.x1 [\tX<Y<Object>, \ufffd|Y|\ufffd<String>, Y<Exception>> x1;@108] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.x1 [\tX<Y<Object>, Y<\ufffd|String|\ufffd>, Y<Exception>> x1;@110] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.x1 [\tX<Y<Object>, Y<String>, \ufffd|Y|\ufffd<Exception>> x1;@119] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.x1 [\tX<Y<Object>, Y<String>, Y<\ufffd|Exception|\ufffd>> x1;@121] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.x2 [\tX<\ufffd|X|\ufffd<Object, Object, Object>, X<String, String, String>, X<Exception, Exception, Exception>> x2;@140] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<\ufffd|Object|\ufffd, Object, Object>, X<String, String, String>, X<Exception, Exception, Exception>> x2;@142] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<Object, \ufffd|Object|\ufffd, Object>, X<String, String, String>, X<Exception, Exception, Exception>> x2;@150] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<Object, Object, \ufffd|Object|\ufffd>, X<String, String, String>, X<Exception, Exception, Exception>> x2;@158] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<Object, Object, Object>, \ufffd|X|\ufffd<String, String, String>, X<Exception, Exception, Exception>> x2;@167] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<Object, Object, Object>, X<\ufffd|String|\ufffd, String, String>, X<Exception, Exception, Exception>> x2;@169] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<Object, Object, Object>, X<String, \ufffd|String|\ufffd, String>, X<Exception, Exception, Exception>> x2;@177] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<Object, Object, Object>, X<String, String, \ufffd|String|\ufffd>, X<Exception, Exception, Exception>> x2;@185] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<Object, Object, Object>, X<String, String, String>, \ufffd|X|\ufffd<Exception, Exception, Exception>> x2;@194] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<Object, Object, Object>, X<String, String, String>, X<\ufffd|Exception|\ufffd, Exception, Exception>> x2;@196] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<Object, Object, Object>, X<String, String, String>, X<Exception, \ufffd|Exception|\ufffd, Exception>> x2;@207] EXACT_MATCH\\n\" +", "-\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<Object, Object, Object>, X<String, String, String>, X<Exception, Exception, \ufffd|Exception|\ufffd>> x2;@218] EXACT_MATCH\"", "+\t\t\"src/test07/Test.java test07.Test.y1 [\tY<!|Y|!<Exception>> y1;@39] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.y1 [\tY<Y<!|Exception|!>> y1;@41] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.y2 [\tY<!|X|!<Object, String, Exception>> y2;@60] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.y2 [\tY<X<!|Object|!, String, Exception>> y2;@62] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.y2 [\tY<X<Object, !|String|!, Exception>> y2;@70] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.y2 [\tY<X<Object, String, !|Exception|!>> y2;@78] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.x1 [\tX<!|Y|!<Object>, Y<String>, Y<Exception>> x1;@97] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.x1 [\tX<Y<!|Object|!>, Y<String>, Y<Exception>> x1;@99] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.x1 [\tX<Y<Object>, !|Y|!<String>, Y<Exception>> x1;@108] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.x1 [\tX<Y<Object>, Y<!|String|!>, Y<Exception>> x1;@110] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.x1 [\tX<Y<Object>, Y<String>, !|Y|!<Exception>> x1;@119] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.x1 [\tX<Y<Object>, Y<String>, Y<!|Exception|!>> x1;@121] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.x2 [\tX<!|X|!<Object, Object, Object>, X<String, String, String>, X<Exception, Exception, Exception>> x2;@140] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<!|Object|!, Object, Object>, X<String, String, String>, X<Exception, Exception, Exception>> x2;@142] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<Object, !|Object|!, Object>, X<String, String, String>, X<Exception, Exception, Exception>> x2;@150] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<Object, Object, !|Object|!>, X<String, String, String>, X<Exception, Exception, Exception>> x2;@158] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<Object, Object, Object>, !|X|!<String, String, String>, X<Exception, Exception, Exception>> x2;@167] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<Object, Object, Object>, X<!|String|!, String, String>, X<Exception, Exception, Exception>> x2;@169] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<Object, Object, Object>, X<String, !|String|!, String>, X<Exception, Exception, Exception>> x2;@177] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<Object, Object, Object>, X<String, String, !|String|!>, X<Exception, Exception, Exception>> x2;@185] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<Object, Object, Object>, X<String, String, String>, !|X|!<Exception, Exception, Exception>> x2;@194] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<Object, Object, Object>, X<String, String, String>, X<!|Exception|!, Exception, Exception>> x2;@196] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<Object, Object, Object>, X<String, String, String>, X<Exception, !|Exception|!, Exception>> x2;@207] EXACT_MATCH\\n\" +", "+\t\t\"src/test07/Test.java test07.Test.x2 [\tX<X<Object, Object, Object>, X<String, String, String>, X<Exception, Exception, !|Exception|!>> x2;@218] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bacff966f3e0ee3cd50c2e04a1edf1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocBugsTest.java", "commitBeforeChange": "8d7196c62e122781f984b6fec99acaaaff2c9b12", "commitAfterChange": "c40d37b31933df685287603b7876ab2876472c95", "methodNumberBeforeChange": 221, "methodNumberAfterChange": 221, "signatureBeforeChange": " public void testBug233187b()", "signatureAfterChange": " public void testBug233187b()", "diff": ["-\tString[] units = new String[] {", "-\t\t\"X.java\",", "-\t\t\"package test.bug;\\n\" + ", "-\t\t\"\\n\" + ", "-\t\t\"public class X {\\n\" + ", "-\t\t\"   public static class Y {\\n\" + ", "-\t\t\"        public static class Z { \\n\" + ", "-\t\t\"            /**\\n\" + ", "-\t\t\"             * The position in the new method signature depends on\\n\" + ", "-\t\t\"             * the position in the array passed to\\n\" + ", "-\t\t\"             * {@link X.Y#foo(test.bug.X.Y.Z)} OK for javadoc tool\\n\" +", "-\t\t\"            * {@link X.Y#foo(test.bug.X.Y.Z[])} KO for javadoc tool\\n\" +", "-\t\t\"             * {@link X.Y#foo(no_test.bug.X.Y.Z)} KO for javadoc tool\\n\" +", "-\t\t\"             * {@link X.Y#foo(Y.Z)} KO for javadoc tool\\n\" +", "-\t\t\"             * {@link test.bug.X.Y#foo(Y.Z)} KO for javadoc tool\\n\" +", "-\t\t\"             */\\n\" + ", "-\t\t\"            public int bar() {\\n\" + ", "-\t\t\"                return 0;\\n\" + ", "-\t\t\"            }\\n\" + ", "-\t\t\"        }\\n\" + ", "-\t\t\"\\n\" + ", "-\t\t\"        public void foo(Z params) {\\n\" + ", "-\t\t\"        }\\n\" + ", "-\t\t\"    }\\n\" + ", "-\t\t\"}\\n\"", "-\t};", "-\trunNegativeTest(units,", "-\t\t// warning - Tag @link: can't find foo(test.bug.X.Y.Z[]) in test.bug.X.Y", "-\t\t// warning - Tag @link: can't find foo(no_test.bug.X.Y.Z) in test.bug.X.Y", "-\t\t// warning - Tag @link: can't find foo(Y.Z) in test.bug.X.Y", "-\t\t// warning - Tag @link: can't find foo(Y.Z) in test.bug.X.Y", "+\trunNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"test/b/X.java\",", "+\t\t\t\"package test.b;\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"   public static class Y {\\n\" + ", "+\t\t\t\"        public static class Z { \\n\" + ", "+\t\t\t\"            /**\\n\" + ", "+\t\t\t\"             * The position in the new method signature depends on\\n\" + ", "+\t\t\t\"             * the position in the array passed to\\n\" + ", "+\t\t\t\"             * {@link X.Y#foo(test.b.X.Y.Z)} OK for javadoc tool\\n\" +", "+\t\t\t\"            * {@link X.Y#foo(test.b.X.Y.Z[])} KO for javadoc tool\\n\" +", "+\t\t\t\"             * {@link X.Y#foo(no_test.b.X.Y.Z)} KO for javadoc tool\\n\" +", "+\t\t\t\"             * {@link X.Y#foo(Y.Z)} KO for javadoc tool\\n\" +", "+\t\t\t\"             * {@link test.b.X.Y#foo(Y.Z)} KO for javadoc tool\\n\" +", "+\t\t\t\"             */\\n\" + ", "+\t\t\t\"            public int bar() {\\n\" + ", "+\t\t\t\"                return 0;\\n\" + ", "+\t\t\t\"            }\\n\" + ", "+\t\t\t\"        }\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"        public void foo(Z params) {\\n\" + ", "+\t\t\t\"        }\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"}\\n\"", "+\t\t},", "+\t\t// warning - Tag @link: can't find foo(test.b.X.Y.Z[]) in test.b.X.Y", "+\t\t// warning - Tag @link: can't find foo(no_test.b.X.Y.Z) in test.b.X.Y", "+\t\t// warning - Tag @link: can't find foo(Y.Z) in test.b.X.Y", "+\t\t// warning - Tag @link: can't find foo(Y.Z) in test.b.X.Y", "-\t\t\"1. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\"\t* {@link X.Y#foo(test.bug.X.Y.Z[])} KO for javadoc tool\\n\" + ", "+\t\t\"1. ERROR in test\\\\b\\\\X.java (at line 10)\\n\" + ", "+\t\t\"\t* {@link X.Y#foo(test.b.X.Y.Z[])} KO for javadoc tool\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\"\t* {@link X.Y#foo(no_test.bug.X.Y.Z)} KO for javadoc tool\\n\" + ", "-\t\t\"\t                 ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"2. ERROR in test\\\\b\\\\X.java (at line 11)\\n\" + ", "+\t\t\"\t* {@link X.Y#foo(no_test.b.X.Y.Z)} KO for javadoc tool\\n\" + ", "+\t\t\"\t                 ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\"3. ERROR in test\\\\b\\\\X.java (at line 12)\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 13)\\n\" + ", "-\t\t\"\t* {@link test.bug.X.Y#foo(Y.Z)} KO for javadoc tool\\n\" + ", "-\t\t\"\t                          ^^^\\n\" + ", "+\t\t\"4. ERROR in test\\\\b\\\\X.java (at line 13)\\n\" + ", "+\t\t\"\t* {@link test.b.X.Y#foo(Y.Z)} KO for javadoc tool\\n\" + ", "+\t\t\"\t                        ^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50b27e547eb135f79cc8b8645fc6f42e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 152, "methodNumberAfterChange": 152, "signatureBeforeChange": " \tpublic void test048c()", "signatureAfterChange": " \tpublic void test048c()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X4.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic String foo(I<String> z) { return null; }\\n\" + ", "+\t\t\t\"\t              ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(I<String>) of type X4 has the same erasure as foo(I<? extends T>) of type Y<T> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+/* javac 7", "+X.java:2: name clash: foo(I<String>) in X4 and foo(I<? extends T>) in Y have the same erasure, yet neither overrides the other", "+    public String foo(I<String> z) { return null; }", "+                  ^", "+  where T is a type-variable:", "+    T extends Object declared in class Y", "+1 error", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51e3ed522216e6e34abdf80211b5618e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "commitAfterChange": "c3fe3a5d67fbf0c540d6fc63f233f6806516af9c", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic void test012()", "signatureAfterChange": "  \tpublic void test012()", "diff": ["-\t\t\t\t\"class Y1 extends A { void foo(Object s) {} }\\n\"", "+\t\t\t\t\"class Y1 extends A { @Override void foo(Object s) {} }\\n\"", "-\t\t\t\"1. ERROR in A.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\tclass Y1 extends A { void foo(Object s) {} }\\r\\n\" + ", "-\t\t\t\"\t                          ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"1. ERROR in A.java (at line 2)\\n\" + ", "+\t\t\t\"\tclass Y1 extends A { @Override void foo(Object s) {} }\\n\" + ", "+\t\t\t\"\t                                    ^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"class Y2 extends A { void foo(Object[] s) {} }\\n\"", "+\t\t\t\t\"class Y2 extends A { @Override void foo(Object[] s) {} }\\n\"", "-\t\t\t\"\tclass Y2 extends A { void foo(Object[] s) {} }\\n\" + ", "-\t\t\t\"\t                          ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\tclass Y2 extends A { @Override void foo(Object[] s) {} }\\n\" + ", "+\t\t\t\"\t                                    ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"class Y3 extends A { void foo(Class<Object> s) {} }\\n\"", "+\t\t\t\t\"class Y3 extends A { @Override void foo(Class<Object> s) {} }\\n\"", "-\t\t\t\"\tclass Y3 extends A { void foo(Class<Object> s) {} }\\r\\n\" + ", "-\t\t\t\"\t                          ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"\tclass Y3 extends A { @Override void foo(Class<Object> s) {} }\\r\\n\" + ", "+\t\t\t\"\t                                    ^^^^^^^^^^^^^^^^^^^^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "540a462800700c43ed35159a82c7b265", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void testStringNoArgument04() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [MemberGeneric] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [MemberGeneric] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [MemberGeneric] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [MemberGeneric] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5653f872e6eb4a000199c523f8ded363", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void test019()", "signatureAfterChange": " public void test019()", "diff": ["-\t\t\"     1  newarray #10 int\\n\" + ", "-\t\t\"     3  astore_1\\n\" + ", "-\t\t\"     4  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"     7  ldc #23 <String \\\"SUC\\\">\\n\" + ", "-\t\t\"     9  invokevirtual #29 <Method java/io/PrintStream.print(Ljava/lang/String;)V>\\n\" + ", "-\t\t\"    12  aload_1\\n\" + ", "-\t\t\"    13  astore 4\\n\" + ", "+\t\t\"     1  newarray int [10]\\n\" + ", "+\t\t\"     3  astore_1 [tab]\\n\" + ", "+\t\t\"     4  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"     7  ldc <String \\\"SUC\\\"> [23]\\n\" + ", "+\t\t\"     9  invokevirtual java/io/PrintStream.print(Ljava/lang/String;)V [29]\\n\" + ", "+\t\t\"    12  aload_1 [tab]\\n\" + ", "+\t\t\"    13  astore [local_4]\\n\" + ", "-\t\t\"    16  istore_2\\n\" + ", "-\t\t\"    17  aload 4\\n\" + ", "+\t\t\"    16  istore_2 [local_2]\\n\" + ", "+\t\t\"    17  aload [local_4]\\n\" + ", "-\t\t\"    20  istore_3\\n\" + ", "+\t\t\"    20  istore_3 [local_3]\\n\" + ", "-\t\t\"    24  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    27  ldc #31 <String \\\"1x\\\">\\n\" + ", "-\t\t\"    29  invokevirtual #29 <Method java/io/PrintStream.print(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    24  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    27  ldc <String \\\"1x\\\"> [31]\\n\" + ", "+\t\t\"    29  invokevirtual java/io/PrintStream.print(Ljava/lang/String;)V [29]\\n\" + ", "-\t\t\"    35  iload_2\\n\" + ", "-\t\t\"    36  iload_3\\n\" + ", "+\t\t\"    35  iload_2 [local_2]\\n\" + ", "+\t\t\"    36  iload_3 [local_3]\\n\" + ", "-\t\t\"    40  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    43  ldc #33 <String \\\"CESS\\\">\\n\" + ", "-\t\t\"    45  invokevirtual #36 <Method java/io/PrintStream.println(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    40  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    43  ldc <String \\\"CESS\\\"> [33]\\n\" + ", "+\t\t\"    45  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [36]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57c91a582b16eba17f041704051d6e03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void testBug95521()", "signatureAfterChange": " \tpublic void testBug95521()", "diff": ["-\t\t\t\"1. ERROR in test\\\\X.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\r\\n\" + ", "+\t\t\t\"1. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\n\" + ", "-\t\t\t\"2. ERROR in test\\\\X.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\r\\n\" + ", "+\t\t\t\"2. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\n\" + ", "-\t\t\t\"3. ERROR in test\\\\X.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\r\\n\" + ", "+\t\t\t\"3. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\n\" + ", "-\t\t\t\"4. ERROR in test\\\\X.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\r\\n\" + ", "+\t\t\t\"4. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\n\" + ", "-\t\t\t\"5. ERROR in test\\\\X.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\r\\n\" + ", "+\t\t\t\"5. ERROR in test\\\\X.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic <T> G<T> foo(Class<T> stuffClass) {\\n\" + ", "-\t\t\t\"6. ERROR in test\\\\X.java (at line 15)\\r\\n\" + ", "-\t\t\t\"\t* @param <T>\\r\\n\" + ", "+\t\t\t\"6. ERROR in test\\\\X.java (at line 15)\\n\" + ", "+\t\t\t\"\t* @param <T>\\n\" + ", "-\t\t\t\"7. ERROR in test\\\\X.java (at line 19)\\r\\n\" + ", "-\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\r\\n\" + ", "+\t\t\t\"7. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\n\" + ", "-\t\t\t\"8. ERROR in test\\\\X.java (at line 19)\\r\\n\" + ", "-\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\r\\n\" + ", "-\t\t\t\"\t                            ^\\n\" + ", "-\t\t\t\"T cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"9. ERROR in test\\\\X.java (at line 19)\\r\\n\" + ", "-\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\r\\n\" + ", "+\t\t\t\"8. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\n\" + ", "-\t\t\t\"10. ERROR in test\\\\X.java (at line 19)\\r\\n\" + ", "-\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\r\\n\" + ", "+\t\t\t\"9. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\n\" + ", "+\t\t\t\"\t                            ^\\n\" + ", "+\t\t\t\"T cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\n\" + ", "-\t\t\t\"11. ERROR in test\\\\X.java (at line 19)\\r\\n\" + ", "-\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\r\\n\" + ", "+\t\t\t\"11. ERROR in test\\\\X.java (at line 19)\\n\" + ", "+\t\t\t\"\tpublic <T extends Object> G<T> foo(Class<T> stuffClass);\\n\" + ", "-\t\t\t\"12. ERROR in test\\\\X.java (at line 22)\\r\\n\" + ", "-\t\t\t\"\t* @param <T>\\r\\n\" + ", "+\t\t\t\"12. ERROR in test\\\\X.java (at line 22)\\n\" + ", "+\t\t\t\"\t* @param <T>\\n\" + ", "-\t\t\t\"13. ERROR in test\\\\X.java (at line 24)\\r\\n\" + ", "-\t\t\t\"\tclass G<T> {}\\r\\n\" + ", "+\t\t\t\"13. ERROR in test\\\\X.java (at line 24)\\n\" + ", "+\t\t\t\"\tclass G<T> {}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58729fb4ea353f82b2f06e4f2ad92511", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "cf30648cc59345d34e916584323c77b27d34f7aa", "commitAfterChange": "c7d7002f277b7f884de7f682f8e0ff540e1b6d05", "methodNumberBeforeChange": 880, "methodNumberAfterChange": 880, "signatureBeforeChange": " public void test874()", "signatureAfterChange": " public void test874()", "diff": ["-\t// \tensure proper declaring class for #run() invocation", "+\t// \tensure only one checkcast C", "-\t\t\"     7  invokevirtual C.label(java.lang.String) : B [25]\\n\" + ", "-\t\t\"    10  checkcast C [18]\\n\" + ", "-\t\t\"    13  astore_1 [c]\\n\" + ", "-\t\t\"    14  getstatic java.lang.System.out : java.io.PrintStream [29]\\n\" + ", "-\t\t\"    17  aload_1 [c]\\n\" + ", "-\t\t\"    18  invokevirtual C.toString() : java.lang.String [35]\\n\" + ", "-\t\t\"    21  invokevirtual java.io.PrintStream.println(java.lang.String) : void [39]\\n\" + ", "-\t\t\"    24  return\\n\" + ", "+\t\t\"     7  invokevirtual C.label(java.lang.String) : java.lang.Object [25]\\n\" + ", "+\t\t\"    10  checkcast D [29]\\n\" + ", "+\t\t\"    13  astore_1 [d]\\n\" + ", "+\t\t\"    14  getstatic java.lang.System.out : java.io.PrintStream [31]\\n\" + ", "+\t\t\"    17  aload_1 [d]\\n\" + ", "+\t\t\"    18  invokevirtual java.io.PrintStream.println(java.lang.Object) : void [37]\\n\" + ", "+\t\t\"    21  return\\n\" + ", "-\t\t\"        [pc: 0, line: 13]\\n\" + ", "-\t\t\"        [pc: 14, line: 14]\\n\" + ", "-\t\t\"        [pc: 24, line: 15]\\n\" + ", "+\t\t\"        [pc: 0, line: 14]\\n\" + ", "+\t\t\"        [pc: 14, line: 15]\\n\" + ", "+\t\t\"        [pc: 21, line: 16]\\n\" + ", "-\t\t\"        [pc: 0, pc: 25] local: args index: 0 type: java.lang.String[]\\n\" + ", "-\t\t\"        [pc: 14, pc: 25] local: c index: 1 type: C\\n\";", "+\t\t\"        [pc: 0, pc: 22] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 14, pc: 22] local: d index: 1 type: D\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "598bb4f09c068fa189efbf866c194501", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic void testStringAnyStrings03() throws CoreException", "signatureAfterChange": " \tpublic void testStringAnyStrings03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [GenericMember] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [GenericMember] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [MemberGeneric] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [MemberGeneric] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Member] EXACT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Member] EXACT_RAW_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b094884ade17faafcfcd220c9040836", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 331, "methodNumberAfterChange": 332, "signatureBeforeChange": " public void testBug330313_wksp1_53_njl_bnl()", "signatureAfterChange": " public void testBug330313_wksp1_53_njl_bnl()", "diff": ["-\t\t\"\t\t\t{ 24, 15 } },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 24, 15 } },\\n\" + ", "-\t\t\"\t\t\t{ 8, 18 },\\n\" + ", "-\t\t\"\t\t\t{ 15, 64 },\\n\" + ", "-\t\t\"\t\t\t{ 23, 16 },\\n\" + ", "-\t\t\"\t\t\t{ 24, 17 },\\n\" + ", "-\t\t\"\t\t\t{ 55, 0 } },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 8, 18 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 15, 64 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 23, 16 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 24, 17 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 55, 0 } },\\n\" + ", "-\t\t\"\t\t\t{/* EOL */\\n\" + ", "-\t\t\"\t\t\t{ 0, -1 },\\n\" + ", "-\t\t\"\t\t\t{ 8, 1792 },\\n\" + ", "-\t\t\"\t\t\t{ 23, 24 },\\n\" + ", "-\t\t\"\t\t\t{ 24, 25 },\\n\" + ", "-\t\t\"\t\t\t{ 40, 23 },\\n\" + ", "-\t\t\"\t\t\t{ 55, 22 },\\n\" + ", "-\t\t\"\t\t\t{ 103, 19 },\\n\" + ", "-\t\t\"\t\t\t{ 104, 20 },\\n\" + ", "-\t\t\"\t\t\t{ 108, 21 },\\n\" + ", "-\t\t\"\t\t\t{ 12, 1856 },\\n\" + ", "-\t\t\"\t\t\t{ 13, 1920 } },\\n\" + ", "-\t\t\"\t};\\n\" + ", "+\t\t\"\t\t\t{\\n\" + ", "+\t\t\"\t\t\t\t\t/* EOL */{ 0, -1 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 8, 1792 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 23, 24 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 24, 25 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 40, 23 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 55, 22 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 103, 19 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 104, 20 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 108, 21 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 12, 1856 },\\n\" + ", "+\t\t\"\t\t\t\t\t{ 13, 1920 } }, };\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e0be2add26188ef249523b565e058ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void test020()", "signatureAfterChange": " public void test020()", "diff": ["-\t\t\"     1  newarray #10 int\\n\" + ", "-\t\t\"     3  astore_1\\n\" + ", "-\t\t\"     4  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"     7  ldc #23 <String \\\"SUC\\\">\\n\" + ", "-\t\t\"     9  invokevirtual #29 <Method java/io/PrintStream.print(Ljava/lang/String;)V>\\n\" + ", "-\t\t\"    12  aload_1\\n\" + ", "-\t\t\"    13  astore 4\\n\" + ", "+\t\t\"     1  newarray int [10]\\n\" + ", "+\t\t\"     3  astore_1 [tab]\\n\" + ", "+\t\t\"     4  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"     7  ldc <String \\\"SUC\\\"> [23]\\n\" + ", "+\t\t\"     9  invokevirtual java/io/PrintStream.print(Ljava/lang/String;)V [29]\\n\" + ", "+\t\t\"    12  aload_1 [tab]\\n\" + ", "+\t\t\"    13  astore [local_4]\\n\" + ", "-\t\t\"    16  istore_2\\n\" + ", "-\t\t\"    17  aload 4\\n\" + ", "+\t\t\"    16  istore_2 [local_2]\\n\" + ", "+\t\t\"    17  aload [local_4]\\n\" + ", "-\t\t\"    20  istore_3\\n\" + ", "+\t\t\"    20  istore_3 [local_3]\\n\" + ", "-\t\t\"    24  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    27  ldc #31 <String \\\"1x\\\">\\n\" + ", "-\t\t\"    29  invokevirtual #29 <Method java/io/PrintStream.print(Ljava/lang/String;)V>\\n\" + ", "-\t\t\"    32  iinc 2 1\\n\" + ", "-\t\t\"    35  iload_2\\n\" + ", "-\t\t\"    36  iload_3\\n\" + ", "+\t\t\"    24  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    27  ldc <String \\\"1x\\\"> [31]\\n\" + ", "+\t\t\"    29  invokevirtual java/io/PrintStream.print(Ljava/lang/String;)V [29]\\n\" + ", "+\t\t\"    32  iinc 2 1 [local_2]\\n\" + ", "+\t\t\"    35  iload_2 [local_2]\\n\" + ", "+\t\t\"    36  iload_3 [local_3]\\n\" + ", "-\t\t\"    40  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    43  ldc #33 <String \\\"CESS\\\">\\n\" + ", "-\t\t\"    45  invokevirtual #36 <Method java/io/PrintStream.println(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    40  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    43  ldc <String \\\"CESS\\\"> [33]\\n\" + ", "+\t\t\"    45  invokevirtual java/io/PrintStream.println(Ljava/lang/String;)V [36]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "627ca688fdcf37bdcd532efdd9874605", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 160, "methodNumberAfterChange": 160, "signatureBeforeChange": " \tpublic void test050a()", "signatureAfterChange": " \tpublic void test050a()", "diff": ["-\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=94754", "-\tpublic void test050a() {", "-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\t\t\t\"\t\t public static <S extends A> void foo() { System.out.print(\\\"A\\\"); }\\n\" +", "-\t\t\t\t\"\t\t public static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" +", "-\t\t\t\t\"\t\t static void test () {\\n\" +", "-\t\t\t\t\"\t\t \tX.foo();\\n\" +", "-\t\t\t\t\"\t\t \tfoo();\\n\" +", "-\t\t\t\t\"\t\t }\\n\" +", "-\t\t\t\t\"class B {}\\n\"", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 5)\\r\\n\" +", "-\t\t\t\"\tX.foo();\\r\\n\" +", "-\t\t\t\"\t  ^^^\\n\" +", "-\t\t\t\"The method foo() is ambiguous for the type X\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 6)\\r\\n\" +", "-\t\t\t\"\tfoo();\\r\\n\" +", "-\t\t\t\"\t^^^\\n\" +", "-\t\t\t\"The method foo() is ambiguous for the type X\\n\" +", "-\t\t\t// both references are ambiguous", "+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=94754", "+\tpublic void test050a() {", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static <S extends A> void foo() { System.out.print(\\\"A\\\"); }\\n\" +", "+\t\t\t\t\"\tpublic static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" +", "+\t\t\t\t\"\tstatic void test () {\\n\" +", "+\t\t\t\t\"\t\tX.foo();\\n\" +", "+\t\t\t\t\"\t\tfoo();\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class A {}\\n\" +", "+\t\t\t\t\"class B {}\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic static <S extends A> void foo() { System.out.print(\\\"A\\\"); }\\n\" + ", "+\t\t\t\"\t                                 ^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" + ", "+\t\t\t\"\t                              ^^^^^\\n\" + ", "+\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);", "+/* javac 7", "+X.java:3: name clash: <N>foo() and <S>foo() have the same erasure", "+        public static <N extends B> N foo() { System.out.print(\"B\"); return null; }", "+                                      ^", "+  where N,S are type-variables:", "+    N extends B declared in method <N>foo()", "+    S extends A declared in method <S>foo()", "+1 error", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e0737fbacea12af5c106f7774f57378", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void testStringNoArgument03() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Member] COMPATIBLE_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Member] EQUIVALENT_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e8187c2021e7afd785c06efb40d1005", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void testStringNoArgument03() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Member] EQUIVALENT_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Member] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f20aad871fb62c56f714817bf4db845", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "1e5960a8e1d6d5a1af8d629bddab71c46e5ed5a1", "commitAfterChange": "0d665ff7724ca0a2df27fa238eee0ddf6c106c65", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void testBug027079d3() throws JavaModelException", "signatureAfterChange": " public void testBug027079d3() throws JavaModelException", "diff": ["-\t\t\"public class X04c {\\r\\n\" + ", "-\t\t\"\\r\\n\" + ", "-\t\t\"/* disable-formatter */\\r\\n\" + ", "-\t\t\"void     foo(    )      {\t\\r\\n\" + ", "-\t\t\"\t\t\t\t//      unformatted       comment  \t  \\r\\n\" + ", "-\t\t\"}\\r\\n\" + ", "-\t\t\"/* enable-formatter */\\r\\n\" + ", "-\t\t\"void     bar(    )      {\t\\r\\n\" + ", "-\t\t\"\t\t\t\t//      formatted       comment  \t  \\r\\n\" + ", "-\t\t\"}\\r\\n\" + ", "-\t\t\"}\\r\\n\";", "+\t\t\"public class X04c {\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"/* disable-formatter */\\n\" + ", "+\t\t\"void     foo(    )      {\t\\n\" + ", "+\t\t\"\t\t\t\t//      unformatted       comment  \t  \\n\" + ", "+\t\t\"}\\n\" + ", "+\t\t\"/* enable-formatter */\\n\" + ", "+\t\t\"void     bar(    )      {\t\\n\" + ", "+\t\t\"\t\t\t\t//      formatted       comment  \t  \\n\" + ", "+\t\t\"}\\n\" + ", "+\t\t\"}\\n\";", "-\t\t\"public class X04c {\\r\\n\" + ", "-\t\t\"\\r\\n\" + ", "-\t\t\"/* disable-formatter */\\r\\n\" + ", "-\t\t\"void     foo(    )      {\t\\r\\n\" + ", "-\t\t\"\t\t\t\t//      unformatted       comment  \t  \\r\\n\" + ", "-\t\t\"}\\r\\n\" + ", "-\t\t\"/* enable-formatter */\\r\\n\" + ", "-\t\t\"\tvoid bar() {\\r\\n\" + ", "-\t\t\"\t\t// formatted comment\\r\\n\" + ", "-\t\t\"\t}\\r\\n\" + ", "-\t\t\"}\\r\\n\",", "+\t\t\"public class X04c {\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"/* disable-formatter */\\n\" + ", "+\t\t\"void     foo(    )      {\t\\n\" + ", "+\t\t\"\t\t\t\t//      unformatted       comment  \t  \\n\" + ", "+\t\t\"}\\n\" + ", "+\t\t\"/* enable-formatter */\\n\" + ", "+\t\t\"\tvoid bar() {\\n\" + ", "+\t\t\"\t\t// formatted comment\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"}\\n\",", "-\t\t\"\\r\\n\",", "+\t\t\"\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "709154a5a7f19e5fb08544da0ac4d74e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void testStringNoArgument02() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_run [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_run [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_run [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_run [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Generic] COMPATIBLE_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Generic] EQUIVALENT_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7278e1ecb30f8febb7ad9f713e965a01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearch15Tests.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void testGenericTypeReferenceBA04() throws CoreException", "signatureAfterChange": " \tpublic void testGenericTypeReferenceBA04() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gmg [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gmg_obj [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gmg_exc [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gmg_qmk [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gmg_thr [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gmg_run [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgmg [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgmg_obj [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgmg_exc [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgmg_qmk [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgmg_thr [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgmg_run [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gmg [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gmg_obj [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gmg_exc [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gmg_qmk [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gmg_thr [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gmg_run [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgmg [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgmg_obj [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgmg_exc [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgmg_qmk [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgmg_thr [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgmg_run [MemberGeneric] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74014a3b1b87a5e4533832e80142ccd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void testStringNoArgument08() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument08() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_obj [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_exc [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_thr [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_run [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_thr [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_run [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [NonGeneric.GenericMember] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [NonGeneric.GenericMember] EXACT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_obj [NonGeneric.GenericMember] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_exc [NonGeneric.GenericMember] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [NonGeneric.GenericMember] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_thr [NonGeneric.GenericMember] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_run [NonGeneric.GenericMember] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [NonGeneric.GenericMember] EXACT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [NonGeneric.GenericMember] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [NonGeneric.GenericMember] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [NonGeneric.GenericMember] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_thr [NonGeneric.GenericMember] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_run [NonGeneric.GenericMember] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [NonGeneric.GenericMember] EXACT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [NonGeneric.GenericMember] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [NonGeneric.GenericMember] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [NonGeneric.GenericMember] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [NonGeneric.GenericMember] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [NonGeneric.GenericMember] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [NonGeneric.GenericMember] EXACT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [NonGeneric.GenericMember] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [NonGeneric.GenericMember] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [NonGeneric.GenericMember] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [NonGeneric.GenericMember] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [NonGeneric.GenericMember] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74b7c17c761384c9875e23d6473f9cc8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ConstantTest.java", "commitBeforeChange": "de542d47e7857076ff550f4560e517bc0773f2ce", "commitAfterChange": "29901dd2faebfaef1b4d98d076ffc43db80ce6e9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void test009()", "signatureAfterChange": " public void test009()", "diff": ["-\t\t\"    39  invokevirtual #41 <Method java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>\\n\" + ", "+\t\t\"    39  invokevirtual #41 <Method java/lang/StringBuffer.append(Ljava/lang/Object;)Ljava/lang/StringBuffer;>\\n\" + ", "-\t\t\"    44  invokevirtual #41 <Method java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>\\n\" + ", "-\t\t\"    47  invokevirtual #47 <Method java/lang/StringBuffer.toString()Ljava/lang/String;>\\n\" + ", "-\t\t\"    50  ldc #49 <String \\\"[null]\\\">\\n\" + ", "+\t\t\"    44  invokevirtual #46 <Method java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>\\n\" + ", "+\t\t\"    47  invokevirtual #50 <Method java/lang/StringBuffer.toString()Ljava/lang/String;>\\n\" + ", "+\t\t\"    50  ldc #52 <String \\\"[null]\\\">\\n\" + ", "-\t\t\"    64  ldc #51 <String \\\"3\\\">\\n\" + ", "+\t\t\"    64  ldc #54 <String \\\"3\\\">\\n\" + ", "-\t\t\"    78  ldc #53 <String \\\"4\\\">\\n\" + ", "+\t\t\"    78  ldc #56 <String \\\"4\\\">\\n\" + ", "-\t\t\"    83  ldc #55 <String \\\"aaa\\\">\\n\" + ", "+\t\t\"    83  ldc #58 <String \\\"aaa\\\">\\n\" + ", "-\t\t\"    89  ldc #57 <String \\\"5\\\">\\n\" + ", "-\t\t\"    91  invokevirtual #60 <Method java/io/PrintStream.println(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    89  ldc #60 <String \\\"5\\\">\\n\" + ", "+\t\t\"    91  invokevirtual #63 <Method java/io/PrintStream.println(Ljava/lang/String;)V>\\n\" + ", "-\t\t\"    39  invokevirtual #41 <Method java/lang/StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder;>\\n\" + ", "+\t\t\"    39  invokevirtual #41 <Method java/lang/StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder;>\\n\" + ", "-\t\t\"    44  invokevirtual #41 <Method java/lang/StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder;>\\n\" + ", "-\t\t\"    47  invokevirtual #47 <Method java/lang/StringBuilder.toString()Ljava/lang/String;>\\n\" + ", "-\t\t\"    50  ldc #49 <String \\\"[null]\\\">\\n\" + ", "+\t\t\"    44  invokevirtual #46 <Method java/lang/StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder;>\\n\" + ", "+\t\t\"    47  invokevirtual #50 <Method java/lang/StringBuilder.toString()Ljava/lang/String;>\\n\" + ", "+\t\t\"    50  ldc #52 <String \\\"[null]\\\">\\n\" + ", "-\t\t\"    64  ldc #51 <String \\\"3\\\">\\n\" + ", "+\t\t\"    64  ldc #54 <String \\\"3\\\">\\n\" + ", "-\t\t\"    78  ldc #53 <String \\\"4\\\">\\n\" + ", "+\t\t\"    78  ldc #56 <String \\\"4\\\">\\n\" + ", "-\t\t\"    83  ldc #55 <String \\\"aaa\\\">\\n\" + ", "+\t\t\"    83  ldc #58 <String \\\"aaa\\\">\\n\" + ", "-\t\t\"    89  ldc #57 <String \\\"5\\\">\\n\" + ", "-\t\t\"    91  invokevirtual #60 <Method java/io/PrintStream.println(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    89  ldc #60 <String \\\"5\\\">\\n\" + ", "+\t\t\"    91  invokevirtual #63 <Method java/io/PrintStream.println(Ljava/lang/String;)V>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "758d32a5d7c3f7f8cef0070ea71871e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic void testBug83127f()", "signatureAfterChange": " \tpublic void testBug83127f()", "diff": ["-\t\t\t\"1. ERROR in Unrelated1.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic class Unrelated1<E extends Number> {\\r\\n\" + ", "+\t\t\t\"1. ERROR in Unrelated1.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class Unrelated1<E extends Number> {\\n\" + ", "-\t\t\t\"2. ERROR in Unrelated1.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\tpublic Unrelated1(E e) {}\\r\\n\" + ", "+\t\t\t\"2. ERROR in Unrelated1.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic Unrelated1(E e) {}\\n\" + ", "-\t\t\t\"3. ERROR in Unrelated1.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\tpublic boolean add(E e) { return false; }\\r\\n\" + ", "+\t\t\t\"3. ERROR in Unrelated1.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic boolean add(E e) { return false; }\\n\" + ", "-\t\t\t\"1. ERROR in Test.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\t* @see Unrelated1#add(Number)\\r\\n\" + ", "+\t\t\t\"1. ERROR in Test.java (at line 2)\\n\" + ", "+\t\t\t\"\t* @see Unrelated1#add(Number)\\n\" + ", "-\t\t\t\"Javadoc: The method add(Number) is undefined for the type Unrelated1\\n\" + ", "+\t\t\t\"Javadoc: The method add(E) in the type Unrelated1 is not applicable for the arguments (Number)\\n\" + ", "-\t\t\t\"2. ERROR in Test.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\t* @see Unrelated1#Unrelated1(Number)\\r\\n\" + ", "+\t\t\t\"2. ERROR in Test.java (at line 3)\\n\" + ", "+\t\t\t\"\t* @see Unrelated1#Unrelated1(Number)\\n\" + ", "-\t\t\t\"3. ERROR in Test.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic class Test<T>{\\r\\n\" + ", "+\t\t\t\"3. ERROR in Test.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic class Test<T>{\\n\" + ", "-\t\t\t\"4. ERROR in Test.java (at line 9)\\r\\n\" + ", "-\t\t\t\"\tTest(T t) {}\\r\\n\" + ", "+\t\t\t\"4. ERROR in Test.java (at line 9)\\n\" + ", "+\t\t\t\"\tTest(T t) {}\\n\" + ", "-\t\t\t\"5. ERROR in Test.java (at line 10)\\r\\n\" + ", "-\t\t\t\"\tpublic boolean add(T t) {\\r\\n\" + ", "+\t\t\t\"5. ERROR in Test.java (at line 10)\\n\" + ", "+\t\t\t\"\tpublic boolean add(T t) {\\n\" + ", "-\t\t\t\"6. ERROR in Test.java (at line 14)\\r\\n\" + ", "-\t\t\t\"\tclass Sub<E extends Number> extends Test<E> {\\r\\n\" + ", "+\t\t\t\"6. ERROR in Test.java (at line 14)\\n\" + ", "+\t\t\t\"\tclass Sub<E extends Number> extends Test<E> {\\n\" + ", "-\t\t\t\"7. ERROR in Test.java (at line 14)\\r\\n\" + ", "-\t\t\t\"\tclass Sub<E extends Number> extends Test<E> {\\r\\n\" + ", "+\t\t\t\"7. ERROR in Test.java (at line 14)\\n\" + ", "+\t\t\t\"\tclass Sub<E extends Number> extends Test<E> {\\n\" + ", "-\t\t\t\"8. ERROR in Test.java (at line 14)\\r\\n\" + ", "-\t\t\t\"\tclass Sub<E extends Number> extends Test<E> {\\r\\n\" + ", "+\t\t\t\"8. ERROR in Test.java (at line 14)\\n\" + ", "+\t\t\t\"\tclass Sub<E extends Number> extends Test<E> {\\n\" + ", "-\t\t\t\"9. ERROR in Test.java (at line 15)\\r\\n\" + ", "-\t\t\t\"\tSub (E e) {super(null);}\\r\\n\" + ", "+\t\t\t\"9. ERROR in Test.java (at line 15)\\n\" + ", "+\t\t\t\"\tSub (E e) {super(null);}\\n\" + ", "-\t\t\t\"10. ERROR in Test.java (at line 15)\\r\\n\" + ", "-\t\t\t\"\tSub (E e) {super(null);}\\r\\n\" + ", "+\t\t\t\"10. ERROR in Test.java (at line 15)\\n\" + ", "+\t\t\t\"\tSub (E e) {super(null);}\\n\" + ", "-\t\t\t\"The constructor Object(null) is undefined\\n\" + ", "+\t\t\t\"The constructor Test(T) refers to the missing type T\\n\" + ", "-\t\t\t\"11. ERROR in Test.java (at line 16)\\r\\n\" + ", "-\t\t\t\"\tpublic boolean add(E e) {\\r\\n\" + ", "+\t\t\t\"11. ERROR in Test.java (at line 16)\\n\" + ", "+\t\t\t\"\tpublic boolean add(E e) {\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77d1d5c7e19e60d12833a66956f1c51a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void testStringAnyStrings01() throws CoreException", "signatureAfterChange": " \tpublic void testStringAnyStrings01() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_run [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_run [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_run [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_run [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic] COMPATIBLE_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic] EQUIVALENT_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "788a6243e431fc20e3628b48adac348c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "3a514d6cf7a163df7c9aa1b24e69e8f3a5b39e3c", "commitAfterChange": "0aeaaba7ea908a19742d309ce070fd6d99b6c4d4", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void testJavadocTypeStringReference() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocTypeStringReference() throws CoreException", "diff": ["-//\t\tJavaSearchResultCollector result = new JavaSearchResultCollector();", "-//\t\tresult.showAccuracy = true;", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\",", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a18b93e5a9e6641b97cfb51b9f943c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void test024()", "signatureAfterChange": " public void test024()", "diff": ["-\t\t\"     1  anewarray #17 java/lang/String\\n\" + ", "+\t\t\"     1  anewarray java/lang/String [17]\\n\" + ", "-\t\t\"     6  ldc #19 <String \\\"SUCCESS\\\">\\n\" + ", "+\t\t\"     6  ldc <String \\\"SUCCESS\\\"> [19]\\n\" + ", "-\t\t\"     9  astore_1\\n\" + ", "-\t\t\"    10  new #21 java/util/ArrayList\\n\" + ", "+\t\t\"     9  astore_1 [tab]\\n\" + ", "+\t\t\"    10  new java/util/ArrayList [21]\\n\" + ", "-\t\t\"    14  invokespecial #22 <Method java/util/ArrayList.<init>()V>\\n\" + ", "-\t\t\"    17  astore_2\\n\" + ", "-\t\t\"    18  aload_1\\n\" + ", "-\t\t\"    19  astore 6\\n\" + ", "+\t\t\"    14  invokespecial java/util/ArrayList.<init>()V [22]\\n\" + ", "+\t\t\"    17  astore_2 [list]\\n\" + ", "+\t\t\"    18  aload_1 [tab]\\n\" + ", "+\t\t\"    19  astore [local_6]\\n\" + ", "-\t\t\"    22  istore 4\\n\" + ", "-\t\t\"    24  aload 6\\n\" + ", "+\t\t\"    22  istore [local_4]\\n\" + ", "+\t\t\"    24  aload [local_6]\\n\" + ", "-\t\t\"    27  istore 5\\n\" + ", "+\t\t\"    27  istore [local_5]\\n\" + ", "-\t\t\"    32  aload 6\\n\" + ", "-\t\t\"    34  iload 4\\n\" + ", "+\t\t\"    32  aload [local_6]\\n\" + ", "+\t\t\"    34  iload [local_4]\\n\" + ", "-\t\t\"    37  astore_3\\n\" + ", "-\t\t\"    38  aload_2\\n\" + ", "-\t\t\"    39  aload_3\\n\" + ", "-\t\t\"    40  invokeinterface [nargs : 2] #28 <Interface method java/util/List.add(Ljava/lang/Object;)Z>\\n\" + ", "+\t\t\"    37  astore_3 [arg]\\n\" + ", "+\t\t\"    38  aload_2 [list]\\n\" + ", "+\t\t\"    39  aload_3 [arg]\\n\" + ", "+\t\t\"    40  invokeinterface java/util/List.add(Ljava/lang/Object;)Z [28] [nargs: 2]\\n\" + ", "-\t\t\"    46  iinc 4 1\\n\" + ", "-\t\t\"    49  iload 4\\n\" + ", "-\t\t\"    51  iload 5\\n\" + ", "+\t\t\"    46  iinc 4 1 [local_4]\\n\" + ", "+\t\t\"    49  iload [local_4]\\n\" + ", "+\t\t\"    51  iload [local_5]\\n\" + ", "-\t\t\"    56  aload_2\\n\" + ", "-\t\t\"    57  invokeinterface [nargs : 1] #32 <Interface method java/util/List.iterator()Ljava/util/Iterator;>\\n\" + ", "-\t\t\"    62  astore 4\\n\" + ", "+\t\t\"    56  aload_2 [list]\\n\" + ", "+\t\t\"    57  invokeinterface java/util/List.iterator()Ljava/util/Iterator; [32] [nargs: 1]\\n\" + ", "+\t\t\"    62  astore [local_4]\\n\" + ", "-\t\t\"    67  aload 4\\n\" + ", "-\t\t\"    69  invokeinterface [nargs : 1] #38 <Interface method java/util/Iterator.next()Ljava/lang/Object;>\\n\" + ", "-\t\t\"    74  astore_3\\n\" + ", "-\t\t\"    75  getstatic #44 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    78  aload_3\\n\" + ", "-\t\t\"    79  invokevirtual #50 <Method java/io/PrintStream.print(Ljava/lang/Object;)V>\\n\" + ", "-\t\t\"    82  aload 4\\n\" + ", "-\t\t\"    84  invokeinterface [nargs : 1] #54 <Interface method java/util/Iterator.hasNext()Z>\\n\" + ", "+\t\t\"    67  aload [local_4]\\n\" + ", "+\t\t\"    69  invokeinterface java/util/Iterator.next()Ljava/lang/Object; [38] [nargs: 1]\\n\" + ", "+\t\t\"    74  astore_3 [arg]\\n\" + ", "+\t\t\"    75  getstatic java/lang/System.out Ljava/io/PrintStream; [44]\\n\" + ", "+\t\t\"    78  aload_3 [arg]\\n\" + ", "+\t\t\"    79  invokevirtual java/io/PrintStream.print(Ljava/lang/Object;)V [50]\\n\" + ", "+\t\t\"    82  aload [local_4]\\n\" + ", "+\t\t\"    84  invokeinterface java/util/Iterator.hasNext()Z [54] [nargs: 1]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82d9fcd4cb4e39ebee63c499effab9bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " public void testTypeRefGenericAll02_TypeArgumentl() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAll02_TypeArgumentl() throws CoreException", "diff": ["-\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.x [\t\tX<\ufffd|String|\ufffd> x;@130] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<\ufffd|A|\ufffd, B, C> t;@148] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<A, \ufffd|B|\ufffd, C> t;@151] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<A, B, \ufffd|C|\ufffd> t;@154] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<\ufffd|X|\ufffd<Y<Z<String>>>, Y<Z<String>>, Z<String>> bar() {@167] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<\ufffd|Y|\ufffd<Z<String>>>, Y<Z<String>>, Z<String>> bar() {@169] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<\ufffd|Z|\ufffd<String>>>, Y<Z<String>>, Z<String>> bar() {@171] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<\ufffd|String|\ufffd>>>, Y<Z<String>>, Z<String>> bar() {@173] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, \ufffd|Y|\ufffd<Z<String>>, Z<String>> bar() {@184] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<\ufffd|Z|\ufffd<String>>, Z<String>> bar() {@186] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<\ufffd|String|\ufffd>>, Z<String>> bar() {@188] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<String>>, \ufffd|Z|\ufffd<String>> bar() {@198] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<String>>, Z<\ufffd|String|\ufffd>> bar() {@200] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<\ufffd|X|\ufffd<Y<Z<String>>>, Y<Z<String>>, Z<String>>();@236] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<\ufffd|Y|\ufffd<Z<String>>>, Y<Z<String>>, Z<String>>();@238] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<\ufffd|Z|\ufffd<String>>>, Y<Z<String>>, Z<String>>();@240] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<\ufffd|String|\ufffd>>>, Y<Z<String>>, Z<String>>();@242] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, \ufffd|Y|\ufffd<Z<String>>, Z<String>>();@253] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<\ufffd|Z|\ufffd<String>>, Z<String>>();@255] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<\ufffd|String|\ufffd>>, Z<String>>();@257] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<String>>, \ufffd|Z|\ufffd<String>>();@267] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<String>>, Z<\ufffd|String|\ufffd>>();@269] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<\ufffd|A|\ufffd, Z<String>, X<String>> () {@96] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, \ufffd|Z|\ufffd<String>, X<String>> () {@99] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<\ufffd|String|\ufffd>, X<String>> () {@101] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<String>, \ufffd|X|\ufffd<String>> () {@110] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<String>, X<\ufffd|String|\ufffd>> () {@112] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.Test.field [\tTest<\ufffd|A|\ufffd, ? extends B, ? super C> field = new Test<A, Z<String>, X<String>> () {@52] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, \ufffd|B|\ufffd, ? extends C> foo(Test<? extends A, ? super B, C> param) {@306] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends A, ? super B, \ufffd|C|\ufffd> param) {@355] EXACT_MATCH\\n\" +", "-\t\t\"src/test02/Test.java test02.C [class C extends X<\ufffd|String|\ufffd> {}@428] EXACT_MATCH\"", "+\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.x [\t\tX<!|String|!> x;@130] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<!|A|!, B, C> t;@148] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<A, !|B|!, C> t;@151] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field:<anonymous>#1.t [\t\tTest<A, B, !|C|!> t;@154] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<!|X|!<Y<Z<String>>>, Y<Z<String>>, Z<String>> bar() {@167] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<!|Y|!<Z<String>>>, Y<Z<String>>, Z<String>> bar() {@169] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<!|Z|!<String>>>, Y<Z<String>>, Z<String>> bar() {@171] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<!|String|!>>>, Y<Z<String>>, Z<String>> bar() {@173] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, !|Y|!<Z<String>>, Z<String>> bar() {@184] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<!|Z|!<String>>, Z<String>> bar() {@186] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<!|String|!>>, Z<String>> bar() {@188] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<String>>, !|Z|!<String>> bar() {@198] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\tTest<X<Y<Z<String>>>, Y<Z<String>>, Z<!|String|!>> bar() {@200] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<!|X|!<Y<Z<String>>>, Y<Z<String>>, Z<String>>();@236] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<!|Y|!<Z<String>>>, Y<Z<String>>, Z<String>>();@238] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<!|Z|!<String>>>, Y<Z<String>>, Z<String>>();@240] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<!|String|!>>>, Y<Z<String>>, Z<String>>();@242] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, !|Y|!<Z<String>>, Z<String>>();@253] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<!|Z|!<String>>, Z<String>>();@255] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<!|String|!>>, Z<String>>();@257] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<String>>, !|Z|!<String>>();@267] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<X<Y<Z<String>>>,Y<Z<String>>,Z<String>> test02.Test.field:<anonymous>#1.bar() [\t\t\treturn new Test<X<Y<Z<String>>>, Y<Z<String>>, Z<!|String|!>>();@269] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<!|A|!, Z<String>, X<String>> () {@96] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, !|Z|!<String>, X<String>> () {@99] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<!|String|!>, X<String>> () {@101] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<String>, !|X|!<String>> () {@110] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<A, ? extends B, ? super C> field = new Test<A, Z<String>, X<!|String|!>> () {@112] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.Test.field [\tTest<!|A|!, ? extends B, ? super C> field = new Test<A, Z<String>, X<String>> () {@52] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, !|B|!, ? extends C> foo(Test<? extends A, ? super B, C> param) {@306] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java Test<? super A,B,? extends C> test02.Test.foo(Test<? extends A,? super B,C>) [\tTest<? super A, B, ? extends C> foo(Test<? extends A, ? super B, !|C|!> param) {@355] EXACT_MATCH\\n\" +", "+\t\t\"src/test02/Test.java test02.C [class C extends X<!|String|!> {}@428] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82eeb0bab1f76583e1326706bedcc09a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargTest.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void test007()", "signatureAfterChange": "  \tpublic void test007()", "diff": ["-\t\t\t\"Inexact argument for the varargs method byte2(byte[][]) from the type Y\\n\" + ", "+\t\t\t\"Ambiguous argument for the varargs method byte2(byte[]...) from the type Y. Argument should be casted to byte[][] to disambiguate, since it is passed as is\\n\" + ", "-\t\t\t\"The method byte2(byte[][]) in the type Y is not applicable for the arguments (byte)\\n\" + ", "+\t\t\t\"The method byte2(byte[]...) in the type Y is not applicable for the arguments (byte)\\n\" + ", "-\t\t\t\"The method byte2(byte[][]) in the type Y is not applicable for the arguments (byte[][][])\\n\" + ", "+\t\t\t\"The method byte2(byte[]...) in the type Y is not applicable for the arguments (byte[][][])\\n\" + ", "-\t\t\t\"Inexact argument for the varargs method object(Object[]) from the type Y\\n\" + ", "+\t\t\t\"Ambiguous argument for the varargs method object(Object...) from the type Y. Argument should be casted to Object[] to disambiguate, since it is passed as is\\n\" + ", "-\t\t\t\"Inexact argument for the varargs method object(Object[]) from the type Y\\n\" + ", "+\t\t\t\"Ambiguous argument for the varargs method object(Object...) from the type Y. Argument should be casted to Object[] to disambiguate, since it is passed as is\\n\" + ", "-\t\t\t\"Inexact argument for the varargs method object(Object[]) from the type Y\\n\" + ", "+\t\t\t\"Ambiguous argument for the varargs method object(Object...) from the type Y. Argument should be casted to Object[] to disambiguate, since it is passed as is\\n\" + ", "-\t\t\t\"Inexact argument for the varargs method object(Object[]) from the type Y\\n\" + ", "+\t\t\t\"Ambiguous argument for the varargs method object(Object...) from the type Y. Argument should be casted to Object[] to disambiguate, since it is passed as is\\n\" + ", "-\t\t\t\"Inexact argument for the varargs method object(Object[]) from the type Y\\n\" + ", "+\t\t\t\"Ambiguous argument for the varargs method object(Object...) from the type Y. Argument should be casted to Object[] to disambiguate, since it is passed as is\\n\" + ", "-\t\t\t\"Inexact argument for the varargs method object2(Object[][]) from the type Y\\n\" + ", "+\t\t\t\"Ambiguous argument for the varargs method object2(Object[]...) from the type Y. Argument should be casted to Object[][] to disambiguate, since it is passed as is\\n\" + ", "-\t\t\t\"The method object2(Object[][]) in the type Y is not applicable for the arguments (byte)\\n\" + ", "+\t\t\t\"The method object2(Object[]...) in the type Y is not applicable for the arguments (byte)\\n\" + ", "-\t\t\t\"The method object2(Object[][]) in the type Y is not applicable for the arguments (byte[])\\n\" + ", "+\t\t\t\"The method object2(Object[]...) in the type Y is not applicable for the arguments (byte[])\\n\" + ", "-\t\t\t\"Inexact argument for the varargs method object2(Object[][]) from the type Y\\n\" + ", "+\t\t\t\"Ambiguous argument for the varargs method object2(Object[]...) from the type Y. Argument should be casted to Object[][] to disambiguate, since it is passed as is\\n\" + ", "-\t\t\t\"The method object2(Object[][]) in the type Y is not applicable for the arguments (String)\\n\" + ", "+\t\t\t\"The method object2(Object[]...) in the type Y is not applicable for the arguments (String)\\n\" + ", "-\t\t\t\"Inexact argument for the varargs method object2(Object[][]) from the type Y\\n\" + ", "+\t\t\t\"Ambiguous argument for the varargs method object2(Object[]...) from the type Y. Argument should be casted to Object[][] to disambiguate, since it is passed as is\\n\" + ", "-\t\t\t\"Inexact argument for the varargs method string(String[]) from the type Y\\n\" + ", "+\t\t\t\"Ambiguous argument for the varargs method string(String...) from the type Y. Argument should be casted to String[] to disambiguate, since it is passed as is\\n\" + ", "-\t\t\t\"The method string(String[]) in the type Y is not applicable for the arguments (String[][])\\n\" + ", "+\t\t\t\"The method string(String...) in the type Y is not applicable for the arguments (String[][])\\n\" + ", "-\t\t\t\"The method string(String[]) in the type Y is not applicable for the arguments (Object)\\n\" + ", "+\t\t\t\"The method string(String...) in the type Y is not applicable for the arguments (Object)\\n\" + ", "-\t\t\t\"The method string(String[]) in the type Y is not applicable for the arguments (Object[])\\n\" + ", "+\t\t\t\"The method string(String...) in the type Y is not applicable for the arguments (Object[])\\n\" + ", "-\t\t\t\"The method string(String[]) in the type Y is not applicable for the arguments (Object[][])\\n\" + ", "+\t\t\t\"The method string(String...) in the type Y is not applicable for the arguments (Object[][])\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8550e1c036228379805bfe4e0946298a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void testStringPatternSimpleName05() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument05() throws CoreException", "diff": ["-\t// Search reference to a generic member type declared in a non-generic type", "-\tpublic void testStringPatternSimpleName05() throws CoreException {", "+\tpublic void testStringNoArgument05() throws CoreException {", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_obj [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_exc [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_thr [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_run [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_obj [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_exc [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_thr [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_run [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_thr [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_run [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_thr [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_run [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [GenericMember] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [GenericMember] COMPATIBLE_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bfbac86642bb7e2a5937835c797bc38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearch15Tests.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void testGenericTypeReferenceBA03() throws CoreException", "signatureAfterChange": " \tpublic void testGenericTypeReferenceBA03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gm [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gm_obj [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gm_exc [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gm_qmk [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gm_thr [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gm_run [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgm [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgm_obj [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgm_exc [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgm_qmk [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgm_thr [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgm_run [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gm [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gm_obj [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gm_exc [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gm_qmk [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gm_thr [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gm_run [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgm [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgm_obj [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgm_exc [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgm_qmk [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgm_thr [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgm_run [Member] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Member] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8dfb34a28fe63c64c636a1a8bbe008c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " public void testTypeRefGenericsTest08_TypeArgument() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericsTest08_TypeArgument() throws CoreException", "diff": ["-\t\t\"src/test08/Test.java test08.Test.z [\t\t\ufffd|Y|\ufffd<X<Object>, X<String>, X<Exception>>,@42] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tY<\ufffd|X|\ufffd<Object>, X<String>, X<Exception>>,@44] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tY<X<\ufffd|Object|\ufffd>, X<String>, X<Exception>>,@46] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tY<X<Object>, \ufffd|X|\ufffd<String>, X<Exception>>,@55] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tY<X<Object>, X<\ufffd|String|\ufffd>, X<Exception>>,@57] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tY<X<Object>, X<String>, \ufffd|X|\ufffd<Exception>>,@66] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tY<X<Object>, X<String>, X<\ufffd|Exception|\ufffd>>,@68] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\t\ufffd|X|\ufffd<Y<Object, String, X<Exception>>>,@83] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tX<\ufffd|Y|\ufffd<Object, String, X<Exception>>>,@85] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tX<Y<\ufffd|Object|\ufffd, String, X<Exception>>>,@87] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tX<Y<Object, \ufffd|String|\ufffd, X<Exception>>>,@95] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tX<Y<Object, String, \ufffd|X|\ufffd<Exception>>>,@103] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tX<Y<Object, String, X<\ufffd|Exception|\ufffd>>>,@105] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\t\ufffd|Z|\ufffd<Object, X<String>, X<X<Exception>>, X<X<X<java.io.Serializable>>>>,@121] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tZ<\ufffd|Object|\ufffd, X<String>, X<X<Exception>>, X<X<X<java.io.Serializable>>>>,@123] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tZ<Object, \ufffd|X|\ufffd<String>, X<X<Exception>>, X<X<X<java.io.Serializable>>>>,@131] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tZ<Object, X<\ufffd|String|\ufffd>, X<X<Exception>>, X<X<X<java.io.Serializable>>>>,@133] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tZ<Object, X<String>, \ufffd|X|\ufffd<X<Exception>>, X<X<X<java.io.Serializable>>>>,@142] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tZ<Object, X<String>, X<\ufffd|X|\ufffd<Exception>>, X<X<X<java.io.Serializable>>>>,@144] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tZ<Object, X<String>, X<X<\ufffd|Exception|\ufffd>>, X<X<X<java.io.Serializable>>>>,@146] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tZ<Object, X<String>, X<X<Exception>>, \ufffd|X|\ufffd<X<X<java.io.Serializable>>>>,@159] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tZ<Object, X<String>, X<X<Exception>>, X<\ufffd|X|\ufffd<X<java.io.Serializable>>>>,@161] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tZ<Object, X<String>, X<X<Exception>>, X<X<\ufffd|X|\ufffd<java.io.Serializable>>>>,@163] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tZ<Object, X<String>, X<X<Exception>>, X<X<X<\ufffd|java.io.Serializable|\ufffd>>>>,@165] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\t\ufffd|X|\ufffd<X<X<X<String>>>>> z;@193] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tX<\ufffd|X|\ufffd<X<X<String>>>>> z;@195] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tX<X<\ufffd|X|\ufffd<X<String>>>>> z;@197] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tX<X<X<\ufffd|X|\ufffd<String>>>>> z;@199] EXACT_MATCH\\n\" +", "-\t\t\"src/test08/Test.java test08.Test.z [\t\tX<X<X<X<\ufffd|String|\ufffd>>>>> z;@201] EXACT_MATCH\"", "+\t\t\"src/test08/Test.java test08.Test.z [\t\t!|Y|!<X<Object>, X<String>, X<Exception>>,@42] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tY<!|X|!<Object>, X<String>, X<Exception>>,@44] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tY<X<!|Object|!>, X<String>, X<Exception>>,@46] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tY<X<Object>, !|X|!<String>, X<Exception>>,@55] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tY<X<Object>, X<!|String|!>, X<Exception>>,@57] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tY<X<Object>, X<String>, !|X|!<Exception>>,@66] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tY<X<Object>, X<String>, X<!|Exception|!>>,@68] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\t!|X|!<Y<Object, String, X<Exception>>>,@83] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tX<!|Y|!<Object, String, X<Exception>>>,@85] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tX<Y<!|Object|!, String, X<Exception>>>,@87] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tX<Y<Object, !|String|!, X<Exception>>>,@95] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tX<Y<Object, String, !|X|!<Exception>>>,@103] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tX<Y<Object, String, X<!|Exception|!>>>,@105] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\t!|Z|!<Object, X<String>, X<X<Exception>>, X<X<X<java.io.Serializable>>>>,@121] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tZ<!|Object|!, X<String>, X<X<Exception>>, X<X<X<java.io.Serializable>>>>,@123] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tZ<Object, !|X|!<String>, X<X<Exception>>, X<X<X<java.io.Serializable>>>>,@131] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tZ<Object, X<!|String|!>, X<X<Exception>>, X<X<X<java.io.Serializable>>>>,@133] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tZ<Object, X<String>, !|X|!<X<Exception>>, X<X<X<java.io.Serializable>>>>,@142] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tZ<Object, X<String>, X<!|X|!<Exception>>, X<X<X<java.io.Serializable>>>>,@144] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tZ<Object, X<String>, X<X<!|Exception|!>>, X<X<X<java.io.Serializable>>>>,@146] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tZ<Object, X<String>, X<X<Exception>>, !|X|!<X<X<java.io.Serializable>>>>,@159] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tZ<Object, X<String>, X<X<Exception>>, X<!|X|!<X<java.io.Serializable>>>>,@161] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tZ<Object, X<String>, X<X<Exception>>, X<X<!|X|!<java.io.Serializable>>>>,@163] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tZ<Object, X<String>, X<X<Exception>>, X<X<X<!|java.io.Serializable|!>>>>,@165] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\t!|X|!<X<X<X<String>>>>> z;@193] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tX<!|X|!<X<X<String>>>>> z;@195] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tX<X<!|X|!<X<String>>>>> z;@197] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tX<X<X<!|X|!<String>>>>> z;@199] EXACT_MATCH\\n\" +", "+\t\t\"src/test08/Test.java test08.Test.z [\t\tX<X<X<X<!|String|!>>>>> z;@201] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e65c97f30a46a74b22e096b4bad5e75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic void testSinglePatternSimpleName06() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument06() throws CoreException", "diff": ["-\tpublic void testSinglePatternSimpleName06() throws CoreException {", "+\tpublic void testStringNoArgument06() throws CoreException {", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Generic<Object, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Generic<Exception, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Generic<?, ?, ?>.Member] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Generic<Object, Exception, RuntimeException>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Generic<Exception, Exception, RuntimeException>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Generic<?, ?, ?>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Generic<Object, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Generic<Exception, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Generic<?, ?, ?>.Member] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Generic<Object, Exception, RuntimeException>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Generic<Exception, Exception, RuntimeException>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Generic<?, ?, ?>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Generic<Object>.Member] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Generic<Exception>.Member] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic<?>.Member] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic<? extends Throwable>.Member] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic<? super RuntimeException>.Member] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Generic<Object>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Generic<Exception>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic<?>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic<? extends Throwable>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic<? super RuntimeException>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Generic<Object>.Member] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Generic<Exception>.Member] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Generic<?>.Member] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Generic<? extends Throwable>.Member] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic<? super RuntimeException>.Member] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Generic<Object>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Generic<Exception>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Generic<?>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Generic<? extends Throwable>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic<? super RuntimeException>.Member] COMPATIBLE_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eb6c6a2ae0d432bedc972fc39e9a661", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyTests.java", "commitBeforeChange": "8af6f49f0322a862c037292d56394f4a3cb86b86", "commitAfterChange": "fe7b697ca16cd240df01b1ad29e35b2693b4b160", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  public static Test suite()", "signatureAfterChange": "  public static Test suite()", "diff": ["-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyCreation\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testCreation\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyContents\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGeneral\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyOperations\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyMultipleCommit\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyCustomizedBuffer\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyCustomizedBuffer2\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyShared1\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyShared2\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyOnClassFile\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyMoveTypeToAnotherWorkingCopy\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testContents\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGeneral\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testOperations\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testMultipleCommit\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testCustomizedBuffer\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testCustomizedBuffer2\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testShared1\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testShared2\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testOnClassFile\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testMoveTypeToAnotherWorkingCopy\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalBinaryElement\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalCU\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalElementNotInWorkingCopy\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalField\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalImportDeclaration\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalImportContainer\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalInitializer\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalInnerType\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalInnerField\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalInnerMethod\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalMethod\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalPackageDeclaration\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalType\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyRenameMethod\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyChangeContent\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyChangeContentOfReadOnlyCU\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalBinaryElement\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalCU\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalElementNotInWorkingCopy\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalField\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalImportDeclaration\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalImportContainer\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalInitializer\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalInnerType\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalInnerField\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalInnerMethod\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalMethod\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalPackageDeclaration\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalType\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testRenameMethod\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testChangeContent\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testChangeContentOfReadOnlyCU\"));", "+\t", "+\tsuite.addTest(new WorkingCopyTests(\"testNonExistingCU\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ff46548ac229ee0e47636118fff6ce6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void testStringPatternSimpleName04() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument04() throws CoreException", "diff": ["-\t// Search reference to a generic member type declared in a generic type", "-\tpublic void testStringPatternSimpleName04() throws CoreException {", "+\tpublic void testStringNoArgument04() throws CoreException {", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric] COMPATIBLE_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90f22dc81d4bcd60bfda5522a24d7a19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void testStringNoArgument05() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument05() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_obj [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_exc [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_thr [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_run [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_thr [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_run [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [GenericMember] EQUIVALENT_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [GenericMember] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_obj [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_exc [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_thr [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_run [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [GenericMember] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_thr [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_run [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [GenericMember] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [GenericMember] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [GenericMember] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [GenericMember] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93dafca38a87673c7109f8a371fed6e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 150, "methodNumberAfterChange": 150, "signatureBeforeChange": " \tpublic void test048a()", "signatureAfterChange": " \tpublic void test048a()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X2.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic Object foo(I<String> z) { return null; }\\n\" + ", "+\t\t\t\"\t              ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(I<String>) of type X2 has the same erasure as foo(I<? extends T>) of type Y<T> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+/* javac 7", "+X.java:2: name clash: foo(I<String>) in X2 and foo(I<? extends T>) in Y have the same erasure, yet neither overrides the other", "+    public Object foo(I<String> z) { return null; }", "+                  ^", "+  where T is a type-variable:", "+    T extends Object declared in class Y", "+1 error", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9563803bd419950ec891a6fe2700daa9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "4ce47574d95f211bec6cf02737b4ec30e386f5b1", "commitAfterChange": "6c173db4ca33e9b5b355fdac19466f82485aafe6", "methodNumberBeforeChange": 342, "methodNumberAfterChange": 342, "signatureBeforeChange": " \tpublic void test0341() throws JavaModelException", "signatureAfterChange": " \tpublic void test0341() throws JavaModelException", "diff": ["-\t\t\t\t\"if (field != null) {\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new IOException();\\r\\n\" +", "-\t\t\t\t\"\t\t} else if (field == null) {\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new MalformedURLException();\\r\\n\" +", "-\t\t\t\t\"\t\t} else if (field == null) {\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new InterruptedIOException();\\r\\n\" +", "-\t\t\t\t\"\t\t} else {\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new UnsupportedEncodingException();\\r\\n\" +", "+\t\t\t\t\"if (field != null) {\\n\" +", "+\t\t\t\t\"\t\t\tthrow new IOException();\\n\" +", "+\t\t\t\t\"\t\t} else if (field == null) {\\n\" +", "+\t\t\t\t\"\t\t\tthrow new MalformedURLException();\\n\" +", "+\t\t\t\t\"\t\t} else if (field == null) {\\n\" +", "+\t\t\t\t\"\t\t\tthrow new InterruptedIOException();\\n\" +", "+\t\t\t\t\"\t\t} else {\\n\" +", "+\t\t\t\t\"\t\t\tthrow new UnsupportedEncodingException();\\n\" +", "-\t\t\t\t\"{\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new IOException();\\r\\n\" +", "+\t\t\t\t\"{\\n\" +", "+\t\t\t\t\"\t\t\tthrow new IOException();\\n\" +", "-\t\t\t\t\"if (field == null) {\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new MalformedURLException();\\r\\n\" +", "-\t\t\t\t\"\t\t} else if (field == null) {\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new InterruptedIOException();\\r\\n\" +", "-\t\t\t\t\"\t\t} else {\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new UnsupportedEncodingException();\\r\\n\" +", "+\t\t\t\t\"if (field == null) {\\n\" +", "+\t\t\t\t\"\t\t\tthrow new MalformedURLException();\\n\" +", "+\t\t\t\t\"\t\t} else if (field == null) {\\n\" +", "+\t\t\t\t\"\t\t\tthrow new InterruptedIOException();\\n\" +", "+\t\t\t\t\"\t\t} else {\\n\" +", "+\t\t\t\t\"\t\t\tthrow new UnsupportedEncodingException();\\n\" +", "-\t\t\t\t\"{\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new MalformedURLException();\\r\\n\" +", "+\t\t\t\t\"{\\n\" +", "+\t\t\t\t\"\t\t\tthrow new MalformedURLException();\\n\" +", "-\t\t\t\t\"if (field == null) {\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new InterruptedIOException();\\r\\n\" +", "-\t\t\t\t\"\t\t} else {\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new UnsupportedEncodingException();\\r\\n\" +", "+\t\t\t\t\"if (field == null) {\\n\" +", "+\t\t\t\t\"\t\t\tthrow new InterruptedIOException();\\n\" +", "+\t\t\t\t\"\t\t} else {\\n\" +", "+\t\t\t\t\"\t\t\tthrow new UnsupportedEncodingException();\\n\" +", "-\t\t\t\t\"{\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new InterruptedIOException();\\r\\n\" +", "+\t\t\t\t\"{\\n\" +", "+\t\t\t\t\"\t\t\tthrow new InterruptedIOException();\\n\" +", "-\t\t\t\t\"{\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new UnsupportedEncodingException();\\r\\n\" +", "+\t\t\t\t\"{\\n\" +", "+\t\t\t\t\"\t\t\tthrow new UnsupportedEncodingException();\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9605ff7722a0e7d5b6a8b656b24dbfdb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": " public void testTypeRefGenericAllG2_WildcardBounds() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAllG2_WildcardBounds() throws CoreException", "diff": ["-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends \ufffd|Throwable|\ufffd>.MemberGeneric<? extends Throwable> member = new Generic<Exception>().new MemberGeneric<Exception>();@566] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends \ufffd|Throwable|\ufffd> member = new Generic<Exception>().new MemberGeneric<Exception>();@601] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends \ufffd|Throwable|\ufffd>.MemberGeneric<? extends Throwable> member = new Generic<Exception>().new MemberGeneric<? extends Throwable>();@727] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends \ufffd|Throwable|\ufffd> member = new Generic<Exception>().new MemberGeneric<? extends Throwable>();@762] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends Throwable> member = new Generic<Exception>().new MemberGeneric<? extends \ufffd|Throwable|\ufffd>();@835] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends \ufffd|Throwable|\ufffd>.MemberGeneric<? extends Throwable> member = new Generic<? extends Throwable>().new MemberGeneric<Exception>();@898] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends \ufffd|Throwable|\ufffd> member = new Generic<? extends Throwable>().new MemberGeneric<Exception>();@933] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends Throwable> member = new Generic<? extends \ufffd|Throwable|\ufffd>().new MemberGeneric<Exception>();@975] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends \ufffd|Throwable|\ufffd>.MemberGeneric<? extends Throwable> member = new Generic<? extends Throwable>().new MemberGeneric<? extends Throwable>();@1069] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends \ufffd|Throwable|\ufffd> member = new Generic<? extends Throwable>().new MemberGeneric<? extends Throwable>();@1104] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends Throwable> member = new Generic<? extends \ufffd|Throwable|\ufffd>().new MemberGeneric<? extends Throwable>();@1146] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends Throwable> member = new Generic<? extends Throwable>().new MemberGeneric<? extends \ufffd|Throwable|\ufffd>();@1187] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super \ufffd|RuntimeException|\ufffd>.MemberGeneric<? super RuntimeException> member = new Generic<Exception>().new MemberGeneric<Exception>();@1248] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super \ufffd|RuntimeException|\ufffd> member = new Generic<Exception>().new MemberGeneric<Exception>();@1288] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super \ufffd|RuntimeException|\ufffd>.MemberGeneric<? super RuntimeException> member = new Generic<Exception>().new MemberGeneric<? super RuntimeException>();@1419] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super \ufffd|RuntimeException|\ufffd> member = new Generic<Exception>().new MemberGeneric<? super RuntimeException>();@1459] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super RuntimeException> member = new Generic<Exception>().new MemberGeneric<? super \ufffd|RuntimeException|\ufffd>();@1537] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super \ufffd|RuntimeException|\ufffd>.MemberGeneric<? super RuntimeException> member = new Generic<? super RuntimeException>().new MemberGeneric<Exception>();@1605] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super \ufffd|RuntimeException|\ufffd> member = new Generic<? super RuntimeException>().new MemberGeneric<Exception>();@1645] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super RuntimeException> member = new Generic<? super \ufffd|RuntimeException|\ufffd>().new MemberGeneric<Exception>();@1692] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super \ufffd|RuntimeException|\ufffd>.MemberGeneric<? super RuntimeException> member = new Generic<? super RuntimeException>().new MemberGeneric<? super RuntimeException>();@1791] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super \ufffd|RuntimeException|\ufffd> member = new Generic<? super RuntimeException>().new MemberGeneric<? super RuntimeException>();@1831] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super RuntimeException> member = new Generic<? super \ufffd|RuntimeException|\ufffd>().new MemberGeneric<? super RuntimeException>();@1878] EXACT_MATCH\\n\" +", "-\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super RuntimeException> member = new Generic<? super RuntimeException>().new MemberGeneric<? super \ufffd|RuntimeException|\ufffd>();@1924] EXACT_MATCH\"", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends !|Throwable|!>.MemberGeneric<? extends Throwable> member = new Generic<Exception>().new MemberGeneric<Exception>();@566] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends !|Throwable|!> member = new Generic<Exception>().new MemberGeneric<Exception>();@601] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends !|Throwable|!>.MemberGeneric<? extends Throwable> member = new Generic<Exception>().new MemberGeneric<? extends Throwable>();@727] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends !|Throwable|!> member = new Generic<Exception>().new MemberGeneric<? extends Throwable>();@762] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends Throwable> member = new Generic<Exception>().new MemberGeneric<? extends !|Throwable|!>();@835] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends !|Throwable|!>.MemberGeneric<? extends Throwable> member = new Generic<? extends Throwable>().new MemberGeneric<Exception>();@898] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends !|Throwable|!> member = new Generic<? extends Throwable>().new MemberGeneric<Exception>();@933] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends Throwable> member = new Generic<? extends !|Throwable|!>().new MemberGeneric<Exception>();@975] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends !|Throwable|!>.MemberGeneric<? extends Throwable> member = new Generic<? extends Throwable>().new MemberGeneric<? extends Throwable>();@1069] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends !|Throwable|!> member = new Generic<? extends Throwable>().new MemberGeneric<? extends Throwable>();@1104] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends Throwable> member = new Generic<? extends !|Throwable|!>().new MemberGeneric<? extends Throwable>();@1146] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? extends Throwable>.MemberGeneric<? extends Throwable> member = new Generic<? extends Throwable>().new MemberGeneric<? extends !|Throwable|!>();@1187] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super !|RuntimeException|!>.MemberGeneric<? super RuntimeException> member = new Generic<Exception>().new MemberGeneric<Exception>();@1248] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super !|RuntimeException|!> member = new Generic<Exception>().new MemberGeneric<Exception>();@1288] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super !|RuntimeException|!>.MemberGeneric<? super RuntimeException> member = new Generic<Exception>().new MemberGeneric<? super RuntimeException>();@1419] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super !|RuntimeException|!> member = new Generic<Exception>().new MemberGeneric<? super RuntimeException>();@1459] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super RuntimeException> member = new Generic<Exception>().new MemberGeneric<? super !|RuntimeException|!>();@1537] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super !|RuntimeException|!>.MemberGeneric<? super RuntimeException> member = new Generic<? super RuntimeException>().new MemberGeneric<Exception>();@1605] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super !|RuntimeException|!> member = new Generic<? super RuntimeException>().new MemberGeneric<Exception>();@1645] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super RuntimeException> member = new Generic<? super !|RuntimeException|!>().new MemberGeneric<Exception>();@1692] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super !|RuntimeException|!>.MemberGeneric<? super RuntimeException> member = new Generic<? super RuntimeException>().new MemberGeneric<? super RuntimeException>();@1791] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super !|RuntimeException|!> member = new Generic<? super RuntimeException>().new MemberGeneric<? super RuntimeException>();@1831] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super RuntimeException> member = new Generic<? super !|RuntimeException|!>().new MemberGeneric<? super RuntimeException>();@1878] EXACT_MATCH\\n\" +", "+\t\t\"src/g2/f/s/def/R3.java g2.f.s.def.R3.{} [\t\tGeneric<? super RuntimeException>.MemberGeneric<? super RuntimeException> member = new Generic<? super RuntimeException>().new MemberGeneric<? super !|RuntimeException|!>();@1924] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9644473a2938208f0252f025de742601", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void testStringPatternSimpleName03() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument03() throws CoreException", "diff": ["-\t// Search reference to a member type declared in a generic type", "-\tpublic void testStringPatternSimpleName03() throws CoreException {", "+\tpublic void testStringNoArgument03() throws CoreException {", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Member] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Member] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Member] COMPATIBLE_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98f679223847df916fd1cf94eb67530e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericConstructorTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void testConstructorReferencesStringPatternSingleParamArguments04() throws CoreException", "signatureAfterChange": " \tpublic void testConstructorReferencesStringPatternSingleParamArguments02() throws CoreException", "diff": ["+\t\tsearch(\"<? extends Exception> Single\", CONSTRUCTOR, REFERENCES, scope, resultCollector);", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object())] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), new Throwable())] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(gs)] EQUIVALENT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), gs)] EQUIVALENT_RAW_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), new Throwable())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(gs)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), gs)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new Single<Object>(new Object())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new <Throwable>Single<Object>(new Object(), new Throwable())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new Single<Object>(gs)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new <Exception>Single<Object>(new Exception(), gs)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new Single<Exception>(new Exception())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new <Exception>Single<Exception>(new Exception(), new Exception())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new Single<Exception>(gs)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new <Exception>Single<Exception>(new Exception(), gs)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testRuntimeException() [new Single<RuntimeException>(new RuntimeException())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testRuntimeException() [new <RuntimeException>Single<RuntimeException>(new RuntimeException(), new RuntimeException())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testRuntimeException() [new Single<RuntimeException>(gs)] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testRuntimeException() [new <RuntimeException>Single<RuntimeException>(new RuntimeException(), gs)] EQUIVALENT_ERASURE_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c2b27b15f8cbfdfe8d166ed10f679ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InnerEmulationTest.java", "commitBeforeChange": "66645ff7b2e7900a6e51de489fc3a747bdbf1458", "commitAfterChange": "a24bdada3de440570b8b103bca0325b799f298f1", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": "  public void test087()", "signatureAfterChange": "  public void test087()", "diff": ["+\t\ttrue,", "-\t\t\t\"public class X {\t\\n\"+", "-\t\t\t\"\tpublic static void main(String[] arguments) {\t\\n\"+", "-\t\t\t\"\t\tnew X().f();\t\\n\"+", "-\t\t\t\"\t}\t\\n\"+", "-\t\t\t\"    void f () {\t\\n\"+", "-\t\t\t\"        class C {\t\\n\"+", "-\t\t\t\"        \tC() {\t\\n\"+", "+\t\t\t\"public class X {\\n\"+", "+\t\t\t\"\tpublic static void main(String[] arguments) {\\n\"+", "+\t\t\t\"\t\tnew X().f();\\n\"+", "+\t\t\t\"\t}\\n\"+", "+\t\t\t\"    void f () {\\n\"+", "+\t\t\t\"        class C {\\n\"+", "+\t\t\t\"        \tC() {\\n\"+", "-\t\t\t\"        \t}\t\\n\"+", "-\t\t\t\"        }\t\\n\"+", "-\t\t\t\"        class N extends X {\t\\n\"+", "+\t\t\t\"        \t}\\n\"+", "+\t\t\t\"        }\\n\"+", "+\t\t\t\"        class N extends X {\\n\"+", "-\t\t\t\"        }\t\\n\"+", "-\t\t\t\"        new N();\t\\n\"+", "+\t\t\t\"        }\\n\"+", "+\t\t\t\"        new N();\\n\"+", "-\t\t\t\"}\t\\n\"", "+\t\t\t\"}\\n\"", "-\t\t\"[X$1N]\");", "+\t\t\"\",", "+\t\t\"[X$1N]\", // should be [X] indeed", "+\t\t\"\",", "+\t\tJavacTestOptions.EclipseHasABug.EclipseBug235809);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c3836c8f9d78346ed634b5df63c8e6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic void testStringAnyStrings05() throws CoreException", "signatureAfterChange": " \tpublic void testStringAnyStrings05() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R1.java [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_wld [Generic<?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_wld [Generic<?>] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_run [Generic<? super RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_run [Generic<? super RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_wld [Generic<?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_wld [Generic<?>] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_run [Generic<? super RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_run [Generic<? super RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [GenericMember<?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [GenericMember<?>] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [GenericMember<? super RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [GenericMember<? super RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [GenericMember<?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [GenericMember<?>] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [GenericMember<? super RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [GenericMember<? super RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [Generic<?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [Generic<?>] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [Generic<? super RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [Generic<? super RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic<?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic<?>] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic<? super RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic<? super RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Generic<?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Generic<?>] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic<? super RuntimeException>] COMPATIBLE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic<? super RuntimeException>] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c78ff9d9c5f3b78be8fb2d88b3cbb9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 726, "methodNumberAfterChange": 726, "signatureBeforeChange": " public void test0706b()", "signatureAfterChange": " public void test0706b()", "diff": ["-\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return;", "-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "-\t\t\"\tAA<CC> res = bb.test();\\n\" +", "-\t\t\"\t                ^^^^\\n\" +", "-\t\t\"The method test() is ambiguous for the type BB\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. ERROR in X.java (at line 5)\\n\" +", "-\t\t\"\tBB res2 = bb.test();\\n\" +", "-\t\t\"\t             ^^^^\\n\" +", "-\t\t\"The method test() is ambiguous for the type BB\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tAA<CC> res = bb.test();\\n\" + ", "+\t\t\"\t                ^^^^\\n\" + ", "+\t\t\"The method test() is ambiguous for the type BB\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tBB res2 = bb.test();\\n\" + ", "+\t\t\"\t             ^^^^\\n\" + ", "+\t\t\"The method test() is ambiguous for the type BB\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\"\tclass BB extends AA<CC> { <U> BB test() {return null;} }\\n\" + ", "+\t\t\"\t                                 ^^^^^^\\n\" + ", "+\t\t\"Name clash: The method test() of type BB has the same erasure as test() of type AA<T> but does not override it\\n\" + ", "-\t\t// 4: reference to test is ambiguous, both method test() in AA<CC> and method <U>test() in BB match", "-\t\t// 4: incompatible types on the assignment", "-\t\t// 5: reference to test is ambiguous, both method test() in AA<CC> and method <U>test() in BB match", "-\t\t// 5: incompatible types on the assignment", "+/*", "+X.java:4: reference to test is ambiguous, both method test() in AA and method <U>test() in BB match", "+                AA<CC> res = bb.test();", "+                               ^", "+  where U is a type-variable:", "+    U extends Object declared in method <U>test()", "+X.java:4: incompatible types", "+                AA<CC> res = bb.test();", "+                                    ^", "+  required: AA<CC>", "+  found:    AA<Object>", "+X.java:5: reference to test is ambiguous, both method test() in AA and method <U>test() in BB match", "+                BB res2 = bb.test();", "+                            ^", "+  where U is a type-variable:", "+    U extends Object declared in method <U>test()", "+X.java:5: incompatible types", "+                BB res2 = bb.test();", "+                                 ^", "+  required: BB", "+  found:    AA<Object>", "+X.java:9: name clash: <U>test() in BB and test() in AA have the same erasure, yet neither overrides the other", "+class BB extends AA<CC> { <U> BB test() {return null;} }", "+                                 ^", "+  where U is a type-variable:", "+    U extends Object declared in method <U>test()", "+5 errors", "+ */", "-\t\t// incompatible types on both assignments", "+/*", "+X.java:4: incompatible types", "+                AA<CC> res = bb.test();", "+                                    ^", "+  required: AA<CC>", "+  found:    AA<Object>", "+X.java:5: incompatible types", "+                BB res2 = bb.test();", "+                                 ^", "+  required: BB", "+  found:    AA<Object>", "+2 errors", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9eccce2bd2285b07e1f611602c40f846", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void testStringParameterizedSingleArgument01() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedSingleArgument01() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R1.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R1.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a67d53b1cf6e71c4a18e540b6c3d7265", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void testStringNoArgument08() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument08() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_obj [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_exc [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_thr [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_run [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_obj [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_exc [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_thr [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_run [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_thr [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_run [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_thr [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_run [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [NonGeneric.GenericMember] COMPATIBLE_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [NonGeneric.GenericMember] EQUIVALENT_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a76717f752ecd7b8ec1c972cefc95477", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 332, "methodNumberAfterChange": 331, "signatureBeforeChange": " public void testBug330313_wksp1_53_njl_bnl()", "signatureAfterChange": " public void testBug330313_wksp1_53_njl_bnl()", "diff": ["-\t\t\"\t\t\t\t\t{ 24, 15 } },\\n\" + ", "+\t\t\"\t\t\t{ 24, 15 } },\\n\" + ", "-\t\t\"\t\t\t\t\t{ 8, 18 },\\n\" + ", "-\t\t\"\t\t\t\t\t{ 15, 64 },\\n\" + ", "-\t\t\"\t\t\t\t\t{ 23, 16 },\\n\" + ", "-\t\t\"\t\t\t\t\t{ 24, 17 },\\n\" + ", "-\t\t\"\t\t\t\t\t{ 55, 0 } },\\n\" + ", "+\t\t\"\t\t\t{ 8, 18 },\\n\" + ", "+\t\t\"\t\t\t{ 15, 64 },\\n\" + ", "+\t\t\"\t\t\t{ 23, 16 },\\n\" + ", "+\t\t\"\t\t\t{ 24, 17 },\\n\" + ", "+\t\t\"\t\t\t{ 55, 0 } },\\n\" + ", "-\t\t\"\t\t\t{\\n\" + ", "-\t\t\"\t\t\t\t\t/* EOL */{ 0, -1 },\\n\" + ", "-\t\t\"\t\t\t\t\t{ 8, 1792 },\\n\" + ", "-\t\t\"\t\t\t\t\t{ 23, 24 },\\n\" + ", "-\t\t\"\t\t\t\t\t{ 24, 25 },\\n\" + ", "-\t\t\"\t\t\t\t\t{ 40, 23 },\\n\" + ", "-\t\t\"\t\t\t\t\t{ 55, 22 },\\n\" + ", "-\t\t\"\t\t\t\t\t{ 103, 19 },\\n\" + ", "-\t\t\"\t\t\t\t\t{ 104, 20 },\\n\" + ", "-\t\t\"\t\t\t\t\t{ 108, 21 },\\n\" + ", "-\t\t\"\t\t\t\t\t{ 12, 1856 },\\n\" + ", "-\t\t\"\t\t\t\t\t{ 13, 1920 } }, };\\n\" + ", "+\t\t\"\t\t\t{/* EOL */\\n\" + ", "+\t\t\"\t\t\t{ 0, -1 },\\n\" + ", "+\t\t\"\t\t\t{ 8, 1792 },\\n\" + ", "+\t\t\"\t\t\t{ 23, 24 },\\n\" + ", "+\t\t\"\t\t\t{ 24, 25 },\\n\" + ", "+\t\t\"\t\t\t{ 40, 23 },\\n\" + ", "+\t\t\"\t\t\t{ 55, 22 },\\n\" + ", "+\t\t\"\t\t\t{ 103, 19 },\\n\" + ", "+\t\t\"\t\t\t{ 104, 20 },\\n\" + ", "+\t\t\"\t\t\t{ 108, 21 },\\n\" + ", "+\t\t\"\t\t\t{ 12, 1856 },\\n\" + ", "+\t\t\"\t\t\t{ 13, 1920 } },\\n\" + ", "+\t\t\"\t};\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9232a34a2991cb744b8ebf547690dcb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic void testStringAnyStrings03() throws CoreException", "signatureAfterChange": " \tpublic void testStringAnyStrings03() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [GenericMember] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [GenericMember] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Member] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Member] COMPATIBLE_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Member] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Member] EQUIVALENT_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2a6fdb091e1a6f9ac165e35cfb064e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StackMapAttributeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " \tpublic void test046()", "signatureAfterChange": " \tpublic void test046()", "diff": ["-\t\t\t\t\"public class X {\\r\\n\" + ", "-\t\t\t\t\"\tclass E1 extends RuntimeException {\\r\\n\" + ", "-\t\t\t\t\"\t\tprivate static final long serialVersionUID = 1L;\\r\\n\" + ", "-\t\t\t\t\"\t}\\r\\n\" + ", "-\t\t\t\t\"\tstatic Object bar() {\\r\\n\" + ", "-\t\t\t\t\"\t\treturn new Object() {\\r\\n\" + ", "-\t\t\t\t\"\t\t\tpublic void foo() {\\r\\n\" + ", "-\t\t\t\t\"\t\t\t\tif (condition())\\r\\n\" + ", "-\t\t\t\t\"\t\t\t\t\tthrow new E1();\\r\\n\" + ", "-\t\t\t\t\"\t\t\t}\\r\\n\" + ", "-\t\t\t\t\"\t\t};\\r\\n\" + ", "-\t\t\t\t\"\t}\\r\\n\" + ", "-\t\t\t\t\"\tstatic boolean condition() {\\r\\n\" + ", "-\t\t\t\t\"\t\treturn false;\\r\\n\" + ", "-\t\t\t\t\"\t}\\r\\n\" + ", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\r\\n\" + ", "-\t\t\t\t\"\t}\\r\\n\" + ", "-\t\t\t\t\"}\\r\\n\" + ", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tclass E1 extends RuntimeException {\\n\" + ", "+\t\t\t\t\"\t\tprivate static final long serialVersionUID = 1L;\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tstatic Object bar() {\\n\" + ", "+\t\t\t\t\"\t\treturn new Object() {\\n\" + ", "+\t\t\t\t\"\t\t\tpublic void foo() {\\n\" + ", "+\t\t\t\t\"\t\t\t\tif (condition())\\n\" + ", "+\t\t\t\t\"\t\t\t\t\tthrow new E1();\\n\" + ", "+\t\t\t\t\"\t\t\t}\\n\" + ", "+\t\t\t\t\"\t\t};\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tstatic boolean condition() {\\n\" + ", "+\t\t\t\t\"\t\treturn false;\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b330603744202ea89a221f7d5e85e521", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " \tpublic void testStringNestedMultipleArguments05() throws CoreException", "signatureAfterChange": " \tpublic void testStringNestedMultipleArguments05() throws CoreException", "diff": ["-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_wld [NGM.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic<NGM.Generic<?, ?, ?>,NGM.Generic<?, ?, ?>,NGM.Generic<?, ?, ?>>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_obj [NGM.Generic<Object, Exception, RuntimeException>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_wld [NGM.Generic<NGS.Generic<?>, NGS.Generic<?>, NGS.Generic<?>>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_www [NGM.Generic<NGS.Generic<?>, NGS.Generic<NGS.Generic<?>>, NGS.Generic<NGS.Generic<NGS.Generic<?>>>>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_obj [NGM.Generic<NGS.Generic<Object>, NGS.Generic<? extends Throwable>, NGS.Generic<? super RuntimeException>>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_wld [NGM.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [NGM.Generic<g3.t.def.NGM.Generic<?, ?, ?>, g3.t.def.NGM.Generic<?, ?, ?>, g3.t.def.NGM.Generic<?, ?, ?>>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [NGM.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [NGM.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [NGM.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_obj [NGM.Generic<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_wld [NGM.Generic<g3.t.def.NGS.Generic<?>, g3.t.def.NGS.Generic<?>, g3.t.def.NGS.Generic<?>>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_www [NGM.Generic<g3.t.def.NGS.Generic<?>, g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<?>>, g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<?>>>>] COMPATIBLE_MATCH\\n\" +", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_obj [NGM.Generic<g3.t.def.NGS.Generic<java.lang.Object>, g3.t.def.NGS.Generic<? extends java.lang.Throwable>, g3.t.def.NGS.Generic<? super java.lang.RuntimeException>>] COMPATIBLE_MATCH\",", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_wld [NGM.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic<NGM.Generic<?, ?, ?>,NGM.Generic<?, ?, ?>,NGM.Generic<?, ?, ?>>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_obj [NGM.Generic<Object, Exception, RuntimeException>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_wld [NGM.Generic<NGS.Generic<?>, NGS.Generic<?>, NGS.Generic<?>>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_www [NGM.Generic<NGS.Generic<?>, NGS.Generic<NGS.Generic<?>>, NGS.Generic<NGS.Generic<NGS.Generic<?>>>>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_obj [NGM.Generic<NGS.Generic<Object>, NGS.Generic<? extends Throwable>, NGS.Generic<? super RuntimeException>>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_wld [NGM.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [NGM.Generic<g3.t.def.NGM.Generic<?, ?, ?>, g3.t.def.NGM.Generic<?, ?, ?>, g3.t.def.NGM.Generic<?, ?, ?>>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [NGM.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [NGM.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [NGM.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_obj [NGM.Generic<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_wld [NGM.Generic<g3.t.def.NGS.Generic<?>, g3.t.def.NGS.Generic<?>, g3.t.def.NGS.Generic<?>>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_www [NGM.Generic<g3.t.def.NGS.Generic<?>, g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<?>>, g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<?>>>>] EQUIVALENT_MATCH\\n\" +", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_obj [NGM.Generic<g3.t.def.NGS.Generic<java.lang.Object>, g3.t.def.NGS.Generic<? extends java.lang.Throwable>, g3.t.def.NGS.Generic<? super java.lang.RuntimeException>>] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6374760db48f8bf5993834a0a32f9f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "3a514d6cf7a163df7c9aa1b24e69e8f3a5b39e3c", "commitAfterChange": "0aeaaba7ea908a19742d309ce070fd6d99b6c4d4", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void testJavadocTypeStringReferenceWithJavadoc() throws CoreException", "signatureAfterChange": " \tpublic void testJavadocTypeStringReferenceWithJavadoc() throws CoreException", "diff": ["-//\t\tJavaSearchResultCollector result = new JavaSearchResultCollector();", "-//\t\tresult.showAccuracy = true;", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\\n\"+", "-\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH\",", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocInvalidRef.java void j1.JavadocInvalidRef.invalid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\" + ", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\\n\"+", "+\t\t\t\"src/j1/JavadocValidRef.java void j1.JavadocValidRef.valid() [JavadocSearched] EXACT_MATCH INSIDE_JAVADOC\",", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb440e10f1962b684a70ee74a7e85b60", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": " public void testTypeRefGenericsTest11_TypeArgument() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericsTest11_TypeArgument() throws CoreException", "diff": ["-\t\t\"src/test11/Test.java test11.Test.z [\t\t\ufffd|Y|\ufffd<X<? extends Object>, X<? super String>, X<? extends Exception>>,@42] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tY<\ufffd|X|\ufffd<? extends Object>, X<? super String>, X<? extends Exception>>,@44] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tY<X<? extends Object>, \ufffd|X|\ufffd<? super String>, X<? extends Exception>>,@65] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tY<X<? extends Object>, X<? super String>, \ufffd|X|\ufffd<? extends Exception>>,@84] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\t\ufffd|X|\ufffd<Y<? extends Object, ? super String, X<? extends Exception>>>,@111] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tX<\ufffd|Y|\ufffd<? extends Object, ? super String, X<? extends Exception>>>,@113] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tX<Y<? extends Object, ? super String, \ufffd|X|\ufffd<? extends Exception>>>,@149] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\t\ufffd|Z|\ufffd<? extends Object, X<? super String>, X<X<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@177] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, \ufffd|X|\ufffd<? super String>, X<X<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@197] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, \ufffd|X|\ufffd<X<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@216] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<\ufffd|X|\ufffd<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@218] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<X<? extends Exception>>, \ufffd|X|\ufffd<X<X<? extends java.io.Serializable>>>>,@243] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<X<? extends Exception>>, X<\ufffd|X|\ufffd<X<? extends java.io.Serializable>>>>,@245] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<X<? extends Exception>>, X<X<\ufffd|X|\ufffd<? extends java.io.Serializable>>>>,@247] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\t\ufffd|X|\ufffd<X<X<X<? super String>>>>> z;@287] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tX<\ufffd|X|\ufffd<X<X<? super String>>>>> z;@289] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tX<X<\ufffd|X|\ufffd<X<? super String>>>>> z;@291] EXACT_MATCH\\n\" +", "-\t\t\"src/test11/Test.java test11.Test.z [\t\tX<X<X<\ufffd|X|\ufffd<? super String>>>>> z;@293] EXACT_MATCH\"", "+\t\t\"src/test11/Test.java test11.Test.z [\t\t!|Y|!<X<? extends Object>, X<? super String>, X<? extends Exception>>,@42] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tY<!|X|!<? extends Object>, X<? super String>, X<? extends Exception>>,@44] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tY<X<? extends Object>, !|X|!<? super String>, X<? extends Exception>>,@65] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tY<X<? extends Object>, X<? super String>, !|X|!<? extends Exception>>,@84] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\t!|X|!<Y<? extends Object, ? super String, X<? extends Exception>>>,@111] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tX<!|Y|!<? extends Object, ? super String, X<? extends Exception>>>,@113] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tX<Y<? extends Object, ? super String, !|X|!<? extends Exception>>>,@149] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\t!|Z|!<? extends Object, X<? super String>, X<X<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@177] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, !|X|!<? super String>, X<X<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@197] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, !|X|!<X<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@216] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<!|X|!<? extends Exception>>, X<X<X<? extends java.io.Serializable>>>>,@218] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<X<? extends Exception>>, !|X|!<X<X<? extends java.io.Serializable>>>>,@243] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<X<? extends Exception>>, X<!|X|!<X<? extends java.io.Serializable>>>>,@245] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tZ<? extends Object, X<? super String>, X<X<? extends Exception>>, X<X<!|X|!<? extends java.io.Serializable>>>>,@247] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\t!|X|!<X<X<X<? super String>>>>> z;@287] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tX<!|X|!<X<X<? super String>>>>> z;@289] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tX<X<!|X|!<X<? super String>>>>> z;@291] EXACT_MATCH\\n\" +", "+\t\t\"src/test11/Test.java test11.Test.z [\t\tX<X<X<!|X|!<? super String>>>>> z;@293] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcc5409010cc5a30ff7024d7d36c0b6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java", "commitBeforeChange": "fa568df637cfba49109de9a23ecbf57eda89325f", "commitAfterChange": "699f85df0061a8b41250aa99562a0fc140375ee5", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " public void test435219i() throws JavaModelException", "signatureAfterChange": " public void test435219i() throws JavaModelException", "diff": ["-\tassertResults(\"print[METHOD_IMPORT]{print, Ljava.io.PrintStream;, (C)V, null, null, print, null, [188, 191], 30}\\n\" +", "-\t\t\t\"print[METHOD_IMPORT]{print, Ljava.io.PrintStream;, (D)V, null, null, print, null, [188, 191], 30}\\n\" +", "-\t\t\t\"print[METHOD_IMPORT]{print, Ljava.io.PrintStream;, (F)V, null, null, print, null, [188, 191], 30}\\n\" +", "-\t\t\t\"print[METHOD_IMPORT]{print, Ljava.io.PrintStream;, (I)V, null, null, print, null, [188, 191], 30}\\n\" +", "-\t\t\t\"print[METHOD_IMPORT]{print, Ljava.io.PrintStream;, (J)V, null, null, print, null, [188, 191], 30}\\n\" +", "-\t\t\t\"print[METHOD_IMPORT]{print, Ljava.io.PrintStream;, (Ljava.lang.Object;)V, null, null, print, null, [188, 191], 30}\\n\" +", "-\t\t\t\"print[METHOD_IMPORT]{print, Ljava.io.PrintStream;, (Ljava.lang.String;)V, null, null, print, null, [188, 191], 30}\\n\" +", "-\t\t\t\"print[METHOD_IMPORT]{print, Ljava.io.PrintStream;, (Z)V, null, null, print, null, [188, 191], 30}\\n\" +", "-\t\t\t\"print[METHOD_IMPORT]{print, Ljava.io.PrintStream;, ([C)V, null, null, print, null, [188, 191], 30}\\n\" +", "-\t\t\t\"println[METHOD_IMPORT]{println, Ljava.io.PrintStream;, ()V, null, null, println, null, [188, 191], 30}\\n\" +", "-\t\t\t\"println[METHOD_IMPORT]{println, Ljava.io.PrintStream;, (C)V, null, null, println, null, [188, 191], 30}\\n\" +", "-\t\t\t\"println[METHOD_IMPORT]{println, Ljava.io.PrintStream;, (D)V, null, null, println, null, [188, 191], 30}\\n\" +", "-\t\t\t\"println[METHOD_IMPORT]{println, Ljava.io.PrintStream;, (F)V, null, null, println, null, [188, 191], 30}\\n\" +", "-\t\t\t\"println[METHOD_IMPORT]{println, Ljava.io.PrintStream;, (I)V, null, null, println, null, [188, 191], 30}\\n\" +", "-\t\t\t\"println[METHOD_IMPORT]{println, Ljava.io.PrintStream;, (J)V, null, null, println, null, [188, 191], 30}\\n\" +", "-\t\t\t\"println[METHOD_IMPORT]{println, Ljava.io.PrintStream;, (Ljava.lang.Object;)V, null, null, println, null, [188, 191], 30}\\n\" +", "-\t\t\t\"println[METHOD_IMPORT]{println, Ljava.io.PrintStream;, (Ljava.lang.String;)V, null, null, println, null, [188, 191], 30}\\n\" +", "-\t\t\t\"println[METHOD_IMPORT]{println, Ljava.io.PrintStream;, (Z)V, null, null, println, null, [188, 191], 30}\\n\" +", "-\t\t\t\"println[METHOD_IMPORT]{println, Ljava.io.PrintStream;, ([C)V, null, null, println, null, [188, 191], 30}\\n\" +", "-\t\t\t\"printf[METHOD_IMPORT]{printf, Ljava.io.PrintStream;, (Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintStream;, null, null, printf, null, [188, 191], 35}\\n\" +", "-\t\t\t\"printf[METHOD_IMPORT]{printf, Ljava.io.PrintStream;, (Ljava.util.Locale;Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintStream;, null, null, printf, null, [188, 191], 35}\", requestor.getResults());", "+\tassertResults(\"print[METHOD_NAME_REFERENCE]{print, Ljava.io.PrintStream;, (C)V, null, null, print, null, [188, 191], 30}\\n\" +", "+\t\t\t\"print[METHOD_NAME_REFERENCE]{print, Ljava.io.PrintStream;, (D)V, null, null, print, null, [188, 191], 30}\\n\" +", "+\t\t\t\"print[METHOD_NAME_REFERENCE]{print, Ljava.io.PrintStream;, (F)V, null, null, print, null, [188, 191], 30}\\n\" +", "+\t\t\t\"print[METHOD_NAME_REFERENCE]{print, Ljava.io.PrintStream;, (I)V, null, null, print, null, [188, 191], 30}\\n\" +", "+\t\t\t\"print[METHOD_NAME_REFERENCE]{print, Ljava.io.PrintStream;, (J)V, null, null, print, null, [188, 191], 30}\\n\" +", "+\t\t\t\"print[METHOD_NAME_REFERENCE]{print, Ljava.io.PrintStream;, (Ljava.lang.Object;)V, null, null, print, null, [188, 191], 30}\\n\" +", "+\t\t\t\"print[METHOD_NAME_REFERENCE]{print, Ljava.io.PrintStream;, (Ljava.lang.String;)V, null, null, print, null, [188, 191], 30}\\n\" +", "+\t\t\t\"print[METHOD_NAME_REFERENCE]{print, Ljava.io.PrintStream;, (Z)V, null, null, print, null, [188, 191], 30}\\n\" +", "+\t\t\t\"print[METHOD_NAME_REFERENCE]{print, Ljava.io.PrintStream;, ([C)V, null, null, print, null, [188, 191], 30}\\n\" +", "+\t\t\t\"println[METHOD_NAME_REFERENCE]{println, Ljava.io.PrintStream;, ()V, null, null, println, null, [188, 191], 30}\\n\" +", "+\t\t\t\"println[METHOD_NAME_REFERENCE]{println, Ljava.io.PrintStream;, (C)V, null, null, println, null, [188, 191], 30}\\n\" +", "+\t\t\t\"println[METHOD_NAME_REFERENCE]{println, Ljava.io.PrintStream;, (D)V, null, null, println, null, [188, 191], 30}\\n\" +", "+\t\t\t\"println[METHOD_NAME_REFERENCE]{println, Ljava.io.PrintStream;, (F)V, null, null, println, null, [188, 191], 30}\\n\" +", "+\t\t\t\"println[METHOD_NAME_REFERENCE]{println, Ljava.io.PrintStream;, (I)V, null, null, println, null, [188, 191], 30}\\n\" +", "+\t\t\t\"println[METHOD_NAME_REFERENCE]{println, Ljava.io.PrintStream;, (J)V, null, null, println, null, [188, 191], 30}\\n\" +", "+\t\t\t\"println[METHOD_NAME_REFERENCE]{println, Ljava.io.PrintStream;, (Ljava.lang.Object;)V, null, null, println, null, [188, 191], 30}\\n\" +", "+\t\t\t\"println[METHOD_NAME_REFERENCE]{println, Ljava.io.PrintStream;, (Ljava.lang.String;)V, null, null, println, null, [188, 191], 30}\\n\" +", "+\t\t\t\"println[METHOD_NAME_REFERENCE]{println, Ljava.io.PrintStream;, (Z)V, null, null, println, null, [188, 191], 30}\\n\" +", "+\t\t\t\"println[METHOD_NAME_REFERENCE]{println, Ljava.io.PrintStream;, ([C)V, null, null, println, null, [188, 191], 30}\\n\" +", "+\t\t\t\"printf[METHOD_NAME_REFERENCE]{printf, Ljava.io.PrintStream;, (Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintStream;, null, null, printf, null, [188, 191], 35}\\n\" +", "+\t\t\t\"printf[METHOD_NAME_REFERENCE]{printf, Ljava.io.PrintStream;, (Ljava.util.Locale;Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintStream;, null, null, printf, null, [188, 191], 35}\", requestor.getResults());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd68c3e1fd1aeec1b7b089f6af9cc793", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void test024()", "signatureAfterChange": " public void test024()", "diff": ["-\t\t\"     1  anewarray java/lang/String [17]\\n\" + ", "+\t\t\"     1  anewarray java.lang.String [17]\\n\" + ", "-\t\t\"    10  new java/util/ArrayList [21]\\n\" + ", "+\t\t\"    10  new java.util.ArrayList [21]\\n\" + ", "-\t\t\"    14  invokespecial java/util/ArrayList.<init>()V [22]\\n\" + ", "+\t\t\"    14  invokespecial java.util.ArrayList() [22]\\n\" + ", "-\t\t\"    19  astore [local_6]\\n\" + ", "+\t\t\"    19  astore 6\\n\" + ", "-\t\t\"    22  istore [local_4]\\n\" + ", "-\t\t\"    24  aload [local_6]\\n\" + ", "+\t\t\"    22  istore 4\\n\" + ", "+\t\t\"    24  aload 6\\n\" + ", "-\t\t\"    27  istore [local_5]\\n\" + ", "+\t\t\"    27  istore 5\\n\" + ", "-\t\t\"    32  aload [local_6]\\n\" + ", "-\t\t\"    34  iload [local_4]\\n\" + ", "+\t\t\"    32  aload 6\\n\" + ", "+\t\t\"    34  iload 4\\n\" + ", "-\t\t\"    40  invokeinterface java/util/List.add(Ljava/lang/Object;)Z [28] [nargs: 2]\\n\" + ", "+\t\t\"    40  invokeinterface java.util.List.add(java.lang.Object) : boolean  [28] [nargs: 2]\\n\" + ", "-\t\t\"    46  iinc 4 1 [local_4]\\n\" + ", "-\t\t\"    49  iload [local_4]\\n\" + ", "-\t\t\"    51  iload [local_5]\\n\" + ", "+\t\t\"    46  iinc 4 1\\n\" + ", "+\t\t\"    49  iload 4\\n\" + ", "+\t\t\"    51  iload 5\\n\" + ", "-\t\t\"    57  invokeinterface java/util/List.iterator()Ljava/util/Iterator; [32] [nargs: 1]\\n\" + ", "-\t\t\"    62  astore [local_4]\\n\" + ", "+\t\t\"    57  invokeinterface java.util.List.iterator() : java.util.Iterator  [32] [nargs: 1]\\n\" + ", "+\t\t\"    62  astore 4\\n\" + ", "-\t\t\"    67  aload [local_4]\\n\" + ", "-\t\t\"    69  invokeinterface java/util/Iterator.next()Ljava/lang/Object; [38] [nargs: 1]\\n\" + ", "+\t\t\"    67  aload 4\\n\" + ", "+\t\t\"    69  invokeinterface java.util.Iterator.next() : java.lang.Object  [38] [nargs: 1]\\n\" + ", "-\t\t\"    75  getstatic java/lang/System.out Ljava/io/PrintStream; [44]\\n\" + ", "+\t\t\"    75  getstatic java.lang.System.out : java.io.PrintStream [44]\\n\" + ", "-\t\t\"    79  invokevirtual java/io/PrintStream.print(Ljava/lang/Object;)V [50]\\n\" + ", "-\t\t\"    82  aload [local_4]\\n\" + ", "-\t\t\"    84  invokeinterface java/util/Iterator.hasNext()Z [54] [nargs: 1]\\n\" + ", "+\t\t\"    79  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [50]\\n\" + ", "+\t\t\"    82  aload 4\\n\" + ", "+\t\t\"    84  invokeinterface java.util.Iterator.hasNext() : boolean  [54] [nargs: 1]\\n\" + ", "-\t\t\"        [pc: 0, pc: 93] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 10, pc: 93] local: tab index: 1 type: [Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 18, pc: 93] local: list index: 2 type: Ljava/util/List;\\n\" + ", "-\t\t\"        [pc: 38, pc: 56] local: arg index: 3 type: Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 75, pc: 92] local: arg index: 3 type: Ljava/lang/Object;\\n\";", "+\t\t\"        [pc: 0, pc: 93] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 10, pc: 93] local: tab index: 1 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 18, pc: 93] local: list index: 2 type: java.util.List\\n\" + ", "+\t\t\"        [pc: 38, pc: 56] local: arg index: 3 type: java.lang.String\\n\" + ", "+\t\t\"        [pc: 75, pc: 92] local: arg index: 3 type: java.lang.Object\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3bb97a26de7f9c898e8e73410d7da76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 155, "methodNumberAfterChange": 155, "signatureBeforeChange": " \tpublic void test048f()", "signatureAfterChange": " \tpublic void test048f()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X7.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic String foo(I<String> z) { return null; }\\n\" + ", "+\t\t\t\"\t              ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(I<String>) of type X7 has the same erasure as foo(I<? extends T>) of type Y<T> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+/* javac 7", "+X.java:2: name clash: foo(I<String>) in X7 and foo(I<? extends T>) in Y have the same erasure, yet neither overrides the other", "+    public String foo(I<String> z) { return null; }", "+                  ^", "+  where T is a type-variable:", "+    T extends Object declared in class Y", "+1 error", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8dde23988297072311592210bd9c887", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void testStringParameterizedMultipleArguments01() throws CoreException", "signatureAfterChange": " \tpublic void testStringParameterizedMultipleArguments01() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R1.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R1.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EQUIVALENT_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R1.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_RAW_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [Generic] EQUIVALENT_RAW_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9d27a2e49d80dbe1c2b199c587ba6d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 93, "signatureBeforeChange": " \tpublic void testStringPatternNestedParam08() throws CoreException", "signatureAfterChange": " \tpublic void testStringPatternNestedParam07() throws CoreException", "diff": ["+\t// Selection is really nasty in this case as match selection sometimes is \"Generic<?>\" !!!", "+\t\tsearch(\"GM.Generic<?, ?, ?>\", TYPE, REFERENCES, scope, resultCollector);", "+\t\tassertSearchResults(", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_wld [Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_obj [Generic<Object, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_wld [Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_www [Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_obj [Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_wld [Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [Generic<?,?,?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_obj [Generic<Object, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_wld [Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_www [Generic<?>] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_obj [Generic<?>] EXACT_MATCH\",", "+\t\t\tresultCollector);", "+\t}", "-\t// TODO (search-frederic) try to have a better match selection", "-\tpublic void testStringPatternNestedParam08() throws CoreException {", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [Generic<NGM.Generic<?, ?, ?>,NGM.Generic<?, ?, ?>,NGM.Generic<?, ?, ?>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_obj [Generic<Object, Exception, RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_wld [Generic<NGS.Generic<?>, NGS.Generic<?>, NGS.Generic<?>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_www [Generic<NGS.Generic<?>, NGS.Generic<NGS.Generic<?>>, NGS.Generic<NGS.Generic<NGS.Generic<?>>>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_obj [Generic<NGS.Generic<Object>, NGS.Generic<? extends Throwable>, NGS.Generic<? super RuntimeException>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [Generic<g3.t.def.NGM.Generic<?, ?, ?>, g3.t.def.NGM.Generic<?, ?, ?>, g3.t.def.NGM.Generic<?, ?, ?>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [Generic<?, ?, ?>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_obj [Generic<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_wld [Generic<g3.t.def.NGS.Generic<?>, g3.t.def.NGS.Generic<?>, g3.t.def.NGS.Generic<?>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_www [Generic<g3.t.def.NGS.Generic<?>, g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<?>>, g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<g3.t.def.NGS.Generic<?>>>>] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_obj [Generic<g3.t.def.NGS.Generic<java.lang.Object>, g3.t.def.NGS.Generic<? extends java.lang.Throwable>, g3.t.def.NGS.Generic<? super java.lang.RuntimeException>>] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd9977560e173e50ee735cf0cefb68ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic void testBug83127f()", "signatureAfterChange": " \tpublic void testBug83127f()", "diff": ["-\t\t\t\"1. ERROR in Unrelated1.java (at line 1)\\r\\n\" + ", "-\t\t\t\"\tpublic class Unrelated1<E extends Number> {\\r\\n\" + ", "+\t\t\t\"1. ERROR in Unrelated1.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class Unrelated1<E extends Number> {\\n\" + ", "-\t\t\t\"2. ERROR in Unrelated1.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\tpublic Unrelated1(E e) {}\\r\\n\" + ", "+\t\t\t\"2. ERROR in Unrelated1.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic Unrelated1(E e) {}\\n\" + ", "-\t\t\t\"3. ERROR in Unrelated1.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\tpublic boolean add(E e) { return false; }\\r\\n\" + ", "+\t\t\t\"3. ERROR in Unrelated1.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic boolean add(E e) { return false; }\\n\" + ", "-\t\t\t\"1. ERROR in Test.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\t* @see Unrelated1#add(Number)\\r\\n\" + ", "+\t\t\t\"1. ERROR in Test.java (at line 2)\\n\" + ", "+\t\t\t\"\t* @see Unrelated1#add(Number)\\n\" + ", "-\t\t\t\"Javadoc: The method add(Number) is undefined for the type Unrelated1\\n\" + ", "+\t\t\t\"Javadoc: The method add(E) in the type Unrelated1 is not applicable for the arguments (Number)\\n\" + ", "-\t\t\t\"2. ERROR in Test.java (at line 3)\\r\\n\" + ", "-\t\t\t\"\t* @see Unrelated1#Unrelated1(Number)\\r\\n\" + ", "+\t\t\t\"2. ERROR in Test.java (at line 3)\\n\" + ", "+\t\t\t\"\t* @see Unrelated1#Unrelated1(Number)\\n\" + ", "-\t\t\t\"3. ERROR in Test.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tpublic class Test<T>{\\r\\n\" + ", "+\t\t\t\"3. ERROR in Test.java (at line 8)\\n\" + ", "+\t\t\t\"\tpublic class Test<T>{\\n\" + ", "-\t\t\t\"4. ERROR in Test.java (at line 9)\\r\\n\" + ", "-\t\t\t\"\tTest(T t) {}\\r\\n\" + ", "+\t\t\t\"4. ERROR in Test.java (at line 9)\\n\" + ", "+\t\t\t\"\tTest(T t) {}\\n\" + ", "-\t\t\t\"5. ERROR in Test.java (at line 10)\\r\\n\" + ", "-\t\t\t\"\tpublic boolean add(T t) {\\r\\n\" + ", "+\t\t\t\"5. ERROR in Test.java (at line 10)\\n\" + ", "+\t\t\t\"\tpublic boolean add(T t) {\\n\" + ", "-\t\t\t\"6. ERROR in Test.java (at line 14)\\r\\n\" + ", "-\t\t\t\"\tclass Sub<E extends Number> extends Test<E> {\\r\\n\" + ", "+\t\t\t\"6. ERROR in Test.java (at line 14)\\n\" + ", "+\t\t\t\"\tclass Sub<E extends Number> extends Test<E> {\\n\" + ", "-\t\t\t\"7. ERROR in Test.java (at line 14)\\r\\n\" + ", "-\t\t\t\"\tclass Sub<E extends Number> extends Test<E> {\\r\\n\" + ", "+\t\t\t\"7. ERROR in Test.java (at line 14)\\n\" + ", "+\t\t\t\"\tclass Sub<E extends Number> extends Test<E> {\\n\" + ", "-\t\t\t\"8. ERROR in Test.java (at line 14)\\r\\n\" + ", "-\t\t\t\"\tclass Sub<E extends Number> extends Test<E> {\\r\\n\" + ", "+\t\t\t\"8. ERROR in Test.java (at line 14)\\n\" + ", "+\t\t\t\"\tclass Sub<E extends Number> extends Test<E> {\\n\" + ", "-\t\t\t\"9. ERROR in Test.java (at line 15)\\r\\n\" + ", "-\t\t\t\"\tSub (E e) {super(null);}\\r\\n\" + ", "+\t\t\t\"9. ERROR in Test.java (at line 15)\\n\" + ", "+\t\t\t\"\tSub (E e) {super(null);}\\n\" + ", "-\t\t\t\"10. ERROR in Test.java (at line 15)\\r\\n\" + ", "-\t\t\t\"\tSub (E e) {super(null);}\\r\\n\" + ", "+\t\t\t\"10. ERROR in Test.java (at line 15)\\n\" + ", "+\t\t\t\"\tSub (E e) {super(null);}\\n\" + ", "-\t\t\t\"The constructor Object(null) is undefined\\n\" + ", "+\t\t\t\"The constructor Test(T) refers to the missing type T\\n\" + ", "-\t\t\t\"11. ERROR in Test.java (at line 16)\\r\\n\" + ", "-\t\t\t\"\tpublic boolean add(E e) {\\r\\n\" + ", "+\t\t\t\"11. ERROR in Test.java (at line 16)\\n\" + ", "+\t\t\t\"\tpublic boolean add(E e) {\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cda3dff1c06fada5a4860488d8709d84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "314f66e76f751455a7dd539f576706f5f92aab24", "commitAfterChange": "5d2ad0b940570868aeb3a33317182334e9423c29", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tpublic void test085()", "signatureAfterChange": " \tpublic void test085()", "diff": ["-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"\t                                ^\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"\t                                ^^\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid URL link format\\n\"", "+\t\t\t\t+ \"\t                                ^^^\\n\"", "+\t\t\t\t+ \"Javadoc: Malformed link reference\\n\"", "-\t\t\t\t+ \"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"Javadoc: Invalid reference\\n\"", "+\t\t\t\t+ \"\t                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"Javadoc: Unexpected text\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdcd64699b97a3f817f1a3292f26be97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c7d7002f277b7f884de7f682f8e0ff540e1b6d05", "commitAfterChange": "1807cc67396ea9076c76cb31f2d61c82f124d048", "methodNumberBeforeChange": 884, "methodNumberAfterChange": 884, "signatureBeforeChange": " public void _test878()", "signatureAfterChange": " public void test878()", "diff": ["-public void _test878() {", "+public void test878() {", "-\t\t\"     7  invokevirtual C.label(java.lang.String) : B [25]\\n\" + ", "-\t\t\"    10  checkcast C [18]\\n\" + ", "-\t\t\"    13  astore_1 [c]\\n\" + ", "-\t\t\"    14  getstatic java.lang.System.out : java.io.PrintStream [29]\\n\" + ", "-\t\t\"    17  aload_1 [c]\\n\" + ", "-\t\t\"    18  invokevirtual C.toString() : java.lang.String [35]\\n\" + ", "-\t\t\"    21  invokevirtual java.io.PrintStream.println(java.lang.String) : void [39]\\n\" + ", "-\t\t\"    24  return\\n\" + ", "+\t\t\"     7  invokevirtual C.label(java.lang.String) : java.lang.Object [25]\\n\" + ", "+\t\t\"    10  checkcast D [29]\\n\" + ", "+\t\t\"    13  astore_1 [d]\\n\" + ", "+\t\t\"    14  getstatic java.lang.System.out : java.io.PrintStream [31]\\n\" + ", "+\t\t\"    17  aload_1 [d]\\n\" + ", "+\t\t\"    18  invokevirtual java.io.PrintStream.println(java.lang.Object) : void [37]\\n\" + ", "+\t\t\"    21  return\\n\" + ", "-\t\t\"        [pc: 0, line: 13]\\n\" + ", "-\t\t\"        [pc: 14, line: 14]\\n\" + ", "-\t\t\"        [pc: 24, line: 15]\\n\" + ", "+\t\t\"        [pc: 0, line: 14]\\n\" + ", "+\t\t\"        [pc: 14, line: 15]\\n\" + ", "+\t\t\"        [pc: 21, line: 16]\\n\" + ", "-\t\t\"        [pc: 0, pc: 25] local: args index: 0 type: java.lang.String[]\\n\" + ", "-\t\t\"        [pc: 14, pc: 25] local: c index: 1 type: C\\n\";", "+\t\t\"        [pc: 0, pc: 22] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 14, pc: 22] local: d index: 1 type: D\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cde43ab009a6fd5362505772fccd04c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void testParameterizedTypeSingleArgument01() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedTypeSingleArgument01() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R1.java [g1.t.s.def.Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_wld [Generic<?>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_thr [Generic<? extends Throwable>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_run [Generic<? super RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [g1.t.s.def.Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_wld [Generic<?>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_thr [Generic<? extends Throwable>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_run [Generic<? super RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_wld [g1.t.s.def.Generic<?>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_thr [g1.t.s.def.Generic<? extends Throwable>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_run [g1.t.s.def.Generic<? super RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java [g1.t.s.def.Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_wld [g1.t.s.def.Generic<?>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_thr [g1.t.s.def.Generic<? extends Throwable>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_run [g1.t.s.def.Generic<? super RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [g1.t.s.def.Generic<?>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [g1.t.s.def.Generic<? extends Throwable>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [g1.t.s.def.Generic<? super RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java [g1.t.s.def.Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [g1.t.s.def.Generic<?>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [g1.t.s.def.Generic<? extends Throwable>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [g1.t.s.def.Generic<? super RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic<?>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic<? extends Throwable>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic<? super RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic<?>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic<? extends Throwable>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic<? super RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen [g1.t.s.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [g1.t.s.def.Generic<?>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [g1.t.s.def.Generic<? extends Throwable>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [g1.t.s.def.Generic<? super RuntimeException>] COMPATIBLE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [g1.t.s.def.Generic<?>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [g1.t.s.def.Generic<? extends Throwable>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [g1.t.s.def.Generic<? super RuntimeException>] EQUIVALENT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfb69fef9a06f4232f632306ae9ba912", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void test026() throws Exception", "signatureAfterChange": " \t \tpublic void test040_field_complex() throws Exception", "diff": ["-\t// check locations", "-\tpublic void test026() throws Exception {", "+\t", "+\tpublic void test040_field_complex() throws Exception {", "-\t\t\t\"        target type = 0xf FIELD_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        locations = {2}\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\"        location = [ARRAY, ARRAY, ARRAY]\\n\" + ", "-\t\t\t\"        target type = 0xf FIELD_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        locations = {0}\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\"        location = [ARRAY]\\n\" + ", "-\t\t\t\"        target type = 0xe FIELD\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "-\t\t\t\"        target type = 0xf FIELD_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        locations = {1}\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\"        location = [ARRAY, ARRAY]\\n\" + ", "-\t\t\t\"        target type = 0xe FIELD\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "-\t\t\t\"        target type = 0xf FIELD_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        locations = {1}\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\"        location = [TYPE_ARGUMENT(1)]\\n\" + ", "-\t\t\t\"        target type = 0xf FIELD_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        locations = {1,0}\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\"        location = [TYPE_ARGUMENT(1), TYPE_ARGUMENT(0)]\\n\" + ", "-\t\t\t\"        target type = 0xf FIELD_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        locations = {0}\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\"        location = [TYPE_ARGUMENT(0)]\\n\" + ", "-\t\t\t\"        target type = 0xe FIELD\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "-\t\t\t\"        target type = 0xf FIELD_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        locations = {1,2}\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\"        location = [TYPE_ARGUMENT(1), ARRAY, ARRAY, ARRAY]\\n\" + ", "-\t\t\t\"        target type = 0xf FIELD_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        locations = {1,0}\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\"        location = [TYPE_ARGUMENT(1), ARRAY]\\n\" + ", "-\t\t\t\"        target type = 0xf FIELD_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        locations = {0}\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\"        location = [TYPE_ARGUMENT(0)]\\n\" + ", "-\t\t\t\"        target type = 0xf FIELD_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        locations = {1}\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\"        location = [TYPE_ARGUMENT(1)]\\n\" + ", "-\t\t\t\"        target type = 0xf FIELD_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        locations = {1,1}\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\"        location = [TYPE_ARGUMENT(1), ARRAY, ARRAY]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfb91e952ae2bd108642209556d5f2fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void test015() throws Exception", "signatureAfterChange": " \t \tpublic void test006_classTypeParameter() throws Exception", "diff": ["+\t", "+\tpublic void test006_classTypeParameter() throws Exception {", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"A.java\",", "+\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "+\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "+\t\t\t\t\"@Target(TYPE_PARAMETER)\\n\" + ", "+\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "+\t\t\t\t\"@interface A {\\n\" + ", "+\t\t\t\t\"\tString value() default \\\"default\\\";\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"B.java\",", "+\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "+\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "+\t\t\t\t\"@Target(TYPE_PARAMETER)\\n\" + ", "+\t\t\t\t\"@Retention(CLASS)\\n\" + ", "+\t\t\t\t\"@interface B {\\n\" + ", "+\t\t\t\t\"\tint value() default -1;\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X<T1,T2,@A @B(3) T3> {}\",", "+\t\t},", "+\t\t\"\");", "+\t\tString expectedOutput =", "+\t\t\t\"  RuntimeVisibleTypeAnnotations: \\n\" + ", "+\t\t\t\"    #25 @A(\\n\" + ", "+\t\t\t\"      target type = 0x0 CLASS_TYPE_PARAMETER\\n\" + ", "+\t\t\t\"      type parameter index = 2\\n\" + ", "+\t\t\t\"    )\\n\" + ", "+\t\t\t\"  RuntimeInvisibleTypeAnnotations: \\n\" + ", "+\t\t\t\"    #21 @B(\\n\" + ", "+\t\t\t\"      #22 value=(int) 3 (constant type)\\n\" + ", "+\t\t\t\"      target type = 0x0 CLASS_TYPE_PARAMETER\\n\" + ", "+\t\t\t\"      type parameter index = 2\\n\" + ", "+\t\t\t\"    )\\n\";", "+\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "+\t}", "-\t// field type generic or array", "-\tpublic void test015() throws Exception {", "-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"A.java\",", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "-\t\t\t\t\"@interface A {\\n\" + ", "-\t\t\t\t\"\tString value() default \\\"default\\\";\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\t\"B.java\",", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(CLASS)\\n\" + ", "-\t\t\t\t\"@interface B {\\n\" + ", "-\t\t\t\t\"\tint value() default -1;\\n\" + ", "-\t\t\t\t\"}\",", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t@A int [] @B(3) [] field;\\n\" +", "-\t\t\t\t\"}\",", "-\t\t},", "-\t\t\"\");", "-\t\tString expectedOutput =", "-\t\t\t\"    RuntimeVisibleTypeAnnotations: \\n\" + ", "-\t\t\t\"      #12 @A(\\n\" + ", "-\t\t\t\"        target type = 0xf FIELD_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        locations = {1}\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"    RuntimeInvisibleTypeAnnotations: \\n\" + ", "-\t\t\t\"      #8 @B(\\n\" + ", "-\t\t\t\"        #9 value=(int) 3 (constant type)\\n\" + ", "-\t\t\t\"        target type = 0xf FIELD_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        locations = {0}\\n\" + ", "-\t\t\t\"      )\\n\";", "-\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d16d64a7e327511fce897bbf81508c00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": " public void testTypeRefGenericAllG6_TypeArgument() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAllG6_TypeArgument() throws CoreException", "diff": ["-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryException [\tg6.t.def.Table<\ufffd|String|\ufffd, Exception>.Entry<String, Exception> entryException;@64] EXACT_MATCH\\n\" +", "-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryException [\tg6.t.def.Table<String, \ufffd|Exception|\ufffd>.Entry<String, Exception> entryException;@72] EXACT_MATCH\\n\" +", "-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryException [\tg6.t.def.Table<String, Exception>.Entry<\ufffd|String|\ufffd, Exception> entryException;@89] EXACT_MATCH\\n\" +", "-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryException [\tg6.t.def.Table<String, Exception>.Entry<String, \ufffd|Exception|\ufffd> entryException;@97] EXACT_MATCH\\n\" +", "-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryExceptionArray [\tg6.t.def.Table<\ufffd|String|\ufffd, Exception>.Entry<String, Exception>[] entryExceptionArray;@140] EXACT_MATCH\\n\" +", "-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryExceptionArray [\tg6.t.def.Table<String, \ufffd|Exception|\ufffd>.Entry<String, Exception>[] entryExceptionArray;@148] EXACT_MATCH\\n\" +", "-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryExceptionArray [\tg6.t.def.Table<String, Exception>.Entry<\ufffd|String|\ufffd, Exception>[] entryExceptionArray;@165] EXACT_MATCH\\n\" +", "-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryExceptionArray [\tg6.t.def.Table<String, Exception>.Entry<String, \ufffd|Exception|\ufffd>[] entryExceptionArray;@173] EXACT_MATCH\\n\" +", "-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<\ufffd|String|\ufffd, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]> tableOfEntryExceptionArray;@223] EXACT_MATCH\\n\" +", "-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, \ufffd|g6.t.def.Table<String, Exception>.Entry<String, Exception>[]|\ufffd>.Entry<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]> tableOfEntryExceptionArray;@231] EXACT_MATCH\\n\" +", "-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, g6.t.def.Table<\ufffd|String|\ufffd, Exception>.Entry<String, Exception>[]>.Entry<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]> tableOfEntryExceptionArray;@246] EXACT_MATCH\\n\" +", "-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, g6.t.def.Table<String, \ufffd|Exception|\ufffd>.Entry<String, Exception>[]>.Entry<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]> tableOfEntryExceptionArray;@254] EXACT_MATCH\\n\" +", "-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<\ufffd|String|\ufffd, Exception>[]>.Entry<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]> tableOfEntryExceptionArray;@271] EXACT_MATCH\\n\" +", "-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, \ufffd|Exception|\ufffd>[]>.Entry<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]> tableOfEntryExceptionArray;@279] EXACT_MATCH\\n\" +", "-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry<\ufffd|String|\ufffd, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]> tableOfEntryExceptionArray;@299] EXACT_MATCH\\n\" +", "-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry<String, \ufffd|g6.t.def.Table<String, Exception>.Entry<String, Exception>[]|\ufffd> tableOfEntryExceptionArray;@307] EXACT_MATCH\\n\" +", "-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry<String, g6.t.def.Table<\ufffd|String|\ufffd, Exception>.Entry<String, Exception>[]> tableOfEntryExceptionArray;@322] EXACT_MATCH\\n\" +", "-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry<String, g6.t.def.Table<String, \ufffd|Exception|\ufffd>.Entry<String, Exception>[]> tableOfEntryExceptionArray;@330] EXACT_MATCH\\n\" +", "-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry<String, g6.t.def.Table<String, Exception>.Entry<\ufffd|String|\ufffd, Exception>[]> tableOfEntryExceptionArray;@347] EXACT_MATCH\\n\" +", "-\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry<String, g6.t.def.Table<String, Exception>.Entry<String, \ufffd|Exception|\ufffd>[]> tableOfEntryExceptionArray;@355] EXACT_MATCH\"", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryException [\tg6.t.def.Table<!|String|!, Exception>.Entry<String, Exception> entryException;@64] EXACT_MATCH\\n\" +", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryException [\tg6.t.def.Table<String, !|Exception|!>.Entry<String, Exception> entryException;@72] EXACT_MATCH\\n\" +", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryException [\tg6.t.def.Table<String, Exception>.Entry<!|String|!, Exception> entryException;@89] EXACT_MATCH\\n\" +", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryException [\tg6.t.def.Table<String, Exception>.Entry<String, !|Exception|!> entryException;@97] EXACT_MATCH\\n\" +", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryExceptionArray [\tg6.t.def.Table<!|String|!, Exception>.Entry<String, Exception>[] entryExceptionArray;@140] EXACT_MATCH\\n\" +", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryExceptionArray [\tg6.t.def.Table<String, !|Exception|!>.Entry<String, Exception>[] entryExceptionArray;@148] EXACT_MATCH\\n\" +", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryExceptionArray [\tg6.t.def.Table<String, Exception>.Entry<!|String|!, Exception>[] entryExceptionArray;@165] EXACT_MATCH\\n\" +", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.entryExceptionArray [\tg6.t.def.Table<String, Exception>.Entry<String, !|Exception|!>[] entryExceptionArray;@173] EXACT_MATCH\\n\" +", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<!|String|!, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]> tableOfEntryExceptionArray;@223] EXACT_MATCH\\n\" +", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, !|g6.t.def.Table<String, Exception>.Entry<String, Exception>[]|!>.Entry<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]> tableOfEntryExceptionArray;@231] EXACT_MATCH\\n\" +", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, g6.t.def.Table<!|String|!, Exception>.Entry<String, Exception>[]>.Entry<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]> tableOfEntryExceptionArray;@246] EXACT_MATCH\\n\" +", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, g6.t.def.Table<String, !|Exception|!>.Entry<String, Exception>[]>.Entry<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]> tableOfEntryExceptionArray;@254] EXACT_MATCH\\n\" +", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<!|String|!, Exception>[]>.Entry<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]> tableOfEntryExceptionArray;@271] EXACT_MATCH\\n\" +", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, !|Exception|!>[]>.Entry<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]> tableOfEntryExceptionArray;@279] EXACT_MATCH\\n\" +", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry<!|String|!, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]> tableOfEntryExceptionArray;@299] EXACT_MATCH\\n\" +", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry<String, !|g6.t.def.Table<String, Exception>.Entry<String, Exception>[]|!> tableOfEntryExceptionArray;@307] EXACT_MATCH\\n\" +", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry<String, g6.t.def.Table<!|String|!, Exception>.Entry<String, Exception>[]> tableOfEntryExceptionArray;@322] EXACT_MATCH\\n\" +", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry<String, g6.t.def.Table<String, !|Exception|!>.Entry<String, Exception>[]> tableOfEntryExceptionArray;@330] EXACT_MATCH\\n\" +", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry<String, g6.t.def.Table<String, Exception>.Entry<!|String|!, Exception>[]> tableOfEntryExceptionArray;@347] EXACT_MATCH\\n\" +", "+\t\t\"src/g6/t/ref/QualifMultiple.java g6.t.ref.QualifMultiple.tableOfEntryExceptionArray [\tg6.t.def.Table<String, g6.t.def.Table<String, Exception>.Entry<String, Exception>[]>.Entry<String, g6.t.def.Table<String, Exception>.Entry<String, !|Exception|!>[]> tableOfEntryExceptionArray;@355] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2b25ec13067e825c9b8ee10ea81d10d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void test021()", "signatureAfterChange": " public void test021()", "diff": ["-\t\t\"     56  astore [local_7]\\n\" + ", "+\t\t\"     56  astore 7\\n\" + ", "-\t\t\"     59  istore [local_5]\\n\" + ", "-\t\t\"     61  aload [local_7]\\n\" + ", "+\t\t\"     59  istore 5\\n\" + ", "+\t\t\"     61  aload 7\\n\" + ", "-\t\t\"     64  istore [local_6]\\n\" + ", "+\t\t\"     64  istore 6\\n\" + ", "-\t\t\"     69  aload [local_7]\\n\" + ", "-\t\t\"     71  iload [local_5]\\n\" + ", "+\t\t\"     69  aload 7\\n\" + ", "+\t\t\"     71  iload 5\\n\" + ", "-\t\t\"     74  istore [e]\\n\" + ", "+\t\t\"     74  istore 4 [e]\\n\" + ", "-\t\t\"     77  iload [e]\\n\" + ", "+\t\t\"     77  iload 4 [e]\\n\" + ", "-\t\t\"     89  iload [e]\\n\" + ", "+\t\t\"     89  iload 4 [e]\\n\" + ", "-\t\t\"     98  iinc 5 1 [local_5]\\n\" + ", "-\t\t\"    101  iload [local_5]\\n\" + ", "-\t\t\"    103  iload [local_6]\\n\" + ", "+\t\t\"     98  iinc 5 1\\n\" + ", "+\t\t\"    101  iload 5\\n\" + ", "+\t\t\"    103  iload 6\\n\" + ", "-\t\t\"    111  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"    111  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    115  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + ", "+\t\t\"    115  invokevirtual java.io.PrintStream.println(int) : void  [27]\\n\" + ", "-\t\t\"        [pc: 0, pc: 119] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 48, pc: 119] local: tab index: 1 type: [I\\n\" + ", "-\t\t\"        [pc: 50, pc: 119] local: sum index: 2 type: I\\n\" + ", "-\t\t\"        [pc: 52, pc: 119] local: i index: 3 type: I\\n\" + ", "-\t\t\"        [pc: 76, pc: 108] local: e index: 4 type: I\\n\";", "+\t\t\"        [pc: 0, pc: 119] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 48, pc: 119] local: tab index: 1 type: int[]\\n\" + ", "+\t\t\"        [pc: 50, pc: 119] local: sum index: 2 type: int\\n\" + ", "+\t\t\"        [pc: 52, pc: 119] local: i index: 3 type: int\\n\" + ", "+\t\t\"        [pc: 76, pc: 108] local: e index: 4 type: int\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2e30d7504897aff04996437e6387db1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic void testElementPatternNestedParam08() throws CoreException", "signatureAfterChange": " \tpublic void testTypeNestedMultipleArguments04() throws CoreException", "diff": ["-\tpublic void testElementPatternNestedParam08() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearch15/src/g3/t/def/GM.java\").getType(\"NGM\").getType(\"Generic\");", "+\tpublic void testTypeNestedMultipleArguments04() throws CoreException {", "+\t\tIType type = getCompilationUnit(\"JavaSearch15/src/g3/t/def/NGM.java\").getType(\"NGM\").getType(\"Generic\");", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_wld [NGM.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_obj [NGM.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_wld [NGM.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_www [NGM.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_obj [NGM.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_wld [g3.t.def.NGM.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [g3.t.def.NGM.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [g3.t.def.NGM.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [g3.t.def.NGM.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [g3.t.def.NGM.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_obj [g3.t.def.NGM.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_wld [g3.t.def.NGM.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_www [g3.t.def.NGM.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_obj [g3.t.def.NGM.Generic] EXACT_MATCH\",", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_wld [NGM.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_www [NGM.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgsm_obj [NGM.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_wld [NGM.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_www [NGM.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.sgms_obj [NGM.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_wld [g3.t.def.NGM.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [g3.t.def.NGM.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [g3.t.def.NGM.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [g3.t.def.NGM.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_www [g3.t.def.NGM.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgsm_obj [g3.t.def.NGM.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_wld [g3.t.def.NGM.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_www [g3.t.def.NGM.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R4.java g3.t.ref.R4.qgms_obj [g3.t.def.NGM.Generic] ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5b8d64b198b8f14e94ce50b35bdcfb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void testElementPatternNestedParam07() throws CoreException", "signatureAfterChange": " \tpublic void testTypeNestedMultipleArguments03() throws CoreException", "diff": ["-\tpublic void testElementPatternNestedParam07() throws CoreException {", "+\tpublic void testTypeNestedMultipleArguments03() throws CoreException {", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_wld [GM<?, ?, ?>.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<GM<?, ?, ?>.Generic<?,?,?>,GM<?, ?, ?>.Generic<?,?,?>,GM<?, ?, ?>.Generic<?,?,?>>.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_obj [GM<Object, Exception, RuntimeException>.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_wld [GM<GS<?>.Generic<?>, GS<?>.Generic<?>, GS<?>.Generic<?>>.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_www [GM<GS<?>.Generic<?>, GS<GS<?>.Generic<?>>.Generic<?>, GS<GS<GS<?>.Generic<?>>.Generic<?>>.Generic<?>>.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_obj [GM<GS<Object>.Generic<?>, GS<? extends Throwable>.Generic<?>, GS<? super RuntimeException>.Generic<?>>.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_wld [g3.t.def.GM<?, ?, ?>.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [g3.t.def.GM<g3.t.def.GM<?, ?, ?>.Generic<?,?,?>,g3.t.def.GM<?, ?, ?>.Generic<?,?,?>,g3.t.def.GM<?, ?, ?>.Generic<?,?,?>>.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [g3.t.def.GM<?, ?, ?>.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [g3.t.def.GM<?, ?, ?>.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [g3.t.def.GM<?, ?, ?>.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_obj [g3.t.def.GM<Object, Exception, RuntimeException>.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_wld [g3.t.def.GM<g3.t.def.GS<?>.Generic<?>, g3.t.def.GS<?>.Generic<?>, g3.t.def.GS<?>.Generic<?>>.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_www [g3.t.def.GM<g3.t.def.GS<?>.Generic<?>, g3.t.def.GS<g3.t.def.GS<?>.Generic<?>>.Generic<?>, g3.t.def.GS<g3.t.def.GS<g3.t.def.GS<?>.Generic<?>>.Generic<?>>.Generic<?>>.Generic] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_obj [g3.t.def.GM<g3.t.def.GS<Object>.Generic<?>, g3.t.def.GS<? extends Throwable>.Generic<?>, g3.t.def.GS<? super RuntimeException>.Generic<?>>.Generic] EXACT_MATCH\",", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_wld [GM<?, ?, ?>.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<GM<?, ?, ?>.Generic<?,?,?>,GM<?, ?, ?>.Generic<?,?,?>,GM<?, ?, ?>.Generic<?,?,?>>.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_www [GM<?, ?, ?>.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgsm_obj [GM<Object, Exception, RuntimeException>.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_wld [GM<GS<?>.Generic<?>, GS<?>.Generic<?>, GS<?>.Generic<?>>.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_www [GM<GS<?>.Generic<?>, GS<GS<?>.Generic<?>>.Generic<?>, GS<GS<GS<?>.Generic<?>>.Generic<?>>.Generic<?>>.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.sgms_obj [GM<GS<Object>.Generic<?>, GS<? extends Throwable>.Generic<?>, GS<? super RuntimeException>.Generic<?>>.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_wld [g3.t.def.GM<?, ?, ?>.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [g3.t.def.GM<g3.t.def.GM<?, ?, ?>.Generic<?,?,?>,g3.t.def.GM<?, ?, ?>.Generic<?,?,?>,g3.t.def.GM<?, ?, ?>.Generic<?,?,?>>.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [g3.t.def.GM<?, ?, ?>.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [g3.t.def.GM<?, ?, ?>.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_www [g3.t.def.GM<?, ?, ?>.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgsm_obj [g3.t.def.GM<Object, Exception, RuntimeException>.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_wld [g3.t.def.GM<g3.t.def.GS<?>.Generic<?>, g3.t.def.GS<?>.Generic<?>, g3.t.def.GS<?>.Generic<?>>.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_www [g3.t.def.GM<g3.t.def.GS<?>.Generic<?>, g3.t.def.GS<g3.t.def.GS<?>.Generic<?>>.Generic<?>, g3.t.def.GS<g3.t.def.GS<g3.t.def.GS<?>.Generic<?>>.Generic<?>>.Generic<?>>.Generic] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R3.java g3.t.ref.R3.qgms_obj [g3.t.def.GM<g3.t.def.GS<Object>.Generic<?>, g3.t.def.GS<? extends Throwable>.Generic<?>, g3.t.def.GS<? super RuntimeException>.Generic<?>>.Generic] ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9570c6af0c14030817bf63f28d3798f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7d36cd74d7dfc1f56f940c426e98d6c489655858", "commitAfterChange": "f95e58c822d23fa71cf6c6e2ac3adce80f07a42f", "methodNumberBeforeChange": 1370, "methodNumberAfterChange": 1370, "signatureBeforeChange": " public void test1339()", "signatureAfterChange": " public void test1339()", "diff": ["+//https://bugs.eclipse.org/bugs/show_bug.cgi?id=234619 - variation", "+public void test1339() {", "+\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"java/lang/Object.java\", // =================", "+\t\t\t\t\"package java.lang;\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"public class Object {\\n\" + ", "+\t\t\t\t\"\tvoid foo() {\\n\" + ", "+\t\t\t\t\"\t\tException e1 = getClass();\\n\" + ", "+\t\t\t\t\"\t\tException e2 = this.getClass();\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tpublic Class<?> getClass() { return null; }\\n\" +", "+\t\t\t\t\"}\\n\", // =================", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in java\\\\lang\\\\Object.java (at line 5)\\n\" + ", "+\t\t\t\"\tException e1 = getClass();\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from Class<capture#1-of ? extends Object> to Exception\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in java\\\\lang\\\\Object.java (at line 6)\\n\" + ", "+\t\t\t\"\tException e2 = this.getClass();\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from Class<capture#2-of ? extends Object> to Exception\\n\" + ", "+\t\t\t\"----------\\n\");", "+}", "-//https://bugs.eclipse.org/bugs/show_bug.cgi?id=234619", "-public void test1339() {", "-\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\", // =================", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"        void m(Object someObject, Integer intObject) {\\n\" + ", "-\t\t\t\t\"                Exception class1 = someObject.getClass();\\n\" + ", "-\t\t\t\t\"                Exception class2 = intObject.getClass();\\n\" + ", "-\t\t\t\t\"        }\\n\" + ", "-\t\t\t\t\"}\\n\", // =================", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tException class1 = someObject.getClass();\\n\" + ", "-\t\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from Class<capture#1-of ? extends Object> to Exception\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tException class2 = intObject.getClass();\\n\" + ", "-\t\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from Class<capture#2-of ? extends Integer> to Exception\\n\" + ", "-\t\t\t\"----------\\n\");", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daaa7e710104659f5b1a00c85612d146", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tpublic void testStringAnyStrings02() throws CoreException", "signatureAfterChange": " \tpublic void testStringAnyStrings02() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_run [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_run [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_run [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_run [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Generic] COMPATIBLE_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Generic] EQUIVALENT_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de606a4278dad88792a30af4b85c46fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestForMethod.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 82, "signatureBeforeChange": "  \tpublic void test116()", "signatureAfterChange": "  \tpublic void test116()", "diff": ["-\t\t\t\t+ \"\t                ^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "-\t\t\t\t+ \"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\"", "+\t\t\t\t+ \"\t               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e517fa8ced1e65f5fae1de0116473aa0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void test022()", "signatureAfterChange": " public void test022()", "diff": ["-\t\t\"     0  new #17 java/util/ArrayList\\n\" + ", "+\t\t\"     0  new java/util/ArrayList [17]\\n\" + ", "-\t\t\"     4  invokespecial #18 <Method java/util/ArrayList.<init>()V>\\n\" + ", "-\t\t\"     7  astore_1\\n\" + ", "+\t\t\"     4  invokespecial java/util/ArrayList.<init>()V [18]\\n\" + ", "+\t\t\"     7  astore_1 [arrayList]\\n\" + ", "-\t\t\"     9  istore_2\\n\" + ", "+\t\t\"     9  istore_2 [i]\\n\" + ", "-\t\t\"    13  aload_1\\n\" + ", "-\t\t\"    14  new #20 java/lang/Integer\\n\" + ", "+\t\t\"    13  aload_1 [arrayList]\\n\" + ", "+\t\t\"    14  new java/lang/Integer [20]\\n\" + ", "-\t\t\"    18  iload_2\\n\" + ", "-\t\t\"    19  invokespecial #23 <Method java/lang/Integer.<init>(I)V>\\n\" + ", "-\t\t\"    22  invokevirtual #27 <Method java/util/ArrayList.add(Ljava/lang/Object;)Z>\\n\" + ", "+\t\t\"    18  iload_2 [i]\\n\" + ", "+\t\t\"    19  invokespecial java/lang/Integer.<init>(I)V [23]\\n\" + ", "+\t\t\"    22  invokevirtual java/util/ArrayList.add(Ljava/lang/Object;)Z [27]\\n\" + ", "-\t\t\"    26  iinc 2 1\\n\" + ", "-\t\t\"    29  iload_2\\n\" + ", "+\t\t\"    26  iinc 2 1 [i]\\n\" + ", "+\t\t\"    29  iload_2 [i]\\n\" + ", "-\t\t\"    36  istore_2\\n\" + ", "-\t\t\"    37  aload_1\\n\" + ", "-\t\t\"    38  invokevirtual #31 <Method java/util/ArrayList.iterator()Ljava/util/Iterator;>\\n\" + ", "-\t\t\"    41  astore 4\\n\" + ", "+\t\t\"    36  istore_2 [i]\\n\" + ", "+\t\t\"    37  aload_1 [arrayList]\\n\" + ", "+\t\t\"    38  invokevirtual java/util/ArrayList.iterator()Ljava/util/Iterator; [31]\\n\" + ", "+\t\t\"    41  astore [local_4]\\n\" + ", "-\t\t\"    46  aload 4\\n\" + ", "-\t\t\"    48  invokeinterface [nargs : 1] #37 <Interface method java/util/Iterator.next()Ljava/lang/Object;>\\n\" + ", "-\t\t\"    53  checkcast #20 java/lang/Integer\\n\" + ", "-\t\t\"    56  astore_3\\n\" + ", "-\t\t\"    57  iload_2\\n\" + ", "-\t\t\"    58  aload_3\\n\" + ", "-\t\t\"    59  invokevirtual #41 <Method java/lang/Integer.intValue()I>\\n\" + ", "+\t\t\"    46  aload [local_4]\\n\" + ", "+\t\t\"    48  invokeinterface java/util/Iterator.next()Ljava/lang/Object; [37] [nargs: 1]\\n\" + ", "+\t\t\"    53  checkcast java/lang/Integer [20]\\n\" + ", "+\t\t\"    56  astore_3 [e]\\n\" + ", "+\t\t\"    57  iload_2 [i]\\n\" + ", "+\t\t\"    58  aload_3 [e]\\n\" + ", "+\t\t\"    59  invokevirtual java/lang/Integer.intValue()I [41]\\n\" + ", "-\t\t\"    63  istore_2\\n\" + ", "-\t\t\"    64  aload 4\\n\" + ", "-\t\t\"    66  invokeinterface [nargs : 1] #45 <Interface method java/util/Iterator.hasNext()Z>\\n\" + ", "+\t\t\"    63  istore_2 [i]\\n\" + ", "+\t\t\"    64  aload [local_4]\\n\" + ", "+\t\t\"    66  invokeinterface java/util/Iterator.hasNext()Z [45] [nargs: 1]\\n\" + ", "-\t\t\"    74  getstatic #51 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    77  iload_2\\n\" + ", "-\t\t\"    78  invokevirtual #56 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\"    74  getstatic java/lang/System.out Ljava/io/PrintStream; [51]\\n\" + ", "+\t\t\"    77  iload_2 [i]\\n\" + ", "+\t\t\"    78  invokevirtual java/io/PrintStream.println(I)V [56]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e69008de305b9c186d7ec271dea67ec6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void testStringNoArgument01() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument01() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_run [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.gen_run [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_run [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R1.java g1.t.s.ref.R1.qgen_run [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic] COMPATIBLE_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic] EQUIVALENT_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e814925d96451786bb1a26c1aa01a2a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 506, "methodNumberAfterChange": 506, "signatureBeforeChange": " \tpublic void test504()", "signatureAfterChange": " \tpublic void test504()", "diff": ["-\t\t\t\"    1  invokespecial java/lang/Object.<init>()V [9]\\n\" + ", "+\t\t\t\"    1  invokespecial java.lang.Object() [9]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: LX;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: LX<TE;>;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 5] local: this index: 0 type: X<E>\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 2] local: this index: 0 type: LX;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 2] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 2] local: this index: 0 type: LX<TE;>;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 2] local: this index: 0 type: X<E>\\n\" + ", "-\t\t\t\"     0  getstatic java/lang/System.out Ljava/io/PrintStream; [27]\\n\" + ", "+\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [27]\\n\" + ", "-\t\t\t\"     7  invokespecial X.<init>()V [28]\\n\" + ", "-\t\t\t\"    10  invokevirtual X.e()LXA; [30]\\n\" + ", "+\t\t\t\"     7  invokespecial X() [28]\\n\" + ", "+\t\t\t\"    10  invokevirtual X.e() : XA  [30]\\n\" + ", "-\t\t\t\"    14  getstatic XAB.CONST LXB; [36]\\n\" + ", "-\t\t\t\"    17  invokevirtual java/io/PrintStream.print(Ljava/lang/Object;)V [42]\\n\" + ", "+\t\t\t\"    14  getstatic XAB.CONST : XB [36]\\n\" + ", "+\t\t\t\"    17  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [42]\\n\" + ", "-\t\t\t\"    24  invokespecial X.<init>()V [28]\\n\" + ", "-\t\t\t\"    27  invokevirtual X.foo()V [45]\\n\" + ", "+\t\t\t\"    24  invokespecial X() [28]\\n\" + ", "+\t\t\t\"    27  invokevirtual X.foo() : void  [45]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 31] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 31] local: args index: 0 type: java.lang.String[]\\n\" + ", "-\t\t\t\"     0  getstatic java/lang/System.out Ljava/io/PrintStream; [27]\\n\" + ", "+\t\t\t\"     0  getstatic java.lang.System.out : java.io.PrintStream [27]\\n\" + ", "-\t\t\t\"     4  invokevirtual X.e()LXA; [30]\\n\" + ", "+\t\t\t\"     4  invokevirtual X.e() : XA  [30]\\n\" + ", "-\t\t\t\"     8  getstatic XB.CONST LXB; [50]\\n\" + ", "-\t\t\t\"    11  invokevirtual java/io/PrintStream.print(Ljava/lang/Object;)V [42]\\n\" + ", "+\t\t\t\"     8  getstatic XB.CONST : XB [50]\\n\" + ", "+\t\t\t\"    11  invokevirtual java.io.PrintStream.print(java.lang.Object) : void  [42]\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 15] local: this index: 0 type: LX;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 15] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 15] local: this index: 0 type: LX<TE;>;\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 15] local: this index: 0 type: X<E>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e846f1251cdf6685e48278da6d59b404", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void testParameterizedTypeMultipleArguments01() throws CoreException", "signatureAfterChange": " \tpublic void testParameterizedTypeMultipleArguments01() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R1.java [g1.t.m.def.Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_exc [Generic<Exception, Exception, RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_wld [Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_exc [Generic<Exception, Exception, RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.gen_wld [Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [g1.t.m.def.Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_wld [g1.t.m.def.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R1.java g1.t.m.ref.R1.qgen_wld [g1.t.m.def.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java [g1.t.m.def.Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic<Exception, Exception, RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic<Exception, Exception, RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [g1.t.m.def.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [g1.t.m.def.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java [g1.t.m.def.Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen [Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Generic<Exception, Exception, RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Generic<Exception, Exception, RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic] COMPATIBLE_ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen [g1.t.m.def.Generic] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>] COMPATIBLE_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [g1.t.m.def.Generic<?, ?, ?>] COMPATIBLE_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [g1.t.m.def.Generic<Exception, Exception, RuntimeException>] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [g1.t.m.def.Generic<?, ?, ?>] EQUIVALENT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9224f526bf03243af4bd48d8fb15359", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java", "commitBeforeChange": "fa568df637cfba49109de9a23ecbf57eda89325f", "commitAfterChange": "699f85df0061a8b41250aa99562a0fc140375ee5", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void test435219d() throws JavaModelException", "signatureAfterChange": " public void test435219d() throws JavaModelException", "diff": ["-\tassertResults(\"print[METHOD_IMPORT]{print, Ljava.io.PrintStream;, (C)V, null, null, print, null, [219, 222], 30}\\n\" +", "-\t\t\t\"print[METHOD_IMPORT]{print, Ljava.io.PrintStream;, (D)V, null, null, print, null, [219, 222], 30}\\n\" +", "-\t\t\t\"print[METHOD_IMPORT]{print, Ljava.io.PrintStream;, (F)V, null, null, print, null, [219, 222], 30}\\n\" +", "-\t\t\t\"print[METHOD_IMPORT]{print, Ljava.io.PrintStream;, (I)V, null, null, print, null, [219, 222], 30}\\n\" +", "-\t\t\t\"print[METHOD_IMPORT]{print, Ljava.io.PrintStream;, (J)V, null, null, print, null, [219, 222], 30}\\n\" +", "-\t\t\t\"print[METHOD_IMPORT]{print, Ljava.io.PrintStream;, (Ljava.lang.Object;)V, null, null, print, null, [219, 222], 30}\\n\" +", "-\t\t\t\"print[METHOD_IMPORT]{print, Ljava.io.PrintStream;, (Ljava.lang.String;)V, null, null, print, null, [219, 222], 30}\\n\" +", "-\t\t\t\"print[METHOD_IMPORT]{print, Ljava.io.PrintStream;, (Z)V, null, null, print, null, [219, 222], 30}\\n\" +", "-\t\t\t\"print[METHOD_IMPORT]{print, Ljava.io.PrintStream;, ([C)V, null, null, print, null, [219, 222], 30}\\n\" +", "-\t\t\t\"println[METHOD_IMPORT]{println, Ljava.io.PrintStream;, ()V, null, null, println, null, [219, 222], 30}\\n\" +", "-\t\t\t\"println[METHOD_IMPORT]{println, Ljava.io.PrintStream;, (C)V, null, null, println, null, [219, 222], 30}\\n\" +", "-\t\t\t\"println[METHOD_IMPORT]{println, Ljava.io.PrintStream;, (D)V, null, null, println, null, [219, 222], 30}\\n\" +", "-\t\t\t\"println[METHOD_IMPORT]{println, Ljava.io.PrintStream;, (F)V, null, null, println, null, [219, 222], 30}\\n\" +", "-\t\t\t\"println[METHOD_IMPORT]{println, Ljava.io.PrintStream;, (I)V, null, null, println, null, [219, 222], 30}\\n\" +", "-\t\t\t\"println[METHOD_IMPORT]{println, Ljava.io.PrintStream;, (J)V, null, null, println, null, [219, 222], 30}\\n\" +", "-\t\t\t\"println[METHOD_IMPORT]{println, Ljava.io.PrintStream;, (Ljava.lang.Object;)V, null, null, println, null, [219, 222], 30}\\n\" +", "-\t\t\t\"println[METHOD_IMPORT]{println, Ljava.io.PrintStream;, (Ljava.lang.String;)V, null, null, println, null, [219, 222], 30}\\n\" +", "-\t\t\t\"println[METHOD_IMPORT]{println, Ljava.io.PrintStream;, (Z)V, null, null, println, null, [219, 222], 30}\\n\" +", "-\t\t\t\"println[METHOD_IMPORT]{println, Ljava.io.PrintStream;, ([C)V, null, null, println, null, [219, 222], 30}\\n\" +", "-\t\t\t\"printf[METHOD_IMPORT]{printf, Ljava.io.PrintStream;, (Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintStream;, null, null, printf, null, [219, 222], 35}\\n\" +", "-\t\t\t\"printf[METHOD_IMPORT]{printf, Ljava.io.PrintStream;, (Ljava.util.Locale;Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintStream;, null, null, printf, null, [219, 222], 35}\", requestor.getResults());", "+\tassertResults(\"print[METHOD_NAME_REFERENCE]{print, Ljava.io.PrintStream;, (C)V, null, null, print, null, [219, 222], 30}\\n\" +", "+\t\t\t\"print[METHOD_NAME_REFERENCE]{print, Ljava.io.PrintStream;, (D)V, null, null, print, null, [219, 222], 30}\\n\" +", "+\t\t\t\"print[METHOD_NAME_REFERENCE]{print, Ljava.io.PrintStream;, (F)V, null, null, print, null, [219, 222], 30}\\n\" +", "+\t\t\t\"print[METHOD_NAME_REFERENCE]{print, Ljava.io.PrintStream;, (I)V, null, null, print, null, [219, 222], 30}\\n\" +", "+\t\t\t\"print[METHOD_NAME_REFERENCE]{print, Ljava.io.PrintStream;, (J)V, null, null, print, null, [219, 222], 30}\\n\" +", "+\t\t\t\"print[METHOD_NAME_REFERENCE]{print, Ljava.io.PrintStream;, (Ljava.lang.Object;)V, null, null, print, null, [219, 222], 30}\\n\" +", "+\t\t\t\"print[METHOD_NAME_REFERENCE]{print, Ljava.io.PrintStream;, (Ljava.lang.String;)V, null, null, print, null, [219, 222], 30}\\n\" +", "+\t\t\t\"print[METHOD_NAME_REFERENCE]{print, Ljava.io.PrintStream;, (Z)V, null, null, print, null, [219, 222], 30}\\n\" +", "+\t\t\t\"print[METHOD_NAME_REFERENCE]{print, Ljava.io.PrintStream;, ([C)V, null, null, print, null, [219, 222], 30}\\n\" +", "+\t\t\t\"println[METHOD_NAME_REFERENCE]{println, Ljava.io.PrintStream;, ()V, null, null, println, null, [219, 222], 30}\\n\" +", "+\t\t\t\"println[METHOD_NAME_REFERENCE]{println, Ljava.io.PrintStream;, (C)V, null, null, println, null, [219, 222], 30}\\n\" +", "+\t\t\t\"println[METHOD_NAME_REFERENCE]{println, Ljava.io.PrintStream;, (D)V, null, null, println, null, [219, 222], 30}\\n\" +", "+\t\t\t\"println[METHOD_NAME_REFERENCE]{println, Ljava.io.PrintStream;, (F)V, null, null, println, null, [219, 222], 30}\\n\" +", "+\t\t\t\"println[METHOD_NAME_REFERENCE]{println, Ljava.io.PrintStream;, (I)V, null, null, println, null, [219, 222], 30}\\n\" +", "+\t\t\t\"println[METHOD_NAME_REFERENCE]{println, Ljava.io.PrintStream;, (J)V, null, null, println, null, [219, 222], 30}\\n\" +", "+\t\t\t\"println[METHOD_NAME_REFERENCE]{println, Ljava.io.PrintStream;, (Ljava.lang.Object;)V, null, null, println, null, [219, 222], 30}\\n\" +", "+\t\t\t\"println[METHOD_NAME_REFERENCE]{println, Ljava.io.PrintStream;, (Ljava.lang.String;)V, null, null, println, null, [219, 222], 30}\\n\" +", "+\t\t\t\"println[METHOD_NAME_REFERENCE]{println, Ljava.io.PrintStream;, (Z)V, null, null, println, null, [219, 222], 30}\\n\" +", "+\t\t\t\"println[METHOD_NAME_REFERENCE]{println, Ljava.io.PrintStream;, ([C)V, null, null, println, null, [219, 222], 30}\\n\" +", "+\t\t\t\"printf[METHOD_NAME_REFERENCE]{printf, Ljava.io.PrintStream;, (Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintStream;, null, null, printf, null, [219, 222], 35}\\n\" +", "+\t\t\t\"printf[METHOD_NAME_REFERENCE]{printf, Ljava.io.PrintStream;, (Ljava.util.Locale;Ljava.lang.String;[Ljava.lang.Object;)Ljava.io.PrintStream;, null, null, printf, null, [219, 222], 35}\", requestor.getResults());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea348508b73f2d19ef5d56b9a809ab65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 154, "signatureBeforeChange": " \tpublic void test048e()", "signatureAfterChange": " \tpublic void test048e()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\"\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X6.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic void foo(I<String> z) {}\\n\" + ", "+\t\t\t\"\t            ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(I<String>) of type X6 has the same erasure as foo(I<? extends T>) of type Y<T> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+/* javac 7", "+X.java:2: name clash: foo(I<String>) in X6 and foo(I<? extends T>) in Y have the same erasure, yet neither overrides the other", "+    public void foo(I<String> z) {}", "+                ^", "+  where T is a type-variable:", "+    T extends Object declared in class Y", "+1 error", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb2b58e7777bbc6f031789084dd8a56c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearch15Tests.java", "commitBeforeChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "commitAfterChange": "8b048c313a1c6f07bac23f1c84c9ba7d1df315ac", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void testGenericTypeReferenceBA05() throws CoreException", "signatureAfterChange": " \tpublic void testGenericTypeReferenceBA05() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.ygm [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.ygm_obj [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.ygm_exc [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.ygm_qmk [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.ygm_thr [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.ygm_run [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qygm [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qygm_obj [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qygm_exc [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qygm_qmk [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qygm_thr [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qygm_run [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.xgm [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.xgm_obj [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.xgm_exc [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.xgm_qmk [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.xgm_thr [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.xgm_run [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qxgm [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qxgm_obj [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qxgm_exc [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qxgm_qmk [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qxgm_thr [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qxgm_run [GenericMember] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_obj [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_exc [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_thr [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_run [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_thr [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_run [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_obj [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_exc [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_wld [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_thr [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.gen_run [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_obj [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_exc [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_wld [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_thr [GenericMember] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/s/ref/R2.java g1.t.s.ref.R2.qgen_run [GenericMember] EXACT_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed7792ea9126343ffb816f308ac3394d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7ecaef5de16e38a10853a04df519c7ec4f9241fc", "commitAfterChange": "69abb8d1d00eb0a16e17263935c45f1044354687", "methodNumberBeforeChange": 1234, "methodNumberAfterChange": 1234, "signatureBeforeChange": " public void test1203b()", "signatureAfterChange": " public void test1203b()", "diff": ["-// activated", "+// activated test in all modes so we can track any changes", "-\tif (this.complianceLevel < ClassFileConstants.JDK1_7) {", "-\t\treturn;", "-\t}", "-\t\t? \t\"----------\\n\" +", "-\t\t\t\"1. WARNING in X.java (at line 4)\\n\" +", "-\t\t\t\"\treturn this.<String>foobar(one, two);\\n\" +", "-\t\t\t\"\t             ^^^^^^\\n\" +", "-\t\t\t\"Unused type arguments for the non generic method foobar(String, String) of type X; it should not be parameterized with arguments <String>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 16)\\n\" +", "-\t\t\t\"\tthis.<String,String>foobar(one, two);\\n\" +", "-\t\t\t\"\t                    ^^^^^^\\n\" +", "-\t\t\t\"Incorrect number of type arguments for generic method <T>foobar(String, String) of type Y; it cannot be parameterized with arguments <String, String>\\n\" +", "+\t\t? \t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\treturn this.<String>foobar(one, two);\\n\" + ", "+\t\t\t\"\t             ^^^^^^\\n\" + ", "+\t\t\t\"Unused type arguments for the non generic method foobar(String, String) of type X; it should not be parameterized with arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\treturn this.<String>foobar2(one, two);// silenced\\n\" + ", "+\t\t\t\"\t                    ^^^^^^^\\n\" + ", "+\t\t\t\"The method foobar2(String, String) of type X is not generic; it cannot be parameterized with arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\t\"\tthis.<String,String>foobar(one, two);\\n\" + ", "+\t\t\t\"\t                    ^^^^^^\\n\" + ", "+\t\t\t\"Incorrect number of type arguments for generic method <T>foobar(String, String) of type Y; it cannot be parameterized with arguments <String, String>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f290353b71923cd74ea8062f500e5d46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java", "commitBeforeChange": "a9a745d3dc8adaa654d6924765178874380c9a20", "commitAfterChange": "1438111baa39ba1a30117b19ff4ad6ece4a69fe1", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 94, "signatureBeforeChange": " public void _test040()", "signatureAfterChange": " public void _test406744a()", "diff": ["-// https://bugs.eclipse.org/bugs/show_bug.cgi?id=406744, [1.8][compiler][codegen] LambdaConversionException seen when method reference targets a varargs method", "-public void _test040() {", "-\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\t\"X.java\",", "-\t\t\t\t\t\"interface I {\\n\" +", "-\t\t\t\t\t\"    void foo(Integer a1, Integer a2, String a3);\\n\" +", "-\t\t\t\t\t\"}\\n\" +", "-\t\t\t\t\t\"class Y {\\n\" +", "-\t\t\t\t\t\"    static void m(Number a1, Object... rest) { \\n\" +", "-\t\t\t\t\t\"        System.out.println(a1);\\n\" +", "-\t\t\t\t\t\"        print(rest);\\n\" +", "-\t\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\t\"    static void print (Object [] o) {\\n\" +", "-\t\t\t\t\t\"        for (int i = 0; i < o.length; i++)\\n\" +", "-\t\t\t\t\t\"            System.out.println(o[i]);\\n\" +", "-\t\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\t\"}\\n\" +", "-\t\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\t\"    public static void main(String [] args) {\\n\" +", "-\t\t\t\t\t\"        I i = Y::m;\\n\" +", "-\t\t\t\t\t\"        i.foo(10, 20, \\\"10, 20\\\");\\n\" +", "-\t\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\t\"}\\n\",", "-\t\t\t\t},", "-\t\t\t\t\"X cannot be cast to I\");", "-}", "+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=406744", "+public void _test406744a() {", "+\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"interface I {\\n\" +", "+\t\t\t\t\"\tvoid foo(Integer a1, Integer a2, String a3);\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y {\\n\" +", "+\t\t\t\t\"\tstatic void m(Number a1, Object... rest) {\\n\" + ", "+\t\t\t\t\"\t\tSystem.out.println(a1);\\n\" +", "+\t\t\t\t\"\t\tprint(rest);\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tstatic void print (Object [] o) {\\n\" +", "+\t\t\t\t\"\t\tfor (int i = 0; i < o.length; i++)\\n\" +", "+\t\t\t\t\"\t\t\tSystem.out.println(o[i]);\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String [] args) {\\n\" +", "+\t\t\t\t\"\t\tI i = Y::m;\\n\" +", "+\t\t\t\t\"\t\ti.foo(10, 20, \\\"10, 20\\\");\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"10\\n\" +", "+\t\t\t\"20\\n\" +", "+\t\t\t\"10, 20\"", "+\t\t\t);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f41b2e69357accc54768a99dc64d62b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchFineGrainTests.java", "commitBeforeChange": "e4723643d8162fae0d7ec03bc461cac8d970e8fd", "commitAfterChange": "0f3bb2f63b9bc5a0a723cb21573a9214f49a822c", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " public void testTypeRefGenericAll01_AllGenericFlags() throws CoreException", "signatureAfterChange": " public void testTypeRefGenericAll01_AllGenericFlags() throws CoreException", "diff": ["-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends \ufffd|Types|\ufffd, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {@99] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends \ufffd|Types|\ufffd & Comparable<Types> & Serializable, V extends A<? super Types>> {@116] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & \ufffd|Comparable|\ufffd<Types> & Serializable, V extends A<? super Types>> {@124] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<\ufffd|Types|\ufffd> & Serializable, V extends A<? super Types>> {@135] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & \ufffd|Serializable|\ufffd, V extends A<? super Types>> {@144] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends \ufffd|A|\ufffd<? super Types>> {@168] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super \ufffd|Types|\ufffd>> {@178] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic.field [\tGeneric<? extends \ufffd|Types|\ufffd, ?, ?> field;@207] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic.comp [\tComparable<\ufffd|String|\ufffd> comp;@239] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/Generic.java test01.Generic.clazz [\tClass<? extends \ufffd|Exception|\ufffd> clazz;@270] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<\ufffd|Types|\ufffd, UClass, VClass> {@112] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, \ufffd|UClass|\ufffd, VClass> {@119] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, UClass, \ufffd|VClass|\ufffd> {@127] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.TestGeneric.test [\tTestGeneric<\ufffd|Types|\ufffd> test;@150] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<\ufffd|String|\ufffd> foo(TestGeneric<Types> param1, Comparable<String> param2) {@176] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<\ufffd|Types|\ufffd> param1, Comparable<String> param2) {@200] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<Types> param1, Comparable<\ufffd|String|\ufffd> param2) {@226] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<\ufffd|TestGeneric|\ufffd<Types>> bar() {@275] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<TestGeneric<\ufffd|Types|\ufffd>> bar() {@287] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements Comparable<\ufffd|Types|\ufffd>, Serializable {@373] EXACT_MATCH\\n\" +", "-\t\t\"src/test01/TestGeneric.java test01.VClass [class VClass extends A<\ufffd|Types|\ufffd> {}@519] EXACT_MATCH\"", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends !|Types|!, U extends Types & Comparable<Types> & Serializable, V extends A<? super Types>> {@99] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends !|Types|! & Comparable<Types> & Serializable, V extends A<? super Types>> {@116] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & !|Comparable|!<Types> & Serializable, V extends A<? super Types>> {@124] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<!|Types|!> & Serializable, V extends A<? super Types>> {@135] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & !|Serializable|!, V extends A<? super Types>> {@144] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends !|A|!<? super Types>> {@168] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic [public class Generic<T extends Types, U extends Types & Comparable<Types> & Serializable, V extends A<? super !|Types|!>> {@178] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic.field [\tGeneric<? extends !|Types|!, ?, ?> field;@207] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic.comp [\tComparable<!|String|!> comp;@239] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/Generic.java test01.Generic.clazz [\tClass<? extends !|Exception|!> clazz;@270] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<!|Types|!, UClass, VClass> {@112] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, !|UClass|!, VClass> {@119] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric [public class TestGeneric<T> extends Generic<Types, UClass, !|VClass|!> {@127] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.TestGeneric.test [\tTestGeneric<!|Types|!> test;@150] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<!|String|!> foo(TestGeneric<Types> param1, Comparable<String> param2) {@176] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<!|Types|!> param1, Comparable<String> param2) {@200] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java TestGeneric<String> test01.TestGeneric.foo(TestGeneric<Types>, Comparable<String>) [\tTestGeneric<String> foo(TestGeneric<Types> param1, Comparable<!|String|!> param2) {@226] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<!|TestGeneric|!<Types>> bar() {@275] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java Comparable<TestGeneric<Types>> test01.TestGeneric.bar() [\tComparable<TestGeneric<!|Types|!>> bar() {@287] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.UClass [class UClass extends Types implements Comparable<!|Types|!>, Serializable {@373] EXACT_MATCH\\n\" +", "+\t\t\"src/test01/TestGeneric.java test01.VClass [class VClass extends A<!|Types|!> {}@519] EXACT_MATCH\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f896337eeecc5911bfcd2e57a1e41c29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void testSinglePatternSimpleName07() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument07() throws CoreException", "diff": ["-\tpublic void testSinglePatternSimpleName07() throws CoreException {", "+\tpublic void testStringNoArgument07() throws CoreException {", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [Generic<Object, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic<?, ?, ?>.MemberGeneric] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [Generic<Object, Exception, RuntimeException>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic<?, ?, ?>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [Generic<Object, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [Generic<?, ?, ?>.MemberGeneric] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [Generic<Object, Exception, RuntimeException>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [Generic<?, ?, ?>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [Generic<Object>.MemberGeneric] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic<Exception>.MemberGeneric] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>.MemberGeneric] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>.MemberGeneric] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>.MemberGeneric] EXACT_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [Generic<Object>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic<Exception>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [Generic<Object>.MemberGeneric] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [Generic<Exception>.MemberGeneric] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [Generic<?>.MemberGeneric] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [Generic<? extends Throwable>.MemberGeneric] EXACT_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [Generic<? super RuntimeException>.MemberGeneric] EXACT_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [Generic<Object>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [Generic<Exception>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [Generic<?>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [Generic<? extends Throwable>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [Generic<? super RuntimeException>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f94faa45af5da4d6d39ae5503608060d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void testElementPatternNestedParam06() throws CoreException", "signatureAfterChange": " \tpublic void testTypeNestedMultipleArguments02() throws CoreException", "diff": ["-\tpublic void testElementPatternNestedParam06() throws CoreException {", "+\tpublic void testTypeNestedMultipleArguments02() throws CoreException {", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_wld [GM<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<GM<?, ?, ?>.Member,GM<?, ?, ?>.Member,GM<?, ?, ?>.Member>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_obj [GM<Object, Exception, RuntimeException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_wld [GM<GS<?>.Member, GS<?>.Member, GS<?>.Member>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_www [GM<GS<?>.Member, GS<GS<?>.Member>.Member, GS<GS<GS<?>.Member>.Member>.Member>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_obj [GM<GS<Object>.Member, GS<? extends Throwable>.Member, GS<? super RuntimeException>.Member>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_wld [g3.t.def.GM<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [g3.t.def.GM<g3.t.def.GM<?, ?, ?>.Member, g3.t.def.GM<?, ?, ?>.Member, g3.t.def.GM<?, ?, ?>.Member>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [g3.t.def.GM<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [g3.t.def.GM<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [g3.t.def.GM<?, ?, ?>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_obj [g3.t.def.GM<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_wld [g3.t.def.GM<g3.t.def.GS<?>.Member, g3.t.def.GS<?>.Member, g3.t.def.GS<?>.Member>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_www [g3.t.def.GM<g3.t.def.GS<?>.Member, g3.t.def.GS<g3.t.def.GS<?>.Member>.Member, g3.t.def.GS<g3.t.def.GS<g3.t.def.GS<?>.Member>.Member>.Member>.Member] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_obj [g3.t.def.GM<g3.t.def.GS<java.lang.Object>.Member, g3.t.def.GS<? extends java.lang.Throwable>.Member, g3.t.def.GS<? super java.lang.RuntimeException>.Member>.Member] EXACT_MATCH\",", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_wld [GM<?, ?, ?>.Member] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<GM<?, ?, ?>.Member,GM<?, ?, ?>.Member,GM<?, ?, ?>.Member>.Member] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<?, ?, ?>.Member] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<?, ?, ?>.Member] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_www [GM<?, ?, ?>.Member] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgsm_obj [GM<Object, Exception, RuntimeException>.Member] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_wld [GM<GS<?>.Member, GS<?>.Member, GS<?>.Member>.Member] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_www [GM<GS<?>.Member, GS<GS<?>.Member>.Member, GS<GS<GS<?>.Member>.Member>.Member>.Member] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.sgms_obj [GM<GS<Object>.Member, GS<? extends Throwable>.Member, GS<? super RuntimeException>.Member>.Member] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_wld [g3.t.def.GM<?, ?, ?>.Member] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [g3.t.def.GM<g3.t.def.GM<?, ?, ?>.Member, g3.t.def.GM<?, ?, ?>.Member, g3.t.def.GM<?, ?, ?>.Member>.Member] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [g3.t.def.GM<?, ?, ?>.Member] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [g3.t.def.GM<?, ?, ?>.Member] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_www [g3.t.def.GM<?, ?, ?>.Member] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgsm_obj [g3.t.def.GM<java.lang.Object, java.lang.Exception, java.lang.RuntimeException>.Member] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_wld [g3.t.def.GM<g3.t.def.GS<?>.Member, g3.t.def.GS<?>.Member, g3.t.def.GS<?>.Member>.Member] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_www [g3.t.def.GM<g3.t.def.GS<?>.Member, g3.t.def.GS<g3.t.def.GS<?>.Member>.Member, g3.t.def.GS<g3.t.def.GS<g3.t.def.GS<?>.Member>.Member>.Member>.Member] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g3/t/ref/R2.java g3.t.ref.R2.qgms_obj [g3.t.def.GM<g3.t.def.GS<java.lang.Object>.Member, g3.t.def.GS<? extends java.lang.Throwable>.Member, g3.t.def.GS<? super java.lang.RuntimeException>.Member>.Member] ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcf7d90e50366fd421c9753ccd98694b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic void testStringNoArgument07() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument07() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [Generic<Object, Exception, RuntimeException>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic<?, ?, ?>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [Generic<Object, Exception, RuntimeException>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic<?, ?, ?>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [Generic<Object, Exception, RuntimeException>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [Generic<?, ?, ?>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [Generic<Object, Exception, RuntimeException>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [Generic<Exception, Exception, RuntimeException>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [Generic<?, ?, ?>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [Generic<Object>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic<Exception>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_obj [Generic<Object>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_exc [Generic<Exception>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_wld [Generic<?>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_thr [Generic<? extends Throwable>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.gen_run [Generic<? super RuntimeException>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [Generic<Object>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [Generic<Exception>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [Generic<?>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [Generic<? extends Throwable>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [Generic<? super RuntimeException>.MemberGeneric] COMPATIBLE_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_obj [Generic<Object>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_exc [Generic<Exception>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_wld [Generic<?>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_thr [Generic<? extends Throwable>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R3.java g1.t.s.ref.R3.qgen_run [Generic<? super RuntimeException>.MemberGeneric] EQUIVALENT_ERASURE_MATCH\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe9e438d863772f990faa2aed67328a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9f4083645d70a432f33ad4b76043e33c22dce66a", "commitAfterChange": "62b1363351c6bbbf8add0db3d16b932995188a11", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic void testStringNoArgument06() throws CoreException", "signatureAfterChange": " \tpublic void testStringNoArgument06() throws CoreException", "diff": ["-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Generic<Object, Exception, RuntimeException>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Generic<Exception, Exception, RuntimeException>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Generic<?, ?, ?>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_obj [Generic<Object, Exception, RuntimeException>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_exc [Generic<Exception, Exception, RuntimeException>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_wld [Generic<?, ?, ?>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.gen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Generic<Object, Exception, RuntimeException>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Generic<Exception, Exception, RuntimeException>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Generic<?, ?, ?>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_obj [Generic<Object, Exception, RuntimeException>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_exc [Generic<Exception, Exception, RuntimeException>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_wld [Generic<?, ?, ?>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_thr [Generic<? extends Throwable, ? extends Exception, ? extends RuntimeException>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/m/ref/R4.java g1.t.m.ref.R4.qgen_run [Generic<? super RuntimeException, ? super IllegalMonitorStateException, ? super IllegalMonitorStateException>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Generic<Object>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Generic<Exception>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic<?>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic<? extends Throwable>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic<? super RuntimeException>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_obj [Generic<Object>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_exc [Generic<Exception>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_wld [Generic<?>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_thr [Generic<? extends Throwable>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.gen_run [Generic<? super RuntimeException>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Generic<Object>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Generic<Exception>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Generic<?>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Generic<? extends Throwable>.Member] COMPATIBLE_ERASURE_MATCH\\n\" +", "-\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic<? super RuntimeException>.Member] COMPATIBLE_ERASURE_MATCH\",", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_obj [Generic<Object>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_exc [Generic<Exception>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_wld [Generic<?>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_thr [Generic<? extends Throwable>.Member] EQUIVALENT_ERASURE_MATCH\\n\" +", "+\t\t\t\"src/g1/t/s/ref/R4.java g1.t.s.ref.R4.qgen_run [Generic<? super RuntimeException>.Member] EQUIVALENT_ERASURE_MATCH\","]}], "num": 20382}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "210b64fdefd5a285d94d17c665f2ebf5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10a4df4dbe942a8e80b2840e4ece9c2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaSearchTests.java", "commitBeforeChange": "7ffcb2a7af26043f6494026025d910fb887342cc", "commitAfterChange": "539039c13c4eacb615ac208c3a1858f04a9b8067", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t\tprotected void writeLine() throws CoreException", "signatureAfterChange": " \t\tprotected void writeLine() throws CoreException", "diff": ["-\t\t\t\tif (match instanceof MethodReferenceMatch) {", "-\t\t\t\t\tMethodReferenceMatch methRef = (MethodReferenceMatch) match;", "-\t\t\t\t\tif (methRef.isPolymorphic()) {", "-\t\t\t\t\t\tif (match.getAccuracy() == SearchMatch.A_ACCURATE) {", "-\t\t\t\t\t\t\tif (this.showPolymorphic > 0) {", "-\t\t\t\t\t\t\t\tline.append(\" POLYMORPHIC\");", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tif (this.showPolymorphic <= 1) {", "-\t\t\t\t\t\t\t\tline = null; // do not show potential polymorphic matches", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tline.append(\" POLYMORPHIC\");", "-\t\t\t\t\t\t\t}", "+\t\t\t\tif (this.showFlavors > 0) {", "+\t\t\t\t\tif (match instanceof MethodReferenceMatch) {", "+\t\t\t\t\t\tMethodReferenceMatch methRef = (MethodReferenceMatch) match;", "+\t\t\t\t\t\tif (methRef.isOverridden() && showOverridden()) {", "+\t\t\t\t\t\t\tline.append(\" OVERRIDDEN\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "936c64b880ead1cb570800f9ef083071", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaSearchTests.java", "commitBeforeChange": "20c9553c55b67a9c07624bd0b5b35f188a7f1769", "commitAfterChange": "14fb89a0281d6b0089ef94e47420da3d5f85923f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t\tprotected void writeLine() throws CoreException", "signatureAfterChange": " \t\tprotected void writeLine() throws CoreException", "diff": ["+\t\t\t\tif (match instanceof MethodReferenceMatch) {", "+\t\t\t\t\tMethodReferenceMatch methRef = (MethodReferenceMatch) match;", "+\t\t\t\t\tif (methRef.isPolymorphic()) {", "+\t\t\t\t\t\tif (match.getAccuracy() == SearchMatch.A_ACCURATE) {", "+\t\t\t\t\t\t\tif (this.showPolymorphic > 0) {", "+\t\t\t\t\t\t\t\tline.append(\" POLYMORPHIC\");", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (this.showPolymorphic <= 1) {", "+\t\t\t\t\t\t\t\tline = null; // do not show potential polymorphic matches", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tline.append(\" POLYMORPHIC\");", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 19125}
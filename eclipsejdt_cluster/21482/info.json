{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52e0a760ff895bb43a1b725fd20ff903", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fa1b7023dac17d4ec988a71006f8894", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5acc9f38696ecf93bf41e3ef5e2738b55bfe04e9", "commitAfterChange": "bd576a9c793017db2f7eae213c14590a7efc1565", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \tpublic void computePackageFragmentRoots(\r \t\tIClasspathEntry entry,\r \t\tObjectVector accumulatedRoots, \r \t\tHashSet rootIDs, \r \t\tboolean insideOriginalProject,\r \t\tboolean checkExistency,\r \t\tboolean retrieveExportedRoots)", "signatureAfterChange": "\r \tpublic void computePackageFragmentRoots(\r \t\tIClasspathEntry entry,\r \t\tObjectVector accumulatedRoots, \r \t\tHashSet rootIDs, \r \t\tboolean insideOriginalProject,\r \t\tboolean checkExistency,\r \t\tboolean retrieveExportedRoots)", "diff": ["-\t\t\t\t\tif (\"jar\".equalsIgnoreCase(extension) //$NON-NLS-1$\r", "-\t\t\t\t\t\t|| \"zip\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "+\t\t\t\t\tif (((java.io.File)target).isFile()\r", "+\t\t\t\t\t\t&& (\"jar\".equalsIgnoreCase(extension) //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t|| \"zip\".equalsIgnoreCase(extension))) { //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4df43299e8fb588afe310b885941abe4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java", "commitBeforeChange": "5ca17c5326a26b6eee24f188fb8aac58b28e7a38", "commitAfterChange": "caad60d9b7772e3fe7e4cc9da5c6ace1a71de6dd", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public boolean equals(Object o)", "signatureAfterChange": " public boolean equals(Object o)", "diff": ["+\tif (((SourceType) o).isLambda()) ", "+\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f63a3eaab77ac63bd0176bf017724cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "0d0ece63676205621683728295e330e5d3ff8080", "commitAfterChange": "4548a7d90e8e4c11b66df276814b1cfc602d40e1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void indexLibrary(IPath path, IProject requestingProject)", "signatureAfterChange": " public void indexLibrary(IPath path, IProject requestingProject)", "diff": ["-\t\trequest = new AddJarFileToIndex(path, this);", "+\t\tif (((java.io.File)target).isFile()) {", "+\t\t\trequest = new AddJarFileToIndex(path, this);", "+\t\t} else {", "+\t\t\treturn;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5b95f64603851333a28bb486122f3db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5b3eda451f9780a3f24b63c355f2e917e2a36cb3", "commitAfterChange": "cc483c7a0a425a85051b8a888de38255c6c05c0c", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "signatureAfterChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "diff": ["+\t\t\t\t\t\tif (method.declaringClass.isInterface())", "+\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d462539dbc6e3813e2c6dea43d535546", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "f13b3f138b2707e2ed0706cfa2c6808559abaedc", "commitAfterChange": "3f8d782744788869617c5d4942a7906c3f97360f", "methodNumberBeforeChange": 258, "methodNumberAfterChange": 258, "signatureBeforeChange": " public void needToEmulateMethodAccess( \tMethodBinding method,  \tASTNode location)", "signatureAfterChange": " public void needToEmulateMethodAccess( \tMethodBinding method,  \tASTNode location)", "diff": ["-\tif (method.isConstructor())", "+\tif (method.isConstructor()) {", "+\t\tif (method.declaringClass.isEnum())", "+\t\t\treturn; // tolerate emulation for enum constructors, which can only be made private", "-\telse", "-\t\tthis.handle(", "-\t\t\tIProblem.NeedToEmulateMethodAccess, ", "-\t\t\tnew String[] {", "-\t\t\t\tnew String(method.declaringClass.readableName()), ", "-\t\t\t\tnew String(method.selector), ", "-\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, false)", "-\t\t\t }, ", "-\t\t\tnew String[] {", "-\t\t\t\tnew String(method.declaringClass.shortReadableName()), ", "-\t\t\t\tnew String(method.selector), ", "-\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, true)", "-\t\t\t }, ", "-\t\t\tlocation.sourceStart, ", "-\t\t\tlocation.sourceEnd); ", "+\t\treturn;", "+\t}", "+\tthis.handle(", "+\t\tIProblem.NeedToEmulateMethodAccess, ", "+\t\tnew String[] {", "+\t\t\tnew String(method.declaringClass.readableName()), ", "+\t\t\tnew String(method.selector), ", "+\t\t\ttypesAsString(method.isVarargs(), method.parameters, false)", "+\t\t }, ", "+\t\tnew String[] {", "+\t\t\tnew String(method.declaringClass.shortReadableName()), ", "+\t\t\tnew String(method.selector), ", "+\t\t\ttypesAsString(method.isVarargs(), method.parameters, true)", "+\t\t }, ", "+\t\tlocation.sourceStart, ", "+\t\tlocation.sourceEnd); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1897da7933995f0470a50206b979e7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModelUpdater.java", "commitBeforeChange": "07f2a3d76611d11852367ea136a6272990449122", "commitAfterChange": "b51487a3e769c1faf54930e906289a243b81936a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprotected void traverseDelta( \t\tIJavaElementDelta delta, \t\tIPackageFragmentRoot root, \t\tIJavaProject project)", "signatureAfterChange": " \tprotected void traverseDelta( \t\tIJavaElementDelta delta, \t\tIPackageFragmentRoot root, \t\tIJavaProject project)", "diff": ["+\t\t\t\t// filter out working copies (we don't want to add/remove them to/from the package fragment", "+\t\t\t\tif (((IWorkingCopy)element).isWorkingCopy()) {", "+\t\t\t\t\treturn;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f38e457e1cf9bc02e518772416274ac6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "7b6f0e4ecac6fcddfaa03a2bf838a6edce0a29e1", "commitAfterChange": "106d465abf09cff60d0a131937e7871fa39f2eb4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "signatureAfterChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "diff": ["+\t\t\t\t\t\tif (originalParameterizedType.type.isBinaryBinding()) break identicalVariables; // generic binary is never used as is, see 85262"]}], "num": 21482}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "15520821d2b748c7b30c3a508dfe6a43", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c98c6322a7979b5b4c3a355f982b2ccb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "888ff915accf0f7dc08ba845bca467c94f1e290b", "commitAfterChange": "f69c200469412ca3b93e80844c6c1f4e077169ac", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tprotected abstract Object openWhenClosed(HashMap newElements, IProgressMonitor pm) throws JavaModelException;", "signatureAfterChange": " \tprotected Object openWhenClosed(Object info, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\tprotected abstract Object openWhenClosed(HashMap newElements, IProgressMonitor pm) throws JavaModelException;", "+\tprotected Object openWhenClosed(Object info, IProgressMonitor monitor) throws JavaModelException {", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tboolean hadTemporaryCache = manager.hasTemporaryCache();", "+\t\ttry {", "+\t\t\tHashMap newElements = manager.getTemporaryCache();", "+\t\t\tgenerateInfos(info, newElements, monitor);", "+\t\t\tif (info == null) {", "+\t\t\t\tinfo = newElements.get(this);", "+\t\t\t}", "+\t\t\tif (info == null) { // a source ref element could not be opened", "+\t\t\t\t// close any buffer that was opened for the openable parent", "+\t\t\t\tIterator iterator = newElements.keySet().iterator();", "+\t\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\t\tIJavaElement element = (IJavaElement)iterator.next();", "+\t\t\t\t\tif (element instanceof Openable) {", "+\t\t\t\t\t\t((Openable)element).closeBuffer();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tthrow newNotPresentException();", "+\t\t\t}", "+\t\t\tif (!hadTemporaryCache) {", "+\t\t\t\tmanager.putInfos(this, newElements);", "+\t\t\t}", "+\t\t} finally {", "+\t\t\tif (!hadTemporaryCache) {", "+\t\t\t\tmanager.resetTemporaryCache();", "+\t\t\t}", "+\t\t}", "+\t\treturn info;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfc19bb7384ca05f0ccc1938c1cc87cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java", "commitBeforeChange": "888ff915accf0f7dc08ba845bca467c94f1e290b", "commitAfterChange": "f69c200469412ca3b93e80844c6c1f4e077169ac", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void makeConsistent(IProgressMonitor pm) throws JavaModelException", "signatureAfterChange": " public void makeConsistent(IProgressMonitor monitor) throws JavaModelException", "diff": ["-public void makeConsistent(IProgressMonitor pm) throws JavaModelException {", "+public void makeConsistent(IProgressMonitor monitor) throws JavaModelException {", "-\t// create a new info and make it the current info", "-\tgetElementInfo(pm);", "+\tboolean hadTemporaryCache = manager.hasTemporaryCache();", "+\ttry {", "+\t\tHashMap newElements = manager.getTemporaryCache();", "+\t\topenWhenClosed(newElements, monitor);", "+\t\tif (newElements.get(this) == null) {", "+\t\t\t// close any buffer that was opened for the new elements", "+\t\t\tIterator iterator = newElements.keySet().iterator();", "+\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\tIJavaElement element = (IJavaElement)iterator.next();", "+\t\t\t\tif (element instanceof Openable) {", "+\t\t\t\t\t((Openable)element).closeBuffer();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthrow newNotPresentException();", "+\t\t}", "+\t\tif (!hadTemporaryCache) {", "+\t\t\tmanager.putInfos(this, newElements);", "+\t\t}", "+\t} finally {", "+\t\tif (!hadTemporaryCache) {", "+\t\t\tmanager.resetTemporaryCache();", "+\t\t}", "+\t}"]}], "num": 36735}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "64c07191df1c26542205363b47fbf6ce", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b2c1ba7059f0c9752a76a7a8b5d8ae4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 130, "methodNumberAfterChange": 128, "signatureBeforeChange": " \tpublic void setRawClasspath( \t\tIClasspathEntry[] entries, \t\tIPath output, \t\tboolean canModifyResources, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic void setRawClasspath( \t\tIClasspathEntry[] entries, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "diff": ["-\t\tIClasspathEntry[] entries,", "-\t\tIPath output,", "-\t\tboolean canModifyResources,", "-\t\tIProgressMonitor monitor)", "-\t\tthrows JavaModelException {", "-\t\tsetRawClasspath(", "-\t\t\tentries, ", "-\t\t\toutput,", "-\t\t\tmonitor, ", "-\t\t\tcanModifyResources, ", "-\t\t\tgetResolvedClasspath(true/*ignoreUnresolvedEntry*/, false/*don't generateMarkerOnError*/, false/*don't returnResolutionInProgress*/),", "-\t\t\ttrue, // needValidation", "-\t\t\tcanModifyResources); // save only if modifying resources is allowed", "+\t\t\tgetOutputLocation()/*don't change output*/,", "+\t\t\ttrue/*can change resource (as per API contract)*/,", "+\t\t\tmonitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bb5a58c51ffcf02374d03ea6f5e337d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic IPath getOutputLocation(boolean createMarkers, boolean logProblems) throws JavaModelException", "signatureAfterChange": " \tpublic IPath getOutputLocation() throws JavaModelException", "diff": ["-\t */", "-\tpublic IPath getOutputLocation(boolean createMarkers, boolean logProblems) throws JavaModelException {", "-", "-\t\tJavaModelManager.PerProjectInfo perProjectInfo = getPerProjectInfo();", "+\t\t// Do not create marker while getting output location", "+\t\tJavaModelManager.PerProjectInfo perProjectInfo = this.getPerProjectInfo();", "-", "+\t\t", "-\t\tthis.getRawClasspath(createMarkers, logProblems);", "+\t\tgetRawClasspath();", "+\t\t", "-\t\t\treturn defaultOutputLocation();", "+\t\t\treturn this.defaultOutputLocation();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92770cbe9ddd2edd7da54f6ac70b14c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "6ab8a052a7d8ac7a830c6733e19e9b30c380dad7", "commitAfterChange": "ec64763fa4e57b4943311ee555e5ddce81854cf2", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic BoundSet inferInvocationType(BoundSet b1, TypeBinding expectedType, InvocationSite invocationSite, MethodBinding method) \t\t\tthrows InferenceFailureException", "signatureAfterChange": " \tpublic BoundSet inferInvocationType(TypeBinding expectedType, InvocationSite invocationSite, MethodBinding method) throws InferenceFailureException", "diff": ["-\tpublic BoundSet inferInvocationType(BoundSet b1, TypeBinding expectedType, InvocationSite invocationSite, MethodBinding method)", "-\t\t\tthrows InferenceFailureException ", "+\tpublic BoundSet inferInvocationType(TypeBinding expectedType, InvocationSite invocationSite, MethodBinding method) throws InferenceFailureException ", "-\t\t//", "-\t\tBoundSet previous = this.currentBounds.copy();", "-\t\tthis.currentBounds = b1;", "+\t\t", "+\t\tthis.currentBounds = this.b2.copy();", "-\t\t\t\tthis.currentBounds = previous; // don't let bounds from unsuccessful attempt leak into subsequent attempts", "+\t\t\t\tthis.currentBounds = this.b2; // don't let bounds from unsuccessful attempt leak into subsequent attempts"]}], "num": 381}
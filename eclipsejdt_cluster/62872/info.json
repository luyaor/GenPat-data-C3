{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7ef4003bf8c2ab7041ec8d14959d4c2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39e71d31d413386b4b7e12cf6261ae4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprotected ParameterizedSourceType selectParameterizedSourceType(ICompilationUnit unit, String textComment) throws JavaModelException", "signatureAfterChange": " \tprotected ParameterizedSourceType selectParameterizedSourceType(ICompilationUnit unit, String selection, int occurences) throws JavaModelException", "diff": ["-\tprotected ParameterizedSourceType selectParameterizedSourceType(ICompilationUnit unit, String textComment) throws JavaModelException {", "-\t\tASTNode node = findNode(unit, textComment);", "-\t\t// TODO (frederic) verify with olivier whether we should always have a PARAMETERIZED TYPE or", "-\t\t// QUALIFIED_TYPE with PARAMETERIZED_TYPE parent are valid...", "-//\t\tassertEquals(\"Invalid node type\", ASTNode.PARAMETERIZED_TYPE, node.getNodeType());", "-//\t\tParameterizedType parameterizedType = (ParameterizedType) node;", "-\t\tIJavaElement[] selection = unit.codeSelect(node.getStartPosition(), node.getLength());", "-\t\tassertEquals(\"Invalid selection\", 1, selection.length);", "-\t\tIJavaElement element = selection[0];", "-\t\tassertTrue(\"Not a parameterized source type: \"+element.getElementName(), element instanceof SourceType);", "-\t\treturn (ParameterizedSourceType) element;", "+\t */", "+\tprotected ParameterizedSourceType selectParameterizedSourceType(ICompilationUnit unit, String selection, int occurences) throws JavaModelException {", "+\t\tSourceType sourceType = selectSourceType(unit, selection, occurences);", "+\t\tassertTrue(\"Not a parameterized source type: \"+sourceType.getElementName(), sourceType instanceof ParameterizedSourceType);", "+\t\treturn (ParameterizedSourceType) sourceType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67a8947133f6b9a41ae48d6c84f3bbcd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/JavaSourceFilePrintWriter.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t     public void close()", "signatureAfterChange": " \t     public void close()", "diff": ["-    {", "-    \t", "+    {\t", "-\t        Phase phase = _env.getPhase();", "-\t\t", "-\t        FileGenerationResult result = null;", "-\t        if ( phase == Phase.RECONCILE )", "-\t        {", "-\t        \tICompilationUnit parentCompilationUnit = _env.getCompilationUnit();", "-\t            result  = gfm.generateFileDuringReconcile( ", "-\t                parentCompilationUnit, _typeName, contents, parentCompilationUnit.getOwner(), null, null );", "-\t        }", "-\t        else if ( phase == Phase.BUILD)\t", "-\t        {", "-\t\t\t\tresult = gfm.generateFileDuringBuild( ", "-\t\t\t\t\t\t_env.getFile(),  _typeName, contents, _env, null /* progress monitor */ );", "-\t        }", "-\t        else", "-\t        {", "-\t            throw new IllegalStateException( \"Unexpected phase value: \" + phase ); //$NON-NLS-1$", "-\t        }", "+\t        FileGenerationResult result = gfm.generateFileDuringBuild( ", "+\t\t\t\t\t_env.getFile(),  _typeName, contents, _env, null /* progress monitor */ );;"]}], "num": 62872}
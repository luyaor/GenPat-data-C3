{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75ef6894e268add699cdb262003bd0b3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af838ae7ddb1be90ba5b5cb5920da0c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "c35f48a470f9475e0b73c6c14c2a26ca2378ab58", "commitAfterChange": "3c7abdea60e3dea7a9b2b822e92d260aea9179a7", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic boolean isCompatibleWith(TypeBinding left, Scope someScope)", "signatureAfterChange": " \t \tpublic boolean isCompatibleWith(TypeBinding left, Scope someScope)", "diff": ["-\t\tif (sam.returnType.id == TypeIds.T_void) {", "-\t\t\tif (!this.voidCompatible)", "-\t\t\t\treturn false;", "-\t\t} else {", "-\t\t\tif (!this.valueCompatible)", "-\t\t\t\treturn false;", "-\t\t}", "+\t\tif (this.shapeAnalysisComplete && squarePegInRoundHole(sam))", "+\t\t\treturn false;", "-", "+\t\t\tif (!this.shapeAnalysisComplete) {", "+\t\t\t\tthis.valueCompatible = copy.doesNotCompleteNormally();", "+\t\t\t\tthis.shapeAnalysisComplete = true;", "+\t\t\t\tif (squarePegInRoundHole(sam))", "+\t\t\t\t\treturn false;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce4006abd760217a586882bfec5866e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "7a8728f6d81c28d6bb26a6aa19e5258c1824c75b", "commitAfterChange": "58d1213fc33b8c0012fb5fd98a7e0347bfcceca1", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic final boolean needClassInitMethod()", "signatureAfterChange": " \tpublic final boolean needClassInitMethod()", "diff": ["-\t\tif (fields == null)", "-\t\t\treturn false;", "-\t\t\t\treturn true; // fields are implicitly statics", "+\t\t\t\treturn this.fields != null; // fields are implicitly statics", "+\t\t\tcase TypeDeclaration.ENUM_DECL:", "+\t\t\t\treturn true; // even if no enum constants, need to set $VALUES array", "-\t\tfor (int i = fields.length; --i >= 0;) {", "-\t\t\tFieldDeclaration field = fields[i];", "-\t\t\t//need to test the modifier directly while there is no binding yet", "-\t\t\tif ((field.modifiers & ClassFileConstants.AccStatic) != 0)", "-\t\t\t\treturn true; // TODO (philippe) shouldn't it check whether field is initializer or has some initial value ?", "-\t\t\tif (field.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT)", "-\t\t\t\treturn true;", "+\t\tif (this.fields != null) {", "+\t\t\tfor (int i = this.fields.length; --i >= 0;) {", "+\t\t\t\tFieldDeclaration field = this.fields[i];", "+\t\t\t\t//need to test the modifier directly while there is no binding yet", "+\t\t\t\tif ((field.modifiers & ClassFileConstants.AccStatic) != 0)", "+\t\t\t\t\treturn true; // TODO (philippe) shouldn't it check whether field is initializer or has some initial value ?", "+\t\t\t}"]}], "num": 21676}
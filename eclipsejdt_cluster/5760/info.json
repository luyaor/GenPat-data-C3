{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "194ec310fc56b8f5a9963777f7f555df", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46e4d99e6747e483a6cbdb4481ad50aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "3d74fc46f613564dbe52550c081fa58f357d0bc5", "commitAfterChange": "b02180d5cfd484077c935b61cfda329a4e9a0c9e", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "signatureAfterChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "diff": ["-\t\t\t\tif (level != null)", "-\t\t\t\t\tthis.patternLocator.matchReportImportRef(importRef, null/*no binding*/, createImportHandle(importRef), level.intValue(), this);", "+\t\t\t\tif (level != null) {", "+\t\t\t\t\tBinding binding = (importRef.bits & ASTNode.OnDemand) != 0", "+\t\t\t\t\t\t? unitScope.getImport(CharOperation.subarray(importRef.tokens, 0, importRef.tokens.length), true, importRef.isStatic())", "+\t\t\t\t\t\t: unitScope.getImport(importRef.tokens, false, importRef.isStatic());", "+\t\t\t\t\tthis.patternLocator.matchReportImportRef(importRef, binding, createImportHandle(importRef), level.intValue(), this);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bdf5257fd2578c0e45716be9175d860", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "b1ce5a863ad0a541f80dd0793ff207f1e4ecf677", "commitAfterChange": "72d60854091bd7e8a5aafafdfea62cc297a3eb41", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 60, "signatureBeforeChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "signatureAfterChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "diff": ["+\t\tthis.unitScope = unit.scope.compilationUnitScope();", "+\t\tthis.patternLocator.unitScope = this.unitScope;", "-\t\t\t\t\t? unit.scope.compilationUnitScope().getImport(CharOperation.subarray(importRef.tokens, 0, importRef.tokens.length), true, importRef.isStatic())", "-\t\t\t\t\t: unit.scope.compilationUnitScope().getImport(importRef.tokens, false, importRef.isStatic());", "+\t\t\t\t\t? unitScope.getImport(CharOperation.subarray(importRef.tokens, 0, importRef.tokens.length), true, importRef.isStatic())", "+\t\t\t\t\t: unitScope.getImport(importRef.tokens, false, importRef.isStatic());", "+\t} else {", "+\t\tthis.unitScope = null;", "+\t\tthis.patternLocator.unitScope = null;"]}], "num": 5760}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e689ee036984392f5b96e534b9493c42", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d7a1f104211451ff0114e95474bbe86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "bc8a42889f857ed7728b976d31e674de6afdad4d", "commitAfterChange": "e50f3d9d374cf35289e57b1f80fafcaa8e59eb2e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void generateSyntheticFieldInitializationsIfNecessary( \t\tMethodScope scope, \t\tCodeStream codeStream, \t\tReferenceBinding declaringClass, \t\tboolean addNullCheckForEnclosingInstance)", "signatureAfterChange": "  \tpublic void generateSyntheticFieldInitializationsIfNecessary( \t\tMethodScope scope, \t\tCodeStream codeStream, \t\tReferenceBinding declaringClass)", "diff": ["-\t\tReferenceBinding declaringClass,", "-\t\tboolean addNullCheckForEnclosingInstance) {", "+\t\tReferenceBinding declaringClass) {", "-\t\tSourceTypeBinding enclosingType = nestedType.enclosingType;", "-\t\t\t\tif (enclosingType == syntheticArg.type && addNullCheckForEnclosingInstance) {", "-\t\t\t\t\tcodeStream.dup();", "-\t\t\t\t\tcodeStream.invokeObjectGetClass(); // causes null check", "-\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d3d20ac9533d3782e73219e4886d590", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "ba623d582045575b43eee2b86be165ff58225746", "commitAfterChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "methodNumberBeforeChange": 237, "methodNumberAfterChange": 237, "signatureBeforeChange": " public void methodNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " public void methodNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-\t\t\ttypesAsString(currentMethod.original().isVarargs(), currentMethod.original().parameters, false),", "+\t\t\ttypesAsString(currentMethod.isVarargs(), currentMethod.parameters, false),", "-\t\t\ttypesAsString(inheritedMethod.original().isVarargs(), inheritedMethod.original().parameters, false),", "+\t\t\ttypesAsString(inheritedMethod.isVarargs(), inheritedMethod.parameters, false),", "-\t\t\ttypesAsString(currentMethod.original().isVarargs(), currentMethod.original().parameters, true),", "+\t\t\ttypesAsString(currentMethod.isVarargs(), currentMethod.parameters, true),", "-\t\t\ttypesAsString(inheritedMethod.original().isVarargs(), inheritedMethod.original().parameters, true),", "+\t\t\ttypesAsString(inheritedMethod.isVarargs(), inheritedMethod.parameters, true),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aff5445c8ddb64a796857102dda7db57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "fbbba838d59f0d76b49f33bcea6536f9f0897679", "commitAfterChange": "5174a8c02a257a6c5c2bc19d00e0cd6b27cfdb23", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\t\t\t\t} else if (token.equals(\"raw\")) {//$NON-NLS-1$", "-\t\t\t\t\t\t\tCompilerOptions.DISABLED);\t\t\t\t\t\t", "-\t\t\t\t\t} else if (token.equals(\"allUnchecked\")) {//$NON-NLS-1$", "-\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportUncheckedTypeOperation,", "-\t\t\t\t\t\t\tisEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);", "-\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportRawTypeReference,", "-\t\t\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);\t\t\t\t\t\t", "+\t\t\t\t\t\t\tisEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9a636e6d9f29001bcb0fd8f371fd021", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTestAST3_2.java", "commitBeforeChange": "d5c3de1bf49901f78640f1692fd5e63eca3fdc62", "commitAfterChange": "59d1426d6ce986de5d867421d1fe44ed55b3b34c", "methodNumberBeforeChange": 307, "methodNumberAfterChange": 307, "signatureBeforeChange": " \tpublic void test0660() throws JavaModelException", "signatureAfterChange": " \tpublic void test0660() throws JavaModelException", "diff": ["-\t\t\tString key = variableBinding.getKey();", "+\t\t\t// String key = variableBinding.getKey();", "-\t\t\tnode = getASTNode(unit, 0, 0, 1);", "+\t\t\tnode = getASTNode(unit, 0, 0, 0);", "-\t\t\tString key2 = variableBinding.getKey();", "-\t\t\tassertFalse(\"Keys should not be equals\", key2.equals(key));", "+\t\t\t// String key2 = variableBinding.getKey();", "+\t\t\t//assertFalse(\"Keys should not be equals\", key2.equals(key));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffd120b0e15e73970f5e6b05dfd216af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "653b549b2ec915800fe34bbb2ab9809b71ca66a5", "commitAfterChange": "2caa59d033a9b6c8ec71aab586472ad7fe749893", "methodNumberBeforeChange": 483, "methodNumberAfterChange": 483, "signatureBeforeChange": " public void nullityMismatchIsNull(Expression expression, TypeBinding requiredType, char[][] annotationName)", "signatureAfterChange": " public void nullityMismatchIsNull(Expression expression, TypeBinding requiredType, char[][] annotationName)", "diff": ["-\t\t\tString.valueOf(CharOperation.concatWith(annotationName, '.')),", "-\t\t\tString.valueOf(requiredType.readableName())", "+\t\t\tannotatedTypeName(requiredType, annotationName)", "-\t\t\tString.valueOf(annotationName[annotationName.length-1]),", "-\t\t\tString.valueOf(requiredType.shortReadableName())", "+\t\t\tshortAnnotatedTypeName(requiredType, annotationName)"]}], "num": 72852}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2486f5ebed2fb380bb38a6987191415c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de92b64f1b08a4351355b9a4447246ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "dc897dd3e4818ca2b15bd3d143de606b0ce0335f", "commitAfterChange": "8536e94c328f058d5f377b8328af7061c65f8af1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tITypeBinding resolveType(Type type)", "signatureAfterChange": " \tITypeBinding resolveType(Type type)", "diff": ["-\t\tint index = 0;", "-\t\tif (node == null) {", "-\t\t\tType arrayType = null;", "-\t\t\tASTNode parentType = type.getParent();", "-\t\t\tif (parentType instanceof ArrayCreation) {", "-\t\t\t\tnode = (AstNode) this.newAstToOldAst.get(parentType);", "-\t\t\t} else {", "-\t\t\t\t// we try to retrieve the type as an element type of an array type", "-\t\t\t\twhile ((parentType instanceof Type) && ((Type) parentType).isArrayType()) {", "-\t\t\t\t\tarrayType = (Type) parentType;", "-\t\t\t\t\tparentType = parentType.getParent();", "-\t\t\t\t\tindex++;", "-\t\t\t\t}", "-\t\t\t\tif (index != 0) {", "-\t\t\t\t\tnode = (AstNode) this.newAstToOldAst.get(arrayType);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding binding = null;", "-\t\t\t\tif (typeReference.binding == null || !typeReference.binding.isValidBinding()) {", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t\tITypeBinding typeBinding = this.getTypeBinding(typeReference.binding);", "-\t\t\t\tif (typeBinding == null) {", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t\tif (index != 0) {", "-\t\t\t\t\tif (typeBinding.isArray()) {", "-\t\t\t\t\t\tArrayBinding arrayBinding = (ArrayBinding)typeReference.binding;", "-\t\t\t\t\t\tif (index == arrayBinding.dimensions) {", "-\t\t\t\t\t\t\treturn this.getTypeBinding(arrayBinding.leafComponentType);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tfor (int i = 0; i < index; i++) {", "-\t\t\t\t\t\t\t\tarrayBinding = (ArrayBinding) arrayBinding.elementsType(this.scope);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn this.getTypeBinding(arrayBinding);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tif (type.isArrayType()) {", "-\t\t\t\t\t\tArrayType array = (ArrayType) type;", "-\t\t\t\t\t\tif (typeBinding.getDimensions() != array.getDimensions()) {", "-\t\t\t\t\t\t\tArrayBinding arrayBinding = (ArrayBinding)typeReference.binding;", "-\t\t\t\t\t\t\tfor (int i = 0, max = typeBinding.getDimensions() - array.getDimensions(); i < max; i++) {", "-\t\t\t\t\t\t\t\tarrayBinding = (ArrayBinding) arrayBinding.elementsType(this.scope);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn this.getTypeBinding(arrayBinding);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else if (typeBinding.isArray() && type.isSimpleType()) {", "-\t\t\t\t\t\treturn this.getTypeBinding(((ArrayBinding)typeReference.binding).leafComponentType());", "-\t\t\t\t\t}", "-\t\t\t\t\treturn typeBinding;", "-\t\t\t\t}", "-\t\t\t} else if (node instanceof SingleNameReference) {", "-\t\t\t\tSingleNameReference singleNameReference = (SingleNameReference) node;", "-\t\t\t\tif (singleNameReference.binding == null || !singleNameReference.binding.isValidBinding()) {", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t\tif (singleNameReference.isTypeReference()) {", "-\t\t\t\t\tITypeBinding typeBinding = this.getTypeBinding((ReferenceBinding)singleNameReference.binding);", "-\t\t\t\t\tif (typeBinding == null) {", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (index != 0) {", "-\t\t\t\t\t\tif (typeBinding.isArray()) {", "-\t\t\t\t\t\t\tArrayBinding arrayBinding = (ArrayBinding)singleNameReference.binding;", "-\t\t\t\t\t\t\tif (index == arrayBinding.dimensions) {", "-\t\t\t\t\t\t\t\treturn this.getTypeBinding(arrayBinding.leafComponentType);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < index; i++) {", "-\t\t\t\t\t\t\t\t\tarrayBinding = (ArrayBinding) arrayBinding.elementsType(this.scope);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\treturn this.getTypeBinding(arrayBinding);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn typeBinding;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// it should be a type reference", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t} else if (node instanceof QualifiedNameReference) {", "-\t\t\t\tQualifiedNameReference qualifiedNameReference = (QualifiedNameReference) node;", "-\t\t\t\tif (qualifiedNameReference.isTypeReference()) {", "-\t\t\t\t\tif (qualifiedNameReference.binding == null || !qualifiedNameReference.binding.isValidBinding()) {", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t}", "-\t\t\t\t\tITypeBinding typeBinding = this.getTypeBinding((ReferenceBinding)qualifiedNameReference.binding);", "-\t\t\t\t\tif (typeBinding == null) {", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t} ", "-\t\t\t\t\tif (index != 0) {", "-\t\t\t\t\t\tif (typeBinding.isArray()) {", "-\t\t\t\t\t\t\tArrayBinding arrayBinding = (ArrayBinding)qualifiedNameReference.binding;", "-\t\t\t\t\t\t\tif (index == arrayBinding.dimensions) {", "-\t\t\t\t\t\t\t\treturn this.getTypeBinding(arrayBinding.leafComponentType);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < index; i++) {", "-\t\t\t\t\t\t\t\t\tarrayBinding = (ArrayBinding) arrayBinding.elementsType(this.scope);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn this.getTypeBinding(arrayBinding);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn typeBinding;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// it should be a type reference", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "+\t\t\t\tbinding = typeReference.binding;", "+\t\t\t} else if (node instanceof SingleNameReference && ((SingleNameReference)node).isTypeReference()) {", "+\t\t\t\tbinding = (org.eclipse.jdt.internal.compiler.lookup.TypeBinding) (((SingleNameReference)node).binding);", "+\t\t\t} else if (node instanceof QualifiedNameReference && ((QualifiedNameReference)node).isTypeReference()) {", "+\t\t\t\tbinding = (org.eclipse.jdt.internal.compiler.lookup.TypeBinding) (((QualifiedNameReference)node).binding);", "-\t\t\t\tArrayAllocationExpression arrayAllocationExpression = (ArrayAllocationExpression) node;", "-\t\t\t\tArrayBinding arrayBinding = arrayAllocationExpression.arrayTb;", "-\t\t\t\tif (arrayBinding == null || !arrayBinding.isValidBinding()) {", "-\t\t\t\t\treturn null;", "+\t\t\t\tbinding = ((ArrayAllocationExpression) node).arrayTb;", "+\t\t\t}", "+\t\t\tif (binding == null || !binding.isValidBinding()) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tif (type.isArrayType()) {", "+\t\t\t\tArrayType arrayType = (ArrayType) type;", "+\t\t\t\tif (binding.isArrayType()) {", "+\t\t\t\t\tArrayBinding arrayBinding = (ArrayBinding) binding;", "+\t\t\t\t\treturn getTypeBinding(this.scope.createArray(arrayBinding.leafComponentType, arrayType.getDimensions()));", "+\t\t\t\t} else {", "+\t\t\t\t\treturn getTypeBinding(this.scope.createArray(binding, arrayType.getDimensions()));", "-\t\t\t\tif (index != 0) {", "-\t\t\t\t\treturn this.getTypeBinding(this.scope.createArray(arrayBinding.leafComponentType, arrayBinding.dimensions - index));", "-\t\t\t\t} ", "-\t\t\t\treturn this.getTypeBinding(arrayBinding);", "+\t\t\t} else {", "+\t\t\t\tif (binding.isArrayType()) {", "+\t\t\t\t\tArrayBinding arrayBinding = (ArrayBinding) binding;", "+\t\t\t\t\treturn getTypeBinding(arrayBinding.leafComponentType);", "+\t\t\t\t} else {", "+\t\t\t\t\treturn getTypeBinding(binding);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6b506077f52b00ee035f9a6ea68681b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "  public MethodBinding[] getMethods(char[] selector)", "signatureAfterChange": " public MethodBinding[] getMethods(char[] selector)", "diff": ["-", "-\t// handle forward references to potential default abstract methods", "-\taddDefaultAbstractMethods();", "+\tint selectorLength = selector.length;", "+\tboolean methodsAreResolved = (modifiers & AccUnresolved) == 0; // have resolved all arg types & return type of the methods", "+\tjava.util.ArrayList matchingMethods = null;", "+\tfor (int i = 0, length = methods.length; i < length; i++) {", "+\t\tMethodBinding method = methods[i];", "+\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "+\t\t\tif (!methodsAreResolved && resolveTypesFor(method) == null || method.returnType == null) {", "+\t\t\t\tmethods();", "+\t\t\t\treturn getMethods(selector); // try again since the problem methods have been removed", "+\t\t\t}", "+\t\t\tif (matchingMethods == null)", "+\t\t\t\tmatchingMethods = new java.util.ArrayList(2);", "+\t\t\tmatchingMethods.add(method);", "+\t\t}", "+\t}", "+\tif (matchingMethods == null) return NoMethods;", "-\ttry{", "-\t\tint count = 0;", "-\t\tint lastIndex = -1;", "-\t\tint selectorLength = selector.length;", "-\t\tif ((modifiers & AccUnresolved) == 0) { // have resolved all arg types & return type of the methods", "-\t\t\tfor (int m = 0, length = methods.length; m < length; m++) {", "-\t\t\t\tMethodBinding method = methods[m];", "-\t\t\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "-\t\t\t\t\tcount++;", "-\t\t\t\t\tlastIndex = m;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else {", "-\t\t\tboolean foundProblem = false;", "-\t\t\tint failed = 0;", "-\t\t\tfor (int m = 0, length = methods.length; m < length; m++) {", "-\t\t\t\tMethodBinding method = methods[m];", "-\t\t\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "-\t\t\t\t\tif (resolveTypesFor(method) == null) {", "-\t\t\t\t\t\tfoundProblem = true;", "-\t\t\t\t\t\tmethods[m] = null; // unable to resolve parameters", "-\t\t\t\t\t\tfailed++;", "-\t\t\t\t\t} else if (method.returnType == null) {", "-\t\t\t\t\t\tfoundProblem = true;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\tlastIndex = m;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t", "-\t\t\tif (foundProblem || count > 1) {", "-\t\t\t\tfor (int m = methods.length; --m >= 0;) {", "-\t\t\t\t\tMethodBinding method = methods[m];", "-\t\t\t\t\tif (method != null && method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "-\t\t\t\t\t\tAbstractMethodDeclaration methodDecl = null;", "-\t\t\t\t\t\tfor (int i = 0; i < m; i++) {", "-\t\t\t\t\t\t\tMethodBinding method2 = methods[i];", "-\t\t\t\t\t\t\tif (method2 != null && CharOperation.equals(method.selector, method2.selector)) {", "-\t\t\t\t\t\t\t\tif (method.areParametersEqual(method2)) {", "-\t\t\t\t\t\t\t\t\tif (methodDecl == null) {", "-\t\t\t\t\t\t\t\t\t\tmethodDecl = method.sourceMethod(); // cannot be retrieved after binding is lost", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateMethodInType(this, methodDecl);", "-\t\t\t\t\t\t\t\t\t\tmethodDecl.binding = null;", "-\t\t\t\t\t\t\t\t\t\tmethods[m] = null;", "-\t\t\t\t\t\t\t\t\t\tfailed++;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateMethodInType(this, method2.sourceMethod());", "-\t\t\t\t\t\t\t\t\tmethod2.sourceMethod().binding = null;", "-\t\t\t\t\t\t\t\t\tmethods[i] = null;", "-\t\t\t\t\t\t\t\t\tfailed++;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (method.returnType == null && methodDecl == null) { // forget method with invalid return type... was kept to detect possible collisions", "-\t\t\t\t\t\t\tmethod.sourceMethod().binding = null;", "-\t\t\t\t\t\t\tmethods[m] = null;", "-\t\t\t\t\t\t\tfailed++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t", "-\t\t\t\tif (failed > 0) {", "-\t\t\t\t\tint newSize = methods.length - failed;", "-\t\t\t\t\tif (newSize == 0)", "-\t\t\t\t\t\treturn methods = NoMethods;", "-\t", "-\t\t\t\t\tMethodBinding[] newMethods = new MethodBinding[newSize];", "-\t\t\t\t\tfor (int i = 0, n = 0, max = methods.length; i < max; i++)", "-\t\t\t\t\t\tif (methods[i] != null)", "-\t\t\t\t\t\t\tnewMethods[n++] = methods[i];", "-\t\t\t\t\tmethods = newMethods;", "-\t\t\t\t\treturn getMethods(selector); // try again now that the problem methods have been removed", "+\tMethodBinding[] result = new MethodBinding[matchingMethods.size()];", "+\tmatchingMethods.toArray(result);", "+\tif (!methodsAreResolved) {", "+\t\tfor (int i = 0, length = result.length - 1; i < length; i++) {", "+\t\t\tMethodBinding method = result[i];", "+\t\t\tfor (int j = length; j > i; j--) {", "+\t\t\t\tif (method.areParameterErasuresEqual(result[j])) {", "+\t\t\t\t\tmethods();", "+\t\t\t\t\treturn getMethods(selector); // try again since the duplicate methods have been removed", "-\t\tif (count == 1)", "-\t\t\treturn new MethodBinding[] {methods[lastIndex]};", "-\t\tif (count > 1) {", "-\t\t\tMethodBinding[] result = new MethodBinding[count];", "-\t\t\tcount = 0;", "-\t\t\tfor (int m = 0; m <= lastIndex; m++) {", "-\t\t\t\tMethodBinding method = methods[m];", "-\t\t\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector))", "-\t\t\t\t\tresult[count++] = method;", "-\t\t\t}", "-\t\t\treturn result;", "-\t\t}", "-\t} catch(AbortCompilation e){", "-\t\t// ensure null methods are removed", "-\t\tMethodBinding[] newMethods = null;", "-\t\tint count = 0;", "-\t\tfor (int i = 0, max = methods.length; i < max; i++){", "-\t\t\tMethodBinding method = methods[i];", "-\t\t\tif (method == null && newMethods == null){", "-\t\t\t\tSystem.arraycopy(methods, 0, newMethods = new MethodBinding[max], 0, i);", "-\t\t\t} else if (newMethods != null && method != null) {", "-\t\t\t\tnewMethods[count++] = method;", "-\t\t\t}", "-\t\t}", "-\t\tif (newMethods != null){", "-\t\t\tSystem.arraycopy(newMethods, 0, methods = new MethodBinding[count], 0, count);", "-\t\t}\t\t\t", "-\t\tmodifiers ^= AccUnresolved;", "-\t\tthrow e;", "-\t}\t\t", "-\treturn NoMethods;", "+\t}", "+\treturn result;"]}], "num": 34053}
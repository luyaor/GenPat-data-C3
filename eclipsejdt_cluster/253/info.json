{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "225f07da1f29167284a0c367d1a3c9e6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13791dcf91fd4837d3e4111fbfa5e1c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "2a3cfde3c43eda7373112848bd26e889dafe74d6", "commitAfterChange": "c775c1d0f23881553fb0e260a70314c10cea2026", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "  protected void disableWarnings()", "signatureAfterChange": "  protected void disableWarnings()", "diff": ["-\tthis.options.put(CompilerOptions.OPTION_ReportDeprecationInNonDeprecatedCode, CompilerOptions.DISABLED);", "-\tthis.options.put(CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode, CompilerOptions.DISABLED);", "-\tthis.options.put(CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod, CompilerOptions.DISABLED);", "-\tthis.options.put(CompilerOptions.OPTION_ReportSpecialParameterHidingField, CompilerOptions.DISABLED);", "-\tthis.options.put(CompilerOptions.OPTION_SuppressWarnings, CompilerOptions.DISABLED);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "183aee6202b1c13fd942196ea45a4245", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InternalHexFloatTest.java", "commitBeforeChange": "d1fadbf3a3cc65cdec59a81bd717eea0685adc65", "commitAfterChange": "959aae3fee7a061c3e53022fde606d266442480e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void test006()", "signatureAfterChange": " \tpublic void test006()", "diff": ["-\t\tif (COMPLIANCE_1_5.equals(this.complianceLevel)) {", "-\t\t\tMap customOptions = super.getCompilerOptions();", "-\t\t\tcustomOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "-\t\t\tcustomOptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_5);", "-\t\t\tcustomOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "-\t\t\tcustomOptions.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.OPTIMIZE_OUT);", "-\t\t\tthis.runNegativeTest(", "-\t\t\t\tnew String[] {", "-\t\t\t\t\t\"X.java\",", "-\t\t\t\t\t\"public class X {\t\\n\" +", "-\t\t\t\t\t\"    public static void main(String[] args) {\\n\" + ", "-\t\t\t\t\t\"        System.out.println(0X000.eP-5000F);\\n\" + ", "-\t\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\t\"}\"", "-\t\t\t\t},", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\t\"\tSystem.out.println(0X000.eP-5000F);\\r\\n\" + ", "-\t\t\t\t\"\t                   ^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"The literal 0X000.eP-5000F of type float is out of range \\n\" + ", "-\t\t\t\t\"----------\\n\");", "-\t\t}", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\t\\n\" +", "+\t\t\t\t\"    public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"        System.out.println(0X000.eP-5000F);\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"}\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "+\t\t\t\"\tSystem.out.println(0X000.eP-5000F);\\r\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The literal 0X000.eP-5000F of type float is out of range \\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd013d4f3016e702234078b61292aa7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InternalHexFloatTest.java", "commitBeforeChange": "d1fadbf3a3cc65cdec59a81bd717eea0685adc65", "commitAfterChange": "959aae3fee7a061c3e53022fde606d266442480e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void test007()", "signatureAfterChange": " \tpublic void test007()", "diff": ["-\t\tif (COMPLIANCE_1_5.equals(this.complianceLevel)) {", "-\t\t\tMap customOptions = super.getCompilerOptions();", "-\t\t\tcustomOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "-\t\t\tcustomOptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_5);", "-\t\t\tcustomOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "-\t\t\tcustomOptions.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.OPTIMIZE_OUT);", "-\t\t\tthis.runNegativeTest(", "-\t\t\t\tnew String[] {", "-\t\t\t\t\t\"X.java\",", "-\t\t\t\t\t\"public class X {\t\\n\" +", "-\t\t\t\t\t\"    public static void main(String[] args) {\\n\" + ", "-\t\t\t\t\t\"        System.out.println(0X000.eP5000F);\\n\" + ", "-\t\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\t\"}\"", "-\t\t\t\t},", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "-\t\t\t\t\"\tSystem.out.println(0X000.eP5000F);\\r\\n\" + ", "-\t\t\t\t\"\t                   ^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"The literal 0X000.eP5000F of type float is out of range \\n\" + ", "-\t\t\t\t\"----------\\n\");", "-\t\t}", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\t\\n\" +", "+\t\t\t\t\"    public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"        System.out.println(0X000.eP5000F);\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"}\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "+\t\t\t\"\tSystem.out.println(0X000.eP5000F);\\r\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The literal 0X000.eP5000F of type float is out of range \\n\" + ", "+\t\t\t\"----------\\n\");"]}], "num": 253}
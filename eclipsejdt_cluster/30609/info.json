{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "14fb15710145cd3caceffa84a1b6bf8e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7663e3324ea7799af1ed0ee9c613311", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "4a64f2fcadd24cb17347438e74b1d8c3d7a392ab", "commitAfterChange": "9c860c5f11e6f2202ddf677d9857a86101049060", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["-\t\t\tthis.alignment_for_arguments_in_allocation_expression = Integer.parseInt((String) alignmentForArgumentsInAllocationExpressionOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_arguments_in_allocation_expression = Integer.parseInt((String) alignmentForArgumentsInAllocationExpressionOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_arguments_in_allocation_expression = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch (ClassCastException e) {", "+\t\t\t\tthis.alignment_for_arguments_in_allocation_expression = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_arguments_in_explicit_constructor_call = Integer.parseInt((String) alignmentForArgumentsInExplicitConstructorCallOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_arguments_in_explicit_constructor_call = Integer.parseInt((String) alignmentForArgumentsInExplicitConstructorCallOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_arguments_in_explicit_constructor_call = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch (ClassCastException e) {", "+\t\t\t\tthis.alignment_for_arguments_in_explicit_constructor_call = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_arguments_in_method_invocation = Integer.parseInt((String) alignmentForArgumentsInMethodInvocationOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_arguments_in_method_invocation = Integer.parseInt((String) alignmentForArgumentsInMethodInvocationOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_arguments_in_method_invocation = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch (ClassCastException e) {", "+\t\t\t\tthis.alignment_for_arguments_in_method_invocation = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_arguments_in_qualified_allocation_expression = Integer.parseInt((String) alignmentForArgumentsInQualifiedAllocationExpressionOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_arguments_in_qualified_allocation_expression = Integer.parseInt((String) alignmentForArgumentsInQualifiedAllocationExpressionOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_arguments_in_qualified_allocation_expression = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch (ClassCastException e) {", "+\t\t\t\tthis.alignment_for_arguments_in_qualified_allocation_expression = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_binary_expression = Integer.parseInt((String) alignmentForBinaryExpressionOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_binary_expression = Integer.parseInt((String) alignmentForBinaryExpressionOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_binary_expression =  Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch (ClassCastException e) {", "+\t\t\t\tthis.alignment_for_binary_expression =  Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_compact_if = Integer.parseInt((String) alignmentForCompactIfOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_compact_if = Integer.parseInt((String) alignmentForCompactIfOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_compact_if = Alignment.M_ONE_PER_LINE_SPLIT | Alignment.M_INDENT_BY_ONE;", "+\t\t\t} catch (ClassCastException e) {", "+\t\t\t\tthis.alignment_for_compact_if = Alignment.M_ONE_PER_LINE_SPLIT | Alignment.M_INDENT_BY_ONE;", "+\t\t\t}", "-\t\t\tthis.alignment_for_conditional_expression = Integer.parseInt((String) alignmentForConditionalExpressionOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_conditional_expression = Integer.parseInt((String) alignmentForConditionalExpressionOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_conditional_expression = Alignment.M_ONE_PER_LINE_SPLIT;", "+\t\t\t} catch (ClassCastException e) {", "+\t\t\t\tthis.alignment_for_conditional_expression = Alignment.M_ONE_PER_LINE_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_expressions_in_array_initializer = Integer.parseInt((String) alignmentForExpressionsInArrayInitializerOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_expressions_in_array_initializer = Integer.parseInt((String) alignmentForExpressionsInArrayInitializerOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_expressions_in_array_initializer = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch (ClassCastException e) {", "+\t\t\t\tthis.alignment_for_expressions_in_array_initializer = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_multiple_fields = Integer.parseInt((String) alignmentForMultipleFieldsOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_multiple_fields = Integer.parseInt((String) alignmentForMultipleFieldsOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_multiple_fields = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch (ClassCastException e) {", "+\t\t\t\tthis.alignment_for_multiple_fields = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_parameters_in_constructor_declaration = Integer.parseInt((String) alignmentForParametersInConstructorDeclarationOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_parameters_in_constructor_declaration = Integer.parseInt((String) alignmentForParametersInConstructorDeclarationOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_parameters_in_constructor_declaration = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch (ClassCastException e) {", "+\t\t\t\tthis.alignment_for_parameters_in_constructor_declaration = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_parameters_in_method_declaration = Integer.parseInt((String) alignmentForParametersInMethodDeclarationOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_parameters_in_method_declaration = Integer.parseInt((String) alignmentForParametersInMethodDeclarationOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_parameters_in_method_declaration = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.alignment_for_parameters_in_method_declaration = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_selector_in_method_invocation = Integer.parseInt((String) alignmentForSelectorInMethodInvocationOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_selector_in_method_invocation = Integer.parseInt((String) alignmentForSelectorInMethodInvocationOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_selector_in_method_invocation = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.alignment_for_selector_in_method_invocation = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_superclass_in_type_declaration = Integer.parseInt((String) alignmentForSuperclassInTypeDeclarationOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_superclass_in_type_declaration = Integer.parseInt((String) alignmentForSuperclassInTypeDeclarationOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_superclass_in_type_declaration = Alignment.M_NEXT_SHIFTED_SPLIT;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.alignment_for_superclass_in_type_declaration = Alignment.M_NEXT_SHIFTED_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_superinterfaces_in_type_declaration = Integer.parseInt((String) alignmentForSuperinterfacesInTypeDeclarationOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_superinterfaces_in_type_declaration = Integer.parseInt((String) alignmentForSuperinterfacesInTypeDeclarationOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_superinterfaces_in_type_declaration = Alignment.M_NEXT_SHIFTED_SPLIT;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.alignment_for_superinterfaces_in_type_declaration = Alignment.M_NEXT_SHIFTED_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_throws_clause_in_constructor_declaration = Integer.parseInt((String) alignmentForThrowsClauseInConstructorDeclarationOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_throws_clause_in_constructor_declaration = Integer.parseInt((String) alignmentForThrowsClauseInConstructorDeclarationOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_throws_clause_in_constructor_declaration = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.alignment_for_throws_clause_in_constructor_declaration = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.alignment_for_throws_clause_in_method_declaration = Integer.parseInt((String) alignmentForThrowsClauseInMethodDeclarationOption);", "+\t\t\ttry {", "+\t\t\t\tthis.alignment_for_throws_clause_in_method_declaration = Integer.parseInt((String) alignmentForThrowsClauseInMethodDeclarationOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.alignment_for_throws_clause_in_method_declaration = Alignment.M_COMPACT_SPLIT;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.alignment_for_throws_clause_in_method_declaration = Alignment.M_COMPACT_SPLIT;", "+\t\t\t}", "-\t\t\tthis.brace_position_for_anonymous_type_declaration = (String) bracePositionForAnonymousTypeDeclarationOption;", "+\t\t\ttry {", "+\t\t\t\tthis.brace_position_for_anonymous_type_declaration = (String) bracePositionForAnonymousTypeDeclarationOption;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.brace_position_for_anonymous_type_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t}", "-\t\t\tthis.brace_position_for_array_initializer = (String) bracePositionForArrayInitializerOption;", "+\t\t\ttry {", "+\t\t\t\tthis.brace_position_for_array_initializer = (String) bracePositionForArrayInitializerOption;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.brace_position_for_array_initializer = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t}", "-\t\t\tthis.brace_position_for_block = (String) bracePositionForBlockOption;", "+\t\t\ttry {", "+\t\t\t\tthis.brace_position_for_block = (String) bracePositionForBlockOption;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.brace_position_for_block = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t}", "-\t\t\tthis.brace_position_for_constructor_declaration = (String) bracePositionForConstructorDeclarationOption;", "+\t\t\ttry {", "+\t\t\t\tthis.brace_position_for_constructor_declaration = (String) bracePositionForConstructorDeclarationOption;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.brace_position_for_constructor_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t}", "-\t\t\tthis.brace_position_for_method_declaration = (String) bracePositionForMethodDeclarationOption;", "-\t\t}", "-\t\tfinal Object bracePositionForTypeDeclarationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_TYPE_DECLARATION);", "-\t\tif (bracePositionForTypeDeclarationOption != null) {", "-\t\t\tthis.brace_position_for_type_declaration = (String) bracePositionForTypeDeclarationOption;", "+\t\t\ttry {", "+\t\t\t\tthis.brace_position_for_method_declaration = (String) bracePositionForMethodDeclarationOption;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.brace_position_for_method_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t}", "-\t\t\tthis.brace_position_for_switch = (String) bracePositionForSwitchOption;", "+\t\t\ttry {", "+\t\t\t\tthis.brace_position_for_switch = (String) bracePositionForSwitchOption;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.brace_position_for_switch = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t}", "+\t\t}", "+\t\tfinal Object bracePositionForTypeDeclarationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_TYPE_DECLARATION);", "+\t\tif (bracePositionForTypeDeclarationOption != null) {", "+\t\t\ttry {", "+\t\t\t\tthis.brace_position_for_type_declaration = (String) bracePositionForTypeDeclarationOption;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.brace_position_for_type_declaration = DefaultCodeFormatterConstants.END_OF_LINE;", "+\t\t\t}", "-\t\t\tthis.continuation_indentation = Integer.parseInt((String) continuationIndentationOption);", "+\t\t\ttry {", "+\t\t\t\tthis.continuation_indentation = Integer.parseInt((String) continuationIndentationOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.continuation_indentation = 2;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.continuation_indentation = 2;", "+\t\t\t}", "-\t\t\tthis.continuation_indentation_for_array_initializer = Integer.parseInt((String) continuationIndentationForArrayInitializerOption);", "+\t\t\ttry {", "+\t\t\t\tthis.continuation_indentation_for_array_initializer = Integer.parseInt((String) continuationIndentationForArrayInitializerOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.continuation_indentation_for_array_initializer = 2;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.continuation_indentation_for_array_initializer = 2;", "+\t\t\t}", "-\t\t\tthis.blank_lines_after_imports = Integer.parseInt((String) blankLinesAfterImportsOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_after_imports = Integer.parseInt((String) blankLinesAfterImportsOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_after_imports = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_after_imports = 0;", "+\t\t\t}", "-\t\t\tthis.blank_lines_after_package = Integer.parseInt((String) blankLinesAfterPackageOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_after_package = Integer.parseInt((String) blankLinesAfterPackageOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_after_package = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_after_package = 0;", "+\t\t\t}", "-\t\t\tthis.blank_lines_before_field = Integer.parseInt((String) blankLinesBeforeFieldOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_before_field = Integer.parseInt((String) blankLinesBeforeFieldOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_before_field = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_before_field = 0;", "+\t\t\t}", "-\t\t\tthis.blank_lines_before_first_class_body_declaration = Integer.parseInt((String) blankLinesBeforeFirstClassBodyDeclarationOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_before_first_class_body_declaration = Integer.parseInt((String) blankLinesBeforeFirstClassBodyDeclarationOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_before_first_class_body_declaration = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_before_first_class_body_declaration = 0;", "+\t\t\t}", "-\t\t\tthis.blank_lines_before_imports = Integer.parseInt((String) blankLinesBeforeImportsOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_before_imports = Integer.parseInt((String) blankLinesBeforeImportsOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_before_imports = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_before_imports = 0;", "+\t\t\t}", "-\t\t\tthis.blank_lines_before_member_type = Integer.parseInt((String) blankLinesBeforeMemberTypeOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_before_member_type = Integer.parseInt((String) blankLinesBeforeMemberTypeOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_before_member_type = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_before_member_type = 0;", "+\t\t\t}", "-\t\t\tthis.blank_lines_before_method = Integer.parseInt((String) blankLinesBeforeMethodOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_before_method = Integer.parseInt((String) blankLinesBeforeMethodOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_before_method = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_before_method = 0;", "+\t\t\t}", "-\t\t\tthis.blank_lines_before_new_chunk = Integer.parseInt((String) blankLinesBeforeNewChunkOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_before_new_chunk = Integer.parseInt((String) blankLinesBeforeNewChunkOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_before_new_chunk = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_before_new_chunk = 0;", "+\t\t\t}", "-\t\t\tthis.blank_lines_before_package = Integer.parseInt((String) blankLinesBeforePackageOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_before_package = Integer.parseInt((String) blankLinesBeforePackageOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_before_package = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_before_package = 0;", "+\t\t\t}", "-\t\t\tthis.blank_lines_between_type_declarations = Integer.parseInt((String) blankLinesBetweenTypeDeclarationsOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_between_type_declarations = Integer.parseInt((String) blankLinesBetweenTypeDeclarationsOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_between_type_declarations = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_between_type_declarations = 0;", "+\t\t\t}", "-\t\t\tthis.blank_lines_at_beginning_of_method_body = Integer.parseInt((String) blankLinesAtBeginningOfMethodBodyOption);", "+\t\t\ttry {", "+\t\t\t\tthis.blank_lines_at_beginning_of_method_body = Integer.parseInt((String) blankLinesAtBeginningOfMethodBodyOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.blank_lines_at_beginning_of_method_body = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.blank_lines_at_beginning_of_method_body = 0;", "+\t\t\t}", "-\t\t\tthis.number_of_empty_lines_to_preserve = Integer.parseInt((String) numberOfEmptyLinesToPreserveOption);", "+\t\t\ttry {", "+\t\t\t\tthis.number_of_empty_lines_to_preserve = Integer.parseInt((String) numberOfEmptyLinesToPreserveOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.number_of_empty_lines_to_preserve = 0;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.number_of_empty_lines_to_preserve = 0;", "+\t\t\t}", "-\t\t\tthis.tab_size = Integer.parseInt((String) tabSizeOption);", "+\t\t\ttry {", "+\t\t\t\tthis.tab_size = Integer.parseInt((String) tabSizeOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.tab_size = 4;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.tab_size = 4;", "+\t\t\t}", "-\t\t\tthis.filling_space = ((String) fillingSpaceOption).charAt(0);", "+\t\t\ttry {", "+\t\t\t\tthis.filling_space = ((String) fillingSpaceOption).charAt(0);", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.filling_space = ' ';", "+\t\t\t}", "-\t\t\tthis.page_width = Integer.parseInt((String) pageWidthOption);", "+\t\t\ttry {", "+\t\t\t\tthis.page_width = Integer.parseInt((String) pageWidthOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.page_width = 80;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.page_width = 80;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d31cc28d0ff6346544c51b2c460d6404", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public CompilerOptions(ConfigurableOption[] settings)", "signatureAfterChange": "\r public CompilerOptions(Map settings)", "diff": ["-public CompilerOptions(ConfigurableOption[] settings){\r", "+public CompilerOptions(Map settings){\r", "-\tString componentName = Compiler.class.getName();\r", "-\tfor (int i = 0, max = settings.length; i < max; i++){\r", "-\t\tif (settings[i].getComponentName().equals(componentName)){\r", "-\t\t\tthis.setOption(settings[i]);\r", "+\tObject[] entries = settings.entrySet().toArray();\r", "+\tfor (int i = 0, max = entries.length; i < max; i++){\r", "+\t\tMap.Entry entry = (Map.Entry)entries[i];\r", "+\t\tif (!(entry.getKey() instanceof String)) continue;\r", "+\t\tif (!(entry.getValue() instanceof String)) continue;\r", "+\t\tString optionID = (String) entry.getKey();\r", "+\t\tString optionValue = (String) entry.getValue();\r", "+\t\t\r", "+\t\t// Local variable attribute\r", "+\t\tif(optionID.equals(OPTION_LocalVariableAttribute)){\r", "+\t\t\tif (optionValue.equals(GENERATE)) {\r", "+\t\t\t\tthis.produceDebugAttributes |= Vars;\r", "+\t\t\t} else if (optionValue.equals(DO_NOT_GENERATE)){\r", "+\t\t\t\tthis.produceDebugAttributes &= ~Vars;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}  \r", "+\t\t// Line number attribute\t\r", "+\t\tif(optionID.equals(OPTION_LineNumberAttribute)) {\r", "+\t\t\tif (optionValue.equals(GENERATE)) {\r", "+\t\t\t\tthis.produceDebugAttributes |= Lines;\r", "+\t\t\t} else if (optionValue.equals(DO_NOT_GENERATE)) {\r", "+\t\t\t\tthis.produceDebugAttributes &= ~Lines;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Source file attribute\t\r", "+\t\tif(optionID.equals(OPTION_SourceFileAttribute)) {\r", "+\t\t\tif (optionValue.equals(GENERATE)) {\r", "+\t\t\t\tthis.produceDebugAttributes |= Source;\r", "+\t\t\t} else if (optionValue.equals(DO_NOT_GENERATE)) {\r", "+\t\t\t\tthis.produceDebugAttributes &= ~Source;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Preserve unused local\t\r", "+\t\tif(optionID.equals(OPTION_PreserveUnusedLocal)){\r", "+\t\t\tif (optionValue.equals(PRESERVE)) {\r", "+\t\t\t\tthis.preserveAllLocalVariables = true;\r", "+\t\t\t} else if (optionValue.equals(OPTIMIZE_OUT)) {\r", "+\t\t\t\tthis.preserveAllLocalVariables = false;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report unreachable code\t\t\t\t\r", "+\t\tif(optionID.equals(OPTION_ReportUnreachableCode)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= UnreachableCode;\r", "+\t\t\t\tthis.warningThreshold &= ~UnreachableCode;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UnreachableCode;\r", "+\t\t\t\tthis.warningThreshold |= UnreachableCode;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UnreachableCode;\r", "+\t\t\t\tthis.warningThreshold &= ~UnreachableCode;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report invalid import\t\r", "+\t\tif(optionID.equals(OPTION_ReportInvalidImport)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= ImportProblem;\r", "+\t\t\t\tthis.warningThreshold &= ~ImportProblem;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~ImportProblem;\r", "+\t\t\t\tthis.warningThreshold |= ImportProblem;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~ImportProblem;\r", "+\t\t\t\tthis.warningThreshold &= ~ImportProblem;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Define the target JDK tag for .classfiles\r", "+\t\tif(optionID.equals(OPTION_TargetPlatform)){\r", "+\t\t\tif (optionValue.equals(VERSION_1_1)) {\r", "+\t\t\t\tthis.targetJDK = JDK1_1;\r", "+\t\t\t} else if (optionValue.equals(VERSION_1_2)) {\r", "+\t\t\t\tthis.targetJDK = JDK1_2;\r", "+\t\t\t} else if (optionValue.equals(VERSION_1_3)) {\r", "+\t\t\t\tthis.targetJDK = JDK1_3;\r", "+\t\t\t} else if (optionValue.equals(VERSION_1_4)) {\r", "+\t\t\t\tthis.targetJDK = JDK1_4;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report method with constructor name\r", "+\t\tif(optionID.equals(OPTION_ReportMethodWithConstructorName)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= MethodWithConstructorName;\r", "+\t\t\t\tthis.warningThreshold &= ~MethodWithConstructorName;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~MethodWithConstructorName;\r", "+\t\t\t\tthis.warningThreshold |= MethodWithConstructorName;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~MethodWithConstructorName;\r", "+\t\t\t\tthis.warningThreshold &= ~MethodWithConstructorName;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report overriding package default method\r", "+\t\tif(optionID.equals(OPTION_ReportOverridingPackageDefaultMethod)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= OverriddenPackageDefaultMethod;\r", "+\t\t\t\tthis.warningThreshold &= ~OverriddenPackageDefaultMethod;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~OverriddenPackageDefaultMethod;\r", "+\t\t\t\tthis.warningThreshold |= OverriddenPackageDefaultMethod;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~OverriddenPackageDefaultMethod;\r", "+\t\t\t\tthis.warningThreshold &= ~OverriddenPackageDefaultMethod;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report deprecation\r", "+\t\tif(optionID.equals(OPTION_ReportDeprecation)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= UsingDeprecatedAPI;\r", "+\t\t\t\tthis.warningThreshold &= ~UsingDeprecatedAPI;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UsingDeprecatedAPI;\r", "+\t\t\t\tthis.warningThreshold |= UsingDeprecatedAPI;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UsingDeprecatedAPI;\r", "+\t\t\t\tthis.warningThreshold &= ~UsingDeprecatedAPI;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report hidden catch block\r", "+\t\tif(optionID.equals(OPTION_ReportHiddenCatchBlock)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= MaskedCatchBlock;\r", "+\t\t\t\tthis.warningThreshold &= ~MaskedCatchBlock;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~MaskedCatchBlock;\r", "+\t\t\t\tthis.warningThreshold |= MaskedCatchBlock;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~MaskedCatchBlock;\r", "+\t\t\t\tthis.warningThreshold &= ~MaskedCatchBlock;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report unused local variable\r", "+\t\tif(optionID.equals(OPTION_ReportUnusedLocal)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= UnusedLocalVariable;\r", "+\t\t\t\tthis.warningThreshold &= ~UnusedLocalVariable;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UnusedLocalVariable;\r", "+\t\t\t\tthis.warningThreshold |= UnusedLocalVariable;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UnusedLocalVariable;\r", "+\t\t\t\tthis.warningThreshold &= ~UnusedLocalVariable;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report unused parameter\r", "+\t\tif(optionID.equals(OPTION_ReportUnusedParameter)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= UnusedArgument;\r", "+\t\t\t\tthis.warningThreshold &= ~UnusedArgument;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UnusedArgument;\r", "+\t\t\t\tthis.warningThreshold |= UnusedArgument;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UnusedArgument;\r", "+\t\t\t\tthis.warningThreshold &= ~UnusedArgument;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report synthetic access emulation\r", "+\t\tif(optionID.equals(OPTION_ReportSyntheticAccessEmulation)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= AccessEmulation;\r", "+\t\t\t\tthis.warningThreshold &= ~AccessEmulation;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~AccessEmulation;\r", "+\t\t\t\tthis.warningThreshold |= AccessEmulation;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~AccessEmulation;\r", "+\t\t\t\tthis.warningThreshold &= ~AccessEmulation;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\t// Report non-externalized string literals\r", "+\t\tif(optionID.equals(OPTION_ReportNonExternalizedStringLiteral)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= NonExternalizedString;\r", "+\t\t\t\tthis.warningThreshold &= ~NonExternalizedString;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~NonExternalizedString;\r", "+\t\t\t\tthis.warningThreshold |= NonExternalizedString;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~NonExternalizedString;\r", "+\t\t\t\tthis.warningThreshold &= ~NonExternalizedString;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t}\r", "+\t\t// Report usage of 'assert' as an identifier\r", "+\t\tif(optionID.equals(OPTION_ReportAssertIdentifier)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= AssertUsedAsAnIdentifier;\r", "+\t\t\t\tthis.warningThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\t\t\t\tthis.warningThreshold |= AssertUsedAsAnIdentifier;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\t\t\t\tthis.warningThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\t// Set the source compatibility mode (assertions)\r", "+\t\tif(optionID.equals(OPTION_Source)){\r", "+\t\t\tif (optionValue.equals(VERSION_1_3)) {\r", "+\t\t\t\tthis.assertMode = false;\r", "+\t\t\t} else if (optionValue.equals(VERSION_1_4)) {\r", "+\t\t\t\tthis.assertMode = true;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r"]}], "num": 30609}
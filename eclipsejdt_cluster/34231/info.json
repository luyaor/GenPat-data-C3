{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69c81fcb05b4e7d262a775db9b91c390", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18c4a284116a8e289139681d4cbd00f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "ba623d582045575b43eee2b86be165ff58225746", "commitAfterChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic void test017()", "signatureAfterChange": "  \tpublic void test017()", "diff": ["+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"class X<T> {}\\n\" + ", "+\t\t\t\t\"class Y { void test(X<Number> a) {} }\\n\" + ", "+\t\t\t\t\"class Z extends Y { void test(X<? extends Number> a) {} }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass Z extends Y { void test(X<? extends Number> a) {} }\\n\" + ", "+\t\t\t\"\t                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method test(X<? extends Number>) of type Z has the same erasure as test(X<Number>) of type Y but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// name clash: test(X<? extends java.lang.Number>) in Z and test(X<java.lang.Number>) in Y have the same erasure, yet neither overrides the other", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24f132c6a14a4b0a7bf09d5fbdfe4219", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "9efbe5554ac761a85464c2e1f07f87b5f5dd57eb", "commitAfterChange": "5af59e31692f51bf5a400460066038f2e641aee5", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void test040()", "signatureAfterChange": " \tpublic void test040()", "diff": ["-// waiting on philippe to fix array compares", "-//\t\tthis.runNegativeTest(", "-//\t\t\tnew String[] {", "-//\t\t\t\t\"X.java\",", "-//\t\t\t\t\"interface X<T> { X<T>[] x(); }\\n\" +", "-//\t\t\t\t\"abstract class Y<S> implements X<S> { public abstract X[] x(); }\\n\" + // warning: x() in Y implements x() in X; return type requires unchecked conversion", "-//\t\t\t\t\"abstract class Z implements X { public abstract X[] x(); }\\n\"", "-//\t\t\t},", "-//\t\t\t\"----------\\n\" + ", "-//\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "-//\t\t\t\"\tabstract class Y<S> implements X<S> { public abstract X[] x(); }\\n\" + ", "-//\t\t\t\"\t                                                      ^\\n\" + ", "-//\t\t\t\"Type safety: The return type X[] of the method x() of type Y<S> needs unchecked conversion to conform to the return type X<T>[] of inherited method\\n\" + ", "-//\t\t\t\"----------\\n\"", "-//\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"interface X<T> { X<T>[] x(); }\\n\" +", "+\t\t\t\t\"abstract class Y<S> implements X<S> { public abstract X[] x(); }\\n\" + // warning: x() in Y implements x() in X; return type requires unchecked conversion", "+\t\t\t\t\"abstract class Z implements X { public abstract X[] x(); }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tabstract class Y<S> implements X<S> { public abstract X[] x(); }\\n\" + ", "+\t\t\t\"\t                                                      ^^^\\n\" + ", "+\t\t\t\"Type safety: The return type X[] of the method x() of type Y<S> needs unchecked conversion to conform to the return type X<T>[] of inherited method\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40a0c1dc855e8bb6fd0dc41b43f75d35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "59f906dde0386689cf221a0077edc4ded4fac940", "commitAfterChange": "53a88facba099a7ef05d98b75f25800af60438f8", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void test032()", "signatureAfterChange": " \tpublic void test032()", "diff": ["+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"import static p.A.*;\\n\" + ", "+\t\t\t\t\"import static p.B.foo;\\n\" + ", "+\t\t\t\t\"public class X { void test() {foo();} }\\n\",", "+\t\t\t\t\"p/A.java\",", "+\t\t\t\t\"package p;\" +", "+\t\t\t\t\"public class A {\\n\" + ", "+\t\t\t\t\"\tpublic static void foo() {}\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"p/B.java\",", "+\t\t\t\t\"package p;\" +", "+\t\t\t\t\"public class B {\\n\" + ", "+\t\t\t\t\"\tpublic static void foo() {}\\n\" + ", "+\t\t\t\t\"}\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "+\t\t\t\"\tpublic class X { void test() {foo();} }\\r\\n\" + ", "+\t\t\t\"\t                              ^^^\\n\" + ", "+\t\t\t\"The method foo() is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// reference to foo is ambiguous, both method foo() in p.B and method foo() in p.A match", "+\t\t);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "786977e03d14f8d7dd6ca0007e22b14a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java", "commitBeforeChange": "8b7ec30843b0a5c0319e8ef1aafe9011c0e2cb3b", "commitAfterChange": "6cb413b41d6af887ce0091239bd381e2990ee7e7", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void test032()", "signatureAfterChange": " \tpublic void test032()", "diff": ["+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"import static p.A.*;\\n\" + ", "+\t\t\t\t\"import static p.B.*;\\n\" + ", "+\t\t\t\t\"public class X { void test() {foo();} }\\n\",", "+\t\t\t\t\"p/A.java\",", "+\t\t\t\t\"package p;\" +", "+\t\t\t\t\"public class A {\\n\" + ", "+\t\t\t\t\"\tpublic static void foo() {}\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"p/B.java\",", "+\t\t\t\t\"package p;\" +", "+\t\t\t\t\"public class B {\\n\" + ", "+\t\t\t\t\"\tpublic static void foo() {}\\n\" + ", "+\t\t\t\t\"}\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" + ", "+\t\t\t\"\tpublic class X { void test() {foo();} }\\r\\n\" + ", "+\t\t\t\"\t                              ^^^\\n\" + ", "+\t\t\t\"The method foo() is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// reference to foo is ambiguous, both method foo() in p.B and method foo() in p.A match", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "899d8798814847dae18ea7a035b91552", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "3d790b2a3902e812434ad14129911a29b3d9bdb4", "commitAfterChange": "eef5cdc73ea4cf102d98e5e7858673a91a3f6a7f", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void test027()", "signatureAfterChange": " \tpublic void test027()", "diff": ["+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\ttransient private X(Object... o) {}\\n\" + ", "+\t\t\t\t\"\tvoid test() { X x = new X(1, 2); }\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\ttransient private X(Object... o) {}\\n\" + ", "+\t\t\t\"\t                  ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Illegal modifier for the method X.X()\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2dbf79ffee01f8af46f3cebb764d017", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "1b5183f43287bbae2a451263467db64937621362", "commitAfterChange": "300eb650daaef4d704fbc6f4fb0da2b03bff04e6", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " \tpublic void test082()", "signatureAfterChange": " \tpublic void test082()", "diff": ["-\t}", "+\t\t\t\t\"\t\t\tenum E {}\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tenum E {}\\n\" + ", "+\t\t\t\"\t     ^\\n\" + ", "+\t\t\t\"The member enum E cannot be local\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d63104f4c42fe172f00c51a472def916", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "5f30987ed4c6718fa22f7e5f22394952935ee8ac", "commitAfterChange": "4855dee32b913a0e5805b6cdbec146242fbf4388", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void test007()", "signatureAfterChange": "  \tpublic void test007()", "diff": ["+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"A.java\",", "+\t\t\t\t\"class A { int get(short i, short s) { return i; } }\\n\" +", "+\t\t\t\t\"class B extends A { short get(short i, short s) {return i; } }\\n\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in A.java (at line 2)\\r\\n\" + ", "+\t\t\t\"\tclass B extends A { short get(short i, short s) {return i; } }\\r\\n\" + ", "+\t\t\t\"\t                          ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The return type is incompatible with A.get(short, short)\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d78a610460c33c39a70da6c5f7a61134", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java", "commitBeforeChange": "3dca78ae937ad139f018c4ddaaa87c3fe26600ed", "commitAfterChange": "10a59ab8fb6256e59e155c071a356402964eb736", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void test001()", "signatureAfterChange": "  public void test001()", "diff": ["+\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"interface I {\\n\" +", "+\t\t\t\t\"\tint foo(int [] a);\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"interface J  {\\n\" +", "+\t\t\t\t\"\tint foo(int a);\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\t\"\t\tSystem.out.println(foo((a)->a.length));\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tstatic String foo(I i) {\\n\" +", "+\t\t\t\t\"\t\treturn(\\\"foo(I)\\\");\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tstatic String foo(J j) {\\n\" +", "+\t\t\t\t\"\t\treturn(\\\"foo(J)\\\");\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tSystem.out.println(foo((a)->a.length));\\n\" + ", "+\t\t\t\"\t                   ^^^\\n\" + ", "+\t\t\t\"The method foo(I) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t);"]}], "num": 34231}
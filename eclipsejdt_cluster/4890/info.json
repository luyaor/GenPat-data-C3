{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "079ac6fb07987559cb51e77f94bb9ff7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48b6c8741a24d25a03702dc3fbeec435", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "931e434bb3e4b9f62577b10f8123cfc028893969", "commitAfterChange": "c0b519c3b149b13ea0f307f0d3414359b2cf0639", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "  public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["+", "+public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {\t\t", "+\tint pc = codeStream.position;", "+\tif (this.constant != Constant.NotAConstant) {", "+\t\t\tcodeStream.generateConstant(this.constant, this.implicitConversion);", "-", "-\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {\t\t", "-\t\tint pc = codeStream.position;", "-\t\tif (constant != Constant.NotAConstant) {", "-\t\t\tif (valueRequired) {", "-\t\t\t\tcodeStream.generateConstant(constant, implicitConversion);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tFieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream);", "-\t\t\tif (lastFieldBinding != null) {", "-\t\t\t\tboolean isStatic = lastFieldBinding.isStatic();", "-\t\t\t\tConstant fieldConstant = lastFieldBinding.constant();", "-\t\t\t\tif (fieldConstant != Constant.NotAConstant) {", "+\t} else {", "+\t\tFieldBinding lastFieldBinding = generateReadSequence(currentScope, codeStream);", "+\t\tif (lastFieldBinding != null) {", "+\t\t\tboolean isStatic = lastFieldBinding.isStatic();", "+\t\t\tConstant fieldConstant = lastFieldBinding.constant();", "+\t\t\tif (fieldConstant != Constant.NotAConstant) {", "+\t\t\t\tif (!isStatic){", "+\t\t\t\t\tcodeStream.invokeObjectGetClass();", "+\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t}", "+\t\t\t\tif (valueRequired) { // inline the last field constant", "+\t\t\t\t\tcodeStream.generateConstant(fieldConstant, this.implicitConversion);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tboolean isFirst = lastFieldBinding == this.binding ", "+\t\t\t\t\t\t\t\t\t\t\t\t&& (this.indexOfFirstFieldBinding == 1 || lastFieldBinding.declaringClass == currentScope.enclosingReceiverType())", "+\t\t\t\t\t\t\t\t\t\t\t\t&& this.otherBindings == null; // could be dup: next.next.next", "+\t\t\t\tTypeBinding requiredGenericCast = getGenericCast(this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length);", "+\t\t\t\tif (valueRequired  ", "+\t\t\t\t\t\t|| (!isFirst && currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4)", "+\t\t\t\t\t\t|| ((this.implicitConversion & TypeIds.UNBOXING) != 0)", "+\t\t\t\t\t\t|| requiredGenericCast != null) {", "+\t\t\t\t\tint lastFieldPc = codeStream.position;", "+\t\t\t\t\tif (lastFieldBinding.declaringClass == null) { // array length", "+\t\t\t\t\t\tcodeStream.arraylength();", "+\t\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// could occur if !valueRequired but compliance >= 1.4", "+\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tSyntheticMethodBinding accessor =", "+\t\t\t\t\t\t\tthis.syntheticReadAccessors == null", "+\t\t\t\t\t\t\t\t? null", "+\t\t\t\t\t\t\t\t: this.syntheticReadAccessors[this.syntheticReadAccessors.length - 1];", "+\t\t\t\t\t\tif (accessor == null) {", "+\t\t\t\t\t\t\tif (isStatic) {", "+\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (requiredGenericCast != null) codeStream.checkcast(requiredGenericCast);", "+\t\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tboolean isUnboxing = (this.implicitConversion & TypeIds.UNBOXING) != 0;", "+\t\t\t\t\t\t\t// conversion only generated if unboxing", "+\t\t\t\t\t\t\tif (isUnboxing) codeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t\t\t\t\tswitch (isUnboxing ? postConversionType(currentScope).id : lastFieldBinding.type.id) {", "+\t\t\t\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\t\t\t\tcodeStream.pop2();", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\tint fieldPosition = (int) (this.sourcePositions[this.sourcePositions.length - 1] >>> 32);", "+\t\t\t\t\tcodeStream.recordPositionsFrom(lastFieldPc, fieldPosition);", "+\t\t\t\t} else {", "-\t\t\t\t\t\tcodeStream.invokeObjectGetClass();", "+\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "-\t\t\t\t\tif (valueRequired) { // inline the last field constant", "-\t\t\t\t\t\tcodeStream.generateConstant(fieldConstant, implicitConversion);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tboolean isFirst = lastFieldBinding == this.binding ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t&& (this.indexOfFirstFieldBinding == 1 || lastFieldBinding.declaringClass == currentScope.enclosingReceiverType())", "-\t\t\t\t\t\t\t\t\t\t\t\t\t&& this.otherBindings == null; // could be dup: next.next.next", "-\t\t\t\t\tTypeBinding requiredGenericCast = getGenericCast(this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length);", "-\t\t\t\t\tif (valueRequired  ", "-\t\t\t\t\t\t\t|| (!isFirst && currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4)", "-\t\t\t\t\t\t\t|| ((implicitConversion & TypeIds.UNBOXING) != 0)", "-\t\t\t\t\t\t\t|| requiredGenericCast != null) {", "-\t\t\t\t\t\tint lastFieldPc = codeStream.position;", "-\t\t\t\t\t\tif (lastFieldBinding.declaringClass == null) { // array length", "-\t\t\t\t\t\t\tcodeStream.arraylength();", "-\t\t\t\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t// could occur if !valueRequired but compliance >= 1.4", "-\t\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tSyntheticMethodBinding accessor =", "-\t\t\t\t\t\t\t\tsyntheticReadAccessors == null", "-\t\t\t\t\t\t\t\t\t? null", "-\t\t\t\t\t\t\t\t\t: syntheticReadAccessors[syntheticReadAccessors.length - 1];", "-\t\t\t\t\t\t\tif (accessor == null) {", "-\t\t\t\t\t\t\t\tif (isStatic) {", "-\t\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (requiredGenericCast != null) codeStream.checkcast(requiredGenericCast);", "-\t\t\t\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tboolean isUnboxing = (implicitConversion & TypeIds.UNBOXING) != 0;", "-\t\t\t\t\t\t\t\t// conversion only generated if unboxing", "-\t\t\t\t\t\t\t\tif (isUnboxing) codeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\t\t\t\tswitch (isUnboxing ? postConversionType(currentScope).id : lastFieldBinding.type.id) {", "-\t\t\t\t\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\t\t\t\tcase T_double :", "-\t\t\t\t\t\t\t\t\t\tcodeStream.pop2();", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tdefault :", "-\t\t\t\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tint fieldPosition = (int) (this.sourcePositions[this.sourcePositions.length - 1] >>> 32);", "-\t\t\t\t\t\tcodeStream.recordPositionsFrom(lastFieldPc, fieldPosition);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (!isStatic){", "-\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "-\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}\t\t\t\t\t\t\t\t\t", "-\t\t\t\t}", "+\t\t\t\t}\t\t\t\t\t\t\t\t\t", "-\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72e0be529bced0f2f6532400dcd42ca9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "  public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {", "-\t\tint pc = codeStream.position;", "-\t\tif (constant != Constant.NotAConstant) {", "-\t\t\t\tcodeStream.generateConstant(constant, implicitConversion);", "-\t\t} else {", "-\t\t\tswitch (bits & RestrictiveFlagMASK) {", "-\t\t\t\tcase Binding.FIELD : // reading a field", "-\t\t\t\t\tFieldBinding fieldBinding = (FieldBinding) this.codegenBinding;", "-\t\t\t\t\tConstant fieldConstant = fieldBinding.constant();", "-\t\t\t\t\tif (fieldConstant != Constant.NotAConstant) {", "-\t\t\t\t\t\t// directly use inlined value for constant fields", "-\t\t\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t\t\tcodeStream.generateConstant(fieldConstant, implicitConversion);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\tif (fieldBinding.isStatic()) {", "-\t\t\t\t\t\tif (!valueRequired", "-\t\t\t\t\t\t\t\t// if no valueRequired, still need possible side-effects of <clinit> invocation, if field belongs to different class", "-\t\t\t\t\t\t\t\t&& ((FieldBinding)binding).original().declaringClass == this.actualReceiverType.erasure()", "-\t\t\t\t\t\t\t\t&& ((implicitConversion & TypeIds.UNBOXING) == 0)", "-\t\t\t\t\t\t\t\t&& this.genericCast == null) {", "-\t\t\t\t\t\t\t// if no valueRequired, optimize out entire gen", "-\t\t\t\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// managing private access\t\t\t\t\t\t\t", "-\t\t\t\t\t\tif ((syntheticAccessors == null) || (syntheticAccessors[READ] == null)) {", "-\t\t\t\t\t\t\tcodeStream.getstatic(fieldBinding);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.invokestatic(syntheticAccessors[READ]);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!valueRequired", "-\t\t\t\t\t\t\t\t&& (implicitConversion & TypeIds.UNBOXING) == 0 ", "-\t\t\t\t\t\t\t\t&& this.genericCast == null) {", "-\t\t\t\t\t\t\t// if no valueRequired, optimize out entire gen", "-\t\t\t\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// managing enclosing instance access", "-\t\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "-\t\t\t\t\t\t\tObject[] emulationPath = currentScope.getEmulationPath(targetType, true /*only exact match*/, false/*consider enclosing arg*/);", "-\t\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, targetType, currentScope);", "-\t\t\t\t\t\t\tgenerateReceiver(codeStream);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// managing private access\t\t\t\t\t\t\t", "-\t\t\t\t\t\tif ((syntheticAccessors == null) || (syntheticAccessors[READ] == null)) {", "-\t\t\t\t\t\t\tcodeStream.getfield(fieldBinding);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.invokestatic(syntheticAccessors[READ]);", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase Binding.LOCAL : // reading a local", "-\t\t\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.codegenBinding;", "-\t\t\t\t\tif (!valueRequired && (implicitConversion & TypeIds.UNBOXING) == 0) {", "+", "+public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {", "+\tint pc = codeStream.position;", "+\tif (this.constant != Constant.NotAConstant) {", "+\t\tif (valueRequired) {", "+\t\t\tcodeStream.generateConstant(this.constant, this.implicitConversion);", "+\t\t}", "+\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\treturn;", "+\t} else {", "+\t\tswitch (this.bits & ASTNode.RestrictiveFlagMASK) {", "+\t\t\tcase Binding.FIELD : // reading a field", "+\t\t\t\tFieldBinding fieldBinding = (FieldBinding) this.codegenBinding;", "+\t\t\t\tConstant fieldConstant = fieldBinding.constant();", "+\t\t\t\tif (fieldConstant != Constant.NotAConstant) {", "+\t\t\t\t\t// directly use inlined value for constant fields", "+\t\t\t\t\tif (valueRequired) {", "+\t\t\t\t\t\tcodeStream.generateConstant(fieldConstant, this.implicitConversion);", "+\t\t\t\t\t}", "+\t\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t\tif (fieldBinding.isStatic()) {", "+\t\t\t\t\tif (!valueRequired", "+\t\t\t\t\t\t\t// if no valueRequired, still need possible side-effects of <clinit> invocation, if field belongs to different class", "+\t\t\t\t\t\t\t&& ((FieldBinding)this.binding).original().declaringClass == this.actualReceiverType.erasure()", "+\t\t\t\t\t\t\t&& ((this.implicitConversion & TypeIds.UNBOXING) == 0)", "+\t\t\t\t\t\t\t&& this.genericCast == null) {", "-\t\t\t\t\t// outer local?", "-\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "-\t\t\t\t\t\t// outer local can be reached either through a synthetic arg or a synthetic field", "-\t\t\t\t\t\tVariableBinding[] path = currentScope.getEmulationPath(localBinding);", "-\t\t\t\t\t\tcodeStream.generateOuterAccess(path, this, localBinding, currentScope);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// regular local variable read", "-\t\t\t\t\t\tcodeStream.load(localBinding);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault: // type", "-\t\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t\t\t\t\treturn;\t\t\t\t\t", "-\t\t\t}", "-\t\t}", "-\t\t// required cast must occur even if no value is required", "-\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);", "-\t\tif (valueRequired) {", "-\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t} else {", "-\t\t\tboolean isUnboxing = (implicitConversion & TypeIds.UNBOXING) != 0;", "-\t\t\t// conversion only generated if unboxing", "-\t\t\tif (isUnboxing) codeStream.generateImplicitConversion(implicitConversion);", "-\t\t\tswitch (isUnboxing ? postConversionType(currentScope).id : this.resolvedType.id) {", "-\t\t\t\tcase T_long :", "-\t\t\t\tcase T_double :", "-\t\t\t\t\tcodeStream.pop2();", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault :", "-\t\t\t\t\tcodeStream.pop();", "-\t\t\t}", "-\t\t}\t\t\t\t\t\t\t", "-\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t}", "+\t\t\t\t\t// managing private access\t\t\t\t\t\t\t", "+\t\t\t\t\tif ((this.syntheticAccessors == null) || (this.syntheticAccessors[SingleNameReference.READ] == null)) {", "+\t\t\t\t\t\tcodeStream.invokestatic(this.syntheticAccessors[SingleNameReference.READ]);", "+\t\t\t\t\tif (!valueRequired", "+\t\t\t\t\t\t\t&& (this.implicitConversion & TypeIds.UNBOXING) == 0 ", "+\t\t\t\t\t\t\t&& this.genericCast == null) {", "+\t\t\t\t\t\t// if no valueRequired, optimize out entire gen", "+\t\t\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\t// managing enclosing instance access", "+\t\t\t\t\tif ((this.bits & ASTNode.DepthMASK) != 0) {", "+\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((this.bits & ASTNode.DepthMASK) >> ASTNode.DepthSHIFT);", "+\t\t\t\t\t\tgenerateReceiver(codeStream);", "+\t\t\t\t\t// managing private access\t\t\t\t\t\t\t", "+\t\t\t\t\tif ((this.syntheticAccessors == null) || (this.syntheticAccessors[SingleNameReference.READ] == null)) {", "+\t\t\t\t\t\tcodeStream.invokestatic(this.syntheticAccessors[SingleNameReference.READ]);", "+\t\t\tcase Binding.LOCAL : // reading a local", "+\t\t\t\tif (!valueRequired && (this.implicitConversion & TypeIds.UNBOXING) == 0) {", "+\t\t\t\t\t// if no valueRequired, optimize out entire gen", "+\t\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t\t\t\treturn;", "+\t\t\t\t// outer local?", "+\t\t\t\tif ((this.bits & ASTNode.DepthMASK) != 0) {", "+\t\t\t\t\t// outer local can be reached either through a synthetic arg or a synthetic field", "+\t\t\t\t\tVariableBinding[] path = currentScope.getEmulationPath(localBinding);", "+\t\t\t\t\tcodeStream.generateOuterAccess(path, this, localBinding, currentScope);", "+\t\t\t\t} else {", "+\t\t\t\t\t// regular local variable read", "+\t\t\t\t\tcodeStream.load(localBinding);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tdefault: // type", "+\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t\t\treturn;\t\t\t\t\t", "+\t}", "+\t// required cast must occur even if no value is required", "+\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);", "+\tif (valueRequired) {", "+\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t} else {", "+\t\tboolean isUnboxing = (this.implicitConversion & TypeIds.UNBOXING) != 0;", "+\t\t// conversion only generated if unboxing", "+\t\tif (isUnboxing) codeStream.generateImplicitConversion(this.implicitConversion);", "+\t\tswitch (isUnboxing ? postConversionType(currentScope).id : this.resolvedType.id) {", "+\t\t\tcase T_long :", "+\t\t\tcase T_double :", "+\t\t\t\tcodeStream.pop2();", "+\t\t\t\tcodeStream.pop();", "+\t}\t\t\t\t\t\t\t", "+\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+}"]}], "num": 4890}
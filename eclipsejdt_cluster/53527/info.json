{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa682f5b6290d7f04adeb85d46259b8f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2c3332c421aa08dbc4666c0d712c92d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "bb58594beea7321f1a2a3673bab3e26af89ead20", "commitAfterChange": "7376fb10956e4a03cc528e86b634b5ca73ef755b", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "signatureAfterChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "diff": ["-\t\t\t\t\tsuper.process(unit, i); // this.process(...) is optimized to not process already known units", "+\t\t\t\t\tchar[] fileName = unit.compilationResult.getFileName();", "-\t\t\t\t\tICompilationUnit source = (ICompilationUnit) this.requestedSources.removeKey(unit.compilationResult.getFileName());", "-\t\t\t\t\tif (source != null) {", "-\t\t\t\t\t\t// convert AST", "-\t\t\t\t\t\tCompilationResult compilationResult = unit.compilationResult;", "-\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit = compilationResult.compilationUnit;", "-\t\t\t\t\t\tchar[] contents = sourceUnit.getContents();", "-\t\t\t\t\t\tAST ast = AST.newAST(apiLevel);", "-\t\t\t\t\t\tast.setDefaultNodeFlag(ASTNode.ORIGINAL);", "-\t\t\t\t\t\tASTConverter converter = new ASTConverter(compilerOptions, true/*need to resolve bindings*/, monitor);", "-\t\t\t\t\t\tBindingResolver resolver = new DefaultBindingResolver(unit.scope, owner, this.bindingTables);", "-\t\t\t\t\t\tast.setBindingResolver(resolver);", "-\t\t\t\t\t\tconverter.setAST(ast);", "-\t\t\t\t\t\tCompilationUnit compilationUnit = converter.convert(unit, contents);", "-\t\t\t\t\t\tcompilationUnit.setJavaElement(source);", "-\t\t\t\t\t\tcompilationUnit.setLineEndTable(compilationResult.lineSeparatorPositions);", "-\t\t\t\t\t\tast.setDefaultNodeFlag(0);", "-\t\t\t\t\t\tast.setOriginalModificationCount(ast.modificationCount());", "+\t\t\t\t\t// only process requested units", "+\t\t\t\t\tif (this.requestedKeys.containsKey(fileName) || this.requestedSources.containsKey(fileName)) {", "+\t\t\t\t\t\tsuper.process(unit, i); // this.process(...) is optimized to not process already known units", "-\t\t\t\t\t\t// pass it to requestor", "-\t\t\t\t\t\tastRequestor.acceptAST(source, compilationUnit);", "-\t\t\t\t\t} ", "-\t\t\t\t\t", "-\t\t\t\t\tObject key = this.requestedKeys.removeKey(unit.compilationResult.getFileName());", "-\t\t\t\t\tif (key instanceof BindingKeyResolver) {", "-\t\t\t\t\t\treportBinding(key, astRequestor, owner, unit);", "-\t\t\t\t\t} else if (key instanceof ArrayList) {", "-\t\t\t\t\t\tIterator iterator = ((ArrayList) key).iterator();", "-\t\t\t\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\t\t\t\treportBinding(iterator.next(), astRequestor, owner, unit);", "+\t\t\t\t\t\tICompilationUnit source = (ICompilationUnit) this.requestedSources.removeKey(fileName);", "+\t\t\t\t\t\tif (source != null) {", "+\t\t\t\t\t\t\t// convert AST", "+\t\t\t\t\t\t\tCompilationResult compilationResult = unit.compilationResult;", "+\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit = compilationResult.compilationUnit;", "+\t\t\t\t\t\t\tchar[] contents = sourceUnit.getContents();", "+\t\t\t\t\t\t\tAST ast = AST.newAST(apiLevel);", "+\t\t\t\t\t\t\tast.setDefaultNodeFlag(ASTNode.ORIGINAL);", "+\t\t\t\t\t\t\tASTConverter converter = new ASTConverter(compilerOptions, true/*need to resolve bindings*/, monitor);", "+\t\t\t\t\t\t\tBindingResolver resolver = new DefaultBindingResolver(unit.scope, owner, this.bindingTables);", "+\t\t\t\t\t\t\tast.setBindingResolver(resolver);", "+\t\t\t\t\t\t\tconverter.setAST(ast);", "+\t\t\t\t\t\t\tCompilationUnit compilationUnit = converter.convert(unit, contents);", "+\t\t\t\t\t\t\tcompilationUnit.setJavaElement(source);", "+\t\t\t\t\t\t\tcompilationUnit.setLineEndTable(compilationResult.lineSeparatorPositions);", "+\t\t\t\t\t\t\tast.setDefaultNodeFlag(0);", "+\t\t\t\t\t\t\tast.setOriginalModificationCount(ast.modificationCount());", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t// pass it to requestor", "+\t\t\t\t\t\t\tastRequestor.acceptAST(source, compilationUnit);", "+\t\t\t\t\t\t} ", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tObject key = this.requestedKeys.removeKey(fileName);", "+\t\t\t\t\t\tif (key instanceof BindingKeyResolver) {", "+\t\t\t\t\t\t\treportBinding(key, astRequestor, owner, unit);", "+\t\t\t\t\t\t} else if (key instanceof ArrayList) {", "+\t\t\t\t\t\t\tIterator iterator = ((ArrayList) key).iterator();", "+\t\t\t\t\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\t\t\t\t\treportBinding(iterator.next(), astRequestor, owner, unit);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (unit.scope != null)", "+\t\t\t\t\t\t\tunit.scope.faultInTypes(); // still force resolution of signatures, so clients can query DOM AST"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3a7f88c68bca109977ad05b8b8f599e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java", "commitBeforeChange": "f4826af2e2ac8306bb9ff659455263dec112880d", "commitAfterChange": "7086675b9016b36eb3327ff794af3728a774a189", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 30, "signatureBeforeChange": " \t \tpublic void consumeTopLevelType()", "signatureAfterChange": " \t \tpublic void consumeTopLevelType()", "diff": ["+\t\tchar[] fileName;", "-\t\tif (this.parsedUnit != null && this.compiler != null) {", "-\t\t\tthis.compiler.process(this.parsedUnit, this.compiler.totalUnits+1); // noop if unit has already been resolved", "+\t\tif (this.parsedUnit != null && this.compiler != null && !this.resolvedUnits.containsKey(fileName = this.parsedUnit.getFileName())) {", "+\t\t\tthis.compiler.process(this.parsedUnit, this.compiler.totalUnits+1); // unit is resolved only once thanks to the resolvedUnits protection", "+\t\t\tthis.resolvedUnits.put(fileName, fileName);"]}], "num": 53527}
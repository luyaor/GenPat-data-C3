{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76e519d0732d40f6d8dda64aa0d1f16b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ea39b02ad2cdbb9f38c3cb8881a2460", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java", "commitBeforeChange": "582314aebaa81c30307377892044ded507af1f74", "commitAfterChange": "c0ecc47cac9e40a73cc3ed5a5be93bbace7cb891", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void consumeCapture(final int position)", "signatureAfterChange": " \t \tpublic void consumeCapture(final int position)", "diff": ["+\t\tfinal Binding wildcardBinding = ((BindingKeyResolver) this.types.get(0)).compilerBinding;", "-\t\t\tBinding parameterizedTypeBinding;", "-\t\t\tpublic boolean visit(SingleNameReference singleNameReference, BlockScope blockScope) {", "-\t\t\t\tif (singleNameReference.sourceEnd == position) {", "-\t\t\t\t\tthis.parameterizedTypeBinding = singleNameReference.resolvedType;", "+\t\t\tCaptureBinding capture;", "+\t\t\tboolean checkType(TypeBinding binding) {", "+\t\t\t\tif (binding == null)", "-\t\t\t\t} ", "+\t\t\t\tswitch (binding.kind()) {", "+\t\t\t\t\tcase Binding.PARAMETERIZED_TYPE:", "+\t\t\t\t\t\tTypeBinding[] arguments = ((ParameterizedTypeBinding) binding).arguments;", "+\t\t\t\t\t\tif (arguments == null) return false;", "+\t\t\t\t\t\tfor (int i = 0, length = arguments.length; i < length; i++) {", "+\t\t\t\t\t\t\tif (checkType(arguments[i]))", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.WILDCARD_TYPE:", "+\t\t\t\t\t\treturn checkType(((WildcardBinding) binding).bound);", "+\t\t\t\t\tcase Binding.ARRAY_TYPE:", "+\t\t\t\t\t\treturn checkType(((ArrayBinding) binding).leafComponentType);", "+\t\t\t\t\tcase Binding.TYPE_PARAMETER:", "+\t\t\t\t\t\tif (binding.isCapture()) {", "+\t\t\t\t\t\t\tCaptureBinding captureBinding = (CaptureBinding) binding;", "+\t\t\t\t\t\t\tif (captureBinding.position == position && captureBinding.wildcard == wildcardBinding) {", "+\t\t\t\t\t\t\t\tthis.capture = captureBinding;", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tpublic boolean visit(SingleNameReference singleNameReference, BlockScope blockScope) {", "+\t\t\t\tif (checkType(singleNameReference.resolvedType)) ", "+\t\t\t\t\treturn false;", "-\t\t\t\tif (qualifiedNameReference.sourceEnd == position) {", "-\t\t\t\t\tthis.parameterizedTypeBinding = qualifiedNameReference.resolvedType;", "+\t\t\t\tif (checkType(qualifiedNameReference.resolvedType))", "-\t\t\t\t} ", "-\t\t\t\tif (messageSend.sourceEnd == position) {", "-\t\t\t\t\tthis.parameterizedTypeBinding = messageSend.resolvedType;", "+\t\t\t\tif (checkType(messageSend.resolvedType))", "-\t\t\t\t} ", "-\t\t\t\tif (fieldReference.sourceEnd == position) {", "-\t\t\t\t\tthis.parameterizedTypeBinding = fieldReference.resolvedType;", "+\t\t\t\tif (checkType(fieldReference.resolvedType))", "-\t\t\t\t} ", "-\t\t\t\tif (conditionalExpression.sourceEnd == position) {", "-\t\t\t\t\tthis.parameterizedTypeBinding = conditionalExpression.resolvedType;", "+\t\t\t\tif (checkType(conditionalExpression.resolvedType))", "-\t\t\t\t} ", "-\t\t\t\tif (castExpression.sourceEnd == position) {", "-\t\t\t\t\tthis.parameterizedTypeBinding = castExpression.resolvedType;", "+\t\t\t\tif (checkType(castExpression.resolvedType))", "-\t\t\t\t} ", "-\t\t\t\tif (assignment.sourceEnd == position) {", "-\t\t\t\t\tthis.parameterizedTypeBinding = assignment.resolvedType;", "+\t\t\t\tif (checkType(assignment.resolvedType))", "-\t\t\t\t} ", "-\t\t\t\tif (arrayReference.sourceEnd == position) {", "-\t\t\t\t\tthis.parameterizedTypeBinding = arrayReference.resolvedType;", "+\t\t\t\tif (checkType(arrayReference.resolvedType))", "-\t\t\t\t} ", "-\t\tif (!(captureFinder.parameterizedTypeBinding instanceof ParameterizedTypeBinding))", "-\t\t\treturn;", "-\t\tTypeBinding[] arguments = ((ParameterizedTypeBinding) captureFinder.parameterizedTypeBinding).arguments;", "-\t\tif (arguments == null) return;", "-\t\tBinding wildcardBinding = ((BindingKeyResolver) this.types.get(0)).compilerBinding;", "-\t\tfor (int i = 0, length = arguments.length; i < length; i++) {", "-\t\t\tTypeBinding binding = arguments[i];", "-\t\t\tif (binding instanceof CaptureBinding) {", "-\t\t\t\tCaptureBinding captureBinding = (CaptureBinding) binding;", "-\t\t\t\tif (captureBinding.wildcard == wildcardBinding && captureBinding.sourceType == this.typeBinding) {", "-\t\t\t\t\tthis.compilerBinding = binding;", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\tthis.compilerBinding = captureFinder.capture;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8b355a745642f7b7a5b0055e34c702c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java", "commitBeforeChange": "c117a64cdf0af5bb1016a70197fdaaecfa29c6f9", "commitAfterChange": "f27e1412cdba4e953d571d1998376687a4c5af71", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void consumeCapture()", "signatureAfterChange": " \t \tpublic void consumeCapture(final int position)", "diff": ["-\tpublic void consumeCapture() {", "-\t\tthis.isCapture = true;", "+\tpublic void consumeCapture(final int position) {", "+\t\tif (this.parsedUnit == null) return;", "+\t\tclass CaptureFinder extends ASTVisitor {", "+\t\t\tBinding parameterizedTypeBinding;", "+\t\t\tpublic boolean visit(SingleNameReference singleNameReference, BlockScope blockScope) {", "+\t\t\t\tif (singleNameReference.sourceEnd == position) {", "+\t\t\t\t\tthis.parameterizedTypeBinding = singleNameReference.resolvedType;", "+\t\t\t\t\treturn false;", "+\t\t\t\t} ", "+\t\t\t\treturn super.visit(singleNameReference, blockScope);", "+\t\t\t}", "+\t\t\tpublic boolean visit(QualifiedNameReference qualifiedNameReference, BlockScope blockScope) {", "+\t\t\t\tif (qualifiedNameReference.sourceEnd == position) {", "+\t\t\t\t\tthis.parameterizedTypeBinding = qualifiedNameReference.resolvedType;", "+\t\t\t\t\treturn false;", "+\t\t\t\t} ", "+\t\t\t\treturn super.visit(qualifiedNameReference, blockScope);", "+\t\t\t}", "+\t\t\tpublic boolean visit(MessageSend messageSend, BlockScope blockScope) {", "+\t\t\t\tif (messageSend.sourceEnd == position) {", "+\t\t\t\t\tthis.parameterizedTypeBinding = messageSend.resolvedType;", "+\t\t\t\t\treturn false;", "+\t\t\t\t} ", "+\t\t\t\treturn super.visit(messageSend, blockScope);", "+\t\t\t}", "+\t\t\tpublic boolean visit(FieldReference fieldReference, BlockScope blockScope) {", "+\t\t\t\tif (fieldReference.sourceEnd == position) {", "+\t\t\t\t\tthis.parameterizedTypeBinding = fieldReference.resolvedType;", "+\t\t\t\t\treturn false;", "+\t\t\t\t} ", "+\t\t\t\treturn super.visit(fieldReference, blockScope);", "+\t\t\t}", "+\t\t\tpublic boolean visit(ConditionalExpression conditionalExpression, BlockScope blockScope) {", "+\t\t\t\tif (conditionalExpression.sourceEnd == position) {", "+\t\t\t\t\tthis.parameterizedTypeBinding = conditionalExpression.resolvedType;", "+\t\t\t\t\treturn false;", "+\t\t\t\t} ", "+\t\t\t\treturn super.visit(conditionalExpression, blockScope);", "+\t\t\t}", "+\t\t\tpublic boolean visit(CastExpression castExpression, BlockScope blockScope) {", "+\t\t\t\tif (castExpression.sourceEnd == position) {", "+\t\t\t\t\tthis.parameterizedTypeBinding = castExpression.resolvedType;", "+\t\t\t\t\treturn false;", "+\t\t\t\t} ", "+\t\t\t\treturn super.visit(castExpression, blockScope);", "+\t\t\t}", "+\t\t\tpublic boolean visit(Assignment assignment, BlockScope blockScope) {", "+\t\t\t\tif (assignment.sourceEnd == position) {", "+\t\t\t\t\tthis.parameterizedTypeBinding = assignment.resolvedType;", "+\t\t\t\t\treturn false;", "+\t\t\t\t} ", "+\t\t\t\treturn super.visit(assignment, blockScope);", "+\t\t\t}", "+\t\t\tpublic boolean visit(ArrayReference arrayReference, BlockScope blockScope) {", "+\t\t\t\tif (arrayReference.sourceEnd == position) {", "+\t\t\t\t\tthis.parameterizedTypeBinding = arrayReference.resolvedType;", "+\t\t\t\t\treturn false;", "+\t\t\t\t} ", "+\t\t\t\treturn super.visit(arrayReference, blockScope);", "+\t\t\t}", "+\t\t}", "+\t\tCaptureFinder captureFinder = new CaptureFinder();", "+\t\tthis.parsedUnit.traverse(captureFinder, this.parsedUnit.scope);", "+\t\tif (!(captureFinder.parameterizedTypeBinding instanceof ParameterizedTypeBinding))", "+\t\t\treturn;", "+\t\tTypeBinding[] arguments = ((ParameterizedTypeBinding) captureFinder.parameterizedTypeBinding).arguments;", "+\t\tif (arguments == null) return;", "+\t\tBinding wildcardBinding = ((BindingKeyResolver) this.types.get(0)).compilerBinding;", "+\t\tfor (int i = 0, length = arguments.length; i < length; i++) {", "+\t\t\tTypeBinding binding = arguments[i];", "+\t\t\tif (binding instanceof CaptureBinding) {", "+\t\t\t\tCaptureBinding captureBinding = (CaptureBinding) binding;", "+\t\t\t\tif (captureBinding.wildcard == wildcardBinding && captureBinding.sourceType == this.typeBinding) {", "+\t\t\t\t\tthis.compilerBinding = binding;", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 52908}
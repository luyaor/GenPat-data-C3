{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f2b024f148fcb569447e75abf4b6001", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fb530c2d0d79b957defe7292602599a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "90c4f87ff9590171c32b9a9ab9aa13acdfe2086c", "commitAfterChange": "1317e9ebe26807b45d83a46701194241e6f648d5", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r protected void moveAndResizeGap(int position, int size)", "signatureAfterChange": "\r protected void moveAndResizeGap(int position, int size)", "diff": ["-\tint oldSize = fGapEnd - fGapStart;\r", "-\tint newSize = fHighWatermark + size;\r", "+\tint oldSize = this.gapEnd - this.gapStart;\r", "+\tint newSize = this.highWatermark + size;\r", "-\t\t\tcontent = new char[fContents.length - oldSize];\r", "-\t\t\tSystem.arraycopy(fContents, 0, content, 0, fGapStart);\r", "-\t\t\tSystem.arraycopy(fContents, fGapEnd, content, fGapStart, content.length - fGapStart);\r", "-\t\t\tfContents = content;\r", "+\t\t\tcontent = new char[this.contents.length - oldSize];\r", "+\t\t\tSystem.arraycopy(this.contents, 0, content, 0, this.gapStart);\r", "+\t\t\tSystem.arraycopy(this.contents, this.gapEnd, content, this.gapStart, content.length - this.gapStart);\r", "+\t\t\tthis.contents = content;\r", "-\t\tfGapStart = fGapEnd = position;\r", "+\t\tthis.gapStart = this.gapEnd = position;\r", "-\tcontent = new char[fContents.length + (newSize - oldSize)];\r", "+\tcontent = new char[this.contents.length + (newSize - oldSize)];\r", "-\t\tSystem.arraycopy(fContents, 0, content, 0, newGapStart);\r", "-\t\tSystem.arraycopy(fContents, newGapStart, content, newGapEnd, content.length - newGapEnd);\r", "+\t\tSystem.arraycopy(this.contents, 0, content, 0, newGapStart);\r", "+\t\tSystem.arraycopy(this.contents, newGapStart, content, newGapEnd, content.length - newGapEnd);\r", "-\t\tif (newGapStart < fGapStart) {\r", "-\t\t\tint delta = fGapStart - newGapStart;\r", "-\t\t\tSystem.arraycopy(fContents, 0, content, 0, newGapStart);\r", "-\t\t\tSystem.arraycopy(fContents, newGapStart, content, newGapEnd, delta);\r", "-\t\t\tSystem.arraycopy(fContents, fGapEnd, content, newGapEnd + delta, fContents.length - fGapEnd);\r", "+\t\tif (newGapStart < this.gapStart) {\r", "+\t\t\tint delta = this.gapStart - newGapStart;\r", "+\t\t\tSystem.arraycopy(this.contents, 0, content, 0, newGapStart);\r", "+\t\t\tSystem.arraycopy(this.contents, newGapStart, content, newGapEnd, delta);\r", "+\t\t\tSystem.arraycopy(this.contents, this.gapEnd, content, newGapEnd + delta, this.contents.length - this.gapEnd);\r", "-\t\t\tint delta = newGapStart - fGapStart;\r", "-\t\t\tSystem.arraycopy(fContents, 0, content, 0, fGapStart);\r", "-\t\t\tSystem.arraycopy(fContents, fGapEnd, content, fGapStart, delta);\r", "-\t\t\tSystem.arraycopy(fContents, fGapEnd + delta, content, newGapEnd, content.length - newGapEnd);\r", "+\t\t\tint delta = newGapStart - this.gapStart;\r", "+\t\t\tSystem.arraycopy(this.contents, 0, content, 0, this.gapStart);\r", "+\t\t\tSystem.arraycopy(this.contents, this.gapEnd, content, this.gapStart, delta);\r", "+\t\t\tSystem.arraycopy(this.contents, this.gapEnd + delta, content, newGapEnd, content.length - newGapEnd);\r", "-\tfContents = content;\r", "-\tfGapStart = newGapStart;\r", "-\tfGapEnd = newGapEnd;\r", "+\tthis.contents = content;\r", "+\tthis.gapStart = newGapStart;\r", "+\tthis.gapEnd = newGapEnd;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbf61d4214db832062294f0ba444bf89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic FlowInfo addPotentialInitializationsFrom(FlowInfo inits)", "signatureAfterChange": "  public FlowInfo addPotentialInitializationsFrom(FlowInfo inits)", "diff": ["+", "+public FlowInfo addPotentialInitializationsFrom(FlowInfo inits) {", "+\tif (this == DEAD_END){", "-\t// unions of both sets of initialization - used for try/finally", "-\tpublic FlowInfo addPotentialInitializationsFrom(FlowInfo inits) {", "-\t", "-\t\tif (this == DEAD_END){", "-\t\t\treturn this;", "+\tif (inits == DEAD_END){", "+\t\treturn this;", "+\t}", "+\tUnconditionalFlowInfo otherInits = inits.unconditionalInits();", "+\t// union of potentially set ones", "+\tthis.potentialInits |= otherInits.potentialInits;", "+\t// treating extra storage", "+\tif (this.extra != null) {", "+\t\tif (otherInits.extra != null) {", "+\t\t\t// both sides have extra storage", "+\t\t\tint i = 0, length, otherLength;", "+\t\t\tif ((length = this.extra[0].length) < (otherLength = otherInits.extra[0].length)) {", "+\t\t\t\t// current storage is shorter -> grow current", "+\t\t\t\tfor (int j = 0; j < extraLength; j++) {", "+\t\t\t\t\tSystem.arraycopy(this.extra[j], 0, ", "+\t\t\t\t\t\t(this.extra[j] = new long[otherLength]), 0, length);", "+\t\t\t\t}", "+\t\t\t\tfor (; i < length; i++) {", "+\t\t\t\t\tthis.extra[1][i] |= otherInits.extra[1][i];", "+\t\t\t\t}", "+\t\t\t\tfor (; i < otherLength; i++) {", "+\t\t\t\t\tthis.extra[1][i] = otherInits.extra[1][i];", "+\t\t\t\t}", "+\t\t\t} ", "+\t\t\telse {", "+\t\t\t\t// current storage is longer", "+\t\t\t\tfor (; i < otherLength; i++) {", "+\t\t\t\t\tthis.extra[1][i] |= otherInits.extra[1][i];", "+\t\t\t\t}", "+\t\t\t}", "-", "-\t\tUnconditionalFlowInfo otherInits = inits.unconditionalInits();", "-\t\tif (otherInits == DEAD_END){", "-\t\t\treturn this;", "+\t} ", "+\telse if (otherInits.extra != null) {", "+\t\t// no storage here, but other has extra storage.", "+\t\tint otherLength = otherInits.extra[0].length;", "+\t\tthis.extra = new long[extraLength][];", "+\t\tfor (int j = 0; j < extraLength; j++) {", "+\t\t\tthis.extra[j] = new long[otherLength];\t\t\t", "-\t\t// union of potentially set ones", "-\t\tthis.potentialInits |= otherInits.potentialInits;", "-\t\t// also merge null check information (affected by potential inits)", "-\t\tthis.definiteNulls &= otherInits.definiteNulls;", "-\t\tthis.definiteNonNulls &= otherInits.definiteNonNulls;", "-\t", "-\t\t// treating extra storage", "-\t\tif (this.extraDefiniteInits != null) {", "-\t\t\tif (otherInits.extraDefiniteInits != null) {", "-\t\t\t\t// both sides have extra storage", "-\t\t\t\tint i = 0, length, otherLength;", "-\t\t\t\tif ((length = this.extraDefiniteInits.length) < (otherLength = otherInits.extraDefiniteInits.length)) {", "-\t\t\t\t\t// current storage is shorter -> grow current (could maybe reuse otherInits extra storage?)", "-\t\t\t\t\tSystem.arraycopy(this.extraDefiniteInits, 0, (this.extraDefiniteInits = new long[otherLength]), 0, length);", "-\t\t\t\t\tSystem.arraycopy(this.extraPotentialInits, 0, (this.extraPotentialInits = new long[otherLength]), 0, length);", "-\t\t\t\t\tSystem.arraycopy(this.extraDefiniteNulls, 0, (this.extraDefiniteNulls = new long[otherLength]), 0, length);", "-\t\t\t\t\tSystem.arraycopy(this.extraDefiniteNonNulls, 0, (this.extraDefiniteNonNulls = new long[otherLength]), 0, length);", "-\t\t\t\t\twhile (i < length) {", "-\t\t\t\t\t\tthis.extraPotentialInits[i] |= otherInits.extraPotentialInits[i];", "-\t\t\t\t\t\tthis.extraDefiniteNulls[i] &= otherInits.extraDefiniteNulls[i];", "-\t\t\t\t\t\tthis.extraDefiniteNonNulls[i] &= otherInits.extraDefiniteNonNulls[i++];", "+\t\tSystem.arraycopy(otherInits.extra[1], 0, this.extra[1], 0, ", "+\t\t\totherLength);", "+\t}", "+\tthis.addPotentialNullInfoFrom(otherInits);", "+\t// REVIEW inline?", "+\treturn this;", "+}", "-\t\t\t\t\twhile (i < otherLength) {", "-\t\t\t\t\t\tthis.extraPotentialInits[i] = otherInits.extraPotentialInits[i];", "-\t\t\t\t\t\tthis.extraDefiniteNulls[i] &= otherInits.extraDefiniteNulls[i];", "-\t\t\t\t\t\tthis.extraDefiniteNonNulls[i] &= otherInits.extraDefiniteNonNulls[i++];", "-\t\t\t\t} else {", "-\t\t\t\t\t// current storage is longer", "-\t\t\t\t\twhile (i < otherLength) {", "-\t\t\t\t\t\tthis.extraPotentialInits[i] |= otherInits.extraPotentialInits[i];", "-\t\t\t\t\t\tthis.extraDefiniteNulls[i] &= otherInits.extraDefiniteNulls[i];", "-\t\t\t\t\t\tthis.extraDefiniteNonNulls[i] &= otherInits.extraDefiniteNonNulls[i++];", "-\t\t} else", "-\t\t\tif (otherInits.extraDefiniteInits != null) {", "-\t\t\t\t// no storage here, but other has extra storage.", "-\t\t\t\tint otherLength;", "-\t\t\t\tthis.extraDefiniteInits = new long[otherLength = otherInits.extraDefiniteInits.length];\t\t\t", "-\t\t\t\tSystem.arraycopy(otherInits.extraPotentialInits, 0, (this.extraPotentialInits = new long[otherLength]), 0, otherLength);", "-\t\t\t\tthis.extraDefiniteNulls = new long[otherLength];\t\t\t", "-\t\t\t\tthis.extraDefiniteNonNulls = new long[otherLength];\t\t\t"]}], "num": 30462}
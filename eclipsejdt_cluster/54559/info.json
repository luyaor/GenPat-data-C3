{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3cf883dcb4d3382202ce1ac06a7c3752", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dc84d021d8b6f0bb8e3cf939732e748", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "269f312257be83a1ad7c36278e7ea6d85f19531b", "commitAfterChange": "87ed66aa23eb18c40ed50003879a94df88ad854b", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tprivate IClasspathContainer initializeAllContainers(IJavaProject javaProjectToInit, IPath containerToInit) throws JavaModelException", "signatureAfterChange": " \tprivate IClasspathContainer initializeAllContainers(IJavaProject javaProjectToInit, IPath containerToInit) throws JavaModelException", "diff": ["-\t\tSet keys = allContainerPaths.keySet();", "-\t\tint length = keys.size();", "-\t\tIJavaProject[] javaProjects = new IJavaProject[length]; // clone as the following will have a side effect", "-\t\tkeys.toArray(javaProjects);", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tIJavaProject javaProject = javaProjects[i];", "-\t\t\tHashSet pathSet = (HashSet) allContainerPaths.get(javaProject);", "-\t\t\tif (pathSet == null) continue;", "-\t\t\tint length2 = pathSet.size();", "-\t\t\tIPath[] paths = new IPath[length2];", "-\t\t\tpathSet.toArray(paths); // clone as the following will have a side effect", "-\t\t\tfor (int j = 0; j < length2; j++) {", "-\t\t\t\tIPath path = paths[j];", "-\t\t\t\tinitializeContainer(javaProject, path);", "+\t\tboolean ok = false;", "+\t\ttry {", "+\t\t\tSet keys = allContainerPaths.keySet();", "+\t\t\tint length = keys.size();", "+\t\t\tIJavaProject[] javaProjects = new IJavaProject[length]; // clone as the following will have a side effect", "+\t\t\tkeys.toArray(javaProjects);", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tIJavaProject javaProject = javaProjects[i];", "+\t\t\t\tHashSet pathSet = (HashSet) allContainerPaths.get(javaProject);", "+\t\t\t\tif (pathSet == null) continue;", "+\t\t\t\tint length2 = pathSet.size();", "+\t\t\t\tIPath[] paths = new IPath[length2];", "+\t\t\t\tpathSet.toArray(paths); // clone as the following will have a side effect", "+\t\t\t\tfor (int j = 0; j < length2; j++) {", "+\t\t\t\t\tIPath path = paths[j];", "+\t\t\t\t\tinitializeContainer(javaProject, path);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tok = true;", "+\t\t} finally {", "+\t\t\tif (!ok) { ", "+\t\t\t\t// if we're being traversed by an exception, ensure that that containers are ", "+\t\t\t\t// no longer marked as initialization in progress", "+\t\t\t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=66437)", "+\t\t\t\tthis.containerInitializationInProgress.set(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49a7ef6e472cf59b5fc0e948d0af5d06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "de65be5a1abe4097e389297efccea4b0ab9d85ba", "commitAfterChange": "b75c4b6d1f5233838746ca348c927bfe9d79a31e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \tprivate void format(TypeDeclaration typeDeclaration)", "signatureAfterChange": " \t \tprivate void format(TypeDeclaration typeDeclaration)", "diff": ["+\t\t\tboolean hasConstants = false;", "+\t\t\t\t\t\thasConstants = true;", "+\t\t\t\t\t\tif (fieldDeclaration.initialization instanceof QualifiedAllocationExpression) {", "+\t\t\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tthis.scribe.printNewLine();\t\t\t\t", "+\t\t\t\t}\t\t\t", "+\t\t\tif (hasConstants) {", "+\t\t\t\tthis.scribe.printNewLine();\t", "+\t\t\t}"]}], "num": 54559}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8a4bd7e9d24dd2dff94d3892dbc897f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b437bfd5c37e0af925e81382486365f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "24cf489e4c973e29dff7eade9d41897f72a37db0", "commitAfterChange": "f924ed86fe1dbe148077a9cade20b11e404ba89b", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 33, "signatureBeforeChange": "  \tprivate void acceptTypes(Scope scope)", "signatureAfterChange": "  \tprivate void acceptTypes(Scope scope)", "diff": ["-\t\t\t\tif ((i % CHECK_CANCEL_FREQUENCY_IN_FIND_TYPES) == 0) checkCancel();", "+\t\t\t\tif ((i % CHECK_CANCEL_FREQUENCY) == 0) checkCancel();", "-\t\t\t\tthis.knownTypes.put(fullyQualifiedName, this);", "+\t\t\t\tthis.knownTypes.put(fullyQualifiedName, KNOWN_TYPE_WITH_UNKNOWN_CONSTRUCTORS);", "+\t\t\t\tif ((i % CHECK_CANCEL_FREQUENCY) == 0) checkCancel();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7ac30d6ea1f7dbdef8696e70a7c4d25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "2548efb91bb743c25fd3bab3833473b467f314a0", "commitAfterChange": "f4a6a4aada4b614e2acc0db0bdcfb1edac95da6d", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tprivate void acceptTypes(Scope scope)", "signatureAfterChange": "  \tprivate void acceptTypes(Scope scope)", "diff": ["-", "-\tprivate void acceptTypes(Scope scope) {", "-\t\tif(this.acceptedTypes == null) return;", "-", "-\t\tint length = this.acceptedTypes.size();", "-", "-\t\tif(length == 0) return;", "-", "-\t\tHashtableOfObject onDemandFound = new HashtableOfObject();", "-", "-\t\tnext : for (int i = 0; i < length; i++) {", "-\t\t\tAcceptedType acceptedType = (AcceptedType)this.acceptedTypes.elementAt(i);", "-\t\t\tchar[] packageName = acceptedType.packageName;", "-\t\t\tchar[] simpleTypeName = acceptedType.simpleTypeName;", "-\t\t\tchar[][] enclosingTypeNames = acceptedType.enclosingTypeNames;", "-\t\t\tint modifiers = acceptedType.modifiers;", "-\t\t\tint accessibility = acceptedType.accessibility;", "-", "-\t\t\tchar[] typeName;", "-\t\t\tchar[] flatEnclosingTypeNames;", "-\t\t\tif(enclosingTypeNames == null || enclosingTypeNames.length == 0) {", "-\t\t\t\tflatEnclosingTypeNames = null;", "-\t\t\t\ttypeName = simpleTypeName;", "-\t\t\t} else {", "-\t\t\t\tflatEnclosingTypeNames = CharOperation.concatWith(acceptedType.enclosingTypeNames, '.');", "-\t\t\t\ttypeName = CharOperation.concat(flatEnclosingTypeNames, simpleTypeName, '.');", "-\t\t\t}", "-\t\t\tchar[] fullyQualifiedName = CharOperation.concat(packageName, typeName, '.');", "-", "-\t\t\tif (this.knownTypes.containsKey(fullyQualifiedName)) continue next;", "-", "-\t\t\tthis.knownTypes.put(fullyQualifiedName, this);", "-", "-\t\t\tif (this.resolvingImports) {", "-\t\t\t\tif(this.compilerOptions.complianceLevel >= ClassFileConstants.JDK1_4 && packageName.length == 0) {", "-\t\t\t\t\tcontinue next; // import of default package is forbidden when compliance is 1.4 or higher", "-\t\t\t\t}", "-", "-\t\t\t\tchar[] completionName = this.insideQualifiedReference ? simpleTypeName : fullyQualifiedName;", "-", "-\t\t\t\tif(this.resolvingStaticImports) {", "-\t\t\t\t\tif(enclosingTypeNames == null || enclosingTypeNames.length == 0) {", "-\t\t\t\t\t\tcompletionName = CharOperation.concat(completionName, new char[] { '.' });", "-\t\t\t\t\t} else if ((modifiers & ClassFileConstants.AccStatic) == 0) {", "-\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcompletionName = CharOperation.concat(completionName, new char[] { ';' });", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tcompletionName = CharOperation.concat(completionName, new char[] { ';' });", "-\t\t\t\t}", "-", "-\t\t\t\tint relevance = computeBaseRelevance();", "-\t\t\t\trelevance += computeRelevanceForResolution();", "-\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\t\t\trelevance += computeRelevanceForRestrictions(accessibility);", "-\t\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, simpleTypeName);", "-", "-\t\t\t\tthis.noProposal = false;", "-\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t\tcreateTypeProposal(packageName, typeName, modifiers, accessibility, completionName, relevance);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif(!this.importCachesInitialized) {", "-\t\t\t\t\tinitializeImportCaches();", "-\t\t\t\t}", "-", "-\t\t\t\tfor (int j = 0; j < this.importCacheCount; j++) {", "-\t\t\t\t\tchar[][] importName = this.importsCache[j];", "-\t\t\t\t\tif(CharOperation.equals(typeName, importName[0])) {", "-\t\t\t\t\t\tproposeType(", "-\t\t\t\t\t\t\t\tpackageName,", "-\t\t\t\t\t\t\t\tsimpleTypeName,", "-\t\t\t\t\t\t\t\tmodifiers,", "-\t\t\t\t\t\t\t\taccessibility,", "-\t\t\t\t\t\t\t\ttypeName,", "-\t\t\t\t\t\t\t\tfullyQualifiedName,", "-\t\t\t\t\t\t\t\t!CharOperation.equals(fullyQualifiedName, importName[1]),", "-\t\t\t\t\t\t\t\tscope);", "-\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-", "-", "-\t\t\t\tif ((enclosingTypeNames == null || enclosingTypeNames.length == 0 ) && CharOperation.equals(this.currentPackageName, packageName)) {", "-\t\t\t\t\tproposeType(", "-\t\t\t\t\t\t\tpackageName,", "-\t\t\t\t\t\t\tsimpleTypeName,", "-\t\t\t\t\t\t\tmodifiers,", "-\t\t\t\t\t\t\taccessibility,", "-\t\t\t\t\t\t\ttypeName,", "-\t\t\t\t\t\t\tfullyQualifiedName,", "-\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\tscope);", "-\t\t\t\t\tcontinue next;", "-\t\t\t\t} else {", "-\t\t\t\t\tchar[] fullyQualifiedEnclosingTypeOrPackageName = null;", "-", "-\t\t\t\t\tAcceptedType foundType = null;", "-\t\t\t\t\tif((foundType = (AcceptedType)onDemandFound.get(simpleTypeName)) == null) {", "-\t\t\t\t\t\tfor (int j = 0; j < this.onDemandImportCacheCount; j++) {", "-\t\t\t\t\t\t\tImportBinding importBinding = this.onDemandImportsCache[j];", "-", "-\t\t\t\t\t\t\tchar[][] importName = importBinding.compoundName;", "-\t\t\t\t\t\t\tchar[] importFlatName = CharOperation.concatWith(importName, '.');", "-", "-\t\t\t\t\t\t\tif(fullyQualifiedEnclosingTypeOrPackageName == null) {", "-\t\t\t\t\t\t\t\tif(enclosingTypeNames != null && enclosingTypeNames.length != 0) {", "-\t\t\t\t\t\t\t\t\tfullyQualifiedEnclosingTypeOrPackageName =", "-\t\t\t\t\t\t\t\t\t\tCharOperation.concat(", "-\t\t\t\t\t\t\t\t\t\t\t\tpackageName,", "-\t\t\t\t\t\t\t\t\t\t\t\tflatEnclosingTypeNames,", "-\t\t\t\t\t\t\t\t\t\t\t\t'.');", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tfullyQualifiedEnclosingTypeOrPackageName =", "-\t\t\t\t\t\t\t\t\t\tpackageName;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif(CharOperation.equals(fullyQualifiedEnclosingTypeOrPackageName, importFlatName)) {", "-\t\t\t\t\t\t\t\tif(importBinding.isStatic()) {", "-\t\t\t\t\t\t\t\t\tif((modifiers & ClassFileConstants.AccStatic) != 0) {", "-\t\t\t\t\t\t\t\t\t\tacceptedType.qualifiedTypeName = typeName;", "-\t\t\t\t\t\t\t\t\t\tacceptedType.fullyQualifiedName = fullyQualifiedName;", "-\t\t\t\t\t\t\t\t\t\tonDemandFound.put(", "-\t\t\t\t\t\t\t\t\t\t\t\tsimpleTypeName,", "-\t\t\t\t\t\t\t\t\t\t\t\tacceptedType);", "-\t\t\t\t\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tacceptedType.qualifiedTypeName = typeName;", "-\t\t\t\t\t\t\t\t\tacceptedType.fullyQualifiedName = fullyQualifiedName;", "-\t\t\t\t\t\t\t\t\tonDemandFound.put(", "-\t\t\t\t\t\t\t\t\t\t\tsimpleTypeName,", "-\t\t\t\t\t\t\t\t\t\t\tacceptedType);", "-\t\t\t\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else if(!foundType.mustBeQualified){", "-\t\t\t\t\t\tdone : for (int j = 0; j < this.onDemandImportCacheCount; j++) {", "-\t\t\t\t\t\t\tImportBinding importBinding = this.onDemandImportsCache[j];", "-", "-\t\t\t\t\t\t\tchar[][] importName = importBinding.compoundName;", "-\t\t\t\t\t\t\tchar[] importFlatName = CharOperation.concatWith(importName, '.');", "-", "-\t\t\t\t\t\t\tif(fullyQualifiedEnclosingTypeOrPackageName == null) {", "-\t\t\t\t\t\t\t\tif(enclosingTypeNames != null && enclosingTypeNames.length != 0) {", "-\t\t\t\t\t\t\t\t\tfullyQualifiedEnclosingTypeOrPackageName =", "-\t\t\t\t\t\t\t\t\t\tCharOperation.concat(", "-\t\t\t\t\t\t\t\t\t\t\t\tpackageName,", "-\t\t\t\t\t\t\t\t\t\t\t\tflatEnclosingTypeNames,", "-\t\t\t\t\t\t\t\t\t\t\t\t'.');", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tfullyQualifiedEnclosingTypeOrPackageName =", "-\t\t\t\t\t\t\t\t\t\tpackageName;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif(CharOperation.equals(fullyQualifiedEnclosingTypeOrPackageName, importFlatName)) {", "-\t\t\t\t\t\t\t\tif(importBinding.isStatic()) {", "-\t\t\t\t\t\t\t\t\tif((modifiers & ClassFileConstants.AccStatic) != 0) {", "-\t\t\t\t\t\t\t\t\t\tfoundType.mustBeQualified = true;", "-\t\t\t\t\t\t\t\t\t\tbreak done;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tfoundType.mustBeQualified = true;", "-\t\t\t\t\t\t\t\t\tbreak done;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tproposeType(", "-\t\t\t\t\t\t\tpackageName,", "-\t\t\t\t\t\t\tsimpleTypeName,", "-\t\t\t\t\t\t\tmodifiers,", "-\t\t\t\t\t\t\taccessibility,", "-\t\t\t\t\t\t\ttypeName,", "-\t\t\t\t\t\t\tfullyQualifiedName,", "-\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\tscope);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tchar[][] keys = onDemandFound.keyTable;", "-\t\tObject[] values = onDemandFound.valueTable;", "-\t\tint max = keys.length;", "-\t\tfor (int i = 0; i < max; i++) {", "-\t\t\tif(keys[i] != null) {", "-\t\t\t\tAcceptedType value = (AcceptedType) values[i];", "-\t\t\t\tif(value != null) {", "-\t\t\t\t\tproposeType(", "-\t\t\t\t\t\t\tvalue.packageName,", "-\t\t\t\t\t\t\tvalue.simpleTypeName,", "-\t\t\t\t\t\t\tvalue.modifiers,", "-\t\t\t\t\t\t\tvalue.accessibility,", "-\t\t\t\t\t\t\tvalue.qualifiedTypeName,", "-\t\t\t\t\t\t\tvalue.fullyQualifiedName,", "-\t\t\t\t\t\t\tvalue.mustBeQualified,", "-\t\t\t\t\t\t\tscope);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tthis.acceptedTypes = null; // reset", "-\t}", "+", "+\tprivate void acceptTypes(Scope scope) {", "+\t\tif(this.acceptedTypes == null) return;", "+", "+\t\tint length = this.acceptedTypes.size();", "+", "+\t\tif(length == 0) return;", "+", "+\t\tHashtableOfObject onDemandFound = new HashtableOfObject();", "+\t\t", "+\t\ttry {", "+\t\t\tnext : for (int i = 0; i < length; i++) {", "+\t\t\t\t", "+\t\t\t\t// does not check cancellation for every types to avoid performance loss", "+\t\t\t\tif ((i % CHECK_CANCEL_FREQUENCY_IN_FIND_TYPES) == 0) checkCancel();", "+\t\t\t\t", "+\t\t\t\tAcceptedType acceptedType = (AcceptedType)this.acceptedTypes.elementAt(i);", "+\t\t\t\tchar[] packageName = acceptedType.packageName;", "+\t\t\t\tchar[] simpleTypeName = acceptedType.simpleTypeName;", "+\t\t\t\tchar[][] enclosingTypeNames = acceptedType.enclosingTypeNames;", "+\t\t\t\tint modifiers = acceptedType.modifiers;", "+\t\t\t\tint accessibility = acceptedType.accessibility;", "+\t", "+\t\t\t\tchar[] typeName;", "+\t\t\t\tchar[] flatEnclosingTypeNames;", "+\t\t\t\tif(enclosingTypeNames == null || enclosingTypeNames.length == 0) {", "+\t\t\t\t\tflatEnclosingTypeNames = null;", "+\t\t\t\t\ttypeName = simpleTypeName;", "+\t\t\t\t} else {", "+\t\t\t\t\tflatEnclosingTypeNames = CharOperation.concatWith(acceptedType.enclosingTypeNames, '.');", "+\t\t\t\t\ttypeName = CharOperation.concat(flatEnclosingTypeNames, simpleTypeName, '.');", "+\t\t\t\t}", "+\t\t\t\tchar[] fullyQualifiedName = CharOperation.concat(packageName, typeName, '.');", "+\t", "+\t\t\t\tif (this.knownTypes.containsKey(fullyQualifiedName)) continue next;", "+\t", "+\t\t\t\tthis.knownTypes.put(fullyQualifiedName, this);", "+\t", "+\t\t\t\tif (this.resolvingImports) {", "+\t\t\t\t\tif(this.compilerOptions.complianceLevel >= ClassFileConstants.JDK1_4 && packageName.length == 0) {", "+\t\t\t\t\t\tcontinue next; // import of default package is forbidden when compliance is 1.4 or higher", "+\t\t\t\t\t}", "+\t", "+\t\t\t\t\tchar[] completionName = this.insideQualifiedReference ? simpleTypeName : fullyQualifiedName;", "+\t", "+\t\t\t\t\tif(this.resolvingStaticImports) {", "+\t\t\t\t\t\tif(enclosingTypeNames == null || enclosingTypeNames.length == 0) {", "+\t\t\t\t\t\t\tcompletionName = CharOperation.concat(completionName, new char[] { '.' });", "+\t\t\t\t\t\t} else if ((modifiers & ClassFileConstants.AccStatic) == 0) {", "+\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcompletionName = CharOperation.concat(completionName, new char[] { ';' });", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcompletionName = CharOperation.concat(completionName, new char[] { ';' });", "+\t\t\t\t\t}", "+\t", "+\t\t\t\t\tint relevance = computeBaseRelevance();", "+\t\t\t\t\trelevance += computeRelevanceForResolution();", "+\t\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "+\t\t\t\t\trelevance += computeRelevanceForRestrictions(accessibility);", "+\t\t\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, simpleTypeName);", "+\t", "+\t\t\t\t\tthis.noProposal = false;", "+\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\t\tcreateTypeProposal(packageName, typeName, modifiers, accessibility, completionName, relevance);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif(!this.importCachesInitialized) {", "+\t\t\t\t\t\tinitializeImportCaches();", "+\t\t\t\t\t}", "+\t", "+\t\t\t\t\tfor (int j = 0; j < this.importCacheCount; j++) {", "+\t\t\t\t\t\tchar[][] importName = this.importsCache[j];", "+\t\t\t\t\t\tif(CharOperation.equals(typeName, importName[0])) {", "+\t\t\t\t\t\t\tproposeType(", "+\t\t\t\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\t\t\t\tsimpleTypeName,", "+\t\t\t\t\t\t\t\t\tmodifiers,", "+\t\t\t\t\t\t\t\t\taccessibility,", "+\t\t\t\t\t\t\t\t\ttypeName,", "+\t\t\t\t\t\t\t\t\tfullyQualifiedName,", "+\t\t\t\t\t\t\t\t\t!CharOperation.equals(fullyQualifiedName, importName[1]),", "+\t\t\t\t\t\t\t\t\tscope);", "+\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t", "+\t", "+\t\t\t\t\tif ((enclosingTypeNames == null || enclosingTypeNames.length == 0 ) && CharOperation.equals(this.currentPackageName, packageName)) {", "+\t\t\t\t\t\tproposeType(", "+\t\t\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\t\t\tsimpleTypeName,", "+\t\t\t\t\t\t\t\tmodifiers,", "+\t\t\t\t\t\t\t\taccessibility,", "+\t\t\t\t\t\t\t\ttypeName,", "+\t\t\t\t\t\t\t\tfullyQualifiedName,", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\tscope);", "+\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tchar[] fullyQualifiedEnclosingTypeOrPackageName = null;", "+\t", "+\t\t\t\t\t\tAcceptedType foundType = null;", "+\t\t\t\t\t\tif((foundType = (AcceptedType)onDemandFound.get(simpleTypeName)) == null) {", "+\t\t\t\t\t\t\tfor (int j = 0; j < this.onDemandImportCacheCount; j++) {", "+\t\t\t\t\t\t\t\tImportBinding importBinding = this.onDemandImportsCache[j];", "+\t", "+\t\t\t\t\t\t\t\tchar[][] importName = importBinding.compoundName;", "+\t\t\t\t\t\t\t\tchar[] importFlatName = CharOperation.concatWith(importName, '.');", "+\t", "+\t\t\t\t\t\t\t\tif(fullyQualifiedEnclosingTypeOrPackageName == null) {", "+\t\t\t\t\t\t\t\t\tif(enclosingTypeNames != null && enclosingTypeNames.length != 0) {", "+\t\t\t\t\t\t\t\t\t\tfullyQualifiedEnclosingTypeOrPackageName =", "+\t\t\t\t\t\t\t\t\t\t\tCharOperation.concat(", "+\t\t\t\t\t\t\t\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\t\t\t\t\t\t\t\tflatEnclosingTypeNames,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t'.');", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tfullyQualifiedEnclosingTypeOrPackageName =", "+\t\t\t\t\t\t\t\t\t\t\tpackageName;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif(CharOperation.equals(fullyQualifiedEnclosingTypeOrPackageName, importFlatName)) {", "+\t\t\t\t\t\t\t\t\tif(importBinding.isStatic()) {", "+\t\t\t\t\t\t\t\t\t\tif((modifiers & ClassFileConstants.AccStatic) != 0) {", "+\t\t\t\t\t\t\t\t\t\t\tacceptedType.qualifiedTypeName = typeName;", "+\t\t\t\t\t\t\t\t\t\t\tacceptedType.fullyQualifiedName = fullyQualifiedName;", "+\t\t\t\t\t\t\t\t\t\t\tonDemandFound.put(", "+\t\t\t\t\t\t\t\t\t\t\t\t\tsimpleTypeName,", "+\t\t\t\t\t\t\t\t\t\t\t\t\tacceptedType);", "+\t\t\t\t\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tacceptedType.qualifiedTypeName = typeName;", "+\t\t\t\t\t\t\t\t\t\tacceptedType.fullyQualifiedName = fullyQualifiedName;", "+\t\t\t\t\t\t\t\t\t\tonDemandFound.put(", "+\t\t\t\t\t\t\t\t\t\t\t\tsimpleTypeName,", "+\t\t\t\t\t\t\t\t\t\t\t\tacceptedType);", "+\t\t\t\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if(!foundType.mustBeQualified){", "+\t\t\t\t\t\t\tdone : for (int j = 0; j < this.onDemandImportCacheCount; j++) {", "+\t\t\t\t\t\t\t\tImportBinding importBinding = this.onDemandImportsCache[j];", "+\t", "+\t\t\t\t\t\t\t\tchar[][] importName = importBinding.compoundName;", "+\t\t\t\t\t\t\t\tchar[] importFlatName = CharOperation.concatWith(importName, '.');", "+\t", "+\t\t\t\t\t\t\t\tif(fullyQualifiedEnclosingTypeOrPackageName == null) {", "+\t\t\t\t\t\t\t\t\tif(enclosingTypeNames != null && enclosingTypeNames.length != 0) {", "+\t\t\t\t\t\t\t\t\t\tfullyQualifiedEnclosingTypeOrPackageName =", "+\t\t\t\t\t\t\t\t\t\t\tCharOperation.concat(", "+\t\t\t\t\t\t\t\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\t\t\t\t\t\t\t\tflatEnclosingTypeNames,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t'.');", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tfullyQualifiedEnclosingTypeOrPackageName =", "+\t\t\t\t\t\t\t\t\t\t\tpackageName;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif(CharOperation.equals(fullyQualifiedEnclosingTypeOrPackageName, importFlatName)) {", "+\t\t\t\t\t\t\t\t\tif(importBinding.isStatic()) {", "+\t\t\t\t\t\t\t\t\t\tif((modifiers & ClassFileConstants.AccStatic) != 0) {", "+\t\t\t\t\t\t\t\t\t\t\tfoundType.mustBeQualified = true;", "+\t\t\t\t\t\t\t\t\t\t\tbreak done;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tfoundType.mustBeQualified = true;", "+\t\t\t\t\t\t\t\t\t\tbreak done;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tproposeType(", "+\t\t\t\t\t\t\t\tpackageName,", "+\t\t\t\t\t\t\t\tsimpleTypeName,", "+\t\t\t\t\t\t\t\tmodifiers,", "+\t\t\t\t\t\t\t\taccessibility,", "+\t\t\t\t\t\t\t\ttypeName,", "+\t\t\t\t\t\t\t\tfullyQualifiedName,", "+\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\tscope);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t", "+\t\t\tchar[][] keys = onDemandFound.keyTable;", "+\t\t\tObject[] values = onDemandFound.valueTable;", "+\t\t\tint max = keys.length;", "+\t\t\tfor (int i = 0; i < max; i++) {", "+\t\t\t\tif(keys[i] != null) {", "+\t\t\t\t\tAcceptedType value = (AcceptedType) values[i];", "+\t\t\t\t\tif(value != null) {", "+\t\t\t\t\t\tproposeType(", "+\t\t\t\t\t\t\t\tvalue.packageName,", "+\t\t\t\t\t\t\t\tvalue.simpleTypeName,", "+\t\t\t\t\t\t\t\tvalue.modifiers,", "+\t\t\t\t\t\t\t\tvalue.accessibility,", "+\t\t\t\t\t\t\t\tvalue.qualifiedTypeName,", "+\t\t\t\t\t\t\t\tvalue.fullyQualifiedName,", "+\t\t\t\t\t\t\t\tvalue.mustBeQualified,", "+\t\t\t\t\t\t\t\tscope);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} finally {", "+\t\t\tthis.acceptedTypes = null; // reset", "+\t\t}", "+\t}"]}], "num": 54255}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "611c6d41fa1e18fc7c07470c871eb8da", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15ba4d945080961fb1fdadbc25093ffe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 527, "methodNumberAfterChange": 527, "signatureBeforeChange": "\t\t\t \tpublic void test523()", "signatureAfterChange": "\t\t\t \tpublic void test523()", "diff": ["-\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tM m = new M();\\n\" + ", "+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"Type safety: X.M is a raw type. References to generic type X.M<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tM m = new M();\\n\" + ", "+\t\t\t\"\t          ^\\n\" + ", "+\t\t\t\"Type safety: X.M is a raw type. References to generic type X.M<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2de6d0325a235c1d0765b8a34cb1a256", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 833, "methodNumberAfterChange": 833, "signatureBeforeChange": " public void test827()", "signatureAfterChange": " public void test827()", "diff": ["-\t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tX t1 = new X();\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tX t1 = new X();\\n\" + ", "+\t\t\"\t           ^\\n\" + ", "+\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 10)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3308aaea931f63b30e031db1f5655c41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 327, "methodNumberAfterChange": 327, "signatureBeforeChange": " \tpublic void test323()", "signatureAfterChange": " \tpublic void test323()", "diff": ["-\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tG<String> g = new G();\\n\" + ", "+\t\t\t\"\t                  ^\\n\" + ", "+\t\t\t\"Type safety: G is a raw type. References to generic type G<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tG.Member gm = null;\\n\" + ", "+\t\t\t\"\t^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: G.Member is a raw type. References to generic type G<T>.Member should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 9)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34a6f67596405a72b231e981967f31b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "ddf48a7e21056eecd0111cd750a59c8617c397eb", "commitAfterChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tpublic void _testNullTypeInference3c()", "signatureAfterChange": " \tpublic void testNullTypeInference3c()", "diff": ["-\tpublic void _testNullTypeInference3c() { ", "+\tpublic void testNullTypeInference3c() { ", "-\t\t\t\"1. ERROR in Generics.java (at line 14)\\n\" + ", "+\t\t\t\"1. WARNING in Generics.java (at line 13)\\n\" + ", "+\t\t\t\"\tCollection<@Nullable String> result = map1(inList, f);\\n\" + ", "+\t\t\t\"\t                                           ^^^^^^\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'@NonNull List<Object>\\' needs unchecked conversion to conform to \\'Collection<@NonNull Object>\\'\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in Generics.java (at line 14)\\n\" + ", "-\t\t\t\"Contradictory null annotations: method was inferred as \\'Collection<@NonNull String> map2(Collection<@NonNull @Nullable Object>, Function<@NonNull @Nullable Object,@NonNull String>)\\', but only one of \\'@NonNull\\' and \\'@Nullable\\' can be effective at any location\\n\" + ", "+\t\t\t\"Null type safety (type annotations): The expression of type \\'@NonNull List<Object>\\' needs unchecked conversion to conform to \\'Collection<@Nullable Object>\\'\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in Generics.java (at line 14)\\n\" + ", "+\t\t\t\"\tmap2(inList, f);\\n\" + ", "+\t\t\t\"\t             ^\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required \\'Function<@Nullable Object,@NonNull String>\\' but this expression has type \\'MyFunc\\', corresponding supertype is \\'Function<@NonNull Object,@Nullable String>\\'\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "359492e2a188e9620b19e25abb93f157", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 278, "methodNumberAfterChange": 278, "signatureBeforeChange": " \tpublic void test274()", "signatureAfterChange": " \tpublic void test274()", "diff": ["-\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic List useList(List l) {\\n\" + ", "+\t\t\t\"\t       ^^^^\\n\" + ", "+\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic List useList(List l) {\\n\" + ", "+\t\t\t\"\t                    ^^^^\\n\" + ", "+\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46b1dd9a835d995b578772edd4d34360", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 548, "methodNumberAfterChange": 548, "signatureBeforeChange": "\t\t \tpublic void test544()", "signatureAfterChange": "\t\t \tpublic void test544()", "diff": ["-\t\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tVector b = new Vector();\\n\" + ", "+\t\t\t\"\t^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Vector is a raw type. References to generic type Vector<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tVector b = new Vector();\\n\" + ", "+\t\t\t\"\t               ^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Vector is a raw type. References to generic type Vector<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 9)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94a00b0fae307a7709b36aa1f59dc9a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 543, "methodNumberAfterChange": 543, "signatureBeforeChange": " \tpublic void test539()", "signatureAfterChange": " \tpublic void test539()", "diff": ["-\t\t\t\"2. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tB b = new B();\\n\" + ", "+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"Type safety: X.B is a raw type. References to generic type X.B<C> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tB b = new B();\\n\" + ", "+\t\t\t\"\t          ^\\n\" + ", "+\t\t\t\"Type safety: X.B is a raw type. References to generic type X.B<C> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 14)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 14)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1b914635f6f23f8f7228d6b8c6dc45f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/FlowAnalysisTest.java", "commitBeforeChange": "3307a3b21f8472cc998512e9e4cd5afdd4f17b52", "commitAfterChange": "b155f47580a90f694a899aae6d06a1ff29f450b8", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " public void test048()", "signatureAfterChange": " public void test048()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 5)\\n\" +", "-\t\t\"\tlabel: while (bar()) {\\n\" +", "-\t\t\"\t^^^^^\\n\" +", "-\t\t\"The label label is never explicitly referenced\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (b) {\\n\" + ", "+\t\t\"      label: while (bar()) {\\n\" + ", "+\t\t\"      }\\n\" + ", "+\t\t\"      return null;\\n\" + ", "+\t\t\"    }\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tlabel: while (bar()) {\\n\" + ", "+\t\t\"\t^^^^^\\n\" + ", "+\t\t\"The label label is never explicitly referenced\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1d0928aa8eeade4bb82d7c1460ea3af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 611, "methodNumberAfterChange": 611, "signatureBeforeChange": "\t\t \tpublic void test607()", "signatureAfterChange": "\t\t \tpublic void test607()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tCollections.sort (lComp);\t\t\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: Unchecked invocation sort(List<Comparable>) of the generic method sort(List<T>) of type Collections\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 15)\\n\" + ", "-\t\t\t\"\tCollections.sort (lStr);\\n\" + ", "-\t\t\t\"\t            ^^^^\\n\" + ", "-\t\t\t\"Bound mismatch: The generic method sort(List<T>) of type Collections is not applicable for the arguments (List<Comparable<String>>). The inferred type Comparable<String> is not a valid substitute for the bounded parameter <T extends Comparable<? super T>>\\n\" + ", "-\t\t\t\"----------\\n\");", "+            \"----------\\n\" + ", "+    \t\t\"1. WARNING in X.java (at line 10)\\n\" + ", "+    \t\t\"\tList<Comparable> lComp = new ArrayList<Comparable> ();\\n\" + ", "+    \t\t\"\t     ^^^^^^^^^^\\n\" + ", "+    \t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+    \t\t\"\tList<Comparable> lComp = new ArrayList<Comparable> ();\\n\" + ", "+    \t\t\"\t                                       ^^^^^^^^^^\\n\" + ", "+    \t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"3. WARNING in X.java (at line 11)\\n\" + ", "+    \t\t\"\tCollections.sort (lComp);\t\t\\n\" + ", "+    \t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+    \t\t\"Type safety: Unchecked invocation sort(List<Comparable>) of the generic method sort(List<T>) of type Collections\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"4. ERROR in X.java (at line 15)\\n\" + ", "+    \t\t\"\tCollections.sort (lStr);\\n\" + ", "+    \t\t\"\t            ^^^^\\n\" + ", "+    \t\t\"Bound mismatch: The generic method sort(List<T>) of type Collections is not applicable for the arguments (List<Comparable<String>>). The inferred type Comparable<String> is not a valid substitute for the bounded parameter <T extends Comparable<? super T>>\\n\" + ", "+    \t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfae5606db347e8c175760030f9dc345", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "925bd3d2cce975e2fc83ac113f8d3bc0c1c973f9", "commitAfterChange": "58de6f137d08c13c9fea4a7115d63c9a6f7786b6", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "\r \tpublic void test031() throws Exception", "signatureAfterChange": "\r \tpublic void test031() throws Exception", "diff": ["+\r", "+\t\t\t\t\t\"java/lang/annotation/ElementType.java\",\r", "+\t\t\t\t\t\"package java.lang.annotation;\\n\" +\r", "+\t\t\t\t\t\"public enum ElementType {\\n\" +\r", "+\t\t\t\t\t\"    TYPE,\\n\" +\r", "+\t\t\t\t\t\"    FIELD,\\n\" +\r", "+\t\t\t\t\t\"    METHOD,\\n\" +\r", "+\t\t\t\t\t\"    PARAMETER,\\n\" +\r", "+\t\t\t\t\t\"    CONSTRUCTOR,\\n\" +\r", "+\t\t\t\t\t\"    LOCAL_VARIABLE,\\n\" +\r", "+\t\t\t\t\t\"    ANNOTATION_TYPE,\\n\" +\r", "+\t\t\t\t\t\"    PACKAGE,\\n\" +\r", "+\t\t\t\t\t\"    TYPE_PARAMETER,\\n\" +\r", "+\t\t\t\t\t\"    TYPE_USE\\n\" +\r", "+\t\t\t\t\t\"}\\n\"\r", "-\t\t\t\t/* TODO(Srikanth/Jay) when JSR308 enabled runtime becomes available for testing, the first error message should be deleted. */\r", "-\t\t\t\t\"----------\\n\" + \r", "-\t\t\t\t\"1. ERROR in Marker.java (at line 3)\\n\" + \r", "-\t\t\t\t\"\t@Target(TYPE_USE)\\n\" + \r", "-\t\t\t\t\"\t        ^^^^^^^^\\n\" + \r", "-\t\t\t\t\"TYPE_USE cannot be resolved to a variable\\n\" + \r", "-\t\t\t\t\"----------\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6e6cf55404b8f12121d091e5ad193b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 563, "methodNumberAfterChange": 563, "signatureBeforeChange": " \tpublic void test559()", "signatureAfterChange": " \tpublic void test559()", "diff": ["-\t\t\t\"2. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tCell c= new Cell();\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"Type safety: Cell is a raw type. References to generic type Cell<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tCell c= new Cell();\\n\" + ", "+\t\t\t\"\t            ^^^^\\n\" + ", "+\t\t\t\"Type safety: Cell is a raw type. References to generic type Cell<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 15)\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 17)\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 17)\\n\" + "]}], "num": 66230}
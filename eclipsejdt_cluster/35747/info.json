{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57397d49aeb0f6832351d48a876df024", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34d49637c8b59215d285dea50e2e0dc5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "80ce338cef4ec1df54f1a30ce29ab099e3941f07", "commitAfterChange": "1f9df748d4bc9871ec3d99f4082748f0affb3af0", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t// perform capture conversion if read access", "-\treturn this.resolvedType = ", "-\t\t(((this.bits & IsStrictlyAssigned) == 0) ", "-\t\t\t? fieldBinding.type.capture(scope, this.sourceEnd)", "-\t\t\t: fieldBinding.type);", "+\tTypeBinding fieldType = fieldBinding.type;", "+\tif (fieldType != null && ((this.bits & IsStrictlyAssigned) == 0)) {", "+\t\tfieldType = fieldType.capture(scope, this.sourceEnd);\t// perform capture conversion if read access", "+\t}", "+\treturn this.resolvedType = fieldType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e14f5730a432a07592883210030cd774", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "4b1cb82b00b0f3c43755c37280deb732ae600c1a", "commitAfterChange": "1caf2b41c370e66c328190589dd64f01b35d7384", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void emulateOuterAccess(LocalVariableBinding outerLocalVariable)", "signatureAfterChange": " \tpublic void emulateOuterAccess(LocalVariableBinding outerLocalVariable)", "diff": ["-\t\tMethodScope currentMethodScope;", "-\t\tif ((currentMethodScope = this.methodScope())", "-\t\t\t!= outerLocalVariable.declaringScope.methodScope()) {", "+\t\tBlockScope outerVariableScope = outerLocalVariable.declaringScope;", "+\t\tif (outerVariableScope == null)", "+\t\t\treturn; // no need to further emulate as already inserted (val$this$0)", "+\t\tMethodScope currentMethodScope = this.methodScope();", "+\t\tif (outerVariableScope.methodScope() != currentMethodScope) {"]}], "num": 35747}
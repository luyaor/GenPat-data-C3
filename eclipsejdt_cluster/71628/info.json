{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3ecf5ab474db4ed77b2fffbd35df202", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "307240f0934f3e29355209cb507873d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "e749248b2d171474b4cec0b274f15c474b2172fa", "commitAfterChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " public void generateSyntheticEnclosingInstanceValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "signatureAfterChange": " public void generateSyntheticEnclosingInstanceValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "diff": ["-\t\t\t\tObject[] emulationPath = currentScope.getCompatibleEmulationPath(syntheticArgType);", "-\t\t\t\tif (emulationPath == null) {", "-\t\t\t\t\tcurrentScope.problemReporter().missingEnclosingInstanceSpecification(syntheticArgType, invocationSite);", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.generateOuterAccess(emulationPath, invocationSite, currentScope);", "-\t\t\t\t}", "+\t\t\t\tObject[] emulationPath = currentScope.getEmulationPath(", "+\t\t\t\t\tsyntheticArgType, ", "+\t\t\t\t\tfalse /*not only exact match (i.e. allow compatible)*/,", "+\t\t\t\t\ttargetType.isAnonymousType());", "+\t\t\t\tthis.generateOuterAccess(emulationPath, invocationSite, syntheticArgType, currentScope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31a6791a8728c63d52fd870a560eae8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "e749248b2d171474b4cec0b274f15c474b2172fa", "commitAfterChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": " public void generateSyntheticOuterArgumentValues(BlockScope currentScope, ReferenceBinding targetType, AstNode invocationSite)", "signatureAfterChange": " public void generateSyntheticOuterArgumentValues(BlockScope currentScope, ReferenceBinding targetType, AstNode invocationSite)", "diff": ["-\t\t\tVariableBinding[] emulationPath = currentScope.getEmulationPath(syntheticArguments[i].actualOuterLocalVariable);", "-\t\t\tif (emulationPath == null) {", "-\t\t\t\t// could not emulate a path to a given outer local variable (internal error)", "-\t\t\t\tcurrentScope.problemReporter().needImplementation();", "-\t\t\t} else {", "-\t\t\t\tthis.generateOuterAccess(emulationPath, invocationSite, currentScope);", "-\t\t\t}", "+\t\t\tLocalVariableBinding targetVariable = syntheticArguments[i].actualOuterLocalVariable;", "+\t\t\tVariableBinding[] emulationPath = currentScope.getEmulationPath(targetVariable);", "+\t\t\tthis.generateOuterAccess(emulationPath, invocationSite, targetVariable, currentScope);"]}], "num": 71628}
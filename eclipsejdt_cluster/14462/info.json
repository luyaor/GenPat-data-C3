{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad28d54d9d96e23bdadc9d141f952f80", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b81e6e06473f16ed77e1161958bfbbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "465181f1f61b658b5c010a5efd2a11b469b6f094", "commitAfterChange": "96da9a04d9ec9dc1f22c7aed0a42a67c5851c653", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tpublic IClasspathEntry[] getRawClasspath() throws JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getRawClasspath() throws JavaModelException", "diff": ["-\t\tIClasspathEntry[] classpath = null;", "-\t\tif (this.isOpen()) {", "-\t\t\tJavaProjectElementInfo info = getJavaProjectElementInfo();", "-\t\t\tclasspath = info.getRawClasspath();", "-\t\t\tif (classpath != null) {", "-\t\t\t\treturn classpath;", "-\t\t\t}", "-\t\t\treturn defaultClasspath();", "-\t\t}", "-\t\t// if not already opened, then read from file (avoid populating the model for CP question)", "-\t\tif (!this.getProject().exists()){", "-\t\t\tthrow newNotPresentException();", "-\t\t}", "+\t\tJavaModelManager.PerProjectInfo info = getJavaModelManager().getPerProjectInfoCheckExistence(fProject);", "+\t\tIClasspathEntry[] classpath = info.classpath;", "+\t\tif (classpath != null) return classpath;", "+\t\t\tinfo.classpath = classpath;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "670c3a3fd3df63f1562113fd451e5467", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "465181f1f61b658b5c010a5efd2a11b469b6f094", "commitAfterChange": "96da9a04d9ec9dc1f22c7aed0a42a67c5851c653", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError) \t\tthrows JavaModelException", "diff": ["-\t\tJavaProjectElementInfo projectInfo;", "-\t\tif (this.isOpen()){", "-\t\t\tprojectInfo = getJavaProjectElementInfo();", "-\t\t} else {", "-\t\t\t// avoid populating the model for only retrieving the resolved classpath (13395)", "-\t\t\tprojectInfo = null;", "-\t\t}", "+\t\tJavaModelManager.PerProjectInfo info = getJavaModelManager().getPerProjectInfoCheckExistence(fProject);", "-\t\tif (ignoreUnresolvedEntry && !generateMarkerOnError && projectInfo != null){", "+\t\tif (ignoreUnresolvedEntry && !generateMarkerOnError){", "-\t\t\tIClasspathEntry[] infoPath = projectInfo.lastResolvedClasspath;", "+\t\t\tIClasspathEntry[] infoPath = info.lastResolvedClasspath;", "-\t\tif (projectInfo != null){", "-\t\t\tprojectInfo.lastResolvedClasspath = resolvedPath;", "-\t\t}", "+\t\tinfo.lastResolvedClasspath = resolvedPath;"]}], "num": 14462}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e30519a2408df418c11ed292af7f9bd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88f1b20b89b8bd2d1fc1036bf1df4e7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "939026bc82336aff64b71f4dbbdc38f50f6da545", "commitAfterChange": "6467f6dd1cb134689a9fdd8d844169d55dd11609", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \t\tpublic void test025()", "signatureAfterChange": " \t\tpublic void test025()", "diff": ["+\t\t\tString path = ResourcesPlugin.getWorkspace().getRoot().getLocation().toOSString();", "+\t\t\tString libPath = null;", "+\t\t\tif (path.endsWith(File.separator)) {", "+\t\t\t\tlibPath = path + \"lib.jar\";", "+\t\t\t} else {", "+\t\t\t\tlibPath = path + File.separator + \"lib.jar\";", "+\t\t\t}", "+\t\t\tboolean jarCreated = false;", "+\t\t\ttry {", "+\t\t\t\tUtil.createJar(new String[] {", "+\t\t\t\t\t\t\"my/pkg/Zork.java\",", "+\t\t\t\t\t\t\"package my.pkg;\\n\" + ", "+\t\t\t\t\t\t\"public class Zork {\\n\" + ", "+\t\t\t\t\t\t\"}\",", "+\t\t\t\t\t},", "+\t\t\t\t\tlibPath,", "+\t\t\t\t\tJavaCore.VERSION_1_4);", "+\t\t\t\tjarCreated = true;", "+\t\t\t} catch (IOException e) {", "+\t\t\t\t// ignore", "+\t\t\t}", "-\t\t\t\t\t\t\"  sun.net.spi.nameservice.dns.DNSNameService dummy;\\n\" + ", "+\t\t\t\t\t\t\"  my.pkg.Zork dummy;\\n\" + ", "-\t\t\t\t+ \" -extdirs \\\"\" + getExtDirectory() + File.pathSeparator + OUTPUT_DIR +  File.separator + \"src1\\\"\" ", "+\t\t\t\t+ \" -extdirs \\\"\" + path + File.pathSeparator + OUTPUT_DIR +  File.separator + \"src1\\\"\" ", "-\t\t\t\t\"[parsing    ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java - #1/1]\\n\" + ", "-\t\t\t\t\"[parsing    ---OUTPUT_DIR_PLACEHOLDER---/src1/X.java - #2/2]\\n\" + ", "-\t\t\t\t\"[reading    java/lang/Object.class]\\n\" + ", "-\t\t\t\t\"[analyzing  ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java - #1/2]\\n\" + ", "-\t\t\t\t\"[writing    Y.class - #1]\\n\" + ", "-\t\t\t\t\"[completed  ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java - #1/2]\\n\" + ", "-\t\t\t\t\"[analyzing  ---OUTPUT_DIR_PLACEHOLDER---/src1/X.java - #2/2]\\n\" + ", "-\t\t\t\t\"[reading    sun/net/spi/nameservice/dns/DNSNameService.class]\\n\" + ", "-\t\t\t\t\"[writing    X.class - #2]\\n\" + ", "-\t\t\t\t\"[completed  ---OUTPUT_DIR_PLACEHOLDER---/src1/X.java - #2/2]\\n\" + ", "-\t\t\t\t\"[2 units compiled]\\n\" + ", "-\t\t\t\t\"[2 .class files generated]\\n\",", "+\t\t        \"[parsing    ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java - #1/1]\\n\" + ", "+\t\t        \"[parsing    ---OUTPUT_DIR_PLACEHOLDER---/src1/X.java - #2/2]\\n\" + ", "+\t\t        \"[reading    java/lang/Object.class]\\n\" + ", "+\t\t        \"[analyzing  ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java - #1/2]\\n\" + ", "+\t\t        \"[writing    Y.class - #1]\\n\" + ", "+\t\t        \"[completed  ---OUTPUT_DIR_PLACEHOLDER---/src2/Y.java - #1/2]\\n\" + ", "+\t\t        \"[analyzing  ---OUTPUT_DIR_PLACEHOLDER---/src1/X.java - #2/2]\\n\" + ", "+\t\t        \"[reading    my/pkg/Zork.class]\\n\" + ", "+\t\t        \"[writing    X.class - #2]\\n\" + ", "+\t\t        \"[completed  ---OUTPUT_DIR_PLACEHOLDER---/src1/X.java - #2/2]\\n\" + ", "+\t\t        \"[2 units compiled]\\n\" + ", "+\t\t        \"[2 .class files generated]\\n\",", "+\t\t\tif (jarCreated) {", "+\t\t\t\tnew File(libPath).delete();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cf018cf7df8a45e0aba0ede99de5224", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "d45a6d72ecac1399ae839b8bb0faf0b4626c38b4", "commitAfterChange": "ea3771830307a556e22215a6aa94c2a020dd70b2", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " \tpublic String getSharedProperty(String key) throws CoreException", "signatureAfterChange": " \tpublic String getSharedProperty(String key) throws CoreException", "diff": ["+\t\t} else {", "+\t\t\t// when a project is imported, we get a first delta for the addition of the .project, but the .classpath is not accessible", "+\t\t\t// so default to using java.io.File", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=96258", "+\t\t\tFile file  = rscFile.getLocation().toFile();", "+\t\t\tif (file.exists()) {", "+\t\t\t\tbyte[] bytes;", "+\t\t\t\ttry {", "+\t\t\t\t\tbytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(file);", "+\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\ttry {", "+\t\t\t\t\tproperty = new String(bytes, \"UTF-8\"); //$NON-NLS-1$ // .classpath always encoded with UTF-8", "+\t\t\t\t} catch (UnsupportedEncodingException e) {", "+\t\t\t\t\tUtil.log(e, \"Could not read .classpath with UTF-8 encoding\"); //$NON-NLS-1$", "+\t\t\t\t\t// fallback to default", "+\t\t\t\t\tproperty = new String(bytes);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e41633b8360484700b5f83d702134fb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "54beaf9a0ac7e8e91c308765e4aff36ce5749605", "commitAfterChange": "2ad8f0c7463e2025ec9e28003dc9e376c4e0c20f", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": " \tpublic boolean visit( \t\tMethodDeclaration methodDeclaration, \t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tMethodDeclaration methodDeclaration, \t\tClassScope scope)", "diff": ["-        /*", "-         * Print comments to get proper line number", "-         */", "-        this.scribe.printComment();", "-        int line = this.scribe.line;", "-", "-        this.scribe.printModifiers(methodDeclaration.annotations, this, ICodeFormatterConstants.ANNOTATION_ON_MEMBER);", "-", "-\t\tif (this.scribe.line > line) {", "-        \t// annotations introduced new line, but this is not a line wrapping", "-\t\t\t// see 158267", "-\t\t\tline = this.scribe.line;", "-\t\t}", "-\t\tthis.scribe.space();", "-", "-\t\tTypeParameter[] typeParameters = methodDeclaration.typeParameters;", "-\t\tif (typeParameters != null) {", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_type_parameters);", "-\t\t\tif (this.preferences.insert_space_after_opening_angle_bracket_in_type_parameters) {", "-\t\t\t\tthis.scribe.space();", "-\t\t\t}", "-\t\t\tint length = typeParameters.length;", "-\t\t\tfor (int i = 0; i < length - 1; i++) {", "-\t\t\t\ttypeParameters[i].traverse(this, methodDeclaration.scope);", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_type_parameters);", "-\t\t\t\tif (this.preferences.insert_space_after_comma_in_type_parameters) {", "-\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\ttypeParameters[length - 1].traverse(this, methodDeclaration.scope);", "-\t\t\tif (isClosingGenericToken()) {", "-\t\t\t\tthis.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_type_parameters);", "-\t\t\t}", "-\t\t\tif (this.preferences.insert_space_after_closing_angle_bracket_in_type_parameters) {", "-\t\t\t\tthis.scribe.space();", "-\t\t\t}", "-\t\t}", "-", "-\t\t * Print the method return type", "+\t\t * Print comments to get proper line number", "-\t\tfinal TypeReference returnType = methodDeclaration.returnType;", "+\t\tthis.scribe.printComment();", "+\t\tint line = this.scribe.line;", "+", "+\t\t// Create alignment", "+\t\tAlignment methodDeclAlignment = this.scribe.createAlignment(", "+\t\t\t\t\"methodDeclaration\",//$NON-NLS-1$", "+\t\t\t\tthis.preferences.alignment_for_method_declaration,", "+\t\t\t\tAlignment.R_INNERMOST,", "+\t\t\t\t3,", "+\t\t\t\tthis.scribe.scanner.currentPosition);", "+\t\tthis.scribe.enterAlignment(methodDeclAlignment);", "+\t\tboolean ok = false;", "+\t\tdo {", "+\t\t\ttry {", "-\t\tif (returnType != null) {", "-\t\t\treturnType.traverse(this, methodDeclarationScope);", "-\t\t}", "-\t\t/*", "-\t\t * Print the method name", "-\t\t */", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true);", "+\t\t\t\tthis.scribe.printModifiers(methodDeclaration.annotations, this, ICodeFormatterConstants.ANNOTATION_ON_MEMBER);", "+\t\t\t\tint fragmentIndex = 0;", "+\t\t\t\tthis.scribe.alignFragment(methodDeclAlignment, fragmentIndex);", "-\t\tformatMethodArguments(", "-\t\t\tmethodDeclaration,", "-\t\t\tthis.preferences.insert_space_before_opening_paren_in_method_declaration,", "-\t\t\tthis.preferences.insert_space_between_empty_parens_in_method_declaration,", "-\t\t\tthis.preferences.insert_space_before_closing_paren_in_method_declaration,", "-\t\t\tthis.preferences.insert_space_after_opening_paren_in_method_declaration,", "-\t\t\tthis.preferences.insert_space_before_comma_in_method_declaration_parameters,", "-\t\t\tthis.preferences.insert_space_after_comma_in_method_declaration_parameters,", "-\t\t\tthis.preferences.alignment_for_parameters_in_method_declaration);", "+\t\t\t\tif (this.scribe.line > line) {", "+\t\t\t\t\t// annotations introduced new line, but this is not a line wrapping", "+\t\t\t\t\t// see 158267", "+\t\t\t\t\tline = this.scribe.line;", "+\t\t\t\t}", "+\t\t\t\tthis.scribe.space();", "-\t\t/*", "-\t\t * Check for extra dimensions", "-\t\t */", "-\t\tint extraDimensions = getDimensions();", "-\t\tif (extraDimensions != 0) {", "-\t\t\t for (int i = 0; i < extraDimensions; i++) {", "-\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "-\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "-\t\t\t }", "-\t\t}", "+\t\t\t\tTypeParameter[] typeParameters = methodDeclaration.typeParameters;", "+\t\t\t\tif (typeParameters != null) {", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_type_parameters);", "+\t\t\t\t\tif (this.preferences.insert_space_after_opening_angle_bracket_in_type_parameters) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t\tint length = typeParameters.length;", "+\t\t\t\t\tfor (int i = 0; i < length - 1; i++) {", "+\t\t\t\t\t\ttypeParameters[i].traverse(this, methodDeclaration.scope);", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_type_parameters);", "+\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_type_parameters) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\ttypeParameters[length - 1].traverse(this, methodDeclaration.scope);", "+\t\t\t\t\tif (isClosingGenericToken()) {", "+\t\t\t\t\t\tthis.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_type_parameters);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (this.preferences.insert_space_after_closing_angle_bracket_in_type_parameters) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.scribe.alignFragment(methodDeclAlignment, ++fragmentIndex);", "+\t\t\t\t}", "-\t\tformatThrowsClause(", "-\t\t\tmethodDeclaration,", "-\t\t\tthis.preferences.insert_space_before_comma_in_method_declaration_throws,", "-\t\t\tthis.preferences.insert_space_after_comma_in_method_declaration_throws,", "-\t\t\tthis.preferences.alignment_for_throws_clause_in_method_declaration);", "+\t\t\t\t/*", "+\t\t\t\t * Print the method return type", "+\t\t\t\t */", "+\t\t\t\tfinal TypeReference returnType = methodDeclaration.returnType;", "+\t\t", "+\t\t\t\tif (returnType != null) {", "+\t\t\t\t\treturnType.traverse(this, methodDeclarationScope);", "+\t\t\t\t}", "+\t\t\t\tthis.scribe.alignFragment(methodDeclAlignment, ++fragmentIndex);", "+", "+\t\t\t\t/*", "+\t\t\t\t * Print the method name", "+\t\t\t\t */", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true);", "+", "+\t\t\t\t// Format arguments", "+\t\t\t\tformatMethodArguments(", "+\t\t\t\t\tmethodDeclaration,", "+\t\t\t\t\tthis.preferences.insert_space_before_opening_paren_in_method_declaration,", "+\t\t\t\t\tthis.preferences.insert_space_between_empty_parens_in_method_declaration,", "+\t\t\t\t\tthis.preferences.insert_space_before_closing_paren_in_method_declaration,", "+\t\t\t\t\tthis.preferences.insert_space_after_opening_paren_in_method_declaration,", "+\t\t\t\t\tthis.preferences.insert_space_before_comma_in_method_declaration_parameters,", "+\t\t\t\t\tthis.preferences.insert_space_after_comma_in_method_declaration_parameters,", "+\t\t\t\t\tthis.preferences.alignment_for_parameters_in_method_declaration);", "+", "+\t\t\t\t/*", "+\t\t\t\t * Check for extra dimensions", "+\t\t\t\t */", "+\t\t\t\tint extraDimensions = getDimensions();", "+\t\t\t\tif (extraDimensions != 0) {", "+\t\t\t\t\t for (int i = 0; i < extraDimensions; i++) {", "+\t\t\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "+\t\t\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "+\t\t\t\t\t }", "+\t\t\t\t}", "+", "+\t\t\t\t// Format throws", "+\t\t\t\tformatThrowsClause(", "+\t\t\t\t\tmethodDeclaration,", "+\t\t\t\t\tthis.preferences.insert_space_before_comma_in_method_declaration_throws,", "+\t\t\t\t\tthis.preferences.insert_space_after_comma_in_method_declaration_throws,", "+\t\t\t\t\tthis.preferences.alignment_for_throws_clause_in_method_declaration);", "+\t\t\t\tok = true;", "+\t\t\t} catch (AlignmentException e) {", "+\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t}", "+\t\t} while (!ok);", "+\t\tthis.scribe.exitAlignment(methodDeclAlignment, true);"]}], "num": 20004}
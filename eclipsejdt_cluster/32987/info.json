{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26966118eef85757c83da64de75c547c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "164ec826e6bbc478bdca6e01734811b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "b7b27ff488733ad97566caef0cb2bdd99a3b7b63", "commitAfterChange": "d2bf5e6bc7d5c8ce5696375ed384baae09128c52", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\t\t\tif (this.currentLine != null) {", "+\t\t\t\t\t\tif (this.currentLine != null && this.currentLine.size() != 0) {", "-\t\t\t\t\t\t} else if (this.currentLine != null) {", "-\t\t\t\t\t\t\tthis.currentLine.clear();", "-\t\t\t\t\t\t\t\t\t} else if (this.currentLine != null) {", "-\t\t\t\t\t\t\t\t\t\tthis.currentLine.clear();", "-\t\t\t\t\t\t\t\t\tif (this.currentLine != null) {", "+\t\t\t\t\t\t\t\t\tif (this.currentLine != null && this.currentLine.size() != 0) {", "-\t\t\t\t\t\t\t\t\t} else if (currentLine != null){", "-\t\t\t\t\t\t\t\t\t\tthis.currentLine.clear();", "-\t\t\t\t\t\t\t\t\t\tif (this.currentLine != null) {", "+\t\t\t\t\t\t\t\t\t\tif (this.currentLine != null && this.currentLine.size() != 0) {", "-\t\t\t\t\t\t\t\t\t\t} else if (this.currentLine != null) {", "-\t\t\t\t\t\t\t\t\t\t\tthis.currentLine.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75ddd8ba1ebb5375438708982698f8b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "b7b27ff488733ad97566caef0cb2bdd99a3b7b63", "commitAfterChange": "d2bf5e6bc7d5c8ce5696375ed384baae09128c52", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\t//little trick to get out in the middle of a source compuation", "-\t\t\t\t\t\tif (this.currentLine != null) {", "+\t\t\t\t\t\tif (this.currentLine != null && this.currentLine.size() != 0) {", "-\t\t\t\t\t\t} else if (this.currentLine != null) {", "-\t\t\t\t\t\t\tthis.currentLine.clear();", "-\t\t\t\t\t\t\t\t\t} else if (this.currentLine != null) {", "-\t\t\t\t\t\t\t\t\t\tthis.currentLine.clear();", "-\t\t\t\t\t\t\t\t\tif (this.currentLine != null) {", "+\t\t\t\t\t\t\t\t\tif (this.currentLine != null && this.currentLine.size() != 0) {", "-\t\t\t\t\t\t\t\t\t} else if (currentLine != null){", "-\t\t\t\t\t\t\t\t\t\tthis.currentLine.clear();", "-\t\t\t\t\t\t\t\t\t\tif (this.currentLine != null) {", "+\t\t\t\t\t\t\t\t\t\tif (this.currentLine != null && this.currentLine.size() != 0) {", "-\t\t\t\t\t\t\t\t\t\t} else if (this.currentLine != null) {", "-\t\t\t\t\t\t\t\t\t\t\tthis.currentLine.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e7ea51d6fc7f8b40552e3c6ad015533", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "5739eb5b2f82f16d73f7174ce6602e0e03939d00", "commitAfterChange": "c18c68a976e1e7ddfc35757dbbd26a3f421830be", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "signatureAfterChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "diff": ["-\t\t\t\t\tBindingKey bindingKey = (BindingKey) this.requestedKeys.removeKey(unit.compilationResult.getFileName());", "-\t\t\t\t\tif (bindingKey != null) {", "-\t\t\t\t\t\tBinding compilerBinding = bindingKey.getCompilerBinding(unit);", "-\t\t\t\t\t\tif (compilerBinding != null) {", "-\t\t\t\t\t\t\tDefaultBindingResolver resolver = new DefaultBindingResolver(unit.scope, owner, this.bindingTables);", "-\t\t\t\t\t\t\tIBinding binding = resolver.getBinding(compilerBinding);", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t// pass it to requestor", "-\t\t\t\t\t\t\tif (binding != null)", "-\t\t\t\t\t\t\t\tastRequestor.acceptBinding(bindingKey.getKey(), binding);", "+\t\t\t\t\tObject key = this.requestedKeys.removeKey(unit.compilationResult.getFileName());", "+\t\t\t\t\tif (key instanceof BindingKey) {", "+\t\t\t\t\t\treportBinding(key, astRequestor, owner, unit);", "+\t\t\t\t\t} else if (key instanceof ArrayList) {", "+\t\t\t\t\t\tIterator iterator = ((ArrayList) key).iterator();", "+\t\t\t\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\t\t\t\treportBinding(iterator.next(), astRequestor, owner, unit);"]}], "num": 32987}
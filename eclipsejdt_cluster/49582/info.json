{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cdb1a70329a497f25e20f9183129b1fe", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3307b41b0c6071c75f2c9bf44186de89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType,  \t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker)", "signatureAfterChange": " TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType,  \t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker)", "diff": ["-\tlong[] annotationTagBitsOnDimensions = null;", "+\tAnnotationBinding [][] annotationsOnDimensions = null;", "-\t\tannotationTagBitsOnDimensions = getAnnotationTagBitsOnDimensions(dimension, walker);", "+\t\tfor (int i = 0; i < dimension; i++) {", "+\t\t\tAnnotationBinding [] annotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "+\t\t\tif (annotations != Binding.NO_ANNOTATIONS) { ", "+\t\t\t\tif (annotationsOnDimensions == null)", "+\t\t\t\t\tannotationsOnDimensions = new AnnotationBinding[dimension][];", "+\t\t\t\t\tannotationsOnDimensions[i] = annotations;", "+\t\t\t}", "+\t\t\twalker = walker.toNextArrayDimension();", "+\t\t}", "-", "+\t", "-\t\tReferenceBinding refType = getTypeFromConstantPoolName(signature, start + 1, end, isParameterized, missingTypeNames); // skip leading 'L' or 'T'", "-\t\tint depth = refType.depth();", "-\t\twhile (depth > 0 && walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "-\t\t\twalker = walker.toNextNestedType();", "-\t\t\tdepth--;", "-\t\t}", "-\t\tlong tagBits = typeAnnotationsToTagBits(walker.getAnnotationsAtCursor());", "-\t\tif (tagBits != 0 && annotationTagBitsOnDimensions == null) {", "-\t\t\tbinding = createAnnotatedType(refType, tagBits);", "-\t\t} else {", "-\t\t\tif (annotationTagBitsOnDimensions != null)", "-\t\t\t\tannotationTagBitsOnDimensions[dimension] = tagBits; // insert leaf type into array", "-\t\t\tbinding = refType;", "-\t\t}", "+\t\tbinding = getTypeFromConstantPoolName(signature, start + 1, end, isParameterized, missingTypeNames); // skip leading 'L' or 'T'", "-", "-\tif (dimension == 0)", "-\t\treturn binding;", "-\tif (annotationTagBitsOnDimensions != null)", "-\t\treturn createArrayType(binding, dimension, annotationTagBitsOnDimensions);", "-\treturn createArrayType(binding, dimension);", "-}", "+\t", "+\tint depth = binding.depth();", "+\twhile (depth > 0 && walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) { // we are dropping annotations on enclosing types.", "+\t\twalker = walker.toNextNestedType();", "+\t\tdepth--;", "+\tAnnotationBinding [][] annotations = new AnnotationBinding[depth + 1][];", "+\tannotations[depth] = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "+\t", "+\tif (annotations[depth] != null && annotations[depth] != Binding.NO_ANNOTATIONS)", "+\t\tbinding = createAnnotatedType(binding, annotations);", "+\t", "+\tif (dimension != 0)", "+\t\tbinding =  this.typeSystem.getArrayType(binding, dimension, AnnotatableTypeSystem.flattenedAnnotations(annotationsOnDimensions));", "+\t", "+\treturn binding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87f24ba1d079e25b8adb21b9c7cb1757", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 52, "signatureBeforeChange": "  private TypeBinding typeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, TypeAnnotationWalker walker)", "signatureAfterChange": "  private TypeBinding typeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, TypeAnnotationWalker walker, char [][][] missingTypeNames)", "diff": ["-private TypeBinding typeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, TypeAnnotationWalker walker) {", "-\tlong tagBits = typeAnnotationsToTagBits(walker.getAnnotationsAtCursor());", "-\tif (dimension == 0) {", "-\t\tif (tagBits != 0L)", "-\t\t\treturn createAnnotatedType(typeVariableBinding, tagBits);", "-\t\treturn typeVariableBinding;", "-\t} else {", "-\t\tlong[] annotationTagBitsOnDimensions = null;", "-\t\tif (walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "-\t\t\tannotationTagBitsOnDimensions = getAnnotationTagBitsOnDimensions(dimension, walker);", "+private TypeBinding typeFromTypeVariable(TypeVariableBinding typeVariableBinding, int dimension, TypeAnnotationWalker walker, char [][][] missingTypeNames) {", "+\tAnnotationBinding [] annotations;", "+\tAnnotationBinding [][] annotationsOnDimensions = null;", "+\tif (walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "+\t\tfor (int i = 0; i < dimension; i++) {", "+\t\t\tannotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "+\t\t\tif (annotations != Binding.NO_ANNOTATIONS) { ", "+\t\t\t\tif (annotationsOnDimensions == null)", "+\t\t\t\t\tannotationsOnDimensions = new AnnotationBinding[dimension][];", "+\t\t\t\tannotationsOnDimensions[i] = annotations;", "+\t\t\t}", "+\t\t\twalker = walker.toNextArrayDimension();", "-\t\treturn createArrayType(typeVariableBinding, dimension, annotationTagBitsOnDimensions);", "+\t", "+\tannotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "+\tif (annotations != null && annotations != Binding.NO_ANNOTATIONS)", "+\t\ttypeVariableBinding = (TypeVariableBinding) createAnnotatedType(typeVariableBinding, new AnnotationBinding [][] { annotations });", "+\t", "+\tif (dimension == 0) {", "+\t\treturn typeVariableBinding;", "+\t}", "+\treturn this.typeSystem.getArrayType(typeVariableBinding, dimension, AnnotatableTypeSystem.flattenedAnnotations(annotationsOnDimensions));"]}], "num": 49582}
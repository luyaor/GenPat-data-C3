{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2c35493e45a662c926ac4424afaa374", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "652f9b597c9d02eb45a9f264eac8afd1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "1924cfa5e4209a8742be0104afe1beaad86d0922", "commitAfterChange": "dfe897878a3115c90160783084107f96dcd301be", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic CompilerOptions getCustomCompilerOptions(Scope scope)", "signatureAfterChange": " \t \tpublic void recordSuppressWarnings(CompilationResult compilationResult, int startSuppresss, int endSuppress)", "diff": ["-\t", "-\tpublic CompilerOptions getCustomCompilerOptions(Scope scope) {", "-\t\tCompilerOptions options = scope.compilerOptions();", "-\t\tlong warningLevel = options.warningThreshold;", "-\t\tlong originalWarningLevel = warningLevel;", "-\t\tMemberValuePair[] pairs = this.memberValuePairs();", "-\t\tpairLoop: for (int i = 0, length = pairs.length; i < length; i++) {", "-\t\t\tMemberValuePair pair = pairs[i];", "-\t\t\tif (CharOperation.equals(pair.name, TypeConstants.VALUE)) {", "-\t\t\t\tExpression value = pair.value;", "-\t\t\t\tif (value instanceof ArrayInitializer) {", "-\t\t\t\t\tArrayInitializer initializer = (ArrayInitializer) value;", "-\t\t\t\t\tExpression[] inits = initializer.expressions;", "-\t\t\t\t\tfor (int j = 0, initsLength = inits.length; j < initsLength; j++) {", "-\t\t\t\t\t\tConstant cst = inits[j].constant;", "-\t\t\t\t\t\tif (cst != Constant.NotAConstant && cst.typeID() == T_JavaLangString) {", "-\t\t\t\t\t\t\twarningLevel &= ~getSuppressedWarningLevel(cst.stringValue());", "-\t\t\t\t\t\t\tif (warningLevel == 0) break pairLoop;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tConstant cst = value.constant;", "-\t\t\t\t\tif (cst != Constant.NotAConstant && cst.typeID() == T_JavaLangString) {", "-\t\t\t\t\t\twarningLevel &= ~getSuppressedWarningLevel(cst.stringValue());", "-\t\t\t\t\t\tif (warningLevel == 0) break pairLoop;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak pairLoop;", "-\t\t\t}", "-\t\t}", "-\t\tif (originalWarningLevel != warningLevel) {", "-\t\t\toptions = new CompilerOptions(options);", "-\t\t\toptions.warningThreshold = warningLevel;", "-\t\t}", "-\t\treturn options;", "-\t}", "+\t", "+\tpublic void recordSuppressWarnings(CompilationResult compilationResult, int startSuppresss, int endSuppress) {", "+\t\tlong suppressWarningIrritants = 0;", "+\t\tMemberValuePair[] pairs = this.memberValuePairs();", "+\t\tpairLoop: for (int i = 0, length = pairs.length; i < length; i++) {", "+\t\t\tMemberValuePair pair = pairs[i];", "+\t\t\tif (CharOperation.equals(pair.name, TypeConstants.VALUE)) {", "+\t\t\t\tExpression value = pair.value;", "+\t\t\t\tif (value instanceof ArrayInitializer) {", "+\t\t\t\t\tArrayInitializer initializer = (ArrayInitializer) value;", "+\t\t\t\t\tExpression[] inits = initializer.expressions;", "+\t\t\t\t\tfor (int j = 0, initsLength = inits.length; j < initsLength; j++) {", "+\t\t\t\t\t\tConstant cst = inits[j].constant;", "+\t\t\t\t\t\tif (cst != Constant.NotAConstant && cst.typeID() == T_JavaLangString) {", "+\t\t\t\t\t\t\tsuppressWarningIrritants |= CompilerOptions.warningTokenToIrritant(cst.stringValue());", "+\t\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tConstant cst = value.constant;", "+\t\t\t\t\tif (cst != Constant.NotAConstant && cst.typeID() == T_JavaLangString) {", "+\t\t\t\t\t\tsuppressWarningIrritants |= CompilerOptions.warningTokenToIrritant(cst.stringValue());", "+\t\t\t\t\t\tif (~suppressWarningIrritants == 0) break pairLoop;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak pairLoop;", "+\t\t\t}", "+\t\t}", "+\t\tif (suppressWarningIrritants != 0) {", "+\t\t\tcompilationResult.recordSuppressWarnings(suppressWarningIrritants, startSuppresss, endSuppress);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e7ea51d6fc7f8b40552e3c6ad015533", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "5739eb5b2f82f16d73f7174ce6602e0e03939d00", "commitAfterChange": "c18c68a976e1e7ddfc35757dbbd26a3f421830be", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "signatureAfterChange": "  \tprivate void resolve(ICompilationUnit[] compilationUnits, String[] bindingKeys, ASTRequestor astRequestor, int apiLevel, Map compilerOptions, WorkingCopyOwner owner, IProgressMonitor monitor)", "diff": ["-\t\t\t\t\tBindingKey bindingKey = (BindingKey) this.requestedKeys.removeKey(unit.compilationResult.getFileName());", "-\t\t\t\t\tif (bindingKey != null) {", "-\t\t\t\t\t\tBinding compilerBinding = bindingKey.getCompilerBinding(unit);", "-\t\t\t\t\t\tif (compilerBinding != null) {", "-\t\t\t\t\t\t\tDefaultBindingResolver resolver = new DefaultBindingResolver(unit.scope, owner, this.bindingTables);", "-\t\t\t\t\t\t\tIBinding binding = resolver.getBinding(compilerBinding);", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t// pass it to requestor", "-\t\t\t\t\t\t\tif (binding != null)", "-\t\t\t\t\t\t\t\tastRequestor.acceptBinding(bindingKey.getKey(), binding);", "+\t\t\t\t\tObject key = this.requestedKeys.removeKey(unit.compilationResult.getFileName());", "+\t\t\t\t\tif (key instanceof BindingKey) {", "+\t\t\t\t\t\treportBinding(key, astRequestor, owner, unit);", "+\t\t\t\t\t} else if (key instanceof ArrayList) {", "+\t\t\t\t\t\tIterator iterator = ((ArrayList) key).iterator();", "+\t\t\t\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\t\t\t\treportBinding(iterator.next(), astRequestor, owner, unit);"]}], "num": 53942}
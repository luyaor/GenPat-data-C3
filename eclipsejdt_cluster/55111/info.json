{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e7d1de2430a4e7ea83bde473f685b78", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c32ac198347a96f508b92fece5eb252", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/SpacePreparator.java", "commitBeforeChange": "10545bbf89db4e21cbdfaf0260ea872d78aa91e9", "commitAfterChange": "b2b8c809039544e3b7857112d3dba58d84cc4820", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r \t@Override\r \tpublic boolean visit(MethodDeclaration node)", "signatureAfterChange": "\r \r \t@Override\r \tpublic boolean visit(MethodDeclaration node)", "diff": ["-\t\t\thandleTokenBefore(node.getBody(), TokenNameRPAREN, spaceBeforeCloseParen, false);\r", "+\t\t\tif (spaceBeforeCloseParen) {\r", "+\t\t\t\tList<SingleVariableDeclaration> params = node.parameters();\r", "+\t\t\t\tASTNode beforeBrace = params.isEmpty() ? node.getName() : params.get(params.size() - 1);\r", "+\t\t\t\thandleTokenAfter(beforeBrace, TokenNameRPAREN, true, false);\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f1aeb8775b5255516e12614be347466", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/SpacePreparator.java", "commitBeforeChange": "bbfd43e75c85d178e78e2e1f2cdd86b56e672481", "commitAfterChange": "b7270c3ed9751063a7847ef78467ed5c4c4a29fb", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "\r \r \t@Override\r \tpublic boolean visit(ClassInstanceCreation node)", "signatureAfterChange": "\r \r \t@Override\r \tpublic boolean visit(ClassInstanceCreation node)", "diff": ["-\t\thandleInvocation(node, node.getType(), node.typeArguments());\r", "+\t\tList<Type> typeArguments = node.typeArguments();\r", "+\t\thandleTypeArguments(typeArguments);\r", "+\t\thandleInvocation(node, node.getType());\r", "+\t\tif (!typeArguments.isEmpty()) {\r", "+\t\t\thandleTokenBefore(typeArguments.get(0), TokenNamenew, false, true); // fix for: new<Integer>A<String>()\r", "+\t\t}\r"]}], "num": 55111}
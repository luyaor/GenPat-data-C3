{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "273dde444598c3d8dcc5b5600f429f39", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afe9cba023906fe257f04ba5f54cd387", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionJavadocParser.java", "commitBeforeChange": "f97912416c5f4661289c43d63ee763608220be3f", "commitAfterChange": "e5efe07482ca39d7bb013c10359ef31d2cc33138", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprotected Object invalidSyntax(int context, Object[] infos) throws InvalidInputException", "signatureAfterChange": " \tprotected Object parseArguments(Object receiver) throws InvalidInputException", "diff": ["-\tprotected Object invalidSyntax(int context, Object[] infos) throws InvalidInputException {", "-\t\tswitch (context) {", "-\t\t\tcase INVALID_QUALIFIED_NAME:", "-\t\t\t\tint idLength = this.identifierLengthStack[this.identifierLengthPtr--];", "-\t\t\t\tchar[][] tokens = new char[idLength][];", "-\t\t\t\tint startPtr = this.identifierPtr-idLength+1;", "-\t\t\t\tSystem.arraycopy(this.identifierStack, startPtr, tokens, 0, idLength);", "-\t\t\t\tlong[] positions = new long[idLength+1];", "-\t\t\t\tSystem.arraycopy(this.identifierPositionStack, startPtr, positions, 0, idLength);", "-\t\t\t\tpositions[idLength] = (((long)this.tokenPreviousPosition)<<32) + this.tokenPreviousPosition;", "-\t\t\t\tthis.completionNode = new CompletionOnJavadocQualifiedTypeReference(tokens, CharOperation.NO_CHAR, positions, this.tagSourceStart, this.tagSourceEnd);", "-\t\t\t\tthis.identifierPtr -= idLength;", "-\t\t", "-\t\t\t\tif (CompletionEngine.DEBUG) {", "-\t\t\t\t\tSystem.out.println(\"\tcompletion partial qualified type=\"+completionNode); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase INVALID_ARGUMENTS:", "-\t\t\t\tif (infos.length == 3 && (this.cursorLocation+1) <= this.index) {", "-\t\t\t\t\tObject receiver = infos[0];", "-\t\t\t\t\tList arguments = (List) infos[1];", "-\t\t\t\t\tObject argument = infos[2];", "-\t\t\t\t\tif (this.completionNode != null && !this.pushText) {", "-\t\t\t\t\t\tthis.completionNode.addCompletionFlags(CompletionOnJavadoc.BASE_TYPES);", "-\t\t\t\t\t\tif (this.completionNode instanceof CompletionOnJavadocSingleTypeReference) {", "-\t\t\t\t\t\t\tchar[] token = ((CompletionOnJavadocSingleTypeReference)this.completionNode).token;", "-\t\t\t\t\t\t\tif (token != null && token.length > 0) {", "-\t\t\t\t\t\t\t\treturn this.completionNode;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\treturn this.completionNode;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\targuments.add(argument);", "-\t\t\t\t\tObject methodRef = createMethodReference(receiver, arguments);", "-\t\t\t\t\tif (methodRef instanceof JavadocMessageSend) {", "-\t\t\t\t\t\tJavadocMessageSend msgSend = (JavadocMessageSend) methodRef;", "-\t\t\t\t\t\tmsgSend.sourceEnd = this.tokenPreviousPosition-1;", "-\t\t\t\t\t\tthis.completionNode = new CompletionOnJavadocMessageSend(msgSend, this.memberStart);", "-\t\t\t\t\t} else if (methodRef instanceof JavadocAllocationExpression) {", "-\t\t\t\t\t\tJavadocAllocationExpression allocExp = (JavadocAllocationExpression) methodRef;", "-\t\t\t\t\t\tallocExp.sourceEnd = this.tokenPreviousPosition-1;", "-\t\t\t\t\t\tthis.completionNode = new CompletionOnJavadocAllocationExpression(allocExp, this.memberStart);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (CompletionEngine.DEBUG) {", "-\t\t\t\t\t\tSystem.out.println(\"\tcompletion method=\"+completionNode); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase INVALID_NO_ARGUMENT:", "-\t\t\t\tif ((this.cursorLocation+1) <= this.index) {", "-\t\t\t\t\tObject ref = infos[0];", "-\t\t\t\t\tif (ref instanceof JavadocMessageSend) {", "-\t\t\t\t\t\tJavadocMessageSend msgSend = (JavadocMessageSend) ref;", "-\t\t\t\t\t\tmsgSend.sourceEnd = this.tokenPreviousPosition-1;", "-\t\t\t\t\t\tthis.completionNode = new CompletionOnJavadocMessageSend(msgSend, this.memberStart);", "-\t\t\t\t\t} else if (ref instanceof JavadocAllocationExpression) {", "-\t\t\t\t\t\tJavadocAllocationExpression alloc = (JavadocAllocationExpression) ref;", "-\t\t\t\t\t\talloc.sourceEnd = this.tokenPreviousPosition-1;", "-\t\t\t\t\t\tthis.completionNode = new CompletionOnJavadocAllocationExpression(alloc, this.memberStart);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (CompletionEngine.DEBUG) {", "-\t\t\t\t\t\tSystem.out.println(\"\tcompletion method=\"+completionNode); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t}", "-\t\treturn this.completionNode;", "-\t}", "+\tprotected Object parseArguments(Object receiver) throws InvalidInputException {", "+\t\t// Init", "+\t\tint modulo = 0; // should be 2 for (Type,Type,...) or 3 for (Type arg,Type arg,...)", "+\t\tint iToken = 0;", "+\t\tchar[] argName = null;", "+\t\tList arguments = new ArrayList(10);", "+\t\tObject typeRef = null;", "+\t\tint dim = 0;", "+\t\tboolean isVarargs = false;", "+\t\tlong[] dimPositions = new long[20]; // assume that there won't be more than 20 dimensions...", "+\t\tlong argNamePos = -1;", "+\t\t", "+\t\t// Parse arguments declaration if method reference", "+\t\tnextArg : while (this.index < this.scanner.eofPosition) {", "+", "+\t\t\t// Read argument type reference", "+\t\t\ttry {", "+\t\t\t\ttypeRef = parseQualifiedName(false);", "+\t\t\t\tif (this.abort) return null; // May be aborted by specialized parser", "+\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\tbreak nextArg;", "+\t\t\tboolean firstArg = modulo == 0;", "+\t\t\tif (firstArg) { // verify position", "+\t\t\t\tif (iToken != 0)", "+\t\t\t\t\tbreak nextArg;", "+\t\t\t} else if ((iToken % modulo) != 0) {", "+\t\t\t\t\tbreak nextArg;", "+\t\t\t}", "+\t\t\tif (typeRef == null) {", "+\t\t\t\tif (firstArg && getCurrentTokenType() == TerminalTokens.TokenNameRPAREN) {", "+\t\t\t\t\tthis.lineStarted = true;", "+\t\t\t\t\treturn createMethodReference(receiver, null);", "+\t\t\t\t}", "+\t\t\t\tObject methodRef = createMethodReference(receiver, arguments);", "+\t\t\t\treturn syntaxRecoverEmptyArgumentType(methodRef);", "+\t\t\t}", "+\t\t\tif (this.index >= this.scanner.eofPosition) {", "+\t\t\t\tObject argument = createArgumentReference(this.scanner.getCurrentIdentifierSource(), 0, false, typeRef, null, (((long)this.scanner.getCurrentTokenStartPosition())<<32)+this.scanner.getCurrentTokenEndPosition());", "+\t\t\t\treturn syntaxRecoverArgumentType(receiver, arguments, argument);", "+\t\t\t}", "+\t\t\tif (this.index >= this.cursorLocation) {", "+\t\t\t\tif (this.completionNode instanceof CompletionOnJavadocSingleTypeReference) {", "+\t\t\t\t\tCompletionOnJavadocSingleTypeReference singleTypeReference = (CompletionOnJavadocSingleTypeReference) this.completionNode;", "+\t\t\t\t\tif (singleTypeReference.token == null || singleTypeReference.token.length == 0) {", "+\t\t\t\t\t\tObject methodRef = createMethodReference(receiver, arguments);", "+\t\t\t\t\t\treturn syntaxRecoverEmptyArgumentType(methodRef);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (this.completionNode instanceof CompletionOnJavadocQualifiedTypeReference) {", "+\t\t\t\t\tCompletionOnJavadocQualifiedTypeReference qualifiedTypeReference = (CompletionOnJavadocQualifiedTypeReference) this.completionNode;", "+\t\t\t\t\tif (qualifiedTypeReference.tokens == null || qualifiedTypeReference.tokens.length < qualifiedTypeReference.sourcePositions.length) {", "+\t\t\t\t\t\tObject methodRef = createMethodReference(receiver, arguments);", "+\t\t\t\t\t\treturn syntaxRecoverEmptyArgumentType(methodRef);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tiToken++;", "+", "+\t\t\t// Read possible additional type info", "+\t\t\tdim = 0;", "+\t\t\tisVarargs = false;", "+\t\t\tif (readToken() == TerminalTokens.TokenNameLBRACKET) {", "+\t\t\t\t// array declaration", "+\t\t\t\tint dimStart = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\twhile (readToken() == TerminalTokens.TokenNameLBRACKET) {", "+\t\t\t\t\tconsumeToken();", "+\t\t\t\t\tif (readToken() != TerminalTokens.TokenNameRBRACKET) {", "+\t\t\t\t\t\tbreak nextArg;", "+\t\t\t\t\t}", "+\t\t\t\t\tconsumeToken();", "+\t\t\t\t\tdimPositions[dim++] = (((long) dimStart) << 32) + this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\t}", "+\t\t\t} else if (readToken() == TerminalTokens.TokenNameELLIPSIS) {", "+\t\t\t\t// ellipsis declaration", "+\t\t\t\tint dimStart = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\tdimPositions[dim++] = (((long) dimStart) << 32) + this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\tconsumeToken();", "+\t\t\t\tisVarargs = true;", "+\t\t\t}", "+", "+\t\t\t// Read argument name", "+\t\t\targNamePos = -1;", "+\t\t\tif (readToken() == TerminalTokens.TokenNameIdentifier) {", "+\t\t\t\tconsumeToken();", "+\t\t\t\tif (firstArg) { // verify position", "+\t\t\t\t\tif (iToken != 1)", "+\t\t\t\t\t\tbreak nextArg;", "+\t\t\t\t} else if ((iToken % modulo) != 1) {", "+\t\t\t\t\t\tbreak nextArg;", "+\t\t\t\t}", "+\t\t\t\tif (argName == null) { // verify that all arguments name are declared", "+\t\t\t\t\tif (!firstArg) {", "+\t\t\t\t\t\tbreak nextArg;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\targName = this.scanner.getCurrentIdentifierSource();", "+\t\t\t\targNamePos = (((long)this.scanner.getCurrentTokenStartPosition())<<32)+this.scanner.getCurrentTokenEndPosition();", "+\t\t\t\tiToken++;", "+\t\t\t} else if (argName != null) { // verify that no argument name is declared", "+\t\t\t\tbreak nextArg;", "+\t\t\t}", "+\t\t\t", "+\t\t\t// Verify token position", "+\t\t\tif (firstArg) {", "+\t\t\t\tmodulo = iToken + 1;", "+\t\t\t} else {", "+\t\t\t\tif ((iToken % modulo) != (modulo - 1)) {", "+\t\t\t\t\tbreak nextArg;", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\t// Read separator or end arguments declaration", "+\t\t\tint token = readToken();", "+\t\t\tname = argName == null ? CharOperation.NO_CHAR : argName;", "+\t\t\tif (token == TerminalTokens.TokenNameCOMMA) {", "+\t\t\t\t// Create new argument", "+\t\t\t\tObject argument = createArgumentReference(name, dim, isVarargs, typeRef, dimPositions, argNamePos);", "+\t\t\t\tif (this.abort) return null; // May be aborted by specialized parser", "+\t\t\t\targuments.add(argument);", "+\t\t\t\tconsumeToken();", "+\t\t\t\tiToken++;", "+\t\t\t} else if (token == TerminalTokens.TokenNameRPAREN) {", "+\t\t\t\t// Create new argument", "+\t\t\t\tObject argument = createArgumentReference(name, dim, isVarargs, typeRef, dimPositions, argNamePos);", "+\t\t\t\tif (this.abort) return null; // May be aborted by specialized parser", "+\t\t\t\targuments.add(argument);", "+\t\t\t\tconsumeToken();", "+\t\t\t\treturn createMethodReference(receiver, arguments);", "+\t\t\t} else {", "+\t\t\t\tObject argument = createArgumentReference(name, dim, isVarargs, typeRef, dimPositions, argNamePos);", "+\t\t\t\treturn syntaxRecoverArgumentType(receiver, arguments, argument);", "+", "+\t\t// Something wrong happened => Invalid input", "+\t\tthrow new InvalidInputException();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbe696619c69c1ec91a89509b23f5143", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo addInitializationsFrom(FlowInfo inits)", "signatureAfterChange": "  public FlowInfo addInitializationsFrom(FlowInfo inits)", "diff": ["-\t// note: we may have both forms of protection (null and non null) ", "-\t// coming with otherInits, because of loops", "-\tboolean considerNulls = (otherInits.tagBits & NULL_FLAG_MASK) != 0;", "-\tlong a1, na1, a2, na2, a3, a4, na4, b1, b2, nb2, b3, nb3, b4, nb4;", "-\tif (considerNulls) {", "-\t\tif ((this.tagBits & NULL_FLAG_MASK) == 0) {", "-\t\t\tthis.nullAssignmentStatusBit1 = otherInits.nullAssignmentStatusBit1;", "-\t\t\tthis.nullAssignmentStatusBit2 = otherInits.nullAssignmentStatusBit2;", "-\t\t\tthis.nullAssignmentValueBit1 = otherInits.nullAssignmentValueBit1;", "-\t\t\tthis.nullAssignmentValueBit2 = otherInits.nullAssignmentValueBit2;", "+\tboolean thisHadNulls = (this.tagBits & NULL_FLAG_MASK) != 0,", "+\t\totherHasNulls = (otherInits.tagBits & NULL_FLAG_MASK) != 0;", "+\tlong ", "+\t\ta1, a2, a3, a4, ", "+\t\tna1, na2, na3, na4, ", "+\t\tb1, b2, b3, b4,", "+\t\tnb1, nb2, nb3, nb4;", "+\tif (otherHasNulls) {", "+\t\tif (!thisHadNulls) {", "+\t\t\tthis.nullBit1 = otherInits.nullBit1;", "+\t\t\tthis.nullBit2 = otherInits.nullBit2;", "+\t\t\tthis.nullBit3 = otherInits.nullBit3;", "+\t\t\tthis.nullBit4 = otherInits.nullBit4;", "-\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "+\t\t\t  this.nullBit4 = ~0;", "-\t\t\tthis.nullAssignmentStatusBit1 =", "-\t\t\t\t(b1 = otherInits.nullAssignmentStatusBit1) ", "-\t\t\t\t\t| ((a1 = this.nullAssignmentStatusBit1) ", "-\t\t\t\t\t\t& (((nb2 = ~(b2 = otherInits.nullAssignmentStatusBit2)) ", "-\t\t\t\t\t\t\t\t& (nb3 = ~(b3 = otherInits.nullAssignmentValueBit1)) ", "-\t\t\t\t\t\t\t\t& ((nb4 = ~(b4 = otherInits.nullAssignmentValueBit2)) ", "-\t\t\t\t\t\t\t\t\t| ((a2 = this.nullAssignmentStatusBit2) ", "-\t\t\t\t\t\t\t\t\t\t^ (a4 = this.nullAssignmentValueBit2)))) ", "-\t\t\t\t\t\t\t| nb4 &\t(na2 = ~a2)\t& (na4 = ~a4)));", "-\t\t\tthis.nullAssignmentStatusBit2 =", "-\t\t\t\t(b1 & b2) ", "-\t\t\t\t\t| (~b1 ", "-\t\t\t\t\t\t& ((((na1 = ~a1) | a4) & b2) ", "-\t\t\t\t\t\t\t| (a2 ", "-\t\t\t\t\t\t\t\t& (b2 ", "-\t\t\t\t\t\t\t\t\t| (a1 & (na4 = ~a4) & nb2 & nb3) ", "-\t\t\t\t\t\t\t\t\t| ((~(a3 = this.nullAssignmentValueBit1) & nb3) ", "-\t\t\t\t\t\t\t\t\t\t\t| (na1 & na4)) ", "-\t\t\t\t\t\t\t\t\t\t& nb4))));", "-\t\t\tthis.nullAssignmentValueBit1 = ", "-\t\t\t\tnb2 & b3 |", "-\t\t\t\t~b1 & ((a1 & na2 & na4 | na1 & a3) & (nb2 | nb4) |", "-\t\t\t\t\t\ta1 & na2 & a3 & nb2 |", "-\t\t\t\t\t\t(a1 | a2 | na4) & b3);", "-\t\t\tthis.nullAssignmentValueBit2 =", "-\t\t\t\tb4 |", "-\t\t\t\ta4 & (nb2 & nb3 | ~(b1 ^ b2));", "+\t\t\tthis.nullBit1 = (b1 = otherInits.nullBit1)", "+                \t\t\t\t| (a1 = this.nullBit1) & ((a3 = this.nullBit3) ", "+                \t\t\t\t\t& (a4 = this.nullBit4) & (nb2 = ~(b2 = otherInits.nullBit2)) ", "+                \t\t\t\t\t& (nb4 = ~(b4 = otherInits.nullBit4))", "+                        \t\t| ((na4 = ~a4) | (na3 = ~a3)) ", "+                        \t\t\t& ((na2 = ~(a2 = this.nullBit2)) & nb2 ", "+                        \t\t\t\t| a2 & (nb3 = ~(b3 = otherInits.nullBit3)) & nb4));", "+\t\t\tthis.nullBit2  = b2 & (nb4 | nb3)", "+                    \t\t\t| na3 & na4 & b2", "+                    \t\t\t| a2 & (nb3 & nb4", "+                                \t\t\t| (nb1 = ~b1) & (na3 | (na1 = ~a1))", "+                                \t\t\t| a1 & b2);", "+\t\t\tthis.nullBit3 = b3 & (nb1 & (b2 | a2 | na1)", "+                        \t\t\t| b1 & (b4 | nb2 | a1 & a3)", "+                         \t\t\t| na1 & na2 & na4)", "+                    \t\t\t| a3 & nb2 & nb4", "+                    \t\t\t| nb1 & ((na2 & a4 | na1) & a3", "+                                \t\t\t| a1 & na2 & na4 & b2);", "+\t\t\tthis.nullBit4 = nb1 & (a4 & (na3 & nb3\t| (a3 | na2) & nb2)", "+                      \t\t\t| a1 & (a3 & nb2 & b4", "+                              \t\t\t| a2 & b2 & (b4\t| a3 & na4 & nb3)))", "+                      \t\t\t| b1 & (a3 & a4 & b4", "+                          \t\t\t| na2 & na4 & nb3 & b4", "+                          \t\t\t| a2 & ((b3 | a4) & b4", "+                                  \t\t\t\t| na3 & a4 & b2 & b3)", "+                          \t\t\t| na1 & (b4\t| (a4 | a2) & b2 & b3))", "+                      \t\t\t| (na1 & (na3 & nb3 | na2 & nb2)", "+                      \t\t\t\t| a1 & (nb2 & nb3 | a2 & a3)) & b4;\t", "-\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "+\t\t\t  this.nullBit4 = ~0;", "-\t\t\t\t\tif (coverageTestFlag && coverageTestId == 3) {", "-\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 3\"); //$NON-NLS-1$", "-\t\t\t\t\t}", "+\t\t\t\t\tif (coverageTestFlag && coverageTestId == 3) {", "+\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 3\"); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\t// current storage is longer", "+\t\t\t\t\tmergeLimit = otherLength;", "-\t\t\t\t\t// current storage is longer", "-\t\t\t\t\tmergeLimit = otherLength;", "-\t\t} ", "-\t\telse if (otherInits.extra != null) {", "+\t\t} else if (otherInits.extra != null) {", "-\t\t\tif (considerNulls) {", "+\t\t\tif (otherHasNulls) {", "-\t\t\t\t\tthis.extra[5][otherLength - 1] = ~0;", "+\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 6\"); //$NON-NLS-1$", "-\t\tint i = 0;", "-\t\tfor (; i < mergeLimit; i++) {", "+\t\tint i;", "+\t\t// manage definite assignment info", "+\t\tfor (i = 0; i < mergeLimit; i++) {", "-\t\t\tif (considerNulls) { // could consider pushing the test outside the loop", "-\t\t\t\tif (this.extra[2][i] == 0 &&", "-\t\t\t\t\t\tthis.extra[3][i] == 0 &&", "-\t\t\t\t\t\tthis.extra[4][i] == 0 &&", "-\t\t\t\t\t\tthis.extra[5][i] == 0) {", "-\t\t\t\t\tfor (int j = 2; j < extraLength; j++) {", "-\t\t\t\t\t\tthis.extra[j][i] = otherInits.extra[j][i];", "-\t\t\t\t\t}", "-\t\t\t\t\tif (coverageTestFlag && coverageTestId == 7) {", "-\t\t\t\t\t\tthis.extra[5][i] = ~0;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\telse {", "-\t\t\t\t\tthis.extra[2][i] =", "-\t\t\t\t\t\t(b1 = otherInits.extra[2][i]) |", "-\t\t\t\t\t\t(a1\t = this.extra[2][i]) & ", "-\t\t\t\t\t\t\t((nb2 = ~(b2 = otherInits.extra[3][i])) &", "-\t\t\t\t\t\t\t\t(nb3 = ~(b3 = otherInits.extra[4][i])) &", "-\t\t\t\t\t\t\t\t((nb4 = ~(b4 = otherInits.extra[5][i])) |", "-\t\t\t\t\t\t\t\t\t((a2 = this.extra[3][i]) ^ ", "-\t\t\t\t\t\t\t\t\t\t(a4 = this.extra[5][i]))) | ", "-\t\t\t\t\t\t\tnb4 & (na2 = ~a2) & (na4 = ~a4));", "-\t\t\t\t\tthis.extra[3][i] =", "-\t\t\t\t\t\tb1 & b2 |", "-\t\t\t\t\t\t~b1 & (((na1 = ~a1) | a4) & b2 |", "-\t\t\t\t\t\t\t\ta2 & (b2 |", "-\t\t\t\t\t\t\t\t\ta1 & (na4 = ~a4) & nb2 & nb3 |", "-\t\t\t\t\t\t\t\t\t(~(a3 = this.extra[4][i]) & nb3 | na1 & na4) & nb4));", "-\t\t\t\t\tthis.extra[4][i] = ", "-\t\t\t\t\t\tnb2 & b3 |", "-\t\t\t\t\t\t~b1 & ((a1 & na2 & na4 | na1 & a3) & (nb2 | nb4) |", "-\t\t\t\t\t\t\t\ta1 & na2 & a3 & nb2 |", "-\t\t\t\t\t\t\t\t(a1 | a2 | na4) & b3);", "-\t\t\t\t\tthis.extra[5][i] =", "-\t\t\t\t\t\tb4 |", "-\t\t\t\t\t\ta4 & (nb2 & nb3 | ~(b1 ^ b2));", "-\t\t\t\t\t\tif (coverageTestFlag && coverageTestId == 8) {", "-\t\t\t\t\t\t\tthis.extra[5][i] = ~0;", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (considerNulls) {", "-\t\t\t\tfor (int j = 2; j < extraLength; j++) {", "-\t\t\t\t\tthis.extra[j][i] = otherInits.extra[j][i];", "-\t\t\t\t}", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 9) {", "-\t\t\t\t\tthis.extra[5][i] = ~0;", "-\t\t\t\t}", "+\t\t}", "+\t\t// tweak limits for nulls", "+\t\tif (!thisHadNulls) {", "+\t\t    if (copyLimit < mergeLimit) {", "+\t\t      \tcopyLimit = mergeLimit;", "+\t\t    }", "+\t\t  \tmergeLimit = 0;", "+\t\t}", "+\t\tif (!otherHasNulls) {", "+\t\t  \tcopyLimit = 0;", "+\t\t  \tmergeLimit = 0;", "+\t\t}", "+\t\tfor (i = 0; i < mergeLimit; i++) {", "+\t\t\tthis.extra[1 + 1][i] = (b1 = otherInits.extra[1 + 1][i])", "+                \t\t\t\t| (a1 = this.extra[1 + 1][i]) & ((a3 = this.extra[3 + 1][i]) ", "+                \t\t\t\t\t& (a4 = this.extra[4 + 1][i]) & (nb2 = ~(b2 = otherInits.extra[2 + 1][i])) ", "+                \t\t\t\t\t& (nb4 = ~(b4 = otherInits.extra[4 + 1][i]))", "+                        \t\t| ((na4 = ~a4) | (na3 = ~a3)) ", "+                        \t\t\t& ((na2 = ~(a2 = this.extra[2 + 1][i])) & nb2 ", "+                        \t\t\t\t| a2 & (nb3 = ~(b3 = otherInits.extra[3 + 1][i])) & nb4));", "+\t\t\tthis.extra[2 + 1][i]  = b2 & (nb4 | nb3)", "+                    \t\t\t| na3 & na4 & b2", "+                    \t\t\t| a2 & (nb3 & nb4", "+                                \t\t\t| (nb1 = ~b1) & (na3 | (na1 = ~a1))", "+                                \t\t\t| a1 & b2);", "+\t\t\tthis.extra[3 + 1][i] = b3 & (nb1 & (b2 | a2 | na1)", "+                        \t\t\t| b1 & (b4 | nb2 | a1 & a3)", "+                         \t\t\t| na1 & na2 & na4)", "+                    \t\t\t| a3 & nb2 & nb4", "+                    \t\t\t| nb1 & ((na2 & a4 | na1) & a3", "+                                \t\t\t| a1 & na2 & na4 & b2);", "+\t\t\tthis.extra[4 + 1][i] = nb1 & (a4 & (na3 & nb3\t| (a3 | na2) & nb2)", "+                      \t\t\t| a1 & (a3 & nb2 & b4", "+                              \t\t\t| a2 & b2 & (b4\t| a3 & na4 & nb3)))", "+                      \t\t\t| b1 & (a3 & a4 & b4", "+                          \t\t\t| na2 & na4 & nb3 & b4", "+                          \t\t\t| a2 & ((b3 | a4) & b4", "+                                  \t\t\t\t| na3 & a4 & b2 & b3)", "+                          \t\t\t| na1 & (b4\t| (a4 | a2) & b2 & b3))", "+                      \t\t\t| (na1 & (na3 & nb3 | na2 & nb2)", "+                      \t\t\t\t| a1 & (nb2 & nb3 | a2 & a3)) & b4;\t", "+\t\t\tif (coverageTestFlag && coverageTestId == 7) {", "+\t\t\t  this.extra[5][i] = ~0;", "+\t\t\t}", "+\t\t}", "+\t\tfor (; i < copyLimit; i++) {", "+\t\t\tfor (int j = 2; j < extraLength; j++) {", "+\t\t\t\tthis.extra[j][i] = otherInits.extra[j][i];", "+\t\t\t}", "+\t\t\tif (coverageTestFlag && coverageTestId == 8) {", "+\t\t\t  this.extra[5][i] = ~0;"]}], "num": 46509}
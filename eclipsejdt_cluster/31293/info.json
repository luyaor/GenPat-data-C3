{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "93281ab9391bff823c7eeaa35285bf37", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22a691c24dfda4db543d9f446743c979", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExceptionFormula.java", "commitBeforeChange": "4605f993bb123a9187b7d6cf100f3cd705b1424a", "commitAfterChange": "49d173b6a20e491492d309e521a8df899e49ca65", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic Object reduce(InferenceContext18 inferenceContext)", "signatureAfterChange": " \t \tpublic Object reduce(InferenceContext18 inferenceContext)", "diff": ["-\t\t\t// TODO: this condition is awaiting confirmation, see http://mail.openjdk.java.net/pipermail/lambda-spec-experts/2013-December/000455.html ", "-\t\t\tif (!(this.left instanceof LambdaExpression) || ((LambdaExpression)this.left).argumentsTypeElided()) {", "-\t\t\t\tint nParam = sam.parameters.length;", "-\t\t\t\tfor (int i = 0; i < nParam; i++)", "-\t\t\t\t\tif (!sam.parameters[i].isProperType(true))", "+\t\t\tif (this.left instanceof LambdaExpression) {", "+\t\t\t\tif (((LambdaExpression)this.left).argumentsTypeElided()) {", "+\t\t\t\t\tint nParam = sam.parameters.length;", "+\t\t\t\t\tfor (int i = 0; i < nParam; i++)", "+\t\t\t\t\t\tif (!sam.parameters[i].isProperType(true))", "+\t\t\t\t\t\t\treturn FALSE;", "+\t\t\t\t}", "+\t\t\t\tif (sam.returnType != TypeBinding.VOID && !sam.returnType.isProperType(true))", "+\t\t\t\t\treturn FALSE;", "+\t\t\t} else { // reference expression", "+\t\t\t\tif (!((ReferenceExpression)this.left).isExactMethodReference()) {\t\t\t\t\t", "+\t\t\t\t\tint nParam = sam.parameters.length;", "+\t\t\t\t\tfor (int i = 0; i < nParam; i++)", "+\t\t\t\t\t\tif (!sam.parameters[i].isProperType(true))", "+\t\t\t\t\t\t\treturn FALSE;", "+\t\t\t\t\tif (sam.returnType != TypeBinding.VOID && !sam.returnType.isProperType(true))", "+\t\t\t\t}", "-\t\t\tif (sam.returnType != TypeBinding.VOID && !sam.returnType.isProperType(true))", "-\t\t\t\treturn FALSE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4aee4aace17122145030b060248f5377", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \t \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\t\t\tqualification.implicitWidening(qTb, qTb);", "+\t\t\t\t\tqualification.computeConversion(scope, qTb, qTb);", "-", "+\t\t\t// resolve type arguments (for generic constructor call)", "+\t\t\tif (this.typeArguments != null) {", "+\t\t\t\tint length = this.typeArguments.length;", "+\t\t\t\tboolean argHasError = false; // typeChecks all arguments", "+\t\t\t\tthis.genericTypeArguments = new TypeBinding[length];", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tif ((this.genericTypeArguments[i] = this.typeArguments[i].resolveType(scope)) == null) {", "+\t\t\t\t\t\targHasError = true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (argHasError) {", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}\t\t\t", "+\t", "-", "-\t\t\t\t// see for user-implicit widening conversion ", "-\t\t\t\tif (arguments != null) {", "-\t\t\t\t\tint length = arguments.length;", "-\t\t\t\t\tTypeBinding[] paramTypes = binding.parameters;", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\targuments[i].implicitWidening(paramTypes[i], argumentTypes[i]);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (argsContainCast) {", "-\t\t\t\t\t\tCastExpression.checkNeedForArgumentCasts(scope, null, receiverType, binding, this.arguments, argumentTypes, this);", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tif (this.arguments != null)", "+\t\t\t\t\tcheckInvocationArguments(scope, null, receiverType, binding, this.arguments, argumentTypes, argsContainCast, this);"]}], "num": 31293}
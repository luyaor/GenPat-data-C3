{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b4d1645a96bf52463d5d1562eea766a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0662718df4f4d75762d02f32c277d4cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "e22e3614eb69018940fae05b9e58858f8a672e01", "commitAfterChange": "56d8ad4b7df60e79a9ee98611feebac099c594f9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r public static IStatus validatePackageName(String name)", "signatureAfterChange": "\r public static IStatus validatePackageName(String name)", "diff": ["-\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, \"A package name must not be null\", null);\r", "+\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.package.nullName\"/*nonNLS*/), null);\r", "-\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, \"A package name must not be empty\", null);\r", "+\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.package.emptyName\"/*nonNLS*/), null);\r", "-\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, \"A package name cannot start or end with a dot\", null);\r", "+\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.package.dotName\"/*nonNLS*/), null);\r", "-\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, \"A package name must not start or end with a blank\", null);;\r", "+\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.package.nameWithBlanks\"/*nonNLS*/), null);;\r", "-\t\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, \"A package name must not contain two consecutive dots\", null);\r", "+\t\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.package.consecutiveDotsName\"/*nonNLS*/), null);\r", "-\treturn new Status(IStatus.OK, JavaCore.PLUGIN_ID, -1, \"OK\", null);\r", "+\treturn new Status(IStatus.OK, JavaCore.PLUGIN_ID, -1, \"OK\"/*nonNLS*/, null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5de0a8b686f045a4a509a458dca1347d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "e22e3614eb69018940fae05b9e58858f8a672e01", "commitAfterChange": "56d8ad4b7df60e79a9ee98611feebac099c594f9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public static IStatus validateJavaTypeName(String name)", "signatureAfterChange": "\r public static IStatus validateJavaTypeName(String name)", "diff": ["-\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, \"A Java type name must not be null\", null);\r", "+\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.type.nullName\"/*nonNLS*/), null);\r", "-\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, \"A Java type name must not start or end with a blank.\", null);;\r", "+\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.type.nameWithBlanks\"/*nonNLS*/), null);\r", "-\t\t\treturn new Status(IStatus.WARNING, JavaCore.PLUGIN_ID, -1, \"By convention, Java type names usually don't contain the $ character.\", null);\r", "+\t\t\treturn new Status(IStatus.WARNING, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.type.dollarName\"/*nonNLS*/), null);\r", "-\t\t\treturn new Status(IStatus.WARNING, JavaCore.PLUGIN_ID, -1, \"By convention, Java type names usually start with an uppercase letter.\", null);\r", "+\t\t\treturn new Status(IStatus.WARNING, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.type.lowercaseName\"/*nonNLS*/), null);\r", "-\t\treturn new Status(IStatus.OK, JavaCore.PLUGIN_ID, -1, \"OK\", null);\r", "+\t\treturn new Status(IStatus.OK, JavaCore.PLUGIN_ID, -1, \"OK\"/*nonNLS*/, null);\r", "-\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, \"The type name \" + name + \" is not a valid identifier.\", null);\r", "+\t\treturn new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"convention.type.invalidName\"/*nonNLS*/, name), null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7eaec4b8e45102ee4d3aa26b58dbaf27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/jdom/DOMNode.java", "commitBeforeChange": "79d0c2f491160c45c925011f7ac69394bca87445", "commitAfterChange": "5e822caf41e5c8401dd961b84bb7f6d0d93a554e", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "\r public void insertSibling(IDOMNode sibling) throws IllegalArgumentException, DOMException", "signatureAfterChange": "\r public void insertSibling(IDOMNode sibling) throws IllegalArgumentException, DOMException", "diff": ["-\t\tthrow new IllegalArgumentException(\"attempt to insert null sibling\");\r", "+\t\tthrow new IllegalArgumentException(Util.bind(\"dom.addNullSibling\"/*nonNLS*/));\r", "-\t\tthrow new DOMException(\"attempt to insert sibling before root node\");\r", "+\t\tthrow new DOMException(Util.bind(\"dom.addSiblingBeforeRoot\"/*nonNLS*/));\r", "-\t\tthrow new DOMException(\"attempt to insert sibling of incompatible type\");\r", "+\t\tthrow new DOMException(Util.bind(\"dom.addIncompatibleSibling\"/*nonNLS*/));\r", "-\t\tthrow new DOMException(\"attempt to insert sibling that is already parented\");\r", "+\t\tthrow new DOMException(Util.bind(\"dom.addSiblingWithParent\"/*nonNLS*/));\r", "-\t\tthrow new DOMException(\"attempt to insert ancestor as sibling\");\r", "+\t\tthrow new DOMException(Util.bind(\"dom.addAncestorAsSibling\"/*nonNLS*/));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86548f97663e61774c2118ae8bfa25c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/jdom/DOMNode.java", "commitBeforeChange": "79d0c2f491160c45c925011f7ac69394bca87445", "commitAfterChange": "5e822caf41e5c8401dd961b84bb7f6d0d93a554e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r void basicAddChild(IDOMNode child) throws IllegalArgumentException, DOMException", "signatureAfterChange": "\r void basicAddChild(IDOMNode child) throws IllegalArgumentException, DOMException", "diff": ["-\t\tthrow new DOMException(\"attempt to add child to node that cannot have children\");\r", "+\t\tthrow new DOMException(Util.bind(\"dom.unableAddChild\"/*nonNLS*/));\r", "-\t\tthrow new IllegalArgumentException(\"attempt to add null child\");\r", "+\t\tthrow new IllegalArgumentException(Util.bind(\"dom.addNullChild\"/*nonNLS*/));\r", "-\t\tthrow new DOMException(\"attempt to add child of incompatible type\");\r", "+\t\tthrow new DOMException(Util.bind(\"dom.addIncompatibleChild\"/*nonNLS*/));\r", "-\t\tthrow new DOMException(\"attempt to add child that is already parented\");\r", "+\t\tthrow new DOMException(Util.bind(\"dom.addChildWithParent\"/*nonNLS*/));\r", "-\t\tthrow new DOMException(\"attempt to add ancestor as child\");\r", "+\t\tthrow new DOMException(Util.bind(\"dom.addAncestorAsChild\"/*nonNLS*/));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd1ea9499706ce7bb1ff026c1263754b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/StateSnapConstantPool.java", "commitBeforeChange": "c66df91fe4ef54ca3fc328225a1127f6072a0caf", "commitAfterChange": "05b313c1ebccd8136a07de8477552de6fc20b5e1", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r private IHandle readHandle(IDevelopmentContext dc, DataInputStream in, int tag) throws IOException", "signatureAfterChange": "\r private IHandle readHandle(IDevelopmentContext dc, DataInputStream in, int tag) throws IOException", "diff": ["-\t\t\tthrow new IOException(\"Internal error\");\r", "+\t\t\tthrow new IOException(Util.bind(\"build.formatError\"/*nonNLS*/));\r", "-\t\t\t\tthrow new IOException(\"Bad format\");\r", "+\t\t\t\tthrow new IOException(Util.bind(\"build.formatError\"/*nonNLS*/));\r", "-\t\t\t\tthrow new IOException(\"Bad format\");\r", "+\t\t\t\tthrow new IOException(Util.bind(\"build.formatError\"/*nonNLS*/));\r", "-\t\t\t\tthrow new IOException(\"Bad format\");\r", "+\t\t\t\tthrow new IOException(Util.bind(\"build.formatError\"/*nonNLS*/));\r", "-\t\t\tthrow new IOException(\"Unexpected kind of pool item\");\r", "+\t\t\tthrow new IOException(Util.bind(\"build.unexpectedPoolItem\"/*nonNLS*/));\r"]}], "num": 50857}
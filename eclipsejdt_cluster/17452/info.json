{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b928d640452a6cb919d91ad77a48f04a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ebbbaf505070f1176d848f692a92800", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "175d17758caca31d219274d97744ed098a723a04", "commitAfterChange": "a0e0e8edfcf9e9bf92250f1c0aef0668ba700e08", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic IAnnotationBinding[] getAnnotations()", "signatureAfterChange": "  \tpublic IAnnotationBinding[] getAnnotations()", "diff": ["-\t\tint length = 0;", "-\t\torg.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] internalAnnotations = null;", "-\t\tif (this.binding.original() == this.binding) {", "-\t\t\tinternalAnnotations = this.binding.getAnnotations();", "-\t\t\tif (internalAnnotations != null) {", "-\t\t\t\tlength = internalAnnotations.length;", "-\t\t\t}", "-\t\t}", "+\t\torg.eclipse.jdt.internal.compiler.lookup.AnnotationBinding[] internalAnnotations = this.binding.getAnnotations();", "+\t\tint length = internalAnnotations == null ? 0 : internalAnnotations.length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "757702151fd6c77f08305d5cdfadf8c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "ae391996f2ba5153face2dc96f44fbe25cc6cfcf", "commitAfterChange": "bd2d6cba91ea60af9a4818216d0ebbc8f0ef4bb2", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "signatureAfterChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "diff": ["-\t\t\t\t\t\tif (concreteMatch != null && concreteMatch.declaringClass.findSuperTypeOriginatingFrom(compatibleMethod.declaringClass) != null)", "-\t\t\t\t\t\t\tif (environment().methodVerifier().isParameterSubsignature(concreteMatch.original(), compatibleMethod.original()))", "-\t\t\t\t\t\t\t\tcontinue; // can skip this method since concreteMatch overrides it", "+\t\t\t\t\t\tif (concreteMatch != null && environment().methodVerifier().doesMethodOverride(concreteMatch, compatibleMethod))", "+\t\t\t\t\t\t\tcontinue; // can skip this method since concreteMatch overrides it"]}], "num": 17452}
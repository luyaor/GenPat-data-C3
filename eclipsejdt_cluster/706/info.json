{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "447eef9da34ebbdb430d83513fada921", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f04f182591a6bfa078ad23796785343", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/AllPerformanceTests.java", "commitBeforeChange": "beddf7ea3209e604e7dd085747cac8c41b2dfbd0", "commitAfterChange": "cafda46507ac63768e17397affc84b63092c7e46", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static Test suite()", "signatureAfterChange": " \tpublic static Test suite()", "diff": ["-\t\tint length = 0;", "-\t\ttry {", "-\t\t\tlength = Integer.parseInt(LENGTH);", "-\t\t\tif (length<=0 || length>testSuites.length)", "-\t\t\t\tlength = testSuites.length;", "-\t\t} catch (NumberFormatException e1) {", "-\t\t\tlength = testSuites.length;", "-\t\t}", "-\t\tif (ADDITIONAL != null) {", "-\t\t\tint pos = -1;", "+\t\tint length = testSuites.length;", "+\t\tif (ADD) {", "-\t\t\t\tpos = Integer.parseInt(ADDITIONAL);", "-\t\t\t\tint cl = complete.length;", "-\t\t\t\tClass[] newSuites = new Class[length+cl];", "-\t\t\t\tif (pos <= 0) {", "-\t\t\t\t\tSystem.arraycopy(complete, 0, newSuites, 0, cl);", "-\t\t\t\t\tSystem.arraycopy(testSuites, 0, newSuites, cl, length);", "-\t\t\t\t} else if (pos >= length) {", "-\t\t\t\t\tSystem.arraycopy(testSuites, 0, newSuites, 0, length);", "-\t\t\t\t\tSystem.arraycopy(complete, 0, newSuites, length, cl);", "-\t\t\t\t} else {", "-\t\t\t\t\tfor (int i=0; i<pos; i++)", "-\t\t\t\t\t\tnewSuites[i] = testSuites[i];", "-\t\t\t\t\tfor (int i=pos; i<pos+cl; i++)", "-\t\t\t\t\t\tnewSuites[i] = complete[i-pos];", "-\t\t\t\t\tfor (int i=pos+cl; i<length+cl; i++)", "-\t\t\t\t\t\tnewSuites[i] = testSuites[i-cl];", "-\t\t\t\t}", "+\t\t\t\tint completeLength = complete.length;", "+\t\t\t\tClass[] newSuites = new Class[length+completeLength];", "+\t\t\t\tSystem.arraycopy(testSuites, 0, newSuites, 0, length);", "+\t\t\t\tSystem.arraycopy(complete, 0, newSuites, length, completeLength);", "+", "+\t\t// Get suite acronym", "+\t\tString suitesAcronym = \"\";", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tString name = FullSourceWorkspaceTests.suiteTypeShortName(testSuites[i]);", "+\t\t\tif (name != null) {", "+\t\t\t\tsuitesAcronym += name.substring(0, 1);", "+\t\t\t}", "+\t\t}", "+\t\tFullSourceWorkspaceTests.RUN_ID = suitesAcronym; //.toLowerCase();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ef92e9d85c5c003d3413c12be76a9d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "c9df47e6bc4127d80d1e16ea8353f464e792fda3", "commitAfterChange": "514d8e9afb885d3be64fa67a03a4dd281867840f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType,  \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tMethodBinding matchingMethod, \t\tObjectVector found)", "signatureAfterChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType,  \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found)", "diff": ["-\tpublic MethodBinding findDefaultAbstractMethod(", "+\tprotected MethodBinding findDefaultAbstractMethod(", "-\t\tMethodBinding matchingMethod,", "-\t\t\tmatchingMethod = findMethodInSuperInterfaces(currentType, selector, found, matchingMethod);", "+\t\t\tfindMethodInSuperInterfaces(currentType, selector, found);", "-\t\tif (foundSize == startFoundSize) {", "-\t\t\tif (matchingMethod != null)", "-\t\t\t\tunitScope.recordTypeReferences(matchingMethod.thrownExceptions);", "-\t\t\treturn matchingMethod; // maybe null", "-\t\t}", "-\t\tMethodBinding[] candidates = new MethodBinding[foundSize - startFoundSize];", "+\t\tif (foundSize == startFoundSize)", "+\t\t\treturn null;", "+\t\tMethodBinding[] candidates = null;", "-\t\t\t\tif (compatibleMethod.isValidBinding())", "+\t\t\t\tif (compatibleMethod.isValidBinding()) {", "+\t\t\t\t\tif (candidatesCount == 0)", "+\t\t\t\t\t\tcandidates = new MethodBinding[foundSize - startFoundSize];", "-\t\t\t\telse if (problemMethod == null)", "+\t\t\t\t} else if (problemMethod == null) {", "+\t\t\t\t}", "-\t\tif (candidatesCount == 0) { // try to find a close match when the parameter order is wrong or missing some parameters", "-\t\t\tif (problemMethod != null) return problemMethod;", "-\t\t\tint argLength = argumentTypes.length;", "-\t\t\tnextMethod : for (int i = 0; i < foundSize; i++) {", "-\t\t\t\tMethodBinding methodBinding = (MethodBinding) found.elementAt(i);", "-\t\t\t\tTypeBinding[] params = methodBinding.parameters;", "-\t\t\t\tint paramLength = params.length;", "-\t\t\t\tnextArg: for (int a = 0; a < argLength; a++) {", "-\t\t\t\t\tTypeBinding arg = argumentTypes[a];", "-\t\t\t\t\tfor (int p = 0; p < paramLength; p++)", "-\t\t\t\t\t\tif (params[p] == arg)", "-\t\t\t\t\t\t\tcontinue nextArg;", "-\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t}", "-\t\t\t\treturn methodBinding;", "-\t\t\t}", "-\t\t\treturn (MethodBinding) found.elementAt(0); // no good match so just use the first one found", "-\t\t}", "+\t\tif (candidatesCount == 0)", "+\t\t\treturn problemMethod; // can be null", "-\t\tboolean isCompliant14 = compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4;", "-\t\tif (isCompliant14)", "+\t\tif (compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4)"]}], "num": 706}
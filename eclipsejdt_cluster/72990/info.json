{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7982508c162264d9e9759b726cda29c9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53c7cff5441b6f150757ea4bd9c07f84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ImportRewrite.java", "commitBeforeChange": "25cb9ce2b0a42eaaa079306fa88b8294a5b0343f", "commitAfterChange": "4ce91958103bed0391aa763e032ff18d6e80eeff", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " final int findInImports(String qualifier, String name, int kind)", "signatureAfterChange": " final int findInImports(String qualifier, String name, int kind)", "diff": ["-\t\tif (this.filterImplicitImports && this.useContextToFilterImplicitImports) {", "-\t\t\tString fPackageName= this.compilationUnit.getParent().getElementName();", "-\t\t\tString mainTypeSimpleName= JavaCore.removeJavaLikeExtension(this.compilationUnit.getElementName());", "-\t\t\tString fMainTypeName= Util.concatenateName(fPackageName, mainTypeSimpleName, '.');", "-\t\t\tif (kind == ImportRewriteContext.KIND_TYPE", "-\t\t\t\t\t&& (qualifier.equals(fPackageName)", "-\t\t\t\t\t\t\t|| fMainTypeName.equals(Util.concatenateName(qualifier, name, '.'))))", "-\t\t\t\treturn ImportRewriteContext.RES_NAME_FOUND;", "+", "+\t\tString packageName= this.compilationUnit.getParent().getElementName();", "+\t\tif (kind == ImportRewriteContext.KIND_TYPE) {", "+\t\t\tif (this.filterImplicitImports && this.useContextToFilterImplicitImports) {", "+\t\t\t\tString mainTypeSimpleName= JavaCore.removeJavaLikeExtension(this.compilationUnit.getElementName());", "+\t\t\t\tString mainTypeName= Util.concatenateName(packageName, mainTypeSimpleName, '.');", "+\t\t\t\tif (qualifier.equals(packageName)", "+\t\t\t\t\t\t|| mainTypeName.equals(Util.concatenateName(qualifier, name, '.'))) {", "+\t\t\t\t\treturn ImportRewriteContext.RES_NAME_FOUND;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif (this.astRoot != null) {", "+\t\t\t\t\tList<AbstractTypeDeclaration> types = this.astRoot.types();", "+\t\t\t\t\tint nTypes = types.size();", "+\t\t\t\t\tfor (int i = 0; i < nTypes; i++) {", "+\t\t\t\t\t\tAbstractTypeDeclaration type = types.get(i);", "+\t\t\t\t\t\tSimpleName simpleName = type.getName();", "+\t\t\t\t\t\tif (simpleName.getIdentifier().equals(name)) { ", "+\t\t\t\t\t\t\treturn qualifier.equals(packageName)", "+\t\t\t\t\t\t\t\t\t? ImportRewriteContext.RES_NAME_FOUND", "+\t\t\t\t\t\t\t\t\t: ImportRewriteContext.RES_NAME_CONFLICT;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tIType[] types = this.compilationUnit.getTypes();", "+\t\t\t\t\t\tint nTypes = types.length;", "+\t\t\t\t\t\tfor (int i = 0; i < nTypes; i++) {", "+\t\t\t\t\t\t\tIType type = types[i];", "+\t\t\t\t\t\t\tString typeName = type.getElementName();", "+\t\t\t\t\t\t\tif (typeName.equals(name)) {", "+\t\t\t\t\t\t\t\treturn qualifier.equals(packageName)", "+\t\t\t\t\t\t\t\t\t\t? ImportRewriteContext.RES_NAME_FOUND", "+\t\t\t\t\t\t\t\t\t\t: ImportRewriteContext.RES_NAME_CONFLICT;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t// don't want to throw an exception here", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "590df1ac0abe93b541aaed04ec2b7974", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ImportRewrite.java", "commitBeforeChange": "0b563e31d397e8bd32c10021c2c03216ee65589f", "commitAfterChange": "ff27e2c47bba27e96f223ad4f3af6e2e2ed2e827", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " final int findInImports(String qualifier, String name, int kind)", "signatureAfterChange": " final int findInImports(String qualifier, String name, int kind)", "diff": ["+", "+\t\tint nTypes = 0;", "+\t\tif (this.astRoot != null) {", "+\t\t\tList types = this.astRoot.types();", "+\t\t\tnTypes = types != null ? types.size() : 0;", "+\t\t\tfor (int i = 0; i < nTypes; i++) {", "+\t\t\t\tAbstractTypeDeclaration type = (AbstractTypeDeclaration) types.get(i);", "+\t\t\t\tSimpleName simpleName;", "+\t\t\t\tif (type != null && (simpleName = type.getName()) != null && simpleName.toString().equals(name)) { ", "+\t\t\t\t\treturn ImportRewriteContext.RES_NAME_CONFLICT;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (nTypes <= 0 && this.compilationUnit != null) {", "+\t\t\ttry {", "+\t\t\t\tIType[] types = this.compilationUnit.getTypes();", "+\t\t\t\tnTypes = types.length;", "+\t\t\t\tfor (int i = 0; i < nTypes; i++) {", "+\t\t\t\t\tIType type = types[i];", "+\t\t\t\t\tString typeName = type.getElementName();", "+\t\t\t\t\tif (typeName != null && typeName.equals(name)) ", "+\t\t\t\t\t\treturn ImportRewriteContext.RES_NAME_CONFLICT;", "+\t\t\t\t}", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// TODO Auto-generated catch block", "+\t\t\t\te.printStackTrace();", "+\t\t\t}", "+\t\t}", "+"]}], "num": 72990}
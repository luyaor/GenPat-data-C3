{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9597a52e8b6dc20b87f05267be5aa356", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46b2951351041bd029d4f64331ac24a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "06e44af1d1177a8820136cde1fbe3146b9563e7f", "commitAfterChange": "c0452100f2ed18d65cf0dd0efb6f9fc0ffa98156", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 35, "signatureBeforeChange": "  \tprotected void setUp() throws Exception", "signatureAfterChange": "  \tprotected void setUp() throws Exception", "diff": ["+\t\tif (RUN_JAVAC) {", "+\t\t\tif (!getClass().getName().equals(CURRENT_CLASS_NAME)) {", "+\t\t\t\tif (javacFullLog == null) {", "+\t\t\t\t\t// One time initialization of javac related concerns", "+\t\t\t\t\t// compute command lines and extract javac version", "+\t\t\t\t\tString jdkRootDirectory = System.getProperty(\"jdk.root\");", "+\t\t\t\t\tif (jdkRootDirectory == null)", "+\t\t\t\t\t  jdkRootDirPath = (new Path(Util.getJREDirectory())).removeLastSegments(1);", "+\t\t\t\t\telse ", "+\t\t\t\t\t\tjdkRootDirPath = new Path(jdkRootDirectory);", "+\t\t", "+\t\t\t\t\tStringBuffer cmdLineHeader = new StringBuffer(jdkRootDirPath.", "+\t\t\t\t\t\t\tappend(\"bin\").append(JAVA_NAME).toString()); // PREMATURE replace JAVA_NAME and JAVAC_NAME with locals? depends on potential reuse", "+\t\t\t\t\tjavaCommandLineHeader = cmdLineHeader.toString();", "+\t\t\t\t\tcmdLineHeader = new StringBuffer(jdkRootDirPath.", "+\t\t\t\t\t\t\tappend(\"bin\").append(JAVAC_NAME).toString());", "+\t\t\t\t\tcmdLineHeader.append(\" -classpath . \");", "+\t\t\t\t\t  // start with the current directory which contains the source files", "+\t\t\t\t\tProcess compileProcess = Runtime.getRuntime().exec(", "+\t\t\t\t\t\tcmdLineHeader.toString() + \" -version\", null, null);", "+\t        Logger versionLogger = new Logger(compileProcess.getErrorStream(), \"\"); // WORK            ", "+\t        versionLogger.start();", "+\t        compileProcess.waitFor();", "+\t\t\t\t\tversionLogger.join(); // make sure we get the whole output", "+\t\t\t\t\tString version = versionLogger.buffer.toString();", "+\t\t\t\t\tint eol = version.indexOf('\\n');", "+\t\t\t\t\tversion = version.substring(0, eol);", "+\t\t\t\t\tcmdLineHeader.append(\" -d \");", "+\t\t\t\t\tcmdLineHeader.append(JAVAC_OUTPUT_DIR.indexOf(\" \") != -1 ? \"\\\"\" + JAVAC_OUTPUT_DIR + \"\\\"\" : JAVAC_OUTPUT_DIR);", "+\t\t\t\t\tcmdLineHeader.append(\" -source 1.5 -deprecation -Xlint:unchecked \"); // enable recommended warnings", "+\t\t\t\t\t// REVIEW consider enabling all warnings instead? Philippe does not see", "+\t\t\t\t\t//        this as ez to use (too many changes in logs)", "+\t\t\t\t\tjavacCommandLineHeader = cmdLineHeader.toString();", "+", "+\t\t\t\t\t// open output log", "+\t\t\t\t\tString javacFullLogFileName = ", "+\t\t\t\t\t\t\tUtil.getOutputDirectory() +\tFile.separatorChar + ", "+\t\t\t\t\t\t\tversion.replace(' ', '_') + \"_\" + ", "+\t\t\t\t\t    (new SimpleDateFormat(\"yyyyMMdd_HHmmss\")).format(new Date()) +", "+\t\t\t\t\t    \".txt\";", "+\t\t\t\t\tjavacFullLog = ", "+\t\t\t\t\t  \tnew PrintWriter(new FileOutputStream(javacFullLogFileName));", "+\t\t\t\t\tjavacFullLog.println(version); // so that the contents is self sufficient", "+\t\t\t\t\tSystem.out.println(\"***************************************************************************\");", "+\t\t\t\t\tSystem.out.println(\"* Sun Javac compiler output archived into file:\");", "+\t\t\t\t\tSystem.out.println(\"* \" + javacFullLogFileName);", "+\t\t\t\t\tSystem.out.println(\"***************************************************************************\");", "+\t\t\t\t}", "+\t\t\t\t// per class initialization", "+\t\t\t\tCURRENT_CLASS_NAME = getClass().getName();", "+\t\t\t\tdualPrintln(\"***************************************************************************\");", "+\t\t\t\tSystem.out.print(\"* Comparison with Sun Javac compiler for class \");", "+\t\t\t\tdualPrintln(CURRENT_CLASS_NAME.substring(CURRENT_CLASS_NAME.lastIndexOf('.')+1) + ", "+\t\t\t\t\t\t\" (\" + TESTS_COUNTERS.get(CURRENT_CLASS_NAME) + \" tests)\");", "+\t\t\t\tSystem.out.println(\"***************************************************************************\");", "+\t\t\t\tDIFF_COUNTERS[0] = 0;", "+\t\t\t\tDIFF_COUNTERS[1] = 0;", "+\t\t\t\tDIFF_COUNTERS[2] = 0;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4856c618864adc5b03347ab9531ceda1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractComparisonTest.java", "commitBeforeChange": "fa16fc80b475f974c3040ef90f01075968f51405", "commitAfterChange": "9528b13b60b5267a27dfdeac3b8ea9a804476535", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprotected void runJavac(String[] testFiles, final String expectedProblemLog)", "signatureAfterChange": " \tprotected void runJavac(String[] testFiles, final String expectedProblemLog, final String expectedSuccessOutputString, boolean shouldFlushOutputDirectory)", "diff": ["-\tprotected void runJavac(String[] testFiles, final String expectedProblemLog) {", "+\tprotected void runJavac(String[] testFiles, final String expectedProblemLog, final String expectedSuccessOutputString, boolean shouldFlushOutputDirectory) {", "+\t\t\tif (shouldFlushOutputDirectory)", "+\t\t\t\tcleanupDirectory(new File(JAVAC_OUTPUT_DIR));", "+", "-\t\t\t", "+", "-\t\t\tProcess process = null;", "+\t\t\tProcess compileProcess = null;", "+\t\t\tProcess execProcess = null;", "-\t\t\t\tString[] classpath = getDefaultClassPaths();", "+\t\t\t\tString[] classpath = Util.concatWithClassLibs(JAVAC_OUTPUT_DIR, false);", "+\t\t\t\tcp.append(\" -classpath .;\"); // start with the current directory which contains the source files", "-\t\t\t\tcmdLine.append(\" -classpath \");", "+\t\t\t\tcmdLine.append(\" -d \");", "+\t\t\t\tcmdLine.append(JAVAC_OUTPUT_DIR.indexOf(\" \") != -1 ? \"\\\"\" + JAVAC_OUTPUT_DIR + \"\\\"\" : JAVAC_OUTPUT_DIR);", "-\t\t\t\tprocess = Runtime.getRuntime().exec(cmdLine.toString(), null, this.dirPath.toFile());", "+\t\t\t\tcompileProcess = Runtime.getRuntime().exec(cmdLine.toString(), null, this.dirPath.toFile());", "-\t            Logger errorLogger = new Logger(process.getErrorStream(), \"ERROR\");            ", "-\t            ", "+\t            Logger errorLogger = new Logger(compileProcess.getErrorStream(), \"ERROR\");            ", "+", "-\t            Logger outputLogger = new Logger(process.getInputStream(), \"OUTPUT\");", "-\t                ", "+\t            Logger outputLogger = new Logger(compileProcess.getInputStream(), \"OUTPUT\");", "+", "-\t\t\t\tint exitValue = process.waitFor();", "+\t\t\t\tint exitValue = compileProcess.waitFor();", "-\t\t\t\t\t}", "-\t\t\t\t\telse if (errorLogger.buffer.length() > 0) {", "+\t\t\t\t\t} else if (errorLogger.buffer.length() > 0) {", "+\t\t\t\t\t} else if (expectedSuccessOutputString != null) {", "+\t\t\t\t\t\t// Compute command line", "+\t\t\t\t\t\tIPath javaPath = jdkDir.append(\"bin\").append(\"java.exe\");", "+\t\t\t\t\t\tStringBuffer javaCmdLine = new StringBuffer(javaPath.toString());", "+\t\t\t\t\t\tjavaCmdLine.append(cp);", "+\t\t\t\t\t\t// assume executable class is name of first test file", "+\t\t\t\t\t\tjavaCmdLine.append(' ').append(testFiles[0].substring(0, testFiles[0].indexOf('.')));", "+\t\t\t\t\t\texecProcess = Runtime.getRuntime().exec(javaCmdLine.toString(), null, this.dirPath.toFile());", "+\t\t\t\t\t\tLogger logger = new Logger(execProcess.getInputStream(), \"OUTPUT\");", "+\t\t\t\t\t\tlogger.start();", "+", "+\t\t\t\t\t\texitValue = execProcess.waitFor();", "+\t\t\t\t\t\tString javaOutput = logger.buffer.toString().trim();", "+\t\t\t\t\t\tif (!expectedSuccessOutputString.equals(javaOutput)) {", "+\t\t\t\t\t\t\tSystem.out.println(\"========================================\");", "+\t\t\t\t\t\t\tSystem.out.println(testName+\": runtime results don't match:\");", "+\t\t\t\t\t\t\tSystem.out.println(expectedSuccessOutputString);", "+\t\t\t\t\t\t\tSystem.out.println(javaOutput);", "+\t\t\t\t\t\t\tSystem.out.println(\"\\n\");", "+\t\t\t\t\t\t\tprintFiles(testFiles);", "+\t\t\t\t\t\t}", "-\t\t\t\tif (process != null) process.destroy();", "+\t\t\t\tif (compileProcess != null) compileProcess.destroy();", "+\t\t\t\tif (execProcess != null) execProcess.destroy();", "-", "+\t\t} catch (Exception e) {", "+\t\t\te.printStackTrace();", "+\t\t} finally {", "-\t\t} catch (Exception e) {", "-\t\t\te.printStackTrace();"]}], "num": 51974}
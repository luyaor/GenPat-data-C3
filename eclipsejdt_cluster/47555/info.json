{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1e3ea40b4a313f9266bcaeb6f1841b6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1401707ee3a719b81eae9ad7d33c7bc9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestOptions.java", "commitBeforeChange": "916e1b97cb8f68e0c3d2550db5f74003efc3f036", "commitAfterChange": "cb0883381704b865376b174b125a5d26ee0abae4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tprivate String resultForInvalidTagsMethodOrConstructor(int visibility)", "signatureAfterChange": " \t \tprivate String resultForInvalidTagsMethodOrConstructor(int visibility)", "diff": ["+\t", "+\tprivate String resultForInvalidTagsMethodOrConstructor(int visibility) {", "+\t\tString[] errors = errorsForInvalidTagsMethodOrConstructor(visibility);", "+\t\tint length = errors.length;", "+\t\tStringBuffer buffer = new StringBuffer(\"----------\\n\");", "+\t\tfor (int i=0; i<length; i++) {", "+\t\t\tbuffer.append(errors[i]);", "+\t\t}", "+\t\treturn buffer.toString();", "+\t}", "-\t", "-\tprivate String resultForInvalidTagsMethodOrConstructor(int visibility) {", "-\t\tif (reportInvalidJavadocTagsDeprecatedRef == null && reportInvalidJavadocTagsNotVisibleRef == null) {", "-\t\t\tString result = \"----------\\n\";", "-\t\t\tfor (int i=0; i<=visibility; i++) {", "-\t\t\t\tresult += METHODS_ERRORS[i];", "-\t\t\t}", "-\t\t\treturn result;", "-\t\tStringBuffer result = new StringBuffer(\"----------\\n\");", "-\t\tfor (int i=0, count=1; i<= visibility; i++) {", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(METHODS_ERRORS[i], \"\\n\");", "-\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\tStringBuffer error = new StringBuffer();", "-\t\t\t\tboolean add = true;", "-\t\t\t\tfor (int j=0; j<5; j++) {", "-\t\t\t\t\tString line = tokenizer.nextToken();", "-\t\t\t\t\tswitch (j) {", "-\t\t\t\t\t\tcase 0:", "-\t\t\t\t\t\t\terror.append(count);", "-\t\t\t\t\t\t\terror.append(line.substring(line.indexOf('.')));", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase 3:", "-\t\t\t\t\t\t\tif (CompilerOptions.DISABLED.equals(reportInvalidJavadocTagsDeprecatedRef)) {", "-\t\t\t\t\t\t\t\tadd = line.indexOf(\"is deprecated\") == -1;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (add && CompilerOptions.DISABLED.equals(reportInvalidJavadocTagsNotVisibleRef)) {", "-\t\t\t\t\t\t\t\tadd = line.indexOf(\"is not visible\") == -1 && line.indexOf(\"visibility for malformed doc comments\") == -1;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\terror.append(line);", "-\t\t\t\t\terror.append('\\n');", "-\t\t\t\tif (add) {", "-\t\t\t\t\tcount++;", "-\t\t\t\t\tresult.append(error);", "-\t\t\t\t}", "-\t\treturn result.toString();", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73399954358704c5ebb8ac354f63f3c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestOptions.java", "commitBeforeChange": "916e1b97cb8f68e0c3d2550db5f74003efc3f036", "commitAfterChange": "cb0883381704b865376b174b125a5d26ee0abae4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tprivate String resultForInvalidTagsClassOrField(int visibility)", "signatureAfterChange": "  \tprivate String resultForInvalidTagsClassOrField(int visibility)", "diff": ["+", "+\tprivate String resultForInvalidTagsClassOrField(int visibility) {", "+\t\tString[] errors = errorsForInvalidTagsClassOrField(visibility);", "+\t\tint length = errors.length;", "+\t\tStringBuffer buffer = new StringBuffer(\"----------\\n\");", "+\t\tfor (int i=0; i<length; i++) {", "+\t\t\tbuffer.append(errors[i]);", "+\t\t}", "+\t\treturn buffer.toString();", "+\t}", "-", "-\tprivate String resultForInvalidTagsClassOrField(int visibility) {", "-\t\tif (reportInvalidJavadocTagsDeprecatedRef == null && reportInvalidJavadocTagsNotVisibleRef == null) {", "-\t\t\tString result = \"----------\\n\";", "-\t\t\tfor (int i=0; i<=visibility; i++) {", "-\t\t\t\tresult += CLASSES_ERRORS[i];", "-\t\t\t}", "-\t\t\treturn result;", "-\t\t}", "-\t\tStringBuffer result = new StringBuffer(\"----------\\n\");", "-\t\tfor (int i=0, count=1; i<= visibility; i++) {", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(CLASSES_ERRORS[i], \"\\n\");", "-\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\tStringBuffer error = new StringBuffer();", "-\t\t\t\tboolean add = true;", "-\t\t\t\tfor (int j=0; j<5; j++) {", "-\t\t\t\t\tString line = tokenizer.nextToken();", "-\t\t\t\t\tswitch (j) {", "-\t\t\t\t\t\tcase 0:", "-\t\t\t\t\t\t\terror.append(count);", "-\t\t\t\t\t\t\terror.append(line.substring(line.indexOf('.')));", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase 3:", "-\t\t\t\t\t\t\tif (CompilerOptions.DISABLED.equals(reportInvalidJavadocTagsDeprecatedRef)) {", "-\t\t\t\t\t\t\t\tadd = line.indexOf(\"is deprecated\") == -1;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (add && CompilerOptions.DISABLED.equals(reportInvalidJavadocTagsNotVisibleRef)) {", "-\t\t\t\t\t\t\t\tadd = line.indexOf(\"is not visible\") == -1 && line.indexOf(\"visibility for malformed doc comments\") == -1;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\terror.append(line);", "-\t\t\t\t\t}", "-\t\t\t\t\terror.append('\\n');", "-\t\t\t\t}", "-\t\t\t\tif (add) {", "-\t\t\t\t\tcount++;", "-\t\t\t\t\tresult.append(error);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\treturn result.toString();"]}], "num": 47555}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b91deb4204a96446fdbd5ba74824be9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "127fe7b458edfe86975e93deb2b8609e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void completeCodeAttributeForProblemMethod( \t\tAbstractMethodDeclaration method, \t\tMethodBinding binding, \t\tint codeAttributeOffset, \t\tint[] startLineIndexes)", "signatureAfterChange": " \tpublic void completeCodeAttributeForProblemMethod( \t\tAbstractMethodDeclaration method, \t\tMethodBinding binding, \t\tint codeAttributeOffset, \t\tint[] startLineIndexes)", "diff": ["-\t\t\tif (!codeStream.methodDeclaration.isStatic()) {", "+\t\t\tint nameIndex;", "+\t\t\tSourceTypeBinding declaringClassBinding = null;", "+\t\t\tfinal boolean methodDeclarationIsStatic = codeStream.methodDeclaration.isStatic();", "+\t\t\tif (!methodDeclarationIsStatic) {", "-\t\t\t\tint nameIndex = constantPool.literalIndex(QualifiedNamesConstants.This);", "+\t\t\t\tnameIndex = constantPool.literalIndex(QualifiedNamesConstants.This);", "+\t\t\t\tdeclaringClassBinding = (SourceTypeBinding) codeStream.methodDeclaration.binding.declaringClass;", "-\t\t\t\t\tconstantPool.literalIndex(", "-\t\t\t\t\t\tcodeStream.methodDeclaration.binding.declaringClass.signature());", "+\t\t\t\t\tconstantPool.literalIndex(declaringClassBinding.signature());", "+\t\t\t// used to remember the local variable with a generic type", "+\t\t\tint genericLocalVariablesCounter = 0;", "+\t\t\tLocalVariableBinding[] genericLocalVariables = null;", "+\t\t\tint numberOfGenericEntries = 0;", "+\t\t\t", "-\t\t\t\t\tif ((syntheticArguments = methodDeclaringClass.syntheticEnclosingInstances())", "-\t\t\t\t\t\t!= null) {", "+\t\t\t\t\tif ((syntheticArguments = methodDeclaringClass.syntheticEnclosingInstances()) != null) {", "+\t\t\t\t\t\t\tfinal TypeBinding localVariableTypeBinding = localVariable.type;", "+\t\t\t\t\t\t\tif (localVariableTypeBinding.isParameterizedType() || localVariableTypeBinding.isTypeVariable()) {", "+\t\t\t\t\t\t\t\tif (genericLocalVariables == null) {", "+\t\t\t\t\t\t\t\t\t// we cannot have more than max locals", "+\t\t\t\t\t\t\t\t\tgenericLocalVariables = new LocalVariableBinding[max];", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tgenericLocalVariables[genericLocalVariablesCounter++] = localVariable;", "+\t\t\t\t\t\t\t\tnumberOfGenericEntries++;\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tint nameIndex = constantPool.literalIndex(localVariable.name);", "+\t\t\t\t\t\t\tnameIndex = constantPool.literalIndex(localVariable.name);", "-\t\t\t\t\t\t\tdescriptorIndex = constantPool.literalIndex(localVariable.type.signature());", "+\t\t\t\t\t\t\tdescriptorIndex = constantPool.literalIndex(localVariableTypeBinding.signature());", "+\t\t\t", "+\t\t\tint genericArgumentsCounter = 0;", "+\t\t\tint[] genericArgumentsNameIndexes = null;", "+\t\t\tint[] genericArgumentsResolvedPositions = null;", "+\t\t\tTypeBinding[] genericArgumentsTypeBindings = null;", "+", "-\t\t\t\t\t\tint nameIndex = constantPool.literalIndex(arguments[i].name);", "+\t\t\t\t\t\tnameIndex = constantPool.literalIndex(arguments[i].name);", "+\t\t\t\t\t\tint resolvedPosition = argSize;", "+\t\t\t\t\t\tif (argumentBinding.isParameterizedType() || argumentBinding.isTypeVariable()) {", "+\t\t\t\t\t\t\tif (genericArgumentsCounter == 0) {", "+\t\t\t\t\t\t\t\t// we cannot have more than max locals", "+\t\t\t\t\t\t\t\tgenericArgumentsNameIndexes = new int[max];", "+\t\t\t\t\t\t\t\tgenericArgumentsResolvedPositions = new int[max];", "+\t\t\t\t\t\t\t\tgenericArgumentsTypeBindings = new TypeBinding[max];", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tgenericArgumentsNameIndexes[genericArgumentsCounter] = nameIndex;", "+\t\t\t\t\t\t\tgenericArgumentsResolvedPositions[genericArgumentsCounter] = resolvedPosition;", "+\t\t\t\t\t\t\tgenericArgumentsTypeBindings[genericArgumentsCounter++] = argumentBinding;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tint resolvedPosition = argSize;", "+\t\t\t", "+\t\t\tfinal boolean currentInstanceIsGeneric = ", "+\t\t\t\t!methodDeclarationIsStatic", "+\t\t\t\t&& declaringClassBinding != null", "+\t\t\t\t&& declaringClassBinding.typeVariables != NoTypeVariables;", "+\t\t\tif (genericLocalVariablesCounter != 0 || genericArgumentsCounter != 0 || currentInstanceIsGeneric) {", "+\t\t\t\t// add the local variable type table attribute", "+\t\t\t\tnumberOfEntries = numberOfGenericEntries + genericArgumentsCounter + (currentInstanceIsGeneric ? 1 : 0);", "+\t\t\t\t// reserve enough space", "+\t\t\t\tint maxOfEntries = 8 + numberOfEntries * 10;", "+\t\t\t\tif (localContentsOffset + maxOfEntries >= this.contents.length) {", "+\t\t\t\t\tresizeContents(maxOfEntries);", "+\t\t\t\t}", "+\t\t\t\tint localVariableTypeNameIndex =", "+\t\t\t\t\tconstantPool.literalIndex(AttributeNamesConstants.LocalVariableTypeTableName);", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) (localVariableTypeNameIndex >> 8);", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) localVariableTypeNameIndex;", "+\t\t\t\tvalue = numberOfEntries * 10 + 2;", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) (value >> 24);", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) (value >> 16);", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) (value >> 8);", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) value;", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) (numberOfEntries >> 8);", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) numberOfEntries;", "+\t\t\t\tif (currentInstanceIsGeneric) {", "+\t\t\t\t\tnumberOfEntries++;", "+\t\t\t\t\tthis.contents[localContentsOffset++] = 0; // the startPC for this is always 0", "+\t\t\t\t\tthis.contents[localContentsOffset++] = 0;", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (code_length >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) code_length;", "+\t\t\t\t\tnameIndex = constantPool.literalIndex(QualifiedNamesConstants.This);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (nameIndex >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) nameIndex;", "+\t\t\t\t\tdescriptorIndex = constantPool.literalIndex(declaringClassBinding.genericTypeSignature());", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (descriptorIndex >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) descriptorIndex;", "+\t\t\t\t\tthis.contents[localContentsOffset++] = 0;// the resolved position for this is always 0", "+\t\t\t\t\tthis.contents[localContentsOffset++] = 0;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tfor (int i = 0; i < genericLocalVariablesCounter; i++) {", "+\t\t\t\t\tLocalVariableBinding localVariable = genericLocalVariables[i];", "+\t\t\t\t\tthis.contents[localContentsOffset++] = 0;", "+\t\t\t\t\tthis.contents[localContentsOffset++] = 0;", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (code_length >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) code_length;", "+\t\t\t\t\tnameIndex = constantPool.literalIndex(localVariable.name);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (nameIndex >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) nameIndex;", "+\t\t\t\t\tdescriptorIndex = constantPool.literalIndex(localVariable.type.genericTypeSignature());", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (descriptorIndex >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) descriptorIndex;", "+\t\t\t\t\tint resolvedPosition = localVariable.resolvedPosition;", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (resolvedPosition >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) resolvedPosition;", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < genericArgumentsCounter; i++) {", "+\t\t\t\t\tthis.contents[localContentsOffset++] = 0;", "+\t\t\t\t\tthis.contents[localContentsOffset++] = 0;", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (code_length >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) code_length;", "+\t\t\t\t\tnameIndex = genericArgumentsNameIndexes[i];", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (nameIndex >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) nameIndex;", "+\t\t\t\t\tdescriptorIndex = constantPool.literalIndex(genericArgumentsTypeBindings[i].genericTypeSignature());", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (descriptorIndex >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) descriptorIndex;", "+\t\t\t\t\tint resolvedPosition = genericArgumentsResolvedPositions[i];", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (resolvedPosition >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) resolvedPosition;", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tattributeNumber++;", "+\t\t\t}\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d33e4d9836cee660d8b171924534b6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void completeCodeAttribute(int codeAttributeOffset)", "signatureAfterChange": " \tpublic void completeCodeAttribute(int codeAttributeOffset)", "diff": ["-\t\t\tif (localContentsOffset + 8 >= this.contents.length) {", "-\t\t\t\tresizeContents(8);", "+\t\t\tfinal boolean methodDeclarationIsStatic = codeStream.methodDeclaration.isStatic();", "+\t\t\tint maxOfEntries = 8 + 10 * (methodDeclarationIsStatic ? 0 : 1);", "+\t\t\tfor (int i = 0; i < codeStream.allLocalsCounter; i++) {", "+\t\t\t\tmaxOfEntries += 10 * codeStream.locals[i].initializationCount;", "+\t\t\t}", "+\t\t\t// reserve enough space", "+\t\t\tif (localContentsOffset + maxOfEntries >= this.contents.length) {", "+\t\t\t\tresizeContents(maxOfEntries);", "-\t\t\tif (!codeStream.methodDeclaration.isStatic()) {", "+\t\t\tSourceTypeBinding declaringClassBinding = null;", "+\t\t\tif (!methodDeclarationIsStatic) {", "-\t\t\t\tif (localContentsOffset + 10 >= this.contents.length) {", "-\t\t\t\t\tresizeContents(10);", "-\t\t\t\t}", "+\t\t\t\tdeclaringClassBinding = (SourceTypeBinding) codeStream.methodDeclaration.binding.declaringClass;", "-\t\t\t\t\t\tcodeStream.methodDeclaration.binding.declaringClass.signature());", "+\t\t\t\t\t\tdeclaringClassBinding.signature());", "-\t\t\tfor (int i = 0; i < codeStream.allLocalsCounter; i++) {", "+\t\t\t// used to remember the local variable with a generic type", "+\t\t\tint genericLocalVariablesCounter = 0;", "+\t\t\tLocalVariableBinding[] genericLocalVariables = null;", "+\t\t\tint numberOfGenericEntries = 0;", "+\t\t\t", "+\t\t\tfor (int i = 0, max = codeStream.allLocalsCounter; i < max; i++) {", "+\t\t\t\tfinal TypeBinding localVariableTypeBinding = localVariable.type;", "+\t\t\t\tboolean isParameterizedType = localVariableTypeBinding.isParameterizedType() || localVariableTypeBinding.isTypeVariable();", "+\t\t\t\tif (localVariable.initializationCount != 0 && isParameterizedType) {", "+\t\t\t\t\tif (genericLocalVariables == null) {", "+\t\t\t\t\t\t// we cannot have more than max locals", "+\t\t\t\t\t\tgenericLocalVariables = new LocalVariableBinding[max];", "+\t\t\t\t\t}", "+\t\t\t\t\tgenericLocalVariables[genericLocalVariablesCounter++] = localVariable;", "+\t\t\t\t}", "-\t\t\t\t\t\tif (localContentsOffset + 10 >= this.contents.length) {", "-\t\t\t\t\t\t\tresizeContents(10);", "+\t\t\t\t\t\tif (isParameterizedType) {", "+\t\t\t\t\t\t\tnumberOfGenericEntries++;", "-\t\t\t\t\t\tdescriptorIndex = constantPool.literalIndex(localVariable.type.signature());", "+\t\t\t\t\t\tdescriptorIndex = constantPool.literalIndex(localVariableTypeBinding.signature());", "+\t\t\t", "+\t\t\tfinal boolean currentInstanceIsGeneric = ", "+\t\t\t\t!methodDeclarationIsStatic", "+\t\t\t\t&& declaringClassBinding != null ", "+\t\t\t\t&& declaringClassBinding.typeVariables != NoTypeVariables;", "+\t\t\tif (genericLocalVariablesCounter != 0 || currentInstanceIsGeneric) {", "+\t\t\t\t// add the local variable type table attribute", "+\t\t\t\tnumberOfGenericEntries += (currentInstanceIsGeneric ? 1 : 0);", "+\t\t\t\tmaxOfEntries = 8 + numberOfGenericEntries * 10;", "+\t\t\t\t// reserve enough space", "+\t\t\t\tif (localContentsOffset + maxOfEntries >= this.contents.length) {", "+\t\t\t\t\tresizeContents(maxOfEntries);", "+\t\t\t\t}", "+\t\t\t\tint localVariableTypeNameIndex =", "+\t\t\t\t\tconstantPool.literalIndex(AttributeNamesConstants.LocalVariableTypeTableName);", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) (localVariableTypeNameIndex >> 8);", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) localVariableTypeNameIndex;", "+\t\t\t\tvalue = numberOfGenericEntries * 10 + 2;", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) (value >> 24);", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) (value >> 16);", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) (value >> 8);", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) value;", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) (numberOfGenericEntries >> 8);", "+\t\t\t\tthis.contents[localContentsOffset++] = (byte) numberOfGenericEntries;", "+\t\t\t\tif (currentInstanceIsGeneric) {", "+\t\t\t\t\tthis.contents[localContentsOffset++] = 0; // the startPC for this is always 0", "+\t\t\t\t\tthis.contents[localContentsOffset++] = 0;", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (code_length >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) code_length;", "+\t\t\t\t\tnameIndex = constantPool.literalIndex(QualifiedNamesConstants.This);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (nameIndex >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) nameIndex;", "+\t\t\t\t\tdescriptorIndex = constantPool.literalIndex(declaringClassBinding.genericTypeSignature());", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (descriptorIndex >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) descriptorIndex;", "+\t\t\t\t\tthis.contents[localContentsOffset++] = 0;// the resolved position for this is always 0", "+\t\t\t\t\tthis.contents[localContentsOffset++] = 0;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tfor (int i = 0; i < genericLocalVariablesCounter; i++) {", "+\t\t\t\t\tLocalVariableBinding localVariable = genericLocalVariables[i];", "+\t\t\t\t\tfor (int j = 0; j < localVariable.initializationCount; j++) {", "+\t\t\t\t\t\tint startPC = localVariable.initializationPCs[j << 1];", "+\t\t\t\t\t\tint endPC = localVariable.initializationPCs[(j << 1) + 1];", "+\t\t\t\t\t\tif (startPC != endPC) {", "+\t\t\t\t\t\t\t// only entries for non zero length", "+\t\t\t\t\t\t\t// now we can safely add the local entry", "+\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (startPC >> 8);", "+\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) startPC;", "+\t\t\t\t\t\t\tint length = endPC - startPC;", "+\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (length >> 8);", "+\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) length;", "+\t\t\t\t\t\t\tnameIndex = constantPool.literalIndex(localVariable.name);", "+\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (nameIndex >> 8);", "+\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) nameIndex;", "+\t\t\t\t\t\t\tdescriptorIndex = constantPool.literalIndex(localVariable.type.genericTypeSignature());", "+\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (descriptorIndex >> 8);", "+\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) descriptorIndex;", "+\t\t\t\t\t\t\tint resolvedPosition = localVariable.resolvedPosition;", "+\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (resolvedPosition >> 8);", "+\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) resolvedPosition;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tattributeNumber++;", "+\t\t\t}"]}], "num": 31916}
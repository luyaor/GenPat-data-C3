{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6214c1dd190c5fa891deb901d75539ed", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23e4e5836cef72321ee02c857d6aa6ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "d0b9fa49059380aa33c580ecd386773dc780db14", "commitAfterChange": "297d21321fa4e0f1df8ca75fc42ba95a96cc17a8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "signatureAfterChange": " \tpublic int boundCheck(Substitution substitution, TypeBinding argumentType)", "diff": ["-\t\t\t\t\t\t\t\tTypeBinding match = ((ReferenceBinding)wildcardBound).findSuperTypeWithSameErasure(superclassBound);", "+\t\t\t\t\t\t\t\tTypeBinding match = wildcardBound.findSuperTypeWithSameErasure(superclassBound);", "-\t\t\t\t\t\t\t\t\treturn TypeConstants.MISMATCH;", "+\t\t\t\t\t\t\t\t\tmatch =  superclassBound.findSuperTypeWithSameErasure(wildcardBound);", "+\t\t\t\t\t\t\t\t\tif (match != null) {", "+\t\t\t\t\t\t\t\t\t\tif (!match.isIntersectingWith(wildcardBound)) {", "+\t\t\t\t\t\t\t\t\t\t\treturn TypeConstants.MISMATCH;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tif (!wildcardBound.isTypeVariable() && !superclassBound.isTypeVariable()) {", "+\t\t\t\t\t\t\t\t\t\t\treturn TypeConstants.MISMATCH;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85528946a78150512be875791e36c5fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CopyMoveResourcesTests.java", "commitBeforeChange": "ada5a33ef9764ab2fd532e79eecbd29d36d5cbaa", "commitAfterChange": "3fbf7d7b491dc22f98214e330c97192346d8c2e9", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void testCopyReadOnlyPackageFragment() throws CoreException", "signatureAfterChange": " public void testCopyReadOnlyPackageFragment() throws CoreException", "diff": ["+\t\tIFile xSrcFile = getFile(\"/P/src/p1/p2/p3/X.java\");", "+\t\tif (xSrcFile != null) {", "+\t\t\txSrcFile.setReadOnly(false);", "+\t\t}", "+\t\t}", "+\t\tIPackageFragment p1Fragment = getPackage(\"/P/src2/p1\");", "+\t\tif (p1Fragment != null) {", "+\t\t\tp1Fragment.getResource().setReadOnly(false);", "+\t\t}", "+\t\tIPackageFragment p3Fragment = getPackage(\"/P/src2/p1/p2/p3\");", "+\t\tif (p3Fragment != null) {", "+\t\t\tp3Fragment.getResource().setReadOnly(false);", "+\t\t}", "+\t\tIFile xFile = getFile(\"/P/src2/p1/p2/p3/X.java\");", "+\t\tif (xFile != null) {", "+\t\t\txFile.setReadOnly(false);"]}], "num": 40269}
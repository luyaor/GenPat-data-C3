{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d98b050a70055a11bd5d13a991eb7eb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46bb1aea70b9bb92caa0d5838aa4c8f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": " \tpublic static String toString(char[] c)", "signatureAfterChange": " \tpublic static String toString(char[][] c)", "diff": ["-\t */", "-\tpublic static String toString(char[] c) {", "-\t\treturn new String(c);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4866ce425d6c55fdb17bd30099c7572", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/ArrayTypeImpl.java", "commitBeforeChange": "3d135dcec1efa4ab23b05f1d7871f17442469e92", "commitAfterChange": "04a3935ecc2f9e24622bcfddda7aa95a0643fdd7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public String toString()", "signatureAfterChange": "      public String toString()", "diff": ["-    public String toString(){ return _arrayBinding.toString(); }", "+    public String toString(){ ", "+    \tfinal ITypeBinding elementType = _arrayBinding.getElementType();", "+    \tfinal StringBuilder buffer = new StringBuilder();", "+    \tString name = elementType.getQualifiedName();", "+    \tbuffer.append(name);", "+\t\tfor( int i=0, dim = _arrayBinding.getDimensions(); i<dim; i++ )", "+\t\t\tbuffer.append(\"[]\"); //$NON-NLS-1$", "+\t\t", "+\t\treturn buffer.toString();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f571b1f18df0cfca14490354a181ad18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "579cea38739accce1af07b77f602e0f79cf931c4", "commitAfterChange": "394d36185f6132d3481653eabf932cfdc393023a", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " public void testBug118823() throws CoreException, InterruptedException, IOException", "signatureAfterChange": " public void testBug118823() throws CoreException, InterruptedException, IOException", "diff": ["+\t", "+\t// Class to listen for deltas on a compilation unit", "+\tclass TestDeltaListener implements IElementChangedListener {", "+\t\tString unitName;", "+\t\tboolean updated;", "+\t\tTestDeltaListener(ICompilationUnit cu) {", "+\t\t\tthis.unitName = cu.getElementName();", "+\t\t}", "+\t\tpublic void elementChanged(ElementChangedEvent event) {", "+\t\t\tif (isEventOnUnit((IJavaElementDelta)event.getSource())) {", "+\t\t\t\tthis.updated = true;", "+\t\t\t}", "+\t\t}", "+\t\tprivate boolean isEventOnUnit(IJavaElementDelta delta) {", "+\t\t\tIJavaElementDelta[] children = delta.getAffectedChildren();", "+\t\t\tif (children != null && children.length > 0) {", "+\t\t\t\tfor (int i=0, l=children.length; i<l ; i++) {", "+\t\t\t\t\tif (isEventOnUnit(children[i])) return true;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif (this.unitName.equals(delta.getElement().getElementName()) && delta.getKind() == IJavaElementDelta.CHANGED) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn false;", "+\t\t}", "+\t}", "+", "+\t// Start test", "+\t\t// Create delta listener on first working copy", "+\t\tTestDeltaListener dListener = new TestDeltaListener(this.workingCopies[0]);", "+\t\tJavaCore.addElementChangedListener(dListener);", "+", "-\t\t// Delete first workding copy file and recreate it with secondary outside eclipse", "+\t\t// Delete first working copy file and recreate it with secondary outside eclipse", "+\t\t// Wait for deltas on updated working copy", "+\t\tint max = 0;", "+\t\twhile (!dListener.updated && max++ < 10) {", "+\t\t\tThread.sleep(100);", "+\t\t}", "+\t\tassertTrue(\"We should have compilation unit updated\", dListener.updated);", "+"]}], "num": 32384}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4729dc44355d583946a84230eb14f5b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "065f7fd7596576fb492b93073360d934", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingMethodDeclTest.java", "commitBeforeChange": "53e27f97209b6bdab08922bfe6e0472ea5c9632d", "commitAfterChange": "f50d9bbda9dc7f3959092c23f3ad0c06015c43b5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void testMethodDeclChanges_only_2() throws Exception", "signatureAfterChange": "   \tpublic void testMethodDeclChanges() throws Exception", "diff": ["-\tpublic void testMethodDeclChanges_only_2() throws Exception {", "+", "+\tpublic void testMethodDeclChanges() throws Exception {", "-\t\t\trewrite.set(methodDecl, MethodDeclaration.RETURN_TYPE_PROPERTY, newReturnType, null);", "+\t\t\trewrite.set(methodDecl, getMethodReturnTypeProperty(ast), newReturnType, null);", "-\t\t\tassertTrue(\"Has no return type: gee\", methodDecl.getReturnType() != null);", "+\t\t\tassertTrue(\"Has no return type: gee\", getReturnType(methodDecl) != null);", "-\t\t\tType returnType= methodDecl.getReturnType();", "+\t\t\tType returnType= getReturnType(methodDecl);", "-\t\t\tassertTrue(\"Has no return type: hee\", methodDecl.getReturnType() != null);", "+\t\t\tassertTrue(\"Has no return type: hee\", getReturnType(methodDecl) != null);", "-\t\t\tList thrownExceptions= methodDecl.thrownExceptions();", "+\t\t\tList thrownExceptions= getThrownExceptions(methodDecl);", "-\t\t\tName newThrownException= ast.newSimpleName(\"ArrayStoreException\");", "+\t\t\tASTNode newThrownException= createNewExceptionType(ast, \"ArrayStoreException\");", "-\t\t\tList thrownExceptions= methodDecl.thrownExceptions();", "+\t\t\tList thrownExceptions= getThrownExceptions(methodDecl);", "-\t\t\tName newThrownException1= ast.newSimpleName(\"ArrayStoreException\");", "-\t\t\tName newThrownException2= ast.newSimpleName(\"InterruptedException\");", "+\t\t\tASTNode newThrownException1= createNewExceptionType(ast, \"ArrayStoreException\");", "+\t\t\tASTNode newThrownException2= createNewExceptionType(ast, \"InterruptedException\");", "-\t\t\tList thrownExceptions= methodDecl.thrownExceptions();", "+\t\t\tList thrownExceptions= getThrownExceptions(methodDecl);", "-\t\t\tName newThrownException= ast.newSimpleName(\"ArrayStoreException\");", "+\t\t\tASTNode newThrownException= createNewExceptionType(ast, \"ArrayStoreException\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "beddc3d5d7654a72a1f51f92fa214526", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "8ca0d4068ff2e48c52b6cad25c5d2f5c2d9eace8", "commitAfterChange": "dedf5307e666f4e1475605b0b89aaf9292d38bf4", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": "\r private boolean hasStructuralMethodChanges(MethodInfo currentMethodInfo, MethodInfo otherMethodInfo)", "signatureAfterChange": "\r private boolean hasStructuralMethodChanges(MethodInfo currentMethodInfo, MethodInfo otherMethodInfo)", "diff": ["-\tif (otherMethodInfo.getModifiers() != currentMethodInfo.getModifiers()) {\r", "+\tif (currentMethodInfo.getModifiers() != otherMethodInfo.getModifiers())\r", "-\t}\t\t\t\t\r", "-\tif (!CharOperation.equals(otherMethodInfo.getSelector(), currentMethodInfo.getSelector())) {\r", "+\tif (!CharOperation.equals(currentMethodInfo.getSelector(), otherMethodInfo.getSelector()))\r", "-\t}\r", "-\tif (!CharOperation.equals(otherMethodInfo.getMethodDescriptor(), currentMethodInfo.getMethodDescriptor())) {\r", "+\tif (!CharOperation.equals(currentMethodInfo.getMethodDescriptor(), otherMethodInfo.getMethodDescriptor()))\r", "-\t}\r", "-\tchar[][] otherThrownExceptions = otherMethodInfo.getExceptionTypeNames();\r", "-\tint otherThrownExceptionsLength = otherThrownExceptions == null ? 0 : otherThrownExceptions.length;\r", "+\r", "-\tint currentThrownExceptionsLength = currentThrownExceptions == null ? 0 : currentThrownExceptions.length;\r", "-\tif (currentThrownExceptionsLength != otherThrownExceptionsLength) {\r", "-\t\treturn true;\r", "-\t}\r", "-\tif (currentThrownExceptionsLength != 0) {\r", "-\t\tfor (int k = 0; k < currentThrownExceptionsLength; k++) {\r", "-\t\t\tif (!CharOperation.equals(currentThrownExceptions[k], otherThrownExceptions[k])) {\r", "+\tchar[][] otherThrownExceptions = otherMethodInfo.getExceptionTypeNames();\r", "+\tif (currentThrownExceptions != otherThrownExceptions) { // TypeConstants.NoExceptions\r", "+\t\tint currentThrownExceptionsLength = currentThrownExceptions == null ? 0 : currentThrownExceptions.length;\r", "+\t\tint otherThrownExceptionsLength = otherThrownExceptions == null ? 0 : otherThrownExceptions.length;\r", "+\t\tif (currentThrownExceptionsLength != otherThrownExceptionsLength)\r", "+\t\t\treturn true;\r", "+\t\tfor (int k = 0; k < currentThrownExceptionsLength; k++)\r", "+\t\t\tif (!CharOperation.equals(currentThrownExceptions[k], otherThrownExceptions[k]))\r", "-\t\t\t}\r", "-\t\t}\r"]}], "num": 71594}
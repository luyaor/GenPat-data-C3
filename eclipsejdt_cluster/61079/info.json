{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75a0e6a3c3e9205987e6ab224177f11e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54e12d46d9225986a24161bec948f492", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "077229504ccd77d256450ca55e2c9e212f3f94d4", "commitAfterChange": "2d87d31e89bc602d928b4671e91e81b8af28ddbe", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "diff": ["-\tpublic void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint) {", "+\tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint) {", "-\t\tif (otherType == NullBinding) return;", "+\t\tif (actualType == NullBinding) return;", "-\t\tif (otherType.isCapture()) {", "-\t\t\tCaptureBinding capture = (CaptureBinding) otherType;", "-\t\t\totherType = capture.wildcard;", "+\t\tif (actualType.isCapture()) {", "+\t\t\tCaptureBinding capture = (CaptureBinding) actualType;", "+\t\t\tactualType = capture.wildcard;", "-\t\t\t\t\t\tif (otherType.isWildcard()) {", "-\t\t\t\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "-\t\t\t\t\t\t\tswitch(otherWildcard.boundKind) {", "+\t\t\t\t\t\tif (actualType.isWildcard()) {", "+\t\t\t\t\t\t\tWildcardBinding actualWildcard = (WildcardBinding) actualType;", "+\t\t\t\t\t\t\tswitch(actualWildcard.boundKind) {", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.bound, substitutes, CONSTRAINT_EXTENDS);", "-\t\t\t\t\t\t        \tfor (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.otherBounds[i], substitutes, CONSTRAINT_EXTENDS);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, CONSTRAINT_EXTENDS);", "+\t\t\t\t\t\t        \tfor (int i = 0, length = actualWildcard.otherBounds == null ? 0 : actualWildcard.otherBounds.length; i < length; i++) {", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, CONSTRAINT_EXTENDS);", "-\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherType, substitutes, CONSTRAINT_EXTENDS);", "+\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualType, substitutes, CONSTRAINT_EXTENDS);", "-\t\t\t\t\t\tif (otherType.isWildcard()) {", "-\t\t\t\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "-\t\t\t\t\t\t\tswitch(otherWildcard.boundKind) {", "+\t\t\t\t\t\tif (actualType.isWildcard()) {", "+\t\t\t\t\t\t\tWildcardBinding actualWildcard = (WildcardBinding) actualType;", "+\t\t\t\t\t\t\tswitch(actualWildcard.boundKind) {", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.bound, substitutes, CONSTRAINT_SUPER);", "-\t\t\t\t\t\t        \tfor (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.otherBounds[i], substitutes, CONSTRAINT_SUPER);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, CONSTRAINT_SUPER);", "+\t\t\t\t\t\t        \tfor (int i = 0, length = actualWildcard.otherBounds == null ? 0 : actualWildcard.otherBounds.length; i < length; i++) {", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, CONSTRAINT_SUPER);", "-\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherType, substitutes, CONSTRAINT_SUPER);\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualType, substitutes, CONSTRAINT_SUPER);\t\t\t\t\t\t\t", "-\t\t\t\t\t\tif (otherType.isWildcard()) {", "-\t\t\t\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "-\t\t\t\t\t\t\tswitch(otherWildcard.boundKind) {", "+\t\t\t\t\t\tif (actualType.isWildcard()) {", "+\t\t\t\t\t\t\tWildcardBinding actualWildcard = (WildcardBinding) actualType;", "+\t\t\t\t\t\t\tswitch(actualWildcard.boundKind) {", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.bound, substitutes, CONSTRAINT_EQUAL);", "-\t\t\t\t\t\t        \tfor (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.otherBounds[i], substitutes, CONSTRAINT_EQUAL);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, CONSTRAINT_EQUAL);", "+\t\t\t\t\t\t        \tfor (int i = 0, length = actualWildcard.otherBounds == null ? 0 : actualWildcard.otherBounds.length; i < length; i++) {", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, CONSTRAINT_EQUAL);", "-\t\t\t\t\t\tif (otherType.isWildcard()) {", "-\t\t\t\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "-\t\t\t\t\t\t\tswitch(otherWildcard.boundKind) {", "+\t\t\t\t\t\tif (actualType.isWildcard()) {", "+\t\t\t\t\t\t\tWildcardBinding actualWildcard = (WildcardBinding) actualType;", "+\t\t\t\t\t\t\tswitch(actualWildcard.boundKind) {", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.bound, substitutes, CONSTRAINT_EQUAL);", "-\t\t\t\t\t\t        \tfor (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.otherBounds[i], substitutes, CONSTRAINT_EQUAL);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, CONSTRAINT_EQUAL);", "+\t\t\t\t\t\t        \tfor (int i = 0, length = actualWildcard.otherBounds == null ? 0 : actualWildcard.otherBounds.length; i < length; i++) {", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, CONSTRAINT_EQUAL);", "-\t\t\t\t\t\tif (otherType.isWildcard()) {", "-\t\t\t\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "-\t\t\t\t\t\t\tswitch(otherWildcard.boundKind) {", "+\t\t\t\t\t\tif (actualType.isWildcard()) {", "+\t\t\t\t\t\t\tWildcardBinding actualWildcard = (WildcardBinding) actualType;", "+\t\t\t\t\t\t\tswitch(actualWildcard.boundKind) {", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.bound, substitutes, CONSTRAINT_SUPER);", "-\t\t\t\t\t\t        \tfor (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.otherBounds[i], substitutes, CONSTRAINT_SUPER);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, CONSTRAINT_SUPER);", "+\t\t\t\t\t\t        \tfor (int i = 0, length = actualWildcard.otherBounds == null ? 0 : actualWildcard.otherBounds.length; i < length; i++) {", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, CONSTRAINT_SUPER);", "-\t\t\t\t\t\tif (otherType.isWildcard()) {", "-\t\t\t\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "-\t\t\t\t\t\t\tswitch(otherWildcard.boundKind) {", "+\t\t\t\t\t\tif (actualType.isWildcard()) {", "+\t\t\t\t\t\t\tWildcardBinding actualWildcard = (WildcardBinding) actualType;", "+\t\t\t\t\t\t\tswitch(actualWildcard.boundKind) {", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.bound, substitutes, CONSTRAINT_SUPER);", "-\t\t\t\t\t\t        \tfor (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.otherBounds[i], substitutes, CONSTRAINT_SUPER);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, CONSTRAINT_SUPER);", "+\t\t\t\t\t\t        \tfor (int i = 0, length = actualWildcard.otherBounds == null ? 0 : actualWildcard.otherBounds.length; i < length; i++) {", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, CONSTRAINT_SUPER);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acc077faa9c26955727645ea2cb9a353", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "99d47e4046e97803f75625986f5eb5ffc13cddfe", "commitAfterChange": "8282cb3c46786d73ca763e64384724ac9c0798d9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint)", "diff": ["-\tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes) {", "+\tpublic void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint) {", "-\t\tif (this.bound == null)", "-\t\t\treturn;", "-\t\tif (otherType.isWildcard()) {", "-\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "-\t\t\tif (otherWildcard.bound != null) {", "-\t\t\t\tthis.bound.collectSubstitutes(otherWildcard.bound, substitutes);", "-\t        \tfor (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {", "-\t\t\t\t\tthis.bound.collectSubstitutes(otherWildcard.otherBounds[i], substitutes);", "-\t        \t}", "-\t\t\t}", "-\t\t} else {", "-            this.bound.collectSubstitutes(otherType, substitutes);", "-            // check other bounds (lub scenario)", "-        \tfor (int i = 0, length = this.otherBounds == null ? 0 : this.otherBounds.length; i < length; i++) {", "-        \t\tthis.otherBounds[i].collectSubstitutes(otherType, substitutes);", "-        \t}", "-\t\t}\t    ", "+\t\tif ((this.tagBits & TagBits.HasTypeVariable) == 0) return;", "+\t\tif (otherType == NullBinding) return;", "+\t", "+\t\tswitch (constraint) {", "+\t\t\tcase CONSTRAINT_EXTENDS : // A << F", "+\t\t\t\tswitch (this.kind) {", "+\t\t\t\t\tcase Wildcard.UNBOUND: // F={?}", "+//\t\t\t\t\t\tif (otherType.isWildcard()) {", "+//\t\t\t\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "+//\t\t\t\t\t\t\tswitch(otherWildcard.kind) {", "+//\t\t\t\t\t\t\t\tcase Wildcard.UNBOUND: // A={?} << F={?}  --> 0", "+//\t\t\t\t\t\t\t\t\tbreak;", "+//\t\t\t\t\t\t\t\tcase Wildcard.EXTENDS: // A={? extends V} << F={?} ---> 0", "+//\t\t\t\t\t\t\t\t\tbreak;", "+//\t\t\t\t\t\t\t\tcase Wildcard.SUPER: // A={? super V} << F={?} ---> 0", "+//\t\t\t\t\t\t\t\t\tbreak;", "+//\t\t\t\t\t\t\t}", "+//\t\t\t\t\t\t} else { // A=V << F={?} ---> 0", "+//\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Wildcard.EXTENDS: // F={? extends U}", "+\t\t\t\t\t\tif (otherType.isWildcard()) {", "+\t\t\t\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "+\t\t\t\t\t\t\tswitch(otherWildcard.kind) {", "+\t\t\t\t\t\t\t\tcase Wildcard.UNBOUND: // A={?} << F={? extends U}  --> 0", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase Wildcard.EXTENDS: // A={? extends V} << F={? extends U} ---> V << U", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.bound, substitutes, CONSTRAINT_EXTENDS);", "+\t\t\t\t\t\t        \tfor (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.otherBounds[i], substitutes, CONSTRAINT_EXTENDS);", "+\t\t\t\t\t\t        \t}\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase Wildcard.SUPER: // A={? super V} << F={? extends U} ---> 0", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else { // A=V << F={? extends U} ---> V << U", "+\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherType, substitutes, CONSTRAINT_EXTENDS);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Wildcard.SUPER: // F={? super U}", "+\t\t\t\t\t\tif (otherType.isWildcard()) {", "+\t\t\t\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "+\t\t\t\t\t\t\tswitch(otherWildcard.kind) {", "+\t\t\t\t\t\t\t\tcase Wildcard.UNBOUND: // A={?} << F={? super U}  --> 0", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase Wildcard.EXTENDS: // A={? extends V} << F={? super U} ---> 0", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase Wildcard.SUPER: // A={? super V} << F={? super U} ---> 0", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.bound, substitutes, CONSTRAINT_SUPER);", "+\t\t\t\t\t\t        \tfor (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.otherBounds[i], substitutes, CONSTRAINT_SUPER);", "+\t\t\t\t\t\t        \t}\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else { // A=V << F={? super U} ---> V >> U", "+\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherType, substitutes, CONSTRAINT_SUPER);\t\t\t\t\t\t\t", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase CONSTRAINT_EQUAL : // A == F", "+\t\t\t\tswitch (this.kind) {", "+\t\t\t\t\tcase Wildcard.UNBOUND: // F={?}", "+//\t\t\t\t\t\tif (otherType.isWildcard()) {", "+//\t\t\t\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "+//\t\t\t\t\t\t\tswitch(otherWildcard.kind) {", "+//\t\t\t\t\t\t\t\tcase Wildcard.UNBOUND: // A={?} == F={?}  --> 0", "+//\t\t\t\t\t\t\t\t\tbreak;", "+//\t\t\t\t\t\t\t\tcase Wildcard.EXTENDS: // A={? extends V} == F={?} ---> 0", "+//\t\t\t\t\t\t\t\t\tbreak;", "+//\t\t\t\t\t\t\t\tcase Wildcard.SUPER: // A={? super V} == F={?} ---> 0", "+//\t\t\t\t\t\t\t\t\tbreak;", "+//\t\t\t\t\t\t\t}", "+//\t\t\t\t\t\t} else { // A=V == F={?} ---> 0", "+//\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Wildcard.EXTENDS: // F={? extends U}", "+\t\t\t\t\t\tif (otherType.isWildcard()) {", "+\t\t\t\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "+\t\t\t\t\t\t\tswitch(otherWildcard.kind) {", "+\t\t\t\t\t\t\t\tcase Wildcard.UNBOUND: // A={?} == F={? extends U}  --> 0", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase Wildcard.EXTENDS: // A={? extends V} == F={? extends U} ---> V == U", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.bound, substitutes, CONSTRAINT_EQUAL);", "+\t\t\t\t\t\t        \tfor (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.otherBounds[i], substitutes, CONSTRAINT_EQUAL);", "+\t\t\t\t\t\t        \t}\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase Wildcard.SUPER: // A={? super V} == F={? extends U} ---> 0", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else { // A=V == F={? extends U} ---> 0", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Wildcard.SUPER: // F={? super U}", "+\t\t\t\t\t\tif (otherType.isWildcard()) {", "+\t\t\t\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "+\t\t\t\t\t\t\tswitch(otherWildcard.kind) {", "+\t\t\t\t\t\t\t\tcase Wildcard.UNBOUND: // A={?} == F={? super U}  --> 0", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase Wildcard.EXTENDS: // A={? extends V} == F={? super U} ---> 0", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase Wildcard.SUPER: // A={? super V} == F={? super U} ---> 0", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.bound, substitutes, CONSTRAINT_EQUAL);", "+\t\t\t\t\t\t        \tfor (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.otherBounds[i], substitutes, CONSTRAINT_EQUAL);", "+\t\t\t\t\t\t        \t}\t", "+\t\t\t\t\t\t        \tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else { // A=V == F={? super U} ---> 0", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase CONSTRAINT_SUPER : // A >> F", "+\t\t\t\tswitch (this.kind) {", "+\t\t\t\t\tcase Wildcard.UNBOUND: // F={?}", "+//\t\t\t\t\t\tif (otherType.isWildcard()) {", "+//\t\t\t\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "+//\t\t\t\t\t\t\tswitch(otherWildcard.kind) {", "+//\t\t\t\t\t\t\t\tcase Wildcard.UNBOUND: // A={?} >> F={?}  --> 0", "+//\t\t\t\t\t\t\t\t\tbreak;", "+//\t\t\t\t\t\t\t\tcase Wildcard.EXTENDS: // A={? extends V} >> F={?} ---> 0", "+//\t\t\t\t\t\t\t\t\tbreak;", "+//\t\t\t\t\t\t\t\tcase Wildcard.SUPER: // A={? super V} >> F={?} ---> 0", "+//\t\t\t\t\t\t\t\t\tbreak;", "+//\t\t\t\t\t\t\t}", "+//\t\t\t\t\t\t} else { // A=V >> F={?} ---> 0", "+//\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Wildcard.EXTENDS: // F={? extends U}", "+\t\t\t\t\t\tif (otherType.isWildcard()) {", "+\t\t\t\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "+\t\t\t\t\t\t\tswitch(otherWildcard.kind) {", "+\t\t\t\t\t\t\t\tcase Wildcard.UNBOUND: // A={?} >> F={? extends U}  --> 0", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase Wildcard.EXTENDS: // A={? extends V} >> F={? extends U} ---> V >> U", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.bound, substitutes, CONSTRAINT_SUPER);", "+\t\t\t\t\t\t        \tfor (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.otherBounds[i], substitutes, CONSTRAINT_SUPER);", "+\t\t\t\t\t\t        \t}\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase Wildcard.SUPER: // A={? super V} >> F={? extends U} ---> 0", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else { // A=V == F={? extends U} ---> 0", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Wildcard.SUPER: // F={? super U}", "+\t\t\t\t\t\tif (otherType.isWildcard()) {", "+\t\t\t\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "+\t\t\t\t\t\t\tswitch(otherWildcard.kind) {", "+\t\t\t\t\t\t\t\tcase Wildcard.UNBOUND: // A={?} >> F={? super U}  --> 0", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase Wildcard.EXTENDS: // A={? extends V} >> F={? super U} ---> 0", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase Wildcard.SUPER: // A={? super V} >> F={? super U} ---> V >> U", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.bound, substitutes, CONSTRAINT_SUPER);", "+\t\t\t\t\t\t        \tfor (int i = 0, length = otherWildcard.otherBounds == null ? 0 : otherWildcard.otherBounds.length; i < length; i++) {", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, otherWildcard.otherBounds[i], substitutes, CONSTRAINT_SUPER);", "+\t\t\t\t\t\t        \t}\t", "+\t\t\t\t\t\t        \tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else { // A=V >> F={? super U} ---> 0", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t}"]}], "num": 61079}
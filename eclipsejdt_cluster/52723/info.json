{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6428b53e7e6b4b696ee5caa992b014a8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5eb43d8dcef01d18d5a79883f0bc178", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "7dba18510735a8c60d8d91fa6d89b06fa7636203", "commitAfterChange": "7c282c0ddcdb6ffe774e195ad66f8c97fb6de3a9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public int match(MethodDeclaration node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(MethodDeclaration node, MatchingNodeSet nodeSet)", "diff": ["-\t\t\t\tif (!((InternalSearchPattern)this.pattern).mustResolve) {", "-\t\t\t\t\t// Set resolution flag on node set in case of types was inferred in parameterized types from generic ones...", "-\t\t\t\t \t// (see  bugs https://bugs.eclipse.org/bugs/show_bug.cgi?id=79990, 96761, 96763)", "-\t\t\t\t\tnodeSet.mustResolve = true;", "-\t\t\t\t\tresolve = true;", "+\t\t\t\t// Do not return as impossible when source level is at least 1.5", "+\t\t\t\tif (this.mayBeGeneric) {", "+\t\t\t\t\tif (!((InternalSearchPattern)this.pattern).mustResolve) {", "+\t\t\t\t\t\t// Set resolution flag on node set in case of types was inferred in parameterized types from generic ones...", "+\t\t\t\t\t \t// (see  bugs https://bugs.eclipse.org/bugs/show_bug.cgi?id=79990, 96761, 96763)", "+\t\t\t\t\t\tnodeSet.mustResolve = true;", "+\t\t\t\t\t\tresolve = true;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\treturn IMPOSSIBLE_MATCH;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbbd07cf1a3830ea370c343654c0767c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "333e183ebe56f659f1083c452edbf2ef4089fa56", "commitAfterChange": "f09e5b387a9b27a1161db6587b5598aa2acd37a0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": " public int match(MethodDeclaration node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(MethodDeclaration node, MatchingNodeSet nodeSet)", "diff": ["+\tboolean resolve = ((InternalSearchPattern)this.pattern).mustResolve;", "-\t\t// Disable filter on argument syntax to allow generic type search.", "-\t\t// (see  bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=79990)", "-\t\tif (!this.pattern.mustResolveGeneric) {", "-\t\t\tfor (int i = 0; i < argsLength; i++) {", "-\t\t\t\tif (!matchesTypeReference(this.pattern.parameterSimpleNames[i], ((Argument) args[i]).type)) return IMPOSSIBLE_MATCH;", "+\t\tfor (int i = 0; i < argsLength; i++) {", "+\t\t\tif (!matchesTypeReference(this.pattern.parameterSimpleNames[i], ((Argument) args[i]).type)) {", "+\t\t\t\tif (!((InternalSearchPattern)this.pattern).mustResolve) {", "+\t\t\t\t\t// Set resolution flag on node set in case of types was inferred in parameterized types from generic ones...", "+\t\t\t\t \t// (see  bugs https://bugs.eclipse.org/bugs/show_bug.cgi?id=79990, 96761, 96763)", "+\t\t\t\t\tnodeSet.mustResolve = true;", "+\t\t\t\t\tresolve = true;", "+\t\t\t\t}", "-\treturn nodeSet.addMatch(node, ((InternalSearchPattern)this.pattern).mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "+\treturn nodeSet.addMatch(node, resolve ? POSSIBLE_MATCH : ACCURATE_MATCH);"]}], "num": 52723}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "320311a39113f9da2f8f706d700517c1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a82f972b224c13b8b614309f8c30dd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 265, "methodNumberAfterChange": 265, "signatureBeforeChange": " public void test116()", "signatureAfterChange": " public void test116()", "diff": ["+\t\t\"\t^^^^^^\\n\" + ", "+\t\t\"The return type is incompatible with Y.foo()\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tObject foo() {\\n\" + ", "-\t\tmustOverrideMessage(\"foo()\", \"X\") + ", "+\t\t\"The method X.foo() is overriding a method without making a super invocation\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\tObject foo() {\\n\" + ", "+\t\t\"\t^^^^^^\\n\" + ", "+\t\t\"The return type is incompatible with Y.foo()\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\"\tObject foo() {\\n\" + ", "+\t\t\"\t       ^^^^^\\n\" + ", "+\t\t\"The method foo() of type new Y(){} should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\tObject foo() {\\n\" + ", "+\t\t\"\t       ^^^^^\\n\" + ", "+\t\t\"The method new Y(){}.foo() is overriding a method without making a super invocation\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce9068fe7f07953261c027429c6e6860", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void test011()", "signatureAfterChange": " \tpublic void test011()", "diff": ["-\t\t\t\"The method count(int[]) of type Y should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+\t\t\t\"Varargs methods should only override or be overridden by other varargs methods unlike Y.count(int[]) and X.count(int...)\\n\" + ", "-\t\t\t\"Varargs methods should only override or be overridden by other varargs methods unlike Y.count(int[]) and X.count(int...)\\n\" + ", "+\t\t\t\"The method count(int[]) of type Y should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "-\t\t\t\"The method count(int...) of type Z should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+\t\t\t\"Varargs methods should only override or be overridden by other varargs methods unlike Z.count(int...) and Y.count(int[])\\n\" + ", "-\t\t\t\"Varargs methods should only override or be overridden by other varargs methods unlike Z.count(int...) and Y.count(int[])\\n\" + ", "+\t\t\t\"The method count(int...) of type Z should be tagged with @Override since it actually overrides a superclass method\\n\" + "]}], "num": 33745}
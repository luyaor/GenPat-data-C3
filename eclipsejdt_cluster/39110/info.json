{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cccc19eb243190b4947d632b71cc2946", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46a0b4dc5cd90e3035bea6c3fc512dee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "8115b94a15102913234fbbe463796f613813039a", "commitAfterChange": "b8f3bfdacc5a2270c01f7e0bbb60d6fde20b1569", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic void run()", "signatureAfterChange": "\r \tpublic void run()", "diff": ["-\t\twhile (true) {\r", "-\t\t\ttry {\r", "-\t\t\t\tIJob job;\r", "-\t\t\t\tif ((job = currentJob()) == null) {\r", "-\t\t\t\t\tif (idlingStart < 0)\r", "-\t\t\t\t\t\tidlingStart = System.currentTimeMillis();\r", "-\t\t\t\t\tnotifyIdle(System.currentTimeMillis() - idlingStart);\r", "-\t\t\t\t\tThread.currentThread().sleep(500);\r", "-\t\t\t\t\tcontinue;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tidlingStart = -1;\r", "-\t\t\t\t}\r", "-\t\t\t\tif (VERBOSE) {\r", "-\t\t\t\t\tJobManager.log(awaitingJobsCount() + \" awaiting jobs\"); //$NON-NLS-1$\r", "-\t\t\t\t\tJobManager.log(\"STARTING to execute - \" + job); //$NON-NLS-1$\r", "-\t\t\t\t}\r", "+\t\ttry {\r", "+\t\t\twhile (true) {\r", "-\t\t\t\t\texecuting = true;\r", "-\t\t\t\t\t/*boolean status = */job.execute(null);\r", "-\t\t\t\t\t//if (status == FAILED) request(job);\r", "-\t\t\t\t} finally {\r", "-\t\t\t\t\texecuting = false;\r", "+\t\t\t\t\tIJob job;\r", "+\t\t\t\t\tif ((job = currentJob()) == null) {\r", "+\t\t\t\t\t\tif (idlingStart < 0)\r", "+\t\t\t\t\t\t\tidlingStart = System.currentTimeMillis();\r", "+\t\t\t\t\t\tnotifyIdle(System.currentTimeMillis() - idlingStart);\r", "+\t\t\t\t\t\tThread.currentThread().sleep(500);\r", "+\t\t\t\t\t\tcontinue;\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tidlingStart = -1;\r", "+\t\t\t\t\t}\r", "-\t\t\t\t\t\tJobManager.log(\"DONE executing - \" + job); //$NON-NLS-1$\r", "+\t\t\t\t\t\tJobManager.log(awaitingJobsCount() + \" awaiting jobs\"); //$NON-NLS-1$\r", "+\t\t\t\t\t\tJobManager.log(\"STARTING to execute - \" + job); //$NON-NLS-1$\r", "-\t\t\t\t\tmoveToNextJob();\r", "-\t\t\t\t\tif (this.awaitingClients == 0) {\r", "-\t\t\t\t\t\tThread.currentThread().sleep(50);\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\texecuting = true;\r", "+\t\t\t\t\t\t/*boolean status = */job.execute(null);\r", "+\t\t\t\t\t\t//if (status == FAILED) request(job);\r", "+\t\t\t\t\t} finally {\r", "+\t\t\t\t\t\texecuting = false;\r", "+\t\t\t\t\t\tif (VERBOSE) {\r", "+\t\t\t\t\t\t\tJobManager.log(\"DONE executing - \" + job); //$NON-NLS-1$\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tmoveToNextJob();\r", "+\t\t\t\t\t\tif (this.awaitingClients == 0) {\r", "+\t\t\t\t\t\t\tThread.currentThread().sleep(50);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t} catch (InterruptedException e) { // background indexing was interrupted\r", "-\t\t\t} catch (InterruptedException e) { // background indexing was interrupted\r", "+\t\t} catch (RuntimeException e) {\r", "+\t\t\t// log exception\r", "+\t\t\tJavaCore.getPlugin().getLog().log(\r", "+\t\t\t\tnew JavaModelStatus(\r", "+\t\t\t\t\tIJavaModelStatus.ERROR,\r", "+\t\t\t\t\te)\r", "+\t\t\t);\r", "+\t\t\t\r", "+\t\t\t// keep job manager alive\r", "+\t\t\tthis.discardJobs(null);\r", "+\t\t\tthis.thread = null;\r", "+\t\t\tthis.reset(); // this will fork a new thread\r", "+\t\t\tthrow e;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b509456de2312023c0c551eb3c51687f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java", "commitBeforeChange": "7dec8f456454ce7f95cecd0c284ed8fe69194447", "commitAfterChange": "57a786b54662e393b4b035310c470971cc6bb7db", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void run()", "signatureAfterChange": " \tpublic void run()", "diff": ["-\t\t\t\t\tIJob job;", "-\t\t\t\t\tsynchronized (this) {", "-\t\t\t\t\t\t// handle shutdown case when notifyAll came before the wait but after the while loop was entered", "-\t\t\t\t\t\tif (this.processingThread == null) continue;", "-", "-\t\t\t\t\t\tif ((job = currentJob()) == null) {", "-\t\t\t\t\t\t\tif (idlingStart < 0)", "-\t\t\t\t\t\t\t\tidlingStart = System.currentTimeMillis();", "-\t\t\t\t\t\t\tnotifyIdle(System.currentTimeMillis() - idlingStart);", "-\t\t\t\t\t\t\tthis.wait(); // wait until a new job is posted (or reenabled:38901)", "-\t\t\t\t\t\t\tThread.sleep(500); // delay before processing the new job, allow some time for the active thread to finish", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tidlingStart = -1;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (VERBOSE) {", "-\t\t\t\t\t\tJobManager.verbose(awaitingJobsCount() + \" awaiting jobs\"); //$NON-NLS-1$", "-\t\t\t\t\t\tJobManager.verbose(\"STARTING background job - \" + job); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\texecuting = true;", "-\t\t\t\t\t\t/*boolean status = */job.execute(null);", "-\t\t\t\t\t\t//if (status == FAILED) request(job);", "-\t\t\t\t\t} finally {", "-\t\t\t\t\t\texecuting = false;", "+\t\t\t\t\tIJob job = currentJob();", "+\t\t\t\t\tif (job != null) {", "+\t\t\t\t\t\tidlingStart = -1;", "-\t\t\t\t\t\t\tJobManager.verbose(\"FINISHED background job - \" + job); //$NON-NLS-1$", "+\t\t\t\t\t\t\tJobManager.verbose(awaitingJobsCount() + \" awaiting jobs\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\tJobManager.verbose(\"STARTING background job - \" + job); //$NON-NLS-1$", "-\t\t\t\t\t\tmoveToNextJob();", "-\t\t\t\t\t\tif (this.awaitingClients == 0) {", "-\t\t\t\t\t\t\tThread.sleep(50);", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\texecuting = true;", "+\t\t\t\t\t\t\t/*boolean status = */job.execute(null);", "+\t\t\t\t\t\t\t//if (status == FAILED) request(job);", "+\t\t\t\t\t\t} finally {", "+\t\t\t\t\t\t\texecuting = false;", "+\t\t\t\t\t\t\tif (VERBOSE)", "+\t\t\t\t\t\t\t\tJobManager.verbose(\"FINISHED background job - \" + job); //$NON-NLS-1$", "+\t\t\t\t\t\t\tmoveToNextJob();", "+\t\t\t\t\t\t\tif (this.awaitingClients == 0)", "+\t\t\t\t\t\t\t\tThread.sleep(50);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (idlingStart < 0)", "+\t\t\t\t\t\t\tidlingStart = System.currentTimeMillis();", "+\t\t\t\t\t\tnotifyIdle(System.currentTimeMillis() - idlingStart);", "+", "+\t\t\t\t\t\tsynchronized (this) {", "+\t\t\t\t\t\t\t// handle shutdown case when notifyAll was sent between the while loop condition and here", "+\t\t\t\t\t\t\tif (this.processingThread == null) continue;", "+\t\t\t\t\t\t\tthis.wait(); // wait until a new job is posted (or reenabled:38901)", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tThread.sleep(500); // delay before processing the new job, allow some time for the active thread to finish", "-\t\t\t\t} catch (InterruptedException e) { // background indexing was interrupted", "-\t\t\t\t}", "+\t\t\t\t} catch (InterruptedException ignored) {} // background indexing was interrupted"]}], "num": 39110}
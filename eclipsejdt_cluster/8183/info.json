{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "774ffd5dd7160dd96214bc37ae1a7a2a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f9c9a1a3019d729d878967dd94a1431", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/ProjectBinaryOutput.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tprivate void deleteAllInContainer(IContainer container)", "signatureAfterChange": "\r private void deleteAllInContainer(IContainer container)", "diff": ["+ */\r", "+private void deleteAllInContainer(IContainer container) {\r", "+\ttry {\r", "+\t\tif (!container.exists())\r", "+\t\t\treturn;\r", "+\t\tIResource[] members = container.members(); \r", "+\t\tfor (int i = 0, max = members.length; i < max;i++) {\r", "+\t\t\tIResource resource = (IResource) members[i];\r", "+\t\t\tresource.delete(true, null);\r", "+\t} catch (CoreException e) {\r", "+}\r", "-\t */\r", "-\tprivate void deleteAllInContainer(IContainer container) {\r", "-\t\ttry {\r", "-\t\t\tif (!container.exists())\r", "-\t\t\t\treturn;\r", "-\t\t\tIResource[] members = container.members();\r", "-\t\t\tfor (int i = 0, max = members.length; i < max; i++) {\r", "-\t\t\t\tIResource resource = (IResource) members[i];\r", "-\t\t\t\tresource.delete(true, null);\r", "-\t\t\t}\r", "-\t\t} catch (CoreException e) {\r", "-\t\t\tthrow this.dc.internalException(e);\r", "-\t\t}\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65f5b5e935f89c8b83628cd06cb56981", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/ProjectBinaryOutput.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tpublic void deleteBinary(IType type)", "signatureAfterChange": "\r public void deleteBinary(IType type)", "diff": ["+ */\r", "+public void deleteBinary(IType type) {\r", "+\tIPath path = getPathForBinary(type);\r", "+\tIFile file = getFile(path);\r", "+\ttry {\r", "+\t\tfile.delete(true, null);\r", "+\t} catch (CoreException e) {\r", "-\t */\r", "-\tpublic void deleteBinary(IType type) {\r", "-\t\tIPath path = getPathForBinary(type);\r", "-\t\tIFile file = getFile(path);\r", "-\t\ttry {\r", "-\t\t\tfile.delete(true, null);\r", "-\t\t} catch (CoreException e) {\r", "-\t\t\tthrow this.dc.internalException(e);\r", "-\t\t}\r", "-\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "769bf485d20cfc67f3aad4978c0a541d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/ProjectBinaryOutput.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \tprivate void deleteClassesInContainer(IContainer container)", "signatureAfterChange": "\r private void deleteClassesInContainer(IContainer container)", "diff": ["-\t */\r", "-\tprivate void deleteClassesInContainer(IContainer container) {\r", "-\t\ttry {\r", "-\t\t\tif (!container.exists())\r", "-\t\t\t\treturn;\r", "-\t\t\tIResource[] members = container.members();\r", "-\t\t\tfor (int i = 0, max = members.length; i < max; i++) {\r", "-\t\t\t\tIResource resource = (IResource) members[i];\r", "-\t\t\t\tswitch (resource.getType()) {\r", "-\t\t\t\t\tcase IResource.FILE :\r", "-\t\t\t\t\t\tif (resource.getName().toLowerCase().endsWith(\".class\")) {\r", "-\t\t\t\t\t\t\tresource.delete(true, null);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IResource.PROJECT :\r", "-\t\t\t\t\tcase IResource.FOLDER :\r", "-\t\t\t\t\t\tdeleteClassesInContainer((IContainer) resource);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\t//\r", "-\t\t\t//\t\tDon't delete empty folders, since the output may overlap with the source, and\r", "-\t\t\t//\t\twe don't want to delete empty folders which the user may have created.\r", "-\t\t\t//\r", "-\t\t\t//\t\tif (container.getType() == IResource.FOLDER && !container.members().hasMoreElements()) {\r", "-\t\t\t//\t\t\tcontainer.delete(true, null);\r", "-\t\t\t//\t\t}\r", "-\t\t} catch (CoreException e) {\r", "-\t\t\tthrow this.dc.internalException(e);\r", "-\t\t}\r", "-\t}\r", "+ */\r", "+private void deleteClassesInContainer(IContainer container) {\r", "+\ttry {\r", "+\t\tif (!container.exists())\r", "+\t\t\treturn;\r", "+\t\tIResource[] members = container.members(); \r", "+\t\tfor (int i = 0, max = members.length; i < max;i++) {\r", "+\t\t\tIResource resource = (IResource) members[i];\r", "+\t\t\tswitch (resource.getType()) {\r", "+\t\t\t\tcase IResource.FILE :\r", "+\t\t\t\t\tif (resource.getName().toLowerCase().endsWith(\".class\")) {\r", "+\t\t\t\t\t\tresource.delete(true, null);\r", "+\t\t\t\t\t}\r", "+\t\t\t\tcase IResource.PROJECT :\r", "+\t\t\t\tcase IResource.FOLDER :\r", "+\t\t\t\t\tdeleteClassesInContainer((IContainer) resource);\r", "+\t\t\t\t\tbreak;\r", "+//\r", "+//\t\tDon't delete empty folders, since the output may overlap with the source, and\r", "+//\t\twe don't want to delete empty folders which the user may have created.\r", "+//\r", "+//\t\tif (container.getType() == IResource.FOLDER && !container.members().hasMoreElements()) {\r", "+//\t\t\tcontainer.delete(true, null);\r", "+//\t\t}\r", "+\t} catch (CoreException e) {\r", "+\t}\r", "+}\r"]}], "num": 8183}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dfbad32c3410fe2c93cc22a054fbb18f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "326f283f07ad1638d705c28be520f5d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "5a12a220bc147ceb34370c89306997df47624c96", "commitAfterChange": "2a31afdf467fbea6343929950855b2cce0d4c7fa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {\r", "-\r", "-\t// here requires to generate a sequence of finally blocks invocations depending corresponding\r", "+public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {\t// here requires to generate a sequence of finally blocks invocations depending corresponding\r", "+\tboolean hasValueToSave = expression != null && expression.constant == NotAConstant;\r", "-\t\t\tif (subroutines == null){\r", "-\t\t\t\tsubroutines = new AstNode[maxSub];\r", "+\t\t\tif (this.subroutines == null){\r", "+\t\t\t\tthis.subroutines = new AstNode[maxSub];\r", "-\t\t\t\tSystem.arraycopy(subroutines, 0, (subroutines = new AstNode[maxSub *= 2]), 0, subIndex); // grow\r", "+\t\t\t\tSystem.arraycopy(this.subroutines, 0, (this.subroutines = new AstNode[maxSub *= 2]), 0, subIndex); // grow\r", "-\t\t\tsubroutines[subIndex++] = sub;\r", "+\t\t\tthis.subroutines[subIndex++] = sub;\r", "+\r", "-\t\t} else {\r", "-\t\t\tif ((expression != null) && (node instanceof TryStatement)) {\r", "-\t\t\t\tsaveValueNeeded = true;\r", "-\t\t\t} else {\r", "-\t\t\t\tif (traversedContext instanceof InitializationFlowContext) {\r", "-\t\t\t\t\tcurrentScope.problemReporter().cannotReturnInInitializer(this);\r", "-\t\t\t\t\treturn FlowInfo.DeadEnd;\r", "+\r", "+\t\t} else if (node instanceof TryStatement && hasValueToSave) {\r", "+\t\t\t\tif (this.saveValueVariable == null){ // closest subroutine secret variable is used\r", "+\t\t\t\t\tprepareSaveValueLocation((TryStatement)node);\r", "-\t\t\t}\r", "+\t\t\t\tsaveValueNeeded = true;\r", "+\r", "+\t\t} else if (traversedContext instanceof InitializationFlowContext) {\r", "+\t\t\t\tcurrentScope.problemReporter().cannotReturnInInitializer(this);\r", "+\t\t\t\treturn FlowInfo.DeadEnd;\r", "+\r", "-\t// no need to save a constant value\r", "-\tif((expression != null) && (expression.constant != NotAConstant)){\r", "-\t\tsaveValueNeeded = false;\r", "-\t}\r", "-\t\tprepareSaveValueLocation(currentScope);\r", "+\t\tif (this.saveValueVariable != null) {\r", "+\t\t\tthis.saveValueVariable.used = true;\r", "+\t\t}\r", "+\t\tthis.saveValueVariable = null;\r", "-\t\t\texpression.bits |= ValueForReturnMASK;\r", "+\t\t\tthis.expression.bits |= ValueForReturnMASK;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3c7b45be82336dc812ed1553103d7f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "6dad91e4f298fff813aeb65b0b459a8698c68fdb", "commitAfterChange": "74ba53ab0437265c5342ec723f72d2aea81fd661", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": " public final void recordComment(boolean isJavadoc)", "signatureAfterChange": " public final void recordComment(boolean isJavadoc)", "diff": ["-\t\tcommentStops[++commentPtr] = isJavadoc ? currentPosition : -currentPosition;", "+\t\tthis.commentStops[++this.commentPtr] = isJavadoc ? this.currentPosition : -this.currentPosition;", "-\t\tint oldStackLength = commentStops.length;", "-\t\tint[] oldStack = commentStops;", "-\t\tcommentStops = new int[oldStackLength + 30];", "-\t\tSystem.arraycopy(oldStack, 0, commentStops, 0, oldStackLength);", "-\t\tcommentStops[commentPtr] = isJavadoc ? currentPosition : -currentPosition;", "+\t\tint oldStackLength = this.commentStops.length;", "+\t\tint[] oldStack = this.commentStops;", "+\t\tthis.commentStops = new int[oldStackLength + 30];", "+\t\tSystem.arraycopy(oldStack, 0, this.commentStops, 0, oldStackLength);", "+\t\tthis.commentStops[this.commentPtr] = isJavadoc ? this.currentPosition : -this.currentPosition;", "-\t\tint[] old = commentStarts;", "-\t\tcommentStarts = new int[oldStackLength + 30];", "-\t\tSystem.arraycopy(old, 0, commentStarts, 0, oldStackLength);", "+\t\tint[] old = this.commentStarts;", "+\t\tthis.commentStarts = new int[oldStackLength + 30];", "+\t\tSystem.arraycopy(old, 0, this.commentStarts, 0, oldStackLength);", "-\tcommentStarts[commentPtr] = startPosition;", "+\tthis.commentStarts[this.commentPtr] = this.startPosition;"]}], "num": 40382}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d096f848b8ccb75fa6b82f6d4b3883cd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c27789ae2b32d3bf92186df88aa28ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "b1ce5a863ad0a541f80dd0793ff207f1e4ecf677", "commitAfterChange": "72d60854091bd7e8a5aafafdfea62cc297a3eb41", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic static Test buildTestSuite(Class evaluationTestClass, String testPrefix, String suiteName)", "signatureAfterChange": "  \tpublic static Test buildTestSuite(Class evaluationTestClass, String testPrefix, String suiteName)", "diff": ["-\t\tfor (int m = 0, max = methods.length; m < max; m++) {", "+\t\tnextMethod: for (int m = 0, max = methods.length; m < max; m++) {", "-\t\t\t\t\tint numStart = testPrefix.length();", "-\t\t\t\t\t// tests names subset", "-\t\t\t\t\tif (testsNames != null) {", "-\t\t\t\t\t\tfor (int i = 0, imax= testsNames.length; i<imax; i++) {", "-\t\t\t\t\t\t\tif (testsNames[i].equals(methName) || testsNames[i].equals(methName.substring(numStart))) {", "-\t\t\t\t\t\t\t\ttests.add(methName);", "-\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\t// no prefix, no subsets => add method", "+\t\t\t\t\tif (testPrefix == null && testsNames == null && testsNumbers == null && testsRange == null) {", "+\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "+\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t// look for test number", "-\t\t\t\t\tif (methName.startsWith(testPrefix) && Character.isDigit(methName.charAt(numStart))) {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t// get test number", "-\t\t\t\t\t\t\tint n = numStart;", "-\t\t\t\t\t\t\twhile (methName.charAt(n) == '0') n++;", "-\t\t\t\t\t\t\tint num = Integer.parseInt(methName.substring(n));", "-\t\t\t\t\t\t\t// tests numbers subset", "-\t\t\t\t\t\t\tif (testsNumbers != null && !tests.contains(methName)) {", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < testsNumbers.length; i++) {", "-\t\t\t\t\t\t\t\t\tif (testsNumbers[i] == num) {", "-\t\t\t\t\t\t\t\t\t\ttests.add(methName);", "-\t\t\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// tests range subset", "-\t\t\t\t\t\t\tif (testsRange != null && testsRange.length == 2 && !tests.contains(methName)) {", "-\t\t\t\t\t\t\t\tif ((testsRange[0]==-1 || num>=testsRange[0]) && (testsRange[1]==-1 || num<=testsRange[1])) {", "+\t\t\t\t\t// no prefix or method matches prefix", "+\t\t\t\t\tif (testPrefix == null || methName.startsWith(testPrefix)) {", "+\t\t\t\t\t\tint numStart = testPrefix==null ? 4 /* test */ : testPrefix.length();", "+\t\t\t\t\t\t// tests names subset", "+\t\t\t\t\t\tif (testsNames != null) {", "+\t\t\t\t\t\t\tfor (int i = 0, imax= testsNames.length; i<imax; i++) {", "+\t\t\t\t\t\t\t\tif (testsNames[i].equals(methName) || testsNames[i].equals(methName.substring(numStart))) {", "+\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t} catch (NumberFormatException e) {", "-\t\t\t\t\t\t\tSystem.out.println(\"Method \"+methods[m]+\" has an invalid number format: \"+e.getMessage());", "-\t\t\t\t\t}", "-\t\t\t\t\t// no subset, add all tests", "-\t\t\t\t\tif (testsNames==null && testsNumbers==null &&testsRange==null) {", "-\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "+\t\t\t\t\t\t// look for test number", "+\t\t\t\t\t\tint length = methName.length();", "+\t\t\t\t\t\tif (numStart < length) {", "+\t\t\t\t\t\t\t// get test number", "+\t\t\t\t\t\t\twhile (numStart<length && !Character.isDigit(methName.charAt(numStart))) numStart++; // skip to first digit", "+\t\t\t\t\t\t\twhile (numStart<length && methName.charAt(numStart) == '0') numStart++; // skip to first non-nul digit", "+\t\t\t\t\t\t\tint n = numStart;", "+\t\t\t\t\t\t\twhile (n<length && Character.isDigit(methName.charAt(n))) n++; // skip to next non-digit", "+\t\t\t\t\t\t\tif (n>numStart && n <= length) {", "+\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\tint num = Integer.parseInt(methName.substring(numStart, n));", "+\t\t\t\t\t\t\t\t\t// tests numbers subset", "+\t\t\t\t\t\t\t\t\tif (testsNumbers != null && !tests.contains(methName)) {", "+\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < testsNumbers.length; i++) {", "+\t\t\t\t\t\t\t\t\t\t\tif (testsNumbers[i] == num) {", "+\t\t\t\t\t\t\t\t\t\t\t\ttests.add(methName);", "+\t\t\t\t\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "+\t\t\t\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t// tests range subset", "+\t\t\t\t\t\t\t\t\tif (testsRange != null && testsRange.length == 2 && !tests.contains(methName)) {", "+\t\t\t\t\t\t\t\t\t\tif ((testsRange[0]==-1 || num>=testsRange[0]) && (testsRange[1]==-1 || num<=testsRange[1])) {", "+\t\t\t\t\t\t\t\t\t\t\ttests.add(methName);", "+\t\t\t\t\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "+\t\t\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\t\t\t\t\t\tSystem.out.println(\"Method \"+methods[m]+\" has an invalid number format: \"+e.getMessage());", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+", "+\t\t\t\t\t\t// no subset, add all tests", "+\t\t\t\t\t\tif (testsNames==null && testsNumbers==null && testsRange==null) {", "+\t\t\t\t\t\t\tsuite.addTest((Test)constructor.newInstance(params));", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe7b3aac054945d06dd67d98dc01a5dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "0907dc6b12ade48990b856e3edfafde71195d9de", "commitAfterChange": "2fd2027f1bd96549ae174a672a3e75a3fbef9f00", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator)", "signatureAfterChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "diff": ["+\t */", "+\tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode) {", "-\t\tbuffer.append(Util.bind(\"classfileformat.magicnumber\")); //$NON-NLS-1$", "-\t\tbuffer.append(Integer.toHexString(classFileReader.getMagic()).toUpperCase());", "-\t\twriteNewLine(buffer, lineSeparator, 0);", "-\t\tbuffer.append(Util.bind(\"classfileformat.minorversion\")); //$NON-NLS-1$", "-\t\tbuffer.append(classFileReader.getMinorVersion());", "-\t\twriteNewLine(buffer, lineSeparator, 0);", "-\t\tbuffer.append(Util.bind(\"classfileformat.majorversion\")); //$NON-NLS-1$", "-\t\tbuffer.append(classFileReader.getMajorVersion());", "-\t\twriteNewLine(buffer, lineSeparator, 0);", "-\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\tif (mode == IClassFileDisassembler.DETAILED) {", "+\t\t\tint minorVersion = classFileReader.getMinorVersion();", "+\t\t\tint majorVersion = classFileReader.getMajorVersion();", "+\t\t\tbuffer.append(Util.bind(\"classfileformat.magicnumber\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(Integer.toHexString(classFileReader.getMagic()).toUpperCase());", "+\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t\tbuffer.append(Util.bind(\"classfileformat.minorversion\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(minorVersion);", "+\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t\tbuffer.append(Util.bind(\"classfileformat.majorversion\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(majorVersion);", "+\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t\tif (minorVersion == 3 && majorVersion == 45) {", "+\t\t\t\tbuffer.append(Util.bind(\"classfileformat.targetoption\") +\" 1.1\");//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t} else if (minorVersion == 0 && majorVersion == 46) {", "+\t\t\t\tbuffer.append(Util.bind(\"classfileformat.targetoption\") + \"1.2\");//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t} else if (minorVersion == 0 && majorVersion == 47) {", "+\t\t\t\tbuffer.append(Util.bind(\"classfileformat.targetoption\") + \"1.3\");//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t} else if (minorVersion == 0 && majorVersion == 48) {", "+\t\t\t\tbuffer.append(Util.bind(\"classfileformat.targetoption\") + \"1.4\");//$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t}", "+\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t\twriteNewLine(buffer, lineSeparator, 0);", "+\t\t}", "-\t\tdisassembleTypeMembers(classFileReader, buffer, lineSeparator, 1);", "+\t\tdisassembleTypeMembers(classFileReader, buffer, lineSeparator, 1, mode);"]}], "num": 611}
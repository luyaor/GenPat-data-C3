{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e001cabf5b7617c5b3e7b30e307fe082", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3fe84b4616d9a6d5fca3ab2fd37b8da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "fb0020e27808c429f3f311a11ef0ea9ea04441aa", "commitAfterChange": "29bba5ec8d05a9cd1832ad934d2530b41087b676", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t\tpublic void setInstantiation(TypeBinding type, LookupEnvironment environment)", "signatureAfterChange": " \t\tpublic void setInstantiation(TypeBinding type, InferenceVariable variable, LookupEnvironment environment)", "diff": ["-\t\tpublic void setInstantiation(TypeBinding type, LookupEnvironment environment) {", "+\t\tpublic void setInstantiation(TypeBinding type, InferenceVariable variable, LookupEnvironment environment) {", "-\t\t\t\tif (this.instantiation != null) {", "-\t\t\t\t\t// sanity check:", "-\t\t\t\t\tif (!TypeBinding.equalsEquals(this.instantiation, type)) {", "-\t\t\t\t\t\tthis.instantiation = null;", "-\t\t\t\t\t\treturn; // incorporation should find the conflict and fail the inference", "-\t\t\t\t\t}", "-\t\t\t\t\tlong oldBits = this.instantiation.tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\tif (oldBits != 0) {", "-\t\t\t\t\t\tlong newBits = type.tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\t\tif (newBits == oldBits || newBits == 0)", "-\t\t\t\t\t\t\treturn; // no update", "-\t\t\t\t\t\tAnnotationBinding[] annot = environment.nullAnnotationsFromTagBits(newBits);", "-\t\t\t\t\t\tif (annot != null)", "-\t\t\t\t\t\t\ttype = environment.createAnnotatedType(this.instantiation, annot);", "-\t\t\t\t\t}", "+\t\t\t\tlong oldBits = ((this.instantiation != null) ? this.instantiation.tagBits : variable.tagBits)", "+\t\t\t\t\t\t\t\t& TagBits.AnnotationNullMASK;", "+\t\t\t\tlong requestedBits = type.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\tlong newBits = (oldBits == TagBits.AnnotationNonNull) ? oldBits : requestedBits; // need to preserve @NonNull", "+\t\t\t\tif (this.instantiation != null && oldBits == newBits) {", "+\t\t\t\t\treturn; // no update needed", "+\t\t\t\t}", "+\t\t\t\tif (requestedBits != newBits) {", "+\t\t\t\t\t// adjust 'type' to fit the newBits", "+\t\t\t\t\tAnnotationBinding[] annot = environment.nullAnnotationsFromTagBits(newBits);", "+\t\t\t\t\tif (annot != null)", "+\t\t\t\t\t\ttype = environment.createAnnotatedType(type.unannotated(), annot);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb7e8af762e424be5aa3b9caab32fd0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\t\t\tif ((sourceMethod.tagBits & TAGBITS_NULLABLE_OR_NONNULL) == TAGBITS_NULLABLE_OR_NONNULL) {", "+\t\t\t\t\t\tlong nullBits = sourceMethod.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\t\tif (nullBits == TagBits.AnnotationNullMASK) {", "-\t\t\t\t\t\t\tsourceMethod.tagBits &= ~TAGBITS_NULLABLE_OR_NONNULL; // avoid secondary problems", "+\t\t\t\t\t\t\tsourceMethod.tagBits &= ~TagBits.AnnotationNullMASK; // avoid secondary problems", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (nullBits != 0 && sourceMethod.isConstructor()) {", "+\t\t\t\t\t\t\tif (scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8)", "+\t\t\t\t\t\t\t\tscope.problemReporter().nullAnnotationUnsupportedLocation(this);", "+\t\t\t\t\t\t\t// for declaration annotations the inapplicability will be reported below", "+\t\t\t\t\t\t\tsourceMethod.tagBits &= ~TagBits.AnnotationNullMASK;", "+\t\t\t\t\t\t// fields don't yet have their type resolved, in 1.8 null annotations", "+\t\t\t\t\t\t// will be transfered from the field to its type during STB.resolveTypeFor().", "-\t\t\t\t\t\tvariable.tagBits |= tagBits;", "+\t\t\t\t\t\tif ((annotationType.tagBits & TagBits.AnnotationTargetMASK) == TagBits.AnnotationForTypeUse) {", "+\t\t\t\t\t\t\tif (variable.type != null) {", "+\t\t\t\t\t\t\t\tif (variable.type.isBaseType()) {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().illegalAnnotationForBaseType(this, variable.type);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tlong nullTagBits = tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\t\t\t\t\tvariable.type = scope.environment().createAnnotatedType(variable.type, nullTagBits);", "+\t\t\t\t\t\t\t\t\tif ((variable.type.tagBits & TAGBITS_NULLABLE_OR_NONNULL) == TAGBITS_NULLABLE_OR_NONNULL) {", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(this);", "+\t\t\t\t\t\t\t\t\t\tvariable.type.tagBits &= ~TAGBITS_NULLABLE_OR_NONNULL; // avoid secondary problems", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_8) {", "+\t\t\t\t\t\t\t\tvariable.tagBits |= tagBits;", "+\t\t\t\t\t\t\t\tif ((variable.tagBits & TAGBITS_NULLABLE_OR_NONNULL) == TAGBITS_NULLABLE_OR_NONNULL) {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(this);", "+\t\t\t\t\t\t\t\t\tvariable.tagBits &= ~TAGBITS_NULLABLE_OR_NONNULL; // avoid secondary problems", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (variable.type != null) {", "+\t\t\t\t\t\t\t\t// bits not relating to null analysis go into the variable:", "+\t\t\t\t\t\t\t\tvariable.tagBits |= tagBits & ~TagBits.AnnotationNullMASK;", "+\t\t\t\t\t\t\t\t// null bits go into the type:", "+\t\t\t\t\t\t\t\tlong nullTagBits = tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\t\t\t\tif (nullTagBits != 0) {", "+\t\t\t\t\t\t\t\t\tvariable.type = scope.environment().pushAnnotationIntoType(variable.type, variable.declaration.type, nullTagBits);", "+\t\t\t\t\t\t\t\t\tif ((variable.type.tagBits & TAGBITS_NULLABLE_OR_NONNULL) == TAGBITS_NULLABLE_OR_NONNULL) {", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(this);", "+\t\t\t\t\t\t\t\t\t\tvariable.type = variable.type.unannotated();", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif ((variable.tagBits & TAGBITS_NULLABLE_OR_NONNULL) == TAGBITS_NULLABLE_OR_NONNULL) {", "-\t\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(this);", "-\t\t\t\t\t\t\tvariable.tagBits &= ~TAGBITS_NULLABLE_OR_NONNULL; // avoid secondary problems"]}], "num": 62264}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6471959e85334d18591111626eb1f5a9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b3f12035713781b5bb5b93c47209fd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "1317e9ebe26807b45d83a46701194241e6f648d5", "commitAfterChange": "3649f3f6d703fd53c9c12b41cdc037f657d98134", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "\r \tpublic IClasspathEntry[] getResolvedClasspath(\r \t\tIClasspathEntry[] classpathEntries,\r \t\tboolean ignoreUnresolvedEntry,\r \t\tboolean generateMarkerOnError)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic IClasspathEntry[] getResolvedClasspath(\r \t\tIClasspathEntry[] classpathEntries,\r \t\tboolean ignoreUnresolvedEntry,\r \t\tboolean generateMarkerOnError)\r \t\tthrows JavaModelException", "diff": ["-\t\t\t\t\tIClasspathEntry[] containerEntries = JavaCore.getResolvedClasspathContainer(rawEntry.getPath(), this);\r", "-\t\t\t\t\tif (containerEntries == null){\r", "+\t\t\t\t\tIClasspathContainer container = JavaCore.getClasspathContainer(rawEntry.getPath(), this);\r", "+\t\t\t\t\tif (container == null){\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t// container was bound, container entries could be variables\r", "-\t\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){\r", "-\t\t\t\t\t\t\tIClasspathEntry containerRawEntry = containerEntries[j];\r", "-\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\tif (generateMarkerOnError) {\r", "-\t\t\t\t\t\t\t\tIJavaModelStatus status =\r", "-\t\t\t\t\t\t\t\t\tJavaConventions.validateClasspathEntry(this, containerRawEntry, false);\r", "-\t\t\t\t\t\t\t\tif (!status.isOK())\r", "-\t\t\t\t\t\t\t\t\tcreateClasspathProblemMarker(\r", "-\t\t\t\t\t\t\t\t\t\tstatus.getMessage(), \r", "-\t\t\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,\r", "-\t\t\t\t\t\t\t\t\t\tfalse);\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\t// container entry is variable ?\r", "-\t\t\t\t\t\t\tif (containerRawEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE){\r", "-\t\t\t\t\t\t\t\tresolvedEntry = JavaCore.getResolvedClasspathEntry(containerRawEntry);\r", "-\t\t\t\t\t\t\t\tif (resolvedEntry == null) {\r", "-\t\t\t\t\t\t\t\t\tif (!ignoreUnresolvedEntry) {\r", "-\t\t\t\t\t\t\t\t\t\tthrow new JavaModelException(\r", "-\t\t\t\t\t\t\t\t\t\t\tnew JavaModelStatus(\r", "-\t\t\t\t\t\t\t\t\t\t\t\tIJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND,\r", "-\t\t\t\t\t\t\t\t\t\t\t\tcontainerRawEntry.getPath().toString()));\r", "-\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t}\r", "+\r", "+\t\t\t\t\tIClasspathEntry[] containerEntries = container.getClasspathEntries();\r", "+\t\t\t\t\tif (containerEntries == null) break;\r", "+\r", "+\t\t\t\t\t// container was bound, container entries could be variables\r", "+\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){\r", "+\t\t\t\t\t\tIClasspathEntry containerRawEntry = containerEntries[j];\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\tif (generateMarkerOnError) {\r", "+\t\t\t\t\t\t\tIJavaModelStatus status =\r", "+\t\t\t\t\t\t\t\tJavaConventions.validateClasspathEntry(this, containerRawEntry, false);\r", "+\t\t\t\t\t\t\tif (!status.isOK())\r", "+\t\t\t\t\t\t\t\tcreateClasspathProblemMarker(\r", "+\t\t\t\t\t\t\t\t\tstatus.getMessage(), \r", "+\t\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,\r", "+\t\t\t\t\t\t\t\t\tfalse);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\t// container entry is variable ?\r", "+\t\t\t\t\t\tif (containerRawEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE){\r", "+\t\t\t\t\t\t\tresolvedEntry = JavaCore.getResolvedClasspathEntry(containerRawEntry);\r", "+\t\t\t\t\t\t\tif (resolvedEntry == null) {\r", "+\t\t\t\t\t\t\t\tif (!ignoreUnresolvedEntry) {\r", "+\t\t\t\t\t\t\t\t\tthrow new JavaModelException(\r", "+\t\t\t\t\t\t\t\t\t\tnew JavaModelStatus(\r", "+\t\t\t\t\t\t\t\t\t\t\tIJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND,\r", "+\t\t\t\t\t\t\t\t\t\t\tcontainerRawEntry.getPath().toString()));\r", "-\t\t\t\t\t\t\t\tresolvedEntries.add(containerRawEntry);\r", "+\t\t\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tresolvedEntries.add(containerRawEntry);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49134a2cff97eb9630661550acd0461e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "f39402d13165cb2a8baa9e8822f47cb5416f824f", "commitAfterChange": "c59f5d3873f087b004eace9b9fa6844d0400c666", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError) \t\tthrows JavaModelException", "diff": ["-\t\t\tIMarker marker = null;", "-\t\t\tif (generateMarkerOnError) {", "-\t\t\t\tIJavaModelStatus status =", "-\t\t\t\t\tJavaConventions.validateClasspathEntry(this, rawEntry, false);", "-\t\t\t\tif (!status.isOK()) {", "-\t\t\t\t\tString incompleteCPOption = this.getOption(JavaCore.CORE_INCOMPLETE_CLASSPATH, true);", "-\t\t\t\t\tmarker = createClasspathProblemMarker(", "-\t\t\t\t\t\tstatus.getMessage(), ", "-\t\t\t\t\t\tJavaCore.ERROR.equals(incompleteCPOption) ? IMarker.SEVERITY_ERROR : IMarker.SEVERITY_WARNING,", "-\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\tfalse);", "-\t\t\t\t}", "+\t\t\tIJavaModelStatus status = null;", "+\t\t\tif (generateMarkerOnError || !ignoreUnresolvedEntry) {", "+\t\t\t\tstatus = JavaConventions.validateClasspathEntry(this, rawEntry, false);", "+\t\t\t\tif (generateMarkerOnError && !status.isOK()) createClasspathProblemMarker(status);", "-\t\t\t\t\t\tif (marker != null) {", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tmarker.setAttribute(IJavaModelMarker.UNBOUND_VARIABLE, rawEntry.getPath().segment(0));", "-\t\t\t\t\t\t\t} catch(CoreException e) {", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!ignoreUnresolvedEntry) {", "-\t\t\t\t\t\t\tthrow new JavaModelException(", "-\t\t\t\t\t\t\t\tnew JavaModelStatus(", "-\t\t\t\t\t\t\t\t\tIJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND,", "-\t\t\t\t\t\t\t\t\trawEntry.getPath().toString()));", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!ignoreUnresolvedEntry) throw new JavaModelException(status);", "-\t\t\t\t\t\t// unbound container", "-\t\t\t\t\t\tif (marker != null) {", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tmarker.setAttribute(IJavaModelMarker.UNBOUND_CONTAINER, rawEntry.getPath().makeRelative().toString());", "-\t\t\t\t\t\t\t} catch(CoreException e) {", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!ignoreUnresolvedEntry) {", "-\t\t\t\t\t\t\tthrow new JavaModelException(", "-\t\t\t\t\t\t\t\tnew JavaModelStatus(", "-\t\t\t\t\t\t\t\t\tIJavaModelStatusConstants.CP_CONTAINER_PATH_UNBOUND,", "-\t\t\t\t\t\t\t\t\trawEntry.getPath().toString()));", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!ignoreUnresolvedEntry) throw new JavaModelException(status);", "-\t\t\t\t\t\tIClasspathEntry containerRawEntry = containerEntries[j];", "+\t\t\t\t\t\tIClasspathEntry cEntry = containerEntries[j];", "-\t\t\t\t\t\t\tIJavaModelStatus status =", "-\t\t\t\t\t\t\t\tJavaConventions.validateClasspathEntry(this, containerRawEntry, false);", "-\t\t\t\t\t\t\tif (!status.isOK()) {", "-\t\t\t\t\t\t\t\tString incompleteCPOption = this.getOption(JavaCore.CORE_INCOMPLETE_CLASSPATH, true);", "-\t\t\t\t\t\t\t\tcreateClasspathProblemMarker(", "-\t\t\t\t\t\t\t\t\tstatus.getMessage(), ", "-\t\t\t\t\t\t\t\t\tJavaCore.ERROR.equals(incompleteCPOption) ? IMarker.SEVERITY_ERROR : IMarker.SEVERITY_WARNING,", "-\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\tfalse);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tIJavaModelStatus containerStatus = JavaConventions.validateClasspathEntry(this, cEntry, false);", "+\t\t\t\t\t\t\tif (!containerStatus.isOK()) createClasspathProblemMarker(containerStatus);", "-\t\t\t\t\t\t\tcontainerRawEntry = new ClasspathEntry(", "-\t\t\t\t\t\t\t\tcontainerRawEntry.getContentKind(),", "-\t\t\t\t\t\t\t\tcontainerRawEntry.getEntryKind(), ", "-\t\t\t\t\t\t\t\tcontainerRawEntry.getPath(),", "-\t\t\t\t\t\t\t\tcontainerRawEntry.getExclusionPatterns(),", "-\t\t\t\t\t\t\t\tcontainerRawEntry.getSourceAttachmentPath(),", "-\t\t\t\t\t\t\t\tcontainerRawEntry.getSourceAttachmentRootPath(),", "-\t\t\t\t\t\t\t\tcontainerRawEntry.getOutputLocation(),", "+\t\t\t\t\t\t\tcEntry = new ClasspathEntry(cEntry.getContentKind(),", "+\t\t\t\t\t\t\t\tcEntry.getEntryKind(), cEntry.getPath(),", "+\t\t\t\t\t\t\t\tcEntry.getExclusionPatterns(), cEntry.getSourceAttachmentPath(),", "+\t\t\t\t\t\t\t\tcEntry.getSourceAttachmentRootPath(), cEntry.getOutputLocation(), ", "-\t\t\t\t\t\tresolvedEntries.add(containerRawEntry);", "+\t\t\t\t\t\tresolvedEntries.add(cEntry);"]}], "num": 62733}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7185b08139291e6650b87f8a7bc51ff8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23e15bf558380120322619e271f90e3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "593b7c498e35f1adb3620eff493d0f4b5e771b68", "commitAfterChange": "3b34d278ba258a10a58d188a2047da908229b941", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t\tpublic ControlStructureVisitor(Statement statement)", "signatureAfterChange": " public boolean continuesAtOuterLabel()", "diff": ["-\t\tpublic ControlStructureVisitor(Statement statement) {", "-\t\t\tthis.body = statement;", "-\t\t\tthis.breaksOut = false;", "-\t\t}", "+*/", "+public boolean continuesAtOuterLabel() {", "+\treturn new ASTVisitor() {", "+\t\tboolean continuesToLabel;", "+\t\tpublic boolean visit(ContinueStatement continueStatement, BlockScope skope) {", "+\t\t\tif (continueStatement.label != null)", "+\t\t\t\tthis.continuesToLabel = true;", "+\t    \treturn false;", "+\t    }", "+\t\tpublic boolean continuesAtOuterLabel() {", "+\t\t\tStatement.this.traverse(this, null);", "+\t\t\treturn this.continuesToLabel;", "+\t\t}", "+\t}.continuesAtOuterLabel();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc9bb6177b72670a8b5078d6e9b7cb32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "1cc3b3e7a0647f40743545ab9e305d8f4bd58bbd", "commitAfterChange": "9e14e700eaf4553e71d5d5792e1c8a3558660da3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t\t\t\tpublic void acceptResult(CompilationResult result)", "signatureAfterChange": " \tpublic Compiler( \t\t\tINameEnvironment environment, \t\t\tIErrorHandlingPolicy policy, \t\t\tMap settings, \t\t\tfinal ICompilerRequestor requestor, \t\t\tIProblemFactory problemFactory, \t\t\tboolean parseLiteralExpressionsAsConstants, \t\t\tboolean storeAnnotations, \t\t\tboolean statementsRecovery)", "diff": ["-\t\t\tthis.requestor = new ICompilerRequestor(){", "-\t\t\t\tpublic void acceptResult(CompilationResult result){", "-\t\t\t\t\tif (DebugRequestor.isActive()){", "-\t\t\t\t\t\tDebugRequestor.acceptDebugResult(result);", "-\t\t\t\t\t}", "-\t\t\t\t\trequestor.acceptResult(result);", "-\t\t\t\t}", "+\t\t\tINameEnvironment environment,", "+\t\t\tIErrorHandlingPolicy policy,", "+\t\t\tMap settings,", "+\t\t\tfinal ICompilerRequestor requestor,", "+\t\t\tIProblemFactory problemFactory,", "+\t\t\tboolean parseLiteralExpressionsAsConstants,", "+\t\t\tboolean storeAnnotations,", "+\t\t\tboolean statementsRecovery) {", "+\t\tthis(environment, policy, settings,\trequestor, problemFactory, ", "+\t\t\t\tnull, // default ", "+\t\t\t\tparseLiteralExpressionsAsConstants, storeAnnotations, statementsRecovery, true);", "+\t}"]}], "num": 38136}
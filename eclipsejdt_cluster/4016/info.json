{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2bec369d1965812d20ba521c290150e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76a444719c29e35fc1b46f047905d5f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "bd0edd7688142c1743cb6b10766dfc576040f113", "commitAfterChange": "463c744a7c48c7701ee99d0b62d5b629d68c2912", "methodNumberBeforeChange": 272, "methodNumberAfterChange": 272, "signatureBeforeChange": " public boolean expressionNonNullComparison(Expression expr, boolean checkForNull)", "signatureAfterChange": " public boolean expressionNonNullComparison(Expression expr, boolean checkForNull)", "diff": ["-\tint problemId;", "-\tBinding binding;", "-\tString[] arguments;", "-\tint start, end;", "+\tint problemId = 0;", "+\tBinding binding = null;", "+\tString[] arguments = null;", "+\tint start = 0, end = 0;", "-\t\tproblemId = checkForNull ", "-\t\t\t\t? IProblem.NonNullExpressionComparisonYieldsFalse", "-\t\t\t\t: IProblem.RedundantNullCheckOnNonNullExpression;", "-\t\tstart = location.sourceStart;", "-\t\tend = location.sourceEnd;", "-\t\targuments = NoArgument;", "+\t\t// fall through", "-\t\tproblemId = checkForNull ", "-\t\t\t\t? IProblem.NonNullExpressionComparisonYieldsFalse", "-\t\t\t\t: IProblem.RedundantNullCheckOnNonNullExpression;", "-\t\tstart = location.sourceStart;", "-\t\tend = location.sourceEnd;", "-\t\targuments = NoArgument;", "+\t\t// fall through", "+\t} else if (expr instanceof BinaryExpression) {", "+\t\tif ((expr.bits & ASTNode.ReturnTypeIDMASK) != TypeIds.T_JavaLangString) {", "+\t\t\t// false alarm, primitive types involved, must be auto(un)boxing?", "+\t\t\treturn false;", "+\t\t}", "+\t\t// fall through", "+\tif (problemId == 0) {", "+\t\t// standard case, fill in details now", "+\t\tproblemId = checkForNull ", "+\t\t\t\t? IProblem.NonNullExpressionComparisonYieldsFalse", "+\t\t\t\t: IProblem.RedundantNullCheckOnNonNullExpression;", "+\t\tstart = location.sourceStart;", "+\t\tend = location.sourceEnd;", "+\t\targuments = NoArgument;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f0dbfac56c9966e306c81455098ad84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope)", "signatureAfterChange": " public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope, boolean isExceptionOnAutoClose)", "diff": ["+ */", "+public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location, FlowInfo flowInfo, BlockScope scope, boolean isExceptionOnAutoClose) {", "+\tif (scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_7 && location instanceof ThrowStatement) {", "+\t\tExpression throwExpression = ((ThrowStatement)location).exception;", "+\t\tLocalVariableBinding throwArgBinding = throwExpression.localVariableBinding();", "+\t\tif (throwExpression instanceof SingleNameReference // https://bugs.eclipse.org/bugs/show_bug.cgi?id=350361 ", "+\t\t\t\t&& throwArgBinding instanceof CatchParameterBinding && throwArgBinding.isEffectivelyFinal()) {", "+\t\t\tCatchParameterBinding parameter = (CatchParameterBinding) throwArgBinding;", "+\t\t\tcheckExceptionHandlers(parameter.getPreciseTypes(), location, flowInfo, scope);", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t\t\t\t\t\t\t\traisedException, // precise exception that will be caught", "+\t\t\t\t\t\t\t\tcaughtException,", "-\tscope.problemReporter().unhandledException(raisedException, location);", "+\tif (isExceptionOnAutoClose) {", "+\t\tscope.problemReporter().unhandledExceptionFromAutoClose(raisedException, location);", "+\t} else {", "+\t\tscope.problemReporter().unhandledException(raisedException, location);", "+\t}"]}], "num": 4016}
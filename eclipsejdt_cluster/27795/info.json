{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eab401840919935d1a29122cc9f52b09", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5de150c8c48369e901b323e948fc7a9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6021d67f030c85737aa105da719e9a09cfc30ed", "commitAfterChange": "47da1e1f50b1360a7b560d74dfe1c60303fec552", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": " public synchronized void removeIndexPath(IPath path)", "signatureAfterChange": " public synchronized void removeIndexPath(IPath path)", "diff": ["-\tIPath[] locations = null;", "+\tIndexLocation[] locations = null;", "-\t\tIPath indexLocation = (IPath) keyTable[i];", "+\t\tIndexLocation indexLocation = (IndexLocation) keyTable[i];", "-\t\tif (path.isPrefixOf(indexLocation)) {", "+\t\tif (indexLocation.startsWith(path)) {", "-\t\t\t\tlocations = new IPath[max];", "+\t\t\t\tlocations = new IndexLocation[max];", "-\t\t\tFile indexFile = index.getIndexFile();", "-\t\t\tif (indexFile.exists()) {", "+\t\t\tif (this.indexStates.get(indexLocation) == REUSE_STATE) {", "+\t\t\t\tindexLocation.close();", "+\t\t\t} else {", "-\t\t\t\t\tUtil.verbose(\"removing index file \" + indexFile); //$NON-NLS-1$", "-\t\t\t\tindexFile.delete();", "+\t\t\t\t\tUtil.verbose(\"removing index file \" + indexLocation); //$NON-NLS-1$", "+\t\t\t\tindexLocation.delete();", "-\t\tif (this.participantsContainers != null && this.participantsContainers.get(path.toOSString()) != null) {", "-\t\t\tthis.participantsContainers.removeKey(path.toOSString());\t", "-\t\t\twriteParticipantsIndexNamesFile();", "+\t\tif (this.participantsContainers != null) {", "+\t\t\tboolean update = false;", "+\t\t\tfor (int i = 0; i < count; i++) {", "+\t\t\t\tif (this.participantsContainers.get(locations[i]) != null) {", "+\t\t\t\t\tupdate = true;", "+\t\t\t\t\tthis.participantsContainers.removeKey(locations[i]);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (update) writeParticipantsIndexNamesFile();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e7c66d6eefd5a4213f079110c928d17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "b2c3be7bd78bc61f04ab542749dc9420d42f47cb", "commitAfterChange": "bbf4c65896774d7094a1b0af184fa5e65fff430e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public AnnotationBinding[] getParameterAnnotations(int index)", "signatureAfterChange": " public AnnotationBinding[][] getParameterAnnotations()", "diff": ["-public AnnotationBinding[] getParameterAnnotations(int index) {", "+public AnnotationBinding[][] getParameterAnnotations() {", "+\tint length = this.parameters.length;", "+\tif (this.parameters == null || length == 0) {", "+\t\treturn null;", "+\t}", "+\t\tallParameterAnnotations = new AnnotationBinding[length][];", "-\t\t\t\tif (methodDecl.arguments != null) {", "-\t\t\t\t\tfor (int i = 0, length = methodDecl.arguments.length; i < length; i++) {", "-\t\t\t\t\t\tArgument argument = methodDecl.arguments[i];", "-\t\t\t\t\t\tif (argument.annotations != null) {", "-\t\t\t\t\t\t\tASTNode.resolveAnnotations(methodDecl.scope, argument.annotations, argument.binding);", "-\t\t\t\t\t\t\tif (allParameterAnnotations == null) {", "-\t\t\t\t\t\t\t\tallParameterAnnotations = new AnnotationBinding[length][];", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tallParameterAnnotations[i] = argument.binding.getAnnotations();", "-\t\t\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tArgument argument = methodDecl.arguments[i];", "+\t\t\t\t\tif (argument.annotations != null) {", "+\t\t\t\t\t\tASTNode.resolveAnnotations(methodDecl.scope, argument.annotations, argument.binding);", "+\t\t\t\t\t\tallParameterAnnotations[i] = argument.binding.getAnnotations();", "-\t\t\t\t\tif (allParameterAnnotations != null)", "-\t\t\t\t\t\tthis.setParameterAnnotations(allParameterAnnotations);", "+\t\t\t\tthis.setParameterAnnotations(allParameterAnnotations);", "+\t\t\t} else {", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tallParameterAnnotations[i] = Binding.NO_ANNOTATIONS;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tallParameterAnnotations[i] = Binding.NO_ANNOTATIONS;", "-\tAnnotationBinding[] resultParameterAnnotations = allParameterAnnotations == null ? null : allParameterAnnotations[\tindex];", "-\t if (resultParameterAnnotations != null) {", "-\t\t return resultParameterAnnotations;", "-\t }", "-\treturn Binding.NO_ANNOTATIONS;", "+\treturn allParameterAnnotations;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4f65c51a9d702a62bfcb7b264e1b943", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "4815787a361b88d66be55a51648b98013848c116", "commitAfterChange": "0c953799b66dc53a6c967cf8fbb783c7783df27b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic IJavaElement getJavaElement()", "signatureAfterChange": "  \tpublic IJavaElement getJavaElement()", "diff": ["-\t\t\tString selector = getName();", "-\t\t\tchar[] methodSignature = original.genericSignature();", "-\t\t\tif (methodSignature == null)", "-\t\t\t\tmethodSignature = original.signature();", "-\t\t\tmethodSignature = CharOperation.replaceOnCopy(methodSignature, '/', '.');", "-\t\t\tchar[][] parameterSignatures = Signature.getParameterTypes(methodSignature);", "-\t\t\tString[] parameters = CharOperation.toStrings(parameterSignatures);", "-\t\t\tIMethod result = declaringType.getMethod(selector, parameters);", "+\t\t\tString selector = original.isConstructor() ? declaringType.getElementName() : new String(original.selector);", "+\t\t\tTypeBinding[] parameters = original.parameters;", "+\t\t\tint length = parameters == null ? 0 : parameters.length;", "+\t\t\tString[] parameterSignatures = new String[length];", "+\t\t\tfor (int i = 0;  i < length; i++) {", "+\t\t\t\tparameterSignatures[i] = new String(parameters[i].genericTypeSignature()).replace('/', '.');", "+\t\t\t}", "+\t\t\tIMethod result = declaringType.getMethod(selector, parameterSignatures);"]}], "num": 27795}
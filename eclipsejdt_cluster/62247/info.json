{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5849f89e88ad3491ee0e0baa95ede1f9", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61ee2d746718db00bf767b0b0b1e39d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  public ParameterizedTypeBinding createParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType)", "signatureAfterChange": "  public ParameterizedTypeBinding createParameterizedType(ReferenceBinding genericType, TypeBinding[] originalArguments, ReferenceBinding enclosingType)", "diff": ["-public ParameterizedTypeBinding createParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType) {", "+public ParameterizedTypeBinding createParameterizedType(ReferenceBinding genericType, TypeBinding[] originalArguments, ReferenceBinding enclosingType) {", "+\t// relocalize wildcard onto genericType (could come from other types)", "+\tTypeBinding[] typeArguments = originalArguments;", "+\tfor (int i = 0, length = typeArguments == null ? 0 : typeArguments.length; i < length; i++) {", "+\t\tTypeBinding argument = originalArguments[i];", "+\t\tif (argument.isWildcard()) {", "+\t\t\tWildcardBinding wildcard = (WildcardBinding) argument;", "+\t\t\tif (wildcard.genericType != genericType) { // wildcard comes from different type", "+\t\t\t\tif (typeArguments == originalArguments) {", "+\t\t\t\t\tSystem.arraycopy(originalArguments, 0, typeArguments = new TypeBinding[length], 0, i);", "+\t\t\t\t}", "+\t\t\t\ttypeArguments[i] = createWildcard(genericType, i, wildcard.bound, wildcard.kind);", "+\t\t\t} else if (typeArguments != originalArguments) {", "+\t\t\t\ttypeArguments[i] = argument;", "+\t\t\t}", "+\t\t} else if (typeArguments != originalArguments) {", "+\t\t\ttypeArguments[i] = argument;", "+\t\t}", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da7e3e6689e2d4bf76be5d1ab34e6486", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "3a03108b43e5ef2ebe5aa948629c8324c4c57d2e", "commitAfterChange": "4cdfd10f146eb0b1b7e6b8f9e1939b1c2c6a9eb5", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  public ParameterizedTypeBinding createParameterizedType(ReferenceBinding genericType, TypeBinding[] originalArguments, ReferenceBinding enclosingType)", "signatureAfterChange": "  public ParameterizedTypeBinding createParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType)", "diff": ["-public ParameterizedTypeBinding createParameterizedType(ReferenceBinding genericType, TypeBinding[] originalArguments, ReferenceBinding enclosingType) {", "+public ParameterizedTypeBinding createParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType) {", "-\t// relocalize wildcard onto genericType (could come from other types)", "-\tTypeBinding[] typeArguments = originalArguments;", "-\tfor (int i = 0, length = typeArguments == null ? 0 : typeArguments.length; i < length; i++) {", "-\t\tTypeBinding argument = originalArguments[i];", "-\t\tif (argument.isWildcard()) {", "-\t\t\tWildcardBinding wildcard = (WildcardBinding) argument;", "-\t\t\tif (wildcard.genericType != genericType) { // wildcard comes from different type", "-\t\t\t\tif (typeArguments == originalArguments) {", "-\t\t\t\t\tSystem.arraycopy(originalArguments, 0, typeArguments = new TypeBinding[length], 0, i);", "-\t\t\t\t}", "-\t\t\t\ttypeArguments[i] = createWildcard(genericType, i, wildcard.bound, wildcard.kind);", "-\t\t\t} else if (typeArguments != originalArguments) {", "-\t\t\t\ttypeArguments[i] = argument;", "-\t\t\t}", "-\t\t} else if (typeArguments != originalArguments) {", "-\t\t\ttypeArguments[i] = argument;", "-\t\t}", "-\t}", "-\t"]}], "num": 62247}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68def41e32ed8389af048f386c37098c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f358a8c001727a17bba74c2eec225ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaMethod.java", "commitBeforeChange": "77e59a44eb8dbf245688369fa4e6a37813270ef9", "commitAfterChange": "6bbe71e24e5d5d76445f30e5351f63286e328fac", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic static LambdaMethod make(JavaElement parent, org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambdaExpression)", "signatureAfterChange": " \t \tpublic static LambdaMethod make(JavaElement parent, org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambdaExpression)", "diff": ["-\t\t\tparameterTypes[i] = manager.intern(new String(lambdaExpression.descriptor.parameters[i].signature()));", "+\t\t\tparameterTypes[i] = getTypeSignature(manager, lambdaExpression.descriptor.parameters[i]);", "-\t\tString returnType = manager.intern(new String(Signature.toCharArray(lambdaExpression.descriptor.returnType.signature())));", "+\t\tString returnType = getTypeSignature(manager, lambdaExpression.descriptor.returnType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a774c2acbf5c0d796200f962db6e85b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "15be40cf5262e06998d74b41636698f1f284a564", "commitAfterChange": "a4862af7684f06076791ef9ff6f765210c06b259", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 69, "signatureBeforeChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "signatureAfterChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "diff": ["-\t\t\t\tIJavaElement element = createTypeHandle(new String(unit.getMainTypeName()));", "+\t\t\t\tIJavaElement element = createPackageDeclarationHandle(unit);", "-\t\t\tIJavaElement element = createTypeHandle(new String(unit.getMainTypeName()));", "+\t\t\tIJavaElement element = createPackageDeclarationHandle(unit);", "-\tthis.patternLocator.clear();"]}], "num": 15347}
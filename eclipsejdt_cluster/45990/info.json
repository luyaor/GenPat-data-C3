{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ded30e37a2cac242e8a4fe3ee9d14c8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b612595faac55f369e9c8d8317ae520", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5046f0da42323773845d7a3edf39df0b8c6a1944", "commitAfterChange": "80f69cca108e407e297e62382ba04bd29eb1703d", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 129, "signatureBeforeChange": " \tpublic void resolveClasspath(PerProjectInfo perProjectInfo, boolean usePreviousSession, boolean addClasspathChange) throws JavaModelException", "signatureAfterChange": " \t \tpublic ResolvedClasspath resolveClasspath(IClasspathEntry[] rawClasspath, boolean usePreviousSession, boolean resolveChainedLibraries) throws JavaModelException", "diff": ["+\t\treturn resolveClasspath(rawClasspath, null, usePreviousSession, resolveChainedLibraries);", "+\t}", "-\t\t\tIClasspathEntry[] rawClasspath;", "-\t\t\t\trawClasspath= perProjectInfo.rawClasspath;", "-\t\t\t\tif (rawClasspath == null)", "-\t\t\t\t\trawClasspath = perProjectInfo.readAndCacheClasspath(this);", "-\t\t\t", "-\t\t\tResolvedClasspath result = resolveClasspath(rawClasspath, usePreviousSession, true/*resolve chained libraries*/);", "-\t\t\tperProjectInfo.setResolvedClasspath(result.resolvedClasspath, result.rawReverseMap, result.rootPathToResolvedEntries, usePreviousSession ? PerProjectInfo.NEED_RESOLUTION : result.unresolvedEntryStatus, timeStamp, addClasspathChange);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81e8d00475e7a3979d2d00a20203c111", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java", "commitBeforeChange": "1621c26161ec3c3c873e4f7bb53cba6eb9386f82", "commitAfterChange": "bd694647e8272783b0f72f57db94ca8452555ef0", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void makeConsistent(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public void makeConsistent(IProgressMonitor monitor) throws JavaModelException", "diff": ["-\tif (isConsistent()) return;", "-\t", "-\t// create a new info and make it the current info", "-\t// (this will remove the info and its children just before storing the new infos)", "-\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\tboolean hadTemporaryCache = manager.hasTemporaryCache();", "-\ttry {", "-\t\tHashMap newElements = manager.getTemporaryCache();", "-\t\topenWhenClosed(newElements, monitor);", "-\t\tif (newElements.get(this) == null) {", "-\t\t\t// close any buffer that was opened for the new elements", "-\t\t\tIterator iterator = newElements.keySet().iterator();", "-\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\tIJavaElement element = (IJavaElement)iterator.next();", "-\t\t\t\tif (element instanceof Openable) {", "-\t\t\t\t\t((Openable)element).closeBuffer();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tthrow newNotPresentException();", "-\t\t}", "-\t\tif (!hadTemporaryCache) {", "-\t\t\tmanager.putInfos(this, newElements);", "-\t\t}", "-\t} finally {", "-\t\tif (!hadTemporaryCache) {", "-\t\t\tmanager.resetTemporaryCache();", "-\t\t}", "-\t}", "+\t// only compilation units can be inconsistent", "+\t// other openables cannot be inconsistent so default is to do nothing"]}], "num": 45990}
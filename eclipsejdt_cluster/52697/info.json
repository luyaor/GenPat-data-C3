{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "911ac5a374a58ad58146cef5f6ad97c9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4495d9c17689795ec5c1ff48a890b034", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "dc897dd3e4818ca2b15bd3d143de606b0ce0335f", "commitAfterChange": "8536e94c328f058d5f377b8328af7061c65f8af1", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprivate QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, AstNode node)", "signatureAfterChange": "  \tprivate QualifiedName setQualifiedNameNameAndSourceRanges(char[][] typeName, long[] positions, AstNode node)", "diff": ["+\t\tfirstToken.index = length - 1;", "+\t\tsecondToken.index = length - 2;", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(qualifiedName, node);", "+\t\t\trecordPendingNameScopeResolution(qualifiedName);", "+\t\t\trecordNodes(firstToken, node);", "+\t\t\trecordNodes(secondToken, node);", "+\t\t\trecordPendingNameScopeResolution(firstToken);", "+\t\t\trecordPendingNameScopeResolution(secondToken);", "+\t\t}", "+\t\tqualifiedName.index = length - 2;", "+\t\t\tnewPart.index = length - i - 1;", "+\t\t\tqualifiedName.index = newPart.index;", "+\t\t\tif (this.resolveBindings) {", "+\t\t\t\trecordNodes(qualifiedName, node);", "+\t\t\t\trecordNodes(newPart, node);\t\t\t\t", "+\t\t\t\trecordPendingNameScopeResolution(qualifiedName);", "+\t\t\t\trecordPendingNameScopeResolution(newPart);", "+\t\t\t}", "+\t\t\trecordPendingNameScopeResolution(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ccd89ad71d07d9ac74f7e6f737aa49e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "commitAfterChange": "dcf93fb34d4ce9325841c9302bc217b02f49501a", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": "  \tpublic Type convertType(TypeReference typeReference)", "diff": ["+                            int startingIndex = 0;", "+                            int endingIndex = 0;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tint startingIndex = 0;", "-\t\t\t\t\t\t\tint endingIndex = 0;", "-\t\t\t\t\t\t\twhile (typeArguments[endingIndex] == null) {", "-\t\t\t\t\t\t\t\tendingIndex++;", "+\t\t\t\t\t\t\t\t} else if (numberOfEnclosingType == 0) {", "+                                    endingIndex++;", "+                                }", "+\t\t\t\t\t\t\t\tname.index = 1;", "-\t\t\t\t\t\t\t\tname = this.setQualifiedNameNameAndSourceRanges(tokens, positions, startingIndex, endingIndex, typeReference);", "+\t\t\t\t\t\t\t\tname = this.setQualifiedNameNameAndSourceRanges(tokens, positions, endingIndex, typeReference);", "+\t\t\t\t\t\t\trecordNodes(name, typeReference);", "+                            if (this.resolveBindings) {", "+                                recordNodes(simpleType, typeReference);", "+                                recordNodes(parameterizedType, typeReference);", "+                            }", "+\t\t\t\t\t\t\tint indexOfEnclosingType = 1;", "+\t\t\t\t\t\t\tparameterizedType.index = indexOfEnclosingType;", "+\t\t\t\t\t\t\t\tsimpleName.index = startingIndex + 1;", "-\t\t\t\t\t\t\t\tQualifiedType qualifiedType = this.ast.newQualifiedType(currentType, simpleName);\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tQualifiedType qualifiedType = this.ast.newQualifiedType(currentType, simpleName);", "+                                if (this.resolveBindings) {", "+                                    recordNodes(simpleName, typeReference);", "+                                    recordNodes(qualifiedType, typeReference);", "+                                }", "+\t\t\t\t\t\t\t\tindexOfEnclosingType++;", "+\t                               \tqualifiedType.index = indexOfEnclosingType;", "+ \t\t\t\t\t\t\t\t\tparameterizedType2.index = indexOfEnclosingType;", "+                                   if (this.resolveBindings) {", "+                                        recordNodes(parameterizedType2, typeReference);", "+                                    }", "+                               \t\tqualifiedType.index = indexOfEnclosingType;"]}], "num": 52697}
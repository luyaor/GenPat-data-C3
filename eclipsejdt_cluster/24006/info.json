{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bacd39ad124b854f25a11783ebbf9c13", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "332b9dee4de407360b503be174e40498", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "11e4e14c87ae9f5d3c387265b339332ab33728bd", "commitAfterChange": "a8ccd47f929845c5a31f3d30e26f356186998ae8", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " protected void consumeBinaryExpression(int op)", "signatureAfterChange": " protected void consumeBinaryExpression(int op)", "diff": ["+\t\t\t\t} else if (expr1 instanceof CombinedBinaryExpression) {", "+\t\t\t\t\tCombinedBinaryExpression cursor;", "+\t\t\t\t\t// left branch is comprised of PLUS BEs", "+\t\t\t\t\t// cursor is shifted upwards, while needed BEs are added", "+\t\t\t\t\t// on demand; past the arityMax-th", "+\t\t\t\t\t// consecutive BE, a CBE is inserted that holds a ", "+\t\t\t\t\t// full-fledged references table", "+\t\t\t\t\tif ((cursor = (CombinedBinaryExpression)expr1).arity <", "+\t\t\t\t\t\t\t\tcursor.arityMax) {", "+\t\t\t\t\t\tcursor.left = new BinaryExpression(cursor.left,", "+\t\t\t\t\t\t\t\tcursor.right, PLUS);", "+\t\t\t\t\t\tcursor.arity++;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcursor.left = new CombinedBinaryExpression(cursor.left,", "+\t\t\t\t\t\t\t\tcursor.right, PLUS, cursor.arity);", "+\t\t\t\t\t\tcursor.arity = 0;", "+\t\t\t\t\t\tcursor.tuneArityMax();", "+\t\t\t\t\t}", "+\t\t\t\t\tcursor.right = expr2;", "+\t\t\t\t\tcursor.sourceEnd = expr2.sourceEnd;", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr] = cursor;", "+\t\t\t\t\t// BE_INSTRUMENTATION: neutralized in the released code\t\t\t\t\t", "+//\t\t\t\t\tcursor.depthTracker = ((BinaryExpression)cursor.left).", "+//\t\t\t\t\t\tdepthTracker + 1;\t\t\t\t\t", "+\t\t\t\t} else if (expr1 instanceof BinaryExpression) {", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\t\t\tnew CombinedBinaryExpression(expr1, expr2, PLUS, 1);", "-\t\t\t\t\tthis.expressionStack[this.expressionPtr] = new BinaryExpression(expr1, expr2, PLUS);", "+\t\t\t\t\t// single out the a + b case, which is a BE ", "+\t\t\t\t\t// instead of a CBE (slightly more than a half of strings", "+\t\t\t\t\t// concatenation are one-deep binary expressions)", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\t\t\tnew BinaryExpression(expr1, expr2, PLUS);", "+\t\t\t\t\t// single out the a + b case", "-\t\t\t\t\t\tnew BinaryExpression(", "-\t\t\t\t\t\t\texpr1, ", "-\t\t\t\t\t\t\texpr2, ", "-\t\t\t\t\t\t\top);", "+\t\t\t\t\t\tnew BinaryExpression(expr1, expr2, PLUS);", "-\t\t\t} else {", "-\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\t\t\tnew BinaryExpression(", "-\t\t\t\t\t\texpr1, ", "-\t\t\t\t\t\texpr2, ", "-\t\t\t\t\t\top);", "-\t\t\t}", "+\t\t\t} else if (expr1 instanceof CombinedBinaryExpression) {", "+\t\t\t\t\tCombinedBinaryExpression cursor;", "+\t\t\t\t\t// shift cursor; create BE/CBE as needed", "+\t\t\t\t\tif ((cursor = (CombinedBinaryExpression)expr1).arity <", "+\t\t\t\t\t\t\t\tcursor.arityMax) {", "+\t\t\t\t\t\tcursor.left = new BinaryExpression(cursor.left,", "+\t\t\t\t\t\t\t\tcursor.right, PLUS);", "+\t\t\t\t\t\tcursor.arity++;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcursor.left = new CombinedBinaryExpression(cursor.left,", "+\t\t\t\t\t\t\t\tcursor.right, PLUS, cursor.arity);", "+\t\t\t\t\t\tcursor.arity = 0;", "+\t\t\t\t\t\tcursor.tuneArityMax();", "+\t\t\t\t\t}", "+\t\t\t\t\tcursor.right = expr2;", "+\t\t\t\t\tcursor.sourceEnd = expr2.sourceEnd;", "+\t\t\t\t\t// BE_INSTRUMENTATION: neutralized in the released code\t\t\t\t\t", "+//\t\t\t\t\tcursor.depthTracker = ((BinaryExpression)cursor.left).", "+//\t\t\t\t\t\tdepthTracker + 1;", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr] = cursor;", "+\t\t\t\t} else if (expr1 instanceof BinaryExpression) {", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\t\t\tnew CombinedBinaryExpression(expr1, expr2, PLUS, 1);", "+\t\t\t\t} else {", "+\t\t\t\t\t// single out the a + b case", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\t\t\tnew BinaryExpression(expr1, expr2, PLUS);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b32929bca4aca238e64875cde73366a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "72465f40b09586b7077dc16c43e2ab23727eff60", "commitAfterChange": "86316ee52fb877ee37d8d76a33df02613efc76e0", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \t \tpublic Expression convert(BinaryExpression expression)", "signatureAfterChange": " \t \tpublic Expression convert(BinaryExpression expression)", "diff": ["-\t\tif (expression.left instanceof BinaryExpression) {", "+\t\tif (expression.left instanceof BinaryExpression && !checkForParenthesis(expression.left)) {", "-\t\t\t\tif (((leftOperand.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) != expressionOperatorID", "-\t\t\t\t || (rightOperand instanceof BinaryExpression && ((rightOperand.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) != expressionOperatorID)", "-\t\t\t\t || checkForParenthesis(leftOperand)) {", "-\t\t\t\t\tinfixExpression.extendedOperands().clear();", "-\t\t\t\t\tExpression leftExpression = convert(expression.left);", "-\t\t\t\t\tinfixExpression.setLeftOperand(leftExpression);", "-\t\t\t\t\tinfixExpression.setRightOperand(convert(expression.right));", "-\t\t\t\t\tint startPosition = leftExpression.getStartPosition();", "+\t\t\t\tif ((((leftOperand.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) != expressionOperatorID && !checkForParenthesis(leftOperand))", "+\t\t\t\t || ((rightOperand instanceof BinaryExpression && ((rightOperand.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) != expressionOperatorID) && !checkForParenthesis(rightOperand))) {", "+\t\t\t\t \tList extendedOperands = infixExpression.extendedOperands();", "+\t\t\t\t \tInfixExpression temp = this.ast.newInfixExpression();", "+\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\tthis.recordNodes(temp, expression);", "+\t\t\t\t\t}", "+\t\t\t\t \ttemp.setOperator(getOperatorFor(expressionOperatorID));", "+\t\t\t\t \tExpression leftSide = convert(leftOperand);", "+\t\t\t\t\ttemp.setLeftOperand(leftSide);", "+\t\t\t\t\ttemp.setSourceRange(leftSide.getStartPosition(), leftSide.getLength());", "+\t\t\t\t\tint size = extendedOperands.size();", "+\t\t\t\t \tfor (int i = 0; i < size - 1; i++) {", "+\t\t\t\t \t\tExpression expr = temp;", "+\t\t\t\t \t\ttemp = this.ast.newInfixExpression();", "+\t\t\t\t \t\t", "+\t\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\t\tthis.recordNodes(temp, expression);", "+\t\t\t\t\t\t}\t\t\t\t \t", "+\t\t\t\t \t\ttemp.setLeftOperand(expr);", "+\t\t\t\t\t \ttemp.setOperator(getOperatorFor(expressionOperatorID));", "+\t\t\t\t\t\ttemp.setSourceRange(expr.getStartPosition(), expr.getLength());", "+\t\t\t\t \t}", "+\t\t\t\t \tinfixExpression = temp;", "+\t\t\t\t \tfor (int i = 0; i < size; i++) {", "+\t\t\t\t \t\tExpression extendedOperand = (Expression) extendedOperands.remove(size - 1 - i);", "+\t\t\t\t \t\ttemp.setRightOperand(extendedOperand);", "+\t\t\t\t \t\tint startPosition = temp.getLeftOperand().getStartPosition();", "+\t\t\t\t \t\ttemp.setSourceRange(startPosition, extendedOperand.getStartPosition() + extendedOperand.getLength() - startPosition);", "+\t\t\t\t \t\tif (temp.getLeftOperand().getNodeType() == ASTNode.INFIX_EXPRESSION) {", "+\t\t\t\t \t\t\ttemp = (InfixExpression) temp.getLeftOperand();", "+\t\t\t\t \t\t}", "+\t\t\t\t \t}", "+\t\t\t\t\tint startPosition = infixExpression.getLeftOperand().getStartPosition();", "+\t\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\t\tthis.recordNodes(infixExpression, expression);", "+\t\t\t\t\t}", "-\t\t\t} while (leftOperand instanceof BinaryExpression);", "+\t\t\t} while (leftOperand instanceof BinaryExpression && !(checkForParenthesis(leftOperand)));"]}], "num": 24006}
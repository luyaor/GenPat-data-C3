{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9cfc2c3b138ff7a3e76ca5a9b06b0089", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d1fa895b45c33906718955eedc01705", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java", "commitBeforeChange": "50edd18aecf53feeb87eedfe2eb9dbbb6ea16224", "commitAfterChange": "57e6ab81c3cf39fecb76455d174c657f7c273f84", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\t \tprivate CompilationParticipantResult preBuildNotify( PreBuildCompilationEvent pbce )", "signatureAfterChange": " \t\t \tprivate CompilationParticipantResult preBuildNotify( PreBuildCompilationEvent pbce )", "diff": ["+\t\t", "+\t\t// Don't dispatch on pre-1.5 project. They cannot legally have annotations", "+\t\tString javaVersion = javaProject.getOption(\"org.eclipse.jdt.core.compiler.source\", true);", "+\t\t", "+\t\t// Check for 1.3 or 1.4, as we don't want this to break in the future when 1.6", "+\t\t// is a possibility", "+\t\tif (\"1.3\".equals(javaVersion) || \"1.4\".equals(javaVersion)) {", "+\t\t\treturn EMPTY_PRE_BUILD_COMPILATION_RESULT;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82c434c905e6b3d0cd8fb04ef36e416a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "763e42ee77f843bf78751f85365c5a74eb47696c", "commitAfterChange": "525a282931680472e1c4e0ea3a9d163e6052ec36", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "\r \tpublic IPackageFragmentRoot getPackageFragmentRoot(IPath path)", "signatureAfterChange": "\r \tpublic IPackageFragmentRoot getPackageFragmentRoot(IPath path)", "diff": ["-\t\t\treturn getPackageFragmentRoot(path.toString()); // external jar\r", "+\t\t\tString ext= path.getFileExtension();\r", "+\t\t\tif (\"jar\".equalsIgnoreCase(ext) || \"class\".equalsIgnoreCase(ext)) {\r", "+\t\t\t\t// external jar\r", "+\t\t\t\treturn getPackageFragmentRoot(path.toString()); \r", "+\t\t\t} else {\r", "+\t\t\t\t// unknown path\r", "+\t\t\t\treturn null;\r", "+\t\t\t}\r"]}], "num": 55448}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e970ca71bcbd2ce7169eaaf94d012f0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02496b1129a350758588cb6b52233c81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "bf17807076522b492d9a582c812c5e15d78b5fff", "commitAfterChange": "7499dd3309f66badc0b9a54f55f1bb48d32b67b2", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic IPackageFragmentRoot getPackageFragmentRoot(IResource resource)", "signatureAfterChange": " \tpublic IPackageFragmentRoot getPackageFragmentRoot(IResource resource)", "diff": ["-\t\t\t\tif (resource.getProject().equals(getProject())) {", "-\t\t\t\t\t// name of root is the project relative path (case of source folders and library folder in same project)", "-\t\t\t\t\treturn new PackageFragmentRoot(resource, this, resource.getProjectRelativePath().toString());", "-\t\t\t\t} else {", "-\t\t\t\t\t// name of root is the full path (case of library folder in another project)", "-\t\t\t\t\treturn new PackageFragmentRoot(resource, this, resource.getFullPath().toString());", "-\t\t\t\t}", "+\t\t\t\treturn new PackageFragmentRoot(resource, this, resource.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f377cded7a161da356ab7516a4d1a36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "20f9880068ffc8b9ca5e4df40a1417c5832ce46b", "commitAfterChange": "0fb012af3c6557520ab00415c58833602b027192", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tpublic IPackageFragmentRoot getPackageFragmentRoot(IResource resource)", "signatureAfterChange": " \tpublic IPackageFragmentRoot getPackageFragmentRoot(IResource resource)", "diff": ["-\t\tString name = resource.getName();", "-\t\t\t&& (Util.endsWithIgnoreCase(name, \".jar\") //$NON-NLS-1$", "-\t\t\t\t|| Util.endsWithIgnoreCase(name, \".zip\"))) { //$NON-NLS-1$ ", "+\t\t\t&& (Util.isArchiveFileName(resource.getName()))) {", "-\t\t\treturn new PackageFragmentRoot(resource, this);", "+\t\t\tif (resource.getProject().equals(getProject())) {", "+\t\t\t\t// name of root will be the project relative path (source forlders and library folder in same project)", "+\t\t\t\treturn new PackageFragmentRoot(resource, this);", "+\t\t\t} else {", "+\t\t\t\t// name of root will be the full path (library folder in another project)", "+\t\t\t\treturn new PackageFragmentRoot(resource, this, resource.getFullPath().toString());", "+\t\t\t}"]}], "num": 68303}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f6c937d19903edaea7fe528e4296947", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39eea934777226ed62d39d2f8adc8d46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "7d377efa996fb82a3b5c1b0d3643171f071fe458", "commitAfterChange": "5725587b7e076e798174c1de3afdd9fd81ea2803", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public int literalIndexForMethod(TypeBinding declaringClass, char[] selector, char[] signature, boolean isInterface)", "signatureAfterChange": " public int literalIndexForMethod(TypeBinding declaringClass, char[] selector, char[] signature, boolean isInterface)", "diff": ["-    if (declaringClass.isNestedType()) {", "-        this.classFile.recordInnerClasses(declaringClass);", "-    }", "-    return this.literalIndexForMethod(declaringClass.constantPoolName(), selector, signature, isInterface);", "+\tif ((declaringClass.tagBits & TagBits.ContainsNestedTypeReferences) != 0) {", "+\t\tUtil.recordNestedType(this.classFile, declaringClass);", "+\t}", "+\treturn this.literalIndexForMethod(declaringClass.constantPoolName(), selector, signature, isInterface);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "611195c18dce161d61561dc7ef631135", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "7d377efa996fb82a3b5c1b0d3643171f071fe458", "commitAfterChange": "5725587b7e076e798174c1de3afdd9fd81ea2803", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public int literalIndex(TypeBinding binding)", "signatureAfterChange": " public int literalIndex(TypeBinding binding)", "diff": ["-    TypeBinding typeBinding = binding.leafComponentType();", "-    if (typeBinding.isNestedType()) {", "-        this.classFile.recordInnerClasses(typeBinding);", "-    }", "-    return literalIndex(binding.signature());", "+\tTypeBinding typeBinding = binding.leafComponentType();", "+\tif ((typeBinding.tagBits & TagBits.ContainsNestedTypeReferences) != 0) {", "+\t\tUtil.recordNestedType(this.classFile, typeBinding);", "+\t}", "+\treturn literalIndex(binding.signature());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69f538c22300c0504617b5ae894c6cbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "7d377efa996fb82a3b5c1b0d3643171f071fe458", "commitAfterChange": "5725587b7e076e798174c1de3afdd9fd81ea2803", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 186, "signatureBeforeChange": "  public void invoke(byte opcode, MethodBinding methodBinding, TypeBinding declaringClass)", "signatureAfterChange": "  public void invoke(byte opcode, MethodBinding methodBinding, TypeBinding declaringClass)", "diff": ["-    if (declaringClass.isNestedType()) {", "-        this.classFile.recordInnerClasses(declaringClass);", "-    }", "-    // compute receiverAndArgsSize", "-    int receiverAndArgsSize;", "-    switch(opcode) {", "-    \tcase Opcodes.OPC_invokestatic :", "-    \t\treceiverAndArgsSize = 0; // no receiver", "-    \t\tbreak;", "-    \tcase Opcodes.OPC_invokeinterface :", "-    \tcase Opcodes.OPC_invokevirtual :", "-    \t\treceiverAndArgsSize = 1; // receiver", "-    \t\tbreak;", "-    \tcase Opcodes.OPC_invokespecial :", "-    \t\treceiverAndArgsSize = 1; // receiver", "-    \t\tif (methodBinding.isConstructor()) {", "-    \t\t\tif (declaringClass.isNestedType()) {", "-        \t\t\tReferenceBinding nestedType = (ReferenceBinding) declaringClass;", "-    \t\t\t\t// enclosing instances", "-        \t\t\treceiverAndArgsSize += nestedType.getEnclosingInstancesSlotSize();", "-    \t\t\t\t// outer local variables", "-    \t\t\t\tSyntheticArgumentBinding[] syntheticArguments = nestedType.syntheticOuterLocalVariables();", "-    \t\t\t\tif (syntheticArguments != null) {", "-    \t\t\t\t\tfor (int i = 0, max = syntheticArguments.length; i < max; i++) {", "-    \t\t\t\t\t\tswitch (syntheticArguments[i].id)  {", "-    \t\t\t\t\t\t\tcase TypeIds.T_double :", "-    \t\t\t\t\t\t\tcase TypeIds.T_long :", "-\t    \t\t\t\t\t\t\treceiverAndArgsSize += 2;", "+\tif ((declaringClass.tagBits & TagBits.ContainsNestedTypeReferences) != 0) {", "+\t\tUtil.recordNestedType(this.classFile, declaringClass);", "+\t}", "+\t// compute receiverAndArgsSize", "+\tint receiverAndArgsSize;", "+\tswitch(opcode) {", "+\t\tcase Opcodes.OPC_invokestatic :", "+\t\t\treceiverAndArgsSize = 0; // no receiver", "+\t\t\tbreak;", "+\t\tcase Opcodes.OPC_invokeinterface :", "+\t\tcase Opcodes.OPC_invokevirtual :", "+\t\t\treceiverAndArgsSize = 1; // receiver", "+\t\t\tbreak;", "+\t\tcase Opcodes.OPC_invokespecial :", "+\t\t\treceiverAndArgsSize = 1; // receiver", "+\t\t\tif (methodBinding.isConstructor()) {", "+\t\t\t\tif (declaringClass.isNestedType()) {", "+\t\t\t\t\tReferenceBinding nestedType = (ReferenceBinding) declaringClass;", "+\t\t\t\t\t// enclosing instances", "+\t\t\t\t\treceiverAndArgsSize += nestedType.getEnclosingInstancesSlotSize();", "+\t\t\t\t\t// outer local variables", "+\t\t\t\t\tSyntheticArgumentBinding[] syntheticArguments = nestedType.syntheticOuterLocalVariables();", "+\t\t\t\t\tif (syntheticArguments != null) {", "+\t\t\t\t\t\tfor (int i = 0, max = syntheticArguments.length; i < max; i++) {", "+\t\t\t\t\t\t\tswitch (syntheticArguments[i].id)  {", "+\t\t\t\t\t\t\t\tcase TypeIds.T_double :", "+\t\t\t\t\t\t\t\tcase TypeIds.T_long :", "+\t\t\t\t\t\t\t\t\treceiverAndArgsSize += 2;", "-    \t\t\t\t\t\t\tdefault: ", "-\t    \t\t\t\t\t\t\treceiverAndArgsSize++;", "-    \t\t\t\t\t\t\t\tbreak;", "-    \t\t\t\t\t\t}    \t\t\t\t\t\t", "-    \t\t\t\t\t}", "-    \t\t\t\t}", "-    \t\t\t}", "-    \t\t\tif (declaringClass.isEnum()) {", "-    \t\t\t\t// adding String (name) and int (ordinal)", "-    \t\t\t\treceiverAndArgsSize += 2;", "-    \t\t\t}", "-    \t\t}    \t\t", "-    \t\tbreak;", "-    \tdefault :", "-    \t\treturn; // should not occur", "-    \t\t", "-    }", "+\t\t\t\t\t\t\t\tdefault: ", "+\t\t\t\t\t\t\t\t\treceiverAndArgsSize++;", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}    \t\t\t\t\t\t", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (declaringClass.isEnum()) {", "+\t\t\t\t\t// adding String (name) and int (ordinal)", "+\t\t\t\t\treceiverAndArgsSize += 2;", "+\t\t\t\t}", "+\t\t\t}    \t\t", "+\t\t\tbreak;", "+\t\tdefault :", "+\t\t\treturn; // should not occur", "+", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7466af3c60f4413a57a09eea306b3ad8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "7d377efa996fb82a3b5c1b0d3643171f071fe458", "commitAfterChange": "5725587b7e076e798174c1de3afdd9fd81ea2803", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public int literalIndexForType(final TypeBinding binding)", "signatureAfterChange": " public int literalIndexForType(final TypeBinding binding)", "diff": ["-    TypeBinding typeBinding = binding.leafComponentType();", "-    if (typeBinding.isNestedType()) {", "-        this.classFile.recordInnerClasses(typeBinding);", "-    }", "-    return this.literalIndexForType(binding.constantPoolName());", "+\tTypeBinding typeBinding = binding.leafComponentType();", "+\tif ((typeBinding.tagBits & TagBits.ContainsNestedTypeReferences) != 0) {", "+\t\tUtil.recordNestedType(this.classFile, typeBinding);", "+\t}", "+\treturn this.literalIndexForType(binding.constantPoolName());"]}], "num": 64526}
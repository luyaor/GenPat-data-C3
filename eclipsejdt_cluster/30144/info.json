{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fee5da58174f10da7a16fd9024108fc7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13613b2a7d488a3509f34c4df7ac178e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/Tests.java", "commitBeforeChange": "9384d44d51fc135ab261a46a0c5c6cf06b8a4075", "commitAfterChange": "641e4134a5f663294c87ac80c963d690a90319bc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected void expectingNoPresenceOf(IPath[] paths)", "signatureAfterChange": " \tprotected void expectingNoPresenceOf(IPath[] paths)", "diff": ["-\t\t", "-\t\tfor (int i = 0; i < paths.length; i++){", "-\t\t\tassertTrue(paths[i] +\" is present\", !wRoot.append(paths[i]).toFile().exists()); //$NON-NLS-1$", "-\t\t}", "+", "+\t\tfor (int i = 0; i < paths.length; i++)", "+\t\t\tassertTrue(paths[i] + \" is present\", !wRoot.append(paths[i]).toFile().exists()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eae80acb4705db4ac88d692621164637", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/LocalVariableLocator.java", "commitBeforeChange": "cb3a630359a22f7ce6166a489826cbd44a0698c7", "commitAfterChange": "684148daf1ae1fa5c2a3b4e261bbfa56ad328f58", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic int resolveLevel(AstNode possiblelMatchingNode)", "signatureAfterChange": " public int resolveLevel(AstNode possiblelMatchingNode)", "diff": ["+}", "+public int resolveLevel(AstNode possiblelMatchingNode) {", "+\tif (this.pattern.findReferences)", "+\t\tif (possiblelMatchingNode instanceof NameReference)", "+\t\t\treturn resolveLevel((NameReference) possiblelMatchingNode);", "+\tif (possiblelMatchingNode instanceof LocalDeclaration)", "+\t\treturn matchLocalVariable(((LocalDeclaration) possiblelMatchingNode).binding, true);", "+\treturn IMPOSSIBLE_MATCH;", "+}", "-", "-\tpublic int resolveLevel(AstNode possiblelMatchingNode) {", "-\t\tif (this.pattern.findReferences) {", "-\t\t\tif (possiblelMatchingNode instanceof NameReference)", "-\t\t\t\treturn resolveLevel((NameReference) possiblelMatchingNode);", "-\t\t}", "-\t\tif (possiblelMatchingNode instanceof LocalDeclaration)", "-\t\t\treturn matchLocalVariable(((LocalDeclaration) possiblelMatchingNode).binding, true);", "-\t\treturn IMPOSSIBLE_MATCH;", "-\t}"]}], "num": 30144}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "afb5cf6363d1222092eceb3a502184ae", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87f3aed02802b42c07d02d0934a07ee3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchMatch.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic String toString()", "signatureAfterChange": " \tpublic String toString()", "diff": ["-\t\tif ((this.matchRule & SearchPattern.R_EQUIVALENT_MATCH) != 0) {", "-\t\t\tbuffer.append(\"EQUIVALENT\"); //$NON-NLS-1$", "-\t\t\tif ((this.matchRule & SearchPattern.R_ERASURE_MATCH) != 0)", "-\t\t\t\tbuffer.append(\"+ERASURE\"); //$NON-NLS-1$", "-\t\t} else if ((this.matchRule & SearchPattern.R_ERASURE_MATCH) != 0) {", "-\t\t\tbuffer.append(\"ERASURE\"); //$NON-NLS-1$", "-\t\t} else {", "+\t\tif ((this.rule & SearchPattern.R_FULL_MATCH) != 0) {", "+\t\t} else if ((this.rule & SearchPattern.R_EQUIVALENT_MATCH) != 0) {", "+\t\t\tbuffer.append(\"EQUIVALENT\"); //$NON-NLS-1$", "+\t\t} else if ((this.rule & SearchPattern.R_ERASURE_MATCH) != 0) {", "+\t\t\tbuffer.append(\"ERASURE\"); //$NON-NLS-1$", "+\t\tbuffer.append(\"\\n  raw=\"); //$NON-NLS-1$", "+\t\tbuffer.append(this.raw);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3063d4f73d4d3b457de299e46061a21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "0a204bec13c166245ab38aefac187fb60ca5634f", "commitAfterChange": "60cbdce444f3fcf3297f6f80ad9fdcf610a9a0c4", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate ParameterizedGenericMethodBinding inferFromExpectedType(Scope scope, TypeBinding expectedType, Map collectedSubstitutes, TypeBinding[] substitutes)", "signatureAfterChange": " \tprivate ParameterizedGenericMethodBinding inferFromExpectedType(Scope scope, TypeBinding expectedType, Map collectedSubstitutes, TypeBinding[] substitutes)", "diff": ["-\t\t\t\t\tif (argAlreadyInferred)", "+\t\t\t\t\tif (argAlreadyInferred) {", "+\t\t\t\t\t}", "-\t\t\t\t\tif (argAlreadyInferred)", "+\t\t\t\t\tif (argAlreadyInferred) {", "+\t\t\t\t\t}", "-\t\t}\t\t", "+\t\t}", "+\t\t// may still need an extra substitution at the end (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=121369)", "+\t\t// to properly substitute a remaining unresolved variable which also appear in a formal bound", "+\t\tthis.typeArguments = Scope.substitute(this, this.typeArguments);"]}], "num": 61637}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b97deadede07fa68bcd323ff8e185b7d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06501cfaa5e77708586158078d2c22b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 13, "signatureBeforeChange": " private CompilationUnitDeclaration buildBindings(ICompilationUnit compilationUnit) throws JavaModelException", "signatureAfterChange": " protected CompilationUnitDeclaration buildBindings(ICompilationUnit compilationUnit) throws JavaModelException", "diff": ["- */", "-private CompilationUnitDeclaration buildBindings(ICompilationUnit compilationUnit) throws JavaModelException {", "-\tfinal IFile file = (IFile)compilationUnit.getResource();", "-\t", "-\t// get main type name", "-\tfinal String fileName = file.getFullPath().lastSegment();", "-\tfinal char[] mainTypeName =", "-\t\tfileName.substring(0, fileName.length() - 5).toCharArray();", "-\t", "-\t// source unit", "-\tIBuffer buffer;", "-\tfinal char[] source = ", "-\t\tcompilationUnit.isWorkingCopy() ?", "-\t\t\t(buffer = compilationUnit.getBuffer()) == null ? null : buffer.getCharacters() :", "-\t\t\tUtil.getResourceContentsAsCharArray(file);", "-\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit = ", "-\t\tnew org.eclipse.jdt.internal.compiler.env.ICompilationUnit() {", "-\t\t\tpublic char[] getContents() {", "-\t\t\t\treturn source;", "-\t\t\t}", "-\t\t\tpublic char[] getFileName() {", "-\t\t\t\treturn fileName.toCharArray();", "-\t\t\t}", "-\t\t\tpublic char[] getMainTypeName() {", "-\t\t\t\treturn mainTypeName;", "-\t\t\t}", "-\t\t\tpublic char[][] getPackageName() {", "-\t\t\t\treturn null;", "-\t\t\t}", "-\t\t};", "-\t", "-\t// diet parse", "-\tCompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0, 0);", "-\tCompilationUnitDeclaration unit = this.locator.parser.dietParse(sourceUnit, compilationResult);", "-\tif (unit != null) {", "-\t\tthis.locator.lookupEnvironment.buildTypeBindings(unit);", "-\t\tthis.locator.lookupEnvironment.completeTypeBindings(unit, false);", "-\t}", "-\treturn unit;", "-}", "+protected CompilationUnitDeclaration buildBindings(ICompilationUnit compilationUnit) throws JavaModelException {", "+\tfinal IFile file = (IFile) compilationUnit.getResource();", "+\tfinal String fileName = file.getFullPath().lastSegment();", "+\tfinal char[] mainTypeName = fileName.substring(0, fileName.length() - 5).toCharArray();", "+\t// source unit", "+\tIBuffer buffer = compilationUnit.getBuffer();", "+\tfinal char[] source = ", "+\t\tcompilationUnit.isWorkingCopy()", "+\t\t\t? (buffer == null ? null : buffer.getCharacters())", "+\t\t\t: Util.getResourceContentsAsCharArray(file);", "+\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit = ", "+\t\tnew org.eclipse.jdt.internal.compiler.env.ICompilationUnit() {", "+\t\t\tpublic char[] getContents() { return source; }", "+\t\t\tpublic char[] getFileName() { return fileName.toCharArray(); }", "+\t\t\tpublic char[] getMainTypeName() { return mainTypeName; }", "+\t\t\tpublic char[][] getPackageName() { return null; }", "+\t\t};", "+", "+\tCompilationResult compilationResult = new CompilationResult(sourceUnit, 1, 1, 0);", "+\tCompilationUnitDeclaration unit = this.locator.basicParser().dietParse(sourceUnit, compilationResult);", "+\treturn unit;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ef9e20fbf54ddcd86d5c7554b78f1bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "305e4f0c27f7df148c6acf3c313dda144407f8c1", "commitAfterChange": "c72a639799e1f7a209f8477bea888d0d19067c25", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public void accept(ISourceType sourceType, PackageBinding packageBinding)", "signatureAfterChange": "\r public void accept(ISourceType sourceType, PackageBinding packageBinding)", "diff": ["-\tCompilationResult result = new CompilationResult(sourceType.getFileName(), 1, 1); // need to hold onto this\r", "-\tCompilationUnitDeclaration unit =\r", "-\t\tSourceTypeConverter.buildCompilationUnit(sourceType, true, true, lookupEnvironment.problemReporter, result);\r", "+\tCompilationUnitDeclaration unit;\r", "+\tif (sourceType instanceof SourceTypeElementInfo) {\r", "+\t\t// get source\r", "+\t\tSourceTypeElementInfo elementInfo = (SourceTypeElementInfo)sourceType;\r", "+\t\tIType type = elementInfo.getHandle();\r", "+\t\ttry {\r", "+\t\t\tfinal IFile file = (IFile)type.getUnderlyingResource();\r", "+\t\t\tfinal char[] source = PotentialMatch.getContents(file);\r", "+\r", "+\t\t\t// get main type name\r", "+\t\t\tfinal String fileName = file.getFullPath().lastSegment();\r", "+\t\t\tfinal char[] mainTypeName = fileName.substring(0, fileName.length()-5).toCharArray(); \r", "+\r", "+\t\t\t// source unit\r", "+\t\t\tICompilationUnit sourceUnit = new ICompilationUnit() {\r", "+\t\t\t\tpublic char[] getContents() {\r", "+\t\t\t\t\treturn source;\r", "+\t\t\t\t}\r", "+\t\t\t\tpublic char[] getFileName() {\r", "+\t\t\t\t\treturn fileName.toCharArray();\r", "+\t\t\t\t}\r", "+\t\t\t\tpublic char[] getMainTypeName() {\r", "+\t\t\t\t\treturn mainTypeName;\r", "+\t\t\t\t}\r", "+\t\t\t};\r", "+\t\t\t\r", "+\t\t\t// diet parse\r", "+\t\t\tCompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0);  \r", "+\t\t\tunit = this.parser.dietParse(sourceUnit, compilationResult);\r", "+\t\t} catch (JavaModelException e) {\r", "+\t\t\tunit = null;\r", "+\t\t}\r", "+\t} else {\r", "+\t\tCompilationResult result = new CompilationResult(sourceType.getFileName(), 0, 0);\r", "+\t\tunit =\r", "+\t\t\tSourceTypeConverter.buildCompilationUnit(sourceType, true, true, lookupEnvironment.problemReporter, result);\r", "+\t}\r", "+\t\tthis.parsedUnits.put(sourceType.getQualifiedName(), unit);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe70fcf4e12971ea74f4bda7a7b705cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "161b33b1dd753a14c62dc5cb298555b7a8135f16", "commitAfterChange": "0af694b5a2455cea6ace262561a6329b05ee9c78", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "signatureAfterChange": "\r \tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "diff": ["-\t\tCompilationUnitDeclaration unit = null;\r", "-\t\t\t\tfinal IFile file = (IFile) type.getUnderlyingResource();\r", "-\t\t\t\tfinal char[] source = Util.getResourceContentsAsCharArray(file);\r", "-\r", "-\t\t\t\t// get main type name\r", "-\t\t\t\tfinal String fileName = file.getFullPath().lastSegment();\r", "-\t\t\t\tfinal char[] mainTypeName =\r", "-\t\t\t\t\tfileName.substring(0, fileName.length() - 5).toCharArray();\r", "-\r", "-\t\t\t\t// source unit\r", "-\t\t\t\tICompilationUnit sourceUnit = new ICompilationUnit() {\r", "-\t\t\t\t\tpublic char[] getContents() {\r", "-\t\t\t\t\t\treturn source;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tpublic char[] getFileName() {\r", "-\t\t\t\t\t\treturn fileName.toCharArray();\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tpublic char[] getMainTypeName() {\r", "-\t\t\t\t\t\treturn mainTypeName;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t};\r", "-\r", "-\t\t\t\t// diet parse\r", "-\t\t\t\tMatchSet originalMatchSet = this.parser.matchSet;\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tthis.parser.matchSet = new MatchSet(this);\r", "-\t\t\t\t\tCompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0);\r", "-\t\t\t\t\tunit = this.parser.dietParse(sourceUnit, compilationResult);\r", "-\t\t\t\t} finally {\r", "-\t\t\t\t\tif (originalMatchSet == null) {\r", "-\t\t\t\t\t\tif (!this.parser.matchSet.isEmpty() \r", "-\t\t\t\t\t\t\t\t&& unit != null) {\r", "-\t\t\t\t\t\t\t// potential matches were found while initializing the search pattern\r", "-\t\t\t\t\t\t\t// from the lookup environment: add them in the list of potential matches\r", "-\t\t\t\t\t\t\tPotentialMatch potentialMatch = \r", "-\t\t\t\t\t\t\t\tnew PotentialMatch(\r", "-\t\t\t\t\t\t\t\t\tthis,\r", "-\t\t\t\t\t\t\t\t\tfile, \r", "-\t\t\t\t\t\t\t\t\t(CompilationUnit)type.getCompilationUnit(), \r", "-\t\t\t\t\t\t\t\t\tunit,\r", "-\t\t\t\t\t\t\t\t\tthis.parser.matchSet);\r", "-\t\t\t\t\t\t\tthis.addPotentialMatch(potentialMatch);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tthis.parser.matchSet = null;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tthis.parser.matchSet = originalMatchSet;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "+\t\t\t\tthis.buildBindings(type.getCompilationUnit());\r", "-\t\t\t\tunit = null;\r", "+\t\t\t\t// nothing we can do here: ignore\r", "-\t\t\tunit =\r", "+\t\t\tCompilationUnitDeclaration unit =\r", "-\t\t}\r", "-\r", "-\t\tif (unit != null) {\r"]}], "num": 49686}
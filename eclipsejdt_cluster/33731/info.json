{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "83a1fbd3a7091c1b055f57026c9e66bc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4192217e375ce429aec0e714cde45bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java", "commitBeforeChange": "2671565752958ad7dd8fbf78e5bf97d035a3fc86", "commitAfterChange": "f49b9b8408e4df66a8d7de1ecfef06a5c49ce2bf", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\tExpression reference, int checkType, FlowInfo flowInfo)", "signatureAfterChange": "  public void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\tExpression reference, int checkType, FlowInfo flowInfo)", "diff": ["-\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, reference);", "+\t\t\t\t\tif (!this.hideNullComparisonWarnings) {", "+\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, reference);", "+\t\t\t\t\t}", "-\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, reference);", "+\t\t\t\t\tif (!this.hideNullComparisonWarnings) {", "+\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, reference);", "+\t\t\t\t\t}", "-\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, reference);", "+\t\t\t\t\tif (!this.hideNullComparisonWarnings) {", "+\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, reference);", "+\t\t\t\t\t}", "-\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "+\t\t\t\t\tif (!this.hideNullComparisonWarnings) {", "+\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t}", "-\t\t\t\trecordNullReference(local, reference, checkType);", "+\t\t\t\tif (!this.hideNullComparisonWarnings) {", "+\t\t\t\t\trecordNullReference(local, reference, checkType);", "+\t\t\t\t}", "-\t\t\t\t\trecordNullReference(local, reference, checkType);", "+\t\t\t\t\tif (!this.hideNullComparisonWarnings) {", "+\t\t\t\t\t\trecordNullReference(local, reference, checkType);", "+\t\t\t\t\t}", "-\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, reference);", "+\t\t\t\t\t\tif (!this.hideNullComparisonWarnings) {", "+\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, reference);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t\tif (!this.hideNullComparisonWarnings) {", "+\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t\t}", "-\t\t\trecordNullReference(local, reference, checkType);", "+\t\t\t// if the contention is inside assert statement, we want to avoid null warnings only in case of", "+\t\t\t// comparisons and not in case of assignment and instanceof", "+\t\t\tif (!this.hideNullComparisonWarnings ", "+\t\t\t\t\t|| (checkType & CONTEXT_MASK) == FlowContext.IN_ASSIGNMENT", "+\t\t\t\t\t|| (checkType & CONTEXT_MASK) == FlowContext.IN_INSTANCEOF) {", "+\t\t\t\trecordNullReference(local, reference, checkType);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aaf34b594954d2cdb35794896d96ade8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FinallyFlowContext.java", "commitBeforeChange": "2671565752958ad7dd8fbf78e5bf97d035a3fc86", "commitAfterChange": "f49b9b8408e4df66a8d7de1ecfef06a5c49ce2bf", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\t\tExpression reference, int checkType, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void recordUsingNullReference(Scope scope, LocalVariableBinding local, \t\t\tExpression reference, int checkType, FlowInfo flowInfo)", "diff": ["-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, reference);", "+\t\t\t\t\t\t\t\tif (!this.hideNullComparisonWarnings) {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, reference);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, reference);", "+\t\t\t\t\t\t\t\tif (!this.hideNullComparisonWarnings) {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, reference);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, reference);", "+\t\t\t\t\t\t\t\t\tif (!this.hideNullComparisonWarnings) {", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, reference);", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t\t\t\t\tif (!this.hideNullComparisonWarnings) {", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, reference);", "+\t\t\t\t\t\t\t\tif (!this.hideNullComparisonWarnings) {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNonNull(local, reference);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, reference);", "+\t\t\t\t\t\t\t\tif (!this.hideNullComparisonWarnings) {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNonNullComparedToNull(local, reference);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, reference);", "+\t\t\t\t\t\t\t\t\tif (!this.hideNullComparisonWarnings) {", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableRedundantCheckOnNull(local, reference);", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t\t\t\t\tif (!this.hideNullComparisonWarnings) {", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().localVariableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\trecordNullReference(local, reference, checkType);", "+\t\t\t// if the contention is inside assert statement, we want to avoid null warnings only in case of", "+\t\t\t// comparisons and not in case of assignment, instanceof, or may be null.", "+\t\t\tif(!this.hideNullComparisonWarnings || checkType == MAY_NULL", "+\t\t\t\t\t|| (checkType & CONTEXT_MASK) == FlowContext.IN_ASSIGNMENT", "+\t\t\t\t\t|| (checkType & CONTEXT_MASK) == FlowContext.IN_INSTANCEOF) {", "+\t\t\t\trecordNullReference(local, reference, checkType);", "+\t\t\t}"]}], "num": 33731}
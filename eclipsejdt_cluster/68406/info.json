{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9f7e1afc65951c7468e67500e0d932a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e091e90254152404d167255dea4ea29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "92487fadb9d5e301fedeefe04857620a4c7906cd", "commitAfterChange": "147410962ae2dd7c09c9aecdc307a6efa2f34d5c", "methodNumberBeforeChange": 153, "methodNumberAfterChange": 153, "signatureBeforeChange": "  \t\tvoid save() throws IOException, JavaModelException", "signatureAfterChange": "  \t\tvoid save(ISaveContext context) throws IOException, JavaModelException", "diff": ["-\t\tvoid save() throws IOException, JavaModelException {", "-\t\t\tsaveProjects(JavaModelManager.this.getJavaModel().getJavaProjects());", "-\t\t\t", "-\t\t\t// remove variables that should not be saved", "-\t\t\tHashMap varsToSave = null;", "-\t\t\tIterator iterator = JavaModelManager.this.variables.entrySet().iterator();", "-\t\t\tIEclipsePreferences defaultPreferences = getDefaultPreferences();", "-\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\tMap.Entry entry = (Map.Entry) iterator.next();", "-\t\t\t\tString varName = (String) entry.getKey();", "-\t\t\t\tif (defaultPreferences.get(CP_VARIABLE_PREFERENCES_PREFIX + varName, null) != null // don't save classpath variables from the default preferences as there is no delta if they are removed", "-\t\t\t\t\t|| CP_ENTRY_IGNORE_PATH.equals(entry.getValue())) {", "-\t\t\t\t\t", "-\t\t\t\t\tif (varsToSave == null)", "-\t\t\t\t\t\tvarsToSave = new HashMap(JavaModelManager.this.variables);", "-\t\t\t\t\tvarsToSave.remove(varName);", "-\t\t\t\t}", "-\t\t\t\t\t", "+\t\tvoid save(ISaveContext context) throws IOException, JavaModelException {", "+\t\t\tIProject project = context.getProject();", "+\t\t\tif (project == null) { // save all projects if none specified (snapshot or full save)", "+\t\t\t\tsaveProjects(JavaModelManager.this.getJavaModel().getJavaProjects());", "+\t\t\t}", "+\t\t\telse {", "+\t\t\t\tsaveProjects(new IJavaProject[] {JavaCore.create(project)});", "-\t\t\tsaveVariables(varsToSave != null ? varsToSave : JavaModelManager.this.variables);", "+\t\t\tswitch (context.getKind()) {", "+\t\t\t\tcase ISaveContext.FULL_SAVE :", "+\t\t\t\t\t// TODO (eric) - investigate after 3.3 if variables should be saved for a SNAPSHOT", "+\t\t\t\tcase ISaveContext.SNAPSHOT :", "+\t\t\t\t\t// remove variables that should not be saved", "+\t\t\t\t\tHashMap varsToSave = null;", "+\t\t\t\t\tIterator iterator = JavaModelManager.this.variables.entrySet().iterator();", "+\t\t\t\t\tIEclipsePreferences defaultPreferences = getDefaultPreferences();", "+\t\t\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\t\t\tMap.Entry entry = (Map.Entry) iterator.next();", "+\t\t\t\t\t\tString varName = (String) entry.getKey();", "+\t\t\t\t\t\tif (defaultPreferences.get(CP_VARIABLE_PREFERENCES_PREFIX + varName, null) != null // don't save classpath variables from the default preferences as there is no delta if they are removed", "+\t\t\t\t\t\t\t\t|| CP_ENTRY_IGNORE_PATH.equals(entry.getValue())) {", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t\tif (varsToSave == null)", "+\t\t\t\t\t\t\t\tvarsToSave = new HashMap(JavaModelManager.this.variables);", "+\t\t\t\t\t\t\tvarsToSave.remove(varName);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}\t\t\t\t", "+\t\t\t\t\tsaveVariables(varsToSave != null ? varsToSave : JavaModelManager.this.variables);", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault :", "+\t\t\t\t\t// do nothing", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9204828b908e6f8141a0d259e351aa1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Reference.java", "commitBeforeChange": "0848b8a6a9afff16623dfc6b0821adb833326b41", "commitAfterChange": "29d4a1149e392c0b5c052a9202992e800f5506a5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public int nullStatus(FlowInfo flowInfo)", "signatureAfterChange": "  public int nullStatus(FlowInfo flowInfo, FlowContext flowContext)", "diff": ["-public int nullStatus(FlowInfo flowInfo) {", "+", "+public int nullStatus(FlowInfo flowInfo, FlowContext flowContext) {", "+\tFieldBinding fieldBinding = lastFieldBinding();", "+\tif (fieldBinding != null) {", "+\t\tif (fieldBinding.isNonNull() || flowContext.isNullcheckedFieldAccess(this)) {", "+\t\t\treturn FlowInfo.NON_NULL;", "+\t\t} else if (fieldBinding.isNullable()) {", "+\t\t\treturn FlowInfo.POTENTIALLY_NULL;", "+\t\t}", "+\t}"]}], "num": 68406}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5554b70e17d9d9cf6e1a8ca162abc955", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a72ff93d7dd96fbb60568d6f26ab88d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "5dcad0acfcfbe8755abd38f2836e8e0329153a35", "commitAfterChange": "5839e04f8f69c5d3e5ba5ee43573c89e52d5ff9b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprivate boolean usedForGenericMethodReturnTypeInference()", "signatureAfterChange": " \tprivate boolean isIndirectlyUsed()", "diff": ["-\tprivate boolean usedForGenericMethodReturnTypeInference() {", "+\tprivate boolean isIndirectlyUsed() {", "+\t\tif (this.expectedType != null && this.resolvedType.isBaseType() && !this.resolvedType.isCompatibleWith(this.expectedType)) {", "+\t\t\t// boxing: Short s = (short) _byte", "+\t\t\treturn true;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8a151909c9f5b4464cfd68b79e53665", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HandleFactory.java", "commitBeforeChange": "fecb7356870e11bfa0606dab85da0b88f89888ac", "commitAfterChange": "517ba9d1ca0b3faafaaa45be34c9a93f3eb848be", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic IJavaElement createElement(Scope scope, int elementPosition, ICompilationUnit unit, HashSet existingElements, HashMap knownScopes)", "signatureAfterChange": " \tpublic IJavaElement createElement(Scope scope, int elementPosition, ICompilationUnit unit, HashSet existingElements, HashMap knownScopes)", "diff": ["-\t\t\t\t\tif (expression.binding != null && expression.binding.isValidBinding()) { // chain in lambda element only if resolved properly.", "+\t\t\t\t\tif (expression.resolvedType != null && expression.resolvedType.isValidBinding()) { // chain in lambda element only if resolved properly."]}], "num": 61709}
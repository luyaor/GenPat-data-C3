{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5559957b55a49997a918b5f7744f5d8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d3236897464254383cf414d99cbab63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/BinaryExpressionFragmentBuilder.java", "commitBeforeChange": "e44084d11b78dee2352add7a7fb666daba7d3b97", "commitAfterChange": "7594e7e641998e4b739042718fe64988f6b36839", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic boolean visit(EqualExpression equalExpression, BlockScope scope)", "signatureAfterChange": "  \tpublic boolean visit(EqualExpression equalExpression, BlockScope scope)", "diff": ["-\t\tif (buildFragments(equalExpression)) {", "-\t\t\tswitch((equalExpression.bits & EqualExpression.OperatorMASK) >> EqualExpression.OperatorSHIFT) {", "-\t\t\t\tcase OperatorIds.EQUAL_EQUAL :", "-\t\t\t\t\tthis.operatorsList.add(new Integer(ITerminalSymbols.TokenNameEQUAL_EQUAL));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase OperatorIds.NOT_EQUAL :", "-\t\t\t\t\tthis.operatorsList.add(new Integer(ITerminalSymbols.TokenNameNOT_EQUAL));", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\treturn true;", "-\t\t} else {", "-\t\t\treturn false;", "-\t\t}", "+\t\tthis.fragmentsList.add(equalExpression);", "+\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac7428ee21887b2c67b5d815f0a29b21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "7df061f9da0ab96be87e5851cb157a28c5f5bca0", "commitAfterChange": "5138a70372af4817aefdd3da44dfadf7f7557bf3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " boolean areReturnTypesCompatible(MethodBinding one, MethodBinding two)", "signatureAfterChange": " boolean areReturnTypesCompatible(MethodBinding one, MethodBinding two)", "diff": ["-\tif (one.returnType == two.returnType) return true;", "-", "-\tif (areTypesEqual(one.returnType, two.returnType)) return true;", "-", "-\t// when sourceLevel < 1.5 but compliance >= 1.5, allow return types in binaries to be compatible instead of just equal", "-\tif (this.allowCompatibleReturnTypes &&", "-\t\t\tone.declaringClass instanceof BinaryTypeBinding &&", "-\t\t\ttwo.declaringClass instanceof BinaryTypeBinding) {", "-\t\treturn areReturnTypesCompatible0(one, two);", "-\t}", "-\treturn false;", "+\treturn areReturnTypesCompatible(one, two, this.type.scope.environment());"]}], "num": 2057}
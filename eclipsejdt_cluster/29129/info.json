{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e61b34fce013b6b060771997558a411d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4baabda9d05ca13c8720430c93140c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SignatureTests.java", "commitBeforeChange": "9506ae8fe4d60e3a32e2b276be442609d9dc9308", "commitAfterChange": "c1dc1d2bc5993046e3d691c95b58812d1c93dfb9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void testGetParameterCount()", "signatureAfterChange": " public void testGetParameterCount()", "diff": ["-\ttry {", "-\t\tSignature.getParameterCount(\"foo(LA<++Ljava.lang.Comparable;>;)\");", "-\t\tassertTrue(\"Signature#getParameterCount is not correct: exception\", false);", "-\t} catch (IllegalArgumentException iae) {", "-\t\t// do nothing", "-\t}", "+\t", "+\tmethodSig= \"foo(LA<++Ljava.lang.Comparable;>;)\";", "+\tassertEquals(\"Signature#getParameterCount is not correct14\", 1,", "+\t\tSignature.getParameterCount(methodSig));", "-\ttry {", "-\t\tSignature.getParameterCount(\"foo(LA<--Ljava.lang.Comparable;>;)\");", "-\t\tassertTrue(\"Signature#getParameterCount is not correct: exception\", false);", "-\t} catch (IllegalArgumentException iae) {", "-\t\t// do nothing", "-\t}", "+\tmethodSig= \"foo(LA<--Ljava.lang.Comparable;>;)\";", "+\tassertEquals(\"Signature#getParameterCount is not correct14\", 1,", "+\t\tSignature.getParameterCount(methodSig));", "-\ttry {", "-\t\tSignature.getParameterCount(\"foo(LA<+-Ljava.lang.Comparable;>;)\");", "-\t\tassertTrue(\"Signature#getParameterCount is not correct: exception\", false);", "-\t} catch (IllegalArgumentException iae) {", "-\t\t// do nothing", "-\t}", "+\tmethodSig= \"foo(LA<+-Ljava.lang.Comparable;>;)\";", "+\tassertEquals(\"Signature#getParameterCount is not correct14\", 1,", "+\t\tSignature.getParameterCount(methodSig));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f387f89bab2ec3117faa81cb85798eaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "137d17cbff4a2ae5133173b2584d756409234eb4", "commitAfterChange": "3eea226b0688d8900e48a81d42b158e30404c893", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 117, "signatureBeforeChange": " \tpublic IClasspathEntry[] readFileEntriesWithException(Map unknownElements) throws CoreException, IOException, ClasspathEntry.AssertionFailedException", "signatureAfterChange": " \tpublic IClasspathEntry[] readFileEntriesWithException(Map unknownElements) throws CoreException, IOException, ClasspathEntry.AssertionFailedException", "diff": ["-\t\tString xmlClasspath;", "+\t\tbyte[] bytes;", "-\t\t\tbyte[] bytes = Util.getResourceContentsAsByteArray(rscFile);", "-\t\t\ttry {", "-\t\t\t\txmlClasspath = new String(bytes, org.eclipse.jdt.internal.compiler.util.Util.UTF_8); // .classpath always encoded with UTF-8", "-\t\t\t} catch (UnsupportedEncodingException e) {", "-\t\t\t\tUtil.log(e, \"Could not read .classpath with UTF-8 encoding\"); //$NON-NLS-1$", "-\t\t\t\t// fallback to default", "-\t\t\t\txmlClasspath = new String(bytes);", "-\t\t\t}", "+\t\t\tbytes = Util.getResourceContentsAsByteArray(rscFile);", "-\t\t\tbyte[] bytes;", "-\t\t\ttry {", "-\t\t\t\txmlClasspath = new String(bytes, org.eclipse.jdt.internal.compiler.util.Util.UTF_8); // .classpath always encoded with UTF-8", "-\t\t\t} catch (UnsupportedEncodingException e) {", "-\t\t\t\tUtil.log(e, \"Could not read .classpath with UTF-8 encoding\"); //$NON-NLS-1$", "-\t\t\t\t// fallback to default", "-\t\t\t\txmlClasspath = new String(bytes);", "-\t\t\t}", "+\t\t}", "+\t\tif (hasUTF8BOM(bytes)) { // see https://bugs.eclipse.org/bugs/show_bug.cgi?id=240034", "+\t\t\tint length = bytes.length-IContentDescription.BOM_UTF_8.length;", "+\t\t\tSystem.arraycopy(bytes, IContentDescription.BOM_UTF_8.length, bytes = new byte[length], 0, length);", "+\t\t}", "+\t\tString xmlClasspath;", "+\t\ttry {", "+\t\t\txmlClasspath = new String(bytes, org.eclipse.jdt.internal.compiler.util.Util.UTF_8); // .classpath always encoded with UTF-8", "+\t\t} catch (UnsupportedEncodingException e) {", "+\t\t\tUtil.log(e, \"Could not read .classpath with UTF-8 encoding\"); //$NON-NLS-1$", "+\t\t\t// fallback to default", "+\t\t\txmlClasspath = new String(bytes);"]}], "num": 29129}
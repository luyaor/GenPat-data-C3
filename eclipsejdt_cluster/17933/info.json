{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "beca2b096e829819090613f9cecf6081", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e9edd6676fa8972541ef7370ada10fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "e749248b2d171474b4cec0b274f15c474b2172fa", "commitAfterChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "signatureAfterChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "diff": ["-\t\t\tObject[] path =", "-\t\t\t\tcurrentScope.getExactEmulationPath(", "-\t\t\t\t\tcurrentScope.enclosingSourceType().enclosingTypeAt(", "-\t\t\t\t\t\t(bits & DepthMASK) >> DepthSHIFT));", "+\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "+\t\t\tObject[] path = currentScope.getEmulationPath(targetType, true /*only exact match*/, false/*consider enclosing arg*/);", "-\t\t\t\tcodeStream.generateOuterAccess(path, this, currentScope);", "+\t\t\t\tcodeStream.generateOuterAccess(path, this, targetType, currentScope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71b17d08fb02fa783a711a3ad6eef862", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "e749248b2d171474b4cec0b274f15c474b2172fa", "commitAfterChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public void generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\t\t\t\t\tObject[] emulationPath = currentScope.getExactEmulationPath(currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT));", "+\t\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "+\t\t\t\t\t\t\tObject[] emulationPath = currentScope.getEmulationPath(targetType, true /*only exact match*/, false/*consider enclosing arg*/);", "-\t\t\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, currentScope);", "+\t\t\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, targetType, currentScope);", "-\t\t\t\t\t\tcodeStream.generateOuterAccess(path, this, currentScope);", "+\t\t\t\t\t\tcodeStream.generateOuterAccess(path, this, localBinding, currentScope);"]}], "num": 17933}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bfdbce25312dafe9854cf2562f406f9a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d59cb373582e09e4bd7f43b976fa729", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "commitAfterChange": "b21cadb5eae53d9f84dce9f073b5350a267b6ad6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public void add(JavaProject javaProject, int includeMask, HashSet visitedProjects) throws JavaModelException", "signatureAfterChange": " public void add(JavaProject project, int includeMask, HashSet visitedProject) throws JavaModelException", "diff": ["-public void add(JavaProject javaProject, int includeMask, HashSet visitedProjects) throws JavaModelException {", "+ */", "+public void add(JavaProject project, int includeMask, HashSet visitedProject) throws JavaModelException {", "+\tadd(project, null, includeMask, visitedProject, null);", "+}", "-\t\t\t\tIClasspathEntry rawEntry = null;", "-\t\t\t\tJavaModelManager.PerProjectInfo perProjectInfo = javaProject.getPerProjectInfo();", "-\t\t\t\tif (perProjectInfo != null && perProjectInfo.resolvedPathToRawEntries != null) {", "-\t\t\t\t\trawEntry = (IClasspathEntry) perProjectInfo.resolvedPathToRawEntries.get(entry.getPath());", "-\t\t\t\t}", "-\t\t\t\tif (rawEntry == null) break;", "-\t\t\t\t\t\t\tadd(path, true);", "-\t\t\t\t\t\t\taddEnclosingProjectOrJar(path);", "-\t\t\t\t\t\t\tadd(path, true);", "-\t\t\t\t\t\t\taddEnclosingProjectOrJar(path);", "-\t\t\t\t\tadd((JavaProject) model.getJavaProject(entry.getPath().lastSegment()), includeMask, visitedProjects);", "-\t\t\t\t\tadd(entry.getPath(), true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90802c5bb66e28b2104c7c5dc6fdf24e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "266ddb07da0dd2618bcfbec3256d70ddf353d13c", "commitAfterChange": "0f0f6cf807937b95cd594ad18f819e710f9be563", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic IJavaElement findElement(IPath path) throws JavaModelException", "signatureAfterChange": " \tpublic IJavaElement findElement(IPath path) throws JavaModelException", "diff": ["+\t\treturn findElement(path, DefaultWorkingCopyOwner.PRIMARY);", "+\t}", "-\t\t\t\tIType type =", "-\t\t\t\t\tgetNameLookup().findType("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8ee0b7e15aaeae9fdab264ccd5d9f73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Requestor.java", "commitBeforeChange": "1505d6b4655f1428d6059c29c9d919c21116a2ec", "commitAfterChange": "99b76fba5f0312d772156ff14654849bf056608a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void acceptResult(CompilationResult compilationResult)", "signatureAfterChange": " public void acceptResult(CompilationResult compilationResult)", "diff": ["-\tStringBuffer buffer = new StringBuffer(100);", "-\thasErrors |= compilationResult.hasErrors();", "-\tif (compilationResult.hasProblems() || compilationResult.hasTasks()) {", "-\t\tCategorizedProblem[] problems = compilationResult.getAllProblems();", "-\t\tint count = problems.length;", "-\t\tint problemCount = 0;", "-\t\tchar[] unitSource = compilationResult.compilationUnit.getContents();", "-\t\tfor (int i = 0; i < count; i++) { ", "-\t\t\tDefaultProblem problem = (DefaultProblem) problems[i];", "-\t\t\tif (problem != null) {", "-\t\t\t\tif (problemCount == 0)", "-\t\t\t\t\tbuffer.append(\"----------\\n\");", "-\t\t\t\tproblemCount++;", "-\t\t\t\tbuffer.append(problemCount + (problem.isError() ? \". ERROR\" : \". WARNING\"));", "-\t\t\t\tbuffer.append(\" in \" + new String(problem.getOriginatingFileName()).replace('/', '\\\\'));", "-\t\t\t\ttry {", "-\t\t\t\t\tbuffer.append(problem.errorReportSource(unitSource));", "-\t\t\t\t\tbuffer.append(\"\\n\");", "-\t\t\t\t\tif (showCategory) {", "-\t\t\t\t\t\tString category = problem.getInternalCategoryMessage();", "-\t\t\t\t\t\tif (category != null) {", "-\t\t\t\t\t\t\tbuffer.append(\"[@cat:\").append(category).append(\"] \");", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (showWarningToken) {", "-\t\t\t\t\t\tlong irritant = ProblemReporter.getIrritant(problem.getID());", "-\t\t\t\t\t\tif (irritant != 0) {", "-\t\t\t\t\t\t\tString warningToken = CompilerOptions.warningTokenFromIrritant(irritant);", "-\t\t\t\t\t\t\tif (warningToken != null) {", "-\t\t\t\t\t\t\t\tbuffer.append(\"[@sup:\").append(warningToken).append(\"] \");", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tbuffer.append(problem.getMessage());", "-\t\t\t\t\tbuffer.append(\"\\n\");", "-\t\t\t\t} catch (Exception e) {", "-\t\t\t\t}", "-\t\t\t\tbuffer.append(\"----------\\n\");", "-\t\t\t}", "-\t\t}", "-\t\tproblemLog += buffer.toString();", "-\t}", "+\tthis.hasErrors |= compilationResult.hasErrors();", "+\tthis.problemLog += Util.getProblemLog(compilationResult, this.showCategory, this.showWarningToken);"]}], "num": 46929}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c334c634a01efbe0ce4eb1765a7d261e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26a2b0ead30c9df79cf6a020f0f1c33c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "f6209e22cd3c6ef55e09617e84e4b61166bfdc34", "commitAfterChange": "e3b61331087882f47093048d6298d97548b68615", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic String toStringHeader()", "signatureAfterChange": "  \tpublic StringBuffer printHeader(int indent, StringBuffer output)", "diff": ["+", "+\tpublic StringBuffer printHeader(int indent, StringBuffer output) {", "+", "+\t\tprintModifiers(this.modifiers, output);", "+\t\toutput.append(isInterface() ? \"interface \" : \"class \"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\toutput.append(name);", "+\t\tif (superclass != null) {", "+\t\t\toutput.append(\" extends \");  //$NON-NLS-1$", "+\t\t\tsuperclass.print(0, output);", "+\t\t}", "+\t\tif (superInterfaces != null && superInterfaces.length > 0) {", "+\t\t\toutput.append(isInterface() ? \" extends \" : \" implements \");//$NON-NLS-2$ //$NON-NLS-1$", "+\t\t\tfor (int i = 0; i < superInterfaces.length; i++) {", "+\t\t\t\tif (i > 0) output.append( \", \"); //$NON-NLS-1$", "+\t\t\t\tsuperInterfaces[i].print(0, output);", "+\t\t\t}", "+\t\t}", "+\t\treturn output;", "+\t}", "-", "-\tpublic String toStringHeader() {", "-", "-\t\tString s = \"\"; //$NON-NLS-1$", "-\t\tif (modifiers != AccDefault) {", "-\t\t\ts += modifiersString(modifiers);", "-\t\t}", "-\t\ts += (isInterface() ? \"interface \" : \"class \") + new String(name);//$NON-NLS-1$ //$NON-NLS-2$", "-\t\tif (superclass != null)", "-\t\t\ts += \" extends \" + superclass.toString(0); //$NON-NLS-1$", "-\t\tif (superInterfaces != null && superInterfaces.length > 0) {", "-\t\t\ts += (isInterface() ? \" extends \" : \" implements \");//$NON-NLS-2$ //$NON-NLS-1$", "-\t\t\tfor (int i = 0; i < superInterfaces.length; i++) {", "-\t\t\t\ts += superInterfaces[i].toString(0);", "-\t\t\t\tif (i != superInterfaces.length - 1)", "-\t\t\t\t\ts += \", \"; //$NON-NLS-1$", "-\t\t\t};", "-\t\t};", "-\t\treturn s;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ddb2bd319ec77ecde7139dfc8d1dda4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnMessageSend.java", "commitBeforeChange": "f6209e22cd3c6ef55e09617e84e4b61166bfdc34", "commitAfterChange": "e3b61331087882f47093048d6298d97548b68615", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic String toStringExpression()", "signatureAfterChange": "  \tpublic StringBuffer printExpression(int indent, StringBuffer output)", "diff": ["-\tpublic String toStringExpression() {", "+\tpublic StringBuffer printExpression(int indent, StringBuffer output) {", "-\t\tString s = \"<CompleteOnMessageSend:\"; //$NON-NLS-1$", "-\t\tif (!receiver.isImplicitThis())", "-\t\t\ts = s + receiver.toStringExpression() + \".\"; //$NON-NLS-1$", "-\t\ts = s + new String(selector) + \"(\"; //$NON-NLS-1$", "+\t\toutput.append(\"<CompleteOnMessageSend:\"); //$NON-NLS-1$", "+\t\tif (!receiver.isImplicitThis()) receiver.printExpression(0, output).append('.'); //$NON-NLS-1$", "+\t\toutput.append(selector).append('('); //$NON-NLS-1$", "-\t\t\t\ts += arguments[i].toStringExpression();", "-\t\t\t\tif (i != arguments.length - 1) {", "-\t\t\t\t\ts += \", \"; //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t};", "+\t\t\t\tif (i > 0) output.append(\", \"); //$NON-NLS-1$", "+\t\t\t\targuments[i].printExpression(0, output);", "+\t\t\t}", "-\t\ts = s + \")>\"; //$NON-NLS-1$", "-\t\treturn s;", "+\t\treturn output.append(\")>\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d7048f6516c038e766bed85a58b7bf5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnMessageSend.java", "commitBeforeChange": "f6209e22cd3c6ef55e09617e84e4b61166bfdc34", "commitAfterChange": "e3b61331087882f47093048d6298d97548b68615", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic String toStringExpression()", "signatureAfterChange": " \t \tpublic StringBuffer printExpression(int indent, StringBuffer output)", "diff": ["+\tpublic StringBuffer printExpression(int indent, StringBuffer output) {", "+", "+\t\toutput.append(\"<SelectOnMessageSend:\"); //$NON-NLS-1$", "+\t\tif (!receiver.isImplicitThis()) receiver.printExpression(0, output).append('.');", "+\t\toutput.append(this.selector).append('(');", "+\t\tif (arguments != null) {", "+\t\t\tfor (int i = 0; i < arguments.length; i++) {", "+\t\t\t\tif (i > 0) output.append(\", \"); //$NON-NLS-1$", "+\t\t\t\targuments[i].printExpression(0, output);", "+\t\t\t}", "+\t\t}", "+\t\treturn output.append(\")>\"); //$NON-NLS-1$", "+\t}", "-\t", "-\tpublic String toStringExpression() {", "-", "-\t\tString s = \"<SelectOnMessageSend:\"; //$NON-NLS-1$", "-\t\tif (!receiver.isImplicitThis())", "-\t\t\ts = s + receiver.toStringExpression() + \".\"; //$NON-NLS-1$", "-\t\ts = s + new String(selector) + \"(\"; //$NON-NLS-1$", "-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0; i < arguments.length; i++) {", "-\t\t\t\ts += arguments[i].toStringExpression();", "-\t\t\t\tif (i != arguments.length - 1) {", "-\t\t\t\t\ts += \", \"; //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t};", "-\t\t}", "-\t\ts = s + \")>\"; //$NON-NLS-1$", "-\t\treturn s;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5749505710f54d26086ff9c7660a6c12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "f6209e22cd3c6ef55e09617e84e4b61166bfdc34", "commitAfterChange": "e3b61331087882f47093048d6298d97548b68615", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public String toStringExpression()", "signatureAfterChange": "  public StringBuffer printExpression(int indent, StringBuffer output)", "diff": ["+public StringBuffer printExpression(int indent, StringBuffer output){", "+\t", "+\tif (!receiver.isImplicitThis()) receiver.printExpression(0, output).append('.');", "+\toutput.append(selector).append('(') ; //$NON-NLS-1$", "+\tif (arguments != null) {", "+\t\tfor (int i = 0; i < arguments.length ; i ++) {\t", "+\t\t\tif (i > 0) output.append(\", \"); //$NON-NLS-1$", "+\t\t\targuments[i].printExpression(0, output);", "+\t\t}", "+\t}", "+\treturn output.append(')');", "+}", "-", "-public String toStringExpression(){", "-\t", "-\tString s = \"\"; //$NON-NLS-1$", "-\tif (!receiver.isImplicitThis())", "-\t\ts = s + receiver.toStringExpression()+\".\"; //$NON-NLS-1$", "-\ts = s + new String(selector) + \"(\" ; //$NON-NLS-1$", "-\tif (arguments != null)", "-\t\tfor (int i = 0; i < arguments.length ; i ++)", "-\t\t{\ts = s + arguments[i].toStringExpression();", "-\t\t\tif ( i != arguments.length -1 ) s = s + \" , \" ;};; //$NON-NLS-1$", "-\ts =s + \")\" ; //$NON-NLS-1$", "-\treturn s;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e3ebf2bf934c92cf04f532c5b85d179", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "f6209e22cd3c6ef55e09617e84e4b61166bfdc34", "commitAfterChange": "e3b61331087882f47093048d6298d97548b68615", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tpublic String toStringExpression()", "signatureAfterChange": "  \tpublic StringBuffer printExpression(int indent, StringBuffer output)", "diff": ["-\tpublic String toStringExpression() {", "+\tpublic StringBuffer printExpression(int indent, StringBuffer output) {", "-\t\tString s = \"new \" + type.toString(0); //$NON-NLS-1$", "-\t\tif (arguments == null)", "-\t\t\ts = s + \"()\"; //$NON-NLS-1$", "-\t\telse {", "-\t\t\ts = s + \"(\"; //$NON-NLS-1$", "+\t\toutput.append(\"new \"); //$NON-NLS-1$", "+\t\ttype.printExpression(0, output); ", "+\t\toutput.append('(');", "+\t\tif (arguments != null) {", "-\t\t\t\ts = s + arguments[i].toStringExpression();", "-\t\t\t\tif (i == (arguments.length - 1))", "-\t\t\t\t\ts = s + \")\"; //$NON-NLS-1$", "-\t\t\t\telse", "-\t\t\t\t\ts = s + \", \"; //$NON-NLS-1$", "+\t\t\t\tif (i > 0) output.append(\", \"); //$NON-NLS-1$", "+\t\t\t\targuments[i].printExpression(0, output);", "-\t\treturn s;", "+\t\treturn output.append(')');"]}], "num": 2336}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2d130f07ceea307414a23e444d9ab08", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e76bec0e083e370df4afaa00db9aaf9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredLocalVariable.java", "commitBeforeChange": "9b62d5a09ebdc0eb5608813d651e7e9099a1ba2e", "commitAfterChange": "f1fe31a1aec035b92fd30d4df6e2da05a3c1141b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public RecoveredElement add(Statement statement, int bracketBalance)", "signatureAfterChange": " public RecoveredElement add(Statement stmt, int bracketBalanceValue)", "diff": ["-public RecoveredElement add(Statement statement, int bracketBalance) {", "+public RecoveredElement add(Statement stmt, int bracketBalanceValue) {", "-\tif (this.alreadyCompletedLocalInitialization || !(statement instanceof Expression)) {", "-\t\treturn super.add(statement, bracketBalance);", "+\tif (this.alreadyCompletedLocalInitialization || !(stmt instanceof Expression)) {", "+\t\treturn super.add(stmt, bracketBalanceValue);", "-\t\tthis.localDeclaration.initialization = (Expression)statement;", "-\t\tthis.localDeclaration.declarationSourceEnd = statement.sourceEnd;", "-\t\tthis.localDeclaration.declarationEnd = statement.sourceEnd;", "+\t\tthis.localDeclaration.initialization = (Expression)stmt;", "+\t\tthis.localDeclaration.declarationSourceEnd = stmt.sourceEnd;", "+\t\tthis.localDeclaration.declarationEnd = stmt.sourceEnd;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2320ccb0117f2ff2a85929b6d8b23b18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "d11e0b7b2ec4acf083dada122937da91409bfbab", "commitAfterChange": "e9864a131b54828255a924bbf70ed7031ad409fb", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " protected void consumeCatchHeader()", "signatureAfterChange": " protected void consumeCatchHeader()", "diff": ["-\t\treturn;", "+\t\tif(!(currentElement instanceof RecoveredMethod)) {", "+\t\t\treturn;", "+\t\t}", "+\t\tRecoveredMethod rMethod = (RecoveredMethod) currentElement;", "+\t\tif(!(rMethod.methodBody == null && rMethod.bracketBalance > 0)) {", "+\t\t\treturn;", "+\t\t}", "-\t// exception argument is already on astStack", "-\t((RecoveredBlock)currentElement).attach(", "-\t\tnew RecoveredLocalVariable((Argument)astStack[astPtr--], currentElement, 0)); // insert catch variable in catch block", "+\t", "+\tArgument arg = (Argument)astStack[astPtr--];", "+\t// convert argument to local variable", "+\tLocalDeclaration localDeclaration = new LocalDeclaration(arg.name, arg.sourceStart, arg.sourceEnd);", "+\tlocalDeclaration.type = arg.type;", "+\tlocalDeclaration.declarationSourceStart = arg.declarationSourceStart;", "+\tlocalDeclaration.declarationSourceEnd = arg.declarationSourceEnd;", "+\t", "+\tcurrentElement = currentElement.add(localDeclaration, 0);"]}], "num": 20006}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "10a936dd7e4d9af89bcbfe7efa66af3c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a18bd5f581f54c590e794aabb739976", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "581bd48b0a44c3b24fd6cb58cd4506687e6bec7c", "commitAfterChange": "14eeb335b7a4f4b5dc293b65ac56b4b7f62e99e5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "signatureAfterChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "diff": ["+\t\t\t// only check inherited methods that are different & come from separate inheritance paths", "-", "-\t\t\tMethodBinding compareMethod = inheritedMethod instanceof ParameterizedGenericMethodBinding", "-\t\t\t\t? ((ParameterizedGenericMethodBinding) inheritedMethod).originalMethod", "-\t\t\t\t: inheritedMethod;", "-\t\t\tMethodBinding substitute = computeSubstituteMethod(otherInheritedMethod, compareMethod);", "-\t\t\tif (substitute == null || doesSubstituteMethodOverride(compareMethod, substitute))", "-\t\t\t\tcontinue;", "+\t\t\tif (inheritedMethod.areParametersEqual(otherInheritedMethod)) continue;", "+\t\t\t// skip it if otherInheritedMethod is defined by a subtype of inheritedMethod's declaringClass", "+\t\t\tif (otherInheritedMethod.declaringClass.erasure() != inheritedMethod.declaringClass.erasure())", "+\t\t\t\tif (otherInheritedMethod.declaringClass.findSuperTypeWithSameErasure(inheritedMethod.declaringClass) != null)", "+\t\t\t\t\tcontinue;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acbc05bfad8fb389f36755ef38646896", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "e2422311047b85902980920dda1eeedf124d520c", "commitAfterChange": "c107fdebcaaafcbea0a28f68e9b229afba9f7c4f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "signatureAfterChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "diff": ["-\t\tfor (int i = 0, l = allInheritedMethods.length; i < l; i++) {", "-\t\t\tMethodBinding otherInheritedMethod = allInheritedMethods[i];", "-\t\t\tMethodBinding otherOriginal = otherInheritedMethod.original();", "-\t\t\t// only check inherited methods that are different & come from separate inheritance paths", "-\t\t\tif (otherOriginal == originalInherited || otherOriginal == otherInheritedMethod) continue;", "-\t\t\tif (inheritedMethod.areParametersEqual(otherInheritedMethod)) continue;", "-\t\t\t// skip it if otherInheritedMethod is defined by a subtype of inheritedMethod's declaringClass", "-\t\t\tif (otherInheritedMethod.declaringClass.erasure() != inheritedMethod.declaringClass.erasure())", "-\t\t\t\tif (otherInheritedMethod.declaringClass.findSuperTypeOriginatingFrom(inheritedMethod.declaringClass) != null)", "-\t\t\t\t\tcontinue;", "-\t\t\tif (detectInheritedNameClash(originalInherited, otherOriginal))", "+\t\tfor (int i = 0, l = allInheritedMethods == null ? 0 : allInheritedMethods.length; i < l; i++) {", "+\t\t\tif (allInheritedMethods[i] != null && detectInheritedNameClash(originalInherited, allInheritedMethods[i].original()))"]}], "num": 58617}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4824cda03752e8b633388dce29655e79", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d36fb358fbd2b9624fe490ded304585", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/NamingConventions.java", "commitBeforeChange": "64e9473f82af48ea4e5b2ff0272cf87fb1916f12", "commitAfterChange": "1612764cac82755ece5bb371b617dba233a98e7f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t\tpublic void acceptNameWithPrefixAndSuffix(char[] name)", "signatureAfterChange": " \t\tpublic void acceptNameWithPrefixAndSuffix(char[] name, boolean isFirstPrefix, boolean isFirstSuffix)", "diff": ["-\t\tpublic void acceptNameWithPrefixAndSuffix(char[] name) {", "-\t\t\tint length = prefixAndSuffixResults.length;", "-\t\t\tif(length == prefixAndSuffixResultsCount) {", "-\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\tprefixAndSuffixResults,", "-\t\t\t\t\t0,", "-\t\t\t\t\tprefixAndSuffixResults = new char[length * 2][],", "-\t\t\t\t\t0,", "-\t\t\t\t\tlength);", "+\t\tpublic void acceptNameWithPrefixAndSuffix(char[] name, boolean isFirstPrefix, boolean isFirstSuffix) {", "+\t\t\tif(isFirstPrefix && isFirstSuffix) {", "+\t\t\t\tint length = firstPrefixAndFirstSuffixResults.length;", "+\t\t\t\tif(length == firstPrefixAndFirstSuffixResultsCount) {", "+\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\tfirstPrefixAndFirstSuffixResults,", "+\t\t\t\t\t\t0,", "+\t\t\t\t\t\tfirstPrefixAndFirstSuffixResults = new char[length * 2][],", "+\t\t\t\t\t\t0,", "+\t\t\t\t\t\tlength);", "+\t\t\t\t}", "+\t\t\t\tfirstPrefixAndFirstSuffixResults[firstPrefixAndFirstSuffixResultsCount++] = name;\t\t\t", "+\t\t\t} else if (isFirstPrefix) {", "+\t\t\t\tint length = firstPrefixAndSuffixResults.length;", "+\t\t\t\tif(length == firstPrefixAndSuffixResultsCount) {", "+\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\tfirstPrefixAndSuffixResults,", "+\t\t\t\t\t\t0,", "+\t\t\t\t\t\tfirstPrefixAndSuffixResults = new char[length * 2][],", "+\t\t\t\t\t\t0,", "+\t\t\t\t\t\tlength);", "+\t\t\t\t}", "+\t\t\t\tfirstPrefixAndSuffixResults[firstPrefixAndSuffixResultsCount++] = name;", "+\t\t\t} else if(isFirstSuffix) {", "+\t\t\t\tint length = prefixAndFirstSuffixResults.length;", "+\t\t\t\tif(length == prefixAndFirstSuffixResultsCount) {", "+\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\tprefixAndFirstSuffixResults,", "+\t\t\t\t\t\t0,", "+\t\t\t\t\t\tprefixAndFirstSuffixResults = new char[length * 2][],", "+\t\t\t\t\t\t0,", "+\t\t\t\t\t\tlength);", "+\t\t\t\t}", "+\t\t\t\tprefixAndFirstSuffixResults[prefixAndFirstSuffixResultsCount++] = name;", "+\t\t\t} else {", "+\t\t\t\tint length = prefixAndSuffixResults.length;", "+\t\t\t\tif(length == prefixAndSuffixResultsCount) {", "+\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\tprefixAndSuffixResults,", "+\t\t\t\t\t\t0,", "+\t\t\t\t\t\tprefixAndSuffixResults = new char[length * 2][],", "+\t\t\t\t\t\t0,", "+\t\t\t\t\t\tlength);", "+\t\t\t\t}", "+\t\t\t\tprefixAndSuffixResults[prefixAndSuffixResultsCount++] = name;", "-\t\t\tprefixAndSuffixResults[prefixAndSuffixResultsCount++] = name;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bfc7efba5cac514cc63033241b4cba9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["+\tMethodBinding[] resolvedMethods = this.methods;", "-\t\t\t\tthis.methods[i] = null; // unable to resolve parameters", "+\t\t\t\t// do not alter original method array until resolution is over, due to reentrance (143259)", "+\t\t\t\tif (resolvedMethods == this.methods) {", "+\t\t\t\t\tSystem.arraycopy(this.methods, 0, resolvedMethods = new MethodBinding[length], 0, length);", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tresolvedMethods[i] = null; // unable to resolve parameters", "-\t\t\tMethodBinding method = this.methods[i];", "+\t\t\tMethodBinding method = resolvedMethods[i];", "-\t\t\t\tMethodBinding method2 = this.methods[j];", "+\t\t\t\tMethodBinding method2 = resolvedMethods[j];", "-\t\t\t\t\t\tthis.methods[i] = null;", "+\t\t\t\t\t\t// do not alter original method array until resolution is over, due to reentrance (143259)", "+\t\t\t\t\t\tif (resolvedMethods == this.methods) {", "+\t\t\t\t\t\t\tSystem.arraycopy(this.methods, 0, resolvedMethods = new MethodBinding[length], 0, length);", "+\t\t\t\t\t\t}\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\tresolvedMethods[i] = null;", "-\t\t\t\t\tthis.methods[j] = null;", "+\t\t\t\t\t// do not alter original method array until resolution is over, due to reentrance (143259)", "+\t\t\t\t\tif (resolvedMethods == this.methods) {", "+\t\t\t\t\t\tSystem.arraycopy(this.methods, 0, resolvedMethods = new MethodBinding[length], 0, length);", "+\t\t\t\t\t}\t\t\t\t\t\t\t", "+\t\t\t\t\tresolvedMethods[j] = null;", "-\t\t\t\tmethod.sourceMethod().binding = null;", "-\t\t\t\tthis.methods[i] = null;", "+\t\t\t\tmethodDecl = method.sourceMethod();", "+\t\t\t\tif (methodDecl != null) {", "+\t\t\t\t\tmethodDecl.binding = null;", "+\t\t\t\t}", "+\t\t\t\t// do not alter original method array until resolution is over, due to reentrance (143259)", "+\t\t\t\tif (resolvedMethods == this.methods) {", "+\t\t\t\t\tSystem.arraycopy(this.methods, 0, resolvedMethods = new MethodBinding[length], 0, length);", "+\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\tresolvedMethods[i] = null;", "-\t\t\tint newSize = this.methods.length - failed;", "+\t\t\tint newSize = resolvedMethods.length - failed;", "-\t\t\t\tfor (int i = 0, j = 0, length = this.methods.length; i < length; i++)", "-\t\t\t\t\tif (this.methods[i] != null)", "-\t\t\t\t\t\tnewMethods[j++] = this.methods[i];", "+\t\t\t\tfor (int i = 0, j = 0, length = resolvedMethods.length; i < length; i++)", "+\t\t\t\t\tif (resolvedMethods[i] != null)", "+\t\t\t\t\t\tnewMethods[j++] = resolvedMethods[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf00175eb287905bb454b925a760de04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "9fb010ce7afa327f224b8f5c358d67cd81a71eb3", "commitAfterChange": "06b5c10c4e48c5c78350c25c25116efbbb7c209c", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 74, "signatureBeforeChange": " public static ITypeHierarchy load(IType type, InputStream input) throws JavaModelException", "signatureAfterChange": " public static ITypeHierarchy load(IType type, InputStream input) throws JavaModelException", "diff": ["+\t\tint length;", "-\t\tint length = 0;", "+\t\t// read project", "+\t\tlength = 0;", "+\t\twhile((b = (byte)input.read()) != SEPARATOR1) {", "+\t\t\tif(bytes.length == length) {", "+\t\t\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length*2], 0, length);;", "+\t\t\t}", "+\t\t\tbytes[length++]=(byte)b;", "+\t\t}", "+\t\tSystem.arraycopy(bytes, 0, bytes = new byte[length], 0, length);", "+\t\tif(length > 0) {", "+\t\t\ttypeHierarchy.project = (IJavaProject)JavaCore.create(new String(bytes));", "+\t\t\ttypeHierarchy.scope = SearchEngine.createJavaSearchScope(new IJavaElement[] {typeHierarchy.project});", "+\t\t} else {", "+\t\t\ttypeHierarchy.project = null;", "+\t\t\ttypeHierarchy.scope = SearchEngine.createWorkspaceScope();", "+\t\t}", "+\t\tlength = 0;", "+\t\tbytes = new byte[10];", "-\t\t// read project", "-//\t\ttypeHierarchy.scope = SearchEngine.createJavaSearchScope(new IJavaElement[] {project});", "+\t\t"]}], "num": 69438}
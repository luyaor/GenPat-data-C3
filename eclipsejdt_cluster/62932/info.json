{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f87e6617cea299afb7d86faa62045e1e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02eabc446679f3304ddcf855b2b836dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprotected SourceType selectSourceType(ICompilationUnit unit, String textComment) throws JavaModelException", "signatureAfterChange": " \tprotected SourceType selectSourceType(ICompilationUnit unit, String selection, int occurences) throws JavaModelException", "diff": ["-\tprotected SourceType selectSourceType(ICompilationUnit unit, String textComment) throws JavaModelException {", "-\t\tIJavaElement element = selectNode(unit, textComment, 1, 0);", "+\t */", "+\tprotected SourceType selectSourceType(ICompilationUnit unit, String selection, int occurences) throws JavaModelException {", "+\t\tIJavaElement element = selectJavaElement(unit, selection, occurences);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "565b013de74a95c6ff43dadf337452b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java", "commitBeforeChange": "f681e9c0c3cc6c59d4593a72e3527dde2cae7215", "commitAfterChange": "1b6c294391226cfde58f43f4cff9ad65bab6672e", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \t \tpublic ASTNode runConversion(char[] source, String unitName, IJavaProject project, Map options)", "signatureAfterChange": " \t \tpublic ASTNode runConversion(int astLevel, char[] source, String unitName, IJavaProject project, boolean resolveBindings)", "diff": ["+\t", "+\tpublic ASTNode runConversion(int astLevel, char[] source, String unitName, IJavaProject project, boolean resolveBindings) {", "+\t\treturn runConversion(astLevel, source, unitName, project, null, resolveBindings);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a14be800204c901d9254d5b9c1271ede", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "6436bbd31cbe5b698244c0208dd161fd144dd93e", "commitAfterChange": "4e5b524e8fed0a2f038362e79ac7bed8b62bd551", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic ParameterizedTypeBinding capture(Scope scope, int position)", "signatureAfterChange": " \tpublic ParameterizedTypeBinding capture(Scope scope, int start, int end)", "diff": ["-\tpublic ParameterizedTypeBinding capture(Scope scope, int position) {", "+\tpublic ParameterizedTypeBinding capture(Scope scope, int start, int end) {", "-\t\t\t\t\tcapturedArguments[i] = this.environment.createCapturedWildcard(wildcard, contextType, position, cud, compilationUnitScope.nextCaptureID());", "+\t\t\t\t\tcapturedArguments[i] = this.environment.createCapturedWildcard(wildcard, contextType, start, end, cud, compilationUnitScope.nextCaptureID());", "-\t\t\t\t\tcapturedArguments[i] = new CaptureBinding(wildcard, contextType, position, cud, compilationUnitScope.nextCaptureID());\t", "+\t\t\t\t\tcapturedArguments[i] = new CaptureBinding(wildcard, contextType, start, end, cud, compilationUnitScope.nextCaptureID());\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef10b245600bbdd150d8211312943953", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "6436bbd31cbe5b698244c0208dd161fd144dd93e", "commitAfterChange": "4e5b524e8fed0a2f038362e79ac7bed8b62bd551", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "\t \tpublic MethodBinding getSingleAbstractMethod(final Scope scope, boolean replaceWildcards, int capturePosition)", "signatureAfterChange": "\t \tpublic MethodBinding getSingleAbstractMethod(final Scope scope, boolean replaceWildcards, int start, int end)", "diff": ["-\tpublic MethodBinding getSingleAbstractMethod(final Scope scope, boolean replaceWildcards, int capturePosition) {", "-\t\tint index = replaceWildcards ? capturePosition < 0 ? 0 : 1 : 2; // capturePosition >= 0 IFF replaceWildcard == true", "+\tpublic MethodBinding getSingleAbstractMethod(final Scope scope, boolean replaceWildcards, int start, int end) {", "+\t\tint index = replaceWildcards ? end < 0 ? 0 : 1 : 2; // capturePosition >= 0 IFF replaceWildcard == true", "-\t\tif (capturePosition >= 0) { ", "+\t\tif (end >= 0) { ", "-\t\t\t\ttypes[i] = types[i].capture(scope, 0);", "+\t\t\t\ttypes[i] = types[i].capture(scope, start, end);"]}], "num": 62932}
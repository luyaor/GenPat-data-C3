{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2852fc82e0cd6f4f934217afaeaba580", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cf359e341b8b2079ef99766ba3e4f03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "7ff2c64bcedb0278ce3a0fd328057a1eb9f06dc8", "commitAfterChange": "4308596b1c1f07fe83eab35ed5a705ab67283da2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public static void checkNeedForArgumentCast(BlockScope scope, int operator, int operatorSignature, Expression expression, int expressionTypeId)", "signatureAfterChange": " public static void checkNeedForArgumentCast(BlockScope scope, int operator, int operatorSignature, Expression expression, int expressionTypeId)", "diff": ["-\tint alternateLeftTypeId = expressionTypeId;", "-\t} else  {", "+\t} else {", "-\t\tif ((alternateLeftTypeId = alternateLeftType.id) == expressionTypeId) { // obvious identity cast", "+\t\tif (alternateLeftType.id == expressionTypeId) { // obvious identity cast", "-\t\t\treturn;", "-\t\t} else if (alternateLeftTypeId == TypeIds.T_null) {", "-\t\t\talternateLeftTypeId = expressionTypeId;  // tolerate null argument cast", "-/*\t\ttolerate widening cast in unary expressions, as may be used when combined in binary expressions (41680)", "-\t\tint alternateOperatorSignature = OperatorExpression.OperatorSignatures[operator][(alternateLeftTypeId << 4) + alternateLeftTypeId];", "-\t\t// (cast)  left   Op (cast)  right --> result", "-\t\t//  1111   0000       1111   0000     1111", "-\t\t//  <<16   <<12       <<8    <<4       <<0", "-\t\tfinal int CompareMASK = (0xF<<16) + (0xF<<8) + 0xF; // mask hiding compile-time types", "-\t\tif ((operatorSignature & CompareMASK) == (alternateOperatorSignature & CompareMASK)) { // same promotions and result", "-\t\t\tscope.problemReporter().unnecessaryCastForArgument((CastExpression)expression,  TypeBinding.wellKnownType(scope, expression.implicitConversion >> 4));", "-\t\t}", "-*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6402e0cfd7f860e1a47cc378af3a0a98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "515443afa63476354c141cf9420c616c6ee448d0", "commitAfterChange": "be3dcae21029dbb3f453eca15686a37b37ddca01", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public static void checkNeedForArgumentCast(BlockScope scope, int operator, int operatorSignature, Expression expression, int expressionTypeId)", "signatureAfterChange": " public static void checkNeedForArgumentCast(BlockScope scope, int operator, int operatorSignature, Expression expression, int expressionTypeId)", "diff": ["-\tint alternateLeftTypeId = expressionTypeId;", "-\t} else  {", "+\t} else {", "-\t\tif ((alternateLeftTypeId = alternateLeftType.id) == expressionTypeId) { // obvious identity cast", "+\t\tif (alternateLeftType.id == expressionTypeId) { // obvious identity cast", "-\t\t\treturn;", "-\t\t} else if (alternateLeftTypeId == TypeIds.T_null) {", "-\t\t\talternateLeftTypeId = expressionTypeId;  // tolerate null argument cast", "-/*\t\ttolerate widening cast in unary expressions, as may be used when combined in binary expressions (41680)", "-\t\tint alternateOperatorSignature = OperatorExpression.OperatorSignatures[operator][(alternateLeftTypeId << 4) + alternateLeftTypeId];", "-\t\t// (cast)  left   Op (cast)  right --> result", "-\t\t//  1111   0000       1111   0000     1111", "-\t\t//  <<16   <<12       <<8    <<4       <<0", "-\t\tfinal int CompareMASK = (0xF<<16) + (0xF<<8) + 0xF; // mask hiding compile-time types", "-\t\tif ((operatorSignature & CompareMASK) == (alternateOperatorSignature & CompareMASK)) { // same promotions and result", "-\t\t\tscope.problemReporter().unnecessaryCastForArgument((CastExpression)expression,  TypeBinding.wellKnownType(scope, expression.implicitConversion >> 4));", "-\t\t}", "-*/"]}], "num": 52239}
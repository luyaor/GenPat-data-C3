{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eff8ac9f05780ce9beb569b2970bc569", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3618574a85242bab9590d0f52af5d912", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementsImpl.java", "commitBeforeChange": "c7e13eb999aeeb70fd34b19df0f27a778109206c", "commitAfterChange": "ad2281f1520933e65d479408c685e1055d82a8b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t@Override \tpublic List<? extends AnnotationMirror> getAllAnnotationMirrors(Element e)", "signatureAfterChange": " \t@Override \tpublic List<? extends AnnotationMirror> getAllAnnotationMirrors(Element e)", "diff": ["-\t\t// TODO Auto-generated method stub", "-\t\treturn null;", "+\t\t// if e is a class, walk up its superclass hierarchy looking for @Inherited annotations not already in the list", "+\t\tif (e.getKind() == ElementKind.CLASS && e instanceof TypeElementImpl) {", "+\t\t\tList<AnnotationBinding> annotations = new ArrayList<AnnotationBinding>();", "+\t\t\t// A class can only have one annotation of a particular annotation type.", "+\t\t\tSet<ReferenceBinding> annotationTypes = new HashSet<ReferenceBinding>();", "+\t\t\tReferenceBinding binding = (ReferenceBinding)((TypeElementImpl)e)._binding;", "+\t\t\twhile (null != binding) {", "+\t\t\t\tfor (AnnotationBinding annotation : binding.getAnnotations()) {", "+\t\t\t\t\tReferenceBinding annotationType = annotation.getAnnotationType(); ", "+\t\t\t\t\tif (!annotationTypes.contains(annotationType)) {", "+\t\t\t\t\t\tannotationTypes.add(annotationType);", "+\t\t\t\t\t\tannotations.add(annotation);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbinding = binding.superclass();", "+\t\t\t}", "+\t\t\tList<AnnotationMirror> list = new ArrayList<AnnotationMirror>(annotations.size());", "+\t\t\tfor (AnnotationBinding annotation : annotations) {", "+\t\t\t\tlist.add(AnnotationMirrorImpl.getAnnotationMirror(annotation));", "+\t\t\t}", "+\t\t\treturn Collections.unmodifiableList(list);", "+\t\t}", "+\t\telse {", "+\t\t\treturn e.getAnnotationMirrors();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4863ea3b288a335454a0059e2252ccbe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java", "commitBeforeChange": "ed6404d1b00fb0c4d7b0edc065f94f5cf30ee47f", "commitAfterChange": "94257a0c9b90966140e1dfe4637595598b8b9e20", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t@Override \tpublic List<? extends TypeMirror> directSupertypes(TypeMirror t)", "signatureAfterChange": "     @Override     public List<? extends TypeMirror> directSupertypes(TypeMirror t)", "diff": ["-\t */", "-\t@Override", "-\tpublic List<? extends TypeMirror> directSupertypes(TypeMirror t) {", "-\t\t// TODO Auto-generated method stub", "-\t\tthrow new UnsupportedOperationException(\"NYI: TypesImpl.directSupertypes(...)\"); //$NON-NLS-1$", "-\t}", "+     */", "+    @Override", "+    public List<? extends TypeMirror> directSupertypes(TypeMirror t) {", "+        switch(t.getKind()) {", "+            case PACKAGE :", "+            case EXECUTABLE :", "+                throw new IllegalArgumentException(\"Invalid type mirror for directSypertypes\"); //$NON-NLS-1$", "+        }", "+        TypeMirrorImpl typeMirrorImpl = (TypeMirrorImpl) t;", "+        Binding binding = typeMirrorImpl._binding;", "+        if (binding instanceof ReferenceBinding) {", "+        \tReferenceBinding referenceBinding = (ReferenceBinding) binding;", "+        \tArrayList<TypeMirror> list = new ArrayList<TypeMirror>();", "+        \tReferenceBinding superclass = referenceBinding.superclass();", "+\t\t\tif (superclass != null) {", "+        \t\tlist.add(this._env.getFactory().newTypeMirror(superclass));", "+        \t}", "+\t\t\tfor (ReferenceBinding interfaceBinding : referenceBinding.superInterfaces()) {", "+        \t\tlist.add(this._env.getFactory().newTypeMirror(interfaceBinding));", "+\t\t\treturn Collections.unmodifiableList(list);", "+        }", "+        return Collections.emptyList();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a47eef91418ad681606b39a1cfaf6dbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ErrorTypeImpl.java", "commitBeforeChange": "a209bfa947ecc1f9f7050d0d851a03f725813152", "commitAfterChange": "730caa252c0447802cd9dbe163cdf0f853f36524", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@Override \tpublic List<? extends TypeMirror> getTypeArguments()", "signatureAfterChange": "  \t@Override \tpublic List<? extends TypeMirror> getTypeArguments()", "diff": ["-\t */", "+\t\tReferenceBinding binding = (ReferenceBinding)_binding;", "+\t\tif (binding.isParameterizedType()) {", "+\t\t\tParameterizedTypeBinding ptb = (ParameterizedTypeBinding)_binding;", "+\t\t\tTypeBinding[] arguments = ptb.arguments;", "+\t\t\tint length = arguments == null ? 0 : arguments.length;", "+\t\t\tif (length == 0) return Collections.emptyList();", "+\t\t\tList<TypeMirror> args = new ArrayList<TypeMirror>(length);", "+\t\t\tfor (TypeBinding arg : arguments) {", "+\t\t\t\targs.add(_env.getFactory().newTypeMirror(arg));", "+\t\t\t}", "+\t\t\treturn Collections.unmodifiableList(args);", "+\t\t}", "+\t\tif (binding.isGenericType()) {", "+\t\t\tTypeVariableBinding[] typeVariables = binding.typeVariables();", "+\t\t\tList<TypeMirror> args = new ArrayList<TypeMirror>(typeVariables.length);", "+\t\t\tfor (TypeBinding arg : typeVariables) {", "+\t\t\t\targs.add(_env.getFactory().newTypeMirror(arg));", "+\t\t\t}", "+\t\t\treturn Collections.unmodifiableList(args);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e189f4ae227368a130574a9da7eb52de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/PackageElementImpl.java", "commitBeforeChange": "4c8a3ba34c720dda98e8d56ba71f0361efbe740b", "commitAfterChange": "c06cfa4791f8eb98381a7dd55dd6950dbcddf37c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t@Override \tpublic List<? extends Element> getEnclosedElements()", "signatureAfterChange": "  \t@Override \tpublic List<? extends Element> getEnclosedElements()", "diff": ["-\t\t//PackageBinding binding = (PackageBinding)_binding;", "-\t\tthrow new UnsupportedOperationException(\"NYI\"); //$NON-NLS-1$", "+\t\tPackageBinding binding = (PackageBinding)_binding;", "+\t\tLookupEnvironment environment = binding.environment;", "+\t\tchar[][][] typeNames = null;", "+\t\tINameEnvironment nameEnvironment = binding.environment.nameEnvironment;", "+\t\tif (nameEnvironment instanceof FileSystem) {", "+\t\t\ttypeNames = ((FileSystem) nameEnvironment).findTypeNames(binding.compoundName);", "+\t\t}", "+\t\tHashSet<Element> set = new HashSet<Element>(); ", "+\t\tif (typeNames != null) {", "+\t\t\tfor (char[][] typeName : typeNames) {", "+\t\t\t\tReferenceBinding type = environment.getType(typeName);", "+\t\t\t\tif (type != null && type.isValidBinding()) {", "+\t\t\t\t\tset.add(Factory.newElement(type));", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tArrayList<Element> list = new ArrayList<Element>(set.size());", "+\t\tlist.addAll(set);", "+\t\treturn Collections.unmodifiableList(list);"]}], "num": 59615}
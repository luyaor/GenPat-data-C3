{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac87247da8ca22e37197e5cc4dd5746a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06d571e703eef392263d94d5737cb7b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredMethod.java", "commitBeforeChange": "2abb5c60316a8a4cab92c4dd0598d9a27a87d40b", "commitAfterChange": "4d25f5ead9ec8b7cb8b7982110fb9ccd9a9e64fc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void updateFromParserState()", "signatureAfterChange": " public void updateFromParserState()", "diff": ["-\t\t\t\t\t\t\tthis.methodDeclaration.sourceEnd = this.methodDeclaration.arguments[this.methodDeclaration.arguments.length-1].sourceEnd;", "+\t\t\t\t\t\t\tif (this.methodDeclaration.arguments != null) {", "+\t\t\t\t\t\t\t\tthis.methodDeclaration.sourceEnd = this.methodDeclaration.arguments[this.methodDeclaration.arguments.length-1].sourceEnd;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tthis.methodDeclaration.sourceEnd = this.methodDeclaration.receiver.sourceEnd;", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb7530be1b7e1328abb7bc9ec4825f9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java", "commitBeforeChange": "b652b7fd3a65d4ba23b1274ed0c9b6a3e193e11c", "commitAfterChange": "1d3546ae21ffe0ff967875f1cabb468e47817326", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public String[] getParameterNames() throws JavaModelException", "signatureAfterChange": " public String[] getParameterNames() throws JavaModelException", "diff": ["-\t\t\tfinal int indexOfOpenParen = methodDoc.indexOf('(');", "+\t\t\tint indexOfOpenParen = methodDoc.indexOf('(');", "+\t\t\t// Annotations may have parameters, so make sure we are parsing the actual method parameters.", "+\t\t\tif (info.getAnnotations() != null) {", "+\t\t\t\twhile (indexOfOpenParen != -1 && !isOpenParenForMethod(methodDoc, getElementName(), indexOfOpenParen)) {", "+\t\t\t\t\tindexOfOpenParen = methodDoc.indexOf('(', indexOfOpenParen + 1);", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 48884}
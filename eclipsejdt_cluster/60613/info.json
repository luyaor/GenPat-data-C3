{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a732df4c905af2f1437c72fc07e0d7c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6593c9f93ddaac2a43cc7c15c4ec8369", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 137, "methodNumberAfterChange": 137, "signatureBeforeChange": " protected void consumeEnumConstantHeader()", "signatureAfterChange": " protected void consumeEnumConstantHeader()", "diff": ["+}", "-\tEnumConstant enumConstant = new EnumConstant(this.compilationUnit.compilationResult);", "-\tlong pos = this.identifierPositionStack[this.identifierPtr];", "-\tint enumConstantEnd = (int) pos;", "-\tenumConstant.sourceEnd = enumConstantEnd;", "-\tfinal int start = (int) (pos >>> 32);", "-\tenumConstant.sourceStart = start;", "-\tenumConstant.declarationSourceStart = start;", "-\tenumConstant.name = this.identifierStack[this.identifierPtr--];", "-\tthis.identifierLengthPtr--;", "-", "-\t// fill arguments if needed", "-\tint length;", "-\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "-\t\tthis.expressionPtr -= length;", "-\t\tSystem.arraycopy(", "-\t\t\tthis.expressionStack, ", "-\t\t\tthis.expressionPtr + 1, ", "-\t\t\tenumConstant.arguments = new Expression[length], ", "-\t\t\t0, ", "-\t\t\tlength); ", "-\t\tenumConstant.declarationSourceEnd = flushCommentsDefinedPriorTo(rParenPos);", "-\t\tenumConstant.bodyStart = rParenPos;", "-\t\tenumConstant.bodyEnd = rParenPos;\t", "-\t} else {", "-\t\tif (enumConstantEnd <= rParenPos) {", "-\t\t\tenumConstant.bodyEnd = rParenPos;", "-\t\t} else {", "-\t\t\tenumConstant.bodyEnd = enumConstantEnd;", "-\t\t}", "-\t}", "-", "-\tif (this.currentToken == TokenNameLBRACE) {", "-\t\tenumConstant.bodyStart = this.scanner.currentPosition;", "-\t}", "-\t", "-\tpushOnAstStack(enumConstant);", "+   FieldDeclaration enumConstant = (FieldDeclaration) this.astStack[this.astPtr];", "+   if (rParenPos > enumConstant.declarationSourceEnd) {", "+      enumConstant.declarationSourceEnd = flushCommentsDefinedPriorTo(rParenPos);", "+      enumConstant.declarationEnd = rParenPos;", "+   }", "+   if (this.currentToken == TokenNameLBRACE){", "+      // qualified allocation expression", "+      TypeDeclaration anonymousType = new TypeDeclaration(this.compilationUnit.compilationResult);", "+      anonymousType.name = TypeDeclaration.ANONYMOUS_EMPTY_NAME;", "+      anonymousType.bits |= ASTNode.AnonymousAndLocalMask;", "+      final int start = this.scanner.startPosition;", "+      anonymousType.declarationSourceStart = start;", "+      anonymousType.sourceStart = start;", "+      anonymousType.sourceEnd = start; // closing parenthesis", "+      anonymousType.modifiers = 0;", "+      pushOnAstStack(anonymousType);", "+      this.lastCheckPoint = anonymousType.bodyStart = this.scanner.currentPosition;", "+      if (this.currentElement != null) {", "+         this.currentElement = this.currentElement.add(anonymousType, 0);", "+         this.lastIgnoredToken = -1;", "+         this.currentToken = 0; // opening brace already taken into account", "+      }", "+      QualifiedAllocationExpression allocationExpression = new QualifiedAllocationExpression(anonymousType);", "+      allocationExpression.enumConstant = enumConstant;", "+      markEnclosingMemberWithLocalType();", "+      ", "+      // fill arguments if needed", "+      int length;", "+      if ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "+         this.expressionPtr -= length;", "+         System.arraycopy(", "+               this.expressionStack, ", "+               this.expressionPtr + 1, ", "+               allocationExpression.arguments = new Expression[length], ", "+               0, ", "+               length); ", "+      }", "+      enumConstant.initialization = allocationExpression;", "+   } else {", "+      AllocationExpression allocationExpression = new AllocationExpression();", "+      allocationExpression.enumConstant = enumConstant;", "+      // fill arguments if needed", "+      int length;", "+      if ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "+         this.expressionPtr -= length;", "+         System.arraycopy(", "+               this.expressionStack, ", "+               this.expressionPtr + 1, ", "+               allocationExpression.arguments = new Expression[length], ", "+               0, ", "+               length); ", "+      }", "+      enumConstant.initialization = allocationExpression;", "+   }", "+   ", "+   // recovery", "+   if (this.currentElement != null) {", "+      if (!(this.currentElement instanceof RecoveredType)", "+            && (this.currentToken == TokenNameDOT)){", "+         this.lastCheckPoint = enumConstant.sourceStart;", "+         this.restartRecovery = true;", "+         return;", "+      }", "+      this.lastCheckPoint = enumConstant.sourceEnd + 1;", "+      this.currentElement = this.currentElement.add(enumConstant, 0);", "+      this.lastIgnoredToken = -1;", "+   }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "973eeb7049d574733097157671fc51c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "a3da1013b6fe549ad5c2ee5b7dc726eba38ff59e", "commitAfterChange": "30692448718de71df165cc52c018bee7df31a8fb", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " public void notifySourceElementRequestor(TypeDeclaration typeDeclaration, boolean notifyTypePresence, TypeDeclaration declaringType)", "signatureAfterChange": " public void notifySourceElementRequestor(TypeDeclaration typeDeclaration, boolean notifyTypePresence, TypeDeclaration declaringType)", "diff": ["-      switch (typeDeclaration.getKind()) {", "+      int kind = typeDeclaration.getKind();", "+      switch (kind) {", "-\t\t\t\t\trequestor.enterClass(", "-\t\t\t\t\t\ttypeDeclaration.declarationSourceStart, ", "-\t\t\t\t\t\tflags, ", "-\t\t\t\t\t\ttypeDeclaration.name, ", "-\t\t\t\t\t\ttypeDeclaration.sourceStart, ", "-\t\t\t\t\t\tsourceEnd(typeDeclaration), ", "-\t\t\t\t\t\tisEnumInit ? declaringType.name : null, ", "-\t\t\t\t\t\tinterfaceNames);", "+ \t\t\t\t\tISourceElementRequestor.TypeInfo typeInfo = new ISourceElementRequestor.TypeInfo();", "+ \t\t\t\t\ttypeInfo.kind = kind;", "+ \t\t\t\t\ttypeInfo.declarationStart = typeDeclaration.declarationSourceStart;", "+ \t\t\t\t\ttypeInfo.modifiers = flags;", "+ \t\t\t\t\ttypeInfo.name = typeDeclaration.name;", "+ \t\t\t\t\ttypeInfo.nameSourceStart = typeDeclaration.sourceStart;", "+ \t\t\t\t\ttypeInfo.nameSourceEnd = sourceEnd(typeDeclaration);", "+ \t\t\t\t\ttypeInfo.superclass = isEnumInit ? declaringType.name : null;", "+ \t\t\t\t\ttypeInfo.superinterfaces = interfaceNames;", "+ \t\t\t\t\ttypeInfo.typeParameters = getTypeParameterInfos(typeDeclaration.typeParameters);", "+\t\t\t\t\trequestor.enterClass(typeInfo);", "-                  requestor.enterClass(", "-                     typeDeclaration.declarationSourceStart, ", "-                     typeDeclaration.modifiers, ", "-                     typeDeclaration.name, ", "-                     typeDeclaration.sourceStart, ", "-                     sourceEnd(typeDeclaration), ", "-                     CharOperation.concatWith(superclass.getParameterizedTypeName(), '.'), ", "-                     interfaceNames);", "+\t\t\t\t\tISourceElementRequestor.TypeInfo typeInfo = new ISourceElementRequestor.TypeInfo();", "+ \t\t\t\t\ttypeInfo.kind = kind;", "+ \t\t\t\t\ttypeInfo.declarationStart = typeDeclaration.declarationSourceStart;", "+ \t\t\t\t\ttypeInfo.modifiers = typeDeclaration.modifiers;", "+ \t\t\t\t\ttypeInfo.name = typeDeclaration.name;", "+ \t\t\t\t\ttypeInfo.nameSourceStart = typeDeclaration.sourceStart;", "+ \t\t\t\t\ttypeInfo.nameSourceEnd = sourceEnd(typeDeclaration);", "+ \t\t\t\t\ttypeInfo.superclass = CharOperation.concatWith(superclass.getParameterizedTypeName(), '.');", "+ \t\t\t\t\ttypeInfo.superinterfaces = interfaceNames;", "+ \t\t\t\t\ttypeInfo.typeParameters = getTypeParameterInfos(typeDeclaration.typeParameters);", "+\t\t\t\t\trequestor.enterClass(typeInfo);", "-            notifySourceElementRequestor(typeDeclaration.typeParameters);         ", "-               requestor.enterInterface(", "-                  typeDeclaration.declarationSourceStart, ", "-                  deprecated ? (currentModifiers & AccJustFlag) | AccDeprecated : currentModifiers & AccJustFlag, ", "-                  typeDeclaration.name, ", "-                  typeDeclaration.sourceStart, ", "-                  sourceEnd(typeDeclaration), ", "-                  interfaceNames);", "+\t\t\t\tISourceElementRequestor.TypeInfo typeInfo = new ISourceElementRequestor.TypeInfo();", "+\t\t\t\ttypeInfo.kind = kind;", "+\t\t\t\ttypeInfo.declarationStart = typeDeclaration.declarationSourceStart;", "+\t\t\t\ttypeInfo.modifiers = deprecated ? (currentModifiers & AccJustFlag) | AccDeprecated : currentModifiers & AccJustFlag;", "+\t\t\t\ttypeInfo.name = typeDeclaration.name;", "+\t\t\t\ttypeInfo.nameSourceStart = typeDeclaration.sourceStart;", "+\t\t\t\ttypeInfo.nameSourceEnd = sourceEnd(typeDeclaration);", "+\t\t\t\ttypeInfo.superinterfaces = interfaceNames;", "+\t\t\t\ttypeInfo.typeParameters = getTypeParameterInfos(typeDeclaration.typeParameters);", "+\t\t\t\trequestor.enterInterface(typeInfo);", "-            notifySourceElementRequestor(typeDeclaration.typeParameters);         ", "-               requestor.enterEnum(", "-                  typeDeclaration.declarationSourceStart, ", "-                  deprecated ? (currentModifiers & AccJustFlag) | AccDeprecated : currentModifiers & AccJustFlag, ", "-                  typeDeclaration.name, ", "-                  typeDeclaration.sourceStart, ", "-                  sourceEnd(typeDeclaration), ", "-                  interfaceNames);", "+\t\t\t\tISourceElementRequestor.TypeInfo typeInfo = new ISourceElementRequestor.TypeInfo();", "+\t\t\t\ttypeInfo.kind = kind;", "+\t\t\t\ttypeInfo.declarationStart = typeDeclaration.declarationSourceStart;", "+\t\t\t\ttypeInfo.modifiers = deprecated ? (currentModifiers & AccJustFlag) | AccDeprecated : currentModifiers & AccJustFlag;", "+\t\t\t\ttypeInfo.name = typeDeclaration.name;", "+\t\t\t\ttypeInfo.nameSourceStart = typeDeclaration.sourceStart;", "+\t\t\t\ttypeInfo.nameSourceEnd = sourceEnd(typeDeclaration);", "+\t\t\t\ttypeInfo.superinterfaces = interfaceNames;", "+\t\t\t\ttypeInfo.typeParameters = getTypeParameterInfos(typeDeclaration.typeParameters);", "+\t\t\t\trequestor.enterEnum(typeInfo);", "-            notifySourceElementRequestor(typeDeclaration.typeParameters);         "]}], "num": 60613}
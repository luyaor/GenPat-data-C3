{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75c4876e39a674d87ba40787de603398", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b53b7a94999ef6930e28c0c8393b6a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AnnotationParser.java", "commitBeforeChange": "6a44e0777af1a4632e0d20c0e9b92d35d2ad59f3", "commitAfterChange": "2ca339c139c0fe73a5bd2705f66592731098d347", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tchar[] readIdentifier()", "signatureAfterChange": " \t \tprotected void pushIdentifier()", "diff": ["-\t */", "-\tchar[] readIdentifier() {", "-\t", "-\t\tif (!Character.isJavaIdentifierStart(this.currentCharacter)) return null;", "-\t\tchar[] identifier = null;", "-\t\tthis.scanner.currentCharacter = this.currentCharacter;", "-\t\tthis.scanner.startPosition = this.startPosition;", "-\t\tthis.scanner.currentPosition = this.currentPosition;", "-\t\t", "-\t\tint token = this.scanner.scanIdentifierOrKeyword();\t\t", "-\t\tif (token == TerminalTokens.TokenNameIdentifier) {", "-\t\t\tidentifier = this.scanner.getCurrentIdentifierSource();", "-\t\treturn identifier;", "+\t", "+\tprotected void pushIdentifier() {", "+\t\t/*push the consumeToken on the identifier stack.", "+\t\tIncrease the total number of identifier in the stack.", "+\t\tidentifierPtr points on the next top */", "+\t", "+\t\ttry {", "+\t\t\tthis.identifierStack[++this.identifierPtr] = this.scanner.getCurrentIdentifierSource();", "+\t\t\tthis.identifierPositionStack[this.identifierPtr] = ", "+\t\t\t\t(((long) this.scanner.startPosition) << 32) + (this.scanner.currentPosition - 1); ", "+\t\t} catch (IndexOutOfBoundsException e) {", "+\t\t\t/*---stack reallaocation (identifierPtr is correct)---*/", "+\t\t\tint oldStackLength = this.identifierStack.length;", "+\t\t\tchar[][] oldStack = this.identifierStack;", "+\t\t\tthis.identifierStack = new char[oldStackLength + 20][];", "+\t\t\tSystem.arraycopy(oldStack, 0, this.identifierStack, 0, oldStackLength);", "+\t\t\tthis.identifierStack[this.identifierPtr] = this.scanner.getCurrentTokenSource();", "+\t\t\t/*identifier position stack*/", "+\t\t\tlong[] oldPos = this.identifierPositionStack;", "+\t\t\tthis.identifierPositionStack = new long[oldStackLength + 20];", "+\t\t\tSystem.arraycopy(oldPos, 0, this.identifierPositionStack, 0, oldStackLength);", "+\t\t\tthis.identifierPositionStack[this.identifierPtr] = ", "+\t\t\t\t(((long) this.scanner.startPosition) << 32) + (this.scanner.currentPosition - 1); ", "+\t\t}", "+\t", "+\t\ttry {", "+\t\t\tthis.identifierLengthStack[++this.identifierLengthPtr] = 1;", "+\t\t} catch (IndexOutOfBoundsException e) {", "+\t\t\t/*---stack reallocation (identifierLengthPtr is correct)---*/", "+\t\t\tint oldStackLength = this.identifierLengthStack.length;", "+\t\t\tint oldStack[] = this.identifierLengthStack;", "+\t\t\tthis.identifierLengthStack = new int[oldStackLength + 10];", "+\t\t\tSystem.arraycopy(oldStack, 0, this.identifierLengthStack, 0, oldStackLength);", "+\t\t\tthis.identifierLengthStack[this.identifierLengthPtr] = 1;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de43a9e359ec8d0b922aab7fe7f1c923", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultCommentMapper.java", "commitBeforeChange": "6e642a34a8b5c85df508f049684a8996f1b8df52", "commitAfterChange": "355460267a070a52738f93cd1e4e0f2039fb0d85", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \t\tprotected boolean visitNode(ASTNode node)", "signatureAfterChange": "  \t\tprotected boolean visitNode(ASTNode node)", "diff": ["-", "+\t\t\t", "-\t\t\tASTNode sibling = (ASTNode) this.waitingSiblings.get(parent);", "+ \t\t\tASTNode sibling = parent == this.topSiblingParent ? (ASTNode) this.siblings[this.siblingPtr] : null;", "-\t\t\t\t\tpreviousEnd = storeTrailingComments(sibling, node.getStartPosition(), false);", "+\t\t\t\t\tpreviousEnd = storeTrailingComments(sibling, node.getStartPosition(), false, this.parentLineRange[this.siblingPtr]);", "+\t\t\tint[] previousLineRange = this.siblingPtr > -1 ? this.parentLineRange[this.siblingPtr] : new int[] {1, DefaultCommentMapper.this.scanner.linePtr+1};", "-\t\t\t\tstoreLeadingComments(node, previousEnd);", "+\t\t\t\tstoreLeadingComments(node, previousEnd, previousLineRange);", "-\t\t\tthis.waitingSiblings.put(parent, node);", "+\t\t\tif (this.topSiblingParent != parent) {", "+\t\t\t\tif (this.siblings.length == ++this.siblingPtr) {", "+\t\t\t\t\tSystem.arraycopy(this.siblings, 0, this.siblings = new ASTNode[this.siblingPtr*2], 0, this.siblingPtr);", "+\t\t\t\t\tSystem.arraycopy(this.parentLineRange, 0, this.parentLineRange = new int[this.siblingPtr*2][], 0, this.siblingPtr);", "+\t\t\t\t}", "+\t\t\t\tif (this.topSiblingParent == null) {", "+\t\t\t\t\t// node is a CompilationUnit", "+\t\t\t\t\tthis.parentLineRange[this.siblingPtr] = previousLineRange;", "+\t\t\t\t} else {", "+\t\t\t\t\tint parentStart = parent.getStartPosition();", "+\t\t\t\t\tint firstLine = getLineNumber(parentStart, previousLineRange);", "+\t\t\t\t\tint lastLine = getLineNumber(parentStart + parent.getLength() - 1, previousLineRange);", "+\t\t\t\t\tif (this.parentLineRange[this.siblingPtr] == null) {", "+\t\t\t\t\t\tthis.parentLineRange[this.siblingPtr] = new int[] {firstLine, lastLine};", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint[] lineRange = this.parentLineRange[this.siblingPtr];", "+\t\t\t\t\t\tlineRange[0] = firstLine;", "+\t\t\t\t\t\tlineRange[1] = lastLine;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tthis.topSiblingParent = parent;", "+\t\t\t}", "+\t\t\tthis.siblings[this.siblingPtr] = node;"]}], "num": 56453}
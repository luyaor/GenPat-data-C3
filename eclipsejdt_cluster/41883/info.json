{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9fcde6dec70876b83d650986d3edae82", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "520847a4ec511409f056ab7aa5a2c272", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": " public void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration)", "diff": ["-\t\t\targumentTypes[i] = returnTypeName(arguments[i].type);", "+\t\t\targumentTypes[i] = CharOperation.concatWith(arguments[i].type.getParameterizedTypeName(), '.');", "-\t\t\t\tCharOperation.concatWith(thrownExceptions[i].getTypeName(), '.'); ", "+\t\t\t\tCharOperation.concatWith(thrownExceptions[i].getParameterizedTypeName(), '.'); ", "+\t\t\tTypeParameter[] typeParameters = methodDeclaration.typeParameters();", "+\t\t\tchar[][] typeParameterNames = null;", "+\t\t\tchar[][][] typeParameterBounds = null;", "+\t\t\tif (typeParameters != null) {", "+\t\t\t\tint typeParametersLength = typeParameters.length;", "+\t\t\t\ttypeParameterNames = new char[typeParametersLength][];", "+\t\t\t\ttypeParameterBounds = new char[typeParametersLength][][];", "+\t\t\t\tfor (int i = 0; i < typeParametersLength; i++) {", "+\t\t\t\t\ttypeParameterNames[i] = typeParameters[i].name;", "+\t\t\t\t\tTypeReference[] bounds = typeParameters[i].bounds;", "+\t\t\t\t\tif (bounds != null) {", "+\t\t\t\t\t\tint boundLength = bounds.length;", "+\t\t\t\t\t\tchar[][] boundNames = new char[boundLength][];", "+\t\t\t\t\t\tfor (int j = 0; j < boundLength; j++) {", "+\t\t\t\t\t\t\tboundNames[j] = ", "+\t\t\t\t\t\t\t\tCharOperation.concatWith(bounds[i].getParameterizedTypeName(), '.'); ", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\ttypeParameterBounds[i] = boundNames;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}\t\t\t", "-\t\t\t\tthrownExceptionTypes);", "+\t\t\t\tthrownExceptionTypes,", "+\t\t\t\ttypeParameterNames,", "+\t\t\t\ttypeParameterBounds);", "+\t\tTypeParameter[] typeParameters = methodDeclaration.typeParameters();", "+\t\tchar[][] typeParameterNames = null;", "+\t\tchar[][][] typeParameterBounds = null;", "+\t\tif (typeParameters != null) {", "+\t\t\tint typeParametersLength = typeParameters.length;", "+\t\t\ttypeParameterNames = new char[typeParametersLength][];", "+\t\t\ttypeParameterBounds = new char[typeParametersLength][][];", "+\t\t\tfor (int i = 0; i < typeParametersLength; i++) {", "+\t\t\t\ttypeParameterNames[i] = typeParameters[i].name;", "+\t\t\t\tTypeReference[] bounds = typeParameters[i].bounds;", "+\t\t\t\tif (bounds != null) {", "+\t\t\t\t\tint boundLength = bounds.length;", "+\t\t\t\t\tchar[][] boundNames = new char[boundLength][];", "+\t\t\t\t\tfor (int j = 0; j < boundLength; j++) {", "+\t\t\t\t\t\tboundNames[j] = ", "+\t\t\t\t\t\t\tCharOperation.concatWith(bounds[i].getParameterizedTypeName(), '.'); ", "+\t\t\t\t\t}", "+\t\t\t\t\ttypeParameterBounds[i] = boundNames;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-\t\trequestor.enterMethod(", "-\t\t\tmethodDeclaration.declarationSourceStart, ", "-\t\t\tdeprecated ? (currentModifiers & AccJustFlag) | AccDeprecated : currentModifiers & AccJustFlag, ", "-\t\t\treturnTypeName(((MethodDeclaration) methodDeclaration).returnType), ", "-\t\t\tmethodDeclaration.selector, ", "-\t\t\tmethodDeclaration.sourceStart, ", "-\t\t\tselectorSourceEnd, ", "-\t\t\targumentTypes, ", "-\t\t\targumentNames, ", "-\t\t\tthrownExceptionTypes); ", "+\t\tif (methodDeclaration instanceof MethodDeclaration) {", "+\t\t\tTypeReference returnType = ((MethodDeclaration) methodDeclaration).returnType;", "+\t\t\trequestor.enterMethod(", "+\t\t\t\tmethodDeclaration.declarationSourceStart, ", "+\t\t\t\tdeprecated ? (currentModifiers & AccJustFlag) | AccDeprecated : currentModifiers & AccJustFlag, ", "+\t\t\t\treturnType == null ? null : CharOperation.concatWith(returnType.getParameterizedTypeName(), '.'),", "+\t\t\t\tmethodDeclaration.selector, ", "+\t\t\t\tmethodDeclaration.sourceStart, ", "+\t\t\t\tselectorSourceEnd, ", "+\t\t\t\targumentTypes, ", "+\t\t\t\targumentNames, ", "+\t\t\t\tthrownExceptionTypes,", "+\t\t\t\ttypeParameterNames,", "+\t\t\t\ttypeParameterBounds);", "+\t\t} else {", "+\t\t\tTypeReference returnType = ((AnnotationTypeMemberDeclaration) methodDeclaration).returnType;", "+\t\t\trequestor.enterMethod(", "+\t\t\t\tmethodDeclaration.declarationSourceStart, ", "+\t\t\t\tdeprecated ? (currentModifiers & AccJustFlag) | AccDeprecated : currentModifiers & AccJustFlag, ", "+\t\t\t\treturnType == null ? null : CharOperation.concatWith(returnType.getParameterizedTypeName(), '.'),", "+\t\t\t\tmethodDeclaration.selector, ", "+\t\t\t\tmethodDeclaration.sourceStart, ", "+\t\t\t\tselectorSourceEnd, ", "+\t\t\t\targumentTypes, ", "+\t\t\t\targumentNames, ", "+\t\t\t\tthrownExceptionTypes,", "+\t\t\t\ttypeParameterNames,", "+\t\t\t\ttypeParameterBounds);", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62f861ffaf150cfdcc3e0dc2cc6755fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "a3da1013b6fe549ad5c2ee5b7dc726eba38ff59e", "commitAfterChange": "30692448718de71df165cc52c018bee7df31a8fb", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": " public void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration)", "diff": ["-\t\t\trequestor.enterConstructor(", "-\t\t\t\tmethodDeclaration.declarationSourceStart, ", "-\t\t\t\tmethodDeclaration.modifiers, ", "-\t\t\t\tmethodDeclaration.selector, ", "-\t\t\t\tmethodDeclaration.sourceStart, ", "-\t\t\t\tselectorSourceEnd, ", "-\t\t\t\targumentTypes, ", "-\t\t\t\targumentNames, ", "-\t\t\t\tthrownExceptionTypes);", "-\t\t\tnotifySourceElementRequestor(methodDeclaration.typeParameters());\t\t\t", "+\t\t\tISourceElementRequestor.MethodInfo methodInfo = new ISourceElementRequestor.MethodInfo();", "+\t\t\tmethodInfo.isConstructor = true;", "+\t\t\tmethodInfo.declarationStart = methodDeclaration.declarationSourceStart;", "+\t\t\tmethodInfo.modifiers = methodDeclaration.modifiers;", "+\t\t\tmethodInfo.name = methodDeclaration.selector;", "+\t\t\tmethodInfo.nameSourceStart = methodDeclaration.sourceStart;", "+\t\t\tmethodInfo.nameSourceEnd = selectorSourceEnd;", "+\t\t\tmethodInfo.parameterTypes = argumentTypes;", "+\t\t\tmethodInfo.parameterNames = argumentNames;", "+\t\t\tmethodInfo.exceptionTypes = thrownExceptionTypes;", "+\t\t\tmethodInfo.typeParameters = getTypeParameterInfos(methodDeclaration.typeParameters());", "+\t\t\trequestor.enterConstructor(methodInfo);", "-\t\tif (methodDeclaration instanceof MethodDeclaration) {", "-\t\t\tTypeReference returnType = ((MethodDeclaration) methodDeclaration).returnType;", "-\t\t\trequestor.enterMethod(", "-\t\t\t\tmethodDeclaration.declarationSourceStart, ", "-\t\t\t\tdeprecated ? (currentModifiers & AccJustFlag) | AccDeprecated : currentModifiers & AccJustFlag, ", "-\t\t\t\treturnType == null ? null : CharOperation.concatWith(returnType.getParameterizedTypeName(), '.'),", "-\t\t\t\tmethodDeclaration.selector, ", "-\t\t\t\tmethodDeclaration.sourceStart, ", "-\t\t\t\tselectorSourceEnd, ", "-\t\t\t\targumentTypes, ", "-\t\t\t\targumentNames, ", "-\t\t\t\tthrownExceptionTypes);", "-\t\t} else {", "-\t\t\tTypeReference returnType = ((AnnotationTypeMemberDeclaration) methodDeclaration).returnType;", "-\t\t\trequestor.enterMethod(", "-\t\t\t\tmethodDeclaration.declarationSourceStart, ", "-\t\t\t\tdeprecated ? (currentModifiers & AccJustFlag) | AccDeprecated : currentModifiers & AccJustFlag, ", "-\t\t\t\treturnType == null ? null : CharOperation.concatWith(returnType.getParameterizedTypeName(), '.'),", "-\t\t\t\tmethodDeclaration.selector, ", "-\t\t\t\tmethodDeclaration.sourceStart, ", "-\t\t\t\tselectorSourceEnd, ", "-\t\t\t\targumentTypes, ", "-\t\t\t\targumentNames, ", "-\t\t\t\tthrownExceptionTypes);", "-\t\t}", "-\t\tnotifySourceElementRequestor(methodDeclaration.typeParameters());\t\t\t", "+\t\tTypeReference returnType = methodDeclaration instanceof MethodDeclaration", "+\t\t\t? ((MethodDeclaration) methodDeclaration).returnType", "+\t\t\t: ((AnnotationTypeMemberDeclaration) methodDeclaration).returnType;", "+\t\tISourceElementRequestor.MethodInfo methodInfo = new ISourceElementRequestor.MethodInfo();", "+\t\tmethodInfo.declarationStart = methodDeclaration.declarationSourceStart;", "+\t\tmethodInfo.modifiers = deprecated ? (currentModifiers & AccJustFlag) | AccDeprecated : currentModifiers & AccJustFlag;", "+\t\tmethodInfo.returnType = returnType == null ? null : CharOperation.concatWith(returnType.getParameterizedTypeName(), '.');", "+\t\tmethodInfo.name = methodDeclaration.selector;", "+\t\tmethodInfo.nameSourceStart = methodDeclaration.sourceStart;", "+\t\tmethodInfo.nameSourceEnd = selectorSourceEnd;", "+\t\tmethodInfo.parameterTypes = argumentTypes;", "+\t\tmethodInfo.parameterNames = argumentNames;", "+\t\tmethodInfo.exceptionTypes = thrownExceptionTypes;", "+\t\tmethodInfo.typeParameters = getTypeParameterInfos(methodDeclaration.typeParameters());", "+\t\trequestor.enterMethod(methodInfo);"]}], "num": 41883}
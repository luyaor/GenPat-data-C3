{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c3b881238f4db17e9b8625f961b963a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba3e36efb6c10a51317903d956be4fbe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "b14a6c4d09a9bece1bab75937908ff44df19fa09", "commitAfterChange": "a846071c58f9098177eef02be0134294158f9c4f", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  public int nullStatus(FlowInfo flowInfo)", "signatureAfterChange": "  public VariableBinding nullAnnotatedVariableBinding()", "diff": ["+", "+public VariableBinding nullAnnotatedVariableBinding() {", "+\tswitch (this.bits & ASTNode.RestrictiveFlagMASK) {", "+\t\tcase Binding.FIELD : // reading a field", "+\t\tcase Binding.LOCAL : // reading a local variable", "+\t\t\tif ((((VariableBinding)this.binding).tagBits & (TagBits.AnnotationNonNull|TagBits.AnnotationNullable)) != 0)", "+\t\t\t\treturn (VariableBinding) this.binding;", "-public int nullStatus(FlowInfo flowInfo) {", "-\tif (this.constant != null && this.constant != Constant.NotAConstant) {", "-\t\treturn FlowInfo.NON_NULL; // constant expression cannot be null", "-\t}", "-\tswitch (this.bits & ASTNode.RestrictiveFlagMASK) {", "-\t\tcase Binding.FIELD : // reading a field", "-\t\t\treturn FlowInfo.UNKNOWN;", "-\t\tcase Binding.LOCAL : // reading a local variable", "-\t\t\tLocalVariableBinding local = (LocalVariableBinding) this.binding;", "-\t\t\tif (local != null)", "-\t\t\t\treturn flowInfo.nullStatus(local);", "-\t}", "-\treturn FlowInfo.NON_NULL; // never get there", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff671238ed6e0d37965ccee97e9e339c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "0848b8a6a9afff16623dfc6b0821adb833326b41", "commitAfterChange": "29d4a1149e392c0b5c052a9202992e800f5506a5", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "  public int nullStatus(FlowInfo flowInfo)", "signatureAfterChange": "  public int nullStatus(FlowInfo flowInfo, FlowContext flowContext)", "diff": ["+", "+public int nullStatus(FlowInfo flowInfo, FlowContext flowContext) {", "+\tLocalVariableBinding local = localVariableBinding();", "+\tif (local != null) {", "+\t\treturn flowInfo.nullStatus(local);", "+\t}", "+\treturn super.nullStatus(flowInfo, flowContext);", "-public int nullStatus(FlowInfo flowInfo) {", "-\tif (this.constant != null && this.constant != Constant.NotAConstant) {", "-\t\treturn FlowInfo.NON_NULL; // constant expression cannot be null", "-\t}", "-\tswitch (this.bits & ASTNode.RestrictiveFlagMASK) {", "-\t\tcase Binding.FIELD : // reading a field", "-\t\t\treturn FlowInfo.UNKNOWN;", "-\t\tcase Binding.LOCAL : // reading a local variable", "-\t\t\tLocalVariableBinding local = (LocalVariableBinding) this.binding;", "-\t\t\tif (local != null)", "-\t\t\t\treturn flowInfo.nullStatus(local);", "-\t}", "-\treturn FlowInfo.NON_NULL; // never get there", "-}"]}], "num": 21959}
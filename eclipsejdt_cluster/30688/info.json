{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5adde526bc71e903731f804f7a2c9e4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "083907de8b0e37acf809804d896037d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "42a5591e6405d9d5a9661e1fdb211c39440692e6", "commitAfterChange": "90b5d0d22a673acac5fa922f69ac563d54cf8a91", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " boolean checkInheritedReturnTypes(MethodBinding[] methods, int length)", "signatureAfterChange": " boolean checkInheritedReturnTypes(MethodBinding[] methods, int length)", "diff": ["-\tif (methods[0].declaringClass.isClass())", "-\t\treturn super.checkInheritedReturnTypes(methods, length);", "-", "+\t// assumes length > 1", "-\tfor (int i = 0, l = length - 1; i < l;) {", "+\tint[] areIncompatible = null;", "+\t// abstract classes must check every method against each other", "+\tfor (int i = 0, l = this.type.isAbstract() ? length - 2 : 0; i <= l;) {", "-\t\tnextMethod : for (int j = i; j <= l; j++) {", "+\t\tnextMethod : for (int j = i; j < length; j++) {", "-\t\t\t\tproblemReporter().inheritedMethodsHaveIncompatibleReturnTypes(this.type, methods, length);", "-\t\t\t\treturn false;", "+\t\t\t\t// check to see if this is just a warning, if so report it & skip to next method", "+\t\t\t\tif (isUnsafeReturnTypeOverride(method, methods[j])) {", "+\t\t\t\t\tproblemReporter(method).unsafeReturnTypeOverride(method, methods[j], this.type);", "+\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t}", "+\t\t\t\tif (areIncompatible == null)", "+\t\t\t\t\tareIncompatible = new int[length];", "+\t\t\t\tareIncompatible[i - 1] = -1;", "+\t\t\t\tareIncompatible[j] = -1;", "-\treturn true;", "+\tif (areIncompatible == null)", "+\t\treturn true;", "+", "+\tint count = 0;", "+\tfor (int i = 0; i < length; i++)", "+\t\tif (areIncompatible[i] == -1) count++;", "+\tif (count == length) {", "+\t\tproblemReporter().inheritedMethodsHaveIncompatibleReturnTypes(this.type, methods, length);", "+\t\treturn false;", "+\t}", "+\tMethodBinding[] methodsToReport = new MethodBinding[count];", "+\tfor (int i = 0, index = 0; i < length; i++)", "+\t\tif (areIncompatible[i] == -1)", "+\t\t\tmethodsToReport[index++] = methods[i];", "+\tproblemReporter().inheritedMethodsHaveIncompatibleReturnTypes(this.type, methodsToReport, count);", "+\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83e3bd35d284a12ec6d87e0f3f502ee4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "5ca04e4bf10b0522a3310beff506a236db77a4e4", "commitAfterChange": "436518e54cbed6eb8a3a019fe8cc049d723624f6", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " public static char[][] getSimpleNames(char[] name)", "signatureAfterChange": " public static char[][] getSimpleNames(char[] name)", "diff": ["-\treturn CharOperation.splitOn(C_DOT, name);", "+\tint length = name == null ? 0 : name.length;", "+\tif (length == 0)", "+\t\treturn CharOperation.NO_CHAR_CHAR;", "+\t", "+\tint wordCount = 1;", "+\tcountingWords: for (int i = 0; i < length; i++)", "+\t\tswitch(name[i]) {", "+\t\t\tcase C_DOT:", "+\t\t\t\twordCount++;", "+\t\t\t\tbreak;", "+\t\t\tcase C_GENERIC_START:", "+\t\t\t\tbreak countingWords;", "+\t\t}", "+\tchar[][] split = new char[wordCount][];", "+\tint last = 0, currentWord = 0;", "+\tfor (int i = 0; i < length; i++) {", "+\t\tif (name[i] == C_GENERIC_START) break;", "+\t\tif (name[i] == C_DOT) {", "+\t\t\tsplit[currentWord] = new char[i - last];", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tname,", "+\t\t\t\tlast,", "+\t\t\t\tsplit[currentWord++],", "+\t\t\t\t0,", "+\t\t\t\ti - last);", "+\t\t\tlast = i + 1;", "+\t\t}", "+\t}", "+\tsplit[currentWord] = new char[length - last];", "+\tSystem.arraycopy(name, last, split[currentWord], 0, length - last);", "+\treturn split;"]}], "num": 30688}
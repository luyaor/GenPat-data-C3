{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "557f1197c9e0c5cb49fec4d565dea4cb", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dccd36691b77037b0b628af24bb9d795", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "4075c9316d3502762c17ed452f06fa6d926713f3", "commitAfterChange": "19a1913b17e3092170a28a811c1b6c80eb2c4989", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 70, "signatureBeforeChange": "  \t\tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": "  \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite) {", "-\t\t\tboolean varargsStatus = visible[0].isVarargs();", "-\t\t\tfor (int i = 1; i < visibleSize; i++) {", "-\t\t\t\tif (visible[i].isVarargs() != varargsStatus) {", "-\t\t\t\t\t// visible is a mix of fixed & variable arity methods, so double check the varargs methods, but consider their vararg argument as a fixed array", "-\t\t\t\t\tMethodBinding[] temp = new MethodBinding[visibleSize];", "-\t\t\t\t\tint newSize = 0;", "-\t\t\t\t\tfor (int j = 0; j < visibleSize; j++)", "-\t\t\t\t\t\tif (!visible[j].isVarargs() || visible[j].areParametersCompatibleWith(argumentTypes))", "-\t\t\t\t\t\t\ttemp[newSize++] = visible[j];", "-\t\t\t\t\tvisible = temp;", "-\t\t\t\t\tvisibleSize = newSize;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t", "-\t\t\tMethodBinding method = null;", "-\t\t\tnextVisible : for (int i = 0; i < visibleSize; i++) {", "-\t\t\t\tmethod = visible[i];", "+\tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite) {", "+\t\tboolean varargsStatus = visible[0].isVarargs();", "+\t\tfor (int i = 1; i < visibleSize; i++) {", "+\t\t\tif (visible[i].isVarargs() != varargsStatus) {", "+\t\t\t\t// visible can be a mix of fixed & variable arity methods, so re-check the varargs methods but consider their last arg as a fixed array", "+\t\t\t\tMethodBinding[] temp = new MethodBinding[visibleSize];", "+\t\t\t\tint newSize = 0;", "+\t\t\t\tint argLength = argumentTypes.length;", "-\t\t\t\t\tif (i == j) continue;", "-\t\t\t\t\t// tiebkreak generic methods using variant where type params are substituted by their erasures", "-\t\t\t\t\tif (!visible[j].tiebreakMethod().areParametersCompatibleWith(method.tiebreakMethod().parameters))", "-\t\t\t\t\t\tcontinue nextVisible;", "+\t\t\t\t\tif (visible[j].isVarargs())", "+\t\t\t\t\t\tif (visible[j].parameters.length != argLength", "+\t\t\t\t\t\t\t|| !argumentTypes[argLength - 1].isCompatibleWith(visible[j].parameters[argLength - 1]))", "+\t\t\t\t\t\t\t\tcontinue; // forget this varargs method since its last arg is not an exact match", "+\t\t\t\t\ttemp[newSize++] = visible[j];", "-\t\t\t\tcompilationUnitScope().recordTypeReferences(method.thrownExceptions);", "-\t\t\t\treturn method;", "+\t\t\t\tvisible = temp;", "+\t\t\t\tvisibleSize = newSize;", "+\t\t\t\tbreak;", "-\t\t\treturn new ProblemMethodBinding(visible[0].selector, visible[0].parameters, Ambiguous);", "-\t\t}\t", "+\t\t}", "+", "+\t\tMethodBinding method = null;", "+\t\tnextVisible : for (int i = 0; i < visibleSize; i++) {", "+\t\t\tmethod = visible[i];", "+\t\t\tfor (int j = 0; j < visibleSize; j++) {", "+\t\t\t\tif (i == j) continue;", "+\t\t\t\t// tiebreak generic methods using variant where type params are substituted by their erasures", "+\t\t\t\tif (!visible[j].tiebreakMethod().areParametersCompatibleWith(method.tiebreakMethod().parameters)) {", "+\t\t\t\t\tif (method.isVarargs() && visible[j].isVarargs()) {", "+\t\t\t\t\t\tint paramLength = method.parameters.length;", "+\t\t\t\t\t\tif (paramLength == visible[j].parameters.length && paramLength == argumentTypes.length + 1) {", "+\t\t\t\t\t\t\tTypeBinding elementsType = ((ArrayBinding) visible[j].parameters[paramLength - 1]).elementsType();", "+\t\t\t\t\t\t\tif (method.parameters[paramLength - 1].isCompatibleWith(elementsType))", "+\t\t\t\t\t\t\t\tcontinue; // special case to choose between 2 varargs methods when the last arg is missing", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tcontinue nextVisible;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcompilationUnitScope().recordTypeReferences(method.thrownExceptions);", "+\t\t\treturn method;", "+\t\t}", "+\t\treturn new ProblemMethodBinding(visible[0].selector, visible[0].parameters, Ambiguous);", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e316f75dcdceb42d0c9312f2bdbbc7ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "31d25259b58c3c4c3c062013eb31d95cf4a9f389", "commitAfterChange": "09a76541b486383f4df376aea0572442ead3939f", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "  private void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding, ITypeAnnotationWalker externalAnnotationWalker)", "signatureAfterChange": "  private void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding, ITypeAnnotationWalker externalAnnotationWalker)", "diff": ["+\tif (isEnum()) {", "+\t\tint purpose = 0;", "+\t\tif (CharOperation.equals(TypeConstants.VALUEOF, method.getSelector())", "+\t\t\t\t&& methodBinding.parameters.length == 1", "+\t\t\t\t&& methodBinding.parameters[0].id == TypeIds.T_JavaLangString)", "+\t\t{", "+\t\t\tpurpose = SyntheticMethodBinding.EnumValueOf;", "+\t\t} else if (CharOperation.equals(TypeConstants.VALUES, method.getSelector())", "+\t\t\t\t&& methodBinding.parameters == Binding.NO_PARAMETERS) {", "+\t\t\tpurpose = SyntheticMethodBinding.EnumValues;", "+\t\t}", "+\t\tif (purpose != 0) {", "+\t\t\tboolean needToDefer = this.environment.globalOptions.useNullTypeAnnotations == null;", "+\t\t\tif (needToDefer)", "+\t\t\t\tthis.environment.deferredEnumMethods.add(methodBinding);", "+\t\t\telse", "+\t\t\t\tSyntheticMethodBinding.markNonNull(methodBinding, purpose, this.environment);", "+\t\t\treturn;", "+\t\t}", "+\t}"]}], "num": 44094}
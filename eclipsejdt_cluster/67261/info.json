{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f131ba3330debc54a48b7b2b4cf6526b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74360def9bd8a883063cfa5013a8bcc5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "3f794543520760b3c21d7281255cd32d43d0ba32", "commitAfterChange": "21ee6dd0e6561c99a896200dc015daa866a07928", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void _test010()", "signatureAfterChange": " public void _test010a()", "diff": ["-\t//https://bugs.eclipse.org/bugs/show_bug.cgi?id=121024", "-\tpublic void _test010() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"  \tinterface Listener {}\\n\" + ", "-\t\t\t\t\"  \tinterface ErrorListener {}\\n\" + ", "-\t\t\t\t\"  \tstatic <L1 extends Listener & ErrorListener> Object createParser(L1 l) { return null; }\\n\" + ", "-\t\t\t\t\"  \tstatic <L2 extends ErrorListener & Listener> Object createParser(L2 l) { return null; }\\n\" + ", "-\t\t\t\t\"   public static void main(String[] s) {\\n\" + ", "-\t\t\t\t\"   \tclass A implements Listener, ErrorListener {}\\n\" + ", "-\t\t\t\t\"   \tcreateParser(new A());\\n\" + ", "-\t\t\t\t\"   }\\n\" +", "-\t\t\t\t\"}\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" + ", "-\t\t\t\"\tstatic <L1 extends Listener & ErrorListener> Object createParser(L1 l) { return null; }\\r\\n\" + ", "-\t\t\t\"\t                                                    ^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method createParser(L1) has the same erasure createParser(X.Listener) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 5)\\r\\n\" + ", "-\t\t\t\"\tstatic <L2 extends ErrorListener & Listener> Object createParser(L2 l) { return null; }\\r\\n\" + ", "-\t\t\t\"\t                                                    ^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Method createParser(L2) has the same erasure createParser(X.ErrorListener) as another method in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 8)\\r\\n\" + ", "-\t\t\t\"\tcreateParser(new A());\\r\\n\" + ", "-\t\t\t\"\t^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method createParser(A) is undefined for the type X\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"  \tinterface Listener {}\\n\" + ", "-\t\t\t\t\"  \tinterface ErrorListener {}\\n\" + ", "-\t\t\t\t\"  \tstatic <L1 extends Listener> int createParser(L1 l) { return 1; }\\n\" + ", "-\t\t\t\t\"  \tstatic <L2 extends ErrorListener & Listener> int createParser(L2 l) { return 2; }\\n\" + ", "-\t\t\t\t\"   public static void main(String[] s) {\\n\" + ", "-\t\t\t\t\"   \tclass A implements Listener, ErrorListener {}\\n\" + ", "-\t\t\t\t\"   \tSystem.out.print(createParser(new A()));\\n\" + ", "-\t\t\t\t\"   }\\n\" +", "-\t\t\t\t\"}\"", "-\t\t\t},", "-\t\t\t\"2\"", "-\t\t);", "-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"  \tinterface Listener {}\\n\" + ", "-\t\t\t\t\"  \tinterface ErrorListener {}\\n\" + ", "-\t\t\t\t\"  \tstatic int createParser(Listener l) { return 1; }\\n\" + ", "-\t\t\t\t\"  \tstatic <L extends ErrorListener & Listener> int createParser(L l) { return 2; }\\n\" + ", "-\t\t\t\t\"   public static void main(String[] s) {\\n\" + ", "-\t\t\t\t\"   \tclass A implements Listener, ErrorListener {}\\n\" + ", "-\t\t\t\t\"   \tSystem.out.print(createParser(new A()));\\n\" + ", "-\t\t\t\t\"   }\\n\" +", "-\t\t\t\t\"}\"", "-\t\t\t},", "-\t\t\t\"2\"", "-\t\t);", "-\t}", "+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=121024", "+public void _test010a() {", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  \tinterface Listener {}\\n\" + ", "+\t\t\t\"  \tinterface ErrorListener {}\\n\" + ", "+\t\t\t\"  \tstatic <L1 extends Listener & ErrorListener> Object createParser(L1 l) { return null; }\\n\" + ", "+\t\t\t\"  \tstatic <L2 extends ErrorListener & Listener> Object createParser(L2 l) { return null; }\\n\" + ", "+\t\t\t\"   public static void main(String[] s) {\\n\" + ", "+\t\t\t\"   \tclass A implements Listener, ErrorListener {}\\n\" + ", "+\t\t\t\"   \tcreateParser(new A());\\n\" + ", "+\t\t\t\"   }\\n\" +", "+\t\t\t\"}\"", "+\t\t},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 4)\\r\\n\" + ", "+\t\t\"\tstatic <L1 extends Listener & ErrorListener> Object createParser(L1 l) { return null; }\\r\\n\" + ", "+\t\t\"\t                                                    ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method createParser(L1) has the same erasure createParser(X.Listener) as another method in type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 5)\\r\\n\" + ", "+\t\t\"\tstatic <L2 extends ErrorListener & Listener> Object createParser(L2 l) { return null; }\\r\\n\" + ", "+\t\t\"\t                                                    ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Method createParser(L2) has the same erasure createParser(X.ErrorListener) as another method in type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 8)\\r\\n\" + ", "+\t\t\"\tcreateParser(new A());\\r\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^\\n\" + ", "+\t\t\"The method createParser(A) is undefined for the type X\\n\" + ", "+\t\t\"----------\\n\"", "+\t);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a81d7a2527379055baf9bed80eaa8c56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "0e160bd57ca4572e4cc317f77eef59eff0c912a6", "commitAfterChange": "1b0238cbdda2702f17c4f0b30e4c8493818f8888", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void test011()", "signatureAfterChange": " \tpublic void test011()", "diff": ["-\t\tthis.runConformTest(", "+\t\tthis.runNegativeTest(", "-\t\t\t\t\"public class X<A, B> extends Y<A> {\\n\" + ", "-\t\t\t\t\"  \t<T extends Number> void foo(Number n, T t) throws ExOne {}\\n\" + ", "-\t\t\t\t\"   void test(X<Integer,Integer> c) throws ExTwo { c.foo(new Integer(1), new Integer(2)); }\\n\" +", "+\t\t\t\t\"public class X<A extends Number> extends Y<A> {\\n\" + ", "+\t\t\t\t\"\t<T> void foo(A n, T t) throws ExOne {}\\n\" + ", "+\t\t\t\t\"\tvoid test(X<Integer> x) throws ExTwo { x.foo(new Integer(1), new Integer(2)); }\\n\" +", "+\t\t\t\t\"\tvoid test2(X x) throws ExTwo { x.foo(new Integer(1), new Integer(2)); }\\n\" +", "-\t\t\t\t\"class Y<C> {\\n\" + ", "-\t\t\t\t\"   void foo(Number x, C n) throws ExTwo {}\\n\" +", "+\t\t\t\t\"class Y<C extends Number> {\\n\" + ", "+\t\t\t\t\"\tvoid foo(C x, C n) throws ExTwo {}\\n\" +", "+\t\t\t\t\"class ExOne extends Exception {static final long serialVersionUID = 1;}\\n\" +", "+\t\t\t\t\"class ExTwo extends Exception {static final long serialVersionUID = 2;}\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tvoid test2(X x) throws ExTwo { x.foo(new Integer(1), new Integer(2)); }\\n\" + ", "+\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<A> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tvoid test2(X x) throws ExTwo { x.foo(new Integer(1), new Integer(2)); }\\n\" + ", "+\t\t\t\"\t                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The method foo(Number, Number) belongs to the raw type Y. References to generic type Y<C> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t// test2 - warning: [unchecked] unchecked call to foo(C,C) as a member of the raw type Y", "+\t\t);", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"Combined.java\",", "+\t\t\t\t\"public class Combined<A, B> {\\n\" + ", "+\t\t\t\t\"\t<T extends Comparable<T>> void pickOne(T value) throws ExOne {}\\n\" + ", "+\t\t\t\t\"\t<T> T pickOne(Comparable<T> value) throws ExTwo { return null;}\\n\" + ", "+\t\t\t\t\"\tvoid pickOne(Combined<Integer,Integer> c) throws ExOne { c.pickOne(\\\"test\\\"); }\\n\" + ", "+\t\t\t\t\"\t<T extends Number> void pickTwo(Number n, T t) throws ExOne {}\\n\" + ", "+\t\t\t\t\"\tvoid pickTwo(A x, Number n) throws ExTwo {}\\n\" + ", "+\t\t\t\t\"\tvoid pickTwo(Combined<Integer,Integer> c) throws ExTwo { c.pickTwo(new Integer(1), 2); }\\n\" +", "+\t\t\t\t\"}\\n\" +", "-//\t\tthis.runConformTest(", "-//\t\t\tnew String[] {", "-//\t\t\t\t\"Combined.java\",", "-//\t\t\t\t\"public class Combined<A, B> {\\n\" + ", "-//\t\t\t\t\"  \t<T extends Comparable<T>> void pickOne(T value) throws ExOne {}\\n\" + ", "-//\t\t\t\t\"  \t<T> T pickOne(Comparable<T> value) throws ExTwo { return null;}\\n\" + ", "-//\t\t\t\t\"  \tvoid pickOne(Combined<Integer,Integer> c) throws ExOne { c.pickOne(\\\"test\\\"); }\\n\" + ", "-//\t\t\t\t\"  \t<T extends Number> void pickTwo(Number n, T t) throws ExOne {}\\n\" + ", "-//\t\t\t\t\"   void pickTwo(A x, Number n) throws ExTwo {}\\n\" + ", "-//\t\t\t\t\"   void pickTwo(Combined<Integer,Integer> c) throws ExTwo { c.pickTwo(new Integer(1), 2); }\\n\" +", "-//\t\t\t\t\"}\\n\" +", "-//\t\t\t\t\"class ExOne extends Exception {static final long serialVersionUID = 1;}\\n\" +", "-//\t\t\t\t\"class ExTwo extends Exception {static final long serialVersionUID = 2;}\"", "-//\t\t\t},", "-//\t\t\t\"\"", "-//\t\t);", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"Test1.java\",", "+\t\t\t\t\"public class Test1<AA, BB> {\\n\" +", "+\t\t\t\t\"\t<T extends Comparable<T>> void pickOne(T value) throws ExOne {}\\n\" +", "+\t\t\t\t\"\t<T> T pickOne(Comparable<T> value) throws ExTwo { return null;}\\n\" +", "+\t\t\t\t\"\tvoid pickOne2(Test1<Integer,Integer> c) throws ExOne { c.pickOne((Comparable) \\\"test\\\"); }\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class ExOne extends Exception {static final long serialVersionUID = 1;}\\n\" +", "+\t\t\t\t\"class ExTwo extends Exception {static final long serialVersionUID = 2;}\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in Test1.java (at line 4)\\n\" + ", "+\t\t\t\"\tvoid pickOne2(Test1<Integer,Integer> c) throws ExOne { c.pickOne((Comparable) \\\"test\\\"); }\\n\" + ", "+\t\t\t\"\t                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation pickOne(Comparable) of the generic method pickOne(T) of type Test1<Integer,Integer>\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);"]}], "num": 67261}
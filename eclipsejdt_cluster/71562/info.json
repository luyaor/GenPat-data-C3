{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e58bbb5eddf658855b21feae0e86ade4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "173c010fe987498a80c4ae9fed4a0d01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "6486279fd39d7600a3c581a75f5a979b2834ec56", "commitAfterChange": "ec093de0c723a8394ab4c83656f6e94579a11225", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void tearDownSuite() throws Exception", "signatureAfterChange": " public void tearDownSuite() throws Exception", "diff": ["-\tSystem.out.println();", "+\tStringBuffer buffer = new StringBuffer(LINE_SEPARATOR);", "-\t\t\tSystem.out.print(size);", "-\t\t\tSystem.out.print(\" file\");", "+\t\t\tbuffer.append(size);", "+\t\t\tbuffer.append(\" file\");", "-\t\t\t\tSystem.out.print(\" has \");", "+\t\t\t\tbuffer.append(\" has \");", "-\t\t\t\tSystem.out.print(\"s have \");", "+\t\t\t\tbuffer.append(\"s have \");", "-\t\t\tSystem.out.print(FAILURES[i]);", "-\t\t\tSystem.out.println('!');", "+\t\t\tbuffer.append(FAILURES[i]);", "+\t\t\tbuffer.append('!');", "+\t\t\tbuffer.append(LINE_SEPARATOR);", "-\tSystem.out.println();", "+\tbuffer.append(LINE_SEPARATOR);", "-\t\t\tSystem.out.println(\"List of file(s) with \"+FAILURES[i]+\":\");", "+\t\t\tbuffer.append(\"List of file(s) with \");", "+\t\t\tbuffer.append(FAILURES[i]);", "+\t\t\tbuffer.append(':');", "+\t\t\tbuffer.append(LINE_SEPARATOR);", "-\t\t\t\tSystem.out.println(\"\t- \"+failures.get(j));", "+\t\t\t\tbuffer.append(\"\t- \");", "+\t\t\t\tbuffer.append(failures.get(j));", "+\t\t\t\tbuffer.append(LINE_SEPARATOR);", "+", "+\t// Log failures", "+\tif (LOG_STREAM == null) {", "+\t\tSystem.out.println(buffer.toString());", "+\t} else {", "+\t\tLOG_STREAM.print(buffer.toString());", "+\t\tLOG_STREAM.close();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20080eff461aaa279287a75967e86188", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "48b439005b4e27b9edf7ac75008df6663dca3609", "commitAfterChange": "db94ada762c25cbafb7604978ccc4fc3df281550", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public static Test suite()", "signatureAfterChange": "  public static Test suite()", "diff": ["-\t            return pathname.isDirectory() || pathname.getPath().endsWith(\".java\");", "+\t\t\t\tString path = pathname.getPath();", "+\t\t\t\tboolean accept = pathname.isDirectory() || path.endsWith(\".java\");", "+\t\t\t\tif (accept) {", "+\t\t\t\t\tswitch (FILES_FILTER_KIND) {", "+\t\t\t\t\t\tcase 1: // Equals", "+\t\t\t\t\t\t\taccept = path.equals(FILES_FILTER);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase 2: // Starts with", "+\t\t\t\t\t\t\taccept = path.startsWith(FILES_FILTER);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase 3: // Starts with + same length", "+\t\t\t\t\t\t\taccept = path.startsWith(FILES_FILTER) && path.length() == FILES_FILTER.length();", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase 4: // Pattern", "+\t\t\t\t\t\t\taccept = path.matches(FILES_FILTER);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn accept;", "-\t\tbuffer.append(\"Comparison: \"+CAN_COMPARE);", "-\t\tbuffer.append(LINE_SEPARATOR);", "+\t\tbuffer.append(\"Compare vs: \");", "+\t\tif (CAN_COMPARE) {", "+\t\t\tif (clean) {", "+\t\t\t\tbuffer.append(JDT_CORE_VERSION);", "+\t\t\t} else {", "+\t\t\t\tFile versionFile = new File(OUTPUT_DIR, \"version.txt\");", "+\t\t\t\tif (versionFile.exists()) {", "+\t\t\t\t\tbuffer.append(Util.fileContent(versionFile.getAbsolutePath()));", "+\t\t\t\t} else {", "+\t\t\t\t\tbuffer.append(\"???\");", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tbuffer.append(\"none\");", "+\t\t}", "+//\t\tbuffer.append(LINE_SEPARATOR);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5abf00faa80691d1580efcece8b45c72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "1209010fd2d01b73be2d5ddcc68dee954a4dfb12", "commitAfterChange": "e2d64401ee163038583789c4f8e64653502b280a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r \tpublic FlowInfo analyseAssignment(\r \t\tBlockScope currentScope,\r \t\tFlowContext flowContext,\r \t\tFlowInfo flowInfo,\r \t\tAssignment assignment,\r \t\tboolean isCompound)", "signatureAfterChange": "\r \tpublic FlowInfo analyseAssignment(\r \t\tBlockScope currentScope,\r \t\tFlowContext flowContext,\r \t\tFlowInfo flowInfo,\r \t\tAssignment assignment,\r \t\tboolean isCompound)", "diff": ["-\r", "-\r", "-\t\t\t\t\tmanageSyntheticReadAccessIfNecessary(currentScope, lastFieldBinding, i);\r", "+\t\t\t\t\tTypeBinding lastReceiverType;\r", "+\t\t\t\t\tswitch(i){\r", "+\t\t\t\t\t\tcase 0 :\r", "+\t\t\t\t\t\t\tlastReceiverType = this.actualReceiverType;\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase 1 :\r", "+\t\t\t\t\t\t\tlastReceiverType = ((VariableBinding)binding).type;\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tdefault :\r", "+\t\t\t\t\t\t\tlastReceiverType = otherBindings[i-1].type;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tmanageSyntheticReadAccessIfNecessary(\r", "+\t\t\t\t\t\tcurrentScope, \r", "+\t\t\t\t\t\tlastFieldBinding, \r", "+\t\t\t\t\t\tlastReceiverType,\r", "+\t\t\t\t\t\ti);\r", "+\t\t\tTypeBinding lastReceiverType;\r", "+\t\t\tif (lastFieldBinding == binding){\r", "+\t\t\t\tlastReceiverType = this.actualReceiverType;\r", "+\t\t\t} else if (otherBindingsCount == 1){\r", "+\t\t\t\tlastReceiverType = ((VariableBinding)this.binding).type;\r", "+\t\t\t} else {\r", "+\t\t\t\tlastReceiverType = this.otherBindings[otherBindingsCount-2].type;\r", "+\t\t\t}\r", "-\t\t\t\tbinding == lastFieldBinding ? 0 : otherBindings.length);\r", "+\t\t\t\tlastReceiverType,\r", "+\t\t\t\tlastFieldBinding == binding\r", "+\t\t\t\t\t? 0 \r", "+\t\t\t\t\t: otherBindingsCount);\r", "-\t\tmanageSyntheticWriteAccessIfNecessary(currentScope, lastFieldBinding);\r", "+\t\tTypeBinding lastReceiverType;\r", "+\t\tif (lastFieldBinding == binding){\r", "+\t\t\tlastReceiverType = this.actualReceiverType;\r", "+\t\t} else if (otherBindingsCount == 1){\r", "+\t\t\tlastReceiverType = ((VariableBinding)this.binding).type;\r", "+\t\t} else {\r", "+\t\t\tlastReceiverType = this.otherBindings[otherBindingsCount-2].type;\r", "+\t\t}\r", "+\t\tmanageSyntheticWriteAccessIfNecessary(currentScope, lastFieldBinding, lastReceiverType);\r", "+\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8916635cad388354eb239578c0b2f65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "6486279fd39d7600a3c581a75f5a979b2834ec56", "commitAfterChange": "ec093de0c723a8394ab4c83656f6e94579a11225", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public static Test suite()", "signatureAfterChange": "  public static Test suite()", "diff": ["+", "-\t\tinitVersion();", "-\t\tinitProfiles();", "+\t\t// Init version", "+\t\tStringBuffer buffer = new StringBuffer();", "+\t\tinitVersion(buffer);", "+\t\t", "+\t\t// Init profiles", "+\t\tinitProfiles(buffer);", "+", "+\t\t// Log date of test", "+\t\tlong start = System.currentTimeMillis();", "+\t\tSimpleDateFormat format = new SimpleDateFormat();", "+\t\tDate now = new Date(start);", "+\t\tbuffer.append(\"Test date : \");", "+\t\tbuffer.append(format.format(now));", "+\t\tbuffer.append(LINE_SEPARATOR);", "+", "+\t\t// Get input dir", "+\t\tbuffer.append(\"Input dir : \");", "+\t\tbuffer.append(INPUT_DIR);", "+\t\tbuffer.append(LINE_SEPARATOR);", "+", "+\t\t// Output to console to show startup", "+\t\tString firstBuffer = buffer.toString();", "+\t\tSystem.out.println(firstBuffer);", "+\t\tbuffer.setLength(0);", "+", "+\t\t// Get files from input dir", "-\t\tlong start = System.currentTimeMillis();", "-\t\tSimpleDateFormat format = new SimpleDateFormat();", "-\t\tDate now = new Date(start);", "-\t\tSystem.out.println(\"Test date : \"+format.format(now));", "-\t\tSystem.out.println(\"Input dir : \"+INPUT_DIR);", "-\t\tSystem.out.println(\"            \"+length+\" java files found\");", "-\t\tboolean clean = initDirectories();", "-\t\tSystem.out.println(\"Comparison: \"+CAN_COMPARE);", "+\t\tbuffer.append(\"            \");", "+\t\tbuffer.append(length);", "+\t\tbuffer.append(\" java files found\");", "+\t\tbuffer.append(LINE_SEPARATOR);", "+", "+\t\t// Init directories", "+\t\tboolean clean = initDirectories(buffer);", "+\t\tbuffer.append(\"Comparison: \"+CAN_COMPARE);", "+\t\tbuffer.append(LINE_SEPARATOR);", "+", "+\t\t// Write logs", "+\t\tSystem.out.println(buffer.toString());", "+\t\tif (LOG_STREAM != null) {", "+\t\t\tLOG_STREAM.println(firstBuffer);", "+\t\t\tLOG_STREAM.println(buffer.toString());", "+\t\t\tLOG_STREAM.flush();", "+\t\t}", "+\t\t", "+\t\t// Add tests to clean the output directory and rebuild the references", "+\t\t", "+\t\t// Add one test per found file"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb4fbfcddbe487e623dddc45d2d17c6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "124dd88225a5a14f52eb2599c64569ad41838fe8", "commitAfterChange": "168c23a22b63928342eea63e0cfb70339ac9c9f4", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic String getQualifiedName()", "signatureAfterChange": " \tpublic String getQualifiedName()", "diff": ["-\t */", "-\tpublic String getQualifiedName() {", "-\t\tif (isAnonymous() || isLocal()) {", "-\t\t\treturn NO_NAME;", "-\t\t}", "-\t\t", "-\t\tif (isPrimitive() || isNullType()) {", "-\t\t\treturn getName();", "-\t\t}", "-\t\t", "-\t\tif (isArray()) {", "-\t\t\tITypeBinding elementType = getElementType();", "-\t\t\tString elementTypeQualifiedName = elementType.getQualifiedName();", "-\t\t\tif (elementTypeQualifiedName.length() != 0) {", "-\t\t\t\tint dimensions = this.getDimensions();", "-\t\t\t\tchar[] brackets = new char[dimensions * 2];", "-\t\t\t\tfor (int i = dimensions * 2 - 1; i >= 0; i -= 2) {", "-\t\t\t\t\tbrackets[i] = ']';", "-\t\t\t\t\tbrackets[i - 1] = '[';", "-\t\t\t\t}", "-\t\t\t\tStringBuffer stringBuffer = new StringBuffer(elementTypeQualifiedName);", "-\t\t\t\tstringBuffer.append(brackets);", "-\t\t\t\treturn stringBuffer.toString();", "-\t\t\t} else {", "-\t\t\t\treturn NO_NAME;", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tif (this.isTypeVariable()) {", "-\t\t\treturn new String(this.binding.sourceName());\t\t\t", "-\t\t}", "-\t\t", "-\t\tif (isTopLevel() || isMember()) {", "-\t\t\tPackageBinding packageBinding = this.binding.getPackage();", "-\t\t\t", "-\t\t\tif (packageBinding == null || packageBinding.compoundName == CharOperation.NO_CHAR_CHAR) {", "-\t\t\t\treturn new String(this.binding.qualifiedSourceName());", "-\t\t\t} else {", "-\t\t\t\tStringBuffer stringBuffer = new StringBuffer();", "-\t\t\t\tstringBuffer", "-\t\t\t\t\t.append(this.binding.qualifiedPackageName())", "-\t\t\t\t\t.append('.')", "-\t\t\t\t\t.append(this.binding.qualifiedSourceName());", "-\t\t\t\treturn stringBuffer.toString();", "-\t\t\t}", "-\t\t}", "-\t\treturn NO_NAME;", "-\t}", "+\t */", "+\tpublic String getQualifiedName() {", "+\t\tif (isAnonymous() || isLocal()) {", "+\t\t\treturn NO_NAME;", "+\t\t}", "+\t\t", "+\t\tif (isPrimitive() || isNullType() || this.isTypeVariable()) {", "+\t\t\treturn new String(this.binding.sourceName());", "+\t\t}", "+\t\t", "+\t\tif (isArray()) {", "+\t\t\tITypeBinding elementType = getElementType();", "+\t\t\tString elementTypeQualifiedName = elementType.getQualifiedName();", "+\t\t\tif (elementTypeQualifiedName.length() != 0) {", "+\t\t\t\tint dimensions = this.getDimensions();", "+\t\t\t\tchar[] brackets = new char[dimensions * 2];", "+\t\t\t\tfor (int i = dimensions * 2 - 1; i >= 0; i -= 2) {", "+\t\t\t\t\tbrackets[i] = ']';", "+\t\t\t\t\tbrackets[i - 1] = '[';", "+\t\t\t\t}", "+\t\t\t\tStringBuffer stringBuffer = new StringBuffer(elementTypeQualifiedName);", "+\t\t\t\tstringBuffer.append(brackets);", "+\t\t\t\treturn stringBuffer.toString();", "+\t\t\t} else {", "+\t\t\t\treturn NO_NAME;", "+\t\t\t}", "+\t\t}", "+\t\tif (isTopLevel() || isMember()) {", "+\t\t\tPackageBinding packageBinding = this.binding.getPackage();", "+\t\t\t", "+\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\tif (isWildcardType()) {", "+\t\t\t\tbuffer.append(TypeConstants.WILDCARD_NAME);", "+\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) this.binding;", "+\t\t\t\tif (wildcardBinding.bound != null) {", "+\t\t\t\t\tswitch(wildcardBinding.kind) {", "+\t\t\t\t\t\tcase Wildcard.SUPER :", "+\t\t\t\t\t\t\tbuffer.append(TypeConstants.WILDCARD_SUPER);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard.EXTENDS :", "+\t\t\t\t\t\t\tbuffer.append(TypeConstants.WILDCARD_EXTENDS);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tbuffer.append(getBound().getQualifiedName());\t\t\t\t", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif (packageBinding != null && packageBinding.compoundName != CharOperation.NO_CHAR_CHAR) {", "+\t\t\t\t\tbuffer.append(packageBinding.readableName()).append('.');", "+\t\t\t\t}", "+\t\t\t\tbuffer.append(this.binding.qualifiedSourceName());", "+\t\t\t\tif (!isRawType()) {", "+\t\t\t\t\t// only one of the type parameters or type arguments is non-empty at the same time", "+\t\t\t\t\tappendQualifiedTypeParameters(buffer, getTypeParameters());", "+\t\t\t\t\tappendQualifiedTypeArguments(buffer, getTypeArguments());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn String.valueOf(buffer);", "+\t\t}", "+\t\treturn NO_NAME;", "+\t}"]}], "num": 71562}
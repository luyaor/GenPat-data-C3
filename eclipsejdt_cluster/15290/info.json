{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "140ec9a09ef44ce3f04fa4051672e2b4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e818ab2520190c2167bf26de53a6217", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "0b147b41fd14622e58b9abe70d023e6b22dcfbf7", "commitAfterChange": "224ac51338df376ffd0a9a55fd7c92d9e76b9040", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public static SearchPattern createPattern(IJavaElement element, int limitTo)", "signatureAfterChange": "\r public static SearchPattern createPattern(IJavaElement element, int limitTo)", "diff": ["+\t\t\tlastDot = elementName.lastIndexOf('.');\r", "+\t\t\tif (lastDot == -1) return null; // invalid import declaration\r", "-\t\t\t\tlastDot = elementName.lastIndexOf('.');\r", "-\t\t\t\tif (lastDot == -1) return null; // invalid import declaration\r", "-\t\t\t\tsearchPattern = createTypePattern(elementName, limitTo);\r", "+\t\t\t\tsearchPattern = \r", "+\t\t\t\t\tcreateTypePattern(\r", "+\t\t\t\t\t\telementName.substring(lastDot+1).toCharArray(),\r", "+\t\t\t\t\t\telementName.substring(0, lastDot).toCharArray(),\r", "+\t\t\t\t\t\tnull,\r", "+\t\t\t\t\t\tlimitTo);\r", "-\t\t\tIType type = (IType) element;\r", "-\t\t\tString packageName = type.getPackageFragment().getElementName();\r", "-\t\t\tString fullyQualifiedName = packageName + \".\" + type.getTypeQualifiedName(); //$NON-NLS-1$\r", "-\t\t\t// NB: if default package, the fully qualified name as to be \".X\" so that createTypePattern(String) creates a pattern with the NO_CHAR qualification\r", "-\t\t\tsearchPattern = createTypePattern(fullyQualifiedName, limitTo);\r", "+\t\t\tIType type = (IType)element;\r", "+\t\t\tsearchPattern = \r", "+\t\t\t\tcreateTypePattern(\r", "+\t\t\t\t\ttype.getElementName().toCharArray(), \r", "+\t\t\t\t\ttype.getPackageFragment().getElementName().toCharArray(),\r", "+\t\t\t\t\tenclosingTypeNames(type),\r", "+\t\t\t\t\tlimitTo);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca7f1332d585a1edd7ee5ec05d1267e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "ddf80b216aaeeb63df2dec65761d52d77888f5cf", "commitAfterChange": "c9b8ab8a73185ada2681354e86cf0e336ff01c8d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public static SearchPattern createPattern(IJavaElement element, int limitTo)", "signatureAfterChange": "\r public static SearchPattern createPattern(IJavaElement element, int limitTo)", "diff": ["-\t\t\tString fullDeclaringName = field.getDeclaringType().getFullyQualifiedName().replace('$', '.');;\r", "+\t\t\tString fullDeclaringName = field.getDeclaringType().getFullyQualifiedName().replace('$', '.');\r", "-\t\t\tsearchPattern = createTypePattern(type.getFullyQualifiedName(), limitTo);\r", "+\t\t\tString packageName = type.getPackageFragment().getElementName();\r", "+\t\t\tString fullyQualifiedName = packageName + \".\" + type.getTypeQualifiedName(); // NB: if default package, the fully qualified name as to be \".X\" so that createTypePattern(String) creates a pattern with the NO_CHAR qualification\r", "+\t\t\tsearchPattern = createTypePattern(fullyQualifiedName, limitTo);\r"]}], "num": 15290}
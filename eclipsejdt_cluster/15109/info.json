{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca5edbc2de1ec1291e58a44cef173572", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cf7f09bc0c3a313d5e82ad7a018fe64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "2a762b85f858691a63d4547af177cc649d7b1329", "commitAfterChange": "7675c409a4b3b1e15b1cc476a0a66b988b5fb4a0", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "\r \t\tpublic IClasspathEntry[] getResolvedClasspath(\r \t\t\tboolean ignoreUnresolvedVariable,\r \t\t\tboolean generateMarkerOnError)\r \t\t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic IClasspathEntry[] getResolvedClasspath(\r \t\tboolean ignoreUnresolvedEntry,\r \t\tboolean generateMarkerOnError)\r \t\tthrows JavaModelException", "diff": ["-\t\t */\r", "-\t\tpublic IClasspathEntry[] getResolvedClasspath(\r", "-\t\t\tboolean ignoreUnresolvedVariable,\r", "-\t\t\tboolean generateMarkerOnError)\r", "-\t\t\tthrows JavaModelException {\r", "+\t */\r", "+\tpublic IClasspathEntry[] getResolvedClasspath(\r", "+\t\tboolean ignoreUnresolvedEntry,\r", "+\t\tboolean generateMarkerOnError)\r", "+\t\tthrows JavaModelException {\r", "+\r", "+\t\tJavaProjectElementInfo projectInfo;\r", "+\t\tif (this.isOpen()){\r", "+\t\t\tprojectInfo = getJavaProjectElementInfo();\r", "+\t\t} else {\r", "+\t\t\t// avoid populating the model for only retrieving the resolved classpath (13395)\r", "+\t\t\tprojectInfo = null;\r", "+\t\t}\r", "+\t\t\r", "+\t\t// reuse cache if not needing to refresh markers or checking bound variables\r", "+\t\tif (ignoreUnresolvedEntry && !generateMarkerOnError && projectInfo != null){\r", "+\t\t\t// resolved path is cached on its info\r", "+\t\t\tIClasspathEntry[] infoPath = projectInfo.lastResolvedClasspath;\r", "+\t\t\tif (infoPath != null) return infoPath;\r", "+\t\t}\r", "+\r", "+\t\tIClasspathEntry[] resolvedPath = getResolvedClasspath(getRawClasspath(), ignoreUnresolvedEntry, generateMarkerOnError);\r", "+\r", "+\t\tif (projectInfo != null){\r", "+\t\t\tprojectInfo.lastResolvedClasspath = resolvedPath;\r", "+\t\t}\r", "+\t\treturn resolvedPath;\r", "+\t}\r", "-\t\t\tJavaProjectElementInfo projectInfo;\r", "-\t\t\tif (this.isOpen()){\r", "-\t\t\t\tprojectInfo = getJavaProjectElementInfo();\r", "-\t\t\t} else {\r", "-\t\t\t\t// avoid populating the model for only retrieving the resolved classpath (13395)\r", "-\t\t\t\tprojectInfo = null;\r", "-\t\t\t\r", "-\t\t\t// reuse cache if not needing to refresh markers or checking bound variables\r", "-\t\t\tif (ignoreUnresolvedVariable && !generateMarkerOnError && (projectInfo != null)){\r", "-\t\t\t\t// resolved path is cached on its info\r", "-\t\t\t\tIClasspathEntry[] infoPath = projectInfo.lastResolvedClasspath;\r", "-\t\t\t\tif (infoPath != null) return infoPath;\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\tIClasspathEntry[] classpath = getRawClasspath();\r", "-\t\r", "-\t\t\tif (generateMarkerOnError){\r", "-\t\t\t\tflushClasspathProblemMarkers(false);\r", "-\t\t\t}\r", "-\t\r", "-\t\t\tIClasspathEntry[] resolvedPath = classpath; // clone only if necessary\r", "-\t\t\tint length = classpath.length;\r", "-\t\t\tint index = 0;\r", "-\t\r", "-\t\t\tfor (int i = 0; i < length; i++) {\r", "-\t\r", "-\t\t\t\tIClasspathEntry entry = classpath[i];\r", "-\t\r", "-\t\t\t\t/* validation if needed */\r", "-\t\t\t\tif (generateMarkerOnError) {\r", "-\t\t\t\t\tIJavaModelStatus status =\r", "-\t\t\t\t\t\tJavaConventions.validateClasspathEntry(this, entry, false);\r", "-\t\t\t\t\tif (!status.isOK())\r", "-\t\t\t\t\t\tcreateClasspathProblemMarker(\r", "-\t\t\t\t\t\t\tstatus.getMessage(), \r", "-\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,\r", "-\t\t\t\t\t\t\tfalse);\r", "-\t\t\t\t}\r", "-\t\r", "-\t\t\t\t/* resolve variables if any, unresolved ones are ignored */\r", "-\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_VARIABLE) {\r", "-\t\r", "-\t\t\t\t\t// clone original path\r", "-\t\t\t\t\tif (resolvedPath == classpath) {\r", "-\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\tclasspath,\r", "-\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\tresolvedPath = new IClasspathEntry[length],\r", "-\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\ti);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\t// resolve current variable (handling variable->variable->variable->entry\r", "-\t\t\t\t\tIPath variablePath = entry.getPath(); // for error reporting\r", "-\t\t\t\t\tentry = JavaCore.getResolvedClasspathEntry(entry);\r", "-\t\t\t\t\tif (entry == null) {\r", "-\t\t\t\t\t\tif (!ignoreUnresolvedVariable) {\r", "-\t\t\t\t\t\t\t\t\tvariablePath.toString()));\r", "-\t\t\t\t}\r", "-\t\t\t\tif (entry != null) {\r", "-\t\t\t\t\tresolvedPath[index++] = entry;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\r", "-\t\t\t// resize resolved classpath in case some variable entries could not be resolved\r", "-\t\t\tif (index != length) {\r", "-\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\tresolvedPath,\r", "-\t\t\t\t\t0,\r", "-\t\t\t\t\tresolvedPath = new IClasspathEntry[index],\r", "-\t\t\t\t\t0,\r", "-\t\t\t\t\tindex);\r", "-\t\t\t}\r", "-\t\t\tif (projectInfo != null){\r", "-\t\t\t\tprojectInfo.lastResolvedClasspath = resolvedPath;\r", "-\t\t\t}\r", "-\t\t\treturn resolvedPath;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9c875bc7e58fc06dd60bd8c2f8f3c2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "e980bec51b1b659da189c52a214379978c34468e", "commitAfterChange": "9f038d058d2bda926136df66ffdae620fcaf8616", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "signatureAfterChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "diff": ["-\t\tIEclipsePreferences preferences = getInstancePreferences();", "-\t\ttry {", "-\t\t\t// only get variable from preferences not set to their default", "-\t\t\tString[] propertyNames = preferences.keys();", "-\t\t\tint variablePrefixLength = CP_VARIABLE_PREFERENCES_PREFIX.length();", "-\t\t\tfor (int i = 0; i < propertyNames.length; i++){", "-\t\t\t\tString propertyName = propertyNames[i];", "-\t\t\t\tif (propertyName.startsWith(CP_VARIABLE_PREFERENCES_PREFIX)){", "-\t\t\t\t\tString varName = propertyName.substring(variablePrefixLength);", "-\t\t\t\t\tString propertyValue = preferences.get(propertyName, null);", "-\t\t\t\t\tif (propertyValue != null) {", "-\t\t\t\t\t\tString pathString = propertyValue.trim();", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tif (CP_ENTRY_IGNORE.equals(pathString)) {", "-\t\t\t\t\t\t\t// cleanup old preferences", "-\t\t\t\t\t\t\tpreferences.remove(propertyName); ", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// add variable to table", "-\t\t\t\t\t\tIPath varPath = new Path(pathString);", "-\t\t\t\t\t\tthis.variables.put(varName, varPath); ", "-\t\t\t\t\t\tthis.previousSessionVariables.put(varName, varPath);", "-\t\t\t\t\t}", "-\t\t\t\t} else if (propertyName.startsWith(CP_CONTAINER_PREFERENCES_PREFIX)){", "-\t\t\t\t\tString propertyValue = preferences.get(propertyName, null);", "-\t\t\t\t\tif (propertyValue != null) {", "-\t\t\t\t\t\t// cleanup old preferences", "-\t\t\t\t\t\tpreferences.remove(propertyName); ", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// recreate container", "-\t\t\t\t\t\trecreatePersistedContainer(propertyName, propertyValue, true/*add to container values*/);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (BackingStoreException e1) {", "-\t\t\t// TODO (frederic) see if it's necessary to report this failure...", "-\t\t}", "+\t\tloadVariablesAndContainers(getDefaultPreferences());", "+\t\tloadVariablesAndContainers(getInstancePreferences());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb523df4b62f67dfd731e9fe39166fd0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchParticipant.java", "commitBeforeChange": "a9c68df97efd734f3ed326f5e99e4d21e6054bec", "commitAfterChange": "af2f21c145913c8a7ccf22989ee905c5f5c7dd0d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void locateMatches(SearchDocument[] indexMatches, SearchPattern pattern, \t\t\tIJavaSearchScope scope, SearchRequestor requestor, IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic void locateMatches(SearchDocument[] indexMatches, SearchPattern pattern, \t\t\tIJavaSearchScope scope, SearchRequestor requestor, IProgressMonitor monitor) throws CoreException", "diff": ["-\t\t\t\tthis.workingCopies,", "-\t\t// working copies take precedence over corresponding compilation units", "-\t\tHashMap workingCopyDocuments = workingCopiesThatCanSeeFocus(pattern.focus, pattern.isPolymorphicSearch());", "-\t\tSearchDocument[] matches = null;", "-\t\tint length = indexMatches.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tSearchDocument searchDocument = indexMatches[i];", "-\t\t\tif (searchDocument.getParticipant() == this) {", "-\t\t\t\tSearchDocument workingCopyDocument = (SearchDocument) workingCopyDocuments.remove(searchDocument.getPath());", "-\t\t\t\tif (workingCopyDocument != null) {", "-\t\t\t\t\tif (matches == null) {", "-\t\t\t\t\t\tSystem.arraycopy(indexMatches, 0, matches = new SearchDocument[length], 0, length);", "-\t\t\t\t\t}", "-\t\t\t\t\tmatches[i] = workingCopyDocument;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (matches == null) { // no working copy", "-\t\t\tmatches = indexMatches;", "-\t\t}", "-\t\tint remainingWorkingCopiesSize = workingCopyDocuments.size();", "-\t\tif (remainingWorkingCopiesSize != 0) {", "-\t\t\tSystem.arraycopy(matches, 0, matches = new SearchDocument[length+remainingWorkingCopiesSize], 0, length);", "-\t\t\tIterator iterator = workingCopyDocuments.values().iterator();", "-\t\t\tint index = length;", "-\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\tmatches[index++] = (SearchDocument) iterator.next();", "-\t\t\t}", "-\t\t}", "-", "-\t\tmatchLocator.locateMatches(matches);", "+\t\tmatchLocator.locateMatches(indexMatches);"]}], "num": 15109}
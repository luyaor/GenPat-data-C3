{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e0783783398f9b419364b723c01a7a8", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51308ef7318ec855f09f87d3c7aae681", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultCommentMapper.java", "commitBeforeChange": "fe16fe907972b2b0368c7cfd0298f309b98902c7", "commitAfterChange": "dc6e426600c06cd88dd174580a09881117be9e03", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tint storeTrailingComments(ASTNode node, int nextStart,  boolean lastChild)", "signatureAfterChange": " \tint storeTrailingComments(ASTNode node, int nextStart,  boolean lastChild)", "diff": ["-\t\t\t\tthis.trailingIndexes = new int[STORAGE_INCREMENT][];", "+\t\t\t\tthis.trailingIndexes = new long[STORAGE_INCREMENT];", "-\t\t\t\tSystem.arraycopy(this.trailingIndexes, 0, this.trailingIndexes = new int[newLength][], 0, this.trailingPtr);", "+\t\t\t\tSystem.arraycopy(this.trailingIndexes, 0, this.trailingIndexes = new long[newLength], 0, this.trailingPtr);", "-\t\t\tthis.trailingIndexes[this.trailingPtr] = new int[] { -1, -1 };", "+\t\t\tthis.trailingIndexes[this.trailingPtr] = -1;", "-\t\t\t\tthis.trailingIndexes = new int[STORAGE_INCREMENT][];", "+\t\t\t\tthis.trailingIndexes = new long[STORAGE_INCREMENT];", "-\t\t\t\tSystem.arraycopy(this.trailingIndexes, 0, this.trailingIndexes = new int[newLength][], 0, this.trailingPtr);", "+\t\t\t\tSystem.arraycopy(this.trailingIndexes, 0, this.trailingIndexes = new long[newLength], 0, this.trailingPtr);", "-\t\t\tint[] nodeRange = new int[] { startIdx, endIdx };", "+\t\t\tlong nodeRange = (((long)startIdx)<<32) + endIdx;", "-\t\t\t\tint[] range = this.trailingIndexes[ptr];", "-\t\t\t\tif (range[0] != -1 || range[1] != -1) break; // there's no more unresolved nodes", "+\t\t\t\tlong range = this.trailingIndexes[ptr];", "+\t\t\t\tif (range != -1) break; // there's no more unresolved nodes"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a01c628e00613ff0c3d159787496089", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java", "commitBeforeChange": "17fcd420e0756889bcaffeff4cf983b2cff84a3e", "commitAfterChange": "e02893535f42359d54aa8b408faa8e8269b32442", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void recordInitializationStartPC(int pc)", "signatureAfterChange": "  \tpublic void recordInitializationStartPC(int pc)", "diff": ["-\t\t// optimize cases where reopening a contiguous interval", "-\t\tif ((initializationCount > 0) && (initializationPCs[ ((initializationCount - 1) << 1) + 1] == pc)) {", "-\t\t\tinitializationPCs[ ((initializationCount - 1) << 1) + 1] = -1; // reuse previous interval (its range will be augmented)", "-\t\t} else {", "-\t\t\tint index = initializationCount << 1;", "-\t\t\tif (index == initializationPCs.length) {", "-\t\t\t\tSystem.arraycopy(initializationPCs, 0, (initializationPCs = new int[initializationCount << 2]), 0, index);", "+\t\tif (initializationCount > 0) {", "+\t\t\tint previousEndPC = initializationPCs[ ((initializationCount - 1) << 1) + 1];", "+\t\t\t // interval still open, keep using it (108180)", "+\t\t\tif (previousEndPC == -1) {", "+\t\t\t\treturn;", "-\t\t\tinitializationPCs[index] = pc;", "-\t\t\tinitializationPCs[index + 1] = -1;", "-\t\t\tinitializationCount++;", "+\t\t\t// optimize cases where reopening a contiguous interval", "+\t\t\tif (previousEndPC == pc) {", "+\t\t\t\tinitializationPCs[ ((initializationCount - 1) << 1) + 1] = -1; // reuse previous interval (its range will be augmented)", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\tint index = initializationCount << 1;", "+\t\tif (index == initializationPCs.length) {", "+\t\t\tSystem.arraycopy(initializationPCs, 0, (initializationPCs = new int[initializationCount << 2]), 0, index);", "+\t\t}", "+\t\tinitializationPCs[index] = pc;", "+\t\tinitializationPCs[index + 1] = -1;", "+\t\tinitializationCount++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a91a90469ef8d6b7314cf29b9a2ae23e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultCommentMapper.java", "commitBeforeChange": "e178d64eb65916b8b54353dd9e6bcf5b085bf212", "commitAfterChange": "b43b2427c7b970b1fbbb18c36881f31743b7cd83", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tint storeTrailingComments(ASTNode node, int nextStart,  boolean lastChild)", "signatureAfterChange": " \tint storeTrailingComments(ASTNode node, int nextStart,  boolean lastChild)", "diff": ["-\t\t\tthis.trailingComments.put(node, new int[] { -1, -1 });", "+\t\t\tif (++this.trailingPtr == 0) {", "+\t\t\t\tthis.trailingNodes = new ASTNode[STORAGE_INCREMENT];", "+\t\t\t\tthis.trailingIndexes = new int[STORAGE_INCREMENT][];", "+\t\t\t\tthis.lastTrailingPtr = -1;", "+\t\t\t} else if (this.trailingPtr == this.trailingNodes.length) {", "+\t\t\t\tint newLength = (this.trailingPtr*3/2)+STORAGE_INCREMENT;", "+\t\t\t\tSystem.arraycopy(this.trailingNodes, 0, this.trailingNodes = new ASTNode[newLength], 0, this.trailingPtr);", "+\t\t\t\tSystem.arraycopy(this.trailingIndexes, 0, this.trailingIndexes = new int[newLength][], 0, this.trailingPtr);", "+\t\t\t}", "+\t\t\tthis.trailingNodes[this.trailingPtr] = node;", "+\t\t\tthis.trailingIndexes[this.trailingPtr] = new int[] { -1, -1 };", "-\t\t\tthis.trailingComments.put(node, new int[] { startIdx, endIdx });", "+\t\t\tif (++this.trailingPtr == 0) {", "+\t\t\t\tthis.trailingNodes = new ASTNode[STORAGE_INCREMENT];", "+\t\t\t\tthis.trailingIndexes = new int[STORAGE_INCREMENT][];", "+\t\t\t\tthis.lastTrailingPtr = -1;", "+\t\t\t} else if (this.trailingPtr == this.trailingNodes.length) {", "+\t\t\t\tint newLength = (this.trailingPtr*3/2)+STORAGE_INCREMENT;", "+\t\t\t\tSystem.arraycopy(this.trailingNodes, 0, this.trailingNodes = new ASTNode[newLength], 0, this.trailingPtr);", "+\t\t\t\tSystem.arraycopy(this.trailingIndexes, 0, this.trailingIndexes = new int[newLength][], 0, this.trailingPtr);", "+\t\t\t}", "+\t\t\tthis.trailingNodes[this.trailingPtr] = node;", "+\t\t\tint[] nodeRange = new int[] { startIdx, endIdx };", "+\t\t\tthis.trailingIndexes[this.trailingPtr] = nodeRange;", "+\t\t\t// Compute new extended end", "+\t\t\t// Look for children unresolved extended end", "+\t\t\tASTNode previousNode = node;", "+\t\t\tint ptr = this.trailingPtr - 1; // children extended end were stored before", "+\t\t\tunresolved: while (ptr >= 0) {", "+\t\t\t\tint[] range = this.trailingIndexes[ptr];", "+\t\t\t\tif (range[0] != -1 || range[1] != -1) break; // there's no more unresolved nodes", "+\t\t\t\tASTNode unresolved = this.trailingNodes[ptr];", "+\t\t\t\tif (previousNode != unresolved.getParent()) break; // we're no longer in node ancestor hierarchy", "+\t\t\t\tthis.trailingIndexes[ptr] = nodeRange;", "+\t\t\t\tpreviousNode = unresolved;", "+\t\t\t\tptr--; // get previous node", "+\t\t\t}", "+\t\t\t// Remove remaining unresolved nodes", "+\t\t\tif (ptr > this.lastTrailingPtr) {", "+\t\t\t\tint offset = ptr - this.lastTrailingPtr;", "+\t\t\t\tfor (int i=ptr+1; i<=this.trailingPtr; i++) {", "+\t\t\t\t\tthis.trailingNodes[i-offset] = this.trailingNodes[i];", "+\t\t\t\t\tthis.trailingIndexes[i-offset] = this.trailingIndexes[i];", "+\t\t\t\t}", "+\t\t\t\tthis.trailingPtr -= offset;", "+\t\t\t}", "+\t\t\tthis.lastTrailingPtr = this.trailingPtr;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd32ff6d43b044d2b3ac05ec59142b8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultCommentMapper.java", "commitBeforeChange": "e178d64eb65916b8b54353dd9e6bcf5b085bf212", "commitAfterChange": "b43b2427c7b970b1fbbb18c36881f31743b7cd83", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tvoid initialize(CompilationUnit unit, Scanner sc)", "signatureAfterChange": " \tvoid initialize(CompilationUnit unit, Scanner sc)", "diff": ["-\t\t", "+", "+\t\t// Init array pointers", "+\t\tthis.leadingPtr = -1;", "+\t\tthis.trailingPtr = -1;", "+\t", "-\t\t// Init tables", "-\t\tthis.leadingComments = new HashMap();", "-\t\tthis.trailingComments = new HashMap();", "-\t\t", "-\t\t", "+", "+\t\t", "+\t\t// Reduce leading arrays if necessary", "+\t\tint leadingCount = this.leadingPtr + 1;", "+\t\tif (leadingCount > 0 && leadingCount < this.leadingIndexes.length) {", "+\t\t\tSystem.arraycopy(this.leadingNodes, 0, this.leadingNodes = new ASTNode[leadingCount], 0, leadingCount);", "+\t\t\tSystem.arraycopy(this.leadingIndexes, 0, this.leadingIndexes= new int[leadingCount][], 0, leadingCount);", "+\t\t}", "+\t\t", "+\t\t// Reduce trailing arrays if necessary", "+\t\tif (this.trailingPtr >= 0) {", "+\t\t\t// remove last remaining unresolved nodes", "+\t\t\twhile (this.trailingIndexes[this.trailingPtr][0] == -1) {", "+\t\t\t\tthis.trailingPtr--;", "+\t\t\t\tif (this.trailingPtr < 0) {", "+\t\t\t\t\tthis.trailingIndexes = null;", "+\t\t\t\t\tthis.trailingNodes = null;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\t// reduce array size", "+\t\t\tint trailingCount = this.trailingPtr + 1;", "+\t\t\tif (trailingCount > 0 && trailingCount < this.trailingIndexes.length) {", "+\t\t\t\tSystem.arraycopy(this.trailingNodes, 0, this.trailingNodes = new ASTNode[trailingCount], 0, trailingCount);", "+\t\t\t\tSystem.arraycopy(this.trailingIndexes, 0, this.trailingIndexes= new int[trailingCount][], 0, trailingCount);", "+\t\t\t}", "+\t\t}"]}], "num": 66175}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6dc1605fd581b6d051fa953df5f96593", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62fec496613f10fb0782bae0441beb69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "20a3b07578a2ebec2d9a0569764e78af37761eaf", "commitAfterChange": "c052d66dbc2732414cdaf446e79eec5da0743843", "methodNumberBeforeChange": 126, "methodNumberAfterChange": 130, "signatureBeforeChange": " \tpublic ICompilationUnit getWorkingCopy(String path, String source, WorkingCopyOwner owner, boolean computeProblems) throws JavaModelException", "signatureAfterChange": " \tpublic ICompilationUnit getWorkingCopy(String path, String source, WorkingCopyOwner owner) throws JavaModelException", "diff": ["-\tpublic ICompilationUnit getWorkingCopy(String path, String source, WorkingCopyOwner owner, boolean computeProblems) throws JavaModelException {", "-\t\tIProblemRequestor problemRequestor = computeProblems", "-\t\t\t? new IProblemRequestor() {", "-\t\t\t\tpublic void acceptProblem(IProblem problem) {}", "-\t\t\t\tpublic void beginReporting() {}", "-\t\t\t\tpublic void endReporting() {}", "-\t\t\t\tpublic boolean isActive() {", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t} ", "-\t\t\t: null;", "-\t\treturn getWorkingCopy(path, source, owner, problemRequestor);", "+\tpublic ICompilationUnit getWorkingCopy(String path, String source, WorkingCopyOwner owner) throws JavaModelException {", "+\t\tICompilationUnit workingCopy = getCompilationUnit(path);", "+\t\tif (owner != null)", "+\t\t\tworkingCopy = workingCopy.getWorkingCopy(owner, null/*no progress monitor*/);", "+\t\telse", "+\t\t\tworkingCopy.becomeWorkingCopy(null/*no progress monitor*/);", "+\t\tworkingCopy.getBuffer().setContents(source);", "+\t\tIProblemRequestor problemRequestor = owner.getProblemRequestor(workingCopy);", "+\t\tif (problemRequestor instanceof ProblemRequestor) {", "+\t\t\t((ProblemRequestor) problemRequestor).initialize(source.toCharArray());", "+\t\t}", "+\t\tworkingCopy.makeConsistent(null/*no progress monitor*/);", "+\t\treturn workingCopy;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83ee628b1d82d9fff144bbe901fa18cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "a9c68df97efd734f3ed326f5e99e4d21e6054bec", "commitAfterChange": "af2f21c145913c8a7ccf22989ee905c5f5c7dd0d", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void testCoreException() throws CoreException", "signatureAfterChange": " public void testCoreException() throws CoreException", "diff": ["-\tIJavaSearchResultCollector resultCollector = new IJavaSearchResultCollector() {", "-\t\tpublic void accept(IResource resource, int start, int end, IJavaElement enclosingElement, int accuracy) throws CoreException {", "+\tSearchRequestor resultCollector = new SearchRequestor() {", "+\t\tpublic boolean acceptSearchMatch(SearchMatch match) throws CoreException {", "-\t\tpublic void aboutToStart() {}", "-\t\tpublic void done() {}", "-\t\tpublic IProgressMonitor getProgressMonitor() {", "-\t\t\treturn null;", "-\t\t}", "+\t\tpublic void beginReporting() {}", "+\t\tpublic void endReporting() {}", "+\t\tpublic void enterParticipant(SearchParticipant participant) {}", "+\t\tpublic void exitParticipant(SearchParticipant participant) {}", "-\t\tnew SearchEngine().search(", "-\t\t\tgetWorkspace(), ", "+\t\tsearch(", "-\t} catch (JavaModelException e) {", "-\t\tThrowable wrappedException = e.getException();", "-\t\tassertTrue(\"Unexpected wrapped exception\", wrappedException instanceof CoreException);", "-\t\tassertEquals(\"Unexpected CoreException has been thrown\", \"test\", ((CoreException)wrappedException).getStatus().getMessage());", "+\t} catch (CoreException e) {", "+\t\tassertEquals(\"Unexpected CoreException has been thrown\", \"test\", e.getStatus().getMessage());"]}], "num": 22085}
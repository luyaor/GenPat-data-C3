{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f4cfeb1e9f90f7c23ebe5d9b561ce6f4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02b8d1c8d50db6161db0a9b8faae31af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java", "commitBeforeChange": "c73dc602d3a7bc78582f5168e9ef91cc511da90a", "commitAfterChange": "802408127f6c9d056b74d013d85acd8e4ce01d9f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tint expressionTypeId = expressionType.id;", "-\t\tif (expressionTypeId > 15) {", "+\t\tint expressionTypeID = expressionType.id;", "+\t\t// autoboxing support", "+\t\tboolean use15specifics = scope.environment().options.sourceLevel >= JDK1_5;", "+\t\tboolean unboxedExpression = false;", "+\t\tif (use15specifics) {", "+\t\t\tif (!expressionType.isBaseType()) {", "+\t\t\t\tint unboxedID = scope.computeBoxingType(expressionType).id;", "+\t\t\t\tif (unboxedID != expressionTypeID) {", "+\t\t\t\t\texpressionTypeID = unboxedID;", "+\t\t\t\t\tunboxedExpression = true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}\t\t", "+\t\tif (expressionTypeID > 15) {", "-\t\tint operatorSignature = OperatorSignatures[tableId][(expressionTypeId << 4) + expressionTypeId];", "-\t\tthis.expression.implicitConversion = operatorSignature >>> 12;", "+\t\tint operatorSignature = OperatorSignatures[tableId][(expressionTypeID << 4) + expressionTypeID];", "+\t\tthis.expression.implicitConversion = (unboxedExpression ? UNBOXING : 0) | (operatorSignature >>> 12);", "-\t\t\t\tif (expressionTypeId != T_undefined)", "+\t\t\t\tif (expressionTypeID != T_undefined)", "-\t\t\t\t\texpressionTypeId,", "+\t\t\t\t\texpressionTypeID,", "-\t\t\tCastExpression.checkNeedForArgumentCast(scope, tableId, operatorSignature, this.expression, expressionTypeId);", "+\t\t\tCastExpression.checkNeedForArgumentCast(scope, tableId, operatorSignature, this.expression, expressionTypeID);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f242c82e764ac3a7c830e30a40fe6596", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java", "commitBeforeChange": "46df66625bb01025e2f747d9b3cccffff9c1a6c7", "commitAfterChange": "c7ee0f26df56582a4fdd4c9183c2b927d77dbd19", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tboolean expressionIsCast;", "+\t\tif ((expressionIsCast = this.expression instanceof CastExpression) == true) this.expression.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "-\t\tint expressionId = expressionType.id;", "-\t\tif (expressionId > 15) {", "+\t\tint expressionTypeId = expressionType.id;", "+\t\tif (expressionTypeId > 15) {", "-", "+\t", "-", "+\t", "-\t\tint result = OperatorSignatures[tableId][(expressionId << 4) + expressionId];", "-\t\tthis.expression.implicitConversion = result >>> 12;", "-\t\tthis.bits |= result & 0xF;", "-\t\tswitch (result & 0xF) { // only switch on possible result type.....", "+\t\tint operatorSignature = OperatorSignatures[tableId][(expressionTypeId << 4) + expressionTypeId];", "+\t\tthis.expression.implicitConversion = operatorSignature >>> 12;", "+\t\tthis.bits |= operatorSignature & 0xF;", "+\t\tswitch (operatorSignature & 0xF) { // only switch on possible result type.....", "-\t\t\t\tif (expressionId != T_undefined)", "+\t\t\t\tif (expressionTypeId != T_undefined)", "-\t\t\t\t\texpressionId,", "+\t\t\t\t\texpressionTypeId,", "+\t\tif (expressionIsCast) {", "+\t\t// check need for operand cast", "+\t\t\tCastExpression.checkNeedForArgumentCast(scope, tableId, operatorSignature, this.expression, expressionTypeId);", "+\t\t}"]}], "num": 9547}
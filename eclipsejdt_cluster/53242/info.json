{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22219a116a1248dd20e266cba9038ae7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04b6528c9553b034424dd628cabed711", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 423, "methodNumberAfterChange": 423, "signatureBeforeChange": " \tpublic void test0412a()", "signatureAfterChange": " \tpublic void test0412a()", "diff": ["+\t\t\tthis.complianceLevel < ClassFileConstants.JDK1_7 ?", "-\t\t\t\"Type safety : A generic array of List<String> is created for a varargs parameter\\n\" +", "+\t\t\t\"Type safety: A generic array of List<String> is created for a varargs parameter\\n\" +", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" : ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tpublic static <T> T first(T... args) {\\n\" + ", "+\t\t\t\t\"\t                               ^^^^\\n\" + ", "+\t\t\t\t\"Type safety: Potential heap pollution via varargs parameter args\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\t\"\tList<String> ls = first(); \\n\" + ", "+\t\t\t\t\"\t                  ^^^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: A generic array of List<String> is created for a varargs parameter\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\t\t\"\tZork z;\\n\" + ", "+\t\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6976f0a41465e58ffd0b3551f575a5bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 975, "methodNumberAfterChange": 975, "signatureBeforeChange": " public void test0951()", "signatureAfterChange": " public void test0951()", "diff": ["+\t\tthis.complianceLevel < ClassFileConstants.JDK1_7 ?", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\" :", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tpublic <T> Iterable<T> m(T[]... ts) {\\n\" + ", "+\t\t\t\"\t                                ^^\\n\" + ", "+\t\t\t\"Type safety: Potential heap pollution via varargs parameter ts\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tpublic <T> void m3(Iterable<T>... ts) {\\n\" + ", "+\t\t\t\"\t                                  ^^\\n\" + ", "+\t\t\t\"Type safety: Potential heap pollution via varargs parameter ts\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tZork z;\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83fe54e6f91b1f24dd2dadf8a5363482", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e62c45ebe5881b0e2838be4fcb8a4a48c85b9c0c", "commitAfterChange": "c36a6a2b662267e56067d121b7f34ae48cbcb692", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 112, "signatureBeforeChange": " \tpublic void test036e()", "signatureAfterChange": " \tpublic void test036e()", "diff": ["+\t\t\tthis.complianceLevel < ClassFileConstants.JDK1_7 ?", "-\t\t\t\"----------\\n\"", "+\t\t\t\"----------\\n\" :", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in Y.java (at line 1)\\n\" + ", "+\t\t\t\"\tabstract class Y implements Equivalent<String>, EqualityComparable<Integer> {\\n\" + ", "+\t\t\t\"\t               ^\\n\" + ", "+\t\t\t\"Name clash: The method equalTo(T) of type Equivalent<T> has the same erasure as equalTo(T) of type EqualityComparable<T> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in Y.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic abstract boolean equalTo(Object other);\\n\" + ", "+\t\t\t\"\t                        ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method equalTo(Object) of type Y has the same erasure as equalTo(T) of type Equivalent<T> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in Y.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic abstract boolean equalTo(Object other);\\n\" + ", "+\t\t\t\"\t                        ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method equalTo(Object) of type Y has the same erasure as equalTo(T) of type EqualityComparable<T> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e4df25d4620d206ddb0fc6bc195531d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "75ef57a93e4cb21ceda10f87f94dbbdb5e4d9d80", "commitAfterChange": "09c77a64b988d1b8740f2abeef7353a697d466b3", "methodNumberBeforeChange": 287, "methodNumberAfterChange": 287, "signatureBeforeChange": " \tpublic void test0279()", "signatureAfterChange": " \tpublic void test0279()", "diff": ["+\t\t\tthis.complianceLevel < ClassFileConstants.JDK1_6 ?", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" :", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" +", "+\t\t\t\t\"\tpublic Class getSomething() { return null; }\\n\" +", "+\t\t\t\t\"\t       ^^^^^\\n\" +", "+\t\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" +", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"2. WARNING in X.java (at line 2)\\n\" +", "+\t\t\t\t\"\tpublic Class getSomething() { return null; }\\n\" +", "+\t\t\t\t\"\t       ^^^^^\\n\" +", "+\t\t\t\t\"Type safety: The return type Class for getSomething() from the type X needs unchecked conversion to conform to Class<? extends Y> from the type ISomething\\n\" +", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"3. WARNING in X.java (at line 2)\\n\" +", "+\t\t\t\t\"\tpublic Class getSomething() { return null; }\\n\" +", "+\t\t\t\t\"\t             ^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\t\"The method getSomething() of type X should be tagged with @Override since it actually overrides a superinterface method\\n\" +", "+\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a183fc402143b8b35b20a0d0d37c0a3a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f200f8d976d56839e6f0d721d690d85cc3afbb03", "commitAfterChange": "0b27e1fc307c28641d0d95f2d81ae5062cecb103", "methodNumberBeforeChange": 824, "methodNumberAfterChange": 824, "signatureBeforeChange": " public void test0803()", "signatureAfterChange": " public void test0803()", "diff": ["-// FIXME: javac8 doesn't find the error", "+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=101831", "-\t\t\"----------\\n\" + ", "-\t\t\"1. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\"\treturn true ? list : list;\\n\" + ", "-\t\t\"\t                     ^^^^\\n\" + ", "-\t\t\"Dead code\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 13)\\n\" + ", "-\t\t\"\treturn true ? superList : superList;\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type mismatch: cannot convert from ArrayList<capture#3-of ? extends Object> to ArrayList<? super A>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. WARNING in X.java (at line 17)\\n\" + ", "-\t\t\"\treturn true ? extendsList : extendsList;\\n\" + ", "-\t\t\"\t                            ^^^^^^^^^^^\\n\" + ", "-\t\t\"Dead code\\n\" + ", "-\t\t\"----------\\n\");", "+\t\tthis.complianceLevel < ClassFileConstants.JDK1_8 ? ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\treturn true ? list : list;\\n\" + ", "+\t\t\t\"\t                     ^^^^\\n\" + ", "+\t\t\t\"Dead code\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\t\"\treturn true ? superList : superList;\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from ArrayList<capture#3-of ? extends Object> to ArrayList<? super A>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 17)\\n\" + ", "+\t\t\t\"\treturn true ? extendsList : extendsList;\\n\" + ", "+\t\t\t\"\t                            ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Dead code\\n\" + ", "+\t\t\t\"----------\\n\" : ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\t\"\treturn true ? list : list;\\n\" + ", "+\t\t\t\t\"\t                     ^^^^\\n\" + ", "+\t\t\t\t\"Dead code\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\t\"\treturn true ? superList : superList;\\n\" + ", "+\t\t\t\t\"\t                          ^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Dead code\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 17)\\n\" + ", "+\t\t\t\t\"\treturn true ? extendsList : extendsList;\\n\" + ", "+\t\t\t\t\"\t                            ^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Dead code\\n\" + ", "+\t\t\t\t\"----------\\n\"", "+\t\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b15bc4d96beadeecd656d775bb7e33de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "75ef57a93e4cb21ceda10f87f94dbbdb5e4d9d80", "commitAfterChange": "09c77a64b988d1b8740f2abeef7353a697d466b3", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": " public void test103()", "signatureAfterChange": " public void test103()", "diff": ["+        this.complianceLevel < ClassFileConstants.JDK1_6 ?", "+        \"----------\\n\" :", "+        \"----------\\n\" +", "+        \"1. WARNING in BadEnum.java (at line 6)\\n\" +", "+        \"\tENUM1 { public String getMethod() { return \\\"ENUM1\\\";} },\\n\" +", "+        \"\t                      ^^^^^^^^^^^\\n\" +", "+        \"The method getMethod() of type new BadEnum.EnumClass(){} should be tagged with @Override since it actually overrides a superinterface method\\n\" +", "+        \"----------\\n\" +", "+        \"2. WARNING in BadEnum.java (at line 7)\\n\" +", "+        \"\tENUM2 { public String getMethod() { return \\\"ENUM2\\\";} };\\n\" +", "+        \"\t                      ^^^^^^^^^^^\\n\" +", "+        \"The method getMethod() of type new BadEnum.EnumClass(){} should be tagged with @Override since it actually overrides a superinterface method\\n\" +", "+        \"----------\\n\" +", "+        \"3. ERROR in BadEnum.java (at line 10)\\n\" +", "+        \"\t}\\n\" +", "+        \"\t^\\n\" +", "+        \"Syntax error on token \\\"}\\\", delete this token\\n\" +"]}], "num": 53242}
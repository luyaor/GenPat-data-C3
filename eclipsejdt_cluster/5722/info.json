{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c24e08a4b3d164fbede0c52c43af833b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "613a19b67c407ed8f8c4e33fa997c7c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "78ff15530e707d01377b0a6a2a0126d47f768ee6", "commitAfterChange": "f0576ea1b21b6541ff2e834545c520f4540fae3a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["-", "+\t", "+\t\t\tCaseStatement[] duplicateCaseStatements = null;", "+\t\t\tint duplicateCaseStatementsCounter = 0;", "-\t\t\t\tif ((cst = statements[i].resolveCase(scope, testType, this)) != null) {", "+\t\t\t\tfinal Statement statement = statements[i];", "+\t\t\t\tif ((cst = statement.resolveCase(scope, testType, this)) != null) {", "-\t\t\t\t\t\t\t\tscope.problemReporter().duplicateCase((CaseStatement) statements[i], cst); //TODO: (olivier) could improve diagnosis to indicate colliding case", "+\t\t\t\t\t\t\t\tfinal CaseStatement currentCaseStatement = (CaseStatement) statement;", "+\t\t\t\t\t\t\t\tif (duplicateCaseStatements == null) {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateCase(cases[j]);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateCase(currentCaseStatement);", "+\t\t\t\t\t\t\t\t\tduplicateCaseStatements = new CaseStatement[length];", "+\t\t\t\t\t\t\t\t\tduplicateCaseStatements[duplicateCaseStatementsCounter++] = cases[j];", "+\t\t\t\t\t\t\t\t\tduplicateCaseStatements[duplicateCaseStatementsCounter++] = currentCaseStatement;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tboolean found = false;", "+\t\t\t\t\t\t\t\t\tsearchReportedDuplicate: for (int k = 2; k < duplicateCaseStatementsCounter; k++) {", "+\t\t\t\t\t\t\t\t\t\tif (duplicateCaseStatements[k] == statement) {", "+\t\t\t\t\t\t\t\t\t\t\tfound = true;", "+\t\t\t\t\t\t\t\t\t\t\tbreak searchReportedDuplicate;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (!found) {", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().duplicateCase(currentCaseStatement);", "+\t\t\t\t\t\t\t\t\t\tduplicateCaseStatements[duplicateCaseStatementsCounter++] = currentCaseStatement;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f72389f9ed6cccc7dc2a1652ebe4af24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "31d2b0bac7c9b032f1ad8765fd4577eaff8d79fd", "commitAfterChange": "5439ade5de22b419e240dc2c8b747841c019940c", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tprivate void formatStatements(BlockScope scope, final Statement[] statements, boolean insertNewLineAfterLastStatement)", "signatureAfterChange": " \tprivate void formatStatements(BlockScope scope, final Statement[] statements, boolean insertNewLineAfterLastStatement)", "diff": ["-\t\t\t\tif (i != statementsLength - 1 || (i == statementsLength - 1 && insertNewLineAfterLastStatement)) {", "+\t\t\t\tif (i != statementsLength - 1) {", "+\t\t\t\t\tif (!(statement instanceof EmptyStatement) && !(statements[i + 1] instanceof EmptyStatement)) {", "+\t\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\t}", "+\t\t\t\t} else if (i == statementsLength - 1 && insertNewLineAfterLastStatement) {", "-\t\t\t\t\t\t\tif (i != statementsLength - 1 || (i == statementsLength - 1 && insertNewLineAfterLastStatement)) {", "+\t\t\t\t\t\t\tif (i != statementsLength - 1) {", "+\t\t\t\t\t\t\t\tif (!(statement instanceof EmptyStatement) && !(statements[i + 1] instanceof EmptyStatement)) {", "+\t\t\t\t\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (i == statementsLength - 1 && insertNewLineAfterLastStatement) {", "-\t\t\t\t\t\tif (i != statementsLength - 1 || (i == statementsLength - 1 && insertNewLineAfterLastStatement)) {", "+\t\t\t\t\t\tif (i != statementsLength - 1) {", "+\t\t\t\t\t\t\tif (!(statement instanceof EmptyStatement) && !(statements[i + 1] instanceof EmptyStatement)) {", "+\t\t\t\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (i == statementsLength - 1 && insertNewLineAfterLastStatement) {", "-\t\t\t\t\tif (i != statementsLength - 1 || (i == statementsLength - 1 && insertNewLineAfterLastStatement)) {", "+\t\t\t\t\tif (i != statementsLength - 1) {", "+\t\t\t\t\t\tif (!(statement instanceof EmptyStatement) && !(statements[i + 1] instanceof EmptyStatement)) {", "+\t\t\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (i == statementsLength - 1 && insertNewLineAfterLastStatement) {"]}], "num": 5722}
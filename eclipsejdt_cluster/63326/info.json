{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d49a3d99b389b582e13054f85947bb6e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dec5795e7ad00530a7d5e6d21c41f65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "4cf5441fe359583a3d77a31fc213bc74e94cf25e", "commitAfterChange": "40893837639c1eb9109e9994f8211db5f484441a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tpublic static CompilationUnit parseCompilationUnit(char[] source)", "signatureAfterChange": "\r \tpublic static CompilationUnit parseCompilationUnit(\r \t\tchar[] source,\r \t\tString unitName,\r \t\tIJavaProject javaProject)", "diff": ["+\t */\r", "+\tpublic static CompilationUnit parseCompilationUnit(\r", "+\t\tchar[] source,\r", "+\t\tString unitName,\r", "+\t\tIJavaProject javaProject) {\r", "+\t\tCompilationUnitDeclaration compilationUnitDeclaration = null;\r", "+\r", "+\t\tif (javaProject != null) {\r", "+\t\t\t// If resolveBindings is true, we need to record the mod count\r", "+\t\t\t// once newAST has been constructed. If the mod count goes above\r", "+\t\t\t// this level, someone is modifying the AST and all bets are off\r", "+\t\t\t// regarding resolved bindings. All existing binding info should be\r", "+\t\t\t// discarded, and the various public resolveBinding methods should\r", "+\t\t\t// thereafter return null.\r", "+\t\t\ttry {\r", "+\t\t\t\tcompilationUnitDeclaration =\r", "+\t\t\t\t\tCompilationUnitResolver.resolve(\r", "+\t\t\t\t\t\tsource,\r", "+\t\t\t\t\t\tunitName,\r", "+\t\t\t\t\t\tjavaProject,\r", "+\t\t\t\t\t\tnew AbstractSyntaxTreeVisitorAdapter());\r", "+\t\t\t\treturn convert(compilationUnitDeclaration, source);\r", "+\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\treturn parseCompilationUnit(source);\r", "+\t\t}\r", "+\t\treturn null;\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea1488616f76e1320fa27535134882a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "7f5e906484d36443cfeeaa5a767b999e30565c9e", "commitAfterChange": "0d1d10149bf9c26b080c1a4904327c7f2e8ddf98", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tpublic static CompilationUnit parseCompilationUnit(\r \t\tchar[] source,\r \t\tString unitName,\r \t\tIJavaProject javaProject)", "signatureAfterChange": "\r \tpublic static CompilationUnit parseCompilationUnit(\r \t\tchar[] source,\r \t\tString unitName,\r \t\tIJavaProject project)", "diff": ["-\t\tIJavaProject javaProject) {\r", "+\t\tIJavaProject project) {\r", "+\t\t\t\r", "+\t\tif (source == null) {\r", "+\t\t\tthrow new IllegalArgumentException();\r", "+\t\t}\r", "+\t\tif (unitName == null && project != null) {\r", "+\t\t\tthrow new IllegalArgumentException();\r", "+\t\t}\r", "+\t\tif (project == null) {\r", "+\t\t\t// this just reuces to the other simplest case\r", "+\t\t\treturn parseCompilationUnit(source);\r", "+\t\t}\r", "-\t\tif (javaProject != null) {\r", "-\t\t\t// If resolveBindings is true, we need to record the mod count\r", "-\t\t\t// once newAST has been constructed. If the mod count goes above\r", "-\t\t\t// this level, someone is modifying the AST and all bets are off\r", "-\t\t\t// regarding resolved bindings. All existing binding info should be\r", "-\t\t\t// discarded, and the various public resolveBinding methods should\r", "-\t\t\t// thereafter return null.\r", "-\t\t\ttry {\r", "-\t\t\t\tcompilationUnitDeclaration =\r", "-\t\t\t\t\tCompilationUnitResolver.resolve(\r", "-\t\t\t\t\t\tsource,\r", "-\t\t\t\t\t\tunitName,\r", "-\t\t\t\t\t\tjavaProject,\r", "-\t\t\t\t\t\tnew AbstractSyntaxTreeVisitorAdapter());\r", "-\t\t\t\treturn convert(compilationUnitDeclaration, source);\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t}\r", "-\t\t} else {\r", "-\t\t\treturn parseCompilationUnit(source);\r", "+\t\t// FIXME - If resolveBindings is true, we need to record the mod count\r", "+\t\t// once newAST has been constructed. If the mod count goes above\r", "+\t\t// this level, someone is modifying the AST and all bets are off\r", "+\t\t// regarding resolved bindings. All existing binding info should be\r", "+\t\t// discarded, and the various public resolveBinding methods should\r", "+\t\t// thereafter return null.\r", "+\t\ttry {\r", "+\t\t\tcompilationUnitDeclaration =\r", "+\t\t\t\tCompilationUnitResolver.resolve(\r", "+\t\t\t\t\tsource,\r", "+\t\t\t\t\tunitName,\r", "+\t\t\t\t\tproject,\r", "+\t\t\t\t\tnew AbstractSyntaxTreeVisitorAdapter());\r", "+\t\t\treturn convert(compilationUnitDeclaration, source);\r", "+\t\t} catch (JavaModelException e) {\r", "+\t\t\t// FIXME - if this exception can happen, it needs to be converted\r", "+\t\t\t// to an appropriate RuntimeException of some ilk\r", "+\t\t// FIXME - this method must not return null!\r"]}], "num": 63326}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5160554d70dc25e69e6ee33f1fa84fe2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "334d9bbf29b81cbf0746d45b45c2b3b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "e92ab0eafbe7472576da485243db5aa49da5df74", "commitAfterChange": "a4e58088a1010e10b50ef0d8683567f65215eac1", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic static IBinding[] resolve( \t\tfinal IJavaElement[] elements, \t\tint apiLevel, \t\tMap compilerOptions, \t\tIJavaProject javaProject, \t\tWorkingCopyOwner owner, \t\tint flags, \t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic static IBinding[] resolve( \t\tfinal IJavaElement[] elements, \t\tint apiLevel, \t\tMap compilerOptions, \t\tIJavaProject javaProject, \t\tWorkingCopyOwner owner, \t\tint flags, \t\tIProgressMonitor monitor)", "diff": ["-\t\t\t\t// binary member", "+\t\t\t\t// binary member or method argument", "-\t\t\t\t\tString key = ((BinaryMember) element).getKey(true/*open to get resolved info*/);", "+\t\t\t\t\tString key;", "+\t\t\t\t\tif (element instanceof BinaryMember)", "+\t\t\t\t\t\tkey = ((BinaryMember) element).getKey(true/*open to get resolved info*/);", "+\t\t\t\t\telse if (element instanceof LocalVariable)", "+\t\t\t\t\t\tkey = ((LocalVariable) element).getKey(true/*open to get resolved info*/);", "+\t\t\t\t\telse", "+\t\t\t\t\t\tthrow new IllegalArgumentException(element + \" has an unexpected type\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4fa6eec704d2d778a07527e94770c19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public ArrayBinding(TypeBinding type, int dimensions)", "signatureAfterChange": " \t public ArrayBinding(TypeBinding type, int dimensions, LookupEnvironment environment)", "diff": ["-public ArrayBinding(TypeBinding type, int dimensions) {", "+\t", "+public ArrayBinding(TypeBinding type, int dimensions, LookupEnvironment environment) {", "+\tthis.environment = environment;", "+\tif (type instanceof UnresolvedReferenceBinding)", "+\t\t((UnresolvedReferenceBinding) type).addWrapper(this);", "+\telse", "+    \tthis.tagBits |= type.tagBits & (HasTypeVariable | HasWildcard);"]}], "num": 25795}
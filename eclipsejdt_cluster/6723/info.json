{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b07cbbd62be7f6fa5559fcfc456fdc80", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6be5b8781c3cd6377e40805235e3bdd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "eae9b6d133d1e0c7d2c9c5eea34b3530b0d87bc7", "commitAfterChange": "f3b2714ce76600cbff47416c089b334d95e8398e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\t\t\t\tFlowInfo initsOnException = handlingContext.initsOnException(this.caughtExceptionTypes[i]);", "-\t\t\t\t\t\tflowInfo.unconditionalCopy().", "-\t\t\t\t\t\t\taddPotentialInitializationsFrom(", "-\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "-\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i]))", "-\t\t\t\t\t\t\t.addPotentialInitializationsFrom(tryInfo.unconditionalCopy())", "+\t\t\t\t\t\tflowInfo.nullInfoLessUnconditionalCopy()", "+\t\t\t\t\t\t\t.addPotentialInitializationsFrom(initsOnException)", "+\t\t\t\t\t\t\t.addNullInfoFrom(initsOnException)\t// null info only from here, this is the only way to enter the catch block", "-\t\t\t\t\t\t\t\thandlingContext.initsOnReturn.", "-\t\t\t\t\t\t\t\t\tnullInfoLessUnconditionalCopy());", "+\t\t\t\t\t\t\t\t\ttryInfo.nullInfoLessUnconditionalCopy())", "+\t\t\t\t\t\t\t.addPotentialInitializationsFrom(", "+\t\t\t\t\t\t\t\t\thandlingContext.initsOnReturn.nullInfoLessUnconditionalCopy());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94826f4cccdbe5dbe3c0ef6ab8a8d3ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "93d29a39610a20a6f67d99786d1650e80e821c63", "commitAfterChange": "0296b715ce59808cbb47571bdec4ae6eeb244c61", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\t\t\t\tFlowInfo initsOnException = handlingContext.initsOnException(this.caughtExceptionTypes[i]);", "-\t\t\t\t\t\tflowInfo.unconditionalCopy()", "+\t\t\t\t\t\tflowInfo.nullInfoLessUnconditionalCopy()", "+\t\t\t\t\t\t\t.addPotentialInitializationsFrom(initsOnException)", "+\t\t\t\t\t\t\t.addNullInfoFrom(initsOnException)\t// null info only from here, this is the only way to enter the catch block", "-\t\t\t\t\t\t\t\thandlingContext.initsOnException(", "-\t\t\t\t\t\t\t\t\tthis.caughtExceptionTypes[i]))", "-\t\t\t\t\t\t\t\t\t.addPotentialInitializationsFrom(tryInfo.unconditionalCopy())", "+\t\t\t\t\t\t\t\t\ttryInfo.nullInfoLessUnconditionalCopy())", "-\t\t\t\t\t\t\t\t\thandlingContext.initsOnReturn.", "-\t\t\t\t\t\t\t\t\tnullInfoLessUnconditionalCopy());", "+\t\t\t\t\t\t\t\t\thandlingContext.initsOnReturn.nullInfoLessUnconditionalCopy());"]}], "num": 6723}
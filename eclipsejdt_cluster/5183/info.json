{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7764f86cd2aed7939845d7a4fd9a6623", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0892911f44935fdea2edab6d1018d8ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Region.java", "commitBeforeChange": "8e8d8e45c2ef2f6ead0467d2ea8c6dadb189ddb8", "commitAfterChange": "b3d1d871406f56d8ee454b6524d9decdbf5e4860", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void add(IJavaElement element)", "signatureAfterChange": " public void add(IJavaElement element)", "diff": ["-\t\tif (element.getElementType() == IJavaElement.JAVA_PROJECT) {", "-\t\t\t// add jar roots as well so that jars don't rely on their parent to know ", "-\t\t\t// if they are contained in the region", "-\t\t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=146615)", "-\t\t\ttry {", "-\t\t\t\tIPackageFragmentRoot[] roots = ((IJavaProject) element).getPackageFragmentRoots();", "-\t\t\t\tfor (int i = 0, length = roots.length; i < length; i++) {", "-\t\t\t\t\tif (roots[i].isArchive() && !fRootElements.contains(roots[i]))", "-\t\t\t\t\t\tfRootElements.add(roots[i]);", "-\t\t\t\t}", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// project doesn't exist", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6bdca9cd57f511947a92f99b9c8f687", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "bc5d9b450540dde0f4417c6b10a04ec18aa90f94", "commitAfterChange": "67c55712e5adee92eb685a3f98810e93028c1621", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic synchronized FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tIJavaProject javaProject, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tIProgressMonitor progressMonitor, \t\t\tString charsetName )  \t\tthrows CoreException, UnsupportedEncodingException", "signatureAfterChange": " \tpublic synchronized FileGenerationResult generateFileDuringBuild( \t\t\tIFile parentFile, \t\t\tIJavaProject javaProject, \t\t\tString typeName,  \t\t\tString contents,  \t\t\tIProgressMonitor progressMonitor, \t\t\tString charsetName )  \t\tthrows CoreException, UnsupportedEncodingException", "diff": ["-\t\t\t// create folder for generated source files", "-\t\t\tIFolder folder = project.getFolder( GENERATED_SOURCE_FOLDER_NAME );", "-\t\t\tif (!folder.exists())", "-\t\t\t\tfolder.create(true, false, null);", "+\t\t\t", "+\t\t\tIFile file = getIFileForTypeName( typeName );", "-\t\t\t// make sure __generated_src dir is on the cp if not already", "+\t\t\t// make sure GENERATED_SOURCE_FOLDER_NAME dir is on the cp if not already", "+\t\t\t// this dir will be created by getIFileForTypeName", "+\t\t\tIFolder folder = project.getFolder( GENERATED_SOURCE_FOLDER_NAME );", "-\t\t\t// split the type name into its parts", "-\t\t\tString[] parts = typeName.split( \"\\\\.\");", "-\t", "-\t\t\t//  create folders for the package parts", "-\t\t\tint i = 0;", "-\t\t\tfor ( ;i < parts.length - 1; i++ )", "-\t\t\t{", "-\t\t\t\tfolder = folder.getFolder( parts[i] );", "-\t\t\t\tif ( !folder.exists() )", "-\t\t\t\t\tfolder.create( true, false, null );", "-\t\t\t}", "-\t\t\t", "-\t\t\tString fileName = parts[i] + \".java\";\t\t", "-\t\t\tIFile file = folder.getFile( fileName );", "-\t", "-\t\t\tupdateFileMaps( typeName, parentFile, file );", "+\t\t\taddEntryToFileMaps( parentFile, file );"]}], "num": 5183}
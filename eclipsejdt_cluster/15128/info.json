{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c7c7d6ac444366448bc3d13e0734efc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bd6d04bae20ad9ef4d49ee44bef07b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "1ca61ba390ea54fcabd09223853d7a3d6816c249", "commitAfterChange": "5663a1e0521003a6152962cf3fce8cc9ca6a4647", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic TypeReference copyDims(int dim, Annotation[][] dimensionAnnotations)", "signatureAfterChange": " \tpublic TypeReference augmentTypeWithAdditionalDimensions(int additionalDimensions, Annotation[][] additionalAnnotations, boolean isVarargs)", "diff": ["-\t}", "-\tpublic TypeReference copyDims(int dim, Annotation[][] dimensionAnnotations){", "-\t\tParameterizedQualifiedTypeReference parameterizedQualifiedTypeReference = new ParameterizedQualifiedTypeReference(this.tokens, this.typeArguments, dim, dimensionAnnotations, this.sourcePositions);", "-\t\tparameterizedQualifiedTypeReference.bits |= (this.bits & ASTNode.HasTypeAnnotations);", "-\t\tif (dimensionAnnotations != null) {", "-\t\t\tparameterizedQualifiedTypeReference.bits |= ASTNode.HasTypeAnnotations;", "-\t\t}", "-\t\treturn parameterizedQualifiedTypeReference;", "+\tpublic TypeReference augmentTypeWithAdditionalDimensions(int additionalDimensions, Annotation[][] additionalAnnotations, boolean isVarargs) {", "+\t\tint totalDimensions = this.dimensions() + additionalDimensions;", "+\t\tAnnotation [][] allAnnotations = getMergedAnnotationsOnDimensions(additionalDimensions, additionalAnnotations);", "+\t\tParameterizedQualifiedTypeReference pqtr = new ParameterizedQualifiedTypeReference(this.tokens, this.typeArguments, totalDimensions, allAnnotations, this.sourcePositions);", "+\t\tpqtr.bits |= (this.bits & ASTNode.HasTypeAnnotations);", "+\t\tif (!isVarargs)", "+\t\t\tpqtr.extendedDimensions = additionalDimensions;", "+\t\treturn pqtr;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "878a32a1e5bc497ca3463821a91c1a90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java", "commitBeforeChange": "1ca61ba390ea54fcabd09223853d7a3d6816c249", "commitAfterChange": "5663a1e0521003a6152962cf3fce8cc9ca6a4647", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic TypeReference copyDims(int dim, Annotation[][] annotationsOnDimensions)", "signatureAfterChange": "  \tpublic TypeReference augmentTypeWithAdditionalDimensions(int additionalDimensions, Annotation[][] additionalAnnotations, boolean isVarargs)", "diff": ["-\t", "-\tpublic TypeReference copyDims(int dim, Annotation[][] annotationsOnDimensions) {", "-\t\t//return a type reference copy of me with some dimensions", "-\t\t//warning : the new type ref has a null binding", "-\t\tArrayQualifiedTypeReference arrayQualifiedTypeReference = new ArrayQualifiedTypeReference(this.tokens, dim, annotationsOnDimensions, this.sourcePositions);", "+\tpublic TypeReference augmentTypeWithAdditionalDimensions(int additionalDimensions, Annotation[][] additionalAnnotations, boolean isVarargs) {", "+\t\tint totalDimensions = this.dimensions() + additionalDimensions;", "+\t\tAnnotation [][] allAnnotations = getMergedAnnotationsOnDimensions(additionalDimensions, additionalAnnotations);", "+\t\tArrayQualifiedTypeReference arrayQualifiedTypeReference = new ArrayQualifiedTypeReference(this.tokens, totalDimensions, allAnnotations, this.sourcePositions);", "-\t\tif (annotationsOnDimensions != null) {", "-\t\t\tarrayQualifiedTypeReference.bits |= ASTNode.HasTypeAnnotations;", "-\t\t}", "+\t\tif (!isVarargs)", "+\t\t\tarrayQualifiedTypeReference.extendedDimensions = additionalDimensions;"]}], "num": 15128}
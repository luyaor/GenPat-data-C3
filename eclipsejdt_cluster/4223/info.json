{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "404047fba19cb1587e84ef8ce526022a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6353ab5dec8246c81c9f58ab5cca6e4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "9d422f535f1cf1a8b8f8401815db736b124961e4", "commitAfterChange": "13ebf03f7d31f9fda8d23c3fe70da0f01fcad14a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": " public synchronized void removeIndex(IPath path)", "signatureAfterChange": " public synchronized void removeIndex(IPath path)", "diff": ["-\tIIndex index = (IIndex)this.indexes.get(path);", "-\tif (index == null) return;", "-\tindex.getIndexFile().delete();", "+\tString indexName = computeIndexName(path);", "+\tFile indexFile = new File(indexName);", "+\tif (indexFile.exists())", "+\t\tindexFile.delete();", "+\tObject o = this.indexes.get(path);", "+\tif (o instanceof IIndex)", "+\t\tthis.monitors.remove(o);", "-\tthis.monitors.remove(index);", "+\tupdateIndexState(indexName, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea3ab08f72a72651a1d5d1dce55b3140", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "3fea0bd3d01827a0628763911bb538bc75a5f8bd", "commitAfterChange": "267a82506dfcd2b4938ade544a2160c1561cce40", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate void checkClassFile(String compliance, String className, String source, String expectedOutput)", "signatureAfterChange": " \tprivate void checkClassFile(String compliance, String directoryName, String className, String source, String expectedOutput, int mode)", "diff": ["-", "-\tprivate void checkClassFile(String compliance, String className, String source, String expectedOutput) {", "-\t\tcompileAndDeploy(compliance, source, className);", "+\tprivate void checkClassFile(String compliance, String directoryName, String className, String source, String expectedOutput, int mode) {", "+\t\tcompileAndDeploy(compliance, source, directoryName, className);", "-\t\t\tFile f = new File(EVAL_DIRECTORY + File.separator + className + \".class\");", "+\t\t\tFile directory = new File(EVAL_DIRECTORY, directoryName);", "+\t\t\tif (!directory.exists()) {", "+\t\t\t\tassertTrue(\".class file not generated properly in \" + directory, false);", "+\t\t\t}", "+\t\t\tFile f = new File(directory, className + \".class\");", "-\t\t\tString result = disassembler.disassemble(classFileBytes, \"\\n\", ClassFileBytesDisassembler.SYSTEM);", "+\t\t\tString result = disassembler.disassemble(classFileBytes, \"\\n\", mode);"]}], "num": 4223}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1730b49774f7e8b627a1bae9762e1259", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "237f9427ae9c78a172729bec5e7db2c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/RuntimeTests.java", "commitBeforeChange": "acb9838f14c6b1a5ef6950eb28bfa26497eccaa4", "commitAfterChange": "cc547ec5c074d17ff882a095dbec68dcad72a87a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void _test0600_reflection()", "signatureAfterChange": " public void _test0600_reflection()", "diff": ["-\tif (COMPLIANCE_1_3.equals(this.complianceLevel) ||", "-\t\t\tCOMPLIANCE_1_4.equals(this.complianceLevel)) {", "-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"import java.lang.reflect.*;\\n\" + ", "-\t\t\t\t\"import p.*;\\n\" + ", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"static public void main (String args[]) {\\n\" + ", "-\t\t\t\t\"  Y y = new Y();\\n\" +", "-\t\t\t\t\"  try {\\n\" +", "-\t\t\t\t\"    Method foo = Y.class.getMethod(\\\"foo\\\", null);\\n\" +", "-\t\t\t\t\"    foo.invoke(y, null);\\n\" +", "-\t\t\t\t\"    y.foo();\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"  catch (Throwable t) {\\n\" +", "-\t\t\t\t\"    System.out.println(\\\"FAILURE: \\\" + t.getMessage());\\n\" +", "-\t\t\t\t\"    t.printStackTrace(System.out);\\n\" +", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\t\"p/Y.java\",", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class Y extends Z {\\n\" + ", "-\t\t\t\t\"  /* empty */\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\t\"p/Z.java\",", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"class Z {\\n\" + ", "-\t\t\t\t\"  public void foo() {\\n\" + ", "-\t\t\t\t\"  System.out.println(\\\"SUCCESS\\\"); //$NON-NLS-1$\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"SUCCESS\\nSUCCESS\"", "-\t\t);", "-\t}", "-\telse {", "-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"import java.lang.reflect.*;\\n\" + ", "-\t\t\t\t\"import p.*;\\n\" + ", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"static public void main (String args[]) {\\n\" + ", "-\t\t\t\t\"  Y y = new Y();\\n\" +", "-\t\t\t\t\"  try {\\n\" +", "-\t\t\t\t\"    Method foo = Y.class.getMethod(\\\"foo\\\");\\n\" +", "-\t\t\t\t\"    foo.invoke(y);\\n\" +", "-\t\t\t\t\"    y.foo();\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"  catch (Throwable t) {\\n\" +", "-\t\t\t\t\"    System.out.println(\\\"FAILURE: \\\" + t.getMessage());\\n\" +", "-\t\t\t\t\"    t.printStackTrace(System.out);\\n\" +", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\t\"p/Y.java\",", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class Y extends Z {\\n\" + ", "-\t\t\t\t\"  /* empty */\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\t\"p/Z.java\",", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"class Z {\\n\" + ", "-\t\t\t\t\"  public void foo() {\\n\" + ", "-\t\t\t\t\"  System.out.println(\\\"SUCCESS\\\"); //$NON-NLS-1$\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"SUCCESS\\nSUCCESS\"", "-\t\t);", "-\t}", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"import java.lang.reflect.*;\\n\" + ", "+\t\t\t\"import p.*;\\n\" + ", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"static public void main (String args[]) {\\n\" + ", "+\t\t\t\"  Y y = new Y();\\n\" +", "+\t\t\t\"  try {\\n\" +", "+\t\t\t\"    Method foo = Y.class.getMethod(\\\"foo\\\", (Class []) null);\\n\" +", "+\t\t\t\"    y.foo();\\n\" +", "+\t\t\t\"    foo.invoke(y, (Object []) null);\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"  catch (Throwable t) {\\n\" +", "+\t\t\t\"    System.out.println(\\\"FAILURE: \\\" + t.getMessage());\\n\" +", "+\t\t\t\"    t.printStackTrace(System.out);\\n\" +", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\t\"p/Y.java\",", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"public class Y extends Z {\\n\" + ", "+\t\t\t\"  /* empty */\\n\" + ", "+\t\t\t\"}\\n\",", "+\t\t\t\"p/Z.java\",", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"class Z {\\n\" + ", "+\t\t\t\"  public void foo() {\\n\" + ", "+\t\t\t\"  System.out.println(\\\"SUCCESS\\\"); //$NON-NLS-1$\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"SUCCESS\\nSUCCESS\"", "+\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "700a2a3ada8fb6f4af214c25087ced3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "5228dfdf7fa03d5185db0383190068a0dd5a8b1d", "commitAfterChange": "0bd28d2896289b3835c461013a60982c7e5b2bf2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void test008()", "signatureAfterChange": " \tpublic void test008()", "diff": ["+\t\t// int -> Integer", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// byte -> Byte", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static byte bar() {return 1;}\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\tY.test(bar());\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y {\\n\" +", "+\t\t\t\t\"\tprivate static void test(byte i) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tstatic void test(byte... i) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tpublic static void test(Byte b) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// char -> Character", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static char bar() {return 'c';}\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\tY.test(bar());\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y {\\n\" +", "+\t\t\t\t\"\tprivate static void test(char i) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tstatic void test(char... i) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tpublic static void test(Character c) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// float -> Float", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static float bar() {return 0.0f;}\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\tY.test(bar());\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y {\\n\" +", "+\t\t\t\t\"\tprivate static void test(float f) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tstatic void test(float... f) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tpublic static void test(Float f) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// double -> Double", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static double bar() {return 0.0;}\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\tY.test(bar());\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y {\\n\" +", "+\t\t\t\t\"\tprivate static void test(double d) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tstatic void test(double... d) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tpublic static void test(Double d) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// long -> Long", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static long bar() {return 0;}\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\tY.test(bar());\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y {\\n\" +", "+\t\t\t\t\"\tprivate static void test(long l) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tstatic void test(long... l) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tpublic static void test(Long l) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// short -> Short", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static short bar() {return 0;}\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\tY.test(bar());\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y {\\n\" +", "+\t\t\t\t\"\tprivate static void test(short s) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tstatic void test(short... s) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tpublic static void test(Short s) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// boolean -> Boolean", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static boolean bar() {return true;}\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\tY.test(bar());\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class Y {\\n\" +", "+\t\t\t\t\"\tprivate static void test(boolean b) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tstatic void test(boolean... b) { System.out.print('n'); }\\n\" +", "+\t\t\t\t\"\tpublic static void test(Boolean b) { System.out.print('y'); }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83185c8b13c1003978c954181e814d25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AutoBoxingTest.java", "commitBeforeChange": "7e8c39a9e3d7dea3d8b022efbc3b049165785892", "commitAfterChange": "1585d95aacd546d0fef8e25ddee2f5a6f64f7c62", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void test002()", "signatureAfterChange": "  \tpublic void test003()", "diff": ["+", "+\tpublic void test003() { // Number -> base type", "+\t\t// Integer -> int", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\ttest(new Integer(1));\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void test(int i) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// Byte -> byte", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\ttest(new Byte((byte) 1));\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void test(byte b) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// Byte -> long", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\ttest(new Byte((byte) 1));\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void test(long l) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// Character -> char", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\ttest(new Character('c'));\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void test(char c) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// Float -> float", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\ttest(new Float(0.0f));\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void test(float f) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// Double -> double", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\ttest(new Double(0.0));\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void test(double d) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// Long -> long", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\ttest(new Long(0L));\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void test(long l) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// Short -> short", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\ttest(new Short((short) 0));\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void test(short s) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t\t// Boolean -> boolean", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" +", "+\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "+\t\t\t\t\"\t\ttest(Boolean.TRUE);\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tpublic static void test(boolean b) { System.out.print('y'); }\\n\" +", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"y\"", "+\t\t);", "+\t}", "-\tpublic void test002() { // convert Byte to long?", "-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] s) {\\n\" +", "-\t\t\t\t\"\t\tnew Y().test(new Byte((byte) 1));\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"class Y {\\n\" +", "-\t\t\t\t\"\tvoid test(long i) { System.out.print('y'); }\\n\" +", "-\t\t\t\t\"}\\n\",", "-\t\t\t},", "-\t\t\t\"y\"", "-\t\t);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91aa4ddbe259bb3631c7e96ff09e0821", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "995521865cfd6e568bdd12bfb7d4a59fc50611ab", "commitAfterChange": "3efbae02af9125c723d4c2de65767b20d72aaa7a", "methodNumberBeforeChange": 1308, "methodNumberAfterChange": 1308, "signatureBeforeChange": " public void test1273()", "signatureAfterChange": " public void test1273()", "diff": ["-// FIXME javac8 rejects", "-\tthis.runConformTest(", "+\tString sourceX =", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"\t// some functor and functor instances definitions\\n\" +", "+\t\t\t\"\tstatic interface OO<T, E> { \\n\" +", "+\t\t\t\"\t\tpublic T eval(E x);\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\tstatic interface TO<T> extends OO<String, T> {\\n\" +", "+\t\t\t\"\t\tpublic String eval(T x);\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\tstatic interface TT extends TO<String> {\\n\" +", "+\t\t\t\"\t\tpublic String eval(String x);\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\tstatic final TO<Object> FUNC1 = null;\\n\" +", "+\t\t\t\"\tstatic final TT FUNC2 = null;\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"\t// some functor combinators\\n\" +", "+\t\t\t\"\tstatic <E> TO<E> combine(final TT x, final TO<? super E> y) { // # 1\\n\" +", "+\t\t\t\"\t\tSystem.out.println(\\\"#1#\\\");\\n\" +", "+\t\t\t\"\t\treturn new TO<E>() { public String eval(E o) { return x.eval(y.eval(o)); } }; \\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\tstatic <E, T> TO<T> combine(final TO<? super E> x, final OO<E, T> y) { // # 2\\n\" +", "+\t\t\t\"\t\tSystem.out.println(\\\"#2#\\\");\\n\" +", "+\t\t\t\"\t\treturn new TO<T>() { public String eval(T o) { return x.eval(y.eval(o)); } }; \\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\t// body of the test\\n\" +", "+\t\t\t\"\tstatic <E> void put(Class<E> type, TO<? super E> func) {\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\"\t\tput(Integer.class, combine(FUNC2, FUNC1));\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\\n\";", "+\tif (this.complianceLevel < ClassFileConstants.JDK1_8) {", "+\t\tthis.runConformTest(", "-\t\t\t\t\t\"X.java\",", "-\t\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\t\"\t// some functor and functor instances definitions\\n\" +", "-\t\t\t\t\t\"\tstatic interface OO<T, E> { \\n\" +", "-\t\t\t\t\t\"\t\tpublic T eval(E x);\\n\" +", "-\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\"\tstatic interface TO<T> extends OO<String, T> {\\n\" +", "-\t\t\t\t\t\"\t\tpublic String eval(T x);\\n\" +", "-\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\"\tstatic interface TT extends TO<String> {\\n\" +", "-\t\t\t\t\t\"\t\tpublic String eval(String x);\\n\" +", "-\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\"\tstatic final TO<Object> FUNC1 = null;\\n\" +", "-\t\t\t\t\t\"\tstatic final TT FUNC2 = null;\\n\" +", "-\t\t\t\t\t\"\\n\" +", "-\t\t\t\t\t\"\t// some functor combinators\\n\" +", "-\t\t\t\t\t\"\tstatic <E> TO<E> combine(final TT x, final TO<? super E> y) { // # 1\\n\" +", "-\t\t\t\t\t\"\t\tSystem.out.println(\\\"#1#\\\");\\n\" +", "-\t\t\t\t\t\"\t\treturn new TO<E>() { public String eval(E o) { return x.eval(y.eval(o)); } }; \\n\" +", "-\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\"\tstatic <E, T> TO<T> combine(final TO<? super E> x, final OO<E, T> y) { // # 2\\n\" +", "-\t\t\t\t\t\"\t\tSystem.out.println(\\\"#2#\\\");\\n\" +", "-\t\t\t\t\t\"\t\treturn new TO<T>() { public String eval(T o) { return x.eval(y.eval(o)); } }; \\n\" +", "-\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\"\t// body of the test\\n\" +", "-\t\t\t\t\t\"\tstatic <E> void put(Class<E> type, TO<? super E> func) {\\n\" +", "-\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\t\"\t\tput(Integer.class, combine(FUNC2, FUNC1));\\n\" +", "-\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\"}\\n\", // =================", "+\t\t\t\t\"X.java\",", "+\t\t\t\tsourceX,", "+\t} else {", "+\t\trunNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\tsourceX", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 28)\\n\" + ", "+\t\t\t\"\tput(Integer.class, combine(FUNC2, FUNC1));\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^\\n\" + ", "+\t\t\t\"The method combine(X.TT, X.TO<? super Object>) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\" );", "+\t}"]}], "num": 24793}
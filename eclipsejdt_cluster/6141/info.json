{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e321938eab66dde3a360d8dad7e79ee5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06af34742c0ff988b3f5465d08507118", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ExceptionLabel.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void place()", "signatureAfterChange": "  public void place()", "diff": ["+", "+public void place() {", "+", "+\t// register the handler inside the codeStream then normal place", "+\tcodeStream.registerExceptionHandler(this);", "+\tif (CodeStream.DEBUG) System.out.println(\"\\t\\t\\t\\t<place at: \"+codeStream.position+\" - \"+ this); //$NON-NLS-1$ //$NON-NLS-2$", "+\tthis.position = codeStream.position;", "+}", "-\tpublic void place() {", "-", "-\t\t// register the handler inside the codeStream then normal place", "-\t\tcodeStream.registerExceptionHandler(this);", "-\t\tsuper.place();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b2bd76d46d4ff3a83d2e916904bba75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "3b2052c623130c252652dbc4ea1f3e9fec2cb90c", "commitAfterChange": "e2a6d43d6cfc7ae0c6dc6dfaa282461be00cd7e3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r public boolean build(SimpleLookupTable deltas)", "signatureAfterChange": "\r \r public boolean build(SimpleLookupTable deltas)", "diff": ["+\t} catch (AbortIncrementalBuildException e) {\r", "+\t\t// abort the incremental build and let the batch builder handle the problem\r", "+\t\tif (JavaBuilder.DEBUG)\r", "+\t\t\tSystem.out.println(\"ABORTING incremental build... cannot find \" + e.qualifiedTypeName + //$NON-NLS-1$\r", "+\t\t\t\t\". Could have been renamed inside its existing source file.\"); //$NON-NLS-1$\r", "+\t\treturn false;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bc8f281954f628c804bb2fd43ad2972", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "04d2a0a1e95133c92ecfbd20ea638ea07dcf912a", "commitAfterChange": "688d382ce06ce4c4ed41699312bd8e5dc6e27b2c", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError, \t\tboolean returnResolutionInProgress) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError, \t\tboolean returnResolutionInProgress) \t\tthrows JavaModelException", "diff": ["+\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE) {", "+\t\t\t\t\t\tif (infoPath == RESOLUTION_IN_PROGRESS) {", "+\t\t\t\t\t\t    Util.verbose(\"CPResolution: Reentering Raw Classpath Resolution for project: \"+ this.getElementName() + \"\\n  will use empty classpath instead\");  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t    new Exception(\"TRACE OF REENTERING CALL\").printStackTrace(System.out);  //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69b08702d3aba9c7555e2d009bd2a032", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "1989a0271fdbbc2e283cb16feff75882cb9f530f", "commitAfterChange": "f9b469ddd794802b03d6c8ec2569c992634467b3", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void stopMeasuring()", "signatureAfterChange": " \tpublic void stopMeasuring()", "diff": ["-\t\tthis.testDuration += System.currentTimeMillis() - this.startMeasuring;", "+\t\tthis.nbMeasures++;", "+\t\tlong duration = System.currentTimeMillis() - this.startMeasuring;", "+\t\tif (PRINT) System.out.println(\"\t\t- n\ufffd \"+this.nbMeasures+\": \"+duration+\"ms\");", "+\t\tthis.testDuration += duration;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83993ee60147f527ed74b60597bdb3dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJarFileToIndex.java", "commitBeforeChange": "69581fd8fb334567fa8715ab18bed6747a9bcf4f", "commitAfterChange": "82743b33822fbb1e8747641a56800f2dd66cbc54", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-\t\tif (progressMonitor != null && progressMonitor.isCanceled()) return true;", "+\t\tif (this.isCancelled || progressMonitor != null && progressMonitor.isCanceled()) return true;", "+\t\t\t\tif (this.isCancelled) {", "+\t\t\t\t\tif (JobManager.VERBOSE)", "+\t\t\t\t\t\tJobManager.verbose(\"-> indexing of \" + zip.getName() + \" has been cancelled\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+", "-\t\t\t\t/*", "-\t\t\t\t * Index the jar for the first time or reindex the jar in case the previous index file has been corrupted", "-\t\t\t\t */", "+\t\t\t\t// Index the jar for the first time or reindex the jar in case the previous index file has been corrupted"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92ba3d3ae8a79a44642e7351cb9df2e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "03d745f008ce409a4b95d8d5bfa387477a4636e8", "commitAfterChange": "cfa5c1f47090c25e060f31a67b980e7a46ebf3d4", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \t \tprivate static void resolvedChainedLibraries(IPath jarPath, HashSet visited, ArrayList result)", "signatureAfterChange": " \t \tprivate static void resolvedChainedLibraries(IPath jarPath, HashSet visited, ArrayList result)", "diff": ["+\t\t\t\t\t// Ignore if segment count is Zero (https://bugs.eclipse.org/bugs/show_bug.cgi?id=308150)", "+\t\t\t\t\tif (calledJar.segmentCount() == 0) {", "+\t\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE_FAILURE) {", "+\t\t\t\t\t\t\tUtil.verbose(\"Invalid Class-Path entry \" + calledFileName + \" in manifest of jar file: \" + jarPath.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a685c14904ce2918baa1bd5d8cc4b1bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJarFileToIndex.java", "commitBeforeChange": "d5bf24a5adf23d2657a6e779176b2c9b14138ec2", "commitAfterChange": "fe650c9f34b5f46aea24c9c914c82b1f8d0ec026", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\t\r \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": "\t\r \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["+\t\t\t\t\tif (this.isCancelled) {\r", "+\t\t\t\t\t\tif (JobManager.VERBOSE) {\r", "+\t\t\t\t\t\t\tSystem.out.println(\"INDEX : \" //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t+zip.getName() + \" CANCELLED\"); //$NON-NLS-1$\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\treturn FAILED;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\t\r"]}], "num": 6141}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9b249908b6d73ddd8e62b8b55dee3f6", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26e15e2c61c298aba7f9cf90ed3db1f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "2fdd800912ee4f65c51a2ec384533d1146c71af7", "commitAfterChange": "844f82aaef831e55c4827a65ccd98caed0cd08f3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean isFieldUseDeprecated(FieldBinding field, Scope scope, boolean isStrictlyAssigned)", "signatureAfterChange": " \t \tpublic final boolean isFieldUseDeprecated(FieldBinding field, Scope scope, boolean isStrictlyAssigned)", "diff": ["-\t*/", "-", "-\t\tif (!isStrictlyAssigned && field.isPrivate() && !scope.isDefinedInField(field)) {", "+\t", "+\t\tif (!isStrictlyAssigned && (field.isPrivate() || (field.declaringClass != null && field.declaringClass.isLocalType())) && !scope.isDefinedInField(field)) {", "-\t\t\tfield.modifiers |= AccPrivateUsed;", "+\t\t\tfield.modifiers |= AccLocallyUsed;", "-", "+\t", "-", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1ec7d800d69a820e9e1e2351116d8ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "11ebb7eac78033ed4b8b7f8bf2dae372f511166c", "commitAfterChange": "ba04cb6ba4b5497c184d335aa777690304f7e67a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " boolean isInterfaceMethodImplemented(MethodBinding inheritedMethod, MethodBinding existingMethod, ReferenceBinding superType)", "signatureAfterChange": " boolean isInterfaceMethodImplemented(MethodBinding inheritedMethod, MethodBinding existingMethod, ReferenceBinding superType)", "diff": ["-\t\t&& inheritedMethod.returnType == existingMethod.returnType // keep around to produce bridge methods", "+\t\t&& (inheritedMethod.returnType == existingMethod.returnType\t// need to keep around to produce bridge methods? ...", "+\t\t\t|| (this.type != existingMethod.declaringClass \t\t\t// ... not if inheriting the bridge situation from a superclass", "+\t\t\t\t\t&& !existingMethod.declaringClass.isInterface()))"]}], "num": 59687}
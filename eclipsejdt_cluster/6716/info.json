{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80a76bbf63323a9bd46ba5d46963a950", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42f1c82998bd6a31810a1bf9af76da22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyTests.java", "commitBeforeChange": "0e6753a185999404d06eadf4d1578289f19a00e3", "commitAfterChange": "e989e935df57599185e368219c9565383384c390", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void testCancelMakeConsistent() throws JavaModelException", "signatureAfterChange": " public void testCancelMakeConsistent() throws JavaModelException", "diff": ["-\tthis.copy.makeConsistent(monitor);", "+\ttry {", "+\t\tthis.copy.makeConsistent(monitor);", "+\t} catch (OperationCanceledException e) {", "+\t\t// got exception", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed893c76e5cba5c96849cf88d00c5e1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "c3c566a914f3d94e9c9bd5dba71e015077681183", "commitAfterChange": "d13325d285185f513ba4e1343c1dad363338cb19", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "diff": ["-\t\tengine.searchAllTypeNames(", "-\t\t\tnull,", "-\t\t\t\"!@$#!@\".toCharArray(), //$NON-NLS-1$", "-\t\t\tSearchPattern.R_PATTERN_MATCH | SearchPattern.R_CASE_SENSITIVE,", "-\t\t\tIJavaSearchConstants.CLASS,", "-\t\t\tscope, ", "-\t\t\tnew TypeNameRequestor() {", "-\t\t\t\tpublic void acceptType(", "-\t\t\t\t\tint modifiers,", "-\t\t\t\t\tchar[] packageName,", "-\t\t\t\t\tchar[] simpleTypeName,", "-\t\t\t\t\tchar[][] enclosingTypeNames,", "-\t\t\t\t\tString path) {", "-\t\t\t\t\t// no type to accept", "-\t\t\t\t}", "-\t\t\t},", "-\t\t\t// will not activate index query caches if indexes are not ready, since it would take to long", "-\t\t\t// to wait until indexes are fully rebuild", "-\t\t\tIJavaSearchConstants.CANCEL_IF_NOT_READY_TO_SEARCH,", "-\t\t\tmonitor == null ? null : new SubProgressMonitor(monitor, 99) // 99% of the time is spent in the dummy search", "-\t\t); ", "+\t\ttry {", "+\t\t\tengine.searchAllTypeNames(", "+\t\t\t\tnull,", "+\t\t\t\t\"!@$#!@\".toCharArray(), //$NON-NLS-1$", "+\t\t\t\tSearchPattern.R_PATTERN_MATCH | SearchPattern.R_CASE_SENSITIVE,", "+\t\t\t\tIJavaSearchConstants.CLASS,", "+\t\t\t\tscope, ", "+\t\t\t\tnew TypeNameRequestor() {", "+\t\t\t\t\tpublic void acceptType(", "+\t\t\t\t\t\tint modifiers,", "+\t\t\t\t\t\tchar[] packageName,", "+\t\t\t\t\t\tchar[] simpleTypeName,", "+\t\t\t\t\t\tchar[][] enclosingTypeNames,", "+\t\t\t\t\t\tString path) {", "+\t\t\t\t\t\t// no type to accept", "+\t\t\t\t\t}", "+\t\t\t\t},", "+\t\t\t\t// will not activate index query caches if indexes are not ready, since it would take to long", "+\t\t\t\t// to wait until indexes are fully rebuild", "+\t\t\t\tIJavaSearchConstants.CANCEL_IF_NOT_READY_TO_SEARCH,", "+\t\t\t\tmonitor == null ? null : new SubProgressMonitor(monitor, 99) // 99% of the time is spent in the dummy search", "+\t\t\t); ", "+\t\t} catch (OperationCanceledException e) {", "+\t\t\t// indexes were not ready", "+\t\t}"]}], "num": 6716}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ced9090c4147a71ddc83aec5b067532", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cdff8086231b624842b20b59cb4dab7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ThreadSafetyTests.java", "commitBeforeChange": "0c4df3b7ae51bae537a008281315a0b284492162", "commitAfterChange": "d3183838db02f64daed6afe0d19fa23bbbe5c6e0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void testDeadlock01() throws CoreException", "signatureAfterChange": " public void testDeadlock01() throws CoreException", "diff": ["-\t\tContainerInitializer.setInitializer(new ClasspathInitializerTests.DefaultContainerInitializer(new String[] {\"P\", \"\"}){", "-\t\t\tpublic void initialize(IPath containerPath, IJavaProject project) throws CoreException {", "-\t\t\t\tSystem.out.println(Thread.currentThread() + \"initializer has started: attempting to acquire workspace lock\");", "-\t\t\t\tsuper.initialize(containerPath, project);", "-\t\t\t\tSystem.out.println(Thread.currentThread() + \"initializer has finished\");", "-\t\t\t}", "-", "-\t\t});", "+\t\tContainerInitializer.setInitializer(new ClasspathInitializerTests.DefaultContainerInitializer(new String[] {\"P\", \"\"}){", "+\t\t\tpublic void initialize(IPath containerPath, IJavaProject project) throws CoreException {", "+\t\t\t\tpermissionToModifyResource.release();", "+\t\t\t\tSystem.out.println(Thread.currentThread() + \"initializer has started: attempting to acquire workspace lock\");", "+\t\t\t\tsuper.initialize(containerPath, project);", "+\t\t\t\tSystem.out.println(Thread.currentThread() + \"initializer has finished\");", "+\t\t\t}", "+", "+\t\t});", "+", "-\t\t\t\t\t\t\tpermissionToModifyResource.release();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36cfa43cd18500f3d9c4ca75c4546d34", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathInitializerTests.java", "commitBeforeChange": "3a52394f0d22844465ca678eae001b22da348629", "commitAfterChange": "204668dea8f27b8498b13996f1332d4610d869bb", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " public void testContainerInitializer17() throws CoreException", "signatureAfterChange": " public void testContainerInitializer17() throws CoreException", "diff": ["-\t\t\t\t", "+\t\tContainerInitializer.setInitializer(new DefaultContainerInitializer(new String[] {\"P3\", \"/P1/lib.jar\"}));", "+\t\tcreateJavaProject(", "+\t\t\t\t\"P3\", ", "+\t\t\t\tnew String[] {}, ", "+\t\t\t\tnew String[] {\"org.eclipse.jdt.core.tests.model.TEST_CONTAINER\"}, ", "+\t\t\t\t\"\");", "-\t\t// simulate concurrency (another thread is initializing all containers in parallel and thus this flag is set to false)", "-\t\tJavaModelManager.getJavaModelManager().deltaState.rootsAreStale = false;", "-\t\t", "-\t\tContainerInitializer.setInitializer(new DefaultContainerInitializer(new String[] {\"P2\", \"/P1/lib.jar\"}));", "-\t\tContainerInitializer.initializer.initialize(new Path(\"org.eclipse.jdt.core.tests.model.TEST_CONTAINER\"), p2);", "+\t\tContainerInitializer.setInitializer(new DefaultContainerInitializer(new String[] {\"P2\", \"/P1/lib.jar\"}) {", "+\t        public void initialize(IPath containerPath, IJavaProject project) throws CoreException {", "+\t        \t// simulate concurrency (another thread is initializing all containers in parallel and thus this flag is set to true)", "+\t        \tJavaModelManager.getJavaModelManager().batchContainerInitializations = true;", "+\t            super.initialize(containerPath, project);", "+\t        }", "+\t\t});", "+\t\tp2.getResolvedClasspath(true);", "+\t\tdeleteProject(\"P3\");"]}], "num": 15065}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d3349c522703b3226256d0b1125542c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "154e2307351d78e66a21876cdbbdce22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "22dfb29015980684f8c134336f7b55238ec69ca1", "commitAfterChange": "ad3220b4b434313891b223270deb616283ce8051", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, boolean valueRequired)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, boolean valueRequired)", "diff": ["-\t\t\t\t\t\t&& currentScope.needBlankFinalFieldInitializationCheck(fieldBinding)", "-\t\t\t\t\t\t&& !flowInfo.isDefinitelyAssigned(fieldBinding)) {", "-\t\t\t\t\tcurrentScope.problemReporter().uninitializedBlankFinalField(fieldBinding, this);", "+\t\t\t\t\t\t&& currentScope.needBlankFinalFieldInitializationCheck(fieldBinding)) {", "+\t\t\t\t\tFlowInfo fieldInits = flowContext.getInitsForFinalBlankInitializationCheck(fieldBinding.declaringClass.original(), flowInfo);", "+\t\t\t\t\tif (!fieldInits.isDefinitelyAssigned(fieldBinding)) {", "+\t\t\t\t\t\tcurrentScope.problemReporter().uninitializedBlankFinalField(fieldBinding, this);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1dae3bedcd2cc0d1783c2d2fef7bfbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "22dfb29015980684f8c134336f7b55238ec69ca1", "commitAfterChange": "ad3220b4b434313891b223270deb616283ce8051", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseAssignment(BlockScope currentScope, \tFlowContext flowContext, \tFlowInfo flowInfo, Assignment assignment, boolean isCompound)", "signatureAfterChange": "  public FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, Assignment assignment, boolean isCompound)", "diff": ["-public FlowInfo analyseAssignment(BlockScope currentScope, \tFlowContext flowContext, \tFlowInfo flowInfo, Assignment assignment, boolean isCompound) {", "+public FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, Assignment assignment, boolean isCompound) {", "-\t\t\t&& currentScope.needBlankFinalFieldInitializationCheck(this.binding)", "-\t\t\t&& (!flowInfo.isDefinitelyAssigned(this.binding))) {", "-\t\t\tcurrentScope.problemReporter().uninitializedBlankFinalField(this.binding, this);", "-\t\t\t// we could improve error msg here telling \"cannot use compound assignment on final blank field\"", "+\t\t\t&& currentScope.needBlankFinalFieldInitializationCheck(this.binding)) {", "+\t\t\tFlowInfo fieldInits = flowContext.getInitsForFinalBlankInitializationCheck(this.binding.declaringClass.original(), flowInfo);", "+\t\t\tif (!fieldInits.isDefinitelyAssigned(this.binding)) {", "+\t\t\t\tcurrentScope.problemReporter().uninitializedBlankFinalField(this.binding, this);", "+\t\t\t\t// we could improve error msg here telling \"cannot use compound assignment on final blank field\"", "+\t\t\t}"]}], "num": 64759}
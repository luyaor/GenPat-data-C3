{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85eddb5af04961e433a1685eded9e16d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a896f04d721142114fa6bfd9e1533a22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic AST(Map options)", "signatureAfterChange": " \tpublic AST(Map options)", "diff": ["-\t */", "-\tpublic AST(Map options) {", "-\t\tthis(JLS2);", "-\t\tObject sourceLevelOption = options.get(JavaCore.COMPILER_SOURCE);", "-\t\tlong sourceLevel = ClassFileConstants.JDK1_3;", "-\t\tif (JavaCore.VERSION_1_4.equals(sourceLevelOption)) {", "-\t\t\tsourceLevel = ClassFileConstants.JDK1_4;", "-\t\t} else if (JavaCore.VERSION_1_5.equals(sourceLevelOption)) {", "-\t\t\tsourceLevel = ClassFileConstants.JDK1_5;", "-\t\t}", "-\t\tObject complianceLevelOption = options.get(JavaCore.COMPILER_COMPLIANCE);", "-\t\tlong complianceLevel = ClassFileConstants.JDK1_3;", "-\t\tif (JavaCore.VERSION_1_4.equals(complianceLevelOption)) {", "-\t\t\tcomplianceLevel = ClassFileConstants.JDK1_4;", "-\t\t} else if (JavaCore.VERSION_1_5.equals(complianceLevelOption)) {", "-\t\t\tcomplianceLevel = ClassFileConstants.JDK1_5;", "-\t\t}", "-\t\t// override scanner if 1.4 or 1.5 asked for", "-\t\tthis.scanner = new Scanner(", "-\t\t\ttrue /*comment*/,", "-\t\t\ttrue /*whitespace*/,", "-\t\t\tfalse /*nls*/,", "-\t\t\tsourceLevel /*sourceLevel*/,", "-\t\t\tcomplianceLevel /*complianceLevel*/,", "-\t\t\tnull/*taskTag*/,", "-\t\t\tnull/*taskPriorities*/,", "-\t\t\ttrue/*taskCaseSensitive*/);", "-\t}", "+\t */", "+\tpublic AST(Map options) {", "+\t\tthis(JLS2);", "+\t\tObject sourceLevelOption = options.get(JavaCore.COMPILER_SOURCE);", "+\t\tlong sourceLevel = ClassFileConstants.JDK1_3;", "+\t\tif (JavaCore.VERSION_1_4.equals(sourceLevelOption)) {", "+\t\t\tsourceLevel = ClassFileConstants.JDK1_4;", "+\t\t} else if (JavaCore.VERSION_1_5.equals(sourceLevelOption)) {", "+\t\t\tsourceLevel = ClassFileConstants.JDK1_5;", "+\t\t} else if (JavaCore.VERSION_1_7.equals(sourceLevelOption)) {", "+\t\t\tsourceLevel = ClassFileConstants.JDK1_7;", "+\t\t}", "+\t\tObject complianceLevelOption = options.get(JavaCore.COMPILER_COMPLIANCE);", "+\t\tlong complianceLevel = ClassFileConstants.JDK1_3;", "+\t\tif (JavaCore.VERSION_1_4.equals(complianceLevelOption)) {", "+\t\t\tcomplianceLevel = ClassFileConstants.JDK1_4;", "+\t\t} else if (JavaCore.VERSION_1_5.equals(complianceLevelOption)) {", "+\t\t\tcomplianceLevel = ClassFileConstants.JDK1_5;", "+\t\t} else if (JavaCore.VERSION_1_7.equals(complianceLevelOption)) {", "+\t\t\tcomplianceLevel = ClassFileConstants.JDK1_7;", "+\t\t}", "+\t\t// override scanner if 1.4 or 1.5 asked for", "+\t\tthis.scanner = new Scanner(", "+\t\t\ttrue /*comment*/,", "+\t\t\ttrue /*whitespace*/,", "+\t\t\tfalse /*nls*/,", "+\t\t\tsourceLevel /*sourceLevel*/,", "+\t\t\tcomplianceLevel /*complianceLevel*/,", "+\t\t\tnull/*taskTag*/,", "+\t\t\tnull/*taskPriorities*/,", "+\t\t\ttrue/*taskCaseSensitive*/);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df18fce37e8972b0c0f76ff3a9ea0a46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "8a3b59860042c242d4e16ee3f50746d591d948f0", "commitAfterChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "signatureAfterChange": "  private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[][][] missingTypeNames)", "diff": ["+\tif (isInterface() && (methodModifiers & ClassFileConstants.AccAbstract) == 0) {", "+\t\t// see https://bugs.eclipse.org/388954", "+\t\tif (sourceLevel >= ClassFileConstants.JDK1_8)", "+\t\t\tmethodModifiers |= ExtraCompilerModifiers.AccDefaultMethod;", "+\t\telse", "+\t\t\tmethodModifiers |= ClassFileConstants.AccAbstract;", "+\t}"]}], "num": 45786}
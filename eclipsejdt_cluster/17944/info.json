{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8091dc4d97d3e4aeac8773e9d3af0273", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b49866bd030dfbf1f74af873a242fe9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "bb811cafdba11489b23b9c8cd6c46c237bf0db24", "commitAfterChange": "2a64f816a9e1e382be3c6f39875e5c587a7235c0", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 24, "signatureBeforeChange": " private int[] readDocumentArray(DataInputStream stream, int arraySize) throws IOException", "signatureAfterChange": " private int[] readStreamDocumentArray(FileInputStream stream, int arraySize) throws IOException", "diff": ["-private int[] readDocumentArray(DataInputStream stream, int arraySize) throws IOException {", "-\tint[] result = new int[arraySize];", "-\tswitch (this.documentReferenceSize) {", "-\t\tcase 1 :", "-\t\t\tfor (int i = 0; i < arraySize; i++)", "-\t\t\t\tresult[i] = stream.readUnsignedByte();", "-\t\t\tbreak;", "-\t\tcase 2 :", "-\t\t\tfor (int i = 0; i < arraySize; i++)", "-\t\t\t\tresult[i] = stream.readUnsignedShort();", "-\t\t\tbreak;", "-\t\tdefault :", "-\t\t\tfor (int i = 0; i < arraySize; i++)", "-\t\t\t\tresult[i] = stream.readInt();", "-\t\t\tbreak;", "-\t}", "-\treturn result;", "-}", "+}", "+private int[] readStreamDocumentArray(FileInputStream stream, int arraySize) throws IOException {", "+\tint[] indexes = new int[arraySize];", "+\tif (arraySize == 0) return indexes;", "+\tint idx = this.bufferIndex;", "+\tint bufferSize = BUFFER_READ_SIZE;", "+\tswitch (this.documentReferenceSize) {", "+\t\tcase 1 :", "+\t\t\tthis.bufferIndex += arraySize;", "+\t\t\tif (this.bufferIndex < bufferSize) {", "+\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "+\t\t\t\t\tindexes[i] = streamBuffer[idx++] & 0xFF;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tint i = 0;", "+\t\t\t\twhile (idx < bufferSize) {", "+\t\t\t\t\tindexes[i++] = streamBuffer[idx++] & 0xFF;", "+\t\t\t\t}", "+\t\t\t\tthis.bufferIndex -= bufferSize;", "+\t\t\t\tint readSize = this.streamEnd == -1 ? BUFFER_READ_SIZE : this.streamEnd - this.streamPos;", "+\t\t\t\tif (readSize > bufferSize) readSize = bufferSize;", "+\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, bufferSize);", "+\t\t\t\tidx = 0;", "+\t\t\t\twhile (idx < this.bufferIndex) {", "+\t\t\t\t\tindexes[i++] = streamBuffer[idx++] & 0xFF;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 2 :", "+\t\t\tthis.bufferIndex += arraySize << 1;", "+\t\t\tif (this.bufferIndex < bufferSize) {", "+\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "+\t\t\t\t\tint val = (streamBuffer[idx++]&0xFF)<<8;", "+\t\t\t\t\tindexes[i] = val + (streamBuffer[idx++] & 0xFF);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tint readSize = this.streamEnd == -1 ? BUFFER_READ_SIZE : this.streamEnd - this.streamPos;", "+\t\t\t\tif (readSize > bufferSize) readSize = bufferSize;", "+\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "+\t\t\t\t\tint val = (streamBuffer[idx++]&0xFF)<<8;", "+\t\t\t\t\tif (idx == bufferSize) {", "+\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t}", "+\t\t\t\t\tindexes[i] = val + (streamBuffer[idx++] & 0xFF);", "+\t\t\t\t\tif (idx == bufferSize) {", "+\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tthis.bufferIndex -= bufferSize;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tdefault :", "+\t\t\tthis.bufferIndex += arraySize << 2;", "+\t\t\tif (this.bufferIndex < bufferSize) {", "+\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "+\t\t\t\t\tint val = (streamBuffer[idx++]&0xFF)<<24;", "+\t\t\t\t\tval += (streamBuffer[idx++]&0xFF)<<16;", "+\t\t\t\t\tval += (streamBuffer[idx++]&0xFF)<<8;", "+\t\t\t\t\tindexes[i] += val + (streamBuffer[idx++]&0xFF);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tint readSize = this.streamEnd == -1 ? BUFFER_READ_SIZE : this.streamEnd - this.streamPos;", "+\t\t\t\tif (readSize > bufferSize) readSize = bufferSize;", "+\t\t\t\tfor (int i = 0; i < arraySize; i++) {", "+\t\t\t\t\tint val = (streamBuffer[idx++]&0xFF)<<24;", "+\t\t\t\t\tif (idx == bufferSize) {", "+\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t}", "+\t\t\t\t\tval += (streamBuffer[idx++]&0xFF)<<16;", "+\t\t\t\t\tif (idx == bufferSize) {", "+\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t}", "+\t\t\t\t\tval += (streamBuffer[idx++]&0xFF)<<8;", "+\t\t\t\t\tif (idx == bufferSize) {", "+\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t}", "+\t\t\t\t\tindexes[i] += val + (streamBuffer[idx++]&0xFF);", "+\t\t\t\t\tif (idx == bufferSize) {", "+\t\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tthis.bufferIndex -= bufferSize;", "+\t\t\t}", "+\t\t\tbreak;", "+\t}", "+\treturn indexes;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6db31092600cd99fca42184fcab681c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "bb811cafdba11489b23b9c8cd6c46c237bf0db24", "commitAfterChange": "2a64f816a9e1e382be3c6f39875e5c587a7235c0", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 29, "signatureBeforeChange": " private void writeDocumentNumbers(int[] documentNumbers, DataOutputStream stream) throws IOException", "signatureAfterChange": " private void writeDocumentNumbers(int[] documentNumbers, FileOutputStream stream) throws IOException", "diff": ["-private void writeDocumentNumbers(int[] documentNumbers, DataOutputStream stream) throws IOException {", "+private void writeDocumentNumbers(int[] documentNumbers, FileOutputStream stream) throws IOException {", "-\tstream.writeInt(length);", "+\twriteStreamInt(stream, length);", "+\tint idx = this.bufferIndex;", "-\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\tstream.writeByte(documentNumbers[i]);", "+\t\t\tthis.bufferIndex += length;", "+\t\t\tif (this.bufferIndex < BUFFER_WRITE_SIZE) {", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) documentNumbers[i];", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) documentNumbers[i];", "+\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "+\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.streamEnd += length;", "-\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\tstream.writeShort(documentNumbers[i]);", "+\t\t\tint size = length << 1;", "+\t\t\tthis.bufferIndex += size;", "+\t\t\tif (this.bufferIndex < BUFFER_WRITE_SIZE) {", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (documentNumbers[i] >> 8);", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) documentNumbers[i];", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (documentNumbers[i] >> 8);", "+\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "+\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) documentNumbers[i];", "+\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "+\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.streamEnd += size;", "-\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\tstream.writeInt(documentNumbers[i]);", "+\t\t\tsize = length << 2;", "+\t\t\tthis.bufferIndex += size;", "+\t\t\tif (this.bufferIndex < BUFFER_WRITE_SIZE) {", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tint number = documentNumbers[i];", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 24);", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 16);", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 8);", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) number;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tint number = documentNumbers[i];", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 24);", "+\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "+\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 16);", "+\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "+\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 8);", "+\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "+\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) number;", "+\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "+\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.streamEnd += size;"]}], "num": 17944}
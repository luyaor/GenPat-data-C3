{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a6b438032a95479e1d15460c8626e38", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "153b95523a320fbc2ef7b04b156504d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "758f55a5a64497d7398f91effe575e974d834411", "commitAfterChange": "a920298c522cfd65cad97a6c929cd34516c3baed", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r public void replace(int position, int length, String text)", "signatureAfterChange": "\r public void replace(int position, int length, String text)", "diff": ["-\tif (!isReadOnly()) {\r", "-\t\tint textLength = 0;\r", "-\t\tif (text != null) {\r", "-\t\t\ttextLength = text.length();\r", "-\t\t}\r", "-\t\t\r", "-\t\tsynchronized (this.lock) {\r", "-\t\t\t// move gap\r", "-\t\t\tadjustGap(position + length, textLength - length);\r", "-\r", "-\t\t\t// overwrite\r", "-\t\t\tint min = Math.min(textLength, length);\r", "-\t\t\tfor (int i = position, j = 0; i < position + min; i++, j++)\r", "-\t\t\t\tthis.contents[i] = text.charAt(j);\r", "-\t\t\tif (length > textLength) {\r", "-\t\t\t\t// enlarge the gap\r", "-\t\t\t\tthis.gapStart -= (length - textLength);\r", "-\t\t\t} else\r", "-\t\t\t\tif (textLength > length) {\r", "-\t\t\t\t\t// shrink gap\r", "-\t\t\t\t\tthis.gapStart += (textLength - length);\r", "-\t\t\t\t\tfor (int i = length; i < textLength; i++)\r", "-\t\t\t\t\t\tthis.contents[position + i] = text.charAt(i);\r", "-\t\t\t\t}\r", "-\t\t}\r", "-\t\tthis.flags |= F_HAS_UNSAVED_CHANGES;\r", "-\t\t\r", "-\t\tnotifyChanged(new BufferChangedEvent(this, position, length, text));\r", "-\t}\r", "+\tthis.replace(position, length, text == null ? null : text.toCharArray());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c82a9232d1aa33975e290a878632342", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "aa717ce56e721f6ed4fc92594ba56da9f08c982e", "commitAfterChange": "5e93996c6b4562ee73fa5730afbd832d1574cd08", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void printEmptyLines(int linesNumber)", "signatureAfterChange": " \tpublic void printEmptyLines(int linesNumber)", "diff": ["+\t\tthis.printEmptyLines(linesNumber, this.scanner.getCurrentTokenEndPosition() + 1);", "+\t}", "-\t\taddInsertEdit(this.scanner.getCurrentTokenEndPosition() + 1, buffer.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6578a5d6206ec7387fdfbe076c14664", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "1e679d1a20634ff7b631ac043f1b9d1b716bcd23", "commitAfterChange": "b8eb7657f5ec170ca0c9bc64448d616c6f682244", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  \tprivate void printEmptyLines(int linesNumber, int insertPosition)", "signatureAfterChange": "  \tprivate void printEmptyLines(int linesNumber, int insertPosition)", "diff": ["-\t\tif (this.nlsTagCounter > 0) {", "-\t\t\treturn;", "-\t\t}", "-\t\tStringBuffer buffer = new StringBuffer();", "-\t\tif (lastNumberOfNewLines == 0) {", "-\t\t\tlinesNumber++; // add an extra line breaks", "-\t\t\tfor (int i = 0; i < linesNumber; i++) {", "-\t\t\t\tbuffer.append(this.lineSeparator);", "-\t\t\t}", "-\t\t\tlastNumberOfNewLines += linesNumber;", "-\t\t\tline += linesNumber;", "-\t\t\tcolumn = 1;", "-\t\t\tneedSpace = false;", "-\t\t\tthis.pendingSpace = false;", "-\t\t} else if (lastNumberOfNewLines == 1) {", "-\t\t\tfor (int i = 0; i < linesNumber; i++) {", "-\t\t\t\tbuffer.append(this.lineSeparator);", "-\t\t\t}", "-\t\t\tlastNumberOfNewLines += linesNumber;", "-\t\t\tline += linesNumber;", "-\t\t\tcolumn = 1;", "-\t\t\tneedSpace = false;", "-\t\t\tthis.pendingSpace = false;", "-\t\t} else {", "-\t\t\tif ((lastNumberOfNewLines - 1) >= linesNumber) {", "-\t\t\t\t// there is no need to add new lines", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tfinal int realNewLineNumber = linesNumber - lastNumberOfNewLines + 1;", "-\t\t\tfor (int i = 0; i < realNewLineNumber; i++) {", "-\t\t\t\tbuffer.append(this.lineSeparator);", "-\t\t\t}", "-\t\t\tlastNumberOfNewLines += realNewLineNumber;", "-\t\t\tline += realNewLineNumber;", "-\t\t\tcolumn = 1;", "-\t\t\tneedSpace = false;", "-\t\t\tthis.pendingSpace = false;", "-\t\t}", "-\t\taddInsertEdit(insertPosition, buffer.toString());", "+        final String buffer = getEmptyLines(linesNumber);", "+        if (EMPTY_STRING == buffer) return;", "+        ", "+\t\taddInsertEdit(insertPosition, buffer);"]}], "num": 23825}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7498efc65dad280403b910f062545b0f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5cc3ce68c8c8a76ae90a7e85274b0a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tprivate void disassemble(ICodeAttribute codeAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": " \t \tprivate void disassemble(ICodeAttribute codeAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["-\t\tDefaultBytecodeVisitor visitor = new DefaultBytecodeVisitor(codeAttribute.getCodeLength(), buffer, lineSeparator, tabNumber);", "+\t\tDefaultBytecodeVisitor visitor = new DefaultBytecodeVisitor(codeAttribute, buffer, lineSeparator, tabNumber);", "-\t\t\tbuffer.append(\"Class format Exception\");//$NON-NLS-1$", "+\t\t\tbuffer.append(Util.bind(\"classformat.classformatexception\"));//$NON-NLS-1$", "-\t\t\t\tbuffer", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.exceptiontablefrom\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(exceptionTableEntry.getStartPC())", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.exceptiontableto\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(exceptionTableEntry.getEndPC())", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.exceptiontablegoto\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(exceptionTableEntry.getHandlerPC())", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.exceptiontablewhen\")); //$NON-NLS-1$", "-\t\t\t\tif (exceptionTableEntry.getCatchTypeIndex() == 0) {", "-\t\t\t\t\tbuffer.append(ANY_EXCEPTION);", "-\t\t\t\t} else {", "-\t\t\t\t\tchar[] catchType = exceptionTableEntry.getCatchType();", "+\t\t\t\tchar[] catchType;", "+\t\t\t\tif (exceptionTableEntry.getCatchTypeIndex() != 0) {", "+\t\t\t\t\tcatchType = exceptionTableEntry.getCatchType();", "-\t\t\t\t\tbuffer.append(catchType);", "+\t\t\t\t} else {", "+\t\t\t\t\tcatchType = ANY_EXCEPTION;", "+\t\t\t\tbuffer.append(Util.bind(\"classfileformat.exceptiontableentry\", //$NON-NLS-1$", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\tInteger.toString(exceptionTableEntry.getStartPC()),", "+\t\t\t\t\t\tInteger.toString(exceptionTableEntry.getEndPC()),", "+\t\t\t\t\t\tInteger.toString(exceptionTableEntry.getHandlerPC()),", "+\t\t\t\t\t\tnew String(catchType)", "+\t\t\t\t\t}));", "-\t\t\tbuffer", "-\t\t\t\t.append(Util.bind(\"classfileformat.exceptiontablefrom\")) //$NON-NLS-1$", "-\t\t\t\t.append(exceptionTableEntry.getStartPC())", "-\t\t\t\t.append(Util.bind(\"classfileformat.exceptiontableto\")) //$NON-NLS-1$", "-\t\t\t\t.append(exceptionTableEntry.getEndPC())", "-\t\t\t\t.append(Util.bind(\"classfileformat.exceptiontablegoto\")) //$NON-NLS-1$", "-\t\t\t\t.append(exceptionTableEntry.getHandlerPC())", "-\t\t\t\t.append(Util.bind(\"classfileformat.exceptiontablewhen\")); //$NON-NLS-1$", "-\t\t\tif (exceptionTableEntry.getCatchTypeIndex() == 0) {", "-\t\t\t\tbuffer.append(ANY_EXCEPTION);", "-\t\t\t} else {", "-\t\t\t\tchar[] catchType = exceptionTableEntry.getCatchType();", "+\t\t\tchar[] catchType;", "+\t\t\tif (exceptionTableEntry.getCatchTypeIndex() != 0) {", "+\t\t\t\tcatchType = exceptionTableEntry.getCatchType();", "-\t\t\t\tbuffer.append(catchType);", "+\t\t\t} else {", "+\t\t\t\tcatchType = ANY_EXCEPTION;", "+\t\t\tbuffer.append(Util.bind(\"classfileformat.exceptiontableentry\", //$NON-NLS-1$", "+\t\t\t\tnew String[] {", "+\t\t\t\t\tInteger.toString(exceptionTableEntry.getStartPC()),", "+\t\t\t\t\tInteger.toString(exceptionTableEntry.getEndPC()),", "+\t\t\t\t\tInteger.toString(exceptionTableEntry.getHandlerPC()),", "+\t\t\t\t\tnew String(catchType)", "+\t\t\t\t}));", "-\t\t\t\tbuffer", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.linenumbertablefrom\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(lineattributesEntries[i][0])", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.linenumbertableto\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(lineattributesEntries[i][1])", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.linenumbertableclose\")); //$NON-NLS-1$", "+\t\t\t\tbuffer.append(Util.bind(\"classfileformat.linenumbertableentry\", //$NON-NLS-1$", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\tInteger.toString(lineattributesEntries[i][0]),", "+\t\t\t\t\t\tInteger.toString(lineattributesEntries[i][1])", "+\t\t\t\t\t}));", "-\t\t\tbuffer", "-\t\t\t\t.append(Util.bind(\"classfileformat.linenumbertablefrom\")) //$NON-NLS-1$", "-\t\t\t\t.append(lineattributesEntries[lineAttributeLength - 1][0])", "-\t\t\t\t.append(Util.bind(\"classfileformat.linenumbertableto\")) //$NON-NLS-1$", "-\t\t\t\t.append(lineattributesEntries[lineAttributeLength - 1][1])", "-\t\t\t\t.append(Util.bind(\"classfileformat.linenumbertableclose\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(Util.bind(\"classfileformat.linenumbertableentry\", //$NON-NLS-1$", "+\t\t\t\tnew String[] {", "+\t\t\t\t\tInteger.toString(lineattributesEntries[lineAttributeLength - 1][0]),", "+\t\t\t\t\tInteger.toString(lineattributesEntries[lineAttributeLength - 1][1])", "+\t\t\t\t}));", "-\t\t\t\tbuffer", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablefrom\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(startPC)", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletableto\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(startPC + length)", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocalname\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(localVariableTableEntry.getName())", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocalindex\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(index)", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocaltype\")); //$NON-NLS-1$", "-\t\t\t\tbuffer.append(localVariableTableEntry.getDescriptor());", "+\t\t\t\tbuffer.append(Util.bind(\"classfileformat.localvariabletableentry\", //$NON-NLS-1$", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\tInteger.toString(startPC),", "+\t\t\t\t\t\tInteger.toString(startPC + length),", "+\t\t\t\t\t\tnew String(localVariableTableEntry.getName()),", "+\t\t\t\t\t\tInteger.toString(index),", "+\t\t\t\t\t\tnew String(localVariableTableEntry.getDescriptor())", "+\t\t\t\t\t}));", "-\t\t\tbuffer", "-\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablefrom\")) //$NON-NLS-1$", "-\t\t\t\t.append(startPC)", "-\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletableto\")) //$NON-NLS-1$", "-\t\t\t\t.append(startPC + length)", "-\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocalname\")) //$NON-NLS-1$", "-\t\t\t\t.append(localVariableTableEntry.getName())", "-\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocalindex\")) //$NON-NLS-1$", "-\t\t\t\t.append(index)", "-\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocaltype\")); //$NON-NLS-1$", "-\t\t\tbuffer.append(localVariableTableEntry.getDescriptor());", "+\t\t\tbuffer.append(Util.bind(\"classfileformat.localvariabletableentry\", //$NON-NLS-1$", "+\t\t\t\tnew String[] {", "+\t\t\t\t\tInteger.toString(startPC),", "+\t\t\t\t\tInteger.toString(startPC + length),", "+\t\t\t\t\tnew String(localVariableTableEntry.getName()),", "+\t\t\t\t\tInteger.toString(index),", "+\t\t\t\t\tnew String(localVariableTableEntry.getDescriptor())", "+\t\t\t\t}));", "-\t\t\t\tbuffer", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablefrom\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(startPC)", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletableto\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(startPC + length)", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocalname\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(localVariableTypeTableEntry.getName())", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocalindex\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(index)", "-\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocaltype\")); //$NON-NLS-1$", "-\t\t\t\tbuffer.append(localVariableTypeTableEntry.getSignature());", "+\t\t\t\tbuffer.append(Util.bind(\"classfileformat.localvariabletableentry\", //$NON-NLS-1$", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\tInteger.toString(startPC),", "+\t\t\t\t\t\tInteger.toString(startPC + length),", "+\t\t\t\t\t\tnew String(localVariableTypeTableEntry.getName()),", "+\t\t\t\t\t\tInteger.toString(index),", "+\t\t\t\t\t\tnew String(localVariableTypeTableEntry.getSignature())", "+\t\t\t\t\t}));", "-\t\t\tbuffer", "-\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablefrom\")) //$NON-NLS-1$", "-\t\t\t\t.append(startPC)", "-\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletableto\")) //$NON-NLS-1$", "-\t\t\t\t.append(startPC + length)", "-\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocalname\")) //$NON-NLS-1$", "-\t\t\t\t.append(localVariableTypeTableEntry.getName())", "-\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocalindex\")) //$NON-NLS-1$", "-\t\t\t\t.append(index)", "-\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocaltype\")) //$NON-NLS-1$", "-\t\t\t\t.append(localVariableTypeTableEntry.getSignature());", "+\t\t\tbuffer.append(Util.bind(\"classfileformat.localvariabletableentry\", //$NON-NLS-1$", "+\t\t\t\tnew String[] {", "+\t\t\t\t\tInteger.toString(startPC),", "+\t\t\t\t\tInteger.toString(startPC + length),", "+\t\t\t\t\tnew String(localVariableTypeTableEntry.getName()),", "+\t\t\t\t\tInteger.toString(index),", "+\t\t\t\t\tnew String(localVariableTypeTableEntry.getSignature())", "+\t\t\t\t}));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c13b053d252dcbe1fef6e3cb14cdb633", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "175caf4c91bc68c67c64b6e69e5b88fec75be023", "commitAfterChange": "2a90eeb9372f2a1a1f5e7c24d7c19363b361caf2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (isDiamond) {", "-\t\t\tReferenceBinding genericType = ((ParameterizedTypeBinding) this.resolvedType).genericType();", "-\t\t\tParameterizedTypeBinding parameterizedType = scope.environment().createParameterizedType(genericType, genericType.typeVariables(), genericType.enclosingType());", "-\t\t\tif (this.typeExpected == null && compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8 && this.expressionContext.definesTargetType()) {", "-\t\t\t\tthis.binding = inferConstructorOfElidedParameterizedType(parameterizedType, this.resolvedType.enclosingType(), this.argumentTypes, scope);", "-\t\t\t\tif (this.binding == null) {", "-\t\t\t\t\tscope.problemReporter().cannotInferElidedTypes(this);", "-\t\t\t\t\treturn this.resolvedType = null;", "-\t\t\t\t}", "-\t\t\t\treturn new PolyTypeBinding(this);", "-\t\t\t}", "-\t\t\tTypeBinding [] inferredTypes = inferElidedTypes(parameterizedType, this.resolvedType.enclosingType(), this.argumentTypes, scope);", "-\t\t\tif (inferredTypes == null) {", "-\t\t\t\tscope.problemReporter().cannotInferElidedTypes(this);", "-\t\t\t\treturn this.resolvedType = null;", "-\t\t\t}", "-\t\t\tReferenceBinding allocationType = scope.environment().createParameterizedType(genericType, inferredTypes, ((ParameterizedTypeBinding) this.resolvedType).enclosingType());", "-\t\t\tthis.resolvedType = this.type.resolvedType = allocationType; ", "+\t} ", "+\tif (isDiamond) {", "+\t\tthis.binding = inferConstructorOfElidedParameterizedType(scope);", "+\t\tif (this.binding == null || !this.binding.isValidBinding()) {", "+\t\t\tscope.problemReporter().cannotInferElidedTypes(this);", "+\t\t\treturn this.resolvedType = null;", "+\t\tif (this.typeExpected == null && compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8 && this.expressionContext.definesTargetType()) {", "+\t\t\treturn new PolyTypeBinding(this);", "+\t\t}", "+\t\tthis.resolvedType = this.type.resolvedType = this.binding.declaringClass;", "+\t\tresolvePolyExpressionArguments(this, this.binding, this.argumentTypes, scope);", "-\t\tif (isDiamond) {", "-\t\t\tReferenceBinding genericType = ((ParameterizedTypeBinding) this.resolvedType).genericType();", "-\t\t\tParameterizedTypeBinding parameterizedType = scope.environment().createParameterizedType(genericType, genericType.typeVariables(), genericType.enclosingType());", "-\t\t\tTypeBinding [] inferredTypes = inferElidedTypes(parameterizedType, this.resolvedType.enclosingType(), this.argumentTypes, scope);", "-\t\t\tif (inferredTypes == null) {", "-\t\t\t\tscope.problemReporter().cannotInferElidedTypes(this);", "-\t\t\t\treturn this.resolvedType = null;", "-\t\t\t}", "-\t\t\tthis.resolvedType = this.type.resolvedType = scope.environment().createParameterizedType(genericType, inferredTypes, ((ParameterizedTypeBinding) this.resolvedType).enclosingType());", "-\t\t}", "+\t\tthis.binding = findConstructorBinding(scope, this, (ReferenceBinding) this.resolvedType, this.argumentTypes);", "-\t", "-\tReferenceBinding allocationType = (ReferenceBinding) this.resolvedType;", "-\tthis.binding = findConstructorBinding(scope, this, allocationType, this.argumentTypes);", "-\t\t", "-\t\t\tthis.binding.declaringClass = allocationType;", "+\t\t\tthis.binding.declaringClass = (ReferenceBinding) this.resolvedType;", "-\tif (checkInvocationArguments(scope, null, allocationType, this.binding, this.arguments, this.argumentTypes, this.argsContainCast, this)) {", "+\tif (checkInvocationArguments(scope, null, this.resolvedType, this.binding, this.arguments, this.argumentTypes, this.argsContainCast, this)) {", "- \t\tcheckTypeArgumentRedundancy((ParameterizedTypeBinding) this.resolvedType, this.resolvedType.enclosingType(), this.argumentTypes, scope);", "+ \t\tcheckTypeArgumentRedundancy((ParameterizedTypeBinding) this.resolvedType, scope);", "-\treturn allocationType;", "+\treturn this.resolvedType;"]}], "num": 56009}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5eb7e9d81b494044179e88327ad8c74", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dcd784bccfc7e662e7eab55cdb6cf95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "21b06b1f77b7fda7b2358e6e2d335e77a6ac8125", "commitAfterChange": "b397fbf1ef2684ee73e7617091ec4c7be38fc011", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void compilationStarted()", "signatureAfterChange": " \tpublic void compilationStarted()", "diff": ["-\t\tensureGeneratedSourceFolder();", "-\t\tfinal IFolder genFolder = getGeneratedSourceFolder();", "+", "+\t\ttry{", "+\t\t\t// clear out any generated source folder config markers", "+\t\t\tIMarker[] markers = _aptProject.getJavaProject().getProject().findMarkers(AptPlugin.APT_CONFIG_PROBLEM_MARKER, true, IResource.DEPTH_INFINITE);", "+\t\t\tif( markers != null ){", "+\t\t\t\tfor( IMarker marker : markers )", "+\t\t\t\t\tmarker.delete();", "+\t\t\t}", "+\t\t}", "+\t\tcatch(CoreException e){", "+\t\t\tAptPlugin.log(e, \"Unable to delete configuration marker.\"); //$NON-NLS-1$", "+\t\t}", "+\t\t_skipTypeGeneration = false;", "+\t\tcreateGeneratedSourceFolder();", "+\t\tfinal IFolder genFolder;\t\t", "+\t\tsynchronized(this){", "+\t\t\tgenFolder = getGeneratedSourceFolder();", "+\t\t\t_snapshotFolderName = _generatedSourceFolderName;", "+\t\t}", "+\t\t\t_generatedPackageFragmentRoot = null;", "-\t\t\t\tif( genFolder.equals(root.getResource()) ){", "+\t\t\t\tfinal IResource resource = root.getResource();", "+\t\t\t\tif( resource != null && resource.equals(genFolder)){", "-\t\t\t", "-\t\t\t// Failure case -- we've created the source folder, but we can't find its corresponding", "-\t\t\t// package fragment root.", "-\t\t\tStringBuilder sb = new StringBuilder();", "-\t\t\t", "-\t\t\tsb.append(\"*** start of classpath ***\\n\"); //$NON-NLS-1$", "-\t\t\tIClasspathEntry[] cp = _aptProject.getJavaProject().getRawClasspath();", "-\t\t\tfor (IClasspathEntry c : cp) {", "-\t\t\t\tsb.append(c).append(\"\\n\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tsb.append(\"*** end of classpath ***\"); //$NON-NLS-1$", "-\t\t\t", "-\t\t\tthrow new IllegalStateException(\"failed to locate package fragment root for \" +  //$NON-NLS-1$", "-\t\t\t\t\tgenFolder.getName() + \". classpath:\\n\" + sb.toString()); //$NON-NLS-1$", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1afdcaa9a0b2b35920678124a9aca21", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "10da3a4eb64e0a8615b8c4fd2a1cd1c9da864dbb", "commitAfterChange": "9b9b413c1fc3e1733988a3ceecffb87b92306bbd", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprivate void createFoldersForFile( IFile f ) \t    throws CoreException", "signatureAfterChange": " \tprivate void createFoldersForPackage(String pkgName, IFolder parent) \t\tthrows CoreException", "diff": ["-\tprivate void createFoldersForFile( IFile f )", "-\t    throws CoreException", "+\tprivate void createFoldersForPackage(String pkgName, IFolder parent)", "+\t\tthrows CoreException", "-\t\tString[] parts = f.getProjectRelativePath().segments();", "-\t\tIContainer c = f.getProject();", "-", "-\t\tIFolder folder = c.getFolder( new Path( parts[0] ) );", "-\t\tif ( !folder.exists() )", "-\t\t\tfolder.create( true, false, null );", "-\t\t", "-\t\tfor ( int i = 1; i < parts.length - 1; i++ )", "-\t\t{", "-\t\t\tfolder = folder.getFolder( parts[i] );", "-\t\t\tif ( !folder.exists() )", "-\t\t\t\tfolder.create( true, false, null );", "-\t\t}", "+\t    StringBuilder buffer = new StringBuilder();", "+\t    for( int i=0, len=pkgName.length(); i<len; i++ ){", "+\t    \tfinal char c = pkgName.charAt(i);", "+\t    \tif( c != '.')", "+\t    \t\tbuffer.append(c);", "+\t    \t// create a folder when we see a dot or when we are at the end.", "+\t    \tif( c == '.' || i == len - 1){", "+\t    \t\tif( buffer.length() > 0 ){", "+\t    \t\t\tfinal IFolder folder = parent.getFolder(buffer.toString());", "+\t    \t\t\tif( !folder.exists()){", "+\t    \t\t\t\tfolder.create(true, true, null);", "+\t    \t\t\t\tfolder.setDerived(true);", "+\t    \t\t\t}", "+\t    \t\t\tparent = folder;", "+\t    \t\t\t// reset the buffer", "+\t    \t\t\tbuffer.setLength(0);", "+\t    \t\t}", "+\t    \t}", "+\t    }"]}], "num": 63032}
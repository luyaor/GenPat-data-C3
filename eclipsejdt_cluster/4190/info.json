{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4533aa13a220a98ba3b73290871ebb7b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0765e795533f263bd4e69e542ffdaa43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "5da4268a6e911ad3865241747a8e9714544fc990", "commitAfterChange": "1e8305535ff304200778a08eb6eb4025791a09c1", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "signatureAfterChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "diff": ["-\tReferenceBinding[] interfacesToVisit = null;", "-\tint nextPosition = 0;", "-\tReferenceBinding[] itsInterfaces = superInterfaces;", "-\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "-\t\tnextPosition = itsInterfaces.length;", "-\t\tinterfacesToVisit = itsInterfaces;", "-\t}", "-\t\t// We used to only include superinterfaces if immediate superclasses are abstract", "-\t\t// but that is problematic. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=302358", "-\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "-\t\t\tif (interfacesToVisit == null) {", "-\t\t\t\tinterfacesToVisit = itsInterfaces;", "-\t\t\t\tnextPosition = interfacesToVisit.length;", "-\t\t\t} else {", "-\t\t\t\tint itsLength = itsInterfaces.length;", "-\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "-\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "-\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "-\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "-\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "-\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "-\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\tif (nextPosition == 0) return;", "+\tList superIfcList = new ArrayList();", "+\tHashSet seenTypes = new HashSet();", "+\tcollectAllDistinctSuperInterfaces(superInterfaces, seenTypes, superIfcList);", "+\tif (superclass != null)", "+\t\tcollectAllDistinctSuperInterfaces(superclass.superInterfaces(), seenTypes, superIfcList);", "+\tif (superIfcList.size() == 0) return;", "+\t", "+\tif (superIfcList.size() == 1) {", "+\t\tsuperInterfaces = new ReferenceBinding[] { (ReferenceBinding) superIfcList.get(0) };", "+\t} else {", "+\t\tsuperInterfaces = (ReferenceBinding[]) superIfcList.toArray(new ReferenceBinding[superIfcList.size()]);", "+\t\tsuperInterfaces = Sorting.sortTypes(superInterfaces);", "+\t}", "+\t", "-\tfor (int i = 0; i < nextPosition; i++) {", "-\t\tsuperType = interfacesToVisit[i];", "+\tint len = superInterfaces.length;", "+\tfor (int i = len-1; i >= 0; i--) {", "+\t\tsuperType = superInterfaces[i];", "-\t\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "-\t\t\t\tint itsLength = itsInterfaces.length;", "-\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "-\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "-\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "-\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "-\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "-\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "-\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "-\t\t\t\t}", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ea22dc843abe7866688186e470e4df8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "b9bb6123c3e4c0567c677af33c7c0e8037ba4975", "commitAfterChange": "4dd974a226271180ff02d909a12722017f80ff3a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "signatureAfterChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "diff": ["-\tReferenceBinding[] interfacesToVisit = null;", "-\tint nextPosition = 0;", "-\tReferenceBinding[] itsInterfaces = superInterfaces;", "-\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "-\t\tnextPosition = itsInterfaces.length;", "-\t\tinterfacesToVisit = itsInterfaces;", "-\t}", "-\t\t// We used to only include superinterfaces if immediate superclasses are abstract", "-\t\t// but that is problematic. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=302358", "-\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "-\t\t\tif (interfacesToVisit == null) {", "-\t\t\t\tinterfacesToVisit = itsInterfaces;", "-\t\t\t\tnextPosition = interfacesToVisit.length;", "-\t\t\t} else {", "-\t\t\t\tint itsLength = itsInterfaces.length;", "-\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "-\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "-\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "-\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "-\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "-\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "-\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\tif (nextPosition == 0) return;", "+\tList superIfcList = new ArrayList();", "+\tHashSet seenTypes = new HashSet();", "+\tcollectAllDistinctSuperInterfaces(superInterfaces, seenTypes, superIfcList);", "+\tif (superclass != null)", "+\t\tcollectAllDistinctSuperInterfaces(superclass.superInterfaces(), seenTypes, superIfcList);", "+\tif (superIfcList.size() == 0) return;", "+\t", "+\tif (superIfcList.size() == 1) {", "+\t\tsuperInterfaces = new ReferenceBinding[] { (ReferenceBinding) superIfcList.get(0) };", "+\t} else {", "+\t\tsuperInterfaces = (ReferenceBinding[]) superIfcList.toArray(new ReferenceBinding[superIfcList.size()]);", "+\t\tsuperInterfaces = Sorting.sortTypes(superInterfaces);", "+\t}", "+\t", "-\tfor (int i = 0; i < nextPosition; i++) {", "-\t\tsuperType = interfacesToVisit[i];", "+\tint len = superInterfaces.length;", "+\tfor (int i = len-1; i >= 0; i--) {", "+\t\tsuperType = superInterfaces[i];", "-\t\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "-\t\t\t\tint itsLength = itsInterfaces.length;", "-\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "-\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "-\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "-\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "-\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "-\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "-\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "-\t\t\t\t}", "-\t\t\t}"]}], "num": 4190}
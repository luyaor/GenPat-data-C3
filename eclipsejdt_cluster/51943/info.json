{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "90a3623b54ca7f1e593434ca56a87f57", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93fe7f0f8061ae1dc819dda5dcd928da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/State.java", "commitBeforeChange": "4e88e1625bb1c2659a2ee4ba931e466f5126f9f4", "commitAfterChange": "075da32620f3ceb13a370a8be8550de2baf091f1", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \r void write(DataOutputStream out) throws IOException", "signatureAfterChange": "\r \r void write(DataOutputStream out) throws IOException", "diff": ["+\tint length;\r", "+\tObject[] keyTable;\r", "+\tObject[] valueTable;\r", "+\r", "+/*\r", "+ * byte\t\t\tVERSION\r", "+ * String\t\tproject name\r", "+ * int\t\t\t\tbuild number\r", "+ * int\t\t\t\tlast structural build number\r", "+ * String\t\toutput location\r", "+*/\r", "-\tint length = classpathLocations.length;\r", "-\tout.writeInt(length);\r", "+/*\r", "+ * Class path locations[]\r", "+ * int\t\t\t\tid\r", "+ * String\t\tpath(s)\r", "+*/\r", "+\tout.writeInt(length = classpathLocations.length);\r", "-\tlength = structuralBuildNumbers.size();\r", "-\tout.writeInt(length);\r", "+/*\r", "+ * Structural build numbers table\r", "+ * String\t\tprereq project name\r", "+ * int\t\t\t\tlast structural build number\r", "+*/\r", "+\tout.writeInt(length = structuralBuildNumbers.elementSize);\r", "-\t\tObject[] keyTable = structuralBuildNumbers.keyTable;\r", "-\t\tObject[] valueTable = structuralBuildNumbers.valueTable;\r", "+\t\tkeyTable = structuralBuildNumbers.keyTable;\r", "+\t\tvalueTable = structuralBuildNumbers.valueTable;\r", "+/*\r", "+ * String[]\t\tInterned locations\r", "+ */\r", "+\tout.writeInt(length = references.elementSize);\r", "+\tArrayList internedLocations = new ArrayList(length);\r", "+\tkeyTable = references.keyTable;\r", "+\tfor (int i = 0, l = keyTable.length; i < l; i++) {\r", "+\t\tif (keyTable[i] != null) {\r", "+\t\t\tString key = (String) keyTable[i];\r", "+\t\t\tout.writeUTF(key);\r", "+\t\t\tinternedLocations.add(key);\r", "+\t\t}\r", "+\t}\r", "+\r", "+/*\r", "+ * Type locations table\r", "+ * String\t\ttype name\r", "+ * int\t\t\t\tinterned location id\r", "+ */\r", "+\tout.writeInt(length = typeLocations.elementSize);\r", "+\tif (length > 0) {\r", "+\t\tkeyTable = typeLocations.keyTable;\r", "+\t\tvalueTable = typeLocations.valueTable;\r", "+\t\tfor (int i = 0, l = keyTable.length; i < l; i++) {\r", "+\t\t\tif (keyTable[i] != null) {\r", "+\t\t\t\tout.writeUTF((String) keyTable[i]);\r", "+\t\t\t\tout.writeInt(internedLocations.indexOf((String) valueTable[i]));\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\r", "+/*\r", "+ * char[][][]\tInterned qualified names\r", "+ * char[][]\t\tInterned simple names\r", "+ */\r", "-\tObject[] valueTable = references.valueTable;\r", "+\tvalueTable = references.valueTable;\r", "-\tlength = internedQualifiedNames.size();\r", "-\tout.writeInt(length);\r", "+\tout.writeInt(length = internedQualifiedNames.size());\r", "-\tlength = references.size();\r", "-\tout.writeInt(length);\r", "-\tObject[] keyTable = references.keyTable;\r", "+/*\r", "+ * References table\r", "+ * int\t\t\tinterned location id\r", "+ * ReferenceCollection\r", "+*/\r", "+\tout.writeInt(length = references.elementSize);\r", "+\tkeyTable = references.keyTable;\r", "-\t\t\tout.writeUTF((String) keyTable[i]);\r", "+\t\t\tout.writeInt(internedLocations.indexOf((String) keyTable[i]));\r", "-\t\t\t\twriteNames(atc.additionalTypeNames, out);\r", "+\t\t\t\twriteNames(atc.definedTypeNames, out);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbf89a3382d30c48dcb554788b5a990e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "f6d17bf597fd0ef9887d709f5d952b16020dad69", "commitAfterChange": "b0bfa6fe70ef1703e5c92b55f49636bcaa6a516b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  void write(DataOutputStream out) throws IOException", "signatureAfterChange": "  void write(DataOutputStream out) throws IOException", "diff": ["- * byte\t\t\tVERSION", "+ * byte\t\tVERSION", "- * int\t\t\t\tbuild number", "- * int\t\t\t\tlast structural build number", "+ * int\t\t\tbuild number", "+ * int\t\t\tlast structural build number", "- * int\t\t\t\tid", "+ * int\t\t\tid", "- * int\t\t\t\tid", "+ * int\t\t\tid", "- * int\t\t\t\tlast structural build number", "+ * int\t\t\tlast structural build number", "- * String[]\t\tInterned type locators", "+ * String[]\tInterned type locators", "-\tArrayList internedTypeLocators = new ArrayList(length);", "+\tSimpleLookupTable internedTypeLocators = new SimpleLookupTable(length);", "-\t\t\t\tinternedTypeLocators.add(key);", "+\t\t\t\tinternedTypeLocators.put(key, new Integer(internedTypeLocators.elementSize));", "- * int\t\t\t\tinterned locator id", "+ * int\t\t\tinterned locator id", "-\t\t\t\tout.writeInt(internedTypeLocators.indexOf(valueTable[i]));", "+\t\t\t\tInteger index = (Integer) internedTypeLocators.get(valueTable[i]);", "+\t\t\t\tout.writeInt(index.intValue());", "- * char[][]\t\tInterned simple names", "+ * char[][]\tInterned simple names", "-\tArrayList internedQualifiedNames = new ArrayList(31);", "-\tArrayList internedSimpleNames = new ArrayList(31);", "+\tSimpleLookupTable internedQualifiedNames = new SimpleLookupTable(31);", "+\tSimpleLookupTable internedSimpleNames = new SimpleLookupTable(31);", "-\t\t\t\tif (!internedQualifiedNames.contains(qName)) { // remember the names have been interned", "-\t\t\t\t\tinternedQualifiedNames.add(qName);", "+\t\t\t\tif (!internedQualifiedNames.containsKey(qName)) { // remember the names have been interned", "+\t\t\t\t\tinternedQualifiedNames.put(qName, new Integer(internedQualifiedNames.elementSize));", "-\t\t\t\t\t\tif (!internedSimpleNames.contains(sName)) // remember the names have been interned", "-\t\t\t\t\t\t\tinternedSimpleNames.add(sName);", "+\t\t\t\t\t\tif (!internedSimpleNames.containsKey(sName)) // remember the names have been interned", "+\t\t\t\t\t\t\tinternedSimpleNames.put(sName, new Integer(internedSimpleNames.elementSize));", "-\t\t\t\tif (!internedSimpleNames.contains(sName)) // remember the names have been interned", "-\t\t\t\t\tinternedSimpleNames.add(sName);", "+\t\t\t\tif (!internedSimpleNames.containsKey(sName)) // remember the names have been interned", "+\t\t\t\t\tinternedSimpleNames.put(sName, new Integer(internedSimpleNames.elementSize));", "-\tchar[][] internedArray = new char[internedSimpleNames.size()][];", "-\tinternedSimpleNames.toArray(internedArray);", "+\tchar[][] internedArray = new char[internedSimpleNames.elementSize][];", "+\tObject[] simpleNames = internedSimpleNames.keyTable;", "+\tObject[] positions = internedSimpleNames.valueTable;", "+\tfor (int i = positions.length; --i >= 0; ) {", "+\t\tif (positions[i] != null) {", "+\t\t\tint index = ((Integer) positions[i]).intValue();", "+\t\t\tinternedArray[index] = (char[]) simpleNames[i];", "+\t\t}", "+\t}", "-\tout.writeInt(length = internedQualifiedNames.size());", "+\tchar[][][] internedQArray = new char[internedQualifiedNames.elementSize][][];", "+\tObject[] qualifiedNames = internedQualifiedNames.keyTable;", "+\tpositions = internedQualifiedNames.valueTable;", "+\tfor (int i = positions.length; --i >= 0; ) {", "+\t\tif (positions[i] != null) {", "+\t\t\tint index = ((Integer) positions[i]).intValue();", "+\t\t\tinternedQArray[index] = (char[][]) qualifiedNames[i];", "+\t\t}", "+\t}", "+\tout.writeInt(length = internedQArray.length);", "-\t\tchar[][] qName = (char[][]) internedQualifiedNames.get(i);", "+\t\tchar[][] qName = internedQArray[i];", "-\t\tfor (int j = 0; j < qLength; j++)", "-\t\t\tout.writeInt(internedSimpleNames.indexOf(qName[j]));", "+\t\tfor (int j = 0; j < qLength; j++) {", "+\t\t\tInteger index = (Integer) internedSimpleNames.get(qName[j]);", "+\t\t\tout.writeInt(index.intValue());", "+\t\t}", "- * int\t\t\tinterned locator id", "+ * int\t\tinterned locator id", "-\t\t\t\tout.writeInt(internedTypeLocators.indexOf(keyTable[i]));", "+\t\t\t\tInteger index = (Integer) internedTypeLocators.get(keyTable[i]);", "+\t\t\t\tout.writeInt(index.intValue());", "-\t\t\t\tfor (int j = 0; j < qLength; j++)", "-\t\t\t\t\tout.writeInt(internedQualifiedNames.indexOf(qNames[j]));", "+\t\t\t\tfor (int j = 0; j < qLength; j++) {", "+\t\t\t\t\tindex = (Integer) internedQualifiedNames.get(qNames[j]);", "+\t\t\t\t\tout.writeInt(index.intValue());", "+\t\t\t\t}", "-\t\t\t\tfor (int j = 0; j < sLength; j++)", "-\t\t\t\t\tout.writeInt(internedSimpleNames.indexOf(sNames[j]));", "+\t\t\t\tfor (int j = 0; j < sLength; j++) {", "+\t\t\t\t\tindex = (Integer) internedSimpleNames.get(sNames[j]);", "+\t\t\t\t\tout.writeInt(index.intValue());", "+\t\t\t\t}"]}], "num": 51943}
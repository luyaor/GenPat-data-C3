{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e4118697a7180244aacf16da9e73aed9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16292f74f81963faab7c639fe417b5a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "1dbf45ade1eaa8473579771e92825a7887776253", "commitAfterChange": "0fb8e6d8cd5771230b88c7189dc0d95f3a5da0e3", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tprivate void verifyBindings(TagElement tagElement)", "signatureAfterChange": " \tprivate void verifyBindings(TagElement tagElement)", "diff": ["-\t\tASTNode previousFragment = null;", "+//\t\tASTNode previousFragment = null;", "-\t\t\t\t\t\tassertTrue(\"Reference in '\"+previousFragment+\"' should be bound!\", text.getText().trim().startsWith(\"Unknown\"));", "+\t\t\t\t\t\tassertTrue(this.prefix+\"Reference in '\"+tagElement+\"' should be bound!\", text.getText().trim().startsWith(\"Unknown\"));", "-\t\t\t\t\t\tassertFalse(\"Unknown reference in'\"+previousFragment+\"' should NOT be bound!\", text.getText().trim().startsWith(\"Unknown\"));", "+\t\t\t\t\t\tassertFalse(this.prefix+\"Unknown reference in '\"+tagElement+\"' should NOT be bound!\", text.getText().trim().startsWith(\"Unknown\"));", "-\t\t\t\t} else if (fragment.getNodeType() == ASTNode.SIMPLE_NAME || fragment.getNodeType() == ASTNode.QUALIFIED_NAME) {", "+\t\t\t\t} else if (fragment.getNodeType() == ASTNode.QUALIFIED_NAME) {", "-\t\t\t\t\tverifyNameBindings(name.getQualifier());", "+//\t\t\t\t\tverifyNameBindings(name.getQualifier());", "+\t\t\t\t\tverifyNameBindings(name);", "-\t\t\t\t\tpreviousFragment = fragment;", "+//\t\t\t\t\tpreviousFragment = fragment;", "-\t\t\t\t\t\tassertNotNull(memberRef.getName()+\" binding was not found!\", memberRef.getName().resolveBinding());", "+\t\t\t\t\t\tassertNotNull(this.prefix+\"\"+memberRef.getName()+\" binding was not found!\", memberRef.getName().resolveBinding());", "-\t\t\t\t\t\tassertNotNull(methodRef.getName()+\" binding was not found!\", methodRef.getName().resolveBinding());", "+\t\t\t\t\t\tassertNotNull(this.prefix+\"\"+methodRef.getName()+\" binding was not found!\", methodRef.getName().resolveBinding());", "-\t\t\t\t\t\t\tassertNotNull(param.getType()+\" binding was not found!\", param.getType().resolveBinding());", "+\t\t\t\t\t\t\tassertNotNull(this.prefix+\"\"+param.getType()+\" binding was not found!\", param.getType().resolveBinding());", "-\t\t\t\tpreviousFragment = fragment;", "+//\t\t\t\tpreviousFragment = fragment;", "-\t\tassertTrue(\"Reference in '\"+previousFragment+\"' should be bound!\", (!resolvedBinding || previousBinding != null));", "+\t\tassertTrue(this.prefix+\"Reference in '\"+tagElement+\"' should be bound!\", (!resolvedBinding || previousBinding != null));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba61f2362371ed574a65f8e5d2b24a83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "1dbf45ade1eaa8473579771e92825a7887776253", "commitAfterChange": "0fb8e6d8cd5771230b88c7189dc0d95f3a5da0e3", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void testBug51226() throws JavaModelException", "signatureAfterChange": " \tpublic void testBug51226() throws JavaModelException", "diff": ["-\t\t\tString fileName = units[i].getElementName();", "-\t\t\tassertEquals(fileName+\": Wrong number of problems\", 0, unit.getProblems().length); //$NON-NLS-1$", "-\t\t\tassertEquals(fileName+\": Wrong number of comments\", 1, unit.getCommentTable().length);", "+\t\t\tassertEquals(this.prefix+\"Wrong number of problems\", 0, unit.getProblems().length); //$NON-NLS-1$", "+\t\t\tassertEquals(this.prefix+\"Wrong number of comments\", 1, unit.getCommentTable().length);", "-\t\t\tassertTrue(fileName+\": Comment should be a Javadoc one\", comment.isDocComment());", "+\t\t\tassertTrue(this.prefix+\"Comment should be a Javadoc one\", comment.isDocComment());", "-\t\t\tassertEquals(fileName+\": Wrong number of tags\", 1, docComment.tags().size());", "+\t\t\tassertEquals(this.prefix+\"Wrong number of tags\", 1, docComment.tags().size());", "-\t\t\tassertNull(fileName+\": Wrong type of tag [\"+tagElement+\"]\", tagElement.getTagName());", "-\t\t\tassertEquals(fileName+\": Wrong number of fragments in tag [\"+tagElement+\"]\", 1, tagElement.fragments().size());", "+\t\t\tassertNull(this.prefix+\"Wrong type of tag [\"+tagElement+\"]\", tagElement.getTagName());", "+\t\t\tassertEquals(this.prefix+\"Wrong number of fragments in tag [\"+tagElement+\"]\", 1, tagElement.fragments().size());", "-\t\t\tassertEquals(fileName+\": Invalid type for fragment [\"+fragment+\"]\", ASTNode.TEXT_ELEMENT, fragment.getNodeType());", "+\t\t\tassertEquals(this.prefix+\"Invalid type for fragment [\"+fragment+\"]\", ASTNode.TEXT_ELEMENT, fragment.getNodeType());", "-\t\t\tassertEquals(fileName+\": Invalid content for text element \", \"Test\", textElement.getText());", "+\t\t\tassertEquals(this.prefix+\"Invalid content for text element \", \"Test\", textElement.getText());"]}], "num": 3660}
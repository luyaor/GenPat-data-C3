{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c40bdda7b6780dfae4ab6cee734d4566", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10e68e1fc41239734f95d30af39f27e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "7ecaef5de16e38a10853a04df519c7ec4f9241fc", "commitAfterChange": "69abb8d1d00eb0a16e17263935c45f1044354687", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "diff": ["-\t\t} else if (genericTypeArguments != null) {", "+\t\t} else if (genericTypeArguments != null && compilerOptions().complianceLevel < ClassFileConstants.JDK1_7) {", "-\t\t\t\tif (!((ParameterizedGenericMethodBinding) method).wasInferred) {", "+\t\t\t\tif (!((ParameterizedGenericMethodBinding) method).wasInferred)", "-\t\t\t\t\tif (compilerOptions().complianceLevel < ClassFileConstants.JDK1_7) {", "-\t\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.TypeArgumentsForRawGenericMethod);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif (compilerOptions().complianceLevel < ClassFileConstants.JDK1_7) {", "-\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.TypeParameterArityMismatch);", "-\t\t\t\t}", "+\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.TypeArgumentsForRawGenericMethod);", "+\t\t\t} else if (!method.isOverriding() || !isOverriddenMethodGeneric(method)) {", "+\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.TypeParameterArityMismatch);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74da0f9920d1cfd40a9edacc960f4961", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "55099d2c60113e1ad2e8ab8558e8720dd555fab8", "commitAfterChange": "fafb2dc68e9656aa163ddd55309d4bcb6df6ee09", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (use18specifics && valueIfTrueType != null && valueIfFalseType != null) {", "-\t\t\tif (valueIfTrueType.isAnnotatedTypeWithoutArguments() != valueIfFalseType.isAnnotatedTypeWithoutArguments()) {", "-\t\t\t\tif (valueIfTrueType.isAnnotatedTypeWithoutArguments()) // FIXME(stephan) mixed scenarios: null tag bits & type arguments", "-\t\t\t\t\tvalueIfTrueType = valueIfTrueType.original();", "-\t\t\t\telse", "-\t\t\t\t\tvalueIfFalseType = valueIfFalseType.original();", "-\t\t\t}", "+\t\tif (use18specifics && valueIfTrueType != null && valueIfFalseType != null && valueIfTrueType != valueIfFalseType) {", "+\t\t\tvalueIfTrueType = valueIfTrueType.unannotated();", "+\t\t\tvalueIfFalseType = valueIfFalseType.unannotated();"]}], "num": 4780}
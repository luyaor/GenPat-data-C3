{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "013b88dc07f98a36212586b4bd569251", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ddf88da1303161a1e0208413c7502ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "9f8931bf92b7966fbd8c101a448f79f7965fbbf9", "commitAfterChange": "3bf5bab95449ec256a601c2551910573083178b4", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " protected void acceptSourceMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isDeclaration, int start, int end)", "signatureAfterChange": " protected void acceptSourceMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames)", "diff": ["-protected void acceptSourceMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isDeclaration, int start, int end) {", "+protected void acceptSourceMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames) {", "-\t\t\tif (methods[i].getElementName().equals(name) && methods[i].getParameterTypes().length == parameterTypeNames.length) {", "-\t\t\t\tif(isDeclaration) {", "-\t\t\t\t\tISourceRange range = methods[i].getNameRange();", "-\t\t\t\t\tif(range.getOffset() <= start && range.getOffset() + range.getLength() >= end) {", "-\t\t\t\t\t\taddElement(methods[i]);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\taddElement(methods[i]);", "-\t\t\t\t}", "+\t\t\tif (methods[i].getElementName().equals(name)", "+\t\t\t\t\t&& methods[i].getParameterTypes().length == parameterTypeNames.length) {", "+\t\t\t\taddElement(methods[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b40d62558e57519bede9b29fa8830945", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "f6e646cfd67462923a3ee7e8121ae224b9177415", "commitAfterChange": "c2914e56411382198ea8ccc84da3c9283a570f77", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tprivate void addNewEntry(final int InsideClasspath, final int InsideSourcepath, ArrayList bootclasspaths, ArrayList classpaths,ArrayList sourcepathClasspaths, String currentClasspathName, ArrayList currentRuleSpecs, int mode, String customEncoding)", "signatureAfterChange": "  \tprivate void addNewEntry(ArrayList paths, String currentClasspathName, ArrayList currentRuleSpecs, String customEncoding, boolean isSource)", "diff": ["+", "+\tprivate void addNewEntry(ArrayList paths, String currentClasspathName, ArrayList currentRuleSpecs, String customEncoding, boolean isSource) {", "+\t\tAccessRule[] accessRules = new AccessRule[currentRuleSpecs.size()];", "+\t\tboolean rulesOK = true;", "+\t\tIterator i = currentRuleSpecs.iterator();", "+\t\tint j = 0;", "+\t\twhile (i.hasNext()) {", "+\t\t\tString ruleSpec = (String) i.next();", "+\t\t\tchar key = ruleSpec.charAt(0);", "+\t\t\tString pattern = ruleSpec.substring(1);", "+\t\t\tif (pattern.length() > 0) {", "+\t\t\t\tswitch (key) {", "+\t\t\t\tcase '+':", "+\t\t\t\t\taccessRules[j++] = new AccessRule(pattern", "+\t\t\t\t\t\t\t.toCharArray(), 0);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase '~':", "+\t\t\t\t\taccessRules[j++] = new AccessRule(pattern", "+\t\t\t\t\t\t\t.toCharArray(),", "+\t\t\t\t\t\t\tIProblem.DiscouragedReference);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase '-':", "+\t\t\t\t\taccessRules[j++] = new AccessRule(pattern", "+\t\t\t\t\t\t\t.toCharArray(),", "+\t\t\t\t\t\t\tIProblem.ForbiddenReference);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase '?':", "+\t\t\t\t\taccessRules[j++] = new AccessRule(pattern", "+\t\t\t\t\t\t\t.toCharArray(),", "+\t\t\t\t\t\t\tIProblem.ForbiddenReference, true/*keep looking for accessible type*/);", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\trulesOK = false;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\trulesOK = false;", "+\t\t\t}", "+\t\t}", "+\t\tif (rulesOK) {", "+\t\t\tString templates[] = new String[AccessRuleSet.MESSAGE_TEMPLATES_LENGTH];", "+\t\t\ttemplates[0] = Main.bind(", "+\t\t\t\t\"template.restrictedAccess.type\", //$NON-NLS-1$", "+\t\t\t\tnew String[] {\"{0}\", currentClasspathName}); //$NON-NLS-1$ ", "+\t\t\ttemplates[1] = Main.bind(", "+\t\t\t\t\"template.restrictedAccess.constructor\", //$NON-NLS-1$", "+\t\t\t\tnew String[] {\"{0}\", currentClasspathName}); //$NON-NLS-1$ ", "+\t\t\ttemplates[2] = Main.bind(", "+\t\t\t\t\"template.restrictedAccess.method\", //$NON-NLS-1$", "+\t\t\t\tnew String[] {\"{0}\", \"{1}\", currentClasspathName}); //$NON-NLS-1$ //$NON-NLS-2$ ", "+\t\t\ttemplates[3] = Main.bind(", "+\t\t\t\t\"template.restrictedAccess.field\", //$NON-NLS-1$", "+\t\t\t\tnew String[] {\"{0}\", \"{1}\", currentClasspathName}); //$NON-NLS-1$ //$NON-NLS-2$ ", "+\t\t\tAccessRuleSet accessRuleSet = new AccessRuleSet(accessRules, templates);", "+\t\t\tFileSystem.Classpath currentClasspath = FileSystem", "+\t\t\t\t\t.getClasspath(currentClasspathName,", "+\t\t\t\t\t\t\tcustomEncoding, 0, accessRuleSet);", "+\t\t\tif (currentClasspath != null) {", "+\t\t\t\tpaths.add(currentClasspath);", "+\t\t\t\tif (isSource && currentClasspath instanceof ClasspathDirectory) {", "+\t\t\t\t\t((ClasspathDirectory) currentClasspath).mode = ", "+\t\t\t\t\t\tClasspathDirectory.SOURCE;", "+\t\t\t\t\t// TODO may consider adding this attribute to other classpath natures", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tthis.logger.logIncorrectClasspath(currentClasspathName);", "+\t\t\t\t// we go on anyway", "+\t\t\t}", "+\t\t} else {", "+\t\t\tthis.logger.logIncorrectClasspath(currentClasspathName);", "+\t\t\t// we go on anyway", "+\t\t}", "-\tprivate void addNewEntry(final int InsideClasspath, final int InsideSourcepath, ArrayList bootclasspaths, ArrayList classpaths,ArrayList sourcepathClasspaths, String currentClasspathName, ArrayList currentRuleSpecs, int mode, String customEncoding) {", "-\t\tAccessRule[] accessRules = new AccessRule[currentRuleSpecs", "-\t\t\t\t.size()];", "-\t\tboolean rulesOK = true;", "-\t\tIterator i = currentRuleSpecs.iterator();", "-\t\tint j = 0;", "-\t\twhile (i.hasNext()) {", "-\t\t\tString ruleSpec = (String) i.next();", "-\t\t\tchar key = ruleSpec.charAt(0);", "-\t\t\tString pattern = ruleSpec.substring(1);", "-\t\t\tif (pattern.length() > 0) {", "-\t\t\t\tswitch (key) {", "-\t\t\t\tcase '+':", "-\t\t\t\t\taccessRules[j++] = new AccessRule(pattern", "-\t\t\t\t\t\t\t.toCharArray(), 0);", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase '~':", "-\t\t\t\t\taccessRules[j++] = new AccessRule(pattern", "-\t\t\t\t\t\t\t.toCharArray(),", "-\t\t\t\t\t\t\tIProblem.DiscouragedReference);", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase '-':", "-\t\t\t\t\taccessRules[j++] = new AccessRule(pattern", "-\t\t\t\t\t\t\t.toCharArray(),", "-\t\t\t\t\t\t\tIProblem.ForbiddenReference);", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase '?':", "-\t\t\t\t\taccessRules[j++] = new AccessRule(pattern", "-\t\t\t\t\t\t\t.toCharArray(),", "-\t\t\t\t\t\t\tIProblem.ForbiddenReference, true/*keep looking for accessible type*/);", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault:", "-\t\t\t\t\trulesOK = false;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\trulesOK = false;", "-\t\t\t}", "-\t\t}", "-\t\tif (rulesOK) {", "-\t\t\tString templates[] = new String[AccessRuleSet.MESSAGE_TEMPLATES_LENGTH];", "-\t\t\ttemplates[0] = Main.bind(", "-\t\t\t\t\"template.restrictedAccess.type\", //$NON-NLS-1$", "-\t\t\t\tnew String[] {\"{0}\", currentClasspathName}); //$NON-NLS-1$ ", "-\t\t\ttemplates[1] = Main.bind(", "-\t\t\t\t\"template.restrictedAccess.constructor\", //$NON-NLS-1$", "-\t\t\t\tnew String[] {\"{0}\", currentClasspathName}); //$NON-NLS-1$ ", "-\t\t\ttemplates[2] = Main.bind(", "-\t\t\t\t\"template.restrictedAccess.method\", //$NON-NLS-1$", "-\t\t\t\tnew String[] {\"{0}\", \"{1}\", currentClasspathName}); //$NON-NLS-1$ //$NON-NLS-2$ ", "-\t\t\ttemplates[3] = Main.bind(", "-\t\t\t\t\"template.restrictedAccess.field\", //$NON-NLS-1$", "-\t\t\t\tnew String[] {\"{0}\", \"{1}\", currentClasspathName}); //$NON-NLS-1$ //$NON-NLS-2$ ", "-\t\t\tAccessRuleSet accessRuleSet = new AccessRuleSet(accessRules, templates);", "-\t\t\tFileSystem.Classpath currentClasspath = FileSystem", "-\t\t\t\t\t.getClasspath(currentClasspathName,", "-\t\t\t\t\t\t\tcustomEncoding, 0, accessRuleSet);", "-\t\t\tif (currentClasspath != null) {", "-\t\t\t\tif (mode == InsideClasspath) {", "-\t\t\t\t\tclasspaths.add(currentClasspath);", "-\t\t\t\t} else if (mode == InsideSourcepath) {", "-\t\t\t\t\tif (currentClasspath instanceof ClasspathDirectory) {", "-\t\t\t\t\t\t((ClasspathDirectory) currentClasspath).mode = ", "-\t\t\t\t\t\t\tClasspathDirectory.SOURCE; ", "-\t\t\t\t\t\t// TODO may consider adding this attribute to other classpath natures", "-\t\t\t\t\t}", "-\t\t\t\t\tsourcepathClasspaths.add(currentClasspath);", "-\t\t\t\t} else { // inside bootclasspath", "-\t\t\t\t\tbootclasspaths.add(currentClasspath);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tthis.logger.logIncorrectClasspath(currentClasspathName);", "-\t\t\t\t// we go on anyway", "-\t\t\t}", "-\t\t} else {", "-\t\t\tthis.logger.logIncorrectClasspath(currentClasspathName);", "-\t\t\t// we go on anyway", "-\t\t}", "-\t}"]}], "num": 31084}
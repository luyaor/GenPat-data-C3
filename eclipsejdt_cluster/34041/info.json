{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1dfc44ada4ca50cc804a2133ff5688b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20c5dde7a14cc86aa34d86a45100b7d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java", "commitBeforeChange": "54a1e058a15f167377db936a3b20f8eaf31e45ee", "commitAfterChange": "73ee6422292cf3fc8444494765d84dca6f16d342", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void accept(IResource resource, int start, int end, IJavaElement element, int accuracy)", "signatureAfterChange": " \tpublic void accept(IResource resource, int start, int end, IJavaElement element, int accuracy)", "diff": ["+\t\t\t\t\t\tif (this.showContext) {", "+\t\t\t\t\t\t\tint lineStart1 = CharOperation.lastIndexOf('\\n', contents, 0, start);", "+\t\t\t\t\t\t\tint lineStart2 = CharOperation.lastIndexOf('\\r', contents, 0, start);", "+\t\t\t\t\t\t\tint lineStart = Math.max(lineStart1, lineStart2) + 1;", "+\t\t\t\t\t\t\tresults.append(CharOperation.subarray(contents, lineStart, start));", "+\t\t\t\t\t\t\tresults.append(\"<\");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (this.showContext) {", "+\t\t\t\t\t\t\tresults.append(\">\");", "+\t\t\t\t\t\t\tint lineEnd1 = CharOperation.indexOf('\\n', contents, end);", "+\t\t\t\t\t\t\tint lineEnd2 = CharOperation.indexOf('\\r', contents, end);", "+\t\t\t\t\t\t\tint lineEnd = Math.min(lineEnd1, lineEnd2);", "+\t\t\t\t\t\t\tif (lineEnd < 0) lineEnd = contents.length;", "+\t\t\t\t\t\t\tresults.append(CharOperation.subarray(contents, end, lineEnd));", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d75901ecf1ea7b431937d38825b45942", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingOpenable.java", "commitBeforeChange": "7af18694cb84cbe29d3fce9081ee13e2b35d1924", "commitAfterChange": "8062780b8432b1d43d5212d514fdd79cb7aae097", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public MatchingOpenable(MatchLocator locator, IResource resource, Openable openable)", "signatureAfterChange": " public static IType getTopLevelType(IType binaryType)", "diff": ["-public MatchingOpenable(MatchLocator locator, IResource resource, Openable openable) {", "-\tthis.locator = locator;", "-\tthis.resource = resource;", "-\tthis.openable = openable;", "-}", "+}", "+public static IType getTopLevelType(IType binaryType) {", "+\t", "+\t// ensure it is not a local or anoymous type (see bug 28752  J Search resports non-existent Java element)", "+\tString typeName = binaryType.getElementName();", "+\tint lastDollar = typeName.lastIndexOf('$');", "+\tint length = typeName.length();", "+\tif (lastDollar != -1 && lastDollar < length-1) {", "+\t\tif (Character.isDigit(typeName.charAt(lastDollar+1))) {", "+\t\t\t// local or anonymous type", "+\t\t\ttypeName = typeName.substring(0, lastDollar);", "+\t\t\tIClassFile classFile = binaryType.getPackageFragment().getClassFile(typeName+\".class\"); //$NON-NLS-1$", "+\t\t\ttry {", "+\t\t\t\tbinaryType = classFile.getType();", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// ignore as implementation of getType() cannot throw this exception", "+\t\t\t}", "+\t\t}", "+\t}", "+\t", "+\t// ensure it is a top level type", "+\tIType declaringType = binaryType.getDeclaringType();", "+\twhile (declaringType != null) {", "+\t\tbinaryType = declaringType;", "+\t\tdeclaringType = binaryType.getDeclaringType();", "+\t}", "+\treturn binaryType;"]}], "num": 34041}
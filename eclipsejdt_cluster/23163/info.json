{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ed832031e30e3d3c0302a166a6e7755", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f61ce7857ba1d09e1e05286fce9395e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "e2422311047b85902980920dda1eeedf124d520c", "commitAfterChange": "c107fdebcaaafcbea0a28f68e9b229afba9f7c4f", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " boolean isSubstituteParameterSubsignature(MethodBinding method, MethodBinding substituteMethod)", "signatureAfterChange": " boolean isSubstituteParameterSubsignature(MethodBinding method, MethodBinding substituteMethod)", "diff": ["+\t\tif (method.typeVariables != Binding.NO_TYPE_VARIABLES)", "+\t\t\treturn !((ParameterizedGenericMethodBinding) substituteMethod).isRaw;", "-\t\treturn ! (hasGenericParameter(method) && method.typeVariables == Binding.NO_TYPE_VARIABLES);", "+\t\treturn !hasGenericParameter(method);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30f99fafa87e653bef0f0bd6916253ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "451a4290b08482db72c12f90b576f09a8da8fda2", "commitAfterChange": "68032f015aeece9b1e17b3f98b4f78c4d8098b12", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic MethodBinding findExactMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findExactMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["-\t\tif (exactMethod != null && exactMethod.typeVariables == Binding.NO_TYPE_VARIABLES) {", "+\t\tif (exactMethod != null && exactMethod.typeVariables == Binding.NO_TYPE_VARIABLES && !exactMethod.isBridge()) {", "+\t\t\t// or find an inherited method when the exact match is to a bridge method"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecc960eab23a1c815d86ecde14e3d5c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "146009e38675deb85b2aa23f66e92f2f13172cf7", "commitAfterChange": "08b9d40dde0b005b87b207f8d02b5899cde7b397", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["-\t\tif (haveDescriptor && this.descriptor.typeVariables != Binding.NO_TYPE_VARIABLES) {", "-\t\t\tblockScope.problemReporter().lambdaExpressionCannotImplementGenericMethod(this, this.descriptor);", "-\t\t\treturn this.resolvedType = null;", "-\t\t}", "+\t\tif (haveDescriptor && this.descriptor.typeVariables != Binding.NO_TYPE_VARIABLES) // already complained in kosher*", "+\t\t\treturn null;", "+\t\t"]}], "num": 23163}
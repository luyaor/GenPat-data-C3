{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b9f367d9e6bc94588664d7ddc142411", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d22c3ce29e127b44e4e34619c9592fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "0b147b41fd14622e58b9abe70d023e6b22dcfbf7", "commitAfterChange": "224ac51338df376ffd0a9a55fd7c92d9e76b9040", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r protected boolean matchIndexEntry()", "signatureAfterChange": "\r protected boolean matchIndexEntry()", "diff": ["-\treturn leftPattern.matchIndexEntry()\r", "-\t\t\t|| rightPattern.matchIndexEntry();\r", "+\treturn this.leftPattern.matchIndexEntry()\r", "+\t\t\t|| this.rightPattern.matchIndexEntry();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86a0dd3f9b724aaa7bb410a3bf38b92f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected int matchContainer()", "signatureAfterChange": " protected int matchContainer()", "diff": ["-\treturn leftPattern.matchContainer() | rightPattern.matchContainer();", "+\tint result = 0;", "+\tfor (int i = 0, length = this.patterns.length; i < length; i++)", "+\t\tresult |= this.patterns[i].matchContainer();", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86d354bc4c251b33ab2ed5379e0a3d22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public boolean isPolymorphicSearch()", "signatureAfterChange": " public boolean isPolymorphicSearch()", "diff": ["-\treturn this.leftPattern.isPolymorphicSearch() || this.rightPattern.isPolymorphicSearch();", "+\tfor (int i = 0, length = this.patterns.length; i < length; i++)", "+\t\tif (this.patterns[i].isPolymorphicSearch()) return true;", "+\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a05a0fc18a41a36bbf358be75bfa78ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "1e77fadf417c78089a8bce12d01b049277ef0c41", "commitAfterChange": "caf3736c8c3269393f7e0bedb9e633769506e2e8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " public IPath getPath()", "signatureAfterChange": " public IPath getPath()", "diff": ["-\t\treturn root.getPath().append(this.getElementName().replace('.', '/'));", "+\t\tIPath path = root.getPath();", "+\t\tfor (int i = 0, length = this.names.length; i < length; i++) {", "+\t\t\tString name = this.names[i];", "+\t\t\tpath = path.append(name);", "+\t\t}", "+\t\treturn path;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8c099480cb0b00a576501fa221b14ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void initializePolymorphicSearch(MatchLocator locator, IProgressMonitor progressMonitor)", "signatureAfterChange": " public void initializePolymorphicSearch(MatchLocator locator, IProgressMonitor progressMonitor)", "diff": ["-\tthis.leftPattern.initializePolymorphicSearch(locator, progressMonitor);", "-\tthis.rightPattern.initializePolymorphicSearch(locator, progressMonitor);", "+\tfor (int i = 0, length = this.patterns.length; i < length; i++)", "+\t\tthis.patterns[i].initializePolymorphicSearch(locator, progressMonitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d30be8b6bb2987cd3216b618c5a17ad6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected boolean matchIndexEntry()", "signatureAfterChange": " protected boolean matchIndexEntry()", "diff": ["-\treturn this.leftPattern.matchIndexEntry() || this.rightPattern.matchIndexEntry();", "+\tfor (int i = 0, length = this.patterns.length; i < length; i++)", "+\t\tif (this.patterns[i].matchIndexEntry()) return true;", "+\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef9e87753762bd93589578c157b8d68f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrPattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public boolean matchesBinary(Object binaryInfo, Object enclosingBinaryInfo)", "signatureAfterChange": " public boolean matchesBinary(Object binaryInfo, Object enclosingBinaryInfo)", "diff": ["-\treturn this.leftPattern.matchesBinary(binaryInfo, enclosingBinaryInfo) ", "-\t\t|| this.rightPattern.matchesBinary(binaryInfo, enclosingBinaryInfo);", "+\tfor (int i = 0, length = this.patterns.length; i < length; i++)", "+\t\tif (this.patterns[i].matchesBinary(binaryInfo, enclosingBinaryInfo)) return true;", "+\treturn false;"]}], "num": 28532}
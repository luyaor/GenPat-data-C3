{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b832f9ece8e2586b644984508c7b6382", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7339548b279eab195ad3a544f736cdf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t\t \tpublic MethodDeclaration convert(AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": " \t\t \tpublic MethodDeclaration convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "diff": ["-\tpublic MethodDeclaration convert(AbstractMethodDeclaration methodDeclaration) {", "+\tpublic MethodDeclaration convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration) {", "-\t\tTypeReference[] thrownExceptions = methodDeclaration.thrownExceptions;", "+\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference[] thrownExceptions = methodDeclaration.thrownExceptions;", "-\t\tArgument[] parameters = methodDeclaration.arguments;", "+\t\torg.eclipse.jdt.internal.compiler.ast.Argument[] parameters = methodDeclaration.arguments;", "-\t\tExplicitConstructorCall explicitConstructorCall = null;", "+\t\torg.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall explicitConstructorCall = null;", "-\t\t\tConstructorDeclaration constructorDeclaration = (ConstructorDeclaration) methodDeclaration;", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration constructorDeclaration = (org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration) methodDeclaration;", "-\t\t\tTypeReference typeReference = method.returnType;", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeReference typeReference = method.returnType;", "-\t\t\t\t\tif (explicitConstructorCall != null && explicitConstructorCall.accessMode != ExplicitConstructorCall.ImplicitSuper) {", "+\t\t\t\t\tif (explicitConstructorCall != null && explicitConstructorCall.accessMode != org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall.ImplicitSuper) {", "-\t\t\t\t\t\tif (statements[i] instanceof LocalDeclaration) {", "+\t\t\t\t\t\tif (statements[i] instanceof org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e91ea96164386393c39db55c996f5f01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 58, "signatureBeforeChange": "  \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.Statement statement)", "signatureAfterChange": "  \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.Statement statement)", "diff": ["-\t\tif (statement instanceof LocalDeclaration) {", "-\t\t\treturn convertToVariableDeclarationStatement((LocalDeclaration)statement);", "+\t\tif (statement instanceof org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) {", "+\t\t\treturn convertToVariableDeclarationStatement((org.eclipse.jdt.internal.compiler.ast.LocalDeclaration)statement);", "-\t\tif (statement instanceof ExplicitConstructorCall) {", "-\t\t\treturn convert((ExplicitConstructorCall) statement);", "+\t\tif (statement instanceof org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall) statement);", "-\t\tif (statement instanceof LocalTypeDeclaration) {", "-\t\t\tTypeDeclarationStatement typeDeclarationStatement = this.ast.newTypeDeclarationStatement(convert((LocalTypeDeclaration) statement));", "+\t\tif (statement instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration ", "+\t\t\t\t&& (statement.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.IsLocalTypeMASK) != 0) {", "+\t\t\tTypeDeclarationStatement typeDeclarationStatement = this.ast.newTypeDeclarationStatement(convert((org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) statement));", "-\t\t\t\t\t", "-\t\t}", "-\t\tif (statement instanceof AnonymousLocalTypeDeclaration) {", "-\t\t\tExpression expr = convert((AnonymousLocalTypeDeclaration) statement);", "-\t\t\tStatement stmt = this.ast.newExpressionStatement(expr);", "-\t\t\tstmt.setSourceRange(expr.getStartPosition(), expr.getLength());", "-\t\t\treturn stmt;"]}], "num": 34428}
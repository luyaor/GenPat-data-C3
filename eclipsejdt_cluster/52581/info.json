{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "875f4ac96d84fd5f6e5c34e402e660cb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7127ede3d33616da33f9ea17f969cc91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "a7538ae82dbd33b3f26dec50ae8ce6f249c7a04f", "commitAfterChange": "f0ca1f9e3571a6c8cc7bcfc8fee3982374c51194", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public BinaryTypeBinding(PackageBinding packageBinding, IBinaryType binaryType, LookupEnvironment environment)", "signatureAfterChange": " public BinaryTypeBinding(PackageBinding packageBinding, IBinaryType binaryType, LookupEnvironment environment)", "diff": ["-\tchar[] typeSignature = environment.globalOptions.originalSourceLevel >= ClassFileConstants.JDK1_5 ? binaryType.getGenericSignature() : null;", "+\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=324850, even in a 1.4 project, we", "+\t   must internalize type variables and observe any parameterization of super class", "+\t   and/or super interfaces in order to be able to detect overriding in the presence", "+\t   of generics.", "+\t */", "+\tchar[] typeSignature = binaryType.getGenericSignature();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b519f990c4ee5ef154c1d0caffb988e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "9a2b66287e4af0b29ca3d7b683a4166987e37b8e", "commitAfterChange": "6c763db30189ed081a9acd7554555a67a4bc42af", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic ClassFile(SourceTypeBinding typeBinding)", "signatureAfterChange": "  \tpublic ClassFile(SourceTypeBinding typeBinding)", "diff": ["-\t\t// TODO see 206483", "-\t\tthis.targetJDK = options.targetJDK == ClassFileConstants.JDK1_7 ? ClassFileConstants.JDK1_6: options.targetJDK;", "+\t\tthis.targetJDK = options.targetJDK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce0e2da9a2f115f887ef0096c47cd815", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "fb5a4a9153591472847460cda5686593e378d5bf", "commitAfterChange": "c5e448ecc90e8d75bf431155e497df695586ca94", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " private int findNonNullDefault(Scope currentScope, LookupEnvironment environment)", "signatureAfterChange": " private int findNonNullDefault(Scope currentScope, LookupEnvironment environment)", "diff": ["-\t// global", "-\tif (environment.globalOptions.defaultNonNullness == TagBits.AnnotationNonNull)", "-\t\treturn NONNULL_BY_DEFAULT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed1f1c8de56a70fae674f28aad1f9c26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "149c538751123b079a5874a00aba83297561ab5c", "commitAfterChange": "7bd675acf4007077bf6bd84b82139719c7a8ca75", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public BinaryTypeBinding(PackageBinding packageBinding, IBinaryType binaryType, LookupEnvironment environment)", "signatureAfterChange": " public BinaryTypeBinding(PackageBinding packageBinding, IBinaryType binaryType, LookupEnvironment environment)", "diff": ["-\tchar[] typeSignature = environment.globalOptions.originalSourceLevel >= ClassFileConstants.JDK1_5 ? binaryType.getGenericSignature() : null;", "+\t/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=324850, even in a 1.4 project, we", "+\t   must internalize type variables and observe any parameterization of super class", "+\t   and/or super interfaces in order to be able to detect overriding in the presence", "+\t   of generics.", "+\t */", "+\tchar[] typeSignature = binaryType.getGenericSignature();"]}], "num": 52581}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0a2d07e3b67e9cd15c0a208bd686a38", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6edc81fd1fa541bfc511ffa3f187f020", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/FilerImpl.java", "commitBeforeChange": "b4f6df5ae08d61af8762ee59e5c247a670be227d", "commitAfterChange": "7007043cae1b12e48764a4ad7f71075181f1dd30", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public OutputStream createClassFile(String name) throws IOException", "signatureAfterChange": "     public OutputStream createClassFile(String typeName) throws IOException", "diff": ["-    public OutputStream createClassFile(String name) throws IOException ", "+    public OutputStream createClassFile(String typeName) throws IOException ", "+    \tif (typeName == null)", "+    \t\tthrow new IllegalArgumentException(\"Type name cannot be null\"); //$NON-NLS-1$", "+    \tif (\"\".equals(typeName)) //$NON-NLS-1$", "+    \t\tthrow new IllegalArgumentException(\"Type name cannot be empty\"); //$NON-NLS-1$", "+", "-    \tpath = path.append(name.replace('.', File.separatorChar) + \".class\"); //$NON-NLS-1$", "+    \tpath = path.append(typeName.replace('.', File.separatorChar) + \".class\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3bb51618e434dad397543832a694bef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java", "commitBeforeChange": "d3213172d29e4c1010f79436308b94172cea83cc", "commitAfterChange": "2daf63d08a96c2ed6e0e08ccfe89195f55d9f8ce", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     @Override     public boolean contains(TypeMirror t1, TypeMirror t2)", "signatureAfterChange": "     @Override     public boolean contains(TypeMirror t1, TypeMirror t2)", "diff": ["+    \tswitch(t1.getKind()) {", "+    \t\tcase EXECUTABLE :", "+    \t\tcase PACKAGE :", "+    \t\t\tthrow new IllegalArgumentException(\"Executable and package are illegal argument for Types.contains(..)\"); //$NON-NLS-1$", "+    \t}", "+    \tswitch(t2.getKind()) {", "+    \t\tcase EXECUTABLE :", "+    \t\tcase PACKAGE :", "+    \t\t\tthrow new IllegalArgumentException(\"Executable and package are illegal argument for Types.contains(..)\"); //$NON-NLS-1$", "+    \t}", "-        throw new UnsupportedOperationException(\"NYI: TypesImpl.contains(...)\"); //$NON-NLS-1$", "+        throw new UnsupportedOperationException(\"NYI: TypesImpl.contains(\" + t1 + \", \" + t2 + \")\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$"]}], "num": 46523}
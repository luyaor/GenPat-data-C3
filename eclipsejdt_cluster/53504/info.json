{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff2fc726aa784559bdda430e5ab56fb8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae14f6e3bb4703cbbb4fe488dab53268", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4a7fb72faa1d4eb35981dd799c06dbffe9837a2f", "commitAfterChange": "af607e2e1ad6576e50200e327ea9acd540ed1ad7", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " protected void reportMatching(AbstractMethodDeclaration method, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(AbstractMethodDeclaration method, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-\t\tif (enclosingElement == null)", "+\t\tif (enclosingElement == null) {", "-\t\tLocalDeclarationVisitor localDeclarationVisitor = new LocalDeclarationVisitor(enclosingElement, method.binding, nodeSet);", "+\t\t}", "+\t\t// Traverse method declaration to report matches both in local types declaration", "+\t\t// and in local variables declaration", "+\t\tASTNode[] nodes = typeInHierarchy ? nodeSet.matchingNodes(method.declarationSourceStart, method.declarationSourceEnd) : null;", "+\t\tboolean report = (this.matchContainer & PatternLocator.METHOD_CONTAINER) != 0 && encloses(enclosingElement);", "+\t\tMemberDeclarationVisitor declarationVisitor = new MemberDeclarationVisitor(enclosingElement, report ? nodes : null, nodeSet, this);", "-\t\t\tmethod.traverse(localDeclarationVisitor, (ClassScope) null);", "+\t\t\tmethod.traverse(declarationVisitor, (ClassScope) null);", "+\t\t}", "+\t\t// Report all nodes and remove them", "+\t\tif (nodes != null) {", "+\t\t\tint length = nodes.length;", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(nodes[i]);", "+\t\t\t\tif (report && level != null) {", "+\t    \t        this.patternLocator.matchReportReference(nodes[i], enclosingElement, declarationVisitor.getLocalElement(i), declarationVisitor.getOtherElements(i), method.binding, level.intValue(), this);", "+\t\t\t\t}", "+\t\t\t}", "-\t\treportMatching(method.annotations, enclosingElement, method.binding, nodeSet, true, true);", "+\t\treportMatching(method.annotations, enclosingElement, null, method.binding, nodeSet, true, true);", "-\t\t\t\tif (enclosingElement == null)", "+\t\t\t\tif (enclosingElement == null) {", "+\t\t\t\t}", "-\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\t\t\tASTNode node = nodes[i];", "-\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "-\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, method.binding, method.scope, level.intValue(), this);", "+\t\t\t\t\tif (((InternalSearchPattern)this.pattern).mustResolve) {", "+\t\t\t\t\t\t// Visit only if the pattern must resolve", "+\t\t\t\t\t\tMemberDeclarationVisitor declarationVisitor = new MemberDeclarationVisitor(enclosingElement, nodes, nodeSet, this);", "+\t\t\t\t\t\tmethod.traverse(declarationVisitor, (ClassScope) null);", "+\t\t\t\t\t\tint length = nodes.length;", "+\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(nodes[i]);", "+\t\t\t    \t        this.patternLocator.matchReportReference(nodes[i], enclosingElement, declarationVisitor.getLocalElement(i), declarationVisitor.getOtherElements(i), method.binding, level.intValue(), this);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\t\t\tASTNode node = nodes[i];", "+\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, null, null, method.binding, level.intValue(), this);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf6690228fa4508f920b123ea67e9045", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "29bba5ec8d05a9cd1832ad934d2530b41087b676", "commitAfterChange": "ca349eb1728a54f5c4569863d8f64340b099c4ce", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "  protected void reportMatching(LambdaExpression lambdaExpression,  IJavaElement parent, int accuracy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": "  protected void reportMatching(LambdaExpression lambdaExpression,  IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, boolean typeInHierarchy) throws CoreException", "diff": ["-protected void reportMatching(LambdaExpression lambdaExpression,  IJavaElement parent, int accuracy, MatchingNodeSet nodeSet) throws CoreException {", "+protected void reportMatching(LambdaExpression lambdaExpression,  IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, boolean typeInHierarchy) throws CoreException {", "+\tIJavaElement enclosingElement = null;", "+\t// Report the lambda declaration itself.", "-\t\tIJavaElement enclosingElement = createHandle(lambdaExpression, parent);", "+\t\tenclosingElement = createHandle(lambdaExpression, parent);", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (enclosingElement == null) {", "+\t\tenclosingElement = createHandle(lambdaExpression, parent);", "+\t}", "+\t// Traverse the lambda declaration to report matches inside, these matches if any should see the present lambda as the parent model element.", "+\tASTNode[] nodes = typeInHierarchy ? nodeSet.matchingNodes(lambdaExpression.sourceStart, lambdaExpression.sourceEnd) : null;", "+\tboolean report = (this.matchContainer & PatternLocator.METHOD_CONTAINER) != 0 && encloses(enclosingElement);", "+\tMemberDeclarationVisitor declarationVisitor = new MemberDeclarationVisitor(enclosingElement, report ? nodes : null, nodeSet, this, typeInHierarchy);", "+\t", "+\tif (lambdaExpression.arguments != null) {", "+\t\tint argumentsLength = lambdaExpression.arguments.length;", "+\t\tfor (int i = 0; i < argumentsLength; i++)", "+\t\t\tlambdaExpression.arguments[i].traverse(declarationVisitor, (BlockScope) null);", "+\t}", "+", "+\tif (lambdaExpression.body != null) {", "+\t\tlambdaExpression.body.traverse(declarationVisitor, (BlockScope) null);", "+\t}", "+\t", "+\t// Report all nodes and remove them", "+\tif (nodes != null) {", "+\t\tint length = nodes.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(nodes[i]);", "+\t\t\tif (report && level != null) {", "+\t\t\t\tthis.patternLocator.matchReportReference(nodes[i], enclosingElement, declarationVisitor.getLocalElement(i), declarationVisitor.getOtherElements(i), lambdaExpression.binding, level.intValue(), this);"]}], "num": 53504}
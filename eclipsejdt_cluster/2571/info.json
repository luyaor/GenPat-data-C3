{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2182cefb9c72d3196d2bd3cfa6c808b5", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0de3a461f52b8aa59f2982bac7daef89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d4a90dd90535197bda12b521c603853c2f8eb60c", "commitAfterChange": "d473849794f95ce2b5cbae060ffe683ee81ff056", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 44, "signatureBeforeChange": " public void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException", "signatureAfterChange": " private void reportMatching(FieldDeclaration field, IJavaElement parent, TypeDeclaration type, MatchingNodeSet nodeSet, boolean typeInHierarchy) throws CoreException", "diff": ["-public void reportBinaryMatch(IMember binaryMember, IBinaryType info, int accuracy) throws CoreException {", "-\treportBinaryMatch(null, binaryMember, info, accuracy);", "-}", "+ */", "+private void reportMatching(FieldDeclaration field, IJavaElement parent, TypeDeclaration type, MatchingNodeSet nodeSet, boolean typeInHierarchy) throws CoreException {", "+\t// handle the nodes for the local type first", "+\tif ((field.bits & AstNode.HasLocalTypeMASK) != 0) {", "+\t\tLocalDeclarationVisitor localDeclarationVisitor = new LocalDeclarationVisitor(", "+\t\t\t(parent instanceof IType)", "+\t\t\t\t? (field.isField()", "+\t\t\t\t\t? (IJavaElement) createFieldHandle(field, (IType) parent)", "+\t\t\t\t\t: (IJavaElement) createInitializerHandle(type, field, (IType) parent))", "+\t\t\t\t: parent,", "+\t\t\tnodeSet);", "+\t\ttry {", "+\t\t\tfield.traverse(localDeclarationVisitor, null);", "+\t\t} catch (WrappedCoreException e) {", "+\t\t\tthrow e.coreException;", "+\t\t}", "+\t}", "+", "+\tif (typeInHierarchy) {", "+\t\tAstNode[] nodes = nodeSet.matchingNodes(field.declarationSourceStart, field.declarationSourceEnd);", "+\t\tif (nodes != null) {", "+\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\tAstNode node = nodes[i];", "+\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\tif ((this.matchContainer & PatternLocator.FIELD_CONTAINER) != 0)", "+\t\t\t\t\treportReference(node, type, field, parent, level.intValue());", "+\t\t\t}", "+\t\t}", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a35e3698d0dfa3146a1d1beb7effabb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "98ad487e103c268099d7117573693243c8d3b8fc", "commitAfterChange": "721a9dcda02493639666143934bddb089e848d18", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 71, "signatureBeforeChange": " protected void reportMatching(FieldDeclaration field, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(FieldDeclaration field, TypeDeclaration type, IJavaElement parent, IJavaElement[] otherElements, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-protected void reportMatching(FieldDeclaration field, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException {", "+protected void reportMatching(FieldDeclaration field, TypeDeclaration type, IJavaElement parent, IJavaElement[] otherElements, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException {", "-\t\t// limit scan to end part position for multiple fields declaration (see bug 73112)", "-\t\tint end = field.endPart2Position==0 ? field.declarationSourceEnd : field.endPart2Position;", "-\t\tASTNode[] nodes = nodeSet.matchingNodes(field.declarationSourceStart, end);", "+\t\t// Look at field declaration", "+\t\tif (field.endPart1Position != 0) { // not necessary if field is an initializer", "+\t\t\tASTNode[] nodes = nodeSet.matchingNodes(field.declarationSourceStart, field.endPart1Position);", "+\t\t\tif (nodes != null) {", "+\t\t\t\tif ((this.matchContainer & PatternLocator.FIELD_CONTAINER) == 0) {", "+\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++)", "+\t\t\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[i]);", "+\t\t\t\t} else {", "+\t\t\t\t\tif (enclosingElement == null)", "+\t\t\t\t\t\tenclosingElement = createHandle(field, type, parent);", "+\t\t\t\t\tif (encloses(enclosingElement)) {", "+\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\t\t\tASTNode node = nodes[i];", "+\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, null, otherElements, field.binding, level.intValue(), this);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+", "+\t\t// Look in initializer", "+\t\tint fieldEnd = field.endPart2Position == 0 ? field.declarationSourceEnd : field.endPart2Position;", "+\t\tASTNode[] nodes = nodeSet.matchingNodes(field.sourceStart, fieldEnd);", "-\t\t\t\tif (enclosingElement == null)", "+\t\t\t\tif (enclosingElement == null) {", "-\t\t\t\tif (encloses(enclosingElement))", "+\t\t\t\t}", "+\t\t\t\tif (encloses(enclosingElement)) {", "-\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, field.binding, level.intValue(), this);", "+\t\t\t\t\t\t// Set block scope for initializer in case there would have other local and other elements to report", "+\t\t\t\t\t\tBlockScope blockScope = null;", "+\t\t\t\t\t\tif (field.getKind() == AbstractVariableDeclaration.INITIALIZER) {", "+\t\t\t\t\t\t\tBlock block = ((Initializer)field).block;", "+\t\t\t\t\t\t\tif (block != null) blockScope = block.scope;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, field.binding, blockScope, level.intValue(), this);", "+\t\t\t\t}"]}], "num": 2571}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d007ebecb1c7330439e04a56986b2ab0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43873adcf94396a17cd1e34ffaaed167", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "cf895c35367340c7abd90778e60347850683ddea", "commitAfterChange": "04e1bf5f2770f9a2cdfb59f2c6a93389d529209c", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " protected IJavaElement createHandle(AbstractMethodDeclaration method, IJavaElement parent)", "signatureAfterChange": " protected IJavaElement createHandle(AbstractMethodDeclaration method, IJavaElement parent)", "diff": ["+\t\t\t\t// build arguments names", "-\t\t\t\tnextMethod : for (int i = 0, methodsLength = methods.length; i < methodsLength; i++) {", "-\t\t\t\t\tIBinaryMethod binaryMethod = methods[i];", "-\t\t\t\t\tchar[] selector = binaryMethod.isConstructor() ? type.getElementName().toCharArray() : binaryMethod.getSelector();", "-\t\t\t\t\tif (CharOperation.equals(selector, method.selector)) {", "-\t\t\t\t\t\tchar[] signature = binaryMethod.getGenericSignature();", "-\t\t\t\t\t\tif (signature == null) signature = binaryMethod.getMethodDescriptor();", "-\t\t\t\t\t\tchar[][] parameterTypes = Signature.getParameterTypes(signature);", "-\t\t\t\t\t\tif (argCount != parameterTypes.length) continue nextMethod;", "-\t\t\t\t\t\tif (arguments != null) {", "-\t\t\t\t\t\t\tfor (int j = 0; j < argCount; j++) {", "-\t\t\t\t\t\t\t\tchar[] typeName;", "-\t\t\t\t\t\t\t\tif (j == 0 && firstIsSynthetic) {", "-\t\t\t\t\t\t\t\t\ttypeName = type.getDeclaringType().getFullyQualifiedName().toCharArray();", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tTypeReference typeRef = arguments[firstIsSynthetic ? j - 1 : j].type;", "-\t\t\t\t\t\t\t\t\ttypeName = CharOperation.concatWith(typeRef.getTypeName(), '.');", "-\t\t\t\t\t\t\t\t\tfor (int k = 0, dim = typeRef.dimensions(); k < dim; k++)", "-\t\t\t\t\t\t\t\t\t\ttypeName = CharOperation.concat(typeName, new char[] {'[', ']'});", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tchar[] parameterTypeName = ClassFileMatchLocator.convertClassFileFormat(parameterTypes[j]);", "-\t\t\t\t\t\t\t\tif (!CharOperation.endsWith(Signature.toCharArray(Signature.getTypeErasure(parameterTypeName)), typeName))", "-\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\t\tparameterTypes[j] = parameterTypeName;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn createMethodHandle(type, new String(selector), CharOperation.toStrings(parameterTypes));", "+\t\t\t\tchar[][] argumentTypeNames = new char[argCount][];", "+\t\t\t\tfor (int i = 0; i < argCount; i++) {", "+\t\t\t\t\tchar[] typeName = null;", "+\t\t\t\t\tif (i == 0 && firstIsSynthetic) {", "+\t\t\t\t\t\ttypeName = type.getDeclaringType().getFullyQualifiedName().toCharArray();", "+\t\t\t\t\t} else if (arguments != null) {", "+\t\t\t\t\t\tTypeReference typeRef = arguments[firstIsSynthetic ? i - 1 : i].type;", "+\t\t\t\t\t\ttypeName = CharOperation.concatWith(typeRef.getTypeName(), '.');", "+\t\t\t\t\t\tfor (int k = 0, dim = typeRef.dimensions(); k < dim; k++)", "+\t\t\t\t\t\t\ttypeName = CharOperation.concat(typeName, new char[] {'[', ']'});", "+\t\t\t\t\tif (typeName == null) {", "+\t\t\t\t\t\t// invalid type name", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "+\t\t\t\t\targumentTypeNames[i] = typeName;", "+\t\t\t\t", "+\t\t\t\t// return binary method", "+\t\t\t\treturn createBinaryMethodHandle(type, method.selector, argumentTypeNames);", "-//\t\t\tfor (int j = 0, dim = typeRef.dimensions(); j < dim; j++)", "-//\t\t\t\ttypeName = CharOperation.concat(typeName, new char[] {'[', ']'});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbda4caedbf78ee05aad4217d2f7b600", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " protected IJavaElement createHandle(AbstractMethodDeclaration method, IJavaElement parent)", "signatureAfterChange": " protected IJavaElement createHandle(AbstractMethodDeclaration method, IJavaElement parent)", "diff": ["-\t\t\t\t\t\tfor (int j = 0; j < argCount; j++) {", "-\t\t\t\t\t\t\tchar[] typeName;", "-\t\t\t\t\t\t\tif (j == 0 && firstIsSynthetic) {", "-\t\t\t\t\t\t\t\ttypeName = type.getDeclaringType().getFullyQualifiedName().toCharArray();", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tTypeReference typeRef = arguments[firstIsSynthetic ? j - 1 : j].type;", "-\t\t\t\t\t\t\t\ttypeName = CharOperation.concatWith(typeRef.getTypeName(), '.');", "-\t\t\t\t\t\t\t\tfor (int k = 0, dim = typeRef.dimensions(); k < dim; k++)", "-\t\t\t\t\t\t\t\t\ttypeName = CharOperation.concat(typeName, new char[] {'[', ']'});", "+\t\t\t\t\t\tif (arguments != null) {", "+\t\t\t\t\t\t\tfor (int j = 0; j < argCount; j++) {", "+\t\t\t\t\t\t\t\tchar[] typeName;", "+\t\t\t\t\t\t\t\tif (j == 0 && firstIsSynthetic) {", "+\t\t\t\t\t\t\t\t\ttypeName = type.getDeclaringType().getFullyQualifiedName().toCharArray();", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tTypeReference typeRef = arguments[firstIsSynthetic ? j - 1 : j].type;", "+\t\t\t\t\t\t\t\t\ttypeName = CharOperation.concatWith(typeRef.getTypeName(), '.');", "+\t\t\t\t\t\t\t\t\tfor (int k = 0, dim = typeRef.dimensions(); k < dim; k++)", "+\t\t\t\t\t\t\t\t\t\ttypeName = CharOperation.concat(typeName, new char[] {'[', ']'});", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tchar[] parameterTypeName = ClassFileMatchLocator.convertClassFileFormat(parameterTypes[j]);", "+\t\t\t\t\t\t\t\tif (!CharOperation.endsWith(Signature.toCharArray(Signature.getTypeErasure(parameterTypeName)), typeName))", "+\t\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\t\tparameterTypes[j] = parameterTypeName;", "-\t\t\t\t\t\t\tchar[] parameterTypeName = ClassFileMatchLocator.convertClassFileFormat(parameterTypes[j]);", "-\t\t\t\t\t\t\tif (!CharOperation.endsWith(Signature.toCharArray(Signature.getTypeErasure(parameterTypeName)), typeName))", "-\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\tparameterTypes[j] = parameterTypeName;", "-\tfor (int i = 0; i < argCount; i++) {", "-\t\tTypeReference typeRef = arguments[i].type;", "-\t\tchar[] typeName = CharOperation.concatWith(typeRef.getParameterizedTypeName(), '.');", "-//\t\tfor (int j = 0, dim = typeRef.dimensions(); j < dim; j++)", "-//\t\t\ttypeName = CharOperation.concat(typeName, new char[] {'[', ']'});", "-\t\tparameterTypeSignatures[i] = Signature.createTypeSignature(typeName, false);", "+\tif (arguments != null) {", "+\t\tfor (int i = 0; i < argCount; i++) {", "+\t\t\tTypeReference typeRef = arguments[i].type;", "+\t\t\tchar[] typeName = CharOperation.concatWith(typeRef.getParameterizedTypeName(), '.');", "+//\t\t\tfor (int j = 0, dim = typeRef.dimensions(); j < dim; j++)", "+//\t\t\t\ttypeName = CharOperation.concat(typeName, new char[] {'[', ']'});", "+\t\t\tparameterTypeSignatures[i] = Signature.createTypeSignature(typeName, false);", "+\t\t}"]}], "num": 63248}
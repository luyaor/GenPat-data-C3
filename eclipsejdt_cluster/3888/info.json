{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4597e95f24cf7034e3788b20d14b87eb", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "011b940433c88807dc48bb15356eafa8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "c48ecebe36df1bdca1948a66baeb643827a9b9c4", "commitAfterChange": "df8a00dea42b2c33f742d8ce1045c2aa42b28f3e", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod(ReferenceBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["+\t\t\t\t\t\tif (foundSize == 1 && compatibleMethod.canBeSeenBy(receiverType, invocationSite, this)) {", "+\t\t\t\t\t\t\t// return the single visible match now", "+\t\t\t\t\t\t\tif (isCompliant14 && (receiverType.isAbstract() || receiverType.isTypeVariable())) {", "+\t\t\t\t\t\t\t\tMethodBinding interfaceMethod =", "+\t\t\t\t\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found);", "+\t\t\t\t\t\t\t\tif (interfaceMethod != null) {", "+\t\t\t\t\t\t\t\t\tcandidates = new MethodBinding[] {compatibleMethod, interfaceMethod};", "+\t\t\t\t\t\t\t\t\treturn mostSpecificMethodBinding(candidates, 2, argumentTypes, invocationSite, receiverType);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tunitScope.recordTypeReferences(compatibleMethod.thrownExceptions);", "+\t\t\t\t\t\t\treturn compatibleMethod;", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fb07cd12591d283ac8566e90beaba0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic boolean updateCurrentDeltaAndIndex(IResourceDelta delta, int elementType, RootInfo rootInfo)", "signatureAfterChange": " \tpublic boolean updateCurrentDeltaAndIndex(IResourceDelta delta, int elementType, RootInfo rootInfo)", "diff": ["-\t\t\t\tif ((flags & IResourceDelta.CONTENT) != 0 || (flags & IResourceDelta.ENCODING) != 0) {", "+\t\t\t\tif (elementType == IJavaElement.PACKAGE_FRAGMENT_ROOT && (flags & IResourceDelta.LOCAL_CHANGED) != 0) {", "+\t\t\t\t\t// external folder added or removed", "+\t\t\t\t\tdeltaRes = delta.getResource();", "+\t\t\t\t\tObject target = JavaModel.getExternalTarget(deltaRes.getLocation(), true/*check resource existence*/);", "+\t\t\t\t\telement = createElement(deltaRes, elementType, rootInfo);", "+\t\t\t\t\tupdateIndex(element, delta);", "+\t\t\t\t\tif (target != null) {", "+\t\t\t\t\t\t// external folder added", "+\t\t\t\t\t\telementAdded(element, delta, rootInfo);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// external folder removed", "+\t\t\t\t\t\telementRemoved(element, delta, rootInfo);", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.state.addClasspathValidation(rootInfo.project);", "+\t\t\t\t} else if ((flags & IResourceDelta.CONTENT) != 0 || (flags & IResourceDelta.ENCODING) != 0) {"]}], "num": 3888}
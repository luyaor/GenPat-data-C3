{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f2ac6f82dbe3219557061b1a5ed4a01", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f8914bea91c95ba959f89d39f1cee89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "605cc5dd745b7e1d6935bfc34c1be6fcea51b4ab", "commitAfterChange": "03be42bb9ac6b223bea20e29a7b3f31a76dae9e4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprotected IJavaElement getElement(SearchMatch searchMatch)", "signatureAfterChange": " \tprotected void writeLine() throws CoreException", "diff": ["-\tprotected IJavaElement getElement(SearchMatch searchMatch) {", "-\t\tIJavaElement element = super.getElement(searchMatch);", "-\t\tIJavaElement localElement = null;", "+\tprotected void writeLine() throws CoreException {", "+\t\tsuper.writeLine();", "-\t\tlocalElement = refMatch.getLocalElement();", "+\t\tIJavaElement localElement = refMatch.getLocalElement();", "-\t\t\treturn localElement;", "+\t\t\tthis.line.append(\"+[\");", "+\t\t\tif (localElement.getElementType() == IJavaElement.ANNOTATION) {", "+\t\t\t\tthis.line.append('@');", "+\t\t\t\tthis.line.append(localElement.getElementName());", "+\t\t\t\tthis.line.append(\" on \");", "+\t\t\t\tthis.line.append(localElement.getParent().getElementName());", "+\t\t\t} else {", "+\t\t\t\tthis.line.append(localElement.getElementName());", "+\t\t\t}", "+\t\t\tthis.line.append(']');", "-\t\treturn element;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43995d5b2a145efb4a624872077bdd8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "4c1d4b601e686baad6c5a6a92ddbbebe0b64a62d", "commitAfterChange": "efbaf5f01b1dd1c4f8135936aa48ce411ca71c6c", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 108, "signatureBeforeChange": " \tpublic boolean visit(SwitchStatement switchStatement, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(SwitchStatement switchStatement, BlockScope scope)", "diff": ["+\t\t\t\t\tif (wasACase) {", "+\t\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\tif (wasACase) {", "+\t\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\t}", "+\t\t\t\t} else if (statement instanceof Block) {", "+\t\t\t\t\tString bracePosition;", "+\t\t\t\t\tif (wasACase) {", "+\t\t\t\t\t\tif (this.preferences.indent_switchstatements_compare_to_cases) {", "+\t\t\t\t\t\t\tthis.scribe.unIndent();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbracePosition =\tthis.preferences.brace_position_for_block_in_case;", "+\t\t\t\t\t\tformatBlock((Block) statement, scope, bracePosition, this.preferences.insert_space_after_colon_in_case);", "+\t\t\t\t\t\tif (this.preferences.indent_switchstatements_compare_to_cases) {", "+\t\t\t\t\t\t\tthis.scribe.indent();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbracePosition =\tthis.preferences.brace_position_for_block;", "+\t\t\t\t\t\tformatBlock((Block) statement, scope, bracePosition, this.preferences.insert_space_before_opening_brace_in_block);", "+\t\t\t\t\t}", "+\t\t\t\t\twasAStatement = true;", "+\t\t\t\t\twasACase = false;", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t} else if (!wasACase) {", "+\t\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t\tthis.scribe.printNewLine();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a44e489cd749eb40bb22902056d59bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "8a64589617f7b80b7f12bb3f773ab58c605663c7", "commitAfterChange": "6585c7471e2cc73387fb0d652a600f2678de9051", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 27, "signatureBeforeChange": " \t \tpublic void printCommentLine(char[] s, int start)", "signatureAfterChange": " \t \tprivate void printCommentLine(char[] s)", "diff": ["-\tpublic void printCommentLine(char[] s, int start) {", "-\t\tint length = s.length;", "-\t\tint index;", "-\t\tloop: for (index = length - 1; index >= 0; index--) {", "-\t\t\tswitch(s[index]) {", "+\tprivate void printCommentLine(char[] s) {", "+\t\tint currentTokenStartPosition = this.scanner.getCurrentTokenStartPosition();", "+\t\tint currentTokenEndPosition = this.scanner.getCurrentTokenEndPosition() + 1;", "+", "+\t\tthis.scanner.resetTo(currentTokenStartPosition, currentTokenEndPosition - 1);", "+\t\tint currentCharacter;", "+\t\tint start = currentTokenStartPosition;", "+\t\tint nextCharacterStart = currentTokenStartPosition;", "+\t\tprintIndentationIfNecessary();", "+\t\tint previousStart = currentTokenStartPosition;", "+", "+\t\tloop: while (nextCharacterStart <= currentTokenEndPosition && (currentCharacter = this.scanner.getNextChar()) != -1) {", "+\t\t\tnextCharacterStart = this.scanner.currentPosition;", "+", "+\t\t\tswitch(currentCharacter) {", "+\t\t\t\t\tstart = previousStart;", "+\t\t\t\t\tbreak loop;", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault:", "+\t\t\t\t\tstart = previousStart;", "+\t\t\tpreviousStart = nextCharacterStart;", "-\t\tprintIndentationIfNecessary();", "-\t\tif (this.positionsToMap != null) {", "-\t\t\tmapPositions(start, this.buffer.length(), s.length);", "+\t\tif (start != currentTokenStartPosition) {", "+\t\t\taddReplaceEdit(start, currentTokenEndPosition - 1, lineSeparator);", "-\t\tthis.buffer", "-\t\t\t.append(s, 0, index + 1)", "-\t\t\t.append(lineSeparator);", "+\t\t// realign to the proper value", "-\t\t\tthis.indentationLevel = this.currentAlignment.breakIndentationLevel;", "-\t\t}", "-\t}", "+\t\t\tif (this.memberAlignment != null) {", "+\t\t\t\t// select the last alignment", "+\t\t\t\tif (this.currentAlignment.location.inputOffset > this.memberAlignment.location.inputOffset) {", "+\t\t\t\t\tthis.indentationLevel = this.currentAlignment.breakIndentationLevel;", "+\t\t\t\t\tthis.indentationLevel = this.memberAlignment.breakIndentationLevel;", "+\t\t\t} else {", "+\t\t\t\tthis.indentationLevel = this.currentAlignment.breakIndentationLevel;", "+\t\tthis.scanner.resetTo(currentTokenEndPosition, this.scannerEndPosition - 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71d8c26496c7fb69ffe050d7ee7b2b83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "d7b968f8074ad4e44b5a08309dcb414a4be941a4", "commitAfterChange": "b64275d5d6005c49a64e53460529203088ebb2bb", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": " \tpublic boolean visit(LongLiteral longLiteral, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(LambdaExpression lambdaExpression, BlockScope scope)", "diff": ["+\t */", "+\tpublic boolean visit(LambdaExpression lambdaExpression, BlockScope scope) {", "+\t\t", "+\t\tfinal int numberOfParens = (lambdaExpression.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageOpeningParenthesizedExpression(lambdaExpression, numberOfParens);", "+\t\t}", "+\t\tif (isNextToken(TerminalTokens.TokenNameLPAREN)) {", "+\t\t\t// Format arguments", "+\t\t\tformatMethodArguments(", "+\t\t\t\tlambdaExpression.arguments,", "+\t\t\t\tlambdaExpression.getScope(),", "+\t\t\t\tthis.preferences.insert_space_before_opening_paren_in_method_declaration,", "+\t\t\t\tthis.preferences.insert_space_between_empty_parens_in_method_declaration,", "+\t\t\t\tthis.preferences.insert_space_before_closing_paren_in_method_declaration,", "+\t\t\t\tthis.preferences.insert_space_after_opening_paren_in_method_declaration,", "+\t\t\t\tthis.preferences.insert_space_before_comma_in_method_declaration_parameters,", "+\t\t\t\tthis.preferences.insert_space_after_comma_in_method_declaration_parameters,", "+\t\t\t\tthis.preferences.alignment_for_parameters_in_method_declaration);", "+\t\t} else {", "+\t\t\t// This MUST be a single, untyped parameter", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier);", "+\t\t}", "+\t\tif (this.preferences.insert_space_before_lambda_arrow) this.scribe.space();", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameARROW);", "+\t\tif (this.preferences.insert_space_after_lambda_arrow) this.scribe.space();", "+\t\tif (lambdaExpression.body instanceof Block) {", "+\t\t\tformatBlock((Block) lambdaExpression.body, scope, this.preferences.brace_position_for_lambda_body, this.preferences.insert_space_before_opening_brace_in_block);", "+\t\t} else {", "+\t\t\tlambdaExpression.body.traverse(this, scope);", "+\t\t}", "+", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageClosingParenthesizedExpression(lambdaExpression, numberOfParens);", "+\t\t}", "+\t\treturn false;", "+\t}"]}], "num": 66758}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b43056681dedb47f37bcafe368b7e3e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "374d9eb2c90cbae322ded6a05a09ee7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest2.java", "commitBeforeChange": "ef65b8b1774a515074b8340776ab2542dae4a475", "commitAfterChange": "9075dc15ba5b5b70200c2d9ee0faa5fffc4ee53d", "methodNumberBeforeChange": 175, "methodNumberAfterChange": 175, "signatureBeforeChange": " \tpublic void test0538a() throws JavaModelException", "signatureAfterChange": " \tpublic void test0538a() throws JavaModelException", "diff": ["-\t\t\tCompilationUnit unit = sourceUnit.reconcile(true, false, null, null);", "-\t\t\tassertNotNull(\"No compilation unit\", unit);", "+\t\t\tCompilationUnit unit = sourceUnit.reconcile(AST.LEVEL_2_0, false, null, null);", "+\t\t\tassertNotNull(\"No level 2 compilation unit\", unit);", "+\t\t\tassertEquals(\"Compilation unit has wrong AST level (2)\", AST.LEVEL_2_0, unit.getAST().apiLevel());", "+\t\t\t// TODO improve test for AST.LEVEL_3_0"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c0bd43c94b022ad60bb772cd09782cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "83202a3eb8c5a069490467f042bef2dbf139e317", "commitAfterChange": "3eb54501d04c06d548e0703970c7c1e0fb48a24c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t\targuments[i] = new Argument(CharOperation.append(implicitArgName, Integer.toString(i).toCharArray()), 0, null, 0, true);", "+\t\t\targuments[i] = new Argument(CharOperation.append(ImplicitArgName, Integer.toString(i).toCharArray()), 0, null, 0, true);", "-\t\t\tchar[] name = CharOperation.append(implicitArgName, Integer.toString((i + parameterShift)).toCharArray());", "+\t\t\tchar[] name = CharOperation.append(ImplicitArgName, Integer.toString((i + parameterShift)).toCharArray());", "-\t\t\tmessage.receiver = this.receiverPrecedesParameters ? new SingleNameReference(new char[]{' ', 'a', 'r', 'g', '0'}, 0) : receiver;", "+\t\t\tmessage.receiver = this.receiverPrecedesParameters ? ", "+\t\t\t\t\tnew SingleNameReference(CharOperation.append(ImplicitArgName, Integer.toString(0).toCharArray()), 0) : receiver;"]}], "num": 1144}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8fff599509b6488129c2aa055aba4246", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "212edde4c21392f723b700b34d95a7cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 952, "methodNumberAfterChange": 952, "signatureBeforeChange": " public void test0929()", "signatureAfterChange": " public void test0929()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 6)\\n\" +", "-\t\t\"\tClass<? extends Enum> enumType = null;\\n\" +", "-\t\t\"\t                ^^^^\\n\" +", "-\t\t\"Enum is a raw type. References to generic type Enum<E> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 7)\\n\" +", "-\t\t\"\tfinal Collection<E> test = allOf(enumType);\\n\" +", "-\t\t\"\t                           ^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation allOf(Class<capture#1-of ? extends Enum>) of the generic method allOf(Class<E>) of type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 7)\\n\" +", "-\t\t\"\tfinal Collection<E> test = allOf(enumType);\\n\" +", "-\t\t\"\t                           ^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type mismatch: cannot convert from Collection<capture#1-of ? extends Enum> to Collection<E>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in X.java (at line 9)\\n\" +", "-\t\t\"\tCollection<? extends Enum> colType = null;\\n\" +", "-\t\t\"\t                     ^^^^\\n\" +", "-\t\t\"Enum is a raw type. References to generic type Enum<E> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. ERROR in X.java (at line 10)\\n\" +", "-\t\t\"\tfinal Collection<E> test2 = colType;\\n\" +", "-\t\t\"\t                            ^^^^^^^\\n\" +", "-\t\t\"Type mismatch: cannot convert from Collection<capture#2-of ? extends Enum> to Collection<E>\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\"\tClass<? extends Enum> enumType = null;\\n\" + ", "+\t\t\"\t                ^^^^\\n\" + ", "+\t\t\"Enum is a raw type. References to generic type Enum<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tfinal Collection<E> test = allOf(enumType);\\n\" + ", "+\t\t\"\t                           ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation allOf(Class<capture#1-of ? extends Enum>) of the generic method allOf(Class<E>) of type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tfinal Collection<E> test = allOf(enumType);\\n\" + ", "+\t\t\"\t                           ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: The expression of type Collection needs unchecked conversion to conform to Collection<E>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"\tCollection<? extends Enum> colType = null;\\n\" + ", "+\t\t\"\t                     ^^^^\\n\" + ", "+\t\t\"Enum is a raw type. References to generic type Enum<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\"\tfinal Collection<E> test2 = colType;\\n\" + ", "+\t\t\"\t                            ^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Collection<capture#2-of ? extends Enum> to Collection<E>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "974c968eede39e4a17cd552afef8ea6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 738, "methodNumberAfterChange": 738, "signatureBeforeChange": " public void test0718()", "signatureAfterChange": " public void test0718()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 13)\\n\" +", "-\t\t\"\tpublic class ActionImpl<T extends Base> extends Action<T> implements Comparable<ActionImpl> {\\n\" +", "-\t\t\"\t                                                                                ^^^^^^^^^^\\n\" +", "-\t\t\"X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 14)\\n\" +", "-\t\t\"\tpublic int compareTo(ActionImpl o) {\\n\" +", "-\t\t\"\t                     ^^^^^^^^^^\\n\" +", "-\t\t\"X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. WARNING in X.java (at line 20)\\n\" +", "-\t\t\"\tSet<ActionImpl> set = new TreeSet<ActionImpl>();\\n\" +", "-\t\t\"\t    ^^^^^^^^^^\\n\" +", "-\t\t\"X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in X.java (at line 20)\\n\" +", "-\t\t\"\tSet<ActionImpl> set = new TreeSet<ActionImpl>();\\n\" +", "-\t\t\"\t                                  ^^^^^^^^^^\\n\" +", "-\t\t\"X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. WARNING in X.java (at line 21)\\n\" +", "-\t\t\"\tCollections.max(set);\\n\" +", "-\t\t\"\t^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation max(Collection<? extends X.ActionImpl>) of the generic method max(Collection<? extends T>) of type Collections\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"6. ERROR in X.java (at line 23)\\n\" +", "-\t\t\"\tZork z;\\n\" +", "-\t\t\"\t^^^^\\n\" +", "-\t\t\"Zork cannot be resolved to a type\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\"\tpublic class ActionImpl<T extends Base> extends Action<T> implements Comparable<ActionImpl> {\\n\" + ", "+\t\t\"\t                                                                                ^^^^^^^^^^\\n\" + ", "+\t\t\"X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\"\tpublic int compareTo(ActionImpl o) {\\n\" + ", "+\t\t\"\t                     ^^^^^^^^^^\\n\" + ", "+\t\t\"X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\"\tSet<ActionImpl> set = new TreeSet<ActionImpl>();\\n\" + ", "+\t\t\"\t    ^^^^^^^^^^\\n\" + ", "+\t\t\"X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\"\tSet<ActionImpl> set = new TreeSet<ActionImpl>();\\n\" + ", "+\t\t\"\t                                  ^^^^^^^^^^\\n\" + ", "+\t\t\"X.ActionImpl is a raw type. References to generic type X.ActionImpl<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 21)\\n\" + ", "+\t\t\"\tCollections.max(set);\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation max(Set<X.ActionImpl>) of the generic method max(Collection<? extends T>) of type Collections\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. ERROR in X.java (at line 23)\\n\" + ", "+\t\t\"\tZork z;\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + "]}], "num": 37563}
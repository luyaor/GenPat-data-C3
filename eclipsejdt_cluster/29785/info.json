{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96e48afd0e77c25638de176484ef974c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7589e07f2205ba2287581cd3c301e3ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "36af4ca0b413cc401b0bc4442925b5f641f8df7a", "commitAfterChange": "15070dfb720141f260eff9f86b3742c51648d5f0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tvoid computeLocalVariablePositions(int ilocal, int initOffset, CodeStream codeStream)", "signatureAfterChange": " \tvoid computeLocalVariablePositions(int ilocal, int initOffset, CodeStream codeStream)", "diff": ["-\t\t\t\t\tif (this.offset > 0xFFFF) { // no more than 65535 words of locals", "-\t\t\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForLocal(", "-\t\t\t\t\t\t\tlocal, ", "-\t\t\t\t\t\t\tlocal.declaration == null ? (AstNode)this.methodScope().referenceContext : local.declaration);", "-\t\t\t\t\t}", "+\t\t\t\t\tif (this.offset > 0xFFFF) { // no more than 65535 words of locals", "+\t\t\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForLocal(", "+\t\t\t\t\t\t\tlocal, ", "+\t\t\t\t\t\t\tlocal.declaration == null ? (AstNode)this.methodScope().referenceContext : local.declaration);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be3bc03e55a4f74524c0007a89cb6d7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "c15e0219de25387b013bc67328ee786c2c1bc5f9", "commitAfterChange": "eb26a7cfa6d0bf96c880e80bcef15852e78da4ed", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 92, "signatureBeforeChange": " \tpublic static void updateAllCycleMarkers() throws JavaModelException", "signatureAfterChange": " \tpublic static void updateAllCycleMarkers() throws JavaModelException", "diff": ["-\t\tArrayList visited = new ArrayList();", "+\t\t", "+\t\t/* alternate implementation for cycle participants computation", "+\t\tcomputeCycleParticipants(projects, cycleParticipants);", "+\t\t*/", "+", "+\t\t// compute cycle participants", "+\t\tArrayList visited = new ArrayList();", "-", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eedc0935fe77fa2aaa93486fbe79985e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchSet.java", "commitBeforeChange": "d5681cddd2bc040c1eb37719a4428ed2ff838f36", "commitAfterChange": "3334e44255d4ee3f5cec1b83d0e0822fcc4d85ec", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " private void reportMatching(AbstractMethodDeclaration method, IJavaElement parent) throws CoreException", "signatureAfterChange": " private void reportMatching(AbstractMethodDeclaration method, IJavaElement parent) throws CoreException", "diff": ["+\t// declaration in this method", "+\t// (NB: declarations must be searched first (see bug 20631 Declaration of local binary type not found)", "+\tif ((method.bits & AstNode.HasLocalTypeMASK) != 0) {", "+\t\tLocalDeclarationVisitor localDeclarationVisitor = new LocalDeclarationVisitor();", "+\t\tlocalDeclarationVisitor.enclosingElement = ", "+\t\t\t(parent instanceof IType) ?", "+\t\t\t\tthis.locator.createMethodHandle(method, (IType)parent) :", "+\t\t\t\tparent;", "+\t\ttry {", "+\t\t\tmethod.traverse(localDeclarationVisitor, (ClassScope)null);", "+\t\t} catch (WrappedCoreException e) {", "+\t\t\tthrow e.coreException;", "+\t\t}", "+\t}", "+\t", "-\t\t}", "-\t}", "-\tif ((method.bits & AstNode.HasLocalTypeMASK) != 0) {", "-\t\tLocalDeclarationVisitor localDeclarationVisitor = new LocalDeclarationVisitor();", "-\t\tlocalDeclarationVisitor.enclosingElement = ", "-\t\t\t(parent instanceof IType) ?", "-\t\t\t\tthis.locator.createMethodHandle(method, (IType)parent) :", "-\t\t\t\tparent;", "-\t\ttry {", "-\t\t\tmethod.traverse(localDeclarationVisitor, (ClassScope)null);", "-\t\t} catch (WrappedCoreException e) {", "-\t\t\tthrow e.coreException;"]}], "num": 29785}
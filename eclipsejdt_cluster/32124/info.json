{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f04a416eb8ad2f55f9918eafba132ed", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2986ba2fff619a37c0a45afe824cd1b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/RawTypeBinding.java", "commitBeforeChange": "cf30dcc5cf110d772b62d35f57e0c35d494f0e46", "commitAfterChange": "a61eee4f24f1c2965e704a1c85f9756b85244f55", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\t\t \t     public boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": "\t\t \t     public boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-\t    if (this == otherType) return true;", "-        if (otherType == null) return false;", "-\t\tif (otherType.isWildcard()) // wildcard", "-\t\t\treturn ((WildcardBinding) otherType).boundCheck(this);", "-        return otherType.erasure() == this.erasure();", "-    }", "+\t\tif (this == otherType) ", "+\t\t    return true;", "+\t    if (otherType == null) ", "+\t        return false;", "+\t    switch(otherType.kind()) {", "+\t", "+\t    \tcase Binding.WILDCARD_TYPE :", "+\t        \treturn ((WildcardBinding) otherType).boundCheck(this);", "+\t    \t\t", "+\t    \tcase Binding.GENERIC_TYPE :", "+\t    \tcase Binding.PARAMETERIZED_TYPE :", "+\t    \tcase Binding.RAW_TYPE :", "+\t            return erasure() == otherType.erasure();", "+\t    }", "+        return false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e88980990abd831baf551a6ec2d14df6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "6cdef9e50c0c19ef931636bb6582e431ba4ed6f0", "commitAfterChange": "a08dcb71c251f4a65da174f08c5aedb4a1c21fbd", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": " public boolean isEquivalentTo(TypeBinding otherType)", "diff": ["+\t", "-    if (otherType.isWildcard()) // wildcard", "-\t\treturn ((WildcardBinding) otherType).boundCheck(this);", "-    if (this.typeVariables == NoTypeVariables) return false;", "-    if (otherType.isRawType())", "-        return otherType.erasure() == this;", "+    switch(otherType.bindingType()) {", "+", "+    \tcase Binding.WILDCARD_TYPE :", "+\t\t\treturn ((WildcardBinding) otherType).boundCheck(this);", "+", "+\t\tcase Binding.RAW_TYPE :", "+\t\t\treturn otherType.erasure() == this;", "+    }"]}], "num": 32124}
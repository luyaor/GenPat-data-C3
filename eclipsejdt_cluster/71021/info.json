{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "818beb6c2c28e5df2feb37c4a18e9d93", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "361b94821661b44c8a3fc73d826c4fca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/ClasspathMultiDirectory.java", "commitBeforeChange": "82197baae0367830baca5c640478373ab5a7a62f", "commitAfterChange": "8fb638b22d441ebdf2eef8ceaf13b7008c790687", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \r NameEnvironmentAnswer findClass(char[] className, char[][] packageName)", "signatureAfterChange": "\r \r NameEnvironmentAnswer findClass(char[] className, char[][] packageName)", "diff": ["-\tString filename = new String(className);\r", "-\tString sourceFilename = filename + \".java\"; //$NON-NLS-1$\r", "-\tString binaryFilename = filename + \".class\"; //$NON-NLS-1$\r", "-\r", "-\tif (!exists(binaryPath, binaryFilename, packageName)) {\r", "-\t\tif (!exists(sourcePath, sourceFilename, packageName)) return null;\r", "-\t\tString fullName = sourcePath + NameEnvironment.assembleName(sourceFilename, packageName, '/');\r", "-\t\treturn new NameEnvironmentAnswer(new CompilationUnit(null, fullName));\r", "-\t}\r", "-\r", "-\tif (!exists(sourcePath, sourceFilename, packageName)) {\r", "-\t\t// ask builder for the matching source filename for this type\r", "-\t\tsourceFilename = findSourceFilenameFor(className, packageName);\r", "-\t\tif (sourceFilename == null) {\r", "-\t\t\t// return class file if a matching source filename doesn't exist... EXTRA class file case\r", "-\t\t\ttry {\r", "-\t\t\t\treturn new NameEnvironmentAnswer(\r", "-\t\t\t\t\tClassFileReader.read(binaryPath + NameEnvironment.assembleName(binaryFilename, packageName, '/')));\r", "-\t\t\t} catch (Exception e) {\r", "-\t\t\t\treturn null;\r", "-\t\t\t}\r", "-\t\t}\r", "+\tif (nameEnvironment.additionalSourceFilenames != null) {\r", "+\t\t// if an additional source file is waiting to be compiled, answer it\r", "+\t\t// BUT not if this is a secondary type search,\r", "+\t\t// if we answer the source file X.java which may no longer define Y\r", "+\t\t// then the binary type looking for Y will fail & think the class path is wrong\r", "+\t\t// let the recompile loop fix up dependents when Y has been deleted from X.java\r", "+\t\tString sourceFilename = new String(className) + \".java\"; //$NON-NLS-1$\r", "-\t\t\t// return the source file which contains this secondary type\r", "-\t\t\tString fullName = sourcePath + NameEnvironment.assembleName(sourceFilename, packageName, '/');\r", "-\t\t\treturn new NameEnvironmentAnswer(new CompilationUnit(null, fullName));\r", "-\t\t}\r", "-\t\treturn null; // return null if a source filename is known but its not in this classpath entry\r", "-\t}\r", "-\r", "-\tString fullSourceName = sourcePath + NameEnvironment.assembleName(sourceFilename, packageName, '/');\r", "-\tString fullBinaryName = binaryPath + NameEnvironment.assembleName(binaryFilename, packageName, '/');\r", "-\tlong sourceModified = new File(fullSourceName).lastModified();\r", "-\tlong binaryModified = new File(fullBinaryName).lastModified();\r", "-\tif (binaryModified > sourceModified) {\r", "-\t\ttry {\r", "-\t\t\treturn new NameEnvironmentAnswer(\r", "-\t\t\t\tClassFileReader.read(fullBinaryName));\r", "-\t\t} catch (Exception e) {\r", "+\t\t\tString fullSourceName = sourcePath + NameEnvironment.assembleName(sourceFilename, packageName, '/');\r", "+\t\t\tString[] additionalSourceFilenames = nameEnvironment.additionalSourceFilenames;\r", "+\t\t\tfor (int i = 0, l = additionalSourceFilenames.length; i < l; i++)\r", "+\t\t\t\tif (fullSourceName.equals(additionalSourceFilenames[i]))\r", "+\t\t\t\t\treturn new NameEnvironmentAnswer(new CompilationUnit(null, fullSourceName));\r", "-\treturn new NameEnvironmentAnswer(new CompilationUnit(null, fullSourceName));\r", "-}\r", "+\t// assume any class file found in this output folder would eventually be found...\r", "+\t// its possible with multiple source folders, that a class file should not be found associated\r", "+\t// with this source folder, but with another which we have yet to search\r", "+\treturn super.findClass(className, packageName);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6df620eb24a5337d0f62ae7671764e64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "739f46dc80f05018247a11479ac4224752f3b7da", "commitAfterChange": "b87b4725d2e28b5cdeb71175856b8b7535e04544", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate void processCompilationUnitResource(ICompilationUnit source, PackageFragment dest) throws JavaModelException", "signatureAfterChange": " \tprivate void processCompilationUnitResource(ICompilationUnit source, PackageFragment dest) throws JavaModelException", "diff": ["-\t\tString newContent = updatedContent(source, dest, newCUName); // null if unchanged", "+\t\tASTRewrite rewrite = updateContent(source, dest, newCUName); // null if unchanged", "-\t\t\t\t\tif (force) {", "+\t\t\t\t\tif (this.force) {", "-\t\t\t\tint flags = force ? IResource.FORCE : IResource.NONE;", "+\t\t\t\tint flags = this.force ? IResource.FORCE : IResource.NONE;", "-\t\t\t\t\tif (newContent != null) flags |= IResource.KEEP_HISTORY;", "+\t\t\t\t\tif (rewrite != null) flags |= IResource.KEEP_HISTORY;", "-\t\t\tif (newContent != null){", "+\t\t\tif (rewrite != null){", "-\t\t\t\t\tString encoding = null;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\t// TODO (frederic) remove when bug 67606 will be fixed (bug 67823)", "-\t\t\t\t\t\t// fix bug 66898", "-\t\t\t\t\t\tif (sourceEncoding != null) destFile.setCharset(sourceEncoding, this.progressMonitor);", "-\t\t\t\t\t\t// end todo", "-\t\t\t\t\t\tencoding = destFile.getCharset();", "-\t\t\t\t\t}", "-\t\t\t\t\tcatch (CoreException ce) {", "-\t\t\t\t\t\t// use no encoding", "-\t\t\t\t\t}", "-\t\t\t\t\t// when the file was copied, its read-only flag was preserved -> temporary set it to false", "-\t\t\t\t\t// note this doesn't interfer with repository providers as this is a new resource that cannot be under", "-\t\t\t\t\t// version control yet", "-\t\t\t\t\tUtil.setReadOnly(destFile, false);", "-\t\t\t\t\t", "-\t\t\t\t\tdestFile.setContents(", "-\t\t\t\t\t\tnew ByteArrayInputStream(encoding == null ? newContent.getBytes() : newContent.getBytes(encoding)), ", "-\t\t\t\t\t\tforce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY,", "-\t\t\t\t\t\tgetSubProgressMonitor(1));", "-\t\t\t\t} catch(IOException e) {", "-\t\t\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "+\t\t\t\t\tsaveContent(dest, destName, rewrite, sourceEncoding, destFile);", "+\t\t\t\t\tif (e instanceof JavaModelException) throw (JavaModelException) e;", "-\t\t\tif (!force) {", "+\t\t\tif (!this.force) {", "-\t\t\t\tif (newContent != null){", "-\t\t\t\t\tString encoding = null;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\t// TODO (frederic) remove when bug 67606 will be fixed (bug 67823)", "-\t\t\t\t\t\t// fix bug 66898", "-\t\t\t\t\t\tif (sourceEncoding != null) destFile.setCharset(sourceEncoding, this.progressMonitor);", "-\t\t\t\t\t\t// end todo", "-\t\t\t\t\t\tencoding = destFile.getCharset();", "-\t\t\t\t\t}", "-\t\t\t\t\tcatch (CoreException ce) {", "-\t\t\t\t\t\t// use no encoding", "-\t\t\t\t\t}", "-\t\t\t\t\tdestFile.setContents(", "-\t\t\t\t\t\tnew ByteArrayInputStream(encoding == null ? newContent.getBytes() : newContent.getBytes(encoding)), ", "-\t\t\t\t\t\tforce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY, ", "-\t\t\t\t\t\tgetSubProgressMonitor(1));", "+\t\t\t\tif (rewrite != null){", "+\t\t\t\t\tsaveContent(dest, destName, rewrite, sourceEncoding, destFile);", "-\t\t\t} catch(IOException e) {", "-\t\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "+\t\t\t\tif (e instanceof JavaModelException) throw (JavaModelException) e;"]}], "num": 71021}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af6ddfda8d0c2c969ae8bcb4976eaaab", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c151fd73655c1a511ce924bca0075cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "64daeb17943302da145ef115d15261de8d97b017", "commitAfterChange": "8c36621cf84c38f056b439d0f0ca65c3c7b433c1", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tpublic static void setClasspathContainer(final IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic static void setClasspathContainer(final IPath containerPath, IJavaProject[] affectedProjects, IClasspathContainer[] respectiveContainers, IProgressMonitor monitor) throws JavaModelException", "diff": ["+\t\t", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tif (manager.containerPutIfInitializingWithSameEntries(containerPath, affectedProjects, respectiveContainers))", "+\t\t\treturn;", "-\t\tfinal int projectLength = affectedProjects.length;", "+\t\tfinal int projectLength = affectedProjects.length;\t", "-\t\t\t\tJavaModelManager.getJavaModelManager().containerPut(affectedProject, containerPath, newContainer);", "+\t\t\t\tmanager.containerPut(affectedProject, containerPath, newContainer);", "-\t\t\tIClasspathContainer oldContainer = JavaModelManager.getJavaModelManager().containerGet(affectedProject, containerPath);", "+\t\t\tIClasspathContainer oldContainer = manager.containerGet(affectedProject, containerPath);", "-\t\t\tJavaModelManager.getJavaModelManager().containerPut(affectedProject, containerPath, newContainer);", "+\t\t\tmanager.containerPut(affectedProject, containerPath, newContainer);", "-\t\t\t\t\tJavaModelManager.getJavaModelManager().containerPut(affectedProjects[i], containerPath, null); // reset init in progress marker", "+\t\t\t\t\tmanager.containerPut(affectedProjects[i], containerPath, null); // reset init in progress marker"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8ac45feb0817927b22315566210e0db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "9047de642a4fe05a5bba1fa6d221ad8ba57bc55b", "commitAfterChange": "d6effcfe4a21d9ecb9e022e5dc306788e2e35beb", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\t\t\t\t\t\t\tif (original.thrownExceptions != original2.thrownExceptions) {", "-\t\t\t\t\t\t\t\tif (original2.thrownExceptions == Binding.NO_EXCEPTIONS) {", "+\t\t\t\t\t\t\tif (current.thrownExceptions != next.thrownExceptions) {", "+\t\t\t\t\t\t\t\tif (next.thrownExceptions == Binding.NO_EXCEPTIONS) {", "-\t\t\t\t\t\t\t\t\t\tmostSpecificExceptions = original.thrownExceptions;", "+\t\t\t\t\t\t\t\t\t\tmostSpecificExceptions = current.thrownExceptions;", "-\t\t\t\t\t\t\t\t\tint original2Length = original2.thrownExceptions.length;", "+\t\t\t\t\t\t\t\t\tint nextLength = next.thrownExceptions.length;", "-\t\t\t\t\t\t\t\t\t\tfor (int s = 0; s < original2Length; s++) {", "-\t\t\t\t\t\t\t\t\t\t\tif (exception.isCompatibleWith(original2.thrownExceptions[s])) {", "+\t\t\t\t\t\t\t\t\t\tfor (int s = 0; s < nextLength; s++) {", "+\t\t\t\t\t\t\t\t\t\t\tReferenceBinding nextException = next.thrownExceptions[s];", "+\t\t\t\t\t\t\t\t\t\t\tif (exception.isCompatibleWith(nextException)) {", "-\t\t\t\t\t\t\t\t\t\t\t} else if (original2.thrownExceptions[s].isCompatibleWith(exception)) {", "-\t\t\t\t\t\t\t\t\t\t\t\ttemp.add(original2.thrownExceptions[s]);", "+\t\t\t\t\t\t\t\t\t\t\t} else if (nextException.isCompatibleWith(exception)) {", "+\t\t\t\t\t\t\t\t\t\t\t\ttemp.add(nextException);"]}], "num": 73087}
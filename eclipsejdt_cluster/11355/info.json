{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "880b17e81969a74e0c62adea395ccd59", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fa19b09dafab6faea9afc6057e40312", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "2575677ccf79826ae518b108e29fbe307f660188", "commitAfterChange": "b243eb08a74352504ffb14aeb81edca5ce327ed3", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \t   \tpublic void resolve()", "signatureAfterChange": " \t   \tpublic void resolve()", "diff": ["-\t\t\tif (this.typeParameters != null && scope.getJavaLangThrowable().isSuperclassOf(sourceType)) {", "-\t\t\t\tthis.scope.problemReporter().genericTypeCannotExtendThrowable(this);", "+\t\t\t// generics (and non static generic members) cannot extend Throwable", "+\t\t\tif (sourceType.findSuperTypeErasingTo(TypeIds.T_JavaLangThrowable, true) != null) {", "+\t\t\t\tReferenceBinding current = sourceType;", "+\t\t\t\tcheckEnclosedInGeneric : do {", "+\t\t\t\t\tif (current.isGenericType()) {", "+\t\t\t\t\t\tthis.scope.problemReporter().genericTypeCannotExtendThrowable(this);", "+\t\t\t\t\t\tbreak checkEnclosedInGeneric;\t\t\t\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t\tif (current.isStatic()) break checkEnclosedInGeneric;", "+\t\t\t\t} while ((current = current.enclosingType()) != null);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e387dd9093e350205263a0d11c1001f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java", "commitBeforeChange": "1dc6df2cba1e3f21897002448cbe5ca7ad21d269", "commitAfterChange": "973af06dbc6df022ac42e8e0a0c238581d8558f6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\t  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "signatureAfterChange": "\t  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "diff": ["-\t\tTypeBinding throwable = scope.getJavaLangThrowable();", "-\t\tif (!exceptionType.isCompatibleWith(throwable)) {", "-\t\t\tscope.problemReporter().typeMismatchError(exceptionType, throwable, this);", "+\t\tif (exceptionType.findSuperTypeErasingTo(TypeIds.T_JavaLangThrowable, true) == null) {", "+\t\t\tscope.problemReporter().cannotThrowType(this.type, exceptionType);", "-\t\t}", "+\t\t}\t\t\t", "-\t\t\t\treturn null;", "+\t\t\t} else {", "+\t\t\t\tscope.problemReporter().localVariableHiding(this, existingVariable, false);", "-\t\t\tscope.problemReporter().localVariableHiding(this, existingVariable, false);"]}], "num": 11355}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "182df4e2d35ac7ff55f2d68a1edb1d15", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d112d514f18898f674ceeb271955a41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FakedTrackingVariable.java", "commitBeforeChange": "40ad9904e939ba54abece52421044021edd6e1c0", "commitAfterChange": "8d45cb26fc5ad244f93e8632d761d46ad4a120cf", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic static FlowInfo markPassedToOutside(BlockScope scope, Expression expression, FlowInfo flowInfo)", "signatureAfterChange": " \tpublic static FlowInfo markPassedToOutside(BlockScope scope, Expression expression, FlowInfo flowInfo, boolean owned)", "diff": ["-\tpublic static FlowInfo markPassedToOutside(BlockScope scope, Expression expression, FlowInfo flowInfo) {", "+\tpublic static FlowInfo markPassedToOutside(BlockScope scope, Expression expression, FlowInfo flowInfo, boolean owned) {\t", "+\t\t", "-\t\t\ttrackVar.globalClosingState |= PASSED_TO_OUTSIDE;", "-\t\t\tif (scope.methodScope() != trackVar.methodScope)", "-\t\t\t\ttrackVar.globalClosingState |= CLOSED_IN_NESTED_METHOD;", "+\t\t\tif (trackVar.originalBinding == null) {", "+\t\t\t\t// an allocation that never was assigned to a local variable -> drop it completely as we're not responsible", "+\t\t\t\tscope.removeTrackingVar(trackVar);", "+\t\t\t\treturn flowInfo;", "+\t\t\t}", "-\t\t\tinfoResourceIsClosed.markAsDefinitelyNonNull(trackVar.binding);", "+\t\t\tint flag = owned ? OWNED_BY_OUTSIDE : SHARED_WITH_OUTSIDE;", "+\t\t\tdo {", "+\t\t\t\ttrackVar.globalClosingState |= flag;", "+\t\t\t\tif (scope.methodScope() != trackVar.methodScope)", "+\t\t\t\t\ttrackVar.globalClosingState |= CLOSED_IN_NESTED_METHOD;", "+\t\t\t\tinfoResourceIsClosed.markAsDefinitelyNonNull(trackVar.binding);", "+\t\t\t} while ((trackVar = trackVar.innerTracker) != null); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9da4baee2fcdc5d31b4d157d02596142", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FakedTrackingVariable.java", "commitBeforeChange": "40ad9904e939ba54abece52421044021edd6e1c0", "commitAfterChange": "8d45cb26fc5ad244f93e8632d761d46ad4a120cf", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tpublic boolean reportRecordedErrors(Scope scope)", "signatureAfterChange": "  \tpublic boolean reportRecordedErrors(Scope scope, int mergedStatus)", "diff": ["-\tpublic boolean reportRecordedErrors(Scope scope) {", "-\t\tif (this.globalClosingState == 0) {", "-\t\t\treportError(scope.problemReporter(), null, FlowInfo.NULL);", "-\t\t\treturn true;", "+\tpublic boolean reportRecordedErrors(Scope scope, int mergedStatus) {", "+\t\tFakedTrackingVariable current = this;", "+\t\twhile (current.globalClosingState == 0) {", "+\t\t\tcurrent = current.innerTracker;", "+\t\t\tif (current == null) {", "+\t\t\t\t// no relevant state found -> report:", "+\t\t\t\treportError(scope.problemReporter(), null, mergedStatus);", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tint reportFlags = 0;", "-\t\t\t\treportError(scope.problemReporter(), (ASTNode)entry.getKey(), ((Integer)entry.getValue()).intValue());", "+\t\t\t\treportFlags |= reportError(scope.problemReporter(), (ASTNode)entry.getKey(), ((Integer)entry.getValue()).intValue());", "+\t\t\t}", "+\t\t\tif (reportFlags != 0) {", "+\t\t\t\t// after all locations have been reported, mark as reported to prevent duplicate report via an outer wrapper", "+\t\t\t\tcurrent = this;", "+\t\t\t\tdo {", "+\t\t\t\t\tcurrent.globalClosingState |= reportFlags;", "+\t\t\t\t} while ((current = current.innerTracker) != null);"]}], "num": 3075}
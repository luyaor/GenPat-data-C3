{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22677153a75e1b4f1229ef8e58ff0da6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "129c61c714f79de1d56a7387e1ec3f8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "7fa614421be752542e93fc8394ff005421401e06", "commitAfterChange": "8c40adfe15c680e040fa4c1f51e65e6986081149", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private void buildForProject(JavaProject project, ArrayList potentialSubtypes, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " private void buildForProject(JavaProject project, ArrayList potentialSubtypes, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\t\t\t\tthis.hierarchyResolver.resolveLocalType(focusType, declaringMember);", "+\t\t\t\t\tOpenable openable;", "+\t\t\t\t\tif (declaringMember.isBinary()) {", "+\t\t\t\t\t\topenable = (Openable)declaringMember.getClassFile();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\topenable = (Openable)declaringMember.getCompilationUnit();", "+\t\t\t\t\t}", "+\t\t\t\t\tlocalTypes = new HashSet();", "+\t\t\t\t\tlocalTypes.add(openable.getPath().toString());", "+\t\t\t\t\tthis.hierarchyResolver.resolve(new Openable[] {openable}, localTypes, monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d766d5e833d53d798d49350f08e8cfc7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "7fa614421be752542e93fc8394ff005421401e06", "commitAfterChange": "8c40adfe15c680e040fa4c1f51e65e6986081149", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  public void resolve(Openable[] openables, HashSet localTypes, IProgressMonitor monitor)", "signatureAfterChange": "  public void resolve(Openable[] openables, HashSet localTypes, IProgressMonitor monitor)", "diff": ["+\t\t", "+\t\tCompilationUnitDeclaration focusUnit = null;", "+\t\tBinaryTypeBinding focusBinaryBinding = null;", "+\t\tIType focus = this.requestor.getType();", "+\t\tOpenable focusOpenable = null;", "+\t\tif (focus != null) {", "+\t\t\tif (focus.isBinary()) {", "+\t\t\t\tfocusOpenable = (Openable)focus.getClassFile();", "+\t\t\t} else {", "+\t\t\t\tfocusOpenable = (Openable)focus.getCompilationUnit();", "+\t\t\t}", "+\t\t}", "+\t\t\t\t\t\tif (openable.equals(focusOpenable)) {", "+\t\t\t\t\t\t\tfocusUnit = parsedUnit;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (openable.equals(focusOpenable)) {", "+\t\t\t\t\t\t\tfocusBinaryBinding = binaryTypeBinding;", "+\t\t\t\t\t\t}", "-\t\treportHierarchy();", "+\t\treportHierarchy(focus, focusUnit, focusBinaryBinding);", "-}"]}], "num": 51846}
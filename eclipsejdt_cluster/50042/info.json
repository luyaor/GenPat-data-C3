{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d6e9ecb051da0a9a1420da6d19adf17", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f3c58fd5ee94686da85b70a9b4aa745", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "3b755d4e14f95caf2a60783a66e89e17e7199e48", "commitAfterChange": "efe133ae678322ac49a8b9b58aa2e56b16527b71", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t\tpublic void logException(Exception e)", "signatureAfterChange": " \t\tpublic void logException(Exception e)", "diff": ["-\t\t\tfinal String message = e.getMessage();", "+\t\t\tStringWriter writer = new StringWriter();", "+\t\t\tPrintWriter printWriter = new PrintWriter(writer);", "+\t\t\te.printStackTrace(printWriter);", "+\t\t\tprintWriter.flush();", "+\t\t\tprintWriter.close();", "+\t\t\tfinal String stackTrace = writer.getBuffer().toString();", "+\t\t\t\tLineNumberReader reader = new LineNumberReader(new StringReader(stackTrace));", "+\t\t\t\tString line;", "+\t\t\t\tint i = 0;", "+\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\tString message = null;", "+\t\t\t\ttry {", "+\t\t\t\t\twhile ((line = reader.readLine()) != null && i < 4) {", "+\t\t\t\t\t\tbuffer.append(line).append(LINE_SEPARATOR);", "+\t\t\t\t\t\ti++;", "+\t\t\t\t\t}", "+\t\t\t\t\treader.close();", "+\t\t\t\t\tmessage = buffer.toString();", "+\t\t\t\t} catch (IOException e1) {", "+\t\t\t\t\t// ignore", "+\t\t\t\t\tmessage = e.getMessage();", "+\t\t\t\t}", "-\t\t\tthis.printlnErr(message);", "+\t\t\tthis.printlnErr(stackTrace);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ac2768fc4f6b9c157ff462de12d2bfa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "73a3572f1ed828d7a770d67850f907fae70bd464", "commitAfterChange": "50431e234c5ece34d7b8d3e0af32a86a5079d5cd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic static String bind(String id, String[] bindings)", "signatureAfterChange": " \tpublic static String bind(String id, String[] bindings)", "diff": ["-\t\tif (bindings == null)", "-\t\t\treturn message;", "-", "-\t\tStringBuffer output = new StringBuffer(80);", "+\t\tStringBuffer output = null;", "+\t\t\t\tif (output == null) output = new StringBuffer(80);", "-\t\t\t\t\t} catch (NumberFormatException nfe) {", "-\t\t\t\t\t\toutput.append(message.substring(end + 1, start + 1));", "+\t\t\t\t\t} catch (NumberFormatException nfe) { // could be nested message ID {compiler.name}", "+\t\t\t\t\t\tString argId = message.substring(end + 1, start);", "+\t\t\t\t\t\tboolean done = false;", "+\t\t\t\t\t\tif (!id.equals(argId)) {", "+\t\t\t\t\t\t\tString argMessage = null;", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\targMessage = bundle.getString(argId);", "+\t\t\t\t\t\t\t\toutput.append(argMessage);", "+\t\t\t\t\t\t\t\tdone = true;", "+\t\t\t\t\t\t\t} catch (MissingResourceException e) {", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!done) output.append(message.substring(end + 1, start + 1));", "+\t\t\t\tif (output == null) return message;"]}], "num": 50042}
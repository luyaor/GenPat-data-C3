{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3aef1aeae66f4ff50082974819ba4d3d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0af26f9525fb0b6ae6f5ece13703299b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "86397dfc80023f615cc88c0705b2ada916e6efb2", "commitAfterChange": "24624a25f60573230ed7652730faedca15fd4d8b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashtableOfArrayToObject packageFragments, ICompilationUnit[] workingCopies, Map rootToResolvedEntries)", "signatureAfterChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashtableOfArrayToObject packageFragments, ICompilationUnit[] workingCopies, Map rootToResolvedEntries)", "diff": ["+\t\t\t}", "+\t\t}", "+\t\t", "+\t\t// cache whether each package and its including packages (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=119161)", "+\t\t// are actual packages", "+\t\tthis.isPackageCache = new HashtableOfArrayToObject();", "+\t\tfor (int i = 0, size = this.packageFragments.keyTable.length; i < size; i++) {", "+\t\t\tString[] pkgName = (String[]) this.packageFragments.keyTable[i];", "+\t\t\tif (pkgName == null) continue;", "+\t\t\tthis.isPackageCache.put(pkgName, pkgName);", "+\t\t\tint length = pkgName.length;", "+\t\t\tfor (int j = length-1; j > 0; j--) {", "+\t\t\t\tString[] subPkgName = new String[j];", "+\t\t\t\tSystem.arraycopy(pkgName, 0, subPkgName, 0, j);", "+\t\t\t\tthis.isPackageCache.put(subPkgName, subPkgName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daa9c7fd6a5c28f32af2d28c6e6a0c0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "98ad487e103c268099d7117573693243c8d3b8fc", "commitAfterChange": "721a9dcda02493639666143934bddb089e848d18", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 62, "signatureBeforeChange": "  protected void report(SearchMatch match) throws CoreException", "signatureAfterChange": "  protected void report(SearchMatch match) throws CoreException", "diff": ["+\t\t}", "+\t\tif (match instanceof TypeReferenceMatch) {", "+\t\t\ttry {", "+\t\t\t\tTypeReferenceMatch typeRefMatch = (TypeReferenceMatch) match;", "+\t\t\t\tJavaElement local = (JavaElement) typeRefMatch.getLocalElement();", "+\t\t\t\tif (local != null) {", "+\t\t\t\t\tSystem.out.println(\"\\tLocal element: \"+ local.toStringWithAncestors()); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tIJavaElement[] others = typeRefMatch.getOtherElements();", "+\t\t\t\tint length = others==null ? 0 : others.length;", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tSystem.out.println(\"\\tOther elements:\"); //$NON-NLS-1$", "+\t\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\t\tJavaElement other = (JavaElement) others[i];", "+\t\t\t\t\t\tSystem.out.println(\"\\t\\t- \"+ other.toStringWithAncestors()); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} catch (Exception e) {", "+\t\t\t\t// it's just for debug purposes... ignore all exceptions in this area", "+\t\t\t}"]}], "num": 27013}
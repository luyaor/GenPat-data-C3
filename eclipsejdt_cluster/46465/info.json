{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3357fd3f152a1f55e3a35a2d07242f5b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "590a902801e1a32e0ca90135f15a5f72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "e1454516411e21c76afb7797ea67208e4fc9c49d", "commitAfterChange": "85e7f681aa7d70ec863df3c9b4c8ff252b7d94c0", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "signatureAfterChange": " \tpublic MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "diff": ["-\t\tif (match != null) return match;", "+\t\tif (match != null) {", "+\t\t\t// TODO (kent) tag method in verifier if it overrides a method which can cause an anonymous error", "+\t\t\tif (match.hasSubstitutedParameters()) return null; // cannot be picked up as an exact match", "+\t\t\treturn match;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b24e1c43f6846ebb0f59e6a969c2bfc6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "819bb62f16446e9a1757b33db7d63dd4b15a4d8f", "commitAfterChange": "187128198001f088f437c77fd90e7d0733035368", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic MethodBinding getExactConstructor(TypeBinding[] argumentTypes)", "signatureAfterChange": " \tpublic MethodBinding getExactConstructor(TypeBinding[] argumentTypes)", "diff": ["+\t\tMethodBinding match = null;", "-\t\t\t\t\t\treturn method;", "+\t\t\t\t\t\tif (match != null) return null; // collision case", "+\t\t\t\t\t\tmatch = method;", "-\t\t\t\t\t\treturn method;", "+\t\t\t\t\t\tif (match != null) return null; // collision case", "+\t\t\t\t\t\tmatch = method;", "-\t\treturn null;", "+\t\treturn match;"]}], "num": 46465}
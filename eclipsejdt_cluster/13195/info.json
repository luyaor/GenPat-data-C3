{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f60c01c3c69ec6b2d3c52ad4ff549df", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41b67b112225b657cd23cb28633e265c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "ff17444fcc31fe021d6a45c4b051acce1b3894e3", "commitAfterChange": "eb15457015da4dfaee5df4c21a851b245805072a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void enterType(TypeInfo typeInfo)", "signatureAfterChange": " public void enterType(TypeInfo typeInfo)", "diff": ["-\tinfo.setSuperclassName(typeInfo.superclass);", "-\tinfo.setSuperInterfaceNames(typeInfo.superinterfaces);", "+\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\tchar[] superclass = typeInfo.superclass;", "+\tinfo.setSuperclassName(superclass == null ? null : manager.intern(superclass));", "+\tchar[][] superinterfaces = typeInfo.superinterfaces;", "+\tfor (int i = 0, length = superinterfaces == null ? 0 : superinterfaces.length; i < length; i++)", "+\t\tsuperinterfaces[i] = manager.intern(superinterfaces[i]);", "+\tinfo.setSuperInterfaceNames(superinterfaces);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59daee73bccb4a47a65d0b3dd94117f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "ebc568fad377cf85a79bc0aeeea9122e5115f057", "commitAfterChange": "75c11b9993cee3cc0c66baeb87390d3f47878de0", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t\t\tpublic IProblem createProblem( \t\t\t\tchar[] originatingFileName, \t\t\t\tint problemId, \t\t\t\tString[] problemArguments, \t\t\t\tString[] messageArguments, \t\t\t\tint severity, \t\t\t\tint startPosition, \t\t\t\tint endPosition, \t\t\t\tint lineNumber)", "signatureAfterChange": "  \tprivate static void reportProblems(CompilationUnitDeclaration unit, IAbstractSyntaxTreeVisitor visitor)", "diff": ["-\t\treturn new DefaultProblemFactory(Locale.getDefault()) {", "-\t\t\tpublic IProblem createProblem(", "-\t\t\t\tchar[] originatingFileName,", "-\t\t\t\tint problemId,", "-\t\t\t\tString[] problemArguments,", "-\t\t\t\tString[] messageArguments,", "-\t\t\t\tint severity,", "-\t\t\t\tint startPosition,", "-\t\t\t\tint endPosition,", "-\t\t\t\tint lineNumber) {", "-", "-\t\t\t\tIProblem problem =", "-\t\t\t\t\tsuper.createProblem(", "-\t\t\t\t\t\toriginatingFileName,", "-\t\t\t\t\t\tproblemId,", "-\t\t\t\t\t\tproblemArguments,", "-\t\t\t\t\t\tmessageArguments,", "-\t\t\t\t\t\tseverity,", "-\t\t\t\t\t\tstartPosition,", "-\t\t\t\t\t\tendPosition,", "-\t\t\t\t\t\tlineNumber);", "-\t\t\t\t// only consider problems associated with resolved file", "-\t\t\t\tif (CharOperation.equals(originatingFileName, fileName)){", "-\t\t\t\t\tvisitor.acceptProblem(problem);", "-\t\t\t\t}", "-\t\t\t\treturn problem;", "-\t\t\t}", "+\tprivate static void reportProblems(CompilationUnitDeclaration unit, IAbstractSyntaxTreeVisitor visitor) {", "+\t\tCompilationResult unitResult = unit.compilationResult;", "+\t\tIProblem[] problems = unitResult.getAllProblems();", "+\t\tfor (int i = 0, problemLength = problems == null ? 0 : problems.length; i < problemLength; i++) {", "+\t\t\tvisitor.acceptProblem(problems[i]);\t\t\t\t", "+\t\t}\t"]}], "num": 13195}
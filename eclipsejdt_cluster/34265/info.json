{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "906a3a2c048c9c01c0c1679946e30b05", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15967f602450d62cf3ed677cca5a30bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "6989ce4249d0c03fe58f852df992efa441f6edc4", "commitAfterChange": "c4e062ebcfc48b14b7c36c591e88d44ce5b3b5c0", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 117, "signatureBeforeChange": " \tpublic boolean visit(ReturnStatement returnStatement, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(org.eclipse.jdt.internal.compiler.ast.ReferenceExpression referenceExpression, BlockScope blockScope)", "diff": ["+\t */", "+\tpublic boolean visit(org.eclipse.jdt.internal.compiler.ast.ReferenceExpression referenceExpression, BlockScope blockScope) {", "+\t\treferenceExpression.lhs.traverse(this, blockScope);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOLON_COLON);", "+\t\t", "+\t\tTypeReference[] typeArguments = referenceExpression.typeArguments;", "+\t\tif (typeArguments != null) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_type_arguments);", "+\t\t\t\tif (this.preferences.insert_space_after_opening_angle_bracket_in_type_arguments) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}", "+\t\t\t\tint length = typeArguments.length;", "+\t\t\t\tfor (int i = 0; i < length - 1; i++) {", "+\t\t\t\t\ttypeArguments[i].traverse(this, blockScope);", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_type_arguments);", "+\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_type_arguments) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\ttypeArguments[length - 1].traverse(this, blockScope);", "+\t\t\t\tif (isClosingGenericToken()) {", "+\t\t\t\t\tthis.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_type_arguments);", "+\t\t\t\t}", "+\t\t\t\tif (this.preferences.insert_space_after_closing_angle_bracket_in_type_arguments) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}", "+\t\t}", "+", "+\t\tthis.scribe.printNextToken(referenceExpression.isMethodReference() ? TerminalTokens.TokenNameIdentifier : TerminalTokens.TokenNamenew);", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3ba7396c502ce4abde885608c15c680", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 112, "signatureBeforeChange": " \tpublic boolean visit(ThisReference thisReference, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(NormalAnnotation annotation, CompilationUnitScope scope)", "diff": ["+\t}", "+\tpublic boolean visit(NormalAnnotation annotation, CompilationUnitScope scope) {", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameAT);", "+\t\tif (this.preferences.insert_space_after_at_in_annotation) {", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\tthis.scribe.printQualifiedReference(annotation.sourceEnd);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_opening_paren_in_annotation);", "+\t\tif (this.preferences.insert_space_after_opening_paren_in_annotation) {", "+\t\t\tthis.scribe.space();", "+\t\t}", "+\t\tMemberValuePair[] memberValuePairs = annotation.memberValuePairs;", "+\t\tif (memberValuePairs != null) {", "+\t\t\tint length = memberValuePairs.length;", "+\t\t\tfor (int i = 0; i < length - 1; i++) {", "+\t\t\t\tmemberValuePairs[i].traverse(this, scope);", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_annotation);", "+\t\t\t\tif (this.preferences.insert_space_after_comma_in_annotation) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tmemberValuePairs[length - 1].traverse(this, scope);", "+\t\t}", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_before_closing_paren_in_annotation);"]}], "num": 34265}
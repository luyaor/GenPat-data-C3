{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e24b33bb50003d92bce1819ce0b0b41", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c230dc57d2cad54e30f6e7dd46e20952", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "d25d8e2aefb1fe7881a3b669cacd403afc528b1a", "commitAfterChange": "c768bb705d25a055607160ce11d239f196ca5653", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "  private int initializeBuilder(int kind) throws CoreException", "signatureAfterChange": "  private int initializeBuilder(int kind, boolean forBuild) throws CoreException", "diff": ["-private int initializeBuilder(int kind) throws CoreException {", "+private int initializeBuilder(int kind, boolean forBuild) throws CoreException {", "+\t// some calls just need the nameEnvironment initialized so skip the rest", "-\t// cache the known participants for this project", "-\tthis.participants = JavaModelManager.getJavaModelManager().compilationParticipants.getCompilationParticipants(this.javaProject);", "-\tif (this.participants != null)", "-\t\tfor (int i = 0, l = this.participants.length; i < l; i++)", "-\t\t\tif (this.participants[i].buildStarting(this.javaProject) == CompilationParticipant.NEEDS_FULL_BUILD)", "-\t\t\t\tkind = FULL_BUILD;", "-", "-\t// Flush the existing external files cache if this is the beginning of a build cycle", "-\tString projectName = currentProject.getName();", "-\tif (builtProjects == null || builtProjects.contains(projectName)) {", "-\t\tJavaModel.flushExternalFileCache();", "-\t\tbuiltProjects = new ArrayList();", "+\tif (forBuild) {", "+\t\t// cache the known participants for this project", "+\t\tthis.participants = JavaModelManager.getJavaModelManager().compilationParticipants.getCompilationParticipants(this.javaProject);", "+\t\tif (this.participants != null)", "+\t\t\tfor (int i = 0, l = this.participants.length; i < l; i++)", "+\t\t\t\tif (this.participants[i].buildStarting(this.javaProject) == CompilationParticipant.NEEDS_FULL_BUILD)", "+\t\t\t\t\tkind = FULL_BUILD;", "+\t", "+\t\t// Flush the existing external files cache if this is the beginning of a build cycle", "+\t\tString projectName = currentProject.getName();", "+\t\tif (builtProjects == null || builtProjects.contains(projectName)) {", "+\t\t\tJavaModel.flushExternalFileCache();", "+\t\t\tbuiltProjects = new ArrayList();", "+\t\t}", "+\t\tbuiltProjects.add(projectName);", "-\tbuiltProjects.add(projectName);", "-\tString filterSequence = javaProject.getOption(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER, true);", "-\tchar[][] filters = filterSequence != null && filterSequence.length() > 0", "-\t\t? CharOperation.splitAndTrimOn(',', filterSequence.toCharArray())", "-\t\t: null;", "-\tif (filters == null) {", "-\t\tthis.extraResourceFileFilters = null;", "-\t\tthis.extraResourceFolderFilters = null;", "-\t} else {", "-\t\tint fileCount = 0, folderCount = 0;", "-\t\tfor (int i = 0, l = filters.length; i < l; i++) {", "-\t\t\tchar[] f = filters[i];", "-\t\t\tif (f.length == 0) continue;", "-\t\t\tif (f[f.length - 1] == '/') folderCount++; else fileCount++;", "-\t\t}", "-\t\tthis.extraResourceFileFilters = new char[fileCount][];", "-\t\tthis.extraResourceFolderFilters = new String[folderCount];", "-\t\tfor (int i = 0, l = filters.length; i < l; i++) {", "-\t\t\tchar[] f = filters[i];", "-\t\t\tif (f.length == 0) continue;", "-\t\t\tif (f[f.length - 1] == '/')", "-\t\t\t\textraResourceFolderFilters[--folderCount] = new String(f, 0, f.length - 1);", "-\t\t\telse", "-\t\t\t\textraResourceFileFilters[--fileCount] = f;", "+\tif (forBuild) {", "+\t\tString filterSequence = javaProject.getOption(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER, true);", "+\t\tchar[][] filters = filterSequence != null && filterSequence.length() > 0", "+\t\t\t? CharOperation.splitAndTrimOn(',', filterSequence.toCharArray())", "+\t\t\t: null;", "+\t\tif (filters == null) {", "+\t\t\tthis.extraResourceFileFilters = null;", "+\t\t\tthis.extraResourceFolderFilters = null;", "+\t\t} else {", "+\t\t\tint fileCount = 0, folderCount = 0;", "+\t\t\tfor (int i = 0, l = filters.length; i < l; i++) {", "+\t\t\t\tchar[] f = filters[i];", "+\t\t\t\tif (f.length == 0) continue;", "+\t\t\t\tif (f[f.length - 1] == '/') folderCount++; else fileCount++;", "+\t\t\t}", "+\t\t\tthis.extraResourceFileFilters = new char[fileCount][];", "+\t\t\tthis.extraResourceFolderFilters = new String[folderCount];", "+\t\t\tfor (int i = 0, l = filters.length; i < l; i++) {", "+\t\t\t\tchar[] f = filters[i];", "+\t\t\t\tif (f.length == 0) continue;", "+\t\t\t\tif (f[f.length - 1] == '/')", "+\t\t\t\t\textraResourceFolderFilters[--folderCount] = new String(f, 0, f.length - 1);", "+\t\t\t\telse", "+\t\t\t\t\textraResourceFileFilters[--fileCount] = f;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e03f5f2685cedca276ecc799cde4e26f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CopyMoveTests.java", "commitBeforeChange": "fda975d98b069f678ae89a663957463bb7bd4088", "commitAfterChange": "2e99c72cc03690dcb30e61cdafeb829a4f1ada2f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void movePositive(IJavaElement[] elements, IJavaElement[] destinations, IJavaElement[] siblings, String[] names, boolean force, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public void movePositive(IJavaElement[] elements, IJavaElement[] destinations, IJavaElement[] siblings, String[] names, boolean force, boolean checkDelta, IProgressMonitor monitor) throws JavaModelException", "diff": ["-public void movePositive(IJavaElement[] elements, IJavaElement[] destinations, IJavaElement[] siblings, String[] names, boolean force, IProgressMonitor monitor) throws JavaModelException {", "+public void movePositive(IJavaElement[] elements, IJavaElement[] destinations, IJavaElement[] siblings, String[] names, boolean force, boolean checkDelta, IProgressMonitor monitor) throws JavaModelException {", "-\t\tstartDeltas();", "+\t\tif(checkDelta)\tstartDeltas();", "-\t\t\tIJavaElementDelta destDelta = null;", "-\t\t\tif (isMainType(element, destinations[i]) && names != null && names[i] != null) { //moved/renamed main type to same cu", "-\t\t\t\tdestDelta = this.deltaListener.getDeltaFor(moved.getParent());", "-\t\t\t\tassertTrue(\"Renamed compilation unit as result of main type not added\", destDelta != null && destDelta.getKind() == IJavaElementDelta.ADDED);", "-\t\t\t\tassertTrue(\"flag should be F_MOVED_FROM\", (destDelta.getFlags() & IJavaElementDelta.F_MOVED_FROM) > 0);", "-\t\t\t\tassertTrue(\"moved from handle should be original\", destDelta.getMovedFromElement().equals(element.getParent()));", "-\t\t\t} else {", "-\t\t\t\tdestDelta = this.deltaListener.getDeltaFor(destinations[i], true);", "-\t\t\t\tassertTrue(\"Destination container not changed\", destDelta != null && destDelta.getKind() == IJavaElementDelta.CHANGED);", "-\t\t\t\tIJavaElementDelta[] deltas = destDelta.getAddedChildren();", "-\t\t\t\tassertTrue(\"Added children not correct for element copy\", deltas[i].getElement().equals(moved));", "-\t\t\t\tassertTrue(\"should be K_ADDED\", deltas[i].getKind() == IJavaElementDelta.ADDED);", "-\t\t\t\tIJavaElementDelta sourceDelta= this.deltaListener.getDeltaFor(element, false);", "-\t\t\t\tassertTrue(\"should be K_REMOVED\", sourceDelta.getKind() == IJavaElementDelta.REMOVED);", "+\t\t\tif(checkDelta) {", "+\t\t\t\tIJavaElementDelta destDelta = null;", "+\t\t\t\tif (isMainType(element, destinations[i]) && names != null && names[i] != null) { //moved/renamed main type to same cu", "+\t\t\t\t\tdestDelta = this.deltaListener.getDeltaFor(moved.getParent());", "+\t\t\t\t\tassertTrue(\"Renamed compilation unit as result of main type not added\", destDelta != null && destDelta.getKind() == IJavaElementDelta.ADDED);", "+\t\t\t\t\tassertTrue(\"flag should be F_MOVED_FROM\", (destDelta.getFlags() & IJavaElementDelta.F_MOVED_FROM) > 0);", "+\t\t\t\t\tassertTrue(\"moved from handle should be original\", destDelta.getMovedFromElement().equals(element.getParent()));", "+\t\t\t\t} else {", "+\t\t\t\t\tdestDelta = this.deltaListener.getDeltaFor(destinations[i], true);", "+\t\t\t\t\tassertTrue(\"Destination container not changed\", destDelta != null && destDelta.getKind() == IJavaElementDelta.CHANGED);", "+\t\t\t\t\tIJavaElementDelta[] deltas = destDelta.getAddedChildren();", "+\t\t\t\t\tassertTrue(\"Added children not correct for element copy\", deltas[i].getElement().equals(moved));", "+\t\t\t\t\tassertTrue(\"should be K_ADDED\", deltas[i].getKind() == IJavaElementDelta.ADDED);", "+\t\t\t\t\tIJavaElementDelta sourceDelta= this.deltaListener.getDeltaFor(element, false);", "+\t\t\t\t\tassertTrue(\"should be K_REMOVED\", sourceDelta.getKind() == IJavaElementDelta.REMOVED);", "+\t\t\t\t}", "-\t\tstopDeltas();", "+\t\tif(checkDelta)\tstopDeltas();"]}], "num": 28183}
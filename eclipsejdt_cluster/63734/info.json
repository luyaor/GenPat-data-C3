{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b22cdf8588278333b60f10b50046aac5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f253aca6e443cb2ad2023c67a3b002d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "ac3fb85b042cc8d08fde970661bcb608169c859e", "commitAfterChange": "f350c3be6ae3f45b0550d20e4f84512419a218a0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["-\t\t\t\tboolean needNonNull = false;", "-\t\t\t\t\tneedNonNull = true;", "-\t\t\t\t} else if (inheritedNonNullNess == Boolean.FALSE // unannotated conflics only with inherited @Nullable", "-\t\t\t\t\t\t\t&& currentNonNullNess == null) ", "+\t\t\t\t} else if (currentNonNullNess == null) ", "-\t\t\t\t\tif (currentArgument != null) {", "-\t\t\t\t\t\tscope.problemReporter().parameterLackingNullAnnotation(", "+\t\t\t\t\t// unannotated strictly conflicts only with inherited @Nullable", "+\t\t\t\t\tif (inheritedNonNullNess == Boolean.FALSE) { ", "+\t\t\t\t\t\tif (currentArgument != null) {", "+\t\t\t\t\t\t\tscope.problemReporter().parameterLackingNullableAnnotation(", "+\t\t\t\t\t\t\t\t\tcurrentArgument,", "+\t\t\t\t\t\t\t\t\tinheritedMethod.declaringClass,", "+\t\t\t\t\t\t\t\t\tannotationName);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (inheritedNonNullNess == Boolean.TRUE) {", "+\t\t\t\t\t\t// not strictly a conflict, but a configurable warning is given anyway:", "+\t\t\t\t\t\tscope.problemReporter().parameterLackingNonnullAnnotation(", "-\t\t\t\t\t\t\t\tneedNonNull,", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f824d43715253edb21d94429eee845bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "e61056764c810f3e091dc38a5b2c377e283821a9", "commitAfterChange": "2ed80629ac2deb70ae8b8f65c52c0fee7ade8d07", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["-\t\t\t\tboolean needNonNull = false;", "-\t\t\t\t\tneedNonNull = true;", "-\t\t\t\t} else if (inheritedNonNullNess == Boolean.FALSE // unannotated conflics only with inherited @Nullable", "-\t\t\t\t\t\t\t&& currentNonNullNess == null) ", "+\t\t\t\t} else if (currentNonNullNess == null) ", "-\t\t\t\t\tif (currentArgument != null) {", "-\t\t\t\t\t\tscope.problemReporter().parameterLackingNullAnnotation(", "+\t\t\t\t\t// unannotated strictly conflicts only with inherited @Nullable", "+\t\t\t\t\tif (inheritedNonNullNess == Boolean.FALSE) { ", "+\t\t\t\t\t\tif (currentArgument != null) {", "+\t\t\t\t\t\t\tscope.problemReporter().parameterLackingNullableAnnotation(", "+\t\t\t\t\t\t\t\t\tcurrentArgument,", "+\t\t\t\t\t\t\t\t\tinheritedMethod.declaringClass,", "+\t\t\t\t\t\t\t\t\tannotationName);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (inheritedNonNullNess == Boolean.TRUE) {", "+\t\t\t\t\t\t// not strictly a conflict, but a configurable warning is given anyway:", "+\t\t\t\t\t\tscope.problemReporter().parameterLackingNonnullAnnotation(", "-\t\t\t\t\t\t\t\tneedNonNull,", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tscope.problemReporter().cannotImplementIncompatibleNullness(currentMethod, inheritedMethod);"]}], "num": 63734}
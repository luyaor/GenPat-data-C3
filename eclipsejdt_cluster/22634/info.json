{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "84820fe61a6ffca03fe042be72dd6f1e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44fcf496b8430b1f03a4513ff53a6501", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/RewriteEventStore.java", "commitBeforeChange": "7183d81a2458b7a9ecc9004f74bf12b52ac2eafc", "commitAfterChange": "54eb6fa8730358fcf98285db139cf9edbd02f92a", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic void markMovedNodesRemoved()", "signatureAfterChange": " \t \tpublic void prepareMovedNodes(TargetSourceRangeComputer sourceRangeComputer)", "diff": ["+\tpublic void prepareMovedNodes(TargetSourceRangeComputer sourceRangeComputer) {", "+\t\tif (this.nodeCopySources != null) {", "+\t\t\tprepareSingleNodeCopies();", "+\t\t}", "+\t\t", "+\t\tif (this.nodeRangeInfos != null) {", "+\t\t\tprepareNodeRangeCopies(sourceRangeComputer);", "+\t\t}", "+\t}", "-\tpublic void markMovedNodesRemoved() {", "-\t\tif (this.nodeCopySources == null) {", "-\t\t\treturn;", "-\t\t}", "-\t\t\tif (curr.isMove) {", "-\t\t\t\tdoMarkMovedAsRemoved(curr);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7701bcdcad218a9ee59e5555a55efc6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelOperation.java", "commitBeforeChange": "b12492ad0eb83de9816def47b0f6dea2ec7ff67f", "commitAfterChange": "0deabbafa4ad0926b565767fe8d2a589d68558ed", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 45, "signatureBeforeChange": " protected void registerDeltas()", "signatureAfterChange": " \tprotected void pushOperation(JavaModelOperation operation)", "diff": ["- */", "-protected void registerDeltas() {", "-\tif (fDeltas != null && !fNested) {", "-\t\t// hook to ensure working copies remain consistent", "-\t\tmakeWorkingCopiesConsistent(fDeltas);", "-\t\tJavaModelManager manager= (JavaModelManager)JavaModelManager.getJavaModelManager();", "-\t\tfor (int i= 0; i < fDeltas.length; i++) {", "-\t\t\tmanager.registerJavaModelDelta(fDeltas[i]);", "-}", "+\t * Pushes the given operation on the stack of operations currently running in this thread.\r\t */", "+\tprotected void pushOperation(JavaModelOperation operation) {", "+\t\tgetCurrentOperationStack().add(operation);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "894744dfa6eab5785d48b471dfe79461", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingTest.java", "commitBeforeChange": "167c362a4ac2baf619eec088a660153ec713b502", "commitAfterChange": "203954a19427f44b197aa09593f6f49177e09606", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic static TypeDeclaration findTypeDeclaration(CompilationUnit astRoot, String simpleTypeName)", "signatureAfterChange": " \t \tpublic static TypeDeclaration findTypeDeclaration(CompilationUnit astRoot, String simpleTypeName)", "diff": ["+\t\treturn (TypeDeclaration) findAbstractTypeDeclaration(astRoot, simpleTypeName);", "+\t}", "-\t\t\tTypeDeclaration elem= (TypeDeclaration) types.get(i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "942f948b2792bb7b8a83c9debaa487dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "195b7f74c2847e766faf55780f87d7733eaf87d5", "commitAfterChange": "59d412caa9422940d2fae586e985ddc7647c8585", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic static JavaElement getUnresolvedJavaElement(MethodBinding methodBinding, WorkingCopyOwner workingCopyOwner, BindingsToNodesMap bindingsToNodes)", "signatureAfterChange": " \tpublic static JavaElement getUnresolvedJavaElement(MethodBinding methodBinding, WorkingCopyOwner workingCopyOwner, BindingsToNodesMap bindingsToNodes)", "diff": ["-\t\t\tReferenceBinding enclosingType = original.declaringClass.enclosingType();", "-\t\t\tboolean isInnerBinaryTypeConstructor = isBinary && original.isConstructor() && enclosingType != null;", "-\t\t\tint declaringIndex = isInnerBinaryTypeConstructor ? 1 : 0;", "-\t\t\tString[] parameterSignatures = new String[declaringIndex + length];", "-\t\t\tif (isInnerBinaryTypeConstructor)", "-\t\t\t\tparameterSignatures[0] = new String(enclosingType.genericTypeSignature()).replace('/', '.');", "-\t\t\tfor (int i = 0;  i < length; i++) {", "-\t\t\t\tchar[] signature = parameters[i].genericTypeSignature();", "-\t\t\t\tif (isBinary) {", "-\t\t\t\t\tsignature = CharOperation.replaceOnCopy(signature, '/', '.');", "-\t\t\t\t} else {", "-\t\t\t\t\tsignature = toUnresolvedTypeSignature(signature);", "+\t\t\tif (isBinary) {", "+\t\t\t\tReferenceBinding enclosingType = original.declaringClass.enclosingType();", "+\t\t\t\tboolean isInnerBinaryTypeConstructor = original.isConstructor() && enclosingType != null;", "+\t\t\t\tint declaringIndex = isInnerBinaryTypeConstructor ? 1 : 0;", "+\t\t\t\tString[] parameterSignatures = new String[declaringIndex + length];", "+\t\t\t\tif (isInnerBinaryTypeConstructor) {", "+\t\t\t\t\tparameterSignatures[0] = new String(enclosingType.genericTypeSignature()).replace('/', '.');", "-\t\t\t\tparameterSignatures[declaringIndex + i] = new String(signature);", "+\t\t\t\tfor (int i = 0;  i < length; i++) {", "+\t\t\t\t\tchar[] signature = parameters[i].genericTypeSignature();", "+\t\t\t\t\tsignature = CharOperation.replaceOnCopy(signature, '/', '.');", "+\t\t\t\t\tparameterSignatures[declaringIndex + i] = new String(signature);", "+\t\t\t\t}", "+\t\t\t\tIMethod result = declaringType.getMethod(selector, parameterSignatures);", "+\t\t\t\treturn (JavaElement) result;", "-\t\t\tIMethod result = declaringType.getMethod(selector, parameterSignatures);", "-\t\t\tif (isBinary)", "-\t\t\t\treturn (JavaElement) result;", "-\t\t\tif (result.exists()) // if perfect match (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=249567 )", "-\t\t\t\treturn (JavaElement) result;", "-\t\t\tIMethod[] candidates = Member.findMethods(result, methods);", "-\t\t\tif (candidates == null || candidates.length == 0)", "-\t\t\t\treturn null;", "-\t\t\treturn (JavaElement) candidates[0];", "+\t\t\treturn findMethod(selector, parameters, methods);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b812a7c3ef83db65c9783e61506fff0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "6aabdcd171f339f5a1437276969cd405c6481646", "commitAfterChange": "2d4a756131aa4736b3ab0f82fa39c5aa3a093216", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r \t\r \tprivate IBinding internalResolveNameForFieldAccess(Name name)", "signatureAfterChange": "\r \t\r \tprivate IBinding internalResolveNameForFieldAccess(Name name)", "diff": ["-\t\tAstNode node = (AstNode) this.newAstToOldAst.get(name);\r", "-\t\tif (node instanceof FieldReference) {\r", "-\t\t\treturn getVariableBinding(((FieldReference) node).binding);\r", "-\t\t} else if (node instanceof QualifiedSuperReference) {\r", "-\t\t\tQualifiedSuperReference qualifiedSuperReference = (QualifiedSuperReference) node;\r", "-\t\t\treturn this.getTypeBinding(qualifiedSuperReference.qualification.binding);\r", "+\t\tif (name.isQualifiedName()) {\r", "+\t\t\treturn this.internalResolveNameForQualifiedName(name);\r", "+\t\t} else {\r", "+\t\t\treturn this.internalResolveNameForSimpleName(name);\r", "-\t\treturn null;\r", "-\t}\t\r", "+\t}\r"]}], "num": 22634}
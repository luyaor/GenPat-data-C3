{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "83fd671b6ee0bc695221d6853633a6c5", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0454c1e81918271289ba001e262857ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "4c2bd5433955f4a987d71f9fd88510a6a9140d4f", "commitAfterChange": "ac8aee31f97e2c1940f8d6cadbe50fd220994724", "methodNumberBeforeChange": 301, "methodNumberAfterChange": 301, "signatureBeforeChange": " protected void consumeReferenceExpressionPrimitiveTypeForm()", "signatureAfterChange": " protected void consumeReferenceExpressionTypeForm(boolean isPrimitive)", "diff": ["-protected void consumeReferenceExpressionPrimitiveTypeForm() {", "+protected void consumeReferenceExpressionTypeForm(boolean isPrimitive) {", "+\t// ReferenceExpression ::= Name Dims '::' NonWildTypeArgumentsopt IdentifierOrNew", "+\t", "+\tif (!isPrimitive) { // handle type arguments", "+\t\tpushOnGenericsLengthStack(0);", "+\t\tpushOnGenericsIdentifiersLengthStack(this.identifierLengthStack[this.identifierLengthPtr]);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d915982ca1b80ac8d45ac8002022d4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AnnotationParser.java", "commitBeforeChange": "aabd59e4934a861167bc5ad69597bc9fd97e06dc", "commitAfterChange": "4ed2786f22dd00c9c1f7773433c3548c8c0f6fc3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t \tprotected void pushIdentifier()", "signatureAfterChange": "  \t \tprivate void pushIdentifier(boolean newLength)", "diff": ["-\tprotected void pushIdentifier() {", "+\tprivate void pushIdentifier(boolean newLength) {", "-\t\t\t/*---stack reallaocation (identifierPtr is correct)---*/", "+\t\t\t//---stack reallaocation (identifierPtr is correct)---", "-\t\t\tthis.identifierStack = new char[oldStackLength + 20][];", "+\t\t\tthis.identifierStack = new char[oldStackLength + 10][];", "-\t\t\t/*identifier position stack*/", "+\t\t\t// identifier position stack", "-\t\t\tthis.identifierPositionStack = new long[oldStackLength + 20];", "+\t\t\tthis.identifierPositionStack = new long[oldStackLength + 10];", "-\t\t\t\t(((long) this.scanner.startPosition) << 32) + (this.scanner.currentPosition - 1); ", "+\t\t\t\t(((long) this.scanner.startPosition) << 32) + (this.scanner.currentPosition - 1);", "-\t", "+\t\t", "+\t\tif (newLength) {", "+\t\t\ttry {", "+\t\t\t\tthis.identifierLengthStack[++this.identifierLengthPtr] = 1;", "+\t\t\t} catch (IndexOutOfBoundsException e) {", "+\t\t\t\t/*---stack reallocation (identifierLengthPtr is correct)---*/", "+\t\t\t\tint oldStackLength = this.identifierLengthStack.length;", "+\t\t\t\tint oldStack[] = this.identifierLengthStack;", "+\t\t\t\tthis.identifierLengthStack = new int[oldStackLength + 10];", "+\t\t\t\tSystem.arraycopy(oldStack, 0, this.identifierLengthStack, 0, oldStackLength);", "+\t\t\t\tthis.identifierLengthStack[this.identifierLengthPtr] = 1;", "+\t\t\t}", "+\t\t}", "+\t\telse {", "+\t\t\tthis.identifierLengthStack[this.identifierLengthPtr]++;", "+\t\t}", "+\t}", "-\t\t\tthis.identifierLengthStack[++this.identifierLengthPtr] = 1;", "-\t\t} catch (IndexOutOfBoundsException e) {", "-\t\t\t/*---stack reallocation (identifierLengthPtr is correct)---*/", "-\t\t\tint oldStackLength = this.identifierLengthStack.length;", "-\t\t\tint oldStack[] = this.identifierLengthStack;", "-\t\t\tthis.identifierLengthStack = new int[oldStackLength + 10];", "-\t\t\tSystem.arraycopy(oldStack, 0, this.identifierLengthStack, 0, oldStackLength);", "-\t\t\tthis.identifierLengthStack[this.identifierLengthPtr] = 1;"]}], "num": 14949}
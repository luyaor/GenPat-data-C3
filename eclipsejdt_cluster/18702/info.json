{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba2d99506a88408efca3d7ed7fcf3619", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e43ee6ebbf1ef91a263545e042e5dab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/MarkedASTFlattener.java", "commitBeforeChange": "ff1eb602a8aea39b1e15b206441aadf76bfaa984", "commitAfterChange": "dc5ee42cb3e5694c60c3a1f62c20766cb3cb2274", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void preVisit(ASTNode node)", "signatureAfterChange": " \tpublic void preVisit(ASTNode node)", "diff": ["-\t\tint index = markerInfo.indexOfASTStart(node.getStartPosition());", "-\t\tif (index != -1 && node.getStartPosition() + node.getLength() == markerInfo.astEnds[index]) {", "-\t\t\tmarkerName = String.valueOf(index + 1);", "-\t\t\t", "-\t\t\tif (this.nodeFromMarker.get(markerName) == null) {", "-\t\t\t\tthis.markerFromNode.put(node, markerName);", "-\t\t\t\tthis.nodeFromMarker.put(markerName, node);", "-\t\t\t\tthis.markerPositonInBuffer.put(markerName, new Integer(this.buffer.length()));", "+\t\tint index = -1;", "+\t\tfound : while ((index = markerInfo.indexOfASTStart(node.getStartPosition(), index + 1)) != -1) {", "+\t\t\tif (node.getStartPosition() + node.getLength() == markerInfo.astEnds[index]) {", "+\t\t\t\tmarkerName = String.valueOf(index + 1);", "+\t\t\t\t", "+\t\t\t\tif (this.nodeFromMarker.get(markerName) == null) {", "+\t\t\t\t\tthis.markerFromNode.put(node, markerName);", "+\t\t\t\t\tthis.nodeFromMarker.put(markerName, node);", "+\t\t\t\t\tthis.markerPositonInBuffer.put(markerName, new Integer(this.buffer.length()));", "+\t\t\t\t\tthis.foundNodeFromMarker[index] = true;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tbreak found;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66aa8ec1f9272a2a8c711c0c37d2905a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "8b9431052e3d61392fc8179c11535d264307c499", "commitAfterChange": "c9c353b1f3633c7934ab02e6b5f4d6f7b6d921d9", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  void checkMethods()", "signatureAfterChange": "  void checkMethods()", "diff": ["-\t\t\tif (index > 0)", "-\t\t\t\tcheckInheritedMethods(matchingInherited, index + 1, isOverridden, isInherited); // pass in the length of matching", "+\t\t\tif (index > 0) {", "+\t\t\t\tint length = index + 1;", "+\t\t\t\tboolean[] matchingIsOverridden;", "+\t\t\t\tboolean[] matchingIsInherited;", "+\t\t\t\tif (length != inheritedLength) { // transfer inherited & overridden status to align with subset of methods.", "+\t\t\t\t\tmatchingIsOverridden = new boolean[length];", "+\t\t\t\t\tmatchingIsInherited = new boolean[length];", "+\t\t\t\t\tfor (int j = 0; j < length; j++) {", "+\t\t\t\t\t\tfor (int k = 0; k < inheritedLength; k++) {", "+\t\t\t\t\t\t\tif (matchingInherited[j] == inherited[k]) {", "+\t\t\t\t\t\t\t\tmatchingIsOverridden[j] = isOverridden[k];", "+\t\t\t\t\t\t\t\tmatchingIsInherited[j] = isInherited[k];", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tmatchingIsOverridden = isOverridden;", "+\t\t\t\t\tmatchingIsInherited = isInherited;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tcheckInheritedMethods(matchingInherited, length, matchingIsOverridden, matchingIsInherited); // pass in the length of matching", "+\t\t\t}"]}], "num": 18702}
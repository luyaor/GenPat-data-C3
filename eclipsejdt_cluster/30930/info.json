{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d78d365291fcbfccf9d95d3f34b017b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bbe4fdd2cb0dea820623d88cff78ac2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "78d640f6bd5ff8e757b4b457bee3d92d7c8352e1", "commitAfterChange": "abfcb7bb2bf20458fc372ec46b98225419a0c876", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " void checkTypeVariableMethods(TypeParameter typeParameter)", "signatureAfterChange": " void checkTypeVariableMethods(TypeParameter typeParameter)", "diff": ["+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=314556", "+\t\t\t\t\tMethodBinding interfaceMethod = null, implementation = null;", "+\t\t\t\t\tif (first.declaringClass.isInterface()) {", "+\t\t\t\t\t\tinterfaceMethod = first;", "+\t\t\t\t\t} else if (first.declaringClass.isClass()) {", "+\t\t\t\t\t\timplementation = first;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (match.declaringClass.isInterface()) {", "+\t\t\t\t\t\tinterfaceMethod = match;", "+\t\t\t\t\t} else if (match.declaringClass.isClass()) {", "+\t\t\t\t\t\timplementation = match;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (interfaceMethod != null && implementation != null && !isAsVisible(implementation, interfaceMethod))", "+\t\t\t\t\t\tproblemReporter().inheritedMethodReducesVisibility(typeParameter, implementation, new MethodBinding [] {interfaceMethod});", "+\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5a3508b06b324938b2afebbb2c8a30c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "e589570c4bd9e6c5ed804728bca5f124c9938845", "commitAfterChange": "876d1e29545f3823ab6b6c14229362303cd9cc00", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " void checkMethods()", "signatureAfterChange": " void checkMethods()", "diff": ["+\t\t\t\t// Skip the otherInheritedMethod if it is completely replaced by inheritedMethod", "+\t\t\t\t// This elimination used to happen rather eagerly in computeInheritedMethods step", "+\t\t\t\t// itself earlier. (https://bugs.eclipse.org/bugs/show_bug.cgi?id=302358)", "+\t\t\t\tif (inheritedMethod.declaringClass != otherInheritedMethod.declaringClass) {", "+\t\t\t\t\tif (otherInheritedMethod.declaringClass.isInterface()) {", "+\t\t\t\t\t\tif (isInterfaceMethodImplemented(otherInheritedMethod, inheritedMethod, otherInheritedMethod.declaringClass)) {", "+\t\t\t\t\t\t\tskip[j] = true;", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (areMethodsCompatible(inheritedMethod, otherInheritedMethod)) {", "+\t\t\t\t\t\tskip[j] = true;", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 30930}
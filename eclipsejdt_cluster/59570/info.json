{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66f1558bedce61c4adb46748cb2ea5ab", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "304d2a107f26f7a864c823dc2cd63110", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "4eb127945a2ceccf115682270cb891d015657dc6", "commitAfterChange": "2c3d71a674e588a8bcef926caa5965ce37ed2171", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void testMethodWithError4() throws JavaModelException, CoreException", "signatureAfterChange": " public void testMethodWithError4() throws JavaModelException, CoreException", "diff": ["-\tfinal IProgressMonitor myMonitor = new IProgressMonitor() {", "-\t\tboolean isCanceled = false;", "-\t\tpublic void beginTask(String name, int totalWork) {}", "-\t\tpublic void done() {}", "-\t\tpublic void internalWorked(double work) {}", "-\t\tpublic boolean isCanceled() {", "-\t\t\treturn this.isCanceled;", "-\t\t}", "-\t\tpublic void setCanceled(boolean value) {", "-\t\t\tthis.isCanceled = value;", "-\t\t}", "-\t\tpublic void setTaskName(String name) {}", "-\t\tpublic void subTask(String name) {}", "-\t\tpublic void worked(int work) {}", "-\t};", "-", "-\tclass CancelingProblemRequestor extends ProblemRequestor {", "-\t\tboolean isCanceling = false;", "-\t\tpublic void acceptProblem(IProblem problem) {", "-\t\t\tif (isCanceling) myMonitor.setCanceled(true); // auto-cancel on first problem", "-\t\t\tsuper.acceptProblem(problem);", "-\t\t}\t\t", "-\t}", "-\tthis.workingCopy.reconcile(ICompilationUnit.NO_AST, true, null, myMonitor);", "+\tthis.workingCopy.reconcile(ICompilationUnit.NO_AST, true, null, myPbRequestor.progressMonitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "783e7952e2760091dbd9006b99f468cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "25f6ec4d6e61ae8f45e86debb6fc86f45cfebab1", "commitAfterChange": "84bc512fd479cfff2f73ee854c44099b01de5b79", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 71, "signatureBeforeChange": " \tpublic void start(BundleContext context) throws Exception", "signatureAfterChange": " \tpublic void start(BundleContext context) throws Exception", "diff": ["-\t\t\t// Listen to instance preferences node removal from parent in order to refresh stored one", "-\t\t\tIEclipsePreferences.INodeChangeListener listener = new IEclipsePreferences.INodeChangeListener() {", "-\t\t\t\tpublic void added(IEclipsePreferences.NodeChangeEvent event) {", "-\t\t\t\t\t// do nothing", "-\t\t\t\t}", "-\t\t\t\tpublic void removed(IEclipsePreferences.NodeChangeEvent event) {", "-\t\t\t\t\tif (event.getChild() == preferencesLookup[PREF_INSTANCE]) {", "-\t\t\t\t\t\tpreferencesLookup[PREF_INSTANCE] = new InstanceScope().getNode(PLUGIN_ID);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t};", "-\t\t\t((IEclipsePreferences) getInstancePreferences().parent()).addNodeChangeListener(listener);", "-", "-\t\t\t// Listen to default preferences node removal from parent in order to refresh stored one", "-\t\t\tlistener = new IEclipsePreferences.INodeChangeListener() {", "-\t\t\t\tpublic void added(IEclipsePreferences.NodeChangeEvent event) {", "-\t\t\t\t\t// do nothing", "-\t\t\t\t}", "-\t\t\t\tpublic void removed(IEclipsePreferences.NodeChangeEvent event) {", "-\t\t\t\t\tif (event.getChild() == preferencesLookup[PREF_DEFAULT]) {", "-\t\t\t\t\t\tpreferencesLookup[PREF_DEFAULT] = new DefaultScope().getNode(PLUGIN_ID);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t};", "-\t\t\t((IEclipsePreferences) getDefaultPreferences().parent()).addNodeChangeListener(listener);", "+\t\t\t// Initialize eclipse preferences", "+\t\t\tmanager.initializePreferences();", "-\t\t\tgetInstancePreferences().addPreferenceChangeListener(new JavaModelManager.EclipsePreferencesListener());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfd1f52824bd61d6691d620a4a4b7e0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "4dfe9f04d4f1fc7a9e70c8aba9edf4b323d079b9", "commitAfterChange": "03f4a4782f5839bc6b71dbdaa61bddb7d624d757", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \tpublic void start(BundleContext context) throws Exception", "signatureAfterChange": " \tpublic void start(BundleContext context) throws Exception", "diff": ["+\t\t\t// Listen to instance preferences node removal from parent in order to refresh stored one", "+\t\t\tIEclipsePreferences.INodeChangeListener listener = new IEclipsePreferences.INodeChangeListener() {", "+\t\t\t\tpublic void added(IEclipsePreferences.NodeChangeEvent event) {", "+\t\t\t\t\t// do nothing", "+\t\t\t\t}", "+\t\t\t\tpublic void removed(IEclipsePreferences.NodeChangeEvent event) {", "+\t\t\t\t\tif (event.getChild() == preferencesLookup[PREF_INSTANCE]) {", "+\t\t\t\t\t\tpreferencesLookup[PREF_INSTANCE] = new InstanceScope().getNode(PLUGIN_ID);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t};", "+\t\t\t((IEclipsePreferences) getInstancePreferences().parent()).addNodeChangeListener(listener);", "+", "+\t\t\t// Listen to default preferences node removal from parent in order to refresh stored one", "+\t\t\tlistener = new IEclipsePreferences.INodeChangeListener() {", "+\t\t\t\tpublic void added(IEclipsePreferences.NodeChangeEvent event) {", "+\t\t\t\t\t// do nothing", "+\t\t\t\t}", "+\t\t\t\tpublic void removed(IEclipsePreferences.NodeChangeEvent event) {", "+\t\t\t\t\tif (event.getChild() == preferencesLookup[PREF_DEFAULT]) {", "+\t\t\t\t\t\tpreferencesLookup[PREF_DEFAULT] = new DefaultScope().getNode(PLUGIN_ID);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t};", "+\t\t\t((IEclipsePreferences) getDefaultPreferences().parent()).addNodeChangeListener(listener);", "+"]}], "num": 59570}
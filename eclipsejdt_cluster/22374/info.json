{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "794473c281a555d26994f52c58ae9e62", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "437ca102bd38aa4cf53b8366a453bc32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "ca551e9f50d120a7df024c143f37ec7681949c67", "commitAfterChange": "1b64b56ccf1417b4beca7bed7d97dae59a8cc803", "methodNumberBeforeChange": 132, "methodNumberAfterChange": 132, "signatureBeforeChange": "  \tpublic boolean validateNullAnnotation(long tagBits, TypeReference typeRef, Annotation[] annotations)", "signatureAfterChange": "  \tpublic boolean validateNullAnnotation(long tagBits, TypeReference typeRef, Annotation[] annotations)", "diff": ["-\t\t\tif (annotations != null && typeRef instanceof QualifiedTypeReference) {", "-\t\t\t\t// illegal @NonNull Outer.Inner:", "-\t\t\t\tfor (int i = 0; i < annotations.length; i++) {", "-\t\t\t\t\tint id = annotations[i].resolvedType.id;", "-\t\t\t\t\tif (id == TypeIds.T_ConfiguredAnnotationNonNull || id == TypeIds.T_ConfiguredAnnotationNullable) {", "-\t\t\t\t\t\tproblemReporter().nullAnnotationUnsupportedLocation(annotations[i]);", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\t// for type annotations, more problems are detected in Annotation.isTypeUseCompatible()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d95f5b028c03d04ea8101392d83bb87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "e749248b2d171474b4cec0b274f15c474b2172fa", "commitAfterChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic void propagateInnerEmulation( \t\tReferenceBinding targetType, \t\tboolean isEnclosingInstanceSupplied, \t\tboolean useDirectReference)", "signatureAfterChange": " \tpublic void propagateInnerEmulation(ReferenceBinding targetType, boolean isEnclosingInstanceSupplied)", "diff": ["-\tpublic void propagateInnerEmulation(", "-\t\tReferenceBinding targetType,", "-\t\tboolean isEnclosingInstanceSupplied,", "-\t\tboolean useDirectReference) {", "+\tpublic void propagateInnerEmulation(ReferenceBinding targetType, boolean isEnclosingInstanceSupplied) {", "-\t\t// perform some emulation work in case there is some and we are inside a local type only", "-\t\t// propage emulation of the enclosing instances", "-\t\tReferenceBinding[] syntheticArgumentTypes;", "-\t\tif ((syntheticArgumentTypes = targetType.syntheticEnclosingInstanceTypes())", "-\t\t\t!= null) {", "-\t\t\tfor (int i = 0, max = syntheticArgumentTypes.length; i < max; i++) {", "-\t\t\t\tReferenceBinding syntheticArgType = syntheticArgumentTypes[i];", "-\t\t\t\t// need to filter out the one that could match a supplied enclosing instance", "-\t\t\t\tif (!(isEnclosingInstanceSupplied", "-\t\t\t\t\t&& (syntheticArgType == targetType.enclosingType()))) {", "-\t\t\t\t\tthis.emulateOuterAccess(syntheticArgType, useDirectReference);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\t// no need to propagate enclosing instances, they got eagerly allocated already.", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "622c99ca5803616feb9aa9ca0ce7f55e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "2325884dde9438b06c0c79c1dfd33a091d106072", "commitAfterChange": "1826d0fe5b887e907f5db40f2da4d23b5ef1c8d6", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tpublic boolean detectHierarchyCycle(TypeBinding superType, TypeReference reference, TypeBinding[] argTypes)", "signatureAfterChange": "  \tpublic boolean detectHierarchyCycle(TypeBinding superType, TypeReference reference, TypeBinding[] argTypes)", "diff": ["-", "-\t\tif (argTypes != null) {", "-\t\t\tfor (int i = 0, l = argTypes.length; i < l; i++) {", "-\t\t\t\tTypeBinding argType = argTypes[i].leafComponentType();", "-\t\t\t\tif ((argType.tagBits & TagBits.BeginHierarchyCheck) == 0 && argType instanceof SourceTypeBinding)", "-\t\t\t    \t// ensure if this is a source argument type that it has already been checked", "-\t\t\t    \t((SourceTypeBinding) argType).scope.connectTypeHierarchyWithoutMembers();", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "672d7031e8dd95632d072cea34f13697", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "bbf01bd45c20dcf892a1672b9d9c504b05790a01", "commitAfterChange": "64f2a5b8a78095fa170a97cceb8e661d31b0ae71", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \tprotected void generateClasspathChangeDeltas(\r \t\tIClasspathEntry[] oldResolvedPath,\r \t\tIClasspathEntry[] newResolvedPath,\r \t\tJavaModelManager manager,\r \t\tJavaProject project)", "signatureAfterChange": "\r \tprotected void generateClasspathChangeDeltas(\r \t\tIClasspathEntry[] oldResolvedPath,\r \t\tIClasspathEntry[] newResolvedPath,\r \t\tJavaModelManager manager,\r \t\tJavaProject project)", "diff": ["-\t\t// need to write out the classpath file ?\r", "-\t\tboolean needSave = oldLength != newLength;\r", "-\t\tif (!needSave){\r", "-\t\t\tfor (int i = 0; i < newLength; i++){ // need to check for entry#equals\r", "-\t\t\t\tif (!oldResolvedPath[i].equals(newResolvedPath[i])){\r", "-\t\t\t\t\tneedSave = true;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tif (needSave){\r", "-\t\t\ttry {\r", "-\t\t\t\tthis.hasModifiedResource = project.saveClasspath(this.forceSave);\r", "-\t\t\t} catch(JavaModelException e) {\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "880d8eac35b899d26311ccd61354d2ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "98d98039d31a5dcc8a3b24b4a05191f05e175f2b", "commitAfterChange": "f91fa46e8d1bc79474704dc3367b9b7e910d1272", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " \t \tprivate void propagateErrors(CompilationUnit unit, IProblem[] problems, int problemLength)", "signatureAfterChange": " \t \tprivate void propagateErrors(CompilationUnit unit, IProblem[] problems, int problemLength)", "diff": ["-\t\tMessage[] messages = new Message[problemLength];", "-\t\tfor (int i = 0; i < problemLength; i++) {", "-\t\t\tIProblem problem = problems[i];", "-\t\t\tint start = problem.getSourceStart();", "-\t\t\tint end = problem.getSourceEnd();", "-\t\t\tmessages[i] = new Message(problem.getMessage(), start, end - start + 1);", "-\t\t}", "-\t\tunit.setMessages(messages);", "+\t\tunit.setProblems(resizeProblems);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9788892f8416464a15b2b01b7c26f927", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "ab9a706cb19f2f2eac77ce9aa86b568f8fa1be99", "commitAfterChange": "cfdd662bec42f5d5e062111a13d87bd30fa87cbf", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment, boolean referredByContainer)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment, boolean referredByContainer)", "diff": ["-\t\t\t\t// resolve Class-Path: in manifest", "-\t\t\t\tIPath[] chainedJars = ClasspathEntry.resolvedChainedLibraries(path);", "-\t\t\t\tfor (int i = 0, length = chainedJars.length; i < length; i++) {", "-\t\t\t\t\tIPath chainedJar = chainedJars[i];", "-\t\t\t\t\tIJavaModelStatus status = validateLibraryEntry(chainedJar, project, null/*don't check source attachment*/, null/*force computing of entryPathMsg*/);", "-\t\t\t\t\tif (!status.isOK()) {", "-\t\t\t\t\t\tif (referredByContainer && status.getCode() == IJavaModelStatusConstants.INVALID_CLASSPATH)", "-\t\t\t\t\t\t\tcontinue; // ignore this entry (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=250946 )", "-\t\t\t\t\t\treturn status;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\t// do not validate entries from Class-Path: in manifest", "+\t\t\t\t// (these entries are considered optional since the user cannot act on them)", "+\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=252392"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2f44dde1d37ab2ea829a4f50098d763", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "f4bdb5d912579981f22fe9e7c4679e93b1a5f059", "commitAfterChange": "a3a09ad256da223aa1f3d2fe29b81e346d09a16c", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " public void generateSyntheticArgumentValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "signatureAfterChange": " public void generateSyntheticEnclosingInstanceValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "diff": ["-public void generateSyntheticArgumentValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite) {", "+public void generateSyntheticEnclosingInstanceValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite) {", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e60bacd594ad074bb9c572e38ee33b05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "a107a93c33b9fbfeb3c58f06a397400d87b64e14", "commitAfterChange": "ac57d09afd251c5c3e8f5a329155e4ee05cc3840", "methodNumberBeforeChange": 185, "methodNumberAfterChange": 185, "signatureBeforeChange": "  public void invoke(byte opcode, MethodBinding methodBinding, TypeBinding declaringClass)", "signatureAfterChange": "  public void invoke(byte opcode, MethodBinding methodBinding, TypeBinding declaringClass)", "diff": ["-    \t\t\t\tTypeBinding[] syntheticArgumentTypes = nestedType.syntheticEnclosingInstanceTypes();", "-    \t\t\t\tif (syntheticArgumentTypes != null) {", "-    \t\t\t\t\tfor (int i = 0, max = syntheticArgumentTypes.length; i < max; i++) {", "-    \t\t\t\t\t\tswitch (syntheticArgumentTypes[i].id)  {", "-    \t\t\t\t\t\t\tcase TypeIds.T_double :", "-    \t\t\t\t\t\t\tcase TypeIds.T_long :", "-\t    \t\t\t\t\t\t\treceiverAndArgsSize += 2;", "-\t\t\t\t\t\t\t\t\tbreak;", "-    \t\t\t\t\t\t\tdefault: ", "-\t    \t\t\t\t\t\t\treceiverAndArgsSize++;", "-    \t\t\t\t\t\t\t\tbreak;", "-    \t\t\t\t\t\t}", "-    \t\t\t\t\t}", "-    \t\t\t\t}", "+        \t\t\treceiverAndArgsSize += nestedType.getEnclosingInstancesSlotSize();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1590fd1c0b15539f0bde923c69225ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \tpublic void resolve(BlockScope scope)", "diff": ["-\t\tresolveAnnotations(scope, this.annotations, this.binding);", "-\t\t// Check if this declaration should now have the type annotations bit set", "-\t\tif (this.annotations != null) {", "-\t\t\tfor (int i = 0, max = this.annotations.length; i < max; i++) {", "-\t\t\t\tTypeBinding resolvedAnnotationType = this.annotations[i].resolvedType;", "-\t\t\t\tif (resolvedAnnotationType != null && (resolvedAnnotationType.getAnnotationTagBits() & TagBits.AnnotationForTypeUse) != 0) {", "-\t\t\t\t\tthis.bits |= ASTNode.HasTypeAnnotations;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\tresolveAnnotations(scope, this.annotations, this.binding, true);"]}], "num": 22374}
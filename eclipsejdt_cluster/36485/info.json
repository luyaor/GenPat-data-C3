{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "311d899e4a656ab2dae20c66e4f031a6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3101c1f9de202bb2e5df3992b5c743a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "11d37ba24baa8a8d5177d1ba6ab1649342a0de47", "commitAfterChange": "3b53dc72aa60c63aafa5e63cea69df72f36f7346", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "signatureAfterChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "diff": ["-\t\tboolean isCastingToBoundParameterized;", "-\t\tif (match != null && (", "-\t\t\t\t(isCastingToBoundParameterized = castType.isBoundParameterizedType())", "-\t\t\t\t|| \texpressionType.isBoundParameterizedType())) {", "-\t\t\t", "-\t\t\tif (match.isProvablyDistinctFrom(isNarrowing ? expressionType : castType, 0)) {", "-\t\t\t\treturn false; ", "-\t\t\t}", "-\t\t\tif (isCastingToBoundParameterized ", "-\t\t\t\t\t&& (isNarrowing ? !expressionType.isEquivalentTo(match) : !match.isEquivalentTo(castType))) {", "+\t\tif (match != null && match.isProvablyDistinctFrom(isNarrowing ? expressionType : castType, 0)) {", "+\t\t\treturn false; ", "+\t\t}", "+\t\tswitch (castType.kind()) {", "+\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\tif (castType.isBoundParameterizedType()) {", "+\t\t\t\t\tif (match == null) { // unrelated types", "+\t\t\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t\tswitch (match.kind()) {", "+\t\t\t\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\t\t\t\tif (isNarrowing) {", "+\t\t\t\t\t\t\t\t// [JLS 5.5] T <: S", "+\t\t\t\t\t\t\t\tif (expressionType.isRawType() || !expressionType.isEquivalentTo(match)) {", "+\t\t\t\t\t\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t// [JLS 5.5] S has no subtype X != T, such that |X| == |T|", "+\t\t\t\t\t\t\t\tTypeBinding genericCastType = castType.erasure(); // jump to generic type", "+\t\t\t\t\t\t\t\tTypeBinding genericMatch = genericCastType.findSuperTypeWithSameErasure(expressionType);", "+\t\t\t\t\t\t\t\tif (genericMatch == match) {", "+\t\t\t\t\t\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t// [JLS 5.5] T >: S", "+\t\t\t\t\t\t\t\tif (!match.isEquivalentTo(castType)) {", "+\t\t\t\t\t\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Binding.RAW_TYPE :", "+\t\t\t\t\t\t\tthis.bits |= UnsafeCast; // upcast since castType is known to be bound paramType", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\tif (isNarrowing){", "+\t\t\t\t\t\t\t\t// match is not parameterized or raw, then any other subtype of match will erase  to |T|", "+\t\t\t\t\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.ARRAY_TYPE :", "+\t\t\t\tTypeBinding leafType = castType.leafComponentType();", "+\t\t\t\tif (isNarrowing && (leafType.isBoundParameterizedType() || leafType.isTypeVariable())) {", "+\t\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.TYPE_PARAMETER :", "-\t\t\t\treturn true;", "-\t\t\t} else if ((castType.tagBits & TagBits.HasDirectWildcard) == 0", "-\t\t\t\t\t&& (!match.isParameterizedType() || expressionType.isRawType())) {", "-\t\t\t\tthis.bits |= UnsafeCast;", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t} else if (isNarrowing) {", "-\t\t\tTypeBinding leafType = castType.leafComponentType();", "-\t\t\tif (expressionType.id == T_JavaLangObject && castType.isArrayType() && leafType.isBoundParameterizedType()) {", "-\t\t\t\tthis.bits |= UnsafeCast;", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tif (match == null && castType.isBoundParameterizedType()) { // cast between unrelated types", "-\t\t\t\tthis.bits |= UnsafeCast;", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tif (leafType.isTypeVariable()) {", "-\t\t\t\tthis.bits |= UnsafeCast;", "-\t\t\t\treturn true;", "-\t\t\t}", "+\t\t\t\treturn true;\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ff085fa620b8715c5d98abade1e74fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic TypeBinding convertToRawType(TypeBinding type)", "signatureAfterChange": "  \tpublic TypeBinding convertToRawType(TypeBinding type)", "diff": ["+\t\t\tcase Binding.BASE_TYPE :", "+\t\t\tcase Binding.RAW_TYPE:", "-\t\tif (originalType instanceof ReferenceBinding) {", "-\t\t\tboolean needToConvert = originalType.isGenericType() ", "-\t\t\t\t\t|| (originalType.erasure().isGenericType() ", "-\t\t\t\t\t\t\t&& originalType.isParameterizedType() ", "-\t\t\t\t\t\t\t&& ((ParameterizedTypeBinding)originalType).arguments == null);", "-\t\t\t", "-\t\t\tReferenceBinding convertedType = (ReferenceBinding) originalType;", "-\t\t\tReferenceBinding originalEnclosing = originalType.enclosingType();", "-\t\t\tReferenceBinding convertedEnclosing = originalEnclosing;", "-\t\t\tif (originalEnclosing != null && (needToConvert || convertedType.isStatic() && originalEnclosing.isGenericType())) {", "-\t\t\t\tconvertedEnclosing = (ReferenceBinding) convertToRawType(originalEnclosing);", "+\t\tboolean needToConvert;", "+\t\tswitch (originalType.kind()) {", "+\t\t\tcase Binding.BASE_TYPE :", "+\t\t\t\treturn type;", "+\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\tneedToConvert = true;", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\tParameterizedTypeBinding paramType = (ParameterizedTypeBinding) originalType;", "+\t\t\t\tneedToConvert = paramType.type.isGenericType(); // only recursive call to enclosing type can find parameterizedType with arguments", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\tneedToConvert = false;", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tReferenceBinding originalEnclosing = originalType.enclosingType();", "+\t\tTypeBinding convertedType;", "+\t\tif (originalEnclosing == null) {", "+\t\t\tconvertedType = needToConvert ? environment().createRawType((ReferenceBinding)originalType.erasure(), null) : originalType;", "+\t\t} else {", "+\t\t\tReferenceBinding convertedEnclosing;", "+\t\t\tswitch (originalEnclosing.kind()) {", "+\t\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\t\tif (needToConvert || ((ReferenceBinding)originalType).isStatic()) {", "+\t\t\t\t\t\tconvertedEnclosing = (ReferenceBinding) convertToRawType(originalEnclosing);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tconvertedEnclosing = originalEnclosing;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault :", "+\t\t\t\t\tconvertedEnclosing = originalEnclosing;", "+\t\t\t\t\tbreak;", "-\t\t\t\tconvertedType = environment().createRawType(convertedType, convertedEnclosing);", "+\t\t\t\tconvertedType = environment().createRawType((ReferenceBinding) originalType.erasure(), convertedEnclosing);", "-\t\t\t\tconvertedType = createParameterizedType(convertedType, null, convertedEnclosing);", "+\t\t\t\tconvertedType = createParameterizedType((ReferenceBinding) originalType.erasure(), null, convertedEnclosing);", "+\t\t\t} else {", "+\t\t\t\tconvertedType = originalType;", "-\t\t\tif (originalType != convertedType) {", "-\t\t\t\treturn dimension > 0 ? (TypeBinding)createArrayType(convertedType, dimension) : convertedType;", "-\t\t\t}", "+\t\t}", "+\t\tif (originalType != convertedType) {", "+\t\t\treturn dimension > 0 ? (TypeBinding)createArrayType(convertedType, dimension) : convertedType;"]}], "num": 36485}
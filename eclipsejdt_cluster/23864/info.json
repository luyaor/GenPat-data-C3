{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ab0402b2358ef4ed00463f9b0a21cbd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33b100e2006ea97cdf329317c8c6bbde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "  \t\tpublic final int rewriteList(ASTNode parent, StructuralPropertyDescriptor property, int offset, String keyword)", "signatureAfterChange": "  \t\tprivate int rewriteList( \t\t\t\tASTNode parent, \t\t\t\tStructuralPropertyDescriptor property, \t\t\t\tString keyword, \t\t\t\tString endKeyword, \t\t\t\tint offset)", "diff": ["-\t\tpublic final int rewriteList(ASTNode parent, StructuralPropertyDescriptor property, int offset, String keyword) {", "+\t\tprivate int rewriteList(", "+\t\t\t\tASTNode parent,", "+\t\t\t\tStructuralPropertyDescriptor property,", "+\t\t\t\tString keyword,", "+\t\t\t\tString endKeyword,", "+\t\t\t\tint offset) {", "-\t\t\tif (currPos == -1) { // only inserts", "+\t\t\tboolean insertNew = currPos == -1;", "+\t\t\tif (insertNew) { // only inserts", "+\t\t\t\t\t}", "+\t\t\t\t\tif (insertNew) {", "+\t\t\t\t\t\tif (endKeyword != null && endKeyword.length() > 0) {", "+\t\t\t\t\t\t\tdoTextInsert(currPos, endKeyword, editGroup);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56c30f2d773167f79956a9fe60a3ca48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java", "commitBeforeChange": "e42c20628487cb9dbd094c771f2d6807cf3aedef", "commitAfterChange": "043e609336cbc27212f5810aa261a7993358f6d7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic void processAnnotations(BuildContext[] allfiles)", "signatureAfterChange": " \t \tpublic void processAnnotations(BuildContext[] allfiles)", "diff": ["-\t\t\t\tif( _buildRound > 0 && _processedFiles.contains( allfiles[i].getFile() )){", "+\t\t\t\tBuildContext bc = allfiles[i];", "+\t\t\t\tif( _buildRound > 0 && _processedFiles.containsKey( bc.getFile() )){", "+\t\t\t\t\t// We've already processed this file; we'll skip reprocessing it, on", "+\t\t\t\t\t// the assumption that nothing would change, but we need to re-report", "+\t\t\t\t\t// any problems we reported earlier because JDT will have cleared them.", "+\t\t\t\t\tCategorizedProblem[] problems = _processedFiles.get(bc.getFile());", "+\t\t\t\t\tif (null != problems && problems.length > 0) {", "+\t\t\t\t\t\tbc.recordNewProblems(problems);", "+\t\t\t\t\t}", "-\t\t\t\tif( allfiles[i].hasAnnotations() )", "+\t\t\t\tif( bc.hasAnnotations() )", "-\t\t\t\tif( _processedFiles.contains( allfiles[i].getFile() ) )", "+\t\t\t\tif( _processedFiles.containsKey( allfiles[i].getFile() ) )", "-\t\t\t\t_processedFiles.add(file.getFile());", "+\t\t\t\t_processedFiles.put(file.getFile(), null);", "+\t\t\t\t\t\t_processedFiles,"]}], "num": 23864}
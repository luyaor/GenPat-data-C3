{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "901051f627394d2661595a6b61cb1034", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a7d9eedbd602add3fcd87acb12c9c24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "f5be514287a14c34eaf46764a8f15d56d8087272", "commitAfterChange": "e2e97eb1ed318448b72d60aca6f0daa8c5b48408", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-", "+\t\tTypeBinding result=resolveTypeForQualifiedAllocationExpression(scope);", "+\t\tif(result != null) {", "+\t\t\tfinal CompilerOptions compilerOptions = scope.compilerOptions();", "+\t\t\tif (compilerOptions.isAnnotationBasedNullAnalysisEnabled && (this.binding.tagBits & TagBits.IsNullnessKnown) == 0) {", "+\t\t\t\tnew ImplicitNullAnnotationVerifier(compilerOptions.inheritNullAnnotations)", "+\t\t\t\t\t\t.checkImplicitNullAnnotations(this.binding, null/*srcMethod*/, false, scope);", "+\t\t\t}", "+\t\t}", "+\t\treturn result;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "930b8e1bd74a5016e938badccd0a087d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "782a0e24567335275ab3b8e5f05394a3658a8693", "commitAfterChange": "4f45fe6a27b23817015e0ab45d5ac7052b924dc7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-", "+\t\tTypeBinding result=resolveTypeForQualifiedAllocationExpression(scope);", "+\t\tif(result != null) {", "+\t\t\tfinal CompilerOptions compilerOptions = scope.compilerOptions();", "+\t\t\tif (compilerOptions.isAnnotationBasedNullAnalysisEnabled && (this.binding.tagBits & TagBits.IsNullnessKnown) == 0) {", "+\t\t\t\tnew ImplicitNullAnnotationVerifier(compilerOptions.inheritNullAnnotations)", "+\t\t\t\t\t\t.checkImplicitNullAnnotations(this.binding, null/*srcMethod*/, false, scope);", "+\t\t\t}", "+\t\t}", "+\t\treturn result;", "+\t}"]}], "num": 32560}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c4beae47165979f884998cc5440b7c7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "938e4a6565ab7a97ce02f39f45bde69e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/ManifestAnalyzer.java", "commitBeforeChange": "c1dc3100cbeb76012e0bcbde498d9c2d70bc26ef", "commitAfterChange": "edf1aa4b220fec20b2ea6b3588c59f7c04f1c931", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic boolean analyzeManifestContents(Reader reader) throws IOException", "signatureAfterChange": " \tpublic boolean analyzeManifestContents(InputStream inputStream) throws IOException", "diff": ["-\tpublic boolean analyzeManifestContents(Reader reader) throws IOException {", "-\t\tint state = START, substate = 0;", "-\t\tStringBuffer currentJarToken = new StringBuffer();", "-\t\tint currentChar;", "-\t\tthis.classpathSectionsCount = 0;", "-\t\tthis.calledFilesNames = null;", "-\t\tfor (;;) {", "-\t\t\tcurrentChar = reader.read();", "-\t\t\tif (currentChar == '\\r')  // skip \\r, will consider \\n later (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=251079 )", "+\t */", "+\tpublic boolean analyzeManifestContents(InputStream inputStream) throws IOException {", "+\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, Charset.forName(Util.UTF_8)));", "+\t\ttry {", "+\t\t\tint state = START, substate = 0;", "+\t\t\tStringBuffer currentJarToken = new StringBuffer();", "+\t\t\tint currentChar;", "+\t\t\tthis.classpathSectionsCount = 0;", "+\t\t\tthis.calledFilesNames = null;", "+\t\t\tfor (;;) {", "-\t\t\tswitch (state) {", "-\t\t\t\tcase START:", "-\t\t\t\t\tif (currentChar == -1) {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else if (currentChar == CLASSPATH_HEADER_TOKEN[0]) {", "-\t\t\t\t\t\tstate = IN_CLASSPATH_HEADER;", "-\t\t\t\t\t\tsubstate = 1;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tstate = SKIP_LINE;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IN_CLASSPATH_HEADER:", "-\t\t\t\t\tif (currentChar == -1) {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else if (currentChar == '\\n') {", "-\t\t\t\t\t\tstate = START;", "-\t\t\t\t\t} else if (currentChar != CLASSPATH_HEADER_TOKEN[substate++]) {", "-\t\t\t\t\t\tstate = SKIP_LINE;", "-\t\t\t\t\t} else if (substate == CLASSPATH_HEADER_TOKEN.length) {", "-\t\t\t\t\t\tstate = PAST_CLASSPATH_HEADER;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase PAST_CLASSPATH_HEADER:", "-\t\t\t\t\tif (currentChar == ' ') {", "-\t\t\t\t\t\tstate = SKIPPING_WHITESPACE;", "-\t\t\t\t\t\tthis.classpathSectionsCount++;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase SKIPPING_WHITESPACE:", "-\t\t\t\t\tif (currentChar == -1) {", "-\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "-\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else if (currentChar == '\\n') {", "-\t\t\t\t\t\tstate = CONTINUING;", "-\t\t\t\t\t} else if (currentChar != ' ') {", "-\t\t\t\t\t\tcurrentJarToken.append((char) currentChar);", "-\t\t\t\t\t\tstate = READING_JAR;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "-\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase CONTINUING:", "-\t\t\t\t\tif (currentChar == -1) {", "-\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "-\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else if (currentChar == '\\n') {", "-\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "-\t\t\t\t\t\tstate = START;", "-\t\t\t\t\t} else if (currentChar == ' ') {", "-\t\t\t\t\t\tstate = SKIPPING_WHITESPACE;", "-\t\t\t\t\t} else if (currentChar == CLASSPATH_HEADER_TOKEN[0]) {", "-\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "-\t\t\t\t\t\tstate = IN_CLASSPATH_HEADER;", "-\t\t\t\t\t\tsubstate = 1;", "-\t\t\t\t\t} else if (this.calledFilesNames == null) {", "-\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "-\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "-\t\t\t\t\t\tstate = START;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "-\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "-\t\t\t\t\t\tstate = SKIP_LINE;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase SKIP_LINE:", "-\t\t\t\t\tif (currentChar == -1) {", "-\t\t\t\t\t\tif (this.classpathSectionsCount != 0) {", "-\t\t\t\t\t\t\tif (this.calledFilesNames == null) {", "-\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t}", "+\t\t\t\tif (currentChar == '\\r')  // skip \\r, will consider \\n later (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=251079 )", "+\t\t\t\t\tcurrentChar = reader.read();", "+\t\t\t\tswitch (state) {", "+\t\t\t\t\tcase START:", "+\t\t\t\t\t\tif (currentChar == -1) {", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t} else if (currentChar == CLASSPATH_HEADER_TOKEN[0]) {", "+\t\t\t\t\t\t\tstate = IN_CLASSPATH_HEADER;", "+\t\t\t\t\t\t\tsubstate = 1;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tstate = SKIP_LINE;", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else if (currentChar == '\\n') {", "-\t\t\t\t\t\tstate = START;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase READING_JAR:", "-\t\t\t\t\tif (currentChar == -1) {", "-\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t} else if (currentChar == '\\n') {", "-\t\t\t\t\t\t// appends token below", "-\t\t\t\t\t\tstate = CONTINUING;", "-\t\t\t\t\t\t// >>>>>>>>>>> Add a break to not add the jar yet as it can continue on the next line", "-\t\t\t\t\t} else if (currentChar == ' ') {", "-\t\t\t\t\t\t// appends token below", "-\t\t\t\t\t\tstate = SKIPPING_WHITESPACE;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcurrentJarToken.append((char) currentChar);", "+\t\t\t\t\tcase IN_CLASSPATH_HEADER:", "+\t\t\t\t\t\tif (currentChar == -1) {", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t} else if (currentChar == '\\n') {", "+\t\t\t\t\t\t\tstate = START;", "+\t\t\t\t\t\t} else if (currentChar != CLASSPATH_HEADER_TOKEN[substate++]) {", "+\t\t\t\t\t\t\tstate = SKIP_LINE;", "+\t\t\t\t\t\t} else if (substate == CLASSPATH_HEADER_TOKEN.length) {", "+\t\t\t\t\t\t\tstate = PAST_CLASSPATH_HEADER;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "-\t\t\t\t\tbreak;", "+\t\t\t\t\tcase PAST_CLASSPATH_HEADER:", "+\t\t\t\t\t\tif (currentChar == ' ') {", "+\t\t\t\t\t\t\tstate = SKIPPING_WHITESPACE;", "+\t\t\t\t\t\t\tthis.classpathSectionsCount++;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase SKIPPING_WHITESPACE:", "+\t\t\t\t\t\tif (currentChar == -1) {", "+\t\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "+\t\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t} else if (currentChar == '\\n') {", "+\t\t\t\t\t\t\tstate = CONTINUING;", "+\t\t\t\t\t\t} else if (currentChar != ' ') {", "+\t\t\t\t\t\t\tcurrentJarToken.append((char) currentChar);", "+\t\t\t\t\t\t\tstate = READING_JAR;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "+\t\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase CONTINUING:", "+\t\t\t\t\t\tif (currentChar == -1) {", "+\t\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "+\t\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t} else if (currentChar == '\\n') {", "+\t\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\t\t\t\tstate = START;", "+\t\t\t\t\t\t} else if (currentChar == ' ') {", "+\t\t\t\t\t\t\tstate = SKIPPING_WHITESPACE;", "+\t\t\t\t\t\t} else if (currentChar == CLASSPATH_HEADER_TOKEN[0]) {", "+\t\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\t\t\t\tstate = IN_CLASSPATH_HEADER;", "+\t\t\t\t\t\t\tsubstate = 1;", "+\t\t\t\t\t\t} else if (this.calledFilesNames == null) {", "+\t\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "+\t\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\t\t\t\tstate = START;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "+\t\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\t\t\t\tstate = SKIP_LINE;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase SKIP_LINE:", "+\t\t\t\t\t\tif (currentChar == -1) {", "+\t\t\t\t\t\t\tif (this.classpathSectionsCount != 0) {", "+\t\t\t\t\t\t\t\tif (this.calledFilesNames == null) {", "+\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t} else if (currentChar == '\\n') {", "+\t\t\t\t\t\t\tstate = START;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase READING_JAR:", "+\t\t\t\t\t\tif (currentChar == -1) {", "+\t\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t} else if (currentChar == '\\n') {", "+\t\t\t\t\t\t\t// appends token below", "+\t\t\t\t\t\t\tstate = CONTINUING;", "+\t\t\t\t\t\t\t// >>>>>>>>>>> Add a break to not add the jar yet as it can continue on the next line", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t} else if (currentChar == ' ') {", "+\t\t\t\t\t\t\t// appends token below", "+\t\t\t\t\t\t\tstate = SKIPPING_WHITESPACE;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcurrentJarToken.append((char) currentChar);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t} finally {", "+\t\t\treader.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec60577e6e9fc0942b51819fce476779", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/ManifestAnalyzer.java", "commitBeforeChange": "3f5cbb18c46086c6608f8eda9ed7a46cfcbdfb6c", "commitAfterChange": "e636beda5819fc107d5b6886ca910b3c2c4a3419", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic boolean analyzeManifestContents(InputStream inputStream) throws IOException", "signatureAfterChange": " \tpublic boolean analyzeManifestContents(InputStream inputStream) throws IOException", "diff": ["-\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, Util.UTF_8));", "-\t\ttry {", "-\t\t\tint state = START, substate = 0;", "-\t\t\tStringBuffer currentJarToken = new StringBuffer();", "-\t\t\tint currentChar;", "-\t\t\tthis.classpathSectionsCount = 0;", "-\t\t\tthis.calledFilesNames = null;", "-\t\t\tfor (;;) {", "-\t\t\t\tcurrentChar = reader.read();", "-\t\t\t\tif (currentChar == '\\r')  // skip \\r, will consider \\n later (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=251079 )", "-\t\t\t\t\tcurrentChar = reader.read();", "-\t\t\t\tswitch (state) {", "-\t\t\t\t\tcase START:", "-\t\t\t\t\t\tif (currentChar == -1) {", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t} else if (currentChar == CLASSPATH_HEADER_TOKEN[0]) {", "-\t\t\t\t\t\t\tstate = IN_CLASSPATH_HEADER;", "-\t\t\t\t\t\t\tsubstate = 1;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tstate = SKIP_LINE;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase IN_CLASSPATH_HEADER:", "-\t\t\t\t\t\tif (currentChar == -1) {", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t} else if (currentChar == '\\n') {", "-\t\t\t\t\t\t\tstate = START;", "-\t\t\t\t\t\t} else if (currentChar != CLASSPATH_HEADER_TOKEN[substate++]) {", "-\t\t\t\t\t\t\tstate = SKIP_LINE;", "-\t\t\t\t\t\t} else if (substate == CLASSPATH_HEADER_TOKEN.length) {", "-\t\t\t\t\t\t\tstate = PAST_CLASSPATH_HEADER;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase PAST_CLASSPATH_HEADER:", "-\t\t\t\t\t\tif (currentChar == ' ') {", "-\t\t\t\t\t\t\tstate = SKIPPING_WHITESPACE;", "-\t\t\t\t\t\t\tthis.classpathSectionsCount++;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase SKIPPING_WHITESPACE:", "-\t\t\t\t\t\tif (currentChar == -1) {", "-\t\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "-\t\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t} else if (currentChar == '\\n') {", "-\t\t\t\t\t\t\tstate = CONTINUING;", "-\t\t\t\t\t\t} else if (currentChar != ' ') {", "-\t\t\t\t\t\t\tcurrentJarToken.append((char) currentChar);", "-\t\t\t\t\t\t\tstate = READING_JAR;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "-\t\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase CONTINUING:", "-\t\t\t\t\t\tif (currentChar == -1) {", "-\t\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "-\t\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t} else if (currentChar == '\\n') {", "-\t\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "-\t\t\t\t\t\t\tstate = START;", "-\t\t\t\t\t\t} else if (currentChar == ' ') {", "-\t\t\t\t\t\t\tstate = SKIPPING_WHITESPACE;", "-\t\t\t\t\t\t} else if (currentChar == CLASSPATH_HEADER_TOKEN[0]) {", "-\t\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "-\t\t\t\t\t\t\tstate = IN_CLASSPATH_HEADER;", "-\t\t\t\t\t\t\tsubstate = 1;", "-\t\t\t\t\t\t} else if (this.calledFilesNames == null) {", "-\t\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "-\t\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "-\t\t\t\t\t\t\tstate = START;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "-\t\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "-\t\t\t\t\t\t\tstate = SKIP_LINE;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase SKIP_LINE:", "-\t\t\t\t\t\tif (currentChar == -1) {", "-\t\t\t\t\t\t\tif (this.classpathSectionsCount != 0) {", "-\t\t\t\t\t\t\t\tif (this.calledFilesNames == null) {", "-\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t} else if (currentChar == '\\n') {", "-\t\t\t\t\t\t\tstate = START;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase READING_JAR:", "-\t\t\t\t\t\tif (currentChar == -1) {", "-\t\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t} else if (currentChar == '\\n') {", "-\t\t\t\t\t\t\t// appends token below", "-\t\t\t\t\t\t\tstate = CONTINUING;", "-\t\t\t\t\t\t\t// >>>>>>>>>>> Add a break to not add the jar yet as it can continue on the next line", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t} else if (currentChar == ' ') {", "-\t\t\t\t\t\t\t// appends token below", "-\t\t\t\t\t\t\tstate = SKIPPING_WHITESPACE;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcurrentJarToken.append((char) currentChar);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "-\t\t\t\t\t\tbreak;", "+\t\tchar[] chars = Util.getInputStreamAsCharArray(inputStream, -1, Util.UTF_8);", "+\t\tint state = START, substate = 0;", "+\t\tStringBuffer currentJarToken = new StringBuffer();", "+\t\tint currentChar;", "+\t\tthis.classpathSectionsCount = 0;", "+\t\tthis.calledFilesNames = null;", "+\t\tfor (int i = 0, max = chars.length; i < max;) {", "+\t\t\tcurrentChar = chars[i++];", "+\t\t\tif (currentChar == '\\r') {", "+\t\t\t\t// skip \\r, will consider \\n later (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=251079 )", "+\t\t\t\tif (i < max) {", "+\t\t\t\t\tcurrentChar = chars[i++];", "-\t\t} finally {", "-\t\t\treader.close();", "+\t\t\tswitch (state) {", "+\t\t\t\tcase START:", "+\t\t\t\t\tif (currentChar == CLASSPATH_HEADER_TOKEN[0]) {", "+\t\t\t\t\t\tstate = IN_CLASSPATH_HEADER;", "+\t\t\t\t\t\tsubstate = 1;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tstate = SKIP_LINE;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IN_CLASSPATH_HEADER:", "+\t\t\t\t\tif (currentChar == '\\n') {", "+\t\t\t\t\t\tstate = START;", "+\t\t\t\t\t} else if (currentChar != CLASSPATH_HEADER_TOKEN[substate++]) {", "+\t\t\t\t\t\tstate = SKIP_LINE;", "+\t\t\t\t\t} else if (substate == CLASSPATH_HEADER_TOKEN.length) {", "+\t\t\t\t\t\tstate = PAST_CLASSPATH_HEADER;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase PAST_CLASSPATH_HEADER:", "+\t\t\t\t\tif (currentChar == ' ') {", "+\t\t\t\t\t\tstate = SKIPPING_WHITESPACE;", "+\t\t\t\t\t\tthis.classpathSectionsCount++;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase SKIPPING_WHITESPACE:", "+\t\t\t\t\tif (currentChar == '\\n') {", "+\t\t\t\t\t\tstate = CONTINUING;", "+\t\t\t\t\t} else if (currentChar != ' ') {", "+\t\t\t\t\t\tcurrentJarToken.append((char) currentChar);", "+\t\t\t\t\t\tstate = READING_JAR;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "+\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase CONTINUING:", "+\t\t\t\t\tif (currentChar == '\\n') {", "+\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\t\t\tstate = START;", "+\t\t\t\t\t} else if (currentChar == ' ') {", "+\t\t\t\t\t\tstate = SKIPPING_WHITESPACE;", "+\t\t\t\t\t} else if (currentChar == CLASSPATH_HEADER_TOKEN[0]) {", "+\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\t\t\tstate = IN_CLASSPATH_HEADER;", "+\t\t\t\t\t\tsubstate = 1;", "+\t\t\t\t\t} else if (this.calledFilesNames == null) {", "+\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "+\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\t\t\tstate = START;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "+\t\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\t\t\tstate = SKIP_LINE;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase SKIP_LINE:", "+\t\t\t\t\tif (currentChar == '\\n') {", "+\t\t\t\t\t\tstate = START;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase READING_JAR:", "+\t\t\t\t\tif (currentChar == '\\n') {", "+\t\t\t\t\t\t// appends token below", "+\t\t\t\t\t\tstate = CONTINUING;", "+\t\t\t\t\t\t// >>>>>>>>>>> Add a break to not add the jar yet as it can continue on the next line", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t} else if (currentChar == ' ') {", "+\t\t\t\t\t\t// appends token below", "+\t\t\t\t\t\tstate = SKIPPING_WHITESPACE;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcurrentJarToken.append((char) currentChar);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\t\tbreak;", "+\t\t\t}", "-\t}\t", "+\t\tswitch (state) {", "+\t\t\tcase START:", "+\t\t\t\treturn true;", "+\t\t\tcase IN_CLASSPATH_HEADER:", "+\t\t\t\treturn true;", "+\t\t\tcase PAST_CLASSPATH_HEADER:", "+\t\t\t\treturn false;", "+\t\t\tcase SKIPPING_WHITESPACE:", "+\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "+\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\treturn true;", "+\t\t\tcase CONTINUING:", "+\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "+\t\t\t\taddCurrentTokenJarWhenNecessary(currentJarToken);", "+\t\t\t\treturn true;", "+\t\t\tcase SKIP_LINE:", "+\t\t\t\tif (this.classpathSectionsCount != 0) {", "+\t\t\t\t\tif (this.calledFilesNames == null) {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn true;", "+\t\t\tcase READING_JAR:", "+\t\t\t\t// >>>>>>>>>>>>>>>>>> Add the latest jar read", "+\t\t\t\treturn false;", "+\t\t}", "+\t\treturn true;", "+\t}"]}], "num": 61331}
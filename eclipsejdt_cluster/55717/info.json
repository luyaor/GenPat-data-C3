{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2847e67218f8ecadb76794d0c2d4834c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b940065bc9e127334df5b8fc04fd7b51", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedMethodBinding.java", "commitBeforeChange": "0a204bec13c166245ab38aefac187fb60ca5634f", "commitAfterChange": "60cbdce444f3fcf3297f6f80ad9fdcf610a9a0c4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static ParameterizedMethodBinding instantiateGetClass(TypeBinding receiverType, MethodBinding originalMethod, Scope scope)", "signatureAfterChange": " \tpublic static ParameterizedMethodBinding instantiateGetClass(TypeBinding receiverType, MethodBinding originalMethod, Scope scope)", "diff": ["-\t\tmethod.returnType = scope.environment().createParameterizedType(", "+\t\tLookupEnvironment environment = scope.environment();", "+\t\tTypeBinding rawType = environment.convertToRawType(receiverType);", "+\t\tmethod.returnType = environment.createParameterizedType(", "-\t\t\tnew TypeBinding[] {  scope.environment().createWildcard(genericClassType, 0, receiverType.erasure(), null /*no extra bound*/, Wildcard.EXTENDS) },", "+\t\t\tnew TypeBinding[] {  environment.createWildcard(genericClassType, 0, rawType, null /*no extra bound*/, Wildcard.EXTENDS) },"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbb753ceef2a190fb9e03adea5e7b943", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "78c62e3a4157070f714848f4de312a55f14f5144", "commitAfterChange": "fb48e11da0ebe84c63fab7b3cb5afd39c0ba6101", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " TypeBinding getTypeFromVariantTypeSignature( \tSignatureWrapper wrapper, \tTypeVariableBinding[] staticVariables, \tReferenceBinding enclosingType, \tReferenceBinding genericType, \tint rank)", "signatureAfterChange": " TypeBinding getTypeFromVariantTypeSignature( \tSignatureWrapper wrapper, \tTypeVariableBinding[] staticVariables, \tReferenceBinding enclosingType, \tReferenceBinding genericType, \tint rank)", "diff": ["-\t\t\treturn createWildcard(genericType, rank, bound, Wildcard.SUPER);", "+\t\t\treturn createWildcard(genericType, rank, bound, null /*no extra bound*/, Wildcard.SUPER);", "-\t\t\treturn createWildcard(genericType, rank, bound, Wildcard.EXTENDS);", "+\t\t\treturn createWildcard(genericType, rank, bound, null /*no extra bound*/, Wildcard.EXTENDS);", "-\t\t\treturn createWildcard(genericType, rank, null, Wildcard.UNBOUND);", "+\t\t\treturn createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);"]}], "num": 55717}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "642f00a83f7ee1c7d59edb741d11d9cf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "041ceafaa3cf517e3d9341265c94cb6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "4a6b3839c123ba52c0418c6a1716f84ca2fa40ee", "commitAfterChange": "7ab66ec659aff4e2eeafa10fb6d8c45a18f899f6", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void printBlockComment(char[] s, int commentStart)", "signatureAfterChange": " \tpublic void printBlockComment(char[] s, int commentStart)", "diff": ["+\t\tint currentTokenStartPosition = this.scanner.getCurrentTokenStartPosition();", "+\t\tint currentTokenEndPosition = this.scanner.getCurrentTokenEndPosition() + 1;", "+\t\t", "-\t\t\t\t// add position mapping", "-\t\t\t\tString reduceLine = lineContents.trim();", "-\t\t\t\tfinal int reduceLineLength = reduceLine.length();", "-\t\t\t\tif (this.positionsToMap != null) {", "-\t\t\t\t\tint start = commentSource.indexOf(reduceLine, startSearchIndex);", "-\t\t\t\t\tmapPositions(start + commentStart, this.buffer.length(), reduceLineLength);", "-\t\t\t\t\tstartSearchIndex = start + reduceLineLength + 1;", "+\t\t\t\t// remove leading whitespaces", "+\t\t\t\tint lineStartPosition = currentTokenStartPosition + commentSource.indexOf(lineContents, startSearchIndex);", "+\t\t\t\tthis.scanner.resetTo(lineStartPosition, this.scannerEndPosition - 1);", "+\t\t\t\tString reduceLine = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tif (this.scanner.getNextToken() == ITerminalSymbols.TokenNameWHITESPACE) {", "+\t\t\t\t\t\tint begin = this.scanner.getCurrentTokenEndPosition() + 1 - lineStartPosition;", "+\t\t\t\t\t\tif (begin < lineContents.length()) {", "+\t\t\t\t\t\t\treduceLine = lineContents.substring(begin);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\treduceLine = \"\"; //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treduceLine = lineContents;", "+\t\t\t\t\t}", "+\t\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\t\t// should not happen", "+\t\t\t\tfinal int reduceLineLength = reduceLine.length();", "+\t\t\t\t// add position mapping", "+\t\t\t\tint start = commentSource.indexOf(reduceLine, startSearchIndex);", "+\t\t\t\tif (this.positionsToMap != null) {", "+\t\t\t\t\tmapPositions(start + commentStart, this.buffer.length(), reduceLineLength);", "+\t\t\t\t}", "+\t\t\t\tstartSearchIndex = start + reduceLineLength + 1;", "+\t\tthis.scanner.resetTo(currentTokenEndPosition, this.scannerEndPosition - 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1f9ad220abadeb03e1e03e2c61dbbaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorPattern.java", "commitBeforeChange": "24cf489e4c973e29dff7eade9d41897f72a37db0", "commitAfterChange": "f924ed86fe1dbe148077a9cade20b11e404ba89b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void decodeIndexKey(char[] key)", "signatureAfterChange": "  public void decodeIndexKey(char[] key)", "diff": ["+", "-\tthis.parameterCount = 0;", "-\tthis.declaringSimpleName = null;", "-\tint power = 1;", "-\tfor (int i=last; i>=0; i--) {", "-\t\tif (key[i] == SEPARATOR) {", "-\t\t\tSystem.arraycopy(key, 0, this.declaringSimpleName = new char[i], 0, i);", "-\t\t\tbreak;", "-\t\t}", "-\t\tif (i == last) {", "-\t\t\tthis.parameterCount = key[i] - '0';", "-\t\t} else {", "-\t\t\tpower *= 10;", "-\t\t\tthis.parameterCount += power * (key[i] - '0');", "+\tint slash = CharOperation.indexOf(SEPARATOR, key, 0);", "+\tthis.declaringSimpleName = CharOperation.subarray(key, 0, slash);", "+\t", "+\tint start = slash + 1;", "+\tslash = CharOperation.indexOf(SEPARATOR, key, start);", "+\tif (slash != -1) {", "+\t\tlast = slash - 1;", "+\t}", "+\t", "+\tboolean isDefaultConstructor = key[last] == '#';", "+\tif (isDefaultConstructor) {", "+\t\tthis.parameterCount = -1;", "+\t} else {", "+\t\tthis.parameterCount = 0;", "+\t\tint power = 1;", "+\t\tfor (int i = last; i >= start; i--) {", "+\t\t\tif (i == last) {", "+\t\t\t\tthis.parameterCount = key[i] - '0';", "+\t\t\t} else {", "+\t\t\t\tpower *= 10;", "+\t\t\t\tthis.parameterCount += power * (key[i] - '0');", "+\t\t\t}"]}], "num": 70435}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1195e5bc33739bfaba98569eaedb6c0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1564019aa8b36b19bffae5bb4903a527", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "3e32cedb68e257de58ed115543445fc7d20d99a3", "commitAfterChange": "2350908b5752e3ff24a70139d6a734ea17063c3d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprivate static void suggestNames( \t\tchar[] packageName, \t\tchar[] qualifiedTypeName, \t\tint dim, \t\tchar[] internalPrefix, \t\tchar[][] prefixes, \t\tchar[][] suffixes, \t\tchar[][] excludedNames, \t\tScanner nameScanner, \t\tINamingRequestor requestor)", "signatureAfterChange": " \t \tprivate static void suggestNames( \t\tchar[] packageName, \t\tchar[] qualifiedTypeName, \t\tint dim, \t\tchar[] internalPrefix, \t\tchar[][] prefixes, \t\tchar[][] suffixes, \t\tchar[][] excludedNames, \t\tScanner nameScanner, \t\tINamingRequestor requestor)", "diff": ["-\t\t\t\t\t\t\tif(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {", "-\t\t\t\t\t\t\t\tacceptName(suffixName, prefixes[k], suffixes[l],  k == 0, l == 0, internalPrefix.length - j, requestor);", "-\t\t\t\t\t\t\t\tacceptDefaultName = false;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tsuffixName = CharOperation.concat(", "-\t\t\t\t\t\t\t\t\tprefixName,", "-\t\t\t\t\t\t\t\t\tString.valueOf(1).toCharArray(),", "-\t\t\t\t\t\t\t\t\tsuffixes[l]", "-\t\t\t\t\t\t\t\t);", "-\t\t\t\t\t\t\t\tsuffixName =", "-\t\t\t\t\t\t\t\t\texcludeNames(", "-\t\t\t\t\t\t\t\t\t\tsuffixName,", "-\t\t\t\t\t\t\t\t\t\tprefixName,", "-\t\t\t\t\t\t\t\t\t\tsuffixes[l],", "-\t\t\t\t\t\t\t\t\t\texcludedNames);", "-\t\t\t\t\t\t\t\tif(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {", "-\t\t\t\t\t\t\t\t\tacceptName(suffixName, prefixes[k], suffixes[l], k == 0, l == 0, internalPrefix.length - j, requestor);", "-\t\t\t\t\t\t\t\t\tacceptDefaultName = false;", "+\t\t\t\t\t\t\ttry{", "+\t\t\t\t\t\t\t\tnameScanner.setSource(suffixName);", "+\t\t\t\t\t\t\t\tswitch (nameScanner.getNextToken()) {", "+\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "+\t\t\t\t\t\t\t\t\t\tint token = nameScanner.getNextToken();", "+\t\t\t\t\t\t\t\t\t\tif (token == TerminalTokens.TokenNameEOF && nameScanner.startPosition == suffixName.length) {", "+\t\t\t\t\t\t\t\t\t\t\tacceptName(suffixName, prefixes[k], suffixes[l],  k == 0, l == 0, internalPrefix.length - j, requestor);", "+\t\t\t\t\t\t\t\t\t\t\tacceptDefaultName = false;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\t\t\tsuffixName = CharOperation.concat(", "+\t\t\t\t\t\t\t\t\t\t\tprefixName,", "+\t\t\t\t\t\t\t\t\t\t\tString.valueOf(1).toCharArray(),", "+\t\t\t\t\t\t\t\t\t\t\tsuffixes[l]", "+\t\t\t\t\t\t\t\t\t\t);", "+\t\t\t\t\t\t\t\t\t\tsuffixName =", "+\t\t\t\t\t\t\t\t\t\t\texcludeNames(", "+\t\t\t\t\t\t\t\t\t\t\t\tsuffixName,", "+\t\t\t\t\t\t\t\t\t\t\t\tprefixName,", "+\t\t\t\t\t\t\t\t\t\t\t\tsuffixes[l],", "+\t\t\t\t\t\t\t\t\t\t\t\texcludedNames);", "+\t\t\t\t\t\t\t\t\t\tnameScanner.setSource(suffixName);", "+\t\t\t\t\t\t\t\t\t\tswitch (nameScanner.getNextToken()) {", "+\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "+\t\t\t\t\t\t\t\t\t\t\t\ttoken = nameScanner.getNextToken();", "+\t\t\t\t\t\t\t\t\t\t\t\tif (token == TerminalTokens.TokenNameEOF && nameScanner.startPosition == suffixName.length) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tacceptName(suffixName, prefixes[k], suffixes[l], k == 0, l == 0, internalPrefix.length - j, requestor);", "+\t\t\t\t\t\t\t\t\t\t\t\t\tacceptDefaultName = false;", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} catch(InvalidInputException e){", "+\t\t\t\t\t\t\t\t// ignore"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad588ac9059368d431b514c06c5a1abe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "b2caa750738c585e3970cd6cbdee229067bea596", "commitAfterChange": "8d1eb8a1ba1f8d42e85f057c2e74fe0db8cb690d", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " \t \tpublic org.eclipse.jdt.core.dom.NullLiteral convert(org.eclipse.jdt.internal.compiler.ast.NullLiteral expression)", "signatureAfterChange": "  \tpublic InfixExpression convert(StringLiteralConcetanation expression)", "diff": ["-\t", "+", "+\tpublic InfixExpression convert(StringLiteralConcetanation expression) {", "+\t\texpression.computeConstant();", "+\t\tInfixExpression infixExpression = this.ast.newInfixExpression();", "+\t\tinfixExpression.setOperator(InfixExpression.Operator.PLUS);", "+\t\torg.eclipse.jdt.internal.compiler.ast.StringLiteral[] stringLiterals = expression.literals;", "+\t\tinfixExpression.setLeftOperand(convert(stringLiterals[0]));", "+\t\tinfixExpression.setRightOperand(convert(stringLiterals[1]));", "+\t\tfor (int i = 2; i < expression.counter; i++) {", "+\t\t\tinfixExpression.extendedOperands().add(convert(stringLiterals[i]));", "+\t\t}", "+\t\tif (this.resolveBindings) {", "+\t\t\tthis.recordNodes(infixExpression, expression);", "+\t\t}", "+\t\tinfixExpression.setSourceRange(expression.sourceStart, expression.sourceEnd - expression.sourceStart + 1);", "+\t\treturn infixExpression;", "+\t}"]}], "num": 70492}
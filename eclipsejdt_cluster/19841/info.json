{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2410698f30edfa27377a2f4514f5ecf0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37ea159a067e1d5fcd7f6b2e4d041f86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "62f410663119f97c0390751f540a9bffcbce3825", "commitAfterChange": "28e69b92e0d0e233934799e4ff0eb97ca24f173b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic boolean detectCycle(ReferenceBinding superType, TypeReference reference, TypeBinding[] argTypes)", "signatureAfterChange": "  \tpublic boolean detectCycle(ReferenceBinding superType, TypeReference reference, TypeBinding[] argTypes)", "diff": ["+//\t\t\t    if (argType instanceof SourceTypeBinding)", "+\t\t\t    \t// ensure if this is a source superclass that it has already been checked", "+//\t\t\t    \t((SourceTypeBinding) argType).scope.connectTypeHierarchyWithoutMembers();", "-\t\tif (reference == this.superTypeReference) // see findSuperType()", "+\t\tif (reference == this.superTypeReference) { // see findSuperType()", "+\t\t\t// abstract class X<K,V> implements java.util.Map<K,V>", "+\t\t\t//    static abstract class M<K,V> implements Entry<K,V>", "+\t\t\tif (superType.isParameterizedType())", "+\t\t\t\tsuperType = ((ParameterizedTypeBinding) superType).type;", "+\t\t}", "+//\t\tif ((superType.tagBits & BeginHierarchyCheck) == 0 && superType instanceof SourceTypeBinding)", "+\t\t\t// ensure if this is a source superclass that it has already been checked", "+//\t\t\t((SourceTypeBinding) superType).scope.connectTypeHierarchyWithoutMembers();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aaac9e735e7281ba2e690ee7802d88be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/CompilationResult.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void record(char[] typeName, ClassFile classFile)", "signatureAfterChange": " public void record(char[] typeName, ClassFile classFile)", "diff": ["-\t */", "-\tpublic void record(char[] typeName, ClassFile classFile) {", "-", "-\t    SourceTypeBinding sourceType = classFile.referenceBinding;", "-\t    if (!sourceType.isLocalType() && sourceType.isHierarchyInconsistent()) {", "-\t        this.hasInconsistentToplevelHierarchies = true;", "-\t    }", "-\t\tcompiledTypes.put(typeName, classFile);", "-\t}", "+ */", "+public void record(char[] typeName, ClassFile classFile) {", "+    SourceTypeBinding sourceType = classFile.referenceBinding;", "+    if (!sourceType.isLocalType() && sourceType.isHierarchyInconsistent()) {", "+        this.hasInconsistentToplevelHierarchies = true;", "+    }", "+\tthis.compiledTypes.put(typeName, classFile);", "+}"]}], "num": 19841}
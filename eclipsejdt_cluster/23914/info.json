{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1aa0b129e1722f5b513bb94d9711f4ed", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b45a4811f761b6d3a04efb079aed5fb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "2aa51948b1d182868074055df3bd1567fc296c80", "commitAfterChange": "6ffa47a72c896e52fce5e876180115cd6d618fcb", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public int getNextToken() throws InvalidInputException", "signatureAfterChange": "\r public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\t\tif (recordLineSeparator\r", "-\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "+\t\t\t\t\t\tcheckNonExternalizeString();\r", "+\t\t\t\t\t\tif (recordLineSeparator) {\r", "+\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "-\t\t\t\t\tif (checkNonExternalizedStringLiterals){ // check for presence of\t/*nonNLS*/\r", "-\t\t\t\t\t\tint lookAhead = currentPosition < source.length && source[currentPosition] == ' ' ? currentPosition+1 : currentPosition;\r", "-\t\t\t\t\t\tint n = 0;\r", "-\t\t\t\t\t\tfor (; n < NonNLS_TAG.length; n++, lookAhead++){\r", "-\t\t\t\t\t\t\tif (lookAhead == source.length)\r", "-\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\tif (source[lookAhead] != NonNLS_TAG[n])\r", "-\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tif (checkNonExternalizedStringLiterals){ // check for presence of\tNLS tags //$NON-NLS-?$ where ? is an int.\r", "+\t\t\t\t\t\tcurrentLineNr = linePtr;\r", "+\t\t\t\t\t\tif (currentLineNr != previousLineNr) {\r", "+\t\t\t\t\t\t\tcurrentLine= new NLSLine(currentLineNr);\r", "+\t\t\t\t\t\t\tlines.add(currentLine);\r", "+\t\t\t\t\t\t\tpreviousLineNr= currentLineNr;\r", "-\t\t\t\t\t\tthis.wasNonExternalizedStringLiteral = (n != NonNLS_TAG.length);\r", "+\t\t\t\t\t\tcurrentLine.add(\r", "+\t\t\t\t\t\t\tnew StringLiteral(\r", "+\t\t\t\t\t\t\t\tgetCurrentTokenSourceString(), \r", "+\t\t\t\t\t\t\t\tstartPosition, \r", "+\t\t\t\t\t\t\t\tcurrentPosition - 1));\r", "-\t\t\t\t\t\t\t\tif (recordLineSeparator\r", "-\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\t\t\t\t\t\t\t\tif (isUnicode) {\r", "-\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();\r", "+\t\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "+\t\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "+\t\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "+\t\t\t\t\t\t\t\t\t\tif (isUnicode) {\r", "+\t\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();\r", "+\t\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\tif (tokenizeComments) {\r", "-\t\t\t\t\t\t\t\t\tcurrentPosition--; // reset one character behind\r", "-\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;\r", "-\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\tif (tokenizeComments) {\r", "+\t\t\t\t\t\t\t\t\t\tcurrentPosition--; // reset one character behind\r", "+\t\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;\r", "+\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tif (recordLineSeparator\r", "-\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "+\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "+\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "+\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\tif (recordLineSeparator\r", "-\t\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "+\t\t\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "+\t\t\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "+\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c223bd858e503cb10d25fab6418d5fa7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public int getNextToken() throws InvalidInputException", "signatureAfterChange": "\r public int getNextToken() throws InvalidInputException", "diff": ["-\t\t\t\t\tif (recordLineSeparator\r", "-\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "+\t\t\t\t\t\tcheckNonExternalizeString();\r", "+\t\t\t\t\t\tif (recordLineSeparator) {\r", "+\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "-\t\t\t\t\tif (checkNonExternalizedStringLiterals){ // check for presence of\t/*nonNLS*/\r", "-\t\t\t\t\t\tint lookAhead = 0;\r", "-\t\t\t\t\t\tfor (; lookAhead < 10; lookAhead++){\r", "-\t\t\t\t\t\t\tif (currentPosition + lookAhead == source.length)\r", "-\t\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t\tif (source[currentPosition + lookAhead] != NonNLS_TAG[lookAhead])\r", "-\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tif (checkNonExternalizedStringLiterals){ // check for presence of\tNLS tags //$NON-NLS-?$ where ? is an int.\r", "+\t\t\t\t\t\tcurrentLineNr = linePtr;\r", "+\t\t\t\t\t\tif (currentLineNr != previousLineNr) {\r", "+\t\t\t\t\t\t\tcurrentLine= new NLSLine(currentLineNr);\r", "+\t\t\t\t\t\t\tlines.add(currentLine);\r", "+\t\t\t\t\t\t\tpreviousLineNr= currentLineNr;\r", "-\t\t\t\t\t\tthis.wasNonExternalizedStringLiteral = lookAhead != 10;\r", "+\t\t\t\t\t\tcurrentLine.add(\r", "+\t\t\t\t\t\t\tnew StringLiteral(\r", "+\t\t\t\t\t\t\t\tgetCurrentTokenSourceString(), \r", "+\t\t\t\t\t\t\t\tstartPosition, \r", "+\t\t\t\t\t\t\t\tcurrentPosition - 1));\r", "-\t\t\t\t\t\t\t\tif (recordLineSeparator\r", "-\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\t\t\t\t\t\t\t\tif (isUnicode) {\r", "-\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();\r", "+\t\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "+\t\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "+\t\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "+\t\t\t\t\t\t\t\t\t\tif (isUnicode) {\r", "+\t\t\t\t\t\t\t\t\t\t\tpushUnicodeLineSeparator();\r", "+\t\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\tif (tokenizeComments) {\r", "-\t\t\t\t\t\t\t\t\tcurrentPosition--; // reset one character behind\r", "-\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;\r", "-\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\tif (tokenizeComments) {\r", "+\t\t\t\t\t\t\t\t\t\tcurrentPosition--; // reset one character behind\r", "+\t\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;\r", "+\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tif (recordLineSeparator\r", "-\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "+\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "+\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "+\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t\tif (recordLineSeparator\r", "-\t\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))\r", "-\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t\tif ((currentCharacter == '\\r') || (currentCharacter == '\\n')) {\r", "+\t\t\t\t\t\t\t\t\t\tcheckNonExternalizeString();\r", "+\t\t\t\t\t\t\t\t\t\tif (recordLineSeparator) {\r", "+\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();\r", "+\t\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\t\tlinePtr++;\r", "+\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\tthrow new InvalidInputException(\"Ctrl-Z\"/*nonNLS*/);\r", "+\t\t\t\t\tthrow new InvalidInputException(\"Ctrl-Z\"); //$NON-NLS-1$\r"]}], "num": 23914}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3fa57417911aca10bf3d01c5f0d1de4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7834d10560405cd93fb0552979524f9f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "c01d4e421a0fa2c650a398bcf3ff121ab0577af6", "commitAfterChange": "42d19dd3705bce900dfc36deb77d97fde99bf108", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tprivate String runFormatter(DefaultCodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length)", "signatureAfterChange": " \t \tprivate String runFormatter(DefaultCodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length, String lineSeparator)", "diff": ["-\tprivate String runFormatter(DefaultCodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length) {", "+\tprivate String runFormatter(DefaultCodeFormatter codeFormatter, String source, int kind, int indentationLevel, int offset, int length, String lineSeparator) {", "-\t\tTextEdit edit = codeFormatter.format(kind, source, offset, length, indentationLevel, null);//$NON-NLS-1$", "+\t\tTextEdit edit = codeFormatter.format(kind, source, offset, length, indentationLevel, lineSeparator);//$NON-NLS-1$", "-\t\t\tedit = codeFormatter.format(kind, result, 0, result.length(), indentationLevel, null);//$NON-NLS-1$", "+\t\t\tedit = codeFormatter.format(kind, result, 0, result.length(), indentationLevel, lineSeparator);//$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1989128663890b21a2e69be889ac2bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "635645f64cc3986d85427716b6b1431b69a73db1", "commitAfterChange": "52bf936fc576c8beae0884d140c2c4a36e852ace", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tprivate void runTest(CodeFormatter codeFormatter, String packageName, String compilationUnitName, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator)", "signatureAfterChange": "  \tprivate void runTest(CodeFormatter codeFormatter, String packageName, String compilationUnitName, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator)", "diff": ["-\t\t\tString s = sourceUnit.getSource();", "-\t\t\tassertNotNull(s);", "+\t\t\tString source = sourceUnit.getSource();", "+\t\t\tassertNotNull(source);", "-\t\t\t\tresult = runFormatter(codeFormatter, s, kind, indentationLevel, offset, s.length(), lineSeparator);", "+\t\t\t\tresult = runFormatter(codeFormatter, source, kind, indentationLevel, offset, source.length(), lineSeparator, true);", "-\t\t\t\tresult = runFormatter(codeFormatter, s, kind, indentationLevel, offset, length, lineSeparator);", "+\t\t\t\tresult = runFormatter(codeFormatter, source, kind, indentationLevel, offset, length, lineSeparator, true);", "-\t\t\tassertLineEquals(result, s, outputUnit.getSource(), checkNull);", "+\t\t\tassertLineEquals(result, source, outputUnit.getSource(), checkNull);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccd3268af3726e01b1aa160c9924e48c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterRegressionTests.java", "commitBeforeChange": "87d4fd7980451e90652820b5860e6399b708ef2c", "commitAfterChange": "913656a5a76e9163d25332c6a9aeee51291ec413", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \tvoid formatSource(String source, String formattedOutput, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator, boolean repeat)", "signatureAfterChange": " \t \tvoid formatSource(String source, String formattedOutput, int kind, int indentationLevel, int offset, int length, String lineSeparator, boolean repeat)", "diff": ["-\tvoid formatSource(String source, String formattedOutput, int kind, int indentationLevel, boolean checkNull, int offset, int length, String lineSeparator, boolean repeat) {", "+\tvoid formatSource(String source, String formattedOutput, int kind, int indentationLevel, int offset, int length, String lineSeparator, boolean repeat) {", "-\t\tassertLineEquals(result, source, formattedOutput);", "+\t\tif (lineSeparator == null) {", "+\t\t\tassertLineEquals(result, source, formattedOutput);", "+\t\t} else {", "+\t\t\t// Do not convert line delimiter while comparing result when a specific one is specified", "+\t\t\tassertNotNull(\"Error(s) occured while formatting\", result);", "+\t\t\tString outputSource = formattedOutput == null ? source : formattedOutput;", "+\t\t\tassertSourceEquals(\"Different number of length\", outputSource, result, false/*do not convert line delimiter*/);", "+\t\t}"]}], "num": 59033}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c7162ed56879bbf0a6db4e8e923f6d68", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37fb2b849eb49d008e49df7e04e2e859", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/FieldInfo.java", "commitBeforeChange": "21d3c1ac784a9ef78a64389e4df817ec0452ce19", "commitAfterChange": "2c4adf2736a9a7ce066a42070aabd3f4b1ddf5af", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static FieldInfo createField(byte classFileBytes[], int offsets[], int offset)", "signatureAfterChange": "  public static FieldInfo createField(byte classFileBytes[], int offsets[], int offset)", "diff": ["-\tAnnotationInfo[] annotations = fieldInfo.readAttributes();", "-\tif (annotations == null)", "-\t\treturn fieldInfo;", "-\treturn new FieldInfoWithAnnotation(fieldInfo, annotations);", "+\t", "+\tint attributesCount = fieldInfo.u2At(6);", "+\tint readOffset = 8;", "+\tAnnotationInfo[] annotations = null;", "+\tTypeAnnotationInfo[] typeAnnotations = null;", "+\tfor (int i = 0; i < attributesCount; i++) {", "+\t\t// check the name of each attribute", "+\t\tint utf8Offset = fieldInfo.constantPoolOffsets[fieldInfo.u2At(readOffset)] - fieldInfo.structOffset;", "+\t\tchar[] attributeName = fieldInfo.utf8At(utf8Offset + 3, fieldInfo.u2At(utf8Offset + 1));", "+\t\tif (attributeName.length > 0) {", "+\t\t\tswitch(attributeName[0]) {", "+\t\t\t\tcase 'S' :", "+\t\t\t\t\tif (CharOperation.equals(AttributeNamesConstants.SignatureName, attributeName))", "+\t\t\t\t\t\tfieldInfo.signatureUtf8Offset = fieldInfo.constantPoolOffsets[fieldInfo.u2At(readOffset + 6)] - fieldInfo.structOffset;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 'R' :", "+\t\t\t\t\tAnnotationInfo[] decodedAnnotations = null;", "+\t\t\t\t\tTypeAnnotationInfo[] decodedTypeAnnotations = null;", "+\t\t\t\t\tif (CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeVisibleAnnotationsName)) {", "+\t\t\t\t\t\tdecodedAnnotations = fieldInfo.decodeAnnotations(readOffset, true);", "+\t\t\t\t\t} else if (CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeInvisibleAnnotationsName)) {", "+\t\t\t\t\t\tdecodedAnnotations = fieldInfo.decodeAnnotations(readOffset, false);", "+\t\t\t\t\t} else if (CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeVisibleTypeAnnotationsName)) {", "+\t\t\t\t\t\tdecodedTypeAnnotations = fieldInfo.decodeTypeAnnotations(readOffset, true);", "+\t\t\t\t\t} else if (CharOperation.equals(attributeName, AttributeNamesConstants.RuntimeInvisibleTypeAnnotationsName)) {", "+\t\t\t\t\t\tdecodedTypeAnnotations = fieldInfo.decodeTypeAnnotations(readOffset, false);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (decodedAnnotations != null) {", "+\t\t\t\t\t\tif (annotations == null) {", "+\t\t\t\t\t\t\tannotations = decodedAnnotations;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint length = annotations.length;", "+\t\t\t\t\t\t\tAnnotationInfo[] combined = new AnnotationInfo[length + decodedAnnotations.length];", "+\t\t\t\t\t\t\tSystem.arraycopy(annotations, 0, combined, 0, length);", "+\t\t\t\t\t\t\tSystem.arraycopy(decodedAnnotations, 0, combined, length, decodedAnnotations.length);", "+\t\t\t\t\t\t\tannotations = combined;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (decodedTypeAnnotations != null) {", "+\t\t\t\t\t\tif (typeAnnotations == null) {", "+\t\t\t\t\t\t\ttypeAnnotations = decodedTypeAnnotations;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint length = typeAnnotations.length;", "+\t\t\t\t\t\t\tTypeAnnotationInfo[] combined = new TypeAnnotationInfo[length + decodedTypeAnnotations.length];", "+\t\t\t\t\t\t\tSystem.arraycopy(typeAnnotations, 0, combined, 0, length);", "+\t\t\t\t\t\t\tSystem.arraycopy(decodedTypeAnnotations, 0, combined, length, decodedTypeAnnotations.length);", "+\t\t\t\t\t\t\ttypeAnnotations = combined;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treadOffset += (6 + fieldInfo.u4At(readOffset + 2));", "+\t}", "+\tfieldInfo.attributeBytes = readOffset;", "+\t", "+\tif (typeAnnotations != null)", "+\t\treturn new FieldInfoWithTypeAnnotation(fieldInfo, annotations, typeAnnotations);", "+\tif (annotations != null)", "+\t\treturn new FieldInfoWithAnnotation(fieldInfo, annotations);", "+\treturn fieldInfo;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dd6987ca4c458977afcd4bb2fd93b7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "38b7a9cf48e2b7b43c2a92fc5bd92474a255d139", "commitAfterChange": "119fb61720952839453ade6e48fab76b7b943cab", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r \tpublic IPackageFragmentRoot[] getBuilderRoots(IResourceDelta delta) throws JavaModelException", "signatureAfterChange": "\r \tpublic IPackageFragmentRoot[] getBuilderRoots(IResourceDelta delta)\r \t\tthrows JavaModelException", "diff": ["-\tpublic IPackageFragmentRoot[] getBuilderRoots(IResourceDelta delta) throws JavaModelException {\r", "-\r", "-\t\tVector accumulatedRoots = new Vector();\t\t\r", "-\t\tcomputeBuilderRoots(false, delta, new Vector(), accumulatedRoots);\r", "-\t\t\r", "-\t\tIPackageFragmentRoot[] result = new IPackageFragmentRoot[accumulatedRoots.size()];\r", "-\t\taccumulatedRoots.copyInto(result);\r", "-\t\treturn result;\r", "-\t}\r", "+\tpublic IPackageFragmentRoot[] getBuilderRoots(IResourceDelta delta)\r", "+\t\tVector builderRoots = new Vector();\r", "+\t\tclasspath = getExpandedClasspath(true);\r", "+\t\t\tswitch (entry.getEntryKind()) {\r", "+\t\t\t\tcase IClasspathEntry.CPE_LIBRARY :\r", "+\t\t\t\t\tIPackageFragmentRoot[] roots = this.getPackageFragmentRoots(entry);\r", "+\t\t\t\t\tif (roots.length > 0)\r", "+\t\t\t\t\t\tbuilderRoots.addElement(roots[0]);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase IClasspathEntry.CPE_PROJECT :\r", "+\t\t\t\t\t// other project contributions are restrained to their binary output\r", "+\t\t\t\t\tres = retrieveResource(entry.getPath(), delta);\r", "+\t\t\t\t\tif (res != null) {\r", "+\t\t\t\t\t\tproject = (IJavaProject) JavaCore.create(res);\r", "+\t\t\t\t\t\tif (project.isOpen()) {\r", "+\t\t\t\t\t\t\tres = retrieveResource(project.getOutputLocation(), delta);\r", "+\t\t\t\t\t\t\tif (res != null) {\r", "+\t\t\t\t\t\t\t\tPackageFragmentRoot root =\r", "+\t\t\t\t\t\t\t\t\t(PackageFragmentRoot) project.getPackageFragmentRoot(res);\r", "+\t\t\t\t\t\t\t\troot.setOccurrenceCount(root.getOccurrenceCount() + 1);\r", "+\t\t\t\t\t\t\t\t((PackageFragmentRootInfo) root.getElementInfo()).setRootKind(\r", "+\t\t\t\t\t\t\t\t\tIPackageFragmentRoot.K_BINARY);\r", "+\t\t\t\t\t\t\t\troot.refreshChildren();\r", "+\t\t\t\t\t\t\t\tbuilderRoots.addElement(root);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase IClasspathEntry.CPE_SOURCE :\r", "+\t\t\t\t\tif (getCorrespondingResource().getFullPath().isPrefixOf(entry.getPath())) {\r", "+\t\t\t\t\t\tres = retrieveResource(entry.getPath(), delta);\r", "+\t\t\t\t\t\tif (res != null)\r", "+\t\t\t\t\t\t\tbuilderRoots.addElement(getPackageFragmentRoot(res));\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tIProject proj = (IProject) getWorkspace().getRoot().findMember(entry.getPath());\r", "+\t\t\t\t\t\tproject = (IJavaProject) JavaCore.create(proj);\r", "+\t\t\t\t\t\tif (proj.isOpen()) {\r", "+\t\t\t\t\t\t\tres = retrieveResource(project.getOutputLocation(), delta);\r", "+\t\t\t\t\t\t\tbuilderRoots.addElement(root);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\tIPackageFragmentRoot[] result = new IPackageFragmentRoot[builderRoots.size()];\r", "+\t\tbuilderRoots.copyInto(result);\r", "+\t\treturn result;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec84943df9a9361e4ea940d3e258e0c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "85a51230859ba76a62ce4d566f4cbd47aac06488", "commitAfterChange": "3885d0327ef37626bb68aa8a0a9e1a4a5bb4ba7a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprivate void disassemble(IClassFileAttribute classFileAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": "  \tprivate void disassemble(IConstantPool constantPool, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["+\tprivate void disassemble(IConstantPool constantPool, StringBuffer buffer, String lineSeparator, int tabNumber) {", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\tint length = constantPool.getConstantPoolCount();", "+\t\tbuffer.append(Util.bind(\"disassembler.constantpoolheader\")); //$NON-NLS-1$", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\tfor (int i = 1; i < length; i++) {", "+\t\t\tIConstantPoolEntry constantPoolEntry = constantPool.decodeEntry(i);", "+\t\t\tswitch (constantPool.getEntryKind(i)) {", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_Class :", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.class\", //$NON-NLS-1$", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\tInteger.toString(constantPoolEntry.getClassInfoNameIndex()),", "+\t\t\t\t\t\t\tnew String(constantPoolEntry.getClassInfoName())})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_Double :", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.double\", //$NON-NLS-1$", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\tDouble.toString(constantPoolEntry.getDoubleValue())})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_Fieldref :", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.fieldref\", //$NON-NLS-1$", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\tInteger.toString(constantPoolEntry.getClassIndex()),", "+\t\t\t\t\t\t\tInteger.toString(constantPoolEntry.getNameAndTypeIndex()),", "+\t\t\t\t\t\t\tnew String(constantPoolEntry.getClassName()),", "+\t\t\t\t\t\t\tgetFieldRefNameAndType(constantPoolEntry)})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_Float :", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.float\", //$NON-NLS-1$", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\tFloat.toString(constantPoolEntry.getFloatValue())})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_Integer :", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.integer\", //$NON-NLS-1$", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\tInteger.toString(constantPoolEntry.getIntegerValue())})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_InterfaceMethodref :", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.interfacemethodref\", //$NON-NLS-1$", "+\t\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\t\tInteger.toString(constantPoolEntry.getClassIndex()),", "+\t\t\t\t\t\t\t\tInteger.toString(constantPoolEntry.getNameAndTypeIndex()),", "+\t\t\t\t\t\t\t\tnew String(constantPoolEntry.getClassName()),", "+\t\t\t\t\t\t\t\tgetMethodRefNameAndType(constantPoolEntry)})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_Long :", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.long\", //$NON-NLS-1$", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\tLong.toString(constantPoolEntry.getLongValue())})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_Methodref :", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.methodref\", //$NON-NLS-1$", "+\t\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\t\tInteger.toString(constantPoolEntry.getClassIndex()),", "+\t\t\t\t\t\t\t\tInteger.toString(constantPoolEntry.getNameAndTypeIndex()),", "+\t\t\t\t\t\t\t\tnew String(constantPoolEntry.getClassName()),", "+\t\t\t\t\t\t\t\tgetMethodRefNameAndType(constantPoolEntry)})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_NameAndType :", "+\t\t\t\t\tint nameIndex = constantPoolEntry.getNameAndTypeInfoNameIndex();", "+\t\t\t\t\tint typeIndex = constantPoolEntry.getNameAndTypeInfoDescriptorIndex();", "+\t\t\t\t\tIConstantPoolEntry entry = constantPool.decodeEntry(nameIndex);", "+\t\t\t\t\tchar[] nameValue = (char[]) entry.getUtf8Value().clone();", "+\t\t\t\t\tentry = constantPool.decodeEntry(typeIndex);", "+\t\t\t\t\tchar[] typeValue = (char[])  entry.getUtf8Value().clone();", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.name_and_type\", //$NON-NLS-1$", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\tInteger.toString(nameIndex),", "+\t\t\t\t\t\t\tInteger.toString(typeIndex),", "+\t\t\t\t\t\t\tString.valueOf(nameValue),", "+\t\t\t\t\t\t\tString.valueOf(typeValue)})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_String :", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.string\", //$NON-NLS-1$", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\tInteger.toString(constantPoolEntry.getStringIndex()),", "+\t\t\t\t\t\t\tconstantPoolEntry.getStringValue()})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_Utf8 :", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.utf8\", //$NON-NLS-1$", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\tnew String(constantPoolEntry.getUtf8Value())})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif (i < length - 1) {", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 70684}
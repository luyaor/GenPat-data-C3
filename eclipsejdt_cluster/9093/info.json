{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ada2df30bc7e969c05186e397184aca", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49daaafe33abd8559c9d125e4b507e05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferencePattern.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r private boolean matches(QualifiedNameReference qNameRef, boolean resolve)", "signatureAfterChange": "\r private int matchLevel(QualifiedNameReference qNameRef, boolean resolve)", "diff": ["- */\r", "-private boolean matches(QualifiedNameReference qNameRef, boolean resolve) {\r", "-\tBinding binding = qNameRef.binding;\r", "-\tif (!resolve || binding == null || !binding.isValidBinding()) {\r", "-\t\tif (this.pkgName != null) {\r", "-\t\t\tswitch (this.matchMode) {\r", "-\t\t\t\tcase EXACT_MATCH:\r", "-\t\t\t\tcase PREFIX_MATCH:\r", "-\t\t\t\t\treturn CharOperation.prefixEquals(this.pkgName, CharOperation.concatWith(qNameRef.tokens, '.'), this.isCaseSensitive);\r", "-\t\t\t\tcase PATTERN_MATCH:\r", "-\t\t\t\t\tchar[] pattern = this.pkgName[this.pkgName.length-1] == '*' ? this.pkgName : CharOperation.concat(this.pkgName, \".*\"/*nonNLS*/.toCharArray());\r", "-\t\t\t\t\treturn CharOperation.match(pattern, CharOperation.concatWith(qNameRef.tokens, '.'), this.isCaseSensitive);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t} else {\r", "-\t\tTypeBinding typeBinding = null;\r", "-\t\tchar[][] tokens = qNameRef.tokens;\r", "-\t\tint lastIndex = tokens.length-1;\r", "-\t\tswitch (qNameRef.bits & Statement.RestrictiveFlagMASK) {\r", "-\t\t\tcase BindingIds.FIELD : // reading a field\r", "-\t\t\t\ttypeBinding = ((FieldBinding)binding).declaringClass;\r", "-\t\t\t\t// no valid match amongst fields\r", "-\t\t\t\tint otherBindingsCount = qNameRef.otherBindings == null ? 0 : qNameRef.otherBindings.length;\t\t\t\r", "-\t\t\t\tlastIndex -= otherBindingsCount + 1;\r", "-\t\t\t\tif (lastIndex < 0) return false;\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase BindingIds.LOCAL : // reading a local variable\r", "-\t\t\t\treturn false; // no package match in it\r", "-\t\t\tcase BindingIds.TYPE : //=============only type ==============\r", "-\t\t\t\ttypeBinding = (TypeBinding)binding;\r", "-\t\t}\r", "-\t\tif (typeBinding instanceof ArrayBinding) {\r", "-\t\t\ttypeBinding = ((ArrayBinding)typeBinding).leafComponentType;\r", "-\t\t}\r", "-\t\tif (typeBinding instanceof ReferenceBinding) {\r", "-\t\t\tPackageBinding pkgBinding = ((ReferenceBinding)typeBinding).fPackage;\r", "-\t\t\treturn this.matches(pkgBinding.compoundName);\r", "-\t\t}\r", "-\t\treturn false;\r", "-\t}\r", "-\treturn true;\r", "-}\r", "+ */\r", "+private int matchLevel(QualifiedNameReference qNameRef, boolean resolve) {\r", "+\tif (!resolve) {\r", "+\t\tif (this.pkgName == null) {\r", "+\t\t\treturn POSSIBLE_MATCH;\r", "+\t\t} else {\r", "+\t\t\tswitch (this.matchMode) {\r", "+\t\t\t\tcase EXACT_MATCH:\r", "+\t\t\t\tcase PREFIX_MATCH:\r", "+\t\t\t\t\tif (CharOperation.prefixEquals(this.pkgName, CharOperation.concatWith(qNameRef.tokens, '.'), this.isCaseSensitive)) {\r", "+\t\t\t\t\t\treturn POSSIBLE_MATCH;\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t\t\t}\r", "+\t\t\t\tcase PATTERN_MATCH:\r", "+\t\t\t\t\tchar[] pattern = this.pkgName[this.pkgName.length-1] == '*' ? this.pkgName : CharOperation.concat(this.pkgName, \".*\".toCharArray()); //$NON-NLS-1$\r", "+\t\t\t\t\tif (CharOperation.match(pattern, CharOperation.concatWith(qNameRef.tokens, '.'), this.isCaseSensitive)) {\r", "+\t\t\t\t\t\treturn POSSIBLE_MATCH;\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t\t\t}\r", "+\t\t\t\tdefault:\r", "+\t\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t} else {\r", "+\t\tBinding binding = qNameRef.binding;\r", "+\t\tif (binding == null) {\r", "+\t\t\treturn INACCURATE_MATCH;\r", "+\t\t} else {\r", "+\t\t\tTypeBinding typeBinding = null;\r", "+\t\t\tchar[][] tokens = qNameRef.tokens;\r", "+\t\t\tint lastIndex = tokens.length-1;\r", "+\t\t\tswitch (qNameRef.bits & Statement.RestrictiveFlagMASK) {\r", "+\t\t\t\tcase BindingIds.FIELD : // reading a field\r", "+\t\t\t\t\ttypeBinding = ((FieldBinding)binding).declaringClass;\r", "+\t\t\t\t\t// no valid match amongst fields\r", "+\t\t\t\t\tint otherBindingsCount = qNameRef.otherBindings == null ? 0 : qNameRef.otherBindings.length;\t\t\t\r", "+\t\t\t\t\tlastIndex -= otherBindingsCount + 1;\r", "+\t\t\t\t\tif (lastIndex < 0) return IMPOSSIBLE_MATCH;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase BindingIds.LOCAL : // reading a local variable\r", "+\t\t\t\t\treturn IMPOSSIBLE_MATCH; // no package match in it\r", "+\t\t\t\tcase BindingIds.TYPE : //=============only type ==============\r", "+\t\t\t\t\ttypeBinding = (TypeBinding)binding;\r", "+\t\t\t}\r", "+\t\t\tif (typeBinding instanceof ArrayBinding) {\r", "+\t\t\t\ttypeBinding = ((ArrayBinding)typeBinding).leafComponentType;\r", "+\t\t\t}\r", "+\t\t\tif (typeBinding == null) {\r", "+\t\t\t\treturn INACCURATE_MATCH;\r", "+\t\t\t} else {\r", "+\t\t\t\tif (typeBinding instanceof ReferenceBinding) {\r", "+\t\t\t\t\tPackageBinding pkgBinding = ((ReferenceBinding)typeBinding).fPackage;\r", "+\t\t\t\t\tif (pkgBinding == null) {\r", "+\t\t\t\t\t\treturn INACCURATE_MATCH;\r", "+\t\t\t\t\t} else if (this.matches(pkgBinding.compoundName)) {\r", "+\t\t\t\t\t\treturn ACCURATE_MATCH;\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a7cfde8f93d1866de39522b60276f27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferencePattern.java", "commitBeforeChange": "60e138d2828b37f2615e0cced57acea3adb47644", "commitAfterChange": "3c340a30d5ee47c28968789969de0fd1189f5b30", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r private boolean matches(QualifiedNameReference qNameRef, boolean resolve)", "signatureAfterChange": "\r private int matchLevel(QualifiedNameReference qNameRef, boolean resolve)", "diff": ["- */\r", "-private boolean matches(QualifiedNameReference qNameRef, boolean resolve) {\r", "-\tBinding binding = qNameRef.binding;\r", "-\tif (!resolve || binding == null || !binding.isValidBinding()) {\r", "-\t\tif (this.pkgName != null) {\r", "-\t\t\tswitch (this.matchMode) {\r", "-\t\t\t\tcase EXACT_MATCH:\r", "-\t\t\t\tcase PREFIX_MATCH:\r", "-\t\t\t\t\treturn CharOperation.prefixEquals(this.pkgName, CharOperation.concatWith(qNameRef.tokens, '.'), this.isCaseSensitive);\r", "-\t\t\t\tcase PATTERN_MATCH:\r", "-\t\t\t\t\tchar[] pattern = this.pkgName[this.pkgName.length-1] == '*' ? this.pkgName : CharOperation.concat(this.pkgName, \".*\"/*nonNLS*/.toCharArray());\r", "-\t\t\t\t\treturn CharOperation.match(pattern, CharOperation.concatWith(qNameRef.tokens, '.'), this.isCaseSensitive);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t} else {\r", "-\t\tTypeBinding typeBinding = null;\r", "-\t\tchar[][] tokens = qNameRef.tokens;\r", "-\t\tint lastIndex = tokens.length-1;\r", "-\t\tswitch (qNameRef.bits & Statement.RestrictiveFlagMASK) {\r", "-\t\t\tcase BindingIds.FIELD : // reading a field\r", "-\t\t\t\ttypeBinding = ((FieldBinding)binding).declaringClass;\r", "-\t\t\t\t// no valid match amongst fields\r", "-\t\t\t\tint otherBindingsCount = qNameRef.otherBindings == null ? 0 : qNameRef.otherBindings.length;\t\t\t\r", "-\t\t\t\tlastIndex -= otherBindingsCount + 1;\r", "-\t\t\t\tif (lastIndex < 0) return false;\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase BindingIds.LOCAL : // reading a local variable\r", "-\t\t\t\treturn false; // no package match in it\r", "-\t\t\tcase BindingIds.TYPE : //=============only type ==============\r", "-\t\t\t\ttypeBinding = (TypeBinding)binding;\r", "-\t\t}\r", "-\t\tif (typeBinding instanceof ArrayBinding) {\r", "-\t\t\ttypeBinding = ((ArrayBinding)typeBinding).leafComponentType;\r", "-\t\t}\r", "-\t\tif (typeBinding instanceof ReferenceBinding) {\r", "-\t\t\tPackageBinding pkgBinding = ((ReferenceBinding)typeBinding).fPackage;\r", "-\t\t\treturn this.matches(pkgBinding.compoundName);\r", "-\t\t}\r", "-\t\treturn false;\r", "-\t}\r", "-\treturn true;\r", "-}\r", "+ */\r", "+private int matchLevel(QualifiedNameReference qNameRef, boolean resolve) {\r", "+\tif (!resolve) {\r", "+\t\tif (this.pkgName == null) {\r", "+\t\t\treturn POSSIBLE_MATCH;\r", "+\t\t} else {\r", "+\t\t\tswitch (this.matchMode) {\r", "+\t\t\t\tcase EXACT_MATCH:\r", "+\t\t\t\tcase PREFIX_MATCH:\r", "+\t\t\t\t\tif (CharOperation.prefixEquals(this.pkgName, CharOperation.concatWith(qNameRef.tokens, '.'), this.isCaseSensitive)) {\r", "+\t\t\t\t\t\treturn POSSIBLE_MATCH;\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t\t\t}\r", "+\t\t\t\tcase PATTERN_MATCH:\r", "+\t\t\t\t\tchar[] pattern = this.pkgName[this.pkgName.length-1] == '*' ? this.pkgName : CharOperation.concat(this.pkgName, \".*\"/*nonNLS*/.toCharArray());\r", "+\t\t\t\t\tif (CharOperation.match(pattern, CharOperation.concatWith(qNameRef.tokens, '.'), this.isCaseSensitive)) {\r", "+\t\t\t\t\t\treturn POSSIBLE_MATCH;\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t\t\t}\r", "+\t\t\t\tdefault:\r", "+\t\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t} else {\r", "+\t\tBinding binding = qNameRef.binding;\r", "+\t\tif (binding == null) {\r", "+\t\t\treturn INACCURATE_MATCH;\r", "+\t\t} else {\r", "+\t\t\tTypeBinding typeBinding = null;\r", "+\t\t\tchar[][] tokens = qNameRef.tokens;\r", "+\t\t\tint lastIndex = tokens.length-1;\r", "+\t\t\tswitch (qNameRef.bits & Statement.RestrictiveFlagMASK) {\r", "+\t\t\t\tcase BindingIds.FIELD : // reading a field\r", "+\t\t\t\t\ttypeBinding = ((FieldBinding)binding).declaringClass;\r", "+\t\t\t\t\t// no valid match amongst fields\r", "+\t\t\t\t\tint otherBindingsCount = qNameRef.otherBindings == null ? 0 : qNameRef.otherBindings.length;\t\t\t\r", "+\t\t\t\t\tlastIndex -= otherBindingsCount + 1;\r", "+\t\t\t\t\tif (lastIndex < 0) return IMPOSSIBLE_MATCH;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase BindingIds.LOCAL : // reading a local variable\r", "+\t\t\t\t\treturn IMPOSSIBLE_MATCH; // no package match in it\r", "+\t\t\t\tcase BindingIds.TYPE : //=============only type ==============\r", "+\t\t\t\t\ttypeBinding = (TypeBinding)binding;\r", "+\t\t\t}\r", "+\t\t\tif (typeBinding instanceof ArrayBinding) {\r", "+\t\t\t\ttypeBinding = ((ArrayBinding)typeBinding).leafComponentType;\r", "+\t\t\t}\r", "+\t\t\tif (typeBinding == null) {\r", "+\t\t\t\treturn INACCURATE_MATCH;\r", "+\t\t\t} else {\r", "+\t\t\t\tif (typeBinding instanceof ReferenceBinding) {\r", "+\t\t\t\t\tPackageBinding pkgBinding = ((ReferenceBinding)typeBinding).fPackage;\r", "+\t\t\t\t\tif (pkgBinding == null) {\r", "+\t\t\t\t\t\treturn INACCURATE_MATCH;\r", "+\t\t\t\t\t} else if (this.matches(pkgBinding.compoundName)) {\r", "+\t\t\t\t\t\treturn ACCURATE_MATCH;\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+}\r"]}], "num": 9093}
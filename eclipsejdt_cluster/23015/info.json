{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d4bb6b303a5dc321e2f24301cc137bc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ef7b55051d92af02b243abeefd2cc6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingExpressionsTest.java", "commitBeforeChange": "eed1a08cebbf98096012b816207df007b92ad038", "commitAfterChange": "b9d41d0ed4ae01b16e3d13e30399d50f0163af83", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void testInstanceofExpression() throws Exception", "signatureAfterChange": " \tpublic void testInstanceofExpression() throws Exception", "diff": ["+\t\tbuf.append(\"        goo(k()instanceof Vector);\\n\");", "-\t\tassertTrue(\"Number of statements not 1\", statements.size() == 1);", "+\t\tassertTrue(\"Number of statements not 2\", statements.size() == 2);", "+\t\t{ // change left side", "+\t\t\tExpressionStatement stmt= (ExpressionStatement) statements.get(1);", "+\t\t\tMethodInvocation invocation= (MethodInvocation) stmt.getExpression();", "+\t\t\t", "+\t\t\tList arguments= invocation.arguments();", "+\t\t\tInstanceofExpression expr= (InstanceofExpression) arguments.get(0);", "+\t\t\t", "+\t\t\tSimpleName name= ast.newSimpleName(\"x\");", "+\t\t\trewrite.replace(expr.getLeftOperand(), name, null);", "+\t\t}", "+\t\tbuf.append(\"        goo(x instanceof Vector);\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49132b7563c66d463a81ee9d51bc0c58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingExpressionsTest.java", "commitBeforeChange": "d0f6b932bd2521f678bde4cdb96cb1190442e2f1", "commitAfterChange": "84bbf5d10f91b2c7f38d4b1250126f235793a08e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t \tpublic void testClassInstanceCreation2() throws Exception", "signatureAfterChange": " \t \tpublic void testClassInstanceCreation2() throws Exception", "diff": ["+\t\tbuf.append(\"        new<A>Inner();\\n\");", "-\t\tassertTrue(\"Number of statements not 3\", statements.size() == 3);", "+\t\tassertTrue(\"Number of statements not 3\", statements.size() == 4);", "-\t\t", "-\t\t{ // add type argument to existing", "+\t\t{ // remove type argument", "+\t\t\tClassInstanceCreation creation= (ClassInstanceCreation) stmt.getExpression();", "+", "+\t\t\tList typeArgs= creation.typeArguments();", "+\t\t\trewrite.remove((ASTNode) typeArgs.get(0), null);", "+\t\t}", "+\t\t{ // add type argument to existing", "+\t\t\tExpressionStatement stmt= (ExpressionStatement) statements.get(3);", "+\t\tbuf.append(\"        new Inner();\\n\");"]}], "num": 23015}
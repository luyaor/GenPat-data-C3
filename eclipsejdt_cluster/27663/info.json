{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e93b10bfbcec9966d9fddfcbff9dc113", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ef2ca17ec8e128268d8dc8644636520", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatJavadocText.java", "commitBeforeChange": "00cabdb6b90ee48364f71e75a5da5edca1e7837c", "commitAfterChange": "fcccc4dd1377e549112e0bdc9a74b0eb625c6ab2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public String toString()", "signatureAfterChange": "  protected void toString(StringBuffer buffer)", "diff": ["- */", "-public String toString() {", "-\tStringBuffer buffer = new StringBuffer();", "-\tbuffer.append(\"\t\").append(\"[FJText] - at offset: \" + this.sourceStart).append(\" end position: \" + this.sourceEnd).append('\\n'); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\tbuffer.append(\"\t\").append(this.separatorsPtr+1).append(\" text sections, \"); //$NON-NLS-1$ //$NON-NLS-2$", "-\tbuffer.append(\"\t\").append(this.htmlNodesPtr+1).append(\" html tags.\\n\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\tbuffer.append(\"\t\").append(\"depth=\").append(this.depth) //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t.append(\", lines before=\").append(this.linesBefore) //$NON-NLS-1$", "-\t\t.append(\", htmlTagIndex=\").append(this.htmlTagIndex) //$NON-NLS-1$", "-\t\t.append('\\n');", "-\treturn buffer.toString();", "+protected void toString(StringBuffer buffer) {", "+\tStringBuffer indentation = new StringBuffer();", "+\tfor (int t=0; t<=this.depth; t++) indentation.append('\\t');", "+\tbuffer.append(indentation);", "+\tbuffer.append(\"text\"); //$NON-NLS-1$", "+\tsuper.toString(buffer);", "+\tbuffer.append(\" (\"); //$NON-NLS-1$", "+\tbuffer.append(this.separatorsPtr+1).append(\" sections, \"); //$NON-NLS-1$", "+\tbuffer.append(this.htmlNodesPtr+1).append(\" html tags, \"); //$NON-NLS-1$", "+\tbuffer.append(this.depth).append(\" depth, \"); //$NON-NLS-1$", "+\tbuffer.append(this.linesBefore).append(\" before, \"); //$NON-NLS-1$", "+\tbuffer.append(this.htmlTagIndex).append(\" tag index)\"); //$NON-NLS-1$", "+\tbuffer.append('\\n');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3be7b8f97fb6d053e0a20b0f23ca6477", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "e6d78cda375a26ce6fdb882d62ed50fe3c6a25b5", "commitAfterChange": "8aee5680d034dfec291b1e7b2abb4d9d081e8e31", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 103, "signatureBeforeChange": " public void testBug36032b() throws CoreException", "signatureAfterChange": " public void testBug36032b() throws CoreException, InterruptedException", "diff": ["-public void testBug36032b() throws CoreException {", "+public void testBug36032b() throws CoreException, InterruptedException {", "+\t\t// Resources creation", "+\t\t", "+\t\t// Get compilation unit and reconcile it", "+\t\tchar[] sourceChars = source.toCharArray();", "+\t\tthis.problemRequestor.initialize(sourceChars);", "-\t\tthis.problemRequestor.initialize(source.toCharArray());", "-\t\tif (this.problemRequestor.problemCount > 0) {", "-\t\t\tassertEquals(\"Working copy should NOT have any problem!\", \"\", this.problemRequestor.problems.toString());", "-\t\t}", "+\t\tassertNoProblem(sourceChars);", "+\t\tthis.problemRequestor.initialize(source.toCharArray());", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\tthis.problemRequestor.initialize(source.toCharArray());", "+\t\tsourceChars = source.toCharArray();", "+\t\tthis.problemRequestor.initialize(sourceChars);", "-\t\tif (this.problemRequestor.problemCount > 0) {", "-\t\t\tassertEquals(\"Working copy should NOT have any problem!\", \"\", this.problemRequestor.problems.toString());", "-\t\t}", "+\t\tassertNoProblem(sourceChars);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ca67c0a74b651315659cdd38bf0553a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "e6d78cda375a26ce6fdb882d62ed50fe3c6a25b5", "commitAfterChange": "8aee5680d034dfec291b1e7b2abb4d9d081e8e31", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 102, "signatureBeforeChange": " public void testBug36032a() throws CoreException", "signatureAfterChange": " public void testBug36032a() throws CoreException, InterruptedException", "diff": ["-public void testBug36032a() throws CoreException {", "+public void testBug36032a() throws CoreException, InterruptedException {", "+\t\t// Resources creation", "+\t\t", "+\t\t// Get compilation unit and reconcile it", "+\t\tchar[] sourceChars = source.toCharArray();", "+\t\tthis.problemRequestor.initialize(sourceChars);", "-\t\tthis.problemRequestor.initialize(source.toCharArray());", "-\t\tif (this.problemRequestor.problemCount > 0) {", "-\t\t\tassertEquals(\"Working copy should NOT have any problem!\", \"\", this.problemRequestor.problems.toString());", "-\t\t}", "+\t\tassertNoProblem(sourceChars);", "-\t\twaitUntilIndexesReady();", "-\t\tthis.problemRequestor.initialize(source.toCharArray());", "+\t\t", "+\t\t// Reconcile with modified source", "+\t\tsourceChars = source.toCharArray();", "+\t\tthis.problemRequestor.initialize(sourceChars);", "-\t\tif (this.problemRequestor.problemCount > 0) {", "-\t\t\tassertEquals(\"Working copy should NOT have any problem!\", \"\", this.problemRequestor.problems.toString());", "-\t\t}", "+\t\tassertNoProblem(sourceChars);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1f92c97d273dd0c5d09ee102236b953", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "6d8d09b9885a9c8ffeca138d74d5612474463476", "commitAfterChange": "882b15cdf57237ee1b4c7b7c42c6578750f8d6cc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic Element elementEncode( \t\tDocument document, \t\tIPath projectPath)", "signatureAfterChange": " \tpublic void elementEncode(XMLWriter writer, IPath projectPath, boolean indent, boolean newLine)", "diff": ["-\t *///TODO (olivier) should remove", "-\tpublic Element elementEncode(", "-\t\tDocument document,", "-\t\tIPath projectPath) {", "-", "-\t\tElement element = document.createElement(\"classpathentry\"); //$NON-NLS-1$", "-\t\telement.setAttribute(\"kind\", kindToString(this.entryKind));\t//$NON-NLS-1$", "-\t\tIPath xmlPath = this.path;", "-\t\tif (this.entryKind != IClasspathEntry.CPE_VARIABLE && this.entryKind != IClasspathEntry.CPE_CONTAINER) {", "-\t\t\t// translate to project relative from absolute (unless a device path)", "-\t\t\tif (xmlPath.isAbsolute()) {", "-\t\t\t\tif (projectPath != null && projectPath.isPrefixOf(xmlPath)) {", "-\t\t\t\t\tif (xmlPath.segment(0).equals(projectPath.segment(0))) {", "-\t\t\t\t\t\txmlPath = xmlPath.removeFirstSegments(1);", "-\t\t\t\t\t\txmlPath = xmlPath.makeRelative();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\txmlPath = xmlPath.makeAbsolute();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\telement.setAttribute(\"path\", xmlPath.toString()); //$NON-NLS-1$", "-\t\t", "-\t\tif (this.sourceAttachmentPath != null) {", "-\t\t\txmlPath = this.sourceAttachmentPath;", "-\t\t\t// translate to project relative from absolute ", "-\t\t\tif (this.entryKind != IClasspathEntry.CPE_VARIABLE && projectPath != null && projectPath.isPrefixOf(xmlPath)) {", "-\t\t\t\tif (xmlPath.segment(0).equals(projectPath.segment(0))) {", "-\t\t\t\t\txmlPath = xmlPath.removeFirstSegments(1);", "-\t\t\t\t\txmlPath = xmlPath.makeRelative();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telement.setAttribute(\"sourcepath\", xmlPath.toString()); //$NON-NLS-1$", "-\t\t}", "-\t\tif (this.sourceAttachmentRootPath != null) {", "-\t\t\telement.setAttribute(\"rootpath\", this.sourceAttachmentRootPath.toString()); //$NON-NLS-1$", "-\t\t}", "-\t\tif (this.isExported) {", "-\t\t\telement.setAttribute(\"exported\", \"true\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t}", "-\t\t", "-\t\tif (this.exclusionPatterns.length > 0) {", "-\t\t\tStringBuffer excludeRule = new StringBuffer(10);", "-\t\t\tfor (int i = 0, max = this.exclusionPatterns.length; i < max; i++){", "-\t\t\t\tif (i > 0) excludeRule.append('|');", "-\t\t\t\texcludeRule.append(this.exclusionPatterns[i]);", "-\t\t\t}", "-\t\t\telement.setAttribute(\"excluding\", excludeRule.toString());  //$NON-NLS-1$", "-\t\t}", "-\t\t", "-\t\tif (this.specificOutputLocation != null) {", "-\t\t\tIPath outputLocation = this.specificOutputLocation.removeFirstSegments(1);", "-\t\t\toutputLocation = outputLocation.makeRelative();", "-\t\t\telement.setAttribute(\"output\", outputLocation.toString()); //$NON-NLS-1$ ", "-\t\t}", "-\t\treturn element;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3fa1643f71b7d0a095975db9ea05532", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void decodeIndexKey(char[] key)", "signatureAfterChange": " public void decodeIndexKey(char[] key)", "diff": ["-\tint slash = -1;", "-\tthis.superSimpleName = CharOperation.subarray(key, slash + 1, slash = CharOperation.indexOf(SEPARATOR, key, slash + 1));", "-\tint oldSlash = slash;", "-\tslash = CharOperation.indexOf(SEPARATOR, key, slash + 1);", "-\tthis.superQualification = (slash == oldSlash + 1)", "-\t\t? null // could not have been known at index time", "-\t\t: CharOperation.subarray(key, oldSlash + 1, slash);", "-\tthis.superClassOrInterface = key[slash + 1];", "-\tslash += 2;", "-\tthis.simpleName = CharOperation.subarray(key, slash + 1, slash = CharOperation.indexOf(SEPARATOR, key, slash + 1));", "-\toldSlash = slash;", "-\tslash = CharOperation.indexOf(SEPARATOR, key, slash + 1);", "-\tif (slash == oldSlash + 1) { // could not have been known at index time", "+\tint slash = CharOperation.indexOf(SEPARATOR, key, 0);", "+\tthis.superSimpleName = CharOperation.subarray(key, 0, slash);", "+", "+\t// some values may not have been know when indexed so decode as null", "+\tint start = slash + 1;", "+\tslash = CharOperation.indexOf(SEPARATOR, key, start);", "+\tthis.superQualification = slash == start ? null : CharOperation.subarray(key, start, slash);", "+", "+\tslash = CharOperation.indexOf(SEPARATOR, key, start = slash + 1);", "+\tthis.simpleName = CharOperation.subarray(key, start, slash);", "+", "+\tslash = CharOperation.indexOf(SEPARATOR, key, start = slash + 1);", "+\tif (slash == start) {", "-\t\tthis.enclosingTypeName = (slash == oldSlash + 2 && key[oldSlash + 1] == ONE_ZERO[0])", "-\t\t\t? ONE_ZERO", "-\t\t\t: CharOperation.subarray(key, oldSlash + 1, slash);", "+\t\tchar[] names = CharOperation.subarray(key, start, slash);", "+\t\tthis.enclosingTypeName = CharOperation.equals(ONE_ZERO, names) ? ONE_ZERO : names;", "-\toldSlash = slash;", "-\tslash = CharOperation.indexOf(SEPARATOR, key, slash + 1);", "-\tthis.pkgName = (slash == oldSlash + 1)", "-\t\t? null // could not have been known at index time", "-\t\t: CharOperation.subarray(key, oldSlash + 1, slash);", "+", "+\tslash = CharOperation.indexOf(SEPARATOR, key, start = slash + 1);", "+\tthis.pkgName = slash == start ? null : CharOperation.subarray(key, start, slash);", "+", "+\tthis.superClassOrInterface = key[slash + 1];", "-}"]}], "num": 27663}
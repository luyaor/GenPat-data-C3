{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca9460f9c1d689847413cf45fef1d68b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "267f43ee7fa6f1638a7cbda697a14f16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "605cc5dd745b7e1d6935bfc34c1be6fcea51b4ab", "commitAfterChange": "03be42bb9ac6b223bea20e29a7b3f31a76dae9e4", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " protected void reportMatching(Annotation[] annotations, IJavaElement enclosingElement, IJavaElement[] otherElements, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedContainer, boolean enclosesElement) throws CoreException", "signatureAfterChange": " protected void reportMatching(Annotation[] annotations, IJavaElement enclosingElement, IJavaElement[] otherElements, Binding elementBinding, MatchingNodeSet nodeSet, boolean matchedContainer, boolean enclosesElement) throws CoreException", "diff": ["-\t\tIJavaElement localElement = null;", "+\t\tIJavaElement localAnnotation = null;", "+\t\tIJavaElement[] otherAnnotations = null;", "+\t\tint length = otherElements == null ? 0 : otherElements.length;", "+\t\tboolean handlesCreated = false;", "-\t\t\tlocalElement = createHandle(annotationType, (IAnnotatable) enclosingElement);", "-\t\t\tthis.patternLocator.matchReportReference(typeRef, enclosingElement, localElement, otherElements, elementBinding, level.intValue(), this);", "+\t\t\tlocalAnnotation = createHandle(annotationType, (IAnnotatable) enclosingElement);", "+\t\t\tif (length > 0) {", "+\t\t\t\totherAnnotations = new IJavaElement[length];", "+\t\t\t\tfor (int o=0; o<length; o++) {", "+\t\t\t\t\totherAnnotations[o] = createHandle(annotationType, (IAnnotatable) otherElements[o]);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\thandlesCreated = true;", "+\t\t\tthis.patternLocator.matchReportReference(typeRef, enclosingElement, localAnnotation, otherAnnotations, elementBinding, level.intValue(), this);", "-\t\t\t\tif (localElement == null) {", "-\t\t\t\t\tlocalElement = createHandle(annotationType, (IAnnotatable) enclosingElement);", "+\t\t\t\tif (!handlesCreated) {", "+\t\t\t\t\tlocalAnnotation = createHandle(annotationType, (IAnnotatable) enclosingElement);", "+\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\totherAnnotations = new IJavaElement[length];", "+\t\t\t\t\t\tfor (int o=0; o<length; o++) {", "+\t\t\t\t\t\t\totherAnnotations[o] = createHandle(annotationType, (IAnnotatable) otherElements[o]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\thandlesCreated = true;", "-\t\t\t\tthis.patternLocator.matchReportReference(reference, enclosingElement, localElement, otherElements, pair.binding, level.intValue(), this);", "+\t\t\t\tthis.patternLocator.matchReportReference(reference, enclosingElement, localAnnotation, otherAnnotations, pair.binding, level.intValue(), this);", "-\t\t\t\t\t\tif (localElement == null) {", "-\t\t\t\t\t\t\tlocalElement = createHandle(annotationType, (IAnnotatable) enclosingElement);", "+\t\t\t\t\t\tif (!handlesCreated) {", "+\t\t\t\t\t\t\tlocalAnnotation = createHandle(annotationType, (IAnnotatable) enclosingElement);", "+\t\t\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\t\t\totherAnnotations = new IJavaElement[length];", "+\t\t\t\t\t\t\t\tfor (int o=0; o<length; o++) {", "+\t\t\t\t\t\t\t\t\totherAnnotations[o] = createHandle(annotationType, (IAnnotatable) otherElements[o]);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\thandlesCreated = true;", "-\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, localElement, otherElements, elementBinding, level.intValue(), this);", "+\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, localAnnotation, otherAnnotations, elementBinding, level.intValue(), this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a8fb9f00d5c90241a5b8ae29f82a54d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "commitAfterChange": "495498c492866181dc63a6039b81ee18c37f454c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public char[] computeUniqueKey(boolean isLeaf)", "signatureAfterChange": " public char[] computeUniqueKey(boolean isLeaf)", "diff": ["-\tif (sig == null) sig = signature();", "+\tboolean isGeneric = sig != null;", "+\tif (!isGeneric) sig = signature();", "-\tchar[] uniqueKey = new char[declaringLength + 1 + selectorLength + signatureLength];", "+\t// thrown exceptions", "+\tint thrownExceptionsLength = this.thrownExceptions.length;", "+\tint thrownExceptionsSignatureLength = 0;", "+\tchar[][] thrownExceptionsSignatures = null;", "+\tboolean addThrownExceptions = thrownExceptionsLength > 0 && (!isGeneric || CharOperation.lastIndexOf('^', sig) < 0);", "+\tif (addThrownExceptions) {", "+\t\tthrownExceptionsSignatures = new char[thrownExceptionsLength][];", "+\t\tfor (int i = 0; i < thrownExceptionsLength; i++) {", "+\t\t\tif (this.thrownExceptions[i] != null) {", "+\t\t\t\tthrownExceptionsSignatures[i] = this.thrownExceptions[i].signature();", "+\t\t\t\tthrownExceptionsSignatureLength += thrownExceptionsSignatures[i].length + 1;\t// add one char for separator", "+\t\t\t}", "+\t\t}", "+\t}", "+\t", "+\tchar[] uniqueKey = new char[declaringLength + 1 + selectorLength + signatureLength + thrownExceptionsSignatureLength];", "-\t//index += signatureLength;", "+\tif (thrownExceptionsSignatureLength > 0) {", "+\t\tindex += signatureLength;", "+\t\tfor (int i = 0; i < thrownExceptionsLength; i++) {", "+\t\t\tchar[] thrownExceptionSignature = thrownExceptionsSignatures[i];", "+\t\t\tif (thrownExceptionSignature != null) {", "+\t\t\t\tuniqueKey[index++] = '|';", "+\t\t\t\tint length = thrownExceptionSignature.length;", "+\t\t\t\tSystem.arraycopy(thrownExceptionSignature, 0, uniqueKey, index, length);", "+\t\t\t\tindex += length;", "+\t\t\t}", "+\t\t}", "+\t}", "+"]}], "num": 67313}
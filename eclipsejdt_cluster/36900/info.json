{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "315aa9ed471e09d30991cc48a73b30c7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a04fc1b8cba8f4b0f8dcae0f6167130", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "bac18f086dd9a87e1d5b6dea3b31ca1c92463a84", "commitAfterChange": "1b53a525120894192853120c7678edb264d25490", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \t \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\tthis.binding = currentScope.enclosingSourceType().addSyntheticMethod(this);", "+\t\tif (this.shouldCaptureInstance) {", "+\t\t\tthis.binding.modifiers &= ~ClassFileConstants.AccStatic;", "+\t\t} else {", "+\t\t\tthis.binding.modifiers |= ClassFileConstants.AccStatic;", "+\t\t}", "+\t\tSourceTypeBinding sourceType = currentScope.enclosingSourceType();", "+\t\tthis.binding = sourceType.addSyntheticMethod(this);", "+\t\tif (this.shouldCaptureInstance) {", "+\t\t\tcodeStream.aload_0();", "+\t\t\tsignature.append(sourceType.signature());", "+\t\t}", "-\t\t\tsignature.append(this.outerLocalVariables[i].type.signature());", "-\t\t\tLocalVariableBinding capturedOuterLocal = this.outerLocalVariables[i].actualOuterLocalVariable;", "+\t\t\tSyntheticArgumentBinding syntheticArgument = this.outerLocalVariables[i];", "+\t\t\tif (this.shouldCaptureInstance) {", "+\t\t\t\tsyntheticArgument.resolvedPosition++;", "+\t\t\t}", "+\t\t\tsignature.append(syntheticArgument.type.signature());", "+\t\t\tLocalVariableBinding capturedOuterLocal = syntheticArgument.actualOuterLocalVariable;", "-\t\tcodeStream.invokeDynamic(invokeDynamicNumber, this.outerLocalVariablesSlotSize, 1, TypeConstants.ANONYMOUS_METHOD, signature.toString().toCharArray());", "+\t\tcodeStream.invokeDynamic(invokeDynamicNumber, (this.shouldCaptureInstance ? 1 : 0) + this.outerLocalVariablesSlotSize, 1, TypeConstants.ANONYMOUS_METHOD, signature.toString().toCharArray());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc82acab8679bb93a0c566673d629c69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tboolean valueRequired)", "signatureAfterChange": " \t \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tboolean valueRequired)", "diff": ["-\t\t\t\t// check if reading a final blank field", "-\t\t\t\tFieldBinding fieldBinding;", "-\t\t\t\t\tif ((fieldBinding = (FieldBinding) binding).isBlankFinal()", "-\t\t\t\t\t\t&& (indexOfFirstFieldBinding == 1)", "-\t\t\t\t\t// was an implicit reference to the first field binding", "-\t\t\t\t\t\t&& currentScope.allowBlankFinalFieldAssignment(fieldBinding)", "-\t\t\t\t\t\t&& (!flowInfo.isDefinitelyAssigned(fieldBinding))) {", "-\t\t\t\t\tcurrentScope.problemReporter().uninitializedBlankFinalField(fieldBinding, this);", "+\t\t\t\tif (this.indexOfFirstFieldBinding == 1) { // was an implicit reference to the first field binding", "+\t\t\t\t\tFieldBinding fieldBinding = (FieldBinding) binding;", "+\t\t\t\t\tReferenceBinding declaringClass = fieldBinding.declaringClass;", "+\t\t\t\t\t// check if accessing enum static field in initializer\t\t\t\t\t", "+\t\t\t\t\tif (declaringClass.isEnum()) {", "+\t\t\t\t\t\tMethodScope methodScope = currentScope.methodScope();", "+\t\t\t\t\t\tSourceTypeBinding sourceType = methodScope.enclosingSourceType();", "+\t\t\t\t\t\tif (fieldBinding.isStatic()", "+\t\t\t\t\t\t\t\t&& (sourceType == declaringClass || sourceType.superclass == declaringClass) // enum constant body", "+\t\t\t\t\t\t\t\t&& fieldBinding.constant() == NotAConstant", "+\t\t\t\t\t\t\t\t&& !methodScope.isStatic", "+\t\t\t\t\t\t\t\t&& methodScope.isInsideInitializerOrConstructor()) {", "+\t\t\t\t\t\t\tcurrentScope.problemReporter().enumStaticFieldUsedDuringInitialization(fieldBinding, this);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}\t\t\t\t", "+\t\t\t\t\t// check if reading a final blank field", "+\t\t\t\t\tif (fieldBinding.isBlankFinal()", "+\t\t\t\t\t\t\t&& currentScope.allowBlankFinalFieldAssignment(fieldBinding)", "+\t\t\t\t\t\t\t&& !flowInfo.isDefinitelyAssigned(fieldBinding)) {", "+\t\t\t\t\t\tcurrentScope.problemReporter().uninitializedBlankFinalField(fieldBinding, this);", "+\t\t\t\t\t}"]}], "num": 36900}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fcb9ed11fec84fbdcc72415aed8b2809", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fb5cae60c8ba616109a9377cfa86be6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java", "commitBeforeChange": "2936dc77d585d1bce84296ec1690cb761872a148", "commitAfterChange": "169b8b50026e171d4ce55ba2b51196398ab0fce2", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 64, "signatureBeforeChange": " \t \tpublic ASTNode runConversion(int astLevel, ICompilationUnit unit, int position, boolean resolveBindings)", "signatureAfterChange": " \t \tpublic ASTNode runConversion(int astLevel, ICompilationUnit unit, int position, boolean resolveBindings)", "diff": ["+", "+\t\t// Create parser", "-\t\treturn parser.createAST(null);", "+", "+\t\t// Parse compilation unit", "+\t\tASTNode result = parser.createAST(null);", "+\t\t", "+\t\t// Verify we get a compilation unit node and that binding are correct", "+\t\tassertTrue(\"Not a compilation unit\", result.getNodeType() == ASTNode.COMPILATION_UNIT);", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) result;", "+\t\tif (resolveBindings && compilationUnit.getProblems().length == 0) {", "+\t\t\tcompilationUnit.accept(new NullBindingVerifier());", "+\t\t}", "+\t\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf249067c31bf8fcd949168a0f14d6b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java", "commitBeforeChange": "2936dc77d585d1bce84296ec1690cb761872a148", "commitAfterChange": "169b8b50026e171d4ce55ba2b51196398ab0fce2", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 65, "signatureBeforeChange": "  \tpublic ASTNode runConversion(int astLevel, IClassFile classFile, int position, boolean resolveBindings)", "signatureAfterChange": "  \tpublic ASTNode runConversion(int astLevel, IClassFile classFile, int position, boolean resolveBindings)", "diff": ["+", "+\t\t// Create parser", "-\t\treturn parser.createAST(null);", "+", "+\t\t// Parse compilation unit", "+\t\tASTNode result = parser.createAST(null);", "+\t\t", "+\t\t// Verify we get a compilation unit node and that binding are correct", "+\t\tassertTrue(\"Not a compilation unit\", result.getNodeType() == ASTNode.COMPILATION_UNIT);", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) result;", "+\t\tif (resolveBindings && compilationUnit.getProblems().length == 0) {", "+\t\t\tcompilationUnit.accept(new NullBindingVerifier());", "+\t\t}", "+\t\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d36095c9524906907d062fcfdf3c7584", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java", "commitBeforeChange": "2936dc77d585d1bce84296ec1690cb761872a148", "commitAfterChange": "169b8b50026e171d4ce55ba2b51196398ab0fce2", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tpublic ASTNode runJLS3Conversion(ICompilationUnit unit, boolean resolveBindings, boolean checkJLS2)", "signatureAfterChange": " \tpublic ASTNode runJLS3Conversion(ICompilationUnit unit, boolean resolveBindings, boolean checkJLS2)", "diff": ["+\t}", "+", "+\t\t// Create parser", "-\t\treturn parser.createAST(null);", "+\t\t", "+\t\t// Parse compilation unit", "+\t\tASTNode result = parser.createAST(null);", "+\t\t", "+\t\t// Verify we get a compilation unit node and that binding are correct", "+\t\tassertTrue(\"Not a compilation unit\", result.getNodeType() == ASTNode.COMPILATION_UNIT);", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) result;", "+\t\tif (resolveBindings && compilationUnit.getProblems().length == 0) {", "+\t\t\tcompilationUnit.accept(new NullBindingVerifier());", "+\t\t}", "+\t\treturn result;"]}], "num": 5800}
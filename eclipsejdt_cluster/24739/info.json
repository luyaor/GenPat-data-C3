{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d8605a1dee322ef4c41ab556fca76e80", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "045de6254d24c796be80887c4e3a9caa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "eb4ff23c38228c4d00e0da694ac7e98ede6240d8", "commitAfterChange": "85fdee7dd19538da3ffbc3959a79cffbaddd43f9", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " int[] findOverriddenInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": " int[] findOverriddenInheritedMethods(MethodBinding[] methods, int length)", "diff": ["+\t// NOTE assumes length > 1", "-\tif (length > 1) {", "-\t\tnextMethod : for (int i = 0; i < length; i++) {", "-\t\t\tReferenceBinding declaringClass = methods[i].declaringClass;", "-\t\t\tif (declaringClass.isInterface()) {", "-\t\t\t\tif (toSkip != null && toSkip[i] == -1) continue nextMethod;", "-\t\t\t\tfor (int j = i + 1; j < length; j++) {", "-\t\t\t\t\tif (toSkip != null && toSkip[j] == -1) continue;", "-\t\t\t\t\tReferenceBinding declaringClass2 = methods[j].declaringClass;", "-\t\t\t\t\tif (declaringClass == declaringClass2) continue;", "-\t\t\t\t\tif (declaringClass.implementsInterface(declaringClass2, true)) {", "-\t\t\t\t\t\tif (toSkip == null)", "-\t\t\t\t\t\t\ttoSkip = new int[length];", "-\t\t\t\t\t\ttoSkip[j] = -1;", "-\t\t\t\t\t} else if (declaringClass2.implementsInterface(declaringClass, true)) {", "-\t\t\t\t\t\tif (toSkip == null)", "-\t\t\t\t\t\t\ttoSkip = new int[length];", "-\t\t\t\t\t\ttoSkip[i] = -1;", "-\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\t// only keep methods from the closest superclass, all others from higher superclasses can be skipped", "-\t\t\t\t// NOTE: methods were added in order by walking up the superclass hierarchy", "-\t\t\t\tfor (int j = i + 1; j < length; j++) {", "-\t\t\t\t\tReferenceBinding declaringClass2 = methods[j].declaringClass;", "-\t\t\t\t\tif (declaringClass == declaringClass2) continue;", "-\t\t\t\t\tif (declaringClass2.isInterface()) {", "-\t\t\t\t\t\ti = j - 1; // start the interface comparison with this method", "-\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (toSkip == null)", "-\t\t\t\t\t\t\ttoSkip = new int[length];", "-\t\t\t\t\t\ttoSkip[j] = -1;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\tint i = 0;", "+\tReferenceBinding declaringClass = methods[i].declaringClass;", "+\tif (!declaringClass.isInterface()) {", "+\t\t// in the first pass, skip overridden methods from superclasses", "+\t\t// only keep methods from the closest superclass, all others from higher superclasses can be skipped", "+\t\t// NOTE: methods were added in order by walking up the superclass hierarchy", "+\t\tReferenceBinding declaringClass2 = methods[++i].declaringClass;", "+\t\twhile (declaringClass == declaringClass2) {", "+\t\t\tif (++i == length) return null;", "+\t\t\tdeclaringClass2 = methods[i].declaringClass;", "+\t\t}", "+\t\tif (!declaringClass2.isInterface()) {", "+\t\t\t// skip all methods from different superclasses", "+\t\t\ttoSkip = new int[length];", "+\t\t\tdo {", "+\t\t\t\ttoSkip[i] = -1;", "+\t\t\t\tif (++i == length) return toSkip;", "+\t\t\t\tdeclaringClass2 = methods[i].declaringClass;", "+\t\t\t} while (!declaringClass2.isInterface());", "+\t\t}", "+\t}", "+\t// in the second pass, skip overridden methods from superinterfaces", "+\t// NOTE: superinterfaces can appear in 'random' order", "+\tnextMethod : for (; i < length; i++) {", "+\t\tif (toSkip != null && toSkip[i] == -1) continue nextMethod;", "+\t\tdeclaringClass = methods[i].declaringClass;", "+\t\tfor (int j = i + 1; j < length; j++) {", "+\t\t\tif (toSkip != null && toSkip[j] == -1) continue;", "+\t\t\tReferenceBinding declaringClass2 = methods[j].declaringClass;", "+\t\t\tif (declaringClass == declaringClass2) continue;", "+\t\t\tif (declaringClass.implementsInterface(declaringClass2, true)) {", "+\t\t\t\tif (toSkip == null)", "+\t\t\t\t\ttoSkip = new int[length];", "+\t\t\t\ttoSkip[j] = -1;", "+\t\t\t} else if (declaringClass2.implementsInterface(declaringClass, true)) {", "+\t\t\t\tif (toSkip == null)", "+\t\t\t\t\ttoSkip = new int[length];", "+\t\t\t\ttoSkip[i] = -1;", "+\t\t\t\tcontinue nextMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41074264b7f6939204b3e392e70ed14d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SimpleName.java", "commitBeforeChange": "b8e01a5f88277b60beb56a34c689a6b2ce9e09e8", "commitAfterChange": "9151e30fba5ea02221400c736d4de2dda06ec7ac", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \tpublic static boolean isJavaIdentifier(String identifier)", "signatureAfterChange": "\r \tpublic static boolean isJavaIdentifier(String identifier)", "diff": ["-\t\tint len = identifier.length();\r", "-\t\tif (len == 0) {\r", "-\t\t\treturn false;\r", "+\t\t// FIXME\r", "+\t\t// assert won't be considered as a keyword\r", "+\t\tScanner scanner = new Scanner();\r", "+\t\tchar[] source = identifier.toCharArray();\r", "+\t\tscanner.setSourceBuffer(source);\r", "+\t\tscanner.resetTo(0, source.length);\r", "+\t\ttry {\r", "+\t\t\tint tokenType = scanner.getNextToken();\r", "+\t\t\tswitch(tokenType) {\r", "+\t\t\t\tcase Scanner.TokenNameIdentifier:\r", "+\t\t\t\t\treturn true;\r", "+\t\t\t\tdefault:\r", "+\t\t\t}\r", "+\t\t} catch(InvalidInputException e) {\r", "-\t\tchar c = identifier.charAt(0);\r", "-\t\tif (!Character.isJavaIdentifierStart(c)) {\r", "-\t\t\treturn false;\r", "-\t\t}\t\t\t\r", "-\t\tfor (int i= 1; i < len; i++) {\r", "-\t\t\tc = identifier.charAt(i);\r", "-\t\t\tif (!Character.isJavaIdentifierPart(c)) {\r", "-\t\t\t\treturn false;\r", "-\t\t\t}\t\r", "-\t\t}\r", "-\t\tif (KEYWORDS.contains(identifier)) {\r", "-\t\t\treturn false;\r", "-\t\t}\t\t\t\r", "-\t\treturn true;\r", "+\t\treturn false;\r"]}], "num": 24739}
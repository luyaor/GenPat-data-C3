{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d8c06f38dccd8d44bbcf5e0e2bfe809", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e8ff856cd171f0c7772f61bc12df386", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "7a3ae46899cc014db3e6ff04c755844a7b20ac77", "commitAfterChange": "2f56fba6c2e777da3162491a81994cf0b767a403", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprotected void updateDocComment()", "signatureAfterChange": " \tprotected void updateDocComment()", "diff": ["-\t\t// Signal tag missing description if necessary", "+\t\t// Complain when tag is missing a description", "+\t\t// Note that if the parse of an inline tag has already started, consider it", "+\t\t// as the expected description, hence do not report any warning", "-\t\t\t\tif (!this.inlineTagStarted) { // if an inline tag is started, then consider as the expected description...", "+\t\t\t\tif (!this.inlineTagStarted) {", "-\t\t\t\tthis.sourceParser.problemReporter().javadocMissingTagDescription(TAG_NAMES[this.tagWaitingForDescription], this.tagSourceStart, this.tagSourceEnd, this.sourceParser.modifiers);", "+\t\t\t\tif (!this.inlineTagStarted) {", "+\t\t\t\t\tthis.sourceParser.problemReporter().javadocMissingTagDescription(TAG_NAMES[this.tagWaitingForDescription], this.tagSourceStart, this.tagSourceEnd, this.sourceParser.modifiers);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f945ec09c719e9e37f9d1d4e2a533dbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "7a3ae46899cc014db3e6ff04c755844a7b20ac77", "commitAfterChange": "2f56fba6c2e777da3162491a81994cf0b767a403", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["-\t\t// Signal tag missing description if necessary", "+\t\t// Complain when tag is missing a description", "+\t\t// Note that if the parse of an inline tag has already started, consider it", "+\t\t// as the expected description, hence do not report any warning", "-\t\t\t\tif (!this.inlineTagStarted) { // if an inline tag is started, then consider as the expected description...", "+\t\t\t\tif (!this.inlineTagStarted) {", "-\t\t\t\tthis.sourceParser.problemReporter().javadocMissingTagDescription(TAG_NAMES[this.tagWaitingForDescription], this.tagSourceStart, this.tagSourceEnd, this.sourceParser.modifiers);", "+\t\t\t\tif (!this.inlineTagStarted) {", "+\t\t\t\t\tthis.sourceParser.problemReporter().javadocMissingTagDescription(TAG_NAMES[this.tagWaitingForDescription], this.tagSourceStart, this.tagSourceEnd, this.sourceParser.modifiers);", "+\t\t\t\t}"]}], "num": 50550}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee80deb0d35cd27a195df03d9d8ba0bd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4875e43cb25464a82b81e0a53e89ccbe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableTypeImpl.java", "commitBeforeChange": "2e00795c3d6ef500d7af726d431f240f73b100c7", "commitAfterChange": "5f1e634c9572918b0d35dc54c9c744d979f875dc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t@Override \tpublic List<? extends TypeVariable> getTypeVariables()", "signatureAfterChange": " \t@Override \tpublic List<? extends TypeVariable> getTypeVariables()", "diff": ["-\t\tthrow new UnsupportedOperationException(\"NYI: org.eclipse.jdt.internal.compiler.apt.model.ExecutableTypeImpl.getTypeVariables()\"); //$NON-NLS-1$", "+\t\tArrayList<TypeVariable> list = new ArrayList<TypeVariable>();", "+\t\tTypeVariableBinding[] typeVariables = ((MethodBinding) this._binding).typeVariables();", "+\t\tif (typeVariables.length != 0) {", "+\t\t\tfor (TypeVariableBinding typeVariableBinding : typeVariables) {", "+\t\t\t\tlist.add((TypeVariable) Factory.newTypeMirror(typeVariableBinding));", "+\t\t\t}", "+\t\t}", "+\t\treturn Collections.unmodifiableList(list);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d16fe52faf3c6d567da42e5684bd3c7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeInputFileObject.java", "commitBeforeChange": "7515dcbf0b2425523d6c7872cb12027c7c83661e", "commitAfterChange": "521b10019026729ea6f37775e2b59ebaf2f70e3f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t@Override \tpublic CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException", "signatureAfterChange": " \t@Override \tpublic CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException", "diff": ["-\t\t//TODO", "-\t\tthrow new UnsupportedOperationException(\"Not yet implemented\");", "+\t\t// Use buffer size at least as big as the default size of the", "+\t\t// BufferedReader returned by openReader(), to reduce redundant", "+\t\t// copying.  See BufferedReader.read1() for details.", "+\t\tchar[] buffer = new char[8192];", "+\t\tStringWriter w = new StringWriter();", "+\t\tReader r = openReader(ignoreEncodingErrors);", "+\t\ttry {", "+\t\t\tint read = -1;", "+\t\t\twhile ((read = r.read(buffer)) != -1) {", "+\t\t\t\tw.write(buffer, 0, read);", "+\t\t\t}", "+\t\t}", "+\t\tfinally {", "+\t\t\tr.close();", "+\t\t}", "+\t\treturn w.getBuffer();"]}], "num": 57781}
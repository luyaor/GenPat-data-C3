{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f08c7acac2e7d0ab88972cde244097b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d480cc32f5eccc15dc1ecb662e4f12c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "344f41e4f3a0936f3d1a8dc22956abcf4bca93c4", "commitAfterChange": "2749db90d9b59a49ba8d955d8eddabda9be1d8ee", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding[] descriptorParameters = this.descriptor != null && this.descriptor.parameters != null && this.descriptor.parameters.length > 0 ? ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew TypeBinding[this.descriptor.parameters.length] : Binding.NO_PARAMETERS;", "-\t\tfor (int i = 0, length = descriptorParameters.length; i < length; i++)", "-\t\t\tdescriptorParameters[i] = this.descriptor.parameters[i].capture(scope, this.sourceEnd);", "+\t\tTypeBinding[] descriptorParameters = descriptorParametersAsArgumentExpressions();", "+\t\t", "+\t\tthis.haveReceiver = true;", "+\t\tif (this.lhs instanceof NameReference) {", "+\t\t\tif ((this.lhs.bits & ASTNode.RestrictiveFlagMASK) == Binding.TYPE) {", "+\t\t\t\tthis.haveReceiver = false;", "+\t\t\t}", "+\t\t} else if (this.lhs instanceof TypeReference) {", "+\t\t\tthis.haveReceiver = false;", "+\t\t}", "+\t\t", "+\t\t", "-\t\t", "-\t\tthis.haveReceiver = true;", "-\t\tif (this.lhs instanceof NameReference) {", "-\t\t\tif ((this.lhs.bits & ASTNode.RestrictiveFlagMASK) == Binding.TYPE) {", "-\t\t\t\tthis.haveReceiver = false;", "-\t\t\t}", "-\t\t} else if (this.lhs instanceof TypeReference) {", "-\t\t\tthis.haveReceiver = false;", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d968dca6c1d3d3a1ba5f507eb016ce23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     \tReferenceBinding resolve(LookupEnvironment environment)", "signatureAfterChange": "     \tReferenceBinding resolve(LookupEnvironment environment)", "diff": ["-\t", "+", "+\t\tTypeBinding oldSuperclass = this.superclass, oldFirstInterface = null;", "-\t\tif (this.firstBound != null)", "-\t\t\tthis.firstBound = BinaryTypeBinding.resolveUnresolvedType(this.firstBound, environment, true);", "-\t\tfor (int i = interfaces.length; --i >= 0;)", "-\t\t\tinterfaces[i] = BinaryTypeBinding.resolveUnresolvedType(interfaces[i], environment, true);", "+\t\tint length;", "+\t\tif ((length = interfaces.length) != 0) {", "+\t\t\toldFirstInterface = interfaces[0];", "+\t\t\tfor (int i = length; --i >= 0;) {", "+\t\t\t\tinterfaces[i] = BinaryTypeBinding.resolveUnresolvedType(interfaces[i], environment, true);", "+\t\t\t}", "+\t\t}", "-\t\tif (this.firstBound != null)", "-\t\t\tthis.firstBound = BinaryTypeBinding.resolveType(this.firstBound, environment, true);", "+", "+\t\t// refresh the firstBound in case it changed", "+\t\tif (this.firstBound != null) {", "+\t\t\tif (this.firstBound == oldSuperclass) {", "+\t\t\t\tthis.firstBound = this.superclass;", "+\t\t\t} else if (this.firstBound == oldFirstInterface) {", "+\t\t\t\tthis.firstBound = interfaces[0];", "+\t\t\t}", "+\t\t}"]}], "num": 60542}
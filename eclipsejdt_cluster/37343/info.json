{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79a26deffb7fd5ca176c5b9e5ed13ef1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae86319b941b4d57dd7571f1c313f903", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 65, "signatureBeforeChange": " protected void consumeMethodHeaderName()", "signatureAfterChange": " protected void consumeMethodHeaderName()", "diff": ["-\t\tif(this.indexOfAssistIdentifier() != 0) {", "+\t\tif(this.indexOfAssistIdentifier() != 0 ||", "+\t\t\tthis.identifierLengthStack[this.identifierLengthPtr] != this.genericsIdentifiersLengthStack[this.genericsIdentifiersLengthPtr]) {", "+\t\t\t\t\t// consume annotations", "+\t\t\t\t\tint length;", "+\t\t\t\t\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "+\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\tthis.expressionStack, ", "+\t\t\t\t\t\t\t(this.expressionPtr -= length) + 1, ", "+\t\t\t\t\t\t\tcompletionFieldDecl.annotations = new Annotation[length], ", "+\t\t\t\t\t\t\t0, ", "+\t\t\t\t\t\t\tlength); ", "+\t\t\t\t\t}", "+\t\t\t\t\t// consume annotations", "+\t\t\t\t\tint length;", "+\t\t\t\t\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "+\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\tthis.expressionStack, ", "+\t\t\t\t\t\t\t(this.expressionPtr -= length) + 1, ", "+\t\t\t\t\t\t\tmd.annotations = new Annotation[length], ", "+\t\t\t\t\t\t\t0, ", "+\t\t\t\t\t\t\tlength); ", "+\t\t\t\t\t}", "+\t\t// consume annotations", "+\t\tint length;", "+\t\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tthis.expressionStack, ", "+\t\t\t\t(this.expressionPtr -= length) + 1, ", "+\t\t\t\tmd.annotations = new Annotation[length], ", "+\t\t\t\t0, ", "+\t\t\t\tlength); ", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8d9faa7e6fa0385bfb302971644c807", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "da5e3044bf1aa602314b19a69e01c7d30d0c61d0", "commitAfterChange": "d2a7051ad6f971a1319fef017042d09bcae83b4b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \tpublic void addElementChangedListener(IElementChangedListener listener)", "signatureAfterChange": "\r \tpublic void addElementChangedListener(IElementChangedListener listener, int eventMask)", "diff": ["-\tpublic void addElementChangedListener(IElementChangedListener listener) {\r", "-\t\tif (fElementChangedListeners.indexOf(listener) < 0) {\r", "-\t\t\tfElementChangedListeners.add(listener);\r", "+\tpublic void addElementChangedListener(IElementChangedListener listener, int eventMask) {\r", "+\t\tfor (int i = 0; i < this.elementChangedListenerCount; i++){\r", "+\t\t\tif (this.elementChangedListeners[i].equals(listener)){\r", "+\t\t\t\t\r", "+\t\t\t\t// only clone the masks, since we could be in the middle of notifications and one listener decide to change\r", "+\t\t\t\t// any event mask of another listeners (yet not notified).\r", "+\t\t\t\tint cloneLength = this.elementChangedListenerMasks.length;\r", "+\t\t\t\tSystem.arraycopy(this.elementChangedListenerMasks, 0, this.elementChangedListenerMasks = new int[cloneLength], 0, cloneLength);\r", "+\t\t\t\tthis.elementChangedListenerMasks[i] = eventMask; // could be different\r", "+\t\t\t\treturn;\r", "+\t\t\t}\r", "+\t\t// may need to grow, no need to clone, since iterators will have cached original arrays and max boundary and we only add to the end.\r", "+\t\tint length;\r", "+\t\tif ((length = this.elementChangedListeners.length) == this.elementChangedListenerCount){\r", "+\t\t\tSystem.arraycopy(this.elementChangedListeners, 0, this.elementChangedListeners = new IElementChangedListener[length*2], 0, length);\r", "+\t\t\tSystem.arraycopy(this.elementChangedListenerMasks, 0, this.elementChangedListenerMasks = new int[length*2], 0, length);\r", "+\t\t}\r", "+\t\tthis.elementChangedListeners[this.elementChangedListenerCount] = listener;\r", "+\t\tthis.elementChangedListenerMasks[this.elementChangedListenerCount] = eventMask;\r", "+\t\tthis.elementChangedListenerCount++;\r"]}], "num": 37343}
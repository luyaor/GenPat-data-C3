{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f577e6684686b5aa55fca4c26dad6f67", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71f66bf19ded41fd62ccdff6a52692be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 48, "signatureBeforeChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["+\t", "+\tif (this != this.prototype)", "+\t\treturn this.prototype.resolveTypesFor(method);", "+\t", "-\tif (this.scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5) {", "+\tfinal long sourceLevel = this.scope.compilerOptions().sourceLevel;", "+\tif (sourceLevel >= ClassFileConstants.JDK1_5) {", "-\tif (this.scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_7) {", "+\tif (sourceLevel >= ClassFileConstants.JDK1_7) {", "+\t\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\t\t\t\tAnnotationBinding [] annotations = method.getAnnotations();", "+\t\t\t\t\tif (annotations != null && annotations != Binding.NO_ANNOTATIONS) {", "+\t\t\t\t\t\tASTNode.copySE8AnnotationsToType(methodDecl.scope, method, annotations);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t\t\t\t\tmethod.returnType = method.returnType.unannotated();", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// annotation was mistakenly associated to the method, create the annotated type now:", "-\t\t\t\t\t\t\tmethod.returnType = this.scope.environment().createAnnotatedType(method.returnType, nullTagBits);", "+\t\t\t\t\t\t\tmethod.returnType.tagBits &= ~TagBits.AnnotationNullMASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8bdc016bc7f514c1a9f6f629e096bcd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "8d8cc91b7aba4777ee9418a3cef6e1e163bfbf27", "commitAfterChange": "d0534e0376f1634b8fe35d19dde78d7433440f37", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "signatureAfterChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "diff": ["-\t\t} else if ((this.binding.declaringClass.tagBits & (TagBits.IsAnonymousType|TagBits.IsLocalType)) != TagBits.IsLocalType) {", "+\t\t} else if (!constructorBinding.isOrEnclosedByPrivateType()) {", "+ \t\t}", "+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=264991, Don't complain about this", "+\t\t// constructor being unused if the base class doesn't have a no-arg constructor.", "+\t\t// See that a seemingly unused constructor that chains to another constructor with a", "+\t\t// this(...) can be flagged as being unused without hesitation.", "+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=265142", "+\t\tif (this.constructorCall.accessMode != ExplicitConstructorCall.This) {", "+\t\t\tReferenceBinding superClass = constructorBinding.declaringClass.superclass();", "+\t\t\tif (superClass == null)", "+\t\t\t\tbreak checkUnused;", "+\t\t\t// see if there is a no-arg super constructor", "+\t\t\tMethodBinding methodBinding = superClass.getExactConstructor(Binding.NO_PARAMETERS);", "+\t\t\tif (methodBinding == null)", "+\t\t\t\tbreak checkUnused;", "+\t\t\tif (!methodBinding.canBeSeenBy(SuperReference.implicitSuperConstructorCall(), this.scope))", "+\t\t\t\tbreak checkUnused;", "+\t\t\t// otherwise default super constructor exists, so go ahead and complain unused."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe0fbfff739816fb8c9519518145824e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprivate Openable createElement(IResource resource, int elementType, RootInfo rootInfo)", "signatureAfterChange": " \tprivate Openable createElement(IResource resource, int elementType, RootInfo rootInfo)", "diff": ["-\t\t\t\t\t\telement = (Openable)rootInfo.project;", "+\t\t\t\t\t\telement = rootInfo.project;", "-\t\t\t\telement = rootInfo == null ? JavaCore.create(resource) : rootInfo.project.getPackageFragmentRoot(resource);", "+\t\t\t\telement = rootInfo == null ? JavaCore.create(resource) : rootInfo.getPackageFragmentRoot(resource);", "-\t\t\t\t// find the element that encloses the resource", "-\t\t\t\tthis.popUntilPrefixOf(path);", "-\t\t\t\t", "-\t\t\t\tif (this.currentElement == null) {", "-\t\t\t\t\telement = rootInfo == null ? JavaCore.create(resource) : JavaModelManager.create(resource, rootInfo.project);", "-\t\t\t\t} else {", "-\t\t\t\t\t// find the root", "-\t\t\t\t\tIPackageFragmentRoot root = this.currentElement.getPackageFragmentRoot();", "-\t\t\t\t\tif (root == null) {", "-\t\t\t\t\t\telement =  rootInfo == null ? JavaCore.create(resource) : JavaModelManager.create(resource, rootInfo.project);", "-\t\t\t\t\t} else if (((JavaProject)root.getJavaProject()).contains(resource)) {", "+\t\t\t\tif (rootInfo != null) {", "+\t\t\t\t\tif (rootInfo.project.contains(resource)) {", "+\t\t\t\t\t\tIPackageFragmentRoot root = rootInfo.getPackageFragmentRoot(null);", "-\t\t\t\t\t\tIPath pkgPath = path.removeFirstSegments(root.getPath().segmentCount());", "+\t\t\t\t\t\tIPath pkgPath = path.removeFirstSegments(rootInfo.rootPath.segmentCount());", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t// find the element that encloses the resource", "+\t\t\t\t\tthis.popUntilPrefixOf(path);", "+\t\t\t\t", "+\t\t\t\t\tif (this.currentElement == null) {", "+\t\t\t\t\t\telement = JavaCore.create(resource);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// find the root", "+\t\t\t\t\t\tIPackageFragmentRoot root = this.currentElement.getPackageFragmentRoot();", "+\t\t\t\t\t\tif (root == null) {", "+\t\t\t\t\t\t\telement =  JavaCore.create(resource);", "+\t\t\t\t\t\t} else if (((JavaProject)root.getJavaProject()).contains(resource)) {", "+\t\t\t\t\t\t\t// create package handle", "+\t\t\t\t\t\t\tIPath pkgPath = path.removeFirstSegments(root.getPath().segmentCount());", "+\t\t\t\t\t\t\tString pkg = Util.packageName(pkgPath);", "+\t\t\t\t\t\t\tif (pkg == null) return null;", "+\t\t\t\t\t\t\telement = root.getPackageFragment(pkg);", "+\t\t\t\t\t\t}"]}], "num": 46886}
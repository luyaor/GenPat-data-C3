{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24108369b4eb9dcc3f65a781fc7ef560", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df603351e78120db59309cb047952840", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "d9032a87dfcb69e19b4c3aae869d4a786d1fb149", "commitAfterChange": "eee6512d26cd1c50a9b02d1b4b78531f507d95fc", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic char[] findSource(IType type, IBinaryType info)", "signatureAfterChange": " \tpublic char[] findSource(IType type, String simpleSourceFileName)", "diff": ["-\tpublic char[] findSource(IType type, IBinaryType info) {", "+\tpublic char[] findSource(IType type, String simpleSourceFileName) {", "-\t\tchar[] sourceFileName = info.sourceFileName();", "+\t\tString name = simpleSourceFileName;", "-\t\tString name = null;", "-\t\tif (sourceFileName == null) {", "-\t\t\t/*", "-\t\t\t * We assume that this type has been compiled from a file with its name", "-\t\t\t * For example, A.class comes from A.java and p.A.class comes from a file A.java", "-\t\t\t * in the folder p.", "-\t\t\t */", "-\t\t\ttry {", "-\t\t\t\tif (type.isMember()) {", "-\t\t\t\t\tIType enclosingType = type.getDeclaringType();", "-\t\t\t\t\twhile (enclosingType.getDeclaringType() != null) {", "-\t\t\t\t\t\tenclosingType = enclosingType.getDeclaringType();", "-\t\t\t\t\t}", "-\t\t\t\t\tname = enclosingType.getFullyQualifiedName().replace('.', '/') + \".java\"; //$NON-NLS-1$", "-\t\t\t\t} else if (type.isLocal() || type.isAnonymous()){", "-\t\t\t\t\tString fullyQualifiedName = type.getFullyQualifiedName();", "-\t\t\t\t\tname = fullyQualifiedName.substring(0, fullyQualifiedName.indexOf('$')).replace('.', '/') + \".java\"; //$NON-NLS-1$", "-\t\t\t\t} else {", "-\t\t\t\t\tname = type.getFullyQualifiedName().replace('.', '/') + \".java\"; //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t}", "-\t\t} else {", "-\t\t\tname = new String(sourceFileName);", "-\t\t\tif (!pkgFrag.isDefaultPackage()) {", "-\t\t\t\tString pkg = pkgFrag.getElementName().replace('.', '/');", "-\t\t\t\tname = pkg + '/' + name;", "-\t\t\t}", "-\t\t}", "-\t\tif (name == null) {", "-\t\t\treturn null;", "+\t\tif (!pkgFrag.isDefaultPackage()) {", "+\t\t\tString pkg = pkgFrag.getElementName().replace('.', '/');", "+\t\t\tname = pkg + '/' + name;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa7c717038cbbf6a9c4e1559f9356d0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/IndexedFile.java", "commitBeforeChange": "741bf55b52d5676bf4be39f83254215d83172c64", "commitAfterChange": "4829608740e6817504fd33b0b1b3896be537e268", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic IndexedFile(String pathOrInfo, int fileNum)", "signatureAfterChange": "  \tpublic IndexedFile(String path, int fileNum)", "diff": ["-\tpublic IndexedFile(String pathOrInfo, int fileNum) {", "+\tpublic IndexedFile(String path, int fileNum) {", "-\t\tthis.properties= null; // initialized when needed", "-\t\tint dp= pathOrInfo.indexOf(INFO_BEGIN);", "-\t\tif (dp == -1)", "-\t\t\tpath= pathOrInfo;", "-\t\telse {", "-\t\t\tString fileInfo= pathOrInfo;", "-\t\t\tpath= fileInfo.substring(0, dp);", "-\t\t\tString props= fileInfo.substring(dp, fileInfo.length());", "-\t\t\tStringTokenizer t= new StringTokenizer(props.substring(1, props.length() - 1), INFO_SEPARATOR);", "-\t\t\twhile (t.hasMoreTokens()) {", "-\t\t\t\tString g= t.nextToken();", "-\t\t\t\ttry {", "-\t\t\t\t\tint dpt= g.indexOf(INFO_VALUE_SEPARATOR);", "-\t\t\t\t\tsetProperty(g.substring(0, dpt), g.substring(dpt + 1, g.length()));", "-\t\t\t\t} catch (Exception e) {", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\tthis.path= path;"]}], "num": 25399}
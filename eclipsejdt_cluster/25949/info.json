{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d200608a8d21f8cf598a809554b3d46", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d093a3fd97530f89bc720b0007be754", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "904e81d11d3fc634ae2d9d861dc6c73c9ea81e03", "commitAfterChange": "2fce9fdec7d24fd4985bfaa8a4da9bdc5aff2660", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic boolean visit(NumberLiteral node)", "signatureAfterChange": " \tpublic boolean visit(MethodRef node)", "diff": ["+\t */", "+\tpublic boolean visit(MethodRef node) {", "+\t\tif (node.getQualifier() != null) {", "+\t\t\tnode.getQualifier().accept(this);", "+\t\t}", "+\t\tthis.buffer.append(\"#\");//$NON-NLS-1$", "+\t\tnode.getName().accept(this);", "+\t\tthis.buffer.append(\"(\");//$NON-NLS-1$", "+\t\tfor (Iterator it = node.parameters().iterator(); it.hasNext(); ) {", "+\t\t\tMethodRefParameter e = (MethodRefParameter) it.next();", "+\t\t\te.accept(this);", "+\t\t\tif (it.hasNext()) {", "+\t\t\t\tthis.buffer.append(\",\");//$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "+\t\tthis.buffer.append(\")\");//$NON-NLS-1$", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a5f8e5e34e917b22a0b3b2a3ca7734f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "904e81d11d3fc634ae2d9d861dc6c73c9ea81e03", "commitAfterChange": "2fce9fdec7d24fd4985bfaa8a4da9bdc5aff2660", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tpublic boolean visit(TypeLiteral node)", "signatureAfterChange": " \tpublic boolean visit(TagElement node)", "diff": ["+\t */", "+\tpublic boolean visit(TagElement node) {", "+\t\tif (node.isNested()) {", "+\t\t\t// nested tags are always enclosed in braces", "+\t\t\tthis.buffer.append(\"{\");//$NON-NLS-1$", "+\t\t} else {", "+\t\t\t// top-level tags always begin on a new line", "+\t\t\tthis.buffer.append(\"\\n * \");//$NON-NLS-1$", "+\t\t}", "+\t\tif (node.getTagName() != null) {", "+\t\t\tthis.buffer.append(node.getTagName());", "+\t\t\tthis.buffer.append(\" \");//$NON-NLS-1$", "+\t\t}", "+\t\tfor (Iterator it = node.fragments().iterator(); it.hasNext(); ) {", "+\t\t\tASTNode e = (ASTNode) it.next();", "+\t\t\te.accept(this);", "+\t\t}", "+\t\tif (node.isNested()) {", "+\t\t\tthis.buffer.append(\"}\");//$NON-NLS-1$", "+\t\t}", "+\t\treturn false;", "+\t}"]}], "num": 25949}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db3ef746f5e47bd4f5227b04ad441551", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d731b20abab69dc36a1b706b03b204bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java", "commitBeforeChange": "23d1f03b5721ce2de9c0b6bda12e344c2ac468ba", "commitAfterChange": "966ae4bbaf97367f3fc38a9b2c2261f477021842", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": " public String[] getTypeParameterSignatures() throws JavaModelException", "signatureAfterChange": " public String[] getTypeParameterSignatures() throws JavaModelException", "diff": ["-\tSourceTypeElementInfo info = (SourceTypeElementInfo) getElementInfo();", "-\tchar[][] signatures = info.getTypeParameterSignatures();", "-\tif (signatures == null) ", "-\t\treturn EmptyStringList;", "-\tint length = signatures.length;", "-\tString[] stringSignatures = new String[length];", "+\tArrayList typeParameters = getChildrenOfType(TYPE_PARAMETER);", "+\tint length = typeParameters.size();", "+\tString[] typeParameterSignatures = new String[length];", "-\t\tstringSignatures[i] = new String(signatures[i]);", "+\t\tTypeParameter typeParameter = (TypeParameter) typeParameters.get(i);", "+\t\tTypeParameterElementInfo info = (TypeParameterElementInfo) typeParameter.getElementInfo();", "+\t\tchar[][] bounds = info.bounds;", "+\t\tif (bounds == null) {", "+\t\t\ttypeParameterSignatures[i] = Signature.createTypeParameterSignature(typeParameter.getElementName(), CharOperation.NO_STRINGS);", "+\t\t} else {", "+\t\t\tint boundsLength = bounds.length;", "+\t\t\tchar[][] boundSignatures = new char[boundsLength][];", "+\t\t\tfor (int j = 0; j < boundsLength; j++) {", "+\t\t\t\tboundSignatures[j] = Signature.createCharArrayTypeSignature(bounds[j], false);", "+\t\t\t}", "+\t\t\ttypeParameterSignatures[i] = new String(Signature.createTypeParameterSignature(typeParameter.getElementName().toCharArray(), boundSignatures));", "+\t\t}", "-\treturn stringSignatures;", "+\treturn typeParameterSignatures;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e10f04a49729ea1aee569a81093bf51c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java", "commitBeforeChange": "6224a5dcda094820e09b86e019ae927259ff3273", "commitAfterChange": "24c681585ef2f4b155e3d0f5cb2c551e612e2484", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " private void generateMethodInfos(IType type, IBinaryType typeInfo, HashMap newElements, ArrayList childrenHandles, ArrayList typeParameterHandles)", "signatureAfterChange": " private void generateMethodInfos(IType type, IBinaryType typeInfo, HashMap newElements, ArrayList childrenHandles, ArrayList typeParameterHandles)", "diff": ["+\t\tboolean useGenericSignature = true;", "-\t\tif (signature == null) signature = methodInfo.getMethodDescriptor();", "+\t\tif (signature == null) {", "+\t\t\tuseGenericSignature = false;", "+\t\t\tsignature = methodInfo.getMethodDescriptor();", "+\t\t}", "+\t\tString selector = new String(methodInfo.getSelector());", "+\t\tfinal boolean isConstructor = methodInfo.isConstructor();", "+\t\tif (isConstructor) {", "+\t\t\tselector = type.getElementName();", "+\t\t}", "-\t\t} catch (IllegalArgumentException e) {", "+\t\t\tif (isConstructor", "+\t\t\t\t\t&& useGenericSignature", "+\t\t\t\t\t&& type.isMember()", "+\t\t\t\t\t&& !Flags.isStatic(type.getFlags())) {", "+\t\t\t\tint length = pNames.length;", "+\t\t\t\tSystem.arraycopy(pNames, 0, (pNames = new String[length + 1]), 1, length);", "+\t\t\t\tchar[] descriptor = methodInfo.getMethodDescriptor();", "+\t\t\t\tfinal String[] parameterTypes = Signature.getParameterTypes(new String(descriptor));", "+\t\t\t\tpNames[0] = parameterTypes[0];", "+\t\t\t}", "+\t\t}catch (IllegalArgumentException e) {", "+\t\t\t// protect against malformed .class file (e.g. com/sun/crypto/provider/SunJCE_b.class has a 'a' generic signature)", "+\t\t\tsignature = methodInfo.getMethodDescriptor();", "+\t\t\tpNames = Signature.getParameterTypes(new String(signature));", "+\t\t} catch (JavaModelException e) {", "-\t\tString selector = new String(methodInfo.getSelector());", "-\t\tif (methodInfo.isConstructor()) {", "-\t\t\tselector =type.getElementName();", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2c588e050f81735a0e15449357d92db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMethod.java", "commitBeforeChange": "23d1f03b5721ce2de9c0b6bda12e344c2ac468ba", "commitAfterChange": "966ae4bbaf97367f3fc38a9b2c2261f477021842", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": " public String[] getTypeParameterSignatures() throws JavaModelException", "signatureAfterChange": " public String[] getTypeParameterSignatures() throws JavaModelException", "diff": ["-\tSourceMethodElementInfo info = (SourceMethodElementInfo) getElementInfo();", "-\tchar[][] signatures = info.getTypeParameterSignatures();", "-\tif (signatures == null) ", "-\t\treturn EmptyStringList;", "-\tint length = signatures.length;", "-\tString[] stringSignatures = new String[length];", "+\tArrayList typeParameters = getChildrenOfType(TYPE_PARAMETER);", "+\tint length = typeParameters.size();", "+\tString[] typeParameterSignatures = new String[length];", "-\t\tstringSignatures[i] = new String(signatures[i]);", "+\t\tTypeParameter typeParameter = (TypeParameter) typeParameters.get(i);", "+\t\tTypeParameterElementInfo info = (TypeParameterElementInfo) typeParameter.getElementInfo();", "+\t\tchar[][] bounds = info.bounds;", "+\t\tif (bounds == null) {", "+\t\t\ttypeParameterSignatures[i] = Signature.createTypeParameterSignature(typeParameter.getElementName(), CharOperation.NO_STRINGS);", "+\t\t} else {", "+\t\t\tint boundsLength = bounds.length;", "+\t\t\tchar[][] boundSignatures = new char[boundsLength][];", "+\t\t\tfor (int j = 0; j < boundsLength; j++) {", "+\t\t\t\tboundSignatures[j] = Signature.createCharArrayTypeSignature(bounds[j], false);", "+\t\t\t}", "+\t\t\ttypeParameterSignatures[i] = new String(Signature.createTypeParameterSignature(typeParameter.getElementName().toCharArray(), boundSignatures));", "+\t\t}", "-\treturn stringSignatures;", "+\treturn typeParameterSignatures;"]}], "num": 44389}
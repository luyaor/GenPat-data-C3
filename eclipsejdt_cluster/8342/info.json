{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e676c357a8f2e47c48183adb8a78ae3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "339401ba33e1c76d17adb49d60812621", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "51c6ca3e4dfed3078a1640da7a2ab7f26c899e0a", "commitAfterChange": "de8aa9940086fe152901aa168536f30670945804", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate int addFieldAttributes(FieldBinding fieldBinding, int fieldAttributeOffset)", "signatureAfterChange": "  \tprivate int addFieldAttributes(FieldBinding fieldBinding, int fieldAttributeOffset)", "diff": ["+\t\t\t\tList allTypeAnnotationContexts = new ArrayList();", "+\t\t\t\tint invisibleTypeAnnotationsCounter = 0;", "+\t\t\t\tint visibleTypeAnnotationsCounter = 0;", "+\t\t\t\t\tif ((this.produceAttributes & ClassFileConstants.ATTR_TYPE_ANNOTATION) != 0) {", "+\t\t\t\t\t\tif ((fieldDeclaration.bits & ASTNode.HasTypeAnnotations) != 0) {", "+\t\t\t\t\t\t\tfieldDeclaration.getAllAnnotationContexts(AnnotationTargetTypeConstants.FIELD, allTypeAnnotationContexts);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tTypeReference fieldType = fieldDeclaration.type;", "+\t\t\t\tif (fieldType != null ", "+\t\t\t\t\t\t&& ((this.produceAttributes & ClassFileConstants.ATTR_TYPE_ANNOTATION) != 0)", "+\t\t\t\t\t\t&& ((fieldType.bits & ASTNode.HasTypeAnnotations) != 0)) {", "+\t\t\t\t\tfieldType.getAllAnnotationContexts(AnnotationTargetTypeConstants.FIELD, allTypeAnnotationContexts);", "+\t\t\t\t}", "+\t\t\t\tint size = allTypeAnnotationContexts.size();", "+\t\t\t\tif (size != 0) {", "+\t\t\t\t\tAnnotationContext[] allTypeAnnotationContextsArray = new AnnotationContext[size];", "+\t\t\t\t\tallTypeAnnotationContexts.toArray(allTypeAnnotationContextsArray);", "+\t\t\t\t\tfor (int i = 0, max = allTypeAnnotationContextsArray.length; i < max; i++) {", "+\t\t\t\t\t\tAnnotationContext annotationContext = allTypeAnnotationContextsArray[i];", "+\t\t\t\t\t\tif ((annotationContext.visibility & AnnotationContext.INVISIBLE) != 0) {", "+\t\t\t\t\t\t\tinvisibleTypeAnnotationsCounter++;", "+\t\t\t\t\t\t\tallTypeAnnotationContexts.add(annotationContext);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tvisibleTypeAnnotationsCounter++;", "+\t\t\t\t\t\t\tallTypeAnnotationContexts.add(annotationContext);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tattributesNumber += generateRuntimeTypeAnnotations(", "+\t\t\t\t\t\t\tallTypeAnnotationContextsArray,", "+\t\t\t\t\t\t\tvisibleTypeAnnotationsCounter,", "+\t\t\t\t\t\t\tinvisibleTypeAnnotationsCounter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd3cd44806a153cbabd734ecafffe062", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IntersectionCastTypeReference.java", "commitBeforeChange": "e77a13c5cfd8a2800f9cc3d46536a8ccdc632a8b", "commitAfterChange": "c62b2332be65f641e5e7827b79f4caf8cb16c6bb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope, boolean checkBounds)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope, boolean checkBounds)", "diff": ["-\t\t\t\tif (type.findSuperTypeOriginatingFrom(priorType) != null) {", "+\t\t\t\tif (TypeBinding.equalsEquals(type.findSuperTypeOriginatingFrom(priorType), priorType)) {", "-\t\t\t\tif (priorType.findSuperTypeOriginatingFrom(type) != null)", "+\t\t\t\tif (TypeBinding.equalsEquals(priorType.findSuperTypeOriginatingFrom(type), type))", "+", "-\t\treturn (this.resolvedType = scope.environment().createIntersectionCastType(intersectingTypes));", "+\t\tIntersectionCastTypeBinding intersectionType = (IntersectionCastTypeBinding) scope.environment().createIntersectionCastType(intersectingTypes);", "+\t\t// check for parameterized interface collisions (when different parameterizations occur)", "+\t\tReferenceBinding itsSuperclass = null;", "+\t\tReferenceBinding[] interfaces = intersectingTypes;", "+\t\tReferenceBinding firstType = intersectingTypes[0];", "+\t\tif (firstType.isClass()) {", "+\t\t\titsSuperclass = firstType.superclass();", "+\t\t\tSystem.arraycopy(intersectingTypes, 1, interfaces = new ReferenceBinding[typeCount - 1], 0, typeCount - 1);", "+\t\t}", "+\t\t", "+\t\tMap invocations = new HashMap(2);", "+\t\tnextInterface: for (int i = 0, interfaceCount = interfaces.length; i < interfaceCount; i++) {", "+\t\t\tReferenceBinding one = interfaces[i];", "+\t\t\tif (one == null) continue nextInterface;", "+\t\t\tif (itsSuperclass != null && scope.hasErasedCandidatesCollisions(itsSuperclass, one, invocations, intersectionType, this))", "+\t\t\t\tcontinue nextInterface;", "+\t\t\tnextOtherInterface: for (int j = 0; j < i; j++) {", "+\t\t\t\tReferenceBinding two = interfaces[j];", "+\t\t\t\tif (two == null) continue nextOtherInterface;", "+\t\t\t\tif (scope.hasErasedCandidatesCollisions(one, two, invocations, intersectionType, this))", "+\t\t\t\t\tcontinue nextInterface;", "+\t\t\t}", "+\t\t}", "+\t\tif ((intersectionType.tagBits & TagBits.HierarchyHasProblems) != 0)", "+\t\t\treturn null;", "+", "+\t\treturn (this.resolvedType = intersectionType);"]}], "num": 8342}
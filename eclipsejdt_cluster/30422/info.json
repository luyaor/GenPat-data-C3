{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "586791a3c5b92fce5f855b2688679d5b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b21538417de3f28e3fd52d604ca243b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterJavadocDontIndentTagsTests.java", "commitBeforeChange": "b86c62c9276301f4293d579436f1016659c6742c", "commitAfterChange": "9816d147cfcd9317931332a2edf2549b9a55fa79", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  DefaultCodeFormatter codeFormatter()", "signatureAfterChange": "  DefaultCodeFormatter codeFormatter()", "diff": ["-\tthis.preferences.comment_indent_root_tags = false; // Eclipse default is true", "-\tDefaultCodeFormatter codeFormatter = new DefaultCodeFormatter(this.preferences);", "+\tthis.formatterPrefs.comment_indent_root_tags = false; // Eclipse default is true", "+\tDefaultCodeFormatter codeFormatter = new DefaultCodeFormatter(this.formatterPrefs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e381375853f0643cd00831e184b6eb0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterJavadocDontIndentTagsDescriptionTests.java", "commitBeforeChange": "b86c62c9276301f4293d579436f1016659c6742c", "commitAfterChange": "9816d147cfcd9317931332a2edf2549b9a55fa79", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  DefaultCodeFormatter codeFormatter()", "signatureAfterChange": "  DefaultCodeFormatter codeFormatter()", "diff": ["-\tthis.preferences.comment_indent_parameter_description = false; // Eclipse default is true", "-\tDefaultCodeFormatter codeFormatter = new DefaultCodeFormatter(this.preferences);", "+\tthis.formatterPrefs.comment_indent_parameter_description = false; // Eclipse default is true", "+\tDefaultCodeFormatter codeFormatter = new DefaultCodeFormatter(this.formatterPrefs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8abecc18f8731c2cf8a36b6fbc36a920", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java", "commitBeforeChange": "8ee98e6a6bea64a8753c8da0062862e8729bd32e", "commitAfterChange": "7757a5934fde86433c9c42221d6117d1b7f29e23", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tASTNode clone(AST target)", "signatureAfterChange": " \tASTNode clone(AST target)", "diff": ["-\t\t\tresult.setVariableArity(isVariableArity());", "+\t\t\tresult.setVarargs(isVarargs());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f8153c97273996cf28830ab108c925f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "8ee98e6a6bea64a8753c8da0062862e8729bd32e", "commitAfterChange": "7757a5934fde86433c9c42221d6117d1b7f29e23", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic boolean match(SingleVariableDeclaration node, Object other)", "signatureAfterChange": " \tpublic boolean match(SingleVariableDeclaration node, Object other)", "diff": ["-\t\t\tif (node.isVariableArity() != o.isVariableArity()) {", "+\t\t\tif (node.isVarargs() != o.isVarargs()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9baa10544a8c4291cb1a7ddcc10501b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "a2b797eb7226566ad166415dcfde6c744ad4c587", "commitAfterChange": "895b1bbc42bc6ec924c8066f964f04fd4701ee79", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "signatureAfterChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "diff": ["-\t\t\tif (!isNarrowing && castType == this.resolvedType.leafComponentType()) { // do not tag as unnecessary when recursing through upper bounds", "+\t\t\tif (!isNarrowing && match == this.resolvedType.leafComponentType()) { // do not tag as unnecessary when recursing through upper bounds", "-\t\tif (!isNarrowing && castType == this.resolvedType.leafComponentType()) { // do not tag as unnecessary when recursing through upper bounds", "+\t\tif (!isNarrowing && match == this.resolvedType.leafComponentType()) { // do not tag as unnecessary when recursing through upper bounds"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed9eca81f3c02f45503069b3ea258a9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "645b7bfaa2fa6e51ee8178c0b98a65d610d989c2", "commitAfterChange": "6cb5df5deb874bcd03782569c94840e1aa61cfba", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public void feedIndexRequestor(IIndexSearchRequestor requestor, int detailLevel, int[] references, IndexInput input, IJavaSearchScope scope) throws IOException", "signatureAfterChange": "\r public void feedIndexRequestor(IIndexSearchRequestor requestor, int detailLevel, int[] references, IndexInput input, IJavaSearchScope scope) throws IOException", "diff": ["-\t\t\t\trequestor.acceptClassDeclaration(path, decodedSimpleName, decodedEnclosingTypeNames, decodedQualification);\r", "+\t\t\t\trequestor.acceptClassDeclaration(path, decodedSimpleName, decodedEnclosingTypeNames, decodedPackage);\r", "-\t\t\t\trequestor.acceptInterfaceDeclaration(path, decodedSimpleName, decodedEnclosingTypeNames, decodedQualification);\r", "+\t\t\t\trequestor.acceptInterfaceDeclaration(path, decodedSimpleName, decodedEnclosingTypeNames, decodedPackage);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f71e651cf1a26b779176851139245e47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocBugsCompletionModelTest.java", "commitBeforeChange": "f2d453b40b80a7b4342f872cb4a2ceb30cb26035", "commitAfterChange": "ff67eddd91980875c818d1dd4c9e986c8fe296a7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void testBug3270() throws JavaModelException", "signatureAfterChange": " public void testBug3270() throws JavaModelException", "diff": ["-\t\t\t\"InterruptedException[TYPE_REF]{InterruptedException, java.lang, Ljava.lang.InterruptedException;, null, null, \"+this.positions+R_DICUNREET+\"}\"", "+\t\t\t\"InterruptedException[TYPE_REF]{InterruptedException, java.lang, Ljava.lang.InterruptedException;, null, null, \"+this.positions+R_DICUNREETE+\"}\"", "-\t\t\t\"InterruptedException[TYPE_REF]{InterruptedException, java.lang, Ljava.lang.InterruptedException;, null, null, \"+this.positions+R_DICUNREET+\"}\\n\" + ", "+\t\t\t\"InterruptedException[TYPE_REF]{InterruptedException, java.lang, Ljava.lang.InterruptedException;, null, null, \"+this.positions+R_DICUNREETE+\"}\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7feab131c539bb0ae0b1d5a2d58dd0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/BaseProcessor.java", "commitBeforeChange": "01d995488d5e309c6b243da146c63894a6df881d", "commitAfterChange": "13bbdd97c6c86aba0f70693f850c3de86bece79b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprotected void assertEqual(final String expected, final String actual, final String message)", "signatureAfterChange": " \t \tprotected void assertEqual(final Object expected, final Object actual, final String message)", "diff": ["+\tprotected void assertEqual(final Object expected, final Object actual, final String message) {", "+\t\tif( expected == null ){", "+\t\t\tfinal Messager msgr = _env.getMessager();", "+\t\t\tmsgr.printError(message + \" actual: \" + actual );", "+\t\t}", "+\t\telse if( actual == null ){", "+\t\t\tfinal Messager msgr = _env.getMessager();", "+\t\t\tmsgr.printError(message + \"expected \" + expected );", "+\t\t}", "+\t\telse if( !expected.equals(actual) ){", "+\t\t\tfinal Messager msgr = _env.getMessager();", "+\t\t\tmsgr.printError(message + \" expected: \" + expected + \" actual: \" + actual );", "+\t\t}", "+\t}"]}], "num": 30422}
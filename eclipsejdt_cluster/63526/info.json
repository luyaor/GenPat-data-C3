{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "325a525c562b48992602096e86718492", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a90b560f53bb941487f1bca502977a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "9156e33be70429042b1d72217c4197f996fdfb3a", "commitAfterChange": "0bbc1f10f38c090526549c38a7d30ff164b71a76", "methodNumberBeforeChange": 167, "methodNumberAfterChange": 167, "signatureBeforeChange": " public void task(String message, int start, int end)", "signatureAfterChange": " public void task(String tag, String message, String priority, int start, int end)", "diff": ["-public void task(String message, int start, int end){", "+public void task(String tag, String message, String priority, int start, int end){", "-\t\tnew String[] { message },", "-\t\tnew String[] { message },", "+\t\tnew String[] { tag, message, priority/*secret argument that is not surfaced in getMessage()*/},", "+\t\tnew String[] { tag, message, priority/*secret argument that is not surfaced in getMessage()*/}, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb16bce5843dda7ed3f7f080c2f37bc0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/CodeByteStream.java", "commitBeforeChange": "669b9af0f5a06f4381a84a633c0be85e376c6f3e", "commitAfterChange": "cf266a5a150479cb6fad7bdee0518adaf976404e", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void writeSmallUTF(char[] str, int start, int end)", "signatureAfterChange": " \tpublic void writeUTF(char[] str, int start, int end)", "diff": ["-\t}", "-\tpublic void writeSmallUTF(char[] str, int start, int end) {", "+\tpublic void writeUTF(char[] str, int start, int end) {", "-\t\tif (utflen > 255)", "+\t\tif (utflen < 255) {", "+\t\t\twriteByte(utflen & 0xFF);", "+\t\t} else if (utflen > 65535) {", "-\t\twriteByte(utflen & 0xFF);", "+\t\t} else {", "+\t\t\twriteByte(255); // marker for long UTF", "+\t\t\twriteByte((utflen >>> 8) & 0xFF); // high byte", "+\t\t\twriteByte((utflen >>> 0) & 0xFF); // low byte", "+\t\t}"]}], "num": 63526}
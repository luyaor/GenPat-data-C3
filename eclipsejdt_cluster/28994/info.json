{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b716b8e0a0ebfa5b18ea9e5faf6d5bcf", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17c67ad3107713bd266084a20de89219", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddFolderToIndex.java", "commitBeforeChange": "fd2df73ef9d8c1f3cb6f04f5169c0f3c5bb417cf", "commitAfterChange": "b9151e9319708f3d004c77f114c4f35584a87c41", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-\t\t\tfolder.accept(", "-\t\t\t\tnew IResourceProxyVisitor() {", "-\t\t\t\t\tpublic boolean visit(IResourceProxy proxy) /* throws CoreException */{", "-\t\t\t\t\t\tswitch(proxy.getType()) {", "-\t\t\t\t\t\t\tcase IResource.FILE :", "-\t\t\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isJavaFileName(proxy.getName())) {", "-\t\t\t\t\t\t\t\t\tIResource resource = proxy.requestResource();", "-\t\t\t\t\t\t\t\t\tif (!Util.isExcluded(resource, inclusionPatterns, exclusionPatterns))", "-\t\t\t\t\t\t\t\t\t\tindexManager.addSource((IFile)resource, container);", "-\t\t\t\t\t\t\t\t}", "+\t\t\tif (this.exclusionPatterns == null && this.inclusionPatterns == null) {", "+\t\t\t\tfolder.accept(", "+\t\t\t\t\tnew IResourceProxyVisitor() {", "+\t\t\t\t\t\tpublic boolean visit(IResourceProxy proxy) /* throws CoreException */{", "+\t\t\t\t\t\t\tif (proxy.getType() == IResource.FILE) {", "+\t\t\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isJavaFileName(proxy.getName()))", "+\t\t\t\t\t\t\t\t\tindexManager.addSource((IFile) proxy.requestResource(), container);", "-\t\t\t\t\t\t\tcase IResource.FOLDER :", "-\t\t\t\t\t\t\t\tif (Util.isExcluded(proxy.requestResource(), inclusionPatterns, exclusionPatterns))", "-\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t},", "-\t\t\t\tIResource.NONE", "-\t\t\t);", "+\t\t\t\t\t},", "+\t\t\t\t\tIResource.NONE", "+\t\t\t\t);", "+\t\t\t} else {", "+\t\t\t\tfolder.accept(", "+\t\t\t\t\tnew IResourceProxyVisitor() {", "+\t\t\t\t\t\tpublic boolean visit(IResourceProxy proxy) /* throws CoreException */{", "+\t\t\t\t\t\t\tswitch(proxy.getType()) {", "+\t\t\t\t\t\t\t\tcase IResource.FILE :", "+\t\t\t\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isJavaFileName(proxy.getName())) {", "+\t\t\t\t\t\t\t\t\t\tIResource resource = proxy.requestResource();", "+\t\t\t\t\t\t\t\t\t\tif (!Util.isExcluded(resource, inclusionPatterns, exclusionPatterns))", "+\t\t\t\t\t\t\t\t\t\t\tindexManager.addSource((IFile)resource, container);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\tcase IResource.FOLDER :", "+\t\t\t\t\t\t\t\t\tif (Util.isExcluded(proxy.requestResource(), inclusionPatterns, exclusionPatterns))", "+\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t},", "+\t\t\t\t\tIResource.NONE", "+\t\t\t\t);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3562dfb22963f638ab125e5d53744fdd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java", "commitBeforeChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "commitAfterChange": "eca034eefb984fcda8d1031d81c86811d9a168b4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  protected void cleanOutputFolders() throws CoreException", "signatureAfterChange": "  protected void cleanOutputFolders() throws CoreException", "diff": ["-\t\tif (deleteAll && sourceLocation.hasIndependentOutputFolder) {", "+\t\tif (sourceLocation.hasIndependentOutputFolder) {", "-\t\t\tIResource[] members = outputFolder.members(); ", "-\t\t\tfor (int j = 0, m = members.length; j < m; j++)", "-\t\t\t\tmembers[j].delete(IResource.FORCE, null);", "-\t\t\tcopyExtraResourcesBack(sourceLocation);", "+\t\t\tif (deleteAll) {", "+\t\t\t\tIResource[] members = outputFolder.members(); ", "+\t\t\t\tfor (int ii = 0, ll = members.length; ii < ll; ii++)", "+\t\t\t\t\tmembers[ii].delete(IResource.FORCE, null);", "+\t\t\t} else {", "+\t\t\t\toutputFolder.accept(", "+\t\t\t\t\tnew IResourceVisitor() {", "+\t\t\t\t\t\tpublic boolean visit(IResource resource) throws CoreException {", "+\t\t\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "+\t\t\t\t\t\t\t\tif (JavaBuilder.CLASS_EXTENSION.equalsIgnoreCase(resource.getFileExtension()))", "+\t\t\t\t\t\t\t\t\tresource.delete(IResource.FORCE, null);", "+\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t);", "+\t\t\t}", "+\t\t\tcopyExtraResourcesBack(sourceLocation, deleteAll);", "-\t\t\t\t\t: null; // ignore exclusionPatterns if output folder != source folder", "+\t\t\t\t\t: null; // ignore exclusionPatterns if output folder == another source folder... not this one"]}], "num": 28994}
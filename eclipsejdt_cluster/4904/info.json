{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e78e52c0ee61bf5b48ca266fc557ac77", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d68ebdee5166036744ac56bb4471d80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "55f209d341e5b4a7686ec5f19b7f1d49ca53b06d", "commitAfterChange": "500b16b904cdef65e8101789f80e15e9737f379a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "diff": ["+\t\tboolean complyTo14 = currentScope.environment().options.complianceLevel >= ClassFileConstants.JDK1_4;", "-\t\t\t\tif (needValue && !lastFieldBinding.isStatic()) {", "+\t\t\t\tif ((needValue || complyTo14) && !lastFieldBinding.isStatic()) {", "-\t\t\t\t\tif (needValue) {", "-\t\t\t\t\t\tMethodBinding accessor =", "-\t\t\t\t\t\t\tsyntheticReadAccessors == null ? null : syntheticReadAccessors[i]; ", "-\t\t\t\t\t\tif (accessor == null) {", "-\t\t\t\t\t\t\tif (lastFieldBinding.isConstantValue()) {", "-\t\t\t\t\t\t\t\tif (lastFieldBinding != this.codegenBinding && !lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "-\t\t\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcodeStream.generateConstant(lastFieldBinding.constant(), 0);", "-\t\t\t\t\t\t\t} else if (lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (lastGenericCast != null) codeStream.checkcast(lastGenericCast);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (this.codegenBinding != lastFieldBinding && !lastFieldBinding.isStatic()){", "+\t\t\t\t\tif (lastFieldBinding.isConstantValue()) {", "+\t\t\t\t\t\tif (lastFieldBinding != this.codegenBinding && !lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (needValue) {", "+\t\t\t\t\t\t\tcodeStream.generateConstant(lastFieldBinding.constant(), 0);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (needValue || complyTo14) {", "+\t\t\t\t\t\t\tMethodBinding accessor = syntheticReadAccessors == null ? null : syntheticReadAccessors[i]; ", "+\t\t\t\t\t\t\tif (accessor == null) {", "+\t\t\t\t\t\t\t\tif (lastFieldBinding.isStatic()) {", "+\t\t\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (needValue) {", "+\t\t\t\t\t\t\t\tif (lastGenericCast != null) codeStream.checkcast(lastGenericCast);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (this.codegenBinding != lastFieldBinding && !lastFieldBinding.isStatic()){", "+\t\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "+\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca48a66d809194af8153ae6c41719658", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "8c67d56825136ce0d7026162576ad6997e930bdc", "commitAfterChange": "0b88f9a0bb1950edae0865a8658608a49edfc445", "methodNumberBeforeChange": 205, "methodNumberAfterChange": 205, "signatureBeforeChange": " protected void consumeInterfaceMethodDeclaration(boolean hasSemicolonBody)", "signatureAfterChange": " protected void consumeInterfaceMethodDeclaration(boolean hasSemicolonBody)", "diff": ["-\tif (isDefault) {", "-\t\tif (!this.parsingJava8Plus) {", "-\t\t\tproblemReporter().defaultMethodsNotBelow18(md);", "-\t\t} else if (hasSemicolonBody) {", "+\tboolean isStatic = (md.modifiers & ClassFileConstants.AccStatic) != 0;", "+\tboolean bodyAllowed = isDefault || isStatic;", "+\tif (this.parsingJava8Plus) {", "+\t\tif (bodyAllowed && hasSemicolonBody) {", "-\t\t\tproblemReporter().methodNeedBody(md);\t// grammar intentially allows illegal input to enable this error message", "-\t\t// report the problem and continue the parsing - narrowing the problem onto the method", "-\t\tif(!this.statementRecoveryActivated && !hasSemicolonBody) problemReporter().abstractMethodNeedingNoBody(md);", "+\t\tif (isDefault) problemReporter().defaultMethodsNotBelow18(md);", "+\t\tif (isStatic) problemReporter().staticInterfaceMethodsNotBelow18(md);", "+\t}", "+\tif (!bodyAllowed && !this.statementRecoveryActivated && !hasSemicolonBody) {", "+\t\tproblemReporter().abstractMethodNeedingNoBody(md);"]}], "num": 4904}
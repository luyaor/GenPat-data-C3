{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39ea733c9af5cd84f14d567102770cf4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5251757eacf1e7185f4f90067771f263", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/Factory.java", "commitBeforeChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "commitAfterChange": "2ed8d2842cd060fd2ed1992ac37d7e3f157e19c9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r     public static Object createAnnotationValueObject(Expression expr, DeclarationImpl decl, ProcessorEnvImpl env)", "signatureAfterChange": " \tpublic static AnnotationValue createAnnotationMemberValue(Object domValue, \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  String elementName, \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  AnnotationMirrorImpl anno, \t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ProcessorEnvImpl env)", "diff": ["-     */\r", "-    public static Object createAnnotationValueObject(Expression expr, DeclarationImpl decl, ProcessorEnvImpl env)\r", "-    {\r", "-        if( expr == null ) return null;\r", "-\t\tfinal Object constantValue = expr.resolveConstantExpressionValue();\r", "-\t\tif( constantValue != null ) return constantValue;\r", "-        switch(expr.getNodeType())\r", "-        {\r", "-        case ASTNode.SIMPLE_NAME:\r", "-        case ASTNode.QUALIFIED_NAME:\r", "-            final Name name = (Name)expr;\r", "-            final IBinding nameBinding = name.resolveBinding();\r", "-            if( nameBinding.getKind() == IBinding.VARIABLE ) {\r", "-                return ((IVariableBinding)nameBinding).getConstantValue();\r", "-            }\r", "-            break;\r", "-        case ASTNode.ARRAY_INITIALIZER:\r", "-\r", "-            final List<Expression> exprs = ((ArrayInitializer)expr).expressions();\r", "-            final List<AnnotationValue> annoValues = new ArrayList<AnnotationValue>(exprs.size());\r", "-            for(Expression initExpr : exprs ){\r", "-                if( initExpr == null ) continue;\r", "-                // can't have multi-dimensional array.\r", "-                // there should be already a java compile time error\r", "-                else if( initExpr.getNodeType() == ASTNode.ARRAY_INITIALIZER )\r", "-                    return null;\r", "-\r", "-                final AnnotationValue value = createAnnotationValue(initExpr, decl, env);\r", "-                if( value != null )\r", "-                    annoValues.add(value);\r", "-            }\r", "-            return annoValues;\r", "-        case ASTNode.NORMAL_ANNOTATION:\r", "-        case ASTNode.MARKER_ANNOTATION:\r", "-        case ASTNode.SINGLE_MEMBER_ANNOTATION:\r", "-            return Factory.createAnnotationMirror((Annotation)expr, decl, env);        \r", "-        case ASTNode.TYPE_LITERAL:\r", "-            throw new IllegalStateException(\"illegal expression \" + expr);     \r", "-        }\r", "-\r", "-        return null;\r", "-    }\r", "+\t */", "+\tpublic static AnnotationValue createAnnotationMemberValue(Object domValue,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  String elementName,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  AnnotationMirrorImpl anno, \t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ProcessorEnvImpl env)", "+\t{", "+\t\tif( domValue == null ) return null;", "+\t\tfinal Object converted = convertDOMValueToMirrorValue(domValue, elementName, anno, anno.getAnnotatedDeclaration(), env);", "+\t\treturn createAnnotationValue(converted, elementName, -1, anno, env);\t\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a04984c9ff0db0cb14a66948c7301b7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/DeclarationImpl.java", "commitBeforeChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "commitAfterChange": "2ed8d2842cd060fd2ed1992ac37d7e3f157e19c9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r     <A extends Annotation> A _getAnnotation(Class<A> annotationClass,\r                                             List<org.eclipse.jdt.core.dom.Annotation> annoInstances)", "signatureAfterChange": "      <A extends Annotation> A _getAnnotation(Class<A> annotationClass,                                             IResolvedAnnotation[] annoInstances)", "diff": ["-\r", "-    <A extends Annotation> A _getAnnotation(Class<A> annotationClass,\r", "-                                            List<org.eclipse.jdt.core.dom.Annotation> annoInstances)\r", "-    {\r", "-        final String annoTypeName = annotationClass.getName();\r", "-        if( annoInstances == null || annoInstances.size() == 0 ) return null;\r", "-        for( org.eclipse.jdt.core.dom.Annotation annoInstance :  annoInstances){\r", "-            final ITypeBinding binding = annoInstance.resolveTypeBinding();\r", "-            if(binding.isAnnotation() ){\r", "-                final String curTypeName = binding.getQualifiedName();\r", "-                if( annoTypeName.equals(curTypeName) ){\r", "-                    final AnnotationMirrorImpl annoMirror =\r", "-                        (AnnotationMirrorImpl)Factory.createAnnotationMirror(annoInstance, this, _env);\r", "-                    final AnnotationInvocationHandler handler = new AnnotationInvocationHandler(annoMirror);\r", "-                    return (A)Proxy.newProxyInstance(annotationClass.getClassLoader(),\r", "-                                                     new Class[]{ annotationClass }, handler );\r", "-                }\r", "-            }\r", "-        }\r", "-        return null;\r", "- \r", "-    }\r", "+", "+    <A extends Annotation> A _getAnnotation(Class<A> annotationClass,", "+                                            IResolvedAnnotation[] annoInstances)", "+    {", "+        final String annoTypeName = annotationClass.getName();", "+\t\tif( annoTypeName == null ) return null;", "+\t\tfinal int len = annoInstances == null ? 0 : annoInstances.length;", "+        if( len == 0 ) return null;", "+        for( IResolvedAnnotation annoInstance :  annoInstances){", "+            final ITypeBinding binding = annoInstance.getAnnotationType();", "+            if(binding.isAnnotation() ){", "+                final String curTypeName = binding.getQualifiedName();", "+                if( annoTypeName.equals(curTypeName) ){", "+                    final AnnotationMirrorImpl annoMirror =", "+                        (AnnotationMirrorImpl)Factory.createAnnotationMirror(annoInstance, this, _env);", "+                    final AnnotationInvocationHandler handler = new AnnotationInvocationHandler(annoMirror);", "+                    return (A)Proxy.newProxyInstance(annotationClass.getClassLoader(),", "+                                                     new Class[]{ annotationClass }, handler );", "+                }", "+            }", "+        }", "+        return null; ", "+    }"]}], "num": 16178}
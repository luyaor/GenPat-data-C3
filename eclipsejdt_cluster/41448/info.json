{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a55898cdca1e16665ec205fb79a03ec", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "579f1162009bc019412e79062631d125", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public TypeReferencePattern(char[] qualification, char[] simpleName, IType type, int matchRule)", "signatureAfterChange": " \tpublic TypeReferencePattern(char[] qualification, char[] simpleName, IType type, int matchRule)", "diff": ["-}", "-public TypeReferencePattern(char[] qualification, char[] simpleName, IType type, int matchRule) {", "-\tthis(qualification, simpleName, matchRule);", "-", "-\tthis.typeArguments = typeParameterNames(type);", "-}", "+\t */", "+\tpublic TypeReferencePattern(char[] qualification, char[] simpleName, IType type, int matchRule) {", "+\t\tthis(qualification, simpleName,matchRule);", "+\t\tstoreTypeSignaturesAndArguments(type);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bf27d2567f7685ee5f0a7a2ec8c3551", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "3c45dfdaa93e52d5836a3f1e183a61f2a8eac91b", "commitAfterChange": "7b5e14fca8a5cf7d78d10afc4f2876c54b0a784d", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " protected void consumeCastExpressionLL1()", "signatureAfterChange": " protected void consumeCastExpressionLL1()", "diff": ["-\tExpression castType,cast,exp;", "+\tExpression cast,exp;", "-\t\t\tcast = new CastExpression(\texp=expressionStack[expressionPtr+1] ,", "-\t\t\t\t\t\t\t\tcastType = getTypeReference(expressionStack[expressionPtr]));", "+\t\tcast = new CastExpression(", "+\t\t\texp=expressionStack[expressionPtr+1] ,", "+\t\t\tgetTypeReference(expressionStack[expressionPtr]));"]}], "num": 41448}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6dafc85e0083f56009d546a6f2bc006", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05216c24be534ff3232798d318ee88d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/SourceParameterDeclarationImpl.java", "commitBeforeChange": "80b216af2abfbc335ce04bf55fc463ba47e45873", "commitAfterChange": "8eb843ef75292ca86ade9a64a79ec382d0e5f4fa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic Collection<Modifier> getModifiers()", "signatureAfterChange": "            public TypeMirror getType()", "diff": ["-\t", "-\tpublic Collection<Modifier> getModifiers()", "-\t{", "-\t\tfinal SingleVariableDeclaration paramDecl = getAstNode();", "-\t\tif( paramDecl == null ) return Collections.emptyList();", "-\t\tfinal List<IExtendedModifier> extMods = paramDecl.modifiers();", "-        if( extMods == null || extMods.isEmpty() ) return Collections.emptyList();      ", "-        for( IExtendedModifier extMod : extMods ){", "-            if( extMod.isModifier() ){\t\t\t\t", "-\t\t\t\tfinal org.eclipse.jdt.core.dom.Modifier mod = ", "-\t\t\t\t\t(org.eclipse.jdt.core.dom.Modifier)extMod;", "-\t\t\t\tif( org.eclipse.jdt.core.dom.Modifier.isFinal(mod.getFlags()) )", "-\t\t\t\t\treturn Collections.singletonList(Modifier.FINAL);                ", "-            }", "-        }", "-\t\treturn Collections.emptyList();", "-\t}", "+    ", "+    public TypeMirror getType()", "+    {", "+    \tfinal SingleVariableDeclaration astNode = getAstNode();", "+    \tfinal Type  type = astNode.getType();", "+    \tif( type == null )", "+    \t\treturn Factory.createErrorClassType(EMPTY_STRING);", "+    \tfinal IVariableBinding varBinding = astNode.resolveBinding();", "+    \tif( varBinding == null ){", "+    \t\tString typeName = type.toString();", "+\t\t\t if( astNode.isVarargs() )", "+\t\t\t\t return Factory.createErrorArrayType(typeName, 1);", "+\t\t\t else", "+\t\t\t\t return Factory.createErrorClassType(typeName);", "+    \t}", "+    \telse{", "+    \t\t final ITypeBinding typeBinding = varBinding.getType();", "+    \t\t if( typeBinding == null ){", "+    \t\t\t String typeName = type.toString();", "+    \t\t\t if( astNode.isVarargs() )", "+    \t\t\t\t return Factory.createErrorArrayType(typeName, 1);", "+    \t\t\t else", "+    \t\t\t\t return Factory.createErrorClassType(typeName);", "+             }", "+    \t\t else{", "+\t        \tfinal TypeMirror mirrorType = Factory.createTypeMirror(typeBinding, _env);", "+\t            if(mirrorType == null )", "+\t                return Factory.createErrorClassType(type.toString());", "+\t            return mirrorType;", "+    \t     }", "+    \t}", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "373697b6481c13868efc20a480efece4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "875cc8d42787c90738d8dc077a25eb401e9e38f9", "commitAfterChange": "adfd584faf146517cb3e86f9f2b585f2851a3630", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " boolean areTypesEquivalent(TypeBinding one, TypeBinding two)", "signatureAfterChange": " boolean areMethodsEqual(MethodBinding one, MethodBinding substituteTwo)", "diff": ["-}", "-boolean areTypesEquivalent(TypeBinding one, TypeBinding two) {", "-\tif (one == two) return true;", "-\tif (!super.areTypesEqual(one.erasure(), two.erasure())) return false;", "+boolean areMethodsEqual(MethodBinding one, MethodBinding substituteTwo) {", "+\tTypeBinding[] oneParams = one.parameters;", "+\tTypeBinding[] twoParams = substituteTwo.parameters;", "+\tboolean checkParameters = false;", "+\tif (oneParams != twoParams) {", "+\t\tint length = oneParams.length;", "+\t\tif (length != twoParams.length) return false; // no match", "-\tif (one.isTypeVariable() && two.isTypeVariable()) {", "-\t\tTypeVariableBinding temp1 = (TypeVariableBinding) one;", "-\t\tTypeVariableBinding temp2 = (TypeVariableBinding) two;", "-\t\tif (temp1.rank != temp2.rank) return false;", "-\t\tif (!areTypesEquivalent(temp1.superclass, temp2.superclass)) return false;", "-\t\tReferenceBinding[] superInterfaces1 = temp1.superInterfaces;", "-\t\tReferenceBinding[] superInterfaces2 = temp2.superInterfaces;", "-\t\tif (superInterfaces1 != superInterfaces2) {", "-\t\t\tif (superInterfaces1 == null || superInterfaces2 == null) return false;", "-\t\t\tif (superInterfaces1.length != superInterfaces2.length) return false;", "-\t\t\tfor (int i = 0, l = superInterfaces1.length; i < l; i++)", "-\t\t\t\tif (!areTypesEquivalent(superInterfaces1[i], superInterfaces2[i])) return false;", "-\t\t}", "-\t}   ", "-\treturn true;", "-}", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tif (oneParams[i] != twoParams[i]) {", "+\t\t\t\tcheckParameters |= oneParams[i].leafComponentType().isParameterizedType();", "+\t\t\t\tif (!areTypesEqual(oneParams[i], twoParams[i])) {", "+\t\t\t\t\twhile (!checkParameters && ++i < length)", "+\t\t\t\t\t\tcheckParameters |= oneParams[i].leafComponentType().isParameterizedType();", "+\t\t\t\t\tif (checkParameters && one.areParameterErasuresEqual(substituteTwo)) // at least one parameter may cause a name clash", "+\t\t\t\t\t\tdetectNameClash(one, substituteTwo, true);", "+\t\t\t\t\treturn false; // no match but needed to check for a name clash", "+\treturn !detectNameClash(one, substituteTwo, checkParameters);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46711238244c3c0461a268b83d9ba123", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java", "commitBeforeChange": "2090b5298a9eb5bc7687aac3bc306c4718d688bb", "commitAfterChange": "7549708bfbb6541d509ec2f74894b85fedbf2954", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private ClassLoader _getExtensionClassLoader(final File[] jars)", "signatureAfterChange": " \t \tprivate List<FactoryContainer> getPluginFactoryContainers()", "diff": ["+\tprivate List<FactoryContainer> getPluginFactoryContainers()", "+\t{", "+\t\tList<FactoryContainer> factories = new ArrayList<FactoryContainer>();", "+\t\tIExtensionPoint extension = Platform.getExtensionRegistry().getExtensionPoint(", "+\t\t\t\t\"org.eclipse.jdt.apt.core\",  //$NON-NLS-1$ - name of plugin that exposes this extension", "+\t\t\t\t\"annotationProcessorFactory\"); //$NON-NLS-1$ - extension id", "-     */", "-    private ClassLoader _getExtensionClassLoader(final File[] jars)", "-    {", "-\t\t//TODO: check that this is actually creating the right classLoader, in the apt/Eclipse world.", "-        final ClassLoader myLoader = getClass().getClassLoader();", "- \t\tif (_verboseLoad)", "-\t\t\tSystem.err.println(\"I will create my own URL class loader to load these classes; my class loader type is \\\"\" + ", "-\t\t\t\t\tmyLoader.getClass().getName() + \"\\\".\");", "-\t\tfinal List<URL> temp = new ArrayList<URL>(jars.length);", "-\t\tfor (File jar : jars) {", "-\t\t\ttry {", "-\t\t\t\tfinal URL url = jar.toURL();", "-\t\t\t\tif (_verboseLoad) System.err.println(\"Conversion to URL succeeded: \" + url);", "-\t\t\t\ttemp.add(url);", "-\t\t\t}", "-\t\t\tcatch (MalformedURLException e) {", "-\t\t\t\tif (_verboseLoad) System.err.println(\"This URL was malformed; skipping.\");", "+\t\tIExtension[] extensions =  extension.getExtensions();", "+\t\tfor(int i = 0; i < extensions.length; i++) ", "+\t\t{", "+\t\t\tPluginFactoryContainer container = null;", "+\t\t\tIConfigurationElement [] configElements = extensions[i].getConfigurationElements();", "+\t\t\tfor(int j = 0; j < configElements.length; j++)", "+\t\t\t{", "+\t\t\t\tString elementName = configElements[j].getName();", "+\t\t\t\tif ( \"factory\".equals( elementName ) ) //$NON-NLS-1$ - name of configElement ", "+\t\t\t\t{ ", "+\t\t\t\t\tif ( container == null )", "+\t\t\t\t\t{", "+\t\t\t\t\t\tcontainer = new PluginFactoryContainer();", "+\t\t\t\t\t\tfactories.add( container );", "+\t\t\t\t\t}", "+\t\t\t\t\tcontainer.addFactoryName( configElements[j].getAttribute(\"class\") );", "+\t\t\t\t}", "-\t\tfinal URL[] urls = temp.toArray(new URL[temp.size()]);", "-\t\tfinal ClassLoader jarLoader = new URLClassLoader(urls, myLoader);", "-        return jarLoader;", "-    }", "+\t\treturn factories;", "+\t}"]}], "num": 26132}
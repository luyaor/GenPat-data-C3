{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a5f2bd944d3f0f1862fabda2f52dfca", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be1401d6db7c0ccee21b618984b95b49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest2.java", "commitBeforeChange": "1cd36da9dd049ac527dcab1976c08155d6c121b9", "commitAfterChange": "f2c2a11caa27156fb260986cef359f78136ce40c", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 104, "signatureBeforeChange": " \tpublic void test0502() throws JavaModelException", "signatureAfterChange": " \tpublic void test0502b() throws JavaModelException", "diff": ["-\tpublic void test0502() throws JavaModelException {", "-\t\t// test0502.A/0/i", "-\t\tASTNode declaringNode = unit.findDeclaringNode(localBinding.getKey());", "-\t\tassertEquals(\"Unexpected declaring node\", fragment, declaringNode); //$NON-NLS-1$", "-\t\t// test0502.A/0/0/j", "+\t */", "+\tpublic void test0502b() throws JavaModelException {", "+\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter\" , \"\", \"test0502\", \"A.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+\t\tCompilationUnit unit = (CompilationUnit)runConversion(sourceUnit, true);", "+\t\t", "+\t\t// 'j' in 'then' block in initializer", "-\t\tvariableDeclarationStatement = (VariableDeclarationStatement) block.statements().get(0);", "-\t\tfragment = (VariableDeclarationFragment) variableDeclarationStatement.fragments().get(0);", "-\t\tlocalBinding = fragment.resolveBinding();", "-\t\tdeclaringNode = unit.findDeclaringNode(localBinding.getKey());", "-\t\tassertEquals(\"Unexpected declaring node\", fragment, declaringNode); //$NON-NLS-1$", "+\t\tVariableDeclarationStatement variableDeclarationStatement = (VariableDeclarationStatement) block.statements().get(0);", "+\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) variableDeclarationStatement.fragments().get(0);", "+\t\tIVariableBinding localBinding = fragment.resolveBinding();", "+\t\tassertEquals(\"Unexpected key\", \"test0502/A/0/0/j\", localBinding.getKey()); //$NON-NLS-1$", "+\t}\t", "-\t\t// test0502.A/foo()/i", "-\t\tvariableDeclarationStatement = (VariableDeclarationStatement)getASTNode(unit, 0, 1, 0);", "-\t\tfragment = (VariableDeclarationFragment) variableDeclarationStatement.fragments().get(0);", "-\t\tlocalBinding = fragment.resolveBinding();", "-\t\tdeclaringNode = unit.findDeclaringNode(localBinding.getKey());", "-\t\tassertEquals(\"Unexpected declaring node\", fragment, declaringNode); //$NON-NLS-1$", "-\t\t// test0502.A/foo()/0/j", "-\t\tifStatement = (IfStatement) getASTNode(unit, 0, 1, 1);", "-\t\tblock = (Block)ifStatement.getThenStatement();", "-\t\tvariableDeclarationStatement = (VariableDeclarationStatement) block.statements().get(0);", "-\t\tfragment = (VariableDeclarationFragment) variableDeclarationStatement.fragments().get(0);", "-\t\tlocalBinding = fragment.resolveBinding();", "-\t\tdeclaringNode = unit.findDeclaringNode(localBinding.getKey());", "-\t\tassertEquals(\"Unexpected declaring node\", fragment, declaringNode); //$NON-NLS-1$", "-\t\t// test0502.A/foo()/1/j", "-\t\tifStatement = (IfStatement) getASTNode(unit, 0, 1, 1);", "-\t\tblock = (Block)ifStatement.getElseStatement();", "-\t\tvariableDeclarationStatement = (VariableDeclarationStatement) block.statements().get(0);", "-\t\tfragment = (VariableDeclarationFragment) variableDeclarationStatement.fragments().get(0);", "-\t\tlocalBinding = fragment.resolveBinding();", "-\t\tdeclaringNode = unit.findDeclaringNode(localBinding.getKey());", "-\t\tassertEquals(\"Unexpected declaring node\", fragment, declaringNode); //$NON-NLS-1$", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3cdda14dc5b8fc8cddbb2dc3296be6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "2824ba5423780c179acf9a0b6a91351bf791cbe9", "commitAfterChange": "88e68aadcb2bef0d42f85bcbc67cd3093bf6d159", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tprotected IJavaElement[] getUnqualifiedMethodHandle(IMethod method, boolean noDollar)", "signatureAfterChange": " \tprotected IJavaElement[] getUnqualifiedMethodHandle(IMethod method, boolean noDollar)", "diff": ["-\t\t\tStringBuffer unqualifiedName = new StringBuffer();", "-\t\t\tString qualifiedName = qualifiedParameterTypes[i];", "-\t\t\tint count = 0;", "-\t\t\twhile (qualifiedName.charAt(count) == Signature.C_ARRAY) {", "-\t\t\t\tunqualifiedName.append(Signature.C_ARRAY);", "-\t\t\t\t++count;", "-\t\t\t}", "-\t\t\tchar currentChar = qualifiedName.charAt(count);", "-\t\t\tif (currentChar == Signature.C_RESOLVED || currentChar == Signature.C_TYPE_VARIABLE) {", "-\t\t\t\tunqualifiedName.append(Signature.C_UNRESOLVED);", "-\t\t\t\tString simpleName = Signature.getSimpleName(qualifiedName.substring(count+1));", "-\t\t\t\tint lastDollar = simpleName.lastIndexOf('$');", "-\t\t\t\thasDollar |= lastDollar != -1;", "-\t\t\t\tint start = noDollar ? lastDollar + 1 : 0;", "-\t\t\t\tboolean sigStart = false;", "-\t\t\t\tfor (int j = start, length = simpleName.length(); j < length; j++) {", "-\t\t\t\t\tchar current = simpleName.charAt(j);", "-\t\t\t\t\tswitch (current) {", "-\t\t\t\t\t\tcase Signature.C_SUPER:", "-\t\t\t\t\t\tcase Signature.C_EXTENDS:", "-\t\t\t\t\t\tcase Signature.C_GENERIC_START:", "-\t\t\t\t\t\tcase Signature.C_NAME_END:", "-\t\t\t\t\t\t\tunqualifiedName.append(current);", "-\t\t\t\t\t\t\tsigStart = true;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\tif (sigStart) {", "-\t\t\t\t\t\t\t\tswitch(current) {", "-\t\t\t\t\t\t\t\t\tcase Signature.C_TYPE_VARIABLE :", "-\t\t\t\t\t\t\t\t\t\tunqualifiedName.append(Signature.C_UNRESOLVED);", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase Signature.C_GENERIC_END :", "-\t\t\t\t\t\t\t\t\tcase Signature.C_STAR :", "-\t\t\t\t\t\t\t\t\t\tunqualifiedName.append(current);", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\t\t\tunqualifiedName.append(Signature.C_UNRESOLVED);", "-\t\t\t\t\t\t\t\t\t\tunqualifiedName.append(current);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tsigStart = false;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tunqualifiedName.append(current);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tunqualifiedName.append(qualifiedName.substring(count, qualifiedName.length()));", "-\t\t\t}", "-\t\t\tunqualifiedParameterTypes[i] = unqualifiedName.toString();", "+\t\t\tStringBuffer unqualifiedTypeSig = new StringBuffer();", "+\t\t\tgetUnqualifiedTypeSignature(qualifiedParameterTypes[i], 0/*start*/, qualifiedParameterTypes[i].length(), unqualifiedTypeSig, noDollar);", "+\t\t\tunqualifiedParameterTypes[i] = unqualifiedTypeSig.toString();", "+\t\t\thasDollar |= unqualifiedParameterTypes[i].lastIndexOf('$') != -1;"]}], "num": 16997}
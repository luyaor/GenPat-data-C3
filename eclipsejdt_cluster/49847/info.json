{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0af69e62767a88b2f5b8f122c5e021f5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1277d6babbf5eda0361dff7ae2752131", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "03381d807dbcbd720d5182eff8864ea72de7b91c", "commitAfterChange": "0eda4899fe49711eb207c4c5710f5520d9ea2e2d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " void checkConcreteInheritedMethod(MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "signatureAfterChange": " void checkConcreteInheritedMethod(MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "diff": ["-\t\tif (originalInherited.returnType != concreteMethod.returnType) {", "-\t\t\tif (abstractMethod.returnType.leafComponentType().isParameterizedTypeWithActualArguments()) {", "-\t\t\t\tif (concreteMethod.returnType.leafComponentType().isRawType())", "-\t\t\t\t\tproblemReporter().unsafeReturnTypeOverride(concreteMethod, originalInherited, this.type);", "-\t\t\t} else if (abstractMethod.hasSubstitutedReturnType() && originalInherited.returnType.leafComponentType().isTypeVariable()) {", "-\t\t\t\tif (((TypeVariableBinding) originalInherited.returnType.leafComponentType()).declaringElement == originalInherited) { // see 81618 - type variable from inherited method", "-\t\t\t\t\tTypeBinding currentReturnType = concreteMethod.returnType.leafComponentType();", "-\t\t\t\t\tif (!currentReturnType.isTypeVariable() || ((TypeVariableBinding) currentReturnType).declaringElement != concreteMethod)", "-\t\t\t\t\t\tproblemReporter().unsafeReturnTypeOverride(concreteMethod, originalInherited, this.type);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\tif (originalInherited.returnType != concreteMethod.returnType)", "+\t\t\tif (!isAcceptableReturnTypeOverride(concreteMethod, abstractMethod))", "+\t\t\t\tproblemReporter().unsafeReturnTypeOverride(concreteMethod, originalInherited, this.type);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "540ee14903440c029094d4027b93603c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "5cd6d58769a50d0c17684a6868642380a176871e", "commitAfterChange": "c2673608acb4322092a3f06755b8abd4c15cab30", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-\t\tswitch (originalInherited.returnType.leafComponentType().kind()) {", "+\t\tTypeBinding originalReturnType = originalInherited.returnType.leafComponentType();", "+\t\tswitch (originalReturnType.kind()) {", "-\t\t\tcase Binding.TYPE_PARAMETER :", "-\t\t\t\tif (!currentMethod.returnType.leafComponentType().isTypeVariable())", "-\t\t\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, originalInherited, ((MethodDeclaration) currentMethod.sourceMethod()).returnType);", "+\t\t\tcase Binding.TYPE_PARAMETER : // see 81618", "+\t\t\t\tif (originalReturnType.isTypeVariable() && ((TypeVariableBinding) originalReturnType).declaringElement == originalInherited) {", "+\t\t\t\t\tTypeBinding returnType = currentMethod.returnType.leafComponentType();", "+\t\t\t\t\tif (!returnType.isTypeVariable() || ((TypeVariableBinding) returnType).declaringElement != currentMethod)", "+\t\t\t\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, originalInherited, ((MethodDeclaration) currentMethod.sourceMethod()).returnType);", "+\t\t\t\t}", "-\t\t}   ", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6f3ff64a7c25ce6b1b038d822e18291", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "03381d807dbcbd720d5182eff8864ea72de7b91c", "commitAfterChange": "0eda4899fe49711eb207c4c5710f5520d9ea2e2d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "signatureAfterChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "diff": ["-\tif (originalInherited.returnType != currentMethod.returnType) {", "-//\t\tif (currentMethod.returnType.needsUncheckedConversion(inheritedMethod.returnType)) {", "-//\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, originalInherited, this.type);", "-\t\tif (inheritedMethod.returnType.leafComponentType().isParameterizedTypeWithActualArguments() ", "-\t\t\t\t&& currentMethod.returnType.leafComponentType().isRawType()) {", "+\tif (originalInherited.returnType != currentMethod.returnType)", "+\t\tif (!isAcceptableReturnTypeOverride(currentMethod, inheritedMethod))", "-\t\t} else if (inheritedMethod.hasSubstitutedReturnType() && originalInherited.returnType.leafComponentType().isTypeVariable()) {", "-\t\t\tif (((TypeVariableBinding) originalInherited.returnType.leafComponentType()).declaringElement == originalInherited) { // see 81618 - type variable from inherited method", "-\t\t\t\tTypeBinding currentReturnType = currentMethod.returnType.leafComponentType();", "-\t\t\t\tif (!currentReturnType.isTypeVariable() || ((TypeVariableBinding) currentReturnType).declaringElement != currentMethod)", "-\t\t\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, originalInherited, this.type);", "-\t\t\t}", "-\t\t}", "-\t}"]}], "num": 49847}
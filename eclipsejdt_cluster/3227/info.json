{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "781f53c3b733b41c71ceba7b0039646a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "565fd5a17cbf45fd131e2193d5c0ca8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "e91110df42d468297a7f0f4f917c63937b06463a", "commitAfterChange": "347a15ddb09354fd82312f43e8a959f68c39e906", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate boolean collectElements()", "signatureAfterChange": " \tprivate boolean checkNegative4()", "diff": ["-\t */", "-\tprivate boolean collectElements() {", "-\t\t_elementN1 = _elementUtils.getTypeElement(\"targets.negative.pa.Negative1\");", "-\t\tif (null == _elementN1 || _elementN1.getKind() != ElementKind.CLASS) {", "-\t\t\treportError(\"Element Negative1 was not found or was not a class\");", "-\t\t\treturn false;", "-\t\t}", "-\t\t_elementN2 = _elementUtils.getTypeElement(\"targets.negative.pa.Negative2\");", "-\t\tif (null == _elementN2 || _elementN2.getKind() != ElementKind.CLASS) {", "-\t\t\treportError(\"Element Negative2 was not found or was not a class\");", "-\t\t\treturn false;", "-\t\t}", "-\t\t_elementN3 = _elementUtils.getTypeElement(\"targets.negative.pa.Negative3\");", "-\t\tif (null == _elementN3 || _elementN3.getKind() != ElementKind.CLASS) {", "-\t\t\treportError(\"Element Negative3 was not found or was not a class\");", "-\t\t\treturn false;", "-\t\t}", "-\t\t// TODO: try collecting a nested or secondary type that extends a missing type", "-\t\treturn true;", "-\t}", "+\t */", "+\tprivate boolean checkNegative4() {", "+\t\tTypeElement elementN4 = _elementUtils.getTypeElement(\"targets.negative.pa.Negative4\");", "+\t\tif (null == elementN4 || elementN4.getKind() != ElementKind.CLASS) {", "+\t\t\treportError(\"Element Negative3 was not found or was not a class\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tboolean foundZorkRaw = false;", "+\t\tboolean foundZorkOfString = false;", "+\t\tboolean foundIFooOfString = false;", "+\t\tboolean foundIBarRaw = false;", "+\t\tboolean foundIBarOfT1T2 = false;", "+\t\tList<? extends Element> enclosedElements = elementN4.getEnclosedElements();", "+\t\tfor (Element element : enclosedElements) {", "+\t\t\tElementKind kind = element.getKind();", "+\t\t\tif (kind != ElementKind.METHOD)", "+\t\t\t\tcontinue;", "+\t\t\tString name = element.getSimpleName().toString();", "+\t\t\tif (\"zorkRaw\".equals(name)) {", "+\t\t\t\tfoundZorkRaw = true;", "+\t\t\t\tTypeMirror retType = ((ExecutableElement)element).getReturnType();", "+\t\t\t\tTypeKind retKind = retType.getKind();", "+\t\t\t\t// javac returns ERROR type", "+\t\t\t\tif (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {", "+\t\t\t\t\treportError(\"Return type of Negative4.\" + name + \" should be DECLARED or ERROR, but is reported as \" + retKind);", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse if (\"zorkOfString\".equals(name)) {", "+\t\t\t\tfoundZorkOfString = true;", "+\t\t\t\tTypeMirror retType = ((ExecutableElement)element).getReturnType();", "+\t\t\t\tTypeKind retKind = retType.getKind();", "+\t\t\t\t// javac returns ERROR type", "+\t\t\t\tif (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {", "+\t\t\t\t\treportError(\"Return type of Negative4.\" + name + \" should be DECLARED or ERROR, but is reported as \" + retKind);", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse if (\"ifooOfString\".equals(name)) {", "+\t\t\t\tfoundIFooOfString = true;", "+\t\t\t\tTypeMirror retType = ((ExecutableElement)element).getReturnType();", "+\t\t\t\tTypeKind retKind = retType.getKind();", "+\t\t\t\t// javac returns ERROR type", "+\t\t\t\tif (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {", "+\t\t\t\t\treportError(\"Return type of Negative4.\" + name + \" should be DECLARED or ERROR, but is reported as \" + retKind);", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse if (\"ibarRaw\".equals(name)) {", "+\t\t\t\tfoundIBarRaw = true;", "+\t\t\t\tTypeMirror retType = ((ExecutableElement)element).getReturnType();", "+\t\t\t\tTypeKind retKind = retType.getKind();", "+\t\t\t\tif (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {", "+\t\t\t\t\treportError(\"Return type of Negative4.\" + name + \" should be DECLARED or ERROR, but is reported as \" + retKind);", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse if (\"ibarOfT1T2\".equals(name)) {", "+\t\t\t\tfoundIBarOfT1T2 = true;", "+\t\t\t\tTypeMirror retType = ((ExecutableElement)element).getReturnType();", "+\t\t\t\tTypeKind retKind = retType.getKind();", "+\t\t\t\t// javac returns ERROR type", "+\t\t\t\tif (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {", "+\t\t\t\t\treportError(\"Return type of Negative4.\" + name + \" should be DECLARED or ERROR, but is reported as \" + retKind);", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (!foundZorkRaw) {", "+\t\t\treportError(\"Didn't find element Negative4.zorkRaw\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tif (!foundZorkOfString) {", "+\t\t\treportError(\"Didn't find element Negative4.zorkOfString\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tif (!foundIFooOfString) {", "+\t\t\treportError(\"Didn't find element Negative4.ifooOfString\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tif (!foundIBarRaw) {", "+\t\t\treportError(\"Didn't find element Negative4.ibarRaw\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tif (!foundIBarOfT1T2) {", "+\t\t\treportError(\"Didn't find element Negative4.ibarOfT1T2\");", "+\t\t\treturn false;", "+\t\t}", "+\t\treturn true;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79dc863f3998a1e834e81db06e1d0b80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "e5afcb0ec821099a058acc796f2348c4c58a2e3e", "commitAfterChange": "1a36ae2092977e6a13134bbe916d1e02aefe6f2e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic boolean checkNegative4()", "signatureAfterChange": " \tpublic boolean checkNegative4() throws Exception", "diff": ["-\tpublic boolean checkNegative4() {", "+\tpublic boolean checkNegative4() throws Exception {", "-\t\tboolean foundZorkRaw = false;", "-\t\tboolean foundZorkOfString = false;", "-\t\tboolean foundIFooOfString = false;", "-\t\tboolean foundIBarRaw = false;", "-\t\tboolean foundIBarOfT1T2 = false;", "-\t\tList<? extends Element> enclosedElements = elementN4.getEnclosedElements();", "-\t\tfor (Element element : enclosedElements) {", "-\t\t\tElementKind kind = element.getKind();", "-\t\t\tif (kind != ElementKind.METHOD)", "-\t\t\t\tcontinue;", "-\t\t\tString name = element.getSimpleName().toString();", "-\t\t\tif (\"zorkRaw\".equals(name)) {", "-\t\t\t\tfoundZorkRaw = true;", "-\t\t\t\tTypeMirror retType = ((ExecutableElement)element).getReturnType();", "-\t\t\t\tTypeKind retKind = retType.getKind();", "-\t\t\t\t// javac returns ERROR type", "-\t\t\t\tif (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {", "-\t\t\t\t\treportError(\"Return type of Negative4.\" + name + \" should be DECLARED or ERROR, but is reported as \" + retKind);", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse if (\"zorkOfString\".equals(name)) {", "-\t\t\t\tfoundZorkOfString = true;", "-\t\t\t\tTypeMirror retType = ((ExecutableElement)element).getReturnType();", "-\t\t\t\tTypeKind retKind = retType.getKind();", "-\t\t\t\t// javac returns ERROR type", "-\t\t\t\tif (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {", "-\t\t\t\t\treportError(\"Return type of Negative4.\" + name + \" should be DECLARED or ERROR, but is reported as \" + retKind);", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse if (\"ifooOfString\".equals(name)) {", "-\t\t\t\tfoundIFooOfString = true;", "-\t\t\t\tTypeMirror retType = ((ExecutableElement)element).getReturnType();", "-\t\t\t\tTypeKind retKind = retType.getKind();", "-\t\t\t\t// javac returns ERROR type", "-\t\t\t\tif (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {", "-\t\t\t\t\treportError(\"Return type of Negative4.\" + name + \" should be DECLARED or ERROR, but is reported as \" + retKind);", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse if (\"ibarRaw\".equals(name)) {", "-\t\t\t\tfoundIBarRaw = true;", "-\t\t\t\tTypeMirror retType = ((ExecutableElement)element).getReturnType();", "-\t\t\t\tTypeKind retKind = retType.getKind();", "-\t\t\t\tif (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {", "-\t\t\t\t\treportError(\"Return type of Negative4.\" + name + \" should be DECLARED or ERROR, but is reported as \" + retKind);", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse if (\"ibarOfT1T2\".equals(name)) {", "-\t\t\t\tfoundIBarOfT1T2 = true;", "-\t\t\t\tTypeMirror retType = ((ExecutableElement)element).getReturnType();", "-\t\t\t\tTypeKind retKind = retType.getKind();", "-\t\t\t\t// javac returns ERROR type", "-\t\t\t\tif (retKind != TypeKind.DECLARED && retKind != TypeKind.ERROR) {", "-\t\t\t\t\treportError(\"Return type of Negative4.\" + name + \" should be DECLARED or ERROR, but is reported as \" + retKind);", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (!foundZorkRaw) {", "-\t\t\treportError(\"Didn't find element Negative4.zorkRaw\");", "-\t\t\treturn false;", "-\t\t}", "-\t\tif (!foundZorkOfString) {", "-\t\t\treportError(\"Didn't find element Negative4.zorkOfString\");", "-\t\t\treturn false;", "-\t\t}", "-\t\tif (!foundIFooOfString) {", "-\t\t\treportError(\"Didn't find element Negative4.ifooOfString\");", "-\t\t\treturn false;", "-\t\t}", "-\t\tif (!foundIBarRaw) {", "-\t\t\treportError(\"Didn't find element Negative4.ibarRaw\");", "-\t\t\treturn false;", "-\t\t}", "-\t\tif (!foundIBarOfT1T2) {", "-\t\t\treportError(\"Didn't find element Negative4.ibarOfT1T2\");", "-\t\t\treturn false;", "-\t\t}", "-\t\treturn true;", "+\t\t", "+\t\treturn checkModel(Collections.singletonList(elementN4), NEGATIVE_4_MODEL, \"Negative4\");"]}], "num": 3227}
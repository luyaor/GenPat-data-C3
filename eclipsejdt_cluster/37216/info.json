{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55538ede9198e123cae102f8ee925851", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ca1470b6e5c421324a400acdcd2bea6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "6cd0a226d17326db63c51160cb70dbe9cbeb05f8", "commitAfterChange": "bd7343199b4bc0fe1543353d82fa97e4de0d5c10", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public final void arrayInitializer(int length)", "signatureAfterChange": " public final void arrayInitializer(int length)", "diff": ["-\tint searchPosition = length == 0 ? this.endPosition + 1 : ai.expressions[0].sourceStart;", "-\ttry {", "-\t\t//does not work with comments(that contain '{') nor '{' describes as a unicode....\t\t", "-\t\twhile (this.scanner.source[--searchPosition] != '{'){/*empty*/}", "-\t} catch (IndexOutOfBoundsException ex) {", "-\t\t//should never occur (except for strange cases like whose describe above)", "-\t\tsearchPosition = (length == 0 ? this.endPosition : ai.expressions[0].sourceStart) - 1;", "-\t}", "-\tai.sourceStart = searchPosition;", "+\tai.sourceStart = this.intStack[this.intPtr--];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9dba6b7b8ad3d9cfc35c19420af4816", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "6cd0a226d17326db63c51160cb70dbe9cbeb05f8", "commitAfterChange": "bd7343199b4bc0fe1543353d82fa97e4de0d5c10", "methodNumberBeforeChange": 346, "methodNumberAfterChange": 347, "signatureBeforeChange": " public final void memberValueArrayInitializer(int length)", "signatureAfterChange": " public final void memberValueArrayInitializer(int length)", "diff": ["-\tint searchPosition = length == 0 ? this.endPosition + 1 : memberValueArrayInitializer.memberValues[0].sourceStart;", "-\ttry {", "-\t\t//does not work with comments(that contain '{') nor '{' describes as a unicode....\t\t", "-\t\twhile (this.scanner.source[--searchPosition] != '{') {/*empty*/}", "-\t} catch (IndexOutOfBoundsException ex) {", "-\t\t//should never occur (except for strange cases like whose describe above)", "-\t\tsearchPosition = (length == 0 ? this.endPosition : memberValueArrayInitializer.memberValues[0].sourceStart) - 1;", "-\t}", "-\tmemberValueArrayInitializer.sourceStart = searchPosition;", "+\tmemberValueArrayInitializer.sourceStart = this.intStack[this.intPtr--];"]}], "num": 37216}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc1a090c589a45f082570a0c6d14cedd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4de4a87a6748bab98f76b0987738e19a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyTests.java", "commitBeforeChange": "421333df924e824d9a387af5995df2c7b41074aa", "commitAfterChange": "c7529f73b947c3db96e8d513b4c29b957d02901f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void testCancel() throws JavaModelException", "signatureAfterChange": " public void testCancel() throws JavaModelException", "diff": ["-\tfinal IProgressMonitor monitor = TestProgressMonitor.getInstance();", "-\tfinal boolean[] isCanceled = new boolean[] {false};", "+\tboolean isCanceled = false;", "+\tIType type = getCompilationUnit(\"TypeHierarchy\", \"src\", \"p1\", \"X.java\").getType(\"X\");", "+\tIRegion region = JavaCore.newRegion();", "+\tregion.add(getPackageFragmentRoot(\"TypeHierarchy\", \"src\"));", "-\t\tRunnable runnable = new Runnable() {", "-\t\t\tpublic void run() {", "-\t\t\t\ttry {", "-\t\t\t\t\tIType type = getCompilationUnit(\"TypeHierarchy\", \"src\", \"p1\", \"X.java\").getType(\"X\");", "-\t\t\t\t\tIRegion region = JavaCore.newRegion();", "-\t\t\t\t\tregion.add(getPackageFragmentRoot(\"TypeHierarchy\", \"src\"));", "-\t\t\t\t\ttype.getJavaProject().newTypeHierarchy(type, region, monitor);", "-\t\t\t\t} catch (JavaModelException jme) {", "-\t\t\t\t\tassertTrue(\"Code not correct for JavaModelException: \" + jme, false);\t\t\t\t\t", "-\t\t\t\t\treturn;", "-\t\t\t\t} catch (OperationCanceledException e) {", "-\t\t\t\t\tisCanceled[0] = true;", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t};", "-\t\tThread runner = new Thread(runnable);", "-\t\trunner.setPriority(Thread.MIN_PRIORITY);", "-\t\tmonitor.setCanceled(true);", "-\t\trunner.start();", "-\t\trunner.join();", "-\t\tassertTrue(\"Operation should have thrown an operation canceled exception\", isCanceled[0]);", "-\t} catch (InterruptedException ie) {", "+\t\tTestProgressMonitor monitor = TestProgressMonitor.getInstance();", "+\t\tmonitor.setCancelledCounter(1);", "+\t\ttype.getJavaProject().newTypeHierarchy(type, region, monitor);", "+\t} catch (OperationCanceledException e) {", "+\t\tisCanceled = true;", "+\tassertTrue(\"Operation should have thrown an operation canceled exception\", isCanceled);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66d9b4df17b8a54807ecd51a69b0e929", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RenameTests.java", "commitBeforeChange": "421333df924e824d9a387af5995df2c7b41074aa", "commitAfterChange": "c7529f73b947c3db96e8d513b4c29b957d02901f", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void testRenameFieldsWithCancel() throws CoreException", "signatureAfterChange": " public void testRenameFieldsWithCancel() throws CoreException", "diff": ["-\tfinal IProgressMonitor monitor = TestProgressMonitor.getInstance();", "-\tfinal boolean[] isCanceled = new boolean[] {false};", "-\ttry {", "-\t\tRunnable runnable = new Runnable() {", "-\t\t\tpublic void run() {", "-\t\t\t\ttry {", "-\t\t\t\t\tString addition = \"new1\";", "-\t\t\t\t\tIType type = RenameTests.this.cu.getType(\"X\");", "-\t\t\t\t\tIField[] iFields = type.getFields();", "-\t\t\t\t\tString[] newNames = new String[iFields.length];", "-\t\t\t\t\tint i;", "-\t\t\t\t\tfor (i = 0; i < iFields.length; i++) {", "-\t\t\t\t\t\tIField f = iFields[i];", "-\t\t\t\t\t\tnewNames[i] = addition + f.getElementName();", "-\t\t\t\t\t}", "-\t\t\t\t\trenamePositive(iFields, new IJavaElement[] {type}, newNames, false, false, monitor);", "-\t\t\t\t} catch (JavaModelException jme) {", "-\t\t\t\t\tassertTrue(\"Code not correct for JavaModelException: \" + jme, false);\t\t\t\t\t", "-\t\t\t\t\treturn;", "-\t\t\t\t} catch (OperationCanceledException e) {", "-\t\t\t\t\tisCanceled[0] = true;", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t};", "-\t\tThread runner = new Thread(runnable);", "-\t\tmonitor.setCanceled(true);", "-\t\trunner.start();", "-\t\trunner.join();", "-\t\tassertTrue(\"Operation should have thrown an operation canceled exception\", isCanceled[0]);", "-\t} catch (InterruptedException ie) {", "+\tboolean isCanceled = false;", "+\tString addition = \"new1\";", "+\tIType type = RenameTests.this.cu.getType(\"X\");", "+\tIField[] iFields = type.getFields();", "+\tString[] newNames = new String[iFields.length];", "+\tint i;", "+\tfor (i = 0; i < iFields.length; i++) {", "+\t\tIField f = iFields[i];", "+\t\tnewNames[i] = addition + f.getElementName();", "+\ttry {", "+\t\tTestProgressMonitor monitor = TestProgressMonitor.getInstance();", "+\t\tmonitor.setCancelledCounter(1);", "+\t\trenamePositive(iFields, new IJavaElement[] {type}, newNames, false, false, monitor);", "+\t} catch (OperationCanceledException e) {", "+\t\tisCanceled = true;", "+\t}", "+\tassertTrue(\"Operation should have thrown an operation canceled exception\", isCanceled);"]}], "num": 37589}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ee968510488ef876579fc152c351c4a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a57cbb79b3facff2b624a77c9a3a0a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "80a36bf53ae731edac012c99749b4fd073634fd5", "commitAfterChange": "775667d78092a7c5a2c35b021921f25b4037d7f4", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic Binding getBinding(char[] name, int mask, InvocationSite invocationSite, boolean needResolve)", "signatureAfterChange": " \tpublic Binding getBinding(char[] name, int mask, InvocationSite invocationSite, boolean needResolve)", "diff": ["-\t\t\t", "+", "-\t", "+", "-\t\t\t\t\t\t\tFieldBinding fieldBinding =", "-\t\t\t\t\t\t\t\tclassScope.findField(enclosingType, name, invocationSite, needResolve);", "+\t\t\t\t\t\t\tFieldBinding fieldBinding = classScope.findField(enclosingType, name, invocationSite, needResolve);", "-\t", "+", "-\t\t\t\t\t\t\t\t\tif (enclosingType == fieldBinding.declaringClass", "-\t\t\t\t\t\t\t\t\t\t|| environment().options.complianceLevel >= ClassFileConstants.JDK1_4){", "+\t\t\t\t\t\t\t\t\tif (enclosingType == fieldBinding.declaringClass || environment().options.complianceLevel >= ClassFileConstants.JDK1_4) {", "-\t", "-\t\t\t\t\t\t\t\tif (foundField == null", "-\t\t\t\t\t\t\t\t\t|| (foundField.problemId() == NotVisible", "-\t\t\t\t\t\t\t\t\t\t&& fieldBinding.problemId() != NotVisible)) {", "+", "+\t\t\t\t\t\t\t\tif (foundField == null || (foundField.problemId() == NotVisible && fieldBinding.problemId() != NotVisible)) {", "-\t", "+", "-\t\t\t\t\tif (foundField.isValidBinding()){", "-\t\t\t\t\t\tif (foundDepth > 0){", "+\t\t\t\t\tif (foundField.isValidBinding()) {", "+\t\t\t\t\t\tif (foundDepth > 0) {", "+", "+\t\t\t\tif (environment().options.complianceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t// at this point the scope is a compilation unit scope & need to check for imported static fields", "+\t\t\t\t\tCompilationUnitScope unitScope = (CompilationUnitScope) scope;", "+\t\t\t\t\tImportBinding[] imports = unitScope.imports;", "+\t\t\t\t\tif (imports != null) {", "+\t\t\t\t\t\t// check single static imports", "+\t\t\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {", "+\t\t\t\t\t\t\tImportBinding importBinding = imports[i];", "+\t\t\t\t\t\t\tif (importBinding.isStatic() && !importBinding.onDemand) {", "+\t\t\t\t\t\t\t\tif (CharOperation.equals(importBinding.compoundName[importBinding.compoundName.length - 1], name)) {", "+\t\t\t\t\t\t\t\t\tif (unitScope.resolveSingleImport(importBinding) != null && importBinding.resolvedImport instanceof FieldBinding) {", "+\t\t\t\t\t\t\t\t\t\tImportReference importReference = importBinding.reference;", "+\t\t\t\t\t\t\t\t\t\tif (importReference != null) importReference.used = true;", "+\t\t\t\t\t\t\t\t\t\treturn importBinding.resolvedImport; // already know its visible", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// check on demand imports", "+\t\t\t\t\t\tboolean foundInImport = false;", "+\t\t\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {", "+\t\t\t\t\t\t\tImportBinding importBinding = imports[i];", "+\t\t\t\t\t\t\tif (importBinding.isStatic() && importBinding.onDemand) {", "+\t\t\t\t\t\t\t\tBinding resolvedImport = importBinding.resolvedImport;", "+\t\t\t\t\t\t\t\tif (resolvedImport instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\t\t\tFieldBinding temp = findField((ReferenceBinding) resolvedImport, name, invocationSite, needResolve);", "+\t\t\t\t\t\t\t\t\tif (temp != null) {", "+\t\t\t\t\t\t\t\t\t\tif (!temp.isValidBinding()) {", "+\t\t\t\t\t\t\t\t\t\t\tproblemField = temp;", "+\t\t\t\t\t\t\t\t\t\t} else if (temp.isStatic()) {", "+\t\t\t\t\t\t\t\t\t\t\tImportReference importReference = importBinding.reference;", "+\t\t\t\t\t\t\t\t\t\t\tif (importReference != null) importReference.used = true;", "+\t\t\t\t\t\t\t\t\t\t\tif (foundInImport)", "+\t\t\t\t\t\t\t\t\t\t\t\t// Answer error binding -- import on demand conflict; name found in two import on demand packages.", "+\t\t\t\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, Ambiguous);", "+\t\t\t\t\t\t\t\t\t\t\tfoundField = temp;", "+\t\t\t\t\t\t\t\t\t\t\tfoundInImport = true;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (foundField != null) return foundField;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3a521f57503136b170be01da2ac3c2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "1a18ae0a7f87984c327278bf2097db1fc176b8aa", "commitAfterChange": "16639d06fb7d968f56130bc74dcaf6bcb3941b64", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r \r \tprotected void updateIndex(Openable element, IResourceDelta delta)", "signatureAfterChange": "\r \r protected void updateIndex(Openable element, IResourceDelta delta)", "diff": ["-\tprotected void updateIndex(Openable element, IResourceDelta delta) {\r", "+protected void updateIndex(Openable element, IResourceDelta delta) {\r", "+\ttry {\t\t\r", "-\t\t\t\t\t\tindexManager.indexAll((IProject) delta.getResource());\r", "+\t\t\t\t\t\tindexManager.indexAll(element.getJavaProject().getProject());\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT :\r", "+\t\t\t\tswitch (delta.getKind()) {\r", "+\t\t\t\t\tcase IResourceDelta.ADDED:\r", "+\t\t\t\t\tcase IResourceDelta.CHANGED:\r", "+\t\t\t\t\t\tif (element instanceof JarPackageFragmentRoot) {\r", "+\t\t\t\t\t\t\tJarPackageFragmentRoot root = (JarPackageFragmentRoot)element;\r", "+\t\t\t\t\t\t\t// index jar file only once (if the root is in its declaring project)\r", "+\t\t\t\t\t\t\tif (root.getJavaProject().getProject().getFullPath().isPrefixOf(root.getPath())) {\r", "+\t\t\t\t\t\t\t\tindexManager.indexJarFile(root.getPath(), root.getJavaProject().getElementName());\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase IResourceDelta.REMOVED:\r", "+\t\t\t\t\t\t// keep index in case it is added back later in this session\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r", "+\t\t\t\t// don't break as packages of the package fragment root can be indexed below\r", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT :\r", "+\t\t\t\tswitch (delta.getKind()) {", "+\t\t\t\t\tcase IResourceDelta.ADDED:\r", "+\t\t\t\t\tcase IResourceDelta.REMOVED:\r", "+\t\t\t\t\t\tIPackageFragment pkg = null;\r", "+\t\t\t\t\t\tif (element instanceof IPackageFragmentRoot) {\r", "+\t\t\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)element;\r", "+\t\t\t\t\t\t\tpkg = root.getPackageFragment(\"\");\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tpkg = (IPackageFragment)element;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tString name = pkg.getElementName();\r", "+\t\t\t\t\t\tIResourceDelta[] children = delta.getAffectedChildren();\r", "+\t\t\t\t\t\tfor (int i = 0, length = children.length; i < length; i++) {\r", "+\t\t\t\t\t\t\tIResourceDelta child = children[i];\r", "+\t\t\t\t\t\t\tIResource resource = child.getResource();\r", "+\t\t\t\t\t\t\tif (resource instanceof IFile) {\r", "+\t\t\t\t\t\t\t\tString extension = resource.getFileExtension();\r", "+\t\t\t\t\t\t\t\tif (\"java\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t\t\tOpenable cu = (Openable)pkg.getCompilationUnit(resource.getName());\r", "+\t\t\t\t\t\t\t\t\tthis.updateIndex(cu, child);\r", "+\t\t\t\t\t\t\t\t} else if (\"class\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t\t\tOpenable classFile = (Openable)pkg.getClassFile(resource.getName());\r", "+\t\t\t\t\t\t\t\t\tthis.updateIndex(classFile, child);\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "-\t\t\t\tIFile file = (IFile) delta.getResource();\r", "+\t\t\t\tIFile file = (IFile) element.getUnderlyingResource();\r", "+\t} catch (CoreException e) {\r", "+\t\t// ignore: index won't be updated\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fca0af6d1a02fb02b7a58493ec57cce9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDeltaBuilder.java", "commitBeforeChange": "ee7a9f184cb78c9a997b3d97c102d52d6cad8cc9", "commitAfterChange": "5ce130e25c355987e77b700c026948aca2c3cdd7", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 8, "signatureBeforeChange": " private void putElementInfo(IJavaElement element, JavaElementInfo info)", "signatureAfterChange": " private void findAnnotationChanges(IAnnotation[] oldAnnotations, IAnnotation[] newAnnotations, IJavaElement parent)", "diff": ["+private void findAnnotationChanges(IAnnotation[] oldAnnotations, IAnnotation[] newAnnotations, IJavaElement parent) {", "+\tArrayList annotationDeltas = null;", "+\tfor (int i = 0, length = newAnnotations.length; i < length; i++) {", "+\t\tIAnnotation newAnnotation = newAnnotations[i];", "+\t\tObject oldInfo = this.annotationInfos.remove(newAnnotation);", "+\t\tif (oldInfo == null) {", "+\t\t\tJavaElementDelta annotationDelta = new JavaElementDelta(newAnnotation);", "+\t\t\tannotationDelta.added();", "+\t\t\tif (annotationDeltas == null) annotationDeltas = new ArrayList();", "+\t\t\tannotationDeltas.add(annotationDelta);", "+\t\t\tcontinue;", "+\t\t} else {", "+\t\t\tAnnotationInfo newInfo = null;", "+\t\t\ttry { ", "+\t\t\t\tnewInfo = (AnnotationInfo) ((JavaElement) newAnnotation).getElementInfo();", "+\t\t\t} catch (JavaModelException npe) {", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tif (!Util.equalArraysOrNull(((AnnotationInfo) oldInfo).members, newInfo.members)) {", "+\t\t\t\tJavaElementDelta annotationDelta = new JavaElementDelta(newAnnotation);", "+\t\t\t\tannotationDelta.changed(IJavaElementDelta.F_CONTENT);", "+\t\t\t\tif (annotationDeltas == null) annotationDeltas = new ArrayList();", "+\t\t\t\tannotationDeltas.add(annotationDelta);", "+\t\t\t}\t\t", "+\t\t}", "+\t}", "+\tfor (int i = 0, length = oldAnnotations.length; i < length; i++) {", "+\t\tIAnnotation oldAnnotation = oldAnnotations[i];", "+\t\tif (this.annotationInfos.remove(oldAnnotation) != null) {", "+\t\t\tJavaElementDelta annotationDelta = new JavaElementDelta(oldAnnotation);", "+\t\t\tannotationDelta.removed();", "+\t\t\tif (annotationDeltas == null) annotationDeltas = new ArrayList();", "+\t\t\tannotationDeltas.add(annotationDelta);\t\t}", "+\t}", "+\tif (annotationDeltas == null)", "+\t\treturn;", "+\tint size = annotationDeltas.size();", "+\tif (size > 0) {", "+\t\tJavaElementDelta parentDelta = this.delta.changed(parent, IJavaElementDelta.F_ANNOTATIONS);", "+\t\tparentDelta.annotationDeltas = (IJavaElementDelta[]) annotationDeltas.toArray(new IJavaElementDelta[size]);", "+\t}", "+}", "-private void putElementInfo(IJavaElement element, JavaElementInfo info) {", "-\tthis.infos.put(element, info);", "-}"]}], "num": 7177}
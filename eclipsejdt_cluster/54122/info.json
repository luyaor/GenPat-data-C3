{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "13d6e205f036b6be090e684334dbed66", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18ad5472c043dc9eed8e2cb6867c5b7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "0106f28c24dc45effaea6c15d2fd93b3b22539d8", "commitAfterChange": "b7cb1f5ede11fb6e27dd568ceeb96e4eba267c2f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic  FileGenerationResult generateFileDuringReconcile( \t\t\tICompilationUnit parentCompilationUnit, String typeName, \t\t\tString contents, WorkingCopyOwner workingCopyOwner, \t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor )", "signatureAfterChange": " \tpublic  FileGenerationResult generateFileDuringReconcile( \t\t\tICompilationUnit parentCompilationUnit, String typeName, \t\t\tString contents, WorkingCopyOwner workingCopyOwner, \t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor )  \t \tthrows CoreException", "diff": ["+\t", "+\tthrows CoreException", "-\t\t// type-generation during reconcile only works if the generated source", "-\t\t// folder is created and added to the project's source path. ", "-\t\tif ( ! isGeneratedSourceFolderConfigured() )", "-\t\t\treturn null;", "+\t\tfinal boolean sourcepathUpdated = ensureGeneratedSourceFolder(progressMonitor);", "-\t\t\t\tresult = new FileGenerationResult((IFile)workingCopy.getResource(), true);", "+\t\t\t\tresult = new FileGenerationResult((IFile)workingCopy.getResource(), true, sourcepathUpdated);", "-\t\t\t\tresult = new FileGenerationResult((IFile)workingCopy.getResource(), modified);", "+\t\t\t\tresult = new FileGenerationResult((IFile)workingCopy.getResource(), modified, sourcepathUpdated);", "-\t\treturn new FileGenerationResult((IFile)workingCopy.getResource(), true);", "+\t\treturn new FileGenerationResult((IFile)workingCopy.getResource(), true, sourcepathUpdated);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a0029b1633e95a8bf4bf834b65866b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "4ce91958103bed0391aa763e032ff18d6e80eeff", "commitAfterChange": "35ce3cd769971f5dca3aae3c48f3088e32084ea9", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["+\t\tboolean genericSignatureNeeded = this.requiresGenericSignature || blockScope.compilerOptions().generateGenericSignatureForLambdaExpressions;", "-\t\t\t\tif (this.requiresGenericSignature) {", "+\t\t\t\tif (genericSignatureNeeded) {", "-\t\t\tif (this.requiresGenericSignature)", "+\t\t\tif (genericSignatureNeeded)", "-\t\t\tif (this.requiresGenericSignature) {", "+\t\t\tif (genericSignatureNeeded) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d7fc0635d8bd1279c1ede952af0bd70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "1a18ae0a7f87984c327278bf2097db1fc176b8aa", "commitAfterChange": "16639d06fb7d968f56130bc74dcaf6bcb3941b64", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, IClasspathEntry[] classpath)", "signatureAfterChange": "\r \tprotected boolean traverseDelta(IResourceDelta delta, IClasspathEntry[] classpath)", "diff": ["-\t\tfProcessChildren = true;\r", "+\t\tboolean processChildren = true;\r", "-\t\t\t\t\tthis.updateCurrentDeltaAndIndex(element, delta);\r", "+\t\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(element, delta);\r", "-\t\t\t\tthis.updateCurrentDeltaAndIndex(project, delta);\r", "+\t\t\t\tprocessChildren = this.updateCurrentDeltaAndIndex(project, delta);\r", "-\t\t\t\tfProcessChildren = classpath != null;\r", "+\t\t\t\tprocessChildren = classpath != null;\r", "-\t\tif (fProcessChildren) {\r", "+\t\tif (processChildren) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91d74d894a514bbe523dd574ba50bbb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/junit/extension/TestCase.java", "commitBeforeChange": "afe8e7c03c9e057a9ab6bf025b43a423a4494448", "commitAfterChange": "10cca24df480719d1a06391159cf8b7088d76566", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public static List buildTestsList(Class evaluationTestClass, int inheritedDepth)", "signatureAfterChange": "  public static List buildTestsList(Class evaluationTestClass, int inheritedDepth)", "diff": ["-\t\t\tif (ONLY_SUFFIX != null && methName.endsWith(ONLY_SUFFIX)) {", "-\t\t\t\tif (!onlyNames.contains(methName)) {", "-\t\t\t\t\tonlyNames.add(methName);", "+\t\t\tif (methName.startsWith(METHOD_PREFIX)) {", "+", "+\t\t\t\t// look if this is a run only method", "+\t\t\t\tboolean isOnly = RUN_ONLY_ID != null && methName.substring(methodPrefixLength).startsWith(RUN_ONLY_ID);", "+\t\t\t\tif (isOnly) {", "+\t\t\t\t\tif (!onlyNames.contains(methName)) {", "+\t\t\t\t\t\tonlyNames.add(methName);", "+\t\t\t\t\t}", "+\t\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\telse if (methName.startsWith(METHOD_PREFIX)) {", "+", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1f701e73c4249915b996d980034f068", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "4df4908c4ecebbbdf8c6fb47574e6a6df4a3ab13", "commitAfterChange": "fc8d0757e073a20297f7d2849974269cd37c5c86", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "  \tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block, boolean textOnNewLine)", "signatureAfterChange": "  \tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block, boolean textOnNewLine)", "diff": ["+\t\tboolean isValidHtmlSeparatorTag = max > 0 && isHtmlSeparatorTag && closingTag;", "-\t\t    if (max > 0 && isHtmlSeparatorTag && closingTag) {", "+\t\t    if (isValidHtmlSeparatorTag) {", "-\t    if (max > 0 && isHtmlSeparatorTag) {", "-\t\t\treturn 1;", "-\t\t}", "-\t    return 0;", "+\t    return isValidHtmlSeparatorTag ? 1 : 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd6641f72997060080b83bd1f7116638", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatch.java", "commitBeforeChange": "b4304f5a0ae3fd0a899e4f86a55dafea7f0ca4a1", "commitAfterChange": "38faf3efd9d7a9e66ede29f2210a34a5031698a0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t\t \tprivate static APTResult runAPT(final List<AnnotationProcessorFactory> factories, \t\t\tIJavaProject javaProj, \t\t\tIFile[] files, \t\t\tICompilationUnit compilationUnit, \t\t\tboolean isFullBuild)", "signatureAfterChange": " \tprivate static APTResult runAPT(final List<AnnotationProcessorFactory> factories, \t\t\tIJavaProject javaProj, \t\t\tIFile[] files, \t\t\tICompilationUnit compilationUnit, \t\t\tboolean isFullBuild)", "diff": ["+\t */", "+\t\t       ", "+\t\tboolean building = files != null;", "-\t\tif ( files != null )", "+\t\tif ( building )", "+\t\t\t// If we're building, types can be generated, so we", "+\t\t\t// want to run this as an atomic workspace operation", "+\t\t\t IWorkspace workspace = ResourcesPlugin.getWorkspace();", "+\t\t\t try {", "+\t\t\t\t workspace.run(runnable, schedulingRule, IWorkspace.AVOID_UPDATE, null);", "+\t\t\t }", "+\t\t\t catch (CoreException ce) {", "+\t\t\t\t AptPlugin.log(ce, \"Could not run APT\"); //$NON-NLS-1$", "+\t\t\t }", "+\t\t\t// Reconciling, so we do not want to run this as an atomic workspace", "+\t\t\t// operation. If we do, it is easy to have locking issues when someone", "+\t\t\t// calls a reconcile from within a workspace lock", "-\t\t\tschedulingRule = null;", "-\t\t}", "-\t\t", "-\t\ttry", "-\t\t{", "-\t\t\tIWorkspace w = ResourcesPlugin.getWorkspace();", "-\t\t\tw.run( runnable, schedulingRule, IWorkspace.AVOID_UPDATE, null );", "-\t\t}", "-\t\tcatch( CoreException ce )", "-\t\t{", "-\t\t\tAptPlugin.log(ce, \"Could not run APT\"); //$NON-NLS-1$", "+\t\t\trunnable.run(null);"]}], "num": 54122}
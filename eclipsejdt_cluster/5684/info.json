{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5871878f9e7e1991b656bbf85d2fc95", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76d7cb6ea8507de552e8396ddc4a8172", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/RegionBasedHierarchyBuilder.java", "commitBeforeChange": "5ec4215ec4f52f55dcb6e314c5f755ceba34fff6", "commitAfterChange": "5a4580d346b40161405692269366aba5f28266bb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tprivate void createTypeHierarchyBasedOnRegion(ArrayList allTypesInRegion)", "signatureAfterChange": "\r private void createTypeHierarchyBasedOnRegion(ArrayList allTypesInRegion)", "diff": ["-\t */\r", "-\tprivate void createTypeHierarchyBasedOnRegion(ArrayList allTypesInRegion) {\r", "-\t\t\r", "-\t\tint size = allTypesInRegion.size();\r", "-\t\tif (size != 0) {\r", "-\t\t\tthis.infoToHandle = new HashMap(size);\r", "-\t\t}\r", "-\t\tArrayList temp = new ArrayList(size);\r", "-\t\ttypes : for (int i = 0; i < size; i++) {\r", "-\t\t\ttry {\r", "-\t\t\t\tIType type = (IType) allTypesInRegion.get(i);\r", "-\t\t\t\tIGenericType info = (IGenericType) ((JavaElement) type).getRawInfo();\r", "-\t\t\t\ttemp.add(info);\r", "-\t\t\t\tif (info.isBinaryType()) {\r", "-\t\t\t\t\tthis.infoToHandle.put(info, type.getParent());\r", "-\t\t\t\t}\r", "-\t\t\t\tworked(1);\r", "-\t\t\t} catch (JavaModelException npe) {\r", "-\t\t\t\tcontinue types;\r", "-\t\t\t}\r", "-\t\t}\r", "+ */\r", "+private void createTypeHierarchyBasedOnRegion(ArrayList allTypesInRegion) {\r", "+\t\r", "+\tint size = allTypesInRegion.size();\r", "+\tif (size != 0) {\r", "+\t\tthis.infoToHandle = new HashMap(size);\r", "+\t}\r", "+\tIType[] types = new IType[size];\r", "+\tallTypesInRegion.toArray(types);\r", "-\t\tsize = temp.size();\r", "-\t\tif (size > 0) {\r", "-\t\t\tIGenericType[] genericTypes = new IGenericType[size];\r", "-\t\t\ttemp.toArray(genericTypes);\r", "-\t\t\tIType focusType = this.getType();\r", "-\t\t\tCompilationUnit unitToLookInside = null;\r", "-\t\t\tif (focusType != null) {\r", "-\t\t\t\tunitToLookInside = (CompilationUnit)focusType.getCompilationUnit();\r", "-\t\t\t}\r", "-\t\t\tif (this.nameLookup != null && unitToLookInside != null) {\r", "-\t\t\t\tsynchronized(this.nameLookup) { // prevent 2 concurrent accesses to name lookup while the working copies are set\r", "-\t\t\t\t\ttry {\r", "-\t\t\t\t\t\tnameLookup.setUnitsToLookInside(new IWorkingCopy[] {unitToLookInside});\r", "-\t\t\t\t\t\tthis.hierarchyResolver.resolve(genericTypes);\r", "-\t\t\t\t\t} finally {\r", "-\t\t\t\t\t\tnameLookup.setUnitsToLookInside(null);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t} else {\r", "-\t\t\t\tthis.hierarchyResolver.resolve(genericTypes);\r", "+\t/*\r", "+\t * NOTE: To workaround pb with hierarchy resolver that requests top  \r", "+\t * level types in the process of caching an enclosing type, this needs to\r", "+\t * be sorted in reverse alphabetical order so that top level types are cached\r", "+\t * before their inner types.\r", "+\t */\r", "+\tUtil.sort(\r", "+\t\ttypes,\r", "+\t\tnew Util.Comparer() {\r", "+\t\t\t/**\r", "+\t\t\t * @see Comparer#compare(Object, Object)\r", "+\t\t\t */\r", "+\t\t\tpublic int compare(Object a, Object b) {\r", "+\t\t\t\treturn - ((IJavaElement)a).getParent().getElementName().compareTo(((IJavaElement)b).getParent().getElementName());\r", "+\t);\r", "+\r", "+\t// collect infos and compilation units\r", "+\tArrayList infos = new ArrayList();\r", "+\tArrayList units = new ArrayList();\r", "+\ttypes : for (int i = 0; i < size; i++) {\r", "+\t\ttry {\r", "+\t\t\tIType type = types[i];\r", "+\t\t\tthis.addInfoFromElement((Openable)type.getOpenable(), infos, units, type.getPath().toString());\r", "+\t\t\tworked(1);\r", "+\t\t} catch (JavaModelException npe) {\r", "+\t\t\tcontinue types;\r", "+\t\t}\r", "+\r", "+\t// copy vectors into arrays\r", "+\tIGenericType[] genericTypes;\r", "+\tint infosSize = infos.size();\r", "+\tif (infosSize > 0) {\r", "+\t\tgenericTypes = new IGenericType[infosSize];\r", "+\t\tinfos.toArray(genericTypes);\r", "+\t} else {\r", "+\t\tgenericTypes = new IGenericType[0];\r", "+\t}\r", "+\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit[] compilationUnits;\r", "+\tint unitsSize = units.size();\r", "+\tif (unitsSize > 0) {\r", "+\t\tcompilationUnits = new org.eclipse.jdt.internal.compiler.env.ICompilationUnit[unitsSize];\r", "+\t\tunits.toArray(compilationUnits);\r", "+\t} else {\r", "+\t\tcompilationUnits = new org.eclipse.jdt.internal.compiler.env.ICompilationUnit[0];\r", "+\t}\r", "+\r", "+\t// resolve\r", "+\tif (infosSize > 0 || unitsSize > 0) {\r", "+\t\tIType focusType = this.getType();\r", "+\t\tCompilationUnit unitToLookInside = null;\r", "+\t\tif (focusType != null) {\r", "+\t\t\tunitToLookInside = (CompilationUnit)focusType.getCompilationUnit();\r", "+\t\t}\r", "+\t\tif (this.nameLookup != null && unitToLookInside != null) {\r", "+\t\t\tsynchronized(this.nameLookup) { // prevent 2 concurrent accesses to name lookup while the working copies are set\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tnameLookup.setUnitsToLookInside(new IWorkingCopy[] {unitToLookInside});\r", "+\t\t\t\t\tthis.hierarchyResolver.resolve(genericTypes, compilationUnits);\r", "+\t\t\t\t} finally {\r", "+\t\t\t\t\tnameLookup.setUnitsToLookInside(null);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\tthis.hierarchyResolver.resolve(genericTypes, compilationUnits);\r", "+\t\t}\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a147bc9e8fa9e916ddbe59e8e9242c00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \r \tprivate void buildForProject(JavaProject project, Vector infos, Vector units)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r private void buildForProject(JavaProject project, Vector infos, Vector units) throws JavaModelException", "diff": ["+}\r", "+private void buildForProject(JavaProject project, Vector infos, Vector units) throws JavaModelException {\r", "+\tIType focusType = this.getType();\r", "+\tif (focusType != null && focusType.getJavaProject().equals(project)) {\r", "+\t\t// add focus type\r", "+\t\ttry {\r", "+\t\t\tinfos.addElement(((JavaElement) focusType).getRawInfo());\r", "+\t\t} catch (JavaModelException e) {\r", "+\t\t\t// if the focus type is not present, or if cannot get workbench path\r", "+\t\t\t// we cannot create the hierarchy\r", "+\t\t\treturn;\r", "+\t\r", "+\t// copy vectors into arrays\r", "+\tIGenericType[] genericTypes;\r", "+\tint infosSize = infos.size();\r", "+\tif (infosSize > 0) {\r", "+\t\tgenericTypes = new IGenericType[infosSize];\r", "+\t\tinfos.copyInto(genericTypes);\r", "+\t} else {\r", "+\t\tgenericTypes = new IGenericType[0];\r", "+\t}\r", "+\tICompilationUnit[] compilationUnits;\r", "+\tint unitsSize = units.size();\r", "+\tif (unitsSize > 0) {\r", "+\t\tcompilationUnits = new ICompilationUnit[unitsSize];\r", "+\t\tunits.copyInto(compilationUnits);\r", "+\t} else {\r", "+\t\tcompilationUnits = new ICompilationUnit[0];\r", "-\r", "-\tprivate void buildForProject(JavaProject project, Vector infos, Vector units)\r", "-\t\tthrows JavaModelException {\r", "-\t\tIType focusType = this.getType();\r", "+\t// resolve\r", "+\tif (infosSize > 0 || unitsSize > 0) {\r", "+\t\tthis.searchableEnvironment = (SearchableEnvironment)project.getSearchableNameEnvironment();\r", "-\t\t\t// add focus type\r", "-\t\t\ttry {\r", "-\t\t\t\tinfos.addElement(((JavaElement) focusType).getRawInfo());\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t// if the focus type is not present, or if cannot get workbench path\r", "-\t\t\t\t// we cannot create the hierarchy\r", "-\t\t\t\treturn;\r", "-\t\t\t}\r", "+\t\t\tthis.searchableEnvironment.unitToLookInside = (CompilationUnit)focusType.getCompilationUnit();\r", "-\r", "-\t\t// copy vectors into arrays\r", "-\t\tIGenericType[] genericTypes;\r", "-\t\tint infosSize = infos.size();\r", "-\t\tif (infosSize > 0) {\r", "-\t\t\tgenericTypes = new IGenericType[infosSize];\r", "-\t\t\tinfos.copyInto(genericTypes);\r", "-\t\t} else {\r", "-\t\t\tgenericTypes = new IGenericType[0];\r", "-\t\t}\r", "-\t\tICompilationUnit[] compilationUnits;\r", "-\t\tint unitsSize = units.size();\r", "-\t\tif (unitsSize > 0) {\r", "-\t\t\tcompilationUnits = new ICompilationUnit[unitsSize];\r", "-\t\t\tunits.copyInto(compilationUnits);\r", "-\t\t} else {\r", "-\t\t\tcompilationUnits = new ICompilationUnit[0];\r", "-\t\t}\r", "-\r", "-\t\t// resolve\r", "-\t\tif (infosSize > 0 || unitsSize > 0) {\r", "-\t\t\tthis.searchableEnvironment =\r", "-\t\t\t\t(SearchableEnvironment) project.getSearchableNameEnvironment();\r", "-\t\t\tif (focusType != null && focusType.getJavaProject().equals(project)) {\r", "-\t\t\t\tthis.searchableEnvironment.unitToLookInside =\r", "-\t\t\t\t\t(CompilationUnit) focusType.getCompilationUnit();\r", "-\t\t\t}\r", "-\t\t\tthis.nameLookup = project.getNameLookup();\r", "-\t\t\tthis.hierarchyResolver =\r", "-\t\t\t\tnew HierarchyResolver(this.searchableEnvironment, this, new ProblemFactory());\r", "-\t\t\tthis.hierarchyResolver.resolve(genericTypes, compilationUnits);\r", "-\t\t\tif (focusType != null && focusType.getJavaProject().equals(project)) {\r", "-\t\t\t\tthis.searchableEnvironment.unitToLookInside = null;\r", "-\t\t\t}\r", "+\t\tthis.nameLookup = project.getNameLookup();\r", "+\t\tthis.hierarchyResolver = \r", "+\t\t\tnew HierarchyResolver(this.searchableEnvironment, this, new DefaultProblemFactory());\r", "+\t\tthis.hierarchyResolver.resolve(genericTypes, compilationUnits);\r", "+\t\tif (focusType != null && focusType.getJavaProject().equals(project)) {\r", "+\t\t\tthis.searchableEnvironment.unitToLookInside = null;\r", "+}\r"]}], "num": 5684}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e53df7316fc48f4703c0946bc7385f1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b596b5c4a09394b7694822f0c9292fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 327, "methodNumberAfterChange": 327, "signatureBeforeChange": " public void test177()", "signatureAfterChange": " public void test177()", "diff": ["-\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) { // see test187()", "+\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_6) { // see test187()", "-\t} else if (new CompilerOptions(getCompilerOptions()).sourceLevel == ClassFileConstants.JDK1_6) {", "-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"import java.util.*;\\n\" +", "-\t\t\t\t\"interface I { I foo(Collection<?> c); }\\n\" +", "-\t\t\t\t\"class A extends LinkedHashMap {\\n\" +", "-\t\t\t\t\"\tpublic A foo(Collection c) { return this; }\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"class X extends A implements I {\\n\" +", "-\t\t\t\t\"\t@Override public X foo(Collection<?> c) { return this; }\\n\" +", "-\t\t\t\t\"}\"", "-\t\t\t},", "-\t\t\t\"\"", "-\t\t);", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in X.java (at line 3)\\n\" +", "-\t\t\t\"\tclass A extends LinkedHashMap {\\n\" +", "-\t\t\t\"\t      ^\\n\" +", "-\t\t\t\"The serializable class A does not declare a static final serialVersionUID field of type long\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 3)\\n\" +", "-\t\t\t\"\tclass A extends LinkedHashMap {\\n\" +", "-\t\t\t\"\t                ^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"LinkedHashMap is a raw type. References to generic type LinkedHashMap<K,V> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. WARNING in X.java (at line 4)\\n\" +", "-\t\t\t\"\tpublic A foo(Collection c) { return this; }\\n\" +", "-\t\t\t\"\t             ^^^^^^^^^^\\n\" +", "-\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. WARNING in X.java (at line 6)\\n\" +", "-\t\t\t\"\tclass X extends A implements I {\\n\" +", "-\t\t\t\"\t      ^\\n\" +", "-\t\t\t\"The serializable class X does not declare a static final serialVersionUID field of type long\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in X.java (at line 7)\\n\" +", "-\t\t\t\"\t@Override public X foo(Collection<?> c) { return this; }\\n\" +", "-\t\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"The method foo(Collection<?>) of type X must override a superclass method\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass A extends LinkedHashMap {\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"The serializable class A does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass A extends LinkedHashMap {\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"LinkedHashMap is a raw type. References to generic type LinkedHashMap<K,V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tpublic A foo(Collection c) { return this; }\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tclass X extends A implements I {\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"Name clash: The method foo(Collection<?>) of type I has the same erasure as foo(Collection) of type A but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tclass X extends A implements I {\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"The serializable class X does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\t@Override public X foo(Collection<?> c) { return this; }\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(Collection<?>) of type X has the same erasure as foo(Collection) of type A but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\t@Override public X foo(Collection<?> c) { return this; }\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The method foo(Collection<?>) of type X must override a superclass method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "313480a665e49bb6f4340c1755e9fd2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_5.java", "commitBeforeChange": "17d4fac2e2145f81ae8773e6bd604f552ec24c76", "commitAfterChange": "8f4037084194a0a8c6b51e4ac889744e5d6e68a8", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " public void test088()", "signatureAfterChange": " public void test088()", "diff": ["+\tString errorMessage =", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in p\\\\X.java (at line 4)\\n\" + ", "+\t\t\"\tpublic class X extends Date implements Runnable{\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"The serializable class X does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in p\\\\X.java (at line 12)\\n\" + ", "+\t\t\"\tthis.super();\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"Illegal enclosing instance specification for type Object\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in p\\\\X.java (at line 25)\\n\" + ", "+\t\t\"\tprivate void a() { System.out.println(\\\"A\\\");} \\n\" + ", "+\t\t\"\t             ^^^\\n\" + ", "+\t\t\"The method a() from the type X is never used locally\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in p\\\\X.java (at line 31)\\n\" + ", "+\t\t\"\tClass c = b.getClass();\\n\" + ", "+\t\t\"\t^^^^^\\n\" + ", "+\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in p\\\\X.java (at line 39)\\n\" + ", "+\t\t\"\tMethod _getMethod = c.getMethod(\\\"d\\\",null);\\n\" + ", "+\t\t\"\t                    ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The argument of type null should explicitly be cast to Class[] for the invocation of the varargs method getMethod(String, Class...) from type Class. It could alternatively be cast to Class for a varargs invocation\\n\" + ", "+\t\t\"----------\\n\";", "+\tif (System.getProperty(\"java.version\").startsWith(\"1.6\")) {", "+\t\terrorMessage =", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in p\\\\X.java (at line 4)\\n\" + ", "+\t\t\t\"\tpublic class X extends Date implements Runnable{\\n\" + ", "+\t\t\t\"\t             ^\\n\" + ", "+\t\t\t\"The serializable class X does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in p\\\\X.java (at line 12)\\n\" + ", "+\t\t\t\"\tthis.super();\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"Illegal enclosing instance specification for type Object\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in p\\\\X.java (at line 25)\\n\" + ", "+\t\t\t\"\tprivate void a() { System.out.println(\\\"A\\\");} \\n\" + ", "+\t\t\t\"\t             ^^^\\n\" + ", "+\t\t\t\"The method a() from the type X is never used locally\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in p\\\\X.java (at line 31)\\n\" + ", "+\t\t\t\"\tClass c = b.getClass();\\n\" + ", "+\t\t\t\"\t^^^^^\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in p\\\\X.java (at line 39)\\n\" + ", "+\t\t\t\"\tMethod _getMethod = c.getMethod(\\\"d\\\",null);\\n\" + ", "+\t\t\t\"\t                    ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The argument of type null should explicitly be cast to Class[] for the invocation of the varargs method getMethod(String, Class...) from type Class. It could alternatively be cast to Class for a varargs invocation\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in p\\\\X.java (at line 39)\\n\" + ", "+\t\t\t\"\tMethod _getMethod = c.getMethod(\\\"d\\\",null);\\n\" + ", "+\t\t\t\"\t                    ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The method getMethod(String, Class...) belongs to the raw type Class. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\";", "+\t}", "-\t\t\"----------\\n\" + ", "-\t\t\"1. WARNING in p\\\\X.java (at line 4)\\n\" + ", "-\t\t\"\tpublic class X extends Date implements Runnable{\\n\" + ", "-\t\t\"\t             ^\\n\" + ", "-\t\t\"The serializable class X does not declare a static final serialVersionUID field of type long\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in p\\\\X.java (at line 12)\\n\" + ", "-\t\t\"\tthis.super();\\n\" + ", "-\t\t\"\t^^^^\\n\" + ", "-\t\t\"Illegal enclosing instance specification for type Object\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. WARNING in p\\\\X.java (at line 25)\\n\" + ", "-\t\t\"\tprivate void a() { System.out.println(\\\"A\\\");} \\n\" + ", "-\t\t\"\t             ^^^\\n\" + ", "-\t\t\"The method a() from the type X is never used locally\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. WARNING in p\\\\X.java (at line 31)\\n\" + ", "-\t\t\"\tClass c = b.getClass();\\n\" + ", "-\t\t\"\t^^^^^\\n\" + ", "-\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"5. WARNING in p\\\\X.java (at line 39)\\n\" + ", "-\t\t\"\tMethod _getMethod = c.getMethod(\\\"d\\\",null);\\n\" + ", "-\t\t\"\t                    ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The argument of type null should explicitly be cast to Class[] for the invocation of the varargs method getMethod(String, Class...) from type Class. It could alternatively be cast to Class for a varargs invocation\\n\" + ", "-\t\t\"----------\\n\");", "+\t\terrorMessage);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cad15616a6f5e0c8babd59233c54a185", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 328, "methodNumberAfterChange": 328, "signatureBeforeChange": " public void test177()", "signatureAfterChange": " public void test177()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tclass A extends LinkedHashMap {\\n\" + ", "+\t\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\t\"The serializable class A does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tclass A extends LinkedHashMap {\\n\" + ", "+\t\t\t\t\"\t                ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"LinkedHashMap is a raw type. References to generic type LinkedHashMap<K,V> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tpublic A foo(Collection c) { return this; }\\n\" + ", "+\t\t\t\t\"\t             ^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tclass X extends A implements I {\\n\" + ", "+\t\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\t\"The serializable class X does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\t@Override public X foo(Collection<?> c) { return this; }\\n\" + ", "+\t\t\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Name clash: The method foo(Collection<?>) of type X has the same erasure as foo(Collection) of type A but does not override it\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\tclass A extends LinkedHashMap {\\n\" + ", "+\t\t\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\t\t\"The serializable class A does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\tclass A extends LinkedHashMap {\\n\" + ", "+\t\t\t\t\t\"\t                ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"LinkedHashMap is a raw type. References to generic type LinkedHashMap<K,V> should be parameterized\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\t\t\"\tpublic A foo(Collection c) { return this; }\\n\" + ", "+\t\t\t\t\t\"\t             ^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"4. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\t\t\"\tclass X extends A implements I {\\n\" + ", "+\t\t\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\t\t\"The serializable class X does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"5. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\t\"\t@Override public X foo(Collection<?> c) { return this; }\\n\" + ", "+\t\t\t\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Name clash: The method foo(Collection<?>) of type X has the same erasure as foo(Collection) of type A but does not override it\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tclass A extends LinkedHashMap {\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"The serializable class A does not declare a static final serialVersionUID field of type long\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tclass A extends LinkedHashMap {\\n\" + ", "-\t\t\t\"\t                ^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"LinkedHashMap is a raw type. References to generic type LinkedHashMap<K,V> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tpublic A foo(Collection c) { return this; }\\n\" + ", "-\t\t\t\"\t             ^^^^^^^^^^\\n\" + ", "-\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 6)\\n\" + ", "-\t\t\t\"\tclass X extends A implements I {\\n\" + ", "-\t\t\t\"\t      ^\\n\" + ", "-\t\t\t\"The serializable class X does not declare a static final serialVersionUID field of type long\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\t@Override public X foo(Collection<?> c) { return this; }\\n\" + ", "-\t\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method foo(Collection<?>) of type X has the same erasure as foo(Collection) of type A but does not override it\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog", "-\t\t\t\"----------\\n\" + ", "+\t\t\t\"----------\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d52c04ef768c87a2988dc8dc2b3752d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "750aa30159270a8e5e3dda43d0a97cfb8878627d", "commitAfterChange": "f8c4bd6d317c7bd673dbcf053ccf33d3004de38a", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": " \tpublic void _test091()", "signatureAfterChange": " \tpublic void test091()", "diff": ["-\tpublic void _test091() {", "+\tpublic void test091() {", "-\t\t\t\"should have a nameclash issue ?\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in DataSet.java (at line 4)\\n\" + ", "+\t\t\t\"\tclass DataSet<T extends Number> implements List, Iterator, Serializable {\\n\" + ", "+\t\t\t\"\t      ^^^^^^^\\n\" + ", "+\t\t\t\"The type DataSet<T> must implement the inherited abstract method List.toArray(Object[])\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in DataSet.java (at line 4)\\n\" + ", "+\t\t\t\"\tclass DataSet<T extends Number> implements List, Iterator, Serializable {\\n\" + ", "+\t\t\t\"\t      ^^^^^^^\\n\" + ", "+\t\t\t\"The serializable class DataSet does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in DataSet.java (at line 4)\\n\" + ", "+\t\t\t\"\tclass DataSet<T extends Number> implements List, Iterator, Serializable {\\n\" + ", "+\t\t\t\"\t                                           ^^^^\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in DataSet.java (at line 4)\\n\" + ", "+\t\t\t\"\tclass DataSet<T extends Number> implements List, Iterator, Serializable {\\n\" + ", "+\t\t\t\"\t                                                 ^^^^^^^^\\n\" + ", "+\t\t\t\"Iterator is a raw type. References to generic type Iterator<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in DataSet.java (at line 6)\\n\" + ", "+\t\t\t\"\tpublic <S> S[] toArray(S[] s) {\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method toArray(S[]) of type DataSet<T> has the same erasure as toArray(T[]) of type List<E> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in DataSet.java (at line 6)\\n\" + ", "+\t\t\t\"\tpublic <S> S[] toArray(S[] s) {\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method toArray(S[]) of type DataSet<T> has the same erasure as toArray(T[]) of type Collection<E> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in DataSet.java (at line 12)\\n\" + ", "+\t\t\t\"\tpublic boolean addAll(Collection c) {\treturn false; }\\n\" + ", "+\t\t\t\"\t                      ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in DataSet.java (at line 13)\\n\" + ", "+\t\t\t\"\tpublic boolean addAll(int index, Collection c) {\treturn false; }\\n\" + ", "+\t\t\t\"\t                                 ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. WARNING in DataSet.java (at line 16)\\n\" + ", "+\t\t\t\"\tpublic boolean containsAll(Collection c) { return false; }\\n\" + ", "+\t\t\t\"\t                           ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. WARNING in DataSet.java (at line 20)\\n\" + ", "+\t\t\t\"\tpublic Iterator iterator() {\treturn null; }\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^\\n\" + ", "+\t\t\t\"Iterator is a raw type. References to generic type Iterator<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"11. WARNING in DataSet.java (at line 22)\\n\" + ", "+\t\t\t\"\tpublic ListIterator listIterator() {\treturn null; }\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"ListIterator is a raw type. References to generic type ListIterator<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"12. WARNING in DataSet.java (at line 23)\\n\" + ", "+\t\t\t\"\tpublic ListIterator listIterator(int index) {\treturn null; }\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"ListIterator is a raw type. References to generic type ListIterator<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"13. WARNING in DataSet.java (at line 26)\\n\" + ", "+\t\t\t\"\tpublic boolean removeAll(Collection c) {\treturn false; }\\n\" + ", "+\t\t\t\"\t                         ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"14. WARNING in DataSet.java (at line 27)\\n\" + ", "+\t\t\t\"\tpublic boolean retainAll(Collection c) {\treturn false; }\\n\" + ", "+\t\t\t\"\t                         ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"15. WARNING in DataSet.java (at line 30)\\n\" + ", "+\t\t\t\"\tpublic List subList(int fromIndex, int toIndex) {\treturn null; }\\n\" + ", "+\t\t\t\"\t       ^^^^\\n\" + ", "+\t\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\""]}], "num": 57500}
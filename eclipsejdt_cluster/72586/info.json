{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "64d422b1fc4fdddd7e95995e7bfb95f1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f407fd92c2c46338f499120efacc3eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "c92099fc5b6f140409692775e015990a59416465", "commitAfterChange": "dc444b8320482476925f9f5e1514794476164a28", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames, TypeAnnotationWalker walker)", "signatureAfterChange": " ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames, TypeAnnotationWalker walker)", "diff": ["-\t\tfinal int depth = binding.depth();", "-\t\tAnnotationBinding [][] annotations = null;", "-\t\tfor (int i = 0; i <= depth; i++) {", "-\t\t\tAnnotationBinding[] annots = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "-\t\t\tif (annots != null && annots.length > 0) {", "-\t\t\t\tif (annotations == null)", "-\t\t\t\t\tannotations = new AnnotationBinding[depth + 1][];", "-\t\t\t\tannotations[i] = annots;", "-\t\t\t}", "-\t\t\twalker = walker.toNextNestedType();", "-\t\t}", "-\t\tif (annotations != null)", "-\t\t\tbinding = (ReferenceBinding) createAnnotatedType(binding, annotations);", "+\t\tbinding = (ReferenceBinding) annotateType(binding, walker, missingTypeNames);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74e3e8665ada8ecd8d9e22157ea6edb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 49, "signatureBeforeChange": " TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType,  \t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker)", "signatureAfterChange": " TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType,  \t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker)", "diff": ["-\t\tTypeAnnotationWalker dimensionsWalker = null;", "-\t\tfor (int i = 0; i < dimension; i++) {", "-\t\t\tif (dimensionsWalker == null)", "-\t\t\t\tdimensionsWalker = walker; // outermost dimension == main type", "-\t\t\telse", "-\t\t\t\tdimensionsWalker = dimensionsWalker.toNextArrayDimension();", "-\t\t\tlong tagBits = typeAnnotationsToTagBits(dimensionsWalker.getAnnotationsAtCursor());", "-\t\t\tif (tagBits != 0L) {", "-\t\t\t\tif (annotationTagBitsOnDimensions == null)", "-\t\t\t\t\tannotationTagBitsOnDimensions = new long[dimension+1]; // leave room for leaf type", "-\t\t\t\tannotationTagBitsOnDimensions[i] = tagBits; ", "-\t\t\t}", "-\t\t}", "+\t\tannotationTagBitsOnDimensions = getAnnotationTagBitsOnDimensions(dimension, walker);", "-\t\t\tif (refType instanceof UnresolvedReferenceBinding) {", "-\t\t\t\t// clone so we don't interfere with future lookups:", "-\t\t\t\tbinding = new UnresolvedReferenceBinding(refType, tagBits);", "-\t\t\t} else {", "-\t\t\t\tbinding = createAnnotatedType(refType, tagBits);", "-\t\t\t}", "+\t\t\tbinding = createAnnotatedType(refType, tagBits);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9746c03397e81d00631907dd8464e4e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "c92099fc5b6f140409692775e015990a59416465", "commitAfterChange": "dc444b8320482476925f9f5e1514794476164a28", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType,  \t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker)", "signatureAfterChange": " TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType,  \t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker)", "diff": ["-\t\tfinal int depth = binding.depth();", "-\t\tAnnotationBinding [][] annotations = null;", "-\t\tfor (int i = 0; i <= depth; i++) {", "-\t\t\tAnnotationBinding[] annots = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "-\t\t\tif (annots != null && annots.length > 0) {", "-\t\t\t\tif (annotations == null)", "-\t\t\t\t\tannotations = new AnnotationBinding[depth + 1][];", "-\t\t\t\tannotations[i] = annots;", "-\t\t\t}", "-\t\t\twalker = walker.toNextNestedType();", "-\t\t}", "-\t\tif (annotations != null)", "-\t\t\tbinding = createAnnotatedType(binding, annotations);", "+\t\tbinding = annotateType(binding, walker, missingTypeNames);"]}], "num": 72586}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0974510a84d5485911b9adf5b18a0405", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d6871e07b3a4948132b415ca92f55a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AllJavaModelTests.java", "commitBeforeChange": "04e492585ec94bbdfe8f3ba07279d9329063465d", "commitAfterChange": "3197772a63ef20d756d7f45892d94bccedcb3d16", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " static Class[] getAllTestClasses()", "signatureAfterChange": " private static Class[] getAllTestClasses()", "diff": ["-static Class[] getAllTestClasses() {", "-\treturn new Class[] {", "+private static Class[] getAllTestClasses() {", "+\tClass[] classes = new Class[] {", "+\t", "+\t\t// Enter each test here, grouping the tests that are related", "+", "+\t\t// creation of method", "+\t\t", "+\t\t// Java Naming convention tests", "+\t", "+\t\t// Project & Root API unit tests", "+\t", "+\t\t// Compilation unit tests", "+\t", "+\t\t// Source attachment tests", "+\t\t", "+\t\t// Java search tests", "+\t\t\t", "+\t\t// Working copy tests", "+\t\t", "+\t\t// test IJavaModel", "+\t", "+\t\t// tests to check the encoding", "+\t\t", "+\t\t// test class name with special names like names containing '$'", "+\t\t", "+\t\t// IBuffer tests", "+\t", "+\t\t// Name lookup tests", "+\t", "+\t\t// Classpath and output location tests", "+\t", "+\t\t// Delta tests", "+\t", "+\t\t// Java element existence tests", "+\t\t", "+\t\t// Support for \"open on\" feature tests", "-\t\tSelectionJavadocModelTests.class,", "+\t\t", "+\t\t// Support for completion tests", "-\t\tCompletionTests_1_5.class,", "+\t\tCompletionTests_1_5.class,", "+\t\tSelectionJavadocModelTests.class,", "+\t\t", "+\t\t// Prefix and suffix tests", "+\t\t", "+\t\t// Code correction tests", "+\t\t", "+\t\t// Options tests", "+\t\t", "+\t\t// Type hierarchy tests", "+\t\t", "+\t\t// Resolve type tests", "+\t", "+\t\t// Reconciler tests", "+\t", "+\t\t// Copy and move operation tests", "+\t", "+\t\t// Rename tests", "+\t\t", "+\t\t// Exclusion patterns tests", "+\t\t", "+\t\t// Inclusion patterns tests", "+\t\t", "+\t\t// Signature tests", "+\t\t", "+\t\t// Variable initializers and container initializers tests", "+\t", "+\t\t// Java Model Factory tests", "+\t\t\t\t", "+\t\t// Java Element persistence tests", "+\t\t", "+\t\t// Java Element sorting tests", "+\t", "+\t\t// Package fragment root manipulation tests", "+\t\t", "+\t\t// Owverflowing cache tests", "+\t\t", "+\t\t// Working copy owner tests", "+\t", "+\t\t// Delete Java element tests", "+\t\t", "+\t\t// Local element tests", "+\t\t", "+\t\t// Get source tests", "+\t\t\t", "+\t\t// Create packages tests", "+\t", "+\t\t// Create compilation units tests", "+\t\t", "+\t\t// Create search participant tests", "+\t\tSearchParticipantTests.class,", "+\t\t", "+\t\t// Class file tests", "-\t\tBindingKeyTests.class", "+\t", "+\t};", "+\t", "+\tClass[] deprecatedClasses = getDeprecatedJDOMTestClasses();", "+\t", "+\tint classesLength = classes.length;", "+\tint deprecatedClassesLength = deprecatedClasses.length;", "+\tClass[] result = new Class[classesLength + deprecatedClassesLength];", "+\tSystem.arraycopy(classes, 0, result, 0, classesLength);", "+\tSystem.arraycopy(deprecatedClasses, 0, result, classesLength, deprecatedClassesLength);", "+\t", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3300e710fdae050ca8812f4f534367bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "38faf3efd9d7a9e66ede29f2210a34a5031698a0", "commitAfterChange": "102c35a2a8562c276abba3a19ac61f3d18639af8", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tprivate ASTNode internalCreateAST(IProgressMonitor monitor)", "signatureAfterChange": " \t \tprivate ASTNode internalCreateAST(IProgressMonitor monitor)", "diff": ["-\t\t\t\t\t\t\tString fileName = new String(binaryType.getFileName()); // file name is used to recreate the Java element, so it has to be the .class file name", "-\t\t\t\t\t\t\tsourceUnit = new BasicCompilationUnit(sourceString.toCharArray(), Util.toCharArrays(packageFragment.names), fileName, this.project);", "+\t\t\t\t\t\t\t// file name is used to recreate the Java element, so it has to be the toplevel .class file name", "+\t\t\t\t\t\t\tchar[] fileName = binaryType.getFileName();", "+\t\t\t\t\t\t\tint firstDollar = CharOperation.indexOf('$', fileName);", "+\t\t\t\t\t\t\tif (firstDollar != -1) {", "+\t\t\t\t\t\t\t\tchar[] suffix = SuffixConstants.SUFFIX_class;", "+\t\t\t\t\t\t\t\tint suffixLength = suffix.length;", "+\t\t\t\t\t\t\t\tchar[] newFileName = new char[firstDollar + suffixLength];", "+\t\t\t\t\t\t\t\tSystem.arraycopy(fileName, 0, newFileName, 0, firstDollar);", "+\t\t\t\t\t\t\t\tSystem.arraycopy(suffix, 0, newFileName, firstDollar, suffixLength);", "+\t\t\t\t\t\t\t\tfileName = newFileName;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tsourceUnit = new BasicCompilationUnit(sourceString.toCharArray(), Util.toCharArrays(packageFragment.names), new String(fileName), this.project);"]}], "num": 13060}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d375ddec1330bda83421163495426c33", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "327b3255d04ee5930815b36ed4f3e196", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceModelTests.java", "commitBeforeChange": "4119a65befb0f1b826133c8b40790cea36510774", "commitAfterChange": "199c84f2cae998bf19dec5ba0cb5f860d990b3fa", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 35, "signatureBeforeChange": "  public void testCloseProjects() throws JavaModelException", "signatureAfterChange": "  public void testCloseProjects() throws JavaModelException", "diff": ["-\t// store current settings", "-\tlong oldSnapInterval = ENV.getWorkspace().getDescription().getSnapshotInterval();", "-\tboolean oldAutoBuildPolicy = ENV.isAutoBuilding();", "-\t", "-\t// prevent snapshots and autobuilds from disturbing our measures", "-\tENV.getWorkspace().getDescription().setSnapshotInterval(100000);", "-\tENV.getWorkspace().getDescription().setAutoBuilding(false);", "-\t", "-\ttry {", "-\t\tint length=ALL_PROJECTS.length;", "-\t\t// Warm-up", "-\t\tfor (int i=0; i<WARMUP_COUNT; i++) {", "-\t\t\tfor (int j=0; j<length; j++) {", "-\t\t\t\tENV.closeProject(ALL_PROJECTS[j].getPath());", "-\t\t\t}", "-\t\t\tfor (int j=0; j<length; j++) {", "-\t\t\t\tENV.openProject(ALL_PROJECTS[j].getPath());", "-\t\t\t}", "+\tint length=ALL_PROJECTS.length;", "+\t// Warm-up", "+\tint wmax = WARMUP_COUNT / 10;", "+\tfor (int i=0; i<wmax; i++) {", "+\t\tfor (int j=0; j<length; j++) {", "+\t\t\tENV.closeProject(ALL_PROJECTS[j].getPath());", "-\t", "-\t\t// Measures", "-\t\tfor (int i=0; i<MEASURES_COUNT; i++) {", "-\t\t\tAbstractJavaModelTests.waitUntilIndexesReady();", "-\t\t\t// should not be autobuilding...", "-\t\t\tif (ENV.isAutoBuilding()) {", "-\t\t\t\tENV.waitForAutoBuild();", "-\t\t\t}", "-\t\t\trunGc();", "-\t\t\tstartMeasuring();", "-\t\t\tfor (int j=0; j<length; j++) {", "-\t\t\t\tENV.closeProject(ALL_PROJECTS[j].getPath());", "-\t\t\t}", "-\t\t\tstopMeasuring();", "-\t\t\tfor (int j=0; j<length; j++) {", "-\t\t\t\tENV.openProject(ALL_PROJECTS[j].getPath());", "-\t\t\t}", "+\t\tfor (int j=0; j<length; j++) {", "+\t\t\tENV.openProject(ALL_PROJECTS[j].getPath());", "-\t\t// Commit", "-\t\tcommitMeasurements();", "-\t\tassertPerformance();", "-\tfinally {", "-\t\t// restore previous settings", "-\t\tENV.getWorkspace().getDescription().setSnapshotInterval(oldSnapInterval);", "-\t\tENV.getWorkspace().getDescription().setAutoBuilding(oldAutoBuildPolicy);", "+", "+\t// Measures", "+\tfor (int i=0; i<MEASURES_COUNT; i++) {", "+\t\tAbstractJavaModelTests.waitUntilIndexesReady();", "+\t\trunGc();", "+\t\tstartMeasuring();", "+\t\tfor (int j=0; j<length; j++) {", "+\t\t\tENV.closeProject(ALL_PROJECTS[j].getPath());", "+\t\t}", "+\t\tstopMeasuring();", "+\t\tfor (int j=0; j<length; j++) {", "+\t\t\tENV.openProject(ALL_PROJECTS[j].getPath());", "+\t\t}", "+", "+\t// Commit", "+\tcommitMeasurements();", "+\tassertPerformance();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83d261b3a4c037e8494308e71ff9129e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceModelTests.java", "commitBeforeChange": "4119a65befb0f1b826133c8b40790cea36510774", "commitAfterChange": "199c84f2cae998bf19dec5ba0cb5f860d990b3fa", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 36, "signatureBeforeChange": "  public void testStartJDTPlugin() throws JavaModelException", "signatureAfterChange": "  public void testStartJDTPlugin() throws JavaModelException, CoreException", "diff": ["+public void testStartJDTPlugin() throws JavaModelException, CoreException {", "+\t// Warm-up", "+\tint wmax = WARMUP_COUNT / 5;", "+\tfor (int i=0; i<wmax; i++) {", "+\t\tsimulateExitRestart();", "+\t\tJavaCore.initializeAfterLoad(null);", "+\t\tAbstractJavaModelTests.waitUntilIndexesReady();", "+\t}", "+\t// Measures", "+\tfor (int i=0; i<MEASURES_COUNT; i++) {", "+\t\t// shutdwon", "+\t\tsimulateExit();\t\t\t", "+\t\trunGc();", "+\t\tstartMeasuring();", "+\t\t// restart", "+\t\tsimulateRestart();", "+\t\tJavaCore.initializeAfterLoad(null);", "+\t\tAbstractJavaModelTests.waitUntilIndexesReady();", "+\t\tstopMeasuring();", "+\t}", "+\t// Commit", "+\tcommitMeasurements();", "+\tassertPerformance();", "-", "-public void testStartJDTPlugin() throws JavaModelException {", "-\t// store current settings", "-\tlong oldSnapInterval = ENV.getWorkspace().getDescription().getSnapshotInterval();\t", "-\t// prevent snapshots and autobuilds from disturbing our measures", "-\tENV.getWorkspace().getDescription().setSnapshotInterval(100000);", "-\ttry {", "-\t\t// Warm-up", "-\t\tfor (int i=0; i<WARMUP_COUNT; i++) {", "-\t\t\tsimulateExitRestart();", "-\t\t\tJavaCore.initializeAfterLoad(null);", "-\t\t\tAbstractJavaModelTests.waitUntilIndexesReady();", "-\t\t}", "-\t", "-\t\t// Measures", "-\t\tfor (int i=0; i<MEASURES_COUNT; i++) {", "-\t\t\t// shutdwon", "-\t\t\tsimulateExit();\t\t\t", "-\t\t\trunGc();", "-\t\t\tstartMeasuring();", "-\t\t\t// restart", "-\t\t\tsimulateRestart();", "-\t\t\tJavaCore.initializeAfterLoad(null);", "-\t\t\tAbstractJavaModelTests.waitUntilIndexesReady();", "-\t\t\tstopMeasuring();", "-\t\t}", "-\t\t// Commit", "-\t\tcommitMeasurements();", "-\t\tassertPerformance();", "-\t}", "-\tcatch (CoreException ex) {", "-\t\t// do nothing", "-\t}", "-\tfinally {", "-\t\t// restore previous settings", "-\t\tENV.getWorkspace().getDescription().setSnapshotInterval(oldSnapInterval);"]}], "num": 70471}
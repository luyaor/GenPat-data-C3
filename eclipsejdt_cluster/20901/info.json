{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0ecac94de64417afa11c75bef771bf9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b77183c81fcd15229fcdf2d1fa12989", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "83b433cefe204b4efddb34a5fec23235369a79e2", "commitAfterChange": "f0ad677ecfc3fb2aae0264f20715771e958071e0", "methodNumberBeforeChange": 811, "methodNumberAfterChange": 811, "signatureBeforeChange": " public void test0790()", "signatureAfterChange": " public void test0790()", "diff": ["-// FAIL ERRMSG", "-\tif (this.complianceLevel >= ClassFileConstants.JDK1_8)", "-\t\treturn;", "+\t\tthis.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\" :", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tif (isGreater(i, d)) \\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^\\n\" + ", "+\t\t\t\"The method isGreater(T, T) in the type X is not applicable for the arguments (Integer, Double)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"\tisGreater(c1, c2);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^\\n\" + ", "+\t\t\t\"The method isGreater(T, T) in the type X is not applicable for the arguments (Comparable<capture#1-of ? extends Number>, Comparable<capture#2-of ? extends Number>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\t\"\tComparable c1= i;\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 19)\\n\" + ", "+\t\t\t\"\tComparable c2= d;\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\t\"\tisGreater(c1, c2);\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation isGreater(Comparable, Comparable) of the generic method isGreater(T, T) of type X\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43b6166fc0d1bd077aa60384ae140f4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "83b433cefe204b4efddb34a5fec23235369a79e2", "commitAfterChange": "f0ad677ecfc3fb2aae0264f20715771e958071e0", "methodNumberBeforeChange": 1357, "methodNumberAfterChange": 1357, "signatureBeforeChange": " public void test1322()", "signatureAfterChange": " public void test1322()", "diff": ["-// FAIL ERRMSG", "-\tif (this.complianceLevel >= ClassFileConstants.JDK1_8)", "-\t\treturn;", "+\t\t\tthis.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" :", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tx.doStuff(Bob.class, new Thingy());\\n\" + ", "+\t\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: Unchecked invocation doStuff(Class<Bob>, Thingy) of the generic method doStuff(Class<T>, Thingy<T>) of type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tx.doStuff(Bob.class, new Thingy());\\n\" + ", "+\t\t\t\t\"\t                     ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: The expression of type Thingy needs unchecked conversion to conform to Thingy<Bob>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tx.doStuff(Bob.class, new Thingy());\\n\" + ", "+\t\t\t\t\"\t                         ^^^^^^\\n\" + ", "+\t\t\t\t\"Thingy is a raw type. References to generic type Thingy<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\t\"\tx.doStuff(Jim.class, new Thingy());\\n\" + ", "+\t\t\t\t\"\t  ^^^^^^^\\n\" + ", "+\t\t\t\t\"The method doStuff(Class<T>, Thingy<T>) in the type X is not applicable for the arguments (Class<Jim>, Thingy)\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\t\t\"\tx.doStuff(Jim.class, new Thingy());\\n\" + ", "+\t\t\t\t\"\t                         ^^^^^^\\n\" + ", "+\t\t\t\t\"Thingy is a raw type. References to generic type Thingy<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f52560be5209be633289ee44a7979c26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "83b433cefe204b4efddb34a5fec23235369a79e2", "commitAfterChange": "f0ad677ecfc3fb2aae0264f20715771e958071e0", "methodNumberBeforeChange": 557, "methodNumberAfterChange": 557, "signatureBeforeChange": " \tpublic void test0538()", "signatureAfterChange": " \tpublic void test0538()", "diff": ["-\t// FAIL ERRMSG (type display)", "-\t\tif (this.complianceLevel >= ClassFileConstants.JDK1_8)", "-\t\t\treturn;", "+\t\t\tthis.complianceLevel < ClassFileConstants.JDK1_8 ?", "-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" :", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\t\"\tClass c = Foo.class;\\n\" + ", "+\t\t\t\t\"\t^^^^^\\n\" + ", "+\t\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\t\"\tEnumSet<Enum<?>> eSet = EnumSet.allOf(c);\\n\" + ", "+\t\t\t\t\"\t        ^^^^\\n\" + ", "+\t\t\t\t\"Bound mismatch: The type Enum<?> is not a valid substitute for the bounded parameter <E extends Enum<E>> of the type EnumSet<E>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\t\"\tEnumSet<Enum<?>> eSet = EnumSet.allOf(c);\\n\" + ", "+\t\t\t\t\"\t                        ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: Unchecked invocation allOf(Class) of the generic method allOf(Class<E>) of type EnumSet\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\t\"\tEnumSet<Enum<?>> eSet = EnumSet.allOf(c);\\n\" + ", "+\t\t\t\t\"\t                        ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: The expression of type EnumSet needs unchecked conversion to conform to EnumSet<Enum<?>>\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\t\"\tEnumSet<Enum<?>> eSet = EnumSet.allOf(c);\\n\" + ", "+\t\t\t\t\"\t                                      ^\\n\" + ", "+\t\t\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<Enum<Enum<E>>>\\n\" + ", "+\t\t\t\t\"----------\\n\");"]}], "num": 20901}
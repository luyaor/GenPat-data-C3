{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8820fe8b4751eff8c83c99f0c7ae4c55", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28bbb89abd85a585a0c499c2e4ee037b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "9a8c0b7f51c1a0b9d37b7d38acb4d0261e31390a", "commitAfterChange": "278bd24e5aaae65022c9b0e7c10b22e5ffa034b6", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  \tprivate boolean isValidEdit(OptimizedReplaceEdit edit)", "signatureAfterChange": "  \tprivate boolean isValidEdit(OptimizedReplaceEdit edit)", "diff": ["-\t\t\tif (this.textRegionStart <= editOffset && (editOffset + editLength - 1) <= this.textRegionEnd) {", "+\t\t\t", "+\t\t\tIRegion covering = getCoveringRegion(editOffset, (editOffset + editLength - 1));", "+\t\t\tif (covering != null) {", "-\t\t\t\t} else {", "-\t\t\t\t\treturn true;", "-\t\t\t} else if (editOffset + editLength == this.textRegionStart) {", "+\t\t\t\treturn true;", "+\t\t\t}", "+", "+\t\t\tIRegion starting = getRegionAt(editOffset + editLength);", "+\t\t\tif (starting != null) {", "-\t\t\t\t\tedit.offset = textRegionStart;", "+\t\t\t\t\tedit.offset = starting.getOffset();", "-\t\t} else if (this.textRegionStart <= editOffset && editOffset <= this.textRegionEnd) {", "+\t\t\t", "+\t\t\treturn false;", "+\t\t}", "+\t\t", "+\t\tIRegion covering = getCoveringRegion(editOffset, editOffset);", "+\t\tif (covering != null) {", "-\t\t} else if (editOffset == this.scannerEndPosition && editOffset == this.textRegionEnd + 1) {", "+\t\t}", "+", "+\t\tif (editOffset == this.scannerEndPosition) {", "+\t\t\tint index = Arrays.binarySearch(", "+\t\t\t\tthis.regions,", "+\t\t\t\tnew Region(editOffset, 0),", "+\t\t\t\tnew Comparator() {", "+\t\t\t\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\t\t\t\tIRegion r1 = (IRegion)o1;", "+\t\t\t\t\t\tIRegion r2 = (IRegion)o2;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tint r1End = r1.getOffset() + r1.getLength();", "+\t\t\t\t\t\tint r2End = r2.getOffset() + r2.getLength();", "+\t\t\t\t\t\t", "+\t\t\t\t\t\treturn r1End - r2End;", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\tif (index < 0) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be87dc7d55d015dc9b5b318ea13c5851", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "8fd47ede750ba6005aab3e86ceccb03a6e16dba8", "commitAfterChange": "e0664fc441b4961f478c3f32edb809e211e609ac", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate void adaptSelectedRegions()", "signatureAfterChange": " \tprivate void adaptRegions()", "diff": ["-\tprivate void adaptSelectedRegions() {", "+\tprivate void adaptRegions() {", "+\t\tthis.adaptedRegions = new Region[this.regions.length];", "-\t\t\t\t\t\tif (upperFound) {", "+\t\t\t\t\t\tif (upperFound && lowerBound == 0) {", "-\t\t\t\t\t\t\tif (lowerBound == 0  && editOffset + editLength < regionEnd) {", "+\t\t\t\t\t\t\tif (editOffset == regionEnd) { // matching edit found", "+\t\t\t\t\t\t\t\tlowerBound = regionEnd;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t} else if (editOffset + editLength < regionEnd) {", "-\t\t\t\t\t\t\t\tlowerBound = editOffset + editLength;", "-\t\t\t\t\t\t\t\tbreak; // found both bonds - leave the loop", "+\t\t\t\t\t\t\t\tlowerBound = editOffset + editLength; // upper and lower bounds found", "+\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t// search for upper bound", "+\t\t\t\t\t\t\t// search for upper bound", "-\t\t\t\t\t\t\tif (this.edits[j+1].offset < offset) {", "+\t\t\t\t\t\t\tif (this.edits[j + 1].offset < offset) {", "-\t\t\t\t\t\t// store result if any", "-\t\t\t\t\t\tthis.regions[i] = new Region(upperBound , lowerBound - upperBound);", "+\t\t\t\t\t\tif (offset != upperBound || regionEnd != lowerBound) { // ensure we found a different region", "+\t\t\t\t\t\t\tthis.adaptedRegions[i] = new Region(upperBound,", "+\t\t\t\t\t\t\t\t\tlowerBound - upperBound);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// keep other unadaptable region", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.adaptedRegions[i] = this.regions[i];", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.adaptedRegions[i] = this.regions[i];", "+\t\t\t} else {", "+\t\t\t\tthis.adaptedRegions[i] = this.regions[i];"]}], "num": 6857}
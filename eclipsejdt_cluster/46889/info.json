{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57a41b0f1ee9fb0160d2cee4c17f52fe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "713fcce89e20a07650b0213575831bab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java", "commitBeforeChange": "49a66f9a973247a981c10aeaef835e85ffcc455f", "commitAfterChange": "e08c40cf1dd83a4533badddfba88090397fd7a51", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic abstract RawTypeBinding getRawType(ReferenceBinding genericType, ReferenceBinding enclosingType);", "signatureAfterChange": "  \tpublic RawTypeBinding getRawType(ReferenceBinding genericType, ReferenceBinding enclosingType)", "diff": ["-\tpublic abstract RawTypeBinding getRawType(ReferenceBinding genericType, ReferenceBinding enclosingType);", "+\t*/ ", "+\tpublic RawTypeBinding getRawType(ReferenceBinding genericType, ReferenceBinding enclosingType) {", "+\t\tReferenceBinding unannotatedGenericType = (ReferenceBinding) getUnannotatedType(genericType);", "+\t\tReferenceBinding unannotatedEnclosingType = enclosingType == null ? null : (ReferenceBinding) getUnannotatedType(enclosingType);", "+\t", "+\t\tTypeBinding[] derivedTypes = this.types[unannotatedGenericType.id];", "+\t\tint i, length = derivedTypes.length;", "+\t\tfor (i = 0; i < length; i++) {", "+\t\t\tTypeBinding derivedType = derivedTypes[i];", "+\t\t\tif (derivedType == null) ", "+\t\t\t\tbreak;", "+\t\t\tif (!derivedType.isRawType() || derivedType.actualType() != unannotatedGenericType || derivedType.hasTypeAnnotations())", "+\t\t\t\tcontinue;", "+\t\t\tif (derivedType.enclosingType() == unannotatedEnclosingType)", "+\t\t\t\treturn (RawTypeBinding) derivedType;", "+\t\t}", "+", "+\t\tif (i == length) {", "+\t\t\tSystem.arraycopy(derivedTypes, 0, derivedTypes = new TypeBinding[length * 2], 0, length);", "+\t\t\tthis.types[unannotatedGenericType.id] = derivedTypes;", "+\t\t}", "+\t\t", "+\t\tTypeBinding rawTytpe = derivedTypes[i] = new RawTypeBinding(unannotatedGenericType, unannotatedEnclosingType, this.environment);", "+\t\tint typesLength = this.types.length;", "+\t\tif (this.typeid == typesLength)", "+\t\t\tSystem.arraycopy(this.types, 0, this.types = new TypeBinding[typesLength * 2][], 0, typesLength);", "+\t\tthis.types[this.typeid] = new TypeBinding[1];", "+\t\treturn (RawTypeBinding) (this.types[rawTytpe.id = this.typeid++][0] = rawTytpe);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ece1aaa92489ee500e2484e1afb0c6ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java", "commitBeforeChange": "49a66f9a973247a981c10aeaef835e85ffcc455f", "commitAfterChange": "e08c40cf1dd83a4533badddfba88090397fd7a51", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic abstract ArrayBinding getArrayType(TypeBinding leafComponentType, int dimensions);", "signatureAfterChange": "  \tpublic ArrayBinding getArrayType(TypeBinding leafType, int dimensions)", "diff": ["-\tpublic abstract ArrayBinding getArrayType(TypeBinding leafComponentType, int dimensions);", "+\t*/ ", "+\tpublic ArrayBinding getArrayType(TypeBinding leafType, int dimensions) {", "+\t\tTypeBinding unannotatedLeafType = getUnannotatedType(leafType);", "+\t\tTypeBinding[] derivedTypes = this.types[unannotatedLeafType.id];", "+\t\tint i, length = derivedTypes.length;", "+\t\tfor (i = 0; i < length; i++) {", "+\t\t\tTypeBinding derivedType = derivedTypes[i];", "+\t\t\tif (derivedType == null) ", "+\t\t\t\tbreak;", "+\t\t\tif (!derivedType.isArrayType() || derivedType.hasTypeAnnotations())", "+\t\t\t\tcontinue;", "+\t\t\tif (derivedType.leafComponentType() == unannotatedLeafType && derivedType.dimensions() == dimensions)", "+\t\t\t\treturn (ArrayBinding) derivedType;", "+\t\t}", "+\t\tif (i == length) {", "+\t\t\tSystem.arraycopy(derivedTypes, 0, derivedTypes = new TypeBinding[length * 2], 0, length);", "+\t\t\tthis.types[unannotatedLeafType.id] = derivedTypes;", "+\t\t}", "+\t\tTypeBinding arrayType = derivedTypes[i] = new ArrayBinding(unannotatedLeafType, dimensions, this.environment);", "+\t\tint typesLength = this.types.length;", "+\t\tif (this.typeid == typesLength)", "+\t\t\tSystem.arraycopy(this.types, 0, this.types = new TypeBinding[typesLength * 2][], 0, typesLength);", "+\t\tthis.types[this.typeid] = new TypeBinding[1];", "+\t\treturn (ArrayBinding) (this.types[arrayType.id = this.typeid++][0] = arrayType);", "+\t}"]}], "num": 46889}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c2ae3e027636a16bbf39e7fada8cb5ea", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73dabac583abae68de5fa1aa0be86a1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/InMemoryIndex.java", "commitBeforeChange": "147aad43f7900f9d4f22271c9fe4f288f16528d9", "commitAfterChange": "820af9e764943dadd04b7516b2f121c6aaa1d26b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \tprotected WordEntry[] getSortedWordEntries()", "signatureAfterChange": "\r \tprotected WordEntry[] getSortedWordEntries()", "diff": ["-\t\t\tWordEntry[] words= new WordEntry[this.words.size()];\r", "-\t\t\tint numWords= 0;\r", "-\t\t\tObject[] entries= this.words.valueTable;\r", "-\t\t\tfor (int i= entries.length; i-- > 0;)\r", "-\t\t\t\tif (entries[i] != null)\r", "-\t\t\t\t\twords[numWords++]= (WordEntry) entries[i];\r", "+\t\t\tWordEntry[] words= this.words.asArray();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9384eaf378b774d62d7589044758b6a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprotected IJavaElement selectNode(ICompilationUnit unit, String textComment, int expected, int index) throws JavaModelException", "signatureAfterChange": " \tprotected SourceType selectSourceType(ICompilationUnit unit, String selection) throws JavaModelException", "diff": ["+\t */", "+\tprotected SourceType selectSourceType(ICompilationUnit unit, String selection) throws JavaModelException {", "+\t\treturn selectSourceType(unit, selection, 1);", "-", "-\tprotected IJavaElement selectNode(ICompilationUnit unit, String textComment, int expected, int index) throws JavaModelException {", "-//\t\tASTNode node = findNode(unit, paramTypeName);", "-\t\t// TODO (frederic) verify with olivier whether we should always have a PARAMETERIZED TYPE or", "-\t\t// QUALIFIED_TYPE with PARAMETERIZED_TYPE parent are valid...", "-//\t\tassertEquals(\"Invalid node type\", ASTNode.PARAMETERIZED_TYPE, node.getNodeType());", "-//\t\tParameterizedType parameterizedType = (ParameterizedType) node;", "-//\t\tIJavaElement[] selection = unit.codeSelect(node.getStartPosition(), node.getLength());", "-\t\tint selectionPos = selectionEnd(unit, textComment);", "-\t\tIJavaElement[] selection = unit.codeSelect(selectionPos, 0);", "-\t\tassertEquals(\"Invalid selection\", expected, selection.length);", "-\t\treturn selection[index];", "-\t}"]}], "num": 13095}
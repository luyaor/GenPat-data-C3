{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4888ecc0408a664206b5c49adc272c89", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06ab66b34c5dfadf8f9e1080453e0dbe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java", "commitBeforeChange": "e57c1379bf2ab200d310135306edb2776411f753", "commitAfterChange": "6c12498f9ae6e40c6b8c9e84d6e41e995e1be6a4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private int getNextToken0() throws InvalidInputException", "signatureAfterChange": " private int getNextToken0() throws InvalidInputException", "diff": ["-\t\treturn this.currentPosition > this.source.length ? TokenNameEOF : TokenNameRBRACE;", "+\t\treturn this.currentPosition > this.eofPosition ? TokenNameEOF : TokenNameRBRACE;", "+\t\t\t\t\tint temp = this.eofPosition;", "+\t\t\t\t\tthis.eofPosition = this.source.length;", "+\t\t\t\t \tthis.eofPosition = temp;", "-\t\t\t\t\t\t\t\tif (this.currentPosition + lookAhead == this.source.length)", "+\t\t\t\t\t\t\t\tif (this.currentPosition + lookAhead == this.eofPosition)", "-\t\t\t\t\t\t\tif (this.currentPosition + lookAhead == this.source.length)", "+\t\t\t\t\t\t\tif (this.currentPosition + lookAhead == this.eofPosition)", "-\t\t\t\t\t\tif (this.currentPosition + lookAhead == this.source.length)", "+\t\t\t\t\t\tif (this.currentPosition + lookAhead == this.eofPosition)", "-\t\t\t\t\t\t\t\tif (this.currentPosition + lookAhead == this.source.length)", "+\t\t\t\t\t\t\t\tif (this.currentPosition + lookAhead == this.eofPosition)", "-\t\t\t\t\t\t\t\t   && this.source.length > this.currentPosition) {", "+\t\t\t\t\t\t\t\t   && this.eofPosition > this.currentPosition) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77718f52a935ea18626ca7c08fc9ad5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "0f7f9d63e5fbc5d41771bd4e2e39b628130add76", "commitAfterChange": "ed4cdf5cf5dec0284dce12a661248f2f9a27a709", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "  \tprivate int printJavadocBlockNodesNewLines(FormatJavadocBlock block, FormatJavadocNode node, int previousEnd)", "signatureAfterChange": "  \tprivate int printJavadocBlockNodesNewLines(FormatJavadocBlock block, FormatJavadocNode node, int previousEnd)", "diff": ["-\t    \tint tokenLength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t    \tint length = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t\t\t\tint firstColumn = 1 + this.indentationLevel + BLOCK_LINE_PREFIX_LENGTH;", "+\t\t\t\tif (headerLine) firstColumn++;", "-\t\t\t\t\tint firstColumn = 1 + this.indentationLevel + BLOCK_LINE_PREFIX_LENGTH;", "-\t\t\t\t\tif (headerLine) firstColumn++;", "-\t\t\t    \t\ttokenLength++; // include space between nodes", "+\t\t\t    \t\tlength++; // include space between nodes", "-    \t\t\t\tint col = this.column + tokenLength;", "+    \t\t\t\tint col = this.column + length;", "-\t    \t\t\t\t\t\ttokenLength = 1;", "+\t    \t\t\t\t\t\tlength = 1;", "-\t    \t\t\t\t\t\ttokenLength = 1;", "+\t    \t\t\t\t\t\tlength = 1;", "-\t\t\t\t    \t\t\ttokenLength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t\t\t\t    \t\t\tlength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "-\t    \t\t\t\tcol += tokenLength;", "+\t    \t\t\t\tcol += length;", "-\t    \t\t\t\ttokenLength++;", "+\t    \t\t\t\tlength++;", "-\t    \t\t\ttokenLength += (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t    \t\t\tlength += (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "-\t    \t\t\ttokenLength++;", "+\t    \t\t\tlength++;", "-\t\t    \t\t\ttokenLength += (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t\t    \t\t\tint tokenLength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t\t    \t\t\tif ((firstColumn + length + tokenLength) >= maxColumn) {", "+\t\t    \t\t\t\tbreak;", "+\t\t    \t\t\t}", "+\t\t    \t\t\tlength += tokenLength;", "-\t    \t\ttokenLength += inlinedBlock.tagEnd - inlinedBlock.sourceStart + 1;", "+\t    \t\tlength += inlinedBlock.tagEnd - inlinedBlock.sourceStart + 1;", "-\t    \t\ttokenLength++; // include space between nodes", "+\t    \t\tlength++; // include space between nodes", "-\t\t\tif ((this.column + tokenLength) > maxColumn) {", "+\t\t\tif ((this.column + length) > maxColumn) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6fa59a33e1980b13fcdccd2c8774a91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java", "commitBeforeChange": "6c5ff7a40e06214003233124a78f91b46a0db4e6", "commitAfterChange": "abfab6e38455079c19f7f3fadcf15c77c144ade8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, \tCodeStream codeStream, boolean valueRequired)", "diff": ["-\tpublic void generateCode(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tboolean valueRequired) {", "+\tpublic void generateCode(BlockScope currentScope, \tCodeStream codeStream, boolean valueRequired) {", "-\t\tif (initializer != null) {", "-\t\t\tinitializer.generateCode(currentScope, codeStream, valueRequired);", "+\t\tif (this.initializer != null) {", "+\t\t\tthis.initializer.generateCode(currentScope, codeStream, valueRequired);", "-\t\tint nonNullDimensionsLength = 0;", "-\t\tfor (int i = 0, max = dimensions.length; i < max; i++)", "-\t\t\tif (dimensions[i] != null) {", "-\t\t\t\tdimensions[i].generateCode(currentScope, codeStream, true);", "-\t\t\t\tnonNullDimensionsLength++;", "-\t\t\t}", "+\t\tint explicitDimCount = 0;", "+\t\tfor (int i = 0, max = this.dimensions.length; i < max; i++) {", "+\t\t\tExpression dimExpression;", "+\t\t\tif ((dimExpression = this.dimensions[i]) == null) break; // implicit dim, no further explict after this point", "+\t\t\tdimExpression.generateCode(currentScope, codeStream, true);", "+\t\t\texplicitDimCount++;", "+\t\t}", "-\t\t// Generate a sequence of bytecodes corresponding to an array allocation", "-\t\tif (this.resolvedType.dimensions() == 1) {", "+\t\t// array allocation", "+\t\tif (explicitDimCount == 1) {", "-\t\t\tcodeStream.multianewarray(this.resolvedType, nonNullDimensionsLength);", "+\t\t\tcodeStream.multianewarray(this.resolvedType, explicitDimCount);", "-", "-\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-"]}], "num": 56059}
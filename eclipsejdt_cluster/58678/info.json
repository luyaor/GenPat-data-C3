{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "608163e7d7dd1883ba2037e03f0fcf0a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bf6c75fe6ee1ed9739df323624f064b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Requestor.java", "commitBeforeChange": "9ca5fa129e003b71c76c933d9b76010e0a23b71b", "commitAfterChange": "d86670742691fd07e39a2dd80f7e11e37621edc5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void acceptResult(CompilationResult compilationResult)", "signatureAfterChange": " public void acceptResult(CompilationResult compilationResult)", "diff": ["-\t\t\tif (problems[i] != null) {", "+\t\t\tDefaultProblem problem = (DefaultProblem) problems[i];", "+\t\t\tif (problem != null) {", "-\t\t\t\tbuffer.append(problemCount + (problems[i].isError() ? \". ERROR\" : \". WARNING\"));", "-\t\t\t\tbuffer.append(\" in \" + new String(problems[i].getOriginatingFileName()).replace('/', '\\\\'));", "+\t\t\t\tbuffer.append(problemCount + (problem.isError() ? \". ERROR\" : \". WARNING\"));", "+\t\t\t\tbuffer.append(\" in \" + new String(problem.getOriginatingFileName()).replace('/', '\\\\'));", "-\t\t\t\t\tbuffer.append(((DefaultProblem)problems[i]).errorReportSource(unitSource));", "+\t\t\t\t\tbuffer.append(problem.errorReportSource(unitSource));", "-\t\t\t\t\tbuffer.append(problems[i].getMessage());", "+\t\t\t\t\tif (showCategory) {", "+\t\t\t\t\t\tString category = problem.getInternalCategoryMessage();", "+\t\t\t\t\t\tif (category != null) {", "+\t\t\t\t\t\t\tbuffer.append(\"[@cat:\").append(category).append(\"] \");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (showWarningToken) {", "+\t\t\t\t\t\tlong irritant = ProblemReporter.getIrritant(problem.getID());", "+\t\t\t\t\t\tif (irritant != 0) {", "+\t\t\t\t\t\t\tString warningToken = CompilerOptions.warningTokenFromIrritant(irritant);", "+\t\t\t\t\t\t\tif (warningToken != null) {", "+\t\t\t\t\t\t\t\tbuffer.append(\"[@sup:\").append(warningToken).append(\"] \");", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tbuffer.append(problem.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45bfce0e412dc6554195e4001a398352", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "325f3cd70524915aea7c5208cccbff17dcccc775", "commitAfterChange": "eaaeea046b340f91bd2146e38b8d80abded44679", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic static void initializeAfterLoad(IProgressMonitor monitor) throws CoreException", "diff": ["-\t\t\tif (monitor != null) monitor.beginTask(Messages.javamodel_initialization, 100);", "-\t\t\t// dummy query for waiting until the indexes are ready and classpath containers/variables are initialized", "-\t\t\tSearchEngine engine = new SearchEngine();", "-\t\t\tJavaModelManager.getJavaModelManager().deltaState.initializeRoots(); // initialize all containers and variables", "-\t\t\tIJavaSearchScope scope = SearchEngine.createWorkspaceScope(); // initialize all containers and variables", "+\t\t\tif (monitor != null) \tmonitor.beginTask(Messages.javamodel_initialization, 100);", "+\t\t\t", "+\t\t\t// initialize all containers and variables", "+\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\t\t\tif (monitor != null) {", "+\t\t\t\t\tmonitor.subTask(Messages.javamodel_configuring_classpath_containers);", "+\t\t\t\t\tmanager.batchContainerInitializationsProgress.set(new SubProgressMonitor(monitor, 50)); // 50% of the time is spent in initializing containers and variables", "+\t\t\t\t}", "+\t\t\t\tmanager.deltaState.initializeRoots(); ", "+\t\t\t} finally {", "+\t\t\t\tmanager.batchContainerInitializationsProgress.set(null);", "+\t\t\t}", "+\t\t\t", "+\t\t\t// dummy query for waiting until the indexes are ready", "+\t\t\tSearchEngine engine = new SearchEngine();", "+\t\t\tIJavaSearchScope scope = SearchEngine.createWorkspaceScope();", "+\t\t\ttry {", "+\t\t\t\tif (monitor != null)", "+\t\t\t\t\tmonitor.subTask(Messages.javamodel_configuring_searchengine);", "-\t\t\t\t\tmonitor == null ? null : new SubProgressMonitor(monitor, 99) // 99% of the time is spent in the dummy search", "+\t\t\t\t\tmonitor == null ? null : new SubProgressMonitor(monitor, 49) // 49% of the time is spent in the dummy search", "+\t\t\tif (monitor != null)", "+\t\t\t\tmonitor.subTask(Messages.javamodel_getting_build_state_number);", "-\t\t\tfinal JavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "+\t\t\tfinal JavaModel model = manager.getJavaModel();", "+\t\t\t\tif (monitor != null)", "+\t\t\t\t\tmonitor.subTask(Messages.javamodel_building_after_upgrade);", "+\t\t\t\tif (monitor != null)", "+\t\t\t\t\tmonitor.subTask(Messages.javamodel_refreshing_external_jars);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7a2fd1afc24f15d128f3c2d97fc8c78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "913c08568caa0adfd1165460a3e2394884803092", "commitAfterChange": "e85b48027c0c3aebf3b1385576eb671cefee5a77", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \t\tpublic void startLoggingSource(CompilationResult compilationResult)", "signatureAfterChange": " \t\tpublic void startLoggingSource(CompilationResult compilationResult)", "diff": ["-\t\t\t\tchar[] fileName = compilationUnit.getFileName();", "-\t\t\t\tFile f = new File(new String(fileName));", "-\t\t\t\tif (fileName != null) {", "-\t\t\t\t\tif (compilationUnit != null) {", "-\t\t\t\t\t\tthis.parameters.put(Logger.PATH, f.getAbsolutePath());", "+\t\t\t\tif (compilationUnit != null) {", "+    \t\t\t\tchar[] fileName = compilationUnit.getFileName();", "+    \t\t\t\tFile f = new File(new String(fileName));", "+    \t\t\t\tif (fileName != null) {", "+    \t\t\t\t\tthis.parameters.put(Logger.PATH, f.getAbsolutePath());", "+    \t\t\t\t}", "+    \t\t\t\tchar[][] packageName = compilationResult.packageName;", "+    \t\t\t\tif (packageName != null) {", "+    \t\t\t\t\tthis.parameters.put(", "+    \t\t\t\t\t\t\tLogger.PACKAGE,", "+    \t\t\t\t\t\t\tnew String(CharOperation.concatWith(packageName, File.separatorChar)));", "+    \t\t\t\t}", "+    \t\t\t\tCompilationUnit unit = (CompilationUnit) compilationUnit;", "+    \t\t\t\tString destinationPath = unit.destinationPath;", "+\t\t\t\t\tif (destinationPath == null) {", "+\t\t\t\t\t\tdestinationPath = this.main.destinationPath;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (destinationPath != null && destinationPath != NONE) {", "+\t\t\t\t\t\tif (File.separatorChar == '/') {", "+\t\t\t\t\t\t\tthis.parameters.put(Logger.OUTPUT, destinationPath);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.parameters.put(Logger.OUTPUT, destinationPath.replace('/', File.separatorChar));", "+\t\t\t\t\t\t}"]}], "num": 58678}
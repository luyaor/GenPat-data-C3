{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79093db2a083d4fab4e957d7cab40dc6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28339a634de29b004e4e3f662b0f697e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java", "commitBeforeChange": "ee446c21d0aaa4f4c4b0513ad11960ed53ccba7d", "commitAfterChange": "271be052e104f1beefee4cd78039eca6ee6adb4f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate JavaElement getUnresolvedJavaElement()", "signatureAfterChange": "  \tprivate JavaElement getUnresolvedJavaElement()", "diff": ["-\t\t\t// field", "-\t\t\tFieldBinding fieldBinding = (FieldBinding) this.binding;", "-\t\t\tif (fieldBinding.declaringClass == null) return null; // arraylength", "-\t\t\tIType declaringType = (IType) getDeclaringClass().getJavaElement();", "-\t\t\tif (declaringType == null) return null;", "-\t\t\treturn (JavaElement) declaringType.getField(getName());", "+\t\t\tif (this.resolver instanceof DefaultBindingResolver) {", "+\t\t\t\tDefaultBindingResolver defaultBindingResolver = (DefaultBindingResolver) this.resolver;", "+\t\t\t\treturn Util.getUnresolvedJavaElement(", "+\t\t\t\t\t\t(FieldBinding) this.binding,", "+\t\t\t\t\t\tdefaultBindingResolver.workingCopyOwner,", "+\t\t\t\t\t\tdefaultBindingResolver.getBindingsToNodesMap());", "+\t\t\t} else {", "+\t\t\t\treturn Util.getUnresolvedJavaElement((FieldBinding) this.binding, null, null);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "977818342405eee872497c8de1f12c8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "5ec4215ec4f52f55dcb6e314c5f755ceba34fff6", "commitAfterChange": "5a4580d346b40161405692269366aba5f28266bb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r private void addInfoFromOpenClassFile(ClassFile classFile, ArrayList infos) throws JavaModelException", "signatureAfterChange": "\r protected void addInfoFromClosedElement(Openable handle,ArrayList infos,ArrayList units,String resourcePath) throws JavaModelException", "diff": ["- */\r", "-private void addInfoFromOpenClassFile(ClassFile classFile, ArrayList infos) throws JavaModelException {\r", "-\tIType type = classFile.getType();\r", "-\tIGenericType info = (IGenericType) ((BinaryType) type).getRawInfo();\r", "-\tinfos.add(info);\r", "-\tthis.infoToHandle.put(info, classFile);\r", "-}\r", "+protected void addInfoFromClosedElement(Openable handle,ArrayList infos,ArrayList units,String resourcePath) throws JavaModelException {\r", "+\tHierarchyBinaryType binaryType = (HierarchyBinaryType) binariesFromIndexMatches.get(resourcePath);\r", "+\tif (binaryType != null) {\r", "+\t\tthis.addInfoFromBinaryIndexMatch(handle, binaryType, infos);\r", "+\t} else {\r", "+\t\tsuper.addInfoFromClosedElement(handle, infos, units, resourcePath);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddffc8ddd13d8d13ffd34c5df9b90850", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": " public boolean matchesDecodedPattern(SearchPattern decodedPattern)", "signatureAfterChange": " public boolean matchesDecodedKey(SearchPattern decodedPattern)", "diff": ["-public boolean matchesDecodedPattern(SearchPattern decodedPattern) {", "+public boolean matchesDecodedKey(SearchPattern decodedPattern) {", "-\t\tcase TYPE_SUFFIX : // nothing", "-\t/* check qualification - exact match only */", "+\tif (!matchesName(this.simpleName, pattern.simpleName))", "+\t\treturn false;", "+", "+\t// check package - exact match only", "-\t/* check enclosingTypeName - exact match only */", "+", "+\t// check enclosingTypeNames - exact match only", "-\t\t// empty char[][] means no enclosing type (in which case, the decoded one is the empty char array)", "-\t\tif (this.enclosingTypeNames.length == 0) {", "-\t\t\tif (pattern.enclosingTypeNames != CharOperation.NO_CHAR_CHAR) return false;", "-\t\t} else {", "-\t\t\tif (!CharOperation.equals(this.enclosingTypeNames, pattern.enclosingTypeNames, this.isCaseSensitive))", "-\t\t\t\tif (!CharOperation.equals(pattern.enclosingTypeNames, ONE_ZERO_CHAR)) // if not a local or anonymous type", "-\t\t\t\t\treturn false;", "-\t\t}", "+\t\tif (this.enclosingTypeNames.length == 0)", "+\t\t\treturn pattern.enclosingTypeNames.length == 0;", "+\t\tif (this.enclosingTypeNames.length == 1 && pattern.enclosingTypeNames.length == 1)", "+\t\t\treturn CharOperation.equals(this.enclosingTypeNames[0], pattern.enclosingTypeNames[0], this.isCaseSensitive);", "+\t\tif (pattern.enclosingTypeNames == ONE_ZERO_CHAR)", "+\t\t\treturn true; // is a local or anonymous type", "+\t\treturn CharOperation.equals(this.enclosingTypeNames, pattern.enclosingTypeNames, this.isCaseSensitive);", "+\t}", "+\treturn true;", "+}", "-\treturn matchesName(this.simpleName, pattern.simpleName);"]}], "num": 55876}
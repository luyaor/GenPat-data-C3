{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "725dcb6cb46545c84ebe89b53b973ad9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32cb6fa7686aea08591540554cbf093c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "b4f87915b858b8e38e418046984ece5dc8db6148", "commitAfterChange": "4b0e968ea18c9b6d539f97894bc6451b0df31a4f", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tprivate void traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "signatureAfterChange": " \tprivate void traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputsInfo outputsInfo)", "diff": ["-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tif (rootInfo != null) { // if inside a package fragment root", "-\t\t\t\t\t\t\t\tif (!isValidParent) continue; ", "-\t\t\t\t\t\t\t\tif (parent == null) {", "-\t\t\t\t\t\t\t\t\t// find the parent of the non-java resource to attach to", "-\t\t\t\t\t\t\t\t\tif (this.currentElement == null ", "-\t\t\t\t\t\t\t\t\t\t\t|| !this.currentElement.getJavaProject().equals(rootInfo.project)) {", "-\t\t\t\t\t\t\t\t\t\t// force the currentProject to be used", "-\t\t\t\t\t\t\t\t\t\tthis.currentElement = (Openable)rootInfo.project;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (elementType == IJavaElement.JAVA_PROJECT", "-\t\t\t\t\t\t\t\t\t\t|| (elementType == IJavaElement.PACKAGE_FRAGMENT_ROOT ", "-\t\t\t\t\t\t\t\t\t\t\t&& res instanceof IProject)) { ", "-\t\t\t\t\t\t\t\t\t\t// NB: attach non-java resource to project (not to its package fragment root)", "-\t\t\t\t\t\t\t\t\t\tparent = (Openable)rootInfo.project;", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tparent = this.createElement(res, elementType, rootInfo);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (parent == null) {", "-\t\t\t\t\t\t\t\t\t\tisValidParent = false;", "-\t\t\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (rootInfo != null) { // if inside a package fragment root", "+\t\t\t\t\t\t\tif (!isValidParent) continue; ", "+\t\t\t\t\t\t\tif (parent == null) {", "+\t\t\t\t\t\t\t\t// find the parent of the non-java resource to attach to", "+\t\t\t\t\t\t\t\tif (this.currentElement == null ", "+\t\t\t\t\t\t\t\t\t\t|| !this.currentElement.getJavaProject().equals(rootInfo.project)) {", "+\t\t\t\t\t\t\t\t\t// force the currentProject to be used", "+\t\t\t\t\t\t\t\t\tthis.currentElement = (Openable)rootInfo.project;", "-\t\t\t\t\t\t\t\t// add child as non java resource", "-\t\t\t\t\t\t\t\tnonJavaResourcesChanged(parent, child);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t// the non-java resource (or its parent folder) will be attached to the java project", "-\t\t\t\t\t\t\t\tif (orphanChildren == null) orphanChildren = new IResourceDelta[length];", "-\t\t\t\t\t\t\t\torphanChildren[i] = child;", "+\t\t\t\t\t\t\t\tif (elementType == IJavaElement.JAVA_PROJECT", "+\t\t\t\t\t\t\t\t\t|| (elementType == IJavaElement.PACKAGE_FRAGMENT_ROOT ", "+\t\t\t\t\t\t\t\t\t\t&& res instanceof IProject)) { ", "+\t\t\t\t\t\t\t\t\t// NB: attach non-java resource to project (not to its package fragment root)", "+\t\t\t\t\t\t\t\t\tparent = (Openable)rootInfo.project;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tparent = this.createElement(res, elementType, rootInfo);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (parent == null) {", "+\t\t\t\t\t\t\t\t\tisValidParent = false;", "+\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t// add child as non java resource", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tnonJavaResourcesChanged(parent, child);", "+\t\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t\t// ignore", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// the non-java resource (or its parent folder) will be attached to the java project", "+\t\t\t\t\t\t\tif (orphanChildren == null) orphanChildren = new IResourceDelta[length];", "+\t\t\t\t\t\t\torphanChildren[i] = child;", "+\t\t\t\t\t\t\t\t// ignore"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f177253f84958a0af481202bf7d980ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "a3a09ad256da223aa1f3d2fe29b81e346d09a16c", "commitAfterChange": "4d171ddaa03263dfdcaba85fefc5b6e9a52639eb", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tprotected boolean traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tIJavaProject currentProject, \t\tIPath currentOutput, \t\tint outputTraverseMode)", "signatureAfterChange": " \tprotected boolean traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tIJavaProject currentProject, \t\tIPath currentOutput, \t\tint outputTraverseMode)", "diff": ["+\t\t\t\tboolean outputIsFiltered = false;", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// case of .class file under project and no source folder", "-\t\t\t\t\t\t// proj=bin", "-\t\t\t\t\t\tif (childType == IJavaElement.JAVA_PROJECT ", "-\t\t\t\t\t\t\t&& childRes instanceof IFile ", "-\t\t\t\t\t\t\t&& Util.isValidClassFileName(childRes.getName())) {", "-\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\toutputIsFiltered = true;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// case of .class file under project and no source folder", "+\t\t\t\t\t\t\t// proj=bin", "+\t\t\t\t\t\t\tif (childType == IJavaElement.JAVA_PROJECT ", "+\t\t\t\t\t\t\t\t\t&& childRes instanceof IFile ", "+\t\t\t\t\t\t\t\t\t&& Util.isValidClassFileName(childRes.getName())) {", "+\t\t\t\t\t\t\t\toutputIsFiltered = true;", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\toutputIsFiltered = true;", "-\t\t\t\tif (childType == -1", "-\t\t\t\t\t|| !this.traverseDelta(child, childType, (currentProject == null && isPkgFragmentRoot) ? projectOfRoot : currentProject, currentOutput, outputTraverseMode)) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tif (currentProject != null) {", "-\t\t\t\t\t\t\tif (!isValidParent) continue; ", "-\t\t\t\t\t\t\tif (parent == null) {", "-\t\t\t\t\t\t\t\tif (this.currentElement == null || !this.currentElement.getJavaProject().equals(currentProject)) {", "-\t\t\t\t\t\t\t\t\t// force the currentProject to be used", "-\t\t\t\t\t\t\t\t\tthis.currentElement = (Openable)currentProject;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (elementType == IJavaElement.JAVA_PROJECT", "-\t\t\t\t\t\t\t\t\t|| (elementType == IJavaElement.PACKAGE_FRAGMENT_ROOT && res instanceof IProject)) { ", "-\t\t\t\t\t\t\t\t\t// NB: attach non-java resource to project (not to its package fragment root)", "-\t\t\t\t\t\t\t\t\tparent = (Openable)currentProject;", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tparent = this.createElement(res, elementType, currentProject);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\tif (!outputIsFiltered) {", "+\t\t\t\t\tif (childType == -1", "+\t\t\t\t\t\t|| !this.traverseDelta(child, childType, (currentProject == null && isPkgFragmentRoot) ? projectOfRoot : currentProject, currentOutput, outputTraverseMode)) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tif (currentProject != null) {", "+\t\t\t\t\t\t\t\tif (!isValidParent) continue; ", "-\t\t\t\t\t\t\t\t\tisValidParent = false;", "-\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t\tif (this.currentElement == null || !this.currentElement.getJavaProject().equals(currentProject)) {", "+\t\t\t\t\t\t\t\t\t\t// force the currentProject to be used", "+\t\t\t\t\t\t\t\t\t\tthis.currentElement = (Openable)currentProject;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (elementType == IJavaElement.JAVA_PROJECT", "+\t\t\t\t\t\t\t\t\t\t|| (elementType == IJavaElement.PACKAGE_FRAGMENT_ROOT && res instanceof IProject)) { ", "+\t\t\t\t\t\t\t\t\t\t// NB: attach non-java resource to project (not to its package fragment root)", "+\t\t\t\t\t\t\t\t\t\tparent = (Openable)currentProject;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tparent = this.createElement(res, elementType, currentProject);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (parent == null) {", "+\t\t\t\t\t\t\t\t\t\tisValidParent = false;", "+\t\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t// add child as non java resource", "+\t\t\t\t\t\t\t\tnonJavaResourcesChanged(parent, child);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\torphanChildren[i] = child;", "-\t\t\t\t\t\t\t// add child as non java resource", "-\t\t\t\t\t\t\tnonJavaResourcesChanged(parent, child);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\torphanChildren[i] = child;", "+\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\toneChildOnClasspath = true;", "-\t\t\t\t} else {", "-\t\t\t\t\toneChildOnClasspath = true;", "-\t\t\t\t", "+\t\t\t\t\t\t\t\t"]}], "num": 61384}
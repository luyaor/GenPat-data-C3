{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57180c44e66aa4853924ae14f9a4ad71", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5033ba2eada17a41c15023d6650fa7eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["-\tthis.codegenBinding = this.binding.original();", "+\tFieldBinding codegenBinding = this.binding.original();", "-\t\tif ((currentScope.enclosingSourceType() != this.codegenBinding.declaringClass)", "+\t\tif ((currentScope.enclosingSourceType() != codegenBinding.declaringClass)", "-\t\t\t\t((SourceTypeBinding) this.codegenBinding.declaringClass).addSyntheticMethod(this.codegenBinding, isReadAccess);", "-\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(this.codegenBinding, this, isReadAccess);", "+\t\t\t\t((SourceTypeBinding) codegenBinding.declaringClass).addSyntheticMethod(codegenBinding, isReadAccess);", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(codegenBinding, this, isReadAccess);", "-\t\tthis.syntheticAccessors[isReadAccess ? FieldReference.READ : FieldReference.WRITE] = destinationType.addSyntheticMethod(this.codegenBinding, isReadAccess);", "-\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(this.codegenBinding, this, isReadAccess);", "+\t\tthis.syntheticAccessors[isReadAccess ? FieldReference.READ : FieldReference.WRITE] = destinationType.addSyntheticMethod(codegenBinding, isReadAccess);", "+\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(codegenBinding, this, isReadAccess);", "-\t\t\tthis.syntheticAccessors[isReadAccess ? FieldReference.READ : FieldReference.WRITE] = currentCompatibleType.addSyntheticMethod(this.codegenBinding, isReadAccess);", "-\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(this.codegenBinding, this, isReadAccess);", "+\t\t\tthis.syntheticAccessors[isReadAccess ? FieldReference.READ : FieldReference.WRITE] = currentCompatibleType.addSyntheticMethod(codegenBinding, isReadAccess);", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(codegenBinding, this, isReadAccess);", "-\t\t}", "-\t}", "-\t// if the binding declaring class is not visible, need special action", "-\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "-\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t// and not from Object or implicit static field access.", "-\tif (this.binding.declaringClass != this.receiverType", "-\t\t\t&& !this.receiverType.isArrayType()", "-\t\t\t&& this.binding.declaringClass != null // array.length", "-\t\t\t&& this.binding.constant() == Constant.NotAConstant) {", "-\t\tCompilerOptions options = currentScope.compilerOptions();", "-\t\tif ((options.targetJDK >= ClassFileConstants.JDK1_2", "-\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !(this.receiver.isImplicitThis() && this.codegenBinding.isStatic()))", "-\t\t\t\t&& this.binding.declaringClass.id != TypeIds.T_JavaLangObject) // no change for Object fields", "-\t\t\t|| !this.binding.declaringClass.canBeSeenBy(currentScope)) {", "-", "-\t\t\tthis.codegenBinding =", "-\t\t\t\tcurrentScope.enclosingSourceType().getUpdatedFieldBinding(", "-\t\t\t\t\tthis.codegenBinding,", "-\t\t\t\t\t(ReferenceBinding) this.receiverType.erasure());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a153f248981edf5c798735b637456d0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "26e96a017b590b444a246c8fba814dc78fd85b77", "commitAfterChange": "80351fb8a54757084b1b27c49cb8b0584bf78834", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " \tpublic boolean visit(TagElement node)", "signatureAfterChange": " \tpublic boolean visit(SuperMethodReference node)", "diff": ["+\t */", "+\tpublic boolean visit(SuperMethodReference node) {", "+\t\tif (node.getQualifier() != null) {", "+\t\t\tnode.getQualifier().accept(this);", "+\t\t\tthis.buffer.append('.');", "+\t\t}", "+\t\tthis.buffer.append(\"super\");//$NON-NLS-1$", "+\t\tvisitReferenceTypeArguments(node.typeArguments());", "+\t\tnode.getName().accept(this);", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc4dacb6c03c155c27784e2c96fa88ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/SourceIndexer.java", "commitBeforeChange": "fe024fd7797ce73b0a83969f685073606863b79e", "commitAfterChange": "124641ac651bbea2bd062a9605817d39b473bf0e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding, AccessRestriction accessRestriction)", "signatureAfterChange": "  \tpublic void accept(ISourceType[] sourceTypes, PackageBinding packageBinding, AccessRestriction accessRestriction)", "diff": ["-\t\t// ensure to jump back to toplevel type for first one (could be a member)", "-\t\twhile (sourceTypes[0].getEnclosingType() != null) {", "-\t\t\tsourceTypes[0] = sourceTypes[0].getEnclosingType();", "-\t\t}", "-", "-\t\tCompilationResult result =", "-\t\t\tnew CompilationResult(sourceTypes[0].getFileName(), 1, 1, this.options.maxProblemsPerUnit);", "-\t\t", "-\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=305259, build the compilation unit in its own sand box.", "-\t\tfinal long savedComplianceLevel = this.options.complianceLevel;", "-\t\tfinal long savedSourceLevel = this.options.sourceLevel;", "-\t\t", "-\t\ttry {", "-\t\t\tIJavaProject project = ((SourceTypeElementInfo) sourceTypes[0]).getHandle().getJavaProject();", "-\t\t\tthis.options.complianceLevel = CompilerOptions.versionToJdkLevel(project.getOption(JavaCore.COMPILER_COMPLIANCE, true));", "-\t\t\tthis.options.sourceLevel = CompilerOptions.versionToJdkLevel(project.getOption(JavaCore.COMPILER_SOURCE, true));", "-", "-\t\t\t// need to hold onto this", "-\t\t\tCompilationUnitDeclaration unit =", "-\t\t\t\tSourceTypeConverter.buildCompilationUnit(", "-\t\t\t\t\t\tsourceTypes,//sourceTypes[0] is always toplevel here", "-\t\t\t\t\t\tSourceTypeConverter.FIELD_AND_METHOD // need field and methods", "-\t\t\t\t\t\t| SourceTypeConverter.MEMBER_TYPE // need member types", "-\t\t\t\t\t\t| SourceTypeConverter.FIELD_INITIALIZATION // need field initialization", "-\t\t\t\t\t\t| SourceTypeConverter.LOCAL_TYPE, // need local type", "-\t\t\t\t\t\tthis.lookupEnvironment.problemReporter,", "-\t\t\t\t\t\tresult);", "-", "-\t\t\tif (unit != null) {", "-\t\t\t\tthis.lookupEnvironment.buildTypeBindings(unit, accessRestriction);", "-\t\t\t\tthis.lookupEnvironment.completeTypeBindings(unit);", "-\t\t\t}", "-\t\t} finally {", "-\t\t\tthis.options.complianceLevel = savedComplianceLevel;", "-\t\t\tthis.options.sourceLevel = savedSourceLevel;", "-\t\t}", "+\t\tISourceType sourceType = sourceTypes[0];", "+\t\twhile (sourceType.getEnclosingType() != null)", "+\t\t\tsourceType = sourceType.getEnclosingType();", "+\t\tSourceTypeElementInfo elementInfo = (SourceTypeElementInfo) sourceType;", "+\t\tIType type = elementInfo.getHandle();", "+\t\tICompilationUnit sourceUnit = (ICompilationUnit) type.getCompilationUnit();", "+\t\taccept(sourceUnit, accessRestriction);\t\t"]}], "num": 8013}
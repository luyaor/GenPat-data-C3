{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5970d7894a6494b0c7b94efb6811d388", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36b014252dce5c7755bbecc23f2edacc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "b2caa750738c585e3970cd6cbdee229067bea596", "commitAfterChange": "8d1eb8a1ba1f8d42e85f057c2e74fe0db8cb690d", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " protected void consumeBinaryExpression(int op)", "signatureAfterChange": " protected void consumeBinaryExpression(int op)", "diff": ["-\tif (op == OR_OR) {", "-\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\tnew OR_OR_Expression(", "-\t\t\t\tthis.expressionStack[this.expressionPtr], ", "-\t\t\t\tthis.expressionStack[this.expressionPtr + 1], ", "-\t\t\t\top); ", "-\t} else {", "-\t\tif (op == AND_AND) {", "+\tExpression expr1 = this.expressionStack[this.expressionPtr];", "+\tExpression expr2 = this.expressionStack[this.expressionPtr + 1];", "+\tswitch(op) {", "+\t\tcase OR_OR :", "+\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\tnew OR_OR_Expression(", "+\t\t\t\t\texpr1, ", "+\t\t\t\t\texpr2, ", "+\t\t\t\t\top); ", "+\t\t\tbreak;", "+\t\tcase AND_AND :", "-\t\t\t\t\tthis.expressionStack[this.expressionPtr], ", "-\t\t\t\t\tthis.expressionStack[this.expressionPtr + 1], ", "+\t\t\t\t\texpr1, ", "+\t\t\t\t\texpr2, ", "-\t\t} else {", "+\t\t\tbreak;", "+\t\tcase PLUS :", "-\t\t\tif ((op == PLUS) && this.optimizeStringLiterals) {", "-\t\t\t\tExpression expr1, expr2;", "-\t\t\t\texpr1 = this.expressionStack[this.expressionPtr];", "-\t\t\t\texpr2 = this.expressionStack[this.expressionPtr + 1];", "+\t\t\tif (this.optimizeStringLiterals) {", "+\t\t\t} else if (expr1 instanceof StringLiteral) {", "+\t\t\t\tif (expr2 instanceof StringLiteral) {", "+\t\t\t\t\t// string + string", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\t\t\t((StringLiteral) expr1).extendsWith((StringLiteral) expr2); ", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\t\t\tnew BinaryExpression(", "+\t\t\t\t\t\t\texpr1, ", "+\t\t\t\t\t\t\texpr2, ", "+\t\t\t\t\t\t\top);", "+\t\t\t\t}", "-\t\t\t\t\t\tthis.expressionStack[this.expressionPtr], ", "-\t\t\t\t\t\tthis.expressionStack[this.expressionPtr + 1], ", "+\t\t\t\t\t\texpr1, ", "+\t\t\t\t\t\texpr2, ", "-\t\t}", "+\t\t\tbreak;", "+\t\tdefault :", "+\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\tnew BinaryExpression(", "+\t\t\t\t\texpr1, ", "+\t\t\t\t\texpr2, ", "+\t\t\t\t\top);\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "512e8e944fe5b369a2bad70ad5c0b6ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic TextEdit format(int kind, String source, IRegion[] regions, int indentationLevel, String lineSeparator)", "signatureAfterChange": " \tpublic TextEdit format(int kind, String source, IRegion[] regions, int indentationLevel, String lineSeparator)", "diff": ["-\t\tupdateWorkingOptions(indentationLevel, lineSeparator, kind);", "-", "-\t\tif ((kind & K_COMMENTS_MASK) != 0)", "-\t\t\treturn formatComments(source, kind & K_COMMENTS_MASK, regions);", "-", "-\t\tif (prepareFormattedCode(source, kind) == null)", "-\t\t\treturn this.tokens.isEmpty() ? new MultiTextEdit() : null;", "-", "-\t\tMultiTextEdit result = new MultiTextEdit();", "-\t\tTextEditsBuilder resultBuilder = new TextEditsBuilder(this.sourceString, regions, this.tokenManager,", "-\t\t\t\tthis.workingOptions);", "-\t\tthis.tokenManager.traverse(0, resultBuilder);", "-\t\tfor (TextEdit edit : resultBuilder.getEdits()) {", "-\t\t\tresult.addChild(edit);", "-\t\t}", "-\t\treturn result;", "-\t}", "+\t\tthis.codeSnippetParsingUtil = new CodeSnippetParsingUtil();", "+\t\tboolean includeComments =  (kind & F_INCLUDE_COMMENTS) != 0;", "+\t\tswitch(kind & K_MASK) {", "+\t\t\tcase K_CLASS_BODY_DECLARATIONS :", "+\t\t\t\treturn formatClassBodyDeclarations(source, indentationLevel, lineSeparator, regions, includeComments);", "+\t\t\tcase K_COMPILATION_UNIT :", "+\t\t\t\treturn formatCompilationUnit(source, indentationLevel, lineSeparator, regions, includeComments);", "+\t\t\tcase K_EXPRESSION :", "+\t\t\t\treturn formatExpression(source, indentationLevel, lineSeparator, regions, includeComments);", "+\t\t\tcase K_STATEMENTS :", "+\t\t\t\treturn formatStatements(source, indentationLevel, lineSeparator, regions, includeComments);", "+\t\t\tcase K_UNKNOWN :", "+\t\t\t\treturn probeFormatting(source, indentationLevel, lineSeparator, regions, includeComments);", "+\t\t\tcase K_JAVA_DOC :", "+\t\t\tcase K_MULTI_LINE_COMMENT :", "+\t\t\tcase K_SINGLE_LINE_COMMENT :", "+\t\t\t\t//https://bugs.eclipse.org/bugs/show_bug.cgi?id=204091", "+\t\treturn null;"]}], "num": 27608}
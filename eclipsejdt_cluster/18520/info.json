{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "073989ecb21d8bfb31c914a9e1164c91", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "687cb3b30d0473d51d6d2d071ae1f850", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Reference.java", "commitBeforeChange": "86159c3022beffa95d7d57cb9f43b80d21471332", "commitAfterChange": "05e80a080ac1c390983f215b01043e8cb92e3fca", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "signatureAfterChange": "\r public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-\tthrow new ShouldNotImplement(\"Post increment variable  should provide an implementation for code generation\");\r", "+\tthrow new ShouldNotImplement(Util.bind(\"ast.postIncrShouldProvide\"/*nonNLS*/));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ec0e324834625c90cda339fe2281e2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Reference.java", "commitBeforeChange": "86159c3022beffa95d7d57cb9f43b80d21471332", "commitAfterChange": "05e80a080ac1c390983f215b01043e8cb92e3fca", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": "\r public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\tthrow new ShouldNotImplement(\"Compound assignment variable  should provide an implementation for code generation\");\r", "+\tthrow new ShouldNotImplement(Util.bind(\"ast.compoundVariableShouldProvide\"/*nonNLS*/));\r"]}], "num": 18520}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5322d9a7505b3ea71856cfa186b814eb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59db397ab21383421308a4200d6997aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementsImpl.java", "commitBeforeChange": "c7e13eb999aeeb70fd34b19df0f27a778109206c", "commitAfterChange": "ad2281f1520933e65d479408c685e1055d82a8b2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t@Override \tpublic TypeElement getTypeElement(CharSequence name)", "signatureAfterChange": " \t@Override \tpublic TypeElement getTypeElement(CharSequence name)", "diff": ["-\t\t//TODO: do this the right way - this is a hack to test if it works", "-\t\tString qname = name.toString();", "-\t\tString parts[] = qname.split(\"\\\\.\"); //$NON-NLS-1$", "-\t\tint length = parts.length;", "-\t\tchar[][] compoundName = new char[length][];", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tcompoundName[i] = parts[i].toCharArray();", "-\t\t}", "+\t\tfinal char[][] compoundName = CharOperation.splitOn('.', name.toString().toCharArray());", "-\t\tif (binding == null) {", "+\t\t// If we didn't find the binding, maybe it's a nested type;", "+\t\t// try finding the top-level type and then working downwards.", "+\t\tif (null == binding) {", "+\t\t\tReferenceBinding topLevelBinding = null;", "+\t\t\tint topLevelSegments = compoundName.length; ", "+\t\t\twhile (--topLevelSegments > 0) {", "+\t\t\t\tchar[][] topLevelName = new char[topLevelSegments][];", "+\t\t\t\tfor (int i = 0; i < topLevelSegments; ++i) {", "+\t\t\t\t\ttopLevelName[i] = compoundName[i];", "+\t\t\t\t}", "+\t\t\t\ttopLevelBinding = le.getType(topLevelName);", "+\t\t\t\tif (null != topLevelBinding) {", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (null == topLevelBinding) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tbinding = topLevelBinding;", "+\t\t\tfor (int i = topLevelSegments; null != binding && i < compoundName.length; ++i) {", "+\t\t\t\tbinding = binding.getMemberType(compoundName[i]);", "+\t\t\t}", "+\t\t}", "+\t\tif (null == binding) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f1f3eee6c2ee271858cd85eecf69f2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "030294305389e5486e7f63658830617d44acd9c2", "commitAfterChange": "3f4495ecc3a42cb049fa3e01aeaf49a7722af380", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 57, "signatureBeforeChange": "  \t\tprivate int countEmptyLines(ASTNode last)", "signatureAfterChange": "  \t\tprivate int countEmptyLines(ASTNode last)", "diff": ["-\t\t\tIDocument doc= getDocument();", "-\t\t\ttry {", "-\t\t\t\tint lastLine= doc.getLineOfOffset(last.getStartPosition() + last.getLength());", "-\t\t\t\tint scanLine= lastLine + 1;", "-\t\t\t\tint numLines= doc.getNumberOfLines();", "-\t\t\t\twhile(scanLine < numLines && containsOnlyWhitespaces(doc, scanLine)) {", "-\t\t\t\t\tscanLine++;", "+\t\t\tLineInformation lineInformation= getLineInformation();", "+\t\t\tint lastLine= lineInformation.getLineOfOffset(getExtendedEnd(last));", "+\t\t\tif (lastLine >= 0) {", "+\t\t\t\tint startLine= lastLine + 1;", "+\t\t\t\tint start= lineInformation.getLineOffset(startLine);", "+\t\t\t\tif (start < 0) {", "+\t\t\t\t\treturn 0;", "-\t\t\t\treturn scanLine - lastLine - 1;", "-\t\t\t} catch (BadLocationException e) {", "-\t\t\t\thandleException(e);", "-\t\t\t\treturn 0;", "-\t\t\t}\t", "-\t\t}", "+\t\t\t\tchar[] cont= getContent();", "+\t\t\t\tint i= start;", "+\t\t\t\twhile (i < cont.length && Character.isWhitespace(cont[i])) {", "+\t\t\t\t\ti++;", "+\t\t\t\t}", "+\t\t\t\tif (i > start) {", "+\t\t\t\t\tlastLine= lineInformation.getLineOfOffset(i);", "+\t\t\t\t\tif (lastLine > startLine) {", "+\t\t\t\t\t\treturn lastLine - startLine;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\treturn 0;", "+\t\t}\t\t"]}], "num": 3600}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76f4e189a5acc384ce568e09bba3d333", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03330f2337ae2c48fe48a90f26c51a4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "69c496e755cc6913b44756320f466e0fd51afc57", "commitAfterChange": "039347d7e4ee8e1deb95513f2bd485f15185146e", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "signatureAfterChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "diff": ["-\t\t\t\t\t\t\tif (compatibleMethod.isDefaultMethod() && methodVerifier.isParameterSubsignature(concreteMatch, compatibleMethod))", "-\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\t\tMethodBinding concreteMethod = (MethodBinding) found.elementAt(j);", "-\t\t\t\t\t\t\t\tif (concreteMethod != null) {", "-\t\t\t\t\t\t\t\t\tif (methodVerifier.areMethodsCompatible(concreteMethod, compatibleMethod))", "-\t\t\t\t\t\t\t\t\t\tcontinue next; // can skip this method since concreteMethod overrides it", "-\t\t\t\t\t\t\t\t\tif (compatibleMethod.isDefaultMethod() && methodVerifier.isParameterSubsignature(concreteMethod, compatibleMethod))", "-\t\t\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tMethodBinding classMethod = (MethodBinding) found.elementAt(j);", "+\t\t\t\t\t\t\t\tif (classMethod != null && methodVerifier.areMethodsCompatible(classMethod, compatibleMethod))", "+\t\t\t\t\t\t\t\t\tcontinue next; // can skip this method since classMethod overrides it"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e35621c626b025bad214dc8872b84a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public int indexOfWellKnownFields(FieldBinding fieldBinding)", "signatureAfterChange": " public int indexOfWellKnownFields(FieldBinding fieldBinding)", "diff": ["-\t\t\t\treturn TYPE_BYTE_FIELD;", "+\t\t\t\treturn JAVA_LANG_BYTE_TYPE_FIELD;", "-\t\t\t\treturn TYPE_SHORT_FIELD;", "+\t\t\t\treturn JAVA_LANG_SHORT_TYPE_FIELD;", "-\t\t\t\treturn TYPE_CHARACTER_FIELD;", "+\t\t\t\treturn JAVA_LANG_CHARACTER_TYPE_FIELD;", "-\t\t\t\treturn TYPE_INTEGER_FIELD;", "+\t\t\t\treturn JAVA_LANG_INTEGER_TYPE_FIELD;", "-\t\t\t\treturn TYPE_LONG_FIELD;", "+\t\t\t\treturn JAVA_LANG_LONG_TYPE_FIELD;", "-\t\t\t\treturn TYPE_FLOAT_FIELD;", "+\t\t\t\treturn JAVA_LANG_FLOAT_TYPE_FIELD;", "-\t\t\t\treturn TYPE_DOUBLE_FIELD;", "+\t\t\t\treturn JAVA_LANG_DOUBLE_TYPE_FIELD;", "-\t\t\t\treturn TYPE_BOOLEAN_FIELD;", "+\t\t\t\treturn JAVA_LANG_BOOLEAN_TYPE_FIELD;", "-\t\t\t\treturn TYPE_VOID_FIELD;", "+\t\t\t\treturn JAVA_LANG_VOID_TYPE_FIELD;", "-\t\tcase T_JavaLangSystem :", "-\t\t\tif (CharOperation.equals(fieldBinding.name, QualifiedNamesConstants.Out))", "-\t\t\t\treturn OUT_SYSTEM_FIELD;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f28604a19744bf16600c9226a036ca9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/AbstractImageBuilder.java", "commitBeforeChange": "4e88e1625bb1c2659a2ee4ba931e466f5126f9f4", "commitAfterChange": "075da32620f3ceb13a370a8be8550de2baf091f1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r protected void compile(String[] filenames, String[] initialTypeNames)", "signatureAfterChange": "\r protected void compile(String[] filenames, String[] initialTypeNames)", "diff": ["-\t\t\tString typeName = initialTypeNames[i];\r", "-\t\t\ttoCompile[i] = new SourceFile(filename,\r", "-\t\t\t\tCharOperation.splitOn('/', typeName.toCharArray(), 0, typeName.lastIndexOf('/') - 1));\r", "+\t\t\ttoCompile[i] = new SourceFile(filename, initialTypeNames[i].toCharArray());\r", "-\t\t\t\t\ttoCompile[index++] = new SourceFile(filename,\r", "-\t\t\t\t\t\tCharOperation.splitOn('/', typeName.toCharArray(), 0, typeName.lastIndexOf('/') - 1));\r", "+\t\t\t\t\ttoCompile[index++] = new SourceFile(filename, typeName.toCharArray());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b3012b2593576185eefac2d18b9721b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "73a3572f1ed828d7a770d67850f907fae70bd464", "commitAfterChange": "50431e234c5ece34d7b8d3e0af32a86a5079d5cd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  protected void createErrorFor(IResource resource, String message)", "signatureAfterChange": "  protected void createProblemFor(IResource resource, String message, String problemSeverity)", "diff": ["-protected void createErrorFor(IResource resource, String message) {", "+protected void createProblemFor(IResource resource, String message, String problemSeverity) {", "-\t\tint severity = IMarker.SEVERITY_ERROR;", "-\t\tif (message.equals(Util.bind(\"build.duplicateResource\"))) //$NON-NLS-1$", "-\t\t\tif (JavaCore.WARNING.equals(javaBuilder.javaProject.getOption(JavaCore.CORE_JAVA_BUILD_DUPLICATE_RESOURCE, true)))", "-\t\t\t\tseverity = IMarker.SEVERITY_WARNING;", "+\t\tint severity = problemSeverity.equals(JavaCore.WARNING) ? IMarker.SEVERITY_WARNING : IMarker.SEVERITY_ERROR;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f4c2b695eb41a5e1417663122c8004e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "dd7a18d099a9b8a557ed1fb7fc46e76ea5cfac10", "commitAfterChange": "61620cc52bd94ec88d2d4d64acf040dcf8022b0a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public TypeBinding convertToRawType(TypeBinding type)", "signatureAfterChange": "  public TypeBinding convertToRawType(TypeBinding type)", "diff": ["+", "-\t\tswitch (originalEnclosing.kind()) {", "-\t\t\tcase Binding.GENERIC_TYPE :", "-\t\t\tcase Binding.PARAMETERIZED_TYPE :", "-\t\t\t\tif (needToConvert || ((ReferenceBinding)originalType).isStatic()) {", "-\t\t\t\t\tconvertedEnclosing = (ReferenceBinding) convertToRawType(originalEnclosing);", "-\t\t\t\t} else {", "-\t\t\t\t\tconvertedEnclosing = originalEnclosing;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.RAW_TYPE :", "-\t\t\t\tneedToConvert |= !((ReferenceBinding)originalType).isStatic();", "-\t\t\tdefault :", "-\t\t\t\tconvertedEnclosing = originalEnclosing;", "-\t\t\t\tbreak;", "+\t\tif (originalEnclosing.kind() == Binding.RAW_TYPE) {", "+\t\t\tneedToConvert |= !((ReferenceBinding)originalType).isStatic();", "+\t\t\tconvertedEnclosing = originalEnclosing;", "+\t\t} else if (needToConvert || ((ReferenceBinding)originalType).isStatic()) {", "+\t\t\tconvertedEnclosing = (ReferenceBinding) convertToRawType(originalEnclosing);", "+\t\t} else {", "+//\t\t} else if (originalEnclosing instanceof SourceTypeBinding){", "+\t\t\tconvertedEnclosing = convertToParameterizedType(originalEnclosing);", "+//\t\t} else {", "+//\t\t\tconvertedEnclosing = originalEnclosing;", "-\t\t\tif (originalGeneric.isStatic())", "-\t\t\t\tconvertedType = createParameterizedType(originalGeneric, null, convertedEnclosing);", "-\t\t\telse ", "-\t\t\t\tconvertedType = createRawType(originalGeneric, convertedEnclosing);", "+\t\t\tconvertedType = createParameterizedType(originalGeneric, null, convertedEnclosing);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a454e94588a1f940a78af0b3e4981ca0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "f04f8b342c7b71da1a56858ab790d24d761e7d9c", "commitAfterChange": "cb9adfe2a810fff7861c89a641a842e760d0d109", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t \tprivate ICompilationUnit createNewWorkingCopy(ICompilationUnit parentCompilationUnit, String typeName, \t\t\tString contents, WorkingCopyOwner workingCopyOwner, \t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor) \t\tthrows CoreException, JavaModelException", "signatureAfterChange": " \t \tprivate ICompilationUnit createNewWorkingCopy(ICompilationUnit parentCompilationUnit, String typeName, \t\t\tString contents, WorkingCopyOwner workingCopyOwner, \t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor) \t\tthrows CoreException, JavaModelException", "diff": ["-\t\tJavaProject jp = (JavaProject) parentCompilationUnit.getJavaProject();", "+\t\tIJavaProject jp = parentCompilationUnit.getJavaProject();", "-\t\tIFolder folder = project.getFolder( GENERATED_SOURCE_FOLDER_NAME );", "-\t\tproject.refreshLocal(IResource.DEPTH_INFINITE, null);", "-\t\tif (!folder.exists())", "-\t\t\tfolder.create(true, true, null);", "-\t\t", "-\t\t//", "-\t\t// make sure __generated_src dir is on the cp if not already", "-\t\t//", "-\t\tupdateProjectClasspath( jp, folder, progressMonitor );", "+\t\tIFolder folder = ensureGeneratedSourceFolder(jp, progressMonitor );"]}], "num": 55994}
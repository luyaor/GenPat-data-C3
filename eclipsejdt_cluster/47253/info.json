{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aa3c47e3e353bd8791429ab1a1eda337", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "022ffa9886f49926ca19ee0112acc436", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "f7a386df381189bcf6cb5d83de9294aa41da62b9", "commitAfterChange": "b85da9706374aef92730bcba66621d432e77e845", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": "\t\t \t \tpublic void testCharacterLiteral()", "signatureAfterChange": "\t\t \t \tpublic void testCharacterLiteral()", "diff": ["-\t\tassertTrue(x instanceof Expression);", "-\t\tassertTrue(y instanceof Expression);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10c63e7c8b98c90786e8f6313fe602d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFlattener.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic boolean visit(ArrayCreation node)", "signatureAfterChange": " \tpublic boolean visit(ArrayCreation node)", "diff": ["-\t\tType elementType= (Type) getChildNode(arrayType, ArrayType.COMPONENT_TYPE_PROPERTY);", "-\t\tint dimensions= 1; // always include this array type", "-\t\twhile (elementType.isArrayType()) {", "-\t\t\tdimensions++;", "-\t\t\telementType = (Type) getChildNode(elementType, ArrayType.COMPONENT_TYPE_PROPERTY);", "+\t\tType elementType;", "+\t\tint dimensions;", "+\t\tboolean astLevelGTE8 = node.getAST().apiLevel() >= AST.JLS8 ? true : false;", "+\t\tif (astLevelGTE8) {", "+\t\t\telementType = (Type) getChildNode(arrayType, ArrayType.ELEMENT_TYPE_PROPERTY);", "+\t\t\tdimensions = getChildList(arrayType, ArrayType.DIMENSIONS_PROPERTY).size();", "+\t\t} else {", "+\t\t\telementType = (Type) getChildNode(arrayType, ArrayType.COMPONENT_TYPE_PROPERTY);", "+\t\t\tdimensions = 1; // always include this array type", "+\t\t\twhile (elementType.isArrayType()) {", "+\t\t\t\tdimensions++;", "+\t\t\t\telementType = (Type) getChildNode(elementType, ArrayType.COMPONENT_TYPE_PROPERTY);", "+\t\t\t}", "-\t\tType type= arrayType;", "-\t\t\tif (node.getAST().apiLevel() >= AST.JLS8 && type instanceof ArrayType) {", "-\t\t\t\tvisitList(type, ArrayType.ANNOTATIONS_PROPERTY, String.valueOf(' '), Util.EMPTY_STRING, String.valueOf(' '));", "-\t\t\t\ttype = (Type) getChildNode(type, ArrayType.COMPONENT_TYPE_PROPERTY);", "-\t\t\t}", "+\t\t\tinternalVisitExtraDimensionAnnotations(arrayType, i, astLevelGTE8);", "-\t\t\tdimensions--;", "-\t\tfor (int i= 0; i < dimensions; i++) {", "-\t\t\tif (node.getAST().apiLevel() >= AST.JLS8 && type instanceof ArrayType) {", "-\t\t\t\tvisitList(type, ArrayType.ANNOTATIONS_PROPERTY, String.valueOf(' '), Util.EMPTY_STRING, String.valueOf(' '));", "-\t\t\t\ttype = (Type) getChildNode(type, ArrayType.COMPONENT_TYPE_PROPERTY);", "-\t\t\t}", "+\t\tfor (int i= list.size(); i < dimensions; i++) {", "+\t\t\tinternalVisitExtraDimensionAnnotations(arrayType, i, astLevelGTE8);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90249b33f853288df139e013dc925c1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "c738f8a2f8c38edb037b1844278da54dc7b0f406", "commitAfterChange": "2ceff175173889ef3caa9cfcd05ec98c46b15cac", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public IMethod createMethodHandle(AbstractMethodDeclaration method, IType type)", "signatureAfterChange": " public IMethod createMethodHandle(AbstractMethodDeclaration method, IType type)", "diff": ["-\tint length = arguments == null ? 0 : arguments.length;", "+\tint argCount = arguments == null ? 0 : arguments.length;", "-\t\tIBinaryMethod[] methods = reader.getMethods();", "+\t\tIBinaryMethod[] methods = reader.getMethods();", "-\t\t\tfor (int i = 0, methodsLength = methods.length; i < methodsLength; i++) {", "+\t\t\tnextMethod : for (int i = 0, methodsLength = methods.length; i < methodsLength; i++) {", "-\t\t\t\t\tString[] parameterTypes = Signature.getParameterTypes(new String(binaryMethod.getMethodDescriptor()));", "-\t\t\t\t\tif (length != parameterTypes.length) continue;", "-\t\t\t\t\tboolean sameParameters = true;", "-\t\t\t\t\tfor (int j = 0; j < length; j++) {", "-\t\t\t\t\t\tTypeReference parameterType = arguments[j].type;", "-\t\t\t\t\t\tchar[] typeName = CharOperation.concatWith(parameterType.getTypeName(), '.');", "-\t\t\t\t\t\tfor (int k = 0; k < parameterType.dimensions(); k++)", "-\t\t\t\t\t\t\ttypeName = CharOperation.concat(typeName, \"[]\" .toCharArray()); //$NON-NLS-1$", "-\t\t\t\t\t\tString parameterTypeName = parameterTypes[j].replace('/', '.');", "-\t\t\t\t\t\tif (!Signature.toString(parameterTypeName).endsWith(new String(typeName))) {", "-\t\t\t\t\t\t\tsameParameters = false;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tparameterTypes[j] = parameterTypeName;", "-\t\t\t\t\t\t}", "+\t\t\t\t\tchar[][] parameterTypes = Signature.getParameterTypes(binaryMethod.getMethodDescriptor());", "+\t\t\t\t\tif (argCount != parameterTypes.length) continue nextMethod;", "+\t\t\t\t\tfor (int j = 0; j < argCount; j++) {", "+\t\t\t\t\t\tTypeReference typeRef = arguments[j].type;", "+\t\t\t\t\t\tchar[] typeName = CharOperation.concatWith(typeRef.getTypeName(), '.');", "+\t\t\t\t\t\tfor (int k = 0, dim = typeRef.dimensions(); k < dim; k++)", "+\t\t\t\t\t\t\ttypeName = CharOperation.concat(typeName, new char[] {'[', ']'});", "+\t\t\t\t\t\tchar[] parameterTypeName = ClassFileMatchLocator.convertClassFileFormat(parameterTypes[j]);", "+\t\t\t\t\t\tif (!CharOperation.endsWith(Signature.toCharArray(parameterTypeName), typeName))", "+\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\tparameterTypes[j] = parameterTypeName;", "-\t\t\t\t\tif (sameParameters)", "-\t\t\t\t\t\treturn type.getMethod(new String(selector), parameterTypes);", "+\t\t\t\t\treturn type.getMethod(new String(selector), CharOperation.toStrings(parameterTypes));", "-\tString[] parameterTypeSignatures = new String[length];", "-\tfor (int i = 0; i < length; i++) {", "-\t\tTypeReference parameterType = arguments[i].type;", "-\t\tchar[] typeName = CharOperation.concatWith(parameterType.getTypeName(), '.');", "-\t\tfor (int j = 0; j < parameterType.dimensions(); j++)", "-\t\t\ttypeName = CharOperation.concat(typeName, \"[]\" .toCharArray()); //$NON-NLS-1$", "+\tString[] parameterTypeSignatures = new String[argCount];", "+\tfor (int i = 0; i < argCount; i++) {", "+\t\tTypeReference typeRef = arguments[i].type;", "+\t\tchar[] typeName = CharOperation.concatWith(typeRef.getTypeName(), '.');", "+\t\tfor (int j = 0, dim = typeRef.dimensions(); j < dim; j++)", "+\t\t\ttypeName = CharOperation.concat(typeName, new char[] {'[', ']'});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbaa1d30e2f7e510a2a8c5e53e6205d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void test0011() throws JavaModelException", "signatureAfterChange": " \tpublic void test0011() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Incorrect annotations\", \"@Marker3 @Marker \", convertAnnotationsList(((ArrayType) type).annotations()));", "-\t\ttype = ((ArrayType) type).getComponentType();", "-\t\tassertEquals(\"Incorrect type\", true, type.isArrayType());", "-\t\tassertEquals(\"Incorrect annotations\", \"@Marker2 @Marker3 \", convertAnnotationsList(((ArrayType) type).annotations()));", "-\t\ttype = ((ArrayType) type).getComponentType();", "-\t\tassertEquals(\"Incorrect type\", true, type.isArrayType());", "-\t\tassertEquals(\"Incorrect annotations\", \"@Marker @Marker2 \", convertAnnotationsList(((ArrayType) type).annotations()));", "+\t\tExtraDimension extraDimension = ((ArrayType) type).getDimensionAt(0);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker3 @Marker \", convertAnnotationsList(extraDimension.annotations()));", "+\t\textraDimension = ((ArrayType) type).getDimensionAt(1);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker2 @Marker3 \", convertAnnotationsList(extraDimension.annotations()));", "+\t\textraDimension = ((ArrayType) type).getDimensionAt(2);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker @Marker2 \", convertAnnotationsList(extraDimension.annotations()));", "-\t\tassertEquals(\"Incorrect annotations\", \"@Marker2 @Marker3 \", convertAnnotationsList(((ArrayType) type).annotations()));", "-\t\ttype = ((ArrayType) type).getComponentType();", "-\t\tassertEquals(\"Incorrect type\", true, type.isArrayType());", "-\t\tassertEquals(\"Incorrect annotations\", \"@Marker @Marker2 \", convertAnnotationsList(((ArrayType) type).annotations()));", "-\t\ttype = ((ArrayType) type).getComponentType();", "-\t\tassertEquals(\"Incorrect type\", true, type.isArrayType());", "-\t\tassertEquals(\"Incorrect annotations\", \"@Marker3 @Marker \", convertAnnotationsList(((ArrayType) type).annotations()));", "+\t\textraDimension = ((ArrayType) type).getDimensionAt(0);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker2 @Marker3 \", convertAnnotationsList(extraDimension.annotations()));", "+\t\textraDimension = ((ArrayType) type).getDimensionAt(1);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker @Marker2 \", convertAnnotationsList(extraDimension.annotations()));", "+\t\textraDimension = ((ArrayType) type).getDimensionAt(2);", "+\t\tassertEquals(\"Incorrect annotations\", \"@Marker3 @Marker \", convertAnnotationsList(extraDimension.annotations()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2dd10e32cb61c82249cea26edf08864", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/PreferencesTests.java", "commitBeforeChange": "fa4ac5f2b99f8df2398d7d03706808dec36119dc", "commitAfterChange": "57dcb6e634ffb5f8d7bd0627f92815bb0e20fb82", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@SuppressWarnings(\"nls\") \tpublic void testSimpleConfigApi() throws Exception", "signatureAfterChange": " \t@SuppressWarnings(\"nls\") \tpublic void testSimpleConfigApi() throws Exception", "diff": ["-\t\tAptConfig.setEnabled(null, true);", "-\t\tassertTrue(AptConfig.isEnabled(null));", "-\t\tAptConfig.setEnabled(null, true);", "-\t\tAptConfig.setEnabled(jproj, false);", "-\t\tassertFalse(AptConfig.isEnabled(jproj));", "-\t\tassertTrue(AptConfig.isEnabled(null));", "+\t\tassertFalse(AptConfig.isEnabled(null));", "+\t\tAptConfig.setEnabled(jproj, true);", "+\t\tassertTrue(AptConfig.isEnabled(jproj));", "+\t\tassertFalse(AptConfig.isEnabled(null));"]}], "num": 47253}
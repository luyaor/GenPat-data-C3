{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4e28f56982652d5303956cf7a2f15c48", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ef3cadc3ffd2e6d8fa02987d95186ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "74ceca813d8e9be557353622cfb1779e5fa562ad", "commitAfterChange": "2d7d544af40c78aee4e80de194acd385e8eab51a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  void checkForNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " void checkForNameClash(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["-", "-\t// AND", "-\t// AND", "+", "-\t// AND", "+", "+", "+\t//\t\tclass A<T extends Number> { void m(T t) {} }", "+\t//\t\tclass B<S extends Integer> extends A<S> { void m(S t) {}}", "+\t//\t\tclass D extends B<Integer> { void m(Number t) {}    void m(Integer t) {} }", "+", "+\t//\t\tinheritedMethods does not include I.test since A has a valid implementation", "+\t//\t\tinterface I<E extends Comparable<E>> { void test(E element); }", "+\t//\t\tclass A implements I<Integer> { public void test(Integer i) {} }", "+\t//\t\tclass B extends A { public void test(Comparable i) {} }", "-\t\tReferenceBinding superType = this.type.superclass;", "+\t\tReferenceBinding superType = inheritedMethod.declaringClass;", "+\t\tif ((itsInterfaces = superType.superInterfaces()) != NoSuperInterfaces) {", "+\t\t\tif (++lastPosition == interfacesToVisit.length)", "+\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "+\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\t}", "+\t\tsuperType = superType.superclass(); // now start with its superclass", "-\t\t\t\tif (!areMethodsEqual(currentMethod, methods[m]) && detectNameClash(currentMethod, methods[m]))", "-\t\t\t\t\treturn;", "+\t\t\t\tif (currentMethod.parameters.length == methods[m].parameters.length)", "+\t\t\t\t\tif (!areMethodsEqual(currentMethod, methods[m]) && detectNameClash(currentMethod, methods[m]))", "+\t\t\t\t\t\treturn;", "-\t\t\t\t\t\tif (!areMethodsEqual(currentMethod, methods[m]) && detectNameClash(currentMethod, methods[m]))", "-\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\tif (currentMethod.parameters.length == methods[m].parameters.length)", "+\t\t\t\t\t\t\tif (!areMethodsEqual(currentMethod, methods[m]) && detectNameClash(currentMethod, methods[m]))", "+\t\t\t\t\t\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a352e4d4bfb79f7938963db26976d67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "bed888bd269b2eda198b4adcd6f3a8b582afad18", "commitAfterChange": "6ec071ff72d783fa798d4c7ea86b2a2f7803e01d", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " \tprotected TypeBinding[] minimalErasedCandidates(TypeBinding[] types, Map allInvocations)", "signatureAfterChange": " \tprotected TypeBinding[] minimalErasedCandidates(TypeBinding[] types, Map allInvocations)", "diff": ["-\t\t\tfor (int j = 0, count = itsInterfaces.length; j < count; j++) {", "-\t\t\t\tTypeBinding itsInterface = itsInterfaces[j];", "-\t\t\t\tTypeBinding superType = dim == 0 ? itsInterface : (TypeBinding)environment().createArrayType(itsInterface, dim); // recreate array if needed", "-\t\t\t\tif (!typesToVisit.contains(superType)) {", "-\t\t\t\t\ttypesToVisit.add(superType);", "-\t\t\t\t\tmax++;", "-\t\t\t\t\tTypeBinding superTypeErasure = (itsInterface.isTypeVariable() || itsInterface.isWildcard() /*&& !itsInterface.isCapture()*/) ? superType : superType.erasure();", "-\t\t\t\t\tif (superTypeErasure != superType) {", "-\t\t\t\t\t\tSet someInvocations = new HashSet(1);", "-\t\t\t\t\t\tsomeInvocations.add(superType);", "-\t\t\t\t\t\tallInvocations.put(superTypeErasure, someInvocations);", "-\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\tif (itsInterfaces != null) { // can be null during code assist operations that use LookupEnvironment.completeTypeBindings(parsedUnit, buildFieldsAndMethods)", "+\t\t\t\tfor (int j = 0, count = itsInterfaces.length; j < count; j++) {", "+\t\t\t\t\tTypeBinding itsInterface = itsInterfaces[j];", "+\t\t\t\t\tTypeBinding superType = dim == 0 ? itsInterface : (TypeBinding)environment().createArrayType(itsInterface, dim); // recreate array if needed", "+\t\t\t\t\tif (!typesToVisit.contains(superType)) {", "+\t\t\t\t\t\ttypesToVisit.add(superType);", "+\t\t\t\t\t\tmax++;", "+\t\t\t\t\t\tTypeBinding superTypeErasure = (itsInterface.isTypeVariable() || itsInterface.isWildcard() /*&& !itsInterface.isCapture()*/) ? superType : superType.erasure();", "+\t\t\t\t\t\tif (superTypeErasure != superType) {", "+\t\t\t\t\t\t\tSet someInvocations = new HashSet(1);", "+\t\t\t\t\t\t\tsomeInvocations.add(superType);", "+\t\t\t\t\t\t\tallInvocations.put(superTypeErasure, someInvocations);", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t}"]}], "num": 23100}
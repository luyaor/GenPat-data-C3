{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b7055af7e05762cf51143e5ab14fa2b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ea1c2519f035fe51d77acce7b639ee9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "signatureAfterChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "diff": ["-\t\t\t\tproblemReporter(thisMethod).methodNameClash(thisMethod, inheritedMethod.declaringClass.isRawType() ? inheritedMethod : inheritedMethod.original());", "+\t\t\t\tproblemReporter(thisMethod).methodNameClash(thisMethod, inheritedMethod.declaringClass.isRawType() ? inheritedMethod : inheritedMethod.original(), ProblemSeverities.Error);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d9fcb8d1d92d188cba49ba97d9dfd58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "167e0a563c0934d033fb860086f34607180326b0", "commitAfterChange": "27ab9447fb0786cab5fb449fe90ffd060e3fc9d0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " void checkForInheritedNameClash(MethodBinding inheritedMethod, MethodBinding otherInheritedMethod)", "signatureAfterChange": " void checkForInheritedNameClash(MethodBinding inheritedMethod, MethodBinding otherInheritedMethod)", "diff": ["-\tif (!inheritedMethod.declaringClass.isInterface() && !inheritedMethod.isStatic())", "-\t\tdetectInheritedNameClash(inheritedMethod, otherInheritedMethod);", "+\tif (inheritedMethod.declaringClass.isInterface() || inheritedMethod.isStatic()) return;", "+", "+\tdetectInheritedNameClash(inheritedMethod, otherInheritedMethod);"]}], "num": 60636}
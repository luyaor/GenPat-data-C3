{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a72d7316133da1f1379e4b85e713aa2b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98c8fabc415b85b9fde2cc0e49507e56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "commitAfterChange": "b21cadb5eae53d9f84dce9f073b5350a267b6ad6", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal ITypeNameRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal ITypeNameRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t", "-\t\tIndexManager indexManager = JavaModelManager.getJavaModelManager().getIndexManager();", "-\t\t\t", "-\t\tfinal char typeSuffix;", "-\t\tswitch(searchFor){", "-\t\t\tcase IJavaSearchConstants.CLASS :", "-\t\t\t\ttypeSuffix = IIndexConstants.CLASS_SUFFIX;", "-\t\t\t\tbreak;", "-\t\t\tcase IJavaSearchConstants.INTERFACE :", "-\t\t\t\ttypeSuffix = IIndexConstants.INTERFACE_SUFFIX;", "-\t\t\t\tbreak;", "-\t\t\tcase IJavaSearchConstants.ENUM :", "-\t\t\t\ttypeSuffix = IIndexConstants.ENUM_SUFFIX;", "-\t\t\t\tbreak;", "-\t\t\tcase IJavaSearchConstants.ANNOTATION_TYPE :", "-\t\t\t\ttypeSuffix = IIndexConstants.ANNOTATION_TYPE_SUFFIX;", "-\t\t\t\tbreak;", "-\t\t\tdefault : ", "-\t\t\t\ttypeSuffix = IIndexConstants.TYPE_SUFFIX;", "-\t\t\t\tbreak;", "-\t\t}", "-\t\tfinal TypeDeclarationPattern pattern = new TypeDeclarationPattern(", "-\t\t\tpackageName,", "-\t\t\tnull, // do find member types", "-\t\t\ttypeName,", "-\t\t\ttypeSuffix,", "-\t\t\tmatchRule);", "-\t\tfinal HashSet workingCopyPaths = new HashSet();", "-\t\tICompilationUnit[] copies = getWorkingCopies();", "-\t\tif (copies != null) {", "-\t\t\tfor (int i = 0, length = copies.length; i < length; i++) {", "-\t\t\t\tICompilationUnit workingCopy = copies[i];", "-\t\t\t\tworkingCopyPaths.add(workingCopy.getPath().toString());", "-\t\t\t}", "-\t\t}", "-\t", "-\t\tIndexQueryRequestor searchRequestor = new IndexQueryRequestor(){", "-\t\t\tpublic boolean acceptIndexMatch(String documentPath, SearchPattern indexRecord, SearchParticipant participant) {", "-\t\t\t\tTypeDeclarationPattern record = (TypeDeclarationPattern)indexRecord;", "-\t\t\t\tif (record.enclosingTypeNames != IIndexConstants.ONE_ZERO_CHAR  // filter out local and anonymous classes", "-\t\t\t\t\t\t&& !workingCopyPaths.contains(documentPath)) { // filter out working copies", "-\t\t\t\t\tswitch (record.typeSuffix) {", "-\t\t\t\t\t\tcase IIndexConstants.CLASS_SUFFIX :", "-\t\t\t\t\t\t\tnameRequestor.acceptClass(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IIndexConstants.INTERFACE_SUFFIX :", "-\t\t\t\t\t\tnameRequestor.acceptInterface(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IIndexConstants.ENUM_SUFFIX :", "-\t\t\t\t\t\t\t// TODO (frederic) need support", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IIndexConstants.ANNOTATION_TYPE_SUFFIX :", "-\t\t\t\t\t\t\t// TODO (frederic) need support", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t};", "-\t", "-\t\ttry {", "-\t\t\tif (progressMonitor != null) {", "-\t\t\t\tprogressMonitor.beginTask(Util.bind(\"engine.searching\"), 100); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\t// add type names from indexes", "-\t\t\tindexManager.performConcurrentJob(", "-\t\t\t\tnew PatternSearchJob(", "-\t\t\t\t\tpattern, ", "-\t\t\t\t\tgetDefaultSearchParticipant(), // Java search only", "-\t\t\t\t\tscope, ", "-\t\t\t\t\tsearchRequestor),", "-\t\t\t\twaitingPolicy,", "-\t\t\t\tprogressMonitor == null ? null : new SubProgressMonitor(progressMonitor, 100));\t", "-\t\t\t\t", "-\t\t\t// add type names from working copies", "-\t\t\tif (copies != null) {", "-\t\t\t\tfor (int i = 0, length = copies.length; i < length; i++) {", "-\t\t\t\t\tICompilationUnit workingCopy = copies[i];", "-\t\t\t\t\tfinal String path = workingCopy.getPath().toString();", "-\t\t\t\t\tif (workingCopy.isConsistent()) {", "-\t\t\t\t\t\tIPackageDeclaration[] packageDeclarations = workingCopy.getPackageDeclarations();", "-\t\t\t\t\t\tchar[] packageDeclaration = packageDeclarations.length == 0 ? CharOperation.NO_CHAR : packageDeclarations[0].getElementName().toCharArray();", "-\t\t\t\t\t\tIType[] allTypes = workingCopy.getAllTypes();", "-\t\t\t\t\t\tfor (int j = 0, allTypesLength = allTypes.length; j < allTypesLength; j++) {", "-\t\t\t\t\t\t\tIType type = allTypes[j];", "-\t\t\t\t\t\t\tIJavaElement parent = type.getParent();", "-\t\t\t\t\t\t\tchar[][] enclosingTypeNames;", "-\t\t\t\t\t\t\tif (parent instanceof IType) {", "-\t\t\t\t\t\t\t\tchar[] parentQualifiedName = ((IType)parent).getTypeQualifiedName('.').toCharArray();", "-\t\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.splitOn('.', parentQualifiedName);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.NO_CHAR_CHAR;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tchar[] simpleName = type.getElementName().toCharArray();", "-\t\t\t\t\t\t\tint kind;", "-\t\t\t\t\t\t\tif (type.isClass()) {", "-\t\t\t\t\t\t\t\tkind = IGenericType.CLASS;", "-\t\t\t\t\t\t\t} else if (type.isInterface()) {", "-\t\t\t\t\t\t\t\tkind = IGenericType.INTERFACE;", "-\t\t\t\t\t\t\t} else if (type.isEnum()) {", "-\t\t\t\t\t\t\t\tkind = IGenericType.ENUM;", "-\t\t\t\t\t\t\t} else /*if (type.isAnnotation())*/ {", "-\t\t\t\t\t\t\t\tkind = IGenericType.ANNOTATION_TYPE;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (match(typeSuffix, packageName, typeName, matchRule, kind, packageDeclaration, simpleName)) {", "-\t\t\t\t\t\t\t\tswitch(kind) {", "-\t\t\t\t\t\t\t\t\tcase IGenericType.CLASS:", "-\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, simpleName, enclosingTypeNames, path);", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase IGenericType.INTERFACE:", "-\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, simpleName, enclosingTypeNames, path);", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase IGenericType.ENUM:", "-\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE:", "-\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tParser basicParser = getParser();", "-\t\t\t\t\t\tfinal char[] contents = workingCopy.getBuffer().getCharacters();", "-\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit unit = new org.eclipse.jdt.internal.compiler.env.ICompilationUnit() {", "-\t\t\t\t\t\t\tpublic char[] getContents() {", "-\t\t\t\t\t\t\t\treturn contents;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tpublic char[] getMainTypeName() {", "-\t\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tpublic char[][] getPackageName() {", "-\t\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tpublic char[] getFileName() {", "-\t\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t};", "-\t\t\t\t\t\tCompilationResult compilationUnitResult = new CompilationResult(unit, 0, 0, this.compilerOptions.maxProblemsPerUnit);", "-\t\t\t\t\t\tCompilationUnitDeclaration parsedUnit = basicParser.dietParse(unit, compilationUnitResult);", "-\t\t\t\t\t\tif (parsedUnit != null) {", "-\t\t\t\t\t\t\tfinal char[] packageDeclaration = parsedUnit.currentPackage == null ? CharOperation.NO_CHAR : CharOperation.concatWith(parsedUnit.currentPackage.getImportName(), '.');", "-\t\t\t\t\t\t\tclass AllTypeDeclarationsVisitor extends ASTVisitor {", "-\t\t\t\t\t\t\t\tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope blockScope) {", "-\t\t\t\t\t\t\t\t\treturn false; // no local/anonymous type", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tpublic boolean visit(TypeDeclaration typeDeclaration, CompilationUnitScope compilationUnitScope) {", "-\t\t\t\t\t\t\t\t\tif (match(typeSuffix, packageName, typeName, matchRule, typeDeclaration.getKind(), packageDeclaration, typeDeclaration.name)) {", "-\t\t\t\t\t\t\t\t\t\tswitch(typeDeclaration.getKind()) {", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.CLASS:", "-\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.INTERFACE:", "-\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ENUM:", "-\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE:", "-\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tpublic boolean visit(TypeDeclaration memberTypeDeclaration, ClassScope classScope) {", "-\t\t\t\t\t\t\t\t\tif (match(typeSuffix, packageName, typeName, matchRule, memberTypeDeclaration.getKind(), packageDeclaration, memberTypeDeclaration.name)) {", "-\t\t\t\t\t\t\t\t\t\t// compute encloising type names", "-\t\t\t\t\t\t\t\t\t\tTypeDeclaration enclosing = memberTypeDeclaration.enclosingType;", "-\t\t\t\t\t\t\t\t\t\tchar[][] enclosingTypeNames = CharOperation.NO_CHAR_CHAR;", "-\t\t\t\t\t\t\t\t\t\twhile (enclosing != null) {", "-\t\t\t\t\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.arrayConcat(new char[][] {enclosing.name}, enclosingTypeNames);", "-\t\t\t\t\t\t\t\t\t\t\tif ((enclosing.bits & ASTNode.IsMemberTypeMASK) != 0) {", "-\t\t\t\t\t\t\t\t\t\t\t\tenclosing = enclosing.enclosingType;", "-\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\tenclosing = null;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t// report", "-\t\t\t\t\t\t\t\t\t\tswitch(memberTypeDeclaration.getKind()) {", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.CLASS:", "-\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.INTERFACE:", "-\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ENUM:", "-\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE:", "-\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tparsedUnit.traverse(new AllTypeDeclarationsVisitor(), parsedUnit.scope);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}\t", "-\t\t} finally {", "-\t\t\tif (progressMonitor != null) {", "-\t\t\t\tprogressMonitor.done();", "-\t\t\t}", "-\t\t}", "+\t\tTypeNameRequestorWrapper requestorWrapper = new TypeNameRequestorWrapper(nameRequestor);", "+\t\tthis.basicEngine.searchAllTypeNames(packageName, typeName, matchRule, searchFor, scope, requestorWrapper, waitingPolicy, progressMonitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b900f6fb46582a9454e45227d7f7f5ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "0199702ff6cca8392f62e334c86875a1b31484e2", "commitAfterChange": "4d36cf912bda83cf994dbb030b9c8cbc9e169048", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tfinal char[][] qualifications, \t\tfinal char[][] typeNames, \t\tfinal int matchRule, \t\tint searchFor, \t\tIJavaSearchScope scope, \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[][] qualifications, \t\tfinal char[][] typeNames, \t\tfinal int matchRule, \t\tint searchFor, \t\tIJavaSearchScope scope, \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t\ttry {", "-\t\t\tif (progressMonitor != null) {", "-\t\t\t\tprogressMonitor.beginTask(Messages.engine_searching, 100);", "-\t\t\t}", "-\t\t\t// add type names from indexes", "-\t\t\tindexManager.performConcurrentJob(", "-\t\t\t\tnew PatternSearchJob(", "-\t\t\t\t\tpattern,", "-\t\t\t\t\tgetDefaultSearchParticipant(), // Java search only", "-\t\t\t\t\tscope,", "-\t\t\t\t\tsearchRequestor),", "-\t\t\t\twaitingPolicy,", "-\t\t\t\tprogressMonitor == null ? null : new SubProgressMonitor(progressMonitor, 100));", "+\t\tSubMonitor subMonitor = SubMonitor.convert(progressMonitor, Messages.engine_searching, 100);", "+\t\t// add type names from indexes", "+\t\tindexManager.performConcurrentJob(", "+\t\t\tnew PatternSearchJob(", "+\t\t\t\tpattern,", "+\t\t\t\tgetDefaultSearchParticipant(), // Java search only", "+\t\t\t\tscope,", "+\t\t\t\tsearchRequestor),", "+\t\t\twaitingPolicy,", "+\t\t\tsubMonitor.split(100));", "-\t\t\t// add type names from working copies", "-\t\t\tif (copies != null) {", "-\t\t\t\tfor (int i = 0, length = copies.length; i < length; i++) {", "-\t\t\t\t\tICompilationUnit workingCopy = copies[i];", "-\t\t\t\t\tfinal String path = workingCopy.getPath().toString();", "-\t\t\t\t\tif (workingCopy.isConsistent()) {", "-\t\t\t\t\t\tIPackageDeclaration[] packageDeclarations = workingCopy.getPackageDeclarations();", "-\t\t\t\t\t\tchar[] packageDeclaration = packageDeclarations.length == 0 ? CharOperation.NO_CHAR : packageDeclarations[0].getElementName().toCharArray();", "-\t\t\t\t\t\tIType[] allTypes = workingCopy.getAllTypes();", "-\t\t\t\t\t\tfor (int j = 0, allTypesLength = allTypes.length; j < allTypesLength; j++) {", "-\t\t\t\t\t\t\tIType type = allTypes[j];", "-\t\t\t\t\t\t\tIJavaElement parent = type.getParent();", "-\t\t\t\t\t\t\tchar[][] enclosingTypeNames;", "-\t\t\t\t\t\t\tchar[] qualification = packageDeclaration;", "-\t\t\t\t\t\t\tif (parent instanceof IType) {", "-\t\t\t\t\t\t\t\tchar[] parentQualifiedName = ((IType)parent).getTypeQualifiedName('.').toCharArray();", "-\t\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.splitOn('.', parentQualifiedName);", "-\t\t\t\t\t\t\t\tqualification = CharOperation.concat(qualification, parentQualifiedName);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.NO_CHAR_CHAR;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tchar[] simpleName = type.getElementName().toCharArray();", "-\t\t\t\t\t\t\tchar suffix = IIndexConstants.TYPE_SUFFIX;", "-\t\t\t\t\t\t\tif (type.isClass()) {", "-\t\t\t\t\t\t\t\tsuffix = IIndexConstants.CLASS_SUFFIX;", "-\t\t\t\t\t\t\t} else if (type.isInterface()) {", "-\t\t\t\t\t\t\t\tsuffix = IIndexConstants.INTERFACE_SUFFIX;", "-\t\t\t\t\t\t\t} else if (type.isEnum()) {", "-\t\t\t\t\t\t\t\tsuffix = IIndexConstants.ENUM_SUFFIX;", "-\t\t\t\t\t\t\t} else if (type.isAnnotation()) {", "-\t\t\t\t\t\t\t\tsuffix = IIndexConstants.ANNOTATION_TYPE_SUFFIX;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (pattern.matchesDecodedKey(new QualifiedTypeDeclarationPattern(qualification, simpleName, suffix, matchRule))) {", "-\t\t\t\t\t\t\t\tnameRequestor.acceptType(type.getFlags(), packageDeclaration, simpleName, enclosingTypeNames, path, null);", "-\t\t\t\t\t\t\t}", "+\t\t// add type names from working copies", "+\t\tif (copies != null) {", "+\t\t\tfor (int i = 0, length = copies.length; i < length; i++) {", "+\t\t\t\tICompilationUnit workingCopy = copies[i];", "+\t\t\t\tfinal String path = workingCopy.getPath().toString();", "+\t\t\t\tif (workingCopy.isConsistent()) {", "+\t\t\t\t\tIPackageDeclaration[] packageDeclarations = workingCopy.getPackageDeclarations();", "+\t\t\t\t\tchar[] packageDeclaration = packageDeclarations.length == 0 ? CharOperation.NO_CHAR : packageDeclarations[0].getElementName().toCharArray();", "+\t\t\t\t\tIType[] allTypes = workingCopy.getAllTypes();", "+\t\t\t\t\tfor (int j = 0, allTypesLength = allTypes.length; j < allTypesLength; j++) {", "+\t\t\t\t\t\tIType type = allTypes[j];", "+\t\t\t\t\t\tIJavaElement parent = type.getParent();", "+\t\t\t\t\t\tchar[][] enclosingTypeNames;", "+\t\t\t\t\t\tchar[] qualification = packageDeclaration;", "+\t\t\t\t\t\tif (parent instanceof IType) {", "+\t\t\t\t\t\t\tchar[] parentQualifiedName = ((IType)parent).getTypeQualifiedName('.').toCharArray();", "+\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.splitOn('.', parentQualifiedName);", "+\t\t\t\t\t\t\tqualification = CharOperation.concat(qualification, parentQualifiedName);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.NO_CHAR_CHAR;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tParser basicParser = getParser();", "-\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit unit = (org.eclipse.jdt.internal.compiler.env.ICompilationUnit) workingCopy;", "-\t\t\t\t\t\tCompilationResult compilationUnitResult = new CompilationResult(unit, 0, 0, this.compilerOptions.maxProblemsPerUnit);", "-\t\t\t\t\t\tCompilationUnitDeclaration parsedUnit = basicParser.dietParse(unit, compilationUnitResult);", "-\t\t\t\t\t\tif (parsedUnit != null) {", "-\t\t\t\t\t\t\tfinal char[] packageDeclaration = parsedUnit.currentPackage == null", "-\t\t\t\t\t\t\t\t? CharOperation.NO_CHAR", "-\t\t\t\t\t\t\t\t: CharOperation.concatWith(parsedUnit.currentPackage.getImportName(), '.');", "-\t\t\t\t\t\t\tclass AllTypeDeclarationsVisitor extends ASTVisitor {", "-\t\t\t\t\t\t\t\tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope blockScope) {", "-\t\t\t\t\t\t\t\t\treturn false; // no local/anonymous type", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tpublic boolean visit(TypeDeclaration typeDeclaration, CompilationUnitScope compilationUnitScope) {", "-\t\t\t\t\t\t\t\t\tSearchPattern decodedPattern =", "-\t\t\t\t\t\t\t\t\t\tnew QualifiedTypeDeclarationPattern(packageDeclaration, typeDeclaration.name, convertTypeKind(TypeDeclaration.kind(typeDeclaration.modifiers)), matchRule);", "-\t\t\t\t\t\t\t\t\tif (pattern.matchesDecodedKey(decodedPattern)) {", "-\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptType(typeDeclaration.modifiers, packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path, null);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tpublic boolean visit(TypeDeclaration memberTypeDeclaration, ClassScope classScope) {", "-\t\t\t\t\t\t\t\t\t// compute enclosing type names", "-\t\t\t\t\t\t\t\t\tchar[] qualification = packageDeclaration;", "-\t\t\t\t\t\t\t\t\tTypeDeclaration enclosing = memberTypeDeclaration.enclosingType;", "-\t\t\t\t\t\t\t\t\tchar[][] enclosingTypeNames = CharOperation.NO_CHAR_CHAR;", "-\t\t\t\t\t\t\t\t\twhile (enclosing != null) {", "-\t\t\t\t\t\t\t\t\t\tqualification = CharOperation.concat(qualification, enclosing.name, '.');", "-\t\t\t\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.arrayConcat(new char[][] {enclosing.name}, enclosingTypeNames);", "-\t\t\t\t\t\t\t\t\t\tif ((enclosing.bits & ASTNode.IsMemberType) != 0) {", "-\t\t\t\t\t\t\t\t\t\t\tenclosing = enclosing.enclosingType;", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tenclosing = null;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tSearchPattern decodedPattern =", "-\t\t\t\t\t\t\t\t\t\tnew QualifiedTypeDeclarationPattern(qualification, memberTypeDeclaration.name, convertTypeKind(TypeDeclaration.kind(memberTypeDeclaration.modifiers)), matchRule);", "-\t\t\t\t\t\t\t\t\tif (pattern.matchesDecodedKey(decodedPattern)) {", "-\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptType(memberTypeDeclaration.modifiers, packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path, null);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tparsedUnit.traverse(new AllTypeDeclarationsVisitor(), parsedUnit.scope);", "+\t\t\t\t\t\tchar[] simpleName = type.getElementName().toCharArray();", "+\t\t\t\t\t\tchar suffix = IIndexConstants.TYPE_SUFFIX;", "+\t\t\t\t\t\tif (type.isClass()) {", "+\t\t\t\t\t\t\tsuffix = IIndexConstants.CLASS_SUFFIX;", "+\t\t\t\t\t\t} else if (type.isInterface()) {", "+\t\t\t\t\t\t\tsuffix = IIndexConstants.INTERFACE_SUFFIX;", "+\t\t\t\t\t\t} else if (type.isEnum()) {", "+\t\t\t\t\t\t\tsuffix = IIndexConstants.ENUM_SUFFIX;", "+\t\t\t\t\t\t} else if (type.isAnnotation()) {", "+\t\t\t\t\t\t\tsuffix = IIndexConstants.ANNOTATION_TYPE_SUFFIX;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (pattern.matchesDecodedKey(new QualifiedTypeDeclarationPattern(qualification, simpleName, suffix, matchRule))) {", "+\t\t\t\t\t\t\tnameRequestor.acceptType(type.getFlags(), packageDeclaration, simpleName, enclosingTypeNames, path, null);", "+\t\t\t\t} else {", "+\t\t\t\t\tParser basicParser = getParser();", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit unit = (org.eclipse.jdt.internal.compiler.env.ICompilationUnit) workingCopy;", "+\t\t\t\t\tCompilationResult compilationUnitResult = new CompilationResult(unit, 0, 0, this.compilerOptions.maxProblemsPerUnit);", "+\t\t\t\t\tCompilationUnitDeclaration parsedUnit = basicParser.dietParse(unit, compilationUnitResult);", "+\t\t\t\t\tif (parsedUnit != null) {", "+\t\t\t\t\t\tfinal char[] packageDeclaration = parsedUnit.currentPackage == null", "+\t\t\t\t\t\t\t? CharOperation.NO_CHAR", "+\t\t\t\t\t\t\t: CharOperation.concatWith(parsedUnit.currentPackage.getImportName(), '.');", "+\t\t\t\t\t\tclass AllTypeDeclarationsVisitor extends ASTVisitor {", "+\t\t\t\t\t\t\tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope blockScope) {", "+\t\t\t\t\t\t\t\treturn false; // no local/anonymous type", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tpublic boolean visit(TypeDeclaration typeDeclaration, CompilationUnitScope compilationUnitScope) {", "+\t\t\t\t\t\t\t\tSearchPattern decodedPattern =", "+\t\t\t\t\t\t\t\t\tnew QualifiedTypeDeclarationPattern(packageDeclaration, typeDeclaration.name, convertTypeKind(TypeDeclaration.kind(typeDeclaration.modifiers)), matchRule);", "+\t\t\t\t\t\t\t\tif (pattern.matchesDecodedKey(decodedPattern)) {", "+\t\t\t\t\t\t\t\t\tnameRequestor.acceptType(typeDeclaration.modifiers, packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path, null);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tpublic boolean visit(TypeDeclaration memberTypeDeclaration, ClassScope classScope) {", "+\t\t\t\t\t\t\t\t// compute enclosing type names", "+\t\t\t\t\t\t\t\tchar[] qualification = packageDeclaration;", "+\t\t\t\t\t\t\t\tTypeDeclaration enclosing = memberTypeDeclaration.enclosingType;", "+\t\t\t\t\t\t\t\tchar[][] enclosingTypeNames = CharOperation.NO_CHAR_CHAR;", "+\t\t\t\t\t\t\t\twhile (enclosing != null) {", "+\t\t\t\t\t\t\t\t\tqualification = CharOperation.concat(qualification, enclosing.name, '.');", "+\t\t\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.arrayConcat(new char[][] {enclosing.name}, enclosingTypeNames);", "+\t\t\t\t\t\t\t\t\tif ((enclosing.bits & ASTNode.IsMemberType) != 0) {", "+\t\t\t\t\t\t\t\t\t\tenclosing = enclosing.enclosingType;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tenclosing = null;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tSearchPattern decodedPattern =", "+\t\t\t\t\t\t\t\t\tnew QualifiedTypeDeclarationPattern(qualification, memberTypeDeclaration.name, convertTypeKind(TypeDeclaration.kind(memberTypeDeclaration.modifiers)), matchRule);", "+\t\t\t\t\t\t\t\tif (pattern.matchesDecodedKey(decodedPattern)) {", "+\t\t\t\t\t\t\t\t\tnameRequestor.acceptType(memberTypeDeclaration.modifiers, packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path, null);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tparsedUnit.traverse(new AllTypeDeclarationsVisitor(), parsedUnit.scope);", "+\t\t\t\t\t}", "-\t\t\t}", "-\t\t} finally {", "-\t\t\tif (progressMonitor != null) {", "-\t\t\t\tprogressMonitor.done();"]}], "num": 57095}
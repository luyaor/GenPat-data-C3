{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79bd51713d0a8608055e27639db65fd0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6627e7ad8aff87f0d9e4e51f1b1e599c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "8fdb14b64608b58e620c67bc0f2758fb559de717", "commitAfterChange": "447dafd45d9eea3d096b0cc1d1d11fe893f03ec0", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(FieldDeclaration field, FieldDeclaration[] otherFields, TypeDeclaration type, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["-\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\t\t\t\tASTNode node = nodes[i];", "-\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "-\t\t\t\t\t\t\tIJavaElement[] otherElements = null;", "-\t\t\t\t\t\t\tif (otherFields != null) {", "-\t\t\t\t\t\t\t\tint length = otherFields.length;", "-\t\t\t\t\t\t\t\tint size = 0;", "-\t\t\t\t\t\t\t\twhile (size<length && otherFields[size] != null) {", "-\t\t\t\t\t\t\t\t\tsize++;", "+\t\t\t\t\t\t// standard reporting", "+\t\t\t\t\t\tif (this.patternFineGrain == 0) {", "+\t\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\t\t\t\tASTNode node = nodes[i];", "+\t\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\t\t\t\tIJavaElement[] otherElements = null;", "+\t\t\t\t\t\t\t\tif (otherFields != null) {", "+\t\t\t\t\t\t\t\t\tint length = otherFields.length;", "+\t\t\t\t\t\t\t\t\tint size = 0;", "+\t\t\t\t\t\t\t\t\twhile (size<length && otherFields[size] != null) {", "+\t\t\t\t\t\t\t\t\t\tsize++;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\totherElements = new IJavaElement[size];", "+\t\t\t\t\t\t\t\t\tfor (int j=0; j<size; j++) {", "+\t\t\t\t\t\t\t\t\t\totherElements[j] = createHandle(otherFields[j], type, parent);", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\totherElements = new IJavaElement[size];", "-\t\t\t\t\t\t\t\tfor (int j=0; j<size; j++) {", "-\t\t\t\t\t\t\t\t\totherElements[j] = createHandle(otherFields[j], type, parent);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, null, otherElements, field.binding, level.intValue(), this);", "-\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, null, otherElements, field.binding, level.intValue(), this);", "+\t\t\t\t\t\t } else {", "+\t\t\t\t\t\t\t// finegrain reporting", "+\t\t\t\t\t\t\tFineGrainVisitor visitor = new FineGrainVisitor(enclosingElement, field.binding, nodeSet, nodes, this.patternLocator, this);", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tfield.traverse(visitor, null);", "+\t\t\t\t\t\t\t} catch (WrappedCoreException e) {", "+\t\t\t\t\t\t\t\tthrow e.coreException;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// Remove all remaining nodes", "+\t\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[i]);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "-\t\t\t\t\t\tASTNode node = nodes[i];", "-\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "-\t\t\t\t\t\tif (node instanceof TypeDeclaration) {", "-\t\t\t\t\t\t\t// use field declaration to report match (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=88174)", "-\t\t\t\t\t\t\tAllocationExpression allocation = ((TypeDeclaration)node).allocation;", "-\t\t\t\t\t\t\tif (allocation != null && allocation.enumConstant != null) {", "-\t\t\t\t\t\t\t\tnode = field;", "+\t\t\t\t\t// standard reporting", "+\t\t\t\t\tif (this.patternFineGrain == 0) {", "+\t\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\t\t\tASTNode node = nodes[i];", "+\t\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(node);", "+\t\t\t\t\t\t\tif (node instanceof TypeDeclaration) {", "+\t\t\t\t\t\t\t\t// use field declaration to report match (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=88174)", "+\t\t\t\t\t\t\t\tAllocationExpression allocation = ((TypeDeclaration)node).allocation;", "+\t\t\t\t\t\t\t\tif (allocation != null && allocation.enumConstant != null) {", "+\t\t\t\t\t\t\t\t\tnode = field;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// Set block scope for initializer in case there would have other local and other elements to report", "+\t\t\t\t\t\t\tBlockScope blockScope = null;", "+\t\t\t\t\t\t\tif (field.getKind() == AbstractVariableDeclaration.INITIALIZER) {", "+\t\t\t\t\t\t\t\tBlock block = ((Initializer)field).block;", "+\t\t\t\t\t\t\t\tif (block != null) blockScope = block.scope;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, field.binding, blockScope, level.intValue(), this);", "-\t\t\t\t\t\t// Set block scope for initializer in case there would have other local and other elements to report", "-\t\t\t\t\t\tBlockScope blockScope = null;", "-\t\t\t\t\t\tif (field.getKind() == AbstractVariableDeclaration.INITIALIZER) {", "-\t\t\t\t\t\t\tBlock block = ((Initializer)field).block;", "-\t\t\t\t\t\t\tif (block != null) blockScope = block.scope;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, field.binding, blockScope, level.intValue(), this);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\t// finegrain reporting", "+\t\t\t\t\tFineGrainVisitor visitor = new FineGrainVisitor(enclosingElement, field.binding, nodeSet, nodes, this.patternLocator, this);", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tfield.traverse(visitor, field.isStatic() ? type.staticInitializerScope : type.initializerScope);", "+\t\t\t\t\t} catch (WrappedCoreException e) {", "+\t\t\t\t\t\tthrow e.coreException;", "+\t\t\t\t\t}", "+\t\t\t\t\t// Remove all remaining nodes", "+\t\t\t\t\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\t\t\t\t\tnodeSet.matchingNodes.removeKey(nodes[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adddb53ffa8b902539b8557631e3b4f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 42, "signatureBeforeChange": " \t \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall statement)", "signatureAfterChange": " \t \tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall statement)", "diff": ["+\t", "+\tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall statement) {", "+\t\tStatement newStatement;", "+\t\tif (statement.isSuperAccess() || statement.isSuper()) {", "+\t\t\tSuperConstructorInvocation superConstructorInvocation = this.ast.newSuperConstructorInvocation();", "+\t\t\tif (statement.qualification != null) {", "+\t\t\t\tsuperConstructorInvocation.setExpression(convert(statement.qualification));", "+\t\t\t}", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression[] arguments = statement.arguments;", "+\t\t\tif (arguments != null) {", "+\t\t\t\tint length = arguments.length;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tsuperConstructorInvocation.arguments().add(convert(arguments[i]));", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (statement.typeArguments != null) {", "+\t\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\t\tsuperConstructorInvocation.setFlags(superConstructorInvocation.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\t\tfor (int i = 0, max = statement.typeArguments.length; i < max; i++) {", "+\t\t\t\t\t\t\tsuperConstructorInvocation.typeArguments().add(convertType(statement.typeArguments[i]));", "+\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tnewStatement = superConstructorInvocation;", "+\t\t} else {", "+\t\t\tConstructorInvocation constructorInvocation = this.ast.newConstructorInvocation();", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression[] arguments = statement.arguments;", "+\t\t\tif (arguments != null) {", "+\t\t\t\tint length = arguments.length;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tconstructorInvocation.arguments().add(convert(arguments[i]));", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (statement.typeArguments != null) {", "+\t\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\t\tconstructorInvocation.setFlags(constructorInvocation.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\t\tfor (int i = 0, max = statement.typeArguments.length; i < max; i++) {", "+\t\t\t\t\t\t\tconstructorInvocation.typeArguments().add(convertType(statement.typeArguments[i]));", "+\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tnewStatement = constructorInvocation;", "+\t\t}", "+\t\tnewStatement.setSourceRange(statement.sourceStart, statement.sourceEnd - statement.sourceStart + 1);", "+\t\tretrieveSemiColonPosition(newStatement);", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(newStatement, statement);", "+\t\t}", "+\t\treturn newStatement;", "+\t}", "-\t", "-\tpublic Statement convert(org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall statement) {", "-\t\tStatement newStatement;", "-\t\tif (statement.isSuperAccess() || statement.isSuper()) {", "-\t\t\tSuperConstructorInvocation superConstructorInvocation = this.ast.newSuperConstructorInvocation();", "-\t\t\tif (statement.qualification != null) {", "-\t\t\t\tsuperConstructorInvocation.setExpression(convert(statement.qualification));", "-\t\t\t}", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression[] arguments = statement.arguments;", "-\t\t\tif (arguments != null) {", "-\t\t\t\tint length = arguments.length;", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tsuperConstructorInvocation.arguments().add(convert(arguments[i]));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tnewStatement = superConstructorInvocation;", "-\t\t} else {", "-\t\t\tConstructorInvocation constructorInvocation = this.ast.newConstructorInvocation();", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.Expression[] arguments = statement.arguments;", "-\t\t\tif (arguments != null) {", "-\t\t\t\tint length = arguments.length;", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tconstructorInvocation.arguments().add(convert(arguments[i]));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tnewStatement = constructorInvocation;", "-\t\t}", "-\t\tnewStatement.setSourceRange(statement.sourceStart, statement.sourceEnd - statement.sourceStart + 1);", "-\t\tretrieveSemiColonPosition(newStatement);", "-\t\t\trecordNodes(newStatement, statement);", "-\t\treturn newStatement;", "-\t}"]}], "num": 36370}
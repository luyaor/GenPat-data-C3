{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc4b5c8d04845bdfde37be7abc75fdba", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "439c62f8b9a4ef59118b4b434d03cada", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "c8221f5c580cd126f6de94fa93158a10785920e8", "commitAfterChange": "16e02dd1e5ecae00490885481270763dbd00d718", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\twhile (true) {", "+\tdo {", "-\t\tAstNode node;", "+\t\ttraversedContext.recordReturnFrom(flowInfo.unconditionalInits());", "+\t\tAstNode node;", "-\t\t} else if (node instanceof TryStatement && hasValueToSave) {", "+\t\t} else if (node instanceof TryStatement) {", "+\t\t\tTryStatement tryStatement = (TryStatement) node;", "+\t\t\tflowInfo.addInitializationsFrom(tryStatement.subRoutineInits); // collect inits", "+\t\t\tif (hasValueToSave) {", "-\t\t\t\t\tprepareSaveValueLocation((TryStatement)node);", "+\t\t\t\t\tprepareSaveValueLocation(tryStatement);", "+\t\t\t}", "-", "-\t\t// remember the initialization at this", "-\t\t// point for dealing with blank final variables.", "-\t\ttraversedContext.recordReturnFrom(flowInfo.unconditionalInits());", "-", "-\t\tFlowContext parentContext;", "-\t\tif ((parentContext = traversedContext.parent) == null) { // top-context", "-\t\t\tbreak;", "-\t\t} else {", "-\t\t\ttraversedContext = parentContext;", "-\t\t}", "-\t}", "+\t} while ((traversedContext = traversedContext.parent) != null);", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74a04270332c5e98a52b963596381dae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "5a9617d46eeedacda30ce2f97acd9c0340885311", "commitAfterChange": "f3e681d78029f0800d6f55351b70c72cab18c6a2", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\tReferenceBinding foundType = null;", "+\t\tint problemId = NotFound;", "+\t\t\tReferenceBinding foundType = null;", "-\t\t\tif (foundType != null && foundType.problemId() != NotVisible)", "-\t\t\t\treturn foundType;", "+\t\t\tif (foundType != null) {", "+\t\t\t\tif (foundType.problemId() != NotVisible) return foundType;", "+\t\t\t\tproblemId = NotVisible;", "+\t\t\t}", "-\t\t\tboolean foundInImport = false;", "-\t\t\tReferenceBinding type = null;", "+\t\t\t\tboolean foundInImport = false;", "+\t\t\t\tReferenceBinding type = null;", "-\t\t\t\t\t\t\t\t? findType(name, (PackageBinding) resolvedImport, currentPackage)", "-\t\t\t\t\t\t\t\t: findDirectMemberType(name, (ReferenceBinding) resolvedImport);", "-\t\t\t\t\t\tif (temp != null && temp.isValidBinding()) {", "-\t\t\t\t\t\t\tImportReference importReference = someImport.reference;", "-\t\t\t\t\t\t\tif (importReference != null) importReference.used = true;", "-\t\t\t\t\t\t\tif (foundInImport)", "-\t\t\t\t\t\t\t\t// Answer error binding -- import on demand conflict; name found in two import on demand packages.", "-\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, Ambiguous);", "-\t\t\t\t\t\t\ttype = temp;", "-\t\t\t\t\t\t\tfoundInImport = true;", "+\t\t\t\t\t\t\t? findType(name, (PackageBinding) resolvedImport, currentPackage)", "+\t\t\t\t\t\t\t: findDirectMemberType(name, (ReferenceBinding) resolvedImport);", "+\t\t\t\t\t\tif (temp != null) {", "+\t\t\t\t\t\t\tif (temp.isValidBinding()) {", "+\t\t\t\t\t\t\t\tImportReference importReference = someImport.reference;", "+\t\t\t\t\t\t\t\tif (importReference != null) importReference.used = true;", "+\t\t\t\t\t\t\t\tif (foundInImport)", "+\t\t\t\t\t\t\t\t\t// Answer error binding -- import on demand conflict; name found in two import on demand packages.", "+\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, Ambiguous);", "+\t\t\t\t\t\t\t\ttype = temp;", "+\t\t\t\t\t\t\t\tfoundInImport = true;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tproblemId = temp.problemId();", "+\t\t\t\t\t\t\t}", "+\t\t\t\tif (type != null) return type;", "-\t\t\tif (type != null) return type;", "-\t\tif (foundType != null) return foundType; // problem type from above", "-\t\treturn new ProblemReferenceBinding(name, NotFound);", "+\t\treturn new ProblemReferenceBinding(name, problemId);"]}], "num": 18720}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a95fea7f64f15b1c903883af962ccc5b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f5d893c1a94ebc9ffe92cb3fc7769ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 190, "methodNumberAfterChange": 191, "signatureBeforeChange": "  \tprivate void findTypesAndPackages(char[] token, Scope scope, boolean proposeBaseTypes, boolean proposeVoidType, ObjectVector typesFound)", "signatureAfterChange": "  \tprivate void findTypesAndPackages(char[] token, Scope scope, boolean proposeBaseTypes, boolean proposeVoidType, ObjectVector typesFound)", "diff": ["-\t\t\t\t} else if (isEmptyPrefix && this.assistNodeIsException) {", "-\t\t\t\t\tif (sourceType.findSuperTypeOriginatingFrom(TypeIds.T_JavaLangThrowable, true) == null) {", "-\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t}", "+\t\t\t\t} else if (this.assistNodeIsException) {", "+\t\t\t\t\t if (!sourceType.isClass()) continue next;", "+\t\t\t\t\t if (isEmptyPrefix) {", "+\t\t\t\t\t\t if (sourceType.findSuperTypeOriginatingFrom(TypeIds.T_JavaLangThrowable, true) == null) {", "+\t\t\t\t\t\t\t continue next;", "+\t\t\t\t\t     }", "+\t\t\t\t\t  }", "-\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "+\t\t\t\trelevance += computeRelevanceForInterestingProposal(sourceType);", "-\t\t\t\tif(this.assistNodeIsClass) {", "+\t\t\t\tif(this.assistNodeIsClass || this.assistNodeIsException) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b50d57ae0d1d83867a79d91de532e5cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "19198639bc25484a459cb1c53c953f761d4a6a3d", "commitAfterChange": "f495bb04967a33ceb30ace84eb082a0e7e182ce6", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " \t \tprivate void findNestedTypes( \t\tchar[] typeName, \t\tSourceTypeBinding currentType, \t\tScope scope, \t\tboolean proposeAllMemberTypes, \t\tObjectVector typesFound)", "signatureAfterChange": " \t \tprivate void findNestedTypes( \t\tchar[] typeName, \t\tSourceTypeBinding currentType, \t\tScope scope, \t\tboolean proposeAllMemberTypes, \t\tObjectVector typesFound)", "diff": ["-\t\t\t\t\t\t\t\tif(PROPOSE_MEMBER_TYPES) {", "-\t\t\t\t\t\t\t\t\tif(this.assistNodeIsClass) {", "-\t\t\t\t\t\t\t\t\t\tif(!localType.isClass()) continue next;", "-\t\t\t\t\t\t\t\t\t} else if(this.assistNodeIsInterface) {", "-\t\t\t\t\t\t\t\t\t\tif(!localType.isInterface() && !localType.isAnnotationType()) continue next;", "-\t\t\t\t\t\t\t\t\t} else if (this.assistNodeIsAnnotation) {", "-\t\t\t\t\t\t\t\t\t\tif(!localType.isAnnotationType()) continue next;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif(this.assistNodeIsClass) {", "+\t\t\t\t\t\t\t\t\tif(!localType.isClass()) continue next;", "+\t\t\t\t\t\t\t\t} else if(this.assistNodeIsInterface) {", "+\t\t\t\t\t\t\t\t\tif(!localType.isInterface() && !localType.isAnnotationType()) continue next;", "+\t\t\t\t\t\t\t\t} else if (this.assistNodeIsAnnotation) {", "+\t\t\t\t\t\t\t\t\tif(!localType.isAnnotationType()) continue next;"]}], "num": 22588}
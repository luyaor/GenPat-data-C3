{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d4dc7d5abe4ec94c58fffc5a704fff5f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd6eb003388dbfe78ab61a354a659418", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJarFileToIndex.java", "commitBeforeChange": "2acf337b771d06ad716c2ae54bdb8443b5b5d1d6", "commitAfterChange": "28f793f875e5d5b5aa1f2b69f1f41ea8e36715ac", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "\t \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-}\t", "-\t\t", "-\t\tif (progressMonitor != null && progressMonitor.isCanceled()) return COMPLETE;", "+", "+\t\tif (progressMonitor != null && progressMonitor.isCanceled()) return true;", "+", "-\t\t\tIPath indexedPath = this.path;", "-\t\t\tIIndex index = (IIndex) manager.getIndex(indexedPath, false /*do not reuse index file*/, false /*do not create if none*/);", "+\t\t\tIIndex index = (IIndex) manager.getIndex(this.indexPath, false, /*do not reuse index file*/ false /*do not create if none*/);", "-\t\t\t\tif (JobManager.VERBOSE) ", "-\t\t\t\t\tJobManager.verbose(\"-> no indexing required (index already exists) for \" + this.path); //$NON-NLS-1$", "-\t\t\t\treturn COMPLETE;", "+\t\t\t\tif (JobManager.VERBOSE)", "+\t\t\t\t\tJobManager.verbose(\"-> no indexing required (index already exists) for \" + this.indexPath); //$NON-NLS-1$", "+\t\t\t\treturn true;", "-\t\t\tindex = manager.getIndex(indexedPath, true /*reuse index file*/, true /*create if none*/);", "+\t\t\tindex = manager.getIndex(this.indexPath, true, /*reuse index file*/ true /*create if none*/);", "-\t\t\t\tif (JobManager.VERBOSE) ", "-\t\t\t\t\tJobManager.verbose(\"-> index could not be created for \" + this.path); //$NON-NLS-1$", "-\t\t\t\treturn COMPLETE;", "+\t\t\t\tif (JobManager.VERBOSE)", "+\t\t\t\t\tJobManager.verbose(\"-> index could not be created for \" + this.indexPath); //$NON-NLS-1$", "+\t\t\t\treturn true;", "-\t\t\t\tif (JobManager.VERBOSE) ", "-\t\t\t\t\tJobManager.verbose(\"-> index for \" + this.path + \" just got deleted\"); //$NON-NLS-1$//$NON-NLS-2$", "-\t\t\t\treturn COMPLETE; // index got deleted since acquired", "+\t\t\t\tif (JobManager.VERBOSE)", "+\t\t\t\t\tJobManager.verbose(\"-> index for \" + this.indexPath + \" just got deleted\"); //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t\treturn true; // index got deleted since acquired", "-\t\t\t\t\tif (location == null)", "-\t\t\t\t\t\treturn FAILED;", "-\t\t\t\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE) {", "+\t\t\t\t\tif (location == null) return false;", "+\t\t\t\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE)", "-\t\t\t\t\t}", "-\t\t\t\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE) {", "-\t\t\t\t\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [AddJarFileToIndex.execute()] Creating ZipFile on \" + this.path); //$NON-NLS-1$\t//$NON-NLS-2$", "-\t\t\t\t\t}", "-\t\t\t\t\tzip = new ZipFile(this.path.toFile());", "-\t\t\t\t\tzipFilePath = (Path) this.path;", "+\t\t\t\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE)", "+\t\t\t\t\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [AddJarFileToIndex.execute()] Creating ZipFile on \" + this.indexPath); //$NON-NLS-1$\t//$NON-NLS-2$", "+\t\t\t\t\tzip = new ZipFile(this.indexPath.toFile());", "+\t\t\t\t\tzipFilePath = (Path) this.indexPath;", "-\t\t\t\t\t\t\tJarFileEntryDocument entryDocument =", "-\t\t\t\t\t\t\t\tnew JarFileEntryDocument(ze, null, zipFilePath);", "+\t\t\t\t\t\t\tJarFileEntryDocument entryDocument = new JarFileEntryDocument(ze, null, zipFilePath);", "-\t\t\t\t\t\t\tJobManager.verbose(", "-\t\t\t\t\t\t\t\t\"-> no indexing required (index is consistent with library) for \" //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t+ zip.getName() + \" (\" //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t+ (System.currentTimeMillis() - initialTime) + \"ms)\"); //$NON-NLS-1$", "-\t\t\t\t\t\treturn COMPLETE;", "+\t\t\t\t\t\t\tJobManager.verbose(\"-> no indexing required (index is consistent with library) for \" //$NON-NLS-1$", "+\t\t\t\t\t\t\t+zip.getName() + \" (\" //$NON-NLS-1$", "+\t\t\t\t\t\t\t+ (System.currentTimeMillis() - initialTime) + \"ms)\"); //$NON-NLS-1$", "+\t\t\t\t\t\treturn true;", "-\t\t\t\t\tindex = manager.recreateIndex(indexedPath);", "+\t\t\t\t\tindex = manager.recreateIndex(this.indexPath);", "-\t\t\t\t\t\t\tJobManager.verbose(", "-\t\t\t\t\t\t\t\t\"-> indexing of \" //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t+ zip.getName() ", "-\t\t\t\t\t\t\t\t+ \" has been cancelled\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\tJobManager.verbose(\"-> indexing of \" //$NON-NLS-1$", "+\t\t\t\t\t\t\t+zip.getName() + \" has been cancelled\"); //$NON-NLS-1$", "-\t\t\t\t\t\treturn FAILED;", "+\t\t\t\t\t\treturn false;", "-\t\t\t\t\t", "+", "-\t\t\t\t\tJobManager.verbose(", "-\t\t\t\t\t\t\"-> done indexing of \" //$NON-NLS-1$", "-\t\t\t\t\t\t+ zip.getName() + \" (\" //$NON-NLS-1$", "-\t\t\t\t\t\t+ (System.currentTimeMillis() - initialTime) + \"ms)\"); //$NON-NLS-1$", "+\t\t\t\t\tJobManager.verbose(\"-> done indexing of \" //$NON-NLS-1$", "+\t\t\t\t\t+zip.getName() + \" (\" //$NON-NLS-1$", "+\t\t\t\t\t+ (System.currentTimeMillis() - initialTime) + \"ms)\"); //$NON-NLS-1$", "-\t\t\t\tJobManager.verbose(\"-> failed to index \" + this.path + \" because of the following exception:\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tJobManager.verbose(\"-> failed to index \" + this.indexPath + \" because of the following exception:\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tmanager.removeIndex(this.path);", "-\t\t\treturn FAILED;", "+\t\t\tmanager.removeIndex(this.indexPath);", "+\t\t\treturn false;", "-\t\treturn COMPLETE;", "+\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e03a5edb5835e902a8c15fe02fe33148", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "09f42f58bcdf2fa84ccd2b8b65f28ab3036222ca", "commitAfterChange": "57e8dd41219d846363c918d62edb5007994c5c79", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic BoundSet inferInvocationType(BoundSet b1, TypeBinding expectedType, InvocationSite invocationSite, MethodBinding method, int checkKind) \t\t\tthrows InferenceFailureException", "signatureAfterChange": " \tpublic BoundSet inferInvocationType(BoundSet b1, TypeBinding expectedType, InvocationSite invocationSite, MethodBinding method) \t\t\tthrows InferenceFailureException", "diff": ["-\tpublic BoundSet inferInvocationType(BoundSet b1, TypeBinding expectedType, InvocationSite invocationSite, MethodBinding method, int checkKind)", "+\tpublic BoundSet inferInvocationType(BoundSet b1, TypeBinding expectedType, InvocationSite invocationSite, MethodBinding method)", "-\t\tBoundSet previous = this.currentBounds;", "-\t\t\t\tswitch (checkKind) {", "+\t\t\t\tif (k < (method.isVarargs() ? p-1 : p))", "+\t\t\t\t\treturn null; // insufficient arguments for parameters!", "+\t\t\t\tswitch (this.inferenceKind) {", "-\t\t\t\t\t\tthrow new IllegalStateException(\"Unexpected checkKind \"+checkKind); //$NON-NLS-1$", "+\t\t\t\t\t\tthrow new IllegalStateException(\"Unexpected checkKind \"+this.inferenceKind); //$NON-NLS-1$", "-\t\t\treturn solution;", "+\t\t\treturn this.currentBounds = solution; // this is final, keep the result:", "-\t\t\tthis.currentBounds = previous;", "+\t\t\tthis.hasFinished = true;"]}], "num": 62641}
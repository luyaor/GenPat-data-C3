{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e61e1f0463bb1879fc2f4bc643eb5e9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17e97c2b96060f32d5ceebd7627a572a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "a4c87b85ad074ebb6b6f76117f9e2f37a165a84d", "commitAfterChange": "4464f32c1c4717c63fedbced19c6da0d541eee99", "methodNumberBeforeChange": 613, "methodNumberAfterChange": 613, "signatureBeforeChange": " public void testBug286379c() throws CoreException", "signatureAfterChange": " public void testBug286379c() throws CoreException", "diff": ["-\tSystem.out.println(\"Forbidden reference at the start of the test is \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\tSystem.out.println(\"================================================================================\");", "+\tSystem.out.println(\"Starting test JavaSearchBugTests.testBug286379c()...\");", "+\tSystem.out.println(\"\t- Options at test start:\");", "+\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "+\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "+\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\tSystem.out.println(\"Forbidden reference before first exit \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\t\tSystem.out.println(\"\t- Options before first exit:\");", "+\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "+\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "+\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\tSystem.out.println(\"Forbidden reference after first restart \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\t\tSystem.out.println(\"\t- Options after first restart:\");", "+\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "+\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "+\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\tSystem.out.println(\"Forbidden reference before second exit \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\t\tSystem.out.println(\"\t- Options before second exit:\");", "+\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "+\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "+\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\tSystem.out.println(\"Forbidden reference after second restart \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\t\tSystem.out.println(\"\t- Options after second restart:\");", "+\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "+\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "+\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\t\tSystem.out.println(\"\t- Options after search:\");", "+\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "+\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "+\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\t\tSystem.out.println(\"\t- Options at test end:\");", "+\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "+\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "+\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\t\tSystem.out.println(\"================================================================================\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b5ac58bc9cfddae58610d6efc20f584", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "667b6c6169416d9b79d86e73c3fa9c45930c36a8", "commitAfterChange": "8e69d36fa08db2d61d2c40fecd2494cfd19819f5", "methodNumberBeforeChange": 613, "methodNumberAfterChange": 613, "signatureBeforeChange": " public void testBug286379c() throws CoreException", "signatureAfterChange": " public void testBug286379c() throws CoreException", "diff": ["-\t\tboolean valid = false;", "+\t\tboolean toRemPresent = false;", "-\t\t\tthis.valid = validate(event.getDelta());", "+\t\t\tthis.toRemPresent = validate(event.getDelta());", "-\t// print statement to debug random failures of this test", "-\tJavaModelManager.DEBUG_302850 = true;", "-\tSystem.out.println(\"================================================================================\");", "-\tSystem.out.println(\"Starting test JavaSearchBugTests.testBug286379c()...\");", "-\tSystem.out.println(\"\t- Default Options at test start:\");", "-\tSystem.out.println(Util.indentString(new CompilerOptions(JavaCore.getDefaultOptions()).toString(), 1));", "-\tSystem.out.println(\"\t- Options at test start:\");", "-\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "-\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "-\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\tSystem.out.println(Util.indentString(new CompilerOptions(JavaCore.getOptions()).toString(), 2));", "-\t\twhile (!changeListener.valid) {", "+\t\twhile (!changeListener.toRemPresent) {", "-\t\t// print statement to debug random failures of this test", "-\t\tSystem.out.println(\"\t- Options before first exit:\");", "-\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "-\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "-\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\tSystem.out.println(Util.indentString(new CompilerOptions(JavaCore.getOptions()).toString(), 2));", "-\t\t// print statement to debug random failures of this test", "-\t\tSystem.out.println(\"\t- Options after first restart:\");", "-\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "-\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "-\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\tSystem.out.println(Util.indentString(new CompilerOptions(JavaCore.getOptions()).toString(), 2));", "+\t\tchangeListener.toRemPresent = true;", "+\t\tcounter = 0;", "+\t\twhile (changeListener.toRemPresent) {", "+\t\t\ttry {", "+\t\t\t\tThread.sleep(100);", "+\t\t\t}", "+\t\t\tcatch (InterruptedException ie) {", "+\t\t\t\t// skip", "+\t\t\t}", "+\t\t\tassertTrue(\"We should have got a resource event within a 10s delay!\", counter++ < 100);", "+\t\t}", "+\t\twaitUntilIndexesReady();", "-\t\t// print statement to debug random failures of this test", "-\t\tSystem.out.println(\"\t- Options before second exit:\");", "-\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "-\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "-\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\tSystem.out.println(Util.indentString(new CompilerOptions(JavaCore.getOptions()).toString(), 2));", "-\t\tsimulateRestart();\t", "-\t\t// print statement to debug random failures of this test", "-\t\tSystem.out.println(\"\t- Options after second restart:\");", "-\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "-\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "-\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\t\tsimulateRestart();", "-\t\tSystem.out.println(\"\t- Options after search:\");", "-\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "-\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "-\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\tSystem.out.println(Util.indentString(new CompilerOptions(JavaCore.getOptions()).toString(), 2));", "-\t\tSystem.out.println(\"\t- Options at test end:\");", "-\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "-\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "-\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\tSystem.out.println(Util.indentString(new CompilerOptions(JavaCore.getOptions()).toString(), 2));", "-\t\tSystem.out.println(\"\t- Default Options at test end:\");", "-\t\tSystem.out.println(Util.indentString(new CompilerOptions(JavaCore.getDefaultOptions()).toString(), 2));", "-\t\tJavaModelManager.DEBUG_302850 = false;"]}], "num": 37999}
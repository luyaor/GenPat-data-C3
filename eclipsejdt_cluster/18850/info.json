{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d7e65a6c433a8f1f06f63ec229d28fbc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0625457e1f346f326503f0fdb2a0f90d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "0b724131f5f3cf2d018d63a77e76484f2fe8967f", "commitAfterChange": "7efd98740c0284fcb351af505635684db1a5006c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "signatureAfterChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "diff": ["-\t        \tif (equivalent == null || !equivalent.isParameterizedType())", "-\t        \t\treturn;", "+\t        \tif (equivalent == null) return;", "-\t        if (equivalent.isParameterizedType() && otherEquivalent.isParameterizedType()) {", "-\t        \tParameterizedTypeBinding parameterizedType = (ParameterizedTypeBinding) equivalent;", "-\t        \tParameterizedTypeBinding otherParameterizedType = (ParameterizedTypeBinding) otherEquivalent;", "-\t            for (int i = 0, length = parameterizedType.arguments.length; i < length; i++) {", "-\t                parameterizedType.arguments[i].collectSubstitutes(otherParameterizedType.arguments[i], substitutes);", "-\t            }", "-\t        } else if (equivalent.isParameterizedType() && otherEquivalent.isRawType()) {", "-\t        \tsubstitutes.clear(); // clear all variables to indicate raw generic method in the end", "+\t        TypeBinding[] elements;", "+\t        switch (equivalent.kind()) {", "+\t        \tcase Binding.GENERIC_TYPE :", "+\t        \t\telements = equivalent.typeVariables();", "+\t        \t\tbreak;", "+\t        \tcase Binding.PARAMETERIZED_TYPE :", "+\t        \t\telements = ((ParameterizedTypeBinding)equivalent).arguments;", "+\t        \t\tbreak;", "+\t        \tdefault :", "+\t        \t\treturn;", "+\t        }", "+\t        TypeBinding[] otherElements;", "+\t        switch (otherEquivalent.kind()) {", "+\t        \tcase Binding.GENERIC_TYPE :", "+\t        \t\totherElements = otherEquivalent.typeVariables();", "+\t        \t\tbreak;", "+\t        \tcase Binding.PARAMETERIZED_TYPE :", "+\t        \t\totherElements = ((ParameterizedTypeBinding)otherEquivalent).arguments;", "+\t        \t\tbreak;", "+\t        \tcase Binding.RAW_TYPE :", "+\t        \t\tsubstitutes.clear(); // clear all variables to indicate raw generic method in the end", "+\t        \t\treturn;", "+\t        \tdefault :", "+\t        \t\treturn;", "+\t        }", "+            for (int i = 0, length = elements.length; i < length; i++) {", "+                elements[i].collectSubstitutes(otherElements[i], substitutes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5074d67bf77f94d55b9147d053a9431c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "3ec169b44d3736817b7c4ce9bf1791fcda57b692", "commitAfterChange": "4a83e27deea774790864c829cd5109d435b50edd", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 28, "signatureBeforeChange": " public boolean isProvablyDistinctFrom(TypeBinding otherType)", "signatureAfterChange": " public boolean isProvablyDistinctFrom(TypeBinding otherType)", "diff": ["-\tif (this.isTypeVariable()) return false;", "-\tif (this.isWildcard()) return false;", "-\tif (otherType.isTypeVariable()) return false;", "-\tif (otherType.isWildcard()) return false;", "-\tif (this.isParameterizedType()) {", "-\t\tParameterizedTypeBinding parameterizedType = (ParameterizedTypeBinding) this;", "-\t\tif (parameterizedType.type.isProvablyDistinctFrom(otherType.erasure())) return true;", "-\t\tif (otherType.isGenericType()) return false;", "-\t\tif (otherType.isRawType()) return false;", "-\t\tif (otherType.isParameterizedType()) {", "-\t\t\tTypeBinding[] arguments = parameterizedType.arguments;", "-\t\t\tif (arguments == null) return false;", "-\t\t\tParameterizedTypeBinding otherParameterizedType = (ParameterizedTypeBinding) otherType;", "-\t\t\tTypeBinding[] otherArguments = otherParameterizedType. arguments;", "-\t\t\tif (otherArguments == null) return false;", "-\t\t\tfor (int i = 0, length = arguments.length; i < length; i++) {", "-\t\t\t\tif (arguments[i].isProvablyDistinctFrom(otherArguments[i])) return true;", "-\t\t\t}", "+\tswitch (otherType.bindingType()) {", "+\t\tcase Binding.TYPE_PARAMETER :", "+\t\tcase Binding.WILDCARD_TYPE :", "-\t\t}", "-\t} else if (this.isRawType()) {", "-\t\treturn this.erasure().isProvablyDistinctFrom(otherType.erasure());", "-\t} else if (this.isGenericType()) {", "-\t\treturn this != otherType.erasure();", "+\t}", "+\tswitch(bindingType()) {", "+\t\t", "+\t\tcase Binding.TYPE_PARAMETER :", "+\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\treturn false;", "+\t\t\t", "+\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\tParameterizedTypeBinding parameterizedType = (ParameterizedTypeBinding) this;", "+\t\t\tif (parameterizedType.type.isProvablyDistinctFrom(otherType.erasure())) return true;", "+\t\t\tswitch (otherType.bindingType()) {", "+\t\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\tcase Binding.RAW_TYPE :", "+\t\t\t\t\treturn false;", "+\t\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\t\tTypeBinding[] arguments = parameterizedType.arguments;", "+\t\t\t\t\tif (arguments == null) return false;", "+\t\t\t\t\tParameterizedTypeBinding otherParameterizedType = (ParameterizedTypeBinding) otherType;", "+\t\t\t\t\tTypeBinding[] otherArguments = otherParameterizedType. arguments;", "+\t\t\t\t\tif (otherArguments == null) return false;", "+\t\t\t\t\tfor (int i = 0, length = arguments.length; i < length; i++) {", "+\t\t\t\t\t\tif (arguments[i].isProvablyDistinctFrom(otherArguments[i])) return true;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn false;", "+\t\t\t\t\t", "+\t\t\t}", "+\t\t\tbreak;", "+", "+\t\tcase Binding.RAW_TYPE :", "+\t\t\treturn this.erasure().isProvablyDistinctFrom(otherType.erasure());", "+\t\t\t", "+\t\tcase Binding.GENERIC_TYPE :", "+\t\t\treturn this != otherType.erasure();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "964a43f7adcd21ccdf8fbe4b529c3d43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 15, "signatureBeforeChange": " protected void setCodegenBinding(int index, FieldBinding someCodegenBinding)", "signatureAfterChange": " protected TypeBinding getFinalReceiverType()", "diff": ["+ */", "+protected TypeBinding getFinalReceiverType() {", "+\tint otherBindingsCount = this.otherBindings == null ? 0 : this.otherBindings.length;", "+\tswitch (otherBindingsCount) {", "+\t\tcase 0 :", "+\t\t\treturn this.actualReceiverType;", "+\t\tcase 1 :", "+\t\t\treturn this.genericCast != null ? this.genericCast : ((VariableBinding)this.binding).type;", "+\t\tdefault:", "+\t\t\tTypeBinding previousGenericCast = this.otherGenericCasts == null ? null : this.otherGenericCasts[otherBindingsCount-2];", "+\t\t\treturn previousGenericCast != null ? previousGenericCast : this.otherBindings[otherBindingsCount-2].type;", "+\t}\t", "-// set the matching codegenBinding and generic cast", "-protected void setCodegenBinding(int index, FieldBinding someCodegenBinding) {", "-\tif (index == 0){", "-\t\tthis.codegenBinding = someCodegenBinding;", "-\t} else {", "-\t    int length = this.otherBindings.length;", "-\t\tif (this.otherCodegenBindings == this.otherBindings){", "-\t\t\tSystem.arraycopy(this.otherBindings, 0, this.otherCodegenBindings = new FieldBinding[length], 0, length);", "-\t\t}", "-\t\tthis.otherCodegenBindings[index-1] = someCodegenBinding;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc17fa4b406dd30353d8f30ac50ee748", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/NamingConventionTests.java", "commitBeforeChange": "04b1f777f72aaed365425972c86158987dc99f47", "commitAfterChange": "627e74400f5d869da7cccfccaf9f22c5e00c372a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": " private String toString(char[][] suggestions)", "signatureAfterChange": " public void testGetBaseName004()", "diff": ["-private String toString(char[][] suggestions) {", "-\tif(suggestions == null) {", "-\t\treturn \"\"; //$NON-NLS-1$", "-\t}", "-", "-\tStringBuffer buffer = new StringBuffer();", "-\tfor (int i = 0; i < suggestions.length; i++) {", "-\t\tif(i != 0) {", "-\t\t\tbuffer.append('\\n');", "-\t\t}", "-\t\tbuffer.append(suggestions[i]);", "-\t}", "-\treturn buffer.toString();", "+ */", "+public void testGetBaseName004() {", "+\tHashtable options = JavaCore.getOptions();", "+\toptions.put(JavaCore.CODEASSIST_STATIC_FINAL_FIELD_PREFIXES,\"pre\"); //$NON-NLS-1$", "+\toptions.put(JavaCore.CODEASSIST_STATIC_FINAL_FIELD_SUFFIXES,\"suf\"); //$NON-NLS-1$", "+\tJavaCore.setOptions(options);", "+\t", "+\tString baseName = NamingConventions.getBaseName(", "+\t\t\tNamingConventions.VK_CONSTANT_FIELD,", "+\t\t\t\"preONE_NAMEsuf\", //$NON-NLS-1$", "+\t\t\tthis.project);", "+\t", "+\tassertEquals(", "+\t\t\t\"OneName\", //$NON-NLS-1$", "+\t\t\tbaseName);"]}], "num": 18850}
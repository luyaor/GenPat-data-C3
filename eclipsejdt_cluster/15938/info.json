{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0678efdc2b0402da18766c4086e69d1e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41be0d141342ae86d4561388b4d71c88", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "9c622a725bd1781235642601f30ea554da5b3d83", "commitAfterChange": "03a380bfa1976c7afb0666b83988f9c0efd1b83c", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " private int sourceEnd(TypeDeclaration typeDeclaration)", "signatureAfterChange": " private int sourceEnd(TypeDeclaration typeDeclaration)", "diff": ["-\t\t// TODO for enum constant body, type is null", "-\t\tif (typeDeclaration.allocation.type == null) {", "-\t\t\t// TODO (jerome) please update with the right value", "-\t\t\treturn typeDeclaration.allocation.sourceEnd;", "-\t\t}", "-\t\treturn typeDeclaration.allocation.type.sourceEnd;", "+\t\tQualifiedAllocationExpression allocation = typeDeclaration.allocation;", "+\t\tif (allocation.type == null) // case of enum constant body", "+\t\t\treturn typeDeclaration.sourceEnd;", "+\t\treturn allocation.type.sourceEnd;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6b61a458a6898b36d56dc1f138350bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredMethod.java", "commitBeforeChange": "b5140bd64fdb2d31bd8b4dc856351454e9b5a715", "commitAfterChange": "a25370743d1aa1679ad920fa246835a24f730877", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public RecoveredElement add(TypeDeclaration typeDeclaration, int bracketBalanceValue)", "signatureAfterChange": " public RecoveredElement add(TypeDeclaration typeDeclaration, int bracketBalanceValue)", "diff": ["-\t\t} else {", "-\t\t\treturn this.parent.add(typeDeclaration, bracketBalanceValue);", "+\t\treturn this.parent.add(typeDeclaration, bracketBalanceValue);", "-\t}\t", "+\t}", "+\tif (typeDeclaration.isInterface()) {", "+\t\tthis.updateSourceEndIfNecessary(this.previousAvailableLineEnd(typeDeclaration.declarationSourceStart - 1));", "+\t\tif (this.parent == null) {", "+\t\t\treturn this; // ignore", "+\t\t}", "+\t\t// close the constructor", "+\t\treturn this.parent.add(typeDeclaration, bracketBalanceValue);", "+\t}"]}], "num": 15938}
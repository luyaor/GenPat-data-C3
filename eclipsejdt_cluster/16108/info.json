{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44924db776815404ff647e68b4650e18", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78cabe208af527c5c32c87ee38375a5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "6781b5445d9813f939573ded9d37ee82c9dbbd15", "commitAfterChange": "6989e5bb4ed8f3be37ea69298930332629e9b475", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["+\t\tboolean isRawMemberInvocation = !method.isStatic() && !receiverType.isUnboundWildcard() && method.declaringClass.isRawType() && method.hasSubstitutedParameters();", "+\t\tMethodBinding rawOriginalGenericMethod = null;", "+\t\tif (!isRawMemberInvocation) {", "+\t\t\tif (method instanceof ParameterizedGenericMethodBinding) {", "+\t\t\t\tif (((ParameterizedGenericMethodBinding)method).isRaw && method.hasSubstitutedParameters()) {", "+\t\t\t\t\trawOriginalGenericMethod = method.original();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-\t\t\tfor (int i = 0; i < lastIndex; i++)", "-\t\t\t    if (checkInvocationArgument(scope, arguments[i], params[i], argumentTypes[i]))", "+\t\t\tfor (int i = 0; i < lastIndex; i++) {", "+\t\t\t\tTypeBinding originalRawParam = rawOriginalGenericMethod == null ? null : rawOriginalGenericMethod.parameters[i];", "+\t\t\t    if (checkInvocationArgument(scope, arguments[i], params[i] , argumentTypes[i], originalRawParam)) {", "+\t\t\t    }", "+\t\t\t}", "-\t\t\t    if (params.length != argLength || parameterType.dimensions() != argumentTypes[lastIndex].dimensions())", "+\t\t\t\tTypeBinding originalRawParam = null;", "+", "+\t\t\t    if (params.length != argLength || parameterType.dimensions() != argumentTypes[lastIndex].dimensions()) {", "-\t\t\t\tfor (int i = lastIndex; i < argLength; i++)", "-\t\t\t\t    if (checkInvocationArgument(scope, arguments[i], parameterType, argumentTypes[i]))", "+\t\t\t\t\toriginalRawParam = rawOriginalGenericMethod == null ? null : ((ArrayBinding)rawOriginalGenericMethod.parameters[lastIndex]).elementsType();", "+\t\t\t    }", "+\t\t\t\tfor (int i = lastIndex; i < argLength; i++) {", "+\t\t\t\t    if (checkInvocationArgument(scope, arguments[i], parameterType, argumentTypes[i], originalRawParam))", "+\t\t\t\t}", "-\t\t\tfor (int i = 0, argLength = arguments.length; i < argLength; i++)", "-\t\t\t    if (checkInvocationArgument(scope, arguments[i], params[i], argumentTypes[i]))", "+\t\t\tfor (int i = 0, argLength = arguments.length; i < argLength; i++) {", "+\t\t\t\tTypeBinding originalRawParam = rawOriginalGenericMethod == null ? null : rawOriginalGenericMethod.parameters[i];", "+\t\t\t    if (checkInvocationArgument(scope, arguments[i], params[i], argumentTypes[i], originalRawParam))", "+\t\t\t}", "+\t\t} else if (rawOriginalGenericMethod != null) {", "+\t\t    scope.problemReporter().unsafeRawGenericMethodInvocation((ASTNode)invocationSite, method);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9320cbadbc3ee42ae6605741185dbf7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "55f4964943e2f63287728b29450cbefa492d313d", "commitAfterChange": "ffcfe0dac7f476f076089d3cdae600b5982efdfb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["+\t}", "-\t\tfor (int i = 0; i < arguments.length; i++) {", "-\t\t    TypeBinding parameterType = method.parameters[i];", "-\t\t    TypeBinding argumentType = argumentTypes[i];", "-\t\t\targuments[i].computeConversion(scope, parameterType, argumentType);", "-\t\t\tif (argumentType != NullBinding && parameterType.isWildcard() && ((WildcardBinding)parameterType).kind != Wildcard.SUPER) {", "-\t\t\t    unsafeWildcardInvocation = true;", "-\t\t\t} else if (argumentType != parameterType ", "-\t\t\t        && argumentType.isRawType() ", "-\t\t\t        && (parameterType.isBoundParameterizedType() || parameterType.isGenericType())) {", "-\t\t\t    scope.problemReporter().unsafeRawConversion(arguments[i], argumentType, parameterType);", "+\t\tTypeBinding[] params = method.parameters;", "+\t\tif (method.isVararg()) {", "+\t\t\t// 4 possibilities exist for a call to the vararg method foo(int i, long ... value) : foo(1), foo(1, 2), foo(1, 2, 3, 4) & foo(1, new long[] {1, 2})", "+\t\t\tint lastIndex = params.length - 1;", "+\t\t\tfor (int i = 0; i < lastIndex; i++)", "+\t\t\t    if (checkInvocationArgument(scope, arguments[i], params[i], argumentTypes[i]))", "+\t\t\t\t    unsafeWildcardInvocation = true;", "+\t\t   int argLength = arguments.length;", "+\t\t   if (lastIndex < argLength) { // vararg argument was provided", "+\t\t\t   \tTypeBinding parameterType = params[lastIndex];", "+\t\t\t    if (params.length != argLength || parameterType.dimensions() != argumentTypes[lastIndex].dimensions())", "+\t\t\t    \tparameterType = ((ArrayBinding) parameterType).elementsType(); // single element was provided for vararg parameter", "+\t\t\t\tfor (int i = lastIndex; i < argLength; i++)", "+\t\t\t\t    if (checkInvocationArgument(scope, arguments[i], parameterType, argumentTypes[i]))", "+\t\t\t\t\t    unsafeWildcardInvocation = true;", "+\t\t} else {", "+\t\t\tfor (int i = 0, argLength = arguments.length; i < argLength; i++)", "+\t\t\t    if (checkInvocationArgument(scope, arguments[i], params[i], argumentTypes[i]))", "+\t\t\t\t    unsafeWildcardInvocation = true;"]}], "num": 16108}
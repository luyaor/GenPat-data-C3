{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2161fb1fc12738ef17e2a5cfbe6c1a03", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15ad583de8cde49c7815bf4fe57cc608", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "e1051acac48de2e59e4c3d2d0f46898b4067bf9a", "commitAfterChange": "25dbd9e17c7b6920dccf1b458296dbbe00f382de", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic void testBug404489b() throws JavaModelException", "signatureAfterChange": " \tpublic void testBug404489b() throws JavaModelException", "diff": ["-\t\tassertTrue(type.isPackageQualifiedType());", "-\t\tPackageQualifiedType packageQualifiedType = (PackageQualifiedType) type;", "-\t\tcheckSourceRange(packageQualifiedType, \"test404489.bug.@NonNull IOException\", source);", "-\t\tITypeBinding typeBinding = packageQualifiedType.resolveBinding();", "+\t\tassertTrue(type.isNameQualifiedType());", "+\t\tNameQualifiedType nameQualifiedType = (NameQualifiedType) type;", "+\t\tcheckSourceRange(nameQualifiedType, \"test404489.bug.@NonNull IOException\", source);", "+\t\tITypeBinding typeBinding = nameQualifiedType.resolveBinding();", "-\t\t// qualifier of the package qualified type", "-\t\tName name = packageQualifiedType.getQualifier();", "+\t\t// qualifier of the name qualified type", "+\t\tName name = nameQualifiedType.getQualifier();", "-\t\t// annotations of package qualified type", "-\t\tList annotations = packageQualifiedType.annotations();", "+\t\t// annotations of name qualified type", "+\t\tList annotations = nameQualifiedType.annotations();", "-\t\t// name of the package qualified type", "-\t\tsimpleName = packageQualifiedType.getName();", "+\t\t// name of the name qualified type", "+\t\tsimpleName = nameQualifiedType.getName();", "-\t\tassertTrue(type.isPackageQualifiedType());", "-\t\tpackageQualifiedType = (PackageQualifiedType) type;", "-\t\tcheckSourceRange(packageQualifiedType, \"test404489.bug.@NonNull FileNotFoundException\", source);", "-\t\ttypeBinding = packageQualifiedType.resolveBinding();", "+\t\tassertTrue(type.isNameQualifiedType());", "+\t\tnameQualifiedType = (NameQualifiedType) type;", "+\t\tcheckSourceRange(nameQualifiedType, \"test404489.bug.@NonNull FileNotFoundException\", source);", "+\t\ttypeBinding = nameQualifiedType.resolveBinding();", "-\t\t// qualifier of the package qualified type", "-\t\tname = packageQualifiedType.getQualifier();", "+\t\t// qualifier of the name qualified type", "+\t\tname = nameQualifiedType.getQualifier();", "-\t\t// annotations of package qualified type", "-\t\tannotations = packageQualifiedType.annotations();", "+\t\t// annotations of name qualified type", "+\t\tannotations = nameQualifiedType.annotations();", "-\t\t// name of the package qualified type", "-\t\tsimpleName = packageQualifiedType.getName();", "+\t\t// name of the name qualified type", "+\t\tsimpleName = nameQualifiedType.getName();", "-\t\tassertTrue(type.isPackageQualifiedType());", "-\t\tpackageQualifiedType = (PackageQualifiedType) type;", "-\t\tcheckSourceRange(packageQualifiedType, \"test404489.bug.@NonNull EOFException\", source);", "-\t\ttypeBinding = packageQualifiedType.resolveBinding();", "+\t\tassertTrue(type.isNameQualifiedType());", "+\t\tnameQualifiedType = (NameQualifiedType) type;", "+\t\tcheckSourceRange(nameQualifiedType, \"test404489.bug.@NonNull EOFException\", source);", "+\t\ttypeBinding = nameQualifiedType.resolveBinding();", "-\t\t// qualifier of the package qualified type", "-\t\tname = packageQualifiedType.getQualifier();", "+\t\t// qualifier of the name qualified type", "+\t\tname = nameQualifiedType.getQualifier();", "-\t\t// annotations of package qualified type", "-\t\tannotations = packageQualifiedType.annotations();", "+\t\t// annotations of name qualified type", "+\t\tannotations = nameQualifiedType.annotations();", "-\t\t// name of the package qualified type", "-\t\tsimpleName = packageQualifiedType.getName();", "+\t\t// name of the name qualified type", "+\t\tsimpleName = nameQualifiedType.getName();", "-\t\tpackageQualifiedType = (PackageQualifiedType)qualifiedType.getQualifier();", "-\t\tcheckSourceRange(packageQualifiedType, \"test404489.bug.@NonNull X\", source);", "-\t\ttypeBinding = packageQualifiedType.resolveBinding();", "+\t\tnameQualifiedType = (NameQualifiedType)qualifiedType.getQualifier();", "+\t\tcheckSourceRange(nameQualifiedType, \"test404489.bug.@NonNull X\", source);", "+\t\ttypeBinding = nameQualifiedType.resolveBinding();", "-\t\tname = packageQualifiedType.getName();", "-\t\tassertSame(\"bindings different for package qualified type and assocated name\", typeBinding, name.resolveTypeBinding());", "+\t\tname = nameQualifiedType.getName();", "+\t\tassertSame(\"bindings different for name qualified type and assocated name\", typeBinding, name.resolveTypeBinding());", "-\t\t// qualifier of the package qualified type", "-\t\tname = packageQualifiedType.getQualifier();", "+\t\t// qualifier of the name qualified type", "+\t\tname = nameQualifiedType.getQualifier();", "-\t\t// annotations of package qualified type", "-\t\tannotations = packageQualifiedType.annotations();", "+\t\t// annotations of name qualified type", "+\t\tannotations = nameQualifiedType.annotations();", "-\t\t// name of the package qualified type", "-\t\tsimpleName = packageQualifiedType.getName();", "+\t\t// name of the name qualified type", "+\t\tsimpleName = nameQualifiedType.getName();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60295b5eed009c4dfa94cad3cba6d427", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "7d36cd74d7dfc1f56f940c426e98d6c489655858", "commitAfterChange": "f95e58c822d23fa71cf6c6e2ac3adce80f07a42f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["-\t\tReferenceBinding qualifiedType = null;", "+\t\tReferenceBinding qualifyingType = null;", "-\t\t\tif (qualifiedType == null) {", "-\t\t\t\tqualifiedType = currentType.enclosingType(); // if member type", "-\t\t\t\tif (qualifiedType != null) {", "-\t\t\t\t\tqualifiedType = currentType.isStatic()", "-\t\t\t\t\t\t? (ReferenceBinding) scope.environment().convertToRawType(qualifiedType, false /*do not force conversion of enclosing types*/)", "-\t\t\t\t\t\t: scope.environment().convertToParameterizedType(qualifiedType);", "+\t\t\tif (qualifyingType == null) {", "+\t\t\t\tqualifyingType = currentType.enclosingType(); // if member type", "+\t\t\t\tif (qualifyingType != null) {", "+\t\t\t\t\tqualifyingType = currentType.isStatic()", "+\t\t\t\t\t\t? (ReferenceBinding) scope.environment().convertToRawType(qualifyingType, false /*do not force conversion of enclosing types*/)", "+\t\t\t\t\t\t: scope.environment().convertToParameterizedType(qualifyingType);", "-\t\t\t}\t\t\t\t", "-\t\t\tif (typeIsConsistent ", "-\t\t\t\t\t\t&& currentType.isStatic() ", "-\t\t\t\t\t\t&& qualifiedType != null ", "-\t\t\t\t\t\t&& ((qualifiedType.isParameterizedType() && ((ParameterizedTypeBinding)qualifiedType).arguments != null) || qualifiedType.isGenericType())) {", "-\t\t\t\tscope.problemReporter().staticMemberOfParameterizedType(this, scope.environment().createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType));", "-\t\t\t\ttypeIsConsistent = false;", "-\t\t\t}\t\t\t", "+\t\t\t} else {", "+\t\t\t\tif (typeIsConsistent && currentType.isStatic() ", "+\t\t\t\t\t\t&& ((qualifyingType.isParameterizedType() && ((ParameterizedTypeBinding)qualifyingType).arguments != null) || qualifyingType.isGenericType())) {", "+\t\t\t\t\tscope.problemReporter().staticMemberOfParameterizedType(this, scope.environment().createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifyingType));", "+\t\t\t\t\ttypeIsConsistent = false;", "+\t\t\t\t}\t\t\t\t\t", "+\t\t\t\tReferenceBinding enclosingType = currentType.enclosingType();", "+\t\t\t\tif (enclosingType != null && enclosingType.erasure() != qualifyingType.erasure()) { // qualifier != declaring/enclosing", "+\t\t\t\t\tqualifyingType = enclosingType; // inherited member type, leave it associated with its enclosing rather than subtype", "+\t\t\t\t}", "+\t\t\t}", "+\t\t", "-\t\t\t\t\tthis.resolvedType =  (qualifiedType != null && qualifiedType.isParameterizedType())", "-\t\t\t\t\t\t? scope.environment().createParameterizedType(currentErasure, null, qualifiedType)", "+\t\t\t\t\tthis.resolvedType =  (qualifyingType != null && qualifyingType.isParameterizedType())", "+\t\t\t\t\t\t? scope.environment().createParameterizedType(currentErasure, null, qualifyingType)", "-\t\t\t\t}\t\t\t\t", "-\t\t\t\tParameterizedTypeBinding parameterizedType = scope.environment().createParameterizedType(currentErasure, argTypes, qualifiedType);", "+\t\t\t\t}", "+\t\t\t\tParameterizedTypeBinding parameterizedType = scope.environment().createParameterizedType(currentErasure, argTypes, qualifyingType);", "-\t\t\t\tqualifiedType = parameterizedType;", "+\t\t\t\tqualifyingType = parameterizedType;", "-\t   \t\t\t    if (typeIsConsistent && qualifiedType != null && qualifiedType.isParameterizedType()) {", "-\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.environment().createParameterizedType(currentErasure, null, qualifiedType));", "+\t   \t\t\t    if (typeIsConsistent && qualifyingType != null && qualifyingType.isParameterizedType()) {", "+\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.environment().createParameterizedType(currentErasure, null, qualifyingType));", "-\t   \t\t\t    qualifiedType = scope.environment().createRawType(currentErasure, qualifiedType); // raw type", "+\t   \t\t\t    qualifyingType = scope.environment().createRawType(currentErasure, qualifyingType); // raw type", "-\t\t\t\t\tqualifiedType = (qualifiedType != null && qualifiedType.isParameterizedType())", "-\t\t\t\t\t\t\t\t\t\t\t\t\t? scope.environment().createParameterizedType(currentErasure, null, qualifiedType)", "+\t\t\t\t\tqualifyingType = (qualifyingType != null && qualifyingType.isParameterizedType())", "+\t\t\t\t\t\t\t\t\t\t\t\t\t? scope.environment().createParameterizedType(currentErasure, null, qualifyingType)", "-\t\t\tif (isTypeUseDeprecated(qualifiedType, scope))", "-\t\t\t\treportDeprecatedType(qualifiedType, scope);\t\t    ", "-\t\t\tthis.resolvedType = qualifiedType;", "+\t\t\tif (isTypeUseDeprecated(qualifyingType, scope))", "+\t\t\t\treportDeprecatedType(qualifyingType, scope);\t\t    ", "+\t\t\tthis.resolvedType = qualifyingType;"]}], "num": 19859}
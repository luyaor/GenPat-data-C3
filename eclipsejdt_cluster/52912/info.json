{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2518513a04a71a76554bbed5eced516", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "563df3e4613cde083ab9cac1e3d6ce63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "1209010fd2d01b73be2d5ddcc68dee954a4dfb12", "commitAfterChange": "e2d64401ee163038583789c4f8e64653502b280a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \r \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": "\r \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["-\r", "-\r", "-\r", "-\t\t\t// if the binding declaring class is not visible, need special action\r", "-\t\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding\r", "-\t\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type\r", "-\t\t\tFieldBinding fieldBinding = (FieldBinding) binding;\r", "-\t\t\tif (fieldBinding.declaringClass != this.actualReceiverType\r", "-\t\t\t\t&& !this.actualReceiverType.isArrayType()\t\t\t\r", "-\t\t\t\t&& fieldBinding.declaringClass != null\r", "-\t\t\t\t&& fieldBinding.constant == NotAConstant\r", "-\t\t\t\t&& ((scope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "-\t\t\t\t\t\t&& (indexOfFirstFieldBinding > 1 || !fieldBinding.isStatic())\r", "-\t\t\t\t\t\t&& fieldBinding.declaringClass.id != T_Object)\r", "-\t\t\t\t\t|| !fieldBinding.declaringClass.canBeSeenBy(scope))){\r", "-\t\t\t\tbinding = new FieldBinding(fieldBinding, (ReferenceBinding)this.actualReceiverType);\r", "-\t\t\t}\r", "-\r", "-\r", "-\t\totherBindings = new FieldBinding[otherBindingsLength];\r", "+\t\totherCodegenBindings = otherBindings = new FieldBinding[otherBindingsLength];\r", "-\r", "-\t\t\t\t\r", "-\t\t\t\t// if the binding declaring class is not visible, need special action\r", "-\t\t\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding\r", "-\t\t\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type\r", "-\t\t\t\tif (field.declaringClass != type\r", "-\t\t\t\t\t&& !this.actualReceiverType.isArrayType()\t\t\t\t\r", "-\t\t\t\t\t&& field.declaringClass != null // array.length\r", "-\t\t\t\t\t&& field.constant == NotAConstant\r", "-\t\t\t\t\t&& ((scope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "-\t\t\t\t\t\t\t&& field.declaringClass.id != T_Object) //no change for Object fields (in case there was)\r", "-\t\t\t\t\t\t|| !field.declaringClass.canBeSeenBy(scope))){\r", "-\t\t\t\t\totherBindings[place] = new FieldBinding(field, (ReferenceBinding) type);\r", "-\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "631c7eb9844dfb8cb3e5b3aabc4cea95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "caf7e000b252004e771c897e0eb1bc8ff720d879", "commitAfterChange": "a120c3eba1289fa5bdc2d2b34c4bf1b18bf73e31", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["+\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type\t\t\r", "-\t\t\tif (fieldBinding.declaringClass != null\r", "+\t\t\tif (fieldBinding.declaringClass != this.actualReceiverType\r", "+\t\t\t\t&& fieldBinding.declaringClass != null\r", "-\t\t\t\t&& !fieldBinding.declaringClass.canBeSeenBy(scope))\r", "-\t\t\t\t\tbinding = new FieldBinding(fieldBinding, (ReferenceBinding) delegateThis.type);\r", "+\t\t\t\t&& (scope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "+\t\t\t\t\t|| !fieldBinding.declaringClass.canBeSeenBy(scope))){\r", "+\t\t\t\tbinding = new FieldBinding(fieldBinding, (ReferenceBinding)this.actualReceiverType);\r", "+\t\t\t}\r", "-\t\t\tif (fieldBinding.declaringClass != null\r", "+\t\t\tif (fieldBinding.declaringClass != delegateThis.type\r", "+\t\t\t\t&& fieldBinding.declaringClass != null\r", "-\t\t\t\t&& !localScope.canBeSeenByForCodeSnippet(fieldBinding.declaringClass, (ReferenceBinding) delegateThis.type))\r", "+\t\t\t\t&& (scope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\t\t\t\t\r", "+\t\t\t\t\t|| !localScope.canBeSeenByForCodeSnippet(fieldBinding.declaringClass, (ReferenceBinding) delegateThis.type))) {\r", "+\t\t\t}\r", "+\t\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type\t\t\t\r", "-\t\t\t\t\t&& !field.declaringClass.canBeSeenBy(scope))\r", "+\t\t\t\t\t&& (scope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\t\t\t\t\t\r", "+\t\t\t\t\t\t|| !field.declaringClass.canBeSeenBy(scope))) {\r", "+\t\t\t\t}\r", "-\t\t\t\t\t&& !localScope.canBeSeenByForCodeSnippet(field.declaringClass, (ReferenceBinding) delegateThis.type))\r", "-\t\t\t\t\t\totherBindings[place] = new FieldBinding(field, (ReferenceBinding)type);\r", "+\t\t\t\t\t&& (scope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "+\t\t\t\t\t\t|| !localScope.canBeSeenByForCodeSnippet(field.declaringClass, (ReferenceBinding) delegateThis.type))){\r", "+\t\t\t\t\totherBindings[place] = new FieldBinding(field, (ReferenceBinding)type);\r", "+\t\t\t\t}\r"]}], "num": 52912}
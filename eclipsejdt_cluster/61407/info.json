{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d2949655ae6a03c347c2bcb77e209639", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1664dc66121d765477b8cbc0ff51a641", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java", "commitBeforeChange": "8913fe5c78a14de5e97c4d6b801f5ed8424bf8a8", "commitAfterChange": "1a3b48d65ad279de125b447111e271aa71010c38", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic CaptureBinding(WildcardBinding wildcard, ReferenceBinding sourceType, int position, int captureID)", "signatureAfterChange": "  \tpublic CaptureBinding(WildcardBinding wildcard, ReferenceBinding sourceType, int position, int captureID)", "diff": ["-\t\t\tsetTypeAnnotations(wildcard.getTypeAnnotations(), wildcard.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled);", "+\t\t\t// register an unannoted version before adding the annotated wildcard:", "+\t\t\tCaptureBinding unannotated = (CaptureBinding) clone(null);", "+\t\t\tunannotated.wildcard = (WildcardBinding) this.wildcard.unannotated();", "+\t\t\tthis.environment.getUnannotatedType(unannotated);", "+\t\t\tthis.id = unannotated.id; // transfer fresh id", "+\t\t\t// now register this annotated type:", "+\t\t\tthis.environment.typeSystem.cacheDerivedType(this, unannotated, this);", "+\t\t\t// propagate from wildcard to capture - use super version, because our own method propagates type annotations in the opposite direction:", "+\t\t\tsuper.setTypeAnnotations(wildcard.getTypeAnnotations(), wildcard.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70c507c04a081b64a5ea217eeca99f74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "b62a0575eabeb814900afcc3426a14b0da5fd6ad", "commitAfterChange": "fa4debd5be46821e4afe7fa2082f7a976e89007c", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \t \tpublic void setTypeAnnotations(AnnotationBinding[] annotations, boolean evalNullAnnotations)", "signatureAfterChange": " \t \tpublic void setTypeAnnotations(AnnotationBinding[] annotations, boolean evalNullAnnotations)", "diff": ["-\t\tthis.environment.getUnannotatedType(this); // exposes original TVB/capture to type system for id stamping purposes.", "+\t\tif (getClass() == TypeVariableBinding.class) {", "+\t\t\t// TVB only: if the declaration already carries type annotations,", "+\t\t\t// clone the unannotated binding first to ensure TypeSystem.getUnnanotatedType() will see it at position 0:", "+\t\t\tTypeBinding unannotated = clone(null);", "+\t\t\tthis.environment.getUnannotatedType(unannotated); // register unannotated", "+\t\t\tthis.id = unannotated.id; // transfer fresh id", "+\t\t\tthis.environment.typeSystem.cacheDerivedType(this, unannotated, this); // register this", "+\t\t} else {", "+\t\t\tthis.environment.getUnannotatedType(this); // exposes original TVB/capture to type system for id stamping purposes.", "+\t\t}"]}], "num": 61407}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a6de4ce485daaca1d9a1de0ee5953bb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bf6c75fe6ee1ed9739df323624f064b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Requestor.java", "commitBeforeChange": "9ca5fa129e003b71c76c933d9b76010e0a23b71b", "commitAfterChange": "d86670742691fd07e39a2dd80f7e11e37621edc5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void acceptResult(CompilationResult compilationResult)", "signatureAfterChange": " public void acceptResult(CompilationResult compilationResult)", "diff": ["-\t\t\tif (problems[i] != null) {", "+\t\t\tDefaultProblem problem = (DefaultProblem) problems[i];", "+\t\t\tif (problem != null) {", "-\t\t\t\tbuffer.append(problemCount + (problems[i].isError() ? \". ERROR\" : \". WARNING\"));", "-\t\t\t\tbuffer.append(\" in \" + new String(problems[i].getOriginatingFileName()).replace('/', '\\\\'));", "+\t\t\t\tbuffer.append(problemCount + (problem.isError() ? \". ERROR\" : \". WARNING\"));", "+\t\t\t\tbuffer.append(\" in \" + new String(problem.getOriginatingFileName()).replace('/', '\\\\'));", "-\t\t\t\t\tbuffer.append(((DefaultProblem)problems[i]).errorReportSource(unitSource));", "+\t\t\t\t\tbuffer.append(problem.errorReportSource(unitSource));", "-\t\t\t\t\tbuffer.append(problems[i].getMessage());", "+\t\t\t\t\tif (showCategory) {", "+\t\t\t\t\t\tString category = problem.getInternalCategoryMessage();", "+\t\t\t\t\t\tif (category != null) {", "+\t\t\t\t\t\t\tbuffer.append(\"[@cat:\").append(category).append(\"] \");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (showWarningToken) {", "+\t\t\t\t\t\tlong irritant = ProblemReporter.getIrritant(problem.getID());", "+\t\t\t\t\t\tif (irritant != 0) {", "+\t\t\t\t\t\t\tString warningToken = CompilerOptions.warningTokenFromIrritant(irritant);", "+\t\t\t\t\t\t\tif (warningToken != null) {", "+\t\t\t\t\t\t\t\tbuffer.append(\"[@sup:\").append(warningToken).append(\"] \");", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tbuffer.append(problem.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8ee0b7e15aaeae9fdab264ccd5d9f73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Requestor.java", "commitBeforeChange": "1505d6b4655f1428d6059c29c9d919c21116a2ec", "commitAfterChange": "99b76fba5f0312d772156ff14654849bf056608a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void acceptResult(CompilationResult compilationResult)", "signatureAfterChange": " public void acceptResult(CompilationResult compilationResult)", "diff": ["-\tStringBuffer buffer = new StringBuffer(100);", "-\thasErrors |= compilationResult.hasErrors();", "-\tif (compilationResult.hasProblems() || compilationResult.hasTasks()) {", "-\t\tCategorizedProblem[] problems = compilationResult.getAllProblems();", "-\t\tint count = problems.length;", "-\t\tint problemCount = 0;", "-\t\tchar[] unitSource = compilationResult.compilationUnit.getContents();", "-\t\tfor (int i = 0; i < count; i++) { ", "-\t\t\tDefaultProblem problem = (DefaultProblem) problems[i];", "-\t\t\tif (problem != null) {", "-\t\t\t\tif (problemCount == 0)", "-\t\t\t\t\tbuffer.append(\"----------\\n\");", "-\t\t\t\tproblemCount++;", "-\t\t\t\tbuffer.append(problemCount + (problem.isError() ? \". ERROR\" : \". WARNING\"));", "-\t\t\t\tbuffer.append(\" in \" + new String(problem.getOriginatingFileName()).replace('/', '\\\\'));", "-\t\t\t\ttry {", "-\t\t\t\t\tbuffer.append(problem.errorReportSource(unitSource));", "-\t\t\t\t\tbuffer.append(\"\\n\");", "-\t\t\t\t\tif (showCategory) {", "-\t\t\t\t\t\tString category = problem.getInternalCategoryMessage();", "-\t\t\t\t\t\tif (category != null) {", "-\t\t\t\t\t\t\tbuffer.append(\"[@cat:\").append(category).append(\"] \");", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (showWarningToken) {", "-\t\t\t\t\t\tlong irritant = ProblemReporter.getIrritant(problem.getID());", "-\t\t\t\t\t\tif (irritant != 0) {", "-\t\t\t\t\t\t\tString warningToken = CompilerOptions.warningTokenFromIrritant(irritant);", "-\t\t\t\t\t\t\tif (warningToken != null) {", "-\t\t\t\t\t\t\t\tbuffer.append(\"[@sup:\").append(warningToken).append(\"] \");", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tbuffer.append(problem.getMessage());", "-\t\t\t\t\tbuffer.append(\"\\n\");", "-\t\t\t\t} catch (Exception e) {", "-\t\t\t\t}", "-\t\t\t\tbuffer.append(\"----------\\n\");", "-\t\t\t}", "-\t\t}", "-\t\tproblemLog += buffer.toString();", "-\t}", "+\tthis.hasErrors |= compilationResult.hasErrors();", "+\tthis.problemLog += Util.getProblemLog(compilationResult, this.showCategory, this.showWarningToken);"]}], "num": 70762}
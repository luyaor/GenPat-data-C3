{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec09b63d8df6641e3469113debcf69b0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f2078cade10672d15274a8c858fe541", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "bea7b508525f70d680963772996546f2bcf8018f", "commitAfterChange": "6612336f81825afdf894aa053e2e886c83842e87", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " \tpublic void test422134()", "signatureAfterChange": " \tpublic void test422134()", "diff": ["+\t\t\t\"\t\t\treturn o1.compareToIgnoreCase(o1);\\n\" + ", "+\t\t\t\"\t\t});\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation sort(ArrayList, (<no type> o1, <no type> o2) -> {\\n\" + ", "+\t\t\t\"  return o1.compareToIgnoreCase(o1);\\n\" + ", "+\t\t\t\"}) of the generic method sort(List<T>, Comparator<? super T>) of type Collections\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tCollections.sort(new ArrayList(), (o1, o2) -> {\\n\" + ", "+\t\t\t\"\t                 ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type ArrayList needs unchecked conversion to conform to List<Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tCollections.sort(new ArrayList(), (o1, o2) -> {\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 6)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0571d9d2b549dda0d0a524858ccf832", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "3307a3b21f8472cc998512e9e4cd5afdd4f17b52", "commitAfterChange": "b155f47580a90f694a899aae6d06a1ff29f450b8", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": " public void test0300_if_else()", "signatureAfterChange": " public void test0300_if_else()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 13)\\n\" +", "-\t\t\"\to.toString();\\n\" +", "-\t\t\"\t^\\n\" +", "-\t\t\"Null pointer access: The variable o can only be null at this location\\n\" +", "-\t\t\"----------\\n\",", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tif (false) {\\n\" + ", "+\t\t\t\"      o = new Object();\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Dead code\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\telse {\\n\" + ", "+\t\t\t\"      o = new Object();\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Dead code\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\t\"\to.toString();\\n\" + ", "+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"Null pointer access: The variable o can only be null at this location\\n\" + ", "+\t\t\t\"----------\\n\","]}], "num": 42483}
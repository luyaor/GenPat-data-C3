{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a12da430db33b0aa97dfdb6c4b55b41", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b2e05361eb2fdd4f739dd3d502c38e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FinallyFlowContext.java", "commitBeforeChange": "85b2cfd04e83239095fec1009e8fcb37543a6bed", "commitAfterChange": "a825a712d9a7173d7e7cfae42a0058bb2e0b5bb5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void complainOnRedundantFinalAssignments( \t\tFlowInfo flowInfo, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic void complainOnRedundantFinalAssignments( \t\tFlowInfo flowInfo, \t\tBlockScope scope)", "diff": ["-\t\t\tReference ref;", "-\t\t\tif (((ref = finalAssignments[i]).bits & BindingIds.FIELD) != 0) {", "+\t\t\tVariableBinding variable = finalVariables[i];", "+\t\t\tif (variable == null) continue;", "+\t\t\t", "+\t\t\tboolean complained = false; // remember if have complained on this final assignment", "+\t\t\tif (variable instanceof FieldBinding) {", "-\t\t\t\tif (flowInfo.isPotentiallyAssigned(ref.fieldBinding())) {", "-\t\t\t\t\tscope.problemReporter().duplicateInitializationOfBlankFinalField(ref.fieldBinding(), ref);", "+\t\t\t\tif (flowInfo.isPotentiallyAssigned((FieldBinding)variable)) {", "+\t\t\t\t\tcomplained = true;", "+\t\t\t\t\tscope.problemReporter().duplicateInitializationOfBlankFinalField((FieldBinding)variable, finalAssignments[i]);", "-\t\t\t\tif (flowInfo", "-\t\t\t\t\t.isPotentiallyAssigned((LocalVariableBinding) ((NameReference) ref).binding)) {", "+\t\t\t\tif (flowInfo.isPotentiallyAssigned((LocalVariableBinding) variable)) {", "+\t\t\t\t\tcomplained = true;", "-\t\t\t\t\t\t(LocalVariableBinding) ((NameReference) ref).binding,", "-\t\t\t\t\t\t(NameReference) ref);", "+\t\t\t\t\t\t(LocalVariableBinding) variable,", "+\t\t\t\t\t\tfinalAssignments[i]);", "-\t\t\tFlowContext currentContext = parent;", "-\t\t\twhile (currentContext != null) {", "-\t\t\t\tif (currentContext.isSubRoutine()) {", "-\t\t\t\t\tcurrentContext.removeFinalAssignmentIfAny(ref);", "+\t\t\tif (complained) {", "+\t\t\t\tFlowContext currentContext = parent;", "+\t\t\t\twhile (currentContext != null) {", "+\t\t\t\t\t//if (currentContext.isSubRoutine()) {", "+\t\t\t\t\tcurrentContext.removeFinalAssignmentIfAny(finalAssignments[i]);", "+\t\t\t\t\t//}", "+\t\t\t\t\tcurrentContext = currentContext.parent;", "-\t\t\t\tcurrentContext = currentContext.parent;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81cf227be22a03dc8e40d7ed5981d376", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "100013bece0eb4f533563100e2e2c492eafe5eed", "commitAfterChange": "a836581cacf8d7a555ca92aa4df554df081b1e09", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 151, "signatureBeforeChange": " \t \tprotected void setTypeNameForAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation compilerAnnotation, Annotation annotation)", "signatureAfterChange": " \t \tprotected void setTypeNameForAnnotation(org.eclipse.jdt.internal.compiler.ast.Annotation compilerAnnotation, Annotation annotation)", "diff": ["-\t\tchar[][] typeName = compilerAnnotation.tokens;", "-\t\tint length = typeName.length;", "-\t\tName name = null;", "-\t\tif (length > 1) {", "+\t\tTypeReference typeReference = compilerAnnotation.type;", "+\t\tName name;", "+\t\tif (typeReference instanceof QualifiedTypeReference) {", "+\t\t\tQualifiedTypeReference qualifiedTypeReference = (QualifiedTypeReference) typeReference;", "+\t\t\tchar[][] tokens = qualifiedTypeReference.tokens;", "+\t\t\tlong[] positions = qualifiedTypeReference.sourcePositions;", "-\t\t\tname = setQualifiedNameNameAndSourceRanges(typeName, compilerAnnotation.sourcePositions, compilerAnnotation);", "+\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, compilerAnnotation);", "-\t\t\tname = this.ast.newSimpleName(new String(typeName[0]));", "-\t\t\tlong position = compilerAnnotation.sourcePositions[0];", "-\t\t\tint start = (int) (position >>> 32);", "-\t\t\tint end = (int) position;", "+\t\t\tSingleTypeReference singleTypeReference = (SingleTypeReference) typeReference;", "+\t\t\tname = this.ast.newSimpleName(new String(singleTypeReference.token));", "+\t\t\tint start = singleTypeReference.sourceStart;", "+\t\t\tint end = singleTypeReference.sourceEnd;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f83288fe57dc9b7ea4edb020ead7ed2e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "cf072eeff121940a541295553114f490c9a9bb69", "commitAfterChange": "9617178877607b049b1a7c4f92c93a8d11facd28", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic boolean visit(Argument argument, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(Argument argument, BlockScope scope)", "diff": ["-\t\tif (argument.type != null) {", "-\t\t\tif (argument.type instanceof UnionTypeReference) {", "+\t\tTypeReference argumentType = argument.type;", "+\t\tif (argumentType != null) {", "+\t\t\tif (argumentType instanceof UnionTypeReference) {", "-\t\t\t\targument.type.traverse(this, scope);", "+\t\t\t\targumentType.traverse(this, scope);", "+\t\t\tAnnotation [][] annotationsOnDimensions = argumentType.getAnnotationsOnDimensions();", "+\t\t\tif (annotationsOnDimensions != null) {", "+\t\t\t\tAnnotation [] varargAnnotations = annotationsOnDimensions[annotationsOnDimensions.length - 1];", "+\t\t\t\tif (varargAnnotations != null) {", "+\t\t\t\t\tformatInlineAnnotations(varargAnnotations, true);", "+\t\t\t\t}", "+\t\t\t}", "-", "-\t\t/*", "-\t\t * Check for extra dimensions", "-\t\t */", "-\t\tint extraDimensions = getDimensions();", "-\t\tif (extraDimensions != 0) {", "-\t\t\t for (int i = 0; i < extraDimensions; i++) {", "-\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "-\t\t\t \tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "-\t\t\t }", "-\t\t}", "-", "+\t\tformatExtraDimensions(argumentType);"]}], "num": 5936}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3599df405fda3830d1c6d378bcb26b4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b0e1d27ba840e9988425196f0396011", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "8aafce61e7410d4bb8f6ef8997fff5b6f73c246f", "commitAfterChange": "4a0e763ec848dfb4aae74e117447af4a67fb4eec", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic IJavaElement getJavaElement()", "signatureAfterChange": " \t \tpublic IJavaElement getJavaElement()", "diff": ["-", "+\t", "+\t\tJavaElement element = getUnresolvedJavaElement();", "+\t\tif (element == null)", "+\t\t\treturn null;", "+\t\treturn element.resolved(this.binding);", "+\t}", "-\t\t\t\treturn declaringType.getMethod(getName(), parameters);", "-\t\t\t\treturn declaringType.getMethod(typeMemberDeclaration.getName().getIdentifier(), new String[0]); // annotation type members don't have parameters", "-\t\t\t\treturn result;", "-\t\t\treturn candidates[0];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d9e8e0c49ed86d8dae18a8eb163636f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "ee446c21d0aaa4f4c4b0513ad11960ed53ccba7d", "commitAfterChange": "271be052e104f1beefee4cd78039eca6ee6adb4f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate JavaElement getUnresolvedJavaElement()", "signatureAfterChange": "  \tprivate JavaElement getUnresolvedJavaElement()", "diff": ["-\t\tIType declaringType = (IType) getDeclaringClass().getJavaElement();", "-\t\tif (declaringType == null) return null;", "-\t\tASTNode node = (ASTNode) ((DefaultBindingResolver) this.resolver).bindingsToAstNodes.get(this);", "-\t\tif (node != null && declaringType.getParent().getElementType() != IJavaElement.CLASS_FILE) {", "-\t\t\tif (node instanceof MethodDeclaration) {", "-\t\t\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) node;", "-\t\t\t\tArrayList parameterSignatures = new ArrayList();", "-\t\t\t\tIterator iterator = methodDeclaration.parameters().iterator();", "-\t\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\t\tSingleVariableDeclaration parameter = (SingleVariableDeclaration) iterator.next();", "-\t\t\t\t\tType type = parameter.getType();", "-\t\t\t\t\tString typeSig = Util.getSignature(type);", "-\t\t\t\t\tint arrayDim = parameter.getExtraDimensions();", "-\t\t\t\t\tif (parameter.getAST().apiLevel() >= AST.JLS3 && parameter.isVarargs()) {", "-\t\t\t\t\t\tarrayDim++;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (arrayDim > 0) {", "-\t\t\t\t\t\ttypeSig = Signature.createArraySignature(typeSig, arrayDim);", "-\t\t\t\t\t}", "-\t\t\t\t\tparameterSignatures.add(typeSig);", "-\t\t\t\t}", "-\t\t\t\tint parameterCount = parameterSignatures.size();", "-\t\t\t\tString[] parameters = new String[parameterCount];", "-\t\t\t\tparameterSignatures.toArray(parameters);", "-\t\t\t\treturn (JavaElement) declaringType.getMethod(getName(), parameters);", "-\t\t\t} else {", "-\t\t\t\t// annotation type member declaration", "-\t\t\t\tAnnotationTypeMemberDeclaration typeMemberDeclaration = (AnnotationTypeMemberDeclaration) node;", "-\t\t\t\treturn (JavaElement) declaringType.getMethod(typeMemberDeclaration.getName().getIdentifier(), CharOperation.NO_STRINGS); // annotation type members don't have parameters", "-\t\t\t}", "-\t\t} else {", "-\t\t\t// case of method not in the created AST, or a binary method", "-\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding original = this.binding.original();", "-\t\t\tString selector = original.isConstructor() ? declaringType.getElementName() : new String(original.selector);", "-\t\t\tboolean isBinary = declaringType.isBinary();", "-\t\t\tReferenceBinding enclosingType = original.declaringClass.enclosingType();", "-\t\t\tboolean isInnerBinaryTypeConstructor = isBinary && original.isConstructor() && enclosingType != null;", "-\t\t\tTypeBinding[] parameters = original.parameters;", "-\t\t\tint length = parameters == null ? 0 : parameters.length;", "-\t\t\tint declaringIndex = isInnerBinaryTypeConstructor ? 1 : 0;", "-\t\t\tString[] parameterSignatures = new String[declaringIndex + length];", "-\t\t\tif (isInnerBinaryTypeConstructor)", "-\t\t\t\tparameterSignatures[0] = new String(enclosingType.genericTypeSignature()).replace('/', '.');", "-\t\t\tfor (int i = 0;  i < length; i++) {", "-\t\t\t\tparameterSignatures[declaringIndex + i] = new String(parameters[i].genericTypeSignature()).replace('/', '.');", "-\t\t\t}", "-\t\t\tIMethod result = declaringType.getMethod(selector, parameterSignatures);", "-\t\t\tif (isBinary)", "-\t\t\t\treturn (JavaElement) result;", "-\t\t\tIMethod[] methods = null;", "-\t\t\ttry {", "-\t\t\t\tmethods = declaringType.getMethods();", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// declaring type doesn't exist", "-\t\t\t\treturn null;", "-\t\t\t}", "-\t\t\tIMethod[] candidates = Member.findMethods(result, methods);", "-\t\t\tif (candidates == null || candidates.length == 0)", "-\t\t\t\treturn null;", "-\t\t\treturn (JavaElement) candidates[0];", "-\t\t}", "+\t\t", "+\t\tDefaultBindingResolver defaultBindingResolver = (DefaultBindingResolver) this.resolver;", "+\t\treturn Util.getUnresolvedJavaElement(", "+\t\t\t\tthis.binding,", "+\t\t\t\tdefaultBindingResolver.workingCopyOwner,", "+\t\t\t\tdefaultBindingResolver.getBindingsToNodesMap());"]}], "num": 4753}
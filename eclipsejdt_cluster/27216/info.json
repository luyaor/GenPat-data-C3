{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e4f28bf13c46b7c8f0a7a69410536c7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39021bfbe705c332900bee6d68fc0d6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic static boolean resolvePolyExpressionArguments(BlockScope scope, MethodBinding methodBinding, Expression [] arguments, TypeBinding[] argumentTypes)", "signatureAfterChange": " \tpublic static boolean resolvePolyExpressionArguments(Invocation invocation, BlockScope scope, MethodBinding methodBinding, TypeBinding[] argumentTypes)", "diff": ["-\tpublic static boolean resolvePolyExpressionArguments(BlockScope scope, MethodBinding methodBinding, Expression [] arguments, TypeBinding[] argumentTypes) {", "-\t\tboolean polyExpressionsHaveErrors = false;", "+\t */", "+\tpublic static boolean resolvePolyExpressionArguments(Invocation invocation, BlockScope scope, MethodBinding methodBinding, TypeBinding[] argumentTypes) {", "+\t\tint problemReason = 0;", "+\t\t\tproblemReason = methodBinding.problemId();", "+\t\tboolean hasUpdatedInner = false;", "+\t\t\tExpression [] arguments = invocation.arguments();", "-\t\t\t\tif (argumentTypes[i] instanceof PolyTypeBinding) {", "-\t\t\t\t\tExpression argument = arguments[i];", "-\t\t\t\t\tTypeBinding parameterType = i < parametersLength ? parameters[i] : variableArity ? parameters[parametersLength - 1] : null;", "-\t\t\t\t\targument.setExpressionContext(parameterType != null ? ExpressionContext.INVOCATION_CONTEXT: ExpressionContext.ASSIGNMENT_CONTEXT); // force the errors to surface.", "-\t\t\t\t\tif (variableArity && i >= parametersLength - 1)", "-\t\t\t\t\t\targument.tagAsEllipsisArgument();", "-\t\t\t\t\targument.setExpectedType(parameterType);", "-\t\t\t\t\tTypeBinding argumentType = argument.resolveType(scope);", "-\t\t\t\t\tif (argumentType == null || !argumentType.isValidBinding())", "-\t\t\t\t\t\tpolyExpressionsHaveErrors = true;", "-\t\t\t\t\tif (argument instanceof LambdaExpression && ((LambdaExpression) argument).hasErrors())", "-\t\t\t\t\t\tpolyExpressionsHaveErrors = true;", "+\t\t\t\tExpression argument = arguments[i];", "+\t\t\t\tTypeBinding parameterType = i < parametersLength ? parameters[i] : variableArity ? parameters[parametersLength - 1] : null;", "+\t\t\t\tTypeBinding updatedArgumentType = null;", "+", "+\t\t\t\tif (variableArity && i >= parametersLength - 1)", "+\t\t\t\t\targument.tagAsEllipsisArgument();", "+\t\t\t\tupdatedArgumentType = updateExpression(scope, argument, argumentTypes[i], parameterType, invocation.hasInferenceFinished());", "+\t\t\t\tif (updatedArgumentType == POLY_ERROR) //$IDENTITY-COMPARISON$", "+\t\t\t\t\tcontinue; // don't update if inner poly has errors", "+\t\t\t\tif (problemReason != ProblemReasons.Ambiguous \t// preserve this error", "+\t\t\t\t\t\t&& updatedArgumentType != null\t\t\t\t\t// do we have a relevant update? ...", "+\t\t\t\t\t\t&& !(updatedArgumentType instanceof PolyTypeBinding)", "+\t\t\t\t\t\t&& TypeBinding.notEquals(updatedArgumentType, argumentTypes[i]))", "+\t\t\t\t{", "+\t\t\t\t\t// update the argumentTypes array (supposed to be owned by the calling method)", "+\t\t\t\t\t// in order to give better information into a second round of method lookup:", "+\t\t\t\t\targumentTypes[i] = updatedArgumentType;", "+\t\t\t\t\thasUpdatedInner = true;", "-\t\treturn polyExpressionsHaveErrors;", "+\t\treturn hasUpdatedInner;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ccb8a4bb768e79cc7924297fdbec8a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "8d1d658761d5e634e1f9986cdb54c46ecd8cbc2e", "commitAfterChange": "f4d9deb41a71301595419326392826169e31b674", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "signatureAfterChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "diff": ["-\t\t\tfor (int i = 0; i < oneParamsLength; i++) {", "+\t\t\tnext : for (int i = 0; i < oneParamsLength; i++) {", "-\t\t\t\tif (oneParam == twoParam) {", "-\t\t\t\t\tif (twoParam.leafComponentType().isRawType()) {", "-\t\t\t\t\t\t// must detect & reject this case", "-\t\t\t\t\t\t// when Y<U> extends X<U>", "-\t\t\t\t\t\t// void foo(Y y) {}", "-\t\t\t\t\t\t// <T extends X<Object>> void foo(T t) {}", "-\t\t\t\t\t\t// foo(T) will show up as foo(Y#RAW) and not foo(X#RAW)", "-\t\t\t\t\t\t// Y#RAW is not more specific than a rawified X<T>", "-\t\t\t\t\t\tTypeBinding originalOneParam = one.original().parameters[i].leafComponentType();", "-\t\t\t\t\t\tif ((originalOneParam.isTypeVariable() ? ((TypeVariableBinding) originalOneParam).upperBound()", "-\t\t\t\t\t\t\t\t: originalOneParam).isRawType())", "-\t\t\t\t\t\t\tif (twoParam.leafComponentType().erasure() != two.original().parameters[i]", "-\t\t\t\t\t\t\t\t\t.leafComponentType().erasure())", "-\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\t} else if (oneParam.isCompatibleWith(twoParam)) {", "-\t\t\t\t\tif (oneParam.leafComponentType().isRawType()) {", "-\t\t\t\t\t\tif (oneParam.needsUncheckedConversion(twoParam))", "-\t\t\t\t\t\t\tif (oneParam.leafComponentType().erasure() != twoParam.leafComponentType().erasure())", "-\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\tif (oneParam == twoParam || oneParam.isCompatibleWith(twoParam)) {", "+\t\t\t\t\tif (two.declaringClass.isRawType()) continue next;", "+", "+\t\t\t\t\tTypeBinding originalOneParam = one.original().parameters[i].leafComponentType();", "+\t\t\t\t\tswitch (originalOneParam.kind()) {", "+\t\t\t\t\t   \tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\t   \t\tif (!((TypeVariableBinding) originalOneParam).upperBound().isRawType()) break;", "+\t\t\t\t\t   \t\t//$FALL-THROUGH$", "+\t\t\t\t\t   \tcase Binding.RAW_TYPE:", "+\t\t\t\t\t   \t\t// originalOneParam is RAW so it cannot be more specific than a wildcard or parameterized type", "+\t\t\t\t\t\t\tTypeBinding originalTwoParam = two.original().parameters[i].leafComponentType();", "+\t\t\t\t\t\t\tswitch (originalTwoParam.kind()) {", "+\t\t\t\t\t\t\t   \tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\t\t\t   \t\tif (((TypeVariableBinding) originalTwoParam).hasOnlyRawBounds())", "+\t\t\t\t\t\t\t\t   \t\tcontinue next;", "+\t\t\t\t\t\t\t\t   \treturn false;", "+\t\t\t\t\t\t\t   \tcase Binding.WILDCARD_TYPE :", "+\t\t\t\t\t\t\t   \tcase Binding.INTERSECTION_TYPE:", "+\t\t\t\t\t\t\t   \tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\t\t\t\t   \t\treturn false;", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn true; // special case to choose between 2 varargs methods when the last arg is", "-\t\t\t\t\t\t\t\t\t\t\t// Object[]", "+\t\t\t\t\t\t\treturn true; // special case to choose between 2 varargs methods when the last arg is Object[]", "-\t\t\t\t// special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or", "-\t\t\t\t// (Integer, int...)", "+\t\t\t\t// special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or (Integer, int...)"]}], "num": 27216}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cce436c48d28445a1a1999185b9ab82d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c115973ce843e2e42c275815fdedfb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "ef3c2078d9cee48378a186a3e9a6e61cb6a67acc", "commitAfterChange": "18c98a5a751096350077436fcf968eb63364ccb9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-", "-\t\t} else if (((ReferenceBinding) receiverType).isFinal()) {", "-\t\t\tif (this.anonymousType != null) {", "-\t\t\t\tif (!receiverType.isEnum()) {", "-\t\t\t\t\tscope.problemReporter().anonymousClassCannotExtendFinalClass(this.type, receiverType);", "-\t\t\t\t\thasError = true;", "-\t\t\t\t}", "-\t\t\t} else if (!receiverType.canBeInstantiated()) {", "-\t\t\t\tscope.problemReporter().cannotInstantiate(this.type, receiverType);", "-\t\t\t\treturn this.resolvedType = receiverType;", "-\t\t\t}", "+\t\t\t\tReferenceBinding referenceReceiver = (ReferenceBinding) receiverType;", "-\t\t\t\tthis.binding = scope.findMethod((ReferenceBinding) receiverType, TypeConstants.INIT, pseudoArgs, this);", "+\t\t\t\tthis.binding = scope.findMethod(referenceReceiver, TypeConstants.INIT, pseudoArgs, this);", "-\t\t\t\t", "+\t\t\t\tif (this.anonymousType != null) {", "+\t\t\t\t\t// insert anonymous type in scope (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=210070)", "+\t\t\t\t\tscope.addAnonymousType(this.anonymousType, referenceReceiver);", "+\t\t\t\t\tthis.anonymousType.resolve(scope);", "+\t\t\t\t\treturn this.resolvedType = this.anonymousType.binding;", "+\t\t\t\t}", "-", "-\t\tif (receiverType.isTypeVariable()) {", "-\t\t\treceiverType = new ProblemReferenceBinding(receiverType.sourceName(), (ReferenceBinding)receiverType, ProblemReasons.IllegalSuperTypeVariable);", "-\t\t\tscope.problemReporter().invalidType(this, receiverType);", "+\t\tReferenceBinding superType = (ReferenceBinding) receiverType;", "+\t\tif (superType.isTypeVariable()) {", "+\t\t\tsuperType = new ProblemReferenceBinding(superType.sourceName(), superType, ProblemReasons.IllegalSuperTypeVariable);", "+\t\t\tscope.problemReporter().invalidType(this, superType);", "-\t\t} else if (this.type != null && receiverType.isEnum()) { // tolerate enum constant body", "-\t\t\tscope.problemReporter().cannotInstantiate(this.type, receiverType);", "-\t\t\treturn this.resolvedType = receiverType;", "+\t\t} else if (this.type != null && superType.isEnum()) { // tolerate enum constant body", "+\t\t\tscope.problemReporter().cannotInstantiate(this.type, superType);", "+\t\t\treturn this.resolvedType = superType;", "-\t\tthis.superTypeBinding = receiverType.isInterface() ? scope.getJavaLangObject() : (ReferenceBinding) receiverType;", "+\t\tReferenceBinding anonymousSuperclass = superType.isInterface() ? scope.getJavaLangObject() : superType;", "-\t\tscope.addAnonymousType(this.anonymousType, (ReferenceBinding) receiverType);", "-\t\tthis.anonymousType.resolve(scope);\t\t", "-\t\tif (this.superTypeBinding.erasure().id == TypeIds.T_JavaLangEnum) {", "-\t\t\tscope.problemReporter().cannotExtendEnum(this.anonymousType.binding, this.type, this.superTypeBinding);", "-\t\t}", "-\t\t", "-\t\tif ((receiverType.tagBits & TagBits.HasDirectWildcard) != 0) {", "-\t\t\tscope.problemReporter().superTypeCannotUseWildcard(this.anonymousType.binding, this.type, receiverType);", "-\t\t}\t\t", "+\t\tscope.addAnonymousType(this.anonymousType, superType);", "+\t\tthis.anonymousType.resolve(scope);\t", "+\t\t\t", "-\t\tMethodBinding inheritedBinding = scope.getConstructor(this.superTypeBinding, argumentTypes, this);", "+\t\tthis.resolvedType = this.anonymousType.binding; // 1.2 change", "+\t\tif ((this.resolvedType.tagBits & TagBits.HierarchyHasProblems) != 0) {", "+\t\t\treturn null; // stop secondary errors", "+\t\t}", "+\t\tMethodBinding inheritedBinding = scope.getConstructor(anonymousSuperclass, argumentTypes, this);", "-\t\t\t\tinheritedBinding.declaringClass = this.superTypeBinding;", "+\t\t\t\tinheritedBinding.declaringClass = anonymousSuperclass;", "-\t\t\treturn this.resolvedType = this.anonymousType.binding;", "+\t\t\treturn this.resolvedType;", "-\t\t\t\tscope.problemReporter().unnecessaryEnclosingInstanceSpecification(this.enclosingInstance, (ReferenceBinding)receiverType);", "-\t\t\t\treturn this.resolvedType = this.anonymousType.binding;", "+\t\t\t\tscope.problemReporter().unnecessaryEnclosingInstanceSpecification(this.enclosingInstance, superType);", "+\t\t\t\treturn this.resolvedType;", "-\t\t\t\treturn this.resolvedType = this.anonymousType.binding;", "+\t\t\t\treturn this.resolvedType;", "-\t\tif (this.arguments != null)", "-\t\t\tcheckInvocationArguments(scope, null, this.superTypeBinding, inheritedBinding, this.arguments, argumentTypes, argsContainCast, this);", "-", "+\t\tif (this.arguments != null) {", "+\t\t\tcheckInvocationArguments(scope, null, anonymousSuperclass, inheritedBinding, this.arguments, argumentTypes, argsContainCast, this);", "+\t\t}", "-\t\treturn this.resolvedType = this.anonymousType.binding; // 1.2 change", "+\t\treturn this.resolvedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbab33ea9983252b5105a8b85aa0dc19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "372799d5bd955eabbf1069fe0bbf8aba8ea8af85", "commitAfterChange": "baf433f0226e8b9036b18a28d560e5a42cb8b949", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \tprivate APTResult runAPT( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv)", "signatureAfterChange": " \t \tprivate APTResult runAPT( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv)", "diff": ["-\t\t\t\t", "+\t\t\t// TODO: put the short circuit back in!!! (theodora)", "+\t\t\t/*\t\t\t", "-\t\t", "-\t\t\tfinal Map<String, AnnotationTypeDeclaration> annotationDecls = getAnnotationTypeDeclarations(", "-\t\t\t\t\tprocessorEnv.getAstCompilationUnit(), processorEnv);", "-\t\t\t", "-\t\t\tif (annotationDecls.isEmpty())", "-\t\t\t{", "-\t\t\t\tif ( AptPlugin.DEBUG ) trace( \"runAPT:  leaving early because annotationDecls is empty\" ); //$NON-NLS-1$", "-\t\t\t\treturn EMPTY_APT_RESULT;", "-\t\t\t}", "-", "+\t\t*/", "-\t\t\tSet<IFile> lastGeneratedFiles = gfm.getGeneratedFilesForParent( processorEnv.getFile() );", "-\t\t\t", "-\t\t\tfor (int i = 0, size = factories.size(); i < size; i++) {", "-\t\t\t\tfinal AnnotationProcessorFactory factory = factories.get(i);", "-\t\t\t\tSet<AnnotationTypeDeclaration> factoryDecls = getAnnotations(factory, annotationDecls);", "-\t\t\t\tboolean done = false;", "-\t\t\t\tif( factoryDecls != null ){", "-\t\t\t\t\tif(factoryDecls.size() == 0 ){", "-\t\t\t\t\t\tdone = true;", "-\t\t\t\t\t\tfactoryDecls = new HashSet(annotationDecls.values());", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (factoryDecls != null && factoryDecls.size() > 0) {", "-\t\t\t\t\tfinal AnnotationProcessor processor = factory", "-\t\t\t\t\t\t\t.getProcessorFor(factoryDecls, processorEnv);", "-\t\t\t\t\tif (processor != null)", "-\t\t\t\t\t{", "-\t\t\t\t\t\tif ( AptPlugin.DEBUG ) trace( \"runAPT: invoking processor \" + processor.getClass().getName() ); //$NON-NLS-1$", "-                        processorEnv.setLatestProcessor(processor);", "-\t\t\t\t\t\tprocessor.process();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-", "-\t\t\t\tif (annotationDecls.isEmpty() || done)", "-\t\t\t\t\tbreak;", "+\t\t\tfinal Set<IFile> lastGeneratedFiles = new HashSet<IFile>();", "+\t\t\tfor( int i=0, len=_filesToProcess.length; i<len; i++ ){", "+\t\t\t\tfinal Set<IFile> genFiles = gfm.getGeneratedFilesForParent( _filesToProcess[i] );", "+\t\t\t\tif( genFiles != null )", "+\t\t\t\t\tlastGeneratedFiles.addAll(genFiles);", "-\t\t\t// TODO: (theodora) log unclaimed annotations.", "+\t\t\t", "+\t\t\tif( shouldDispatchToBatchProcessor(factories, processorEnv) )", "+\t\t\t\trunAPTInMixedMode(factories, processorEnv);", "+\t\t\telse", "+\t\t\t\trunAPTInFileBasedMode(factories, processorEnv);", "+\t\t\t", "-\t\t\tSet<IFile> deletedFiles = cleanupNoLongerGeneratedFiles( processorEnv.getFile(), processorEnv.getCompilationUnit(), lastGeneratedFiles, allGeneratedFiles, gfm );", "+\t\t\tSet<IFile> allDeletedFiles = new HashSet<IFile>();", "+\t\t\tfor( int i=0, len=_filesToProcess.length; i<len; i++ ){", "+\t\t\t\tfinal Set<IFile> deletedFiles = ", "+\t\t\t\t\tcleanupNoLongerGeneratedFiles( _filesToProcess[i], processorEnv.getCompilationUnit(), lastGeneratedFiles, allGeneratedFiles, gfm );", "+\t\t\t\tif(deletedFiles != null )", "+\t\t\t\t\tallDeletedFiles.addAll(deletedFiles);\t\t", "+\t\t\t}", "+\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t  deletedFiles, ", "+\t\t\t\t\t\t\t\t\t\t\t  allDeletedFiles, ", "-\t\t\tAptPlugin.log(t, \"Unexpected failure running APT \" + _file); //$NON-NLS-1$", "+\t\t\tAptPlugin.log(t, \"Unexpected failure running APT \" + getFileNameForPrint()); //$NON-NLS-1$", "+\t}"]}], "num": 53589}
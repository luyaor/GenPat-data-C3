{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b3476392912880bb2725a1bf38ddf7b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28872f5c2b7858dd6ae72ca3ab03d68f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "6afa93473446fb2c6b874f92c72045670997535f", "commitAfterChange": "e9d42bfbf494b3bd89965c526aaae07d7189c12c", "methodNumberBeforeChange": 539, "methodNumberAfterChange": 539, "signatureBeforeChange": "  public void cannotImplementIncompatibleNullness(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": "  public void cannotImplementIncompatibleNullness(MethodBinding currentMethod, MethodBinding inheritedMethod, boolean showReturn)", "diff": ["-public void cannotImplementIncompatibleNullness(MethodBinding currentMethod, MethodBinding inheritedMethod) {", "+public void cannotImplementIncompatibleNullness(MethodBinding currentMethod, MethodBinding inheritedMethod, boolean showReturn) {", "-\t\t\tnew String(currentMethod.readableName()),", "+\t\t\tshowReturn ", "+\t\t\t\t? new String(currentMethod.returnType.nullAnnotatedReadableName(this.options, false))+' '", "+\t\t\t\t: \"\", //$NON-NLS-1$", "+\t\t\tnew String(currentMethod.selector),", "+\t\t\ttypesAsString(currentMethod, false, true),", "-\t\t\tnew String(currentMethod.shortReadableName()),", "+\t\t\tshowReturn ", "+\t\t\t\t? new String(currentMethod.returnType.nullAnnotatedReadableName(this.options, true))+' '", "+\t\t\t\t: \"\", //$NON-NLS-1$", "+\t\t\tnew String(currentMethod.selector),", "+\t\t\ttypesAsString(currentMethod, true, true),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "751520cc5081e7fa6792b960a2830baa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "2b810e9ce6e62d5b8f5d0b01de3fab00973de806", "commitAfterChange": "e07ac4343b59e78d96b40c4bf7bf797b84cb728a", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError) \t\tthrows JavaModelException", "diff": ["-\t\t\t\tif (!status.isOK())", "+\t\t\t\tif (!status.isOK()) {", "+\t\t\t\t\tString incompleteCPOption = JavaCore.getOption(JavaCore.CORE_INCOMPLETE_CLASSPATH);", "-\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "+\t\t\t\t\t\tJavaCore.ERROR.equals(incompleteCPOption) ? IMarker.SEVERITY_ERROR : IMarker.SEVERITY_WARNING,", "+\t\t\t}", "-\t\t\t\t\t\t\tif (!status.isOK())", "+\t\t\t\t\t\t\tif (!status.isOK()) {", "+\t\t\t\t\t\t\t\tString incompleteCPOption = JavaCore.getOption(JavaCore.CORE_INCOMPLETE_CLASSPATH);", "-\t\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "+\t\t\t\t\t\t\t\t\tJavaCore.ERROR.equals(incompleteCPOption) ? IMarker.SEVERITY_ERROR : IMarker.SEVERITY_WARNING,", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a07031bd010d5cdb8be6aabe4e55ab6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/CorrectionEngine.java", "commitBeforeChange": "00c5e26902355c250830170c00a5cafadf491e75", "commitAfterChange": "f82e30cbb4bb14578aa2c2e3c6261810d9c3f6be", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate void correct(char[] argument)", "signatureAfterChange": "  \tprivate void correct(char[] argument)", "diff": ["-\t\t\tScanner scanner = new Scanner();", "+\t\t\tMap currentProjectOptions = this.compilationUnit.getJavaProject().getOptions(true);", "+\t\t\tlong sourceLevel = CompilerOptions.versionToJdkLevel(currentProjectOptions.get(JavaCore.COMPILER_SOURCE));", "+\t\t\tlong complianceLevel = CompilerOptions.versionToJdkLevel(currentProjectOptions.get(JavaCore.COMPILER_COMPLIANCE));", "+\t\t\t", "+\t\t\tScanner scanner =", "+\t\t\t\tnew Scanner(", "+\t\t\t\t\tfalse /*comment*/,", "+\t\t\t\t\tfalse /*whitespace*/,", "+\t\t\t\t\tfalse /*nls*/,", "+\t\t\t\t\tsourceLevel,", "+\t\t\t\t\tcomplianceLevel,", "+\t\t\t\t\tnull/*taskTag*/,", "+\t\t\t\t\tnull/*taskPriorities*/,", "+\t\t\t\t\ttrue /*taskCaseSensitive*/);"]}], "num": 59432}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b9b14efd9e972ed4cf64705f75b4dc0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69fd07b8bdebab0504ccc12c4330c7df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "d48348b35546aedb713110b2ed105dc5edef642d", "commitAfterChange": "af92ec761864fc440fb8211ae7d1ddf0cccd86d0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \tITypeBinding resolveExpressionType(Expression expression)", "signatureAfterChange": "\r \tITypeBinding resolveExpressionType(Expression expression)", "diff": ["+\t\t} else if (expression instanceof StringLiteral) {\r", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.StringLiteral stringLiteral = (org.eclipse.jdt.internal.compiler.ast.StringLiteral) this.newAstToOldAst.get(expression);\r", "+\t\t\treturn this.getTypeBinding(stringLiteral.literalType(this.retrieveEnclosingScope(expression)));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b4bff3557aef90b5dc21c3b9cb1e649", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "07320ae1b15d683e6cba715cbbe3b5f425005448", "commitAfterChange": "0ef15ab3e77b7c293b04de9a99ac186cbe5a3c0f", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic IJavaElement getJavaElement()", "signatureAfterChange": " \tpublic IJavaElement getJavaElement()", "diff": ["+\t\t\tfinal String typeVariableName = new String(referenceBinding.sourceName());", "-\t\t\tif (declaringElement instanceof MethodBinding)", "+\t\t\tif (declaringElement instanceof MethodBinding) {", "-\t\t\telse", "+\t\t\t\tIMethod declaringMethod = (IMethod) declaringTypeBinding.getJavaElement();", "+\t\t\t\treturn declaringMethod.getTypeParameter(typeVariableName);", "+\t\t\t} else {", "-\t\t\tIType declaringType = (IType) declaringTypeBinding.getJavaElement();", "-\t\t\treturn declaringType.getTypeParameter(new String(referenceBinding.sourceName()));", "+\t\t\t\tIType declaringType = (IType) declaringTypeBinding.getJavaElement();", "+\t\t\t\treturn declaringType.getTypeParameter(typeVariableName);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9579d423144472a230aa77caaed858fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "6c76d390a016d2bc042688766f03adca637f8318", "commitAfterChange": "ae0b30b76dcbe89d5bd08d53d907ae7218823168", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": " MethodBinding inferInvocationType(Invocation invocation, TypeBinding[] argumentTypes, ParameterizedGenericMethodBinding method)", "signatureAfterChange": " MethodBinding inferInvocationType(Invocation invocation, TypeBinding[] argumentTypes, ParameterizedGenericMethodBinding method)", "diff": ["-\t\t\t// start over from a previous candidate but discard its type variable instantiations", "-\t\t\t// TODO: should we retain any instantiations of type variables not owned by the method? ", "-\t\t\tBoundSet result = null;", "-\t\t\ttry {", "-\t\t\t\tresult = inferInvocationType(this.currentBounds, targetType, invocation, original);", "-\t\t\t} catch (InferenceFailureException e) {", "-\t\t\t\t// no solution, but do more checks below", "+\t\t\tBoundSet result = (BoundSet) this.solutionsPerTargetType.get(targetType);", "+\t\t\tif (result == null) {", "+\t\t\t\t// start over from a previous candidate but discard its type variable instantiations", "+\t\t\t\t// TODO: should we retain any instantiations of type variables not owned by the method? ", "+\t\t\t\ttry {", "+\t\t\t\t\tresult = inferInvocationType(this.currentBounds, targetType, invocation, original);", "+\t\t\t\t} catch (InferenceFailureException e) {", "+\t\t\t\t\t// no solution, but do more checks below", "+\t\t\t\t}", "+\t\t\t\t\tthis.solutionsPerTargetType.put(targetType, new Solution(finalMethod, result));"]}], "num": 44438}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aad09625d81ed24e28c8d19cbc9c0ec1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11c6267f35f273ba9d64009171e1ce26", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java", "commitBeforeChange": "24dd55a6c6cf382583635c8206f082775e353206", "commitAfterChange": "44f6e5d4c5aa57a943059b880589a2a0bea34009", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["+\t\tboolean isOptimizedFalseAssertion = cst != NotAConstant && cst.booleanValue() == false;", "+", "-\t\t\texceptionArgument.analyseCode(currentScope, flowContext, assertInfo.copy()); //dead branch", "+\t\t\t// only gets evaluated when escaping - results are not taken into account", "+\t\t\texceptionArgument.analyseCode(currentScope, flowContext, assertInfo.copy()); ", "-\t\treturn flowInfo.mergedWith(assertInfo.unconditionalInits()); ", "+\t\tif (isOptimizedFalseAssertion) {", "+\t\t\treturn flowInfo; // if assertions are enabled, the following code will be unreachable", "+\t\t} else {", "+\t\t\treturn flowInfo.mergedWith(assertInfo.unconditionalInits()); ", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6527f19ddc499e974dfdc4a73894306d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "1cba8a56396c1e9ffabcfc721c511ac9d44ca895", "commitAfterChange": "0b176a9b340c0d1c651b660d321231b763e09212", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r \tpublic FlowInfo analyseCode(\r \t\tBlockScope currentScope,\r \t\tFlowContext flowContext,\r \t\tFlowInfo flowInfo)", "signatureAfterChange": "\r \r \tpublic FlowInfo analyseCode(\r \t\tBlockScope currentScope,\r \t\tFlowContext flowContext,\r \t\tFlowInfo flowInfo)", "diff": ["-\t\tflowInfo = condition.analyseCode(currentScope, flowContext, flowInfo);\r", "-\r", "+\r", "+\t\tflowInfo = condition.analyseCode(currentScope, flowContext, flowInfo, conditionConstant == NotAConstant);\r", "+\r", "-\t\t\t\t\tvalueIfTrue.analyseCode(currentScope, flowContext, flowInfo);\r", "+\t\t\t\t\tvalueIfTrue.analyseCode(currentScope, flowContext, flowInfo.initsWhenTrue().unconditionalInits());\r", "-\t\t\t\t\tflowInfo.copy().markAsFakeReachable(true));\r", "+\t\t\t\t\tflowInfo.initsWhenFalse().copy().unconditionalInits().markAsFakeReachable(true));\r", "-\t\t\t\t\tflowInfo.copy().markAsFakeReachable(true));\r", "+\t\t\t\t\tflowInfo.initsWhenTrue().copy().unconditionalInits().markAsFakeReachable(true));\r", "-\t\t\t\t\tvalueIfFalse.analyseCode(currentScope, flowContext, flowInfo);\r", "+\t\t\t\t\tvalueIfFalse.analyseCode(currentScope, flowContext, flowInfo.initsWhenFalse().unconditionalInits());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9916187182e717674cf7b493f599d68c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java", "commitBeforeChange": "c7e159d36a6e86c73ba8d33970f5e7f3b5edc0c4", "commitAfterChange": "d4e2f0c7a3096a7a9485b327e844751de2001505", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tUnconditionalFlowInfo assertInfo = assertExpression.", "-\t\t\tanalyseCode(currentScope, flowContext, flowInfo.copy()).", "+\t\tFlowInfo assertRawInfo = assertExpression.", "+\t\t\tanalyseCode(currentScope, flowContext, flowInfo.copy());", "+\t\tUnconditionalFlowInfo assertWhenTrueInfo = assertRawInfo.initsWhenTrue().", "+\t\tUnconditionalFlowInfo assertInfo = assertRawInfo.unconditionalCopy();", "+\t\t\t// change this if we need to carry null analysis results of the assert", "+\t\t\t// expression downstream", "-\t\t\treturn flowInfo.mergedWith(assertInfo); ", "+\t\t\treturn flowInfo.mergedWith(assertInfo.nullInfoLessUnconditionalCopy()).", "+\t\t\t\taddInitializationsFrom(assertWhenTrueInfo.nullInfo());", "+\t\t\t// keep the merge from the initial code for the definite assignment ", "+\t\t\t// analysis, tweak the null part to influence nulls downstream"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adeb1ebf5591b51962ecb0d4603aed0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompoundAssignment.java", "commitBeforeChange": "3fe2c90fe88afce7467b641aeb4882b502885aad", "commitAfterChange": "3c44432d0925693b8b2813ab5e130633ad6e547e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\treturn  ((Reference) this.lhs).analyseAssignment(currentScope, flowContext, flowInfo, this, true).unconditionalInits();", "+\tflowInfo = ((Reference) this.lhs).analyseAssignment(currentScope, flowContext, flowInfo, this, true).unconditionalInits();", "+\tif (this.resolvedType.id == T_JavaLangString) {", "+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=339250", "+\t\tLocalVariableBinding local = this.lhs.localVariableBinding();", "+\t\tif (local != null && this.resolvedType.id == T_JavaLangString) {", "+\t\t\t// compound assignment results in a definitely non null value for String", "+\t\t\tflowInfo.markAsDefinitelyNonNull(local);", "+\t\t\tif (flowContext.initsOnFinally != null)", "+\t\t\t\tflowContext.initsOnFinally.markAsDefinitelyNonNull(local);", "+\t\t}", "+\t}", "+\treturn flowInfo;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "babe80c86f56f1bcba0d53b408abbd64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\tpublic FlowInfo analyseCode(", "+public FlowInfo analyseCode(", "-", "-\t\tflowInfo = expression", "-\t\t\t.analyseCode(currentScope, flowContext, flowInfo)", "-\t\t\t.unconditionalInits();", "-\t\texpression.checkNullStatus(currentScope, flowContext, flowInfo, FlowInfo.NON_NULL);", "-\t\treturn flowInfo;", "+\tLocalVariableBinding local = this.expression.localVariableBinding();", "+\tif (local != null && (local.type.tagBits & TagBits.IsBaseType) == 0) {", "+\t\tflowContext.recordUsingNullReference(currentScope, local, ", "+\t\t\tthis.expression, FlowContext.CAN_ONLY_NULL, flowInfo);", "+\t\tflowInfo = expression.analyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tunconditionalInits();", "+\t\tFlowInfo initsWhenFalse = flowInfo.copy();", "+\t\tflowInfo.markAsComparedEqualToNonNull(local);", "+\t\treturn FlowInfo.conditional(flowInfo, initsWhenFalse);", "+\treturn expression.analyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tunconditionalInits();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e39afd87d0998001f73084387788179e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "6c050fdd50da181a73c24a3d84f6766ee118b95b", "commitAfterChange": "f13a5d135f0d6d82ec59c09667ba7900fd57b604", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\tleft.checkNPE(currentScope, flowContext, flowInfo, false /* skip String */);", "-\tflowInfo = left.analyseCode(currentScope, flowContext, flowInfo).", "-\t\tunconditionalInits();", "-\tright.checkNPE(currentScope, flowContext, flowInfo, false /* skip String */);", "-\treturn right.analyseCode(currentScope, flowContext, flowInfo).", "-\t\tunconditionalInits();", "+\tif (this.resolvedType.id == T_JavaLangString) {", "+\t\treturn right.analyseCode(currentScope, flowContext, ", "+\t\t\t\tleft.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits()).", "+\t\t\tunconditionalInits();", "+\t}", "+\telse {", "+\t\tleft.checkNPE(currentScope, flowContext, flowInfo);", "+\t\tflowInfo = left.analyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tunconditionalInits();", "+\t\tright.checkNPE(currentScope, flowContext, flowInfo);", "+\t\treturn right.analyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tunconditionalInits();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8aa46ae8acd279289b99645cade585f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "a2ae3e117eaea10fecaf3678af5938ffa98d76f4", "commitAfterChange": "71ab6b3956db9fea4a8f81e891e05ac4d44d96d9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tConstant inlinedCondition;\r", "-\tif ((inlinedCondition = condition.constant) != NotAConstant) {\r", "-\t\tif (inlinedCondition.booleanValue()) {\r", "+\tConstant inlinedCondition = condition.constant;\r", "+\tif (inlinedCondition == NotAConstant) inlinedCondition = condition.conditionalConstant();\r", "+\tif (inlinedCondition != NotAConstant) {\r", "+\t\tif (inlinedCondition.booleanValue() == true) {\r", "-\t\t\tvalueIfFalse.analyseCode(currentScope, flowContext, flowInfo.copy());\r", "+\t\t\tvalueIfFalse.analyseCode(currentScope, flowContext, flowInfo.copy().markAsFakeReachable(true));\r", "-\t\t\tvalueIfTrue.analyseCode(currentScope, flowContext, flowInfo.copy());\r", "+\t\t\tvalueIfTrue.analyseCode(currentScope, flowContext, flowInfo.copy().markAsFakeReachable(true));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e910ca8974bfbb9568b3fcf0bb3a5da7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java", "commitBeforeChange": "cd6826d338c946dccccfded9e97883fe86b0725e", "commitAfterChange": "24dd55a6c6cf382583635c8206f082775e353206", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tFlowInfo assertInfo = assertExpression.analyseCode(currentScope, flowContext, flowInfo.copy()).unconditionalInits();", "-\t\t\t", "+", "+\t\tConstant cst = this.assertExpression.optimizedBooleanConstant();\t\t", "+\t\tboolean isOptimizedTrueAssertion = cst != NotAConstant && cst.booleanValue() == true;", "+\t\tFlowInfo assertInfo = flowInfo.copy();", "+\t\tif (isOptimizedTrueAssertion) {", "+\t\t\tassertInfo.setReachMode(FlowInfo.UNREACHABLE);", "+\t\t}", "+\t\tassertInfo = assertExpression.analyseCode(currentScope, flowContext, assertInfo).unconditionalInits();", "+\t\t", "-\t\t\tassertInfo = exceptionArgument.analyseCode(currentScope, flowContext, assertInfo);", "+\t\t\texceptionArgument.analyseCode(currentScope, flowContext, assertInfo.copy()); //dead branch", "-", "-\t\tFlowInfo mergedInfo = flowInfo.mergedWith(assertInfo.unconditionalInits());", "-\t\treturn mergedInfo;", "+\t\treturn flowInfo.mergedWith(assertInfo.unconditionalInits()); "]}], "num": 32976}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "35cbf5d0e50029b6db0ed54608ad0bfb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "329354876580c91e06ca28bdfc3df5c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "b31ce9a64f1311e4d13d4dea851fcf7c20fc7561", "commitAfterChange": "ac7ecaeb85f4515e23451116104840fafc7855bd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private void computeInheritedMethods()", "signatureAfterChange": " private void computeInheritedMethods()", "diff": ["-\t\t\t\t\t\t\t\t\t&& !(method.isDefault() // (31398,30805) keep non-visible default abstract, if no implementation exists in same package", "-\t\t\t\t\t\t\t\t\t\t\t\t&& method.isAbstract() ", "-\t\t\t\t\t\t\t\t\t\t\t\t&& method.declaringClass.fPackage != existingMethod.declaringClass.fPackage)", "+\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\tif (method.isAbstract() // (31398,30805) report non-visible default abstract, if no implementation is available", "+\t\t\t\t\t\t\t\t\t\t\t\t&&  (method.isDefault() && method.declaringClass.fPackage != existingMethod.declaringClass.fPackage)) {", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "474cc0592634e140568dfd5211c397ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "6d77a4bf35583191a476bb93f4bd36f26de22100", "commitAfterChange": "a97f3801cba74ca3fc427b461720b8d9907030a3", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": "  \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t} else if (method.isStatic()) {", "-\t\t\t\t\t\t// detect collision between static import methods", "-\t\t\t\t\t\tif (method.declaringClass != method2.declaringClass && method.original().areParametersEqual(method2.original()))", "-\t\t\t\t\t\t\tcontinue nextVisible;", "+//\t\t\t\t\t} else if (method.isStatic()) {", "+//\t\t\t\t\t\t// detect collision between static import methods", "+//\t\t\t\t\t\tif (method.declaringClass != method2.declaringClass && method.original().areParametersEqual(method2.original()))", "+//\t\t\t\t\t\t\tcontinue nextVisible;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7b4a05d21d329c9e9eeddf71c1b162b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "db070c14a39516a8671547f6d3e4a976ae6ad4f6", "commitAfterChange": "2936dc77d585d1bce84296ec1690cb761872a148", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": "  \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-//\t\t\t\t\t} else if (method.isStatic()) {", "-//\t\t\t\t\t\t// detect collision between static import methods", "-//\t\t\t\t\t\tif (method.declaringClass != method2.declaringClass && method.original().areParametersEqual(method2.original()))", "-//\t\t\t\t\t\t\tcontinue nextVisible;", "+\t\t\t\t\t} else if (method.isStatic()) {", "+\t\t\t\t\t\t// detect collision between static import methods", "+\t\t\t\t\t\tif (method.declaringClass != method2.declaringClass && method.original().areParametersEqual(method2.original()))", "+\t\t\t\t\t\t\tcontinue nextVisible;"]}], "num": 65845}
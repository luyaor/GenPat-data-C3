{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb993c65d96851924820da5c5f464bcd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbaced100253b4a64000043882b0cb6f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "84210148bd50897aa80e3947cfa4eab1021e65ca", "commitAfterChange": "b3c71360bc95e8921739b4788b7eb24580a75ac4", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, int searchFor, final ISearchRequestor storage)", "signatureAfterChange": " \tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, int searchFor, final ISearchRequestor storage, IProgressMonitor monitor)", "diff": ["-", "+\t */", "+\tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, int searchFor, final ISearchRequestor storage, IProgressMonitor monitor) {", "+\t\t", "-\t\t\ttry {", "-\t\t\t\tint matchRule = SearchPattern.R_PREFIX_MATCH;", "-\t\t\t\tif (camelCaseMatch) matchRule |= SearchPattern.R_CAMELCASE_MATCH;", "-\t\t\t\tnew BasicSearchEngine(this.workingCopies).searchAllTypeNames(", "-\t\t\t\t\tqualification,", "-\t\t\t\t\tSearchPattern.R_EXACT_MATCH,", "-\t\t\t\t\tsimpleName,", "-\t\t\t\t\tmatchRule, // not case sensitive", "-\t\t\t\t\tsearchFor,", "-\t\t\t\t\tgetSearchScope(),", "-\t\t\t\t\ttypeRequestor,", "-\t\t\t\t\tCANCEL_IF_NOT_READY_TO_SEARCH,", "-\t\t\t\t\tprogressMonitor);", "-\t\t\t} catch (OperationCanceledException e) {", "-\t\t\t\tfindTypes(", "-\t\t\t\t\tnew String(prefix),", "-\t\t\t\t\tstorage,", "-\t\t\t\t\tconvertSearchFilterToModelFilter(searchFor));", "+\t\t\t", "+\t\t\tint matchRule = SearchPattern.R_PREFIX_MATCH;", "+\t\t\tif (camelCaseMatch) matchRule |= SearchPattern.R_CAMELCASE_MATCH;", "+\t\t\tif (monitor != null) {", "+\t\t\t\tfound : while (true) { //the loop will finish if the search request ends or is cancelled", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tnew BasicSearchEngine(this.workingCopies).searchAllTypeNames(", "+\t\t\t\t\t\t\tqualification,", "+\t\t\t\t\t\t\tSearchPattern.R_EXACT_MATCH,", "+\t\t\t\t\t\t\tsimpleName,", "+\t\t\t\t\t\t\tmatchRule, // not case sensitive", "+\t\t\t\t\t\t\tsearchFor,", "+\t\t\t\t\t\t\tgetSearchScope(),", "+\t\t\t\t\t\t\ttypeRequestor,", "+\t\t\t\t\t\t\tCANCEL_IF_NOT_READY_TO_SEARCH,", "+\t\t\t\t\t\t\tprogressMonitor);", "+\t\t\t\t\t\tbreak found;", "+\t\t\t\t\t} catch (OperationCanceledException e) {", "+\t\t\t\t\t\tif (monitor.isCanceled()) {", "+\t\t\t\t\t\t\tthrow e;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tThread.sleep(50); // indexes are not ready. sleep 50ms and retry the search request", "+\t\t\t\t\t\t\t} catch (InterruptedException e1) {", "+\t\t\t\t\t\t\t\t// Do nothing", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\ttry {", "+\t\t\t\t\tnew BasicSearchEngine(this.workingCopies).searchAllTypeNames(", "+\t\t\t\t\t\tqualification,", "+\t\t\t\t\t\tSearchPattern.R_EXACT_MATCH,", "+\t\t\t\t\t\tsimpleName,", "+\t\t\t\t\t\tmatchRule, // not case sensitive", "+\t\t\t\t\t\tsearchFor,", "+\t\t\t\t\t\tgetSearchScope(),", "+\t\t\t\t\t\ttypeRequestor,", "+\t\t\t\t\t\tCANCEL_IF_NOT_READY_TO_SEARCH,", "+\t\t\t\t\t\tprogressMonitor);", "+\t\t\t\t} catch (OperationCanceledException e) {", "+\t\t\t\t\tfindTypes(", "+\t\t\t\t\t\tnew String(prefix),", "+\t\t\t\t\t\tstorage,", "+\t\t\t\t\t\tconvertSearchFilterToModelFilter(searchFor));", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "faf8b99f67dd5bde86f66cc2aa44d7c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "81d6dab71c724c0a5f570110e4e037695837179d", "commitAfterChange": "61742b7a485fa965b2f7b05fc8eadc51ecd60a49", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, int searchFor, final ISearchRequestor storage, IProgressMonitor monitor)", "signatureAfterChange": " \tpublic void findTypes(char[] prefix, final boolean findMembers, boolean camelCaseMatch, int searchFor, final ISearchRequestor storage, IProgressMonitor monitor)", "diff": ["-\t\t\t\tfound : while (true) { //the loop will finish if the search request ends or is cancelled", "+\t\t\t\tIndexManager indexManager = JavaModelManager.getIndexManager();", "+\t\t\t\tif (indexManager.awaitingJobsCount() == 0) {", "+\t\t\t\t\t// indexes were already there, so perform an immediate search to avoid any index rebuilt", "+\t\t\t\t\tnew BasicSearchEngine(this.workingCopies).searchAllTypeNames(", "+\t\t\t\t\t\tqualification,", "+\t\t\t\t\t\tSearchPattern.R_EXACT_MATCH,", "+\t\t\t\t\t\tsimpleName,", "+\t\t\t\t\t\tmatchRule, // not case sensitive", "+\t\t\t\t\t\tsearchFor,", "+\t\t\t\t\t\tgetSearchScope(),", "+\t\t\t\t\t\ttypeRequestor,", "+\t\t\t\t\t\tFORCE_IMMEDIATE_SEARCH,", "+\t\t\t\t\t\tprogressMonitor);", "+\t\t\t\t} else {", "+\t\t\t\t\t// indexes were not ready, give the indexing a chance to finish small jobs by sleeping 100ms...", "+\t\t\t\t\t\tThread.sleep(100);", "+\t\t\t\t\t} catch (InterruptedException e) {", "+\t\t\t\t\t\t// Do nothing", "+\t\t\t\t\t}", "+\t\t\t\t\tif (monitor.isCanceled()) {", "+\t\t\t\t\t\tthrow new OperationCanceledException();", "+\t\t\t\t\t}", "+\t\t\t\t\tif (indexManager.awaitingJobsCount() == 0) {", "+\t\t\t\t\t\t// indexes are now ready, so perform an immediate search to avoid any index rebuilt", "-\t\t\t\t\t\t\tCANCEL_IF_NOT_READY_TO_SEARCH,", "+\t\t\t\t\t\t\tFORCE_IMMEDIATE_SEARCH,", "-\t\t\t\t\t\tbreak found;", "-\t\t\t\t\t} catch (OperationCanceledException e) {", "-\t\t\t\t\t\tif (monitor.isCanceled()) {", "-\t\t\t\t\t\t\tthrow e;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tThread.sleep(50); // indexes are not ready. sleep 50ms and retry the search request", "-\t\t\t\t\t\t\t} catch (InterruptedException e1) {", "-\t\t\t\t\t\t\t\t// Do nothing", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// Indexes are still not ready, so look for types in the model instead of a search request", "+\t\t\t\t\t\tfindTypes(", "+\t\t\t\t\t\t\tnew String(prefix),", "+\t\t\t\t\t\t\tstorage,", "+\t\t\t\t\t\t\tconvertSearchFilterToModelFilter(searchFor));"]}], "num": 39672}
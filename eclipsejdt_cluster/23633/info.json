{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f337c4616dc8acb615dc84482416f7f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "154a07203aff05d3c8581074d9e856ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "73ab4fb6ad4900fe0fe0cff84b1e8987d60b9f9c", "commitAfterChange": "71dd900bd4b484c4ca74983456159f0694fb9053", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic static ClasspathContainerInitializer getClasspathContainerInitializer(String containerID)", "signatureAfterChange": " \tpublic static ClasspathContainerInitializer getClasspathContainerInitializer(String containerID)", "diff": ["-\tpublic static ClasspathContainerInitializer getClasspathContainerInitializer(String containerID){", "-\t\t", "+\tpublic static ClasspathContainerInitializer getClasspathContainerInitializer(String containerID) {", "+\t\tHashMap containerInitializersCache = JavaModelManager.getJavaModelManager().containerInitializersCache;", "+\t\tClasspathContainerInitializer initializer = (ClasspathContainerInitializer) containerInitializersCache.get(containerID);", "+\t\tif (initializer == null) {", "+\t\t\tinitializer = computeClasspathContainerInitializer(containerID);", "+\t\t\tif (initializer == null)", "+\t\t\t\treturn null;", "+\t\t\tcontainerInitializersCache.put(containerID, initializer);", "+\t\t}", "+\t\treturn initializer;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "243b71bbd70cc359163be5cf273a99fa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "f8b4a09010dbba905cde5c02b5290761440c6661", "commitAfterChange": "b2101e7533ccf9943251a22440ba336cef61fe8d", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "\r \t\r \tprivate void propagateErrors(CompilationUnit unit, IProblem[] problems, int problemLength)", "signatureAfterChange": "\r \t\r \tprivate void propagateErrors(CompilationUnit unit, IProblem[] problems, int problemLength)", "diff": ["-\t\tfor (int n = 0; n < problemLength; n++) {\r", "-\t\t\tint position = problems[n].getSourceStart();\r", "-\t\t\t\t//check the package declaration\r", "-\t\t\tPackageDeclaration packageDeclaration = unit.getPackage();\r", "-\t\t\tif (packageDeclaration != null && checkAndTagAsMalformed(packageDeclaration, position)) {\r", "-\t\t\t\treturn;\r", "-\t\t\t}\r", "-\t\t\tList imports = unit.imports();\r", "-\t\t\tfor (int i = 0, length = imports.size(); i < length; i++) {\r", "-\t\t\t\tif (checkAndTagAsMalformed((ASTNode) imports.get(i), position)) {\r", "-\t\t\t\t\treturn;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tfor (int i = 0, max = unit.types().size(); i < max; i++) {\r", "-\t\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) unit.types().get(0);\r", "-\t\t\t\tfor (int j = 0, max2 = typeDeclaration.bodyDeclarations().size();\r", "-\t\t\t\t\tj < max2;\r", "-\t\t\t\t\tj++) {\r", "-\t\t\t\t\tif (checkAndTagAsMalformed((ASTNode) typeDeclaration.bodyDeclarations().get(j), position)) {\r", "-\t\t\t\t\t\treturn;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\tif (checkAndTagAsMalformed(typeDeclaration, position)) {\r", "-\t\t\t\t\treturn;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "+\t\t// resize the problem array to the proper size\r", "+\t\tIProblem[] resizeProblems = null;\r", "+\t\tif (problems.length == problemLength) {\r", "+\t\t\tresizeProblems = problems;\r", "+\t\t} else {\r", "+\t\t\tSystem.arraycopy(problems, 0, (resizeProblems = new IProblem[problemLength]), 0, problemLength);\r", "-\t\t// if we get there, then we cannot do better than tag the compilation unit as being malformed\r", "-\t\tunit.setFlags(ASTNode.MALFORMED);\r", "+\t\tASTErrorPropagator errorPropagator = new ASTErrorPropagator(resizeProblems);\r", "+\t\tunit.accept(errorPropagator);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90224734554db007fd1c03da1c2f57ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTestOptions.java", "commitBeforeChange": "916e1b97cb8f68e0c3d2550db5f74003efc3f036", "commitAfterChange": "cb0883381704b865376b174b125a5d26ee0abae4", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate void runErrorsTest(String[] testFiles, int visibility, boolean isMethod)", "signatureAfterChange": "  \tprivate void runErrorsTest(String[] testFiles, int visibility, boolean isMethod)", "diff": ["+", "+\tprivate void runErrorsTest(String[] testFiles, int visibility, boolean isMethod) {", "+\t\tString[] errors = isMethod", "+\t\t\t? errorsForInvalidTagsMethodOrConstructor(visibility)", "+\t\t\t: errorsForInvalidTagsClassOrField(visibility);", "+\t\tint length = errors.length;", "+\t\tStringBuffer expectedProblemLog = new StringBuffer(isMethod?\"M\":\"C\");", "+\t\texpectedProblemLog.append(errors.length);", "+\t\texpectedProblemLog.append(\"----------\\n\");", "+\t\tfor (int i=0; i<length; i++) {", "+\t\t\texpectedProblemLog.append(errors[i]);", "+\t\trunNegativeTest(testFiles, expectedProblemLog.toString());", "+    }", "-\tprivate void runErrorsTest(String[] testFiles, int visibility, boolean isMethod) {", "-\t\tString[] errors = isMethod", "-\t\t\t? errorsForInvalidTagsMethodOrConstructor(visibility)", "-\t\t\t: errorsForInvalidTagsClassOrField(visibility);", "-\t\tint length = errors.length;", "-\t\tStringBuffer expectedProblemLog = new StringBuffer(\"----------\\n\");", "-\t\tfor (int i=0; i<length; i++) {", "-\t\t\texpectedProblemLog.append(errors[i]);", "-\t\t}", "-\t\ttry {", "-\t\t\trunNegativeTest(testFiles, expectedProblemLog.toString());", "-\t\t}", "-\t\tcatch (ComparisonFailure failure) {", "-\t\t\tSystem.out.println(\"-------------------------------------------------------------\");", "-\t\t\tSystem.out.println(\"Following static variable should be updated as follow:\");", "-\t\t\tSystem.out.print(\"\tprivate static String[] \");", "-\t\t\tif (isMethod) {", "-\t\t\t\tSystem.out.print(\"METHODS_ERRORS\");", "-\t\t\t} else {", "-\t\t\t\tSystem.out.print(\"CLASSES_ERRORS\");", "-\t\t\t}", "-\t\t\tSystem.out.print(\" = {\\n\");", "-\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\tint idx = errors[i].indexOf('\\n');", "-\t\t\t\tSystem.out.println(Util.displayString(errors[i].substring(0, idx+1), INDENT, SHIFT));", "-\t\t\t\tSystem.out.print(Util.displayString(errors[i].substring(idx+1), INDENT+1, SHIFT));", "-\t\t\t\tif (i == (length-1)) {", "-\t\t\t\t    for (int k = 0; k < INDENT-1; k++) System.out.print('\\t');", "-\t\t\t\t\tSystem.out.println('}');", "-\t\t\t\t} else {", "-\t\t\t\t\tSystem.out.println(',');", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tthrow failure;", "-\t\t}", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4efa01c98a2625b41f217edcb7f9d89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic static SearchPattern createPattern(IJavaElement element, int limitTo)", "signatureAfterChange": " \tpublic static SearchPattern createPattern(IJavaElement element, int limitTo)", "diff": ["-\t\t\t\tchar[][] typeNames = null;", "-\t\t\t\tint[] wildcards = null;", "+\t\t\t\tchar[] typeSignature = null;", "-\t\t\t\t\tchar[] typeSignature = field.getTypeSignature().toCharArray();", "-\t\t\t\t\tchar[] typeErasure = null;", "-\t\t\t\t\tif (CharOperation.indexOf(Signature.C_GENERIC_START, typeSignature) == -1) {", "-\t\t\t\t\t\ttypeErasure = Signature.toCharArray(typeSignature);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\ttypeErasure = Signature.toCharArray(Signature.getTypeErasure(typeSignature));", "-\t\t\t\t\t\tCharOperation.replace(typeErasure, '$', '.');", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\ttypeNames = Signature.getTypeArguments(typeSignature);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcatch (IllegalArgumentException iae) {", "-\t\t\t\t\t\t\t// do nothing", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (typeNames != null) {", "-\t\t\t\t\t\t\tint length = typeNames.length;", "-\t\t\t\t\t\t\twildcards = new int[length];", "-\t\t\t\t\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\t\t\t\t\tchar[] typeName = typeNames[i];", "-\t\t\t\t\t\t\t\tswitch (typeName[0]) {", "-\t\t\t\t\t\t\t\t\tcase Signature.C_STAR:", "-\t\t\t\t\t\t\t\t\t\twildcards[i] = Wildcard.UNBOUND;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase Signature.C_EXTENDS:", "-\t\t\t\t\t\t\t\t\t\twildcards[i] = Wildcard.EXTENDS;", "-\t\t\t\t\t\t\t\t\t\ttypeNames[i] = Signature.toCharArray(CharOperation.subarray(typeName, 1, typeName.length));", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase Signature.C_SUPER:", "-\t\t\t\t\t\t\t\t\t\twildcards[i] = Wildcard.SUPER;", "-\t\t\t\t\t\t\t\t\t\ttypeNames[i] = Signature.toCharArray(CharOperation.subarray(typeName, 1, typeName.length));", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\t\t\twildcards[i] = -1;", "-\t\t\t\t\t\t\t\t\t\ttypeNames[i] = Signature.toCharArray(typeName);", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\tchar[] signature = field.getTypeSignature().toCharArray();", "+\t\t\t\t\tchar[] typeErasure = Signature.toCharArray(Signature.getTypeErasure(signature));", "+\t\t\t\t\tif (CharOperation.indexOf(Signature.C_GENERIC_START, signature) >= 0) {", "+\t\t\t\t\t\ttypeSignature = signature;", "+\t\t\t\t\tCharOperation.replace(typeErasure, '$', '.');", "-\t\t\t\t\t\t\t\ttypeNames,", "-\t\t\t\t\t\t\t\twildcards,", "+\t\t\t\t\t\t\t\ttypeSignature,", "-\t\t\t\t\t\t\t\ttypeNames,", "-\t\t\t\t\t\t\t\twildcards,", "+\t\t\t\t\t\t\t\ttypeSignature,", "-\t\t\t\t\t\t\t\ttypeNames,", "-\t\t\t\t\t\t\t\twildcards,", "+\t\t\t\t\t\t\t\ttypeSignature,", "-\t\t\t\t\t\t\t\ttypeNames,", "-\t\t\t\t\t\t\t\twildcards,", "+\t\t\t\t\t\t\t\ttypeSignature,", "-\t\t\t\t\t\t\t\ttypeNames,", "-\t\t\t\t\t\t\t\twildcards,", "+\t\t\t\t\t\t\t\ttypeSignature,", "+\t\t\t\tString signature = type instanceof ParameterizedSourceType ? ((ParameterizedSourceType) type).uniqueKey : null;", "-\t\t\t\t\t\t\ttypeParameterNames(type),", "+\t\t\t\t\t\t\tsignature == null ? null : signature.toCharArray(),"]}], "num": 23633}
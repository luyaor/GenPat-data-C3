{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29f704809f3828d33aa532ac9332d4f4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "371edb69fdb3238843b9563dba76d7d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "140d5208fae36b92de255acde8dd7fe538818d2b", "commitAfterChange": "14842eb62da3e660c575d5193079230a000aa781", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "\r \tprivate static void updateVariableValues(\r \t\tString[] variableNames,\r \t\tIPath[] variablePaths,\r \t\tIProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "\r \tprivate static void updateVariableValues(\r \t\tString[] variableNames,\r \t\tIPath[] variablePaths,\r \t\tIProgressMonitor monitor) throws JavaModelException", "diff": ["+\t\tboolean mayChangeProjectDependencies = false;\r", "+\t\t\t\t\t\t\tif (entry.getPath().segment(0).equals(variableName)){\r", "+\t\t\t\t\t\t\t\taffectedProjects.put(project, ((JavaProject)project).getExpandedClasspath(true));\r", "+\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t\t// also check whether it will be necessary to update proj references and cycle markers\r", "+\t\t\t\t\t\t\t\tif (!mayChangeProjectDependencies && entry.getPath().segmentCount() ==  1){\r", "+\t\t\t\t\t\t\t\t\tIPath oldPath = (IPath)JavaModelManager.Variables.get(variableName);\r", "+\t\t\t\t\t\t\t\t\tif (oldPath != null && oldPath.segmentCount() == 1) {\r", "+\t\t\t\t\t\t\t\t\t\tmayChangeProjectDependencies = true;\r", "+\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\tIPath newPath = variablePaths[k];\r", "+\t\t\t\t\t\t\t\t\t\tif (newPath != null && newPath.segmentCount() == 1) {\r", "+\t\t\t\t\t\t\t\t\t\t\tmayChangeProjectDependencies = true;\r", "+\t\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\tcontinue nextProject;\r", "+\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tif (entry.getPath().segment(0).equals(variableName)\r", "-\t\t\t\t\t\t\t\t\t\t|| ((sourcePath = entry.getSourceAttachmentPath()) != null\t&& sourcePath.segment(0).equals(variableName))\r", "-\t\t\t\t\t\t\t\t\t\t|| ((sourceRootPath = entry.getSourceAttachmentRootPath()) != null\t&& sourceRootPath.segment(0).equals(variableName))) {\r", "-\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\tif (((sourcePath = entry.getSourceAttachmentPath()) != null\t&& sourcePath.segment(0).equals(variableName))\r", "+\t\t\t\t\t\t\t\t|| ((sourceRootPath = entry.getSourceAttachmentRootPath()) != null\t&& sourceRootPath.segment(0).equals(variableName))) {\r", "+\r", "-\t\t\t\t\t\t\t(IClasspathEntry[]) affectedProjects.get(project));\r", "+\t\t\t\t\t\t\t(IClasspathEntry[]) affectedProjects.get(project),\r", "+\t\t\t\t\t\t\tmayChangeProjectDependencies);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf9e6caaa6312435a89cfb39d9411ca0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "0dc6446aeab064f2d77dae4d4b0d25d3e6c845fc", "commitAfterChange": "8fe834cb8f4336c4e03a0aec8b6e7a981a1d317c", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic static IClasspathEntry getResolvedClasspathEntry(IClasspathEntry entry)", "signatureAfterChange": " \tpublic static IClasspathEntry getResolvedClasspathEntry(IClasspathEntry entry)", "diff": ["-\t\t\tif (resolvedResource != null) {", "-\t\t\t\tswitch (resolvedResource.getType()) {", "-\t\t\t\t\t", "-\t\t\t\t\tcase IResource.PROJECT :  ", "-\t\t\t\t\t\t// internal project", "-\t\t\t\t\t\treturn JavaCore.newProjectEntry(", "-\t\t\t\t\t\t\t\tresolvedPath, ", "-\t\t\t\t\t\t\t\tentry.getAccessRules(),", "-\t\t\t\t\t\t\t\tentry.combineAccessRules(), ", "-\t\t\t\t\t\t\t\tentry.getExtraAttributes(), ", "-\t\t\t\t\t\t\t\tentry.isExported());", "-\t\t\t\t\tcase IResource.FILE : ", "-\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(resolvedResource.getName())) {", "-\t\t\t\t\t\t\t// internal binary archive", "-\t\t\t\t\t\t\treturn JavaCore.newLibraryEntry(", "-\t\t\t\t\t\t\t\t\tresolvedPath,", "-\t\t\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentPath()),", "-\t\t\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()),", "-\t\t\t\t\t\t\t\t\tentry.getAccessRules(), ", "-\t\t\t\t\t\t\t\t\tentry.getExtraAttributes(), ", "-\t\t\t\t\t\t\t\t\tentry.isExported());", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t", "-\t\t\t\t\tcase IResource.FOLDER : ", "-\t\t\t\t\t\t// internal binary folder", "+\t\t\tswitch (resolvedResource.getType()) {", "+\t\t\t\t", "+\t\t\t\tcase IResource.PROJECT :  ", "+\t\t\t\t\t// internal project", "+\t\t\t\t\treturn JavaCore.newProjectEntry(", "+\t\t\t\t\t\t\tresolvedPath, ", "+\t\t\t\t\t\t\tentry.getAccessRules(),", "+\t\t\t\t\t\t\tentry.combineAccessRules(), ", "+\t\t\t\t\t\t\tentry.getExtraAttributes(), ", "+\t\t\t\t\t\t\tentry.isExported());", "+\t\t\t\tcase IResource.FILE : ", "+\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(resolvedResource.getName())) {", "+\t\t\t\t\t\t// internal binary archive", "-\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\t", "+\t\t\t\tcase IResource.FOLDER : ", "+\t\t\t\t\t// internal binary folder", "+\t\t\t\t\treturn JavaCore.newLibraryEntry(", "+\t\t\t\t\t\t\tresolvedPath,", "+\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentPath()),", "+\t\t\t\t\t\t\tgetResolvedVariablePath(entry.getSourceAttachmentRootPath()),", "+\t\t\t\t\t\t\tentry.getAccessRules(), ", "+\t\t\t\t\t\t\tentry.getExtraAttributes(), ", "+\t\t\t\t\t\t\tentry.isExported());"]}], "num": 1172}
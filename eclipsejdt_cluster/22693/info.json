{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49a3bb668f4d861015651a094ef763a9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fa05c596a47fd04177bfefde9e5d7b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldLocator.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, int accuracy, MatchLocator locator) throws CoreException", "diff": ["-\t\t\t\t\t\taccuracies[indexOfFirstFieldBinding] = SearchMatch.A_INACCURATE;", "+\t\t\t\t\t\tif (fieldBinding.type.isParameterizedType())", "+\t\t\t\t\t\t\taccuracies[indexOfFirstFieldBinding] = refineAccuracy(SearchMatch.A_INACCURATE, (ParameterizedTypeBinding) fieldBinding.type, this.pattern.typeSignature, locator);", "+\t\t\t\t\t\telse", "+\t\t\t\t\t\t\taccuracies[indexOfFirstFieldBinding] = SearchMatch.A_INACCURATE;", "-\t\t\t\t\t\t\taccuracies[i] = SearchMatch.A_INACCURATE;", "-\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tif (otherBinding.type.isParameterizedType())", "+\t\t\t\t\t\t\t\taccuracies[i] = refineAccuracy(SearchMatch.A_INACCURATE, (ParameterizedTypeBinding) otherBinding.type, this.pattern.typeSignature, locator);", "+\t\t\t\t\t\t\telse", "+\t\t\t\t\t\t\t\taccuracies[i] = SearchMatch.A_INACCURATE;", "+\t\t\t\t\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6590a63a44719cf267e3242d32de5488", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 123, "signatureBeforeChange": " \tpublic boolean visit(SingleVariableDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(SingleVariableDeclaration node)", "diff": ["-\t\t", "-\t\trewriteModifiers(node, SingleVariableDeclaration.MODIFIERS_PROPERTY, node.getStartPosition());", "+\t\tint pos= node.getStartPosition();", "+\t\tif (node.getAST().apiLevel() == AST.JLS2) {", "+\t\t\trewriteModifiers(node, SingleVariableDeclaration.MODIFIERS_PROPERTY, pos);", "+\t\t} else {", "+\t\t\trewriteModifiers2(node, SingleVariableDeclaration.MODIFIERS2_PROPERTY, pos);", "+\t\t}", "-\t\tint pos= rewriteRequiredNode(node, SingleVariableDeclaration.NAME_PROPERTY);", "+\t\tif (node.getAST().apiLevel() >= AST.JLS3) {", "+\t\t\tif (isChanged(node, SingleVariableDeclaration.VARARGS_PROPERTY)) {", "+\t\t\t\tAssert.isTrue(false, \"Modifications of property \" + SingleVariableDeclaration.VARARGS_PROPERTY + \" not supported yet\");  //$NON-NLS-1$//$NON-NLS-2$", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tpos= rewriteRequiredNode(node, SingleVariableDeclaration.NAME_PROPERTY);"]}], "num": 22693}
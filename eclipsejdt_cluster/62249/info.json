{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3acfb848c9f4e9f0d3ed52e989ea8db9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "006dc60a70f8c20d8d3ef0e79ec22955", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java", "commitBeforeChange": "c62ecfd031507c11ea236866605fedd6f3a952c5", "commitAfterChange": "ded73445e8c5cf2db0a4abcc53e1680f02ae6cf7", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 337, "signatureBeforeChange": " public void testBug286601k()", "signatureAfterChange": " public void testBug330313_b286601_08()", "diff": ["-}", "-public void testBug286601k() {", "-\tthis.formatterPrefs.join_wrapped_lines = false;", "-\tthis.formatterPrefs.tab_char = DefaultCodeFormatterOptions.SPACE;", "-\tthis.formatterPrefs.alignment_for_expressions_in_array_initializer = DefaultCodeFormatterConstants.WRAP_ONE_PER_LINE;", "-\tsetUpBracesPreferences(DefaultCodeFormatterConstants.NEXT_LINE);", "-\tString source =", "-\t\t\"package massive;\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"public class X07 {\\n\" +", "-\t\t\"    private MinimizedFileSystemElement selectFiles(final Object rootFileSystemObject, final IImportStructureProvider structureProvider) {\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"        BusyIndicator.showWhile(getShell().getDisplay(), new Runnable() {\\n\" +", "-\t\t\"            public void run() {\\n\" +", "-\t\t\"                //Create the root element from the supplied file system object\\n\" +", "-\t\t\"            }\\n\" +", "-\t\t\"        });\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"        return null;\\n\" +", "-\t\t\"    }\\n\" +", "-\t\t\"}\\n\";", "-\tformatSource(source,", "-\t\t\"package massive;\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"public class X07\\n\" +", "-\t\t\"{\\n\" +", "-\t\t\"    private MinimizedFileSystemElement selectFiles(\\n\" +", "-\t\t\"            final Object rootFileSystemObject,\\n\" +", "-\t\t\"            final IImportStructureProvider structureProvider)\\n\" +", "-\t\t\"    {\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"        BusyIndicator.showWhile(getShell().getDisplay(), new Runnable()\\n\" +", "-\t\t\"        {\\n\" +", "-\t\t\"            public void run()\\n\" +", "-\t\t\"            {\\n\" +", "-\t\t\"                // Create the root element from the supplied file system object\\n\" +", "-\t\t\"            }\\n\" +", "-\t\t\"        });\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"        return null;\\n\" +", "-\t\t\"    }\\n\" +", "+}", "+public void testBug330313_b286601_08() {", "+\tthis.formatterPrefs.join_wrapped_lines = false;", "+\tthis.formatterPrefs.alignment_for_expressions_in_array_initializer = Alignment.M_ONE_PER_LINE_SPLIT;", "+\tsetUpBracesPreferences(DefaultCodeFormatterConstants.NEXT_LINE);", "+\tString source =", "+\t\t\"package b286601;\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"public class X08 {\\n\" + ", "+\t\t\"    private MinimizedFileSystemElement selectFiles(final Object rootFileSystemObject, final IImportStructureProvider structureProvider) {\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"        BusyIndicator.showWhile(getShell().getDisplay(), new Runnable() {\\n\" + ", "+\t\t\"            public void run() {\\n\" + ", "+\t\t\"                //Create the root element from the supplied file system object\\n\" + ", "+\t\t\"            }\\n\" + ", "+\t\t\"        });\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"        return null;\\n\" + ", "+\t\t\"    }\\n\" + ", "+\t\t\"}\\n\";", "+\tformatSource(source,", "+\t\t\"package b286601;\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"public class X08\\n\" + ", "+\t\t\"{\\n\" + ", "+\t\t\"\tprivate MinimizedFileSystemElement selectFiles(\\n\" + ", "+\t\t\"\t\t\tfinal Object rootFileSystemObject,\\n\" + ", "+\t\t\"\t\t\tfinal IImportStructureProvider structureProvider)\\n\" + ", "+\t\t\"\t{\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"\t\tBusyIndicator.showWhile(getShell().getDisplay(), new Runnable()\\n\" + ", "+\t\t\"\t\t{\\n\" + ", "+\t\t\"\t\t\tpublic void run()\\n\" + ", "+\t\t\"\t\t\t{\\n\" + ", "+\t\t\"\t\t\t\t// Create the root element from the supplied file system object\\n\" + ", "+\t\t\"\t\t\t}\\n\" + ", "+\t\t\"\t\t});\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"\t\treturn null;\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"}\\n\"", "+\t);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bacff966f3e0ee3cd50c2e04a1edf1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocBugsTest.java", "commitBeforeChange": "8d7196c62e122781f984b6fec99acaaaff2c9b12", "commitAfterChange": "c40d37b31933df685287603b7876ab2876472c95", "methodNumberBeforeChange": 221, "methodNumberAfterChange": 221, "signatureBeforeChange": " public void testBug233187b()", "signatureAfterChange": " public void testBug233187b()", "diff": ["-\tString[] units = new String[] {", "-\t\t\"X.java\",", "-\t\t\"package test.bug;\\n\" + ", "-\t\t\"\\n\" + ", "-\t\t\"public class X {\\n\" + ", "-\t\t\"   public static class Y {\\n\" + ", "-\t\t\"        public static class Z { \\n\" + ", "-\t\t\"            /**\\n\" + ", "-\t\t\"             * The position in the new method signature depends on\\n\" + ", "-\t\t\"             * the position in the array passed to\\n\" + ", "-\t\t\"             * {@link X.Y#foo(test.bug.X.Y.Z)} OK for javadoc tool\\n\" +", "-\t\t\"            * {@link X.Y#foo(test.bug.X.Y.Z[])} KO for javadoc tool\\n\" +", "-\t\t\"             * {@link X.Y#foo(no_test.bug.X.Y.Z)} KO for javadoc tool\\n\" +", "-\t\t\"             * {@link X.Y#foo(Y.Z)} KO for javadoc tool\\n\" +", "-\t\t\"             * {@link test.bug.X.Y#foo(Y.Z)} KO for javadoc tool\\n\" +", "-\t\t\"             */\\n\" + ", "-\t\t\"            public int bar() {\\n\" + ", "-\t\t\"                return 0;\\n\" + ", "-\t\t\"            }\\n\" + ", "-\t\t\"        }\\n\" + ", "-\t\t\"\\n\" + ", "-\t\t\"        public void foo(Z params) {\\n\" + ", "-\t\t\"        }\\n\" + ", "-\t\t\"    }\\n\" + ", "-\t\t\"}\\n\"", "-\t};", "-\trunNegativeTest(units,", "-\t\t// warning - Tag @link: can't find foo(test.bug.X.Y.Z[]) in test.bug.X.Y", "-\t\t// warning - Tag @link: can't find foo(no_test.bug.X.Y.Z) in test.bug.X.Y", "-\t\t// warning - Tag @link: can't find foo(Y.Z) in test.bug.X.Y", "-\t\t// warning - Tag @link: can't find foo(Y.Z) in test.bug.X.Y", "+\trunNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"test/b/X.java\",", "+\t\t\t\"package test.b;\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"   public static class Y {\\n\" + ", "+\t\t\t\"        public static class Z { \\n\" + ", "+\t\t\t\"            /**\\n\" + ", "+\t\t\t\"             * The position in the new method signature depends on\\n\" + ", "+\t\t\t\"             * the position in the array passed to\\n\" + ", "+\t\t\t\"             * {@link X.Y#foo(test.b.X.Y.Z)} OK for javadoc tool\\n\" +", "+\t\t\t\"            * {@link X.Y#foo(test.b.X.Y.Z[])} KO for javadoc tool\\n\" +", "+\t\t\t\"             * {@link X.Y#foo(no_test.b.X.Y.Z)} KO for javadoc tool\\n\" +", "+\t\t\t\"             * {@link X.Y#foo(Y.Z)} KO for javadoc tool\\n\" +", "+\t\t\t\"             * {@link test.b.X.Y#foo(Y.Z)} KO for javadoc tool\\n\" +", "+\t\t\t\"             */\\n\" + ", "+\t\t\t\"            public int bar() {\\n\" + ", "+\t\t\t\"                return 0;\\n\" + ", "+\t\t\t\"            }\\n\" + ", "+\t\t\t\"        }\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"        public void foo(Z params) {\\n\" + ", "+\t\t\t\"        }\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"}\\n\"", "+\t\t},", "+\t\t// warning - Tag @link: can't find foo(test.b.X.Y.Z[]) in test.b.X.Y", "+\t\t// warning - Tag @link: can't find foo(no_test.b.X.Y.Z) in test.b.X.Y", "+\t\t// warning - Tag @link: can't find foo(Y.Z) in test.b.X.Y", "+\t\t// warning - Tag @link: can't find foo(Y.Z) in test.b.X.Y", "-\t\t\"1. ERROR in X.java (at line 10)\\n\" + ", "-\t\t\"\t* {@link X.Y#foo(test.bug.X.Y.Z[])} KO for javadoc tool\\n\" + ", "+\t\t\"1. ERROR in test\\\\b\\\\X.java (at line 10)\\n\" + ", "+\t\t\"\t* {@link X.Y#foo(test.b.X.Y.Z[])} KO for javadoc tool\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\"\t* {@link X.Y#foo(no_test.bug.X.Y.Z)} KO for javadoc tool\\n\" + ", "-\t\t\"\t                 ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"2. ERROR in test\\\\b\\\\X.java (at line 11)\\n\" + ", "+\t\t\"\t* {@link X.Y#foo(no_test.b.X.Y.Z)} KO for javadoc tool\\n\" + ", "+\t\t\"\t                 ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\"3. ERROR in test\\\\b\\\\X.java (at line 12)\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 13)\\n\" + ", "-\t\t\"\t* {@link test.bug.X.Y#foo(Y.Z)} KO for javadoc tool\\n\" + ", "-\t\t\"\t                          ^^^\\n\" + ", "+\t\t\"4. ERROR in test\\\\b\\\\X.java (at line 13)\\n\" + ", "+\t\t\"\t* {@link test.b.X.Y#foo(Y.Z)} KO for javadoc tool\\n\" + ", "+\t\t\"\t                        ^^^\\n\" + "]}], "num": 62249}
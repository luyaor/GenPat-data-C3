{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d6fdc4254855446206c90fb4b12fe95", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bd0c962ad27cfaa58d73e3c252d0cbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "f6b16290d9141509dffddf2d9dc5a88115698e2a", "commitAfterChange": "16151d07e4904ee08ac48f6566d670b6d78a3084", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t\t\t\t\tpublic void endVisit(LambdaExpression expression, BlockScope dontCare)", "signatureAfterChange": " \t\t\t\t\tpublic void endVisit(LambdaExpression expression, BlockScope dontCare)", "diff": ["+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tLambdaExpression.this.shapeAnalysisComplete = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "891d1f3dd0c799d7058c354eea57a710", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "f6b16290d9141509dffddf2d9dc5a88115698e2a", "commitAfterChange": "16151d07e4904ee08ac48f6566d670b6d78a3084", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope blockScope)", "signatureAfterChange": " \t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope blockScope)", "diff": ["-\t\t\t\t\tASTVisitor visitor = new ASTVisitor() {", "-\t\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope blockScope) {", "-\t\t\t\t\t\t\tExpression expression = returnStatement.expression;", "-\t\t\t\t\t\t\tif (expression != null && !expression.isAssignmentCompatible(returnType, blockScope))", "-\t\t\t\t\t\t\t\tthrow new NoncongruentLambdaException();", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t}", "+\t\t\t\tASTVisitor visitor = new ASTVisitor() {", "+\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope blockScope) {", "+\t\t\t\t\t\tExpression expression = returnStatement.expression;", "+\t\t\t\t\t\tif (expression != null && !expression.isAssignmentCompatible(returnType, blockScope))", "+\t\t\t\t\t\t\tthrow new IncongruentLambdaException();", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}"]}], "num": 69952}
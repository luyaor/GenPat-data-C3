{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "577d80623f482e66b6d9d2ec3b877141", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0983e2eacf739e9d12c9d58b0edce209", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "874e2c41609c64af417834df9af2e898d8dcf37a", "commitAfterChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " public void test_nonnull_return_009b()", "signatureAfterChange": " public void _test_nonnull_return_009b()", "diff": ["-public void test_nonnull_return_009b() {", "+public void _test_nonnull_return_009b() {", "-\trunNegativeTestWithLibs(", "+\trunConformTestWithLibs(", "-// Ideally we would see a second error, but when comparing local (depends on loop) with @NonNull", "-// we would have to include @NonNull into deferred checking :(", "-//\t\t\"----------\\n\" +", "-//\t\t\"2. ERROR in X.java (at line 9)\\n\" +", "-//\t\t\"\tif (left != getObject())\\n\" +", "-//\t\t\"\t            ^^^^^^^^^^^\\n\" +", "-//\t\t\"Redundant null check: The method getObject() cannot return null\\n\" +", "+\t\t\"----------\\n\" +", "+\t\t\"2. ERROR in X.java (at line 9)\\n\" +", "+\t\t\"\tif (left != getObject())\\n\" +", "+\t\t\"\t            ^^^^^^^^^^^\\n\" +", "+\t\t\"Redundant null check: The method getObject() cannot return null\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5db91ae06632974f5dfe8f6816bde41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "8c93d4e99b8a943865cb7391e781eba5bb83dfc9", "commitAfterChange": "bd0edd7688142c1743cb6b10766dfc576040f113", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " public void _test_nonnull_return_009b()", "signatureAfterChange": " public void test_nonnull_return_009b()", "diff": ["-public void _test_nonnull_return_009b() {", "+public void test_nonnull_return_009b() {", "-\trunConformTestWithLibs(", "+\trunNegativeTestWithLibs(", "-\t\t\"----------\\n\" +", "-\t\t\"2. ERROR in X.java (at line 9)\\n\" +", "-\t\t\"\tif (left != getObject())\\n\" +", "-\t\t\"\t            ^^^^^^^^^^^\\n\" +", "-\t\t\"Redundant null check: The method getObject() cannot return null\\n\" +", "+// Ideally we would see a second error, but when comparing local (depends on loop) with @NonNull", "+// we would have to include @NonNull into deferred checking :(", "+//\t\t\"----------\\n\" +", "+//\t\t\"2. ERROR in X.java (at line 9)\\n\" +", "+//\t\t\"\tif (left != getObject())\\n\" +", "+//\t\t\"\t            ^^^^^^^^^^^\\n\" +", "+//\t\t\"Redundant null check: The method getObject() cannot return null\\n\" +"]}], "num": 6756}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "beeaaa07fa65517dee70cf2fd2850e88", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "778118e5290064084bbe480a453c16cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TestAll.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": " public static Test suite()", "diff": ["-}", "-\tTestSuite suite = new TestSuite(TestAll.class.getName());", "+\tArrayList standardTests = new ArrayList();", "+\tstandardTests.add(AnnotationTest.class);", "+\tstandardTests.add(ArrayTest.class);", "+\tstandardTests.add(AssignmentTest.class);", "+\tstandardTests.add(BatchCompilerTest.class);", "+\tstandardTests.add(BooleanTest.class);", "+\tstandardTests.add(CastTest.class);", "+\tstandardTests.add(ClassFileComparatorTest.class);", "+\tstandardTests.add(ClassFileReaderTest.class);", "+\tstandardTests.add(ConstantTest.class);", "+\tstandardTests.add(DeprecatedTest.class);", "+\tstandardTests.add(LocalVariableTest.class);", "+\tstandardTests.add(LookupTest.class);", "+\tstandardTests.add(NumericTest.class);", "+\tstandardTests.add(ProblemConstructorTest.class);", "+\tstandardTests.add(ScannerTest.class);", "+\tstandardTests.add(SwitchTest.class);", "+\tstandardTests.add(TryStatementTest.class);", "+\tstandardTests.add(UtilTest.class);", "+\tstandardTests.add(XLargeTest.class);", "-\tString specVersion = System.getProperty(\"java.specification.version\");", "-\tif (!\"1.0\".equals(specVersion) && !\"1.1\".equals(specVersion) && !\"1.2\".equals(specVersion) && !\"1.3\".equals(specVersion)) {", "-\t\taddTest(suite, AssertionTest.class);", "-\t\taddTest(suite, Compliance_1_4.class);\t", "+\tTestSuite all = new TestSuite(TestAll.class.getName());", "+\tint possibleComplianceLevels = AbstractCompilerTest.getPossibleComplianceLevels();", "+\tif ((possibleComplianceLevels & AbstractCompilerTest.F_1_3) != 0) {", "+\t\tstandardTests.add(Compliance_1_3.class);", "+\t\tall.addTest(AbstractCompilerTest.suiteForComplianceLevel(AbstractCompilerTest.COMPLIANCE_1_3, RegressionTestSetup.class, standardTests));", "-", "-\taddTest(suite, AnnotationTest.class);", "-\taddTest(suite, ArrayTest.class);", "-\taddTest(suite, AssignmentTest.class);", "-\taddTest(suite, BatchCompilerTest.class);", "-\taddTest(suite, BooleanTest.class);", "-\taddTest(suite, CastTest.class);", "-\taddTest(suite, ClassFileComparatorTest.class);", "-\taddTest(suite, ClassFileReaderTest.class);", "-\taddTest(suite, Compliance_1_3.class);\t", "-\taddTest(suite, ConstantTest.class);", "-\taddTest(suite, DeprecatedTest.class);", "-\taddTest(suite, LocalVariableTest.class);", "-\taddTest(suite, LookupTest.class);", "-\taddTest(suite, NumericTest.class);", "-\taddTest(suite, ProblemConstructorTest.class);", "-\taddTest(suite, ScannerTest.class);", "-\taddTest(suite, SwitchTest.class);", "-\taddTest(suite, TryStatementTest.class);", "-\taddTest(suite, UtilTest.class);", "-\taddTest(suite, XLargeTest.class);", "-", "-\treturn new RegressionTestSetup(suite);", "+\tif ((possibleComplianceLevels & AbstractCompilerTest.F_1_4) != 0) {", "+\t\tstandardTests.remove(Compliance_1_3.class);", "+\t\tstandardTests.add(AssertionTest.class);", "+\t\tstandardTests.add(Compliance_1_4.class);\t", "+\t\tall.addTest(AbstractCompilerTest.suiteForComplianceLevel(AbstractCompilerTest.COMPLIANCE_1_4, RegressionTestSetup.class, standardTests));", "+\t}", "+\tif ((possibleComplianceLevels & AbstractCompilerTest.F_1_5) != 0) {", "+\t\tall.addTest(AbstractCompilerTest.suiteForComplianceLevel(AbstractCompilerTest.COMPLIANCE_1_5, RegressionTestSetup.class, standardTests));", "+\t}", "+\treturn all;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd4d825b1aa965972105f859f53ac186", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TestAll.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": " \t \tpublic static Test suite()", "diff": ["-}", "-public static Test suite() {", "-\tTestSuite suite = new TestSuite(TestAll.class.getName());", "-\t/* completion tests */", "-\taddTest(suite, AllocationExpressionCompletionTest.class);", "-\taddTest(suite, ClassLiteralAccessCompletionTest.class);", "-\taddTest(suite, CompletionParserTest.class);", "-\taddTest(suite, CompletionRecoveryTest.class);", "-\taddTest(suite, DietCompletionTest.class);", "-\taddTest(suite, ExplicitConstructorInvocationCompletionTest.class);", "-\taddTest(suite, FieldAccessCompletionTest.class);", "-\taddTest(suite, InnerTypeCompletionTest.class);", "-\taddTest(suite, LabelStatementCompletionTest.class);", "-\taddTest(suite, MethodInvocationCompletionTest.class);", "-\taddTest(suite, NameReferenceCompletionTest.class);", "-\taddTest(suite, ReferenceTypeCompletionTest.class);", "-\taddTest(suite, CompletionParserTest2.class);", "-\taddTest(suite, CompletionParserTestKeyword.class);", "+\tpublic static Test suite() {", "+\t\tArrayList testClasses = new ArrayList();", "-\t/* selection tests */", "-\taddTest(suite, ExplicitConstructorInvocationSelectionTest.class);", "-\taddTest(suite, SelectionTest.class);", "-\taddTest(suite, SelectionTest2.class);", "+\t\t/* completion tests */", "+\t\ttestClasses.add(AllocationExpressionCompletionTest.class);", "+\t\ttestClasses.add(ClassLiteralAccessCompletionTest.class);", "+\t\ttestClasses.add(CompletionParserTest.class);", "+\t\ttestClasses.add(CompletionRecoveryTest.class);", "+\t\ttestClasses.add(DietCompletionTest.class);", "+\t\ttestClasses.add(ExplicitConstructorInvocationCompletionTest.class);", "+\t\ttestClasses.add(FieldAccessCompletionTest.class);", "+\t\ttestClasses.add(InnerTypeCompletionTest.class);", "+\t\ttestClasses.add(LabelStatementCompletionTest.class);", "+\t\ttestClasses.add(MethodInvocationCompletionTest.class);", "+\t\ttestClasses.add(NameReferenceCompletionTest.class);", "+\t\ttestClasses.add(ReferenceTypeCompletionTest.class);", "+\t\ttestClasses.add(CompletionParserTest2.class);", "+\t\ttestClasses.add(CompletionParserTestKeyword.class);", "-\t/* recovery tests */", "-\taddTest(suite, DietRecoveryTest.class);", "+\t\t/* selection tests */", "+\t\ttestClasses.add(ExplicitConstructorInvocationSelectionTest.class);", "+\t\ttestClasses.add(SelectionTest.class);", "+\t\ttestClasses.add(SelectionTest2.class);", "-\t/* source element parser tests */", "-\taddTest(suite, SourceElementParserTest.class);", "+\t\t/* recovery tests */", "+\t\ttestClasses.add(DietRecoveryTest.class);", "-\t/* syntax error diagnosis tests */", "-\taddTest(suite, SyntaxErrorTest.class);", "-\taddTest(suite, DualParseSyntaxErrorTest.class);", "-\taddTest(suite, ParserTest.class);", "+\t\t/* source element parser tests */", "+\t\ttestClasses.add(SourceElementParserTest.class);", "-\treturn suite;", "-}", "+\t\t/* syntax error diagnosis tests */", "+\t\ttestClasses.add(SyntaxErrorTest.class);", "+\t\ttestClasses.add(DualParseSyntaxErrorTest.class);", "+\t\ttestClasses.add(ParserTest.class);", "+", "+\t\treturn AbstractCompilerTest.suite(TestAll.class.getName(), CompilerTestSetup.class, testClasses);", "+\t}"]}], "num": 15529}
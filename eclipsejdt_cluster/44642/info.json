{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74a5763dde8e11cf5e222259b3af1ede", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14163ea93f0515f2102c60c6b722fb18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "c16162b1194f3110eda140f5ccdd35c2ba36455d", "commitAfterChange": "8d1ff9b80d2587df4aa2d0a1ee1f5a75472a5feb", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r public void indexJarFile(IPath path, String projectName)", "signatureAfterChange": "\r public void indexLibrary(IPath path, IProject referingProject)", "diff": ["-public void indexJarFile(IPath path, String projectName) {\r", "+public void indexLibrary(IPath path, IProject referingProject) {\r", "-\t\trequest(new AddJarFileToIndex((IFile)target, this, projectName));\r", "-\t} else if (target instanceof java.io.File){\r", "-\t\trequest(new AddJarFileToIndex(path, this, projectName));\r", "-\t}\r", "+\t\tthis.request(new AddJarFileToIndex((IFile)target, this, referingProject.getName()));\r", "+\t} else if (target instanceof java.io.File) {\r", "+\t\tthis.request(new AddJarFileToIndex(path, this, referingProject.getName()));\r", "+\t} else if (target instanceof IFolder) {\r", "+\t\tthis.request(new IndexBinaryFolder((IFolder)target, this, referingProject));\r", "+\t} \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1576cf2666ca4aed3f2a9d28f1e105a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "359491f54e3ca885feab917a3aebfe3326bcb185", "commitAfterChange": "f756d2d03155bc3d579dba2d865f9a5c53026d3d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tIBinding resolveName(Name name)", "signatureAfterChange": "\r \tIBinding resolveName(Name name)", "diff": ["+\t\tif (parent instanceof MethodDeclaration) {\r", "+\t\t\treturn this.resolveMethod((MethodDeclaration)parent);\r", "+\t\t}\r", "+\t\tif (parent instanceof TypeDeclaration) {\r", "+\t\t\treturn this.resolveType((TypeDeclaration)parent);\r", "+\t\t}\r", "-\t\t\treturn internalResolveNameForMethodInvocation(name);\r", "+\t\t\treturn this.internalResolveNameForMethodInvocation(name);\r", "-\t\t\treturn internalResolveNameForFieldAccess(name);\r", "+\t\t\treturn this.internalResolveNameForFieldAccess(name);\r", "-\t\t\treturn internalResolveNameForPackageDeclaration(name);\r", "+\t\t\treturn this.internalResolveNameForPackageDeclaration(name);\r", "-\t\t\treturn internalResolveNameForSimpleType(name);\r", "+\t\t\treturn this.internalResolveNameForSimpleType(name);\r", "-\t\t\treturn internalResolveNameForThisExpression(name);\r", "+\t\t\treturn this.internalResolveNameForThisExpression(name);\r", "-\t\t\treturn internalResolveNameForQualifiedName(name);\r", "+\t\t\treturn this.internalResolveNameForQualifiedName(name);\r", "-\t\t\treturn internalResolveNameForSimpleName(name);\r", "+\t\t\treturn this.internalResolveNameForSimpleName(name);\r"]}], "num": 44642}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1aae05498d662a4828269a385e66c866", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02b5e72e0025ec25bd2ab0e9d8ab6745", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/SourceIndexer.java", "commitBeforeChange": "f4280b902ee434925603ab3160f9ac7e41c27ef9", "commitAfterChange": "02a355dfd5d36ce03dbd8b4f266e2425493b04cb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void indexDocument()", "signatureAfterChange": " \tpublic void indexDocument()", "diff": ["-\t\tIProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(path.segment(0));", "-\t\tMap options = JavaCore.create(project).getOptions(true);", "-\t\t// disable task tags to speed up parsing", "-\t\toptions.put(JavaCore.COMPILER_TASK_TAGS, \"\"); //$NON-NLS-1$", "-\t\tSourceElementParser parser = new SourceElementParser(", "-\t\t\trequestor, ", "-\t\t\tthis.problemFactory, ", "-\t\t\tnew CompilerOptions(options), ", "-\t\t\ttrue, // index local declarations", "-\t\t\ttrue, // optimize string literals", "-\t\t\tfalse); // do not use source javadoc parser to speed up parsing", "-\t\tparser.reportOnlyOneSyntaxError = true;", "-\t", "-\t\t// Always check javadoc while indexing", "-\t\tparser.javadocParser.checkDocComment = true;", "-\t\tparser.javadocParser.reportProblems = false;", "+\t\tSourceElementParser parser = this.document.parser;", "+\t\tif (parser == null) {", "+\t\t\tIProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(path.segment(0));", "+\t\t\tparser = JavaModelManager.getJavaModelManager().indexManager.getSourceElementParser(JavaCore.create(project), requestor);", "+\t\t} else {", "+\t\t\tparser.requestor = requestor;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc632157280bc625e4a905efbb379cd7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java", "commitBeforeChange": "0747d5e7c6159c917fde8175fc9c67a8bade55fc", "commitAfterChange": "07efa537488d0df9da9dc6880afc536aaccc6b60", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  private void setupExternalAnnotationProvider(IProject project, final IPath externalAnnotationPath, \t\tZipFile annotationZip, ClassFileReader reader, final String typeName)", "signatureAfterChange": "  private void setupExternalAnnotationProvider(IProject project, final IPath externalAnnotationPath, \t\tZipFile annotationZip, ClassFileReader reader, final String typeName)", "diff": ["-\tIResource resource = root.getFolder(externalAnnotationPath);", "+\tIResource resource = externalAnnotationPath.segmentCount() == 1", "+\t\t\t? root.getProject(externalAnnotationPath.lastSegment())", "+\t\t\t: root.getFolder(externalAnnotationPath);", "-\tString resolvedPath = resource.exists()", "-\t\t\t\t\t\t\t? resource.getLocation().toString() // workspace lookup succeeded -> resolve it", "-\t\t\t\t\t\t\t: externalAnnotationPath.toString(); // not in workspace, use as is", "+\tString resolvedPath;", "+\tif (resource.exists()) {", "+\t\tif (resource.isVirtual()) {", "+\t\t\tUtil.log(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, ", "+\t\t\t\t\t\"Virtual resource \"+externalAnnotationPath+\" cannot be used as annotationpath for project \"+project.getName())); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\treturn;", "+\t\t}", "+\t\tresolvedPath = resource.getLocation().toString(); // workspace lookup succeeded -> resolve it", "+\t} else {", "+\t\tresolvedPath = externalAnnotationPath.toString(); // not in workspace, use as is", "+\t}"]}], "num": 33816}
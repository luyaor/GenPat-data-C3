{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "11dfbc0ba9ee184a5a3b10a7c020ac7c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d88dbdf79081b0e4414e9bcc6a07bb27", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "2a3cfde3c43eda7373112848bd26e889dafe74d6", "commitAfterChange": "c775c1d0f23881553fb0e260a70314c10cea2026", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " public void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " public void configure(String[] argv) throws InvalidInputException", "diff": ["+\tboolean didSpecifyDeprecation = false;", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_ReportDeprecationInNonDeprecatedCode, CompilerOptions.ENABLED);", "+\t\t\t\t\tdidSpecifyDeprecation = true;", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);", "+", "+\t\t\t\t\tif (didSpecifyDeprecation) {  // deprecation could have also been set through -deprecation option", "+\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);", "+\t\t\t\t\t}", "+", "-\t\t// defaults may have been overridden", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportUnusedParameterIncludeDocCommentReference,", "-\t\t\tCompilerOptions.ENABLED);", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionIncludeDocCommentReference,", "-\t\t\tCompilerOptions.ENABLED);", "-\t}", "-\t// configure deprecation level", "-\tif (this.options.get(CompilerOptions.OPTION_ReportDeprecationInNonDeprecatedCode) == CompilerOptions.ENABLED ||", "-\t\t\tthis.options.get(CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode) == CompilerOptions.ENABLED) {", "-\t\tthis.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);", "-\t\t// the default may have been reset", "-\t} else {", "-\t\tthis.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.IGNORE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff14950b16c989aa704c38df00bf5cab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "6cd0099c2021e34815eaba987a586ae52dacf569", "commitAfterChange": "d6dc74869d8c303dbb7a6d8b327d8b104cd5865b", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t \tpublic boolean isCompatibleWith(TypeBinding targetType, Scope scope)", "signatureAfterChange": " \tprivate ReferenceExpression cachedResolvedCopy(TypeBinding targetType)", "diff": ["+\t// Cache resolved copies against various target types, so repeat overload resolution and possibly type inference could be avoided.", "+\tprivate ReferenceExpression cachedResolvedCopy(TypeBinding targetType) {", "+", "+\t\t\t", "+\t\t\tif (this.copiesPerTargetType == null)", "+\t\t\t\tthis.copiesPerTargetType = new HashMap<TypeBinding, ReferenceExpression>();", "+\t\t\tthis.copiesPerTargetType.put(targetType, copy);", "+\t\t\t", "+\t\t\treturn copy;", "-\t\tReferenceExpression copy = this.copiesPerTargetType != null ? this.copiesPerTargetType.get(targetType) : null;", "-\t\tif (copy != null)", "-\t\t\treturn copy.resolvedType != null && copy.resolvedType.isValidBinding() && copy.binding != null && copy.binding.isValidBinding();", "-\t\t", "-\t\t// 15.13.2", "-\t\tfinal MethodBinding sam = targetType.getSingleAbstractMethod(this.enclosingScope, true);", "-\t\tif (sam == null || !sam.isValidBinding())", "-\t\t\treturn false;", "-\t\tIErrorHandlingPolicy oldPolicy = this.enclosingScope.problemReporter().switchErrorHandlingPolicy(silentErrorHandlingPolicy);", "-\t\ttry {", "-\t\t\tcopy = copy();", "-\t\t\tif (copy == null) { // should never happen even for code assist.", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tcopy.setExpressionContext(this.expressionContext);", "-\t\t\tcopy.setExpectedType(targetType);", "-\t\t\tcopy.resolveType(this.enclosingScope);", "-\t\t\tregisterCopy(targetType, copy);", "-\t\t\treturn copy.resolvedType != null && copy.resolvedType.isValidBinding() && copy.binding != null && copy.binding.isValidBinding();", "-\t\t} finally {", "-\t\t\tthis.enclosingScope.problemReporter().switchErrorHandlingPolicy(oldPolicy);", "-\t\t}"]}], "num": 71370}
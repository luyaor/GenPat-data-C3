{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "432a7fbed27ea97e54ef5df12efcfd9b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cbbe6a3a958db6455f2f21c5df3b54a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/NullInfoRegistry.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public NullInfoRegistry(UnconditionalFlowInfo upstream)", "signatureAfterChange": " public NullInfoRegistry(UnconditionalFlowInfo upstream)", "diff": ["-\t\tlong a1, a2, a3, b1nb2, b3, b4;", "-\t\ta1 = this.nullAssignmentStatusBit1 = ", "-\t\t\t(b1nb2 = upstream.nullAssignmentStatusBit1 ", "-\t\t\t\t\t&  ~upstream.nullAssignmentStatusBit2)", "-\t\t\t\t& (b3 = upstream.nullAssignmentValueBit1)", "-\t\t\t\t& ~(b4 = upstream.nullAssignmentValueBit2);", "-\t\ta2 = this.nullAssignmentStatusBit2 =", "-\t\t\tb1nb2 & ~b3 & b4;", "-\t\ta3 = this.nullAssignmentValueBit1 =", "-\t\t\tb1nb2 & b3 & b4;", "-\t\tif ((a1 | a2 | a3) != 0) {", "+\t\tlong u1, u2, u3, u4, nu2, nu3, nu4;", "+\t\tthis.nullBit2 = (u1 = upstream.nullBit1)", "+\t\t\t& (u2 = upstream.nullBit2)", "+\t\t\t& (nu3 = ~(u3 = upstream.nullBit3))", "+\t\t\t& (nu4 = ~(u4 = upstream.nullBit4));", "+\t\tthis.nullBit3 =\tu1 & (nu2 = ~u2) & u3 & nu4;", "+\t\tthis.nullBit4 =\tu1 & nu2 &nu3 & u4;", "+\t\tif ((this.nullBit2 | this.nullBit3 | this.nullBit4) != 0) {", "-\t\t\tint length= upstream.extra[2].length;", "+\t\t\tint length = upstream.extra[2].length;", "-\t\t\t\ta1 = this.extra[2][i] = ", "-\t\t\t\t\t(b1nb2 = upstream.extra[2][i] ", "-\t\t\t\t\t\t\t& ~upstream.extra[3][i])", "-\t\t\t\t\t\t& (b3 = upstream.extra[4][i])", "-\t\t\t\t\t\t& ~(b4 = upstream.extra[5][i]);", "-\t\t\t\ta2 = this.extra[3][i] =", "-\t\t\t\t\tb1nb2 & ~b3 & b4;", "-\t\t\t\ta3 = this.extra[4][i] =", "-\t\t\t\t\tb1nb2 & b3 & b4;", "-\t\t\t\tif ((a1 | a2 | a3) != 0) {", "-\t\t\t\t\tthis.tagBits |= NULL_FLAG_MASK;", "-\t\t\t\t}", "+        \t\tthis.extra[2 + 1][i] = (u1 = upstream.extra[1 + 1][i])", "+        \t\t\t& (u2 = upstream.extra[2 + 1][i])", "+        \t\t\t& (nu3 = ~(u3 = upstream.extra[3 + 1][i]))", "+        \t\t\t& (nu4 = ~(u4 = upstream.extra[4 + 1][i]));", "+        \t\tthis.extra[3 + 1][i] =\tu1 & (nu2 = ~u2) & u3 & nu4;", "+        \t\tthis.extra[4 + 1][i] =\tu1 & nu2 &nu3 & u4;", "+        \t\tif ((this.extra[2 + 1][i] | this.extra[3 + 1][i] | this.extra[4 + 1][i]) != 0) {", "+        \t\t\tthis.tagBits |= NULL_FLAG_MASK;", "+        \t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b61cdeec7487094f3bbddc7599760e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": "  public void markAsComparedEqualToNonNull(LocalVariableBinding local)", "signatureAfterChange": "  public void markAsComparedEqualToNull(LocalVariableBinding local)", "diff": ["-\t\t\tif (((mask = 1L << position) & // leave assigned non null unchanged ", "-\t\t\t\t\tthis.nullAssignmentStatusBit1 &", "-\t\t\t\t\t~this.nullAssignmentStatusBit2 &", "-\t\t\t\t\t~this.nullAssignmentValueBit1 &", "-\t\t\t\t\tthis.nullAssignmentValueBit2) == 0) {", "-\t\t\t\t// set protected non null", "-\t\t\t\tthis.nullAssignmentStatusBit1 |= mask;", "-\t\t\t\tthis.nullAssignmentStatusBit2 |= mask;", "-\t\t\t\t // clear potential null", "-\t\t\t\tthis.nullAssignmentValueBit1 &= ~mask;", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 19) {", "-\t\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "-\t\t\t\t}", "-\t\t\tif (coverageTestFlag && coverageTestId == 20) {", "-\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 21) {", "-\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 21\"); //$NON-NLS-1$", "-\t\t\t\t\tif (coverageTestFlag && coverageTestId == 22) {", "-\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 22\"); //$NON-NLS-1$", "-\t\t\tif (((mask = 1L << (position % BitCacheSize)) & ", "-\t\t\t\t\tthis.extra[2][vectorIndex] &", "-\t\t\t\t\t~this.extra[3][vectorIndex] &", "-\t\t\t\t\t~this.extra[4][vectorIndex] &", "-\t\t\t\t\tthis.extra[5][vectorIndex]) == 0) {", "-\t\t\t\tthis.extra[2][vectorIndex] |= mask;", "-\t\t\t\tthis.extra[3][vectorIndex] |= mask;", "-\t\t\t\tthis.extra[4][vectorIndex] &= ~mask;", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 23) {", "-\t\t\t\t\tthis.extra[5][vectorIndex] = ~0;", "-\t\t\t\t}", "+\t\tlong mask;", "+\t\t\tif (((mask = 1L << position) & this.nullBit1) != 0) {", "+  \t\t\t  \tif ((mask  ", "+  \t\t\t  \t\t& (~this.nullBit2 | this.nullBit3", "+  \t\t\t  \t\t\t| ~this.nullBit4)) != 0) {", "+  \t\t\t  \t  \tthis.nullBit4 &= ~mask;", "+  \t\t\t  \t}", "+\t\t\t} else if ((mask & this.nullBit4) != 0) {", "+\t\t\t  \t  this.nullBit3 &= ~mask;", "+\t\t\t} else {", "+    \t\t\tif ((mask & this.nullBit2) != 0) {", "+    \t\t\t  \tthis.nullBit3 &= ~mask;", "+      \t\t\t  \tthis.nullBit4 |= mask;", "+    \t\t\t} else {", "+    \t\t\t  \tthis.nullBit3 |= mask;", "+    \t\t\t}", "+\t\t\tthis.nullBit1 |= mask;", "+\t\t\tthis.nullBit2 |= mask; ", "+\t\t\tif (coverageTestFlag && coverageTestId == 19) {", "+\t\t\t  \tthis.nullBit4 = ~0;", "+\t\t\t\tif (coverageTestFlag && coverageTestId == 20) {", "+\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 20\"); //$NON-NLS-1$", "+\t\t\t\t\tif (coverageTestFlag && coverageTestId == 21) {", "+\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 21\"); //$NON-NLS-1$", "+\t\t\tif ((mask & this.extra[1 + 1][vectorIndex]) != 0) {", "+  \t\t\t  \tif ((mask  ", "+  \t\t\t  \t\t& (~this.extra[2 + 1][vectorIndex] | this.extra[3 + 1][vectorIndex]", "+  \t\t\t  \t\t\t| ~this.extra[4 + 1][vectorIndex])) != 0) {", "+  \t\t\t  \t  \tthis.extra[4 + 1][vectorIndex] &= ~mask;", "+  \t\t\t  \t}", "+\t\t\t} else if ((mask & this.extra[4 + 1][vectorIndex]) != 0) {", "+\t\t\t  \t  this.extra[3 + 1][vectorIndex] &= ~mask;", "+\t\t\t} else {", "+    \t\t\tif ((mask & this.extra[2 + 1][vectorIndex]) != 0) {", "+    \t\t\t  \tthis.extra[3 + 1][vectorIndex] &= ~mask;", "+      \t\t\t  \tthis.extra[4 + 1][vectorIndex] |= mask;", "+    \t\t\t} else {", "+    \t\t\t  \tthis.extra[3 + 1][vectorIndex] |= mask;", "+    \t\t\t}", "+\t\t\tthis.extra[1 + 1][vectorIndex] |= mask;", "+\t\t\tthis.extra[2 + 1][vectorIndex] |= mask; "]}], "num": 49939}
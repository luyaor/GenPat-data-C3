{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b5fed2e75fae99f5ef4a090a7f268ef", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58d08590689ff177303927d6d6419796", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "c22ae4e2acd996824ff94a2b0edaa0df69d9b3b1", "commitAfterChange": "1eeba055c4a858ddea83f6c85864678280808173", "methodNumberBeforeChange": 294, "methodNumberAfterChange": 294, "signatureBeforeChange": " protected void consumeReferenceExpressionTypeForm(boolean isPrimitive)", "signatureAfterChange": " protected void consumeReferenceExpressionTypeForm(boolean isPrimitive)", "diff": ["-protected void consumeReferenceExpressionTypeForm(boolean isPrimitive) {", "+protected void consumeReferenceExpressionTypeForm(boolean isPrimitive) { // actually Name or Type form.", "-\tReferenceExpression rexp;", "-\tTypeReference type = null;", "+\tReferenceExpression referenceExpression;", "-\tSingleNameReference methodReference = null;", "-\tint newEnd = -1;", "+\tSingleNameReference method;", "+\tint sourceEnd;", "-\t\tnewEnd = this.intStack[this.intPtr--] + 3; // \"new\"", "+\t\tmethod = null;", "+\t\tsourceEnd = this.intStack[this.intPtr--] + 3; // \"new\"", "-\t\tmethodReference = new SingleNameReference(this.identifierStack[this.identifierPtr], this.identifierPositionStack[this.identifierPtr--]);", "+\t\tmethod = new SingleNameReference(this.identifierStack[this.identifierPtr], this.identifierPositionStack[this.identifierPtr--]);", "+\t\tsourceEnd = method.sourceEnd;", "-\t// TODO(Srikanth) : Handle ambiguity with NameReference.", "+\tint dimension = this.intStack[this.intPtr--];", "+\tboolean typeAnnotatedName = false;", "+\tfor (int i = this.identifierLengthStack[this.identifierLengthPtr], j = 0; i > 0 && this.typeAnnotationLengthPtr >= 0; --i, j++) {", "+\t\tlength = this.typeAnnotationLengthStack[this.typeAnnotationLengthPtr - j];", "+\t\tif (length != 0) {", "+\t\t\ttypeAnnotatedName = true;", "+\t\t\tbreak;", "+\t\t}", "+\t}", "-\tif (!isPrimitive) { // handle type arguments", "-\t\tpushOnGenericsLengthStack(0);", "-\t\tpushOnGenericsIdentifiersLengthStack(this.identifierLengthStack[this.identifierLengthPtr]);", "-\t}", "-", "-\ttype = getTypeReference(this.intStack[this.intPtr--]);", "-", "-\tif (newForm) {", "-\t\trexp = new ReferenceExpression(type, typeArguments, newEnd);", "+\tif (dimension > 0 || typeAnnotatedName) {", "+\t\tif (!isPrimitive) {", "+\t\t\tpushOnGenericsLengthStack(0);", "+\t\t\tpushOnGenericsIdentifiersLengthStack(this.identifierLengthStack[this.identifierLengthPtr]);", "+\t\t}", "+\t\treferenceExpression = new ReferenceExpression(getTypeReference(dimension), typeArguments, method, sourceEnd);", "-\t\trexp = new ReferenceExpression(type, typeArguments, methodReference);", "+\t\treferenceExpression = new ReferenceExpression(getUnspecifiedReference(), typeArguments, method, sourceEnd);", "+\tpushOnExpressionStack(referenceExpression);", "-\tpushOnExpressionStack(rexp);", "-\t\tproblemReporter().referenceExpressionsNotBelow18(rexp);", "+\t\tproblemReporter().referenceExpressionsNotBelow18(referenceExpression);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a135c61d3d91c11d1e4539ecf2944a12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 237, "methodNumberAfterChange": 279, "signatureBeforeChange": " protected void consumePotentialNameArrayType ()", "signatureAfterChange": " protected void consumeNonTypeUseName()", "diff": ["-protected void consumePotentialNameArrayType () {", "-\t", "-\t// FormalParameter ::= Modifiersopt Name DimsoptAnnotsopt PotentialNameArray VariableDeclaratorId", "-\t// FormalParameter ::= Modifiersopt Name DimsoptAnnotsopt PotentialNameArray '...' VariableDeclaratorId", "-\t// PotentialNameArray -> $empty", "-\t// Dimensions including lack of have been pushed appropriately by action attached to DimsoptAnnotsopt", "-\tpushOnGenericsLengthStack(0); // handle type arguments", "-\tpushOnGenericsIdentifiersLengthStack(this.identifierLengthStack[this.identifierLengthPtr]);", "+protected void consumeNonTypeUseName() { // https://bugs.eclipse.org/bugs/show_bug.cgi?id=383596", "+\t// NonTypeUseName ::= $empty", "+\t// We can get here with type annotation stack empty, because completion parser manipulates the identifier stacks even without rule reduction. See completionIdentifierCheck", "+\tfor (int i = this.identifierLengthStack[this.identifierLengthPtr]; i > 0 && this.typeAnnotationLengthPtr >= 0; --i) {", "+\t\tint length = this.typeAnnotationLengthStack[this.typeAnnotationLengthPtr--];", "+\t\tAnnotation [] typeAnnotations;", "+\t\tif (length != 0) {", "+\t\t\t\t\t(this.typeAnnotationPtr -= length) + 1,", "+\t\t\t\t\ttypeAnnotations = new Annotation[length],", "+\t\t\t\t\tlength);", "+\t\t\tproblemReporter().misplacedTypeAnnotations(typeAnnotations[0], typeAnnotations[typeAnnotations.length - 1]);"]}], "num": 23268}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68583662b2ec62f029ed8597601c6a08", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "427b1fed2e7c3d34234b9f6863714c7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "d631dde006e13a4aa256514c7e3613e700c16952", "commitAfterChange": "b5d195c8bcb06d018e8cb20f749f8c2a6d92997c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["-\t\t\tboolean hasNonNullDefault, boolean shouldComplain,", "+\t\t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean shouldComplain,", "-\t\t\t\t\t\tif (hasNonNullDefault) {", "+\t\t\t\t\t\tif (hasReturnNonNullDefault) {", "-\t\t\t\tif (hasNonNullDefault) { // conflict with inheritance already checked", "+\t\t\t\tif (hasReturnNonNullDefault) { // conflict with inheritance already checked", "-\t\t\t\t\t\tif (hasNonNullDefault) {", "+\t\t\t\t\t\tif (hasParameterNonNullDefault) {", "-\t\t\t\tif (hasNonNullDefault) { // conflict with inheritance already checked", "+\t\t\t\tif (hasParameterNonNullDefault) { // conflict with inheritance already checked"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1ae10ccb7b9317fb4ddb683b2100868", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "364abd1fe47d562f576cb6b54a083094e0671f23", "commitAfterChange": "1b555425db41a9eb4fba300521a43b3ff494a42f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, MethodBinding[] allInheritedMethods, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["-\t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos) ", "+\t\t\tMethodBinding inheritedMethod, MethodBinding[] allInheritedMethods, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos) ", "+\t\tparameterLoop:", "+\t\t\t\t\t\tif (allInheritedMethods != null) {", "+\t\t\t\t\t\t\t// avoid this optional warning if the conflict already existed in one supertype (merging of two methods into one?)", "+\t\t\t\t\t\t\tfor (MethodBinding one : allInheritedMethods)", "+\t\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(inheritedMethod.declaringClass, one.declaringClass) && getParameterNonNullness(one, i, useTypeAnnotations) != Boolean.TRUE)", "+\t\t\t\t\t\t\t\t\tcontinue parameterLoop;", "+\t\t\t\t\t\t}"]}], "num": 51891}
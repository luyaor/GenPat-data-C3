{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3262d19b22d168cf9c2692df382f1afd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bd481c3a2ca84fea81ff97a78ae2e74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/CompilationProcessorEnv.java", "commitBeforeChange": "a6fb7155fd890e70fc93ff099a2bfa78beffa3e9", "commitAfterChange": "dade23c0ca1cb5b996dfae1d1cfc189d06d41a6f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate String resolveVarPath(String value)", "signatureAfterChange": " \tprivate String resolveVarPath(IJavaProject jproj, String value)", "diff": ["-\tprivate String resolveVarPath(String value) {", "+\tprivate String resolveVarPath(IJavaProject jproj, String value) {", "+\t\t// If it matches %PROJECT.DIR%/project, the path is relative to the current project.", "+\t\tif (jproj != null && PATHVAR_PROJECTROOT.equals(firstToken)) {", "+\t\t\t// all is well; do the substitution", "+\t\t\tIPath relativePath = path.removeFirstSegments(1);", "+\t\t\tIPath absoluteProjPath = jproj.getProject().getLocation();", "+\t\t\tIPath absoluteResPath = absoluteProjPath.append(relativePath);", "+\t\t\treturn absoluteResPath.toOSString();", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92a4187f64899c46934a6c05812aa772", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatch.java", "commitBeforeChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "commitAfterChange": "2ed8d2842cd060fd2ed1992ac37d7e3f157e19c9", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \r \tpublic static Set<IFile> runAPTDuringBuild(\r \t\t\tfinal List<AnnotationProcessorFactory> factories, IFile file,\r \t\t\tIJavaProject javaProj)", "signatureAfterChange": "  \tpublic static APTBuildResult runAPTDuringBuild( \t\t\tfinal List<AnnotationProcessorFactory> factories, IFile file, \t\t\tIJavaProject javaProj)", "diff": ["-\r", "-\tpublic static Set<IFile> runAPTDuringBuild(\r", "-\t\t\tfinal List<AnnotationProcessorFactory> factories, IFile file,\r", "-\t\t\tIJavaProject javaProj) {\r", "-\t\tProcessorEnvImpl processorEnv = ProcessorEnvImpl\r", "-\t\t\t\t.newProcessorEnvironmentForBuild( file, javaProj);\r", "-\t\treturn runAPT(factories, processorEnv);\r", "-\t}\r", "+", "+\tpublic static APTBuildResult runAPTDuringBuild(", "+\t\t\tfinal List<AnnotationProcessorFactory> factories, IFile file,", "+\t\t\tIJavaProject javaProj) {", "+\t\t", "+\t\t//", "+\t\t//  bail-out early if there aren't factories.", "+\t\t// ", "+\t\tif ( factories == null || factories.size() == 0 )", "+\t\t\treturn EMPTY_BUILD_RESULT;", "+\t\t", "+\t\t//", "+\t\t// scan file for annotation instances, and bail early if none.", "+\t\t// do this before construction ProcessorEnvImpl to avoid ", "+\t\t// unnecessary creation of AST.", "+\t\t//", "+\t\tif ( ! hasAnnotationInstance( file ) )", "+\t\t\treturn EMPTY_BUILD_RESULT;", "+\t\t\t\t\t", "+\t\tProcessorEnvImpl processorEnv = ProcessorEnvImpl", "+\t\t\t\t.newProcessorEnvironmentForBuild( file, javaProj);", "+\t\tSet newFiles = runAPT(factories, processorEnv);", "+\t\tSet<String> newDependencies = processorEnv.getTypeDependencies();", "+\t\tAPTBuildResult result = new APTBuildResult( newFiles, newDependencies );", "+\t\treturn result;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a32d20fdc1a63e98f949181a809595d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ImportRewriteAnalyzer.java", "commitBeforeChange": "89bd64197a8c81d9353ca25ee2694b070255ceb5", "commitAfterChange": "8cc33a88b7e04cb90905b591a01c27e56af27e07", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 51, "signatureBeforeChange": "  \t\tpublic void removeAllNew(Set onDemandConflicts)", "signatureAfterChange": "  \t\tpublic void filterImplicitImports(boolean useContextToFilterImplicitImports)", "diff": ["-\t\tpublic void removeAllNew(Set onDemandConflicts) {", "+\t\tpublic void filterImplicitImports(boolean useContextToFilterImplicitImports) {", "-\t\t\t\tif (curr.isNew() /*&& (onDemandConflicts == null || onDemandConflicts.contains(curr.getSimpleName()))*/) {", "-\t\t\t\t\tthis.importEntries.remove(i);", "+\t\t\t\tif (curr.isNew()) {", "+\t\t\t\t\tif (!useContextToFilterImplicitImports) {", "+\t\t\t\t\t\tthis.importEntries.remove(i);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tString elementName = curr.getElementName();", "+\t\t\t\t\t\tint lastIndexOf = elementName.lastIndexOf('.');", "+\t\t\t\t\t\tboolean internalClassImport = lastIndexOf > getName().length();", "+\t\t\t\t\t\tif (!internalClassImport) {", "+\t\t\t\t\t\t\tthis.importEntries.remove(i);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9194b9171a73b76c5cfea78baeedd96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java", "commitBeforeChange": "6d2932a6aeb509ef1ad4876d04513e51cb902c43", "commitAfterChange": "97c5ba1e2ab0811616d91adfc749054394adc907", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  protected void copyExtraResourcesBack(ClasspathMultiDirectory sourceLocation, final boolean deletedAll) throws CoreException", "signatureAfterChange": "  protected void copyExtraResourcesBack(ClasspathMultiDirectory sourceLocation, final SimpleLookupTable duplicates) throws CoreException", "diff": ["-protected void copyExtraResourcesBack(ClasspathMultiDirectory sourceLocation, final boolean deletedAll) throws CoreException {", "+protected void copyExtraResourcesBack(ClasspathMultiDirectory sourceLocation, final SimpleLookupTable duplicates) throws CoreException {", "+\tfinal boolean deletedAll = duplicates != null;", "-\t\t\t\t\t\t\t\tcreateErrorFor(resource, Util.bind(\"build.duplicateResource\")); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tIPath p = (IPath) duplicates.get(copiedResource.getFullPath());", "+\t\t\t\t\t\t\t\tString id = p.removeFirstSegments(1).toString();", "+\t\t\t\t\t\t\t\tcreateErrorFor(resource, Util.bind(\"build.duplicateResource\", id)); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\tif (deletedAll)", "+\t\t\t\t\t\t\tduplicates.put(copiedResource.getFullPath(), resource.getFullPath());"]}], "num": 30602}
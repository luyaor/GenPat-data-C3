{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "125c4a6312d6aee00fe9bfd084ac8556", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c9066520d45d2aeb22caa1d3e03cca3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "b0c126113d3919e827d562fe7ceede775b6f96a6", "commitAfterChange": "1636f4f6a9a908a8764c3fcbad745e3e39a0b116", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public int addLambdaMethod(LambdaExpression lambda)", "signatureAfterChange": " public SyntheticMethodBinding addSyntheticMethod(LambdaExpression lambda)", "diff": ["-public int addLambdaMethod(LambdaExpression lambda) {", "-\tint index;", "-\tif (this.lambdas == null) {", "-\t\tthis.lambdas = new LambdaExpression[1];", "-\t\tindex = 0;", "-\t} else {", "-\t\tindex = this.lambdas.length;", "-\t\tSystem.arraycopy(this.lambdas, 0, this.lambdas = new LambdaExpression[index + 1], 0, index);", "-\t}", "-\tthis.lambdas[index] = lambda;", "-\treturn index;", "+public SyntheticMethodBinding addSyntheticMethod(LambdaExpression lambda) {", "+\tif (this.synthetics == null)", "+\t\tthis.synthetics = new HashMap[MAX_SYNTHETICS];", "+\tif (this.synthetics[SourceTypeBinding.METHOD_EMUL] == null)", "+\t\tthis.synthetics[SourceTypeBinding.METHOD_EMUL] = new HashMap(5);", "+\tSyntheticMethodBinding lambdaMethod = new SyntheticMethodBinding(lambda, CharOperation.concat(TypeConstants.ANONYMOUS_METHOD, Integer.toString(this.lambdaOrdinal++).toCharArray()), this);", "+\tSyntheticMethodBinding[] accessors = new SyntheticMethodBinding[2]; ", "+\tthis.synthetics[SourceTypeBinding.METHOD_EMUL].put(lambda, accessors);", "+\taccessors[0] = lambdaMethod;", "+\treturn lambdaMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c577f5ea2a58348e5de2034d0db3be8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate void mergeParameterNullAnnotations(BlockScope currentScope)", "signatureAfterChange": " \tprivate void mergeParameterNullAnnotations(BlockScope currentScope)", "diff": ["-\t\tif (this.descriptor.parameterNonNullness == null)", "-\t\t\treturn;", "-\t\tif (this.binding.parameterNonNullness == null) {", "-\t\t\tthis.binding.parameterNonNullness = this.descriptor.parameterNonNullness;", "-\t\t\treturn;", "-\t\t}", "-\t\tBoolean[] ourNonNullness = this.binding.parameterNonNullness;", "-\t\tBoolean[] descNonNullness = this.descriptor.parameterNonNullness;", "-\t\tint len = Math.min(ourNonNullness.length, descNonNullness.length);", "+\t\tTypeBinding[] ourParameters = this.binding.parameters;", "+\t\tTypeBinding[] descParameters = this.descriptor.parameters;", "+\t\tint len = Math.min(ourParameters.length, descParameters.length);", "-\t\t\tif (ourNonNullness[i] == null) {", "-\t\t\t\tourNonNullness[i] = descNonNullness[i];", "-\t\t\t} else if (ourNonNullness[i] != descNonNullness[i]) {", "-\t\t\t\tif (ourNonNullness[i] == Boolean.TRUE) { // requested @NonNull not provided", "+\t\t\tlong ourTagBits = ourParameters[i].tagBits & TagBits.AnnotationNullMASK;", "+\t\t\tlong descTagBits = descParameters[i].tagBits & TagBits.AnnotationNullMASK;", "+\t\t\tif (ourTagBits == 0L) {", "+\t\t\t\tif (descTagBits != 0L && !ourParameters[i].isBaseType())", "+\t\t\t\t\tourParameters[i] = env.createAnnotatedType(ourParameters[i], descTagBits);", "+\t\t\t} else if (ourTagBits != descTagBits) {", "+\t\t\t\tif (ourTagBits == TagBits.AnnotationNonNull) { // requested @NonNull not provided", "-\t\t\t\t\tif (descNonNullness[i] == Boolean.FALSE)", "+\t\t\t\t\tif (descTagBits == TagBits.AnnotationNullable)"]}], "num": 50301}
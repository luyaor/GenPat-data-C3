{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db6151859bd469dde2dc4d3ae5c1ca81", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09524a4719de23cff551f4bbaf6e9967", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "4b71ef3be11b1e52d22d795d03898285bb112516", "commitAfterChange": "9966baba46edc3df548fabd09b133cadc0093ca6", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic Binding getBinding(char[] name, int mask, InvocationSite invocationSite, boolean needResolve)", "signatureAfterChange": " \tpublic Binding getBinding(char[] name, int mask, InvocationSite invocationSite, boolean needResolve)", "diff": ["-\t\t\t\tboolean isInsideLambda = false;", "+\t\t\t\tboolean shouldCaptureOuterLocals = false;", "-\t\t\t\t\t\t\t\tif (isInsideLambda && invocationSite instanceof NameReference) {", "-\t\t\t\t\t\t\t\t\tNameReference nameReference = (NameReference) invocationSite;", "-\t\t\t\t\t\t\t\t\tnameReference.bits |= ASTNode.IsFromOutsideLambda;", "+\t\t\t\t\t\t\t\tif (shouldCaptureOuterLocals && invocationSite instanceof NameReference) {", "+\t\t\t\t\t\t\t\t\t\tNameReference nameReference = (NameReference) invocationSite;", "+\t\t\t\t\t\t\t\t\t\tnameReference.bits |= ASTNode.IsCapturedOuterLocal;", "+\t\t\t\t\t\t\tshouldCaptureOuterLocals = true;", "-\t\t\t\t\tif (scope.kind == METHOD_SCOPE && scope.parent != null && scope.parent.kind != CLASS_SCOPE) {", "-\t\t\t\t\t\tisInsideLambda = true;", "-\t\t\t\t\t}", "+\t\t\t\t\tif (scope.isLambdaScope()) // Not in Kansas anymore ...", "+\t\t\t\t\t\tshouldCaptureOuterLocals = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c82831292ff63113e18e98a947a9c54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "c0b519c3b149b13ea0f307f0d3414359b2cf0639", "commitAfterChange": "a8d9477532d4953ddbbeff7907775085b3a4bf13", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " private MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " private MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["-\t\t\t} else if (parameterType.isArrayType() && ((ArrayBinding) parameterType).leafComponentType == TypeBinding.VOID) {", "-\t\t\t\tmethodDecl.scope.problemReporter().argumentTypeCannotBeVoidArray(arg);", "-\t\t\t\tfoundArgProblem = true;", "-\t\t\t    if (leafType instanceof ReferenceBinding && (((ReferenceBinding) leafType).modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0)", "+\t\t\t\tif (leafType instanceof ReferenceBinding && (((ReferenceBinding) leafType).modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0)", "+\t\t\t\targ.binding = new LocalVariableBinding(arg, parameterType, arg.modifiers, true);", "-\t\tif (!foundArgProblem)", "+\t\tif (!foundArgProblem) {", "+\t\t}", "-\t\t    TypeBinding methodType = returnType.resolveType(methodDecl.scope, true /* check bounds*/);", "+\t\t\tTypeBinding methodType = returnType.resolveType(methodDecl.scope, true /* check bounds*/);"]}], "num": 51659}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ba02a54dc16e14057f520d459ad2298", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c4d4e1caf99ef820b7bfa16f2bec989", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "888292ea603a6da7f72ea117f7888abe01b754a7", "commitAfterChange": "55820e961ea60f332c022420f899ff47827b6db9", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tsynchronized IAnnotationBinding getAnnotationInstance(org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding internalInstance)", "signatureAfterChange": "  \tsynchronized IAnnotationBinding getAnnotationInstance(org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding internalInstance)", "diff": ["-\t\tIAnnotationBinding newDomInstance = new AnnotationBinding(internalInstance, this);", "-\t\tIAnnotationBinding domInstance = (IAnnotationBinding) ((ConcurrentHashMap)this.bindingTables.compilerBindingsToASTBindings).putIfAbsent(key, newDomInstance);", "-\t\treturn domInstance != null ? domInstance : newDomInstance;", "+\t\tIAnnotationBinding domInstance =", "+\t\t(IAnnotationBinding) this.bindingTables.compilerAnnotationBindingsToASTBindings.get(key);", "+\t\tif (domInstance != null)", "+\t\t\t\treturn domInstance;", "+\t\tdomInstance = new AnnotationBinding(internalInstance, this);", "+\t\tthis.bindingTables.compilerAnnotationBindingsToASTBindings.put(key, domInstance);", "+\t\treturn domInstance;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8dd3e48a10004ee7be68a0cd4287bf1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "15119daf817db1018e77a6fda243b1a0915bea1f", "commitAfterChange": "46f57536ed8e2bfbe5a9484e153647c7c5b9cb5d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition, int pos)", "signatureAfterChange": " \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition, int pos)", "diff": ["-\t\t\t\t\t\t\t\tfindImports((CompletionOnImportReference) importReference);", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tchar[][] oldTokens = importReference.tokens;", "+\t\t\t\t\t\t\t\tint tokenCount = oldTokens.length;", "+\t\t\t\t\t\t\t\tif (tokenCount == 1) {", "+\t\t\t\t\t\t\t\t\tfindImports((CompletionOnImportReference)importReference, true);", "+\t\t\t\t\t\t\t\t} else if(tokenCount > 1){", "+\t\t\t\t\t\t\t\t\tthis.insideQualifiedReference = true;", "+\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\tchar[] lastToken = oldTokens[tokenCount - 1];", "+\t\t\t\t\t\t\t\t\tchar[][] qualifierTokens = CharOperation.subarray(oldTokens, 0, tokenCount - 1);", "+\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\tBinding binding = this.unitScope.getTypeOrPackage(qualifierTokens);", "+\t\t\t\t\t\t\t\t\tif(binding != null) {", "+\t\t\t\t\t\t\t\t\t\tif(binding instanceof PackageBinding) {", "+\t\t\t\t\t\t\t\t\t\t\tfindImports((CompletionOnImportReference)importReference, false);", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tReferenceBinding ref = (ReferenceBinding) binding;", "+\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfMemberTypes(lastToken, ref, importReference.isStatic());", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tif(importReference.isStatic()) {", "+\t\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticFields(lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_NAME_REFERENCE)) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticMethdods(lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif(importReference.isStatic()) {", "-\t\t\t\t\t\t\t\t\tchar[][] oldTokens = importReference.tokens;", "-\t\t\t\t\t\t\t\t\tint tokenCount = oldTokens.length;", "-\t\t\t\t\t\t\t\t\tchar[] lastToken = oldTokens[tokenCount - 1];", "-\t\t\t\t\t\t\t\t\tchar[][] qualifierTokens = CharOperation.subarray(oldTokens, 0, tokenCount - 1);", "-\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\tif(qualifierTokens != null && qualifierTokens.length != 0) {", "-\t\t\t\t\t\t\t\t\t\tBinding binding = this.unitScope.getTypeOrPackage(qualifierTokens);", "-\t\t\t\t\t\t\t\t\t\tif(binding != null && binding instanceof ReferenceBinding) {", "-\t\t\t\t\t\t\t\t\t\t\tReferenceBinding ref = (ReferenceBinding) binding;", "-\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfMemberTypes(lastToken, ref);", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "-\t\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticFields(lastToken, ref);", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_NAME_REFERENCE)) {", "-\t\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticMethdods(lastToken, ref);", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}"]}], "num": 26677}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba6a6ea1d70f86a54dff2d81fd3a4aac", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28317dae35930a6e5511e4ecbf6ff37a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "ad30422de59b5093c5225e2a4599516c056303dc", "commitAfterChange": "c1c045ff9c256acaa6d98530fa4640b4cd80b7c6", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tconstant = NotAConstant;", "+\t\tthis.constant = NotAConstant;", "-\t\texpression.setExpectedType(lhsType); // needed in case of generic method invocation", "+\t\tthis.expression.setExpectedType(lhsType); // needed in case of generic method invocation", "-\t\tTypeBinding rhsType = expression.resolveType(scope);", "+\t\tTypeBinding rhsType = this.expression.resolveType(scope);", "-\t\tif ((expression.isConstantValueOfTypeAssignableToType(rhsType, lhsType)", "+\t\tif ((this.expression.isConstantValueOfTypeAssignableToType(rhsType, lhsType)", "-\t\t\texpression.computeConversion(scope, lhsType, rhsType);", "+\t\t\tthis.expression.computeConversion(scope, lhsType, rhsType);", "-\t\t} else if (scope.isBoxingCompatibleWith(rhsType, lhsType)) {", "-\t\t\texpression.computeConversion(scope, lhsType, rhsType);", "+\t\t} else if (scope.isBoxingCompatibleWith(rhsType, lhsType) ", "+\t\t\t\t\t\t\t|| (rhsType.isBaseType()  // narrowing then boxing ?", "+\t\t\t\t\t\t\t\t\t&& !lhsType.isBaseType()", "+\t\t\t\t\t\t\t\t\t&& this.expression.isConstantValueOfTypeAssignableToType(rhsType, scope.environment().computeBoxingType(lhsType)))) {", "+\t\t\tthis.expression.computeConversion(scope, lhsType, rhsType);", "-\t\tscope.problemReporter().typeMismatchError(rhsType, lhsType, expression);", "+\t\tscope.problemReporter().typeMismatchError(rhsType, lhsType, this.expression);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "999217c834431f2474668705c0efda86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "51ef1f3e636c416c08f983016f64f795f2b9cc74", "commitAfterChange": "9d3908e6916e224f861c3acffb456d39563ef22b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \t \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\tif (expression == null)", "+\t\t\tif (this.expression == null)", "-\t\t\tif ((expressionType = expression.resolveType(scope)) != null)", "+\t\t\tif ((expressionType = this.expression.resolveType(scope)) != null)", "-\t\tif (expression == null) {", "+\t\tif (this.expression == null) {", "-\t\texpression.setExpectedType(methodType); // needed in case of generic method invocation", "-\t\tif ((expressionType = expression.resolveType(scope)) == null) return;", "+\t\tthis.expression.setExpectedType(methodType); // needed in case of generic method invocation", "+\t\tif ((expressionType = this.expression.resolveType(scope)) == null) return;", "-\t\tif (expression.isConstantValueOfTypeAssignableToType(expressionType, methodType)", "+\t\tif (this.expression.isConstantValueOfTypeAssignableToType(expressionType, methodType)", "-\t\t\texpression.computeConversion(scope, methodType, expressionType);", "+\t\t\tthis.expression.computeConversion(scope, methodType, expressionType);", "+\t\t\tif (this.expression instanceof CastExpression ", "+\t\t\t\t\t&& (this.expression.bits & ASTNode.UnnecessaryCastMASK) == 0) {", "+\t\t\t\tCastExpression.checkNeedForAssignedCast(scope, methodType, (CastExpression) this.expression);", "+\t\t\t}\t\t\t", "-\t\t\texpression.computeConversion(scope, methodType, expressionType);", "-\t\t\treturn;", "+\t\t\tthis.expression.computeConversion(scope, methodType, expressionType);", "+\t\t\tif (this.expression instanceof CastExpression ", "+\t\t\t\t\t&& (this.expression.bits & ASTNode.UnnecessaryCastMASK) == 0) {", "+\t\t\t\tCastExpression.checkNeedForAssignedCast(scope, methodType, (CastExpression) this.expression);", "+\t\t\t}\t\t\treturn;", "-\t\tscope.problemReporter().typeMismatchError(expressionType, methodType, expression);", "+\t\tscope.problemReporter().typeMismatchError(expressionType, methodType, this.expression);"]}], "num": 35084}
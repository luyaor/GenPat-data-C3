{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "724f818013c551456dfff8f9ea10096b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8371737f82fd8f0a1d6ae1f6c92479cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "62d3eaa4b27479370ad7de8268c38e813fccfa43", "commitAfterChange": "11dcf3d3ee1968a8baaa68f96fb65b7f9b3db0b4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["-\t\t", "-\t\t// filter options which are related to the compiler component", "-\t\tIterator entries = settings.entrySet().iterator();", "-\t\twhile (entries.hasNext()) {", "-\t\t\tMap.Entry entry = (Map.Entry)entries.next();", "-\t\t\tif (!(entry.getKey() instanceof String)) continue;", "-\t\t\tif (!(entry.getValue() instanceof String)) continue;", "-\t\t\tString optionID = (String) entry.getKey();", "-\t\t\tString optionValue = (String) entry.getValue();", "-\t\t\t", "-\t\t\t// Local variable attribute", "-\t\t\tif(optionID.equals(OPTION_LocalVariableAttribute)){", "-\t\t\t\tif (optionValue.equals(GENERATE)) {", "-\t\t\t\t\tthis.produceDebugAttributes |= Vars;", "-\t\t\t\t} else if (optionValue.equals(DO_NOT_GENERATE)){", "-\t\t\t\t\tthis.produceDebugAttributes &= ~Vars;", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t}  ", "-\t\t\t// Line number attribute\t", "-\t\t\tif(optionID.equals(OPTION_LineNumberAttribute)) {", "-\t\t\t\tif (optionValue.equals(GENERATE)) {", "-\t\t\t\t\tthis.produceDebugAttributes |= Lines;", "-\t\t\t\t} else if (optionValue.equals(DO_NOT_GENERATE)) {", "-\t\t\t\t\tthis.produceDebugAttributes &= ~Lines;", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Source file attribute\t", "-\t\t\tif(optionID.equals(OPTION_SourceFileAttribute)) {", "-\t\t\t\tif (optionValue.equals(GENERATE)) {", "-\t\t\t\t\tthis.produceDebugAttributes |= Source;", "-\t\t\t\t} else if (optionValue.equals(DO_NOT_GENERATE)) {", "-\t\t\t\t\tthis.produceDebugAttributes &= ~Source;", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Preserve unused local\t", "-\t\t\tif(optionID.equals(OPTION_PreserveUnusedLocal)){", "-\t\t\t\tif (optionValue.equals(PRESERVE)) {", "-\t\t\t\t\tthis.preserveAllLocalVariables = true;", "-\t\t\t\t} else if (optionValue.equals(OPTIMIZE_OUT)) {", "-\t\t\t\t\tthis.preserveAllLocalVariables = false;", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report unreachable code\t\t\t\t", "-\t\t\tif(optionID.equals(OPTION_ReportUnreachableCode)){", "-\t\t\t\tupdateSeverity(UnreachableCode, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report invalid import\t", "-\t\t\tif(optionID.equals(OPTION_ReportInvalidImport)){", "-\t\t\t\tupdateSeverity(ImportProblem, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Define the target JDK tag for .classfiles", "-\t\t\tif(optionID.equals(OPTION_TargetPlatform)){", "-\t\t\t\tlong level = versionToJdkLevel(optionValue);", "-\t\t\t\tif (level != 0) this.targetJDK = level;", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Define the JDK compliance level", "-\t\t\tif(optionID.equals(OPTION_Compliance)){", "-\t\t\t\tlong level = versionToJdkLevel(optionValue);", "-\t\t\t\tif (level != 0) this.complianceLevel = level;", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Private constructor access emulation (extra arg vs. visibility change)", "-\t\t\tif(optionID.equals(OPTION_PrivateConstructorAccess)){", "-\t\t\t\tlong level = versionToJdkLevel(optionValue);", "-\t\t\t\tif (level >= JDK1_3) this.isPrivateConstructorAccessChangingVisibility = true;", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report method with constructor name", "-\t\t\tif(optionID.equals(OPTION_ReportMethodWithConstructorName)){", "-\t\t\t\tupdateSeverity(MethodWithConstructorName, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report overriding package default method", "-\t\t\tif(optionID.equals(OPTION_ReportOverridingPackageDefaultMethod)){", "-\t\t\t\tupdateSeverity(OverriddenPackageDefaultMethod, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report deprecation", "-\t\t\tif(optionID.equals(OPTION_ReportDeprecation)){", "-\t\t\t\tupdateSeverity(UsingDeprecatedAPI, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report deprecation inside deprecated code ", "-\t\t\tif(optionID.equals(OPTION_ReportDeprecationInDeprecatedCode)){", "-\t\t\t\tif (optionValue.equals(ENABLED)) {", "-\t\t\t\t\tthis.reportDeprecationInsideDeprecatedCode = true;", "-\t\t\t\t} else if (optionValue.equals(DISABLED)) {", "-\t\t\t\t\tthis.reportDeprecationInsideDeprecatedCode = false;", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report hidden catch block", "-\t\t\tif(optionID.equals(OPTION_ReportHiddenCatchBlock)){", "-\t\t\t\tupdateSeverity(MaskedCatchBlock, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report unused local variable", "-\t\t\tif(optionID.equals(OPTION_ReportUnusedLocal)){", "-\t\t\t\tupdateSeverity(UnusedLocalVariable, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Report no implicit String conversion", "-\t\t\tif (optionID.equals(OPTION_ReportNoImplicitStringConversion)) {", "-\t\t\t\tupdateSeverity(NoImplicitStringConversion, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Report unused parameter", "-\t\t\tif(optionID.equals(OPTION_ReportUnusedParameter)){", "-\t\t\t\tupdateSeverity(UnusedArgument, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report unused parameter when implementing abstract method ", "-\t\t\tif(optionID.equals(OPTION_ReportUnusedParameterWhenImplementingAbstract)){", "-\t\t\t\tif (optionValue.equals(ENABLED)) {", "-\t\t\t\t\tthis.reportUnusedParameterWhenImplementingAbstract = true;", "-\t\t\t\t} else if (optionValue.equals(DISABLED)) {", "-\t\t\t\t\tthis.reportUnusedParameterWhenImplementingAbstract = false;", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report unused parameter when implementing abstract method ", "-\t\t\tif(optionID.equals(OPTION_ReportUnusedParameterWhenOverridingConcrete)){", "-\t\t\t\tif (optionValue.equals(ENABLED)) {", "-\t\t\t\t\tthis.reportUnusedParameterWhenOverridingConcrete = true;", "-\t\t\t\t} else if (optionValue.equals(DISABLED)) {", "-\t\t\t\t\tthis.reportUnusedParameterWhenOverridingConcrete = false;", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report unused import", "-\t\t\tif(optionID.equals(OPTION_ReportUnusedImport)){", "-\t\t\t\tupdateSeverity(UnusedImport, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report synthetic access emulation", "-\t\t\tif(optionID.equals(OPTION_ReportSyntheticAccessEmulation)){", "-\t\t\t\tupdateSeverity(AccessEmulation, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Report local var hiding another variable", "-\t\t\tif(optionID.equals(OPTION_ReportLocalVariableHiding)){", "-\t\t\t\tupdateSeverity(LocalVariableHiding, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Report field hiding another variable", "-\t\t\tif(optionID.equals(OPTION_ReportFieldHiding)){", "-\t\t\t\tupdateSeverity(FieldHiding, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Report constructor/setter parameter hiding another field", "-\t\t\tif(optionID.equals(OPTION_ReportSpecialParameterHidingField)){", "-\t\t\t\tif (optionValue.equals(ENABLED)) {", "-\t\t\t\t\tthis.reportSpecialParameterHidingField = true;", "-\t\t\t\t} else if (optionValue.equals(DISABLED)) {", "-\t\t\t\t\tthis.reportSpecialParameterHidingField = false;", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t}\t\t\t", "-\t\t\t// Report possible accidental boolean assignment", "-\t\t\tif(optionID.equals(OPTION_ReportPossibleAccidentalBooleanAssignment)){", "-\t\t\t\tupdateSeverity(AccidentalBooleanAssign, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Report possible accidental boolean assignment", "-\t\t\tif(optionID.equals(OPTION_ReportSuperfluousSemicolon)){", "-\t\t\t\tupdateSeverity(SuperfluousSemicolon, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Report non-externalized string literals", "-\t\t\tif(optionID.equals(OPTION_ReportNonExternalizedStringLiteral)){", "-\t\t\t\tupdateSeverity(NonExternalizedString, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Report usage of 'assert' as an identifier", "-\t\t\tif(optionID.equals(OPTION_ReportAssertIdentifier)){", "-\t\t\t\tupdateSeverity(AssertUsedAsAnIdentifier, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Set the source compatibility mode (assertions)", "-\t\t\tif(optionID.equals(OPTION_Source)){", "-\t\t\t\tlong level = versionToJdkLevel(optionValue);", "-\t\t\t\tif (level != 0) this.sourceLevel = level;", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Set the default encoding format", "-\t\t\tif(optionID.equals(OPTION_Encoding)){", "-\t\t\t\tif (optionValue.length() == 0){", "-\t\t\t\t\tthis.defaultEncoding = null;", "-\t\t\t\t} else {", "-\t\t\t\t\ttry { ", "-\t\t\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), optionValue);", "-\t\t\t\t\t\tthis.defaultEncoding = optionValue;", "-\t\t\t\t\t} catch(UnsupportedEncodingException e){", "-\t\t\t\t\t\t// ignore unsupported encoding", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Set the threshold for problems per unit", "-\t\t\tif(optionID.equals(OPTION_MaxProblemPerUnit)){", "-\t\t\t\ttry {", "-\t\t\t\t\tint val = Integer.parseInt(optionValue);", "-\t\t\t\t\tif (val >= 0) this.maxProblemsPerUnit = val;", "-\t\t\t\t} catch(NumberFormatException e){", "-\t\t\t\t\t// ignore ill-formatted limit", "-\t\t\t\t}\t\t\t\t", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\t// Report unnecessary receiver for static access", "-\t\t\tif(optionID.equals(OPTION_ReportNonStaticAccessToStatic)){", "-\t\t\t\tupdateSeverity(NonStaticAccessToStatic, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report indirect static access", "-\t\t\tif(optionID.equals(OPTION_ReportIndirectStaticAccess)){", "-\t\t\t\tupdateSeverity(IndirectStaticAccess, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report interface method incompatible with non-inherited Object method", "-\t\t\tif(optionID.equals(OPTION_ReportIncompatibleNonInheritedInterfaceMethod)){", "-\t\t\t\tupdateSeverity(IncompatibleNonInheritedInterfaceMethod, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report unused private members", "-\t\t\tif(optionID.equals(OPTION_ReportUnusedPrivateMember)){", "-\t\t\t\tupdateSeverity(UnusedPrivateMember, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report boolean method throwing exception", "-\t\t\tif(optionID.equals(OPTION_ReportUndocumentedEmptyBlock)){", "-\t\t\t\tupdateSeverity(UndocumentedEmptyBlock, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report unnecessary cast/instance of", "-\t\t\tif(optionID.equals(OPTION_ReportUnnecessaryTypeCheck)){", "-\t\t\t\tupdateSeverity(UnnecessaryTypeCheck, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report inconsistent javadoc annotation", "-\t\t\tif(optionID.equals(OPTION_ReportInvalidAnnotation)){", "-\t\t\t\tupdateSeverity(InvalidAnnotation, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report finally block not completing normally", "-\t\t\tif(optionID.equals(OPTION_ReportFinallyBlockNotCompletingNormally)){", "-\t\t\t\tupdateSeverity(FinallyBlockNotCompleting, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report unused declared thrown exception", "-\t\t\tif(optionID.equals(OPTION_ReportUnusedDeclaredThrownException)){", "-\t\t\t\tupdateSeverity(UnusedDeclaredThrownException, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report unqualified field access", "-\t\t\tif(optionID.equals(OPTION_ReportUnqualifiedFieldAccess)){", "-\t\t\t\tupdateSeverity(UnqualifiedFieldAccess, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report task", "-\t\t\tif(optionID.equals(OPTION_TaskTags)){", "-\t\t\t\tif (optionValue.length() == 0) {", "-\t\t\t\t\tthis.taskTags = null;", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.taskTags = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t\t// Report no-op assignments", "-\t\t\tif(optionID.equals(OPTION_ReportNoEffectAssignment)){", "-\t\t\t\tupdateSeverity(NoEffectAssignment, optionValue);", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\tif(optionID.equals(OPTION_TaskPriorities)){", "-\t\t\t\tif (optionValue.length() == 0) {", "-\t\t\t\t\tthis.taskPriorites = null;", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.taskPriorites = CharOperation.splitAndTrimOn(',', optionValue.toCharArray());", "-\t\t\t\t}", "-\t\t\t\tcontinue;", "-\t\t\t} ", "-\t\t}", "+\t\tset(settings);\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89d31ba19169c0f6b84d2d042849cd1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "442cfec5b0ec5f78f613dac66413d02e26889f22", "commitAfterChange": "d42d74dc89c043581d93318957eb6b633b137649", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "diff": ["-\t */", "-\tpublic final boolean checkCastTypesCompatibility(", "-\t\tBlockScope scope,", "-\t\tTypeBinding castType,", "-\t\tTypeBinding expressionType) {", "-\t", "-\t\t// see specifications 5.5", "-\t\t// handle errors and process constant when needed", "-\t", "-\t\t// if either one of the type is null ==>", "-\t\t// some error has been already reported some where ==>", "-\t\t// we then do not report an obvious-cascade-error.", "-\t", "-\t\tif (castType == null || expressionType == null) return true;", "-\t", "-\t\t// identity conversion cannot be performed upfront, due to side-effects", "-\t\t// like constant propagation", "-\t\t\t\t", "-\t\tif (castType.isBaseType()) {", "-\t\t\tif (expressionType.isBaseType()) {", "-\t\t\t\tif (expressionType == castType) {", "-\t\t\t\t\tconstant = expression.constant; //use the same constant", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tboolean necessary = false;", "-\t\t\t\tif (expressionType.isCompatibleWith(castType)", "-\t\t\t\t\t\t|| (necessary = BaseTypeBinding.isNarrowing(castType.id, expressionType.id))) {", "-\t\t\t\t\texpression.implicitConversion = (castType.id << 4) + expressionType.id;", "-\t\t\t\t\tif (expression.constant != Constant.NotAConstant) {", "-\t\t\t\t\t\tconstant = expression.constant.castTo(expression.implicitConversion);", "-\t\t\t\t\t}", "-\t\t\t\t\treturn necessary;", "-\t\t\t\t\t", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\treturn true;", "-\t\t}", "-\t", "-\t\t//-----------cast to something which is NOT a base type--------------------------\t", "-\t\tif (expressionType == NullBinding) {", "-\t\t\t//\tif (castType.isArrayType()){ // 26903 - need checkcast when casting null to array type", "-\t\t\t//\t\tneedRuntimeCheckcast = true;", "-\t\t\t//\t}", "-\t\t\treturn false; //null is compatible with every thing", "-\t\t}", "-\t\tif (expressionType.isBaseType()) {", "-\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\treturn true;", "-\t\t}", "-\t", "-\t\tif (expressionType.isArrayType()) {", "-\t\t\tif (castType == expressionType) return false; // identity conversion", "-\t", "-\t\t\tif (castType.isArrayType()) {", "-\t\t\t\t//------- (castType.isArray) expressionType.isArray -----------", "-\t\t\t\tTypeBinding exprElementType = ((ArrayBinding) expressionType).elementsType();", "-\t\t\t\tif (exprElementType.isBaseType()) {", "-\t\t\t\t\t// <---stop the recursion------- ", "-\t\t\t\t\tif (((ArrayBinding) castType).elementsType() == exprElementType) {", "-\t\t\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\t\t\t}", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\t// recursively on the elements...", "-\t\t\t\treturn checkCastTypesCompatibility(", "-\t\t\t\t\tscope,", "-\t\t\t\t\t((ArrayBinding) castType).elementsType(),", "-\t\t\t\t\texprElementType);", "-\t\t\t} else if (", "-\t\t\t\tcastType.isClass()) {", "-\t\t\t\t//------(castType.isClass) expressionType.isArray ---------------\t", "-\t\t\t\tif (castType.id == T_Object) {", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t} else { //------- (castType.isInterface) expressionType.isArray -----------", "-\t\t\t\tif (castType.id == T_JavaLangCloneable || castType.id == T_JavaIoSerializable) {", "-\t\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\treturn true;", "-\t\t}", "-\t", "-\t\tif (expressionType.isClass()) {", "-\t\t\tif (castType.isArrayType()) {", "-\t\t\t\t// ---- (castType.isArray) expressionType.isClass -------", "-\t\t\t\tif (expressionType.id == T_Object) { // potential runtime error", "-\t\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t} else if (castType.isClass()) { // ----- (castType.isClass) expressionType.isClass ------", "-\t\t\t\tif (expressionType.isCompatibleWith(castType)){ // no runtime error", "-\t\t\t\t\tif (castType.id == T_String) constant = expression.constant; // (String) cst is still a constant", "-\t\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "-\t\t\t\t\t\tif (castType.erasure() == expressionType.erasure() && castType != expressionType && (castType.tagBits & TagBits.HasWildcard) == 0) {", "-\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tif (castType.isCompatibleWith(expressionType)) {", "-\t\t\t\t\t// potential runtime  error", "-\t\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "-\t\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "-\t\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "-\t\t\t\t\t\tif ((match != null && !match.isParameterizedType() && !match.isGenericType()) ", "-\t\t\t\t\t\t\t\t|| ((castType.tagBits & TagBits.HasWildcard) == 0 && (expressionType.tagBits & TagBits.HasWildcard) != 0)) {", "-\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t} else { // ----- (castType.isInterface) expressionType.isClass -------  ", "-\t\t\t\tif (expressionType.isCompatibleWith(castType)) {", "-\t\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "-\t\t\t\t\t\tif (castType.erasure() == expressionType.erasure() && castType != expressionType && (castType.tagBits & TagBits.HasWildcard) == 0) {", "-\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tif (!((ReferenceBinding) expressionType).isFinal()) {", "-\t\t\t\t\t// a subclass may implement the interface ==> no check at compile time", "-\t\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "-\t\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "-\t\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "-\t\t\t\t\t\tif ((match != null && !match.isParameterizedType() && !match.isGenericType()) ", "-\t\t\t\t\t\t\t\t|| ((castType.tagBits & TagBits.HasWildcard) == 0 && (expressionType.tagBits & TagBits.HasWildcard) != 0)) {", "-\t\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn true;\t\t\t\t    ", "-\t\t\t\t}", "-\t\t\t\t// no subclass for expressionType, thus compile-time check is valid", "-\t\t\t}", "-\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\treturn true;", "-\t\t}", "-\t", "-\t\t//\tif (expressionType.isInterface()) { cannot be anything else", "-\t\tif (castType.isArrayType()) {", "-\t\t\t// ----- (castType.isArray) expressionType.isInterface ------", "-\t\t\tif (expressionType.id == T_JavaLangCloneable", "-\t\t\t\t\t|| expressionType.id == T_JavaIoSerializable) {// potential runtime error", "-\t\t\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "-\t\t\t} else {", "-\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\t}", "-\t\t\treturn true;", "-\t\t} else if (castType.isClass()) { // ----- (castType.isClass) expressionType.isInterface --------", "-\t\t\tif (castType.id == T_Object) { // no runtime error", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tif (((ReferenceBinding) castType).isFinal()) {", "-\t\t\t\t// no subclass for castType, thus compile-time check is valid", "-\t\t\t\tif (!castType.isCompatibleWith(expressionType)) {", "-\t\t\t\t\t// potential runtime error", "-\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else { // ----- (castType.isInterface) expressionType.isInterface -------", "-\t\t\tif (expressionType.isCompatibleWith(castType)) {", "-\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "-\t\t\t\t\tif (castType.erasure() == expressionType.erasure() && castType != expressionType && (castType.tagBits & TagBits.HasWildcard) == 0) {", "-\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn false; ", "-\t\t\t}", "-\t\t\tif (castType.isCompatibleWith(expressionType)) {", "-\t\t\t\tif (castType.isParameterizedType() || castType.isGenericType()) {", "-\t\t\t\t\tReferenceBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "-\t\t\t\t\tif ((match != null && !match.isParameterizedType() && !match.isGenericType()) ", "-\t\t\t\t\t\t\t|| ((castType.tagBits & TagBits.HasWildcard) == 0 && (expressionType.tagBits & TagBits.HasWildcard) != 0)) {", "-\t\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "-\t\t\t\t\t}", "-\t\t\t\t}\t\t\t\t", "-\t\t\t} else {", "-\t\t\t\tMethodBinding[] castTypeMethods = ((ReferenceBinding) castType).methods();", "-\t\t\t\tMethodBinding[] expressionTypeMethods =", "-\t\t\t\t\t((ReferenceBinding) expressionType).methods();", "-\t\t\t\tint exprMethodsLength = expressionTypeMethods.length;", "-\t\t\t\tfor (int i = 0, castMethodsLength = castTypeMethods.length; i < castMethodsLength; i++)", "-\t\t\t\t\tfor (int j = 0; j < exprMethodsLength; j++) {", "-\t\t\t\t\t\tif ((castTypeMethods[i].returnType != expressionTypeMethods[j].returnType)", "-\t\t\t\t\t\t\t\t&& (CharOperation.equals(castTypeMethods[i].selector, expressionTypeMethods[j].selector))", "-\t\t\t\t\t\t\t\t&& castTypeMethods[i].areParametersEqual(expressionTypeMethods[j])) {", "-\t\t\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tthis.bits |= NeedRuntimeCheckCastMASK;", "-\t\treturn true;", "+\t", "+\tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing) {", "+\t\tif (match == castType) {", "+\t\t\tif (!isNarrowing) tagAsUnnecessaryCast(scope, castType);", "+\t\t\treturn true;", "+\t\t}", "+\t\tif (castType.isBoundParameterizedType() || castType.isGenericType()) {", "+\t\t\tif (match.isProvablyDistinctFrom(isNarrowing ? expressionType : castType)) {", "+\t\t\t\treportIllegalCast(scope, castType, expressionType);", "+\t\t\t\treturn false; ", "+\t\t\t}", "+\t\t\tif (isNarrowing ? !expressionType.isEquivalentTo(match) : !match.isEquivalentTo(castType)) {", "+\t\t\t\tscope.problemReporter().unsafeCast(this);", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tif ((castType.tagBits & TagBits.HasWildcard) == 0) {", "+\t\t\t\tif ((!match.isParameterizedType() && !match.isGenericType())", "+\t\t\t\t\t\t|| expressionType.isRawType()) {", "+\t\t\t\t\tscope.problemReporter().unsafeCast(this);", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (!isNarrowing) tagAsUnnecessaryCast(scope, castType);", "+\t\treturn true;", "+\t}\t"]}], "num": 61329}
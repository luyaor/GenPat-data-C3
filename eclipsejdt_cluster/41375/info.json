{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4a4f417ef3b0b3bbf5e698a559629f1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16fd0aed6e6ad4f977fbea01fd0b8a65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "69b02d68015b1f30ee38d1576a843274517957c7", "commitAfterChange": "c7a9edf536467451ba659d7e03ac6c483c5c0cfe", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition, int offset)", "signatureAfterChange": " \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition, int offset)", "diff": ["+\t\t\t\t\t\t} else if(importReference instanceof CompletionOnKeyword) {", "+\t\t\t\t\t\t\tsetSourceRange(importReference.sourceStart, importReference.sourceEnd);", "+\t\t\t\t\t\t\tCompletionOnKeyword keyword = (CompletionOnKeyword)importReference;", "+\t\t\t\t\t\t\tfindKeywords(keyword.getToken(), keyword.getPossibleKeywords());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "265d8d8b75c1a7dcb652794d9b733faf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "\r \tpublic void reportReference(\r \t\tAstNode reference,\r \t\tAbstractMethodDeclaration methodDeclaration,\r \t\tchar[][] definingTypeNames,\r \t\tint accuracy)\r \t\tthrows CoreException", "signatureAfterChange": "\r public void reportReference(\r \tAstNode reference, \r \tAbstractMethodDeclaration methodDeclaration, \r \tchar[][] definingTypeNames, \r \tint accuracy) throws CoreException", "diff": ["+ */\r", "+public void reportReference(\r", "+\tAstNode reference, \r", "+\tAbstractMethodDeclaration methodDeclaration, \r", "+\tchar[][] definingTypeNames, \r", "+\tint accuracy) throws CoreException {\r", "+\t\t\r", "+\t// create defining method handle\r", "+\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "+\t\r", "+\t// accept reference\r", "+\tif (reference instanceof QualifiedNameReference || reference instanceof QualifiedTypeReference) {\r", "+\t\tthis.pattern.matchReportReference((AstNode)reference, method, accuracy, this);\r", "+\t} else if (reference instanceof MessageSend) { // message ref are starting at the selector start\r", "+\t\tthis.report((int)(((MessageSend)reference).nameSourcePosition >> 32), reference.sourceEnd, method, accuracy);\r", "+\t} else {\r", "+\t\tthis.report(reference.sourceStart, reference.sourceEnd, method, accuracy);\r", "+\t}\r", "+}\r", "-\t */\r", "-\tpublic void reportReference(\r", "-\t\tAstNode reference,\r", "-\t\tAbstractMethodDeclaration methodDeclaration,\r", "-\t\tchar[][] definingTypeNames,\r", "-\t\tint accuracy)\r", "-\t\tthrows CoreException {\r", "-\r", "-\t\t// create defining method handle\r", "-\t\tIMethod method = this.createMethodHandle(methodDeclaration, definingTypeNames);\r", "-\r", "-\t\tif (reference instanceof QualifiedNameReference\r", "-\t\t\t|| reference instanceof QualifiedTypeReference) {\r", "-\t\t\tthis.pattern.matchReportReference((AstNode) reference, method, accuracy, this);\r", "-\t\t\tthis.report(reference.sourceStart, reference.sourceEnd, method, accuracy);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fbe6c8c084571c0266e313e2497bb77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldPattern.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public FieldPattern( \tboolean findDeclarations, \tboolean readAccess, \tboolean writeAccess, \tchar[] name,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] typeQualification,  \tchar[] typeSimpleName, \tString signature, \tint matchRule)", "signatureAfterChange": " public FieldPattern( \tboolean findDeclarations, \tboolean readAccess, \tboolean writeAccess, \tchar[] name,  \tchar[] declaringQualification, \tchar[] declaringSimpleName,\t \tchar[] typeQualification,  \tchar[] typeSimpleName, \tString typeSignature, \tint matchRule)", "diff": ["-\tString signature,", "+\tString typeSignature,", "-\tif (signature != null) computeSignature(signature);", "+\t// store type signatures and arguments", "+\tif (typeSignature != null) {", "+\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(typeSignature);", "+\t\tsetTypeArguments(Util.getAllTypeArguments(this.typeSignatures));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8acb8e1a8de6947738148b305bf40285", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchPattern.java", "commitBeforeChange": "23df6bbbb36a9f50a63aa5ce59d1913148166f08", "commitAfterChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tvoid storeTypeSignaturesAndArguments(IType type)", "signatureAfterChange": " \tvoid storeTypeSignaturesAndArguments(IType type)", "diff": ["+\t */", "-\t\t\t// Use unique key to extract signatures and type arguments", "+\t\t} else if (type instanceof ParameterizedBinaryType) {", "+\t\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(((ParameterizedBinaryType)type).uniqueKey);", "+\t\t\tsetTypeArguments(Util.getAllTypeArguments(this.typeSignatures));"]}], "num": 41375}
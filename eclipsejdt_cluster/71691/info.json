{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d8710009e5677c535c4cf16c78766de5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e0705f2e922a7330846bcef52b0a286", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "f512a9071a69431983c5a97730f23f8ae82e0f5d", "commitAfterChange": "ebec254e498341be9350e02449a0dbae42c5870c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  protected IProject[] build(int kind, Map ignored, IProgressMonitor monitor) throws CoreException", "signatureAfterChange": "  protected IProject[] build(int kind, Map ignored, IProgressMonitor monitor) throws CoreException", "diff": ["+\t\tmarker.setAttribute(IJavaModelMarker.CATEGORY_ID, CategorizedProblem.CAT_BUILDPATH);", "+\t\tmarker.setAttribute(IJavaModelMarker.CATEGORY_ID, CategorizedProblem.CAT_BUILDPATH);", "+\t\tmarker.setAttribute(IJavaModelMarker.CATEGORY_ID, CategorizedProblem.CAT_BUILDPATH);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "635e1a59785bf64a43bfd585f56c8b3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "ad94e7c70968c32bc14232e983e71554b9e4e876", "commitAfterChange": "2a5005d0f0faf2e32a9545440516f869ce34bcdd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected Map getCompilerOptions()", "signatureAfterChange": " protected Map getCompilerOptions()", "diff": ["+", "+\t\tif (false) { // check that all tests are 1.3 & 1.4 compatible by default (compliance tests must specify which version to use)", "+\t\t\tdefaultOptions.put(", "+\t\t\t\tCompilerOptions.OPTION_Compliance, ", "+\t\t\t\tCompilerOptions.VERSION_1_3);", "+\t\t\tdefaultOptions.put(", "+\t\t\t\tCompilerOptions.OPTION_Source, ", "+\t\t\t\tCompilerOptions.VERSION_1_3);", "+\t\t\tdefaultOptions.put(", "+\t\t\t\tCompilerOptions.OPTION_TargetPlatform, ", "+\t\t\t\tCompilerOptions.VERSION_1_1);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec0dfcfe5d61ecab79a35b6b0f8272e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "8b61d97704a2b67ed3d29404b8692bdbf30b8b5d", "commitAfterChange": "7fa6d6b6f60d0d2345e743063241c3eb3452b00f", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "diff": ["-\t\tSearchMatch match = this.patternLocator.newDeclarationMatch(type, enclosingElement, accuracy, type.sourceEnd-offset+1, this);", "+\t\tSearchMatch match = this.patternLocator.newDeclarationMatch(type, enclosingElement, type.binding, accuracy, type.sourceEnd-offset+1, this);", "-\t\t\t\t\t\tSearchMatch match = this.patternLocator.newDeclarationMatch(typeParameter, enclosingElement, level.intValue(), typeParameter.sourceEnd-offset+1, this);", "+\t\t\t\t\t\tSearchMatch match = this.patternLocator.newDeclarationMatch(typeParameter, enclosingElement, type.binding, level.intValue(), typeParameter.sourceEnd-offset+1, this);", "-\t\t\t\t\t\tthis.patternLocator.matchReportReference(typeParameter.type, enclosingElement, level.intValue(), this);", "+\t\t\t\t\t\tthis.patternLocator.matchReportReference(typeParameter.type, enclosingElement, type.binding, level.intValue(), this);", "-\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(typeParameter.bounds[j], enclosingElement, level.intValue(), this);", "+\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(typeParameter.bounds[j], enclosingElement, type.binding, level.intValue(), this);", "-\t\t\t\tthis.patternLocator.matchReportReference(typeRef, enclosingElement, level.intValue(), this);", "+\t\t\t\tthis.patternLocator.matchReportReference(typeRef, enclosingElement, type.binding, level.intValue(), this);", "-\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, level.intValue(), this);", "+\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, type.binding, level.intValue(), this);", "-\t\t\t\tthis.patternLocator.matchReportReference(superType, enclosingElement, level.intValue(), this);", "+\t\t\t\tthis.patternLocator.matchReportReference(superType, enclosingElement, type.binding, level.intValue(), this);", "-\t\t\treportMatchingSuper(superClass, enclosingElement, nodeSet, matchedClassContainer);", "+\t\t\treportMatchingSuper(superClass, enclosingElement, type.binding, nodeSet, matchedClassContainer);", "-\t\t\t\treportMatchingSuper(superInterfaces[i], enclosingElement, nodeSet, matchedClassContainer);", "+\t\t\t\treportMatchingSuper(superInterfaces[i], enclosingElement, type.binding, nodeSet, matchedClassContainer);"]}], "num": 71691}
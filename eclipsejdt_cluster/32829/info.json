{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c130eb58ee56491dd699de32839fce9", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54f805dec643eb2cd94b8e2d0dcc4fd0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "08c5b9004bde27fb4063ce300ce881966676fe74", "commitAfterChange": "28d58bf6eb942015446b8ffce8f446f86e9686d9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif ((this.binding = scope.getConstructor(allocationType, argumentTypes, this)).isValidBinding()) {", "-\t\t\t\tif (polyExpressionSeen) {", "-\t\t\t\t\tboolean variableArity = this.binding.isVarargs();", "-\t\t\t\t\tfinal TypeBinding[] parameters = this.binding.parameters;", "-\t\t\t\t\tfinal int parametersLength = parameters.length;", "-\t\t\t\t\tfor (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {", "-\t\t\t\t\t\tExpression argument = this.arguments[i];", "-\t\t\t\t\t\tTypeBinding parameterType = i < parametersLength ? parameters[i] : parameters[parametersLength - 1];", "-\t\t\t\t\t\tif (argumentTypes[i] instanceof PolyTypeBinding) {", "-\t\t\t\t\t\t\targument.setExpressionContext(INVOCATION_CONTEXT);", "-\t\t\t\t\t\t\tif (variableArity && i >= parametersLength - 1)", "-\t\t\t\t\t\t\t\targument.tagAsEllipsisArgument();", "-\t\t\t\t\t\t\targument.setExpectedType(parameterType);", "-\t\t\t\t\t\t\targumentTypes[i] = argument.resolveType(scope);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\tthis.binding = scope.getConstructor(allocationType, argumentTypes, this);", "+\t\t\tif (polyExpressionSeen && polyExpressionsHaveErrors(scope, this.binding, this.arguments, argumentTypes))", "+\t\t\t\treturn null;", "+\t\t\tif (this.binding.isValidBinding()) {\t", "+\t\tif (polyExpressionSeen && polyExpressionsHaveErrors(scope, inheritedBinding, this.arguments, argumentTypes))", "+\t\t\treturn null;", "-\t\t}", "-\t\tif (polyExpressionSeen) {", "-\t\t\tboolean variableArity = inheritedBinding.isVarargs();", "-\t\t\tfinal TypeBinding[] parameters = inheritedBinding.parameters;", "-\t\t\tfinal int parametersLength = parameters.length;", "-\t\t\tfor (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {", "-\t\t\t\tExpression argument = this.arguments[i];", "-\t\t\t\tTypeBinding parameterType = i < parametersLength ? parameters[i] : parameters[parametersLength - 1];", "-\t\t\t\tif (argumentTypes[i] instanceof PolyTypeBinding) {", "-\t\t\t\t\targument.setExpressionContext(INVOCATION_CONTEXT);", "-\t\t\t\t\tif (variableArity && i >= parametersLength - 1)", "-\t\t\t\t\t\targument.tagAsEllipsisArgument();", "-\t\t\t\t\targument.setExpectedType(parameterType);", "-\t\t\t\t\targumentTypes[i] = argument.resolveType(scope);", "-\t\t\t\t}", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85d8f8ccef1364198cf533c108934aad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "fbf658958d1eb066a4b5c16fdea253c3d8d5019c", "commitAfterChange": "f6ec98c28a6dab858ad73a502050b5fb2a693eb4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tboolean polyExpressionSeen = false;", "+\t\t\tTypeBinding argumentType;", "-\t\t\t\tif ((argumentTypes[i] = argument.resolveType(scope)) == null){", "+\t\t\t\tif ((argumentType = argumentTypes[i] = argument.resolveType(scope)) == null){", "+\t\t\t\tif (argumentType != null && argumentType.kind() == Binding.POLY_TYPE)", "+\t\t\t\t\tpolyExpressionSeen = true;", "-\t\t\t\tfor (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {", "-\t\t\t\t\tExpression argument = this.arguments[i];", "-\t\t\t\t\tif (argumentTypes[i] instanceof PolyTypeBinding) {", "-\t\t\t\t\t\targument.setExpressionContext(INVOCATION_CONTEXT);", "-\t\t\t\t\t\targument.setExpectedType(this.binding.parameters[i]);", "-\t\t\t\t\t\targumentTypes[i] = argument.resolveType(scope);", "+\t\t\t\tif (polyExpressionSeen) {", "+\t\t\t\t\tboolean variableArity = this.binding.isVarargs();", "+\t\t\t\t\tfinal TypeBinding[] parameters = this.binding.parameters;", "+\t\t\t\t\tfinal int parametersLength = parameters.length;", "+\t\t\t\t\tfor (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {", "+\t\t\t\t\t\tExpression argument = this.arguments[i];", "+\t\t\t\t\t\tTypeBinding parameterType = i < parametersLength ? parameters[i] : parameters[parametersLength - 1];", "+\t\t\t\t\t\tif (argumentTypes[i] instanceof PolyTypeBinding) {", "+\t\t\t\t\t\t\targument.setExpressionContext(INVOCATION_CONTEXT);", "+\t\t\t\t\t\t\tif (variableArity && i >= parametersLength - 1)", "+\t\t\t\t\t\t\t\targument.tagAsEllipsisArgument();", "+\t\t\t\t\t\t\targument.setExpectedType(parameterType);", "+\t\t\t\t\t\t\targumentTypes[i] = argument.resolveType(scope);", "+\t\t\t\t\t\t}", "-\t\tfor (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {", "-\t\t\tExpression argument = this.arguments[i];", "-\t\t\tif (argumentTypes[i] instanceof PolyTypeBinding) {", "-\t\t\t\targument.setExpressionContext(INVOCATION_CONTEXT);", "-\t\t\t\targument.setExpectedType(inheritedBinding.parameters[i]);", "-\t\t\t\targumentTypes[i] = argument.resolveType(scope);", "+\t\tif (polyExpressionSeen) {", "+\t\t\tboolean variableArity = inheritedBinding.isVarargs();", "+\t\t\tfinal TypeBinding[] parameters = inheritedBinding.parameters;", "+\t\t\tfinal int parametersLength = parameters.length;", "+\t\t\tfor (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {", "+\t\t\t\tExpression argument = this.arguments[i];", "+\t\t\t\tTypeBinding parameterType = i < parametersLength ? parameters[i] : parameters[parametersLength - 1];", "+\t\t\t\tif (argumentTypes[i] instanceof PolyTypeBinding) {", "+\t\t\t\t\targument.setExpressionContext(INVOCATION_CONTEXT);", "+\t\t\t\t\tif (variableArity && i >= parametersLength - 1)", "+\t\t\t\t\t\targument.tagAsEllipsisArgument();", "+\t\t\t\t\targument.setExpectedType(parameterType);", "+\t\t\t\t\targumentTypes[i] = argument.resolveType(scope);", "+\t\t\t\t}"]}], "num": 32829}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb44777099c4a194d81b811eb0396c63", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a1230a6c96e151ce86b2a9ffe88f467", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tIPath projectOutputLocation, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError, \t\tMap reverseMap) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tIPath projectOutputLocation, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError, \t\tMap reverseMap) \t\tthrows JavaModelException", "diff": ["-\t\t\t\t\t\t\t\tcEntry.getExclusionPatterns(), cEntry.getSourceAttachmentPath(),", "-\t\t\t\t\t\t\t\tcEntry.getSourceAttachmentRootPath(), cEntry.getOutputLocation(), ", "-\t\t\t\t\t\t\t\ttrue); // duplicate container entry for tagging it as exported", "+\t\t\t\t\t\t\t\tcEntry.getInclusionPatterns(), cEntry.getExclusionPatterns(), ", "+\t\t\t\t\t\t\t\tcEntry.getSourceAttachmentPath(), cEntry.getSourceAttachmentRootPath(), ", "+\t\t\t\t\t\t\t\tcEntry.getOutputLocation(), true); // duplicate container entry for tagging it as exported"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7fdaf8bed2d2add399498cb2827c688", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "45ad701cf6768aacbaa3124acb1689acb0170902", "commitAfterChange": "d67aa80551d9b46a8c12152b77baac70d5a67e7a", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError) \t\tthrows JavaModelException", "diff": ["+\t\t\t\t\t\t// if container is exported, then its nested entries must in turn be exported  (21749)", "+\t\t\t\t\t\tif (rawEntry.isExported()){", "+\t\t\t\t\t\t\tcontainerRawEntry = new ClasspathEntry(", "+\t\t\t\t\t\t\t\tcontainerRawEntry.getContentKind(),", "+\t\t\t\t\t\t\t\tcontainerRawEntry.getEntryKind(), ", "+\t\t\t\t\t\t\t\tcontainerRawEntry.getPath(),", "+\t\t\t\t\t\t\t\tcontainerRawEntry.getSourceAttachmentPath(),", "+\t\t\t\t\t\t\t\tcontainerRawEntry.getSourceAttachmentRootPath(),", "+\t\t\t\t\t\t\t\ttrue); // duplicate container entry for tagging it as exported", "+\t\t\t\t\t\t}"]}], "num": 62980}
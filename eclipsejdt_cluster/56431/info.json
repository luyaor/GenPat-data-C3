{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3626187ed89a2cf59afbae07c476838c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "223cf44fc8e1f428a5124c7290f09b6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "5292e21f94372deace5f16b5dfc6aac2c22faf52", "commitAfterChange": "2215b5c020d05490fe1ddb8fe56785e7c3280d1b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["-\t\t\t// Report no implicit string conversion", "+\t\t\t// Report no implicit String conversion", "-\t\t\t// Report unused parameter", "+\t\t\t// Report unused parameter when implementing abstract method ", "+\t\t\tif(optionID.equals(OPTION_ReportUnusedParameterWhenImplementingAbstract)){", "+\t\t\t\tif (optionValue.equals(ENABLED)) {", "+\t\t\t\t\tthis.reportUnusedParameterWhenImplementingAbstract = true;", "+\t\t\t\t} else if (optionValue.equals(DISABLED)) {", "+\t\t\t\t\tthis.reportUnusedParameterWhenImplementingAbstract = false;", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t} ", "+\t\t\t// Report unused parameter when implementing abstract method ", "+\t\t\tif(optionID.equals(OPTION_ReportUnusedParameterWhenOverridingConcrete)){", "+\t\t\t\tif (optionValue.equals(ENABLED)) {", "+\t\t\t\t\tthis.reportUnusedParameterWhenOverridingConcrete = true;", "+\t\t\t\t} else if (optionValue.equals(DISABLED)) {", "+\t\t\t\t\tthis.reportUnusedParameterWhenOverridingConcrete = false;", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t} ", "+\t\t\t// Report unused import"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "460280ef0945252d339ec7fb99cc6344", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "cc370a50ac7ec603f065f1e6278826253518f4d4", "commitAfterChange": "1ae189eb0affddcddb5cf43f9552f434a9d25d38", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["+\t\t\t// Report unnecessary receiver for static access", "+\t\t\tif(optionID.equals(OPTION_ReportStaticAccessReceiver)){", "+\t\t\t\tif (optionValue.equals(ERROR)) {", "+\t\t\t\t\tthis.errorThreshold |= StaticAccessReceiver;", "+\t\t\t\t\tthis.warningThreshold &= ~StaticAccessReceiver;", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {", "+\t\t\t\t\tthis.errorThreshold &= ~StaticAccessReceiver;", "+\t\t\t\t\tthis.warningThreshold |= StaticAccessReceiver;", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "+\t\t\t\t\tthis.errorThreshold &= ~StaticAccessReceiver;", "+\t\t\t\t\tthis.warningThreshold &= ~StaticAccessReceiver;", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t} "]}], "num": 56431}
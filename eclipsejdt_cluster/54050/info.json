{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cecacef65992f0eebb28fd2163eb13e0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6612c86a959658206f76d368387a7c43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "10234afdc4f5690ec37e139071f618abb52d00b8", "commitAfterChange": "8aa3c69cecd84b3c2c3bfd8031419f42f6bb2e8f", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic boolean overrides(IMethodBinding overridenMethod)", "signatureAfterChange": " \tpublic boolean overrides(IMethodBinding overridenMethod)", "diff": ["-\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding overridenCompilerBinding = ((MethodBinding) overridenMethod).binding;", "-\t\tif (this.binding == overridenCompilerBinding) ", "-\t\t\treturn false;", "-\t\tchar[] selector = this.binding.selector;", "-\t\tif (!CharOperation.equals(selector, overridenCompilerBinding.selector))", "-\t\t\treturn false;", "-\t\tTypeBinding match = this.binding.declaringClass.findSuperTypeWithSameErasure(overridenCompilerBinding.declaringClass);", "-\t\tif (!(match instanceof ReferenceBinding)) return false;", "-\t\t", "-\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding[] superMethods = ((ReferenceBinding)match).getMethods(selector);", "-\t\tfor (int i = 0, length = superMethods.length; i < length; i++) {", "-\t\t\tif (superMethods[i].original() == overridenCompilerBinding) {", "-\t\t\t\tLookupEnvironment lookupEnvironment = this.resolver.lookupEnvironment();", "-\t\t\t\tif (lookupEnvironment == null) return false;", "-\t\t\t\tMethodVerifier methodVerifier = lookupEnvironment.methodVerifier();", "-\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding superMethod = superMethods[i];", "-\t\t\t\treturn !superMethod.isPrivate() ", "-\t\t\t\t\t&& !(superMethod.isDefault() && (superMethod.declaringClass.getPackage()) != this.binding.declaringClass.getPackage())", "-\t\t\t\t\t&& methodVerifier.doesMethodOverride(this.binding, superMethod);", "+\t\ttry {", "+\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding overridenCompilerBinding = ((MethodBinding) overridenMethod).binding;", "+\t\t\tif (this.binding == overridenCompilerBinding) ", "+\t\t\t\treturn false;", "+\t\t\tchar[] selector = this.binding.selector;", "+\t\t\tif (!CharOperation.equals(selector, overridenCompilerBinding.selector))", "+\t\t\t\treturn false;", "+\t\t\tTypeBinding match = this.binding.declaringClass.findSuperTypeWithSameErasure(overridenCompilerBinding.declaringClass);", "+\t\t\tif (!(match instanceof ReferenceBinding)) return false;", "+\t\t\t", "+\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding[] superMethods = ((ReferenceBinding)match).getMethods(selector);", "+\t\t\tfor (int i = 0, length = superMethods.length; i < length; i++) {", "+\t\t\t\tif (superMethods[i].original() == overridenCompilerBinding) {", "+\t\t\t\t\tLookupEnvironment lookupEnvironment = this.resolver.lookupEnvironment();", "+\t\t\t\t\tif (lookupEnvironment == null) return false;", "+\t\t\t\t\tMethodVerifier methodVerifier = lookupEnvironment.methodVerifier();", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding superMethod = superMethods[i];", "+\t\t\t\t\treturn !superMethod.isPrivate() ", "+\t\t\t\t\t\t&& !(superMethod.isDefault() && (superMethod.declaringClass.getPackage()) != this.binding.declaringClass.getPackage())", "+\t\t\t\t\t\t&& methodVerifier.doesMethodOverride(this.binding, superMethod);", "+\t\t\t\t}", "+\t\t\treturn false;", "+\t\t} catch (AbortCompilation e) {", "+\t\t\t// don't surface internal exception to clients", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=143013", "+\t\t\treturn false;", "-\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70a6225c3d9497f8bd22fbd98de4f1c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "f9968462ad3e78057baba9747e91f7b6e3ea59e1", "commitAfterChange": "1f65e2f1d1142c8be683dea8425f1840c9121137", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic boolean overrides(IMethodBinding overridenMethod)", "signatureAfterChange": " \tpublic boolean overrides(IMethodBinding otherMethod)", "diff": ["-\tpublic boolean overrides(IMethodBinding overridenMethod) {", "-\t\ttry {", "-\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding overridenCompilerBinding = ((MethodBinding) overridenMethod).binding;", "-\t\t\tif (this.binding == overridenCompilerBinding", "-\t\t\t\t\t|| overridenCompilerBinding.isStatic()", "-\t\t\t\t\t|| overridenCompilerBinding.isPrivate()", "-\t\t\t\t\t|| this.binding.isStatic())", "-\t\t\t\treturn false;", "-\t\t\tchar[] selector = this.binding.selector;", "-\t\t\tif (!CharOperation.equals(selector, overridenCompilerBinding.selector))", "-\t\t\t\treturn false;", "-\t\t\tTypeBinding match = this.binding.declaringClass.findSuperTypeOriginatingFrom(overridenCompilerBinding.declaringClass);", "-\t\t\tif (!(match instanceof ReferenceBinding)) return false;", "-", "-\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding[] superMethods = ((ReferenceBinding)match).getMethods(selector);", "-\t\t\tfor (int i = 0, length = superMethods.length; i < length; i++) {", "-\t\t\t\tif (superMethods[i].original() == overridenCompilerBinding) {", "-\t\t\t\t\tLookupEnvironment lookupEnvironment = this.resolver.lookupEnvironment();", "-\t\t\t\t\tif (lookupEnvironment == null) return false;", "-\t\t\t\t\tMethodVerifier methodVerifier = lookupEnvironment.methodVerifier();", "-\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding superMethod = superMethods[i];", "-\t\t\t\t\treturn !(superMethod.isDefault() && (superMethod.declaringClass.getPackage()) != this.binding.declaringClass.getPackage())", "-\t\t\t\t\t\t&& methodVerifier.doesMethodOverride(this.binding, superMethod);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn false;", "-\t\t} catch (AbortCompilation e) {", "-\t\t\t// don't surface internal exception to clients", "-\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=143013", "-\t\t\treturn false;", "-\t\t}", "+\tpublic boolean overrides(IMethodBinding otherMethod) {", "+\t\t\tLookupEnvironment lookupEnvironment = this.resolver.lookupEnvironment();", "+\t\t\treturn lookupEnvironment != null", "+\t\t\t\t&& lookupEnvironment.methodVerifier().doesMethodOverride(this.binding, ((MethodBinding) otherMethod).binding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2b2e4a70640aa655fbca720ef94b635", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java", "commitBeforeChange": "db77467719df6aeaa20c37834dfc19f40472f458", "commitAfterChange": "1a085f6923332d813470a8d5ddda1ced463837b2", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic boolean overrides(ExecutableElement overridden, TypeElement type)", "signatureAfterChange": " \tpublic boolean overrides(ExecutableElement overridden, TypeElement type)", "diff": ["-\t\tthrow new UnsupportedOperationException(\"NYI: overrides(...)\"); //$NON-NLS-1$", "+\t\tMethodBinding overriddenBinding = (MethodBinding)((ExecutableElementImpl) overridden)._binding;", "+\t\tReferenceBinding overriderContext = (ReferenceBinding)((TypeElementImpl)type)._binding;", "+\t\tif ((MethodBinding)_binding == overriddenBinding)", "+\t\t\treturn false;", "+\t\tif (overriddenBinding.isPrivate()) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tchar[] selector = ((MethodBinding)_binding).selector;", "+\t\tif (!CharOperation.equals(selector, overriddenBinding.selector))", "+\t\t\treturn false;", "+\t\t", "+\t\t// Construct a binding to the equivalent of this (the overrider) as it would be inherited by 'type'.", "+\t\t// Can only do this if 'type' is descended from the overrider.", "+\t\t// Second clause of the AND is required to match a peculiar javac behavior.", "+\t\tif (null == overriderContext.findSuperTypeWithSameErasure(((MethodBinding)_binding).declaringClass) &&", "+\t\t\t\tnull == ((MethodBinding)_binding).declaringClass.findSuperTypeWithSameErasure(overriderContext)) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tMethodBinding overriderBinding = new MethodBinding((MethodBinding)_binding, overriderContext);", "+\t\tif (overriderBinding.isPrivate()) {", "+\t\t\t// a private method can never override another method.  The other method would either be", "+\t\t\t// private itself, in which case it would not be visible; or this would be a restriction ", "+\t\t\t// of access, which is a compile-time error.", "+\t\t\treturn false;", "+\t\t}", "+\t\t", "+\t\tTypeBinding match = overriderBinding.declaringClass.findSuperTypeWithSameErasure(overriddenBinding.declaringClass);", "+\t\tif (!(match instanceof ReferenceBinding)) return false;", "+", "+\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding[] superMethods = ((ReferenceBinding)match).getMethods(selector);", "+\t\tfor (int i = 0, length = superMethods.length; i < length; i++) {", "+\t\t\tif (superMethods[i].original() == overriddenBinding) {", "+\t\t\t\tLookupEnvironment lookupEnvironment = _env.getLookupEnvironment();", "+\t\t\t\tif (lookupEnvironment == null) return false;", "+\t\t\t\tMethodVerifier methodVerifier = lookupEnvironment.methodVerifier();", "+\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding superMethod = superMethods[i];", "+\t\t\t\treturn !superMethod.isPrivate()", "+\t\t\t\t\t&& !(superMethod.isDefault() && (superMethod.declaringClass.getPackage()) != overriderBinding.declaringClass.getPackage())", "+\t\t\t\t\t&& methodVerifier.doesMethodOverride(overriderBinding, superMethod);", "+\t\t\t}", "+\t\t}", "+\t\treturn false;"]}], "num": 54050}
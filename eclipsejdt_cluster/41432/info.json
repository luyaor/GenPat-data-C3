{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8e26ad963a1bb51bd8067dc04c57c65", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b77bdc69d9b4579ca21ef218982fd20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "995fcf13bc3ad1e9b32a28fa575739b0c1b6aa41", "commitAfterChange": "125f2e11905eb2190c50776a296c49a5b3f7e6c1", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r void recordTypeReference(TypeBinding type)", "signatureAfterChange": "\r void recordTypeReference(TypeBinding type)", "diff": ["-\tif (qualifiedReferences == null) return; // not recording dependencies\r", "+\tif (referencedTypes == null) return; // not recording dependencies\r", "-\tif (!type.isBaseType() && !typeReferences.containsIdentical(type)) {\r", "-\t\ttypeReferences.add(type);\r", "-\t\tReferenceBinding actualType = (ReferenceBinding) type;\r", "-\t\tif (!actualType.isLocalType()) {\r", "-\t\t\trecordQualifiedReference(actualType.isMemberType()\r", "-\t\t\t\t? CharOperation.splitOn('.', actualType.readableName())\r", "-\t\t\t\t: actualType.compoundName);\r", "-\t\t\tif (actualType.enclosingType() != null)\r", "-\t\t\t\trecordTypeReference(actualType.enclosingType()); // to record its supertypes\r", "-\t\t}\r", "-\t\tif (actualType.superclass() != null)\r", "-\t\t\trecordTypeReference(actualType.superclass());\r", "-\t\tReferenceBinding[] interfaces = actualType.superInterfaces();\r", "-\t\tif (interfaces != null && interfaces.length > 0)\r", "-\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "-\t\t\t\trecordTypeReference(interfaces[j]);\r", "-\t}\r", "+\tif (!type.isBaseType() && !referencedTypes.containsIdentical(type))\r", "+\t\treferencedTypes.add(type);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a44907c48e8a26038f09bea2179d108e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "45a4564880a2dc68bab13a8cd21e316c500cb042", "commitAfterChange": "66abc385db66fdca41f9fe3a5bc9d59e168597c8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public boolean doesMethodOverride(MethodBinding method, MethodBinding inheritedMethod)", "signatureAfterChange": " public boolean doesMethodOverride(MethodBinding method, MethodBinding inheritedMethod)", "diff": ["-\tif (!couldMethodOverride(method, inheritedMethod))", "-\t\treturn false;", "-", "-\t// need to switch back to the original if the method is from a ParameterizedType", "-\tif (method.declaringClass.isParameterizedType())", "-\t\tmethod = method.original();", "-", "-\tinheritedMethod = inheritedMethod.original();", "-\tTypeBinding match = method.declaringClass.findSuperTypeOriginatingFrom(inheritedMethod.declaringClass);", "-\tif (!(match instanceof ReferenceBinding))", "-\t\treturn false; // method's declaringClass does not inherit from inheritedMethod's ", "-", "-\tif (match != inheritedMethod.declaringClass) {", "-\t\tMethodBinding[] superMethods = ((ReferenceBinding) match).getMethods(inheritedMethod.selector);", "-\t\tfor (int i = 0, length = superMethods.length; i < length; i++)", "-\t\t\tif (superMethods[i].original() == inheritedMethod)", "-\t\t\t\treturn isParameterSubsignature(method, superMethods[i]);", "-\t}", "-", "-\treturn isParameterSubsignature(method, inheritedMethod);", "+\treturn couldMethodOverride(method, inheritedMethod) && areMethodsCompatible(method, inheritedMethod);"]}], "num": 41432}
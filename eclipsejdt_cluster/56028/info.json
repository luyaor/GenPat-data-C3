{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a601bf8f6efa4fadaaa85a8568ee9d89", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62ae4acdd2b68e2aee5995b880b6bacb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": " public MethodBinding binding(TypeBinding targetType, boolean reportErrors, Scope scope)", "signatureAfterChange": " public MethodBinding binding(TypeBinding targetType, Scope scope)", "diff": ["-public MethodBinding binding(TypeBinding targetType, boolean reportErrors, Scope scope) {", "-\tif (reportErrors) {", "-\t\tif (this.binding == null)", "-\t\t\tscope.problemReporter().genericInferenceError(\"method is unexpectedly unresolved\", this); //$NON-NLS-1$", "-\t\telse if (!this.binding.isValidBinding())", "-\t\t\tscope.problemReporter().invalidMethod(this, this.binding);", "-\t}", "+public MethodBinding binding(TypeBinding targetType, Scope scope) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eceae72daf4b26b83c3f481c6cdc973c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic MethodBinding binding(TypeBinding targetType, boolean reportErrors, Scope scope)", "signatureAfterChange": " \tpublic MethodBinding binding(TypeBinding targetType, Scope scope)", "diff": ["-\t// -- interface Invocation: --", "-\tpublic MethodBinding binding(TypeBinding targetType, boolean reportErrors, Scope scope) {", "-\t\tif (reportErrors) {", "-\t\t\tif (this.binding == null)", "-\t\t\t\tscope.problemReporter().genericInferenceError(\"constructor is unexpectedly unresolved\", this); //$NON-NLS-1$", "-\t\t\telse if (!this.binding.isValidBinding())", "-\t\t\t\tscope.problemReporter().invalidConstructor(this, this.binding);", "-\t\t}", "+\t// -- interface Invocation", "+\tpublic MethodBinding binding(TypeBinding targetType, Scope scope) {"]}], "num": 56028}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5bd60fa0709d3e416b191d20736638f5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "725d3a7fdf2920624e07a06a26d46043", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "418c9d96f68afdaa5bf2af6f5a37a844d4f83382", "commitAfterChange": "0ca5c78856085a3f8ae52f8191293310a57eb6c4", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "  \tprivate void printJavadocBlock(FormatJavadocBlock block)", "signatureAfterChange": "  \tprivate void printJavadocBlock(FormatJavadocBlock block)", "diff": ["-\t\tboolean clearBlankLines = this.formatter.preferences.comment_clear_blank_lines_in_javadoc_comment;", "-\t\tint previousLine = 0;", "+\t\tint previousLine = Util.getLineNumber(previousEnd, this.lineEnds, 0, this.maxLines);", "+\t\tboolean clearBlankLines = this.formatter.preferences.comment_clear_blank_lines_in_javadoc_comment;", "+\t\tboolean preserveBreakLines = this.formatter.preferences.preserve_existing_line_breaks;", "+\t\t\t\t\tif (!clearBlankLines || preserveBreakLines) {", "+\t\t\t\t\t\tint startLine = Util.getLineNumber(nodeStart, this.lineEnds, previousLine-1, this.maxLines);", "+\t\t\t\t\t\tint gapLine = previousLine;", "+\t\t\t\t\t\tif (!preserveBreakLines) gapLine++; // if not preserving line break then gap must be at least of one line", "+\t\t\t\t\t\tif (startLine > gapLine) {", "+\t\t\t\t\t\t\tnewLines = startLine - previousLine;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (clearBlankLines) {", "+\t\t\t\t\t\t\t// clearing blank lines in this block means that break lines should be preserved, hence only keep one new line", "+\t\t\t\t\t\t\tif (newLines > 0)  newLines = 1;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1ec85afdc6361815e989d123ece6e56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "ee73272992444a9c8e6586ce5a37f5dc6d6e8bd9", "commitAfterChange": "f598d68e65d421b1e902e4d71831d57a9b4e73ab", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tvoid setSourceComment(char[] source)", "signatureAfterChange": " \tvoid setSourceComment(char[] source)", "diff": ["-\t\tfor (int i=0; i<source.length; i++) {", "+\t\tint length = source.length;", "+\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\tif (source[i] == '/') {", "-\t\t\t\t\tswitch (source[++i]) {", "-\t\t\t\t\t\tcase '/':", "-\t\t\t\t\t\t\tcomment = 1; // line comment", "-\t\t\t\t\t\t\tbuffer = new StringBuffer(\"//\");", "-\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '*':", "-\t\t\t\t\t\t\tif (source[++i] == '*') {", "-\t\t\t\t\t\t\t\tif (source[++i] == '/') { // empty block comment", "-\t\t\t\t\t\t\t\t\tthis.comments.add(\"/**/\");", "-\t\t\t\t\t\t\t\t\tthis.allTags.add(new ArrayList());", "-\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\tswitch (source[i]) {", "+\t\t\t\t\tcase '/':", "+\t\t\t\t\t\tswitch (source[++i]) {", "+\t\t\t\t\t\t\tcase '/':", "+\t\t\t\t\t\t\t\tcomment = 1; // line comment", "+\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"//\");", "+\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase '*':", "+\t\t\t\t\t\t\t\tif (source[++i] == '*') {", "+\t\t\t\t\t\t\t\t\tif (source[++i] == '/') { // empty block comment", "+\t\t\t\t\t\t\t\t\t\tthis.comments.add(\"/**/\");", "+\t\t\t\t\t\t\t\t\t\tthis.allTags.add(new ArrayList());", "+\t\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tcomment = 3; // javadoc", "+\t\t\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"/**\");", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tcomment = 3; // javadoc", "-\t\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"/**\");", "+\t\t\t\t\t\t\t\t\tcomment = 2; // block comment", "+\t\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"/*\");", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase '\\'':", "+\t\t\t\t\t\twhile (i<length) {", "+\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\tif (i==length) break;", "+\t\t\t\t\t\t\tif (source[i] == '\\\\') {", "+\t\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\t\tcomment = 2; // block comment", "-\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"/*\");", "+\t\t\t\t\t\t\t\tif (source[i] == '\\'') {", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase '\"':", "+\t\t\t\t\t\twhile (i<length) {", "+\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\tif (i==length) break;", "+\t\t\t\t\t\t\tif (source[i] == '\\\\') {", "+\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (source[i] == '\"') {", "+\t\t\t\t\t\t\t\t\tif ((i+1)==length) break;", "+\t\t\t\t\t\t\t\t\tif (source[i+1] == '\"') {", "+\t\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\tbuffer.append(source[i]);", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbuffer.append(source[i]);"]}], "num": 11952}
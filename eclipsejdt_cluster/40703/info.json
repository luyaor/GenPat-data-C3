{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "076427ed6da15a806abfbae06594c82a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0788cbaf261f1443746ac2990f5ab94f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "3388256fa80bf40daffa9f485d2674986c875b82", "commitAfterChange": "7a73f29da5ea73cce41fc54b0fc3ad302149f476", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic boolean visit(MethodDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(MethodDeclaration node)", "diff": ["-\t\tif (!node.thrownExceptions().isEmpty()) {", "-\t\t\tthis.buffer.append(\" throws \");//$NON-NLS-1$", "-\t\t\tfor (Iterator it = node.thrownExceptions().iterator(); it.hasNext(); ) {", "-\t\t\t\tName n = (Name) it.next();", "-\t\t\t\tn.accept(this);", "-\t\t\t\tif (it.hasNext()) {", "-\t\t\t\t\tthis.buffer.append(\", \");//$NON-NLS-1$", "-\t\t\t\t}", "+\t\tif (node.getAST().apiLevel() < AST.JLS8) {", "+\t\t\tif (!node.thrownExceptions().isEmpty()) {", "+\t\t\t\tthis.buffer.append(\" throws \");//$NON-NLS-1$", "+\t\t\t\tfor (Iterator it = node.thrownExceptions().iterator(); it.hasNext(); ) {", "+\t\t\t\t\tName n = (Name) it.next();", "+\t\t\t\t\tn.accept(this);", "+\t\t\t\t\tif (it.hasNext()) {", "+\t\t\t\t\t\tthis.buffer.append(\", \");//$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tthis.buffer.append(\" \");//$NON-NLS-1$", "+\t\t\t} ", "+\t\t} else {", "+\t\t\tif (!node.thrownExceptionTypes().isEmpty()) {\t\t\t\t", "+\t\t\t\tthis.buffer.append(\" throws \");//$NON-NLS-1$", "+\t\t\t\tfor (Iterator it = node.thrownExceptionTypes().iterator(); it.hasNext(); ) {", "+\t\t\t\t\tType n = (Type) it.next();", "+\t\t\t\t\tn.accept(this);", "+\t\t\t\t\tif (it.hasNext()) {", "+\t\t\t\t\t\tthis.buffer.append(\", \");//$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t}\t", "+\t\t\t\tthis.buffer.append(\" \");//$NON-NLS-1$\t\t\t\t", "-\t\t\tthis.buffer.append(\" \");//$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a7119d838eb5b081f7fd6676aa29bdb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "f40614490d4262be4e6b1da2d796674adcae4653", "commitAfterChange": "2c45e11a23da631b4ad990ef31056ea845ca3f46", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void checkExternalArchiveChanges(IJavaElement[] elementsScope, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic void checkExternalArchiveChanges(IJavaElement[] elementsScope, IProgressMonitor monitor) throws JavaModelException", "diff": ["+\t\t\tboolean hasExternalWorkingCopyProject = false;", "+\t\t\t\tIJavaElement element = elementsScope[i];", "+\t\t\t\tif (element.getElementType() == IJavaElement.JAVA_MODEL) {", "+\t\t\t\t\t// ensure external working copies' projects' caches are reset", "+\t\t\t\t\tHashSet projects = JavaModelManager.getJavaModelManager().getExternalWorkingCopyProjects();", "+\t\t\t\t\tif (projects != null) {", "+\t\t\t\t\t\thasExternalWorkingCopyProject = true;", "+\t\t\t\t\t\tIterator iterator = projects.iterator();", "+\t\t\t\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\t\t\t\tJavaProject project = (JavaProject) iterator.next();", "+\t\t\t\t\t\t\tproject.resetCaches();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (hasExternalWorkingCopyProject) {", "+\t\t\t\t// flush jar type cache", "+\t\t\t\tJavaModelManager.getJavaModelManager().resetJarTypeCache();"]}], "num": 40703}
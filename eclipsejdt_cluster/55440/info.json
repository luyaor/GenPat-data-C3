{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec35230242a2be6c03f7c5d86c866f9f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "128646493bab8818c11ffde93edd612b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompletionRequestorWrapper.java", "commitBeforeChange": "2a46362da18e1189829e578c276cfbf726376a20", "commitAfterChange": "948661c4cb198af70b598b9954e5159cb73d7234", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r public void acceptMethodDeclaration(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, char[][] parameterNames, char[] returnTypePackageName, char[] returnTypeName, char[] completionName, int modifiers, int completionStart, int completionEnd)", "signatureAfterChange": "\r public void acceptMethodDeclaration(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, char[][] parameterNames, char[] returnTypePackageName, char[] returnTypeName, char[] completionName, int modifiers, int completionStart, int completionEnd)", "diff": ["+\tif(parameterNames == null) {\r", "+\t\tint length = parameterTypeNames.length;\r", "+\t\t\r", "+\t\tparameterNames = findMethodParameterNames(declaringTypePackageName, declaringTypeName, selector, parameterPackageNames, parameterTypeNames);\r", "+\t\t\r", "+\t\tStringBuffer completion = new StringBuffer(completionName.length);\r", "+\t\t\t\r", "+\t\tint start = 0;\r", "+\t\tint end = CharOperation.indexOf('%', completionName);\r", "+\r", "+\t\tcompletion.append(CharOperation.subarray(completionName, start, end));\r", "+\t\t\r", "+\t\tfor(int i = 0 ; i < length ; i++){\r", "+\t\t\tcompletion.append(parameterNames[i]);\r", "+\t\t\tstart = end + 1;\r", "+\t\t\tend = CharOperation.indexOf('%', completionName, start);\r", "+\t\t\tif(end > -1){\r", "+\t\t\t\tcompletion.append(CharOperation.subarray(completionName, start, end));\r", "+\t\t\t} else {\r", "+\t\t\t\tcompletion.append(CharOperation.subarray(completionName, start, completionName.length));\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t\r", "+\t\tcompletionName = completion.toString().toCharArray();\r", "+\t}\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67bd2608f57b5acd82a188023130a19c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "9d8b73554095c311a209be1a1d5aa92bb30583eb", "commitAfterChange": "990424c900c7463d4257bff26a1ccc6812106204", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tprivate static void suggestNames( \t\tchar[] packageName, \t\tchar[] qualifiedTypeName, \t\tint dim, \t\tchar[][] prefixes, \t\tchar[][] suffixes, \t\tchar[][] excludedNames, \t\tScanner nameScanner, \t\tINamingRequestor requestor)", "signatureAfterChange": " \t \tprivate static void suggestNames( \t\tchar[] packageName, \t\tchar[] qualifiedTypeName, \t\tint dim, \t\tchar[] internalPrefix, \t\tchar[][] prefixes, \t\tchar[][] suffixes, \t\tchar[][] excludedNames, \t\tScanner nameScanner, \t\tINamingRequestor requestor)", "diff": ["+\t\tchar[] internalPrefix,", "+\t\t", "+\t\tif(internalPrefix == null) {", "+\t\t\tinternalPrefix = CharOperation.NO_CHAR;", "+\t\t} else {", "+\t\t\tinternalPrefix = removePrefix(internalPrefix, prefixes);", "+\t\t}", "-\t\tfor (int i = 0; i < tempNames.length; i++) {", "+\t\tnext : for (int i = 0; i < tempNames.length; i++) {", "-\t\t\tfor (int j = 0; j < prefixes.length; j++) {", "-\t\t\t\tif(prefixes[j].length > 0", "-\t\t\t\t\t&& Character.isLetterOrDigit(prefixes[j][prefixes[j].length - 1])) {", "-\t\t\t\t\ttempName[0] = Character.toUpperCase(tempName[0]);", "-\t\t\t\t} else {", "-\t\t\t\t\ttempName[0] = Character.toLowerCase(tempName[0]);", "-\t\t\t\t}", "-\t\t\t\tchar[] prefixName = CharOperation.concat(prefixes[j], tempName);", "-\t\t\t\tfor (int k = 0; k < suffixes.length; k++) {", "-\t\t\t\t\tchar[] suffixName = CharOperation.concat(prefixName, suffixes[k]);", "-\t\t\t\t\tsuffixName =", "-\t\t\t\t\t\texcludeNames(", "-\t\t\t\t\t\t\tsuffixName,", "-\t\t\t\t\t\t\tprefixName,", "-\t\t\t\t\t\t\tsuffixes[k],", "-\t\t\t\t\t\t\texcludedNames);", "-\t\t\t\t\tif(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {", "-\t\t\t\t\t\tacceptName(suffixName, prefixes[j], suffixes[k],  j == 0, k == 0, requestor);", "-\t\t\t\t\t\tacceptDefaultName = false;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tsuffixName = CharOperation.concat(", "-\t\t\t\t\t\t\tprefixName,", "-\t\t\t\t\t\t\tString.valueOf(1).toCharArray(),", "-\t\t\t\t\t\t\tsuffixes[k]", "-\t\t\t\t\t\t);", "-\t\t\t\t\t\tsuffixName =", "-\t\t\t\t\t\t\texcludeNames(", "-\t\t\t\t\t\t\t\tsuffixName,", "-\t\t\t\t\t\t\t\tprefixName,", "-\t\t\t\t\t\t\t\tsuffixes[k],", "-\t\t\t\t\t\t\t\texcludedNames);", "-\t\t\t\t\t\tif(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {", "-\t\t\t\t\t\t\tacceptName(suffixName, prefixes[j], suffixes[k], j == 0, k == 0, requestor);", "-\t\t\t\t\t\t\tacceptDefaultName = false;", "+\t\t\tchar[] unprefixedName = tempName;", "+\t\t\tfor (int j = 0; j <= internalPrefix.length; j++) {", "+\t\t\t\tif(j == internalPrefix.length || CharOperation.prefixEquals(CharOperation.subarray(internalPrefix, j, -1), unprefixedName, false)) {", "+\t\t\t\t\ttempName = CharOperation.concat(CharOperation.subarray(internalPrefix, 0, j), unprefixedName);", "+\t\t\t\t\tif(j != 0) tempName[j] = Character.toUpperCase(tempName[j]);", "+\t\t\t\t\tfor (int k = 0; k < prefixes.length; k++) {", "+\t\t\t\t\t\tif(prefixes[k].length > 0", "+\t\t\t\t\t\t\t&& Character.isLetterOrDigit(prefixes[k][prefixes[k].length - 1])) {", "+\t\t\t\t\t\t\ttempName[0] = Character.toUpperCase(tempName[0]);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\ttempName[0] = Character.toLowerCase(tempName[0]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tchar[] prefixName = CharOperation.concat(prefixes[k], tempName);", "+\t\t\t\t\t\tfor (int l = 0; l < suffixes.length; l++) {", "+\t\t\t\t\t\t\tchar[] suffixName = CharOperation.concat(prefixName, suffixes[l]);", "+\t\t\t\t\t\t\tsuffixName =", "+\t\t\t\t\t\t\t\texcludeNames(", "+\t\t\t\t\t\t\t\t\tsuffixName,", "+\t\t\t\t\t\t\t\t\tprefixName,", "+\t\t\t\t\t\t\t\t\tsuffixes[l],", "+\t\t\t\t\t\t\t\t\texcludedNames);", "+\t\t\t\t\t\t\tif(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {", "+\t\t\t\t\t\t\t\tacceptName(suffixName, prefixes[k], suffixes[l],  k == 0, l == 0, internalPrefix.length - j, requestor);", "+\t\t\t\t\t\t\t\tacceptDefaultName = false;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tsuffixName = CharOperation.concat(", "+\t\t\t\t\t\t\t\t\tprefixName,", "+\t\t\t\t\t\t\t\t\tString.valueOf(1).toCharArray(),", "+\t\t\t\t\t\t\t\t\tsuffixes[l]", "+\t\t\t\t\t\t\t\t);", "+\t\t\t\t\t\t\t\tsuffixName =", "+\t\t\t\t\t\t\t\t\texcludeNames(", "+\t\t\t\t\t\t\t\t\t\tsuffixName,", "+\t\t\t\t\t\t\t\t\t\tprefixName,", "+\t\t\t\t\t\t\t\t\t\tsuffixes[l],", "+\t\t\t\t\t\t\t\t\t\texcludedNames);", "+\t\t\t\t\t\t\t\tif(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {", "+\t\t\t\t\t\t\t\t\tacceptName(suffixName, prefixes[k], suffixes[l], k == 0, l == 0, internalPrefix.length - j, requestor);", "+\t\t\t\t\t\t\t\t\tacceptDefaultName = false;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\tcontinue next;", "-\t\t\t", "-\t\t\trequestor.acceptNameWithoutPrefixAndSuffix(name);", "+\t\t\trequestor.acceptNameWithoutPrefixAndSuffix(name, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea38b0180e3f76e964226d74281ed723", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/AllPerformanceTests.java", "commitBeforeChange": "14af252394acbb0bfcfcbfb1dcd81d43fd8bedb4", "commitAfterChange": "a5e72f7eb3d8ebc1e13245d6ce4d9ee4d6c6d3db", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static Test suite()", "signatureAfterChange": " \tpublic static Test suite()", "diff": ["-\t\tif (ADD) {", "-\t\t\ttry {", "-\t\t\t\tClass[] complete = getAdditionalTestClasses();", "-\t\t\t\tint completeLength = complete.length;", "-\t\t\t\tClass[] newSuites = new Class[length+completeLength];", "-\t\t\t\tSystem.arraycopy(testSuites, 0, newSuites, 0, length);", "-\t\t\t\tSystem.arraycopy(complete, 0, newSuites, length, completeLength);", "-\t\t\t\ttestSuites = newSuites;", "-\t\t\t\tlength = testSuites.length;", "-\t\t\t} catch (NumberFormatException e1) {", "-\t\t\t\t// do nothing", "+\t\tif (RUN_ID != null) {", "+\t\t\tClass[] subSetSuites = new Class[length];", "+\t\t\tint count = 0;", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tString name = FullSourceWorkspaceTests.suiteTypeShortName(testSuites[i]);", "+\t\t\t\tif (RUN_ID.indexOf(name.charAt(0)) >= 0) {", "+\t\t\t\t\tsubSetSuites[count++] = testSuites[i];", "+\t\t\t\t}", "+\t\t\tSystem.arraycopy(subSetSuites, 0, testSuites = new Class[count], 0, count);", "+\t\t\tlength = count;", "+\t\t}", "+", "+\t\t// Get test suites subset", "+\t\tif (ADD) {", "+\t\t\tClass[] complete = getAdditionalTestClasses();", "+\t\t\tint completeLength = complete.length;", "+\t\t\tClass[] newSuites = new Class[length+completeLength];", "+\t\t\tSystem.arraycopy(testSuites, 0, newSuites, 0, length);", "+\t\t\tSystem.arraycopy(complete, 0, newSuites, length, completeLength);", "+\t\t\ttestSuites = newSuites;", "+\t\t\tlength = testSuites.length;", "+\t\tif (length == 0) {", "+\t\t\tSystem.err.println(\"There's no performances suites to run!!!\");", "+\t\t\treturn perfSuite;", "+\t\t}", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tString name = FullSourceWorkspaceTests.suiteTypeShortName(testSuites[i]);", "-\t\t\tif (name != null) {", "-\t\t\t\tsuitesAcronym += name.substring(0, 1);", "+\t\tif (RUN_ID == null) {", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tString name = FullSourceWorkspaceTests.suiteTypeShortName(testSuites[i]);", "+\t\t\t\tif (name != null) {", "+\t\t\t\t\tchar firstChar = name.charAt(0);", "+\t\t\t\t\tif (suitesAcronym.indexOf(firstChar) >= 0) {", "+\t\t\t\t\t\tSystem.out.println(\"WARNING: Duplicate letter in RUN_ID for test suite: \"+name);", "+\t\t\t\t\t}", "+\t\t\t\t\tsuitesAcronym += firstChar;", "+\t\t\t\t}", "+\t\t} else {", "+\t\t\tsuitesAcronym = RUN_ID;"]}], "num": 55440}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "15b0553f8dccb4ad28020db4b74dd40f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eb60bc53f7c338ec3152f41d2d89e52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "23ce85b62062adfb602af4a47162da068d113e83", "commitAfterChange": "979c704dde214191e3f8aa31211aee678c05ced2", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tprivate void updateClasspathMarkers(IResourceDelta delta, HashSet affectedProjects, Map preferredClasspaths, Map preferredOutputs)", "signatureAfterChange": " \tprivate void updateClasspathMarkers(IResourceDelta delta, HashSet affectedProjects, Map preferredClasspaths, Map preferredOutputs)", "diff": ["-\t\t", "+", "-\t\t\t\t\t\t\tif (!JavaProject.hasJavaNature(project)) {", "+\t\t\t\t\t\t\tboolean wasJavaProject = this.manager.getJavaModel().findJavaProject(project) != null;", "+\t\t\t\t\t\t\tif (wasJavaProject && !isJavaProject) {", "-\t\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (isJavaProject) {", "+\t\t\t\t\t\t\t// check if all entries exist", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject)JavaCore.create(project);", "+\t\t\t\t\t\t\t\tjavaProject.getResolvedClasspath(true/*ignore unresolved entry*/, true/*generate marker on error*/);", "+\t\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t\t// project doesn't exist: ignore"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1357f989ff240ced3be3737dbe00eba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/RegionBasedHierarchyBuilder.java", "commitBeforeChange": "265fce71e12d88a397c49e9793a330fd01dcb78a", "commitAfterChange": "132f5b2e16f0365968d7fa2c2d5a0e7261bfb001", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void createTypeHierarchyBasedOnRegion(HashMap allOpenablesInRegion, IProgressMonitor monitor)", "signatureAfterChange": " private void createTypeHierarchyBasedOnRegion(HashMap allOpenablesInRegion, IProgressMonitor monitor)", "diff": ["-\tif (size != 0) {", "-\t\tthis.infoToHandle = new HashMap(size);", "+\tif (size == 0) {", "+\t\tif (monitor != null) monitor.done();", "+\t\treturn;", "-\t", "+\t\t", "+\tthis.infoToHandle = new HashMap(size);", "-\t\tArrayList allOpenables = (ArrayList) allOpenablesInRegion.get(javaProjects.next());", "+\t\tJavaProject project = (JavaProject) javaProjects.next();", "+\t\tArrayList allOpenables = (ArrayList) allOpenablesInRegion.get(project);", "-\t\t\tif (size > 0) {", "-\t\t\t\tthis.hierarchyResolver.resolve(openables, null, monitor);", "-\t\t\t}", "+\t\t\tSearchableEnvironment searchableEnvironment = project.newSearchableNameEnvironment(this.hierarchy.workingCopies);", "+\t\t\tthis.nameLookup = searchableEnvironment.nameLookup;", "+\t\t\tthis.hierarchyResolver.resolve(openables, null, monitor);", "+\t\t} catch (JavaModelException e) {", "+\t\t\t// project doesn't exit: ignore"]}], "num": 48526}
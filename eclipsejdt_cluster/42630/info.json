{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1b0e2f11e062b799cb7c18483ad1a55", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9facb73b759ec947886bd6acf093730a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "1b98b39107e931dc0893df1da7a410cad5cc4745", "commitAfterChange": "9635fd418f2d5b55fe3d3dc4ccb7797a5daf3a53", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void buildMoreAnnotationCompletionContext(MemberValuePair memberValuePair)", "signatureAfterChange": " private void buildMoreAnnotationCompletionContext(MemberValuePair memberValuePair)", "diff": ["-\tMemberValuePair[] memberValuePairs = null;", "-\tint length;", "-\tif (astLengthPtr > -1 && (length = this.astLengthStack[this.astLengthPtr--]) > nodesToRemove) {", "-\t\tif (this.astStack[this.astPtr] instanceof MemberValuePair) {", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.astStack, ", "-\t\t\t\t(this.astPtr -= length) + 1, ", "-\t\t\t\tmemberValuePairs = new MemberValuePair[length - nodesToRemove], ", "-\t\t\t\t0, ", "-\t\t\t\tlength - nodesToRemove); ", "+\tNormalAnnotation annotation;", "+\tif (memberValuePair instanceof CompletionOnMemberValueName) { ", "+\t\tMemberValuePair[] memberValuePairs = null;", "+\t\tint length;", "+\t\tif (astLengthPtr > -1 && (length = this.astLengthStack[this.astLengthPtr--]) > nodesToRemove) {", "+\t\t\tif (this.astStack[this.astPtr] instanceof MemberValuePair) {", "+\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\tthis.astStack, ", "+\t\t\t\t\t(this.astPtr -= length) + 1, ", "+\t\t\t\t\tmemberValuePairs = new MemberValuePair[length - nodesToRemove], ", "+\t\t\t\t\t0, ", "+\t\t\t\t\tlength - nodesToRemove); ", "+\t\t\t}", "+\t\tannotation =", "+\t\t\tnew CompletionOnAnnotationMemberValuePair(", "+\t\t\t\t\ttypeReference,", "+\t\t\t\t\tthis.intStack[this.intPtr--],", "+\t\t\t\t\tmemberValuePairs,", "+\t\t\t\t\tmemberValuePair);", "+\t\t", "+\t\tthis.assistNode = memberValuePair;", "+\t\tthis.assistNodeParent = annotation;", "+\t\t", "+\t\tif (memberValuePair.sourceEnd >= this.lastCheckPoint) {", "+\t\t\tthis.lastCheckPoint = memberValuePair.sourceEnd + 1;", "+\t\t}", "+\t} else {", "+\t\tMemberValuePair[] memberValuePairs = null;", "+\t\tint length = 0;", "+\t\tif (astLengthPtr > -1 && (length = this.astLengthStack[this.astLengthPtr--]) > nodesToRemove) {", "+\t\t\tif (this.astStack[this.astPtr] instanceof MemberValuePair) {", "+\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\tthis.astStack, ", "+\t\t\t\t\t(this.astPtr -= length) + 1, ", "+\t\t\t\t\tmemberValuePairs = new MemberValuePair[length - nodesToRemove + 1], ", "+\t\t\t\t\t0, ", "+\t\t\t\t\tlength - nodesToRemove); ", "+\t\t\t}", "+\t\t\tif(memberValuePairs != null) {", "+\t\t\t\tmemberValuePairs[length - nodesToRemove] = memberValuePair;", "+\t\t\t} else {", "+\t\t\t\tmemberValuePairs = new MemberValuePair[]{memberValuePair};", "+\t\t\t}", "+\t\t} else {", "+\t\t\tmemberValuePairs = new MemberValuePair[]{memberValuePair};", "+\t\t}", "+\t\t", "+\t\tannotation =", "+\t\t\tnew NormalAnnotation(", "+\t\t\t\t\ttypeReference,", "+\t\t\t\t\tthis.intStack[this.intPtr--]);", "+\t\tannotation.memberValuePairs = memberValuePairs;", "+\t\t\t\t\t", "-\t", "-\tCompletionOnAnnotationMemberValuePair annotation =", "-\t\tnew CompletionOnAnnotationMemberValuePair(typeReference, this.intStack[this.intPtr--], memberValuePairs, memberValuePair);", "-\t", "-\tthis.assistNode = memberValuePair;", "-\tthis.assistNodeParent = annotation;", "-\tif (memberValuePair.sourceEnd >= this.lastCheckPoint) {", "-\t\tthis.lastCheckPoint = memberValuePair.sourceEnd + 1;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da07e6673f23d07bcfb795455c58d8d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredAnnotation.java", "commitBeforeChange": "bae98ccb647b46a2d5cfccf36593de0c5db401c9", "commitAfterChange": "230a5cd410205aeead21b12e1ec93eae10a08fda", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic void updateFromParserState()", "signatureAfterChange": " \t \tpublic void updateFromParserState()", "diff": ["+\t\t\tMemberValuePair pendingMemberValueName = null;", "+\t\t\tif (this.hasPendingMemberValueName && this.identifierPtr < parser.identifierPtr) {", "+\t\t\t\tchar[] memberValueName = parser.identifierStack[this.identifierPtr + 1];", "+\t\t\t\t", "+\t\t\t\tlong pos = parser.identifierPositionStack[this.identifierPtr + 1];", "+\t\t\t\tint start = (int) (pos >>> 32);", "+\t\t\t\tint end = (int)pos;", "+\t\t\t\tint valueEnd = this.memberValuPairEqualEnd > -1 ? this.memberValuPairEqualEnd : end;", "+\t\t\t\t", "+\t\t\t\tSingleNameReference fakeExpression = new SingleNameReference(RecoveryScanner.FAKE_IDENTIFIER, (((long) valueEnd + 1) << 32) + (valueEnd));", "+\t\t\t\tpendingMemberValueName = new MemberValuePair(memberValueName, start, end, fakeExpression);", "+\t\t\t}", "-\t\t\t\t\tMemberValuePair[] memberValuePairs = null;", "+\t\t\t\t\t\tMemberValuePair[] memberValuePairs = null;", "+\t\t\t\t\t\t", "-\t\t\t\t\t\t\tSystem.arraycopy(parser.astStack, argStart, memberValuePairs = new MemberValuePair[argLength], 0, argLength);", "-\t\t\t\t\t\t\tparser.astLengthPtr--;", "-\t\t\t\t\t\t\tparser.astPtr -= argLength;", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tMemberValuePair lastMemberValuePair = memberValuePairs[memberValuePairs.length - 1];", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tNormalAnnotation normalAnnotation = new NormalAnnotation(typeReference, this.sourceStart);", "-\t\t\t\t\t\t\tnormalAnnotation.memberValuePairs = memberValuePairs;", "-\t\t\t\t\t\t\tnormalAnnotation.declarationSourceEnd =", "-\t\t\t\t\t\t\t\tlastMemberValuePair.value != null", "+\t\t\t\t\t\t\tint annotationEnd;", "+\t\t\t\t\t\t\tif (pendingMemberValueName != null) {", "+\t\t\t\t\t\t\t\tmemberValuePairs = new MemberValuePair[argLength + 1];", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tSystem.arraycopy(parser.astStack, argStart, memberValuePairs, 0, argLength);", "+\t\t\t\t\t\t\t\tparser.astLengthPtr--;", "+\t\t\t\t\t\t\t\tparser.astPtr -= argLength;", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tmemberValuePairs[argLength] = pendingMemberValueName;", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tannotationEnd = pendingMemberValueName.sourceEnd;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tmemberValuePairs = new MemberValuePair[argLength];", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tSystem.arraycopy(parser.astStack, argStart, memberValuePairs, 0, argLength);", "+\t\t\t\t\t\t\t\tparser.astLengthPtr--;", "+\t\t\t\t\t\t\t\tparser.astPtr -= argLength;", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tMemberValuePair lastMemberValuePair = memberValuePairs[memberValuePairs.length - 1];", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tannotationEnd = ", "+\t\t\t\t\t\t\t\t\tlastMemberValuePair.value != null", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tNormalAnnotation normalAnnotation = new NormalAnnotation(typeReference, this.sourceStart);", "+\t\t\t\t\t\t\tnormalAnnotation.memberValuePairs = memberValuePairs;", "+\t\t\t\t\t\t\tnormalAnnotation.declarationSourceEnd = annotationEnd;", "-\t\t\t\tMarkerAnnotation markerAnnotation = new MarkerAnnotation(typeReference, this.sourceStart);", "-\t\t\t\tmarkerAnnotation.declarationSourceEnd = markerAnnotation.sourceEnd;", "-\t\t\t\tmarkerAnnotation.bits |= ASTNode.IsRecovered;", "-\t\t\t\t", "-\t\t\t\tannot = markerAnnotation;", "+\t\t\t\tif (pendingMemberValueName != null) {", "+\t\t\t\t\tNormalAnnotation normalAnnotation = new NormalAnnotation(typeReference, this.sourceStart);", "+\t\t\t\t\tnormalAnnotation.memberValuePairs = new MemberValuePair[]{pendingMemberValueName};", "+\t\t\t\t\tnormalAnnotation.declarationSourceEnd = pendingMemberValueName.value.sourceEnd;", "+\t\t\t\t\tnormalAnnotation.bits |= ASTNode.IsRecovered;", "+\t\t\t\t\t", "+\t\t\t\t\tannot = normalAnnotation;", "+\t\t\t\t} else {", "+\t\t\t\t\tMarkerAnnotation markerAnnotation = new MarkerAnnotation(typeReference, this.sourceStart);", "+\t\t\t\t\tmarkerAnnotation.declarationSourceEnd = markerAnnotation.sourceEnd;", "+\t\t\t\t\tmarkerAnnotation.bits |= ASTNode.IsRecovered;", "+\t\t\t\t\t", "+\t\t\t\t\tannot = markerAnnotation;", "+\t\t\t\t}"]}], "num": 42630}
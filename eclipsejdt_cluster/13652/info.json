{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f2e7b3e608f1796a7b142d13fa1c567", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6aa9b8645af08ef291a726487d8299e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "4cc2f8f4e127cb2b5311bd70a3aa9e42278cea32", "commitAfterChange": "0774ccc9fbfb251d06c1b6758403976034210f78", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static SearchPattern createAndPattern(final SearchPattern leftPattern, final SearchPattern rightPattern)", "signatureAfterChange": " \tpublic static SearchPattern createAndPattern(SearchPattern leftPattern, SearchPattern rightPattern)", "diff": ["-\tpublic static SearchPattern createAndPattern(final SearchPattern leftPattern, final SearchPattern rightPattern) {", "-\t\treturn new AndPattern(0/*no kind*/, 0/*no rule*/) {", "-\t\t\tSearchPattern current = leftPattern;", "-\t\t\tpublic SearchPattern currentPattern() {", "-\t\t\t\treturn current;", "-\t\t\t}", "-\t\t\tprotected boolean hasNextQuery() {", "-\t\t\t\tif (current == leftPattern) {", "-\t\t\t\t\tcurrent = rightPattern;", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\treturn false; ", "-\t\t\t}", "-\t\t\tprotected void resetQuery() {", "-\t\t\t\tcurrent = leftPattern;", "-\t\t\t}", "-\t\t};", "+\tpublic static SearchPattern createAndPattern(SearchPattern leftPattern, SearchPattern rightPattern) {", "+\t\treturn MatchLocator.createAndPattern(leftPattern, rightPattern);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ecd526fd7c816fff3254ffa90704f47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "a9c68df97efd734f3ed326f5e99e4d21e6054bec", "commitAfterChange": "af2f21c145913c8a7ccf22989ee905c5f5c7dd0d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static SearchPattern createAndSearchPattern(final SearchPattern leftPattern, final SearchPattern rightPattern)", "signatureAfterChange": " \t\tSearchPatternAdapter(SearchPattern pattern)", "diff": ["+\t\tSearchPattern pattern;", "+\t\tSearchPatternAdapter(SearchPattern pattern) {", "+\t\t\tthis.pattern = pattern;", "+\t\t}", "-\t */", "-\tpublic static SearchPattern createAndSearchPattern(final SearchPattern leftPattern, final SearchPattern rightPattern) {", "-\t\treturn new AndPattern(0/*no kind*/, 0/*no rule*/) {", "-\t\t\tSearchPattern current = leftPattern;", "-\t\t\tpublic SearchPattern currentPattern() {", "-\t\t\t\treturn current;", "-\t\t\t}", "-\t\t\tprotected boolean hasNextQuery() {", "-\t\t\t\tif (current == leftPattern) {", "-\t\t\t\t\tcurrent = rightPattern;", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\treturn false; ", "-\t\t\t}", "-\t\t\tprotected void resetQuery() {", "-\t\t\t\tcurrent = leftPattern;", "-\t\t\t}", "-\t\t};", "-\t}"]}], "num": 13652}
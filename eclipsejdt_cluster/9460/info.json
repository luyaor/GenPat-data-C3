{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "540e6c7773fddada928455fb0be83d33", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd1516a569db1990e47a70e5ab243cae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java", "commitBeforeChange": "92f042fa40e42063d16c97bd03b03013bccafbbf", "commitAfterChange": "564f0099078b50659e30ddb5a5157ad26528c30f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public NameEnvironmentAnswer readJavaFile(String filename, char[][] packageName)", "signatureAfterChange": "\r public NameEnvironmentAnswer readJavaFile(String filename, char[][] packageName)", "diff": ["+\tInputStream stream = null;\r", "-\t\tInputStreamReader reader = new InputStreamReader(zipFile.getInputStream(entry));\r", "-\t\tint length;\r", "-\t\tchar[] contents = new char[length = (int) entry.getSize()];\r", "-\t\tint len = 0;\r", "-\t\tint readSize = 0;\r", "-\t\twhile ((readSize != -1) && (len != length)) {\r", "-\t\t\treadSize = reader.read(contents, len, length - len);\r", "-\t\t\tlen += readSize;\r", "-\t\t}\r", "-\t\treader.close();\r", "+\t\tstream = new BufferedInputStream(zipFile.getInputStream(entry));\r", "+\t\tchar[] contents = Util.getInputStreamAsCharArray(stream, (int) entry.getSize());\r", "+\t} finally {\r", "+\t\tif (stream != null) {\r", "+\t\t\ttry {\r", "+\t\t\t\tstream.close();\r", "+\t\t\t} catch (IOException e) {\r", "+\t\t\t}\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f983b1e4014696f1e5c5112f38d2e82a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "92f042fa40e42063d16c97bd03b03013bccafbbf", "commitAfterChange": "564f0099078b50659e30ddb5a5157ad26528c30f", "methodNumberBeforeChange": 231, "methodNumberAfterChange": 231, "signatureBeforeChange": "\r protected static char[] readTable(String filename) throws java.io.IOException", "signatureAfterChange": "\r protected static char[] readTable(String filename) throws java.io.IOException", "diff": ["-\tInputStream stream = Parser.class.getResourceAsStream(filename);\r", "+\tInputStream stream = new BufferedInputStream(Parser.class.getResourceAsStream(filename));\r", "-\r", "-\tByteArrayOutputStream os = new ByteArrayOutputStream(32000);\r", "-\t// the largest file is 30K\r", "-\tbyte[] buffer = new byte[10000];\r", "-\r", "-\tint streamLength = 0;\r", "-\tint lastReadSize = 0;\r", "-\twhile ((lastReadSize = stream.read(buffer)) > 0) {\r", "-\t\tstreamLength += lastReadSize;\r", "-\t\tos.write(buffer, 0, lastReadSize);\r", "+\tbyte[] bytes = null;\r", "+\ttry {\r", "+\t\tbytes = Util.getInputStreamAsByteArray(stream, -1);\r", "+\t} finally {\r", "+\t\ttry {\r", "+\t\t\tstream.close();\r", "+\t\t} catch (IOException e) {\r", "+\t\t}\r", "-\tbyte[] bytes = os.toByteArray();\r", "-\tstream.close();\r", "-\tif (streamLength % 2 != 0)\r", "+\tint length = bytes.length;\r", "+\tif (length % 2 != 0)\r", "-\tchar[] chars = new char[streamLength / 2];\r", "+\tchar[] chars = new char[length / 2];\r", "-\t\tif (i == streamLength)\r", "+\t\tif (i == length)\r"]}], "num": 9460}
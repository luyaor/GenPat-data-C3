{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b40b6c1bf87839144fdc2ef2e65dd483", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64175e79dd573ff55923d5fafd5ead3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["-public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo) {", "+public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess) {", "-\t\tsuper.manageSyntheticReadAccessIfNecessary(currentScope, flowInfo);", "+\t\tsuper.manageSyntheticAccessIfNecessary(currentScope, flowInfo, isReadAccess);", "-\t", "+", "-\t\treturn;", "+\t\treturn;\t", "+\t// if field from parameterized type got found, use the original field at codegen time", "+\tif (this.binding instanceof ParameterizedFieldBinding) {", "+\t    ParameterizedFieldBinding parameterizedField = (ParameterizedFieldBinding) this.binding;", "+\t    this.codegenBinding = parameterizedField.originalField;", "+\t    FieldBinding fieldCodegenBinding = (FieldBinding)this.codegenBinding;", "+\t    // extra cast needed if field type was type variable", "+\t    if ((fieldCodegenBinding.type.tagBits & TagBits.HasTypeVariable) != 0) {", "+\t        this.genericCast = fieldCodegenBinding.type.genericCast(parameterizedField.type);", "+\t    }\t\t    ", "+\t}\t\t", "-//\t\t\tif (((this.bits & DepthMASK) != 0)", "-//\t\t\t\t&& (fieldBinding.isPrivate() // private access", "-//\t\t\t\t\t|| (fieldBinding.isProtected() // implicit protected access", "-//\t\t\t\t\t\t\t&& fieldBinding.declaringClass.getPackage() ", "-//\t\t\t\t\t\t\t\t!= this.delegateThis.type.getPackage()))) {", "-//\t\t\t\tif (this.syntheticAccessors == null)", "-//\t\t\t\t\tthis.syntheticAccessors = new MethodBinding[2];", "-//\t\t\t\tthis.syntheticAccessors[READ] = ", "-//\t\t\t\t\t((SourceTypeBinding)currentScope.enclosingSourceType().", "-//\t\t\t\t\t\tenclosingTypeAt((this.bits & DepthMASK) >> DepthSHIFT)).", "-//\t\t\t\t\t\t\taddSyntheticMethod(fieldBinding, true);", "-//\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldReadAccess(fieldBinding, this);", "-//\t\t\t\treturn;", "-//\t\t\t}", "-\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)this.delegateThis.type);", "-\t\t}", "-\t}", "-}", "+\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding((FieldBinding)this.codegenBinding, (ReferenceBinding)this.delegateThis.type.erasure());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b303eaf70903f2b591515f62066bb017", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void computeFolderChildren(IContainer folder, String prefix, ArrayList vChildren, char[][] exclusionPatterns) throws JavaModelException", "signatureAfterChange": " protected void computeFolderChildren(IContainer folder, boolean isIncluded, String prefix, ArrayList vChildren, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "diff": ["-protected void computeFolderChildren(IContainer folder, String prefix, ArrayList vChildren, char[][] exclusionPatterns) throws JavaModelException {", "-\tIPackageFragment pkg = getPackageFragment(prefix);", "-\tvChildren.add(pkg);", "+protected void computeFolderChildren(IContainer folder, boolean isIncluded, String prefix, ArrayList vChildren, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException {", "+", "+\tif (isIncluded) {", "+\t    IPackageFragment pkg = getPackageFragment(prefix);", "+\t\tvChildren.add(pkg);", "+\t}", "+\t\tboolean hasIncluded = isIncluded;", "-\t\t\tif (member.getType() == IResource.FOLDER ", "-\t\t\t\t&& Util.isValidFolderNameForPackage(memberName)", "-\t\t\t\t&& !Util.isExcluded(member, exclusionPatterns)) {", "-\t\t\t\t\t", "-\t\t\t\t// eliminate binary output only if nested inside direct subfolders", "-\t\t\t\tif (javaProject.contains(member)) {", "-\t\t\t\t\tString newPrefix;", "-\t\t\t\t\tif (prefix.length() == 0) {", "-\t\t\t\t\t\tnewPrefix = memberName;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tnewPrefix = prefix + \".\" + memberName; //$NON-NLS-1$", "+\t\t\t", "+\t\t\tswitch(member.getType()) {", "+\t\t\t    ", "+\t\t\t    case IResource.FOLDER:", "+\t\t\t\t\tif (Util.isValidFolderNameForPackage(memberName)) {", "+\t\t\t\t\t    boolean isMemberIncluded = !Util.isExcluded(member, inclusionPatterns, exclusionPatterns);", "+\t\t\t\t\t\t// keep looking inside as long as included already, or may have child included due to inclusion patterns", "+\t\t\t\t\t    if (isMemberIncluded || inclusionPatterns != null) { ", "+\t\t\t\t\t\t\t// eliminate binary output only if nested inside direct subfolders", "+\t\t\t\t\t\t\tif (javaProject.contains(member)) {", "+\t\t\t\t\t\t\t\tString newPrefix;", "+\t\t\t\t\t\t\t\tif (prefix.length() == 0) {", "+\t\t\t\t\t\t\t\t\tnewPrefix = memberName;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tnewPrefix = prefix + \".\" + memberName; //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcomputeFolderChildren((IFolder) member, isMemberIncluded, newPrefix, vChildren, inclusionPatterns, exclusionPatterns);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "-\t\t\t\t\tcomputeFolderChildren((IFolder) member, newPrefix, vChildren, exclusionPatterns);", "-\t\t\t\t}", "+\t\t\t    \tbreak;", "+\t\t\t    case IResource.FILE:", "+\t\t\t        // inclusion filter may only include files, in which case we still want to include the immediate parent package (lazily)", "+\t\t\t\t\tif (!hasIncluded", "+\t\t\t\t\t\t\t\t&& Util.isValidCompilationUnitName(memberName)", "+\t\t\t\t\t\t\t\t&& !Util.isExcluded(member, inclusionPatterns, exclusionPatterns)) {", "+\t\t\t\t\t\thasIncluded = true;", "+\t\t\t\t\t    IPackageFragment pkg = getPackageFragment(prefix);", "+\t\t\t\t\t    vChildren.add(pkg); ", "+\t\t\t\t\t}", "+\t\t\t        break;"]}], "num": 60436}
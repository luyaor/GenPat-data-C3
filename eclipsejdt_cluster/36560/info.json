{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3adcbf21e78c797ca56ab1597ffefa40", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2a87fd6fa628118936a062dce7e2cde", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/Tests.java", "commitBeforeChange": "9384d44d51fc135ab261a46a0c5c6cf06b8a4075", "commitAfterChange": "641e4134a5f663294c87ac80c963d690a90319bc", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] expectedProblems)", "signatureAfterChange": " \tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] expectedProblems)", "diff": ["-\tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] expectedProblems){", "+\tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] expectedProblems) {", "+\t\tif (DEBUG)", "+\t\t\tprintProblemsFor(root);", "-\t\tStringBuffer expectation = new StringBuffer(20);", "-\t\tfor (int k = 0; k < expectedProblems.length; k++){", "-\t\t\texpectation.append(\"\\tnew Problem(\\\"\"); //$NON-NLS-1$", "-\t\t\texpectation.append(expectedProblems[k].getLocation());", "-\t\t\texpectation.append(\"\\\", \\\"\"); //$NON-NLS-1$", "-\t\t\texpectation.append(expectedProblems[k].getMessage());", "-\t\t\texpectation.append(\"\\\", new Path(\\\"\"); //$NON-NLS-1$", "-\t\t\texpectation.append(expectedProblems[k].getResourcePath());", "-\t\t\texpectation.append(\"\\\"))\\n\");\t\t\t\t //$NON-NLS-1$", "-\t\t}", "-\t\tString expectationString = expectation.toString();", "-\t\t", "-\t\tStringBuffer actual = new StringBuffer(20);", "-\t\tfor (int k = 0; k < rootProblems.length; k++){", "-\t\t\tactual.append(\"\\tnew Problem(\\\"\"); //$NON-NLS-1$", "-\t\t\tactual.append(rootProblems[k].getLocation());", "-\t\t\tactual.append(\"\\\", \\\"\"); //$NON-NLS-1$", "-\t\t\tactual.append(rootProblems[k].getMessage());", "-\t\t\tactual.append(\"\\\", new Path(\\\"\"); //$NON-NLS-1$", "-\t\t\tactual.append(rootProblems[k].getResourcePath());", "-\t\t\tactual.append(\"\\\"))\\n\");\t\t\t\t //$NON-NLS-1$", "-\t\t}", "-\t\tString actualString = actual.toString();", "-\t\t", "-\t\tif (!actualString.equals(expectationString)) {", "-\t\t\tSystem.out.println(actualString);", "-\t\t}\t\t", "-\t\tassertEquals(\"unexpected problems\", expectationString, actualString); //$NON-NLS-1$", "+\t\tfor (int i = 0; i < expectedProblems.length; i++)", "+\t\t\tassertEquals(\"unexpected problem\", expectedProblems[i].toString(), rootProblems[i].toString()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc92077aeecd3d180547b1a490ddf8eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/Tests.java", "commitBeforeChange": "36ed82abbe7e502a978d9c0accfce6a012b19459", "commitAfterChange": "9c758b514ff22b5d5788e72caf7fb6693f319a5f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] problems)", "signatureAfterChange": " \tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] expectedProblems)", "diff": ["-\tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] problems){", "-\t\tif(DEBUG)", "-\t\t\tprintProblemsFor(root);", "+\tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] expectedProblems){", "+", "+\t\tStringBuffer expectation = new StringBuffer(20);", "+\t\tfor (int k = 0; k < expectedProblems.length; k++){", "+\t\t\texpectation.append(\"\\tnew Problem(\\\"\");", "+\t\t\texpectation.append(expectedProblems[k].getLocation());", "+\t\t\texpectation.append(\"\\\", \\\"\");", "+\t\t\texpectation.append(expectedProblems[k].getMessage());", "+\t\t\texpectation.append(\"\\\", new Path(\\\"\");", "+\t\t\texpectation.append(expectedProblems[k].getResourcePath());", "+\t\t\texpectation.append(\"\\\"))\\n\");\t\t\t\t", "+\t\t}", "+\t\tString expectationString = expectation.toString();", "+\t\tStringBuffer actual = new StringBuffer(20);", "-\t\t\t\t", "-\t\tnext : for (int i = 0; i < problems.length; i++) {", "-\t\t\tProblem problem = problems[i];", "-\t\t\tfor (int j = 0; j < rootProblems.length; j++) {", "-\t\t\t\tProblem rootProblem = rootProblems[j];", "-\t\t\t\tif(rootProblem != null){", "-\t\t\t\t\tif(problem.equals(rootProblem)){", "-\t\t\t\t\t\trootProblems[j] = null;", "-\t\t\t\t\t\tcontinue next;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tassertTrue(\"missing expected problem : \"+ problem, false);", "+\t\tfor (int k = 0; k < rootProblems.length; k++){", "+\t\t\tactual.append(\"\\tnew Problem(\\\"\");", "+\t\t\tactual.append(rootProblems[k].getLocation());", "+\t\t\tactual.append(\"\\\", \\\"\");", "+\t\t\tactual.append(rootProblems[k].getMessage());", "+\t\t\tactual.append(\"\\\", new Path(\\\"\");", "+\t\t\tactual.append(rootProblems[k].getResourcePath());", "+\t\t\tactual.append(\"\\\"))\\n\");\t\t\t\t", "+\t\tString actualString = actual.toString();", "-\t\tfor (int i = 0; i < rootProblems.length; i++) {", "-\t\t\tif(rootProblems[i] != null) {", "-\t\t\t\tassertTrue(\"unexpected problem : \"+ rootProblems[i], false);", "-\t\t\t}", "-\t\t}", "+\t\tif (!actualString.equals(expectationString)) {", "+\t\t\tSystem.out.println(actualString);", "+\t\t}\t\t", "+\t\tassertEquals(\"unexpected problems\", expectationString, actualString);"]}], "num": 36560}
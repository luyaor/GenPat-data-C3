{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "53b06595e5f24047e9566e9e8c46b704", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fbb1030d8cd45da804d718b4ecd2bac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "70416b46b1375461a92d89ffa1cb077778dc6e86", "commitAfterChange": "0c53505dd9d8f221929a96f99e04ff55bfc4fc05", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void initialize(JavaProject project) throws JavaModelException", "signatureAfterChange": " \tpublic void initialize(JavaProject project, PotentialMatch[] potentialMatches) throws JavaModelException", "diff": ["+\t */", "+\tpublic void initialize(JavaProject project, PotentialMatch[] potentialMatches) throws JavaModelException {", "+\t\t// create name environment", "+\t\tif (this.nameEnvironment != null) { // cleanup", "+\t\t\tthis.nameEnvironment.cleanup();", "+\t\t}", "+\t\tif (potentialMatches.length == 1) {", "+\t\t\t// if only one potential match, a file name environment costs too much,", "+\t\t\t// so use the existing searchable  environment which will populate the java model", "+\t\t\t// only for this potential match and its required types.", "+\t\t\tthis.nameEnvironment = project.getSearchableNameEnvironment();", "+\t\t} else {", "+\t\t\tthis.nameEnvironment = new JavaSearchNameEnvironment2(project);", "+\t\t}", "+", "-\t\tCompilerOptions options = new CompilerOptions(project.getOptions(true));", "+\t\tthis.options = new CompilerOptions(project.getOptions(true));", "-\t\t\t\toptions,", "+\t\t\t\tthis.options,", "-\t\t\tnew LookupEnvironment(this, options, problemReporter, this.nameEnvironment);", "+\t\t\tnew LookupEnvironment(this, this.options, problemReporter, this.nameEnvironment);", "-\t\tthis.parser = new MatchLocatorParser(problemReporter, options.sourceLevel);", "-\t\t", "-\t\t// reset parsed units (they could hold onto obsolete bindings: see bug 16052)", "-\t\tMatchingOpenable[] openables = this.matchingOpenables.getMatchingOpenables(project.getPackageFragmentRoots());", "-\t\tfor (int i = 0, length = openables.length; i < length; i++) {", "-\t\t\tMatchingOpenable matchingOpenable = openables[i];", "-\t\t\tmatchingOpenable.reset();", "-\t\t}", "-\t\tthis.parsedUnits = new HashtableOfObject(10);", "-\t\t", "+\t\tthis.parser = new MatchLocatorParser(problemReporter, this.options.sourceLevel);", "+\t\t\t\t", "-\t}", "+\t\t", "+\t\t// initialize queue of units", "+\t\tthis.totalUnits = 0;", "+\t\tint maxUnits = potentialMatches.length;", "+\t\tthis.unitsToProcess = new CompilationUnitDeclaration[maxUnits];", "+\t\tthis.matchesToProcess = new PotentialMatch[maxUnits];", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fe715fa51b9b90d8127ef47d685bef6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 17, "signatureBeforeChange": "  private void initializeBuilder() throws CoreException", "signatureAfterChange": "  private void initializeBuilder() throws CoreException", "diff": ["-\tthis.javaProject = JavaCore.create(currentProject);", "+\tthis.javaProject = (JavaProject) JavaCore.create(currentProject);", "-\tthis.outputFolder = (IContainer) workspaceRoot.findMember(javaProject.getOutputLocation());", "-\tif (this.outputFolder == null) {", "-\t\tthis.outputFolder = workspaceRoot.getFolder(javaProject.getOutputLocation());", "-\t\tcreateFolder(this.outputFolder);", "-\t}", "-\tString projectName = this.currentProject.getName();", "+\tString projectName = currentProject.getName();", "-\tArrayList sourceList = new ArrayList();", "-\tthis.binaryResources = new SimpleLookupTable(3);", "-\tthis.classpath = NameEnvironment.computeLocations(", "-\t\tworkspaceRoot,", "-\t\tjavaProject,", "-\t\toutputFolder.getLocation().toString(),", "-\t\tsourceList,", "-\t\tbinaryResources);", "-\tthis.sourceFolders = new IContainer[sourceList.size()];", "-\tsourceList.toArray(this.sourceFolders);", "+\tthis.binaryLocationsPerProject = new SimpleLookupTable(3);", "+\tthis.nameEnvironment = new NameEnvironment(workspaceRoot, javaProject, binaryLocationsPerProject);", "-\t\tthis.fileFilters = null;", "-\t\tthis.folderFilters = null;", "+\t\tthis.extraResourceFileFilters = null;", "+\t\tthis.extraResourceFolderFilters = null;", "-\t\tfor (int i = 0, length = filters.length; i < length; i++) {", "+\t\tfor (int i = 0, l = filters.length; i < l; i++) {", "-\t\tthis.fileFilters = new char[fileCount][];", "-\t\tthis.folderFilters = new String[folderCount];", "-\t\tfor (int i = 0, length = filters.length; i < length; i++) {", "+\t\tthis.extraResourceFileFilters = new char[fileCount][];", "+\t\tthis.extraResourceFolderFilters = new String[folderCount];", "+\t\tfor (int i = 0, l = filters.length; i < l; i++) {", "-\t\t\t\tfolderFilters[--folderCount] = new String(CharOperation.subarray(f, 0, f.length - 1));", "+\t\t\t\textraResourceFolderFilters[--folderCount] = new String(CharOperation.subarray(f, 0, f.length - 1));", "-\t\t\t\tfileFilters[--fileCount] = f;", "+\t\t\t\textraResourceFileFilters[--fileCount] = f;"]}], "num": 61786}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27ebc8930367120a3a8d39ddf93e9f3d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d015671867a143894d5cf232bc262e9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java", "commitBeforeChange": "ef3c2078d9cee48378a186a3e9a6e61cb6a67acc", "commitAfterChange": "18c98a5a751096350077436fcf968eb63364ccb9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void addInnerEmulationDependent(BlockScope dependentScope, boolean wasEnclosingInstanceSupplied)", "signatureAfterChange": " public void addInnerEmulationDependent(BlockScope dependentScope, boolean wasEnclosingInstanceSupplied)", "diff": ["-", "-\tif (dependents == null) {", "+\tif (this.dependents == null) {", "-\t\tdependents = new InnerEmulationDependency[1];", "+\t\tthis.dependents = new InnerEmulationDependency[1];", "-\t\tindex = dependents.length;", "+\t\tindex = this.dependents.length;", "-\t\t\tif (dependents[i].scope == dependentScope)", "+\t\t\tif (this.dependents[i].scope == dependentScope)", "-\t\tSystem.arraycopy(dependents, 0, (dependents = new InnerEmulationDependency[index + 1]), 0, index);", "+\t\tSystem.arraycopy(this.dependents, 0, (this.dependents = new InnerEmulationDependency[index + 1]), 0, index);", "-\tdependents[index] = new InnerEmulationDependency(dependentScope, wasEnclosingInstanceSupplied);", "+\tthis.dependents[index] = new InnerEmulationDependency(dependentScope, wasEnclosingInstanceSupplied);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8318b6c3774d50f8fa143eee7f30836", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t */", "-\tpublic void generateCode(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tboolean valueRequired) {", "-", "-\t\tint pc = codeStream.position;", "-\t\treceiver.generateCode(currentScope, codeStream, true);", "-\t\tif (receiver instanceof CastExpression\t// ((type[])null)[0]", "-\t\t\t\t&& ((CastExpression)receiver).innermostCastedExpression().resolvedType == TypeBinding.NULL){", "-\t\t\tcodeStream.checkcast(receiver.resolvedType); ", "-\t\t}\t\t\t", "-\t\tposition.generateCode(currentScope, codeStream, true);", "-\t\tcodeStream.arrayAt(this.resolvedType.id);", "-\t\t// Generating code for the potential runtime type checking", "-\t\tif (valueRequired) {", "-\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t} else {", "-\t\t\tboolean isUnboxing = (implicitConversion & TypeIds.UNBOXING) != 0;", "-\t\t\t// conversion only generated if unboxing", "-\t\t\tif (isUnboxing) codeStream.generateImplicitConversion(implicitConversion);", "-\t\t\tswitch (isUnboxing ? postConversionType(currentScope).id : this.resolvedType.id) {", "-\t\t\t\tcase T_long :", "-\t\t\t\tcase T_double :", "-\t\t\t\t\tcodeStream.pop2();", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault :", "-\t\t\t\t\tcodeStream.pop();", "-\t\t\t}", "-\t\t}", "-\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t}", "+ */", "+public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {", "+\tint pc = codeStream.position;", "+\tthis.receiver.generateCode(currentScope, codeStream, true);", "+\tif (this.receiver instanceof CastExpression\t// ((type[])null)[0]", "+\t\t\t&& ((CastExpression)this.receiver).innermostCastedExpression().resolvedType == TypeBinding.NULL){", "+\t\tcodeStream.checkcast(this.receiver.resolvedType); ", "+\t}\t\t\t", "+\tthis.position.generateCode(currentScope, codeStream, true);", "+\tcodeStream.arrayAt(this.resolvedType.id);", "+\t// Generating code for the potential runtime type checking", "+\tif (valueRequired) {", "+\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t} else {", "+\t\tboolean isUnboxing = (this.implicitConversion & TypeIds.UNBOXING) != 0;", "+\t\t// conversion only generated if unboxing", "+\t\tif (isUnboxing) codeStream.generateImplicitConversion(this.implicitConversion);", "+\t\tswitch (isUnboxing ? postConversionType(currentScope).id : this.resolvedType.id) {", "+\t\t\tcase T_long :", "+\t\t\tcase T_double :", "+\t\t\t\tcodeStream.pop2();", "+\t\t\t\tcodeStream.pop();", "+\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+}"]}], "num": 65912}
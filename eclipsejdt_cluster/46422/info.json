{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba1bf0e589b0740913aa5f7b4e1083bf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "277d3183bf230ae4e6fe2c7567c4d87b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "b8f31731e75965ced53a2b2bb7747f2f3f0bdc77", "commitAfterChange": "90b243491d35267d13bcf8f4b3b622ed87af2ae7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, int nullStatus, CheckMode mode)", "signatureAfterChange": " \tpublic static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, int nullStatus, CheckMode mode)", "diff": ["-\t\t\t\t\t\tif (providedDimsTagBits == null) {", "-\t\t\t\t\t\t\tseverity = 1; // required is annotated, provided not, need unchecked conversion", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tfor (int i=0; i<=dims; i++) {", "-\t\t\t\t\t\t\t\tlong requiredBits = validNullTagBits(requiredDimsTagBits[i]);", "-\t\t\t\t\t\t\t\tlong providedBits = validNullTagBits(providedDimsTagBits[i]);", "-\t\t\t\t\t\t\t\tif (i > 0)", "-\t\t\t\t\t\t\t\t\tnullStatus = -1; // don't use beyond the outermost dimension", "-\t\t\t\t\t\t\t\tseverity = Math.max(severity, computeNullProblemSeverity(requiredBits, providedBits, nullStatus, mode == CheckMode.OVERRIDE));", "-\t\t\t\t\t\t\t\tif (severity == 2)", "-\t\t\t\t\t\t\t\t\treturn NullAnnotationMatching.NULL_ANNOTATIONS_MISMATCH;", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (providedDimsTagBits == null)", "+\t\t\t\t\t\t\tprovidedDimsTagBits = new long[dims+1]; // set to unspec'd at all dimensions", "+\t\t\t\t\t\tfor (int i=0; i<=dims; i++) {", "+\t\t\t\t\t\t\tlong requiredBits = validNullTagBits(requiredDimsTagBits[i]);", "+\t\t\t\t\t\t\tlong providedBits = validNullTagBits(providedDimsTagBits[i]);", "+\t\t\t\t\t\t\tif (i > 0)", "+\t\t\t\t\t\t\t\tnullStatus = -1; // don't use beyond the outermost dimension", "+\t\t\t\t\t\t\tseverity = Math.max(severity, computeNullProblemSeverity(requiredBits, providedBits, nullStatus, mode == CheckMode.OVERRIDE && nullStatus == -1));", "+\t\t\t\t\t\t\tif (severity == 2)", "+\t\t\t\t\t\t\t\treturn NullAnnotationMatching.NULL_ANNOTATIONS_MISMATCH;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9262b5b87f25a8d01241e7ac7de86d4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " protected int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType)", "signatureAfterChange": " protected int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType, int nullStatus)", "diff": ["-protected int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType) {", "+// return: severity: 0 = no problem; 1 = flow related problem; 2 = unchecked wrt type detail; 3 = conflicting annotations", "+protected int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType, int nullStatus) {", "-\t\t\t\t\t\tif (requiredBits != 0 && requiredBits != providedBits) {", "-\t\t\t\t\t\t\tif (providedBits == 0)", "-\t\t\t\t\t\t\t\tseverity = 1; // need unchecked conversion regarding type detail", "-\t\t\t\t\t\t\telse", "-\t\t\t\t\t\t\t\treturn 2; // mismatching annotations", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (i > 0)", "+\t\t\t\t\t\t\tnullStatus = 0; // don't use beyond the outermost dimension", "+\t\t\t\t\t\tseverity = Math.max(severity, computeNullProblemSeverity(requiredBits, providedBits, nullStatus));", "+\t\t\t\t\t\tif (severity == 3)", "+\t\t\t\t\t\t\treturn severity;", "+\t\t\t} else if (providedType.id == TypeIds.T_null) {", "+\t\t\t\tif (dims > 0 && requiredDimsTagBits[0] == TagBits.AnnotationNonNull)", "+\t\t\t\t\treturn 1;", "+\t\t\t}", "+\t\t}", "+\t} else if (requiredType instanceof ParameterizedTypeBinding) {", "+\t\tlong requiredBits = requiredType.tagBits & TagBits.AnnotationNullMASK;", "+\t\tif (requiredBits == TagBits.AnnotationNullable)", "+\t\t\treturn 0; // accepting anything", "+\t\tlong providedBits = providedType.tagBits & TagBits.AnnotationNullMASK;", "+\t\tseverity = computeNullProblemSeverity(requiredBits, providedBits, nullStatus);", "+\t\t// TODO(stephan): descend into type parameters", "+\t}", "+\treturn severity;", "+}", "-\treturn severity;"]}], "num": 46422}
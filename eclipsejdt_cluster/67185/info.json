{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "87b0563be02e0676787dfcf432a3942b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c03385d0f962103e1f3c456a87c975a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "a2a25daab3f792071cba7e3d51c3d2abf00c6c2a", "commitAfterChange": "8bffc680730baeb75a0764c02d5d9479eee4502e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate ReferenceBinding findGroundTargetType(BlockScope blockScope, ReferenceBinding targetType, boolean argumentTypesElided)", "signatureAfterChange": "  \tprivate ReferenceBinding findGroundTargetType(BlockScope blockScope, ReferenceBinding targetType, boolean argumentTypesElided)", "diff": ["-\t\t\tReferenceBinding genericType = withWildCards.genericType();", "-\t\t\tif (!argumentTypesElided) {", "-\t\t\t\t// invoke 18.5.3 Functional Interface Parameterization Inference", "-\t\t\t\tInferenceContext18 ctx = new InferenceContext18(blockScope);", "-\t\t\t\tTypeBinding[] q = ctx.createBoundsForFunctionalInterfaceParameterizationInference(withWildCards);", "-\t\t\t\tif (q == null || q.length != this.arguments.length) {", "-\t\t\t\t\t// fail  TODO: can this still happen here?", "-\t\t\t\t} else {", "-\t\t\t\t\tif (ctx.reduceWithEqualityConstraints(this.argumentTypes, q)) {", "-\t\t\t\t\t\tTypeBinding[] a = withWildCards.arguments; // a is not-null by construction of parameterizedWithWildcard()", "-\t\t\t\t\t\tTypeBinding[] aprime = ctx.getFunctionInterfaceArgumentSolutions(a);", "-\t\t\t\t\t\t// TODO If F<A'1, ..., A'm> is a well-formed type, ...", "-\t\t\t\t\t\treturn blockScope.environment().createParameterizedType(genericType, aprime, genericType.enclosingType());", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\t// non-wildcard parameterization (9.8) of the target type", "-\t\t\t\tTypeBinding[] types = withWildCards.getNonWildcardParameterization(blockScope);", "-\t\t\t\tif (types == null)", "-\t\t\t\t\treturn null;", "-\t\t\t\treturn blockScope.environment().createParameterizedType(genericType, types, genericType.enclosingType());", "-\t\t\t}", "+\t\t\tif (!argumentTypesElided)", "+\t\t\t\treturn new InferenceContext18(blockScope).inferFunctionalInterfaceParameterization(this, blockScope, withWildCards);", "+\t\t\telse", "+\t\t\t\treturn findGroundTargetTypeForElidedLambda(blockScope, withWildCards);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ee783f04bddb519b13b3d8556447840", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "f8e06af2d64912de617f742baa744d8cff14ca39", "commitAfterChange": "799bcf90c7e5ed6ce45339b7f5c6f4ecccd1d29c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["+\t\t\t}", "+\t\t}", "+\t\tif (!argumentsTypeElided && !buggyArguments) {", "+\t\t\tParameterizedTypeBinding withWildCards = InferenceContext18.parameterizedWithWildcard(this.expectedType);", "+\t\t\tif (withWildCards != null) {", "+\t\t\t\t// invoke 18.5.3 Functional Interface Parameterization Inference", "+\t\t\t\tInferenceContext18 ctx = new InferenceContext18(methodScope);", "+\t\t\t\tTypeBinding[] q = ctx.createBoundsForFunctionalInterfaceParameterizationInference(withWildCards);", "+\t\t\t\tif (q.length != this.arguments.length) {", "+\t\t\t\t\t// fail  TODO: can this still happen here?", "+\t\t\t\t} else {", "+\t\t\t\t\tif (ctx.reduceWithEqualityConstraints(this.argumentTypes, q)) {", "+\t\t\t\t\t\tTypeBinding[] a = withWildCards.arguments;", "+\t\t\t\t\t\tTypeBinding[] aprime = ctx.getFunctionInterfaceArgumentSolutions(a);", "+\t\t\t\t\t\t// TODO If F<A'1, ..., A'm> is a well-formed type, ...", "+\t\t\t\t\t\tReferenceBinding genericType = withWildCards.genericType();", "+\t\t\t\t\t\tthis.resolvedType = blockScope.environment().createParameterizedType(genericType, aprime, genericType.enclosingType());", "+\t\t\t\t\t\tthis.descriptor = this.resolvedType.getSingleAbstractMethod(blockScope, false);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tArgument argument = this.arguments[i];", "+\t\t\tTypeBinding parameterType;", "+\t\t\tfinal TypeBinding expectedParameterType = haveDescriptor && i < this.descriptor.parameters.length ? this.descriptor.parameters[i] : null;", "+\t\t\tparameterType = argumentsTypeElided ? expectedParameterType : this.argumentTypes[i];", "+\t\t\tif (parameterType != null && parameterType != TypeBinding.VOID) {"]}], "num": 67185}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "faf0bdba1963989028ee5f3b9c8336d9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76a93720568b99762368c2f6d5485d63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "86d91ac06ac1f83882727b265dd0aca78db0b5a4", "commitAfterChange": "68dbe89e9a681991a7bbff64c6d62bbc27421841", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \t\t \tpublic MethodDeclaration convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": " \t\t \tpublic MethodDeclaration convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "diff": ["-\t\t\tif (statements != null || explicitConstructorCall != null) {", "-\t\t\t\tstart = retrieveStartBlockPosition(methodDeclaration.sourceStart, declarationSourceEnd);", "-\t\t\t\tend = retrieveEndBlockPosition(methodDeclaration.sourceStart, methodDeclaration.declarationSourceEnd);", "-\t\t\t\tif (start != -1 && end != -1) {", "-\t\t\t\t\tBlock block = this.ast.newBlock();", "-\t\t\t\t\tblock.setSourceRange(start, end - start + 1);", "-\t\t\t\t\tif (explicitConstructorCall != null && explicitConstructorCall.accessMode != org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall.ImplicitSuper) {", "-\t\t\t\t\t\tblock.statements().add(convert(explicitConstructorCall));", "-\t\t\t\t\t}", "-\t\t\t\t\tint statementsLength = statements == null ? 0 : statements.length;", "-\t\t\t\t\tfor (int i = 0; i < statementsLength; i++) {", "-\t\t\t\t\t\tif (statements[i] instanceof org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) {", "-\t\t\t\t\t\t\tcheckAndAddMultipleLocalDeclaration(statements, i, block.statements());", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tblock.statements().add(convert(statements[i]));", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tmethodDecl.setBody(block);", "+\t\t\tstart = retrieveStartBlockPosition(methodDeclaration.sourceStart, declarationSourceEnd);", "+\t\t\tend = retrieveEndBlockPosition(methodDeclaration.sourceStart, methodDeclaration.declarationSourceEnd);", "+\t\t\tBlock block = null;", "+\t\t\tif (start != -1 && end != -1) {", "+\t\t\t\t/*", "+\t\t\t\t * start or end can be equal to -1 if we have an interface's method.", "+\t\t\t\t */", "+\t\t\t\tblock = this.ast.newBlock();", "+\t\t\t\tblock.setSourceRange(start, end - start + 1);", "+\t\t\t\tmethodDecl.setBody(block);", "+\t\t\t}", "+\t\t\tif (block != null && (statements != null || explicitConstructorCall != null)) {", "+\t\t\t\tif (explicitConstructorCall != null && explicitConstructorCall.accessMode != org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall.ImplicitSuper) {", "+\t\t\t\t\tblock.statements().add(convert(explicitConstructorCall));", "-\t\t\t} else if (!methodDeclaration.isNative() && !methodDeclaration.isAbstract()) {", "-\t\t\t\tstart = retrieveStartBlockPosition(methodDeclaration.sourceStart, declarationSourceEnd);", "-\t\t\t\tend = retrieveEndBlockPosition(methodDeclaration.sourceStart, methodDeclaration.declarationSourceEnd);", "-\t\t\t\tif (start != -1 && end != -1) {", "-\t\t\t\t\t/*", "-\t\t\t\t\t * start or end can be equal to -1 if we have an interface's method.", "-\t\t\t\t\t */", "-\t\t\t\t\tBlock block = this.ast.newBlock();", "-\t\t\t\t\tblock.setSourceRange(start, end - start + 1);", "-\t\t\t\t\tmethodDecl.setBody(block);", "+\t\t\t\tint statementsLength = statements == null ? 0 : statements.length;", "+\t\t\t\tfor (int i = 0; i < statementsLength; i++) {", "+\t\t\t\t\tif (statements[i] instanceof org.eclipse.jdt.internal.compiler.ast.LocalDeclaration) {", "+\t\t\t\t\t\tcheckAndAddMultipleLocalDeclaration(statements, i, block.statements());", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tblock.statements().add(convert(statements[i]));", "+\t\t\t\t\t}", "+\t\t\tif (block != null && (Modifier.isAbstract(methodDecl.getModifiers()) || Modifier.isNative(methodDecl.getModifiers()))) {", "+\t\t\t\tmethodDecl.setFlags(ASTNode.MALFORMED);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec456c47073519708e6466235fd439f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/UtilTest.java", "commitBeforeChange": "0f549220f498cda7c86a65324f594a6b8e8c2616", "commitAfterChange": "17fcd420e0756889bcaffeff4cf983b2cff84a3e", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 65, "signatureBeforeChange": " public void test62()", "signatureAfterChange": " public void test62()", "diff": ["-\tassertTrue(\"Camel pattern matching failure-1\",", "-\t\t\tCharOperation.camelCaseMatch(\"NPE\".toCharArray(), \"NullPointerException\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-2\",", "-\t\t\tCharOperation.camelCaseMatch(\"NPExc\".toCharArray(), \"NullPointerException\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-3\",", "-\t\t\t!CharOperation.camelCaseMatch(\"NPoE\".toCharArray(), \"NullPointerException\".toCharArray()));", "-\tassertTrue(\"Camel pattern matching failure-4\",", "-\t\t\t!CharOperation.camelCaseMatch(\"NuPExc\".toCharArray(), \"NullPointerException\".toCharArray()));", "+\tassertCamelCase(\"NPE\", \"NullPointerException\", true/* should match */);", "+\tassertCamelCase(\"NPExc\", \"NullPointerException\", true/* should match */);", "+\tassertCamelCase(\"NPoE\", \"NullPointerException\", true/* should match */);", "+\tassertCamelCase(\"NuPExc\", \"NullPointerException\", true/* should match */);", "+\t// Verify that there were no unexpected results", "+    assertTrue(this.camelCaseErrors.toString(), this.camelCaseErrors.length()==0);"]}], "num": 578}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ced28212841b877fdc4b1894c9c26f0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40d81831ba4ce5abfe8e87951c3e5a69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java", "commitBeforeChange": "45ea0c0963e46daaae31261dbb16943dd8fe31f9", "commitAfterChange": "2eac8e5fe7a3ec66583085fd9b264a552c7df520", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic static CompilationUnitDeclaration process( \t\tICompilationUnit unitElement,  \t\tIProblemRequestor problemRequestor, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "signatureAfterChange": "  \tpublic static CompilationUnitDeclaration process( \t\tCompilationUnitDeclaration unit, \t\tICompilationUnit unitElement,  \t\tIProblemRequestor problemRequestor, \t\tIProgressMonitor monitor) \t\tthrows JavaModelException", "diff": ["+\t\tCompilationUnitDeclaration unit,", "-\t\tCompilationUnitDeclaration unit = null;", "-\t\t\tunit = problemFinder.resolve(", "+\t\t\tif (unit == null) {", "+\t\t\t\tunit = problemFinder.resolve(", "+\t\t\t} else {", "+\t\t\t\tproblemFinder.resolve(", "+\t\t\t\t\tunit,", "+\t\t\t\t\tnull, // no need for source", "+\t\t\t\t\ttrue, // verify methods", "+\t\t\t\t\ttrue, // analyze code", "+\t\t\t\t\ttrue); // generate code", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47dca7269cdb9c109b5d738e11c0b1d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "1cd36da9dd049ac527dcab1976c08155d6c121b9", "commitAfterChange": "f2c2a11caa27156fb260986cef359f78136ce40c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tICompilationUnit unit, \t\tboolean resolveBindings, \t\tWorkingCopyOwner owner)", "signatureAfterChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tICompilationUnit unit, \t\tboolean resolveBindings, \t\tWorkingCopyOwner owner)", "diff": ["+\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = null;", "-\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = CompilationUnitResolver.resolve(unit);", "+\t\t\t\tcompilationUnitDeclaration = CompilationUnitResolver.resolve(unit, false/*don't cleanup*/);", "+\t\t\t\tif (compilationUnitDeclaration != null) {", "+\t\t\t\t\tcompilationUnitDeclaration.cleanUp();", "+\t\t\t\t}"]}], "num": 2176}
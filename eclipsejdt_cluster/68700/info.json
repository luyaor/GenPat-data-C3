{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8df71dd2983178a971e330e641002a56", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "160a50c00699fe0c456b53626feb30bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "a0e1c3dcf228c336c502d98a3bf45af3be67e4df", "commitAfterChange": "d644fbac5b6fa9c32824a6e9c1731fdea560370f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "diff": ["-\t\tboolean hasGenericError = false;", "-\t\tReferenceBinding currentType;", "+\t\tTypeBinding type = internalResolveLeafType(scope, enclosingType, checkBounds);", "+\t\t// handle three different outcomes:", "+\t\tif (type == null) {", "+\t\t\tthis.resolvedType = createArrayType(scope, this.resolvedType);", "+\t\t\treturn null;\t\t\t\t\t\t\t// no useful type, but still captured dimensions into this.resolvedType", "+\t\t} else {", "+\t\t\ttype = createArrayType(scope, type);", "+\t\t\tif (!this.resolvedType.isValidBinding())", "+\t\t\t\treturn type;\t\t\t\t\t\t// found some error, but could recover useful type (like closestMatch)", "+\t\t\telse ", "+\t\t\t\treturn this.resolvedType = type; \t// no complaint, keep fully resolved type (incl. dimensions)", "+\t\t}", "+\t}", "-\t\t\t\thasGenericError = true;", "-\t\t\t\thasGenericError = true;", "-\t\t\t\t// array type ?", "-\t\t\t\tTypeBinding type = currentType;", "-\t\t\t\tif (this.dimensions > 0) {", "-\t\t\t\t\tif (this.dimensions > 255)", "-\t\t\t\t\t\tscope.problemReporter().tooManyDimensions(this);", "-\t\t\t\t\ttype = scope.createArrayType(type, this.dimensions);", "-\t\t\t\t}", "-\t\t\t\tif (hasGenericError)", "-\t\t\t\t\treturn type;", "-\t\t\t\treturn this.resolvedType = type;", "-\t\tTypeBinding type = parameterizedType;", "-\t\t// array type ?", "-\t\t\ttype = scope.createArrayType(type, this.dimensions);", "-\t\tif (hasGenericError) {", "-\t\t\treturn type;", "-\t\t}", "-\t\treturn this.resolvedType = type;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9d1d570e59f5559ebc5d2423f1a7801", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "a0e1c3dcf228c336c502d98a3bf45af3be67e4df", "commitAfterChange": "d644fbac5b6fa9c32824a6e9c1731fdea560370f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveLeafType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "diff": ["-\t\tboolean hasGenericError = false;", "-\t\tReferenceBinding currentType;", "+\t}", "+\tprivate TypeBinding internalResolveLeafType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds) {", "+\t\tReferenceBinding currentType;", "-\t\t\t\thasGenericError = true;", "-\t\t\t\thasGenericError = true;", "-\t\t\t\t// array type ?", "-\t\t\t\tTypeBinding type = currentType;", "-\t\t\t\tif (this.dimensions > 0) {", "-\t\t\t\t\tif (this.dimensions > 255)", "-\t\t\t\t\t\tscope.problemReporter().tooManyDimensions(this);", "-\t\t\t\t\ttype = scope.createArrayType(type, this.dimensions);", "-\t\t\t\t}", "-\t\t\t\tif (hasGenericError)", "-\t\t\t\t\treturn type;", "-\t\t\t\treturn this.resolvedType = type;", "+\t\t\t\tif (!this.resolvedType.isValidBinding())", "+\t\t\t\t\treturn currentType;", "+\t\t\t\treturn this.resolvedType = currentType;", "-\t\tTypeBinding type = parameterizedType;", "-\t\t// array type ?", "+\t\tif (!this.resolvedType.isValidBinding()) {", "+\t\t\treturn parameterizedType;", "+\t\t}", "+\t\treturn this.resolvedType = parameterizedType;", "+\t}", "-\t\t\ttype = scope.createArrayType(type, this.dimensions);", "-\t\tif (hasGenericError) {", "-\t\t\treturn type;", "-\t\t}", "-\t\treturn this.resolvedType = type;"]}], "num": 68700}
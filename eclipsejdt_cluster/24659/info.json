{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94567ff0ef0727c8cf6c9f35f210e5a2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db6009fc25936ad5909f49c4c9fcfd75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "0371188bae8847b23acded54b847b2e6acb55e2f", "commitAfterChange": "70388ba5a3272ffd8da7da345ffb96bb25e84f31", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public void resolve(BlockScope scope)", "signatureAfterChange": "  public void resolve(BlockScope scope)", "diff": ["-\t} else if (scope.isBoxingCompatibleWith(expressionType, methodType)", "-\t\t\t\t\t\t|| (expressionType.isBaseType()  // narrowing then boxing ?", "-\t\t\t\t\t\t\t\t&& scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5 // autoboxing", "-\t\t\t\t\t\t\t\t&& !methodType.isBaseType()", "-\t\t\t\t\t\t\t\t&& !methodType.isTypeVariable()", "-\t\t\t\t\t\t\t\t&& this.expression.isConstantValueOfTypeAssignableToType(expressionType, scope.environment().computeBoxingType(methodType)))) {", "+\t} else if (isBoxingCompatible(expressionType, methodType, this.expression, scope)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e41933c0e87c0e2668c9d5ffc9ed81d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatch.java", "commitBeforeChange": "835454076c7c84a3d008630e11d7802ddd16d580", "commitAfterChange": "dfc6a6fda29de48e066662fb088bf2e300f9b1e1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static APTResult runAPTDuringReconcile( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tICompilationUnit compilationUnit, IJavaProject javaProj)", "signatureAfterChange": " \tpublic static APTResult runAPTDuringReconcile( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tICompilationUnit compilationUnit, IJavaProject javaProj)", "diff": ["-\t\t\tICompilationUnit compilationUnit, IJavaProject javaProj) {\t\t", "+\t\t\tICompilationUnit compilationUnit, IJavaProject javaProj) ", "+\t{", "+\t\treturn runAPT( factories, javaProj, null, compilationUnit );", "+\t}", "-\t\t//", "-\t\t//  bail-out early if there aren't factories or if there arent any annotation instances", "-\t\t// ", "-\t\tif ( factories == null || factories.size() == 0 || ! AptUtil.hasAnnotationInstance( compilationUnit ))", "-\t\t\tif ( DEBUG ) trace( \"runAPTDuringReconcile: leaving early because there are no factories or annotation instances\");", "-\t\t\tcleanupAllGeneratedFilesForParent( (IFile)compilationUnit.getResource() );", "-\t\t\treturn EMPTY_APT_RESULT;", "-", "-\t\tProcessorEnvImpl processorEnv = ProcessorEnvImpl", "-\t\t\t\t.newProcessorEnvironmentForReconcile(compilationUnit, javaProj);", "-\t\treturn runAPT(factories, processorEnv);", "-\t}"]}], "num": 24659}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba452ceddfdcd586de80a86c92e2b7c8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85082247f655269a67c5ebd01170a5da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "fdf4380d8dd2e7b1f08462c3e15a52a8d6142eb4", "commitAfterChange": "e92ab0eafbe7472576da485243db5aa49da5df74", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+            checkNullAnnotations(scope);", "-        if (scope.compilerOptions().isAnnotationBasedNullAnalysisEnabled) {", "-        \tif (this.expectedType == null || !NullAnnotationMatching.hasContradictions(this.expectedType)) { // otherwise assume it has been reported and we can do nothing here", "-\t        \t// TODO: simplify by using this.freeParameters?", "-\t        \tint len;", "-\t        \tint expectedlen = this.binding.parameters.length;", "-\t        \tint providedLen = this.descriptor.parameters.length;", "-\t        \tif (this.receiverPrecedesParameters)", "-\t        \t\tprovidedLen--; // one parameter is 'consumed' as the receiver", "-\t        \tboolean isVarArgs = false;", "-\t        \tif (this.binding.isVarargs()) {", "-\t        \t\tisVarArgs = (providedLen == expectedlen)", "-\t\t\t\t\t\t? !this.descriptor.parameters[expectedlen-1].isCompatibleWith(this.binding.parameters[expectedlen-1])", "-\t\t\t\t\t\t: true;", "-\t        \t\tlen = providedLen; // binding parameters will be padded from InferenceContext18.getParameter()", "-\t        \t} else {", "-\t        \t\tlen = Math.min(expectedlen, providedLen);", "-\t        \t}", "-\t    \t\tfor (int i = 0; i < len; i++) {", "-\t    \t\t\tTypeBinding descriptorParameter = this.descriptor.parameters[i + (this.receiverPrecedesParameters ? 1 : 0)];", "-\t    \t\t\tTypeBinding bindingParameter = InferenceContext18.getParameter(this.binding.parameters, i, isVarArgs);", "-\t    \t\t\tNullAnnotationMatching annotationStatus = NullAnnotationMatching.analyse(bindingParameter, descriptorParameter, FlowInfo.UNKNOWN);", "-\t    \t\t\tif (annotationStatus.isAnyMismatch()) {", "-\t    \t\t\t\t// immediate reporting:", "-\t    \t\t\t\tscope.problemReporter().referenceExpressionArgumentNullityMismatch(this, bindingParameter, descriptorParameter, this.descriptor, i, annotationStatus);", "-\t    \t\t\t}", "-\t    \t\t}", "-\t        \tif (!this.binding.isConstructor() && (this.descriptor.returnType.tagBits & TagBits.AnnotationNonNull) != 0) {", "-\t        \t\t// since constructors never return null we don't have to check those anyway.", "-\t        \t\tif ((this.binding.returnType.tagBits & TagBits.AnnotationNonNull) == 0) {", "-\t        \t\t\tchar[][] providedAnnotationName = ((this.binding.returnType.tagBits & TagBits.AnnotationNullable) != 0) ?", "-\t        \t\t\t\t\tscope.environment().getNullableAnnotationName() : null;", "-\t        \t\t\tscope.problemReporter().illegalReturnRedefinition(this, this.descriptor,", "-\t        \t\t\t\t\tscope.environment().getNonNullAnnotationName(),", "-\t        \t\t\t\t\tprovidedAnnotationName, this.binding.returnType);", "-\t        \t\t}", "-\t        \t}", "-        \t}", "-        }", "+        checkNullAnnotations(scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91038e807989ae443f373b5a9010cbb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "d7b968f8074ad4e44b5a08309dcb414a4be941a4", "commitAfterChange": "b64275d5d6005c49a64e53460529203088ebb2bb", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tprivate void formatMethodArguments( \t\t\tAbstractMethodDeclaration methodDeclaration, \t\t\tboolean spaceBeforeOpenParen, \t\t\tboolean spaceBetweenEmptyParameters, \t\t\tboolean spaceBeforeClosingParen, \t\t\tboolean spaceBeforeFirstParameter, \t\t\tboolean spaceBeforeComma, \t\t\tboolean spaceAfterComma, \t\t\tint methodDeclarationParametersAlignment)", "signatureAfterChange": " \tprivate void formatMethodArguments( \t\t\tAbstractMethodDeclaration methodDeclaration, \t\t\tboolean spaceBeforeOpenParen, \t\t\tboolean spaceBetweenEmptyParameters, \t\t\tboolean spaceBeforeClosingParen, \t\t\tboolean spaceBeforeFirstParameter, \t\t\tboolean spaceBeforeComma, \t\t\tboolean spaceAfterComma, \t\t\tint methodDeclarationParametersAlignment)", "diff": ["+\t\tformatMethodArguments(", "+\t\t\t\tmethodDeclaration.arguments,", "+\t\t\t\tmethodDeclaration.scope,", "+\t\t\t\tspaceBeforeOpenParen,", "+\t\t\t\tspaceBetweenEmptyParameters,", "+\t\t\t\tspaceBeforeClosingParen,", "+\t\t\t\tspaceBeforeFirstParameter,", "+\t\t\t\tspaceBeforeComma,", "+\t\t\t\tspaceAfterComma,", "+\t\t\t\tmethodDeclarationParametersAlignment);", "+\t}", "-\t\tfinal Argument[] arguments = methodDeclaration.arguments;", "-\t\t\t\t\t\targuments[i].traverse(this, methodDeclaration.scope);"]}], "num": 64313}
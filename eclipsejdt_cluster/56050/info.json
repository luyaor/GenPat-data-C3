{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b26a5cf401a2fd4430ba010028138c69", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93eb9730d88951acf6f7c06cf8b01caf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorReferencePattern.java", "commitBeforeChange": "5d5551ec2f3d482c3329accb7b283797956514be", "commitAfterChange": "dd3fd2545bf6e1ef8b167aefc85ac247cd0a3802", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public int matchLevel(Binding binding)", "signatureAfterChange": " private int matchLevel(ConstructorDeclaration constructor, boolean resolve)", "diff": ["+ */", "+private int matchLevel(ConstructorDeclaration constructor, boolean resolve) {", "+\tExplicitConstructorCall constructorCall = constructor.constructorCall;", "+\tif (constructorCall != null && constructorCall.accessMode == ExplicitConstructorCall.ImplicitSuper) {", "+\t\treturn this.matchLevel(constructorCall, resolve);", "+\t} else {", "+\t\t// Eliminate explicit super call as it will be treated with matchLevel(ExplicitConstructorCall, boolean)", "+\t\treturn IMPOSSIBLE_MATCH;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9721c6463cffb227bf136f8913103ab1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 138, "methodNumberAfterChange": 19, "signatureBeforeChange": " public boolean inlineForwardReferencesFromLabelsTargeting(BranchLabel targetLabel, int gotoLocation)", "signatureAfterChange": " public boolean hasFramePositions()", "diff": ["-}", "-public boolean inlineForwardReferencesFromLabelsTargeting(BranchLabel targetLabel, int gotoLocation) {", "-    if (targetLabel.delegate != null) return false; // already inlined", "-    int chaining = L_UNKNOWN;", "-", "-    boolean removeFrame = true;", "-    for (int i = this.countLabels - 1; i >= 0; i--) {", "-        BranchLabel currentLabel = labels[i];", "-        if (currentLabel.position != gotoLocation) break;", "-        if (currentLabel == targetLabel) {", "-            chaining |= L_CANNOT_OPTIMIZE;", "-            continue;", "-        }", "-        if (currentLabel.isStandardLabel()) {", "-            if (currentLabel.delegate != null) continue;", "-            chaining |= L_OPTIMIZABLE;", "-            if (currentLabel.forwardReferenceCount() == 0 && ((currentLabel.tagBits & BranchLabel.USED) != 0)) {", "-                removeFrame = false;", "-            }", "-            continue;", "-        }", "-        // case label", "-        removeFrame = false;", "-        chaining |= L_CANNOT_OPTIMIZE;", "-    }", "-    if ((chaining & L_OPTIMIZABLE) != 0) {", "-        for (int i = this.countLabels - 1; i >= 0; i--) {", "-            BranchLabel currentLabel = labels[i];", "-            if (currentLabel.position != gotoLocation) break;", "-            if (currentLabel == targetLabel) continue;", "-            if (currentLabel.isStandardLabel()) {", "-                if (currentLabel.delegate != null) continue;", "-                targetLabel.becomeDelegateFor(currentLabel);", "-                // we should remove the frame corresponding to otherLabel position in order to prevent unused stack frame", "-                if (removeFrame) {", "-                    currentLabel.tagBits &= ~BranchLabel.USED;", "-                    this.removeStackFrameFor(gotoLocation);", "-                }", "-            }", "-        }", "-    }", "-    return (chaining & (L_OPTIMIZABLE|L_CANNOT_OPTIMIZE)) == L_OPTIMIZABLE; // check was some standards, and no case/recursive", "-}", "+}", "+public boolean hasFramePositions() {", "+\treturn this.framePositions.size() != 0;", "+}"]}], "num": 56050}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c8e0b7738e7e72b7bdb30a9c13cc54a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10d54c2e3a686d38de4e0f3984f137f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "f73fdb0a354f2f38e3faeb7d9eceabb3d85530d5", "commitAfterChange": "5c2dc76a8d3cf16dded8b483e956ad365692fb92", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": "   \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateImplicitLambda(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["+\t}", "+\t\tboolean generateSecretReceiverVariable = shouldGenerateSecretReceiverVariable();", "+\t\t\tif (generateSecretReceiverVariable) {", "+\t\t\t\tthis.lhs.generateCode(currentScope, codeStream, true);", "+\t\t\t\tcodeStream.store(this.receiverVariable, false);", "+\t\t\t\tcodeStream.addVariable(this.receiverVariable);", "+\t\t\t}", "-\t\t\tmessage.receiver = this.receiverPrecedesParameters ? new SingleNameReference(\"arg0\".toCharArray(), 0) : copy.lhs; //$NON-NLS-1$", "+\t\t\tExpression receiver = generateSecretReceiverVariable ? new SingleNameReference(this.receiverVariable.name, 0) : copy.lhs;", "+\t\t\tmessage.receiver = this.receiverPrecedesParameters ? new SingleNameReference(\"arg0\".toCharArray(), 0) : receiver; //$NON-NLS-1$", "+\t\tif (generateSecretReceiverVariable) {", "+\t\t\tcodeStream.removeVariable(this.receiverVariable);", "+\t\t\tthis.receiverVariable = null;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "644172cde21b78b35c3dfad84967394f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["+\t\t\t\t/*", "+\t\t\t\t * This should not happen. For consistency purpose, if the exception label is never used", "+\t\t\t\t * we also don't generate the corresponding catch block, otherwise we have some", "+\t\t\t\t * unreachable bytecodes", "+\t\t\t\t */", "+\t\t\t\tif (exceptionLabels[i].count == 0) continue;", "-\t\t\t\tcodeStream.pushOnStack(exceptionLabels[i].exceptionType);", "+\t\t\t\tcodeStream.pushExceptionOnStack(exceptionLabels[i].exceptionType);", "-\t\tif (this.subRoutineStartLabel != null) {", "-\t\t\tcodeStream.pushOnStack(this.scope.getJavaLangThrowable());", "+\t\tif (this.subRoutineStartLabel != null && this.anyExceptionLabel.count != 0) {", "+\t\t\tcodeStream.pushExceptionOnStack(this.scope.getJavaLangThrowable());", "-\t\t\t\t\tint position = codeStream.position;\t\t\t\t\t\t", "+\t\t\t\t\tint position = codeStream.position;", "-\t\t\t\t\tcodeStream.pushOnStack(this.scope.getJavaLangThrowable());", "+\t\t\t\t\tcodeStream.pushExceptionOnStack(this.scope.getJavaLangThrowable());", "+\t\t\t\t\tcodeStream.addVariable(this.anyExceptionVariable);", "+\t\t\t\t\tcodeStream.removeVariable(this.anyExceptionVariable);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "742a030c176ca6cc2fda0936a1f2953d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);\t\t\t\t", "+\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);", "-\t\t\t\tcodeStream.store(this.collectionVariable, true); ", "+\t\t\t\tcodeStream.store(this.collectionVariable, true);", "+\t\t\t\tcodeStream.addVariable(this.collectionVariable);", "+\t\t\t\t\tcodeStream.addVariable(this.maxVariable);", "+\t\t\t\t\tcodeStream.addVariable(this.indexVariable);", "+\t\t\t\tcodeStream.addVariable(this.indexVariable);", "+\t\tswitch(this.kind) {", "+\t\t\tcase ARRAY :", "+\t\t\t\tcodeStream.removeVariable(this.indexVariable);", "+\t\t\t\tcodeStream.removeVariable(this.maxVariable);", "+\t\t\t\tcodeStream.removeVariable(this.collectionVariable);", "+\t\t\t\tbreak;", "+\t\t\tcase RAW_ITERABLE :", "+\t\t\tcase GENERIC_ITERABLE :", "+\t\t\t\t// generate the condition", "+\t\t\t\tcodeStream.removeVariable(this.indexVariable);", "+\t\t\t\tbreak;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e9e2701a15c5248f76ec794b99941f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["+\t\t\t\t\tcodeStream.pushOnStack(exceptionLabels[i].exceptionType);", "-\t\t\t\t\tcodeStream.incrStackSize(1);", "-\t\t\t\tthis.placeAllAnyExceptionHandlers();", "-\t\t\t\tif (naturalExitExceptionHandler != null) naturalExitExceptionHandler.place();", "-\t\t\t\t", "+\t\t\t\tcodeStream.pushOnStack(scope.getJavaLangThrowable());", "+\t\t\t\tthis.placeAllAnyExceptionHandlers();", "+\t\t\t\tif (naturalExitExceptionHandler != null) naturalExitExceptionHandler.place();", "+\t\t\t\t", "-\t\t\t\tcodeStream.incrStackSize(1);", "-\t\t\t\t\t\tcodeStream.load(anyExceptionVariable);", "-\t\t\t\t\t\tcodeStream.athrow();", "+\t\t\t\t\t\tcodeStream.throwAnyException(anyExceptionVariable);", "-\t\t\t\t\t\tcodeStream.incrStackSize(1);", "+\t\t\t\t\t\tcodeStream.pushOnStack(scope.getJavaLangThrowable());", "-\t\t\t\t\t\tcodeStream.load(anyExceptionVariable);", "-\t\t\t\t\t\tcodeStream.athrow();", "+\t\t\t\t\t\tcodeStream.throwAnyException(anyExceptionVariable);"]}], "num": 23678}
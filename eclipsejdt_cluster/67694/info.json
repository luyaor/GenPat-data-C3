{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70ec63331eb95cfbfd48689b2dae248c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70c507c04a081b64a5ea217eeca99f74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "b62a0575eabeb814900afcc3426a14b0da5fd6ad", "commitAfterChange": "fa4debd5be46821e4afe7fa2082f7a976e89007c", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \t \tpublic void setTypeAnnotations(AnnotationBinding[] annotations, boolean evalNullAnnotations)", "signatureAfterChange": " \t \tpublic void setTypeAnnotations(AnnotationBinding[] annotations, boolean evalNullAnnotations)", "diff": ["-\t\tthis.environment.getUnannotatedType(this); // exposes original TVB/capture to type system for id stamping purposes.", "+\t\tif (getClass() == TypeVariableBinding.class) {", "+\t\t\t// TVB only: if the declaration already carries type annotations,", "+\t\t\t// clone the unannotated binding first to ensure TypeSystem.getUnnanotatedType() will see it at position 0:", "+\t\t\tTypeBinding unannotated = clone(null);", "+\t\t\tthis.environment.getUnannotatedType(unannotated); // register unannotated", "+\t\t\tthis.id = unannotated.id; // transfer fresh id", "+\t\t\tthis.environment.typeSystem.cacheDerivedType(this, unannotated, this); // register this", "+\t\t} else {", "+\t\t\tthis.environment.getUnannotatedType(this); // exposes original TVB/capture to type system for id stamping purposes.", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c44ac298c20ce25d0cff093019017e0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "8a7f6aa7d6ef15bfdd326f675a8cb27b25fa00be", "commitAfterChange": "37b18fe3dec30aacdbf97606c4be5a6236865064", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \t \tpublic void setTypeAnnotations(AnnotationBinding[] annotations, boolean evalNullAnnotations)", "signatureAfterChange": " \t \tpublic void setTypeAnnotations(AnnotationBinding[] annotations, boolean evalNullAnnotations)", "diff": ["-\t\t\t// TVB only: if the declaration already carries type annotations,", "-\t\t\t// clone the unannotated binding first to ensure TypeSystem.getUnnanotatedType() will see it at position 0:", "-\t\t\tTypeBinding unannotated = clone(null);", "-\t\t\tthis.environment.getUnannotatedType(unannotated); // register unannotated", "-\t\t\tthis.id = unannotated.id; // transfer fresh id", "-\t\t\tthis.environment.typeSystem.cacheDerivedType(this, unannotated, this); // register this", "+\t\t\t// TVB only: if the declaration itself carries type annotations,", "+\t\t\t// make sure TypeSystem will still have an unannotated variant at position 0, to answer getUnannotated()", "+\t\t\t// (in this case the unannotated type is never explicit in source code, that's why we need this charade).", "+\t\t\tthis.environment.typeSystem.forceRegisterAsDerived(this);"]}], "num": 67694}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a6a39ddfd4f7386e08f2082c847fffc9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "683ee9f7e7fb64eec2a541d4a0a2ecb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "4e300efc6879ebefc1e17424cda019b7c5ca9ad1", "commitAfterChange": "d836cbee8ecc949f19e7decf6adae6126ae2b267", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public void add(IResource element)", "signatureAfterChange": "\r \r public void add(IJavaProject javaProject, boolean includesPrereqProjects, Hashtable visitedProjects) throws JavaModelException", "diff": ["- */\r", "-public void add(IResource element) {\r", "-\tthis.add(element, true);\r", "-}\r", "+public void add(IJavaProject javaProject, boolean includesPrereqProjects, Hashtable visitedProjects) throws JavaModelException {\r", "+\tIProject project = javaProject.getProject();\r", "+\tif (!project.isAccessible() || visitedProjects.get(project) != null) return;\r", "+\tthis.addEnclosingProjectOrJar(project.getFullPath());\r", "+\r", "+\tIWorkspaceRoot root = project.getWorkspace().getRoot();\r", "+\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true);\r", "+\tIJavaModel model = javaProject.getJavaModel();\r", "+\t\t\t\tthis.add(entry.getPath(), true);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90abc4db0167047624bd0142a57d377b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "f2ff53b9c5467491559775afe1992655f55a63fe", "commitAfterChange": "b38f964c0abc42b760a66a064dc1b2f95aca317b", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \t\tpublic void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event)", "signatureAfterChange": "         public void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event)", "diff": ["-\t\t */", "-\t\tpublic void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event) {", "-\t\t\tString propertyName = event.getKey();", "-\t\t\tif (propertyName.startsWith(CP_VARIABLE_PREFERENCES_PREFIX)) {", "-\t\t\t\tString varName = propertyName.substring(CP_VARIABLE_PREFERENCES_PREFIX.length());", "-\t\t\t\tJavaModelManager manager = getJavaModelManager();", "-\t\t\t\tif (manager.variablesWithInitializer.contains(varName)) {", "-\t\t\t\t\t// revert preference value as we will not apply it to JavaCore classpath variable", "-\t\t\t\t\tString oldValue = (String) event.getOldValue();", "-\t\t\t\t\tif (oldValue == null) {", "-\t\t\t\t\t\t// unexpected old value => remove variable from set", "-\t\t\t\t\t\tmanager.variablesWithInitializer.remove(varName);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tmanager.getInstancePreferences().put(varName, oldValue);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tString newValue = (String)event.getNewValue();", "-\t\t\t\t\tIPath newPath;", "-\t\t\t\t\tif (newValue != null && !(newValue = newValue.trim()).equals(CP_ENTRY_IGNORE)) {", "-\t\t\t\t\t\tnewPath = new Path(newValue);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tnewPath = null;", "-\t\t\t\t\t}", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tSetVariablesOperation operation = new SetVariablesOperation(new String[] {varName}, new IPath[] {newPath}, false/*don't update preferences*/);", "-\t\t\t\t\t\toperation.runOperation(null/*no progress available*/);", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\tUtil.log(e, \"Could not set classpath variable \" + varName + \" to \" + newPath); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (propertyName.startsWith(CP_CONTAINER_PREFERENCES_PREFIX)) {", "-\t\t\t\trecreatePersistedContainer(propertyName, (String)event.getNewValue(), false);", "-\t\t\t}", "-\t\t}", "+         */", "+        public void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event) {", "+        \tString propertyName = event.getKey();", "+        \tif (propertyName.startsWith(CP_VARIABLE_PREFERENCES_PREFIX)) {", "+        \t\tString varName = propertyName.substring(CP_VARIABLE_PREFERENCES_PREFIX.length());", "+        \t\tJavaModelManager manager = getJavaModelManager();", "+        \t\tif (manager.variablesWithInitializer.contains(varName)) {", "+        \t\t\t// revert preference value as we will not apply it to JavaCore classpath variable", "+        \t\t\tString oldValue = (String) event.getOldValue();", "+        \t\t\tif (oldValue == null) {", "+        \t\t\t\t// unexpected old value => remove variable from set", "+        \t\t\t\tmanager.variablesWithInitializer.remove(varName);", "+        \t\t\t} else {", "+        \t\t\t\tmanager.getInstancePreferences().put(varName, oldValue);", "+        \t\t\t}", "+        \t\t} else {", "+        \t\t\tString newValue = (String)event.getNewValue();", "+        \t\t\tIPath newPath;", "+        \t\t\tif (newValue != null && !(newValue = newValue.trim()).equals(CP_ENTRY_IGNORE)) {", "+        \t\t\t\tnewPath = new Path(newValue);", "+        \t\t\t} else {", "+        \t\t\t\tnewPath = null;", "+        \t\t\t}", "+        \t\t\ttry {", "+        \t\t\t\tSetVariablesOperation operation = new SetVariablesOperation(new String[] {varName}, new IPath[] {newPath}, false/*don't update preferences*/);", "+        \t\t\t\toperation.runOperation(null/*no progress available*/);", "+        \t\t\t} catch (JavaModelException e) {", "+        \t\t\t\tUtil.log(e, \"Could not set classpath variable \" + varName + \" to \" + newPath); //$NON-NLS-1$ //$NON-NLS-2$", "+        \t\t\t}", "+        \t\t}", "+        \t}", "+        \telse if (propertyName.startsWith(CP_CONTAINER_PREFERENCES_PREFIX)) {", "+        \t\trecreatePersistedContainer(propertyName, (String)event.getNewValue(), false);", "+        \t} else {", "+        \t\tint length = JavaCore.PLUGIN_ID.length() + 1;", "+        \t\tString key = event.getKey();", "+        \t\tStringTokenizer tokenizer = new StringTokenizer(key.substring(length));", "+        \t\tString token = tokenizer.nextToken();", "+        \t\tif (key.equals(JavaCore.CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER) ||", "+        \t\t\ttoken.equals(\"builder\") || //$NON-NLS-1$", "+        \t\t\tkey.equals(JavaCore.CORE_INCOMPLETE_CLASSPATH) ||", "+        \t\t\tkey.equals(JavaCore.CORE_CIRCULAR_CLASSPATH) ||", "+        \t\t\tkey.equals(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL) ||", "+        \t\t\ttoken.equals(\"classpath\")) //$NON-NLS-1$", "+        \t\t{", "+        \t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+        \t\t\tIJavaModel model = manager.getJavaModel();", "+        \t\t\tIJavaProject[] projects;", "+        \t\t\ttry {", "+        \t\t\t\tprojects = model.getJavaProjects();", "+        \t\t\t\tfor (int i = 0, pl = projects.length; i < pl; i++) {", "+        \t\t\t\t\tJavaProject javaProject = (JavaProject) projects[i];", "+\t    \t\t\t\t\tmanager.deltaState.addClasspathValidation(javaProject);", "+\t    \t\t\t\t\ttry {", "+\t    \t\t\t\t\t\t// need to touch the project to force validation by DeltaProcessor", "+\t                            javaProject.getProject().touch(null);", "+                            } catch (CoreException e) {", "+\t                            // skip", "+                            }", "+        \t\t\t\t}", "+        \t\t\t} catch (JavaModelException e) {", "+        \t\t\t\t// skip", "+        \t\t\t}", "+        \t\t}", "+        \t}", "+        }"]}], "num": 15390}
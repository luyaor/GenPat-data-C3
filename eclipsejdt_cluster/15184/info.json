{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f0776840bee85a848fd4ee189f6ba33", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18e80011afcad86f432ca4b2fb103af6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void test034()", "signatureAfterChange": " \tpublic void test034()", "diff": ["-\t\t\t\"1. ERROR in B.java (at line 3)\\n\" + ", "+\t\t\t\"1. WARNING in B.java (at line 1)\\n\" + ", "+\t\t\t\"\tinterface I<E extends Comparable> { void test(E element); }\\n\" + ", "+\t\t\t\"\t                      ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in B.java (at line 3)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in B.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic class B extends A implements I<Integer> { public void test(Comparable i) {} }\\n\" + ", "+\t\t\t\"\t                                                                  ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in B.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic class B extends A { public void test(Comparable i) {} }\\n\" + ", "+\t\t\t\"\t                                            ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "-\t\t\t\"1. ERROR in B.java (at line 3)\\n\" + ", "+\t\t\t\"1. WARNING in B.java (at line 1)\\n\" + ", "+\t\t\t\"\tabstract class AA<E extends Comparable> { abstract void test(E element); }\\n\" + ", "+\t\t\t\"\t                            ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in B.java (at line 3)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in B.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic class B extends A { public void test(Comparable i) {} }\\n\" + ", "+\t\t\t\"\t                                            ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e2bf143dfc500a1a6887ec8ab06346b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_5.java", "commitBeforeChange": "0660a80b4f83507ec084149491c197acba246b67", "commitAfterChange": "593a2bfc58d2fd5243ade8b5af13c44714cac2ea", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " public void test088()", "signatureAfterChange": " public void test088()", "diff": ["-\t\t\"5. WARNING in p\\\\X.java (at line 39)\\n\" + ", "+\t\t\"5. WARNING in p\\\\X.java (at line 32)\\n\" + ", "+\t\t\"\tClass _getClasses [] = X.class.getClasses(); \\n\" + ", "+\t\t\"\t^^^^^\\n\" + ", "+\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in p\\\\X.java (at line 36)\\n\" + ", "+\t\t\"\tConstructor _getConstructors[] = c.getConstructors(); \\n\" + ", "+\t\t\"\t^^^^^^^^^^^\\n\" + ", "+\t\t\"Constructor is a raw type. References to generic type Constructor<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"7. WARNING in p\\\\X.java (at line 39)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"8. WARNING in p\\\\X.java (at line 39)\\n\" + ", "+\t\t\"\tMethod _getMethod = c.getMethod(\\\"d\\\",null);\\n\" + ", "+\t\t\"\t                    ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: The method getMethod(String, Class...) belongs to the raw type Class. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"5. WARNING in p\\\\X.java (at line 39)\\n\" + ", "+\t\t\t\"5. WARNING in p\\\\X.java (at line 32)\\n\" + ", "+\t\t\t\"\tClass _getClasses [] = X.class.getClasses(); \\n\" + ", "+\t\t\t\"\t^^^^^\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in p\\\\X.java (at line 36)\\n\" + ", "+\t\t\t\"\tConstructor _getConstructors[] = c.getConstructors(); \\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Constructor is a raw type. References to generic type Constructor<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in p\\\\X.java (at line 39)\\n\" + ", "-\t\t\t\"6. WARNING in p\\\\X.java (at line 39)\\n\" + ", "+\t\t\t\"8. WARNING in p\\\\X.java (at line 39)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52d06082e6479f5d10a01edf4cf32146", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocBugsTest.java", "commitBeforeChange": "b308074bc5b31f3a5857e47f87565296fbba4a15", "commitAfterChange": "d36a5b020e7b8fc57d912810db0ffb9dd045eb9a", "methodNumberBeforeChange": 142, "methodNumberAfterChange": 142, "signatureBeforeChange": "  public void testBug103304b()", "signatureAfterChange": "  public void testBug103304b()", "diff": ["-\t\t\t\"1. ERROR in boden\\\\TestInvalid3.java (at line 5)\\n\" +", "+\t\t\t\"1. ERROR in boden\\\\TestInvalid3.java (at line 2)\\n\"+", "+\t\t\t\"\timport boden.IAFAState.ValidationException;\\n\"+", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"The import boden.IAFAState.ValidationException is never used\\n\"+", "+\t\t\t\"----------\\n\"+", "+\t\t\t\"2. ERROR in boden\\\\TestInvalid3.java (at line 5)\\n\" +", "-\t\t\t\"1. ERROR in boden\\\\TestInvalid4.java (at line 5)\\n\" +", "+\t\t\t\"1. ERROR in boden\\\\TestInvalid4.java (at line 2)\\n\"+", "+\t\t\t\"\timport boden.IAFAState.ValidationException;\\n\"+", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"The import boden.IAFAState.ValidationException is never used\\n\"+", "+\t\t\t\"----------\\n\"+", "+\t\t\t\"2. ERROR in boden\\\\TestInvalid4.java (at line 5)\\n\" +", "-\t\t\t\"1. ERROR in boden\\\\TestInvalid3.java (at line 5)\\n\" +", "+\t\t\t\"1. ERROR in boden\\\\TestInvalid3.java (at line 2)\\n\"+", "+\t\t\t\"\timport boden.IAFAState.ValidationException;\\n\"+", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"The import boden.IAFAState.ValidationException is never used\\n\"+", "+\t\t\t\"----------\\n\"+", "+\t\t\t\"2. ERROR in boden\\\\TestInvalid3.java (at line 5)\\n\" +", "-\t\t\t\"1. ERROR in boden\\\\TestInvalid4.java (at line 5)\\n\" +", "+\t\t\t\"1. ERROR in boden\\\\TestInvalid4.java (at line 2)\\n\"+", "+\t\t\t\"\timport boden.IAFAState.ValidationException;\\n\"+", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\"The import boden.IAFAState.ValidationException is never used\\n\"+", "+\t\t\t\"----------\\n\"+", "+\t\t\t\"2. ERROR in boden\\\\TestInvalid4.java (at line 5)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "990661557e9c00557b989ca83e6dd06b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "c45031a708344453f01f911278a63ebae41b9cba", "commitAfterChange": "c49a7bd34f8c2781dba76984d24d83335183205f", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic void testBinary06()", "signatureAfterChange": " \tpublic void testBinary06()", "diff": ["-// FIXME(stephan): change to negative tests and fill in desired error messages", "-//\t\trunNegativeTestWithLibs(", "+\t\trunNegativeTestWithLibs(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"p/X1.java\",", "+\t\t\t\t\t\"package p;\\n\" +", "+\t\t\t\t\t\"import java.util.ArrayList;\\n\" +", "+\t\t\t\t\t\"import org.eclipse.jdt.annotation.*;\\n\" +", "+\t\t\t\t\t\"public abstract class X1<T extends @NonNull Object> extends ArrayList<T> {\\n\" +", "+\t\t\t\t\t\"    public <U, V extends @Nullable Object> void foo(U u, V v) {}\\n\" +", "+\t\t\t\t\t\"}\\n\",", "+\t\t\t\t\t\"p/X2.java\", ", "+\t\t\t\t\t\"package p;\\n\"+", "+\t\t\t\t\t\"import org.eclipse.jdt.annotation.*;\\n\" +", "+\t\t\t\t\t\"public class X2<@NonNull W extends @Nullable Object> {}\\n\" // incompatible constraints", "+\t\t\t\t},", "+\t\t\t\tcustomOptions,", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in p\\\\X2.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tpublic class X2<@NonNull W extends @Nullable Object> {}\\n\" + ", "+\t\t\t\t\"\t                                   ^^^^^^^^^\\n\" + ", "+\t\t\t\t\"This nullness annotation conflicts with a \\'@NonNull\\' annotation which is effective on the same type parameter \\n\" + ", "+\t\t\t\t\"----------\\n\");", "+\t\t// fix the bug:\t\t", "-\t\t\t\t\t\"}\\n\" +", "-\t\t\t\t\t\"class X2<@NonNull W extends @Nullable Object> {}\\n\" // incompatible constraints", "+\t\t\t\t\t\"}\\n\",", "+\t\t\t\t\t\"p/X2.java\", ", "+\t\t\t\t\t\"package p;\\n\"+", "+\t\t\t\t\t\"import org.eclipse.jdt.annotation.*;\\n\" +", "+\t\t\t\t\t\"public class X2<@Nullable W extends Object> {}\\n\"", "+\t\t\t\t\t\"import p.X2;\\n\" +", "-\t\t\t\t\t\"\tX1<@Nullable String> maybeStrings;\\n\" + // incompatible: T is constrained to @NonNull", "+\t\t\t\t\t\"\tX1<@Nullable String> maybeStrings;\\n\" + // incompatible: T has a bound constrained to @NonNull", "+\t\t\t\t\t\"   X2<@NonNull String> strings;\\n\" +       // incompatible: W is constrained to @Nullable", "-\t\t\t\t\"1. ERROR in Y1.java (at line 6)\\n\" + ", "+\t\t\t\t\"1. ERROR in Y1.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tX1<@Nullable String> maybeStrings;\\n\" + ", "+\t\t\t\t\"\t   ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Null constraint mismatch: The type \\'@Nullable String\\' is not a valid substitute for the type parameter \\'T\\' which is constrained as \\'@NonNull\\'\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in Y1.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tX2<@NonNull String> strings;\\n\" + ", "+\t\t\t\t\"\t   ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Null constraint mismatch: The type \\'@NonNull String\\' is not a valid substitute for the type parameter \\'W\\' which is constrained as \\'@Nullable\\'\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in Y1.java (at line 8)\\n\" + ", "+\t\t\t\t\"Null constraint mismatch: The type '@NonNull Object' is not a valid substitute for the type parameter 'V' which is constrained as '@Nullable'\\n\" + ", "+\t\t\t\t\"----------\\n\"", "+\t\t\t\t);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ff7f8cc1bcbe7c6b07a457148df32d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "dfb3637702f1e682e6ee6d2d1c5b6ed54a2efc28", "commitAfterChange": "40fae5391d4f13359de5727f38342f6b018e40a2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void test001()", "signatureAfterChange": "  \tpublic void test001()", "diff": ["-\t\t\t\"3. ERROR in ALL.java (at line 8)\\n\" + ", "+\t\t\t\"3. ERROR in ALL.java (at line 7)\\n\" + ", "+\t\t\t\"\tclass L<T> implements I { public void foo(T t) {} }\\n\" + ", "+\t\t\t\"\t                                      ^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(T) of type L<T> has the same erasure as foo(U) of type I but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in ALL.java (at line 8)\\n\" + ", "-\t\t\t\"4. WARNING in ALL.java (at line 10)\\n\" + ", "+\t\t\t\"5. ERROR in ALL.java (at line 10)\\n\" + ", "+\t\t\t\"\tclass W<T> extends X { public void foo(T t) { super.foo(t); } }\\n\" + ", "+\t\t\t\"\t                                   ^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(T) of type W<T> has the same erasure as foo(U) of type X but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in ALL.java (at line 10)\\n\" + ", "+\t\t\t */", "+\t\t);", "+\t\t// and just to show that name clash errors are NOT generated when another error is detected", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"ALL.java\",", "+\t\t\t\t\"class A {}\\n\" +", "+\t\t\t\t\"class B {}\\n\" +", "+\t\t\t\t\"class X<U> { public void foo(U u) {} }\\n\" +", "+", "+\t\t\t\t\"class W<T> extends X { public void foo(T t) { super.foo(t); } }\\n\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in ALL.java (at line 4)\\r\\n\" + ", "+\t\t\t\"\tclass W<T> extends X { public void foo(T t) { super.foo(t); } }\\r\\n\" + ", "+\t\t\t\"\t                                   ^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(T) of type W<T> has the same erasure as foo(U) of type X but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in ALL.java (at line 4)\\r\\n\" + ", "+\t\t\t\"\tclass W<T> extends X { public void foo(T t) { super.foo(t); } }\\r\\n\" + ", "+\t\t\t\"\t                                              ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The method foo(Object) belongs to the raw type X. References to generic type X<U> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t\t/*", "+\t\t\t ALL.java:4: warning: [unchecked] unchecked call to foo(U) as a member of the raw type X", "+\t\t\t ALL.java:4: name clash: foo(T) in W<T> and foo(U) in X have the same erasure, yet neither overrides the other"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff261126de41af700eb0c8fd91104ceb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "93e5ff3a6545305db70cc209a35909ba11267a03", "commitAfterChange": "68db0a50107f072688f40bcdb70cc1c2cadc3119", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tpublic void testBug416176a()", "signatureAfterChange": " \tpublic void testBug416176a()", "diff": ["-\t\t\t\t\"\t@NonNull T bar2(@Nullable T t) { // contradiction: cannot make T @Nullable\\n\" +", "+\t\t\t\t\"\t@NonNull T bar2(@Nullable T t) { // argument: contradiction (1)\\n\" +", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\t@Nullable T bar3(T t) { // return type: contradiction (2)\\n\" +", "+\t\t\t\t\"\t\t@Nullable T l = t; // local: contradiction (3)\\n\" +", "+\t\t\t\t\"\t\treturn l;\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "+\t\t\t\t\"\tclass Inner {\\n\" +", "+\t\t\t\t\"\t\t@Nullable T f; // field: contradiction (4)\\n\" +", "-\t\t\t\"\t@NonNull T bar2(@Nullable T t) { // contradiction: cannot make T @Nullable\\n\" + ", "+\t\t\t\"\t@NonNull T bar2(@Nullable T t) { // argument: contradiction (1)\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\"\t@Nullable T bar3(T t) { // return type: contradiction (2)\\n\" + ", "+\t\t\t\"\t^^^^^^^^^\\n\" + ", "+\t\t\t\"Contradictory null specification; only one of @NonNull and @Nullable can be specified at any location\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"\t@Nullable T l = t; // local: contradiction (3)\\n\" + ", "+\t\t\t\"\t^^^^^^^^^\\n\" + ", "+\t\t\t\"Contradictory null specification; only one of @NonNull and @Nullable can be specified at any location\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 19)\\n\" + ", "+\t\t\t\"\t@Nullable T f; // field: contradiction (4)\\n\" + ", "+\t\t\t\"\t^^^^^^^^^\\n\" + ", "+\t\t\t\"Contradictory null specification; only one of @NonNull and @Nullable can be specified at any location\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 22)\\n\" + "]}], "num": 15184}
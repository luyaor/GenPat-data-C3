{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e53e716cc0b54e63f02d785d350ec934", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0147e55198433bb9c17d0acc70d02fad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 86, "signatureBeforeChange": " \tprotected TypeBinding[] minimalErasedCandidates(TypeBinding[] types, Map allInvocations)", "signatureAfterChange": " \tprotected TypeBinding[] minimalErasedCandidates(TypeBinding[] types, Map allInvocations)", "diff": ["-\t\tif (firstErasure != firstType) {", "+\t\tif (TypeBinding.notEquals(firstErasure, firstType)) {", "-\t\t\t\t\t\tif (superTypeErasure != superType) {", "+\t\t\t\t\t\tif (TypeBinding.notEquals(superTypeErasure, superType)) {", "-\t\t\t\t\t\tif (superTypeErasure != superType) {", "+\t\t\t\t\t\tif (TypeBinding.notEquals(superTypeErasure, superType)) {", "-\t\t\t\t\tif (superTypeErasure != superType) {", "+\t\t\t\t\tif (TypeBinding.notEquals(superTypeErasure, superType)) {", "-\t\t\t\t\t\tif (match != invocationData) {", "+\t\t\t\t\t\tif (TypeBinding.notEquals(match, (TypeBinding) invocationData)) {", "-\t\t\t\t\tif (match != invocationData) {", "+\t\t\t\t\tif (TypeBinding.notEquals(match, (TypeBinding) invocationData)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c86fbbc2cba34f85c00063e7d55cdf13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 142, "methodNumberAfterChange": 142, "signatureBeforeChange": " \tprivate void findExceptionFromTryStatement( \t\t\tchar[] typeName, \t\t\tReferenceBinding exceptionType, \t\t\tReferenceBinding receiverType, \t\t\tSourceTypeBinding invocationType, \t\t\tBlockScope scope, \t\t\tObjectVector typesFound, \t\t\tboolean searchSuperClasses)", "signatureAfterChange": " \tprivate void findExceptionFromTryStatement( \t\t\tchar[] typeName, \t\t\tReferenceBinding exceptionType, \t\t\tReferenceBinding receiverType, \t\t\tSourceTypeBinding invocationType, \t\t\tBlockScope scope, \t\t\tObjectVector typesFound, \t\t\tboolean searchSuperClasses)", "diff": ["-\t\t\tif (exceptionType != javaLangThrowable) {", "+\t\t\tif (TypeBinding.notEquals(exceptionType, javaLangThrowable)) {", "-\t\t\t\twhile(superClass != null && superClass != javaLangThrowable) {", "+\t\t\t\twhile(superClass != null && TypeBinding.notEquals(superClass, javaLangThrowable)) {", "-\t\t\tif (exceptionType == otherType)", "+\t\t\tif (TypeBinding.equalsEquals(exceptionType, otherType))", "-\t\t\t\t\t\t\t\tif (localType == exceptionType) {", "+\t\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(localType, exceptionType)) {", "-\t\t\t\t\t\t\t\tif (memberTypes[j] == exceptionType) {", "+\t\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(memberTypes[j], exceptionType)) {", "-\t\t\t\t\t\t\t\tif (types[j] == exceptionType) {", "+\t\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(types[j], exceptionType)) {"]}], "num": 22467}
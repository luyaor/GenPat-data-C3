{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2fcc19c75d1b4dc10380c14e2b3ad206", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7fdaf8bed2d2add399498cb2827c688", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "45ad701cf6768aacbaa3124acb1689acb0170902", "commitAfterChange": "d67aa80551d9b46a8c12152b77baac70d5a67e7a", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError) \t\tthrows JavaModelException", "diff": ["+\t\t\t\t\t\t// if container is exported, then its nested entries must in turn be exported  (21749)", "+\t\t\t\t\t\tif (rawEntry.isExported()){", "+\t\t\t\t\t\t\tcontainerRawEntry = new ClasspathEntry(", "+\t\t\t\t\t\t\t\tcontainerRawEntry.getContentKind(),", "+\t\t\t\t\t\t\t\tcontainerRawEntry.getEntryKind(), ", "+\t\t\t\t\t\t\t\tcontainerRawEntry.getPath(),", "+\t\t\t\t\t\t\t\tcontainerRawEntry.getSourceAttachmentPath(),", "+\t\t\t\t\t\t\t\tcontainerRawEntry.getSourceAttachmentRootPath(),", "+\t\t\t\t\t\t\t\ttrue); // duplicate container entry for tagging it as exported", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f50fee373b2b138e5861b6fcdb4338b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "8c78c398343997806d34124e20aab2989a424e89", "commitAfterChange": "c5f04dedcf71d7916ac9796a0679367263a828a6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tif (receiverType.isTypeVariable()) {", "+\t\t\treceiverType = new ProblemReferenceBinding(receiverType.sourceName(), (ReferenceBinding)receiverType, ProblemReasons.IllegalSuperTypeVariable);", "+\t\t\tscope.problemReporter().invalidType(this, receiverType);", "+\t\t\treturn null;", "+\t\t}"]}], "num": 32511}
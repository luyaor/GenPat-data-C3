{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "554a53e348f867057556c95a53056fdf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2b2e4a70640aa655fbca720ef94b635", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java", "commitBeforeChange": "db77467719df6aeaa20c37834dfc19f40472f458", "commitAfterChange": "1a085f6923332d813470a8d5ddda1ced463837b2", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic boolean overrides(ExecutableElement overridden, TypeElement type)", "signatureAfterChange": " \tpublic boolean overrides(ExecutableElement overridden, TypeElement type)", "diff": ["-\t\tthrow new UnsupportedOperationException(\"NYI: overrides(...)\"); //$NON-NLS-1$", "+\t\tMethodBinding overriddenBinding = (MethodBinding)((ExecutableElementImpl) overridden)._binding;", "+\t\tReferenceBinding overriderContext = (ReferenceBinding)((TypeElementImpl)type)._binding;", "+\t\tif ((MethodBinding)_binding == overriddenBinding)", "+\t\t\treturn false;", "+\t\tif (overriddenBinding.isPrivate()) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tchar[] selector = ((MethodBinding)_binding).selector;", "+\t\tif (!CharOperation.equals(selector, overriddenBinding.selector))", "+\t\t\treturn false;", "+\t\t", "+\t\t// Construct a binding to the equivalent of this (the overrider) as it would be inherited by 'type'.", "+\t\t// Can only do this if 'type' is descended from the overrider.", "+\t\t// Second clause of the AND is required to match a peculiar javac behavior.", "+\t\tif (null == overriderContext.findSuperTypeWithSameErasure(((MethodBinding)_binding).declaringClass) &&", "+\t\t\t\tnull == ((MethodBinding)_binding).declaringClass.findSuperTypeWithSameErasure(overriderContext)) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tMethodBinding overriderBinding = new MethodBinding((MethodBinding)_binding, overriderContext);", "+\t\tif (overriderBinding.isPrivate()) {", "+\t\t\t// a private method can never override another method.  The other method would either be", "+\t\t\t// private itself, in which case it would not be visible; or this would be a restriction ", "+\t\t\t// of access, which is a compile-time error.", "+\t\t\treturn false;", "+\t\t}", "+\t\t", "+\t\tTypeBinding match = overriderBinding.declaringClass.findSuperTypeWithSameErasure(overriddenBinding.declaringClass);", "+\t\tif (!(match instanceof ReferenceBinding)) return false;", "+", "+\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding[] superMethods = ((ReferenceBinding)match).getMethods(selector);", "+\t\tfor (int i = 0, length = superMethods.length; i < length; i++) {", "+\t\t\tif (superMethods[i].original() == overriddenBinding) {", "+\t\t\t\tLookupEnvironment lookupEnvironment = _env.getLookupEnvironment();", "+\t\t\t\tif (lookupEnvironment == null) return false;", "+\t\t\t\tMethodVerifier methodVerifier = lookupEnvironment.methodVerifier();", "+\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding superMethod = superMethods[i];", "+\t\t\t\treturn !superMethod.isPrivate()", "+\t\t\t\t\t&& !(superMethod.isDefault() && (superMethod.declaringClass.getPackage()) != overriderBinding.declaringClass.getPackage())", "+\t\t\t\t\t&& methodVerifier.doesMethodOverride(overriderBinding, superMethod);", "+\t\t\t}", "+\t\t}", "+\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efa47b1b6c543d055ce18b4ab5c6ff81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "abe804713571cdfdd296f9f85293e127191ccc0a", "commitAfterChange": "6e909e2d43e962644adc7ba6bf38655e030104c8", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic boolean overrides(IMethodBinding method)", "signatureAfterChange": " \tpublic boolean overrides(IMethodBinding overridenMethod)", "diff": ["-\tpublic boolean overrides(IMethodBinding method) {", "-\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding otherCompilerBinding = ((MethodBinding) method).binding;", "-\t\tif (this.binding == otherCompilerBinding) ", "+\tpublic boolean overrides(IMethodBinding overridenMethod) {", "+\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding overridenCompilerBinding = ((MethodBinding) overridenMethod).binding;", "+\t\tif (this.binding == overridenCompilerBinding) ", "-\t\tif (!CharOperation.equals(this.binding.selector, otherCompilerBinding.selector))", "+\t\tif (!CharOperation.equals(this.binding.selector, overridenCompilerBinding.selector))", "-\t\tif (!this.binding.declaringClass.isCompatibleWith(otherCompilerBinding.declaringClass))", "-\t\t\treturn false;", "-\t\tLookupEnvironment lookupEnvironment = this.resolver.lookupEnvironment();", "-\t\tif (lookupEnvironment == null) return false;", "-\t\tMethodVerifier methodVerifier = lookupEnvironment.methodVerifier();", "-\t\treturn methodVerifier.doesMethodOverride(this.binding, otherCompilerBinding);", "+\t\tReferenceBinding match = this.binding.declaringClass.findSuperTypeWithSameErasure(overridenCompilerBinding.declaringClass);", "+\t\tif (match == null) return false;", "+\t\t", "+\t\torg.eclipse.jdt.internal.compiler.lookup.MethodBinding[] superMethods = match.methods();", "+\t\tfor (int i = 0, length = superMethods.length; i < length; i++) {", "+\t\t\tif (superMethods[i].original() == overridenCompilerBinding) {", "+\t\t\t\tLookupEnvironment lookupEnvironment = this.resolver.lookupEnvironment();", "+\t\t\t\tif (lookupEnvironment == null) return false;", "+\t\t\t\tMethodVerifier methodVerifier = lookupEnvironment.methodVerifier();", "+\t\t\t\treturn methodVerifier.doesMethodOverride(this.binding, superMethods[i]);", "+\t\t\t}", "+\t\t}", "+\t\treturn false;"]}], "num": 57566}
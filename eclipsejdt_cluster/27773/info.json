{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4acdefe203921db9a9c75c303dff2e61", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09befe1d9c0e0d7dd9325ec78d30a325", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "e8c9a8ad63c042540bdf2089eae8eda8857cd19d", "commitAfterChange": "44ff943ce2a18d1de59c739946fda0722d1ad727", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["+\t\t\tCompilerOptions compilerOptions = upperScope.compilerOptions();", "-\t\t\t\t\t\tif (upperScope.compilerOptions().complianceLevel < ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\tif (compilerOptions.complianceLevel < ClassFileConstants.JDK1_5) {", "-\t\t\t\t\t} else if (upperScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_7 && expressionType.id == TypeIds.T_JavaLangString) {", "+\t\t\t\t\t} else if (compilerOptions.complianceLevel >= ClassFileConstants.JDK1_7 && expressionType.id == TypeIds.T_JavaLangString) {", "-\t\t\t// for enum switch, check if all constants are accounted for (if no default)", "-\t\t\tif (isEnumSwitch && this.defaultCase == null", "-\t\t\t\t\t&& upperScope.compilerOptions().getSeverity(CompilerOptions.IncompleteEnumSwitch) != ProblemSeverities.Ignore) {", "-\t\t\t\t// JLS recommends a default case for every enum switch", "-\t\t\t\tif (upperScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_5) { // report only if enum is legal in the first place", "-\t\t\t\t\tupperScope.problemReporter().missingEnumDefaultCase(this, expressionType);", "+\t\t\t// check default case for all kinds of switch:", "+\t\t\tif (this.defaultCase == null) {", "+\t\t\t\tif (compilerOptions.getSeverity(CompilerOptions.MissingDefaultCase) == ProblemSeverities.Ignore) {", "+\t\t\t\t\tif (isEnumSwitch) {", "+\t\t\t\t\t\tupperScope.methodScope().hasMissingSwitchDefault = true;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tupperScope.problemReporter().missingDefaultCase(this, isEnumSwitch, expressionType);", "-", "-\t\t\t\tint constantCount = this.constants == null ? 0 : this.constants.length; // could be null if no case statement", "-\t\t\t\tif (constantCount == this.caseCount", "-\t\t\t\t\t\t&& this.caseCount != ((ReferenceBinding)expressionType).enumConstantCount()) {", "-\t\t\t\t\tFieldBinding[] enumFields = ((ReferenceBinding)expressionType.erasure()).fields();", "-\t\t\t\t\tfor (int i = 0, max = enumFields.length; i <max; i++) {", "-\t\t\t\t\t\tFieldBinding enumConstant = enumFields[i];", "-\t\t\t\t\t\tif ((enumConstant.modifiers & ClassFileConstants.AccEnum) == 0) continue;", "-\t\t\t\t\t\tfindConstant : {", "-\t\t\t\t\t\t\tfor (int j = 0; j < this.caseCount; j++) {", "-\t\t\t\t\t\t\t\tif ((enumConstant.id + 1) == this.constants[j]) // zero should not be returned see bug 141810", "-\t\t\t\t\t\t\t\t\tbreak findConstant;", "+\t\t\t}", "+\t\t\t// for enum switch, check if all constants are accounted for (perhaps depending on existence of a default case)", "+\t\t\tif (isEnumSwitch && compilerOptions.complianceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\t\tif (this.defaultCase == null || compilerOptions.reportMissingEnumCaseDespiteDefault) {", "+\t\t\t\t\tint constantCount = this.constants == null ? 0 : this.constants.length; // could be null if no case statement", "+\t\t\t\t\tif (constantCount == this.caseCount", "+\t\t\t\t\t\t\t&& this.caseCount != ((ReferenceBinding)expressionType).enumConstantCount()) {", "+\t\t\t\t\t\tFieldBinding[] enumFields = ((ReferenceBinding)expressionType.erasure()).fields();", "+\t\t\t\t\t\tfor (int i = 0, max = enumFields.length; i <max; i++) {", "+\t\t\t\t\t\t\tFieldBinding enumConstant = enumFields[i];", "+\t\t\t\t\t\t\tif ((enumConstant.modifiers & ClassFileConstants.AccEnum) == 0) continue;", "+\t\t\t\t\t\t\tfindConstant : {", "+\t\t\t\t\t\t\t\tfor (int j = 0; j < this.caseCount; j++) {", "+\t\t\t\t\t\t\t\t\tif ((enumConstant.id + 1) == this.constants[j]) // zero should not be returned see bug 141810", "+\t\t\t\t\t\t\t\t\t\tbreak findConstant;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t// enum constant did not get referenced from switch", "+\t\t\t\t\t\t\t\tboolean suppress = (this.defaultCase != null && (this.defaultCase.bits & DocumentedCasesOmitted) != 0);", "+\t\t\t\t\t\t\t\tif (!suppress) {", "+\t\t\t\t\t\t\t\t\tupperScope.problemReporter().missingEnumConstantCase(this, enumConstant);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// enum constant did not get referenced from switch", "-\t\t\t\t\t\t\tupperScope.problemReporter().missingEnumConstantCase(this, enumConstant);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20c7c891ab3165e0ed20874ff84d4ebd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "c49a7bd34f8c2781dba76984d24d83335183205f", "commitAfterChange": "3001a2e9b40b82bc07cde07151a79e328e95bc31", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tprivate int generateMethodParameters(final MethodBinding binding)", "signatureAfterChange": " \tprivate int generateMethodParameters(final MethodBinding binding)", "diff": ["-\t\tif (isConstructor && binding.declaringClass.isEnum()) { // insert String name,int ordinal", "-\t\t\twriteArgumentName(ConstantPool.EnumName, ClassFileConstants.AccSynthetic, 0);", "-\t\t\twriteArgumentName(ConstantPool.EnumOrdinal, ClassFileConstants.AccSynthetic, 1);", "-\t\t\tlength = 2;", "+\t\tReferenceBinding declaringClass = binding.declaringClass;", "+", "+\t\tif (declaringClass.isEnum()) {", "+\t\t\tif (isConstructor) { // insert String name,int ordinal", "+\t\t\t\tlength = writeArgumentName(ConstantPool.EnumName, ClassFileConstants.AccSynthetic, length);", "+\t\t\t\tlength = writeArgumentName(ConstantPool.EnumOrdinal, ClassFileConstants.AccSynthetic, length);", "+\t\t\t} else if (CharOperation.equals(ConstantPool.ValueOf, binding.selector)) { // insert String name", "+\t\t\t\tlength = writeArgumentName(ConstantPool.Name, ClassFileConstants.AccMandated, length);", "+\t\t\t\ttargetParameters =  Binding.NO_PARAMETERS; // Override \"unknown\" synthetics below", "+\t\t\t}", "-\t\tboolean needSynthetics = isConstructor && binding.declaringClass.isNestedType();", "+\t\tboolean needSynthetics = isConstructor && declaringClass.isNestedType();", "-\t\t\tReferenceBinding[] syntheticArgumentTypes = binding.declaringClass.syntheticEnclosingInstanceTypes();", "+\t\t\tint modifier = (! declaringClass.isPrivate()) || declaringClass.isAnonymousType() ? ClassFileConstants.AccMandated : ClassFileConstants.AccSynthetic;", "+\t\t\tReferenceBinding[] syntheticArgumentTypes = declaringClass.syntheticEnclosingInstanceTypes();", "-\t\t\t\t\tlength = writeArgumentName(name, ClassFileConstants.AccMandated | ClassFileConstants.AccFinal, length);", "+\t\t\t\t\tlength = writeArgumentName(name, modifier | ClassFileConstants.AccFinal, length);", "-\t\t\tSyntheticArgumentBinding[] syntheticOuterArguments = binding.declaringClass.syntheticOuterLocalVariables();", "+\t\t\tSyntheticArgumentBinding[] syntheticOuterArguments = declaringClass.syntheticOuterLocalVariables();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bc471a860e154318da41534fc107b30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "857538330357565215d6d2e64f21fab912b5ef20", "commitAfterChange": "f9fabd872f39dca4f00ed1200322e9463d41565c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void generateSyntheticFieldInitializationsIfNecessary( \t\tMethodScope scope, \t\tCodeStream codeStream, \t\tReferenceBinding declaringClass)", "signatureAfterChange": "  \tpublic void generateSyntheticFieldInitializationsIfNecessary( \t\tMethodScope scope, \t\tCodeStream codeStream, \t\tReferenceBinding declaringClass, \t\tboolean addNullCheckForEnclosingInstance)", "diff": ["-\t\tReferenceBinding declaringClass) {", "+\t\tReferenceBinding declaringClass,", "+\t\tboolean addNullCheckForEnclosingInstance) {", "-\t\tSyntheticArgumentBinding[] syntheticArgs =", "-\t\t\tnestedType.syntheticEnclosingInstances();", "-\t\tfor (int i = 0, max = syntheticArgs == null ? 0 : syntheticArgs.length;", "-\t\t\ti < max;", "-\t\t\ti++) {", "-\t\t\tif (syntheticArgs[i].matchingField != null) {", "+\t\tSourceTypeBinding enclosingType = nestedType.enclosingType;", "+", "+\t\tSyntheticArgumentBinding[] syntheticArgs = nestedType.syntheticEnclosingInstances();", "+\t\tfor (int i = 0, max = syntheticArgs == null ? 0 : syntheticArgs.length; i < max; i++) {", "+\t\t\tSyntheticArgumentBinding syntheticArg;", "+\t\t\tif ((syntheticArg = syntheticArgs[i]).matchingField != null) {", "-\t\t\t\tcodeStream.load(syntheticArgs[i]);", "-\t\t\t\tcodeStream.putfield(syntheticArgs[i].matchingField);", "+\t\t\t\tcodeStream.load(syntheticArg);", "+\t\t\t\tif (enclosingType == syntheticArg.type && addNullCheckForEnclosingInstance) {", "+\t\t\t\t\tcodeStream.dup();", "+\t\t\t\t\tcodeStream.invokeObjectGetClass(); // causes null check", "+\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t}", "+\t\t\t\tcodeStream.putfield(syntheticArg.matchingField);", "-\t\tfor (int i = 0, max = syntheticArgs == null ? 0 : syntheticArgs.length;", "-\t\t\ti < max;", "-\t\t\ti++) {", "-\t\t\tif (syntheticArgs[i].matchingField != null) {", "+\t\tfor (int i = 0, max = syntheticArgs == null ? 0 : syntheticArgs.length; i < max; i++) {", "+\t\t\tSyntheticArgumentBinding syntheticArg;", "+\t\t\tif ((syntheticArg = syntheticArgs[i]).matchingField != null) {", "-\t\t\t\tcodeStream.load(syntheticArgs[i]);", "-\t\t\t\tcodeStream.putfield(syntheticArgs[i].matchingField);", "+\t\t\t\tcodeStream.load(syntheticArg);", "+\t\t\t\tcodeStream.putfield(syntheticArg.matchingField);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b595b1080e7c112e9bbfc9e851594ecd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "0bb8dba3efca9a5500b67c37770710de86a06c2e", "commitAfterChange": "6726a5eb1723cea7dfdb4d1905ca215391f75d8e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\tthis.resources[i].binding.useFlag = LocalVariableBinding.USED; // Is implicitly used anyways.", "-\t\t\tTypeBinding type = this.resources[i].binding.type;", "+\t\t\tLocalVariableBinding resourceBinding = this.resources[i].binding;", "+\t\t\tresourceBinding.useFlag = LocalVariableBinding.USED; // Is implicitly used anyways.", "+\t\t\tif (resourceBinding.closeTracker != null) {", "+\t\t\t\t// this was false alarm, we don't need to track the resource", "+\t\t\t\tthis.tryBlock.scope.removeTrackingVar(resourceBinding.closeTracker);", "+\t\t\t\tresourceBinding.closeTracker = null;", "+\t\t\t}", "+\t\t\tTypeBinding type = resourceBinding.type;", "-\t\t\tthis.resources[i].binding.useFlag = LocalVariableBinding.USED; // Is implicitly used anyways.", "-\t\t\tTypeBinding type = this.resources[i].binding.type;", "+\t\t\tLocalVariableBinding resourceBinding = this.resources[i].binding;", "+\t\t\tresourceBinding.useFlag = LocalVariableBinding.USED; // Is implicitly used anyways.", "+\t\t\tif (resourceBinding.closeTracker != null) {", "+\t\t\t\t// this was false alarm, we don't need to track the resource", "+\t\t\t\tthis.tryBlock.scope.removeTrackingVar(resourceBinding.closeTracker);", "+\t\t\t\tresourceBinding.closeTracker = null;", "+\t\t\t} ", "+\t\t\tTypeBinding type = resourceBinding.type;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9d562236cdd0817fc8bff2243ec4072", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "054ef716f5c2a57e4e4c8e790ba134b6404d4f2a", "commitAfterChange": "1bf30b93f1c2f17c02d0cecfa43e877f00d01800", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\tthis.resources[i].binding.useFlag = LocalVariableBinding.USED; // Is implicitly used anyways.", "-\t\t\tTypeBinding type = this.resources[i].binding.type;", "+\t\t\tLocalVariableBinding resourceBinding = this.resources[i].binding;", "+\t\t\tresourceBinding.useFlag = LocalVariableBinding.USED; // Is implicitly used anyways.", "+\t\t\tif (resourceBinding.closeTracker != null) {", "+\t\t\t\t// this was false alarm, we don't need to track the resource", "+\t\t\t\tthis.tryBlock.scope.removeTrackingVar(resourceBinding.closeTracker);", "+\t\t\t\tresourceBinding.closeTracker = null;", "+\t\t\t}", "+\t\t\tTypeBinding type = resourceBinding.type;", "-\t\t\tthis.resources[i].binding.useFlag = LocalVariableBinding.USED; // Is implicitly used anyways.", "-\t\t\tTypeBinding type = this.resources[i].binding.type;", "+\t\t\tLocalVariableBinding resourceBinding = this.resources[i].binding;", "+\t\t\tresourceBinding.useFlag = LocalVariableBinding.USED; // Is implicitly used anyways.", "+\t\t\tif (resourceBinding.closeTracker != null) {", "+\t\t\t\t// this was false alarm, we don't need to track the resource", "+\t\t\t\tthis.tryBlock.scope.removeTrackingVar(resourceBinding.closeTracker);", "+\t\t\t\tresourceBinding.closeTracker = null;", "+\t\t\t} ", "+\t\t\tTypeBinding type = resourceBinding.type;"]}], "num": 27773}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a7c3e0a41a0896c438829860de9ff2b7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0826d90f1c3d41f5983185f5fa8e4304", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "ded6df093dcb91c3c8323eba13d60dc2eccf8d25", "commitAfterChange": "834bb3df875d46fb3a9058f7e3e103441d8b1dab", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  public StringBuffer printExpression(int indent, StringBuffer output)", "signatureAfterChange": "  public StringBuffer printExpression(int indent, StringBuffer output)", "diff": ["+\tint parenthesesCount = (this.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\tString suffix = \"\"; //$NON-NLS-1$", "+\tfor(int i = 0; i < parenthesesCount; i++) {", "+\t\toutput.append('(');", "+\t\tsuffix += ')';", "+\t}", "-\treturn this.expression.printExpression(0, output);", "+\treturn this.expression.printExpression(0, output).append(suffix);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19971b40d498795274e294626ade5203", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "ded6df093dcb91c3c8323eba13d60dc2eccf8d25", "commitAfterChange": "834bb3df875d46fb3a9058f7e3e103441d8b1dab", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic StringBuffer printExpression(int tab, StringBuffer output)", "signatureAfterChange": " \t \tpublic StringBuffer printExpression(int tab, StringBuffer output)", "diff": ["-", "+\t\tint parenthesesCount = (this.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\tString suffix = \"\"; //$NON-NLS-1$", "+\t\tfor(int i = 0; i < parenthesesCount; i++) {", "+\t\t\toutput.append('(');", "+\t\t\tsuffix += ')';", "+\t\t}", "-\t\treturn output;", "+\t\treturn output.append(suffix);"]}], "num": 73083}
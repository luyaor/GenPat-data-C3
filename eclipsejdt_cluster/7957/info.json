{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ace686b8d025bad09499852b835d0b8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d734f33e1a86dc69693d69845a168bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/AptConfigurationBlock.java", "commitBeforeChange": "01183640e0035cac2c0d8aba45f61a8be154617f", "commitAfterChange": "75a1e994888330022017b20e200adbe75bfe0c3e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "\t \t \tprotected final void updateModel(DialogField field)", "signatureAfterChange": "\t \t \tprotected final void updateModel(DialogField field)", "diff": ["-", "+\t\tString newVal = null;", "+\t\tKey key = null;", "+\t\t", "-\t\t\tsetValue(KEY_APTENABLED, fAptEnabledField.isSelected());", "+\t\t\tkey = KEY_APTENABLED;", "+\t\t\tnewVal = String.valueOf(fAptEnabledField.isSelected());", "-\t\t\tsetValue(KEY_GENSRCDIR, fGenSrcDirField.getText());", "+\t\t\tkey = KEY_GENSRCDIR;", "+\t\t\tnewVal = fGenSrcDirField.getText();", "-\t\t\tsetValue(KEY_PROCESSOROPTIONS, fProcessorOptionsField.getText());", "+\t\t\tkey = KEY_PROCESSOROPTIONS;", "+\t\t\tnewVal = fProcessorOptionsField.getText();", "+\t\t}", "+\t\tif (key != null) {", "+\t\t\tString oldVal = setValue(key, newVal);", "+\t\t\tvalidateSettings(key, oldVal, newVal);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb9b9d917162bef3ba62c2fb33852f6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "bc1474120a401c9549d094bfff4e9b156a87cffc", "commitAfterChange": "bb997aaa017d5f68e413f281273e7ae92272a5ad", "methodNumberBeforeChange": 152, "methodNumberAfterChange": 152, "signatureBeforeChange": " public void importProblem(ImportReference importRef, Binding expectedImport)", "signatureAfterChange": " public void importProblem(ImportReference importRef, Binding expectedImport)", "diff": ["+\t\tString[] readableArguments = null;", "+\t\tString[] shortArguments = null;", "-\t\t\t\tthis.handle(", "-\t\t\t\t\tIProblem.NotVisibleField,", "-\t\t\t\t\tnew String[] {CharOperation.toString(importRef.tokens), new String(field.declaringClass.readableName())},", "-\t\t\t\t\tnew String[] {CharOperation.toString(importRef.tokens), new String(field.declaringClass.shortReadableName())},", "-\t\t\t\t\tnodeSourceStart(field, importRef),", "-\t\t\t\t\tnodeSourceEnd(field, importRef));", "-\t\t\t\treturn;", "+\t\t\t\tid = IProblem.NotVisibleField;", "+\t\t\t\treadableArguments = new String[] {CharOperation.toString(importRef.tokens), new String(field.declaringClass.readableName())};", "+\t\t\t\tshortArguments = new String[] {CharOperation.toString(importRef.tokens), new String(field.declaringClass.shortReadableName())};", "+\t\t\t\tbreak;", "+\t\t\t\treadableArguments = new String[] {new String(field.readableName())};", "+\t\t\t\tshortArguments = new String[] {new String(field.readableName())};", "+\t\t\t\treadableArguments = new String[] {new String(field.declaringClass.leafComponentType().readableName())};", "+\t\t\t\tshortArguments = new String[] {new String(field.declaringClass.leafComponentType().shortReadableName())};", "-\t\t\tid, ", "-\t\t\tnew String[] {new String(field.declaringClass.leafComponentType().readableName())},", "-\t\t\tnew String[] {new String(field.declaringClass.leafComponentType().shortReadableName())},", "+\t\t\tid,", "+\t\t\treadableArguments,", "+\t\t\tshortArguments,"]}], "num": 7957}
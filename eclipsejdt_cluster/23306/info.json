{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95cb8f5f181cc013205e738580a5502b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14df50f41182b1a64c23732a19ba53ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "1c5093c74409d802b34134e981077f69adbcd0bf", "commitAfterChange": "761a8f63f56b2330a56c02cc774e205d5e9010ea", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "         public void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event)", "signatureAfterChange": "         public void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event)", "diff": ["-        \tif (propertyName.startsWith(CP_VARIABLE_PREFERENCES_PREFIX)) {", "-        \t\tString varName = propertyName.substring(CP_VARIABLE_PREFERENCES_PREFIX.length());", "-        \t\tJavaModelManager manager = getJavaModelManager();", "-        \t\tif (manager.variablesWithInitializer.contains(varName)) {", "-        \t\t\t// revert preference value as we will not apply it to JavaCore classpath variable", "-        \t\t\tString oldValue = (String) event.getOldValue();", "-        \t\t\tif (oldValue == null) {", "-        \t\t\t\t// unexpected old value => remove variable from set", "-        \t\t\t\tmanager.variablesWithInitializer.remove(varName);", "-        \t\t\t} else {", "-        \t\t\t\tmanager.getInstancePreferences().put(varName, oldValue);", "-        \t\t\t}", "-        \t\t} else {", "-        \t\t\tString newValue = (String)event.getNewValue();", "-        \t\t\tIPath newPath;", "-        \t\t\tif (newValue != null && !(newValue = newValue.trim()).equals(CP_ENTRY_IGNORE)) {", "-        \t\t\t\tnewPath = new Path(newValue);", "-        \t\t\t} else {", "-        \t\t\t\tnewPath = null;", "-        \t\t\t}", "-        \t\t\ttry {", "-        \t\t\t\tSetVariablesOperation operation = new SetVariablesOperation(new String[] {varName}, new IPath[] {newPath}, false/*don't update preferences*/);", "-        \t\t\t\toperation.runOperation(null/*no progress available*/);", "-        \t\t\t} catch (JavaModelException e) {", "-        \t\t\t\tUtil.log(e, \"Could not set classpath variable \" + varName + \" to \" + newPath); //$NON-NLS-1$ //$NON-NLS-2$", "-        \t\t\t}", "-        \t\t}", "-        \t} else if (propertyName.startsWith(CP_CONTAINER_PREFERENCES_PREFIX)) {", "-        \t\trecreatePersistedContainer(propertyName, (String)event.getNewValue(), false);", "-        \t} else if (propertyName.equals(JavaCore.CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER) ||", "-\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER) ||", "-\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_DUPLICATE_RESOURCE) ||", "-\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_RECREATE_MODIFIED_CLASS_FILES_IN_OUTPUT_FOLDER) ||", "-\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH) ||", "-\t\t\t\tpropertyName.equals(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS) ||", "-\t\t\t\tpropertyName.equals(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS) ||", "-\t\t\t\tpropertyName.equals(JavaCore.CORE_INCOMPLETE_CLASSPATH) ||", "-\t\t\t\tpropertyName.equals(JavaCore.CORE_CIRCULAR_CLASSPATH) ||", "-\t\t\t\tpropertyName.equals(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL)) {", "-\t\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\t\t\tIJavaModel model = manager.getJavaModel();", "-\t\t\t\tIJavaProject[] projects;", "-\t\t\t\ttry {", "-\t\t\t\t\tprojects = model.getJavaProjects();", "-\t\t\t\t\tfor (int i = 0, pl = projects.length; i < pl; i++) {", "-\t\t\t\t\t\tJavaProject javaProject = (JavaProject) projects[i];", "-\t\t\t\t\t\tmanager.deltaState.addClasspathValidation(javaProject);", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t// need to touch the project to force validation by DeltaProcessor", "-\t\t\t\t            javaProject.getProject().touch(null);", "-\t\t\t\t        } catch (CoreException e) {", "-\t\t\t\t            // skip", "-\t\t\t\t        }", "+        \tif (propertyName.startsWith(JavaCore.PLUGIN_ID)) {", "+\t        \tif (propertyName.startsWith(CP_VARIABLE_PREFERENCES_PREFIX)) {", "+\t        \t\tString varName = propertyName.substring(CP_VARIABLE_PREFERENCES_PREFIX.length());", "+\t        \t\tJavaModelManager manager = getJavaModelManager();", "+\t        \t\tif (manager.variablesWithInitializer.contains(varName)) {", "+\t        \t\t\t// revert preference value as we will not apply it to JavaCore classpath variable", "+\t        \t\t\tString oldValue = (String) event.getOldValue();", "+\t        \t\t\tif (oldValue == null) {", "+\t        \t\t\t\t// unexpected old value => remove variable from set", "+\t        \t\t\t\tmanager.variablesWithInitializer.remove(varName);", "+\t        \t\t\t} else {", "+\t        \t\t\t\tmanager.getInstancePreferences().put(varName, oldValue);", "+\t        \t\t\t}", "+\t        \t\t} else {", "+\t        \t\t\tString newValue = (String)event.getNewValue();", "+\t        \t\t\tIPath newPath;", "+\t        \t\t\tif (newValue != null && !(newValue = newValue.trim()).equals(CP_ENTRY_IGNORE)) {", "+\t        \t\t\t\tnewPath = new Path(newValue);", "+\t        \t\t\t} else {", "+\t        \t\t\t\tnewPath = null;", "+\t        \t\t\t}", "+\t        \t\t\ttry {", "+\t        \t\t\t\tSetVariablesOperation operation = new SetVariablesOperation(new String[] {varName}, new IPath[] {newPath}, false/*don't update preferences*/);", "+\t        \t\t\t\toperation.runOperation(null/*no progress available*/);", "+\t        \t\t\t} catch (JavaModelException e) {", "+\t        \t\t\t\tUtil.log(e, \"Could not set classpath variable \" + varName + \" to \" + newPath); //$NON-NLS-1$ //$NON-NLS-2$", "+\t        \t\t\t}", "+\t        \t\t}", "+\t        \t} else if (propertyName.startsWith(CP_CONTAINER_PREFERENCES_PREFIX)) {", "+\t        \t\trecreatePersistedContainer(propertyName, (String)event.getNewValue(), false);", "+\t        \t} else if (propertyName.equals(JavaCore.CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER) ||", "+\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER) ||", "+\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_DUPLICATE_RESOURCE) ||", "+\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_RECREATE_MODIFIED_CLASS_FILES_IN_OUTPUT_FOLDER) ||", "+\t\t\t\t\tpropertyName.equals(JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH) ||", "+\t\t\t\t\tpropertyName.equals(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS) ||", "+\t\t\t\t\tpropertyName.equals(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS) ||", "+\t\t\t\t\tpropertyName.equals(JavaCore.CORE_INCOMPLETE_CLASSPATH) ||", "+\t\t\t\t\tpropertyName.equals(JavaCore.CORE_CIRCULAR_CLASSPATH) ||", "+\t\t\t\t\tpropertyName.equals(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL)) {", "+\t\t\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\t\t\t\tIJavaModel model = manager.getJavaModel();", "+\t\t\t\t\tIJavaProject[] projects;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tprojects = model.getJavaProjects();", "+\t\t\t\t\t\tfor (int i = 0, pl = projects.length; i < pl; i++) {", "+\t\t\t\t\t\t\tJavaProject javaProject = (JavaProject) projects[i];", "+\t\t\t\t\t\t\tmanager.deltaState.addClasspathValidation(javaProject);", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t// need to touch the project to force validation by DeltaProcessor", "+\t\t\t\t\t            javaProject.getProject().touch(null);", "+\t\t\t\t\t        } catch (CoreException e) {", "+\t\t\t\t\t            // skip", "+\t\t\t\t\t        }", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t// skip", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t// skip", "+\t        \t} else if (propertyName.startsWith(CP_USERLIBRARY_PREFERENCES_PREFIX)) {", "+\t\t\t\t\tString libName = propertyName.substring(CP_USERLIBRARY_PREFERENCES_PREFIX.length());", "+\t\t\t\t\tUserLibraryManager manager = JavaModelManager.getUserLibraryManager();", "+\t        \t\tmanager.updateUserLibrary(libName, (String)event.getNewValue());", "+\t        \t}", "+\t        }", "+        \t// Reset all project caches (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=233568 )", "+        \ttry {", "+        \t\tIJavaProject[] projects = JavaModelManager.getJavaModelManager().getJavaModel().getJavaProjects();", "+\t        \tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\t\t\t((JavaProject) projects[i]).resetCaches();", "-        \t} else if (propertyName.startsWith(CP_USERLIBRARY_PREFERENCES_PREFIX)) {", "-\t\t\t\tString libName = propertyName.substring(CP_USERLIBRARY_PREFERENCES_PREFIX.length());", "-\t\t\t\tUserLibraryManager manager = JavaModelManager.getUserLibraryManager();", "-        \t\tmanager.updateUserLibrary(libName, (String)event.getNewValue());", "+        \t} catch (JavaModelException e) {", "+        \t\t// cannot retrieve Java projects"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90abc4db0167047624bd0142a57d377b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "f2ff53b9c5467491559775afe1992655f55a63fe", "commitAfterChange": "b38f964c0abc42b760a66a064dc1b2f95aca317b", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \t\tpublic void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event)", "signatureAfterChange": "         public void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event)", "diff": ["-\t\t */", "-\t\tpublic void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event) {", "-\t\t\tString propertyName = event.getKey();", "-\t\t\tif (propertyName.startsWith(CP_VARIABLE_PREFERENCES_PREFIX)) {", "-\t\t\t\tString varName = propertyName.substring(CP_VARIABLE_PREFERENCES_PREFIX.length());", "-\t\t\t\tJavaModelManager manager = getJavaModelManager();", "-\t\t\t\tif (manager.variablesWithInitializer.contains(varName)) {", "-\t\t\t\t\t// revert preference value as we will not apply it to JavaCore classpath variable", "-\t\t\t\t\tString oldValue = (String) event.getOldValue();", "-\t\t\t\t\tif (oldValue == null) {", "-\t\t\t\t\t\t// unexpected old value => remove variable from set", "-\t\t\t\t\t\tmanager.variablesWithInitializer.remove(varName);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tmanager.getInstancePreferences().put(varName, oldValue);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tString newValue = (String)event.getNewValue();", "-\t\t\t\t\tIPath newPath;", "-\t\t\t\t\tif (newValue != null && !(newValue = newValue.trim()).equals(CP_ENTRY_IGNORE)) {", "-\t\t\t\t\t\tnewPath = new Path(newValue);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tnewPath = null;", "-\t\t\t\t\t}", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tSetVariablesOperation operation = new SetVariablesOperation(new String[] {varName}, new IPath[] {newPath}, false/*don't update preferences*/);", "-\t\t\t\t\t\toperation.runOperation(null/*no progress available*/);", "-\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\tUtil.log(e, \"Could not set classpath variable \" + varName + \" to \" + newPath); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (propertyName.startsWith(CP_CONTAINER_PREFERENCES_PREFIX)) {", "-\t\t\t\trecreatePersistedContainer(propertyName, (String)event.getNewValue(), false);", "-\t\t\t}", "-\t\t}", "+         */", "+        public void preferenceChange(IEclipsePreferences.PreferenceChangeEvent event) {", "+        \tString propertyName = event.getKey();", "+        \tif (propertyName.startsWith(CP_VARIABLE_PREFERENCES_PREFIX)) {", "+        \t\tString varName = propertyName.substring(CP_VARIABLE_PREFERENCES_PREFIX.length());", "+        \t\tJavaModelManager manager = getJavaModelManager();", "+        \t\tif (manager.variablesWithInitializer.contains(varName)) {", "+        \t\t\t// revert preference value as we will not apply it to JavaCore classpath variable", "+        \t\t\tString oldValue = (String) event.getOldValue();", "+        \t\t\tif (oldValue == null) {", "+        \t\t\t\t// unexpected old value => remove variable from set", "+        \t\t\t\tmanager.variablesWithInitializer.remove(varName);", "+        \t\t\t} else {", "+        \t\t\t\tmanager.getInstancePreferences().put(varName, oldValue);", "+        \t\t\t}", "+        \t\t} else {", "+        \t\t\tString newValue = (String)event.getNewValue();", "+        \t\t\tIPath newPath;", "+        \t\t\tif (newValue != null && !(newValue = newValue.trim()).equals(CP_ENTRY_IGNORE)) {", "+        \t\t\t\tnewPath = new Path(newValue);", "+        \t\t\t} else {", "+        \t\t\t\tnewPath = null;", "+        \t\t\t}", "+        \t\t\ttry {", "+        \t\t\t\tSetVariablesOperation operation = new SetVariablesOperation(new String[] {varName}, new IPath[] {newPath}, false/*don't update preferences*/);", "+        \t\t\t\toperation.runOperation(null/*no progress available*/);", "+        \t\t\t} catch (JavaModelException e) {", "+        \t\t\t\tUtil.log(e, \"Could not set classpath variable \" + varName + \" to \" + newPath); //$NON-NLS-1$ //$NON-NLS-2$", "+        \t\t\t}", "+        \t\t}", "+        \t}", "+        \telse if (propertyName.startsWith(CP_CONTAINER_PREFERENCES_PREFIX)) {", "+        \t\trecreatePersistedContainer(propertyName, (String)event.getNewValue(), false);", "+        \t} else {", "+        \t\tint length = JavaCore.PLUGIN_ID.length() + 1;", "+        \t\tString key = event.getKey();", "+        \t\tStringTokenizer tokenizer = new StringTokenizer(key.substring(length));", "+        \t\tString token = tokenizer.nextToken();", "+        \t\tif (key.equals(JavaCore.CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER) ||", "+        \t\t\ttoken.equals(\"builder\") || //$NON-NLS-1$", "+        \t\t\tkey.equals(JavaCore.CORE_INCOMPLETE_CLASSPATH) ||", "+        \t\t\tkey.equals(JavaCore.CORE_CIRCULAR_CLASSPATH) ||", "+        \t\t\tkey.equals(JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL) ||", "+        \t\t\ttoken.equals(\"classpath\")) //$NON-NLS-1$", "+        \t\t{", "+        \t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+        \t\t\tIJavaModel model = manager.getJavaModel();", "+        \t\t\tIJavaProject[] projects;", "+        \t\t\ttry {", "+        \t\t\t\tprojects = model.getJavaProjects();", "+        \t\t\t\tfor (int i = 0, pl = projects.length; i < pl; i++) {", "+        \t\t\t\t\tJavaProject javaProject = (JavaProject) projects[i];", "+\t    \t\t\t\t\tmanager.deltaState.addClasspathValidation(javaProject);", "+\t    \t\t\t\t\ttry {", "+\t    \t\t\t\t\t\t// need to touch the project to force validation by DeltaProcessor", "+\t                            javaProject.getProject().touch(null);", "+                            } catch (CoreException e) {", "+\t                            // skip", "+                            }", "+        \t\t\t\t}", "+        \t\t\t} catch (JavaModelException e) {", "+        \t\t\t\t// skip", "+        \t\t\t}", "+        \t\t}", "+        \t}", "+        }"]}], "num": 23306}
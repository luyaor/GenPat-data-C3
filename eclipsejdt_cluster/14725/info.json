{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f5c9f472eb79f896dce0ad34b16269c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b692cf33c81cbabbc0e2af299481dd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "6dc0991802c8a76a225272c60d27e3132dfbe9b2", "commitAfterChange": "9a8dbf2c325d5ae6a7dd8f3876b878a799f4a5c2", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void acceptMethodTypeParameter(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor, char[] typeParameterName, boolean isDeclaration, int start, int end)", "signatureAfterChange": " public void acceptMethodTypeParameter(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector,int selectorStart, int selectorEnd, char[] typeParameterName, boolean isDeclaration, int start, int end)", "diff": ["-public void acceptMethodTypeParameter(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor, char[] typeParameterName, boolean isDeclaration, int start, int end) {", "-\t// TODO missing implementation", "+public void acceptMethodTypeParameter(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector,int selectorStart, int selectorEnd, char[] typeParameterName, boolean isDeclaration, int start, int end) {", "+\tIType type = resolveTypeByLocation(declaringTypePackageName, declaringTypeName,", "+\t\t\tNameLookup.ACCEPT_CLASSES | NameLookup.ACCEPT_INTERFACES,", "+\t\t\tselectorStart, selectorEnd);", "-\tif(SelectionEngine.DEBUG){", "-\t\tSystem.out.print(\"SELECTION - acceptTypeParameter(\"); //$NON-NLS-1$", "-\t\tSystem.out.print(declaringTypePackageName);", "-\t\tSystem.out.print('.');", "-\t\tSystem.out.print(declaringTypeName);", "-\t\tSystem.out.print('.');", "-\t\tSystem.out.print('<');", "-\t\tSystem.out.print(typeParameterName);", "-\t\tSystem.out.print('>');", "-\t\tSystem.out.print(selector);", "-\t\tSystem.out.println(\"(...))\"); //$NON-NLS-1$", "+\tif(type != null) {", "+\t\tIMethod method = null;", "+\t\t", "+\t\tString name = new String(selector);", "+\t\tIMethod[] methods = null;", "+\t\t", "+\t\ttry {", "+\t\t\tmethods = type.getMethods();", "+\t\t\tdone : for (int i = 0; i < methods.length; i++) {", "+\t\t\t\tISourceRange range = methods[i].getNameRange();", "+\t\t\t\tif(range.getOffset() >= selectorStart", "+\t\t\t\t\t\t&& range.getOffset() + range.getLength() <= selectorEnd", "+\t\t\t\t\t\t&& methods[i].getElementName().equals(name)) {", "+\t\t\t\t\tmethod = methods[i];", "+\t\t\t\t\tbreak done;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (JavaModelException e) {", "+\t\t\t//nothing to do", "+\t\t}", "+", "+\t\tif(method == null) {", "+//\t\t\taddElement(type);", "+\t\t} else {", "+//\t\t\t TODO missing implementation", "+//\t\t\tif(???) {", "+//\t\t\t\taddElement(method);", "+//\t\t\t} else {", "+\t\t\t\tif(SelectionEngine.DEBUG){", "+\t\t\t\t\tSystem.out.print(\"SELECTION - acceptTypeParameter(\"); //$NON-NLS-1$", "+\t\t\t\t\tSystem.out.print(declaringTypePackageName);", "+\t\t\t\t\tSystem.out.print('.');", "+\t\t\t\t\tSystem.out.print(declaringTypeName);", "+\t\t\t\t\tSystem.out.print('.');", "+\t\t\t\t\tSystem.out.print('<');", "+\t\t\t\t\tSystem.out.print(typeParameterName);", "+\t\t\t\t\tSystem.out.print('>');", "+\t\t\t\t\tSystem.out.print(selector);", "+\t\t\t\t\tSystem.out.println(\"(...))\"); //$NON-NLS-1$", "+\t\t\t\t}", "+//\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "760e5bbfd89bfb028cf685650fffd766", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "9f8931bf92b7966fbd8c101a448f79f7965fbbf9", "commitAfterChange": "3bf5bab95449ec256a601c2551910573083178b4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] name)", "signatureAfterChange": " public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] name, boolean isDeclaration, int start, int end)", "diff": ["-public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] name) {", "-\tIType type= resolveType(declaringTypePackageName, declaringTypeName,", "-\t\tNameLookup.ACCEPT_CLASSES | NameLookup.ACCEPT_INTERFACES);", "-\tif (type != null) {", "-\t\tIField field= type.getField(new String(name));", "-\t\tif (field.exists()) {", "-\t\t\taddElement(field);", "-\t\t\tif(SelectionEngine.DEBUG){", "-\t\t\t\tSystem.out.print(\"SELECTION - accept field(\"); //$NON-NLS-1$", "-\t\t\t\tSystem.out.print(field.toString());", "-\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "+public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] name, boolean isDeclaration, int start, int end) {", "+\tif(isDeclaration) {", "+\t\tIType type= resolveTypeByLocation(declaringTypePackageName, declaringTypeName,", "+\t\t\t\tNameLookup.ACCEPT_CLASSES | NameLookup.ACCEPT_INTERFACES,", "+\t\t\t\tstart, end);", "+\t\tif(type != null) {", "+\t\t\ttry {", "+\t\t\t\tIField[] fields = type.getFields();", "+\t\t\t\tfor (int i = 0; i < fields.length; i++) {", "+\t\t\t\t\tIField field = fields[i];", "+\t\t\t\t\tISourceRange range = field.getNameRange();", "+\t\t\t\t\tif(range.getOffset() <= start", "+\t\t\t\t\t\t\t&& range.getOffset() + range.getLength() >= end", "+\t\t\t\t\t\t\t&& field.getElementName().equals(new String(name))) {", "+\t\t\t\t\t\taddElement(fields[i]);", "+\t\t\t\t\t\tif(SelectionEngine.DEBUG){", "+\t\t\t\t\t\t\tSystem.out.print(\"SELECTION - accept field(\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\tSystem.out.print(field.toString());", "+\t\t\t\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn; // only one method is possible", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\treturn; ", "+\t\t\t}", "+\t\t}", "+\t} else {", "+\t\tIType type= resolveType(declaringTypePackageName, declaringTypeName,", "+\t\t\t\tNameLookup.ACCEPT_CLASSES | NameLookup.ACCEPT_INTERFACES);", "+\t\tif (type != null) {", "+\t\t\tIField field= type.getField(new String(name));", "+\t\t\tif (field.exists()) {", "+\t\t\t\taddElement(field);", "+\t\t\t\tif(SelectionEngine.DEBUG){", "+\t\t\t\t\tSystem.out.print(\"SELECTION - accept field(\"); //$NON-NLS-1$", "+\t\t\t\t\tSystem.out.print(field.toString());", "+\t\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "+\t\t\t\t}"]}], "num": 14725}
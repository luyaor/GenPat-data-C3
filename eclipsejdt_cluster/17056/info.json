{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b814ab2f7c89e0770acf47b23a85853f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4434731a300a5c2bf58692315dcf193f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/InternalSearchPattern.java", "commitBeforeChange": "9cd1ab49783c2213611dcbe2939a387e78b83c79", "commitAfterChange": "92aee8d421610703027ca2a5b652beed8fbe4ac3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tvoid acceptMatch(String documentName, String containerPath, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope)", "signatureAfterChange": " \t \tvoid acceptMatch(String relativePath, String containerPath, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope)", "diff": ["-\tvoid acceptMatch(String documentName, String containerPath, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope) {", "-\t\tString documentPath = Index.convertPath(documentName);", "+\tvoid acceptMatch(String relativePath, String containerPath, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope) {", "-\t\t\tAccessRuleSet access = javaSearchScope.getAccessRuleSet(documentPath, containerPath);", "+\t\t\tAccessRuleSet access = javaSearchScope.getAccessRuleSet(relativePath, containerPath);", "+\t\t\t\tString documentPath = documentPath(containerPath, relativePath);", "-\t\t} else if (scope.encloses(documentPath)) {", "-\t\t\tif (!requestor.acceptIndexMatch(documentPath, pattern, participant, null)) ", "-\t\t\t\tthrow new OperationCanceledException();", "+\t\t} else {", "+\t\t\tString documentPath = documentPath(containerPath, relativePath);", "+\t\t\tif (scope.encloses(documentPath)) ", "+\t\t\t\tif (!requestor.acceptIndexMatch(documentPath, pattern, participant, null)) ", "+\t\t\t\t\tthrow new OperationCanceledException();", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "712b173c1e54e93eca5384a78db77624", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/InternalSearchPattern.java", "commitBeforeChange": "d7573375da034a8df526c16250d3442a649a1b32", "commitAfterChange": "6133d9195a7868877f17c34f487b8a2dc67fa75b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tvoid acceptMatch(String relativePath, String containerPath, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope)", "signatureAfterChange": " \t \tvoid acceptMatch(String relativePath, String containerPath, char separator, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope)", "diff": ["-\tvoid acceptMatch(String relativePath, String containerPath, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope) {", "+\tvoid acceptMatch(String relativePath, String containerPath, char separator, SearchPattern pattern, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope) {", "-\t\t\t\tString documentPath = documentPath(containerPath, relativePath);", "-\t\t\t\tif (!requestor.acceptIndexMatch(documentPath, pattern, participant, access)) ", "+\t\t\t\tStringBuffer documentPath = new StringBuffer(containerPath.length() + 1 + relativePath.length());", "+\t\t\t\tdocumentPath.append(containerPath);", "+\t\t\t\tdocumentPath.append(separator);", "+\t\t\t\tdocumentPath.append(relativePath);", "+\t\t\t\tif (!requestor.acceptIndexMatch(documentPath.toString(), pattern, participant, access)) ", "-\t\t\tString documentPath = documentPath(containerPath, relativePath);", "+\t\t\tStringBuffer buffer = new StringBuffer(containerPath.length() + 1 + relativePath.length());", "+\t\t\tbuffer.append(containerPath);", "+\t\t\tbuffer.append(separator);", "+\t\t\tbuffer.append(relativePath);", "+\t\t\tString documentPath = buffer.toString();"]}], "num": 17056}
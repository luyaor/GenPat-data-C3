{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df4eae28e16749960f446fe32457f634", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1896d59ae3c3bf5a376a17abd05ae29a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "2bf89c240ddd3251e4b1d84f5113b5b23a25a1c7", "commitAfterChange": "d9ef1de09cb72d13b8a3503336aa24f1ef9b23e2", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic IPackageFragmentRoot getPackageFragmentRoot(IPath path)", "signatureAfterChange": " \tpublic IPackageFragmentRoot getPackageFragmentRoot(IPath path)", "diff": ["+\t\t\t\t// a path ending with .jar/.zip is still ambiguous and could still resolve to a source/lib folder ", "+\t\t\t\t// thus will try to guess based on existing resource", "+\t\t\t\t\tIResource resource = getProject().getWorkspace().getRoot().findMember(path); ", "+\t\t\t\t\tif (resource != null && resource.getType() == IResource.FOLDER){", "+\t\t\t\t\t\treturn getPackageFragmentRoot(resource);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cabae2b7086be7b2cdf6cccd3e16821", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/MessagerImpl.java", "commitBeforeChange": "03e205d7db02078dce9accf78d78c9d9a6ce6117", "commitAfterChange": "7ff51a474972e200f8003fdc2186f43ef4e82e14", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private void addMarker(final IResource resource, final int start, final int end,                             final int severity, String msg, final int line)", "signatureAfterChange": "     private void addMarker(final IResource resource, final int start, final int end,                             final int severity, String msg, final int line)", "diff": ["+     */", "+    \tfinal IResource currentResource = _env.getFile();", "+    \t// not going to post any markers to resource outside of the one we are currently ", "+    \t// processing during reconcile phase.", "+    \tif( resource != null && !currentResource.equals(resource) && _env.getPhase() == Phase.RECONCILE )", "+    \t\treturn;", "-        map.put( IMarker.CHAR_END, end );", "+        if(end >= 0)", "+        \tmap.put( IMarker.CHAR_END, end );", "-\t\tmap.put( IMarker.LOCATION, \"line: \" + line);", "-        map = Collections.unmodifiableMap(map);", "+\t\tmap.put( IMarker.LOCATION, \"line: \" + line);        "]}], "num": 14754}
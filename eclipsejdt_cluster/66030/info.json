{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b4ce8fb678f8e568756d4be96d082559", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25d592e4b664c3d231a3b61d8bcf0120", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "48f756ae0727772676a244af8217d19fe8e81145", "commitAfterChange": "9fff7ba189be037b4cf4f61956b7e287259b8f6d", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprotected boolean parseReference(boolean plain) throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseReference(boolean plain) throws InvalidInputException", "diff": ["-\t\t\t\t\t\tif (this.source[this.index] == '\\r' || this.source[this.index] == '\\n') {", "-\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "-\t\t\t\t\t\t\t\tparseTag();", "-\t\t\t\t\t\t\t\tpushText(previousPosition, this.index-1);", "+\t\t\t\t\t\twhile (Character.isWhitespace(this.source[this.index])) {", "+\t\t\t\t\t\t\tif (this.source[this.index] == '\\r' || this.source[this.index] == '\\n') {", "+\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "+\t\t\t\t\t\t\t\t\tparseTag();", "+\t\t\t\t\t\t\t\t\tpushText(previousPosition, this.index-1);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\tthis.index++;", "-\t\t\t\t\t\t\tif (this.source[this.index] == '\\r' || this.source[this.index] == '\\n') {", "-\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "-\t\t\t\t\t\t\t\t\tparseTag();", "-\t\t\t\t\t\t\t\t\tpushText(previousPosition, this.index-1);", "+\t\t\t\t\t\t\twhile (Character.isWhitespace(this.source[this.index])) {", "+\t\t\t\t\t\t\t\tif (this.source[this.index] == '\\r' || this.source[this.index] == '\\n') {", "+\t\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "+\t\t\t\t\t\t\t\t\t\tparseTag();", "+\t\t\t\t\t\t\t\t\t\tpushText(previousPosition, this.index-1);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\tthis.index++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7ef756255910a4295b2b1edfb0fbe39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "65ed85e50b333a16dfda007fb9cc32acceea0ad7", "commitAfterChange": "7a39ac7b112bcd9ebf4e7db1f1f1ff56c8d905a5", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  protected void parseTags(boolean hasLineComment)", "signatureAfterChange": "  protected void parseTags(boolean hasLineComment)", "diff": ["-\t\t\tif (currentTokenStart == 0) {", "+\t\t\tint i = 0;", "+\t\t\twhile (Character.isWhitespace(this.source[i])) {", "+\t\t\t\ti++;", "+\t\t\t}", "+\t\t\tif (currentTokenStart == i) {", "-\t\t} else if (currentTokenStart == (lineEnds[linePtr] + 1)) {", "-\t\t\t// the whole line is commented out", "-\t\t\treturn;", "+\t\t} else {", "+\t\t\tint i = this.lineEnds[this.linePtr] + 1; ", "+\t\t\twhile (Character.isWhitespace(this.source[i])) {", "+\t\t\t\ti++;", "+\t\t\t}", "+\t\t\tif (currentTokenStart == i) {", "+\t\t\t\t// the whole line is commented out", "+\t\t\t\treturn;", "+\t\t\t}"]}], "num": 66030}
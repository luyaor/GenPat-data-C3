{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "59cf03ee2a54d594731a633e27dac3a8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "091affd2d1ddc563e8a608bb962bebab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "e3a61b617999ee26a78986f0b7c8e0d0c7d0d38f", "commitAfterChange": "22622fb4f97d8218a8b46b7612c7415d2a54a73e", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": " private void handleErrorOrWarningToken(String token, boolean isEnabling, int severity)", "signatureAfterChange": " private void handleErrorOrWarningToken(String token, boolean isEnabling, int severity)", "diff": ["-\t\t\t} ", "+\t\t\t} else if (token.equals(\"invalidJavadoc\")) { //$NON-NLS-1$", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportInvalidJavadoc, severity, isEnabling);", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTags,", "+\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsDeprecatedRef,", "+\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsNotVisibleRef,", "+\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\tif (isEnabling) {", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_DocCommentSupport,", "+\t\t\t\t\t\t\tCompilerOptions.ENABLED);", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsVisibility,", "+\t\t\t\t\t\tCompilerOptions.PRIVATE);", "+\t\t\t\t}", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"invalidJavadocTag\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTags,", "+\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"invalidJavadocTagDep\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsDeprecatedRef,", "+\t\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"invalidJavadocTagNotVisible\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsNotVisibleRef,", "+\t\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.startsWith(\"invalidJavadocTagVisibility\")) { //$NON-NLS-1$", "+\t\t\t\tint start = token.indexOf('(');", "+\t\t\t\tint end = token.indexOf(')');", "+\t\t\t\tString visibility = null;", "+\t\t\t\tif (isEnabling && start >= 0 && end >= 0 && start < end){", "+\t\t\t\t\tvisibility = token.substring(start+1, end).trim();", "+\t\t\t\t}", "+\t\t\t\tif (visibility != null && visibility.equals(CompilerOptions.PUBLIC)", "+\t\t\t\t\t\t|| visibility.equals(CompilerOptions.PRIVATE)", "+\t\t\t\t\t\t|| visibility.equals(CompilerOptions.PROTECTED)", "+\t\t\t\t\t\t|| visibility.equals(CompilerOptions.DEFAULT)) {", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsVisibility,", "+\t\t\t\t\t\t\tvisibility);", "+\t\t\t\t\treturn;", "+\t\t\t\t} else {", "+\t\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.invalidJavadocTagVisibility\", token)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t} else if (token.equals(\"missingJavadocTags\")) { //$NON-NLS-1$", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportMissingJavadocTags, severity, isEnabling);", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTagsOverriding,", "+\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTagsMethodTypeParameters,", "+\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\tif (isEnabling) {", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_DocCommentSupport,", "+\t\t\t\t\t\t\tCompilerOptions.ENABLED);", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTagsVisibility,", "+\t\t\t\t\t\tCompilerOptions.PRIVATE);", "+\t\t\t\t}", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"missingJavadocTagsOverriding\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTagsOverriding,", "+\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"missingJavadocTagsMethod\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTagsMethodTypeParameters,", "+\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.startsWith(\"missingJavadocTagsVisibility\")) { //$NON-NLS-1$", "+\t\t\t\tint start = token.indexOf('(');", "+\t\t\t\tint end = token.indexOf(')');", "+\t\t\t\tString visibility = null;", "+\t\t\t\tif (isEnabling && start >= 0 && end >= 0 && start < end){", "+\t\t\t\t\tvisibility = token.substring(start+1, end).trim();", "+\t\t\t\t}", "+\t\t\t\tif (visibility != null && visibility.equals(CompilerOptions.PUBLIC)", "+\t\t\t\t\t\t|| visibility.equals(CompilerOptions.PRIVATE)", "+\t\t\t\t\t\t|| visibility.equals(CompilerOptions.PROTECTED)", "+\t\t\t\t\t\t|| visibility.equals(CompilerOptions.DEFAULT)) {", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTagsVisibility,", "+\t\t\t\t\t\t\tvisibility);", "+\t\t\t\t\treturn;", "+\t\t\t\t} else {", "+\t\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.missingJavadocTagsVisibility\", token)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t} else if (token.equals(\"missingJavadocComments\")) { //$NON-NLS-1$", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportMissingJavadocComments, severity, isEnabling);", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocCommentsOverriding,", "+\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\tif (isEnabling) {", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_DocCommentSupport,", "+\t\t\t\t\t\t\tCompilerOptions.ENABLED);", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocCommentsVisibility,", "+\t\t\t\t\t\tCompilerOptions.PRIVATE);", "+\t\t\t\t}", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"missingJavadocCommentsOverriding\")) { //$NON-NLS-1$", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportMissingJavadocComments, severity, isEnabling);", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocCommentsOverriding,", "+\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.startsWith(\"missingJavadocCommentsVisibility\")) { //$NON-NLS-1$", "+\t\t\t\tint start = token.indexOf('(');", "+\t\t\t\tint end = token.indexOf(')');", "+\t\t\t\tString visibility = null;", "+\t\t\t\tif (isEnabling && start >= 0 && end >= 0 && start < end){", "+\t\t\t\t\tvisibility = token.substring(start+1, end).trim();", "+\t\t\t\t}", "+\t\t\t\tif (visibility != null && visibility.equals(CompilerOptions.PUBLIC)", "+\t\t\t\t\t\t|| visibility.equals(CompilerOptions.PRIVATE)", "+\t\t\t\t\t\t|| visibility.equals(CompilerOptions.PROTECTED)", "+\t\t\t\t\t\t|| visibility.equals(CompilerOptions.DEFAULT)) {", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocCommentsVisibility,", "+\t\t\t\t\t\t\tvisibility);", "+\t\t\t\t\treturn;", "+\t\t\t\t} else {", "+\t\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.missingJavadocCommentsVisibility\", token)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\treturn;", "+\t\t\t}else if (token.equals(\"nullAnnotConflict\")) { //$NON-NLS-1$", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportNullAnnotationInferenceConflict, severity, isEnabling);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"nullAnnotRedundant\")) { //$NON-NLS-1$", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportRedundantNullAnnotation, severity, isEnabling);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"nullUncheckedConversion\")) { //$NON-NLS-1$", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportNullUncheckedConversion, severity, isEnabling);", "+\t\t\t} else if (token.equals(\"unusedThrownWhenOverriding\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionWhenOverriding,", "+\t\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"unusedThrownIncludeDocComment\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionIncludeDocCommentReference,", "+\t\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"unusedThrownExemptExceptionThrowable\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionExemptExceptionAndThrowable,", "+\t\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "-\t\t\t} else if (token.equals(\"unusedTypeArgs\")) { //$NON-NLS-1$", "+\t\t\t} else if (token.equals(\"unusedParam\")) { //$NON-NLS-1$", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportUnusedParameter, severity, isEnabling);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"unusedParamIncludeDoc\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedParameterIncludeDocCommentReference,", "+\t\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"unusedParamOverriding\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedParameterWhenOverridingConcrete,", "+\t\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"unusedParamImplementing\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedParameterWhenImplementingAbstract,", "+\t\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t}  else if (token.equals(\"unusedTypeArgs\")) { //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "847436f5cb4e02cbd9286354b07e8462", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic Map getMap()", "signatureAfterChange": "  \tpublic Map getMap()", "diff": ["+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_ALIGNMENT_FOR_ARGUMENTS_IN_ENUM_CONSTANT, getAlignment(this.alignment_for_arguments_in_enum_constant));", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_ALIGNMENT_FOR_SUPERINTERFACES_IN_ENUM_DECLARATION, getAlignment(this.alignment_for_superinterfaces_in_enum_declaration));", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ANNOTATION_TYPE_DECLARATION, this.brace_position_for_annotation_type_declaration);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ENUM_CONSTANT, this.brace_position_for_enum_constant);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_BRACE_POSITION_FOR_ENUM_DECLARATION, this.brace_position_for_enum_declaration);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_ENUM_CONSTANT_HEADER, this.indent_body_declarations_compare_to_enum_constant_header ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_ENUM_DECLARATION_HEADER, this.indent_body_declarations_compare_to_enum_declaration_header ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_ENUM_CONSTANT, this.insert_new_line_in_empty_enum_constant? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_IN_EMPTY_ENUM_DECLARATION, this.insert_new_line_in_empty_enum_declaration? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_AND_IN_WILDCARD, this.insert_space_after_and_in_wilcard? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_AT_IN_ANNOTATION, this.insert_space_after_at_in_annotation? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_AT_IN_ANNOTATION_TYPE_DECLARATION, this.insert_space_after_at_in_annotation_type_declaration ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_CLOSING_ANGLE_BRACKET_IN_TYPE_ARGUMENTS, this.insert_space_after_closing_angle_bracket_in_type_arguments ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_CLOSING_ANGLE_BRACKET_IN_TYPE_PARAMETERS, this.insert_space_after_closing_angle_bracket_in_type_parameters ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_ASSERT, this.insert_space_after_colon_in_assert? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CASE, this.insert_space_after_colon_in_case? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CONDITIONAL, this.insert_space_after_colon_in_conditional? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_ASSERT, this.insert_space_after_colon_in_assert ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CASE, this.insert_space_after_colon_in_case ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CONDITIONAL, this.insert_space_after_colon_in_conditional ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COLON_IN_FOR, this.insert_space_after_colon_in_for ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ANNOTATION, this.insert_space_after_comma_in_annotation? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ENUM_CONSTANT_ARGUMENTS, this.insert_space_after_comma_in_enum_constant_arguments ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ENUM_DECLARATIONS, this.insert_space_after_comma_in_enum_declarations ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_PARAMETERIZED_TYPE_REFERENCE, this.insert_space_after_comma_in_parameterized_type_reference? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_TYPE_ARGUMENTS, this.insert_space_after_comma_in_type_arguments ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_TYPE_PARAMETERS, this.insert_space_after_comma_in_type_parameters ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_ANGLE_BRACKET_IN_PARAMETERIZED_TYPE_REFERENCE, this.insert_space_after_opening_angle_bracket_in_parameterized_type_reference? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_ANGLE_BRACKET_IN_TYPE_ARGUMENTS, this.insert_space_after_opening_angle_bracket_in_type_arguments? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_ANGLE_BRACKET_IN_TYPE_PARAMETERS, this.insert_space_after_opening_angle_bracket_in_type_parameters? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_ANNOTATION, this.insert_space_after_opening_paren_in_annotation? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_ENUM_CONSTANT, this.insert_space_after_opening_paren_in_enum_constant? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_AFTER_QUESTION_IN_WILDCARD, this.insert_space_after_question_in_wilcard? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_AND_IN_WILDCARD, this.insert_space_before_and_in_wilcard ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_AT_IN_ANNOTATION_TYPE_DECLARATION, this.insert_space_before_at_in_annotation_type_declaration ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_ANGLE_BRACKET_IN_PARAMETERIZED_TYPE_REFERENCE, this.insert_space_before_closing_angle_bracket_in_parameterized_type_reference? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_ANGLE_BRACKET_IN_TYPE_ARGUMENTS, this.insert_space_before_closing_angle_bracket_in_type_arguments? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_ANGLE_BRACKET_IN_TYPE_PARAMETERS, this.insert_space_before_closing_angle_bracket_in_type_parameters? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_ANNOTATION, this.insert_space_before_closing_paren_in_annotation? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_ENUM_CONSTANT, this.insert_space_before_closing_paren_in_enum_constant? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_FOR, this.insert_space_before_colon_in_for ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ANNOTATION, this.insert_space_before_comma_in_annotation? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ENUM_CONSTANT_ARGUMENTS, this.insert_space_before_comma_in_enum_constant_arguments? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ENUM_DECLARATIONS, this.insert_space_before_comma_in_enum_declarations? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_TYPE_ARGUMENTS, this.insert_space_before_comma_in_type_arguments ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_TYPE_PARAMETERS, this.insert_space_before_comma_in_type_parameters? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_PARAMETERIZED_TYPE_REFERENCE, this.insert_space_before_comma_in_parameterized_type_reference? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_ANGLE_BRACKET_IN_PARAMETERIZED_TYPE_REFERENCE, this.insert_space_before_opening_angle_bracket_in_parameterized_type_reference? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_ANGLE_BRACKET_IN_TYPE_ARGUMENTS, this.insert_space_before_opening_angle_bracket_in_type_arguments? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_ANGLE_BRACKET_IN_TYPE_PARAMETERS, this.insert_space_before_opening_angle_bracket_in_type_parameters? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ANNOTATION_TYPE_DECLARATION, this.insert_space_before_opening_brace_in_annotation_type_declaration ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ENUM_CONSTANT, this.insert_space_before_opening_brace_in_enum_constant? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ENUM_DECLARATION, this.insert_space_before_opening_brace_in_enum_declaration? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_ANNOTATION, this.insert_space_before_opening_paren_in_annotation? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_ANNOTATION_TYPE_MEMBER_DECLARATION, this.insert_space_before_opening_paren_in_annotation_type_member_declaration ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_ENUM_CONSTANT, this.insert_space_before_opening_paren_in_enum_constant? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BEFORE_QUESTION_IN_WILDCARD, this.insert_space_before_question_in_wilcard? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_ANNOTATION_TYPE_MEMBER_DECLARATION, this.insert_space_between_empty_parens_in_annotation_type_member_declaration? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_ENUM_CONSTANT, this.insert_space_between_empty_parens_in_enum_constant? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e6b247e1e37b7505c030998f1a823ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "46987bf94fa2fc88d9ab6cb36a5870450e66f8d9", "commitAfterChange": "4b2ce36cb1e443f82351b7a276c4a994ddb0c499", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": " private void handleErrorOrWarningToken(String token, boolean isEnabling, int severity)", "signatureAfterChange": " private void handleErrorOrWarningToken(String token, boolean isEnabling, int severity)", "diff": ["-\t\t\t} ", "+\t\t\t} else if (token.equals(\"invalidJavadoc\")) { //$NON-NLS-1$", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportInvalidJavadoc, severity, isEnabling);", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTags,", "+\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsDeprecatedRef,", "+\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsNotVisibleRef,", "+\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\tif (isEnabling) {", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_DocCommentSupport,", "+\t\t\t\t\t\t\tCompilerOptions.ENABLED);", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsVisibility,", "+\t\t\t\t\t\tCompilerOptions.PRIVATE);", "+\t\t\t\t}", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"invalidJavadocTag\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTags,", "+\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"invalidJavadocTagDep\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsDeprecatedRef,", "+\t\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"invalidJavadocTagNotVisible\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsNotVisibleRef,", "+\t\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.startsWith(\"invalidJavadocTagVisibility\")) { //$NON-NLS-1$", "+\t\t\t\tint start = token.indexOf('(');", "+\t\t\t\tint end = token.indexOf(')');", "+\t\t\t\tString visibility = null;", "+\t\t\t\tif (isEnabling && start >= 0 && end >= 0 && start < end){", "+\t\t\t\t\tvisibility = token.substring(start+1, end).trim();", "+\t\t\t\t}", "+\t\t\t\tif (visibility != null && visibility.equals(CompilerOptions.PUBLIC)", "+\t\t\t\t\t\t|| visibility.equals(CompilerOptions.PRIVATE)", "+\t\t\t\t\t\t|| visibility.equals(CompilerOptions.PROTECTED)", "+\t\t\t\t\t\t|| visibility.equals(CompilerOptions.DEFAULT)) {", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsVisibility,", "+\t\t\t\t\t\t\tvisibility);", "+\t\t\t\t\treturn;", "+\t\t\t\t} else {", "+\t\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.invalidJavadocTagVisibility\", token)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t} else if (token.equals(\"missingJavadocTags\")) { //$NON-NLS-1$", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportMissingJavadocTags, severity, isEnabling);", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTagsOverriding,", "+\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTagsMethodTypeParameters,", "+\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\tif (isEnabling) {", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_DocCommentSupport,", "+\t\t\t\t\t\t\tCompilerOptions.ENABLED);", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTagsVisibility,", "+\t\t\t\t\t\tCompilerOptions.PRIVATE);", "+\t\t\t\t}", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"missingJavadocTagsOverriding\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTagsOverriding,", "+\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"missingJavadocTagsMethod\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTagsMethodTypeParameters,", "+\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.startsWith(\"missingJavadocTagsVisibility\")) { //$NON-NLS-1$", "+\t\t\t\tint start = token.indexOf('(');", "+\t\t\t\tint end = token.indexOf(')');", "+\t\t\t\tString visibility = null;", "+\t\t\t\tif (isEnabling && start >= 0 && end >= 0 && start < end){", "+\t\t\t\t\tvisibility = token.substring(start+1, end).trim();", "+\t\t\t\t}", "+\t\t\t\tif (visibility != null && visibility.equals(CompilerOptions.PUBLIC)", "+\t\t\t\t\t\t|| visibility.equals(CompilerOptions.PRIVATE)", "+\t\t\t\t\t\t|| visibility.equals(CompilerOptions.PROTECTED)", "+\t\t\t\t\t\t|| visibility.equals(CompilerOptions.DEFAULT)) {", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTagsVisibility,", "+\t\t\t\t\t\t\tvisibility);", "+\t\t\t\t\treturn;", "+\t\t\t\t} else {", "+\t\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.missingJavadocTagsVisibility\", token)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t} else if (token.equals(\"missingJavadocComments\")) { //$NON-NLS-1$", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportMissingJavadocComments, severity, isEnabling);", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocCommentsOverriding,", "+\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\tif (isEnabling) {", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_DocCommentSupport,", "+\t\t\t\t\t\t\tCompilerOptions.ENABLED);", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocCommentsVisibility,", "+\t\t\t\t\t\tCompilerOptions.PRIVATE);", "+\t\t\t\t}", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"missingJavadocCommentsOverriding\")) { //$NON-NLS-1$", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportMissingJavadocComments, severity, isEnabling);", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocCommentsOverriding,", "+\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.startsWith(\"missingJavadocCommentsVisibility\")) { //$NON-NLS-1$", "+\t\t\t\tint start = token.indexOf('(');", "+\t\t\t\tint end = token.indexOf(')');", "+\t\t\t\tString visibility = null;", "+\t\t\t\tif (isEnabling && start >= 0 && end >= 0 && start < end){", "+\t\t\t\t\tvisibility = token.substring(start+1, end).trim();", "+\t\t\t\t}", "+\t\t\t\tif (visibility != null && visibility.equals(CompilerOptions.PUBLIC)", "+\t\t\t\t\t\t|| visibility.equals(CompilerOptions.PRIVATE)", "+\t\t\t\t\t\t|| visibility.equals(CompilerOptions.PROTECTED)", "+\t\t\t\t\t\t|| visibility.equals(CompilerOptions.DEFAULT)) {", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportMissingJavadocCommentsVisibility,", "+\t\t\t\t\t\t\tvisibility);", "+\t\t\t\t\treturn;", "+\t\t\t\t} else {", "+\t\t\t\t\tthrow new IllegalArgumentException(this.bind(\"configure.missingJavadocCommentsVisibility\", token)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\treturn;", "+\t\t\t}else if (token.equals(\"nullAnnotConflict\")) { //$NON-NLS-1$", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportNullAnnotationInferenceConflict, severity, isEnabling);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"nullAnnotRedundant\")) { //$NON-NLS-1$", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportRedundantNullAnnotation, severity, isEnabling);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"nullUncheckedConversion\")) { //$NON-NLS-1$", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportNullUncheckedConversion, severity, isEnabling);", "+\t\t\t} else if (token.equals(\"unusedThrownWhenOverriding\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionWhenOverriding,", "+\t\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"unusedThrownIncludeDocComment\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionIncludeDocCommentReference,", "+\t\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"unusedThrownExemptExceptionThrowable\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionExemptExceptionAndThrowable,", "+\t\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "-\t\t\t} else if (token.equals(\"unusedTypeArgs\")) { //$NON-NLS-1$", "+\t\t\t} else if (token.equals(\"unusedParam\")) { //$NON-NLS-1$", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportUnusedParameter, severity, isEnabling);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"unusedParamIncludeDoc\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedParameterIncludeDocCommentReference,", "+\t\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"unusedParamOverriding\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedParameterWhenOverridingConcrete,", "+\t\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t} else if (token.equals(\"unusedParamImplementing\")) { //$NON-NLS-1$", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_ReportUnusedParameterWhenImplementingAbstract,", "+\t\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\treturn;", "+\t\t\t}  else if (token.equals(\"unusedTypeArgs\")) { //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d31cc28d0ff6346544c51b2c460d6404", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public CompilerOptions(ConfigurableOption[] settings)", "signatureAfterChange": "\r public CompilerOptions(Map settings)", "diff": ["-public CompilerOptions(ConfigurableOption[] settings){\r", "+public CompilerOptions(Map settings){\r", "-\tString componentName = Compiler.class.getName();\r", "-\tfor (int i = 0, max = settings.length; i < max; i++){\r", "-\t\tif (settings[i].getComponentName().equals(componentName)){\r", "-\t\t\tthis.setOption(settings[i]);\r", "+\tObject[] entries = settings.entrySet().toArray();\r", "+\tfor (int i = 0, max = entries.length; i < max; i++){\r", "+\t\tMap.Entry entry = (Map.Entry)entries[i];\r", "+\t\tif (!(entry.getKey() instanceof String)) continue;\r", "+\t\tif (!(entry.getValue() instanceof String)) continue;\r", "+\t\tString optionID = (String) entry.getKey();\r", "+\t\tString optionValue = (String) entry.getValue();\r", "+\t\t\r", "+\t\t// Local variable attribute\r", "+\t\tif(optionID.equals(OPTION_LocalVariableAttribute)){\r", "+\t\t\tif (optionValue.equals(GENERATE)) {\r", "+\t\t\t\tthis.produceDebugAttributes |= Vars;\r", "+\t\t\t} else if (optionValue.equals(DO_NOT_GENERATE)){\r", "+\t\t\t\tthis.produceDebugAttributes &= ~Vars;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}  \r", "+\t\t// Line number attribute\t\r", "+\t\tif(optionID.equals(OPTION_LineNumberAttribute)) {\r", "+\t\t\tif (optionValue.equals(GENERATE)) {\r", "+\t\t\t\tthis.produceDebugAttributes |= Lines;\r", "+\t\t\t} else if (optionValue.equals(DO_NOT_GENERATE)) {\r", "+\t\t\t\tthis.produceDebugAttributes &= ~Lines;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Source file attribute\t\r", "+\t\tif(optionID.equals(OPTION_SourceFileAttribute)) {\r", "+\t\t\tif (optionValue.equals(GENERATE)) {\r", "+\t\t\t\tthis.produceDebugAttributes |= Source;\r", "+\t\t\t} else if (optionValue.equals(DO_NOT_GENERATE)) {\r", "+\t\t\t\tthis.produceDebugAttributes &= ~Source;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Preserve unused local\t\r", "+\t\tif(optionID.equals(OPTION_PreserveUnusedLocal)){\r", "+\t\t\tif (optionValue.equals(PRESERVE)) {\r", "+\t\t\t\tthis.preserveAllLocalVariables = true;\r", "+\t\t\t} else if (optionValue.equals(OPTIMIZE_OUT)) {\r", "+\t\t\t\tthis.preserveAllLocalVariables = false;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report unreachable code\t\t\t\t\r", "+\t\tif(optionID.equals(OPTION_ReportUnreachableCode)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= UnreachableCode;\r", "+\t\t\t\tthis.warningThreshold &= ~UnreachableCode;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UnreachableCode;\r", "+\t\t\t\tthis.warningThreshold |= UnreachableCode;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UnreachableCode;\r", "+\t\t\t\tthis.warningThreshold &= ~UnreachableCode;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report invalid import\t\r", "+\t\tif(optionID.equals(OPTION_ReportInvalidImport)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= ImportProblem;\r", "+\t\t\t\tthis.warningThreshold &= ~ImportProblem;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~ImportProblem;\r", "+\t\t\t\tthis.warningThreshold |= ImportProblem;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~ImportProblem;\r", "+\t\t\t\tthis.warningThreshold &= ~ImportProblem;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Define the target JDK tag for .classfiles\r", "+\t\tif(optionID.equals(OPTION_TargetPlatform)){\r", "+\t\t\tif (optionValue.equals(VERSION_1_1)) {\r", "+\t\t\t\tthis.targetJDK = JDK1_1;\r", "+\t\t\t} else if (optionValue.equals(VERSION_1_2)) {\r", "+\t\t\t\tthis.targetJDK = JDK1_2;\r", "+\t\t\t} else if (optionValue.equals(VERSION_1_3)) {\r", "+\t\t\t\tthis.targetJDK = JDK1_3;\r", "+\t\t\t} else if (optionValue.equals(VERSION_1_4)) {\r", "+\t\t\t\tthis.targetJDK = JDK1_4;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report method with constructor name\r", "+\t\tif(optionID.equals(OPTION_ReportMethodWithConstructorName)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= MethodWithConstructorName;\r", "+\t\t\t\tthis.warningThreshold &= ~MethodWithConstructorName;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~MethodWithConstructorName;\r", "+\t\t\t\tthis.warningThreshold |= MethodWithConstructorName;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~MethodWithConstructorName;\r", "+\t\t\t\tthis.warningThreshold &= ~MethodWithConstructorName;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report overriding package default method\r", "+\t\tif(optionID.equals(OPTION_ReportOverridingPackageDefaultMethod)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= OverriddenPackageDefaultMethod;\r", "+\t\t\t\tthis.warningThreshold &= ~OverriddenPackageDefaultMethod;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~OverriddenPackageDefaultMethod;\r", "+\t\t\t\tthis.warningThreshold |= OverriddenPackageDefaultMethod;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~OverriddenPackageDefaultMethod;\r", "+\t\t\t\tthis.warningThreshold &= ~OverriddenPackageDefaultMethod;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report deprecation\r", "+\t\tif(optionID.equals(OPTION_ReportDeprecation)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= UsingDeprecatedAPI;\r", "+\t\t\t\tthis.warningThreshold &= ~UsingDeprecatedAPI;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UsingDeprecatedAPI;\r", "+\t\t\t\tthis.warningThreshold |= UsingDeprecatedAPI;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UsingDeprecatedAPI;\r", "+\t\t\t\tthis.warningThreshold &= ~UsingDeprecatedAPI;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report hidden catch block\r", "+\t\tif(optionID.equals(OPTION_ReportHiddenCatchBlock)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= MaskedCatchBlock;\r", "+\t\t\t\tthis.warningThreshold &= ~MaskedCatchBlock;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~MaskedCatchBlock;\r", "+\t\t\t\tthis.warningThreshold |= MaskedCatchBlock;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~MaskedCatchBlock;\r", "+\t\t\t\tthis.warningThreshold &= ~MaskedCatchBlock;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report unused local variable\r", "+\t\tif(optionID.equals(OPTION_ReportUnusedLocal)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= UnusedLocalVariable;\r", "+\t\t\t\tthis.warningThreshold &= ~UnusedLocalVariable;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UnusedLocalVariable;\r", "+\t\t\t\tthis.warningThreshold |= UnusedLocalVariable;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UnusedLocalVariable;\r", "+\t\t\t\tthis.warningThreshold &= ~UnusedLocalVariable;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report unused parameter\r", "+\t\tif(optionID.equals(OPTION_ReportUnusedParameter)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= UnusedArgument;\r", "+\t\t\t\tthis.warningThreshold &= ~UnusedArgument;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UnusedArgument;\r", "+\t\t\t\tthis.warningThreshold |= UnusedArgument;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~UnusedArgument;\r", "+\t\t\t\tthis.warningThreshold &= ~UnusedArgument;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t} \r", "+\t\t// Report synthetic access emulation\r", "+\t\tif(optionID.equals(OPTION_ReportSyntheticAccessEmulation)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= AccessEmulation;\r", "+\t\t\t\tthis.warningThreshold &= ~AccessEmulation;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~AccessEmulation;\r", "+\t\t\t\tthis.warningThreshold |= AccessEmulation;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~AccessEmulation;\r", "+\t\t\t\tthis.warningThreshold &= ~AccessEmulation;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\t// Report non-externalized string literals\r", "+\t\tif(optionID.equals(OPTION_ReportNonExternalizedStringLiteral)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= NonExternalizedString;\r", "+\t\t\t\tthis.warningThreshold &= ~NonExternalizedString;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~NonExternalizedString;\r", "+\t\t\t\tthis.warningThreshold |= NonExternalizedString;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~NonExternalizedString;\r", "+\t\t\t\tthis.warningThreshold &= ~NonExternalizedString;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t}\r", "+\t\t// Report usage of 'assert' as an identifier\r", "+\t\tif(optionID.equals(OPTION_ReportAssertIdentifier)){\r", "+\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\tthis.errorThreshold |= AssertUsedAsAnIdentifier;\r", "+\t\t\t\tthis.warningThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\tthis.errorThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\t\t\t\tthis.warningThreshold |= AssertUsedAsAnIdentifier;\r", "+\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\tthis.errorThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\t\t\t\tthis.warningThreshold &= ~AssertUsedAsAnIdentifier;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\t// Set the source compatibility mode (assertions)\r", "+\t\tif(optionID.equals(OPTION_Source)){\r", "+\t\t\tif (optionValue.equals(VERSION_1_3)) {\r", "+\t\t\t\tthis.assertMode = false;\r", "+\t\t\t} else if (optionValue.equals(VERSION_1_4)) {\r", "+\t\t\t\tthis.assertMode = true;\r", "+\t\t\t}\r", "+\t\t\tcontinue;\r"]}], "num": 7771}
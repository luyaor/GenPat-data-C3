{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d406f0c315b2f1de4fad32e26d9cd554", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7addacdc1641c44f8f9a41407a563f4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/RegionBasedHierarchyBuilder.java", "commitBeforeChange": "e70a97840585a3ede400b971666912929897851b", "commitAfterChange": "f5104ea8b01f4418b9868445123db4c689077583", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate ArrayList determineTypesInRegion()", "signatureAfterChange": " \tprivate ArrayList determineTypesInRegion(IProgressMonitor monitor)", "diff": ["-\tprivate ArrayList determineTypesInRegion() {", "+\tprivate ArrayList determineTypesInRegion(IProgressMonitor monitor) {", "-\t\tArrayList types = new ArrayList();", "-\t\tIJavaElement[] roots =", "-\t\t\t((RegionBasedTypeHierarchy) this.hierarchy).fRegion.getElements();", "-\t\tfor (int i = 0; i < roots.length; i++) {", "-\t\t\ttry {", "-\t\t\t\tIJavaElement root = roots[i];", "-\t\t\t\tswitch (root.getElementType()) {", "-\t\t\t\t\tcase IJavaElement.JAVA_PROJECT :", "-\t\t\t\t\t\tinjectAllTypesForJavaProject((IJavaProject) root, types);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT :", "-\t\t\t\t\t\tinjectAllTypesForPackageFragmentRoot((IPackageFragmentRoot) root, types);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT :", "-\t\t\t\t\t\tinjectAllTypesForPackageFragment((IPackageFragment) root, types);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase IJavaElement.CLASS_FILE :", "-\t\t\t\t\t\ttypes.add(((IClassFile) root).getType());", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase IJavaElement.COMPILATION_UNIT :", "-\t\t\t\t\t\tIType[] cuTypes = ((ICompilationUnit) root).getAllTypes();", "-\t\t\t\t\t\tfor (int j = 0; j < cuTypes.length; j++) {", "-\t\t\t\t\t\t\ttypes.add(cuTypes[j]);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase IJavaElement.TYPE :", "-\t\t\t\t\t\ttypes.add(root);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault :", "-\t\t\t\t\t\tbreak;", "+\t\ttry {", "+\t\t\tArrayList types = new ArrayList();", "+\t\t\tIJavaElement[] roots =", "+\t\t\t\t((RegionBasedTypeHierarchy) this.hierarchy).fRegion.getElements();", "+\t\t\tint length = roots.length;", "+\t\t\tif (monitor != null) monitor.beginTask(\"\", length); //$NON-NLS-1$", "+\t\t\tfor (int i = 0; i <length; i++) {", "+\t\t\t\ttry {", "+\t\t\t\t\tIJavaElement root = roots[i];", "+\t\t\t\t\tswitch (root.getElementType()) {", "+\t\t\t\t\t\tcase IJavaElement.JAVA_PROJECT :", "+\t\t\t\t\t\t\tinjectAllTypesForJavaProject((IJavaProject) root, types);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT :", "+\t\t\t\t\t\t\tinjectAllTypesForPackageFragmentRoot((IPackageFragmentRoot) root, types);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT :", "+\t\t\t\t\t\t\tinjectAllTypesForPackageFragment((IPackageFragment) root, types);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IJavaElement.CLASS_FILE :", "+\t\t\t\t\t\t\ttypes.add(((IClassFile) root).getType());", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IJavaElement.COMPILATION_UNIT :", "+\t\t\t\t\t\t\tIType[] cuTypes = ((ICompilationUnit) root).getAllTypes();", "+\t\t\t\t\t\t\tfor (int j = 0; j < cuTypes.length; j++) {", "+\t\t\t\t\t\t\t\ttypes.add(cuTypes[j]);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IJavaElement.TYPE :", "+\t\t\t\t\t\t\ttypes.add(root);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t// just continue", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// just continue", "+\t\t\t\tworked(monitor, 1);", "+\t\t\treturn types;", "+\t\t} finally {", "+\t\t\tif (monitor != null) monitor.done();", "-\t\treturn types;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab230a423c5d39f4684c5a85a52b3836", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "c9aad4acd8f81ce40a05f5d7cf14d54593460190", "commitAfterChange": "0c4c74fca56aa2a771f7c3d6e30a98a885e70930", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate void runTest(boolean shouldCompileOK, String[] testFiles, String commandLine, \t\t\tString expectedOutOutputString, \t\t\tString expectedErrOutputString, \t\t\tboolean shouldFlushOutputDirectory)", "signatureAfterChange": " \tprivate void runTest(boolean shouldCompileOK, String[] testFiles, String commandLine, \t\t\tString expectedOutOutputString, \t\t\tString expectedErrOutputString, \t\t\tboolean shouldFlushOutputDirectory)", "diff": ["-\t\ttry {", "-\t\t\tbatchCompiler = new Main(new PrintWriter(new FileOutputStream(", "-\t\t\t\t\toutFileName)), new PrintWriter(new FileOutputStream(", "-\t\t\t\t\terrFileName)), false);", "-\t\t} catch (FileNotFoundException e) {", "-\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\te.printStackTrace();", "-\t\t\tthrow new RuntimeException(e);", "-\t\t}", "+\t\tPrintWriter out = null; ", "+\t\tPrintWriter err = null; ", "-\t\t\tfinal String[] tokenizeCommandLine = Main.tokenize(commandLine);", "-\t\t\tcompileOK = batchCompiler.compile(tokenizeCommandLine);", "-\t\t} catch (RuntimeException e) {", "-\t\t\tcompileOK = false;", "-\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\te.printStackTrace();", "-\t\t\tthrow e;", "+\t\t\ttry {", "+\t\t\t\tout = new PrintWriter(new FileOutputStream(outFileName));", "+\t\t\t\terr = new PrintWriter(new FileOutputStream(errFileName));", "+\t\t\t\tbatchCompiler = new Main(out, err, false);", "+\t\t\t} catch (FileNotFoundException e) {", "+\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "+\t\t\t\te.printStackTrace();", "+\t\t\t\tthrow new RuntimeException(e);", "+\t\t\t}", "+\t\t\ttry {", "+\t\t\t\tfinal String[] tokenizeCommandLine = Main.tokenize(commandLine);", "+\t\t\t\tcompileOK = batchCompiler.compile(tokenizeCommandLine);", "+\t\t\t} catch (RuntimeException e) {", "+\t\t\t\tcompileOK = false;", "+\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "+\t\t\t\te.printStackTrace();", "+\t\t\t\tthrow e;", "+\t\t\t}", "+\t\t} finally {", "+\t\t\tif (out != null)", "+\t\t\t\tout.close();", "+\t\t\tif (err != null)", "+\t\t\t\terr.close();"]}], "num": 68828}
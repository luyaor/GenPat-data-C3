{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aee35d8e729847ce7bdf74aa918bcc5f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37d3957f0a31d6225a10511c6345749f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "0b30e3bd30fe1e39e547d612dd69649980fc246c", "commitAfterChange": "5195e9af454b2916100d69750487aa83a5527c1e", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tprivate void formatCascadingMessageSends(CascadingMethodInvocationFragmentBuilder builder, BlockScope scope)", "signatureAfterChange": "  \tprivate void formatCascadingMessageSends(CascadingMethodInvocationFragmentBuilder builder, BlockScope scope)", "diff": ["+\t\tint startingPositionInCascade = 1;", "+\t\t} else {", "+\t\t\tMessageSend currentMessageSend = fragments[1];", "+\t\t\tfinal int numberOfParens = (currentMessageSend.bits & AstNode.ParenthesizedMASK) >> AstNode.ParenthesizedSHIFT;", "+\t\t\tif (numberOfParens > 0) {", "+\t\t\t\tmanageOpeningParenthesizedExpression(currentMessageSend, numberOfParens);", "+\t\t\t}", "+\t\t\tAstNode[] arguments = currentMessageSend.arguments;", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier); // selector", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLPAREN, this.preferences.insert_space_before_message_send);", "+\t\t\tif (arguments != null) {", "+\t\t\t\tint argumentLength = arguments.length;", "+\t\t\t\tAlignment argumentsAlignment = this.scribe.createAlignment(", "+\t\t\t\t\t\t\"messageArguments\", //$NON-NLS-1$", "+\t\t\t\t\t\tthis.preferences.message_send_arguments_alignment,", "+\t\t\t\t\t\targumentLength,", "+\t\t\t\t\t\tthis.scribe.scanner.currentPosition);", "+\t\t\t\tthis.scribe.enterAlignment(argumentsAlignment);", "+\t\t\t\tboolean okForArguments = false;", "+\t\t\t\tdo {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tif (this.preferences.insert_space_within_message_send) {", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tfor (int j = 0; j < argumentLength; j++) {", "+\t\t\t\t\t\t\tif (j > 0) {", "+\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_messagesend_arguments);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.scribe.alignFragment(argumentsAlignment, j);", "+\t\t\t\t\t\t\tif (j > 0 && this.preferences.insert_space_after_comma_in_messagesend_arguments) {", "+\t\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\targuments[j].traverse(this, scope);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tokForArguments = true;", "+\t\t\t\t\t} catch (AlignmentException e) {", "+\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t\t\t}", "+\t\t\t\t} while (!okForArguments);", "+\t\t\t\tthis.scribe.exitAlignment(argumentsAlignment, true);", "+\t\t\t}", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRPAREN, this.preferences.insert_space_within_message_send);", "+\t\t\tif (numberOfParens > 0) {", "+\t\t\t\tmanageClosingParenthesizedExpression(currentMessageSend, numberOfParens);", "+\t\t\t}", "+\t\t\tstartingPositionInCascade = 2;", "-\t\t\t\tif (!fragment.isImplicitThis()) {", "-\t\t\t\t\tthis.scribe.alignFragment(cascadingMessageSendAlignment, 0);", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDOT);", "-\t\t\t\t}", "-\t\t\t\tfor (int i = 1; i < size; i++) {", "+\t\t\t\tthis.scribe.alignFragment(cascadingMessageSendAlignment, 0);", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDOT);", "+\t\t\t\tfor (int i = startingPositionInCascade; i < size; i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e57401fd16502d54d045d2f979f5cc04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": " \tpublic boolean visit(TryStatement tryStatement, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\t\tParameterizedQualifiedTypeReference parameterizedQualifiedTypeReference, \t\t\tBlockScope scope)", "diff": ["+\t}", "+\tpublic boolean visit(", "+\t\t\tParameterizedQualifiedTypeReference parameterizedQualifiedTypeReference,", "+\t\t\tBlockScope scope) {", "+\t\tfinal int numberOfParens = (parameterizedQualifiedTypeReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageOpeningParenthesizedExpression(parameterizedQualifiedTypeReference, numberOfParens);", "+\t\t}", "+\t\tTypeReference[][] typeArguments = parameterizedQualifiedTypeReference.typeArguments;", "+\t\tint length = typeArguments.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier);", "+\t\t\tTypeReference[] typeArgument = typeArguments[i];\t\t\t", "+\t\t\tif (typeArgument != null) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLESS, this.preferences.insert_space_before_opening_angle_bracket_in_parameterized_type_reference);", "+\t\t\t\tif (this.preferences.insert_space_after_opening_angle_bracket_in_parameterized_type_reference) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}", "+\t\t\t\tint typeArgumentLength = typeArgument.length;", "+\t\t\t\tfor (int j = 0; j < typeArgumentLength - 1; j++) {", "+\t\t\t\t\ttypeArgument[j].traverse(this, scope);", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_parameterized_type_reference);", "+\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_parameterized_type_reference) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}\t\t\t", "+\t\t\t\t}", "+\t\t\t\ttypeArgument[typeArgumentLength - 1].traverse(this, scope);", "+\t\t\t\tif (isClosingGenericToken()) {", "+\t\t\t\t\tthis.scribe.printNextToken(CLOSING_GENERICS_EXPECTEDTOKENS, this.preferences.insert_space_before_closing_angle_bracket_in_parameterized_type_reference);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (i < length - 1) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameDOT);", "+\t\t\t}", "+\t\t}", "+\t\tint dimensions = parameterizedQualifiedTypeReference.dimensions();", "+\t\tif (dimensions != 0) {", "+\t\t\tif (this.preferences.insert_space_before_opening_bracket_in_array_type_reference) {", "+\t\t\t\tthis.scribe.space();", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < dimensions; i++) {", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "+\t\t\t\tif (this.preferences.insert_space_between_brackets_in_array_type_reference) {", "+\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t}", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "+\t\t\t}", "+\t\t}\t\t", "+\t\tif (numberOfParens > 0) {", "+\t\t\tmanageClosingParenthesizedExpression(parameterizedQualifiedTypeReference, numberOfParens);", "+\t\t}", "+\t\treturn false;", "+\t}"]}], "num": 67154}
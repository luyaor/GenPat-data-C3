{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "813dfc286a2378d220dd539dbf983b63", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a06d7185ee4512f384fb25aca964f2fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/StackMapFrame.java", "commitBeforeChange": "e6f197651cbdf07261298d2395f1290ce2dfe4c1", "commitAfterChange": "5a485cb39d1ee33622141cf426fac71c4bf93ded", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic StackMapFrame( \t\t\tbyte[] classFileBytes, \t\t\tIConstantPool constantPool, \t\t\tint offset) throws ClassFormatException", "signatureAfterChange": " \tpublic StackMapFrame( \t\t\tbyte[] classFileBytes, \t\t\tIConstantPool constantPool, \t\t\tint offset) throws ClassFormatException", "diff": ["-\t\t\t\tthis.readOffset = 1;", "+\t\t\t\tthis.readOffset = 3;", "-\t\t\t\tthis.locals = new IVerificationTypeInfo[tempLocals];", "-\t\t\t\tfor (int i = 0; i < tempLocals; i++) {", "-\t\t\t\t\tVerificationInfo verificationInfo = new VerificationInfo(classFileBytes, constantPool, offset + this.readOffset);", "-\t\t\t\t\tthis.locals[i] = verificationInfo;", "-\t\t\t\t\tthis.readOffset += verificationInfo.sizeInBytes();", "+\t\t\t\tif (tempLocals != 0) {", "+\t\t\t\t\tthis.locals = new IVerificationTypeInfo[tempLocals];", "+\t\t\t\t\tfor (int i = 0; i < tempLocals; i++) {", "+\t\t\t\t\t\tVerificationInfo verificationInfo = new VerificationInfo(classFileBytes, constantPool, offset + this.readOffset);", "+\t\t\t\t\t\tthis.locals[i] = verificationInfo;", "+\t\t\t\t\t\tthis.readOffset += verificationInfo.sizeInBytes();", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.locals = EMPTY_LOCALS_OR_STACK_ITEMS;", "-\t\t\t\tthis.stackItems = new IVerificationTypeInfo[tempStackItems];", "-\t\t\t\tfor (int i = 0; i < tempStackItems; i++) {", "-\t\t\t\t\tVerificationInfo verificationInfo = new VerificationInfo(classFileBytes, constantPool, offset + this.readOffset);", "-\t\t\t\t\tthis.stackItems[i] = verificationInfo;", "-\t\t\t\t\tthis.readOffset += verificationInfo.sizeInBytes();", "+\t\t\t\tif (tempStackItems != 0) {", "+\t\t\t\t\tthis.stackItems = new IVerificationTypeInfo[tempStackItems];", "+\t\t\t\t\tfor (int i = 0; i < tempStackItems; i++) {", "+\t\t\t\t\t\tVerificationInfo verificationInfo = new VerificationInfo(classFileBytes, constantPool, offset + this.readOffset);", "+\t\t\t\t\t\tthis.stackItems[i] = verificationInfo;", "+\t\t\t\t\t\tthis.readOffset += verificationInfo.sizeInBytes();", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.stackItems = EMPTY_LOCALS_OR_STACK_ITEMS;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fab86979d53d78a5605df6afb67a63b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 76, "signatureBeforeChange": " \tprivate void printJavadocGapLinesForImmutableBlock(FormatJavadocBlock block)", "signatureAfterChange": " \tprivate void printJavadocGapLinesForImmutableBlock(FormatJavadocBlock block)", "diff": ["-\t\tStringBuffer buffer = null;", "+\t\tString newLineString = null;", "-\t\t\t\t\t\tif (buffer == null) {", "-\t\t\t\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\t\t\tif (newLineString == null) {", "-\t\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\tthis.tempBuffer.setLength(0);", "+\t\t\t\t\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\t\t\t\tthis.tempBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\tnewLineString = this.tempBuffer.toString();", "-\t\t\t\t\t\taddReplaceEdit(newLineStart, newLineStart+indentationColumn-2, buffer.toString());", "+\t\t\t\t\t\taddReplaceEdit(newLineStart, newLineStart+indentationColumn-2, newLineString);", "-\t\t\t\t\t\t\t\tif (buffer == null) {", "-\t\t\t\t\t\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\t\t\t\t\tif (newLineString == null) {", "+\t\t\t\t\t\t\t\t\tthis.tempBuffer.setLength(0);", "-\t\t\t\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\t\t\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\t\t\t\t\t\tthis.tempBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\t\t\tnewLineString = this.tempBuffer.toString();", "-\t\t\t\t\t\t\t\taddReplaceEdit(newLineStart, secondLineStart-1, buffer.toString());", "+\t\t\t\t\t\t\t\taddReplaceEdit(newLineStart, secondLineStart-1, newLineString);", "-\t\t\tif (buffer == null) {", "-\t\t\t\tbuffer = new StringBuffer();", "+\t\t\tif (newLineString == null) {", "+\t\t\t\tthis.tempBuffer.setLength(0);", "-\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\tthis.tempBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\tnewLineString = this.tempBuffer.toString();", "-\t\t\taddReplaceEdit(newLineStart, secondLineStart-1, buffer.toString());", "+\t\t\taddReplaceEdit(newLineStart, secondLineStart-1, newLineString);", "-\t\t\tif (buffer == null) {", "-\t\t\t\tbuffer = new StringBuffer();", "+\t\t\tif (newLineString == null) {", "+\t\t\t\tthis.tempBuffer.setLength(0);", "-\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\tthis.tempBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\tnewLineString = this.tempBuffer.toString();", "-\t\t\taddReplaceEdit(newLineStart, newLineStart+indentationColumn-2, buffer.toString());", "+\t\t\taddReplaceEdit(newLineStart, newLineStart+indentationColumn-2, newLineString);"]}], "num": 49736}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5af98b1fbab2f0002aad6d3bd047eee9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcc97df8e61197714025bc51e8051584", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingComparator.java", "commitBeforeChange": "ca2c2041b0a275f8c6e62accf87940713b2edb23", "commitAfterChange": "2461d94ce88e31c3e5ed882c9bd4ad46830d0640", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tstatic boolean isEqual(TypeVariableBinding[] bindings, TypeVariableBinding[] otherBindings)", "signatureAfterChange": " \tstatic boolean isEqual(TypeVariableBinding[] bindings, TypeVariableBinding[] otherBindings)", "diff": ["-\t\t\t\tif (CharOperation.equals(typeVariableBinding.sourceName, typeVariableBinding2.sourceName)", "-\t\t\t\t\t\t&& isEqual(typeVariableBinding.declaringElement, typeVariableBinding2.declaringElement, false)", "-\t\t\t\t\t\t&& isEqual(typeVariableBinding.superclass, typeVariableBinding2.superclass, false)", "-\t\t\t\t\t\t&& isEqual(typeVariableBinding.superInterfaces, typeVariableBinding2.superInterfaces, false)) {", "-\t\t\t\t\tcontinue;", "+\t\t\t\tif (!isEqual(typeVariableBinding, typeVariableBinding2)) {", "+\t\t\t\t\treturn false;", "-\t\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db6009fc25936ad5909f49c4c9fcfd75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "0371188bae8847b23acded54b847b2e6acb55e2f", "commitAfterChange": "70388ba5a3272ffd8da7da345ffb96bb25e84f31", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public void resolve(BlockScope scope)", "signatureAfterChange": "  public void resolve(BlockScope scope)", "diff": ["-\t} else if (scope.isBoxingCompatibleWith(expressionType, methodType)", "-\t\t\t\t\t\t|| (expressionType.isBaseType()  // narrowing then boxing ?", "-\t\t\t\t\t\t\t\t&& scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5 // autoboxing", "-\t\t\t\t\t\t\t\t&& !methodType.isBaseType()", "-\t\t\t\t\t\t\t\t&& !methodType.isTypeVariable()", "-\t\t\t\t\t\t\t\t&& this.expression.isConstantValueOfTypeAssignableToType(expressionType, scope.environment().computeBoxingType(methodType)))) {", "+\t} else if (isBoxingCompatible(expressionType, methodType, this.expression, scope)) {"]}], "num": 29334}
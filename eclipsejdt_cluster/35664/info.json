{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6df5588a6a7822fd0b1108f92c42829a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00178e8ffa15f5798bd16118dbbe4e4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void generatePostIncrement( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tCompoundAssignment postIncrement, \t\tboolean valueRequired)", "signatureAfterChange": "  public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-\tpublic void generatePostIncrement(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tCompoundAssignment postIncrement,", "-\t\tboolean valueRequired) {", "-", "-\t\treceiver.generateCode(currentScope, codeStream, true);", "-\t\tif (receiver instanceof CastExpression\t// ((type[])null)[0]", "-\t\t\t\t&& ((CastExpression)receiver).innermostCastedExpression().resolvedType == TypeBinding.NULL){", "-\t\t\tcodeStream.checkcast(receiver.resolvedType); ", "-\t\t}\t", "-\t\tposition.generateCode(currentScope, codeStream, true);", "-\t\tcodeStream.dup2();", "-\t\tcodeStream.arrayAt(this.resolvedType.id);", "-\t\tif (valueRequired) {", "-\t\t\tif ((this.resolvedType == TypeBinding.LONG)", "-\t\t\t\t|| (this.resolvedType == TypeBinding.DOUBLE)) {", "-\t\t\t\tcodeStream.dup2_x2();", "-\t\t\t\tcodeStream.dup_x2();", "-\t\t}", "-\t\tcodeStream.generateImplicitConversion(implicitConversion);\t\t", "-\t\tcodeStream.generateConstant(", "-\t\t\tpostIncrement.expression.constant,", "-\t\t\timplicitConversion);", "-\t\tcodeStream.sendOperator(postIncrement.operator, this.implicitConversion & COMPILE_TYPE_MASK);", "-\t\tcodeStream.generateImplicitConversion(", "-\t\t\tpostIncrement.preAssignImplicitConversion);", "-\t\tcodeStream.arrayAtPut(this.resolvedType.id, false);", "+", "+public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired) {", "+\tthis.receiver.generateCode(currentScope, codeStream, true);", "+\tif (this.receiver instanceof CastExpression\t// ((type[])null)[0]", "+\t\t\t&& ((CastExpression)this.receiver).innermostCastedExpression().resolvedType == TypeBinding.NULL){", "+\t\tcodeStream.checkcast(this.receiver.resolvedType); ", "+\t}\t", "+\tthis.position.generateCode(currentScope, codeStream, true);", "+\tcodeStream.dup2();", "+\tcodeStream.arrayAt(this.resolvedType.id);", "+\tif (valueRequired) {", "+\t\tif ((this.resolvedType == TypeBinding.LONG)", "+\t\t\t|| (this.resolvedType == TypeBinding.DOUBLE)) {", "+\t\t\tcodeStream.dup2_x2();", "+\t\t} else {", "+\t\t\tcodeStream.dup_x2();", "+\t\t}", "+\t}", "+\tcodeStream.generateImplicitConversion(this.implicitConversion);\t\t", "+\tcodeStream.generateConstant(", "+\t\tpostIncrement.expression.constant,", "+\t\tthis.implicitConversion);", "+\tcodeStream.sendOperator(postIncrement.operator, this.implicitConversion & TypeIds.COMPILE_TYPE_MASK);", "+\tcodeStream.generateImplicitConversion(", "+\t\tpostIncrement.preAssignImplicitConversion);", "+\tcodeStream.arrayAtPut(this.resolvedType.id, false);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8318b6c3774d50f8fa143eee7f30836", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t */", "-\tpublic void generateCode(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tboolean valueRequired) {", "-", "-\t\tint pc = codeStream.position;", "-\t\treceiver.generateCode(currentScope, codeStream, true);", "-\t\tif (receiver instanceof CastExpression\t// ((type[])null)[0]", "-\t\t\t\t&& ((CastExpression)receiver).innermostCastedExpression().resolvedType == TypeBinding.NULL){", "-\t\t\tcodeStream.checkcast(receiver.resolvedType); ", "-\t\t}\t\t\t", "-\t\tposition.generateCode(currentScope, codeStream, true);", "-\t\tcodeStream.arrayAt(this.resolvedType.id);", "-\t\t// Generating code for the potential runtime type checking", "-\t\tif (valueRequired) {", "-\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t} else {", "-\t\t\tboolean isUnboxing = (implicitConversion & TypeIds.UNBOXING) != 0;", "-\t\t\t// conversion only generated if unboxing", "-\t\t\tif (isUnboxing) codeStream.generateImplicitConversion(implicitConversion);", "-\t\t\tswitch (isUnboxing ? postConversionType(currentScope).id : this.resolvedType.id) {", "-\t\t\t\tcase T_long :", "-\t\t\t\tcase T_double :", "-\t\t\t\t\tcodeStream.pop2();", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault :", "-\t\t\t\t\tcodeStream.pop();", "-\t\t\t}", "-\t\t}", "-\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t}", "+ */", "+public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {", "+\tint pc = codeStream.position;", "+\tthis.receiver.generateCode(currentScope, codeStream, true);", "+\tif (this.receiver instanceof CastExpression\t// ((type[])null)[0]", "+\t\t\t&& ((CastExpression)this.receiver).innermostCastedExpression().resolvedType == TypeBinding.NULL){", "+\t\tcodeStream.checkcast(this.receiver.resolvedType); ", "+\t}\t\t\t", "+\tthis.position.generateCode(currentScope, codeStream, true);", "+\tcodeStream.arrayAt(this.resolvedType.id);", "+\t// Generating code for the potential runtime type checking", "+\tif (valueRequired) {", "+\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t} else {", "+\t\tboolean isUnboxing = (this.implicitConversion & TypeIds.UNBOXING) != 0;", "+\t\t// conversion only generated if unboxing", "+\t\tif (isUnboxing) codeStream.generateImplicitConversion(this.implicitConversion);", "+\t\tswitch (isUnboxing ? postConversionType(currentScope).id : this.resolvedType.id) {", "+\t\t\tcase T_long :", "+\t\t\tcase T_double :", "+\t\t\t\tcodeStream.pop2();", "+\t\t\t\tcodeStream.pop();", "+\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+}"]}], "num": 35664}
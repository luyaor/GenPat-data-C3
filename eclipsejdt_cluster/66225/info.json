{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4bdd97f7da353080c5fb0d252e1cd71b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "735bbf34652e64d4b9a54cfe90d46896", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "dafcaed018e710da1dd812dc260b3ece76bb3e1d", "commitAfterChange": "a28933ffb03bd99d79fd8fce531cad43e24a3c4c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tprivate APTResult runAPT( \t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tfinal ProcessorEnvImpl processorEnv, \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<ICompilationUnit> unitsForFiles, \t\t\tfinal int internalRound)", "signatureAfterChange": " \t \tprivate APTResult runAPT( \t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tfinal ProcessorEnvImpl processorEnv, \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<ICompilationUnit> unitsForFiles, \t\t\tfinal int internalRound)", "diff": ["-\t\t\tfinal Set<IFile> lastGeneratedFiles = new HashSet<IFile>();", "-\t\t\tfor( int i=0, len=files.length; i<len; i++ ){", "-\t\t\t\tfinal Set<IFile> genFiles = gfm.getGeneratedFilesForParent( files[i] );", "-\t\t\t\tif( genFiles != null )", "-\t\t\t\t\tlastGeneratedFiles.addAll(genFiles);", "+\t\t\tfinal Map<IFile,Set<IFile>> lastGeneratedFiles = new HashMap<IFile,Set<IFile>>();", "+\t\t\tfor( IFile parentIFile : files ){", "+\t\t\t\tlastGeneratedFiles.put(parentIFile, gfm.getGeneratedFilesForParent(parentIFile));", "-\t\t\tfinal Set<IFile> allGeneratedFiles = new HashSet<IFile>();", "-\t\t\tSet<IFile> modifiedFiles = new HashSet<IFile>();", "-\t\t\tMap<IFile, Boolean> filesMap = processorEnv.getGeneratedFiles();", "-\t\t\tfor (Map.Entry<IFile, Boolean> entry : filesMap.entrySet()) {", "-\t\t\t\tallGeneratedFiles.add(entry.getKey());", "-\t\t\t\tif (entry.getValue()) {", "-\t\t\t\t\tmodifiedFiles.add(entry.getKey());", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tfinal Map<IFile, Set<IFile>> allGeneratedFiles = processorEnv.getAllGeneratedFiles();", "+\t\t\tfinal Set<IFile> modifiedGeneratedFiles = processorEnv.getModifiedGeneratedFiles();", "-\t\t\tfor( int i=0, len=files.length; i<len; i++ ){", "+\t\t\tfor( IFile file : files ){", "+\t\t\t\tSet<IFile> generatedFiles = allGeneratedFiles.get(file);", "+\t\t\t\tif (generatedFiles == null)", "+\t\t\t\t\tgeneratedFiles = Collections.emptySet();", "-\t\t\t\t\t\t\tfiles[i], ", "+\t\t\t\t\t\t\tfile, ", "-\t\t\t\t\t\t\tlastGeneratedFiles, ", "-\t\t\t\t\t\t\tallGeneratedFiles, ", "+\t\t\t\t\t\t\tlastGeneratedFiles.get(file), ", "+\t\t\t\t\t\t\tgeneratedFiles, ", "-\t\t\tAPTResult result = new APTResult( modifiedFiles, ", "+\t\t\tAPTResult result = new APTResult( modifiedGeneratedFiles, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ddda5c2231d2656d375dbb0c8961eed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic MethodBinding[] getMethods(char[] selector)", "signatureAfterChange": " \tpublic MethodBinding[] getMethods(char[] selector)", "diff": ["-\t\tjava.util.ArrayList matchingMethods = null;", "-\t\t\tint selectorLength = selector.length;", "-\t\t\tfor (int i = 0, length = this.methods.length; i < length; i++) {", "-\t\t\t\tMethodBinding method = this.methods[i];", "-\t\t\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "-\t\t\t\t\tif (matchingMethods == null)", "-\t\t\t\t\t\tmatchingMethods = new java.util.ArrayList(2);", "-\t\t\t\t\tmatchingMethods.add(method);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (matchingMethods != null) {", "-\t\t\t\tMethodBinding[] result = new MethodBinding[matchingMethods.size()];", "-\t\t\t\tmatchingMethods.toArray(result);", "+\t\t\tlong range;", "+\t\t\tif ((range = ReferenceBinding.binarySearch(selector, this.methods)) >= 0) {", "+\t\t\t\tint start = (int) range;", "+\t\t\t\tint length = (int) (range >> 32) - start + 1;", "+\t\t\t\t// cannot optimize since some clients rely on clone array", "+\t\t\t\t// if (start == 0 && length == this.methods.length) ", "+\t\t\t\t//\treturn this.methods; // current set is already interesting subset", "+\t\t\t\tMethodBinding[] result;", "+\t\t\t\tSystem.arraycopy(this.methods, start, result = new MethodBinding[length], 0, length);", "-\t\tif ((tagBits & TagBits.AreMethodsComplete) != 0)", "+\t\tif ((tagBits & TagBits.AreMethodsComplete) != 0) {", "-", "+\t\t}", "-\t\t    \tMethodBinding[] temp = new MethodBinding[length + this.methods.length];", "+\t\t    \tint total = length + this.methods.length;", "+\t\t    \tMethodBinding[] temp = new MethodBinding[total];", "+\t\t    \tif (total > 1) {", "+\t\t    \t\tReferenceBinding.sortMethods(temp, 0, total-1); // resort to ensure order is good", "+\t\t    \t}"]}], "num": 66225}
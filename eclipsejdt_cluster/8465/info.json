{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2adb1bebaed0546428dd9fe5dd61619c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a532bf052726beab45a600e6aa17039", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GrammarCoverageTests308.java", "commitBeforeChange": "ee8ad1e40e9b16f34ac6204dee3c91af5b27ff77", "commitAfterChange": "a6e44391963b63fa0c27651827313192cc7a80a0", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void test038() throws Exception", "signatureAfterChange": " \tpublic void test038() throws Exception", "diff": ["-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"2. ERROR in X.java (at line 12)\\n\" +", "-\t\t\t\t\"\ti = @Marker W<@Marker Integer>::<@Marker String> new;\\n\" +", "-\t\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t    \"The target type of this expression must be a functional interface\\n\" +", "-\t\t\t    \"----------\\n\"", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\t\"\ti = @Marker W<@Marker Integer>::<@Marker String> new;\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"The target type of this expression must be a functional interface\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\t\"\ti = @Marker W<@Marker Integer>::<@Marker String> new;\\n\" + ", "+\t\t\t\t\"\t     ^^^^^^\\n\" + ", "+\t\t\t\t\"Marker cannot be resolved to a type\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\t\"\ti = @Marker W<@Marker Integer>::<@Marker String> new;\\n\" + ", "+\t\t\t\t\"\t               ^^^^^^\\n\" + ", "+\t\t\t\t\"Marker cannot be resolved to a type\\n\" + ", "+\t\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29656c617dab681c17c2f2e87234d1e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "b9c215c1a0014055731b42921e6d8437fe5d1c30", "commitAfterChange": "cf30dcc5cf110d772b62d35f57e0c35d494f0e46", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "     public void test111()", "signatureAfterChange": "     public void test111()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 34)\\n\" + ", "+\t\t\t\"\tc = c.getSuperclass();\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The method getSuperclass() belongs to the raw type Class. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. WARNING in X.java (at line 43)\\n\" + ", "+\t\t\t\"\tc = c.getSuperclass();\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The method getSuperclass() belongs to the raw type Class. References to generic type Class<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bcf083ea622bc086d9b6680e66b1785", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_5.java", "commitBeforeChange": "3307a3b21f8472cc998512e9e4cd5afdd4f17b52", "commitAfterChange": "b155f47580a90f694a899aae6d06a1ff29f450b8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void test011()", "signatureAfterChange": " public void test011()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in p1\\\\X.java (at line 4)\\n\" +", "-\t\t\"\twhile (false);\t\\n\" +", "-\t\t\"\t             ^\\n\" +", "-\t\t\"Unreachable code\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. ERROR in p1\\\\X.java (at line 5)\\n\" +", "-\t\t\"\twhile (false) System.out.println(\\\"unreachable\\\");\t\\n\" +", "-\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Unreachable code\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in p1\\\\X.java (at line 8)\\n\" +", "-\t\t\"\tfor (;false;);\t\\n\" +", "-\t\t\"\t             ^\\n\" +", "-\t\t\"Unreachable code\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. ERROR in p1\\\\X.java (at line 9)\\n\" +", "-\t\t\"\tfor (;false;) System.out.println(\\\"unreachable\\\");\t\\n\" +", "-\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Unreachable code\\n\" +", "-\t\t\"----------\\n\"", "-\t);", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in p1\\\\X.java (at line 4)\\n\" + ", "+\t\t\"\twhile (false);\t\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Unreachable code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in p1\\\\X.java (at line 5)\\n\" + ", "+\t\t\"\twhile (false) System.out.println(\\\"unreachable\\\");\t\\n\" + ", "+\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Unreachable code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in p1\\\\X.java (at line 8)\\n\" + ", "+\t\t\"\tfor (;false;);\t\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Unreachable code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in p1\\\\X.java (at line 9)\\n\" + ", "+\t\t\"\tfor (;false;) System.out.println(\\\"unreachable\\\");\t\\n\" + ", "+\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Unreachable code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in p1\\\\X.java (at line 10)\\n\" + ", "+\t\t\"\tif (false);\t\\n\" + ", "+\t\t\"\t          ^\\n\" + ", "+\t\t\"Dead code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in p1\\\\X.java (at line 11)\\n\" + ", "+\t\t\"\tif (false)System.out.println(\\\"unreachable\\\");\t\t\\n\" + ", "+\t\t\"\t          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2db5f307bf6ddb09a1acc6e5f662991a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_4.java", "commitBeforeChange": "3307a3b21f8472cc998512e9e4cd5afdd4f17b52", "commitAfterChange": "b155f47580a90f694a899aae6d06a1ff29f450b8", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void test039()", "signatureAfterChange": " public void test039()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 5)\\n\" +", "-\t\t\"\tfor (;false;);\t\\n\" +", "-\t\t\"\t             ^\\n\" +", "-\t\t\"Unreachable code\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. ERROR in X.java (at line 6)\\n\" +", "-\t\t\"\tfor (;false;){}\t\\n\" +", "-\t\t\"\t             ^^\\n\" +", "-\t\t\"Unreachable code\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 7)\\n\" +", "-\t\t\"\twhile (false);\t\\n\" +", "-\t\t\"\t             ^\\n\" +", "-\t\t\"Unreachable code\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. ERROR in X.java (at line 8)\\n\" +", "-\t\t\"\twhile (false){}\t\\n\" +", "-\t\t\"\t             ^^\\n\" +", "-\t\t\"Unreachable code\\n\" +", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tfor (;false;);\t\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Unreachable code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tfor (;false;){}\t\\n\" + ", "+\t\t\"\t             ^^\\n\" + ", "+\t\t\"Unreachable code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\twhile (false);\t\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Unreachable code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\twhile (false){}\t\\n\" + ", "+\t\t\"\t             ^^\\n\" + ", "+\t\t\"Unreachable code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"\tif (false) {} else {}\t\\n\" + ", "+\t\t\"\t           ^^\\n\" + ", "+\t\t\"Dead code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\"\tif (false) ; else ;\t\t\t\\n\" + ", "+\t\t\"\t           ^\\n\" + ", "+\t\t\"Dead code\\n\" + ", "+\t\t\"----------\\n\"", "+);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "349a5269cc632da2dadc7598c244b4d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "13991702fc2c3e2b678aa9ef22a4a03b29ad808b", "commitAfterChange": "3a8b2107b944f5a4646c23d5049199496436bc6e", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " \tpublic void testBug112346()", "signatureAfterChange": " \tpublic void testBug112346()", "diff": ["-\t\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. ERROR in Test.java (at line 7)\\n\" +", "+\t\t\t\"\tT field;\\n\" +", "+\t\t\t\"\t^\\n\" +", "+\t\t\t\"T cannot be resolved to a type\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"3. ERROR in Test.java (at line 8)\\n\" +", "+\t\t\t\"\tT foo() { return null; }\\n\" +", "+\t\t\t\"\t^\\n\" +", "+\t\t\t\"T cannot be resolved to a type\\n\" +", "+\t\t\t\"----------\\n\"", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5694c3e745645c60c534a9a854790d6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 389, "methodNumberAfterChange": 389, "signatureBeforeChange": " public void test2000_flow_info()", "signatureAfterChange": " public void test2000_flow_info()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\"\tif (o65 == null) { /* */ }\\n\" + ", "+\t\t\"\t                 ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 19)\\n\" + ", "+\t\t\"\tif (o65 != null) { /* */ }\\n\" + ", "+\t\t\"\t    ^^^\\n\" + ", "+\t\t\"Redundant null check: The variable o65 cannot be null at this location\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c24c98f68eb0403c6f1575702d73e85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_5.java", "commitBeforeChange": "3307a3b21f8472cc998512e9e4cd5afdd4f17b52", "commitAfterChange": "b155f47580a90f694a899aae6d06a1ff29f450b8", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " public void test039()", "signatureAfterChange": " public void test039()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 5)\\n\" +", "-\t\t\"\tfor (;false;);\t\\n\" +", "-\t\t\"\t             ^\\n\" +", "-\t\t\"Unreachable code\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. ERROR in X.java (at line 6)\\n\" +", "-\t\t\"\tfor (;false;){}\t\\n\" +", "-\t\t\"\t             ^^\\n\" +", "-\t\t\"Unreachable code\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 7)\\n\" +", "-\t\t\"\twhile (false);\t\\n\" +", "-\t\t\"\t             ^\\n\" +", "-\t\t\"Unreachable code\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. ERROR in X.java (at line 8)\\n\" +", "-\t\t\"\twhile (false){}\t\\n\" +", "-\t\t\"\t             ^^\\n\" +", "-\t\t\"Unreachable code\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tfor (;false;);\t\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Unreachable code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tfor (;false;){}\t\\n\" + ", "+\t\t\"\t             ^^\\n\" + ", "+\t\t\"Unreachable code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\twhile (false);\t\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Unreachable code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\twhile (false){}\t\\n\" + ", "+\t\t\"\t             ^^\\n\" + ", "+\t\t\"Unreachable code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"\tif (false) {} else {}\t\\n\" + ", "+\t\t\"\t           ^^\\n\" + ", "+\t\t\"Dead code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\"\tif (false) ; else ;\t\t\t\\n\" + ", "+\t\t\"\t           ^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "858b94bf0b629f554c957414b3ca3b5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 148, "methodNumberAfterChange": 148, "signatureBeforeChange": "              public void test144()", "signatureAfterChange": "              public void test144()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tZork z;\\n\" + ", "-\t\t\t\"\t^^^^\\n\" + ", "-\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 34)\\n\" + ", "-\t\t\t\"\tList<Exception> problems= new TestIntrospector(EverythingWrong.class).validateTestMethods();\\n\" + ", "-\t\t\t\"\t                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Exception>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 38)\\n\" + ", "-\t\t\t\"\tpublic static junit.framework.Test suite() {\\n\" + ", "-\t\t\t\"\t              ^^^^^\\n\" + ", "-\t\t\t\"junit cannot be resolved to a type\\n\" + ", "-\t\t\t\"----------\\n\");", "+            \"----------\\n\" + ", "+    \t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+    \t\t\"\tZork z;\\n\" + ", "+    \t\t\"\t^^^^\\n\" + ", "+    \t\t\"Zork cannot be resolved to a type\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. WARNING in X.java (at line 34)\\n\" + ", "+    \t\t\"\tList<Exception> problems= new TestIntrospector(EverythingWrong.class).validateTestMethods();\\n\" + ", "+    \t\t\"\t                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+    \t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<Exception>\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"3. ERROR in X.java (at line 38)\\n\" + ", "+    \t\t\"\tpublic static junit.framework.Test suite() {\\n\" + ", "+    \t\t\"\t              ^^^^^\\n\" + ", "+    \t\t\"junit cannot be resolved to a type\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"4. WARNING in X.java (at line 50)\\n\" + ", "+    \t\t\"\tTestIntrospector(Class c) {}\\n\" + ", "+    \t\t\"\t                 ^^^^^\\n\" + ", "+    \t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"5. WARNING in X.java (at line 51)\\n\" + ", "+    \t\t\"\tList validateTestMethods() { return null; }\\n\" + ", "+    \t\t\"\t^^^^\\n\" + ", "+    \t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a118efacff1efe5b365f9cf6ffd26113", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GrammarCoverageTests308.java", "commitBeforeChange": "6e5d8fb1fa59c43c60c58828e1e292aaafa3465f", "commitAfterChange": "108910be72e713e6e104fafacd635988e5383096", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void test039() throws Exception", "signatureAfterChange": " \tpublic void test039() throws Exception", "diff": ["+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"15. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tObject r = (@Marker java. @Marker util.@Marker Map<@Marker String, @Marker String>.@Marker Entry @Marker []) null;\\n\" + ", "+\t\t\t\t\"\t                                                                                    ^^^^^^\\n\" + ", "+\t\t\t\t\"Marker cannot be resolved to a type\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"16. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tObject r = (@Marker java. @Marker util.@Marker Map<@Marker String, @Marker String>.@Marker Entry @Marker []) null;\\n\" + ", "+\t\t\t\t\"\t                                                                                                  ^^^^^^\\n\" + ", "+\t\t\t\t\"Marker cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd1ff95141062451f48a679582c5975f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 346, "methodNumberAfterChange": 346, "signatureBeforeChange": " \tpublic void test342()", "signatureAfterChange": " \tpublic void test342()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in Test.java (at line 34)\\n\" + ", "+\t\t\t\"\tMyClass<String> bar = MyClass.factoryMakeMyClass(\\\"hi\\\");\\n\" + ", "+\t\t\t\"\t                      ^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: MyClass is a raw type. References to generic type MyClass<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in Test.java (at line 35)\\n\" + ", "+\t\t\t\"\tMyClass<String> bar2 = MyClass.<String>factoryMakeMyClass(\\\"hi\\\");\\n\" + ", "+\t\t\t\"\t                       ^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: MyClass is a raw type. References to generic type MyClass<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c321bd038bd618c9877778bff9bbdb28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "13991702fc2c3e2b678aa9ef22a4a03b29ad808b", "commitAfterChange": "3a8b2107b944f5a4646c23d5049199496436bc6e", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " \tpublic void testBug112346()", "signatureAfterChange": " \tpublic void testBug112346()", "diff": ["+\t\t\t\"----------\\n\" +", "+\t\t\t\"2. ERROR in Test.java (at line 7)\\n\" +", "+\t\t\t\"\tT field;\\n\" +", "+\t\t\t\"\t^\\n\" +", "+\t\t\t\"T cannot be resolved to a type\\n\" +", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"3. ERROR in Test.java (at line 8)\\n\" +", "+\t\t\t\"\tT foo() { return null; }\\n\" +", "+\t\t\t\"\t^\\n\" +", "+\t\t\t\"T cannot be resolved to a type\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4a825396b5da036fd7ea619854cdcfe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "ee7a8340e3a250b29afacc2b0f2a8f1d78fdc6a8", "commitAfterChange": "1e986f6e04576ef708d8b80e355be08c2ab3a68a", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void test024()", "signatureAfterChange": " public void test024()", "diff": ["+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in p\\\\X.java (at line 17)\\n\" + ", "+\t\t\"\tclass DataException extends Throwable {\t\\n\" + ", "+\t\t\"\t      ^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The serializable class DataException does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in p\\\\X.java (at line 19)\\n\" + ", "+\t\t\"\tclass LookupException extends DataException {\t\\n\" + ", "+\t\t\"\t      ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The serializable class LookupException does not declare a static final serialVersionUID field of type long\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4e2f9ea1bd72c452c4663ef7882e499", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GrammarCoverageTests308.java", "commitBeforeChange": "0fdabed7d03d0f0d08fda0e7f845381fd7c643ef", "commitAfterChange": "b31cd8ccd51413655d3e805905e8dd7d1404f391", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void test012() throws Exception", "signatureAfterChange": " \tpublic void test012() throws Exception", "diff": ["+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tObject o2 = @Marker int @Marker[] [] @Marker[].class;\\n\" + ", "+\t\t\t\t\"\t                        ^^^^^^^\\n\" + ", "+\t\t\t\t\"Syntax error, type annotations are illegal here\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tObject o2 = @Marker int @Marker[] [] @Marker[].class;\\n\" + ", "+\t\t\t\t\"\t                                     ^^^^^^^\\n\" + ", "+\t\t\t\t\"Syntax error, type annotations are illegal here\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6ee25dac4cbaece63be3f2e6cd07228", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 653, "methodNumberAfterChange": 653, "signatureBeforeChange": " \tpublic void test649()", "signatureAfterChange": " \tpublic void test649()", "diff": ["-\t\t\t\"----------\\n\" + ", "+\t        \"----------\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tclass Sub extends Outer {\\n\" + ", "+\t\t\t\"\t                  ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Outer is a raw type. References to generic type Outer<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tInner get() { return null; }\\n\" + ", "+\t\t\t\"\t^^^^^\\n\" + ", "+\t\t\t\"Type safety: Outer.Inner is a raw type. References to generic type Outer<T>.Inner should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebf3ac02b07ee4332e99d478c8dcca2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java", "commitBeforeChange": "aa70d91abcd9d16b058d62bcd2e8b6cfb7fb819c", "commitAfterChange": "1d1b85ba11568f78a124441d6eb86af75fb135ca", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void testBug424712a()", "signatureAfterChange": " public void testBug424712a()", "diff": ["+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\"\tSet<Y> rosterSet = (Set<Y>) foo(null, Set::new);\\n\" + ", "+\t\t\"\t                                      ^^^^^^^^\\n\" + ", "+\t\t\"The target type of this expression must be a functional interface\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\"\tSet<Y> rosterSet = (Set<Y>) foo(null, Set::new);\\n\" + ", "+\t\t\"\t                                      ^^^\\n\" + ", "+\t\t\"Cannot instantiate the type Set\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f183a717e2ea6e1e3ac4f5b6ebcefe50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " \tpublic void test104()", "signatureAfterChange": " \tpublic void test104()", "diff": ["+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\"\tx.t.foo(\\\"SUCC\\\");\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: The method foo(Object) belongs to the raw type AX. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"\tx.t.bar(\\\"ESS\\\");\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: The method bar(Object) belongs to the raw type BX. References to generic type BX<Q> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f66e1649ee197b13c152b85a910554fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TryStatementTest.java", "commitBeforeChange": "18e7addfd31efa565dcf3200d77e3cbdb7faf7bc", "commitAfterChange": "0d2bb4cd9a920a832985dcd25c76a6d09b85febf", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  public void test023()", "signatureAfterChange": "  public void test023()", "diff": ["+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\"\tclass AX extends Exception {}\\n\" + ", "+\t\t\"\t      ^^\\n\" + ", "+\t\t\"The serializable class AX does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\"\tclass BX extends AX {}\\n\" + ", "+\t\t\"\t      ^^\\n\" + ", "+\t\t\"The serializable class BX does not declare a static final serialVersionUID field of type long\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd524be944a82468d8a73662be8d50a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_4.java", "commitBeforeChange": "3307a3b21f8472cc998512e9e4cd5afdd4f17b52", "commitAfterChange": "b155f47580a90f694a899aae6d06a1ff29f450b8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void test011()", "signatureAfterChange": " public void test011()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in p1\\\\X.java (at line 4)\\n\" +", "-\t\t\"\twhile (false);\t\\n\" +", "-\t\t\"\t             ^\\n\" +", "-\t\t\"Unreachable code\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. ERROR in p1\\\\X.java (at line 5)\\n\" +", "-\t\t\"\twhile (false) System.out.println(\\\"unreachable\\\");\t\\n\" +", "-\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Unreachable code\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in p1\\\\X.java (at line 8)\\n\" +", "-\t\t\"\tfor (;false;);\t\\n\" +", "-\t\t\"\t             ^\\n\" +", "-\t\t\"Unreachable code\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. ERROR in p1\\\\X.java (at line 9)\\n\" +", "-\t\t\"\tfor (;false;) System.out.println(\\\"unreachable\\\");\t\\n\" +", "-\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Unreachable code\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in p1\\\\X.java (at line 4)\\n\" + ", "+\t\t\"\twhile (false);\t\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Unreachable code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in p1\\\\X.java (at line 5)\\n\" + ", "+\t\t\"\twhile (false) System.out.println(\\\"unreachable\\\");\t\\n\" + ", "+\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Unreachable code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in p1\\\\X.java (at line 8)\\n\" + ", "+\t\t\"\tfor (;false;);\t\\n\" + ", "+\t\t\"\t             ^\\n\" + ", "+\t\t\"Unreachable code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in p1\\\\X.java (at line 9)\\n\" + ", "+\t\t\"\tfor (;false;) System.out.println(\\\"unreachable\\\");\t\\n\" + ", "+\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Unreachable code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in p1\\\\X.java (at line 10)\\n\" + ", "+\t\t\"\tif (false);\t\\n\" + ", "+\t\t\"\t          ^\\n\" + ", "+\t\t\"Dead code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in p1\\\\X.java (at line 11)\\n\" + ", "+\t\t\"\tif (false)System.out.println(\\\"unreachable\\\");\t\t\\n\" + ", "+\t\t\"\t          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}], "num": 8465}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ad737f4dee2ddb828d38145fb7c3f52", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ca6a38faf6feb3b4ff35dd0f72f3568", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 116, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath(boolean ignoreUnresolvedEntry) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] resolveClasspath(IClasspathEntry[] rawClasspath) throws JavaModelException", "diff": ["-\t */", "-\tpublic IClasspathEntry[] getResolvedClasspath(boolean ignoreUnresolvedEntry)", "-\t\tthrows JavaModelException {", "-", "-\t\treturn ", "-\t\t\tgetResolvedClasspath(", "-\t\t\t\tignoreUnresolvedEntry, ", "-\t\t\t\tfalse, // don't generateMarkerOnError", "-\t\t\t\ttrue // returnResolutionInProgress", "-\t\t\t);", "-\t}", "+\t */", "+\tpublic IClasspathEntry[] resolveClasspath(IClasspathEntry[] rawClasspath) throws JavaModelException {", "+\t\tArrayList resolvedEntries = new ArrayList();", "+\t\tfor (int i = 0, length = rawClasspath.length; i < length; i++) {", "+\t\t\tIClasspathEntry rawEntry = rawClasspath[i];", "+\t\t\tswitch (rawEntry.getEntryKind()){", "+\t\t\t\tcase IClasspathEntry.CPE_VARIABLE:", "+\t\t\t\t\tIClasspathEntry resolvedEntry = null;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tresolvedEntry = JavaCore.getResolvedClasspathEntry(rawEntry);", "+\t\t\t\t\t} catch (AssertionFailedException e) {", "+\t\t\t\t\t\t// Catch the assertion failure", "+\t\t\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=55992", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (resolvedEntry != null)", "+\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IClasspathEntry.CPE_CONTAINER:", "+\t\t\t\t\tIClasspathContainer container = JavaCore.getClasspathContainer(rawEntry.getPath(), this);", "+\t\t\t\t\tif (container == null)", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tIClasspathEntry[] containerEntries = container.getClasspathEntries();", "+\t\t\t\t\tif (containerEntries == null) ", "+\t\t\t\t\t\tbreak;", "+", "+\t\t\t\t\t// container was bound", "+\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){", "+\t\t\t\t\t\tClasspathEntry cEntry = (ClasspathEntry) containerEntries[j];", "+\t\t\t\t\t\t// if container is exported or restricted, then its nested entries must in turn be exported  (21749) and/or propagate restrictions", "+\t\t\t\t\t\tcEntry = cEntry.combineWith((ClasspathEntry) rawEntry);", "+\t\t\t\t\t\tresolvedEntries.add(cEntry);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tresolvedEntries.add(rawEntry);", "+\t\t\t}", "+\t\t}", "+\t\tIClasspathEntry[] result = new IClasspathEntry[resolvedEntries.size()];", "+\t\tresolvedEntries.toArray(result);", "+\t\treturn result;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b76ea36477f8318e512f6a00bd8a486f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "1317e9ebe26807b45d83a46701194241e6f648d5", "commitAfterChange": "3649f3f6d703fd53c9c12b41cdc037f657d98134", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r public static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] classpath, IPath outputLocation)", "signatureAfterChange": "\r public static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] classpath, IPath outputLocation)", "diff": ["-\t\t\t\t\tIClasspathEntry[] containerEntries = JavaCore.getResolvedClasspathContainer(rawEntry.getPath(), javaProject);\r", "-\t\t\t\t\tif (containerEntries != null){\r", "-\t\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){\r", "-\t\t\t\t\t\t\t resolvedEntry = JavaCore.getResolvedClasspathEntry(containerEntries[j]);\r", "-\t\t\t\t\t\t\tif (resolvedEntry != null){\r", "-\t\t\t\t\t\t\t\tif (resolvedEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "-\t\t\t\t\t\t\t\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "-\t\t\t\t\t\t\t\tif (resolvedEntry.getPath().equals(outputLocation)) allowNestingInOutput = true;\r", "-\t\t\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);\r", "+\t\t\t\t\tIClasspathContainer container = JavaCore.getClasspathContainer(rawEntry.getPath(), javaProject);\r", "+\t\t\t\t\tif (container != null){\r", "+\t\t\t\t\t\tIClasspathEntry[] containerEntries = container.getClasspathEntries();\r", "+\t\t\t\t\t\tif (containerEntries != null){\r", "+\t\t\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){\r", "+\t\t\t\t\t\t\t\t resolvedEntry = JavaCore.getResolvedClasspathEntry(containerEntries[j]);\r", "+\t\t\t\t\t\t\t\tif (resolvedEntry != null){\r", "+\t\t\t\t\t\t\t\t\tif (resolvedEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "+\t\t\t\t\t\t\t\t\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "+\t\t\t\t\t\t\t\t\tif (resolvedEntry.getPath().equals(outputLocation)) allowNestingInOutput = true;\r", "+\t\t\t\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);\r", "+\t\t\t\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb8f00f4837c72b08c2826ced4baae2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "82ebc709013252385fce65c14aa676e8e0d39c6f", "commitAfterChange": "e2360e075300bd271e5e3fd90537b7dce7bdaa00", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r public static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] classpath, IPath outputLocation)", "signatureAfterChange": "\r public static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] classpath, IPath outputLocation)", "diff": ["-\t\t\t\tIClasspathEntry[] containerEntries = javaProject.getResolvedClasspathContainer(rawEntry.getPath());\r", "-\t\t\t\tif (containerEntries != null){\r", "-\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){\r", "-\t\t\t\t\t\t resolvedEntry = JavaCore.getResolvedClasspathEntry(containerEntries[j]);\r", "-\t\t\t\t\t\tif (resolvedEntry != null){\r", "-\t\t\t\t\t\t\tif (resolvedEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "-\t\t\t\t\t\t\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "-\t\t\t\t\t\t\tif (resolvedEntry.getPath().equals(outputLocation)) allowNestingInOutput = true;\r", "-\t\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tIClasspathEntry[] containerEntries = javaProject.getResolvedClasspathContainer(rawEntry.getPath());\r", "+\t\t\t\t\tif (containerEntries != null){\r", "+\t\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){\r", "+\t\t\t\t\t\t\t resolvedEntry = JavaCore.getResolvedClasspathEntry(containerEntries[j]);\r", "+\t\t\t\t\t\t\tif (resolvedEntry != null){\r", "+\t\t\t\t\t\t\t\tif (resolvedEntry.getEntryKind() == IClasspathEntry.CPE_SOURCE) hasSource = true;\r", "+\t\t\t\t\t\t\t\t// check if any source entries coincidates with binary output - in which case nesting inside output is legal\r", "+\t\t\t\t\t\t\t\tif (resolvedEntry.getPath().equals(outputLocation)) allowNestingInOutput = true;\r", "+\t\t\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t} catch(JavaModelException e){\r", "+\t\t\t\t\treturn new JavaModelStatus(e);\r"]}], "num": 52312}
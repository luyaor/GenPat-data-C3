{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08a46e1e70d77466c5a33a04288f5ee7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7173e57f227315f1f0c7e93d1bde9dea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " public boolean isEmpty()", "signatureAfterChange": " private boolean hasPotentialNodes(int start, int end)", "diff": ["-public boolean isEmpty() {", "-\treturn ", "-\t\tthis.potentialMatchingNodes.size() == 0 ", "-\t\t&& this.matchingNodes.size() == 0;", "-}", "+private boolean hasPotentialNodes(int start, int end) {", "+\tObject[] nodes = this.potentialMatchingNodesSet.values;", "+\tfor (int i = 0, l = nodes.length; i < l; i++) {", "+\t\tAstNode node = (AstNode) nodes[i];", "+\t\tif (node != null && start <= node.sourceStart && node.sourceEnd <= end)", "+\t\t\treturn true;", "+\t}", "+\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8ae1833b6e2efd10e00642c46eb4ec9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " private AstNode[] matchingNodes(int start, int end)", "signatureAfterChange": " private AstNode[] matchingNodes(int start, int end)", "diff": ["- */", "-private AstNode[] matchingNodes(int start, int end) {", "-\treturn this.nodesInRange(start, end, this.matchingNodes);", "+private AstNode[] matchingNodes(int start, int end) {", "+\tArrayList nodes = null;", "+\tObject[] keyTable = this.matchingNodes.keyTable;", "+\tfor (int i = 0, l = keyTable.length; i < l; i++) {", "+\t\tAstNode node = (AstNode) keyTable[i];", "+\t\tif (node != null && start <= node.sourceStart && node.sourceEnd <= end) {", "+\t\t\tif (nodes == null) nodes = new ArrayList();", "+\tif (nodes == null) return null;", "+", "+\t\t\treturn ((AstNode) o1).sourceStart - ((AstNode) o2).sourceStart;"]}], "num": 8017}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3864718603449c11658fa638d525e5aa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "019a5e68ff985016bbc31caa5b2a721a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void traverse(ASTVisitor visitor, ClassScope classScope)", "signatureAfterChange": " \tpublic void traverse(ASTVisitor visitor, ClassScope classScope)", "diff": ["-\t\t\t\tif (superclass != null)", "-\t\t\t\t\tsuperclass.traverse(visitor, scope);", "-\t\t\t\tif (superInterfaces != null) {", "-\t\t\t\t\tint superInterfaceLength = superInterfaces.length;", "-\t\t\t\t\tfor (int i = 0; i < superInterfaceLength; i++)", "-\t\t\t\t\t\tsuperInterfaces[i].traverse(visitor, scope);", "+\t\t\t\tif (this.annotations != null) {", "+\t\t\t\t\tint annotationsLength = this.annotations.length;", "+\t\t\t\t\tfor (int i = 0; i < annotationsLength; i++)", "+\t\t\t\t\t\tthis.annotations[i].traverse(visitor, scope);", "-\t\t\t\tif (memberTypes != null) {", "-\t\t\t\t\tint memberTypesLength = memberTypes.length;", "-\t\t\t\t\tfor (int i = 0; i < memberTypesLength; i++)", "-\t\t\t\t\t\tmemberTypes[i].traverse(visitor, scope);", "+\t\t\t\tif (this.superclass != null)", "+\t\t\t\t\tthis.superclass.traverse(visitor, scope);", "+\t\t\t\tif (this.superInterfaces != null) {", "+\t\t\t\t\tint length = this.superInterfaces.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\t\tthis.superInterfaces[i].traverse(visitor, scope);", "-\t\t\t\tif (fields != null) {", "-\t\t\t\t\tint fieldsLength = fields.length;", "-\t\t\t\t\tfor (int i = 0; i < fieldsLength; i++) {", "+\t\t\t\tif (this.typeParameters != null) {", "+\t\t\t\t\tint length = this.typeParameters.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tthis.typeParameters[i].traverse(visitor, scope);", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tif (this.memberTypes != null) {", "+\t\t\t\t\tint length = this.memberTypes.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\t\tthis.memberTypes[i].traverse(visitor, scope);", "+\t\t\t\t}", "+\t\t\t\tif (this.enums != null) {", "+\t\t\t\t\tint length = this.enums.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\t\tthis.enums[i].traverse(visitor, scope);", "+\t\t\t\t}\t\t\t\t\t", "+\t\t\t\tif (this.fields != null) {", "+\t\t\t\t\tint length = this.fields.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tif ((field = fields[i]).isStatic()) {", "+\t\t\t\t\t\tif ((field = this.fields[i]).isStatic()) {", "-\t\t\t\tif (methods != null) {", "-\t\t\t\t\tint methodsLength = methods.length;", "-\t\t\t\t\tfor (int i = 0; i < methodsLength; i++)", "-\t\t\t\t\t\tmethods[i].traverse(visitor, scope);", "+\t\t\t\tif (this.methods != null) {", "+\t\t\t\t\tint length = this.methods.length;", "+\t\t\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\t\t\tthis.methods[i].traverse(visitor, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b76b36b509b25b11f91c641e46b0913", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "5166ddb130bcb062c1e82da491c829c5d95a6211", "commitAfterChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  protected CompilationParticipantResult[] notifyParticipants(SourceFile[] unitsAboutToCompile)", "signatureAfterChange": "  protected CompilationParticipantResult[] notifyParticipants(SourceFile[] unitsAboutToCompile)", "diff": ["+\tCompilationParticipantResult[] results = new CompilationParticipantResult[unitsAboutToCompile.length];", "+\tfor (int i = unitsAboutToCompile.length; --i >= 0;)", "+\t\tresults[i] = new CompilationParticipantResult(unitsAboutToCompile[i]);", "+", "-\tCompilationParticipantResult[] results = null;", "-\tfor (int i = 0, l = this.javaBuilder.participants == null ? 0 : this.javaBuilder.participants.length; i < l; i++) {", "-\t\tif (!this.javaBuilder.participants[i].isAnnotationProcessor()) {", "-\t\t\tif (results == null) {", "-\t\t\t\tresults = new CompilationParticipantResult[unitsAboutToCompile.length];", "-\t\t\t\tfor (int j = unitsAboutToCompile.length; --j >= 0;)", "-\t\t\t\t\tresults[j] = new CompilationParticipantResult(unitsAboutToCompile[j]);", "-\t\t\t}", "-\t\t\tthis.javaBuilder.participants[i].buildStarting(results);", "-\t\t}", "-\t}", "-\treturn results;", "-}", "+\t// and what happens if some participants do not expect to be called with only a few files, after seeing 'all' the files?", "+\t\tthis.javaBuilder.participants[i].buildStarting(results, this instanceof BatchImageBuilder);", "+\tSimpleSet uniqueFiles = null;", "+\tCompilationParticipantResult[] toAdd = null;", "+\tint added = 0;", "+\t\t\t\tif (uniqueFiles == null) {", "+\t\t\t\t\tuniqueFiles = new SimpleSet(unitsAboutToCompile.length + 3);", "+\t\t\t\t\tfor (int f = unitsAboutToCompile.length; --f >= 0;)", "+\t\t\t\t\t\tuniqueFiles.add(unitsAboutToCompile[f]);", "+\t\t\t\t}", "+\t\t\t\tif (!uniqueFiles.includes(sourceFile))", "+\t\t\t\t\tuniqueFiles.add(sourceFile);", "+\t\t\t\t\tCompilationParticipantResult newResult = new CompilationParticipantResult(sourceFile);", "+\t\t\t\t\t// is there enough room to add all the addedGeneratedFiles.length ?", "+\t\t\t\t\tif (toAdd == null) {", "+\t\t\t\t\t\ttoAdd = new CompilationParticipantResult[addedGeneratedFiles.length];", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint length = toAdd.length;", "+\t\t\t\t\t\tif (added == length)", "+\t\t\t\t\t\t\tSystem.arraycopy(toAdd, 0, toAdd = new CompilationParticipantResult[length + addedGeneratedFiles.length], 0, length);", "+\t\t\t\t\t}", "+\t\t\t\t\ttoAdd[added++] = newResult;", "+\tif (added >0 ) {", "+\t\tint length = results.length;", "+\t\tSystem.arraycopy(results, 0, results = new CompilationParticipantResult[length + added], 0 , length);", "+\t\tSystem.arraycopy(toAdd, 0, results, length, added);", "+\t}", "+\treturn results;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f7d964f0d6395642cc56ff6204d2bb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "e3dd2b05ac8f41c0dca5c47353959d33b3013e99", "commitAfterChange": "f2616d9c66b0302f054a7d87b47e25d04c9332b7", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tprivate void printCodeSnippet(int startPosition, int endPosition)", "signatureAfterChange": " \tprivate void printCodeSnippet(int startPosition, int endPosition)", "diff": ["-\t\t// 3 - process snippet (@see JavaDocRegion#formatCodeSnippet)", "+\t\t// 3 - format snippet (@see JavaDocRegion#formatCodeSnippet)", "-\t\tif (edit != null) {", "-\t\t\tformattedSnippet= CommentFormatterUtil.evaluateFormatterEdit(convertedSnippet, edit, null);", "+\t\tif (edit == null) {", "+\t\t\t// 3.a - not a valid code to format, keep initial buffer", "+\t\t\tformattedSnippet = inputBuffer.toString();", "+\t\t} else {", "+\t\t\t// 3.b - valid code formatted", "+\t\t\t// 3.b.i - get the result", "+\t\t\tformattedSnippet = CommentFormatterUtil.evaluateFormatterEdit(convertedSnippet, edit, null);", "+", "+\t\t\t// 3.b.ii- convert back to HTML (@see JavaDocRegion#convertJava2Html)", "+\t\t\tJava2HTMLEntityReader javaReader= new Java2HTMLEntityReader(new StringReader(formattedSnippet));", "+\t\t\tbuf= new char[256];", "+\t\t\tStringBuffer conversionBuffer= new StringBuffer();", "+\t\t\tint l;", "+\t\t\ttry {", "+\t\t\t\tdo {", "+\t\t\t\t\tl= javaReader.read(buf);", "+\t\t\t\t\tif (l != -1)", "+\t\t\t\t\t\tconversionBuffer.append(buf, 0, l);", "+\t\t\t\t} while (l > 0);", "+\t\t\t\tformattedSnippet = conversionBuffer.toString();", "+\t\t\t} catch (IOException e) {", "+\t\t\t\t// should not happen", "+\t\t\t\tCommentFormatterUtil.log(e);", "+\t\t\t\treturn;", "+\t\t\t}", "-\t\tStringBuffer outputBuffer= new StringBuffer();", "-\t\ttracker= new DefaultLineTracker();", "+\t\tStringBuffer outputBuffer = new StringBuffer();", "+\t\ttracker = new DefaultLineTracker();", "-", "-\t\t// 5 - convert back to HTML (@see JavaDocRegion#convertJava2Html)", "-\t\tJava2HTMLEntityReader javaReader= new Java2HTMLEntityReader(new StringReader(formattedSnippet));", "-\t\tbuf= new char[256];", "-\t\tStringBuffer conversionBuffer= new StringBuffer();", "-\t\tint l;", "-\t\ttry {", "-\t\t\tdo {", "-\t\t\t\tl= javaReader.read(buf);", "-\t\t\t\tif (l != -1)", "-\t\t\t\t\tconversionBuffer.append(buf, 0, l);", "-\t\t\t} while (l > 0);", "-\t\t\tformattedSnippet = conversionBuffer.toString();", "-\t\t} catch (IOException e) {", "-\t\t\t// should not happen", "-\t\t\tCommentFormatterUtil.log(e);", "-\t\t\treturn;", "-\t\t}", "-", "-", "-", "-\t\tfor (int lines= tracker.getNumberOfLines() - 1; lines > 0; lines--) {", "+\t\tfor (int lines=tracker.getNumberOfLines() - 1; lines > 0; lines--) {", "-\t\t// replace old text with the formatted snippet", "+", "+\t\t// 5 - replace old text with the formatted snippet"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8eae444a0e4e9ef812329436e43e53f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "58e1f97a6c11cbf99287f2cc95bb245d2faf2bd1", "commitAfterChange": "e33ceacdb6e9b17f29de3a23e3df28f1c6bec162", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\tif ((argv == null) || (argv.length == 0))", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.noSourceFile\")); //$NON-NLS-1$", "+\t\tif ((argv == null) || (argv.length == 0)) {", "+\t\t\tprintUsage();", "+\t\t\treturn;", "+\t\t}", "+\t\t// expand the command line if necessary", "+\t\tboolean needExpansion = false;", "+\t\tloop: for (int i = 0; i < argCount; i++) {", "+\t\t\t\tif (argv[i].startsWith(\"@\")) {", "+\t\t\t\t\tneedExpansion = true;", "+\t\t\t\t\tbreak loop;", "+\t\t\t\t}", "+\t\t}", "+", "+\t\tString[] newCommandLineArgs = null;", "+\t\tif (needExpansion) {", "+\t\t\tnewCommandLineArgs = new String[argCount];", "+\t\t\tindex = 0;", "+\t\t\tfor (int i = 0; i < argCount; i++) {", "+\t\t\t\tString[] newArgs = null;", "+\t\t\t\tString arg = argv[i].trim();", "+\t\t\t\tif (arg.startsWith(\"@\")) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tLineNumberReader reader = new LineNumberReader(new StringReader(new String(Util.getFileCharContent(new File(arg.substring(1)), null))));", "+\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\t\tString line;", "+\t\t\t\t\t\twhile((line = reader.readLine()) != null) {", "+\t\t\t\t\t\t\tbuffer.append(line).append(\" \");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tnewArgs = tokenize(buffer.toString());", "+\t\t\t\t\t} catch(IOException e) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tMain.bind(\"configure.invalidexpansionargumentname\", arg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (newArgs != null) {", "+\t\t\t\t\tint newCommandLineArgsLength = newCommandLineArgs.length;", "+\t\t\t\t\tint newArgsLength = newArgs.length;", "+\t\t\t\t\tSystem.arraycopy(newCommandLineArgs, 0, (newCommandLineArgs = new String[newCommandLineArgsLength + newArgsLength - 1]), 0, index);", "+\t\t\t\t\tSystem.arraycopy(newArgs, 0, newCommandLineArgs, index, newArgsLength);", "+\t\t\t\t\tindex += newArgsLength;", "+\t\t\t\t} else {", "+\t\t\t\t\tnewCommandLineArgs[index++] = arg;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tindex = -1;", "+\t\t} else {", "+\t\t\tnewCommandLineArgs = argv;", "+\t\t\tfor (int i = 0; i < argCount; i++) {", "+\t\t\t\tnewCommandLineArgs[i] = newCommandLineArgs[i].trim();", "+\t\t\t}", "+\t\t}", "+\t\targCount = newCommandLineArgs.length;", "-\t\t\tcurrentArg = argv[index].trim();", "+\t\t\tcurrentArg = newCommandLineArgs[index];", "-\t\tif (filenames == null)", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.noSource\")); //$NON-NLS-1$", "+\t\tif (filenames == null) {", "+\t\t\tprintUsage();", "+\t\t\treturn;", "+\t\t}"]}], "num": 3715}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0edbbb43f8bedf5f1ed531c7d6e0b60f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17427837967ee9cd1ade4cc69bce4e7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "9ca09d5ed1be915e478e63cfb298cfaff9af7f75", "commitAfterChange": "264dd88468cd014ae7150e1040d5982ca933b94b", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "  \tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block, boolean textOnNewLine)", "signatureAfterChange": "  \tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block, boolean textOnNewLine)", "diff": ["-\t\t\t\t\t\tboolean needLeadingSpace = false;", "-\t\t\t\t\t\t\t\t\t\tneedLeadingSpace = false; // there may be no star after", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tneedLeadingSpace = true;", "-\t\t\t\t\t\t\t\t\t\t// skip javadoc comment star", "-\t\t\t\t\t\t\t\t\t\ttoken = this.scanner.getNextToken();", "-\t\t\t\t\t\t\t\t\t\tneedLeadingSpace = true;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (token == TerminalTokens.TokenNameWHITESPACE) {", "-\t\t\t\t\t\t\t\t\t\tneedLeadingSpace = false;", "-\t\t\t\t\t\t\t\t\t\tnextStart++;", "-\t\t\t\t\t\tthis.needSpace = needLeadingSpace;", "+\t\t\t\t\t\tthis.needSpace = false;", "-\t\t\t\t\t\tif (this.needSpace) {", "-\t\t\t\t\t\t\taddInsertEdit(nextStart, \" \"); //$NON-NLS-1$", "-\t\t\t\t\t\t\tthis.needSpace = false;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tprintCodeSnippet(nextStart, codeEnd);", "+\t\t\t\t\t\tprintCodeSnippet(nextStart, codeEnd, linesGap);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b7e2cc83c1d6d30c9abd06f2cc578a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeResolveTests.java", "commitBeforeChange": "ce0f19288bc3747a9c0cb27b6996f5589afb99d1", "commitAfterChange": "8aae944f1fec216ec7aa5c56aa9511065ae60c18", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void test405026b() throws CoreException, IOException", "signatureAfterChange": " public void test405026b() throws CoreException, IOException", "diff": ["-\t\titype = nameLookup.findType(\"test1\", packageFragments[0], true, NameLookup.ACCEPT_ALL, false, false);", "-\t\tassertEquals(\"test13\", itype.getElementName());", "-", "-\t\titype = nameLookup.findType(\"test1\", packageFragments[0], true, NameLookup.ACCEPT_ALL, false, true);", "-\t\tassertEquals(\"test13\", itype.getElementName());", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45b3c78f4c6d10d1552f71a5e94a07b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Buffer.java", "commitBeforeChange": "28746d11ccbd26f27de3e6f37e37aa3059c91ec1", "commitAfterChange": "cbaf16ad0859cb1637417b40466837eb3e833f00", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "\r public String toString()", "signatureAfterChange": "\r public String toString()", "diff": ["-\tbuffer.append(\"\\nFlags: \");\r", "-\tboolean previous = false;\r", "-\tif ((this.flags & F_HAS_UNSAVED_CHANGES) != 0) {\r", "-\t\tbuffer.append(\"UNSAVED CHANGES\");\r", "-\t\tprevious = true;\r", "-\t}\r", "-\tif ((this.flags & F_IS_CLOSED) != 0) {\r", "-\t\tif (previous) buffer.append(\" & \");\r", "-\t\tbuffer.append(\"CLOSED\");\r", "-\t\tprevious = true;\r", "-\t}\r", "-\tif ((this.flags & F_IS_READ_ONLY) != 0) {\r", "-\t\tif (previous) buffer.append(\" & \");\r", "-\t\tbuffer.append(\"READONLY\");\r", "-\t\tprevious = true;\r", "-\t}\r", "+\tbuffer.append(\"\\nHas unsaved changes: \" + this.hasUnsavedChanges()); //$NON-NLS-1$\r", "+\tbuffer.append(\"\\nIs readonly: \" + this.isReadOnly()); //$NON-NLS-1$\r", "+\tbuffer.append(\"\\nIs closed: \" + this.isClosed()); //$NON-NLS-1$\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91bd8d07a7bda059148d32f4bf993c6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AssertStatement.java", "commitBeforeChange": "54c5b1474818cda0f867a0315ddd797ab8dee3b6", "commitAfterChange": "b34ccb2dc96540b2cffbd4b546572f89b3d40916", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tConstant constant = assertExpression.constant;", "-\t\tif (constant != NotAConstant && constant.booleanValue() == true) {", "-\t\t\treturn flowInfo;", "-\t\t}", "-", "-\t\tFlowInfo assertInfo = flowInfo.copy();", "+\t\tFlowInfo assertInfo = assertExpression.analyseCode(currentScope, flowContext, flowInfo.copy()).unconditionalInits();", "-\t\t\tassertInfo = exceptionArgument.analyseCode(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tflowContext,", "-\t\t\t\t\t\tassertExpression.analyseCode(currentScope, flowContext, assertInfo).unconditionalInits())", "-\t\t\t\t\t.unconditionalInits();", "-\t\t} else {", "-\t\t\tassertInfo = assertExpression.analyseCode(currentScope, flowContext, assertInfo).unconditionalInits();", "+\t\t\tassertInfo = exceptionArgument.analyseCode(currentScope, flowContext, assertInfo);", "-\t\t// assertion might throw AssertionError (unchecked), which can have consequences in term of", "-\t\t// definitely assigned variables (depending on caught exception in the context)", "-\t\t// DISABLED - AssertionError is unchecked, try statements are already protected against these.", "-\t\t//flowContext.checkExceptionHandlers(currentScope.getJavaLangAssertionError(), this, assertInfo, currentScope);", "-", "-\t\t// only retain potential initializations", "-\t\tflowInfo.addPotentialInitializationsFrom(assertInfo.unconditionalInits());", "-", "-\t\t\t\t\t", "-\t\treturn flowInfo;", "+", "+\t\tFlowInfo mergedInfo = flowInfo.mergedWith(assertInfo.unconditionalInits());", "+\t\treturn mergedInfo;"]}], "num": 9056}
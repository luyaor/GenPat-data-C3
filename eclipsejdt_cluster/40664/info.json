{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "13a72c9b258e518c6df8e9049bb36d8f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae99e195ccaca60d9b703202cad6231f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "9f63437bec67bc6f1450b706ffa6a59a67485b74", "commitAfterChange": "2b5868a69a1295fe1d99f9e80995ceed273132ed", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic CastExpression(Expression expression, Expression type)", "signatureAfterChange": " public CastExpression(Expression expression, Expression type)", "diff": ["-\t//expression.implicitConversion holds the cast for baseType casting ", "-\tpublic CastExpression(Expression expression, Expression type) {", "-\t\tthis.expression = expression;", "-\t\tthis.type = type;", "-\t\ttype.bits |= IgnoreRawTypeCheck; // no need to worry about raw type usage", "-\t}", "+//expression.implicitConversion holds the cast for baseType casting ", "+public CastExpression(Expression expression, Expression type) {", "+\tthis.expression = expression;", "+\tthis.type = type;", "+\ttype.bits |= ASTNode.IgnoreRawTypeCheck; // no need to worry about raw type usage", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8b2e602c6023d47e7560ac975b9b7a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CombinedBinaryExpression.java", "commitBeforeChange": "00271ea450a08e464e158f7e4f05b195c1058507", "commitAfterChange": "c0b416aedc7957c92c0ea3ebe495003a2c5390e6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public CombinedBinaryExpression(Expression left, Expression right, int operator, \t\tint arity)", "signatureAfterChange": " public CombinedBinaryExpression(Expression left, Expression right, int operator, int arity)", "diff": ["-public CombinedBinaryExpression(Expression left, Expression right, int operator,", "-\t\tint arity) {", "+public CombinedBinaryExpression(Expression left, Expression right, int operator, int arity) {", "-\tthis.arity = arity;", "-\tif (arity > 1) {", "-\t\tthis.referencesTable = new BinaryExpression[arity];", "-\t\tthis.referencesTable[arity - 1] = (BinaryExpression) left;", "-\t\tfor (int i = arity - 1; i > 0; i--) {", "-\t\t\tthis.referencesTable[i - 1] = ", "-\t\t\t\t(BinaryExpression) this.referencesTable[i].left; ", "-\t\t}", "-\t} else {", "-\t\tthis.arityMax = defaultArityMaxStartingValue;", "-\t}", "+\tinitArity(left, arity);", "+}"]}], "num": 40664}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db20b5ec368c207240d59765f1f74953", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10bc5af0df82c8b31150198542df45f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "0f7f9d63e5fbc5d41771bd4e2e39b628130add76", "commitAfterChange": "ed4cdf5cf5dec0284dce12a661248f2f9a27a709", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 12, "signatureBeforeChange": "  private String counterString(int count)", "signatureAfterChange": " private String filterFormattingInComments(String input)", "diff": ["+}", "+private String filterFormattingInComments(String input) {", "+\tStringTokenizer tokenizer = new StringTokenizer(input, \"\\r\\n\\f\");", "+\tStringBuffer buffer = new StringBuffer();", "+\tboolean skipToken = false;", "+\tString line =  null;", "+\tlineLoop: while (tokenizer.hasMoreTokens()) {", "+\t\tif (!skipToken) {", "+\t\t\tline = tokenizer.nextToken();", "+\t\t}", "+\t\tskipToken = false;", "+\t\tint length = line.length();", "+\t\tint lineStart = 0;", "+\t\tif (length > 0) {", "+\t\t\t// Trim leading whitespaces", "+\t\t\tif (IGNORE_SPACES > 0) {", "+\t\t\t\twhile (lineStart < length && ScannerHelper.isWhitespace(line.charAt(lineStart))) {", "+\t\t\t\t\tlineStart++;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// Search if a comment starts", "+\t\t\tint commentKind = 0;", "+\t\t\tint idx = line.indexOf('/', lineStart);", "+\t\t\tif (idx >= 0 && (idx+1) < length) {", "+\t\t\t\tidx++;", "+\t\t\t\tchar ch = line.charAt(idx++);", "+\t\t\t\tswitch (ch) {", "+\t\t\t\t\tcase '/':", "+\t\t\t\t\t\tcommentKind = 1; // line comment", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase '*':", "+\t\t\t\t\t\tcommentKind = 2; // block comment", "+\t\t\t\t\t\tif (idx < length && line.charAt(idx) == '*') {", "+\t\t\t\t\t\t\tcommentKind = 3; // javadoc comment", "+\t\t\t\t\t\t\tidx++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tif (commentKind != 0) {", "+\t\t\t\t\t// Enter a comment", "+\t\t\t\t\tswitch (IGNORE_SPACES) {", "+\t\t\t\t\t\tcase ALL_COMMENTS_SPACES:", "+\t\t\t\t\t\t\tswitch (commentKind) {", "+\t\t\t\t\t\t\t\tcase 1:", "+\t\t\t\t\t\t\t\t\tint start = idx;", "+\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, start).trim());", "+\t\t\t\t\t\t\t\t\twhile (true) {", "+\t\t\t\t\t\t\t\t\t\tif (start < length) {", "+\t\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "+\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tbuffer.append(ModelTestsUtil.removeWhiteSpace(line.substring(start)));", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tline = tokenizer.nextToken();", "+\t\t\t\t\t\t\t\t\t\tlength = line.length();", "+\t\t\t\t\t\t\t\t\t\tstart = 0;", "+\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "+\t\t\t\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (start > length+1 || line.charAt(start) != '/' || line.charAt(start+1) != '/') {", "+\t\t\t\t\t\t\t\t\t\t\tbuffer.append('\\n');", "+\t\t\t\t\t\t\t\t\t\t\tskipToken = true;", "+\t\t\t\t\t\t\t\t\t\t\t// only gate to break the loop", "+\t\t\t\t\t\t\t\t\t\t\tcontinue lineLoop;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tstart += 2;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcase 2:", "+\t\t\t\t\t\t\t\tcase 3:", "+\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, idx).trim());", "+\t\t\t\t\t\t\t\t\tint endComment = line.indexOf(\"*/\");", "+\t\t\t\t\t\t\t\t\tif (endComment > 0) {", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(ModelTestsUtil.removeWhiteSpace(line.substring(0, endComment + 2)));", "+\t\t\t\t\t\t\t\t\t\tline = line.substring(endComment+2);", "+\t\t\t\t\t\t\t\t\t\tskipToken = true;", "+\t\t\t\t\t\t\t\t\t\tcontinue lineLoop;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\twhile (endComment < 0) {", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(ModelTestsUtil.removeWhiteSpace(line));", "+\t\t\t\t\t\t\t\t\t\tline = tokenizer.nextToken();", "+\t\t\t\t\t\t\t\t\t\tendComment = line.indexOf(\"*/\");", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbuffer.append(ModelTestsUtil.removeWhiteSpace(line.substring(0, endComment + 2)));", "+\t\t\t\t\t\t\t\t\tbuffer.append('\\n');", "+\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase ALL_COMMENTS_LINES_LEADING_SPACES:", "+\t\t\t\t\t\t\tswitch (commentKind) {", "+\t\t\t\t\t\t\t\tcase 1:", "+\t\t\t\t\t\t\t\t\tint start = idx;", "+\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, start).trim());", "+\t\t\t\t\t\t\t\t\twhile (true) {", "+\t\t\t\t\t\t\t\t\t\tif (start < length) {", "+\t\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "+\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tif (start < length) {", "+\t\t\t\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(start));", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tline = tokenizer.nextToken();", "+\t\t\t\t\t\t\t\t\t\tlength = line.length();", "+\t\t\t\t\t\t\t\t\t\tstart = 0;", "+\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "+\t\t\t\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (start < length && (line.charAt(start) != '/' || line.charAt(start+1) != '/')) {", "+\t\t\t\t\t\t\t\t\t\t\tbuffer.append('\\n');", "+\t\t\t\t\t\t\t\t\t\t\tskipToken = true;", "+\t\t\t\t\t\t\t\t\t\t\t// only gate to break the loop", "+\t\t\t\t\t\t\t\t\t\t\tcontinue lineLoop;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\t\t\tstart += 2; // skip next line starting comment", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcase 3:", "+\t\t\t\t\t\t\t\tcase 2:", "+\t\t\t\t\t\t\t\t\tstart = idx;", "+\t\t\t\t\t\t\t\t\tint endComment = line.indexOf(\"*/\");", "+\t\t\t\t\t\t\t\t\tif (endComment > 0) {", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, endComment + 2));", "+\t\t\t\t\t\t\t\t\t\tline = line.substring(endComment+2);", "+\t\t\t\t\t\t\t\t\t\tskipToken = true;", "+\t\t\t\t\t\t\t\t\t\tcontinue lineLoop;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, start).trim());", "+\t\t\t\t\t\t\t\t\twhile (endComment < 0) {", "+\t\t\t\t\t\t\t\t\t\tif (start < length) {", "+\t\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "+\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tif (start < length && ch == '*') {", "+\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tif (start < length) {", "+\t\t\t\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(start));", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tline = tokenizer.nextToken();", "+\t\t\t\t\t\t\t\t\t\tlength = line.length();", "+\t\t\t\t\t\t\t\t\t\tendComment = line.indexOf(\"*/\");", "+\t\t\t\t\t\t\t\t\t\tstart = 0;", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, endComment + 2));", "+\t\t\t\t\t\t\t\t\tbuffer.append('\\n');", "+\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (length > 0 && lineStart > 0 && lineStart < length) {", "+\t\t\tbuffer.append(line.substring(lineStart).trim());", "+\t\t} else {", "+\t\t\tbuffer.append(line);", "+\t\t}", "+\t\tbuffer.append('\\n');", "+\t}", "+    return buffer.toString();", "-", "-private String counterString(int count) {", "-\tint reminder = count%10;", "-\tStringBuffer buffer = new StringBuffer();", "-\tbuffer.append(count);", "-\tswitch (reminder) {", "-\t\tcase 1:", "-\t\t\tbuffer.append(\"st\");", "-\t\t\tbreak;", "-\t\tcase 2:", "-\t\t\tbuffer.append(\"nd\");", "-\t\t\tbreak;", "-\t\tcase 3:", "-\t\t\tbuffer.append(\"rd\");", "-\t\t\tbreak;", "-\t\tdefault:", "-\t\t\tbuffer.append(\"th\");", "-\t\t\tbreak;", "-\t}", "-\treturn buffer.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e474fd664f9e1439ddbaee338022f67c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "881da43b7e0b2ca5798e9c55f57054ccdaa23c6e", "commitAfterChange": "be760997ffe69084a7c4bd4d1ab81289e2452d86", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 17, "signatureBeforeChange": " private String filterFormattingInComments(String input)", "signatureAfterChange": " private String[] formattedComments(String source, boolean old)", "diff": ["-private String filterFormattingInComments(String input) {", "-\tStringTokenizer tokenizer = new StringTokenizer(input, \"\\r\\n\\f\");", "-\tStringBuffer buffer = new StringBuffer();", "-\tboolean skipToken = false;", "-\tString line =  null;", "-\tlineLoop: while (tokenizer.hasMoreTokens()) {", "-\t\tif (!skipToken) {", "-\t\t\tline = tokenizer.nextToken();", "-\t\t}", "-\t\tskipToken = false;", "-\t\tint length = line.length();", "-\t\tint lineStart = 0;", "-\t\tif (length > 0) {", "-\t\t\t// Trim leading whitespaces", "-\t\t\tif (IGNORE_SPACES > 0) {", "-\t\t\t\twhile (lineStart < length && ScannerHelper.isWhitespace(line.charAt(lineStart))) {", "-\t\t\t\t\tlineStart++;", "+private String[] formattedComments(String source, boolean old) {", "+\tboolean enableNewCommentFormatter = DefaultCodeFormatter.ENABLE_NEW_COMMENTS_FORMAT;", "+\ttry {", "+\t\tDefaultCodeFormatter.ENABLE_NEW_COMMENTS_FORMAT = !old;", "+\t\tDefaultCodeFormatter codeFormatter = codeFormatter();", "+\t\tScanner scanner = new Scanner(true, true, false/*nls*/, ClassFileConstants.JDK1_4/*sourceLevel*/, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "+\t\tCodeSnippetParsingUtil codeSnippetParsingUtil = new CodeSnippetParsingUtil();", "+\t\tCompilationUnitDeclaration compilationUnitDeclaration = codeSnippetParsingUtil.parseCompilationUnit(source.toCharArray(), getDefaultCompilerOptions(), true);", "+\t\tfinal TypeDeclaration[] types = compilationUnitDeclaration.types;", "+\t\tint headerEndPosition = types == null ? compilationUnitDeclaration.sourceEnd : types[0].declarationSourceStart;", "+\t\tscanner.setSource(source.toCharArray());", "+\t\tscanner.lineEnds = codeSnippetParsingUtil.recordedParsingInformation.lineEnds;", "+\t\tint[][] commentsPositions = compilationUnitDeclaration.comments;", "+\t\tint length = commentsPositions == null ? 0 : commentsPositions.length;", "+\t\tString[] formattedComments = new String[length];", "+\t\tfor (int i=0; i<length; i++) {", "+\t\t\tint[] positions = commentsPositions[i];", "+\t\t\tint commentKind = CodeFormatter.K_JAVA_DOC;", "+\t\t\tint commentStart = positions [0];", "+\t\t\tint commentEnd = positions [1];", "+\t\t\tif (commentEnd < 0) { // line or block comments have negative end position", "+\t\t\t\tcommentEnd = -commentEnd;", "+\t\t\t\tif (commentStart > 0) { // block comments have positive start position", "+\t\t\t\t\tcommentKind = CodeFormatter.K_MULTI_LINE_COMMENT;", "+\t\t\t\t} else {", "+\t\t\t\t\tcommentStart = -commentStart;", "+\t\t\t\t\tcommentKind = CodeFormatter.K_SINGLE_LINE_COMMENT;", "-\t\t\t// Search if a comment starts", "-\t\t\tint commentKind = 0;", "-\t\t\tint idx = line.indexOf('/', lineStart);", "-\t\t\tif (idx >= 0 && (idx+1) < length) {", "-\t\t\t\tidx++;", "-\t\t\t\tchar ch = line.charAt(idx++);", "-\t\t\t\tswitch (ch) {", "-\t\t\t\t\tcase '/':", "-\t\t\t\t\t\tcommentKind = 1; // line comment", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase '*':", "-\t\t\t\t\t\tcommentKind = 2; // block comment", "-\t\t\t\t\t\tif (idx < length && line.charAt(idx) == '*') {", "-\t\t\t\t\t\t\tcommentKind = 3; // javadoc comment", "-\t\t\t\t\t\t\tidx++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tif (commentKind != 0) {", "-\t\t\t\t\t// Enter a comment", "-\t\t\t\t\tswitch (IGNORE_SPACES) {", "-\t\t\t\t\t\tcase ALL_COMMENTS_SPACES:", "-\t\t\t\t\t\t\tswitch (commentKind) {", "-\t\t\t\t\t\t\t\tcase 1:", "-\t\t\t\t\t\t\t\t\tint start = idx;", "-\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, start).trim());", "-\t\t\t\t\t\t\t\t\twhile (true) {", "-\t\t\t\t\t\t\t\t\t\tif (start < length) {", "-\t\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "-\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\tbuffer.append(ModelTestsUtil.removeWhiteSpace(line.substring(start)));", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tline = tokenizer.nextToken();", "-\t\t\t\t\t\t\t\t\t\tlength = line.length();", "-\t\t\t\t\t\t\t\t\t\tstart = 0;", "-\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "-\t\t\t\t\t\t\t\t\t\t\tstart++;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tif (start > length+1 || line.charAt(start) != '/' || line.charAt(start+1) != '/') {", "-\t\t\t\t\t\t\t\t\t\t\tbuffer.append('\\n');", "-\t\t\t\t\t\t\t\t\t\t\tskipToken = true;", "-\t\t\t\t\t\t\t\t\t\t\t// only gate to break the loop", "-\t\t\t\t\t\t\t\t\t\t\tcontinue lineLoop;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tstart += 2;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcase 2:", "-\t\t\t\t\t\t\t\tcase 3:", "-\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, idx).trim());", "-\t\t\t\t\t\t\t\t\tint endComment = line.indexOf(\"*/\");", "-\t\t\t\t\t\t\t\t\tif (endComment > 0) {", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(ModelTestsUtil.removeWhiteSpace(line.substring(0, endComment + 2)));", "-\t\t\t\t\t\t\t\t\t\tline = line.substring(endComment+2);", "-\t\t\t\t\t\t\t\t\t\tskipToken = true;", "-\t\t\t\t\t\t\t\t\t\tcontinue lineLoop;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\twhile (endComment < 0) {", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(ModelTestsUtil.removeWhiteSpace(line));", "-\t\t\t\t\t\t\t\t\t\tline = tokenizer.nextToken();", "-\t\t\t\t\t\t\t\t\t\tendComment = line.indexOf(\"*/\");", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tbuffer.append(ModelTestsUtil.removeWhiteSpace(line.substring(0, endComment + 2)));", "-\t\t\t\t\t\t\t\t\tbuffer.append('\\n');", "-\t\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase ALL_COMMENTS_LINES_LEADING_SPACES:", "-\t\t\t\t\t\t\tswitch (commentKind) {", "-\t\t\t\t\t\t\t\tcase 1:", "-\t\t\t\t\t\t\t\t\tint start = idx;", "-\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, start).trim());", "-\t\t\t\t\t\t\t\t\twhile (true) {", "-\t\t\t\t\t\t\t\t\t\tif (start < length) {", "-\t\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "-\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\tif (start < length) {", "-\t\t\t\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(start));", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tline = tokenizer.nextToken();", "-\t\t\t\t\t\t\t\t\t\tlength = line.length();", "-\t\t\t\t\t\t\t\t\t\tstart = 0;", "-\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "-\t\t\t\t\t\t\t\t\t\t\tstart++;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tif (start < length && (line.charAt(start) != '/' || line.charAt(start+1) != '/')) {", "-\t\t\t\t\t\t\t\t\t\t\tbuffer.append('\\n');", "-\t\t\t\t\t\t\t\t\t\t\tskipToken = true;", "-\t\t\t\t\t\t\t\t\t\t\t// only gate to break the loop", "-\t\t\t\t\t\t\t\t\t\t\tcontinue lineLoop;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "-\t\t\t\t\t\t\t\t\t\tstart += 2; // skip next line starting comment", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcase 3:", "-\t\t\t\t\t\t\t\tcase 2:", "-\t\t\t\t\t\t\t\t\tstart = idx;", "-\t\t\t\t\t\t\t\t\tint endComment = line.indexOf(\"*/\");", "-\t\t\t\t\t\t\t\t\tif (endComment > 0) {", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, endComment + 2));", "-\t\t\t\t\t\t\t\t\t\tline = line.substring(endComment+2);", "-\t\t\t\t\t\t\t\t\t\tskipToken = true;", "-\t\t\t\t\t\t\t\t\t\tcontinue lineLoop;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, start).trim());", "-\t\t\t\t\t\t\t\t\twhile (endComment < 0) {", "-\t\t\t\t\t\t\t\t\t\tif (start < length) {", "-\t\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "-\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\tif (start < length && ch == '*') {", "-\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "-\t\t\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "-\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\tif (start < length) {", "-\t\t\t\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(start));", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tline = tokenizer.nextToken();", "-\t\t\t\t\t\t\t\t\t\tlength = line.length();", "-\t\t\t\t\t\t\t\t\t\tendComment = line.indexOf(\"*/\");", "-\t\t\t\t\t\t\t\t\t\tstart = 0;", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, endComment + 2));", "-\t\t\t\t\t\t\t\t\tbuffer.append('\\n');", "-\t\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\tif (commentStart >= headerEndPosition) {", "+\t\t\t\tint indentationLevel = getIndentationLevel(scanner, commentStart);", "+\t\t\t\tformattedComments[i] = runFormatter(codeFormatter, source.substring(commentStart, commentEnd), commentKind, indentationLevel, 0, commentEnd - commentStart, LINE_SEPARATOR);", "-\t\tif (length > 0 && lineStart > 0 && lineStart < length) {", "-\t\t\tbuffer.append(line.substring(lineStart).trim());", "-\t\t} else {", "-\t\t\tbuffer.append(line);", "-\t\t}", "-\t\tbuffer.append('\\n');", "+\t\treturn formattedComments;", "-    return buffer.toString();", "+\tfinally {", "+\t\tDefaultCodeFormatter.ENABLE_NEW_COMMENTS_FORMAT = enableNewCommentFormatter;", "+\t}"]}], "num": 57346}
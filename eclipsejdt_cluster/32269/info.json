{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef7b263b21e9373b13ce6b7067b3e918", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8210171fa8672467b4d6692597f13b92", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "68db0a50107f072688f40bcdb70cc1c2cadc3119", "commitAfterChange": "7c0be3631ccaa5ae2d50fbe318ed50c01164d856", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic static void copySE8AnnotationsToType(BlockScope scope, Binding recipient, Annotation[] annotations)", "signatureAfterChange": " \tpublic static void copySE8AnnotationsToType(BlockScope scope, Binding recipient, Annotation[] annotations)", "diff": ["-\t\t\t\t\t\tif (Annotation.isTypeUseCompatible(local.declaration.type, scope)) { // discard hybrid annotations on package qualified types.", "+\t\t\t\t\t\tTypeReference typeRef = local.declaration.type;", "+\t\t\t\t\t\tif (Annotation.isTypeUseCompatible(typeRef, scope)) { // discard hybrid annotations on package qualified types.", "-\t\t\t\t\t\t\tfinal TypeBinding localType = local.type;", "-\t\t\t\t\t\t\tlong prevNullBits = localType.tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\t\t\tif (se8nullBits != 0 && prevNullBits != se8nullBits && ((prevNullBits | se8nullBits) == TagBits.AnnotationNullMASK)) {", "-\t\t\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(se8NullAnnotation);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tTypeBinding oldLeafType = localType.leafComponentType();", "-\t\t\t\t\t\t\tAnnotationBinding [][] goodies = new AnnotationBinding[local.declaration.type.getAnnotatableLevels()][];", "-\t\t\t\t\t\t\tgoodies[0] = se8Annotations;  // @T X.Y.Z local; ==> @T should annotate X", "-\t\t\t\t\t\t\tTypeBinding newLeafType = scope.environment().createAnnotatedType(oldLeafType, goodies);", "-\t\t\t\t\t\t\tlocal.type = localType.isArrayType() ? scope.environment().createArrayType(newLeafType, localType.dimensions(), localType.getTypeAnnotations()) : newLeafType;", "+\t\t\t\t\t\t\tlocal.type = mergeAnnotationsIntoType(scope, se8Annotations, se8nullBits, se8NullAnnotation, typeRef, local.type);", "-\t\t\t\t\t\t\tTypeBinding fieldType = field.type;", "-\t\t\t\t\t\t\tlong prevNullBits = fieldType.tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\t\t\tif (se8nullBits != 0 && prevNullBits != se8nullBits && ((prevNullBits | se8nullBits) == TagBits.AnnotationNullMASK)) {", "-\t\t\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(se8NullAnnotation);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tTypeBinding oldLeafType = fieldType.leafComponentType();", "-\t\t\t\t\t\t\tAnnotationBinding [][] goodies = new AnnotationBinding[fieldDeclaration.type.getAnnotatableLevels()][];", "-\t\t\t\t\t\t\tgoodies[0] = se8Annotations; // @T X.Y.Z field; ==> @T should annotate X", "-\t\t\t\t\t\t\tTypeBinding newLeafType = scope.environment().createAnnotatedType(oldLeafType, goodies);", "-\t\t\t\t\t\t\tfield.type = fieldType.isArrayType() ? scope.environment().createArrayType(newLeafType, fieldType.dimensions(), fieldType.getTypeAnnotations()) : newLeafType;", "+\t\t\t\t\t\t\tfield.type = mergeAnnotationsIntoType(scope, se8Annotations, se8nullBits, se8NullAnnotation, fieldDeclaration.type, field.type);", "-\t\t\t\t\t\t\t\tfinal TypeBinding returnType = method.returnType;", "-\t\t\t\t\t\t\t\tlong prevNullBits = returnType.tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\t\t\t\tif (se8nullBits != 0 && prevNullBits != se8nullBits && ((prevNullBits | se8nullBits) == TagBits.AnnotationNullMASK)) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(se8NullAnnotation);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tTypeBinding oldLeafType = returnType.leafComponentType();", "-\t\t\t\t\t\t\t\tAnnotationBinding [][] goodies = new AnnotationBinding[methodDecl.returnType.getAnnotatableLevels()][];", "-\t\t\t\t\t\t\t\tgoodies[0] = se8Annotations;", "-\t\t\t\t\t\t\t\tTypeBinding newLeafType = scope.environment().createAnnotatedType(oldLeafType, goodies);", "-\t\t\t\t\t\t\t\tmethod.returnType = returnType.isArrayType() ? scope.environment().createArrayType(newLeafType, returnType.dimensions(), returnType.getTypeAnnotations()) : newLeafType;", "+\t\t\t\t\t\t\t\tmethod.returnType = mergeAnnotationsIntoType(scope, se8Annotations, se8nullBits, se8NullAnnotation, methodDecl.returnType, method.returnType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6a778f3926b21b176cd09ba05cd466a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void dup2_x2()", "signatureAfterChange": " public ExceptionMarker[] getExceptionMarkers()", "diff": ["-}", "-public void dup2_x2() {", "-    super.dup2_x2();", "-    int numberOfStackItems = this.currentFrame.numberOfStackItems;", "-    if (numberOfStackItems >= 2) {", "-        VerificationTypeInfo info = this.currentFrame.stackItems[numberOfStackItems - 1];", "-        this.currentFrame.numberOfStackItems--;", "-        VerificationTypeInfo info2 = this.currentFrame.stackItems[this.currentFrame.numberOfStackItems - 1];", "-        this.currentFrame.numberOfStackItems--;", "-        switch(info.id()) {", "-            case TypeIds.T_long :", "-            case TypeIds.T_double :", "-                switch(info2.id()) {", "-                    case TypeIds.T_long :", "-                    case TypeIds.T_double :", "-                        // form 4", "-                        this.currentFrame.addStackItem(info);", "-                        this.currentFrame.addStackItem(info2);", "-                        this.currentFrame.addStackItem(info);", "-                        break;", "-                    default:", "-                        // form 2", "-                        numberOfStackItems = this.currentFrame.numberOfStackItems;", "-                        if (numberOfStackItems >= 1) {", "-                            VerificationTypeInfo info3 = this.currentFrame.stackItems[numberOfStackItems - 1];", "-                            this.currentFrame.numberOfStackItems--;", "-                            this.currentFrame.addStackItem(info);", "-                            this.currentFrame.addStackItem(info3);", "-                            this.currentFrame.addStackItem(info2);", "-                            this.currentFrame.addStackItem(info);", "-                        }", "-                }", "-                break;", "-            default:", "-                numberOfStackItems = this.currentFrame.numberOfStackItems;", "-                if (numberOfStackItems >= 1) {", "-                    VerificationTypeInfo info3 = this.currentFrame.stackItems[numberOfStackItems - 1];", "-                    this.currentFrame.numberOfStackItems--;", "-                    switch(info3.id()) {", "-                        case TypeIds.T_long :", "-                        case TypeIds.T_double :", "-                            // form 3", "-                            this.currentFrame.addStackItem(info2);", "-                            this.currentFrame.addStackItem(info);", "-                            this.currentFrame.addStackItem(info3);", "-                            this.currentFrame.addStackItem(info2);", "-                            this.currentFrame.addStackItem(info);", "-                            break;", "-                        default:", "-                            // form 1", "-                            numberOfStackItems = this.currentFrame.numberOfStackItems;", "-                            if (numberOfStackItems >= 1) {", "-                                VerificationTypeInfo info4 = this.currentFrame.stackItems[numberOfStackItems - 1];", "-                                this.currentFrame.numberOfStackItems--;", "-                                this.currentFrame.addStackItem(info2);", "-                                this.currentFrame.addStackItem(info);", "-                                this.currentFrame.addStackItem(info4);", "-                                this.currentFrame.addStackItem(info3);", "-                                this.currentFrame.addStackItem(info2);", "-                                this.currentFrame.addStackItem(info);", "-                            }", "-                    }", "-                }", "-        }", "-    }", "-}", "+public ExceptionMarker[] getExceptionMarkers() {", "+\tSet exceptionMarkerSet = this.exceptionMarkers;", "+\tif (this.exceptionMarkers == null) return null;", "+\tint size = exceptionMarkerSet.size();", "+\tExceptionMarker[] markers = new ExceptionMarker[size];", "+\tint n = 0;", "+\tfor (Iterator iterator = exceptionMarkerSet.iterator(); iterator.hasNext(); ) {", "+\t\tmarkers[n++] = (ExceptionMarker) iterator.next();", "+\t}", "+\tArrays.sort(markers);", "+//  System.out.print('[');", "+//  for (int n = 0; n < size; n++) {", "+//  \tif (n != 0) System.out.print(',');", "+//  \tSystem.out.print(positions[n]);", "+//  }", "+//  System.out.println(']');", "+\treturn markers;", "+}"]}], "num": 32269}
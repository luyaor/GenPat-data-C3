{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0eb6b7687755a51862632db0bf504a0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6318d37280cbffd8f3707c6206478741", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/TypeAnnotationWalker.java", "commitBeforeChange": "8d3c2646ec0224ab936125ae7e1adde5786e1231", "commitAfterChange": "dfa40837336948a1f985e74dddef96333913f44c", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static TypeAnnotationWalker create(IBinaryMethod method)", "signatureAfterChange": " \t\tpublic TypeAnnotationWalker toField()", "diff": ["+\t\tpublic TypeAnnotationWalker toField() { return this; }", "-\t/** Answer a walker for the type annotations of the given method initialized to the root of the tree. */", "-\tpublic static TypeAnnotationWalker create(IBinaryMethod method) {", "-\t\tif (method instanceof MethodInfoWithAnnotations)", "-\t\t\treturn create(((MethodInfoWithAnnotations) method).getTypeAnnotations());", "-\t\treturn EMPTY_ANNOTATION_WALKER;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc0c9c91cbca97489f9c6013494d5e47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FakedTrackingVariable.java", "commitBeforeChange": "ade181db7356e902754c81dd9d71430c049ed0c1", "commitAfterChange": "c3fe471c0fdcefebf95bb7bbebd413b0a2c46646", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tpublic void resetReportingBits()", "signatureAfterChange": "  \tpublic void withDraw()", "diff": ["+\tpublic void withDraw() {", "+\t\t// must unregister at the declaringScope, note that twr resources are owned by the scope enclosing the twr", "+\t\tthis.originalBinding.declaringScope.removeTrackingVar(this);", "+\t}", "-", "-\tpublic void resetReportingBits() {", "-\t\tFakedTrackingVariable current = this;", "-\t\tdo {", "-\t\t\tcurrent.globalClosingState &= ~(REPORTED_POTENTIAL_LEAK|REPORTED_DEFINITIVE_LEAK);", "-\t\t\tcurrent = current.innerTracker;", "-\t\t} while (current != null);"]}], "num": 32939}
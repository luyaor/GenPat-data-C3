{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a663b0f55e308d8cfd6ec118f48071b8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "095bada2bf8686692ca8738031ff412d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "dfb3637702f1e682e6ee6d2d1c5b6ed54a2efc28", "commitAfterChange": "40fae5391d4f13359de5727f38342f6b018e40a2", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " boolean doParametersClash(MethodBinding one, MethodBinding substituteTwo)", "signatureAfterChange": " boolean doParametersClash(MethodBinding one, MethodBinding substituteTwo)", "diff": ["-\t\tif (!oneParams[i].leafComponentType().isParameterizedType()) continue;", "-", "-\t\tif (!twoParams[i].leafComponentType().isParameterizedType()", "-\t\t\t|| !oneParams[i].isEquivalentTo(twoParams[i])", "-\t\t\t|| !twoParams[i].isEquivalentTo(oneParams[i])) {", "-\t\t\t\treturn true;", "+\t\tswitch (oneParams[i].leafComponentType().kind()) {", "+\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\tif (!twoParams[i].leafComponentType().isParameterizedType()", "+\t\t\t\t\t|| !oneParams[i].isEquivalentTo(twoParams[i])", "+\t\t\t\t\t|| !twoParams[i].isEquivalentTo(oneParams[i])) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\treturn true; // type variables must be identical (due to substitution) given their erasures are equal", "+\t\tif (twoParams[i].leafComponentType().isTypeVariable())", "+\t\t\treturn true; // type variables must be identical (due to substitution) given their erasures are equal"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab24316630697bab3d574b7c3dca3e72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBinaryType.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 17, "signatureBeforeChange": " public String toString()", "signatureAfterChange": " public String toString()", "diff": ["-\tif (this.isClass()) {", "-\t\tbuffer.append(\"class \"); //$NON-NLS-1$", "-\t} else {", "-\t\tbuffer.append(\"interface \"); //$NON-NLS-1$", "+\tswitch (this.kind) {", "+\t\tcase IGenericType.CLASS :", "+\t\t\tbuffer.append(\"class \"); //$NON-NLS-1$", "+\t\t\tbreak;\t\t", "+\t\tcase IGenericType.INTERFACE :", "+\t\t\tbuffer.append(\"interface \"); //$NON-NLS-1$", "+\t\t\tbreak;\t\t", "+\t\tcase IGenericType.ENUM :", "+\t\t\tbuffer.append(\"enum \"); //$NON-NLS-1$", "+\t\t\tbreak;\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c02b942e25a9c193b81599c7509004ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "35e70cc8286d226408a60255fde5d4f8a4a2587e", "commitAfterChange": "16dc279389affb939d2e82688b164459d3ba1ba5", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public boolean isTypeArgumentContainedBy(TypeBinding otherType)", "signatureAfterChange": " public boolean isTypeArgumentContainedBy(TypeBinding otherType)", "diff": ["-\t\t\tif (isWildcard()) {", "-\t\t\t\tWildcardBinding wildcard = (WildcardBinding) this;", "-\t\t\t\tswitch(wildcard.boundKind) {", "-\t\t\t\t\tcase Wildcard.EXTENDS :", "-\t\t\t\t\t\tupperBound = wildcard.bound;", "-\t\t\t\t\t\tlowerBound = null;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Wildcard. SUPER :", "-\t\t\t\t\t\tupperBound = wildcard;", "-\t\t\t\t\t\tlowerBound = wildcard.bound;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Wildcard.UNBOUND :", "-\t\t\t\t\t\tupperBound = wildcard;", "-\t\t\t\t\t\tlowerBound = null;", "-\t\t\t\t}", "+\t\t\tswitch (this.kind()) {", "+\t\t\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\t\t\tWildcardBinding wildcard = (WildcardBinding) this;", "+\t\t\t\t\tswitch(wildcard.boundKind) {", "+\t\t\t\t\t\tcase Wildcard.EXTENDS :", "+\t\t\t\t\t\t\tupperBound = wildcard.bound;", "+\t\t\t\t\t\t\tlowerBound = null;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard. SUPER :", "+\t\t\t\t\t\t\tupperBound = wildcard;", "+\t\t\t\t\t\t\tlowerBound = wildcard.bound;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard.UNBOUND :", "+\t\t\t\t\t\t\tupperBound = wildcard;", "+\t\t\t\t\t\t\tlowerBound = null;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\tif (this.isCapture()) {", "+\t\t\t\t\t\tCaptureBinding capture = (CaptureBinding) this;", "+\t\t\t\t\t\tif (capture.lowerBound != null) lowerBound = capture.lowerBound;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0074ac824d8ed3f12203b813d66494b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "f4d4be55e968e477e7c436ce0596846de86cd8b3", "commitAfterChange": "c971e90f6253c316742413b3a46478447b02a85a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint)", "diff": ["-\t\tif (otherType == NullBinding) return;", "-\t", "-\t\tif (otherType.isBaseType()) {", "-\t\t\tTypeBinding boxedType = scope.environment().computeBoxingType(otherType);", "-\t\t\tif (boxedType == otherType) return;", "-\t\t\totherType = boxedType;", "+\t\tswitch (otherType.kind()) {", "+\t\t\tcase Binding.BASE_TYPE :", "+\t\t\t\tif (otherType == NullBinding) return;", "+\t\t\t\tTypeBinding boxedType = scope.environment().computeBoxingType(otherType);", "+\t\t\t\tif (boxedType == otherType) return;", "+\t\t\t\totherType = boxedType;", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\t\tWildcardBinding otherWildcard = (WildcardBinding) otherType;", "+\t\t\t\tif (otherWildcard.otherBounds != null) break; // intersection type", "+\t\t\t\treturn; // wildcards are not true type expressions (JLS 15.12.2.7, p.453 2nd discussion)", "-\t\t", "+\t"]}], "num": 47079}
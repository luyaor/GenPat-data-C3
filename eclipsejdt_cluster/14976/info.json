{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b95eee2cab57835762d2a4e4dc751bc", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eda8e9918b30044873b9a4ced5fac1c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java", "commitBeforeChange": "0c1031dc99b8e81cf01eb44654df70a3a43c366b", "commitAfterChange": "0152abc28edcc4a573ec9a97fc7435fb0ce8bfda", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r private Object[] computeNonJavaResources(JavaProject project)", "signatureAfterChange": "\r private Object[] computeNonJavaResources(JavaProject project)", "diff": ["+\t// determine if src == project and/or if bin == project\r", "+\tIPath projectPath = project.getProject().getFullPath();\r", "+\tboolean srcIsProject = false;\r", "+\tboolean binIsProject = false;\r", "+\ttry {\r", "+\t\tIClasspathEntry[] classpath = project.getResolvedClasspath(true);\r", "+\t\tfor (int i = 0; i < classpath.length; i++) {\r", "+\t\t\tIClasspathEntry entry = classpath[i];\r", "+\t\t\tif (projectPath.equals(entry.getPath())) {\r", "+\t\t\t\tsrcIsProject = true;\r", "+\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tbinIsProject = projectPath.equals(project.getOutputLocation());\r", "+\t} catch (JavaModelException e) {\r", "+\t\t// ignore\r", "+\t}\r", "+\t\r", "-\t\t\t\t\tString extension = res.getProjectRelativePath().getFileExtension();\r", "+\t\t\t\t\t\tString extension = res.getFileExtension();\r", "+\t\t\t\t\t\tif (extension != null) extension = extension.toLowerCase();\r", "+\t\t\t\t\t\t// ignore .java file if src == project\r", "+\t\t\t\t\t\tif (srcIsProject && \"java\".equals(extension)) { //$NON-NLS-1$\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t// ignore .class file if bin == project\r", "+\t\t\t\t\t\tif (binIsProject && \"class\".equals(extension)) { //$NON-NLS-1$\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t// else add non java resource\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f292987912809756f91e17b50fa4cd5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " \tpublic boolean isOnClasspath(IJavaElement element)", "signatureAfterChange": " \tpublic boolean isOnClasspath(IJavaElement element)", "diff": ["+\t\tIClasspathEntry[] classpath;", "+\t\ttry {", "+\t\t\tclasspath = this.getResolvedClasspath(true/*ignore unresolved variable*/);", "+\t\t} catch(JavaModelException e){", "+\t\t\treturn false; // not a Java project", "+\t\t}", "+\t\tboolean isFolderPath = false;", "-\t\t\t\tif (!((IPackageFragmentRoot)element).isArchive()) {", "-\t\t\t\t\t// ensure that folders are only excluded if all of their children are excluded", "-\t\t\t\t\tpath = path.append(\"*\"); //$NON-NLS-1$", "+\t\t\t\t// package fragment roots must match exactly entry pathes (no exclusion there)", "+\t\t\t\tfor (int i = 0; i < classpath.length; i++) {", "+\t\t\t\t\tIClasspathEntry entry = classpath[i];", "+\t\t\t\t\tIPath entryPath = entry.getPath();", "+\t\t\t\t\tif (entryPath.equals(path)) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\t\t\treturn false;", "+\t\t\t\t", "-\t\t\t\t\tpath = path.append(\"*\"); //$NON-NLS-1$", "+\t\t\t\t\tisFolderPath = true;", "-\t\treturn this.isOnClasspath(path);", "+\t\tfor (int i = 0; i < classpath.length; i++) {", "+\t\t\tIClasspathEntry entry = classpath[i];", "+\t\t\tIPath entryPath = entry.getPath();", "+\t\t\tif (entryPath.isPrefixOf(path) ", "+\t\t\t\t\t&& !Util.isExcluded(path, ((ClasspathEntry)entry).fullInclusionPatternChars(), ((ClasspathEntry)entry).fullExclusionPatternChars(), isFolderPath)) {", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t}", "+\t\treturn false;"]}], "num": 14976}
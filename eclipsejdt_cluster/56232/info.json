{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de2fa5474615c8f6c92dc314c2e1b5a5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25802987ce93455b17ce6bc800e35474", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "a05a975af5c0bba95d0d398d2bd3a368d9cd616f", "commitAfterChange": "3a562aaf09f9f323b583086b80b4683378886606", "methodNumberBeforeChange": 212, "methodNumberAfterChange": 212, "signatureBeforeChange": " final public void ldc(String constant)", "signatureAfterChange": " final public void ldc(String constant)", "diff": ["-\t\t\ttry {", "-\t\t\t\tposition++;", "-\t\t\t\tbCodeStream[classFileOffset++] = OPC_ldc_w;", "-\t\t\t} catch (IndexOutOfBoundsException e) {", "-\t\t\t\tresizeByteArray(OPC_ldc_w);", "+\t\t\tif (classFileOffset + 2 >= bCodeStream.length) {", "+\t\t\t\tresizeByteArray();", "+\t\t\tposition++;", "+\t\t\tbCodeStream[classFileOffset++] = OPC_ldc_w;", "-\t\t\ttry {", "-\t\t\t\tposition++;", "-\t\t\t\tbCodeStream[classFileOffset++] = OPC_ldc;", "-\t\t\t} catch (IndexOutOfBoundsException e) {", "-\t\t\t\tresizeByteArray(OPC_ldc);", "+\t\t\tif (classFileOffset + 1 >= bCodeStream.length) {", "+\t\t\t\tresizeByteArray();", "-\t\t\twriteUnsignedByte(index);", "+\t\t\tposition += 2;", "+\t\t\tbCodeStream[classFileOffset++] = OPC_ldc;", "+\t\t\tbCodeStream[classFileOffset++] = (byte) index;", "-\t\t\ttry {", "-\t\t\t\tposition++;", "-\t\t\t\tbCodeStream[classFileOffset++] = OPC_ldc_w;", "-\t\t\t} catch (IndexOutOfBoundsException e) {", "-\t\t\t\tresizeByteArray(OPC_ldc_w);", "+\t\t\tif (classFileOffset + 2 >= bCodeStream.length) {", "+\t\t\t\tresizeByteArray();", "+\t\t\tposition++;", "+\t\t\tbCodeStream[classFileOffset++] = OPC_ldc_w;", "-\t\t\ttry {", "-\t\t\t\tposition++;", "-\t\t\t\tbCodeStream[classFileOffset++] = OPC_ldc;", "-\t\t\t} catch (IndexOutOfBoundsException e) {", "-\t\t\t\tresizeByteArray(OPC_ldc);", "+\t\t\tif (classFileOffset + 1 >= bCodeStream.length) {", "+\t\t\t\tresizeByteArray();", "-\t\t\twriteUnsignedByte(index);", "+\t\t\tposition += 2;", "+\t\t\tbCodeStream[classFileOffset++] = OPC_ldc;", "+\t\t\tbCodeStream[classFileOffset++] = (byte) index;", "-\t\t\t\ttry {", "-\t\t\t\t\tposition++;", "-\t\t\t\t\tbCodeStream[classFileOffset++] = OPC_ldc_w;", "-\t\t\t\t} catch (IndexOutOfBoundsException e) {", "-\t\t\t\t\tresizeByteArray(OPC_ldc_w);", "+\t\t\t\tif (classFileOffset + 2 >= bCodeStream.length) {", "+\t\t\t\t\tresizeByteArray();", "+\t\t\t\tposition++;", "+\t\t\t\tbCodeStream[classFileOffset++] = OPC_ldc_w;", "-\t\t\t\ttry {", "-\t\t\t\t\tposition++;", "-\t\t\t\t\tbCodeStream[classFileOffset++] = OPC_ldc;", "-\t\t\t\t} catch (IndexOutOfBoundsException e) {", "-\t\t\t\t\tresizeByteArray(OPC_ldc);", "+\t\t\t\tif (classFileOffset + 1 >= bCodeStream.length) {", "+\t\t\t\t\tresizeByteArray();", "-\t\t\t\twriteUnsignedByte(index);", "+\t\t\t\tposition += 2;", "+\t\t\t\tbCodeStream[classFileOffset++] = OPC_ldc;", "+\t\t\t\tbCodeStream[classFileOffset++] = (byte) index;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43e4e6e028cff0c23e578c1277b6f3e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/BatchTestUtils.java", "commitBeforeChange": "5c04a73f2f7dbde661f920a53ef287a317d5389f", "commitAfterChange": "bc96e3fe1525ac02787685c40ced108ff079571b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic static File copyResource(File src, File dest)", "signatureAfterChange": " \tpublic static void copyResource(File src, File dest) throws IOException", "diff": ["+\tpublic static void copyResource(File src, File dest) throws IOException {", "+\t\tif (dest.exists() &&", "+\t\t\t\tsrc.lastModified() < dest.lastModified() && ", "+\t\t\t\tsrc.length() == dest.length()) ", "+\t\t{", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\tbyte[] srcBytes = null;", "+\t\tsrcBytes = read(src);", "+\t\tif (shouldConvertToIndependentLineDelimiter(src)) {", "+\t\t\tcontents = TestUtils.convertToIndependentLineDelimiter(contents);", "+\t\tFile destFolder = dest.getParentFile();", "+\t\tif (!destFolder.exists()) {", "+\t\t\tif (!destFolder.mkdirs()) {", "+\t\t\t\tthrow new IOException(\"Unable to create directory \" + destFolder);", "+\t\t\t}", "-\tpublic static File copyResource(File src, File dest) {", "-\t\t// read source bytes", "-\t\tbyte[] srcBytes = null;", "-\t\ttry {", "-\t\t\tsrcBytes = read(src);", "-\t\t} catch (IOException e1) {", "-\t\t\treturn null;", "-\t\t}", "-", "-\t\tif (convertToIndependantLineDelimiter(src)) {", "-\t\t\tString contents = new String(srcBytes);", "-\t\t\tcontents = TestUtils.convertToIndependantLineDelimiter(contents);", "-\t\t\tsrcBytes = contents.getBytes();", "-\t\t}", "-", "-\t\tif (!dest.exists()) {", "-\t\t\tdest.mkdirs();", "-\t\t}", "-\t\t// write bytes to dest", "-\t\tFileOutputStream out = null;", "-\t\tFile result = new File(dest, src.getName());", "-\t\ttry {", "-\t\t\tout = new FileOutputStream(result);", "-\t\t\tout.write(srcBytes);", "-\t\t\tout.flush();", "-\t\t} catch(IOException e) {", "-\t\t\treturn null;", "-\t\t} finally {", "-\t\t\tif (out != null) {", "-\t\t\t\ttry {", "-\t\t\t\t\tout.close();", "-\t\t\t\t} catch (IOException e) {", "-\t\t\t\t\t// ignore", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\treturn result;"]}], "num": 56232}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79772418595af04ebc70df78afe10180", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e7cd6017c294640d70e1793f22ebd8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": " protected void consumeMethodHeaderName()", "signatureAfterChange": " protected void consumeMethodHeaderName()", "diff": ["-\tmd.selector = identifierStack[identifierPtr];", "-\tlong selectorSourcePositions = identifierPositionStack[identifierPtr--];", "-\tidentifierLengthPtr--;", "+\tmd.selector = this.identifierStack[identifierPtr];", "+\tlong selectorSourcePositions = this.identifierPositionStack[this.identifierPtr--];", "+\tthis.identifierLengthPtr--;", "-\tmd.returnType = getTypeReference(intStack[intPtr--]);", "+\tmd.returnType = getTypeReference(this.intStack[this.intPtr--]);", "-\tmd.declarationSourceStart = intStack[intPtr--];", "-\tmd.modifiers = intStack[intPtr--];", "+\tmd.declarationSourceStart = this.intStack[this.intPtr--];", "+\tmd.modifiers = this.intStack[this.intPtr--];", "+\t// consume annotations", "+\tint length;", "+\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) != 0) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.expressionStack, ", "+\t\t\t(this.expressionPtr -= length) + 1, ", "+\t\t\tmd.annotations = new Annotation[length], ", "+\t\t\t0, ", "+\t\t\tlength); ", "+\t}", "-\tmd.sourceEnd = lParenPos;", "-\tmd.bodyStart = lParenPos+1;", "-\tlistLength = 0; // initialize listLength before reading parameters/throws", "+\tmd.sourceEnd = this.lParenPos;", "+\tmd.bodyStart = this.lParenPos+1;", "+\tthis.listLength = 0; // initialize listLength before reading parameters/throws", "-\tif (currentElement != null){", "-\t\tif (currentElement instanceof RecoveredType ", "+\tif (this.currentElement != null){", "+\t\tif (this.currentElement instanceof RecoveredType ", "-\t\t\t|| (scanner.getLineNumber(md.returnType.sourceStart)", "-\t\t\t\t\t== scanner.getLineNumber(md.sourceStart))){", "-\t\t\tlastCheckPoint = md.bodyStart;", "-\t\t\tcurrentElement = currentElement.add(md, 0);", "-\t\t\tlastIgnoredToken = -1;\t\t\t", "+\t\t\t|| (this.scanner.getLineNumber(md.returnType.sourceStart)", "+\t\t\t\t\t== this.scanner.getLineNumber(md.sourceStart))){", "+\t\t\tthis.lastCheckPoint = md.bodyStart;", "+\t\t\tthis.currentElement = currentElement.add(md, 0);", "+\t\t\tthis.lastIgnoredToken = -1;\t\t\t", "-\t\t\tlastCheckPoint = md.sourceStart;", "-\t\t\trestartRecovery = true;", "+\t\t\tthis.lastCheckPoint = md.sourceStart;", "+\t\t\tthis.restartRecovery = true;", "+\t\t}", "+\t}\t\t", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "352f04b5a30842b99110fac13368367b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 124, "signatureBeforeChange": " protected void consumeMethodHeaderName()", "signatureAfterChange": " protected void consumeMethodHeaderName()", "diff": ["-\tmd.selector = identifierStack[identifierPtr];", "-\tlong selectorSource = identifierPositionStack[identifierPtr--];", "-\tidentifierLengthPtr--;", "+\tmd.selector = this.identifierStack[this.identifierPtr];", "+\tlong selectorSource = this.identifierPositionStack[this.identifierPtr--];", "+\tthis.identifierLengthPtr--;", "-\tmd.returnType = getTypeReference(intStack[intPtr--]);", "+\tmd.returnType = getTypeReference(this.intStack[this.intPtr--]);", "-\tmd.declarationSourceStart = intStack[intPtr--];", "-\tmd.modifiers = intStack[intPtr--];", "+\tmd.declarationSourceStart = this.intStack[this.intPtr--];", "+\tmd.modifiers = this.intStack[this.intPtr--];", "-\tmd.sourceEnd = lParenPos;", "-\tmd.bodyStart = lParenPos+1;", "-\tlistLength = 0; // initialize listLength before reading parameters/throws", "+\tmd.sourceEnd = this.lParenPos;", "+\tmd.bodyStart = this.lParenPos+1;", "+\tthis.listLength = 0; // initialize listLength before reading parameters/throws", "-\tif (currentElement != null){", "-\t\tif (currentElement instanceof RecoveredType ", "+\tif (this.currentElement != null){", "+\t\tif (this.currentElement instanceof RecoveredType ", "-\t\t\t|| (scanner.getLineNumber(md.returnType.sourceStart)", "-\t\t\t\t\t== scanner.getLineNumber(md.sourceStart))){", "-\t\t\tlastCheckPoint = md.bodyStart;", "-\t\t\tcurrentElement = currentElement.add(md, 0);", "-\t\t\tlastIgnoredToken = -1;", "+\t\t\t|| (this.scanner.getLineNumber(md.returnType.sourceStart)", "+\t\t\t\t\t== this.scanner.getLineNumber(md.sourceStart))){", "+\t\t\tthis.lastCheckPoint = md.bodyStart;", "+\t\t\tthis.currentElement = this.currentElement.add(md, 0);", "+\t\t\tthis.lastIgnoredToken = -1;", "-\t\t\tlastCheckPoint = md.sourceStart;", "-\t\t\trestartRecovery = true;", "+\t\t\tthis.lastCheckPoint = md.sourceStart;", "+\t\t\tthis.restartRecovery = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46e7f60391c79c91dcd5c8e3b3b2d67c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " protected void consumeConstructorHeaderName()", "signatureAfterChange": " protected void consumeConstructorHeaderName()", "diff": ["-\tif (currentElement != null){", "-\t\tif (lastIgnoredToken == TokenNamenew){ // was an allocation expression", "-\t\t\tlastCheckPoint = scanner.startPosition; // force to restart at this exact position\t\t\t\t", "-\t\t\trestartRecovery = true;", "+\tif (this.currentElement != null){", "+\t\tif (this.lastIgnoredToken == TokenNamenew){ // was an allocation expression", "+\t\t\tthis.lastCheckPoint = this.scanner.startPosition; // force to restart at this exact position\t\t\t\t", "+\t\t\tthis.restartRecovery = true;", "-\tcd.selector = identifierStack[identifierPtr];", "-\tlong selectorSource = identifierPositionStack[identifierPtr--];", "-\tidentifierLengthPtr--;", "+\tcd.selector = this.identifierStack[this.identifierPtr];", "+\tlong selectorSource = this.identifierPositionStack[this.identifierPtr--];", "+\tthis.identifierLengthPtr--;", "-\tcd.declarationSourceStart = intStack[intPtr--];", "-\tcd.modifiers = intStack[intPtr--];", "+\tcd.declarationSourceStart = this.intStack[this.intPtr--];", "+\tcd.modifiers = this.intStack[this.intPtr--];", "-\tcd.sourceEnd = lParenPos;", "-\tcd.bodyStart = lParenPos+1;", "-\tlistLength = 0; // initialize listLength before reading parameters/throws", "+\tcd.sourceEnd = this.lParenPos;", "+\tcd.bodyStart = this.lParenPos+1;", "+\tthis.listLength = 0; // initialize listLength before reading parameters/throws", "-\tif (currentElement != null){", "-\t\tlastCheckPoint = cd.bodyStart;", "-\t\tif ((currentElement instanceof RecoveredType && lastIgnoredToken != TokenNameDOT)", "+\tif (this.currentElement != null){", "+\t\tthis.lastCheckPoint = cd.bodyStart;", "+\t\tif ((this.currentElement instanceof RecoveredType && this.lastIgnoredToken != TokenNameDOT)", "-\t\t\tcurrentElement = currentElement.add(cd, 0);", "-\t\t\tlastIgnoredToken = -1;", "+\t\t\tthis.currentElement = this.currentElement.add(cd, 0);", "+\t\t\tthis.lastIgnoredToken = -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69373b073c5a0e9b3ea000d4a7c4b951", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/NamingConventions.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t\tpublic void acceptNameWithPrefixAndSuffix(char[] name, boolean isFirstPrefix, boolean isFirstSuffix)", "signatureAfterChange": " \t\tpublic void acceptNameWithPrefixAndSuffix(char[] name, boolean isFirstPrefix, boolean isFirstSuffix)", "diff": ["-\t\t\t\tint length = firstPrefixAndFirstSuffixResults.length;", "-\t\t\t\tif(length == firstPrefixAndFirstSuffixResultsCount) {", "+\t\t\t\tint length = this.firstPrefixAndFirstSuffixResults.length;", "+\t\t\t\tif(length == this.firstPrefixAndFirstSuffixResultsCount) {", "-\t\t\t\t\t\tfirstPrefixAndFirstSuffixResults,", "+\t\t\t\t\t\tthis.firstPrefixAndFirstSuffixResults,", "-\t\t\t\t\t\tfirstPrefixAndFirstSuffixResults = new char[length * 2][],", "+\t\t\t\t\t\tthis.firstPrefixAndFirstSuffixResults = new char[length * 2][],", "-\t\t\t\tfirstPrefixAndFirstSuffixResults[firstPrefixAndFirstSuffixResultsCount++] = name;\t\t\t", "+\t\t\t\tthis.firstPrefixAndFirstSuffixResults[this.firstPrefixAndFirstSuffixResultsCount++] = name;\t\t\t", "-\t\t\t\tint length = firstPrefixAndSuffixResults.length;", "-\t\t\t\tif(length == firstPrefixAndSuffixResultsCount) {", "+\t\t\t\tint length = this.firstPrefixAndSuffixResults.length;", "+\t\t\t\tif(length == this.firstPrefixAndSuffixResultsCount) {", "-\t\t\t\t\t\tfirstPrefixAndSuffixResults,", "+\t\t\t\t\t\tthis.firstPrefixAndSuffixResults,", "-\t\t\t\t\t\tfirstPrefixAndSuffixResults = new char[length * 2][],", "+\t\t\t\t\t\tthis.firstPrefixAndSuffixResults = new char[length * 2][],", "-\t\t\t\tfirstPrefixAndSuffixResults[firstPrefixAndSuffixResultsCount++] = name;", "+\t\t\t\tthis.firstPrefixAndSuffixResults[this.firstPrefixAndSuffixResultsCount++] = name;", "-\t\t\t\tint length = prefixAndFirstSuffixResults.length;", "-\t\t\t\tif(length == prefixAndFirstSuffixResultsCount) {", "+\t\t\t\tint length = this.prefixAndFirstSuffixResults.length;", "+\t\t\t\tif(length == this.prefixAndFirstSuffixResultsCount) {", "-\t\t\t\t\t\tprefixAndFirstSuffixResults,", "+\t\t\t\t\t\tthis.prefixAndFirstSuffixResults,", "-\t\t\t\t\t\tprefixAndFirstSuffixResults = new char[length * 2][],", "+\t\t\t\t\t\tthis.prefixAndFirstSuffixResults = new char[length * 2][],", "-\t\t\t\tprefixAndFirstSuffixResults[prefixAndFirstSuffixResultsCount++] = name;", "+\t\t\t\tthis.prefixAndFirstSuffixResults[this.prefixAndFirstSuffixResultsCount++] = name;", "-\t\t\t\tint length = prefixAndSuffixResults.length;", "-\t\t\t\tif(length == prefixAndSuffixResultsCount) {", "+\t\t\t\tint length = this.prefixAndSuffixResults.length;", "+\t\t\t\tif(length == this.prefixAndSuffixResultsCount) {", "-\t\t\t\t\t\tprefixAndSuffixResults,", "+\t\t\t\t\t\tthis.prefixAndSuffixResults,", "-\t\t\t\t\t\tprefixAndSuffixResults = new char[length * 2][],", "+\t\t\t\t\t\tthis.prefixAndSuffixResults = new char[length * 2][],", "-\t\t\t\tprefixAndSuffixResults[prefixAndSuffixResultsCount++] = name;", "+\t\t\t\tthis.prefixAndSuffixResults[this.prefixAndSuffixResultsCount++] = name;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a48a502afe9a181cc734c323635f86d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 238, "methodNumberAfterChange": 238, "signatureBeforeChange": " public void parse(ConstructorDeclaration cd, CompilationUnitDeclaration unit)", "signatureAfterChange": " public void parse(ConstructorDeclaration cd, CompilationUnitDeclaration unit)", "diff": ["-\tnestedMethod[nestedType]++;", "+\tthis.nestedMethod[this.nestedType]++;", "-\treferenceContext = cd;", "-\tcompilationUnit = unit;", "+\tthis.referenceContext = cd;", "+\tthis.compilationUnit = unit;", "-\tscanner.resetTo(cd.bodyStart, cd.bodyEnd);", "+\tthis.scanner.resetTo(cd.bodyStart, cd.bodyEnd);", "-\t\tlastAct = ERROR_ACTION;", "+\t\tthis.lastAct = ERROR_ACTION;", "-\t\tnestedMethod[nestedType]--;", "+\t\tthis.nestedMethod[this.nestedType]--;", "-\tif (lastAct == ERROR_ACTION) {", "+\tif (this.lastAct == ERROR_ACTION) {", "-\tcd.explicitDeclarations = realBlockStack[realBlockPtr--];", "+\tcd.explicitDeclarations = this.realBlockStack[this.realBlockPtr--];", "-\tif ((length = astLengthStack[astLengthPtr--]) != 0) {", "-\t\tastPtr -= length;", "-\t\tif (astStack[astPtr + 1] instanceof ExplicitConstructorCall)", "+\tif ((length = this.astLengthStack[this.astLengthPtr--]) != 0) {", "+\t\tthis.astPtr -= length;", "+\t\tif (this.astStack[this.astPtr + 1] instanceof ExplicitConstructorCall)", "-\t\t\t\tastStack, ", "-\t\t\t\tastPtr + 2, ", "+\t\t\t\tthis.astStack, ", "+\t\t\t\tthis.astPtr + 2, ", "-\t\t\tcd.constructorCall = (ExplicitConstructorCall) astStack[astPtr + 1];", "+\t\t\tcd.constructorCall = (ExplicitConstructorCall) this.astStack[this.astPtr + 1];", "-\t\t\t\tastStack, ", "-\t\t\t\tastPtr + 1, ", "+\t\t\t\tthis.astStack, ", "+\t\t\t\tthis.astPtr + 1, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e1df0cd2ba321b1f4d540814c4990c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 164, "methodNumberAfterChange": 164, "signatureBeforeChange": " protected void consumeStatementFor()", "signatureAfterChange": " protected void consumeStatementFor()", "diff": ["-\tastLengthPtr--;", "-\tStatement statement = (Statement) astStack[astPtr--];", "+\tthis.astLengthPtr--;", "+\tStatement statement = (Statement) this.astStack[this.astPtr--];", "-\tif ((length = expressionLengthStack[expressionLengthPtr--]) == 0) {", "+\tif ((length = this.expressionLengthStack[this.expressionLengthPtr--]) == 0) {", "-\t\texpressionPtr -= length;", "+\t\tthis.expressionPtr -= length;", "-\t\t\texpressionStack, ", "-\t\t\texpressionPtr + 1, ", "+\t\t\tthis.expressionStack, ", "+\t\t\tthis.expressionPtr + 1, ", "-\tif (expressionLengthStack[expressionLengthPtr--] != 0)", "-\t\tcond = expressionStack[expressionPtr--];", "+\tif (this.expressionLengthStack[this.expressionLengthPtr--] != 0)", "+\t\tcond = this.expressionStack[this.expressionPtr--];", "-\tif ((length = astLengthStack[astLengthPtr--]) == 0) {", "+\tif ((length = this.astLengthStack[this.astLengthPtr--]) == 0) {", "-\t\t\tlength = expressionLengthStack[expressionLengthPtr--];", "-\t\t\texpressionPtr -= length;", "+\t\t\tlength = this.expressionLengthStack[this.expressionLengthPtr--];", "+\t\t\tthis.expressionPtr -= length;", "-\t\t\t\texpressionStack, ", "-\t\t\t\texpressionPtr + 1, ", "+\t\t\t\tthis.expressionStack, ", "+\t\t\t\tthis.expressionPtr + 1, ", "-\t\t\tastPtr -= length;", "+\t\t\tthis.astPtr -= length;", "-\t\t\t\tastStack, ", "-\t\t\t\tastPtr + 1, ", "+\t\t\t\tthis.astStack, ", "+\t\t\t\tthis.astPtr + 1, ", "-\t\t\tintStack[intPtr--], ", "-\t\t\tendStatementPosition)); ", "+\t\t\tthis.intStack[this.intPtr--], ", "+\t\t\tthis.endStatementPosition)); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c324460079fca2d7e9c625c5d1130dfb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "e33f9e50507ed5c3d45f37527737576191428633", "commitAfterChange": "62bebd71f36545c90d6c943df5cd6ccb18d59a48", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "signatureAfterChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "diff": ["-\t\t\tif (options.checkVisibility", "+\t\t\tif (this.options.checkVisibility", "-\t\t\tint previousStartPosition = startPosition;", "+\t\t\tint previousStartPosition = this.startPosition;", "-\t\t\t\tif (source != null", "-\t\t\t\t\t&& source.length > endPosition", "-\t\t\t\t\t&& source[endPosition] == '(')", "+\t\t\t\tif (this.source != null", "+\t\t\t\t\t&& this.source.length > this.endPosition", "+\t\t\t\t\t&& this.source[this.endPosition] == '(')", "-\t\t\t\tif(prefixRequired && (source != null)) {", "-\t\t\t\t\tcompletion = CharOperation.subarray(source, startPosition, endPosition);", "+\t\t\t\tif(prefixRequired && (this.source != null)) {", "+\t\t\t\t\tcompletion = CharOperation.subarray(this.source, this.startPosition, this.endPosition);", "-\t\t\t\t\tstartPosition = endPosition;", "+\t\t\t\t\tthis.startPosition = this.endPosition;", "-\t\t\tif(prefixRequired || options.forceImplicitQualification){", "+\t\t\tif(prefixRequired || this.options.forceImplicitQualification){", "-\t\t\tnoProposal = false;", "-\t\t\trequestor.acceptMethod(", "+\t\t\tthis.noProposal = false;", "+\t\t\tthis.requestor.acceptMethod(", "-\t\t\t\tstartPosition - offset,", "-\t\t\t\tendPosition - offset,", "+\t\t\t\tthis.startPosition - this.offset,", "+\t\t\t\tthis.endPosition - this.offset,", "-\t\t\tstartPosition = previousStartPosition;", "+\t\t\tthis.startPosition = previousStartPosition;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8afacd8d6bbb8debda4e958911f7e54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " protected void consumeConstructorDeclaration()", "signatureAfterChange": " protected void consumeConstructorDeclaration()", "diff": ["-\tintPtr--;", "-\tintPtr--;", "+\tthis.intPtr--;", "+\tthis.intPtr--;", "-\trealBlockPtr--;", "+\tthis.realBlockPtr--;", "-\tif ((length = astLengthStack[astLengthPtr--]) != 0) {", "-\t\tastPtr -= length;", "-\t\tif (astStack[astPtr + 1] instanceof ExplicitConstructorCall) {", "+\tif ((length = this.astLengthStack[this.astLengthPtr--]) != 0) {", "+\t\tthis.astPtr -= length;", "+\t\tif (this.astStack[this.astPtr + 1] instanceof ExplicitConstructorCall) {", "-\t\t\t\tastStack, ", "-\t\t\t\tastPtr + 2, ", "+\t\t\t\tthis.astStack, ", "+\t\t\t\tthis.astPtr + 2, ", "-\t\t\tconstructorCall = (ExplicitConstructorCall) astStack[astPtr + 1];", "+\t\t\tconstructorCall = (ExplicitConstructorCall) this.astStack[this.astPtr + 1];", "-\t\t\t\tastStack, ", "-\t\t\t\tastPtr + 1, ", "+\t\t\t\tthis.astStack, ", "+\t\t\t\tthis.astPtr + 1, ", "-\t\tif (diet) {", "-\t\t\tfor (int i = nestedType; i > 0; i--){", "-\t\t\t\tif (variablesCounter[i] > 0) {", "+\t\tif (this.diet) {", "+\t\t\tfor (int i = this.nestedType; i > 0; i--){", "+\t\t\t\tif (this.variablesCounter[i] > 0) {", "-\t\tif (!diet || insideFieldInitializer){", "+\t\tif (!this.diet || insideFieldInitializer){", "-\tConstructorDeclaration cd = (ConstructorDeclaration) astStack[astPtr];", "+\tConstructorDeclaration cd = (ConstructorDeclaration) this.astStack[this.astPtr];", "-\tif (!diet && (statements == null && constructorCall.isImplicitSuper())) {", "-\t\tif (!containsComment(cd.bodyStart, endPosition)) {", "+\tif (!this.diet && (statements == null && constructorCall.isImplicitSuper())) {", "+\t\tif (!containsComment(cd.bodyStart, this.endPosition)) {", "-\tcd.bodyEnd = endPosition;", "-\tcd.declarationSourceEnd = flushCommentsDefinedPriorTo(endStatementPosition); ", "+\tcd.bodyEnd = this.endPosition;", "+\tcd.declarationSourceEnd = flushCommentsDefinedPriorTo(this.endStatementPosition); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4fbf57eb21fc31999d1353cc94bd978", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "931e434bb3e4b9f62577b10f8123cfc028893969", "commitAfterChange": "c0b519c3b149b13ea0f307f0d3414359b2cf0639", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t}", "-\tpublic TypeBinding resolveType(BlockScope scope) {", "-\t\t// field and/or local are done before type lookups", "-\t\t// the only available value for the restrictiveFlag BEFORE", "-\t\t// the TC is Flag_Type Flag_LocalField and Flag_TypeLocalField ", "-\t\tthis.actualReceiverType = scope.enclosingReceiverType();", "-\t\tconstant = Constant.NotAConstant;", "-\t\tif ((this.codegenBinding = this.binding = scope.getBinding(tokens, bits & RestrictiveFlagMASK, this, true /*resolve*/)).isValidBinding()) {", "-\t\t\tswitch (bits & RestrictiveFlagMASK) {", "-\t\t\t\tcase Binding.VARIABLE : //============only variable===========", "-\t\t\t\tcase Binding.TYPE | Binding.VARIABLE :", "-\t\t\t\t\tif (binding instanceof LocalVariableBinding) {", "-\t\t\t\t\t\tif (!((LocalVariableBinding) binding).isFinal() && ((bits & DepthMASK) != 0))", "-\t\t\t\t\t\t\tscope.problemReporter().cannotReferToNonFinalOuterLocal(", "-\t\t\t\t\t\t\t\t(LocalVariableBinding) binding,", "-\t\t\t\t\t\t\t\tthis);", "-\t\t\t\t\t\tbits &= ~RestrictiveFlagMASK; // clear bits", "-\t\t\t\t\t\tbits |= Binding.LOCAL;", "-\t\t\t\t\t\treturn this.resolvedType = getOtherFieldBindings(scope);", "+", "+public TypeBinding resolveType(BlockScope scope) {", "+\t// field and/or local are done before type lookups", "+\t// the only available value for the restrictiveFlag BEFORE", "+\t// the TC is Flag_Type Flag_LocalField and Flag_TypeLocalField ", "+\tthis.actualReceiverType = scope.enclosingReceiverType();", "+\tthis.constant = Constant.NotAConstant;", "+\tif ((this.codegenBinding = this.binding = scope.getBinding(this.tokens, this.bits & ASTNode.RestrictiveFlagMASK, this, true /*resolve*/)).isValidBinding()) {", "+\t\tswitch (this.bits & ASTNode.RestrictiveFlagMASK) {", "+\t\t\tcase Binding.VARIABLE : //============only variable===========", "+\t\t\tcase Binding.TYPE | Binding.VARIABLE :", "+\t\t\t\tif (this.binding instanceof LocalVariableBinding) {", "+\t\t\t\t\tif (!((LocalVariableBinding) this.binding).isFinal() && ((this.bits & ASTNode.DepthMASK) != 0))", "+\t\t\t\t\t\tscope.problemReporter().cannotReferToNonFinalOuterLocal(", "+\t\t\t\t\t\t\t(LocalVariableBinding) this.binding,", "+\t\t\t\t\t\t\tthis);", "+\t\t\t\t\tthis.bits &= ~ASTNode.RestrictiveFlagMASK; // clear bits", "+\t\t\t\t\tthis.bits |= Binding.LOCAL;", "+\t\t\t\t\treturn this.resolvedType = getOtherFieldBindings(scope);", "+\t\t\t\t}", "+\t\t\t\tif (this.binding instanceof FieldBinding) {", "+\t\t\t\t\tFieldBinding fieldBinding = (FieldBinding) this.binding;", "+\t\t\t\t\tMethodScope methodScope = scope.methodScope();", "+\t\t\t\t\t// check for forward references", "+\t\t\t\t\tif (this.indexOfFirstFieldBinding == 1", "+\t\t\t\t\t\t\t&& methodScope.enclosingSourceType() == fieldBinding.original().declaringClass", "+\t\t\t\t\t\t\t&& methodScope.lastVisibleFieldID >= 0", "+\t\t\t\t\t\t\t&& fieldBinding.id >= methodScope.lastVisibleFieldID", "+\t\t\t\t\t\t\t&& (!fieldBinding.isStatic() || methodScope.isStatic)) {", "+\t\t\t\t\t\tscope.problemReporter().forwardReference(this, 0, methodScope.enclosingSourceType());", "-\t\t\t\t\tif (binding instanceof FieldBinding) {", "-\t\t\t\t\t\tFieldBinding fieldBinding = (FieldBinding) binding;", "-\t\t\t\t\t\tMethodScope methodScope = scope.methodScope();", "-\t\t\t\t\t\t// check for forward references", "-\t\t\t\t\t\tif (this.indexOfFirstFieldBinding == 1", "-\t\t\t\t\t\t\t\t&& methodScope.enclosingSourceType() == fieldBinding.original().declaringClass", "-\t\t\t\t\t\t\t\t&& methodScope.lastVisibleFieldID >= 0", "-\t\t\t\t\t\t\t\t&& fieldBinding.id >= methodScope.lastVisibleFieldID", "-\t\t\t\t\t\t\t\t&& (!fieldBinding.isStatic() || methodScope.isStatic)) {", "-\t\t\t\t\t\t\tscope.problemReporter().forwardReference(this, 0, methodScope.enclosingSourceType());", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!fieldBinding.isStatic() ", "-\t\t\t\t\t\t\t\t&& this.indexOfFirstFieldBinding == 1", "-\t\t\t\t\t\t\t\t&& scope.compilerOptions().getSeverity(CompilerOptions.UnqualifiedFieldAccess) != ProblemSeverities.Ignore) {", "-\t\t\t\t\t\t\tscope.problemReporter().unqualifiedFieldAccess(this, fieldBinding);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbits &= ~RestrictiveFlagMASK; // clear bits", "-\t\t\t\t\t\tbits |= Binding.FIELD;", "-\t\t\t\t\t\t", "+\t\t\t\t\tif (!fieldBinding.isStatic() ", "+\t\t\t\t\t\t\t&& this.indexOfFirstFieldBinding == 1", "+\t\t\t\t\t\t\t&& scope.compilerOptions().getSeverity(CompilerOptions.UnqualifiedFieldAccess) != ProblemSeverities.Ignore) {", "+\t\t\t\t\t\tscope.problemReporter().unqualifiedFieldAccess(this, fieldBinding);", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.bits &= ~ASTNode.RestrictiveFlagMASK; // clear bits", "+\t\t\t\t\tthis.bits |= Binding.FIELD;", "+\t\t\t\t\t", "-\t\t\t\t\t\t", "-\t\t\t\t\t\treturn this.resolvedType = getOtherFieldBindings(scope);", "-\t\t\t\t\t}", "-\t\t\t\t\t// thus it was a type", "-\t\t\t\t\tbits &= ~RestrictiveFlagMASK; // clear bits", "-\t\t\t\t\tbits |= Binding.TYPE;", "-\t\t\t\tcase Binding.TYPE : //=============only type ==============", "-\t\t\t\t    TypeBinding type = (TypeBinding) binding;", "+\t\t\t\t\t", "+\t\t\t\t\treturn this.resolvedType = getOtherFieldBindings(scope);", "+\t\t\t\t}", "+\t\t\t\t// thus it was a type", "+\t\t\t\tthis.bits &= ~ASTNode.RestrictiveFlagMASK; // clear bits", "+\t\t\t\tthis.bits |= Binding.TYPE;", "+\t\t\tcase Binding.TYPE : //=============only type ==============", "+\t\t\t    TypeBinding type = (TypeBinding) this.binding;", "-\t\t\t\t\ttype = scope.environment().convertToRawType(type);", "-\t\t\t\t\treturn this.resolvedType = type;", "-\t\t\t}", "+\t\t\t\ttype = scope.environment().convertToRawType(type);", "+\t\t\t\treturn this.resolvedType = type;", "-\t\t//========error cases===============", "-\t\treturn this.resolvedType = this.reportError(scope);", "+\t//========error cases===============", "+\treturn this.resolvedType = this.reportError(scope);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9f98a8c41f847ecbd56c0eef0a88a98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 201, "methodNumberAfterChange": 201, "signatureBeforeChange": " protected TypeReference getTypeReference(int dim)", "signatureAfterChange": " protected TypeReference getTypeReference(int dim)", "diff": ["-\tif ((length = identifierLengthStack[identifierLengthPtr--]) == 1) {", "+\tif ((length = this.identifierLengthStack[this.identifierLengthPtr--]) == 1) {", "-\t\t\t\t\tidentifierStack[identifierPtr], ", "-\t\t\t\t\tidentifierPositionStack[identifierPtr--]); ", "+\t\t\t\t\tthis.identifierStack[this.identifierPtr], ", "+\t\t\t\t\tthis.identifierPositionStack[this.identifierPtr--]); ", "-\t\t\t\t\tidentifierStack[identifierPtr], ", "+\t\t\t\t\tthis.identifierStack[this.identifierPtr], ", "-\t\t\t\t\tidentifierPositionStack[identifierPtr--]); ", "-\t\t\tref.sourceEnd = endPosition;\t\t\t", "+\t\t\t\t\tthis.identifierPositionStack[this.identifierPtr--]); ", "+\t\t\tref.sourceEnd = this.endPosition;\t\t\t", "-\t\t\tref.sourceStart = intStack[intPtr--];", "+\t\t\tref.sourceStart = this.intStack[this.intPtr--];", "-\t\t\t\tref.sourceEnd = intStack[intPtr--];", "+\t\t\t\tref.sourceEnd = this.intStack[this.intPtr--];", "-\t\t\t\tintPtr--;", "-\t\t\t\tref.sourceEnd = endPosition;", "+\t\t\t\tthis.intPtr--;", "+\t\t\t\tref.sourceEnd = this.endPosition;", "-\t\t\tidentifierPtr -= length;", "+\t\t\tthis.identifierPtr -= length;", "-\t\t\tSystem.arraycopy(identifierStack, identifierPtr + 1, tokens, 0, length);", "+\t\t\tSystem.arraycopy(this.identifierStack, this.identifierPtr + 1, tokens, 0, length);", "-\t\t\t\tidentifierPositionStack, ", "-\t\t\t\tidentifierPtr + 1, ", "+\t\t\t\tthis.identifierPositionStack, ", "+\t\t\t\tthis.identifierPtr + 1, ", "-\t\t\t\tref.sourceEnd = endPosition;", "+\t\t\t\tref.sourceEnd = this.endPosition;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee6d70ec17037ed5a7ec51599e4e2e17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 170, "methodNumberAfterChange": 170, "signatureBeforeChange": " protected void consumeStatementSynchronized()", "signatureAfterChange": " protected void consumeStatementSynchronized()", "diff": ["-\tif (astLengthStack[astLengthPtr] == 0) {", "-\t\tastLengthStack[astLengthPtr] = 1;", "-\t\texpressionLengthPtr--;", "-\t\tastStack[++astPtr] = ", "+\tif (this.astLengthStack[this.astLengthPtr] == 0) {", "+\t\tthis.astLengthStack[this.astLengthPtr] = 1;", "+\t\tthis.expressionLengthPtr--;", "+\t\tthis.astStack[++this.astPtr] = ", "-\t\t\t\texpressionStack[expressionPtr--], ", "+\t\t\t\tthis.expressionStack[this.expressionPtr--], ", "-\t\t\t\tintStack[intPtr--], ", "-\t\t\t\tendStatementPosition); ", "+\t\t\t\tthis.intStack[this.intPtr--], ", "+\t\t\t\tthis.endStatementPosition); ", "-\t\texpressionLengthPtr--;", "-\t\tastStack[astPtr] = ", "+\t\tthis.expressionLengthPtr--;", "+\t\tthis.astStack[this.astPtr] = ", "-\t\t\t\texpressionStack[expressionPtr--], ", "-\t\t\t\t(Block) astStack[astPtr], ", "-\t\t\t\tintStack[intPtr--], ", "-\t\t\t\tendStatementPosition); ", "+\t\t\t\tthis.expressionStack[this.expressionPtr--], ", "+\t\t\t\t(Block) this.astStack[this.astPtr], ", "+\t\t\t\tthis.intStack[this.intPtr--], ", "+\t\t\t\tthis.endStatementPosition); "]}], "num": 4143}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "146fb2067892ebce4e54722623a06c37", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21893267809ce487833fe123b95c79e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "e6216311ffab56ba03e084ce8ca3a0857f24301b", "commitAfterChange": "9cf9fd36cf0d3a6995c78921628703f8e713d766", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  protected void findAffectedSourceFiles(IResourceDelta binaryDelta, int segmentCount)", "signatureAfterChange": "  protected void findAffectedSourceFiles(IResourceDelta binaryDelta, int segmentCount, StringSet structurallyChangedTypes)", "diff": ["-protected void findAffectedSourceFiles(IResourceDelta binaryDelta, int segmentCount) {", "+protected void findAffectedSourceFiles(IResourceDelta binaryDelta, int segmentCount, StringSet structurallyChangedTypes) {", "-\t\t\t\t\t\tfindAffectedSourceFiles(children[i], segmentCount);", "+\t\t\t\t\t\tfindAffectedSourceFiles(children[i], segmentCount, structurallyChangedTypes);", "+\t\t\t\t\t\tif (structurallyChangedTypes != null && !structurallyChangedTypes.includes(typePath.toString()))", "+\t\t\t\t\t\t\treturn; // skip since it wasn't a structural change"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fdf57239019adf4c7cf40639e5c6b49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "14369aade824a8ea9cd172f06aeb63b163bb9bf0", "commitAfterChange": "76049c710d8a15447cdfbafce1296b7824e89c76", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic Answer findType( \t\t\tString typeName,  \t\t\tString packageName,  \t\t\tboolean partialMatch,  \t\t\tint acceptFlags,  \t\t\tboolean considerSecondaryTypes,  \t\t\tboolean waitForIndexes,  \t\t\tboolean checkRestrictions, \t\t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic Answer findType( \t\t\tString typeName,  \t\t\tString packageName,  \t\t\tIPackageFragmentRoot root,  \t\t\tboolean partialMatch,  \t\t\tint acceptFlags,  \t\t\tboolean considerSecondaryTypes,  \t\t\tboolean waitForIndexes, \t\t\tboolean checkRestrictions, \t\t\tIProgressMonitor monitor)", "diff": ["+\t\t\tIPackageFragmentRoot root, ", "-\t\t\tboolean waitForIndexes, ", "+\t\t\tboolean waitForIndexes,", "+\t\t\tif (root != null && !packages[i].getParent().equals(root)) {", "+\t\t\t\t// filter package which are not in same root", "+\t\t\t\tcontinue;", "+\t\t\t}"]}], "num": 39401}
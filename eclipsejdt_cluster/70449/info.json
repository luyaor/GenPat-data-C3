{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e70a4d9a4fdafe1953ee9160a3ce2bd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e6c1d84ced1386f1a1ec0faa926e259", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "f5a6b32f5440a6dc40e1353ed6c94f89e64c1de3", "commitAfterChange": "53dd39a8862ca5242dbb932ca83dc2b678997664", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public static char[] createCharArrayTypeSignature(char[] typeName, boolean isResolved)", "signatureAfterChange": " public static char[] createCharArrayTypeSignature(char[] typeName, boolean isResolved)", "diff": ["-\tboolean primitive = false;", "-\tchar primitiveSig = ' ';", "-\tint index = 0;", "+\tint arrayCount = CharOperation.occurencesOf('[', typeName);", "+\tchar[] sig;", "-\t// primitive type?", "-\tswitch (typeName[index]) {", "+\tswitch (typeName[0]) {", "+\t\t// primitive type?", "-\t\t\tif (CharOperation.fragmentEquals(BOOLEAN, typeName, index, true)) {", "-\t\t\t\tprimitiveSig = C_BOOLEAN;", "-\t\t\t\tindex += BOOLEAN.length;\t", "-\t\t\t\tprimitive = true;\t\t\t", "+\t\t\tif (CharOperation.fragmentEquals(BOOLEAN, typeName, 0, true)) {", "+\t\t\t\tsig = new char[arrayCount+1];", "+\t\t\t\tsig[arrayCount] = C_BOOLEAN;", "-\t\t\t} else if (CharOperation.fragmentEquals(BYTE, typeName, index, true)) {", "-\t\t\t\tprimitiveSig = C_BYTE;", "-\t\t\t\tindex += BYTE.length;\t\t\t\t", "-\t\t\t\tprimitive = true;\t\t\t", "+\t\t\t} else if (CharOperation.fragmentEquals(BYTE, typeName, 0, true)) {", "+\t\t\t\tsig = new char[arrayCount+1];", "+\t\t\t\tsig[arrayCount] = C_BYTE;", "-\t\t\tif (CharOperation.fragmentEquals(CHAR, typeName, index, true)) {", "-\t\t\t\tprimitiveSig = C_CHAR;", "-\t\t\t\tindex += CHAR.length;\t\t\t\t", "-\t\t\t\tprimitive = true;\t\t\t", "+\t\t\tif (CharOperation.fragmentEquals(CHAR, typeName, 0, true)) {", "+\t\t\t\tsig = new char[arrayCount+1];", "+\t\t\t\tsig[arrayCount] = C_CHAR;", "-\t\t\tif (CharOperation.fragmentEquals(DOUBLE, typeName, index, true)) {", "-\t\t\t\tprimitiveSig = C_DOUBLE;", "-\t\t\t\tindex += DOUBLE.length;\t\t\t\t", "-\t\t\t\tprimitive = true;\t\t\t", "+\t\t\tif (CharOperation.fragmentEquals(DOUBLE, typeName, 0, true)) {", "+\t\t\t\tsig = new char[arrayCount+1];", "+\t\t\t\tsig[arrayCount] = C_DOUBLE;", "-\t\t\tif (CharOperation.fragmentEquals(FLOAT, typeName, index, true)) {", "-\t\t\t\tprimitiveSig = C_FLOAT;", "-\t\t\t\tindex += FLOAT.length;\t\t\t\t", "-\t\t\t\tprimitive = true;\t\t\t", "+\t\t\tif (CharOperation.fragmentEquals(FLOAT, typeName, 0, true)) {", "+\t\t\t\tsig = new char[arrayCount+1];", "+\t\t\t\tsig[arrayCount] = C_FLOAT;", "-\t\t\tif (CharOperation.fragmentEquals(INT, typeName, index, true)) {", "-\t\t\t\tprimitiveSig = C_INT;", "-\t\t\t\tindex += INT.length;\t\t\t\t", "-\t\t\t\tprimitive = true;\t\t\t", "+\t\t\tif (CharOperation.fragmentEquals(INT, typeName, 0, true)) {", "+\t\t\t\tsig = new char[arrayCount+1];", "+\t\t\t\tsig[arrayCount] = C_INT;", "-\t\t\tif (CharOperation.fragmentEquals(LONG, typeName, index, true)) {", "-\t\t\t\tprimitiveSig = C_LONG;", "-\t\t\t\tindex += LONG.length;\t\t\t\t", "-\t\t\t\tprimitive = true;\t\t\t", "+\t\t\tif (CharOperation.fragmentEquals(LONG, typeName, 0, true)) {", "+\t\t\t\tsig = new char[arrayCount+1];", "+\t\t\t\tsig[arrayCount] = C_LONG;", "-\t\t\tif (CharOperation.fragmentEquals(SHORT, typeName, index, true)) {", "-\t\t\t\tprimitiveSig = C_SHORT;", "-\t\t\t\tindex += SHORT.length;\t\t\t\t", "-\t\t\t\tprimitive = true;\t\t\t", "+\t\t\tif (CharOperation.fragmentEquals(SHORT, typeName, 0, true)) {", "+\t\t\t\tsig = new char[arrayCount+1];", "+\t\t\t\tsig[arrayCount] = C_SHORT;", "-\t\t\tif (CharOperation.fragmentEquals(VOID, typeName, index, true)) {", "-\t\t\t\tprimitiveSig = C_VOID;", "-\t\t\t\tindex += SHORT.length;\t\t\t\t", "-\t\t\t\tprimitive = true;\t\t\t", "+\t\t\tif (CharOperation.fragmentEquals(VOID, typeName, 0, true)) {", "+\t\t\t\tsig = new char[arrayCount+1];", "+\t\t\t\tsig[arrayCount] = C_VOID;", "+\t\t\t}", "+\t\tdefault:", "+\t\t\t// non primitive type", "+\t\t\tint sigLength = arrayCount + 1 + length + 1; // e.g. '[[[Ljava.lang.String;'", "+\t\t\tsig = new char[sigLength];", "+\t\t\tint sigIndex = arrayCount+1; // index in sig", "+\t\t\tint startID = 0; // start of current ID in typeName", "+\t\t\tint index = 0; // index in typeName", "+\t\t\twhile (index < length) {", "+\t\t\t\tchar currentChar = typeName[index];", "+\t\t\t\tswitch (currentChar) {", "+\t\t\t\t\tcase '.':", "+\t\t\t\t\t\tif (startID == -1) throw new IllegalArgumentException(new String(typeName));", "+\t\t\t\t\t\tif (startID < index) {", "+\t\t\t\t\t\t\tsig = CharOperation.append(sig, sigIndex, typeName, startID, index);", "+\t\t\t\t\t\t\tsigIndex += index-startID;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tsig[sigIndex++] = C_DOT;", "+\t\t\t\t\t\tindex++;", "+\t\t\t\t\t\tstartID = index;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase '[':", "+\t\t\t\t\t\tif (startID != -1) {", "+\t\t\t\t\t\t\tif (startID < index) {", "+\t\t\t\t\t\t\t\tsig = CharOperation.append(sig, sigIndex, typeName, startID, index);", "+\t\t\t\t\t\t\t\tsigIndex += index-startID;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tstartID = -1; // no more id after []", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tindex++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault :", "+\t\t\t\t\t\tif (startID != -1 && CharOperation.isWhitespace(currentChar)) {", "+\t\t\t\t\t\t\tif (startID < index) {", "+\t\t\t\t\t\t\t\tsig = CharOperation.append(sig, sigIndex, typeName, startID, index);", "+\t\t\t\t\t\t\t\tsigIndex += index-startID;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tstartID = index+1;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tindex++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// last id", "+\t\t\tif (startID != -1 && startID < index) {", "+\t\t\t\tsig = CharOperation.append(sig, sigIndex, typeName, startID, index);", "+\t\t\t\tsigIndex += index-startID;", "+\t\t\t}", "+\t\t\t", "+\t\t\t// add L (or Q) at the beigininig and ; at the end", "+\t\t\tsig[arrayCount] = isResolved ? C_RESOLVED : C_UNRESOLVED;", "+\t\t\tsig[sigIndex++] = C_NAME_END;", "+\t\t\t", "+\t\t\t// resize if needed", "+\t\t\tif (sigLength > sigIndex) {", "+\t\t\t\tSystem.arraycopy(sig, 0, sig = new char[sigIndex], 0, sigIndex);", "-\t// non primitive type and array count", "-\tchar[] sig = primitive ? null : new char[length];", "-\tint sigIndex = 0;", "-\tint arrayCount = 0;", "-\tint startID = primitive ? -1 : 0;", "-\twhile (index < length) {", "-\t\tchar currentChar = typeName[index];", "-\t\tswitch (currentChar) {", "-\t\t\tcase '.':", "-\t\t\t\tif (startID == -1) throw new IllegalArgumentException(new String(typeName));", "-\t\t\t\tif (startID < index) {", "-\t\t\t\t\tsig = CharOperation.append(sig, sigIndex, typeName, startID, index);", "-\t\t\t\t\tsigIndex += index-startID;", "-\t\t\t\t}", "-\t\t\t\tint sigLength = sig.length;", "-\t\t\t\tif (sigIndex >= sigLength) {", "-\t\t\t\t\tSystem.arraycopy(sig, 0, sig = new char[sigLength*2], 0, sigLength);", "-\t\t\t\t}", "-\t\t\t\tsig[sigIndex++] = C_DOT;", "-\t\t\t\tindex++;", "-\t\t\t\tstartID = index;", "-\t\t\t\tbreak;", "-\t\t\tcase '[':", "-\t\t\t\tarrayCount++;", "-\t\t\t\tif (startID != -1) {", "-\t\t\t\t\tif (startID < index) {", "-\t\t\t\t\t\tsig = CharOperation.append(sig, sigIndex, typeName, startID, index);", "-\t\t\t\t\t\tsigIndex += index-startID;", "-\t\t\t\t\t}", "-\t\t\t\t\tstartID = -1; // no more id after []", "-\t\t\t\t}", "-\t\t\t\tindex++;", "-\t\t\t\tbreak;", "-\t\t\tdefault :", "-\t\t\t\tif (startID != -1 && CharOperation.isWhitespace(currentChar)) {", "-\t\t\t\t\tif (startID < index) {", "-\t\t\t\t\t\tsig = CharOperation.append(sig, sigIndex, typeName, startID, index);", "-\t\t\t\t\t\tsigIndex += index-startID;", "-\t\t\t\t\t}", "-\t\t\t\t\tstartID = index+1;", "-\t\t\t\t}", "-\t\t\t\tindex++;", "-\t\t\t\tbreak;", "-\t\t}", "-\t}", "-\t// last id", "-\tif (startID != -1 && startID < index) {", "-\t\tsig = CharOperation.append(sig, sigIndex, typeName, startID, index);", "-\t\tsigIndex += index-startID;", "+\t// add array info", "+\tfor (int i = 0; i < arrayCount; i++) {", "+\t\tsig[i] = C_ARRAY;", "-\t// build result", "-\tchar[] result;", "-\tif (primitive) {", "-\t\tresult = new char[arrayCount+1];", "-\t\tresult[arrayCount] = primitiveSig;", "-\t} else {", "-\t\tint resultLength = arrayCount + 1 + sigIndex + 1; // e.g. '[[[Ljava.lang.String;'", "-\t\tresult = new char[resultLength];", "-\t\tSystem.arraycopy(sig, 0, result, arrayCount + 1, sigIndex);", "-\t\tresult[arrayCount] = isResolved ? C_RESOLVED : C_UNRESOLVED;", "-\t\tresult[resultLength-1] = C_NAME_END;", "-\t}", "-\tfor (int i = 0; i < arrayCount; i++) {", "-\t\tresult[i] = C_ARRAY;", "-\t}", "-\treturn result;", "+\treturn sig;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aac9ca6c875b40cf91f40a3023030f43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "36df18a67d193edba794a82365d3362cff21d1dc", "commitAfterChange": "50016e218da94faa790cc0eac00a2cb312fa37ee", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public static char[] createCharArrayTypeSignature(char[] typeName, boolean isResolved)", "signatureAfterChange": " public static char[] createCharArrayTypeSignature(char[] typeName, boolean isResolved)", "diff": ["-\ttry {", "-\t\tScanner scanner = new Scanner();", "-\t\tscanner.setSource(typeName);", "-\t\tint token = scanner.getNextToken();", "-\t\tboolean primitive = true;", "-\t\tchar primitiveSig = ' ';", "-\t\tStringBuffer sig = null;", "-\t\tint arrayCount = 0;", "-\t\tswitch (token) {", "-\t\t\tcase ITerminalSymbols.TokenNameIdentifier :", "-\t\t\t\tchar[] idSource = scanner.getCurrentIdentifierSource();", "-\t\t\t\tsig = new StringBuffer(idSource.length);", "-\t\t\t\tsig.append(idSource);", "-\t\t\t\tprimitive = false;", "+", "+\tif (typeName == null) throw new IllegalArgumentException(new String(typeName));", "+\tint length = typeName.length;", "+\tif (length == 0) throw new IllegalArgumentException(new String(typeName));", "+", "+\tboolean primitive = false;", "+\tchar primitiveSig = ' ';", "+\tint index = 0;", "+\t", "+\t// primitive type?", "+\tswitch (typeName[index]) {", "+\t\tcase 'b' :", "+\t\t\tif (CharOperation.fragmentEquals(BOOLEAN, typeName, index, true)) {", "+\t\t\t\tprimitiveSig = C_BOOLEAN;", "+\t\t\t\tindex += BOOLEAN.length;\t", "+\t\t\t\tprimitive = true;\t\t\t", "-\t\t\tcase ITerminalSymbols.TokenNameboolean :", "-\t\t\t\tprimitiveSig = Signature.C_BOOLEAN;", "+\t\t\t} else if (CharOperation.fragmentEquals(BYTE, typeName, index, true)) {", "+\t\t\t\tprimitiveSig = C_BYTE;", "+\t\t\t\tindex += BYTE.length;\t\t\t\t", "+\t\t\t\tprimitive = true;\t\t\t", "-\t\t\tcase ITerminalSymbols.TokenNamebyte :", "-\t\t\t\tprimitiveSig = Signature.C_BYTE;", "+\t\t\t}", "+\t\tcase 'c':", "+\t\t\tif (CharOperation.fragmentEquals(CHAR, typeName, index, true)) {", "+\t\t\t\tprimitiveSig = C_CHAR;", "+\t\t\t\tindex += CHAR.length;\t\t\t\t", "+\t\t\t\tprimitive = true;\t\t\t", "-\t\t\tcase ITerminalSymbols.TokenNamechar :", "-\t\t\t\tprimitiveSig = Signature.C_CHAR;", "+\t\t\t}", "+\t\tcase 'd':", "+\t\t\tif (CharOperation.fragmentEquals(DOUBLE, typeName, index, true)) {", "+\t\t\t\tprimitiveSig = C_DOUBLE;", "+\t\t\t\tindex += DOUBLE.length;\t\t\t\t", "+\t\t\t\tprimitive = true;\t\t\t", "-\t\t\tcase ITerminalSymbols.TokenNamedouble :", "-\t\t\t\tprimitiveSig = Signature.C_DOUBLE;", "+\t\t\t}", "+\t\tcase 'f':", "+\t\t\tif (CharOperation.fragmentEquals(FLOAT, typeName, index, true)) {", "+\t\t\t\tprimitiveSig = C_FLOAT;", "+\t\t\t\tindex += FLOAT.length;\t\t\t\t", "+\t\t\t\tprimitive = true;\t\t\t", "-\t\t\tcase ITerminalSymbols.TokenNamefloat :", "-\t\t\t\tprimitiveSig = Signature.C_FLOAT;", "+\t\t\t}", "+\t\tcase 'i':", "+\t\t\tif (CharOperation.fragmentEquals(INT, typeName, index, true)) {", "+\t\t\t\tprimitiveSig = C_INT;", "+\t\t\t\tindex += INT.length;\t\t\t\t", "+\t\t\t\tprimitive = true;\t\t\t", "-\t\t\tcase ITerminalSymbols.TokenNameint :", "-\t\t\t\tprimitiveSig = Signature.C_INT;", "+\t\t\t}", "+\t\tcase 'l':", "+\t\t\tif (CharOperation.fragmentEquals(LONG, typeName, index, true)) {", "+\t\t\t\tprimitiveSig = C_LONG;", "+\t\t\t\tindex += LONG.length;\t\t\t\t", "+\t\t\t\tprimitive = true;\t\t\t", "-\t\t\tcase ITerminalSymbols.TokenNamelong :", "-\t\t\t\tprimitiveSig = Signature.C_LONG;", "+\t\t\t}", "+\t\tcase 's':", "+\t\t\tif (CharOperation.fragmentEquals(SHORT, typeName, index, true)) {", "+\t\t\t\tprimitiveSig = C_SHORT;", "+\t\t\t\tindex += SHORT.length;\t\t\t\t", "+\t\t\t\tprimitive = true;\t\t\t", "-\t\t\tcase ITerminalSymbols.TokenNameshort :", "-\t\t\t\tprimitiveSig = Signature.C_SHORT;", "+\t\t\t}", "+\t\tcase 'v':", "+\t\t\tif (CharOperation.fragmentEquals(VOID, typeName, index, true)) {", "+\t\t\t\tprimitiveSig = C_VOID;", "+\t\t\t\tindex += SHORT.length;\t\t\t\t", "+\t\t\t\tprimitive = true;\t\t\t", "-\t\t\tcase ITerminalSymbols.TokenNamevoid :", "-\t\t\t\tprimitiveSig = Signature.C_VOID;", "+\t\t\t}", "+\t}", "+", "+\t// non primitive type and array count", "+\tchar[] sig = primitive ? null : new char[length];", "+\tint sigIndex = 0;", "+\tint arrayCount = 0;", "+\tint startID = primitive ? -1 : 0;", "+\twhile (index < length) {", "+\t\tchar currentChar = typeName[index];", "+\t\tswitch (currentChar) {", "+\t\t\tcase '.':", "+\t\t\t\tif (startID == -1) throw new IllegalArgumentException(new String(typeName));", "+\t\t\t\tif (startID < index) {", "+\t\t\t\t\tsig = CharOperation.append(sig, sigIndex, typeName, startID, index);", "+\t\t\t\t\tsigIndex += index-startID;", "+\t\t\t\t}", "+\t\t\t\tint sigLength = sig.length;", "+\t\t\t\tif (sigIndex >= sigLength) {", "+\t\t\t\t\tSystem.arraycopy(sig, 0, sig = new char[sigLength*2], 0, sigLength);", "+\t\t\t\t}", "+\t\t\t\tsig[sigIndex++] = C_DOT;", "+\t\t\t\tindex++;", "+\t\t\t\tstartID = index;", "+\t\t\t\tbreak;", "+\t\t\tcase '[':", "+\t\t\t\tarrayCount++;", "+\t\t\t\tif (startID != -1) {", "+\t\t\t\t\tif (startID < index) {", "+\t\t\t\t\t\tsig = CharOperation.append(sig, sigIndex, typeName, startID, index);", "+\t\t\t\t\t\tsigIndex += index-startID;", "+\t\t\t\t\t}", "+\t\t\t\t\tstartID = -1; // no more id after []", "+\t\t\t\t}", "+\t\t\t\tindex++;", "-\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\t\tif (startID != -1 && CharOperation.isWhitespace(currentChar)) {", "+\t\t\t\t\tif (startID < index) {", "+\t\t\t\t\t\tsig = CharOperation.append(sig, sigIndex, typeName, startID, index);", "+\t\t\t\t\t\tsigIndex += index-startID;", "+\t\t\t\t\t}", "+\t\t\t\t\tstartID = index+1;", "+\t\t\t\t}", "+\t\t\t\tindex++;", "+\t\t\t\tbreak;", "-\t\ttoken = scanner.getNextToken();", "-\t\twhile (!primitive && token == ITerminalSymbols.TokenNameDOT) {", "-\t\t\tsig.append(scanner.getCurrentIdentifierSource());", "-\t\t\ttoken = scanner.getNextToken();", "-\t\t\tif (token == ITerminalSymbols.TokenNameIdentifier) {", "-\t\t\t\tsig.append(scanner.getCurrentIdentifierSource());", "-\t\t\t\ttoken = scanner.getNextToken();", "-\t\t\t} else {", "-\t\t\t\tthrow new IllegalArgumentException();", "-\t\t\t}", "-\t\t}", "-\t\twhile (token == ITerminalSymbols.TokenNameLBRACKET) {", "-\t\t\ttoken = scanner.getNextToken();", "-\t\t\tif (token != ITerminalSymbols.TokenNameRBRACKET)", "-\t\t\t\tthrow new IllegalArgumentException();", "-\t\t\tarrayCount++;", "-\t\t\ttoken = scanner.getNextToken();", "-\t\t}", "-\t\tif (token != ITerminalSymbols.TokenNameEOF)", "-\t\t\tthrow new IllegalArgumentException();", "-\t\tchar[] result;", "-\t\tif (primitive) {", "-\t\t\tresult = new char[arrayCount+1];", "-\t\t\tresult[arrayCount] = primitiveSig;", "-\t\t} else {", "-\t\t\tint sigLength = sig.length(); ", "-\t\t\tint resultLength = arrayCount + 1 + sigLength + 1; // e.g. '[[[Ljava.lang.String;'", "-\t\t\tresult = new char[resultLength];", "-\t\t\tsig.getChars(0, sigLength, result, arrayCount + 1);", "-\t\t\tresult[arrayCount] = isResolved ? C_RESOLVED : C_UNRESOLVED;", "-\t\t\tresult[resultLength-1] = C_NAME_END;", "-\t\t}", "-\t\tfor (int i = 0; i < arrayCount; i++) {", "-\t\t\tresult[i] = C_ARRAY;", "-\t\t}", "-\t\treturn result;", "-\t} catch (InvalidInputException e) {", "-\t\tthrow new IllegalArgumentException();", "+\t// last id", "+\tif (startID != -1 && startID < index) {", "+\t\tsig = CharOperation.append(sig, sigIndex, typeName, startID, index);", "+\t\tsigIndex += index-startID;", "+\t}", "+\t", "+\t// build result", "+\tchar[] result;", "+\tif (primitive) {", "+\t\tresult = new char[arrayCount+1];", "+\t\tresult[arrayCount] = primitiveSig;", "+\t} else {", "+\t\tint resultLength = arrayCount + 1 + sigIndex + 1; // e.g. '[[[Ljava.lang.String;'", "+\t\tresult = new char[resultLength];", "+\t\tSystem.arraycopy(sig, 0, result, arrayCount + 1, sigIndex);", "+\t\tresult[arrayCount] = isResolved ? C_RESOLVED : C_UNRESOLVED;", "+\t\tresult[resultLength-1] = C_NAME_END;", "+\t}", "+\tfor (int i = 0; i < arrayCount; i++) {", "+\t\tresult[i] = C_ARRAY;", "+\t}", "+\treturn result;"]}], "num": 70449}
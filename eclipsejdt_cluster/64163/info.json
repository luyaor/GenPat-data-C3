{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9935ecfcb65c1ee154b091ac1ffef46d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30037bae1c7e7a4556740d21691c67fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ResolvedAnnotation.java", "commitBeforeChange": "64951956bfb4944bc05f0da290459c62cfd47760", "commitAfterChange": "a55724744a63a7e4701a4790081d035e18749787", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic IResolvedMemberValuePair[] getAllMemberValuePairs()", "signatureAfterChange": "  \tpublic IResolvedMemberValuePair[] getAllMemberValuePairs()", "diff": ["-\t\t// handle case of more methods than declared members", "-\t\tObject[] names = new Object[declaredLength];", "+\t\tHashtableOfObject table = new HashtableOfObject(declaredLength);", "-\t\t\tnames[i] = pairs[i].getName();", "-\t\tComparator comparator = new Comparator() {", "-\t\t\tpublic int compare(Object arg0, Object arg1) {", "-\t\t\t\treturn CharOperation.compareWith((char[]) arg0, (char[]) arg1);", "-\t\t\t}", "-\t\t};", "-\t\tArrays.sort(names, comparator);", "+\t\t\ttable.put(((ResolvedMemberValuePair) pairs[i]).internalName(), pairs[i]);", "+", "+\t\t// handle case of more methods than declared members", "-\t\t\tint index = Arrays.binarySearch(names, methods[i].selector, comparator);", "-\t\t\tallPairs[i] = index == -1 ? new ResolvedDefaultValuePair(methods[i], this.bindingResolver) : pairs[index];", "+\t\t\tObject pair = table.get(methods[i].selector);", "+\t\t\tallPairs[i] = pair == null ? new ResolvedDefaultValuePair(methods[i], this.bindingResolver) : (IResolvedMemberValuePair) pair;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "402712d860adabb65afd1819b5a067cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "210b89134044d06a70fa2c472f5e9a859c41ba00", "commitAfterChange": "b268992d45d00cd5439bb032a6e5a5226c715e7e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void abstractMethodInAbstractClass(SourceTypeBinding type, MethodBinding[] abstractMethods)", "signatureAfterChange": " public void abstractMethodInAbstractClass(SourceTypeBinding type, AbstractMethodDeclaration methodDecl)", "diff": ["-public void abstractMethodInAbstractClass(SourceTypeBinding type, MethodBinding[] abstractMethods) {", "+public void abstractMethodInAbstractClass(SourceTypeBinding type, AbstractMethodDeclaration methodDecl) {", "+\tif (type.isEnum() && type.isLocalType()) {", "+\t\tFieldBinding field = type.scope.enclosingMethodScope().initializedField;", "+\t\tFieldDeclaration decl = field.sourceField();", "+\t\tString[] arguments = new String[] {new String(decl.name), new String(methodDecl.selector)};", "+\t\tthis.handle(", "+\t\t\tIProblem.AbstractMethodInEnum,", "+\t\t\targuments,", "+\t\t\targuments,", "+\t\t\tmethodDecl.sourceStart,", "+\t\t\tmethodDecl.sourceEnd);", "+\t} else {", "+\t\tString[] arguments = new String[] {new String(type.sourceName()), new String(methodDecl.selector)};", "+\t\tthis.handle(", "+\t\t\tIProblem.AbstractMethodInAbstractClass,", "+\t\t\targuments,", "+\t\t\targuments,", "+\t\t\tmethodDecl.sourceStart,", "+\t\t\tmethodDecl.sourceEnd);", "+\t}", "+}", "-\t\tStringBuffer selectorsString = new StringBuffer();", "-\t\tfor (int i = 0, l = abstractMethods.length; i < l;) {", "-\t\t\tMethodBinding abstractMethod = abstractMethods[i++];", "-\t\t\tselectorsString.append(abstractMethod.selector);", "-\t\t\tselectorsString.append(\"()\"); //$NON-NLS-1$", "-\t\t\tif (i < l)", "-\t\t\t\tselectorsString.append(\", \"); //$NON-NLS-1$", "-\t\t}", "-\t\tString[] arguments = new String[] {new String(type.sourceName()), selectorsString.toString()};", "-\t\t\tIProblem.AbstractMethodInAbstractClass,"]}], "num": 64163}
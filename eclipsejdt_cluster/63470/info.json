{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "342b48dcdd919a63911388e09fa5952c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30867d7289149aafa4572a8e9fb7aa8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "fd8bd5ea880929603f28ff251e5d5a9e772d3c8b", "commitAfterChange": "3ed8aa0cab87ef81fde358f9cd9183982bdcb1b7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tif (this.elementVariable.binding.resolvedPosition != -1) {", "-\t\t\tswitch(this.kind) {", "-\t\t\t\tcase ARRAY :", "-\t\t\t\t\tif (hasEmptyAction) break;", "-\t\t\t\t\tcodeStream.load(this.collectionVariable);", "-\t\t\t\t\tcodeStream.load(this.indexVariable);", "-\t\t\t\t\tcodeStream.arrayAt(this.collectionElementType.id);", "-\t\t\t\t\tif (this.elementVariableImplicitWidening != -1) {", "-\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.elementVariableImplicitWidening);", "-\t\t\t\t\t}", "-\t\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase RAW_ITERABLE :", "-\t\t\t\tcase GENERIC_ITERABLE :", "-\t\t\t\t\tcodeStream.load(this.indexVariable);", "-\t\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "+\t\tswitch(this.kind) {", "+\t\t\tcase ARRAY :", "+\t\t\t\tif (this.elementVariable.binding.resolvedPosition == -1) break;", "+\t\t\t\tcodeStream.load(this.collectionVariable);", "+\t\t\t\tcodeStream.load(this.indexVariable);", "+\t\t\t\tcodeStream.arrayAt(this.collectionElementType.id);", "+\t\t\t\tif (this.elementVariableImplicitWidening != -1) {", "+\t\t\t\t\tcodeStream.generateImplicitConversion(this.elementVariableImplicitWidening);", "+\t\t\t\t}", "+\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "+\t\t\t\tbreak;", "+\t\t\tcase RAW_ITERABLE :", "+\t\t\tcase GENERIC_ITERABLE :", "+\t\t\t\tcodeStream.load(this.indexVariable);", "+\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "+\t\t\t\tif (this.elementVariable.binding.resolvedPosition == -1) {", "+\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t} else {", "-\t\t\t\t\tif (hasEmptyAction && !codeStream.preserveUnusedLocals) {", "-\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcodeStream.addVisibleLocalVariable(this.elementVariable.binding);", "-\t\t\tif (this.postCollectionInitStateIndex != -1) {", "-\t\t\t\tcodeStream.addDefinitelyAssignedVariables(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tthis.postCollectionInitStateIndex);", "-\t\t\t}", "-\t\t} else {", "-\t\t\t// if unused variable, some side effects still need to be performed (86487)", "-\t\t\tswitch(this.kind) {", "-\t\t\t\tcase ARRAY :", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase RAW_ITERABLE :", "-\t\t\t\tcase GENERIC_ITERABLE :", "-\t\t\t\t\t// still advance in iterator to prevent infinite loop", "-\t\t\t\t\tcodeStream.load(this.indexVariable);", "-\t\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "-\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\tbreak;", "-\t\t\t}", "+\t\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tcodeStream.addVisibleLocalVariable(this.elementVariable.binding);", "+\t\tif (this.postCollectionInitStateIndex != -1) {", "+\t\t\tcodeStream.addDefinitelyAssignedVariables(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tthis.postCollectionInitStateIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c59bdc70b32ee0fb3f155a746c1ab89f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "c5c6bcddff761c0a416425cff989d848fca26469", "commitAfterChange": "d06e8d044b8d47de57499e466c78e11c0ab6a4e1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tfinal boolean hasEmptyAction = this.action == null", "-\t\t\t|| this.action.isEmptyBlock()", "-\t\t\t|| ((this.action.bits & IsUsefulEmptyStatement) != 0);", "-", "+\t\tif (this.action == null", "+\t\t\t\t|| this.action.isEmptyBlock()", "+\t\t\t\t|| ((this.action.bits & IsUsefulEmptyStatement) != 0)) {", "+\t\t\tcodeStream.exitUserScope(scope);", "+\t\t\tif (mergedInitStateIndex != -1) {", "+\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);", "+\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);\t\t\t\t", "+\t\t\t}", "+\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t\treturn;", "+\t\t}", "-\t\t\t\tif (hasEmptyAction) {", "-\t\t\t\t\tcollection.generateCode(scope, codeStream, false);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "+\t\t", "-\t\tswitch(this.kind) {", "-\t\t\tcase ARRAY :", "-\t\t\t\tif (this.elementVariable.binding.resolvedPosition == -1) break;", "-\t\t\t\tcodeStream.load(this.collectionVariable);", "-\t\t\t\tcodeStream.load(this.indexVariable);", "-\t\t\t\tcodeStream.arrayAt(this.collectionElementType.id);", "-\t\t\t\tif (this.elementVariableImplicitWidening != -1) {", "-\t\t\t\t\tcodeStream.generateImplicitConversion(this.elementVariableImplicitWidening);", "-\t\t\t\t}", "-\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "-\t\t\t\tcodeStream.addVisibleLocalVariable(this.elementVariable.binding);", "-\t\t\t\tif (this.postCollectionInitStateIndex != -1) {", "-\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(", "-\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\tthis.postCollectionInitStateIndex);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase RAW_ITERABLE :", "-\t\t\tcase GENERIC_ITERABLE :", "-\t\t\t\tcodeStream.load(this.indexVariable);", "-\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "-\t\t\t\tif (this.elementVariable.binding.resolvedPosition == -1) {", "-\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t} else {", "+\t\tif (this.elementVariable.binding.resolvedPosition != -1) {", "+\t\t\tswitch(this.kind) {", "+\t\t\t\tcase ARRAY :", "+\t\t\t\t\tcodeStream.load(this.collectionVariable);", "+\t\t\t\t\tcodeStream.load(this.indexVariable);", "+\t\t\t\t\tcodeStream.arrayAt(this.collectionElementType.id);", "+\t\t\t\t\tif (this.elementVariableImplicitWidening != -1) {", "+\t\t\t\t\t\tcodeStream.generateImplicitConversion(this.elementVariableImplicitWidening);", "+\t\t\t\t\t}", "+\t\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase RAW_ITERABLE :", "+\t\t\t\tcase GENERIC_ITERABLE :", "+\t\t\t\t\tcodeStream.load(this.indexVariable);", "+\t\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "-\t\t\t\t\tcodeStream.addVisibleLocalVariable(this.elementVariable.binding);", "-\t\t\t\t\tif (this.postCollectionInitStateIndex != -1) {", "-\t\t\t\t\t\tcodeStream.addDefinitelyAssignedVariables(", "-\t\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\t\tthis.postCollectionInitStateIndex);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcodeStream.addVisibleLocalVariable(this.elementVariable.binding);", "+\t\t\tif (this.postCollectionInitStateIndex != -1) {", "+\t\t\t\tcodeStream.addDefinitelyAssignedVariables(", "+\t\t\t\t\tcurrentScope,", "+\t\t\t\t\tthis.postCollectionInitStateIndex);", "+\t\t\t}", "+\t\t} else {", "+\t\t\t// if unused variable, some side effects still need to be performed (86487)", "+\t\t\tswitch(this.kind) {", "+\t\t\t\tcase ARRAY :", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase RAW_ITERABLE :", "+\t\t\t\tcase GENERIC_ITERABLE :", "+\t\t\t\t\t// still advance in iterator to prevent infinite loop", "+\t\t\t\t\tcodeStream.load(this.indexVariable);", "+\t\t\t\t\tcodeStream.invokeJavaUtilIteratorNext();", "+\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\tbreak;", "+\t\t\t}", "-", "-\t\tif (!hasEmptyAction) {", "-\t\t\tthis.action.generateCode(scope, codeStream);", "-\t\t}", "+\t\tthis.action.generateCode(scope, codeStream);", "-\t\t\t\t\tif (hasEmptyAction) break;", "-\t\t\t\tif (hasEmptyAction) break;"]}], "num": 63470}
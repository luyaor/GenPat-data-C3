{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "defd0897dd0de47be8fc01792ca7ce77", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14f5beadfc00339039a72cf6ab29ed3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java", "commitBeforeChange": "7cfd16cce02bf6c15cc69b5ed56b855234dd7ed5", "commitAfterChange": "95a3577e20e21c393d791bf9201b4e713942cf20", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "  public void test62()", "signatureAfterChange": "  public void test62()", "diff": ["-\t\t\"    {\\n\" +", "-\t\t\"    }\\n\" +", "-\t\t\"    {\\n\" +", "-\t\t\"      ;\\n\" +", "-\t\t\"    }\\n\" +", "-\t\t\"    {\\n\" +", "-\t\t\"    }\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ab2860c3e539a58d2c6dab9fd329f53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": " \tpublic void test074()", "signatureAfterChange": " \tpublic void test074()", "diff": ["-\t\t\t\"1. ERROR in I.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\tinterface J extends I { @Override void clone(); }\\r\\n\" + ", "-\t\t\t\"\t                                       ^^^^^^^\\n\" + ", "-\t\t\t\"The method clone() of type J must override a superclass method\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in I.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\tinterface J extends I { @Override void clone(); }\\r\\n\" + ", "+\t\t\t\"1. WARNING in I.java (at line 2)\\n\" + ", "+\t\t\t\"\tinterface J extends I { @Override void clone(); }\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in I.java (at line 2)\\n\" + ", "+\t\t\t\"\tinterface J extends I { @Override void clone(); }\\n\" + ", "+\t\t\t\"\t                                       ^^^^^^^\\n\" + ", "+\t\t\t\"The method clone() of type J must override a superclass method\\n\" + ", "-\t\t\t\"1. ERROR in I.java (at line 1)\\n\" + ", "-\t\t\t\"\tinterface I { @Override void clone(); }\\n\" + ", "-\t\t\t\"\t                             ^^^^^^^\\n\" + ", "-\t\t\t\"The method clone() of type I must override a superclass method\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in I.java (at line 1)\\n\" + ", "+\t\t\t\"1. WARNING in I.java (at line 1)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in I.java (at line 1)\\n\" + ", "+\t\t\t\"\tinterface I { @Override void clone(); }\\n\" + ", "+\t\t\t\"\t                             ^^^^^^^\\n\" + ", "+\t\t\t\"The method clone() of type I must override a superclass method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c1468a99150a38bce0df0d5b41dbf84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "f914881dbc94abaf445f0359517391331cec0c1f", "commitAfterChange": "642dc124ef5eccd7fd363b9a3443fef6794a2e79", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 132, "signatureBeforeChange": " \tpublic void testBug92944_CLASS() throws CoreException", "signatureAfterChange": " \tpublic void testBug92944_CLASS() throws CoreException", "diff": ["+\t\t\t\"Test\\n\" + ", "+\t\t\t\"Test$Inner\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45cee95753420da4e8820480d4e02a03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "d35306cb5dcf7e4ac666fd0505f3086f50241fb2", "commitAfterChange": "3284f738bbf7a2dbd90434dea313c8629bed5722", "methodNumberBeforeChange": 178, "methodNumberAfterChange": 178, "signatureBeforeChange": " public void test401939b()", "signatureAfterChange": " public void test401939b()", "diff": ["-\t\t\t\t\"\t    ^^^^^^\\n\" + ", "-\t\t\t\t\"This method must return a result of type String\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "-\t\t\t\t\"2. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\t\t\"\tgoo((x) -> { while (FALSE) throw new Exception(); });\\n\" + ", "-\t\t\t\t\"\t                           ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Unreachable code\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\t\"\tgoo((x) -> { while (TRUE) throw new Exception(); });\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "-\t\t\t\t\"3. ERROR in X.java (at line 17)\\n\" + ", "-\t\t\t\t\"\tgoo((x) -> { while (POI) throw new Exception(); });\\n\" + ", "-\t\t\t\t\"\t    ^^^^^^\\n\" + ", "-\t\t\t\t\"This method must return a result of type String\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\t\t\"\tgoo((x) -> { while (NIJAM) throw new Exception(); });\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "-\t\t\t\t\"\t                         ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Unreachable code\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "-\t\t\t\t\"5. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\t\t\"5. ERROR in X.java (at line 18)\\n\" + ", "-\t\t\t\t\"\t                                                   ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Statement unnecessarily nested within else clause. The corresponding then clause does not complete normally\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "-\t\t\t\t\"\t    ^^^^^^\\n\" + ", "-\t\t\t\t\"This method must return a result of type String\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "-\t\t\t\t\"7. WARNING in X.java (at line 20)\\n\" + ", "+\t\t\t\t\"7. ERROR in X.java (at line 20)\\n\" + ", "-\t\t\t\t\"\t                                                   ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Statement unnecessarily nested within else clause. The corresponding then clause does not complete normally\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "-\t\t\t\t\"8. WARNING in X.java (at line 20)\\n\" + ", "-\t\t\t\t\"\tgoo((x) -> { if (true) throw new Exception(); else throw new Exception(); });\\n\" + ", "-\t\t\t\t\"\t                                                   ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Dead code\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"9. WARNING in X.java (at line 21)\\n\" + ", "+\t\t\t\t\"8. ERROR in X.java (at line 21)\\n\" + ", "-\t\t\t\t\"\t                        ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Dead code\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + ", "-\t\t\t\t\"10. WARNING in X.java (at line 21)\\n\" + ", "-\t\t\t\t\"\tgoo((x) -> { if (false) throw new Exception(); else throw new Exception(); });\\n\" + ", "-\t\t\t\t\"\t                                                    ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Statement unnecessarily nested within else clause. The corresponding then clause does not complete normally\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"11. ERROR in X.java (at line 22)\\n\" + ", "+\t\t\t\t\"9. ERROR in X.java (at line 22)\\n\" + ", "-\t\t\t\t\"\t    ^^^^^^\\n\" + ", "-\t\t\t\t\"This method must return a result of type String\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4780be3602b3c91746b7296feac9c82e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AptBuilderTests.java", "commitBeforeChange": "72643ddaac52d3ea6e2573fbe40b9af5d9586d1e", "commitAfterChange": "965ee55c83771df9f7f21b38b9a78903a86f630d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void testExtraDependencies()", "signatureAfterChange": " \tpublic void testExtraDependencies()", "diff": ["-\t\tString codeA = \"package p1;\\n\"", "+\t\tString codeA = \"package p1.p2.p3.p4;\\n\"", "-\t\tString codeB1 = \"package p1;\\n\"", "+\t\tString codeB1 = \"package p1.p2.p3.p4;\\n\"", "-\t\tString codeB2 = \"package p1;\\n\"", "+\t\tString codeB2 = \"package p1.p2.p3.p4;\\n\"", "-\t\tString codeC = \"package p1;\\n\"", "+\t\tString codeC = \"package p1.p2.p3.p4;\\n\"", "-\t\tString codeD = \"package p1;\\n\"", "+\t\tString codeD = \"package p1.p2.p3.p4;\\n\"", "-\t\tString codeE = \"package p1;\\n\"", "+\t\tString codeE = \"package p1.p2.p3.p4;\\n\"", "-\t\tIPath p1aPath = env.addClass( srcRoot, \"p1\", \"A\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tenv.addClass( srcRoot, \"p1.p2.p3.p4\", \"A\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tIPath p1bPath = env.addClass( srcRoot, \"p1\", \"B\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tenv.addClass( srcRoot, \"p1.p2.p3.p4\", \"B\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tIPath p1cPath = env.addClass( srcRoot, \"p1\", \"C\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tenv.addClass( srcRoot, \"p1.p2.p3.p4\", \"C\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tIPath p1dPath = env.addClass( srcRoot, \"p1\", \"D\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tenv.addClass( srcRoot, \"p1.p2.p3.p4\", \"D\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tIPath p1ePath = env.addClass( srcRoot, \"p1\", \"E\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tenv.addClass( srcRoot, \"p1.p2.p3.p4\", \"E\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tenv.addClass( srcRoot, \"p1\", \"B\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tenv.addClass( srcRoot, \"p1.p2.p3.p4\", \"B\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingCompiledClasses(new String[]{\"p1.B\", \"p1.A\"}); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingCompilingOrder(new String[]{\"p1.B\", \"p1.A\"}); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingCompiledClasses(new String[]{\"p1.p2.p3.p4.B\", \"p1.p2.p3.p4.A\"}); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingCompilingOrder(new String[]{\"p1.p2.p3.p4.B\", \"p1.p2.p3.p4.A\"}); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t//  Now have p1.A w/ an anontation whose processor looks up p1.C by name ", "+\t\t//  Now have p1.p2.p3.p4.A w/ an anontation whose processor looks up p1.p2.p3.p4.C by name ", "-\t\tcodeA = \"package p1;\\n\"", "+\t\tcodeA = \"package p1.p2.p3.p4;\\n\"", "-\t\tp1aPath = env.addClass( srcRoot, \"p1\", \"A\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tenv.addClass( srcRoot, \"p1.p2.p3.p4\", \"A\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tp1bPath = env.addClass( srcRoot, \"p1\", \"B\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tenv.addClass( srcRoot, \"p1.p2.p3.p4\", \"B\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tp1bPath = env.addClass( srcRoot, \"p1\", \"B\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tenv.addClass( srcRoot, \"p1.p2.p3.p4\", \"B\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t// Note that p1.A is showing up twice because it has annotations, and we need to ", "+\t\t// Note that p1.p2.p3.p4.A is showing up twice because it has annotations, and we need to ", "-\t\texpectingCompiledClasses(new String[]{\"p1.B\", \"p1.A\", \"p1.A\", \"p1.C\"}); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingCompilingOrder(new String[]{\"p1.B\", \"p1.A\", \"p1.C\", \"p1.A\"}); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingCompiledClasses(new String[]{\"p1.p2.p3.p4.B\", \"p1.p2.p3.p4.A\", \"p1.p2.p3.p4.A\", \"p1.p2.p3.p4.C\"}); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingCompilingOrder(new String[]{\"p1.p2.p3.p4.B\", \"p1.p2.p3.p4.A\", \"p1.p2.p3.p4.C\", \"p1.p2.p3.p4.A\"}); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t// now make sure that p1.C is not compiled when A uses NoOp Annotation", "+\t\t// now make sure that p1.p2.p3.p4.C is not compiled when A uses NoOp Annotation", "-\t\tcodeA = \"package p1;\\n\"", "+\t\tcodeA = \"package p1.p2.p3.p4;\\n\"", "-\t\tp1aPath = env.addClass( srcRoot, \"p1\", \"A\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tenv.addClass( srcRoot, \"p1.p2.p3.p4\", \"A\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tp1bPath = env.addClass( srcRoot, \"p1\", \"B\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tenv.addClass( srcRoot, \"p1.p2.p3.p4\", \"B\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tp1bPath = env.addClass( srcRoot, \"p1\", \"B\", //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tenv.addClass( srcRoot, \"p1.p2.p3.p4\", \"B\", //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t// Note that p1.A is showing up twice because it has annotations, and we need to ", "+\t\t// Note that p1.p2.p3.p4.A is showing up twice because it has annotations, and we need to ", "-\t\texpectingCompiledClasses(new String[]{\"p1.B\", \"p1.A\", \"p1.A\" }); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\texpectingCompilingOrder(new String[]{\"p1.B\", \"p1.A\", \"p1.A\" }); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t", "-\t\t", "-\t\t", "+\t\texpectingCompiledClasses(new String[]{\"p1.p2.p3.p4.B\", \"p1.p2.p3.p4.A\", \"p1.p2.p3.p4.A\" }); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\texpectingCompilingOrder(new String[]{\"p1.p2.p3.p4.B\", \"p1.p2.p3.p4.A\", \"p1.p2.p3.p4.A\" }); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bee0a070b0f2e0ad65c814a80ec3f06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "8c76b4014ea5428c07ebba6a1cc324074d6e35bd", "commitAfterChange": "ff2a27470c07ef3625cccb4ee1e5803e3112da43", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void testStringPatternAnyStrings04() throws CoreException", "signatureAfterChange": " \tpublic void testStringPatternAnyStrings04() throws CoreException", "diff": ["-\t\tsearch(\"*Member*\", TYPE, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"Member*\", TYPE, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_obj [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_exc [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_thr [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_run [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_thr [GenericMember] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_run [GenericMember] EXACT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f436b6925621c785114f8b130a23108", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c21920e168213fd0aca47b013f14cfc667141d9a", "commitAfterChange": "6ab08c93576091a47827aa45cdb7ba0e6cb43f77", "methodNumberBeforeChange": 800, "methodNumberAfterChange": 800, "signatureBeforeChange": " public void test0779() throws Exception", "signatureAfterChange": " public void test0779() throws Exception", "diff": ["-\t\t\tCOLLECTION_AND_LIST_IMPL_JRE8.replaceAll(\"\\\\*\", \"String\") +", "-\t\t\tITERABLE_IMPL_JRE8.replaceAll(\"\\\\*\", \"String\") +", "-\tString constantPoolIdx = IS_JRE_8 ? \"73\" : \"36\"; // depends on whether or not stubs for JRE8 default methods are included", "-\t\t\"    2  invokevirtual X$Entry$1.get(int) : java.lang.String [\"+constantPoolIdx+\"]\\n\" +", "+\t\t\"    2  invokevirtual X$Entry$1.get(int) : java.lang.String [36]\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "511ce11202cfcf08facaba937448e6ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "5a6216b5646e4800b580b6acc994e6adb1594c6f", "commitAfterChange": "e31375fa76eb0906ad07c2badbf3f4288d615abe", "methodNumberBeforeChange": 375, "methodNumberAfterChange": 375, "signatureBeforeChange": " public void _test331446()", "signatureAfterChange": " public void _test331446()", "diff": ["-\t\t\t\"\\n\" + ", "-\t\t\t\"\\n\" + ", "-\tcompilerOptions14.put(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, JavaCore.VERSION_1_2);", "-\tcompilerOptions14.put(JavaCore.COMPILER_COMPLIANCE, JavaCore.VERSION_1_4);", "-\tcompilerOptions14.put(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_3);", "+\tcompilerOptions14.put(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, JavaCore.VERSION_1_5);", "+\tcompilerOptions14.put(JavaCore.COMPILER_COMPLIANCE, JavaCore.VERSION_1_5);", "+\tcompilerOptions14.put(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_5);", "+//\tcompilerOptions14.put(JavaCore.COMPILER_CODEGEN_TARGET_PLATFORM, JavaCore.VERSION_1_2);", "+//\tcompilerOptions14.put(JavaCore.COMPILER_COMPLIANCE, JavaCore.VERSION_1_4);", "+//\tcompilerOptions14.put(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_3);", "-\t\t\t\"\t\t\t\t// TODO Auto-generated method stub\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e0cff4fe5732e5cbe4378a450865dd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericTypeTests.java", "commitBeforeChange": "8c76b4014ea5428c07ebba6a1cc324074d6e35bd", "commitAfterChange": "ff2a27470c07ef3625cccb4ee1e5803e3112da43", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void testStringPatternAnyStrings02() throws CoreException", "signatureAfterChange": " \tpublic void testStringPatternAnyStrings02() throws CoreException", "diff": ["-\t\tsearch(\"*Generic\", TYPE, REFERENCES, scope, resultCollector);", "+\t\tsearch(\"G?ner?c\", TYPE, REFERENCES, scope, resultCollector);", "-\t\t\t\"src/g1/t/m/ref/R2.java [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_obj [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_exc [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_wld [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_thr [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.gen_run [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_obj [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_exc [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_wld [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_thr [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R2.java g1.t.m.ref.R2.qgen_run [NonGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [MemberGeneric] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [MemberGeneric] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_obj [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_exc [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_wld [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_thr [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.gen_run [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_obj [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_exc [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_wld [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_thr [Generic] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g1/t/m/ref/R3.java g1.t.m.ref.R3.qgen_run [Generic] EXACT_MATCH\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "981c8e0769170533663f3d2cc7a52db3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_5.java", "commitBeforeChange": "6defd2b79520062f5150164ded77c2d030acc168", "commitAfterChange": "d351702f3561d64a024c15ffbed0faad48ce2838", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic void testBug70892negative2()", "signatureAfterChange": " \tpublic void test039()", "diff": ["-\tpublic void testBug70892negative2() {", "-\t\treportMissingJavadocComments = CompilerOptions.IGNORE;", "+\t}", "+\tpublic void test039() {", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\" /**\\n\" + ", "+\t\t\t\t\t\"  * Invalid type parameter reference\\n\" + ", "+\t\t\t\t\t\"  * @param <E Type\\n\" + ", "+\t\t\t\t\t\"  * @param E> Type\\n\" + ", "+\t\t\t\t\t\"  * @param <<E> Type\\n\" + ", "+\t\t\t\t\t\"  * @param <<<E> Type\\n\" + ", "+\t\t\t\t\t\"  * @param <E>> Type\\n\" + ", "+\t\t\t\t\t\"  */\\n\" + ", "+\t\t\t\t\t\" public class X<E> {}\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\t* @param <E Type\\n\" + ", "+\t\t\t\t\"\t         ^^\\n\" + ", "+\t\t\t\t\"Javadoc: Invalid param tag type parameter name\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\t* @param E> Type\\n\" + ", "+\t\t\t\t\"\t         ^^\\n\" + ", "+\t\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\t* @param <<E> Type\\n\" + ", "+\t\t\t\t\"\t         ^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Invalid param tag type parameter name\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\t* @param <<<E> Type\\n\" + ", "+\t\t\t\t\"\t         ^^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Invalid param tag type parameter name\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\t* @param <E>> Type\\n\" + ", "+\t\t\t\t\"\t         ^^^^\\n\" + ", "+\t\t\t\t\"Javadoc: Invalid param tag type parameter name\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"6. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\t\"\tpublic class X<E> {}\\n\" + ", "+\t\t\t\t\"\t               ^\\n\" + ", "+\t\t\t\t\"Javadoc: Missing tag for parameter E\\n\" + ", "+\t\t\t\t\"----------\\n\"", "+\t\t);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d5363597e3c8bb0a01c086d8278ac73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c21920e168213fd0aca47b013f14cfc667141d9a", "commitAfterChange": "6ab08c93576091a47827aa45cdb7ba0e6cb43f77", "methodNumberBeforeChange": 830, "methodNumberAfterChange": 830, "signatureBeforeChange": " public void test0809()", "signatureAfterChange": " public void test0809()", "diff": ["-\t\t\tITERATOR_IMPL_JRE8.replaceAll(\"\\\\*\", \"N\") +", "-\t\t\"1. WARNING in X.java (at line 23)\\n\" +", "+\t\t\"1. WARNING in X.java (at line 21)\\n\" +", "-\t\t\"2. ERROR in X.java (at line 24)\\n\" +", "+\t\t\"2. ERROR in X.java (at line 22)\\n\" +", "-\t\t\"3. ERROR in X.java (at line 27)\\n\" +", "+\t\t\"3. ERROR in X.java (at line 25)\\n\" +", "-\t\t\"4. WARNING in X.java (at line 37)\\n\" +", "+\t\t\"4. WARNING in X.java (at line 35)\\n\" +", "-\t\t\"5. ERROR in X.java (at line 40)\\n\" +", "+\t\t\"5. ERROR in X.java (at line 38)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af847015c8708324c6ed4bc1ff7081be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java", "commitBeforeChange": "51e1f00f8d474f0b209b47afa85e44328a517f92", "commitAfterChange": "4fd98abe69a6425880abe243fa431e365710bef2", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 104, "signatureBeforeChange": " public void test_nesting_1()", "signatureAfterChange": " public void test_nesting_1()", "diff": ["-// a nonnull variable is dereferenced method of a nested type", "+// a nonnull variable is dereferenced in a method of a nested type", "-\t\t\t\"@NonNullByDefault\\n\" +", "-\t\t\"1. ERROR in X.java (at line 16)\\n\" +", "+\t\t\"1. ERROR in X.java (at line 15)\\n\" +", "-\t\t\"2. ERROR in X.java (at line 25)\\n\" +", "+\t\t\"2. ERROR in X.java (at line 24)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba8b1adfa79fb81ebe99afb4b85e4c1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_5.java", "commitBeforeChange": "7aa41fe639eb46a740b35e612973cada9ba8267f", "commitAfterChange": "7ec8f457fa5afa1822c5c5a2c51b29731a82c4ce", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 102, "signatureBeforeChange": " \t \tpublic void testBug209936b()", "signatureAfterChange": " \tpublic void testBug209936a()", "diff": ["-\t", "-\tpublic void testBug209936b() {", "-\t\treportMissingJavadocTags = CompilerOptions.IGNORE;", "-\t\treportMissingJavadocComments = CompilerOptions.IGNORE;", "-\t\treportMissingJavadocCommentsVisibility = CompilerOptions.IGNORE;", "-\t\trunNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"p/X.java\",", "-\t\t\t\t\"package p;\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"public abstract class X extends Y {\\n\" + ", "-\t\t\t\t\"\tprotected class A extends Member {\\n\" + ", "-\t\t\t\t\"\t\t/**\\n\" + ", "-\t\t\t\t\"\t\t * @see Member#foo(Object, Object)\\n\" + ", "-\t\t\t\t\"\t\t */\\n\" + ", "-\t\t\t\t\"\t\tpublic void foo(Object source, Object data) {}\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\",", "-\t\t\t\t\"p/Y.java\",", "-\t\t\t\t\"package p;\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"import p1.Z;\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"public abstract class Y extends Z<Object> {\\n\" + ", "-\t\t\t\t\"}\",", "-\t\t\t\t\"p1/Z.java\",", "-\t\t\t\t\"package p1;\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"public abstract class Z<T> {\\n\" + ", "-\t\t\t\t\"\tprotected class Member {\\n\" + ", "-\t\t\t\t\"\t\tprotected void foo(Object source, Object data) {\\n\" + ", "-\t\t\t\t\"\t\t}\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in p\\\\X.java (at line 6)\\n\" + ", "-\t\t\t\"\t* @see Member#foo(Object, Object)\\n\" + ", "-\t\t\t\"\t              ^^^\\n\" + ", "-\t\t\t\"Javadoc: The method foo(Object, Object) from the type Z<T>.Member is not visible\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "-\t}", "+\t */", "+\tpublic void testBug209936a() {", "+\t\treportMissingJavadocCommentsVisibility = CompilerOptions.WARNING;", "+\t\trunNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"p/X.java\",", "+\t\t\t\t\"package p;\\n\" + ", "+\t\t\t\t\"public abstract class X extends Y {\\n\" + ", "+\t\t\t\t\"\tprotected class A extends Member {\\n\" + ", "+\t\t\t\t\"\t\t/**\\n\" + ", "+\t\t\t\t\"\t\t * @see Member#foo(Object, Object)\\n\" + ", "+\t\t\t\t\"\t\t */\\n\" + ", "+\t\t\t\t\"\t\tpublic void foo(Object source, Object data) {}\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t\t\t\"p/Y.java\",", "+\t\t\t\t\"package p;\\n\" + ", "+\t\t\t\t\"import p1.Z;\\n\" + ", "+\t\t\t\t\"public abstract class Y extends Z<Object> {\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t\t\t\"p1/Z.java\",", "+\t\t\t\t\"package p1;\\n\" + ", "+\t\t\t\t\"public abstract class Z<T> {\\n\" + ", "+\t\t\t\t\"\tprotected class Member {\\n\" + ", "+\t\t\t\t\"\t\tprotected void foo(Object source, Object data) {\\n\" + ", "+\t\t\t\t\"\t\t}\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in p\\\\X.java (at line 5)\\n\" + ", "+\t\t\t\"\t* @see Member#foo(Object, Object)\\n\" + ", "+\t\t\t\"\t       ^^^^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);", "+\t}"]}], "num": 58836}
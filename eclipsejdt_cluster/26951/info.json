{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c05bfcb74d0e5b4cf8e3a81a3755aed", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22b0c421364c6190f41ca6a5144ccf5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 39, "signatureBeforeChange": " public void searchAllTypeNames( \tIWorkspace workspace, \tfinal char[] packageName,  \tfinal char[] typeName, \tfinal int matchMode,  \tfinal boolean isCaseSensitive, \tint searchFor,  \tIJavaSearchScope scope,  \tfinal ITypeNameRequestor nameRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tIWorkspace workspace, \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchMode,  \t\tfinal boolean isCaseSensitive, \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal ITypeNameRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["- */", "-public void searchAllTypeNames(", "-\tIWorkspace workspace,", "-\tfinal char[] packageName, ", "-\tfinal char[] typeName,", "-\tfinal int matchMode, ", "-\tfinal boolean isCaseSensitive,", "-\tint searchFor, ", "-\tIJavaSearchScope scope, ", "-\tfinal ITypeNameRequestor nameRequestor,", "-\tint waitingPolicy,", "-\tIProgressMonitor progressMonitor)  throws JavaModelException {", "-", "-\tIndexManager indexManager = JavaModelManager.getJavaModelManager().getIndexManager();", "-\t\t", "-\tfinal char classOrInterface;", "-\tswitch(searchFor){", "-\t\tcase IJavaSearchConstants.CLASS :", "-\t\t\tclassOrInterface = IIndexConstants.CLASS_SUFFIX;", "-\t\t\tbreak;", "-\t\tcase IJavaSearchConstants.INTERFACE :", "-\t\t\tclassOrInterface = IIndexConstants.INTERFACE_SUFFIX;", "-\t\t\tbreak;", "-\t\tdefault : ", "-\t\t\tclassOrInterface = IIndexConstants.TYPE_SUFFIX;", "-\t\t\tbreak;", "-\t}", "-\tSearchPattern pattern = new TypeDeclarationPattern(", "-\t\tpackageName,", "-\t\tnull, // do find member types", "-\t\ttypeName,", "-\t\tclassOrInterface,", "-\t\tmatchMode, ", "-\t\tisCaseSensitive);", "-\tfinal HashSet workingCopyPaths = new HashSet();", "-\tICompilationUnit[] copies = getWorkingCopies();", "-\tif (copies != null) {", "-\t\tfor (int i = 0, length = copies.length; i < length; i++) {", "-\t\t\tICompilationUnit workingCopy = copies[i];", "-\t\t\tworkingCopyPaths.add(workingCopy.getPath().toString());", "-\t\t}", "-\tIIndexSearchRequestor searchRequestor = new IndexSearchAdapter(){", "-\t\tpublic void acceptClassDeclaration(String resourcePath, char[] simpleTypeName, char[][] enclosingTypeNames, char[] pkgName) {", "-\t\t\tif (enclosingTypeNames != IIndexConstants.ONE_ZERO_CHAR  // filter out local and anonymous classes", "-\t\t\t\t\t&& !workingCopyPaths.contains(resourcePath)) { // filter out working copies", "-\t\t\t\tnameRequestor.acceptClass(pkgName, simpleTypeName, enclosingTypeNames, resourcePath);", "-\t\t\t}", "-\t\t}\t\t", "-\t\tpublic void acceptInterfaceDeclaration(String resourcePath, char[] simpleTypeName, char[][] enclosingTypeNames, char[] pkgName) {", "-\t\t\tif (enclosingTypeNames != IIndexConstants.ONE_ZERO_CHAR  // filter out local and anonymous classes", "-\t\t\t\t\t&& !workingCopyPaths.contains(resourcePath)) { // filter out working copies", "-\t\t\t\tnameRequestor.acceptInterface(pkgName, simpleTypeName, enclosingTypeNames, resourcePath);", "-\t\t\t}", "-\t\t}\t\t", "-\t};", "-", "-\ttry {", "-\t\tif (progressMonitor != null) {", "-\t\t\tprogressMonitor.beginTask(Util.bind(\"engine.searching\"), 100); //$NON-NLS-1$", "-\t\t}", "-\t\t// add type names from indexes", "-\t\tindexManager.performConcurrentJob(", "-\t\t\tnew PatternSearchJob(pattern, scope, searchRequestor, indexManager),", "-\t\t\twaitingPolicy,", "-\t\t\tprogressMonitor == null ? null : new SubProgressMonitor(progressMonitor, 100));\t", "-\t\t\t", "-\t\t// add type names from working copies", "-\t\tif (copies != null) {", "-\t\t\tfor (int i = 0, length = copies.length; i < length; i++) {", "-\t\t\t\tICompilationUnit workingCopy = copies[i];", "-\t\t\t\tfinal String path = workingCopy.getPath().toString();", "-\t\t\t\tif (workingCopy.isConsistent()) {", "-\t\t\t\t\tIPackageDeclaration[] packageDeclarations = workingCopy.getPackageDeclarations();", "-\t\t\t\t\tchar[] packageDeclaration = packageDeclarations.length == 0 ? CharOperation.NO_CHAR : packageDeclarations[0].getElementName().toCharArray();", "-\t\t\t\t\tIType[] allTypes = workingCopy.getAllTypes();", "-\t\t\t\t\tfor (int j = 0, allTypesLength = allTypes.length; j < allTypesLength; j++) {", "-\t\t\t\t\t\tIType type = allTypes[j];", "-\t\t\t\t\t\tIJavaElement parent = type.getParent();", "-\t\t\t\t\t\tchar[][] enclosingTypeNames;", "-\t\t\t\t\t\tif (parent instanceof IType) {", "-\t\t\t\t\t\t\tchar[] parentQualifiedName = ((IType)parent).getTypeQualifiedName('.').toCharArray();", "-\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.splitOn('.', parentQualifiedName);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.NO_CHAR_CHAR;", "-\t\t\t\t\t\tchar[] simpleName = type.getElementName().toCharArray();", "-\t\t\t\t\t\tif (match(classOrInterface, packageName, typeName, matchMode, isCaseSensitive, type.isClass(), packageDeclaration, simpleName)) {", "-\t\t\t\t\t\t\tif (type.isClass()) {", "-\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, simpleName, enclosingTypeNames, path);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, simpleName, enclosingTypeNames, path);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\tParser basicParser = getParser();", "-\t\t\t\t\tfinal char[] contents = workingCopy.getBuffer().getCharacters();", "-\t\t\t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit unit = new org.eclipse.jdt.internal.compiler.env.ICompilationUnit() {", "-\t\t\t\t\t\tpublic char[] getContents() {", "-\t\t\t\t\t\t\treturn contents;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tpublic char[] getMainTypeName() {", "-\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tpublic char[][] getPackageName() {", "-\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tpublic char[] getFileName() {", "-\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t};", "-\t\t\t\t\tCompilationResult compilationUnitResult = new CompilationResult(unit, 0, 0, this.compilerOptions.maxProblemsPerUnit);", "-\t\t\t\t\tCompilationUnitDeclaration parsedUnit = basicParser.dietParse(unit, compilationUnitResult);", "-\t\t\t\t\tif (parsedUnit != null) {", "-\t\t\t\t\t\tfinal char[] packageDeclaration = parsedUnit.currentPackage == null ? CharOperation.NO_CHAR : CharOperation.concatWith(parsedUnit.currentPackage.getImportName(), '.');", "-\t\t\t\t\t\tclass AllTypeDeclarationsVisitor extends ASTVisitor {", "-\t\t\t\t\t\t\tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope blockScope) {", "-\t\t\t\t\t\t\t\treturn false; // no local/anonymous type", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tpublic boolean visit(TypeDeclaration typeDeclaration, CompilationUnitScope compilationUnitScope) {", "-\t\t\t\t\t\t\t\tif (match(classOrInterface, packageName, typeName, matchMode, isCaseSensitive, !typeDeclaration.isInterface(), packageDeclaration, typeDeclaration.name)) {", "-\t\t\t\t\t\t\t\t\tif (!typeDeclaration.isInterface()) {", "-\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tpublic boolean visit(TypeDeclaration memberTypeDeclaration, ClassScope classScope) {", "-\t\t\t\t\t\t\t\tif (match(classOrInterface, packageName, typeName, matchMode, isCaseSensitive, !memberTypeDeclaration.isInterface(), packageDeclaration, memberTypeDeclaration.name)) {", "-\t\t\t\t\t\t\t\t\t// compute encloising type names", "-\t\t\t\t\t\t\t\t\tTypeDeclaration enclosing = memberTypeDeclaration.enclosingType;", "-\t\t\t\t\t\t\t\t\tchar[][] enclosingTypeNames = CharOperation.NO_CHAR_CHAR;", "-\t\t\t\t\t\t\t\t\twhile (enclosing != null) {", "-\t\t\t\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.arrayConcat(new char[][] {enclosing.name}, enclosingTypeNames);", "-\t\t\t\t\t\t\t\t\t\tif ((enclosing.bits & ASTNode.IsMemberTypeMASK) != 0) {", "-\t\t\t\t\t\t\t\t\t\t\tenclosing = enclosing.enclosingType;", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tenclosing = null;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t// report", "-\t\t\t\t\t\t\t\t\tif (!memberTypeDeclaration.isInterface()) {", "-\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tparsedUnit.traverse(new AllTypeDeclarationsVisitor(), parsedUnit.scope);", "-\t\t}\t", "-\t} finally {", "-\t\tif (progressMonitor != null) {", "-\t\t\tprogressMonitor.done();", "-\t}", "-}", "+\t */", "+\tpublic void searchAllTypeNames(", "+\t\tIWorkspace workspace,", "+\t\tfinal char[] packageName, ", "+\t\tfinal char[] typeName,", "+\t\tfinal int matchMode, ", "+\t\tfinal boolean isCaseSensitive,", "+\t\tint searchFor, ", "+\t\tIJavaSearchScope scope, ", "+\t\tfinal ITypeNameRequestor nameRequestor,", "+\t\tint waitingPolicy,", "+\t\tIProgressMonitor progressMonitor)  throws JavaModelException {", "+\t", "+\t\tIndexManager indexManager = JavaModelManager.getJavaModelManager().getIndexManager();", "+\t\t\t", "+\t\tfinal char classOrInterface;", "+\t\tswitch(searchFor){", "+\t\t\tcase IJavaSearchConstants.CLASS :", "+\t\t\t\tclassOrInterface = IIndexConstants.CLASS_SUFFIX;", "+\t\t\t\tbreak;", "+\t\t\tcase IJavaSearchConstants.INTERFACE :", "+\t\t\t\tclassOrInterface = IIndexConstants.INTERFACE_SUFFIX;", "+\t\t\t\tbreak;", "+\t\t\tdefault : ", "+\t\t\t\tclassOrInterface = IIndexConstants.TYPE_SUFFIX;", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tfinal TypeDeclarationPattern pattern = new TypeDeclarationPattern(", "+\t\t\tpackageName,", "+\t\t\tnull, // do find member types", "+\t\t\ttypeName,", "+\t\t\tclassOrInterface,", "+\t\t\tisCaseSensitive ? matchMode | SearchPattern.R_CASE_SENSITIVE : matchMode);", "+\t\t", "+\t\tfinal HashSet workingCopyPaths = new HashSet();", "+\t\tICompilationUnit[] copies = getWorkingCopies();", "+\t\tif (copies != null) {", "+\t\t\tfor (int i = 0, length = copies.length; i < length; i++) {", "+\t\t\t\tICompilationUnit workingCopy = copies[i];", "+\t\t\t\tworkingCopyPaths.add(workingCopy.getPath().toString());", "+\t\t\t}", "+\t\t}", "+\t", "+\t\tIndexQueryRequestor searchRequestor = new IndexQueryRequestor(){", "+\t\t\tpublic boolean acceptIndexMatch(String documentPath, SearchPattern indexRecord, SearchParticipant participant) {", "+\t\t\t\tTypeDeclarationPattern record = (TypeDeclarationPattern)indexRecord;", "+\t\t\t\tif (record.enclosingTypeNames != IIndexConstants.ONE_ZERO_CHAR  // filter out local and anonymous classes", "+\t\t\t\t\t\t&& !workingCopyPaths.contains(documentPath)) { // filter out working copies", "+\t\t\t\t\tboolean isClass = record.classOrInterface != IIndexConstants.INTERFACE_SUFFIX;", "+\t\t\t\t\tif (isClass) {", "+\t\t\t\t\t\tnameRequestor.acceptClass(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tnameRequestor.acceptInterface(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t};", "+\t", "+\t\ttry {", "+\t\t\tif (progressMonitor != null) {", "+\t\t\t\tprogressMonitor.beginTask(Util.bind(\"engine.searching\"), 100); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\t// add type names from indexes", "+\t\t\tindexManager.performConcurrentJob(", "+\t\t\t\tnew PatternSearchJob(", "+\t\t\t\t\tpattern, ", "+\t\t\t\t\tnew JavaSearchParticipant(getWorkingCopies()), // java search only", "+\t\t\t\t\tscope, ", "+\t\t\t\t\tsearchRequestor),", "+\t\t\t\twaitingPolicy,", "+\t\t\t\tprogressMonitor == null ? null : new SubProgressMonitor(progressMonitor, 100));\t", "+\t\t\t\t", "+\t\t\t// add type names from working copies", "+\t\t\tif (copies != null) {", "+\t\t\t\tfor (int i = 0, length = copies.length; i < length; i++) {", "+\t\t\t\t\tICompilationUnit workingCopy = copies[i];", "+\t\t\t\t\tfinal String path = workingCopy.getPath().toString();", "+\t\t\t\t\tif (workingCopy.isConsistent()) {", "+\t\t\t\t\t\tIPackageDeclaration[] packageDeclarations = workingCopy.getPackageDeclarations();", "+\t\t\t\t\t\tchar[] packageDeclaration = packageDeclarations.length == 0 ? CharOperation.NO_CHAR : packageDeclarations[0].getElementName().toCharArray();", "+\t\t\t\t\t\tIType[] allTypes = workingCopy.getAllTypes();", "+\t\t\t\t\t\tfor (int j = 0, allTypesLength = allTypes.length; j < allTypesLength; j++) {", "+\t\t\t\t\t\t\tIType type = allTypes[j];", "+\t\t\t\t\t\t\tIJavaElement parent = type.getParent();", "+\t\t\t\t\t\t\tchar[][] enclosingTypeNames;", "+\t\t\t\t\t\t\tif (parent instanceof IType) {", "+\t\t\t\t\t\t\t\tchar[] parentQualifiedName = ((IType)parent).getTypeQualifiedName('.').toCharArray();", "+\t\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.splitOn('.', parentQualifiedName);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.NO_CHAR_CHAR;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tchar[] simpleName = type.getElementName().toCharArray();", "+\t\t\t\t\t\t\tif (match(classOrInterface, packageName, typeName, matchMode, isCaseSensitive, type.isClass(), packageDeclaration, simpleName)) {", "+\t\t\t\t\t\t\t\tif (type.isClass()) {", "+\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, simpleName, enclosingTypeNames, path);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, simpleName, enclosingTypeNames, path);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tParser basicParser = getParser();", "+\t\t\t\t\t\tfinal char[] contents = workingCopy.getBuffer().getCharacters();", "+\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit unit = new org.eclipse.jdt.internal.compiler.env.ICompilationUnit() {", "+\t\t\t\t\t\t\tpublic char[] getContents() {", "+\t\t\t\t\t\t\t\treturn contents;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tpublic char[] getMainTypeName() {", "+\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tpublic char[][] getPackageName() {", "+\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tpublic char[] getFileName() {", "+\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t};", "+\t\t\t\t\t\tCompilationResult compilationUnitResult = new CompilationResult(unit, 0, 0, this.compilerOptions.maxProblemsPerUnit);", "+\t\t\t\t\t\tCompilationUnitDeclaration parsedUnit = basicParser.dietParse(unit, compilationUnitResult);", "+\t\t\t\t\t\tif (parsedUnit != null) {", "+\t\t\t\t\t\t\tfinal char[] packageDeclaration = parsedUnit.currentPackage == null ? CharOperation.NO_CHAR : CharOperation.concatWith(parsedUnit.currentPackage.getImportName(), '.');", "+\t\t\t\t\t\t\tclass AllTypeDeclarationsVisitor extends ASTVisitor {", "+\t\t\t\t\t\t\t\tpublic boolean visit(TypeDeclaration typeDeclaration, BlockScope blockScope) {", "+\t\t\t\t\t\t\t\t\treturn false; // no local/anonymous type", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tpublic boolean visit(TypeDeclaration typeDeclaration, CompilationUnitScope compilationUnitScope) {", "+\t\t\t\t\t\t\t\t\tif (match(classOrInterface, packageName, typeName, matchMode, isCaseSensitive, !typeDeclaration.isInterface(), packageDeclaration, typeDeclaration.name)) {", "+\t\t\t\t\t\t\t\t\t\tif (!typeDeclaration.isInterface()) {", "+\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tpublic boolean visit(TypeDeclaration memberTypeDeclaration, ClassScope classScope) {", "+\t\t\t\t\t\t\t\t\tif (match(classOrInterface, packageName, typeName, matchMode, isCaseSensitive, !memberTypeDeclaration.isInterface(), packageDeclaration, memberTypeDeclaration.name)) {", "+\t\t\t\t\t\t\t\t\t\t// compute encloising type names", "+\t\t\t\t\t\t\t\t\t\tTypeDeclaration enclosing = memberTypeDeclaration.enclosingType;", "+\t\t\t\t\t\t\t\t\t\tchar[][] enclosingTypeNames = CharOperation.NO_CHAR_CHAR;", "+\t\t\t\t\t\t\t\t\t\twhile (enclosing != null) {", "+\t\t\t\t\t\t\t\t\t\t\tenclosingTypeNames = CharOperation.arrayConcat(new char[][] {enclosing.name}, enclosingTypeNames);", "+\t\t\t\t\t\t\t\t\t\t\tif ((enclosing.bits & ASTNode.IsMemberTypeMASK) != 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\tenclosing = enclosing.enclosingType;", "+\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\tenclosing = null;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t// report", "+\t\t\t\t\t\t\t\t\t\tif (!memberTypeDeclaration.isInterface()) {", "+\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tparsedUnit.traverse(new AllTypeDeclarationsVisitor(), parsedUnit.scope);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}\t", "+\t\t} finally {", "+\t\t\tif (progressMonitor != null) {", "+\t\t\t\tprogressMonitor.done();", "+\t\t\t}", "+\t\t}", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4320fa571a927443377b6d43e17463b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public static void searchAllPossibleSubTypes( \tIType type, \tIJavaSearchScope scope, \tfinal Map binariesFromIndexMatches, \tfinal IPathRequestor pathRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)", "signatureAfterChange": "  public static void searchAllPossibleSubTypes( \tIType type, \tIJavaSearchScope scope, \tfinal Map binariesFromIndexMatches, \tfinal IPathRequestor pathRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)", "diff": ["-\tIIndexSearchRequestor searchRequestor = new IndexSearchAdapter(){", "-\t\tpublic void acceptSuperTypeReference(String resourcePath, char[] qualification, char[] typeName, char[] enclosingTypeName, char classOrInterface, char[] superQualification, char[] superTypeName, char superClassOrInterface, int modifiers) {", "-\t\t\tpathRequestor.acceptPath(resourcePath, enclosingTypeName == IIndexConstants.ONE_ZERO);", "-\t\t\tint suffix = resourcePath.toLowerCase().indexOf(SUFFIX_STRING_class);", "+\tIndexQueryRequestor searchRequestor = new IndexQueryRequestor() {", "+\t\tpublic boolean acceptIndexMatch(String documentPath, SearchPattern indexRecord, SearchParticipant participant) {", "+\t\t\tSuperTypeReferencePattern record = (SuperTypeReferencePattern)indexRecord;", "+\t\t\tpathRequestor.acceptPath(documentPath, record.enclosingTypeName == IIndexConstants.ONE_ZERO);", "+\t\t\tchar[] typeName = record.simpleName;", "+\t\t\tint suffix = documentPath.toLowerCase().indexOf(SUFFIX_STRING_class);", "-\t\t\t\tHierarchyBinaryType binaryType = (HierarchyBinaryType)binariesFromIndexMatches.get(resourcePath);", "+\t\t\t\tHierarchyBinaryType binaryType = (HierarchyBinaryType)binariesFromIndexMatches.get(documentPath);", "+\t\t\t\t\tchar[] enclosingTypeName = record.enclosingTypeName;", "-\t\t\t\t\t\tint lastSlash = resourcePath.lastIndexOf('/');", "-\t\t\t\t\t\tif (lastSlash == -1) return;", "-\t\t\t\t\t\tint lastDollar = resourcePath.lastIndexOf('$');", "-\t\t\t\t\t\tif (lastDollar == -1) return;", "-\t\t\t\t\t\tenclosingTypeName = resourcePath.substring(lastSlash+1, lastDollar).toCharArray();", "-\t\t\t\t\t\ttypeName = resourcePath.substring(lastDollar+1, suffix).toCharArray();", "+\t\t\t\t\t\tint lastSlash = documentPath.lastIndexOf('/');", "+\t\t\t\t\t\tif (lastSlash == -1) return true;", "+\t\t\t\t\t\tint lastDollar = documentPath.lastIndexOf('$');", "+\t\t\t\t\t\tif (lastDollar == -1) return true;", "+\t\t\t\t\t\tenclosingTypeName = documentPath.substring(lastSlash+1, lastDollar).toCharArray();", "+\t\t\t\t\t\ttypeName = documentPath.substring(lastDollar+1, suffix).toCharArray();", "-\t\t\t\t\tbinaryType = new HierarchyBinaryType(modifiers, qualification, typeName, enclosingTypeName, classOrInterface);", "-\t\t\t\t\tbinariesFromIndexMatches.put(resourcePath, binaryType);", "+\t\t\t\t\tbinaryType = new HierarchyBinaryType(record.modifiers, record.pkgName, typeName, enclosingTypeName, record.classOrInterface);", "+\t\t\t\t\tbinariesFromIndexMatches.put(documentPath, binaryType);", "-\t\t\t\tbinaryType.recordSuperType(superTypeName, superQualification, superClassOrInterface);", "+\t\t\t\tbinaryType.recordSuperType(record.superSimpleName, record.superQualification, record.superClassOrInterface);", "+\t\t\treturn true;", "-\tSuperTypeReferencePattern pattern = new SuperTypeReferencePattern(null, null, IJavaSearchConstants.EXACT_MATCH, IJavaSearchConstants.CASE_SENSITIVE);", "+\tSuperTypeReferencePattern pattern = new SuperTypeReferencePattern(null, null, SearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE);", "-\t\t\t\tpattern, ", "-\t\t\t\tscope,", "-\t\t\t\tsearchRequestor, ", "-\t\t\t\tindexManager);", "+\t\tpattern, ", "+\t\tnew JavaSearchParticipant(null), // java search only", "+\t\tscope, ", "+\t\tsearchRequestor);"]}], "num": 26951}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f4ca886b8a01895d2f2d6f493f2fed4c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f50431fc8ac8a70f01cc395ef021f28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "0b147b41fd14622e58b9abe70d023e6b22dcfbf7", "commitAfterChange": "224ac51338df376ffd0a9a55fd7c92d9e76b9040", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r private static SearchPattern createTypePattern(String fullyQualifiedName, int limitTo)", "signatureAfterChange": "\r private static SearchPattern createTypePattern(char[] simpleName, char[] packageName, char[][] enclosingTypeNames, int limitTo)", "diff": ["-private static SearchPattern createTypePattern(String fullyQualifiedName, int limitTo) {\r", "+private static SearchPattern createTypePattern(char[] simpleName, char[] packageName, char[][] enclosingTypeNames, int limitTo) {\r", "-\tint lastDot = fullyQualifiedName.lastIndexOf('.');\r", "-\tint lastDollar = fullyQualifiedName.lastIndexOf('$');\r", "-\tif (lastDollar < lastDot) lastDollar = -1; // must be in last segment\r", "-\tchar[] enclosingTypeName, simpleName;\r", "-\tif (lastDollar >= 0){\r", "-\t\tenclosingTypeName = fullyQualifiedName.substring(lastDot+1, lastDollar).toCharArray();\r", "-\t\tsimpleName = fullyQualifiedName.substring(lastDollar+1, fullyQualifiedName.length()).toCharArray();\r", "-\t} else {\r", "-\t\tenclosingTypeName = NO_CHAR;\r", "-\t\tsimpleName = (lastDot != -1 ? fullyQualifiedName.substring(lastDot + 1) : fullyQualifiedName).toCharArray();\r", "-\t}\r", "-\tchar[] qualification = lastDot != -1 ? fullyQualifiedName.substring(0, lastDot).toCharArray() : null;\r", "-\t\r", "-\t\t\tchar[][] enclosingTypeNames = CharOperation.splitOn('$', enclosingTypeName);\r", "-\t\t\tsearchPattern = new TypeDeclarationPattern(qualification, enclosingTypeNames, simpleName, TYPE_SUFFIX, EXACT_MATCH, CASE_SENSITIVE);\r", "+\t\t\tsearchPattern = \r", "+\t\t\t\tnew TypeDeclarationPattern(\r", "+\t\t\t\t\tpackageName, \r", "+\t\t\t\t\tenclosingTypeNames, \r", "+\t\t\t\t\tsimpleName, \r", "+\t\t\t\t\tTYPE_SUFFIX, \r", "+\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\tCASE_SENSITIVE);\r", "-\t\t\tif (enclosingTypeName.length > 0) {\r", "-\t\t\t\tqualification = CharOperation.concat(qualification, enclosingTypeName, '.');\r", "-\t\t\t}\r", "-\t\t\tsearchPattern = new TypeReferencePattern(qualification, simpleName, EXACT_MATCH, CASE_SENSITIVE);\r", "+\t\t\tsearchPattern = \r", "+\t\t\t\tnew TypeReferencePattern(\r", "+\t\t\t\t\tCharOperation.concatWith(packageName, enclosingTypeNames, '.'), \r", "+\t\t\t\t\tsimpleName, \r", "+\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\tCASE_SENSITIVE);\r", "-\t\t\tsearchPattern = new SuperInterfaceReferencePattern(qualification, simpleName, EXACT_MATCH, CASE_SENSITIVE);\r", "+\t\t\tsearchPattern = \r", "+\t\t\t\tnew SuperInterfaceReferencePattern(\r", "+\t\t\t\t\tCharOperation.concatWith(packageName, enclosingTypeNames, '.'), \r", "+\t\t\t\t\tsimpleName, \r", "+\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\tCASE_SENSITIVE);\r", "-\t\t\tchar[] fullQualification;\r", "-\t\t\tif (enclosingTypeName.length > 0) {\r", "-\t\t\t\tfullQualification = CharOperation.concat(qualification, enclosingTypeName, '.');\r", "-\t\t\t\tenclosingTypeNames = CharOperation.splitOn('$', enclosingTypeName);\r", "-\t\t\t} else {\r", "-\t\t\t\tfullQualification = qualification;\r", "-\t\t\t\tenclosingTypeNames = NO_CHAR_CHAR;\r", "-\t\t\t}\r", "-\t\t\t\tnew TypeDeclarationPattern(qualification, enclosingTypeNames, simpleName, TYPE_SUFFIX, EXACT_MATCH, CASE_SENSITIVE), \r", "-\t\t\t\tnew TypeReferencePattern(fullQualification, simpleName, EXACT_MATCH, CASE_SENSITIVE));\r", "+\t\t\t\tnew TypeDeclarationPattern(\r", "+\t\t\t\t\tpackageName, \r", "+\t\t\t\t\tenclosingTypeNames, \r", "+\t\t\t\t\tsimpleName, \r", "+\t\t\t\t\tTYPE_SUFFIX, \r", "+\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\tCASE_SENSITIVE), \r", "+\t\t\t\tnew TypeReferencePattern(\r", "+\t\t\t\t\tCharOperation.concatWith(packageName, enclosingTypeNames, '.'), \r", "+\t\t\t\t\tsimpleName, \r", "+\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\tCASE_SENSITIVE));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b68dd791547728f5c8cb76076e2db945", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate static SearchPattern createFieldPattern(String patternString, int limitTo, int matchRule)", "signatureAfterChange": " \tprivate static SearchPattern createFieldPattern(String patternString, int limitTo, int matchRule)", "diff": ["-\t\t\t\t\t\t\t\tString tokenSource = new String(scanner.getCurrentTokenSource());", "+\t\t\t\t\t\t\t\tString tokenSource = scanner.getCurrentTokenString();", "-\t\t\t\t\t\t\t\tfieldName = new String(scanner.getCurrentTokenSource());", "+\t\t\t\t\t\t\t\tfieldName = scanner.getCurrentTokenString();", "-\t\t\t\t\t\t\t\tfieldName += new String(scanner.getCurrentTokenSource());", "+\t\t\t\t\t\t\t\tfieldName += scanner.getCurrentTokenString();", "-\t\t\t\t\t\t\t\ttype = new String(scanner.getCurrentTokenSource());", "+\t\t\t\t\t\t\t\ttype = scanner.getCurrentTokenString();", "-\t\t\t\t\t\t\t\ttype += new String(scanner.getCurrentTokenSource());", "+\t\t\t\t\t\t\t\ttype += scanner.getCurrentTokenString();", "+\t\t// Create field pattern", "+\t\tboolean findDeclarations = false;", "+\t\tboolean readAccess = false;", "+\t\tboolean writeAccess = false;", "-\t\t\t\treturn new FieldPattern(", "-\t\t\t\t\ttrue,", "-\t\t\t\t\tfalse,", "-\t\t\t\t\tfalse,", "-\t\t\t\t\tfieldNameChars,", "-\t\t\t\t\tdeclaringTypeQualification,", "-\t\t\t\t\tdeclaringTypeSimpleName,", "-\t\t\t\t\ttypeQualification,", "-\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\tmatchRule);", "+\t\t\t\tfindDeclarations = true;", "+\t\t\t\tbreak;", "-\t\t\t\treturn new FieldPattern(", "-\t\t\t\t\tfalse,", "-\t\t\t\t\ttrue, // read access", "-\t\t\t\t\ttrue, // write access", "-\t\t\t\t\tfieldNameChars, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\tmatchRule);", "+\t\t\t\treadAccess = true;", "+\t\t\t\twriteAccess = true;", "+\t\t\t\tbreak;", "-\t\t\t\treturn new FieldPattern(", "-\t\t\t\t\tfalse,", "-\t\t\t\t\ttrue, // read access only", "-\t\t\t\t\tfalse,", "-\t\t\t\t\tfieldNameChars, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\tmatchRule);", "+\t\t\t\treadAccess = true;", "+\t\t\t\tbreak;", "-\t\t\t\treturn new FieldPattern(", "-\t\t\t\t\tfalse,", "-\t\t\t\t\tfalse,", "-\t\t\t\t\ttrue, // write access only", "-\t\t\t\t\tfieldNameChars, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\tmatchRule);", "+\t\t\t\twriteAccess = true;", "+\t\t\t\tbreak;", "-\t\t\t\treturn new FieldPattern(", "-\t\t\t\t\ttrue,", "-\t\t\t\t\ttrue, // read access", "-\t\t\t\t\ttrue, // write access", "-\t\t\t\t\tfieldNameChars, ", "-\t\t\t\t\tdeclaringTypeQualification, ", "-\t\t\t\t\tdeclaringTypeSimpleName, ", "-\t\t\t\t\ttypeQualification, ", "-\t\t\t\t\ttypeSimpleName,", "-\t\t\t\t\tmatchRule);", "+\t\t\t\tfindDeclarations = true;", "+\t\t\t\treadAccess = true;", "+\t\t\t\twriteAccess = true;", "+\t\t\t\tbreak;", "-\t\treturn null;", "+\t\treturn new FieldPattern(", "+\t\t\t\tfindDeclarations,", "+\t\t\t\treadAccess,", "+\t\t\t\twriteAccess,", "+\t\t\t\tfieldNameChars,", "+\t\t\t\tdeclaringTypeQualification,", "+\t\t\t\tdeclaringTypeSimpleName,", "+\t\t\t\ttypeQualification,", "+\t\t\t\ttypeSimpleName,", "+\t\t\t\tmatchRule);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfbebbbc5ff8769618de2ba9e5586a8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "b3c49effd6a37f25d3bc9f0a1e991b665346dde6", "commitAfterChange": "350354f214ca227e1737fa04a92c132cd3211f35", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r private static SearchPattern createFieldPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "signatureAfterChange": "\r private static SearchPattern createFieldPattern(String patternString, int limitTo, int matchMode, boolean isCaseSensitive)", "diff": ["-\t\t\tsearchPattern = new FieldDeclarationPattern(fieldNameChars, matchMode, isCaseSensitive, declaringTypeQualification, declaringTypeSimpleName, typeQualification, typeSimpleName);\r", "+\t\t\tsearchPattern = \r", "+\t\t\t\tnew FieldDeclarationPattern(\r", "+\t\t\t\tfieldNameChars, \r", "+\t\t\t\tmatchMode, \r", "+\t\t\t\tisCaseSensitive, \r", "+\t\t\t\tdeclaringTypeQualification, \r", "+\t\t\t\tdeclaringTypeSimpleName, \r", "+\t\t\t\ttypeQualification, \r", "+\t\t\t\ttypeSimpleName);\r", "-\t\t\tsearchPattern = new FieldReferencePattern(fieldNameChars, matchMode, isCaseSensitive, declaringTypeQualification, declaringTypeSimpleName, typeQualification, typeSimpleName);\r", "+\t\t\tsearchPattern = \r", "+\t\t\t\tnew FieldReferencePattern(\r", "+\t\t\t\t\tfieldNameChars, \r", "+\t\t\t\t\tmatchMode, \r", "+\t\t\t\t\tisCaseSensitive, \r", "+\t\t\t\t\tdeclaringTypeQualification, \r", "+\t\t\t\t\tdeclaringTypeSimpleName, \r", "+\t\t\t\t\ttypeQualification, \r", "+\t\t\t\t\ttypeSimpleName,\r", "+\t\t\t\t\ttrue, // read access\r", "+\t\t\t\t\ttrue); // write access\r", "+\t\t\tbreak;\r", "+\t\tcase IJavaSearchConstants.READ_REFERENCES :\r", "+\t\t\tsearchPattern = \r", "+\t\t\t\tnew FieldReferencePattern(\r", "+\t\t\t\t\tfieldNameChars, \r", "+\t\t\t\t\tmatchMode, \r", "+\t\t\t\t\tisCaseSensitive, \r", "+\t\t\t\t\tdeclaringTypeQualification, \r", "+\t\t\t\t\tdeclaringTypeSimpleName, \r", "+\t\t\t\t\ttypeQualification, \r", "+\t\t\t\t\ttypeSimpleName,\r", "+\t\t\t\t\ttrue, // read access only\r", "+\t\t\t\t\tfalse);\r", "+\t\t\tbreak;\r", "+\t\tcase IJavaSearchConstants.WRITE_REFERENCES :\r", "+\t\t\tsearchPattern = \r", "+\t\t\t\tnew FieldReferencePattern(\r", "+\t\t\t\t\tfieldNameChars, \r", "+\t\t\t\t\tmatchMode, \r", "+\t\t\t\t\tisCaseSensitive, \r", "+\t\t\t\t\tdeclaringTypeQualification, \r", "+\t\t\t\t\tdeclaringTypeSimpleName, \r", "+\t\t\t\t\ttypeQualification, \r", "+\t\t\t\t\ttypeSimpleName,\r", "+\t\t\t\t\tfalse,\r", "+\t\t\t\t\ttrue); // write access only\r", "-\t\t\t\tnew FieldDeclarationPattern(fieldNameChars, matchMode, isCaseSensitive, declaringTypeQualification, declaringTypeSimpleName, typeQualification, typeSimpleName),\r", "-\t\t\t\tnew FieldReferencePattern(fieldNameChars, matchMode, isCaseSensitive, declaringTypeQualification, declaringTypeSimpleName, typeQualification, typeSimpleName));\r", "+\t\t\t\tnew FieldDeclarationPattern(\r", "+\t\t\t\t\tfieldNameChars, \r", "+\t\t\t\t\tmatchMode, \r", "+\t\t\t\t\tisCaseSensitive, \r", "+\t\t\t\t\tdeclaringTypeQualification, \r", "+\t\t\t\t\tdeclaringTypeSimpleName, \r", "+\t\t\t\t\ttypeQualification, \r", "+\t\t\t\t\ttypeSimpleName),\r", "+\t\t\t\tnew FieldReferencePattern(\r", "+\t\t\t\t\tfieldNameChars, \r", "+\t\t\t\t\tmatchMode, \r", "+\t\t\t\t\tisCaseSensitive, \r", "+\t\t\t\t\tdeclaringTypeQualification, \r", "+\t\t\t\t\tdeclaringTypeSimpleName, \r", "+\t\t\t\t\ttypeQualification, \r", "+\t\t\t\t\ttypeSimpleName,\r", "+\t\t\t\t\ttrue, // read access\r", "+\t\t\t\t\ttrue)); // write access\r"]}], "num": 69533}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4be7a5178a0bf2ab423943cce0594e4c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a341df79562f9646a8c1fbd05d55c03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "42c41aa4b22cf23b608272c59dfd7ac53eae5c74", "commitAfterChange": "40e03c0f2cb6d68da836ee023d4bc741c1ef6388", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "\r \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": "\r \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\t\t// copy the list, since single type imports are removed if they cannot be resolved\r", "-\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {\r", "-\t\t\t\tImportBinding typeImport = imports[i];\r", "-\t\t\t\tif (!typeImport.onDemand)\r", "-\t\t\t\t\tif (CharOperation.equals(typeImport.compoundName[typeImport.compoundName.length - 1], name))\r", "-\t\t\t\t\t\tif (unitScope.resolveSingleTypeImport(typeImport) != null) {\r", "-\t\t\t\t\t\t\tif (typeImport.reference != null) typeImport.reference.used = true;\r", "-\t\t\t\t\t\t\treturn typeImport.resolvedImport; // already know its visible\r", "-\t\t\t\t\t\t}\r", "+\t\t\tif (imports != null){\r", "+\t\t\t\t// copy the list, since single type imports are removed if they cannot be resolved\r", "+\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {\r", "+\t\t\t\t\tImportBinding typeImport = imports[i];\r", "+\t\t\t\t\tif (!typeImport.onDemand)\r", "+\t\t\t\t\t\tif (CharOperation.equals(typeImport.compoundName[typeImport.compoundName.length - 1], name))\r", "+\t\t\t\t\t\t\tif (unitScope.resolveSingleTypeImport(typeImport) != null) {\r", "+\t\t\t\t\t\t\t\tif (typeImport.reference != null) typeImport.reference.used = true;\r", "+\t\t\t\t\t\t\t\treturn typeImport.resolvedImport; // already know its visible\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t}\r", "-\t\t\tfor (int i = 0, length = unitScope.imports.length; i < length; i++) {\r", "-\t\t\t\tImportBinding someImport = unitScope.imports[i];\r", "-\t\t\t\tif (someImport.onDemand) {\r", "-\t\t\t\t\tBinding resolvedImport = someImport.resolvedImport;\r", "-\t\t\t\t\tReferenceBinding temp =\r", "-\t\t\t\t\t\t(resolvedImport instanceof PackageBinding)\r", "-\t\t\t\t\t\t\t? findType(name, (PackageBinding) resolvedImport, unitScope.fPackage)\r", "-\t\t\t\t\t\t\t: findDirectMemberType(name, (ReferenceBinding) resolvedImport);\r", "-\t\t\t\t\tif (temp != null && temp.isValidBinding()) {\r", "-\t\t\t\t\t\tif (someImport.reference != null) someImport.reference.used = true;\r", "-\t\t\t\t\t\tif (foundInImport)\r", "-\t\t\t\t\t\t\t// Answer error binding -- import on demand conflict; name found in two import on demand packages.\r", "-\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, Ambiguous);\r", "-\t\t\t\t\t\ttype = temp;\r", "-\t\t\t\t\t\tfoundInImport = true;\r", "+\t\t\tif (imports != null){\r", "+\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {\r", "+\t\t\t\t\tImportBinding someImport = imports[i];\r", "+\t\t\t\t\tif (someImport.onDemand) {\r", "+\t\t\t\t\t\tBinding resolvedImport = someImport.resolvedImport;\r", "+\t\t\t\t\t\tReferenceBinding temp =\r", "+\t\t\t\t\t\t\t(resolvedImport instanceof PackageBinding)\r", "+\t\t\t\t\t\t\t\t? findType(name, (PackageBinding) resolvedImport, unitScope.fPackage)\r", "+\t\t\t\t\t\t\t\t: findDirectMemberType(name, (ReferenceBinding) resolvedImport);\r", "+\t\t\t\t\t\tif (temp != null && temp.isValidBinding()) {\r", "+\t\t\t\t\t\t\tif (someImport.reference != null) someImport.reference.used = true;\r", "+\t\t\t\t\t\t\tif (foundInImport)\r", "+\t\t\t\t\t\t\t\t// Answer error binding -- import on demand conflict; name found in two import on demand packages.\r", "+\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, Ambiguous);\r", "+\t\t\t\t\t\t\ttype = temp;\r", "+\t\t\t\t\t\t\tfoundInImport = true;\r", "+\t\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9336cf10bf7be1ae841e70dedef0fd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "dd95cda1129e3b02d33e6df4abb4085b58725599", "commitAfterChange": "0716d777f2b215b958b4a2562d69f124e313e0a3", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["+\t\t// in 1.4 mode (inherited visible shadows enclosing)", "+\t\tCompilerOptions options;", "+\t\tboolean inheritedHasPrecedence = (options = compilerOptions()).complianceLevel >= ClassFileConstants.JDK1_4;", "+\t\t", "-", "-\t\t\t\t\t\t\t\t\tif (receiverType == methodBinding.declaringClass", "-\t\t\t\t\t\t\t\t\t\t|| ((foundProblem == null || foundProblem.problemId() != ProblemReasons.NotVisible) && compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4)", "-\t\t\t\t\t\t\t\t\t\t|| (receiverType.getMethods(selector)) != Binding.NO_METHODS) {", "-\t\t\t\t\t\t\t\t\t\t\t// found a valid method in the 'immediate' scope (ie. not inherited)", "-\t\t\t\t\t\t\t\t\t\t\t// OR in 1.4 mode (inherited visible shadows enclosing)", "-\t\t\t\t\t\t\t\t\t\t\t// OR the receiverType implemented a method with the correct name", "-\t\t\t\t\t\t\t\t\t\t\t// return the methodBinding if it is not declared in a superclass of the scope's binding (that is, inherited)", "-\t\t\t\t\t\t\t\t\t\t\tif (foundProblem != null && foundProblem.problemId() != ProblemReasons.NotVisible)", "-\t\t\t\t\t\t\t\t\t\t\t\treturn foundProblem;", "-\t\t\t\t\t\t\t\t\t\t\tif (depth > 0) {", "-\t\t\t\t\t\t\t\t\t\t\t\tinvocationSite.setDepth(depth);", "-\t\t\t\t\t\t\t\t\t\t\t\tinvocationSite.setActualReceiverType(receiverType);", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\treturn methodBinding;", "+\t\t\t\t\t\t\t\t\tif (inheritedHasPrecedence", "+\t\t\t\t\t\t\t\t\t\t\t|| receiverType == methodBinding.declaringClass", "+\t\t\t\t\t\t\t\t\t\t\t|| (receiverType.getMethods(selector)) != Binding.NO_METHODS) {", "+\t\t\t\t\t\t\t\t\t\t// found a valid method in the 'immediate' scope (ie. not inherited)", "+\t\t\t\t\t\t\t\t\t\t// OR in 1.4 mode (inherited visible shadows enclosing)", "+\t\t\t\t\t\t\t\t\t\t// OR the receiverType implemented a method with the correct name", "+\t\t\t\t\t\t\t\t\t\t// return the methodBinding if it is not declared in a superclass of the scope's binding (that is, inherited)", "+\t\t\t\t\t\t\t\t\t\tif (foundProblem != null && foundProblem.problemId() != ProblemReasons.NotVisible)", "+\t\t\t\t\t\t\t\t\t\t\treturn foundProblem;", "+\t\t\t\t\t\t\t\t\t\tif (depth > 0) {", "+\t\t\t\t\t\t\t\t\t\t\tinvocationSite.setDepth(depth);", "+\t\t\t\t\t\t\t\t\t\t\tinvocationSite.setActualReceiverType(receiverType);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\treturn methodBinding;", "-\t\t\t\t\t\t\t\t\tif (foundProblem == null) {", "+\t\t\t\t\t\t\t\t\tif (foundProblem == null || foundProblem.problemId() == ProblemReasons.NotVisible) {", "+\t\t\t\t\t\t\t\t\t\tif (foundProblem != null) foundProblem = null;", "-\t\tif (insideStaticContext && compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\tif (insideStaticContext && options.sourceLevel >= ClassFileConstants.JDK1_5) {"]}], "num": 54047}
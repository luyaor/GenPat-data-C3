{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb3b4d7da9a8550bfd3c332f0a0e52f2", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d99b755cb47e774d6492d7f6bf84d97e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "0001b1dcd0c4e435d76a7a88b7548ff6832acf06", "commitAfterChange": "bd260a80ad431844690d641f800683459b9c2904", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+", "-\tif (analyseResources && CharOperation.equals(TypeConstants.CLOSE, this.selector)) ", "-\t{", "-\t\tFakedTrackingVariable trackingVariable = FakedTrackingVariable.getCloseTrackingVariable(this.receiver, flowInfo, flowContext);", "-\t\tif (trackingVariable != null) { // null happens if receiver is not a local variable or not an AutoCloseable", "-\t\t\tif (trackingVariable.methodScope == currentScope.methodScope()) {", "-\t\t\t\ttrackingVariable.markClose(flowInfo, flowContext);", "-\t\t\t} else {", "-\t\t\t\ttrackingVariable.markClosedInNestedMethod();", "+\tif (analyseResources) {", "+\t\tExpression closeTarget = null;", "+\t\tif (nonStatic) {", "+\t\t\t// closeable.close()", "+\t\t\tif (CharOperation.equals(TypeConstants.CLOSE, this.selector)) {", "+\t\t\t\tcloseTarget = this.receiver;", "+\t\t\t}", "+\t\t} else if (this.arguments != null && this.arguments.length > 0 && FakedTrackingVariable.isAnyCloseable(this.arguments[0].resolvedType)) {", "+\t\t\t// Helper.closeMethod(closeable, ..)", "+\t\t\tfor (int i=0; i<TypeConstants.closeMethods.length; i++) {", "+\t\t\t\tCloseMethodRecord record = TypeConstants.closeMethods[i];", "+\t\t\t\tif (CharOperation.equals(record.selector, this.selector)", "+\t\t\t\t\t\t&& CharOperation.equals(record.typeName, this.binding.declaringClass.compoundName)) ", "+\t\t\t\t{", "+\t\t\t\t\tcloseTarget = this.arguments[0];", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (closeTarget != null) {", "+\t\t\tFakedTrackingVariable trackingVariable = FakedTrackingVariable.getCloseTrackingVariable(closeTarget, flowInfo, flowContext);", "+\t\t\tif (trackingVariable != null) { // null happens if target is not a local variable or not an AutoCloseable", "+\t\t\t\tif (trackingVariable.methodScope == currentScope.methodScope()) {", "+\t\t\t\t\ttrackingVariable.markClose(flowInfo, flowContext);", "+\t\t\t\t} else {", "+\t\t\t\t\ttrackingVariable.markClosedInNestedMethod();", "+\t\t\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9a920bce58e09b67d0c71d2d1d17266", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "2c8186e7489f922689211662fed2641fe910c44e", "commitAfterChange": "277792ba446c3713bcfdc898c37875d45fc06c18", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+", "-\tif (analyseResources && CharOperation.equals(TypeConstants.CLOSE, this.selector)) ", "-\t{", "-\t\tFakedTrackingVariable trackingVariable = FakedTrackingVariable.getCloseTrackingVariable(this.receiver, flowInfo, flowContext);", "-\t\tif (trackingVariable != null) { // null happens if receiver is not a local variable or not an AutoCloseable", "-\t\t\tif (trackingVariable.methodScope == currentScope.methodScope()) {", "-\t\t\t\ttrackingVariable.markClose(flowInfo, flowContext);", "-\t\t\t} else {", "-\t\t\t\ttrackingVariable.markClosedInNestedMethod();", "+\tif (analyseResources) {", "+\t\tExpression closeTarget = null;", "+\t\tif (nonStatic) {", "+\t\t\t// closeable.close()", "+\t\t\tif (CharOperation.equals(TypeConstants.CLOSE, this.selector)) {", "+\t\t\t\tcloseTarget = this.receiver;", "+\t\t\t}", "+\t\t} else if (this.arguments != null && this.arguments.length > 0 && FakedTrackingVariable.isAnyCloseable(this.arguments[0].resolvedType)) {", "+\t\t\t// Helper.closeMethod(closeable, ..)", "+\t\t\tfor (int i=0; i<TypeConstants.closeMethods.length; i++) {", "+\t\t\t\tCloseMethodRecord record = TypeConstants.closeMethods[i];", "+\t\t\t\tif (CharOperation.equals(record.selector, this.selector)", "+\t\t\t\t\t\t&& CharOperation.equals(record.typeName, this.binding.declaringClass.compoundName)) ", "+\t\t\t\t{", "+\t\t\t\t\tcloseTarget = this.arguments[0];", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (closeTarget != null) {", "+\t\t\tFakedTrackingVariable trackingVariable = FakedTrackingVariable.getCloseTrackingVariable(closeTarget, flowInfo, flowContext);", "+\t\t\tif (trackingVariable != null) { // null happens if target is not a local variable or not an AutoCloseable", "+\t\t\t\tif (trackingVariable.methodScope == currentScope.methodScope()) {", "+\t\t\t\t\ttrackingVariable.markClose(flowInfo, flowContext);", "+\t\t\t\t} else {", "+\t\t\t\t\ttrackingVariable.markClosedInNestedMethod();", "+\t\t\t\t}", "+"]}], "num": 48669}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "068f1ac5015bd4b4a989769d63945703", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10bc5af0df82c8b31150198542df45f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "0f7f9d63e5fbc5d41771bd4e2e39b628130add76", "commitAfterChange": "ed4cdf5cf5dec0284dce12a661248f2f9a27a709", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 12, "signatureBeforeChange": "  private String counterString(int count)", "signatureAfterChange": " private String filterFormattingInComments(String input)", "diff": ["+}", "+private String filterFormattingInComments(String input) {", "+\tStringTokenizer tokenizer = new StringTokenizer(input, \"\\r\\n\\f\");", "+\tStringBuffer buffer = new StringBuffer();", "+\tboolean skipToken = false;", "+\tString line =  null;", "+\tlineLoop: while (tokenizer.hasMoreTokens()) {", "+\t\tif (!skipToken) {", "+\t\t\tline = tokenizer.nextToken();", "+\t\t}", "+\t\tskipToken = false;", "+\t\tint length = line.length();", "+\t\tint lineStart = 0;", "+\t\tif (length > 0) {", "+\t\t\t// Trim leading whitespaces", "+\t\t\tif (IGNORE_SPACES > 0) {", "+\t\t\t\twhile (lineStart < length && ScannerHelper.isWhitespace(line.charAt(lineStart))) {", "+\t\t\t\t\tlineStart++;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// Search if a comment starts", "+\t\t\tint commentKind = 0;", "+\t\t\tint idx = line.indexOf('/', lineStart);", "+\t\t\tif (idx >= 0 && (idx+1) < length) {", "+\t\t\t\tidx++;", "+\t\t\t\tchar ch = line.charAt(idx++);", "+\t\t\t\tswitch (ch) {", "+\t\t\t\t\tcase '/':", "+\t\t\t\t\t\tcommentKind = 1; // line comment", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase '*':", "+\t\t\t\t\t\tcommentKind = 2; // block comment", "+\t\t\t\t\t\tif (idx < length && line.charAt(idx) == '*') {", "+\t\t\t\t\t\t\tcommentKind = 3; // javadoc comment", "+\t\t\t\t\t\t\tidx++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tif (commentKind != 0) {", "+\t\t\t\t\t// Enter a comment", "+\t\t\t\t\tswitch (IGNORE_SPACES) {", "+\t\t\t\t\t\tcase ALL_COMMENTS_SPACES:", "+\t\t\t\t\t\t\tswitch (commentKind) {", "+\t\t\t\t\t\t\t\tcase 1:", "+\t\t\t\t\t\t\t\t\tint start = idx;", "+\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, start).trim());", "+\t\t\t\t\t\t\t\t\twhile (true) {", "+\t\t\t\t\t\t\t\t\t\tif (start < length) {", "+\t\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "+\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tbuffer.append(ModelTestsUtil.removeWhiteSpace(line.substring(start)));", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tline = tokenizer.nextToken();", "+\t\t\t\t\t\t\t\t\t\tlength = line.length();", "+\t\t\t\t\t\t\t\t\t\tstart = 0;", "+\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "+\t\t\t\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (start > length+1 || line.charAt(start) != '/' || line.charAt(start+1) != '/') {", "+\t\t\t\t\t\t\t\t\t\t\tbuffer.append('\\n');", "+\t\t\t\t\t\t\t\t\t\t\tskipToken = true;", "+\t\t\t\t\t\t\t\t\t\t\t// only gate to break the loop", "+\t\t\t\t\t\t\t\t\t\t\tcontinue lineLoop;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tstart += 2;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcase 2:", "+\t\t\t\t\t\t\t\tcase 3:", "+\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, idx).trim());", "+\t\t\t\t\t\t\t\t\tint endComment = line.indexOf(\"*/\");", "+\t\t\t\t\t\t\t\t\tif (endComment > 0) {", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(ModelTestsUtil.removeWhiteSpace(line.substring(0, endComment + 2)));", "+\t\t\t\t\t\t\t\t\t\tline = line.substring(endComment+2);", "+\t\t\t\t\t\t\t\t\t\tskipToken = true;", "+\t\t\t\t\t\t\t\t\t\tcontinue lineLoop;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\twhile (endComment < 0) {", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(ModelTestsUtil.removeWhiteSpace(line));", "+\t\t\t\t\t\t\t\t\t\tline = tokenizer.nextToken();", "+\t\t\t\t\t\t\t\t\t\tendComment = line.indexOf(\"*/\");", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbuffer.append(ModelTestsUtil.removeWhiteSpace(line.substring(0, endComment + 2)));", "+\t\t\t\t\t\t\t\t\tbuffer.append('\\n');", "+\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase ALL_COMMENTS_LINES_LEADING_SPACES:", "+\t\t\t\t\t\t\tswitch (commentKind) {", "+\t\t\t\t\t\t\t\tcase 1:", "+\t\t\t\t\t\t\t\t\tint start = idx;", "+\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, start).trim());", "+\t\t\t\t\t\t\t\t\twhile (true) {", "+\t\t\t\t\t\t\t\t\t\tif (start < length) {", "+\t\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "+\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tif (start < length) {", "+\t\t\t\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(start));", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tline = tokenizer.nextToken();", "+\t\t\t\t\t\t\t\t\t\tlength = line.length();", "+\t\t\t\t\t\t\t\t\t\tstart = 0;", "+\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "+\t\t\t\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (start < length && (line.charAt(start) != '/' || line.charAt(start+1) != '/')) {", "+\t\t\t\t\t\t\t\t\t\t\tbuffer.append('\\n');", "+\t\t\t\t\t\t\t\t\t\t\tskipToken = true;", "+\t\t\t\t\t\t\t\t\t\t\t// only gate to break the loop", "+\t\t\t\t\t\t\t\t\t\t\tcontinue lineLoop;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\t\t\tstart += 2; // skip next line starting comment", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcase 3:", "+\t\t\t\t\t\t\t\tcase 2:", "+\t\t\t\t\t\t\t\t\tstart = idx;", "+\t\t\t\t\t\t\t\t\tint endComment = line.indexOf(\"*/\");", "+\t\t\t\t\t\t\t\t\tif (endComment > 0) {", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, endComment + 2));", "+\t\t\t\t\t\t\t\t\t\tline = line.substring(endComment+2);", "+\t\t\t\t\t\t\t\t\t\tskipToken = true;", "+\t\t\t\t\t\t\t\t\t\tcontinue lineLoop;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, start).trim());", "+\t\t\t\t\t\t\t\t\twhile (endComment < 0) {", "+\t\t\t\t\t\t\t\t\t\tif (start < length) {", "+\t\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "+\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tif (start < length && ch == '*') {", "+\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t\t\t\t\t\twhile (start < length && ScannerHelper.isWhitespace(line.charAt(start))) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tif (start < length) {", "+\t\t\t\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(start));", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tline = tokenizer.nextToken();", "+\t\t\t\t\t\t\t\t\t\tlength = line.length();", "+\t\t\t\t\t\t\t\t\t\tendComment = line.indexOf(\"*/\");", "+\t\t\t\t\t\t\t\t\t\tstart = 0;", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbuffer.append(line.substring(0, endComment + 2));", "+\t\t\t\t\t\t\t\t\tbuffer.append('\\n');", "+\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (length > 0 && lineStart > 0 && lineStart < length) {", "+\t\t\tbuffer.append(line.substring(lineStart).trim());", "+\t\t} else {", "+\t\t\tbuffer.append(line);", "+\t\t}", "+\t\tbuffer.append('\\n');", "+\t}", "+    return buffer.toString();", "-", "-private String counterString(int count) {", "-\tint reminder = count%10;", "-\tStringBuffer buffer = new StringBuffer();", "-\tbuffer.append(count);", "-\tswitch (reminder) {", "-\t\tcase 1:", "-\t\t\tbuffer.append(\"st\");", "-\t\t\tbreak;", "-\t\tcase 2:", "-\t\t\tbuffer.append(\"nd\");", "-\t\t\tbreak;", "-\t\tcase 3:", "-\t\t\tbuffer.append(\"rd\");", "-\t\t\tbreak;", "-\t\tdefault:", "-\t\t\tbuffer.append(\"th\");", "-\t\t\tbreak;", "-\t}", "-\treturn buffer.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7702e87f47f1c6e50e56e8a63a4489c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "1a94a1e6652f1701b8c360d56d755e5438b79c26", "commitAfterChange": "3b002cab97d2ee77b59be67feaf705de255bc1fb", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " public void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " public void configure(String[] argv) throws InvalidInputException", "diff": ["-\tfinal int INSIDE_CLASSPATH = 1;", "-\tfinal int INSIDE_DESTINATION_PATH = 2;", "-\tfinal int INSIDE_TARGET = 3;", "-\tfinal int INSIDE_LOG = 4;", "-\tfinal int INSIDE_REPETITION = 5;", "-\tfinal int INSIDE_SOURCE = 6;", "-\tfinal int INSIDE_DEFAULT_ENCODING = 7;", "-\tfinal int INSIDE_BOOTCLASSPATH = 8;", "-\tfinal int INSIDE_MAX_PROBLEMS = 9;", "-\tfinal int INSIDE_EXT_DIRS = 10;", "-\tfinal int INSIDE_SOURCE_PATH = 11;", "-\tfinal int INSIDE_ENDORSED_DIRS = 12;", "+\tfinal int INSIDE_CLASSPATH_start = 1;", "+\tfinal int INSIDE_CLASSPATH_bracket = 2;", "+\tfinal int INSIDE_DESTINATION_PATH = 3;", "+\tfinal int INSIDE_TARGET = 4;", "+\tfinal int INSIDE_LOG = 5;", "+\tfinal int INSIDE_REPETITION = 6;", "+\tfinal int INSIDE_SOURCE = 7;", "+\tfinal int INSIDE_DEFAULT_ENCODING = 8;", "+\tfinal int INSIDE_BOOTCLASSPATH_start = 9;", "+\tfinal int INSIDE_BOOTCLASSPATH_bracket = 10;", "+\tfinal int INSIDE_MAX_PROBLEMS = 11;", "+\tfinal int INSIDE_EXT_DIRS = 12;", "+\tfinal int INSIDE_SOURCE_PATH_start = 13;", "+\tfinal int INSIDE_SOURCE_PATH_bracket = 14;", "+\tfinal int INSIDE_ENDORSED_DIRS = 15;", "+\tfinal int INSIDE_SOURCE_DIRECTORY_DESTINATION_PATH = 16;", "+\tString sourcepathClasspathArg = null;", "+\tString classpathArg = null;", "+\tString customDestinationPath = null;", "+\tString currentSourceDirectory = null;", "-\t\t\t\tif (currentArg.endsWith(\"]\") && !(mode == INSIDE_BOOTCLASSPATH || mode == INSIDE_CLASSPATH || //$NON-NLS-1$ ", "-\t\t\t\t\t\tmode == INSIDE_SOURCE_PATH) ) {", "+\t\t\t\t", "+\t\t\t\tif (currentArg.startsWith(\"[\")) { //$NON-NLS-1$", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$ ", "+\t\t\t\t\t\t\t\t\tcurrentArg));", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif (currentArg.endsWith(\"]\")) { //$NON-NLS-1$", "+\t\t\t\t\tif (encodingStart <= 1) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\t\tthis.destinationPaths = new String[argCount - index];", "+\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\tthis.destinationPaths,", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t(this.destinationPaths = new String[length + argCount - index]),", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\tlength);", "+\t\t\t\t\t// destination path cannot be specified upon an individual file", "-\t\t\t\t\tthis.generatePackagesStructure = true;", "-\t\t\t\t\tmode = INSIDE_CLASSPATH;", "+\t\t\t\t\tmode = INSIDE_CLASSPATH_start;", "-\t\t\t\t\tmode = INSIDE_BOOTCLASSPATH;", "+\t\t\t\t\tmode = INSIDE_BOOTCLASSPATH_start;", "-\t\t\t\t\tif (sourcepathClasspaths.size() > 0) {", "+\t\t\t\t\tif (sourcepathClasspathArg != null) {", "-\t\t\t\t\tmode = INSIDE_SOURCE_PATH;", "+\t\t\t\t\tmode = INSIDE_SOURCE_PATH_start;", "-\t\t\t\t\t\tif (length == 7 && debugOption.equals(\"-g:none\")) //$NON-NLS-1$", "+\t\t\t\t\t\tif (length == 7 && debugOption.equals(\"-g:\" + NONE)) //$NON-NLS-1$", "-\t\t\t\t\tif (length == 10 && warningOption.equals(\"-warn:none\")) { //$NON-NLS-1$", "+\t\t\t\t\tif (length == 10 && warningOption.equals(\"-warn:\" + NONE)) { //$NON-NLS-1$", "-\t\t\t\tthis.destinationPath = currentArg;", "+\t\t\t\tif (currentArg.equals(NONE)) {", "+\t\t\t\t\tthis.destinationPath = NONE; ", "+\t\t\t\t\t\t// this.destinationPath == NONE must answer true", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.destinationPath = currentArg;", "+\t\t\t\t}", "-\t\t\tcase INSIDE_CLASSPATH:", "-\t\t\t\tclasspaths.add(currentArg);", "+\t\t\tcase INSIDE_CLASSPATH_start: ", "+\t\t\t\tchar[] currentArgChars = currentArg.toCharArray();", "+\t\t\t\tfor (int i = 0, length = currentArgChars.length; i < length; ", "+\t\t\t\t\t\ti++) {", "+\t\t\t\t\tswitch (currentArgChars[i]) {", "+\t\t\t\t\t\tcase '[':", "+\t\t\t\t\t\t\tif (mode == INSIDE_CLASSPATH_bracket) {", "+\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$ ", "+\t\t\t\t\t\t\t\t\t\t\t\tcurrentArg));", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tmode = INSIDE_CLASSPATH_bracket;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase ']':", "+\t\t\t\t\t\t\tif (mode != INSIDE_CLASSPATH_bracket) {", "+\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$ ", "+\t\t\t\t\t\t\t\t\t\t\tcurrentArg));", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (mode == DEFAULT) {", "+\t\t\t\t\tclasspaths.add(currentArg);", "+\t\t\t\t} else {", "+\t\t\t\t\tclasspathArg = currentArg;", "+\t\t\t\t}", "-\t\t\tcase INSIDE_BOOTCLASSPATH:", "-\t\t\t\tbootclasspaths.add(currentArg);", "+\t\t\tcase INSIDE_CLASSPATH_bracket:", "+\t\t\t\tcurrentArgChars = currentArg.toCharArray();", "+\t\t\t\tfor (int i = 0, length = currentArgChars.length; i < length; ", "+\t\t\t\t\t\ti++) {", "+\t\t\t\t\tswitch (currentArgChars[i]) {", "+\t\t\t\t\t\tcase '[':", "+\t\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\t\tMain.bind(\"configure.accessRuleAfterDestinationPath\", //$NON-NLS-1$ ", "+\t\t\t\t\t\t\t\t\t\t\t\"[-d \" + currentArg)); //$NON-NLS-1$ ", "+\t\t\t\t\t\tcase ']':", "+\t\t\t\t\t\t\tif (mode != INSIDE_CLASSPATH_bracket) {", "+\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$ ", "+\t\t\t\t\t\t\t\t\t\t\t\tcurrentArg));", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (mode == DEFAULT) {", "+\t\t\t\t\tclasspaths.add(classpathArg + \" \" + currentArg); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_BOOTCLASSPATH_start: ", "+\t\t\t\tcurrentArgChars = currentArg.toCharArray();", "+\t\t\t\tfor (int i = 0, length = currentArgChars.length; i < length; ", "+\t\t\t\t\t\ti++) {", "+\t\t\t\t\tswitch (currentArgChars[i]) {", "+\t\t\t\t\t\tcase '[':", "+\t\t\t\t\t\t\tif (mode == INSIDE_BOOTCLASSPATH_bracket) {", "+\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$ ", "+\t\t\t\t\t\t\t\t\t\t\t\tcurrentArg));", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tmode = INSIDE_BOOTCLASSPATH_bracket;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase ']':", "+\t\t\t\t\t\t\tif (mode != INSIDE_BOOTCLASSPATH_bracket) {", "+\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$ ", "+\t\t\t\t\t\t\t\t\t\t\t\tcurrentArg));", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (mode == DEFAULT) {", "+\t\t\t\t\tbootclasspaths.add(currentArg);", "+\t\t\t\t} else {", "+\t\t\t\t\tclasspathArg = currentArg;", "+\t\t\t\t}", "-\t\t\tcase INSIDE_SOURCE_PATH :", "-\t\t\t\tsourcepathClasspaths.add(currentArg);", "+\t\t\tcase INSIDE_BOOTCLASSPATH_bracket:", "+\t\t\t\tcurrentArgChars = currentArg.toCharArray();", "+\t\t\t\tfor (int i = 0, length = currentArgChars.length; i < length; ", "+\t\t\t\t\t\ti++) {", "+\t\t\t\t\tswitch (currentArgChars[i]) {", "+\t\t\t\t\t\tcase '[':", "+\t\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\t\tMain.bind(\"configure.accessRuleAfterDestinationPath\", //$NON-NLS-1$ ", "+\t\t\t\t\t\t\t\t\t\t\t\"[-d \" + currentArg)); //$NON-NLS-1$ ", "+\t\t\t\t\t\tcase ']':", "+\t\t\t\t\t\t\tif (mode != INSIDE_BOOTCLASSPATH_bracket) {", "+\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$ ", "+\t\t\t\t\t\t\t\t\t\t\t\tcurrentArg));", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (mode == DEFAULT) {", "+\t\t\t\t\tbootclasspaths.add(classpathArg + \" \" + currentArg); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_SOURCE_PATH_start:", "+\t\t\t\tsourcepathClasspathArg = currentArg;", "+\t\t\t\tcurrentArgChars = currentArg.toCharArray();", "+\t\t\t\tfor (int i = 0, length = currentArgChars.length; i < length; ", "+\t\t\t\t\t\ti++) {", "+\t\t\t\t\tswitch (currentArgChars[i]) {", "+\t\t\t\t\t\tcase '[':", "+\t\t\t\t\t\t\tif (mode == INSIDE_SOURCE_PATH_bracket) {", "+\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$ ", "+\t\t\t\t\t\t\t\t\t\t\t\tcurrentArg));", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tmode = INSIDE_SOURCE_PATH_bracket;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase ']':", "+\t\t\t\t\t\t\tif (mode != INSIDE_SOURCE_PATH_bracket) {", "+\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$ ", "+\t\t\t\t\t\t\t\t\t\t\t\tcurrentArg));", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tcase INSIDE_EXT_DIRS :", "+\t\t\tcase INSIDE_SOURCE_PATH_bracket:", "+\t\t\t\tsourcepathClasspathArg += \" \" + currentArg; //$NON-NLS-1$", "+\t\t\t\tcurrentArgChars = currentArg.toCharArray();", "+\t\t\t\tfor (int i = 0, length = currentArgChars.length; i < length; ", "+\t\t\t\t\t\ti++) {", "+\t\t\t\t\tswitch (currentArgChars[i]) {", "+\t\t\t\t\t\tcase '[':", "+\t\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\t\tMain.bind(\"configure.accessRuleAfterDestinationPath\", //$NON-NLS-1$ ", "+\t\t\t\t\t\t\t\t\t\t\t\"[-d \" + currentArg)); //$NON-NLS-1$ ", "+\t\t\t\t\t\tcase ']':", "+\t\t\t\t\t\t\tif (mode != INSIDE_SOURCE_PATH_bracket) {", "+\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\t\t\tMain.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$ ", "+\t\t\t\t\t\t\t\t\t\t\t\tcurrentArg));", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_EXT_DIRS:", "+\t\t\t\tif (currentArg.indexOf(\"[-d\") != -1) { //$NON-NLS-1$ ", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tMain.bind(\"configure.unexpectedDestinationPathEntry\", //$NON-NLS-1$ ", "+\t\t\t\t\t\t\t\"-extdir\")); //$NON-NLS-1$ ", "+\t\t\t\t}", "-\t\t\tcase INSIDE_ENDORSED_DIRS :", "-\t\t\t\ttokenizer = new StringTokenizer(currentArg,\tFile.pathSeparator, false);", "+\t\t\tcase INSIDE_ENDORSED_DIRS:", "+\t\t\t\tif (currentArg.indexOf(\"[-d\") != -1) { //$NON-NLS-1$ ", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tMain.bind(\"configure.unexpectedDestinationPathEntry\", //$NON-NLS-1$ ", "+\t\t\t\t\t\t\t\"-endorseddirs\")); //$NON-NLS-1$ ", "+\t\t\t\t}\t\t\t\ttokenizer = new StringTokenizer(currentArg,\tFile.pathSeparator, false);", "+\t\t\tcase INSIDE_SOURCE_DIRECTORY_DESTINATION_PATH:", "+\t\t\t\tif (currentArg.endsWith(\"]\")) { //$NON-NLS-1$", "+\t\t\t\t\tcustomDestinationPath = currentArg.substring(0,", "+\t\t\t\t\t\tcurrentArg.length() - 1);", "+\t\t\t\t} else {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tMain.bind(\"configure.incorrectDestinationPathEntry\", //$NON-NLS-1$ ", "+\t\t\t\t\t\t\t\"[-d \" + currentArg)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\t// continue; fall through on purpose", "-\t\t//default is input directory", "-\t\tcurrentArg = currentArg.replace('/', File.separatorChar);", "-\t\tif (currentArg.endsWith(File.separator))", "-\t\t\tcurrentArg =", "-\t\t\t\tcurrentArg.substring(0, currentArg.length() - File.separator.length());", "-\t\tFile dir = new File(currentArg);", "-\t\tif (!dir.isDirectory())", "+\t\t// default is input directory, if no custom destination path exists", "+\t\tif (customDestinationPath == null) {", "+\t\t\tcurrentArg = currentArg.replace('/', File.separatorChar);", "+\t\t\tif (currentArg.endsWith(\"[-d\")) { //$NON-NLS-1$", "+\t\t\t\tcurrentSourceDirectory = currentArg.substring(0, ", "+\t\t\t\t\tcurrentArg.length() - 3);", "+\t\t\t\tmode = INSIDE_SOURCE_DIRECTORY_DESTINATION_PATH;", "+\t\t\t\tcontinue;", "+\t\t\t} else {", "+\t\t\t\tcurrentSourceDirectory = currentArg;", "+\t\t\t}", "+\t\t}", "+\t\tif (currentSourceDirectory.endsWith(File.separator)) {", "+\t\t\tcurrentSourceDirectory = currentSourceDirectory.substring(0, ", "+\t\t\t\t\tcurrentSourceDirectory.length() - File.separator.length());", "+\t\t}", "+\t\tFile dir = new File(currentSourceDirectory);", "+\t\tif (!dir.isDirectory()) {", "-\t\t\t\tMain.bind(\"configure.directoryNotExist\", currentArg)); //$NON-NLS-1$", "+\t\t\t\tMain.bind(\"configure.directoryNotExist\", currentSourceDirectory)); //$NON-NLS-1$", "+\t\t}", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.IOError\", currentArg)); //$NON-NLS-1$", "+\t\t\tthrow new InvalidInputException(Main.bind(\"configure.IOError\", currentSourceDirectory)); //$NON-NLS-1$", "+\t\t}", "+\t\tif (NONE.equals(customDestinationPath)) {", "+\t\t\tcustomDestinationPath = NONE; // ensure == comparison", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tthis.destinationPaths,", "+\t\t\t\t0,", "+\t\t\t\t(this.destinationPaths = new String[length + filesCount]),", "+\t\t\t\t0,", "+\t\t\t\tfilesCount);", "+\t\t\t\tthis.destinationPaths[filesCount + i] = customDestinationPath;", "+\t\t\tcustomDestinationPath = null;", "+\t\t\tcurrentSourceDirectory = null;", "+\t\t\tthis.destinationPaths = new String[filesCount];", "+\t\t\t\tthis.destinationPaths[i] = customDestinationPath;", "+\t\t\tcustomDestinationPath = null;", "+\t\t\tcurrentSourceDirectory = null;", "-\t\t\tprocessPathEntries(DEFAULT_SIZE_CLASSPATH, bootclasspaths, paths[i], customEncoding, false);", "+\t\t\tprocessPathEntries(DEFAULT_SIZE_CLASSPATH, bootclasspaths, ", "+\t\t\t\tpaths[i], customEncoding, false, true);", "-\t\t\t\t\t\t\t\tFileSystem.getClasspath(", "-\t\t\t\t\t\t\t\t\tcurrent[j].getAbsolutePath(),", "-\t\t\t\t\t\t\t\t\tnull, false, null); ", "+\t\t\t\t\t\t\t\tFileSystem.getClasspath(current[j].getAbsolutePath(),", "+\t\t\t\t\t\t\t\t\tnull, false, null, null); ", "-\t\t\tprocessPathEntries(DEFAULT_SIZE_CLASSPATH, classpaths, paths[i], customEncoding, false);", "+\t\t\tprocessPathEntries(DEFAULT_SIZE_CLASSPATH, classpaths, paths[i], ", "+\t\t\t\t\tcustomEncoding, false, true);", "-\tfinal int sourcepathClasspathsSize = sourcepathClasspaths.size();", "-\tif (sourcepathClasspathsSize != 0) {", "-\t\tString[] paths = new String[sourcepathClasspathsSize];", "-\t\tsourcepathClasspaths.toArray(paths);", "-\t\tsourcepathClasspaths.clear();", "-\t\tfor (int i = 0; i < sourcepathClasspathsSize; i++) {", "-\t\t\tprocessPathEntries(DEFAULT_SIZE_CLASSPATH, sourcepathClasspaths, paths[i], customEncoding, true);", "-\t\t}\t\t\t", "+\tif (sourcepathClasspathArg != null) {", "+\t\tprocessPathEntries(DEFAULT_SIZE_CLASSPATH, sourcepathClasspaths, ", "+\t\t\tsourcepathClasspathArg, customEncoding, true, false);", "-\tif (this.destinationPath == null) {", "-\t\tthis.generatePackagesStructure = false;", "-\t} else if (\"none\".equals(this.destinationPath)) { //$NON-NLS-1$", "-\t\tthis.destinationPath = null;", "-\t}", "-\t"]}], "num": 10902}
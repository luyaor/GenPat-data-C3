{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1fe9173a19ce2f9667273e9c194d0cfd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a469aa5027bde2e197f4e30be93b0d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ReferenceCollection.java", "commitBeforeChange": "8264e11928da121957d70dadd3c6bf92a042c6d3", "commitAfterChange": "53c01b1adab482ab7f920989323f3cac2f399cfd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public static char[][][] internQualifiedNames(char[][][] qualifiedNames)", "signatureAfterChange": "  public static char[][][] internQualifiedNames(char[][][] qualifiedNames)", "diff": ["+\treturn internQualifiedNames(qualifiedNames, false);", "+}", "-\t\t\tif (CharOperation.equals(qualifiedName, wellKnownName))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c1275556d990a341273ec80995060ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "527793c3501c0044ba7f65ec00ff957c7a149690", "commitAfterChange": "ca79168b190819b66ae58549346eb222c2411abf", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public final void pushUnicodeLineSeparator()", "signatureAfterChange": " public final void pushUnicodeLineSeparator()", "diff": ["-\t// isUnicode means that the \\r or \\n has been read as a unicode character", "-\t", "-\t//see comment on isLineDelimiter(char) for the use of '\\n' and '\\r'", "-", "-\tfinal int INCREMENT = 250;", "-\t//currentCharacter is at position currentPosition-1", "-", "-\t\tint separatorPos = currentPosition - 6;", "-\t\tif ((linePtr > 0) && (lineEnds[linePtr] >= separatorPos)) return;", "-\t\t//System.out.println(\"CR-\" + separatorPos);", "-\t\ttry {", "-\t\t\tlineEnds[++linePtr] = separatorPos;", "-\t\t} catch (IndexOutOfBoundsException e) {", "-\t\t\t//linePtr value is correct", "-\t\t\tint oldLength = lineEnds.length;", "-\t\t\tint[] old = lineEnds;", "-\t\t\tlineEnds = new int[oldLength + INCREMENT];", "-\t\t\tSystem.arraycopy(old, 0, lineEnds, 0, oldLength);", "-\t\t\tlineEnds[linePtr] = separatorPos;", "-\t\t}", "-\t\t// look-ahead for merged cr+lf", "-\t\t\t//System.out.println(\"look-ahead LF-\" + currentPosition);\t\t\t", "-\t\t\tlineEnds[linePtr] = currentPosition;", "-\t\t\tcurrentPosition++;", "-\t\t\tif (wasAcr && (lineEnds[linePtr] == (currentPosition - 7))) {", "-\t\t\t\t//System.out.println(\"merge LF-\" + (currentPosition - 1));\t\t\t\t\t\t\t", "-\t\t\t\tlineEnds[linePtr] = currentPosition - 6;", "-\t\t\t} else {", "-\t\t\t\tint separatorPos = currentPosition - 6;", "-\t\t\t\tif ((linePtr > 0) && (lineEnds[linePtr] >= separatorPos)) return;", "-\t\t\t\t// System.out.println(\"LF-\" + separatorPos);\t\t\t\t\t\t\t", "-\t\t\t\ttry {", "-\t\t\t\t\tlineEnds[++linePtr] = separatorPos;", "-\t\t\t\t} catch (IndexOutOfBoundsException e) {", "-\t\t\t\t\t//linePtr value is correct", "-\t\t\t\t\tint oldLength = lineEnds.length;", "-\t\t\t\t\tint[] old = lineEnds;", "-\t\t\t\t\tlineEnds = new int[oldLength + INCREMENT];", "-\t\t\t\t\tSystem.arraycopy(old, 0, lineEnds, 0, oldLength);", "-\t\t\t\t\tlineEnds[linePtr] = separatorPos;", "-\t\t\t\t}", "-\t\t\t}"]}], "num": 60296}
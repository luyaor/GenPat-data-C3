{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9fe558ba0c4cec9c1c4faa7594b167ce", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "092523b9e787f6435ee762a85d3b122d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AnnotationValueConversionTests.java", "commitBeforeChange": "a6fb7155fd890e70fc93ff099a2bfa78beffa3e9", "commitAfterChange": "dade23c0ca1cb5b996dfae1d1cfc189d06d41a6f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t@SuppressWarnings(\"nls\") \tpublic void testFloatConversion() throws Exception", "signatureAfterChange": " \t@SuppressWarnings(\"nls\") \tpublic void testFloatConversion() throws Exception", "diff": ["-\t\t\t\"@Test.Annotation(f=(float)0,\\n\" +", "-\t\t\t\"\t\t\t      d=(float)0)\\n\" +", "-\t\t\t\"public class Test {\\n\" +", "-\t\t\t\"\tpublic @interface Annotation\\n\" +", "-\t\t\t\"\t{\\n\" +\t\t", "-\t\t\t\"\t\tfloat f(); \\n\" +", "-\t\t\t\"\t\tdouble d();\\n\" +", "-\t\t\t\"\t}\\n\" +", "-\t\t\t\"}\\n\";", "+\t\t\t\"import org.eclipse.jdt.apt.tests.annotations.valueconversion.Annotation;\\n\" +", "+\t\t\t\"@Annotation(z=49f,\\n\" +", "+\t\t\t\"\t\t\t\t  c=49f,\\n\" +", "+\t\t\t\"\t\t\t\t  b=49f,\\n\" +", "+\t\t\t\"\t\t\t\t  s=49f,\\n\" + ", "+\t\t\t\"\t\t\t\t  i=49f,\\n\" +", "+\t\t\t\"\t\t\t\t  l=49f,\\n\" +\t", "+\t\t\t\"\t\t\t\t  f=49f,\\n\" +", "+\t\t\t\"\t\t\t      d=49f)\\n\" +", "+\t\t\t\"public class Test {}\\n\";", "-\t\tenv.addClass( ", "+\t\tIPath testPath = env.addClass( ", "-\t\texpectingNoProblems();", "+\t\texpectingSpecificProblemsFor(testPath, new Problem[]{", "+\t\t\t\tnew Problem(\"\", \"Type mismatch: cannot convert from float to boolean\", testPath),", "+\t\t\t\tnew Problem(\"\", \"Type mismatch: cannot convert from float to int\", testPath),", "+\t\t\t\tnew Problem(\"\", \"Type mismatch: cannot convert from float to long\", testPath),", "+\t\t\t\tnew Problem(\"\", \"Type mismatch: cannot convert from float to char\", testPath),", "+\t\t\t\tnew Problem(\"\", \"Type mismatch: cannot convert from float to byte\", testPath),", "+\t\t\t\tnew Problem(\"\", \"Type mismatch: cannot convert from float to short\", testPath),", "+\t\t\t\tnew Problem(\"\", \"type mismatch for memeber z expected java.lang.Boolean but got java.lang.Float\", testPath),", "+\t\t\t\tnew Problem(\"\", \"type mismatch for memeber s expected java.lang.Short but got java.lang.Float\", testPath),", "+\t\t\t\tnew Problem(\"\", \"type mismatch for memeber i expected java.lang.Integer but got java.lang.Float\", testPath),", "+\t\t\t\tnew Problem(\"\", \"type mismatch for memeber c expected java.lang.Character but got java.lang.Float\", testPath),", "+\t\t\t\tnew Problem(\"\", \"type mismatch for memeber b expected java.lang.Byte but got java.lang.Float\", testPath),", "+\t\t\t\tnew Problem(\"\", \"type mismatch for memeber l expected java.lang.Long but got java.lang.Float\", testPath),", "+\t\t});\t\t", "+\t\t", "+\t\tassertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b95fa19d6647cd01458c39fcbcfaf997", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AnnotationValueConversionTests.java", "commitBeforeChange": "a6fb7155fd890e70fc93ff099a2bfa78beffa3e9", "commitAfterChange": "dade23c0ca1cb5b996dfae1d1cfc189d06d41a6f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t@SuppressWarnings(\"nls\") \tpublic void testLongConversion() throws Exception", "signatureAfterChange": " \t@SuppressWarnings(\"nls\") \tpublic void testLongConversion() throws Exception", "diff": ["-\t\t\t\"@Test.Annotation(l=(long)0,\\n\" +\t\t\t", "-\t\t\t\"\t \t \t      f=(long)0,\\n\" +", "-\t\t\t\"\t\t\t      d=(long)0)\\n\" +", "-\t\t\t\"public class Test {\\n\" +", "-\t\t\t\"\tpublic @interface Annotation\\n\" +", "-\t\t\t\"\t{\\n\" +\t\t", "-\t\t\t\"       long l();  \\n\" +", "-\t\t\t\"\t\tfloat f(); \\n\" +", "-\t\t\t\"\t\tdouble d();\\n\" +", "-\t\t\t\"\t}\\n\" +", "-\t\t\t\"}\\n\";", "+\t\t\t\"import org.eclipse.jdt.apt.tests.annotations.valueconversion.Annotation;\\n\" +", "+\t\t\t\"@Annotation(z=49l,\\n\" +", "+\t\t\t\"\t\t\t\t  c=49l,\\n\" +", "+\t\t\t\"\t\t\t\t  b=49l,\\n\" +", "+\t\t\t\"\t\t\t\t  s=49l,\\n\" + ", "+\t\t\t\"\t\t\t\t  i=49l,\\n\" +", "+\t\t\t\"\t\t\t\t  l=49l,\\n\" +\t\t\t", "+\t\t\t\"\t \t \t      f=49l,\\n\" +", "+\t\t\t\"\t\t\t      d=49l)\\n\" +", "+\t\t\t\"public class Test {}\\n\";", "-\t\tenv.addClass( ", "-\t\t\t\tsrcRoot, ", "-\t\t\t\t\"sample\", ", "-\t\t\t\t\"Test\",", "-\t\t\t\tcontent );", "+\t\tIPath testPath = env.addClass( srcRoot, \"sample\", \"Test\", content );", "-\t\texpectingNoProblems();", "+\t\texpectingSpecificProblemsFor(testPath, new Problem[]{", "+\t\t\t\tnew Problem(\"\", \"Type mismatch: cannot convert from long to boolean\", testPath),", "+\t\t\t\tnew Problem(\"\", \"Type mismatch: cannot convert from long to char\", testPath),", "+\t\t\t\tnew Problem(\"\", \"Type mismatch: cannot convert from long to byte\", testPath),", "+\t\t\t\tnew Problem(\"\", \"Type mismatch: cannot convert from long to short\", testPath),", "+\t\t\t\tnew Problem(\"\", \"Type mismatch: cannot convert from long to int\", testPath),", "+\t\t\t\tnew Problem(\"\", \"type mismatch for memeber z expected java.lang.Boolean but got java.lang.Long\", testPath),", "+\t\t\t\tnew Problem(\"\", \"type mismatch for memeber s expected java.lang.Short but got java.lang.Long\", testPath),", "+\t\t\t\tnew Problem(\"\", \"type mismatch for memeber i expected java.lang.Integer but got java.lang.Long\", testPath),", "+\t\t\t\tnew Problem(\"\", \"type mismatch for memeber c expected java.lang.Character but got java.lang.Long\", testPath),", "+\t\t\t\tnew Problem(\"\", \"type mismatch for memeber b expected java.lang.Byte but got java.lang.Long\", testPath),", "+\t\t});", "+\t\t", "+\t\tassertEquals(ProcessorTestStatus.NO_ERRORS, ProcessorTestStatus.getErrors());", "+\t}"]}], "num": 64961}
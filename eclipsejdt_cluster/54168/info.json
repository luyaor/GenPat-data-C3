{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f85872112d5aa22d62e8d9bf69ebbb7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34f6cf556721a2cc1e68e94f4bc26f42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredType.java", "commitBeforeChange": "63ab4349d357b56fc78f3ee20ec27c16382d82c2", "commitAfterChange": "a449177c40bd4697d27d77230530c87f93d6c8df", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r public void updateFromParserState()", "signatureAfterChange": "\r public void updateFromParserState()", "diff": ["-\t\tif (parser.listLength > 0){ // awaiting interface type references\r", "-\t\t\t\r", "-\t\t\t// protection for bugs 15142\r", "-\t\t\tint typePtr = parser.astPtr - parser.astLengthStack[parser.astLengthPtr];\r", "-\t\t\tif(typePtr >= 0 && parser.astStack[typePtr] instanceof TypeDeclaration) {\r", "+\t\t// protection for bugs 15142\r", "+\t\tif (parser.listLength > 0 && parser.astLengthPtr > 0){ // awaiting interface type references\r", "+\t\t\tint length = parser.astLengthStack[parser.astLengthPtr];\r", "+\t\t\tint astPtr = parser.astPtr - length;\r", "+\t\t\tboolean canConsume = astPtr >= 0;\r", "+\t\t\tif(canConsume) {\r", "+\t\t\t\tif((!(parser.astStack[astPtr] instanceof TypeDeclaration))) {\r", "+\t\t\t\t\tcanConsume = false;\r", "+\t\t\t\t}\r", "+\t\t\t\tfor (int i = 1, max = length + 1; i < max; i++) {\r", "+\t\t\t\t\tif(!(parser.astStack[astPtr + i ] instanceof TypeReference)) {\r", "+\t\t\t\t\t\tcanConsume = false;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tif(canConsume) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c40597190279a3e1d88d6a937acfaf00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredMethod.java", "commitBeforeChange": "63ab4349d357b56fc78f3ee20ec27c16382d82c2", "commitAfterChange": "a449177c40bd4697d27d77230530c87f93d6c8df", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r public void updateFromParserState()", "signatureAfterChange": "\r public void updateFromParserState()", "diff": ["-\t\tif (parser.listLength > 0){ // awaiting interface type references\r", "+\t\tif (parser.listLength > 0 && parser.astLengthPtr > 0){ // awaiting interface type references\r", "-\t\t\t\tint methodPtr = parser.astPtr - parser.astLengthStack[parser.astLengthPtr];\r", "-\t\t\t\tif (parser.astStack[parser.astPtr] instanceof TypeReference && methodPtr >= 0 && parser.astStack[methodPtr] instanceof AbstractMethodDeclaration){\r", "+\t\t\t\tint length = parser.astLengthStack[parser.astLengthPtr];\r", "+\t\t\t\tint astPtr = parser.astPtr - length;\r", "+\t\t\t\tboolean canConsume = astPtr >= 0;\r", "+\t\t\t\tif(canConsume) {\r", "+\t\t\t\t\tif((!(parser.astStack[astPtr] instanceof AbstractMethodDeclaration))) {\r", "+\t\t\t\t\t\tcanConsume = false;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tfor (int i = 1, max = length + 1; i < max; i++) {\r", "+\t\t\t\t\t\tif(!(parser.astStack[astPtr + i ] instanceof TypeReference)) {\r", "+\t\t\t\t\t\t\tcanConsume = false;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\tif (canConsume){\r", "-\t\t\t\tif (parser.listLength > 0){\r", "+\t\t\t\tif (parser.listLength > 0 && parser.astLengthPtr > 0){\r", "-\t\t\t\t\tint methodPtr = parser.astPtr - parser.astLengthStack[parser.astLengthPtr];\r", "-\t\t\t\t\tif(methodPtr >= 0 && parser.astStack[methodPtr] instanceof AbstractMethodDeclaration) {\r", "+\t\t\t\t\tint length = parser.astLengthStack[parser.astLengthPtr];\r", "+\t\t\t\t\tint astPtr = parser.astPtr - length;\r", "+\t\t\t\t\tboolean canConsume = astPtr >= 0;\r", "+\t\t\t\t\tif(canConsume) {\r", "+\t\t\t\t\t\tif((!(parser.astStack[astPtr] instanceof AbstractMethodDeclaration))) {\r", "+\t\t\t\t\t\t\tcanConsume = false;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tfor (int i = 1, max = length + 1; i < max; i++) {\r", "+\t\t\t\t\t\t\tif(!(parser.astStack[astPtr + i ] instanceof Argument)) {\r", "+\t\t\t\t\t\t\t\tcanConsume = false;\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tif(canConsume) {\r"]}], "num": 54168}
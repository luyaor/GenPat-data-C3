{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44d84b72895f63012809281277214729", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "067764e0ab7ae9a4648eb3f3ab234a96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a22e5234311d6958d4980b8e6753a8d9d8c666f1", "commitAfterChange": "a5a040afa584bdeb36e87c3f3c1354cb15a27855", "methodNumberBeforeChange": 499, "methodNumberAfterChange": 499, "signatureBeforeChange": " \tpublic void _test497()", "signatureAfterChange": " \tpublic void test497()", "diff": ["-\t//https://bugs.eclipse.org/bugs/show_bug.cgi?id=84593 - variation", "-\tpublic void _test497() {", "+\t//https://bugs.eclipse.org/bugs/show_bug.cgi?id=84593 - variation - uncheck warnings", "+\tpublic void test497() {", "-\t\t\t\"SUCCESS\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\ttake(new A());\\n\" + ", "+\t\t\t\"\t     ^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type Super<Double>.A needs unchecked conversion to conform to Super<Double>.A<Double>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tZork z;\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dc3dfcd89fa709f73a29a8bad03d711", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "66a271485e53960fadcfb4122ab242646dfbc65c", "commitAfterChange": "b9cade79e7bd9be5791a332a60b747e1e3ce5346", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " public void test0087_shortcut_boolean_expression()", "signatureAfterChange": " public void _test0087_shortcut_boolean_expression()", "diff": ["-public void test0087_shortcut_boolean_expression() {", "-\tthis.runNegativeTest(", "+public void _test0087_shortcut_boolean_expression() {", "+\tthis.runConformTest(", "-\t\t\t\"      return 1; // throw new NullPointerException();\\n\" + ", "+\t\t\t\"      return 1;\\n\" + ", "-\t\t\t\"      return j.intValue();\\n\" + // protected by returning if j == null above", "+\t\t\t\"      return j.intValue();\\n\" +", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\"\treturn i.intValue();\\n\" + ", "-\t\t\"\t       ^\\n\" + ", "-\t\t\"Potential null pointer access: The variable i may be null at this location\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b2100bb0201663c937f51a7727c0e48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "3bf35acff17939203d0d5587ed29c8b46be8de16", "commitAfterChange": "23369e8b9173bbdf5db5870d3fe0e4b41d69d610", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void _test0034_conditional_expression()", "signatureAfterChange": " public void test0034_conditional_expression()", "diff": ["-// TODO (maxime) https://bugs.eclipse.org/bugs/show_bug.cgi?id=133125", "-public void _test0034_conditional_expression() {", "+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=133125", "+public void test0034_conditional_expression() {", "-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "-\t\t\"\to.toString();\\n\" +", "-\t\t\"\t^\\n\" +", "-\t\t\"The variable o may be null\\n\" +", "-\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 5)\\n\" +", "+\t\t\t\"\to.toString();\\n\" +", "+\t\t\t\"\t^\\n\" +", "+\t\t\t\"Potential null pointer access: The variable o may be null at this location\\n\" +", "+\t\t\t\"----------\\n\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d8cca571d12e77448debf71e51d01d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "252534b1e3dad1831e3abff323be8258609f736d", "commitAfterChange": "e2f59df4da4b0717730e8b0f95dd08cfbb696924", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " \tpublic void _test421922()", "signatureAfterChange": " \tpublic void test426678()", "diff": ["-\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=421922,  [1.8][compiler] Varargs & Overload - Align to JLS8", "-\tpublic void _test421922() {", "-\t\trunConformTest(", "+\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=426678, [1.8][compiler] Another issue with vararg type element accessibility", "+\tpublic void test426678() {", "+\t\trunNegativeTest(", "-\t\t\t\"MB\"); // check and adjust,", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tnew B().foo(null, null);\\n\" + ", "+\t\t\t\"\t        ^^^\\n\" + ", "+\t\t\t\"The method foo(A...) of type B is not applicable as the formal varargs element type A is not accessible here\\n\" + ", "+\t\t\t\"----------\\n\"); // check and adjust,"]}], "num": 34607}
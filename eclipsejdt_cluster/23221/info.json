{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "029e7d98ee3ec8fd2ba8798c8f75b8e8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37d230aeda3bbed03e1c18203948d869", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "01bb8fe9f8248cd9358b14893bccaf44dc8edaf8", "commitAfterChange": "bebbc656cd8c0b5b2b17917b50736d005533495d", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["+\t\t\tif (found.size == 0) return null;", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=69471", "+\t\t\t// bad guesses are foo(), when argument types have been supplied", "+\t\t\t// and foo(X, Y), when the argument types are (int, float, Y)", "+\t\t\t// so answer the method with the most argType matches and least parameter type mismatches", "+\t\t\tint bestArgMatches = -1;", "+\t\t\tint bestParamMatches = -1;", "+\t\t\tMethodBinding bestGuess = (MethodBinding) found.elementAt(0); // if no good match so just use the first one found", "-\t\t\t\tnextArg: for (int a = 0; a < argLength; a++) {", "+\t\t\t\tint argMatches = 0;", "+\t\t\t\tnext: for (int a = 0; a < argLength; a++) {", "-\t\t\t\t\tfor (int p = 0; p < paramLength; p++)", "-\t\t\t\t\t\tif (params[p] == arg)", "-\t\t\t\t\t\t\tcontinue nextArg;", "-\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\tfor (int p = a == 0 ? 0 : a - 1; p < paramLength && p < a + 1; p++) { // look one slot before & after to see if the type matches", "+\t\t\t\t\t\tif (params[p] == arg) {", "+\t\t\t\t\t\t\targMatches++;", "+\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\treturn methodBinding;", "+\t\t\t\tint paramMatches = 0;", "+\t\t\t\tnext: for (int p = 0; p < paramLength; p++) {", "+\t\t\t\t\tTypeBinding param = params[p];", "+\t\t\t\t\tfor (int a = p == 0 ? 0 : p - 1; a < argLength && a < p + 1; a++) { // look one slot before & after to see if the type matches", "+\t\t\t\t\t\tif (param == argumentTypes[a]) {", "+\t\t\t\t\t\t\tparamMatches++;", "+\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (argMatches + paramMatches < bestArgMatches + bestParamMatches)", "+\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\tif (argMatches + paramMatches == bestArgMatches + bestParamMatches) {", "+\t\t\t\t\tint diff1 = paramLength < argLength ? 2 * (argLength - paramLength) : paramLength - argLength;", "+\t\t\t\t\tint bestLength = bestGuess.parameters.length;", "+\t\t\t\t\tint diff2 = bestLength < argLength ? 2 * (argLength - bestLength) : bestLength - argLength;", "+\t\t\t\t\tif (diff1 >= diff2)", "+\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t}", "+\t\t\t\tbestArgMatches = argMatches;", "+\t\t\t\tbestParamMatches = paramMatches;", "+\t\t\t\tbestGuess = methodBinding;", "-\t\t\tif (found.size == 0) return null;", "-\t\t\treturn (MethodBinding) found.elementAt(0); // no good match so just use the first one found", "+\t\t\treturn bestGuess;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d95063c1e14ced38d997851a75ffdf8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "bacbe6f6e994ffc49a94960691c76bff97cb04d5", "commitAfterChange": "719705b20dc5e72fab3b2b50b669f9dfc58049aa", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["+\t\t// Apply one level of filtering per poly expression more specific rules.", "+\t\tif (compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\t\tMethodBinding[] moreSpecific = new MethodBinding[visibleSize];", "+\t\t\tint count = 0;", "+\t\t\tfor (int i = 0, length = argumentTypes.length; i < length; i++) {", "+\t\t\t\tTypeBinding argumentType = argumentTypes[i];", "+\t\t\t\tif (argumentType.kind() != Binding.POLY_TYPE)", "+\t\t\t\t\tcontinue;", "+\t\t\t\tnext:", "+\t\t\t\t\tfor (int j = 0; j < visibleSize; j++) {", "+\t\t\t\t\t\tfinal TypeBinding[] mbjParameters = visible[j].parameters;", "+\t\t\t\t\t\tfinal int mbjParametersLength = mbjParameters.length;", "+\t\t\t\t\t\tTypeBinding t = i < mbjParametersLength ? mbjParameters[i] : mbjParameters[mbjParametersLength - 1];", "+\t\t\t\t\t\tboolean tIsMoreSpecific = false;", "+\t\t\t\t\t\tfor (int k = 0; k < visibleSize; k++) {", "+\t\t\t\t\t\t\tif (j == k) continue;", "+\t\t\t\t\t\t\tfinal TypeBinding[] mbkParameters = visible[k].parameters;", "+\t\t\t\t\t\t\tfinal int mbkParametersLength = mbkParameters.length;", "+\t\t\t\t\t\t\tTypeBinding s = i < mbkParametersLength ? mbkParameters[i] : mbkParameters[mbkParametersLength - 1];", "+\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(t, s))", "+\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\tif (!argumentType.sIsMoreSpecific(t,s)) ", "+\t\t\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\t\ttIsMoreSpecific = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (tIsMoreSpecific)", "+\t\t\t\t\t\t\tmoreSpecific[count++] = visible[j];", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (count != 0) {", "+\t\t\t\tvisible = moreSpecific;", "+\t\t\t\tvisibleSize = count;", "+\t\t\t}", "+\t\t}", "+\t", "+\t\t// JLS7 implementation  ", "+\t\t"]}], "num": 23221}
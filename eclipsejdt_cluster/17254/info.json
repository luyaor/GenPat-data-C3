{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a8ddea51238cdc7625fae305d4b0904", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65e79ea973a797f1dbf08921ed917bf4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void testArrayType_04()", "signatureAfterChange": " \tpublic void testArrayType_04()", "diff": ["-    \t\t\"Null type safety: The expression of type String[][] needs unchecked conversion to conform to \\'@NonNull Object\\'\\n\" + ", "+    \t\t\"Null type safety (type annotations): The expression of type 'String [] @NonNull[]' needs unchecked conversion to conform to \\'@NonNull Object\\'\\n\" + ", "-    \t\t\"Null type safety: The expression of type String[][] needs unchecked conversion to conform to \\'@NonNull Object\\'\\n\" + ", "+    \t\t\"Null type safety (type annotations): The expression of type 'String [] @Nullable[]' needs unchecked conversion to conform to \\'@NonNull Object\\'\\n\" + ", "-\t\t\t\"Null type mismatch: required '@NonNull Object' but the provided value is inferred as @Nullable\\n\" + ", "+\t\t\t\"Null type mismatch (type annotations): required '@NonNull Object' but this expression has type 'String @Nullable[]'\\n\" + ", "-    \t\t\"Null type safety: The expression of type String needs unchecked conversion to conform to \\'@NonNull Object\\'\\n\" + ", "+    \t\t\"Null type safety (type annotations): The expression of type 'String' needs unchecked conversion to conform to \\'@NonNull Object\\'\\n\" + ", "-\t\t\t\"Null type safety: The expression of type String needs unchecked conversion to conform to \\'@NonNull Object\\'\\n\" +", "+\t\t\t\"Null type safety (type annotations): The expression of type 'String' needs unchecked conversion to conform to \\'@NonNull Object\\'\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75d82c811ccd66c8819d38767d845e9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5147f5a5f17d6e4dce9e06801af75e51b27b5773", "commitAfterChange": "a86b349626dbe62e03a6d150d88d335126baba70", "methodNumberBeforeChange": 823, "methodNumberAfterChange": 823, "signatureBeforeChange": " public void test817()", "signatureAfterChange": " public void test817()", "diff": ["-\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\"Incompatible conditional operand types X<?>.Inner[] and X<?>.Inner\\n\" + ", "+\t\t\"The expression of type X<?>.Inner is already an instance of type X<?>.Inner\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bec76622860a6ad6f66bb907fa8e3faf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "88090982bc7841972aaf7a02c388b452bc9c09ac", "commitAfterChange": "448130a4fef9b2a813962f7bf740288ca0953d30", "methodNumberBeforeChange": 823, "methodNumberAfterChange": 823, "signatureBeforeChange": " public void test817()", "signatureAfterChange": " public void test817()", "diff": ["-\t\tnew String[] {", "-\t\t\t\"X.java\",", "-\t\t\t\"import java.util.List;\\n\" + ", "-\t\t\t\"\\n\" + ", "-\t\t\t\"public class X<T> {\\n\" + ", "-\t\t\t\"    private T t;\\n\" + ", "-\t\t\t\"    private X<?>.Inner[] inner;\\n\" + ", "-\t\t\t\"    private X<?>.Inner[] inners;\\n\" + ", "-\t\t\t\"    public X(T t) {\\n\" + ", "-\t\t\t\"        this.t = t;\\n\" + ", "-\t\t\t\"        if (this.inner instanceof X<?>.Inner) {}\\n\" + ", "-\t\t\t\"        if (this.inners instanceof X<?>.Inner[]) {}\\n\" + ", "-\t\t\t\"    }\\n\" + ", "-\t\t\t\"    private class Inner {\\n\" + ", "-\t\t\t\"    }\\n\" + ", "-\t\t\t\"    void foo(List l) {\\n\" + ", "-\t\t\t\"    \tif (l instanceof List<?>) {}\\n\" + ", "-\t\t\t\"    \tif (l instanceof List<? extends String>) {}\\n\" + ", "-\t\t\t\"    }\\n\" + ", "-\t\t\t\"    void foo(List[] ls) {\\n\" + ", "-\t\t\t\"    \tif (ls instanceof List<?>[]) {}\\n\" + ", "-\t\t\t\"    \tif (ls instanceof List<? extends String>[]) {}\\n\" + ", "-\t\t\t\"    }\\n\" + ", "-\t\t\t\"}\\n\",", "-\t\t},", "-\t\t\"----------\\n\" + ", "-\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\"\tprivate T t;\\n\" + ", "-\t\t\"\t          ^\\n\" + ", "-\t\t\"The field X<T>.t is never read locally\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\"\tif (this.inner instanceof X<?>.Inner) {}\\n\" + ", "-\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Incompatible conditional operand types X<?>.Inner[] and X<?>.Inner\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\"\tif (this.inners instanceof X<?>.Inner[]) {}\\n\" + ", "-\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The expression of type X<?>.Inner[] is already an instance of type X<?>.Inner[]\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. WARNING in X.java (at line 15)\\n\" + ", "-\t\t\"\tif (l instanceof List<?>) {}\\n\" + ", "-\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The expression of type List is already an instance of type List<?>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"5. ERROR in X.java (at line 16)\\n\" + ", "-\t\t\"\tif (l instanceof List<? extends String>) {}\\n\" + ", "-\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Cannot perform instanceof check against parameterized type List<? extends String>. Use instead its raw form List since generic type information will be erased at runtime\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"6. WARNING in X.java (at line 19)\\n\" + ", "-\t\t\"\tif (ls instanceof List<?>[]) {}\\n\" + ", "-\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The expression of type List[] is already an instance of type List<?>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"7. ERROR in X.java (at line 20)\\n\" + ", "-\t\t\"\tif (ls instanceof List<? extends String>[]) {}\\n\" + ", "-\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Cannot perform instanceof check against parameterized type List<? extends String>[]. Use instead its raw form List[] since generic type information will be erased at runtime\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"import java.util.List;\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"public class X<T> {\\n\" + ", "+\t\t\t\t\"    private T t;\\n\" + ", "+\t\t\t\t\"    private X<?>.Inner inner;\\n\" + ", "+\t\t\t\t\"    private X<?>.Inner[] inners;\\n\" + ", "+\t\t\t\t\"    public X(T t) {\\n\" + ", "+\t\t\t\t\"        this.t = t;\\n\" + ", "+\t\t\t\t\"        if (this.inner instanceof X<?>.Inner) {}\\n\" + ", "+\t\t\t\t\"        if (this.inners instanceof X<?>.Inner[]) {}\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"    private class Inner {\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"    void foo(List l) {\\n\" + ", "+\t\t\t\t\"    \tif (l instanceof List<?>) {}\\n\" + ", "+\t\t\t\t\"    \tif (l instanceof List<? extends String>) {}\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"    void foo(List[] ls) {\\n\" + ", "+\t\t\t\t\"    \tif (ls instanceof List<?>[]) {}\\n\" + ", "+\t\t\t\t\"    \tif (ls instanceof List<? extends String>[]) {}\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tprivate T t;\\n\" + ", "+\t\t\t\"\t          ^\\n\" + ", "+\t\t\t\"The field X<T>.t is never read locally\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tif (this.inner instanceof X<?>.Inner) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The expression of type X<?>.Inner is already an instance of type X<?>.Inner\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tif (this.inners instanceof X<?>.Inner[]) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The expression of type X<?>.Inner[] is already an instance of type X<?>.Inner[]\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\t\"\tif (l instanceof List<?>) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The expression of type List is already an instance of type List<?>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\t\"\tif (l instanceof List<? extends String>) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against parameterized type List<? extends String>. Use instead its raw form List since generic type information will be erased at runtime\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 19)\\n\" + ", "+\t\t\t\"\tif (ls instanceof List<?>[]) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The expression of type List[] is already an instance of type List<?>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in X.java (at line 20)\\n\" + ", "+\t\t\t\"\tif (ls instanceof List<? extends String>[]) {}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against parameterized type List<? extends String>[]. Use instead its raw form List[] since generic type information will be erased at runtime\\n\" + ", "+\t\t\t\"----------\\n\");"]}], "num": 17254}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3371bc1c69b397fa08cccb3520a3c1e0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bf34b42631bf0749ab5913cd15c3284", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 727, "methodNumberAfterChange": 727, "signatureBeforeChange": " public void test0706b()", "signatureAfterChange": " public void test0706b()", "diff": ["+\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tAA<CC> res = bb.test();\\n\" + ", "+\t\t\t\"\t                ^^^^\\n\" + ", "+\t\t\t\"The method test() is ambiguous for the type BB\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tBB res2 = bb.test();\\n\" + ", "+\t\t\t\"\t             ^^^^\\n\" + ", "+\t\t\t\"The method test() is ambiguous for the type BB\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tclass BB extends AA<CC> { <U> BB test() {return null;} }\\n\" + ", "+\t\t\t\"\t                                 ^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method test() of type BB has the same erasure as test() of type AA<T> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\":", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tAA<CC> res = bb.test();\\n\" + ", "+\t\t\t\t\"\t                ^^^^\\n\" + ", "+\t\t\t\t\"The method test() is ambiguous for the type BB\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tBB res2 = bb.test();\\n\" + ", "+\t\t\t\t\"\t             ^^^^\\n\" + ", "+\t\t\t\t\"The method test() is ambiguous for the type BB\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\t\"\tclass BB extends AA<CC> { <U> BB test() {return null;} }\\n\" + ", "+\t\t\t\t\"\t                                 ^^^^^^\\n\" + ", "+\t\t\t\t\"Name clash: The method test() of type BB has the same erasure as test() of type AA<T> but does not override it\\n\" + ", "+\t\t\t\t\"----------\\n\";", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "-\t\t\"\tAA<CC> res = bb.test();\\n\" + ", "-\t\t\"\t                ^^^^\\n\" + ", "-\t\t\"The method test() is ambiguous for the type BB\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\"\tBB res2 = bb.test();\\n\" + ", "-\t\t\"\t             ^^^^\\n\" + ", "-\t\t\"The method test() is ambiguous for the type BB\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 9)\\n\" + ", "-\t\t\"\tclass BB extends AA<CC> { <U> BB test() {return null;} }\\n\" + ", "-\t\t\"\t                                 ^^^^^^\\n\" + ", "-\t\t\"Name clash: The method test() of type BB has the same erasure as test() of type AA<T> but does not override it\\n\" + ", "-\t\t\"----------\\n\"", "+\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9142b921177e40b2d7f88e8eeaa88f09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 338, "methodNumberAfterChange": 338, "signatureBeforeChange": " public void test187()", "signatureAfterChange": " public void test187()", "diff": ["+\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6 )?", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tdouble f(List<Integer> l) {return 0;}\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method f(List<Integer>) of type Y has the same erasure as f(List<String>) of type X but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tint f(List<String> l) {return 0;}\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method f(List<String>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tdouble f(List<Integer> l) {return 0;}\\n\" + ", "+\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method f(List<Integer>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "+\t\t\t\"----------\\n\":", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\tdouble f(List<Integer> l) {return 0;}\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Name clash: The method f(List<Integer>) of type Y has the same erasure as f(List<String>) of type X but does not override it\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\t\t\"\tint f(List<String> l) {return 0;}\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method f(List<String>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\t\"\tdouble f(List<Integer> l) {return 0;}\\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Method f(List<Integer>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "+\t\t\t\t\"----------\\n\";", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\"\tdouble f(List<Integer> l) {return 0;}\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Name clash: The method f(List<Integer>) of type Y has the same erasure as f(List<String>) of type X but does not override it\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. ERROR in X.java (at line 13)\\n\" + ", "-\t\t\"\tint f(List<String> l) {return 0;}\\n\" + ", "-\t\t\"\t    ^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Method f(List<String>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\"\tdouble f(List<Integer> l) {return 0;}\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Method f(List<Integer>) has the same erasure f(List<E>) as another method in type XX\\n\" + ", "-\t\t\"----------\\n\"", "+\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9de21dc7a9b942cd0c5e4d954712c438", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 160, "methodNumberAfterChange": 160, "signatureBeforeChange": " \tpublic void test050()", "signatureAfterChange": " \tpublic void test050()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\tpublic static <S extends A> S foo() { System.out.print(\\\"A\\\"); return null; }\\n\" + ", "+\t\t\t\t\"\t                              ^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tpublic static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" + ", "+\t\t\t\t\"\t                              ^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\tnew X().<B>foo();\\n\" + ", "+\t\t\t\t\"\t^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"The static method foo() from the type X should be accessed in a static way\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\t\t\"\tpublic static <S extends A> S foo() { System.out.print(\\\"A\\\"); return null; }\\n\" + ", "+\t\t\t\t\t\"\t                              ^^^^^\\n\" + ", "+\t\t\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\tpublic static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" + ", "+\t\t\t\t\t\"\t                              ^^^^^\\n\" + ", "+\t\t\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\t\"\tX.<B>foo();\\n\" + ", "+\t\t\t\t\t\"\t     ^^^\\n\" + ", "+\t\t\t\t\t\"Bound mismatch: The generic method foo() of type X is not applicable for the arguments (). The inferred type B is not a valid substitute for the bounded parameter <S extends A>\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\t\"\tnew X().<B>foo();\\n\" + ", "+\t\t\t\t\t\"\t           ^^^\\n\" + ", "+\t\t\t\t\t\"Bound mismatch: The generic method foo() of type X is not applicable for the arguments (). The inferred type B is not a valid substitute for the bounded parameter <S extends A>\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\"\tpublic static <S extends A> S foo() { System.out.print(\\\"A\\\"); return null; }\\n\" + ", "-\t\t\t\"\t                              ^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo() in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\tpublic static <N extends B> N foo() { System.out.print(\\\"B\\\"); return null; }\\n\" + ", "-\t\t\t\"\t                              ^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo() in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\tX.<B>foo();\\n\" + ", "-\t\t\t\"\t     ^^^\\n\" + ", "-\t\t\t\"Bound mismatch: The generic method foo() of type X is not applicable for the arguments (). The inferred type B is not a valid substitute for the bounded parameter <S extends A>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\tnew X().<B>foo();\\n\" + ", "-\t\t\t\"\t           ^^^\\n\" + ", "-\t\t\t\"Bound mismatch: The generic method foo() of type X is not applicable for the arguments (). The inferred type B is not a valid substitute for the bounded parameter <S extends A>\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0abd64a159e590d41ff3431287de7f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void test005()", "signatureAfterChange": " \tpublic void test005()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\t<S extends A> void foo() { }\\n\" + ", "+\t\t\t\t\"\t                   ^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\t<N extends B> N foo() { return null; }\\n\" + ", "+\t\t\t\t\"\t                ^^^^^\\n\" + ", "+\t\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tnew X().foo();\\n\" + ", "+\t\t\t\t\"\t        ^^^\\n\" + ", "+\t\t\t\t\"The method foo() is ambiguous for the type X\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\t\t\"\t<S extends A> void foo() { }\\n\" + ", "+\t\t\t\t\t\"\t                   ^^^^^\\n\" + ", "+\t\t\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\t<N extends B> N foo() { return null; }\\n\" + ", "+\t\t\t\t\t\"\t                ^^^^^\\n\" + ", "+\t\t\t\t\t\"Duplicate method foo() in type X\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\t\"\t<S extends A> void foo() { }\\n\" + ", "-\t\t\t\"\t                   ^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo() in type X\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\t<N extends B> N foo() { return null; }\\n\" + ", "-\t\t\t\"\t                ^^^^^\\n\" + ", "-\t\t\t\"Duplicate method foo() in type X\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "+\t\t\texpectedCompilerLog);"]}], "num": 48957}
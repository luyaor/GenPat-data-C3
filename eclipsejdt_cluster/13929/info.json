{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "983becbbb75e8621ef39819f53990010", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3143480a5af61527e0f77148fa849899", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "9ff98119ebbaca600880d978030549fe60ab70c6", "commitAfterChange": "235c5ccb088a8eae6b66fa79b1757fdfc0bfd335", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "  \tprivate void printIndentationIfNecessary(StringBuffer buffer)", "signatureAfterChange": "  \tprivate void printIndentationIfNecessary(StringBuffer buffer)", "diff": ["-\t\t\t\tint complement = 0;", "-\t\t\t\t\t\tif (indentationsAsTab < numberOfLeadingIndents) {", "+\t\t\t\t\t\tif (this.tabLength > 0 && indentationsAsTab < numberOfLeadingIndents) {", "-\t\t\t\t\t\t\tif(this.tabLength != 0) {", "-\t\t\t\t\t\t\t\tcomplement = this.tabLength - ((this.column - 1) % this.tabLength); // amount of space", "-\t\t\t\t\t\t\t\tthis.column += complement;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\telse {", "-\t\t\t\t\t\t\t\tthis.column++;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tthis.needSpace = false;", "+\t\t\t\t\t\t\tint complement = this.tabLength - ((this.column - 1) % this.tabLength); // amount of space", "+\t\t\t\t\t\t\tthis.column += complement;", "-\t\t\t\t\t\t\tthis.needSpace = false;", "+\t\t\t\t\t\tthis.needSpace = false;", "-\t\t\t\t} else {", "+\t\t\t\t} else if (this.tabLength > 0) {", "-\t\t\t\t\t\tif(this.tabLength != 0) {", "-\t\t\t\t\t\t\tcomplement = this.tabLength - ((this.column - 1) % this.tabLength); // amount of space", "-\t\t\t\t\t\t\tthis.column += complement;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\telse {", "-\t\t\t\t\t\t\tthis.column++;", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tint complement = this.tabLength - ((this.column - 1) % this.tabLength); // amount of space", "+\t\t\t\t\t\tthis.column += complement;", "-\t\t\t\t\t\t\tif ((this.column - 1 + this.tabLength) <= this.indentationLevel) {", "+\t\t\t\t\t\t\tif (this.tabLength > 0 && (this.column - 1 + this.tabLength) <= this.indentationLevel) {", "+\t\t\t\t\t\t\t\t// note that this.indentationSize > 0 when entering in the following loop", "+\t\t\t\t\t\t\t\t// hence this.column will be incremented and then avoid endless loop (see bug 290905)", "-\t\t\t\t\t\tif ((this.column - 1 + this.tabLength) <= this.indentationLevel) {", "+\t\t\t\t\t\tif (this.tabLength > 0 && (this.column - 1 + this.tabLength) <= this.indentationLevel) {", "-\t\t\t\t\t\t} else if ((this.column - 1 + this.indentationSize) <= this.indentationLevel) {", "+\t\t\t\t\t\t} else if (this.indentationSize > 0 && (this.column - 1 + this.indentationSize) <= this.indentationLevel) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa1a4336816843a1d278bdcff9b8b2d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKey.java", "commitBeforeChange": "ec6d7f365ea3ec3ffcd55d64775bd62b984807f3", "commitAfterChange": "c021c50efca4c234ec58241ed1fc82f6871e98bd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t char[][] compoundName()", "signatureAfterChange": " \t char[][] compoundName()", "diff": ["-\t\t \tif (this.scanner.token != BindingKeyScanner.PACKAGE) {", "-\t\t \t\tthis.compoundName = CharOperation.NO_CHAR_CHAR; // malformed", "-\t\t \t} else {", "-\t\t\t \tchar[][] pkg = CharOperation.splitOn('.', this.scanner.getTokenSource());", "-\t\t\t \tif (this.scanner.isAtTypeEnd()) {", "-\t\t\t \t\tthis.compoundName = pkg;", "-\t\t\t \t} else {", "-\t\t\t\t \tint token = this.scanner.nextToken();", "-\t\t\t\t \tswitch (token) {", "-\t\t\t\t \t\tcase BindingKeyScanner.TYPE:", "-\t\t\t\t\t \t\tchar[] simpleName = this.scanner.getTokenSource();", "-\t\t\t\t\t \t\tthis.compoundName = CharOperation.arrayConcat(pkg, simpleName);", "-\t\t\t\t\t \t\tbreak;", "-\t\t\t\t\t \tcase BindingKeyScanner.ARRAY: // case of base type with array dimension", "-\t\t\t\t\t \t\tthis.compoundName = pkg;", "-\t\t\t\t\t \t\tbreak;", "-\t\t\t\t\t \tdefault:", "-\t\t\t\t\t \t\tthis.compoundName = this.compoundName = CharOperation.NO_CHAR_CHAR; // malformed", "-\t\t\t\t \t}", "-\t\t\t \t}", "-\t\t \t}", "+\t \t\tswitch(this.scanner.nextToken()) {", "+\t \t\t\tcase BindingKeyScanner.PACKAGE:", "+\t \t\t\tcase BindingKeyScanner.TYPE:", "+\t\t \t\t\tthis.compoundName = CharOperation.splitOn('/', this.scanner.getTokenSource());", "+\t\t \t\t\tbreak;", "+\t\t \t\tcase BindingKeyScanner.ARRAY:", "+\t\t \t\t\tthis.dimension = this.scanner.getTokenSource().length;", "+\t\t \t\t\tif (this.scanner.nextToken() == BindingKeyScanner.TYPE)", "+\t\t\t \t\t\tthis.compoundName = CharOperation.splitOn('/', this.scanner.getTokenSource());", "+\t\t \t\t\telse", "+\t\t \t\t\t\t// malformed key", "+\t\t\t\t \t\tthis.compoundName = CharOperation.NO_CHAR_CHAR;", "+\t\t \t\t\tbreak;", "+\t\t \t\tdefault:", "+\t\t\t \t\t// malformed key", "+\t\t\t \t\tthis.compoundName = CharOperation.NO_CHAR_CHAR;", "+\t\t \t\t\tbreak;", "+\t \t\t}"]}], "num": 13929}
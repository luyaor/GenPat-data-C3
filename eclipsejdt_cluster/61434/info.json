{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "354f1095593efa5830c024254ad33b08", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d0939339490c151e078ed8b900f211b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "cbeae19d2fbc13263c1b9f693649af94787713c0", "commitAfterChange": "bfd17b0ed14dc5643292e77fa62ae765f4f8c89d", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " int[] findOverriddenInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": " int[] findOverriddenInheritedMethods(MethodBinding[] methods, int length)", "diff": ["-\t\tint firstInterfaceMethod = length;", "-\t\t\tif (toSkip != null && toSkip[i] == -1) continue nextMethod;", "-\t\t\t\tif (firstInterfaceMethod == length)", "-\t\t\t\t\tfirstInterfaceMethod = i;", "-\t\t\t\tfor (int j = firstInterfaceMethod; j < length; j++) {", "-\t\t\t\t\tif (i == j) continue;", "+\t\t\t\tif (toSkip != null && toSkip[i] == -1) continue nextMethod;", "+\t\t\t\tfor (int j = i + 1; j < length; j++) {", "+\t\t\t\t\tif (toSkip != null && toSkip[j] == -1) continue;", "-\t\t\t\t\tif (declaringClass2.implementsInterface(declaringClass, true)) {", "+\t\t\t\t\tif (declaringClass.implementsInterface(declaringClass2, true)) {", "+\t\t\t\t\t\tif (toSkip == null)", "+\t\t\t\t\t\t\ttoSkip = new int[length];", "+\t\t\t\t\t\ttoSkip[j] = -1;", "+\t\t\t\t\t} else if (declaringClass2.implementsInterface(declaringClass, true)) {", "-\t\t\t} else { ", "-\t\t\t\tfor (int j = i + 1; j < firstInterfaceMethod; j++) {", "+\t\t\t} else {", "+\t\t\t\t// only keep methods from the closest superclass, all others from higher superclasses can be skipped", "+\t\t\t\t// NOTE: methods were added in order by walking up the superclass hierarchy", "+\t\t\t\tfor (int j = i + 1; j < length; j++) {", "+\t\t\t\t\tif (declaringClass == declaringClass2) continue;", "-\t\t\t\t\t\t// no methods from classes left", "-\t\t\t\t\t\tfirstInterfaceMethod = j;", "+\t\t\t\t\t\ti = j - 1; // start the interface comparison with this method", "-\t\t\t\t\t}", "-\t\t\t\t\tif (declaringClass != declaringClass2 && declaringClass2.isSuperclassOf(declaringClass)) {", "+\t\t\t\t\t} else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c05f715adb3e720aee2b2419449e9bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "727d8ca46d64642ad4f629f81ba37e76e7ae8c85", "commitAfterChange": "3bf739514a83473db763d6e900f7cc23c49722a4", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  void checkForRedundantSuperinterfaces(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "signatureAfterChange": "  void checkForRedundantSuperinterfaces(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "diff": ["-\tnext : for (int i = 0, l = superInterfaces.length; i < l; i++) {", "+\tSimpleSet redundantInterfaces = null;  // bark but once.", "+\tfor (int i = 0, l = superInterfaces.length; i < l; i++) {", "-\t\t\tif (i != j && toCheck.implementsInterface(superInterfaces[j], true)) {", "+\t\t\tReferenceBinding implementedInterface = superInterfaces[j];", "+\t\t\tif (i != j && toCheck.implementsInterface(implementedInterface, true)) {", "+\t\t\t\tif (redundantInterfaces == null) {", "+\t\t\t\t\tredundantInterfaces = new SimpleSet(3);", "+\t\t\t\t} else if (redundantInterfaces.includes(implementedInterface)) {", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tredundantInterfaces.add(implementedInterface);", "-\t\t\t\t\t\tproblemReporter().redundantSuperInterface(this.type, refs[j], superInterfaces[j], toCheck);", "-\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t\tproblemReporter().redundantSuperInterface(this.type, refs[j], implementedInterface, toCheck);", "+\t\t\t\t\t\tbreak; // https://bugs.eclipse.org/bugs/show_bug.cgi?id=320911", "+\t\t\t\t\t\tif (redundantInterfaces == null) {", "+\t\t\t\t\t\t\tredundantInterfaces = new SimpleSet(3);", "+\t\t\t\t\t\t} else if (redundantInterfaces.includes(inheritedInterface)) {", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tredundantInterfaces.add(inheritedInterface);", "+\t\t\t\t\t\tif (redundantInterfaces == null) {", "+\t\t\t\t\t\t\tredundantInterfaces = new SimpleSet(3);", "+\t\t\t\t\t\t} else if (redundantInterfaces.includes(inheritedInterface)) {", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tredundantInterfaces.add(inheritedInterface);"]}], "num": 61434}
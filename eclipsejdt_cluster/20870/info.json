{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "248e98df7eeac98c1218c4c17d9f9535", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fa543793e7bb6f4804436563c89645f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "130a55997b08af356a22f13721ef702eb35b7557", "commitAfterChange": "5cb7a8282e40bea7ee7271bbdb7d8b845c76f5b3", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 30, "signatureBeforeChange": "\r public void notifySourceElementRequestor(TypeDeclaration typeDeclaration, boolean notifyTypePresence)", "signatureAfterChange": "\r public void notifySourceElementRequestor(TypeDeclaration typeDeclaration, boolean notifyTypePresence)", "diff": ["+\t\t} else {\r", "+\t\t\tif (typeDeclaration instanceof AnonymousLocalTypeDeclaration) {\r", "+\t\t\t\tsuperInterfaces = new TypeReference[] { ((AnonymousLocalTypeDeclaration)typeDeclaration).allocation.type};\r", "+\t\t\t\tsuperInterfacesLength = 1;\r", "+\t\t\t\tinterfaceNames = new char[1][];\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abbfa4362e4926b947a98c3e533961b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/BaseConfigurationBlock.java", "commitBeforeChange": "576407392080679bcaa93015edc00b23d7d42bf3", "commitAfterChange": "ddf6f6ea9caa1cb573b54d6cc772a0efdfa489b6", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \t \t \tpublic void performDefaults()", "signatureAfterChange": " \t \t \tpublic void performDefaults()", "diff": ["-\t\tIScopeContext defaultScope= (fProject == null) ? new DefaultScope() : new InstanceScope();", "+\t\tIScopeContext[] lookupOrder; // not same as fLookupOrder!  Starts one layer deeper.", "+\t\tif (fProject != null) {", "+\t\t\tlookupOrder= new IScopeContext[] {", "+\t\t\t\tnew InstanceScope(),", "+\t\t\t\tnew DefaultScope()", "+\t\t\t};", "+\t\t} else {", "+\t\t\tlookupOrder= new IScopeContext[] {", "+\t\t\t\tnew DefaultScope()", "+\t\t\t};", "+\t\t}", "+", "-\t\t\tString defValue= curr.getStoredValue(defaultScope, null);", "+\t\t\tString defValue= curr.getStoredValue(lookupOrder, false, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4742d5d3c886567e339aec9071dd131", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/jdom/DOMBuilder.java", "commitBeforeChange": "9775ec02677be6ff4d3ba1b00290972762b1e812", "commitAfterChange": "f39e3e40a8fb480e71912552d3976827814676e5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void acceptPackage(int declarationStart, int declarationEnd, int[] javaDocPositions, char[] name, \tint nameStartPosition)", "signatureAfterChange": " public void acceptPackage(int declarationStart, int declarationEnd, int[] javaDocPositions, char[] name, \tint nameStartPosition)", "diff": ["-\tint[] sourceRange = {declarationStart, declarationEnd};", "+\tint[] sourceRange = null;", "+\tif (javaDocPositions != null) {", "+\t\tint length = javaDocPositions.length;", "+\t\t// get last javadoc comment (see bug 68772)", "+\t\tsourceRange = new int[] {javaDocPositions[length - 2], declarationEnd};", "+\t} else {", "+\t\tsourceRange = new int[] {declarationStart, declarationEnd};", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d82e02c62547a823b4d3bb773c2708c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "5e5523e13b821734aff66b4f4011996446b2a5b6", "commitAfterChange": "28c8bae609bb10493a48207665f7915360974709", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "  \tprivate void initializeScanner(long sourceLevel, DefaultCodeFormatterOptions preferences)", "signatureAfterChange": "  \tprivate void initializeScanner(long sourceLevel, DefaultCodeFormatterOptions preferences)", "diff": ["-\t\tif (this.disablingTag == null && this.enablingTag == null) {", "-\t\t\ttaskTags = null;", "+\t\tif (this.disablingTag == null) {", "+\t\t\tif (this.enablingTag == null) {", "+\t\t\t\ttaskTags = null;", "+\t\t\t} else {", "+\t\t\t\ttaskTags = new char[][] { this.enablingTag };", "+\t\t\t}", "+\t\t} else if (this.enablingTag == null) {", "+\t\t\ttaskTags = new char[][] { this.disablingTag };"]}], "num": 20870}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a37d77610a2a89cb2445536e9562fd18", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09b1dffb8c30f2dfdf651fe8632b66bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "1bd28947ec61a68bcbaa48e5f62a38f1082dad74", "commitAfterChange": "158f15ed7305b84f608a44b2b3e60c3a50fa4c1b", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " protected void checkNullConstraints(Scope scope, TypeReference[] typeArguments)", "signatureAfterChange": " protected void checkIllegalNullAnnotations(Scope scope, TypeReference[] typeArguments)", "diff": ["-/** Check all typeArguments against null constraints on their corresponding type variables. */", "-protected void checkNullConstraints(Scope scope, TypeReference[] typeArguments) {", "-\tif (scope.environment().usesNullTypeAnnotations()", "-\t\t\t&& typeArguments != null)", "-\t{", "-\t\tTypeVariableBinding[] typeVariables = this.resolvedType.original().typeVariables();", "+/** Check all typeArguments for illegal null annotations on base types. */", "+protected void checkIllegalNullAnnotations(Scope scope, TypeReference[] typeArguments) {", "+\tif (scope.environment().usesNullTypeAnnotations() && typeArguments != null) {", "-\t\t\t\targ.checkNullConstraints(scope, typeVariables, i);", "+\t\t\t\targ.checkIllegalNullAnnotation(scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "580bd3eb2160527c66c3f58b8affeb0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "1bd28947ec61a68bcbaa48e5f62a38f1082dad74", "commitAfterChange": "158f15ed7305b84f608a44b2b3e60c3a50fa4c1b", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " protected void checkNullConstraints(Scope scope, TypeBinding[] variables, int rank)", "signatureAfterChange": " protected void checkNullConstraints(Scope scope, Substitution substitution, TypeBinding[] variables, int rank)", "diff": ["-protected void checkNullConstraints(Scope scope, TypeBinding[] variables, int rank) {", "+protected void checkNullConstraints(Scope scope, Substitution substitution, TypeBinding[] variables, int rank) {", "-\t\t\tif (NullAnnotationMatching.analyse(variable, this.resolvedType, null, -1, CheckMode.BOUND_CHECK).isAnyMismatch())", "+\t\t\tif (NullAnnotationMatching.analyse(variable, this.resolvedType, null, substitution, -1, CheckMode.BOUND_CHECK).isAnyMismatch())", "-\tif (this.resolvedType.leafComponentType().isBaseType() && hasNullTypeAnnotation(AnnotationPosition.LEAF_TYPE)) {", "-\t\tscope.problemReporter().illegalAnnotationForBaseType(this, this.annotations[0], this.resolvedType.tagBits & TagBits.AnnotationNullMASK);", "-\t}", "+\tcheckIllegalNullAnnotation(scope);", "+}"]}], "num": 69258}
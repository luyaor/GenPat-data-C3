{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "850dbdd892e2242123546bf20e5b4e0b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "207feac1fc59627b47a735f7468646c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 108, "signatureBeforeChange": " \tpublic void test0097() throws JavaModelException", "signatureAfterChange": " \tpublic void test0097() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"@interface An1 {}\\n\" +", "-\t\t\t\t\"@interface An2 {}\\n\" +", "-\t\t\t\t\"@interface An3 {}\\n\" +", "-\t\t\t\t\"@An2 class X {\\n\" +", "-\t\t\t\t\"\t@An1 Object o;\\n\" +", "-\t\t\t\t\"\t@An3 void foo() {\\n\" +", "-\t\t\t\t\"\t\t\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tnode = getASTNode(compilationUnit, 3);", "-\t\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "-\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "-\t\t\tList modifiers = typeDeclaration.modifiers();", "-\t\t\tassertEquals(\"Wrong size\", 1, modifiers.size());", "-\t\t\tIExtendedModifier modifier = (IExtendedModifier) modifiers.get(0);", "-\t\t\tassertTrue(\"Not an annotation\", modifier instanceof Annotation);", "-\t\t\tcheckSourceRange((Annotation) modifier, \"@An2\", contents.toCharArray());", "-\t\t\t", "-\t\t\tnode = getASTNode(compilationUnit, 3, 0);", "-\t\t\tassertEquals(\"Not a field declaration\", ASTNode.FIELD_DECLARATION, node.getNodeType());", "-\t\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) node;", "-\t\t\tmodifiers = fieldDeclaration.modifiers();", "-\t\t\tassertEquals(\"Wrong size\", 1, modifiers.size());", "-\t\t\tmodifier = (IExtendedModifier) modifiers.get(0);", "-\t\t\tassertTrue(\"Not an annotation\", modifier instanceof Annotation);", "-\t\t\tcheckSourceRange((Annotation) modifier, \"@An1\", contents.toCharArray());", "+\t\tString contents =", "+\t\t\t\"@interface An1 {}\\n\" +", "+\t\t\t\"@interface An2 {}\\n\" +", "+\t\t\t\"@interface An3 {}\\n\" +", "+\t\t\t\"@An2 class X {\\n\" +", "+\t\t\t\"\t@An1 Object o;\\n\" +", "+\t\t\t\"\t@An3 void foo() {\\n\" +", "+\t\t\t\"\t\t\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tnode = getASTNode(compilationUnit, 3);", "+\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "+\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "+\t\tList modifiers = typeDeclaration.modifiers();", "+\t\tassertEquals(\"Wrong size\", 1, modifiers.size());", "+\t\tIExtendedModifier modifier = (IExtendedModifier) modifiers.get(0);", "+\t\tassertTrue(\"Not an annotation\", modifier instanceof Annotation);", "+\t\tcheckSourceRange((Annotation) modifier, \"@An2\", contents.toCharArray());", "+\t\t", "+\t\tnode = getASTNode(compilationUnit, 3, 0);", "+\t\tassertEquals(\"Not a field declaration\", ASTNode.FIELD_DECLARATION, node.getNodeType());", "+\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) node;", "+\t\tmodifiers = fieldDeclaration.modifiers();", "+\t\tassertEquals(\"Wrong size\", 1, modifiers.size());", "+\t\tmodifier = (IExtendedModifier) modifiers.get(0);", "+\t\tassertTrue(\"Not an annotation\", modifier instanceof Annotation);", "+\t\tcheckSourceRange((Annotation) modifier, \"@An1\", contents.toCharArray());", "-\t\t\tnode = getASTNode(compilationUnit, 3, 1);", "-\t\t\tassertEquals(\"Not a field declaration\", ASTNode.METHOD_DECLARATION, node.getNodeType());", "-\t\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) node;", "-\t\t\tmodifiers = methodDeclaration.modifiers();", "-\t\t\tassertEquals(\"Wrong size\", 1, modifiers.size());", "-\t\t\tmodifier = (IExtendedModifier) modifiers.get(0);", "-\t\t\tassertTrue(\"Not an annotation\", modifier instanceof Annotation);", "-\t\t\tcheckSourceRange((Annotation) modifier, \"@An3\", contents.toCharArray());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tnode = getASTNode(compilationUnit, 3, 1);", "+\t\tassertEquals(\"Not a field declaration\", ASTNode.METHOD_DECLARATION, node.getNodeType());", "+\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) node;", "+\t\tmodifiers = methodDeclaration.modifiers();", "+\t\tassertEquals(\"Wrong size\", 1, modifiers.size());", "+\t\tmodifier = (IExtendedModifier) modifiers.get(0);", "+\t\tassertTrue(\"Not an annotation\", modifier instanceof Annotation);", "+\t\tcheckSourceRange((Annotation) modifier, \"@An3\", contents.toCharArray());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "689e5379e212f107b6c6206878ebc0ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 116, "signatureBeforeChange": " \tpublic void test0105() throws JavaModelException", "signatureAfterChange": " \tpublic void test0105() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"@interface Ann {}\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"@Ann public class X {}\\n\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tnode = getASTNode(compilationUnit, 1);", "-\t\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "-\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "-\t\t\tList modifiers = typeDeclaration.modifiers();", "-\t\t\tassertEquals(\"Wrong size\", 2, modifiers.size());", "-\t\t\tIExtendedModifier extendedModifier = (IExtendedModifier) modifiers.get(0);", "-\t\t\tassertTrue(\"Not a marker annotation\", extendedModifier instanceof MarkerAnnotation);", "-\t\t\tMarkerAnnotation markerAnnotation = (MarkerAnnotation) extendedModifier;", "-\t\t\tITypeBinding binding = markerAnnotation.resolveTypeBinding();", "-\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t\tName name = markerAnnotation.getTypeName();", "-\t\t\tbinding = name.resolveTypeBinding();", "-\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"@interface Ann {}\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"@Ann public class X {}\\n\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tnode = getASTNode(compilationUnit, 1);", "+\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "+\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "+\t\tList modifiers = typeDeclaration.modifiers();", "+\t\tassertEquals(\"Wrong size\", 2, modifiers.size());", "+\t\tIExtendedModifier extendedModifier = (IExtendedModifier) modifiers.get(0);", "+\t\tassertTrue(\"Not a marker annotation\", extendedModifier instanceof MarkerAnnotation);", "+\t\tMarkerAnnotation markerAnnotation = (MarkerAnnotation) extendedModifier;", "+\t\tITypeBinding binding = markerAnnotation.resolveTypeBinding();", "+\t\tassertNotNull(\"No binding\", binding);", "+\t\tName name = markerAnnotation.getTypeName();", "+\t\tbinding = name.resolveTypeBinding();", "+\t\tassertNotNull(\"No binding\", binding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91efe7d3c00da21658e4310569e7523d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 111, "signatureBeforeChange": " \tpublic void test0100() throws JavaModelException", "signatureAfterChange": " \tpublic void test0100() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"public enum E {\\n\" +", "-\t\t\t\t\"\tA, B, C;\\n\" +", "-\t\t\t\t\"\tpublic static final E D = B;\\n\" +", "-\t\t\t\t\"\tpublic static final String F = \\\"Hello\\\";\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/E.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tnode = getASTNode(compilationUnit, 0);", "-\t\t\tassertEquals(\"Not an enum declaration\", ASTNode.ENUM_DECLARATION, node.getNodeType());", "-\t\t\tEnumDeclaration enumDeclaration = (EnumDeclaration) node;", "-\t\t\tList enumConstants = enumDeclaration.enumConstants();", "-\t\t\tassertEquals(\"wrong size\", 3, enumConstants.size());", "-\t\t\tEnumConstantDeclaration enumConstantDeclaration = (EnumConstantDeclaration) enumConstants.get(0);", "-\t\t\tIVariableBinding variableBinding = enumConstantDeclaration.resolveVariable();", "-\t\t\tassertNotNull(\"no binding\", variableBinding);", "-\t\t\tassertNull(\"is constant\", variableBinding.getConstantValue());", "-\t\t\tassertTrue(\"Not an enum constant\", variableBinding.isEnumConstant());", "-\t\t\t", "-\t\t\tnode = getASTNode(compilationUnit, 0, 0);", "-\t\t\tassertEquals(\"Not a field declaration\", ASTNode.FIELD_DECLARATION, node.getNodeType());", "-\t\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) node;", "-\t\t\tList fragments = fieldDeclaration.fragments();", "-\t\t\tassertEquals(\"Wrong size\", 1, fragments.size());", "-\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "-\t\t\tassertEquals(\"wrong name\", \"D\", fragment.getName().getIdentifier());", "-\t\t\tvariableBinding = fragment.resolveBinding();", "-\t\t\tassertNotNull(\"no binding\", variableBinding);\t\t\t", "-\t\t\tassertFalse(\"An enum constant\", variableBinding.isEnumConstant());", "+\t\tString contents =", "+\t\t\t\"public enum E {\\n\" +", "+\t\t\t\"\tA, B, C;\\n\" +", "+\t\t\t\"\tpublic static final E D = B;\\n\" +", "+\t\t\t\"\tpublic static final String F = \\\"Hello\\\";\\n\" +", "+\t\t\t\"}\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/E.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tnode = getASTNode(compilationUnit, 0);", "+\t\tassertEquals(\"Not an enum declaration\", ASTNode.ENUM_DECLARATION, node.getNodeType());", "+\t\tEnumDeclaration enumDeclaration = (EnumDeclaration) node;", "+\t\tList enumConstants = enumDeclaration.enumConstants();", "+\t\tassertEquals(\"wrong size\", 3, enumConstants.size());", "+\t\tEnumConstantDeclaration enumConstantDeclaration = (EnumConstantDeclaration) enumConstants.get(0);", "+\t\tIVariableBinding variableBinding = enumConstantDeclaration.resolveVariable();", "+\t\tassertNotNull(\"no binding\", variableBinding);", "+\t\tassertNull(\"is constant\", variableBinding.getConstantValue());", "+\t\tassertTrue(\"Not an enum constant\", variableBinding.isEnumConstant());", "+\t\t", "+\t\tnode = getASTNode(compilationUnit, 0, 0);", "+\t\tassertEquals(\"Not a field declaration\", ASTNode.FIELD_DECLARATION, node.getNodeType());", "+\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) node;", "+\t\tList fragments = fieldDeclaration.fragments();", "+\t\tassertEquals(\"Wrong size\", 1, fragments.size());", "+\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "+\t\tassertEquals(\"wrong name\", \"D\", fragment.getName().getIdentifier());", "+\t\tvariableBinding = fragment.resolveBinding();", "+\t\tassertNotNull(\"no binding\", variableBinding);\t\t\t", "+\t\tassertFalse(\"An enum constant\", variableBinding.isEnumConstant());", "-\t\t\tnode = getASTNode(compilationUnit, 0, 1);", "-\t\t\tassertEquals(\"Not a field declaration\", ASTNode.FIELD_DECLARATION, node.getNodeType());", "-\t\t\tfieldDeclaration = (FieldDeclaration) node;", "-\t\t\tfragments = fieldDeclaration.fragments();", "-\t\t\tassertEquals(\"Wrong size\", 1, fragments.size());", "-\t\t\tfragment = (VariableDeclarationFragment) fragments.get(0);", "-\t\t\tassertEquals(\"wrong name\", \"F\", fragment.getName().getIdentifier());", "-\t\t\tvariableBinding = fragment.resolveBinding();", "-\t\t\tassertNotNull(\"no binding\", variableBinding);\t", "-\t\t\tassertNotNull(\"is constant\", variableBinding.getConstantValue());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tnode = getASTNode(compilationUnit, 0, 1);", "+\t\tassertEquals(\"Not a field declaration\", ASTNode.FIELD_DECLARATION, node.getNodeType());", "+\t\tfieldDeclaration = (FieldDeclaration) node;", "+\t\tfragments = fieldDeclaration.fragments();", "+\t\tassertEquals(\"Wrong size\", 1, fragments.size());", "+\t\tfragment = (VariableDeclarationFragment) fragments.get(0);", "+\t\tassertEquals(\"wrong name\", \"F\", fragment.getName().getIdentifier());", "+\t\tvariableBinding = fragment.resolveBinding();", "+\t\tassertNotNull(\"no binding\", variableBinding);\t", "+\t\tassertNotNull(\"is constant\", variableBinding.getConstantValue());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a06d6e9afa022920f2bfc7fdde29316a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 117, "signatureBeforeChange": " \tpublic void test0106() throws JavaModelException", "signatureAfterChange": " \tpublic void test0106() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"@interface Ann {}\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"@p.Ann public class X {}\\n\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tnode = getASTNode(compilationUnit, 1);", "-\t\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "-\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "-\t\t\tList modifiers = typeDeclaration.modifiers();", "-\t\t\tassertEquals(\"Wrong size\", 2, modifiers.size());", "-\t\t\tIExtendedModifier extendedModifier = (IExtendedModifier) modifiers.get(0);", "-\t\t\tassertTrue(\"Not a marker annotation\", extendedModifier instanceof MarkerAnnotation);", "-\t\t\tMarkerAnnotation markerAnnotation = (MarkerAnnotation) extendedModifier;", "-\t\t\tITypeBinding typeBinding = markerAnnotation.resolveTypeBinding();", "-\t\t\tassertNotNull(\"No binding\", typeBinding);", "-\t\t\tName name = markerAnnotation.getTypeName();", "-\t\t\ttypeBinding = name.resolveTypeBinding();", "-\t\t\tassertNotNull(\"No binding\", typeBinding);", "-\t\t\tIBinding binding = name.resolveBinding();", "-\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t\tassertEquals(\"Wrong kind of binding\", IBinding.TYPE, binding.getKind());", "-\t\t\tassertEquals(\"Not a qualified name\", ASTNode.QUALIFIED_NAME, name.getNodeType());", "-\t\t\tQualifiedName qualifiedName = (QualifiedName) name;", "-\t\t\tSimpleName simpleName = qualifiedName.getName();", "-\t\t\tbinding = simpleName.resolveBinding();", "-\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t\tname = qualifiedName.getQualifier();", "-\t\t\tbinding = name.resolveBinding();", "-\t\t\tassertNotNull(\"No binding\", binding);\t\t\t", "-\t\t\tassertEquals(\"Wrong kind of binding\", IBinding.PACKAGE, binding.getKind());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"package p;\\n\" +", "+\t\t\t\"@interface Ann {}\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"@p.Ann public class X {}\\n\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/p/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tnode = getASTNode(compilationUnit, 1);", "+\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "+\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "+\t\tList modifiers = typeDeclaration.modifiers();", "+\t\tassertEquals(\"Wrong size\", 2, modifiers.size());", "+\t\tIExtendedModifier extendedModifier = (IExtendedModifier) modifiers.get(0);", "+\t\tassertTrue(\"Not a marker annotation\", extendedModifier instanceof MarkerAnnotation);", "+\t\tMarkerAnnotation markerAnnotation = (MarkerAnnotation) extendedModifier;", "+\t\tITypeBinding typeBinding = markerAnnotation.resolveTypeBinding();", "+\t\tassertNotNull(\"No binding\", typeBinding);", "+\t\tName name = markerAnnotation.getTypeName();", "+\t\ttypeBinding = name.resolveTypeBinding();", "+\t\tassertNotNull(\"No binding\", typeBinding);", "+\t\tIBinding binding = name.resolveBinding();", "+\t\tassertNotNull(\"No binding\", binding);", "+\t\tassertEquals(\"Wrong kind of binding\", IBinding.TYPE, binding.getKind());", "+\t\tassertEquals(\"Not a qualified name\", ASTNode.QUALIFIED_NAME, name.getNodeType());", "+\t\tQualifiedName qualifiedName = (QualifiedName) name;", "+\t\tSimpleName simpleName = qualifiedName.getName();", "+\t\tbinding = simpleName.resolveBinding();", "+\t\tassertNotNull(\"No binding\", binding);", "+\t\tname = qualifiedName.getQualifier();", "+\t\tbinding = name.resolveBinding();", "+\t\tassertNotNull(\"No binding\", binding);\t\t\t", "+\t\tassertEquals(\"Wrong kind of binding\", IBinding.PACKAGE, binding.getKind());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9e077d05d428934c041696930ed82c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 110, "signatureBeforeChange": " \tpublic void test0099() throws JavaModelException", "signatureAfterChange": " \tpublic void test0099() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"\t@Override @Annot(value=\\\"Hello\\\") public String toString() {\\n\" +", "-\t\t\t\t\"\t\treturn super.toString();\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"\t@Annot(\\\"Hello\\\") void bar() {\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"\t@interface Annot {\\n\" +", "-\t\t\t\t\"\t\tString value();\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tnode = getASTNode(compilationUnit, 0, 0);", "-\t\t\tassertEquals(\"Not a method declaration\", ASTNode.METHOD_DECLARATION, node.getNodeType());", "-\t\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) node;", "-\t\t\tList modifiers = methodDeclaration.modifiers();", "-\t\t\tassertEquals(\"Wrong size\", 3, modifiers.size());", "-\t\t\tIExtendedModifier modifier = (IExtendedModifier) modifiers.get(0);", "-\t\t\tassertTrue(\"Wrong type\", modifier instanceof Annotation);", "-\t\t\tAnnotation annotation = (Annotation) modifier;", "-\t\t\tITypeBinding binding = annotation.resolveTypeBinding();", "-\t\t\tassertNotNull(\"No binding\", binding);", "+\t\tString contents =", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"\t@Override @Annot(value=\\\"Hello\\\") public String toString() {\\n\" +", "+\t\t\t\"\t\treturn super.toString();\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\t@Annot(\\\"Hello\\\") void bar() {\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\t@interface Annot {\\n\" +", "+\t\t\t\"\t\tString value();\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tnode = getASTNode(compilationUnit, 0, 0);", "+\t\tassertEquals(\"Not a method declaration\", ASTNode.METHOD_DECLARATION, node.getNodeType());", "+\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) node;", "+\t\tList modifiers = methodDeclaration.modifiers();", "+\t\tassertEquals(\"Wrong size\", 3, modifiers.size());", "+\t\tIExtendedModifier modifier = (IExtendedModifier) modifiers.get(0);", "+\t\tassertTrue(\"Wrong type\", modifier instanceof Annotation);", "+\t\tAnnotation annotation = (Annotation) modifier;", "+\t\tITypeBinding binding = annotation.resolveTypeBinding();", "+\t\tassertNotNull(\"No binding\", binding);", "-\t\t\tmodifier = (IExtendedModifier) modifiers.get(1);", "-\t\t\tassertTrue(\"Wrong type\", modifier instanceof Annotation);", "-\t\t\tannotation = (Annotation) modifier;", "-\t\t\tbinding = annotation.resolveTypeBinding();", "-\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t\tassertEquals(\"Wrong type\", ASTNode.NORMAL_ANNOTATION, annotation.getNodeType());", "-\t\t\tNormalAnnotation normalAnnotation = (NormalAnnotation) annotation;", "-\t\t\tList values = normalAnnotation.values();", "-\t\t\tassertEquals(\"wrong size\", 1, values.size());", "-\t\t\tMemberValuePair valuePair = (MemberValuePair) values.get(0);", "-\t\t\tSimpleName name = valuePair.getName();", "-\t\t\tIBinding binding2 = name.resolveBinding();", "-\t\t\tassertNotNull(\"No binding\", binding2);", "-\t\t\tITypeBinding typeBinding = name.resolveTypeBinding();", "-\t\t\tassertNotNull(\"No binding\", typeBinding);", "+\t\tmodifier = (IExtendedModifier) modifiers.get(1);", "+\t\tassertTrue(\"Wrong type\", modifier instanceof Annotation);", "+\t\tannotation = (Annotation) modifier;", "+\t\tbinding = annotation.resolveTypeBinding();", "+\t\tassertNotNull(\"No binding\", binding);", "+\t\tassertEquals(\"Wrong type\", ASTNode.NORMAL_ANNOTATION, annotation.getNodeType());", "+\t\tNormalAnnotation normalAnnotation = (NormalAnnotation) annotation;", "+\t\tList values = normalAnnotation.values();", "+\t\tassertEquals(\"wrong size\", 1, values.size());", "+\t\tMemberValuePair valuePair = (MemberValuePair) values.get(0);", "+\t\tSimpleName name = valuePair.getName();", "+\t\tIBinding binding2 = name.resolveBinding();", "+\t\tassertNotNull(\"No binding\", binding2);", "+\t\tITypeBinding typeBinding = name.resolveTypeBinding();", "+\t\tassertNotNull(\"No binding\", typeBinding);", "-\t\t\tnode = getASTNode(compilationUnit, 0, 1);", "-\t\t\tassertEquals(\"Not a method declaration\", ASTNode.METHOD_DECLARATION, node.getNodeType());", "-\t\t\tmethodDeclaration = (MethodDeclaration) node;", "-\t\t\tmodifiers = methodDeclaration.modifiers();", "-\t\t\tassertEquals(\"Wrong size\", 1, modifiers.size());", "-\t\t\tmodifier = (IExtendedModifier) modifiers.get(0);", "-\t\t\tassertTrue(\"Wrong type\", modifier instanceof Annotation);", "-\t\t\tannotation = (Annotation) modifier;", "-\t\t\tbinding = annotation.resolveTypeBinding();", "-\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tnode = getASTNode(compilationUnit, 0, 1);", "+\t\tassertEquals(\"Not a method declaration\", ASTNode.METHOD_DECLARATION, node.getNodeType());", "+\t\tmethodDeclaration = (MethodDeclaration) node;", "+\t\tmodifiers = methodDeclaration.modifiers();", "+\t\tassertEquals(\"Wrong size\", 1, modifiers.size());", "+\t\tmodifier = (IExtendedModifier) modifiers.get(0);", "+\t\tassertTrue(\"Wrong type\", modifier instanceof Annotation);", "+\t\tannotation = (Annotation) modifier;", "+\t\tbinding = annotation.resolveTypeBinding();", "+\t\tassertNotNull(\"No binding\", binding);"]}], "num": 29170}
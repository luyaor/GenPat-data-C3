{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08fd921586683cd5af589a3cafdadeef", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e02287fc16f6411a3b012d3d480638a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6d9cd9b246f8b8740f4a501085a32633b2b6c2af", "commitAfterChange": "470afdfff602b441f9a45a7d903230534423c9ca", "methodNumberBeforeChange": 656, "methodNumberAfterChange": 656, "signatureBeforeChange": "\t\t \tpublic void test654()", "signatureAfterChange": "\t\t \tpublic void test654()", "diff": ["-\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"\tfor (Map.Entry e : myMap.entrySet())\\n\" + ", "-\t\t\t\"\t                   ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method entrySet() belongs to the raw type Map. References to generic type Map<K,V> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\t\"\tSystem.out.println(\\\"Key = \\\" + e.getKey() + \\\" Value = \\\" + e.getValue());\\n\" + ", "-\t\t\t\"\t                              ^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method getKey() belongs to the raw type Map.Entry. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\t\"\tSystem.out.println(\\\"Key = \\\" + e.getKey() + \\\" Value = \\\" + e.getValue());\\n\" + ", "-\t\t\t\"\t                                                         ^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method getValue() belongs to the raw type Map.Entry. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"6. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"\tSet<Map.Entry> set = myMap.entrySet();\\n\" + ", "-\t\t\t\"\t                     ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method entrySet() belongs to the raw type Map. References to generic type Map<K,V> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"7. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"8. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tSystem.out.println(\\\"Key = \\\" + e.getKey() + \\\" Value = \\\" + e.getValue());\\n\" + ", "-\t\t\t\"\t                              ^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method getKey() belongs to the raw type Map.Entry. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"9. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tSystem.out.println(\\\"Key = \\\" + e.getKey() + \\\" Value = \\\" + e.getValue());\\n\" + ", "-\t\t\t\"\t                                                         ^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method getValue() belongs to the raw type Map.Entry. References to generic type Map<K,V>.Entry<K,V> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c204c6ed9a9bab6e577a26f9c2e587c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InnerEmulationTest.java", "commitBeforeChange": "baba91778491837a84be9560b81c83086d98c36e", "commitAfterChange": "57b083b793c3b8c2d5620895f00ff1c58e226e44", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 148, "signatureBeforeChange": " public void test151()", "signatureAfterChange": " public void test151()", "diff": ["-\t\t\t\t\"1. WARNING in X.java (at line 6)\\n\" +", "-\t\t\t\t\"\tprivate static class B2F extends X { }\\n\" +", "-\t\t\t\t\"\t                     ^^^\\n\" +", "-\t\t\t\t\"The type X.B2F is never used locally\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"2. WARNING in X.java (at line 7)\\n\" +", "-\t\t\t\t\"\tprivate static class F2B extends X { }\\n\" +", "-\t\t\t\t\"\t                     ^^^\\n\" +", "-\t\t\t\t\"The type X.F2B is never used locally\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"3. WARNING in X.java (at line 13)\\n\" +", "-\t\t\t\t\"\tprivate static class B2F extends Key {\\n\" +", "-\t\t\t\t\"\t                     ^^^\\n\" +", "-\t\t\t\t\"The type X.Key.B2F is never used locally\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"4. WARNING in X.java (at line 14)\\n\" +", "-\t\t\t\t\"\tprivate static B2F create() { return new B2F(); }\\n\" +", "-\t\t\t\t\"\t                   ^^^^^^^^\\n\" +", "-\t\t\t\t\"The method create() from the type X.Key.B2F is never used locally\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"5. ERROR in X.java (at line 15)\\n\" +", "+\t\t\t\t\"1. ERROR in X.java (at line 15)\\n\" +", "-\t\t\t\t\"6. WARNING in X.java (at line 18)\\n\" +", "-\t\t\t\t\"\tprivate static class F2B extends Key {\\n\" +", "-\t\t\t\t\"\t                     ^^^\\n\" +", "-\t\t\t\t\"The type X.Key.F2B is never used locally\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"7. WARNING in X.java (at line 19)\\n\" +", "-\t\t\t\t\"\tprivate static F2B create() { return new F2B(); }\\n\" +", "-\t\t\t\t\"\t                   ^^^^^^^^\\n\" +", "-\t\t\t\t\"The method create() from the type X.Key.F2B is never used locally\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"8. ERROR in X.java (at line 20)\\n\" +", "+\t\t\t\t\"2. ERROR in X.java (at line 20)\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63bdbe5d365f0bd5d3d8a578a030a4e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "f34cdaf3a4e2f93d91821748cd0c059d4789fdc7", "commitAfterChange": "74d8e06fef615cb5e8f2a34975f100e52eadbabe", "methodNumberBeforeChange": 280, "methodNumberAfterChange": 280, "signatureBeforeChange": " public void test133()", "signatureAfterChange": " public void test133()", "diff": ["-\tString expectedOutput = this.complianceLevel.equals(COMPLIANCE_1_5) ?", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in A.java (at line 8)\\n\" + ", "-\t\t\"\tObject foo() { return null; } // cannot override foo(), incompatible return type error\\n\" + ", "-\t\t\"\t^^^^^^\\n\" + ", "-\t\t\"The return type is incompatible with A<U>.foo()\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in A.java (at line 10)\\n\" + ", "-\t\t\"\tObject foo(Object one) { return null; } // unchecked conversion warning\\n\" + ", "-\t\t\"\t^^^^^^\\n\" + ", "-\t\t\"Type safety: The return type Object for foo(Object) from the type B<U> needs unchecked conversion to conform to U from the type A<U>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in A.java (at line 12)\\n\" + ", "-\t\t\"\tObject foo(Object one, U two) { return null; }\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Name clash: The method foo(Object, U) of type B<U> has the same erasure as foo(U, U) of type A<U> but does not override it\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. ERROR in A.java (at line 12)\\n\" + ", "-\t\t\"\tObject foo(Object one, U two) { return null; }\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The method foo(Object, U) of type B<U> must override a superclass method\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"5. ERROR in A.java (at line 16)\\n\" + ", "-\t\t\"\tObject foo(U one) { return null; } // cannot override foo(U), incompatible return type error\\n\" + ", "-\t\t\"\t^^^^^^\\n\" + ", "-\t\t\"The return type is incompatible with A<U>.foo(U)\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"6. ERROR in A.java (at line 18)\\n\" + ", "-\t\t\"\tObject foo(U one, U two) { return null; } // cannot override foo(U), incompatible return type error\\n\" + ", "-\t\t\"\t^^^^^^\\n\" + ", "-\t\t\"The return type is incompatible with A<U>.foo(U, U)\\n\" + ", "-\t\t\"----------\\n\" :", "-\t\t\"----------\\n\" + ", "-\t\t\"1. ERROR in A.java (at line 8)\\n\" + ", "-\t\t\"\tObject foo() { return null; } // cannot override foo(), incompatible return type error\\n\" + ", "-\t\t\"\t^^^^^^\\n\" + ", "-\t\t\"The return type is incompatible with A<U>.foo()\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in A.java (at line 10)\\n\" + ", "-\t\t\"\tObject foo(Object one) { return null; } // unchecked conversion warning\\n\" + ", "-\t\t\"\t^^^^^^\\n\" + ", "-\t\t\"Type safety: The return type Object for foo(Object) from the type B<U> needs unchecked conversion to conform to U from the type A<U>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in A.java (at line 12)\\n\" + ", "-\t\t\"\tObject foo(Object one, U two) { return null; }\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Name clash: The method foo(Object, U) of type B<U> has the same erasure as foo(U, U) of type A<U> but does not override it\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. ERROR in A.java (at line 12)\\n\" + ", "-\t\t\"\tObject foo(Object one, U two) { return null; }\\n\" + ", "-\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The method foo(Object, U) of type B<U> must override or implement a supertype method\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"5. ERROR in A.java (at line 16)\\n\" + ", "-\t\t\"\tObject foo(U one) { return null; } // cannot override foo(U), incompatible return type error\\n\" + ", "-\t\t\"\t^^^^^^\\n\" + ", "-\t\t\"The return type is incompatible with A<U>.foo(U)\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"6. ERROR in A.java (at line 18)\\n\" + ", "-\t\t\"\tObject foo(U one, U two) { return null; } // cannot override foo(U), incompatible return type error\\n\" + ", "-\t\t\"\t^^^^^^\\n\" + ", "-\t\t\"The return type is incompatible with A<U>.foo(U, U)\\n\" + ", "-\t\t\"----------\\n\";", "-\t\texpectedOutput", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in A.java (at line 8)\\n\" + ", "+\t\t\"\tObject foo() { return null; } // cannot override foo(), incompatible return type error\\n\" + ", "+\t\t\"\t^^^^^^\\n\" + ", "+\t\t\"The return type is incompatible with A<U>.foo()\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in A.java (at line 10)\\n\" + ", "+\t\t\"\tObject foo(Object one) { return null; } // unchecked conversion warning\\n\" + ", "+\t\t\"\t^^^^^^\\n\" + ", "+\t\t\"Type safety: The return type Object for foo(Object) from the type B<U> needs unchecked conversion to conform to U from the type A<U>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in A.java (at line 12)\\n\" + ", "+\t\t\"\tObject foo(Object one, U two) { return null; }\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Name clash: The method foo(Object, U) of type B<U> has the same erasure as foo(U, U) of type A<U> but does not override it\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in A.java (at line 12)\\n\" + ", "+\t\t\"\tObject foo(Object one, U two) { return null; }\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t(this.complianceLevel.equals(COMPLIANCE_1_5)", "+\t\t\t? \"The method foo(Object, U) of type B<U> must override a superclass method\\n\"", "+\t\t\t: \"The method foo(Object, U) of type B<U> must override or implement a supertype method\\n\"", "+\t\t) + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in A.java (at line 16)\\n\" + ", "+\t\t\"\tObject foo(U one) { return null; } // cannot override foo(U), incompatible return type error\\n\" + ", "+\t\t\"\t^^^^^^\\n\" + ", "+\t\t\"The return type is incompatible with A<U>.foo(U)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. ERROR in A.java (at line 18)\\n\" + ", "+\t\t\"\tObject foo(U one, U two) { return null; } // cannot override foo(U), incompatible return type error\\n\" + ", "+\t\t\"\t^^^^^^\\n\" + ", "+\t\t\"The return type is incompatible with A<U>.foo(U, U)\\n\" + ", "+\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d45516d669b98ecca038f7acbd2be8c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 974, "methodNumberAfterChange": 977, "signatureBeforeChange": " public void test0968()", "signatureAfterChange": " public void test0968()", "diff": ["-\t\t\"2. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "-\t\t\"\t             ^\\n\" + ", "-\t\t\"Name clash: The method addAll(Collection<? extends E>) of type ArrayList<T0> has the same erasure as addAll(Collection<? extends E>) of type Collection but does not override it\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "-\t\t\"\t             ^\\n\" + ", "-\t\t\"Name clash: The method retainAll(Collection<?>) of type AbstractCollection<T0> has the same erasure as retainAll(Collection<?>) of type Collection but does not override it\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "-\t\t\"\t             ^\\n\" + ", "-\t\t\"Name clash: The method toArray(T[]) of type ArrayList<T0> has the same erasure as toArray(T[]) of type Collection but does not override it\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"5. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "-\t\t\"\t             ^\\n\" + ", "-\t\t\"Name clash: The method add(E) of type ArrayList<T0> has the same erasure as add(E) of type Collection but does not override it\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"6. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "-\t\t\"\t             ^\\n\" + ", "-\t\t\"Name clash: The method containsAll(Collection<?>) of type AbstractCollection<T0> has the same erasure as containsAll(Collection<?>) of type Collection but does not override it\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"7. ERROR in X.java (at line 2)\\n\" + ", "-\t\t\"\tpublic class X<T0> extends ArrayList<T0> implements I<T0> {\\n\" + ", "-\t\t\"\t             ^\\n\" + ", "-\t\t\"Name clash: The method removeAll(Collection<?>) of type AbstractCollection<T0> has the same erasure as removeAll(Collection<?>) of type Collection but does not override it\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"8. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 2)\\n\" + ", "-\t\t\"9. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 4)\\n\" + "]}], "num": 64259}
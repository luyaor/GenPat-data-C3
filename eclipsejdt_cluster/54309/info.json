{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "978e391308051f1ac91d36f8aafbb279", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92a167b923da443f221fb3b44623308d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "195b7f74c2847e766faf55780f87d7733eaf87d5", "commitAfterChange": "59d412caa9422940d2fae586e985ddc7647c8585", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 111, "signatureBeforeChange": " \tprivate static char[] toUnresolvedTypeSignature(char[] signature)", "signatureAfterChange": " \tprivate static String toUnresolvedTypeSignature(char[] signature)", "diff": ["-\tprivate static char[] toUnresolvedTypeSignature(char[] signature) {", "+\tprivate static String toUnresolvedTypeSignature(char[] signature) {", "-\t\tif (length <= 1)", "-\t\t\treturn signature;", "+\t\tif (length <= 1) {", "+\t\t\treturn new String(signature);", "+\t\t}", "-\t\tint bufferLength = buffer.length();", "-\t\tchar[] result = new char[bufferLength];", "-\t\tbuffer.getChars(0, bufferLength, result, 0);", "-\t\treturn result;", "+\t\treturn String.valueOf(buffer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4f4148ebf890428f7434488bb8f79f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "629a3f65ab389a5cfc8b01a51ec0ef547bc3adfe", "commitAfterChange": "a93dad39ef275bbf6417bb0529204b9a1aeb09b1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif(actualReceiverType instanceof ReferenceBinding) {", "-\t\t\t\t// record any selector match, for clients who may still need hint about possible method match", "-\t\t\t\tint resolvedCount = 0;", "-\t\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\t\tif (argumentTypes[i] != null)", "-\t\t\t\t\t\tresolvedCount++;", "-\t\t\t\tTypeBinding[] knownArgs = new TypeBinding[resolvedCount];", "+\t\t\tif (actualReceiverType instanceof ReferenceBinding) {", "+\t\t\t\t//  record a best guess, for clients who need hint about possible method match", "+\t\t\t\tTypeBinding[] pseudoArgs = new TypeBinding[length];", "-\t\t\t\t\tif (argumentTypes[i] != null)", "-\t\t\t\t\t\tknownArgs[--resolvedCount] = argumentTypes[i];", "-\t\t\t\tthis.binding = scope.findMethod((ReferenceBinding)actualReceiverType, selector, knownArgs, this);", "-\t\t\t}\t\t\t", "+\t\t\t\t\tpseudoArgs[i] = argumentTypes[i] == null ? actualReceiverType : argumentTypes[i]; // replace args with errors with receiver", "+\t\t\t\tthis.binding = scope.findMethod((ReferenceBinding) actualReceiverType, selector, pseudoArgs, this);", "+\t\t\t}"]}], "num": 54309}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "548d2d3118664334e12e76cfad5a4e47", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e595acffbefe8827e0497004b8d4ca39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public TypeBinding reportError(BlockScope scope)", "signatureAfterChange": " public TypeBinding reportError(BlockScope scope)", "diff": ["-\t\tdelegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "-\t\tif (delegateThis == null){  // if not found then internal error, field should have been found", "+\t\tthis.delegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "+\t\tif (this.delegateThis == null){  // if not found then internal error, field should have been found", "-\tif ((binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) binding).problemId() == NotFound)", "-\t\t|| (binding instanceof ProblemBinding && ((ProblemBinding) binding).problemId() == NotFound)){", "+\tif ((this.binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) this.binding).problemId() == NotFound)", "+\t\t|| (this.binding instanceof ProblemBinding && ((ProblemBinding) this.binding).problemId() == NotFound)){", "-\t\tFieldBinding fieldBinding = scope.getField(delegateThis.type, this.tokens[0], this);", "+\t\tFieldBinding fieldBinding = scope.getField(this.delegateThis.type, this.tokens[0], this);", "-\t\t\t\tthis.codegenBinding = this.binding = localScope.getFieldForCodeSnippet(delegateThis.type, this.tokens[0], this);", "-\t\t\t\tif (binding.isValidBinding()) {", "+\t\t\t\tthis.codegenBinding = this.binding = localScope.getFieldForCodeSnippet(this.delegateThis.type, this.tokens[0], this);", "+\t\t\t\tif (this.binding.isValidBinding()) {", "-\t\tthis.codegenBinding = binding = fieldBinding;", "+\t\tthis.codegenBinding = this.binding = fieldBinding;", "-\tif (binding instanceof ProblemFieldBinding", "-\t\t&& ((ProblemFieldBinding) binding).problemId() == NotVisible) {", "+\tif (this.binding instanceof ProblemFieldBinding", "+\t\t&& ((ProblemFieldBinding) this.binding).problemId() == NotVisible) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0711e0ee83cf7a63ddf593af8b34ad9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public TypeBinding reportError(BlockScope scope)", "signatureAfterChange": " public TypeBinding reportError(BlockScope scope)", "diff": ["-\tconstant = Constant.NotAConstant;", "-\tif (binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) binding).problemId() == NotFound){", "+\tthis.constant = Constant.NotAConstant;", "+\tif (this.binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) this.binding).problemId() == NotFound){", "-\t\t\tdelegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "-\t\t\tif (delegateThis != null){  // if not found then internal error, field should have been found", "+\t\t\tthis.delegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "+\t\t\tif (this.delegateThis != null){  // if not found then internal error, field should have been found", "-\t\t\t\tthis.codegenBinding = binding = scope.getField(delegateThis.type, this.token, this);", "-\t\t\t\tif (!binding.isValidBinding()) {", "+\t\t\t\tthis.codegenBinding = this.binding = scope.getField(this.delegateThis.type, this.token, this);", "+\t\t\t\tif (!this.binding.isValidBinding()) {", "-\tif (binding instanceof ProblemBinding && ((ProblemBinding) binding).problemId() == NotFound){", "+\tif (this.binding instanceof ProblemBinding && ((ProblemBinding) this.binding).problemId() == NotFound){", "-\t\t\tdelegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "-\t\t\tif (delegateThis != null){  // if not found then internal error, field should have been found", "+\t\t\tthis.delegateThis = scope.getField(scope.enclosingSourceType(), DELEGATE_THIS, this);", "+\t\t\tif (this.delegateThis != null){  // if not found then internal error, field should have been found", "-\t\t\t\tFieldBinding fieldBinding = scope.getField(delegateThis.type, this.token, this);", "+\t\t\t\tFieldBinding fieldBinding = scope.getField(this.delegateThis.type, this.token, this);", "-\t\t\t\t\t\tthis.codegenBinding = binding = localScope.getFieldForCodeSnippet(delegateThis.type, this.token, this);", "+\t\t\t\t\t\tthis.codegenBinding = this.binding = localScope.getFieldForCodeSnippet(this.delegateThis.type, this.token, this);", "-\t\t\t\tthis.codegenBinding = binding = fieldBinding;", "+\t\t\t\tthis.codegenBinding = this.binding = fieldBinding;"]}], "num": 16040}
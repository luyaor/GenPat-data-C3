{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "781bc049695dfea5a4e8c48809a60714", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "999217c834431f2474668705c0efda86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "51ef1f3e636c416c08f983016f64f795f2b9cc74", "commitAfterChange": "9d3908e6916e224f861c3acffb456d39563ef22b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \t \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\tif (expression == null)", "+\t\t\tif (this.expression == null)", "-\t\t\tif ((expressionType = expression.resolveType(scope)) != null)", "+\t\t\tif ((expressionType = this.expression.resolveType(scope)) != null)", "-\t\tif (expression == null) {", "+\t\tif (this.expression == null) {", "-\t\texpression.setExpectedType(methodType); // needed in case of generic method invocation", "-\t\tif ((expressionType = expression.resolveType(scope)) == null) return;", "+\t\tthis.expression.setExpectedType(methodType); // needed in case of generic method invocation", "+\t\tif ((expressionType = this.expression.resolveType(scope)) == null) return;", "-\t\tif (expression.isConstantValueOfTypeAssignableToType(expressionType, methodType)", "+\t\tif (this.expression.isConstantValueOfTypeAssignableToType(expressionType, methodType)", "-\t\t\texpression.computeConversion(scope, methodType, expressionType);", "+\t\t\tthis.expression.computeConversion(scope, methodType, expressionType);", "+\t\t\tif (this.expression instanceof CastExpression ", "+\t\t\t\t\t&& (this.expression.bits & ASTNode.UnnecessaryCastMASK) == 0) {", "+\t\t\t\tCastExpression.checkNeedForAssignedCast(scope, methodType, (CastExpression) this.expression);", "+\t\t\t}\t\t\t", "-\t\t\texpression.computeConversion(scope, methodType, expressionType);", "-\t\t\treturn;", "+\t\t\tthis.expression.computeConversion(scope, methodType, expressionType);", "+\t\t\tif (this.expression instanceof CastExpression ", "+\t\t\t\t\t&& (this.expression.bits & ASTNode.UnnecessaryCastMASK) == 0) {", "+\t\t\t\tCastExpression.checkNeedForAssignedCast(scope, methodType, (CastExpression) this.expression);", "+\t\t\t}\t\t\treturn;", "-\t\tscope.problemReporter().typeMismatchError(expressionType, methodType, expression);", "+\t\tscope.problemReporter().typeMismatchError(expressionType, methodType, this.expression);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5fdc7a6775efcdfeedfbe579cf93d80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\tif (progressMonitor != null){", "-\t\t\tif (progressMonitor.isCanceled()) return;", "-\t\t\tprogressMonitor.beginTask(Util.bind(\"element.reconciling\"), 10); //$NON-NLS-1$", "+\t\tif (this.progressMonitor != null){", "+\t\t\tif (this.progressMonitor.isCanceled()) return;", "+\t\t\tthis.progressMonitor.beginTask(Util.bind(\"element.reconciling\"), 2); //$NON-NLS-1$", "-\t\tJavaElementDeltaBuilder deltaBuilder = null;", "-\t", "-\t\t\t// create the delta builder (this remembers the current content of the cu)", "-\t\t\tif (!wasConsistent){", "-\t\t\t\tdeltaBuilder = new JavaElementDeltaBuilder(workingCopy);", "+\t\t\tif (!wasConsistent) {", "+\t\t\t\t// create the delta builder (this remembers the current content of the cu)", "+\t\t\t\tJavaElementDeltaBuilder deltaBuilder = new JavaElementDeltaBuilder(workingCopy);", "-\t\t\t\tworkingCopy.makeConsistent(progressMonitor);", "+\t\t\t\tthis.ast = workingCopy.makeConsistent(this.createAST, this.progressMonitor);", "-\t\t", "-\t\t\t}", "-\t", "-\t\t\tif (progressMonitor != null) progressMonitor.worked(2);", "+", "+\t\t\t\tif (progressMonitor != null) progressMonitor.worked(2);", "-\t\t\t// force problem detection? - if structure was consistent", "-\t\t\tif (forceProblemDetection && wasConsistent){", "-\t\t\t\tif (progressMonitor != null && progressMonitor.isCanceled()) return;", "-\t\t", "-\t\t\t\tIProblemRequestor problemRequestor = workingCopy.getPerWorkingCopyInfo();", "-\t\t\t\tif (problemRequestor != null && problemRequestor.isActive()){", "-\t\t\t\t\tproblemRequestor.beginReporting();", "-\t\t\t\t\tCompilationUnitProblemFinder.process(workingCopy, this.workingCopyOwner, problemRequestor, progressMonitor);", "-\t\t\t\t\tproblemRequestor.endReporting();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "-\t\t\t// register the deltas", "-\t\t\tif (deltaBuilder != null){", "+\t\t\t\t// register the deltas", "+\t\t\t} else {", "+\t\t\t\t// force problem detection? - if structure was consistent", "+\t\t\t\tif (forceProblemDetection) {", "+\t\t\t\t\tIProblemRequestor problemRequestor = workingCopy.getPerWorkingCopyInfo();", "+\t\t\t\t\tif (problemRequestor != null && problemRequestor.isActive()){", "+\t\t\t\t\t\tproblemRequestor.beginReporting();", "+\t\t\t\t\t\tCompilationUnitDeclaration unit = CompilationUnitProblemFinder.process(workingCopy, this.workingCopyOwner, problemRequestor, this.progressMonitor);", "+\t\t\t\t\t\tproblemRequestor.endReporting();", "+\t\t\t\t\t\tif (progressMonitor != null) progressMonitor.worked(1);", "+\t\t\t\t\t\tif (this.createAST && unit != null) {", "+\t\t\t\t\t\t\tchar[] contents = workingCopy.getContents();", "+\t\t\t\t\t\t\tMap options = workingCopy.getJavaProject().getOptions(true);", "+\t\t\t\t\t\t\tthis.ast = AST.convertCompilationUnit(unit, contents, options, this.progressMonitor);", "+\t\t\t\t\t\t\tif (progressMonitor != null) progressMonitor.worked(1);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 71626}
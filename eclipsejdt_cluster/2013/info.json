{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "927fb60c5dc4216825085f0a243c4c8d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "009a4b03e0317731e049cd8b159d47fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "f3c9675cf51bb72e29fbc9d7f34e4971169f02fd", "commitAfterChange": "16b5be2e00222a3a00629ad2d72eba0fbb1b2400", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": " private void handleErrorOrWarningToken(String token, boolean isEnabling, int severity)", "signatureAfterChange": " private void handleErrorOrWarningToken(String token, boolean isEnabling, int severity)", "diff": ["-\t\t\t} ", "+\t\t\t} else if (token.startsWith(\"nullAnnot\")) { //$NON-NLS-1$", "+\t\t\t\tString annotationNames = Util.EMPTY_STRING;", "+\t\t\t\tint start = token.indexOf('(');", "+\t\t\t\tint end = token.indexOf(')');", "+\t\t\t\tString nonNullAnnotName = null, nullableAnnotName = null, nonNullByDefaultAnnotName = null;", "+\t\t\t\tif (isEnabling && start >= 0 && end >= 0 && start < end){", "+\t\t\t\t\tannotationNames = token.substring(start+1, end).trim();", "+\t\t\t\t\tint separator1 = annotationNames.indexOf('|');", "+\t\t\t\t\tif (separator1 == -1) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "+\t\t\t\t\tnullableAnnotName = annotationNames.substring(0, separator1).trim();", "+\t\t\t\t\tif (nullableAnnotName.length() == 0) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "+\t\t\t\t\tint separator2 = annotationNames.indexOf('|', separator1 + 1);", "+\t\t\t\t\tif (separator2 == -1) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "+\t\t\t\t\tnonNullAnnotName = annotationNames.substring(separator1 + 1, separator2).trim();", "+\t\t\t\t\tif (nonNullAnnotName.length() == 0) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "+\t\t\t\t\tnonNullByDefaultAnnotName = annotationNames.substring(separator2 + 1).trim();", "+\t\t\t\t\tif (nonNullByDefaultAnnotName.length() == 0) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NullableAnnotationName, nullableAnnotName);", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NonNullAnnotationName, nonNullAnnotName);", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NonNullByDefaultAnnotationName, nonNullByDefaultAnnotName);", "+\t\t\t\t}", "+\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_AnnotationBasedNullAnalysis,", "+\t\t\t\t\t\tisEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportNullSpecViolation, severity, isEnabling);", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportPotentialNullSpecViolation, severity, isEnabling);", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportNullSpecInsufficientInfo, severity, isEnabling);", "+\t\t\t\tsetSeverity(CompilerOptions.OPTION_ReportRedundantNullAnnotation, severity, isEnabling);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e4d32070f6fb4a582af8633af24a50a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "10d9ee7d6cd7cd29aebe50986af8fcc7cd9d4e32", "commitAfterChange": "ce651c0ac69efcf9b95474a4774590a4a9111231", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": " private void handleErrorOrWarningToken(String token, boolean isEnabling, int severity)", "signatureAfterChange": " private void handleErrorOrWarningToken(String token, boolean isEnabling, int severity)", "diff": ["+\t\t\t\t\tboolean isPrimarySet = !this.primaryNullAnnotationsSeen;", "-\t\t\t\t\tif (nullableAnnotName.length() == 0) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "+\t\t\t\t\tif (isPrimarySet && nullableAnnotName.length() == 0) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "-\t\t\t\t\tif (nonNullAnnotName.length() == 0) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "+\t\t\t\t\tif (isPrimarySet && nonNullAnnotName.length() == 0) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "-\t\t\t\t\tif (nonNullByDefaultAnnotName.length() == 0) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NullableAnnotationName, nullableAnnotName);", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NonNullAnnotationName, nonNullAnnotName);", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NonNullByDefaultAnnotationName, nonNullByDefaultAnnotName);", "+\t\t\t\t\tif (isPrimarySet && nonNullByDefaultAnnotName.length() == 0) throw new IllegalArgumentException(this.bind(\"configure.invalidNullAnnot\", token)); //$NON-NLS-1$", "+\t\t\t\t\tif (isPrimarySet) {", "+\t\t\t\t\t\tthis.primaryNullAnnotationsSeen = true;", "+\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NullableAnnotationName, nullableAnnotName);", "+\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NonNullAnnotationName, nonNullAnnotName);", "+\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NonNullByDefaultAnnotationName, nonNullByDefaultAnnotName);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (nullableAnnotName.length() > 0) {", "+\t\t\t\t\t\t\tString nullableList = this.options.get(CompilerOptions.OPTION_NullableAnnotationSecondaryNames);", "+\t\t\t\t\t\t\tnullableList = nullableList.isEmpty() ? nullableAnnotName : nullableList + ',' + nullableAnnotName;", "+\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NullableAnnotationSecondaryNames, nullableList);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (nonNullAnnotName.length() > 0) {", "+\t\t\t\t\t\t\tString nonnullList = this.options.get(CompilerOptions.OPTION_NonNullAnnotationSecondaryNames);", "+\t\t\t\t\t\t\tnonnullList = nonnullList.isEmpty() ? nonNullAnnotName : nonnullList + ',' + nonNullAnnotName;", "+\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NonNullAnnotationSecondaryNames, nonnullList);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (nonNullByDefaultAnnotName.length() > 0) {", "+\t\t\t\t\t\t\tString nnbdList = this.options.get(CompilerOptions.OPTION_NonNullByDefaultAnnotationSecondaryNames);", "+\t\t\t\t\t\t\tnnbdList = nnbdList.isEmpty() ? nonNullByDefaultAnnotName : nnbdList + ',' + nonNullByDefaultAnnotName;", "+\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_NonNullByDefaultAnnotationSecondaryNames, nnbdList);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}], "num": 2013}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "97010584a33c164cc0b9a591005c940a", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4212c7cab79b326967afc75a4b16facc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "3c53a94302f6ce332bab89158cbd1b29657da921", "commitAfterChange": "9e52c15d15d394b53153c5ea38c3a83d68121d6a", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r \r \tprivate void findMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tboolean isCompletingDeclaration,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope,\r \t\tboolean implicitCall)", "signatureAfterChange": "\r \tprivate void findMethods(\r \t\tchar[] selector,\r \t\tTypeBinding[] argTypes,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tObjectVector methodsFound,\r \t\tboolean onlyStaticMethods,\r \t\tboolean exactMatch,\r \t\tboolean isCompletingDeclaration,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope,\r \t\tboolean implicitCall)", "diff": ["-\r", "-\t\tboolean isInterface = receiverType.isInterface();\r", "-\t\t\r", "-\t\tif (isInterface || isCompletingDeclaration) {\r", "-\t\t\tif(!isCompletingDeclaration){\r", "-\t\t\t\tfindLocalMethods(\r", "+\t\tif (receiverType.isInterface()) {\r", "+\t\t\tif(isCompletingDeclaration) {\r", "+\t\t\t\tfindIntefacesMethods(\r", "-\t\t\t\t\tcurrentType.methods(),\r", "+\t\t\t\t\treceiverType,\r", "+\t\t\t\t\tcurrentType.superInterfaces(),\r", "+\t\t\t\t\tisCompletingDeclaration,\r", "+\t\t\t\t\tinvocationSite,\r", "+\t\t\t\t\tinvocationScope,\r", "+\t\t\t\t\timplicitCall);\r", "+\t\t\t} else {\r", "+\t\t\t\tfindIntefacesMethods(\r", "+\t\t\t\t\tselector,\r", "+\t\t\t\t\targTypes,\r", "+\t\t\t\t\tnew ReferenceBinding[]{currentType},\r", "+\t\t\t\t\tscope,\r", "+\t\t\t\t\tmethodsFound,\r", "+\t\t\t\t\tonlyStaticMethods,\r", "+\t\t\t\t\texactMatch,\r", "+\t\t\t\t\tisCompletingDeclaration,\r", "-\r", "-\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "-\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];\r", "-\t\t\t\tint lastPosition = 0;\r", "-\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\r", "-\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\r", "-\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "-\t\t\t\t\t\tcurrentType = interfaces[j];\r", "-\r", "-\t\t\t\t\t\tif ((currentType.tagBits & TagBits.InterfaceVisited) == 0) {\r", "-\t\t\t\t\t\t\t// if interface as not already been visited\r", "-\t\t\t\t\t\t\tcurrentType.tagBits |= TagBits.InterfaceVisited;\r", "-\r", "-\t\t\t\t\t\t\tif(isCompletingDeclaration){\r", "-\r", "-\t\t\t\t\t\t\t\tfindLocalMethodDeclarations(\r", "-\t\t\t\t\t\t\t\t\tselector,\r", "-\t\t\t\t\t\t\t\t\tcurrentType.methods(),\r", "-\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\tmethodsFound,\r", "-\t\t\t\t\t\t\t\t\tonlyStaticMethods,\r", "-\t\t\t\t\t\t\t\t\texactMatch,\r", "-\t\t\t\t\t\t\t\t\treceiverType);\r", "-\r", "-\t\t\t\t\t\t\t} else {\r", "-\r", "-\t\t\t\t\t\t\t\tfindLocalMethods(\r", "-\t\t\t\t\t\t\t\t\tselector,\r", "-\t\t\t\t\t\t\t\t\targTypes,\r", "-\t\t\t\t\t\t\t\t\tcurrentType.methods(),\r", "-\t\t\t\t\t\t\t\t\tscope,\r", "-\t\t\t\t\t\t\t\t\tmethodsFound,\r", "-\t\t\t\t\t\t\t\t\tonlyStaticMethods,\r", "-\t\t\t\t\t\t\t\t\texactMatch,\r", "-\t\t\t\t\t\t\t\t\treceiverType,\r", "-\t\t\t\t\t\t\t\t\tinvocationSite,\r", "-\t\t\t\t\t\t\t\t\tinvocationScope,\r", "-\t\t\t\t\t\t\t\t\timplicitCall);\r", "-\t\t\t\t\t\t\t}\r", "-\r", "-\t\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();\r", "-\t\t\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\r", "-\t\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\t\t\t\tinterfacesToVisit,\r", "-\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "-\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\tlastPosition);\r", "-\t\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\r", "-\t\t\t\t// bit reinitialization\r", "-\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\r", "-\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++){\r", "-\t\t\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t\r", "-\t\tif(!isInterface){\r", "+\t\t} else {\r", "+\t\t\t\tfindIntefacesMethods(\r", "+\t\t\t\t\tselector,\r", "+\t\t\t\t\targTypes,\r", "+\t\t\t\t\treceiverType,\r", "+\t\t\t\t\tcurrentType.superInterfaces(),\r", "+\t\t\t\t\tscope,\r", "+\t\t\t\t\tmethodsFound,\r", "+\t\t\t\t\tonlyStaticMethods,\r", "+\t\t\t\t\texactMatch,\r", "+\t\t\t\t\tisCompletingDeclaration,\r", "+\t\t\t\t\tinvocationSite,\r", "+\t\t\t\t\tinvocationScope,\r", "+\t\t\t\t\timplicitCall);\r", "+\t\t\t\t\r", "-\t\t\t} else {\r", "-\t\t\t\tcurrentType = receiverType;\r", "-\t\t\r", "+\t\tboolean hasPotentialDefaultAbstractMethods = true;\r", "+\t\t\t\r", "+\t\t\tif(hasPotentialDefaultAbstractMethods && currentType.isAbstract()){\r", "+\t\t\t\tfindIntefacesMethods(\r", "+\t\t\t\t\tselector,\r", "+\t\t\t\t\targTypes,\r", "+\t\t\t\t\treceiverType,\r", "+\t\t\t\t\tcurrentType.superInterfaces(),\r", "+\t\t\t\t\tscope,\r", "+\t\t\t\t\tmethodsFound,\r", "+\t\t\t\t\tonlyStaticMethods,\r", "+\t\t\t\t\texactMatch,\r", "+\t\t\t\t\tisCompletingDeclaration,\r", "+\t\t\t\t\tinvocationSite,\r", "+\t\t\t\t\tinvocationScope,\r", "+\t\t\t\t\timplicitCall);\r", "+\t\t\t} else {\r", "+\t\t\t\thasPotentialDefaultAbstractMethods = false;\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af80606bdf34e84a9bbaeed70290ad99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "78de2d4526f0918c678396086988a58ed90f5f38", "commitAfterChange": "d07b82d1d553a69664c0b667422af329ce329135", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "diff": ["-\t\tObjectVector found = null;\r", "+\t\tObjectVector found = new ObjectVector();\r", "+\t\tboolean relyOnDefaultAbstractMethods = environment().options.targetJDK < CompilerOptions.JDK1_2;\r", "-\t\t\t\tfound = new ObjectVector();\r", "-\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "-\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];\r", "-\t\t\t\tint lastPosition = -1;\r", "-\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\tinterfacesToVisit,\r", "-\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "-\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\tlastPosition);\r", "-\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\r", "-\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "-\t\t\t\t\t\tcurrentType = interfaces[j];\r", "-\t\t\t\t\t\tif ((currentType.tagBits & InterfaceVisited) == 0) {\r", "-\t\t\t\t\t\t\t// if interface as not already been visited\r", "-\t\t\t\t\t\t\tcurrentType.tagBits |= InterfaceVisited;\r", "-\r", "-\t\t\t\t\t\t\tcurrentMethods = currentType.getMethods(selector);\r", "-\t\t\t\t\t\t\tif ((currentLength = currentMethods.length) == 1\r", "-\t\t\t\t\t\t\t\t&& matchingMethod == null\r", "-\t\t\t\t\t\t\t\t&& found == null) {\r", "-\t\t\t\t\t\t\t\tmatchingMethod = currentMethods[0];\r", "-\t\t\t\t\t\t\t} else if (currentLength > 0) {\r", "-\t\t\t\t\t\t\t\tif (found == null) {\r", "-\t\t\t\t\t\t\t\t\tfound = new ObjectVector();\r", "-\t\t\t\t\t\t\t\t\tif (matchingMethod != null)\r", "-\t\t\t\t\t\t\t\t\t\tfound.add(matchingMethod);\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\tfor (int f = 0; f < currentLength; f++)\r", "-\t\t\t\t\t\t\t\t\tfound.add(currentMethods[f]);\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\titsInterfaces = currentType.superInterfaces();\r", "-\t\t\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\t\t\t\tinterfacesToVisit,\r", "-\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "-\t\t\t\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\t\t\t\tlastPosition);\r", "-\t\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\r", "-\t\t\t\t// bit reinitialization\r", "-\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "-\t\t\t\t\t\tinterfaces[j].tagBits &= ~InterfaceVisited;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "+\t\t\tmatchingMethod = findMethodInSuperInterfaces(currentType, selector, found, matchingMethod);\r", "-\t\t\t//currentType = \r", "-\t\t\t//\t(matchingMethod == null && found == null) ? getJavaLangObject() : null;\r", "-\t\t\tif (currentLength == 1 && matchingMethod == null && found == null) {\r", "+\t\t\tif (currentLength == 1 && matchingMethod == null && found.size == 0) {\r", "-\t\t\t\tif (found == null) {\r", "-\t\t\t\t\tfound = new ObjectVector();\r", "+\t\t\t\tif (found.size == 0) {\r", "+\t\t\tif (!relyOnDefaultAbstractMethods && currentType.isAbstract()) {\r", "+\t\t\t\tmatchingMethod = findMethodInSuperInterfaces(currentType, selector, found, matchingMethod);\r", "+\t\t\t}\r", "-\t\tif (found == null)\r", "+\t\tint foundSize = found.size;\r", "+\t\tif (foundSize == 0)\r", "-\t\tint foundSize = found.size;\r"]}], "num": 54647}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7b9452dc3130ae74246ded539dfc1691", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bebf52699b9bb96115f789de1a875e20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "27d7a3f1b3dd8726f49b3c45b8ae92fd365eeb4f", "commitAfterChange": "27ff50a9809c3e55581c713af1b876f5db7707ee", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic NameLookup( \t\t\tIPackageFragmentRoot[] packageFragmentRoots,  \t\t\tHashtableOfArrayToObject packageFragments,  \t\t\tICompilationUnit[] workingCopies,  \t\t\tMap rootToResolvedEntries)", "signatureAfterChange": "  \tpublic NameLookup( \t\t\tIPackageFragmentRoot[] packageFragmentRoots,  \t\t\tHashtableOfArrayToObject packageFragments,  \t\t\tICompilationUnit[] workingCopies,  \t\t\tMap rootToResolvedEntries)", "diff": ["-\t\t\tHashSet rootsSet = new HashSet();", "+\t\t\tHashtableOfObjectToInt rootPositions = new HashtableOfObjectToInt();", "-\t\t\t\trootsSet.add(packageFragmentRoots[i]);", "+\t\t\t\trootPositions.put(packageFragmentRoots[i], i);", "-\t\t\t\tif (!rootsSet.contains(pkg.getParent()))", "+\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot) pkg.getParent();", "+\t\t\t\tint rootPosition = rootPositions.get(root);", "+\t\t\t\tif (rootPosition == -1)", "-\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot) pkg.getParent();", "-\t\t\t\t\t\tif (!existing.equals(root))", "-\t\t\t\t\t\t\tthis.packageFragments.put(pkgName, new IPackageFragmentRoot[] {(PackageFragmentRoot) existing, root});", "+\t\t\t\t\t\tint exisitingPosition = rootPositions.get(existing);", "+\t\t\t\t\t\tif (rootPosition != exisitingPosition) { // if not equal", "+\t\t\t\t\t\t\tthis.packageFragments.put(", "+\t\t\t\t\t\t\t\tpkgName, ", "+\t\t\t\t\t\t\t\texisitingPosition < rootPosition ?", "+\t\t\t\t\t\t\t\t\tnew IPackageFragmentRoot[] {(PackageFragmentRoot) existing, root} :", "+\t\t\t\t\t\t\t\t\tnew IPackageFragmentRoot[] {root, (PackageFragmentRoot) existing});", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// insert root in the existing list", "-\t\t\t\t\t\tboolean containsRoot = false;", "+\t\t\t\t\t\tint insertionIndex = 0;", "-\t\t\t\t\t\t\tif (roots[j].equals(root)) {", "-\t\t\t\t\t\t\t\tcontainsRoot = true;", "+\t\t\t\t\t\t\tint existingPosition = rootPositions.get(roots[j]);", "+\t\t\t\t\t\t\tif (rootPosition > existingPosition) {", "+\t\t\t\t\t\t\t\t// root is after this index", "+\t\t\t\t\t\t\t\tinsertionIndex = j;", "+\t\t\t\t\t\t\t} else if (rootPosition == existingPosition) {", "+\t\t\t\t\t\t\t\t // root already in the existing list", "+\t\t\t\t\t\t\t\tinsertionIndex = -1;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t} else if (rootPosition < existingPosition) {", "+\t\t\t\t\t\t\t\t// root is before this index (thus it is at the insertion index)", "-\t\t\t\t\t\tif (containsRoot) {", "-\t\t\t\t\t\t\tSystem.arraycopy(roots, 0, roots = new IPackageFragmentRoot[rootLength+1], 0, rootLength);", "-\t\t\t\t\t\t\troots[rootLength] = root;", "-\t\t\t\t\t\t\tthis.packageFragments.put(pkgName, roots);", "+\t\t\t\t\t\tif (insertionIndex != -1) {", "+\t\t\t\t\t\t\tIPackageFragmentRoot[] newRoots = new IPackageFragmentRoot[rootLength+1];", "+\t\t\t\t\t\t\tSystem.arraycopy(roots, 0, newRoots, 0, insertionIndex);", "+\t\t\t\t\t\t\tnewRoots[insertionIndex] = root;", "+\t\t\t\t\t\t\tSystem.arraycopy(roots, insertionIndex, newRoots, insertionIndex+1, rootLength-insertionIndex);", "+\t\t\t\t\t\t\tthis.packageFragments.put(pkgName, newRoots);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6dd109ccf6e6df3eab3dde4a9a52386", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKey.java", "commitBeforeChange": "a5f15775fe7fcb24ae5a0930116a996c10a2359a", "commitAfterChange": "6fb311673d1501ca166502c77ddfedc4e1f01c4f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t  \t MethodBinding getMethodBinding(SourceTypeBinding typeBinding, CompilationUnitResolver resolver)", "signatureAfterChange": " \t MethodBinding getMethodBinding(MethodBinding[] methods, CompilationUnitResolver resolver)", "diff": ["-\t MethodBinding getMethodBinding(SourceTypeBinding typeBinding, CompilationUnitResolver resolver) {", "-\t \tMethodBinding[] methods = typeBinding.methods;", "+\t */", "+\t MethodBinding getMethodBinding(MethodBinding[] methods, CompilationUnitResolver resolver) {", "+\t \t", "+\t \t// collect parameter type bindings", "-\t \t} while (this.scanner.token != BindingKeyScanner.END);", "+\t \t} while (this.scanner.token != BindingKeyScanner.END && !this.scanner.isAtTypeParameterStart());", "+\t \t", "+\t \t", "+\t \t// collect type parameter bindings", "+\t \tArrayList typeParameterList = new ArrayList();", "+\t \tdo {", "+\t \t\treset();", "+\t \t\tBinding typeParameterBinding = getCompilerBinding(resolver);", "+\t \t\tif (typeParameterBinding == null) break;", "+\t \t\ttypeParameterList.add(typeParameterBinding);", "+\t \t} while (this.scanner.token != BindingKeyScanner.END);", "+\t \tint typeParameterLength = typeParameterList.size();", "+\t \tTypeBinding[] typeParameters = new TypeBinding[typeParameterLength];", "+\t \ttypeParameterList.toArray(typeParameters);", "+\t \t", "-\t\t\t\tif (methodParameters == null || methodParameters.length != parameterLength)", "+\t\t\t\tint methodParameterLength = methodParameters == null ? 0 : methodParameters.length;", "+\t\t\t\tif (methodParameterLength != parameterLength)", "+\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t}", "+\t\t\t\tTypeBinding[] methodTypeParameters = method.typeVariables;", "+\t\t\t\tint methodTypeParameterLength = methodTypeParameters == null ? 0 : methodTypeParameters.length;", "+\t\t\t\tif (methodTypeParameterLength != typeParameterLength)", "+\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\tfor (int j = 0; j < typeParameterLength; j++) {", "+\t\t\t\t\tif (methodTypeParameters[j] != typeParameters[j])"]}], "num": 53714}
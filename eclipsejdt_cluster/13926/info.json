{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f93d936bab3cc01623c7c953f37eed4f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b6cd4babb8ed07932bd28ce25173cf2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "7eeea60289161cbc82181c2049d38d6375b340c4", "commitAfterChange": "bac0b688c9760eba84723fa01c9ef8fce3bf0175", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " private boolean isCompatibleWith0(TypeBinding otherType, Scope captureScope)", "signatureAfterChange": " private boolean isCompatibleWith0(TypeBinding otherType, Scope captureScope)", "diff": ["+\t\t\tif (otherType instanceof InferenceVariable) {", "+\t\t\t\t// may interpret InferenceVariable as a joker, but only when within an outer lambda inference:", "+\t\t\t\tif (captureScope != null) {", "+\t\t\t\t\tMethodScope methodScope = captureScope.methodScope();", "+\t\t\t\t\tif (methodScope != null) {", "+\t\t\t\t\t\tReferenceContext referenceContext = methodScope.referenceContext;", "+\t\t\t\t\t\tif (referenceContext instanceof LambdaExpression", "+\t\t\t\t\t\t\t\t&& ((LambdaExpression)referenceContext).inferenceContext != null)", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3412daf70535f24b26cfd96b5a52b5cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "ab8ca59a5dd4b7954a1bf4f4ac6d29a32841c241", "commitAfterChange": "49af69eca21582a1a27bbb8fe6279e798e4dbf09", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " protected boolean isAffectedByOpenable(IJavaElementDelta delta, IJavaElement element, int eventType)", "signatureAfterChange": " protected boolean isAffectedByOpenable(IJavaElementDelta delta, IJavaElement element, int eventType)", "diff": ["+\t\tICompilationUnit focusCU = ", "+\t\t\tthis.focusType != null ? this.focusType.getCompilationUnit() : null;", "+\t\tif (focusCU != null && focusCU.getOwner() != cu.getOwner())", "+\t\t\treturn false;", "+\t\t//ADDED delta arising from getWorkingCopy() should be ignored", "+\t\tif (eventType != ElementChangedEvent.POST_RECONCILE && !cu.isPrimary() &&", "+\t\t\t\tdelta.getKind() == IJavaElementDelta.ADDED)", "+\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68204356dc736d75d8f8d144c4a65aa9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "b944419a775a8766a80aaf50d5c9201201448e38", "commitAfterChange": "66a68a77c79dc8161adf91226d8f791e46bc037a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tBinding getDirectBinding(Expression someExpression)", "signatureAfterChange": "  public static Binding getDirectBinding(Expression someExpression)", "diff": ["+", "+public static Binding getDirectBinding(Expression someExpression) {", "+\tif (someExpression instanceof SingleNameReference) {", "+\t\treturn ((SingleNameReference)someExpression).binding;", "+\t} else if (someExpression instanceof FieldReference) {", "+\t\tFieldReference fieldRef = (FieldReference)someExpression;", "+\t\tif (fieldRef.receiver.isThis() && !(fieldRef.receiver instanceof QualifiedThisReference)) {", "+\t\t\treturn fieldRef.binding;", "+\t\t}\t\t\t", "+\t} else if (someExpression instanceof Assignment) {", "+\t\tExpression lhs = ((Assignment)someExpression).lhs;", "+\t\tif ((lhs.bits & ASTNode.IsStrictlyAssigned) != 0) {", "+\t\t\t// i = i = ...; // eq to int i = ...;", "+\t\t\treturn getDirectBinding (((Assignment)someExpression).lhs);", "+\t\t} else if (someExpression instanceof PrefixExpression) {", "+\t\t\t// i = i++; // eq to ++i;", "+\t\t\treturn getDirectBinding (((Assignment)someExpression).lhs);", "-", "-\tBinding getDirectBinding(Expression someExpression) {", "-\t\tif (someExpression instanceof SingleNameReference) {", "-\t\t\treturn ((SingleNameReference)someExpression).binding;", "-\t\t} else if (someExpression instanceof FieldReference) {", "-\t\t\tFieldReference fieldRef = (FieldReference)someExpression;", "-\t\t\tif (fieldRef.receiver.isThis() && !(fieldRef.receiver instanceof QualifiedThisReference)) {", "-\t\t\t\treturn fieldRef.binding;", "-\t\t\t}\t\t\t", "-\t\t}", "+\treturn null;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e55f3370526995018ff259a92c60ff4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "3c95961338c3c4b8547e98f97ab6852359cf22ed", "commitAfterChange": "840f8bdee8174ac534597a7b93addb3118d5f3e9", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 186, "signatureBeforeChange": " public void invalidType(ASTNode location, TypeBinding type)", "signatureAfterChange": " public void invalidType(ASTNode location, TypeBinding type)", "diff": ["+\tif (type instanceof ReferenceBinding) {", "+\t\tif (isRecoveredName(((ReferenceBinding)type).compoundName)) return;", "+\t}", "+\telse if (type instanceof ArrayBinding) {", "+\t\tTypeBinding leafType = ((ArrayBinding)type).leafComponentType;", "+\t\tif (leafType instanceof ReferenceBinding) {", "+\t\t\tif (isRecoveredName(((ReferenceBinding)leafType).compoundName)) return;", "+\t\t}", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "914dba551ac57f69f88bdfc7133abd17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredElement.java", "commitBeforeChange": "f338c86815ffb4c165b8024ba4f28cade0b2b75f", "commitAfterChange": "a98d7d87df415161ba75f53acbdbe8d316ea160c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public RecoveredElement add(LambdaExpression expression, int bracketBalanceValue)", "signatureAfterChange": "\r public RecoveredElement add(Statement statement, int bracketBalanceValue)", "diff": ["- */\r", "-public RecoveredElement add(LambdaExpression expression, int bracketBalanceValue) {\r", "-\treturn this;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7dd7dd3be09d2cf72101ce99a8d446c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredElement.java", "commitBeforeChange": "4aad5ecac35ca209670b9451440a1afdf2df9be9", "commitAfterChange": "8b5de8ec91e61f4a356d85095c8fc08ae222fe3a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public RecoveredElement add(Statement statement, int bracketBalanceValue)", "signatureAfterChange": " public RecoveredElement add(Statement statement, int bracketBalanceValue)", "diff": ["+\tif (this instanceof RecoveredType) {", "+\t\tTypeDeclaration typeDeclaration = ((RecoveredType) this).typeDeclaration;", "+\t\tif (typeDeclaration != null && (typeDeclaration.bits & ASTNode.IsAnonymousType) != 0) { ", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=291040, new X(<SelectOnMessageSend:zoo()>) { ???", "+\t\t\tif (statement.sourceStart > typeDeclaration.sourceStart && statement.sourceEnd < typeDeclaration.sourceEnd) {", "+\t\t\t\treturn this;", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5a6be477ad8b0f23221ccfd3decae6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "4f833be4365ac5abb1ac0cf3973cd75cbb0d7487", "commitAfterChange": "227e3d5fec0001fbc06115e3f3e6f09f357952e2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public RecoveredElement buildInitialRecoveryState()", "signatureAfterChange": " public RecoveredElement buildInitialRecoveryState()", "diff": ["+\t\tif (this.assistNode != null && node instanceof Statement) {", "+\t\t\tStatement stmt = (Statement) node;", "+\t\t\tif (!(stmt instanceof Expression) || ((Expression) stmt).statementExpression()) {", "+\t\t\t\tif (this.assistNode.sourceStart >= stmt.sourceStart && this.assistNode.sourceEnd <= stmt.sourceEnd) {", "+\t\t\t\t\telement.add(stmt, 0);", "+\t\t\t\t\tthis.lastCheckPoint = stmt.sourceEnd + 1;", "+\t\t\t\t\tthis.isOrphanCompletionNode = false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcontinue;", "+\t\t}"]}], "num": 13926}
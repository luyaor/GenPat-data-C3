{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e7599b553b7df91bc0c2752d656af208", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cc7a853be5cdeb1b5ecd4ead2192f12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchSet.java", "commitBeforeChange": "15070dfb720141f260eff9f86b3742c51648d5f0", "commitAfterChange": "f850238096d0e6e37fbf42c72e3eea2d357ec53f", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " private void reportMatching(FieldDeclaration field, IJavaElement parent, TypeDeclaration type) throws CoreException", "signatureAfterChange": " private void reportMatching(FieldDeclaration field, IJavaElement parent, TypeDeclaration type, boolean typeInHierarchy) throws CoreException", "diff": ["-private void reportMatching(FieldDeclaration field, IJavaElement parent, TypeDeclaration type) throws CoreException {", "-\tAstNode[] nodes = this.matchingNodes(field.declarationSourceStart, field.declarationSourceEnd);", "-\tfor (int i = 0; i < nodes.length; i++) {", "-\t\tAstNode node = nodes[i];", "-\t\tInteger level = (Integer)this.matchingNodes.get(node);", "-\t\tif ((this.matchContainer & SearchPattern.FIELD) != 0) {", "-\t\t\tthis.locator.reportReference(", "-\t\t\t\tnode, ", "-\t\t\t\ttype, ", "-\t\t\t\tfield, ", "-\t\t\t\tparent, ", "-\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\tthis.matchingNodes.remove(node);", "+private void reportMatching(FieldDeclaration field, IJavaElement parent, TypeDeclaration type, boolean typeInHierarchy) throws CoreException {", "+\tif (typeInHierarchy) {", "+\t\tAstNode[] nodes = this.matchingNodes(field.declarationSourceStart, field.declarationSourceEnd);", "+\t\tfor (int i = 0; i < nodes.length; i++) {", "+\t\t\tAstNode node = nodes[i];", "+\t\t\tInteger level = (Integer)this.matchingNodes.get(node);", "+\t\t\tif ((this.matchContainer & SearchPattern.FIELD) != 0) {", "+\t\t\t\tthis.locator.reportReference(", "+\t\t\t\t\tnode, ", "+\t\t\t\t\ttype, ", "+\t\t\t\t\tfield, ", "+\t\t\t\t\tparent, ", "+\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "+\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "+\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "+\t\t\t\tthis.matchingNodes.remove(node);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19cff3d7b3a13ea099928f1e77759444", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchSet.java", "commitBeforeChange": "15070dfb720141f260eff9f86b3742c51648d5f0", "commitAfterChange": "f850238096d0e6e37fbf42c72e3eea2d357ec53f", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " private void reportMatching(AbstractMethodDeclaration method, IJavaElement parent) throws CoreException", "signatureAfterChange": " private void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, boolean typeInHierarchy) throws CoreException", "diff": ["-private void reportMatching(AbstractMethodDeclaration method, IJavaElement parent) throws CoreException {", "+private void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, boolean typeInHierarchy) throws CoreException {", "-\tAstNode[] nodes = this.matchingNodes(method.declarationSourceStart, method.declarationSourceEnd);", "-\tfor (int i = 0; i < nodes.length; i++) {", "-\t\tAstNode node = nodes[i];", "-\t\tInteger level = (Integer)this.matchingNodes.get(node);", "-\t\tif ((this.matchContainer & SearchPattern.METHOD) != 0) {", "-\t\t\tthis.locator.reportReference(", "-\t\t\t\tnode, ", "-\t\t\t\tmethod, ", "-\t\t\t\tparent, ", "-\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\tthis.matchingNodes.remove(node);", "+\tif (typeInHierarchy) {", "+\t\tAstNode[] nodes = this.matchingNodes(method.declarationSourceStart, method.declarationSourceEnd);", "+\t\tfor (int i = 0; i < nodes.length; i++) {", "+\t\t\tAstNode node = nodes[i];", "+\t\t\tInteger level = (Integer)this.matchingNodes.get(node);", "+\t\t\tif ((this.matchContainer & SearchPattern.METHOD) != 0) {", "+\t\t\t\tthis.locator.reportReference(", "+\t\t\t\t\tnode, ", "+\t\t\t\t\tmethod, ", "+\t\t\t\t\tparent, ", "+\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "+\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "+\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "+\t\t\t\tthis.matchingNodes.remove(node);", "+\t\t\t}", "-\t}", "-\tif (this.potentialMatchingNodes(method.declarationSourceStart, method.declarationSourceEnd).length == 0) {", "-\t\t// no need to resolve the statements in the method", "-\t\tmethod.statements = null;", "+\t\tif (this.potentialMatchingNodes(method.declarationSourceStart, method.declarationSourceEnd).length == 0) {", "+\t\t\t// no need to resolve the statements in the method", "+\t\t\tmethod.statements = null;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ff510faeaff567993a7c6838b87e1db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/AbstractASTTests.java", "commitBeforeChange": "0d655eb7c5734b22e978a732e9dc70711c6565d1", "commitAfterChange": "e8e6bc5be64017fb64d9068aa06ee69d945c7195", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprotected ASTNode buildAST(String contents, ICompilationUnit cu) throws JavaModelException", "signatureAfterChange": " \tprotected ASTNode buildAST(String contents, ICompilationUnit cu, boolean reportErrors) throws JavaModelException", "diff": ["-\tprotected ASTNode buildAST(String contents, ICompilationUnit cu) throws JavaModelException {", "+\tprotected ASTNode buildAST(String contents, ICompilationUnit cu, boolean reportErrors) throws JavaModelException {", "-\t\tStringBuffer buffer = new StringBuffer();", "-\t\tIProblem[] problems = unit.getProblems();", "-\t\tfor (int i = 0, length = problems.length; i < length; i++)", "-\t\t\tUtil.appendProblem(buffer, problems[i], contents.toCharArray(), i+1);", "-\t\tif (buffer.length() > 0)", "-\t\t\tSystem.err.println(buffer.toString());", "+\t\tif (reportErrors) {", "+\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\tIProblem[] problems = unit.getProblems();", "+\t\t\tfor (int i = 0, length = problems.length; i < length; i++)", "+\t\t\t\tUtil.appendProblem(buffer, problems[i], contents.toCharArray(), i+1);", "+\t\t\tif (buffer.length() > 0)", "+\t\t\t\tSystem.err.println(buffer.toString());", "+\t\t}"]}], "num": 57411}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "83dc36f4103bb5d4412e5f26376dd634", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0490ada45d49173eb8b15a6dff9f2dca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "c7db82ee2035e10eb1589d55c7e6bfbc58c468c6", "commitAfterChange": "1e8b2938724cc683c4116dd457826556b875a42f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "signatureAfterChange": " private void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "diff": ["-\t\t\tthis.problemReporter(currentMethod).incompatibleReturnType(currentMethod, inheritedMethod);", "-\t\t\tcontinue nextMethod;", "+\t\t\t// can be [] of Class#RAW vs. Class<T>", "+\t\t\tif (!areReturnTypeErasuresEqual(currentMethod, inheritedMethod)) {", "+\t\t\t\tthis.problemReporter(currentMethod).incompatibleReturnType(currentMethod, inheritedMethod);", "+\t\t\t\tcontinue nextMethod;", "+\t\t\t} else if (inheritedMethod.typeVariables.length > currentMethod.typeVariables.length) {", "+\t\t\t\t// TODO (kent) work to do on this case", "+\t\t\t\tthis.problemReporter(currentMethod).incompatibleReturnType(currentMethod, inheritedMethod);", "+//\t\t\t\tthis.problemReporter(currentMethod).nameClash(currentMethod, inheritedMethod);", "+\t\t\t\tcontinue nextMethod;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7135868e7c986e0e5f74734bb91e699a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "875cc8d42787c90738d8dc077a25eb401e9e38f9", "commitAfterChange": "adfd584faf146517cb3e86f9f2b585f2851a3630", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " void checkExceptions(MethodBinding newMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " void checkExceptions(MethodBinding newMethod, MethodBinding inheritedMethod)", "diff": ["-\t\twhile (--j > -1 && !this.isSameClassOrSubclassOf(newException, inheritedExceptions[j])){/*empty*/}", "+\t\twhile (--j > -1 && !isSameClassOrSubclassOf(newException, inheritedExceptions[j])){/*empty*/}", "-\t\t\tif (!(newException.isCompatibleWith(this.runtimeException()) || newException.isCompatibleWith(this.errorException())))", "-\t\t\t\tthis.problemReporter(newMethod).incompatibleExceptionInThrowsClause(this.type, newMethod, inheritedMethod, newException);", "+\t\t\tif (!(newException.isCompatibleWith(runtimeException()) || newException.isCompatibleWith(errorException())))", "+\t\t\t\tproblemReporter(newMethod).incompatibleExceptionInThrowsClause(this.type, newMethod, inheritedMethod, newException);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "813e9c2c6fe40bd6885c376a451be1be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "6eb00f6ee457a8f73a0eac0bfee00e20c1d881ff", "commitAfterChange": "449de2c1528005d5b9ace39ea1e9eeb2aed5b875", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "signatureAfterChange": " private void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "diff": ["-\t\t\t} else if (inheritedMethod.typeVariables.length > currentMethod.typeVariables.length) {", "+\t\t\t} else if (inheritedMethod.typeVariables.length != currentMethod.typeVariables.length) {", "-\t\t\t\tthis.problemReporter(currentMethod).incompatibleReturnType(currentMethod, inheritedMethod);", "-//\t\t\t\tthis.problemReporter(currentMethod).nameClash(currentMethod, inheritedMethod);", "-\t\t\t\tcontinue nextMethod;", "+\t\t\t\tif (currentMethod.typeVariables.length == 0 && inheritedMethod.declaringClass.isRawType()) {", "+\t\t\t\t\t// bug 69626", "+\t\t\t\t\t// no error since the inheritedMethod's type variables are ignored in raw types... why does a raw type binding not remove the type variables?", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.problemReporter(currentMethod).incompatibleReturnType(currentMethod, inheritedMethod);", "+//\t\t\t\t\tthis.problemReporter(currentMethod).nameClash(currentMethod, inheritedMethod);", "+\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a46ac1bf37e32bbebc250ece049f544e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "e8ece6af8318a12ec7ce6a4cfeae9e9119159fb6", "commitAfterChange": "11ebb7eac78033ed4b8b7f8bf2dae372f511166c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkInheritedMethods(MethodBinding[] methods, int length, boolean[] isOverridden)", "signatureAfterChange": " void checkInheritedMethods(MethodBinding[] methods, int length, boolean[] isOverridden)", "diff": ["-\t\t\t\t// re-checking compatibility is needed for https://bugs.eclipse.org/346029", "-\t\t\t\tif (concreteMethod != null && !(isOverridden[i] && areMethodsCompatible(concreteMethod, methods[i]))) {", "-\t\t\t\t\tproblemReporter().duplicateInheritedMethods(this.type, concreteMethod, methods[i]);", "-\t\t\t\t\tcontinueInvestigation = false;", "+\t\t\t\tif (concreteMethod != null) {", "+\t\t\t\t\t// re-checking compatibility is needed for https://bugs.eclipse.org/346029", "+\t\t\t\t\tif (isOverridden[i] && areMethodsCompatible(concreteMethod, methods[i])) {", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tproblemReporter().duplicateInheritedMethods(this.type, concreteMethod, methods[i]);", "+\t\t\t\t\t\tcontinueInvestigation = false;", "+\t\t\t\t\t}"]}], "num": 63817}
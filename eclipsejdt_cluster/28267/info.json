{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "678581da58c7ddcadfcabbafc90b5883", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bd70800fecb0bbde994671c1526ab8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " \tpublic boolean visit(EnumDeclaration enumDeclaration, ClassScope scope)", "signatureAfterChange": " \tpublic boolean visit(FalseLiteral falseLiteral, BlockScope scope)", "diff": ["-\t}", "-\tpublic boolean visit(EnumDeclaration enumDeclaration, ClassScope scope) {", "-        /*", "-         * Print comments to get proper line number", "-         */", "-        this.scribe.printComment();", "-        final int line = this.scribe.line; ", "-        ", "-        this.scribe.printModifiers(enumDeclaration.annotations, this);", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameenum, true); ", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true); ", "-", "-\t\t/* ", "-\t\t * Super Interfaces ", "-\t\t */", "-\t\tfinal TypeReference[] superInterfaces = enumDeclaration.superInterfaces;", "-\t\tif (superInterfaces != null) {", "-\t\t\tint superInterfaceLength = superInterfaces.length;", "-\t\t\tAlignment interfaceAlignment =this.scribe.createAlignment(", "-\t\t\t\t\t\"superInterfaces\",//$NON-NLS-1$", "-\t\t\t\t\tthis.preferences.alignment_for_superinterfaces_in_enum_declaration,", "-\t\t\t\t\tsuperInterfaceLength+1,  // implements token is first fragment", "-\t\t\t\t\tthis.scribe.scanner.currentPosition);", "-\t\t\tthis.scribe.enterAlignment(interfaceAlignment);", "-\t\t\tboolean ok = false;", "-\t\t\tdo {", "-\t\t\t\ttry {", "-\t\t\t\t\tthis.scribe.alignFragment(interfaceAlignment, 0);", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameimplements, true);", "-\t\t\t\t\tfor (int i = 0; i < superInterfaceLength; i++) {", "-\t\t\t\t\t\tif (i > 0) {", "-\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_superinterfaces);", "-\t\t\t\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\t\t\t\tthis.scribe.alignFragment(interfaceAlignment, i + 1);", "-\t\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_superinterfaces) {", "-\t\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tsuperInterfaces[i].traverse(this, scope);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.scribe.alignFragment(interfaceAlignment, i + 1);", "-\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t\tsuperInterfaces[i].traverse(this, scope);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tok = true;", "-\t\t\t\t} catch (AlignmentException e) {", "-\t\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t} while (!ok);", "-\t\t\tthis.scribe.exitAlignment(interfaceAlignment, true);", "-\t\t}", "-", "-\t\t/*", "-\t\t * Type body", "-\t\t */", "-\t\tString enum_declaration_brace = this.preferences.brace_position_for_enum_declaration;", "-", "-        formatLeftCurlyBrace(line, enum_declaration_brace);", "-\t\tformatTypeOpeningBrace(enum_declaration_brace, this.preferences.insert_space_before_opening_brace_in_enum_declaration, enumDeclaration);", "-\t\t", "-\t\tif (this.preferences.indent_body_declarations_compare_to_type_header) {", "-\t\t\tthis.scribe.indent();", "-\t\t}", "-", "-\t\tEnumConstant[] enumConstants = enumDeclaration.enumConstants;", "-\t\tif (enumConstants != null) {", "-\t\t\tint length = enumConstants.length;", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tif (i < length - 1) {", "-\t\t\t\t\tenumConstants[i].traverse(this, enumDeclaration.scope);\t\t\t\t\t", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_enum_declarations);", "-\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_enum_declarations) {", "-\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\t} else if (isNextToken(TerminalTokens.TokenNameCOMMA)) {", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_enum_declarations);", "-\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_enum_declarations) {", "-\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "-\t\t\tthis.scribe.printTrailingComment();", "-\t\t} else {", "-\t\t\tthis.scribe.printNewLine();", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "-\t\t\tthis.scribe.printTrailingComment();", "-\t\t}", "-\t\t", "-\t\tformatTypeMembers(enumDeclaration);", "-", "-\t\tthis.scribe.printComment();", "-\t\t", "-\t\tif (this.preferences.indent_body_declarations_compare_to_enum_declaration_header) {", "-\t\t\tthis.scribe.unIndent();", "-\t\t}", "-\t\t", "-\t\tif (this.preferences.insert_new_line_in_empty_enum_declaration) {", "-\t\t\tthis.scribe.printNewLine();", "-\t\t}", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);", "-\t\tthis.scribe.printTrailingComment();", "-\t\tif (enum_declaration_brace.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "-\t\t\tthis.scribe.unIndent();", "-\t\t}", "-\t\tif (hasComments()) {", "-\t\t\tthis.scribe.printNewLine();", "-\t\t}", "-\t\treturn false;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "991138ccca3ec7cb354ccbd83886b472", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " \tpublic boolean visit(EnumDeclaration enumDeclaration, \t\t\tCompilationUnitScope scope)", "signatureAfterChange": " \tpublic boolean visit(FieldReference fieldReference, BlockScope scope)", "diff": ["-\t}", "-\tpublic boolean visit(EnumDeclaration enumDeclaration,", "-\t\t\tCompilationUnitScope scope) {", "-        /*", "-         * Print comments to get proper line number", "-         */", "-        this.scribe.printComment();", "-        final int line = this.scribe.line; ", "-        ", "-        this.scribe.printModifiers(enumDeclaration.annotations, this);", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameenum, true); ", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true); ", "-", "-\t\t/* ", "-\t\t * Super Interfaces ", "-\t\t */", "-\t\tfinal TypeReference[] superInterfaces = enumDeclaration.superInterfaces;", "-\t\tif (superInterfaces != null) {", "-\t\t\tint superInterfaceLength = superInterfaces.length;", "-\t\t\tAlignment interfaceAlignment =this.scribe.createAlignment(", "-\t\t\t\t\t\"superInterfaces\",//$NON-NLS-1$", "-\t\t\t\t\tthis.preferences.alignment_for_superinterfaces_in_enum_declaration,", "-\t\t\t\t\tsuperInterfaceLength+1,  // implements token is first fragment", "-\t\t\t\t\tthis.scribe.scanner.currentPosition);", "-\t\t\tthis.scribe.enterAlignment(interfaceAlignment);", "-\t\t\tboolean ok = false;", "-\t\t\tdo {", "-\t\t\t\ttry {", "-\t\t\t\t\tthis.scribe.alignFragment(interfaceAlignment, 0);", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameimplements, true);", "-\t\t\t\t\tfor (int i = 0; i < superInterfaceLength; i++) {", "-\t\t\t\t\t\tif (i > 0) {", "-\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_superinterfaces);", "-\t\t\t\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\t\t\t\tthis.scribe.alignFragment(interfaceAlignment, i + 1);", "-\t\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_superinterfaces) {", "-\t\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tsuperInterfaces[i].traverse(this, scope);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tthis.scribe.alignFragment(interfaceAlignment, i + 1);", "-\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t\tsuperInterfaces[i].traverse(this, scope);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tok = true;", "-\t\t\t\t} catch (AlignmentException e) {", "-\t\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t\t}", "-\t\t\t} while (!ok);", "-\t\t\tthis.scribe.exitAlignment(interfaceAlignment, true);", "-\t\t}", "-", "-\t\t/*", "-\t\t * Type body", "-\t\t */", "-\t\tString enum_declaration_brace = this.preferences.brace_position_for_enum_declaration;", "-", "-        formatLeftCurlyBrace(line, enum_declaration_brace);", "-\t\tformatTypeOpeningBrace(enum_declaration_brace, this.preferences.insert_space_before_opening_brace_in_enum_declaration, enumDeclaration);", "-\t\t", "-\t\tif (this.preferences.indent_body_declarations_compare_to_type_header) {", "-\t\t\tthis.scribe.indent();", "-\t\t}", "-", "-\t\tEnumConstant[] enumConstants = enumDeclaration.enumConstants;", "-\t\tif (enumConstants != null) {", "-\t\t\tint length = enumConstants.length;", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tenumConstants[i].traverse(this, enumDeclaration.scope);\t\t\t\t\t", "-\t\t\t\tif (i < length - 1) {", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_enum_declarations);", "-\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_enum_declarations) {", "-\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\t} else if (isNextToken(TerminalTokens.TokenNameCOMMA)) {", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_enum_declarations);", "-\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_enum_declarations) {", "-\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (this.isNextToken(TerminalTokens.TokenNameSEMICOLON)) {", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "-\t\t} else {", "-\t\t\tthis.scribe.printNewLine();", "-\t\t\tif (this.isNextToken(TerminalTokens.TokenNameSEMICOLON)) {", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "-\t\t\t\tthis.scribe.printTrailingComment();", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tformatTypeMembers(enumDeclaration);", "-", "-\t\tthis.scribe.printComment();", "-\t\t", "-\t\tif (this.preferences.indent_body_declarations_compare_to_enum_declaration_header) {", "-\t\t\tthis.scribe.unIndent();", "-\t\t}", "-\t\t", "-\t\tif (this.preferences.insert_new_line_in_empty_enum_declaration) {", "-\t\t\tthis.scribe.printNewLine();", "-\t\t}", "-\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);", "-\t\tthis.scribe.printTrailingComment();", "-\t\tif (enum_declaration_brace.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "-\t\t\tthis.scribe.unIndent();", "-\t\t}", "-\t\tif (hasComments()) {", "-\t\t\tthis.scribe.printNewLine();"]}], "num": 28267}
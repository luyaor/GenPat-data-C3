{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d8ba660a8ac4606299e464f8ae0cde7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "078542e07bd377a113f628c3a5c0205b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "653b549b2ec915800fe34bbb2ab9809b71ca66a5", "commitAfterChange": "2caa59d033a9b6c8ec71aab586472ad7fe749893", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "  protected void resolveAnnotations(Scope scope)", "signatureAfterChange": "  protected void resolveAnnotations(Scope scope)", "diff": ["+\t\t\tlong[] tagBitsPerDimension = null;", "+\t\t\tint dimensions = this.dimensions();", "+\t\t\tboolean shouldAnalyzeArrayNullAnnotations = scope.compilerOptions().isAnnotationBasedNullAnalysisEnabled && this instanceof ArrayTypeReference;", "-\t\t\t\t\tif (this.annotations[i] != null) {", "-\t\t\t\t\t\tresolveAnnotations(resolutionScope, this.annotations[i], new Annotation.TypeUseBinding(isWildcard() ? Binding.TYPE_PARAMETER : Binding.TYPE_USE));", "+\t\t\t\t\tAnnotation[] currentAnnotations = this.annotations[i];", "+\t\t\t\t\tif (currentAnnotations != null) {", "+\t\t\t\t\t\tresolveAnnotations(resolutionScope, currentAnnotations, new Annotation.TypeUseBinding(isWildcard() ? Binding.TYPE_PARAMETER : Binding.TYPE_USE));", "+\t\t\t\t\t\tif (shouldAnalyzeArrayNullAnnotations) {", "+\t\t\t\t\t\t\tint len = currentAnnotations.length;", "+\t\t\t\t\t\t\tfor (int j=0; j<len; j++) {", "+\t\t\t\t\t\t\t\tBinding recipient = currentAnnotations[j].recipient;", "+\t\t\t\t\t\t\t\tif (recipient instanceof Annotation.TypeUseBinding) {", "+\t\t\t\t\t\t\t\t\tif (tagBitsPerDimension == null)", "+\t\t\t\t\t\t\t\t\t\ttagBitsPerDimension = new long[dimensions+1]; // each dimension plus leaf component type at last position", "+\t\t\t\t\t\t\t\t\t// @NonNull Foo [][][] means the leaf component type is @NonNull:", "+\t\t\t\t\t\t\t\t\ttagBitsPerDimension[dimensions] = ((Annotation.TypeUseBinding)recipient).tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (shouldAnalyzeArrayNullAnnotations) {", "+\t\t\t\t\t\t\tint len = dimensionAnnotations.length;", "+\t\t\t\t\t\t\tfor (int j=0; j<len; j++) {", "+\t\t\t\t\t\t\t\tBinding recipient = dimensionAnnotations[j].recipient;", "+\t\t\t\t\t\t\t\tif (recipient instanceof Annotation.TypeUseBinding) {", "+\t\t\t\t\t\t\t\t\tif (tagBitsPerDimension == null)", "+\t\t\t\t\t\t\t\t\t\ttagBitsPerDimension = new long[dimensions+1];", "+\t\t\t\t\t\t\t\t\ttagBitsPerDimension[i] = ((Annotation.TypeUseBinding)recipient).tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\tif (tagBitsPerDimension != null && this.resolvedType.isValidBinding()) {", "+\t\t\t\t// TODO(stephan): wouldn't it be more efficient to store the array bindings inside the type binding rather than the environment?", "+\t\t\t\t// cf. LocalTypeBinding.createArrayType()", "+\t\t\t\tthis.resolvedType = scope.environment().createArrayType(this.resolvedType.leafComponentType(), dimensions, tagBitsPerDimension);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61281c26c6ca31713975d81959fae4c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "  protected void resolveAnnotations(Scope scope)", "signatureAfterChange": "  protected void resolveAnnotations(Scope scope)", "diff": ["-\t\t\tlong tagBits = 0;", "-\t\t\tlong[] tagBitsPerDimension = null;", "-\t\t\tboolean evalNullAnnotations = scope.compilerOptions().isAnnotationBasedNullAnalysisEnabled;", "-\t\t\tboolean isArrayReference = dimensions > 0;", "-\t\t\t\tint annotationsLevels = this.annotations.length;", "-\t\t\t\tfor (int i = 0; i < annotationsLevels; i++) {", "-\t\t\t\t\tAnnotation[] currentAnnotations = this.annotations[i];", "-\t\t\t\t\tif (currentAnnotations != null) {", "-\t\t\t\t\t\tresolveAnnotations(resolutionScope, currentAnnotations, new Annotation.TypeUseBinding(isWildcard() ? Binding.TYPE_PARAMETER : Binding.TYPE_USE));", "-\t\t\t\t\t\tif (evalNullAnnotations) {", "-\t\t\t\t\t\t\tint len = currentAnnotations.length;", "-\t\t\t\t\t\t\tfor (int j=0; j<len; j++) {", "-\t\t\t\t\t\t\t\tBinding recipient = currentAnnotations[j].recipient;", "-\t\t\t\t\t\t\t\tif (recipient instanceof Annotation.TypeUseBinding) {", "-\t\t\t\t\t\t\t\t\tlong nullTagBits = ((Annotation.TypeUseBinding)recipient).tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\t\t\t\t\tif (nullTagBits != 0) {", "-\t\t\t\t\t\t\t\t\t\tif (isArrayReference) {", "-\t\t\t\t\t\t\t\t\t\t\tif (tagBitsPerDimension == null)", "-\t\t\t\t\t\t\t\t\t\t\t\ttagBitsPerDimension = new long[dimensions+1]; // each dimension plus leaf component type at last position", "-\t\t\t\t\t\t\t\t\t\t\t// @NonNull Foo [][][] means the leaf component type is @NonNull:", "-\t\t\t\t\t\t\t\t\t\t\ttagBitsPerDimension[dimensions] = nullTagBits;", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\ttagBits |= nullTagBits;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tTypeBinding leafComponentType = this.resolvedType.leafComponentType();", "+\t\t\t\tleafComponentType = resolveAnnotations(resolutionScope, this.annotations, leafComponentType);", "+\t\t\t\tthis.resolvedType = dimensions > 0 ? scope.environment().createArrayType(leafComponentType, dimensions) : leafComponentType;", "-", "-\t\t\t\tfor (int i = 0, length = annotationsOnDimensions.length; i < length; i++) {", "-\t\t\t\t\tAnnotation [] dimensionAnnotations = annotationsOnDimensions[i];", "-\t\t\t\t\tif (dimensionAnnotations  != null) {", "-\t\t\t\t\t\tresolveAnnotations(resolutionScope, dimensionAnnotations, new Annotation.TypeUseBinding(Binding.TYPE_USE));", "-\t\t\t\t\t\tif (evalNullAnnotations && isArrayReference) {", "-\t\t\t\t\t\t\tint len = dimensionAnnotations.length;", "-\t\t\t\t\t\t\tfor (int j=0; j<len; j++) {", "-\t\t\t\t\t\t\t\tBinding recipient = dimensionAnnotations[j].recipient;", "-\t\t\t\t\t\t\t\tif (recipient instanceof Annotation.TypeUseBinding) {", "-\t\t\t\t\t\t\t\t\tlong nullTagBits = ((Annotation.TypeUseBinding)recipient).tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\t\t\t\t\tif (nullTagBits != 0) {", "-\t\t\t\t\t\t\t\t\t\tif (tagBitsPerDimension == null)", "-\t\t\t\t\t\t\t\t\t\t\ttagBitsPerDimension = new long[dimensions+1];", "-\t\t\t\t\t\t\t\t\t\ttagBitsPerDimension[i] = nullTagBits;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (this.resolvedType != null && this.resolvedType.isValidBinding()) {", "-\t\t\t\tif (isArrayReference) {", "-\t\t\t\t\tif (tagBitsPerDimension != null) {", "-\t\t\t\t\t\t// TODO(stephan): wouldn't it be more efficient to store the array bindings inside the type binding rather than the environment?", "-\t\t\t\t\t\t// cf. LocalTypeBinding.createArrayType()", "-\t\t\t\t\t\tthis.resolvedType = scope.environment().createArrayType(this.resolvedType.leafComponentType(), dimensions, tagBitsPerDimension);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tif (tagBits != 0) {", "-\t\t\t\t\t\tif (!this.resolvedType.isBaseType()) {", "-\t\t\t\t\t\t\tthis.resolvedType = scope.environment().createAnnotatedType(this.resolvedType, tagBits);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// TODO(stephan) report null annotation on non-reference type", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tthis.resolvedType = resolveAnnotations(resolutionScope, annotationsOnDimensions, this.resolvedType);\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a0539def1524d645429fd877f4d3c24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "7ba9ff29fe6b05ec0a2f58eaa1f5d3e68bb11101", "commitAfterChange": "427a01e331e57852efc472cca3a8360bd121fda9", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "  protected void resolveAnnotations(Scope scope)", "signatureAfterChange": "  protected void resolveAnnotations(Scope scope)", "diff": ["+\t\t\tlong tagBits = 0;", "-\t\t\tboolean shouldAnalyzeArrayNullAnnotations = scope.compilerOptions().isAnnotationBasedNullAnalysisEnabled && this instanceof ArrayTypeReference;", "+\t\t\tboolean evalNullAnnotations = scope.compilerOptions().isAnnotationBasedNullAnalysisEnabled;", "+\t\t\tboolean isArrayReference = this instanceof ArrayTypeReference && dimensions > 0;", "-\t\t\t\t\t\tif (shouldAnalyzeArrayNullAnnotations) {", "+\t\t\t\t\t\tif (evalNullAnnotations) {", "-\t\t\t\t\t\t\t\t\tif (tagBitsPerDimension == null)", "-\t\t\t\t\t\t\t\t\t\ttagBitsPerDimension = new long[dimensions+1]; // each dimension plus leaf component type at last position", "-\t\t\t\t\t\t\t\t\t// @NonNull Foo [][][] means the leaf component type is @NonNull:", "-\t\t\t\t\t\t\t\t\ttagBitsPerDimension[dimensions] = ((Annotation.TypeUseBinding)recipient).tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\t\t\t\t\tif (isArrayReference) {", "+\t\t\t\t\t\t\t\t\t\tif (tagBitsPerDimension == null)", "+\t\t\t\t\t\t\t\t\t\t\ttagBitsPerDimension = new long[dimensions+1]; // each dimension plus leaf component type at last position", "+\t\t\t\t\t\t\t\t\t\t// @NonNull Foo [][][] means the leaf component type is @NonNull:", "+\t\t\t\t\t\t\t\t\t\ttagBitsPerDimension[dimensions] = ((Annotation.TypeUseBinding)recipient).tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\ttagBits |= ((Annotation.TypeUseBinding)recipient).tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (shouldAnalyzeArrayNullAnnotations) {", "+\t\t\t\t\t\tif (evalNullAnnotations && isArrayReference) {", "-\t\t\tif (tagBitsPerDimension != null && this.resolvedType.isValidBinding()) {", "-\t\t\t\t// TODO(stephan): wouldn't it be more efficient to store the array bindings inside the type binding rather than the environment?", "-\t\t\t\t// cf. LocalTypeBinding.createArrayType()", "-\t\t\t\tthis.resolvedType = scope.environment().createArrayType(this.resolvedType.leafComponentType(), dimensions, tagBitsPerDimension);", "+\t\t\tif (this.resolvedType != null && this.resolvedType.isValidBinding()) {", "+\t\t\t\tif (isArrayReference) {", "+\t\t\t\t\tif (tagBitsPerDimension != null) {", "+\t\t\t\t\t\t// TODO(stephan): wouldn't it be more efficient to store the array bindings inside the type binding rather than the environment?", "+\t\t\t\t\t\t// cf. LocalTypeBinding.createArrayType()", "+\t\t\t\t\t\tthis.resolvedType = scope.environment().createArrayType(this.resolvedType.leafComponentType(), dimensions, tagBitsPerDimension);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (tagBits != 0) {", "+\t\t\t\t\t\tif (this.resolvedType instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\tthis.resolvedType = scope.environment().createAnnotatedType((ReferenceBinding) this.resolvedType, tagBits);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// TODO(stephan) report null annotation on non-reference type", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 38402}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37706ac52512df589dc5494b7214b4e9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fa7aa1b6b59986fe5df36d2b1ecb1c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "5d2ad0b940570868aeb3a33317182334e9423c29", "commitAfterChange": "0f27abdc440c19d22cca8de897116ef5e59c08c4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\tReferenceBinding qualifiedType = null;", "-\t\tfor (int i = packageBinding == null ? 0 : packageBinding.compoundName.length, max = this.tokens.length; i < max; i++) {", "+\t    for (int i = packageBinding == null ? 0 : packageBinding.compoundName.length, max = this.tokens.length; i < max; i++) {", "+\t    \tReferenceBinding enclosingType = (ReferenceBinding) this.resolvedType;", "+\t\t\tif (currentType.isStatic() && enclosingType != null && (enclosingType.isParameterizedType() || enclosingType.isGenericType())) {", "+\t\t\t\tscope.problemReporter().staticMemberOfParameterizedType(this, scope.createParameterizedType(currentType, null, enclosingType));", "+\t\t\t\treturn null;", "+\t\t\t}\t\t\t", "-\t\t\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType(currentType, argTypes, qualifiedType);", "+\t\t\t\t// check parameterizing non-static member type of raw type", "+\t\t\t\tif (!currentType.isStatic() && enclosingType != null && enclosingType.isRawType()) {", "+\t\t\t\t\tscope.problemReporter().rawMemberTypeCannotBeParameterized(", "+\t\t\t\t\t\t\tthis, scope.environment().createRawType(currentType, enclosingType), argTypes);", "+\t\t\t\t\treturn null;\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType(currentType, argTypes, enclosingType);", "-\t\t\t\tqualifiedType = parameterizedType;", "+\t\t\t\tthis.resolvedType = parameterizedType;", "-", "-\t\t\t\tif (currentType.isGenericType()) { // check raw type", "-   \t\t\t    \tqualifiedType = scope.environment().createRawType(currentType, qualifiedType); // raw type", "-   \t\t\t    } else if (qualifiedType != null && (qualifiedType.isParameterizedType() || qualifiedType.isRawType())) {", "-   \t\t\t    \tqualifiedType = scope.createParameterizedType(currentType, null, qualifiedType);", "-   \t\t\t    }", "+\t\t\t\t\t", "+   \t\t\t    if (enclosingType != null && enclosingType.isParameterizedType()) {", "+\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.createParameterizedType(currentType, null, enclosingType));", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+   \t\t\t    this.resolvedType = scope.environment().createRawType(currentType, enclosingType); // raw type", "-\t\tthis.resolvedType = qualifiedType;", "-\t\t\tthis.resolvedType = scope.createArrayType(qualifiedType, dimensions);", "+\t\t\tthis.resolvedType = scope.createArrayType(this.resolvedType, dimensions);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8faa03afd5890af88125a7f6731aa7af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "1ce53ca49608d62967854b92a874a5596d91464e", "commitAfterChange": "bb72ae085a9c803f32e5ba9cfc8183ec6217c40b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["+\t\tReferenceBinding qualifiedType = null;", "-\t    \tReferenceBinding enclosingType = (ReferenceBinding) this.resolvedType;", "-\t\t\tif (typeIsConsistent && currentType.isStatic() && enclosingType != null && (enclosingType.isParameterizedType() || enclosingType.isGenericType())) {", "-\t\t\t\tscope.problemReporter().staticMemberOfParameterizedType(this, scope.createParameterizedType(currentType, null, enclosingType));", "+\t\t\tif (typeIsConsistent && currentType.isStatic() && qualifiedType != null && (qualifiedType.isParameterizedType() || qualifiedType.isGenericType())) {", "+\t\t\t\tscope.problemReporter().staticMemberOfParameterizedType(this, scope.createParameterizedType(currentType, null, qualifiedType));", "-\t\t\t\tif (typeIsConsistent && !currentType.isStatic() && enclosingType != null && enclosingType.isRawType()) {", "+\t\t\t\tif (typeIsConsistent && !currentType.isStatic() && qualifiedType != null && qualifiedType.isRawType()) {", "-\t\t\t\t\t\t\tthis, scope.environment().createRawType(currentType, enclosingType), argTypes);", "+\t\t\t\t\t\t\tthis, scope.environment().createRawType(currentType, qualifiedType), argTypes);", "-\t\t\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType(currentType, argTypes, enclosingType);", "+\t\t\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType(currentType, argTypes, qualifiedType);", "-\t\t\t\tthis.resolvedType = parameterizedType;", "+\t\t\t\tqualifiedType = parameterizedType;", "-\t\t\t\tif (currentType.erasure().isGenericType()) {", "-\t   \t\t\t    if (typeIsConsistent && enclosingType != null && enclosingType.isParameterizedType()) {", "-\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.createParameterizedType(currentType, null, enclosingType));", "+\t\t\t\tif (currentType.isGenericType()) {", "+\t   \t\t\t    if (typeIsConsistent && qualifiedType != null && qualifiedType.isParameterizedType()) {", "+\t\t\t\t\t\tscope.problemReporter().parameterizedMemberTypeMissingArguments(this, scope.createParameterizedType(currentType, null, qualifiedType));", "-\t   \t\t\t    this.resolvedType = scope.environment().createRawType(currentType, enclosingType); // raw type", "+\t   \t\t\t    qualifiedType = scope.environment().createRawType(currentType, qualifiedType); // raw type", "-", "+\t\tthis.resolvedType = qualifiedType;"]}], "num": 54198}
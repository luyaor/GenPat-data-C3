{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6daddf7bd46ef3812e1ee38bd7c459e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fc1e9624ff2e28bc535b4c046fb9614", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 34, "signatureBeforeChange": " \t \tprivate void removeFromFileMaps( IFile generatedFile, IFile parentFile )  \t    throws JavaModelException", "signatureAfterChange": " \tprivate synchronized void removeFileFromMaps(IFile f, Set<ICompilationUnit> toDiscard, Set<IFile> toDelete)", "diff": ["-\t", "-\tprivate void removeFromFileMaps( IFile generatedFile, IFile parentFile ) ", "-\t    throws JavaModelException ", "-\t{", "-\t\tboolean discardWorkingCopy;", "-\t\tsynchronized( this )", "-\t\t{\t", "-\t\t\tdiscardWorkingCopy = _generatedFile2WorkingCopy.containsKey(generatedFile);", "-\t\t}", "-\t\t", "-\t\t// don't want to hold a lock when we call discardGeneratedWorkingCopy...", "-\t\tif ( discardWorkingCopy )", "-\t\t\tdiscardGeneratedWorkingCopy(generatedFile, parentFile);", "-", "-\t\tsynchronized( this )", "-\t\t{", "-\t\t\tSet<IFile> derivedFiles = _parentFile2GeneratedFiles.get(parentFile);", "-", "-\t\t\t// assertions", "-\t\t\tif (derivedFiles == null)", "-\t\t\t\tthrow new RuntimeException(", "-\t\t\t\t\t\"derivedFiles is null and it shouldn't be\"); //$NON-NLS-1$", "-", "-\t\t\tif (derivedFiles.remove(generatedFile)) {", "-\t\t\t\t_mapsDirty = true;", "-\t\t\t}", "-\t\t\t", "-\t\t\t// update _derivedFile2Parents map", "-\t\t\tSet<IFile> parents = _generatedFile2ParentFiles.get(generatedFile);", "-", "-\t\t\t// assertions", "-\t\t\tif (parents == null)", "-\t\t\t\tthrow new RuntimeException(\" parents is null and it shouldn't be\"); //$NON-NLS-1$", "-\t\t\tif (!parents.contains(parentFile))", "-\t\t\t\tthrow new RuntimeException(\"parents set does not contain parent. Parent: \" + parentFile + \". Child: \" + generatedFile); //$NON-NLS-1$ //$NON-NLS-2$", "-", "-\t\t\tif (parents.remove(parentFile)) {", "-\t\t\t\t_mapsDirty = true;", "-\t\t\t}", "-\t\t}", "-\t}", "+\tprivate synchronized void removeFileFromMaps(IFile f, Set<ICompilationUnit> toDiscard, Set<IFile> toDelete)", "+\t{", "+\t\t// Is this file the sole parent of files generated during build?", "+\t\t// If so, add them to the deletion list. Then remove the file from", "+\t\t// the build dependency list.", "+\t\tSet<IFile> childFiles = _parentToGenFiles.getValues(f);", "+\t\tfor (IFile childFile : childFiles) {", "+\t\t\tSet<IFile> parentFiles = _parentToGenFiles.getKeys(childFile);", "+\t\t\tif (parentFiles.size() == 1 && parentFiles.contains(f)) {", "+\t\t\t\ttoDelete.add(childFile);", "+\t\tboolean removed = _parentToGenFiles.removeKey(f);", "+\t\tif (removed) {", "+\t\t\tif (AptPlugin.DEBUG_GFM_MAPS) AptPlugin.trace( ", "+\t\t\t\t\t\"removed parent file from build dependencies: \" + f); //$NON-NLS-1$", "+", "+\t\t// Is this file the sole parent of types generated during reconcile?", "+\t\t// If so, add them to the discard list and remove them from the working", "+\t\t// copy list. Then remove the file (and its solely parented children)", "+\t\t// from the reconcile dependency list.", "+\t\tSet<ICompilationUnit> childWCs = _parentToGenWorkingCopies.getValues(f);", "+\t\tfor (ICompilationUnit childWC : childWCs) {", "+\t\t\tSet<IFile> parentFiles = _parentToGenWorkingCopies.getKeys(childWC);", "+\t\t\tif (parentFiles.size() == 1 && parentFiles.contains(f)) {", "+\t\t\t\ttoDiscard.add(childWC);", "+\t\t\t\tICompilationUnit removedWC = _workingCopies.remove(childWC.getResource());", "+\t\t\t\tassert removedWC != null && removedWC.equals(childWC) :", "+\t\t\t\t\t\"Working copy list: get(f).getResource() != f, for wc \" +  //$NON-NLS-1$", "+\t\t\t\t\tchildWC.getElementName();", "+\t\tremoved = _parentToGenWorkingCopies.removeKey(f);", "+\t\tif (removed) {", "+\t\t\tif (AptPlugin.DEBUG_GFM_MAPS) AptPlugin.trace( ", "+\t\t\t\t\t\"removed parent file from working copy dependencies: \" + f); //$NON-NLS-1$", "+\t\t}", "+", "+\t\t// Is this file being hidden by a blank working copy?  If so, remove that.", "+\t\tICompilationUnit wc = _hiddenBuiltTypes.remove(f);", "+\t\tif (null != wc) {", "+\t\t\tif (AptPlugin.DEBUG_GFM_MAPS) AptPlugin.trace( ", "+\t\t\t\t\t\"removed working copy from hidden types list: \" + f); //$NON-NLS-1$", "+\t\t}", "+\t\tif (null != wc) {", "+\t\t\ttoDiscard.add(wc);", "+\t\t}", "+", "+\t\tassert checkIntegrity();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fad78ca23dcee6910e55546bddd44f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelStatus.java", "commitBeforeChange": "f39402d13165cb2a8baa9e8822f47cb5416f824f", "commitAfterChange": "c59f5d3873f087b004eace9b9fa6844d0400c666", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic String getMessage()", "signatureAfterChange": " \tpublic String getMessage()", "diff": ["+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+\t\t\t\tcase CP_CONTAINER_PATH_UNBOUND:", "+\t\t\t\t\tIPath path = this.fPath;", "+\t\t\t\t\tIJavaProject javaProject = (IJavaProject)fElements[0];", "+\t\t\t\t\tClasspathContainerInitializer initializer = JavaCore.getClasspathContainerInitializer(path.segment(0));", "+\t\t\t\t\tString description = null;", "+\t\t\t\t\tif (initializer != null) description = initializer.getDescription(path, javaProject);", "+\t\t\t\t\tif (description == null) description = path.makeRelative().toString();", "+\t\t\t\t\treturn Util.bind(\"classpath.unboundContainerPath\", description); //$NON-NLS-1$", "+", "+\t\t\t\tcase INVALID_CP_CONTAINER_ENTRY:", "+\t\t\t\t\tpath = this.fPath;", "+\t\t\t\t\tjavaProject = (IJavaProject)fElements[0];", "+\t\t\t\t\tIClasspathContainer container = null;", "+\t\t\t\t\tdescription = null;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tcontainer = JavaCore.getClasspathContainer(path, javaProject);", "+\t\t\t\t\t} catch(JavaModelException e){", "+\t\t\t\t\t}", "+\t\t\t\t\tif (container == null) {", "+\t\t\t\t\t\t initializer = JavaCore.getClasspathContainerInitializer(path.segment(0));", "+\t\t\t\t\t\tif (initializer != null) description = initializer.getDescription(path, javaProject);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tdescription = container.getDescription();", "+\t\t\t\t\t}", "+\t\t\t\t\tif (description == null) description = path.makeRelative().toString();", "+\t\t\t\t\treturn Util.bind(\"classpath.invalidContainer\", description); //$NON-NLS-1$", "+", "+\t\t\tcase CP_VARIABLE_PATH_UNBOUND:", "+\t\t\t\t\tpath = this.fPath;", "+\t\t\t\t\treturn Util.bind(\"classpath.unboundVariablePath\", path.makeRelative().toString()); //$NON-NLS-1$", "+\t\t\t\t\t", "+\t\t\tcase CLASSPATH_CYCLE: // TODO: getMessage for CLASSPATH_CYCLE", "+\t\t\t\t\tjavaProject = (IJavaProject)fElements[0];", "+\t\t\t\t\treturn Util.bind(\"classpath.cycle\", javaProject.getElementName()); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\t\t\t\t ", "+\t\t\tcase DISABLED_CP_EXCLUSION_PATTERNS:", "+\t\t\t\t\tpath = this.fPath;", "+\t\t\t\t\treturn Util.bind(\"classpath.disabledExclusionPatterns\", path.makeRelative().toString()); //$NON-NLS-1$", "+", "+\t\t\tcase DISABLED_CP_MULTIPLE_OUTPUT_LOCATIONS:", "+\t\t\t\t\tpath = this.fPath;", "+\t\t\t\t\treturn Util.bind(\"classpath.disabledMultipleOutputLocations\", path.makeRelative().toString()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98d4587ebbd4a09fba68395e058ad4a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 88, "signatureBeforeChange": " \tpublic void testExampleSnippets()", "signatureAfterChange": " \tpublic void testExampleSnippets()", "diff": ["-\t\t\tAST localAst = new AST();", "+\t\t\tAST localAst;", "+\t\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\t\tlocalAst = AST.newAST2();", "+\t\t\t} else {", "+\t\t\t\tlocalAst = AST.newAST3();", "+\t\t\t}", "-\t\t\ttd.setModifiers(Modifier.PUBLIC);", "+\t\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\t\ttd.setModifiers(Modifier.PUBLIC);", "+\t\t\t} else {", "+\t\t\t\ttd.modifiers().add(localAst.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD));", "+\t\t\t}", "-\t\t\tfd.setModifiers(Modifier.PRIVATE | Modifier.STATIC);", "+\t\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\t\tfd.setModifiers(Modifier.PRIVATE | Modifier.FINAL);", "+\t\t\t} else {", "+\t\t\t\tfd.modifiers().add(localAst.newModifier(Modifier.ModifierKeyword.PRIVATE_KEYWORD));", "+\t\t\t\tfd.modifiers().add(localAst.newModifier(Modifier.ModifierKeyword.STATIC_KEYWORD));", "+\t\t\t}", "-\t\t\tmd.setModifiers(Modifier.PUBLIC | Modifier.STATIC);", "+\t\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\t\tmd.setModifiers(Modifier.PUBLIC | Modifier.STATIC);", "+\t\t\t\tmd.setReturnType(localAst.newPrimitiveType(PrimitiveType.VOID));", "+\t\t\t} else {", "+\t\t\t\tmd.modifiers().add(localAst.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD));", "+\t\t\t\tmd.modifiers().add(localAst.newModifier(Modifier.ModifierKeyword.STATIC_KEYWORD));", "+\t\t\t\tmd.setReturnType2(localAst.newPrimitiveType(PrimitiveType.VOID));", "+\t\t\t}", "-\t\t\tmd.setReturnType(localAst.newPrimitiveType(PrimitiveType.VOID));", "-\t\t\tcr1.setName(localAst.newSimpleName(\"String\")); //$NON-NLS-1$", "+\t\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\t\tcr1.setName(localAst.newSimpleName(\"String\")); //$NON-NLS-1$", "+\t\t\t} else {", "+\t\t\t\tcr1.setType(localAst.newSimpleType(localAst.newSimpleName(\"String\"))); //$NON-NLS-1$", "+\t\t\t}", "-\t\t\tcr2.setName(localAst.newSimpleName(\"Listener\")); //$NON-NLS-1$", "+\t\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\t\tcr2.setName(localAst.newSimpleName(\"Listener\")); //$NON-NLS-1$", "+\t\t\t} else {", "+\t\t\t\tcr2.setType(localAst.newSimpleType(localAst.newSimpleName(\"Listener\"))); //$NON-NLS-1$", "+\t\t\t}", "-\t\t\tmd0.setModifiers(Modifier.PUBLIC);", "+\t\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\t\tmd0.setModifiers(Modifier.PUBLIC);", "+\t\t\t} else {", "+\t\t\t\tmd0.modifiers().add(localAst.newModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD));", "+\t\t\t}"]}], "num": 40034}
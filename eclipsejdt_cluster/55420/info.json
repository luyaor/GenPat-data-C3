{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "270c117f8f45102b403f6a92c9bf7beb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c1b06e3ef36fa2424e49ece31b5c9f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void computeFolderChildren(IContainer folder, boolean isIncluded, String[] pkgName, ArrayList vChildren, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "signatureAfterChange": " protected void computeFolderChildren(IContainer folder, boolean isIncluded, String[] pkgName, ArrayList vChildren, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "diff": ["-\t\tfor (int i = 0, max = members.length; i < max; i++) {", "-\t\t\tIResource member = members[i];", "-\t\t\tString memberName = member.getName();", "+\t\tint length = members.length;", "+\t\tif (length >0) {", "+\t\t\tString sourceLevel = javaProject.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\tString complianceLevel = javaProject.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tIResource member = members[i];", "+\t\t\t\tString memberName = member.getName();", "-\t\t\tswitch(member.getType()) {", "+\t\t\t\tswitch(member.getType()) {", "-\t\t\t    case IResource.FOLDER:", "-\t\t\t\t\t// recurse into sub folders even even parent not included as a sub folder could be included", "-\t\t\t\t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=65637)", "-\t\t\t\t\tif (Util.isValidFolderNameForPackage(memberName)) {", "-\t\t\t\t\t\t// eliminate binary output only if nested inside direct subfolders", "-\t\t\t\t\t\tif (javaProject.contains(member)) {", "-\t\t\t\t\t\t\tString[] newNames = Util.arrayConcat(pkgName, manager.intern(memberName));", "-\t\t\t\t\t\t\tboolean isMemberIncluded = !Util.isExcluded(member, inclusionPatterns, exclusionPatterns);", "-\t\t\t\t\t\t\tcomputeFolderChildren((IFolder) member, isMemberIncluded, newNames, vChildren, inclusionPatterns, exclusionPatterns);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t    \tbreak;", "-\t\t\t    case IResource.FILE:", "-\t\t\t        // inclusion filter may only include files, in which case we still want to include the immediate parent package (lazily)", "-\t\t\t\t\tif (!hasIncluded", "-\t\t\t\t\t\t\t\t&& Util.isValidCompilationUnitName(memberName)", "+\t\t\t    \tcase IResource.FOLDER:", "+\t\t\t    \t\t// recurse into sub folders even even parent not included as a sub folder could be included", "+\t\t\t    \t\t// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=65637)", "+\t\t\t    \t\tif (Util.isValidFolderNameForPackage(memberName, sourceLevel, complianceLevel)) {", "+\t\t\t    \t\t\t// eliminate binary output only if nested inside direct subfolders", "+\t\t\t    \t\t\tif (javaProject.contains(member)) {", "+\t\t\t    \t\t\t\tString[] newNames = Util.arrayConcat(pkgName, manager.intern(memberName));", "+\t\t\t    \t\t\t\tboolean isMemberIncluded = !Util.isExcluded(member, inclusionPatterns, exclusionPatterns);", "+\t\t\t    \t\t\t\tcomputeFolderChildren((IFolder) member, isMemberIncluded, newNames, vChildren, inclusionPatterns, exclusionPatterns);", "+\t\t\t    \t\t\t}", "+\t\t\t    \t\t}", "+\t\t\t    \t\tbreak;", "+\t\t\t    \tcase IResource.FILE:", "+\t\t\t    \t\t// inclusion filter may only include files, in which case we still want to include the immediate parent package (lazily)", "+\t\t\t    \t\tif (!hasIncluded", "+\t\t\t    \t\t\t\t&& Util.isValidCompilationUnitName(memberName, sourceLevel, complianceLevel)", "-\t\t\t\t\t\thasIncluded = true;", "-\t\t\t\t\t    IPackageFragment pkg = getPackageFragment(pkgName);", "-\t\t\t\t\t    vChildren.add(pkg); ", "-\t\t\t\t\t}", "-\t\t\t        break;", "+\t\t\t    \t\t\thasIncluded = true;", "+\t\t\t    \t\t\tIPackageFragment pkg = getPackageFragment(pkgName);", "+\t\t\t    \t\t\tvChildren.add(pkg); ", "+\t\t\t    \t\t}", "+\t\t\t    \t\tbreak;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50c4f75dec83d8e00f1fb2cf0c19ca03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic static IJavaElement determineIfOnClasspath( \t\tIResource resource, \t\tIJavaProject project)", "signatureAfterChange": " \tpublic static IJavaElement determineIfOnClasspath( \t\tIResource resource, \t\tIJavaProject project)", "diff": ["-\t\t\t\t", "-\t\t\tfor (int i = 0; i < entries.length; i++) {", "-\t\t\t\tIClasspathEntry entry = entries[i];", "-\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "-\t\t\t\tIPath rootPath = entry.getPath();", "-\t\t\t\tif (rootPath.equals(resourcePath)) {", "-\t\t\t\t\treturn project.getPackageFragmentRoot(resource);", "-\t\t\t\t} else if (rootPath.isPrefixOf(resourcePath)) {", "-\t\t\t\t\t// allow creation of package fragment if it contains a .java file that is included", "-\t\t\t\t\tif (!Util.isExcluded(resource, ((ClasspathEntry)entry).fullInclusionPatternChars(), ((ClasspathEntry)entry).fullExclusionPatternChars())) {", "-\t\t\t\t\t\t// given we have a resource child of the root, it cannot be a JAR pkg root", "-\t\t\t\t\t\tPackageFragmentRoot root =(PackageFragmentRoot) ((JavaProject) project).getFolderPackageFragmentRoot(rootPath);", "-\t\t\t\t\t\tif (root == null) return null;", "-\t\t\t\t\t\tIPath pkgPath = resourcePath.removeFirstSegments(rootPath.segmentCount());", "+\t\t\t", "+\t\t\tint length\t= entries.length;", "+\t\t\tif (length > 0) {", "+\t\t\t\tString sourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\t\tString complianceLevel = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tIClasspathEntry entry = entries[i];", "+\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "+\t\t\t\t\tIPath rootPath = entry.getPath();", "+\t\t\t\t\tif (rootPath.equals(resourcePath)) {", "+\t\t\t\t\t\treturn project.getPackageFragmentRoot(resource);", "+\t\t\t\t\t} else if (rootPath.isPrefixOf(resourcePath)) {", "+\t\t\t\t\t\t// allow creation of package fragment if it contains a .java file that is included", "+\t\t\t\t\t\tif (!Util.isExcluded(resource, ((ClasspathEntry)entry).fullInclusionPatternChars(), ((ClasspathEntry)entry).fullExclusionPatternChars())) {", "+\t\t\t\t\t\t\t// given we have a resource child of the root, it cannot be a JAR pkg root", "+\t\t\t\t\t\t\tPackageFragmentRoot root =(PackageFragmentRoot) ((JavaProject) project).getFolderPackageFragmentRoot(rootPath);", "+\t\t\t\t\t\t\tif (root == null) return null;", "+\t\t\t\t\t\t\tIPath pkgPath = resourcePath.removeFirstSegments(rootPath.segmentCount());", "-\t\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "-\t\t\t\t\t\t\t// if the resource is a file, then remove the last segment which", "-\t\t\t\t\t\t\t// is the file name in the package", "-\t\t\t\t\t\t\tpkgPath = pkgPath.removeLastSegments(1);", "+\t\t\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "+\t\t\t\t\t\t\t\t// if the resource is a file, then remove the last segment which", "+\t\t\t\t\t\t\t\t// is the file name in the package", "+\t\t\t\t\t\t\t\tpkgPath = pkgPath.removeLastSegments(1);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tString[] pkgName = pkgPath.segments();", "+\t\t\t\t\t\t\tif (pkgName.length != 0 && JavaConventions.validatePackageName(Util.packageName(pkgPath, sourceLevel, complianceLevel), sourceLevel, complianceLevel).getSeverity() == IStatus.ERROR) {", "+\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn root.getPackageFragment(pkgName);", "-\t\t\t\t\t\tString[] pkgName = pkgPath.segments();", "-\t\t\t\t\t\tif (pkgName.length != 0 && JavaConventions.validatePackageName(Util.packageName(pkgPath)).getSeverity() == IStatus.ERROR) {", "-\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn root.getPackageFragment(pkgName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5371a8c1836c8663d8517bb5c7422862", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/MultiOperation.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprotected void verifyRenaming(IJavaElement element) throws JavaModelException", "signatureAfterChange": " \tprotected void verifyRenaming(IJavaElement element) throws JavaModelException", "diff": ["-\t", "+\t    IJavaProject project = element.getJavaProject();", "+\t    String sourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t    String complianceLevel = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "-\t\t\t\tisValid = JavaConventions.validatePackageName(newName).getSeverity() != IStatus.ERROR;", "+\t\t\t\tisValid = JavaConventions.validatePackageName(newName, sourceLevel, complianceLevel).getSeverity() != IStatus.ERROR;", "-\t\t\t\tisValid = JavaConventions.validateCompilationUnitName(newName).getSeverity() != IStatus.ERROR;", "+\t\t\t\tisValid = JavaConventions.validateCompilationUnitName(newName,sourceLevel, complianceLevel).getSeverity() != IStatus.ERROR;", "-\t\t\t\tisValid = JavaConventions.validateIdentifier(newName).getSeverity() != IStatus.ERROR;", "+\t\t\t\tisValid = JavaConventions.validateIdentifier(newName, sourceLevel, complianceLevel).getSeverity() != IStatus.ERROR;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83d8203e807da79b12e7c3f5fecc1076", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprivate synchronized void computeAllRootPaths(IType type)", "signatureAfterChange": " \t \tprivate synchronized void computeAllRootPaths(IType type)", "diff": ["+\t\t\tIJavaProject project = jarPackageFragmentRoot.getJavaProject();", "+\t\t\tString sourceLevel = null;", "+\t\t\tString complianceLevel = null;", "-\t\t\t\t\t\t\t\tIStatus status = JavaConventions.validatePackageName(firstLevelPackageName);", "+\t\t\t\t\t\t\t\tif (sourceLevel == null) {", "+\t\t\t\t\t\t\t\t\tsourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\t\t\t\t\t\t\tcomplianceLevel = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tIStatus status = JavaConventions.validatePackageName(firstLevelPackageName, sourceLevel, complianceLevel);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b18e60d760f308a03d90a2aa0cb1d475", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate Object[] computeNonJavaResources(JavaProject project)", "signatureAfterChange": " \tprivate Object[] computeNonJavaResources(JavaProject project)", "diff": ["-\t\t\tfor (int i = 0, max = members.length; i < max; i++) {", "-\t\t\t\tIResource res = members[i];", "-\t\t\t\tswitch (res.getType()) {", "-\t\t\t\t\tcase IResource.FILE :", "-\t\t\t\t\t\tIPath resFullPath = res.getFullPath();", "-\t\t\t\t\t\tString resName = res.getName();", "+\t\t\tint length = members.length;", "+\t\t\tif (length > 0) {", "+\t\t\t\tString sourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\t\tString complianceLevel = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tIResource res = members[i];", "+\t\t\t\t\tswitch (res.getType()) {", "+\t\t\t\t\t\tcase IResource.FILE :", "+\t\t\t\t\t\t\tIPath resFullPath = res.getFullPath();", "+\t\t\t\t\t\t\tString resName = res.getName();", "-\t\t\t\t\t\t// ignore a jar file on the classpath", "-\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(resName) && this.isClasspathEntryOrOutputLocation(resFullPath, classpath, projectOutput)) {", "+\t\t\t\t\t\t\t// ignore a jar file on the classpath", "+\t\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(resName) && this.isClasspathEntryOrOutputLocation(resFullPath, classpath, projectOutput)) {", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// ignore .java file if src == project", "+\t\t\t\t\t\t\tif (srcIsProject ", "+\t\t\t\t\t\t\t\t\t&& Util.isValidCompilationUnitName(resName, sourceLevel, complianceLevel)", "+\t\t\t\t\t\t\t\t\t&& !Util.isExcluded(res, inclusionPatterns, exclusionPatterns)) {", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// ignore .class file if bin == project", "+\t\t\t\t\t\t\tif (binIsProject && Util.isValidClassFileName(resName, sourceLevel, complianceLevel)) {", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// else add non java resource", "+\t\t\t\t\t\t\tif (resources.length == resourcesCounter) {", "+\t\t\t\t\t\t\t\t// resize", "+\t\t\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\t\t\t\tresources,", "+\t\t\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t\t\t(resources = new IResource[resourcesCounter * 2]),", "+\t\t\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t\t\tresourcesCounter);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tresources[resourcesCounter++] = res;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// ignore .java file if src == project", "-\t\t\t\t\t\tif (srcIsProject ", "-\t\t\t\t\t\t\t&& Util.isValidCompilationUnitName(resName)", "-\t\t\t\t\t\t\t&& !Util.isExcluded(res, inclusionPatterns, exclusionPatterns)) {", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// ignore .class file if bin == project", "-\t\t\t\t\t\tif (binIsProject && Util.isValidClassFileName(resName)) {", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// else add non java resource", "-\t\t\t\t\t\tif (resources.length == resourcesCounter) {", "-\t\t\t\t\t\t\t// resize", "-\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\tresources,", "-\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t(resources = new IResource[resourcesCounter * 2]),", "-\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\tresourcesCounter);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tresources[resourcesCounter++] = res;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase IResource.FOLDER :", "-\t\t\t\t\t\tresFullPath = res.getFullPath();", "+\t\t\t\t\t\tcase IResource.FOLDER :", "+\t\t\t\t\t\t\tresFullPath = res.getFullPath();", "-\t\t\t\t\t\t// ignore non-excluded folders on the classpath or that correspond to an output location", "-\t\t\t\t\t\tif ((srcIsProject && !Util.isExcluded(res, inclusionPatterns, exclusionPatterns) && Util.isValidFolderNameForPackage(res.getName()))", "-\t\t\t\t\t\t\t\t|| this.isClasspathEntryOrOutputLocation(resFullPath, classpath, projectOutput)) {", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// else add non java resource", "-\t\t\t\t\t\tif (resources.length == resourcesCounter) {", "-\t\t\t\t\t\t\t// resize", "-\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\tresources,", "-\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t(resources = new IResource[resourcesCounter * 2]),", "-\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\tresourcesCounter);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tresources[resourcesCounter++] = res;", "+\t\t\t\t\t\t\t// ignore non-excluded folders on the classpath or that correspond to an output location", "+\t\t\t\t\t\t\tif ((srcIsProject && !Util.isExcluded(res, inclusionPatterns, exclusionPatterns) && Util.isValidFolderNameForPackage(res.getName(), sourceLevel, complianceLevel))", "+\t\t\t\t\t\t\t\t\t|| this.isClasspathEntryOrOutputLocation(resFullPath, classpath, projectOutput)) {", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// else add non java resource", "+\t\t\t\t\t\t\tif (resources.length == resourcesCounter) {", "+\t\t\t\t\t\t\t\t// resize", "+\t\t\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\t\t\t\tresources,", "+\t\t\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t\t\t(resources = new IResource[resourcesCounter * 2]),", "+\t\t\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\t\t\tresourcesCounter);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tresources[resourcesCounter++] = res;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2427449b1f97d85132ef678f3e6746f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRootInfo.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " static Object[] computeFolderNonJavaResources(JavaProject project, IContainer folder, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "signatureAfterChange": " static Object[] computeFolderNonJavaResources(JavaProject project, IContainer folder, char[][] inclusionPatterns, char[][] exclusionPatterns) throws JavaModelException", "diff": ["-\t\tnextResource: for (int i = 0, max = members.length; i < max; i++) {", "-\t\t\tIResource member = members[i];", "-\t\t\tswitch (member.getType()) {", "-\t\t\t\tcase IResource.FILE :", "-\t\t\t\t\tString fileName = member.getName();", "+\t\tint length = members.length;", "+\t\tif (length > 0) {", "+\t\t\tString sourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\tString complianceLevel = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\tnextResource: for (int i = 0; i < length; i++) {", "+\t\t\t\tIResource member = members[i];", "+\t\t\t\tswitch (member.getType()) {", "+\t\t\t\t\tcase IResource.FILE :", "+\t\t\t\t\t\tString fileName = member.getName();", "-\t\t\t\t\t// ignore .java files that are not excluded", "-\t\t\t\t\tif (Util.isValidCompilationUnitName(fileName) && !Util.isExcluded(member, inclusionPatterns, exclusionPatterns)) ", "-\t\t\t\t\t\tcontinue nextResource;", "-\t\t\t\t\t// ignore .class files", "-\t\t\t\t\tif (Util.isValidClassFileName(fileName)) ", "-\t\t\t\t\t\tcontinue nextResource;", "-\t\t\t\t\t// ignore .zip or .jar file on classpath", "-\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(fileName) && isClasspathEntry(member.getFullPath(), classpath)) ", "-\t\t\t\t\t\tcontinue nextResource;", "-\t\t\t\t\tbreak;", "+\t\t\t\t\t\t// ignore .java files that are not excluded", "+\t\t\t\t\t\tif (Util.isValidCompilationUnitName(fileName, sourceLevel, complianceLevel) && !Util.isExcluded(member, inclusionPatterns, exclusionPatterns)) ", "+\t\t\t\t\t\t\tcontinue nextResource;", "+\t\t\t\t\t\t// ignore .class files", "+\t\t\t\t\t\tif (Util.isValidClassFileName(fileName, sourceLevel, complianceLevel)) ", "+\t\t\t\t\t\t\tcontinue nextResource;", "+\t\t\t\t\t\t// ignore .zip or .jar file on classpath", "+\t\t\t\t\t\tif (org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(fileName) && isClasspathEntry(member.getFullPath(), classpath)) ", "+\t\t\t\t\t\t\tcontinue nextResource;", "+\t\t\t\t\t\tbreak;", "-\t\t\t\tcase IResource.FOLDER :", "-\t\t\t\t\t// ignore valid packages or excluded folders that correspond to a nested pkg fragment root", "-\t\t\t\t\tif (Util.isValidFolderNameForPackage(member.getName())", "-\t\t\t\t\t\t\t&& (!Util.isExcluded(member, inclusionPatterns, exclusionPatterns) ", "-\t\t\t\t\t\t\t\t|| isClasspathEntry(member.getFullPath(), classpath)))", "-\t\t\t\t\t\tcontinue nextResource;", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "-\t\t\t\t// resize", "-\t\t\t\tSystem.arraycopy(nonJavaResources, 0, (nonJavaResources = new IResource[nonJavaResourcesCounter * 2]), 0, nonJavaResourcesCounter);", "-\t\t\t}", "-\t\t\tnonJavaResources[nonJavaResourcesCounter++] = member;", "-", "+\t\t\t\t\tcase IResource.FOLDER :", "+\t\t\t\t\t\t// ignore valid packages or excluded folders that correspond to a nested pkg fragment root", "+\t\t\t\t\t\tif (Util.isValidFolderNameForPackage(member.getName(), sourceLevel, complianceLevel)", "+\t\t\t\t\t\t\t\t&& (!Util.isExcluded(member, inclusionPatterns, exclusionPatterns) ", "+\t\t\t\t\t\t\t\t\t\t|| isClasspathEntry(member.getFullPath(), classpath)))", "+\t\t\t\t\t\t\tcontinue nextResource;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tif (nonJavaResources.length == nonJavaResourcesCounter) {", "+\t\t\t\t\t// resize", "+\t\t\t\t\tSystem.arraycopy(nonJavaResources, 0, (nonJavaResources = new IResource[nonJavaResourcesCounter * 2]), 0, nonJavaResourcesCounter);", "+\t\t\t\t}", "+\t\t\t\tnonJavaResources[nonJavaResourcesCounter++] = member;", "+\t\t\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee4d595fb99aaf78bbef521dcc5f7566", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragment.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["-\t\tfor (int i = 0, max = members.length; i < max; i++) {", "-\t\t\tIResource child = members[i];", "-\t\t\tif (child.getType() != IResource.FOLDER", "-\t\t\t\t\t&& !Util.isExcluded(child, inclusionPatterns, exclusionPatterns)) {", "-\t\t\t\tIJavaElement childElement;", "-\t\t\t\tif (kind == IPackageFragmentRoot.K_SOURCE && Util.isValidCompilationUnitName(child.getName())) {", "-\t\t\t\t\tchildElement = new CompilationUnit(this, child.getName(), DefaultWorkingCopyOwner.PRIMARY);", "-\t\t\t\t\tvChildren.add(childElement);", "-\t\t\t\t} else if (kind == IPackageFragmentRoot.K_BINARY && Util.isValidClassFileName(child.getName())) {", "-\t\t\t\t\tchildElement = getClassFile(child.getName());", "-\t\t\t\t\tvChildren.add(childElement);", "+\t\tint length = members.length;", "+\t\tif (length > 0) {", "+\t\t\tIJavaProject project = getJavaProject();", "+\t\t\tString sourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\tString complianceLevel = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tIResource child = members[i];", "+\t\t\t\tif (child.getType() != IResource.FOLDER", "+\t\t\t\t\t\t&& !Util.isExcluded(child, inclusionPatterns, exclusionPatterns)) {", "+\t\t\t\t\tIJavaElement childElement;", "+\t\t\t\t\tif (kind == IPackageFragmentRoot.K_SOURCE && Util.isValidCompilationUnitName(child.getName(), sourceLevel, complianceLevel)) {", "+\t\t\t\t\t\tchildElement = new CompilationUnit(this, child.getName(), DefaultWorkingCopyOwner.PRIMARY);", "+\t\t\t\t\t\tvChildren.add(childElement);", "+\t\t\t\t\t} else if (kind == IPackageFragmentRoot.K_BINARY && Util.isValidClassFileName(child.getName(), sourceLevel, complianceLevel)) {", "+\t\t\t\t\t\tchildElement = getClassFile(child.getName());", "+\t\t\t\t\t\tvChildren.add(childElement);", "+\t\t\t\t\t}"]}], "num": 55420}
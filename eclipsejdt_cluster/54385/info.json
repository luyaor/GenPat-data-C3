{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f895e39706a4747cca6867909bdeb6cd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "044a81edf213c17e06112649ab6baa8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/Label.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void place()", "signatureAfterChange": " public abstract void place();", "diff": ["+public abstract void place();", "-*/", "-public void place() { // Currently lacking wide support.", "-\tif (CodeStream.DEBUG) System.out.println(\"\\t\\t\\t\\t<place at: \"+codeStream.position+\" - \"+ this); //$NON-NLS-1$ //$NON-NLS-2$", "-//\tif ((this.tagBits & USED) == 0 && this.forwardReferenceCount == 0) {", "-//\t\treturn;", "-//\t}", "-", "-\tif (position == POS_NOT_SET) {", "-\t\tif ((this.tagBits & USED) != 0 || this.forwardReferenceCount != 0) {", "-\t\t\tthis.position = codeStream.getPosition();", "-\t\t} else {", "-\t\t\tthis.position = codeStream.position;", "-\t\t}", "-\t\tcodeStream.addLabel(this);", "-\t\tint oldPosition = position;", "-\t\tboolean isOptimizedBranch = false;", "-\t\tif (forwardReferenceCount != 0) {", "-\t\t\tisOptimizedBranch = (forwardReferences[forwardReferenceCount - 1] + 2 == position) && (codeStream.bCodeStream[codeStream.classFileOffset - 3] == Opcodes.OPC_goto);", "-\t\t\tif (isOptimizedBranch) {", "-\t\t\t\tcodeStream.position = (position -= 3);", "-\t\t\t\tcodeStream.classFileOffset -= 3;", "-\t\t\t\tforwardReferenceCount--;", "-\t\t\t\t// also update the PCs in the related debug attributes", "-\t\t\t\t/* OLD CODE", "-\t\t\t\t\tint index = codeStream.pcToSourceMapSize - 1;", "-\t\t\t\t\t\twhile ((index >= 0) && (codeStream.pcToSourceMap[index][1] == oldPosition)) {", "-\t\t\t\t\t\t\tcodeStream.pcToSourceMap[index--][1] = position;", "-\t\t\t\t\t\t}", "-\t\t\t\t*/", "-\t\t\t\t// Beginning of new code", "-\t\t\t\tint index = codeStream.pcToSourceMapSize - 2;", "-\t\t\t\tif (codeStream.lastEntryPC == oldPosition) {", "-\t\t\t\t\tcodeStream.lastEntryPC = position;", "-\t\t\t\t}", "-\t\t\t\tif ((index >= 0) && (codeStream.pcToSourceMap[index] == position)) {", "-\t\t\t\t\tcodeStream.pcToSourceMapSize-=2;", "-\t\t\t\t}", "-\t\t\t\t// end of new code", "-\t\t\t\tif ((codeStream.generateAttributes & ClassFileConstants.ATTR_VARS) != 0) {", "-\t\t\t\t\tLocalVariableBinding locals[] = codeStream.locals;", "-\t\t\t\t\tfor (int i = 0, max = locals.length; i < max; i++) {", "-\t\t\t\t\t\tLocalVariableBinding local = locals[i];", "-\t\t\t\t\t\tif ((local != null) && (local.initializationCount > 0)) {", "-\t\t\t\t\t\t\tif (local.initializationPCs[((local.initializationCount - 1) << 1) + 1] == oldPosition) {", "-\t\t\t\t\t\t\t\t// we want to prevent interval of size 0 to have a negative size.", "-\t\t\t\t\t\t\t\t// see PR 1GIRQLA: ITPJCORE:ALL - ClassFormatError for local variable attribute", "-\t\t\t\t\t\t\t\tlocal.initializationPCs[((local.initializationCount - 1) << 1) + 1] = position;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (local.initializationPCs[(local.initializationCount - 1) << 1] == oldPosition) {", "-\t\t\t\t\t\t\t\tlocal.initializationPCs[(local.initializationCount - 1) << 1] = position;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tfor (int i = 0; i < forwardReferenceCount; i++) {", "-\t\t\tcodeStream.writePosition(this, forwardReferences[i]);", "-\t\t}", "-\t\t// For all labels placed at that position we check if we need to rewrite the jump", "-\t\t// offset. It is the case each time a label had a forward reference to the current position.", "-\t\t// Like we change the current position, we have to change the jump offset. See 1F4IRD9 for more details.", "-\t\tif (isOptimizedBranch) {", "-\t\t\tthis.codeStream.optimizeBranch(oldPosition, this);", "-\t\t}", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5af29c48ab6e90544d0e46988284ccaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/BranchLabel.java", "commitBeforeChange": "b6af6dcd9d59b97edc4052f4f7dbcdc0b2982ddb", "commitAfterChange": "9d7258bf3ad30f4e44cac31c46a6f0a185b84bcd", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void place()", "signatureAfterChange": " public void place()", "diff": ["-\tif (CodeStream.DEBUG) System.out.println(\"\\t\\t\\t\\t<place at: \"+codeStream.position+\" - \"+ this); //$NON-NLS-1$ //$NON-NLS-2$", "+\tif (CodeStream.DEBUG) System.out.println(\"\\t\\t\\t\\t<place at: \"+this.codeStream.position+\" - \"+ this); //$NON-NLS-1$ //$NON-NLS-2$", "-\tif (position == POS_NOT_SET) {", "-\t\tif ((this.tagBits & USED) != 0 || this.forwardReferenceCount != 0) {", "-\t\t\tthis.position = codeStream.getPosition();", "+\tif (this.position == Label.POS_NOT_SET) {", "+\t\tif ((this.tagBits & BranchLabel.USED) != 0 || this.forwardReferenceCount != 0) {", "+\t\t\tthis.position = this.codeStream.getPosition();", "-\t\t\tthis.position = codeStream.position;", "+\t\t\tthis.position = this.codeStream.position;", "-\t\tcodeStream.addLabel(this);", "-\t\tint oldPosition = position;", "+\t\tthis.codeStream.addLabel(this);", "+\t\tint oldPosition = this.position;", "-\t\tif (forwardReferenceCount != 0) {", "-\t\t\tisOptimizedBranch = (forwardReferences[forwardReferenceCount - 1] + 2 == position) && (codeStream.bCodeStream[codeStream.classFileOffset - 3] == Opcodes.OPC_goto);", "+\t\tif (this.forwardReferenceCount != 0) {", "+\t\t\tisOptimizedBranch = (this.forwardReferences[this.forwardReferenceCount - 1] + 2 == this.position) && (this.codeStream.bCodeStream[this.codeStream.classFileOffset - 3] == Opcodes.OPC_goto);", "-\t\t\t\tcodeStream.position = (position -= 3);", "-\t\t\t\tcodeStream.classFileOffset -= 3;", "-\t\t\t\tforwardReferenceCount--;", "+\t\t\t\tthis.codeStream.position = (this.position -= 3);", "+\t\t\t\tthis.codeStream.classFileOffset -= 3;", "+\t\t\t\tthis.forwardReferenceCount--;", "-\t\t\t\tint index = codeStream.pcToSourceMapSize - 2;", "-\t\t\t\tif (codeStream.lastEntryPC == oldPosition) {", "-\t\t\t\t\tcodeStream.lastEntryPC = position;", "+\t\t\t\tint index = this.codeStream.pcToSourceMapSize - 2;", "+\t\t\t\tif (this.codeStream.lastEntryPC == oldPosition) {", "+\t\t\t\t\tthis.codeStream.lastEntryPC = this.position;", "-\t\t\t\tif ((index >= 0) && (codeStream.pcToSourceMap[index] == position)) {", "-\t\t\t\t\tcodeStream.pcToSourceMapSize-=2;", "+\t\t\t\tif ((index >= 0) && (this.codeStream.pcToSourceMap[index] == this.position)) {", "+\t\t\t\t\tthis.codeStream.pcToSourceMapSize-=2;", "-\t\t\t\tif ((codeStream.generateAttributes & ClassFileConstants.ATTR_VARS) != 0) {", "-\t\t\t\t\tLocalVariableBinding locals[] = codeStream.locals;", "+\t\t\t\tif ((this.codeStream.generateAttributes & ClassFileConstants.ATTR_VARS) != 0) {", "+\t\t\t\t\tLocalVariableBinding locals[] = this.codeStream.locals;", "-\t\t\t\t\t\t\t\tlocal.initializationPCs[((local.initializationCount - 1) << 1) + 1] = position;", "+\t\t\t\t\t\t\t\tlocal.initializationPCs[((local.initializationCount - 1) << 1) + 1] = this.position;", "-\t\t\t\t\t\t\t\tlocal.initializationPCs[(local.initializationCount - 1) << 1] = position;", "+\t\t\t\t\t\t\t\tlocal.initializationPCs[(local.initializationCount - 1) << 1] = this.position;", "-\t\tfor (int i = 0; i < forwardReferenceCount; i++) {", "-\t\t\tcodeStream.writePosition(this, forwardReferences[i]);", "+\t\tfor (int i = 0; i < this.forwardReferenceCount; i++) {", "+\t\t\tthis.codeStream.writePosition(this, this.forwardReferences[i]);"]}], "num": 54385}
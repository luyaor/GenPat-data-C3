{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cac717fbde1c6ab6dab419cc318ce1ca", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33aad36481081fec58d04d8eb245f110", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "e6d5c8658dcb2261d05af5cdc17c2490045274a2", "commitAfterChange": "860ea62c67f5396f6f9d3dd7b840bac85b92d32f", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["-\t\t\tTypeReference returnTypeRef = ((MethodDeclaration)methodDecl).returnType;", "-\t\t\tif (compilerOptions.sourceLevel < ClassFileConstants.JDK1_8) {", "-\t\t\t\tif (!this.scope.validateNullAnnotation(nullTagBits, returnTypeRef, methodDecl.annotations))", "-\t\t\t\t\tmethod.tagBits &= ~TagBits.AnnotationNullMASK;", "-\t\t\t} else {", "-\t\t\t\tif (nullTagBits != (method.returnType.tagBits & TagBits.AnnotationNullMASK)) {", "-\t\t\t\t\tif (!this.scope.validateNullAnnotation(nullTagBits, returnTypeRef, methodDecl.annotations)) {", "-\t\t\t\t\t\tmethod.returnType = method.returnType.unannotated();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// annotation was mistakenly associated to the method, create the annotated type now:", "-\t\t\t\t\t\tmethod.returnType = this.scope.environment().createAnnotatedType(method.returnType, nullTagBits);", "+\t\t\tif (nullTagBits != 0) {", "+\t\t\t\tTypeReference returnTypeRef = ((MethodDeclaration)methodDecl).returnType;", "+\t\t\t\tif (compilerOptions.sourceLevel < ClassFileConstants.JDK1_8) {", "+\t\t\t\t\tif (!this.scope.validateNullAnnotation(nullTagBits, returnTypeRef, methodDecl.annotations))", "+\t\t\t\t\t\tmethod.tagBits &= ~TagBits.AnnotationNullMASK;", "+\t\t\t\t} else {", "+\t\t\t\t\tif (nullTagBits != (method.returnType.tagBits & TagBits.AnnotationNullMASK)) {", "+\t\t\t\t\t\tif (!this.scope.validateNullAnnotation(nullTagBits, returnTypeRef, methodDecl.annotations)) {", "+\t\t\t\t\t\t\tmethod.returnType = method.returnType.unannotated();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// annotation was mistakenly associated to the method, create the annotated type now:", "+\t\t\t\t\t\t\tmethod.returnType = this.scope.environment().createAnnotatedType(method.returnType, nullTagBits);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tmethod.tagBits &= ~TagBits.AnnotationNullMASK;", "-\t\t\t\t\tmethod.tagBits &= ~TagBits.AnnotationNullMASK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "840e847aa4f5121bf47f14c988819b8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "a53da0027d2af09b928dca6fa330419b46afa0ca", "commitAfterChange": "792caf681810140ce615d98d3abfdde62639719c", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "signatureAfterChange": " public MethodBinding resolveTypesFor(MethodBinding method)", "diff": ["-\t\tif (compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\tif (!method.isConstructor()) {", "-\t\t\tif (nullTagBits != (method.returnType.tagBits & TagBits.AnnotationNullMASK)) {", "-\t\t\t\tTypeReference returnTypeRef = ((MethodDeclaration)methodDecl).returnType;", "-\t\t\t\tif (method.returnType.isBaseType()) {", "-\t\t\t\t\tif (method.returnType.id != TypeIds.T_void)  // type annotations are *always* illegal for 'void'", "-\t\t\t\t\t\tthis.scope.problemReporter().illegalAnnotationForBaseType(returnTypeRef, methodDecl.annotations, nullTagBits);", "-\t\t\t\t} else {", "-\t\t\t\t\t// annotation was mistakenly associated to the method, create the annotated type now:", "-\t\t\t\t\tmethod.returnType = this.scope.environment().pushAnnotationIntoType(method.returnType, returnTypeRef, nullTagBits);", "+\t\t\tTypeReference returnTypeRef = ((MethodDeclaration)methodDecl).returnType;", "+\t\t\tif (compilerOptions.sourceLevel < ClassFileConstants.JDK1_8) {", "+\t\t\t\tif (!this.scope.validateNullAnnotation(nullTagBits, returnTypeRef, methodDecl.annotations))", "+\t\t\t\t\tmethod.tagBits &= ~TagBits.AnnotationNullMASK;", "+\t\t\t} else {", "+\t\t\t\tif (nullTagBits != (method.returnType.tagBits & TagBits.AnnotationNullMASK)) {", "+\t\t\t\t\tif (!this.scope.validateNullAnnotation(nullTagBits, returnTypeRef, methodDecl.annotations)) {", "+\t\t\t\t\t\tmethod.returnType = method.returnType.unannotated();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// annotation was mistakenly associated to the method, create the annotated type now:", "+\t\t\t\t\t\tmethod.returnType = this.scope.environment().createAnnotatedType(method.returnType, nullTagBits);", "+\t\t\t\t\t}", "+\t\t\t\t\tmethod.tagBits &= ~TagBits.AnnotationNullMASK;", "-\t\t\t\tmethod.tagBits &= ~TagBits.AnnotationNullMASK;"]}], "num": 24782}
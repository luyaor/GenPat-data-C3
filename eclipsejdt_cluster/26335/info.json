{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "88dfcc0abfddaaf4ab705c8413b41888", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c44dbd5be04c5edfe439bd800d66c4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/DeclaredTypeImpl.java", "commitBeforeChange": "1a085f6923332d813470a8d5ddda1ced463837b2", "commitAfterChange": "ed6404d1b00fb0c4d7b0edc065f94f5cf30ee47f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@Override \tpublic List<? extends TypeMirror> getTypeArguments()", "signatureAfterChange": " \t@Override \tpublic List<? extends TypeMirror> getTypeArguments()", "diff": ["-\t\t//TODO: what should this method do for generic types, as opposed to parameterized types?", "-\t\t//E.g., class <T1> Foo {}, get the class as a type, what are its type arguments?", "-\t\tif (!binding.isParameterizedType()) {", "-\t\t\treturn Collections.emptyList();", "+\t\tif (binding.isParameterizedType()) {", "+\t\t\tParameterizedTypeBinding ptb = (ParameterizedTypeBinding)_binding;", "+\t\t\tList<TypeMirror> args = new ArrayList<TypeMirror>(ptb.arguments.length);", "+\t\t\tfor (TypeBinding arg : ptb.arguments) {", "+\t\t\t\targs.add(_env.getFactory().newTypeMirror(arg));", "+\t\t\t}", "+\t\t\treturn Collections.unmodifiableList(args);", "-\t\tParameterizedTypeBinding ptb = (ParameterizedTypeBinding)_binding;", "-\t\tList<TypeMirror> args = new ArrayList<TypeMirror>(ptb.arguments.length);", "-\t\tfor (TypeBinding arg : ptb.arguments) {", "-\t\t\targs.add(_env.getFactory().newTypeMirror(arg));", "+\t\tif (binding.isGenericType()) {", "+\t\t\tTypeVariableBinding[] typeVariables = binding.typeVariables();", "+\t\t\tList<TypeMirror> args = new ArrayList<TypeMirror>(typeVariables.length);", "+\t\t\tfor (TypeBinding arg : typeVariables) {", "+\t\t\t\targs.add(_env.getFactory().newTypeMirror(arg));", "+\t\t\t}", "+\t\t\treturn Collections.unmodifiableList(args);", "-\t\treturn Collections.unmodifiableList(args);", "+\t\treturn Collections.emptyList();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a47eef91418ad681606b39a1cfaf6dbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ErrorTypeImpl.java", "commitBeforeChange": "a209bfa947ecc1f9f7050d0d851a03f725813152", "commitAfterChange": "730caa252c0447802cd9dbe163cdf0f853f36524", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@Override \tpublic List<? extends TypeMirror> getTypeArguments()", "signatureAfterChange": "  \t@Override \tpublic List<? extends TypeMirror> getTypeArguments()", "diff": ["-\t */", "+\t\tReferenceBinding binding = (ReferenceBinding)_binding;", "+\t\tif (binding.isParameterizedType()) {", "+\t\t\tParameterizedTypeBinding ptb = (ParameterizedTypeBinding)_binding;", "+\t\t\tTypeBinding[] arguments = ptb.arguments;", "+\t\t\tint length = arguments == null ? 0 : arguments.length;", "+\t\t\tif (length == 0) return Collections.emptyList();", "+\t\t\tList<TypeMirror> args = new ArrayList<TypeMirror>(length);", "+\t\t\tfor (TypeBinding arg : arguments) {", "+\t\t\t\targs.add(_env.getFactory().newTypeMirror(arg));", "+\t\t\t}", "+\t\t\treturn Collections.unmodifiableList(args);", "+\t\t}", "+\t\tif (binding.isGenericType()) {", "+\t\t\tTypeVariableBinding[] typeVariables = binding.typeVariables();", "+\t\t\tList<TypeMirror> args = new ArrayList<TypeMirror>(typeVariables.length);", "+\t\t\tfor (TypeBinding arg : typeVariables) {", "+\t\t\t\targs.add(_env.getFactory().newTypeMirror(arg));", "+\t\t\t}", "+\t\t\treturn Collections.unmodifiableList(args);", "+\t\t}"]}], "num": 26335}
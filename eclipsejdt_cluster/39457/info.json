{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab1d5e815b203b4f3008591bcd984281", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10454a650eee1949a0fe74207089cad0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c87a79156f1dc9a83ba58914de459221d3943f61", "commitAfterChange": "1de8e2f6bc728cee690d70795383b83c1f0d652a", "methodNumberBeforeChange": 846, "methodNumberAfterChange": 846, "signatureBeforeChange": " public void test0825() throws Exception", "signatureAfterChange": " public void test0825() throws Exception", "diff": ["-\tString expectedOutput =", "+\tString expectedOutput = this.complianceLevel < ClassFileConstants.JDK1_8 ? ", "-\t\t\"        [pc: 0, pc: 45] local: t index: 1 type: T\\n\";", "+\t\t\"        [pc: 0, pc: 45] local: t index: 1 type: T\\n\" :", "+\t\t\t", "+\t\t\t\"  // Method descriptor #17 (Ljava/io/Serializable;)V\\n\" + ", "+\t\t\t\"  // Signature: (TT;)V\\n\" + ", "+\t\t\t\"  // Stack: 2, Locals: 5\\n\" + ", "+\t\t\t\"  void foo(java.io.Serializable t);\\n\" + ", "+\t\t\t\"     0  aload_1 [t]\\n\" + ", "+\t\t\t\"     1  checkcast java.lang.Runnable [20]\\n\" + ", "+\t\t\t\"     4  astore_2 [r1]\\n\" + ", "+\t\t\t\"     5  aload_0 [this]\\n\" + ", "+\t\t\t\"     6  ifnonnull 16\\n\" + ", "+\t\t\t\"     9  aload_1 [t]\\n\" + ", "+\t\t\t\"    10  checkcast java.lang.Runnable [20]\\n\" + ", "+\t\t\t\"    13  goto 20\\n\" + ", "+\t\t\t\"    16  aload_1 [t]\\n\" + ", "+\t\t\t\"    17  checkcast java.lang.Runnable [20]\\n\" + ", "+\t\t\t\"    20  astore_3 [r2]\\n\" + ", "+\t\t\t\"    21  aload_1 [t]\\n\" + ", "+\t\t\t\"    22  astore 4 [r3]\\n\" + ", "+\t\t\t\"    24  aload_0 [this]\\n\" + ", "+\t\t\t\"    25  aload_1 [t]\\n\" + ", "+\t\t\t\"    26  checkcast java.lang.Runnable [20]\\n\" + ", "+\t\t\t\"    29  invokevirtual X.bar(java.lang.Runnable) : void [22]\\n\" + ", "+\t\t\t\"    32  aload_0 [this]\\n\" + ", "+\t\t\t\"    33  aload_0 [this]\\n\" + ", "+\t\t\t\"    34  ifnonnull 44\\n\" + ", "+\t\t\t\"    37  aload_1 [t]\\n\" + ", "+\t\t\t\"    38  checkcast java.lang.Runnable [20]\\n\" + ", "+\t\t\t\"    41  goto 48\\n\" + ", "+\t\t\t\"    44  aload_1 [t]\\n\" + ", "+\t\t\t\"    45  checkcast java.lang.Runnable [20]\\n\" + ", "+\t\t\t\"    48  invokevirtual X.bar(java.lang.Runnable) : void [22]\\n\" + ", "+\t\t\t\"    51  aload_0 [this]\\n\" + ", "+\t\t\t\"    52  aload_1 [t]\\n\" + ", "+\t\t\t\"    53  invokevirtual X.bar(java.lang.Runnable) : void [22]\\n\" + ", "+\t\t\t\"    56  return\\n\" + ", "+\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\"        [pc: 0, line: 5]\\n\" + ", "+\t\t\t\"        [pc: 5, line: 6]\\n\" + ", "+\t\t\t\"        [pc: 21, line: 7]\\n\" + ", "+\t\t\t\"        [pc: 24, line: 9]\\n\" + ", "+\t\t\t\"        [pc: 32, line: 10]\\n\" + ", "+\t\t\t\"        [pc: 51, line: 11]\\n\" + ", "+\t\t\t\"        [pc: 56, line: 12]\\n\" + ", "+\t\t\t\"      Local variable table:\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 57] local: this index: 0 type: X\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 57] local: t index: 1 type: java.io.Serializable\\n\" + ", "+\t\t\t\"        [pc: 5, pc: 57] local: r1 index: 2 type: java.lang.Runnable\\n\" + ", "+\t\t\t\"        [pc: 21, pc: 57] local: r2 index: 3 type: java.lang.Runnable\\n\" + ", "+\t\t\t\"        [pc: 24, pc: 57] local: r3 index: 4 type: java.lang.Runnable\\n\" + ", "+\t\t\t\"      Local variable type table:\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 57] local: this index: 0 type: X<T,V>\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 57] local: t index: 1 type: T\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8adcbf6f9282547e5e5d0ad9e03b579", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java", "commitBeforeChange": "7b3309da9229750686e478a0bba24cf03c887fb9", "commitAfterChange": "e72851f7c02ccfbc91816922dcb863357cca4426", "methodNumberBeforeChange": 169, "methodNumberAfterChange": 169, "signatureBeforeChange": " public void test436542() throws Exception", "signatureAfterChange": " public void test436542() throws Exception", "diff": ["-\tString jreDirectory = Util.getJREDirectory();", "-\tString jfxJar = Util.toNativePath(jreDirectory + \"/lib/ext/jfxrt.jar\");", "-\t\t\t\"import javafx.collections.ListChangeListener;\\n\" + ", "-\t\t\t\"import javafx.collections.ObservableList;\\n\" + ", "-\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-\t\t\t\"\t\tSystem.out.println(\\\"Success\\\");\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "+\t\t\t\"    public static void main(String[] args) {\\n\" + ", "+\t\t\t\"        System.out.println(\\\"Success\\\");\\n\" + ", "+\t\t\t\"    }\\n\" + ", "-\t\t\t\"    /**\\n\" + ", "-\t\t\t\"     * \\\"Binds\\\" the destination list to the observable source list with a transformation function applied.\\n\" + ", "-\t\t\t\"     * Whenever the source list changes, the destination list is altered to match by applying\\n\" + ", "-\t\t\t\"     * the given function to each element in the source list.\\n\" + ", "-\t\t\t\"     */\\n\" + ", "-\t\t\t\"        dest.clear();\\n\" + ", "-\t\t\t\"            while (changes.next()) {\\n\" + ", "-\t\t\t\"                if (changes.wasPermutated() || changes.wasUpdated()) {\\n\" + ", "-\t\t\t\"                    // Same code for updated, replaced and permutation, just recalc the range:\\n\" + ", "-\t\t\t\"                    for (int i = changes.getFrom(); i < changes.getTo(); i++)\\n\" + ", "-\t\t\t\"                        dest.set(i, func.apply(src.get(i)));\\n\" + ", "-\t\t\t\"                } else {\\n\" + ", "-\t\t\t\"                    for (int i = 0; i < changes.getRemovedSize(); i++)\\n\" + ", "-\t\t\t\"                        dest.remove(changes.getFrom());\\n\" + ", "-\t\t\t\"                    for (int i = 0; i < changes.getAddedSubList().size();i++)\\n\" + ", "-\t\t\t\"                        dest.add(i + changes.getFrom(), func.apply(changes.getAddedSubList().get(i)));\\n\" + ", "-\t\t\t\"                }\\n\" + ", "-\t\t\t\"            }\\n\" + ", "+\t\t\t\"            for (int i = changes.getFrom(); i < changes.getTo(); i++)\\n\" + ", "+\t\t\t\"                dest.set(i, func.apply(src.get(i)));\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    public interface ObservableList<E> extends List<E> {\\n\" + ", "+\t\t\t\"        public void addListener(ListChangeListener<? super E> listener);\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    @FunctionalInterface\\n\" + ", "+\t\t\t\"    public interface ListChangeListener<E> {\\n\" + ", "+\t\t\t\"        public abstract static class Change<E> {\\n\" + ", "+\t\t\t\"            public abstract int getFrom();\\n\" + ", "+\t\t\t\"            public abstract int getTo();\\n\" + ", "+\t\t\t\"        }\\n\" + ", "+\t\t\t\"        public void onChanged(Change<? extends E> c);\\n\" + ", "-\t\tUtil.concatWithClassLibs(new String[]{jfxJar,OUTPUT_DIR}, false),", "+\t\tUtil.concatWithClassLibs(new String[]{OUTPUT_DIR}, false),"]}], "num": 39457}
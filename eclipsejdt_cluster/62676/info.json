{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1622b2127fbd3d4be8e18b7286cf2e4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18cb30f77c6b5699195382cf88f5f777", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic static void resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient)", "signatureAfterChange": " \tpublic static void resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient)", "diff": ["+\t// Method retained with original signature to satisfy reference from APT.", "+\tpublic static void resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient) {", "+\t\tresolveAnnotations(scope, sourceAnnotations, recipient, false);", "+\t}", "-\tpublic static void resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient) {", "-\t\t\t\t\tif ((packageBinding.tagBits & TagBits.AnnotationResolved) != 0) return;", "-\t\t\t\t\tif ((type.tagBits & TagBits.AnnotationResolved) != 0) return;", "-\t\t\t\t\tif ((method.tagBits & TagBits.AnnotationResolved) != 0) return;", "-\t\t\t\t\tif ((field.tagBits & TagBits.AnnotationResolved) != 0) return;", "-\t\t\t\t\tif ((local.tagBits & TagBits.AnnotationResolved) != 0) return;", "-\t\t\t\t\t// jsr308", "-\t\t\t\t\tReferenceBinding typeVariableBinding = (ReferenceBinding) recipient;", "-\t\t\t\t\tif ((typeVariableBinding.tagBits & TagBits.AnnotationResolved) != 0) return;", "-\t\t\t\t\ttypeVariableBinding.tagBits |= (TagBits.AnnotationResolved | TagBits.DeprecatedAnnotationResolved);", "-\t\t\t\t\tif (length > 0) {", "-\t\t\t\t\t\tannotations = new AnnotationBinding[length];", "-\t\t\t\t\t\ttypeVariableBinding.setAnnotations(annotations);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t\tReferenceBinding typeUseBinding = (ReferenceBinding) recipient;", "-\t\t\t\t\tif ((typeUseBinding.tagBits & TagBits.AnnotationResolved) != 0) return;", "-\t\t\t\t\ttypeUseBinding.tagBits |= (TagBits.AnnotationResolved | TagBits.DeprecatedAnnotationResolved);", "-\t\t\t\t\tif (length > 0) {", "-\t\t\t\t\t\tannotations = new AnnotationBinding[length];", "-\t\t\t\t\t\ttypeUseBinding.setAnnotations(annotations);", "-\t\t\t\t\t}", "-\t\t\t\t\treturn;", "-\t\t\treturn;", "-\t\t\t\treturn;", "-\t\tif (annotations != null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6caaf75903fe142fa0e61f9aa7527eb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "efd7cd38b35f875ede44936aed68717b93ca608e", "commitAfterChange": "e4adb79086f880599e097f61810ee53a81bdc035", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void resolveAnnotations( BlockScope scope, Annotation[] annotations, Binding recipient)", "signatureAfterChange": " \tpublic void resolveAnnotations(BlockScope scope, Annotation[] annotations, Binding recipient)", "diff": ["-\tpublic void resolveAnnotations( BlockScope scope, Annotation[] annotations, Binding recipient) {", "+\tpublic void resolveAnnotations(BlockScope scope, Annotation[] annotations, Binding recipient) {", "+\t\tif (recipient != null) {", "+\t\t\tswitch (recipient.kind()) {", "+\t\t\t\tcase Binding.PACKAGE :", "+\t\t\t\t\t// TODO (philippe) need support for package annotations", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Binding.TYPE :", "+\t\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\tReferenceBinding type = (ReferenceBinding) recipient;", "+\t\t\t\t\tif ((type.tagBits & TagBits.AnnotationResolved) != 0) return;", "+\t\t\t\t\ttype.tagBits |= TagBits.AnnotationResolved;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Binding.METHOD :", "+\t\t\t\t\tMethodBinding method = (MethodBinding) recipient;", "+\t\t\t\t\tif ((method.tagBits & TagBits.AnnotationResolved) != 0) return;", "+\t\t\t\t\tmethod.tagBits |= TagBits.AnnotationResolved;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Binding.FIELD :", "+\t\t\t\t\tFieldBinding field = (FieldBinding) recipient;", "+\t\t\t\t\tif ((field.tagBits & TagBits.AnnotationResolved) != 0) return;", "+\t\t\t\t\tfield.tagBits |= TagBits.AnnotationResolved;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Binding.LOCAL :", "+\t\t\t\t\tLocalVariableBinding local = (LocalVariableBinding) recipient;", "+\t\t\t\t\tif ((local.tagBits & TagBits.AnnotationResolved) != 0) return;", "+\t\t\t\t\tlocal.tagBits |= TagBits.AnnotationResolved;", "+\t\t\t\t\tbreak;", "+\t\t\t}\t\t\t", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3669bc73391ab40f2a6c237849f0a9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic static void resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient)", "signatureAfterChange": " \tpublic static AnnotationBinding [] resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient, boolean copySE8AnnotationsToType)", "diff": ["-\tpublic static void resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient) {", "+\tpublic static AnnotationBinding [] resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient, boolean copySE8AnnotationsToType) {", "-\t\t\t\t\tif ((packageBinding.tagBits & TagBits.AnnotationResolved) != 0) return;", "+\t\t\t\t\tif ((packageBinding.tagBits & TagBits.AnnotationResolved) != 0) return annotations;", "-\t\t\t\t\tif ((type.tagBits & TagBits.AnnotationResolved) != 0) return;", "+\t\t\t\t\tif ((type.tagBits & TagBits.AnnotationResolved) != 0) return annotations;", "-\t\t\t\t\tif ((method.tagBits & TagBits.AnnotationResolved) != 0) return;", "+\t\t\t\t\tif ((method.tagBits & TagBits.AnnotationResolved) != 0) return annotations;", "-\t\t\t\t\tif ((field.tagBits & TagBits.AnnotationResolved) != 0) return;", "+\t\t\t\t\tif ((field.tagBits & TagBits.AnnotationResolved) != 0) return annotations;", "-\t\t\t\t\tif ((local.tagBits & TagBits.AnnotationResolved) != 0) return;", "+\t\t\t\t\tif ((local.tagBits & TagBits.AnnotationResolved) != 0) return annotations;", "-\t\t\t\t\t// jsr308", "-\t\t\t\t\tReferenceBinding typeVariableBinding = (ReferenceBinding) recipient;", "-\t\t\t\t\tif ((typeVariableBinding.tagBits & TagBits.AnnotationResolved) != 0) return;", "-\t\t\t\t\ttypeVariableBinding.tagBits |= (TagBits.AnnotationResolved | TagBits.DeprecatedAnnotationResolved);", "-\t\t\t\t\tif (length > 0) {", "-\t\t\t\t\t\tannotations = new AnnotationBinding[length];", "-\t\t\t\t\t\ttypeVariableBinding.setAnnotations(annotations);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t\tReferenceBinding typeUseBinding = (ReferenceBinding) recipient;", "-\t\t\t\t\tif ((typeUseBinding.tagBits & TagBits.AnnotationResolved) != 0) return;", "-\t\t\t\t\ttypeUseBinding.tagBits |= (TagBits.AnnotationResolved | TagBits.DeprecatedAnnotationResolved);", "-\t\t\t\t\tif (length > 0) {", "-\t\t\t\t\t\tannotations = new AnnotationBinding[length];", "-\t\t\t\t\t\ttypeUseBinding.setAnnotations(annotations);", "-\t\t\t\t\t}", "+\t\t\t\t\t// deliberately don't set the annotation resolved tagbits, it is not material and also we are working with a dummy static object.", "+\t\t\t\t\tannotations = new AnnotationBinding[length];", "-\t\t\t\t\treturn;", "+\t\t\t\t\treturn annotations;", "-\t\t\treturn;", "+\t\t\treturn annotations;", "-\t\t\t\treturn;", "+\t\t\t\treturn annotations;", "+", "+\t\tif (copySE8AnnotationsToType)", "+\t\t\tcopySE8AnnotationsToType(scope, recipient, annotations);", "+\t\t", "-\t\tif (annotations != null) {", "+\t\tif (annotations != null && length > 1) {", "+\t\treturn annotations;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a766ab6d18d281a5422ff03d1ecc6cb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java", "commitBeforeChange": "1bd28947ec61a68bcbaa48e5f62a38f1082dad74", "commitAfterChange": "158f15ed7305b84f608a44b2b3e60c3a50fa4c1b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprivate static int computeNullProblemSeverity(long requiredBits, long providedBits, int nullStatus, boolean overrideDetailChecking)", "signatureAfterChange": " \tprivate static int computeNullProblemSeverity(long requiredBits, long providedBits, int nullStatus, CheckMode mode, boolean requiredIsTypeVariable)", "diff": ["-\tprivate static int computeNullProblemSeverity(long requiredBits, long providedBits, int nullStatus, boolean overrideDetailChecking) {", "-\t\t// nullStatus: ", "-\t\t// overrideDetailChecking: ", "-\t\tif ((requiredBits != 0 || overrideDetailChecking) && requiredBits != providedBits) {", "-\t\t\tif (requiredBits == TagBits.AnnotationNonNull && nullStatus == FlowInfo.NON_NULL) {", "-\t\t\t\treturn 0; // OK by flow analysis", "+\tprivate static int computeNullProblemSeverity(long requiredBits, long providedBits, int nullStatus, CheckMode mode, boolean requiredIsTypeVariable) {", "+\t\tif (requiredBits == providedBits)", "+\t\t\treturn 0;", "+\t\tif (requiredBits == 0) { ", "+\t\t\tswitch (mode) {", "+\t\t\t\tcase COMPATIBLE:", "+\t\t\t\tcase BOUND_CHECK:", "+\t\t\t\tcase EXACT:", "+\t\t\t\t\treturn 0;", "+\t\t\t\tcase OVERRIDE_RETURN:", "+\t\t\t\t\tif (providedBits == TagBits.AnnotationNonNull)", "+\t\t\t\t\t\treturn 0; // covariant redefinition to nonnull is good", "+\t\t\t\t\tif (!requiredIsTypeVariable)", "+\t\t\t\t\t\treturn 0; // refining an unconstrained non-TVB return to nullable is also legal", "+\t\t\t\t\treturn 1;", "+\t\t\t\tcase OVERRIDE:", "+\t\t\t\t\treturn 1; // warn about dropped annotation", "-\t\t\tif (requiredBits == TagBits.AnnotationNullMASK)", "-\t\t\t\treturn 0; // OK since LHS accepts either", "-\t\t\tif (nullStatus != -1 && !overrideDetailChecking && requiredBits == TagBits.AnnotationNullable)", "-\t\t\t\treturn 0; // when using flow info, everything is compatible to nullable", "-\t\t\tif (providedBits != 0) {", "-\t\t\t\treturn 2; // mismatching annotations", "-\t\t\t} else {", "-\t\t\t\treturn 1; // need unchecked conversion regarding type detail", "+\t\t} else if (requiredBits == TagBits.AnnotationNullMASK) {", "+\t\t\treturn 0; // OK since LHS accepts either", "+\t\t} else if (requiredBits == TagBits.AnnotationNonNull) {", "+\t\t\tswitch (mode) {", "+\t\t\t\tcase COMPATIBLE:", "+\t\t\t\t\tif (nullStatus == FlowInfo.NON_NULL)", "+\t\t\t\t\t\treturn 0; // OK by flow analysis", "+\t\t\t\t\t//$FALL-THROUGH$", "+\t\t\t\tcase BOUND_CHECK:", "+\t\t\t\tcase EXACT:", "+\t\t\t\tcase OVERRIDE_RETURN:", "+\t\t\t\tcase OVERRIDE:", "+\t\t\t\t\tif (providedBits == 0)", "+\t\t\t\t\t\treturn 1;", "+\t\t\t\t\treturn 2;", "+\t\t\t}", "+\t\t\t", "+\t\t} else if (requiredBits == TagBits.AnnotationNullable) {", "+\t\t\tswitch (mode) {", "+\t\t\t\tcase COMPATIBLE:", "+\t\t\t\tcase OVERRIDE_RETURN:", "+\t\t\t\t\treturn 0; // in these modes everything is compatible to nullable", "+\t\t\t\tcase BOUND_CHECK:", "+\t\t\t\tcase EXACT:", "+\t\t\t\t\tif (providedBits == 0)", "+\t\t\t\t\t\treturn 1;", "+\t\t\t\t\treturn 2;", "+\t\t\t\tcase OVERRIDE:", "+\t\t\t\t\treturn 2;", "-\t\treturn 0; // OK by tagBits", "+\t\treturn 0; // shouldn't get here, requiredBits should be one of the listed cases"]}], "num": 62676}
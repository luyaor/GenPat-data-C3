{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3921a45b888364d2232984efc00eafe", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3618574a85242bab9590d0f52af5d912", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementsImpl.java", "commitBeforeChange": "c7e13eb999aeeb70fd34b19df0f27a778109206c", "commitAfterChange": "ad2281f1520933e65d479408c685e1055d82a8b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t@Override \tpublic List<? extends AnnotationMirror> getAllAnnotationMirrors(Element e)", "signatureAfterChange": " \t@Override \tpublic List<? extends AnnotationMirror> getAllAnnotationMirrors(Element e)", "diff": ["-\t\t// TODO Auto-generated method stub", "-\t\treturn null;", "+\t\t// if e is a class, walk up its superclass hierarchy looking for @Inherited annotations not already in the list", "+\t\tif (e.getKind() == ElementKind.CLASS && e instanceof TypeElementImpl) {", "+\t\t\tList<AnnotationBinding> annotations = new ArrayList<AnnotationBinding>();", "+\t\t\t// A class can only have one annotation of a particular annotation type.", "+\t\t\tSet<ReferenceBinding> annotationTypes = new HashSet<ReferenceBinding>();", "+\t\t\tReferenceBinding binding = (ReferenceBinding)((TypeElementImpl)e)._binding;", "+\t\t\twhile (null != binding) {", "+\t\t\t\tfor (AnnotationBinding annotation : binding.getAnnotations()) {", "+\t\t\t\t\tReferenceBinding annotationType = annotation.getAnnotationType(); ", "+\t\t\t\t\tif (!annotationTypes.contains(annotationType)) {", "+\t\t\t\t\t\tannotationTypes.add(annotationType);", "+\t\t\t\t\t\tannotations.add(annotation);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbinding = binding.superclass();", "+\t\t\t}", "+\t\t\tList<AnnotationMirror> list = new ArrayList<AnnotationMirror>(annotations.size());", "+\t\t\tfor (AnnotationBinding annotation : annotations) {", "+\t\t\t\tlist.add(AnnotationMirrorImpl.getAnnotationMirror(annotation));", "+\t\t\t}", "+\t\t\treturn Collections.unmodifiableList(list);", "+\t\t}", "+\t\telse {", "+\t\t\treturn e.getAnnotationMirrors();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a713e91b66c9023a34eb4226a6e3127", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "a9567e58ade978b67e4f2db4ee5fe35bc3c0d3fe", "commitAfterChange": "0b6f06d77f121375ae3494c8c329aad2cfc0a1a4", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "  private void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding)", "signatureAfterChange": "  private void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding, ITypeAnnotationWalker externalAnnotationWalker)", "diff": ["-private void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding) {", "+private void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBinding, ITypeAnnotationWalker externalAnnotationWalker) {", "-\tIBinaryAnnotation[] annotations = method.getAnnotations();", "+\tITypeAnnotationWalker returnWalker = externalAnnotationWalker.toMethodReturn();", "+\tIBinaryAnnotation[] annotations = returnWalker != ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER", "+\t\t\t\t\t\t\t\t? returnWalker.getAnnotationsAtCursor(methodBinding.returnType.id)", "+\t\t\t\t\t\t\t\t: method.getAnnotations();", "-\tint numParamAnnotations = method.getAnnotatedParametersCount();", "+\tint numParamAnnotations = externalAnnotationWalker instanceof IMethodAnnotationWalker", "+\t\t\t\t\t\t\t? ((IMethodAnnotationWalker) externalAnnotationWalker).getParameterCount()", "+\t\t\t\t\t\t\t: method.getAnnotatedParametersCount();", "-\t\t\t\tIBinaryAnnotation[] paramAnnotations = method.getParameterAnnotations(j+startIndex);", "+\t\t\t\tITypeAnnotationWalker parameterWalker = externalAnnotationWalker.toMethodParameter((short) (j+startIndex));", "+\t\t\t\tIBinaryAnnotation[] paramAnnotations = parameterWalker != ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? parameterWalker.getAnnotationsAtCursor(parameters[j].id)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: method.getParameterAnnotations(j+startIndex);"]}], "num": 44893}
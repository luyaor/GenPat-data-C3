{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed6503eff23c0799dd164f616d2b1d99", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "045da4d1d9bbc6bbd85f4457c8489acb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "1ded2da000729e7cdd360328a6526d7c49da192c", "commitAfterChange": "e33d1d49197e74ff989373e5654ba4910b19fb1b", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tprivate static List getCalledFileNames(IPath jarPath)", "signatureAfterChange": "  \tprivate static List getCalledFileNames(IPath jarPath)", "diff": ["-\t\t\tmanager.closeZipFile(zip);", "+\t\t\tmanager.closeZipFile(zip);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07a55c884a839daa00ab5c496f004068", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "27ae7cc0d5a75c1449565f71fee06411744b67e7", "commitAfterChange": "8b72c02b9d94ae454655938a968c4cbea2e7dc9d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "diff": ["-\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08551fc82d6e4fef60a3e56b7e6c6100", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d8c14903c81b7c2ca516eae920d045e03057aeed", "commitAfterChange": "9b26efa81a6e381ed8487b9883db0ad019b470e0", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r \tpublic void locateMatches(String[] filePaths, IWorkspace workspace, IWorkingCopy[] workingCopies)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic void locateMatches(String[] filePaths, IWorkspace workspace, IWorkingCopy[] workingCopies)\r \t\tthrows JavaModelException", "diff": ["+\t\tthis.matchingOpenables = new MatchingOpenableSet();\r", "-\t\tthis.matchingOpenables = new MatchingOpenableSet();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b920a3d7c36b9253a054c39b00c6cc9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceSearchTests.java", "commitBeforeChange": "d9a97d862b475eea227de958d835b86e43eefc95", "commitAfterChange": "9dc138fb96cea4aeb4c94c79a989f9430d5afbc5", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void testSearchType() throws CoreException", "signatureAfterChange": " \tpublic void testSearchType() throws CoreException", "diff": ["+\t\t\tcleanCategoryTableCache(true);", "-\t\t\tcleanCategoryTableCache(true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d7be3c4d2676faf621e3e6bcaa5abbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "2155fa03c15013022e830dc67618de5331aede35", "commitAfterChange": "3d93a3582e0b56612624345e2a984196c3cab809", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected void tearDown() throws Exception", "signatureAfterChange": " \tprotected void tearDown() throws Exception", "diff": ["-\t\tsuper.tearDown();", "+\t\tsuper.tearDown();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e42ede3415ef1af089ea297cf392b1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "fe6848300377e2f320c70d2b17e483820c74fa24", "commitAfterChange": "309be04a155363e9f398875d6734d13ff5334b6c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprivate boolean connectSuperInterfaces()", "signatureAfterChange": " \tprivate boolean connectSuperInterfaces()", "diff": ["+\t\t\treferenceContext.superInterfaces[i].resolvedType = superInterface; // hold onto the problem type", "-\t\t\treferenceContext.superInterfaces[i].resolvedType = superInterface;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f9b57ee9b724b7fd9ee684eea1148e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/EncodingTests.java", "commitBeforeChange": "2155fa03c15013022e830dc67618de5331aede35", "commitAfterChange": "3d93a3582e0b56612624345e2a984196c3cab809", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected void tearDown() throws Exception", "signatureAfterChange": " \tprotected void tearDown() throws Exception", "diff": ["-\t\tsuper.tearDown();", "+\t\tsuper.tearDown();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ff43bc174918a586a80673d0195a2e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "627ddb655d5f70180ea3a2ef27ecd181e1d5ac35", "commitAfterChange": "04d819051e070452449b36147c93d87fec735bec", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\t\t\t\t\tinsideStaticContext |= (sourceType.modifiers & AccStatic) != 0; // not isStatic()", "+\t\t\t\t\t\tinsideStaticContext |= (sourceType.modifiers & AccStatic) != 0; // not isStatic()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10931da6345eed5c9d967ed7fd024a50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "97a51de589d597058f0699be9a25a3de27447184", "commitAfterChange": "326a07288a3ef3e0cf65a2989bbc3eaedba0442c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tint nullStatus = this.initialization.nullStatus(flowInfo);", "+\t", "+\tint nullStatus = this.initialization.nullStatus(flowInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1237d51f13c39a5d19808d017d8467e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "8110fc486d3702b464fac7cbd52796cfda9c4f57", "commitAfterChange": "eb0413d7c3f6c8377e410e116826fcfccbec3365", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tSourceTypeBinding buildType(SourceTypeBinding enclosingType, PackageBinding packageBinding, AccessRestriction accessRestriction)", "signatureAfterChange": "  \tSourceTypeBinding buildType(SourceTypeBinding enclosingType, PackageBinding packageBinding, AccessRestriction accessRestriction)", "diff": ["-\t\tsourceType.fPackage.addType(sourceType);", "-\t\tbuildTypeVariables();", "+\t\tbuildTypeVariables(); // do this before adding the type to avoid race: see https://bugs.eclipse.org/bugs/show_bug.cgi?id=428247", "+\t\tsourceType.fPackage.addType(sourceType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "129b8a2b0f1915d26f000313b4dec873", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "e370ba439679a26bb04e9b77917c8e22a1b8aa06", "commitAfterChange": "90d481edc9060cc498a8f085b08186108312e37b", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void testBug77093field() throws CoreException", "signatureAfterChange": " \tpublic void testBug77093field() throws CoreException", "diff": ["+\t\tdiscard = false; // keep working copies for next test (set before assertion as an error is raised...)", "-\t\t// keep working copies for next test", "-\t\tdiscard = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16182f0c20e5d5933ebcdd35bba274a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "a00b91e363390d5872f24709421a2a2b1249ea30", "commitAfterChange": "61bf91bb0112a7323235a8711e82564a6109221c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] allInheritedMethods)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] allInheritedMethods)", "diff": ["-\t\tif (!areReturnTypesEqual(currentMethod, inheritedMethod)) {", "-\t\t\tproblemReporter(currentMethod).incompatibleReturnType(currentMethod, inheritedMethod);", "-\t\t\tcontinue nextMethod;", "-\t\t}", "+\t\t// want to tag currentMethod even if return types are not equal", "+\t\t}", "+", "+\t\tif (!areReturnTypesEqual(currentMethod, inheritedMethod)) {", "+\t\t\tproblemReporter(currentMethod).incompatibleReturnType(currentMethod, inheritedMethod);", "+\t\t\tcontinue nextMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1666087758db6124b53c593a1a190d7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/TypesUtil.java", "commitBeforeChange": "ac3d830e6e8728fac5ab5382119bdddda1d9f7df", "commitAfterChange": "f6481dd9693bf03828e045ffe5a565f52edfa2f0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public boolean isAssignable(TypeMirror t1, TypeMirror t2)", "signatureAfterChange": "     public boolean isAssignable(TypeMirror t1, TypeMirror t2)", "diff": ["-        final ITypeBinding left = getTypeBinding(t1);", "-        final ITypeBinding right = getTypeBinding(t2);", "+        final ITypeBinding left = getTypeBinding(t2);", "+        final ITypeBinding right = getTypeBinding(t1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19d0d4b8d20410127a3fbc1b80a96eed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "89d83ae0eec856aa74d58eb28d7b8cc4840d3696", "commitAfterChange": "c0469eab51d719c9db50006771869e2887035ef3", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  \tprivate void formatTryResources( \t\t\tTryStatement tryStatement, \t\t\tboolean spaceBeforeOpenParen, \t\t\tboolean spaceBeforeClosingParen, \t\t\tboolean spaceBeforeFirstResource, \t\t\tboolean spaceBeforeSemicolon, \t\t\tboolean spaceAfterSemicolon, \t\t\tint tryResourcesAligment)", "signatureAfterChange": "  \tprivate void formatTryResources( \t\t\tTryStatement tryStatement, \t\t\tboolean spaceBeforeOpenParen, \t\t\tboolean spaceBeforeClosingParen, \t\t\tboolean spaceBeforeFirstResource, \t\t\tboolean spaceBeforeSemicolon, \t\t\tboolean spaceAfterSemicolon, \t\t\tint tryResourcesAligment)", "diff": ["+\t\t\t", "+\t\t\tthis.scribe.exitAlignment(resourcesAlignment, true);", "-\t\t\tthis.scribe.exitAlignment(resourcesAlignment, true);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19f87d2d9e86080ca856215e25762085", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "bed888bd269b2eda198b4adcd6f3a8b582afad18", "commitAfterChange": "6ec071ff72d783fa798d4c7ea86b2a2f7803e01d", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters, boolean checkForErasedCandidateCollisions)", "signatureAfterChange": " \t \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters, boolean checkForErasedCandidateCollisions)", "diff": ["-\t\tboolean noProblems = true;", "+\t\tboolean noProblems = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dcea8b98fcd2e4f4f4ee12fd7284dfd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SynchronizedStatement.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["+\t\tanyExceptionHandler.placeEnd();\r", "-\t\tanyExceptionHandler.placeEnd();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2264a306bbba85b97310bf18fa937dbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SynchronizedStatement.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tanyExceptionHandler.placeEnd();\r", "+\t\tanyExceptionHandler.placeEnd();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "253f5e51b72a8ffc225666573dbff224", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "86f645815a69c74363c1ce2a11b4929925acd2dd", "commitAfterChange": "2c7188c2cc54fb87a64d770ede4d437b19568fed", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public boolean equals(Object o)", "signatureAfterChange": "\r public boolean equals(Object o)", "diff": ["+\t\r", "+\tif (this == o) return true;\r", "+\r", "+\t// Java model parent is null\r", "-\tif (this == o)\r", "-\t\treturn true;\r", "+\r", "-\t\tif (fLEType != other.fLEType)\r", "-\t\t\treturn false;\r", "+\t\tif (fLEType != other.fLEType) return false;\r", "+\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27723d7f0a9ba096cbf53f5cdfae4d8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeParameter.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tfinal List internalGetChildListProperty(ChildListPropertyDescriptor property)", "signatureAfterChange": " \tfinal List internalGetChildListProperty(ChildListPropertyDescriptor property)", "diff": ["-\t\tif (property == TYPE_BOUNDS_PROPERTY) {", "-\t\t\treturn typeBounds();", "-\t\t}", "+\t\t}", "+\t\tif (property == TYPE_BOUNDS_PROPERTY) {", "+\t\t\treturn typeBounds();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29e15bd70294fddd35bc9e1badcd5962", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "a9b0af654441b80a7093e950f5847011bce06409", "commitAfterChange": "8a785b2ab9acca1d8904bb2e02058a21a24edd69", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "\t\r \r \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "signatureAfterChange": "\t\r \r \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "diff": ["+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.CastExpression) {\r", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.CastExpression) expression);\r", "+\t\t}\r", "-\t\t}\r", "-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.CastExpression) {\r", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.CastExpression) expression);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ee4be53439d0c2ba5454b551125e6a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DoStatement.java", "commitBeforeChange": "0325089db3ca0a8e6a36752438c4d3b535f031b0", "commitAfterChange": "2c5129ccdeb3bec0116f7310eb4a5f7c456e0788", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tASTNode clone0(AST target)", "signatureAfterChange": " \tASTNode clone0(AST target)", "diff": ["-\t\tresult.setExpression((Expression) getExpression().clone(target));", "+\t\tresult.setExpression((Expression) getExpression().clone(target));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f6df89985b2295a152e6d00644593e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "874cc60b34062d184abafc157c764e3af128769a", "commitAfterChange": "946979c8e5ddaa5ee72e6c4a1d2d619fb28b1d8f", "methodNumberBeforeChange": 236, "methodNumberAfterChange": 236, "signatureBeforeChange": " \tprotected void touch(File f)", "signatureAfterChange": " \tprotected void touch(File f)", "diff": ["-\t\tf.setLastModified(lastModified + time);", "+\t\tf.setLastModified(lastModified + time);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "325424884c9e4895d57f4426a1fbc304", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "003be96afe3e01a7b13a9dd99dd645e02db053e5", "commitAfterChange": "89b5443004d9ddbeb89e7694fbe0c5e6bd87d8cd", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void completionIdentifierCheck()", "signatureAfterChange": " public void completionIdentifierCheck()", "diff": ["-", "-\tif (checkKeyword()) return;", "+\t", "+\tif (checkKeyword()) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35b32b420925dcf034b3d116577de373", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "8f261bb6c49278e86707910a4be5450c713c940a", "commitAfterChange": "b5977e771dcaa856815c805c4cdc6cf2a2c18650", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tif (FakedTrackingVariable.isAnyCloseable(this.resolvedType))", "-\t\tFakedTrackingVariable.analyseCloseableAllocation(currentScope, flowInfo, this);", "-", "+", "+\t// after having analysed exceptions above start tracking newly allocated resource:", "+\tif (FakedTrackingVariable.isAnyCloseable(this.resolvedType))", "+\t\tFakedTrackingVariable.analyseCloseableAllocation(currentScope, flowInfo, this);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36b1a99995654c32d027474b49d9a57f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java", "commitBeforeChange": "07efa537488d0df9da9dc6880afc536aaccc6b60", "commitAfterChange": "004dbdfe97c4edd7611fb5b108326e4d3f2665ed", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic CaptureBinding(WildcardBinding wildcard, ReferenceBinding sourceType, int start, int end, ASTNode cud, int captureID)", "signatureAfterChange": "  \tpublic CaptureBinding(WildcardBinding wildcard, ReferenceBinding sourceType, int start, int end, ASTNode cud, int captureID)", "diff": ["+\t\tthis.cud = cud;", "-\t\tthis.cud = cud;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d4b506c27456a0379978393f8230fa6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "11ac720cf12c89391a32ed5e56750070174f7f3f", "commitAfterChange": "c35f48a470f9475e0b73c6c14c2a26ca2378ab58", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["+\t\t", "+\t\tthis.scope = new MethodScope(blockScope, this, blockScope.methodScope().isStatic);", "+\t\t", "-\t\tthis.scope = new MethodScope(blockScope, this, blockScope.methodScope().isStatic);", "-\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ee2188f9b636ea74bc54af8feb19416", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "3749ab08b3bcc9564a3496ebb9f23e5b7abd23aa", "commitAfterChange": "4a23c9efea3c3cfbb8a860d4cd8de9b8a033b86a", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\t", "+", "+\t\tif (this.log != null) {", "+\t\t\tthis.logger.setLog(this.log);", "+\t\t} else {", "+\t\t\tthis.showProgress = false;", "+\t\t}", "+\t\t", "-\t\t}", "-", "-\t\tif (this.log != null) {", "-\t\t\tthis.logger.setLog(this.log);", "-\t\t} else {", "-\t\t\tthis.showProgress = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42c474c4220c2c0a924bf6eb5215e052", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java", "commitBeforeChange": "9286ce5f956aa28fecddfe609c2ffd5cc46ab296", "commitAfterChange": "601f6f43e24c9e577aefb1f0ce7010026c8d8bfc", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t public int getPosition(int line, int column)", "signatureAfterChange": " \t public int getPosition(int line, int column)", "diff": ["-\t\tif (line < 1 || column < 0) return -1;", "+\t\tif (line < 1 || column < 0) return -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4533e70156ab65a92c24779c641e2c02", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceSearchTests.java", "commitBeforeChange": "d9a97d862b475eea227de958d835b86e43eefc95", "commitAfterChange": "9dc138fb96cea4aeb4c94c79a989f9430d5afbc5", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void testSearchMethod() throws CoreException", "signatureAfterChange": " \tpublic void testSearchMethod() throws CoreException", "diff": ["+\t\t\tcleanCategoryTableCache(false);", "-\t\t\tcleanCategoryTableCache(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45ed9617c6a93eb154dd78e421d2c7d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "37aa527155ee399f14a5b46390fd96425cd9d43d", "commitAfterChange": "ff32bc5829560a3f153bd89ee06d768d54a7ac92", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tIClassFile classFile, \t\tboolean resolveBindings)", "signatureAfterChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tIClassFile classFile, \t\tboolean resolveBindings)", "diff": ["+\t\t\tsource = sourceString.toCharArray();", "-\t\t\t", "-\t\t\tsource = sourceString.toCharArray();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47641a6268973bebc669788e67e2c129", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "6136184df5d87b2fe6ebeec9fd9dcf39b1b92cb1", "commitAfterChange": "0c80d88773ddbe1e035accca9dfc037266a710bf", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprotected void beginToCompile(ICompilationUnit[] sourceUnits)", "signatureAfterChange": " \tprotected void beginToCompile(ICompilationUnit[] sourceUnits)", "diff": ["-\t\t\t\t// diet parsing for large collection of units", "-\t\t\t\tif (totalUnits < parseThreshold) {", "-\t\t\t\t\tparsedUnit = parser.parse(sourceUnits[i], unitResult);", "-\t\t\t\t} else {", "-\t\t\t\t\tparsedUnit = parser.dietParse(sourceUnits[i], unitResult);", "-\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t// diet parsing for large collection of units", "+\t\t\t\tif (totalUnits < parseThreshold) {", "+\t\t\t\t\tparsedUnit = parser.parse(sourceUnits[i], unitResult);", "+\t\t\t\t} else {", "+\t\t\t\t\tparsedUnit = parser.dietParse(sourceUnits[i], unitResult);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "482ad6478a43c56b58eb6bd42e2dec14", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java", "commitBeforeChange": "0c59f9c3ba7a1cb9a13e48af1e5d84264af1e2a0", "commitAfterChange": "d8a539709790dbd29881eb5e4b39de17e0cca9ee", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tpublic void consumeTopLevelType()", "signatureAfterChange": " \t \tpublic void consumeTopLevelType()", "diff": ["-\t\tthis.parsedUnit = getCompilationUnitDeclaration();", "-\t\tif (this.parsedUnit != null && this.compiler != null) {", "-\t\t\tthis.compiler.process(this.parsedUnit, this.compiler.totalUnits+1); // noop if unit has already been resolved", "-\t\t}", "+\t\t}", "+\t\tthis.parsedUnit = getCompilationUnitDeclaration();", "+\t\tif (this.parsedUnit != null && this.compiler != null) {", "+\t\t\tthis.compiler.process(this.parsedUnit, this.compiler.totalUnits+1); // noop if unit has already been resolved"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49e674d15c3b6acb93ec382d70084c39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "16be4e18c433c782d20d23e55162bdd2a0750e51", "commitAfterChange": "a31d7e7b4abbe224ab4fbe696a3874733e052cdb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic int getSeverity(long irritant)", "signatureAfterChange": " \t \tpublic int getSeverity(long irritant)", "diff": ["-\t\tif((this.warningThreshold & irritant) != 0)", "-\t\t\treturn Warning;", "+\t\tif((this.warningThreshold & irritant) != 0)", "+\t\t\treturn Warning;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c2a2da5aea8af10d855b7cf573f9ec0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/diagnose/DiagnoseParser.java", "commitBeforeChange": "5fa6afe954089094ae8cca4de90fd35757e48b64", "commitAfterChange": "ae67359ba1af0f32a3cb74678feaffc1673aa2c9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate RepairCandidate primaryDiagnosis(PrimaryRepairInfo repair)", "signatureAfterChange": " \tprivate RepairCandidate primaryDiagnosis(PrimaryRepairInfo repair)", "diff": ["-\t\tRepairCandidate candidate = new RepairCandidate();", "-", "+\t\tRepairCandidate candidate = new RepairCandidate();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f8084fab77362acd3cb4c258e31d277", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "0e8f98a8a3453c077ed450b22ff93b42db68b86d", "commitAfterChange": "cd3f3928f61bcc10f6e8abf0177c7fb85c1c60b9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["+\t\t// even if not reachable, variable must be added to visible if allocated (28298)", "+\t\tif (binding.resolvedPosition != -1) {", "+\t\t\tcodeStream.addVisibleLocalVariable(binding);", "+\t\t}", "+", "-\t\tif (binding.resolvedPosition != -1) {", "-\t\t\tcodeStream.addVisibleLocalVariable(binding);", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fa5570ad4757f0b21cbe1185b7127f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "d81e6de27221b2caec858658787abf55d91a925e", "commitAfterChange": "cfb9e308b9934bc0d4a17e2d4604db46f20af164", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic boolean reduceOneConstraint(InferenceContext18 context, ConstraintFormula currentConstraint) throws InferenceFailureException", "signatureAfterChange": " \tpublic boolean reduceOneConstraint(InferenceContext18 context, ConstraintFormula currentConstraint) throws InferenceFailureException", "diff": ["-\t\tif (result == currentConstraint) {", "-\t\t\t// not reduceable", "-\t\t\tthrow new IllegalStateException(\"Failed to reduce constraint formula\"); //$NON-NLS-1$", "-\t\t}", "+\t\tif (result == currentConstraint) {", "+\t\t\t// not reduceable", "+\t\t\tthrow new IllegalStateException(\"Failed to reduce constraint formula\"); //$NON-NLS-1$", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51ed2bd39b911d719614f50aabce9154", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "af7c555b94268663ad75bc44adea174c67a820bf", "commitAfterChange": "5f14954289dcfe3aa64cd723a9ea9807dea33e05", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  \tpublic AssertStatement convert(org.eclipse.jdt.internal.compiler.ast.AssertStatement statement)", "signatureAfterChange": "  \tpublic AssertStatement convert(org.eclipse.jdt.internal.compiler.ast.AssertStatement statement)", "diff": ["-\t\tassertStatement.setExpression(convert(statement.assertExpression));", "+\t\tassertStatement.setExpression(convert(statement.assertExpression));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "575d1b9c51051cbd828ac0dbc0e7cb16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeMethodReference.java", "commitBeforeChange": "1534c3fb9312be746c807d9f0aa370d7a2598284", "commitAfterChange": "f9b5a54e0afa9af686e707bcc0c484de0728c860", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tASTNode clone0(AST target)", "signatureAfterChange": " \tASTNode clone0(AST target)", "diff": ["-\t\tresult.setName((SimpleName) getName().clone(target));", "-\t\tresult.setType(", "-\t\t\t(Type) ASTNode.copySubtree(target, getType()));", "+\t\tresult.setType((Type) ASTNode.copySubtree(target, getType()));", "+\t\tresult.setName((SimpleName) getName().clone(target));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ab4c803678f60bb66c3a89883ccb157", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "6136184df5d87b2fe6ebeec9fd9dcf39b1b92cb1", "commitAfterChange": "0c80d88773ddbe1e035accca9dfc037266a710bf", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void accept(ICompilationUnit sourceUnit)", "signatureAfterChange": " \tpublic void accept(ICompilationUnit sourceUnit)", "diff": ["-\t\t\t// diet parsing for large collection of unit", "-\t\t\tCompilationUnitDeclaration parsedUnit;", "-\t\t\tif (totalUnits < parseThreshold) {", "-\t\t\t\tparsedUnit = parser.parse(sourceUnit, unitResult);", "-\t\t\t} else {", "-\t\t\t\tparsedUnit = parser.dietParse(sourceUnit, unitResult);", "-\t\t\t}", "-", "-", "+\t\t\t// diet parsing for large collection of unit", "+\t\t\tCompilationUnitDeclaration parsedUnit;", "+\t\t\tif (totalUnits < parseThreshold) {", "+\t\t\t\tparsedUnit = parser.parse(sourceUnit, unitResult);", "+\t\t\t} else {", "+\t\t\t\tparsedUnit = parser.dietParse(sourceUnit, unitResult);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f23099f6f8b33d2751974fdc9ec51d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchJavadocTests.java", "commitBeforeChange": "2155fa03c15013022e830dc67618de5331aede35", "commitAfterChange": "3d93a3582e0b56612624345e2a984196c3cab809", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void tearDown() throws Exception", "signatureAfterChange": " \tpublic void tearDown() throws Exception", "diff": ["-\t\tsuper.tearDown();", "+\t\tsuper.tearDown();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6368b82adae24948e61f3fe52efcf02d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SortElementBuilder.java", "commitBeforeChange": "4465584ee152e94b2e2942c184ba61da56e8439d", "commitAfterChange": "c2118a83671afe9d2431785a26a0695ce14cd1b6", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 39, "signatureBeforeChange": " \t\tprotected void generateSource(StringBuffer buffer)", "signatureAfterChange": " \t\tprotected void generateSource(StringBuffer buffer)", "diff": ["+\t\t\tint start = this.sourceStart;", "-\t\t\t\tint start = this.sourceStart;", "-\t\t\t\t", "-\t\t\t\tbuffer.append(SortElementBuilder.this.source, this.sourceStart, this.sourceEnd - this.sourceStart + 1);", "+\t\t\t\tbuffer.append(SortElementBuilder.this.source, start, this.sourceEnd - start + 1);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63acc8770352317060946cac4a60ba75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "e370ba439679a26bb04e9b77917c8e22a1b8aa06", "commitAfterChange": "90d481edc9060cc498a8f085b08186108312e37b", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic void testBug80194b() throws CoreException, JavaModelException", "signatureAfterChange": " \tpublic void testBug80194b() throws CoreException, JavaModelException", "diff": ["+\t\tdiscard = false; // keep working copies for next test (set before assertion as an error is raised...)", "-\t\t// keep working copies for next test", "-\t\tdiscard = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6602dbf8cf1891e06f48a34ef9235c6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "12f65faa0a3b984e9751d243a3eab6e6ab078ed7", "commitAfterChange": "36d2cf066100445cbe45dd4cf851204404f7d76f", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tprotected boolean verifySpaceOrEndComment()", "signatureAfterChange": " \tprotected boolean verifySpaceOrEndComment()", "diff": ["+\t\tthis.starPosition = -1;", "-\t\tthis.starPosition = -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67b4dc1b75bfcc2f78656090b4a1edbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SynchronizedStatement.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tanyExceptionHandler.placeEnd();\r", "+\t\tanyExceptionHandler.placeEnd();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67d2d03b533cf7cc84483658eaddcfaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "bf1b15113f19bebe8799f253fba2c98750e6b32c", "commitAfterChange": "1220684fee44e314e3c5a7823de6ca64a2e43d98", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tprivate void runTest( \t\t\tboolean shouldFlushOutputDirectory,  \t\t\tString[] testFiles, \t\t\tString[] classLibraries, \t\t\tMap customOptions, \t\t\tboolean performStatementsRecovery, \t\t\tICompilerRequestor customRequestor, \t\t\tboolean expectingCompilerErrors, \t\t\tString expectedCompilerLog, \t\t\tboolean forceExecution, \t\t\tString[] vmArguments, \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tJavacTestOptions javacTestOptions)", "signatureAfterChange": " \tprivate void runTest( \t\t\tboolean shouldFlushOutputDirectory,  \t\t\tString[] testFiles, \t\t\tString[] classLibraries, \t\t\tMap customOptions, \t\t\tboolean performStatementsRecovery, \t\t\tICompilerRequestor customRequestor, \t\t\tboolean expectingCompilerErrors, \t\t\tString expectedCompilerLog, \t\t\tboolean forceExecution, \t\t\tString[] vmArguments, \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tJavacTestOptions javacTestOptions)", "diff": ["+\t\t\tif (expectedCompilerLog != null) {", "+\t\t\t\tcheckCompilerLog(testFiles, requestor, ", "+\t\t\t\t\t\tUtil.convertToIndependantLineDelimiter(expectedCompilerLog), exception);", "+\t\t\t}", "-\t\t\t}", "-\t\t\tif (expectedCompilerLog != null) {", "-\t\t\t\tcheckCompilerLog(testFiles, requestor, ", "-\t\t\t\t\t\tUtil.convertToIndependantLineDelimiter(expectedCompilerLog), exception);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6892e9f0e7d9dbb59fa9bda2a1e92394", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "c8e7a959ceee9c2fcd5e69703c49273f43d8f66e", "commitAfterChange": "6c4672b1e2a9f0f79cc6133dda1f6a85c52a7092", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\tflowContext.recordUsingNullReference(currentScope, local,", "-\t\t\tthis.expression, FlowContext.CAN_ONLY_NULL | FlowContext.IN_INSTANCEOF, flowInfo);", "+\t\tflowContext.recordUsingNullReference(currentScope, local,", "+\t\t\t\tthis.expression, FlowContext.CAN_ONLY_NULL | FlowContext.IN_INSTANCEOF, flowInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68f8a2b5e11aaba038fa82bce98d803c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DoStatement.java", "commitBeforeChange": "f1f25c6cdf998a1ec590849c8e88206d0ec0f3ca", "commitAfterChange": "11bdf7ee83fa535bb4e922a4f202eec91a5eb529", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tASTNode clone0(AST target)", "signatureAfterChange": " \tASTNode clone0(AST target)", "diff": ["-\t\tresult.setExpression((Expression) getExpression().clone(target));", "+\t\tresult.setExpression((Expression) getExpression().clone(target));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c0d7b7cc60670df9d3bcbf3d640c35f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "53a88facba099a7ef05d98b75f25800af60438f8", "commitAfterChange": "086132dd6f6e6011785d8d9b469716062157a8c1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic ParameterizedTypeBinding(ReferenceBinding type, TypeBinding[] arguments,  ReferenceBinding enclosingType, LookupEnvironment environment)", "signatureAfterChange": " \t \tpublic ParameterizedTypeBinding(ReferenceBinding type, TypeBinding[] arguments,  ReferenceBinding enclosingType, LookupEnvironment environment)", "diff": ["-\t\tinitialize(type, arguments);", "-", "+\t\tinitialize(type, arguments);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d0f104daab5e4a45bec4484b5200f69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "e370ba439679a26bb04e9b77917c8e22a1b8aa06", "commitAfterChange": "90d481edc9060cc498a8f085b08186108312e37b", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void testBug80194() throws CoreException, JavaModelException", "signatureAfterChange": " \tpublic void testBug80194() throws CoreException, JavaModelException", "diff": ["+\t\tdiscard = false; // keep working copies for next test (set before assertion as an error is raised...)", "-\t\t// keep working copies for next test", "-\t\tdiscard = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d219b2f9a60f850323e2e54a13d7ded", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "269b55d9c218da20e67d75b452dd2f783b531eb9", "commitAfterChange": "1d6e20589eb2c320b635a426436ba91447b2279a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic final void addLocalType(TypeDeclaration localType)", "signatureAfterChange": " \tpublic final void addLocalType(TypeDeclaration localType)", "diff": ["-\t\tlocalTypeScope.buildLocalTypeBinding(enclosingSourceType());", "+\t\tlocalTypeScope.buildLocalTypeBinding(enclosingSourceType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fba6c8aeeff5cac800ac1249755a3d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "2023e53bbac2c330e32a3d9731b6b6b7eac687fd", "commitAfterChange": "31634350462d61974f08f918d94943937dad97ef", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void tearDownSuite() throws Exception", "signatureAfterChange": " public void tearDownSuite() throws Exception", "diff": ["-\tdeleteProject(\"Completion\");", "-\t", "-}", "+\tdeleteProject(\"Completion\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "719087c643df8dbc8579234e1e5fca7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "97a51de589d597058f0699be9a25a3de27447184", "commitAfterChange": "326a07288a3ef3e0cf65a2989bbc3eaedba0442c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\tflowInfo = ((Reference) this.lhs)", "+\t\t.analyseAssignment(currentScope, flowContext, flowInfo, this, false)", "+\t\t.unconditionalInits();", "-\tflowInfo = ((Reference) this.lhs)", "-\t\t.analyseAssignment(currentScope, flowContext, flowInfo, this, false)", "-\t\t.unconditionalInits();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7201c27137887a62889aa1555f93e198", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/KeyToSignature.java", "commitBeforeChange": "74187a49cf531f40f8b8fafd3f5db01750edef2a", "commitAfterChange": "e97cd8427512cb2f404b285abbed5b5911965a1d", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void consumeType()", "signatureAfterChange": "  \tpublic void consumeType()", "diff": ["+\t\t// remove main type if needed", "+\t\tif (this.mainTypeStart != -1) {", "+\t\t\tthis.signature.replace(this.mainTypeStart, this.mainTypeEnd, \"\"); //$NON-NLS-1$", "+\t\t}", "+\t\t// parameter types", "-\t\t}", "-\t\t// remove main type if needed", "-\t\tif (this.mainTypeStart != -1) {", "-\t\t\tthis.signature.replace(this.mainTypeStart, this.mainTypeEnd, \"\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74966acd9e05f9bad03775d751b00bbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SynchronizedStatement.java", "commitBeforeChange": "e3cfcbaf3c297a99f46e0dadaf0744c04cccd764", "commitAfterChange": "60e138d2828b37f2615e0cced57acea3adb47644", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tanyExceptionHandler.placeEnd();\r", "+\t\tanyExceptionHandler.placeEnd();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7589e07f2205ba2287581cd3c301e3ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "36af4ca0b413cc401b0bc4442925b5f641f8df7a", "commitAfterChange": "15070dfb720141f260eff9f86b3742c51648d5f0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tvoid computeLocalVariablePositions(int ilocal, int initOffset, CodeStream codeStream)", "signatureAfterChange": " \tvoid computeLocalVariablePositions(int ilocal, int initOffset, CodeStream codeStream)", "diff": ["-\t\t\t\t\tif (this.offset > 0xFFFF) { // no more than 65535 words of locals", "-\t\t\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForLocal(", "-\t\t\t\t\t\t\tlocal, ", "-\t\t\t\t\t\t\tlocal.declaration == null ? (AstNode)this.methodScope().referenceContext : local.declaration);", "-\t\t\t\t\t}", "+\t\t\t\t\tif (this.offset > 0xFFFF) { // no more than 65535 words of locals", "+\t\t\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForLocal(", "+\t\t\t\t\t\t\tlocal, ", "+\t\t\t\t\t\t\tlocal.declaration == null ? (AstNode)this.methodScope().referenceContext : local.declaration);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "768cf8453959596221ec1b5743870380", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "6f8419ff850f25167775793977c62e26753f7b73", "commitAfterChange": "313806b679a08e224bfc85bce54d6a7446429fdf", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " SimpleLookupTable storedAnnotations(boolean forceInitialize)", "signatureAfterChange": " SimpleLookupTable storedAnnotations(boolean forceInitialize)", "diff": ["+\t\tthis.scope.referenceCompilationUnit().compilationResult.hasAnnotations = true;", "-\t\tthis.scope.referenceCompilationUnit().compilationResult.hasAnnotations = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76b75d2f8b1206d050cb6699a7fae6e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "0abc5991649d217d60e0dbaedd322f59da733d11", "commitAfterChange": "1f772b85e08506c308a2e69fd9666a4343f9cf1d", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void startMeasuring()", "signatureAfterChange": " \tpublic void startMeasuring()", "diff": ["-\t\tsuper.startMeasuring();", "+\t\tsuper.startMeasuring();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7750a350b3801efda6b7ca1a8e8a0623", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "a7da40a1a62439fc4b1ece4f5221022e1778c205", "commitAfterChange": "0ad2415ee4f1a2517a3e261113b08f2dfc4514f8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": "   \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["-        if (this.bootclasspath != null) {", "+\t\tif (this.bootclasspath != null) {", "-        \tif (this.bootclasspath.size() != 0) {", "-    \t\t\t/*", "-    \t\t\t * Set the bootclasspath for the Eclipse compiler.", "-    \t\t\t */", "-    \t\t\tcmd.createArgument().setPath(this.bootclasspath);", "-        \t} else {", "-    \t\t\tcmd.createArgument().setValue(Util.EMPTY_STRING);", "-        \t}", "-        }", "+\t\t\tif (this.bootclasspath.size() != 0) {", "+\t\t\t\t/*", "+\t\t\t\t * Set the bootclasspath for the Eclipse compiler.", "+\t\t\t\t */", "+\t\t\t\tcmd.createArgument().setPath(this.bootclasspath);", "+\t\t\t} else {", "+\t\t\t\tcmd.createArgument().setValue(Util.EMPTY_STRING);", "+\t\t\t}", "+\t\t}", "-        Path classpath = new Path(this.project);", "+\t\tPath classpath = new Path(this.project);", "-       /*", "-         * Eclipse compiler doesn't support -extdirs.", "-         * It is emulated using the classpath. We add extdirs entries after the", "-         * bootclasspath.", "-         */", "-        if (this.extdirs != null) {", "+\t\t/*", "+\t\t * Eclipse compiler doesn't support -extdirs.", "+\t\t * It is emulated using the classpath. We add extdirs entries after the", "+\t\t * bootclasspath.", "+\t\t */", "+\t\tif (this.extdirs != null) {", "-        }", "+\t\t}", "-        classpath.append(getCompileClasspath());", "+\t\tclasspath.append(getCompileClasspath());", "-        // For -sourcepath, use the \"sourcepath\" value if present.", "-        // Otherwise default to the \"srcdir\" value.", "-        Path sourcepath = null;", "+\t\t// For -sourcepath, use the \"sourcepath\" value if present.", "+\t\t// Otherwise default to the \"srcdir\" value.", "+\t\tPath sourcepath = null;", "-        // retrieve the method getSourcepath() using reflect", "-        // This is done to improve the compatibility to ant 1.5", "-        Method getSourcepathMethod = null;", "-        try {", "-\t        getSourcepathMethod = javacClass.getMethod(\"getSourcepath\", null); //$NON-NLS-1$", "-        } catch(NoSuchMethodException e) {", "-        \t// if not found, then we cannot use this method (ant 1.5)", "-        }", "-        Path compileSourcePath = null;", "-        if (getSourcepathMethod != null) {", "-\t \t\ttry {", "+\t\t// retrieve the method getSourcepath() using reflect", "+\t\t// This is done to improve the compatibility to ant 1.5", "+\t\tMethod getSourcepathMethod = null;", "+\t\ttry {", "+\t\t\tgetSourcepathMethod = javacClass.getMethod(\"getSourcepath\", null); //$NON-NLS-1$", "+\t\t} catch(NoSuchMethodException e) {", "+\t\t\t// if not found, then we cannot use this method (ant 1.5)", "+\t\t}", "+\t\tPath compileSourcePath = null;", "+\t\tif (getSourcepathMethod != null) {", "+\t\t\ttry {", "-        }", "-        if (compileSourcePath != null) {", "-            sourcepath = compileSourcePath;", "-        } else {", "-            sourcepath = this.src;", "-        }", "+\t\t}", "+\t\tif (compileSourcePath != null) {", "+\t\t\tsourcepath = compileSourcePath;", "+\t\t} else {", "+\t\t\tsourcepath = this.src;", "+\t\t}", "-        final String javaVersion = JavaEnvUtils.getJavaVersion();", "+\t\tfinal String javaVersion = JavaEnvUtils.getJavaVersion();", "-        if (this.memoryInitialSize != null) {", "-            if (!this.attributes.isForkedJavac()) {", "-                this.attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.ignoringMemoryInitialSize\"), Project.MSG_WARN); //$NON-NLS-1$", "-            } else {", "-                cmd.createArgument().setValue(memoryParameterPrefix", "-                                              + \"ms\" + this.memoryInitialSize); //$NON-NLS-1$", "-            }", "-        }", "+\t\tif (this.memoryInitialSize != null) {", "+\t\t\tif (!this.attributes.isForkedJavac()) {", "+\t\t\t\tthis.attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.ignoringMemoryInitialSize\"), Project.MSG_WARN); //$NON-NLS-1$", "+\t\t\t} else {", "+\t\t\t\tcmd.createArgument().setValue(memoryParameterPrefix", "+\t\t\t\t\t\t+ \"ms\" + this.memoryInitialSize); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "-        if (this.memoryMaximumSize != null) {", "-            if (!this.attributes.isForkedJavac()) {", "-                this.attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.ignoringMemoryMaximumSize\"), Project.MSG_WARN); //$NON-NLS-1$", "-            } else {", "-                cmd.createArgument().setValue(memoryParameterPrefix", "-                                              + \"mx\" + this.memoryMaximumSize); //$NON-NLS-1$", "-            }", "-        }", "+\t\tif (this.memoryMaximumSize != null) {", "+\t\t\tif (!this.attributes.isForkedJavac()) {", "+\t\t\t\tthis.attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.ignoringMemoryMaximumSize\"), Project.MSG_WARN); //$NON-NLS-1$", "+\t\t\t} else {", "+\t\t\t\tcmd.createArgument().setValue(memoryParameterPrefix", "+\t\t\t\t\t\t+ \"mx\" + this.memoryMaximumSize); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "-        if (this.debug) {", "-\t       // retrieve the method getSourcepath() using reflect", "-\t        // This is done to improve the compatibility to ant 1.5", "-\t        Method getDebugLevelMethod = null;", "-\t        try {", "-\t\t        getDebugLevelMethod = javacClass.getMethod(\"getDebugLevel\", null); //$NON-NLS-1$", "-\t        } catch(NoSuchMethodException e) {", "-\t        \t// if not found, then we cannot use this method (ant 1.5)", "-\t        \t// debug level is only available with ant 1.5.x", "-\t        }", "-     \t    String debugLevel = null;", "-\t        if (getDebugLevelMethod != null) {", "+\t\tif (this.debug) {", "+\t\t\t// retrieve the method getSourcepath() using reflect", "+\t\t\t// This is done to improve the compatibility to ant 1.5", "+\t\t\tMethod getDebugLevelMethod = null;", "+\t\t\ttry {", "+\t\t\t\tgetDebugLevelMethod = javacClass.getMethod(\"getDebugLevel\", null); //$NON-NLS-1$", "+\t\t\t} catch(NoSuchMethodException e) {", "+\t\t\t\t// if not found, then we cannot use this method (ant 1.5)", "+\t\t\t\t// debug level is only available with ant 1.5.x", "+\t\t\t}", "+\t\t\tString debugLevel = null;", "+\t\t\tif (getDebugLevelMethod != null) {", "-        \t}", "+\t\t\t}", "-            }", "-        } else {", "+\t\t\t}", "+\t\t} else {", "-        }", "+\t\t}", "-\t        // disable all warnings", "+\t\t\t// disable all warnings", "-\t   \t/*", "+\t\t/*", "-        if (source != null) {", "+\t\tif (source != null) {", "-        }", "-", "-\t\t/*", "-\t\t * encoding option", "-\t\t */", "-        if (this.encoding != null) {", "-            cmd.createArgument().setValue(\"-encoding\"); //$NON-NLS-1$", "-            cmd.createArgument().setValue(this.encoding);", "-        }", "+\t\t}", "-\t        /*", "+\t\t\t/*", "-\t\t\t        cmd.createArgument().setValue(arg);", "+\t\t\t\t\tcmd.createArgument().setValue(arg);", "-\t   \t}", "-     \t/*", "+\t\t}", "+\t\t/*", "+\t\t * encoding option. javac task encoding property must be the last encoding on the command", "+\t\t * line as compiler arg might also specify an encoding.", "+\t\t */", "+\t\tif (this.encoding != null) {", "+\t\t\tcmd.createArgument().setValue(\"-encoding\"); //$NON-NLS-1$", "+\t\t\tcmd.createArgument().setValue(this.encoding);", "+\t\t}", "+", "+\t\t/*", "-        logAndAddFilesToCompile(cmd);", "-        return cmd;", "+\t\tlogAndAddFilesToCompile(cmd);", "+\t\treturn cmd;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78616970086a5b20dd529e8417b4d077", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "b9aab476f3dc4637fa284b3c97f73d3f2751a24d", "commitAfterChange": "bcbf7c6210feefbd9b9ecb860c87242f8abfee2f", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tprivate TypeBinding minimalErasedCandidate(TypeBinding[] types, List invocations)", "signatureAfterChange": " \tprivate TypeBinding minimalErasedCandidate(TypeBinding[] types, List invocations)", "diff": ["-\t\t\t\tif (itsSuperclass != null) {", "-\t\t\t\t\tTypeBinding itsSuperclassErasure = itsSuperclass.erasure();", "-\t\t\t\t\tif (!typesToVisit.contains(itsSuperclassErasure)) {", "-\t\t\t\t\t\tif (itsSuperclassErasure != itsSuperclass) {", "-\t\t\t\t\t\t\tArrayList someInvocations = new ArrayList(1);", "-\t\t\t\t\t\t\tsomeInvocations.add(itsSuperclass);", "-\t\t\t\t\t\t\tallInvocations.put(itsSuperclassErasure, someInvocations);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\ttypesToVisit.add(itsSuperclassErasure);", "-\t\t\t\t\t\tmax++;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tif (itsSuperclass != null) {", "+\t\t\t\t\tTypeBinding itsSuperclassErasure = itsSuperclass.erasure();", "+\t\t\t\t\tif (!typesToVisit.contains(itsSuperclassErasure)) {", "+\t\t\t\t\t\tif (itsSuperclassErasure != itsSuperclass) {", "+\t\t\t\t\t\t\tArrayList someInvocations = new ArrayList(1);", "+\t\t\t\t\t\t\tsomeInvocations.add(itsSuperclass);", "+\t\t\t\t\t\t\tallInvocations.put(itsSuperclassErasure, someInvocations);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\ttypesToVisit.add(itsSuperclassErasure);", "+\t\t\t\t\t\tmax++;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "799a2b840a00075f82da47bf9913bd52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "27ae7cc0d5a75c1449565f71fee06411744b67e7", "commitAfterChange": "8b72c02b9d94ae454655938a968c4cbea2e7dc9d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "diff": ["-\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ad2f74acba8594732a027960bf6d228", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "372783581a5723abe8e5c388f38ff5c205e01380", "commitAfterChange": "b0c126113d3919e827d562fe7ceede775b6f96a6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-        final int parametersLength = descriptorParameters.length;", "+        this.receiverType = lhsType;", "+\t\tfinal int parametersLength = descriptorParameters.length;", "-        \treturn this.resolvedType; // No binding construction possible. Code generator will have to conjure up a rabbit.", "+        \treturn this.resolvedType; // No binding construction possible right now. Code generator will have to conjure up a rabbit.", "-\t\t", "-        this.receiverType = lhsType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ec088cbfdc2bec136d8353628bacc91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SynchronizedStatement.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["+\t\tanyExceptionHandler.placeEnd();\r", "-\t\tanyExceptionHandler.placeEnd();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f358481d0bdf27fec03bb4617f88de9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SynchronizedStatement.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["+\t\tanyExceptionHandler.placeEnd();\r", "-\t\tanyExceptionHandler.placeEnd();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f73fa4386d17663ad8cd56ec716a7ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "eb10ec59bc98c7f83476bce7202c39d197cae0df", "commitAfterChange": "f7fbe1c2009ea9c5d97d4fd12e8279412bfffc23", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "\t\r \r \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "signatureAfterChange": "\t\r \r \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "diff": ["-\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.CastExpression) {\r", "-\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.CastExpression) expression);\r", "-\t\t}\r", "+\t\t}\r", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.CastExpression) {\r", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.CastExpression) expression);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88e1eb0f117792fc3e0efdf012fc7cc0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "e886eff79bde20e770d6463357bbd564e2f1cf69", "commitAfterChange": "ea79715172a95b93ee1c503b6edc05255b63df3b", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "\r protected IBuffer openBuffer(IProgressMonitor pm) throws JavaModelException", "signatureAfterChange": "\r protected IBuffer openBuffer(IProgressMonitor pm) throws JavaModelException", "diff": ["-\tbufManager.addBuffer(buffer);\r", "+\r", "+\t// add buffer to buffer cache\r", "+\tbufManager.addBuffer(buffer);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c2522495ec61b2ca725a8bf5c31ed16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "f0d98c4f580c534cd9bb9d201adb77ab90eafc65", "commitAfterChange": "44beb229da7acf29f8209404ea1120f9422c2f4a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \t \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\tint invokeDynamicNumber = codeStream.classFile.recordBootstrapMethod(this);", "+\t\tint invokeDynamicNumber = codeStream.classFile.recordBootstrapMethod(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c49d53e3dc2d36b80977de319dbc1a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SynchronizedStatement.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["+\t\tanyExceptionHandler.placeEnd();\r", "-\t\tanyExceptionHandler.placeEnd();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cc3c11864336f0109fe9212f6836931", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Reference.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  protected boolean checkNullableFieldDereference(Scope scope, FieldBinding field, long sourcePosition)", "signatureAfterChange": "  protected boolean checkNullableFieldDereference(Scope scope, FieldBinding field, long sourcePosition)", "diff": ["-\tif ((field.tagBits & TagBits.AnnotationNullable) != 0) {", "-\t\tscope.problemReporter().nullableFieldDereference(field, sourcePosition);", "-\t\treturn true;", "-\t}", "+\t// preference to type annotations if we have any", "+\tif ((field.tagBits & TagBits.AnnotationNullable) != 0) {", "+\t\tscope.problemReporter().nullableFieldDereference(field, sourcePosition);", "+\t\treturn true;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f11338bb80d329d7530df145ac2d7fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SynchronizedStatement.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tanyExceptionHandler.placeEnd();\r", "+\t\tanyExceptionHandler.placeEnd();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9175307a3f4b3c0d928b20fba2e2bc41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CopyMoveResourcesTests.java", "commitBeforeChange": "2f91c24cde8396b021af6f3e2bda6f2a77eba2a4", "commitAfterChange": "2a4aa7a08cfd53b57ab5ee0d91aaa2e4266bf64d", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void testMoveReadOnlyPackageFragment() throws CoreException", "signatureAfterChange": " public void testMoveReadOnlyPackageFragment() throws CoreException", "diff": ["-\t\tif (pkgSource != null) {", "-\t\t\tpkgSource.getResource().setReadOnly(false);", "-\t\t}", "+\t\tif (pkgSource != null) {", "+\t\t\tpkgSource.getResource().setReadOnly(false);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "924e7cbf8793688a6abe4f8592cc6e43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "bac1850a6f255bd46da51ef3860d14b81ebbee33", "commitAfterChange": "2779c752b62e0a243b1d6af624b3d567c412eabb", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tvoid connectTypeHierarchy()", "signatureAfterChange": " \t \tvoid connectTypeHierarchy()", "diff": ["+\t\t\tnoProblems &= connectTypeVariables(referenceContext.typeParameters);", "-\t\t\tnoProblems &= connectTypeVariables(referenceContext.typeParameters);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92d1e6049397870cb46e1efb3b12138c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "cb3be60ace11d22c263d413bb56650b519ca99ca", "commitAfterChange": "e368c191001d740ec7ac91da20190ca3ba7d3b61", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["+\t\t\t\t\t\t\t\trecordComment(TokenNameCOMMENT_LINE);", "-\t\t\t\t\t\t\t\trecordComment(TokenNameCOMMENT_LINE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93cb140f82ff590b0587f19876488539", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "fbe3f3aabed3fd943703368b065a95bc68cf5a8d", "commitAfterChange": "3b51e6fd25bf226c9bb29d6317b71df712cf5255", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r public boolean checkAndReportBracketAnomalies(ProblemReporter problemReporter)", "signatureAfterChange": "\r public boolean checkAndReportBracketAnomalies(ProblemReporter problemReporter)", "diff": ["+\tscanner.wasAcr = false;\r", "-\tscanner.wasAcr = false;\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9403a5cfd4b4a81d3b0597eed394caac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "70ee08b37d9e1985bf6e556eb4c75b0a1c82e56b", "commitAfterChange": "a46f42e6852cac4afd504be345bfdc6cb42a6150", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": "  \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["-\t\t\t\t\t\t\tvalid = parseIdentifierTag();", "+\t\t\t\t\t\t\tvalid = parseIdentifierTag();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "956a11b2141493c78619c840105f16f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 58, "signatureBeforeChange": " protected void reportAccurateParameterizedTypeReference(ASTNode typeRef, char[] name, IJavaElement element, int accuracy) throws CoreException", "signatureAfterChange": " protected void reportAccurateParameterizedTypeReference(ASTNode typeRef, char[] name, IJavaElement element, int accuracy) throws CoreException", "diff": ["-\tint sourceStart = typeRef.sourceStart;", "-//\tint sourceEnd = typeRef.sourceEnd;", "-\t", "+\tint sourceStart = typeRef.sourceStart;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "958d7b816d1732445e5945ae2b151c7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "a8f4b2b4fb3c4acf806aeb860231063e29831fb0", "commitAfterChange": "f30a93735a30ed8ef59e945eb0c202ea80ef2a41", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "signatureAfterChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "diff": ["+\t", "+\t// default initialization for super-interfaces early, in case some aborting compilation error occurs,", "+\t// and still want to use binaries passed that point (e.g. type hierarchy resolver, see bug 63748).", "+\tthis.superInterfaces = NoSuperInterfaces;", "+\t", "-\tthis.superInterfaces = NoSuperInterfaces;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96ba9e08f23ade790108853891f34c38", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "dfcfcaedc8372b070ca684decc611420969812d4", "commitAfterChange": "9bef32a39642c351ad08557498e432fc6a29aeb4", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic String getSeverityString(long irritant)", "signatureAfterChange": "  \tpublic String getSeverityString(long irritant)", "diff": ["-\t\tif((this.warningThreshold & irritant) != 0)", "-\t\t\treturn WARNING;", "+\t\tif((this.warningThreshold & irritant) != 0)", "+\t\t\treturn WARNING;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a96718c729af92a1a649d27730ee43e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceSearchTests.java", "commitBeforeChange": "d9a97d862b475eea227de958d835b86e43eefc95", "commitAfterChange": "9dc138fb96cea4aeb4c94c79a989f9430d5afbc5", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void testSearchField() throws CoreException", "signatureAfterChange": " \tpublic void testSearchField() throws CoreException", "diff": ["+\t\t\tcleanCategoryTableCache(false);", "-\t\t\tcleanCategoryTableCache(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b09cb0c2eb9f0ca795f643435f15928", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "ed9fcb70460f8a7c09bd2ac4b3017e5159d83486", "commitAfterChange": "d518189a9935110f4925579d51368bbbeaff5789", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate void runAPTInMixedMode( \t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tfinal ProcessorEnvImpl processorEnv, \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<ICompilationUnit> unitsForFilesWithMissingType, \t\t\tfinal int round)", "signatureAfterChange": " \tprivate void runAPTInMixedMode( \t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tfinal ProcessorEnvImpl processorEnv, \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<ICompilationUnit> unitsForFilesWithMissingType, \t\t\tfinal int round)", "diff": ["-\t\taddAllFilesWithMissingTypeError(filesWithMissingType, unitsForFilesWithMissingType, processorEnv);", "-\t\t", "+\t\t", "+\t\taddAllFilesWithMissingTypeError(filesWithMissingType, unitsForFilesWithMissingType, processorEnv);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bdb8110e884e52dfda377576f2ef817", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "a071cbdaf211a260b8aa9c61822ac5501cee9c5c", "commitAfterChange": "a9fe2cd6834c8a9a5d61e3b4f5b4753a1e8c9994", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  void faultInTypesForFieldsAndMethods()", "signatureAfterChange": "  void faultInTypesForFieldsAndMethods()", "diff": ["+\tfields();", "+\tmethods();", "-\tfields();", "-\tmethods();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a50e1620cc3372d7b7a37f7149b3bd0f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "57c6d386f529d0e8572acc77526ab668fb7c3818", "commitAfterChange": "41dd795c862e06f6f8c0a69203da8ac4a4f0da5d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean isCompound)", "signatureAfterChange": "  \tpublic FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean isCompound)", "diff": ["+\t\tflowInfo =", "+\t\t\treceiver", "+\t\t\t\t.analyseCode(currentScope, flowContext, flowInfo, !binding.isStatic())", "+\t\t\t\t.unconditionalInits();", "-\t\tflowInfo =", "-\t\t\treceiver", "-\t\t\t\t.analyseCode(currentScope, flowContext, flowInfo, !binding.isStatic())", "-\t\t\t\t.unconditionalInits();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a586870b7b3fad99ce5e9b1b61b4bf95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "3e190b68d238643d825e1ad9aa87d6bbe9e82edc", "commitAfterChange": "2b27dcb10e8425a7a2b60cafac84f86873aa3258", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": " private TypeVariableBinding resolveTypesFor(TypeVariableBinding variable)", "signatureAfterChange": " private TypeVariableBinding resolveTypesFor(TypeVariableBinding variable)", "diff": ["+\tvariable.modifiers ^= AccUnresolved;", "-\tvariable.modifiers ^= AccUnresolved;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6becc06776cc2e7842b33326010e49a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "09c36b50e261c28aae31962bd3a275f3b0a10ede", "commitAfterChange": "3016b5c28bad9ea6a922d0ddb629a3165f3b600c", "methodNumberBeforeChange": 181, "methodNumberAfterChange": 181, "signatureBeforeChange": " protected void consumeToken(int type)", "signatureAfterChange": " protected void consumeToken(int type)", "diff": ["-\t\t\tpushOnIntStack(scanner.startPosition);", "+\t\t\tpushOnIntStack(scanner.startPosition);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a82b3009f8fa2036a29abcbc9c79f847", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "e370ba439679a26bb04e9b77917c8e22a1b8aa06", "commitAfterChange": "90d481edc9060cc498a8f085b08186108312e37b", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void testBug77093constructor() throws CoreException", "signatureAfterChange": " \tpublic void testBug77093constructor() throws CoreException", "diff": ["+\t\tdiscard = false; // keep working copies for next test (set before assertion as an error is raised...)", "-\t\t// keep working copies for next test", "-\t\tdiscard = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a917cd9d3efdc4e5b9bcc2897ceac3ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CopyMoveResourcesTests.java", "commitBeforeChange": "2f91c24cde8396b021af6f3e2bda6f2a77eba2a4", "commitAfterChange": "2a4aa7a08cfd53b57ab5ee0d91aaa2e4266bf64d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void testCopyReadOnlyPackageFragment() throws CoreException", "signatureAfterChange": " public void testCopyReadOnlyPackageFragment() throws CoreException", "diff": ["-\t\tif (pkgSource != null) {", "-\t\t\tpkgSource.getResource().setReadOnly(false);", "-\t\t}", "+\t\t}", "+\t\tif (pkgSource != null) {", "+\t\t\tpkgSource.getResource().setReadOnly(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab5efb10ab3c8cd7625627cc8599fa00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/VerificationTypeInfo.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " public VerificationTypeInfo(int id, int tag, char[] constantPoolName)", "signatureAfterChange": " public VerificationTypeInfo(int id, int tag, char[] constantPoolName)", "diff": ["-\tthis.constantPoolName = constantPoolName;", "+\tthis.constantPoolName = constantPoolName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae802d15113a81924eb9d3476a627847", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "7499dd3309f66badc0b9a54f55f1bb48d32b67b2", "commitAfterChange": "7fcce8c57c783f249352148215037cdd2cb340b1", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\t\t\t\t\tif (CharOperation.equals(sourceType.sourceName, name)) {", "-\t\t\t\t\t\t\tif (foundType != null && foundType != sourceType)", "-\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, InheritedNameHidesEnclosingName);", "-\t\t\t\t\t\t\treturn sourceType;", "-\t\t\t\t\t\t}", "-", "+\t\t\t\t\t\t// 6.5.5.1 - simple name favors member type over top-level type in same unit", "+\t\t\t\t\t\tif (CharOperation.equals(sourceType.sourceName, name)) {", "+\t\t\t\t\t\t\tif (foundType != null && foundType != sourceType)", "+\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, InheritedNameHidesEnclosingName);", "+\t\t\t\t\t\t\treturn sourceType;", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aeedaace51636f82f60c426c7283da41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DoStatement.java", "commitBeforeChange": "169fb9ab8fc17b4c63cdfa1026fc1d2117d3506d", "commitAfterChange": "a2b325ca1d6624b52c89c789b78776b21c10f4bc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tvoid accept0(ASTVisitor visitor)", "signatureAfterChange": " \tvoid accept0(ASTVisitor visitor)", "diff": ["-\t\t\tacceptChild(visitor, getExpression());", "+\t\t\tacceptChild(visitor, getExpression());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af4e92d4d562ff7d30e9c88d7fb86c9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java", "commitBeforeChange": "4005c370e6cbaf5fe897eaa7c9410e92ff25148d", "commitAfterChange": "f0d3823e693314be74db80c5730855ddd690aa1f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tfinal ASTNode internalGetSetChildProperty(ChildPropertyDescriptor property, boolean get, ASTNode child)", "signatureAfterChange": " \tfinal ASTNode internalGetSetChildProperty(ChildPropertyDescriptor property, boolean get, ASTNode child)", "diff": ["-\t\tif (property == NAME_PROPERTY) {", "-\t\t\tif (get) {", "-\t\t\t\treturn getName();", "-\t\t\t} else {", "-\t\t\t\tsetName((SimpleName) child);", "-\t\t\t\treturn null;", "-\t\t\t}", "-\t\t}", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t}", "+\t\tif (property == NAME_PROPERTY) {", "+\t\t\tif (get) {", "+\t\t\t\treturn getName();", "+\t\t\t} else {", "+\t\t\t\tsetName((SimpleName) child);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afa32bb5c4c1f8d81615ef1239bb798c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DoStatement.java", "commitBeforeChange": "0325089db3ca0a8e6a36752438c4d3b535f031b0", "commitAfterChange": "2c5129ccdeb3bec0116f7310eb4a5f7c456e0788", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tfinal ASTNode internalGetSetChildProperty(ChildPropertyDescriptor property, boolean get, ASTNode child)", "signatureAfterChange": " \tfinal ASTNode internalGetSetChildProperty(ChildPropertyDescriptor property, boolean get, ASTNode child)", "diff": ["-\t\tif (property == EXPRESSION_PROPERTY) {", "-\t\t\tif (get) {", "-\t\t\t\treturn getExpression();", "-\t\t\t} else {", "-\t\t\t\tsetExpression((Expression) child);", "-\t\t\t\treturn null;", "-\t\t\t}", "-\t\t}", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t}", "+\t\tif (property == EXPRESSION_PROPERTY) {", "+\t\t\tif (get) {", "+\t\t\t\treturn getExpression();", "+\t\t\t} else {", "+\t\t\t\tsetExpression((Expression) child);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aff44c231444d08cc27dec73cd5260a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "d7c285a09f8cde2ba05e7f838f10ce545b90c736", "commitAfterChange": "7e5c821becbfd893dc049f65559e27ad95e7a9ea", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\r", "+\t// analyse the anonymous nested type\r", "+\tif (anonymousType != null) {\r", "+\t\tflowInfo = anonymousType.analyseCode(currentScope, flowContext, flowInfo);\r", "+\t}\r", "+\r", "-\t// analyse the anonymous nested type\r", "-\tif (anonymousType != null) {\r", "-\t\tflowInfo = anonymousType.analyseCode(currentScope, flowContext, flowInfo);\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3bd0bc4432f27f49f2e69c13caa379d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "27ae7cc0d5a75c1449565f71fee06411744b67e7", "commitAfterChange": "8b72c02b9d94ae454655938a968c4cbea2e7dc9d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "  public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\tcodeStream.generateImplicitConversion(implicitConversion);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7399d733f32240f96f42efc71e57a64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "848244c71e987fa25db92edd0b058c74c3d21f97", "commitAfterChange": "70248982b1cc4bbdc8708a5ccdd79e9520de6d48", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["+\t\t\t\t\t\t\t\trecordComment(TokenNameCOMMENT_LINE);", "-\t\t\t\t\t\t\t\trecordComment(TokenNameCOMMENT_LINE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7c17250aaff4063ea13afead6151efc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "27ae7cc0d5a75c1449565f71fee06411744b67e7", "commitAfterChange": "8b72c02b9d94ae454655938a968c4cbea2e7dc9d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8ddedd86968968785089aee0cde8ff4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnresolvedReferenceBinding.java", "commitBeforeChange": "b35f620685806d93a7b32cb38ddc1e568690ed0f", "commitAfterChange": "0174bc81f7d2de8d27eebb7df04fb04a776d1f62", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public void swapUnresolved(UnresolvedReferenceBinding unresolvedType, ReferenceBinding unannotatedType, LookupEnvironment environment)", "signatureAfterChange": "  public void swapUnresolved(UnresolvedReferenceBinding unresolvedType, ReferenceBinding unannotatedType, LookupEnvironment environment)", "diff": ["+\tenvironment.updateCaches(this, annotatedType);", "-\tenvironment.updateCaches(this, annotatedType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8e5a1a3da7e0521f5cce1423e00791e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "e370ba439679a26bb04e9b77917c8e22a1b8aa06", "commitAfterChange": "90d481edc9060cc498a8f085b08186108312e37b", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tpublic void testBug79860() throws CoreException", "signatureAfterChange": " \tpublic void testBug79860() throws CoreException", "diff": ["+\t\tdiscard = false; // keep working copies for next test (set before assertion as an error is raised...)", "-\t\t// keep working copies for next test", "-\t\tdiscard = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b902edf27aef15957dff744e59bc51ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java", "commitBeforeChange": "03eb13b7f6f7dd942b3b75380217789e2a90fb3a", "commitAfterChange": "1beefc961dc948ef0240d8dec91f2aac8b57a9d3", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t@Override \tpublic boolean isSameType(TypeMirror t1, TypeMirror t2)", "signatureAfterChange": " \t@Override \tpublic boolean isSameType(TypeMirror t1, TypeMirror t2)", "diff": ["-\t\tif (!(t1 instanceof TypeMirrorImpl) || !(t2 instanceof TypeMirrorImpl)) {", "-\t\t\treturn false;", "-\t\t}", "+\t\tif (!(t1 instanceof TypeMirrorImpl) || !(t2 instanceof TypeMirrorImpl)) {", "+\t\t\treturn false;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b90c0f8171b4b45bf98bbc9eef47126e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java", "commitBeforeChange": "a60f477290ff130bb4725f9d4978ea20a15224ba", "commitAfterChange": "8641f54de2fbb396358e8ce74c8966d612b3bcdf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\t \tprivate CompilationParticipantResult preBuildNotify( PreBuildCompilationEvent pbce )", "signatureAfterChange": " \t\t \tprivate CompilationParticipantResult preBuildNotify( PreBuildCompilationEvent pbce )", "diff": ["-\t", "-\t\tMap<AnnotationProcessorFactory, FactoryPath.Attributes> factories = _factoryLoader.getFactoriesAndAttributesForProject( javaProject );\t", "-\t", "+\t\t// If we're in batch mode, we need to reset the classloaders", "+\t\t// for the batch processors before we begin", "+\t\tMap<AnnotationProcessorFactory, FactoryPath.Attributes> factories = _factoryLoader.getFactoriesAndAttributesForProject( javaProject );\t", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b90f6686c35b24bdc8b851a7929eb63b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "2a6fc21e132c7337a2ad9e75a03356551f0e9060", "commitAfterChange": "2f8f6c0c9552d7ebf46ec13ce513e098823a7a4e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void writeNewLine(StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": "  \tprivate void writeNewLine(StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["-\t\tdumpTab(tabNumber, buffer);", "+\t\tdumpTab(tabNumber, buffer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbe03ceb1c78bf9f11947475bcf97042", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "e2dd5ee821f887ad13e39f8b44d89f9abfea148f", "commitAfterChange": "0a42969cf5af4836de11a0ddb17424701edec007", "methodNumberBeforeChange": 225, "methodNumberAfterChange": 225, "signatureBeforeChange": " protected void updateRecoveryState()", "signatureAfterChange": " protected void updateRecoveryState()", "diff": ["-\t/* may be able to retrieve completionNode as an orphan, and then attach it */", "-\tcompletionIdentifierCheck();", "-\t// attachOrphanCompletionNode pops various stacks to construct astNodeParent and enclosingNode. This does not gel well with extended recovery.", "+\t// completionIdentifierCheck && attachOrphanCompletionNode pops various stacks to construct astNodeParent and enclosingNode. This does not gel well with extended recovery.", "+\t", "+\t/* may be able to retrieve completionNode as an orphan, and then attach it */", "+\tcompletionIdentifierCheck();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be3bc03e55a4f74524c0007a89cb6d7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "c15e0219de25387b013bc67328ee786c2c1bc5f9", "commitAfterChange": "eb26a7cfa6d0bf96c880e80bcef15852e78da4ed", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 92, "signatureBeforeChange": " \tpublic static void updateAllCycleMarkers() throws JavaModelException", "signatureAfterChange": " \tpublic static void updateAllCycleMarkers() throws JavaModelException", "diff": ["-\t\tArrayList visited = new ArrayList();", "+\t\t", "+\t\t/* alternate implementation for cycle participants computation", "+\t\tcomputeCycleParticipants(projects, cycleParticipants);", "+\t\t*/", "+", "+\t\t// compute cycle participants", "+\t\tArrayList visited = new ArrayList();", "-", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfdc0c34915e00c8c4b2fdcf941ed016", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "ef7962abb2f4ddbd0a91145dae7428c18b9ceeca", "commitAfterChange": "136dce59d80ac02e76b80d10a7239055abd55f3e", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  private void writeRestriction(AccessRestriction restriction, DataOutputStream out) throws IOException", "signatureAfterChange": "  private void writeRestriction(AccessRestriction restriction, DataOutputStream out) throws IOException", "diff": ["+\t\twriteNames(restriction.getInclusionPatterns(), out); // inclusion patterns come first, see readRestriction()", "-\t\twriteNames(restriction.getInclusionPatterns(), out);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c135e9dc07dff61ede8a655a5dfd5363", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "57c6d386f529d0e8572acc77526ab668fb7c3818", "commitAfterChange": "41dd795c862e06f6f8c0a69203da8ac4a4f0da5d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean isCompound)", "signatureAfterChange": " \tpublic FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean isCompound)", "diff": ["-\t\tif (assignment.expression != null) {", "-\t\t\tflowInfo =", "-\t\t\t\tassignment", "-\t\t\t\t\t.expression", "-\t\t\t\t\t.analyseCode(currentScope, flowContext, flowInfo)", "-\t\t\t\t\t.unconditionalInits();", "-\t\t}", "+\t\t", "+\t\tif (assignment.expression != null) {", "+\t\t\tflowInfo =", "+\t\t\t\tassignment", "+\t\t\t\t\t.expression", "+\t\t\t\t\t.analyseCode(currentScope, flowContext, flowInfo)", "+\t\t\t\t\t.unconditionalInits();", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c181be41285c318f439a347ba7dc9ff4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java", "commitBeforeChange": "495067f03b4b0bfec29183e25c4db2e6b2a1dc02", "commitAfterChange": "7e745da1a363daa6e5b14071bc8b4d6e04889c29", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " public void testPackageFragmentRootRawEntry() throws CoreException, IOException", "signatureAfterChange": " public void testPackageFragmentRootRawEntry() throws CoreException, IOException", "diff": ["-\t\tlong start = System.currentTimeMillis();", "+\t\tlong start = System.currentTimeMillis();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c673ae249941aec502813c4bc2418ebc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SynchronizedStatement.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \r public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tanyExceptionHandler.placeEnd();\r", "+\t\tanyExceptionHandler.placeEnd();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7d49ed8ce2acf582b58e37246eeccaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnresolvedReferenceBinding.java", "commitBeforeChange": "b35f620685806d93a7b32cb38ddc1e568690ed0f", "commitAfterChange": "0174bc81f7d2de8d27eebb7df04fb04a776d1f62", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void setResolvedType(ReferenceBinding targetType, LookupEnvironment environment)", "signatureAfterChange": " void setResolvedType(ReferenceBinding targetType, LookupEnvironment environment)", "diff": ["+\tenvironment.updateCaches(this, targetType);", "-\tenvironment.updateCaches(this, targetType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdee4c8e4bd7020eeb39cb26fd1220e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "d2eb18d3e8f0e175413e7b6657e7fae900e4263d", "commitAfterChange": "74616a9a7c56963b1ad7237e43bfe460788f65e2", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\tif (this.log != null) {", "+\t\t\ttry {", "+\t\t\t\tthis.err = new PrintWriter(new FileOutputStream(this.log, false));", "+\t\t\t} catch (IOException e) {", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.cannotOpenLog\")); //$NON-NLS-1$", "+\t\t\t}", "+\t\t} else {", "+\t\t\tthis.showProgress = false;", "+\t\t}", "+", "-\t\t}", "-", "-\t\tif (this.log != null) {", "-\t\t\ttry {", "-\t\t\t\tthis.err = new PrintWriter(new FileOutputStream(this.log, false));", "-\t\t\t} catch (IOException e) {", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.cannotOpenLog\")); //$NON-NLS-1$", "-\t\t\t}", "-\t\t} else {", "-\t\t\tthis.showProgress = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d121c83929316c05baa47d492efbeb7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/AbstractImageBuilder.java", "commitBeforeChange": "06bdd90ec7e06ca246dfe4e05efc41d151db72d4", "commitAfterChange": "2b9df464fe844bb540314d6f9bc7e8d8d047b8ca", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \r protected AbstractImageBuilder(JavaBuilder javaBuilder)", "signatureAfterChange": "\r \r protected AbstractImageBuilder(JavaBuilder javaBuilder)", "diff": ["+\tthis.newState = new State(javaBuilder);\r", "-\tthis.newState = new State(javaBuilder);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d14a80b44d5ff0052053dcdafccad3b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/ReferenceCollection.java", "commitBeforeChange": "73d8bcf1c1d75b5fc76f266170f98e101c66fd58", "commitAfterChange": "59aa0cfced0bd43368c172b0f370082e849cb436", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \r static char[][] internSimpleNames(char[][] simpleNames, boolean removeWellKnown)", "signatureAfterChange": "\r \r static char[][] internSimpleNames(char[][] simpleNames, boolean removeWellKnown)", "diff": ["+\t\tfor (int j = 0, k = WellKnownSimpleNames.length; j < k; j++) {\r", "+\t\t\tchar[] wellKnownName = WellKnownSimpleNames[j];\r", "+\t\t\tif (sLength > wellKnownName.length)\r", "+\t\t\t\tbreak; // all remaining well known names are shorter\r", "+\t\t\tif (sLength == wellKnownName.length && CharOperation.equals(name, wellKnownName)) {\r", "+\t\t\t\tif (!removeWellKnown)\r", "+\t\t\t\t\tkeepers[index++] = WellKnownSimpleNames[j];\r", "+\t\t\t\tcontinue next;\r", "+\t\t\t}\r", "+\t\t}\r", "-\t\t\t\tcontinue next;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tfor (int j = 0, k = WellKnownSimpleNames.length; j < k; j++) {\r", "-\t\t\tchar[] wellKnownName = WellKnownSimpleNames[j];\r", "-\t\t\tif (sLength > wellKnownName.length)\r", "-\t\t\t\tbreak; // all other well known names are shorter\r", "-\t\t\tif (sLength == wellKnownName.length && CharOperation.equals(name, wellKnownName)) {\r", "-\t\t\t\tif (!removeWellKnown)\r", "-\t\t\t\t\tkeepers[index++] = WellKnownSimpleNames[j];\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1b12e7ba3180d142217a8167395d7cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "1af5a4c9db5050a646b966ef94445c5d7d6791d8", "commitAfterChange": "eb4338d8d760c2f9a3b3f7cdfcea612b9c1ab6ca", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["+\t\t\tif (isStringSwitch) {", "+\t\t\t\t// the secret variable should be created before iterating over the switch's statements that could", "+\t\t\t\t// create more locals. This must be done to prevent overlapping of locals", "+\t\t\t\t// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=356002", "+\t\t\t\tthis.dispatchStringCopy  = new LocalVariableBinding(SecretStringVariableName, upperScope.getJavaLangString(), ClassFileConstants.AccDefault, false);", "+\t\t\t\tupperScope.addLocalVariable(this.dispatchStringCopy);", "+\t\t\t\tthis.dispatchStringCopy.setConstant(Constant.NotAConstant);", "+\t\t\t\tthis.dispatchStringCopy.useFlag = LocalVariableBinding.USED;", "+\t\t\t}", "-\t\t\t}", "-\t\t\tif (isStringSwitch) {", "-\t\t\t\tthis.dispatchStringCopy  = new LocalVariableBinding(SecretStringVariableName, upperScope.getJavaLangString(), ClassFileConstants.AccDefault, false);", "-\t\t\t\tupperScope.addLocalVariable(this.dispatchStringCopy);", "-\t\t\t\tthis.dispatchStringCopy.setConstant(Constant.NotAConstant);", "-\t\t\t\tthis.dispatchStringCopy.useFlag = LocalVariableBinding.USED;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d31782d7956f7feb1c9f00a5d4d8575b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/ReferenceCollection.java", "commitBeforeChange": "73d8bcf1c1d75b5fc76f266170f98e101c66fd58", "commitAfterChange": "59aa0cfced0bd43368c172b0f370082e849cb436", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r static char[][][] internQualifiedNames(char[][][] qualifiedNames)", "signatureAfterChange": "\r \r static char[][][] internQualifiedNames(char[][][] qualifiedNames)", "diff": ["+\t\tfor (int j = 0, k = WellKnownQualifiedNames.length; j < k; j++) {\r", "+\t\t\tchar[][] wellKnownName = WellKnownQualifiedNames[j];\r", "+\t\t\tif (qLength > wellKnownName.length)\r", "+\t\t\t\tbreak; // all remaining well known names are shorter\r", "+\t\t\tif (qLength == wellKnownName.length && CharOperation.equals(qualifiedName, wellKnownName))\r", "+\t\t\t\tcontinue next;\r", "+\t\t}\r", "-\t\t}\r", "-\t\tfor (int j = 0, k = WellKnownQualifiedNames.length; j < k; j++) {\r", "-\t\t\tchar[][] wellKnownName = WellKnownQualifiedNames[j];\r", "-\t\t\tif (qLength > wellKnownName.length)\r", "-\t\t\t\tbreak; // all other well known names are shorter\r", "-\t\t\tif (qLength == wellKnownName.length && CharOperation.equals(qualifiedName, wellKnownName))\r", "-\t\t\t\tcontinue next;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d33095d18726a7e2e9f1cf1429eaa2ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "f7b0e495847f4cba5d393348688e14a6dd333c0e", "commitAfterChange": "7e6a2b5554396f14f398aa61738c08e64bcd566d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tpublic AssertStatement convert(org.eclipse.jdt.internal.compiler.ast.AssertStatement statement)", "signatureAfterChange": "  \tpublic AssertStatement convert(org.eclipse.jdt.internal.compiler.ast.AssertStatement statement)", "diff": ["-\t\t\tassertStatement.setMessage(convert(exceptionArgument));", "+\t\t\tassertStatement.setMessage(convert(exceptionArgument));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d49f33a4047505a94e428aaffaa0168b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic ParameterizedGenericMethodBinding(MethodBinding originalMethod, TypeBinding[] typeArguments, LookupEnvironment environment)", "signatureAfterChange": " \tpublic ParameterizedGenericMethodBinding(MethodBinding originalMethod, TypeBinding[] typeArguments, LookupEnvironment environment)", "diff": ["-", "-\t    this.thrownExceptions = Scope.substitute(this, originalMethod.thrownExceptions);", "-\t    if (this.thrownExceptions == null) this.thrownExceptions = Binding.NO_EXCEPTIONS;", "+\t    this.thrownExceptions = Scope.substitute(this, originalMethod.thrownExceptions);", "+\t    if (this.thrownExceptions == null) this.thrownExceptions = Binding.NO_EXCEPTIONS;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5ed2cb705c240db0062d3bda07fc0d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "2de930f59d9b83efe9ad335cd375bf8acd9f09ab", "commitAfterChange": "2d4e9dc622e1a892320329a6c5ae15f1ba8ce210", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": " \tpublic boolean visit(PrefixExpression prefixExpression, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(PrefixExpression prefixExpression, BlockScope scope)", "diff": ["-\t\tprefixExpression.lhs.traverse(this, scope);", "+\t\tprefixExpression.lhs.traverse(this, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9ed9943779724c9ac5f61f90bb26acb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotationHolder.java", "commitBeforeChange": "91f3edc5382142e13f8351418b65563536c6670f", "commitAfterChange": "8beb6c014c6d79a132720a5abe8725a7bc30bf83", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " AnnotationHolder setAnnotations(AnnotationBinding[] annotations)", "signatureAfterChange": " AnnotationHolder setAnnotations(AnnotationBinding[] annotations)", "diff": ["+\tthis.annotations = annotations;", "-", "-\tthis.annotations = annotations;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da07334ab9094f9ae5c5fdb0305d8355", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "c26ed9010f086cee334676f08e3ce032d3a02c30", "commitAfterChange": "a0827b5ed51f9fc68d50a6070897f74217550da1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "signatureAfterChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "diff": ["+\t\tif (superCandidate.id == TypeIds.T_null)", "+\t\t\treturn FALSE;", "-\t\tif (superCandidate.id == TypeIds.T_null)", "-\t\t\treturn FALSE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dad0040f9650f98a72cdf5f4f072a182", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceSearchTests.java", "commitBeforeChange": "d9a97d862b475eea227de958d835b86e43eefc95", "commitAfterChange": "9dc138fb96cea4aeb4c94c79a989f9430d5afbc5", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void testSearchConstructor() throws CoreException", "signatureAfterChange": " \tpublic void testSearchConstructor() throws CoreException", "diff": ["+\t\t\tcleanCategoryTableCache(false);", "-\t\t\tcleanCategoryTableCache(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbadd533fa9652bccf5fa7e0bd47735f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "fb2dd37cec63b32be19be47d4358718ed4d76649", "commitAfterChange": "9d4deb39cd596c4aac108a1983a0ab5432be976e", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic static AnnotationBinding [] resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient, boolean copySE8AnnotationsToType)", "signatureAfterChange": " \tpublic static AnnotationBinding [] resolveAnnotations(BlockScope scope, Annotation[] sourceAnnotations, Binding recipient, boolean copySE8AnnotationsToType)", "diff": ["-\t\tif (copySE8AnnotationsToType)", "-\t\t\tcopySE8AnnotationsToType(scope, recipient, sourceAnnotations);", "-", "+\t\tif (copySE8AnnotationsToType)", "+\t\t\tcopySE8AnnotationsToType(scope, recipient, sourceAnnotations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd5bfad4025885df72da6173c700cd22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "15cb47257592351618c0f415edc117a6b315a803", "commitAfterChange": "e6029c8b1adfe1296ee554ed42f00e5a663cecbf", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " \tpublic List newModifiers(int flags)", "signatureAfterChange": " \tpublic List newModifiers(int flags)", "diff": ["+\t\tif (Modifier.isDefault(flags)) {", "+\t\t\tresult.add(newModifier(Modifier.ModifierKeyword.DEFAULT_KEYWORD));", "+\t\t}", "-\t\t}", "-\t\tif (Modifier.isDefault(flags)) {", "-\t\t\tresult.add(newModifier(Modifier.ModifierKeyword.DEFAULT_KEYWORD));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd6a6aa114452afa3cca2a5912e4cdf0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "5bca428a82a57c86e3f35e8a47bd820f78d2be6a", "commitAfterChange": "8f32d730ad3a511e39170e7d2e2818d8a94e768e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tpublic void resolve(ClassScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(ClassScope upperScope)", "diff": ["-\t\t\tresolveStatements();", "+\t\t\tresolveStatements();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de94c06e95f3f4f47b0863c66a7d46f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "27ae7cc0d5a75c1449565f71fee06411744b67e7", "commitAfterChange": "8b72c02b9d94ae454655938a968c4cbea2e7dc9d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["+\t\t\t\t\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);\t\t", "-\t\t\t\t\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "defdd0fc2021666c33230844054a05f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "2bb47ea180e93152a2065284e7acbb42ba612a5b", "commitAfterChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  void faultInTypesForFieldsAndMethods()", "signatureAfterChange": "  void faultInTypesForFieldsAndMethods()", "diff": ["-\tfields();", "-\tmethods();", "+\tfields();", "+\tmethods();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e02cc081de1865395b3ab2bec9fded8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SortElementBuilder.java", "commitBeforeChange": "4465584ee152e94b2e2942c184ba61da56e8439d", "commitAfterChange": "c2118a83671afe9d2431785a26a0695ce14cd1b6", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 47, "signatureBeforeChange": " \t\tprotected void generateSource(StringBuffer buffer)", "signatureAfterChange": " \t\tprotected void generateSource(StringBuffer buffer)", "diff": ["+\t\t\t\tint start = this.lastChildBeforeSorting.sourceEnd + 1;", "-\t\t\t\tint start = this.lastChildBeforeSorting.sourceEnd + 1;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1eb18c110cdd0be4dd6168e2cb87699", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "d12e1d5e4e3d64244731f65f6a329892601fa350", "commitAfterChange": "4d1b2a602aa63e2d641e31567150dab25a5e04f3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["-\t\tresolveAnnotations(scope);", "+\t\tresolveAnnotations(scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1f9e72c6096e898a467a39234c02b08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java", "commitBeforeChange": "b821abc68fcb9d289c59c31ee80725eac996b112", "commitAfterChange": "bd6483f3cabfe3766f6db22ff5aa830fa8dfa3a6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["+\t\t\t\tactionInfo = actionInfo.mergedWith(loopingContext.initsOnContinue.unconditionalInits());", "-\t\t\t\tactionInfo =", "-\t\t\t\t\tactionInfo.mergedWith(loopingContext.initsOnContinue.unconditionalInits());", "-\t\t\t\t// for increments", "+\t\t// for increments"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e26b4e76f9e8a9106bac60efa480b6b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "e370ba439679a26bb04e9b77917c8e22a1b8aa06", "commitAfterChange": "90d481edc9060cc498a8f085b08186108312e37b", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void testBug79803() throws CoreException", "signatureAfterChange": " \tpublic void testBug79803() throws CoreException", "diff": ["+\t\tdiscard = false; // keep working copies for next test (set before assertion as an error is raised...)", "-\t\t// keep working copies for next test", "-\t\tdiscard = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e68c2397705505dbcf52b7d30f1f4cbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "3be493b980c5d01d07e272306dca9c1749e3ec67", "commitAfterChange": "22fe7881d62ac8282d4b2bebd6f328050922ffe5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r \tpublic FlowInfo analyseCode(\r \t\tBlockScope currentScope,\r \t\tFlowContext flowContext,\r \t\tFlowInfo flowInfo)", "signatureAfterChange": "\r \r \tpublic FlowInfo analyseCode(\r \t\tBlockScope currentScope,\r \t\tFlowContext flowContext,\r \t\tFlowInfo flowInfo)", "diff": ["+\r", "+\t\tflowInfo = condition.analyseCode(currentScope, flowContext, flowInfo);\r", "+\r", "-\t\t// notice that the receiver investigation is not performed in the previous case, since there is\r", "-\t\t// not a chance it is worth trying to check anything on a constant expression.\r", "-\t\tflowInfo = condition.analyseCode(currentScope, flowContext, flowInfo);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7f4c125327ad56334088647a31e5bf0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DoStatement.java", "commitBeforeChange": "f1f25c6cdf998a1ec590849c8e88206d0ec0f3ca", "commitAfterChange": "11bdf7ee83fa535bb4e922a4f202eec91a5eb529", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tfinal ASTNode internalGetSetChildProperty(ChildPropertyDescriptor property, boolean get, ASTNode child)", "signatureAfterChange": " \tfinal ASTNode internalGetSetChildProperty(ChildPropertyDescriptor property, boolean get, ASTNode child)", "diff": ["-\t\tif (property == EXPRESSION_PROPERTY) {", "-\t\t\tif (get) {", "-\t\t\t\treturn getExpression();", "-\t\t\t} else {", "-\t\t\t\tsetExpression((Expression) child);", "-\t\t\t\treturn null;", "-\t\t\t}", "-\t\t}", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t}", "+\t\tif (property == EXPRESSION_PROPERTY) {", "+\t\t\tif (get) {", "+\t\t\t\treturn getExpression();", "+\t\t\t} else {", "+\t\t\t\tsetExpression((Expression) child);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e98f94b89d68d1223d899f1f877d0c70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "6a44e0777af1a4632e0d20c0e9b92d35d2ad59f3", "commitAfterChange": "2ca339c139c0fe73a5bd2705f66592731098d347", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void generateReadSequence( \t\tBlockScope currentScope, \t\tCodeStream codeStream)", "signatureAfterChange": " \tpublic void generateReadSequence( \t\tBlockScope currentScope, \t\tCodeStream codeStream)", "diff": ["-\t\t\t\tif (!needValue) break; // no value needed", "+\t\t\t\tif (!needValue) break; // no value needed"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed50a7d798b9bf46f3f84868fb5b95b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "1995deba8c96efdefeb6a6078c7e55c511780c0c", "commitAfterChange": "c0961b9d73157eff51e68a5c49ea401574d94c27", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite, boolean needResolve)", "signatureAfterChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite, boolean needResolve)", "diff": ["+", "+\t\tcompilationUnitScope().recordTypeReference(receiverType);", "-", "-\t\tcompilationUnitScope().recordTypeReference(receiverType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee3b5d0dc8512ea9d739a83aeaba6a4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "d0f8543fbf05d5231cfcdb932c0755a9601416c5", "commitAfterChange": "2d4fa58dea9c2c5ba4c45a2eb8b0a3a65e7f317d", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \t   \tpublic void resolve()", "signatureAfterChange": " \t   \tpublic void resolve()", "diff": ["-", "+\t\t\tif (this.memberTypes != null) {", "+\t\t\t\tfor (int i = 0, count = this.memberTypes.length; i < count; i++) {", "+\t\t\t\t\tthis.memberTypes[i].resolve(this.scope);", "+\t\t\t\t}", "+\t\t\t}", "-", "+\t", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (this.memberTypes != null) {", "-\t\t\t\tfor (int i = 0, count = this.memberTypes.length; i < count; i++) {", "-\t\t\t\t\tthis.memberTypes[i].resolve(this.scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eedc0935fe77fa2aaa93486fbe79985e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchSet.java", "commitBeforeChange": "d5681cddd2bc040c1eb37719a4428ed2ff838f36", "commitAfterChange": "3334e44255d4ee3f5cec1b83d0e0822fcc4d85ec", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " private void reportMatching(AbstractMethodDeclaration method, IJavaElement parent) throws CoreException", "signatureAfterChange": " private void reportMatching(AbstractMethodDeclaration method, IJavaElement parent) throws CoreException", "diff": ["+\t// declaration in this method", "+\t// (NB: declarations must be searched first (see bug 20631 Declaration of local binary type not found)", "+\tif ((method.bits & AstNode.HasLocalTypeMASK) != 0) {", "+\t\tLocalDeclarationVisitor localDeclarationVisitor = new LocalDeclarationVisitor();", "+\t\tlocalDeclarationVisitor.enclosingElement = ", "+\t\t\t(parent instanceof IType) ?", "+\t\t\t\tthis.locator.createMethodHandle(method, (IType)parent) :", "+\t\t\t\tparent;", "+\t\ttry {", "+\t\t\tmethod.traverse(localDeclarationVisitor, (ClassScope)null);", "+\t\t} catch (WrappedCoreException e) {", "+\t\t\tthrow e.coreException;", "+\t\t}", "+\t}", "+\t", "-\t\t}", "-\t}", "-\tif ((method.bits & AstNode.HasLocalTypeMASK) != 0) {", "-\t\tLocalDeclarationVisitor localDeclarationVisitor = new LocalDeclarationVisitor();", "-\t\tlocalDeclarationVisitor.enclosingElement = ", "-\t\t\t(parent instanceof IType) ?", "-\t\t\t\tthis.locator.createMethodHandle(method, (IType)parent) :", "-\t\t\t\tparent;", "-\t\ttry {", "-\t\t\tmethod.traverse(localDeclarationVisitor, (ClassScope)null);", "-\t\t} catch (WrappedCoreException e) {", "-\t\t\tthrow e.coreException;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efd399b6ac574c5502d144758a5eccf1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "9ea0d26717077cc31f78561d1f110949d5e1c944", "commitAfterChange": "31225f931c10340b8616c3f4ecc6725f368df84c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "signatureAfterChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "diff": ["+\t\tif (subCandidate.id == TypeIds.T_null)", "+\t\t\treturn TRUE;", "-\t\tif (subCandidate.id == TypeIds.T_null)", "-\t\t\treturn TRUE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f33cf1d5d79afd3696c7952cbb3058f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "39787fb323b3f06bf37a085118b28347f6a17b39", "commitAfterChange": "0cc61e9905c3f603dab789f6a44abfa63094212c", "methodNumberBeforeChange": 221, "methodNumberAfterChange": 221, "signatureBeforeChange": " public boolean isDefinitelyAssigned(Scope scope, int initStateIndex, LocalVariableBinding local)", "signatureAfterChange": " public boolean isDefinitelyAssigned(Scope scope, int initStateIndex, LocalVariableBinding local)", "diff": ["-\tif (initStateIndex == -1)", "-\t\treturn false;", "+\tif (initStateIndex == -1)", "+\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4e7336840f7a018a1acfdecdcee0eb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "26ecbd70f644b3e526f4a51dee0b94e84d57cade", "commitAfterChange": "63af609b0c4ca15a76568f63423f1cb23d7be92e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["+\t\tresolveAnnotations(scope);", "-\t\tresolveAnnotations(scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f805b9513e381411ed4a9e017db062d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/RenameElementsOperation.java", "commitBeforeChange": "0dc6446aeab064f2d77dae4d4b0d25d3e6c845fc", "commitAfterChange": "8fe834cb8f4336c4e03a0aec8b6e7a981a1d317c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected void verify(IJavaElement element) throws JavaModelException", "signatureAfterChange": " protected void verify(IJavaElement element) throws JavaModelException", "diff": ["-\tint elementType = element.getElementType();", "-\t", "+\tint elementType = element.getElementType();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb81cf3f664b0eb0a2d73e3eefc9c93d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "e370ba439679a26bb04e9b77917c8e22a1b8aa06", "commitAfterChange": "90d481edc9060cc498a8f085b08186108312e37b", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void testBug81084a() throws CoreException, JavaModelException", "signatureAfterChange": " \tpublic void testBug81084a() throws CoreException, JavaModelException", "diff": ["+\t\tdiscard = false; // keep working copies for next test (set before assertion as an error is raised...)", "-\t\t// keep working copies for next test", "-\t\tdiscard = false;"]}], "num": 41936}
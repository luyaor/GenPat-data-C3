{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09b059b91d4531f8177e78b0452edbea", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e1032d82dfc7320b3a7f85aa1e79ee9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "6f6b135c3443a1f802996624e28e3fccc1ffade1", "commitAfterChange": "179d5d1c5c2a0bb83cd907094171a8fb72cf869e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r private void buildForProject(JavaProject project, ArrayList infos, ArrayList units) throws JavaModelException", "signatureAfterChange": "\r private void buildForProject(JavaProject project, ArrayList infos, ArrayList units) throws JavaModelException", "diff": ["-\tIType focusType = this.getType();\r", "-\tif (focusType != null && focusType.getJavaProject().equals(project)) {\r", "-\t\t// add focus type\r", "-\t\ttry {\r", "-\t\t\tinfos.add(((JavaElement) focusType).getRawInfo());\r", "-\t\t} catch (JavaModelException e) {\r", "-\t\t\t// if the focus type is not present, or if cannot get workbench path\r", "-\t\t\t// we cannot create the hierarchy\r", "-\t\t\treturn;\r", "-\t\t}\r", "-\t}\r", "-\t\r", "+\t\tIType focusType = this.getType();\r", "+\t\tthis.nameLookup = project.getNameLookup();\r", "-\t\t\tthis.searchableEnvironment.unitToLookInside = (CompilationUnit)focusType.getCompilationUnit();\r", "-\t\t}\r", "-\t\tthis.nameLookup = project.getNameLookup();\r", "-\t\tthis.hierarchyResolver = \r", "-\t\t\tnew HierarchyResolver(this.searchableEnvironment, JavaCore.getOptions(), this, new DefaultProblemFactory());\r", "-\t\tif (focusType != null) {\r", "-\t\t\tchar[] fullyQualifiedName = focusType.getFullyQualifiedName().toCharArray();\r", "-\t\t\tReferenceBinding focusTypeBinding = this.hierarchyResolver.setFocusType(CharOperation.splitOn('.', fullyQualifiedName));\r", "-\t\t\tif (focusTypeBinding == null \r", "-\t\t\t\t|| (!inProjectOfFocusType && (focusTypeBinding.tagBits & TagBits.HierarchyHasProblems) > 0)) {\r", "-\t\t\t\t// focus type is not visible in this project: no need to go further\r", "-\t\t\t\treturn;\r", "+\t\t\torg.eclipse.jdt.core.ICompilationUnit unitToLookInside = focusType.getCompilationUnit();\r", "+\t\t\tif (unitToLookInside != null) {\r", "+\t\t\t\tthis.nameLookup.setUnitsToLookInside(new IWorkingCopy[] {unitToLookInside});\r", "-\t\tthis.hierarchyResolver.resolve(genericTypes, compilationUnits);\r", "-\t\tif (inProjectOfFocusType) {\r", "-\t\t\tthis.searchableEnvironment.unitToLookInside = null;\r", "+\t\ttry {\r", "+\t\t\tthis.hierarchyResolver = \r", "+\t\t\t\tnew HierarchyResolver(this.searchableEnvironment, JavaCore.getOptions(), this, new DefaultProblemFactory());\r", "+\t\t\tif (focusType != null) {\r", "+\t\t\t\tchar[] fullyQualifiedName = focusType.getFullyQualifiedName().toCharArray();\r", "+\t\t\t\tReferenceBinding focusTypeBinding = this.hierarchyResolver.setFocusType(CharOperation.splitOn('.', fullyQualifiedName));\r", "+\t\t\t\tif (focusTypeBinding == null \r", "+\t\t\t\t\t|| (!inProjectOfFocusType && (focusTypeBinding.tagBits & TagBits.HierarchyHasProblems) > 0)) {\r", "+\t\t\t\t\t// focus type is not visible in this project: no need to go further\r", "+\t\t\t\t\treturn;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tthis.hierarchyResolver.resolve(genericTypes, compilationUnits);\r", "+\t\t} finally {\r", "+\t\t\tif (inProjectOfFocusType) {\r", "+\t\t\t\tthis.nameLookup.setUnitsToLookInside(null);\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "519bab912190da0b584a163178280250", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "519f65f0f5344992cd2a44d698edb1295f3c3a67", "commitAfterChange": "1b7858c417f0a2eea0d6f609fa41df3128fd97dd", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprivate void checkAndSetModifiersForField(FieldBinding fieldBinding, FieldDeclaration fieldDecl)", "signatureAfterChange": " \tprivate void checkAndSetModifiersForField(FieldBinding fieldBinding, FieldDeclaration fieldDecl)", "diff": ["+\t\tfinal ReferenceBinding declaringClass = fieldBinding.declaringClass;", "-\t\t\tproblemReporter().duplicateModifierForField(fieldBinding.declaringClass, fieldDecl);", "+\t\t\tproblemReporter().duplicateModifierForField(declaringClass, fieldDecl);", "-\t\tif ((fieldBinding.declaringClass.modifiers  & AccInterface) != 0) {", "+\t\tif ((declaringClass.modifiers  & AccInterface) != 0) {", "-\t\t\t\tif ((fieldBinding.declaringClass.modifiers  & AccAnnotation) != 0) {", "+\t\t\t\tif ((declaringClass.modifiers  & AccAnnotation) != 0)", "-\t\t\t\t} else {", "+\t\t\t\telse", "-\t\t\t\t}", "-\t\t\t\tproblemReporter().illegalModifierForEnumConstant(fieldBinding.declaringClass, fieldDecl);", "+\t\t\t\tproblemReporter().illegalModifierForEnumConstant(declaringClass, fieldDecl);", "-\t\tint unexpectedModifiers =", "-\t\t\t~(AccPublic | AccPrivate | AccProtected | AccFinal | AccStatic | AccTransient | AccVolatile);", "+\t\tint unexpectedModifiers = ~(AccPublic | AccPrivate | AccProtected | AccFinal | AccStatic | AccTransient | AccVolatile);", "-\t\t\tproblemReporter().illegalModifierForField(fieldBinding.declaringClass, fieldDecl);", "+\t\t\tproblemReporter().illegalModifierForField(declaringClass, fieldDecl);", "-\t\t\tproblemReporter().illegalVisibilityModifierCombinationForField(", "-\t\t\t\tfieldBinding.declaringClass,", "-\t\t\t\tfieldDecl);", "+\t\t\tproblemReporter().illegalVisibilityModifierCombinationForField(declaringClass, fieldDecl);", "-\t\t\t// need to keep the less restrictive", "+\t\t\t// need to keep the less restrictive so disable Protected/Private as necessary", "+\t\t\t} else if ((accessorBits & AccProtected) != 0 && (accessorBits & AccPrivate) != 0) {", "+\t\t\t\tmodifiers &= ~AccPrivate;", "-\t\t\tif ((accessorBits & AccProtected) != 0)", "-\t\t\t\tif ((accessorBits & AccPrivate) != 0)", "-\t\t\t\t\tmodifiers &= ~AccPrivate;", "-\t\t\tproblemReporter().illegalModifierCombinationFinalVolatileForField(", "-\t\t\t\tfieldBinding.declaringClass,", "-\t\t\t\tfieldDecl);", "+\t\t\tproblemReporter().illegalModifierCombinationFinalVolatileForField(declaringClass, fieldDecl);", "-\t\tif (fieldDecl.initialization == null && (modifiers & AccFinal) != 0) {", "+\t\tif (fieldDecl.initialization == null && (modifiers & AccFinal) != 0)", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6be480191aad787d4273d4115ca59333", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "7b0f09fd73b49ba4dc507ba4a634d425ab3e92c2", "commitAfterChange": "90ccf89195ab29ecb5a569cf526f683aefa3263d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r protected IBuffer openBuffer(IProgressMonitor pm) throws JavaModelException", "signatureAfterChange": "\r protected IBuffer openBuffer(IProgressMonitor pm) throws JavaModelException", "diff": ["-\tIBuffer buffer;\r", "-\t\r", "-\t// request buffer factory\r", "-\tif (this.bufferFactory != null) {\r", "-\t\tbuffer = this.bufferFactory.createBuffer(this);\r", "-\t\tif (buffer != null){\r", "-\t\t\tif (buffer.getCharacters() == null){\r", "-\t\t\t\tCompilationUnit original = (CompilationUnit) getOriginalElement();\r", "-\t\t\t\tbuffer.setContents(original.getContents());\r", "-\t\t\t}\r", "-\t\t\tbuffer.addBufferChangedListener(this);\r", "-\t\t\treturn buffer;\r", "-\t\t}\r", "-\t} \r", "-\t// create default buffer\r", "-\tICompilationUnit original= (ICompilationUnit)this.getOriginalElement();\r", "-\tbuffer = getBufferManager().openBuffer((char[])original.getBuffer().getCharacters().clone(), pm, this, isReadOnly());\r", "+\t// get buffer factory\r", "+\tBufferManager bufManager = getBufferManager();\r", "+\tIBufferFactory factory = \r", "+\t\tthis.bufferFactory == null ? \r", "+\t\t\tbufManager.getDefaultBufferFactory() :\r", "+\t\t\tthis.bufferFactory;\r", "+\t\t\t\r", "+\t// create buffer\r", "+\tIBuffer buffer = factory.createBuffer(this);\r", "+\tbufManager.addBuffer(buffer);\r", "+\r", "+\t// set the buffer source\r", "+\tif (buffer != null && buffer.getCharacters() == null){\r", "+\t\tICompilationUnit original= (ICompilationUnit)this.getOriginalElement();\r", "+\t\tbuffer.setContents((char[])original.getBuffer().getCharacters().clone());\r", "+\t}\r", "+\r", "+\t// listen to buffer changes\r", "+\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a2bfe571557f66b76a46d5020c79710", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "055380e1ecf4ba956a2ed12d0bd6afd30fa4bb0d", "commitAfterChange": "5633218f57a8f96a181a737ead7a991d28ce84d5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tConstant conditionConstant = condition.constant;", "-\t\tConstant conditionalConstant = condition.optimizedBooleanConstant();", "-\t\tboolean isFalseCondition =", "-\t\t\t((conditionConstant != NotAConstant)", "-\t\t\t\t&& (conditionConstant.booleanValue() == false))", "-\t\t\t\t|| ((conditionalConstant != NotAConstant)", "-\t\t\t\t\t&& (conditionalConstant.booleanValue() == false));", "+\t\tConstant cst = condition.optimizedBooleanConstant();", "+\t\tboolean isConditionOptimizedTrue = cst != NotAConstant && cst.booleanValue() == true;", "+\t\tboolean isConditionOptimizedFalse = cst != NotAConstant && cst.booleanValue() == false;", "+\t\tint previousMode = flowInfo.reachMode();", "+\t\t\t\t", "-\t\t\t\t\tif (isFalseCondition) {", "-\t\t\t\t\t\t//\tcontinueLabel = null; - cannot nil the label since may be targeted already by 'continue' statements", "-\t\t\t\t\t} else {", "+\t\t\t\t\tif (!isConditionOptimizedFalse) {", "-\t\t\t\tif (isFalseCondition) {", "-\t\t\t\t\t//\tcontinueLabel = null; - cannot nil the label since may be targeted already by 'continue' statements", "-\t\t\t\t} else {", "+\t\t\t\tif (!isConditionOptimizedFalse) {", "+\t\t/* Reset reach mode, to address following scenario.", "+\t\t *   final blank;", "+\t\t *   do { if (true) break; else blank = 0; } while(false);", "+\t\t *   blank = 1; // may be initialized already ", "+\t\t */", "+\t\tflowInfo.setReachMode(previousMode);", "+\t\t", "-\t\tif ((condition.constant != NotAConstant)", "-\t\t\t&& (condition.constant.booleanValue() == true)) {", "+\t\tif (isConditionOptimizedTrue) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91d5a801ddbbc70505c7486104bdd2d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "ade89e4fcc147d76e26736c6fadf9edebfc6386e", "commitAfterChange": "29f9f7b54f341569f134578b4014b331ae83ea82", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r public boolean build(SimpleLookupTable deltas)", "signatureAfterChange": "\r \r public boolean build(SimpleLookupTable deltas)", "diff": ["-\t\tif (javaBuilder.prereqOutputFolders.elementSize > 0) {\r", "-\t\t\tObject[] keyTable = javaBuilder.prereqOutputFolders.keyTable;\r", "-\t\t\tObject[] valueTable = javaBuilder.prereqOutputFolders.valueTable;\r", "-\t\t\tfor (int i = 0, l = keyTable.length; i < l; i++) {\r", "-\t\t\t\tIProject prereqProject = (IProject) keyTable[i];\r", "-\t\t\t\tif (prereqProject != null) {\r", "-\t\t\t\t\tIResourceDelta binaryDelta = (IResourceDelta) deltas.get(prereqProject);\r", "-\t\t\t\t\tif (binaryDelta != null)\r", "-\t\t\t\t\t\tif (!findAffectedSourceFiles(binaryDelta, (IResource) valueTable[i])) return false;\r", "-\t\t\t\t}\r", "+\t\tObject[] keyTable = deltas.keyTable;\r", "+\t\tObject[] valueTable = deltas.valueTable;\r", "+\t\tfor (int i = 0, l = keyTable.length; i < l; i++) {\r", "+\t\t\tIResourceDelta delta = (IResourceDelta) valueTable[i];\r", "+\t\t\tif (delta != null) {\r", "+\t\t\t\tIResource[] binaryResources = (IResource[]) javaBuilder.binaryResources.get(keyTable[i]);\r", "+\t\t\t\tif (binaryResources != null)\r", "+\t\t\t\t\tif (!findAffectedSourceFiles(delta, binaryResources)) return false;\r"]}], "num": 20268}
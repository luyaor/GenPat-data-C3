{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8918e66386e3aa3387fa26c4efaccff3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09eaa7f5fb1814f0006dd05c527fd3f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "fcc72e46b744ea79a152e24a7ffac0f0901b7400", "commitAfterChange": "06a3d951c7ec6b39762293a6177f305ce0f3f22c", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic ITypeBinding[] getTypeArguments()", "signatureAfterChange": " \tpublic ITypeBinding[] getTypeArguments()", "diff": ["-\t\t\tif (typeArgumentsBindings != null) {", "-\t\t\t\tint typeArgumentsLength = typeArgumentsBindings.length;", "-\t\t\t\tif (typeArgumentsLength != 0) {", "-\t\t\t\t\tthis.typeArguments = new ITypeBinding[typeArgumentsLength];", "-\t\t\t\t\tfor (int i = 0; i < typeArgumentsLength; i++) {", "-\t\t\t\t\t\tITypeBinding typeBinding = this.resolver.getTypeBinding(typeArgumentsBindings[i]);", "-\t\t\t\t\t\tif (typeBinding == null) {", "-\t\t\t\t\t\t\treturn this.typeArguments = NO_TYPE_BINDINGS;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.typeArguments[i] = typeBinding;", "+\t\t\tint typeArgumentsLength = typeArgumentsBindings == null ? 0 : typeArgumentsBindings.length;", "+\t\t\tif (typeArgumentsLength != 0) {", "+\t\t\t\tITypeBinding[] tArguments = new ITypeBinding[typeArgumentsLength];", "+\t\t\t\tfor (int i = 0; i < typeArgumentsLength; i++) {", "+\t\t\t\t\tITypeBinding typeBinding = this.resolver.getTypeBinding(typeArgumentsBindings[i]);", "+\t\t\t\t\tif (typeBinding == null) {", "+\t\t\t\t\t\treturn this.typeArguments = NO_TYPE_BINDINGS;", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.typeArguments = NO_TYPE_BINDINGS;", "+\t\t\t\t\ttArguments[i] = typeBinding;", "-\t\t\t} else {", "-\t\t\t\tthis.typeArguments = NO_TYPE_BINDINGS;", "+\t\t\t\treturn this.typeArguments = tArguments;", "-\t\t} else {", "-\t\t\tthis.typeArguments = NO_TYPE_BINDINGS;", "-\t\treturn this.typeArguments;", "+\t\treturn this.typeArguments = NO_TYPE_BINDINGS;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17e4f13d815ac9b721eb3fba8928cb70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests2.java", "commitBeforeChange": "cb9adfe2a810fff7861c89a641a842e760d0d109", "commitAfterChange": "ab6e738072f523a78975533d481846db836960e4", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void testAccessRestriction13() throws Exception", "signatureAfterChange": " public void testAccessRestriction13() throws Exception", "diff": ["-\t\toptions.put(JavaCore.CODEASSIST_HIDE_RESTRICTED_REFERENCES, JavaCore.ERROR);", "+\t\toptions.put(JavaCore.CODEASSIST_FORBIDDEN_REFERENCE_CHECK, JavaCore.ENABLED);", "+\t\toptions.put(JavaCore.CODEASSIST_DISCOURAGED_REFERENCE_CHECK, JavaCore.DISABLED);", "-\t\t\t\"XX1[TYPE_REF]{a.XX1, a, La.XX1;, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE) + \"}\\n\" +", "- \t\t\t\"XX2[TYPE_REF]{b.XX2, b, Lb.XX2;, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\"XX2[TYPE_REF]{b.XX2, b, Lb.XX2;, null, \"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + \"}\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57c8c016671fa338ee5294fd44a997fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "204dbb0f962baec45cc155adc0f25897806fc936", "commitAfterChange": "8d7962f9f430b3236797be4f077716228c08370e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void addFieldInfo(FieldBinding fieldBinding)", "signatureAfterChange": " \tpublic void addFieldInfo(FieldBinding fieldBinding)", "diff": ["-\t\tif (fieldBinding.constant != Constant.NotAConstant){", "+\t\tif (fieldBinding.isConstantValue()){", "-\t\t\tswitch (fieldBinding.constant.typeID()) {", "+\t\t\tConstant fieldConstant = fieldBinding.constant();", "+\t\t\tswitch (fieldConstant.typeID()) {", "-\t\t\t\t\t\tconstantPool.literalIndex(fieldBinding.constant.booleanValue() ? 1 : 0);", "+\t\t\t\t\t\tconstantPool.literalIndex(fieldConstant.booleanValue() ? 1 : 0);", "-\t\t\t\t\t\tconstantPool.literalIndex(fieldBinding.constant.intValue());", "+\t\t\t\t\t\tconstantPool.literalIndex(fieldConstant.intValue());", "-\t\t\t\t\t\tconstantPool.literalIndex(fieldBinding.constant.floatValue());", "+\t\t\t\t\t\tconstantPool.literalIndex(fieldConstant.floatValue());", "-\t\t\t\t\t\tconstantPool.literalIndex(fieldBinding.constant.doubleValue());", "+\t\t\t\t\t\tconstantPool.literalIndex(fieldConstant.doubleValue());", "-\t\t\t\t\t\tconstantPool.literalIndex(fieldBinding.constant.longValue());", "+\t\t\t\t\t\tconstantPool.literalIndex(fieldConstant.longValue());", "-\t\t\t\t\t\t\t((StringConstant) fieldBinding.constant).stringValue());", "+\t\t\t\t\t\t\t((StringConstant) fieldConstant).stringValue());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baaabeee6e875e0c344bf3f3576ca351", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathChange.java", "commitBeforeChange": "1e3339b390895f43e0c4a01c40dd8982b9a1cea5", "commitAfterChange": "7b7865fc0854344a6b06c0d58bee2ec35a66de53", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic int generateDelta(JavaElementDelta delta)", "signatureAfterChange": " \tpublic int generateDelta(JavaElementDelta delta)", "diff": ["-\t\t\t\treturn NO_DELTA;", "+\t\t\t\treturn result;", "-\t\t\treturn NO_DELTA;", "+\t\t\treturn result;", "-\t\t\treturn NO_DELTA;", "+\t\t\treturn result;", "+\t\t", "+\t\tdelta.changed(this.project, IJavaElementDelta.F_RESOLVED_CLASSPATH_CHANGED);", "+\t\tresult |= HAS_DELTA;", "-\t\t\t\tresult |= HAS_DELTA;", "-\t\t\t\t\tresult |= HAS_DELTA;", "-\t\t\t\t\tresult |= HAS_DELTA;", "-\t\t\t\tresult |= HAS_DELTA;", "-\t\t\t\t\tresult |= HAS_DELTA;", "-\t\t\t\t\tresult |= HAS_DELTA;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d766a5099d66762a2e0e0b0ba58f08aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private void buildForProject(JavaProject project, ArrayList potentialSubtypes, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " private void buildForProject(JavaProject project, ArrayList potentialSubtypes, org.eclipse.jdt.core.ICompilationUnit[] workingCopies, HashSet localTypes, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\tthis.searchableEnvironment = (SearchableEnvironment)project.getSearchableNameEnvironment();", "-\t\tthis.nameLookup = project.getNameLookup();", "+\t\torg.eclipse.jdt.core.ICompilationUnit[] unitsToLookInside = null;", "-\t\t\torg.eclipse.jdt.core.ICompilationUnit[] unitsToLookInside;", "-\t\t\tthis.nameLookup.setUnitsToLookInside(unitsToLookInside); // NB: this uses a PerThreadObject, so it is thread safe", "-\t\ttry {", "-\t\t\tthis.hierarchyResolver = ", "-\t\t\t\tnew HierarchyResolver(this.searchableEnvironment, project.getOptions(true), this, new DefaultProblemFactory());", "-\t\t\tif (focusType != null) {", "-\t\t\t\tMember declaringMember = ((Member)focusType).getOuterMostLocalContext();", "-\t\t\t\tif (declaringMember == null) {", "-\t\t\t\t\t// top level or member type", "-\t\t\t\t\tchar[] fullyQualifiedName = focusType.getFullyQualifiedName().toCharArray();", "-\t\t\t\t\tif (!inProjectOfFocusType && project.getSearchableNameEnvironment().findType(CharOperation.splitOn('.', fullyQualifiedName)) == null) {", "-\t\t\t\t\t\t// focus type is not visible in this project: no need to go further", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// local or anonymous type", "-\t\t\t\t\tOpenable openable;", "-\t\t\t\t\tif (declaringMember.isBinary()) {", "-\t\t\t\t\t\topenable = (Openable)declaringMember.getClassFile();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\topenable = (Openable)declaringMember.getCompilationUnit();", "-\t\t\t\t\t}", "-\t\t\t\t\tlocalTypes = new HashSet();", "-\t\t\t\t\tlocalTypes.add(openable.getPath().toString());", "-\t\t\t\t\tthis.hierarchyResolver.resolve(new Openable[] {openable}, localTypes, monitor);", "+\t\tSearchableEnvironment searchableEnvironment = (SearchableEnvironment)project.newSearchableNameEnvironment(unitsToLookInside);", "+\t\tthis.nameLookup = searchableEnvironment.nameLookup;", "+\t\tthis.hierarchyResolver = ", "+\t\t\tnew HierarchyResolver(searchableEnvironment, project.getOptions(true), this, new DefaultProblemFactory());", "+\t\tif (focusType != null) {", "+\t\t\tMember declaringMember = ((Member)focusType).getOuterMostLocalContext();", "+\t\t\tif (declaringMember == null) {", "+\t\t\t\t// top level or member type", "+\t\t\t\tchar[] fullyQualifiedName = focusType.getFullyQualifiedName().toCharArray();", "+\t\t\t\tif (!inProjectOfFocusType && searchableEnvironment.findType(CharOperation.splitOn('.', fullyQualifiedName)) == null) {", "+\t\t\t\t\t// focus type is not visible in this project: no need to go further", "-\t\t\t}", "-\t\t\tthis.hierarchyResolver.resolve(openables, localTypes, monitor);", "-\t\t} finally {", "-\t\t\tif (inProjectOfFocusType) {", "-\t\t\t\tthis.nameLookup.setUnitsToLookInside(null);", "+\t\t\t} else {", "+\t\t\t\t// local or anonymous type", "+\t\t\t\tOpenable openable;", "+\t\t\t\tif (declaringMember.isBinary()) {", "+\t\t\t\t\topenable = (Openable)declaringMember.getClassFile();", "+\t\t\t\t} else {", "+\t\t\t\t\topenable = (Openable)declaringMember.getCompilationUnit();", "+\t\t\t\t}", "+\t\t\t\tlocalTypes = new HashSet();", "+\t\t\t\tlocalTypes.add(openable.getPath().toString());", "+\t\t\t\tthis.hierarchyResolver.resolve(new Openable[] {openable}, localTypes, monitor);", "+\t\t\t\treturn;", "+\t\tthis.hierarchyResolver.resolve(openables, localTypes, monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8938b3d998a0afc88814d34a388f290", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/WhileStatement.java", "commitBeforeChange": "b4b0b4bd0bb28b394799916fd599fbccaa40274d", "commitAfterChange": "b85788ed00669d561d218c53dfc5e78654d9a449", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["+\t\tConstant condConstant = this.condition.constant;", "+\t\t", "-\t\t\tcondition.analyseCode(", "+\t\t\tthis.condition.analyseCode(", "-\t\t\tif ((condition.constant != NotAConstant)", "-\t\t\t\t&& (condition.constant.booleanValue() == true)) {", "+\t\t\tif ((condConstant != NotAConstant) && (condConstant.booleanValue() == true)) {", "-\t\t\t\t((condition.constant != Constant.NotAConstant)", "-\t\t\t\t\t&& (condition.constant.booleanValue() == false))", "+\t\t\t\t((condConstant != Constant.NotAConstant) && (condConstant.booleanValue() == false))", "-\t\tif ((condition.constant != Constant.NotAConstant)", "-\t\t\t&& (condition.constant.booleanValue() == true)) {", "+\t\tif ((condConstant != Constant.NotAConstant) && (condConstant.booleanValue() == true)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa9c0c78c96d4df122833e5eb923ef4b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "52b692ed21634a88100b21eba7894614726adbcf", "commitAfterChange": "0d07e8a93b23da2b01f8b175a71d349d77236596", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\tthis.codegenBinding = this.binding.original();", "+\tMethodBinding codegenBinding = this.binding.original();", "-\t\tif (currentScope.enclosingSourceType() != this.codegenBinding.declaringClass){", "+\t\tif (currentScope.enclosingSourceType() != codegenBinding.declaringClass){", "-\t\t\tthis.syntheticAccessor = ((SourceTypeBinding)this.codegenBinding.declaringClass).addSyntheticMethod(this.codegenBinding, isSuperAccess());", "-\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);", "+\t\t\tthis.syntheticAccessor = ((SourceTypeBinding)codegenBinding.declaringClass).addSyntheticMethod(codegenBinding, isSuperAccess());", "+\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(codegenBinding, this);", "-\t\tthis.syntheticAccessor = destinationType.addSyntheticMethod(this.codegenBinding, isSuperAccess());", "-\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);", "+\t\tthis.syntheticAccessor = destinationType.addSyntheticMethod(codegenBinding, isSuperAccess());", "+\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(codegenBinding, this);", "-\t\t\t\t&& this.codegenBinding.declaringClass.getPackage()", "+\t\t\t\t&& codegenBinding.declaringClass.getPackage()", "-\t\t\tthis.syntheticAccessor = currentCompatibleType.addSyntheticMethod(this.codegenBinding, isSuperAccess());", "-\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);", "+\t\t\tthis.syntheticAccessor = currentCompatibleType.addSyntheticMethod(codegenBinding, isSuperAccess());", "+\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(codegenBinding, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc4f37a8f4b2761836858a192d8739e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "52b692ed21634a88100b21eba7894614726adbcf", "commitAfterChange": "0d07e8a93b23da2b01f8b175a71d349d77236596", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": "  public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\tthis.codegenBinding = this.binding.original();", "+\tMethodBinding codegenBinding = this.binding.original();", "-\tif (this.codegenBinding.isPrivate() && currentScope.enclosingSourceType() != (declaringClass = this.codegenBinding.declaringClass)) {", "+\tif (codegenBinding.isPrivate() && currentScope.enclosingSourceType() != (declaringClass = codegenBinding.declaringClass)) {", "-\t\t\tthis.codegenBinding.tagBits |= TagBits.ClearPrivateModifier;", "+\t\t\tcodegenBinding.tagBits |= TagBits.ClearPrivateModifier;", "-\t\t\tthis.syntheticAccessor = ((SourceTypeBinding) declaringClass).addSyntheticMethod(this.codegenBinding, isSuperAccess());", "-\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(this.codegenBinding, this);", "+\t\t\tthis.syntheticAccessor = ((SourceTypeBinding) declaringClass).addSyntheticMethod(codegenBinding, isSuperAccess());", "+\t\t\tcurrentScope.problemReporter().needToEmulateMethodAccess(codegenBinding, this);"]}], "num": 6299}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "910457d2228d3469c5d60ae3606d023f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30d5d454e86e6e2287cfc24c72d5e092", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "59ccfc02e85b3cb54d1260f0f13d4e77dbe5b35a", "commitAfterChange": "1f936417a416d90917cba09bee390af7aeeb85e8", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tpublic void completeMethodInfo( \t\t\tMethodBinding binding, \t\t\tint methodAttributeOffset, \t\t\tint attributesNumber)", "signatureAfterChange": " \tpublic void completeMethodInfo( \t\t\tMethodBinding binding, \t\t\tint methodAttributeOffset, \t\t\tint attributesNumber)", "diff": ["-\t\t\t\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "-\t\t\t\t\t\t\tArgument argument = arguments[i];", "-\t\t\t\t\t\t\tif ((argument.bits & ASTNode.HasTypeAnnotations) != 0) {", "-\t\t\t\t\t\t\t\targument.getAllAnnotationContexts(AnnotationTargetTypeConstants.METHOD_FORMAL_PARAMETER, i, allTypeAnnotationContexts);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tcompleteArgumentAnnotationInfo(arguments, allTypeAnnotationContexts);", "+\t\t\t\t}", "+\t\t\t} else if (binding.sourceLambda() != null) { // SyntheticMethodBinding, purpose : LambdaMethod.", "+\t\t\t\tLambdaExpression lambda = binding.sourceLambda();", "+\t\t\t\tif ((lambda.bits & ASTNode.HasTypeAnnotations) != 0) {", "+\t\t\t\t\tif (lambda.arguments != null)", "+\t\t\t\t\t\tcompleteArgumentAnnotationInfo(lambda.arguments, allTypeAnnotationContexts);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91e9004afac9dd7bcf379b0fb84133f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 47, "signatureBeforeChange": " public FieldBinding resolveTypeFor(FieldBinding field)", "signatureAfterChange": " public FieldBinding resolveTypeFor(FieldBinding field)", "diff": ["+\t", "+\tif (this != this.prototype)", "+\t\treturn this.prototype.resolveTypeFor(field);", "+", "+\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\t\t\tAnnotationBinding [] annotations = field.getAnnotations();", "+\t\t\t\tif (annotations != null && annotations != Binding.NO_ANNOTATIONS) {", "+\t\t\t\t\tASTNode.copySE8AnnotationsToType(initializationScope, field, annotations);", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_8 && !fieldType.isBaseType()) {", "-\t\t\t\t\tlong nullTagBits = field.tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\t\tif (nullTagBits != 0 && nullTagBits != (fieldType.tagBits & TagBits.AnnotationNullMASK))", "-\t\t\t\t\t\tfield.type = environment.createAnnotatedType(fieldType, nullTagBits);", "-\t\t\t\t\t// do not reset field.tagBits, since more fields may need to share this information (\"@NonNull Object o1, o2;\")", "-\t\t\t\t}"]}], "num": 6002}
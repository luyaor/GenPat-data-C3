{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1df9657fda5198cff03b7ce71382fce8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "160773299f3a978af4d2ccf7f67aa3e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "34fd0bfb3fb913c6a7a860ea19ebf8810b6cece2", "commitAfterChange": "8bcdcfb75f95b576660dfc4f1198f27277d3bd6c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate static ParameterizedGenericMethodBinding inferFromArgumentTypes(Scope scope, MethodBinding originalMethod, TypeBinding[] arguments, TypeBinding[] parameters, Map collectedSubstitutes, TypeBinding[] substitutes)", "signatureAfterChange": " \tprivate static ParameterizedGenericMethodBinding inferFromArgumentTypes(Scope scope, MethodBinding originalMethod, TypeBinding[] arguments, TypeBinding[] parameters, Map collectedSubstitutes, TypeBinding[] substitutes)", "diff": ["-\t\t\t\tif (paramLength != argLength // argument is passed as is ?", "-\t\t\t\t\t\t||  (lastArgument != NullBinding", "-\t\t\t\t\t\t\t\t&& (lastArgument.dimensions() == 0 || lastArgument.leafComponentType().isBaseType() != varargType.leafComponentType().isBaseType()))) { ", "-\t\t\t\t\tvarargType = ((ArrayBinding)varargType).elementsType(); // eliminate one array dimension", "+\t\t\t\tcheckVarargDimension: {", "+\t\t\t\t\tif (paramLength == argLength) {", "+\t\t\t\t\t\tif (lastArgument == NullBinding) break checkVarargDimension;", "+\t\t\t\t\t\tswitch (lastArgument.dimensions()) {", "+\t\t\t\t\t\t\tcase 0 :", "+\t\t\t\t\t\t\t\tbreak; // will remove one dim", "+\t\t\t\t\t\t\tcase 1 :", "+\t\t\t\t\t\t\t\tif (!lastArgument.leafComponentType().isBaseType()) break checkVarargDimension;", "+\t\t\t\t\t\t\t\tbreak; // will remove one dim", "+\t\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\t\tbreak checkVarargDimension;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t// eliminate one array dimension", "+\t\t\t\t\tvarargType = ((ArrayBinding)varargType).elementsType(); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39851a33af07dfd3901f169a5815d858", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "f6dabc318d65fd0d65d555aee28bfe07a5ee1d5c", "commitAfterChange": "3f2c0d9fcd67ecd96d749cdd59b57e23a6c7e0ef", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public static final boolean camelCaseMatch(char[] pattern, int patternStart, int patternEnd, char[] name, int nameStart, int nameEnd)", "signatureAfterChange": " public static final boolean camelCaseMatch(char[] pattern, int patternStart, int patternEnd, char[] name, int nameStart, int nameEnd)", "diff": ["-\t\tif ((patternChar = pattern[iPattern]) < ScannerHelper.MAX_OBVIOUS", "-\t\t\t\t? ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[patternChar] == ScannerHelper.C_LOWER_LETTER", "-\t\t\t\t: Character.isLowerCase(patternChar)) {", "-\t\t\tif (iPattern == 0 && name[iName] == patternChar) {", "+\t\tpatternChar = pattern[iPattern];", "+\t\tif (iPattern == 0) {", "+\t\t\tif (name[iName] == patternChar) {", "-\t\t\t// end of uppercase part of pattern", "-\t\t\tbreak nextPatternChar;", "+\t\t\t// first char must strictly match (upper/lower)", "+\t\t\treturn false;", "+\t\t} else {", "+\t\t\t// check patternChar, keep camelCasing only if uppercase", "+\t\t\tif (patternChar < ScannerHelper.MAX_OBVIOUS) {", "+\t\t\t\tswitch (ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[patternChar]) {", "+\t\t\t\t\tcase ScannerHelper.C_UPPER_LETTER :", "+\t\t\t\t\t\t// still uppercase", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\t// end of camelCase part of pattern", "+\t\t\t\t\t\tbreak nextPatternChar;\t\t\t\t}", "+\t\t\t} else if (Character.isJavaIdentifierPart(patternChar) ", "+\t\t\t\t\t\t\t&& !Character.isUpperCase(patternChar)) {", "+\t\t\t\t// end of camelCase part of pattern", "+\t\t\t\tbreak nextPatternChar;\t\t\t}"]}], "num": 51562}
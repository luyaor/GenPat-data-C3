{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dff4b67eb1b6b8551443a35c1ccbe462", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc5b06f8c8c80096fee5ad1e148400ce", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "139af85152abd28b521b1facd74797215d800fa6", "commitAfterChange": "df04cb9bfcfec194a3c1180d0af18a4bd840680a", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": " \tpublic void updateCycleParticipants(IClasspathEntry[] preferredClasspath, ArrayList visited, HashSet cycleParticipants, IWorkspaceRoot workspaceRoot)", "signatureAfterChange": " \tpublic void updateCycleParticipants(IClasspathEntry[] preferredClasspath, ArrayList visited, HashSet cycleParticipants, IWorkspaceRoot workspaceRoot)", "diff": ["-\t\t\t\t\tproject.updateCycleParticipants(null, visited, cycleParticipants, workspaceRoot);", "+\t\t\t\t\tif (!cycleParticipants.contains(this) || !cycleParticipants.contains(project)) // skip if both are already part of cycle", "+\t\t\t\t\t\tproject.updateCycleParticipants(null, visited, cycleParticipants, workspaceRoot);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea8aa22022bbe4891e43c36cea789d92", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "11204112fa5839fef68c4b511b3aece9ba6627e4", "commitAfterChange": "cefc7f3f8677282aa49e610700500999ffcaffcb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tif (expressionType != null && checkedType != null && NullAnnotationMatching.analyse(checkedType, expressionType, -1).isAnyMismatch()) {", "-\t\tscope.problemReporter().nullAnnotationUnsupportedLocation(this.type);", "+\tif (expressionType != null && checkedType != null && checkedType.hasNullTypeAnnotations()) {", "+\t\t// don't complain if the entire operation is redundant anyway", "+\t\tif (!expressionType.isCompatibleWith(checkedType) || NullAnnotationMatching.analyse(checkedType, expressionType, -1).isAnyMismatch())", "+\t\t\tscope.problemReporter().nullAnnotationUnsupportedLocation(this.type);"]}], "num": 9681}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f73ce1b34c497b1f81535e438eb8b71", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f1355da5fa2dd5fa6620bfed00fd71d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tchar[] source, \t\tString unitName, \t\tIJavaProject project, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tchar[] source, \t\tString unitName, \t\tIJavaProject project, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor)", "diff": ["-\t\tif (unitName == null && project != null) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\tif (project == null) {", "-\t\t\t// this just reduces to the other simplest case", "-\t\t\treturn parseCompilationUnit(source);", "-\t\t}", "-\t\tif (owner == null) {", "-\t\t\towner = DefaultWorkingCopyOwner.PRIMARY;", "-\t\t}", "-\t", "-\t\tCompilationUnitDeclaration compilationUnitDeclaration = null;", "-\t\ttry {", "-\t\t\t// parse and resolve", "-\t\t\tcompilationUnitDeclaration =", "-\t\t\t\tCompilationUnitResolver.resolve(", "-\t\t\t\t\tsource,", "-\t\t\t\t\tunitName,", "-\t\t\t\t\tproject,", "-\t\t\t\t\tfalse/*don't cleanup*/,", "-\t\t\t\t\towner,", "-\t\t\t\t\tmonitor);", "-\t\t\tASTConverter converter = new ASTConverter(project.getOptions(true), true, monitor);", "-\t\t\tAST ast = new AST();", "-\t\t\tBindingResolver resolver = new DefaultBindingResolver(compilationUnitDeclaration.scope);", "-\t\t\tast.setBindingResolver(resolver);", "-\t\t\tconverter.setAST(ast);", "-\t\t", "-\t\t\tCompilationUnit cu = converter.convert(compilationUnitDeclaration, source);", "-\t\t\tcu.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);", "-\t\t\tresolver.storeModificationCount(ast.modificationCount());", "-\t\t\treturn cu;", "-\t\t} catch(JavaModelException e) {", "-\t\t\t/* if a JavaModelException is thrown trying to retrieve the name environment", "-\t\t\t * then we simply do a parsing without creating bindings.", "-\t\t\t * Therefore all binding resolution will return null.", "-\t\t\t */", "-\t\t\treturn parseCompilationUnit(source);\t\t\t", "-\t\t} finally {", "-\t\t\tif (compilationUnitDeclaration != null) {", "-\t\t\t\tcompilationUnitDeclaration.cleanUp();", "-\t\t\t}", "-\t\t}", "+\t\tASTParser c = ASTParser.internalNewParser2();", "+\t\tc.setSource(source);", "+\t\tc.setUnitName(unitName);", "+\t\tc.setProject(project);", "+\t\tc.setWorkingCopyOwner(owner);", "+\t\tASTNode result = c.createAST(monitor);", "+\t\treturn (CompilationUnit) result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f10caf40bbe3e653542c47f1635bd36e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/batch/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationProcessorManager.java", "commitBeforeChange": "9d4f7131389390a16a995494da191d8ab6c07c5a", "commitAfterChange": "aa852841b1dd73414418bf5fc5420a74b80d0cd9", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void configure(Main batchCompiler, String[] commandLineArguments)", "signatureAfterChange": "  \t@Override \tpublic void configure(Main batchCompiler, String[] commandLineArguments)", "diff": ["-\t\tif (batchCompiler instanceof EclipseCompiler) {", "-\t\t\tthis.fileManager = ((EclipseCompiler) batchCompiler).fileManager;", "-\t\t} else {", "-\t\t\tString encoding = (String) batchCompiler.options.get(CompilerOptions.OPTION_Encoding);", "-\t\t\tCharset charset = encoding != null ? Charset.forName(encoding) : null;", "-\t\t\tJavaFileManager manager = new EclipseFileManager(batchCompiler, batchCompiler.compilerLocale, charset);", "-\t\t\tArrayList<String> options = new ArrayList<String>();", "-\t\t\tfor (String argument : commandLineArguments) {", "-\t\t\t\toptions.add(argument);", "-\t\t\t}", "-\t\t\tfor (Iterator<String> iterator = options.iterator(); iterator.hasNext(); ) {", "-\t\t\t\tmanager.handleOption(iterator.next(), iterator);", "-\t\t\t}", "-\t\t\tthis.fileManager = manager;", "+\t\tif (null != _batchCompiler) {", "+\t\t\tthrow new IllegalStateException(", "+\t\t\t\t\t\"Calling configure() more than once on an AnnotationProcessorManager is not supported\");", "+\t\t}", "+\t\t_batchCompiler  = batchCompiler;", "+\t\t_processors = new ArrayList<ProcessorInfo>();", "+\t\tBatchProcessingEnvImpl processingEnv = new BatchProcessingEnvImpl(this, batchCompiler, commandLineArguments);", "+\t\t_processingEnv = processingEnv;", "+\t\t_procLoader = processingEnv.getFileManager().getClassLoader(StandardLocation.ANNOTATION_PROCESSOR_PATH);", "+\t\t_commandLineProcessors = parseCommandLineProcessors(commandLineArguments);", "+\t\tif (null != _commandLineProcessors) {", "+\t\t\t_commandLineProcessorIter = _commandLineProcessors.iterator();"]}], "num": 50390}
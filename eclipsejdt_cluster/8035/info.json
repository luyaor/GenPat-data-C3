{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4202b5fa9f6e99e17211d46f156a01a8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a7837099f389f8b713150258bfd4574", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "c48ecebe36df1bdca1948a66baeb643827a9b9c4", "commitAfterChange": "df8a00dea42b2c33f742d8ce1045c2aa42b28f3e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate void checkForInheritedMemberTypes(SourceTypeBinding sourceType)", "signatureAfterChange": "  \tprivate void checkForInheritedMemberTypes(SourceTypeBinding sourceType)", "diff": ["-\t\tReferenceBinding[][] interfacesToVisit = null;", "-\t\tint lastPosition = -1;", "+\t\tReferenceBinding[] interfacesToVisit = null;", "+\t\tint nextPosition = 0;", "-\t\t\t\tif (interfacesToVisit == null)", "-\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[5][];", "-\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\t\t\tif (interfacesToVisit == null) {", "+\t\t\t\t\tinterfacesToVisit = itsInterfaces;", "+\t\t\t\t\tnextPosition = interfacesToVisit.length;", "+\t\t\t\t} else {", "+\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {", "-\t\t\t\t\tReferenceBinding anInterface = interfaces[j];", "-\t\t\t\t\tif ((anInterface.tagBits & TagBits.HasNoMemberTypes) == 0) { // skip interface if it already knows it has no member types", "-\t\t\t\t\t\tif (anInterface.hasMemberTypes()) // avoid resolving member types eagerly", "-\t\t\t\t\t\t\treturn;", "+\t\t\tfor (int i = 0; i < nextPosition; i++) {", "+\t\t\t\tReferenceBinding anInterface = interfacesToVisit[i];", "+\t\t\t\tif ((anInterface.tagBits & TagBits.HasNoMemberTypes) == 0) { // skip interface if it already knows it has no member types", "+\t\t\t\t\tif (anInterface.hasMemberTypes()) // avoid resolving member types eagerly", "+\t\t\t\t\t\treturn;", "-\t\t\t\t\t\tneedToTag = true;", "-\t\t\t\t\t\tReferenceBinding[] itsInterfaces = anInterface.superInterfaces();", "-\t\t\t\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "-\t\t\t\t\t\t\tif (itsInterfaces == null)", "-\t\t\t\t\t\t\t\treturn; // in code assist cases when source types are added late, may not be finished connecting hierarchy", "-\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\t\t\t\tneedToTag = true;", "+\t\t\t\t\tReferenceBinding[] itsInterfaces = anInterface.superInterfaces();", "+\t\t\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "+\t\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "-\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)", "-\t\t\t\t\t\tinterfaces[j].tagBits |= TagBits.HasNoMemberTypes;", "-\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < nextPosition; i++)", "+\t\t\t\t\tinterfacesToVisit[i].tagBits |= TagBits.HasNoMemberTypes;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7995fa9a21878215824e9f230a1b990", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "2dddead53fae51c0e7e8d687f7c1cde75a662d37", "commitAfterChange": "a25072f2f70a7d1a2734766b336bcde1a84f9c27", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprivate void checkForInheritedMemberTypes(SourceTypeBinding sourceType)", "signatureAfterChange": "  \tprivate void checkForInheritedMemberTypes(SourceTypeBinding sourceType)", "diff": ["+\t\t// assumes super types have already been checked & tagged", "-\t\t\tif ((currentType.tagBits & HasNoMemberTypes) != 0)", "-\t\t\t\tbreak; // already know it has no inherited member types, can stop looking up", "-\t\t\t\t// TODO (kent) why not simply return ? to avoid re-tagging at bottom", "-\t\t\t\treturn; // has member types", "+\t\t\t\treturn;", "+", "-\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\tinterfacesToVisit,", "-\t\t\t\t\t\t0,", "-\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],", "-\t\t\t\t\t\t0,", "-\t\t\t\t\t\tlastPosition);", "+\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t} while ((currentType = currentType.superclass()) != null);", "+\t\t} while ((currentType = currentType.superclass()) != null && (currentType.tagBits & HasNoMemberTypes) == 0);", "-\t\tboolean hasMembers = false;", "-\t\t\tdone : for (int i = 0; i <= lastPosition; i++) {", "+\t\t\t// contains the interfaces between the sourceType and any superclass, which was tagged as having no member types", "+\t\t\tboolean needToTag = false;", "+\t\t\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\t\t\t\tif ((anInterface.tagBits & InterfaceVisited) == 0) { // if interface as not already been visited", "-\t\t\t\t\t\tanInterface.tagBits |= InterfaceVisited;", "-\t\t\t\t\t\tif ((anInterface.tagBits & HasNoMemberTypes) != 0)", "-\t\t\t\t\t\t\tcontinue; // already know it has no inherited member types", "-\t\t\t\t\t\tif (anInterface.memberTypes() != NoMemberTypes) {", "-\t\t\t\t\t\t\thasMembers = true;", "-\t\t\t\t\t\t\tbreak done;", "-\t\t\t\t\t\t}", "+\t\t\t\t\tif ((anInterface.tagBits & HasNoMemberTypes) == 0) { // skip interface if it already knows it has no member types", "+\t\t\t\t\t\tif (anInterface.hasMemberTypes()) // avoid resolving member types eagerly", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\tneedToTag = true;", "-\t\t\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\t\t\tinterfacesToVisit,", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],", "-\t\t\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t\t\tlastPosition);", "+\t\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {", "-\t\t\t\t\tinterfaces[j].tagBits &= ~InterfaceVisited;", "-\t\t\t\t\tif (!hasMembers)", "+\t\t\tif (needToTag) {", "+\t\t\t\tfor (int i = 0; i <= lastPosition; i++) {", "+\t\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "+\t\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)", "-\t\tif (!hasMembers) {", "-\t\t\tcurrentType = sourceType;", "-\t\t\tdo {", "-\t\t\t\tcurrentType.tagBits |= HasNoMemberTypes;", "-\t\t\t} while ((currentType = currentType.superclass()) != null);", "-\t\t}", "+\t\t// tag the sourceType and all of its superclasses, unless they have already been tagged", "+\t\tcurrentType = sourceType;", "+\t\tdo {", "+\t\t\tcurrentType.tagBits |= HasNoMemberTypes;", "+\t\t} while ((currentType = currentType.superclass()) != null && (currentType.tagBits & HasNoMemberTypes) == 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c92de63abe45843040bd16d184c50b0d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "c48ecebe36df1bdca1948a66baeb643827a9b9c4", "commitAfterChange": "df8a00dea42b2c33f742d8ce1045c2aa42b28f3e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  private void addDefaultAbstractMethods()", "signatureAfterChange": "  private void addDefaultAbstractMethods()", "diff": ["-\t\tReferenceBinding[][] interfacesToVisit = new ReferenceBinding[5][];", "-\t\tint lastPosition = 0;", "-\t\tinterfacesToVisit[lastPosition] = superInterfaces();", "-\t\tMethodBinding[] defaultAbstracts = null;", "-\t\tint defaultAbstractsCount = 0;", "-\t\tfor (int i = 0; i <= lastPosition; i++) {", "-\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];", "-\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {", "-\t\t\t\tReferenceBinding superType = interfaces[j];", "+\t\tReferenceBinding[] itsInterfaces = superInterfaces();", "+\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "+\t\t\tMethodBinding[] defaultAbstracts = null;", "+\t\t\tint defaultAbstractsCount = 0;", "+\t\t\tReferenceBinding[] interfacesToVisit = itsInterfaces;", "+\t\t\tint nextPosition = interfacesToVisit.length;", "+\t\t\tfor (int i = 0; i < nextPosition; i++) {", "+\t\t\t\tReferenceBinding superType = interfacesToVisit[i];", "-\t\t\t\t\t\tif (implementsMethod(method)) {", "+\t\t\t\t\t\tif (implementsMethod(method))", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tfor(int k = 0; k < defaultAbstractsCount; k++) {", "-\t\t\t\t\t\t\t\tMethodBinding alreadyAddedMethod = \tdefaultAbstracts[k];", "-\t\t\t\t\t\t\t\tif (CharOperation.equals(alreadyAddedMethod.selector, method.selector)", "-\t\t\t\t\t\t\t\t\t\t&& alreadyAddedMethod.areParametersEqual(method)) {", "+\t\t\t\t\t\t\tfor (int k = 0; k < defaultAbstractsCount; k++) {", "+\t\t\t\t\t\t\t\tMethodBinding alreadyAdded = defaultAbstracts[k];", "+\t\t\t\t\t\t\t\tif (CharOperation.equals(alreadyAdded.selector, method.selector) && alreadyAdded.areParametersEqual(method))", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (defaultAbstractsCount == defaultAbstracts.length) {", "-\t\t\t\t\t\t\tSystem.arraycopy(defaultAbstracts, 0, defaultAbstracts = new MethodBinding[2*defaultAbstractsCount], 0, defaultAbstractsCount);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (defaultAbstractsCount == defaultAbstracts.length)", "+\t\t\t\t\t\t\tSystem.arraycopy(defaultAbstracts, 0, defaultAbstracts = new MethodBinding[2 * defaultAbstractsCount], 0, defaultAbstractsCount);", "-\t\t\t\t\tReferenceBinding[] itsInterfaces = superType.superInterfaces();", "-\t\t\t\t\tif (itsInterfaces != Binding.NO_SUPERINTERFACES) {", "-\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)", "-\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);", "-\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;", "+\t\t\t\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "+\t\t\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "+\t\t\t\t\t\t}", "-\t\t}", "-\t\tif (defaultAbstractsCount > 0) {", "-\t\t\tint length = this.methods.length;", "-\t\t\tSystem.arraycopy(this.methods, 0, this.methods = new MethodBinding[length+defaultAbstractsCount], 0, length);", "-\t\t\tSystem.arraycopy(defaultAbstracts, 0, this.methods, length, defaultAbstractsCount);", "-\t\t\t// re-sort methods", "-\t\t\tlength = length+defaultAbstractsCount;", "-\t\t\tif (length > 1) {", "-\t\t\t\tReferenceBinding.sortMethods(this.methods, 0, length);", "+\t\t\tif (defaultAbstractsCount > 0) {", "+\t\t\t\tint length = this.methods.length;", "+\t\t\t\tSystem.arraycopy(this.methods, 0, this.methods = new MethodBinding[length + defaultAbstractsCount], 0, length);", "+\t\t\t\tSystem.arraycopy(defaultAbstracts, 0, this.methods, length, defaultAbstractsCount);", "+\t\t\t\t// re-sort methods", "+\t\t\t\tlength = length + defaultAbstractsCount;", "+\t\t\t\tif (length > 1)", "+\t\t\t\t\tReferenceBinding.sortMethods(this.methods, 0, length);", "+\t\t\t\t// this.tagBits |= TagBits.AreMethodsSorted; -- already set in #methods()", "-\t\t\t// this.tagBits |= TagBits.AreMethodsSorted; -- already set in #methods()"]}], "num": 8035}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23565bb2faa4bcf2b0e612c095bf02f5", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31aa424c57929e2eec6d69be056a6cf9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "8d0a5299117e5fc84e729116ac52feef1385b968", "commitAfterChange": "527793c3501c0044ba7f65ec00ff957c7a149690", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " \tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems)", "signatureAfterChange": " \tprotected IClasspathEntry[] readClasspathFile(boolean createMarker, boolean logProblems)", "diff": ["-\t\t\tNodeList list = cpElement.getChildNodes();", "+\t\t\tNodeList list = cpElement.getElementsByTagName(\"classpathentry\"); //$NON-NLS-1$", "-\t\t\t\tshort type = node.getNodeType();", "-\t\t\t\tif (type == Node.ELEMENT_NODE) {", "+\t\t\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {", "-\t\t\t\t\tif (cpeElement.getNodeName().equalsIgnoreCase(\"classpathentry\")) { //$NON-NLS-1$", "-\t\t\t\t\t\tString cpeElementKind = cpeElement.getAttribute(\"kind\"); //$NON-NLS-1$", "-\t\t\t\t\t\tString pathStr = cpeElement.getAttribute(\"path\"); //$NON-NLS-1$", "-\t\t\t\t\t\t// ensure path is absolute", "-\t\t\t\t\t\tIPath path = new Path(pathStr);", "-\t\t\t\t\t\tint kind = kindFromString(cpeElementKind);", "-\t\t\t\t\t\tif (kind != IClasspathEntry.CPE_VARIABLE && kind != IClasspathEntry.CPE_CONTAINER && !path.isAbsolute()) {", "-\t\t\t\t\t\t\tpath = projectPath.append(path);", "+\t\t\t\t\tString cpeElementKind = cpeElement.getAttribute(\"kind\"); //$NON-NLS-1$", "+\t\t\t\t\tString pathStr = cpeElement.getAttribute(\"path\"); //$NON-NLS-1$", "+\t\t\t\t\t// ensure path is absolute", "+\t\t\t\t\tIPath path = new Path(pathStr);", "+\t\t\t\t\tint kind = kindFromString(cpeElementKind);", "+\t\t\t\t\tif (kind != IClasspathEntry.CPE_VARIABLE && kind != IClasspathEntry.CPE_CONTAINER && !path.isAbsolute()) {", "+\t\t\t\t\t\tpath = projectPath.append(path);", "+\t\t\t\t\t}", "+\t\t\t\t\t// source attachment info (optional)", "+\t\t\t\t\tString sourceAttachmentPathStr = cpeElement.getAttribute(\"sourcepath\");\t//$NON-NLS-1$", "+\t\t\t\t\tIPath sourceAttachmentPath =", "+\t\t\t\t\t\tsourceAttachmentPathStr.equals(\"\") ? null : new Path(sourceAttachmentPathStr); //$NON-NLS-1$", "+\t\t\t\t\tString sourceAttachmentRootPathStr = cpeElement.getAttribute(\"rootpath\"); //$NON-NLS-1$", "+\t\t\t\t\tIPath sourceAttachmentRootPath =", "+\t\t\t\t\t\tsourceAttachmentRootPathStr.equals(\"\") //$NON-NLS-1$", "+\t\t\t\t\t\t\t? null", "+\t\t\t\t\t\t\t: new Path(sourceAttachmentRootPathStr);", "+\t\t\t\t\t", "+\t\t\t\t\t// exported flag (optional)", "+\t\t\t\t\tboolean isExported = cpeElement.getAttribute(\"exported\").equals(\"true\"); //$NON-NLS-1$ //$NON-NLS-2$", "+", "+\t\t\t\t\t// exclusion patterns (optional)", "+\t\t\t\t\tString exclusion = cpeElement.getAttribute(\"excluding\"); //$NON-NLS-1$ ", "+\t\t\t\t\tString[] exclusionPatterns = null;", "+\t\t\t\t\tif (!exclusion.equals(\"\")) {", "+\t\t\t\t\t\tchar[][] patterns = CharOperation.splitOn('|', exclusion.toCharArray());", "+\t\t\t\t\t\tint patternCount;", "+\t\t\t\t\t\tif ((patternCount  = patterns.length) > 0) {", "+\t\t\t\t\t\t\texclusionPatterns = new String[patternCount];", "+\t\t\t\t\t\t\tfor (int j = 0; j < patterns.length; j++){", "+\t\t\t\t\t\t\t\texclusionPatterns[i] = new String(patterns[j]);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t// source attachment info (optional)", "-\t\t\t\t\t\tString sourceAttachmentPathStr = cpeElement.getAttribute(\"sourcepath\");\t//$NON-NLS-1$", "-\t\t\t\t\t\tIPath sourceAttachmentPath =", "-\t\t\t\t\t\t\tsourceAttachmentPathStr.equals(\"\") ? null : new Path(sourceAttachmentPathStr); //$NON-NLS-1$", "-\t\t\t\t\t\tString sourceAttachmentRootPathStr = cpeElement.getAttribute(\"rootpath\"); //$NON-NLS-1$", "-\t\t\t\t\t\tIPath sourceAttachmentRootPath =", "-\t\t\t\t\t\t\tsourceAttachmentRootPathStr.equals(\"\") //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t? null", "-\t\t\t\t\t\t\t\t: new Path(sourceAttachmentRootPathStr);", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// exported flag", "-\t\t\t\t\t\tboolean isExported = cpeElement.getAttribute(\"exported\").equals(\"true\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t", "-\t\t\t\t\t\t// recreate the CP entry", "-\t\t\t\t\t\tswitch (kind) {", "-\t\t\t\t", "-\t\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT :", "-\t\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t// recreate the CP entry", "+\t\t\t\t\tswitch (kind) {", "+\t\t\t", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT :", "+\t\t\t\t\t\t\tpaths.add(JavaCore.newProjectEntry(path, isExported));", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY :", "+\t\t\t\t\t\t\tpaths.add(JavaCore.newLibraryEntry(", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpath,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsourceAttachmentPath,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsourceAttachmentRootPath,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisExported));", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE :", "+\t\t\t\t\t\t\t// must be an entry in this project or specify another project", "+\t\t\t\t\t\t\tString projSegment = path.segment(0);", "+\t\t\t\t\t\t\tif (projSegment != null && projSegment.equals(getElementName())) {", "+\t\t\t\t\t\t\t\t// this project", "+\t\t\t\t\t\t\t\tpaths.add(JavaCore.newSourceEntry(path, exclusionPatterns));", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t// another project", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY :", "-\t\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;", "-\t\t\t\t\t\t\t\tpaths.add(JavaCore.newLibraryEntry(", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpath,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsourceAttachmentPath,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsourceAttachmentRootPath,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisExported));", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE :", "-\t\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;", "-\t\t\t\t\t\t\t\t// must be an entry in this project or specify another project", "-\t\t\t\t\t\t\t\tString projSegment = path.segment(0);", "-\t\t\t\t\t\t\t\tif (projSegment != null && projSegment.equals(getElementName())) {", "-\t\t\t\t\t\t\t\t\t// this project", "-\t\t\t\t\t\t\t\t\tpaths.add(JavaCore.newSourceEntry(path));", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t// another project", "-\t\t\t\t\t\t\t\t\tpaths.add(JavaCore.newProjectEntry(path, isExported));", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t", "-\t\t\t\t\t\t\tcase IClasspathEntry.CPE_VARIABLE :", "-\t\t\t\t\t\t\t\tpaths.add(JavaCore.newVariableEntry(", "-\t\t\t\t\t\t\t\t\t\tpath,", "-\t\t\t\t\t\t\t\t\t\tsourceAttachmentPath,", "-\t\t\t\t\t\t\t\t\t\tsourceAttachmentRootPath, ", "-\t\t\t\t\t\t\t\t\t\tisExported));", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tcase IClasspathEntry.CPE_CONTAINER :", "-\t\t\t\t\t\t\t\tpaths.add(JavaCore.newContainerEntry(", "-\t\t\t\t\t\t\t\t\t\tpath,", "-\t\t\t\t\t\t\t\t\t\tisExported));", "-\t\t\t\t\t\t\t\tbreak;", "-\t", "-\t\t\t\t\t\t\tcase ClasspathEntry.K_OUTPUT :", "-\t\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;", "-\t\t\t\t\t\t\t\tpaths.add(new ClasspathEntry(", "-\t\t\t\t\t\t\t\t\t\tClasspathEntry.K_OUTPUT,", "-\t\t\t\t\t\t\t\t\t\tIClasspathEntry.CPE_LIBRARY,", "-\t\t\t\t\t\t\t\t\t\tpath,", "-\t\t\t\t\t\t\t\t\t\tnull, // exclusion patterns", "-\t\t\t\t\t\t\t\t\t\tnull, // source attachment", "-\t\t\t\t\t\t\t\t\t\tnull, // source attachment root", "-\t\t\t\t\t\t\t\t\t\tfalse));", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\tthrow new Assert.AssertionFailedException(Util.bind(\"classpath.unknownKind\", cpeElementKind)); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_VARIABLE :", "+\t\t\t\t\t\t\tpaths.add(JavaCore.newVariableEntry(", "+\t\t\t\t\t\t\t\t\tpath,", "+\t\t\t\t\t\t\t\t\tsourceAttachmentPath,", "+\t\t\t\t\t\t\t\t\tsourceAttachmentRootPath, ", "+\t\t\t\t\t\t\t\t\tisExported));", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_CONTAINER :", "+\t\t\t\t\t\t\tpaths.add(JavaCore.newContainerEntry(", "+\t\t\t\t\t\t\t\t\tpath,", "+\t\t\t\t\t\t\t\t\tisExported));", "+\t\t\t\t\t\t\tbreak;", "+", "+\t\t\t\t\t\tcase ClasspathEntry.K_OUTPUT :", "+\t\t\t\t\t\t\tif (!path.isAbsolute()) return null;", "+\t\t\t\t\t\t\tpaths.add(new ClasspathEntry(", "+\t\t\t\t\t\t\t\t\tClasspathEntry.K_OUTPUT,", "+\t\t\t\t\t\t\t\t\tIClasspathEntry.CPE_LIBRARY,", "+\t\t\t\t\t\t\t\t\tpath,", "+\t\t\t\t\t\t\t\t\tnull, // exclusion patterns", "+\t\t\t\t\t\t\t\t\tnull, // source attachment", "+\t\t\t\t\t\t\t\t\tnull, // source attachment root", "+\t\t\t\t\t\t\t\t\tfalse));", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tthrow new Assert.AssertionFailedException(Util.bind(\"classpath.unknownKind\", cpeElementKind)); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9aebe5cc5c5ed77fff83cb5505819d20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic static IClasspathEntry elementDecode(Element element, IJavaProject project)", "signatureAfterChange": " \t \tpublic static IClasspathEntry elementDecode(Element element, IJavaProject project)", "diff": ["+\t\t// inclusion patterns (optional)", "+\t\tString inclusion = element.getAttribute(\"including\"); //$NON-NLS-1$ ", "+\t\tIPath[] inclusionPatterns = INCLUDE_ALL;", "+\t\tif (!inclusion.equals(\"\")) { //$NON-NLS-1$ ", "+\t\t\tchar[][] patterns = CharOperation.splitOn('|', inclusion.toCharArray());", "+\t\t\tint patternCount;", "+\t\t\tif ((patternCount  = patterns.length) > 0) {", "+\t\t\t\tinclusionPatterns = new IPath[patternCount];", "+\t\t\t\tfor (int j = 0; j < patterns.length; j++){", "+\t\t\t\t\tinclusionPatterns[j] = new Path(new String(patterns[j]));", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+", "-\t\tIPath[] exclusionPatterns = ClasspathEntry.NO_EXCLUSION_PATTERNS;", "+\t\tIPath[] exclusionPatterns = EXCLUDE_NONE;", "-\t\t\t\t\treturn JavaCore.newSourceEntry(path, exclusionPatterns, outputLocation);", "+\t\t\t\t\treturn JavaCore.newSourceEntry(path, inclusionPatterns, exclusionPatterns, outputLocation);", "-\t\t\t\t\t\tClasspathEntry.NO_EXCLUSION_PATTERNS, ", "+\t\t\t\t\t\tClasspathEntry.INCLUDE_ALL, ", "+\t\t\t\t\t\tClasspathEntry.EXCLUDE_NONE, "]}], "num": 23353}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aa284c6b68b3382a45955e819a432b25", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c49584b4eca559175b7abee9ea9b2b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "8ae80deddfff27191b17a90b160146d99f01df18", "commitAfterChange": "c5c6bcddff761c0a416425cff989d848fca26469", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tfinal boolean hasEmptyAction = this.action == null", "-\t\t\t\t|| this.action.isEmptyBlock()", "-\t\t\t\t|| ((this.action.bits & IsUsefulEmptyStatement) != 0);", "-\t\t\t\tif (hasEmptyAction) break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d8e5d605b4316897ff3b86f32921ead", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "09f42f58bcdf2fa84ccd2b8b65f28ab3036222ca", "commitAfterChange": "57e8dd41219d846363c918d62edb5007994c5c79", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 35, "signatureBeforeChange": " public InferenceContext18 freshInferenceContext(Scope scope)", "signatureAfterChange": " public InferenceContext18 freshInferenceContext(Scope scope)", "diff": ["-public InferenceContext18 freshInferenceContext(Scope scope) {", "-\tInferenceContext18 outer = this.inferenceContext != null ? this.inferenceContext.outerContext : null;", "-\tthis.inferenceContext = new InferenceContext18(scope, this.arguments, this);", "-\tthis.inferenceContext.outerContext = outer;", "-\treturn this.inferenceContext;", "-}", "+// -- Interface InvocationSite: --", "+public InferenceContext18 freshInferenceContext(Scope scope) {", "+\treturn new InferenceContext18(scope, this.arguments, this);"]}], "num": 11915}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "90fce1a35abdf25b784d783dfadc49d3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7aa8f33d9998d70ab5b825bcfe85902b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "37bfadecd597b554760a27206f364cc5b3777c73", "commitAfterChange": "375dcbee487ab6274ddf2b60c23e3979a6bc7b7e", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprotected boolean parseReference() throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseReference() throws InvalidInputException", "diff": ["-\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\treturn createFakeReference(start);", "-\t\t\t\t\tcase TerminalTokens.TokenNameLESS : // @see \"<a href=\"URL#Value\">label</a>", "+\t\t\t\t\tcase TerminalTokens.TokenNameLESS : // @see <a href=\"URL#Value\">label</a>", "-\t\t\t\t\t\t\tif (verifyEndLine(previousPosition)) return true;", "+\t\t\t\t\t\t\tif (verifyEndLine(previousPosition)) {", "+\t\t\t\t\t\t\t\treturn createFakeReference(start);", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89d6f5693f37a0ce5de2b7d4870bd86b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java", "commitBeforeChange": "f338c86815ffb4c165b8024ba4f28cade0b2b75f", "commitAfterChange": "a98d7d87df415161ba75f53acbdbe8d316ea160c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void buildMoreCompletionContext(Expression expression)", "signatureAfterChange": " private void buildMoreCompletionContext(Expression expression)", "diff": ["-\tif(parentNode != null) {", "-\t\tthis.currentElement = this.currentElement.add((Statement)parentNode, 0);", "-\t} else {", "-\t\tthis.currentElement = this.currentElement.add((Statement)wrapWithExplicitConstructorCallIfNeeded(expression), 0);", "-\t\tif(this.lastCheckPoint < expression.sourceEnd) {", "-\t\t\tthis.lastCheckPoint = expression.sourceEnd + 1;", "+\t// Do not add assist node/parent into the recovery system if we are inside a lambda. The lambda will be fully recovered including the containing statement and added.", "+\tif (lastIndexOfElement(K_LAMBDA_EXPRESSION_DELIMITER) < 0) {", "+\t\tif(parentNode != null) {", "+\t\t\tthis.currentElement = this.currentElement.add((Statement)parentNode, 0);", "+\t\t} else {", "+\t\t\tthis.currentElement = this.currentElement.add((Statement)wrapWithExplicitConstructorCallIfNeeded(expression), 0);", "+\t\t\tif(this.lastCheckPoint < expression.sourceEnd) {", "+\t\t\t\tthis.lastCheckPoint = expression.sourceEnd + 1;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1818bf502c95fd1fb1ffd99b99957f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "78310b6881d29e4104dd5ac0bf79c342409c9931", "commitAfterChange": "5ceefbeb66afbd6b6f84ecf2da328f9e9c0ece67", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private void buildMoreCompletionContext(Expression expression)", "signatureAfterChange": " private void buildMoreCompletionContext(Expression expression)", "diff": ["-", "-\t\t\tthis.assistNodeParent = ((RecoveredField) this.currentElement).fieldDeclaration;", "+\t\t\tif (lastIndexOfElement(K_LAMBDA_EXPRESSION_DELIMITER) <= lastIndexOfElement(K_FIELD_INITIALIZER_DELIMITER))", "+\t\t\t\tthis.assistNodeParent = ((RecoveredField) this.currentElement).fieldDeclaration;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd96212f705dce2dcc915f8f43fe586c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java", "commitBeforeChange": "f338c86815ffb4c165b8024ba4f28cade0b2b75f", "commitAfterChange": "a98d7d87df415161ba75f53acbdbe8d316ea160c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void attachOrphanCompletionNode()", "signatureAfterChange": " protected void attachOrphanCompletionNode()", "diff": ["-\t\t\tStatement statement = (Statement) orphan;", "-\t\t\tthis.currentElement = this.currentElement.add(statement, 0);", "+\t\t\tif (lastIndexOfElement(K_LAMBDA_EXPRESSION_DELIMITER) < 0) { // lambdas are recovered up to the containing expression statement and will carry along the assist node anyways.", "+\t\t\t\tStatement statement = (Statement) orphan;", "+\t\t\t\tthis.currentElement = this.currentElement.add(statement, 0);", "+\t\t\t}"]}], "num": 3271}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21a107f68408219508d66083e37a25eb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ea6169b2be66859e48e1db0a75dae7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "b8aa3311452be518b7f96e1cdb47c5f16b1e4cf4", "commitAfterChange": "8875593d9253c455d8f189d55bb69262f4967ae1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " MethodBinding createMethod(AbstractMethodDeclaration method)", "signatureAfterChange": " MethodBinding createMethod(AbstractMethodDeclaration method)", "diff": ["-\t\tif (declaringClass.isInterface()) // interface or annotation type", "-\t\t\tmodifiers |= ClassFileConstants.AccPublic | ClassFileConstants.AccAbstract;", "+\t\tif (declaringClass.isInterface()) {// interface or annotation type", "+\t\t\tif (method.isDefaultMethod()) {", "+\t\t\t\tmodifiers |= ClassFileConstants.AccPublic; // default method is not abstract", "+\t\t\t} else {", "+\t\t\t\tmodifiers |= ClassFileConstants.AccPublic | ClassFileConstants.AccAbstract;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaf8b53f7785cc496577fcc82361c2a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "8b0f83ab2fc2f0377aa0a160aaebc6cf11976024", "commitAfterChange": "841d4b99f7f88577aa004d23df8444d60d488b4b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate void checkAndSetModifiersForConstructor(MethodBinding methodBinding)", "signatureAfterChange": " \tprivate void checkAndSetModifiersForConstructor(MethodBinding methodBinding)", "diff": ["-\t\t// if the receiver's declaring class is a private nested type, then make sure the receiver is not private (causes problems for inner type emulation)", "-\t\tif (declaringClass.isPrivate() && (modifiers & ClassFileConstants.AccPrivate) != 0)", "-\t\t\tmodifiers &= ~ClassFileConstants.AccPrivate;", "+//\t\t// if the receiver's declaring class is a private nested type, then make sure the receiver is not private (causes problems for inner type emulation)", "+//\t\tif (declaringClass.isPrivate() && (modifiers & ClassFileConstants.AccPrivate) != 0)", "+//\t\t\tmodifiers &= ~ClassFileConstants.AccPrivate;"]}], "num": 58918}
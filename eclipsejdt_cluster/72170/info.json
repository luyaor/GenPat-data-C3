{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac64b506036e70c5e67a9b9f56004bfc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09113306d7ccafe0271d2c0e9781f20f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceModelTests.java", "commitBeforeChange": "4119a65befb0f1b826133c8b40790cea36510774", "commitAfterChange": "199c84f2cae998bf19dec5ba0cb5f860d990b3fa", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void testNameLookupFindKnownType() throws CoreException", "signatureAfterChange": " public void testNameLookupFindKnownType() throws CoreException", "diff": ["-\tif (WARMUP_COUNT > 0) {", "-\t\tfor (int i=0; i<WARMUP_COUNT; i++) {", "-\t\t\tNameLookup nameLookup = BIG_PROJECT.newNameLookup(DefaultWorkingCopyOwner.PRIMARY);", "-\t\t\tIType type = nameLookup.findType(fullQualifiedName, false /*full match*/, NameLookup.ACCEPT_ALL);", "-\t\t\tassertNotNull(\"We should find type '\"+fullQualifiedName+\"' in project \"+BIG_PROJECT_NAME, type);", "-\t\t}", "+\tfor (int i=0; i<WARMUP_COUNT; i++) {", "+\t\tNameLookup nameLookup = BIG_PROJECT.newNameLookup(DefaultWorkingCopyOwner.PRIMARY);", "+\t\tIType type = nameLookup.findType(fullQualifiedName, false /*full match*/, NameLookup.ACCEPT_ALL);", "+\t\tif (i==0) assertNotNull(\"We should find type '\"+fullQualifiedName+\"' in project \"+BIG_PROJECT_NAME, type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d67afcf43cf0c1b18ed0bb87392cc3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceModelTests.java", "commitBeforeChange": "4119a65befb0f1b826133c8b40790cea36510774", "commitAfterChange": "199c84f2cae998bf19dec5ba0cb5f860d990b3fa", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void testNameLookupFindUnknownType() throws CoreException", "signatureAfterChange": " public void testNameLookupFindUnknownType() throws CoreException", "diff": ["-\tif (WARMUP_COUNT > 0) {", "-\t\tfor (int i=0; i<WARMUP_COUNT; i++) {", "-\t\t\tNameLookup nameLookup = BIG_PROJECT.newNameLookup(DefaultWorkingCopyOwner.PRIMARY);", "-\t\t\tIType type = nameLookup.findType(fullQualifiedName, false /*full match*/, NameLookup.ACCEPT_ALL);", "-\t\t\tassertNull(\"We should not find an unknown type in project \"+BIG_PROJECT_NAME, type);", "-\t\t}", "+\tfor (int i=0; i<WARMUP_COUNT; i++) {", "+\t\tNameLookup nameLookup = BIG_PROJECT.newNameLookup(DefaultWorkingCopyOwner.PRIMARY);", "+\t\tIType type = nameLookup.findType(fullQualifiedName, false /*full match*/, NameLookup.ACCEPT_ALL);", "+\t\tif (i==0) assertNull(\"We should not find an unknown type in project \"+BIG_PROJECT_NAME, type);"]}], "num": 72170}
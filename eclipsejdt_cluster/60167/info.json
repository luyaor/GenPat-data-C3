{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "11ff1e13384449ac43d14cd026f95667", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8f7e512d3000fb3f6c3c7932e90ff58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "77ac300d6d124e9b071b4e62fab3a583e6eecdc4", "commitAfterChange": "fbf658958d1eb066a4b5c16fdea253c3d8d5019c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["-\t\t", "-\t\tthis.parentScope = blockScope;", "+\t\tthis.constant = Constant.NotAConstant;", "+\t\tthis.enclosingScope = blockScope;", "-\t\t\tif (devNullCompilationResult == null)", "-\t\t\t\tdevNullCompilationResult = new CompilationResult(this.compilationResult.getCompilationUnit(), 0, 0, blockScope.compilerOptions().maxProblemsPerUnit);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9d08c8cac4eec75698435ebc463c94b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "70416b46b1375461a92d89ffa1cb077778dc6e86", "commitAfterChange": "0c53505dd9d8f221929a96f99e04ff55bfc4fc05", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 5, "signatureBeforeChange": "  void addMatchingOpenable( \t\tIResource resource,  \t\tOpenable openable, \t\tCompilationUnitDeclaration parsedUnit, \t\tMatchSet matchSet)", "signatureAfterChange": "\t \tvoid addPotentialMatch(IResource resource, Openable openable)", "diff": ["+\t}\t", "+\tvoid addPotentialMatch(IResource resource, Openable openable) {", "+\t\tPotentialMatch potentialMatch = new PotentialMatch(this, resource, openable);", "+\t\tthis.potentialMatches.add(potentialMatch);", "+\t}", "-", "-void addMatchingOpenable(", "-\t\tIResource resource, ", "-\t\tOpenable openable,", "-\t\tCompilationUnitDeclaration parsedUnit,", "-\t\tMatchSet matchSet) {", "-\t\t", "-\tMatchingOpenable matchingOpenable = new MatchingOpenable(this, resource, openable, parsedUnit, matchSet);", "-\tif (matchingOpenable != null) {", "-\t\tthis.matchingOpenables.add(matchingOpenable);", "-\t}", "-}"]}], "num": 60167}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "465d139f3b5b21b6f13ffec42e59665b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1514ba701a2fdf553e43cfb614e44d61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "d1d9c4b9d41b5dee6585f38ec44b96973779f261", "commitAfterChange": "ae391996f2ba5153face2dc96f44fbe25cc6cfcf", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " void checkTypeVariableMethods(TypeParameter typeParameter)", "signatureAfterChange": " void checkTypeVariableMethods(TypeParameter typeParameter)", "diff": ["-\t\t\t\twhile (--count > 0 && areReturnTypesCompatible(first, matchingInherited[count])){/*empty*/}", "+\t\t\t\twhile (--count > 0) {", "+\t\t\t\t\tMethodBinding match = matchingInherited[count];", "+\t\t\t\t\tif (areReturnTypesCompatible(first, match)) continue;", "+\t\t\t\t\t// unrelated interfaces - check to see if return types are compatible", "+\t\t\t\t\tif (first.declaringClass.isInterface() && match.declaringClass.isInterface() && areReturnTypesCompatible(match, first))", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fec66f5586536cd2da0bf32c69abefbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "8022992d2babd233cd628feec0fce3d9f7562016", "commitAfterChange": "6bea0f6636d15fbdebc7403f71192f16cc7a0c9c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " void checkTypeVariableMethods()", "signatureAfterChange": " void checkTypeVariableMethods()", "diff": ["-\t\t\tif (index > 0)", "-\t\t\t\tcheckInheritedMethods(matchingInherited, index + 1); // pass in the length of matching", "+\t\t\tif (index > 0) {", "+\t\t\t\tMethodBinding first = matchingInherited[0];", "+\t\t\t\tint count = index + 1;", "+\t\t\t\twhile (--count > 0 && areReturnTypesEqual(first, matchingInherited[count])){/*empty*/}", "+\t\t\t\tif (count > 0) {  // All inherited methods do NOT have the same vmSignature", "+\t\t\t\t\tproblemReporter().inheritedMethodsHaveIncompatibleReturnTypes(this.type, matchingInherited, index + 1);", "+\t\t\t\t\tcontinue nextSelector;", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 51837}
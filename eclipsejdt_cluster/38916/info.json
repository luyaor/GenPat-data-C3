{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb07a85d9a75667387e419edf8f4af23", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1178939a7fbc220a004f9ffc423a36a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 236, "methodNumberAfterChange": 236, "signatureBeforeChange": " protected void reportSyntaxErrors(boolean isDietParse, int oldFirstToken)", "signatureAfterChange": " protected void reportSyntaxErrors(boolean isDietParse, int oldFirstToken)", "diff": ["-\tif(referenceContext instanceof MethodDeclaration) {", "-\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) referenceContext;", "+\tif(this.referenceContext instanceof MethodDeclaration) {", "+\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) this.referenceContext;", "-\tcompilationUnit.compilationResult.lineSeparatorPositions = scanner.getLineEnds();", "-\tscanner.recordLineSeparator = false;", "+\tthis.compilationUnit.compilationResult.lineSeparatorPositions = this.scanner.getLineEnds();", "+\tthis.scanner.recordLineSeparator = false;", "-\tint start = scanner.initialPosition;", "-\tint end = scanner.eofPosition <= Integer.MAX_VALUE ? scanner.eofPosition - 1 : scanner.eofPosition;", "+\tint start = this.scanner.initialPosition;", "+\tint end = this.scanner.eofPosition <= Integer.MAX_VALUE ? this.scanner.eofPosition - 1 : this.scanner.eofPosition;", "-\t\tscanner.resetTo(start, end);", "+\t\tthis.scanner.resetTo(start, end);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a27c70dc749b852beaafe869cc18db5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "59119c56d69b798c59e5389db2508c4896e5dbdf", "commitAfterChange": "c861a0381ba1376aa01c18d9f68e1168bdac8aab", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic boolean visit(MethodDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(MethodDeclaration node)", "diff": ["-\t\t\tbuffer.append(\" \");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\" \");//$NON-NLS-1$", "-\t\tbuffer.append(\"(\");//$NON-NLS-1$", "+\t\tthis.buffer.append(\"(\");//$NON-NLS-1$", "-\t\t\t\tbuffer.append(\",\");//$NON-NLS-1$", "+\t\t\t\tthis.buffer.append(\",\");//$NON-NLS-1$", "-\t\tbuffer.append(\")\");//$NON-NLS-1$", "+\t\tthis.buffer.append(\")\");//$NON-NLS-1$", "-\t\t\tbuffer.append(\" throws \");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\" throws \");//$NON-NLS-1$", "-\t\t\t\t\tbuffer.append(\", \");//$NON-NLS-1$", "+\t\t\t\t\tthis.buffer.append(\", \");//$NON-NLS-1$", "-\t\t\tbuffer.append(\" \");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\" \");//$NON-NLS-1$", "-\t\t\tbuffer.append(\";\");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\";\");//$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e32f206d68e5e429afab896b6196d7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "   public TypeBinding resolveType(BlockScope scope)", "diff": ["-", "-\tpublic TypeBinding resolveType(BlockScope scope) {", "-", "-\t\tconstant = Constant.NotAConstant;", "-\t\tif (receiver instanceof CastExpression\t// no cast check for ((type[])null)[0]", "-\t\t\t\t&& ((CastExpression)receiver).innermostCastedExpression() instanceof NullLiteral) {", "-\t\t\tthis.receiver.bits |= DisableUnnecessaryCastCheck; // will check later on", "-\t\t}\t\t", "-\t\tTypeBinding arrayType = receiver.resolveType(scope);", "-\t\tif (arrayType != null) {", "-\t\t\treceiver.computeConversion(scope, arrayType, arrayType);", "-\t\t\tif (arrayType.isArrayType()) {", "-\t\t\t\tTypeBinding elementType = ((ArrayBinding) arrayType).elementsType();", "-\t\t\t\tthis.resolvedType = ((this.bits & IsStrictlyAssigned) == 0) ? elementType.capture(scope, this.sourceEnd) : elementType;", "-\t\t\t} else {", "-\t\t\t\tscope.problemReporter().referenceMustBeArrayTypeAt(arrayType, this);", "-\t\t\t}", "+public TypeBinding resolveType(BlockScope scope) {", "+\tthis.constant = Constant.NotAConstant;", "+\tif (this.receiver instanceof CastExpression\t// no cast check for ((type[])null)[0]", "+\t\t\t&& ((CastExpression)this.receiver).innermostCastedExpression() instanceof NullLiteral) {", "+\t\tthis.receiver.bits |= ASTNode.DisableUnnecessaryCastCheck; // will check later on", "+\t}\t\t", "+\tTypeBinding arrayType = this.receiver.resolveType(scope);", "+\tif (arrayType != null) {", "+\t\tthis.receiver.computeConversion(scope, arrayType, arrayType);", "+\t\tif (arrayType.isArrayType()) {", "+\t\t\tTypeBinding elementType = ((ArrayBinding) arrayType).elementsType();", "+\t\t\tthis.resolvedType = ((this.bits & ASTNode.IsStrictlyAssigned) == 0) ? elementType.capture(scope, this.sourceEnd) : elementType;", "+\t\t} else {", "+\t\t\tscope.problemReporter().referenceMustBeArrayTypeAt(arrayType, this);", "-\t\tTypeBinding positionType = position.resolveTypeExpecting(scope, TypeBinding.INT);", "-\t\tif (positionType != null) {", "-\t\t\tposition.computeConversion(scope, TypeBinding.INT, positionType);", "-\t\t}", "-\t\treturn this.resolvedType;", "+\tTypeBinding positionType = this.position.resolveTypeExpecting(scope, TypeBinding.INT);", "+\tif (positionType != null) {", "+\t\tthis.position.computeConversion(scope, TypeBinding.INT, positionType);", "+\treturn this.resolvedType;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb99bba1ae0b424116edb54602a5e0f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public void checkComment()", "signatureAfterChange": "  public void checkComment()", "diff": ["-\tif (reportReferenceInfo && this.javadoc != null) {", "+\tif (this.reportReferenceInfo && this.javadocParser.checkJavadoc && this.javadoc != null) {", "-\t\t\t\trequestor.acceptTypeReference(singleRef.token, singleRef.sourceStart);", "+\t\t\t\tthis.requestor.acceptTypeReference(singleRef.token, singleRef.sourceStart);", "-\t\t\t\trequestor.acceptTypeReference(qualifiedRef.tokens, qualifiedRef.sourceStart, qualifiedRef.sourceEnd);", "+\t\t\t\tthis.requestor.acceptTypeReference(qualifiedRef.tokens, qualifiedRef.sourceStart, qualifiedRef.sourceEnd);", "-\t\t\t\trequestor.acceptTypeReference(singleRef.token, singleRef.sourceStart);", "+\t\t\t\tthis.requestor.acceptTypeReference(singleRef.token, singleRef.sourceStart);", "-\t\t\t\trequestor.acceptTypeReference(qualifiedRef.tokens, qualifiedRef.sourceStart, qualifiedRef.sourceEnd);", "+\t\t\t\tthis.requestor.acceptTypeReference(qualifiedRef.tokens, qualifiedRef.sourceStart, qualifiedRef.sourceEnd);", "-\t\t\t\trequestor.acceptFieldReference(fieldRef.token, fieldRef.sourceStart);", "+\t\t\t\tthis.requestor.acceptFieldReference(fieldRef.token, fieldRef.sourceStart);", "-\t\t\t\trequestor.acceptMethodReference(messageSend.selector, argCount, messageSend.sourceStart);", "+\t\t\t\tthis.requestor.acceptMethodReference(messageSend.selector, argCount, messageSend.sourceStart);", "-\t\t\t\trequestor.acceptConstructorReference(compoundName[compoundName.length-1], argCount, constructor.sourceStart);", "+\t\t\t\tthis.requestor.acceptConstructorReference(compoundName[compoundName.length-1], argCount, constructor.sourceStart);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c70d9d32ba6b61b1b1d64f770e75edd0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/RewriteEventStore.java", "commitBeforeChange": "a40cb3ef59ebbd67185c7faac7fb4434fed79ef4", "commitAfterChange": "ee62bf9b530a584a4251f975aa510ac6ec2f5d0f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t\tpublic Object next()", "signatureAfterChange": " \t\tpublic Object next()", "diff": ["-\t\t\tif (fEventIter.hasNext()) {", "-\t\t\t\treturn ((EventHolder) fEventIter.next()).parent;", "+\t\t\tif (this.eventIter.hasNext()) {", "+\t\t\t\treturn ((EventHolder) this.eventIter.next()).parent;", "-\t\t\tif (fSourceNodeIter.hasNext()) {", "-\t\t\t\treturn ((CopySourceInfo) fSourceNodeIter.next()).getStartNode();", "+\t\t\tif (this.sourceNodeIter.hasNext()) {", "+\t\t\t\treturn ((CopySourceInfo) this.sourceNodeIter.next()).getStartNode();", "-\t\t\tif (fRangeNodeIter.hasNext()) {", "-\t\t\t\treturn ((CopySourceInfo) fRangeNodeIter.next()).parent;", "+\t\t\tif (this.rangeNodeIter.hasNext()) {", "+\t\t\t\treturn ((CopySourceInfo) this.rangeNodeIter.next()).parent;", "-\t\t\treturn fTrackedNodeIter.next();", "+\t\t\treturn this.trackedNodeIter.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce6da1e057bf535e951ac0eaa7421099", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "59119c56d69b798c59e5389db2508c4896e5dbdf", "commitAfterChange": "c861a0381ba1376aa01c18d9f68e1168bdac8aab", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic boolean visit(TypeDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(TypeDeclaration node)", "diff": ["-\t\tbuffer.append(node.isInterface() ? \"interface \" : \"class \");//$NON-NLS-2$//$NON-NLS-1$", "+\t\tthis.buffer.append(node.isInterface() ? \"interface \" : \"class \");//$NON-NLS-2$//$NON-NLS-1$", "-\t\tbuffer.append(\" \");//$NON-NLS-1$", "+\t\tthis.buffer.append(\" \");//$NON-NLS-1$", "-\t\t\tbuffer.append(\"extends \");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\"extends \");//$NON-NLS-1$", "-\t\t\tbuffer.append(\" \");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\" \");//$NON-NLS-1$", "-\t\t\tbuffer.append(node.isInterface() ? \"extends \" : \"implements \");//$NON-NLS-2$//$NON-NLS-1$", "+\t\t\tthis.buffer.append(node.isInterface() ? \"extends \" : \"implements \");//$NON-NLS-2$//$NON-NLS-1$", "-\t\t\t\t\tbuffer.append(\", \");//$NON-NLS-1$", "+\t\t\t\t\tthis.buffer.append(\", \");//$NON-NLS-1$", "-\t\t\tbuffer.append(\" \");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\" \");//$NON-NLS-1$", "-\t\tbuffer.append(\"{\");//$NON-NLS-1$", "+\t\tthis.buffer.append(\"{\");//$NON-NLS-1$", "-\t\tbuffer.append(\"}\");//$NON-NLS-1$", "+\t\tthis.buffer.append(\"}\");//$NON-NLS-1$"]}], "num": 38916}
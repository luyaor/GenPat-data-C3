{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a6c137a3276e335a0c392bb1f6d89c22", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3eec08096995d77e08315197297d50ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "bdd661ede446c1c3bdc76fd684c8f024821af3ac", "commitAfterChange": "0db27b507a6968d4fb2f769e63fcd5182f023962", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tprotected void seekTypesInBinaryPackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "signatureAfterChange": " \tprotected void seekTypesInBinaryPackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "diff": ["-\t\t\tIClassFile[] classFiles= null;", "-\t\t\ttry {", "-\t\t\t\tclassFiles= pkg.getClassFiles();", "-\t\t\t} catch (JavaModelException npe) {", "-\t\t\t\treturn; // the package is not present", "-\t\t\t}", "-\t\t\tint length= classFiles.length;", "-\t\t\t\tfor (int i= 0; i < length; i++) {", "-\t\t\t\t\tif (requestor.isCanceled()) return;", "-\t\t\t\t\tClassFile classFile= (ClassFile) classFiles[i];", "-\t\t\t\t\tif (name.equals(classFile.name)) { // ClassFile#name contains the name of the .class file without the .class extension", "-\t\t\t\t\t\tIType type = classFile.getType();", "-\t\t\t\t\t\tif (acceptType(type, acceptFlags, false/*not a source type*/)) {", "-\t\t\t\t\t\t\trequestor.acceptType(type);", "-\t\t\t\t\t\t\tbreak;  // since an exact match was requested, no other matching type can exist", "-\t\t\t\t\t\t}", "+\t\t\t\tif (requestor.isCanceled()) return;", "+\t\t\t\tClassFile classFile =  new ClassFile((PackageFragment) pkg, name);", "+\t\t\t\tif (classFile.existsUsingJarTypeCache()) {", "+\t\t\t\t\tIType type = classFile.getType();", "+\t\t\t\t\tif (acceptType(type, acceptFlags, false/*not a source type*/)) {", "+\t\t\t\t\t\trequestor.acceptType(type);", "+\t\t\t\tIClassFile[] classFiles= null;", "+\t\t\t\ttry {", "+\t\t\t\t\tclassFiles= pkg.getClassFiles();", "+\t\t\t\t} catch (JavaModelException npe) {", "+\t\t\t\t\treturn; // the package is not present", "+\t\t\t\t}", "+\t\t\t\tint length= classFiles.length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0acdca5e7da90488c647563242000ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "0820eec9945610037c75b7f3c6bc13a32acbc80c", "commitAfterChange": "4fb4651d7a5f975649614980f56a713ca0cbf39d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate void runAPTInFileBasedMode( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv )", "signatureAfterChange": " \t \tprivate void runAPTInFileBasedMode( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv )", "diff": ["-\t\tfor( int fileIndex=0, numFiles=_filesToProcess.length; fileIndex<numFiles; fileIndex++ ){", "-\t\t\tfinal IFile curFile = _filesToProcess[fileIndex];", "+\t\tfor (IFile curFile : _filesToProcess) {", "-\t\t\t\t\t\tif ( AptPlugin.DEBUG ) ", "-\t\t\t\t\t\t\ttrace( \"runAPT: invoking file-based processor \" + processor.getClass().getName() ); //$NON-NLS-1$", "+\t\t\t\t\t\tif ( AptPlugin.DEBUG ) {", "+\t\t\t\t\t\t\ttrace( \"runAPT: invoking file-based processor \" + processor.getClass().getName() + \" on \" + curFile ); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t}"]}], "num": 20963}
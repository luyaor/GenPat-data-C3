{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ca30975a39b92b577cd82c1b5e74ed9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51b804939c509b979489dc13163ea4ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "a7538ae82dbd33b3f26dec50ae8ce6f249c7a04f", "commitAfterChange": "f0ca1f9e3571a6c8cc7bcfc8fee3982374c51194", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "  public MethodVerifier newMethodVerifier()", "signatureAfterChange": "  public MethodVerifier newMethodVerifier()", "diff": ["-\treturn this.globalOptions.sourceLevel < ClassFileConstants.JDK1_5", "-\t\t? new MethodVerifier(this)", "-\t\t: new MethodVerifier15(this); // covariance only if sourceLevel is >= 1.5", "+\t/* Always use MethodVerifier15. Even in a 1.4 project, we must internalize type variables and", "+\t   observe any parameterization of super class and/or super interfaces in order to be able to", "+\t   detect overriding in the presence of generics.", "+\t   See https://bugs.eclipse.org/bugs/show_bug.cgi?id=324850", "+\t */", "+\treturn new MethodVerifier15(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72ab5cdd333e05d095a74df75d556d8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "149c538751123b079a5874a00aba83297561ab5c", "commitAfterChange": "7bd675acf4007077bf6bd84b82139719c7a8ca75", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "  public MethodVerifier newMethodVerifier()", "signatureAfterChange": "  public MethodVerifier newMethodVerifier()", "diff": ["-\treturn this.globalOptions.sourceLevel < ClassFileConstants.JDK1_5", "-\t\t? new MethodVerifier(this)", "-\t\t: new MethodVerifier15(this); // covariance only if sourceLevel is >= 1.5", "+\t/* Always use MethodVerifier15. Even in a 1.4 project, we must internalize type variables and", "+\t   observe any parameterization of super class and/or super interfaces in order to be able to", "+\t   detect overriding in the presence of generics.", "+\t   See https://bugs.eclipse.org/bugs/show_bug.cgi?id=324850", "+\t */", "+\treturn new MethodVerifier15(this);"]}], "num": 25278}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "233b1bf3c2c6b2ea8ef4ad86685a32f7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69e6394ed2411bde3bc6027f90f1bd1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "14af252394acbb0bfcfcbfb1dcd81d43fd8bedb4", "commitAfterChange": "a5e72f7eb3d8ebc1e13245d6ce4d9ee4d6c6d3db", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tprivate static void setUpFullSourceWorkspace() throws IOException, CoreException", "signatureAfterChange": " \tprivate static void setUpFullSourceWorkspace() throws IOException, CoreException", "diff": ["+\t\t\tString projectName = ALL_PROJECTS[i].getElementName();", "+\t\t\tif (JavaCore.PLUGIN_ID.equals(projectName)) {", "+\t\t\t\tJDT_CORE_PROJECT = ALL_PROJECTS[i];", "+\t\t\t} else if (BIG_PROJECT_NAME.equals(projectName)) {", "+\t\t\t\tBIG_PROJECT = (JavaProject) ALL_PROJECTS[i];", "+\t\t\t}", "+\t\t\t// Make Big project dependent from jdt.core one", "+//\t\t\tIClasspathEntry[] bigProjectEntries = BIG_PROJECT.getRawClasspath();", "+//\t\t\tint bpeLength = bigProjectEntries.length;", "+//\t\t\tSystem.arraycopy(bigProjectEntries, 0, bigProjectEntries = new IClasspathEntry[bpeLength+1], 0, bpeLength);", "+//\t\t\tbigProjectEntries[bpeLength] = JavaCore.newProjectEntry(JDT_CORE_PROJECT.getPath());", "+\t\tIJavaElement element = JDT_CORE_PROJECT.findType(\"org.eclipse.jdt.internal.compiler.parser.Parser\");", "+\t\tassertTrue(\"Parser should exist in org.eclipse.jdt.core project!\", element != null && element.exists());", "+\t\tPARSER_WORKING_COPY = (ICompilationUnit) element.getParent();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8d360708b0246d2eb770cdb15261fe8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java", "commitBeforeChange": "555e1bd288ab8a8c2b4fb2196a280405e579e95a", "commitAfterChange": "f224910d782248a4e297d2e774be6582422f6d71", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 38, "signatureBeforeChange": "  public void testClasspathValidation07() throws CoreException", "signatureAfterChange": "  public void testClasspathValidation15() throws CoreException", "diff": ["-\t\tnewCP[originalCP.length] = JavaCore.newSourceEntry(new Path(\"/P\"), new IPath[] {new Path(\"src\")});", "+ */ ", "+public void testClasspathValidation15() throws CoreException {", "+\ttry {", "+\t\tIJavaProject proj =  this.createJavaProject(\"P\", new String[] {\"src\"}, \"bin\");", "+\t\tIClasspathEntry[] originalCP = proj.getRawClasspath();", "+\t", "+\t\tIClasspathEntry[] newCP = new IClasspathEntry[originalCP.length+1];", "+\t\tSystem.arraycopy(originalCP, 0, newCP, 0, originalCP.length);", "+\t\tnewCP[originalCP.length] = JavaCore.newSourceEntry(new Path(\"/P\"), new IPath[] {new Path(\"src\")});", "+\t\t", "+\t\tIJavaModelStatus status = JavaConventions.validateClasspath(proj, newCP, proj.getOutputLocation());", "+\t\t", "+\t\tassertEquals(", "+\t\t\t\"should have allowed nested source folders with exclusion on the classpath\", ", "+\t\t\t\"End exclusion filter with / to fully exclude nested entry\",", "+\t\t\tstatus.getMessage());", "+\t} finally {", "+\t\tthis.deleteProject(\"P\");", "+\t}", "+}"]}], "num": 57550}
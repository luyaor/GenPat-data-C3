{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4360304be296344242f4e847c8c7877d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20c12a29d23308843efbb18ead59aba5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "11d37ba24baa8a8d5177d1ba6ab1649342a0de47", "commitAfterChange": "3b53dc72aa60c63aafa5e63cea69df72f36f7346", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["-\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, false);", "+\t\t\t\t\t\t\t\t\tif (use15specifics) {", "+\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, false);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, true);", "+\t\t\t\t\t\t\t\t\tif (use15specifics) {", "+\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, true);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t\tif (((ReferenceBinding) castType).isFinal()) {", "-\t\t\t\t\t\t\t\t\t// no subclass for castType, thus compile-time check is valid", "-\t\t\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(expressionType);", "-\t\t\t\t\t\t\t\t\tif (match == null) {", "-\t\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t// can only be a downcast", "+\t\t\t\t\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(expressionType);", "+\t\t\t\t\t\t\t\tif (match != null) {", "+\t\t\t\t\t\t\t\t\tif (use15specifics) {", "+\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "+\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (((ReferenceBinding) castType).isFinal()) {", "+\t\t\t\t\t\t\t\t\t// no subclass for castType, thus compile-time check is invalid", "+\t\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, null /*no match*/, true);", "+\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\ttagAsNeedCheckCast();", "-\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t\tcheckUnsafeCast(scope, castType, expressionType, expressionType, true);", "+\t\t\t\t\t\t\t\tif (use15specifics) checkUnsafeCast(scope, castType, expressionType, expressionType, true);", "-\t\t\t\t\t\t\t\tif (refExprType.isFinal()) {", "-\t\t\t\t\t\t\t\t\t// unless final a subclass may implement the interface ==> no check at compile time", "-\t\t\t\t\t\t\t\t\tif (match == null) {", "-\t\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tif (match != null) {", "+\t\t\t\t\t\t\t\tif (match != null) {", "+\t\t\t\t\t\t\t\t\tif (use15specifics) {", "+\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t// unless final a subclass may implement the interface ==> no check at compile time", "+\t\t\t\t\t\t\t\tif (refExprType.isFinal()) {", "+\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "+\t\t\t\t\t\t\t\t\tif (use15specifics) {", "+\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "+\t\t\t\t\t\t\t\t\tif (use15specifics) {", "+\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "+\t\t\t\t\t\t\t\t\t} ", "+\t\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "+\t\t\t\t\t\t\t\t\tif (use15specifics) {", "+\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef3990d06715e17e71f407da50773739", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "349b245f426a9d65e4f19eb6b518fad225b1dccb", "commitAfterChange": "f7529141d7e838cb41f5908a7631797fc0e75f0a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["-\t\t\t\t\t\t\t\t\tif (use15specifics) {", "-\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, false);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, false);", "-\t\t\t\t\t\t\t\t\tif (use15specifics) {", "-\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, true);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, true);", "-\t\t\t\t\t\t\t\t\tif (use15specifics) {", "-\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t\t\t\t\t\t\tif (use15specifics) {", "-\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t\t\t\t\tif (use15specifics) {", "-\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t\t\t\t\t\t\tif (use15specifics) {", "-\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t\t\t\t\t} ", "-\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t\t\t\t\t\t\tif (use15specifics) {", "-\t\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);"]}], "num": 24220}
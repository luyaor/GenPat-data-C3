{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "965d93550f8001b31c90d309c5f96118", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ccae9f170a0c50dbb4393115fb40b8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "16bf517eac7b1a25f758fac5c593b2cb070073af", "commitAfterChange": "fae520db3bff429606d278ea763b13798c0848f3", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public boolean isProvablyDistinct(TypeBinding otherType)", "signatureAfterChange": " public boolean isProvablyDistinct(TypeBinding otherType)", "diff": ["+", "+\t/* With the hybrid 1.4/1.5+ projects modes, while establishing type equivalence, we need to", "+\t   be prepared for a type such as Map appearing in one of three forms: As (a) a ParameterizedTypeBinding ", "+\t   e.g Map<String, String>, (b) as RawTypeBinding Map#RAW and finally (c) as a BinaryTypeBinding ", "+\t   When the usage of a type lacks type parameters, whether we land up with the raw form or not depends", "+\t   on whether the underlying type was \"seen to be\" a generic type in the particular build environment or", "+\t   not. See:", "+\t    https://bugs.eclipse.org/bugs/show_bug.cgi?id=186565", "+        https://bugs.eclipse.org/bugs/show_bug.cgi?id=328827 ", "+        https://bugs.eclipse.org/bugs/show_bug.cgi?id=329588", "+\t */ ", "+", "+\t\t    \tcase Binding.TYPE:  // https://bugs.eclipse.org/bugs/show_bug.cgi?id=329588", "+\t\t    \t\treturn erasure() != otherType;", "-\t\tcase Binding.RAW_TYPE :", "+\t\tcase Binding.RAW_TYPE : // dead code ??", "+\t\t    \tcase Binding.TYPE:  // https://bugs.eclipse.org/bugs/show_bug.cgi?id=329588", "+\t\tcase Binding.TYPE: // https://bugs.eclipse.org/bugs/show_bug.cgi?id=329588", "+\t\t    switch(otherType.kind()) {", "+\t\t    \tcase Binding.PARAMETERIZED_TYPE :", "+\t\t    \tcase Binding.RAW_TYPE :", "+\t\t            return this != otherType.erasure();", "+\t\t    }", "+\t\t    break;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a98338f179e39a7bbfa3b266d9315e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementImpl.java", "commitBeforeChange": "c4f17ac79e05c4dff8c3cc6e660e1fc73ee3406f", "commitAfterChange": "29d06747dc9924aaa37b6f5478bee32ae657345a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic ElementKind getKind()", "signatureAfterChange": " \tpublic ElementKind getKind()", "diff": ["+\t */", "-\t\t// TODO Auto-generated method stub", "-\t\treturn null;", "+\t\tswitch (_binding.kind()) {", "+\t\tcase Binding.FIELD:", "+\t\t\treturn ElementKind.FIELD;", "+\t\tcase Binding.LOCAL:", "+\t\t\treturn ElementKind.LOCAL_VARIABLE;", "+\t\tcase Binding.PACKAGE:", "+\t\t\treturn ElementKind.PACKAGE;", "+\t\tcase Binding.TYPE_PARAMETER:", "+\t\t\treturn ElementKind.TYPE_PARAMETER;", "+\t\t\t", "+\t\t// case Binding.TYPE: handled by TypeElementImpl", "+\t\t// case Binding.METHOD: handled by ExecutableElementImpl", "+\t\t// case Binding.ARRAY_TYPE, etc: see TypeMirrorImpl.getKind()", "+\t\tdefault:", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t", "+\t\t}"]}], "num": 28943}
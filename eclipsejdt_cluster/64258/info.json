{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec8a9a2b5cea9ef9431eefe29f866389", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8511ec2e8aac2f4cf18ef3c9ba308cc0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "37468b15b5c10767a0d1f5bcf745b5635724272d", "commitAfterChange": "269c8c1f587787c02ae256af1e14f83a052a8b35", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic ClasspathEntry( \t\tint contentKind, \t\tint entryKind, \t\tIPath path, \t\tIPath[] inclusionPatterns, \t\tIPath[] exclusionPatterns, \t\tIPath sourceAttachmentPath, \t\tIPath sourceAttachmentRootPath, \t\tIPath specificOutputLocation, \t\tboolean isExported, \t\tIAccessRule[] accessRules, \t\tboolean combineAccessRules, \t\tIClasspathAttribute[] extraAttributes)", "signatureAfterChange": " \tpublic ClasspathEntry( \t\tint contentKind, \t\tint entryKind, \t\tIPath path, \t\tIPath[] inclusionPatterns, \t\tIPath[] exclusionPatterns, \t\tIPath sourceAttachmentPath, \t\tIPath sourceAttachmentRootPath, \t\tIPath specificOutputLocation, \t\tboolean isExported, \t\tIAccessRule[] accessRules, \t\tboolean combineAccessRules, \t\tIClasspathAttribute[] extraAttributes)", "diff": ["-\t\t\tthis.accessRuleSet = new AccessRuleSet(rules, getMessageTemplates());", "+\t\t\tbyte classpathEntryType;", "+\t\t\tString classpathEntryName;", "+\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\t\tif (this.entryKind == CPE_PROJECT || this.entryKind == CPE_SOURCE) { // can be remote source entry when reconciling", "+\t\t\t\tclasspathEntryType = AccessRestriction.PROJECT;", "+\t\t\t\tclasspathEntryName = manager.intern(getPath().segment(0));", "+\t\t\t} else {", "+\t\t\t\tclasspathEntryType = AccessRestriction.LIBRARY;", "+\t\t\t\tObject target = JavaModel.getTarget(ResourcesPlugin.getWorkspace().getRoot(), path, false);", "+\t\t\t\tif (target instanceof java.io.File) {", "+\t\t\t\t\tclasspathEntryName = manager.intern(path.toOSString());", "+\t\t\t\t} else {", "+\t\t\t\t\tclasspathEntryName = manager.intern(path.makeRelative().toString());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.accessRuleSet = new AccessRuleSet(rules, classpathEntryType, classpathEntryName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dec65911fd9dcb4dad86febd0a1fb05b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/HierarchyScope.java", "commitBeforeChange": "7fb86fb96d585ee8957fc13764a67f220efdab28", "commitAfterChange": "ac9209adc3bf5bee5093a73bfc9f86fe5825e76d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic HierarchyScope(IType type) throws JavaModelException", "signatureAfterChange": " \tpublic HierarchyScope(IType type) throws JavaModelException", "diff": ["-\t\tthis.initialize();", "-\t\tfHierarchy = type.newTypeHierarchy(null);", "-\t\tbuildResourceVector();", "+\t\tthis.focusType = type;", "+\t\t", "+\t\tthis.enclosingProjectsAndJars = this.computeProjectsAndJars(type);", "+", "+\t\t// resource path", "+\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)type.getPackageFragment().getParent();", "+\t\tif (root.isArchive()) {", "+\t\t\tIPath jarPath = root.getPath();", "+\t\t\tObject target = JavaModel.getTarget(ResourcesPlugin.getWorkspace().getRoot(), jarPath, true);", "+\t\t\tString zipFileName;", "+\t\t\tif (target instanceof IFile) {", "+\t\t\t\t// internal jar", "+\t\t\t\tzipFileName = jarPath.toString();", "+\t\t\t} else if (target instanceof File) {", "+\t\t\t\t// external jar", "+\t\t\t\tzipFileName = ((File)target).getPath();", "+\t\t\t} else {", "+\t\t\t\treturn; // unknown target", "+\t\t\t}", "+\t\t\tthis.focusPath =", "+\t\t\t\tzipFileName", "+\t\t\t\t\t+ JAR_FILE_ENTRY_SEPARATOR", "+\t\t\t\t\t+ type.getFullyQualifiedName().replace('.', '/')", "+\t\t\t\t\t+ \".class\";//$NON-NLS-1$", "+\t\t} else {", "+\t\t\tthis.focusPath = type.getPath().toString();", "+\t\t}"]}], "num": 64258}
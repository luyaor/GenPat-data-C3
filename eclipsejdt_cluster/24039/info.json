{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc05749a1fd7a99137ca9f6ad6c176ad", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29af1a59997a6f8c951895c0b56e01da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NamedMember.java", "commitBeforeChange": "a5c56b9d9a1a6a7a2412b9e4fe79595e9a454729", "commitAfterChange": "808f8a4c125739a8b2d2237ba90c04dc1390f0b7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprotected String getFullyQualifiedParameterizedName(String fullyQualifiedName, String genericTypeSignature) throws JavaModelException", "signatureAfterChange": "  \tprotected String getFullyQualifiedParameterizedName(String fullyQualifiedName, String uniqueKey) throws JavaModelException", "diff": ["-\tprotected String getFullyQualifiedParameterizedName(String fullyQualifiedName, String genericTypeSignature) throws JavaModelException {", "-\t\tchar[][] typeArguments = Signature.getTypeArguments(genericTypeSignature.toCharArray());", "+", "+\tprotected String getFullyQualifiedParameterizedName(String fullyQualifiedName, String uniqueKey) throws JavaModelException {", "+\t\tString[] typeArguments = new BindingKey(uniqueKey).getTypeArguments();", "-\t\t\tchar[] typeArgument = typeArguments[i];", "-\t\t\tCharOperation.replace(typeArgument, '/', '.');", "-\t\t\tbuffer.append(Signature.toCharArray(typeArgument));", "+\t\t\tString typeArgument = typeArguments[i];", "+\t\t\ttypeArgument.replace('/', '.');", "+\t\t\tbuffer.append(Signature.toString(typeArgument));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c8a4fb6915ecfc43e5308338a123fd2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "62b97f10b8bb4123dfea4bccabc125ecea6ba019", "commitAfterChange": "8e77108c42837d2f8e34e3f8fd4f8eea8e97b2f7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " void checkAgainstNullAnnotation(BlockScope scope, int nullStatus)", "signatureAfterChange": " void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, int nullStatus)", "diff": ["-void checkAgainstNullAnnotation(BlockScope scope, int nullStatus) {", "+void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, int nullStatus) {", "-\t\t\tchar[][] annotationName = scope.environment().getNonNullAnnotationName();", "-\t\t\tscope.problemReporter().nullityMismatch(this.expression, methodBinding.returnType, nullStatus, annotationName);", "+\t\t\tflowContext.recordNullityMismatch(scope, this.expression, nullStatus, methodBinding.returnType);"]}], "num": 24039}
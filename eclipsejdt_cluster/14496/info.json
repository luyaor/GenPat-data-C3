{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a966898cf311a8c69e8d1e271e4c793", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49296f0df8b4e88c1982c16649bc21b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "9c5c069c4ddd977815302e00ff7a4760365b1a17", "commitAfterChange": "2070676b1e20c45846e614809eff55257373d539", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (valueIfTrueType == valueIfFalseType) { // harmed the implicit conversion", "+\t\tif (TypeBinding.equalsEquals(valueIfTrueType, valueIfFalseType)) { // harmed the implicit conversion", "-\t\t\treturn this.resolvedType = valueIfTrueType;", "+\t\t\treturn this.resolvedType = NullAnnotationMatching.moreDangerousType(valueIfTrueType, valueIfFalseType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58d48c9d2861de3cd31bc7358423ab24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "fa632e87587c69f11b6e90d1ed0b778dff40b23c", "commitAfterChange": "074bcf8e02160c02f4c4edb70f2f1ade7ede52b7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\tif (valueIfTrueType == NullBinding) {", "+\t\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, originalValueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, originalValueIfFalseType);", "+\t\t\t\treturn this.resolvedType = valueIfFalseType;", "+\t\t\t} else if (valueIfFalseType == NullBinding) {", "+\t\t\t\tvalueIfTrue.computeConversion(scope, valueIfTrueType, originalValueIfTrueType);", "+\t\t\t\tvalueIfFalse.computeConversion(scope, valueIfFalseType, originalValueIfFalseType);", "+\t\t\t\treturn this.resolvedType = valueIfTrueType;", "+\t\t\t}"]}], "num": 14496}
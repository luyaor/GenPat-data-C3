{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8192e9f1c8aca02004c55e901910c52", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a6f0ced36248616cc6a79d89eb2aba5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "c59be425cf25326239f4ea61082e801292bcf9ab", "commitAfterChange": "d6fb9802bac486c7e71b20d321f123bc000bd933", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public static String createTypeSignature(String typeName, boolean isResolved)", "signatureAfterChange": "\r public static String createTypeSignature(String typeName, boolean isResolved)", "diff": ["+\treturn createTypeSignature(typeName.toCharArray(), isResolved);\r", "+}\r", "-\t\tScanner scanner = new Scanner();\r", "-\t\tscanner.setSource(typeName.toCharArray());\r", "-\t\tint token = scanner.getNextToken();\r", "-\t\tStringBuffer sig = new StringBuffer();\r", "-\t\tint arrayCount = 0;\r", "-\t\tboolean primitive = true;\r", "-\t\tswitch (token) {\r", "-\t\t\tcase ITerminalSymbols.TokenNameIdentifier :\r", "-\t\t\t\tsig.append(scanner.getCurrentIdentifierSource());\r", "-\t\t\t\tprimitive = false;\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase ITerminalSymbols.TokenNameboolean :\r", "-\t\t\t\tsig.append(Signature.SIG_BOOLEAN);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase ITerminalSymbols.TokenNamebyte :\r", "-\t\t\t\tsig.append(Signature.SIG_BYTE);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase ITerminalSymbols.TokenNamechar :\r", "-\t\t\t\tsig.append(Signature.SIG_CHAR);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase ITerminalSymbols.TokenNamedouble :\r", "-\t\t\t\tsig.append(Signature.SIG_DOUBLE);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase ITerminalSymbols.TokenNamefloat :\r", "-\t\t\t\tsig.append(Signature.SIG_FLOAT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase ITerminalSymbols.TokenNameint :\r", "-\t\t\t\tsig.append(Signature.SIG_INT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase ITerminalSymbols.TokenNamelong :\r", "-\t\t\t\tsig.append(Signature.SIG_LONG);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase ITerminalSymbols.TokenNameshort :\r", "-\t\t\t\tsig.append(Signature.SIG_SHORT);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase ITerminalSymbols.TokenNamevoid :\r", "-\t\t\t\tsig.append(Signature.SIG_VOID);\r", "-\t\t\t\tbreak;\r", "-\t\t\tdefault :\r", "-\t\t\t\tthrow new IllegalArgumentException();\r", "-\t\ttoken = scanner.getNextToken();\r", "-\t\twhile (!primitive && token == ITerminalSymbols.TokenNameDOT) {\r", "-\t\t\tsig.append(scanner.getCurrentIdentifierSource());\r", "-\t\t\ttoken = scanner.getNextToken();\r", "-\t\t\tif (token == ITerminalSymbols.TokenNameIdentifier) {\r", "-\t\t\t\tsig.append(scanner.getCurrentIdentifierSource());\r", "-\t\t\t\ttoken = scanner.getNextToken();\r", "-\t\t\t} else {\r", "-\t\t\t\tthrow new IllegalArgumentException();\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\twhile (token == ITerminalSymbols.TokenNameLBRACKET) {\r", "-\t\t\ttoken = scanner.getNextToken();\r", "-\t\t\tif (token != ITerminalSymbols.TokenNameRBRACKET)\r", "-\t\t\t\tthrow new IllegalArgumentException();\r", "-\t\t\tarrayCount++;\r", "-\t\t\ttoken = scanner.getNextToken();\r", "-\t\t}\r", "-\t\tif (token != ITerminalSymbols.TokenNameEOF)\r", "-\t\t\tthrow new IllegalArgumentException();\r", "-\t\tif (!primitive) {\r", "-\t\t\tsig.insert(0, isResolved ? C_RESOLVED : C_UNRESOLVED);\r", "-\t\t}\r", "-\t\tif (arrayCount == 0) {\r", "-\t\t\tif (primitive)\r", "-\t\t\t\treturn sig.toString();\r", "-\t\t} else {\r", "-\t\t\tchar[] brackets = new char[arrayCount];\r", "-\t\t\twhile (arrayCount-- != 0) {\r", "-\t\t\t\tbrackets[arrayCount] = C_ARRAY;\r", "-\t\t\t}\r", "-\t\t\tsig.insert(0, brackets);\r", "-\t\t}\r", "-\t\tif (!primitive) {\r", "-\t\t\tsig.append(C_NAME_END);\r", "-\t\t}\r", "-\t\treturn sig.toString();\r", "-\t} catch (InvalidInputException e) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e291535315a25e17fbda57d8f503195b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/valueconversion/ValueConversionProcessor.java", "commitBeforeChange": "a6fb7155fd890e70fc93ff099a2bfa78beffa3e9", "commitAfterChange": "dade23c0ca1cb5b996dfae1d1cfc189d06d41a6f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t@SuppressWarnings(\"nls\") \tpublic void process()", "signatureAfterChange": " \t \t@SuppressWarnings(\"nls\") \tpublic void process()", "diff": ["-\t{", "-\t\ttry{", "-\t\t\tfinal TypeDeclaration test = _env.getTypeDeclaration(\"sample.Test\");", "-\t\t\tif( test == null )", "-\t\t\t\tTestCase.assertNotNull(\"failed to locate type 'sample.Test'\", test);", "-\t\t\t", "-\t\t\tfinal Collection<AnnotationMirror> annotations = test.getAnnotationMirrors();", "-\t\t\tfinal int numAnnotations = annotations == null ? 0 : annotations.size();", "-\t\t\tTestCase.assertEquals(\"annotation number mismatch\", 1, numAnnotations);", "-\t\t\t", "-\t\t\tfinal AnnotationMirror annotation = annotations.iterator().next();", "-\t\t\tfinal AnnotationType annotationType = annotation.getAnnotationType();", "-\t\t\t", "-\t\t\tTestCase.assertEquals(", "-\t\t\t\t\t\"annotation type mismatch\", ", "-\t\t\t\t\t\"sample.Test.Annotation\", ", "-\t\t\t\t\tannotationType.getDeclaration().getQualifiedName());", "-\t\t\t", "-\t\t\tfinal Map<AnnotationTypeElementDeclaration, AnnotationValue> elementValues =", "-\t\t\t\tannotation.getElementValues();", "-\t\t\t", "-\t\t\tfor( Map.Entry<AnnotationTypeElementDeclaration, AnnotationValue> entry : ", "-\t\t\t\t elementValues.entrySet() ){", "-\t\t\t\t", "-\t\t\t\tAnnotationTypeElementDeclaration elementDecl = entry.getKey();", "-\t\t\t\tfinal String name = elementDecl.getSimpleName();", "-\t\t\t\tfinal AnnotationValue value = entry.getValue();", "-\t\t\t\t", "-\t\t\t\tif( name.length() == 1 )", "-\t\t\t\t{", "-\t\t\t\t\tfinal Class expectedType;", "-\t\t\t\t\tswitch(name.charAt(0))", "-\t\t\t\t\t{", "-\t\t\t\t\tcase 'b':", "-\t\t\t\t\t\texpectedType = Byte.class;", "-\t\t\t\t\t\tbreak;\t\t\t\t\t", "-\t\t\t\t\tcase 'c':", "-\t\t\t\t\t\texpectedType = Character.class;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase 's':", "-\t\t\t\t\t\texpectedType = Short.class;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase 'i':", "-\t\t\t\t\t\texpectedType = Integer.class;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase 'l':", "-\t\t\t\t\t\texpectedType = Long.class;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase 'f':", "-\t\t\t\t\t\texpectedType = Float.class;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase 'd':", "-\t\t\t\t\t\texpectedType = Double.class;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tTestCase.assertNotNull(\"unexpected member \" + name, null);", "-\t\t\t\t\t\tthrow new IllegalStateException(); // won't get here.", "-\t\t\t\t\t}", "-\t\t\t\t\tassertValueTypeMatch(name, value.getValue(), expectedType);", "-\t\t\t\t}\t", "-\t\t\t\telse{", "-\t\t\t\t\t@SuppressWarnings(\"unused\")", "-\t\t\t\t\tfinal Class expectedElementType;", "-\t\t\t\t\tif( \"chars\".equals(name) )", "-\t\t\t\t\t\texpectedElementType = Character.class;", "-\t\t\t\t\telse if( \"bytes\".equals(name) )", "-\t\t\t\t\t\texpectedElementType = Byte.class;", "-\t\t\t\t\telse if( \"shorts\".equals(name) )", "-\t\t\t\t\t\texpectedElementType = Short.class;", "-\t\t\t\t\telse if( \"ints\".equals(name) )", "-\t\t\t\t\t\texpectedElementType = Integer.class;", "-\t\t\t\t\telse if( \"longs\".equals(name) )", "-\t\t\t\t\t\texpectedElementType = Long.class;", "-\t\t\t\t\telse if( \"floats\".equals(name) )", "-\t\t\t\t\t\texpectedElementType = Float.class;", "-\t\t\t\t\telse if( \"doubles\".equals(name) )", "-\t\t\t\t\t\texpectedElementType = Double.class;", "-\t\t\t\t\telse{", "-\t\t\t\t\t\tTestCase.assertNotNull(\"unexpected member \" + name, null);", "-\t\t\t\t\t\tthrow new IllegalStateException(); // won't get here.", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tcatch( ComparisonFailure failure ){\t\t\t", "-\t\t\tif (!ProcessorTestStatus.hasErrors()) {", "-\t\t\t\tProcessorTestStatus.failWithoutException(failure.toString());", "-\t\t\t}", "-\t\t\tthrow failure;", "-\t\t}", "-\t\tcatch( junit.framework.AssertionFailedError error ){", "-\t\t\tif (!ProcessorTestStatus.hasErrors()) {", "-\t\t\t\tProcessorTestStatus.failWithoutException(error.toString());", "-\t\t\t}", "-\t\t\tthrow error;", "-\t\t}", "-\t}", "+\t\tfinal TypeDeclaration test = _env.getTypeDeclaration(\"sample.Test\");", "+\t\tif( test == null )", "+\t\t\tTestCase.assertNotNull(\"failed to locate type 'sample.Test'\", test);", "+\t\ttestCompilerAPIPath(test);", "+\t\ttestReflectionPath(test);", "+\t}"]}], "num": 61754}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37a1f9da80bf22834c109b6a2de6e60a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93d6198b3d02df870db74aef9fd0af5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "e0c80c2b16b54e5a1c86d6779d617fb326a5c618", "commitAfterChange": "9ca5fa129e003b71c76c933d9b76010e0a23b71b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["+//\t\tthis.returnLocationsCount = 0;", "+//\t\tthis.returnLocationLabels = null;", "-\t\tfinal int NO_FINALLY = 0;\t\t\t\t\t\t\t\t\t// no finally block", "+\t\tfinal int NO_FINALLY = 0;\t\t\t\t\t\t\t\t\t\t// no finally block", "-\t\tfinal int FINALLY_DOES_NOT_COMPLETE = 2;\t// non returning finally is optimized with only one instance of finally block", "-\t\tfinal int FINALLY_MUST_BE_INLINED = 3;\t\t\t// finally block must be inlined since cannot use jsr/ret bytecodes >1.5", "+\t\tfinal int FINALLY_DOES_NOT_COMPLETE = 2;\t\t// non returning finally is optimized with only one instance of finally block", "+\t\tfinal int FINALLY_INLINE = 3;\t\t\t\t\t\t\t\t// finally block must be inlined since cannot use jsr/ret bytecodes >1.5", "+\t\tfinal int FINALLY_EMULATE_RET = 4;\t\t\t\t\t// finally ret is emulated since cannot use jsr/ret bytecodes >1.5 (NOT WORKING)", "-\t\tif (this.subRoutineStartLabel == null) { ", "+\t\tif (this.subRoutineStartLabel == null) {", "+\t\t\tCompilerOptions options = currentScope.compilerOptions();", "-\t\t\t} else if (this.scope.compilerOptions().inlineJsrBytecode) {", "-\t\t\t\tfinallyMode = FINALLY_MUST_BE_INLINED;", "+//\t\t\t} else if (options.noJSRBytecode) {", "+//\t\t\t\tfinallyMode = FINALLY_EMULATE_RET;", "+\t\t\t} else if (options.inlineJsrBytecode) {", "+\t\t\t\tfinallyMode = FINALLY_INLINE;", "-\t\t\t\t\tcase FINALLY_MUST_BE_INLINED :", "+\t\t\t\t\tcase FINALLY_INLINE :", "+\t\t\t\t\tcase FINALLY_EMULATE_RET :", "-\t\t\t\t\t\t\tcase FINALLY_MUST_BE_INLINED :", "+\t\t\t\t\t\t\tcase FINALLY_INLINE :", "+\t\t\t\t\t\t\tcase FINALLY_EMULATE_RET :", "-\t\t\tExceptionLabel naturalExitExceptionHandler = ", "-\t\t\t\tfinallyMode == FINALLY_SUBROUTINE && requiresNaturalExit ? new ExceptionLabel(codeStream, null) : null;", "+\t\t\tExceptionLabel naturalExitExceptionHandler = requiresNaturalExit && (finallyMode == FINALLY_SUBROUTINE || finallyMode == FINALLY_EMULATE_RET) ", "+\t\t\t\t\t\t? new ExceptionLabel(codeStream, null) ", "+\t\t\t\t\t\t: null;", "-", "+//\t\t\t\tCaseLabel defaultReturnLocationLabel = null; // only used when emulating RET instruction", "+//\t\t\t\tCaseLabel naturalExitReturnLocationLabel = null; // only used when emulating RET instruction", "+\t\t\t\t\t\t// any exception handler", "+\t\t\t\t\t\t// subroutine", "-//\t\t\t\t\t\tcodeStream.updateLastRecordedEndPC(position);", "-\t\t\t\t\tcase FINALLY_MUST_BE_INLINED :", "+\t\t\t\t\tcase FINALLY_INLINE :", "+\t\t\t\t\t\t// any exception handler", "+\t\t\t\t\t\t// subroutine", "+\t\t\t\t\t\t// any exception handler", "+\t\t\t\t\t\t// subroutine", "+\t\t\t\t\tcase FINALLY_EMULATE_RET :", "+\t\t\t\t\t\t// any exception handler", "+//\t\t\t\t\t\tcodeStream.store(this.anyExceptionVariable, false);", "+//\t\t\t\t\t\tCaseLabel returnLocationLabel = recordReturnLocation(codeStream);", "+//\t\t\t\t\t\tcodeStream.generateInlinedValue(this.returnLocationsCount-1);", "+//\t\t\t\t\t\tcodeStream.store(this.returnAddressVariable, false);", "+//\t\t\t\t\t\tcodeStream.goto_(this.subRoutineStartLabel);", "+//\t\t\t\t\t\tcodeStream.recordPositionsFrom(finallySequenceStartPC, this.finallyBlock.sourceStart);", "+//\t\t\t\t\t\treturnLocationLabel.place();", "+//\t\t\t\t\t\tposition = codeStream.position;\t\t\t\t\t\t", "+//\t\t\t\t\t\tcodeStream.throwAnyException(this.anyExceptionVariable);", "+//\t\t\t\t\t\tcodeStream.recordPositionsFrom(position, this.finallyBlock.sourceEnd);", "+//\t\t\t\t\t\t// subroutine", "+//\t\t\t\t\t\tthis.subRoutineStartLabel.place();", "+//\t\t\t\t\t\tcodeStream.pushOnStack(this.scope.getJavaLangThrowable());", "+//\t\t\t\t\t\tposition = codeStream.position;\t", "+//\t\t\t\t\t\tthis.finallyBlock.generateCode(this.scope, codeStream);", "+//\t\t\t\t\t\tposition = codeStream.position;", "+//\t\t\t\t\t\t// RET emulation", "+//\t\t\t\t\t\tnaturalExitReturnLocationLabel = recordReturnLocation(codeStream);", "+//\t\t\t\t\t\tSystem.arraycopy(this.returnLocationLabels, 0, this.returnLocationLabels = new CaseLabel[this.returnLocationsCount], 0, this.returnLocationsCount);", "+//\t\t\t\t\t\tint[] sortedIndexes = new int[this.returnLocationsCount];", "+//\t\t\t\t\t\tfor (int i = 0; i < this.returnLocationsCount; i++) {", "+//\t\t\t\t\t\t\tsortedIndexes[i] = i;", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t\tdefaultReturnLocationLabel = new CaseLabel(codeStream);", "+//\t\t\t\t\t\tcodeStream.load(this.returnAddressVariable);", "+//\t\t\t\t\t\tcodeStream.tableswitch(defaultReturnLocationLabel, 0, this.returnLocationsCount-1, sortedIndexes, sortedIndexes, this.returnLocationLabels);", "+//\t\t\t\t\t\tcodeStream.recordPositionsFrom(", "+//\t\t\t\t\t\t\tposition,", "+//\t\t\t\t\t\t\tthis.finallyBlock.sourceEnd);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t// the tableswitch bytecode is part of the subroutine\t\t\t\t\t\t", "-\t\t\t\t\t\tcase FINALLY_MUST_BE_INLINED :", "+\t\t\t\t\t\tcase FINALLY_INLINE :", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase FINALLY_EMULATE_RET :", "+//\t\t\t\t\t\t\tposition = codeStream.position;", "+//\t\t\t\t\t\t\tnaturalExitExceptionHandler.placeStart();", "+//\t\t\t\t\t\t\tcodeStream.generateInlinedValue(this.returnLocationsCount);", "+//\t\t\t\t\t\t\tcodeStream.store(this.returnAddressVariable, false);", "+//\t\t\t\t\t\t\tcodeStream.goto_(this.subRoutineStartLabel);", "+//\t\t\t\t\t\t\tnaturalExitExceptionHandler.placeEnd();", "+//\t\t\t\t\t\t\tnaturalExitReturnLocationLabel.place();", "+//\t\t\t\t\t\t\tcodeStream.recordPositionsFrom(", "+//\t\t\t\t\t\t\t\tposition,", "+//\t\t\t\t\t\t\t\tthis.finallyBlock.sourceEnd);\t", "+//\t\t\t\t\t\t\tdefaultReturnLocationLabel.place();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df81ddfee0f5e73fcc5427ffe77d6e7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r public boolean matches(Binding binding)", "signatureAfterChange": "\r public int matchLevel(Binding binding)", "diff": ["- */\r", "-public boolean matches(Binding binding) {\r", "-\tif (!(binding instanceof ReferenceBinding)) return false;\r", "-\r", "-\tReferenceBinding type = (ReferenceBinding) binding;\r", "-\tif (this.matchesType(this.superSimpleName, this.superQualification, type.superclass())){\r", "-\t\treturn true;\r", "-\t}\r", "-\t\r", "-\tReferenceBinding[] superInterfaces = type.superInterfaces();\r", "-\tfor (int i = 0, max = superInterfaces.length; i < max; i++){\r", "-\t\tif (this.matchesType(this.superSimpleName, this.superQualification, superInterfaces[i])){\r", "-\t\t\treturn true;\r", "-\t\t}\r", "-\t}\r", "-\treturn false;\r", "-}\r", "+ */\r", "+public int matchLevel(Binding binding) {\r", "+\tif (binding == null) return INACCURATE_MATCH;\r", "+\tif (!(binding instanceof ReferenceBinding)) return IMPOSSIBLE_MATCH;\r", "+\r", "+\t// super class\r", "+\tReferenceBinding type = (ReferenceBinding) binding;\r", "+\tint level = this.matchLevelForType(this.superSimpleName, this.superQualification, type.superclass());\r", "+\tswitch (level) {\r", "+\t\tcase IMPOSSIBLE_MATCH:\r", "+\t\t\tbreak; // try to find match in super interfaces\r", "+\t\tcase ACCURATE_MATCH:\r", "+\t\t\treturn ACCURATE_MATCH;\r", "+\t\tdefault: // ie. INACCURATE_MATCH\r", "+\t\t\tbreak; // try to find accurate match in super interfaces\r", "+\t}\r", "+\r", "+\t// super interfaces\r", "+\tReferenceBinding[] superInterfaces = type.superInterfaces();\r", "+\tfor (int i = 0, max = superInterfaces.length; i < max; i++){\r", "+\t\tint newLevel = this.matchLevelForType(this.superSimpleName, this.superQualification, superInterfaces[i]);\r", "+\t\tswitch (newLevel) {\r", "+\t\t\tcase IMPOSSIBLE_MATCH:\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase ACCURATE_MATCH:\r", "+\t\t\t\treturn ACCURATE_MATCH;\r", "+\t\t\tdefault: // ie. INACCURATE_MATCH\r", "+\t\t\t\tlevel = newLevel;\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}\r", "+\treturn level;\r", "+}\r"]}], "num": 1058}
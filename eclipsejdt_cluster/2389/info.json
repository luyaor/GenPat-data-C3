{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f7ecdd9565d99f791efddf22075d2b4f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21260df894bb2b8f543cc50706319438", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "e7fbe3d2e46c3f4c5a40be9178ef6e8a36680f90", "commitAfterChange": "01f17876d50bd632100cd19774bf74ad112ea3f6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void testDeleteCompilationUnit1() throws CoreException", "signatureAfterChange": " public void testDeleteCompilationUnit1() throws CoreException", "diff": ["-\tcreateFile(", "-\t\t\"P/X.java\",", "-\t\t\"public class X {\\n\" +", "-\t\t\"}\"", "-\t);", "-\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "+\t\tcreateFile(", "+\t\t\t\"P/X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "316266b6327af05945c7c9133dc94621", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "e60903fe9d1be9609e2d7018794b66ab39d77839", "commitAfterChange": "1cff9f79be5fd6fcc760af55214bca85f6dbdfe8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  static State read(IProject project, DataInputStream in) throws IOException", "signatureAfterChange": "  static State read(IProject project, DataInputStream in) throws IOException", "diff": ["-\t\t\tcase 3 :", "-\t\t\t\tnewState.binaryLocations[i] = ClasspathLocation.forLibrary(project.getFile(in.readUTF()));", "-\t\t\t\tbreak;", "-\t\t\tcase 4 :", "+\t\t\tcase 3 : // external jar", "+\t\t\t\tbreak;", "+\t\t\tcase 4 : // project relative jar", "+\t\t\t\tnewState.binaryLocations[i] = ClasspathLocation.forLibrary(project.getFile(in.readUTF()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33ffe8da3eb2de7f8d082d10c89c5663", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/VerifyTests.java", "commitBeforeChange": "39861acf6f5ed9416f53173041678428430f9641", "commitAfterChange": "eed7cfbf09711b54c23c3f27ccae55c054529627", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate File locate(String fileName)", "signatureAfterChange": " \tprivate File locate(String fileName)", "diff": ["-\t\tfileName= fileName.replace('.', '/')+\".class\";", "-\t\tFile path= null;", "-\t\t", "+\t\t\tfileName= fileName.replace('.', '/')+\".class\";", "+\t\t\tFile path= null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "380aab301a74811dc0a73b24ba782eca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "4cd7b0042adaa5239f354bb5b89cc98c811b7e1c", "commitAfterChange": "e6a94071ba1347cd79bc7467e3bac32c94398042", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected void internalBeginToCompile(ICompilationUnit[] sourceUnits, int maxUnits)", "signatureAfterChange": " \tprotected void internalBeginToCompile(ICompilationUnit[] sourceUnits, int maxUnits)", "diff": ["-\t\t\tCompilationUnitDeclaration parsedUnit;", "-\t\t\tCompilationResult unitResult =", "-\t\t\t\tnew CompilationResult(sourceUnits[i], i, maxUnits, this.options.maxProblemsPerUnit);", "+\t\t\t\tCompilationUnitDeclaration parsedUnit;", "+\t\t\t\tCompilationResult unitResult =", "+\t\t\t\t\tnew CompilationResult(sourceUnits[i], i, maxUnits, this.options.maxProblemsPerUnit);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42e2b941a599bcf830d1e2b3aa58000b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "9cf9342bfccaf3b180016b3038d3a5505b18513b", "commitAfterChange": "5748429ca94879804fb33f7c763ccce1c242dd1a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic synchronized void containerPut(IJavaProject project, IPath containerPath, IClasspathContainer container)", "signatureAfterChange": "  \tpublic synchronized void containerPut(IJavaProject project, IPath containerPath, IClasspathContainer container)", "diff": ["-\t\t\t\tMap previousContainers = (Map)this.previousSessionContainers.get(project);", "-\t\t\t\tif (previousContainers != null){", "-\t\t\t\t\tpreviousContainers.remove(containerPath);", "-\t\t\t\t}", "-\t\t\t\tprojectContainers.put(containerPath, container);", "+   \t\t\t\tprojectContainers.put(containerPath, container);", "+\t\t\t}", "+\t\t\t// discard obsoleted information about previous session", "+\t\t\tMap previousContainers = (Map)this.previousSessionContainers.get(project);", "+\t\t\tif (previousContainers != null){", "+\t\t\t\tpreviousContainers.remove(containerPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43ae6fa2d2bea1564347d032d9c7b775", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingComparator.java", "commitBeforeChange": "d081f154b76ddac0c1dcda0757d415e7d336387e", "commitAfterChange": "6d8ec2e5e03795d4ee1a59d4be8d0c5566c82385", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding2, HashSet visitedTypes)", "signatureAfterChange": " \tstatic boolean isEqual(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding, org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding2, HashSet visitedTypes)", "diff": ["-\t// TODO (olivier) should optimize to use switch(binding.kind()) & modifier bitmask comparisons", "-\t\tif (visitedTypes.contains(typeBinding)) return true;", "-\t\tvisitedTypes.add(typeBinding);", "-\t\t", "+\t\t\t\tif (visitedTypes.contains(typeBinding)) return true;", "+\t\t\t\tvisitedTypes.add(typeBinding);", "+\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5448784449ec7e06b776aed6c7e9ba7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "e3ab7adcf5341254d66eeef47fc0727dbe42868f", "commitAfterChange": "8915ec2bb74e44419be85002d7c3a4c9f8582635", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \t\tpublic int logProblems(IProblem[] problems, char[] unitSource, Main currentMain)", "signatureAfterChange": "  \t\tpublic int logProblems(IProblem[] problems, char[] unitSource, Main currentMain)", "diff": ["+\t\t\t\t\t\t\tlocalErrorCount++;\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\tlocalErrorCount++;", "+\t\t\t\t\t\t\tlocalErrorCount++;", "-\t\t\t\t\t\t\t\tlocalErrorCount++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59f97f4824bb1bfadcedec67cbf17c3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AND_AND_Expression.java", "commitBeforeChange": "790aac30bd6ce816d617cb5a88f2ad25d5ac804c", "commitAfterChange": "2de52c15a156e7b5856add0dc9ffb53a5657312f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void generateOptimizedBoolean( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedBoolean( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "diff": ["+\t\t\t", "+\t\t\t\t// reposition the endPC", "+\t\t\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);", "-\t\t\t// reposition the endPC", "-\t\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);", "+\t\t\t\t// reposition the endPC", "+\t\t\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);", "-\t\t\t// reposition the endPC", "-\t\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77a819846dc320bbbd4a848355e16b71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/InnerClassesAttribute.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic InnerClassesAttribute( \t\tbyte[] classFileBytes, \t\tIConstantPool constantPool, \t\tint offset) \t\tthrows ClassFormatException", "signatureAfterChange": " \tpublic InnerClassesAttribute( \t\tbyte[] classFileBytes, \t\tIConstantPool constantPool, \t\tint offset) \t\tthrows ClassFormatException", "diff": ["-\t\tint readOffset = 8;", "+\t\t\tint readOffset = 8;", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tthis.entries[i] = new InnerClassesAttributeEntry(classFileBytes, constantPool, offset + readOffset);", "+\t\t\t\treadOffset += 8;", "+\t\t\t}\t\t", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tthis.entries[i] = new InnerClassesAttributeEntry(classFileBytes, constantPool, offset + readOffset);", "-\t\t\treadOffset += 8;", "-\t\t}\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7898f41b1f4048d72bd7708e21a9dc10", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "aa30b6c5cc40628ad46df8fcef93de365234d26c", "commitAfterChange": "d18d748d27f9a5a2b0700c50117c5b71b5a69a2c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] classpath, IPath outputLocation)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] classpath, IPath outputLocation)", "diff": ["-\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestEntryInOutput\",entryPath.toString(), outputLocation.toString())); //$NON-NLS-1$", "+\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestOutputInEntry\", outputLocation.toString(), entryPath.toString())); //$NON-NLS-1$", "-\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestOutputInEntry\", outputLocation.toString(), entryPath.toString())); //$NON-NLS-1$", "+\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestEntryInOutput\", entryPath.toString(), outputLocation.toString())); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "897c0fbe94e546afc7b6641a927365ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/DeleteTests.java", "commitBeforeChange": "e7fbe3d2e46c3f4c5a40be9178ef6e8a36680f90", "commitAfterChange": "01f17876d50bd632100cd19774bf74ad112ea3f6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void testDeleteCompilationUnit2() throws CoreException", "signatureAfterChange": " public void testDeleteCompilationUnit2() throws CoreException", "diff": ["-\tIFile file = createFile(", "-\t\t\"P/X.java\",", "-\t\t\"public class X {\\n\" +", "-\t\t\"}\"", "-\t);", "-\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "+\t\tIFile file = createFile(", "+\t\t\t\"P/X.java\",", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"}\"", "+\t\t);", "+\t\tICompilationUnit cu = getCompilationUnit(\"P/X.java\");", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a8163b905daa56d1c62691c88fc5591", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "fdc1a95914ad55bbfb8c709b84d743d5d21781f2", "commitAfterChange": "255c17210a3eb3218269e27dd263bf73946a0d2e", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "signatureAfterChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "diff": ["-\t\t\tMethodBinding[] nonVisible = (MethodBinding[]) nonVisibleDefaultMethods.get(inheritedMethod.selector);", "-\t\t\tif (nonVisible != null)", "-\t\t\t\tfor (int i = 0, l = nonVisible.length; i < l; i++)", "-\t\t\t\t\tif (areMethodsCompatible(nonVisible[i], inheritedMethod))", "-\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\tMethodBinding[] nonVisible = (MethodBinding[]) nonVisibleDefaultMethods.get(inheritedMethod.selector);", "+\t\t\t\tif (nonVisible != null)", "+\t\t\t\t\tfor (int i = 0, l = nonVisible.length; i < l; i++)", "+\t\t\t\t\t\tif (areMethodsCompatible(nonVisible[i], inheritedMethod))", "+\t\t\t\t\t\t\tcontinue nextMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acf662310ce0ed7ff43cdc4a5f2b00d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/PackageBinding.java", "commitBeforeChange": "4915e7337ff3d3a037d50fa25171594a7d1743a5", "commitAfterChange": "38fd702e92bc9dac5e95232940541493c9cc3922", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  public Binding getTypeOrPackage(char[] name)", "signatureAfterChange": "  public Binding getTypeOrPackage(char[] name)", "diff": ["+\t\treferenceBinding = (ReferenceBinding) BinaryTypeBinding.resolveType(referenceBinding, this.environment, false /* no raw conversion for now */);", "+\t\tif (referenceBinding.isNestedType()) {", "+\t\t\treturn new ProblemReferenceBinding(new char[][]{name}, referenceBinding, ProblemReasons.InternalNameProvided);", "+\t\t}", "-\t\t\treferenceBinding = (ReferenceBinding) BinaryTypeBinding.resolveType(referenceBinding, this.environment, false /* no raw conversion for now */);", "-\t\t\tif (referenceBinding.isNestedType()) {", "-\t\t\t\treturn new ProblemReferenceBinding(new char[][]{name}, referenceBinding, ProblemReasons.InternalNameProvided);", "-\t\t\t}", "+\t\t// referenceBinding is a MissingType, will return it if no package is found"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f82438aedcbce2817273c9c83f127e10", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "14e234724f203a6fef415e43d34432d323b84ca1", "commitAfterChange": "66e076adb0340dce3dd9bba5c2d65608184b470b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean commentParse()", "signatureAfterChange": " \tprotected boolean commentParse()", "diff": ["-\t\t\t\t\t\t\t\t\t\tthis.textStart = this.tagSourceEnd+1;", "-\t\t\t\t\t\t\t\t\t\tinvalidTagLineEnd  = this.lineEnd;", "+\t\t\t\t\t\t\t\t\tthis.textStart = this.tagSourceEnd+1;", "+\t\t\t\t\t\t\t\t\tinvalidTagLineEnd  = this.lineEnd;"]}], "num": 2389}
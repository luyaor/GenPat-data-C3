{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1457729f6afaf0ab045743c9246d34a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3335227b04f841f22a6c0966337a2b7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "f74beb57e62e872a608b1d99069f6ffa51720699", "commitAfterChange": "0bcd341ea781d3ca9f30d724e6161bfab2161b14", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " public void _test0026()", "signatureAfterChange": " public void test0026()", "diff": ["-public void _test0026() {", "+// NOTE: THIS TEST MOST LIKELY CAPTURES THE WRONG OUTPUT FOR JAVA 8. AS WE FIX TYPE INFERENCE ISSUES, THIS MAY FAIL.", "+public void test0026() {", "+\t\tthis.complianceLevel < ClassFileConstants.JDK1_8 ? ", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\" :", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tX<Number> x = new X<>(1);\\n\" + ", "+\t\t\t\"\t              ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X<Integer> to X<Number>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tX<Object> x4 = new X<>(1).idem();\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X<Integer> to X<Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\t\"\tX<Object> x5 = new X<>(1);\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X<Integer> to X<Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"\tint i = m(new X<>(\\\"\\\"));\\n\" + ", "+\t\t\t\"\t          ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The constructor X<String>(String) is ambiguous\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "720b18c50bcb61e50f35b84bc8dcafb5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "08c5b9004bde27fb4063ce300ce881966676fe74", "commitAfterChange": "28d58bf6eb942015446b8ffce8f446f86e9686d9", "methodNumberBeforeChange": 172, "methodNumberAfterChange": 172, "signatureBeforeChange": " public void test401847a()", "signatureAfterChange": " public void test401847a()", "diff": ["-\t\t\t\"\t^^^\\n\" + ", "-\t\t\t\"The method foo(I...) in the type X is not applicable for the arguments ((true ? X::goo : X::goo))\\n\" + ", "+\t\t\t\"\t           ^^^^^^\\n\" + ", "+\t\t\t\"The type of goo() from the type X is int, this is incompatible with the descriptor\\'s return type: String\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tfoo(true ? X::goo : X::goo);\\n\" + ", "+\t\t\t\"\t                    ^^^^^^\\n\" + ", "+\t\t\t\"The type of goo() from the type X is int, this is incompatible with the descriptor\\'s return type: String\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tfoo(true ? x-> 1 : x->0);\\n\" + ", "+\t\t\t\"\t               ^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from int to String\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tfoo(true ? x-> 1 : x->0);\\n\" + ", "+\t\t\t\"\t                      ^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from int to String\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ace4f14e2f80d60fec71881090dbacc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 188, "methodNumberAfterChange": 188, "signatureBeforeChange": "     public void test182()", "signatureAfterChange": "     public void test182()", "diff": ["-    \t\t\"The method initialize(null, null, null) is undefined for the type Y\\n\" + ", "+    \t\t\"The method initialize(Zork, String, Thread) from the type Y refers to the missing type Zork\\n\" + ", "-    \t\t\"1. ERROR in Y.java (at line 6)\\n\" + ", "+    \t\t\"1. WARNING in Y.java (at line 6)\\n\" + ", "+    \t\t\"\tpublic void initialize(Zork z, String s) {\\n\" + ", "+    \t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+    \t\t\"The deprecated method initialize(Zork, String) of type Y should be annotated with @Deprecated\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. ERROR in Y.java (at line 6)\\n\" + ", "-    \t\t\"2. ERROR in Y.java (at line 9)\\n\" + ", "+    \t\t\"3. ERROR in Y.java (at line 6)\\n\" + ", "+    \t\t\"\tpublic void initialize(Zork z, String s) {\\n\" + ", "+    \t\t\"\t                            ^\\n\" + ", "+    \t\t\"Javadoc: Missing tag for parameter z\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"4. ERROR in Y.java (at line 6)\\n\" + ", "+    \t\t\"\tpublic void initialize(Zork z, String s) {\\n\" + ", "+    \t\t\"\t                                      ^\\n\" + ", "+    \t\t\"Javadoc: Missing tag for parameter s\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"5. ERROR in Y.java (at line 9)\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f174c4307043cf07179c5a802350ec9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " public void test0026()", "signatureAfterChange": " public void test0026()", "diff": ["-// NOTE: THIS TEST MOST LIKELY CAPTURES THE WRONG OUTPUT FOR JAVA 8. AS WE FIX TYPE INFERENCE ISSUES, THIS MAY FAIL.", "+// FIXME(stephan): javac8 does not report the ambiguity, re-check after integrating inference with overload resolution", "-\t\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\t\"\tX<Number> x = new X<>(1);\\n\" + ", "-\t\t\t\"\t              ^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from X<Integer> to X<Number>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 12)\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 13)\\n\" + ", "-\t\t\t\"\tX<Object> x5 = new X<>(1);\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from X<Integer> to X<Object>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 15)\\n\" + "]}], "num": 45204}
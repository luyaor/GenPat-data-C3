{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "871ef1222cf681cca718b8f2dafe6366", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aea8690dba892cddcfd42de903353e00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "80a71329c6d3a0896fae7794150ec55104f5c2f0", "commitAfterChange": "f59cd62ee82097eb13f8e87f8fbab8b81f747c29", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  protected void recordExpectedType(TypeBinding expectedType, int nullCount)", "signatureAfterChange": "  protected void recordProvidedExpectedTypes(TypeBinding providedType, TypeBinding expectedType, int nullCount)", "diff": ["-protected void recordExpectedType(TypeBinding expectedType, int nullCount) {", "+protected void recordProvidedExpectedTypes(TypeBinding providedType, TypeBinding expectedType, int nullCount) {", "-\t\tthis.expectedTypes = new TypeBinding[5];", "-\t} else if (this.expectedTypes == null) {", "+\t\tthis.providedExpectedTypes = new TypeBinding[5][];", "+\t} else if (this.providedExpectedTypes == null) {", "-\t\tthis.expectedTypes = new TypeBinding[size];", "+\t\tthis.providedExpectedTypes = new TypeBinding[size][];", "-\telse if (nullCount >= this.expectedTypes.length) {", "-\t\tint oldLen = this.expectedTypes.length;", "-\t\tSystem.arraycopy(this.expectedTypes, 0,", "-\t\t\tthis.expectedTypes = new TypeBinding[nullCount * 2], 0, oldLen);", "+\telse if (nullCount >= this.providedExpectedTypes.length) {", "+\t\tint oldLen = this.providedExpectedTypes.length;", "+\t\tSystem.arraycopy(this.providedExpectedTypes, 0,", "+\t\t\tthis.providedExpectedTypes = new TypeBinding[nullCount * 2][], 0, oldLen);", "-\tthis.expectedTypes[nullCount] = expectedType;", "+\tthis.providedExpectedTypes[nullCount] = new TypeBinding[]{providedType, expectedType};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6f5bc11b67d840312980d7c23be1f79", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "7ceb7b86e5d2c6d0639c543a0b8998dc4ed1502e", "commitAfterChange": "9a7973aead32a6f88b27fa3f47ab00d5a6b3a410", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 39, "signatureBeforeChange": "  \tprotected ConstraintFormula[] deriveTypeArgumentConstraintsRecursive(TypeBinding s, TypeBinding t, boolean isSoft)", "signatureAfterChange": " \t \tprotected TypeBinding[] superTypesWithCommonGenericType(TypeBinding s, TypeBinding t)", "diff": ["-", "-\tprotected ConstraintFormula[] deriveTypeArgumentConstraintsRecursive(TypeBinding s, TypeBinding t, boolean isSoft) {", "-\t\tif (s == null || s.id == TypeIds.T_JavaLangObject || t == null || t.id == TypeIds.T_JavaLangObject)", "-\t\t\treturn null;", "-\t\tif (TypeBinding.equalsEquals(s.original(), t.original())) {", "-\t\t\treturn typeArgumentEqualityConstraints(s, t, isSoft);", "-\t\t}", "-\t\tTypeBinding tSuper = t.findSuperTypeOriginatingFrom(s);", "-\t\tif (tSuper != null) {", "-\t\t\treturn typeArgumentEqualityConstraints(s, tSuper, isSoft);", "-\t\t}", "-\t\tConstraintFormula[] result = deriveTypeArgumentConstraintsRecursive(s.superclass(), t, isSoft);", "-\t\tif (result != null)", "-\t\t\treturn result;", "-\t\tReferenceBinding[] superInterfaces = s.superInterfaces();", "-\t\tif (superInterfaces != null) {", "-\t\t\tfor (int i = 0; i < superInterfaces.length; i++) {", "-\t\t\t\tresult = deriveTypeArgumentConstraintsRecursive(superInterfaces[i], t, isSoft);", "-\t\t\t\tif (result != null)", "-\t\t\t\t\treturn result;", "-\t\t\t}", "-\t\t}", "+\t", "+\tprotected TypeBinding[] superTypesWithCommonGenericType(TypeBinding s, TypeBinding t) {", "+\t\tif (s == null || s.id == TypeIds.T_JavaLangObject || t == null || t.id == TypeIds.T_JavaLangObject)", "+\t\t\treturn null;", "+\t\tif (TypeBinding.equalsEquals(s.original(), t.original())) {", "+\t\t\treturn new TypeBinding[] { s, t };", "+\t\t}", "+\t\tTypeBinding tSuper = t.findSuperTypeOriginatingFrom(s);", "+\t\tif (tSuper != null) {", "+\t\t\treturn new TypeBinding[] {s, tSuper};", "+\t\t}", "+\t\tTypeBinding[] result = superTypesWithCommonGenericType(s.superclass(), t);", "+\t\tif (result != null)", "+\t\t\treturn result;", "+\t\tReferenceBinding[] superInterfaces = s.superInterfaces();", "+\t\tif (superInterfaces != null) {", "+\t\t\tfor (int i = 0; i < superInterfaces.length; i++) {", "+\t\t\t\tresult = superTypesWithCommonGenericType(superInterfaces[i], t);", "+\t\t\t\tif (result != null)", "+\t\t\t\t\treturn result;", "+\t\t\t}", "+\t\t}", "+\t\treturn null;", "+\t}"]}], "num": 4554}
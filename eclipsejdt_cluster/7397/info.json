{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fba25f7eff78c17b75c50bf19bd50721", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "160f6a37168a4454839135168279f0a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 37, "signatureBeforeChange": " public static char[] toCharArray(char[] methodSignature, char[] methodName, char[][] parameterNames, boolean fullyQualifyTypeNames, boolean includeReturnType)", "signatureAfterChange": " public static char[] toCharArray(char[] methodSignature, char[] methodName, char[][] parameterNames, boolean fullyQualifyTypeNames, boolean includeReturnType)", "diff": ["-\treturn toCharArray(methodSignature, methodName, parameterNames, fullyQualifyTypeNames, includeReturnType, false, false);", "-}", "+\tint firstParen = CharOperation.indexOf(C_PARAM_START, methodSignature);", "+\tif (firstParen == -1) {", "+\t}", "+\t", "+\tStringBuffer buffer = new StringBuffer(methodSignature.length + 10);", "+\t", "+\t// return type", "+\tif (includeReturnType) {", "+\t\tchar[] rts = getReturnType(methodSignature);", "+\t\tappendTypeSignature(rts, 0 , fullyQualifyTypeNames, buffer);", "+\t\tbuffer.append(' ');", "+\t}", "+\t", "+\t// selector", "+\tif (methodName != null) {", "+\t\tbuffer.append(methodName);", "+\t}", "+\t", "+\t// parameters", "+\tbuffer.append('(');", "+\tchar[][] pts = getParameterTypes(methodSignature);", "+\tfor (int i = 0; i < pts.length; i++) {", "+\t\tappendTypeSignature(pts[i], 0 , fullyQualifyTypeNames, buffer);", "+\t\tif (parameterNames != null) {", "+\t\t\tbuffer.append(' ');", "+\t\t\tbuffer.append(parameterNames[i]);", "+\t\t}", "+\t\tif (i != pts.length - 1) {", "+\t\t\tbuffer.append(',');", "+\t\t\tbuffer.append(' ');", "+\t\t}", "+\t}", "+\tbuffer.append(')');", "+\tchar[] result = new char[buffer.length()];", "+\tbuffer.getChars(0, buffer.length(), result, 0);", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1827cd83da96e3c23ecf1ba837e1d4af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "575e550c3da950f3c54755e34320456663152397", "commitAfterChange": "f263f2ef7943b444a7df1ecbae4d4e44696c99a8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public char[] computeGenericTypeSignature(TypeVariableBinding[] typeVariables)", "signatureAfterChange": " public char[] computeGenericTypeSignature(TypeVariableBinding[] typeVariables)", "diff": ["-    if (typeVariables == NoTypeVariables) {", "-        return signature();", "-    } else {", "-\t    char[] typeSig = signature();", "-\t    StringBuffer sig = new StringBuffer(10);", "+", "+\tboolean isMemberOfGeneric = isMemberType() && (enclosingType().modifiers & AccGenericSignature) != 0;", "+\tif (typeVariables == NoTypeVariables && !isMemberOfGeneric) {", "+\t\treturn signature();", "+\t}", "+\tStringBuffer sig = new StringBuffer(10);", "+\tif (isMemberOfGeneric) {", "+\t    char[] typeSig = enclosingType().genericTypeSignature();", "+\t    sig.append('.'); // NOTE: cannot override trailing ';' with '.' in enclosing signature, since shared char[]", "+\t    sig.append(this.sourceName);", "+\t}\telse {", "+\t    char[] typeSig = signature();", "+\t    for (int i = 0; i < typeSig.length-1; i++) { // copy all but trailing semicolon", "+\t    \tsig.append(typeSig[i]);", "+\t    }", "+\t}", "+\tif (typeVariables == NoTypeVariables) {", "+\t    sig.append(';');", "+\t} else {", "-\t\tint sigLength = sig.length();", "-\t\tchar[] result = new char[sigLength];", "-\t\tsig.getChars(0, sigLength, result, 0);", "-\t\treturn result;", "-    }", "+\t}", "+\tint sigLength = sig.length();", "+\tchar[] result = new char[sigLength];", "+\tsig.getChars(0, sigLength, result, 0);", "+\treturn result;"]}], "num": 7397}
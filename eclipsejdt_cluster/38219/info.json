{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0a555f534f0855f4b061d362cebf5c7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "160815a10b30cb52a284dc039ef4dc52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "33e03339ed2881c9f793c3a49497633bbac5c8a8", "commitAfterChange": "09c3f545375b31028657f0b8044c5cbcb5324abc", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 124, "signatureBeforeChange": " protected void consumeToken(int token)", "signatureAfterChange": " protected void consumeToken(int token)", "diff": ["+\t\t\t\t\tcase K_INSIDE_ASSERT_EXCEPTION :", "+\t\t\t\t\t\tif(topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == this.bracketDepth) {", "+\t\t\t\t\t\t\tpopElement(K_INSIDE_ASSERT_EXCEPTION);", "+\t\t\t\t\t\t\tpopElement(K_INSIDE_ASSERT_STATEMENT);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "-\t\t\t\tif(topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_CONDITIONAL_OPERATOR", "-\t\t\t\t\t&& topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == QUESTION) {", "-\t\t\t\t\tpopElement(K_CONDITIONAL_OPERATOR);", "-\t\t\t\t\tpushOnElementStack(K_CONDITIONAL_OPERATOR, COLON);", "-\t\t\t\t} else {", "-\t\t\t\t\tif(topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_BETWEEN_CASE_AND_COLON) {", "+\t\t\t\tswitch (topKnownElementKind(COMPLETION_OR_ASSIST_PARSER)) {", "+\t\t\t\t\tcase K_CONDITIONAL_OPERATOR:", "+\t\t\t\t\t\tif (topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == QUESTION) {", "+\t\t\t\t\t\t\tpopElement(K_CONDITIONAL_OPERATOR);", "+\t\t\t\t\t\t\tpushOnElementStack(K_CONDITIONAL_OPERATOR, COLON);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase K_BETWEEN_CASE_AND_COLON:", "-\t\t\t\t\t} else {", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase K_BETWEEN_DEFAULT_AND_COLON:", "-\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase K_INSIDE_ASSERT_STATEMENT:", "+\t\t\t\t\t\tpushOnElementStack(K_INSIDE_ASSERT_EXCEPTION, this.bracketDepth);", "+\t\t\t\t\t\tbreak;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f3484d7d434bc5331a2bbd4e1da283e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "966a22346960ea60743eaef27c799d23dc7b9bd3", "commitAfterChange": "89566b19098686deffb54767a28967337579ef90", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean isCompound)", "signatureAfterChange": " \t \tpublic FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean isCompound)", "diff": ["-\t\t\tif (binding == lastFieldBinding", "+\t\t\tif (otherBindingsCount == 0", "-\t\t\tif (lastFieldBinding == binding){", "-\t\t\t\tlastReceiverType = this.actualReceiverType;", "-\t\t\t} else if (otherBindingsCount == 1){", "-\t\t\t\tlastReceiverType = ((VariableBinding)this.binding).type;", "-\t\t\t} else {", "-\t\t\t\tlastReceiverType = this.otherBindings[otherBindingsCount-2].type;", "+\t\t\tswitch (otherBindingsCount) {", "+\t\t\t\tcase 0 :", "+\t\t\t\t\tlastReceiverType = this.actualReceiverType;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 1 :", "+\t\t\t\t\tlastReceiverType = ((VariableBinding)this.binding).type;", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\tlastReceiverType = this.otherBindings[otherBindingsCount-2].type;", "+\t\t\t\t\tbreak;", "-\t\t\t\tlastFieldBinding == binding", "-\t\t\t\t\t? 0 ", "-\t\t\t\t\t: otherBindingsCount, ", "+\t\t\t\totherBindingsCount, ", "-\t\tif (lastFieldBinding == binding){", "-\t\t\tlastReceiverType = this.actualReceiverType;", "-\t\t} else if (otherBindingsCount == 1){", "-\t\t\tlastReceiverType = ((VariableBinding)this.binding).type;", "-\t\t} else {", "-\t\t\tlastReceiverType = this.otherBindings[otherBindingsCount-2].type;", "+\t\tswitch (otherBindingsCount) {", "+\t\t\tcase 0 :", "+\t\t\t\tlastReceiverType = this.actualReceiverType;", "+\t\t\t\tbreak;", "+\t\t\tcase 1 :", "+\t\t\t\tlastReceiverType = ((VariableBinding)this.binding).type;", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\tlastReceiverType = this.otherBindings[otherBindingsCount-2].type;", "+\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "593a9cf16744b9c8266661fad62f8b40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 114, "signatureBeforeChange": " \tpublic static int scanTypeBoundSignature(char[] string, int start)", "signatureAfterChange": " \tpublic static int scanTypeBoundSignature(char[] string, int start)", "diff": ["-\t\tif (c == Signature.C_STAR) { //$NON-NLS-1$", "-\t\t\treturn start;", "-\t\t}", "-\t", "-\t\t// need a minimum 4 chars \"+Lx;\"", "-\t\tif (start >= string.length - 3) { ", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\t// must start in \"+/-\"", "-\t\tif (c != Signature.C_SUPER && c != Signature.C_EXTENDS) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\tc = string[start + 1];", "+\t\t\tcase Signature.C_STAR :", "+\t\t\t\treturn start;", "-\t\t\t\treturn scanTypeBoundSignature(string, start + 1);", "+\t\t\t\t// need a minimum 4 chars \"+Lx;\"", "+\t\t\t\tif (start >= string.length - 3) {", "+\t\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\t// must start in \"+/-\"", "+\t\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\t\t", "+\t\t}", "+\t\tc = string[++start];", "+\t\tswitch (c) {", "+\t\t\tcase Signature.C_CAPTURE :", "+\t\t\t\treturn scanCaptureTypeSignature(string, start);", "+\t\t\tcase Signature.C_SUPER :", "+\t\t\tcase Signature.C_EXTENDS :", "+\t\t\t\treturn scanTypeBoundSignature(string, start);", "-\t\t\t\treturn scanClassTypeSignature(string, start + 1);", "+\t\t\t\treturn scanClassTypeSignature(string, start);", "-\t\t\t\treturn scanTypeVariableSignature(string, start + 1);", "+\t\t\t\treturn scanTypeVariableSignature(string, start);", "-\t\t\t\treturn scanArrayTypeSignature(string, start + 1);", "+\t\t\t\treturn scanArrayTypeSignature(string, start);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65b7e77885635e0c9a355801c1e971ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "c0f9d8b84abc89ce64134386f4c44ab56579df25", "commitAfterChange": "9ba8652d2cebf2117416af5e39a70e172556117b", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " private static int appendClassTypeSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer)", "signatureAfterChange": " private static int appendClassTypeSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer)", "diff": ["-\t\tif (c == C_SEMICOLON) {", "-\t\t\t// all done", "-\t\t\treturn p;", "-\t\t} else if (c == C_GENERIC_START) {", "-\t\t\tint e = appendTypeArgumentSignatures(string, p, fullyQualifyTypeNames, buffer);", "-\t\t\t// once we hit type arguments there are no more package prefixes", "-\t\t\tremovePackageQualifiers = false;", "-\t\t\tp = e;", "-\t\t} else if (c == C_DOT || c == '/') {", "-\t\t\tif (removePackageQualifiers) {", "-\t\t\t\t// erase package prefix", "-\t\t\t\tbuffer.setLength(checkpoint);", "-\t\t\t} else {", "-\t\t\t\tbuffer.append('.');", "-\t\t\t}", "-\t\t} else if (c == C_DOLLAR && resolved) {", "-\t\t\t// once we hit \"$\" there are no more package prefixes", "-\t\t\tremovePackageQualifiers = false;", "-\t\t\t/**", "-\t\t\t * Convert '$' in resolved type signatures into '.'.", "-\t\t\t * NOTE: This assumes that the type signature is an inner type", "-\t\t\t * signature. This is true in most cases, but someone can define a", "-\t\t\t * non-inner type name containing a '$'.", "-\t\t\t */", "-\t\t\tbuffer.append('.');", "-\t\t} else {", "-\t\t\tbuffer.append(c);", "+\t\tswitch(c) {", "+\t\t\tcase C_SEMICOLON :", "+\t\t\t\t// all done", "+\t\t\t\treturn p;", "+\t\t\tcase C_GENERIC_START :", "+\t\t\t\tint e = appendTypeArgumentSignatures(string, p, fullyQualifyTypeNames, buffer);", "+\t\t\t\t// once we hit type arguments there are no more package prefixes", "+\t\t\t\tremovePackageQualifiers = false;", "+\t\t\t\tp = e;", "+\t\t\t\tbreak;", "+\t\t\tcase C_DOT :", "+\t\t\t\tif (removePackageQualifiers) {", "+\t\t\t\t\t// erase package prefix", "+\t\t\t\t\tbuffer.setLength(checkpoint);", "+\t\t\t\t} else {", "+\t\t\t\t\tbuffer.append('.');", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t case '/' :", "+\t\t\t\tif (removePackageQualifiers) {", "+\t\t\t\t\t// erase package prefix", "+\t\t\t\t\tbuffer.setLength(checkpoint);", "+\t\t\t\t} else {", "+\t\t\t\t\tbuffer.append('/');", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t case C_DOLLAR :", "+\t\t\t \tif (resolved) {", "+\t\t\t\t\t// once we hit \"$\" there are no more package prefixes", "+\t\t\t\t\tremovePackageQualifiers = false;", "+\t\t\t\t\t/**", "+\t\t\t\t\t * Convert '$' in resolved type signatures into '.'.", "+\t\t\t\t\t * NOTE: This assumes that the type signature is an inner type", "+\t\t\t\t\t * signature. This is true in most cases, but someone can define a", "+\t\t\t\t\t * non-inner type name containing a '$'.", "+\t\t\t\t\t */", "+\t\t\t\t\tbuffer.append('.');", "+\t\t\t \t}", "+\t\t\t \tbreak;", "+\t\t\t default :", "+\t\t\t\tbuffer.append(c);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfe45c6f4b88bc75306d9613c865fb7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "f8406402dab63bd844517051ef5aaa1b160d2392", "commitAfterChange": "5bd6b9d7331a9e7fe82d427994d62e0af1821389", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t\tpublic CategorizedProblem createProblem( \t\t\tchar[] originatingFileName, \t\t\tint problemId, \t\t\tString[] problemArguments, \t\t\tString[] messageArguments, \t\t\tint severity, \t\t\tint start, \t\t\tint end, \t\t\tint lineNumber, \t\t\tint columnNumber)", "signatureAfterChange": "  \t\tpublic CategorizedProblem createProblem( \t\t\tchar[] originatingFileName, \t\t\tint problemId, \t\t\tString[] problemArguments, \t\t\tString[] messageArguments, \t\t\tint severity, \t\t\tint start, \t\t\tint end, \t\t\tint lineNumber, \t\t\tint columnNumber)", "diff": ["-\t\t\tif (this.checkProblems && !this.hasProblems) {", "-\t\t\t\tif (id == IProblem.UsingDeprecatedType) {", "-\t\t\t\t\tthis.hasProblems =", "-\t\t\t\t\t\tCompletionEngine.this.options.checkDeprecation;", "-\t\t\t\t} else if (id == IProblem.NotVisibleType) {", "-\t\t\t\t\tthis.hasProblems =", "-\t\t\t\t\t\tCompletionEngine.this.options.checkVisibility;", "-\t\t\t\t} else if (id == IProblem.ForbiddenReference) {", "-\t\t\t\t\tthis.hasProblems =", "-\t\t\t\t\t\tCompletionEngine.this.options.checkForbiddenReference;", "-\t\t\t\t} else if (id == IProblem.DiscouragedReference) {", "-\t\t\t\t\tthis.hasProblems =", "-\t\t\t\t\t\tCompletionEngine.this.options.checkDiscouragedReference;", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.hasProblems = true;", "+\t\t\tif (this.checkProblems && !this.hasForbiddenProblems) {", "+\t\t\t\tswitch (id) {", "+\t\t\t\t\tcase IProblem.UsingDeprecatedType:", "+\t\t\t\t\t\tthis.hasForbiddenProblems =", "+\t\t\t\t\t\t\tCompletionEngine.this.options.checkDeprecation;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IProblem.NotVisibleType:", "+\t\t\t\t\t\tthis.hasForbiddenProblems =", "+\t\t\t\t\t\t\tCompletionEngine.this.options.checkVisibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IProblem.ForbiddenReference:", "+\t\t\t\t\t\tthis.hasForbiddenProblems =", "+\t\t\t\t\t\t\tCompletionEngine.this.options.checkForbiddenReference;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IProblem.DiscouragedReference:", "+\t\t\t\t\t\tthis.hasForbiddenProblems =", "+\t\t\t\t\t\t\tCompletionEngine.this.options.checkDiscouragedReference;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tif ((severity & ProblemSeverities.Optional) != 0) {", "+\t\t\t\t\t\t\tthis.hasAllowedProblems = true;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.hasForbiddenProblems = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tbreak;", "+\t\t}"]}], "num": 38219}
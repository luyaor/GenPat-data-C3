{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8af3b2239634682d948793a9d6828b33", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f42e95bf90af9c263e6b1a26efd5d7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  protected void report(IResource resource, int sourceStart, int sourceEnd, IJavaElement element, int accuracy, SearchParticipant participant) throws CoreException", "signatureAfterChange": "  protected void report(SearchMatch match) throws CoreException", "diff": ["-protected void report(IResource resource, int sourceStart, int sourceEnd, IJavaElement element, int accuracy, SearchParticipant participant) throws CoreException {", "+protected void report(SearchMatch match) throws CoreException {", "-\tif (SearchEngine.VERBOSE)", "+\tif (SearchEngine.VERBOSE) {", "-\tString documentPath = element.getPath().toString();", "-\tSearchMatch match = new JavaSearchMatch(resource, element, documentPath, accuracy, participant, sourceStart, sourceEnd+1, -1);", "+\t\tSystem.out.println(\"Reporting match\"); //$NON-NLS-1$", "+\t\tSystem.out.println(\"\\tDocument path: \" + match.getDocumentPath()); //$NON-NLS-2$//$NON-NLS-1$", "+\t\tSystem.out.println(\"\\tPositions: [\" + match.getSourceStart() + \", \" + match.getSourceEnd() + \"]\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\tSystem.out.println(\"\\tJava element: \" + match.getDescriptiveLocation()); //$NON-NLS-1$", "+\t\tSystem.out.println(match.getAccuracy() == IJavaSearchResultCollector.EXACT_MATCH", "+\t\t\t? \"\\tAccuracy: EXACT_MATCH\" //$NON-NLS-1$", "+\t\t\t: \"\\tAccuracy: POTENTIAL_MATCH\"); //$NON-NLS-1$", "+\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a2f4cc8922ef6a6cec5f7edd6dbdb61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "1317e9ebe26807b45d83a46701194241e6f648d5", "commitAfterChange": "3649f3f6d703fd53c9c12b41cdc037f657d98134", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic static IClasspathEntry[] getResolvedClasspathContainer(IPath containerPath, IJavaProject project) throws JavaModelException", "signatureAfterChange": "\r \tpublic static IClasspathContainer getClasspathContainer(IPath containerPath, IJavaProject project) throws JavaModelException", "diff": ["+\t */\r", "+\tpublic static IClasspathContainer getClasspathContainer(IPath containerPath, IJavaProject project) throws JavaModelException {\r", "+\r", "+\t\tMap projectContainers = (Map)JavaModelManager.Containers.get(project);\r", "+\t\tif (projectContainers == null){\r", "+\t\t\tprojectContainers = new HashMap(1);\r", "+\t\t\tJavaModelManager.Containers.put(project, projectContainers);\r", "+\t\t}\r", "+\t\tIClasspathContainer container = (IClasspathContainer)projectContainers.get(containerPath);\r", "+\r", "+\t\tif (container == JavaModelManager.ContainerInitializationInProgress) return null; // break cycle\r", "+\t\tif (container == null){\r", "+\t\t\tClasspathContainerInitializer initializer = JavaModelManager.getClasspathContainerInitializer(containerPath.segment(0));\r", "+\t\t\tif (initializer != null){\r", "+\t\t\t\tprojectContainers.put(containerPath, JavaModelManager.ContainerInitializationInProgress); // avoid initialization cycles\r", "+\t\t\t\tboolean ok = false;\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tinitializer.initialize(containerPath.segment(0), containerPath.segment(1), project);\r", "+\t\t\t\t\tif (container != null){\r", "+\t\t\t\t\t\tIClasspathEntry[] entries = container.getClasspathEntries();\r", "+\t\t\t\t\t\t// validation - no nested classpath container\r", "+\t\t\t\t\t\tif (entries != null){\r", "+\t\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++){\r", "+\t\t\t\t\t\t\t\tIClasspathEntry entry = entries[i];\r", "+\t\t\t\t\t\t\t\tif (entry == null || entry.getEntryKind() == IClasspathEntry.CPE_CONTAINER){\r", "+\t\t\t\t\t\t\t\t\tthrow new JavaModelException(\r", "+\t\t\t\t\t\t\t\t\t\tnew JavaModelStatus(\r", "+\t\t\t\t\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CP_CONTAINER_ENTRY,\r", "+\t\t\t\t\t\t\t\t\t\t\tcontainerPath.toString()));\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tok = true;\r", "+\t\t\t\t} catch(CoreException e){\r", "+\t\t\t\t\tthrow new JavaModelException(e);\r", "+\t\t\t\t} finally {\r", "+\t\t\t\t\tif (!ok) JavaModelManager.Containers.put(project, null); // flush cache\r", "+\t\t\t\t}\r", "+\t\t\t\tif (container != null){\r", "+\t\t\t\t\tprojectContainers.put(containerPath, container);\r", "+\t\t\t\t}\r", "+\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){\r", "+\t\t\t\t\tSystem.out.print(\"CPContainer INIT - after resolution: \" + containerPath + \" --> \"); //$NON-NLS-2$//$NON-NLS-1$\r", "+\t\t\t\t\tif (container != null){\r", "+\t\t\t\t\t\tSystem.out.print(\"container: \"+container.getDescription()+\" {\"); //$NON-NLS-2$//$NON-NLS-1$\r", "+\t\t\t\t\t\tIClasspathEntry[] entries = container.getClasspathEntries();\r", "+\t\t\t\t\t\tif (entries != null){\r", "+\t\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++){\r", "+\t\t\t\t\t\t\t\tif (i > 0) System.out.println(\", \");//$NON-NLS-1$\r", "+\t\t\t\t\t\t\t\tSystem.out.println(entries[i]);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tSystem.out.println(\"}\");//$NON-NLS-1$\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tSystem.out.println(\"{unbound}\");//$NON-NLS-1$\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\treturn container;\t\t\t\r", "+\t}\r", "-\t */\r", "-\tpublic static IClasspathEntry[] getResolvedClasspathContainer(IPath containerPath, IJavaProject project) throws JavaModelException {\r", "-\r", "-\t\tMap projectContainers = (Map)JavaModelManager.Containers.get(project);\r", "-\t\tif (projectContainers == null){\r", "-\t\t\tprojectContainers = new HashMap(1);\r", "-\t\t\tJavaModelManager.Containers.put(project, projectContainers);\r", "-\t\t}\r", "-\t\tIClasspathEntry[] entries = (IClasspathEntry[])projectContainers.get(containerPath);\r", "-\r", "-\t\tif (entries == JavaModelManager.ContainerInitializationInProgress) return null; // break cycle\r", "-\t\tif (entries == null){\r", "-\t\t\tClasspathContainerResolver resolver = JavaModelManager.getClasspathContainerResolver(containerPath);\r", "-\t\t\tif (resolver != null){\r", "-\t\t\t\tprojectContainers.put(containerPath, JavaModelManager.ContainerInitializationInProgress); // avoid initialization cycles\r", "-\t\t\t\tboolean ok = false;\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tentries = resolver.resolve(containerPath, project);\r", "-\t\t\t\t\t\r", "-\t\t\t\t\t// validation - no nested classpath container\r", "-\t\t\t\t\tif (entries != null){\r", "-\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++){\r", "-\t\t\t\t\t\t\tIClasspathEntry entry = entries[i];\r", "-\t\t\t\t\t\t\tif (entry == null || entry.getEntryKind() == IClasspathEntry.CPE_CONTAINER){\r", "-\t\t\t\t\t\t\t\tthrow new JavaModelException(\r", "-\t\t\t\t\t\t\t\t\tnew JavaModelStatus(\r", "-\t\t\t\t\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CP_CONTAINER_ENTRY,\r", "-\t\t\t\t\t\t\t\t\t\tcontainerPath.toString()));\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tok = true;\r", "-\t\t\t\t} catch(CoreException e){\r", "-\t\t\t\t\tthrow new JavaModelException(e);\r", "-\t\t\t\t} finally {\r", "-\t\t\t\t\tif (!ok) JavaModelManager.Containers.put(project, null); // flush cache\r", "-\t\t\t\t}\r", "-\t\t\t\tif (entries != null){\r", "-\t\t\t\t\tprojectContainers.put(containerPath, entries);\r", "-\t\t\t\t}\r", "-\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){\r", "-\t\t\t\t\tSystem.out.print(\"CPContainer INIT - after resolution: \" + containerPath + \" --> {\"); //$NON-NLS-2$//$NON-NLS-1$\r", "-\t\t\t\t\tif (entries != null){\r", "-\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++){\r", "-\t\t\t\t\t\t\tif (i > 0) System.out.println(\", \");//$NON-NLS-1$\r", "-\t\t\t\t\t\t\tSystem.out.println(entries[i]);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tSystem.out.println(\"}\");//$NON-NLS-1$\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\treturn entries;\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad3a44a22fa13fdd293086020c82fb3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/EncodingTests.java", "commitBeforeChange": "83c47ad58d0e74e38827d2d1f073a35312f6f8d5", "commitAfterChange": "1d0bf2fd1ae02cf0a5ebd8dc2dd268afda57373a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void _test006() throws JavaModelException, CoreException", "signatureAfterChange": " \tpublic void test006() throws JavaModelException, CoreException", "diff": ["-\tpublic void _test006() throws JavaModelException, CoreException {", "+\t// TODO (frederic) put back assertions when failure on linux platform will be fixed", "+\tpublic void test006() throws JavaModelException, CoreException {", "-\t\tString encodedContents = new String (Util.getResourceContentsAsCharArray(this.utf8File, null));", "-\t\tassertEquals(\"Project encoding should be the same than workspace encoding!\", this.encodingProject.getDefaultCharset(), getWorkspaceRoot().getDefaultCharset());", "-\t\tassertTrue(\"Encoded UTF-8 source should have been decoded the same way!\", encodedContents.equals(source));", "-", "+\t\tString encodedContents = new String (Util.getResourceContentsAsCharArray(this.utf8File));", "+\t\tSystem.out.println(\"Encoding tests006:\");", "+\t\tSystem.out.println(\"  - file encoding: \"+this.utf8File.getCharset());", "+\t\tSystem.out.println(\"  - project encoding: \"+this.encodingProject.getDefaultCharset());", "+\t\tSystem.out.println(\"  - workspace encoding: \"+getWorkspaceRoot().getDefaultCharset());", "+\t\tif (encodedContents.equals(source)) {", "+\t\t\tSystem.out.println(\"  => SUCCESS: sources are identical\");", "+\t\t} else {", "+\t\t\tSystem.out.println(\"  => FAIL: Encoded UTF-8 source should have been decoded the same way!\");", "+\t\t}", "+//\t\tassertTrue(\"Encoded UTF-8 source should have been decoded the same way!\", encodedContents.equals(source));", "+\t\t\t", "-\t\tassertEquals(\"Wrong size of encoded string\", encodedBytes.length, sourceBytes.length);", "+\t\tif (encodedBytes.length == sourceBytes.length) {", "+\t\t\tSystem.out.println(\"  => SUCCESS: bytes arrays have same size\");", "+\t\t} else {", "+\t\t\tSystem.out.println(\"  => FAIL: Wrong size of encoded string\");", "+\t\t}", "+//\t\tassertEquals(\"Wrong size of encoded string\", encodedBytes.length, sourceBytes.length);", "-\t\t\tassertTrue(\"Wrong size of encoded character at \" + i, sourceBytes[i] == encodedBytes[i]);", "+\t\t\tif (sourceBytes[i] != encodedBytes[i]) {", "+\t\t\t\tSystem.out.println(\"  => FAIL: Wrong size of encoded character at \" + i);", "+\t\t\t\tbreak;", "+\t\t\t}", "+//\t\t\tassertTrue(\"Wrong size of encoded character at \" + i, sourceBytes[i] == encodedBytes[i]);"]}], "num": 31751}
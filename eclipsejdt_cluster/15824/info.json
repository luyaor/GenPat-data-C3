{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ebd3ba0d1b869bc9e018209ec97483f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38f86ca16765b98f8d5f7b0e8643995c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "bf4fd359c98503d2401041bd16d54a83079f69fe", "commitAfterChange": "7183d81a2458b7a9ecc9004f74bf12b52ac2eafc", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate void addDependentProjects(IPath projectPath, HashSet result)", "signatureAfterChange": " \tprivate void addDependentProjects(IJavaProject project, HashMap projectDependencies, HashSet result)", "diff": ["-\tprivate void addDependentProjects(IPath projectPath, HashSet result) {", "-\t\tIJavaProject[] projects = null;", "-\t\ttry {", "-\t\t\tprojects = this.manager.getJavaModel().getJavaProjects();", "-\t\t} catch (JavaModelException e) {", "-\t\t\t// java model doesn't exist", "-\t\t\treturn;", "+\tprivate void addDependentProjects(IJavaProject project, HashMap projectDependencies, HashSet result) {", "+\t\tIJavaProject[] dependents = (IJavaProject[]) projectDependencies.get(project);", "+\t\tif (dependents == null) return;", "+\t\tfor (int i = 0, length = dependents.length; i < length; i++) {", "+\t\t\tIJavaProject dependent = dependents[i];", "+\t\t\tif (result.contains(dependent))", "+\t\t\t\tcontinue; // no need to go further as the project is already known", "+\t\t\tresult.add(dependent);", "+\t\t\taddDependentProjects(dependent, projectDependencies, result);", "-\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\tIJavaProject project = projects[i];", "-\t\t\tIClasspathEntry[] classpath = null;", "-\t\t\ttry {", "-\t\t\t\tclasspath = ((JavaProject)project).getExpandedClasspath(true);", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// project doesn't exist: continue with next project", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\tfor (int j = 0, length2 = classpath.length; j < length2; j++) {", "-\t\t\t\tIClasspathEntry entry = classpath[j];", "-\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT", "-\t\t\t\t\t\t\t&& entry.getPath().equals(projectPath)) {", "-\t\t\t\t\t\tresult.add(project);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "feec56b87252f0d1d2beb3c1b123a63c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "b4f87915b858b8e38e418046984ece5dc8db6148", "commitAfterChange": "4b0e968ea18c9b6d539f97894bc6451b0df31a4f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate void addDependentProjects(IPath projectPath, HashSet result)", "signatureAfterChange": " \tprivate void addDependentProjects(IPath projectPath, HashSet result)", "diff": ["+\t\tIJavaProject[] projects = null;", "-\t\t\tIJavaProject[] projects = this.manager.getJavaModel().getJavaProjects();", "-\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\t\tIJavaProject project = projects[i];", "-\t\t\t\tIClasspathEntry[] classpath = ((JavaProject)project).getExpandedClasspath(true);", "-\t\t\t\tfor (int j = 0, length2 = classpath.length; j < length2; j++) {", "-\t\t\t\t\tIClasspathEntry entry = classpath[j];", "-\t\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT", "-\t\t\t\t\t\t\t\t&& entry.getPath().equals(projectPath)) {", "-\t\t\t\t\t\t\tresult.add(project);", "-\t\t\t\t\t\t}", "+\t\t\tprojects = this.manager.getJavaModel().getJavaProjects();", "+\t\t} catch (JavaModelException e) {", "+\t\t\t// java model doesn't exist", "+\t\t\treturn;", "+\t\t}", "+\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\tIJavaProject project = projects[i];", "+\t\t\tIClasspathEntry[] classpath = null;", "+\t\t\ttry {", "+\t\t\t\tclasspath = ((JavaProject)project).getExpandedClasspath(true);", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t// project doesn't exist: continue with next project", "+\t\t\t\tcontinue;", "+\t\t\t}", "+\t\t\tfor (int j = 0, length2 = classpath.length; j < length2; j++) {", "+\t\t\t\tIClasspathEntry entry = classpath[j];", "+\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT", "+\t\t\t\t\t\t\t&& entry.getPath().equals(projectPath)) {", "+\t\t\t\t\t\tresult.add(project);", "-\t\t} catch (JavaModelException e) {", "-\t\t}", "+\t\t\t}"]}], "num": 15824}
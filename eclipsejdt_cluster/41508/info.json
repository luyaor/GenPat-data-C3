{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07e5d316710271b171c985bc14e8c72c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "283a2ca2e489e2bcfaca0bda47e5e4e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "a36dd75e73956716f89f32428543909e26b9a682", "commitAfterChange": "c2862088078b3d0bc7ba3af4b4865ffe4ca72da7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  protected void writeClassFileBytes(byte[] bytes, IFile file, String qualifiedFileName, boolean isSecondaryType) throws CoreException", "signatureAfterChange": "  protected void writeClassFileBytes(byte[] bytes, IFile file, String qualifiedFileName, boolean isSecondaryType) throws CoreException", "diff": ["-\t// Default implementation just writes out the bytes for the new class file...", "-\tif (JavaBuilder.DEBUG)", "-\t\tSystem.out.println(\"Writing new class file \" + file.getName());//$NON-NLS-1$", "-\tfile.create(new ByteArrayInputStream(bytes), IResource.FORCE, null);", "-\tfile.setDerived(true);", "+\tif (file.exists()) {", "+\t\t// Deal with shared output folders... last one wins... no collision cases detected", "+\t\tif (JavaBuilder.DEBUG)", "+\t\t\tSystem.out.println(\"Writing changed class file \" + file.getName());//$NON-NLS-1$", "+\t\tfile.setContents(new ByteArrayInputStream(bytes), true, false, null);", "+\t\tif (!file.isDerived())", "+\t\t\tfile.setDerived(true);", "+\t} else {", "+\t\t// Default implementation just writes out the bytes for the new class file...", "+\t\tif (JavaBuilder.DEBUG)", "+\t\t\tSystem.out.println(\"Writing new class file \" + file.getName());//$NON-NLS-1$", "+\t\tfile.create(new ByteArrayInputStream(bytes), IResource.FORCE, null);", "+\t\tfile.setDerived(true);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bb37c2d2899279ebaae041814af3f46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "13fcecb4bf0159fd0c973e2df9fcb4f9a5259e19", "commitAfterChange": "8b6b3a98e5e06aed3ed77d75acda201f0fcf929c", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": " public void generateClassLiteralAccessForType(TypeBinding accessedType, FieldBinding syntheticFieldBinding)", "signatureAfterChange": " public void generateClassLiteralAccessForType(TypeBinding accessedType, FieldBinding syntheticFieldBinding)", "diff": ["-\tthis.ldc(accessedType == TypeBinding.NullBinding ? \"java.lang.Object\" : String.valueOf(accessedType.constantPoolName()).replace('/', '.')); //$NON-NLS-1$", "+\tif (accessedType == TypeBinding.NullBinding) {", "+\t\tthis.ldc(\"java.lang.Object\"); //$NON-NLS-1$", "+\t} else if (accessedType.isArrayType()) {", "+\t\tthis.ldc(String.valueOf(accessedType.constantPoolName()).replace('/', '.'));", "+\t} else {", "+\t\t// we make it an array type", "+\t\tthis.ldc(\"[L\" + String.valueOf(accessedType.constantPoolName()).replace('/', '.') + \";\"); //$NON-NLS-1$//$NON-NLS-2$", "+\t}", "+\tif (!accessedType.isArrayType()) {", "+\t\tthis.invokeJavaLangClassGetComponentType();", "+\t}\t"]}], "num": 41508}
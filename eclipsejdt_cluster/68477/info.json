{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c6cd5ccffcf281c44f1b20e1f5bad82", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "477673eba2ec30e5863ddb4e91192129", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/compiler/ReconcileContext.java", "commitBeforeChange": "0f841a0360389f0f91aef636ca6531276c4a074d", "commitAfterChange": "4e57894c46e6fdc6da393db7e5519e070814fd68", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public org.eclipse.jdt.core.dom.CompilationUnit getAST3() throws JavaModelException", "signatureAfterChange": " public org.eclipse.jdt.core.dom.CompilationUnit getAST3() throws JavaModelException", "diff": ["+\t\tparser.setStatementsRecovery((this.operation.reconcileFlags & ICompilationUnit.ENABLE_STATEMENTS_RECOVERY) != 0);", "+\t\tparser.setBindingsRecovery((this.operation.reconcileFlags & ICompilationUnit.ENABLE_BINDINGS_RECOVERY) != 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "817b9c1ca602c3e0488dcf283645a867", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "dc4b7f29cbc081bf926da3e5bbe190211f71fab8", "commitAfterChange": "f7e6d1d2cfb98a7b4978211f1a2a14a589cab571", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprotected void compileAndDeploy(String source, String directoryName, String className)", "signatureAfterChange": "  \tprotected void compileAndDeploy(String source, String directoryName, String className)", "diff": ["-\t #######################################*/", "-\t\t} else {", "+\t\t} else if (this.complianceLevel.compareTo(COMPLIANCE_1_5) == 0) {", "+\t\t} else if (this.complianceLevel.compareTo(COMPLIANCE_1_6) == 0) {", "+\t\t\tbuffer.append(\"\\\" -1.6\");", "+\t\t} else if (this.complianceLevel.compareTo(COMPLIANCE_1_7) == 0) {", "+\t\t\tbuffer.append(\"\\\" -1.7\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db94746f2f183b70d46570a8b5fe4dbe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "e5bb4bddaa8ae27dfddec859067bcb3df83df4dc", "commitAfterChange": "65877d9109defab8c1c7191e1a9530b8bc8f9b43", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=318682", "+\t\tif (this.receiver.isThis()) {", "+\t\t\t// accessing non-static method without an object", "+\t\t\tcurrentScope.resetEnclosingMethodStaticFlag();", "+\t\t}", "+\t} else if (this.receiver.isThis()) {", "+\t\tif ((this.receiver.bits & ASTNode.IsImplicitThis) == 0) {", "+\t\t\t// explicit this receiver, not allowed in static context", "+\t\t\tcurrentScope.resetEnclosingMethodStaticFlag();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e10a1e4012d9c952e00e686c2fc2d483", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "e5bb4bddaa8ae27dfddec859067bcb3df83df4dc", "commitAfterChange": "65877d9109defab8c1c7191e1a9530b8bc8f9b43", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, boolean valueRequired)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, boolean valueRequired)", "diff": ["+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=318682", "+\t\tif (this.receiver.isThis()) {", "+\t\t\tcurrentScope.resetEnclosingMethodStaticFlag();", "+\t\t}", "+\t} else if (this.receiver.isThis()) {", "+\t\tif ((this.receiver.bits & ASTNode.IsImplicitThis) == 0) {", "+\t\t\t// explicit this receiver, not allowed in static context", "+\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=318682", "+\t\t\tcurrentScope.resetEnclosingMethodStaticFlag();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe6b1a7fc2c54a26b847faa0ef28f673", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "f338c86815ffb4c165b8024ba4f28cade0b2b75f", "commitAfterChange": "a98d7d87df415161ba75f53acbdbe8d316ea160c", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 28, "signatureBeforeChange": " \t\t \tpublic boolean isCompatibleWith(final TypeBinding left, final Scope someScope)", "signatureAfterChange": " \t \tpublic boolean isCompatibleWith(final TypeBinding left, final Scope someScope)", "diff": ["+\t", "-\t\t\t\tif (copy == null)", "-\t\t\t\t\treturn false;", "+\t\t\t\tif (copy == null) {", "+\t\t\t\t\tif (this.assistNode) {", "+\t\t\t\t\t\tanalyzeShape(); // not on terra firma here !", "+\t\t\t\t\t\tif (sam.returnType.id == TypeIds.T_void) {", "+\t\t\t\t\t\t\tif (!this.voidCompatible)", "+\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (!this.valueCompatible)", "+\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\treturn !isPertinentToApplicability(left);", "+\t\t\t\t}", "-\t\tif (!isPertinentToApplicability(left))", "+\t\tif (!isPertinentToApplicability(left))  // This check should happen after return type check below, but for buggy javac compatibility we have left it in.", "-\t", "+", "-\t\t", "-\t\tExpression [] returnExpressions = this.resultExpressions;", "+\t\t\tExpression [] returnExpressions = this.resultExpressions;"]}], "num": 68477}
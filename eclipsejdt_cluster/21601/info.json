{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "90095b1c334ac26704be986c5939ce2c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "295d20a9a65d5d88e2f0d2516b6b4793", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static TypeBinding[] greaterLowerBound(TypeBinding[] types, Scope scope, LookupEnvironment environment)", "signatureAfterChange": " \tpublic static TypeBinding[] greaterLowerBound(TypeBinding[] types, Scope scope, LookupEnvironment environment)", "diff": ["+\t\t\t\t\t\t// Skip the following check if inference variables or CaptureBinding18 are involved,", "+\t\t\t\t\t\t// hopefully during inference a contradictory glb will simply not produce a solution", "+\t\t\t\t\t\t// (should essentially be detected beforehand in CaptureBinding18.setUpperBounds()): ", "+\t\t\t\t\t\tif (!narrowType.isProperType(false) || !wideType.isProperType(false))", "+\t\t\t\t\t\t\tcontinue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f51500756da55110e164f270ae9e938c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "2ee73279867ea28c543d7870cc3c68615c7dee12", "commitAfterChange": "6ed6becc4fd53e7d1da742b5c31941d1e72ebac3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public static final boolean camelCaseMatch(char[] pattern, int patternStart, int patternEnd, char[] name, int nameStart, int nameEnd)", "signatureAfterChange": " public static final boolean camelCaseMatch(char[] pattern, int patternStart, int patternEnd, char[] name, int nameStart, int nameEnd)", "diff": ["-\t\t\t\t\t\t\t// lowercase name char is ignored", "+\t\t\t\t\t\tcase ScannerHelper.C_DIGIT :", "+\t\t\t\t\t\t\t// lowercase/digit char is ignored", "-\t\t\t\t} else if (Character.isLowerCase(nameChar)) {", "+\t\t\t\t} else if (Character.isJavaIdentifierPart(nameChar) ", "+\t\t\t\t\t\t\t\t&& !Character.isUpperCase(nameChar)) {"]}], "num": 21601}
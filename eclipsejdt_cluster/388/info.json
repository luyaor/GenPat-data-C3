{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95b0689c08f1d79b0d76f8c221b05bd7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fc0250e2b866ba83b6512bff0ecd79f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 23, "signatureBeforeChange": " public int literalIndexForFields(int nameIndex, int typeIndex, FieldBinding key)", "signatureAfterChange": " private int literalIndexForFields(int nameIndex, int typeIndex, FieldBinding key)", "diff": ["-public int literalIndexForFields(int nameIndex, int typeIndex, FieldBinding key) {", "+private int literalIndexForFields(int nameIndex, int typeIndex, FieldBinding key) {", "-\tint indexOfWellKnownFieldNameAndType;", "-\tif ((indexOfWellKnownFieldNameAndType = indexOfWellKnownFieldNameAndType(key)) == -1) {", "-\t\t// check if the entry already exists", "-\t\tif ((index = nameAndTypeCacheForFields.get(key)) == -1) {", "-\t\t\t// The entry doesn't exit yet", "-\t\t\tindex = nameAndTypeCacheForFields.put(key, currentIndex++);", "-\t\t\tif (index > 0xFFFF){", "-\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t\t}", "-\t\t\twriteU1(NameAndTypeTag);", "-\t\t\twriteU2(nameIndex);", "-\t\t\twriteU2(typeIndex);", "-\t\t}", "-\t} else {", "-\t\tif ((index = wellKnownFieldNameAndTypes[indexOfWellKnownFieldNameAndType]) == 0) {", "-\t\t\tindex = wellKnownFieldNameAndTypes[indexOfWellKnownFieldNameAndType] = currentIndex++;", "-\t\t\tif (index > 0xFFFF){", "-\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t\t}", "-\t\t\twriteU1(NameAndTypeTag);", "-\t\t\twriteU2(nameIndex);", "-\t\t\twriteU2(typeIndex);", "-\t\t}", "-\t}", "-\treturn index;", "-}", "+\tif ((index = getFromNameAndTypeCache(key)) == -1) {", "+\t\tindex = putInNameAndTypeCache(key, currentIndex++);", "+\t\twriteU1(NameAndTypeTag);", "+\t\twriteU2(typeIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94a40ea245d17146d7855421dd9c95bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " public int literalIndex(FieldBinding aFieldBinding)", "signatureAfterChange": " public int literalIndex(FieldBinding aFieldBinding)", "diff": ["-\tint nameAndTypeIndex;", "-\tint classIndex;", "-\tint indexWellKnownField;", "-\tif ((indexWellKnownField = indexOfWellKnownFields(aFieldBinding)) == -1) {", "-\t\tif ((index = fieldCache.get(aFieldBinding)) < 0) {", "-\t\t\t// The entry doesn't exit yet", "-\t\t\tclassIndex = literalIndex(aFieldBinding.declaringClass);", "-\t\t\tnameAndTypeIndex = literalIndexForFields(literalIndex(aFieldBinding.name), literalIndex(aFieldBinding.type.signature()), aFieldBinding);", "-\t\t\tindex = fieldCache.put(aFieldBinding, currentIndex++);", "-\t\t\tif (index > 0xFFFF){", "-\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t\t}", "-\t\t\twriteU1(FieldRefTag);", "-\t\t\twriteU2(classIndex);", "-\t\t\twriteU2(nameAndTypeIndex);", "+\tif ((index = getFromCache(aFieldBinding)) < 0) {", "+\t\t// The entry doesn't exit yet", "+\t\tint classIndex = literalIndexForType(aFieldBinding.declaringClass.constantPoolName());", "+\t\tint nameAndTypeIndex = literalIndexForFields(literalIndex(aFieldBinding.name), literalIndex(aFieldBinding.type.signature()), aFieldBinding);", "+\t\tindex = putInCache(aFieldBinding, currentIndex++);", "+\t\tif (index > 0xFFFF){", "+\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t} else {", "-\t\tif ((index = wellKnownFields[indexWellKnownField]) == 0) {", "-\t\t\t// that field need to be inserted", "-\t\t\tclassIndex = literalIndex(aFieldBinding.declaringClass);", "-\t\t\tnameAndTypeIndex = literalIndexForFields(literalIndex(aFieldBinding.name), literalIndex(aFieldBinding.type.signature()), aFieldBinding);", "-\t\t\tindex = wellKnownFields[indexWellKnownField] = currentIndex++;", "-\t\t\tif (index > 0xFFFF){", "-\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t\t}", "-\t\t\twriteU1(FieldRefTag);", "-\t\t\twriteU2(classIndex);", "-\t\t\twriteU2(nameAndTypeIndex);", "-\t\t}", "+\t\twriteU1(FieldRefTag);", "+\t\twriteU2(classIndex);", "+\t\twriteU2(nameAndTypeIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d16204758e150f97d2b1ba6fcacbb74b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 25, "signatureBeforeChange": " public int literalIndexForMethods(int nameIndex, int typeIndex, MethodBinding key)", "signatureAfterChange": " public int literalIndexForMethods(int nameIndex, int typeIndex, MethodBinding key)", "diff": ["-\tint indexOfWellKnownMethodNameAndType;", "-\tif ((indexOfWellKnownMethodNameAndType = indexOfWellKnownMethodNameAndType(key)) == -1) {", "-\t\t// check if the entry exists", "-\t\tif ((index = nameAndTypeCacheForMethods.get(key)) == -1) {", "-\t\t\t// The entry doesn't exit yet", "-\t\t\tindex = nameAndTypeCacheForMethods.put(key, currentIndex++);", "-\t\t\tif (index > 0xFFFF){", "-\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t\t}", "-\t\t\twriteU1(NameAndTypeTag);", "-\t\t\twriteU2(nameIndex);", "-\t\t\twriteU2(typeIndex);", "+\tif ((index = getFromNameAndTypeCache(key)) == -1) {", "+\t\t// The entry doesn't exit yet", "+\t\tindex = putInNameAndTypeCache(key, currentIndex++);", "+\t\tif (index > 0xFFFF){", "+\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "+\t\twriteU1(NameAndTypeTag);", "+\t\twriteU2(nameIndex);", "+\t\twriteU2(typeIndex);", "+\t}", "+\treturn index;", "+}", "-\t\tif ((index = wellKnownMethodNameAndTypes[indexOfWellKnownMethodNameAndType]) == 0) {", "-\t\t\tindex = wellKnownMethodNameAndTypes[indexOfWellKnownMethodNameAndType] = currentIndex++;", "-\t\t\tif (index > 0xFFFF){", "-\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t\t}", "-\t\t\twriteU1(NameAndTypeTag);", "-\t\t\twriteU2(nameIndex);", "-\t\t\twriteU2(typeIndex);", "-\t\t}"]}], "num": 388}
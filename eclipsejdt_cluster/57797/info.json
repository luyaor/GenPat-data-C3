{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da56719744232622b69f5e130512721e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2eaf467836d1c65131dcfcb8714c6daa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "38b5290055a0d2229f0d3e99304508f0eb9f2352", "commitAfterChange": "eeafa6d90df04799bdbc84b253f50d4f1ea630a2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, Assignment assignment, boolean isCompound)", "signatureAfterChange": "  public FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, Assignment assignment, boolean isCompound)", "diff": ["-\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=318682", "-\tif (!this.binding.isStatic()) {", "-\t\tif (this.receiver.isThis()) {", "-\t\t\tcurrentScope.resetDeclaringClassMethodStaticFlag(this.binding.declaringClass);", "-\t\t}", "-\t} else if (this.receiver.isThis()) {", "-\t\tif ((this.receiver.bits & ASTNode.IsImplicitThis) == 0) {", "-\t\t\t// explicit this, not allowed in static context", "-\t\t\tcurrentScope.resetDeclaringClassMethodStaticFlag(this.binding.declaringClass);", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a8501ee51547fe900df7b8e2086dbf6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " void checkInheritedMethods(MethodBinding inheritedMethod, MethodBinding otherInheritedMethod)", "signatureAfterChange": " void checkInheritedMethods(MethodBinding inheritedMethod, MethodBinding otherInheritedMethod)", "diff": ["-\t// sent from checkMethods() to compare 2 inherited methods that are not 'equal'", "-\tif (inheritedMethod.declaringClass.erasure() == otherInheritedMethod.declaringClass.erasure()) {", "-\t\tboolean areDuplicates = inheritedMethod.hasSubstitutedParameters() && otherInheritedMethod.hasSubstitutedParameters()", "-\t\t\t? inheritedMethod.areParametersEqual(otherInheritedMethod)", "-\t\t\t: inheritedMethod.areParameterErasuresEqual(otherInheritedMethod);", "-\t\tif (areDuplicates) {", "-\t\t\tproblemReporter().duplicateInheritedMethods(this.type, inheritedMethod, otherInheritedMethod);", "-\t\t\treturn;", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acf1391a547775f03c1bcb343101f962", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "d374c39ddab0b1f83162946aec27b6b36fb07bfb", "commitAfterChange": "a8a3a90ec5bfee0f774504f5c766dbb8c9570420", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tMethodScope initializationScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tMethodScope initializationScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tcheckAnnotationField: {", "-\t\t\tif (!this.binding.declaringClass.isAnnotationType())", "-\t\t\t\tbreak checkAnnotationField;", "-\t\t\tif (this.initialization != null) {", "-\t\t\t\tif (this.binding.type.isArrayType() && (this.initialization instanceof ArrayInitializer))", "-\t\t\t\t\tbreak checkAnnotationField;", "-\t\t\t\tif (this.initialization.constant != NotAConstant)", "-\t\t\t\t\tbreak checkAnnotationField;", "-\t\t\t}", "-\t\t\tinitializationScope.problemReporter().annotationFieldNeedConstantInitialization(this);", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d13a21c158f84fe02971d5b3a507245d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "97c795afd8d70a26c90859be85631c2f80038330", "commitAfterChange": "0e5525e75974b87507b4096f39e2bf9ccadfbfad", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, Assignment assignment, boolean isCompound)", "signatureAfterChange": "  public FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, Assignment assignment, boolean isCompound)", "diff": ["-\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=318682", "-\tif (!this.binding.isStatic()) {", "-\t\tif (this.receiver.isThis()) {", "-\t\t\tcurrentScope.resetDeclaringClassMethodStaticFlag(this.binding.declaringClass);", "-\t\t}", "-\t} else if (this.receiver.isThis()) {", "-\t\tif ((this.receiver.bits & ASTNode.IsImplicitThis) == 0) {", "-\t\t\t// explicit this, not allowed in static context", "-\t\t\tcurrentScope.resetDeclaringClassMethodStaticFlag(this.binding.declaringClass);", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd3e539307085d01f53e5727bda731d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/SpacePreparator.java", "commitBeforeChange": "bf8490d0cf14e1061e70f9e36202fe7f9e5419b7", "commitAfterChange": "8973e89f54391c88fecba174a2ca6f208cadbd27", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "\r \r \tprivate void handleInvocation(ASTNode invocationNode, ASTNode nodeBeforeOpeningParen)", "signatureAfterChange": "\r \r \tprivate void handleInvocation(ASTNode invocationNode, ASTNode nodeBeforeOpeningParen)", "diff": ["+\t\thandleInvocation(invocationNode, nodeBeforeOpeningParen, null);\r", "+\t}\r", "-\t\t\t\tthis.tm.lastTokenIn(invocationNode, TokenNameRPAREN).spaceBefore();\r"]}], "num": 57797}
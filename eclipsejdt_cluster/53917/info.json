{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63dff1b5ed9ff891df8317cda5256e9f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45e1d22dcf9baee421e030bfd6e5cfd8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterMassiveRegressionTests.java", "commitBeforeChange": "c62ecfd031507c11ea236866605fedd6f3a952c5", "commitAfterChange": "ded73445e8c5cf2db0a4abcc53e1680f02ae6cf7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  private static void setLogDir(File inputDir, int profiles, boolean verify) throws CoreException", "signatureAfterChange": "  private static void setLogDir(File inputDir, int profiles, boolean verify) throws CoreException", "diff": ["-\tFile logDir = new File(System.getProperty(\"logDir\"));", "-\tif (!logDir.exists()) {", "-\t\tif (!logDir.mkdirs()) {", "-\t\t\tSystem.err.println(\"Cannot create specified log directory: \"+logDir+\"!!!\");", "+\tFile rootLogDir = new File(System.getProperty(\"logDir\"));", "+\tif (!rootLogDir.exists()) {", "+\t\tif (!rootLogDir.mkdirs()) {", "+\t\t\tSystem.err.println(\"Cannot create specified log directory: \"+rootLogDir+\"!!!\");", "-\tlogDir = new File(logDir, ECLIPSE_VERSION);", "+\trootLogDir = new File(rootLogDir, ECLIPSE_VERSION);", "+\tString subRootDir;", "-\t\tlogDir = new File(logDir, \"tests\");", "-\t\tlogDir = new File(logDir, PATCH_BUG);", "-\t\tlogDir = new File(logDir, PATCH_VERSION);", "+\t\trootLogDir = new File(rootLogDir, \"tests\");", "+\t\trootLogDir = new File(rootLogDir, PATCH_BUG);", "+\t\tsubRootDir = PATCH_VERSION;", "-\t\tlogDir = new File(logDir, \"HEAD\");", "+\t\tsubRootDir = \"HEAD\";", "-\t\tlogDir = new File(logDir, ECLIPSE_MILESTONE);", "-\t\tlogDir = new File(logDir, JDT_CORE_VERSION);", "+\t\trootLogDir = new File(rootLogDir, ECLIPSE_MILESTONE);", "+\t\tsubRootDir = JDT_CORE_VERSION;", "+\tList subDirs = new ArrayList();", "-\t\tlogDir = new File(logDir, \"profiles\");", "-\t\tlogDir = setProfilesDir(profiles, logDir);", "+\t\tsubDirs.add(\"profiles\");", "+\t\tsetProfilesDir(profiles, subDirs);", "-\t\tlogDir = new File(new File(logDir, \"filter\"), FILES_FILTER.replace('?', '_').replace('*', '%'));", "+\t\tsubDirs.add(\"filter\");", "+\t\tsubDirs.add(FILES_FILTER.replace('?', '_').replace('*', '%'));", "-\tlogDir.mkdirs();", "+\tFile logDir = createDir(new File (rootLogDir, subRootDir), subDirs);", "-\t\tFile saveDir = new File(logDir, \"save\");", "-\t\tsaveDir.mkdir();", "+\t\tFile saveDir = new File(new File(rootLogDir, \"save\"), subRootDir);", "+\t\tsaveDir.mkdirs();", "-\t\t\tString newFileName = filePrefix+\"_\";", "-\t\t\tif (i<10) newFileName += \"0\";", "-\t\t\tnewFileName += i+\".txt\";", "-\t\t\tFile renamedFile = new File(saveDir, newFileName);", "+\t\t\tString dirN = Integer.toString(i);", "+\t\t\tif (i<10) dirN = \"0\" + dirN;", "+\t\t\tsaveDir = new File(saveDir, dirN);", "+\t\t\tlogDir = createDir(saveDir, subDirs);", "+\t\t\tFile renamedFile = new File(logDir, logFileName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf10900b5f5d4003347226e8bb058d13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "commitAfterChange": "e62068644543b99c745f832b9263b49ff6b3d0ba", "methodNumberBeforeChange": 536, "methodNumberAfterChange": 536, "signatureBeforeChange": " public void illegalReturnRedefinition(AbstractMethodDeclaration abstractMethodDecl, MethodBinding inheritedMethod, char[][] nonNullAnnotationName)", "signatureAfterChange": " public void illegalReturnRedefinition(AbstractMethodDeclaration abstractMethodDecl, MethodBinding inheritedMethod, char[][] nonNullAnnotationName)", "diff": ["-\tString[] arguments;", "-\tString[] argumentsShort;", "-\tif (this.options.useNullTypeAnnotations != Boolean.TRUE) {", "-\t\tStringBuilder returnType = new StringBuilder();", "+\tint problemId = IProblem.IllegalReturnNullityRedefinition;", "+\tStringBuilder returnType = new StringBuilder();", "+\tStringBuilder returnTypeShort = new StringBuilder();", "+\tif (this.options.usesNullTypeAnnotations()) {", "+\t\t// 1.8+", "+\t\tif (inheritedReturnType.isTypeVariable() && (inheritedReturnType.tagBits & TagBits.AnnotationNullMASK) == 0) {", "+\t\t\tproblemId = IProblem.IllegalReturnNullityRedefinitionFreeTypeVariable;", "+", "+\t\t\treturnType.append(inheritedReturnType.readableName());", "+\t\t\treturnTypeShort.append(inheritedReturnType.shortReadableName());", "+\t\t} else {", "+\t\t\treturnType.append(inheritedReturnType.nullAnnotatedReadableName(this.options, false));", "+\t\t\treturnTypeShort.append(inheritedReturnType.nullAnnotatedReadableName(this.options, true));", "+\t\t}", "+\t} else {", "+\t\t// 1.7-", "-\t\targuments = new String[] { methodSignature.toString(), returnType.toString() };", "-\t\treturnType = new StringBuilder();", "-\t\treturnType.append('@').append(nonNullAnnotationName[nonNullAnnotationName.length-1]);", "-\t\treturnType.append(' ').append(inheritedReturnType.shortReadableName());", "-\t\targumentsShort = new String[] { shortSignature.toString(), returnType.toString() };", "-\t} else {", "-\t\targuments = new String[] { methodSignature.toString(), ", "-\t\t\t\t\t\t\t\t\tString.valueOf(inheritedReturnType.nullAnnotatedReadableName(this.options, false))};", "-\t\targumentsShort = new String[] { shortSignature.toString(),", "-\t\t\t\t\t\t\t\t\tString.valueOf(inheritedReturnType.nullAnnotatedReadableName(this.options, true))};", "+\t\treturnTypeShort.append('@').append(nonNullAnnotationName[nonNullAnnotationName.length-1]);", "+\t\treturnTypeShort.append(' ').append(inheritedReturnType.shortReadableName());", "+\tString[] arguments = new String[] { methodSignature.toString(), returnType.toString() };", "+\tString[] argumentsShort = new String[] { shortSignature.toString(), returnTypeShort.toString() };", "-\t\t\tIProblem.IllegalReturnNullityRedefinition, ", "+\t\t\tproblemId, "]}], "num": 53917}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65dc4c85c0105534fc542fe7ef8d096f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f30156d6f0519dfc324f16c6f3ff643", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "03aab1ff69aae2de16de283aaf6df2cafa77af82", "commitAfterChange": "0c0e9f808d4509f3cefc470c2105f7ba1290fdb7", "methodNumberBeforeChange": 200, "methodNumberAfterChange": 200, "signatureBeforeChange": "  \tprivate char[][] findUnresolvedReferenceAfter(int from, BlockScope scope, final char[][] discouragedNames)", "signatureAfterChange": "  \tprivate char[][] findUnresolvedReferenceAfter(int from, BlockScope scope, final char[][] discouragedNames)", "diff": ["+\t\t} else if (referenceContext instanceof LambdaExpression) {", "+\t\t\tLambdaExpression expression = (LambdaExpression) referenceContext;", "+\t\t\tUnresolvedReferenceNameFinder nameFinder = new UnresolvedReferenceNameFinder(this);", "+\t\t\tnameFinder.findAfter(", "+\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\texpression.scope,", "+\t\t\t\t\texpression.scope.classScope(),", "+\t\t\t\t\tfrom,", "+\t\t\t\t\texpression.body().sourceEnd,", "+\t\t\t\t\tdiscouragedNames,", "+\t\t\t\t\tnameRequestor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfa71c6dac3a867b83dab19e28f12471", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "490f0dedc6b033aac107ccccbdc9e8361a921466", "commitAfterChange": "83feb6a3bbe889feb388b89a4854a090c75eaf0e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public void checkComment()", "signatureAfterChange": "  public void checkComment()", "diff": ["+\t\t\t} else if (reference instanceof JavadocAllocationExpression) {", "+\t\t\t\tJavadocAllocationExpression constructor = (JavadocAllocationExpression) reference;", "+\t\t\t\tint argCount = constructor.arguments == null ? 0 : constructor.arguments.length;", "+\t\t\t\tchar[][] compoundName = constructor.type.getTypeName();", "+\t\t\t\trequestor.acceptConstructorReference(compoundName[compoundName.length-1], argCount, constructor.sourceStart);"]}], "num": 74}
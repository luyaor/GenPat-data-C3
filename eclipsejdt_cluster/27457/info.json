{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1296f75cd1d422c3f56541d4fc1fb35e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a22a9a9726a1b836386f4929f70f355", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "35d3c94bac1e2208a31f158b8d7e6058b35282e2", "commitAfterChange": "2b6f2c5ab69f56c08d444fe8672c8fe1596db9c2", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tpublic void testBug51363() throws JavaModelException", "signatureAfterChange": " \tpublic void testBug51363() throws JavaModelException", "diff": ["-\t\tthis.sourceUnit = getCompilationUnit(\"Converter\" , \"src\", \"javadoc.testBug51363\", \"Test.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "-\t\tASTNode result = runConversion(this.sourceUnit, false);", "+\t\tsourceUnit = getCompilationUnit(\"Converter\" , \"src\", \"javadoc.testBug51363\", \"Test.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+\t\tASTNode result = runConversion(sourceUnit, false);", "-\t\tassumeEquals(this.prefix+\"Wrong number of problems\", 0, unit.getProblems().length); //$NON-NLS-1$", "-\t\tassumeEquals(this.prefix+\"Wrong number of comments\", 2, unit.getCommentList().size());", "+\t\tassumeEquals(prefix+\"Wrong number of problems\", 0, unit.getProblems().length); //$NON-NLS-1$", "+\t\tassumeEquals(prefix+\"Wrong number of comments\", 2, unit.getCommentList().size());", "-\t\tassumeTrue(this.prefix+\"Comment should be a line comment \", comment.isLineComment());", "-\t\tString sourceStr = this.sourceUnit.getSource();", "+\t\tassumeTrue(prefix+\"Comment should be a line comment \", comment.isLineComment());", "+\t\tString sourceStr = sourceUnit.getSource();", "-\t\tassumeTrue(this.prefix+\"Comment should be a line comment\", comment.isLineComment());", "-\t\tsourceStr = this.sourceUnit.getSource();", "+\t\tassumeTrue(prefix+\"Comment should be a line comment\", comment.isLineComment());", "+\t\tsourceStr = sourceUnit.getSource();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c2e7000f221d19ca7667b60bd008d1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "1dbf45ade1eaa8473579771e92825a7887776253", "commitAfterChange": "0fb8e6d8cd5771230b88c7189dc0d95f3a5da0e3", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic void testBug51363() throws JavaModelException", "signatureAfterChange": " \tpublic void testBug51363() throws JavaModelException", "diff": ["-\t\tverifyComments(\"Bug51363\");", "+\t\tthis.sourceUnit = getCompilationUnit(\"Converter\" , \"src\", \"javadoc.testBug51363\", \"Test.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+\t\tASTNode result = runConversion(this.sourceUnit, false);", "+\t\tfinal CompilationUnit unit = (CompilationUnit) result;", "+\t\tassertEquals(this.prefix+\"Wrong number of problems\", 0, unit.getProblems().length); //$NON-NLS-1$", "+\t\tassertEquals(this.prefix+\"Wrong number of comments\", 2, unit.getCommentTable().length);", "+\t\t// verify first comment", "+\t\tComment comment = unit.getCommentTable()[0];", "+\t\tassertTrue(this.prefix+\"Comment should be a line comment \", comment.isLineComment());", "+\t\tString sourceStr = this.sourceUnit.getSource();", "+\t\tint startPos = comment.getStartPosition()+comment.getLength();", "+\t\tassertEquals(\"Wrong length for line comment \"+comment, \"public\", sourceStr.substring(startPos, startPos+6));", "+\t\tif (debug) System.out.println(comment+\"\\nsuccessfully verified.\");", "+\t\t// verify second comment", "+\t\tcomment = unit.getCommentTable()[1];", "+\t\tassertTrue(this.prefix+\"Comment should be a line comment\", comment.isLineComment());", "+\t\tsourceStr = this.sourceUnit.getSource();", "+\t\tstartPos = comment.getStartPosition()+comment.getLength();", "+\t\tassertEquals(\"Wrong length for line comment \"+comment, \"void\", sourceStr.substring(startPos, startPos+4));", "+\t\tif (debug) System.out.println(comment+\"\\nsuccessfully verified.\");", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7881a814548b7e24ad728ae875aebf4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "ee73272992444a9c8e6586ce5a37f5dc6d6e8bd9", "commitAfterChange": "f598d68e65d421b1e902e4d71831d57a9b4e73ab", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic void testBug51363() throws JavaModelException", "signatureAfterChange": " \tpublic void testBug51363() throws JavaModelException", "diff": ["-\t\tassertEquals(this.prefix+\"Wrong number of problems\", 0, unit.getProblems().length); //$NON-NLS-1$", "-\t\tassertEquals(this.prefix+\"Wrong number of comments\", 2, unit.getCommentTable().length);", "+\t\tassumeEquals(this.prefix+\"Wrong number of problems\", 0, unit.getProblems().length); //$NON-NLS-1$", "+\t\tassumeEquals(this.prefix+\"Wrong number of comments\", 2, unit.getCommentList().size());", "-\t\tComment comment = unit.getCommentTable()[0];", "-\t\tassertTrue(this.prefix+\"Comment should be a line comment \", comment.isLineComment());", "+\t\tComment comment = (Comment) unit.getCommentList().get(0);", "+\t\tassumeTrue(this.prefix+\"Comment should be a line comment \", comment.isLineComment());", "-\t\tassertEquals(\"Wrong length for line comment \"+comment, \"public\", sourceStr.substring(startPos, startPos+6));", "+\t\tassumeEquals(\"Wrong length for line comment \"+comment, \"\\\\u000D\\\\u000A\", sourceStr.substring(startPos, startPos+12));", "-\t\tcomment = unit.getCommentTable()[1];", "-\t\tassertTrue(this.prefix+\"Comment should be a line comment\", comment.isLineComment());", "+\t\tcomment = (Comment) unit.getCommentList().get(1);", "+\t\tassumeTrue(this.prefix+\"Comment should be a line comment\", comment.isLineComment());", "-\t\tassertEquals(\"Wrong length for line comment \"+comment, \"void\", sourceStr.substring(startPos, startPos+4));", "+\t\tassumeEquals(\"Wrong length for line comment \"+comment, \"\\\\u000Dvoid\", sourceStr.substring(startPos, startPos+10));", "+//\t\tverifyComments(\"testBug51363\");"]}], "num": 27457}
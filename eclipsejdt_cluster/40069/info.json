{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34fe05b3b584664140a41b5b5139564c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e77acbb937b648e44c633b98b7ae7c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrame.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void replaceWithElementType()", "signatureAfterChange": " public void replaceWithElementType()", "diff": ["-\ttry {", "-\t\tVerificationTypeInfo info2 = (VerificationTypeInfo) info.clone();", "-\t\tinfo2.replaceWithElementType();", "-\t\tthis.stackItems[this.numberOfStackItems - 1] = info2;", "-\t} catch (CloneNotSupportedException e) {", "-\t\t// ignore", "-\t}", "+\tVerificationTypeInfo info2 = info.duplicate();", "+\tinfo2.replaceWithElementType();", "+\tthis.stackItems[this.numberOfStackItems - 1] = info2;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cebfd31c3b907c72c03bad56fdb5d53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "ed216bad8ac7db85d4e5d7fd2492a6cf18c498b9", "commitAfterChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " static Classpath getClasspath(String classpathName, String encoding, \t\tint classpathDirectoryMode, AccessRuleSet accessRuleSet)", "signatureAfterChange": " static Classpath getClasspath(String classpathName, String encoding, \t\tint classpathDirectoryMode, AccessRuleSet accessRuleSet)", "diff": ["-\ttry {", "-\t\t\tFile file = new File(convertPathSeparators(classpathName));", "-\t\t\tif (file.isDirectory()) {", "-\t\t\t\tif (file.exists()) {", "-\t\t\t\t\tresult = new ClasspathDirectory(file, encoding,", "-\t\t\t\t\t\t\tclasspathDirectoryMode, accessRuleSet);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tString lowercaseClasspathName = classpathName.toLowerCase();", "-\t\t\t\tif (lowercaseClasspathName.endsWith(SUFFIX_STRING_jar)", "-\t\t\t\t\t\t|| lowercaseClasspathName.endsWith(SUFFIX_STRING_zip)) {", "-\t\t\t\t\tresult = new ClasspathJar(new ZipFile(file), true,", "-\t\t\t\t\t\t\taccessRuleSet);", "-\t\t\t\t\t// will throw an IOException if file does not exist", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (IOException e) {", "-\t\t\t// result = null; -- this is already the case", "+\tFile file = new File(convertPathSeparators(classpathName));", "+\tif (file.isDirectory()) {", "+\t\tif (file.exists()) {", "+\t\t\tresult = new ClasspathDirectory(file, encoding,", "+\t\t\t\t\tclasspathDirectoryMode, accessRuleSet);", "+\t} else {", "+\t\tString lowercaseClasspathName = classpathName.toLowerCase();", "+\t\tif (lowercaseClasspathName.endsWith(SUFFIX_STRING_jar)", "+\t\t\t\t|| lowercaseClasspathName.endsWith(SUFFIX_STRING_zip)) {", "+\t\t\tresult = new ClasspathJar(file, true, accessRuleSet);", "+\t\t\t// will throw an IOException if file does not exist", "+\t\t}", "+\t}"]}], "num": 40069}
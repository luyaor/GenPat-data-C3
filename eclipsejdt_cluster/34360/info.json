{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3bde4343be5aeed0fc07b2145de2d863", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "faf47cd93f9ba0872ace6a5e9dd05d3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "64acc52a43851c3687c66fff1c938785cba185e7", "commitAfterChange": "57edad08edc408d5cd09316ff260c102c9c3b29c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static TypeBinding resolveType(TypeBinding type, LookupEnvironment environment, ParameterizedTypeBinding parameterizedType, int rank)", "signatureAfterChange": " public static TypeBinding resolveType(TypeBinding type, LookupEnvironment environment, ParameterizedTypeBinding parameterizedType, int rank)", "diff": ["-\tif (type instanceof UnresolvedReferenceBinding)", "-\t\treturn ((UnresolvedReferenceBinding) type).resolve(environment, parameterizedType == null);", "-\tif (type.isParameterizedType())", "-\t\treturn ((ParameterizedTypeBinding) type).resolve();", "-\tif (type.isWildcard())", "-\t\treturn ((WildcardBinding) type).resolve();", "-\tif (type.isArrayType())", "-\t\tresolveType(((ArrayBinding) type).leafComponentType, environment, parameterizedType, rank);", "-", "-\tif (parameterizedType == null && type.isGenericType()) // raw reference to generic ?", "-\t    return environment.createRawType((ReferenceBinding) type, null);", "+\tswitch (type.bindingType()) {", "+\t\t", "+\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\treturn ((ParameterizedTypeBinding) type).resolve();", "+\t\t\t", "+\t\tcase Binding.WILDCARD_TYPE :", "+\t\t\treturn ((WildcardBinding) type).resolve();", "+\t\t\t", "+\t\tcase Binding.ARRAY_TYPE :", "+\t\t\tresolveType(((ArrayBinding) type).leafComponentType, environment, parameterizedType, rank);", "+\t\t\tbreak;", "+\t\t\t", "+\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t((TypeVariableBinding) type).resolve(environment);", "+\t\t\tbreak;", "+\t\t\t\t\t\t", "+\t\tcase Binding.GENERIC_TYPE :", "+\t\t\tif (parameterizedType == null) // raw reference to generic ?", "+\t\t\t    return environment.createRawType((ReferenceBinding) type, null);", "+\t\t\tbreak;", "+\t\t\t", "+\t\tdefault:\t\t\t", "+\t\t\tif (type instanceof UnresolvedReferenceBinding)", "+\t\t\t\treturn ((UnresolvedReferenceBinding) type).resolve(environment, parameterizedType == null);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fff6c1321e5cd87614e7a25d7efbf65f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "6cdef9e50c0c19ef931636bb6582e431ba4ed6f0", "commitAfterChange": "a08dcb71c251f4a65da174f08c5aedb4a1c21fbd", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t \tpublic boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": " \t \tpublic boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-        if (otherType.isRawType())", "-            return erasure() == otherType.erasure();", "-        if (otherType.isParameterizedType()) {", "-            if ((otherType.tagBits & HasWildcard) == 0 && (!this.isMemberType() || !otherType.isMemberType())) ", "-            \treturn false; // should have been identical", "-            ParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "-            if (this.type != otherParamType.type) ", "-                return false;", "-            ReferenceBinding enclosing = enclosingType();", "-            if (enclosing != null && !enclosing.isEquivalentTo(otherParamType.enclosingType()))", "-                return false;", "-            int length = this.arguments == null ? 0 : this.arguments.length;", "-            TypeBinding[] otherArguments = otherParamType.arguments;", "-            int otherLength = otherArguments == null ? 0 : otherArguments.length;", "-            if (otherLength != length) ", "-                return false;", "-            // argument must be identical, only equivalence is allowed if wildcard other type", "-            for (int i = 0; i < length; i++) {", "-            \tTypeBinding argument = this.arguments[i];", "-            \tTypeBinding otherArgument = otherArguments[i];", "-\t\t\t\tif (!(argument == otherArgument", "-\t\t\t\t\t\t|| (otherArgument.isWildcard()) && argument.isEquivalentTo(otherArgument))) {", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-            }", "-            return true;", "-        }", "-        if (otherType.isWildcard())", "-        \treturn ((WildcardBinding) otherType).boundCheck(this);", "+\t    switch(otherType.bindingType()) {", "+\t", "+\t    \tcase Binding.WILDCARD_TYPE :", "+\t        \treturn ((WildcardBinding) otherType).boundCheck(this);", "+\t    \t\t", "+\t    \tcase Binding.PARAMETERIZED_TYPE :", "+\t            if ((otherType.tagBits & HasWildcard) == 0 && (!this.isMemberType() || !otherType.isMemberType())) ", "+\t            \treturn false; // should have been identical", "+\t            ParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "+\t            if (this.type != otherParamType.type) ", "+\t                return false;", "+\t            ReferenceBinding enclosing = enclosingType();", "+\t            if (enclosing != null && !enclosing.isEquivalentTo(otherParamType.enclosingType()))", "+\t                return false;", "+\t            int length = this.arguments == null ? 0 : this.arguments.length;", "+\t            TypeBinding[] otherArguments = otherParamType.arguments;", "+\t            int otherLength = otherArguments == null ? 0 : otherArguments.length;", "+\t            if (otherLength != length) ", "+\t                return false;", "+\t            // argument must be identical, only equivalence is allowed if wildcard other type", "+\t            for (int i = 0; i < length; i++) {", "+\t            \tTypeBinding argument = this.arguments[i];", "+\t            \tTypeBinding otherArgument = otherArguments[i];", "+\t\t\t\t\tif (!(argument == otherArgument", "+\t\t\t\t\t\t\t|| (otherArgument.isWildcard()) && argument.isEquivalentTo(otherArgument))) {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t            }", "+\t            return true;", "+\t    \t", "+\t    \tcase Binding.RAW_TYPE :", "+\t            return erasure() == otherType.erasure();", "+\t    }"]}], "num": 34360}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ec5e191be24e0255f1e64594b5599bf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5251757eacf1e7185f4f90067771f263", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/Factory.java", "commitBeforeChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "commitAfterChange": "2ed8d2842cd060fd2ed1992ac37d7e3f157e19c9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r     public static Object createAnnotationValueObject(Expression expr, DeclarationImpl decl, ProcessorEnvImpl env)", "signatureAfterChange": " \tpublic static AnnotationValue createAnnotationMemberValue(Object domValue, \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  String elementName, \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  AnnotationMirrorImpl anno, \t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ProcessorEnvImpl env)", "diff": ["-     */\r", "-    public static Object createAnnotationValueObject(Expression expr, DeclarationImpl decl, ProcessorEnvImpl env)\r", "-    {\r", "-        if( expr == null ) return null;\r", "-\t\tfinal Object constantValue = expr.resolveConstantExpressionValue();\r", "-\t\tif( constantValue != null ) return constantValue;\r", "-        switch(expr.getNodeType())\r", "-        {\r", "-        case ASTNode.SIMPLE_NAME:\r", "-        case ASTNode.QUALIFIED_NAME:\r", "-            final Name name = (Name)expr;\r", "-            final IBinding nameBinding = name.resolveBinding();\r", "-            if( nameBinding.getKind() == IBinding.VARIABLE ) {\r", "-                return ((IVariableBinding)nameBinding).getConstantValue();\r", "-            }\r", "-            break;\r", "-        case ASTNode.ARRAY_INITIALIZER:\r", "-\r", "-            final List<Expression> exprs = ((ArrayInitializer)expr).expressions();\r", "-            final List<AnnotationValue> annoValues = new ArrayList<AnnotationValue>(exprs.size());\r", "-            for(Expression initExpr : exprs ){\r", "-                if( initExpr == null ) continue;\r", "-                // can't have multi-dimensional array.\r", "-                // there should be already a java compile time error\r", "-                else if( initExpr.getNodeType() == ASTNode.ARRAY_INITIALIZER )\r", "-                    return null;\r", "-\r", "-                final AnnotationValue value = createAnnotationValue(initExpr, decl, env);\r", "-                if( value != null )\r", "-                    annoValues.add(value);\r", "-            }\r", "-            return annoValues;\r", "-        case ASTNode.NORMAL_ANNOTATION:\r", "-        case ASTNode.MARKER_ANNOTATION:\r", "-        case ASTNode.SINGLE_MEMBER_ANNOTATION:\r", "-            return Factory.createAnnotationMirror((Annotation)expr, decl, env);        \r", "-        case ASTNode.TYPE_LITERAL:\r", "-            throw new IllegalStateException(\"illegal expression \" + expr);     \r", "-        }\r", "-\r", "-        return null;\r", "-    }\r", "+\t */", "+\tpublic static AnnotationValue createAnnotationMemberValue(Object domValue,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  String elementName,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  AnnotationMirrorImpl anno, \t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ProcessorEnvImpl env)", "+\t{", "+\t\tif( domValue == null ) return null;", "+\t\tfinal Object converted = convertDOMValueToMirrorValue(domValue, elementName, anno, anno.getAnnotatedDeclaration(), env);", "+\t\treturn createAnnotationValue(converted, elementName, -1, anno, env);\t\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe7aee2170ca854174f01af532fffaef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "cbd955fb2a4598f2699dd195e39c5cb17dbd967e", "commitAfterChange": "4923f7bf4c07fe4ddafc97e39d6c8df65941fe37", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public boolean contains(IResource resource)", "signatureAfterChange": " public boolean contains(IResource resource)", "diff": ["+\tIJavaProject[] projects;", "-\t\tIPath path = resource.getFullPath();", "-\t\tIJavaProject[] projects = this.getJavaProjects();", "-\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\tIJavaProject project = projects[i];", "-\t\t\tIClasspathEntry[] classpath = project.getResolvedClasspath(true);", "-\t\t\t", "-\t\t\tIPath output = project.getOutputLocation();", "-\t\t\tIPath innerMostOutput = output.isPrefixOf(path) ? output : null;", "-\t\t\tIClasspathEntry innerMostEntry = null;", "-\t\t\tfor (int j = 0, cpLength = classpath.length; j < cpLength; j++) {", "-\t\t\t\tIClasspathEntry entry = classpath[j];", "-", "-\t\t\t\tIPath entryPath = entry.getPath();", "-\t\t\t\tif ((innerMostEntry == null || innerMostEntry.getPath().isPrefixOf(entryPath))", "-\t\t\t\t\t\t&& entryPath.isPrefixOf(path)) {", "-\t\t\t\t\tinnerMostEntry = entry;", "-\t\t\t\t}", "-\t\t\t\tIPath entryOutput = classpath[j].getOutputLocation();", "-\t\t\t\tif (entryOutput != null && entryOutput.isPrefixOf(path)) {", "-\t\t\t\t\tinnerMostOutput = entryOutput;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (innerMostEntry != null) {", "-\t\t\t\t// special case prj==src and nested output location", "-\t\t\t\tif (innerMostOutput != null && innerMostOutput.segmentCount() > 1 // output isn't project", "-\t\t\t\t\t\t&& innerMostEntry.getPath().segmentCount() == 1) { // 1 segment must be project name", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tif  (resource instanceof IFolder) {", "-\t\t\t\t\t // folders are always included in src/lib entries", "-\t\t\t\t\t return true;", "-\t\t\t\t}", "-\t\t\t\tswitch (innerMostEntry.getEntryKind()) {", "-\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE:", "-\t\t\t\t\t\t// .class files are not visible in source folders ", "-\t\t\t\t\t\treturn !Util.isClassFileName(path.lastSegment());", "-\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:", "-\t\t\t\t\t\t// .java files are not visible in library folders", "-\t\t\t\t\t\treturn !Util.isJavaFileName(path.lastSegment());", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (innerMostOutput != null) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t}", "-\t\treturn true;", "+\t\tprojects = this.getJavaProjects();", "+\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\tJavaProject project = (JavaProject)projects[i];", "+\t\tif (!project.contains(resource)) {", "+\t\t\treturn false;", "+\t\t}", "+\t}", "+\treturn true;"]}], "num": 70921}
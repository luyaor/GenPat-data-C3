{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e8de15c01a8a478419f64d92127aa9e4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dbbb53fffcdefb3ecbd228e5b1c876f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "10a59ab8fb6256e59e155c071a356402964eb736", "commitAfterChange": "bacbe6f6e994ffc49a94960691c76bff97cb04d5", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic void returnsExpression(Expression expression, TypeBinding resultType)", "signatureAfterChange": "  \tpublic void returnsExpression(Expression expression, TypeBinding resultType)", "diff": ["+\t\tif (this.body instanceof Expression) {", "+\t\t\tthis.original.valueCompatible = resultType != null && resultType.id != TypeIds.T_void;", "+\t\t\treturn; // void compatibility determined via statementExpression()", "+\t\t}", "-\t\t\t\tExpression [] results = (Expression[]) this.original.resultExpressions.get(this.expectedType);", "-\t\t\t\tint resultsLength = results.length;", "-\t\t\t\tSystem.arraycopy(results, 0, results = new Expression[resultsLength + 1], 0, resultsLength);", "-\t\t\t\tresults[resultsLength] = expression;", "+\t\t\t\tExpression [] returnExpressions = this.original.resultExpressions;", "+\t\t\t\tint resultsLength = returnExpressions.length;", "+\t\t\t\tSystem.arraycopy(returnExpressions, 0, returnExpressions = new Expression[resultsLength + 1], 0, resultsLength);", "+\t\t\t\treturnExpressions[resultsLength] = expression;", "+\t\t\t\tthis.original.resultExpressions = returnExpressions;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88b6b8b61a9240199d41f88d3044bfda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "8bd987839355c299213c95f3874a2e3574283d9c", "commitAfterChange": "76b6723dbe61d0b9874754d0d6572d1a4d8c0cbc", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "  \tprivate int getTextLength(FormatJavadocBlock block, FormatJavadocText text, boolean immutableEnd)", "signatureAfterChange": "  \tprivate int getTextLength(FormatJavadocBlock block, FormatJavadocText text)", "diff": ["-\tprivate int getTextLength(FormatJavadocBlock block, FormatJavadocText text, boolean immutableEnd) {", "+\tprivate int getTextLength(FormatJavadocBlock block, FormatJavadocText text) {", "-\t\t\t\t\t\t\tif (immutableEnd) {", "-\t\t\t\t\t\t\t\ttextLength = 0;", "+\t\t\t\t\t\t\ttextLength = 0;", "+\t\t\t\t\t\t\tthis.scanner.getNextChar();", "+\t\t\t\t\t\t\tif (this.scanner.currentCharacter == '*') {", "+\t\t\t\t\t\t\t\tthis.scanner.getNextChar();", "+\t\t\t\t\t\t\t\tif (this.scanner.currentCharacter != ' ') {", "+\t\t\t\t\t\t\t\t\ttextLength++;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\treturn textLength;", "+\t\t\t\t\t\t\t\ttextLength++;", "+\t\t\t\t\t\t\tcontinue;", "+\t    \t\t\ttextLength += (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "-    \t\t\ttextLength += (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;"]}], "num": 2465}
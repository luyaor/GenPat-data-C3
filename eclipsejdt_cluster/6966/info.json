{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9adbf4d483a9676b837c84d142ffa10", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "470b0de4b3d7ee45ba3b7c045aa171b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Clinit.java", "commitBeforeChange": "1f16b07138a4ff3970eb777fe51b4defd3508931", "commitAfterChange": "30166c06d6dd51fd7dbca34d0d55442f8ed395c4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(ClassScope classScope, ClassFile classFile)", "signatureAfterChange": " \tpublic void generateCode(ClassScope classScope, ClassFile classFile)", "diff": ["-\t\ttry {", "-\t\t\tclinitOffset = classFile.contentsOffset;", "-\t\t\tthis.generateCode(classScope, classFile, clinitOffset);", "-\t\t} catch (AbortMethod e) {", "-\t\t\t// should never occur", "-\t\t\t// the clinit referenceContext is the type declaration", "-\t\t\t// All clinit problems will be reported against the type: AbortType instead of AbortMethod", "-\t\t\t// reset the contentsOffset to the value before generating the clinit code", "-\t\t\t// decrement the number of method info as well.", "-\t\t\t// This is done in the addProblemMethod and addProblemConstructor for other", "-\t\t\t// cases.", "-\t\t\tif (e.compilationResult == CodeStream.RESTART_IN_WIDE_MODE) {", "-\t\t\t\t// a branch target required a goto_w, restart code gen in wide mode.", "-\t\t\t\ttry {", "+\t\tboolean restart = false;", "+\t\tdo {", "+\t\t\ttry {", "+\t\t\t\tclinitOffset = classFile.contentsOffset;", "+\t\t\t\tthis.generateCode(classScope, classFile, clinitOffset);", "+\t\t\t\trestart = false;", "+\t\t\t} catch (AbortMethod e) {", "+\t\t\t\t// should never occur", "+\t\t\t\t// the clinit referenceContext is the type declaration", "+\t\t\t\t// All clinit problems will be reported against the type: AbortType instead of AbortMethod", "+\t\t\t\t// reset the contentsOffset to the value before generating the clinit code", "+\t\t\t\t// decrement the number of method info as well.", "+\t\t\t\t// This is done in the addProblemMethod and addProblemConstructor for other", "+\t\t\t\t// cases.", "+\t\t\t\tif (e.compilationResult == CodeStream.RESTART_IN_WIDE_MODE) {", "+\t\t\t\t\t// a branch target required a goto_w, restart code gen in wide mode.", "+\t\t\t\t\tif (!restart) {", "+\t\t\t\t\t\tclassFile.contentsOffset = clinitOffset;", "+\t\t\t\t\t\tclassFile.methodCount--;", "+\t\t\t\t\t\tclassFile.codeStream.resetInWideMode(); // request wide mode", "+\t\t\t\t\t\t// restart method generation", "+\t\t\t\t\t\trestart = true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tclassFile.contentsOffset = clinitOffset;", "+\t\t\t\t\t\tclassFile.methodCount--;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (e.compilationResult == CodeStream.RESTART_CODE_GEN_FOR_UNUSED_LOCALS_MODE) {", "-\t\t\t\t\tclassFile.codeStream.resetInWideMode(); // request wide mode", "-\t\t\t\t\tthis.generateCode(classScope, classFile, clinitOffset);", "+\t\t\t\t\tclassFile.codeStream.resetForCodeGenUnusedLocals();", "-\t\t\t\t} catch (AbortMethod e2) {", "+\t\t\t\t\trestart = true;", "+\t\t\t\t} else {", "+\t\t\t\t\t// produce a problem method accounting for this fatal error", "+\t\t\t\t\trestart = false;", "-\t\t\t} else {", "-\t\t\t\t// produce a problem method accounting for this fatal error", "-\t\t\t\tclassFile.contentsOffset = clinitOffset;", "-\t\t\t\tclassFile.methodCount--;", "-\t\t}", "+\t\t} while (restart);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb522244cba66b55f35a6354921eb9fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Clinit.java", "commitBeforeChange": "386973a3070496c014c76dfef6b370eb80aa95d3", "commitAfterChange": "1e351d47b6a42ac5f4bfe0ec77b007aad61afe06", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tpublic void generateCode(ClassScope classScope, ClassFile classFile)", "signatureAfterChange": "\r \tpublic void generateCode(ClassScope classScope, ClassFile classFile)", "diff": ["+\t\t\tthis.generateCode(classScope, classFile, clinitOffset);\r", "+\t\t} catch (AbortMethod e) {\r", "+\t\t\t// should never occur\r", "+\t\t\t// the clinit referenceContext is the type declaration\r", "+\t\t\t// All clinit problems will be reported against the type: AbortType instead of AbortMethod\r", "+\t\t\t// reset the contentsOffset to the value before generating the clinit code\r", "+\t\t\t// decrement the number of method info as well.\r", "+\t\t\t// This is done in the addProblemMethod and addProblemConstructor for other\r", "+\t\t\t// cases.\r", "+\t\t\tif (e.compilationResult == CodeStream.RESTART_IN_WIDE_MODE) {\r", "+\t\t\t\t// a branch target required a goto_w, restart code gen in wide mode.\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tif (statements != null) {\r", "+\t\t\t\t\t\tfor (int i = 0, max = statements.length; i < max; i++)\r", "+\t\t\t\t\t\t\tstatements[i].resetStateForCodeGeneration();\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tclassFile.contentsOffset = clinitOffset;\r", "+\t\t\t\t\tclassFile.methodCount--;\r", "+\t\t\t\t\tclassFile.codeStream.wideMode = true; // request wide mode \r", "+\t\t\t\t\tthis.generateCode(classScope, classFile, clinitOffset); // restart method generation\r", "+\t\t\t\t} catch(AbortMethod e2) {\r", "+\t\t\t\t\tclassFile.contentsOffset = clinitOffset;\r", "+\t\t\t\t\tclassFile.methodCount--;\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\t// produce a problem method accounting for this fatal error\r", "+\t\t\t\tclassFile.contentsOffset = clinitOffset;\r", "+\t\t\t\tclassFile.methodCount--;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "-\t\t} catch (AbortMethod e) {\r", "-\t\t\t// should never occur\r", "-\t\t\t// the clinit referenceContext is the type declaration\r", "-\t\t\t// All clinit problems will be reported against the type: AbortType instead of AbortMethod\r", "-\t\t\t// reset the contentsOffset to the value before generating the clinit code\r", "-\t\t\t// decrement the number of method info as well.\r", "-\t\t\t// This is done in the addProblemMethod and addProblemConstructor for other\r", "-\t\t\t// cases.\r", "-\t\t\tclassFile.contentsOffset = clinitOffset;\r", "-\t\t\tclassFile.methodCount--;\r", "-\t\t}\r"]}], "num": 6966}
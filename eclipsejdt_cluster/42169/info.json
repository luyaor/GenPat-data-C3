{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e50174946d8ef01366d5b4998b9baba3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ed94d0ea68e10972cdfc667ee710f18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingTest.java", "commitBeforeChange": "988b834a35e1571af05adddd8db1ce5aaa1f0ff0", "commitAfterChange": "c90773ded969a955dbf869e7d3cd599898423a64", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprotected static TestSuite addMethodsToSuite(Class testClass)", "signatureAfterChange": " \tprotected static TestSuite createSuite(Class testClass)", "diff": ["-\tprotected static TestSuite addMethodsToSuite(Class testClass) {", "+\t */", "+\tprotected static TestSuite createSuite(Class testClass) {", "-\t\t\t\t\tint levels = getASTLevelsForTest(name);", "-\t\t\t\t\tif ( (levels & LEVEL_2) != 0 )", "-\t\t\t\t\t\tsuite.addTest((Test) cons.newInstance(new Object[]{name,  new Integer(JLS2_INTERNAL)}));", "-\t\t\t\t\tif ( (levels & LEVEL_3) != 0 )", "-\t\t\t\t\t\tsuite.addTest((Test) cons.newInstance(new Object[]{name,  new Integer(JLS3_INTERNAL)}));", "-\t\t\t\t\tif ( (levels & LEVEL_4) != 0 )", "-\t\t\t\t\t\tsuite.addTest((Test) cons.newInstance(new Object[]{name,  new Integer(JLS4_INTERNAL)}));", "-\t\t\t\t\tif ( (levels & LEVEL_8) != 0 )", "-\t\t\t\t\t\tsuite.addTest((Test) cons.newInstance(new Object[]{name,  new Integer(AST.JLS8)}));", "-\t\t\t\t\t// In future when adding support for new levels, make sure you update the getASTLevelsForTest() method too", "-\t\t\t\t\t// and create a new SINCE_* constant and update the value of SINCE_8", "+\t\t\t\t\t", "+\t\t\t\t\tint index = name.indexOf(ONLY_AST_STRING);", "+\t\t\t\t\tif (index != -1) {", "+\t\t\t\t\t\tString suffix = name.substring(index + ONLY_AST_STRING.length() + 1);", "+\t\t\t\t\t\tString[] levels = suffix.split(STRING_);", "+\t\t\t\t\t\tfor (int l= 0; l < levels.length; l++) {", "+\t\t\t\t\t\t\tsuite.addTest((Test) cons.newInstance(new Object[]{name,  Integer.valueOf(levels[l])}));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint since = -1;", "+\t\t\t\t\t\tindex = name.indexOf(SINCE_AST_STRING);", "+\t\t\t\t\t\tif (index != -1) {", "+\t\t\t\t\t\t\tString suffix = name.substring(index + SINCE_AST_STRING.length() + 1);", "+\t\t\t\t\t\t\tsince = Integer.parseInt(suffix);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tfor (int j= 0; j < JLS_LEVELS.length; j++) {", "+\t\t\t\t\t\t\tint level = JLS_LEVELS[j];", "+\t\t\t\t\t\t\tif (level >= since) {", "+\t\t\t\t\t\t\t\tsuite.addTest((Test) cons.newInstance(new Object[]{name,  new Integer(level)}));", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fbbf7f1f8747bd4f198c43d97a2410f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "9b8497af1cbd77526a4fa45b99ed631f29570c0f", "commitAfterChange": "e2827e126b55e7ef1923fa3efec0a2ea0aba2477", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t\t \t\tprivate CompilationParticipant[] getRegisteredParticipants()", "signatureAfterChange": " \t\t \t\tprivate Object[][] getRegisteredParticipants()", "diff": ["-\t\tprivate CompilationParticipant[] getRegisteredParticipants() {", "+\t\tprivate Object[][] getRegisteredParticipants() {", "-\t\t\tfinal HashMap modifyingEnv = new HashMap();", "-\t\t\tfinal HashMap creatingProblems = new HashMap();", "-\t\t\tfinal HashMap others = new HashMap();", "+\t\t\tfinal ArrayList modifyingEnv = new ArrayList();", "+\t\t\tfinal ArrayList creatingProblems = new ArrayList();", "+\t\t\tfinal ArrayList others = new ArrayList();", "-\t\t\t\t\tPlatform.run(new ISafeRunnable() {", "-\t\t\t\t\t\tpublic void handleException(Throwable exception) {", "-\t\t\t\t\t\t\tUtil.log(exception, \"Exception occurred while creating compilation participant\"); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tpublic void run() throws Exception {", "-\t\t\t\t\t\t\tObject execExt = configElement.createExecutableExtension(\"class\"); //$NON-NLS-1$ ", "-\t\t\t\t\t\t\tif (execExt instanceof CompilationParticipant) {", "-\t\t\t\t\t\t\t\tif (\"true\".equals(configElement.getAttribute(\"modifiesEnvironment\"))) //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\t\t\t\tmodifyingEnv.put(configElement, execExt);", "-\t\t\t\t\t\t\t\telse if (\"true\".equals(configElement.getAttribute(\"createsProblems\"))) //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\t\t\t\tcreatingProblems.put(configElement, execExt);", "-\t\t\t\t\t\t\t\telse", "-\t\t\t\t\t\t\t\t\tothers.put(configElement, execExt);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t});", "+\t\t\t\t\t// add config element in the group it belongs to", "+\t\t\t\t\tif (\"true\".equals(configElement.getAttribute(\"modifiesEnvironment\"))) //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\tmodifyingEnv.add(configElement);", "+\t\t\t\t\telse if (\"true\".equals(configElement.getAttribute(\"createsProblems\"))) //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\tcreatingProblems.add(configElement);", "+\t\t\t\t\telse", "+\t\t\t\t\t\tothers.add(configElement);", "-\t\t\tCompilationParticipant[] result = new CompilationParticipant[size];", "+\t\t\t", "+\t\t\t// sort config elements in each group", "+\t\t\tIConfigurationElement[] configElements = new IConfigurationElement[size];", "-\t\t\tindex = sortParticipants(modifyingEnv, result, index);", "-\t\t\tindex = sortParticipants(creatingProblems, result, index);", "-\t\t\tindex = sortParticipants(others, result, index);", "+\t\t\tindex = sortParticipants(modifyingEnv, configElements, index);", "+\t\t\tindex = sortParticipants(creatingProblems, configElements, index);", "+\t\t\tindex = sortParticipants(others, configElements, index);", "+\t\t\t", "+\t\t\t// create result table", "+\t\t\tObject[][] result = new Object[MAX_SOURCE_LEVEL][];", "+\t\t\tint length = configElements.length;", "+\t\t\tfor (int i = 0; i < MAX_SOURCE_LEVEL; i++) {", "+\t\t\t\tresult[i] = new Object[length];", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tString sourceLevel = configElements[i].getAttribute(\"requiredSourceLevel\"); //$NON-NLS-1$", "+\t\t\t\tint sourceLevelIndex = indexForSourceLevel(sourceLevel);", "+\t\t\t\tfor (int j = sourceLevelIndex; j < MAX_SOURCE_LEVEL; j++) {", "+\t\t\t\t\tresult[j][i] = configElements[i];", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 42169}
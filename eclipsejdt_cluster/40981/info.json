{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26666b9ca4602432845cc04db700ccb9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e873d17741601cebe958288bd73d2a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "b3ed0b0008127ac481b84e4445fe596562882759", "commitAfterChange": "d23ab8425705ca6d3b835e1514183dacb111562d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \r public FileSystem(String[] classpathNames, String[] initialFileNames, String encoding)", "signatureAfterChange": "\r \r public FileSystem(String[] classpathNames, String[] initialFileNames, String encoding)", "diff": ["+\tthis(classpathNames, initialFileNames, encoding, null);\r", "+}\r", "-\t\t\t\t\tclasspaths[i] = new ClasspathDirectory(file, encoding);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecccc5defb35e707662e7d2618ff12a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "68ccb4031ed08b4fe5c4be466185d9f98028d52b", "commitAfterChange": "b97b84a6370469b0432a4c45b3f13c4f7bb62ce7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " public FileSystem(String[] classpathNames, String[] initialFileNames, String encoding, int[] classpathDirectoryModes)", "signatureAfterChange": " public FileSystem(String[] classpathNames, String[] initialFileNames, String encoding, int[] classpathDirectoryModes)", "diff": ["-\tString[] pathNames = new String[classpathSize];", "-\t\ttry {", "-\t\t\tFile file = new File(convertPathSeparators(classpathNames[i]));", "-\t\t\tif (file.isDirectory()) {", "-\t\t\t\tif (file.exists()) {", "-\t\t\t\t\tif (classpathDirectoryModes == null){", "-\t\t\t\t\t\tthis.classpaths[i] = new ClasspathDirectory(file, encoding);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tthis.classpaths[i] = new ClasspathDirectory(file, encoding, classpathDirectoryModes[i]);", "-\t\t\t\t\t}", "-\t\t\t\t\tpathNames[i] = ((ClasspathDirectory) this.classpaths[i]).path;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tString lowercaseClasspathName = classpathNames[i].toLowerCase();", "-\t\t\t\tif (lowercaseClasspathName.endsWith(SUFFIX_STRING_jar)", "-\t\t\t\t\t  || lowercaseClasspathName.endsWith(SUFFIX_STRING_zip)) {", "-\t\t\t\t\tthis.classpaths[i] = this.getClasspathJar(file); // will throw an IOException if file does not exist", "-\t\t\t\t\tpathNames[i] = classpathNames[i].substring(0, classpathNames[i].lastIndexOf('.'));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (IOException e) {", "-\t\t\tthis.classpaths[i] = null;", "-\t\t}", "+\t\tthis.classpaths[i] = getClasspath(classpathNames[i], encoding,", "+\t\t\t\t\tclasspathDirectoryModes == null ? 0", "+\t\t\t\t\t\t\t: classpathDirectoryModes[i], null);", "-\t\tString[] newNames = new String[classpathSize - problemsOccured];", "-\t\t\t\tnewNames[current++] = pathNames[i];", "-\t\tpathNames = newNames;", "-", "+\tinitializeKnownFileNames(initialFileNames);", "+}", "-\t\tfor (int j = 0; j < classpathSize; j++)", "-\t\t\tif (fileName.startsWith(pathNames[j]))", "-\t\t\t\tmatchingPathName = pathNames[j];"]}], "num": 40981}
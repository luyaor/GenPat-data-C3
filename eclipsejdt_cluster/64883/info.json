{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea295f6306d927f3801703744a362725", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08f04d73da675589f15134a5dfad34fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "ded90d967b480e6d7d22b3283d60f4ed44ccc489", "commitAfterChange": "18c83b91d182e52feafdad6b2c46eb79ffb0e002", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tprotected Hashtable warningOptions(boolean all)", "signatureAfterChange": " \tprotected Hashtable warningOptions(int kind)", "diff": ["-\tprotected Hashtable warningOptions(boolean all) {", "+\tprotected Hashtable warningOptions(int kind) {", "-\t\tHashtable optionsMap = new Hashtable(30);", "-\t\tString generate = all ? CompilerOptions.GENERATE : CompilerOptions.DO_NOT_GENERATE;", "-\t\tString warning = all ? CompilerOptions.WARNING : CompilerOptions.IGNORE;", "-\t\tString enabled = all ? CompilerOptions.ENABLED : CompilerOptions.DISABLED;", "-\t\tString preserve = all ? CompilerOptions.OPTIMIZE_OUT : CompilerOptions.PRESERVE;", "+\t\tHashtable optionsMap = null;", "+\t\tswitch (kind) {", "+\t\t\tcase 0:", "+\t\t\t\toptionsMap = JavaCore.getDefaultOptions();", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\toptionsMap = new Hashtable(350);", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tif (kind == 0) {", "+\t\t\t// Default set since 3.1", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedImport, CompilerOptions.IGNORE); ", "+\t\t} else {", "+\t\t\tboolean all = kind == 1;", "+\t\t\tString generate = all ? CompilerOptions.GENERATE : CompilerOptions.DO_NOT_GENERATE;", "+\t\t\tString warning = all ? CompilerOptions.WARNING : CompilerOptions.IGNORE;", "+\t\t\tString enabled = all ? CompilerOptions.ENABLED : CompilerOptions.DISABLED;", "+\t\t\tString preserve = all ? CompilerOptions.OPTIMIZE_OUT : CompilerOptions.PRESERVE;", "+\t\t\t", "+\t\t\t// Set options values", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_LocalVariableAttribute, generate); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_LineNumberAttribute, generate);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_SourceFileAttribute, generate);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_PreserveUnusedLocal, preserve);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_DocCommentSupport, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecation, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedLocal, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameter, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedImport, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportNoEffectAssignment, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportNoImplicitStringConversion, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportNonStaticAccessToStatic, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportIndirectStaticAccess, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportIncompatibleNonInheritedInterfaceMethod, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedPrivateMember, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportLocalVariableHiding, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportFieldHiding, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportPossibleAccidentalBooleanAssignment, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportEmptyStatement, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportAssertIdentifier, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUndocumentedEmptyBlock, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnnecessaryTypeCheck, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnnecessaryElse, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadoc, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadocTags, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocTags, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocComments, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportFinallyBlockNotCompletingNormally, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedDeclaredThrownException, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnqualifiedFieldAccess, warning); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_TaskTags, all ? JavaCore.DEFAULT_TASK_TAGS : \"\");", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_TaskPriorities, all ? JavaCore.DEFAULT_TASK_PRIORITIES : \"\");", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_TaskCaseSensitive, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameterWhenImplementingAbstract, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameterWhenOverridingConcrete, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportSpecialParameterHidingField, enabled); ", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_InlineJsr, enabled);", "+\t\t}", "-\t\t// Set options values", "-\t\toptionsMap.put(CompilerOptions.OPTION_LocalVariableAttribute, generate); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_LineNumberAttribute, generate);", "-\t\toptionsMap.put(CompilerOptions.OPTION_SourceFileAttribute, generate);", "-\t\toptionsMap.put(CompilerOptions.OPTION_PreserveUnusedLocal, preserve);", "-\t\toptionsMap.put(CompilerOptions.OPTION_DocCommentSupport, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecation, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedLocal, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameter, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedImport, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportNoEffectAssignment, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportNoImplicitStringConversion, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportNonStaticAccessToStatic, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportIndirectStaticAccess, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportIncompatibleNonInheritedInterfaceMethod, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedPrivateMember, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportLocalVariableHiding, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportFieldHiding, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportPossibleAccidentalBooleanAssignment, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportEmptyStatement, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportAssertIdentifier, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUndocumentedEmptyBlock, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnnecessaryTypeCheck, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnnecessaryElse, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadoc, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadocTags, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocTags, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocComments, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportFinallyBlockNotCompletingNormally, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedDeclaredThrownException, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnqualifiedFieldAccess, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_TaskTags, all ? JavaCore.DEFAULT_TASK_TAGS : \"\");", "-\t\toptionsMap.put(CompilerOptions.OPTION_TaskPriorities, all ? JavaCore.DEFAULT_TASK_PRIORITIES : \"\");", "-\t\toptionsMap.put(CompilerOptions.OPTION_TaskCaseSensitive, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameterWhenImplementingAbstract, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameterWhenOverridingConcrete, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportSpecialParameterHidingField, enabled); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_InlineJsr, enabled);", "-\t\t", "-\t\t// Since 3.1 options", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingSerialVersion, warning); ", "-\t\toptionsMap.put(CompilerOptions.OPTION_ReportEnumIdentifier, warning); ", "+\t\t// Ignore 3.1 options", "+\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingSerialVersion, CompilerOptions.IGNORE); ", "+\t\toptionsMap.put(CompilerOptions.OPTION_ReportEnumIdentifier, CompilerOptions.IGNORE); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "494dd7b5367b4f2492b6106c17d388ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "5c85878a62876932bc62b0767f0e4b075cea01c0", "commitAfterChange": "ba74dc7a93e5bf80ccc6be3234ebe25167de5c99", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["-\t\tthis.customDefaultOptions = new HashMap();", "-\t\t", "+\t\tthis.customDefaultOptions = new CompilerOptions().getMap();", "+", "-        // disable all warnings by default", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode, CompilerOptions.DISABLED); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod, CompilerOptions.DISABLED); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedParameter, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedImport, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportNoEffectAssignment, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportNoImplicitStringConversion, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportNonStaticAccessToStatic, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportIndirectStaticAccess, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportIncompatibleNonInheritedInterfaceMethod, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedPrivateMember, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportLocalVariableHiding, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportFieldHiding, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportPossibleAccidentalBooleanAssignment, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportEmptyStatement, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportAssertIdentifier, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportEnumIdentifier, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUndocumentedEmptyBlock, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnnecessaryTypeCheck, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnnecessaryElse, CompilerOptions.IGNORE); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportInvalidJavadoc, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportInvalidJavadocTagsVisibility, CompilerOptions.PUBLIC);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportInvalidJavadocTags, CompilerOptions.DISABLED);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportInvalidJavadocTagsDeprecatedRef, CompilerOptions.DISABLED);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportInvalidJavadocTagsNotVisibleRef, CompilerOptions.DISABLED);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMissingJavadocTags, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMissingJavadocTagsVisibility, CompilerOptions.PUBLIC);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMissingJavadocTagsOverriding, CompilerOptions.DISABLED);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMissingJavadocComments, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMissingJavadocCommentsVisibility, CompilerOptions.PUBLIC);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMissingJavadocCommentsOverriding, CompilerOptions.DISABLED);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportFinallyBlockNotCompletingNormally, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedDeclaredThrownException, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionWhenOverriding, CompilerOptions.DISABLED); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnqualifiedFieldAccess, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnsafeTypeOperation, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportFinalParameterBound, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMissingSerialVersion, CompilerOptions.IGNORE);", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedParameterWhenImplementingAbstract, CompilerOptions.DISABLED); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedParameterWhenOverridingConcrete, CompilerOptions.DISABLED); ", "-\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportSpecialParameterHidingField, CompilerOptions.DISABLED); ", "-", "+\t        // disable all warnings", "+\t\t\tObject[] entries = this.customDefaultOptions.entrySet().toArray();", "+\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "+\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "+\t\t\t\tif (!(entry.getKey() instanceof String))", "+\t\t\t\t\tcontinue;", "+\t\t\t\tif (!(entry.getValue() instanceof String))", "+\t\t\t\t\tcontinue;", "+\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "+\t\t\t\t\tthis.customDefaultOptions.put(entry.getKey(), CompilerOptions.IGNORE);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_TaskTags, \"\"); //$NON-NLS-1$", "-\t\t\t// no warnings", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedImport, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportNonStaticAccessToStatic, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportUnusedImport, CompilerOptions.WARNING);", "-\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportNonStaticAccessToStatic, CompilerOptions.WARNING);", "+\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.IGNORE); ", "+\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode, CompilerOptions.DISABLED); ", "+\t\t\tthis.customDefaultOptions.put(CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod, CompilerOptions.DISABLED); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bee078c12faf1fb2b6c40d56b4b579a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r private void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r private void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemInvalidImport\",2); //$NON-NLS-1$\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportInvalidImport, CompilerOptions.WARNING);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LocalVariableAttribute, 0);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LineNumberAttribute, 0);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_SourceFileAttribute, 0);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_LocalVariableAttribute, CompilerOptions.GENERATE);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_LineNumberAttribute, CompilerOptions.GENERATE);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_SourceFileAttribute, CompilerOptions.GENERATE);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LocalVariableAttribute, 1);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LineNumberAttribute, 1);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_SourceFileAttribute, 1);\t\t\t\t\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_LocalVariableAttribute, CompilerOptions.DO_NOT_GENERATE);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_LineNumberAttribute, CompilerOptions.DO_NOT_GENERATE);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_SourceFileAttribute, CompilerOptions.DO_NOT_GENERATE);\r", "-\t\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LocalVariableAttribute, 0);\r", "+\t\t\t\t\t\toptions.put(CompilerOptions.OPTION_LocalVariableAttribute, CompilerOptions.GENERATE);\r", "-\t\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LineNumberAttribute, 0);\r", "+\t\t\t\t\t\toptions.put(CompilerOptions.OPTION_LineNumberAttribute, CompilerOptions.GENERATE);\r", "-\t\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_SourceFileAttribute, 0);\r", "+\t\t\t\t\t\toptions.put(CompilerOptions.OPTION_SourceFileAttribute, CompilerOptions.GENERATE);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportMethodWithConstructorName, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportHiddenCatchBlock, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportDeprecation, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedLocal, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedParameter, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportAssertIdentifier, 2);\r", "-\t\t\t\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportUnusedParameter, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportAssertIdentifier, CompilerOptions.IGNORE);\r", "+\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportMethodWithConstructorName, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportHiddenCatchBlock, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportDeprecation, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedLocal, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedParameter, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportUnusedParameter, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportAssertIdentifier, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportAssertIdentifier, CompilerOptions.WARNING);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_PreserveUnusedLocal, 0);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.PRESERVE);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_TargetPlatform, 0);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_TargetPlatform, 1);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);\r", "+\t\t\t} else if (currentArg.equals(\"1.3\")) { //$NON-NLS-1$\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_3);\r", "+\t\t\t} else if (currentArg.equals(\"1.4\")) { //$NON-NLS-1$\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_Source, 0);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_Source, 1);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_4);\r", "-\t\tfor(int i = 0; i < problemOption.length ; i++){\r", "-\t\t\tfor(int j = 0 ; j < options.length ; j++){\r", "-\t\t\t\tif(options[j].getID().equals(problemOption[i]) && options[j].getValueIndex() == 1){\r", "-\t\t\t\t\toptions[j].setValueIndex(2);\r", "-\t\t\t\t}\r", "+\t\t// filter options which are related to the assist component\r", "+\t\tObject[] entries = options.entrySet().toArray();\r", "+\t\tfor (int i = 0, max = entries.length; i < max; i++){\r", "+\t\t\tMap.Entry entry = (Map.Entry)entries[i];\r", "+\t\t\tif (!(entry.getKey() instanceof String)) continue;\r", "+\t\t\tif (!(entry.getValue() instanceof String)) continue;\r", "+\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)){\r", "+\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c75790116c0bd29214b7a774f1b906fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "d1246b4aff159c8bec10d39c7616aa371724fb25", "commitAfterChange": "3aaa02433bee6eae022db09efeb9fd0aba7da6a0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate void findHeader()", "signatureAfterChange": "  \tprivate void setDefaultCompilerOptions()", "diff": ["-", "-\tprivate void findHeader() {", "-\t\tif (this.astRoot instanceof CompilationUnit) {", "-\t\t\tList<TypeDeclaration> types = ((CompilationUnit) this.astRoot).types();", "-\t\t\tif (!types.isEmpty()) {", "-\t\t\t\tint headerEndIndex = this.tokenManager.firstIndexIn(types.get(0), -1);", "-\t\t\t\tthis.tokenManager.setHeaderEndIndex(headerEndIndex);", "-\t\t\t}", "-\t\t}", "-\t}", "+", "+\tprivate void setDefaultCompilerOptions() {", "+\t\tif (this.defaultCompilerOptions ==  null) {", "+\t\t\tMap optionsMap = new HashMap(30);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_LocalVariableAttribute, CompilerOptions.DO_NOT_GENERATE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_LineNumberAttribute, CompilerOptions.DO_NOT_GENERATE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_SourceFileAttribute, CompilerOptions.DO_NOT_GENERATE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_MethodParametersAttribute, CompilerOptions.DO_NOT_GENERATE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.PRESERVE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_DocCommentSupport, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportOverridingMethodWithoutSuperInvocation, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedObjectAllocation, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameter, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedImport, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportNoEffectAssignment, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportNoImplicitStringConversion, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportNonStaticAccessToStatic, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportIndirectStaticAccess, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportIncompatibleNonInheritedInterfaceMethod, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedPrivateMember, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportLocalVariableHiding, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportFieldHiding, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportPossibleAccidentalBooleanAssignment, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportEmptyStatement, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportAssertIdentifier, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportEnumIdentifier, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUndocumentedEmptyBlock, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnnecessaryTypeCheck, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadoc, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadocTagsVisibility, CompilerOptions.PUBLIC);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadocTags, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocTagDescription, CompilerOptions.RETURN_TAG);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadocTagsDeprecatedRef, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportInvalidJavadocTagsNotVisibleRef, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocTags, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocTagsVisibility, CompilerOptions.PUBLIC);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocTagsOverriding, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocComments, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocCommentsVisibility, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMissingJavadocCommentsOverriding, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportFinallyBlockNotCompletingNormally, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedDeclaredThrownException, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionWhenOverriding, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnqualifiedFieldAccess, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_TaskTags, Util.EMPTY_STRING);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_TaskPriorities, Util.EMPTY_STRING);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_TaskCaseSensitive, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameterWhenImplementingAbstract, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedParameterWhenOverridingConcrete, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportSpecialParameterHidingField, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnavoidableGenericTypeProblems, CompilerOptions.ENABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_MaxProblemPerUnit, String.valueOf(100));", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_InlineJsr, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ShareCommonFinallyBlocks, CompilerOptions.DISABLED);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMethodCanBeStatic, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportMethodCanBePotentiallyStatic, CompilerOptions.IGNORE);", "+\t\t\toptionsMap.put(CompilerOptions.OPTION_ReportUnusedTypeParameter, CompilerOptions.IGNORE);", "+\t\t\tthis.defaultCompilerOptions = optionsMap;", "+\t\t}", "+\t\tObject sourceOption = this.options.get(CompilerOptions.OPTION_Source);", "+\t\tif (sourceOption != null) {", "+\t\t\tthis.defaultCompilerOptions.put(CompilerOptions.OPTION_Source, sourceOption);", "+\t\t} else {", "+\t\t\tthis.defaultCompilerOptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);"]}], "num": 64883}
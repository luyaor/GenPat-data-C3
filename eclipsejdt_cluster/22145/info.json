{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "613e2f648cbd3b939d52e8ec93e874c0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76dfa4e05b1600eb16bc2c1f325ab757", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java", "commitBeforeChange": "4a3b8d7f66c815bfc252f4ffc29a63c010eff917", "commitAfterChange": "2eb63d812179e5217306b90a651b95bfe7169c81", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void compile(ICompilationUnit[] sourceUnits)", "signatureAfterChange": " \tpublic void compile(ICompilationUnit[] sourceUnits)", "diff": ["-\t\tint i = 0;", "+\t\tProcessTaskManager processingTask = null;", "-\t\t\t// process all units (some more could be injected in the loop by the lookup environment)", "-\t\t\tfor (; i < this.totalUnits; i++) {", "-\t\t\t\tunit = unitsToProcess[i];", "-\t\t\t\treportProgress(Messages.bind(Messages.compilation_processing, new String(unit.getFileName())));", "-\t\t\t\ttry {", "+", "+\t\t\tif (this.useSingleThread) {", "+\t\t\t\t// process all units (some more could be injected in the loop by the lookup environment)", "+\t\t\t\tfor (int i = 0; i < this.totalUnits; i++) {", "+\t\t\t\t\tunit = unitsToProcess[i];", "+\t\t\t\t\treportProgress(Messages.bind(Messages.compilation_processing, new String(unit.getFileName())));", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tif (options.verbose)", "+\t\t\t\t\t\t\tthis.out.println(", "+\t\t\t\t\t\t\t\tMessages.bind(Messages.compilation_process,", "+\t\t\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\t\t\tString.valueOf(i + 1),", "+\t\t\t\t\t\t\t\t\tString.valueOf(this.totalUnits),", "+\t\t\t\t\t\t\t\t\tnew String(unitsToProcess[i].getFileName())", "+\t\t\t\t\t\t\t\t}));", "+\t\t\t\t\t\tprocess(unit, i);", "+\t\t\t\t\t} finally {", "+\t\t\t\t\t\t// cleanup compilation unit result", "+\t\t\t\t\t\tunit.cleanUp();", "+\t\t\t\t\t}", "+\t\t\t\t\tunitsToProcess[i] = null; // release reference to processed unit declaration", "+\t\t\t\t\t", "+\t\t\t\t\treportWorked(1, i);", "+\t\t\t\t\tthis.stats.lineCount += unit.compilationResult.lineSeparatorPositions.length;", "+\t\t\t\t\tlong acceptStart = System.currentTimeMillis();", "+\t\t\t\t\trequestor.acceptResult(unit.compilationResult.tagAsAccepted());", "+\t\t\t\t\tthis.stats.generateTime += System.currentTimeMillis() - acceptStart; // record accept time as part of generation", "-\t\t\t\t\t\t\tMessages.bind(Messages.compilation_process,", "+\t\t\t\t\t\t\tMessages.bind(Messages.compilation_done,", "-\t\t\t\t\t\t\t\tnew String(unitsToProcess[i].getFileName())", "+\t\t\t\t\t\t\t\tnew String(unit.getFileName())", "-\t\t\t\t\tprocess(unit, i);", "-\t\t\t\t} finally {", "-\t\t\t\t\t// cleanup compilation unit result", "-\t\t\t\t\tunit.cleanUp();", "-\t\t\t\tunitsToProcess[i] = null; // release reference to processed unit declaration", "-\t\t\t\t", "-\t\t\t\treportWorked(1, i);", "-\t\t\t\tthis.stats.lineCount += unit.compilationResult.lineSeparatorPositions.length;", "-\t\t\t\tlong acceptStart = System.currentTimeMillis();", "-\t\t\t\trequestor.acceptResult(unit.compilationResult.tagAsAccepted());", "-\t\t\t\tthis.stats.generateTime += System.currentTimeMillis() - acceptStart; // record accept time as part of generation", "-\t\t\t\tif (options.verbose)", "-\t\t\t\t\tthis.out.println(", "-\t\t\t\t\t\tMessages.bind(Messages.compilation_done,", "-\t\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\t\tString.valueOf(i + 1),", "-\t\t\t\t\t\t\tString.valueOf(this.totalUnits),", "-\t\t\t\t\t\t\tnew String(unit.getFileName())", "-\t\t\t\t\t\t}));", "+\t\t\t} else {", "+\t\t\t\tprocessingTask = new ProcessTaskManager(this);", "+\t\t\t\tint acceptedCount = 0;", "+\t\t\t\t// process all units (some more could be injected in the loop by the lookup environment)", "+\t\t\t\t// the processTask can continue to process units until its fixed sized cache is full then it must wait", "+\t\t\t\t// for this this thread to accept the units as they appear (it only waits if no units are available)", "+\t\t\t\twhile (true) {", "+\t\t\t\t\tunit = processingTask.removeNextUnit(); // waits if no units are in the processed queue", "+\t\t\t\t\tif (unit == null) break;", "+\t\t\t\t\treportWorked(1, acceptedCount++);", "+\t\t\t\t\tthis.stats.lineCount += unit.compilationResult.lineSeparatorPositions.length;", "+\t\t\t\t\trequestor.acceptResult(unit.compilationResult.tagAsAccepted());", "+\t\t\t\t\tif (options.verbose)", "+\t\t\t\t\t\tthis.out.println(", "+\t\t\t\t\t\t\tMessages.bind(Messages.compilation_done,", "+\t\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\t\tString.valueOf(acceptedCount),", "+\t\t\t\t\t\t\t\tString.valueOf(this.totalUnits),", "+\t\t\t\t\t\t\t\tnew String(unit.getFileName())", "+\t\t\t\t\t\t\t}));", "+\t\t\t\t}", "+\t\t\tif (processingTask != null) {", "+\t\t\t\tprocessingTask.shutdown();", "+\t\t\t\tprocessingTask = null;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "826bd0591eced3e5b30214bbb4602db3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "502ac8abc8910137c8c48c0b99f02c92a8a1a0bb", "commitAfterChange": "88902aca029742fa432be78ddccc5cc15b507f75", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tpublic static IPath canonicalizedPath(IPath externalPath)", "signatureAfterChange": "\r \tpublic static IPath canonicalizedPath(IPath externalPath)", "diff": ["+\t\tif (JavaModelManager.VERBOSE) {\r", "+\t\t\tSystem.out.println(\"JAVA MODEL - Canonicalizing \" + externalPath.toString());\r", "+\t\t}\r", "+\r", "+\t\t\tif (JavaModelManager.VERBOSE) {\r", "+\t\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is original path (member of workspace)\");\r", "+\t\t\t}\r", "+\t\t\tif (JavaModelManager.VERBOSE) {\r", "+\t\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is original path (IOException)\");\r", "+\t\t\t}\r", "+\t\t\tif (JavaModelManager.VERBOSE) {\r", "+\t\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is original path (canonical path is empty)\");\r", "+\t\t\t}\r", "+\t\t\t\tif (JavaModelManager.VERBOSE) {\r", "+\t\t\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is original path (canonical path is \" + canonicalPath.toString() + \")\");\r", "+\t\t\t\t}\r", "-\t\t\treturn result.setDevice(null);\r", "-\t\t} else {\r", "-\t\t\treturn result;\r", "+\t\t\tresult = result.setDevice(null);\r", "+\t\t} \r", "+\t\tif (JavaModelManager.VERBOSE) {\r", "+\t\t\tSystem.out.println(\"JAVA MODEL - Canonical path is \" + result.toString());\r", "+\t\treturn result;\r"]}], "num": 22145}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1366a1e88baa26b7ccc5588d3facc9ba", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07b577b3ec6eced25e98232888c70fa0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java", "commitBeforeChange": "b3921c5eea6f0c6a7e0f7e9f7a3a4e8e611961a3", "commitAfterChange": "502bad8ce7c832154fb3a7a8f85a868d7d077253", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["+", "+\t\t\t// check is problem requestor is active", "-\t\t\tif (problemRequestor != null) {", "+\t\t\tif (problemRequestor != null) ", "-\t\t\t}", "+\t\t\tboolean defaultRequestorIsActive = problemRequestor != null && problemRequestor.isActive();", "-\t\t\tthis.resolveBindings |= problemRequestor != null && problemRequestor.isActive();", "+\t\t\tboolean ownerRequestorIsActive = ownerProblemRequestor != null && ownerProblemRequestor != problemRequestor && ownerProblemRequestor.isActive();", "+\t\t\tthis.requestorIsActive = defaultRequestorIsActive || ownerRequestorIsActive;", "-\t\t\tmakeConsistent(workingCopy, problemRequestor);", "+\t\t\tmakeConsistent(workingCopy);", "-\t\t\tif (!wasConsistent || ((this.reconcileFlags & ICompilationUnit.FORCE_PROBLEM_DETECTION) != 0))", "-\t\t\tnotifyParticipants(workingCopy);", "+\t\t\tif (!wasConsistent || ((this.reconcileFlags & ICompilationUnit.FORCE_PROBLEM_DETECTION) != 0)) {", "+\t\t\t\tnotifyParticipants(workingCopy);", "-\t\t\t// recreate ast if needed", "-\t\t\tif (this.ast == null && (this.astLevel > ICompilationUnit.NO_AST || this.resolveBindings))", "-\t\t\t\tmakeConsistent(workingCopy, problemRequestor);", "+\t\t\t\t// recreate ast if one participant reset it", "+\t\t\t\tif (this.ast == null)", "+\t\t\t\t\tmakeConsistent(workingCopy);", "+\t\t\t}", "-\t\t\t\tif (problemRequestor != null) {", "+\t\t\t\tif (defaultRequestorIsActive) {", "-\t\t\t\tif (ownerProblemRequestor != null && ownerProblemRequestor != problemRequestor) {", "+\t\t\t\tif (ownerRequestorIsActive) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d82bdc1daa60edb8f9e3d3302dfdc68f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java", "commitBeforeChange": "20a3b07578a2ebec2d9a0569764e78af37761eaf", "commitAfterChange": "c052d66dbc2732414cdaf446e79eec5da0743843", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\t\tbeginTask(Messages.element_reconciling, 2); ", "-\t", "+\t\t\tbeginTask(Messages.element_reconciling, 2);", "+", "+\t\t\tif (problemRequestor != null) {", "+\t\t\t\tproblemRequestor =  ((JavaModelManager.PerWorkingCopyInfo)problemRequestor).getProblemRequestor();", "+\t\t\t}", "+\t\t\tIProblemRequestor ownerProblemRequestor = this.workingCopyOwner.getProblemRequestor(workingCopy);", "-\t\t\t", "+", "-\t\t\t", "+", "-\t\t\t", "+", "-\t\t\t", "+", "-\t\t", "+", "-\t\t\t\ttry {", "-\t\t\t\t\tproblemRequestor.beginReporting();", "-\t\t\t\t\tfor (Iterator iteraror = this.problems.values().iterator(); iteraror.hasNext();) {", "-\t\t\t\t\t\tCategorizedProblem[] categorizedProblems = (CategorizedProblem[]) iteraror.next();", "-\t\t\t\t\t\tif (categorizedProblems == null) continue;", "-\t\t\t\t\t\tfor (int i = 0, length = categorizedProblems.length; i < length; i++) {", "-\t\t\t\t\t\t\tCategorizedProblem problem = categorizedProblems[i];", "-\t\t\t\t\t\t\tif (JavaModelManager.VERBOSE){", "-\t\t\t\t\t\t\t\tSystem.out.println(\"PROBLEM FOUND while reconciling : \" + problem.getMessage());//$NON-NLS-1$", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (this.progressMonitor != null && this.progressMonitor.isCanceled()) break;", "-\t\t\t\t\t\t\tproblemRequestor.acceptProblem(problem);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} finally {", "-\t\t\t\t\tproblemRequestor.endReporting();", "+\t\t\t\tif (problemRequestor != null) {", "+\t\t\t\t\treportProblems(workingCopy, problemRequestor);", "+\t\t\t\t}", "+\t\t\t\tif (ownerProblemRequestor != null && ownerProblemRequestor != problemRequestor) {", "+\t\t\t\t\treportProblems(workingCopy, ownerProblemRequestor);", "-\t\t\t", "+"]}], "num": 28819}
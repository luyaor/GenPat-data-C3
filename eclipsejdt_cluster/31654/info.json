{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "64f292b8bc10306a2b173813ca219898", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28bbb89abd85a585a0c499c2e4ee037b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "9a8c0b7f51c1a0b9d37b7d38acb4d0261e31390a", "commitAfterChange": "278bd24e5aaae65022c9b0e7c10b22e5ffa034b6", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  \tprivate boolean isValidEdit(OptimizedReplaceEdit edit)", "signatureAfterChange": "  \tprivate boolean isValidEdit(OptimizedReplaceEdit edit)", "diff": ["-\t\t\tif (this.textRegionStart <= editOffset && (editOffset + editLength - 1) <= this.textRegionEnd) {", "+\t\t\t", "+\t\t\tIRegion covering = getCoveringRegion(editOffset, (editOffset + editLength - 1));", "+\t\t\tif (covering != null) {", "-\t\t\t\t} else {", "-\t\t\t\t\treturn true;", "-\t\t\t} else if (editOffset + editLength == this.textRegionStart) {", "+\t\t\t\treturn true;", "+\t\t\t}", "+", "+\t\t\tIRegion starting = getRegionAt(editOffset + editLength);", "+\t\t\tif (starting != null) {", "-\t\t\t\t\tedit.offset = textRegionStart;", "+\t\t\t\t\tedit.offset = starting.getOffset();", "-\t\t} else if (this.textRegionStart <= editOffset && editOffset <= this.textRegionEnd) {", "+\t\t\t", "+\t\t\treturn false;", "+\t\t}", "+\t\t", "+\t\tIRegion covering = getCoveringRegion(editOffset, editOffset);", "+\t\tif (covering != null) {", "-\t\t} else if (editOffset == this.scannerEndPosition && editOffset == this.textRegionEnd + 1) {", "+\t\t}", "+", "+\t\tif (editOffset == this.scannerEndPosition) {", "+\t\t\tint index = Arrays.binarySearch(", "+\t\t\t\tthis.regions,", "+\t\t\t\tnew Region(editOffset, 0),", "+\t\t\t\tnew Comparator() {", "+\t\t\t\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\t\t\t\tIRegion r1 = (IRegion)o1;", "+\t\t\t\t\t\tIRegion r2 = (IRegion)o2;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tint r1End = r1.getOffset() + r1.getLength();", "+\t\t\t\t\t\tint r2End = r2.getOffset() + r2.getLength();", "+\t\t\t\t\t\t", "+\t\t\t\t\t\treturn r1End - r2End;", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\tif (index < 0) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "549de0508076a9f801066c7bba25b902", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "48774e458dcfc41c34b203c6488c7b9a8716e5cc", "commitAfterChange": "6224a5dcda094820e09b86e019ae927259ff3273", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 48, "signatureBeforeChange": "  \tprivate boolean isValidEdit(OptimizedReplaceEdit edit)", "signatureAfterChange": "  \tprivate boolean isMeaningfulEdit(OptimizedReplaceEdit edit)", "diff": ["-\tprivate boolean isValidEdit(OptimizedReplaceEdit edit) {", "+\tprivate boolean isMeaningfulEdit(OptimizedReplaceEdit edit) {", "-\t\tif (editLength != 0) {", "-", "-\t\t\tIRegion covering = getCoveringAdaptedRegion(editOffset, (editOffset + editLength - 1));", "-\t\t\tif (covering != null) {", "-\t\t\t\tif (editReplacementLength != 0 && editLength == editReplacementLength) {", "-\t\t\t\t\tfor (int i = editOffset, max = editOffset + editLength; i < max; i++) {", "-\t\t\t\t\t\tif (this.scanner.source[i] != edit.replacement.charAt(i - editOffset)) {", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\treturn true;", "-\t\t\t}", "-", "-\t\t\tIRegion starting = getAdaptedRegionAt(editOffset + editLength);", "-\t\t\tif (starting != null) {", "-\t\t\t\tint i = editOffset;", "-\t\t\t\tfor (int max = editOffset + editLength; i < max; i++) {", "-\t\t\t\t\tint replacementStringIndex = i - editOffset;", "-\t\t\t\t\tif (replacementStringIndex >= editReplacementLength || this.scanner.source[i] != edit.replacement.charAt(replacementStringIndex)) {", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (i - editOffset != editReplacementLength && i != editOffset + editLength - 1) {", "-\t\t\t\t\tedit.offset = starting.getOffset();", "-\t\t\t\t\tedit.length = 0;", "-\t\t\t\t\tedit.replacement = edit.replacement.substring(i - editOffset);", "+\t\tif (editReplacementLength != 0 && editLength == editReplacementLength) {", "+\t\t\tfor (int i = editOffset, max = editOffset + editLength; i < max; i++) {", "+\t\t\t\tif (this.scanner.source[i] != edit.replacement.charAt(i - editOffset)) {", "-", "-", "-\t\tIRegion covering = getCoveringAdaptedRegion(editOffset, editOffset);", "-\t\tif (covering != null) {", "-\t\t\treturn true;", "-\t\t}", "-", "-\t\tif (editOffset == this.scannerEndPosition) {", "-\t\t\tint index = Arrays.binarySearch(", "-\t\t\t\tthis.adaptedRegions,", "-\t\t\t\tnew Region(editOffset, 0),", "-\t\t\t\tnew Comparator() {", "-\t\t\t\t\tpublic int compare(Object o1, Object o2) {", "-\t\t\t\t\t\tIRegion r1 = (IRegion)o1;", "-\t\t\t\t\t\tIRegion r2 = (IRegion)o2;", "-", "-\t\t\t\t\t\tint r1End = r1.getOffset() + r1.getLength();", "-\t\t\t\t\t\tint r2End = r2.getOffset() + r2.getLength();", "-", "-\t\t\t\t\t\treturn r1End - r2End;", "-\t\t\t\t\t}", "-\t\t\t\t});", "-\t\t\tif (index < 0) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\treturn true;", "-\t\t}", "-\t\treturn false;", "+\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7515991d9bdae1926f7e50f572fd097", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "97881e1f65dad02c5fcba69e18ae3332573c3839", "commitAfterChange": "5ae43aadc33d93b5c6af6a0612729105eee79d4f", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "\t \t \tprivate boolean isValidEdit(OptimizedReplaceEdit edit)", "signatureAfterChange": "\t \t \tprivate boolean isValidEdit(OptimizedReplaceEdit edit)", "diff": ["-\t\tif (editLength != 0 && editReplacementLength != 0 && editLength == editReplacementLength) {", "-\t\t\tfor (int i = editOffset, max = editOffset + editLength; i < max; i++) {", "-\t\t\t\tif (scanner.source[i] != edit.replacement.charAt(i - editOffset)) {", "+\t\tif (editLength != 0) {", "+\t\t\tif (this.textRegionStart <= editOffset && (editOffset + editLength - 1) <= this.textRegionEnd) {", "+\t\t\t\tif (editReplacementLength != 0 && editLength == editReplacementLength) {", "+\t\t\t\t\tfor (int i = editOffset, max = editOffset + editLength; i < max; i++) {", "+\t\t\t\t\t\tif (scanner.source[i] != edit.replacement.charAt(i - editOffset)) {", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\treturn false;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t} else if (editOffset + editLength == this.textRegionStart) {", "+\t\t\t\tint i = editOffset;", "+\t\t\t\tfor (int max = editOffset + editLength; i < max; i++) {", "+\t\t\t\t\tif (scanner.source[i] != edit.replacement.charAt(i - editOffset)) {", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (i == editOffset + editLength - 1) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t} else {", "+\t\t\t\t\tedit.offset = textRegionStart;", "+\t\t\t\t\tedit.length = 0;", "+\t\t\t\t\tedit.replacement = edit.replacement.substring(i - editOffset);", "-\t\t\treturn false;", "-\t\t} else {", "+\t\t} else if (this.textRegionStart <= editOffset && editOffset <= this.textRegionEnd) {", "+\t\treturn false;"]}], "num": 31654}
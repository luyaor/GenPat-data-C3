{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "359266ac95795af7870c1ee64dfe0d17", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07053e004cd0cb0f410efbadcb168577", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "5292c15945b50fef548808f853ce39423b5670f2", "commitAfterChange": "e32dbbc9904e1f7eb4c6e79a7595e742217638b3", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "  \tprivate void printLineComment(int commentStart, int commentEnd)", "signatureAfterChange": "  \tprivate void printLineComment(int commentStart, int commentEnd)", "diff": ["-\t\tthis.numberOfIndentations = this.indentationLevel % this.indentationSize;", "+\t\tthis.numberOfIndentations = this.indentationLevel / this.indentationSize;", "-\t\t\t\tthis.lastNumberOfNewLines++;", "+\t\t\t\tthis.line++;", "+\t\tthis.lastNumberOfNewLines = 0;", "+\t\t\tthis.line++;", "+\t\t\t\t\tthis.line++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f3a972597261e6b0ef0894e84bde153", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "56484abf3afec06a3b2fe9a53e3d4859e1a90d5d", "commitAfterChange": "c98606727e89fdf50e483c7870bb4651b90d6014", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic void addBound(TypeBound bound, LookupEnvironment environment)", "signatureAfterChange": "  \tpublic void addBound(TypeBound bound, LookupEnvironment environment)", "diff": ["-\t\tthree.addBound(bound);", "-\t\t// check if this makes the inference variable instantiated:", "-\t\tTypeBinding typeBinding = bound.right;", "-\t\tif (bound.relation == ReductionResult.SAME && typeBinding.isProperType(true))", "-\t\t\tthree.setInstantiation(typeBinding, variable, environment);", "-\t\tif (bound.right instanceof InferenceVariable) {", "-\t\t\t// for a dependency between two IVs make a note about the inverse bound.", "-\t\t\t// this should be needed to determine IV dependencies independent of direction.", "-\t\t\t// TODO: so far no test could be identified which actually needs it ...", "-\t\t\tInferenceVariable rightIV = (InferenceVariable) bound.right.prototype();", "-\t\t\tthree = this.boundsPerVariable.get(rightIV);", "-\t\t\tif (three == null)", "-\t\t\t\tthis.boundsPerVariable.put(rightIV, (three = new ThreeSets()));", "-\t\t\tif (three.inverseBounds == null)", "-\t\t\t\tthree.inverseBounds = new HashMap<InferenceVariable,TypeBound>();", "-\t\t\tthree.inverseBounds.put(rightIV, bound);", "+\t\tif (three.addBound(bound)) {", "+\t\t\tthis.isIncorporated = false;", "+\t\t\tbound.id = this.id++;", "+\t\t\t// check if this makes the inference variable instantiated:", "+\t\t\tTypeBinding typeBinding = bound.right;", "+\t\t\tif (bound.relation == ReductionResult.SAME && typeBinding.isProperType(true))", "+\t\t\t\tthree.setInstantiation(typeBinding, variable, environment);", "+\t\t\tif (bound.right instanceof InferenceVariable) {", "+\t\t\t\t// for a dependency between two IVs make a note about the inverse bound.", "+\t\t\t\t// this should be needed to determine IV dependencies independent of direction.", "+\t\t\t\t// TODO: so far no test could be identified which actually needs it ...", "+\t\t\t\tInferenceVariable rightIV = (InferenceVariable) bound.right.prototype();", "+\t\t\t\tthree = this.boundsPerVariable.get(rightIV);", "+\t\t\t\tif (three == null)", "+\t\t\t\t\tthis.boundsPerVariable.put(rightIV, (three = new ThreeSets()));", "+\t\t\t\tif (three.inverseBounds == null)", "+\t\t\t\t\tthree.inverseBounds = new HashMap<InferenceVariable,TypeBound>();", "+\t\t\t\tthree.inverseBounds.put(rightIV, bound);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bfca10f5a7786ebd89a96a1ef052178", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "c0d8ddbb4b72e166c7dc81eb807bc47fd1beaa74", "commitAfterChange": "eba08540864c5a072bab6eda44e20e08ad2dd7a0", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic void resolveReceiver()", "signatureAfterChange": "  \tpublic void resolveReceiver()", "diff": ["+\t\t\tthis.receiver = null;", "+\t\t\t\tthis.receiver = null;", "-\t\t}", "-", "-\t\tif (enclosingReceiver != resolvedReceiverType) {", "-\t\t\tthis.scope.problemReporter().illegalTypeForExplicitThis(this.receiver, enclosingReceiver);", "+", "+\t\tif (enclosingReceiver != resolvedReceiverType) {", "+\t\t\tthis.scope.problemReporter().illegalTypeForExplicitThis(this.receiver, enclosingReceiver);", "+\t\t\tthis.receiver = null;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "650c95aa23d82092a9fa9d66358feead", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaWorkspaceScope.java", "commitBeforeChange": "e4f6d0091f68bf4b6ecb46943ad5d4d6a5ce0095", "commitAfterChange": "3a73dbc8d9839c0eb87857ef97f640371d15a626", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void processDelta(IJavaElementDelta delta, int eventType)", "signatureAfterChange": "  public void processDelta(IJavaElementDelta delta, int eventType)", "diff": ["+", "-\tif (this.needsInitialize) return;", "+\tif (this.enclosingPaths == null) return;", "-\t\t\t\t\tthis.needsInitialize = true;", "+\t\t\t\t\tthis.enclosingPaths = null;", "-\t\t\t\t\t\tthis.needsInitialize = true;", "+\t\t\t\t\t\tthis.enclosingPaths = null;", "-\t\t\t\t\tthis.needsInitialize = true;", "+\t\t\t\t\tthis.enclosingPaths = null;", "-\t\t\t\t\t\tthis.needsInitialize = true;", "+\t\t\t\t\t\tthis.enclosingPaths = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cf3a564012144eccdaffecd14312295", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " \tpublic void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t}", "+\t\t// enable enum support ?", "+\t\tif (this.binding.isEnum()) {", "+\t\t\tthis.enumValuesSyntheticfield = this.binding.addSyntheticFieldForEnumValues();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76b4cf7f2285381292cdecb0a97174e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ExceptionAttribute.java", "commitBeforeChange": "2a6fc21e132c7337a2ad9e75a03356551f0e9060", "commitAfterChange": "2f8f6c0c9552d7ebf46ec13ce513e098823a7a4e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tExceptionAttribute(byte[] classFileBytes, IConstantPool constantPool, int offset) throws ClassFormatException", "signatureAfterChange": " \t \tExceptionAttribute(byte[] classFileBytes, IConstantPool constantPool, int offset) throws ClassFormatException", "diff": ["-\t\tthis.exceptionNames = new char[exceptionLength][];", "-\t\tthis.exceptionIndexes = new int[exceptionLength];", "+\t\tthis.exceptionNames = NO_EXCEPTION_NAMES;", "+\t\tthis.exceptionIndexes = NO_EXCEPTION_INDEXES;", "+\t\tif (exceptionLength != 0) {", "+\t\t\tthis.exceptionNames = new char[exceptionLength][];", "+\t\t\tthis.exceptionIndexes = new int[exceptionLength];", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9366f0a1e38e5cdeea50a8cd51e28bcf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "0de5167791884524f72d9d44c10f0e243af65d00", "commitAfterChange": "07ab76f69fbeeb2f2fd54cdf3d01ee69344b9ae0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate void initializeDefaults()", "signatureAfterChange": " \tprivate void initializeDefaults()", "diff": ["-\t\tthis.resolveBindings = false;", "-\t\tthis.ignoreMethodBodies = false;", "+\t\tthis.bits = 0;", "-\t\tthis.partial = false;", "+\t\tthis.classpaths = null;", "+\t\tthis.sourcepaths = null;", "+\t\tthis.sourcepathsEncodings = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6274278dacfa2b91eaedad923d92859", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetCompiler.java", "commitBeforeChange": "16486324218fad60934c025811e59187619168a1", "commitAfterChange": "6b27e4ec47f5e8fc929980b6a223bd25dd98d95d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic CodeSnippetCompiler( \t\tINameEnvironment environment, \t\tIErrorHandlingPolicy policy, \t\tCompilerOptions compilerOptions, \t\tICompilerRequestor requestor, \t\tIProblemFactory problemFactory, \t\tEvaluationContext evaluationContext, \t\tint codeSnippetStart, \t\tint codeSnippetEnd)", "signatureAfterChange": " \tpublic CodeSnippetCompiler(     \t\tINameEnvironment environment,     \t\tIErrorHandlingPolicy policy,     \t\tCompilerOptions compilerOptions,     \t\tICompilerRequestor requestor,     \t\tIProblemFactory problemFactory,     \t\tEvaluationContext evaluationContext,     \t\tint codeSnippetStart,     \t\tint codeSnippetEnd)", "diff": ["-\t\tINameEnvironment environment,", "-\t\tIErrorHandlingPolicy policy,", "-\t\tCompilerOptions compilerOptions,", "-\t\tICompilerRequestor requestor,", "-\t\tIProblemFactory problemFactory,", "-\t\tEvaluationContext evaluationContext,", "-\t\tint codeSnippetStart,", "-\t\tint codeSnippetEnd) {", "+    \t\tINameEnvironment environment,", "+    \t\tIErrorHandlingPolicy policy,", "+    \t\tCompilerOptions compilerOptions,", "+    \t\tICompilerRequestor requestor,", "+    \t\tIProblemFactory problemFactory,", "+    \t\tEvaluationContext evaluationContext,", "+    \t\tint codeSnippetStart,", "+    \t\tint codeSnippetEnd) {", "+\t\tthis.codeSnippetStart = codeSnippetStart;", "+\t\tthis.codeSnippetEnd = codeSnippetEnd;", "+\t\tthis.evaluationContext = evaluationContext;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9787c8cbaa5ecae37bfbb223fa9daaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\t// do nothing", "+\t\tif (!flowInfo.isReachable()) return;", "+", "+\t\t// if constructor from parameterized type got found, use the original constructor at codegen time", "+\t\tthis.codegenBinding = this.binding.original();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3ab54f8d83c0a63a686c5993ae8407a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "c79bfbeb67e4687c48de7885eb121ce1ea14c01f", "commitAfterChange": "ff61aa704b87289ea0c126beac8453107bd32bdf", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "signatureAfterChange": " \tprivate Object parseArguments(Object receiver) throws InvalidInputException", "diff": ["+\t\t\t\tif (this.abort) return null; // May be aborted by specialized parser", "+\t\t\t\tif (this.abort) return null; // May be aborted by specialized parser", "+\t\t\t\tif (this.abort) return null; // May be aborted by specialized parser"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d800ea33b3f44d3a13df7df08e679326", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "f6b16290d9141509dffddf2d9dc5a88115698e2a", "commitAfterChange": "16151d07e4904ee08ac48f6566d670b6d78a3084", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tLambdaExpression.this.shapeAnalysisComplete = true;", "+\t\t\t\tthis.shapeAnalysisComplete = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dce400d102c2073deeef3ef7e0a1da47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "a337a67d07e229d2e8a590edfef8bdffb92e4516", "commitAfterChange": "f0baa4687c4b232261eab4264c1bc16ee1b49e9d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+        this.freeParameters = descriptorParameters;", "+        \t\tthis.freeParameters = parameters;", "+        \t// TODO: simplify by using this.freeParameters?", "+        this.freeParameters = null; // not used after method lookup"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2a8249d7c0a13702d0a375b623652b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/MemoryIndex.java", "commitBeforeChange": "b47bafb9e7d77843b8155ceeae86e8c635a464b8", "commitAfterChange": "08156cfc79f23b49be764df235698ffd6b9cb69d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " void remove(String documentName)", "signatureAfterChange": " void remove(String documentName)", "diff": ["+\tif (documentName.equals(this.lastDocumentName)) {", "+\t\tthis.lastDocumentName = null;", "+\t\tthis.lastReferenceTable = null;", "+\t}"]}], "num": 50294}
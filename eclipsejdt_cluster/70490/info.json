{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "61968af66ce6fabac7c2617551f855d1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14a6415dd264b1b16b8338e3f761afcc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "119ab5f40e72a2e48985fa6b9f7f154cd8ab7391", "commitAfterChange": "8f964ebcfbbe015096db590c4a751ad5a6ca4f58", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, boolean leftIsCast, Expression right, int rightTypeId, boolean rightIsCast)", "signatureAfterChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, int operator, int operatorSignature, Expression left, int leftTypeId, boolean leftIsCast, Expression right, int rightTypeId, boolean rightIsCast)", "diff": ["-\t\t\t\t}\t", "+\t\t\t\t} else if (alternateLeftTypeId == T_null) {", "+\t\t\t\t\talternateLeftTypeId = leftTypeId;  // tolerate null argument cast", "+\t\t\t\t\tleftIsCast = false;", "+\t\t\t\t}", "+\t\t\t\t} else if (alternateRightTypeId == T_null) {", "+\t\t\t\t\talternateRightTypeId = rightTypeId;  // tolerate null argument cast", "+\t\t\t\t\trightIsCast = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a59f761844bc72782b61bd589c74813c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "251976e8fad9ff65049e5f83ba04649db3c182a3", "commitAfterChange": "56cb67c43913b7625a25f749d61b904524d06107", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic static final boolean match( \t\tchar[] pattern, \t\tint patternStart, \t\tint patternEnd, \t\tchar[] name, \t\tint nameStart, \t\tint nameEnd, \t\tboolean isCaseSensitive)", "signatureAfterChange": " \tpublic static final boolean match( \t\tchar[] pattern, \t\tint patternStart, \t\tint patternEnd, \t\tchar[] name, \t\tint nameStart, \t\tint nameEnd, \t\tboolean isCaseSensitive)", "diff": ["-\t\tcheckSegment : while (iName < nameEnd && iPattern < patternEnd) {", "+\t\tcheckSegment : while (iName < nameEnd) {", "+\t\t\tif (iPattern == patternEnd) {", "+\t\t\t\tiPattern = segmentStart; // mismatch - restart current segment", "+\t\t\t\tiName = ++prefixStart;", "+\t\t\t\tcontinue checkSegment;", "+\t\t\t}", "+\t\t\t\tif (segmentStart == patternEnd) {", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "-\t\t\t/* chech current name character */", "-\t\t\tif ((isCaseSensitive", "-\t\t\t\t? name[iName]", "-\t\t\t\t: Character.toLowerCase(name[iName]))", "-\t\t\t\t!= patternChar", "-\t\t\t\t&& patternChar != '?') {", "+\t\t\t/* check current name character */", "+\t\t\tif ((isCaseSensitive ? name[iName] : Character.toLowerCase(name[iName]))", "+\t\t\t\t\t\t!= patternChar", "+\t\t\t\t\t&& patternChar != '?') {"]}], "num": 70490}
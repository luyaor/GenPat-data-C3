{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d06f106d8fd230f07f619483f7bdde6", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "195c34357be44d0b7e24ae5f3c6d2bc0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IfStatement.java", "commitBeforeChange": "e18b8152863f75de59815219afe0ab3ec946a798", "commitAfterChange": "5333a8d6e234b4d5bbcbee365cfa39aafade1032", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\tboolean reportDeadCodeForKnownPattern = !isKnowDeadCodePattern(this.condition) || currentScope.compilerOptions().reportDeadCodeInTrivialIfStatement;", "-\t\t\tif (!isKnowDeadCodePattern(this.condition) || currentScope.compilerOptions().reportDeadCodeInTrivialIfStatement) {", "+\t\t\tif (reportDeadCodeForKnownPattern) {", "-\t\t\tif (!isKnowDeadCodePattern(this.condition) || currentScope.compilerOptions().reportDeadCodeInTrivialIfStatement) {", "+\t\t\tif (reportDeadCodeForKnownPattern) {", "-\t\tthis);", "+\t\tthis,", "+\t\treportDeadCodeForKnownPattern);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31a6791a8728c63d52fd870a560eae8a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "e749248b2d171474b4cec0b274f15c474b2172fa", "commitAfterChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": " public void generateSyntheticOuterArgumentValues(BlockScope currentScope, ReferenceBinding targetType, AstNode invocationSite)", "signatureAfterChange": " public void generateSyntheticOuterArgumentValues(BlockScope currentScope, ReferenceBinding targetType, AstNode invocationSite)", "diff": ["-\t\t\tVariableBinding[] emulationPath = currentScope.getEmulationPath(syntheticArguments[i].actualOuterLocalVariable);", "-\t\t\tif (emulationPath == null) {", "-\t\t\t\t// could not emulate a path to a given outer local variable (internal error)", "-\t\t\t\tcurrentScope.problemReporter().needImplementation();", "-\t\t\t} else {", "-\t\t\t\tthis.generateOuterAccess(emulationPath, invocationSite, currentScope);", "-\t\t\t}", "+\t\t\tLocalVariableBinding targetVariable = syntheticArguments[i].actualOuterLocalVariable;", "+\t\t\tVariableBinding[] emulationPath = currentScope.getEmulationPath(targetVariable);", "+\t\t\tthis.generateOuterAccess(emulationPath, invocationSite, targetVariable, currentScope);"]}], "num": 21073}
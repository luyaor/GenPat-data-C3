{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a6e5593b77467c2b0e01ec4f74dbbc3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2030005bc02621bb1d1ee33662e834c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 260, "methodNumberAfterChange": 260, "signatureBeforeChange": " public void recoveryTokenCheck()", "signatureAfterChange": " public void recoveryTokenCheck()", "diff": ["-\tswitch (currentToken) {", "+\tswitch (this.currentToken) {", "-\t\t\tif(!ignoreNextOpeningBrace) {", "-\t\t\t\tnewElement = currentElement.updateOnOpeningBrace(scanner.startPosition - 1, scanner.currentPosition - 1);", "+\t\t\tif(!this.ignoreNextOpeningBrace) {", "+\t\t\t\tnewElement = this.currentElement.updateOnOpeningBrace(this.scanner.startPosition - 1, this.scanner.currentPosition - 1);", "-\t\t\tlastCheckPoint = scanner.currentPosition;\t\t\t\t", "+\t\t\tthis.lastCheckPoint = this.scanner.currentPosition;\t\t\t\t", "-\t\t\t\trestartRecovery = true; // opening brace detected", "-\t\t\t\tcurrentElement = newElement;", "+\t\t\t\tthis.restartRecovery = true; // opening brace detected", "+\t\t\t\tthis.currentElement = newElement;", "-\t\t\tthis.rBraceStart = scanner.startPosition - 1;", "-\t\t\tthis.rBraceEnd = scanner.currentPosition - 1;", "-\t\t\tendPosition = this.flushCommentsDefinedPriorTo(this.rBraceEnd);", "+\t\t\tthis.rBraceStart = this.scanner.startPosition - 1;", "+\t\t\tthis.rBraceEnd = this.scanner.currentPosition - 1;", "+\t\t\tthis.endPosition = this.flushCommentsDefinedPriorTo(this.rBraceEnd);", "-\t\t\t\tcurrentElement.updateOnClosingBrace(scanner.startPosition, this.rBraceEnd);", "-\t\t\t\tlastCheckPoint = scanner.currentPosition;", "-\t\t\tif (newElement != currentElement){", "-\t\t\t\tcurrentElement = newElement;", "+\t\t\t\tthis.currentElement.updateOnClosingBrace(this.scanner.startPosition, this.rBraceEnd);", "+\t\t\t\tthis.lastCheckPoint = this.scanner.currentPosition;", "+\t\t\tif (newElement != this.currentElement){", "+\t\t\t\tthis.currentElement = newElement;", "-\t\t\tendStatementPosition = scanner.currentPosition - 1;", "-\t\t\tendPosition = scanner.startPosition - 1; ", "+\t\t\tthis.endStatementPosition = this.scanner.currentPosition - 1;", "+\t\t\tthis.endPosition = this.scanner.startPosition - 1; ", "-\t\t\tif (this.rBraceEnd > this.rBraceSuccessorStart && scanner.currentPosition != scanner.startPosition){", "-\t\t\t\tthis.rBraceSuccessorStart = scanner.startPosition;", "+\t\t\tif (this.rBraceEnd > this.rBraceSuccessorStart && this.scanner.currentPosition != this.scanner.startPosition){", "+\t\t\t\tthis.rBraceSuccessorStart = this.scanner.startPosition;", "-\tignoreNextOpeningBrace = false;", "+\tthis.ignoreNextOpeningBrace = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77718f52a935ea18626ca7c08fc9ad5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "0f7f9d63e5fbc5d41771bd4e2e39b628130add76", "commitAfterChange": "ed4cdf5cf5dec0284dce12a661248f2f9a27a709", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "  \tprivate int printJavadocBlockNodesNewLines(FormatJavadocBlock block, FormatJavadocNode node, int previousEnd)", "signatureAfterChange": "  \tprivate int printJavadocBlockNodesNewLines(FormatJavadocBlock block, FormatJavadocNode node, int previousEnd)", "diff": ["-\t    \tint tokenLength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t    \tint length = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t\t\t\tint firstColumn = 1 + this.indentationLevel + BLOCK_LINE_PREFIX_LENGTH;", "+\t\t\t\tif (headerLine) firstColumn++;", "-\t\t\t\t\tint firstColumn = 1 + this.indentationLevel + BLOCK_LINE_PREFIX_LENGTH;", "-\t\t\t\t\tif (headerLine) firstColumn++;", "-\t\t\t    \t\ttokenLength++; // include space between nodes", "+\t\t\t    \t\tlength++; // include space between nodes", "-    \t\t\t\tint col = this.column + tokenLength;", "+    \t\t\t\tint col = this.column + length;", "-\t    \t\t\t\t\t\ttokenLength = 1;", "+\t    \t\t\t\t\t\tlength = 1;", "-\t    \t\t\t\t\t\ttokenLength = 1;", "+\t    \t\t\t\t\t\tlength = 1;", "-\t\t\t\t    \t\t\ttokenLength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t\t\t\t    \t\t\tlength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "-\t    \t\t\t\tcol += tokenLength;", "+\t    \t\t\t\tcol += length;", "-\t    \t\t\t\ttokenLength++;", "+\t    \t\t\t\tlength++;", "-\t    \t\t\ttokenLength += (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t    \t\t\tlength += (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "-\t    \t\t\ttokenLength++;", "+\t    \t\t\tlength++;", "-\t\t    \t\t\ttokenLength += (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t\t    \t\t\tint tokenLength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - this.scanner.startPosition;", "+\t\t    \t\t\tif ((firstColumn + length + tokenLength) >= maxColumn) {", "+\t\t    \t\t\t\tbreak;", "+\t\t    \t\t\t}", "+\t\t    \t\t\tlength += tokenLength;", "-\t    \t\ttokenLength += inlinedBlock.tagEnd - inlinedBlock.sourceStart + 1;", "+\t    \t\tlength += inlinedBlock.tagEnd - inlinedBlock.sourceStart + 1;", "-\t    \t\ttokenLength++; // include space between nodes", "+\t    \t\tlength++; // include space between nodes", "-\t\t\tif ((this.column + tokenLength) > maxColumn) {", "+\t\t\tif ((this.column + length) > maxColumn) {"]}], "num": 26156}
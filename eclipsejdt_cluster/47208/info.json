{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c938526282af079db7370609e129e305", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e7a20bb76ec745d335f92507824305d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateImportOperation.java", "commitBeforeChange": "90d481edc9060cc498a8f085b08186108312e37b", "commitAfterChange": "f3a3c06f6e68ab7680c250209b9759ac3d56fec6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected IDOMNode generateElementDOM()", "signatureAfterChange": " protected ASTNode generateElementAST(ASTRewrite rewriter, IDocument document, ICompilationUnit cu) throws JavaModelException", "diff": ["-// TODO - JDOM - remove once model ported off of JDOM", "-protected IDOMNode generateElementDOM() {", "-\tif (fCUDOM.getChild(fImportName) == null) {", "-\t\tDOMFactory factory = new DOMFactory();", "-\t\t//not a duplicate", "-\t\tIDOMImport imp = factory.createImport();", "-\t\timp.setName(fImportName);", "-\t\treturn imp;", "+}", "+protected ASTNode generateElementAST(ASTRewrite rewriter, IDocument document, ICompilationUnit cu) throws JavaModelException {", "+\t// ensure no duplicate", "+\tIterator imports = this.cuAST.imports().iterator();", "+\twhile (imports.hasNext()) {", "+\t\tImportDeclaration importDeclaration = (ImportDeclaration) imports.next();", "+\t\tif (this.importName.equals(importDeclaration.getName().getFullyQualifiedName())) {", "+\t\t\t//no new import was generated", "+\t\t\tthis.creationOccurred = false;", "+\t\t\treturn null;", "+\t\t}", "-\t//no new import was generated", "-\tfCreationOccurred = false;", "-\t//all the work has already been done", "-\treturn null;", "+\tAST ast = this.cuAST.getAST();", "+\tImportDeclaration importDeclaration = ast.newImportDeclaration();", "+\tName name = ast.newName(new String[] {this.importName});", "+\timportDeclaration.setName(name);", "+\treturn importDeclaration;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6117d706325b38fade46de10d4cf8290", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "790443c8ea7a17aa25cb0c35c01196da99d52e04", "commitAfterChange": "d7ed279f5216d32337e674d05a19fd9c56f52744", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static String serializeProcessorOptions(Map<String, String> options)", "signatureAfterChange": "     public static void setProcessorOptions(Map<String, String> options, IJavaProject jproj)", "diff": ["+     */", "+    public static void setProcessorOptions(Map<String, String> options, IJavaProject jproj) {", "+\t\tIScopeContext context = (null != jproj) ? ", "+\t\t\t\tnew ProjectScope(jproj.getProject()) : new InstanceScope();", "+", "+    \t// TODO: this call is needed only for backwards compatibility with", "+\t    // settings files previous to 2005.11.13.  At some point it should be", "+\t    // removed.", "+    \tremoveOldStyleSettings(context);", "+", "+\t\tIEclipsePreferences node = context.getNode(AptPlugin.PLUGIN_ID + \"/\" +  //$NON-NLS-1$", "+\t\t\t\tAptPreferenceConstants.APT_PROCESSOROPTIONS);", "+\t\ttry {", "+\t\t\tnode.clear();", "+\t\t\tfor (Entry<String, String> option : options.entrySet()) {", "+\t\t\t\tString nonNullVal = option.getValue() == null ? ", "+\t\t\t\t\t\tAptPreferenceConstants.APT_NULLVALUE : option.getValue();", "+\t\t\t\tnode.put(option.getKey(), nonNullVal);", "+\t\t\t}", "+\t\t\tnode.flush();", "+\t\t} catch (BackingStoreException e) {", "+\t\t\tAptPlugin.log(e, \"Unable to save annotation processor options\"); //$NON-NLS-1$", "+\t\t}", "+    }", "-     */", "-    public static String serializeProcessorOptions(Map<String, String> options) {", "-    \tStringBuilder sb = new StringBuilder();", "-    \tboolean firstEntry = true;", "-    \tfor (Map.Entry<String, String> entry : options.entrySet()) {", "-    \t\tif (firstEntry) {", "-    \t\t\tfirstEntry = false;", "-        \t\tsb.append(\"-A\"); //$NON-NLS-1$", "-    \t\t}", "-    \t\telse {", "-    \t\t\tsb.append(\" -A\"); //$NON-NLS-1$", "-    \t\t}", "-    \t\tsb.append(entry.getKey());", "-    \t\tif (entry.getValue() != null) {", "-    \t\t\tsb.append(\"=\"); //$NON-NLS-1$", "-    \t\t\tsb.append(entry.getValue());", "-    \t\t}", "-    \t}", "-    \treturn sb.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3c675d40bc00f2939ad7cb8bb31e4f8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "a0fd6dae6dbb696f05ef352cad9852f287a5aeec", "commitAfterChange": "3f1cbb254c604c7416bb668e3ca0c2f6d90b8afc", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprivate BoundSet resolve() throws InferenceFailureException", "signatureAfterChange": " \tprivate BoundSet resolve() throws InferenceFailureException", "diff": ["-\t\t\t\t\t\t// FIXME: remove capture bounds", "+\t\t\t\t\t\tIterator captureKeys = tmpBoundSet.captures.keySet().iterator();", "+\t\t\t\t\t\tSet toRemove = new HashSet();", "+\t\t\t\t\t\twhile (captureKeys.hasNext()) {", "+\t\t\t\t\t\t\tParameterizedTypeBinding key = (ParameterizedTypeBinding) captureKeys.next();", "+\t\t\t\t\t\t\tint len = key.arguments.length;", "+\t\t\t\t\t\t\tfor (int i = 0; i < len; i++) {", "+\t\t\t\t\t\t\t\tif (key.arguments[i] == variable) { //$IDENTITY-COMPARISON$", "+\t\t\t\t\t\t\t\t\ttoRemove.add(key);", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcaptureKeys = toRemove.iterator();", "+\t\t\t\t\t\twhile (captureKeys.hasNext())", "+\t\t\t\t\t\t\ttmpBoundSet.captures.remove(captureKeys.next());"]}], "num": 47208}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee70d863a672de501e0b7ede5c09a25b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "650a3049b6c0bcb81be9eb4a35680dbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/WordEntry.java", "commitBeforeChange": "86c0998ef29b474a684674fa5580f5b7a3b354ab", "commitAfterChange": "d3a75dd70755d47455161cad3e4a366e8ddf8ed2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tpublic int addRef(int fileNum)", "signatureAfterChange": "\r \tpublic int addRef(int fileNum)", "diff": ["-\t\tint footprintDelta= 0;\r", "-\t\tif (fRefs.length == 0)\r", "-\t\t\tfRefs= new int[20];\r", "-\t\tif (fNumRefs == fRefs.length) {\r", "-\t\t\tfootprintDelta= fRefs.length * 4;\r", "-\t\t\tint[] newRefs= new int[fRefs.length * 2];\r", "-\t\t\tSystem.arraycopy(fRefs, 0, newRefs, 0, fRefs.length);\r", "-\t\t\tfRefs= newRefs;\r", "-\t\t}\r", "+\t\tif (fNumRefs < fRefs.length) {\r", "+\t\t\tfRefs[fNumRefs++]= fileNum;\r", "+\t\t\treturn 0;\r", "+\t\t} \r", "+\r", "+\t\t// For rt.jar, 73265 word entries are created. 51997 have 1 ref, then 9438, 3738, 1980, 1214, 779, 547, 429, 371 etc.\r", "+\t\tint newSize= fNumRefs < 4 ? 4 : fNumRefs * 2; // so will start @ 1, grow to 4, 8, 16, 32, 64 etc.\r", "+\t\tSystem.arraycopy(fRefs, 0, fRefs= new int[newSize], 0, fNumRefs);\r", "-\t\treturn footprintDelta;\r", "+\t\treturn (newSize - fNumRefs + 1) * 4;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81d5327bb47531e908b92e26bf5379a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "562f566c1c2b8bfedaad7117a5b53ae2f781bec9", "commitAfterChange": "b11449e69404728ca4b19e3cce8d08756ffe4f52", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": " \tpublic final static char[][] splitTypeLevelsSignature(String uniqueKey)", "signatureAfterChange": " \tpublic final static char[][] splitTypeLevelsSignature(String typeSignature)", "diff": ["-\tpublic final static char[][] splitTypeLevelsSignature(String uniqueKey) {", "+\tpublic final static char[][] splitTypeLevelsSignature(String typeSignature) {", "-\t\tchar[] source = uniqueKey.replace('$','.').toCharArray();", "+\t\tchar[] source = typeSignature.replace('$','.').toCharArray();", "-\t\tint[] lengthes = new int [10];", "+//\t\tint[] lengthes = new int [10];", "-\t\t\t\t\t\tif (signaturesCount == lengthes.length) {", "+\t\t\t\t\t\tif (signaturesCount == signatures.length) {", "-\t\t\t\t\t\t\tSystem.arraycopy(lengthes, 0, lengthes = new int[signaturesCount+10], 0, signaturesCount);", "+//\t\t\t\t\t\t\tSystem.arraycopy(lengthes, 0, lengthes = new int[signaturesCount+10], 0, signaturesCount);", "-\t\t\t\t\t\tlengthes[signaturesCount] = typeArgsCount;", "+//\t\t\t\t\t\tlengthes[signaturesCount] = typeArgsCount;", "-\t\t\t\t\t\tif (signaturesCount == lengthes.length) {", "+\t\t\t\t\t\tif (signaturesCount == signatures.length) {", "-\t\t\t\t\t\t\tSystem.arraycopy(lengthes, 0, lengthes = new int[signaturesCount+10], 0, signaturesCount);", "+//\t\t\t\t\t\t\tSystem.arraycopy(lengthes, 0, lengthes = new int[signaturesCount+10], 0, signaturesCount);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c15e41f8e11dc796eac70e7bb00d61bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "3f94b4fc51205d2abd8631c1b4ac72d7bd836d3a", "commitAfterChange": "afba21845cad9d839243a0cb676a98bc6dff8192", "methodNumberBeforeChange": 439, "methodNumberAfterChange": 439, "signatureBeforeChange": " protected void pushIdentifier(int flag)", "signatureAfterChange": " protected void pushIdentifier()", "diff": ["+protected void pushIdentifier() {", "+\t/*push the consumeToken on the identifier stack.", "+\tIncrease the total number of identifier in the stack.", "+\tidentifierPtr points on the next top */", "+", "+\tpushIdentifier(this.scanner.getCurrentIdentifierSource(), (((long) this.scanner.startPosition) << 32) + (this.scanner.currentPosition - 1));", "+}"]}], "num": 45449}
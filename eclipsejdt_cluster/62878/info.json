{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "272d1276a28472b849c45445489f77ae", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33eeb215908db84f42c32b1ab21d7054", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "signatureAfterChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "diff": ["-\tif (binding.canBeSeenBy(receiverType, this, currentScope)) {", "+\tif (this.binding.canBeSeenBy(this.receiverType, this, currentScope)) {", "-\t\tboolean isStatic = binding.isStatic();", "+\t\tboolean isStatic = this.binding.isStatic();", "-\t\tif (!isStatic && ((bits & DepthMASK) != 0)) {", "+\t\tif (!isStatic && ((this.bits & DepthMASK) != 0)) {", "-\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "+\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((this.bits & DepthMASK) >> DepthSHIFT);", "-\t\t\treceiver.generateCode(currentScope, codeStream, !isStatic);", "+\t\t\tthis.receiver.generateCode(currentScope, codeStream, !isStatic);", "-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "-\t\t\t\targuments[i].generateCode(currentScope, codeStream, true);", "+\t\tif (this.arguments != null) {", "+\t\t\tfor (int i = 0, max = this.arguments.length; i < max; i++) {", "+\t\t\t\tthis.arguments[i].generateCode(currentScope, codeStream, true);", "-\t\t\tcodeStream.invokestatic(binding);", "+\t\t\tcodeStream.invokestatic(this.binding);", "-\t\t\tif (receiver.isSuper()) {", "-\t\t\t\tcodeStream.invokespecial(binding);", "+\t\t\tif (this.receiver.isSuper()) {", "+\t\t\t\tcodeStream.invokespecial(this.binding);", "-\t\t\t\tif (binding.declaringClass.isInterface()) {", "-\t\t\t\t\tcodeStream.invokeinterface(binding);", "+\t\t\t\tif (this.binding.declaringClass.isInterface()) {", "+\t\t\t\t\tcodeStream.invokeinterface(this.binding);", "-\t\t\t\t\tcodeStream.invokevirtual(binding);", "+\t\t\t\t\tcodeStream.invokevirtual(this.binding);", "-\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForMethod(currentScope, binding);", "+\t\t((CodeSnippetCodeStream) codeStream).generateEmulationForMethod(currentScope, this.binding);", "-\t\tboolean isStatic = binding.isStatic();", "+\t\tboolean isStatic = this.binding.isStatic();", "-\t\tif (!isStatic && ((bits & DepthMASK) != 0)) {", "+\t\tif (!isStatic && ((this.bits & DepthMASK) != 0)) {", "-\t\t\treceiver.generateCode(currentScope, codeStream, !isStatic);", "+\t\t\tthis.receiver.generateCode(currentScope, codeStream, !isStatic);", "-\t\tif (arguments != null) {", "-\t\t\tint argsLength = arguments.length;", "+\t\tif (this.arguments != null) {", "+\t\t\tint argsLength = this.arguments.length;", "-\t\t\t\targuments[i].generateCode(currentScope, codeStream, true);", "-\t\t\t\tTypeBinding parameterBinding = binding.parameters[i];", "+\t\t\t\tthis.arguments[i].generateCode(currentScope, codeStream, true);", "+\t\t\t\tTypeBinding parameterBinding = this.binding.parameters[i];", "-\t\t\t\t\t((CodeSnippetCodeStream)codeStream).generateObjectWrapperForType(binding.parameters[i]);", "+\t\t\t\t\t((CodeSnippetCodeStream)codeStream).generateObjectWrapperForType(this.binding.parameters[i]);", "-\t\tif (binding.returnType.isBaseType()) {", "-\t\t\tint typeID = binding.returnType.id;", "+\t\tif (this.binding.returnType.isBaseType()) {", "+\t\t\tint typeID = this.binding.returnType.id;", "-\t\t\tcodeStream.checkcast(binding.returnType);", "+\t\t\tcodeStream.checkcast(this.binding.returnType);", "-\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "-\t\tswitch (binding.returnType.id) {", "+\t\tswitch (this.binding.returnType.id) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a9c72288201c0db8fd3f74f7f02731e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 222, "methodNumberAfterChange": 222, "signatureBeforeChange": " public void initialize()", "signatureAfterChange": " public void initialize()", "diff": ["-\tastPtr = -1;", "-\tastLengthPtr = -1;", "-\texpressionPtr = -1;", "-\texpressionLengthPtr = -1;", "-\tidentifierPtr = -1;\t", "-\tidentifierLengthPtr\t= -1;", "-\tintPtr = -1;", "-\tnestedMethod[nestedType = 0] = 0; // need to reset for further reuse", "-\tvariablesCounter[nestedType] = 0;", "-\tdimensions = 0 ;", "-\trealBlockPtr = -1;", "-\tcompilationUnit = null;", "-\treferenceContext = null;", "-\tendStatementPosition = 0;", "+\tthis.astPtr = -1;", "+\tthis.astLengthPtr = -1;", "+\tthis.expressionPtr = -1;", "+\tthis.expressionLengthPtr = -1;", "+\tthis.identifierPtr = -1;\t", "+\tthis.identifierLengthPtr\t= -1;", "+\tthis.intPtr = -1;", "+\tthis.nestedMethod[this.nestedType = 0] = 0; // need to reset for further reuse", "+\tthis.variablesCounter[this.nestedType] = 0;", "+\tthis.dimensions = 0 ;", "+\tthis.realBlockPtr = -1;", "+\tthis.compilationUnit = null;", "+\tthis.referenceContext = null;", "+\tthis.endStatementPosition = 0;", "-\tint astLength = astStack.length;", "-\tif (noAstNodes.length < astLength){", "-\t\tnoAstNodes = new ASTNode[astLength];", "+\tint astLength = this.astStack.length;", "+\tif (this.noAstNodes.length < astLength){", "+\t\tthis.noAstNodes = new ASTNode[astLength];", "-\tSystem.arraycopy(noAstNodes, 0, astStack, 0, astLength);", "+\tSystem.arraycopy(this.noAstNodes, 0, this.astStack, 0, astLength);", "-\tint expressionLength = expressionStack.length;", "-\tif (noExpressions.length < expressionLength){", "-\t\tnoExpressions = new Expression[expressionLength];", "+\tint expressionLength = this.expressionStack.length;", "+\tif (this.noExpressions.length < expressionLength){", "+\t\tthis.noExpressions = new Expression[expressionLength];", "-\tSystem.arraycopy(noExpressions, 0, expressionStack, 0, expressionLength);", "+\tSystem.arraycopy(this.noExpressions, 0, this.expressionStack, 0, expressionLength);", "-\tscanner.commentPtr = -1;", "-\tscanner.foundTaskCount = 0;", "-\tscanner.eofPosition = Integer.MAX_VALUE;", "-\tscanner.wasNonExternalizedStringLiteral = false;", "-\tscanner.nonNLSStrings = null;", "-\tscanner.currentLine = null;\t", "+\tthis.scanner.commentPtr = -1;", "+\tthis.scanner.foundTaskCount = 0;", "+\tthis.scanner.eofPosition = Integer.MAX_VALUE;", "+\tthis.scanner.wasNonExternalizedStringLiteral = false;", "+\tthis.scanner.nonNLSStrings = null;", "+\tthis.scanner.currentLine = null;\t", "-\tlastCheckPoint = -1;", "-\tcurrentElement = null;", "-\trestartRecovery = false;", "-\thasReportedError = false;", "-\trecoveredStaticInitializerStart = 0;", "-\tlastIgnoredToken = -1;", "-\tlastErrorEndPosition = -1;", "-\tlistLength = 0;", "+\tthis.lastCheckPoint = -1;", "+\tthis.currentElement = null;", "+\tthis.restartRecovery = false;", "+\tthis.hasReportedError = false;", "+\tthis.recoveredStaticInitializerStart = 0;", "+\tthis.lastIgnoredToken = -1;", "+\tthis.lastErrorEndPosition = -1;", "+\tthis.listLength = 0;", "-\trBraceStart = 0;", "-\trBraceEnd = 0;", "-\trBraceSuccessorStart = 0;", "+\tthis.rBraceStart = 0;", "+\tthis.rBraceEnd = 0;", "+\tthis.rBraceSuccessorStart = 0;"]}], "num": 62878}
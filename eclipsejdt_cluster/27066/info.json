{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d54e86d8d39e125b339e251931d42d1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ed96579598d2d5f507a5d2540c5989b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "618f3771c49dbf9480ae16a58263680af2b36ad6", "commitAfterChange": "7cfc4523cdcfe787f1d0d2fd75b08c06e5b4b089", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate TypeReference parseQualifiedName(boolean reset) throws InvalidInputException", "signatureAfterChange": " \tprotected Object createTypeReference(int primitiveToken)", "diff": ["-\tprivate TypeReference parseQualifiedName(boolean reset) throws InvalidInputException {", "-", "-\t\t// Reset identifier stack if requested", "-\t\tif (reset) {", "-\t\t\tthis.identifierPtr = -1;", "-\t\t\tthis.identifierLengthPtr = -1;", "-\t\t}", "-", "-\t\t// Scan tokens", "-\t\tnextToken : for (int iToken = 0; ; iToken++) {", "-\t\t\tint token = readToken();", "-\t\t\tswitch (token) {", "-\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "-\t\t\t\t\tif (((iToken % 2) > 0)) { // identifiers must be odd tokens", "-\t\t\t\t\t\tbreak nextToken;", "-\t\t\t\t\t}", "-\t\t\t\t\tpushIdentifier(iToken == 0);", "-\t\t\t\t\tconsumeToken();", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase TerminalTokens.TokenNameDOT :", "-\t\t\t\t\tif ((iToken % 2) == 0) { // dots must be even tokens", "-\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\t}", "-\t\t\t\t\tconsumeToken();", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase TerminalTokens.TokenNamevoid :", "-\t\t\t\tcase TerminalTokens.TokenNameboolean :", "-\t\t\t\tcase TerminalTokens.TokenNamebyte :", "-\t\t\t\tcase TerminalTokens.TokenNamechar :", "-\t\t\t\tcase TerminalTokens.TokenNamedouble :", "-\t\t\t\tcase TerminalTokens.TokenNamefloat :", "-\t\t\t\tcase TerminalTokens.TokenNameint :", "-\t\t\t\tcase TerminalTokens.TokenNamelong :", "-\t\t\t\tcase TerminalTokens.TokenNameshort :", "-\t\t\t\t\tif (iToken > 0) {", "-\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\t}", "-\t\t\t\t\tpushIdentifier(true);", "-\t\t\t\t\tconsumeToken();", "-\t\t\t\t\tbreak nextToken;", "-", "-\t\t\t\tdefault :", "-\t\t\t\t\tif (iToken == 0) {", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t}", "-\t\t\t\t\tif ((iToken % 2) == 0) { // cannot leave on a dot", "-\t\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak nextToken;", "-\t\t\t}", "-\t\t}", "-", "-\t\t// Build type reference from read tokens", "+\t */", "+\tprotected Object createTypeReference(int primitiveToken) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9932001fb5518daaf27fd4ba07ad95da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AnnotationParser.java", "commitBeforeChange": "aabd59e4934a861167bc5ad69597bc9fd97e06dc", "commitAfterChange": "4ed2786f22dd00c9c1f7773433c3548c8c0f6fc3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tvoid parseQualifiedName() throws InvalidInputException", "signatureAfterChange": "  \tprivate TypeReference parseQualifiedName(boolean reset) throws InvalidInputException", "diff": ["-\t}", "-\tvoid parseQualifiedName() throws InvalidInputException {", "-\t\tnextToken: for (int iToken = 0;; iToken++) {", "-\t\t\tint token = readToken();", "-\t\t\tswitch (token) {", "-\t\t\t\t", "-\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "-\t\t\t\t\tif ((iToken % 2) > 0) break nextToken; // identifiers must be odd tokens", "-\t\t\t\t\tconsumeToken();", "-\t\t\t\t\tpushIdentifier();", "-\t\t\t\t\tif (iToken > 0) {", "-\t\t\t\t\t\tthis.identifierLengthStack[--this.identifierLengthPtr]++; // name . ident", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t\t", "-\t\t\t\tcase TerminalTokens.TokenNameDOT :", "-\t\t\t\t\tif ((iToken % 2) == 0) break nextToken; // dots must be even tokens", "-\t\t\t\t\tconsumeToken();", "-\t\t\t\t\tbreak;", "-\t\t\t\t\t", "-\t\t\t\tdefault :", "-\t\t\t\t\tbreak nextToken;", "-\t\t\t}", "+", "+\tprivate TypeReference parseQualifiedName(boolean reset) throws InvalidInputException {", "+", "+\t\t// Reset identifier stack if requested", "+\t\tif (reset) {", "+\t\t\tthis.identifierPtr = -1;", "+\t\t\tthis.identifierLengthPtr = -1;", "+\t\t}", "+", "+\t\t// Scan tokens", "+\t\tnextToken: for (int iToken=0; ; iToken++) {", "+\t\t\tint token = readToken();", "+\t\t\tswitch (token) {", "+\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "+\t\t\t\t\tif (((iToken % 2) > 0)) { // identifiers must be odd tokens", "+\t\t\t\t\t\tbreak nextToken;", "+\t\t\t\t\t}", "+\t\t\t\t\tpushIdentifier(iToken==0);", "+\t\t\t\t\tconsumeToken();", "+\t\t\t\t\tbreak;", "+\t\t\t\t\t", "+\t\t\t\tcase TerminalTokens.TokenNameDOT :", "+\t\t\t\t\tif ((iToken % 2) == 0) { // dots must be even tokens", "+\t\t\t\t\t\tthrow new InvalidInputException();", "+\t\t\t\t\t}", "+\t\t\t\t\tconsumeToken();", "+\t\t\t\t\tbreak;", "+", "+\t\t\t\tcase TerminalTokens.TokenNamevoid :", "+\t\t\t\tcase TerminalTokens.TokenNameboolean :", "+\t\t\t\tcase TerminalTokens.TokenNamebyte :", "+\t\t\t\tcase TerminalTokens.TokenNamechar :", "+\t\t\t\tcase TerminalTokens.TokenNamedouble :", "+\t\t\t\tcase TerminalTokens.TokenNamefloat :", "+\t\t\t\tcase TerminalTokens.TokenNameint :", "+\t\t\t\tcase TerminalTokens.TokenNamelong :", "+\t\t\t\tcase TerminalTokens.TokenNameshort :", "+\t\t\t\t\tif (iToken > 0) {", "+\t\t\t\t\t\tthrow new InvalidInputException();", "+\t\t\t\t\t}", "+\t\t\t\t\tpushIdentifier(true);", "+\t\t\t\t\tconsumeToken();", "+\t\t\t\t\tbreak nextToken;", "+", "+\t\t\t\tdefault :", "+\t\t\t\t\tif (iToken == 0) {", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "+\t\t\t\t\tif ((iToken % 2) == 0) { // dots must be followed by an identifier", "+\t\t\t\t\t\tthrow new InvalidInputException();", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak nextToken;", "+\t\t\t}", "+\t\t}", "+", "+\t\t// Build type reference from read tokens", "+\t\tTypeReference typeRef = null;", "+\t\tint size = this.identifierLengthStack[this.identifierLengthPtr--]; ", "+\t\tif (size == 1) { // Single Type ref", "+\t\t\ttypeRef =", "+\t\t\t\tnew AnnotationSingleTypeReference(", "+\t\t\t\t\tidentifierStack[this.identifierPtr],", "+\t\t\t\t\tidentifierPositionStack[this.identifierPtr],", "+\t\t\t\t\tthis.tagSourceStart,", "+\t\t\t\t\tthis.tagSourceEnd);", "+\t\t}", "+\t\telse if (size > 1) { // Qualified Type ref", "+\t\t\tchar[][] tokens = new char[size][];", "+\t\t\tSystem.arraycopy(this.identifierStack, this.identifierPtr-size+1, tokens, 0, size);", "+\t\t\tlong[] positions = new long[size];", "+\t\t\tSystem.arraycopy(this.identifierPositionStack, this.identifierPtr-size+1, positions, 0, size);", "+\t\t\ttypeRef = new AnnotationQualifiedTypeReference(tokens, positions, this.tagSourceStart, this.tagSourceEnd);", "+\t\t}", "+\t\tthis.identifierPtr -= size;", "+\t\treturn typeRef;"]}], "num": 27066}
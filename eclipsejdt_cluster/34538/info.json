{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bea00d3cfc8d7e830ccd05a6eb1dab65", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5df4adc47319ef242f480eb9ced274d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "da3abb814c31b6e1c2d43312de494af316e19273", "commitAfterChange": "8af0e3d96f10bb27360a77bbd330487cf3fdc8dd", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected boolean parseTag()", "signatureAfterChange": " \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["-\tprotected boolean parseTag() {", "-\t\treturn true;", "+\tprotected boolean parseTag(int previousPosition) throws InvalidInputException {", "+\t\tboolean valid = false;", "+\t\t", "+\t\t// Read tag name", "+\t\tint token = readTokenAndConsume();", "+\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "+\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\tchar[] tag = this.scanner.getCurrentIdentifierSource(); // first token is either an identifier or a keyword", "+", "+\t\t// Decide which parse to perform depending on tag name", "+\t\tthis.tagValue = NO_TAG_VALUE;", "+\t\tswitch (token) {", "+\t\t\tcase TerminalTokens.TokenNameIdentifier :", "+\t\t\t\tswitch (tag[0]) {", "+\t\t\t\t\tcase 'd':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "+\t\t\t\t\t\t\tthis.deprecated = true;", "+\t\t\t\t\t\t\tvalid = true;", "+\t\t\t\t\t\t\tthis.tagValue = TAG_DEPRECATED_VALUE;", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'i':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_INHERITDOC)) {", "+\t\t\t\t\t\t\t// inhibits inherited flag when tags have been already stored", "+\t\t\t\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51606", "+\t\t\t\t\t\t\t// Note that for DOM_PARSER, nodes stack may be not empty even no '@' tag", "+\t\t\t\t\t\t\t// was encountered in comment. But it cannot be the case for COMPILER_PARSER", "+\t\t\t\t\t\t\t// and so is enough as it is only this parser which signals the missing tag warnings...", "+\t\t\t\t\t\t\tthis.inherited = this.astPtr==-1;", "+\t\t\t\t\t\t\tvalid = true;", "+\t\t\t\t\t\t\tthis.tagValue = TAG_INHERITDOC_VALUE;", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'p':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_PARAM)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_PARAM_VALUE;", "+\t\t\t\t\t\t\tvalid = parseParam();", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'e':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_EXCEPTION)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_EXCEPTION_VALUE;", "+\t\t\t\t\t\t\tvalid = parseThrows();", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 's':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_SEE)) {", "+\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "+\t\t\t\t\t\t\t\t// Cannot have @see inside inline comment", "+\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t\tif (this.sourceParser != null)", "+\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tthis.tagValue = TAG_SEE_VALUE;", "+\t\t\t\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'l':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_LINK)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_LINK_VALUE;", "+\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\t\tvalid= parseReference();", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "+\t\t\t\t\t\t\t\t// Cannot have @link outside inline comment", "+\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t\tif (this.sourceParser != null)", "+\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_LINKPLAIN)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_LINKPLAIN_VALUE;", "+\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t\tif (this.sourceParser != null)", "+\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'v':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_VALUE) && this.sourceParser != null && this.sourceParser.options.sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_VALUE_VALUE;", "+\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t\tif (this.sourceParser != null)", "+\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcreateTag();", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase TerminalTokens.TokenNamereturn :", "+\t\t\t\tthis.tagValue = TAG_RETURN_VALUE;", "+\t\t\t\tvalid = parseReturn();", "+\t\t\t\t// verify characters after return tag (we're expecting text description)", "+\t\t\t\tif(!verifyCharsAfterReturnTag(this.index)) {", "+\t\t\t\t\tif (this.sourceParser != null) {", "+\t\t\t\t\t\tint end = this.starPosition == -1 || this.lineEnd<this.starPosition ? this.lineEnd : this.starPosition;", "+\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocEmptyReturnTag(this.tagSourceStart, end);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase TerminalTokens.TokenNamethrows :", "+\t\t\t\tthis.tagValue = TAG_THROWS_VALUE;", "+\t\t\t\tvalid = parseThrows();", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tthis.textStart = this.index;", "+\t\treturn valid;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5eb0677715a2165d31e0505f0e79c438", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatterCommentParser.java", "commitBeforeChange": "acbc84bdd187bdb6c7f4afd96c97bfaa149e3ef9", "commitAfterChange": "145cdc80e51d24de5d028aaae697a72b8bec0900", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": " protected boolean parseTag(int previousPosition) throws InvalidInputException", "signatureAfterChange": " protected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["-\tboolean valid = super.parseTag(previousPosition);", "-\tthis.textStart = -1;", "+\t", "+\t// Read tag name", "+\tthis.tagSourceStart = previousPosition;", "+\tthis.scanner.startPosition = this.index;", "+\tthis.scanner.currentCharacter = readChar();", "+\tswitch (this.scanner.currentCharacter) {", "+\t\tcase ' ':", "+\t\tcase '*':", "+\t\tcase '}':", "+\t\t\t// tag name is empty", "+\t\t\tthis.tagSourceEnd = previousPosition;", "+\t\t\tif (textStart == -1) this.textStart = previousPosition;", "+\t\t\treturn true;", "+\t\tdefault: ", "+\t\t\tif (ScannerHelper.isWhitespace(this.scanner.currentCharacter)) {", "+\t\t\t\t// tag name is empty", "+\t\t\t\tthis.tagSourceEnd = previousPosition;", "+\t\t\t\tif (textStart == -1) this.textStart = previousPosition;", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tbreak;", "+\t}", "+\tint currentPosition = this.index;", "+\tchar currentChar = this.scanner.currentCharacter;", "+\twhile (currentChar != ' ' && currentChar != '*' && currentChar != '}' && !ScannerHelper.isWhitespace(currentChar)) {", "+\t\tcurrentPosition = this.index;", "+\t\tcurrentChar = readChar();", "+\t}", "+\tthis.tagSourceEnd = currentPosition - 1;", "+\tthis.scanner.currentCharacter = currentChar;", "+\tthis.scanner.currentPosition = currentPosition;", "+\tchar[] tagName = this.scanner.getCurrentIdentifierSource();", "+\tint length = tagName.length;", "+\tthis.index = this.tagSourceEnd+1;", "+", "+\t// Decide which parse to perform depending on tag name", "+\tthis.tagValue = TAG_OTHERS_VALUE;", "+\tboolean valid = false;", "+\tswitch (tagName[0]) {", "+\t\tcase 'a':", "+\t\t\tif (length == TAG_AUTHOR_LENGTH && CharOperation.equals(TAG_AUTHOR, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_AUTHOR_VALUE;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 'c':", "+\t\t\tif (length == TAG_CATEGORY_LENGTH && CharOperation.equals(TAG_CATEGORY, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_CATEGORY_VALUE;", "+\t\t\t\tvalid = parseIdentifierTag(false); // TODO (frederic) reconsider parameter value when @category will be significant in spec", "+\t\t\t} else if (length == TAG_CODE_LENGTH && this.inlineTagStarted && CharOperation.equals(TAG_CODE, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_CODE_VALUE;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 'd':", "+\t\t\tif (length == TAG_DEPRECATED_LENGTH && CharOperation.equals(TAG_DEPRECATED, tagName)) {", "+\t\t\t\tthis.deprecated = true;", "+\t\t\t\tvalid = true;", "+\t\t\t\tthis.tagValue = TAG_DEPRECATED_VALUE;", "+\t\t\t} else if (length == TAG_DOC_ROOT_LENGTH && CharOperation.equals(TAG_DOC_ROOT, tagName)) {", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=227730", "+\t\t\t\t// identify @docRoot tag as a base tag that does not expect any argument", "+\t\t\t\tvalid = true;", "+\t\t\t\tthis.tagValue = TAG_DOC_ROOT_VALUE;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 'e':", "+\t\t\tif (length == TAG_EXCEPTION_LENGTH && CharOperation.equals(TAG_EXCEPTION, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_EXCEPTION_VALUE;", "+\t\t\t\tvalid = parseThrows();", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 'i':", "+\t\t\tif (length == TAG_INHERITDOC_LENGTH && CharOperation.equals(TAG_INHERITDOC, tagName)) {", "+\t\t\t\t// inhibits inherited flag when tags have been already stored", "+\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51606", "+\t\t\t\t// Note that for DOM_PARSER, nodes stack may be not empty even no '@' tag", "+\t\t\t\t// was encountered in comment. But it cannot be the case for COMPILER_PARSER", "+\t\t\t\t// and so is enough as it is only this parser which signals the missing tag warnings...", "+\t\t\t\tif (this.astPtr==-1) {", "+\t\t\t\t\tthis.inheritedPositions = (((long) this.tagSourceStart) << 32) + this.tagSourceEnd;", "+\t\t\t\t}", "+\t\t\t\tvalid = true;", "+\t\t\t\tthis.tagValue = TAG_INHERITDOC_VALUE;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 'l':", "+\t\t\tif (length == TAG_LINK_LENGTH && CharOperation.equals(TAG_LINK, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_LINK_VALUE;", "+\t\t\t\tif (this.inlineTagStarted || (this.kind & COMPLETION_PARSER) != 0) {", "+\t\t\t\t\tvalid= parseReference();", "+\t\t\t\t} else {", "+\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "+\t\t\t\t\t// Cannot have @link outside inline comment", "+\t\t\t\t\tvalid = false;", "+\t\t\t\t\tif (this.reportProblems) {", "+\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (length == TAG_LINKPLAIN_LENGTH && CharOperation.equals(TAG_LINKPLAIN, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_LINKPLAIN_VALUE;", "+\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t} else {", "+\t\t\t\t\tvalid = false;", "+\t\t\t\t\tif (this.reportProblems) {", "+\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (length == TAG_LITERAL_LENGTH && this.inlineTagStarted && CharOperation.equals(TAG_LITERAL, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_LITERAL_VALUE;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 'p':", "+\t\t\tif (length == TAG_PARAM_LENGTH && CharOperation.equals(TAG_PARAM, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_PARAM_VALUE;", "+\t\t\t\tvalid = parseParam();", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 's':", "+\t\t\tif (length == TAG_SEE_LENGTH && CharOperation.equals(TAG_SEE, tagName)) {", "+\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "+\t\t\t\t\t// Cannot have @see inside inline comment", "+\t\t\t\t\tvalid = false;", "+\t\t\t\t\tif (this.reportProblems) {", "+\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.tagValue = TAG_SEE_VALUE;", "+\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t}", "+\t\t\t} else if (length == TAG_SERIAL_LENGTH && CharOperation.equals(TAG_SERIAL, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_SERIAL_VALUE;", "+\t\t\t} else if (length == TAG_SERIAL_DATA_LENGTH && CharOperation.equals(TAG_SERIAL_DATA, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_SERIAL_DATA_VALUE;", "+\t\t\t} else if (length == TAG_SERIAL_FIELD_LENGTH && CharOperation.equals(TAG_SERIAL_FIELD, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_SERIAL_FIELD_VALUE;", "+\t\t\t} else if (length == TAG_SINCE_LENGTH && CharOperation.equals(TAG_SINCE, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_SINCE_VALUE;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 'v':", "+\t\t\tif (length == TAG_VALUE_LENGTH && CharOperation.equals(TAG_VALUE, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_VALUE_VALUE;", "+\t\t\t\tif (this.sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\tif (this.reportProblems) this.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (length == TAG_VERSION_LENGTH && CharOperation.equals(TAG_VERSION, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_VERSION_VALUE;", "+\t\t\t} else {", "+\t\t\t\tcreateTag();", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 'r':", "+\t\t\tif (length == TAG_RETURN_LENGTH && CharOperation.equals(TAG_RETURN, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_RETURN_VALUE;", "+\t\t\t\tvalid = parseReturn();", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 't':", "+\t\t\tif (length == TAG_THROWS_LENGTH && CharOperation.equals(TAG_THROWS, tagName)) {", "+\t\t\t\tthis.tagValue = TAG_THROWS_VALUE;", "+\t\t\t\tvalid = parseThrows();", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tdefault:", "+\t\t\tcreateTag();", "+\t\t\tbreak;", "+\t}", "+\tthis.textStart = -1;", "+"]}], "num": 34538}
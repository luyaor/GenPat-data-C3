{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33250f8bccf501e46d2bb2e7ec498f24", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b625ee29c89caec17520ba1ae352e68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \tpublic static CompilationUnitDeclaration buildCompilationUnit(\r \t\tISourceType[] sourceTypes,\r \t\tboolean needFieldsAndMethods,\r \t\tboolean needMemberTypes,\r \t\tProblemReporter problemReporter,\r \t\tCompilationResult compilationResult)", "signatureAfterChange": "\r public static CompilationUnitDeclaration buildCompilationUnit(\r \tISourceType sourceType,\r \tboolean needFieldsAndMethods,\r \tProblemReporter problemReporter,\r \tCompilationResult compilationResult)", "diff": ["+ */\r", "+public static CompilationUnitDeclaration buildCompilationUnit(\r", "+\tISourceType sourceType,\r", "+\tboolean needFieldsAndMethods,\r", "+\tProblemReporter problemReporter,\r", "+\tCompilationResult compilationResult) {\r", "-\t */\r", "-\tpublic static CompilationUnitDeclaration buildCompilationUnit(\r", "-\t\tISourceType[] sourceTypes,\r", "-\t\tboolean needFieldsAndMethods,\r", "-\t\tboolean needMemberTypes,\r", "-\t\tProblemReporter problemReporter,\r", "-\t\tCompilationResult compilationResult) {\r", "+\treturn buildCompilationUnit(sourceType, needFieldsAndMethods, true, problemReporter, compilationResult);\r", "+}\r", "-\t\tISourceType sourceType = sourceTypes[0];\r", "-\t\tif (sourceType.getName() == null)\r", "-\t\t\treturn null; // do a basic test that the sourceType is valid\r", "-\t\tCompilationUnitDeclaration compilationUnit =\r", "-\t\t\tnew CompilationUnitDeclaration(problemReporter, compilationResult, 0);\r", "-\t\t// not filled at this point\r", "-\t\t/* only positions available */\r", "-\t\tint start = sourceType.getNameSourceStart();\r", "-\t\tint end = sourceType.getNameSourceEnd();\r", "-\t\t/* convert package and imports */\r", "-\t\tif (sourceType.getPackageName() != null\r", "-\t\t\t&& sourceType.getPackageName().length > 0)\r", "-\t\t\t// if its null then it is defined in the default package\r", "-\t\t\tcompilationUnit.currentPackage =\r", "-\t\t\t\tcreateImportReference(sourceType.getPackageName(), start, end);\r", "-\t\tchar[][] importNames = sourceType.getImports();\r", "-\t\tint importCount = importNames == null ? 0 : importNames.length;\r", "-\t\tcompilationUnit.imports = new ImportReference[importCount];\r", "-\t\tfor (int i = 0; i < importCount; i++)\r", "-\t\t\tcompilationUnit.imports[i] = createImportReference(importNames[i], start, end);\r", "-\t\t/* convert type(s) */\r", "-\t\tint typeCount = sourceTypes.length;\r", "-\t\tcompilationUnit.types = new TypeDeclaration[typeCount];\r", "-\t\tfor (int i = 0; i < typeCount; i++) {\r", "-\t\t\tcompilationUnit.types[i] =\r", "-\t\t\t\tconvert(sourceTypes[i], needFieldsAndMethods, needMemberTypes);\r", "-\t\t}\r", "-\t\treturn compilationUnit;\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccddc1dd80acb726dfe365f0857b94da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \tpublic static CompilationUnitDeclaration buildCompilationUnit(\r \t\tISourceType[] sourceTypes,\r \t\tboolean needFieldsAndMethods,\r \t\tboolean needMemberTypes,\r \t\tProblemReporter problemReporter,\r \t\tCompilationResult compilationResult)", "signatureAfterChange": "\r public static CompilationUnitDeclaration buildCompilationUnit(\r \tISourceType sourceType,\r \tboolean needFieldsAndMethods,\r \tProblemReporter problemReporter,\r \tCompilationResult compilationResult)", "diff": ["+ */\r", "+public static CompilationUnitDeclaration buildCompilationUnit(\r", "+\tISourceType sourceType,\r", "+\tboolean needFieldsAndMethods,\r", "+\tProblemReporter problemReporter,\r", "+\tCompilationResult compilationResult) {\r", "-\t */\r", "-\tpublic static CompilationUnitDeclaration buildCompilationUnit(\r", "-\t\tISourceType[] sourceTypes,\r", "-\t\tboolean needFieldsAndMethods,\r", "-\t\tboolean needMemberTypes,\r", "-\t\tProblemReporter problemReporter,\r", "-\t\tCompilationResult compilationResult) {\r", "+\treturn buildCompilationUnit(sourceType, needFieldsAndMethods, true, problemReporter, compilationResult);\r", "+}\r", "-\t\tISourceType sourceType = sourceTypes[0];\r", "-\t\tif (sourceType.getName() == null)\r", "-\t\t\treturn null; // do a basic test that the sourceType is valid\r", "-\t\tCompilationUnitDeclaration compilationUnit =\r", "-\t\t\tnew CompilationUnitDeclaration(problemReporter, compilationResult, 0);\r", "-\t\t// not filled at this point\r", "-\t\t/* only positions available */\r", "-\t\tint start = sourceType.getNameSourceStart();\r", "-\t\tint end = sourceType.getNameSourceEnd();\r", "-\t\t/* convert package and imports */\r", "-\t\tif (sourceType.getPackageName() != null\r", "-\t\t\t&& sourceType.getPackageName().length > 0)\r", "-\t\t\t// if its null then it is defined in the default package\r", "-\t\t\tcompilationUnit.currentPackage =\r", "-\t\t\t\tcreateImportReference(sourceType.getPackageName(), start, end);\r", "-\t\tchar[][] importNames = sourceType.getImports();\r", "-\t\tint importCount = importNames == null ? 0 : importNames.length;\r", "-\t\tcompilationUnit.imports = new ImportReference[importCount];\r", "-\t\tfor (int i = 0; i < importCount; i++)\r", "-\t\t\tcompilationUnit.imports[i] = createImportReference(importNames[i], start, end);\r", "-\t\t/* convert type(s) */\r", "-\t\tint typeCount = sourceTypes.length;\r", "-\t\tcompilationUnit.types = new TypeDeclaration[typeCount];\r", "-\t\tfor (int i = 0; i < typeCount; i++) {\r", "-\t\t\tcompilationUnit.types[i] =\r", "-\t\t\t\tconvert(sourceTypes[i], needFieldsAndMethods, needMemberTypes);\r", "-\t\t}\r", "-\t\treturn compilationUnit;\r", "-\t}\r"]}], "num": 72776}
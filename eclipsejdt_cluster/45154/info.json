{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "930988aed49cf3d83fb8f093f0b6c5ee", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa68e1ae15306b75dfdc678a96eff65f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodPattern.java", "commitBeforeChange": "68f9f04b07b27dd702def07fa767acc75fd22c99", "commitAfterChange": "bf894682701834dc09d19bcf9d552503f3fc366c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public int matchLevel(AstNode node, boolean resolve)", "signatureAfterChange": " public int matchLevel(AstNode node, boolean resolve)", "diff": ["-\tif (this.parameterSimpleNames != null && args != null)", "-\t\tif (this.parameterSimpleNames.length != args.length)", "+\tif (this.parameterSimpleNames != null) {", "+\t\tint length = this.parameterSimpleNames.length;", "+\t\tint argsLength = args == null ? 0 : args.length;", "+\t\tif (length != argsLength) {", "+\t\t} else {", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tAstNode arg = args[i];", "+\t\t\t\tif (arg instanceof Argument) {", "+\t\t\t\t\tTypeReference argType = ((Argument)arg).type;", "+\t\t\t\t\tchar[][] argTypeName = argType.getTypeName();", "+\t\t\t\t\tchar[] sourceName = toArrayName(", "+\t\t\t\t\t\targTypeName[argTypeName.length-1], ", "+\t\t\t\t\t\targType.dimensions());", "+\t\t\t\t\tif (!matchesName(this.parameterSimpleNames[i], sourceName))", "+\t\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eafd0072957b7bc6e48fdc0c828a74d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "e9d42bfbf494b3bd89965c526aaae07d7189c12c", "commitAfterChange": "c14c8093a10c10363866e505a62237c9c62b679e", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public TypeBinding createAnnotatedType(TypeBinding type, AnnotationBinding[] newbies)", "signatureAfterChange": " public TypeBinding createAnnotatedType(TypeBinding type, AnnotationBinding[] newbies)", "diff": ["+\tif (this.globalOptions.isAnnotationBasedNullAnalysisEnabled) {", "+\t\t// filter duplicate null annotations", "+\t\t// (do we want to filter other annotations as well? only if not repeatable?)", "+\t\tlong tagBitsSeen = 0;", "+\t\tAnnotationBinding[] filtered = new AnnotationBinding[newbies.length];", "+\t\tint count = 0;", "+\t\tfor (int i = 0; i < newbies.length; i++) {", "+\t\t\tlong tagBits = 0;", "+\t\t\tswitch (newbies[i].type.id) {", "+\t\t\t\tcase TypeIds.T_ConfiguredAnnotationNonNull  : tagBits = TagBits.AnnotationNonNull; break;", "+\t\t\t\tcase TypeIds.T_ConfiguredAnnotationNullable : tagBits = TagBits.AnnotationNullable; break;", "+\t\t\t}", "+\t\t\tif ((tagBitsSeen & tagBits) == 0) {", "+\t\t\t\ttagBitsSeen |= tagBits;", "+\t\t\t\tfiltered[count++] = newbies[i];", "+\t\t\t}", "+\t\t}", "+\t\tif (count < newbies.length)", "+\t\t\tSystem.arraycopy(filtered, 0, newbies = new AnnotationBinding[count], 0, count);", "+\t}"]}], "num": 45154}
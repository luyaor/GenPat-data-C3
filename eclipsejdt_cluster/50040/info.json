{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d37d0ab8aed601c12bcdf6753ebdbeb5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88d5180a678adf451817467fe2b9af95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "3e0b35975d99c7fbc1802301d4e573e4cebc360d", "commitAfterChange": "19cb53354023f68ae04bcccb8466b1b3cfbaac2b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate static void checkAlternateBinding(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] originalArgumentTypes, TypeBinding[] alternateArgumentTypes, final InvocationSite invocationSite)", "signatureAfterChange": "  \tprivate static void checkAlternateBinding(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] originalArgumentTypes, TypeBinding[] alternateArgumentTypes, final InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\tint varargIndex = paramLength - 1;", "-\t\t\t\t\t\tArrayBinding varargType = (ArrayBinding) binding.parameters[varargIndex];", "-\t\t\t\t\t\tTypeBinding lastArgType = alternateArgumentTypes[varargIndex];", "-\t\t\t\t\t\tif (varargType.dimensions == lastArgType.dimensions() && varargType.leafComponentType != lastArgType.leafComponentType())", "-\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\tint varargsIndex = paramLength - 1;", "+\t\t\t\t\t\tArrayBinding varargsType = (ArrayBinding) binding.parameters[varargsIndex];", "+\t\t\t\t\t\tTypeBinding lastArgType = alternateArgumentTypes[varargsIndex];", "+\t\t\t\t\t\t// originalType may be compatible already, but cast mandated to clarify between varargs/non-varargs call", "+\t\t\t\t\t\tif (!lastArgType.isCompatibleWith(varargsType.elementsType()))", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2201044ad12b2cc1572d1a10529a1e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "e45e7b8413ff6cd002eb6f3ec9db803355263eb6", "commitAfterChange": "6002a17b24e19bf1229c7764276a11adf2e5e47f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate static void checkAlternateBinding(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] originalArgumentTypes, TypeBinding[] alternateArgumentTypes, final InvocationSite invocationSite)", "signatureAfterChange": "  \tprivate static void checkAlternateBinding(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] originalArgumentTypes, TypeBinding[] alternateArgumentTypes, final InvocationSite invocationSite)", "diff": ["-\t\t\t\tfor (int i = 0, length = originalArgumentTypes.length; i < length; i++) {", "+\t\t\t\tint argumentLength = originalArgumentTypes.length;", "+\t\t\t\tif (binding.isVarargs()) {", "+\t\t\t\t\tint paramLength = binding.parameters.length;", "+\t\t\t\t   if (paramLength == argumentLength) {", "+\t\t\t\t\t\tint varargIndex = paramLength - 1;", "+\t\t\t\t\t\tArrayBinding varargType = (ArrayBinding) binding.parameters[varargIndex];", "+\t\t\t\t\t\tTypeBinding lastArgType = alternateArgumentTypes[varargIndex];", "+\t\t\t\t\t\tif (varargType.dimensions == lastArgType.dimensions() && varargType.leafComponentType != lastArgType.leafComponentType())", "+\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t   }", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < argumentLength; i++) {"]}], "num": 50040}
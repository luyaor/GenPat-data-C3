{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "640869f4af8694f944d929800c01a840", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5edaaf755df2928904f508167f5f5712", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public final boolean areTypesCastCompatible(BlockScope scope, TypeBinding castType, TypeBinding expressionType)", "signatureAfterChange": " public final boolean areTypesCastCompatible(BlockScope scope, TypeBinding castType, TypeBinding expressionType)", "diff": ["-\t\t\tTypeBinding expressionEltType = ((ArrayBinding) expressionType).elementsType(scope);", "+\t\t\tTypeBinding expressionEltType = ((ArrayBinding) expressionType).elementsType();", "-\t\t\t\treturn ((ArrayBinding) castType).elementsType(scope) == expressionEltType;", "+\t\t\t\treturn ((ArrayBinding) castType).elementsType() == expressionEltType;", "-\t\t\treturn areTypesCastCompatible(scope, ((ArrayBinding) castType).elementsType(scope), expressionEltType);", "+\t\t\treturn areTypesCastCompatible(scope, ((ArrayBinding) castType).elementsType(), expressionEltType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97cb2b167fac01ce071b88fc1f272e19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "diff": ["-\t\t\t\tTypeBinding exprElementType = ((ArrayBinding) expressionType).elementsType(scope);", "+\t\t\t\tTypeBinding exprElementType = ((ArrayBinding) expressionType).elementsType();", "-\t\t\t\t\tif (((ArrayBinding) castType).elementsType(scope) != exprElementType)", "+\t\t\t\t\tif (((ArrayBinding) castType).elementsType() != exprElementType)", "-\t\t\t\t\t((ArrayBinding) castType).elementsType(scope),", "+\t\t\t\t\t((ArrayBinding) castType).elementsType(),"]}], "num": 25408}
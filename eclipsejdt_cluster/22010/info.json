{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d2d1c6872e210c9b86187368296bd044", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a16f304f20343a2209cf9732b64db5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "b0c126113d3919e827d562fe7ceede775b6f96a6", "commitAfterChange": "1636f4f6a9a908a8764c3fcbad745e3e39a0b116", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void addSpecialMethods()", "signatureAfterChange": " \tpublic void addSpecialMethods()", "diff": ["-\t\tboolean doneGeneratingLambdas = false;", "-\t\tint currentLambda = 0;", "-\t\tdo {", "-\t\t\tLambdaExpression [] lambdas = this.referenceBinding.getLambdaMethods();  // refresh as a lambda code generation could schedule nested lambdas for code generation.", "-\t\t\tint lambdaCount = lambdas == null ? 0 : lambdas.length;", "-\t\t\tif (lambdaCount > currentLambda) {", "-\t\t\t\tLambdaExpression lambda = lambdas[currentLambda++];", "-\t\t\t\tif (lambda != null) // null ==> completely amorphous synthetic lambdas for array construction and such.", "-\t\t\t\t\tlambda.generateCode(this.referenceBinding.scope, this);", "-\t\t\t} else {", "-\t\t\t\tdoneGeneratingLambdas = true;", "-\t\t\t}", "-\t\t} while (!doneGeneratingLambdas);", "-\t\t", "-\t\tSyntheticMethodBinding[] syntheticMethods = this.referenceBinding.syntheticMethods();", "-\t\tif (syntheticMethods != null) {", "-\t\t\tfor (int i = 0, max = syntheticMethods.length; i < max; i++) {", "-\t\t\t\tSyntheticMethodBinding syntheticMethod = syntheticMethods[i];", "-\t\t\t\tswitch (syntheticMethod.purpose) {", "-\t\t\t\t\tcase SyntheticMethodBinding.FieldReadAccess :", "-\t\t\t\t\tcase SyntheticMethodBinding.SuperFieldReadAccess :", "-\t\t\t\t\t\t// generate a method info to emulate an reading access to", "-\t\t\t\t\t\t// a non-accessible field", "-\t\t\t\t\t\taddSyntheticFieldReadAccessMethod(syntheticMethod);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase SyntheticMethodBinding.FieldWriteAccess :", "-\t\t\t\t\tcase SyntheticMethodBinding.SuperFieldWriteAccess :", "-\t\t\t\t\t\t// generate a method info to emulate an writing access to", "-\t\t\t\t\t\t// a non-accessible field", "-\t\t\t\t\t\taddSyntheticFieldWriteAccessMethod(syntheticMethod);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase SyntheticMethodBinding.MethodAccess :", "-\t\t\t\t\tcase SyntheticMethodBinding.SuperMethodAccess :", "-\t\t\t\t\tcase SyntheticMethodBinding.BridgeMethod :", "-\t\t\t\t\t\t// generate a method info to emulate an access to a non-accessible method / super-method or bridge method", "-\t\t\t\t\t\taddSyntheticMethodAccessMethod(syntheticMethod);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase SyntheticMethodBinding.ConstructorAccess :", "-\t\t\t\t\t\t// generate a method info to emulate an access to a non-accessible constructor", "-\t\t\t\t\t\taddSyntheticConstructorAccessMethod(syntheticMethod);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase SyntheticMethodBinding.EnumValues :", "-\t\t\t\t\t\t// generate a method info to define <enum>#values()", "-\t\t\t\t\t\taddSyntheticEnumValuesMethod(syntheticMethod);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase SyntheticMethodBinding.EnumValueOf :", "-\t\t\t\t\t\t// generate a method info to define <enum>#valueOf(String)", "-\t\t\t\t\t\taddSyntheticEnumValueOfMethod(syntheticMethod);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase SyntheticMethodBinding.SwitchTable :", "-\t\t\t\t\t\t// generate a method info to define the switch table synthetic method", "-\t\t\t\t\t\taddSyntheticSwitchTable(syntheticMethod);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase SyntheticMethodBinding.TooManyEnumsConstants :", "-\t\t\t\t\t\taddSyntheticEnumInitializationMethod(syntheticMethod);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase SyntheticMethodBinding.ArrayConstructor:", "-\t\t\t\t\t\taddSyntheticArrayConstructor(syntheticMethod);", "-\t\t\t\t\t\tbreak;", "+\t\tint emittedSyntheticsCount = 0;", "+\t\tboolean continueScanningSynthetics = true;", "+\t\twhile (continueScanningSynthetics) {", "+\t\t\tcontinueScanningSynthetics = false;", "+\t\t\tSyntheticMethodBinding[] syntheticMethods = this.referenceBinding.syntheticMethods();", "+\t\t\tint currentSyntheticsCount = syntheticMethods == null ? 0: syntheticMethods.length;", "+\t\t\tif (emittedSyntheticsCount != currentSyntheticsCount) {", "+\t\t\t\tfor (int i = emittedSyntheticsCount, max = currentSyntheticsCount; i < max; i++) {", "+\t\t\t\t\tSyntheticMethodBinding syntheticMethod = syntheticMethods[i];", "+\t\t\t\t\tswitch (syntheticMethod.purpose) {", "+\t\t\t\t\t\tcase SyntheticMethodBinding.FieldReadAccess :", "+\t\t\t\t\t\tcase SyntheticMethodBinding.SuperFieldReadAccess :", "+\t\t\t\t\t\t\t// generate a method info to emulate an reading access to", "+\t\t\t\t\t\t\t// a non-accessible field", "+\t\t\t\t\t\t\taddSyntheticFieldReadAccessMethod(syntheticMethod);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase SyntheticMethodBinding.FieldWriteAccess :", "+\t\t\t\t\t\tcase SyntheticMethodBinding.SuperFieldWriteAccess :", "+\t\t\t\t\t\t\t// generate a method info to emulate an writing access to", "+\t\t\t\t\t\t\t// a non-accessible field", "+\t\t\t\t\t\t\taddSyntheticFieldWriteAccessMethod(syntheticMethod);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase SyntheticMethodBinding.MethodAccess :", "+\t\t\t\t\t\tcase SyntheticMethodBinding.SuperMethodAccess :", "+\t\t\t\t\t\tcase SyntheticMethodBinding.BridgeMethod :", "+\t\t\t\t\t\t\t// generate a method info to emulate an access to a non-accessible method / super-method or bridge method", "+\t\t\t\t\t\t\taddSyntheticMethodAccessMethod(syntheticMethod);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase SyntheticMethodBinding.ConstructorAccess :", "+\t\t\t\t\t\t\t// generate a method info to emulate an access to a non-accessible constructor", "+\t\t\t\t\t\t\taddSyntheticConstructorAccessMethod(syntheticMethod);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase SyntheticMethodBinding.EnumValues :", "+\t\t\t\t\t\t\t// generate a method info to define <enum>#values()", "+\t\t\t\t\t\t\taddSyntheticEnumValuesMethod(syntheticMethod);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase SyntheticMethodBinding.EnumValueOf :", "+\t\t\t\t\t\t\t// generate a method info to define <enum>#valueOf(String)", "+\t\t\t\t\t\t\taddSyntheticEnumValueOfMethod(syntheticMethod);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase SyntheticMethodBinding.SwitchTable :", "+\t\t\t\t\t\t\t// generate a method info to define the switch table synthetic method", "+\t\t\t\t\t\t\taddSyntheticSwitchTable(syntheticMethod);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase SyntheticMethodBinding.TooManyEnumsConstants :", "+\t\t\t\t\t\t\taddSyntheticEnumInitializationMethod(syntheticMethod);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase SyntheticMethodBinding.ArrayConstructor:", "+\t\t\t\t\t\t\taddSyntheticArrayConstructor(syntheticMethod);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase SyntheticMethodBinding.LambdaMethod:", "+\t\t\t\t\t\t\tsyntheticMethod.lambda.generateCode(this.referenceBinding.scope, this);", "+\t\t\t\t\t\t\tcontinueScanningSynthetics = true; // lambda code generation could schedule additional nested lambdas for code generation.", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\temittedSyntheticsCount = currentSyntheticsCount;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8e46437a7bedf855ec97bc0f5e22ca1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": " public FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "diff": ["-", "-\tint otherBindingsCount = this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length;", "+\tint otherBindingsCount = this.otherBindings == null ? 0 : this.otherBindings.length;", "-\tFieldBinding lastFieldBinding = null;", "-\tTypeBinding lastGenericCast = null;", "-", "+\tFieldBinding lastFieldBinding;", "+\tTypeBinding lastGenericCast;", "+\tTypeBinding lastReceiverType;", "+\tboolean complyTo14 = currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4;", "+\t", "-\t\t\tlastFieldBinding = (FieldBinding) this.codegenBinding;", "+\t\t\tlastFieldBinding = ((FieldBinding) this.binding).original();", "+\t\t\tlastReceiverType = this.actualReceiverType;", "-\t\t\t\tif (lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "+\t\t\t\tif (lastFieldBinding.canBeSeenBy(this.actualReceiverType, this, currentScope)) {", "+\t\t\tlastFieldBinding = null;", "+\t\t\tlastGenericCast = null;", "+\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.binding;", "+\t\t\tlastReceiverType = localBinding.type;", "-\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.codegenBinding;", "+\t\t\tbreak;", "+\t\tdefault : // should not occur", "+\t\t\treturn null;\t\t\t", "-", "-\tif (this.otherCodegenBindings != null) {", "+\tint positionsLength = this.sourcePositions.length;", "+\tFieldBinding initialFieldBinding = lastFieldBinding; // can be null if initial was a local binding", "+\tif (this.otherBindings != null) {", "-\t\t\tFieldBinding nextField = this.otherCodegenBindings[i];", "+\t\t\tint pc = codeStream.position;", "+\t\t\tFieldBinding nextField = this.otherBindings[i].original();", "-\t\t\t\tif (needValue) {", "-\t\t\t\t\tif (lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "-\t\t\t\t\t\tConstant fieldConstant = lastFieldBinding.constant();", "-\t\t\t\t\t\tif (fieldConstant != Constant.NotAConstant) {", "-\t\t\t\t\t\t\tif (lastFieldBinding != this.codegenBinding && !lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "-\t\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tcodeStream.generateConstant(fieldConstant, 0);", "-\t\t\t\t\t\t} else if (lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcodeStream.generateEmulatedReadAccessForField(lastFieldBinding);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (lastGenericCast != null) codeStream.checkcast(lastGenericCast);", "-\t\t\t\t} else {", "-\t\t\t\t\tif (this.codegenBinding != lastFieldBinding && !lastFieldBinding.isStatic()){", "+\t\t\t\tConstant fieldConstant = lastFieldBinding.constant();", "+\t\t\t\tif (fieldConstant != Constant.NotAConstant) {", "+\t\t\t\t\tif (i > 0 && !lastFieldBinding.isStatic()) {", "+\t\t\t\t\t}", "+\t\t\t\t\tif (needValue) {", "+\t\t\t\t\t\tcodeStream.generateConstant(fieldConstant, 0);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (needValue || (i > 0 && complyTo14) || lastGenericCast != null) {", "+\t\t\t\t\t\tif (lastFieldBinding.canBeSeenBy(lastReceiverType, this, currentScope)) {", "+\t\t\t\t\t\t\tMethodBinding accessor = this.syntheticReadAccessors == null ? null : this.syntheticReadAccessors[i];", "+\t\t\t\t\t\t\tif (accessor == null) {", "+\t\t\t\t\t\t\t\tTypeBinding constantPoolDeclaringClass = CodeStream.getConstantPoolDeclaringClass(currentScope, lastFieldBinding, lastReceiverType, i == 0 && this.indexOfFirstFieldBinding == 1);", "+\t\t\t\t\t\t\t\tif (lastFieldBinding.isStatic()) {", "+\t\t\t\t\t\t\t\t\tcodeStream.fieldAccess(Opcodes.OPC_getstatic, lastFieldBinding, constantPoolDeclaringClass);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tcodeStream.fieldAccess(Opcodes.OPC_getfield, lastFieldBinding, constantPoolDeclaringClass);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, accessor, null /* default declaringClass */);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.generateEmulatedReadAccessForField(lastFieldBinding);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (lastGenericCast != null) {", "+\t\t\t\t\t\t\tcodeStream.checkcast(lastGenericCast);", "+\t\t\t\t\t\t\tlastReceiverType = lastGenericCast;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tlastReceiverType = lastFieldBinding.type;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!needValue) codeStream.pop();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (lastFieldBinding == initialFieldBinding) {", "+\t\t\t\t\t\t\tif (lastFieldBinding.isStatic()){", "+\t\t\t\t\t\t\t\t// if no valueRequired, still need possible side-effects of <clinit> invocation, if field belongs to different class", "+\t\t\t\t\t\t\t\tif (initialFieldBinding.declaringClass != this.actualReceiverType.erasure()) {", "+\t\t\t\t\t\t\t\t\tif (lastFieldBinding.canBeSeenBy(lastReceiverType, this, currentScope)) {", "+\t\t\t\t\t\t\t\t\t\tMethodBinding accessor = this.syntheticReadAccessors == null ? null : this.syntheticReadAccessors[i];", "+\t\t\t\t\t\t\t\t\t\tif (accessor == null) {", "+\t\t\t\t\t\t\t\t\t\t\tTypeBinding constantPoolDeclaringClass = CodeStream.getConstantPoolDeclaringClass(currentScope, lastFieldBinding, lastReceiverType, i == 0 && this.indexOfFirstFieldBinding == 1);", "+\t\t\t\t\t\t\t\t\t\t\tcodeStream.fieldAccess(Opcodes.OPC_getstatic, lastFieldBinding, constantPoolDeclaringClass);", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, accessor, null /* default declaringClass */);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tcodeStream.generateEmulatedReadAccessForField(lastFieldBinding);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (!lastFieldBinding.isStatic()){", "+\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "+\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tlastReceiverType = lastFieldBinding.type;", "+\t\t\t\t\t}", "+\t\t\t\t\tif ((positionsLength - otherBindingsCount + i - 1) >= 0) {", "+\t\t\t\t\t\tint fieldPosition = (int) (this.sourcePositions[positionsLength - otherBindingsCount + i - 1] >>>32);", "+\t\t\t\t\t\tcodeStream.recordPositionsFrom(pc, fieldPosition);", "-\t\t\tif (lastFieldBinding != null && !lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "+\t\t\tif (lastFieldBinding != null && !lastFieldBinding.canBeSeenBy(lastReceiverType, this, currentScope)) {", "-\t\t\t}", "+\t\t\t}\t\t\t", "-\treturn lastFieldBinding;", "+\treturn lastFieldBinding;\t"]}], "num": 22010}
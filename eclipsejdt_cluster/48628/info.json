{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49a6e2ed52da6a1ac081d37aabe52a50", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04d8e71863f418487d38a8ba7875d3c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "24cf489e4c973e29dff7eade9d41897f72a37db0", "commitAfterChange": "f924ed86fe1dbe148077a9cade20b11e404ba89b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tboolean match(char patternTypeSuffix, char[] patternPkg, char[] patternTypeName, int matchRule, int typeKind, char[] pkg, char[] typeName)", "signatureAfterChange": " \t \tboolean match(char[] patternPkg, char[] patternTypeName, int matchRule, char[] pkg, char[] typeName)", "diff": ["+\t", "+\tboolean match(char[] patternPkg, char[] patternTypeName, int matchRule, char[] pkg, char[] typeName) {", "+\t\t", "+\t\tboolean isCaseSensitive = (matchRule & SearchPattern.R_CASE_SENSITIVE) != 0;", "+\t\t", "+\t\tif (patternPkg != null && !CharOperation.equals(patternPkg, pkg, true))", "+\t\t\treturn false;", "+\t\t", "+\t\tif (patternTypeName != null) {", "+\t\t\tboolean isCamelCase = (matchRule & (SearchPattern.R_CAMELCASE_MATCH | SearchPattern.R_CAMELCASE_SAME_PART_COUNT_MATCH)) != 0;", "+\t\t\tint matchMode = matchRule & JavaSearchPattern.MATCH_MODE_MASK;", "+\t\t\tif (!isCaseSensitive && !isCamelCase) {", "+\t\t\t\tpatternTypeName = CharOperation.toLowerCase(patternTypeName);", "+\t\t\t}", "+\t\t\tboolean matchFirstChar = !isCaseSensitive || patternTypeName[0] == typeName[0];", "+\t\t\tswitch(matchMode) {", "+\t\t\t\tcase SearchPattern.R_EXACT_MATCH :", "+\t\t\t\t\treturn matchFirstChar && CharOperation.equals(patternTypeName, typeName, isCaseSensitive);", "+\t\t\t\tcase SearchPattern.R_PREFIX_MATCH :", "+\t\t\t\t\treturn matchFirstChar && CharOperation.prefixEquals(patternTypeName, typeName, isCaseSensitive);", "+\t\t\t\tcase SearchPattern.R_PATTERN_MATCH :", "+\t\t\t\t\treturn CharOperation.match(patternTypeName, typeName, isCaseSensitive);", "+\t\t\t\tcase SearchPattern.R_REGEXP_MATCH :", "+\t\t\t\t\t// TODO (frederic) implement regular expression match", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase SearchPattern.R_CAMELCASE_MATCH:", "+\t\t\t\t\tif (matchFirstChar && CharOperation.camelCaseMatch(patternTypeName, typeName, false)) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn !isCaseSensitive && matchFirstChar && CharOperation.prefixEquals(patternTypeName, typeName, false);", "+\t\t\t\tcase SearchPattern.R_CAMELCASE_SAME_PART_COUNT_MATCH:", "+\t\t\t\t\treturn matchFirstChar && CharOperation.camelCaseMatch(patternTypeName, typeName, true);", "+\t\t\t}", "+\t\t}", "+\t\treturn true;", "+", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f1c8537b055f23226b4a60f18e5176e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "7074c59308dc8c330e55b938db8ab604500cf9cc", "commitAfterChange": "969ab36cc555c2b725d4ca76526de3c9dab44ded", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t\t\t\t\tswitch (record.typeSuffix) {", "-\t\t\t\t\t\tcase IIndexConstants.CLASS_SUFFIX :", "-\t\t\t\t\t\t\tnameRequestor.acceptClass(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath, access);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IIndexConstants.INTERFACE_SUFFIX :", "-\t\t\t\t\t\t\tnameRequestor.acceptInterface(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath, access);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IIndexConstants.ENUM_SUFFIX :", "-\t\t\t\t\t\t\t// TODO (frederic) hack to get enum while getting all type names...", "-\t\t\t\t\t\t\tnameRequestor.acceptEnum(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath, access);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IIndexConstants.ANNOTATION_TYPE_SUFFIX :", "-\t\t\t\t\t\t\t// TODO (frederic) hack to get annotation while getting all type names...", "-\t\t\t\t\t\t\tnameRequestor.acceptAnnotation(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath, access);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "+\t\t\t\t\tnameRequestor.acceptType(record.modifiers, record.pkg, record.simpleName, record.enclosingTypeNames, documentPath, access);", "-\t\t\t\t\t\t\t\tswitch(kind) {", "-\t\t\t\t\t\t\t\t\tcase IGenericType.CLASS_DECL:", "-\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, simpleName, enclosingTypeNames, path, null);", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase IGenericType.INTERFACE_DECL:", "-\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, simpleName, enclosingTypeNames, path, null);", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase IGenericType.ENUM_DECL:", "-\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE_DECL:", "-\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tnameRequestor.acceptType(type.getFlags(), packageDeclaration, simpleName, enclosingTypeNames, path, null);", "-\t\t\t\t\t\t\t\t\t\tswitch(typeDeclaration.kind()) {", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.CLASS_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path, null);", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.INTERFACE_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path, null);", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ENUM_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptType(typeDeclaration.modifiers, packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path, null);", "-\t\t\t\t\t\t\t\t\t\tswitch(memberTypeDeclaration.kind()) {", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.CLASS_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path, null);", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.INTERFACE_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path, null);", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ENUM_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptType(memberTypeDeclaration.modifiers, packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path, null);"]}], "num": 48628}
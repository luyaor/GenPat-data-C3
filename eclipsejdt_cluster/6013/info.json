{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4858482232a7199a1f7055348febccd0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64175e79dd573ff55923d5fafd5ead3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["-public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo) {", "+public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess) {", "-\t\tsuper.manageSyntheticReadAccessIfNecessary(currentScope, flowInfo);", "+\t\tsuper.manageSyntheticAccessIfNecessary(currentScope, flowInfo, isReadAccess);", "-\t", "+", "-\t\treturn;", "+\t\treturn;\t", "+\t// if field from parameterized type got found, use the original field at codegen time", "+\tif (this.binding instanceof ParameterizedFieldBinding) {", "+\t    ParameterizedFieldBinding parameterizedField = (ParameterizedFieldBinding) this.binding;", "+\t    this.codegenBinding = parameterizedField.originalField;", "+\t    FieldBinding fieldCodegenBinding = (FieldBinding)this.codegenBinding;", "+\t    // extra cast needed if field type was type variable", "+\t    if ((fieldCodegenBinding.type.tagBits & TagBits.HasTypeVariable) != 0) {", "+\t        this.genericCast = fieldCodegenBinding.type.genericCast(parameterizedField.type);", "+\t    }\t\t    ", "+\t}\t\t", "-//\t\t\tif (((this.bits & DepthMASK) != 0)", "-//\t\t\t\t&& (fieldBinding.isPrivate() // private access", "-//\t\t\t\t\t|| (fieldBinding.isProtected() // implicit protected access", "-//\t\t\t\t\t\t\t&& fieldBinding.declaringClass.getPackage() ", "-//\t\t\t\t\t\t\t\t!= this.delegateThis.type.getPackage()))) {", "-//\t\t\t\tif (this.syntheticAccessors == null)", "-//\t\t\t\t\tthis.syntheticAccessors = new MethodBinding[2];", "-//\t\t\t\tthis.syntheticAccessors[READ] = ", "-//\t\t\t\t\t((SourceTypeBinding)currentScope.enclosingSourceType().", "-//\t\t\t\t\t\tenclosingTypeAt((this.bits & DepthMASK) >> DepthSHIFT)).", "-//\t\t\t\t\t\t\taddSyntheticMethod(fieldBinding, true);", "-//\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldReadAccess(fieldBinding, this);", "-//\t\t\t\treturn;", "-//\t\t\t}", "-\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)this.delegateThis.type);", "-\t\t}", "-\t}", "-}", "+\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding((FieldBinding)this.codegenBinding, (ReferenceBinding)this.delegateThis.type.erasure());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66066103251eaf8f8e19d72797677898", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "16d2f227c83166edb0478b06ddca92e3871fed38", "commitAfterChange": "e914ff2196f00fd15aeda854332ebec940816655", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void manageEnclosingInstanceAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageEnclosingInstanceAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["+ */", "+public void manageEnclosingInstanceAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo) {", "+\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) != 0) return;", "+\tReferenceBinding allocatedTypeErasure = (ReferenceBinding) binding.declaringClass.erasure();", "+", "+\t// perform some emulation work in case there is some and we are inside a local type only", "+\tif (allocatedTypeErasure.isNestedType()", "+\t\t&& currentScope.enclosingSourceType().isLocalType()) {", "+", "+\t\tif (allocatedTypeErasure.isLocalType()) {", "+\t\t\t((LocalTypeBinding) allocatedTypeErasure).addInnerEmulationDependent(currentScope, false);", "+\t\t\t// request cascade of accesses", "+\t\t\t// locally propagate, since we already now the desired shape for sure", "+\t\t\tcurrentScope.propagateInnerEmulation(allocatedTypeErasure, false);", "+\t\t\t// request cascade of accesses", "+\t}", "+}", "-\t */", "-\tpublic void manageEnclosingInstanceAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo) {", "-", "-\t\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0) {", "-\t\tReferenceBinding allocatedTypeErasure = (ReferenceBinding) binding.declaringClass.erasure();", "-", "-\t\t// perform some emulation work in case there is some and we are inside a local type only", "-\t\tif (allocatedTypeErasure.isNestedType()", "-\t\t\t&& currentScope.enclosingSourceType().isLocalType()) {", "-", "-\t\t\tif (allocatedTypeErasure.isLocalType()) {", "-\t\t\t\t((LocalTypeBinding) allocatedTypeErasure).addInnerEmulationDependent(currentScope, false);", "-\t\t\t\t// request cascade of accesses", "-\t\t\t} else {", "-\t\t\t\t// locally propagate, since we already now the desired shape for sure", "-\t\t\t\tcurrentScope.propagateInnerEmulation(allocatedTypeErasure, false);", "-\t\t\t\t// request cascade of accesses", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7dcba064337a4e9a31f44ed3d3957356", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetFieldReference.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["+public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess){", "+\t// if field from parameterized type got found, use the original field at codegen time", "+\tif (this.binding instanceof ParameterizedFieldBinding) {", "+\t    ParameterizedFieldBinding parameterizedField = (ParameterizedFieldBinding) this.binding;", "+\t    this.codegenBinding = parameterizedField.originalField;", "+\t    // extra cast needed if field type was type variable", "+\t    if (this.codegenBinding.type.isTypeVariable()) {", "+\t        TypeVariableBinding variableReturnType = (TypeVariableBinding) this.codegenBinding.type;", "+\t        if (variableReturnType.firstBound != parameterizedField.type) { // no need for extra cast if same as first bound anyway", "+\t\t\t    this.genericCast = parameterizedField.type.erasure();", "+\t        }", "+\t    }", "+\t} else {", "+\t    this.codegenBinding = this.binding;", "- */", "-public void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo){", "-\t// The private access will be managed through the code generation", "-", "-\tif (!flowInfo.isReachable()) return;", "-\t", "+\t\t", "-\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(this.binding, (ReferenceBinding)this.delegateThis.type);", "+\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(this.codegenBinding, (ReferenceBinding)this.delegateThis.type.erasure());", "-\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(this.binding, (ReferenceBinding) this.receiverType);", "+\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(this.codegenBinding, (ReferenceBinding) this.receiverType.erasure());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ec483f997943155fbed8e5a864ec12c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "a184055df3953fc7636d02b495d8ddad60f03a7d", "commitAfterChange": "6ec8b600d2528691e914df35d7ab6d321bfc7cb2", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void manageSyntheticAccessIfNecessary( \t\t\tBlockScope currentScope, \t\t\tFieldBinding fieldBinding, \t\t\tTypeBinding lastReceiverType, \t\t\tint index, \t\t\tFlowInfo flowInfo)", "signatureAfterChange": " \tpublic void manageSyntheticAccessIfNecessary( \t\t\tBlockScope currentScope, \t\t\tFieldBinding fieldBinding, \t\t\tTypeBinding lastReceiverType, \t\t\tint index, \t\t\tFlowInfo flowInfo)", "diff": ["-\t\tif (fieldBinding instanceof ParameterizedFieldBinding) {", "-\t\t    ParameterizedFieldBinding parameterizedField = (ParameterizedFieldBinding) fieldBinding;", "-\t\t    FieldBinding originalField = parameterizedField.originalField;", "-\t\t    TypeBinding requiredGenericCast = null;", "-\t\t    // extra cast needed if field type was type variable", "-\t\t    if ((originalField.type.tagBits & TagBits.HasTypeVariable) != 0) {", "-\t\t        requiredGenericCast = originalField.type.genericCast(parameterizedField.type);", "-\t\t    }\t\t    ", "-\t\t    setCodegenBinding(fieldBinding, index, originalField, requiredGenericCast);", "+\t\tFieldBinding originalField = fieldBinding.original();", "+\t\tif (originalField != fieldBinding) {", "+\t\t\tsetCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index, originalField);", "-\t\t    FieldBinding someCodegenBinding = getCodegenBinding(fieldBinding, index);", "+\t\t    FieldBinding someCodegenBinding = getCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index);", "-\t\t\t    FieldBinding someCodegenBinding = getCodegenBinding(fieldBinding, index);", "+\t\t\t    FieldBinding someCodegenBinding = getCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index);", "-\t\t            fieldBinding, ", "-\t\t            index, ", "+\t\t            index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index, ", "-\t\t                    getCodegenBinding(fieldBinding, index), ", "-\t\t                    (ReferenceBinding)lastReceiverType.erasure()), ", "-\t\t         \tnull/*reuse existing*/);", "+\t\t                    getCodegenBinding(index < 0 ? (this.otherBindings == null ? 0 : this.otherBindings.length) : index), ", "+\t\t                    (ReferenceBinding)lastReceiverType.erasure()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3ca6648343c2518bf303c6a25874e1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["+", "+\t// if method from parameterized type got found, use the original method at codegen time", "+\tthis.codegenBinding = this.binding.original();", "+\tif (this.codegenBinding != this.binding) {", "+\t    // extra cast needed if method return type was type variable", "+\t    if (this.codegenBinding.returnType.isTypeVariable()) {", "+\t        TypeVariableBinding variableReturnType = (TypeVariableBinding) this.codegenBinding.returnType;", "+\t        if (variableReturnType.firstBound != this.binding.returnType) { // no need for extra cast if same as first bound anyway", "+\t\t\t    this.genericCast = this.binding.returnType;", "+\t        }", "+\t    }", "+\t} ", "-\t\t\t\t&& (!this.receiver.isImplicitThis() || !this.binding.isStatic())", "+\t\t\t\t&& (!this.receiver.isImplicitThis() || !this.codegenBinding.isStatic())", "-\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedMethodBinding(this.binding, (ReferenceBinding) this.qualifyingType);", "+\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedMethodBinding(this.codegenBinding, (ReferenceBinding) this.qualifyingType.erasure());"]}], "num": 6013}
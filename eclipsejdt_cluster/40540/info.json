{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e7b51c0de1448056ae95dbe516a164ec", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0775ddf7d49ceb725d4556ba3e7895bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "618f3771c49dbf9480ae16a58263680af2b36ad6", "commitAfterChange": "7cfc4523cdcfe787f1d0d2fd75b08c06e5b4b089", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate Expression parseMember(TypeReference receiver) throws InvalidInputException", "signatureAfterChange": " \tprotected Object createFieldReference(Object receiver) throws InvalidInputException", "diff": ["-\t */", "-\tprivate Expression parseMember(TypeReference receiver) throws InvalidInputException {", "-\t\t// Init", "-\t\tthis.identifierPtr = -1;", "-\t\tthis.identifierLengthPtr = -1;", "-\t\tint start = this.scanner.getCurrentTokenStartPosition();", "-\t\t", "-\t\t// Get type ref", "-\t\tTypeReference typeRef = receiver;", "-\t\tif (typeRef == null) {", "-\t\t\tchar[] name = this.sourceParser.compilationUnit.compilationResult.compilationUnit.getMainTypeName();", "-\t\t\tif (name == null) {", "-\t\t\t}", "-\t\t\ttypeRef = new JavadocSingleTypeReference(name, 0, 0, 0);", "-\t\t", "-\t\t// Get member identifier", "-\t\tif (readToken() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\tconsumeToken();", "-\t\t\tpushIdentifier(true);", "-\t\t\tif (readToken() == TerminalTokens.TokenNameLPAREN) {", "-\t\t\t\tconsumeToken();", "-\t\t\t\tstart = this.scanner.getCurrentTokenStartPosition();", "-\t\t\t\ttry {", "-\t\t\t\t\treturn parseArguments(typeRef);", "-\t\t\t\t} catch (InvalidInputException e) {", "-\t\t\t\t\tint end = this.scanner.getCurrentTokenEndPosition() < this.lineEnd ?", "-\t\t\t\t\t\t\tthis.scanner.getCurrentTokenEndPosition() :", "-\t\t\t\t\t\t\tthis.scanner.getCurrentTokenStartPosition();", "-\t\t\t\t\tend = end < this.lineEnd ? end : this.lineEnd;", "-\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidSeeReferenceArgs(start, end);", "+\t */", "+\tprotected Object createFieldReference(Object receiver) throws InvalidInputException {", "+\t\ttry {", "+\t\t\t// Get receiver type", "+\t\t\tTypeReference typeRef = (TypeReference) receiver;", "+\t\t\tif (typeRef == null) {", "+\t\t\t\tchar[] name = this.sourceParser.compilationUnit.compilationResult.compilationUnit.getMainTypeName();", "+\t\t\t\tif (name == null) {", "+\t\t\t\t\tthrow new InvalidInputException();", "-\t\t\t\treturn null;", "+\t\t\t\ttypeRef = new JavadocSingleTypeReference(name, 0, 0, 0);", "+\t\t\t// Create field", "-\t\tint end = getEndPosition() - 1;", "-\t\tend = start > end ? getEndPosition() : end;", "-\t\tthis.sourceParser.problemReporter().javadocInvalidSeeReference(start, end);", "-\t\treturn null;", "+\t\tcatch (ClassCastException ex) {", "+\t\t\t\tthrow new InvalidInputException();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f60e8b9a49d5979b7cfce709fb35bf5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "699215793f6c771df4f6c05d0fd6d408e6e8ea25", "commitAfterChange": "7c75b71dc761335a5b43def3cb4225bee0fd73f3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void checkComment()", "signatureAfterChange": " public void checkComment()", "diff": ["-\t// discard obsolete comments while inside methods or fields initializer (see bug 74369)", "-\tif (!(this.diet && this.dietInt==0) && this.scanner.commentPtr >= 0) {", "-\t\tflushCommentsDefinedPriorTo(this.endStatementPosition);", "-\t}", "-\t", "-\tint lastComment = this.scanner.commentPtr;", "-\t", "-\tif (this.modifiersSourceStart >= 0) {", "-\t\t// eliminate comments located after modifierSourceStart if positionned", "-\t\twhile (lastComment >= 0 && Math.abs(this.scanner.commentStarts[lastComment]) > this.modifiersSourceStart) lastComment--;", "-\t}", "-\tif (lastComment >= 0) {", "-\t\t// consider all remaining leading comments to be part of current declaration", "-\t\tthis.modifiersSourceStart = Math.abs(this.scanner.commentStarts[0]); ", "-\t", "-\t\t// check deprecation in last comment if javadoc (can be followed by non-javadoc comments which are simply ignored)\t", "-\t\twhile (lastComment >= 0 && this.scanner.commentStops[lastComment] < 0) lastComment--; // non javadoc comment have negative end positions", "-\t\tif (lastComment >= 0 && this.javadocParser != null) {", "-\t\t\tint commentEnd = this.scanner.commentStops[lastComment] - 1; //stop is one over,", "-\t\t\t// do not report problem before last parsed comment while recovering code...", "-\t\t\tthis.javadocParser.reportProblems = this.currentElement == null || commentEnd > this.lastJavadocEnd;", "-\t\t\tif (this.javadocParser.checkDeprecation(lastComment)) {", "-\t\t\t\tcheckAndSetModifiers(ClassFileConstants.AccDeprecated);", "-\t\t\t}", "-\t\t\tthis.javadoc = this.javadocParser.docComment;\t// null if check javadoc is not activated", "-\t\t\tif (currentElement == null) this.lastJavadocEnd = commentEnd;", "-\t\t}", "-\t}", "+\tsuper.checkComment();"]}], "num": 40540}
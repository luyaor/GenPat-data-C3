{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cd2873f488ae6d77f29c1e821c2bd7a5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b5ac58bc9cfddae58610d6efc20f584", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "667b6c6169416d9b79d86e73c3fa9c45930c36a8", "commitAfterChange": "8e69d36fa08db2d61d2c40fecd2494cfd19819f5", "methodNumberBeforeChange": 613, "methodNumberAfterChange": 613, "signatureBeforeChange": " public void testBug286379c() throws CoreException", "signatureAfterChange": " public void testBug286379c() throws CoreException", "diff": ["-\t\tboolean valid = false;", "+\t\tboolean toRemPresent = false;", "-\t\t\tthis.valid = validate(event.getDelta());", "+\t\t\tthis.toRemPresent = validate(event.getDelta());", "-\t// print statement to debug random failures of this test", "-\tJavaModelManager.DEBUG_302850 = true;", "-\tSystem.out.println(\"================================================================================\");", "-\tSystem.out.println(\"Starting test JavaSearchBugTests.testBug286379c()...\");", "-\tSystem.out.println(\"\t- Default Options at test start:\");", "-\tSystem.out.println(Util.indentString(new CompilerOptions(JavaCore.getDefaultOptions()).toString(), 1));", "-\tSystem.out.println(\"\t- Options at test start:\");", "-\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "-\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "-\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\tSystem.out.println(Util.indentString(new CompilerOptions(JavaCore.getOptions()).toString(), 2));", "-\t\twhile (!changeListener.valid) {", "+\t\twhile (!changeListener.toRemPresent) {", "-\t\t// print statement to debug random failures of this test", "-\t\tSystem.out.println(\"\t- Options before first exit:\");", "-\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "-\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "-\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\tSystem.out.println(Util.indentString(new CompilerOptions(JavaCore.getOptions()).toString(), 2));", "-\t\t// print statement to debug random failures of this test", "-\t\tSystem.out.println(\"\t- Options after first restart:\");", "-\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "-\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "-\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\tSystem.out.println(Util.indentString(new CompilerOptions(JavaCore.getOptions()).toString(), 2));", "+\t\tchangeListener.toRemPresent = true;", "+\t\tcounter = 0;", "+\t\twhile (changeListener.toRemPresent) {", "+\t\t\ttry {", "+\t\t\t\tThread.sleep(100);", "+\t\t\t}", "+\t\t\tcatch (InterruptedException ie) {", "+\t\t\t\t// skip", "+\t\t\t}", "+\t\t\tassertTrue(\"We should have got a resource event within a 10s delay!\", counter++ < 100);", "+\t\t}", "+\t\twaitUntilIndexesReady();", "-\t\t// print statement to debug random failures of this test", "-\t\tSystem.out.println(\"\t- Options before second exit:\");", "-\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "-\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "-\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\tSystem.out.println(Util.indentString(new CompilerOptions(JavaCore.getOptions()).toString(), 2));", "-\t\tsimulateRestart();\t", "-\t\t// print statement to debug random failures of this test", "-\t\tSystem.out.println(\"\t- Options after second restart:\");", "-\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "-\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "-\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "+\t\tsimulateRestart();", "-\t\tSystem.out.println(\"\t- Options after search:\");", "-\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "-\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "-\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\tSystem.out.println(Util.indentString(new CompilerOptions(JavaCore.getOptions()).toString(), 2));", "-\t\tSystem.out.println(\"\t- Options at test end:\");", "-\t\tSystem.out.println(\"\t\t+ Task tags:           \" + JavaCore.getOption(JavaCore.COMPILER_TASK_TAGS));", "-\t\tSystem.out.println(\"\t\t+ Task priorities:     \" + JavaCore.getOption(JavaCore.COMPILER_TASK_PRIORITIES));", "-\t\tSystem.out.println(\"\t\t+ Forbidden reference: \" + JavaCore.getOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE));", "-\t\tSystem.out.println(Util.indentString(new CompilerOptions(JavaCore.getOptions()).toString(), 2));", "-\t\tSystem.out.println(\"\t- Default Options at test end:\");", "-\t\tSystem.out.println(Util.indentString(new CompilerOptions(JavaCore.getDefaultOptions()).toString(), 2));", "-\t\tJavaModelManager.DEBUG_302850 = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d963623f23b138a60f3883efae49597", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "61910f9ffdfc607d31120af5ce39e6bf8d69bab0", "commitAfterChange": "3a10f90d587275b68cb248facf53e1ae26bb70b8", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 66, "signatureBeforeChange": "  \tprotected void runNegativeTestWithExecution( \t\t\tString[] testFiles,  \t\t\tString expectedProblemLog,  \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tString[] classLib, \t\t\tboolean shouldFlushOutputDirectory,  \t\t\tString[] vmArguments,  \t\t\tMap customOptions, \t\t\tICompilerRequestor clientRequestor)", "signatureAfterChange": " \tprotected void runNegativeTestWithExecution( \t\t\tString[] testFiles,  \t\t\tString expectedCompilerLog,  \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tString[] classLibraries, \t\t\tboolean shouldFlushOutputDirectory,  \t\t\tString[] vmArguments,  \t\t\tMap customOptions, \t\t\tICompilerRequestor clientRequestor)", "diff": ["+\t// WORK candidate for elimination (5 calls)", "-\t\t\tString expectedProblemLog, ", "+\t\t\tString expectedCompilerLog, ", "-\t\t\tString[] classLib,", "+\t\t\tString[] classLibraries,", "-", "-\t\tif (shouldFlushOutputDirectory)", "-\t\t\tUtil.flushDirectoryContent(new File(OUTPUT_DIR));", "-", "-\t\tIProblemFactory problemFactory = getProblemFactory();", "-\t\tRequestor requestor = ", "-\t\t\tnew Requestor(", "-\t\t\t\tproblemFactory, ", "-\t\t\t\tOUTPUT_DIR.endsWith(File.separator) ? OUTPUT_DIR : OUTPUT_DIR + File.separator, ", "-\t\t\t\ttrue,", "-\t\t\t\tclientRequestor,", "-\t\t\t\tfalse /*show category*/,", "-\t\t\t\tfalse /*show warning token*/);", "-", "-\t\tMap options = getCompilerOptions();", "-\t\tif (customOptions != null) {", "-\t\t\toptions.putAll(customOptions);", "-\t\t}", "-\t\tCompilerOptions compilerOptions = new CompilerOptions(options);", "-\t\tcompilerOptions.performMethodsFullRecovery = false;", "-\t\tcompilerOptions.performStatementsRecovery = false;", "-\t\tCompiler batchCompiler = ", "-\t\t\tnew Compiler(", "-\t\t\t\tgetNameEnvironment(new String[]{}, classLib), ", "-\t\t\t\tgetErrorHandlingPolicy(), ", "-\t\t\t\tcompilerOptions,", "-\t\t\t\trequestor, ", "-\t\t\t\tproblemFactory);", "-\t\tbatchCompiler.options.produceReferenceInfo = true;", "-\t\ttry {", "-\t\t\tbatchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together", "-\t\t} catch(RuntimeException e) {", "-\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\te.printStackTrace();", "-\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tthrow e;", "-\t\t}", "-\t\tassertTrue(\"Must have errors\", requestor.hasErrors);", "-\t\t", "-\t\tString computedProblemLog = Util.convertToIndependantLineDelimiter(requestor.problemLog.toString());", "-\t\tString platformIndependantExpectedLog = Util.convertToIndependantLineDelimiter(expectedProblemLog);", "-\t\tif (!platformIndependantExpectedLog.equals(computedProblemLog)) {", "-\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\tSystem.out.println(Util.displayString(computedProblemLog, INDENT, SHIFT));", "-\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t\t}", "-\t\t\tassertEquals(\"Invalid problem log \", platformIndependantExpectedLog, computedProblemLog);", "-\t\t}", "-\t\t", "-\t\tString sourceFile = testFiles[0];", "-", "-\t\t// Compute class name by removing \".java\" and replacing slashes with dots", "-\t\tString className = sourceFile.substring(0, sourceFile.length() - 5).replace('/', '.').replace('\\\\', '.');", "-\t\tif (className.endsWith(PACKAGE_INFO_NAME)) return;", "-", "-\t\tif (vmArguments != null) {", "-\t\t\tif (this.verifier != null) {", "-\t\t\t\tthis.verifier.shutDown();", "-\t\t\t}", "-\t\t\tthis.verifier = new TestVerifier(false);", "-\t\t\tthis.createdVerifier = true;", "-\t\t}", "-\t\tboolean passed = ", "-\t\t\tthis.verifier.verifyClassFiles(", "-\t\t\t\tsourceFile, ", "-\t\t\t\tclassName,", "-\t\t\t\texpectedOutputString /* expectedOutputString */,", "-\t\t\t\texpectedErrorString /* expectedErrorString */,", "-\t\t\t\tthis.classpaths, ", "-\t\t\t\tnull, ", "-\t\t\t\tvmArguments);", "-\t\tif (!passed) {", "-\t\t\tString platformIndependantExpectedSuccessOutputString = Util.convertToIndependantLineDelimiter(expectedOutputString);", "-\t\t\tString platformIndependantFailureReason = Util.convertToIndependantLineDelimiter(this.verifier.failureReason);", "-\t\t\tif (platformIndependantFailureReason.indexOf(platformIndependantExpectedSuccessOutputString) == -1) {", "-\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\t\tSystem.out.println(Util.displayString(platformIndependantFailureReason, INDENT, SHIFT));", "-\t\t\t\tassertEquals(\"Invalid runtime log \", platformIndependantExpectedSuccessOutputString, platformIndependantFailureReason);", "-\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else if (vmArguments != null) {", "-\t\t\tif (this.verifier != null) {", "-\t\t\t\tthis.verifier.shutDown();", "-\t\t\t}", "-\t\t\tthis.verifier = new TestVerifier(false);", "-\t\t\tthis.createdVerifier = true;", "-\t\t}", "+\t\trunTest(", "+\t \t\t// test directory preparation", "+\t\t\tshouldFlushOutputDirectory /* should flush output directory */,", "+\t\t\ttestFiles /* test files */,", "+\t\t\t// compiler options", "+\t\t\tclassLibraries /* class libraries */,", "+\t\t\tcustomOptions /* custom options */,", "+\t\t\tfalse /* do not perform statements recovery */, ", "+\t\t\tnull /* no custom requestor */,", "+\t\t\t// compiler results", "+\t\t\texpectedCompilerLog == null || /* expecting compiler errors */", "+\t\t\t\texpectedCompilerLog.indexOf(\"ERROR\") != -1,", "+\t\t\texpectedCompilerLog /* expected compiler log */,", "+\t\t\t// runtime options", "+\t\t\ttrue /* force execution */,", "+\t\t\tvmArguments /* vm arguments */, ", "+\t\t\t// runtime results", "+\t\t\texpectedOutputString /* expected output string */,", "+\t\t\texpectedErrorString /* expected error string */,", "+\t\t\t// javac options", "+\t\t\tJavacTestOptions.DEFAULT /* default javac test options */);", "+\t\t// WORK javac tests did not exist in the original"]}], "num": 54413}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a1bb8b97a9162f9535d7c06aed84207", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c623351ddf313e7478d9776d6626f752", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "c9501f1b311a37a6bc557906befa511b836ae3dc", "commitAfterChange": "a8799ff4d554e2f00a886a5ef075289e2b738d32", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tpublic static IPath canonicalizedPath(IPath externalPath)", "signatureAfterChange": "\r \tpublic static IPath canonicalizedPath(IPath externalPath)", "diff": ["-\t\t// keep only segments that were in original path and device if it was there\r", "-\t\tIPath result =\r", "-\t\t\tcanonicalPath.removeFirstSegments(\r", "-\t\t\t\tcanonicalPath.segmentCount() - externalPath.segmentCount());\r", "+\t\t\r", "+\t\tIPath result;\r", "+\t\tif (externalPath.isAbsolute()) {\r", "+\t\t\tresult = canonicalPath;\r", "+\t\t} else {\r", "+\t\t\t// if path is relative, remove the first segments that were added by the java.io.File canonicalization\r", "+\t\t\t// e.g. 'lib/classes.zip' was converted to 'd:/myfolder/lib/classes.zip'\r", "+\t\t\tint externalLength = externalPath.segmentCount();\r", "+\t\t\tint canonicalLength = canonicalPath.segmentCount();\r", "+\t\t\tif (canonicalLength > externalLength) {\r", "+\t\t\t\tresult = canonicalPath.removeFirstSegments(canonicalLength - externalLength);\r", "+\t\t\t} else {\r", "+\t\t\t\tresult = canonicalPath;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t\r", "+\t\t// keep device only if it was specified (this is because File.getCanonicalPath() converts '/lib/classed.zip' to 'd:/lib/classes/zip')\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c647132cb97ce0e9e8246d5bf63929eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "15336591549f8699768017957a1468effc794fa4", "commitAfterChange": "a7116ba747c4c0c7d306d5c170ed0c79f4ee0ea2", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tpublic static JavaElement getUnresolvedJavaElement(MethodBinding methodBinding, WorkingCopyOwner workingCopyOwner, BindingsToNodesMap bindingsToNodes)", "signatureAfterChange": " \tpublic static JavaElement getUnresolvedJavaElement(MethodBinding methodBinding, WorkingCopyOwner workingCopyOwner, BindingsToNodesMap bindingsToNodes)", "diff": ["-\t\t\t\tparameterSignatures[declaringIndex + i] = new String(parameters[i].genericTypeSignature()).replace('/', '.');", "+\t\t\t\tchar[] signature = parameters[i].genericTypeSignature();", "+\t\t\t\tif (isBinary) {", "+\t\t\t\t\tsignature = CharOperation.replaceOnCopy(signature, '/', '.');", "+\t\t\t\t} else {", "+\t\t\t\t\tsignature = toUnresolvedTypeSignature(signature);", "+\t\t\t\t}", "+\t\t\t\tparameterSignatures[declaringIndex + i] = new String(signature);", "+\t\t\t\treturn (JavaElement) result;", "+\t\t\tif (result.exists()) // if perfect match (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=249567 )"]}], "num": 56572}
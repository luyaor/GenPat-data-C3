{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f65d47cbf1b54ca8add0d655e32791a7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3166123ca9e993effed3d07fe0e92708", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "8a64589617f7b80b7f12bb3f773ab58c605663c7", "commitAfterChange": "6585c7471e2cc73387fb0d652a600f2678de9051", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 31, "signatureBeforeChange": "  \tpublic void printModifiers()", "signatureAfterChange": "  \tpublic void printModifiers()", "diff": ["-", "-\tpublic void printModifiers() {", "-\t\t", "-\t\ttry {", "-\t\t\tboolean firstComment = true;", "-\t\t\tboolean isFirstModifier = true;", "-\t\t\tint currentTokenStartPosition = this.scanner.currentPosition;", "-\t\t\twhile ((this.currentToken = this.scanner.getNextToken()) != ITerminalSymbols.TokenNameEOF) {", "-\t\t\t\tswitch(this.currentToken) {", "-\t\t\t\t\tcase ITerminalSymbols.TokenNamepublic :", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameprotected :", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameprivate :", "-\t\t\t\t\tcase ITerminalSymbols.TokenNamestatic :", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameabstract :", "-\t\t\t\t\tcase ITerminalSymbols.TokenNamefinal :", "-\t\t\t\t\tcase ITerminalSymbols.TokenNamenative :", "-\t\t\t\t\tcase ITerminalSymbols.TokenNamesynchronized :", "-\t\t\t\t\tcase ITerminalSymbols.TokenNametransient :", "-\t\t\t\t\tcase ITerminalSymbols.TokenNamevolatile :", "-\t\t\t\t\t\tfirstComment = false;", "-\t\t\t\t\t\tthis.print(this.scanner.getRawTokenSource(), this.scanner.getCurrentTokenStartPosition(), !isFirstModifier);", "-\t\t\t\t\t\tisFirstModifier = false;", "-\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.getCurrentTokenStartPosition();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_BLOCK :", "-\t\t\t\t\t\tthis.printBlockComment(this.scanner.getRawTokenSource(), this.scanner.getCurrentTokenStartPosition(), false);", "-\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\t\tif (firstComment) {", "-\t\t\t\t\t\t\tthis.printNewLine();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tfirstComment = false;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_JAVADOC :", "-\t\t\t\t\t\tthis.printBlockComment(this.scanner.getRawTokenSource(), this.scanner.getCurrentTokenStartPosition(), true);", "-\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\t\tif (firstComment) {", "-\t\t\t\t\t\t\tthis.printNewLine();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tfirstComment = false;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_LINE :", "-\t\t\t\t\t\tthis.printCommentLine(this.scanner.getRawTokenSource(), this.scanner.getCurrentTokenStartPosition());", "-\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameWHITESPACE :", "-\t\t\t\t\t\t// TODO add a remove edit", "-\t\t\t\t\t    currentTokenStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\t// step back one token", "-\t\t\t\t\t\tfirstComment = false;", "-\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "-\t\t\t\t\t\treturn;\t\t\t\t\t", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (InvalidInputException e) {", "-\t\t\tthrow new AbortFormatting(e);", "-\t\t}", "-\t}", "+", "+\tpublic void printModifiers() {", "+\t\t", "+\t\ttry {", "+\t\t\tboolean isFirstModifier = true;", "+\t\t\tint currentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\tboolean hasComment = false;", "+\t\t\twhile ((this.currentToken = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\tswitch(this.currentToken) {", "+\t\t\t\t\tcase TerminalTokens.TokenNamepublic :", "+\t\t\t\t\tcase TerminalTokens.TokenNameprotected :", "+\t\t\t\t\tcase TerminalTokens.TokenNameprivate :", "+\t\t\t\t\tcase TerminalTokens.TokenNamestatic :", "+\t\t\t\t\tcase TerminalTokens.TokenNameabstract :", "+\t\t\t\t\tcase TerminalTokens.TokenNamefinal :", "+\t\t\t\t\tcase TerminalTokens.TokenNamenative :", "+\t\t\t\t\tcase TerminalTokens.TokenNamesynchronized :", "+\t\t\t\t\tcase TerminalTokens.TokenNametransient :", "+\t\t\t\t\tcase TerminalTokens.TokenNamevolatile :", "+\t\t\t\t\t\tthis.print(this.scanner.getRawTokenSource(), !isFirstModifier);", "+\t\t\t\t\t\tisFirstModifier = false;", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_BLOCK :", "+\t\t\t\t\t\tthis.printBlockComment(this.scanner.getRawTokenSource(), false);", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\thasComment = true;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_JAVADOC :", "+\t\t\t\t\t\tthis.printBlockComment(this.scanner.getRawTokenSource(), true);", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\thasComment = true;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_LINE :", "+\t\t\t\t\t\tthis.printCommentLine(this.scanner.getRawTokenSource());", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE :", "+\t\t\t\t\t\taddDeleteEdit(this.scanner.getCurrentTokenStartPosition(), this.scanner.getCurrentTokenEndPosition());", "+\t\t\t\t\t\tint count = 0;", "+\t\t\t\t\t\tchar[] whiteSpaces = this.scanner.getCurrentTokenSource();", "+\t\t\t\t\t\tfor (int i = 0, max = whiteSpaces.length; i < max; i++) {", "+\t\t\t\t\t\t\tswitch(whiteSpaces[i]) {", "+\t\t\t\t\t\t\t\tcase '\\r' :", "+\t\t\t\t\t\t\t\t\tif ((i + 1) < max) {", "+\t\t\t\t\t\t\t\t\t\tif (whiteSpaces[i + 1] == '\\n') {", "+\t\t\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tcount++; ", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase '\\n' :", "+\t\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (count >= 1 && hasComment) {", "+\t\t\t\t\t\t\tprintNewLine();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\thasComment = false;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\t// step back one token", "+\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "+\t\t\t\t\t\treturn;\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (InvalidInputException e) {", "+\t\t\tthrow new AbortFormatting(e);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4b5ac8c115cff1183e2098c2139ec71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "0241b6a034ef8fa4f27f3bd260b936d3f2c0aea7", "commitAfterChange": "99074098c6405e18b1f1a04aabe7c2838c777448", "methodNumberBeforeChange": 126, "methodNumberAfterChange": 126, "signatureBeforeChange": " public void illegalInstanceOfGenericType(TypeBinding checkedType, ASTNode location)", "signatureAfterChange": " public void illegalInstanceOfGenericType(TypeBinding checkedType, ASTNode location)", "diff": ["-\tif (checkedType.isTypeVariable()) {", "+\tTypeBinding erasedType = checkedType.leafComponentType().erasure();", "+\tStringBuffer recommendedFormBuffer = new StringBuffer(10);", "+\trecommendedFormBuffer.append(erasedType.sourceName());", "+\tint count = erasedType.typeVariables().length;", "+\tif (count > 0) {", "+\t\trecommendedFormBuffer.append('<');", "+\t\tfor (int i = 0; i < count; i++) {", "+\t\t\tif (i > 0) {", "+\t\t\t\trecommendedFormBuffer.append(',');", "+\t\t\t}", "+\t\t\trecommendedFormBuffer.append('?');", "+\t\t}", "+\t\trecommendedFormBuffer.append('>');", "+\t}", "+\tfor (int i = 0, dim = checkedType.dimensions(); i < dim; i++) {", "+\t\trecommendedFormBuffer.append(\"[]\"); //$NON-NLS-1$", "+\t}", "+\tString recommendedForm = recommendedFormBuffer.toString();", "+\tif (checkedType.leafComponentType().isTypeVariable()) {", "-\t\tIProblem.IllegalInstanceofTypeParameter,", "-\t\t\tnew String[] { new String(checkedType.readableName()), new String(checkedType.erasure().readableName())},", "-\t\t\tnew String[] { new String(checkedType.shortReadableName()), new String(checkedType.erasure().shortReadableName())},", "-\t\t\tlocation.sourceStart,", "-\t\t\tlocation.sourceEnd);", "+\t\t\tIProblem.IllegalInstanceofTypeParameter,", "+\t\t\tnew String[] { new String(checkedType.readableName()), recommendedForm, },", "+\t\t\tnew String[] { new String(checkedType.shortReadableName()), recommendedForm, },", "+\t\t\t\tlocation.sourceStart,", "+\t\t\t\tlocation.sourceEnd);", "-\t\tnew String[] { new String(checkedType.readableName()), new String(checkedType.erasure().sourceName())},", "-\t\tnew String[] { new String(checkedType.shortReadableName()), new String(checkedType.erasure().sourceName())},", "+\t\tnew String[] { new String(checkedType.readableName()), recommendedForm, },", "+\t\tnew String[] { new String(checkedType.shortReadableName()), recommendedForm, },"]}], "num": 32243}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4ab9f5d14b5b11c4eb065bee65f4ef3b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d3d6b7efcc77cae34d355157153a690", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "d5a8002dc2e54e83510f5a6b529dcb15e511539a", "commitAfterChange": "00d7c0a0842f4eb4fa20afa158d7a8be8fc57a6e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic MethodBinding tiebreakMethod()", "signatureAfterChange": " \tpublic MethodBinding tiebreakMethod()", "diff": ["+\t */", "-\t\t\tif (this.isStatic()) {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tnewArguments[i] =  originalVariables[i].upperBound(); // do not rawify", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tnewArguments[i] =  environment.convertToRawType(originalVariables[i].upperBound());", "-\t\t\t\t}", "+\t\t\tboolean isStatic = this.isStatic();", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tnewArguments[i] = isStatic ? ", "+\t\t\t\t\toriginalVariables[i].upperBound() : // do not rawify for statics", "+\t\t\t\t\tenvironment.convertToRawType(originalVariables[i].upperBound());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14127f4b7837f63467138d43c4a34a95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFilePool.java", "commitBeforeChange": "4a3b8d7f66c815bfc252f4ffc29a63c010eff917", "commitAfterChange": "2eb63d812179e5217306b90a651b95bfe7169c81", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void release(ClassFile classFile)", "signatureAfterChange": " public synchronized void release(ClassFile classFile)", "diff": ["-", "-public void release(ClassFile classFile) {", "-\tfor (int i = 0; i < POOL_SIZE; i++) {", "-\t\tClassFile currentClassFile = this.classFiles[i];", "-\t\tif (currentClassFile == classFile) {", "-\t\t\tclassFile.isShared = false;", "-\t\t\treturn;", "-\t\t}", "-\t}", "-}", "+public synchronized void release(ClassFile classFile) {", "+\tclassFile.isShared = false;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "261295093e7e08ef31479d5851c96024", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterCommentsMassiveTests.java", "commitBeforeChange": "4253c3857fdc6ac2b7d8f2fab949e195fec88f49", "commitAfterChange": "72ac6cbecbda631e09e5ff29bcd95cc93135ab26", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  private String cleanBlankLinesAfterLineComment(String comment)", "signatureAfterChange": "  private String cleanBlankLinesAfterLineComment(String comment)", "diff": ["-\tint ch =  comment.charAt(length-1);", "-\tif (ch == '\\r') {", "+\tif (comment.charAt(length-1) == '\\n') {", "-\t\tif (ch == '\\n') {", "+\t\tif (comment.charAt(length-1) == '\\r') {", "-\t} else if (ch == '\\n') {", "-\t\tlength--;", "-\t\treturn comment.substring(0, length);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4047fa289282aa9c0b617b9d5724f8d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/AbstractASTTests.java", "commitBeforeChange": "ff1eb602a8aea39b1e15b206441aadf76bfaa984", "commitAfterChange": "dc5ee42cb3e5694c60c3a1f62c20766cb3cb2274", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t\t \t\tpublic int indexOfASTStart(int astStart)", "signatureAfterChange": " \t\t \t\tpublic int indexOfASTStart(int astStart)", "diff": ["-\t\t\tfor (int i = 0, length = this.astStarts.length; i < length; i++)", "+\t\t\treturn this.indexOfASTStart(astStart, 0);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58ef1eac69a04cbed7184a6106ec5797", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "d9fda77d232da7f091dc88d9a558643b5c785959", "commitAfterChange": "ba572e75ccc281ead35081ded887517feadc6035", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public AnnotationBinding[][] getParameterAnnotations()", "signatureAfterChange": " public AnnotationBinding[][] getParameterAnnotations()", "diff": ["-\tif (allParameterAnnotations == null) {", "+\tif (allParameterAnnotations == null && (this.tagBits & TagBits.HasParameterAnnotations) != 0) {", "-\t\tif ((this.tagBits & TagBits.HasParameterAnnotations) != 0) {", "-\t\t\t// forward reference to method, where param annotations have not yet been associated to method", "-\t\t\tif (this.declaringClass instanceof SourceTypeBinding) {", "-\t\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) this.declaringClass;", "-\t\t\t\tif (sourceType.scope != null) {", "-\t\t\t\t\tAbstractMethodDeclaration methodDecl = sourceType.scope.referenceType().declarationOf(this);", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tArgument argument = methodDecl.arguments[i];", "-\t\t\t\t\t\tif (argument.annotations != null) {", "-\t\t\t\t\t\t\tASTNode.resolveAnnotations(methodDecl.scope, argument.annotations, argument.binding);", "-\t\t\t\t\t\t\tallParameterAnnotations[i] = argument.binding.getAnnotations();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\tallParameterAnnotations[i] = Binding.NO_ANNOTATIONS;", "+\t\t// forward reference to method, where param annotations have not yet been associated to method", "+\t\tif (this.declaringClass instanceof SourceTypeBinding) {", "+\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) this.declaringClass;", "+\t\t\tif (sourceType.scope != null) {", "+\t\t\t\tAbstractMethodDeclaration methodDecl = sourceType.scope.referenceType().declarationOf(this);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tArgument argument = methodDecl.arguments[i];", "+\t\t\t\t\tif (argument.annotations != null) {", "+\t\t\t\t\t\tASTNode.resolveAnnotations(methodDecl.scope, argument.annotations, argument.binding);", "+\t\t\t\t\t\tallParameterAnnotations[i] = argument.binding.getAnnotations();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f66cc4fcaccdeae56d1f6b9203576bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/CompilationResult.java", "commitBeforeChange": "a1ad7ed237b99cea40e4be02872fbc81f27fd996", "commitAfterChange": "039d36406bcab8d55430422b8fa21e6430ca432b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public boolean hasErrors()", "signatureAfterChange": "  public boolean hasErrors()", "diff": ["-\tif (this.problems != null)", "-\t\tfor (int i = 0; i < this.problemCount; i++) {", "-\t\t\tif (this.problems[i].isError())", "-\t\t\t\treturn true;", "-\t\t}", "-\treturn false;", "+\treturn this.numberOfErrors != 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99bd75d131ca7c5fd6ed9b96161861d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "3c1fddff6d397917a4f2c0ea6ea46a4e7420b00d", "commitAfterChange": "509e23a47cec653aabf10f57bfcca245aaa6e4e2", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": "  \tpublic List traverse(MethodBinding methodBinding, int maxLocals, byte[] bytecodes, int codeOffset, int codeLength, Map frames, boolean isClinit)", "signatureAfterChange": "  \tpublic List traverse(MethodBinding methodBinding, int maxLocals, byte[] bytecodes, int codeOffset, int codeLength, Map frames, boolean isClinit)", "diff": ["-\t\t\t\t\tconstantPoolName = new char[classNameLength + dimensions];", "-\t\t\t\t\tfor (int i = 0; i < dimensions; i++) {", "-\t\t\t\t\t\tconstantPoolName[i] = '[';", "-\t\t\t\t\t}", "-\t\t\t\t\tSystem.arraycopy(className, 0, constantPoolName, dimensions, classNameLength);", "+\t\t\t\t\t// class name is already the name of the right array type with all dimensions", "+\t\t\t\t\tconstantPoolName = new char[classNameLength];", "+\t\t\t\t\tSystem.arraycopy(className, 0, constantPoolName, 0, classNameLength);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac07f1d7c724a426b2a8ccb78481be98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "e3ab7adcf5341254d66eeef47fc0727dbe42868f", "commitAfterChange": "8915ec2bb74e44419be85002d7c3a4c9f8582635", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic static final int indexOf(char toBeFound, char[] array, int start)", "signatureAfterChange": " \tpublic static final int indexOf(char[] toBeFound, char[] array, boolean isCaseSensitive)", "diff": ["+\t */", "+\tpublic static final int indexOf(char[] toBeFound, char[] array, boolean isCaseSensitive) {", "+\t\treturn indexOf(toBeFound, array, isCaseSensitive, 0);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c10f3a1da6a33be08a0f2d407101be7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "d137239e9d64b43b4573cdfef965a2c47040a54e", "commitAfterChange": "448d62b2ff66cd7ed3c1bda65bd5259a6d0971b0", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " public void addConstantFieldsMask(UnconditionalFlowInfo other)", "signatureAfterChange": " public void addConstantFieldsMask(UnconditionalFlowInfo other)", "diff": ["-\t    \tif (otherLen > (oldLength = this.extraConstantFieldMask.length)) {", "+\t    \tif (otherLen >= (oldLength = this.extraConstantFieldMask.length)) {", "-\t\t\t\tfor (int i = 0; i < oldLength; i++) {", "-\t\t\t\t\tthis.extraConstantFieldMask[i] |= other.extraConstantFieldMask[i];", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tfor (int i = 0; i < otherLen; i++) {", "-\t\t\t\t\tthis.extraConstantFieldMask[i] |= other.extraConstantFieldMask[i];", "-\t\t\t\t}", "+\t\t\t}", "+\t    \tfor (int i = 0; i < this.extraConstantFieldMask.length; i++) {", "+\t\t\t\tthis.extraConstantFieldMask[i] |= other.extraConstantFieldMask[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3fab171ecb735f6f53a9f4faf814c98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "fc8ad684cd40eead6263b5107f1ff8c7f0890a8b", "commitAfterChange": "92d0dd4e2b5e041546b8d441e016f40c7cf1e442", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic static final int indexOf(char toBeFound, char[] array)", "signatureAfterChange": " \tpublic static final int indexOf(char toBeFound, char[] array)", "diff": ["-\t\tfor (int i = 0; i < array.length; i++)", "-\t\t\tif (toBeFound == array[i])", "-\t\t\t\treturn i;", "-\t\treturn -1;", "+\t\treturn indexOf(toBeFound, array, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2ffa4d54c2abc20feefd723b3d1982c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "56242f2c4a4e3fdfdcffa7d9541655946a7953f8", "commitAfterChange": "40f76b3d0fb01a4a7fa1aad4b09c356c31458c94", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " static int computeNullProblemSeverity(long requiredBits, long providedBits, int nullStatus)", "signatureAfterChange": " static int computeNullProblemSeverity(long requiredBits, long providedBits, int nullStatus)", "diff": ["-\t\t\treturn 3; // mismatching annotations", "+\t\t\treturn 2; // mismatching annotations", "-\t\t\tif (requiredBits == TagBits.AnnotationNonNull) {", "-\t\t\t\tif ((nullStatus & FlowInfo.POTENTIALLY_NULL) != 0) {", "-\t\t\t\t\treturn 1; // @NonNull vs. inferred @Nullable", "-\t\t\t\t} else if (nullStatus == FlowInfo.NULL) {", "-\t\t\t\t\treturn 1; // @NonNull vs. null", "-\t\t\t\t} else if (nullStatus == FlowInfo.NON_NULL) {", "-\t\t\t\t\treturn 0;", "-\t\t\t\t} else {", "-\t\t\t\t\treturn 2; // need unchecked conversion regarding type detail", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\treturn 2; // need unchecked conversion regarding type detail", "+\t\t\tif (requiredBits == TagBits.AnnotationNonNull && nullStatus == FlowInfo.NON_NULL) {", "+\t\t\t\treturn 0; // OK by flow analysis", "+\t\t\treturn 1; // need unchecked conversion regarding type detail", "-\treturn 0;", "+\treturn 0; // OK by tagBits"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f60564ec31e9416d35a4afbd8a181923", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodPattern.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 12, "signatureBeforeChange": " protected boolean mustResolve()", "signatureAfterChange": " protected boolean mustResolve()", "diff": ["-\tif (parameterSimpleNames != null)", "-\t\tfor (int i = 0, max = parameterSimpleNames.length; i < max; i++)", "-\t\t\tif (parameterQualifications[i] != null) return true;", "+\tif (parameterSimpleNames != null && parameterSimpleNames.length > 0) return true;"]}], "num": 1227}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be4b38b437bd0401293f47c9bc59c9bc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20c4f8f5e66841cc95f7417b32a2f566", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "79230cd7762a4c67bbe12b2445e22b464f420455", "commitAfterChange": "0e2b95cbd8acd25a30eff4aa5a4e5b34fa13b0c5", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r public void searchAllTypeNames(\r \tIWorkspace workspace,\r \tchar[] packageName, \r \tchar[] typeName,\r \tint matchMode, \r \tboolean isCaseSensitive,\r \tint searchFor, \r \tIJavaSearchScope scope, \r \tfinal ITypeNameRequestor nameRequestor,\r \tint waitingPolicy,\r \tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": "\r public void searchAllTypeNames(\r \tIWorkspace workspace,\r \tchar[] packageName, \r \tchar[] typeName,\r \tint matchMode, \r \tboolean isCaseSensitive,\r \tint searchFor, \r \tIJavaSearchScope scope, \r \tfinal ITypeNameRequestor nameRequestor,\r \tint waitingPolicy,\r \tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\tindexManager.performConcurrentJob(\r", "-\t\tnew PatternSearchJob(pattern, scope, IInfoConstants.NameInfo | IInfoConstants.PathInfo, searchRequestor, indexManager),\r", "-\t\twaitingPolicy,\r", "-\t\tprogressMonitor);\t\r", "+\ttry {\r", "+\t\tif (progressMonitor != null) {\r", "+\t\t\tprogressMonitor.beginTask(Util.bind(\"engine.searching\"), 100); //$NON-NLS-1$\r", "+\t\t}\r", "+\t\tindexManager.performConcurrentJob(\r", "+\t\t\tnew PatternSearchJob(pattern, scope, IInfoConstants.NameInfo | IInfoConstants.PathInfo, searchRequestor, indexManager),\r", "+\t\t\twaitingPolicy,\r", "+\t\t\tprogressMonitor);\t\r", "+\t} finally {\r", "+\t\tif (progressMonitor != null) {\r", "+\t\t\tprogressMonitor.done();\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35d1130bd921649503e28fcde87e5fa0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "2a01994b0addf3b51b8cc85382b32cfdc277de6c", "commitAfterChange": "03bf58276587a73704c9ef865d4a7b548edf18f3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r public void search(IWorkspace workspace, ISearchPattern searchPattern, IJavaSearchScope scope, IJavaSearchResultCollector resultCollector) throws JavaModelException", "signatureAfterChange": "\r public void search(IWorkspace workspace, ISearchPattern searchPattern, IJavaSearchScope scope, IJavaSearchResultCollector resultCollector) throws JavaModelException", "diff": ["-\t\tif (indexManager != null) {\r", "-\t\t\tindexManager.performConcurrentJob(\r", "-\t\t\t\tnew PatternSearchJob(\r", "-\t\t\t\t\t(SearchPattern)searchPattern, \r", "-\t\t\t\t\tscope, \r", "-\t\t\t\t\tdetailLevel, \r", "-\t\t\t\t\tpathCollector, \r", "-\t\t\t\t\tindexManager),\r", "-\t\t\t\tIJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH,\r", "-\t\t\t\tprogressMonitor);\r", "-\t\t\tif (progressMonitor != null) {\r", "-\t\t\t\tprogressMonitor.worked(5);\r", "-\t\t\t}\r", "-\t\t\t\t\r", "-\t\t\t/* eliminating false matches and locating them */\r", "-\t\t\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();\r", "-\t\t\tmatchLocator.locateMatches(pathCollector.getPaths(), workspace);\r", "+\t\tindexManager.performConcurrentJob(\r", "+\t\t\tnew PatternSearchJob(\r", "+\t\t\t\t(SearchPattern)searchPattern, \r", "+\t\t\t\tscope, \r", "+\t\t\t\tdetailLevel, \r", "+\t\t\t\tpathCollector, \r", "+\t\t\t\tindexManager),\r", "+\t\t\tIJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH,\r", "+\t\t\tprogressMonitor);\r", "+\r", "+\t\tif (progressMonitor != null) {\r", "+\t\t\tprogressMonitor.worked(5);\r", "+\t\t\t\r", "+\t\t/* eliminating false matches and locating them */\r", "+\t\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();\r", "+\t\tmatchLocator.locateMatches(pathCollector.getPaths(), workspace);\r", "+\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b001b5fae2f851a0376a3a565b53c2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "2a01994b0addf3b51b8cc85382b32cfdc277de6c", "commitAfterChange": "03bf58276587a73704c9ef865d4a7b548edf18f3", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \r private String[] getPathsOfDeclaringType()", "signatureAfterChange": "\r \r private String[] getPathsOfDeclaringType()", "diff": ["-\t\tif (indexManager != null) {\r", "-\t\t\tindexManager.performConcurrentJob(\r", "-\t\t\t\tnew PatternSearchJob(\r", "-\t\t\t\t\tsearchPattern, \r", "-\t\t\t\t\tscope, \r", "-\t\t\t\t\tdetailLevel, \r", "-\t\t\t\t\tsearchRequestor, \r", "-\t\t\t\t\tindexManager),\r", "-\t\t\t\tIJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH,\r", "-\t\t\t\tprogressMonitor);\r", "-\t\t\treturn pathCollector.getPaths();\r", "-\t\t}\r", "+\r", "+\t\tindexManager.performConcurrentJob(\r", "+\t\t\tnew PatternSearchJob(\r", "+\t\t\t\tsearchPattern, \r", "+\t\t\t\tscope, \r", "+\t\t\t\tdetailLevel, \r", "+\t\t\t\tsearchRequestor, \r", "+\t\t\t\tindexManager),\r", "+\t\t\tIJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH,\r", "+\t\t\tprogressMonitor);\r", "+\t\treturn pathCollector.getPaths();\r", "+\r"]}], "num": 50766}
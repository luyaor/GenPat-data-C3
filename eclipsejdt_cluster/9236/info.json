{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49f1723a600c5a0c7da1d5cc045b17c3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e387dd9093e350205263a0d11c1001f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java", "commitBeforeChange": "1dc6df2cba1e3f21897002448cbe5ca7ad21d269", "commitAfterChange": "973af06dbc6df022ac42e8e0a0c238581d8558f6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\t  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "signatureAfterChange": "\t  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "diff": ["-\t\tTypeBinding throwable = scope.getJavaLangThrowable();", "-\t\tif (!exceptionType.isCompatibleWith(throwable)) {", "-\t\t\tscope.problemReporter().typeMismatchError(exceptionType, throwable, this);", "+\t\tif (exceptionType.findSuperTypeErasingTo(TypeIds.T_JavaLangThrowable, true) == null) {", "+\t\t\tscope.problemReporter().cannotThrowType(this.type, exceptionType);", "-\t\t}", "+\t\t}\t\t\t", "-\t\t\t\treturn null;", "+\t\t\t} else {", "+\t\t\t\tscope.problemReporter().localVariableHiding(this, existingVariable, false);", "-\t\t\tscope.problemReporter().localVariableHiding(this, existingVariable, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9d24782e25933ef5b71e0a7df5fba79", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "20a3b07578a2ebec2d9a0569764e78af37761eaf", "commitAfterChange": "c052d66dbc2732414cdaf446e79eec5da0743843", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 84, "signatureBeforeChange": " public void testMethodWithError13() throws CoreException", "signatureAfterChange": " public void testMethodWithError13() throws CoreException", "diff": ["-\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "+\tthis.problemRequestor =  null;", "-\t\tworkingCopy1 = getCompilationUnit(\"/Reconciler15/src/test/X.java\").getWorkingCopy(owner, null, null);", "+\t\tworkingCopy1 = getCompilationUnit(\"/Reconciler15/src/test/X.java\").getWorkingCopy(this.wcOwner, null);", "-\t\t", "+", "-\t\tthis.workingCopy = getCompilationUnit(\"Reconciler15/src/test/Y.java\").getWorkingCopy(owner, this.problemRequestor, null);", "+\t\tthis.workingCopy = getCompilationUnit(\"Reconciler15/src/test/Y.java\").getWorkingCopy(this.wcOwner, null);", "-\t\tthis.workingCopy.reconcile(ICompilationUnit.NO_AST, false, owner, null);", "+\t\tthis.workingCopy.reconcile(ICompilationUnit.NO_AST, false, this.wcOwner, null);", "-\t\t\"----------\\n\" + ", "-\t\t\"1. WARNING in /Reconciler15/src/test/Y.java (at line 5)\\n\" + ", "-\t\t\"\tsomeX.bar(null);\\n\" + ", "-\t\t\"\t^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type safety: The method bar(Object[]) belongs to the raw type X. References to generic type X<T,U> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" +", "+\t\t\"1. WARNING in /Reconciler15/src/test/Y.java (at line 5)\\n\" +", "+\t\t\"\tsomeX.bar(null);\\n\" +", "+\t\t\"\t^^^^^^^^^^^^^^^\\n\" +", "+\t\t\"Type safety: The method bar(Object[]) belongs to the raw type X. References to generic type X<T,U> should be parameterized\\n\" +"]}], "num": 9236}
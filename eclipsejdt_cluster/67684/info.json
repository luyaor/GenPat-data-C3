{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40f071a1913bff351a3a26c12c71cdc5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eeb19a7f1ee124149310e9086975919", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalExtendedCompletionContext.java", "commitBeforeChange": "0d164c5fd27f905997905e2364acd7d413efe08e", "commitAfterChange": "cb53eff5db7d4f76eb24c91a2abecee1441f0bbc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate void computeVisibleElementBindings()", "signatureAfterChange": "  \tprivate void computeVisibleElementBindings()", "diff": ["-\t\t\t\t\t\t\tif (fieldDeclaration.initialization != null &&", "-\t\t\t\t\t\t\t\t\tfieldDeclaration.initialization.sourceStart <= astNode.sourceStart &&", "-\t\t\t\t\t\t\t\t\tastNode.sourceEnd <= fieldDeclaration.initialization.sourceEnd) {", "+\t\t\t\t\t\t\tif (fieldDeclaration.initialization != null) {", "+\t\t\t\t\t\t\t\t// remove this field from visibleFields list because completion is being asked in its", "+\t\t\t\t\t\t\t\t// intialization and so this has not yet been declared successfully.", "+\t\t\t\t\t\t\t\tif (this.visibleFields.size > 0 && this.visibleFields.contains(fieldDeclaration.binding)) {", "+\t\t\t\t\t\t\t\t\tthis.visibleFields.remove(fieldDeclaration.binding);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t/*(Incase fieldDeclaration != null is not sufficient to infer that", "+\t\t\t\t\t\t\t  proposal is being asked inside initializer of field decl, use the below if", "+\t\t\t\t\t\t\t  block instead of the above)", "+\t\t\t\t\t\t\tif (fieldDeclaration.initialization != null) {", "+\t\t\t\t\t\t\t ", "+\t\t\t\t\t\t\t\tif (fieldDeclaration.initialization.sourceEnd > 0) {", "+\t\t\t\t\t\t\t\t\tif (fieldDeclaration.initialization.sourceStart <= astNode.sourceStart &&", "+\t\t\t\t\t\t\t\t\t\t\tastNode.sourceEnd <= fieldDeclaration.initialization.sourceEnd) {", "+\t\t\t\t\t\t\t\t\t\t// completion is inside a field initializer", "+\t\t\t\t\t\t\t\t\t\tsearchVisibleVariablesAndMethods(scope, this.visibleLocalVariables, this.visibleFields, this.visibleMethods, notInJavadoc);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} else { // The sourceEnd may not yet be set", "+\t\t\t\t\t\t\t\t\tCompletionNodeDetector detector = new CompletionNodeDetector(this.assistNode, fieldDeclaration.initialization);", "+\t\t\t\t\t\t\t\t\tif (detector.containsCompletionNode()) {", "+\t\t\t\t\t\t\t\t\t\tsearchVisibleVariablesAndMethods(scope, this.visibleLocalVariables, this.visibleFields, this.visibleMethods, notInJavadoc);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t// remove this field from visibleFields list because completion is being asked in its", "+\t\t\t\t\t\t\t\t// intialization and so this has not yet been declared successfully.", "+\t\t\t\t\t\t\t\tif (this.visibleFields.size > 0 && this.visibleFields.contains(fieldDeclaration.binding)) {", "+\t\t\t\t\t\t\t\t\tthis.visibleFields.remove(fieldDeclaration.binding);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66102ada044021f01c161d313c5e22b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "45b137a4bdfd0a4d28126aeb67f27b127e7f1dfd", "commitAfterChange": "15b0c36cf52521c62289eac551e0070a05f02d1e", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \t \tprivate void printCommentLine(char[] s)", "signatureAfterChange": " \t \tprivate void printCommentLine(char[] s)", "diff": ["-\t\t\t\t\tthis.indentationLevel = Math.max(this.indentationLevel, this.currentAlignment.breakIndentationLevel);", "+\t\t\t\t\tif (this.currentAlignment.couldBreak() && this.currentAlignment.wasSplit) {", "+\t\t\t\t\t\tthis.currentAlignment.performFragmentEffect();", "+\t\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tthis.indentationLevel = Math.max(this.indentationLevel, this.currentAlignment.breakIndentationLevel);", "+\t\t\t} else if (this.currentAlignment.couldBreak() && this.currentAlignment.wasSplit) {", "+\t\t\t\tthis.currentAlignment.performFragmentEffect();"]}], "num": 67684}
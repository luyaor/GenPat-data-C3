{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a94b7566072b51fc0529900ce6bd8b3b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b16a72973a708ae11eb395c647e1798a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "ee73272992444a9c8e6586ce5a37f5dc6d6e8bd9", "commitAfterChange": "f598d68e65d421b1e902e4d71831d57a9b4e73ab", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tprivate void verifyPositions(TagElement tagElement, char[] source)", "signatureAfterChange": " \tprivate void verifyPositions(TagElement tagElement, char[] source)", "diff": ["-\t\t\tassertEquals(this.prefix+\"Wrong start position for \"+tagElement, '{', source[tagStart++]);", "+\t\t\tassumeEquals(this.prefix+\"Wrong start position <\"+tagStart+\"> for \"+tagElement, '{', source[tagStart++]);", "-\t\t\tassertEquals(this.prefix+\"Misplaced tag name at \"+tagStart, tagName, text);", "+\t\t\tassumeEquals(this.prefix+\"Misplaced tag name at <\"+tagStart+\">: \", tagName, text);", "-\t\t\t\tif (previousFragment != null) {", "+\t\t\t\tif (previousFragment == null) {", "+\t\t\t\t\tif (tagName != null && (source[tagStart] == '\\r' || source[tagStart] == '\\n')) {", "+\t\t\t\t\t\twhile (source[tagStart] == '*' || Character.isWhitespace(source[tagStart])) {", "+\t\t\t\t\t\t\ttagStart++; // purge non-stored characters", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "-\t\t\t\t\t\tassertTrue(this.prefix+\"Wrong length for text element \"+previousFragment, source[tagStart] == '\\r' || source[tagStart] == '\\n');", "+\t\t\t\t\t\tassumeTrue(this.prefix+\"Wrong length at <\"+previousFragment.getStartPosition()+\"> for text element \"+previousFragment, (source[tagStart] == '\\r' && source[tagStart+1] == '\\n' || source[tagStart] == '\\n'));", "-\t\t\t\tassertEquals(this.prefix+\"Misplaced or wrong text element at \"+tagStart, text, ((TextElement) fragment).getText());", "+\t\t\t\tassumeEquals(this.prefix+\"Misplaced text element at <\"+fragment.getStartPosition()+\">: \", text, ((TextElement) fragment).getText());", "-\t\t\t\t\tassertEquals(this.prefix+\"Tag element has wrong start position\", tagStart, inlineTag.getStartPosition());", "+\t\t\t\t\tassumeEquals(this.prefix+\"Tag element <\"+inlineTag+\"> has wrong start position\", tagStart, inlineTag.getStartPosition());", "-\t\t\t\t\t\ttext = new String(source, start, qualifier.getLength());", "-\t\t\t\t\t\tassertEquals(this.prefix+\"Misplaced or wrong member ref qualifier at \"+start, text, qualifier.toString());", "-\t\t\t\t\tassertEquals(this.prefix+\"Misplace # separator for member ref\"+memberRef, '#', source[start]);", "+\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced # separator at <\"+start+\"> for member ref \"+memberRef, '#', source[start]);", "-\t\t\t\t\tassertEquals(this.prefix+\"Misplaced or wrong member ref name at \"+start, text, name.toString());", "+\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced member ref at <\"+start+\">: \", text, name.toString());", "-\t\t\t\t\t\ttext = new String(source, start, qualifier.getLength());", "-\t\t\t\t\t\tassertEquals(this.prefix+\"Misplaced or wrong member ref qualifier at \"+start, text, qualifier.toString());", "-\t\t\t\t\tassertEquals(this.prefix+\"Misplaced # separator for member ref\"+methodRef, '#', source[start]);", "+\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced # separator at <\"+start+\"> for method ref: \"+methodRef, '#', source[start]);", "-\t\t\t\t\tassertEquals(this.prefix+\"Misplaced or wrong member ref name at \"+start, text, name.toString());", "+\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced method ref name at <\"+start+\">: \", text, name.toString());", "-\t\t\t\t\tassertEquals(this.prefix+\"Misplaced ( for member ref arguments \"+methodRef, '(', source[start]);", "+\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced ( at <\"+start+\"> for method ref: \"+methodRef, '(', source[start]);", "-\t\t\t\t\t\ttext = new String(source, start, type.getLength());", "-\t\t\t\t\t\tassertEquals(this.prefix+\"Misplaced or wrong method ref parameter type at \"+start, text, type.toString());", "+\t\t\t\t\t\t} else if (type.isPrimitiveType()) {", "+\t\t\t\t\t\t\ttext = new String(source, start, type.getLength());", "+\t\t\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced method ref parameter type at <\"+start+\"> for method ref: \"+methodRef, text, type.toString());", "+\t\t\t\t\t\t} else if (type.isArrayType()) {", "+\t\t\t\t\t\t\tType elementType = ((ArrayType) param.getType()).getElementType();", "+\t\t\t\t\t\t\tif (elementType.isSimpleType()) {", "+\t\t\t\t\t\t\t\tverifyNamePositions(start, ((SimpleType)elementType).getName(), source);", "+\t\t\t\t\t\t\t} else if (elementType.isPrimitiveType()) {", "+\t\t\t\t\t\t\t\ttext = new String(source, start, elementType.getLength());", "+\t\t\t\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced method ref parameter type at <\"+start+\"> for method ref: \"+methodRef, text, elementType.toString());", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tassertEquals(this.prefix+\"Misplaced or wrong method ref parameter name at \"+start, text, name.toString());", "+\t\t\t\t\t\t\tassumeEquals(this.prefix+\"Misplaced method ref parameter name at <\"+start+\"> for method ref: \"+methodRef, text, name.toString());", "-\t\t\t\t\t\tassertTrue(this.prefix+\"Misplaced or wrong method ref parameter end at \"+start, source[start] == ',' || source[start] == ')');", "+\t\t\t\t\t\tassumeTrue(this.prefix+\"Misplaced parameter end at <\"+start+\"> for method ref: \"+methodRef, source[start] == ',' || source[start] == ')');", "-\t\t\tassertEquals(this.prefix+\"Wrong end character for \"+tagElement, '}', source[tagStart++]);", "+\t\t\tassumeEquals(this.prefix+\"Wrong end character at <\"+tagStart+\"> for \"+tagElement, '}', source[tagStart++]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fba7e66e7118f4c51944fd9ad18148ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/impl/FormatterOptions.java", "commitBeforeChange": "2fa8bdc58397f8ba42986ed8442348506f4b1424", "commitAfterChange": "f0c87cd93521c02e8dcc20da91d9eeb9be1b3608", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r public ConfigurableOption[] getConfigurableOptions(Locale locale)", "signatureAfterChange": "\r public void setOption(ConfigurableOption setting)", "diff": ["- */\r", "-public ConfigurableOption[] getConfigurableOptions(Locale locale) {\r", "-\tString componentName = CodeFormatter.class.getName();\r", "-\treturn new ConfigurableOption[] {\r", "-\t\tnew ConfigurableOption(componentName, \"newline.openingBrace\"/*nonNLS*/,  locale, newLineBeforeOpeningBraceMode ? 0 : 1),\r", "-\t\tnew ConfigurableOption(componentName, \"newline.controlStatement\"/*nonNLS*/,  locale, newlineInControlStatementMode ? 0 : 1),\r", "-\t\tnew ConfigurableOption(componentName, \"newline.clearAll\"/*nonNLS*/,  locale, clearAllBlankLinesMode ? 0 : 1),\r", "-\t\tnew ConfigurableOption(componentName, \"newline.elseIf\"/*nonNLS*/,  locale, compactElseIfMode ? 0 : 1),\r", "-\t\tnew ConfigurableOption(componentName, \"newline.emptyBlock\"/*nonNLS*/,  locale, newLineInEmptyBlockMode ? 0 : 1),\r", "-\t\tnew ConfigurableOption(componentName, \"line.split\"/*nonNLS*/,  locale, maxLineLength),\r", "-\t\tnew ConfigurableOption(componentName, \"style.compactAssignment\"/*nonNLS*/,  locale, compactAssignmentMode ? 0 : 1),\r", "-\t\tnew ConfigurableOption(componentName, \"tabulation.char\"/*nonNLS*/,  locale, indentWithTab ? 0 : 1),\r", "-\t\tnew ConfigurableOption(componentName, \"tabulation.size\"/*nonNLS*/,  locale, tabSize)\t\r", "-\t};\r", "-}\r", "+\tString componentName = CodeFormatter.class.getName();\r", "+\t\r", "+\tString optionID = setting.getID();\r", "+\t//String value = setting.getValue();\r", "+\t\r", "+\tif(optionID.equals(componentName+\".newlineOpeningBrace\"/*nonNLS*/)){\r", "+\t\tsetNewLineBeforeOpeningBraceMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(componentName+\".newlineControlStatement\"/*nonNLS*/)){\r", "+\t\tsetNewlineInControlStatementMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(componentName+\".newlineClearAll\"/*nonNLS*/)){\r", "+\t\tsetClearAllBlankLinesMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(componentName+\".newlineElseIf\"/*nonNLS*/)){\r", "+\t\tsetCompactElseIfMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(componentName+\".newlineEmptyBlock\"/*nonNLS*/)){\r", "+\t\tsetNewLineInEmptyBlockMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(componentName+\".lineSplit\"/*nonNLS*/)){\r", "+\t\tsetMaxLineLength(Integer.parseInt(setting.getValue()));\r", "+\t}else if(optionID.equals(componentName+\".styleCompactAssignment\"/*nonNLS*/)){\r", "+\t\tsetCompactAssignmentMode(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(componentName+\".tabulationChar\"/*nonNLS*/)){\r", "+\t\tsetIndentationUsesTab(setting.getValueIndex() == 0);\r", "+\t}else if(optionID.equals(componentName+\".tabulationSize\"/*nonNLS*/)){\r", "+\t\tsetTabSize(Integer.parseInt(setting.getValue()));\r"]}], "num": 25065}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "02b6d7c4f7cbbcba3707c573ff84c305", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a71da9a39d3558bcf6d58e9f6a5d68f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeleteElementsOperation.java", "commitBeforeChange": "b12492ad0eb83de9816def47b0f6dea2ec7ff67f", "commitAfterChange": "0deabbafa4ad0926b565767fe8d2a589d68558ed", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected void processElement(IJavaElement element) throws JavaModelException", "signatureAfterChange": " \tprotected void processElement(IJavaElement element) throws JavaModelException", "diff": ["- */", "-protected void processElement(IJavaElement element) throws JavaModelException {", "-\tICompilationUnit cu = (ICompilationUnit) element;", "-", "-\t// keep track of the import statements - if all are removed, delete", "-\t// the import container (i.e. report it in the delta)", "-\tint numberOfImports = cu.getImports().length;", "-", "-\tIBuffer buffer = cu.getBuffer();", "-\tif (buffer == null) return;", "-\tJavaElementDelta delta = new JavaElementDelta(cu);", "-\tIJavaElement[] cuElements = ((IRegion) fChildrenToRemove.get(cu)).getElements();", "-\tfor (int i = 0, length = cuElements.length; i < length; i++) {", "-\t\tIJavaElement e = cuElements[i];", "-\t\tif (e.exists()) {", "-\t\t\tchar[] contents = buffer.getCharacters();", "-\t\t\tif (contents == null) continue;", "-\t\t\tIDOMCompilationUnit cuDOM = fFactory.createCompilationUnit(contents, cu.getElementName());", "-\t\t\tDOMNode node = (DOMNode)((JavaElement) e).findNode(cuDOM);", "-\t\t\t// TBD", "-\t\t\tAssert.isTrue(node != null, Util.bind(\"element.cannotLocate\", e.getElementName(), cuDOM.getName())); //$NON-NLS-1$", "-\t\t\tint startPosition = node.getStartPosition();", "-\t\t\tbuffer.replace(startPosition, node.getEndPosition() - startPosition + 1, CharOperation.NO_CHAR);", "-\t\t\tdelta.removed(e);", "-\t\t\tif (e.getElementType() == IJavaElement.IMPORT_DECLARATION) {", "-\t\t\t\tnumberOfImports--;", "-\t\t\t\tif (numberOfImports == 0) {", "-\t\t\t\t\tdelta.removed(cu.getImportContainer());", "+\t */", "+\tprotected void processElement(IJavaElement element) throws JavaModelException {", "+\t\tICompilationUnit cu = (ICompilationUnit) element;", "+\t", "+\t\t// keep track of the import statements - if all are removed, delete", "+\t\t// the import container (i.e. report it in the delta)", "+\t\tint numberOfImports = cu.getImports().length;", "+\t", "+\t\tIBuffer buffer = cu.getBuffer();", "+\t\tif (buffer == null) return;", "+\t\tJavaElementDelta delta = new JavaElementDelta(cu);", "+\t\tIJavaElement[] cuElements = ((IRegion) fChildrenToRemove.get(cu)).getElements();", "+\t\tfor (int i = 0, length = cuElements.length; i < length; i++) {", "+\t\t\tIJavaElement e = cuElements[i];", "+\t\t\tif (e.exists()) {", "+\t\t\t\tchar[] contents = buffer.getCharacters();", "+\t\t\t\tif (contents == null) continue;", "+\t\t\t\tIDOMCompilationUnit cuDOM = fFactory.createCompilationUnit(contents, cu.getElementName());", "+\t\t\t\tDOMNode node = (DOMNode)((JavaElement) e).findNode(cuDOM);", "+\t\t\t\t// TBD", "+\t\t\t\tAssert.isTrue(node != null, Util.bind(\"element.cannotLocate\", e.getElementName(), cuDOM.getName())); //$NON-NLS-1$", "+\t\t\t\tint startPosition = node.getStartPosition();", "+\t\t\t\tbuffer.replace(startPosition, node.getEndPosition() - startPosition + 1, CharOperation.NO_CHAR);", "+\t\t\t\tdelta.removed(e);", "+\t\t\t\tif (e.getElementType() == IJavaElement.IMPORT_DECLARATION) {", "+\t\t\t\t\tnumberOfImports--;", "+\t\t\t\t\tif (numberOfImports == 0) {", "+\t\t\t\t\t\tdelta.removed(cu.getImportContainer());", "+\t\t\t\t\t}", "-\t}", "-\tif (delta.getAffectedChildren().length > 0) {", "-\t\tcu.save(getSubProgressMonitor(1), fForce);", "-\t\tif (!cu.isWorkingCopy()) { // if unit is working copy, then save will have already fired the delta", "-\t\t\taddDelta(delta);", "-\t\t\tthis.hasModifiedResource = true;", "+\t\tif (delta.getAffectedChildren().length > 0) {", "+\t\t\tcu.save(getSubProgressMonitor(1), fForce);", "+\t\t\tif (!cu.isWorkingCopy()) { // if unit is working copy, then save will have already fired the delta", "+\t\t\t\taddDelta(delta);", "+\t\t\t\tthis.setAttribute(\"hasModifiedResource\", \"true\");", "+\t\t\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c39061608dc1f7c834c037f6f45e9379", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateCompilationUnitOperation.java", "commitBeforeChange": "677db12ffe2b33d9711034d339aec7b56ab85d41", "commitAfterChange": "617fadfcdd9d3f85493c65c27088f408a3cd9c9d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r protected void executeOperation() throws JavaModelException", "signatureAfterChange": "\r protected void executeOperation() throws JavaModelException", "diff": ["-\tbeginTask(Util.bind(\"operation.createUnitProgress\"), 2); //$NON-NLS-1$\r", "-\tJavaElementDelta delta = newJavaElementDelta();\r", "-\tICompilationUnit unit = getCompilationUnit();\r", "-\tIPackageFragment pkg = (IPackageFragment) getParentElement();\r", "-\tIContainer folder = (IContainer) pkg.getUnderlyingResource();\r", "-\tworked(1);\r", "-\tIFile compilationUnitFile = folder.getFile(new Path(fName));\r", "-\tif (compilationUnitFile.exists()) {\r", "-\t\t// update the contents of the existing unit if fForce is true\r", "-\t\tif (fForce) {\r", "-\t\t\tunit.getBuffer().setContents(fSource);\r", "-\t\t\tunit.save(new NullProgressMonitor(), false);\r", "-\t\t\tfResultElements = new IJavaElement[] {unit};\r", "-\t\t\tif (unit.getParent().exists()) {\r", "-\t\t\t\tfor (int i = 0; i < fResultElements.length; i++) {\r", "-\t\t\t\t\tdelta.changed(fResultElements[i], IJavaElementDelta.F_CONTENT);\r", "+\ttry {\r", "+\t\tbeginTask(Util.bind(\"operation.createUnitProgress\"), 2); //$NON-NLS-1$\r", "+\t\tJavaElementDelta delta = newJavaElementDelta();\r", "+\t\tICompilationUnit unit = getCompilationUnit();\r", "+\t\tIPackageFragment pkg = (IPackageFragment) getParentElement();\r", "+\t\tIContainer folder = (IContainer) pkg.getUnderlyingResource();\r", "+\t\tworked(1);\r", "+\t\tIFile compilationUnitFile = folder.getFile(new Path(fName));\r", "+\t\tif (compilationUnitFile.exists()) {\r", "+\t\t\t// update the contents of the existing unit if fForce is true\r", "+\t\t\tif (fForce) {\r", "+\t\t\t\tIBuffer buffer = unit.getBuffer();\r", "+\t\t\t\tif (buffer == null) return;\r", "+\t\t\t\tbuffer.setContents(fSource);\r", "+\t\t\t\tunit.save(new NullProgressMonitor(), false);\r", "+\t\t\t\tfResultElements = new IJavaElement[] {unit};\r", "+\t\t\t\tif (unit.getParent().exists()) {\r", "+\t\t\t\t\tfor (int i = 0; i < fResultElements.length; i++) {\r", "+\t\t\t\t\t\tdelta.changed(fResultElements[i], IJavaElementDelta.F_CONTENT);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\taddDelta(delta);\r", "-\t\t\t\taddDelta(delta);\r", "+\t\t\t} else {\r", "+\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION));\r", "-\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION));\r", "-\t\t}\r", "-\t} else {\r", "-\t\ttry {\r", "-\t\t\tString encoding = JavaCore.getOption(JavaCore.CORE_ENCODING);\r", "-\t\t\tInputStream stream = new ByteArrayInputStream(encoding == null ? fSource.getBytes() : fSource.getBytes(encoding));\r", "-\t\t\tcreateFile(folder, unit.getElementName(), stream, false);\r", "-\t\t\tfResultElements = new IJavaElement[] {unit};\r", "-\t\t\tif (unit.getParent().exists()) {\r", "-\t\t\t\tfor (int i = 0; i < fResultElements.length; i++) {\r", "-\t\t\t\t\tdelta.added(fResultElements[i]);\r", "+\t\t\ttry {\r", "+\t\t\t\tString encoding = JavaCore.getOption(JavaCore.CORE_ENCODING);\r", "+\t\t\t\tInputStream stream = new ByteArrayInputStream(encoding == null ? fSource.getBytes() : fSource.getBytes(encoding));\r", "+\t\t\t\tcreateFile(folder, unit.getElementName(), stream, false);\r", "+\t\t\t\tfResultElements = new IJavaElement[] {unit};\r", "+\t\t\t\tif (unit.getParent().exists()) {\r", "+\t\t\t\t\tfor (int i = 0; i < fResultElements.length; i++) {\r", "+\t\t\t\t\t\tdelta.added(fResultElements[i]);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\taddDelta(delta);\r", "-\t\t\t\taddDelta(delta);\r", "+\t\t\t} catch (IOException e) {\r", "+\t\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);\r", "-\t\t} catch (IOException e) {\r", "-\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);\r", "-\t\t}\r", "-\t} \r", "-\tworked(1);\r", "-\tdone();\r", "+\t\t} \r", "+\t\tworked(1);\r", "+\t} finally {\r", "+\t\tdone();\r", "+\t}\r"]}], "num": 21761}
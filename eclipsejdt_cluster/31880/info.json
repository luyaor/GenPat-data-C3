{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b05ba0fe52726aef535652a22d196b1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e302f4e17a060f2c689fb46cd3c0cd6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "4b71ef3be11b1e52d22d795d03898285bb112516", "commitAfterChange": "9966baba46edc3df548fabd09b133cadc0093ca6", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " public void test049()", "signatureAfterChange": " public void test049()", "diff": ["+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=382721, [1.8][compiler] Effectively final variables needs special treatment", "+public void test049() {", "+\t// This test checks that the simple cases are OK", "+\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"interface I {\\n\" + ", "+\t\t\t\t\t\"\tvoid doit();\\n\" + ", "+\t\t\t\t\t\"}\\n\" + ", "+\t\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\t\"  public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\t\"    int var = 2;\\n\" + ", "+\t\t\t\t\t\"    I x2 = () -> {\\n\" + ", "+\t\t\t\t\t\"      System.out.println(args); // OK: args is not re-assignment since declaration/first assignment\\n\" + ", "+\t\t\t\t\t\"    };\\n\" + ", "+\t\t\t\t\t\"    var=2;\\n\" + ", "+\t\t\t\t\t\"  }\\n\" + ", "+\t\t\t\t\t\"}\" ,", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"\tSystem.out.println(args); // OK: args is not re-assignment since declaration/first assignment\\n\" + ", "+\t\t\t\t\"\t                   ^^^^\\n\" + ", "+\t\t\t\t\"Missing code implementation in the compiler\\n\" +  // expected since emulation path computation is not in place.", "+\t\t\t\t\"----------\\n\");", "+}", "-public void test049() {", "-\t\t\t\t\t\"  public static void main(String[] args) {\\n\" + ", "-\t\t\t\t\t\"    try {\\n\" + ", "-\t\t\t\t\t\"      new java.io.File(\\\"dweep\\\").getCanonicalPath();\\n\" + ", "-\t\t\t\t\t\"    } catch (java.io.IOException ioe) {\\n\" + ", "-\t\t\t\t\t\"      I x2 = () -> {\\n\" + ", "-\t\t\t\t\t\"        System.out.println(ioe.getMessage()); // OK: args is not re-assignment since declaration/first assignment\\n\" + ", "-\t\t\t\t\t\"      };\\n\" + ", "-\t\t\t\t\t\"    };\\n\" + ", "-\t\t\t\t\t\"    java.util.List<String> list = new java.util.ArrayList<>();\\n\" + ", "-\t\t\t\t\t\"    for (String s : list) {\\n\" + ", "-\t\t\t\t\t\"      I x2 = () -> {\\n\" + ", "-\t\t\t\t\t\"        System.out.println(s); // OK: args is not re-assignment since declaration/first assignment\\n\" + ", "-\t\t\t\t\t\"      };\\n\" + ", "-\t\t\t\t\t\"    };\\n\" + ", "-\t\t\t\t\t\"    for (String s2 : list) {\\n\" + ", "-\t\t\t\t\t\"      s2 = \\\"Nice!\\\";\\n\" + ", "-\t\t\t\t\t\"      I x2 = () -> {\\n\" + ", "-\t\t\t\t\t\"        System.out.println(s2); // Error: var is not effectively final\\n\" + ", "-\t\t\t\t\t\"      };\\n\" + ", "-\t\t\t\t\t\"    };\\n\" + ", "-\t\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\t\"\\n\" +", "-\t\t\t\t\t\"  void foo() {\\n\" + ", "-\t\t\t\t\t\"    try {\\n\" + ", "-\t\t\t\t\t\"      \\n\" + ", "-\t\t\t\t\t\"  } catch (NullPointerException | ArrayIndexOutOfBoundsException e) {\\n\" + ", "-\t\t\t\t\t\"    I i = () -> {\\n\" + ", "-\t\t\t\t\t\"      System.out.println(e);\\n\" + ", "-\t\t\t\t\t\"     };\\n\" + ", "-\t\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\t\"       System.out.println(var);\\n\" + ", "-\t\t\t\t},", "-\t\t\t\t\"1. ERROR in X.java (at line 22)\\n\" + ", "-\t\t\t\t\"\tSystem.out.println(s2); // Error: var is not effectively final\\n\" + ", "-\t\t\t\t\"\t                   ^^\\n\" + ", "-\t\t\t\t\"The variable s2 must be must be final or effectively final if used in an inner class\\n\" + ", "-\t\t\t\t\"----------\\n\"", "-\t\t\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d432519c36501ba38f5178c13d1c20bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "285d9f55145724991833663a691553a09e2c72de", "commitAfterChange": "b36a137cc1f0fb3b34ff097a37fce4ecbf12fde7", "methodNumberBeforeChange": 209, "methodNumberAfterChange": 209, "signatureBeforeChange": " \tpublic void test0201()", "signatureAfterChange": " \tpublic void test0201()", "diff": ["+\t\tif (this.complianceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\tthis.runNegativeTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\t\"\tpublic X(String t){\\n\" + ", "+\t\t\t\t\t\"\t\tSystem.out.println(t);\\n\" + ", "+\t\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\t\"\t\tclass Local extends X {\\n\" + ", "+\t\t\t\t\t\"\t\t\tLocal() {\\n\" +", "+\t\t\t\t\t\"\t\t\t\t<String>super(\\\"FAILED\\\");\\n\" + ", "+\t\t\t\t\t\"\t\t\t}\\n\" + ", "+\t\t\t\t\t\"\t\t};\\n\" + ", "+\t\t\t\t\t\"\t\tnew Local();\\n\" +\t\t\t\t", "+\t\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\t\"}\\n\", ", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\t\"\t<String>super(\\\"FAILED\\\");\\n\" + ", "+\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"The constructor X(String) of type X is not generic; it cannot be parameterized with arguments <String>\\n\" + ", "+\t\t\t\t\"----------\\n\");", "+\t\t\treturn;", "+\t\t}", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\tpublic X(String t){\\n\" + ", "-\t\t\t\t\"\t\tSystem.out.println(t);\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-\t\t\t\t\"\t\tclass Local extends X {\\n\" + ", "-\t\t\t\t\"\t\t\tLocal() {\\n\" +", "-\t\t\t\t\"\t\t\t\t<String>super(\\\"FAILED\\\");\\n\" + ", "-\t\t\t\t\"\t\t\t}\\n\" + ", "-\t\t\t\t\"\t\t};\\n\" + ", "-\t\t\t\t\"\t\tnew Local();\\n\" +\t\t\t\t", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\", ", "-\t\t\t},", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 8)\\n\" + ", "-\t\t\t\"\t<String>super(\\\"FAILED\\\");\\n\" + ", "-\t\t\t\"\t        ^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The constructor X(String) of type X is not generic; it cannot be parameterized with arguments <String>\\n\" + ", "-\t\t\t\"----------\\n\");", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\t\"\tpublic X(String t){\\n\" + ", "+\t\t\t\t\t\"\t\tSystem.out.println(t);\\n\" + ", "+\t\t\t\t\t\"\t\tZork z;\\n\" +", "+\t\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\t\"\t\tclass Local extends X {\\n\" + ", "+\t\t\t\t\t\"\t\t\tLocal() {\\n\" +", "+\t\t\t\t\t\"\t\t\t\t<String>super(\\\"FAILED\\\");\\n\" + ", "+\t\t\t\t\t\"\t\t\t}\\n\" + ", "+\t\t\t\t\t\"\t\t};\\n\" + ", "+\t\t\t\t\t\"\t\tnew Local();\\n\" +\t\t\t\t", "+\t\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\t\"}\\n\", ", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\tZork z;\\n\" + ", "+\t\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\t\"\t<String>super(\\\"FAILED\\\");\\n\" + ", "+\t\t\t\t\"\t ^^^^^^\\n\" + ", "+\t\t\t\t\"Unused type arguments for the non generic constructor X(String) of type X; it should not be parameterized with arguments <String>\\n\" + ", "+\t\t\t\t\"----------\\n\");"]}], "num": 31880}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "15cde77e3eeed1e513c72526d50d3cd0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf99527e5138ad296f65ab69bcc6b9b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "f3bba67d7292a507e1b3691e11f35ff1c9658d01", "commitAfterChange": "5ba107df633d1beada69a1a39d8b4efe7c8b77f6", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \tpublic MethodBinding getConstructor(\r \t\tReferenceBinding receiverType,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r \tpublic MethodBinding getConstructor(\r \t\tReferenceBinding receiverType,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "diff": ["+// is this needed? Or when the type is resolved, is it recorded?\r", "+\t\tcompilationUnitScope().recordTypeReference(receiverType);\r", "+// replaces call to addTypeReferences\r", "+\t\tcompilationUnitScope().recordReferences(argumentTypes);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e84e2b80d02e04b918510aa2604e38f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "f3bba67d7292a507e1b3691e11f35ff1c9658d01", "commitAfterChange": "5ba107df633d1beada69a1a39d8b4efe7c8b77f6", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": "\r \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\t\t\t\t\tReferenceBinding localType = ((BlockScope) scope).findLocalType(name);\r", "-\t\t\t\t\t\t// looks in this scope only\r", "+\t\t\t\t\t\tReferenceBinding localType = ((BlockScope) scope).findLocalType(name); // looks in this scope only\r", "+\r", "-\t\t\t\t\t\t\tif (foundType == null\r", "-\t\t\t\t\t\t\t\t|| (foundType.problemId() == NotVisible && memberType.problemId() != NotVisible))\r", "+\t\t\t\t\t\t\tif (foundType == null || (foundType.problemId() == NotVisible && memberType.problemId() != NotVisible))\r", "+\r", "-\t\t\t\t\tif (CharOperation\r", "-\t\t\t\t\t\t.equals(typeImport.compoundName[typeImport.compoundName.length - 1], name))\r", "+\t\t\t\t\tif (CharOperation.equals(typeImport.compoundName[typeImport.compoundName.length - 1], name))\r", "-\t\t\tReferenceBinding type = findType(name, unitScope.fPackage, unitScope.fPackage);\r", "-\t\t\t// is always visible\r", "-\t\t\tif (type != null)\r", "-\t\t\t\treturn type;\r", "+\t\t\tReferenceBinding type = findType(name, unitScope.fPackage, unitScope.fPackage); // is always visible\r", "+\t\t\tif (type != null) return type;\r", "+\t\t\tcompilationUnitScope().recordSimpleReference(name);\r", "-\t\t// Answer error binding -- could not find name\r", "+\r", "+// replaces calls to addNamespaceReference\r", "+\t\tcompilationUnitScope().recordSimpleReference(name);\r", "+\t\t// Answer error binding -- could not find name\r"]}], "num": 39521}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a250276f837ffe6107f68540da23a942", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb006f49b2494bc20a71144a0765f1cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "d4b8f1437bd894de59822a00977399b8af50c7a1", "commitAfterChange": "00e190bf5f96c54b05d4853702eef90ea6dc4747", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void checkAnnotation()", "signatureAfterChange": " public void checkAnnotation()", "diff": ["-\t\t\t\tdeprecated = (comment[nextPos] == ' ') || (comment[nextPos] == '\\t') || (comment[nextPos] == '\\n') || (comment[nextPos] == '\\r') || (comment[nextPos] == '*');", "+\t\t\t\tchar nextCharacter = comment[nextPos];", "+\t\t\t\tif (nextCharacter == '\\\\') {", "+\t\t\t\t\tint c1, c2, c3, c4;", "+\t\t\t\t\tnextPos++;", "+\t\t\t\t\twhile (comment[nextPos] == 'u') nextPos++;", "+\t\t\t\t\tif (!(((c1 = Character.getNumericValue(comment[nextPos++])) > 15", "+\t\t\t\t\t\t|| c1 < 0)", "+\t\t\t\t\t\t|| ((c2 = Character.getNumericValue(comment[nextPos++])) > 15 || c2 < 0)", "+\t\t\t\t\t\t|| ((c3 = Character.getNumericValue(comment[nextPos++])) > 15 || c3 < 0)", "+\t\t\t\t\t\t|| ((c4 = Character.getNumericValue(comment[nextPos++])) > 15 || c4 < 0))) {", "+\t\t\t\t\t\t\tnextCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "+\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tdeprecated = Character.isWhitespace(nextCharacter) || nextCharacter == '*';"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc74c6fff42a1536b8d7496788f1b0a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/StringLiteral.java", "commitBeforeChange": "44da6dbdddc84933c9778a1c775b25e500ccfc9b", "commitAfterChange": "c68d705c412170c5bfbef661e69c45f2613fe9ed", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \r \tpublic String getLiteralValue()", "signatureAfterChange": " \r \tpublic String getLiteralValue()", "diff": ["+\t\t\t\t\t\tcase 'u' :\r", "+\t\t\t\t\t\t\t//handle the case of unicode.\r", "+\t\t\t\t\t\t\tint currentPosition = i + 1;\r", "+\t\t\t\t\t\t\tint c1 = 0, c2 = 0, c3 = 0, c4 = 0;\r", "+\t\t\t\t\t\t\tif ((c1 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t\t\t|| c1 < 0\r", "+\t\t\t\t\t\t\t\t|| (c2 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t\t\t|| c2 < 0\r", "+\t\t\t\t\t\t\t\t|| (c3 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t\t\t|| c3 < 0\r", "+\t\t\t\t\t\t\t\t|| (c4 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t\t\t|| c4 < 0){\r", "+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid string literal\");\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\tb.append((char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4));\r", "+\t\t\t\t\t\t\t\ti = currentPosition - 1;\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tbreak;\r"]}], "num": 5505}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0ce7f8dabcc556a0ad98349d02190f1b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bf51a38f41a1a6cacb17c22e2ad21cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "09f42f58bcdf2fa84ccd2b8b65f28ab3036222ca", "commitAfterChange": "57e8dd41219d846363c918d62edb5007994c5c79", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic LambdaExpression getResolvedCopyForInferenceTargeting(TypeBinding targetType)", "signatureAfterChange": " \tpublic LambdaExpression getResolvedCopyForInferenceTargeting(TypeBinding targetType)", "diff": ["-\t\t\t\tif (this.returnsVoid) {", "+\t\t\t\tif (copy.returnsVoid) {", "-\t\t\tif (type == null || !type.isValidBinding() || this.hasIgnoredMandatoryErrors || enclosingScopesHaveErrors()) {", "-\t\t\t\treturn null;", "+\t\t\tif (type != null && type.isValidBinding() && !this.hasIgnoredMandatoryErrors && !enclosingScopesHaveErrors()) {", "+\t\t\t\t// value compatibility of block lambda's is the only open question.", "+\t\t\t\tif (!copy.shapeAnalysisComplete)", "+\t\t\t\t\tcopy.valueCompatible = copy.doesNotCompleteNormally();", "+\t\t\t} else {", "+\t\t\t\tif (!copy.returnsVoid)", "+\t\t\t\t\tcopy.valueCompatible = true; // optimistically, TODO: is this OK??", "-\t\t\t", "-\t\t\t// value compatibility of block lambda's is the only open question.", "-\t\t\tif (!copy.shapeAnalysisComplete)", "-\t\t\t\tcopy.valueCompatible = copy.doesNotCompleteNormally();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "468fb2cb1f53ef1e05898aad19fa6710", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementsImpl.java", "commitBeforeChange": "c185e8c51c58a1a41fb53eb0e5960063cb655254", "commitAfterChange": "49221e1dedf80843e710093d67caabba63367062", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t@Override \tpublic String getConstantExpression(Object value)", "signatureAfterChange": " \t@Override \tpublic String getConstantExpression(Object value)", "diff": ["-\t\t\t\t|| !(value instanceof Byte)", "-\t\t\t\t|| !(value instanceof Float)", "-\t\t\t\t|| !(value instanceof Double)", "-\t\t\t\t|| !(value instanceof Long)", "-\t\t\t\t|| !(value instanceof Short)", "-\t\t\t\t|| !(value instanceof Character)", "-\t\t\t\t|| !(value instanceof String)) {", "+\t\t\t\t&& !(value instanceof Byte)", "+\t\t\t\t&& !(value instanceof Float)", "+\t\t\t\t&& !(value instanceof Double)", "+\t\t\t\t&& !(value instanceof Long)", "+\t\t\t\t&& !(value instanceof Short)", "+\t\t\t\t&& !(value instanceof Character)", "+\t\t\t\t&& !(value instanceof String)", "+\t\t\t\t&& !(value instanceof Boolean)) {"]}], "num": 13842}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "92ed5bd171300db81490f502933e424e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "243a241e4edddf38cbf7254bf26b40a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "ce7bef49e9ed96b08f61ac987775cd5b5704ee11", "commitAfterChange": "07a11e1e272139637f646eb5763c54327cd4bc46", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": " private char[] readStreamChars(FileInputStream stream) throws IOException", "signatureAfterChange": " private char[] readStreamChars(FileInputStream stream) throws IOException", "diff": ["-\tint length = (streamBuffer[this.bufferIndex++]&0xFF)<<8;", "-\tint bufferSize = BUFFER_READ_SIZE;", "-\tif (stream != null && this.bufferIndex == bufferSize) {", "-\t\tthis.bufferIndex = 0;", "-\t\tint readSize = this.streamEnd - this.streamPos;", "-\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize < bufferSize ? readSize : bufferSize);", "-\t}", "-\tlength += (this.streamBuffer[this.bufferIndex++]&0xFF);", "-\tif (stream != null && this.bufferIndex == bufferSize) {", "-\t\tthis.bufferIndex = 0;", "-\t\tint readSize = this.streamEnd - this.streamPos;", "-\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize < bufferSize ? readSize : bufferSize);", "-\t}", "+\tif (stream != null && this.bufferIndex + 2 >= this.bufferEnd)", "+\t\treadStreamBuffer(stream);", "+\tint length = (streamBuffer[this.bufferIndex++] & 0xFF) << 8;", "+\tlength += this.streamBuffer[this.bufferIndex++] & 0xFF;", "+", "-\tint idx = this.bufferIndex;", "-\t\tbyte b = streamBuffer[idx++];", "-\t\tswitch (b & 0xF0) {", "-\t\t\tcase 0x00 :", "-\t\t\tcase 0x10 :", "-\t\t\tcase 0x20 :", "-\t\t\tcase 0x30 :", "-\t\t\tcase 0x40 :", "-\t\t\tcase 0x50 :", "-\t\t\tcase 0x60 :", "-\t\t\tcase 0x70 :", "-\t\t\t\tword[i++]= (char) b;", "-\t\t\t\tbreak;", "-\t\t\tcase 0xC0 :", "-\t\t\tcase 0xD0 :", "-\t\t\t\tif (stream != null && idx == bufferSize) {", "-\t\t\t\t\tint readSize = this.streamEnd - this.streamPos;", "-\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize < bufferSize ? readSize : bufferSize);", "-\t\t\t\t\tidx = 0;", "-\t\t\t\t}", "-\t\t\t\tchar next = (char) streamBuffer[idx++];", "-\t\t\t\tif ((next & 0xC0) != 0x80) {", "+\t\t// how many characters can be decoded without refilling the buffer?", "+\t\tint charsInBuffer = i + ((this.bufferEnd - this.bufferIndex) / 3);", "+\t\t// all the characters must already be in the buffer if we're at the end of the stream", "+\t\tif (charsInBuffer > length || this.bufferEnd != this.streamBuffer.length)", "+\t\t\tcharsInBuffer = length;", "+\t\twhile (i < charsInBuffer) {", "+\t\t\tbyte b = this.streamBuffer[this.bufferIndex++];", "+\t\t\tswitch (b & 0xF0) {", "+\t\t\t\tcase 0x00 :", "+\t\t\t\tcase 0x10 :", "+\t\t\t\tcase 0x20 :", "+\t\t\t\tcase 0x30 :", "+\t\t\t\tcase 0x40 :", "+\t\t\t\tcase 0x50 :", "+\t\t\t\tcase 0x60 :", "+\t\t\t\tcase 0x70 :", "+\t\t\t\t\tword[i++]= (char) b;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 0xC0 :", "+\t\t\t\tcase 0xD0 :", "+\t\t\t\t\tchar next = (char) this.streamBuffer[this.bufferIndex++];", "+\t\t\t\t\tif ((next & 0xC0) != 0x80) {", "+\t\t\t\t\t\tthrow new UTFDataFormatException();", "+\t\t\t\t\t}", "+\t\t\t\t\tchar ch = (char) ((b & 0x1F) << 6);", "+\t\t\t\t\tch |= next & 0x3F;", "+\t\t\t\t\tword[i++] = ch;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 0xE0 :", "+\t\t\t\t\tchar first = (char) this.streamBuffer[this.bufferIndex++];", "+\t\t\t\t\tchar second = (char) this.streamBuffer[this.bufferIndex++];", "+\t\t\t\t\tif ((first & second & 0xC0) != 0x80) {", "+\t\t\t\t\t\tthrow new UTFDataFormatException();", "+\t\t\t\t\t}", "+\t\t\t\t\tch = (char) ((b & 0x0F) << 12);", "+\t\t\t\t\tch |= ((first& 0x3F) << 6);", "+\t\t\t\t\tch |= second & 0x3F;", "+\t\t\t\t\tword[i++] = ch;", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "-\t\t\t\t}", "-\t\t\t\tchar ch = (char) ((b & 0x1F) << 6);", "-\t\t\t\tch |= next & 0x3F;", "-\t\t\t\tword[i++] = ch;", "-\t\t\t\tbreak;", "-\t\t\tcase 0xE0 :", "-\t\t\t\tif (stream != null && idx == bufferSize) {", "-\t\t\t\t\tint readSize = this.streamEnd - this.streamPos;", "-\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize < bufferSize ? readSize : bufferSize);", "-\t\t\t\t\tidx = 0;", "-\t\t\t\t}", "-\t\t\t\tchar first = (char) streamBuffer[idx++];", "-\t\t\t\tif (stream != null && idx == bufferSize) {", "-\t\t\t\t\tint readSize = this.streamEnd - this.streamPos;", "-\t\t\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize < bufferSize ? readSize : bufferSize);", "-\t\t\t\t\tidx = 0;", "-\t\t\t\t}", "-\t\t\t\tchar second = (char) streamBuffer[idx++];", "-\t\t\t\tif ((first & second & 0xC0) != 0x80) {", "-\t\t\t\t\tthrow new UTFDataFormatException();", "-\t\t\t\t}", "-\t\t\t\tch = (char) ((b & 0x0F) << 12);", "-\t\t\t\tch |= ((first& 0x3F) << 6);", "-\t\t\t\tch |= second & 0x3F;", "-\t\t\t\tword[i++] = ch;", "-\t\t\t\tbreak;", "-\t\t\tdefault:", "-\t\t\t\tthrow new UTFDataFormatException();", "+\t\t\t}", "-\t\t// as we read more bytes, chars array may be read before the end of the buffer", "-\t\tif (stream != null && idx == bufferSize) {", "-\t\t\tint readSize = this.streamEnd - this.streamPos;", "-\t\t\tthis.streamPos += stream.read(this.streamBuffer, 0, readSize < bufferSize ? readSize : bufferSize);", "-\t\t\tidx = 0;", "-\t\t}", "+\t\tif (i < length && stream != null)", "+\t\t\treadStreamBuffer(stream);", "-\tthis.bufferIndex = idx; // rsync buffer index"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28edf008fd911bffd19fcd085fb7fd67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "09eb4e140e56d67f0ba07a1283f7afed03f5d473", "commitAfterChange": "193042cfcc3e974ade1d4da172a703fabd891361", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " private void writeStreamChars(FileOutputStream stream, char[] array) throws IOException", "signatureAfterChange": " private void writeStreamChars(FileOutputStream stream, char[] array) throws IOException", "diff": ["-\tint length= array.length;", "+\tif ((this.bufferIndex + 2) >= BUFFER_WRITE_SIZE)  {", "+\t\tstream.write(this.streamBuffer, 0, this.bufferIndex);", "+\t\tthis.bufferIndex = 0;", "+\t}", "+\tint length = array.length;", "-\tif (this.bufferIndex == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\tthis.bufferIndex = 0;", "-\t}", "-\tif (this.bufferIndex == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\tthis.bufferIndex = 0;", "-\t}", "-\tint idx = this.bufferIndex;", "-\tfor (int i=0; i<length; i++) {", "-\t\tint ch = array[i];", "-\t\tif ((ch & 0x007F) == ch) {", "-\t\t\tthis.streamBuffer[idx++] = (byte) ch;", "+\tthis.streamEnd += 2;", "+", "+\t// we're assuming that very few char[] are so large that we need to flush the buffer more than once, if at all", "+\tint totalBytesNeeded = length * 3;", "+\tif (totalBytesNeeded <= BUFFER_WRITE_SIZE) {", "+\t\tif (this.bufferIndex + totalBytesNeeded > BUFFER_WRITE_SIZE) {", "+\t\t\t// flush the buffer now to make sure there is room for the array", "+\t\t\tstream.write(this.streamBuffer, 0, this.bufferIndex);", "+\t\t\tthis.bufferIndex = 0;", "-\t\telse if ((ch & 0x07FF) == ch) {", "+\t\twriteStreamChars(stream, array, 0, length);", "+\t} else {", "+\t\tint charsPerWrite = BUFFER_WRITE_SIZE / 3;", "+\t\tint start = 0;", "+\t\twhile (start < length) {", "+\t\t\tstream.write(this.streamBuffer, 0, this.bufferIndex);", "+\t\t\tthis.bufferIndex = 0;", "+\t\t\tint charsLeftToWrite = length - start;", "+\t\t\tint end = start + (charsPerWrite < charsLeftToWrite ? charsPerWrite : charsLeftToWrite);", "+\t\t\twriteStreamChars(stream, array, start, end);", "+\t\t\tstart = end;", "+\t\t}", "+\t}", "+}", "-\t\t\tthis.streamBuffer[idx++] = b;", "-\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\tidx = 0;", "-\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t}", "-\t\t\tthis.streamBuffer[idx++] = b;", "-\t\t\tthis.streamBuffer[idx++] = b;", "-\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\tidx = 0;", "-\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t}", "-\t\t\tthis.streamBuffer[idx++] = b;", "-\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\tidx = 0;", "-\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t}", "-\t\t\tthis.streamBuffer[idx++] = b;", "-\t\t}", "-\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\tidx = 0;", "-\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\tthis.streamEnd += idx - this.bufferIndex + 2;", "-\tthis.bufferIndex = idx;"]}], "num": 43453}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a345f2d75f1d6b376637d2c2459f087f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81856f31220b81c81caf82173778a21a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java", "commitBeforeChange": "2090b5298a9eb5bc7687aac3bc306c4718d688bb", "commitAfterChange": "7549708bfbb6541d509ec2f74894b85fedbf2954", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void _loadFromJars (final String factoryClassName, final File[] factoryPaths)", "signatureAfterChange": " \t \tprivate ClassLoader createClassLoader( Collection<FactoryContainer> containers )", "diff": ["+\t", "+\tprivate ClassLoader createClassLoader( Collection<FactoryContainer> containers )", "+\t{", "+\t\tArrayList<URL> urlList = new ArrayList<URL>( containers.size() );", "+\t\tfor ( FactoryContainer fc : containers ) ", "+\t\t{", "+\t\t\tif ( ! fc.isPlugin() )", "+\t\t\t{", "+\t\t\t\tJarFactoryContainer jfc = (JarFactoryContainer) fc;", "+\t\t\t\ttry", "+\t\t\t\t{", "+\t\t\t\t\tURL u = jfc.getJarFileURL();", "+\t\t\t\t\turlList.add( u );", "+\t\t\t\t}", "+\t\t\t\tcatch ( MalformedURLException mue )", "+\t\t\t\t{", "+\t\t\t\t\t// TODO:  log this exception", "+\t\t\t\t\tmue.printStackTrace();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tClassLoader cl = null;", "+\t\tif ( urlList.size() > 0 )", "+\t\t{", "+\t\t\tURL[] urls = (URL[])urlList.toArray();", "+\t\t\tcl = new URLClassLoader( urls );", "+\t\t}", "+\t\treturn cl;", "+\t}", "-     */", "-    private void _loadFromJars (final String factoryClassName, final File[] factoryPaths)", "-    {", "-        final long start = System.nanoTime();", "-\t\tFile[] jarPath;", "-\t\t// Create an appropriate loader.  If factoryPaths is set, use it; otherwise use classpath.", "-        ClassLoader factoryLoader = null;", "-\t\tif (factoryPaths.length > 0) {", "-\t\t\tfactoryLoader = _getExtensionClassLoader(factoryPaths);", "-\t\t\tjarPath = factoryPaths;", "-\t\t}", "-\t\telse {", "-\t\t\tfactoryLoader = getClass().getClassLoader();", "-\t\t\tjarPath = new File[0]; //TODO: how can I list all jars on compile cmdline classPath?", "-\t\t}", "-", "-\t\t// If factoryClassName is specified, load only that; otherwise search all jars.", "-        if( factoryClassName != null ){", "-\t\t\t_loadFactory(factoryClassName, factoryLoader);", "-\t\t\treturn;", "-        }", "-        else {", "-            final Set<String> classNames = new HashSet<String>();", "-\t\t\tfor (File jar : jarPath) {", "-                classNames.addAll(_getServiceClassnamesFromJar(jar));", "-\t\t\t}", "-            for (String className : classNames) {", "-                final long loadStart = System.nanoTime();", "-                _loadFactory(className, factoryLoader);", "-                if (_verboseLoad) {", "-                    System.err.printf(\"\\tLoading APT factory %s took %.2f seconds.\", ", "-\t\t\t\t\t\t\tclassName, (System.nanoTime() - loadStart) / 1000000000.0);", "-                    System.err.println();", "-                    System.err.println();", "-                }", "-            }", "-        }", "-", "-        if (_verboseLoad) {", "-            System.err.println();", "-            System.err.printf(\"Loading all APT factories took %.2f seconds.\", (System.nanoTime() - start) / 1000000000.0);", "-            System.err.println();", "-            System.err.println();", "-        }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a39170762c5982053d7079f5f12785d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "38f73e89bd4606189d7e6d499593d5aa49ab247d", "commitAfterChange": "83b83ec335a27590393034d86f94208edbfcc45a", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "  \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": "  \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\tfor (int level = 0; level <= VARARGS_COMPATIBLE; level++) {", "+\t\tfor (int level = 0, max = VARARGS_COMPATIBLE; level <= max; level++) {", "+\t\t\t\t\tmax = level; // do not examine further categories", "-\t\t\t\t\t} else if (method.isStatic()) {", "-\t\t\t\t\t\t// detect collision between static import methods from unconnected types", "-\t\t\t\t\t\tif (method.declaringClass != method2.declaringClass && method.original().areParametersEqual(method2.original()))", "-\t\t\t\t\t\t\tif (method.declaringClass.findSuperTypeWithSameErasure(method2.declaringClass) == null)", "+\t\t\t\t\t}", "+", "+\t\t\t\t\tif (method == method2) continue; // interfaces may be walked twice from different paths", "+", "+\t\t\t\t\t// see if method & method2 are duplicates due to the current substitution or multiple static imported methods", "+\t\t\t\t\tif (method.tiebreakMethod().areParametersEqual(method2.tiebreakMethod())) {", "+\t\t\t\t\t\tif (method.declaringClass == method2.declaringClass)", "+\t\t\t\t\t\t\tcontinue nextVisible; // duplicates thru substitution", "+", "+\t\t\t\t\t\tMethodBinding original = method.original();", "+\t\t\t\t\t\tif (method.hasSubstitutedParameters() || original.typeVariables != NoTypeVariables) {", "+\t\t\t\t\t\t\tReferenceBinding declaringClass = (ReferenceBinding) method.declaringClass.erasure();", "+\t\t\t\t\t\t\tReferenceBinding superType = declaringClass.findSuperTypeWithSameErasure(method2.declaringClass.erasure());", "+\t\t\t\t\t\t\tif (superType == null) {", "+\t\t\t\t\t\t\t\t// accept concrete methods over abstract methods found due to the default abstract method walk", "+\t\t\t\t\t\t\t\tif (!method.isAbstract() && method2.isAbstract())", "+\t\t\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t} else if (!method.original().areTypeVariableErasuresEqual(method2.original())) {", "-\t\t\t\t\t\t// cannot override an inherited method if type variables are not compatible", "-\t\t\t\t\t\tcontinue nextVisible;", "-\t\t\t\t\t} else if (method.hasSubstitutedParameters() && method.isAbstract() == method2.isAbstract()) { // must both be abstract or concrete, not one of each", "-\t\t\t\t\t\tif (method.areParametersEqual(method2)) {", "-\t\t\t\t\t\t\t// its possible with 2 methods that one does not inherit from the other", "-\t\t\t\t\t\t\t// need to find their methods from the receiver type", "-\t\t\t\t\t\t\t// see cases in verify test #43", "-\t\t\t\t\t\t\tMethodBinding original = method.original();", "-\t\t\t\t\t\t\tMethodBinding original2 = method2.original();", "-\t\t\t\t\t\t\tif (original.areParameterErasuresEqual(original2)) continue;", "-\t\t\t\t\t\t\tReferenceBinding receiverType = (ReferenceBinding) ((MessageSend) invocationSite).actualReceiverType;", "-\t\t\t\t\t\t\tif (receiverType != method.declaringClass) {", "-\t\t\t\t\t\t\t\tReferenceBinding superType = ((ReferenceBinding) receiverType.erasure()).findSuperTypeWithSameErasure(original.declaringClass);", "-\t\t\t\t\t\t\t\tif (superType != null) {", "-\t\t\t\t\t\t\t\t\tMethodBinding[] superMethods = superType.getMethods(original.selector);", "-\t\t\t\t\t\t\t\t\tfor (int m = 0, l = superMethods.length; m < l; m++) {", "-\t\t\t\t\t\t\t\t\t\tif (superMethods[m].original() == original) {", "-\t\t\t\t\t\t\t\t\t\t\toriginal = superMethods[m];", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tMethodBinding inheritedMethod = method2;", "+\t\t\t\t\t\t\tMethodBinding inheritedOriginal = method2.original();", "+\t\t\t\t\t\t\tif (method.hasSubstitutedParameters()) { // must find inherited method with the same substituted variables", "+\t\t\t\t\t\t\t\tMethodBinding[] superMethods = superType.getMethods(inheritedMethod.selector);", "+\t\t\t\t\t\t\t\tfor (int m = 0, l = superMethods.length; m < l; m++) {", "+\t\t\t\t\t\t\t\t\tif (superMethods[m].original() == inheritedOriginal) {", "+\t\t\t\t\t\t\t\t\t\tinheritedMethod = superMethods[m];", "+\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tif (receiverType != method2.declaringClass) {", "-\t\t\t\t\t\t\t\tReferenceBinding superType = ((ReferenceBinding) receiverType.erasure()).findSuperTypeWithSameErasure(original2.declaringClass);", "-\t\t\t\t\t\t\t\tif (superType != null) {", "-\t\t\t\t\t\t\t\t\tMethodBinding[] superMethods = superType.getMethods(original2.selector);", "-\t\t\t\t\t\t\t\t\tfor (int m = 0, l = superMethods.length; m < l; m++) {", "-\t\t\t\t\t\t\t\t\t\tif (superMethods[m].original() == original2) {", "-\t\t\t\t\t\t\t\t\t\t\toriginal2 = superMethods[m];", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (!original.areParametersEqual(original2))", "-\t\t\t\t\t\t\t\tcontinue nextVisible; // cannot be substituted from 2 different type variables", "+\t\t\t\t\t\t\tif (original.typeVariables != NoTypeVariables)", "+\t\t\t\t\t\t\t\tinheritedMethod = original.computeSubstitutedMethod(inheritedMethod == method2 ? inheritedOriginal : inheritedMethod, environment());", "+\t\t\t\t\t\t\tif (inheritedMethod == null || !original.areParametersEqual(inheritedMethod))", "+\t\t\t\t\t\t\t\tbreak nextVisible; // dup thru substitution, not overridden... cannot find possible match", "+\t\t\t\t\t\t\t// method overrides method2, accept it", "+\t\t\t\t\t\t} else if (method.isStatic() && method2.isStatic()) {", "+\t\t\t\t\t\t\tReferenceBinding declaringClass = (ReferenceBinding) method.declaringClass.erasure();", "+\t\t\t\t\t\t\tReferenceBinding superType = declaringClass.findSuperTypeWithSameErasure(method2.declaringClass.erasure());", "+\t\t\t\t\t\t\tif (superType == null)", "+\t\t\t\t\t\t\t\tcontinue nextVisible; // static methods from unrelated types"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c69a2526ff20beb5041c8b660447d4a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingNodeSet.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void reportMatching(TypeDeclaration type, IJavaElement parent) throws CoreException", "signatureAfterChange": " public void reportMatching(TypeDeclaration type, IJavaElement parent) throws CoreException", "diff": ["-\t", "-\t// filter out element not in hierarchy scope", "-\tboolean typeInHierarchy = type.binding == null || this.locator.typeInHierarchy(type.binding);", "-\t", "-\t\tenclosingElement = this.locator.createTypeHandle((IType)parent, type.name);", "+\t\tenclosingElement = this.locator.createTypeHandle((IType) parent, type.name);", "-\tInteger level;", "-\t", "-\t// fields", "-\tFieldDeclaration[] fields = type.fields;", "-\tif (fields != null) {", "-\t\tfor (int i = 0; i < fields.length; i++) {", "-\t\t\tFieldDeclaration field = fields[i];", "-\t\t\tif ((level = (Integer)this.matchingNodes.remove(field)) != null", "-\t\t\t\t&& typeInHierarchy", "-\t\t\t\t&& (this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\t\tthis.locator.reportFieldDeclaration(", "-\t\t\t\t\t\tfield, ", "-\t\t\t\t\t\tenclosingElement, ", "-\t\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t}", "-\t\t\tthis.reportMatching(field, enclosingElement, type, typeInHierarchy);", "-\t\t}", "-\t}", "-", "-\t// methods", "-\tAbstractMethodDeclaration[] methods = type.methods;", "-\tif (methods != null) {", "-\t\tfor (int i = 0; i < methods.length; i++) {", "-\t\t\tAbstractMethodDeclaration method = methods[i];", "-\t\t\tif ((level = (Integer)this.matchingNodes.remove(method)) != null", "-\t\t\t\t&& typeInHierarchy", "-\t\t\t\t&& (this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\t\tthis.locator.reportMethodDeclaration(", "-\t\t\t\t\t\tmethod, ", "-\t\t\t\t\t\tenclosingElement, ", "-\t\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t}", "-\t\t\tthis.reportMatching(method, enclosingElement, typeInHierarchy);", "-\t\t}", "-\t}", "-", "-\t// member types", "-\tMemberTypeDeclaration[] memberTypes = type.memberTypes;", "-\tif (memberTypes != null) {", "-\t\tfor (int i = 0; i < memberTypes.length; i++) {", "-\t\t\tMemberTypeDeclaration memberType = memberTypes[i];", "-\t\t\tif ((level = (Integer)this.matchingNodes.remove(memberType)) != null", "-\t\t\t\t&& typeInHierarchy", "-\t\t\t\t&& (this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\t\tthis.locator.reportTypeDeclaration(", "-\t\t\t\t\t\tmemberType, ", "-\t\t\t\t\t\tenclosingElement, ", "-\t\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t}", "-\t\t\tthis.reportMatching(memberType, enclosingElement);", "-\t\t}", "-\t}", "-\t\tTypeReference superType = ((AnonymousLocalTypeDeclaration)type).allocation.type;", "-\t\tif (superType != null && (level = (Integer)this.matchingNodes.remove(superType)) != null) {", "-\t\t\tif ((this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\tthis.locator.reportSuperTypeReference(", "-\t\t\t\t\tsuperType, ", "-\t\t\t\t\tenclosingElement, ", "-\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t}", "+\t\tTypeReference superType = ((AnonymousLocalTypeDeclaration) type).allocation.type;", "+\t\tif (superType != null) {", "+\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(superType);", "+\t\t\tif (level != null && (this.matchContainer & SearchPattern.CLASS) != 0)", "+\t\t\t\tthis.locator.reportSuperTypeReference(superType, enclosingElement, level.intValue());", "-\t\tif (superClass != null && (level = (Integer)this.matchingNodes.remove(superClass)) != null) {", "-\t\t\tif ((this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\tthis.locator.reportSuperTypeReference(", "-\t\t\t\t\tsuperClass, ", "-\t\t\t\t\tenclosingElement, ", "-\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t}", "+\t\tif (superClass != null) {", "+\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(superClass);", "+\t\t\tif (level != null && (this.matchContainer & SearchPattern.CLASS) != 0)", "+\t\t\t\tthis.locator.reportSuperTypeReference(superClass, enclosingElement, level.intValue());", "-\t\t\tfor (int i = 0; i < superInterfaces.length; i++) {", "+\t\t\tfor (int i = 0, l = superInterfaces.length; i < l; i++) {", "-\t\t\t\tif ((level = (Integer)this.matchingNodes.get(superInterface)) != null) {", "-\t\t\t\t\tif ((this.matchContainer & SearchPattern.CLASS) != 0) {", "-\t\t\t\t\t\tthis.locator.reportSuperTypeReference(", "-\t\t\t\t\t\t\tsuperInterface, ", "-\t\t\t\t\t\t\tenclosingElement, ", "-\t\t\t\t\t\t\tlevel.intValue() == SearchPattern.ACCURATE_MATCH ?", "-\t\t\t\t\t\t\t\tIJavaSearchResultCollector.EXACT_MATCH :", "-\t\t\t\t\t\t\t\tIJavaSearchResultCollector.POTENTIAL_MATCH);", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(superInterface);", "+\t\t\t\tif (level != null && (this.matchContainer & SearchPattern.CLASS) != 0)", "+\t\t\t\t\tthis.locator.reportSuperTypeReference(superInterface, enclosingElement, level.intValue());", "+\t\t}", "+\t}", "+", "+\t// filter out element not in hierarchy scope", "+\tboolean typeInHierarchy = type.binding == null || this.locator.typeInHierarchy(type.binding);", "+", "+\tFieldDeclaration[] fields = type.fields;", "+\tif (fields != null) {", "+\t\tif (this.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\tfor (int i = 0, l = fields.length; i < l; i++) {", "+\t\t\tFieldDeclaration field = fields[i];", "+\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(field);", "+\t\t\tif (level != null && typeInHierarchy && (this.matchContainer & SearchPattern.CLASS) != 0)", "+\t\t\t\tthis.locator.reportFieldDeclaration(field, enclosingElement, level.intValue());", "+\t\t\treportMatching(field, enclosingElement, type, typeInHierarchy);", "+\t\t}", "+\t}", "+", "+\tAbstractMethodDeclaration[] methods = type.methods;", "+\tif (methods != null) {", "+\t\tif (this.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\tfor (int i = 0, l = methods.length; i < l; i++) {", "+\t\t\tAbstractMethodDeclaration method = methods[i];", "+\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(method);", "+\t\t\tif (level != null && typeInHierarchy && (this.matchContainer & SearchPattern.CLASS) != 0)", "+\t\t\t\tthis.locator.reportMethodDeclaration(method, enclosingElement, level.intValue());", "+\t\t\treportMatching(method, enclosingElement, typeInHierarchy);", "+\t\t}", "+\t}", "+", "+\tMemberTypeDeclaration[] memberTypes = type.memberTypes;", "+\tif (memberTypes != null) {", "+\t\tfor (int i = 0, l = memberTypes.length; i < l; i++) {", "+\t\t\tif (this.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\t\tMemberTypeDeclaration memberType = memberTypes[i];", "+\t\t\tInteger level = (Integer) this.matchingNodes.removeKey(memberType);", "+\t\t\tif (level != null && typeInHierarchy && (this.matchContainer & SearchPattern.CLASS) != 0)", "+\t\t\t\tthis.locator.reportTypeDeclaration(memberType, enclosingElement, level.intValue());", "+\t\t\treportMatching(memberType, enclosingElement);"]}], "num": 19860}
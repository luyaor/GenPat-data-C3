{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f6ec094d11bb480c48f00d4d96401588", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6177442adcbd0cfc20af642dd6a3828", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PatternLocator.java", "commitBeforeChange": "9fa4ee2d52d7a35a0c57f8c4b875f0f155754f75", "commitAfterChange": "330462fa1b1e3cc7e6b257e0a0f3470535bf4f54", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " private int refineAccuracy(int accuracy, ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, int depth, MatchLocator locator)", "signatureAfterChange": " int refineAccuracy(int accuracy, ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, boolean isPatternSourceType, int depth, MatchLocator locator)", "diff": ["- */", "-private int refineAccuracy(int accuracy, ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, int depth, MatchLocator locator) {", "+int refineAccuracy(int accuracy, ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, boolean isPatternSourceType, int depth, MatchLocator locator) {", "-\t// Refine at this depth only if there's type arguments", "-\tint patternTypeArgsLength = patternTypeArguments[depth].length;", "-\tif (patternTypeArgsLength != 0) {", "-\t\t// First compare lengthes", "-\t\tTypeBinding[] argumentsBinding = parameterizedBinding.arguments;", "-\t\tint typeArgumentsLength = argumentsBinding == null ? 0 : argumentsBinding.length;", "-\t\tif (patternTypeArgsLength != typeArgumentsLength) return -1;", "-\t\t", "-\t\t// Compare binding for each type argument", "+\t// First compare lengthes", "+\tint patternTypeArgsLength = (patternTypeArguments==null || depth>=patternTypeArguments.length || patternTypeArguments[depth] == null) ? 0 : patternTypeArguments[depth].length;", "+\tTypeBinding[] argumentsBinding = parameterizedBinding.arguments;", "+\tint typeArgumentsLength = argumentsBinding == null ? 0 : argumentsBinding.length;", "+\tint refinedAccuracy =  accuracy;", "+\tif (patternTypeArgsLength == typeArgumentsLength) {", "+\t\tif (patternTypeArgsLength == 0) {", "+\t\t\tif (isPatternSourceType) { // raw source type pattern is always compatible erasure...", "+\t\t\t\tif (refinedAccuracy <= SearchMatch.A_INACCURATE) // ...except if accuracy has been already refined", "+\t\t\t\t\trefinedAccuracy |= SearchMatch.RAW_MASK;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (isPatternSourceType) {", "+\t\t\t\t// parameterized source type pattern is always an incompatible erasure match", "+\t\t\t\trefinedAccuracy |= SearchMatch.A_ERASURE;", "+\t\t\t\trefinedAccuracy &= ~SearchMatch.A_COMPATIBLE;", "+\t\t\t}", "+\t\t}", "+\t} else {", "+\t\tif (patternTypeArgsLength==0) { // raw pattern", "+\t\t\tif (patternTypeArguments == null || depth < patternTypeArguments.length) {", "+\t\t\t\t// if valid type arguments, then it is always compatible erasure except if accuracy has been already refined", "+\t\t\t\tif (refinedAccuracy <= SearchMatch.A_INACCURATE)", "+\t\t\t\t\trefinedAccuracy |= SearchMatch.RAW_MASK;", "+\t\t\t}", "+\t\t\treturn refinedAccuracy;", "+\t\t} else  if (typeArgumentsLength==0) { // raw binding", "+\t\t\t// then it is always compatible erasure except if accuracy has been already refined", "+\t\t\tif (refinedAccuracy <= SearchMatch.A_INACCURATE)", "+\t\t\t\trefinedAccuracy |= SearchMatch.RAW_MASK;", "+\t\t\treturn refinedAccuracy;", "+\t\t}", "+\t\treturn -1;", "+\t}", "+", "+\t// Compare binding for each type argument only if pattern is not erasure only and at first level", "+//\tint refinedAccuracy = SearchMatch.A_ACCURATE;", "+\tif (!isPatternSourceType) {", "+\t\t\t// Get parameterized type argument binding", "+\t\t\tTypeBinding argumentBinding = argumentsBinding[i];", "+", "-\t\t\tchar wildcard = patternTypeArgument[0];", "-\t\t\tswitch (wildcard) {", "+\t\t\tint patternWildcardKind = -1;", "+\t\t\tswitch (patternWildcard) {", "+\t\t\t\t\tif (argumentBinding.isWildcard()) {", "+\t\t\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) argumentBinding;", "+\t\t\t\t\t\tif (wildcardBinding.kind == Wildcard.UNBOUND) continue;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "+\t\t\t\t\tpatternWildcardKind = Wildcard.EXTENDS;", "+\t\t\t\t\tpatternTypeName = CharOperation.subarray(patternTypeArgument, 1, patternTypeArgument.length);", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tpatternWildcardKind = Wildcard.SUPER;", "-\t\t\tif (patternBinding == null) return accuracy;", "+\t\t\tif (patternBinding == null) {", "+\t\t\t\tif (argumentBinding.isWildcard()) {", "+\t\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) argumentBinding;", "+\t\t\t\t\tif (wildcardBinding.kind == Wildcard.UNBOUND) {", "+\t\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\trefinedAccuracy |= SearchMatch.A_ERASURE;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t}", "-\t\t\tTypeBinding argumentBinding = argumentsBinding[i];", "+\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "-\t\t\t\t\tif (argumentBinding.isWildcard()) {", "+\t\t\t\t\tif (argumentBinding.isWildcard()) { // argument is a wildcard", "+\t\t\t\t\t\t// It's ok if wildcards are identical", "+\t\t\t\t\t\tif (wildcardBinding.kind == patternWildcardKind && wildcardBinding.bound == patternBinding) {", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// Look for wildcard compatibility", "-\t\t\t\t\t\t\t\tif (wildcardBinding.bound== null || wildcardBinding.bound.isCompatibleWith(patternBinding))", "+\t\t\t\t\t\t\t\tif (wildcardBinding.bound== null || wildcardBinding.bound.isCompatibleWith(patternBinding)) {", "+\t\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "+\t\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "-\t\t\t\t\tif (argumentBinding.isWildcard()) {", "+\t\t\t\t\tif (argumentBinding.isWildcard()) { // argument is a wildcard", "+\t\t\t\t\t\t// It's ok if wildcards are identical", "+\t\t\t\t\t\tif (wildcardBinding.kind == patternWildcardKind && wildcardBinding.bound == patternBinding) {", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// Look for wildcard compatibility", "-\t\t\t\t\t\t\t\tif (wildcardBinding.bound== null || patternBinding.isCompatibleWith(wildcardBinding.bound))", "+\t\t\t\t\t\t\t\tif (wildcardBinding.bound== null || patternBinding.isCompatibleWith(wildcardBinding.bound)) {", "+\t\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "+\t\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "-\t\t\t\t\t\t\t\tif (wildcardBinding.bound== null || patternBinding.isCompatibleWith(wildcardBinding.bound))", "+\t\t\t\t\t\t\t\tif (wildcardBinding.bound== null || patternBinding.isCompatibleWith(wildcardBinding.bound)) {", "+\t\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (wildcardBinding.bound== null || wildcardBinding.bound.isCompatibleWith(patternBinding))", "+\t\t\t\t\t\t\t\tif (wildcardBinding.bound== null || wildcardBinding.bound.isCompatibleWith(patternBinding)) {", "+\t\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (refinedAccuracy < SearchMatch.A_ERASURE) refinedAccuracy |= SearchMatch.A_COMPATIBLE;", "-\t\t\t// Refine the accuracy to impossible", "-\t\t\treturn -1;", "+\t\t\t// Argument does not match => erasure match will be the only possible one", "+\t\t\treturn SearchMatch.A_ERASURE;", "-\tif (enclosingType != null && enclosingType.isParameterizedType() && (depth+1) < patternTypeArguments.length) {", "-\t\treturn refineAccuracy(accuracy, (ParameterizedTypeBinding)enclosingType, patternTypeArguments, depth+1, locator);", "+\tif (enclosingType != null && (enclosingType.isParameterizedType() || enclosingType.isRawType())) {", "+\t\treturn refineAccuracy(refinedAccuracy, (ParameterizedTypeBinding)enclosingType, patternTypeArguments, isPatternSourceType, depth+1, locator);", "-\treturn SearchMatch.A_ACCURATE;", "+\treturn refinedAccuracy;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa6c7aa9c7e787573fc0b3eae0eefe39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "bc36c6c80fea8051d7058a5b477375cffbc00908", "commitAfterChange": "6f60569d194de3bca836674a443f538feb4384aa", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope)", "signatureAfterChange": " \t \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope)", "diff": ["-\t\t\tfindKeywordsForMember(this.completionToken, field.modifiers);", "+\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\tfindKeywordsForMember(this.completionToken, field.modifiers);", "+\t\t\t}", "-\t\t\t\tfindMethods(this.completionToken,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false,false,true);", "-\t\t\t\tproposeNewMethod(this.completionToken, scope.enclosingSourceType());", "+\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_DECLARATION)) {", "+\t\t\t\t\tfindMethods(this.completionToken,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false,false,true);", "+\t\t\t\t}", "+\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.POTENTIAL_METHOD_DECLARATION)) {", "+\t\t\t\t\tproposeNewMethod(this.completionToken, scope.enclosingSourceType());", "+\t\t\t\t}", "-\t\t\t\tfindKeywordsForMember(this.completionToken, method.modifiers);", "+\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\t\tfindKeywordsForMember(this.completionToken, method.modifiers);", "+\t\t\t\t}", "-\t\t\t\t\tfindMethods(this.completionToken,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false,false,true);", "-\t\t\t\t\tproposeNewMethod(this.completionToken, scope.enclosingSourceType());", "+\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_DECLARATION)) {", "+\t\t\t\t\t\tfindMethods(this.completionToken,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false,false,true);", "+\t\t\t\t\t}", "+\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.POTENTIAL_METHOD_DECLARATION)) {", "+\t\t\t\t\t\tproposeNewMethod(this.completionToken, scope.enclosingSourceType());", "+\t\t\t\t\t}", "-\t\t\t\t\t\tthis.findEnumConstant(this.completionToken, (SwitchStatement) astNodeParent);", "+\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "+\t\t\t\t\t\t\tthis.findEnumConstant(this.completionToken, (SwitchStatement) astNodeParent);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tfindKeywords(this.completionToken, singleNameReference.possibleKeywords);", "-\t\t\t\t\t\tif(singleNameReference.canBeExplicitConstructor){", "+\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\t\t\t\tfindKeywords(this.completionToken, singleNameReference.possibleKeywords);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif(singleNameReference.canBeExplicitConstructor && !this.requestor.isIgnored(CompletionProposal.METHOD_REF)){", "-\t\t\t\t\t\t\t\tfindMemberTypes(", "-\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "-\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\tscope.enclosingSourceType(),", "-\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\tnew ObjectVector());", "+\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\t\t\t\t\tfindMemberTypes(", "+\t\t\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "+\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\tscope.enclosingSourceType(),", "+\t\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\t\tnew ObjectVector());", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tfindMemberTypes(this.completionToken, receiverType, scope, scope.enclosingSourceType(), false, new ObjectVector());", "-\t", "-\t\t\t\t\t\t\t\t\tfindClassField(this.completionToken, (TypeBinding) qualifiedBinding, scope);", "+\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\t\t\t\t\t\tfindMemberTypes(this.completionToken, receiverType, scope, scope.enclosingSourceType(), false, new ObjectVector());", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "+\t\t\t\t\t\t\t\t\t\tfindClassField(this.completionToken, (TypeBinding) qualifiedBinding, scope);", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif((scope instanceof MethodScope && !((MethodScope)scope).isStatic)", "-\t\t\t\t\t\t\t\t\t\t|| ((methodScope = scope.enclosingMethodScope()) != null && !methodScope.isStatic)) {", "+\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD) &&", "+\t\t\t\t\t\t\t\t\t\t\t((scope instanceof MethodScope && !((MethodScope)scope).isStatic)", "+\t\t\t\t\t\t\t\t\t\t\t|| ((methodScope = scope.enclosingMethodScope()) != null && !methodScope.isStatic))) {", "-\t\t\t\t\t\t\t\t\tfindFields(", "-\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\treceiverType,", "-\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),", "-\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),", "-\t\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\t\tref,", "-\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "+\t\t\t\t\t\t\t\t\t\tfindFields(", "+\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\t\t\t\t\treceiverType,", "+\t\t\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),", "+\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),", "+\t\t\t\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\t\t\t\tref,", "+\t\t\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tfindMethods(", "-\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\tnull,", "-\t\t\t\t\t\t\t\t\t\treceiverType,", "-\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),", "-\t\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\tref,", "-\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "+\t\t\t\t\t\t\t\t\t\tfindMethods(", "+\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\t\t\t\t\treceiverType,", "+\t\t\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),", "+\t\t\t\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\t\t\t\tref,", "+\t\t\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t\t\t\t}", "-\t", "-\t\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "-\t\t\t\t\t\t\t\t\tfindMemberTypes(", "-\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "-\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\tscope.enclosingSourceType(),", "-\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\tnew ObjectVector());", "+\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "+\t\t\t\t\t\t\t\t\t\tfindMemberTypes(", "+\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "+\t\t\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\t\t\tscope.enclosingSourceType(),", "+\t\t\t\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector());", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tfindKeywords(this.completionToken, new char[][]{Keywords.NEW});", "+\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\t\t\t\t\t\t\tfindKeywords(this.completionToken, new char[][]{Keywords.NEW});", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\tfindImplicitMessageSends(this.completionToken, argTypes, scope, messageSend, scope);", "+\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "+\t\t\t\t\t\t\t\t\t\t\t\tfindImplicitMessageSends(this.completionToken, argTypes, scope, messageSend, scope);", "+\t\t\t\t\t\t\t\t\t\t\t}", "-\t", "-\t\t\t\t\t\t\t\t\t\t\tfindMethods(", "-\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\t\t\targTypes,", "-\t\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "-\t\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),", "-\t\t\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\t\t\ttrue,", "-\t\t\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\t\t\tmessageSend,", "-\t\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\t\t\tmessageSend.receiver instanceof SuperReference,", "-\t\t\t\t\t\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "+\t\t\t\t\t\t\t\t\t\t\t\tfindMethods(", "+\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\t\t\t\t\t\t\targTypes,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "+\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector(),", "+\t\t\t\t\t\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\t\t\t\t\t\ttrue,", "+\t\t\t\t\t\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\t\t\t\t\t\tmessageSend,", "+\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\t\t\t\t\t\tmessageSend.receiver instanceof SuperReference,", "+\t\t\t\t\t\t\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(astNode.sourceStart, astNode.sourceEnd, false);", "-\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\tCompletionOnExplicitConstructorCall constructorCall =", "-\t\t\t\t\t\t\t\t\t\t\t\t(CompletionOnExplicitConstructorCall) astNode;", "-\t\t\t\t\t\t\t\t\t\t\tTypeBinding[] argTypes =", "-\t\t\t\t\t\t\t\t\t\t\t\tcomputeTypes(constructorCall.arguments, (BlockScope) scope);", "-\t\t\t\t\t\t\t\t\t\t\tfindConstructors(", "-\t\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "-\t\t\t\t\t\t\t\t\t\t\t\targTypes,", "-\t\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\t\tconstructorCall,", "-\t\t\t\t\t\t\t\t\t\t\t\tfalse);", "-\t", "+\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {", "+\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(astNode.sourceStart, astNode.sourceEnd, false);", "+\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnExplicitConstructorCall constructorCall =", "+\t\t\t\t\t\t\t\t\t\t\t\t\t(CompletionOnExplicitConstructorCall) astNode;", "+\t\t\t\t\t\t\t\t\t\t\t\tTypeBinding[] argTypes =", "+\t\t\t\t\t\t\t\t\t\t\t\t\tcomputeTypes(constructorCall.arguments, (BlockScope) scope);", "+\t\t\t\t\t\t\t\t\t\t\t\tfindConstructors(", "+\t\t\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "+\t\t\t\t\t\t\t\t\t\t\t\t\targTypes,", "+\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\t\t\t\t\tconstructorCall,", "+\t\t\t\t\t\t\t\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\tif(ref.isClass()) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tif(!ref.isAbstract()) {", "+\t\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_REF)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& ref.isClass()", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& !ref.isAbstract()) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\tif(!ref.isFinal() && !ref.isEnum()){", "+\t\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.ANONYMOUS_CLASS_DECLARATION)", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& !ref.isFinal()", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t&& !ref.isEnum()){", "-\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnClassLiteralAccess access = (CompletionOnClassLiteralAccess) astNode;", "-\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(access.classStart, access.sourceEnd);", "-\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = access.completionIdentifier;", "-\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\tfindClassField(this.completionToken, (TypeBinding) qualifiedBinding, scope);", "+\t\t\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnClassLiteralAccess access = (CompletionOnClassLiteralAccess) astNode;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(access.classStart, access.sourceEnd);", "+\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = access.completionIdentifier;", "+\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindClassField(this.completionToken, (TypeBinding) qualifiedBinding, scope);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnMethodName method = (CompletionOnMethodName) astNode;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(method.sourceStart, method.selectorEnd);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tFieldBinding[] fields = scope.enclosingSourceType().fields();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tchar[][] excludeNames = new char[fields.length][];", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i = 0 ; i < fields.length ; i++){", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texcludeNames[i] = fields[i].name;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = method.selector;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(this.completionToken, method.returnType, excludeNames, FIELD, method.modifiers);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnFieldName) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnFieldName field = (CompletionOnFieldName) astNode;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.VARIABLE_DECLARATION)) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnMethodName method = (CompletionOnMethodName) astNode;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange(method.sourceStart, method.selectorEnd);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = field.realName;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = method.selector;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(field.realName, field.type, excludeNames, FIELD, field.modifiers);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(this.completionToken, method.returnType, excludeNames, FIELD, method.modifiers);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (astNode instanceof CompletionOnFieldName) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.VARIABLE_DECLARATION)) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnFieldName field = (CompletionOnFieldName) astNode;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFieldBinding[] fields = scope.enclosingSourceType().fields();", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchar[][] excludeNames = new char[fields.length][];", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i = 0 ; i < fields.length ; i++){", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texcludeNames[i] = fields[i].name;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = field.realName;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(field.realName, field.type, excludeNames, FIELD, field.modifiers);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalDeclaration variable = (LocalDeclaration) astNode;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalVariableBinding[] locals = ((BlockScope)scope).locals;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchar[][] excludeNames = new char[locals.length][];", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint localCount = 0;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i = 0 ; i < locals.length ; i++){", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(locals[i] != null) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texcludeNames[localCount++] = locals[i].name;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.VARIABLE_DECLARATION)) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalDeclaration variable = (LocalDeclaration) astNode;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tLocalVariableBinding[] locals = ((BlockScope)scope).locals;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchar[][] excludeNames = new char[locals.length][];", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint localCount = 0;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i = 0 ; i < locals.length ; i++){", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(locals[i] != null) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texcludeNames[localCount++] = locals[i].name;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.arraycopy(excludeNames, 0, excludeNames = new char[localCount][], 0, localCount);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(variable instanceof CompletionOnLocalName){", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = ((CompletionOnLocalName) variable).realName;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, excludeNames, LOCAL, variable.modifiers);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnArgumentName arg = (CompletionOnArgumentName) variable;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = arg.realName;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, excludeNames, arg.isCatchArgument ? LOCAL : ARGUMENT, variable.modifiers);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.arraycopy(excludeNames, 0, excludeNames = new char[localCount][], 0, localCount);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(variable instanceof CompletionOnLocalName){", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = ((CompletionOnLocalName) variable).realName;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, excludeNames, LOCAL, variable.modifiers);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnArgumentName arg = (CompletionOnArgumentName) variable;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = arg.realName;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariableNames(this.completionToken, variable.type, excludeNames, arg.isCatchArgument ? LOCAL : ARGUMENT, variable.modifiers);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnKeyword keyword = (CompletionOnKeyword)astNode;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindKeywords(keyword.getToken(), keyword.getPossibleKeywords());", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnKeyword keyword = (CompletionOnKeyword)astNode;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindKeywords(keyword.getToken(), keyword.getPossibleKeywords());", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnParameterizedQualifiedTypeReference ref = (CompletionOnParameterizedQualifiedTypeReference) astNode;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.insideQualifiedReference = true;", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.assistNodeIsClass = ref.isClass();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.assistNodeIsException = ref.isException();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.assistNodeIsInterface = ref.isInterface();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = ref.completionIdentifier;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlong completionPosition = ref.sourcePositions[ref.tokens.length];", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindMemberTypes(", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope.enclosingSourceType(),", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector());", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnParameterizedQualifiedTypeReference ref = (CompletionOnParameterizedQualifiedTypeReference) astNode;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.insideQualifiedReference = true;", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.assistNodeIsClass = ref.isClass();", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.assistNodeIsException = ref.isException();", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.assistNodeIsInterface = ref.isInterface();", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = ref.completionIdentifier;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlong completionPosition = ref.sourcePositions[ref.tokens.length];", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSourceRange((int) (completionPosition >>> 32), (int) completionPosition);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindMemberTypes(", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope.enclosingSourceType(),", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew ObjectVector());", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnMemberValueName memberValuePair = (CompletionOnMemberValueName) astNode;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAnnotation annotation = (Annotation) astNodeParent;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = memberValuePair.name;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.findAnnotationAttributes(this.completionToken, annotation.memberValuePairs(), (ReferenceBinding)annotation.resolvedType);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.ANNOTATION_ATTRIBUTE_REF)) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCompletionOnMemberValueName memberValuePair = (CompletionOnMemberValueName) astNode;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAnnotation annotation = (Annotation) astNodeParent;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken = memberValuePair.name;", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.findAnnotationAttributes(this.completionToken, annotation.memberValuePairs(), (ReferenceBinding)annotation.resolvedType);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}"]}], "num": 19596}
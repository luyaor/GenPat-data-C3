{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58880bca721108c068e488caf7d12d20", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ae1f707b519fa8ff214d711f4e65781", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic void reportAccurateReference( \t\tint sourceStart, \t\tint sourceEnd, \t\tchar[][] tokens, \t\tIJavaElement element, \t\tint[] accuracies) \t\tthrows CoreException", "signatureAfterChange": " public void reportAccurateReference(int sourceStart, int sourceEnd, char[][] tokens, IJavaElement element, int[] accuracies) throws CoreException", "diff": ["-\t */", "-\tpublic void reportAccurateReference(", "-\t\tint sourceStart,", "-\t\tint sourceEnd,", "-\t\tchar[][] tokens,", "-\t\tIJavaElement element,", "-\t\tint[] accuracies)", "-\t\tthrows CoreException {", "-\t\t// compute source positions of the qualified reference ", "-\t\tScanner scanner = this.parser.scanner;", "-\t\tscanner.setSource(", "-\t\t\tthis.currentPotentialMatch.getContents());", "-\t\tscanner.resetTo(sourceStart, sourceEnd);", "-\t\tint refSourceStart = -1, refSourceEnd = -1;", "-\t\tint length = tokens.length;", "-\t\tint token = -1;", "-\t\tint previousValid = -1;", "-\t\tint i = 0;", "-\t\tint accuracyIndex = 0;", "-\t\t\tint currentPosition = scanner.currentPosition;", "-\t\t\t// read token", "-\t\t\tif (token != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tchar[] currentTokenSource = scanner.getCurrentTokenSource();", "-\t\t\t\tboolean equals = false;", "-\t\t\t\twhile (i < length", "-\t\t\t\t\t&& !(equals = this.pattern.matchesName(tokens[i++], currentTokenSource))) {", "-\t\t\t\t}", "-\t\t\t\tif (equals && (previousValid == -1 || previousValid == i - 2)) {", "-\t\t\t\t\tpreviousValid = i - 1;", "-\t\t\t\t\tif (refSourceStart == -1) {", "-\t\t\t\t\t\trefSourceStart = currentPosition;", "-\t\t\t\t\t}", "-\t\t\t\t\trefSourceEnd = scanner.currentPosition - 1;", "-\t\t\t\t} else {", "-\t\t\t\t\ti = 0;", "-\t\t\t\t\trefSourceStart = -1;", "-\t\t\t\t\tpreviousValid = -1;", "-\t\t\t\t}", "-\t\t\t\t// read '.'", "-\t\t\t\ttry {", "-\t\t\t\t\ttoken = scanner.getNextToken();", "-\t\t\t\t} catch (InvalidInputException e) {", "-\t\t\t\t}", "-\t\t\tif (accuracies[accuracyIndex] != -1) {", "-\t\t\t\t// accept reference", "-\t\t\t\tif (refSourceStart != -1) {", "-\t\t\t\t\tthis.report(refSourceStart, refSourceEnd, element, accuracies[accuracyIndex]);", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.report(sourceStart, sourceEnd, element, accuracies[accuracyIndex]);", "-\t\t\t\t}", "-\t\t\trefSourceStart = -1;", "-\t\t\tpreviousValid = -1;", "-\t\t\tif (accuracyIndex < accuracies.length-1) {", "-\t\t\t\taccuracyIndex++;", "-\t\t\t}", "-\t\t} while (token != TerminalTokens.TokenNameEOF);", "-", "-\t}", "+ */", "+public void reportAccurateReference(int sourceStart, int sourceEnd, char[][] tokens, IJavaElement element, int[] accuracies) throws CoreException {", "+\t// compute source positions of the qualified reference ", "+\tScanner scanner = this.parser.scanner;", "+\tscanner.setSource(this.currentPotentialMatch.getContents());", "+\tscanner.resetTo(sourceStart, sourceEnd);", "+\tint refSourceStart = -1, refSourceEnd = -1;", "+\tint length = tokens.length;", "+\tint token = -1;", "+\tint previousValid = -1;", "+\tint i = 0;", "+\tint accuracyIndex = 0;", "+\tdo {", "+\t\tint currentPosition = scanner.currentPosition;", "+\t\t// read token", "+\t\t\ttoken = scanner.getNextToken();", "+\t\tif (token != TerminalTokens.TokenNameEOF) {", "+\t\t\tchar[] currentTokenSource = scanner.getCurrentTokenSource();", "+\t\t\tboolean equals = false;", "+\t\t\twhile (i < length && !(equals = this.pattern.matchesName(tokens[i++], currentTokenSource))) {", "+\t\t\t}", "+\t\t\tif (equals && (previousValid == -1 || previousValid == i - 2)) {", "+\t\t\t\tpreviousValid = i - 1;", "+\t\t\t\tif (refSourceStart == -1)", "+\t\t\t\t\trefSourceStart = currentPosition;", "+\t\t\t\trefSourceEnd = scanner.currentPosition - 1;", "+\t\t\t} else {", "+\t\t\t\ti = 0;", "+\t\t\t\trefSourceStart = -1;", "+\t\t\t\tpreviousValid = -1;", "+\t\t\t}", "+\t\t\t// read '.'", "+\t\t\ttry {", "+\t\t\t\ttoken = scanner.getNextToken();", "+\t\t\t} catch (InvalidInputException e) {", "+\t\t\t}", "+\t\tif (accuracies[accuracyIndex] != -1) {", "+\t\t\tif (refSourceStart != -1) {", "+\t\t\t\treport(refSourceStart, refSourceEnd, element, accuracies[accuracyIndex]);", "+\t\t\t\treport(sourceStart, sourceEnd, element, accuracies[accuracyIndex]);", "+\t\t\ti = 0;", "+\t\t}", "+\t\trefSourceStart = -1;", "+\t\tpreviousValid = -1;", "+\t\tif (accuracyIndex < accuracies.length - 1)", "+\t\t\taccuracyIndex++;", "+\t} while (token != TerminalTokens.TokenNameEOF);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36d3faa6e3d018fb5b8a8ed4d31072d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void reportAccurateReference( \t\tint sourceStart, \t\tint sourceEnd, \t\tchar[][] qualifiedName, \t\tIJavaElement element, \t\tint accuracy) \t\tthrows CoreException", "signatureAfterChange": " public void reportAccurateReference(int sourceStart, int sourceEnd, char[][] qualifiedName, IJavaElement element, int accuracy) throws CoreException", "diff": ["-\t */", "-\tpublic void reportAccurateReference(", "-\t\tint sourceStart,", "-\t\tint sourceEnd,", "-\t\tchar[][] qualifiedName,", "-\t\tIJavaElement element,", "-\t\tint accuracy)", "-\t\tthrows CoreException {", "-\t", "-\t\tif (accuracy == -1) return;", "-\t", "-\t\t// compute source positions of the qualified reference ", "-\t\tScanner scanner = this.parser.scanner;", "-\t\tscanner.setSource(", "-\t\t\tthis.currentPotentialMatch.getContents());", "-\t\tscanner.resetTo(sourceStart, sourceEnd);", "-\t", "-\t\tint refSourceStart = -1, refSourceEnd = -1;", "-\t\tint tokenNumber = qualifiedName.length;", "-\t\tint token = -1;", "-\t\tint previousValid = -1;", "-\t\tint i = 0;", "-\t\tint currentPosition;", "-\t\tdo {", "-\t\t\t// find first token that is an identifier (parenthesized expressions include parenthesises in source range - see bug 20693 - Finding references to variables does not find all occurrences  )", "-\t\t\tdo {", "-\t\t\t\tcurrentPosition = scanner.currentPosition;", "-\t\t\t\ttry {", "-\t\t\t\t\ttoken = scanner.getNextToken();", "-\t\t\t\t} catch (InvalidInputException e) {", "-\t\t\t\t}", "-\t\t\t} while (token !=  TerminalTokens.TokenNameIdentifier && token !=  TerminalTokens.TokenNameEOF);", "-\t", "-\t\t\tif (token != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tchar[] currentTokenSource = scanner.getCurrentTokenSource();", "-\t\t\t\tboolean equals = false;", "-\t\t\t\twhile (i < tokenNumber", "-\t\t\t\t\t&& !(equals = this.pattern.matchesName(qualifiedName[i++], currentTokenSource))) {", "-\t\t\t\t}", "-\t\t\t\tif (equals && (previousValid == -1 || previousValid == i - 2)) {", "-\t\t\t\t\tpreviousValid = i - 1;", "-\t\t\t\t\tif (refSourceStart == -1) {", "-\t\t\t\t\t\trefSourceStart = currentPosition;", "-\t\t\t\t\t}", "-\t\t\t\t\trefSourceEnd = scanner.currentPosition - 1;", "-\t\t\t\t} else {", "-\t\t\t\t\ti = 0;", "-\t\t\t\t\trefSourceStart = -1;", "-\t\t\t\t\tpreviousValid = -1;", "-\t\t\t\t}", "-\t\t\t\t// read '.'", "-\t\t\t\ttry {", "-\t\t\t\t\ttoken = scanner.getNextToken();", "-\t\t\t\t} catch (InvalidInputException e) {", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (i == tokenNumber) {", "-\t\t\t\t// accept reference", "-\t\t\t\tif (refSourceStart != -1) {", "-\t\t\t\t\tthis.report(refSourceStart, refSourceEnd, element, accuracy);", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.report(sourceStart, sourceEnd, element, accuracy);", "-\t\t\t\t}", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t} while (token != TerminalTokens.TokenNameEOF);", "-\t", "-\t}", "+ */", "+public void reportAccurateReference(int sourceStart, int sourceEnd, char[][] qualifiedName, IJavaElement element, int accuracy) throws CoreException {", "+\tif (accuracy == -1) return;", "+\t// compute source positions of the qualified reference ", "+\tScanner scanner = this.parser.scanner;", "+\tscanner.setSource(this.currentPotentialMatch.getContents());", "+\tscanner.resetTo(sourceStart, sourceEnd);", "+\tint refSourceStart = -1, refSourceEnd = -1;", "+\tint tokenNumber = qualifiedName.length;", "+\tint token = -1;", "+\tint previousValid = -1;", "+\tint i = 0;", "+\tint currentPosition;", "+\tdo {", "+\t\t// find first token that is an identifier (parenthesized expressions include parenthesises in source range - see bug 20693 - Finding references to variables does not find all occurrences  )", "+\t\t\tcurrentPosition = scanner.currentPosition;", "+\t\t} while (token !=  TerminalTokens.TokenNameIdentifier && token !=  TerminalTokens.TokenNameEOF);", "+", "+\t\tif (token != TerminalTokens.TokenNameEOF) {", "+\t\t\tchar[] currentTokenSource = scanner.getCurrentTokenSource();", "+\t\t\tboolean equals = false;", "+\t\t\twhile (i < tokenNumber && !(equals = this.pattern.matchesName(qualifiedName[i++], currentTokenSource))) {", "+\t\t\tif (equals && (previousValid == -1 || previousValid == i - 2)) {", "+\t\t\t\tpreviousValid = i - 1;", "+\t\t\t\tif (refSourceStart == -1)", "+\t\t\t\t\trefSourceStart = currentPosition;", "+\t\t\t\trefSourceEnd = scanner.currentPosition - 1;", "+\t\t\t} else {", "+\t\t\t\trefSourceStart = -1;", "+\t\t\t\tpreviousValid = -1;", "+\t\t\t// read '.'", "+\t\t\ttry {", "+\t\t\t\ttoken = scanner.getNextToken();", "+\t\t\t} catch (InvalidInputException e) {", "+\t\tif (i == tokenNumber) {", "+\t\t\t// accept reference", "+\t\t\tif (refSourceStart != -1) {", "+\t\t\t\treport(refSourceStart, refSourceEnd, element, accuracy);", "+\t\t\t} else {", "+\t\t\t\treport(sourceStart, sourceEnd, element, accuracy);", "+\t\t\t}", "+\t\t\treturn;", "+\t} while (token != TerminalTokens.TokenNameEOF);", "+}"]}], "num": 66386}
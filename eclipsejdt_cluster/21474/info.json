{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5c5be0ae29e6c410b4ede9c2123dc58", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "380ec860e135af140ad22f7c7656a576", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "8376377bee92e0d16cfa404c8d1e948dcf5be147", "commitAfterChange": "0a6cb9139841c5f6143bc94201bfcbd6024601de", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected int classpathContains( \t\tIClasspathEntry[] list, \t\tIClasspathEntry entry)", "signatureAfterChange": " \tprotected int classpathContains( \t\tIClasspathEntry[] list, \t\tIClasspathEntry entry)", "diff": ["+\t\t\t\t\t// check custom outputs", "+\t\t\t\t\tIPath entryOutput = entry.getOutputLocation();", "+\t\t\t\t\tIPath otherOutput = other.getOutputLocation();", "+\t\t\t\t\tif (entryOutput == null) {", "+\t\t\t\t\t\tif (otherOutput != null)", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (!entryOutput.equals(otherOutput))", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t// check exclusion patterns"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f89f6a13ef40b22f5d677afb731eb8a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java", "commitBeforeChange": "756bb6bed26516f6a7f37d505e2052383d6cc457", "commitAfterChange": "4859598654fee7e1f981761dd77f16f864bb4009", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic boolean isEqualTo(IBinding other)", "signatureAfterChange": " \tpublic boolean isEqualTo(IBinding other)", "diff": ["-\t\t\treturn BindingComparator.isEqual(this.binding, otherBinding);", "+\t\t\tif (BindingComparator.isEqual(this.binding, otherBinding)) {", "+\t\t\t\tIMethodBinding declaringMethod = this.getDeclaringMethod();", "+\t\t\t\tIMethodBinding otherDeclaringMethod = ((VariableBinding) other).getDeclaringMethod();", "+\t\t\t\tif (declaringMethod == null) {", "+\t\t\t\t\tif (otherDeclaringMethod != null) {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\treturn declaringMethod.isEqualTo(otherDeclaringMethod);", "+\t\t\t}", "+\t\t\treturn false;"]}], "num": 21474}
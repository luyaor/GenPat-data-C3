{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c537b17e6a69087f9db9cd44e94bc26", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26d6c7b276050cc65c62d4ccd4c00568", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "1dbf45ade1eaa8473579771e92825a7887776253", "commitAfterChange": "0fb8e6d8cd5771230b88c7189dc0d95f3a5da0e3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tvoid setSourceComment(char[] source)", "signatureAfterChange": " \tvoid setSourceComment(char[] source)", "diff": ["-\t\tStringBuffer buffer = new StringBuffer();", "+\t\tStringBuffer buffer = null;", "-\t\tboolean end = false;", "+\t\tboolean end = false, lineStarted = false;", "-\t\t\t\t\tswitch (source[i+1]) {", "+\t\t\t\t\tswitch (source[++i]) {", "+\t\t\t\t\t\t\tbuffer = new StringBuffer(\"//\");", "+\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\tif (source[i+2] == '*') {", "-\t\t\t\t\t\t\t\tcomment = 3; // javadoc", "+\t\t\t\t\t\t\tif (source[++i] == '*') {", "+\t\t\t\t\t\t\t\tif (source[++i] == '/') { // empty block comment", "+\t\t\t\t\t\t\t\t\tthis.comments.add(\"/**/\");", "+\t\t\t\t\t\t\t\t\tthis.allTags.add(new ArrayList());", "+\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tcomment = 3; // javadoc", "+\t\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"/**\");", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"/*\");", "-\t\t\t\t\t\tbuffer = new StringBuffer();", "-\t\t\t\t\tif (source[i] == '@') {", "-\t\t\t\t\t\ttag = \"\";", "+\t\t\t\t\tswitch (source[i]) {", "+\t\t\t\t\t\tcase '@':", "+\t\t\t\t\t\t\tif (!lineStarted || source[i-1] == '{') {", "+\t\t\t\t\t\t\t\ttag = \"\";", "+\t\t\t\t\t\t\t\tlineStarted = true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase '\\r':", "+\t\t\t\t\t\tcase '\\n':", "+\t\t\t\t\t\t\tlineStarted = false;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase '*':", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tif (!Character.isWhitespace(source[i])) {", "+\t\t\t\t\t\t\t\tlineStarted = true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tlineStarted = false;", "-\t\t\t\t\t\tbuffer = new StringBuffer();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30c7ebf5fd5a0cf2091efbaf280e6da3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "cee242bcb21b999953c5459d6b40de2d782355f3", "commitAfterChange": "de0ba5a5e09b42f4671d55cb69260aca34e3da86", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprotected void setSourceComment(char[] source) throws ArrayIndexOutOfBoundsException", "signatureAfterChange": " \tprotected void setSourceComment(char[] source) throws ArrayIndexOutOfBoundsException", "diff": ["-\t\t\t\t\tif (this.chars == null) buffer.append(currentChar);", "-\t\t\t\t\telse buffer.append(this.chars);", "+\t\t\t\t\t\tif (this.chars == null) buffer.append(currentChar);", "+\t\t\t\t\t\telse buffer.append(this.chars);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcomment = DOC_COMMENT;", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase LINE_COMMENT:", "-\t\t\t\t\tif (currentChar == '\\r' || currentChar == '\\n') {", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\tif (currentChar == '\\r' && source[i+1] == '\\n') {", "-\t\t\t\t\t\t\tbuffer.append(source[++i]);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tcomment = 0;", "-\t\t\t\t\t\tthis.comments.add(buffer.toString());", "-\t\t\t\t\t\tthis.allTags.add(tags);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (this.chars == null) buffer.append(currentChar);", "-\t\t\t\t\t\telse buffer.append(this.chars);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "+\t\t\t\t\t// do not break, directly go to next case...", "+\t\t\t\t\tcomment = DOC_COMMENT;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase LINE_COMMENT:", "+\t\t\t\t\tif (currentChar == '\\r' || currentChar == '\\n') {", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\tif (currentChar == '\\r' && source[i+1] == '\\n') {", "+\t\t\t\t\t\t\tbuffer.append(source[++i]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tcomment = 0;", "+\t\t\t\t\t\tthis.comments.add(buffer.toString());", "+\t\t\t\t\t\tthis.allTags.add(tags);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (this.chars == null) buffer.append(currentChar);", "+\t\t\t\t\t\telse buffer.append(this.chars);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85252c623cd85f867d6694c0bcf936db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "527793c3501c0044ba7f65ec00ff957c7a149690", "commitAfterChange": "ca79168b190819b66ae58549346eb222c2411abf", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public final void jumpOverMethodBody()", "signatureAfterChange": " public final void jumpOverMethodBody()", "diff": ["+\t\t\t\t\t\tboolean isUnicode;", "+\t\t\t\t\t\t\t\t\tisUnicode = true;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tisUnicode = false;", "+\t\t\t\t\t\t\t\t\t\tisUnicode = true;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tisUnicode = false;", "-\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))", "-\t\t\t\t\t\t\t\t\tpushLineSeparator();", "+\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n'))) {", "+\t\t\t\t\t\t\t\t\t\tif (!isUnicode) {", "+\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tisUnicode = false;", "+\t\t\t\t\t\t\t\t\tisUnicode = true;", "+\t\t\t\t\t\t\t\t\tisUnicode = false;", "-\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))", "-\t\t\t\t\t\t\t\tpushLineSeparator();", "+\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n'))) {", "+\t\t\t\t\t\t\t\t\tif (!isUnicode) {", "+\t\t\t\t\t\t\t\t\t\tpushLineSeparator();", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tisUnicode = true;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tisUnicode = false;", "-\t\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n')))", "-\t\t\t\t\t\t\t\t\t\tpushLineSeparator();", "+\t\t\t\t\t\t\t\t\t\t&& ((currentCharacter == '\\r') || (currentCharacter == '\\n'))) {", "+\t\t\t\t\t\t\t\t\t\t\tif (!isUnicode) {", "+\t\t\t\t\t\t\t\t\t\t\t\tpushLineSeparator();", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tisUnicode = true;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tisUnicode = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1ec85afdc6361815e989d123ece6e56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "ee73272992444a9c8e6586ce5a37f5dc6d6e8bd9", "commitAfterChange": "f598d68e65d421b1e902e4d71831d57a9b4e73ab", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tvoid setSourceComment(char[] source)", "signatureAfterChange": " \tvoid setSourceComment(char[] source)", "diff": ["-\t\tfor (int i=0; i<source.length; i++) {", "+\t\tint length = source.length;", "+\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\tif (source[i] == '/') {", "-\t\t\t\t\tswitch (source[++i]) {", "-\t\t\t\t\t\tcase '/':", "-\t\t\t\t\t\t\tcomment = 1; // line comment", "-\t\t\t\t\t\t\tbuffer = new StringBuffer(\"//\");", "-\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '*':", "-\t\t\t\t\t\t\tif (source[++i] == '*') {", "-\t\t\t\t\t\t\t\tif (source[++i] == '/') { // empty block comment", "-\t\t\t\t\t\t\t\t\tthis.comments.add(\"/**/\");", "-\t\t\t\t\t\t\t\t\tthis.allTags.add(new ArrayList());", "-\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\tswitch (source[i]) {", "+\t\t\t\t\tcase '/':", "+\t\t\t\t\t\tswitch (source[++i]) {", "+\t\t\t\t\t\t\tcase '/':", "+\t\t\t\t\t\t\t\tcomment = 1; // line comment", "+\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"//\");", "+\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase '*':", "+\t\t\t\t\t\t\t\tif (source[++i] == '*') {", "+\t\t\t\t\t\t\t\t\tif (source[++i] == '/') { // empty block comment", "+\t\t\t\t\t\t\t\t\t\tthis.comments.add(\"/**/\");", "+\t\t\t\t\t\t\t\t\t\tthis.allTags.add(new ArrayList());", "+\t\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tcomment = 3; // javadoc", "+\t\t\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"/**\");", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tcomment = 3; // javadoc", "-\t\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"/**\");", "+\t\t\t\t\t\t\t\t\tcomment = 2; // block comment", "+\t\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"/*\");", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase '\\'':", "+\t\t\t\t\t\twhile (i<length) {", "+\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\tif (i==length) break;", "+\t\t\t\t\t\t\tif (source[i] == '\\\\') {", "+\t\t\t\t\t\t\t\ti++;", "-\t\t\t\t\t\t\t\tcomment = 2; // block comment", "-\t\t\t\t\t\t\t\tbuffer = new StringBuffer(\"/*\");", "+\t\t\t\t\t\t\t\tif (source[i] == '\\'') {", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase '\"':", "+\t\t\t\t\t\twhile (i<length) {", "+\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\tif (i==length) break;", "+\t\t\t\t\t\t\tif (source[i] == '\\\\') {", "+\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (source[i] == '\"') {", "+\t\t\t\t\t\t\t\t\tif ((i+1)==length) break;", "+\t\t\t\t\t\t\t\t\tif (source[i+1] == '\"') {", "+\t\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\tbuffer.append(source[i]);", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbuffer.append(source[i]);"]}], "num": 12137}
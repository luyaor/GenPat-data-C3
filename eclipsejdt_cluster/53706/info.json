{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0ac099d820d226079666c10e1a1703c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64578e5ad100837488882f71d168a06b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "40ad9904e939ba54abece52421044021edd6e1c0", "commitAfterChange": "8d45cb26fc5ad244f93e8632d761d46ad4a120cf", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t// if argument is an AutoCloseable insert info that it *may* be closed (by the target method, i.e.)", "-\t\t\tflowInfo = FakedTrackingVariable.markPassedToOutside(currentScope, this.arguments[i], flowInfo);", "+\t\t\t// if argument is an AutoCloseable insert info that it *may* be closed (by the target method, i.e.)", "+\t\t\tflowInfo = FakedTrackingVariable.markPassedToOutside(currentScope, this.arguments[i], flowInfo, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfe3881f5f5d8766c188eb50794cb14b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "40ad9904e939ba54abece52421044021edd6e1c0", "commitAfterChange": "8d45cb26fc5ad244f93e8632d761d46ad4a120cf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t// don't report issues concerning this local, since by returning", "-\t\t\t// the method passes the responsibility to the caller:", "-\t\t\tcurrentScope.removeTrackingVar(trackingVariable);", "+\t\t\t// by returning the method passes the responsibility to the caller:", "+\t\t\tflowInfo = FakedTrackingVariable.markPassedToOutside(currentScope, this.expression, flowInfo, true);"]}], "num": 53706}
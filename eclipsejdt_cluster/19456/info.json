{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1fa1ffaf52ab3e58dc04cad22aaf2c94", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "745b4a596ec59f5ed005e18829a84f61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java", "commitBeforeChange": "a6829de4e3db7f328203e4f515f45bdc76ef3eb6", "commitAfterChange": "458d6ecb95c70f1df88b46b781028646894448a8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  private void computeClasspathLocations(IWorkspaceRoot workspaceRoot, JavaProject javaProject)", "signatureAfterChange": "  private LinkedHashSet<ClasspathLocation> computeClasspathLocations(JavaProject javaProject)", "diff": ["-private void computeClasspathLocations(IWorkspaceRoot workspaceRoot, JavaProject javaProject) {", "+", "+private LinkedHashSet<ClasspathLocation> computeClasspathLocations(JavaProject javaProject) {", "-\t\t// project doesn't exist", "-\t\tthis.locations = new ClasspathLocation[0];", "-\t\treturn;", "+\t\treturn null;// project doesn't exist", "+\tLinkedHashSet<ClasspathLocation> locations = new LinkedHashSet<ClasspathLocation>();", "-\tClasspathLocation[] cpLocations = new ClasspathLocation[length];", "-\tint index = 0;", "-\t\tPackageFragmentRoot root = (PackageFragmentRoot) roots[i];", "-\t\tIPath path = root.getPath();", "-\t\ttry {", "-\t\t\tif (root.isArchive()) {", "-\t\t\t\tZipFile zipFile = manager.getZipFile(path);", "-\t\t\t\tcpLocations[index++] = new ClasspathJar(zipFile, ((ClasspathEntry) root.getRawClasspathEntry()).getAccessRuleSet());", "-\t\t\t} else {", "-\t\t\t\tObject target = JavaModel.getTarget(path, true);", "-\t\t\t\tif (target == null) {", "-\t\t\t\t\t// target doesn't exist any longer", "-\t\t\t\t\t// just resize cpLocations", "-\t\t\t\t\tSystem.arraycopy(cpLocations, 0, cpLocations = new ClasspathLocation[cpLocations.length-1], 0, index);", "-\t\t\t\t} else if (root.getKind() == IPackageFragmentRoot.K_SOURCE) {", "-\t\t\t\t\tcpLocations[index++] = new ClasspathSourceDirectory((IContainer)target, root.fullExclusionPatternChars(), root.fullInclusionPatternChars());", "-\t\t\t\t} else {", "-\t\t\t\t\tcpLocations[index++] = ClasspathLocation.forBinaryFolder((IContainer) target, false, ((ClasspathEntry) root.getRawClasspathEntry()).getAccessRuleSet());", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (CoreException e1) {", "-\t\t\t// problem opening zip file or getting root kind", "-\t\t\t// consider root corrupt and ignore", "-\t\t\t// just resize cpLocations", "-\t\t\tSystem.arraycopy(cpLocations, 0, cpLocations = new ClasspathLocation[cpLocations.length-1], 0, index);", "-\t\t}", "+\t\tClasspathLocation cp = mapToClassPathLocation(manager, (PackageFragmentRoot) roots[i]);", "+\t\tif (cp != null) locations.add(cp);", "-\tthis.locations = cpLocations;", "+\treturn locations;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80b8dcea77213c9268569a9db6680145", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java", "commitBeforeChange": "735ec08d01cb739d2750c79098bb1ec5f311fb83", "commitAfterChange": "e872af6f3b1d66cbebb28423fbb7a0221da674d2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  private void computeClasspathLocations( \tIWorkspaceRoot workspaceRoot, \tJavaProject javaProject) throws CoreException", "signatureAfterChange": "  private void computeClasspathLocations(IWorkspaceRoot workspaceRoot, JavaProject javaProject)", "diff": ["-private void computeClasspathLocations(", "-\tIWorkspaceRoot workspaceRoot,", "-\tJavaProject javaProject) throws CoreException {", "+private void computeClasspathLocations(IWorkspaceRoot workspaceRoot, JavaProject javaProject) {", "-\tIPackageFragmentRoot[] roots = javaProject.getAllPackageFragmentRoots();", "+\tIPackageFragmentRoot[] roots = null;", "+\ttry {", "+\t\troots = javaProject.getAllPackageFragmentRoots();", "+\t} catch (JavaModelException e) {", "+\t\t// project doesn't exist", "+\t\tthis.locations = new ClasspathLocation[0];", "+\t\treturn;", "+\t}", "+\tint index = 0;", "-\t\tif (root.isArchive()) {", "-\t\t\tZipFile zipFile = manager.getZipFile(path);", "-\t\t\tcpLocations[i] = new ClasspathJar(zipFile);", "-\t\t} else {", "-\t\t\tObject target = JavaModel.getTarget(workspaceRoot, path, false);", "-\t\t\tif (root.getKind() == IPackageFragmentRoot.K_SOURCE) {", "-\t\t\t\tif (encoding == null) {", "-\t\t\t\t\tencoding = javaProject.getOption(JavaCore.CORE_ENCODING, true);", "-\t\t\t\t}", "-\t\t\t\tcpLocations[i] = new ClasspathSourceDirectory((IContainer)target, encoding);", "+\t\ttry {", "+\t\t\tif (root.isArchive()) {", "+\t\t\t\tZipFile zipFile = manager.getZipFile(path);", "+\t\t\t\tcpLocations[index++] = new ClasspathJar(zipFile);", "-\t\t\t\tcpLocations[i] = ClasspathLocation.forBinaryFolder((IContainer) target, false);", "+\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, path, false);", "+\t\t\t\tif (root.getKind() == IPackageFragmentRoot.K_SOURCE) {", "+\t\t\t\t\tif (encoding == null) {", "+\t\t\t\t\t\tencoding = javaProject.getOption(JavaCore.CORE_ENCODING, true);", "+\t\t\t\t\t}", "+\t\t\t\t\tcpLocations[index++] = new ClasspathSourceDirectory((IContainer)target, encoding);", "+\t\t\t\t} else {", "+\t\t\t\t\tcpLocations[index++] = ClasspathLocation.forBinaryFolder((IContainer) target, false);", "+\t\t\t\t}", "+\t\t} catch (CoreException e1) {", "+\t\t\t// problem opening zip file or getting root kind", "+\t\t\t// consider root corrupt and ignore", "+\t\t\t// just resize cpLocations", "+\t\t\tSystem.arraycopy(cpLocations, 0, cpLocations = new ClasspathLocation[cpLocations.length-1], 0, index);"]}], "num": 19456}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c751e609f0ce218b09c3a982afed8954", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03d62609dfb5f4b66775f3038995bef2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "93ae272625cf7aea539e03a762b5190105386996", "commitAfterChange": "c6f78f890c1ca00b0157b632da091fae2c781833", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void set(Map settings)", "signatureAfterChange": "  \tpublic void set(Map settings)", "diff": ["+\t\t}", "+\t\tfinal Object indentationSizeOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INDENTATION_SIZE);", "+\t\tif (indentationSizeOption != null) {", "+\t\t\ttry {", "+\t\t\t\tthis.indentation_size = Integer.parseInt((String) indentationSizeOption);", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\tthis.indentation_size = 4;", "+\t\t\t} catch(ClassCastException e) {", "+\t\t\t\tthis.indentation_size = 4;", "+\t\t\t}", "-\t\t\tthis.use_tab = JavaCore.TAB.equals(useTabOption);", "+\t\t\tif (JavaCore.TAB.equals(useTabOption)) {", "+\t\t\t\tthis.tab_char = TAB;", "+\t\t\t} else if (JavaCore.SPACE.equals(useTabOption)) {", "+\t\t\t\tthis.tab_char = SPACE;", "+\t\t\t} else {", "+\t\t\t\tthis.tab_char = MIXED;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7209a05a60123d76fc843732be793a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "24a97143c66fa96e7fe7655b53f2b99dd1c9b806", "commitAfterChange": "2d2fc9e19e89b1b5be0389a21ddcf829825f1a2b", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " private void parseTags(NLSLine line) throws InvalidInputException", "signatureAfterChange": " private void parseTags(NLSLine line) throws InvalidInputException", "diff": ["-\t\tString index = s.substring(start, end);", "-\t\tint i = 0;", "-\t\ttry {", "-\t\t\ti = Integer.parseInt(index) - 1; // Tags are one based not zero based.", "-\t\t} catch (NumberFormatException e) {", "-\t\t\ti = -1; // we don't want to consider this as a valid NLS tag", "-\t\t}", "-\t\tif (line.exists(i)) {", "-\t\t\tline.set(i, null);", "+\t\tif (end != -1) {", "+\t\t\tString index = s.substring(start, end);", "+\t\t\tint i = 0;", "+\t\t\ttry {", "+\t\t\t\ti = Integer.parseInt(index) - 1; // Tags are one based not zero based.", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\ti = -1; // we don't want to consider this as a valid NLS tag", "+\t\t\t}", "+\t\t\tif (line.exists(i)) {", "+\t\t\t\tline.set(i, null);", "+\t\t\t}"]}], "num": 17523}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd8c2ecd84b5f4b9e46fbe6cdd7b679e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e4179d8b65ecf0577ee52cbe75fead2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "6cf3ad7158f8af7acb2c41720a27495c19c9d467", "commitAfterChange": "09515e55d34c849915eacbb773d9281c9c2a5a0e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic CodeFormatterVisitor(DefaultCodeFormatterOptions preferences, Map settings, int offset, int length, CodeSnippetParsingUtil codeSnippetParsingUtil)", "signatureAfterChange": "  \tpublic CodeFormatterVisitor(DefaultCodeFormatterOptions preferences, Map settings, int offset, int length, CodeSnippetParsingUtil codeSnippetParsingUtil)", "diff": ["-\t\tif (settings != null) {", "-\t\t\tObject assertModeSetting = settings.get(JavaCore.COMPILER_SOURCE);", "-\t\t\tlong sourceLevel = ClassFileConstants.JDK1_3;", "-\t\t\tif (JavaCore.VERSION_1_4.equals(assertModeSetting)) {", "-\t\t\t\tsourceLevel = ClassFileConstants.JDK1_4;", "-\t\t\t} else if (JavaCore.VERSION_1_5.equals(assertModeSetting)) {", "-\t\t\t\tsourceLevel = ClassFileConstants.JDK1_5;", "-\t\t\t}\t\t", "-\t\t\tthis.localScanner = new Scanner(true, false, false/*nls*/, sourceLevel/*sourceLevel*/, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "-\t\t} else {", "-\t\t\tthis.localScanner = new Scanner(true, false, false/*nls*/, ClassFileConstants.JDK1_3/*sourceLevel*/, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "-\t\t}", "+// TODO (olivier) remove commented code after review", "+//\t\tif (settings != null) {", "+//\t\t\tObject assertModeSetting = settings.get(JavaCore.COMPILER_SOURCE);", "+//\t\t\tlong sourceLevel = ClassFileConstants.JDK1_3;", "+//\t\t\tif (JavaCore.VERSION_1_4.equals(assertModeSetting)) {", "+//\t\t\t\tsourceLevel = ClassFileConstants.JDK1_4;", "+//\t\t\t} else if (JavaCore.VERSION_1_5.equals(assertModeSetting)) {", "+//\t\t\t\tsourceLevel = ClassFileConstants.JDK1_5;", "+//\t\t\t}\t\t", "+//\t\t\tthis.localScanner = new Scanner(true, false, false/*nls*/, sourceLevel/*sourceLevel*/, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "+//\t\t} else {", "+//\t\t\tthis.localScanner = new Scanner(true, false, false/*nls*/, ClassFileConstants.JDK1_3/*sourceLevel*/, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "+//\t\t}", "+\t\tlong sourceLevel = settings == null", "+\t\t\t? ClassFileConstants.JDK1_3", "+\t\t\t: CompilerOptions.versionToJdkLevel(settings.get(JavaCore.COMPILER_SOURCE));", "+\t\tthis.localScanner = new Scanner(true, false, false/*nls*/, sourceLevel/*sourceLevel*/, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "-\t\tthis.scribe = new Scribe(this, settings, offset, length, codeSnippetParsingUtil);", "+\t\tthis.scribe = new Scribe(this, sourceLevel, offset, length, codeSnippetParsingUtil);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99155c1b3d3a39344325d7c062f4c58e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor2.java", "commitBeforeChange": "7ae418fd7c0f682802a208d278a74651039ebd3b", "commitAfterChange": "b7fa9526368fbc417ea1b7d0b501e47a1eefe091", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic CodeFormatterVisitor2(DefaultCodeFormatterOptions preferences, Map settings, int offset, int length, CompilationUnit unit)", "signatureAfterChange": "  \tpublic CodeFormatterVisitor2(DefaultCodeFormatterOptions preferences, Map settings, int offset, int length, CompilationUnit unit)", "diff": ["-\t\tif (settings != null) {", "-\t\t\tObject assertModeSetting = settings.get(JavaCore.COMPILER_SOURCE);", "-\t\t\tlong sourceLevel = ClassFileConstants.JDK1_3;", "-\t\t\tif (JavaCore.VERSION_1_4.equals(assertModeSetting)) {", "-\t\t\t\tsourceLevel = ClassFileConstants.JDK1_4;", "-\t\t\t} else if (JavaCore.VERSION_1_5.equals(assertModeSetting)) {", "-\t\t\t\tsourceLevel = ClassFileConstants.JDK1_5;", "-\t\t\t}\t\t", "-\t\t\tthis.localScanner = new Scanner(true, false, false/*nls*/, sourceLevel/*sourceLevel*/, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "-\t\t} else {", "-\t\t\tthis.localScanner = new Scanner(true, false, false/*nls*/, ClassFileConstants.JDK1_3/*sourceLevel*/, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "-\t\t}", "+\t\tlong sourceLevel = settings == null", "+\t\t\t? ClassFileConstants.JDK1_3", "+\t\t\t: CompilerOptions.versionToJdkLevel(settings.get(JavaCore.COMPILER_SOURCE));", "+\t\tthis.localScanner = new Scanner(true, false, false/*nls*/, sourceLevel/*sourceLevel*/, null/*taskTags*/, null/*taskPriorities*/, true/*taskCaseSensitive*/);", "-\t\tthis.scribe = new Scribe2(this, settings, offset, length, unit);", "+\t\tthis.scribe = new Scribe2(this, sourceLevel, offset, length, unit);"]}], "num": 37293}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50a57dbb9d865653dfa16c04e6c0586a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cbde01c9a33d2c09dac16f7c3ca1f02", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/TypeConverter.java", "commitBeforeChange": "149c538751123b079a5874a00aba83297561ab5c", "commitAfterChange": "7bd675acf4007077bf6bd84b82139719c7a8ca75", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate TypeReference decodeType(char[] typeName, int length, int start, int end)", "signatureAfterChange": "  \tprivate TypeReference decodeType(char[] typeName, int length, int start, int end, boolean includeGenericsAnyway)", "diff": ["-\tprivate TypeReference decodeType(char[] typeName, int length, int start, int end) {", "+\tprivate TypeReference decodeType(char[] typeName, int length, int start, int end, boolean includeGenericsAnyway) {", "-\t\t\t\t\t\t\t\tresult.bound = decodeType(typeName, length, start, end);", "+\t\t\t\t\t\t\t\tresult.bound = decodeType(typeName, length, start, end, includeGenericsAnyway);", "-\t\t\t\t\t\t\t\tresult.bound = decodeType(typeName, length, start, end);", "+\t\t\t\t\t\t\t\tresult.bound = decodeType(typeName, length, start, end, includeGenericsAnyway);", "-\t\t\t\t\t/* We need to convert and preserve 1.5 specific constructs only if compliance is 1.5 or above,", "-\t\t\t\t\t   but in all cases, we must skip over them to see if there are any applicable type fragments", "-\t\t\t\t\t   after the type parameters: i.e we just aren't done having seen a '<' in 1.4 mode. Because of", "-\t\t\t\t\t   the way type signatures are encoded, TypeConverter.decodeType(String, int, int, int) is immune", "+\t\t\t\t\t/* We need to convert and preserve 1.5 specific constructs either if compliance is 1.5 or above,", "+\t\t\t\t\t   or the caller has explicitly requested generics to be included. The parameter includeGenericsAnyway", "+\t\t\t\t\t   should be used by the caller to signal that in the calling context generics information must be ", "+\t\t\t\t\t   internalized even when the requesting project is 1.4. But in all cases, we must skip over them to", "+\t\t\t\t\t   see if there are any applicable type fragments after the type parameters: i.e we just aren't done", "+\t\t\t\t\t   having seen a '<' in 1.4 mode. ", "+\t\t\t\t\t   ", "+\t\t\t\t\t   Because of the way type signatures are encoded, TypeConverter.decodeType(String, int, int, int) is immune", "-\t\t\t\t\tif (this.has1_5Compliance) {", "+\t\t\t\t\tif (this.has1_5Compliance || includeGenericsAnyway) {", "-\t\t\t\t\tif (this.has1_5Compliance) {", "+\t\t\t\t\tif (this.has1_5Compliance || includeGenericsAnyway) {", "-\t\t\t\t\tTypeReference[] arguments = decodeTypeArguments(typeName, length, start, end); // positionned on '>' at end", "-\t\t\t\t\tif (this.has1_5Compliance) {", "+\t\t\t\t\tTypeReference[] arguments = decodeTypeArguments(typeName, length, start, end, includeGenericsAnyway); // positionned on '>' at end", "+\t\t\t\t\tif (this.has1_5Compliance || includeGenericsAnyway) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1d362b25cb47b101aa0ca7776b09222", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/TypeConverter.java", "commitBeforeChange": "a7538ae82dbd33b3f26dec50ae8ce6f249c7a04f", "commitAfterChange": "f0ca1f9e3571a6c8cc7bcfc8fee3982374c51194", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate TypeReference decodeType(char[] typeName, int length, int start, int end)", "signatureAfterChange": "  \tprivate TypeReference decodeType(char[] typeName, int length, int start, int end, boolean includeGenericsAnyway)", "diff": ["-\tprivate TypeReference decodeType(char[] typeName, int length, int start, int end) {", "+\tprivate TypeReference decodeType(char[] typeName, int length, int start, int end, boolean includeGenericsAnyway) {", "-\t\t\t\t\t\t\t\tresult.bound = decodeType(typeName, length, start, end);", "+\t\t\t\t\t\t\t\tresult.bound = decodeType(typeName, length, start, end, includeGenericsAnyway);", "-\t\t\t\t\t\t\t\tresult.bound = decodeType(typeName, length, start, end);", "+\t\t\t\t\t\t\t\tresult.bound = decodeType(typeName, length, start, end, includeGenericsAnyway);", "-\t\t\t\t\t/* We need to convert and preserve 1.5 specific constructs only if compliance is 1.5 or above,", "-\t\t\t\t\t   but in all cases, we must skip over them to see if there are any applicable type fragments", "-\t\t\t\t\t   after the type parameters: i.e we just aren't done having seen a '<' in 1.4 mode. Because of", "-\t\t\t\t\t   the way type signatures are encoded, TypeConverter.decodeType(String, int, int, int) is immune", "+\t\t\t\t\t/* We need to convert and preserve 1.5 specific constructs either if compliance is 1.5 or above,", "+\t\t\t\t\t   or the caller has explicitly requested generics to be included. The parameter includeGenericsAnyway", "+\t\t\t\t\t   should be used by the caller to signal that in the calling context generics information must be ", "+\t\t\t\t\t   internalized even when the requesting project is 1.4. But in all cases, we must skip over them to", "+\t\t\t\t\t   see if there are any applicable type fragments after the type parameters: i.e we just aren't done", "+\t\t\t\t\t   having seen a '<' in 1.4 mode. ", "+\t\t\t\t\t   ", "+\t\t\t\t\t   Because of the way type signatures are encoded, TypeConverter.decodeType(String, int, int, int) is immune", "-\t\t\t\t\tif (this.has1_5Compliance) {", "+\t\t\t\t\tif (this.has1_5Compliance || includeGenericsAnyway) {", "-\t\t\t\t\tif (this.has1_5Compliance) {", "+\t\t\t\t\tif (this.has1_5Compliance || includeGenericsAnyway) {", "-\t\t\t\t\tTypeReference[] arguments = decodeTypeArguments(typeName, length, start, end); // positionned on '>' at end", "-\t\t\t\t\tif (this.has1_5Compliance) {", "+\t\t\t\t\tTypeReference[] arguments = decodeTypeArguments(typeName, length, start, end, includeGenericsAnyway); // positionned on '>' at end", "+\t\t\t\t\tif (this.has1_5Compliance || includeGenericsAnyway) {"]}], "num": 41675}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5472692f814567b7bde541e6248dc556", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7f1b99817b775ff8f693bdaaa9a4a48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeElementImpl.java", "commitBeforeChange": "50ccfd22c9edba40e321679792b900f0f1aa1621", "commitAfterChange": "4149e2502eef0fdb7b9921e198e3c6810a46bd6f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \t@Override \tpublic List<? extends TypeMirror> getInterfaces()", "signatureAfterChange": " \t \t@Override \tpublic List<? extends TypeMirror> getInterfaces()", "diff": ["-\t\t\tTypeMirror interfaceType = _env.getFactory().newTypeMirror(interfaceBinding);", "-\t\t\tinterfaces.add(interfaceType);", "+\t\t\t// JSR269 spec requires us to return unresolved superinterfaces, but javac has", "+\t\t\t// a bug in this regard; as of 5/08 we emulate javac, rather than follow the spec.", "+\t\t\t// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=231521", "+\t\t\tif (interfaceBinding.isValidBinding() &&", "+\t\t\t\t// using binding types...", "+\t\t\t\t\t!(interfaceBinding instanceof MissingTypeBinding) &&", "+\t\t\t\t\t!(interfaceBinding instanceof ParameterizedTypeBinding &&", "+\t\t\t\t\t\t\t((ParameterizedTypeBinding) interfaceBinding).genericType() instanceof MissingTypeBinding)", "+\t\t\t\t// since HasMissingType reports indirect missing types, which is not what we need", "+\t\t\t\t/* &&", "+\t\t\t\t\t(interfaceBinding.tagBits & TagBits.HasMissingType) == 0 */) {", "+\t\t\t\tTypeMirror interfaceType = _env.getFactory().newTypeMirror(interfaceBinding);", "+\t\t\t\tinterfaces.add(interfaceType);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc3ee548efee03bfbce035fc9f5e4e68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeElementImpl.java", "commitBeforeChange": "a209bfa947ecc1f9f7050d0d851a03f725813152", "commitAfterChange": "730caa252c0447802cd9dbe163cdf0f853f36524", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \t@Override \tpublic List<? extends TypeMirror> getInterfaces()", "signatureAfterChange": " \t \t@Override \tpublic List<? extends TypeMirror> getInterfaces()", "diff": ["-\t\t\t// JSR269 spec requires us to return unresolved superinterfaces, but javac has", "-\t\t\t// a bug in this regard; as of 5/08 we emulate javac, rather than follow the spec.", "-\t\t\t// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=231521", "-\t\t\tif (interfaceBinding.isValidBinding() &&", "-\t\t\t\t// using binding types...", "-\t\t\t\t\t!(interfaceBinding instanceof MissingTypeBinding) &&", "-\t\t\t\t\t!(interfaceBinding instanceof ParameterizedTypeBinding &&", "-\t\t\t\t\t\t\t((ParameterizedTypeBinding) interfaceBinding).genericType() instanceof MissingTypeBinding)", "-\t\t\t\t// since HasMissingType reports indirect missing types, which is not what we need", "-\t\t\t\t/* &&", "-\t\t\t\t\t(interfaceBinding.tagBits & TagBits.HasMissingType) == 0 */) {", "-\t\t\t\tTypeMirror interfaceType = _env.getFactory().newTypeMirror(interfaceBinding);", "+\t\t\tTypeMirror interfaceType = _env.getFactory().newTypeMirror(interfaceBinding);", "+\t\t\tif (interfaceType.getKind() == TypeKind.ERROR) {", "+\t\t\t\tif (this._env.getSourceVersion().compareTo(SourceVersion.RELEASE_6) > 0) {", "+\t\t\t\t\t// for jdk 7 and above, add error types", "+\t\t\t\t\tinterfaces.add(interfaceType);", "+\t\t\t\t}", "+\t\t\t} else {"]}], "num": 71742}
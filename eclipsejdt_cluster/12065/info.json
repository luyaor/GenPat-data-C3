{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce641614f20b797b7758c7cd3d591799", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e24b86e9ea2728b3401ad504f0ad7b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "ec36c5b556303647a122217dbc357a0c1ccafd42", "commitAfterChange": "a25cead90931bbc9548552bec95aa6f79a389aa3", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": "  \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\t\t\t\t\t\t\tReferenceBinding declaringClass = (ReferenceBinding) method.declaringClass.erasure();", "-\t\t\t\t\t\t\tReferenceBinding superType = declaringClass.findSuperTypeWithSameErasure(method2.declaringClass.erasure());", "+\t\t\t\t\t\t\tTypeBinding superType = method.declaringClass.erasure().findSuperTypeWithSameErasure(method2.declaringClass.erasure());", "-\t\t\t\t\t\t\tReferenceBinding superType = receiverType.findSuperTypeWithSameErasure(method.declaringClass.erasure());", "-\t\t\t\t\t\t\tif (original.declaringClass == superType || superType == null) {", "+\t\t\t\t\t\t\tTypeBinding superType = receiverType.findSuperTypeWithSameErasure(method.declaringClass.erasure());", "+\t\t\t\t\t\t\tif (original.declaringClass == superType || !(superType instanceof ReferenceBinding)) {", "-\t\t\t\t\t\t\t\tMethodBinding[] superMethods = superType.getMethods(method.selector);", "+\t\t\t\t\t\t\t\tMethodBinding[] superMethods = ((ReferenceBinding)superType).getMethods(method.selector);", "-\t\t\t\t\t\t\tif (original2.declaringClass == superType || superType == null) {", "+\t\t\t\t\t\t\tif (original2.declaringClass == superType || !(superType instanceof ReferenceBinding)) {", "-\t\t\t\t\t\t\t\tMethodBinding[] superMethods = superType.getMethods(method2.selector);", "+\t\t\t\t\t\t\t\tMethodBinding[] superMethods = ((ReferenceBinding)superType).getMethods(method2.selector);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9468d08add33a8393ae553ae610b18fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "6214978e7f95991a58a94c92ca3aaa2f1fb276e7", "commitAfterChange": "e51ee3261ac6e39dfe94f9022da64a162a2b4dbc", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public MethodBinding getHighestOverridenMethod()", "signatureAfterChange": " public MethodBinding getHighestOverridenMethod(LookupEnvironment environment)", "diff": ["-public MethodBinding getHighestOverridenMethod() {", "+public MethodBinding getHighestOverridenMethod(LookupEnvironment environment) {", "+    MethodVerifier verifier = environment.methodVerifier();", "-\t\tMethodBinding superMethod = currentType.getExactMethod(this.selector, this.parameters, null);", "-\t\tif (superMethod != null) {", "-\t\t\tbestMethod = superMethod;", "+\t\tMethodBinding[] superMethods = currentType.getMethods(this.selector);", "+\t\tfor (int i = 0, length = superMethods.length; i < length; i++) {", "+\t\t\tif (verifier.doesMethodOverride(this, superMethods[i])) {", "+\t\t\t\tbestMethod = superMethods[i];", "+\t\t\t\tbreak;", "+\t\t\t}", "-\t\tMethodBinding superMethod = currentType.getExactMethod(this.selector, this.parameters, null);", "-\t\tif (superMethod != null) {", "-\t\t\tbestMethod = superMethod;", "-\t\t}\t\t", "+\t\tMethodBinding[] superMethods = currentType.getMethods(this.selector);", "+\t\tfor (int j = 0, length = superMethods.length; j < length; j++) {", "+\t\t\tMethodBinding superMethod = superMethods[j];", "+\t\t\tif (verifier.doesMethodOverride(this, superMethod)) {", "+\t\t\t\tTypeBinding bestReturnType = bestMethod.returnType;", "+\t\t\t\tif (bestReturnType == superMethod.returnType", "+\t\t\t\t\t\t|| bestMethod.returnType.findSuperTypeOriginatingFrom(superMethod.returnType) != null) {", "+\t\t\t\t\tbestMethod = superMethod;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}"]}], "num": 12065}
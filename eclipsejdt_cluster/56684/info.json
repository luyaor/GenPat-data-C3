{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68d54cd1b43d684a14b7343374897112", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b223e82b3ffa573c82b6d7bd2a44ea9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \t \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.EqualExpression expression)", "signatureAfterChange": "  \tpublic MemberValuePair convert(org.eclipse.jdt.internal.compiler.ast.MemberValuePair memberValuePair)", "diff": ["+", "+\tpublic MemberValuePair convert(org.eclipse.jdt.internal.compiler.ast.MemberValuePair memberValuePair) {", "+\t\tMemberValuePair pair = this.ast.newMemberValuePair();", "+\t\tSimpleName simpleName = this.ast.newSimpleName(new String(memberValuePair.token));", "+\t\tint start = memberValuePair.sourceStart;", "+\t\tint end = memberValuePair.sourceEnd;", "+\t\tsimpleName.setSourceRange(start, end - start + 1);", "+\t\tpair.setName(simpleName);", "+\t\tpair.setValue(convert(memberValuePair.value));", "+\t\tstart = memberValuePair.sourceStart;", "+\t\tend = memberValuePair.value.sourceEnd;", "+\t\tpair.setSourceRange(start, end - start + 1);", "+\t\treturn pair;", "+\t}", "-\tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.EqualExpression expression) {", "-\t\tInfixExpression infixExpression = this.ast.newInfixExpression();", "-\t\t\trecordNodes(infixExpression, expression);", "-\t\tExpression leftExpression = convert(expression.left);", "-\t\tinfixExpression.setLeftOperand(leftExpression);", "-\t\tinfixExpression.setRightOperand(convert(expression.right));", "-\t\tint startPosition = leftExpression.getStartPosition();", "-\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "-\t\tswitch ((expression.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT) {", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.EQUAL_EQUAL :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.EQUALS);", "-\t\t\t\tbreak;", "-\t\t\tcase org.eclipse.jdt.internal.compiler.ast.OperatorIds.NOT_EQUAL :", "-\t\t\t\tinfixExpression.setOperator(InfixExpression.Operator.NOT_EQUALS);", "-\t\t}", "-\t\treturn infixExpression;", "-\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2cce3e5a06ec2192016ed7864463341", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java", "commitBeforeChange": "54bfec2a779f774d0ec94918b11965f709f8eea7", "commitAfterChange": "07b0f1c60d56e715370df7f24af276bdb1cfa324", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\tif (this.progressMonitor != null){", "+\t\tif (this.progressMonitor != null) {", "-\t\tboolean wasConsistent = workingCopy.isConsistent();", "-\t\ttry {", "-\t\t\tif (!wasConsistent) {", "-\t\t\t\t// create the delta builder (this remembers the current content of the cu)", "-\t\t\t\tJavaElementDeltaBuilder deltaBuilder = new JavaElementDeltaBuilder(workingCopy);", "-\t\t\t\t", "-\t\t\t\t// update the element infos with the content of the working copy", "-\t\t\t\tthis.ast = workingCopy.makeConsistent(this.createAST, this.astLevel, this.progressMonitor);", "-\t\t\t\tdeltaBuilder.buildDeltas();", "-", "-\t\t\t\tif (progressMonitor != null) progressMonitor.worked(2);", "-\t\t\t", "-\t\t\t\t// register the deltas", "-\t\t\t\tJavaElementDelta delta = deltaBuilder.delta;", "-\t\t\t\tif (delta != null) {", "-\t\t\t\t\tdelta.changedAST(this.ast);", "-\t\t\t\t\taddReconcileDelta(workingCopy, delta);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\t// force problem detection? - if structure was consistent", "-\t\t\t\tif (this.forceProblemDetection) {", "-\t\t\t\t\tIProblemRequestor problemRequestor = workingCopy.getPerWorkingCopyInfo();", "-\t\t\t\t\tboolean computeProblems = JavaProject.hasJavaNature(workingCopy.getJavaProject().getProject()) && problemRequestor != null && problemRequestor.isActive();", "-\t\t\t\t\tif (computeProblems) {", "-\t\t\t\t\t    CompilationUnitDeclaration unit = null;", "-\t\t\t\t\t    try {", "-\t\t\t\t\t\t\tproblemRequestor.beginReporting();", "-\t\t\t\t\t\t\tchar[] contents = workingCopy.getContents();", "-\t\t\t\t\t\t\tunit = CompilationUnitProblemFinder.process(workingCopy, contents, this.workingCopyOwner, problemRequestor, this.createAST, this.progressMonitor);", "-\t\t\t\t\t\t\tproblemRequestor.endReporting();", "-\t\t\t\t\t\t\tif (progressMonitor != null) progressMonitor.worked(1);", "-\t\t\t\t\t\t\tif (this.createAST && unit != null) {", "-\t\t\t\t\t\t\t\tMap options = workingCopy.getJavaProject().getOptions(true);", "-\t\t\t\t\t\t\t\tthis.ast = AST.convertCompilationUnit(this.astLevel, unit, contents, options, true/*isResolved*/, workingCopy, this.progressMonitor);", "-\t\t\t\t\t\t\t\tJavaElementDelta delta = new JavaElementDelta(workingCopy);", "-\t\t\t\t\t\t\t\tdelta.changedAST(this.ast);", "-\t\t\t\t\t\t\t\taddReconcileDelta(workingCopy, delta);", "-\t\t\t\t\t\t\t\tif (progressMonitor != null) progressMonitor.worked(1);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t    } finally {", "-\t\t\t\t\t        if (unit != null) {", "-\t\t\t\t\t            unit.cleanUp();", "-\t\t\t\t\t        }", "-\t\t\t\t\t    }", "+\t\tIProblemRequestor problemRequestor = workingCopy.getPerWorkingCopyInfo();", "+\t\tthis.resolveBindings |= problemRequestor != null && problemRequestor.isActive();", "+\t\t", "+\t\t// create the delta builder (this remembers the current content of the cu)", "+\t\tthis.deltaBuilder = new JavaElementDeltaBuilder(workingCopy);", "+\t\t", "+\t\t// make working copy consistent if needed and compute AST if needed", "+\t\tmakeConsistent(workingCopy, problemRequestor);", "+\t\t", "+\t\t// notify reconcile participants", "+\t\tnotifyParticipants(workingCopy);", "+\t\t", "+\t\t// recreate ast if needed", "+\t\tif (this.ast == null && (this.astLevel > ICompilationUnit.NO_AST || this.resolveBindings))", "+\t\t\tmakeConsistent(workingCopy, problemRequestor);", "+\t", "+\t\t// report problems", "+\t\tif (this.problems != null) {", "+\t\t\ttry {", "+\t\t\t\tproblemRequestor.beginReporting();", "+\t\t\t\tfor (Iterator iteraror = problems.values().iterator(); iteraror.hasNext();) {", "+\t\t\t\t\tCategorizedProblem[] categorizedProblems = (CategorizedProblem[]) iteraror.next();", "+\t\t\t\t\tif (categorizedProblems == null) continue;", "+\t\t\t\t\tfor (int i = 0, length = categorizedProblems.length; i < length; i++) {", "+\t\t\t\t\t\tCategorizedProblem problem = categorizedProblems[i];", "+\t\t\t\t\t\tif (JavaModelManager.VERBOSE){", "+\t\t\t\t\t\t\tSystem.out.println(\"PROBLEM FOUND while reconciling : \" + problem.getMessage());//$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (this.progressMonitor != null && this.progressMonitor.isCanceled()) break;", "+\t\t\t\t\t\tproblemRequestor.acceptProblem(problem);", "+\t\t\t} finally {", "+\t\t\t\tproblemRequestor.endReporting();", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\t// report delta", "+\t\ttry {", "+\t\t\tJavaElementDelta delta = this.deltaBuilder.delta;", "+\t\t\tif (delta != null) {", "+\t\t\t\taddReconcileDelta(workingCopy, delta);", "-\t\t\tif (progressMonitor != null) progressMonitor.done();", "+\t\t\tif (this.progressMonitor != null) this.progressMonitor.done();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d94209fd148d3fbfc7669b63f660efa8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "874e2c41609c64af417834df9af2e898d8dcf37a", "commitAfterChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "  public void resetNullInfoForFields(UnconditionalFlowInfo fieldResetFlow)", "signatureAfterChange": "  public void resetNullInfoForFields()", "diff": ["-public void resetNullInfoForFields(UnconditionalFlowInfo fieldResetFlow) {", "+public void resetNullInfoForFields() {", "-\t\tmask |= fieldResetFlow.constantFieldsMask;", "+\t\tmask |= this.constantFieldsMask;", "-\t\tthis.nullBit1 = (this.nullBit1 & mask) | fieldResetFlow.nullBit1;", "-\t\tthis.nullBit2 = (this.nullBit2 & mask) | fieldResetFlow.nullBit2;", "-\t\tthis.nullBit3 = (this.nullBit3 & mask) | fieldResetFlow.nullBit3;", "-\t\tthis.nullBit4 = (this.nullBit4 & mask) | fieldResetFlow.nullBit4;", "-", "+\t\tthis.nullBit1 |= ~mask;", "+\t\tthis.nullBit2 &= mask;", "+\t\tthis.nullBit3 &= mask;", "+\t\tthis.nullBit4 |= ~mask;", "-\t\t\tfor (int vectorIndex = 0; vectorIndex < len; vectorIndex++) {", "-\t\t\t\tif (fieldResetFlow.extraConstantFieldMask != null) {", "-\t\t\t\t    if (vectorIndex >= fieldResetFlow.extraConstantFieldMask.length) {", "+\t\t\tif (this.extraConstantFieldMask != null){", "+\t\t\t\tfor (int vectorIndex = 0; vectorIndex < len; vectorIndex++) {", "+\t\t\t\t    if (vectorIndex >= this.extraConstantFieldMask.length) {", "-\t\t\t\t    \t\tmask = ((-1 << localsStartOffset) | fieldResetFlow.extraConstantFieldMask[vectorIndex]);", "+\t\t\t\t    \t\tmask = ((-1 << localsStartOffset) | this.extraConstantFieldMask[vectorIndex]);", "-\t\t\t\t    \t\tmask = 0L | fieldResetFlow.extraConstantFieldMask[vectorIndex];", "+\t\t\t\t    \t\tmask = 0L | this.extraConstantFieldMask[vectorIndex];", "-\t\t\t\t} else {", "-\t\t\t\t\tif (vectorIndex == localsStartIndex) {", "-\t\t\t\t\t\t// some locals, some fields at this vectorIndex", "-\t\t\t\t\t\tmask = -1L << localsStartOffset;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// all fields here", "-\t\t\t\t\t\tmask = 0L;", "-\t\t\t\t\t}", "+\t\t\t\t\tthis.extra[2][vectorIndex]", "+\t\t\t\t\t    |= ~mask;", "+\t\t\t\t\tthis.extra[3][vectorIndex] &= mask;", "+\t\t\t\t\tthis.extra[4][vectorIndex] &= mask;", "+\t\t\t\t\tthis.extra[5][vectorIndex] |= ~mask;", "-\t\t\t    long reset1, reset2, reset3, reset4;", "-\t\t\t    if (fieldResetFlow.extra != null && fieldResetFlow.extra[2].length > vectorIndex) {", "-\t\t\t    \treset1 = fieldResetFlow.extra[2][vectorIndex];", "-\t\t\t    \treset2 = fieldResetFlow.extra[3][vectorIndex];", "-\t\t\t    \treset3 = fieldResetFlow.extra[4][vectorIndex];", "-\t\t\t    \treset4 = fieldResetFlow.extra[5][vectorIndex];", "-\t\t\t    } else {", "-\t\t\t    \t// no status recorded in fieldResetFlow, use def unknown instead:", "-\t\t\t    \treset1 = reset4 = 1;", "-\t\t\t    \treset2 = reset3 = 0;", "-\t\t\t    }", "-\t\t\t\tthis.extra[2][vectorIndex] = (this.extra[2][vectorIndex] & mask) | reset1;", "-\t\t\t\tthis.extra[3][vectorIndex] = (this.extra[3][vectorIndex] & mask) | reset2;", "-\t\t\t\tthis.extra[4][vectorIndex] = (this.extra[4][vectorIndex] & mask) | reset3;", "-\t\t\t\tthis.extra[5][vectorIndex] = (this.extra[5][vectorIndex] & mask) | reset4;", "+\t\t\t} else {", "+\t\t\t\t// no constant fields", "+\t\t\t\tfor (int vectorIndex = 0; vectorIndex < len; vectorIndex++) {", "+\t\t\t\t    if (vectorIndex == localsStartIndex) {", "+\t\t\t\t    \t// some locals, some fields at this vectorIndex", "+\t\t\t\t    \tmask = -1L << localsStartOffset;", "+\t\t\t\t    } else {", "+\t\t\t\t    \t// all fields here", "+\t\t\t\t    \tmask = 0L;", "+\t\t\t\t    }", "+\t\t\t\t\tthis.extra[2][vectorIndex]", "+\t\t\t\t\t    |= ~mask;", "+\t\t\t\t\tthis.extra[3][vectorIndex] &= mask;", "+\t\t\t\t\tthis.extra[4][vectorIndex] &= mask;", "+\t\t\t\t\tthis.extra[5][vectorIndex] |= ~mask;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0af17edc18e927e62b3f8e4e4917cc8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate static SearchPattern createMethodOrConstructorPattern(String patternString, int limitTo, int matchRule, boolean isConstructor)", "signatureAfterChange": " \tprivate static SearchPattern createMethodOrConstructorPattern(String patternString, int limitTo, int matchRule, boolean isConstructor)", "diff": ["-\t\tfinal int InsideParameter = 2;", "-\t\tfinal int InsideReturnType = 3;", "-\t\tfinal int InsideTypeArguments = 4;", "+\t\tfinal int InsideTypeArguments = 2;", "+\t\tfinal int InsideParameter = 3;", "+\t\tfinal int InsideReturnType = 4;", "+\t\tString typeArgumentsString = null;", "-\t\t\t\t\t\t\t\tif (selector == null) return null; // invalid syntax", "+\t\t\t\t\t\t\t\tif (selector == null || lastToken == TerminalTokens.TokenNameDOT) {", "+\t\t\t\t\t\t\t\t\tif (typeArgumentsString != null) return null; // invalid syntax", "+\t\t\t\t\t\t\t\t\ttypeArgumentsString = scanner.getCurrentTokenString();", "+\t\t\t\t\t\t\t\t\tmode = InsideTypeArguments;", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (typeArgumentsString != null) return null; // invalid syntax", "-\t\t\t\t\t\t\t\t\tif (selector == null) return null;", "+\t\t\t\t\t\t\t\t\tif (selector == null) return null; // invalid syntax", "-\t\t\t\t\t\t\t\t\tString tokenSource = scanner.getCurrentTokenString();", "-\t\t\t\t\t\t\t\t\tdeclaringType += tokenSource + selector;", "+\t\t\t\t\t\t\t\t\tdeclaringType += scanner.getCurrentTokenString() + selector;", "-\t\t\t\t\t\t\t\tif (!(TerminalTokens.TokenNameWHITESPACE == lastToken || TerminalTokens.TokenNameDOT == lastToken))", "-\t\t\t\t\t\t\t\t\tmode = isConstructor ? InsideTypeArguments : InsideReturnType;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase TerminalTokens.TokenNameREMAINDER:", "-\t\t\t\t\t\t\t\tif (selector == null) return null;// invalid syntax", "-\t\t\t\t\t\t\t\tmode = InsideTypeArguments;", "+\t\t\t\t\t\t\t\tswitch (lastToken) {", "+\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE:", "+\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameDOT:", "+\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameGREATER:", "+\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameRIGHT_SHIFT:", "+\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameUNSIGNED_RIGHT_SHIFT:", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\t\t\tmode = InsideReturnType;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (declaringType == null) return null; // invalid syntax", "-\t\t\t\t\t\tif (declaringType == null) return null; // invalid syntax", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t// read type arguments", "+\t\t\t\tcase InsideTypeArguments:", "+\t\t\t\t\tif (typeArgumentsString == null) return null; // invalid syntax", "+\t\t\t\t\ttypeArgumentsString += scanner.getCurrentTokenString();", "+\t\t\t\t\tswitch (token) {", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameGREATER:", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameRIGHT_SHIFT:", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameUNSIGNED_RIGHT_SHIFT:", "+\t\t\t\t\t\t\targCount--;", "+\t\t\t\t\t\t\tif (argCount == 0) {", "+\t\t\t\t\t\t\t\tString pseudoType = \"Type\"+typeArgumentsString; //$NON-NLS-1$", "+\t\t\t\t\t\t\t\ttypeArguments = Signature.getTypeArguments(Signature.createTypeSignature(pseudoType, false).toCharArray());", "+\t\t\t\t\t\t\t\tmode = InsideSelector;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameLESS:", "+\t\t\t\t\t\t\targCount++;", "+\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase TerminalTokens.TokenNameREMAINDER:", "-\t\t\t\t\t\t\t\t// invalid syntax", "-\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\tif (parameterType == null) return null; // invalid syntax", "-\t\t\t\t\t\tif (parameterType == null) return null; // invalid syntax", "-\t\t\t\t\t\t\tcase TerminalTokens.TokenNameREMAINDER:", "-\t\t\t\t\t\t\t\tmode = InsideTypeArguments;", "+\t\t\t\t\t\t\tcase TerminalTokens.TokenNameLPAREN:", "+\t\t\t\t\t\t\t\tparameterTypes = new String[5];", "+\t\t\t\t\t\t\t\tparameterCount = 0;", "+\t\t\t\t\t\t\t\tmode = InsideParameter;", "+\t\t\t\t\t\tif (returnType == null) return null; // invalid syntax", "-\t\t\t\t\t\tif (returnType == null) return null; // invalid syntax", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase InsideTypeArguments:", "-\t\t\t\t\tswitch (token) {", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE:", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameREMAINDER:", "-\t\t\t\t\t\t\tString pseudoType = selector+patternString.substring(scanner.getCurrentTokenStartPosition()); // '%' is a valid character for type", "-\t\t\t\t\t\t\ttypeArguments = Util.extractMethodArguments(Signature.createTypeSignature(pseudoType, false));", "-\t\t\t\t\t\t\tscanner.currentPosition = scanner.eofPosition; // end scan", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameLESS:", "-\t\t\t\t\t\t\tif (lastToken == TerminalTokens.TokenNameREMAINDER || lastToken == TerminalTokens.TokenNameWHITESPACE) {", "-\t\t\t\t\t\t\t\tpseudoType = selector+'%'+patternString.substring(scanner.getCurrentTokenStartPosition()); // '%' is a valid character for type", "-\t\t\t\t\t\t\t\ttypeArguments = Util.extractMethodArguments(Signature.createTypeSignature(pseudoType, false));", "-\t\t\t\t\t\t\t\tscanner.currentPosition = scanner.eofPosition; // end scan", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\treturn null; // invalid syntax", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\treturn null; // invalid syntax"]}], "num": 56684}
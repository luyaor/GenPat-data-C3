{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fec1574b50cac13119abbfdfb5dd3553", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87c8f7c80e8a62d9667441d063f7d377", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "3527fb56a04bdd8293a9174681c9a54d09c9fc64", "commitAfterChange": "a9a915321b38b29d8106b6fc3f15e3da0c61171f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected boolean generateInfos(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean generateInfos(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["-protected boolean generateInfos(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException {", "+protected boolean generateInfos(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException {", "-\t\tJavaModelManager.getJavaModelManager().putInfo(this, info);", "-\t\tCompilationUnitDeclaration unit = parser.parseCompilationUnit(this, this.computeProblems /*full parse if compute problems*/);", "+\t\tCompilationUnitDeclaration unit = parser.parseCompilationUnit(new org.eclipse.jdt.internal.compiler.env.ICompilationUnit() {", "+\t\t\t\tpublic char[] getContents() {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tIBuffer buffer = getBufferManager().getBuffer(WorkingCopy.this);", "+\t\t\t\t\t\tif (buffer == null) {", "+\t\t\t\t\t\t\t\tbuffer = openBuffer(pm); // open buffer independently from the info, since we are building the info", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn buffer == null ? null : buffer.getCharacters();", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\treturn CharOperation.NO_CHAR;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tpublic char[] getMainTypeName() {", "+\t\t\t\t\treturn WorkingCopy.this.getMainTypeName();", "+\t\t\t\t}", "+\t\t\t\tpublic char[][] getPackageName() {", "+\t\t\t\t\treturn WorkingCopy.this.getPackageName();", "+\t\t\t\t}", "+\t\t\t\tpublic char[] getFileName() {", "+\t\t\t\t\treturn WorkingCopy.this.getFileName();", "+\t\t\t\t}", "+\t\t\t}, this.computeProblems /*full parse if compute problems*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a497ab0d85bcfe920275a4ea6c3e8e3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "3527fb56a04bdd8293a9174681c9a54d09c9fc64", "commitAfterChange": "a9a915321b38b29d8106b6fc3f15e3da0c61171f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  protected boolean generateInfos(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": "  protected boolean generateInfos(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["-protected boolean generateInfos(OpenableElementInfo info, IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException {", "+protected boolean generateInfos(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException {", "-\t\tJavaModelManager.getJavaModelManager().putInfo(this, info);", "-\t\tparser.parseCompilationUnit(this, false/*diet parse*/);", "+\t\tparser.parseCompilationUnit(new org.eclipse.jdt.internal.compiler.env.ICompilationUnit() {", "+\t\t\t\tpublic char[] getContents() {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tIBuffer buffer = getBufferManager().getBuffer(CompilationUnit.this);", "+\t\t\t\t\t\tif (buffer == null) {", "+\t\t\t\t\t\t\t\tbuffer = openBuffer(pm); // open buffer independently from the info, since we are building the info", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn buffer == null ? null : buffer.getCharacters();", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\treturn CharOperation.NO_CHAR;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tpublic char[] getMainTypeName() {", "+\t\t\t\t\treturn CompilationUnit.this.getMainTypeName();", "+\t\t\t\t}", "+\t\t\t\tpublic char[][] getPackageName() {", "+\t\t\t\t\treturn CompilationUnit.this.getPackageName();", "+\t\t\t\t}", "+\t\t\t\tpublic char[] getFileName() {", "+\t\t\t\t\treturn CompilationUnit.this.getFileName();", "+\t\t\t\t}", "+\t\t\t}, false/*diet parse*/);"]}], "num": 22229}
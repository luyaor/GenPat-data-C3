{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71a1de2077ff7c28ab6424bd6e7885ca", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22c5812d8a82b30783d21a4bcb19018c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java", "commitBeforeChange": "3f92e8a5a07dd9ede4257e502806d13fe53cd5fa", "commitAfterChange": "ef611461f875a680b17b8fa198a6386473d15159", "methodNumberBeforeChange": 255, "methodNumberAfterChange": 255, "signatureBeforeChange": " public void test0260() throws JavaModelException", "signatureAfterChange": " public void test0260() throws JavaModelException", "diff": ["-\tthis.workingCopies = new ICompilationUnit[2];", "-\tthis.workingCopies[0] = getWorkingCopy(", "-\t\t\"/Completion/src/camelcase/Test.java\",", "-\t\t\"package camelcase;\"+", "-\t\t\"@Annot(oTT)\"+", "-\t\t\"public class Test {\\n\"+", "-\t\t\"}\");", "+\tthis.oldOptions = JavaCore.getOptions();", "+\ttry {", "+\t\tHashtable options = new Hashtable(oldOptions);", "+\t\toptions.put(JavaCore.CODEASSIST_CAMEL_CASE_MATCH, JavaCore.ENABLED);", "+\t\tJavaCore.setOptions(options);", "+\t\t", "+\t\tthis.workingCopies = new ICompilationUnit[2];", "+\t\tthis.workingCopies[0] = getWorkingCopy(", "+\t\t\t\"/Completion/src/camelcase/Test.java\",", "+\t\t\t\"package camelcase;\"+", "+\t\t\t\"@Annot(oTT)\"+", "+\t\t\t\"public class Test {\\n\"+", "+\t\t\t\"}\");", "+\t\t", "+\t\tthis.workingCopies[1] = getWorkingCopy(", "+\t\t\t\"/Completion/src/camelcase/Annot.java\",", "+\t\t\t\"package camelcase;\"+", "+\t\t\t\"public @interface Annot {\\n\"+", "+\t\t\t\"  String oneTwoThree() default \\\"\\\";\\n\"+", "+\t\t\t\"  String oTTAttribute() default \\\"\\\";\\n\"+", "+\t\t\t\"}\");", "-\tthis.workingCopies[1] = getWorkingCopy(", "-\t\t\"/Completion/src/camelcase/Annot.java\",", "-\t\t\"package camelcase;\"+", "-\t\t\"public @interface Annot {\\n\"+", "-\t\t\"  String oneTwoThree() default \\\"\\\";\\n\"+", "-\t\t\"  String oTTAttribute() default \\\"\\\";\\n\"+", "-\t\t\"}\");", "-", "-\tCompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "-\tString str = this.workingCopies[0].getSource();", "-\tString completeBehind = \"oTT\";", "-\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "-\tthis.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);", "-", "-\tassertResults(", "-\t\t\t\"oneTwoThree[ANNOTATION_ATTRIBUTE_REF]{oneTwoThree, Lcamelcase.Annot;, Ljava.lang.String;, oneTwoThree, null, \" + (R_DEFAULT + R_INTERESTING + R_CAMEL_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"oTTAttribute[ANNOTATION_ATTRIBUTE_REF]{oTTAttribute, Lcamelcase.Annot;, Ljava.lang.String;, oTTAttribute, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\",", "-\t\t\trequestor.getResults());", "+\t\tCompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+\t\tString str = this.workingCopies[0].getSource();", "+\t\tString completeBehind = \"oTT\";", "+\t\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+\t\tthis.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);", "+\t", "+\t\tassertResults(", "+\t\t\t\t\"oneTwoThree[ANNOTATION_ATTRIBUTE_REF]{oneTwoThree, Lcamelcase.Annot;, Ljava.lang.String;, oneTwoThree, null, \" + (R_DEFAULT + R_INTERESTING + R_CAMEL_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"oTTAttribute[ANNOTATION_ATTRIBUTE_REF]{oTTAttribute, Lcamelcase.Annot;, Ljava.lang.String;, oTTAttribute, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\trequestor.getResults());", "+\t} finally {", "+\t\tJavaCore.setOptions(oldOptions);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd6e6104a1ad1a73e9b60f59e322f102", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java", "commitBeforeChange": "3f92e8a5a07dd9ede4257e502806d13fe53cd5fa", "commitAfterChange": "ef611461f875a680b17b8fa198a6386473d15159", "methodNumberBeforeChange": 625, "methodNumberAfterChange": 625, "signatureBeforeChange": " public void testCamelCaseMethodDeclaration1() throws JavaModelException", "signatureAfterChange": " public void testCamelCaseMethodDeclaration1() throws JavaModelException", "diff": ["-\tthis.workingCopies = new ICompilationUnit[2];", "-\tthis.workingCopies[0] = getWorkingCopy(", "-\t\t\"/Completion/src/camelcase/Test.java\",", "-\t\t\"package camelcase;\"+", "-\t\t\"public class Test extends SuperClass {\\n\"+", "-\t\t\"  oTT\\n\"+", "-\t\t\"}\");", "+\tthis.oldOptions = JavaCore.getOptions();", "+\ttry {", "+\t\tHashtable options = new Hashtable(oldOptions);", "+\t\toptions.put(JavaCore.CODEASSIST_CAMEL_CASE_MATCH, JavaCore.ENABLED);", "+\t\tJavaCore.setOptions(options);", "+\t\t", "+\t\tthis.workingCopies = new ICompilationUnit[2];", "+\t\tthis.workingCopies[0] = getWorkingCopy(", "+\t\t\t\"/Completion/src/camelcase/Test.java\",", "+\t\t\t\"package camelcase;\"+", "+\t\t\t\"public class Test extends SuperClass {\\n\"+", "+\t\t\t\"  oTT\\n\"+", "+\t\t\t\"}\");", "+\t\t", "+\t\tthis.workingCopies[1] = getWorkingCopy(", "+\t\t\t\"/Completion/src/camelcase/SuperClass.java\",", "+\t\t\t\"package camelcase;\"+", "+\t\t\t\"public class SuperClass {\\n\"+", "+\t\t\t\"  public void oneTwoThree(){}\\n\"+", "+\t\t\t\"  public void oTTMethod(){}\\n\"+", "+\t\t\t\"}\");", "-\tthis.workingCopies[1] = getWorkingCopy(", "-\t\t\"/Completion/src/camelcase/SuperClass.java\",", "-\t\t\"package camelcase;\"+", "-\t\t\"public class SuperClass {\\n\"+", "-\t\t\"  public void oneTwoThree(){}\\n\"+", "-\t\t\"  public void oTTMethod(){}\\n\"+", "-\t\t\"}\");", "-", "-\tCompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "-\tString str = this.workingCopies[0].getSource();", "-\tString completeBehind = \"oTT\";", "-\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "-\tthis.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);", "-", "-\tassertResults(", "-\t\t\t\"oTT[POTENTIAL_METHOD_DECLARATION]{oTT, Lcamelcase.Test;, ()V, oTT, null, \" + (R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"oneTwoThree[METHOD_DECLARATION]{public void oneTwoThree(), Lcamelcase.SuperClass;, ()V, oneTwoThree, null, \" + (R_DEFAULT + R_INTERESTING + R_CAMEL_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\\n\" +", "-\t\t\t\"oTTMethod[METHOD_DECLARATION]{public void oTTMethod(), Lcamelcase.SuperClass;, ()V, oTTMethod, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\",", "-\t\t\trequestor.getResults());", "+\t\tCompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);", "+\t\tString str = this.workingCopies[0].getSource();", "+\t\tString completeBehind = \"oTT\";", "+\t\tint cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();", "+\t\tthis.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);", "+\t", "+\t\tassertResults(", "+\t\t\t\t\"oTT[POTENTIAL_METHOD_DECLARATION]{oTT, Lcamelcase.Test;, ()V, oTT, null, \" + (R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"oneTwoThree[METHOD_DECLARATION]{public void oneTwoThree(), Lcamelcase.SuperClass;, ()V, oneTwoThree, null, \" + (R_DEFAULT + R_INTERESTING + R_CAMEL_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\\n\" +", "+\t\t\t\t\"oTTMethod[METHOD_DECLARATION]{public void oTTMethod(), Lcamelcase.SuperClass;, ()V, oTTMethod, null, \" + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + \"}\",", "+\t\t\t\trequestor.getResults());", "+\t} finally {", "+\t\tJavaCore.setOptions(oldOptions);", "+\t}"]}], "num": 22715}
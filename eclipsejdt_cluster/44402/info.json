{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc7c7e77b73ae8d4a696060cc4aeab56", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "159fc5e346de05ca40504b5e4714cc9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeDeclarationPattern.java", "commitBeforeChange": "88b7c7eb3469a024202ea445bb4a9f81206035c9", "commitAfterChange": "38981955f1b194aa266ea7fa397baf3099ab8081", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void decodeIndexKey(char[] key)", "signatureAfterChange": " public void decodeIndexKey(char[] key)", "diff": ["-\tthis.typeSuffix = key[key.length - 2];", "+\t// Extract suffix from modifiers instead of index key", "+\tint kind = this.modifiers & (IConstants.AccInterface+IConstants.AccEnum+IConstants.AccAnnotation);", "+\tswitch (kind) {", "+\t\tcase IConstants.AccAnnotation:", "+\t\tcase IConstants.AccAnnotation+IConstants.AccInterface:", "+\t\t\tthis.typeSuffix = ANNOTATION_TYPE_SUFFIX;", "+\t\t\tbreak;", "+\t\tcase IConstants.AccEnum:", "+\t\t\tthis.typeSuffix = ENUM_SUFFIX;", "+\t\t\tbreak;", "+\t\tcase IConstants.AccInterface:", "+\t\t\tthis.typeSuffix = INTERFACE_SUFFIX;", "+\t\t\tbreak;", "+\t\tdefault:", "+\t\t\tthis.typeSuffix = CLASS_SUFFIX;", "+\t\t\tbreak;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4735300938ef527be09213749f9f2229", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a8e18c32dc806d659bf5d8f2444be6f4268510d4", "commitAfterChange": "73072a493445774e509d0c21f3c359a527fa380b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void acceptInterface( \t\tchar[] packageName, \t\tchar[] interfaceName, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "signatureAfterChange": " \tpublic void acceptType( \t\tchar[] packageName, \t\tchar[] typeName, \t\tint modifiers, \t\tAccessRestriction accessRestriction)", "diff": ["+\tpublic void acceptType(", "+\t\tchar[] typeName,", "+\t\tchar[] fullyQualifiedName = CharOperation.concat(packageName, typeName, '.');", "+\t\t\tif (mustQualifyType(packageName, typeName)) {", "+\t\t\t\tcompletionName = typeName;", "+\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, typeName);", "+\t\t\trelevance += computeRelevanceForExpectingType(packageName, typeName);", "+\t\t\t", "+\t\t\tint kind = modifiers & (IConstants.AccInterface+IConstants.AccEnum+IConstants.AccAnnotation);", "+\t\t\tswitch (kind) {", "+\t\t\t\tcase IConstants.AccAnnotation:", "+\t\t\t\tcase IConstants.AccAnnotation+IConstants.AccInterface:", "+\t\t\t\t\trelevance += computeRelevanceForAnnotation();", "+\t\t\t\t\trelevance += computeRelevanceForInterface();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstants.AccEnum:", "+\t\t\t\t\trelevance += computeRelevanceForEnum();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstants.AccInterface:", "+\t\t\t\t\trelevance += computeRelevanceForInterface();", "+\t\t\t\t\tbreak;", "+\t\t\t\tdefault:", "+\t\t\t\t\trelevance += computeRelevanceForClass();", "+\t\t\t\t\trelevance += computeRelevanceForException(typeName);", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tproposal.setSignature(createNonGenericTypeSignature(packageName, typeName));", "+\t\t\tproposal.setTypeName(typeName);", "-\t */", "-\tpublic void acceptInterface(", "-\t\tchar[] packageName,", "-\t\tchar[] interfaceName,", "-\t\tint modifiers,", "-\t\tAccessRestriction accessRestriction) {", "-", "-\t\tchar[] fullyQualifiedName = CharOperation.concat(packageName, interfaceName, '.');", "-\t\tchar[] completionName = fullyQualifiedName;", "-", "-\t\tif (this.knownTypes.containsKey(completionName)) return;", "-", "-\t\tthis.knownTypes.put(completionName, this);", "-", "-\t\tint accessibility = IAccessRule.K_ACCESSIBLE;", "-\t\tif(accessRestriction != null) {", "-\t\t\tswitch (accessRestriction.getProblemId()) {", "-\t\t\t\tcase IProblem.ForbiddenReference:", "-\t\t\t\t\tif(this.options.checkForbiddenReference) return;", "-\t\t\t\t\taccessibility = IAccessRule.K_NON_ACCESSIBLE;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IProblem.DiscouragedReference:", "-\t\t\t\t\tif(this.options.checkDiscouragedReference) return;", "-\t\t\t\t\taccessibility = IAccessRule.K_DISCOURAGED;", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tboolean isQualified = true;", "-\t\tint relevance = computeBaseRelevance();", "-\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\trelevance += computeRelevanceForRestrictions(accessibility);", "-\t\tif (this.resolvingImports) {", "-\t\t\tcompletionName = CharOperation.concat(completionName, new char[] { ';' });", "-\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, fullyQualifiedName);", "-\t\t} else {", "-\t\t\tif (mustQualifyType(packageName, interfaceName)) {", "-\t\t\t\tif (packageName == null || packageName.length == 0)", "-\t\t\t\t\tif (this.unitScope != null && this.unitScope.fPackage.compoundName != CharOperation.NO_CHAR_CHAR)", "-\t\t\t\t\t\treturn; // ignore types from the default package from outside it", "-\t\t\t} else {", "-\t\t\t\tcompletionName = interfaceName;", "-\t\t\t\tisQualified = false;", "-\t\t\t}", "-\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, interfaceName);", "-\t\t\trelevance += computeRelevanceForExpectingType(packageName, interfaceName);", "-\t\t\trelevance += computeRelevanceForInterface();", "-\t\t\trelevance += computeRelevanceForQualification(isQualified);", "-\t\t}", "-\t\t", "-\t\tthis.noProposal = false;", "-\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\tproposal.setDeclarationSignature(packageName);", "-\t\t\tproposal.setSignature(createNonGenericTypeSignature(packageName, interfaceName));", "-\t\t\tproposal.setPackageName(packageName);", "-\t\t\tproposal.setTypeName(interfaceName);", "-\t\t\tproposal.setCompletion(completionName);", "-\t\t\tproposal.setFlags(modifiers | Flags.AccInterface);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "691129f175af3188de5ebb8b8138be40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "a8e18c32dc806d659bf5d8f2444be6f4268510d4", "commitAfterChange": "73072a493445774e509d0c21f3c359a527fa380b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void acceptType(char[] packageName, char[] typeName, int acceptFlags, boolean isDeclaration, char[] uniqueKey, int start, int end)", "signatureAfterChange": " public void acceptType(char[] packageName, char[] typeName, int modifiers, boolean isDeclaration, char[] uniqueKey, int start, int end)", "diff": ["+public void acceptType(char[] packageName, char[] typeName, int modifiers, boolean isDeclaration, char[] uniqueKey, int start, int end) {", "+\tint acceptFlags = 0;", "+\tint kind = modifiers & (IConstants.AccInterface+IConstants.AccEnum+IConstants.AccAnnotation);", "+\tswitch (kind) {", "+\t\tcase IConstants.AccAnnotation:", "+\t\tcase IConstants.AccAnnotation+IConstants.AccInterface:", "+\t\t\tacceptFlags = NameLookup.ACCEPT_ANNOTATIONS;", "+\t\t\tbreak;", "+\t\tcase IConstants.AccEnum:", "+\t\t\tacceptFlags = NameLookup.ACCEPT_ENUMS;", "+\t\t\tbreak;", "+\t\tcase IConstants.AccInterface:", "+\t\t\tacceptFlags = NameLookup.ACCEPT_INTERFACES;", "+\t\t\tbreak;", "+\t\tdefault:", "+\t\t\tacceptFlags = NameLookup.ACCEPT_CLASSES;", "+\t\t\tbreak;", "+\t}", "+\tIType type = null;", "+\tif(isDeclaration) {", "+\t\ttype = resolveTypeByLocation(packageName, typeName, acceptFlags, start, end);", "+\t} else {", "+\t\ttype = resolveType(packageName, typeName, acceptFlags);", "+\t\tif(type != null ) {", "+\t\t\tString key = uniqueKey == null ? type.getKey() : new String(uniqueKey);", "+\t\t\tif(type.isBinary()) {", "+\t\t\t\ttype = new ResolvedBinaryType((JavaElement)type.getParent(), type.getElementName(), key);", "+\t\t\t} else {", "+\t\t\t\ttype = new ResolvedSourceType((JavaElement)type.getParent(), type.getElementName(), key);", "+\t\t\t}", "+\t\t}", "+\t}", "+\t", "+\tif (type != null) {", "+\t\taddElement(type);", "+\t\tif(SelectionEngine.DEBUG){", "+\t\t\tSystem.out.print(\"SELECTION - accept type(\"); //$NON-NLS-1$", "+\t\t\tSystem.out.print(type.toString());", "+\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "+\t\t}", "+\t} ", "- */", "-protected void acceptType(char[] packageName, char[] typeName, int acceptFlags, boolean isDeclaration, char[] uniqueKey, int start, int end) {", "-\tIType type = null;", "-\tif(isDeclaration) {", "-\t\ttype = resolveTypeByLocation(packageName, typeName, acceptFlags, start, end);", "-\t} else {", "-\t\ttype = resolveType(packageName, typeName, acceptFlags);", "-\t\tif(type != null ) {", "-\t\t\tString key = uniqueKey == null ? type.getKey() : new String(uniqueKey);", "-\t\t\tif(type.isBinary()) {", "-\t\t\t\ttype = new ResolvedBinaryType((JavaElement)type.getParent(), type.getElementName(), key);", "-\t\t\t} else {", "-\t\t\t\ttype = new ResolvedSourceType((JavaElement)type.getParent(), type.getElementName(), key);", "-\t\t\t}", "-\t\t}", "-\t}", "-\t", "-\tif (type != null) {", "-\t\taddElement(type);", "-\t\tif(SelectionEngine.DEBUG){", "-\t\t\tSystem.out.print(\"SELECTION - accept type(\"); //$NON-NLS-1$", "-\t\t\tSystem.out.print(type.toString());", "-\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "-\t\t}", "-\t} "]}], "num": 44402}
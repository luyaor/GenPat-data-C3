{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec3dc67c20d4ff1cd76377f7292bd7e4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "597d42cdebe764b5c31ef9d9b310e9e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/readannotation/ReadAnnotationProcessor.java", "commitBeforeChange": "c7530b44102791083c7f5487f5dd4ce7cebdfce6", "commitAfterChange": "f3583cbdecac6b2a3a121f21a86edfd4a2e9d534", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprivate void assertAnnotation(final String[] expected, Collection<AnnotationMirror> annotations)", "signatureAfterChange": " \t \tprivate void assertAnnotation(final String[] expected, Collection<AnnotationMirror> annotations)", "diff": ["+\t\t\tString mirrorString = ProcessorUtil.annoMirrorToString(mirror);", "-\t\t\t\tTestCase.assertEquals(\"\", mirror.toString()); //$NON-NLS-1$", "+\t\t\t\tTestCase.assertEquals(\"\", mirrorString); //$NON-NLS-1$", "-\t\t\t\tfinal String mirrorToString = mirror.toString();", "-\t\t\t\tfinal boolean contains = expectedSet.contains(mirrorToString);", "+\t\t\t\tfinal boolean contains = expectedSet.contains(mirrorString);", "-\t\t\t\t\tSystem.err.println(mirrorToString);", "-\t\t\t\t\tSystem.err.println(expectedSet);", "+\t\t\t\t\tSystem.err.println(\"found unexpected: \" + mirrorString);", "+\t\t\t\t\tSystem.err.println(\"expected set: \" + expectedSet);", "-\t\t\t\tTestCase.assertTrue(\"unexpected annotation \" + mirrorToString, contains); //$NON-NLS-1$", "-\t\t\t\texpectedSet.remove(mirrorToString);", "+\t\t\t\tTestCase.assertTrue(\"unexpected annotation \" + mirrorString, contains); //$NON-NLS-1$", "+\t\t\t\texpectedSet.remove(mirrorString);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f83e2bc5c39e2c7890aeccd7becf4c33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "b6fe6f5260b125d69b0514fb7ed6ac0364e3e649", "commitAfterChange": "2253f3dfcbdf32f3d1a5ff419b874f53e57d43c1", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "\r \tprotected boolean generateInfos(\r \t\tOpenableElementInfo info,\r \t\tIProgressMonitor pm,\r \t\tMap newElements,\r \t\tIResource underlyingResource)\tthrows JavaModelException", "signatureAfterChange": "\r \tprotected boolean generateInfos(\r \t\tOpenableElementInfo info,\r \t\tIProgressMonitor pm,\r \t\tMap newElements,\r \t\tIResource underlyingResource)\tthrows JavaModelException", "diff": ["-\t\t\t\tString sharedClasspath = loadClasspath();\r", "-\t\t\t\tif (sharedClasspath != null) {\r", "-\t\t\t\t\ttry {\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tString sharedClasspath = loadClasspath();\r", "+\t\t\t\t\tif (sharedClasspath != null) {\r", "-\t\t\t\t\t} catch(IOException e){\r", "-\t\t\t\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);\r", "+\t\t\t\t} catch(IOException e){\r", "+\t\t\t\t\tUtil.log(e, \r", "+\t\t\t\t\t\t\"Exception while retrieving \"+ this.getPath() //$NON-NLS-1$\r", "+\t\t\t\t\t\t+\"/.classpath, will revert to default classpath\"); //$NON-NLS-1$\r", "+\t\t\t\t\t//throw new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);\r", "+\t\t\t\t}\r", "-\t\t\t\t\t// extract out the output location\r", "-\t\t\t\t\tif (classpath != null && classpath.length > 0) {\r", "-\t\t\t\t\t\tIClasspathEntry entry = classpath[classpath.length - 1];\r", "-\t\t\t\t\t\tif (entry.getContentKind() == ClasspathEntry.K_OUTPUT) {\r", "-\t\t\t\t\t\t\toutputLocation = entry.getPath();\r", "-\t\t\t\t\t\t\tIClasspathEntry[] copy = new IClasspathEntry[classpath.length - 1];\r", "-\t\t\t\t\t\t\tSystem.arraycopy(classpath, 0, copy, 0, copy.length);\r", "-\t\t\t\t\t\t\tclasspath = copy;\r", "-\t\t\t\t\t\t}\r", "+\t\t\t\t// extract out the output location\r", "+\t\t\t\tif (classpath != null && classpath.length > 0) {\r", "+\t\t\t\t\tIClasspathEntry entry = classpath[classpath.length - 1];\r", "+\t\t\t\t\tif (entry.getContentKind() == ClasspathEntry.K_OUTPUT) {\r", "+\t\t\t\t\t\toutputLocation = entry.getPath();\r", "+\t\t\t\t\t\tIClasspathEntry[] copy = new IClasspathEntry[classpath.length - 1];\r", "+\t\t\t\t\t\tSystem.arraycopy(classpath, 0, copy, 0, copy.length);\r", "+\t\t\t\t\t\tclasspath = copy;\r"]}], "num": 44478}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30ab8dd5b870f89244348c99b08a624f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "004f469c55c6cfa77f6a1c3831f26d1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocFlattener.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " public boolean visit(ArrayType node)", "signatureAfterChange": " public boolean visit(ArrayType node)", "diff": ["-\tnode.getComponentType().accept(this);", "-\tthis.buffer.append(\"[]\");//$NON-NLS-1$", "+\tif (node.getAST().apiLevel() < AST.JLS8) {", "+\t\tcomponentType(node).accept(this);", "+\t\tthis.buffer.append(\"[]\");//$NON-NLS-1$", "+\t} else {", "+\t\tnode.getElementType().accept(this);", "+\t\tfor (int i = 0;  i < node.getDimensions(); ++i) {", "+\t\t\t((ExtraDimension) node.dimensions().get(i)).accept(this);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "149c9d9782af5d0ad1255373186d693b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic ArrayType newArrayType(Type componentType)", "signatureAfterChange": " \tpublic ArrayType newArrayType(Type type)", "diff": ["-\tpublic ArrayType newArrayType(Type componentType) {", "-\t\tArrayType result = new ArrayType(this);", "-\t\tresult.setComponentType(componentType);", "+\tpublic ArrayType newArrayType(Type type) {", "+\t\tArrayType result;", "+\t\tif (this.apiLevel < AST.JLS8) {", "+\t\t\tresult = new ArrayType(this);", "+\t\t\tsetArrayComponentType(result, type);", "+\t\t\treturn result;", "+\t\t}", "+\t\tif (type.isArrayType()) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\tresult = new ArrayType(this);", "+\t\tresult.setElementType(type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4336a1e04e84cd7506851e807f8c6ffb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/CompilationUnitSorter.java", "commitBeforeChange": "c270ff57e75841606a99505b6ccf3e93c595f397", "commitAfterChange": "9d28ff91378f9bfbe6756ae0331a10fbb52d3dba", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic static void sort(ICompilationUnit[] compilationUnits, int[][] positions, Comparator comparator, IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic static void sort(IJavaElement[] workingCopies, int[][] positions, Comparator comparator, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\tpublic static void sort(ICompilationUnit[] compilationUnits, int[][] positions, Comparator comparator, IProgressMonitor monitor) throws CoreException {", "-\t\tif (comparator == null || compilationUnits == null) {", "-\t\t\treturn;", "+\tpublic static void sort(IJavaElement[] workingCopies, int[][] positions, Comparator comparator, IProgressMonitor monitor) throws JavaModelException {", "+\t\tif (comparator == null || workingCopies == null) {", "+\t\t\tthrow new IllegalArgumentException();", "-\t\tSortElementsOperation operation = new SortElementsOperation(compilationUnits , positions, comparator);", "-\t\tJavaCore.run(operation, monitor);", "+\t\tif (positions != null && positions.length != workingCopies.length) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\tSortElementsOperation operation = new SortElementsOperation(workingCopies , positions, comparator);", "+\t\ttry {", "+\t\t\tJavaCore.run(operation, monitor);", "+\t\t} catch(CoreException e) {", "+\t\t\tthrow new JavaModelException(e);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4875e43cb25464a82b81e0a53e89ccbe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableTypeImpl.java", "commitBeforeChange": "2e00795c3d6ef500d7af726d431f240f73b100c7", "commitAfterChange": "5f1e634c9572918b0d35dc54c9c744d979f875dc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t@Override \tpublic List<? extends TypeVariable> getTypeVariables()", "signatureAfterChange": " \t@Override \tpublic List<? extends TypeVariable> getTypeVariables()", "diff": ["-\t\tthrow new UnsupportedOperationException(\"NYI: org.eclipse.jdt.internal.compiler.apt.model.ExecutableTypeImpl.getTypeVariables()\"); //$NON-NLS-1$", "+\t\tArrayList<TypeVariable> list = new ArrayList<TypeVariable>();", "+\t\tTypeVariableBinding[] typeVariables = ((MethodBinding) this._binding).typeVariables();", "+\t\tif (typeVariables.length != 0) {", "+\t\t\tfor (TypeVariableBinding typeVariableBinding : typeVariables) {", "+\t\t\t\tlist.add((TypeVariable) Factory.newTypeMirror(typeVariableBinding));", "+\t\t\t}", "+\t\t}", "+\t\treturn Collections.unmodifiableList(list);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50c579a89299e54b11b61a786b309874", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/CompletionRequestor.java", "commitBeforeChange": "80080d1e96379be6c9c99ed84d6a5c9d17d9a3c6", "commitAfterChange": "ae07afa33c5a0a665d213062189be9e8f0f95c54", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic boolean isAllowingRequiredProposals(int completionProposalKind)", "signatureAfterChange": " \tpublic boolean isAllowingRequiredProposals(int proposalKind, int requiredProposalKind)", "diff": ["-\tpublic boolean isAllowingRequiredProposals(int completionProposalKind) {", "-\t\tif (completionProposalKind < CompletionProposal.FIRST_KIND", "-\t\t\t|| completionProposalKind > CompletionProposal.LAST_KIND) {", "-\t\t\t\tthrow new IllegalArgumentException(\"Unknown kind of completion proposal: \"+completionProposalKind); //$NON-NLS-1$", "+\tpublic boolean isAllowingRequiredProposals(int proposalKind, int requiredProposalKind) {", "+\t\tif (proposalKind < CompletionProposal.FIRST_KIND", "+\t\t\t|| proposalKind > CompletionProposal.LAST_KIND) {", "+\t\t\t\tthrow new IllegalArgumentException(\"Unknown kind of completion proposal: \"+requiredProposalKind); //$NON-NLS-1$", "+\t\t\t}", "+\t\t", "+\t\tif (requiredProposalKind < CompletionProposal.FIRST_KIND", "+\t\t\t|| requiredProposalKind > CompletionProposal.LAST_KIND) {", "+\t\t\t\tthrow new IllegalArgumentException(\"Unknown required kind of completion proposal: \"+requiredProposalKind); //$NON-NLS-1$", "-\t\treturn 0 != (this.requiredProposalAllowSet & (1 << completionProposalKind));", "+\t\tif (this.requiredProposalAllowSet == null) return false;", "+\t\t", "+\t\treturn 0 != (this.requiredProposalAllowSet[proposalKind] & (1 << requiredProposalKind));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cebf81bfc2f0a64afa2a368dcea047d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "252534b1e3dad1831e3abff323be8258609f736d", "commitAfterChange": "e2f59df4da4b0717730e8b0f95dd08cfbb696924", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, \t\t\tInvocationSite invocationSite, int inferenceLevel, boolean tiebreakingVarargsMethods)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, \t\t\tInvocationSite invocationSite, int inferenceLevel, boolean tiebreakingVarargsMethods)", "diff": ["-\t\tint compatibilityLevel;", "-\t\tif ((compatibilityLevel = parameterCompatibilityLevel18(method, arguments, tiebreakingVarargsMethods, invocationSite)) > NOT_COMPATIBLE) {", "-\t\t\tif (compatibilityLevel == VARARGS_COMPATIBLE) {", "-\t\t\t\tTypeBinding varargsElementType = method.parameters[method.parameters.length - 1].leafComponentType();", "-\t\t\t\tif (varargsElementType instanceof ReferenceBinding) {", "-\t\t\t\t\tif (!((ReferenceBinding) varargsElementType).canBeSeenBy(this)) {", "-\t\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.VarargsElementTypeNotVisible);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "+\t\tif ((parameterCompatibilityLevel18(method, arguments, tiebreakingVarargsMethods, invocationSite)) > NOT_COMPATIBLE) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "700191f8ffcfbed413999f5f430e7d89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/CompletionRequestor.java", "commitBeforeChange": "80080d1e96379be6c9c99ed84d6a5c9d17d9a3c6", "commitAfterChange": "ae07afa33c5a0a665d213062189be9e8f0f95c54", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void setAllowsRequiredProposals(int completionProposalKind, boolean allow)", "signatureAfterChange": " \tpublic void setAllowsRequiredProposals(int proposalKind, int requiredProposalKind, boolean allow)", "diff": ["-\tpublic void setAllowsRequiredProposals(int completionProposalKind, boolean allow) {", "-\t\tif (completionProposalKind < CompletionProposal.FIRST_KIND", "-\t\t\t|| completionProposalKind > CompletionProposal.LAST_KIND) {", "-\t\t\t\tthrow new IllegalArgumentException(\"Unknown kind of completion proposal: \"+completionProposalKind); //$NON-NLS-1$", "+\tpublic void setAllowsRequiredProposals(int proposalKind, int requiredProposalKind, boolean allow) {", "+\t\tif (proposalKind < CompletionProposal.FIRST_KIND", "+\t\t\t|| proposalKind > CompletionProposal.LAST_KIND) {", "+\t\t\t\tthrow new IllegalArgumentException(\"Unknown kind of completion proposal: \"+requiredProposalKind); //$NON-NLS-1$", "+\t\tif (requiredProposalKind < CompletionProposal.FIRST_KIND", "+\t\t\t|| requiredProposalKind > CompletionProposal.LAST_KIND) {", "+\t\t\t\tthrow new IllegalArgumentException(\"Unknown required kind of completion proposal: \"+requiredProposalKind); //$NON-NLS-1$", "+\t\t}", "+\t\t", "+\t\tif (this.requiredProposalAllowSet == null) {", "+\t\t\tthis.requiredProposalAllowSet = new int[CompletionProposal.LAST_KIND + 1];", "+\t\t}", "+\t\t", "-\t\t\tthis.requiredProposalAllowSet |= (1 << completionProposalKind);", "+\t\t\tthis.requiredProposalAllowSet[proposalKind] |= (1 << requiredProposalKind);", "-\t\t\tthis.requiredProposalAllowSet &= ~(1 << completionProposalKind);", "+\t\t\tthis.requiredProposalAllowSet[proposalKind] &= ~(1 << requiredProposalKind);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "711f82bfce26a622eb7c625892bb00f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "e72c40632f386c18405c37cebd5b66e2533b6c7e", "commitAfterChange": "b5bb35e79825da02c69101a63b609493af9d01dc", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "  public SearchMatch newLocalVariableReferenceMatch( \t\tIJavaElement enclosingElement, \t\tint accuracy, \t\tint offset,   \t\tint length, \t\tASTNode reference)", "signatureAfterChange": "  public SearchMatch newLocalVariableReferenceMatch( \t\tIJavaElement enclosingElement, \t\tint accuracy, \t\tint offset,   \t\tint length, \t\tASTNode reference)", "diff": ["+\tint bits = reference.bits;", "+\tboolean isCoupoundAssigned = (bits & ASTNode.IsCompoundAssignedMASK) != 0;", "+\tboolean isReadAccess = isCoupoundAssigned || (bits & ASTNode.IsStrictlyAssignedMASK) == 0;", "+\tboolean isWriteAccess = isCoupoundAssigned || (bits & ASTNode.IsStrictlyAssignedMASK) != 0;", "+\tboolean insideDocComment = (bits & ASTNode.InsideJavadoc) != 0;", "-\treturn new LocalVariableReferenceMatch(enclosingElement, accuracy, offset, length, participant, resource);", "+\treturn new LocalVariableReferenceMatch(enclosingElement, accuracy, offset, length, isReadAccess, isWriteAccess, insideDocComment, participant, resource);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77c9265fefd3758e9a7b092dd937c889", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic ArrayType newArrayType(Type elementType, int dimensions)", "signatureAfterChange": " \tpublic ArrayType newArrayType(Type elementType, int dimensions)", "diff": ["-\t\tArrayType result = new ArrayType(this);", "-\t\tresult.setComponentType(elementType);", "-\t\tfor (int i = 2; i <= dimensions; i++) {", "-\t\t\tresult = newArrayType(result);", "+\t\tArrayType result;", "+\t\tif (this.apiLevel < AST.JLS8) {", "+\t\t\tresult = new ArrayType(this);", "+\t\t\tsetArrayComponentType(result, elementType);", "+\t\t\tfor (int i = 2; i <= dimensions; i++) {", "+\t\t\t\tresult = newArrayType(result);", "+\t\t\t}", "+\t\t\treturn result;", "+\t\t}", "+\t\t//level >= JLS8", "+\t\tif (elementType.isArrayType()) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\tresult = new ArrayType(this);", "+\t\tresult.setElementType(elementType);", "+\t\t// index starting from 1 since there is a dimension already available by default.", "+\t\tfor (int i = 1; i < dimensions; ++i) {", "+\t\t\tresult.dimensions().add(new ExtraDimension(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bfd784498e10423f8f1739baebe518c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "3388256fa80bf40daffa9f485d2674986c875b82", "commitAfterChange": "7a73f29da5ea73cce41fc54b0fc3ad302149f476", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic ASTNode convert(boolean isInterface, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": "  \tpublic ASTNode convert(boolean isInterface, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "diff": ["-\t\t\tName thrownException;", "-\t\t\tint i = 0;", "-\t\t\tdo {", "-\t\t\t\tthrownException = convert(thrownExceptions[i++]);", "-\t\t\t\tmethodDecl.thrownExceptions().add(thrownException);", "-\t\t\t} while (i < thrownExceptionsLength);", "-\t\t\tmethodHeaderEnd = thrownException.getStartPosition() + thrownException.getLength();", "+\t\t\tif (this.ast.apiLevel() < AST.JLS8) {", "+\t\t\t\tName thrownException;", "+\t\t\t\tint i = 0;", "+\t\t\t\tdo {", "+\t\t\t\t\tthrownException = convert(thrownExceptions[i++]);", "+\t\t\t\t\tmethodDecl.thrownExceptions().add(thrownException);", "+\t\t\t\t} while (i < thrownExceptionsLength);", "+\t\t\t\tmethodHeaderEnd = thrownException.getStartPosition() + thrownException.getLength();\t\t\t\t", "+\t\t\t} else {", "+\t\t\t\tType thrownExceptionType;", "+\t\t\t\tint i = 0;", "+\t\t\t\tdo {", "+\t\t\t\t\tthrownExceptionType = convertType(thrownExceptions[i++]);", "+\t\t\t\t\tmethodDecl.thrownExceptionTypes().add(thrownExceptionType);", "+\t\t\t\t} while (i < thrownExceptionsLength);", "+\t\t\t\tmethodHeaderEnd = thrownExceptionType.getStartPosition() + thrownExceptionType.getLength();\t\t\t\t", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ea50aaf8be2b0f1337c0f9d02a49d6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "22c227d686d26416b5bac8312b280d00559f2a1f", "commitAfterChange": "5d72659fefa872e5d517acd0d145d5320aaef46b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprivate static Map getOptions(IJavaProject jproject)", "signatureAfterChange": " \tprivate static Map getOptions(IJavaProject jproject)", "diff": ["-\t\tMap options = _optionsMaps.get(jproject);", "+\t\tIProject project = jproject.getProject();", "+\t\tassert(null != project);", "+\t\tMap options = _optionsMaps.get(project);", "-\t\t\tIScopeContext projContext = new ProjectScope(jproject.getProject());", "-\t\t\tIScopeContext[] contexts = new IScopeContext[] { projContext };", "+\t\t\t_optionsMaps.put(project, options);", "+\t\t\t// Load project values into the map", "+\t\t\tProjectScope projScope = new ProjectScope(project);", "+\t\t\tIScopeContext[] contexts = new IScopeContext[] { projScope };", "-\t\t}", "-\t\telse {", "-\t\t\t// TODO: do we need to handle this case?", "-\t\t\treturn null;", "+\t\t\t// Add change listener for this project, so we can update the map later on", "+\t\t\tIEclipsePreferences projPrefs = projScope.getNode(AptPlugin.PLUGIN_ID);", "+\t\t\tChangeListener listener = new ChangeListener(project);", "+\t\t\tprojPrefs.addPreferenceChangeListener(listener);", "+\t\t\t((IEclipsePreferences)projPrefs.parent()).addNodeChangeListener(listener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96b2198caf3867bbf92ad6dae45fe369", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "0838ec8fffc1aa962e460d3079faac22718a3e16", "commitAfterChange": "b8b8ddf64dedf8c9c31f5a6a372768428e737f63", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "diff": ["-\t\tif (parameterCompatibilityLevel(method, arguments) > NOT_COMPATIBLE) {", "+\t\tint compatibilityLevel;", "+\t\tif ((compatibilityLevel = parameterCompatibilityLevel(method, arguments)) > NOT_COMPATIBLE) {", "+\t\t\tif (compatibilityLevel == VARARGS_COMPATIBLE) {", "+\t\t\t\tTypeBinding varargsElementType = method.parameters[method.parameters.length - 1].leafComponentType();", "+\t\t\t\tif (varargsElementType instanceof ReferenceBinding) {", "+\t\t\t\t\tif (!((ReferenceBinding) varargsElementType).canBeSeenBy(getCurrentPackage())) {", "+\t\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, ProblemReasons.VarargsElementTypeNotVisible);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a09398af27c656c8a05c3ff4187b3290", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "3091564ff71d95ca83672941f8a4ec3464344683", "commitAfterChange": "ac6c2726bc9770d7575dff83ad9611f141165280", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void matchLevelAndReportImportRef(ImportReference importRef, Binding binding, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchLevelAndReportImportRef(ImportReference importRef, Binding binding, MatchLocator locator) throws CoreException", "diff": ["+\t\t} else if (binding instanceof MethodBinding) {", "+\t\t\tMethodBinding methodBinding = (MethodBinding) binding;", "+\t\t\tif (!methodBinding.isStatic()) return;", "+\t\t\trefBinding = methodBinding.declaringClass;", "+\t\t// resolve and report", "+\t\tint level = resolveLevel(refBinding);", "+\t\tif (level >= INACCURATE_MATCH) {", "+\t\t\tmatchReportImportRef(", "+\t\t\t\timportRef, ", "+\t\t\t\tbinding, ", "+\t\t\t\tlocator.createImportHandle(importRef), ", "+\t\t\t\tlevel == ACCURATE_MATCH", "+\t\t\t\t\t? SearchMatch.A_ACCURATE", "+\t\t\t\t\t: SearchMatch.A_INACCURATE,", "+\t\t\t\tlocator);", "+\t\t}", "+\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a26716737f15caba37acf82f8a2ac19c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic boolean visit(ArrayType node)", "signatureAfterChange": " \tpublic boolean visit(ArrayType node)", "diff": ["-\t\tnode.getComponentType().accept(this);", "-\t\tvisitTypeAnnotations(node);", "-\t\tthis.buffer.append(\"[]\");//$NON-NLS-1$", "+\t\tif (node.getAST().apiLevel() < AST.JLS8) {", "+\t\t\tvisitComponentType(node);", "+\t\t\tthis.buffer.append(\"[]\");//$NON-NLS-1$", "+\t\t} else {", "+\t\t\tnode.getElementType().accept(this);", "+\t\t\tList dimensions = node.dimensions();", "+\t\t\tfor (int i = 0; i < dimensions.size() ; i++) {", "+\t\t\t\tExtraDimension aDimension = (ExtraDimension) dimensions.get(i);", "+\t\t\t\taDimension.accept(this);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9484a1f49f15d230cc3cfb4cd04c437", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "f26218f3521c8454774f76998a1d9edc04562b51", "commitAfterChange": "6bfd04bff95399f4eb302a926e97c5356b6b08f8", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "\r \tpublic ISourceRange mapSource(\r \t\tIType type,\r \t\tchar[] contents,\r \t\tIJavaElement searchedElement)", "signatureAfterChange": "\r \tpublic ISourceRange mapSource(\r \t\tIType type,\r \t\tchar[] contents,\r \t\tIJavaElement searchedElement)", "diff": ["+\t\t\tchar[] fullName = null;\r", "+\t\t\tthis.anonymousClassName = 0;\r", "-\t\t\t\tisAnonymousClass = ((IBinaryType) fType.getRawInfo()).isAnonymous();\r", "+\t\t\t\tIBinaryType binType = (IBinaryType) fType.getRawInfo();\r", "+\t\t\t\tisAnonymousClass = binType.isAnonymous();\r", "+\t\t\t\tfullName = binType.getName();\r", "+\t\t\t\tString eltName = fType.getElementName();\r", "+\t\t\t\teltName = eltName.substring(eltName.lastIndexOf('$') + 1, eltName.length());\r", "-\t\t\t\t\tthis.anonymousClassName = Integer.parseInt(fType.getElementName());\r", "+\t\t\t\t\tthis.anonymousClassName = Integer.parseInt(eltName);\r", "-\t\t\t\tparser = new SourceElementParser(this, factory, new CompilerOptions(JavaCore.getOptions()), true);\r", "-\t\t\t} else {\r", "-\t\t\t\tparser = new SourceElementParser(this, factory, new CompilerOptions(JavaCore.getOptions()));\r", "+\t\t\tboolean doFullParse = hasToRetrieveSourceRangesForLocalClass(fullName);\r", "+\t\t\tparser = new SourceElementParser(this, factory, new CompilerOptions(JavaCore.getOptions()), doFullParse);\r", "-\t\t\t\tisAnonymousClass);\r", "+\t\t\t\tdoFullParse);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d16fe52faf3c6d567da42e5684bd3c7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeInputFileObject.java", "commitBeforeChange": "7515dcbf0b2425523d6c7872cb12027c7c83661e", "commitAfterChange": "521b10019026729ea6f37775e2b59ebaf2f70e3f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t@Override \tpublic CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException", "signatureAfterChange": " \t@Override \tpublic CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException", "diff": ["-\t\t//TODO", "-\t\tthrow new UnsupportedOperationException(\"Not yet implemented\");", "+\t\t// Use buffer size at least as big as the default size of the", "+\t\t// BufferedReader returned by openReader(), to reduce redundant", "+\t\t// copying.  See BufferedReader.read1() for details.", "+\t\tchar[] buffer = new char[8192];", "+\t\tStringWriter w = new StringWriter();", "+\t\tReader r = openReader(ignoreEncodingErrors);", "+\t\ttry {", "+\t\t\tint read = -1;", "+\t\t\twhile ((read = r.read(buffer)) != -1) {", "+\t\t\t\tw.write(buffer, 0, read);", "+\t\t\t}", "+\t\t}", "+\t\tfinally {", "+\t\t\tr.close();", "+\t\t}", "+\t\treturn w.getBuffer();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d330e46b27ea0f164c009fddbd9e3444", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "994b7e2201a6044f122169d1a8922423e74571c5", "commitAfterChange": "8cef9873b63abd6271de2eb41584ebd6f6cb2fa0", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": " \tpublic boolean visit(TypeDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(TypeDeclaration node)", "diff": ["-\t\t\t\tgetScanner().readToToken(typeToken, node.getStartPosition());", "+\t\t\t\tint startPosition = node.getStartPosition();", "+\t\t\t\tif (apiLevel >= AST.JLS3) {", "+\t\t\t\t\tList modifiers = node.modifiers();", "+\t\t\t\t\tfinal int size = modifiers.size();", "+\t\t\t\t\tif (size != 0) {", "+\t\t\t\t\t\tASTNode modifierNode = (ASTNode) modifiers.get(size - 1);", "+\t\t\t\t\t\tstartPosition = modifierNode.getStartPosition() + modifierNode.getLength();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tgetScanner().readToToken(typeToken, startPosition);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eeb8941ed82c1ea62709b544fa4238af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTestsRequestor2.java", "commitBeforeChange": "43376e039f3b408b15eaff059a7746b22171766c", "commitAfterChange": "6ce150229a43c564ac0ba19e83d7a18e9ed0cfed", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t \tprotected int compare(CompletionProposal proposal1, CompletionProposal proposal2)", "signatureAfterChange": " \t \tprotected int compare(CompletionProposal proposal1, CompletionProposal proposal2)", "diff": ["-\t\t\treturn name1.compareTo(name2);", "+\t\t\tint nameDif = name1.compareTo(name2);", "+\t\t\tif(nameDif != 0) {", "+\t\t\t\treturn nameDif;", "+\t\t\t} else {", "+\t\t\t\tint kindDif = proposal1.getKind() - proposal2.getKind();", "+\t\t\t\tif(kindDif != 0) {", "+\t\t\t\t\treturn kindDif;", "+\t\t\t\t} else {", "+\t\t\t\t\tString completion1 = new String(proposal1.getCompletion());", "+\t\t\t\t\tString completion2 = new String(proposal2.getCompletion());", "+\t\t\t\t\treturn completion1.compareTo(completion2);", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 41882}
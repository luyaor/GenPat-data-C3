{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "323817ba649139fe887e7b879d7075a5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fe9f6e8ab07b0d91019eac68dc3913a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/RunFormatterTests.java", "commitBeforeChange": "45b137a4bdfd0a4d28126aeb67f27b127e7f1dfd", "commitAfterChange": "15b0c36cf52521c62289eac551e0070a05f02d1e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": " \tpublic static Test suite()", "diff": ["+\t}", "+\tpublic static Test suite() {", "+\t\tTestSuite ts = new TestSuite(RunFormatterTests.class.getName());", "+", "+\t\tClass[] testClasses = getAllTestClasses();", "+\t\tfor (int i = 0; i < testClasses.length; i++) {", "+\t\t\tClass testClass = testClasses[i];", "+", "+\t\t\t// call the suite() method and add the resulting suite to the suite", "+\t\t\ttry {", "+\t\t\t\tMethod suiteMethod = testClass.getDeclaredMethod(\"suite\", new Class[0]); //$NON-NLS-1$", "+\t\t\t\tTest suite = (Test)suiteMethod.invoke(null, new Object[0]);", "+\t\t\t\tts.addTest(suite);", "+\t\t\t} catch (IllegalAccessException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t} catch (InvocationTargetException e) {", "+\t\t\t\te.getTargetException().printStackTrace();", "+\t\t\t} catch (NoSuchMethodException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t}", "+\t\t}", "+\t\treturn ts;", "+\t}", "-}", "-public static Test suite() {", "-\tTestSuite suite = new TestSuite(RunFormatterTests.class.getName());", "-\tsuite.addTest(FormatterRegressionTests.suite());", "-\treturn suite;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "480d6fa2dffec93bb97ad8d2cbae7df9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest.java", "commitBeforeChange": "6defd2b79520062f5150164ded77c2d030acc168", "commitAfterChange": "d351702f3561d64a024c15ffbed0faad48ce2838", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic static Test suite()", "signatureAfterChange": "  \tpublic static Test suite()", "diff": ["-\t", "-\t\t\t// call the suite() method and add the resulting suite to the suite", "-\t\t\ttry {", "-\t\t\t\tMethod suiteMethod = testClass.getDeclaredMethod(\"suite\", new Class[0]); //$NON-NLS-1$", "-\t\t\t\tTest suite = (Test)suiteMethod.invoke(null, new Object[0]);", "-\t\t\t\tts.addTest(suite);", "-\t\t\t} catch (IllegalAccessException e) {", "-\t\t\t\te.printStackTrace();", "-\t\t\t} catch (InvocationTargetException e) {", "-\t\t\t\te.getTargetException().printStackTrace();", "-\t\t\t} catch (NoSuchMethodException e) {", "-\t\t\t\te.printStackTrace();", "-\t\t\t}", "+\t\t\tTest suite = buildTestSuite(testClass);", "+\t\t\tts.addTest(suite);", "+\t\t}", "+\t\tint complianceLevels = AbstractCompilerTest.getPossibleComplianceLevels();", "+\t\tif ((complianceLevels & AbstractCompilerTest.F_1_3) != 0) {", "+\t\t\tTest suite = buildTestSuite(JavadocTest_1_3.class);", "+\t\t\tts.addTest(new RegressionTestSetup(suite, COMPLIANCE_1_3));", "+\t\t}", "+\t\tif ((complianceLevels & AbstractCompilerTest.F_1_4) != 0) {", "+\t\t\tTest suite = buildTestSuite(JavadocTest_1_4.class);", "+\t\t\tts.addTest(new RegressionTestSetup(suite, COMPLIANCE_1_4));", "+\t\t}", "+\t\tif ((complianceLevels & AbstractCompilerTest.F_1_5) != 0) {", "+\t\t\tTest suite = buildTestSuite(JavadocTest_1_5.class);", "+\t\t\tts.addTest(new RegressionTestSetup(suite, COMPLIANCE_1_5));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9c71bea1a8d971feb2dac0d4c474969", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/workspace/Converter/junit/framework/TestSuite.java", "commitBeforeChange": "5f14954289dcfe3aa64cd723a9ea9807dea33e05", "commitAfterChange": "4b4449dde49cdcaed9ae00d1ac057ecfeb8d8c23", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate void addTestMethod(Method m, Vector names, Constructor constructor)", "signatureAfterChange": "  \tprivate void addTestMethod(Method m, Vector names, Class theClass)", "diff": ["-\tprivate void addTestMethod(Method m, Vector names, Constructor constructor) {", "+\tprivate void addTestMethod(Method m, Vector names, Class theClass) {", "-\t\tif (names.contains(name)) ", "+\t\tif (names.contains(name))", "-\t\tif (isPublicTestMethod(m)) {", "-\t\t\tnames.addElement(name);", "-", "-\t\t\tObject[] args= new Object[]{name};", "-\t\t\ttry {", "-\t\t\t\taddTest((Test)constructor.newInstance(args));", "-\t\t\t} catch (InstantiationException e) {", "-\t\t\t\taddTest(warning(\"Cannot instantiate test case: \"+name+\" (\"+exceptionToString(e)+\")\"));", "-\t\t\t} catch (InvocationTargetException e) {", "-\t\t\t\taddTest(warning(\"Exception in constructor: \"+name+\" (\"+exceptionToString(e.getTargetException())+\")\"));", "-\t\t\t} catch (IllegalAccessException e) {", "-\t\t\t\taddTest(warning(\"Cannot access test case: \"+name+\" (\"+exceptionToString(e)+\")\"));", "-\t\t\t}", "-", "-\t\t} else { // almost a test method", "-\t\t\tif (isTestMethod(m)) ", "+\t\tif (! isPublicTestMethod(m)) {", "+\t\t\tif (isTestMethod(m))", "+\t\t\treturn;", "+\t\tnames.addElement(name);", "+\t\taddTest(createTest(theClass, name));"]}], "num": 40654}
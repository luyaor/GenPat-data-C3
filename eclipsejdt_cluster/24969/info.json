{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c4de4b60c1b4d84256e6e609322d176", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "110786894a567bfd482aadb22cc6b31e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java", "commitBeforeChange": "f6209e22cd3c6ef55e09617e84e4b61166bfdc34", "commitAfterChange": "e3b61331087882f47093048d6298d97548b68615", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic String toString(int tab)", "signatureAfterChange": "  \tpublic StringBuffer printStatement(int tab, StringBuffer output)", "diff": ["+\tpublic StringBuffer printStatement(int tab, StringBuffer output) {", "+", "+\t\tprintIndent(tab, output).append(\"for (\"); //$NON-NLS-1$", "+\t\t//inits", "+\t\tif (initializations != null) {", "+\t\t\tfor (int i = 0; i < initializations.length; i++) {", "+\t\t\t\t//nice only with expressions", "+\t\t\t\tif (i > 0) output.append(\", \"); //$NON-NLS-1$", "+\t\t\t\tinitializations[i].print(0, output);", "+\t\t\t}", "+\t\t}", "+\t\toutput.append(\"; \"); //$NON-NLS-1$", "+\t\t//cond", "+\t\tif (condition != null) condition.printExpression(0, output);", "+\t\toutput.append(\"; \"); //$NON-NLS-1$", "+\t\t//updates", "+\t\tif (increments != null) {", "+\t\t\tfor (int i = 0; i < increments.length; i++) {", "+\t\t\t\tif (i > 0) output.append(\", \"); //$NON-NLS-1$", "+\t\t\t\tincrements[i].print(0, output);", "+\t\t\t}", "+\t\t}; ", "+\t\toutput.append(\") \"); //$NON-NLS-1$", "+\t\t//block", "+\t\tif (action == null)", "+\t\t\toutput.append(';');", "+\t\telse {", "+\t\t\toutput.append('\\n');", "+\t\t\taction.printStatement(tab + 1, output); //$NON-NLS-1$", "+\t\t}", "+\t\treturn output.append(';');", "+\t}", "-", "-\tpublic String toString(int tab) {", "-", "-\t\tString s = tabString(tab) + \"for (\"; //$NON-NLS-1$", "-\t\tif (!neededScope)", "-\t\t\ts = s + \" //--NO upperscope scope needed\\n\" + tabString(tab) + \"     \";\t//$NON-NLS-2$ //$NON-NLS-1$", "-\t\t//inits", "-\t\tif (initializations != null) {", "-\t\t\tfor (int i = 0; i < initializations.length; i++) {", "-\t\t\t\t//nice only with expressions", "-\t\t\t\ts = s + initializations[i].toString(0);", "-\t\t\t\tif (i != (initializations.length - 1))", "-\t\t\t\t\ts = s + \" , \"; //$NON-NLS-1$", "-\t\t\t}", "-\t\t}; ", "-\t\ts = s + \"; \"; //$NON-NLS-1$", "-\t\t//cond", "-\t\tif (condition != null)", "-\t\t\ts = s + condition.toStringExpression();", "-\t\ts = s + \"; \"; //$NON-NLS-1$", "-\t\t//updates", "-\t\tif (increments != null) {", "-\t\t\tfor (int i = 0; i < increments.length; i++) {", "-\t\t\t\t//nice only with expressions", "-\t\t\t\ts = s + increments[i].toString(0);", "-\t\t\t\tif (i != (increments.length - 1))", "-\t\t\t\t\ts = s + \" , \"; //$NON-NLS-1$", "-\t\t\t}", "-\t\t}; ", "-\t\ts = s + \") \"; //$NON-NLS-1$", "-\t\t//block", "-\t\tif (action == null)", "-\t\t\ts = s + \"{}\"; //$NON-NLS-1$", "-\t\telse", "-\t\t\ts = s + \"\\n\" + action.toString(tab + 1); //$NON-NLS-1$", "-\t\treturn s;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3071599ddf9087667aa21ed94af594e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java", "commitBeforeChange": "f6209e22cd3c6ef55e09617e84e4b61166bfdc34", "commitAfterChange": "e3b61331087882f47093048d6298d97548b68615", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic String toString(int tab)", "signatureAfterChange": "  \tpublic StringBuffer printStatement(int indent, StringBuffer output)", "diff": ["+\tpublic StringBuffer printStatement(int indent, StringBuffer output) {", "+", "+\t\tprintIndent(indent, output).append(\"switch (\"); //$NON-NLS-1$", "+\t\ttestExpression.printExpression(0, output).append(\") {\"); //$NON-NLS-1$", "+\t\tif (statements != null) {", "+\t\t\tfor (int i = 0; i < statements.length; i++) {", "+\t\t\t\toutput.append('\\n');", "+\t\t\t\tif (statements[i] instanceof CaseStatement) {", "+\t\t\t\t\tstatements[i].printStatement(indent, output);", "+\t\t\t\t} else {", "+\t\t\t\t\tstatements[i].printStatement(indent+2, output);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\toutput.append(\"\\n\"); //$NON-NLS-1$", "+\t\treturn printIndent(indent, output).append('}');", "+\t}", "-", "-\tpublic String toString(int tab) {", "-", "-\t\tString inFront, s = tabString(tab);", "-\t\tinFront = s;", "-\t\ts = s + \"switch (\" + testExpression.toStringExpression() + \") \"; //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tif (statements == null) {", "-\t\t\ts = s + \"{}\"; //$NON-NLS-1$", "-\t\t\treturn s;", "-\t\t} else", "-\t\t\ts = s + \"{\"; //$NON-NLS-1$", "-\t\t\ts = s", "-\t\t\t\t\t+ (explicitDeclarations != 0", "-\t\t\t\t\t\t? \"// ---scope needed for \" //$NON-NLS-1$", "-\t\t\t\t\t\t\t+ String.valueOf(explicitDeclarations)", "-\t\t\t\t\t\t\t+ \" locals------------ \\n\"//$NON-NLS-1$", "-\t\t\t\t\t\t: \"// ---NO scope needed------ \\n\"); //$NON-NLS-1$", "-", "-\t\tint i = 0;", "-\t\tString tabulation = \"  \"; //$NON-NLS-1$", "-\t\ttry {", "-\t\t\twhile (true) {", "-\t\t\t\t//use instanceof in order not to polluate classes with behavior only needed for printing purpose.", "-\t\t\t\tif (statements[i] instanceof Expression)", "-\t\t\t\t\ts = s + \"\\n\" + inFront + tabulation; //$NON-NLS-1$", "-\t\t\t\tif (statements[i] instanceof BreakStatement)", "-\t\t\t\t\ts = s + statements[i].toString(0);", "-\t\t\t\telse", "-\t\t\t\t\ts = s + \"\\n\" + statements[i].toString(tab + 2); //$NON-NLS-1$", "-\t\t\t\t//=============\t", "-\t\t\t\tif (statements[i] instanceof CaseStatement) {", "-\t\t\t\t\ti++;", "-\t\t\t\t\twhile (!(statements[i] instanceof CaseStatement)) {", "-\t\t\t\t\t\tif ((statements[i] instanceof Expression) || (statements[i] instanceof BreakStatement))", "-\t\t\t\t\t\t\ts = s + statements[i].toString(0) + \" ; \"; //$NON-NLS-1$", "-\t\t\t\t\t\telse", "-\t\t\t\t\t\t\ts = s + \"\\n\" + statements[i].toString(tab + 6) + \" ; \"; //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\ti++;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\ts = s + \" ;\"; //$NON-NLS-1$", "-\t\t\t\t\ti++;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (IndexOutOfBoundsException e) {", "-\t\t};", "-\t\ts = s + \"}\"; //$NON-NLS-1$", "-\t\treturn s;"]}], "num": 24969}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "327f3f1d9c9b5279461b7986c00dc766", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cd448c28d7d65c85d678f4395864c31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "ac2c3539b72e65a4a4e0b168769da151e63c5ff1", "commitAfterChange": "014710437062a15282800b8efb747a8973068ba8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic CompilationUnit convert(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, char[] source)", "signatureAfterChange": " \t \tpublic CompilationUnit convert(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, char[] source)", "diff": ["+\t", "-\t\tscanner.setSource(source);", "+\t\tthis.scanner.setSource(source);", "+\t\tthis.scanner.lineEnds = unit.compilationResult().lineSeparatorPositions;", "-\t\tif (resolveBindings) {", "+\t\tif (this.resolveBindings) {", "+\t\t// Parse comments", "+\t\tint[][] comments = unit.comments;", "+\t\tif (comments != null && this.insideComments) {", "+\t\t\t// Build comment table", "+\t\t\tthis.commentsTable = new Comment[comments.length];", "+\t\t\tint nbr = 0;", "+\t\t\tfor (int i = 0; i < comments.length; i++) {", "+\t\t\t\tComment comment = createComment(comments[i]);", "+\t\t\t\tif (comment != null) {", "+\t\t\t\t\tcomment.setAlternateRoot(compilationUnit);", "+\t\t\t\t\tthis.commentsTable[nbr++] = comment;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// Resize table if  necessary", "+\t\t\tif (nbr<comments.length) {", "+\t\t\t\tComment[] newCommentsTable = new Comment[nbr];", "+\t\t\t\tSystem.arraycopy(this.commentsTable, 0, newCommentsTable, 0, nbr);", "+\t\t\t\tthis.commentsTable = newCommentsTable;", "+\t\t\t}", "+\t\t\tcompilationUnit.setCommentTable(this.commentsTable);", "+\t\t}", "+", "-\t\tif (resolveBindings) {", "+\t\tif (this.resolveBindings) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bf5f55f754d7e35e4c6305b2d5d6e13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "9318beb1001c9d1a97d62cd25a1df5140d1d4221", "commitAfterChange": "fbb5cd8172f148996d50fb2879a48666d0d58444", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \t \tprivate void removeFromProjectClasspath( IJavaProject jp, IFolder folder, IProgressMonitor progressMonitor ) \t\tthrows JavaModelException", "signatureAfterChange": " \t \tprivate void removeFromProjectClasspath( IJavaProject jp, IFolder folder, IProgressMonitor progressMonitor ) \t\tthrows JavaModelException", "diff": ["-\t\tIClasspathEntry folderClasspathEntry = ", "-\t\t\tJavaCore.newSourceEntry(folder.getFullPath());\t\t", "+", "+\t\tIPath workspaceRelativePath = folder.getFullPath();", "+\t\tIPath projectRelativePath = folder.getProjectRelativePath().addTrailingSeparator();", "+", "-\t\t// remove entries that are for the specified folder.  Account for ", "-\t\t// multiple entries.", "+\t\t// remove entries that are for the specified folder, account for ", "+\t\t// multiple entries, and clean up any exclusion entries to the ", "+\t\t// folder being removed.", "-\t\t\tif (! cp[i].getPath().equals(folderClasspathEntry.getPath()) )", "+\t\t\tif (! cp[i].getPath().equals( workspaceRelativePath ) )", "-\t\t\t\tcp[j] = cp[i];", "+\t\t\t", "+\t\t\t\t// see if we added the generated source dir as an exclusion pattern to some other entry", "+\t\t\t\tIPath[] oldExclusions = cp[i].getExclusionPatterns();", "+\t\t\t\tint m = 0;", "+\t\t\t\tfor ( int k = 0; k < oldExclusions.length; k++ )", "+\t\t\t\t{", "+\t\t\t\t\tif ( !oldExclusions[k].equals( projectRelativePath ) )", "+\t\t\t\t\t{", "+\t\t\t\t\t\toldExclusions[m] = oldExclusions[k];", "+\t\t\t\t\t\tm++;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif ( oldExclusions.length == m )", "+\t\t\t\t{", "+\t\t\t\t\t// no exclusions changed, so we do't need to create a new entry", "+\t\t\t\t\tcp[j] = cp[i];", "+\t\t\t\t}", "+\t\t\t\telse", "+\t\t\t\t{", "+\t\t\t\t\t// we've removed some exclusion, so create a new entry", "+\t\t\t\t\tIPath[] newExclusions = new IPath[ m ];", "+\t\t\t\t\tSystem.arraycopy( oldExclusions, 0, newExclusions, 0, m );", "+\t\t\t\t\tcp[j] = JavaCore.newSourceEntry( cp[i].getPath(), cp[i].getInclusionPatterns(), newExclusions, cp[i].getOutputLocation(), cp[i].getExtraAttributes() );", "+\t\t\t\t}", "+\t\t\t\t", "-\t\t// now copy into new array", "+\t\t// now copy updated classpath entries into new array"]}], "num": 69561}
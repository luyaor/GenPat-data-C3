{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c16388adddc469dc5c7568d87b26d28", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e5d4c2711fba9b85df08cdc4e63e04b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "c4fa4d272fd0c5fb7e1db44c8cef0ea47f3df504", "commitAfterChange": "ead0ac8b76ebb49296393f52adae3ef70f089242", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": " public boolean isEquivalentTo(TypeBinding otherType)", "diff": ["+\t\tcase Binding.PARAMETERIZED_TYPE:", "+\t\t/* With the hybrid 1.4/1.5+ projects modes, while establishing type equivalence, we need to", "+\t       be prepared for a type such as Map appearing in one of three forms: As (a) a ParameterizedTypeBinding ", "+\t       e.g Map<String, String>, (b) as RawTypeBinding Map#RAW and finally (c) as a BinaryTypeBinding ", "+\t       When the usage of a type lacks type parameters, whether we land up with the raw form or not depends", "+\t       on whether the underlying type was \"seen to be\" a generic type in the particular build environment or", "+\t       not. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=186565 && https://bugs.eclipse.org/bugs/show_bug.cgi?id=328827 ", "+\t\t*/ "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "956082b01502068c04f294f86213d61d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "de85d73a10e0280a45c9d9fcbbd2b35068e06127", "commitAfterChange": "df9615ffbbc7235a218c4e9aa88ba85075714875", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, InferenceContext inferenceContext, int constraint)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, InferenceContext inferenceContext, int constraint)", "diff": ["+\t\t\tcase Binding.POLY_TYPE: // cannot steer inference, only learn from it."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbf62fddf85f27eaaf1819d6a17fea52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tIBinding getBinding(org.eclipse.jdt.internal.compiler.lookup.Binding binding)", "signatureAfterChange": " \t \tIBinding getBinding(org.eclipse.jdt.internal.compiler.lookup.Binding binding)", "diff": ["+\t\t\tcase Binding.BASE_TYPE:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd6dca9fb55b50de4e092af632b6eece", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "ea1fe8ed052821b2b1ca5a7ad0079411db5ede64", "commitAfterChange": "a2a0577109951f3af96b6ee7e6f23d457b52d52d", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic IPackageBinding getPackage()", "signatureAfterChange": " \tpublic IPackageBinding getPackage()", "diff": ["+\t\t\tcase Binding.INTERSECTION_CAST_TYPE:"]}], "num": 61203}
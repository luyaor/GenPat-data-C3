{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3df2d015a2a8e5651eeb1fada0840dd2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4574fcc83ec2275759d5f170b3cb6567", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java", "commitBeforeChange": "d74cc8c06b35228791394046e6c7725558d6ea07", "commitAfterChange": "cbd48da7303f20fe27c3bb57f06cce9208a1cb77", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected boolean computeChildren(OpenableElementInfo info, Map newElements) throws JavaModelException", "signatureAfterChange": " \tprotected boolean computeChildren(OpenableElementInfo info, Map newElements) throws JavaModelException", "diff": ["-\t\t\t\t\tentryName= entryName.substring(0, entryName.length() - 1);", "-\t\t\t\t\tString[] names = CharOperation.toStrings(CharOperation.splitOn('/', entryName.toCharArray()));", "-\t\t\t\t\tint length = names.length;", "-\t", "-\t\t\t\t\t// add the package name & all of its parent packages", "-\t\t\t\t\twhile (true) {", "-\t\t\t\t\t\t// extract the package name", "-\t\t\t\t\t\tif (packageFragToTypes.containsKey(names)) break;", "-\t\t\t\t\t\tpackageFragToTypes.put(names, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tif (--length <= 0) break;", "-\t\t\t\t\t\tSystem.arraycopy(names, 0, names = new String[length], 0, length);", "-\t\t\t\t\t}", "+\t\t\t\t\tinitPackageFragToTypes(packageFragToTypes, entryName, entryName.length()-1);", "-\t\t\t\t\tString[] names;", "-\t\t\t\t\tString fileName;", "-\t\t\t\t\tif (lastSeparator != -1) { //not in the default package", "-\t\t\t\t\t\tfileName= entryName.substring(lastSeparator + 1);", "-\t\t\t\t\t\tchar[] packageName = new char[lastSeparator];", "-\t\t\t\t\t\tentryName.getChars(0, lastSeparator, packageName, 0);", "-\t\t\t\t\t\tnames = CharOperation.toStrings(CharOperation.splitOn('/', packageName));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tfileName = entryName;", "-\t\t\t\t\t\tnames =  CharOperation.NO_STRINGS;", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\t// add the package name & all of its parent packages", "-\t\t\t\t\tString[] currentNames = names;", "-\t\t\t\t\tint length = currentNames.length;", "-\t\t\t\t\twhile (true) {", "-\t\t\t\t\t\t// extract the package name", "-\t\t\t\t\t\tif (packageFragToTypes.containsKey(currentNames)) break;", "-\t\t\t\t\t\tpackageFragToTypes.put(currentNames, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tif (--length <= 0) break;", "-\t\t\t\t\t\tSystem.arraycopy(currentNames, 0, currentNames = new String[length], 0, length);", "-\t\t\t\t\t}", "+\t\t\t\t\tString fileName= entryName.substring(lastSeparator + 1);", "+\t\t\t\t\tString[] pkgName = initPackageFragToTypes(packageFragToTypes, entryName, lastSeparator);", "+", "-\t\t\t\t\tArrayList[] children = (ArrayList[]) packageFragToTypes.get(names);", "+\t\t\t\t\tArrayList[] children = (ArrayList[]) packageFragToTypes.get(pkgName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ffc752137be0ae9af497d4381fbdfb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "eedafe9176d5ca60193623550822839844fd4aae", "commitAfterChange": "16a0328cb89c7e4d508e8edfc85e1af4879c13c7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic static IClasspathEntry elementDecode(Element element, IJavaProject project)", "signatureAfterChange": " \t \tpublic static IClasspathEntry elementDecode(Element element, IJavaProject project)", "diff": ["-\t\tString inclusion = element.getAttribute(TAG_INCLUDING);", "-\t\tIPath[] inclusionPatterns = INCLUDE_ALL;", "-\t\tif (!inclusion.equals(\"\")) { //$NON-NLS-1$ ", "-\t\t\tchar[][] patterns = CharOperation.splitOn('|', inclusion.toCharArray());", "-\t\t\tint patternCount;", "-\t\t\tif ((patternCount  = patterns.length) > 0) {", "-\t\t\t\tinclusionPatterns = new IPath[patternCount];", "-\t\t\t\tfor (int j = 0; j < patterns.length; j++){", "-\t\t\t\t\tinclusionPatterns[j] = new Path(new String(patterns[j]));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-", "+\t\tIPath[] inclusionPatterns = decodePatterns(element, TAG_INCLUDING);", "+\t\tif (inclusionPatterns == null) inclusionPatterns = INCLUDE_ALL;", "+\t\t", "-\t\tString exclusion = element.getAttribute(TAG_EXCLUDING);", "-\t\tIPath[] exclusionPatterns = EXCLUDE_NONE;", "-\t\tif (!exclusion.equals(\"\")) { //$NON-NLS-1$ ", "-\t\t\tchar[][] patterns = CharOperation.splitOn('|', exclusion.toCharArray());", "-\t\t\tint patternCount;", "-\t\t\tif ((patternCount  = patterns.length) > 0) {", "-\t\t\t\texclusionPatterns = new IPath[patternCount];", "-\t\t\t\tfor (int j = 0; j < patterns.length; j++){", "-\t\t\t\t\texclusionPatterns[j] = new Path(new String(patterns[j]));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\tIPath[] exclusionPatterns = decodePatterns(element, TAG_EXCLUDING);", "+\t\tif (exclusionPatterns == null) exclusionPatterns = EXCLUDE_NONE;", "+\t\t", "-\t\t\t\treturn JavaCore.newProjectEntry(path, isExported);", "+\t\t\t\treturn JavaCore.newProjectEntry(", "+\t\t\t\t\t\t\t\t\t\t\t\tpath, ", "+\t\t\t\t\t\t\t\t\t\t\t\tinclusionPatterns,", "+\t\t\t\t\t\t\t\t\t\t\t\texclusionPatterns,", "+\t\t\t\t\t\t\t\t\t\t\t\tisExported);", "+\t\t\t\t\t\t\t\t\t\t\t\tinclusionPatterns,", "+\t\t\t\t\t\t\t\t\t\t\t\texclusionPatterns,", "-\t\t\t\t\t\treturn JavaCore.newProjectEntry(path, isExported);", "+\t\t\t\t\t\treturn JavaCore.newProjectEntry(", "+\t\t\t\t\t\t\t\t\t\t\t\tpath, ", "+\t\t\t\t\t\t\t\t\t\t\t\tinclusionPatterns,", "+\t\t\t\t\t\t\t\t\t\t\t\texclusionPatterns,", "+\t\t\t\t\t\t\t\t\t\t\t\tisExported);", "+\t\t\t\t\t\tinclusionPatterns,", "+\t\t\t\t\t\texclusionPatterns,", "+\t\t\t\t\t\tinclusionPatterns,", "+\t\t\t\t\t\texclusionPatterns,", "-\t\t\t\t\t\tClasspathEntry.INCLUDE_ALL, ", "-\t\t\t\t\t\tClasspathEntry.EXCLUDE_NONE, ", "+\t\t\t\t\t\tINCLUDE_ALL, ", "+\t\t\t\t\t\tEXCLUDE_NONE, ", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb523df4b62f67dfd731e9fe39166fd0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchParticipant.java", "commitBeforeChange": "a9c68df97efd734f3ed326f5e99e4d21e6054bec", "commitAfterChange": "af2f21c145913c8a7ccf22989ee905c5f5c7dd0d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void locateMatches(SearchDocument[] indexMatches, SearchPattern pattern, \t\t\tIJavaSearchScope scope, SearchRequestor requestor, IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic void locateMatches(SearchDocument[] indexMatches, SearchPattern pattern, \t\t\tIJavaSearchScope scope, SearchRequestor requestor, IProgressMonitor monitor) throws CoreException", "diff": ["-\t\t\t\tthis.workingCopies,", "-\t\t// working copies take precedence over corresponding compilation units", "-\t\tHashMap workingCopyDocuments = workingCopiesThatCanSeeFocus(pattern.focus, pattern.isPolymorphicSearch());", "-\t\tSearchDocument[] matches = null;", "-\t\tint length = indexMatches.length;", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tSearchDocument searchDocument = indexMatches[i];", "-\t\t\tif (searchDocument.getParticipant() == this) {", "-\t\t\t\tSearchDocument workingCopyDocument = (SearchDocument) workingCopyDocuments.remove(searchDocument.getPath());", "-\t\t\t\tif (workingCopyDocument != null) {", "-\t\t\t\t\tif (matches == null) {", "-\t\t\t\t\t\tSystem.arraycopy(indexMatches, 0, matches = new SearchDocument[length], 0, length);", "-\t\t\t\t\t}", "-\t\t\t\t\tmatches[i] = workingCopyDocument;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (matches == null) { // no working copy", "-\t\t\tmatches = indexMatches;", "-\t\t}", "-\t\tint remainingWorkingCopiesSize = workingCopyDocuments.size();", "-\t\tif (remainingWorkingCopiesSize != 0) {", "-\t\t\tSystem.arraycopy(matches, 0, matches = new SearchDocument[length+remainingWorkingCopiesSize], 0, length);", "-\t\t\tIterator iterator = workingCopyDocuments.values().iterator();", "-\t\t\tint index = length;", "-\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\tmatches[index++] = (SearchDocument) iterator.next();", "-\t\t\t}", "-\t\t}", "-", "-\t\tmatchLocator.locateMatches(matches);", "+\t\tmatchLocator.locateMatches(indexMatches);"]}], "num": 3438}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9edcde840f1b21359bd0def10e012b8f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "580df158067d223e8cd4d978755de716", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\tif (currentType == null) return null;", "+\t\t\t\tif (currentType == null) return currentType;", "-\t\tboolean argHasError = false; // typeChecks all arguments", "+\t\tboolean argHasError = scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_5;", "+\t\t\tif (this.arguments != null) { // still attempt to resolve arguments", "+\t\t\t\tfor (int i = 0, max = this.arguments.length; i < max; i++) {", "+\t\t\t\t\tthis.arguments[i].resolveType(scope);", "+\t\t\t\t}", "+\t\t\t}\t\t\t\t\t", "-\tif (this.resolvedType == null)", "+\tif (this.resolvedType == null || !this.resolvedType.isValidBinding()) {", "+\t}", "-\t\tif (binding.declaringClass == null)", "+\t\tif (binding.declaringClass == null) {", "+\t\t}", "+\t\tif (this.type != null && !this.type.resolvedType.isValidBinding()) {", "+\t\t\treturn null;", "+\t\t}", "+\tif ((this.binding.tagBits & TagBits.HasMissingType) != 0) {", "+\t\tscope.problemReporter().missingTypeInConstructor(this, this.binding);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d99d72ec3877930c140cea393fe5ed1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t// resolve type arguments (for generic constructor call)", "+\t\tif (this.typeArguments != null) {", "+\t\t\tint length = this.typeArguments.length;", "+\t\t\tboolean argHasError = false; // typeChecks all arguments", "+\t\t\tthis.genericTypeArguments = new TypeBinding[length];", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tif ((this.genericTypeArguments[i] = this.typeArguments[i].resolveType(scope)) == null) {", "+\t\t\t\t\targHasError = true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (argHasError) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tif ((this.resolvedType.tagBits & TagBits.HasWildcard) != 0) {", "+\t\t    scope.problemReporter().cannotInstantiateWithWildcards(type, (ParameterizedTypeBinding)this.resolvedType);", "+\t\t    return this.resolvedType;", "+\t\t}", "-\t\tif (!(binding = scope.getConstructor(allocationType, argumentTypes, this))", "-\t\t\t.isValidBinding()) {", "+\t\tif (!(binding = scope.getConstructor(allocationType, argumentTypes, this)).isValidBinding()) {", "-", "-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0; i < arguments.length; i++) {", "-\t\t\t\targuments[i].implicitWidening(binding.parameters[i], argumentTypes[i]);", "-\t\t\t}", "-\t\t\tif (argsContainCast) {", "-\t\t\t\tCastExpression.checkNeedForArgumentCasts(scope, null, allocationType, binding, this.arguments, argumentTypes, this);", "-\t\t\t}", "-\t\t}", "+\t\tif (this.arguments != null)", "+\t\t\tcheckInvocationArguments(scope, null, allocationType, this.binding, this.arguments, argumentTypes, argsContainCast, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ceaccdede3f0efd30d1fffff6691915d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tboolean argHasError = false; // typeChecks all arguments", "+\t\tboolean argHasError = scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_5; // typeChecks all arguments", "+\t\t\tif (this.arguments != null) { // still attempt to resolve arguments", "+\t\t\t\tfor (int i = 0, max = this.arguments.length; i < max; i++) {", "+\t\t\t\t\tthis.arguments[i].resolveType(scope);", "+\t\t\t\t}", "+\t\t\t}\t\t\t\t\t", "-\t\t\t: scope.getMethod(this.actualReceiverType, this.selector, argumentTypes, this); ", "+\t\t\t: scope.getMethod(this.actualReceiverType, this.selector, argumentTypes, this);", "-\t\treturn this.resolvedType;", "+\t\treturn (this.resolvedType != null && (this.resolvedType.tagBits & TagBits.HasMissingType) == 0)", "+\t\t\t\t\t\t? this.resolvedType ", "+\t\t\t\t\t\t: null;", "+\t}", "+\tif ((this.binding.tagBits & TagBits.HasMissingType) != 0) {", "+\t\tscope.problemReporter().missingTypeInMethod(this, this.binding);", "-\t\t// the \"receiver\" must not be a type, in other words, a NameReference that the TC has bound to a Type", "+\t\t// the \"receiver\" must not be a type", "-\treturn this.resolvedType;", "+\treturn (this.resolvedType.tagBits & TagBits.HasMissingType) == 0", "+\t\t\t\t? this.resolvedType ", "+\t\t\t\t: null;"]}], "num": 68752}
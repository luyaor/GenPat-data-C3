{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0ebe5446d92a2d52060b2f6dbea2f124", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88d6e1b9539e7c5cffdf743be476a5e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, boolean valueRequired)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, boolean valueRequired)", "diff": ["-\t}", "-\tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, boolean valueRequired) {", "-\t", "-\t\tswitch (bits & RestrictiveFlagMASK) {", "-\t\t\t\tif (valueRequired || currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4) {", "-\t\t\t\t\tmanageSyntheticAccessIfNecessary(currentScope, flowInfo, true /*read-access*/);", "-\t\t\t\t}", "-\t\t\t\tFieldBinding fieldBinding = (FieldBinding) binding;", "-\t\t\t\tReferenceBinding declaringClass = fieldBinding.declaringClass;", "-\t\t\t\t// check if accessing enum static field in initializer", "-\t\t\t\tif (declaringClass.isEnum()) {", "-\t\t\t\t\tMethodScope methodScope = currentScope.methodScope();", "-\t\t\t\t\tSourceTypeBinding sourceType = currentScope.enclosingSourceType();", "-\t\t\t\t\tif (fieldBinding.isStatic()", "-\t\t\t\t\t\t\t&& this.constant == Constant.NotAConstant", "-\t\t\t\t\t\t\t&& !methodScope.isStatic", "-\t\t\t\t\t\t\t&& (sourceType == declaringClass || sourceType.superclass == declaringClass) // enum constant body", "-\t\t\t\t\t\t\t&& methodScope.isInsideInitializerOrConstructor()) {", "-\t\t\t\t\t\tcurrentScope.problemReporter().enumStaticFieldUsedDuringInitialization(fieldBinding, this);", "-\t\t\t\t\t}", "-\t\t\t\t}\t\t\t\t", "-\t\t\t\t// check if reading a final blank field", "-\t\t\t\tif (fieldBinding.isBlankFinal() && currentScope.needBlankFinalFieldInitializationCheck(fieldBinding)) {", "-\t\t\t\tif (!flowInfo.isDefinitelyAssigned(localBinding = (LocalVariableBinding) binding)) {", "-\t\t\t\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0)\t{", "-\t\tif (valueRequired) {", "-\t\t\tmanageEnclosingInstanceAccessIfNecessary(currentScope, flowInfo);", "-\t\t}", "-\t\treturn flowInfo;", "+", "+public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, boolean valueRequired) {", "+\tswitch (this.bits & ASTNode.RestrictiveFlagMASK) {", "+\t\tcase Binding.FIELD : // reading a field", "+\t\t\tif (valueRequired || currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4) {", "+\t\t\t\tmanageSyntheticAccessIfNecessary(currentScope, flowInfo, true /*read-access*/);", "+\t\t\t}", "+\t\t\tFieldBinding fieldBinding = (FieldBinding) this.binding;", "+\t\t\tReferenceBinding declaringClass = fieldBinding.declaringClass;", "+\t\t\t// check if accessing enum static field in initializer", "+\t\t\tif (declaringClass.isEnum()) {", "+\t\t\t\tMethodScope methodScope = currentScope.methodScope();", "+\t\t\t\tSourceTypeBinding sourceType = currentScope.enclosingSourceType();", "+\t\t\t\tif (fieldBinding.isStatic()", "+\t\t\t\t\t\t&& this.constant == Constant.NotAConstant", "+\t\t\t\t\t\t&& !methodScope.isStatic", "+\t\t\t\t\t\t&& (sourceType == declaringClass || sourceType.superclass == declaringClass) // enum constant body", "+\t\t\t\t\t\t&& methodScope.isInsideInitializerOrConstructor()) {", "+\t\t\t\t\tcurrentScope.problemReporter().enumStaticFieldUsedDuringInitialization(fieldBinding, this);", "+\t\t\t}\t\t\t\t", "+\t\t\t// check if reading a final blank field", "+\t\t\tif (fieldBinding.isBlankFinal() && currentScope.needBlankFinalFieldInitializationCheck(fieldBinding)) {", "+\t\t\t\tif (!flowInfo.isDefinitelyAssigned(fieldBinding)) {", "+\t\t\t\t\tcurrentScope.problemReporter().uninitializedBlankFinalField(fieldBinding, this);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase Binding.LOCAL : // reading a local variable", "+\t\t\tLocalVariableBinding localBinding;", "+\t\t\tif (!flowInfo.isDefinitelyAssigned(localBinding = (LocalVariableBinding) this.binding)) {", "+\t\t\t\tcurrentScope.problemReporter().uninitializedLocalVariable(localBinding, this);", "+\t\t\t}", "+\t\t\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0)\t{", "+\t\t\t\tlocalBinding.useFlag = LocalVariableBinding.USED;", "+\t\t\t} else if (localBinding.useFlag == LocalVariableBinding.UNUSED) {", "+\t\t\t\tlocalBinding.useFlag = LocalVariableBinding.FAKE_USED;", "+\t\t\t}", "+\t}", "+\tif (valueRequired) {", "+\t\tmanageEnclosingInstanceAccessIfNecessary(currentScope, flowInfo);", "+\t}", "+\treturn flowInfo;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6767f7ad25c8e6ea6d9e33987137e31", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "931e434bb3e4b9f62577b10f8123cfc028893969", "commitAfterChange": "c0b519c3b149b13ea0f307f0d3414359b2cf0639", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tboolean valueRequired)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, boolean valueRequired)", "diff": ["-\tpublic FlowInfo analyseCode(", "-\t\tBlockScope currentScope,", "-\t\tFlowContext flowContext,", "-\t\tFlowInfo flowInfo,", "-\t\tboolean valueRequired) {", "-\t\t\t", "-\t\t// determine the rank until which we now we do not need any actual value for the field access", "-\t\tint otherBindingsCount = otherBindings == null ? 0 : otherBindings.length;", "-", "-\t\tboolean needValue = otherBindingsCount == 0 ? valueRequired : !this.otherBindings[0].isStatic();", "-\t\tboolean complyTo14 = currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4;", "-\t\tswitch (bits & RestrictiveFlagMASK) {", "-\t\t\tcase Binding.FIELD : // reading a field", "-\t\t\t\tif (needValue || complyTo14) {", "-\t\t\t\t\tmanageSyntheticAccessIfNecessary(currentScope, (FieldBinding) binding, this.actualReceiverType, 0, flowInfo);", "-\t\t\t\t}", "-\t\t\t\tif (this.indexOfFirstFieldBinding == 1) { // was an implicit reference to the first field binding", "-\t\t\t\t\tFieldBinding fieldBinding = (FieldBinding) binding;", "-\t\t\t\t\tReferenceBinding declaringClass = fieldBinding.declaringClass;", "-\t\t\t\t\t// check if accessing enum static field in initializer\t\t\t\t\t", "-\t\t\t\t\tif (declaringClass.isEnum()) {", "-\t\t\t\t\t\tMethodScope methodScope = currentScope.methodScope();", "-\t\t\t\t\t\tSourceTypeBinding sourceType = methodScope.enclosingSourceType();", "-\t\t\t\t\t\tif (fieldBinding.isStatic()", "-\t\t\t\t\t\t\t\t&& (sourceType == declaringClass || sourceType.superclass == declaringClass) // enum constant body", "-\t\t\t\t\t\t\t\t&& fieldBinding.constant() == Constant.NotAConstant", "-\t\t\t\t\t\t\t\t&& !methodScope.isStatic", "-\t\t\t\t\t\t\t\t&& methodScope.isInsideInitializerOrConstructor()) {", "-\t\t\t\t\t\t\tcurrentScope.problemReporter().enumStaticFieldUsedDuringInitialization(fieldBinding, this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}\t\t\t\t", "-\t\t\t\t\t// check if reading a final blank field", "-\t\t\t\t\tif (fieldBinding.isBlankFinal()", "-\t\t\t\t\t\t\t&& currentScope.allowBlankFinalFieldAssignment(fieldBinding)", "-\t\t\t\t\t\t\t&& !flowInfo.isDefinitelyAssigned(fieldBinding)) {", "-\t\t\t\t\t\tcurrentScope.problemReporter().uninitializedBlankFinalField(fieldBinding, this);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase Binding.LOCAL : // reading a local variable", "-\t\t\t\tLocalVariableBinding localBinding;", "-\t\t\t\tif (!flowInfo", "-\t\t\t\t\t.isDefinitelyAssigned(localBinding = (LocalVariableBinding) binding)) {", "-\t\t\t\t\tcurrentScope.problemReporter().uninitializedLocalVariable(localBinding, this);", "-\t\t\t\t}", "-\t\t\t\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0)\t{", "-\t\t\t\t\tlocalBinding.useFlag = LocalVariableBinding.USED;", "-\t\t\t\t} else if (localBinding.useFlag == LocalVariableBinding.UNUSED) {", "-\t\t\t\t\tlocalBinding.useFlag = LocalVariableBinding.FAKE_USED;", "-\t\t\t\t}", "-\t\t\t\tcheckNPE(currentScope, flowContext, flowInfo, true);", "-\t\t}", "-\t\tif (needValue) {", "-\t\t\tmanageEnclosingInstanceAccessIfNecessary(currentScope, flowInfo);", "-\t\t\t// only for first binding (if value needed only)", "-\t\t}", "-\t\tif (otherBindings != null) {", "-\t\t\tfor (int i = 0; i < otherBindingsCount; i++) {", "-\t\t\t\tneedValue = i < otherBindingsCount-1 ? !otherBindings[i+1].isStatic() : valueRequired;", "-\t\t\t\tif (needValue || complyTo14) {", "-\t\t\t\t\tTypeBinding lastReceiverType = getGenericCast(i);", "-\t\t\t\t\tif (lastReceiverType == null) {", "-\t\t\t\t\t\tif (i == 0) {", "-\t\t\t\t\t\t\t lastReceiverType = ((VariableBinding)binding).type;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tlastReceiverType = otherBindings[i-1].type;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tmanageSyntheticAccessIfNecessary(", "-\t\t\t\t\t\tcurrentScope, ", "-\t\t\t\t\t\totherBindings[i], ", "-\t\t\t\t\t\tlastReceiverType,", "-\t\t\t\t\t\ti + 1,", "-\t\t\t\t\t\tflowInfo);", "-\t\t\t\t}", "-\t\treturn flowInfo;", "+", "+public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, boolean valueRequired) {", "+\t// determine the rank until which we now we do not need any actual value for the field access", "+\tint otherBindingsCount = this.otherBindings == null ? 0 : this.otherBindings.length;", "+", "+\tboolean needValue = otherBindingsCount == 0 ? valueRequired : !this.otherBindings[0].isStatic();", "+\tboolean complyTo14 = currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4;", "+\tswitch (this.bits & ASTNode.RestrictiveFlagMASK) {", "+\t\tcase Binding.FIELD : // reading a field", "+\t\t\tif (needValue || complyTo14) {", "+\t\t\t\tmanageSyntheticAccessIfNecessary(currentScope, (FieldBinding) this.binding, this.actualReceiverType, 0, flowInfo);", "+\t\t\t}", "+\t\t\tif (this.indexOfFirstFieldBinding == 1) { // was an implicit reference to the first field binding", "+\t\t\t\tFieldBinding fieldBinding = (FieldBinding) this.binding;", "+\t\t\t\tReferenceBinding declaringClass = fieldBinding.declaringClass;", "+\t\t\t\t// check if accessing enum static field in initializer\t\t\t\t\t", "+\t\t\t\tif (declaringClass.isEnum()) {", "+\t\t\t\t\tMethodScope methodScope = currentScope.methodScope();", "+\t\t\t\t\tSourceTypeBinding sourceType = methodScope.enclosingSourceType();", "+\t\t\t\t\tif (fieldBinding.isStatic()", "+\t\t\t\t\t\t\t&& (sourceType == declaringClass || sourceType.superclass == declaringClass) // enum constant body", "+\t\t\t\t\t\t\t&& fieldBinding.constant() == Constant.NotAConstant", "+\t\t\t\t\t\t\t&& !methodScope.isStatic", "+\t\t\t\t\t\t\t&& methodScope.isInsideInitializerOrConstructor()) {", "+\t\t\t\t\t\tcurrentScope.problemReporter().enumStaticFieldUsedDuringInitialization(fieldBinding, this);", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\t// check if reading a final blank field", "+\t\t\t\tif (fieldBinding.isBlankFinal()", "+\t\t\t\t\t\t&& currentScope.allowBlankFinalFieldAssignment(fieldBinding)", "+\t\t\t\t\t\t&& !flowInfo.isDefinitelyAssigned(fieldBinding)) {", "+\t\t\t\t\tcurrentScope.problemReporter().uninitializedBlankFinalField(fieldBinding, this);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase Binding.LOCAL : // reading a local variable", "+\t\t\tLocalVariableBinding localBinding;", "+\t\t\tif (!flowInfo", "+\t\t\t\t.isDefinitelyAssigned(localBinding = (LocalVariableBinding) this.binding)) {", "+\t\t\t\tcurrentScope.problemReporter().uninitializedLocalVariable(localBinding, this);", "+\t\t\t}", "+\t\t\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0)\t{", "+\t\t\t\tlocalBinding.useFlag = LocalVariableBinding.USED;", "+\t\t\t} else if (localBinding.useFlag == LocalVariableBinding.UNUSED) {", "+\t\t\t\tlocalBinding.useFlag = LocalVariableBinding.FAKE_USED;", "+\t\t\t}", "+\t\t\tcheckNPE(currentScope, flowContext, flowInfo, true);", "+\t}", "+\tif (needValue) {", "+\t\tmanageEnclosingInstanceAccessIfNecessary(currentScope, flowInfo);", "+\t\t// only for first binding (if value needed only)", "+\t}", "+\tif (this.otherBindings != null) {", "+\t\tfor (int i = 0; i < otherBindingsCount; i++) {", "+\t\t\tneedValue = i < otherBindingsCount-1 ? !this.otherBindings[i+1].isStatic() : valueRequired;", "+\t\t\tif (needValue || complyTo14) {", "+\t\t\t\tTypeBinding lastReceiverType = getGenericCast(i);", "+\t\t\t\tif (lastReceiverType == null) {", "+\t\t\t\t\tif (i == 0) {", "+\t\t\t\t\t\t lastReceiverType = ((VariableBinding)this.binding).type;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tlastReceiverType = this.otherBindings[i-1].type;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tmanageSyntheticAccessIfNecessary(", "+\t\t\t\t\tcurrentScope, ", "+\t\t\t\t\tthis.otherBindings[i], ", "+\t\t\t\t\tlastReceiverType,", "+\t\t\t\t\ti + 1,", "+\t\t\t\t\tflowInfo);", "+\t\t\t}", "+\t\t}", "+\t}", "+\treturn flowInfo;", "+}"]}], "num": 53208}
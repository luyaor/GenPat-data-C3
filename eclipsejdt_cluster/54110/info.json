{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0ba1a12d3132c9f950fb63d10c281d0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c9717dfce197b1021e9ba15d0e307eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "4f033227ea2ad83f24b29ebc3efd698a3b482dc9", "commitAfterChange": "6768738e9351693528d65a455814afa5c7b76789", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic static String getOption(String optionName)", "signatureAfterChange": " \tpublic static String getOption(String optionName)", "diff": ["-\t\t} else if (propertyName.startsWith(JavaCore.PLUGIN_ID + \".formatter\")) {//$NON-NLS-1$", "-\t\t\t// TODO (olivier) remove after M7", "-\t\t\tPreferences preferences = getPlugin().getPluginPreferences();", "-\t\t\treturn Util.getConvertedDeprecatedValue(preferences, propertyName);", "-\t\t} else if (propertyName.equals(\"org.eclipse.jdt.core.align_type_members_on_columns\")) { //$NON-NLS-1$", "-\t\t\t// TODO (olivier) remove after M7", "-\t\t\tPreferences preferences = getPlugin().getPluginPreferences();", "-\t\t\treturn preferences.getString(DefaultCodeFormatterConstants.FORMATTER_ALIGN_TYPE_MEMBERS_ON_COLUMNS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8ca90d20333b15b64e1670c8826dfc7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tprivate boolean detectHierarchyCycle(SourceTypeBinding sourceType, ReferenceBinding superType, TypeReference reference)", "signatureAfterChange": " \tprivate boolean detectHierarchyCycle(SourceTypeBinding sourceType, ReferenceBinding superType, TypeReference reference)", "diff": ["-\t\tif (superType.isMemberType()) {", "-\t\t\tReferenceBinding current = superType.enclosingType();", "-\t\t\tdo {", "-\t\t\t\tif (current.isHierarchyBeingConnected()) {", "-\t\t\t\t\tproblemReporter().hierarchyCircularity(sourceType, current, reference);", "-\t\t\t\t\tsourceType.tagBits |= HierarchyHasProblems;", "-\t\t\t\t\tcurrent.tagBits |= HierarchyHasProblems;", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t} while ((current = current.enclosingType()) != null);", "-\t\t}", "+// No longer believe this code is necessary, since we changed supertype lookup to use TypeReference resolution", "+//\t\tif (superType.isMemberType()) {", "+//\t\t\tReferenceBinding current = superType.enclosingType();", "+//\t\t\tdo {", "+//\t\t\t\tif (current.isHierarchyBeingConnected()) {", "+//\t\t\t\t\tproblemReporter().hierarchyCircularity(sourceType, current, reference);", "+//\t\t\t\t\tsourceType.tagBits |= HierarchyHasProblems;", "+//\t\t\t\t\tcurrent.tagBits |= HierarchyHasProblems;", "+//\t\t\t\t\treturn true;", "+//\t\t\t\t}", "+//\t\t\t} while ((current = current.enclosingType()) != null);", "+//\t\t}"]}], "num": 54110}
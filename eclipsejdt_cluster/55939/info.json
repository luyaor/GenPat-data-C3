{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "81f03d4d08c60b577e62081e955d1c17", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a469aa5027bde2e197f4e30be93b0d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ReferenceCollection.java", "commitBeforeChange": "8264e11928da121957d70dadd3c6bf92a042c6d3", "commitAfterChange": "53c01b1adab482ab7f920989323f3cac2f399cfd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public static char[][][] internQualifiedNames(char[][][] qualifiedNames)", "signatureAfterChange": "  public static char[][][] internQualifiedNames(char[][][] qualifiedNames)", "diff": ["+\treturn internQualifiedNames(qualifiedNames, false);", "+}", "-\t\t\tif (CharOperation.equals(qualifiedName, wellKnownName))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ba1f6e39a877680f9e4f7cfcfd1fd77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "06734c9185cf2920c0b21b4263e30c1ea3cbc085", "commitAfterChange": "753a6a1eefe385cd875ac1931b6199ee406e2292", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void appendKey(StringBuffer buffer, boolean rawTypeOnly)", "signatureAfterChange": " \tpublic void appendKey(StringBuffer buffer, boolean rawTypeOnly)", "diff": ["-\t\t\t\t\tITypeBinding[] typeParameters = getTypeParameters();", "-\t\t\t\t\tint typeParametersLength = typeParameters.length;", "-\t\t\t\t\tif (typeParametersLength != 0) {", "-\t\t\t\t\t\tbuffer.append('<');", "-\t\t\t\t\t\tfor (int i = 0; i < typeParametersLength; i++) {", "-\t\t\t\t\t\t\tTypeBinding typeParameter = (TypeBinding) typeParameters[i];", "-\t\t\t\t\t\t\ttypeParameter.appendParameterKey(buffer);", "-\t\t\t\t\t\t\tITypeBinding[] bounds = typeParameter.getTypeBounds();", "-\t\t\t\t\t\t\tfor (int j = 0, length = bounds.length; j < length; j++) {", "-\t\t\t\t\t\t\t\tTypeBinding bound = (TypeBinding) bounds[j];", "-\t\t\t\t\t\t\t\tbuffer.append(':');", "-\t\t\t\t\t\t\t\tbound.appendParameterKey(buffer);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbuffer.append(',');", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbuffer.append('>');", "-\t\t\t\t\t}", "-\t\t\t\t\tITypeBinding[] typeArgs = getTypeArguments();", "-\t\t\t\t\tint typeArgsLength = typeArgs.length;", "-\t\t\t\t\tif (typeArgsLength != 0) {", "-\t\t\t\t\t\tbuffer.append('<');", "-\t\t\t\t\t\tfor (int i = 0; i < typeArgsLength; i++) {", "-\t\t\t\t\t\t\tTypeBinding typeArg = (TypeBinding) typeArgs[i];", "-\t\t\t\t\t\t\ttypeArg.appendParameterKey(buffer);", "-\t\t\t\t\t\t\tbuffer.append(',');", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbuffer.append('>');", "-\t\t\t\t\t}", "+\t\t\t\t\t// only one of the type parameters or type arguments is non-empty at the same time", "+\t\t\t\t\tappendTypeParameters(buffer, getTypeParameters());", "+\t\t\t\t\tappendTypeArguments(buffer, getTypeArguments());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "747a2f02cdcd97048a3dbba34ea6e28d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "da1ed68bc4edf753a4c670a981fc3b101d0548b0", "commitAfterChange": "d60a521aebaf899095636d4081476cd72ef03126", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "  protected void addAffectedSourceFiles()", "signatureAfterChange": "  protected void addAffectedSourceFiles()", "diff": ["+", "+\taddAffectedSourceFiles(qualifiedStrings, simpleStrings);", "+}", "-\tchar[][][] qualifiedNames = ReferenceCollection.internQualifiedNames(qualifiedStrings);", "-\tif (qualifiedNames.length < qualifiedStrings.elementSize)", "-\t\tqualifiedNames = null;", "-\tchar[][] simpleNames = ReferenceCollection.internSimpleNames(simpleStrings);", "-\tif (simpleNames.length < simpleStrings.elementSize)", "-\t\tsimpleNames = null;", "-\t\tif (refs != null && refs.includes(qualifiedNames, simpleNames)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af4a3461af1da192014962fca830fd50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "2a46362da18e1189829e578c276cfbf726376a20", "commitAfterChange": "948661c4cb198af70b598b9954e5159cb73d7234", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r \t\r \tprivate char[][] findMethodParameterNames(MethodBinding method, char[][] parameterTypeNames)", "signatureAfterChange": "\r \t\r \tprivate char[][] findMethodParameterNames(MethodBinding method, char[][] parameterTypeNames)", "diff": ["-\t\t\t\t} else if(answer.isBinaryType()) {\r", "-\t\t\t\t\tIBinaryType binaryType = answer.getBinaryType();\r", "-\t\t\t\t\tIBinaryMethod[] binaryMethods = binaryType.getMethods();\r", "-\t\t\t\t\t\r", "-\t\t\t\t\tfor(int i = 0; i < binaryMethods.length ; i++){\r", "-\t\t\t\t\t\tIBinaryMethod binaryMethod = binaryMethods[i];\r", "-\t\t\t\t\t\tString[] argTypeStringNames = Signature.getParameterTypes(new String(binaryMethod.getMethodDescriptor()));\r", "-\t\t\t\t\t\tchar[][] argTypeNames = new char[argTypeStringNames.length][];\r", "-\t\t\t\t\t\tfor(int j = 0; j < argTypeStringNames.length; j++){\r", "-\t\t\t\t\t\t\targTypeNames[j] = argTypeStringNames[j].toCharArray();\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\r", "-\t\t\t\t\t\tif(argTypeNames != null &&\r", "-\t\t\t\t\t\t\tCharOperation.equals(method.selector,binaryMethod.getSelector()) &&\r", "-\t\t\t\t\t\t\tCharOperation.equals(argTypeNames,parameterTypeNames)){\r", "-\t\t\t\t\t\t\tparameterNames = binaryMethod.getArgumentNames();\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\t\r", "+\t\t\t\t} \r", "-\t\t// default parameters name\r", "-\t\tif(parameterNames == null) {\r", "-\t\t\tparameterNames = new char[length][];\r", "-\t\t\tfor (int i = 0; i < length; i++) {\r", "-\t\t\t\tparameterNames[i] = CharOperation.concat(ARG, String.valueOf(i).toCharArray());\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t\r"]}], "num": 55939}
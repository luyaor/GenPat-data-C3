{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d065f1d5c40aa419f686fbf9fb0387a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a0f4a373e099aeb714361c607ed4ea6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/MessagerTests.java", "commitBeforeChange": "121da1ed9487cd06624131be60f7fed861a83829", "commitAfterChange": "65bcf10af454142ab48b1720e5cae843f9f8de26", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate String internalTestMessager(JavaCompiler compiler) throws IOException", "signatureAfterChange": " \tprivate void internalTestMessager(JavaCompiler compiler, DiagnosticListener<? super JavaFileObject> diagnosticListener) throws IOException", "diff": ["-\tprivate String internalTestMessager(JavaCompiler compiler) throws IOException {", "+\tprivate void internalTestMessager(JavaCompiler compiler, DiagnosticListener<? super JavaFileObject> diagnosticListener) throws IOException {", "+\t\toptions.add(\"-nowarn\");", "-\t\t// Invoke processing by compiling the targets.model resources", "-\t\tStringWriter errors = new StringWriter();", "-\t\tboolean success = BatchTestUtils.compileTreeWithErrors(compiler, options, targetFolder, errors);", "+\t\t// Invoke processing by compiling the targets.errors resources", "+\t\tboolean success = BatchTestUtils.compileTreeWithErrors(compiler, options, targetFolder, diagnosticListener);", "-\t\tassertTrue(\"errors should not be empty\", errors.getBuffer().length() != 0);", "-\t\t", "-\t\t//System.out.println(errors.getBuffer().toString());", "-\t\t", "-\t\treturn errors.getBuffer().toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52bfefee01b7bbe52aa651d799a8bc17", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/ModelTests.java", "commitBeforeChange": "f4eb00a745a91dbc4b9bd7fa4022524e166e1b90", "commitAfterChange": "a4f11659e59fa8a478723fa3bc2c5651f04c5382", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void testElement() throws IOException", "signatureAfterChange": " \tprivate void internalTestElement(JavaCompiler compiler) throws IOException", "diff": ["-\tpublic void testElement() throws IOException {", "+\t */", "+\tprivate void internalTestElement(JavaCompiler compiler) throws IOException {", "+\t\tSystem.clearProperty(ELEMENTPROCNAME);", "-\t\toptions.add(\"-Aorg.eclipse.jdt.compiler.apt.tests.processors.elements.ElementProc\");", "-\t\tBatchTestUtils.compileTree(_compiler, options, targetFolder);", "+\t\toptions.add(\"-A\" + ELEMENTPROCNAME);", "+\t\tBatchTestUtils.compileTree(compiler, options, targetFolder);", "-\t\t// check that everything was processed", "+\t\t// If it succeeded, the processor will have set this property to \"succeeded\";", "+\t\t// if not, it will set it to an error value.", "+\t\tassertEquals(\"succeeded\", System.getProperty(ELEMENTPROCNAME));"]}], "num": 5420}
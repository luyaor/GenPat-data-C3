{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71503fefec14a878add88e3f11e8b06d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21782dbd2765f4462f181dbdbbe0c9c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "4ce841d6606c2c0b7f24c9925dd47ac216c52a6e", "commitAfterChange": "dd4ead302ceb5b95b74beecab83c5b580915aa31", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 52, "signatureBeforeChange": "  \tprivate void appendAnnotationMember(StringBuffer buffer, IMemberValuePair member) throws JavaModelException", "signatureAfterChange": "  \tprivate void appendAnnotationMember(StringBuffer buffer, IMemberValuePair member) throws JavaModelException", "diff": ["+\t\tif (member == null) {", "+\t\t\tbuffer.append(\"<null>\");", "+\t\t\treturn;", "+\t\t}", "+\t\tString name = member.getMemberName();", "+\t\tif (!\"value\".equals(name)) {", "+\t\t\tbuffer.append(name);", "+\t\t\tbuffer.append('=');", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f8254958c7a6f0cba396121e817995d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java", "commitBeforeChange": "ca9dbce3d563d28e984f1680d988cb68608c75f8", "commitAfterChange": "aec4b3fea7801d56d112291851d497436c0f9c81", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tvoid modifying()", "signatureAfterChange": " \tstatic List reapPropertyList()", "diff": ["-\tvoid modifying() {", "-\t\tgetAST().modifying();", "+\t */", "+\tstatic List reapPropertyList() {", "+\t\ttempPDL.remove(0); // remove nodeClass", "+\t\t// compact", "+\t\tArrayList a = new ArrayList(tempPDL.size());", "+\t\ta.addAll(tempPDL); ", "+\t\t// clear global", "+\t\ttempPDL = null;", "+\t\treturn Collections.unmodifiableList(a);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c0794b423d94f57a20bfbf46c5a8635", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "984bec0735c837a49816a47e66faa3e64aa59275", "commitAfterChange": "9949db0584a6499b1daec6c7af373276b97d338d", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public String toString()", "signatureAfterChange": " public String toString()", "diff": ["-\tbuffer.append(this.focusType == null ? \"<NONE>\" : this.focusType.getFullyQualifiedName()); //$NON-NLS-1$", "+\tbuffer.append(this.focusType == null ? \"<NONE>\" : ((JavaElement)this.focusType).toStringWithAncestors()); //$NON-NLS-1$", "+\t\t\t\tbuffer.append(\"  \"); //$NON-NLS-1$", "+\t\t\t\tJavaElement element = (JavaElement)roots[i];", "+\t\t\t\tbuffer.append(element.toStringWithAncestors());", "+\t\t\t\tbuffer.append('\\n');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e0671f7885fcb7eea1293117d5b7772", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \tprivate IField createFieldHandle(\r \t\tFieldDeclaration field,\r \t\tchar[][] definingTypeNames)", "signatureAfterChange": "\r \tprivate IField createFieldHandle(\r \t\tFieldDeclaration field,\r \t\tchar[][] definingTypeNames)", "diff": ["-\t\treturn type.getField(new String(field.name));\r", "+\t\tif (type == null) return null;\r", "+\t\tif (type.isBinary()) {\r", "+\t\t\tIField fieldHandle = type.getField(new String(field.name));\r", "+\t\t\tif (fieldHandle.exists()) {\r", "+\t\t\t\treturn fieldHandle;\r", "+\t\t\t} else {\r", "+\t\t\t\treturn null;\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\treturn type.getField(new String(field.name));\r", "+\t\t}\r"]}], "num": 11152}
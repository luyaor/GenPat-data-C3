{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "218e79ae434ca0ff566c6125510fd43e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6562d7a244afe1eeaf160abcafcb4d53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1022, "methodNumberAfterChange": 1022, "signatureBeforeChange": " public void test0999()", "signatureAfterChange": " public void test0999()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 9)\\n\" +", "-\t\t\"\tIterator<Number> it1 = X.chain(new Iterator[] { l1.iterator(), l2.iterator() });\\n\" +", "-\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation chain(Iterator...) of the generic method chain(Iterator<E>...) of type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 9)\\n\" +", "-\t\t\"\tIterator<Number> it1 = X.chain(new Iterator[] { l1.iterator(), l2.iterator() });\\n\" +", "-\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: The expression of type Iterator needs unchecked conversion to conform to Iterator<Number>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 14)\\n\" +", "-\t\t\"\tIterator<Number> it2 = X.chain(l1.iterator(), l2.iterator());\\n\" +", "-\t\t\"\t                         ^^^^^\\n\" +", "-\t\t\"The method chain(Iterator<E>...) in the type X is not applicable for the arguments (Iterator<Integer>, Iterator<Float>)\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in X.java (at line 18)\\n\" +", "-\t\t\"\tIterator<Number> it2 = X.chain(l1.iterator(), l1.iterator());\\n\" +", "-\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety : A generic array of Iterator<Integer> is created for a varargs parameter\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"\tIterator<Number> it1 = X.chain(new Iterator[] { l1.iterator(), l2.iterator() });\\n\" + ", "+\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation chain(Iterator[]) of the generic method chain(Iterator<E>...) of type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"\tIterator<Number> it1 = X.chain(new Iterator[] { l1.iterator(), l2.iterator() });\\n\" + ", "+\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: The expression of type Iterator needs unchecked conversion to conform to Iterator<Number>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"\tIterator<Number> it1 = X.chain(new Iterator[] { l1.iterator(), l2.iterator() });\\n\" + ", "+\t\t\"\t                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: The expression of type Iterator[] needs unchecked conversion to conform to Iterator<Number>[]\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\"\tIterator<Number> it2 = X.chain(l1.iterator(), l2.iterator());\\n\" + ", "+\t\t\"\t                         ^^^^^\\n\" + ", "+\t\t\"The method chain(Iterator<E>...) in the type X is not applicable for the arguments (Iterator<Integer>, Iterator<Float>)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\"\tIterator<Number> it2 = X.chain(l1.iterator(), l1.iterator());\\n\" + ", "+\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety : A generic array of Iterator<Integer> is created for a varargs parameter\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "684e088e3e35fe09e457679f852230bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 1024, "methodNumberAfterChange": 1024, "signatureBeforeChange": " public void test1000()", "signatureAfterChange": " public void test1000()", "diff": ["+\t\tthis.complianceLevel < ClassFileConstants.JDK1_7 ?", "-\t\t\"Type safety : A generic array of Iterator<? extends Number&Comparable<?>> is created for a varargs parameter\\n\" + ", "+\t\t\"Type safety: A generic array of Iterator<? extends Number&Comparable<?>> is created for a varargs parameter\\n\" + ", "-\t\t\"Type safety : A generic array of Iterator<? extends Integer> is created for a varargs parameter\\n\" + ", "+\t\t\"Type safety: A generic array of Iterator<? extends Integer> is created for a varargs parameter\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\" :", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tpublic static final <T> Iterator<T> chain(Iterator<? extends T>... it) {\\n\" + ", "+\t\t\t\"\t                                                                   ^^\\n\" + ", "+\t\t\t\"Type safety: Potential heap pollution via varargs parameter it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tIterator<Number> it1 = X.chain(new Iterator[] { l1.iterator(), l2.iterator() });\\n\" + ", "+\t\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation chain(Iterator[]) of the generic method chain(Iterator<? extends T>...) of type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tIterator<Number> it1 = X.chain(new Iterator[] { l1.iterator(), l2.iterator() });\\n\" + ", "+\t\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type Iterator needs unchecked conversion to conform to Iterator<Number>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tIterator<Number> it1 = X.chain(new Iterator[] { l1.iterator(), l2.iterator() });\\n\" + ", "+\t\t\t\"\t                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type Iterator[] needs unchecked conversion to conform to Iterator<? extends Number>[]\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tIterator<Number> it2 = X.chain(l1.iterator(), l2.iterator());\\n\" + ", "+\t\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: A generic array of Iterator<? extends Number&Comparable<?>> is created for a varargs parameter\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\"\tIterator<Number> it2 = X.chain(l1.iterator(), l2.iterator());\\n\" + ", "+\t\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from Iterator<Number&Comparable<?>> to Iterator<Number>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 18)\\n\" + ", "+\t\t\t\"\tIterator<Number> it2 = X.chain(l1.iterator(), l1.iterator());\\n\" + ", "+\t\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: A generic array of Iterator<? extends Integer> is created for a varargs parameter\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. ERROR in X.java (at line 18)\\n\" + ", "+\t\t\t\"\tIterator<Number> it2 = X.chain(l1.iterator(), l1.iterator());\\n\" + ", "+\t\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from Iterator<Integer> to Iterator<Number>\\n\" + ", "+\t\t\t\"----------\\n\");"]}], "num": 72106}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26eb6d49ac3f22094c0566ff98f42fb6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23864ed362eda01652f4c23e6db8ce7b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "bac18f086dd9a87e1d5b6dea3b31ca1c92463a84", "commitAfterChange": "1b53a525120894192853120c7678edb264d25490", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final void addAnonymousType(TypeDeclaration anonymousType, ReferenceBinding superBinding)", "signatureAfterChange": " public final void addAnonymousType(TypeDeclaration anonymousType, ReferenceBinding superBinding)", "diff": ["+\t", "+\t/* Tag any enclosing lambdas as instance capturing. Strictly speaking they need not be, unless the local/anonymous type references enclosing instance state.", "+\t   but the types themselves track enclosing types regardless of whether the state is accessed or not. This creates a mismatch in expectations in code generation", "+\t   time, if we choose to make the lambda method static. To keep things simple and avoid a messy rollback, we force the lambda to be an instance method under ", "+\t   this situation. However if per source, the lambda occurs in a static context, we would generate a static synthetic method.", "+\t*/", "+\tMethodScope methodScope = methodScope();", "+\twhile (methodScope != null && methodScope.referenceContext instanceof LambdaExpression) {", "+\t\tLambdaExpression lambda = (LambdaExpression) methodScope.referenceContext;", "+\t\tif (!lambda.scope.isStatic) {", "+\t\t\tlambda.shouldCaptureInstance = true;", "+\t\t}", "+\t\tmethodScope = methodScope.enclosingMethodScope();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c49ec7775b3bde7ca1d4a6e6a5272cb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "d78b8094daf355f9dfeb37d82fffda46614be5da", "commitAfterChange": "5903b5532387cc7ed73791cbff2d52e4ceee6d52", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void resetEnclosingMethodStaticFlag()", "signatureAfterChange": " public void resetEnclosingMethodStaticFlag()", "diff": ["+ */", "+\tif (methodScope != null) {", "+\t\tif (methodScope.referenceContext instanceof MethodDeclaration) {", "+\t\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) methodScope.referenceContext;", "+\t\t\tmethodDeclaration.bits &= ~ASTNode.CanBeStatic;", "+\t\t} else if (methodScope.referenceContext instanceof TypeDeclaration) {", "+\t\t\t// anonymous type, find enclosing method", "+\t\t\tmethodScope = methodScope.enclosingMethodScope();", "+\t\t\tif (methodScope != null && methodScope.referenceContext instanceof MethodDeclaration) {", "+\t\t\t\tMethodDeclaration methodDeclaration = (MethodDeclaration) methodScope.referenceContext;", "+\t\t\t\tmethodDeclaration.bits &= ~ASTNode.CanBeStatic;", "+\t\t\t}", "+\t\t}", "+\t}", "+}", "-\t\tMethodDeclaration methodDeclaration= (MethodDeclaration) methodScope.referenceContext;", "-\t\t\tmethodScope = enclosingClassScope.methodScope();", "-\t\t} else {", "-\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fee7625f1a63fac8aca65ffe6a069d97", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "03aab1ff69aae2de16de283aaf6df2cafa77af82", "commitAfterChange": "0c0e9f808d4509f3cefc470c2105f7ba1290fdb7", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "  \tprivate void buildTokenLocationContext(InternalCompletionContext context, Scope scope, ASTNode astNode, ASTNode astNodeParent)", "signatureAfterChange": "  \tprivate void buildTokenLocationContext(InternalCompletionContext context, Scope scope, ASTNode astNode, ASTNode astNodeParent)", "diff": ["+\t\t\t} else if (referenceContext instanceof LambdaExpression) {", "+\t\t\t\tLambdaExpression expression = (LambdaExpression)referenceContext;", "+\t\t\t\tif (expression.body().sourceStart <= astNode.sourceStart &&", "+\t\t\t\t\t\tastNode.sourceEnd <= expression.body().sourceEnd) {", "+\t\t\t\t\t// completion is inside a method body", "+\t\t\t\t\tif (astNodeParent == null &&", "+\t\t\t\t\t\t\tastNode instanceof CompletionOnSingleNameReference &&", "+\t\t\t\t\t\t\t!((CompletionOnSingleNameReference)astNode).isPrecededByModifiers) {", "+\t\t\t\t\t\tcontext.setTokenLocation(CompletionContext.TL_STATEMENT_START);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 65353}
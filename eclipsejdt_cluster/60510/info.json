{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ccb42e1843079535a5f8b97166095041", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e85fd2567b23c375d166b8982a5cba3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "808ee1989aa546fef406f77c37a96f979df5219f", "commitAfterChange": "2528937997399f978f8c04c6800f46f957dbd27f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static final boolean camelCaseMatch(String pattern, int patternStart, int patternEnd, String name, int nameStart, int nameEnd)", "signatureAfterChange": " public static final boolean camelCaseMatch(String pattern, String name, boolean prefixMatch)", "diff": ["+ */", "+public static final boolean camelCaseMatch(String pattern, String name, boolean prefixMatch) {", "+\tif (pattern == null)", "+\t\treturn true; // null pattern is equivalent to '*'", "+\tif (name == null)", "+\t\treturn false; // null name cannot match", "+", "+\treturn camelCaseMatch(pattern, 0, pattern.length(), name, 0, name.length(), prefixMatch);", "+}", "-\treturn CharOperation.camelCaseMatch(pattern.toCharArray(), patternStart, patternEnd, name.toCharArray(), nameStart, nameEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daa96a7e1d68e7c62df272f8ccedfd24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "c1e14993cd26cb8463a16c9bf4e3c3cd94453425", "commitAfterChange": "1e3dfe1b9cf4ad1efe64071cceead18151239ca4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static final char[] append(char[] target, int index, char[] array, int start, int end)", "signatureAfterChange": " public static final char[] append(char[] target, char[] suffix)", "diff": ["+ */", "+public static final char[] append(char[] target, char[] suffix) {", "+\tif(suffix == null || suffix.length == 0)", "+\t\treturn target;", "+\tint targetLength = target.length;", "+\tint subLength = suffix.length;", "+\tint newTargetLength = targetLength + subLength;", "+\tif (newTargetLength > targetLength) {", "+\t\tSystem.arraycopy(target, 0, target = new char[newTargetLength], 0, targetLength);", "+\t}", "+\tSystem.arraycopy(suffix, 0, target, targetLength, subLength);", "+\treturn target;", "+}"]}], "num": 60510}
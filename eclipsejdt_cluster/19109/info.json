{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "459fae27b1b71637157e9ce6bfd7b858", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61dfa1cf2b3fbcffc7f80ee27326ffb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "ed80be792854aeaafe85328a8925218265caeac6", "commitAfterChange": "87c02024c35caa7b296fc7c28fa066d1219c7ebd", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tprivate int compatibilityLevel18FromInner(MethodBinding method, InnerInferenceHelper innerInferenceHelper, Expression invocArg, int argLen, int i, boolean[] isVarArgs)", "signatureAfterChange": "  \tprivate int compatibilityLevel18FromInner(MethodBinding method, InnerInferenceHelper innerInferenceHelper, Expression invocArg, int argLen, int i, boolean[] isVarArgs)", "diff": ["-\t\t\tif (resolvedType.isCompatibleWith(targetType, this)) {", "-\t\t\t\treturn compatible;", "+\t\t\tint level = parameterCompatibilityLevel(resolvedType, targetType);", "+\t\t\tif (level != NOT_COMPATIBLE) {", "+\t\t\t\treturn Math.max(compatible, level);", "-\t\t\t\t\t\t\tif (solution.returnType != null && solution.returnType.isCompatibleWith(targetType, this))", "-\t\t\t\t\t\t\t\treturn compatible;", "+\t\t\t\t\t\t\tif (solution.returnType != null) {", "+\t\t\t\t\t\t\t\tlevel = parameterCompatibilityLevel(solution.returnType, targetType);", "+\t\t\t\t\t\t\t\tif (level != NOT_COMPATIBLE)", "+\t\t\t\t\t\t\t\t\treturn Math.max(compatible, level);", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b033d515e1724c70021b6977b95a9b2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": " public void generateSyntheticBodyForMethodAccess(SyntheticAccessMethodBinding accessBinding)", "signatureAfterChange": " public void generateSyntheticBodyForMethodAccess(SyntheticAccessMethodBinding accessBinding)", "diff": ["+\tTypeBinding[] arguments = accessBinding.accessType == SyntheticAccessMethodBinding.BridgeMethodAccess ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t? accessBinding.parameters", "+\t\t\t\t\t\t\t\t\t\t\t\t\t: null;", "-\t\tload(parameters[i], resolvedPosition);", "-\t\tif ((parameters[i] == DoubleBinding) || (parameters[i] == LongBinding))", "+\t    TypeBinding parameter = parameters[i];", "+\t    if (arguments != null) { // for bridge methods", "+\t\t    TypeBinding argument = arguments[i];", "+\t\t\tload(argument, resolvedPosition);", "+\t\t\tif (argument != parameter) ", "+\t\t\t    checkcast(parameter);", "+\t    } else {", "+\t\t\tload(parameter, resolvedPosition);", "+\t\t}", "+\t\tif ((parameter == DoubleBinding) || (parameter == LongBinding))"]}], "num": 19109}
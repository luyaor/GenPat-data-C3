{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e728b7659bc67468d03b73086069ec6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e09a1e53696f4136893b662746f48191", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "f174c5e3ec66ea2a46810b190cc3e9d57c0432d4", "commitAfterChange": "8bbacffbe712e7ac5a5d22a44809b44ff8a5e616", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tprotected void verifyComments(String sourceStr, char[] source, List unitComments)", "signatureAfterChange": " \t \tprotected void verifyComments(String fileName, char[] source)", "diff": ["+\t", "+\tprotected void verifyComments(String fileName, char[] source) {", "+", "+\t\t// Get comments infos from test file", "+\t\tsetSourceComment(source);", "+\t\t", "+\t\t// Verify comments either in unicode or not", "+\t\tchar[] testedSource = source;", "+\t\tif (unicode) {", "+\t\t\ttestedSource = getUnicodeSource(source);", "+\t\t}", "+//\t\tMap originalOptions = this.currentProject.getOptions(true);", "+//\t\ttry {", "+//\t\t\tthis.currentProject.setOption(JavaCore.COMPILER_PB_INVALID_JAVADOC, this.compilerOption);", "+//\t\t\tthis.currentProject.setOption(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS, this.compilerOption);", "+//\t\t\tthis.currentProject.setOption(JavaCore.COMPILER_PB_MISSING_JAVADOC_COMMENTS, this.compilerOption);", "+//\t\t\tthis.currentProject.setOption(JavaCore.COMPILER_PB_METHOD_WITH_CONSTRUCTOR_NAME, JavaCore.IGNORE);", "+//\t\t\tthis.currentProject.setOption(JavaCore.COMPILER_DOC_COMMENT_SUPPORT, this.docCommentSupport);", "+\t\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(testedSource, fileName, this.currentProject);", "+//\t\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(this.sourceUnit, this.resolveBinding); // resolve bindings", "+//\t\t} finally {", "+//\t\t\tthis.currentProject.setOptions(originalOptions);", "+//\t\t}", "-\t */", "-\tprotected void verifyComments(String sourceStr, char[] source, List unitComments) {", "-\t\t// Get comments infos from test file", "-\t\tsetSourceComment(source);", "-\t\tassumeEquals(this.prefix+\"Wrong number of comments in source:\\n\"+sourceStr+\"\\n\", this.comments.size(), size);", "+\t\tassumeEquals(this.prefix+\"Wrong number of comments!\", this.comments.size(), size);", "+", "-\t\tfor (int i=0; i<size; i++) {", "-\t\t\tComment comment = (Comment) unitComments.get(i);", "-\t\t\tList tags = (List) allTags.get(i);", "-\t\t\t// Verify flattened content", "-\t\t\tString stringComment = (String) this.comments.get(i);", "-\t\t\tASTConverterJavadocFlattener printer = new ASTConverterJavadocFlattener(stringComment);", "-\t\t\tcomment.accept(printer);", "-\t\t\tString text = new String(source, comment.getStartPosition(), comment.getLength());", "-\t\t\tassumeEquals(this.prefix+\"Flattened comment does NOT match source!\", stringComment, text);", "-\t\t\t// Verify javdoc tags positions and bindings", "-\t\t\tif (comment.isDocComment()) {", "-\t\t\t\tJavadoc docComment = (Javadoc)comment;", "-\t\t\t\tassumeEquals(this.prefix+\"Invalid tags number in javadoc:\\n\"+docComment+\"\\n\", tags.size(), allTags(docComment));", "-\t\t\t\tverifyPositions(docComment, source);", "-\t\t\t\tif (this.resolveBinding) {", "-\t\t\t\t\tverifyBindings(docComment);", "+//\t\tif (this.comments.size() == size) {", "+\t\t\tfor (int i=0; i<size; i++) {", "+\t\t\t\tComment comment = (Comment) unitComments.get(i);", "+\t\t\t\tList tags = (List) allTags.get(i);", "+\t\t\t\t// Verify flattened content", "+\t\t\t\tString stringComment = (String) this.comments.get(i);", "+\t//\t\t\tASTConverterJavadocFlattener printer = new ASTConverterJavadocFlattener(stringComment);", "+\t//\t\t\tcomment.accept(printer);", "+\t\t\t\tString text = new String(testedSource, comment.getStartPosition(), comment.getLength());", "+\t\t\t\tassumeEquals(this.prefix+\"Flattened comment does NOT match source!\", stringComment, text);", "+\t\t\t\t// Verify javdoc tags positions and bindings", "+\t\t\t\tif (comment.isDocComment()) {", "+\t\t\t\t\tJavadoc docComment = (Javadoc)comment;", "+\t\t\t\t\tif (this.docCommentSupport.equals(JavaCore.ENABLED)) {", "+\t\t\t\t\t\tassumeEquals(this.prefix+\"Invalid tags number in javadoc:\\n\"+docComment+\"\\n\", tags.size(), allTags(docComment));", "+\t\t\t\t\t\tverifyPositions(docComment, testedSource);", "+\t\t\t\t\t\tif (this.resolveBinding) {", "+\t\t\t\t\t\t\tverifyBindings(docComment);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tassumeEquals(\"Javadoc should be flat!\", 0, docComment.tags().size());", "+\t\t\t\t\t}", "-\t\t}", "+//\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3b24e1848f1af522328df47989e093a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "1dbf45ade1eaa8473579771e92825a7887776253", "commitAfterChange": "0fb8e6d8cd5771230b88c7189dc0d95f3a5da0e3", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tprivate void verifyComments(ICompilationUnit sourceUnit) throws JavaModelException", "signatureAfterChange": " \tprotected void verifyComments(ICompilationUnit unit) throws JavaModelException", "diff": ["-\tprivate void verifyComments(ICompilationUnit sourceUnit) throws JavaModelException {", "+\tprotected void verifyComments(ICompilationUnit unit) throws JavaModelException {", "-//\t\tICompilationUnit sourceUnit = getCompilationUnit(\"Converter\" , \"src\", \"javadoc.test\"+testNbre, \"Test.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "-//\t\tassertNotNull(\"Test file Converter/src/javadoc/test\"+testNbre+\"/Test.java was not found!\", sourceUnit);", "+\t\tthis.sourceUnit = unit;", "-\t\tString fileName = sourceUnit.getElementName();", "-\t\tString sourceStr = sourceUnit.getSource();", "-\t\tIJavaProject project = sourceUnit.getJavaProject();", "+\t\tString sourceStr = this.sourceUnit.getSource();", "+\t\tIJavaProject project = this.sourceUnit.getJavaProject();", "-\t\tif (debug) {", "+\t\tif (problems) {", "-\t\t\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(sourceUnit, true); // resolve bindings", "-\t\t\t\tassertEquals(fileName+\": Unexpected problems\", 0, compilUnit.getProblems().length); //$NON-NLS-1$", "+\t\t\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(this.sourceUnit, true); // resolve bindings", "+\t\t\t\tassertEquals(this.prefix+\"Unexpected problems\", 0, compilUnit.getProblems().length); //$NON-NLS-1$", "-\t\t\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(sourceUnit, true); // resolve bindings", "+\t\t\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(this.sourceUnit, true); // resolve bindings", "-\t\tassertNotNull(fileName+\": Unexpected problems\", unitComments);", "+\t\tassertNotNull(this.prefix+\"Unexpected problems\", unitComments);", "-\t\tassertEquals(fileName+\": Wrong number of comments\", this.comments.size(), unitComments.length);", "+\t\tassertEquals(this.prefix+\"Wrong number of comments in source:\\n\"+sourceStr+\"\\n\", this.comments.size(), unitComments.length);", "+\t\t\t// Verify flattened content", "+\t\t\tString stringComment = (String) this.comments.get(i);", "+\t\t\tASTConverterJavadocFlattener printer = new ASTConverterJavadocFlattener(stringComment);", "+\t\t\tcomment.accept(printer);", "+\t\t\tString text = new String(source, comment.getStartPosition(), comment.getLength());", "+\t\t\tassertEquals(this.prefix+\"Flattened comment does NOT match source!\", stringComment, text);", "-\t\t\t\tassertEquals(fileName+\": Invalid tags number! \", tags.size(), allTags(docComment));", "+\t\t\t\tassertEquals(this.prefix+\"Invalid tags number in javadoc:\\n\"+docComment+\"\\n\", tags.size(), allTags(docComment));", "-\t\t\t} else {", "-\t\t\t\tString stringComment = (String) this.comments.get(i);", "-//\t\t\t\tASTConverterJavadocFlattener printer = new ASTConverterJavadocFlattener(stringComment);", "-//\t\t\t\tcomment.accept(printer);", "-\t\t\t\tString text = new String(source, comment.getStartPosition(), comment.getLength());", "-\t\t\t\tassertEquals(fileName+\": Flattened comment does NOT match source!\", stringComment, text);", "-\t\t\tif (debug) System.out.println(comment+\"\\nsuccessfully verified in \"+fileName);"]}], "num": 31387}
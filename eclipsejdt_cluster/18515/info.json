{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d7f9e1affb6dc1347cc1a9dec986e2ff", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43f238a9a287b832ed51d3a6f0f85ce1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "bd576a9c793017db2f7eae213c14590a7efc1565", "commitAfterChange": "6e6c13b31e68010feb85ecdb058f8741f0b58a41", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \r \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "\r \r \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding lhsTb = lhs.resolveType(scope);\r", "+\t\tthis.lhsType = lhs.resolveType(scope);\r", "-\t\tif (lhsTb == null || expressionTb == null)\r", "+\t\tif (this.lhsType == null || expressionTb == null)\r", "-\t\tif ((expression.isConstantValueOfTypeAssignableToType(expressionTb, lhsTb)\r", "-\t\t\t|| (lhsTb.isBaseType() && BaseTypeBinding.isWidening(lhsTb.id, expressionTb.id)))\r", "-\t\t\t|| (scope.areTypesCompatible(expressionTb, lhsTb))) {\r", "-\t\t\texpression.implicitWidening(lhsTb, expressionTb);\r", "-\t\t\treturn lhsTb;\r", "+\t\tif ((expression.isConstantValueOfTypeAssignableToType(expressionTb, this.lhsType)\r", "+\t\t\t|| (this.lhsType.isBaseType() && BaseTypeBinding.isWidening(this.lhsType.id, expressionTb.id)))\r", "+\t\t\t|| (scope.areTypesCompatible(expressionTb, this.lhsType))) {\r", "+\t\t\texpression.implicitWidening(this.lhsType, expressionTb);\r", "+\t\t\treturn this.lhsType;\r", "-\t\t\tlhsTb);\r", "+\t\t\tthis.lhsType);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75f28f6d5647ba83245a66ae808c09ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayInitializer.java", "commitBeforeChange": "a899cd29a75883646450816539797817299ec777", "commitAfterChange": "bdf79fcc26d1f82ae3c59775bd7a3df51c38f892", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedTb)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedTb)", "diff": ["-\t\t\t\t\tif (expression.isConstantValueOfTypeAssignableToType(expressionTb, expectedElementsTb)) {", "-\t\t\t\t\t\texpression.computeConversion(scope, expectedElementsTb, expressionTb);", "-\t\t\t\t\t} else if (BaseTypeBinding.isWidening(expectedElementsTb.id, expressionTb.id)) {", "-\t\t\t\t\t\texpression.computeConversion(scope, expectedElementsTb, expressionTb);", "-\t\t\t\t\t} else if (scope.isBoxingCompatibleWith(expressionTb, expectedElementsTb)) {", "-\t\t\t\t\t\texpression.computeConversion(scope, expectedElementsTb, expressionTb);", "+\t\t\t\t\tif (expression.isConstantValueOfTypeAssignableToType(expressionTb, expectedElementsTb)", "+\t\t\t\t\t\t|| BaseTypeBinding.isWidening(expectedElementsTb.id, expressionTb.id)", "+\t\t\t\t\t\t|| scope.isBoxingCompatibleWith(expressionTb, expectedElementsTb)) {", "+\t\t\t\t\t\t\texpression.computeConversion(scope, expectedElementsTb, expressionTb);"]}], "num": 18515}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36fcfaeeb167845b6c138a18449749c1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "836464c43a62618c5ef8ec689a1e1b82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "7bf89e29c34a348a2ed388f7cdb6c1016941cf61", "commitAfterChange": "cd5adcef3921beea7df4f6703ab58225bdb4ec39", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic boolean visit(AnnotationTypeDeclaration annotationTypeDeclaration, \t\t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(Argument argument, BlockScope scope)", "diff": ["-\t}", "-\tpublic boolean visit(AnnotationTypeDeclaration annotationTypeDeclaration,", "-\t\t\tBlockScope scope) {", "-\t\tformat(annotationTypeDeclaration);", "-\t\treturn false;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88c304da49afc1b7c9cbb073ba9b9bbc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "c62ecfd031507c11ea236866605fedd6f3a952c5", "commitAfterChange": "ded73445e8c5cf2db0a4abcc53e1680f02ae6cf7", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tpublic boolean visit(ArrayInitializer arrayInitializer, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(ArrayInitializer arrayInitializer, BlockScope scope)", "diff": ["-\tpublic boolean visit(ArrayInitializer arrayInitializer, BlockScope scope) {\t\tfinal int numberOfParens = (arrayInitializer.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\tpublic boolean visit(ArrayInitializer arrayInitializer, BlockScope scope) {", "+\t\tfinal int numberOfParens = (arrayInitializer.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "-\t\tfinal Expression[] expressions = arrayInitializer.expressions;", "-\t\tif (expressions != null) {", "-\t\t\tString array_initializer_brace_position = this.preferences.brace_position_for_array_initializer;", "-\t\t\tformatOpeningBrace(array_initializer_brace_position, this.preferences.insert_space_before_opening_brace_in_array_initializer);", "+\t\tif (this.arrayInitializersDepth < 0) {", "+\t\t\tthis.arrayInitializersDepth = 0;", "+\t\t} else {", "+\t\t\tthis.arrayInitializersDepth++;", "+\t\t}", "+\t\tint arrayInitializerIndentationLevel = this.scribe.indentationLevel;", "+\t\ttry {", "+\t\t\tfinal Expression[] expressions = arrayInitializer.expressions;", "+\t\t\tif (expressions != null) {", "+\t\t\t\tString array_initializer_brace_position = this.preferences.brace_position_for_array_initializer;", "+\t\t\t\tformatOpeningBrace(array_initializer_brace_position, this.preferences.insert_space_before_opening_brace_in_array_initializer);", "-\t\t\tint expressionsLength = expressions.length;", "-\t\t\tfinal boolean insert_new_line_after_opening_brace = this.preferences.insert_new_line_after_opening_brace_in_array_initializer;", "-\t\t\tif (expressionsLength > 1) {", "-\t\t\t\tif (insert_new_line_after_opening_brace) {", "-\t\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t\t}", "-\t\t\t\tAlignment arrayInitializerAlignment =this.scribe.createAlignment(", "-\t\t\t\t\t\tAlignment.ARRAY_INITIALIZER,", "-\t\t\t\t\t\tthis.preferences.alignment_for_expressions_in_array_initializer,", "-\t\t\t\t\t\tAlignment.R_OUTERMOST,", "-\t\t\t\t\t\texpressionsLength,", "-\t\t\t\t\t\tthis.scribe.scanner.currentPosition,", "-\t\t\t\t\t\tthis.preferences.continuation_indentation_for_array_initializer,", "-\t\t\t\t\t\ttrue);", "-", "-\t\t\t\tif (insert_new_line_after_opening_brace) {", "-\t\t\t\t\tarrayInitializerAlignment.fragmentIndentations[0] = arrayInitializerAlignment.breakIndentationLevel;", "-\t\t\t\t}", "-", "-\t\t\t\tthis.scribe.enterAlignment(arrayInitializerAlignment);", "+\t\t\t\tint expressionsLength = expressions.length;", "+\t\t\t\tfinal boolean insert_new_line_after_opening_brace = this.preferences.insert_new_line_after_opening_brace_in_array_initializer;", "-\t\t\t\tdo {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tthis.scribe.alignFragment(arrayInitializerAlignment, 0);", "-\t\t\t\t\t\tif (this.preferences.insert_space_after_opening_brace_in_array_initializer) {", "-\t\t\t\t\t\t\tthis.scribe.space();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\texpressions[0].traverse(this, scope);", "-\t\t\t\t\t\tfor (int i = 1; i < expressionsLength; i++) {", "-\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t\t\tthis.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);", "-\t\t\t\t\t\t\tthis.scribe.alignFragment(arrayInitializerAlignment, i);", "-\t\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_array_initializer) {", "+\t\t\t\tAlignment arrayInitializerAlignment = null;", "+\t\t\t\tif (expressionsLength > 1) {", "+\t\t\t\t\tif (insert_new_line_after_opening_brace) {", "+\t\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\t}", "+\t\t\t\t\tarrayInitializerAlignment = this.scribe.createAlignment(", "+\t\t\t\t\t\t\tAlignment.ARRAY_INITIALIZER,", "+\t\t\t\t\t\t\tthis.preferences.alignment_for_expressions_in_array_initializer,", "+\t\t\t\t\t\t\tAlignment.R_OUTERMOST,", "+\t\t\t\t\t\t\texpressionsLength,", "+\t\t\t\t\t\t\tthis.scribe.scanner.currentPosition,", "+\t\t\t\t\t\t\tthis.preferences.continuation_indentation_for_array_initializer,", "+\t\t\t\t\t\t\ttrue);", "+\t", "+\t\t\t\t\tif (insert_new_line_after_opening_brace) {", "+\t\t\t\t\t\tarrayInitializerAlignment.fragmentIndentations[0] = arrayInitializerAlignment.breakIndentationLevel;", "+\t\t\t\t\t}", "+\t", "+\t\t\t\t\tthis.scribe.enterAlignment(arrayInitializerAlignment);", "+\t\t\t\t\tdo {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tthis.scribe.alignFragment(arrayInitializerAlignment, 0);", "+\t\t\t\t\t\t\tif (this.preferences.insert_space_after_opening_brace_in_array_initializer) {", "-\t\t\t\t\t\t\texpressions[i].traverse(this, scope);", "-\t\t\t\t\t\t\tif (i == expressionsLength - 1) {", "-\t\t\t\t\t\t\t\tif (isNextToken(TerminalTokens.TokenNameCOMMA)) {", "-\t\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\t\t\t\t\tthis.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);", "+\t\t\t\t\t\t\texpressions[0].traverse(this, scope);", "+\t\t\t\t\t\t\tfor (int i = 1; i < expressionsLength; i++) {", "+\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "+\t\t\t\t\t\t\t\tthis.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);", "+\t\t\t\t\t\t\t\tthis.scribe.alignFragment(arrayInitializerAlignment, i);", "+\t\t\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_array_initializer) {", "+\t\t\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\texpressions[i].traverse(this, scope);", "+\t\t\t\t\t\t\t\tif (i == expressionsLength - 1) {", "+\t\t\t\t\t\t\t\t\tif (isNextToken(TerminalTokens.TokenNameCOMMA)) {", "+\t\t\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "+\t\t\t\t\t\t\t\t\t\tthis.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tok = true;", "+\t\t\t\t\t\t} catch (AlignmentException e) {", "+\t\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t\t\t\tok = true;", "-\t\t\t\t\t} catch (AlignmentException e) {", "-\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "-\t\t\t\t\t}", "-\t\t\t\t} while (!ok);", "-\t\t\t\tthis.scribe.exitAlignment(arrayInitializerAlignment, true);", "-\t\t\t} else {", "-\t\t\t\tif (insert_new_line_after_opening_brace) {", "-\t\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t\t\tthis.scribe.indent();", "-\t\t\t\t}", "-\t\t\t\t// we don't need to use an alignment", "-\t\t\t\tif (this.preferences.insert_space_after_opening_brace_in_array_initializer) {", "-\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t} while (!ok);", "+\t\t\t\t\tthis.scribe.exitAlignment(arrayInitializerAlignment, true);", "-\t\t\t\t\tthis.scribe.needSpace = false;", "+\t\t\t\t\t// Use an alignment with no break in case when the array initializer", "+\t\t\t\t\t// is not inside method arguments alignments", "+\t\t\t\t\tif (this.scribe.currentAlignment == null || this.scribe.currentAlignment.kind != Alignment.MESSAGE_ARGUMENTS) {", "+\t\t\t\t\t\tarrayInitializerAlignment = this.scribe.createAlignment(", "+\t\t\t\t\t\t\t\tAlignment.ARRAY_INITIALIZER,", "+\t\t\t\t\t\t\t\tthis.preferences.alignment_for_expressions_in_array_initializer,", "+\t\t\t\t\t\t\t\tAlignment.R_OUTERMOST,", "+\t\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t\tthis.scribe.scanner.currentPosition,", "+\t\t\t\t\t\t\t\tthis.preferences.continuation_indentation_for_array_initializer,", "+\t\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\tthis.scribe.enterAlignment(arrayInitializerAlignment);", "+\t\t\t\t\t}", "+\t\t\t\t\tdo {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tif (insert_new_line_after_opening_brace) {", "+\t\t\t\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\t\t\t\tthis.scribe.indent();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// we don't need to use an alignment", "+\t\t\t\t\t\t\tif (this.preferences.insert_space_after_opening_brace_in_array_initializer) {", "+\t\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tthis.scribe.needSpace = false;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\texpressions[0].traverse(this, scope);", "+\t\t\t\t\t\t\tif (isNextToken(TerminalTokens.TokenNameCOMMA)) {", "+\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "+\t\t\t\t\t\t\t\tthis.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (insert_new_line_after_opening_brace) {", "+\t\t\t\t\t\t\t\tthis.scribe.unIndent();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tok = true;", "+\t\t\t\t\t\t} catch (AlignmentException e) {", "+\t\t\t\t\t\t\tif (arrayInitializerAlignment == null) throw e;", "+\t\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} while (!ok);", "+\t\t\t\t\tif (arrayInitializerAlignment != null) {", "+\t\t\t\t\t\tthis.scribe.exitAlignment(arrayInitializerAlignment, true);", "+\t\t\t\t\t}", "-\t\t\t\texpressions[0].traverse(this, scope);", "-\t\t\t\tif (isNextToken(TerminalTokens.TokenNameCOMMA)) {", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\tthis.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);", "+\t\t\t\tif (this.preferences.insert_new_line_before_closing_brace_in_array_initializer) {", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t} else if (this.preferences.insert_space_before_closing_brace_in_array_initializer) {", "+\t\t\t\t\tthis.scribe.space();", "-\t\t\t\tif (insert_new_line_after_opening_brace) {", "-\t\t\t\t\tthis.scribe.unIndent();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (this.preferences.insert_new_line_before_closing_brace_in_array_initializer) {", "-\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t} else if (this.preferences.insert_space_before_closing_brace_in_array_initializer) {", "-\t\t\t\tthis.scribe.space();", "-\t\t\t}", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE, false);", "-\t\t\tif (array_initializer_brace_position.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "-\t\t\t\tthis.scribe.unIndent();", "-\t\t\t}", "-\t\t} else {", "-\t\t\tboolean keepEmptyArrayInitializerOnTheSameLine = this.preferences.keep_empty_array_initializer_on_one_line;", "-\t\t\tString array_initializer_brace_position = this.preferences.brace_position_for_array_initializer;", "-\t\t\tif (keepEmptyArrayInitializerOnTheSameLine) {", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACE, this.preferences.insert_space_before_opening_brace_in_array_initializer);", "-\t\t\t\tif (isNextToken(TerminalTokens.TokenNameCOMMA)) {", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\tthis.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);", "-\t\t\t\t}", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE, this.preferences.insert_space_between_empty_braces_in_array_initializer);", "-\t\t\t} else {", "-\t\t\t\tformatOpeningBrace(array_initializer_brace_position, this.preferences.insert_space_before_opening_brace_in_array_initializer);", "-\t\t\t\tif (isNextToken(TerminalTokens.TokenNameCOMMA)) {", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "-\t\t\t\t\tthis.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);", "-\t\t\t\t}", "-\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE, this.preferences.insert_space_between_empty_braces_in_array_initializer);", "+\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE, false, Scribe.PRESERVE_EMPTY_LINES_IN_CLOSING_ARRAY_INITIALIZER + (arrayInitializerIndentationLevel << 16));", "+\t\t\t} else {", "+\t\t\t\tboolean keepEmptyArrayInitializerOnTheSameLine = this.preferences.keep_empty_array_initializer_on_one_line;", "+\t\t\t\tString array_initializer_brace_position = this.preferences.brace_position_for_array_initializer;", "+\t\t\t\tif (keepEmptyArrayInitializerOnTheSameLine) {", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACE, this.preferences.insert_space_before_opening_brace_in_array_initializer);", "+\t\t\t\t\tif (isNextToken(TerminalTokens.TokenNameCOMMA)) {", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "+\t\t\t\t\t\tthis.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE, this.preferences.insert_space_between_empty_braces_in_array_initializer);", "+\t\t\t\t} else {", "+\t\t\t\t\tformatOpeningBrace(array_initializer_brace_position, this.preferences.insert_space_before_opening_brace_in_array_initializer);", "+\t\t\t\t\tif (isNextToken(TerminalTokens.TokenNameCOMMA)) {", "+\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_array_initializer);", "+\t\t\t\t\t\tthis.scribe.printComment(CodeFormatter.K_UNKNOWN, Scribe.BASIC_TRAILING_COMMENT);", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE, this.preferences.insert_space_between_empty_braces_in_array_initializer);", "+\t\t\t\t\tif (array_initializer_brace_position.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "+\t\t\t\t\t\tthis.scribe.unIndent();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t} finally {", "+\t\t\tthis.arrayInitializersDepth--;", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a00d65bb83d1dcb86d0801e09c4d6e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "ab9430a3c2886efbbcdfa22a396b4380d0e945dc", "commitAfterChange": "15af5c9febf3e53f2418ebc52d74d4a523f18cbf", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "  \tprivate void printLineComment(int commentStart, int commentEnd)", "signatureAfterChange": "  \tprivate void printLineComment(int commentStart, int commentEnd)", "diff": ["+\t\t\t\tcase TerminalTokens.TokenNameIdentifier:", "+\t\t\t\t\tif (previousToken == -1 || previousToken == SKIP_FIRST_WHITESPACE_TOKEN) {", "+\t\t\t\t\t\tchar[] identifier = this.scanner.getCurrentTokenSource();", "+\t\t\t\t\t\tint startPosition = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\t\tint restartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\tif (CharOperation.equals(identifier, Parser.FALL_THROUGH_TAG, 0, 5/*length of string \"$FALL\"*/) && this.scanner.currentCharacter == '-') {", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tthis.scanner.getNextToken(); //  consume the '-'", "+\t\t\t\t\t\t\t\ttoken = this.scanner.getNextToken(); // consume the \"THROUGH\"", "+\t\t\t\t\t\t\t\tif (token == TerminalTokens.TokenNameIdentifier) {", "+\t\t\t\t\t\t\t\t\tidentifier = this.scanner.getCurrentTokenSource();", "+\t\t\t\t\t\t\t\t\tif (CharOperation.endsWith(Parser.FALL_THROUGH_TAG, identifier)) {", "+\t\t\t\t\t\t\t\t\t\t// the comment starts with a fall through", "+\t\t\t\t\t\t\t\t\t\tif (previousToken == SKIP_FIRST_WHITESPACE_TOKEN) {", "+\t\t\t\t\t\t\t\t\t\t\taddReplaceEdit(spaceStartPosition, startPosition-1, \" \"); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tthis.scanner.startPosition = startPosition;", "+\t\t\t\t\t\t\t\t\t\tpreviousToken = token;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} catch (InvalidInputException iie) {", "+\t\t\t\t\t\t\t\t// skip", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// this was not a valid fall-through tag, hence continue to process the comment normally", "+\t\t\t\t\t\tthis.scanner.startPosition = startPosition;", "+\t\t\t    \t\tthis.scanner.currentPosition = restartPosition;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;"]}], "num": 30585}
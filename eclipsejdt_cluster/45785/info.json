{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca7eee5102c0b724e39fa377a85dc428", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00178e8ffa15f5798bd16118dbbe4e4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void generatePostIncrement( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tCompoundAssignment postIncrement, \t\tboolean valueRequired)", "signatureAfterChange": "  public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-\tpublic void generatePostIncrement(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tCompoundAssignment postIncrement,", "-\t\tboolean valueRequired) {", "-", "-\t\treceiver.generateCode(currentScope, codeStream, true);", "-\t\tif (receiver instanceof CastExpression\t// ((type[])null)[0]", "-\t\t\t\t&& ((CastExpression)receiver).innermostCastedExpression().resolvedType == TypeBinding.NULL){", "-\t\t\tcodeStream.checkcast(receiver.resolvedType); ", "-\t\t}\t", "-\t\tposition.generateCode(currentScope, codeStream, true);", "-\t\tcodeStream.dup2();", "-\t\tcodeStream.arrayAt(this.resolvedType.id);", "-\t\tif (valueRequired) {", "-\t\t\tif ((this.resolvedType == TypeBinding.LONG)", "-\t\t\t\t|| (this.resolvedType == TypeBinding.DOUBLE)) {", "-\t\t\t\tcodeStream.dup2_x2();", "-\t\t\t\tcodeStream.dup_x2();", "-\t\t}", "-\t\tcodeStream.generateImplicitConversion(implicitConversion);\t\t", "-\t\tcodeStream.generateConstant(", "-\t\t\tpostIncrement.expression.constant,", "-\t\t\timplicitConversion);", "-\t\tcodeStream.sendOperator(postIncrement.operator, this.implicitConversion & COMPILE_TYPE_MASK);", "-\t\tcodeStream.generateImplicitConversion(", "-\t\t\tpostIncrement.preAssignImplicitConversion);", "-\t\tcodeStream.arrayAtPut(this.resolvedType.id, false);", "+", "+public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired) {", "+\tthis.receiver.generateCode(currentScope, codeStream, true);", "+\tif (this.receiver instanceof CastExpression\t// ((type[])null)[0]", "+\t\t\t&& ((CastExpression)this.receiver).innermostCastedExpression().resolvedType == TypeBinding.NULL){", "+\t\tcodeStream.checkcast(this.receiver.resolvedType); ", "+\t}\t", "+\tthis.position.generateCode(currentScope, codeStream, true);", "+\tcodeStream.dup2();", "+\tcodeStream.arrayAt(this.resolvedType.id);", "+\tif (valueRequired) {", "+\t\tif ((this.resolvedType == TypeBinding.LONG)", "+\t\t\t|| (this.resolvedType == TypeBinding.DOUBLE)) {", "+\t\t\tcodeStream.dup2_x2();", "+\t\t} else {", "+\t\t\tcodeStream.dup_x2();", "+\t\t}", "+\t}", "+\tcodeStream.generateImplicitConversion(this.implicitConversion);\t\t", "+\tcodeStream.generateConstant(", "+\t\tpostIncrement.expression.constant,", "+\t\tthis.implicitConversion);", "+\tcodeStream.sendOperator(postIncrement.operator, this.implicitConversion & TypeIds.COMPILE_TYPE_MASK);", "+\tcodeStream.generateImplicitConversion(", "+\t\tpostIncrement.preAssignImplicitConversion);", "+\tcodeStream.arrayAtPut(this.resolvedType.id, false);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0992b94e359a80b48e8bad5eae295361", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "bffd05273174fba670489cd637d40ac2a4d0913b", "commitAfterChange": "5cda6ee5d9726ecd4c3800dc98f96b9913f2498c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r protected void activate()", "signatureAfterChange": "\r protected void activate()", "diff": ["-\tfProjectRegion = new Region();\r", "-\tfPackageRegion = new Region();\r", "-\tfRootRegion = new Region();\r", "+\tthis.projectRegion = new Region();\r", "+\tthis.packageRegion = new Region();\r", "+\tthis.rootRegion = new Region();\r", "-\t\tfPackageRegion.add(pkg);\r", "-\t\tfRootRegion.add(pkg.getParent());\r", "+\t\tthis.packageRegion.add(pkg);\r", "+\t\tthis.rootRegion.add(pkg.getParent());\r", "-\t\t\tfProjectRegion.add(project);\r", "+\t\t\tthis.projectRegion.add(project);\r", "-\tfIsActivated = true;\r", "+\tthis.isActivated = true;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15fc83f83e35c7fb761f3894b54ccd10", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void generateCompoundAssignment( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tExpression expression, \t\tint operator, \t\tint assignmentImplicitConversion, \t\tboolean valueRequired)", "signatureAfterChange": "  public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-", "-\tpublic void generateCompoundAssignment(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tExpression expression,", "-\t\tint operator,", "-\t\tint assignmentImplicitConversion,", "-\t\tboolean valueRequired) {", "-", "-\t\treceiver.generateCode(currentScope, codeStream, true);", "-\t\tif (receiver instanceof CastExpression\t// ((type[])null)[0]", "-\t\t\t\t&& ((CastExpression)receiver).innermostCastedExpression().resolvedType == TypeBinding.NULL){", "-\t\t\tcodeStream.checkcast(receiver.resolvedType); ", "-\t\t}\t", "-\t\tposition.generateCode(currentScope, codeStream, true);", "-\t\tcodeStream.dup2();", "-\t\tcodeStream.arrayAt(this.resolvedType.id);", "-\t\tint operationTypeID;", "-\t\tswitch(operationTypeID = (implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) {", "-\t\t\tcase T_JavaLangString :", "-\t\t\tcase T_JavaLangObject :", "-\t\t\tcase T_undefined :", "-\t\t\t\tcodeStream.generateStringConcatenationAppend(currentScope, null, expression);", "-\t\t\t\t// promote the array reference to the suitable operation type", "-\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t// generate the increment value (will by itself  be promoted to the operation value)", "-\t\t\t\tif (expression == IntLiteral.One) { // prefix operation", "-\t\t\t\t\tcodeStream.generateConstant(expression.constant, implicitConversion);", "-\t\t\t\t} else {", "-\t\t\t\t\texpression.generateCode(currentScope, codeStream, true);", "-\t\t\t\t}", "-\t\t\t\t// perform the operation", "-\t\t\t\tcodeStream.sendOperator(operator, operationTypeID);", "-\t\t\t\t// cast the value back to the array reference type", "-\t\t\t\tcodeStream.generateImplicitConversion(assignmentImplicitConversion);", "-\t\tcodeStream.arrayAtPut(this.resolvedType.id, valueRequired);", "+public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired) {", "+\tthis.receiver.generateCode(currentScope, codeStream, true);", "+\tif (this.receiver instanceof CastExpression\t// ((type[])null)[0]", "+\t\t\t&& ((CastExpression)this.receiver).innermostCastedExpression().resolvedType == TypeBinding.NULL){", "+\t\tcodeStream.checkcast(this.receiver.resolvedType); ", "+\t}\t", "+\tthis.position.generateCode(currentScope, codeStream, true);", "+\tcodeStream.dup2();", "+\tcodeStream.arrayAt(this.resolvedType.id);", "+\tint operationTypeID;", "+\tswitch(operationTypeID = (this.implicitConversion & TypeIds.IMPLICIT_CONVERSION_MASK) >> 4) {", "+\t\tcase T_JavaLangString :", "+\t\tcase T_JavaLangObject :", "+\t\tcase T_undefined :", "+\t\t\tcodeStream.generateStringConcatenationAppend(currentScope, null, expression);", "+\t\t\tbreak;", "+\t\tdefault :", "+\t\t\t// promote the array reference to the suitable operation type", "+\t\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t\t\t// generate the increment value (will by itself  be promoted to the operation value)", "+\t\t\tif (expression == IntLiteral.One) { // prefix operation", "+\t\t\t\tcodeStream.generateConstant(expression.constant, this.implicitConversion);", "+\t\t\t\texpression.generateCode(currentScope, codeStream, true);", "+\t\t\t// perform the operation", "+\t\t\tcodeStream.sendOperator(operator, operationTypeID);", "+\t\t\t// cast the value back to the array reference type", "+\t\t\tcodeStream.generateImplicitConversion(assignmentImplicitConversion);", "+\tcodeStream.arrayAtPut(this.resolvedType.id, valueRequired);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23f45b0ef098ece1b371422868cebef9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\tif (binding.declaringClass != this.qualifyingType", "+\tif (this.binding.declaringClass != this.qualifyingType", "-\t\t\t\t&& (!receiver.isImplicitThis() || !binding.isStatic())", "-\t\t\t\t&& binding.declaringClass.id != T_Object) // no change for Object methods", "-\t\t\t|| !binding.declaringClass.canBeSeenBy(currentScope))) {", "-\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedMethodBinding(binding, (ReferenceBinding) this.qualifyingType);", "+\t\t\t\t&& (!this.receiver.isImplicitThis() || !this.binding.isStatic())", "+\t\t\t\t&& this.binding.declaringClass.id != T_Object) // no change for Object methods", "+\t\t\t|| !this.binding.declaringClass.canBeSeenBy(currentScope))) {", "+\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedMethodBinding(this.binding, (ReferenceBinding) this.qualifyingType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43abdde9cb3b011c24315914d787e473", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "f8e9cc8d760d40e7aca97ebb627c5ab02392d804", "commitAfterChange": "78ca28be54dd37f4936afd7f9f84bc9cf69d2754", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \t\tpublic void logProblemsSummary(int globalProblemsCount, \t\t\tint globalErrorsCount, int globalWarningsCount, int globalTasksCount)", "signatureAfterChange": " \t\tpublic void logProblemsSummary(int globalProblemsCount, \t\t\tint globalErrorsCount, int globalWarningsCount, int globalTasksCount)", "diff": ["-\t\t\t\tparameters.clear();", "-\t\t\t\tparameters.put(NUMBER_OF_PROBLEMS, new Integer(globalProblemsCount));", "-\t\t\t\tparameters.put(NUMBER_OF_ERRORS, new Integer(globalErrorsCount));", "-\t\t\t\tparameters.put(NUMBER_OF_WARNINGS, new Integer(globalWarningsCount));", "-\t\t\t\tparameters.put(NUMBER_OF_TASKS, new Integer(globalTasksCount));", "-\t\t\t\tthis.printTag(PROBLEM_SUMMARY, parameters, true, true);", "+\t\t\t\tthis.parameters.clear();", "+\t\t\t\tthis.parameters.put(NUMBER_OF_PROBLEMS, new Integer(globalProblemsCount));", "+\t\t\t\tthis.parameters.put(NUMBER_OF_ERRORS, new Integer(globalErrorsCount));", "+\t\t\t\tthis.parameters.put(NUMBER_OF_WARNINGS, new Integer(globalWarningsCount));", "+\t\t\t\tthis.parameters.put(NUMBER_OF_TASKS, new Integer(globalTasksCount));", "+\t\t\t\tthis.printTag(PROBLEM_SUMMARY, this.parameters, true, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49733b950f8c1d019db2e335fc75638e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public MethodBinding[] getDefaultAbstractMethods()", "signatureAfterChange": " public MethodBinding[] getDefaultAbstractMethods()", "diff": ["-\tfor (int i = methods.length; --i >= 0;)", "-\t\tif (methods[i].isDefaultAbstract())", "+\tfor (int i = this.methods.length; --i >= 0;)", "+\t\tif (this.methods[i].isDefaultAbstract())", "-\tfor (int i = methods.length; --i >= 0;)", "-\t\tif (methods[i].isDefaultAbstract())", "-\t\t\tresult[count++] = methods[i];", "+\tfor (int i = this.methods.length; --i >= 0;)", "+\t\tif (this.methods[i].isDefaultAbstract())", "+\t\t\tresult[count++] = this.methods[i];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4dfc61c14e303b469d21219449f68ff8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathDirectory.java", "commitBeforeChange": "f4fc58ef48a6d9d6c398d56576d18d3e70e62c86", "commitAfterChange": "6537a24c88f25f9b49763273df663f64d4b48580", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  String[] directoryList(String qualifiedPackageName)", "signatureAfterChange": "  String[] directoryList(String qualifiedPackageName)", "diff": ["-\tString[] dirList = (String[]) directoryCache.get(qualifiedPackageName);", "-\tif (dirList == missingPackageHolder) return null; // package exists in another classpath directory or jar", "+\tString[] dirList = (String[]) this.directoryCache.get(qualifiedPackageName);", "+\tif (dirList == this.missingPackageHolder) return null; // package exists in another classpath directory or jar", "-\tFile dir = new File(path + qualifiedPackageName);", "+\tFile dir = new File(this.path + qualifiedPackageName);", "-\t\tdirectoryCache.put(qualifiedPackageName, dirList);", "+\t\tthis.directoryCache.put(qualifiedPackageName, dirList);", "-\tdirectoryCache.put(qualifiedPackageName, missingPackageHolder);", "+\tthis.directoryCache.put(qualifiedPackageName, this.missingPackageHolder);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "628747a6511c827b2cf2ad9d0db7cc12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "59119c56d69b798c59e5389db2508c4896e5dbdf", "commitAfterChange": "c861a0381ba1376aa01c18d9f68e1168bdac8aab", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic boolean visit(SuperMethodInvocation node)", "signatureAfterChange": " \tpublic boolean visit(SuperMethodInvocation node)", "diff": ["-\t\t\tbuffer.append(\".\");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\".\");//$NON-NLS-1$", "-\t\tbuffer.append(\"super.\");//$NON-NLS-1$", "+\t\tthis.buffer.append(\"super.\");//$NON-NLS-1$", "-\t\tbuffer.append(\"(\");//$NON-NLS-1$", "+\t\tthis.buffer.append(\"(\");//$NON-NLS-1$", "-\t\t\t\tbuffer.append(\",\");//$NON-NLS-1$", "+\t\t\t\tthis.buffer.append(\",\");//$NON-NLS-1$", "-\t\tbuffer.append(\")\");//$NON-NLS-1$", "+\t\tthis.buffer.append(\")\");//$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64fec4e6dbb185f640f902aec8ae1dea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void enterField( \tint declarationStart, \tint modifiers, \tchar[] type, \tchar[] name, \tint nameSourceStart, \tint nameSourceEnd)", "signatureAfterChange": " public void enterField( \tint declarationStart, \tint modifiers, \tchar[] type, \tchar[] name, \tint nameSourceStart, \tint nameSourceEnd)", "diff": ["-\t\tSourceTypeElementInfo parentInfo = (SourceTypeElementInfo) infoStack.peek();", "-\t\tJavaElement parentHandle= (JavaElement)handleStack.peek();", "+\t\tSourceTypeElementInfo parentInfo = (SourceTypeElementInfo) this.infoStack.peek();", "+\t\tJavaElement parentHandle= (JavaElement) this.handleStack.peek();", "-\t\tnewElements.put(handle, info);", "+\t\tthis.newElements.put(handle, info);", "-\t\tinfoStack.push(info);", "-\t\thandleStack.push(handle);", "+\t\tthis.infoStack.push(info);", "+\t\tthis.handleStack.push(handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "655a7cdb4343ad02b17faf27206c8541", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "59119c56d69b798c59e5389db2508c4896e5dbdf", "commitAfterChange": "c861a0381ba1376aa01c18d9f68e1168bdac8aab", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic boolean visit(ArrayCreation node)", "signatureAfterChange": " \tpublic boolean visit(ArrayCreation node)", "diff": ["-\t\tbuffer.append(\"new \");//$NON-NLS-1$", "+\t\tthis.buffer.append(\"new \");//$NON-NLS-1$", "-\t\t\tbuffer.append(\"[\");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\"[\");//$NON-NLS-1$", "-\t\t\tbuffer.append(\"]\");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\"]\");//$NON-NLS-1$", "-\t\t\tbuffer.append(\"[]\");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\"[]\");//$NON-NLS-1$", "-\t\t\tbuffer.append(\"=\");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\"=\");//$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "697a750fcf1a326c90de4532e6a5a620", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void generateAssignment( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tAssignment assignment, \t\tboolean valueRequired)", "signatureAfterChange": "  public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired)", "diff": ["-\tpublic void generateAssignment(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tAssignment assignment,", "-\t\tboolean valueRequired) {", "-", "-\t\tint pc = codeStream.position;", "-\t\treceiver.generateCode(currentScope, codeStream, true);", "-\t\tif (receiver instanceof CastExpression\t// ((type[])null)[0]", "-\t\t\t\t&& ((CastExpression)receiver).innermostCastedExpression().resolvedType == TypeBinding.NULL){", "-\t\t\tcodeStream.checkcast(receiver.resolvedType); ", "-\t\t}\t", "-\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t\tposition.generateCode(currentScope, codeStream, true);", "-\t\tassignment.expression.generateCode(currentScope, codeStream, true);", "-\t\tcodeStream.arrayAtPut(this.resolvedType.id, valueRequired);", "-\t\tif (valueRequired) {", "-\t\t\tcodeStream.generateImplicitConversion(assignment.implicitConversion);", "-\t\t}", "+public void generateAssignment(BlockScope currentScope, CodeStream codeStream, Assignment assignment, boolean valueRequired) {", "+\tint pc = codeStream.position;", "+\tthis.receiver.generateCode(currentScope, codeStream, true);", "+\tif (this.receiver instanceof CastExpression\t// ((type[])null)[0]", "+\t\t\t&& ((CastExpression)this.receiver).innermostCastedExpression().resolvedType == TypeBinding.NULL){", "+\t\tcodeStream.checkcast(this.receiver.resolvedType); ", "+\t}\t", "+\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\tthis.position.generateCode(currentScope, codeStream, true);", "+\tassignment.expression.generateCode(currentScope, codeStream, true);", "+\tcodeStream.arrayAtPut(this.resolvedType.id, valueRequired);", "+\tif (valueRequired) {", "+\t\tcodeStream.generateImplicitConversion(assignment.implicitConversion);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cd01bc35cb5c1af734f0a418fea61c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void enterInitializer( \tint declarationSourceStart, \tint modifiers)", "signatureAfterChange": " public void enterInitializer( \tint declarationSourceStart, \tint modifiers)", "diff": ["-\t\tJavaElementInfo parentInfo = (JavaElementInfo) infoStack.peek();", "-\t\tJavaElement parentHandle= (JavaElement)handleStack.peek();", "+\t\tJavaElementInfo parentInfo = (JavaElementInfo) this.infoStack.peek();", "+\t\tJavaElement parentHandle= (JavaElement) this.handleStack.peek();", "-\t\tnewElements.put(handle, info);", "+\t\tthis.newElements.put(handle, info);", "-\t\tinfoStack.push(info);", "-\t\thandleStack.push(handle);", "+\t\tthis.infoStack.push(info);", "+\t\tthis.handleStack.push(handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "701709a1ced63097167ec0ba88903ed6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "a8c43fb1703bc9585d371b45c5bc751b66052e18", "commitAfterChange": "40ace06b6f9aaa2f71ebf049ffa37ed745fa6ef3", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 102, "signatureBeforeChange": " \tpublic boolean visit(IfStatement node)", "signatureAfterChange": " \tpublic boolean visit(IfStatement node)", "diff": ["-\t\t\t\t\tpos= rewriteBodyNode(node, IfStatement.THEN_STATEMENT_PROPERTY, pos, endPos, indent, fFormatter.IF_BLOCK_NO_ELSE); ", "+\t\t\t\t\tpos= rewriteBodyNode(node, IfStatement.THEN_STATEMENT_PROPERTY, pos, endPos, indent, this.formatter.IF_BLOCK_NO_ELSE); ", "-\t\t\t\t\tpos= rewriteBodyNode(node, IfStatement.THEN_STATEMENT_PROPERTY, pos, endPos, indent, fFormatter.IF_BLOCK_WITH_ELSE); ", "+\t\t\t\t\tpos= rewriteBodyNode(node, IfStatement.THEN_STATEMENT_PROPERTY, pos, endPos, indent, this.formatter.IF_BLOCK_WITH_ELSE); ", "-\t\t\t\trewriteBodyNode(node, IfStatement.ELSE_STATEMENT_PROPERTY, pos, -1, indent, fFormatter.ELSE_AFTER_BLOCK);", "+\t\t\t\trewriteBodyNode(node, IfStatement.ELSE_STATEMENT_PROPERTY, pos, -1, indent, this.formatter.ELSE_AFTER_BLOCK);", "-\t\t\t\trewriteBodyNode(node, IfStatement.ELSE_STATEMENT_PROPERTY, pos, -1, indent, fFormatter.ELSE_AFTER_STATEMENT);", "+\t\t\t\trewriteBodyNode(node, IfStatement.ELSE_STATEMENT_PROPERTY, pos, -1, indent, this.formatter.ELSE_AFTER_STATEMENT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7051936e5ff374363379eb4484f07c93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " protected void enterMethod( \tint declarationStart, \tint modifiers, \tchar[] returnType, \tchar[] name, \tint nameSourceStart, \tint nameSourceEnd, \tchar[][] parameterTypes, \tchar[][] parameterNames, \tchar[][] exceptionTypes, \tboolean isConstructor)", "signatureAfterChange": " protected void enterMethod( \tint declarationStart, \tint modifiers, \tchar[] returnType, \tchar[] name, \tint nameSourceStart, \tint nameSourceEnd, \tchar[][] parameterTypes, \tchar[][] parameterNames, \tchar[][] exceptionTypes, \tboolean isConstructor)", "diff": ["-\t\tSourceTypeElementInfo parentInfo = (SourceTypeElementInfo) infoStack.peek();", "-\t\tJavaElement parentHandle= (JavaElement)handleStack.peek();", "+\t\tSourceTypeElementInfo parentInfo = (SourceTypeElementInfo) this.infoStack.peek();", "+\t\tJavaElement parentHandle= (JavaElement) this.handleStack.peek();", "-\t\tnewElements.put(handle, info);", "-\t\tinfoStack.push(info);", "-\t\thandleStack.push(handle);", "+\t\tthis.newElements.put(handle, info);", "+\t\tthis.infoStack.push(info);", "+\t\tthis.handleStack.push(handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73e56f2e424238dd1d6a334d03235f0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "ac2c3539b72e65a4a4e0b168769da151e63c5ff1", "commitAfterChange": "014710437062a15282800b8efb747a8973068ba8", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": " \tprivate void removeLeadingAndTrailingCommentsFromLiteral(ASTNode node)", "signatureAfterChange": " \tprivate void removeLeadingAndTrailingCommentsFromLiteral(ASTNode node)", "diff": ["-\t\tscanner.resetTo(start, start + node.getLength());", "+\t\tthis.scanner.resetTo(start, start + node.getLength());", "-\t\t\twhile((token = scanner.getNextToken()) != TerminalTokens.TokenNameEOF)  {", "+\t\t\twhile((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF)  {", "-\t\t\t\t\t\t\tstartPosition = scanner.startPosition;", "+\t\t\t\t\t\t\tstartPosition = this.scanner.startPosition;", "-\t\t\t\t\t\tint end = scanner.currentPosition;", "+\t\t\t\t\t\tint end = this.scanner.currentPosition;", "-\t\t\t\t\t\tstartPosition = scanner.startPosition;", "+\t\t\t\t\t\tstartPosition = this.scanner.startPosition;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b016ce2a25f3050c4cca1c11e28ffb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "8257947b843e715f21b92a87dc4b423cbc1eed03", "commitAfterChange": "00cae100ff4808e2019f6a4d94df4143c8fabbd0", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tprivate void performPreBuildCheck( \t\tIResourceDelta delta, \t\tIJavaElement parent)", "signatureAfterChange": " \tprivate void performPreBuildCheck( \t\tIResourceDelta delta, \t\tIJavaElement parent)", "diff": ["-\t\t\t\t\t\t} else if (JavaModelManager.getJavaModelManager().getJavaModel().findJavaProject(project) != null) {", "+\t\t\t\t\t\t} else if (this.manager.getJavaModel().findJavaProject(project) != null) {", "-\t\t\t\t\t\t\tthis.rootsAreStale = true;", "+\t\t\t\t\t\t\tthis.state.rootsAreStale = true;", "-\t\t\t\t\t\tthis.rootsAreStale = true;", "+\t\t\t\t\t\tthis.state.rootsAreStale = true;", "-\t\t\t\t\t\tthis.rootsAreStale = true;", "+\t\t\t\t\t\tthis.state.rootsAreStale = true;", "-\t\t\t\t\t\tthis.rootsAreStale = true;", "+\t\t\t\t\t\tthis.state.rootsAreStale = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9320c2091bea49f1a0a5ed87300bd79b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate void parseReturn()", "signatureAfterChange": " \tprivate void parseReturn()", "diff": ["-\t\t\tthis.javadoc.returnStatement = new JavadocReturnStatement(scanner.getCurrentTokenStartPosition(),", "-\t\t\t\t\tscanner.getCurrentTokenEndPosition(),", "-\t\t\t\t\tscanner.getRawTokenSourceEnd());", "+\t\t\tthis.javadoc.returnStatement = new JavadocReturnStatement(this.scanner.getCurrentTokenStartPosition(),", "+\t\t\t\t\tthis.scanner.getCurrentTokenEndPosition(),", "+\t\t\t\t\tthis.scanner.getRawTokenSourceEnd());", "-\t\t\tthis.sourceParser.problemReporter().javadocDuplicateReturnTag(", "-\t\t\t\t\tscanner.getCurrentTokenStartPosition(),", "-\t\t\t\t\tscanner.getCurrentTokenEndPosition());", "+\t\t\tthis.sourceParser.problemReporter().javadocDuplicatedReturnTag(", "+\t\t\t\t\tthis.scanner.getCurrentTokenStartPosition(),", "+\t\t\t\t\tthis.scanner.getCurrentTokenEndPosition());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9704de8c2148fc1a5ef7f735f1edbed4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "59119c56d69b798c59e5389db2508c4896e5dbdf", "commitAfterChange": "c861a0381ba1376aa01c18d9f68e1168bdac8aab", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic boolean visit(ClassInstanceCreation node)", "signatureAfterChange": " \tpublic boolean visit(ClassInstanceCreation node)", "diff": ["-\t\t\tbuffer.append(\".\");//$NON-NLS-1$", "+\t\t\tthis.buffer.append(\".\");//$NON-NLS-1$", "-\t\tbuffer.append(\"new \");//$NON-NLS-1$", "+\t\tthis.buffer.append(\"new \");//$NON-NLS-1$", "-\t\tbuffer.append(\"(\");//$NON-NLS-1$", "+\t\tthis.buffer.append(\"(\");//$NON-NLS-1$", "-\t\t\t\tbuffer.append(\",\");//$NON-NLS-1$", "+\t\t\t\tthis.buffer.append(\",\");//$NON-NLS-1$", "-\t\tbuffer.append(\")\");//$NON-NLS-1$", "+\t\tthis.buffer.append(\")\");//$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad0cd088c232646d62f91fdb3b3a6e2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "6e47268ed79fd7b89fd58e0a5c1b77470c0792ef", "commitAfterChange": "dcb63c7bea407ce9399b33fb2441f8ca456fabd4", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "\r public void mergeDeltas()", "signatureAfterChange": "\r public void mergeDeltas()", "diff": ["-\tif (fJavaModelDeltas.size() <= 1) return;\r", "+\tif (this.javaModelDeltas.size() <= 1) return;\r", "-\t\tSystem.out.println(\"MERGING \" + fJavaModelDeltas.size() + \" DELTAS [\"+Thread.currentThread()+\"]\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\r", "+\t\tSystem.out.println(\"MERGING \" + this.javaModelDeltas.size() + \" DELTAS [\"+Thread.currentThread()+\"]\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\r", "-\tIterator deltas = fJavaModelDeltas.iterator();\r", "+\tIterator deltas = this.javaModelDeltas.iterator();\r", "-\t\tfJavaModelDeltas = new ArrayList(1);\r", "-\t\tfJavaModelDeltas.add(rootDelta);\r", "+\t\tthis.javaModelDeltas = new ArrayList(1);\r", "+\t\tthis.javaModelDeltas.add(rootDelta);\r", "-\t\tfJavaModelDeltas = new ArrayList(0);\r", "+\t\tthis.javaModelDeltas = new ArrayList(0);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd95514bf4bfcaa768e95dc5bad9655f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " protected void enterType( \tint declarationStart, \tint modifiers, \tchar[] name, \tint nameSourceStart, \tint nameSourceEnd, \tchar[] superclass, \tchar[][] superinterfaces)", "signatureAfterChange": " protected void enterType( \tint declarationStart, \tint modifiers, \tchar[] name, \tint nameSourceStart, \tint nameSourceEnd, \tchar[] superclass, \tchar[][] superinterfaces)", "diff": ["-\tJavaElementInfo parentInfo = (JavaElementInfo) infoStack.peek();", "-\tJavaElement parentHandle= (JavaElement)handleStack.peek();", "+\tJavaElementInfo parentInfo = (JavaElementInfo) this.infoStack.peek();", "+\tJavaElement parentHandle= (JavaElement) this.handleStack.peek();", "-\tinfo.setSourceFileName(sourceFileName);", "-\tinfo.setPackageName(packageName);", "+\tinfo.setSourceFileName(this.sourceFileName);", "+\tinfo.setPackageName(this.packageName);", "-\tnewElements.put(handle, info);", "+\tthis.newElements.put(handle, info);", "-\tinfoStack.push(info);", "-\thandleStack.push(handle);", "+\tthis.infoStack.push(info);", "+\tthis.handleStack.push(handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d015671867a143894d5cf232bc262e9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java", "commitBeforeChange": "ef3c2078d9cee48378a186a3e9a6e61cb6a67acc", "commitAfterChange": "18c98a5a751096350077436fcf968eb63364ccb9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void addInnerEmulationDependent(BlockScope dependentScope, boolean wasEnclosingInstanceSupplied)", "signatureAfterChange": " public void addInnerEmulationDependent(BlockScope dependentScope, boolean wasEnclosingInstanceSupplied)", "diff": ["-", "-\tif (dependents == null) {", "+\tif (this.dependents == null) {", "-\t\tdependents = new InnerEmulationDependency[1];", "+\t\tthis.dependents = new InnerEmulationDependency[1];", "-\t\tindex = dependents.length;", "+\t\tindex = this.dependents.length;", "-\t\t\tif (dependents[i].scope == dependentScope)", "+\t\t\tif (this.dependents[i].scope == dependentScope)", "-\t\tSystem.arraycopy(dependents, 0, (dependents = new InnerEmulationDependency[index + 1]), 0, index);", "+\t\tSystem.arraycopy(this.dependents, 0, (this.dependents = new InnerEmulationDependency[index + 1]), 0, index);", "-\tdependents[index] = new InnerEmulationDependency(dependentScope, wasEnclosingInstanceSupplied);", "+\tthis.dependents[index] = new InnerEmulationDependency(dependentScope, wasEnclosingInstanceSupplied);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8318b6c3774d50f8fa143eee7f30836", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void generateCode( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tboolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t */", "-\tpublic void generateCode(", "-\t\tBlockScope currentScope,", "-\t\tCodeStream codeStream,", "-\t\tboolean valueRequired) {", "-", "-\t\tint pc = codeStream.position;", "-\t\treceiver.generateCode(currentScope, codeStream, true);", "-\t\tif (receiver instanceof CastExpression\t// ((type[])null)[0]", "-\t\t\t\t&& ((CastExpression)receiver).innermostCastedExpression().resolvedType == TypeBinding.NULL){", "-\t\t\tcodeStream.checkcast(receiver.resolvedType); ", "-\t\t}\t\t\t", "-\t\tposition.generateCode(currentScope, codeStream, true);", "-\t\tcodeStream.arrayAt(this.resolvedType.id);", "-\t\t// Generating code for the potential runtime type checking", "-\t\tif (valueRequired) {", "-\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t} else {", "-\t\t\tboolean isUnboxing = (implicitConversion & TypeIds.UNBOXING) != 0;", "-\t\t\t// conversion only generated if unboxing", "-\t\t\tif (isUnboxing) codeStream.generateImplicitConversion(implicitConversion);", "-\t\t\tswitch (isUnboxing ? postConversionType(currentScope).id : this.resolvedType.id) {", "-\t\t\t\tcase T_long :", "-\t\t\t\tcase T_double :", "-\t\t\t\t\tcodeStream.pop2();", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault :", "-\t\t\t\t\tcodeStream.pop();", "-\t\t\t}", "-\t\t}", "-\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t}", "+ */", "+public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {", "+\tint pc = codeStream.position;", "+\tthis.receiver.generateCode(currentScope, codeStream, true);", "+\tif (this.receiver instanceof CastExpression\t// ((type[])null)[0]", "+\t\t\t&& ((CastExpression)this.receiver).innermostCastedExpression().resolvedType == TypeBinding.NULL){", "+\t\tcodeStream.checkcast(this.receiver.resolvedType); ", "+\t}\t\t\t", "+\tthis.position.generateCode(currentScope, codeStream, true);", "+\tcodeStream.arrayAt(this.resolvedType.id);", "+\t// Generating code for the potential runtime type checking", "+\tif (valueRequired) {", "+\t\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\t} else {", "+\t\tboolean isUnboxing = (this.implicitConversion & TypeIds.UNBOXING) != 0;", "+\t\t// conversion only generated if unboxing", "+\t\tif (isUnboxing) codeStream.generateImplicitConversion(this.implicitConversion);", "+\t\tswitch (isUnboxing ? postConversionType(currentScope).id : this.resolvedType.id) {", "+\t\t\tcase T_long :", "+\t\t\tcase T_double :", "+\t\t\t\tcodeStream.pop2();", "+\t\t\t\tcodeStream.pop();", "+\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+}"]}], "num": 45785}
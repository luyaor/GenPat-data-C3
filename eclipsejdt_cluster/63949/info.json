{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1a09cc7d08a0be419851c82f5250f225", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c392eb40330ed116dc0f29e2409df750", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void computeId()", "signatureAfterChange": " public void computeId()", "diff": ["-\tswitch (compoundName.length) {", "+\tswitch (this.compoundName.length) {", "-\t\t\tif (!CharOperation.equals(TypeConstants.JAVA, compoundName[0]))", "+\t\t\tif (!CharOperation.equals(TypeConstants.JAVA, this.compoundName[0]))", "-\t\t\tif (!CharOperation.equals(TypeConstants.LANG, compoundName[1])) {", "-\t\t\t\tif (CharOperation.equals(TypeConstants.JAVA_IO_PRINTSTREAM, compoundName))", "-\t\t\t\t\tid = TypeIds.T_JavaIoPrintStream;", "-\t\t\t\telse if (CharOperation.equals(TypeConstants.JAVA_UTIL_ITERATOR, compoundName))", "-\t\t\t\t\tid = TypeIds.T_JavaUtilIterator;", "-\t\t\t\telse if (CharOperation.equals(TypeConstants.JAVA_IO_SERIALIZABLE, compoundName))", "-\t\t\t\t    id = TypeIds.T_JavaIoSerializable;", "+\t\t\tif (!CharOperation.equals(TypeConstants.LANG, this.compoundName[1])) {", "+\t\t\t\tif (CharOperation.equals(TypeConstants.JAVA_IO_PRINTSTREAM, this.compoundName))", "+\t\t\t\t\tthis.id = TypeIds.T_JavaIoPrintStream;", "+\t\t\t\telse if (CharOperation.equals(TypeConstants.JAVA_UTIL_ITERATOR, this.compoundName))", "+\t\t\t\t\tthis.id = TypeIds.T_JavaUtilIterator;", "+\t\t\t\telse if (CharOperation.equals(TypeConstants.JAVA_IO_SERIALIZABLE, this.compoundName))", "+\t\t\t\t    this.id = TypeIds.T_JavaIoSerializable;", "-\t\t\tchar[] typeName = compoundName[2];", "+\t\t\tchar[] typeName = this.compoundName[2];", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangAssertionError;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangAssertionError;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangBoolean;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangBoolean;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangByte;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangByte;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangCharacter;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangCharacter;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangClass;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangClass;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangClassNotFoundException;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangClassNotFoundException;", "-\t\t\t\t\t    id = TypeIds.T_JavaLangCloneable;", "+\t\t\t\t\t    this.id = TypeIds.T_JavaLangCloneable;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangDouble;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangDouble;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangDeprecated;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangDeprecated;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangError;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangError;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangException;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangException;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangEnum;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangEnum;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangFloat;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangFloat;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangInteger;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangInteger;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangIterable;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangIterable;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangIllegalArgumentException;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangIllegalArgumentException;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangLong;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangLong;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangNoClassDefError;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangNoClassDefError;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangObject;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangObject;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangOverride;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangOverride;", "-\t\t\t\t\t\tid = \tTypeIds.T_JavaLangRuntimeException;", "+\t\t\t\t\t\tthis.id = \tTypeIds.T_JavaLangRuntimeException;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangString;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangString;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangStringBuffer;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangStringBuffer;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangStringBuilder;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangStringBuilder;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangSystem;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangSystem;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangShort;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangShort;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangSuppressWarnings;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangSuppressWarnings;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangThrowable;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangThrowable;", "-\t\t\t\t\t\tid = TypeIds.T_JavaLangVoid;", "+\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangVoid;", "-\t\t\tif (!CharOperation.equals(TypeConstants.JAVA, compoundName[0]))", "+\t\t\tif (!CharOperation.equals(TypeConstants.JAVA, this.compoundName[0]))", "-\t\t\tif (!CharOperation.equals(TypeConstants.LANG, compoundName[1]))", "+\t\t\tif (!CharOperation.equals(TypeConstants.LANG, this.compoundName[1]))", "-\t\t\tchar[] packageName = compoundName[2];", "+\t\t\tchar[] packageName = this.compoundName[2];", "-\t\t\ttypeName = compoundName[3];", "+\t\t\ttypeName = this.compoundName[3];", "-\t\t\t\t\tid = TypeIds.T_JavaLangReflectConstructor;", "+\t\t\t\t\tthis.id = TypeIds.T_JavaLangReflectConstructor;", "-\t\t\t\t\tid = TypeIds.T_JavaLangReflectField;", "+\t\t\t\t\tthis.id = TypeIds.T_JavaLangReflectField;", "-\t\t\t\t\tid = TypeIds.T_JavaLangReflectMethod;", "+\t\t\t\t\tthis.id = TypeIds.T_JavaLangReflectMethod;", "-\t\t\t\t\t\t\tid = TypeIds.T_JavaLangAnnotationAnnotation;", "+\t\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangAnnotationAnnotation;", "-\t\t\t\t\t\t\tid = TypeIds.T_JavaLangAnnotationDocumented;", "+\t\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangAnnotationDocumented;", "-\t\t\t\t\t\t\tid = TypeIds.T_JavaLangAnnotationElementType;", "+\t\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangAnnotationElementType;", "-\t\t\t\t\t\t\tid = TypeIds.T_JavaLangAnnotationInherited;", "+\t\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangAnnotationInherited;", "-\t\t\t\t\t\t\tid = TypeIds.T_JavaLangAnnotationRetention;", "+\t\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangAnnotationRetention;", "-\t\t\t\t\t\t\tid = TypeIds.T_JavaLangAnnotationRetentionPolicy;", "+\t\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangAnnotationRetentionPolicy;", "-\t\t\t\t\t\t\tid = TypeIds.T_JavaLangAnnotationTarget;", "+\t\t\t\t\t\t\tthis.id = TypeIds.T_JavaLangAnnotationTarget;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3900558606de71917bf8fb99b298287", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "5763e268070d12108a9f30b967b2e77e2bd3601f", "commitAfterChange": "cd0ceda2b7c471c4f37fb9996e9bfc019e8f11f8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r public ClassFileReader(byte classFileBytes[], char[] fileName) throws ClassFormatException", "signatureAfterChange": "\r public ClassFileReader(byte classFileBytes[], char[] fileName) throws ClassFormatException", "diff": ["-\tclassFileName = fileName;\r", "+\tthis.classFileName = fileName;\r", "-\t\tconstantPoolOffsets = new int[constantPoolCount];\r", "+\t\tthis.constantPoolOffsets = new int[constantPoolCount];\r", "-\t\t\t\t\tconstantPoolOffsets[i] = readOffset;\r", "+\t\t\t\t\tthis.constantPoolOffsets[i] = readOffset;\r", "-\t\t\t\t\tconstantPoolOffsets[i] = readOffset;\r", "+\t\t\t\t\tthis.constantPoolOffsets[i] = readOffset;\r", "-\t\t\t\t\tconstantPoolOffsets[i] = readOffset;\r", "+\t\t\t\t\tthis.constantPoolOffsets[i] = readOffset;\r", "-\t\t\t\t\tconstantPoolOffsets[i] = readOffset;\r", "+\t\t\t\t\tthis.constantPoolOffsets[i] = readOffset;\r", "-\t\t\t\t\tconstantPoolOffsets[i] = readOffset;\r", "+\t\t\t\t\tthis.constantPoolOffsets[i] = readOffset;\r", "-\t\t\t\t\tconstantPoolOffsets[i] = readOffset;\r", "+\t\t\t\t\tthis.constantPoolOffsets[i] = readOffset;\r", "-\t\t\t\t\tconstantPoolOffsets[i] = readOffset;\r", "+\t\t\t\t\tthis.constantPoolOffsets[i] = readOffset;\r", "-\t\t\t\t\tconstantPoolOffsets[i] = readOffset;\r", "+\t\t\t\t\tthis.constantPoolOffsets[i] = readOffset;\r", "-\t\t\t\t\tconstantPoolOffsets[i] = readOffset;\r", "+\t\t\t\t\tthis.constantPoolOffsets[i] = readOffset;\r", "-\t\t\t\t\tconstantPoolOffsets[i] = readOffset;\r", "+\t\t\t\t\tthis.constantPoolOffsets[i] = readOffset;\r", "-\t\t\t\t\tconstantPoolOffsets[i] = readOffset;\r", "+\t\t\t\t\tthis.constantPoolOffsets[i] = readOffset;\r", "-\t\taccessFlags = u2At(readOffset);\r", "+\t\tthis.accessFlags = u2At(readOffset);\r", "-\t\tclassNameIndex = u2At(readOffset);\r", "-\t\tclassName = getConstantClassNameAt(classNameIndex);\r", "+\t\tthis.classNameIndex = u2At(readOffset);\r", "+\t\tthis.className = getConstantClassNameAt(this.classNameIndex);\r", "-\t\t// field superclassName. null is fine.\r", "+\t\t// field this.superclassName. null is fine.\r", "-\t\t\tsuperclassName = getConstantClassNameAt(superclassNameIndex);\r", "+\t\t\tthis.superclassName = getConstantClassNameAt(superclassNameIndex);\r", "-\t\tinterfacesCount = u2At(readOffset);\r", "+\t\tthis.interfacesCount = u2At(readOffset);\r", "-\t\tif (interfacesCount != 0) {\r", "-\t\t\tinterfaceNames = new char[interfacesCount][];\r", "-\t\t\tfor (int i = 0; i < interfacesCount; i++) {\r", "-\t\t\t\tinterfaceNames[i] = getConstantClassNameAt(u2At(readOffset));\r", "+\t\tif (this.interfacesCount != 0) {\r", "+\t\t\tthis.interfaceNames = new char[this.interfacesCount][];\r", "+\t\t\tfor (int i = 0; i < this.interfacesCount; i++) {\r", "+\t\t\t\tthis.interfaceNames[i] = getConstantClassNameAt(u2At(readOffset));\r", "-\t\t// Read the fields, use exception handlers to catch bad format\r", "-\t\tfieldsCount = u2At(readOffset);\r", "+\t\t// Read the this.fields, use exception handlers to catch bad format\r", "+\t\tthis.fieldsCount = u2At(readOffset);\r", "-\t\tif (fieldsCount != 0) {\r", "+\t\tif (this.fieldsCount != 0) {\r", "-\t\t\tfields = new FieldInfo[fieldsCount];\r", "-\t\t\tfor (int i = 0; i < fieldsCount; i++) {\r", "-\t\t\t\tfield = new FieldInfo(reference, constantPoolOffsets, readOffset);\r", "-\t\t\t\tfields[i] = field;\r", "+\t\t\tthis.fields = new FieldInfo[this.fieldsCount];\r", "+\t\t\tfor (int i = 0; i < this.fieldsCount; i++) {\r", "+\t\t\t\tfield = new FieldInfo(reference, this.constantPoolOffsets, readOffset);\r", "+\t\t\t\tthis.fields[i] = field;\r", "-\t\t// Read the methods\r", "-\t\tmethodsCount = u2At(readOffset);\r", "+\t\t// Read the this.methods\r", "+\t\tthis.methodsCount = u2At(readOffset);\r", "-\t\tif (methodsCount != 0) {\r", "-\t\t\tmethods = new MethodInfo[methodsCount];\r", "+\t\tif (this.methodsCount != 0) {\r", "+\t\t\tthis.methods = new MethodInfo[this.methodsCount];\r", "-\t\t\tfor (int i = 0; i < methodsCount; i++) {\r", "-\t\t\t\tmethod = new MethodInfo(reference, constantPoolOffsets, readOffset);\r", "-\t\t\t\tmethods[i] = method;\r", "+\t\t\tfor (int i = 0; i < this.methodsCount; i++) {\r", "+\t\t\t\tmethod = new MethodInfo(reference, this.constantPoolOffsets, readOffset);\r", "+\t\t\t\tthis.methods[i] = method;\r", "-\t\t\tint utf8Offset = constantPoolOffsets[u2At(readOffset)];\r", "+\t\t\tint utf8Offset = this.constantPoolOffsets[u2At(readOffset)];\r", "-\t\t\t\taccessFlags |= AccDeprecated;\r", "+\t\t\t\tthis.accessFlags |= AccDeprecated;\r", "-\t\t\t\t\t\tinnerInfos = new InnerClassInfo[number_of_classes];\r", "+\t\t\t\t\t\tthis.innerInfos = new InnerClassInfo[number_of_classes];\r", "-\t\t\t\t\t\t\tinnerInfos[j] = \r", "-\t\t\t\t\t\t\t\tnew InnerClassInfo(reference, constantPoolOffsets, innerOffset + 2); \r", "-\t\t\t\t\t\t\tif (classNameIndex == innerInfos[j].innerClassNameIndex) {\r", "-\t\t\t\t\t\t\t\tinnerInfo = innerInfos[j];\r", "-\t\t\t\t\t\t\t\tinnerInfoIndex = j;\r", "+\t\t\t\t\t\t\tthis.innerInfos[j] = \r", "+\t\t\t\t\t\t\t\tnew InnerClassInfo(reference, this.constantPoolOffsets, innerOffset + 2); \r", "+\t\t\t\t\t\t\tif (this.classNameIndex == this.innerInfos[j].innerClassNameIndex) {\r", "+\t\t\t\t\t\t\t\tthis.innerInfo = this.innerInfos[j];\r", "+\t\t\t\t\t\t\t\tthis.innerInfoIndex = j;\r", "-\t\t\t\t\t\tutf8Offset = constantPoolOffsets[u2At(readOffset + 6)];\r", "-\t\t\t\t\t\tsourceFileName = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));\r", "+\t\t\t\t\t\tutf8Offset = this.constantPoolOffsets[u2At(readOffset + 6)];\r", "+\t\t\t\t\t\tthis.sourceFileName = utf8At(utf8Offset + 3, u2At(utf8Offset + 1));\r", "-\t\t\t\t\t\t\taccessFlags |= AccSynthetic;\r", "+\t\t\t\t\t\t\tthis.accessFlags |= AccSynthetic;\r"]}], "num": 63949}
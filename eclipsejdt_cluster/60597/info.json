{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "43890d00b6ad50d3c53ec42dc60e8e89", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a6239757d7feb54aa8b73e144c2e546", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseAnnotationProcessorManager.java", "commitBeforeChange": "600d3eda20c6510ad5218c514ac30249f7b449a9", "commitAfterChange": "f3c706bfa8df1589d5835736528d83fcc35878b8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t@Override \tpublic void processAnnotations(CompilationUnitDeclaration[] units, ReferenceBinding[] referenceBindings, boolean isLastRound)", "signatureAfterChange": " \t@Override \tpublic void processAnnotations(CompilationUnitDeclaration[] units, ReferenceBinding[] referenceBindings, boolean isLastRound)", "diff": ["-\t\tRoundDispatcher dispatcher = new RoundDispatcher(this, roundEnv, roundEnv.getRootAnnotations());", "+\t\tPrintWriter traceProcessorInfo = _printProcessorInfo ? _out : null;", "+\t\tPrintWriter traceRounds = _printRounds ? _out : null;", "+\t\tif (traceRounds != null) {", "+\t\t\ttraceRounds.println(\"Round \" + ++_round + ':'); //$NON-NLS-1$", "+\t\t}", "+\t\tRoundDispatcher dispatcher = new RoundDispatcher(", "+\t\t\t\tthis, roundEnv, roundEnv.getRootAnnotations(), traceProcessorInfo, traceRounds);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cf22e05195bf448c031f3cf6fce99db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/batch/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationProcessorManager.java", "commitBeforeChange": "9d4f7131389390a16a995494da191d8ab6c07c5a", "commitAfterChange": "aa852841b1dd73414418bf5fc5420a74b80d0cd9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \t@Override \tpublic void processAnnotations(CompilationUnitDeclaration[] units, boolean isLastRound)", "signatureAfterChange": " \t@Override \tpublic void processAnnotations(CompilationUnitDeclaration[] units, boolean isLastRound)", "diff": ["-", "-\t@Override", "-\tpublic void processAnnotations(CompilationUnitDeclaration[] units, boolean isLastRound) {", "-\t\t// do nothing", "-\t}", "+\t */", "+\t@Override", "+\tpublic void processAnnotations(CompilationUnitDeclaration[] units, boolean isLastRound) ", "+\t{", "+\t\tBatchRoundEnvImpl roundEnv = new BatchRoundEnvImpl(units, isLastRound);", "+\t\tif (_isFirstRound) {", "+\t\t\t_isFirstRound = false;", "+\t\t}", "+\t\tRoundDispatcher dispatcher = new RoundDispatcher(this, roundEnv, roundEnv.getRootAnnotations());", "+\t\tdispatcher.round();", "+\t}"]}], "num": 60597}
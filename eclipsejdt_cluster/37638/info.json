{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0331840977e7908defcf401f829c9c50", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a6118913a6e0e9b209cb5fe842548e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "commitAfterChange": "a502b956779c4dac7f761502999cc6d149ba7556", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 57, "signatureBeforeChange": " \tpublic boolean compile(String[] argv)", "signatureAfterChange": " \tpublic boolean compile(String[] argv)", "diff": ["-\t\t\t\tif (this.showProgress)", "-\t\t\t\t\tthis.logger.printlnOut(Main.bind(\"progress.compiling\")); //$NON-NLS-1$", "+\t\t\t\tif (this.showProgress) this.logger.compiling(); //$NON-NLS-1$", "-\t\t\t\t\t\tthis.logger.printlnOut(", "-\t\t\t\t\t\t\tMain.bind(", "-\t\t\t\t\t\t\t\t\"compile.repetition\", //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tString.valueOf(i + 1),", "-\t\t\t\t\t\t\t\tString.valueOf(this.repetitions)));", "+\t\t\t\t\t\tthis.logger.logRepetition(i, this.repetitions);", "-\t\t\t\tif (this.showProgress)", "-\t\t\t\t\tthis.logger.printlnOut();", "+\t\t\t\tif (this.showProgress) this.logger.printNewLine();", "+    \t\t\tthis.logger.close();", "-\t\t\tthis.logger.printlnErr(e.getMessage());", "+\t\t\tthis.logger.logException(e);", "-\t\t\t//e.printStackTrace();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65d60af8503a1e379df253e20ee7c7c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "075bbe736870ef534cfc50806faa3a8faa0b22b3", "commitAfterChange": "cbf4d8b0c602d0860355a0bb315f58708fa257d2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " public static char[] createCharArrayTypeSignature(char[] typeName, boolean isResolved)", "signatureAfterChange": " public static char[] createCharArrayTypeSignature(char[] typeName, boolean isResolved)", "diff": ["-\t\t\tif (CharOperation.fragmentEquals(BOOLEAN, typeName, 0, true)) {", "+\t\t\tif (checkPrimitiveType(BOOLEAN, typeName)) {", "-\t\t\t} else if (CharOperation.fragmentEquals(BYTE, typeName, 0, true)) {", "+\t\t\t} else if (checkPrimitiveType(BYTE, typeName)) {", "-\t\t\tif (CharOperation.fragmentEquals(CHAR, typeName, 0, true)) {", "+\t\t\tif (checkPrimitiveType(CHAR, typeName)) {", "-\t\t\tif (CharOperation.fragmentEquals(DOUBLE, typeName, 0, true)) {", "+\t\t\tif (checkPrimitiveType(DOUBLE, typeName)) {", "-\t\t\tif (CharOperation.fragmentEquals(FLOAT, typeName, 0, true)) {", "+\t\t\tif (checkPrimitiveType(FLOAT, typeName)) {", "-\t\t\tif (CharOperation.fragmentEquals(INT, typeName, 0, true)) {", "+\t\t\tif (checkPrimitiveType(INT, typeName)) {", "-\t\t\tif (CharOperation.fragmentEquals(LONG, typeName, 0, true)) {", "+\t\t\tif (checkPrimitiveType(LONG, typeName)) {", "-\t\t\tif (CharOperation.fragmentEquals(SHORT, typeName, 0, true)) {", "+\t\t\tif (checkPrimitiveType(SHORT, typeName)) {", "-\t\t\tif (CharOperation.fragmentEquals(VOID, typeName, 0, true)) {", "+\t\t\tif (checkPrimitiveType(VOID, typeName)) {"]}], "num": 37638}
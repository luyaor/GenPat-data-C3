{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d64fa1b67aeb50413d81a7d687cb081", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9910e01f287dbfc557d0ac8be551616", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "cf3402778a386b4819e4d3554ae8d21d9e5326e6", "commitAfterChange": "56a4d388176794077c8c6fb2f22cd1defef6beb5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic String toString()", "signatureAfterChange": "  \tpublic String toString()", "diff": ["+\t\tif ((errorThreshold & AccidentalBooleanAssign) != 0){", "+\t\t\tbuf.append(\"\\n-possible accidental boolean assignment: ERROR\"); //$NON-NLS-1$", "+\t\t} else {", "+\t\t\tif ((warningThreshold & AccidentalBooleanAssign) != 0){", "+\t\t\t\tbuf.append(\"\\n-possible accidental boolean assignment: WARNING\"); //$NON-NLS-1$", "+\t\t\t} else {", "+\t\t\t\tbuf.append(\"\\n-possible accidental boolean assignment: IGNORE\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eacb9aee4f9830e95270b4de9bda5ec1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "ab4f1f4f5f05228bd740b611c13a70ad9f89e86f", "commitAfterChange": "92b1e4b5c6be4d76b6b81e28831eb68da7da9e16", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void generateOptimizedNonBooleanEqual(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "signatureAfterChange": " public void generateOptimizedNonBooleanEqual(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "diff": ["-\t\t\t\tif (falseLabel == null) {", "-\t\t\t\t\t// implicit falling through the FALSE case", "-\t\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t\tcodeStream.goto_(trueLabel);", "-\t\t\t\t\t}", "+\t\t\t\t\tif ((bits & OnlyValueRequiredMASK) != 0) {", "+\t\t\t\t\t\tif (((bits & OperatorMASK) >> OperatorSHIFT) == EQUAL_EQUAL) {", "+\t\t\t\t\t\t\tcodeStream.iconst_1();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.iconst_0();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (falseLabel == null) {", "+\t\t\t\t\t\t\t// implicit falling through the FALSE case", "+\t\t\t\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t\t\t\tcodeStream.goto_(trueLabel);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}"]}], "num": 40999}
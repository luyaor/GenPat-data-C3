{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "03a91274cf15cb2a5a2ee6f455a1dca3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9223f59a4b070935398a1b4614cb0de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 19, "signatureBeforeChange": " public BinaryTypeBinding cacheMissingBinaryType(char[][] compoundName, CompilationUnitDeclaration unit)", "signatureAfterChange": " public MissingTypeBinding createMissingType(PackageBinding packageBinding, char[][] compoundName)", "diff": ["-public BinaryTypeBinding cacheMissingBinaryType(char[][] compoundName, CompilationUnitDeclaration unit) {", "-\t// report the missing class file first", "-\tproblemReporter.isClassPathCorrect(", "-\t\tcompoundName, ", "-\t\tunit == null ? this.unitBeingCompleted : unit, ", "-\t\tthis.missingClassFileLocation);", "-", "-\tPackageBinding packageBinding = computePackageFrom(compoundName);", "-\t// create a proxy for the missing BinaryType", "-\tMissingBinaryTypeBinding type = new MissingBinaryTypeBinding(packageBinding, compoundName, this);", "-\tif (type.id != TypeIds.T_JavaLangObject) {", "-\t\t// make Object be its superclass - it could in turn be missing as well", "-\t\tReferenceBinding objectType = getType(TypeConstants.JAVA_LANG_OBJECT);", "-\t\tif (objectType == null)", "-\t\t\tobjectType = cacheMissingBinaryType(TypeConstants.JAVA_LANG_OBJECT, unit);\t// create a proxy for the missing Object type\t\t", "-\t\ttype.setMissingSuperclass(objectType);", "-\t}", "-\tpackageBinding.addType(type);", "-\treturn type;\t", "-}", "+*/", "+public MissingTypeBinding createMissingType(PackageBinding packageBinding, char[][] compoundName) {", "+\t// create a proxy for the missing BinaryType", "+\tif (packageBinding == null) {", "+\t\tpackageBinding = computePackageFrom(compoundName, true /* missing */);", "+\t\tif (packageBinding == TheNotFoundPackage) packageBinding = this.defaultPackage;", "+\t}", "+\tMissingTypeBinding missingType = new MissingTypeBinding(packageBinding, compoundName, this);", "+\tif (missingType.id != TypeIds.T_JavaLangObject) {", "+\t\t// make Object be its superclass - it could in turn be missing as well", "+\t\tReferenceBinding objectType = getType(TypeConstants.JAVA_LANG_OBJECT);", "+\t\tif (objectType == null) {", "+\t\t\tobjectType = createMissingType(null, TypeConstants.JAVA_LANG_OBJECT);\t// create a proxy for the missing Object type\t\t", "+\t\t}", "+\t\tmissingType.setMissingSuperclass(objectType);", "+\t}", "+\tpackageBinding.addType(missingType);", "+\treturn missingType;\t", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d28a309c045a98ffdf3b95158ff4ad83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tBinaryTypeBinding cacheBinaryType(IType type) throws JavaModelException", "signatureAfterChange": " protected BinaryTypeBinding cacheBinaryType(IType type) throws JavaModelException", "diff": ["-\t */", "-\tBinaryTypeBinding cacheBinaryType(IType type) throws JavaModelException {", "-\t\tIType enclosingType = type.getDeclaringType();", "-\t\tif (enclosingType != null) {", "-\t\t\t// force caching of enclosing types first, so that binary type can be found in lookup enviroment", "-\t\t\tthis.cacheBinaryType(enclosingType);", "-\t\t}", "-\t\tIBinaryType binaryType = (IBinaryType)((BinaryType)type).getElementInfo();", "-\t\tBinaryTypeBinding binding = this.lookupEnvironment.cacheBinaryType(binaryType);", "-\t\tif (binding == null) { // it was already cached as a result of a previous query", "-\t\t\tchar[][] compoundName = CharOperation.splitOn('.', type.getFullyQualifiedName().toCharArray());", "-\t\t\tReferenceBinding referenceBinding = this.lookupEnvironment.getCachedType(compoundName);", "-\t\t\tif (referenceBinding != null && (referenceBinding instanceof BinaryTypeBinding)) {", "-\t\t\t\t// if the binding could be found and if it comes from a binary type,", "-\t\t\t\tbinding = (BinaryTypeBinding)referenceBinding;", "-\t\t\t}", "-\t\t}", "-\t\treturn binding;", "-\t}", "+ */", "+protected BinaryTypeBinding cacheBinaryType(IType type) throws JavaModelException {", "+\tIType enclosingType = type.getDeclaringType();", "+\tif (enclosingType != null)", "+\t\tcacheBinaryType(enclosingType); // cache enclosing types first, so that binary type can be found in lookup enviroment", "+\tIBinaryType binaryType = (IBinaryType) ((BinaryType) type).getElementInfo();", "+\tBinaryTypeBinding binding = this.lookupEnvironment.cacheBinaryType(binaryType);", "+\tif (binding == null) { // it was already cached as a result of a previous query", "+\t\tchar[][] compoundName = CharOperation.splitOn('.', type.getFullyQualifiedName().toCharArray());", "+\t\tReferenceBinding referenceBinding = this.lookupEnvironment.getCachedType(compoundName);", "+\t\tif (referenceBinding != null && (referenceBinding instanceof BinaryTypeBinding))", "+\t\t\tbinding = (BinaryTypeBinding) referenceBinding; // if the binding could be found and if it comes from a binary type", "+\t}", "+\treturn binding;", "+}"]}], "num": 53433}
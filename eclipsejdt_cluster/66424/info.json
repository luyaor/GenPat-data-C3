{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b37fa1a68c1ef49c7af8ef19a55009f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf80fc592ce447b9b20f2401d94a2824", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "e6099120ee9021152f84e60105066d4964c2db21", "commitAfterChange": "82631a98caad8b28e9cefb217339d51e64ef47f9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tprotected void buildSupertypes()", "signatureAfterChange": "\r \tprotected void buildSupertypes()", "diff": ["-\t\tNameLookup nameLookup = null;\r", "+\t\t//NB: no need to set focus type on hierarchy resolver since no other type is injected\r", "+\t\t//    in the hierarchy resolver, thus there is no need to check that a type is \r", "+\t\t//    a sub or super type of the focus type.\r", "-\t\tif (unitToLookInside != null) {\r", "-\t\t\ttry {\r", "-\t\t\t\tnameLookup = ((JavaProject)focusType.getJavaProject()).getNameLookup();\r", "-\t\t\t\tnameLookup.setUnitsToLookInside(new IWorkingCopy[] {unitToLookInside});\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\t// cannot set the working copies\r", "+\t\tif (nameLookup != null && unitToLookInside != null) {\r", "+\t\t\tsynchronized(nameLookup) { // prevent 2 concurrent accesses to name lookup while the working copies are set\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tnameLookup.setUnitsToLookInside(new IWorkingCopy[] {unitToLookInside});\r", "+\t\t\t\t\t// resolve\r", "+\t\t\t\t\tthis.hierarchyResolver.resolve(type);\r", "+\t\t\t\t} finally {\r", "+\t\t\t\t\tnameLookup.setUnitsToLookInside(null);\r", "+\t\t\t\t}\r", "-\t\t}\r", "-\t\t\r", "-\t\ttry {\r", "-\t\t\t//NB: no need to set focus type on hierarchy resolver since no other type is injected\r", "-\t\t\t//    in the hierarchy resolver, thus there is no need to check that a type is \r", "-\t\t\t//    a sub or super type of the focus type.\r", "-\t\r", "+\t\t} else {\r", "-\t\t} finally {\r", "-\t\t\tif (nameLookup != null) {\r", "-\t\t\t\tnameLookup.setUnitsToLookInside(null);\r", "-\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d17169f0c478cf54e2c9c836005013d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "6f6b135c3443a1f802996624e28e3fccc1ffade1", "commitAfterChange": "179d5d1c5c2a0bb83cd907094171a8fb72cf869e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \tprotected void buildSupertypes()", "signatureAfterChange": "\r \tprotected void buildSupertypes()", "diff": ["-\t\tthis.searchableEnvironment.unitToLookInside =\r", "-\t\t\t(CompilationUnit) focusType.getCompilationUnit();\r", "-\r", "-\t\t//NB: no need to set focus type on hierarchy resolver since no other type is injected\r", "-\t\t//    in the hierarchy resolver, thus there is no need to check that a type is \r", "-\t\t//    a sub or super type of the focus type.\r", "-\r", "-\t\t// resolve\r", "-\t\tthis.hierarchyResolver.resolve(type);\r", "-\r", "-\t\tthis.searchableEnvironment.unitToLookInside = null;\r", "+\t\tNameLookup nameLookup = null;\r", "+\t\tICompilationUnit unitToLookInside = focusType.getCompilationUnit();\r", "+\t\tif (unitToLookInside != null) {\r", "+\t\t\ttry {\r", "+\t\t\t\tnameLookup = ((JavaProject)focusType.getJavaProject()).getNameLookup();\r", "+\t\t\t\tnameLookup.setUnitsToLookInside(new IWorkingCopy[] {unitToLookInside});\r", "+\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t// cannot set the working copies\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t\r", "+\t\ttry {\r", "+\t\t\t//NB: no need to set focus type on hierarchy resolver since no other type is injected\r", "+\t\t\t//    in the hierarchy resolver, thus there is no need to check that a type is \r", "+\t\t\t//    a sub or super type of the focus type.\r", "+\t\r", "+\t\t\t// resolve\r", "+\t\t\tthis.hierarchyResolver.resolve(type);\r", "+\t\t} finally {\r", "+\t\t\tif (nameLookup != null) {\r", "+\t\t\t\tnameLookup.setUnitsToLookInside(null);\r", "+\t\t\t}\r", "+\t\t}\r"]}], "num": 66424}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3bc2683008905380c3a7c52628a6b13", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "080e1106d9047cc09c8b06b6ad2f0baf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "0f549220f498cda7c86a65324f594a6b8e8c2616", "commitAfterChange": "17fcd420e0756889bcaffeff4cf983b2cff84a3e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public static int validateMatchRule(String stringPattern, int matchRule)", "signatureAfterChange": " public static int validateMatchRule(String stringPattern, int matchRule)", "diff": ["-\t\tboolean validCamelCase = false;", "-\t\tif (length > 1) {", "-\t\t\tint idx = 0;", "-\t\t\tchar ch = stringPattern.charAt(idx++);", "-\t\t\tif (ScannerHelper.isJavaIdentifierStart(ch)) {", "-\t\t\t\tch = stringPattern.charAt(idx++);", "-\t\t\t\tif (ScannerHelper.isUpperCase(ch)) {", "-\t\t\t\t\twhile (idx<length && ScannerHelper.isUpperCase(stringPattern.charAt(idx))) {", "-\t\t\t\t\t\tidx++;", "-\t\t\t\t\t}", "-\t\t\t\t\twhile (idx<length && (!ScannerHelper.isUpperCase(ch=stringPattern.charAt(idx)) && ScannerHelper.isJavaIdentifierPart(ch))) {", "-\t\t\t\t\t\tidx++;", "-\t\t\t\t\t}", "-\t\t\t\t\tvalidCamelCase = idx == length;", "-\t\t\t\t}", "-\t\t\t}", "+\t\tboolean validCamelCase = true;", "+\t\tfor (int i=0; i<length && validCamelCase; i++) {", "+\t\t\tchar ch = stringPattern.charAt(i++);", "+\t\t\tvalidCamelCase = ScannerHelper.isJavaIdentifierStart(ch);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d4fb036fa801dfb902477742459109d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "9e42020b961c199c00c46fb54f1e75c9e16ed830", "commitAfterChange": "833eb0a12a6e4b4e0d08456326c8e8fc35a701ed", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\t\tif (binding != null) { // can also include NotFound ProblemReferenceBindings if we already know this name is not found", "+\t\t\tif (binding != null) {", "-\t\t\t\tif ((mask & Binding.TYPE) != 0) {", "-\t\t\t\t\tif (foundType != null && foundType.problemId() != NotVisible && binding.problemId() != Ambiguous)", "-\t\t\t\t\t\treturn foundType; // problem type from above supercedes NotFound type but not Ambiguous import case", "-\t\t\t\t\tif (binding instanceof ReferenceBinding)", "-\t\t\t\t\t\treturn binding; // cached type found in previous walk below", "-\t\t\t\t}", "+\t\t\t\tif ((mask & Binding.TYPE) != 0 && binding instanceof ReferenceBinding)", "+\t\t\t\t\treturn binding; // cached type found in previous walk below", "-\t\t\t\t\t\t\t\tif (foundInImport) {", "+\t\t\t\t\t\t\t\tif (foundInImport)", "-\t\t\t\t\t\t\t\t\ttemp = new ProblemReferenceBinding(name, Ambiguous);", "-\t\t\t\t\t\t\t\t\tif (typeOrPackageCache != null)", "-\t\t\t\t\t\t\t\t\t\ttypeOrPackageCache.put(name, temp);", "-\t\t\t\t\t\t\t\t\treturn temp;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, Ambiguous);", "-\t\tif (foundType == null) {", "-\t\t\tfoundType = new ProblemReferenceBinding(name, NotFound);", "-\t\t\tif (typeOrPackageCache != null && (mask & Binding.PACKAGE) != 0) // only put NotFound type in cache if you know its not a package", "-\t\t\t\ttypeOrPackageCache.put(name, foundType);", "-\t\t}", "-\t\treturn foundType;", "+\t\tif (foundType != null) return foundType; // problem type from above", "+\t\treturn new ProblemReferenceBinding(name, NotFound);"]}], "num": 34013}
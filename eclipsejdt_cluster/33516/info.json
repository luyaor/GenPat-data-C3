{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7cdbb43816dfbff70621945c1ef3303f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "085919b8e762c808aece42bb90207253", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java", "commitBeforeChange": "c95c77d3dbfcd20bfb9304749e4eae9d6f23ad49", "commitAfterChange": "b50c57ae017946d00bb236f27cdb1a48d6f4ec6b", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic void resolve()", "signatureAfterChange": "  \tpublic void resolve()", "diff": ["-\t\t\t\t\t// resolve annotations", "-\t\t\t\t\tfinal TypeDeclaration syntheticTypeDeclaration = types[0];", "-\t\t\t\t\tsyntheticTypeDeclaration.resolve(this.scope);", "-\t\t\t\t\tresolveAnnotations(syntheticTypeDeclaration.staticInitializerScope, this.currentPackage.annotations, this.scope.fPackage);", "-\t\t\t\t\t// set the synthetic bit", "-\t\t\t\t\tsyntheticTypeDeclaration.binding.modifiers |= AccSynthetic;", "-\t\t\t\t\tstartingTypeIndex = 1;", "+                    if (this.types != null) {", "+                        // resolve annotations", "+    \t\t\t\t\tfinal TypeDeclaration syntheticTypeDeclaration = types[0];", "+    \t\t\t\t\tsyntheticTypeDeclaration.resolve(this.scope);", "+    \t\t\t\t\tresolveAnnotations(syntheticTypeDeclaration.staticInitializerScope, this.currentPackage.annotations, this.scope.fPackage);", "+    \t\t\t\t\t// set the synthetic bit", "+    \t\t\t\t\tsyntheticTypeDeclaration.binding.modifiers |= AccSynthetic;", "+    \t\t\t\t\tstartingTypeIndex = 1;", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba3b0d9510426e796e46c3dc22fa4db6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e9cb8a680609e97a11e6fc9b255fcb2043219aa", "commitAfterChange": "9892e22e3cda97844e8704bc9ff3072e4e043b62", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 151, "signatureBeforeChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "signatureAfterChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "diff": ["-\t\t\t\t// Though, if field is static, then it can be still be proposed", "-\t\t\t\tif (!field.isStatic()) { ", "-\t\t\t\t\tcontinue next;", "-\t\t\t\t} else if (isFieldBeingCompletedStatic) {", "-\t\t\t\t\t// static fields can't be proposed before they are actually declared if the ", "-\t\t\t\t\t// field currently being declared is also static", "-\t\t\t\t\tcontinue next;", "+\t\t\t\t// Though, if field is static or completion happens in Javadoc, then it can be still be proposed", "+\t\t\t\tif (this.assistNodeInJavadoc == 0) {", "+\t\t\t\t\tif (!field.isStatic()) {", "+\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t} else if (isFieldBeingCompletedStatic) {", "+\t\t\t\t\t\t// static fields can't be proposed before they are actually declared if the", "+\t\t\t\t\t\t// field currently being declared is also static", "+\t\t\t\t\t\tcontinue next;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5fc1cfdbef953360cb37bc9d0fc4387", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void tagAsUnnecessaryCast(Scope scope, TypeBinding castType)", "signatureAfterChange": " \tpublic void tagAsUnnecessaryCast(Scope scope, TypeBinding castType)", "diff": ["-\t\tscope.problemReporter().unnecessaryInstanceof(this, castType);", "+\t\t// null is not instanceof Type, recognize direct scenario", "+\t\tif (expression.resolvedType != NullBinding)", "+\t\t\tscope.problemReporter().unnecessaryInstanceof(this, castType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2475908436855b6760460abb56087fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "cb1229e517a2018e5263ed249b199ae2a321da49", "commitAfterChange": "4732df192beaa38106d940c4bfeefb54a9e4a1cf", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["-\t\t\t\tif (this.resolvedType.isValidBinding()) {", "-\t\t\t\t\treturn this.resolvedType;", "-\t\t\t\t} else {", "-\t\t\t\t\tswitch (this.resolvedType.problemId()) {", "-\t\t\t\t\t\tcase ProblemReasons.NotFound :", "-\t\t\t\t\t\tcase ProblemReasons.NotVisible :", "-\t\t\t\t\t\tcase ProblemReasons.InheritedNameHidesEnclosingName :", "-\t\t\t\t\t\t\tTypeBinding type = this.resolvedType.closestMatch();", "-\t\t\t\t\t\t\treturn type;", "-\t\t\t\t\t\tdefault :", "-\t\t\t\t\t\t\treturn null;", "+\t\t\t\tif (this.resolvedType != null) { // is a shared type reference which was already resolved", "+\t\t\t\t\tif (this.resolvedType.isValidBinding()) {", "+\t\t\t\t\t\treturn this.resolvedType;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tswitch (this.resolvedType.problemId()) {", "+\t\t\t\t\t\t\tcase ProblemReasons.NotFound :", "+\t\t\t\t\t\t\tcase ProblemReasons.NotVisible :", "+\t\t\t\t\t\t\tcase ProblemReasons.InheritedNameHidesEnclosingName :", "+\t\t\t\t\t\t\t\tTypeBinding type = this.resolvedType.closestMatch();", "+\t\t\t\t\t\t\t\treturn type;", "+\t\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d439edde87967166e4da39ed1b11705e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tsynchronized IVariableBinding getVariableBinding(org.eclipse.jdt.internal.compiler.lookup.VariableBinding variableBinding)", "signatureAfterChange": " \tsynchronized IVariableBinding getVariableBinding(org.eclipse.jdt.internal.compiler.lookup.VariableBinding variableBinding)", "diff": ["-\t\t\t\tIVariableBinding binding = (IVariableBinding) this.bindingTables.compilerBindingsToASTBindings.get(variableBinding);", "-\t\t\t\tif (binding != null) {", "+\t \t\t\tif (variableBinding.type != null) {", "+\t\t\t\t\tIVariableBinding binding = (IVariableBinding) this.bindingTables.compilerBindingsToASTBindings.get(variableBinding);", "+\t\t\t\t\tif (binding != null) {", "+\t\t\t\t\t\treturn binding;", "+\t\t\t\t\t}", "+\t\t\t\t\tbinding = new VariableBinding(this, variableBinding);", "+\t\t\t\t\tthis.bindingTables.compilerBindingsToASTBindings.put(variableBinding, binding);", "-\t\t\t\t}", "-\t\t\t\tbinding = new VariableBinding(this, variableBinding);", "-\t\t\t\tthis.bindingTables.compilerBindingsToASTBindings.put(variableBinding, binding);", "-\t\t\t\treturn binding;", "+\t \t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcc5f90a342f1b65758eafb09a9054c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "93dc25294a36977649983cf027f3b2ea56005bf2", "commitAfterChange": "7b815bfaa3b1a804bb04e149d3fdcdeccff01e22", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "signatureAfterChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "diff": ["-\t\t\t\t\tresult.add(new ConstraintTypeFormula(lambda.resolvedType, this.right, SUBTYPE));", "+\t\t\t\t\tif (lambda.resolvedType != null)", "+\t\t\t\t\t\tresult.add(new ConstraintTypeFormula(lambda.resolvedType, this.right, SUBTYPE));"]}], "num": 33516}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0aaf1a028f60ae1f63395bcb46c7931", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04ca79f2d7b86292c6416a0773825527", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e0e148cd6b9c732819785b1a6035a4b2d3b71b69", "commitAfterChange": "e8d8994ddc9e43f92485e51c19ef36ea93b3771d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " String computeIndexName(IPath path)", "signatureAfterChange": " public String computeIndexLocation(IPath containerPath)", "diff": ["-String computeIndexName(IPath path) {", "-\tString name = (String) indexNames.get(path);", "-\tif (name == null) {", "-\t\tString pathString = path.toOSString();", "+public String computeIndexLocation(IPath containerPath) {", "+\tString indexLocation = (String) this.indexLocations.get(containerPath);", "+\tif (indexLocation == null) {", "+\t\tString pathString = containerPath.toOSString();", "-\t\tname = getJavaPluginWorkingLocation().append(fileName).toOSString();", "-\t\tindexNames.put(path, name);", "+\t\tindexLocation = getJavaPluginWorkingLocation().append(fileName).toOSString();", "+\t\tthis.indexLocations.put(containerPath, indexLocation);", "-\treturn name;", "+\treturn indexLocation;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a60ddb638db8be5b612760eeb57fcbbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e0e148cd6b9c732819785b1a6035a4b2d3b71b69", "commitAfterChange": "e8d8994ddc9e43f92485e51c19ef36ea93b3771d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public synchronized Index recreateIndex(IPath path)", "signatureAfterChange": " public synchronized Index recreateIndex(IPath containerPath)", "diff": ["-public synchronized Index recreateIndex(IPath path) {", "+public synchronized Index recreateIndex(IPath containerPath) {", "-\t\tIndex index = (Index) this.indexes.get(path);", "+\t\t// Path is already canonical", "+\t\tString indexLocation = computeIndexLocation(containerPath);", "+\t\t", "+\t\tIndex index = (Index) this.indexes.get(indexLocation);", "-\t\t// Path is already canonical", "-\t\tString indexPath = computeIndexName(path);", "-\t\t\tUtil.verbose(\"-> recreating index: \"+indexPath+\" for path: \"+path.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tindex = new Index(indexPath, \"Index for \" + path.toOSString(), false /*reuse index file*/); //$NON-NLS-1$", "-\t\tindexes.put(path, index);", "+\t\t\tUtil.verbose(\"-> recreating index: \"+indexLocation+\" for path: \"+containerPath.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tindex = new Index(indexLocation, \"Index for \" + containerPath.toOSString(), false /*reuse index file*/); //$NON-NLS-1$", "+\t\tthis.indexes.put(indexLocation, index);", "-\t\t\tUtil.verbose(\"-> failed to recreate index for path: \"+path.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tUtil.verbose(\"-> failed to recreate index for path: \"+containerPath.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$"]}], "num": 47717}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aa7288815d2a46f1198228ab83785bb0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9aec66337169630f2881a7f9bda017c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "2eab698c606e3b17217602bbc99837242c743a5a", "commitAfterChange": "6d141275326cf4caf65ec5dca68b565e2e9b1360", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public ExceptionHandlingFlowContext( \t\tFlowContext parent, \t\tASTNode associatedNode, \t\tReferenceBinding[] handledExceptions, \t\tint [] exceptionToCatchBlockMap, \t\tArgument [] catchArguments, \t\tFlowContext initializationParent, \t\tBlockScope scope, \t\tUnconditionalFlowInfo flowInfo)", "signatureAfterChange": " public ExceptionHandlingFlowContext( \t\tFlowContext parent, \t\tTryStatement tryStatement, \t\tReferenceBinding[] handledExceptions, \t\tint [] exceptionToCatchBlockMap, \t\tFlowContext initializationParent, \t\tBlockScope scope, \t\tFlowInfo flowInfo)", "diff": ["+\t\tTryStatement tryStatement,", "+\t\tReferenceBinding[] handledExceptions,", "+\t\tint [] exceptionToCatchBlockMap,", "+\t\tFlowContext initializationParent,", "+\t\tBlockScope scope,", "+\t\tFlowInfo flowInfo) {", "+\tthis(parent, tryStatement, handledExceptions, exceptionToCatchBlockMap, ", "+\t\t\ttryStatement.catchArguments, initializationParent, scope, flowInfo.unconditionalInits());", "+\tthis.initsOnFinally = flowInfo.unconditionalCopy();", "+\tthis.conditionalLevel = 0;\t", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afa3c6ac19c719687703c82de10d749d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "8c030d505f30b0cafedd9f4204a10256b97739b1", "commitAfterChange": "7ad108ea3de2b7d68d2737f4428379110b97b811", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public ExceptionHandlingFlowContext( \t\tFlowContext parent, \t\tASTNode associatedNode, \t\tReferenceBinding[] handledExceptions, \t\tint [] exceptionToCatchBlockMap, \t\tArgument [] catchArguments, \t\tFlowContext initializationParent, \t\tBlockScope scope, \t\tUnconditionalFlowInfo flowInfo)", "signatureAfterChange": " public ExceptionHandlingFlowContext( \t\tFlowContext parent, \t\tTryStatement tryStatement, \t\tReferenceBinding[] handledExceptions, \t\tint [] exceptionToCatchBlockMap, \t\tFlowContext initializationParent, \t\tBlockScope scope, \t\tFlowInfo flowInfo)", "diff": ["+\t\tTryStatement tryStatement,", "+\t\tReferenceBinding[] handledExceptions,", "+\t\tint [] exceptionToCatchBlockMap,", "+\t\tFlowContext initializationParent,", "+\t\tBlockScope scope,", "+\t\tFlowInfo flowInfo) {", "+\tthis(parent, tryStatement, handledExceptions, exceptionToCatchBlockMap, ", "+\t\t\ttryStatement.catchArguments, initializationParent, scope, flowInfo.unconditionalInits());", "+\tthis.initsOnFinally = flowInfo.unconditionalCopy();", "+\tthis.conditionalLevel = 0;\t", "+}"]}], "num": 66586}
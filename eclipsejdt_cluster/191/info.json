{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46df77e107788f96401b26d305670755", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35456dff853e6fd19359dfcd9ac10856", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "a9c15bae1087a65c1bc60140ceb7a5a5416fd8a8", "commitAfterChange": "74110f56eda8b0a2f39e0bc3ea1b2554a9ed3db1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \tprotected void generateClasspathChangeDeltas(\r \t\tIClasspathEntry[] oldResolvedPath,\r \t\tIClasspathEntry[] newResolvedPath,\r \t\tJavaModelManager manager,\r \t\tJavaProject project)", "signatureAfterChange": "\r \tprotected void generateClasspathChangeDeltas(\r \t\tIClasspathEntry[] oldResolvedPath,\r \t\tIClasspathEntry[] newResolvedPath,\r \t\tJavaModelManager manager,\r \t\tJavaProject project)", "diff": ["-\r", "+\t\t\t\r", "+\t\tIndexManager indexManager = manager.getIndexManager();\r", "+\t\t\t\t// and remove the .java files from the index (.class files belong to binary folders which can be shared, \r", "+\t\t\t\t// so leave the index) \r", "+\t\t\t\t\t} else if (indexManager != null && changeKind == IClasspathEntry.CPE_SOURCE) {\r", "+\t\t\t\t\t\tindexManager.removeSourceFolderFromIndex(project, oldResolvedPath[i].getPath());\r", "-\t\t\t\t// Request indexing of the library\r", "-\t\t\t\tif (changeKind == IClasspathEntry.CPE_LIBRARY) {\r", "-\t\t\t\t\tIndexManager indexManager = JavaModelManager.getJavaModelManager().getIndexManager();\r", "-\t\t\t\t\tif (indexManager != null) {\r", "-\t\t\t\t\t\tboolean pathHasChanged = true;\r", "-\t\t\t\t\t\tIPath newPath = newResolvedPath[i].getPath();\r", "-\t\t\t\t\t\tfor (int j = 0; j < oldResolvedPath.length; j++) {\r", "-\t\t\t\t\t\t\tIClasspathEntry oldEntry = oldResolvedPath[j];\r", "-\t\t\t\t\t\t\tif (oldEntry.getPath().equals(newPath)) {\r", "-\t\t\t\t\t\t\t\tpathHasChanged = false;\r", "-\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t// Request indexing\r", "+\t\t\t\tif (indexManager != null) {\r", "+\t\t\t\t\tswitch (changeKind) {\r", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:\r", "+\t\t\t\t\t\t\tboolean pathHasChanged = true;\r", "+\t\t\t\t\t\t\tIPath newPath = newResolvedPath[i].getPath();\r", "+\t\t\t\t\t\t\tfor (int j = 0; j < oldResolvedPath.length; j++) {\r", "+\t\t\t\t\t\t\t\tIClasspathEntry oldEntry = oldResolvedPath[j];\r", "+\t\t\t\t\t\t\t\tif (oldEntry.getPath().equals(newPath)) {\r", "+\t\t\t\t\t\t\t\t\tpathHasChanged = false;\r", "+\t\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tif (pathHasChanged) {\r", "-\t\t\t\t\t\t\tindexManager.indexLibrary(newPath, project.getProject());\r", "-\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tif (pathHasChanged) {\r", "+\t\t\t\t\t\t\t\tindexManager.indexLibrary(newPath, project.getProject());\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE:\r", "+\t\t\t\t\t\t\tindexManager.indexSourceFolder(project, newResolvedPath[i].getPath());\r", "+\t\t\t\t\t\t\tbreak;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a9144e919bcbbbda47007962b99d71b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "505b0db16406f11df3227a34e8e784faefbd6e90", "commitAfterChange": "09731db443a17aa3c4de981e4334f98fc716832d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprotected void updateAffectedProjects(IPath prerequisiteProjectPath)", "signatureAfterChange": " \tprotected void updateAffectedProjects(IPath prerequisiteProjectPath)", "diff": ["+\t\t// remove all update classpath post actions for this project", "+\t\tremoveAllPostAction(prerequisiteProjectPath.toString());", "+\t\t", "-\t\t\t\t\tJavaProject affectedProject = (JavaProject) projects[i];", "+\t\t\t\t\tfinal JavaProject affectedProject = (JavaProject) projects[i];", "-\t\t\t\t\t\t\taffectedProject.setRawClasspath(", "-\t\t\t\t\t\t\t\tUpdateClasspath, ", "-\t\t\t\t\t\t\t\tSetClasspathOperation.ReuseOutputLocation, ", "-\t\t\t\t\t\t\t\tthis.fMonitor, ", "-\t\t\t\t\t\t\t\tthis.canChangeResource,  ", "-\t\t\t\t\t\t\t\taffectedProject.getResolvedClasspath(true), ", "-\t\t\t\t\t\t\t\tfalse, // updating only - no validation", "-\t\t\t\t\t\t\t\tfalse); // updating only - no need to save", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tpostAction(new IPostAction() {", "+\t\t\t\t\t\t\t\t\tpublic String getID() {", "+\t\t\t\t\t\t\t\t\t\treturn affectedProject.getPath().toString();", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tpublic void run() throws JavaModelException {", "+\t\t\t\t\t\t\t\t\t\taffectedProject.setRawClasspath(", "+\t\t\t\t\t\t\t\t\t\t\tUpdateClasspath, ", "+\t\t\t\t\t\t\t\t\t\t\tSetClasspathOperation.ReuseOutputLocation, ", "+\t\t\t\t\t\t\t\t\t\t\tSetClasspathOperation.this.fMonitor, ", "+\t\t\t\t\t\t\t\t\t\t\tSetClasspathOperation.this.canChangeResource,  ", "+\t\t\t\t\t\t\t\t\t\t\taffectedProject.getResolvedClasspath(true), ", "+\t\t\t\t\t\t\t\t\t\t\tfalse, // updating only - no validation", "+\t\t\t\t\t\t\t\t\t\t\tfalse); // updating only - no need to save", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t},", "+\t\t\t\t\t\t\t\tREMOVEALL_APPEND);"]}], "num": 191}
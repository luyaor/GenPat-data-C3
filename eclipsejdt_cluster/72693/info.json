{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8609756db21217e3127b4b7debbf1116", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "019f95e4d59ddead3d7bc6050573b518", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 229, "methodNumberAfterChange": 229, "signatureBeforeChange": " \tpublic void test227()", "signatureAfterChange": " \tpublic void test227()", "diff": ["-\t\t\t\"Type safety: The cast from List to List<X> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from List to List<X> is actually checking against the erased type List\\n\" + ", "-\t\t\t\"Type safety: The expression of raw type List is converted to List<X>. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type List is converted to List<X> using a raw conversion. References to generic type List<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: The expression of raw type Iterator is converted to Iterator<X>. References to generic type Iterator<E> should be parameterized\\n\" + ", "+\t\t\t\"Type safety: The expression of type Iterator is converted to Iterator<X> using a raw conversion. References to generic type Iterator<E> should be parameterized\\n\" + ", "-\t\t\t\"Type safety: The cast from Collection to List<X> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from Collection to List<X> is actually checking against the erased type List\\n\" + ", "-\t\t\t\"Type safety: The cast from List to Collection<X> will not check conformance of type arguments at runtime\\n\" + ", "+\t\t\t\"Type safety: The cast from List to Collection<X> is actually checking against the erased type Collection\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27b65ca8506734a3f37c387510857d93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic void test045()", "signatureAfterChange": " \tpublic void test045()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     9  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    12  iload_1\\n\" + ", "-\t\t\t\"    13  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     9  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    12  iload_1 [i]\\n\" + ", "+\t\t\t\"    13  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9562bcaf3ab943b3a194e140eb57ad2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "605cc5dd745b7e1d6935bfc34c1be6fcea51b4ab", "commitAfterChange": "03be42bb9ac6b223bea20e29a7b3f31a76dae9e4", "methodNumberBeforeChange": 340, "methodNumberAfterChange": 340, "signatureBeforeChange": " public void testBug110336b() throws CoreException", "signatureAfterChange": " public void testBug110336b() throws CoreException", "diff": ["-\t\t\"src/b110336/Test.java void b110336.Test.method1(Test):<anonymous>#1 [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.method1(Test):<anonymous>#1.c [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void void b110336.Test.method1(Test):<anonymous>#1.foo().TP [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void void b110336.Test.method1(Test):<anonymous>#1.foo().o [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void void b110336.Test.method1(Test):<anonymous>#1.foo().o [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.method1(Test).methodParam [Test]\\n\" +", "-\t\t\"src/b110336/Test.java void b110336.Test.method1(Test).localVar1 [Test]\",", "+\t\t\"src/b110336/Test.java void b110336.Test.method1(Test):<anonymous>#1 [Test]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.method1(Test):<anonymous>#1.c [Test]\\n\" + ", "+\t\t\"src/b110336/Test.java void void b110336.Test.method1(Test):<anonymous>#1.foo() [Test]+[TP]\\n\" + ", "+\t\t\"src/b110336/Test.java void void b110336.Test.method1(Test):<anonymous>#1.foo() [Test]+[o]\\n\" + ", "+\t\t\"src/b110336/Test.java void void b110336.Test.method1(Test):<anonymous>#1.foo() [Test]+[o]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.method1(Test) [Test]+[methodParam]\\n\" + ", "+\t\t\"src/b110336/Test.java void b110336.Test.method1(Test) [Test]+[localVar1]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5bf5abdfa8ce72b48fca2c018fb89e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void test028()", "signatureAfterChange": " \tpublic void test028()", "diff": ["-\t\t\t\"     2  istore_1\\n\" + ", "-\t\t\t\"     3  iload_1\\n\" + ", "+\t\t\t\"     2  istore_1 [i]\\n\" + ", "+\t\t\t\"     3  iload_1 [i]\\n\" + ", "-\t\t\t\"     8  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\t\"    11  iload_1\\n\" + ", "-\t\t\t\"    12  invokevirtual #27 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\t\"     8  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\t\"    11  iload_1 [i]\\n\" + ", "+\t\t\t\"    12  invokevirtual java/io/PrintStream.println(I)V [27]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e984dac2aa6fc15be8380b9a679571d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastTest.java", "commitBeforeChange": "9850e4ae951b6df5bc8bfe162d8a3e3e67beff62", "commitAfterChange": "e9ca95978aca2a442bfecfb8ac281f372092486a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void test001()", "signatureAfterChange": " public void test001()", "diff": ["-\t\t\"     6  getstatic java/lang/System.out Ljava/io/PrintStream; [21]\\n\" + ", "+\t\t\"     6  getstatic java.lang.System.out : java.io.PrintStream [21]\\n\" + ", "-\t\t\"    11  invokevirtual java/io/PrintStream.print(Ljava/lang/String;)V [29]\\n\" + ", "+\t\t\"    11  invokevirtual java.io.PrintStream.print(java.lang.String) : void  [29]\\n\" + ", "-\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "-\t\t\"        [pc: 4, pc: 15] local: c1 index: 1 type: Ljava/lang/Cloneable;\\n\" + ", "-\t\t\"        [pc: 6, pc: 15] local: c2 index: 2 type: Ljava/lang/Cloneable;\\n\";", "+\t\t\"        [pc: 0, pc: 15] local: args index: 0 type: java.lang.String[]\\n\" + ", "+\t\t\"        [pc: 4, pc: 15] local: c1 index: 1 type: java.lang.Cloneable\\n\" + ", "+\t\t\"        [pc: 6, pc: 15] local: c2 index: 2 type: java.lang.Cloneable\\n\";"]}], "num": 72693}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5b084d1b853312d0cdb0f67e7303af4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4faa96d297b42727197ee059dac96f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "bca01eadc82a3abb71100149fcbedb07d33a04ad", "commitAfterChange": "a6f21a01110fe95a43760ec08fc8cc1e27e1c4bc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, \t\t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, \t\t\tFlowInfo flowInfo)", "diff": ["+\t\tfinal CompilerOptions compilerOptions = currentScope.compilerOptions();", "-\t\t\tif (!isKnowDeadCodePattern(this.condition) || currentScope.compilerOptions().reportDeadCodeInTrivialIfStatement) {", "+\t\t\tif (!isKnowDeadCodePattern(this.condition) || compilerOptions.reportDeadCodeInTrivialIfStatement) {", "-\t\tif (currentScope.compilerOptions().enableSyntacticNullAnalysisForFields) {", "+\t\tif (compilerOptions.enableSyntacticNullAnalysisForFields) {", "-\t\t\tif (!isKnowDeadCodePattern(this.condition) || currentScope.compilerOptions().reportDeadCodeInTrivialIfStatement) {", "+\t\t\tif (!isKnowDeadCodePattern(this.condition) || compilerOptions.reportDeadCodeInTrivialIfStatement) {", "+\t\tif (isPolyExpression() && compilerOptions.isAnnotationBasedNullAnalysisEnabled && flowInfo.reachMode() == FlowInfo.REACHABLE) {", "+\t\t\tcheckAgainstNullTypeAnnotation(currentScope, this.resolvedType, this.valueIfTrue, flowContext, flowInfo);", "+\t\t\tcheckAgainstNullTypeAnnotation(currentScope, this.resolvedType, this.valueIfFalse, flowContext, flowInfo);", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd2940f4002ea1059c5eeede6a70123c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "bc8a42889f857ed7728b976d31e674de6afdad4d", "commitAfterChange": "e50f3d9d374cf35289e57b1f80fafcaa8e59eb2e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t", "-\t\tif (condition.constant != NotAConstant", "-\t\t\t&& valueIfTrue.constant != NotAConstant", "-\t\t\t&& valueIfFalse.constant != NotAConstant) {", "+\t\tConstant condConstant, trueConstant, falseConstant;", "+\t\tif ((condConstant = condition.constant) != NotAConstant", "+\t\t\t&& (trueConstant = valueIfTrue.constant) != NotAConstant", "+\t\t\t&& (falseConstant = valueIfFalse.constant) != NotAConstant) {", "-\t\t\tconstant =", "-\t\t\t\t(condition.constant.booleanValue())", "-\t\t\t\t\t? valueIfTrue.constant", "-\t\t\t\t\t: valueIfFalse.constant;", "+\t\t\tconstant = condConstant.booleanValue() ? trueConstant : falseConstant;", "-\t\t\tthis.resolvedType = valueIfTrueType;", "-\t\t\treturn valueIfTrueType;", "+", "+\t\t\t// Propagate the optimized boolean constant if possible", "+\t\t\tif ((condConstant = condition.optimizedBooleanConstant()) != NotAConstant", "+\t\t\t\t&& valueIfTrueType == BooleanBinding) {", "+\t\t\t\t", "+\t\t\t\tthis.optimizedBooleanConstant = condConstant.booleanValue()", "+\t\t\t\t\t? valueIfTrue.optimizedBooleanConstant()", "+\t\t\t\t\t: valueIfFalse.optimizedBooleanConstant();", "+\t\t\t}", "+\t\t\treturn this.resolvedType = valueIfTrueType;"]}], "num": 37148}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "085f2f400b22971cc40ae50adae7307e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28bbb89abd85a585a0c499c2e4ee037b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "9a8c0b7f51c1a0b9d37b7d38acb4d0261e31390a", "commitAfterChange": "278bd24e5aaae65022c9b0e7c10b22e5ffa034b6", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  \tprivate boolean isValidEdit(OptimizedReplaceEdit edit)", "signatureAfterChange": "  \tprivate boolean isValidEdit(OptimizedReplaceEdit edit)", "diff": ["-\t\t\tif (this.textRegionStart <= editOffset && (editOffset + editLength - 1) <= this.textRegionEnd) {", "+\t\t\t", "+\t\t\tIRegion covering = getCoveringRegion(editOffset, (editOffset + editLength - 1));", "+\t\t\tif (covering != null) {", "-\t\t\t\t} else {", "-\t\t\t\t\treturn true;", "-\t\t\t} else if (editOffset + editLength == this.textRegionStart) {", "+\t\t\t\treturn true;", "+\t\t\t}", "+", "+\t\t\tIRegion starting = getRegionAt(editOffset + editLength);", "+\t\t\tif (starting != null) {", "-\t\t\t\t\tedit.offset = textRegionStart;", "+\t\t\t\t\tedit.offset = starting.getOffset();", "-\t\t} else if (this.textRegionStart <= editOffset && editOffset <= this.textRegionEnd) {", "+\t\t\t", "+\t\t\treturn false;", "+\t\t}", "+\t\t", "+\t\tIRegion covering = getCoveringRegion(editOffset, editOffset);", "+\t\tif (covering != null) {", "-\t\t} else if (editOffset == this.scannerEndPosition && editOffset == this.textRegionEnd + 1) {", "+\t\t}", "+", "+\t\tif (editOffset == this.scannerEndPosition) {", "+\t\t\tint index = Arrays.binarySearch(", "+\t\t\t\tthis.regions,", "+\t\t\t\tnew Region(editOffset, 0),", "+\t\t\t\tnew Comparator() {", "+\t\t\t\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\t\t\t\tIRegion r1 = (IRegion)o1;", "+\t\t\t\t\t\tIRegion r2 = (IRegion)o2;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tint r1End = r1.getOffset() + r1.getLength();", "+\t\t\t\t\t\tint r2End = r2.getOffset() + r2.getLength();", "+\t\t\t\t\t\t", "+\t\t\t\t\t\treturn r1End - r2End;", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\tif (index < 0) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "399b58aa32595d1c24084d10d6d55868", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java", "commitBeforeChange": "266ddb07da0dd2618bcfbec3256d70ddf353d13c", "commitAfterChange": "0f0f6cf807937b95cd594ad18f819e710f9be563", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " protected IJavaElement[] codeSelect(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, int offset, int length) throws JavaModelException", "signatureAfterChange": " protected IJavaElement[] codeSelect(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, int offset, int length, WorkingCopyOwner owner) throws JavaModelException", "diff": ["- */", "-protected IJavaElement[] codeSelect(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, int offset, int length) throws JavaModelException {", "-\tSelectionRequestor requestor= new SelectionRequestor(((JavaProject)getJavaProject()).getNameLookup(), this);", "-\tthis.codeSelect(cu, offset, length, requestor);", "-\treturn requestor.getElements();", "-}", "+}", "+protected IJavaElement[] codeSelect(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, int offset, int length, WorkingCopyOwner owner) throws JavaModelException {", "+\tNameLookup nameLookup = null;", "+\ttry {", "+\t\t// set the units to look inside", "+\t\tnameLookup = ((JavaProject)getJavaProject()).getNameLookup();", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "+\t\tnameLookup.setUnitsToLookInside(workingCopies);", "+", "+\t\t// code select", "+\t\tSelectionRequestor requestor= new SelectionRequestor(nameLookup, this);", "+\t\tIBuffer buffer = getBuffer();", "+\t\tif (buffer == null) {", "+\t\t\treturn requestor.getElements();", "+\t\t}", "+\t\tint end= buffer.getLength();", "+\t\tif (offset < 0 || length < 0 || offset + length > end ) {", "+\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INDEX_OUT_OF_BOUNDS));", "+\t\t}", "+\t", "+\t\t// fix for 1FVGGKF", "+\t\tJavaProject project = (JavaProject)getJavaProject();", "+\t\tISearchableNameEnvironment environment = project.getSearchableNameEnvironment();", "+\t\t", "+\t\t// fix for 1FVXGDK", "+\t\tSelectionEngine engine = new SelectionEngine(environment, requestor, project.getOptions(true));", "+\t\tengine.select(cu, offset, offset + length - 1);", "+\t\treturn requestor.getElements();", "+\t} finally {", "+\t\tif (nameLookup != null) {", "+\t\t\tnameLookup.setUnitsToLookInside(null);", "+\t\t}", "+\t}"]}], "num": 37767}
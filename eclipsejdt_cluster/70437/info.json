{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7b797797bdc5b671bfb13696a3d910e0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ef001a13b3dc0445d01fac5418e218b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "bf20c4733b5ba628131f77425b6d1ad646dfd787", "commitAfterChange": "4fece3d5714f1973bb889af985f57d3ae8f56e20", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " HashtableOfObject addQueryResults(char[][] categories, char[] key, int matchRule, MemoryIndex memoryIndex) throws IOException", "signatureAfterChange": " HashtableOfObject addQueryResults(char[][] categories, char[] key, int matchRule, MemoryIndex memoryIndex) throws IOException", "diff": ["-\t\t\tCategoryTable wordsToDocNumbers = readCategoryTable(categories[i], true); // cache if key is null since its a definite match", "+\t\t\tHashtableOfObject wordsToDocNumbers = readCategoryTable(categories[i], true); // cache if key is null since its a definite match", "+\t\t\t\tObject[] values = wordsToDocNumbers.valueTable;", "-\t\t\t\t\t\tresults = addQueryResult(results, words[j], wordsToDocNumbers, memoryIndex, prevResults);", "+\t\t\t\t\t\tresults = addQueryResult(results, words[j], values[j], memoryIndex, prevResults);", "-\t\t\t\t\tCategoryTable wordsToDocNumbers = readCategoryTable(categories[i], false);", "-\t\t\t\t\tif (wordsToDocNumbers != null && wordsToDocNumbers.containsKey(key))", "-\t\t\t\t\t\tresults = addQueryResult(results, key, wordsToDocNumbers, memoryIndex, prevResults);", "+\t\t\t\t\tHashtableOfObject wordsToDocNumbers = readCategoryTable(categories[i], false);", "+\t\t\t\t\tObject value;", "+\t\t\t\t\tif (wordsToDocNumbers != null && (value = wordsToDocNumbers.get(key)) != null)", "+\t\t\t\t\t\tresults = addQueryResult(results, key, value, memoryIndex, prevResults);", "-\t\t\t\t\tCategoryTable wordsToDocNumbers = readCategoryTable(categories[i], false);", "+\t\t\t\t\tHashtableOfObject wordsToDocNumbers = readCategoryTable(categories[i], false);", "+\t\t\t\t\t\tObject[] values = wordsToDocNumbers.valueTable;", "-\t\t\t\t\t\t\t\tresults = addQueryResult(results, word, wordsToDocNumbers, memoryIndex, prevResults);", "+\t\t\t\t\t\t\t\tresults = addQueryResult(results, word, values[j], memoryIndex, prevResults);", "-\t\t\t\t\tCategoryTable wordsToDocNumbers = readCategoryTable(categories[i], false);", "+\t\t\t\t\tHashtableOfObject wordsToDocNumbers = readCategoryTable(categories[i], false);", "+\t\t\t\t\t\tObject[] values = wordsToDocNumbers.valueTable;", "-\t\t\t\t\t\t\t\tresults = addQueryResult(results, word, wordsToDocNumbers, memoryIndex, prevResults);", "+\t\t\t\t\t\t\t\tresults = addQueryResult(results, word, values[j], memoryIndex, prevResults);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13021e16aa85d98b2a059858b80898b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "ade89e4fcc147d76e26736c6fadf9edebfc6386e", "commitAfterChange": "29f9f7b54f341569f134578b4014b331ae83ea82", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \r private SimpleLookupTable findDeltas()", "signatureAfterChange": "\r \r private SimpleLookupTable findDeltas()", "diff": ["-\tSimpleLookupTable deltas = new SimpleLookupTable(prereqOutputFolders.elementSize + 1);\r", "+\tSimpleLookupTable deltas = new SimpleLookupTable(binaryResources.elementSize + 1);\r", "-\tObject[] keyTable = prereqOutputFolders.keyTable;\r", "-\tfor (int i = 0, l = keyTable.length; i < l; i++) {\r", "-\t\tIProject prereqProject = (IProject) keyTable[i];\r", "-\t\tif (prereqProject != null && lastState.isStructurallyChanged(prereqProject, getLastState(prereqProject))) {\r", "-\t\t\tnotifier.subTask(Util.bind(\"build.readingDelta\", prereqProject.getName())); //$NON-NLS-1$\r", "-\t\t\tdelta = getDelta(prereqProject);\r", "+\tObject[] keyTable = binaryResources.keyTable;\r", "+\tObject[] valueTable = binaryResources.valueTable;\r", "+\tnextProject : for (int i = 0, l = keyTable.length; i < l; i++) {\r", "+\t\tIProject p = (IProject) keyTable[i];\r", "+\t\tif (p != null && p != currentProject) {\r", "+\t\t\tif (!lastState.isStructurallyChanged(p, getLastState(p))) { // see if we can skip its delta\r", "+\t\t\t\tIResource[] binaryResources = (IResource[]) valueTable[i];\r", "+\t\t\t\tif (binaryResources.length <= 1)\r", "+\t\t\t\t\tcontinue nextProject; // project has no structural changes in its output folder\r", "+\t\t\t\tbinaryResources[0] = null; // skip the output folder\r", "+\t\t\t}\r", "+\r", "+\t\t\tnotifier.subTask(Util.bind(\"build.readingDelta\", p.getName())); //$NON-NLS-1$\r", "+\t\t\tdelta = getDelta(p);\r", "-\t\t\t\tdeltas.put(prereqProject, delta);\r", "+\t\t\t\tdeltas.put(p, delta);\r", "-\t\t\t\t\tSystem.out.println(\"Missing delta for: \" + prereqProject.getName());\t //$NON-NLS-1$\r", "+\t\t\t\t\tSystem.out.println(\"Missing delta for: \" + p.getName());\t //$NON-NLS-1$\r"]}], "num": 70437}
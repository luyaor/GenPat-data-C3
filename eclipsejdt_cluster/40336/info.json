{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1eec8820a7a50d25cd4f27abfe53d983", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c708df919b9c1ed04588dbac980444e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "67da1da15e9afbcd33679f07597c706e7915cf4a", "commitAfterChange": "027fccb2c17e0f0d2b28705c6704af10fc8ce0aa", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 43, "signatureBeforeChange": " private boolean containsCompletionNode(AstNode ast)", "signatureAfterChange": " protected void consumeUnaryExpression(int op, boolean post)", "diff": ["- */", "-private boolean containsCompletionNode(AstNode ast) {", "-\tif (this.assistNode == null || ast instanceof Literal) {", "-\t\treturn false;", "-\t}", "-\tif (this.assistNode == ast) {", "-\t\treturn true;", "-\t}", "-\tif (ast instanceof Reference || ast instanceof TypeReference) {", "-\t\treturn ast == this.assistNode;", "-\t}", "-\tif (ast instanceof Assignment) {", "-\t\tAssignment assign = (Assignment)ast;", "-\t\treturn containsCompletionNode(assign.lhs) || containsCompletionNode(assign.expression);", "-\t}", "-\tif (ast instanceof UnaryExpression) {", "-\t\tUnaryExpression unary = (UnaryExpression)ast;", "-\t\treturn containsCompletionNode(unary.expression);", "-\t}", "-\tif (ast instanceof BinaryExpression) {", "-\t\tBinaryExpression binary = (BinaryExpression)ast;", "-\t\treturn containsCompletionNode(binary.left) || containsCompletionNode(binary.right);", "-\t}", "-\tif (ast instanceof InstanceOfExpression) {", "-\t\tInstanceOfExpression instanceOfExpr = (InstanceOfExpression)ast;", "-\t\treturn containsCompletionNode(instanceOfExpr.expression) || containsCompletionNode(instanceOfExpr.type);", "-\t}", "-\tif (ast instanceof ConditionalExpression) {", "-\t\tConditionalExpression conditional = (ConditionalExpression)ast;", "-\t\treturn containsCompletionNode(conditional.condition) || containsCompletionNode(conditional.valueIfTrue) || containsCompletionNode(conditional.valueIfFalse);", "-\t}", "-\tif (ast instanceof AllocationExpression) {", "-\t\tAllocationExpression alloc = (AllocationExpression)ast;", "-\t\treturn containsCompletionNode(alloc.type);", "-\t}", "-\tif (ast instanceof CastExpression) {", "-\t\tCastExpression cast = (CastExpression)ast;", "-\t\treturn containsCompletionNode(cast.expression) || containsCompletionNode(cast.type);", "-\t}", "-\tif (ast instanceof ExplicitConstructorCall) {", "-\t\tExplicitConstructorCall call = (ExplicitConstructorCall)ast;", "-\t\tExpression[] arguments = call.arguments;", "-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0; i < arguments.length; i++) {", "-\t\t\t\tif (containsCompletionNode(arguments[i])) {", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn false;", "-\t\t}", "-\t}", "-\treturn false;", "+protected void consumeUnaryExpression(int op, boolean post) {", "+\tsuper.consumeUnaryExpression(op, post);", "+\tpopElement(K_OPERATOR);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e104afb7b31d9335ca2cb9ff74dfdd36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/apitest/APIAnnotationProcessorFactory.java", "commitBeforeChange": "30c49b5bc6e547c53d00a168ee911b66fd1b8333", "commitAfterChange": "5b13e00811f6ebc9106e29508e7dea2c0317b22d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\t \t\tpublic void process()", "signatureAfterChange": " \t\t \t\tpublic void process()", "diff": ["-\t\t\tfinal Messager msgr = _env.getMessager();", "+\t\t\t_msgr = _env.getMessager();", "+\t\t\t_types = _env.getTypeUtils();", "+\t\t\tcheckCommon();", "+\t\t\tcheckSubtypeOf();", "+\t\t\tcheckAssignableTo();", "+\t\t}", "-\t\t\t\t\t\t\t\tmsgr.printError(typeVar + \" is assignable to \" + collectionType );", "-\t\t\t\t\t\t\t\tmsgr.printError(typeVar + \" is not assignable to \" + collectionType );", "-\t\t\t\t\t\tmsgr.printError(\"Type parameter '\" + typeParam + \"' belongs to \" + owner.getClass().getName() + \" \" + owner.getSimpleName() );", "-\t\t\t\t\t\tmsgr.printError(\"Type parameter '\" + typeParam + \"' belongs to \" + owner.getClass().getName() + \" \" + owner.getSimpleName() );"]}], "num": 40336}
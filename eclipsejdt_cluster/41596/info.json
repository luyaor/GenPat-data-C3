{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1b6fcc5a6d2734df9ee53880b55d783", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92419612302b775c4f23aa9de249ee69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "d7ed279f5216d32337e674d05a19fd9c56f52744", "commitAfterChange": "ac106841a196855c6b6f3e4eb6862eaf680b2f0c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tprivate GeneratedFileManager(final IProject project)", "signatureAfterChange": " \tprivate GeneratedFileManager(final IProject project)", "diff": ["-\t\t// register a preference listener so that we can watch for changes to the gen src dir", "-\t\tProjectScope projScope = new ProjectScope(project);", "+\t\t// register a preference listener so that we can watch for changes ", "+\t\t// to the gen src dir at the project scope...", "+\t\tIScopeContext projScope = new ProjectScope(project);", "-\t\tIPreferenceChangeListener listener = new IPreferenceChangeListener() {", "+\t\tIPreferenceChangeListener projListener = new IPreferenceChangeListener() {", "-\t\tprojPrefs.addPreferenceChangeListener(listener);", "+\t\tprojPrefs.addPreferenceChangeListener(projListener);", "+\t\t", "+\t\t// ...and at the workspace scope.", "+\t\t// Note we check all projects, even those that have project-specific", "+\t\t// settings, when the workspace setting changes.  For projects with", "+\t\t// project-specific settings, the value of the setting won't change ", "+\t\t// so the request will be ignored.", "+\t\tIScopeContext wkspScope = new InstanceScope();", "+\t\tIEclipsePreferences wkspPrefs = wkspScope.getNode(AptPlugin.PLUGIN_ID);", "+\t\tIPreferenceChangeListener wkspListener = new IPreferenceChangeListener() {", "+\t\t\tpublic void preferenceChange(PreferenceChangeEvent event) {", "+\t\t\t\tif (AptPreferenceConstants.APT_GENSRCDIR.equals(event.getKey())) {", "+\t\t\t\t\tsetGeneratedSourceFolderName( AptConfig.getGenSrcDir(_javaProject) );", "+\t\t\t\t}", "+\t\t\t}", "+\t\t};", "+\t\twkspPrefs.addPreferenceChangeListener(wkspListener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab48e897215e18d816924d68ca661843", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "520041d0423ef12b783f972ada6965c110a14f35", "commitAfterChange": "e76b520983e1bc552c451b3a88a31c5ed84bdcc1", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " protected String getPluginDirectoryPath()", "signatureAfterChange": " protected String getPluginDirectoryPath()", "diff": ["-\t\t\treturn pluginsPath + \"org.eclipse.jdt.core.tests.model\";", "+\t\t\tFile pluginsFile = new File(pluginsPath);", "+\t\t\tString[] list = pluginsFile.list(new FilenameFilter() {", "+\t\t\t\tpublic boolean accept(File dir, String name) {", "+\t\t\t\t\treturn name.startsWith( \"org.eclipse.jdt.core.tests.model\");", "+\t\t\t\t}", "+\t\t\t});", "+\t\t\tif (list != null && list.length > 0) {", "+\t\t\t\treturn pluginsPath + list[0];", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f29e28386cb0a5435bdbd5d4ae82a280", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "770593151f5b1e3442f7b7b1758720edbd6bcbcc", "commitAfterChange": "83c25e0d5425d33b4f960a5db0759ae93da40d46", "methodNumberBeforeChange": 215, "methodNumberAfterChange": 214, "signatureBeforeChange": "  \tpublic void startup() throws CoreException", "signatureAfterChange": "  \tpublic void startup() throws CoreException", "diff": ["+\t\t\t", "+\t\t\t// listen for encoding changes (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=255501 )", "+\t\t\tthis.resourcesPropertyListener = new IEclipsePreferences.IPreferenceChangeListener() {", "+\t\t\t\tpublic void preferenceChange(PreferenceChangeEvent event) {", "+\t\t\t\t\tif (ResourcesPlugin.PREF_ENCODING.equals(event.getKey())) {", "+\t\t\t\t\t\tJavaModelManager.this.optionsCache = null;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t};", "+\t\t\tString resourcesPluginId = ResourcesPlugin.getPlugin().getBundle().getSymbolicName();", "+\t\t\tnew InstanceScope().getNode(resourcesPluginId).addPreferenceChangeListener(this.resourcesPropertyListener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff2bbcf1a8f9af1efe5534b65d4da0fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ExternalFoldersManager.java", "commitBeforeChange": "e6a94071ba1347cd79bc7467e3bac32c94398042", "commitAfterChange": "6eb70a41e0be0423bb1f7fafc15cb4df8d80eaea", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void refreshReferences(IProject source, IProgressMonitor monitor)", "signatureAfterChange": " \tpublic void refreshReferences(IProject source, IProgressMonitor monitor)", "diff": ["-\t\t\tIterator iterator = externalFolders.iterator();", "-\t\t\twhile (iterator.hasNext()) {", "-\t\t\t\tIPath externalPath = (IPath) iterator.next();", "-\t\t\t\tIFolder folder = getFolder(externalPath);", "-\t\t\t\tif (folder != null)", "-\t\t\t\t\tfolder.refreshLocal(IResource.DEPTH_INFINITE, monitor);", "-\t\t\t}", "+\t\t\tfinal Iterator iterator = externalFolders.iterator();", "+\t\t\tJob refreshJob = new Job(Messages.refreshing_external_folders) { ", "+\t\t\t\tpublic boolean belongsTo(Object family) {", "+\t\t\t\t\treturn family == ResourcesPlugin.FAMILY_MANUAL_REFRESH;", "+\t\t\t\t}", "+\t\t\t\tprotected IStatus run(IProgressMonitor pm) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\t\t\t\tIPath externalPath = (IPath) iterator.next();", "+\t\t\t\t\t\t\tIFolder folder = getFolder(externalPath);", "+\t\t\t\t\t\t\tif (folder != null)", "+\t\t\t\t\t\t\t\tfolder.refreshLocal(IResource.DEPTH_INFINITE, pm);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\treturn e.getStatus();", "+\t\t\t\t\t}", "+\t\t\t\t\treturn Status.OK_STATUS;", "+\t\t\t\t}", "+\t\t\t};", "+\t\t\trefreshJob.schedule();"]}], "num": 41596}
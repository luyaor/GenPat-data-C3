{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb78fa03b2c5db1e25b2d31b482f47a5", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "121d783ad8e07a280743030c484d555c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodPattern.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 10, "signatureBeforeChange": " public String toString()", "signatureAfterChange": " protected StringBuffer print(StringBuffer output)", "diff": ["-}", "-public String toString() {", "-\tStringBuffer buffer = new StringBuffer(20);", "+protected StringBuffer print(StringBuffer output) {", "-\t\tbuffer.append(this.findReferences", "+\t\toutput.append(this.findReferences", "-\t\tbuffer.append(\"MethodReferencePattern: \"); //$NON-NLS-1$", "+\t\toutput.append(\"MethodReferencePattern: \"); //$NON-NLS-1$", "-\t\tbuffer.append(declaringQualification).append('.');", "+\t\toutput.append(declaringQualification).append('.');", "-\t\tbuffer.append(declaringSimpleName).append('.');", "+\t\toutput.append(declaringSimpleName).append('.');", "-\t\tbuffer.append(\"*.\"); //$NON-NLS-1$", "+\t\toutput.append(\"*.\"); //$NON-NLS-1$", "-\t\tbuffer.append(selector);", "+\t\toutput.append(selector);", "-\t\tbuffer.append(\"*\"); //$NON-NLS-1$", "-\tbuffer.append('(');", "+\t\toutput.append(\"*\"); //$NON-NLS-1$", "+\toutput.append('(');", "-\t\tbuffer.append(\"...\"); //$NON-NLS-1$", "+\t\toutput.append(\"...\"); //$NON-NLS-1$", "-\t\t\tif (i > 0) buffer.append(\", \"); //$NON-NLS-1$", "-\t\t\tif (parameterQualifications[i] != null) buffer.append(parameterQualifications[i]).append('.');", "-\t\t\tif (parameterSimpleNames[i] == null) buffer.append('*'); else buffer.append(parameterSimpleNames[i]);", "+\t\t\tif (i > 0) output.append(\", \"); //$NON-NLS-1$", "+\t\t\tif (parameterQualifications[i] != null) output.append(parameterQualifications[i]).append('.');", "+\t\t\tif (parameterSimpleNames[i] == null) output.append('*'); else output.append(parameterSimpleNames[i]);", "-\tbuffer.append(')');", "+\toutput.append(')');", "-\t\tbuffer.append(\" --> \").append(returnQualification).append('.'); //$NON-NLS-1$", "+\t\toutput.append(\" --> \").append(returnQualification).append('.'); //$NON-NLS-1$", "-\t\tbuffer.append(\" --> \"); //$NON-NLS-1$", "+\t\toutput.append(\" --> \"); //$NON-NLS-1$", "-\t\tbuffer.append(returnSimpleName);", "+\t\toutput.append(returnSimpleName);", "-\t\tbuffer.append(\"*\"); //$NON-NLS-1$", "-\tbuffer.append(\", \"); //$NON-NLS-1$", "-\tswitch(getMatchMode()) {", "-\t\tcase R_EXACT_MATCH : ", "-\t\t\tbuffer.append(\"exact match, \"); //$NON-NLS-1$", "-\t\t\tbreak;", "-\t\tcase R_PREFIX_MATCH :", "-\t\t\tbuffer.append(\"prefix match, \"); //$NON-NLS-1$", "-\t\t\tbreak;", "-\t\tcase R_PATTERN_MATCH :", "-\t\t\tbuffer.append(\"pattern match, \"); //$NON-NLS-1$", "-\t\t\tbreak;", "-\t}", "-\tbuffer.append(isCaseSensitive() ? \"case sensitive\" : \"case insensitive\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\treturn buffer.toString();", "+\t\toutput.append(\"*\"); //$NON-NLS-1$", "+\treturn super.print(output);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea8b00a780adf1c8168c86b775e0fc98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorPattern.java", "commitBeforeChange": "9c0097e084b2c48ccca0e818ba9c1c1a50818167", "commitAfterChange": "ed04e9efb45ff73e01fac12a6ae0aba550054536", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public String toString()", "signatureAfterChange": " protected StringBuffer print(StringBuffer output)", "diff": ["-public String toString() {", "-\tStringBuffer buffer = new StringBuffer(20);", "+protected StringBuffer print(StringBuffer output) {", "-\t\tbuffer.append(this.findReferences", "+\t\toutput.append(this.findReferences", "-\t\tbuffer.append(\"ConstructorReferencePattern: \"); //$NON-NLS-1$", "+\t\toutput.append(\"ConstructorReferencePattern: \"); //$NON-NLS-1$", "-\t\tbuffer.append(declaringQualification).append('.');", "+\t\toutput.append(declaringQualification).append('.');", "-\t\tbuffer.append(declaringSimpleName);", "+\t\toutput.append(declaringSimpleName);", "-\t\tbuffer.append(\"*\"); //$NON-NLS-1$", "+\t\toutput.append(\"*\"); //$NON-NLS-1$", "-\tbuffer.append('(');", "+\toutput.append('(');", "-\t\tbuffer.append(\"...\"); //$NON-NLS-1$", "+\t\toutput.append(\"...\"); //$NON-NLS-1$", "-\t\t\tif (i > 0) buffer.append(\", \"); //$NON-NLS-1$", "-\t\t\tif (parameterQualifications[i] != null) buffer.append(parameterQualifications[i]).append('.');", "-\t\t\tif (parameterSimpleNames[i] == null) buffer.append('*'); else buffer.append(parameterSimpleNames[i]);", "+\t\t\tif (i > 0) output.append(\", \"); //$NON-NLS-1$", "+\t\t\tif (parameterQualifications[i] != null) output.append(parameterQualifications[i]).append('.');", "+\t\t\tif (parameterSimpleNames[i] == null) output.append('*'); else output.append(parameterSimpleNames[i]);", "-\tbuffer.append(')');", "-\tbuffer.append(\", \"); //$NON-NLS-1$", "-\tswitch(getMatchMode()) {", "-\t\tcase R_EXACT_MATCH : ", "-\t\t\tbuffer.append(\"exact match, \"); //$NON-NLS-1$", "-\t\t\tbreak;", "-\t\tcase R_PREFIX_MATCH :", "-\t\t\tbuffer.append(\"prefix match, \"); //$NON-NLS-1$", "-\t\t\tbreak;", "-\t\tcase R_PATTERN_MATCH :", "-\t\t\tbuffer.append(\"pattern match, \"); //$NON-NLS-1$", "-\t\t\tbreak;", "-\t}", "-\tbuffer.append(isCaseSensitive() ? \"case sensitive\" : \"case insensitive\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\treturn buffer.toString();", "+\toutput.append(')');", "+\treturn super.print(output);"]}], "num": 33936}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "42dac9257aed022d3a95544c883f8729", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92c1e06983abec918c8062d568f0a96f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "8d0a5299117e5fc84e729116ac52feef1385b968", "commitAfterChange": "527793c3501c0044ba7f65ec00ff957c7a149690", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic static IClasspathEntry newSourceEntry(IPath path, String[] exclusionPatterns)", "signatureAfterChange": " \tpublic static IClasspathEntry newSourceEntry(IPath path, String[] exclusionPatterns)", "diff": ["-\t\t", "+", "+\t\t// discard empty trimmed patterns", "+\t\t\tString[] trimmedPatterns = exclusionPatterns;", "+\t\tif (exclusionPatterns != null) {", "+\t\t\tint index = 0;", "+\t\t\tint patternCount = exclusionPatterns.length;", "+\t\t\tfor (int i = 0; i < patternCount; i++){", "+\t\t\t\tString pattern;", "+\t\t\t\tif ((pattern = exclusionPatterns[i]) == null) continue;", "+\t\t\t\tString trimmedPattern = exclusionPatterns[i].trim();", "+\t\t\t\tif (trimmedPattern.length() == 0) continue;", "+\t\t\t\t", "+\t\t\t\tif (pattern.length() == trimmedPattern.length()) {", "+\t\t\t\t\tif (trimmedPatterns == exclusionPatterns) { // clone if necessary", "+\t\t\t\t\t\tSystem.arraycopy(exclusionPatterns, 0, trimmedPatterns = new String[patternCount], 0, index);", "+\t\t\t\t\t}", "+\t\t\t\t\ttrimmedPatterns[index] = trimmedPattern;", "+\t\t\t\t}", "+\t\t\t\tindex++;", "+\t\t\t}", "+\t\t\tif (index != patternCount) {", "+\t\t\t\tif (index == 0) {", "+\t\t\t\t\ttrimmedPatterns = null;", "+\t\t\t\t} else {", "+\t\t\t\t\tSystem.arraycopy(trimmedPatterns, 0, trimmedPatterns = new String[index], 0, index);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}\t\t", "-\t\t\texclusionPatterns,", "+\t\t\ttrimmedPatterns,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b20ae115559095941d219f66359ea57f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "cf75c8e803aa83f7449e0993bff198e255986f43", "commitAfterChange": "329490ab70e4ff43aa5d83f5e80f1830a8179236", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tprotected void seekTypesInSourcePackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "signatureAfterChange": " \tprotected void seekTypesInSourcePackage(String name, IPackageFragment pkg, boolean partialMatch, int acceptFlags, IJavaElementRequestor requestor)", "diff": ["+\t\t", "+", "+\t\t// replace with working copies to look inside", "+\t\tMap workingCopies = (Map) this.unitsToLookInside.getCurrent();", "+\t\tint workingCopiesSize;", "+\t\tif (workingCopies != null && (workingCopiesSize = workingCopies.size()) > 0) {", "+\t\t\tMap temp = new HashMap(workingCopiesSize);", "+\t\t\ttemp.putAll(workingCopies);", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tICompilationUnit unit = compilationUnits[i];", "+\t\t\t\tICompilationUnit workingCopy = (ICompilationUnit)temp.remove(unit);", "+\t\t\t\tif (workingCopy != null) {", "+\t\t\t\t\tcompilationUnits[i] = workingCopy;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// add remaining working copies that belong to this package", "+\t\t\tint index = 0;", "+\t\t\tCollection values = temp.values();", "+\t\t\tIterator iterator = values.iterator();", "+\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\tICompilationUnit workingCopy = (ICompilationUnit)iterator.next();", "+\t\t\t\tif (pkg.equals(workingCopy.getParent())) {", "+\t\t\t\t\tif (index == 0) {", "+\t\t\t\t\t\tint valuesLength = values.size();", "+\t\t\t\t\t\tindex = length;", "+\t\t\t\t\t\tlength += valuesLength;", "+\t\t\t\t\t\tSystem.arraycopy(compilationUnits, 0, compilationUnits = new ICompilationUnit[length], 0, index);", "+\t\t\t\t\t}", "+\t\t\t\t\tcompilationUnits[index++] = workingCopy;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (index > 0 && index < length) {", "+\t\t\t\tSystem.arraycopy(compilationUnits, 0, compilationUnits = new ICompilationUnit[index], 0, index);", "+\t\t\t\tlength = index;", "+\t\t\t}", "+\t\t}", "+\t\t\t", "-\t\t\t// unit to look inside", "-\t\t\tICompilationUnit unitToLookInside = null;", "-\t\t\tMap workingCopies = (Map) this.unitsToLookInside.getCurrent();", "-\t\t\tif (workingCopies != null ", "-\t\t\t\t\t&& (unitToLookInside = (ICompilationUnit)workingCopies.get(compilationUnit)) != null){", "-\t\t\t\t\tcompilationUnit = unitToLookInside;", "-\t\t\t\t}", "-\t\t\tif ((unitToLookInside != null && !potentialMemberType) || nameMatches(unitName, compilationUnit, partialMatch)) {", "+\t\t\tif (!potentialMemberType || nameMatches(unitName, compilationUnit, partialMatch)) {"]}], "num": 20328}
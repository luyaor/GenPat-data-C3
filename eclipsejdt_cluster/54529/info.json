{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0258372dbe557e1ec94befded3999d56", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40938c533821ab61d24e277b27fc7966", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java", "commitBeforeChange": "49a66f9a973247a981c10aeaef835e85ffcc455f", "commitAfterChange": "e08c40cf1dd83a4533badddfba88090397fd7a51", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic RawTypeBinding getRawType(ReferenceBinding genericType, ReferenceBinding enclosingType, AnnotationBinding [] annotations)", "signatureAfterChange": "  \tpublic RawTypeBinding getRawType(ReferenceBinding genericType, ReferenceBinding enclosingType, AnnotationBinding [] annotations)", "diff": ["+\tpublic RawTypeBinding getRawType(ReferenceBinding genericType, ReferenceBinding enclosingType, AnnotationBinding [] annotations) {", "+\t\tRawTypeBinding nakedType = null;", "+\t\tTypeBinding[] derivedTypes = getDerivedTypes(genericType);", "+\t\tfor (int i = 0, length = derivedTypes.length; i < length; i++) {", "+\t\t\tTypeBinding derivedType = derivedTypes[i];", "+\t\t\tif (derivedType == null)", "+\t\t\t\tbreak;", "+\t\t\tif (!derivedType.isRawType() || derivedType.actualType() != genericType || derivedType.enclosingType() != enclosingType)", "+\t\t\t\tcontinue;", "+\t\t\tif (Util.effectivelyEqual(derivedType.getTypeAnnotations(), annotations))", "+\t\t\t\treturn (RawTypeBinding) derivedType;", "+\t\t\tif (!derivedType.hasTypeAnnotations())", "+\t\t\t\tnakedType = (RawTypeBinding) derivedType;", "+\t\tif (nakedType == null)", "+\t\t\tnakedType = super.getRawType(genericType, enclosingType);", "+\t\t", "+\t\tif (!haveTypeAnnotations(genericType, enclosingType, null, annotations))", "+\t\t\treturn nakedType;", "+\t", "+\t\tRawTypeBinding rawType = new RawTypeBinding(genericType, enclosingType, this.environment);", "+\t\trawType.id = nakedType.id;", "+\t\trawType.setTypeAnnotations(annotations, this.isAnnotationBasedNullAnalysisEnabled);", "+\t\treturn (RawTypeBinding) cacheDerivedType(genericType, nakedType, rawType);", "-\tpublic RawTypeBinding getRawType(ReferenceBinding genericType, ReferenceBinding enclosingType, AnnotationBinding [] annotations) {", "-\t\t", "-\t\tif (!haveTypeAnnotations(genericType, enclosingType, null, annotations))", "-\t\t\treturn this.unannotatedTypeSystem.getRawType(genericType, enclosingType);", "-\t\t", "-\t\tif (genericType.hasTypeAnnotations())", "-\t\t\tthrow new IllegalStateException();", "-\t\t", "-\t\tTypeBinding[] cachedInfo = (TypeBinding[]) this.annotatedTypes.get(genericType);", "-\t\tint index = 0;", "-\t\tif (cachedInfo != null) {", "-\t\t\tfor (int max = cachedInfo.length; index < max; index++) {", "-\t\t\t\tTypeBinding cachedType = cachedInfo[index];", "-\t\t\t\tif (cachedType == null)", "-\t\t\t\t\tbreak;", "-\t\t\t\tif (cachedType.isRawType() && cachedType.enclosingType() == enclosingType && Util.effectivelyEqual(cachedType.getTypeAnnotations(), annotations))", "-\t\t\t\t\treturn (RawTypeBinding) cachedType;", "-\t\t\t}", "-\t\t} else {", "-\t\t\tthis.annotatedTypes.put(genericType, cachedInfo = new TypeBinding[4]);", "-\t\t}", "-\t\t", "-\t\tint length = cachedInfo.length;", "-\t\tif (index == length) {", "-\t\t\tSystem.arraycopy(cachedInfo, 0, cachedInfo = new TypeBinding[length * 2], 0, length);", "-\t\t\tthis.annotatedTypes.put(genericType, cachedInfo);", "-\t\t}", "-\t\t// Add the new comer, retaining the same type binding id as the naked type.", "-\t\tRawTypeBinding unannotatedRawType = this.unannotatedTypeSystem.getRawType(genericType, enclosingType);", "-\t\tTypeBinding rawType = new RawTypeBinding(genericType, enclosingType, this.environment);", "-\t\trawType.id = unannotatedRawType.id;", "-\t\trawType.setTypeAnnotations(annotations, this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled);", "-\t\treturn (RawTypeBinding) (cachedInfo[index] = rawType);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e165300f43d7cdd4a9615425f71dcced", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java", "commitBeforeChange": "49a66f9a973247a981c10aeaef835e85ffcc455f", "commitAfterChange": "e08c40cf1dd83a4533badddfba88090397fd7a51", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic ParameterizedTypeBinding getParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType, AnnotationBinding [] annotations)", "signatureAfterChange": " \t \tpublic ParameterizedTypeBinding getParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType, AnnotationBinding [] annotations)", "diff": ["+\t", "+\tpublic ParameterizedTypeBinding getParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType, AnnotationBinding [] annotations) {", "+\t\t", "+\t\tif (genericType.hasTypeAnnotations())   // @NonNull (List<String>) and not (@NonNull List)<String>", "+\t\t\tthrow new IllegalStateException();", "+", "+\t\tParameterizedTypeBinding nakedType = null;", "+\t\tTypeBinding[] derivedTypes = getDerivedTypes(genericType);", "+\t\tfor (int i = 0, length = derivedTypes.length; i < length; i++) {", "+\t\t\tTypeBinding derivedType = derivedTypes[i];", "+\t\t\tif (derivedType == null)", "+\t\t\t\tbreak;", "+\t\t\tif (!derivedType.isParameterizedType() || derivedType.actualType() != genericType)", "+\t\t\t\tcontinue;", "+\t\t\tif (derivedType.enclosingType() != enclosingType || !Util.effectivelyEqual(derivedType.typeArguments(), typeArguments))", "+\t\t\t\tcontinue;", "+\t\t\tif (Util.effectivelyEqual(annotations, derivedType.getTypeAnnotations()))", "+\t\t\t\treturn (ParameterizedTypeBinding) derivedType;", "+\t\t\tif (!derivedType.hasTypeAnnotations())", "+\t\t\t\tnakedType = (ParameterizedTypeBinding) derivedType;", "+\t\t}", "+\t\tif (nakedType == null)", "+\t\t\tnakedType = super.getParameterizedType(genericType, typeArguments, enclosingType);", "+\t\t", "+\t\tif (!haveTypeAnnotations(genericType, enclosingType, typeArguments, annotations))", "+\t\t\treturn nakedType;", "+\t\t", "+\t\tTypeBinding parameterizedType = new ParameterizedTypeBinding(genericType, typeArguments, enclosingType, this.environment);", "+\t\tparameterizedType.id = nakedType.id;", "+\t\tparameterizedType.setTypeAnnotations(annotations, this.isAnnotationBasedNullAnalysisEnabled);", "+\t\treturn (ParameterizedTypeBinding) cacheDerivedType(genericType, nakedType, parameterizedType);", "-\tpublic ParameterizedTypeBinding getParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType, AnnotationBinding [] annotations) {", "-\t\t", "-\t\tif (!haveTypeAnnotations(genericType, enclosingType, typeArguments, annotations))", "-\t\t\treturn this.unannotatedTypeSystem.getParameterizedType(genericType, typeArguments, enclosingType);", "-\t\tint index = 0;", "-\t\tTypeBinding[] cachedInfo = (TypeBinding[]) this.annotatedTypes.get(genericType);", "-\t\tif (cachedInfo != null) {", "-\t\t\tfor (int max = cachedInfo.length; index < max; index++){", "-\t\t\t\tTypeBinding cachedType = cachedInfo[index];", "-\t\t\t\tif (cachedType == null) ", "-\t\t\t\t\tbreak;", "-\t\t\t\tif (!cachedType.isParameterizedType())", "-\t\t\t\t\tcontinue;", "-\t\t\t\tif (cachedType.enclosingType() == enclosingType && Util.effectivelyEqual(annotations, cachedType.getTypeAnnotations()) && Util.effectivelyEqual(cachedType.typeArguments(), typeArguments))", "-\t\t\t\t\treturn (ParameterizedTypeBinding) cachedType;", "-\t\t\t}", "-\t\t} else {", "-\t\t\tthis.annotatedTypes.put(genericType, cachedInfo = new TypeBinding[4]);", "-\t\tint length = cachedInfo.length;", "-\t\tif (index == length) {", "-\t\t\tSystem.arraycopy(cachedInfo, 0, cachedInfo = new TypeBinding[length * 2], 0, length);", "-\t\t\tthis.annotatedTypes.put(genericType, cachedInfo);", "-\t\t}", "-\t\t// Add the new comer, retaining the same type binding id as the naked type.", "-\t\tParameterizedTypeBinding unannotatedParameterizedType = this.unannotatedTypeSystem.getParameterizedType(genericType, typeArguments, enclosingType);", "-\t\tTypeBinding parameterizedType = new ParameterizedTypeBinding(genericType, typeArguments, enclosingType, this.environment);", "-\t\tparameterizedType.id = unannotatedParameterizedType.id;", "-\t\tparameterizedType.setTypeAnnotations(annotations, this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled);", "-\t\treturn (ParameterizedTypeBinding) (cachedInfo[index] = parameterizedType);"]}], "num": 54529}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc5ba8a5d2b29e0727dc6c7f5359f5fd", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cc033a3831fde16403f7deb97a97f29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "aec729ad3adcaa5e52d24a53651dd8b9e99d3639", "commitAfterChange": "44335de1fa884744b7a885d0019e36f5505aad65", "methodNumberBeforeChange": 288, "methodNumberAfterChange": 288, "signatureBeforeChange": " public void _test440643()", "signatureAfterChange": " public void test440643()", "diff": ["-public void _test440643() {", "+public void test440643() {", "+\tMap options = getCompilerOptions();", "+\toptions.put(CompilerOptions.OPTION_ReportUnusedPrivateMember, CompilerOptions.ERROR);", "+", "-\t\t\"\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"\tprivate final Accumalator<E> function;\\n\" + ", "+\t\t\"\t                             ^^^^^^^^\\n\" + ", "+\t\t\"The value of the field Binding<E>.function is not used\\n\" + ", "+\t\t\"----------\\n\",", "+\t\tnull,", "+\t\tfalse,", "+\t\toptions);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "342728266be21e84061a97b5411787af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "bac0771911f11962784cf0ef9252c1e7875dc1e4", "commitAfterChange": "277b33164a7aa6b44e8af80cbf75c89be37ef9e5", "methodNumberBeforeChange": 178, "methodNumberAfterChange": 178, "signatureBeforeChange": " public void test172()", "signatureAfterChange": " public void test172()", "diff": ["-\tcustomOptions.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.WARNING);", "+\tcustomOptions.put(CompilerOptions.OPTION_ReportUnusedPrivateMember, CompilerOptions.WARNING);", "-\t\t\"\",", "+\t\t\"----------\\n\" +", "+\t\t\"1. WARNING in X.java (at line 8)\\n\" +", "+\t\t\"\tprivate enum Complaint {       WARNING, ERROR, FATAL_ERROR, PANIC;\\n\" +", "+\t\t\"\t             ^^^^^^^^^\\n\" +", "+\t\t\"The type X.Complaint is never used locally\\n\" +", "+\t\t\"----------\\n\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cda1e256d2b3a7c32106c62df14ea67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java", "commitBeforeChange": "a235e8cbec5828165044f75fc9dd370cf197f244", "commitAfterChange": "fa76c3ec72ce5ca3743ba534e916cc81952bcc4a", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "\r \tpublic void _test031() throws Exception", "signatureAfterChange": "\r \tpublic void test031() throws Exception", "diff": ["-\tpublic void _test031() throws Exception {\r", "+\tpublic void test031() throws Exception {\r", "+\t\t\t\t/* TODO(Srikanth/Jay) when JSR308 enabled runtime becomes available for testing, the first error message should be deleted. */\r", "+\t\t\t\t\"----------\\n\" + \r", "+\t\t\t\t\"1. ERROR in Marker.java (at line 3)\\n\" + \r", "+\t\t\t\t\"\t@Target(TYPE_USE)\\n\" + \r", "+\t\t\t\t\"\t        ^^^^^^^^\\n\" + \r", "+\t\t\t\t\"TYPE_USE cannot be resolved to a variable\\n\" + \r", "+\t\t\t\t\"----------\\n\" + \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c42abb7e255447a82e743c64652c8c6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " \tpublic void _test100()", "signatureAfterChange": " \tpublic void test100()", "diff": ["-\tpublic void _test100() {", "+\tpublic void test100() {", "-\t\t\t\t\"\t\tString getMessage() {\\n\" + ", "+\t\t\t\t\"\t\t@Override String getMessage() {\\n\" + ", "-\t\t\t\"should reject as invalid ref to non-constant\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tprivate final X thisOne = anEnumValue;\\n\" + ", "+\t\t\t\"\t                          ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot refer to the static enum field X.anEnumValue within an initializer\\n\" + ", "+\t\t\t\"----------\\n\");"]}], "num": 25225}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45989804fc834f1813566e31acfab0a6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38b849be7eae5ed673c736fe56415cb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void test032() throws Exception", "signatureAfterChange": " \t \tpublic void test032_field() throws Exception", "diff": ["+\t", "+\tpublic void test032_field() throws Exception {", "+\t\t\t\t\"import java.lang.annotation.*;\\n\" + ", "+\t\t\t\t\"@Target(ElementType.TYPE_USE)\\n\" + ", "+\t\t\t\t\"@Retention(RetentionPolicy.RUNTIME)\\n\" + ", "+\t\t\t\t\"@interface A {}\\n\",", "+\t\t\t\t", "+\t\t\t\t\"\t@A int field;\\n\" +", "+\t\t// javac-b81: Bytes:8[0 1 19 0 0 7 0 0]  19 = 0x13 (FIELD)", "+\t\t\t\"      #8 @A(\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "-\t// type argument method call and generic or array", "-\tpublic void test032() throws Exception {", "-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"\tstatic <T, U> T foo(T t, U u) {\\n\" +", "-\t\t\t\t\"\t\treturn t;\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"\tpublic static void bar() {\\n\" +", "-\t\t\t\t\"\t\tSystem.out.println(X.<@A String[] @B(1) [], @C('-') X>foo(new String[][]{{\\\"SUCCESS\\\"}}, null)[0]);\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\\n\",", "-\t\t\t\t\"A.java\",", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "-\t\t\t\t\"@interface A {\\n\" + ", "-\t\t\t\t\"\tString value() default \\\"default\\\";\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\t\"B.java\",", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(CLASS)\\n\" + ", "-\t\t\t\t\"@interface B {\\n\" + ", "-\t\t\t\t\"\tint value() default -1;\\n\" + ", "-\t\t\t\t\"}\",", "-\t\t\t\t\"C.java\",", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "-\t\t\t\t\"@interface C {\\n\" + ", "-\t\t\t\t\"\tchar value() default '-';\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t},", "-\t\t\"\");", "-\t\tString expectedOutput =", "-\t\t\t\"    RuntimeVisibleTypeAnnotations: \\n\" + ", "-\t\t\t\"      #52 @A(\\n\" + ", "-\t\t\t\"        target type = 0x1b TYPE_ARGUMENT_METHOD_CALL_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        offset = 20\\n\" + ", "-\t\t\t\"        type argument index = 0\\n\" + ", "-\t\t\t\"        locations = {1}\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"      #53 @C(\\n\" + ", "-\t\t\t\"        #49 value=\\'-\\' (constant type)\\n\" + ", "-\t\t\t\"        target type = 0x1a TYPE_ARGUMENT_METHOD_CALL\\n\" + ", "-\t\t\t\"        offset = 20\\n\" + ", "-\t\t\t\"        type argument index = 1\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"    RuntimeInvisibleTypeAnnotations: \\n\" + ", "-\t\t\t\"      #48 @B(\\n\" + ", "-\t\t\t\"        #49 value=(int) 1 (constant type)\\n\" + ", "-\t\t\t\"        target type = 0x1b TYPE_ARGUMENT_METHOD_CALL_GENERIC_OR_ARRAY\\n\" + ", "-\t\t\t\"        offset = 20\\n\" + ", "-\t\t\t\"        type argument index = 0\\n\" + ", "-\t\t\t\"        locations = {0}\\n\" + ", "-\t\t\t\"      )\\n\";", "-\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8b48aaf26e190149506a81dcb8678a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "f427d3141850bb05b4f61e7a5e8cfb86bf8a4b90", "commitAfterChange": "bdac2d6f93f2862f6a2ad385b856d2f81a163437", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 143, "signatureBeforeChange": " public void test123_unusual_classpath()", "signatureAfterChange": " public void test122_classpath()", "diff": ["+public void test122_classpath(){", "+\trunClasspathTest(", "+\t\tOUTPUT_DIR + \"[+**/OK2]\" + File.pathSeparator + File.pathSeparator + ", "+\t\t\t\tFile.pathSeparator, ", "+\t\t\tOUTPUT_DIR,\t\"{pattern=**/OK2 (ACCESSIBLE)}\", null,", "+\t\tnull);", "-// command line - unusual classpath (rules with multiple path separators KO)", "-public void test123_unusual_classpath(){", "-\tthis.runNegativeTest(", "-\t\tnew String[] {", "-\t\t\t\"X.java\",", "-\t\t\t\"/** */\\n\" + ", "-\t\t\t\"public class X extends Zork {\\n\" + ", "-\t\t\t\"}\",", "-\t\t},", "-        \"\\\"\" + OUTPUT_DIR +  File.separator + \"X.java\\\"\"", "-        + \" -1.5 -g -preserveAllLocals\"", "-        + \" -cp \\\"\" + OUTPUT_DIR + \"[+OK2\" + ", "-        \tFile.pathSeparator + File.pathSeparator + File.pathSeparator + ", "-        \t\"~Warn\" + File.pathSeparator + \"-KO]\\\"\"", "-        + \" -warn:+deprecation,syntheticAccess,uselessTypeCheck,unsafe,finalBound,unusedLocal\" ", "-        + \" -proceedOnError -referenceInfo\"", "-        + \" -d \\\"\" + OUTPUT_DIR + \"\\\"\", ", "-        \"\", ", "-        \"incorrect classpath: ---OUTPUT_DIR_PLACEHOLDER---[+OK2\" + ", "-        \tFile.pathSeparator + File.pathSeparator + File.pathSeparator + ", "-        \t\"~Warn\" + File.pathSeparator + \"-KO]\\n\" + ", "-        \"----------\\n\" + ", "-        \"1. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 2)\\n\" + ", "-        \"\tpublic class X extends Zork {\\n\" + ", "-        \"\t                       ^^^^\\n\" + ", "-        \"Zork cannot be resolved to a type\\n\" + ", "-        \"----------\\n\" + ", "-        \"1 problem (1 error)\",", "-        true);"]}], "num": 41511}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d980f10fdf446014f9dce33edc199baa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70f63d6b0e337adde8598e7692459abc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "38faf3efd9d7a9e66ede29f2210a34a5031698a0", "commitAfterChange": "102c35a2a8562c276abba3a19ac61f3d18639af8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate IClassFile getClassFile(char[] fileName)", "signatureAfterChange": " \tprivate IClassFile getClassFile(char[] fileName)", "diff": ["+\t\tint jarSeparator = CharOperation.indexOf(IDependent.JAR_FILE_ENTRY_SEPARATOR, fileName);", "-\t\tif (lastSlash == -1)", "-\t\t\treturn null;", "-\t\tIPackageFragment pkg = getPackageFragment(fileName, lastSlash);", "+\t\tif (lastSlash <= jarSeparator) // if jarSeparator == -1 and there is no slash, lastSlash should be 0", "+\t\t\tlastSlash = jarSeparator+1;", "+\t\tIPackageFragment pkg = getPackageFragment(fileName, lastSlash, jarSeparator);", "-\t\tint start;", "-\t\treturn pkg.getClassFile(new String(fileName, start = lastSlash+1, fileName.length - start));", "+\t\tint start = lastSlash == jarSeparator+1 ? lastSlash : lastSlash+1;", "+\t\treturn pkg.getClassFile(new String(fileName, start, fileName.length - start));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f87a904df14ad3fd22a94d7ad0cd7e49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/UtilTest.java", "commitBeforeChange": "f36ebac14b6360e91c5bc3b93d7ff2d40cac302f", "commitAfterChange": "6f557af67021dd788e48008902cb803e38b791b9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public boolean checkPathMatch(char[] pattern, char[] path, boolean isCaseSensitive)", "signatureAfterChange": " public boolean checkPathMatch(char[] pattern, char[] path, boolean isCaseSensitive)", "diff": ["+\tCharOperation.replace(pattern, '/', File.separatorChar);", "+\tCharOperation.replace(pattern, '\\\\', File.separatorChar);", "+\tCharOperation.replace(path, '/', File.separatorChar);", "+\tCharOperation.replace(path, '\\\\', File.separatorChar);", "+\t", "-\tboolean result = CharOperation.pathMatch(pattern, path, isCaseSensitive, '/');", "-\tif (antResult != result) {", "-\t\tnew AssertionFailedError(\"WARNING : Ant expectation for patchMatch(\\\"\"+new String(pattern)+\"\\\", \\\"\"+new String(path)+\"\\\", ...) is: \"+antResult).printStackTrace();", "-\t}", "+\tboolean result = CharOperation.pathMatch(pattern, path, isCaseSensitive, File.separatorChar);", "+//\tif (antResult != result) {", "+//\t\tnew AssertionFailedError(\"WARNING : Ant expectation for patchMatch(\\\"\"+new String(pattern)+\"\\\", \\\"\"+new String(path)+\"\\\", ...) is: \"+antResult).printStackTrace();", "+//\t}"]}], "num": 50617}
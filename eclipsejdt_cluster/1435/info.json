{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5865e95c334d41d6c51f3f7b97c2d48", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caeb18b43a3cac481148d899046cd154", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "3b50c86701dfe34f072b1b78f29f811d96dd75c2", "commitAfterChange": "ff17444fcc31fe021d6a45c4b051acce1b3894e3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  protected Compiler newCompiler()", "signatureAfterChange": "  protected Compiler newCompiler()", "diff": ["+\t// disable entire javadoc support if not interested in diagnostics", "+\tMap projectOptions = javaBuilder.javaProject.getOptions(true);", "+\tif (projectOptions.get(JavaCore.COMPILER_PB_INVALID_JAVADOC).equals(JavaCore.IGNORE) &&", "+\t\tprojectOptions.get(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS).equals(JavaCore.IGNORE) &&", "+\t\tprojectOptions.get(JavaCore.COMPILER_PB_MISSING_JAVADOC_COMMENTS).equals(JavaCore.IGNORE))", "+\t{", "+\t\tprojectOptions.put(JavaCore.COMPILER_DOC_COMMENT_SUPPORT, JavaCore.DISABLED);", "+\t}", "+\t", "-\t\tjavaBuilder.javaProject.getOptions(true),", "+\t\tprojectOptions,", "-\t// enable the compiler reference info support", "-\tnewCompiler.options.produceReferenceInfo = true;", "+\tCompilerOptions options = newCompiler.options;", "+\t// enable the compiler reference info support", "+\toptions.produceReferenceInfo = true;", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e50b5a7084135cf51b575bd400955b0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "b60a608dbabf8b5f04fae21c808d5a97597a41f6", "commitAfterChange": "0812715fc31639c278d6b4cb2dea448517c247bf", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public int computeSeverity(int problemId)", "signatureAfterChange": " public int computeSeverity(int problemId)", "diff": ["-\t\tcase IProblem.JavadocUsingDeprecatedField:", "-\t\tcase IProblem.JavadocUsingDeprecatedConstructor:", "-\t\tcase IProblem.JavadocUsingDeprecatedMethod:", "-\t\tcase IProblem.JavadocUsingDeprecatedType:", "-\t\tcase IProblem.JavadocNotVisibleField:", "-\t\tcase IProblem.JavadocNotVisibleConstructor:", "-\t\tcase IProblem.JavadocNotVisibleMethod:", "-\t\tcase IProblem.JavadocNotVisibleType:", "-\t\t\t} else {", "-\t\t\t\treturn ProblemSeverities.Ignore;", "+\t\t\treturn ProblemSeverities.Ignore;", "+", "+\t\t/*", "+\t\t * Javadoc invalid tags due to deprecated references", "+\t\t */", "+\t\tcase IProblem.JavadocUsingDeprecatedField:", "+\t\tcase IProblem.JavadocUsingDeprecatedConstructor:", "+\t\tcase IProblem.JavadocUsingDeprecatedMethod:", "+\t\tcase IProblem.JavadocUsingDeprecatedType:", "+\t\t\tif (this.options.docCommentSupport && this.options.reportInvalidJavadocTags && this.options.reportInvalidJavadocTagsDeprecatedRef) {", "+\t\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidJavadoc);", "+\t\t\t}", "+\t\t\treturn ProblemSeverities.Ignore;", "+", "+\t\t/*", "+\t\t * Javadoc invalid tags due to non-visible references", "+\t\t */", "+\t\tcase IProblem.JavadocNotVisibleField:", "+\t\tcase IProblem.JavadocNotVisibleConstructor:", "+\t\tcase IProblem.JavadocNotVisibleMethod:", "+\t\tcase IProblem.JavadocNotVisibleType:", "+\t\t\tif (this.options.docCommentSupport && this.options.reportInvalidJavadocTags && this.options.reportInvalidJavadocTagsNotVisibleRef) {", "+\t\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidJavadoc);", "+\t\t\t}", "+\t\t\treturn ProblemSeverities.Ignore;"]}], "num": 1435}
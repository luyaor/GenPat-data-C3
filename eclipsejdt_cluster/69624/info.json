{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad26720a109671b2f1010fc265b6b60a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3355069b0e67d1b616bb313fab63a388", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "b3906111a4433325958de7604465d8f0e49325d2", "commitAfterChange": "0b27309efdaba54bffa19e81e0f1e5ae6f176884", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  public void checkTypeArgumentRedundancy(ParameterizedTypeBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTypes, final BlockScope scope)", "signatureAfterChange": "  public void checkTypeArgumentRedundancy(ParameterizedTypeBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTypes, final BlockScope scope)", "diff": ["-\tProblemReporter reporter = scope.problemReporter();", "-\tif ((reporter.computeSeverity(IProblem.RedundantSpecificationOfTypeArguments) == ProblemSeverities.Ignore) || scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_7) return;", "+\tif ((scope.problemReporter().computeSeverity(IProblem.RedundantSpecificationOfTypeArguments) == ProblemSeverities.Ignore) || scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_7) return;", "-\t\t\t\treporter.redundantSpecificationOfTypeArguments(this.type, allocationType.arguments);", "+\t\t\t\tscope.problemReporter().redundantSpecificationOfTypeArguments(this.type, allocationType.arguments);", "-\t\tinferredTypes = inferElidedTypes(allocationType.genericType(), enclosingType, argumentTypes, scope);", "+\t\tinferredTypes = inferElidedTypes(allocationType, enclosingType, argumentTypes, scope);", "-\treporter.redundantSpecificationOfTypeArguments(this.type, allocationType.arguments);", "+\tscope.problemReporter().redundantSpecificationOfTypeArguments(this.type, allocationType.arguments);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaa4e1431748ea2601c170675ab453c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/BatchDispatchTests.java", "commitBeforeChange": "1d4b08a8f9928b8cb41c807f138e108b1a0b90da", "commitAfterChange": "9b273f1da9b2de9c2343ae145581432c1143c1d0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void testCheckOptions()", "signatureAfterChange": " \tpublic void testCheckOptions()", "diff": ["-\t\tassertNotNull(\"No compiler found\", _eclipseCompiler);", "-\t\t\tassertEquals(option + \" requires 1 argument\", 1, _eclipseCompiler.isSupportedOption(option));", "+\t\t\tassertEquals(option + \" requires 1 argument\", 1, BatchTestUtils.getEclipseCompiler().isSupportedOption(option));", "-\t\t\tassertEquals(option + \" requires no argument\", 0, _eclipseCompiler.isSupportedOption(option));", "+\t\t\tassertEquals(option + \" requires no argument\", 0, BatchTestUtils.getEclipseCompiler().isSupportedOption(option));"]}], "num": 69624}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c917c75d9a869d018f9452b8a672bd31", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15a8b0fd8990660ffc518b891f3e86b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "790aac30bd6ce816d617cb5a88f2ad25d5ac804c", "commitAfterChange": "2de52c15a156e7b5856add0dc9ffb53a5657312f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void generateOptimizedLogicalAnd( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedLogicalAnd( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "diff": ["-\t\tint pc = codeStream.position;", "+\t\t\t\t\t// reposition the endPC", "+\t\t\t\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);\t\t\t\t\t", "-\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t\t\t\t// reposition the endPC", "+\t\t\t\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);\t\t\t\t\t", "-\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t// reposition the endPC", "+\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5cc7604212a3246f790f87d689ac54f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "790aac30bd6ce816d617cb5a88f2ad25d5ac804c", "commitAfterChange": "2de52c15a156e7b5856add0dc9ffb53a5657312f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void generateOptimizedLogicalOr( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedLogicalOr( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "diff": ["-\t\tint pc = codeStream.position;", "+\t\t\t\t\t// reposition the endPC", "+\t\t\t\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);\t\t\t\t\t", "-\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t\t\t\t// reposition the endPC", "+\t\t\t\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);\t\t\t\t\t", "-\t\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\t// reposition the endPC", "+\t\tcodeStream.updateLastRecordedEndPC(codeStream.position);\t\t\t\t\t"]}], "num": 53320}
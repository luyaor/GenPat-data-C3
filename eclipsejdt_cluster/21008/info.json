{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d42085349b6c046dde2bc7198f589a89", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "675c2e79e06b9b86bd9c983804701982", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "8a64589617f7b80b7f12bb3f773ab58c605663c7", "commitAfterChange": "6585c7471e2cc73387fb0d652a600f2678de9051", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 22, "signatureBeforeChange": "\t \t \tprivate void mapPositions(int startOrigin, int startFormatted, int length)", "signatureAfterChange": " \tpublic void initializeScanner(char[] compilationUnitSource)", "diff": ["-\t", "-\tprivate void mapPositions(int startOrigin, int startFormatted, int length) {", "-\t\t// positionsToMap is not null", "-\t\tfor (; this.positionsIndex < this.positionsToMap.length; this.positionsIndex++) {", "-\t\t\tif (this.positionsToMap[this.positionsIndex] < startOrigin) {", "-\t\t\t\tthis.mappedPositions[this.positionsIndex] = startFormatted;", "-\t\t\t} else if (this.positionsToMap[this.positionsIndex] < startOrigin + length) {", "-\t\t\t\tthis.mappedPositions[this.positionsIndex] = this.positionsToMap[this.positionsIndex] - startOrigin + startFormatted;", "-\t\t\t} else {", "-\t\t\t\treturn;", "-\t\t\t}", "+\t */", "+\tpublic void initializeScanner(char[] compilationUnitSource) {", "+\t\tthis.scanner.setSource(compilationUnitSource);", "+\t\tthis.scannerEndPosition = compilationUnitSource.length;", "+\t\tthis.scanner.resetTo(0, this.scannerEndPosition);", "+\t\tif (this.textRegionEnd == -1) {", "+\t\t\tthis.textRegionEnd = this.scannerEndPosition;", "-\t}", "+\t\tthis.edits = new OptimizedReplaceEdit[INITIAL_SIZE];", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7790031f23ce123fbf48f5f21433f86d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "0307cad3f1b01ed5d7ce67bc78cd9b706e4819f3", "commitAfterChange": "7a57dee588cd632418aaf1f630bac2c2a5d6439a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic ASTNode createAST(IProgressMonitor monitor)", "signatureAfterChange": " \tpublic ASTNode createAST(IProgressMonitor monitor)", "diff": ["-\t   if ((this.rawSource == null)", "-\t   \t  && (this.compilationUnitSource == null)", "-\t   \t  && (this.classFileSource == null)) {", "-\t   \t  throw new IllegalStateException(\"source not specified\"); //$NON-NLS-1$", "-\t   }", "-\t   ASTNode result;", "-\t   if (this.API_LEVEL == AST.LEVEL_2_0) {", "-\t   \t\tresult = temporaryCreateASTDispatch(monitor);", "-\t   } else {", "-\t   \t\tthrow new RuntimeException(\"J2SE 1.5 parser not implemented yet\"); //$NON-NLS-1$", "-\t   }", "-   \t   // if successful, re-init defaults to allow reuse (and avoid leaking)", "-   \t   initializeDefaults();", "+\t   ASTNode result = null;", "+\t\ttry {", "+\t\t\tif ((this.rawSource == null)", "+\t\t   \t  && (this.compilationUnitSource == null)", "+\t\t   \t  && (this.classFileSource == null)) {", "+\t\t   \t  throw new IllegalStateException(\"source not specified\"); //$NON-NLS-1$", "+\t\t   }", "+\t   \t\tresult = internalCreateAST(monitor);", "+\t\t} finally {", "+\t   \t   // re-init defaults to allow reuse (and avoid leaking)", "+\t   \t   initializeDefaults();", "+\t\t}"]}], "num": 21008}
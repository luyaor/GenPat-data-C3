{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "148250e0061f75a3de917b289cf04fa4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1451467d66ac9e953d37bad9e0781594", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "71df68ac6bbd7c5b4b673539241b9c1cc905574c", "commitAfterChange": "04c08732703d5f5e97b66e89468d2f87b7f84cff", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 113, "signatureBeforeChange": " \tpublic void resetSecondaryTypesCache(String path)", "signatureAfterChange": " \tpublic void secondaryTypeAdding(String path, char[] key)", "diff": ["-\t */", "-\tpublic void resetSecondaryTypesCache(String path) {", "-\t\tif (VERBOSE) {", "-\t\t\tStringBuffer buffer = new StringBuffer(\"JavaModelManager.resetSecondaryTypePaths(\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(path);", "-\t\t\tbuffer.append(')');", "-\t\t\tUtil.verbose(buffer.toString());", "-\t\t}", "-\t\tIWorkspaceRoot wRoot = ResourcesPlugin.getWorkspace().getRoot();", "-\t\tIResource resource = wRoot.findMember(path);", "-\t\tif (resource != null) {", "-\t\t\tPerProjectInfo projectInfo = getPerProjectInfo(resource.getProject(), false);", "-\t\t\tif (projectInfo != null) {", "-\t\t\t\tif (VERBOSE) {", "-\t\t\t\t\tUtil.verbose(\"-> reset cache for project: \"+resource.getProject().getName()); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tif (projectInfo.secondaryTypes != null) {", "-\t\t\t\t\tObject dirty = projectInfo.secondaryTypes.get(DIRTY_CACHE);", "-\t\t\t\t\tif (dirty == null) {", "-\t\t\t\t\t\tprojectInfo.secondaryTypes.put(DIRTY_CACHE, resource);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tHashSet resources = (dirty instanceof HashSet) ? (HashSet) dirty : new HashSet(3);", "-\t\t\t\t\t\tresources.add(resource);", "-\t\t\t\t\t\tprojectInfo.secondaryTypes.put(DIRTY_CACHE, resource);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "+\t */", "+\tpublic void secondaryTypeAdding(String path, char[] key) {", "+\t\tif (VERBOSE) {", "+\t\t\tStringBuffer buffer = new StringBuffer(\"JavaModelManager.addSecondaryType(\"); //$NON-NLS-1$", "+\t\t\tbuffer.append(path);", "+\t\t\tbuffer.append(',');", "+\t\t\tbuffer.append('[');", "+\t\t\tbuffer.append(new String(key));", "+\t\t\tbuffer.append(']');", "+\t\t\tbuffer.append(')');", "+\t\t\tUtil.verbose(buffer.toString());", "+\t\t}", "+\t\tIWorkspaceRoot wRoot = ResourcesPlugin.getWorkspace().getRoot();", "+\t\tIResource resource = wRoot.findMember(path);", "+\t\tif (resource != null) {", "+\t\t\tif (org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(path) && resource.getType() == IResource.FILE) {", "+\t\t\t\tIProject project = resource.getProject();", "+\t\t\t\ttry {", "+\t\t\t\t\tPerProjectInfo projectInfo = getPerProjectInfoCheckExistence(project);", "+\t\t\t\t\t// Get or create map to cache secondary types while indexing (can be not synchronized as indexing insure a non-concurrent usage)", "+\t\t\t\t\tHashMap indexedSecondaryTypes = null;", "+\t\t\t\t\tif (projectInfo.secondaryTypes == null) {", "+\t\t\t\t\t\tprojectInfo.secondaryTypes = new Hashtable(3);", "+\t\t\t\t\t\tindexedSecondaryTypes = new HashMap(3);", "+\t\t\t\t\t\tprojectInfo.secondaryTypes.put(INDEXED_SECONDARY_TYPES, indexedSecondaryTypes);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tindexedSecondaryTypes = (HashMap) projectInfo.secondaryTypes.get(INDEXED_SECONDARY_TYPES);", "+\t\t\t\t\t\tif (indexedSecondaryTypes == null) {", "+\t\t\t\t\t\t\tindexedSecondaryTypes = new HashMap(3);", "+\t\t\t\t\t\t\tprojectInfo.secondaryTypes.put(INDEXED_SECONDARY_TYPES, indexedSecondaryTypes);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t// Store the secondary type in temporary cache (these are just handles => no problem to create it now...)", "+\t\t\t\t\tHashMap allTypes = (HashMap) indexedSecondaryTypes.get(resource);", "+\t\t\t\t\tif (allTypes == null) {", "+\t\t\t\t\t\tallTypes = new HashMap(3);", "+\t\t\t\t\t\tindexedSecondaryTypes.put(resource, allTypes);", "+\t\t\t\t\t}", "+\t\t\t\t\tICompilationUnit unit = JavaModelManager.createCompilationUnitFrom((IFile)resource, null);", "+\t\t\t\t\tif (unit != null) {", "+\t\t\t\t\t\tchar[][] names = CharOperation.splitOn('/', key);", "+\t\t\t\t\t\tString typeName = new String(names[0]);", "+\t\t\t\t\t\tString packName = new String(names[1]);", "+\t\t\t\t\t\tHashMap packageTypes = (HashMap) allTypes.get(packName);", "+\t\t\t\t\t\tif (packageTypes == null) {", "+\t\t\t\t\t\t\tpackageTypes = new HashMap(3);", "+\t\t\t\t\t\t\tallTypes.put(packName, packageTypes);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tpackageTypes.put(typeName, unit.getType(typeName));", "+\t\t\t\t\t}", "+\t\t\t\t\tif (VERBOSE) {", "+\t\t\t\t\t\tUtil.verbose(\"\t- indexing cache:\"); //$NON-NLS-1$", "+\t\t\t\t\t\tIterator keys = indexedSecondaryTypes.keySet().iterator();", "+\t\t\t\t\t\twhile (keys.hasNext()) {", "+\t\t\t\t\t\t\tIFile file = (IFile) keys.next();", "+\t\t\t\t\t\t\tUtil.verbose(\"\t\t+ \"+file.getFullPath()+':'+indexedSecondaryTypes.get(file) ); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tcatch (JavaModelException jme) {", "+\t\t\t\t\t// do nothing", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58c5d99f7103032cd3a6f65b6caf80cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/HierarchyScope.java", "commitBeforeChange": "7fb86fb96d585ee8957fc13764a67f220efdab28", "commitAfterChange": "ac9209adc3bf5bee5093a73bfc9f86fe5825e76d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprotected boolean encloses(IResource element)", "signatureAfterChange": " \tprivate IPath[] computeProjectsAndJars(IType type) throws JavaModelException", "diff": ["+\t * This is a super set of the project and jar paths once the hierarchy is computed.\r\t */", "+\tprivate IPath[] computeProjectsAndJars(IType type) throws JavaModelException {", "+\t\tHashSet set = new HashSet();", "+\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)type.getPackageFragment().getParent();", "+\t\tif (root.isArchive()) {", "+\t\t\t// add the root", "+\t\t\tset.add(root.getPath());", "+\t\t\t// add all projects that reference this archive and their dependents", "+\t\t\tIPath rootPath = root.getPath();", "+\t\t\tIJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "+\t\t\tIJavaProject[] projects = model.getJavaProjects();", "+\t\t\tHashSet visited = new HashSet();", "+\t\t\tfor (int i = 0; i < projects.length; i++) {", "+\t\t\t\tIJavaProject project = projects[i];", "+\t\t\t\tIClasspathEntry[] classpath = project.getResolvedClasspath(true);", "+\t\t\t\tfor (int j = 0; j < classpath.length; j++) {", "+\t\t\t\t\tif (rootPath.equals(classpath[j].getPath())) {", "+\t\t\t\t\t\t// add the project and its jar pkg fragment roots", "+\t\t\t\t\t\tIPackageFragmentRoot[] roots = project.getPackageFragmentRoots();", "+\t\t\t\t\t\tset.add(project.getPath());", "+\t\t\t\t\t\tfor (int k = 0; k < roots.length; k++) {", "+\t\t\t\t\t\t\tIPackageFragmentRoot pkgFragmentRoot = roots[k];", "+\t\t\t\t\t\t\tif (pkgFragmentRoot.isArchive()) {", "+\t\t\t\t\t\t\t\tset.add(pkgFragmentRoot.getPath());", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// add the dependent projects", "+\t\t\t\t\t\tthis.computeDependents(project, set, visited);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\t// add all the project's pkg fragment roots", "+\t\t\tIJavaProject project = (IJavaProject)root.getParent();", "+\t\t\tIPackageFragmentRoot[] roots = project.getAllPackageFragmentRoots();", "+\t\t\tfor (int i = 0; i < roots.length; i++) {", "+\t\t\t\tIPackageFragmentRoot pkgFragmentRoot = roots[i];", "+\t\t\t\tif (pkgFragmentRoot.isArchive()) {", "+\t\t\t\t\tset.add(pkgFragmentRoot.getPath());", "+\t\t\t\t} else {", "+\t\t\t\t\tset.add(pkgFragmentRoot.getParent().getPath());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// add the dependent projects", "+\t\t\tthis.computeDependents(project, set, new HashSet());", "+\t\t}", "+\t\tIPath[] result = new IPath[set.size()];", "+\t\tset.toArray(result);", "+\t\treturn result;", "+\t}", "-\t */", "-\tprotected boolean encloses(IResource element) {", "-\t\tIPath elementPath = element.getFullPath();", "-\t\tfor (int i = 0; i < elementCount; i++) {", "-\t\t\tif (this.elements[i].getFullPath().isPrefixOf(elementPath)) {", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t}"]}], "num": 17566}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "83c7196d13ea27fe80138c3bc4bb69da", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ff19842146beacf11b6a0acf5b57a5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "signatureAfterChange": "  \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "diff": ["-\t\t\tint argumentsLength;", "-\t\t\ttype.traverse(visitor, scope);", "-\t\t\tif (arguments != null) {", "-\t\t\t\targumentsLength = arguments.length;", "-\t\t\t\tfor (int i = 0; i < argumentsLength; i++)", "-\t\t\t\t\targuments[i].traverse(visitor, scope);", "+\t\t\tif (this.typeArguments != null) {", "+\t\t\t\tfor (int i = 0, typeArgumentsLength = this.typeArguments.length; i < typeArgumentsLength; i++) {", "+\t\t\t\t\tthis.typeArguments[i].traverse(visitor, scope);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.type.traverse(visitor, scope);", "+\t\t\tif (this.arguments != null) {", "+\t\t\t\tfor (int i = 0, argumentsLength = this.arguments.length; i < argumentsLength; i++)", "+\t\t\t\t\tthis.arguments[i].traverse(visitor, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9255a54c5aa743c2055a76279745e921", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AnnotationTypeMemberDeclaration.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void traverse( \t\tASTVisitor visitor, \t\tClassScope classScope)", "signatureAfterChange": "  \tpublic void traverse( \t\tASTVisitor visitor, \t\tClassScope classScope)", "diff": ["-\t\t\tif (returnType != null)", "+\t\t\tif (returnType != null) {", "-\t\t\tif (arguments != null) {", "-\t\t\t\tint argumentLength = arguments.length;", "-\t\t\t\tfor (int i = 0; i < argumentLength; i++)", "-\t\t\t\t\targuments[i].traverse(visitor, scope);", "-\t\t\tif (thrownExceptions != null) {", "-\t\t\t\tint thrownExceptionsLength = thrownExceptions.length;", "-\t\t\t\tfor (int i = 0; i < thrownExceptionsLength; i++)", "-\t\t\t\t\tthrownExceptions[i].traverse(visitor, scope);", "-\t\t\t}", "-\t\t\tif (statements != null) {", "-\t\t\t\tint statementsLength = statements.length;", "-\t\t\t\tfor (int i = 0; i < statementsLength; i++)", "-\t\t\t\t\tstatements[i].traverse(visitor, scope);", "+\t\t\tif (memberValue != null) {", "+\t\t\t\tmemberValue.traverse(visitor, scope);"]}], "num": 44218}
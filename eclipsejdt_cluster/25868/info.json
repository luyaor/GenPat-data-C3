{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c2bd3892f8ee92d2278b94224bd6d154", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24e97cc3d8605b58639e7742bbab87ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "bed3ca2531a0bd15601237e5d1a0c8400e43f29e", "commitAfterChange": "cf4403abeadc8dee9dfef541af716a8f200a1ee1", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void completeCodeAttributeForMissingAbstractProblemMethod( \t\tMethodBinding binding, \t\tint codeAttributeOffset, \t\tint[] startLineIndexes, \t\tint problemLine)", "signatureAfterChange": " \tpublic void completeCodeAttributeForMissingAbstractProblemMethod( \t\tMethodBinding binding, \t\tint codeAttributeOffset, \t\tint[] startLineIndexes, \t\tint problemLine)", "diff": ["-\t\tif ((this.produceAttributes & ClassFileConstants.ATTR_STACK_MAP) != 0) {", "+\t\tif ((this.produceAttributes & ClassFileConstants.ATTR_STACK_MAP_TABLE) != 0) {", "+\t\t\t\t\t\tattributeNumber++;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tlocalContentsOffset = stackMapTableAttributeOffset;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+", "+\t\tif ((this.produceAttributes & ClassFileConstants.ATTR_STACK_MAP) != 0) {", "+\t\t\tStackMapFrameCodeStream stackMapFrameCodeStream = (StackMapFrameCodeStream) this.codeStream;", "+\t\t\tstackMapFrameCodeStream.removeFramePosition(code_length);", "+\t\t\tif (stackMapFrameCodeStream.hasFramePositions()) {", "+\t\t\t\tArrayList frames = new ArrayList();", "+\t\t\t\ttraverse(this.codeStream.methodDeclaration.binding, max_locals, this.contents, codeAttributeOffset + 14, code_length, frames, false);", "+\t\t\t\tint numberOfFrames = frames.size();", "+\t\t\t\tif (numberOfFrames > 1) {", "+\t\t\t\t\tint stackMapTableAttributeOffset = localContentsOffset;", "+\t\t\t\t\t// add the stack map table attribute", "+\t\t\t\t\tif (localContentsOffset + 8 >= this.contents.length) {", "+\t\t\t\t\t\tresizeContents(8);", "+\t\t\t\t\t}", "+\t\t\t\t\tint stackMapAttributeNameIndex =", "+\t\t\t\t\t\tconstantPool.literalIndex(AttributeNamesConstants.StackMapName);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (stackMapAttributeNameIndex >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) stackMapAttributeNameIndex;", "+", "+\t\t\t\t\tint stackMapAttributeLengthOffset = localContentsOffset;", "+\t\t\t\t\t// generate the attribute", "+\t\t\t\t\tlocalContentsOffset += 4;", "+\t\t\t\t\tif (localContentsOffset + 4 >= this.contents.length) {", "+\t\t\t\t\t\tresizeContents(4);", "+\t\t\t\t\t}", "+\t\t\t\t\tint numberOfFramesOffset = localContentsOffset;", "+\t\t\t\t\tlocalContentsOffset += 2;", "+\t\t\t\t\tif (localContentsOffset + 2 >= this.contents.length) {", "+\t\t\t\t\t\tresizeContents(2);", "+\t\t\t\t\t}", "+\t\t\t\t\tStackMapFrame currentFrame = (StackMapFrame) frames.get(0);", "+\t\t\t\t\tfor (int j = 1; j < numberOfFrames; j++) {", "+\t\t\t\t\t\t// select next frame", "+\t\t\t\t\t\tcurrentFrame = (StackMapFrame) frames.get(j);", "+\t\t\t\t\t\t// generate current frame", "+\t\t\t\t\t\t// need to find differences between the current frame and the previous frame", "+\t\t\t\t\t\tint frameOffset = currentFrame.pc;", "+\t\t\t\t\t\t// FULL_FRAME", "+\t\t\t\t\t\tif (localContentsOffset + 5 >= this.contents.length) {", "+\t\t\t\t\t\t\tresizeContents(5);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (frameOffset >> 8);", "+\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) frameOffset;", "+\t\t\t\t\t\tint numberOfLocalOffset = localContentsOffset;", "+\t\t\t\t\t\tlocalContentsOffset += 2; // leave two spots for number of locals", "+\t\t\t\t\t\tint numberOfLocalEntries = 0;", "+\t\t\t\t\t\tint numberOfLocals = currentFrame.getNumberOfLocals();", "+\t\t\t\t\t\tint numberOfEntries = 0;", "+\t\t\t\t\t\tint localsLength = currentFrame.locals == null ? 0 : currentFrame.locals.length;", "+\t\t\t\t\t\tfor (int i = 0; i < localsLength && numberOfLocalEntries < numberOfLocals; i++) {", "+\t\t\t\t\t\t\tif (localContentsOffset + 3 >= this.contents.length) {", "+\t\t\t\t\t\t\t\tresizeContents(3);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tVerificationTypeInfo info = currentFrame.locals[i];", "+\t\t\t\t\t\t\tif (info == null) {", "+\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_TOP;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tswitch(info.id()) {", "+\t\t\t\t\t\t\t\t\tcase T_boolean :", "+\t\t\t\t\t\t\t\t\tcase T_byte :", "+\t\t\t\t\t\t\t\t\tcase T_char :", "+\t\t\t\t\t\t\t\t\tcase T_int :", "+\t\t\t\t\t\t\t\t\tcase T_short :", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_INTEGER;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase T_float :", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_FLOAT;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_LONG;", "+\t\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_DOUBLE;", "+\t\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase T_null :", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_NULL;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) info.tag;", "+\t\t\t\t\t\t\t\t\tswitch (info.tag) {", "+\t\t\t\t\t\t\t\t\t\tcase VerificationTypeInfo.ITEM_UNINITIALIZED :", "+\t\t\t\t\t\t\t\t\t\t\tint offset = info.offset;", "+\t\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (offset >> 8);", "+\t\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) offset;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase VerificationTypeInfo.ITEM_OBJECT :", "+\t\t\t\t\t\t\t\t\t\t\tint indexForType = constantPool.literalIndexForType(info.constantPoolName());", "+\t\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (indexForType >> 8);", "+\t\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) indexForType;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tnumberOfLocalEntries++;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tnumberOfEntries++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (localContentsOffset + 4 >= this.contents.length) {", "+\t\t\t\t\t\t\tresizeContents(4);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.contents[numberOfLocalOffset++] = (byte) (numberOfEntries >> 8);", "+\t\t\t\t\t\tthis.contents[numberOfLocalOffset] = (byte) numberOfEntries;", "+\t\t\t\t\t\tint numberOfStackItems = currentFrame.numberOfStackItems;", "+\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (numberOfStackItems >> 8);", "+\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) numberOfStackItems;", "+\t\t\t\t\t\tfor (int i = 0; i < numberOfStackItems; i++) {", "+\t\t\t\t\t\t\tif (localContentsOffset + 3 >= this.contents.length) {", "+\t\t\t\t\t\t\t\tresizeContents(3);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tVerificationTypeInfo info = currentFrame.stackItems[i];", "+\t\t\t\t\t\t\tif (info == null) {", "+\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_TOP;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tswitch(info.id()) {", "+\t\t\t\t\t\t\t\t\tcase T_boolean :", "+\t\t\t\t\t\t\t\t\tcase T_byte :", "+\t\t\t\t\t\t\t\t\tcase T_char :", "+\t\t\t\t\t\t\t\t\tcase T_int :", "+\t\t\t\t\t\t\t\t\tcase T_short :", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_INTEGER;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase T_float :", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_FLOAT;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_LONG;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_DOUBLE;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase T_null :", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_NULL;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) info.tag;", "+\t\t\t\t\t\t\t\t\tswitch (info.tag) {", "+\t\t\t\t\t\t\t\t\t\tcase VerificationTypeInfo.ITEM_UNINITIALIZED :", "+\t\t\t\t\t\t\t\t\t\t\tint offset = info.offset;", "+\t\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (offset >> 8);", "+\t\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) offset;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase VerificationTypeInfo.ITEM_OBJECT :", "+\t\t\t\t\t\t\t\t\t\t\tint indexForType = constantPool.literalIndexForType(info.constantPoolName());", "+\t\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (indexForType >> 8);", "+\t\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) indexForType;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+", "+\t\t\t\t\tnumberOfFrames--;", "+\t\t\t\t\tif (numberOfFrames != 0) {", "+\t\t\t\t\t\tthis.contents[numberOfFramesOffset++] = (byte) (numberOfFrames >> 8);", "+\t\t\t\t\t\tthis.contents[numberOfFramesOffset] = (byte) numberOfFrames;", "+", "+\t\t\t\t\t\tint attributeLength = localContentsOffset - stackMapAttributeLengthOffset - 4;", "+\t\t\t\t\t\tthis.contents[stackMapAttributeLengthOffset++] = (byte) (attributeLength >> 24);", "+\t\t\t\t\t\tthis.contents[stackMapAttributeLengthOffset++] = (byte) (attributeLength >> 16);", "+\t\t\t\t\t\tthis.contents[stackMapAttributeLengthOffset++] = (byte) (attributeLength >> 8);", "+\t\t\t\t\t\tthis.contents[stackMapAttributeLengthOffset] = (byte) attributeLength;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8b05b565a3f62218329d10999787617", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "bed3ca2531a0bd15601237e5d1a0c8400e43f29e", "commitAfterChange": "cf4403abeadc8dee9dfef541af716a8f200a1ee1", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic void completeCodeAttributeForProblemMethod( \t\tAbstractMethodDeclaration method, \t\tMethodBinding binding, \t\tint codeAttributeOffset, \t\tint[] startLineIndexes, \t\tint problemLine)", "signatureAfterChange": " \tpublic void completeCodeAttributeForProblemMethod( \t\tAbstractMethodDeclaration method, \t\tMethodBinding binding, \t\tint codeAttributeOffset, \t\tint[] startLineIndexes, \t\tint problemLine)", "diff": ["-\t\tif ((this.produceAttributes & ClassFileConstants.ATTR_STACK_MAP) != 0) {", "+\t\tif ((this.produceAttributes & ClassFileConstants.ATTR_STACK_MAP_TABLE) != 0) {", "+\t\tif ((this.produceAttributes & ClassFileConstants.ATTR_STACK_MAP) != 0) {", "+\t\t\tStackMapFrameCodeStream stackMapFrameCodeStream = (StackMapFrameCodeStream) this.codeStream;", "+\t\t\tstackMapFrameCodeStream.removeFramePosition(code_length);", "+\t\t\tif (stackMapFrameCodeStream.hasFramePositions()) {", "+\t\t\t\tArrayList frames = new ArrayList();", "+\t\t\t\ttraverse(this.codeStream.methodDeclaration.binding, max_locals, this.contents, codeAttributeOffset + 14, code_length, frames, false);", "+\t\t\t\tint numberOfFrames = frames.size();", "+\t\t\t\tif (numberOfFrames > 1) {", "+\t\t\t\t\tint stackMapTableAttributeOffset = localContentsOffset;", "+\t\t\t\t\t// add the stack map table attribute", "+\t\t\t\t\tif (localContentsOffset + 8 >= this.contents.length) {", "+\t\t\t\t\t\tresizeContents(8);", "+\t\t\t\t\t}", "+\t\t\t\t\tint stackMapAttributeNameIndex =", "+\t\t\t\t\t\tconstantPool.literalIndex(AttributeNamesConstants.StackMapName);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (stackMapAttributeNameIndex >> 8);", "+\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) stackMapAttributeNameIndex;", "+", "+\t\t\t\t\tint stackMapAttributeLengthOffset = localContentsOffset;", "+\t\t\t\t\t// generate the attribute", "+\t\t\t\t\tlocalContentsOffset += 4;", "+\t\t\t\t\tif (localContentsOffset + 4 >= this.contents.length) {", "+\t\t\t\t\t\tresizeContents(4);", "+\t\t\t\t\t}", "+\t\t\t\t\tint numberOfFramesOffset = localContentsOffset;", "+\t\t\t\t\tlocalContentsOffset += 2;", "+\t\t\t\t\tif (localContentsOffset + 2 >= this.contents.length) {", "+\t\t\t\t\t\tresizeContents(2);", "+\t\t\t\t\t}", "+\t\t\t\t\tStackMapFrame currentFrame = (StackMapFrame) frames.get(0);", "+\t\t\t\t\tfor (int j = 1; j < numberOfFrames; j++) {", "+\t\t\t\t\t\t// select next frame", "+\t\t\t\t\t\tcurrentFrame = (StackMapFrame) frames.get(j);", "+\t\t\t\t\t\t// generate current frame", "+\t\t\t\t\t\t// need to find differences between the current frame and the previous frame", "+\t\t\t\t\t\tint frameOffset = currentFrame.pc;", "+\t\t\t\t\t\t// FULL_FRAME", "+\t\t\t\t\t\tif (localContentsOffset + 5 >= this.contents.length) {", "+\t\t\t\t\t\t\tresizeContents(5);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (frameOffset >> 8);", "+\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) frameOffset;", "+\t\t\t\t\t\tint numberOfLocalOffset = localContentsOffset;", "+\t\t\t\t\t\tlocalContentsOffset += 2; // leave two spots for number of locals", "+\t\t\t\t\t\tint numberOfLocalEntries = 0;", "+\t\t\t\t\t\tint numberOfLocals = currentFrame.getNumberOfLocals();", "+\t\t\t\t\t\tint numberOfEntries = 0;", "+\t\t\t\t\t\tint localsLength = currentFrame.locals == null ? 0 : currentFrame.locals.length;", "+\t\t\t\t\t\tfor (int i = 0; i < localsLength && numberOfLocalEntries < numberOfLocals; i++) {", "+\t\t\t\t\t\t\tif (localContentsOffset + 3 >= this.contents.length) {", "+\t\t\t\t\t\t\t\tresizeContents(3);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tVerificationTypeInfo info = currentFrame.locals[i];", "+\t\t\t\t\t\t\tif (info == null) {", "+\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_TOP;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tswitch(info.id()) {", "+\t\t\t\t\t\t\t\t\tcase T_boolean :", "+\t\t\t\t\t\t\t\t\tcase T_byte :", "+\t\t\t\t\t\t\t\t\tcase T_char :", "+\t\t\t\t\t\t\t\t\tcase T_int :", "+\t\t\t\t\t\t\t\t\tcase T_short :", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_INTEGER;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase T_float :", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_FLOAT;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_LONG;", "+\t\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_DOUBLE;", "+\t\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase T_null :", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_NULL;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) info.tag;", "+\t\t\t\t\t\t\t\t\tswitch (info.tag) {", "+\t\t\t\t\t\t\t\t\t\tcase VerificationTypeInfo.ITEM_UNINITIALIZED :", "+\t\t\t\t\t\t\t\t\t\t\tint offset = info.offset;", "+\t\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (offset >> 8);", "+\t\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) offset;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase VerificationTypeInfo.ITEM_OBJECT :", "+\t\t\t\t\t\t\t\t\t\t\tint indexForType = constantPool.literalIndexForType(info.constantPoolName());", "+\t\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (indexForType >> 8);", "+\t\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) indexForType;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tnumberOfLocalEntries++;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tnumberOfEntries++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (localContentsOffset + 4 >= this.contents.length) {", "+\t\t\t\t\t\t\tresizeContents(4);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.contents[numberOfLocalOffset++] = (byte) (numberOfEntries >> 8);", "+\t\t\t\t\t\tthis.contents[numberOfLocalOffset] = (byte) numberOfEntries;", "+\t\t\t\t\t\tint numberOfStackItems = currentFrame.numberOfStackItems;", "+\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (numberOfStackItems >> 8);", "+\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) numberOfStackItems;", "+\t\t\t\t\t\tfor (int i = 0; i < numberOfStackItems; i++) {", "+\t\t\t\t\t\t\tif (localContentsOffset + 3 >= this.contents.length) {", "+\t\t\t\t\t\t\t\tresizeContents(3);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tVerificationTypeInfo info = currentFrame.stackItems[i];", "+\t\t\t\t\t\t\tif (info == null) {", "+\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_TOP;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tswitch(info.id()) {", "+\t\t\t\t\t\t\t\t\tcase T_boolean :", "+\t\t\t\t\t\t\t\t\tcase T_byte :", "+\t\t\t\t\t\t\t\t\tcase T_char :", "+\t\t\t\t\t\t\t\t\tcase T_int :", "+\t\t\t\t\t\t\t\t\tcase T_short :", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_INTEGER;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase T_float :", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_FLOAT;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_LONG;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_DOUBLE;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase T_null :", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) VerificationTypeInfo.ITEM_NULL;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) info.tag;", "+\t\t\t\t\t\t\t\t\tswitch (info.tag) {", "+\t\t\t\t\t\t\t\t\t\tcase VerificationTypeInfo.ITEM_UNINITIALIZED :", "+\t\t\t\t\t\t\t\t\t\t\tint offset = info.offset;", "+\t\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (offset >> 8);", "+\t\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) offset;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase VerificationTypeInfo.ITEM_OBJECT :", "+\t\t\t\t\t\t\t\t\t\t\tint indexForType = constantPool.literalIndexForType(info.constantPoolName());", "+\t\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) (indexForType >> 8);", "+\t\t\t\t\t\t\t\t\t\t\tthis.contents[localContentsOffset++] = (byte) indexForType;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+", "+\t\t\t\t\tnumberOfFrames--;", "+\t\t\t\t\tif (numberOfFrames != 0) {", "+\t\t\t\t\t\tthis.contents[numberOfFramesOffset++] = (byte) (numberOfFrames >> 8);", "+\t\t\t\t\t\tthis.contents[numberOfFramesOffset] = (byte) numberOfFrames;", "+", "+\t\t\t\t\t\tint attributeLength = localContentsOffset - stackMapAttributeLengthOffset - 4;", "+\t\t\t\t\t\tthis.contents[stackMapAttributeLengthOffset++] = (byte) (attributeLength >> 24);", "+\t\t\t\t\t\tthis.contents[stackMapAttributeLengthOffset++] = (byte) (attributeLength >> 16);", "+\t\t\t\t\t\tthis.contents[stackMapAttributeLengthOffset++] = (byte) (attributeLength >> 8);", "+\t\t\t\t\t\tthis.contents[stackMapAttributeLengthOffset] = (byte) attributeLength;", "+\t\t\t\t\t\tattributeNumber++;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tlocalContentsOffset = stackMapTableAttributeOffset;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+"]}], "num": 25868}
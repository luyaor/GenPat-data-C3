{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "076ae6f923638fd9b4d1f6dec8a3145b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50d946c426744a19613f8cc9dab25de0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "c971e90f6253c316742413b3a46478447b02a85a", "commitAfterChange": "396d47b23135e9fb3aaeb3d8f844ebea73195461", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tprivate static synchronized boolean getBoolean(IJavaProject jproject, String optionName)", "signatureAfterChange": " \t \tprivate static synchronized boolean getBoolean(IJavaProject jproject, String optionName)", "diff": ["-\t\tMap options = getOptions(jproject);", "-\t\treturn \"true\".equals(options.get(optionName)); //$NON-NLS-1$", "+\t\treturn \"true\".equals(getOptions(jproject).get(optionName)); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4ad19c52097bb950daeb1a5bbefab18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "d13c29854b213f0b9bf42c0b6fd84d7b06118971", "commitAfterChange": "aa09f996ba3976f6c56ffa1ab64f257431d65d06", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void generateSubRoutineInvocation( \t\t\tBlockScope currentScope, \t\t\tCodeStream codeStream)", "signatureAfterChange": " \tpublic void generateSubRoutineInvocation( \t\t\tBlockScope currentScope, \t\t\tCodeStream codeStream)", "diff": ["-\t\t\tCompilerOptions options = currentScope.compilerOptions();", "-\t\t\tif (options.inlineJsrBytecode) {", "+\t\t\tif (currentScope.compilerOptions().inlineJsrBytecode) {", "-//\t\t\t} else if (options.noJSRBytecode) {", "-//\t\t\t\tCaseLabel returnLocationLabel = recordReturnLocation(codeStream);", "-//\t\t\t\tcodeStream.generateInlinedValue(this.returnLocationsCount-1);", "-//\t\t\t\tcodeStream.store(this.returnAddressVariable, false);", "-//\t\t\t\tcodeStream.goto_(this.subRoutineStartLabel);", "-//\t\t\t\treturnLocationLabel.place();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3e21cbf55408bfd2cff050baca32dca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "d13c29854b213f0b9bf42c0b6fd84d7b06118971", "commitAfterChange": "aa09f996ba3976f6c56ffa1ab64f257431d65d06", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": " \t \tpublic void resolve(BlockScope upperScope)", "diff": ["-\t", "-\t\t\t\tCompilerOptions options = upperScope.compilerOptions();", "-\t\t\t\tif (!options.inlineJsrBytecode) {", "-//\t\t\t\t\tif (options.noJSRBytecode) {", "-//\t\t\t\t\t\t// variable encoding the return site location", "-//\t\t\t\t\t\tthis.returnAddressVariable = new LocalVariableBinding(TryStatement.SecretReturnName, TypeBinding.INT, ClassFileConstants.AccDefault, false);", "-//\t\t\t\t\t} else {", "-\t\t\t\t\t\t// the type does not matter as long as it is not a base type", "-\t\t\t\t\t\tthis.returnAddressVariable = new LocalVariableBinding(TryStatement.SecretReturnName, upperScope.getJavaLangObject(), ClassFileConstants.AccDefault, false);", "-//\t\t\t\t\t}", "+\t\t\t\t// the type does not matter as long as it is not a base type", "+\t\t\t\tif (!upperScope.compilerOptions().inlineJsrBytecode) {", "+\t\t\t\t\tthis.returnAddressVariable =", "+\t\t\t\t\t\tnew LocalVariableBinding(TryStatement.SecretReturnName, upperScope.getJavaLangObject(), ClassFileConstants.AccDefault, false);"]}], "num": 58393}
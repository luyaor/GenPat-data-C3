{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ce3b6758c42cbfbc59184d4c4f3a66a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56872cabea15d5b60f2656c13aef800f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "deae30ce689e465e0937983430e489fe907e83c3", "commitAfterChange": "2c6ec7b60d7fde4e52ee4a2fc2921535515e4991", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "signatureAfterChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "diff": ["-\t\t\tif (VARIABLES_AND_CONTAINERS_FILE_VERSION == in.readInt()) {", "-\t\t\t\t", "-\t\t\t\t// variables", "-\t\t\t\tint size = in.readInt();", "-\t\t\t\twhile (size-- > 0) {", "-\t\t\t\t\tString varName = in.readUTF();", "-\t\t\t\t\tString pathString = in.readUTF();", "-\t\t\t\t\tif (CP_ENTRY_IGNORE.equals(pathString))", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\tIPath varPath = Path.fromPortableString(pathString);", "-\t\t\t\t\tthis.variables.put(varName, varPath);", "-\t\t\t\t\tthis.previousSessionVariables.put(varName, varPath);", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t// containers", "-\t\t\t\tIJavaModel model = getJavaModel();", "-\t\t\t\tint projectSize = in.readInt();", "-\t\t\t\twhile (projectSize-- > 0) {", "-\t\t\t\t\tString projectName = in.readUTF();", "-\t\t\t\t\tIJavaProject project = model.getJavaProject(projectName);", "-\t\t\t\t\tint containerSize = in.readInt();", "-\t\t\t\t\twhile (containerSize-- > 0) {", "-\t\t\t\t\t\tIPath containerPath = Path.fromPortableString(in.readUTF());", "-\t\t\t\t\t\tint length = in.readInt();", "-\t\t\t\t\t\tbyte[] containerString = new byte[length];", "-\t\t\t\t\t\tin.readFully(containerString);", "-\t\t\t\t\t\trecreatePersistedContainer(project, containerPath, new String(containerString), true/*add to container values*/);", "+\t\t\tswitch (in.readInt()) {", "+\t\t\t\tcase 2 :", "+\t\t\t\t\tnew VariablesAndContainersLoadHelper(in).load();", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 1 : // backward compatibility, load old format", "+\t\t\t\t\t// variables", "+\t\t\t\t\tint size = in.readInt();", "+\t\t\t\t\twhile (size-- > 0) {", "+\t\t\t\t\t\tString varName = in.readUTF();", "+\t\t\t\t\t\tString pathString = in.readUTF();", "+\t\t\t\t\t\tif (CP_ENTRY_IGNORE.equals(pathString))", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tIPath varPath = Path.fromPortableString(pathString);", "+\t\t\t\t\t\tthis.variables.put(varName, varPath);", "+\t\t\t\t\t\tthis.previousSessionVariables.put(varName, varPath);", "-\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t// containers", "+\t\t\t\t\tIJavaModel model = getJavaModel();", "+\t\t\t\t\tint projectSize = in.readInt();", "+\t\t\t\t\twhile (projectSize-- > 0) {", "+\t\t\t\t\t\tString projectName = in.readUTF();", "+\t\t\t\t\t\tIJavaProject project = model.getJavaProject(projectName);", "+\t\t\t\t\t\tint containerSize = in.readInt();", "+\t\t\t\t\t\twhile (containerSize-- > 0) {", "+\t\t\t\t\t\t\tIPath containerPath = Path.fromPortableString(in.readUTF());", "+\t\t\t\t\t\t\tint length = in.readInt();", "+\t\t\t\t\t\t\tbyte[] containerString = new byte[length];", "+\t\t\t\t\t\t\tin.readFully(containerString);", "+\t\t\t\t\t\t\trecreatePersistedContainer(project, containerPath, new String(containerString), true/*add to container values*/);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "778e6556512a32e342a1d2bf1e85900d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "64adb94de0734c7d5adfd2cb11839ed3d3641dfc", "commitAfterChange": "a12b1847e48d96ac5e805a907f4cf72bcc8b1f19", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 83, "signatureBeforeChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "signatureAfterChange": "  \tpublic void loadVariablesAndContainers() throws CoreException", "diff": ["-", "-\t\t\t", "-\t\t", "-\t\t// load variables and containers from preferences into cache", "-\t\tIEclipsePreferences preferences = getInstancePreferences();", "-\t\t// only get variable from preferences not set to their default", "+\t\t// backward compatibility, load variables and containers from preferences into cache", "+\t\tIEclipsePreferences preferences = getInstancePreferences();", "+\t\t\t// only get variable from preferences not set to their default", "+\t\t\t\t\t\tpreferences.remove(propertyName); // cleanup old preferences", "-\t\t\t\t}", "-\t\t\t\tif (propertyName.startsWith(CP_CONTAINER_PREFERENCES_PREFIX)){", "+\t\t\t\t} else if (propertyName.startsWith(CP_CONTAINER_PREFERENCES_PREFIX)){", "-\t\t\t\t\tif (propertyValue != null)", "+\t\t\t\t\tif (propertyValue != null) {", "+\t\t\t\t\t\tpreferences.remove(propertyName); // cleanup old preferences", "+\t\t\t\t\t}", "+", "+\t\t// load variables and containers from saved file into cache", "+\t\tFile file = getVariableAndContainersFile();", "+\t\tDataInputStream in = null;", "+\t\ttry {", "+\t\t\tin = new DataInputStream(new BufferedInputStream(new FileInputStream(file)));", "+\t\t\tif (VARIABLES_AND_CONTAINERS_FILE_VERSION == in.readInt()) {", "+\t\t\t\t", "+\t\t\t\t// variables", "+\t\t\t\tint size = in.readInt();", "+\t\t\t\twhile (size-- > 0) {", "+\t\t\t\t\tString varName = in.readUTF();", "+\t\t\t\t\tString pathString = in.readUTF();", "+\t\t\t\t\tif (CP_ENTRY_IGNORE.equals(pathString))", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tIPath varPath = Path.fromPortableString(pathString);", "+\t\t\t\t\tthis.variables.put(varName, varPath);", "+\t\t\t\t\tthis.previousSessionVariables.put(varName, varPath);", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t// containers", "+\t\t\t\tIJavaModel model = getJavaModel();", "+\t\t\t\tint projectSize = in.readInt();", "+\t\t\t\twhile (projectSize-- > 0) {", "+\t\t\t\t\tString projectName = in.readUTF();", "+\t\t\t\t\tIJavaProject project = model.getJavaProject(projectName);", "+\t\t\t\t\tint containerSize = in.readInt();", "+\t\t\t\t\twhile (containerSize-- > 0) {", "+\t\t\t\t\t\tIPath containerPath = Path.fromPortableString(in.readUTF());", "+\t\t\t\t\t\tint length = in.readInt();", "+\t\t\t\t\t\tbyte[] containerString = new byte[length];", "+\t\t\t\t\t\tin.readFully(containerString);", "+\t\t\t\t\t\trecreatePersistedContainer(project, containerPath, new String(containerString), true/*add to container values*/);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (IOException e) {", "+\t\t\tif (file.exists())", "+\t\t\t\tUtil.log(e, \"Unable to read variable and containers file\"); //$NON-NLS-1$", "+\t\t} finally {", "+\t\t\tif (in != null) {", "+\t\t\t\ttry {", "+\t\t\t\t\tin.close();", "+\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\t// nothing we can do: ignore", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+"]}], "num": 15238}
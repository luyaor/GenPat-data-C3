{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17e36318774882a138b137d215301acc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40b5709e4516ebc31f0c7ebaabe01e65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "71df68ac6bbd7c5b4b673539241b9c1cc905574c", "commitAfterChange": "04c08732703d5f5e97b66e89468d2f87b7f84cff", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 114, "signatureBeforeChange": " \tpublic HashMap getSecondaryTypes(IJavaProject project, boolean waitForIndexes, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic Map secondaryTypes(IJavaProject project, boolean waitForIndexes, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t */", "-\tpublic HashMap getSecondaryTypes(IJavaProject project, boolean waitForIndexes, IProgressMonitor monitor) throws JavaModelException {", "-\t\tif (VERBOSE) {", "-\t\t\tStringBuffer buffer = new StringBuffer(\"JavaModelManager.getSecondaryTypesPaths(\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(project.getElementName());", "-\t\t\tbuffer.append(')');", "-\t\t\tUtil.verbose(buffer.toString());", "-\t\t}", "-", "-\t\t// Wait the end of indexing if requested", "-\t\tfinal PerProjectInfo projectInfo = getPerProjectInfoCheckExistence(project.getProject());", "-\t\tIndexManager manager = getIndexManager();", "-\t\tboolean indexing = manager.awaitingJobsCount() > 0;", "-\t\tif (indexing && waitForIndexes) {", "-\t\t\twhile (manager.awaitingJobsCount() > 0) {", "-\t\t\t\tif (monitor != null && monitor.isCanceled()) {", "-\t\t\t\t\tif (projectInfo.secondaryTypes == null) return NO_SECONDARY_TYPES;", "-\t\t\t\t\treturn projectInfo.secondaryTypes;", "-\t\t\t\t}", "-\t\t\t\ttry {", "-\t\t\t\t\tThread.sleep(10);", "-\t\t\t\t} catch (InterruptedException e) {", "-\t\t\t\t\tif (projectInfo.secondaryTypes == null) return NO_SECONDARY_TYPES;", "-\t\t\t\t\treturn projectInfo.secondaryTypes;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-", "-\t\t// Return cache if not empty and not dirty", "-\t\tif (projectInfo.secondaryTypes != null && projectInfo.secondaryTypes.get(DIRTY_CACHE) == null) {", "-\t\t\treturn projectInfo.secondaryTypes;", "-\t\t}", "-\t\t", "-\t\t// Return cache if not waiting for indexing", "-\t\tif (indexing && !waitForIndexes) {", "-\t\t\tif (projectInfo.secondaryTypes == null) {", "-\t\t\t\treturn NO_SECONDARY_TYPES; // cache is not initialized return empty one", "-\t\t\t}", "-\t\t\treturn projectInfo.secondaryTypes; // cache is dirty => return current one...", "-\t\t}", "-", "-\t\t// Init variables for search", "-\t\tfinal HashMap secondaryTypes = new HashMap(3);", "-\t\tIRestrictedAccessTypeRequestor nameRequestor = new IRestrictedAccessTypeRequestor() {", "-\t\t\tpublic void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path, AccessRestriction access) {", "-\t\t\t\tString key = packageName==null ? \"\" : new String(packageName); //$NON-NLS-1$", "-\t\t\t\tHashMap types = (HashMap) secondaryTypes.get(key);", "-\t\t\t\tif (types == null) types = new HashMap(3);", "-\t\t\t\ttypes.put(new String(simpleTypeName), path);", "-\t\t\t\tsecondaryTypes.put(key, types);", "-\t\t\t}", "-\t\t};", "-", "-\t\t// Build scope using prereq projects but only source folders", "-\t\tIPackageFragmentRoot[] allRoots = project.getAllPackageFragmentRoots();", "-\t\tint length = allRoots.length, size = 0;", "-\t\tIPackageFragmentRoot[] allSourceFolders = new IPackageFragmentRoot[length];", "-\t\tfor (int i=0; i<length; i++) {", "-\t\t\tif (allRoots[i].getKind() == IPackageFragmentRoot.K_SOURCE) {", "-\t\t\t\tallSourceFolders[size++] = allRoots[i];", "-\t\t\t}", "-\t\t}", "-\t\tif (size < length) {", "-\t\t\tSystem.arraycopy(allSourceFolders, 0, allSourceFolders = new IPackageFragmentRoot[size], 0, size);", "-\t\t}", "-", "-\t\t// Search all secondary types on scope", "-\t\tnew BasicSearchEngine().searchAllSecondaryTypeNames(allSourceFolders, nameRequestor, monitor);", "-\t\tif (VERBOSE) {", "-\t\t\tSystem.out.print(Thread.currentThread() + \"\t-> secondary paths: \");  //$NON-NLS-1$", "-\t\t\tSystem.out.println();", "-\t\t\tIterator keys = secondaryTypes.keySet().iterator();", "-\t\t\twhile (keys.hasNext()) {", "-\t\t\t\tString qualifiedName = (String) keys.next();", "-\t\t\t\tUtil.verbose(\"\t\t- \"+qualifiedName+'-'+secondaryTypes.get(qualifiedName) ); //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-", "-\t\t// Build types from paths", "-\t\tIterator packages = secondaryTypes.keySet().iterator();", "-\t\twhile (packages.hasNext()) {", "-\t\t\tString packName = (String) packages.next();", "-\t\t\tHashMap types = (HashMap) secondaryTypes.get(packName);", "-\t\t\tIterator names = types.keySet().iterator();", "-\t\t\twhile (names.hasNext()) {", "-\t\t\t\tString typeName = (String) names.next();", "-\t\t\t\tString path = (String) types.get(typeName);", "-\t\t\t\tif (org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(path)) {", "-\t\t\t\t\tIFile file = ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(path));", "-\t\t\t\t\tICompilationUnit unit = JavaModelManager.createCompilationUnitFrom(file, null);", "-\t\t\t\t\tIType type = unit.getType(typeName);", "-\t\t\t\t\ttypes.put(typeName, type); // replace stored path with type itself", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-", "-\t\t// Store result in per project info cache if still null or dirty (may have been set by another thread...)", "-\t\tif (projectInfo.secondaryTypes == null || projectInfo.secondaryTypes.get(DIRTY_CACHE) != null) {", "-\t\t\tprojectInfo.secondaryTypes = secondaryTypes;", "-\t\t}", "-\t\treturn projectInfo.secondaryTypes;", "+\t */", "+\tpublic Map secondaryTypes(IJavaProject project, boolean waitForIndexes, IProgressMonitor monitor) throws JavaModelException {", "+\t\tif (VERBOSE) {", "+\t\t\tStringBuffer buffer = new StringBuffer(\"JavaModelManager.secondaryTypes(\"); //$NON-NLS-1$", "+\t\t\tbuffer.append(project.getElementName());", "+\t\t\tbuffer.append(',');", "+\t\t\tbuffer.append(waitForIndexes);", "+\t\t\tbuffer.append(')');", "+\t\t\tUtil.verbose(buffer.toString());", "+\t\t}", "+", "+\t\t// Return cache if not empty and there's no new secondary types created during indexing", "+\t\tfinal PerProjectInfo projectInfo = getPerProjectInfoCheckExistence(project.getProject());", "+\t\tMap indexingSecondaryCache = projectInfo.secondaryTypes == null ? null : (Map) projectInfo.secondaryTypes.get(INDEXED_SECONDARY_TYPES);", "+\t\tif (projectInfo.secondaryTypes != null && indexingSecondaryCache == null) {", "+\t\t\treturn projectInfo.secondaryTypes;", "+\t\t}", "+", "+\t\t// Perform search request only if secondary types cache is not initialized yet (this will happen only once!)", "+\t\tif (projectInfo.secondaryTypes == null) {", "+\t\t\treturn secondaryTypesSearching(project, waitForIndexes, monitor, projectInfo);", "+\t\t}", "+", "+\t\t// New secondary types have been created while indexing secondary types cache", "+\t\t// => need to know whether the indexing is finished or not", "+\t\tboolean indexing = this.indexManager.awaitingJobsCount() > 0;", "+\t\tif (indexing) {", "+\t\t\tif (!waitForIndexes)  {", "+\t\t\t\t// Indexing is running but caller cannot wait => return current cache", "+\t\t\t\treturn projectInfo.secondaryTypes;", "+\t\t\t}", "+", "+\t\t\t// Wait for the end of indexing or a cancel", "+\t\t\twhile (this.indexManager.awaitingJobsCount() > 0) {", "+\t\t\t\tif (monitor != null && monitor.isCanceled()) {", "+\t\t\t\t\treturn projectInfo.secondaryTypes;", "+\t\t\t\t}", "+\t\t\t\ttry {", "+\t\t\t\t\tThread.sleep(10);", "+\t\t\t\t} catch (InterruptedException e) {", "+\t\t\t\t\treturn projectInfo.secondaryTypes;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+", "+\t\t// Indexing is finished => merge caches and return result", "+\t\treturn secondaryTypesMerging(projectInfo.secondaryTypes);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5daeef1f13c961f34f4a533a9697cacc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "e6d78cda375a26ce6fdb882d62ed50fe3c6a25b5", "commitAfterChange": "8aee5680d034dfec291b1e7b2abb4d9d081e8e31", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic HashMap getSecondaryTypes(IJavaProject project) throws JavaModelException", "signatureAfterChange": " \tpublic HashMap getSecondaryTypes(IJavaProject project, boolean waitForIndexes, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\tpublic HashMap getSecondaryTypes(IJavaProject project) throws JavaModelException {", "+\tpublic HashMap getSecondaryTypes(IJavaProject project, boolean waitForIndexes, IProgressMonitor monitor) throws JavaModelException {", "-\t\tPerProjectInfo projectInfo = getPerProjectInfoCheckExistence(project.getProject());", "-\t\tif (projectInfo.secondaryTypes != null) return projectInfo.secondaryTypes;", "-\t\tfinal HashMap secondaryTypePaths = new HashMap(3);", "+\t\t// Wait the end of indexing if requested", "+\t\tfinal PerProjectInfo projectInfo = getPerProjectInfoCheckExistence(project.getProject());", "+\t\tIndexManager manager = getIndexManager();", "+\t\tboolean indexing = manager.awaitingJobsCount() > 0;", "+\t\tif (indexing && waitForIndexes) {", "+\t\t\twhile (manager.awaitingJobsCount() > 0) {", "+\t\t\t\tif (monitor != null && monitor.isCanceled()) {", "+\t\t\t\t\tif (projectInfo.secondaryTypes == null) return NO_SECONDARY_TYPES;", "+\t\t\t\t\treturn projectInfo.secondaryTypes;", "+\t\t\t\t}", "+\t\t\t\ttry {", "+\t\t\t\t\tThread.sleep(10);", "+\t\t\t\t} catch (InterruptedException e) {", "+\t\t\t\t\tif (projectInfo.secondaryTypes == null) return NO_SECONDARY_TYPES;", "+\t\t\t\t\treturn projectInfo.secondaryTypes;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t// Return cache if not empty and not dirty", "+\t\tif (projectInfo.secondaryTypes != null && projectInfo.secondaryTypes.get(DIRTY_CACHE) == null) {", "+\t\t\treturn projectInfo.secondaryTypes;", "+\t\t}", "+\t\t", "+\t\t// Return cache if not waiting for indexing", "+\t\tif (indexing && !waitForIndexes) {", "+\t\t\tif (projectInfo.secondaryTypes == null) {", "+\t\t\t\treturn NO_SECONDARY_TYPES; // cache is not initialized return empty one", "+\t\t\t}", "+\t\t\treturn projectInfo.secondaryTypes; // cache is dirty => return current one...", "+\t\t}", "+", "+\t\t// Init variables for search", "+\t\tfinal HashMap secondaryTypes = new HashMap(3);", "-\t\t\t\tHashMap types = (HashMap) secondaryTypePaths.get(key);", "-\t\t\t\tif (types == null) {", "-\t\t\t\t\ttypes = new HashMap();", "-\t\t\t\t}", "+\t\t\t\tHashMap types = (HashMap) secondaryTypes.get(key);", "+\t\t\t\tif (types == null) types = new HashMap(3);", "-\t\t\t\tsecondaryTypePaths.put(key, types);", "+\t\t\t\tsecondaryTypes.put(key, types);", "-\t\t\t", "+", "-\t\tnew BasicSearchEngine().searchAllSecondaryTypeNames(allSourceFolders, nameRequestor);", "+\t\tnew BasicSearchEngine().searchAllSecondaryTypeNames(allSourceFolders, nameRequestor, monitor);", "-\t\t\tSystem.out.print(Thread.currentThread() + \" -> secondary paths: \");  //$NON-NLS-1$", "-\t\t\tif (secondaryTypePaths == null) {", "-\t\t\t\tSystem.out.println(\" NONE\"); //$NON-NLS-1$", "-\t\t\t} else {", "-\t\t\t\tSystem.out.println();", "-\t\t\t\tIterator keys = secondaryTypePaths.keySet().iterator();", "-\t\t\t\twhile (keys.hasNext()) {", "-\t\t\t\t\tString qualifiedName = (String) keys.next();", "-\t\t\t\t\tUtil.verbose(\"\t\t- \"+qualifiedName+'-'+secondaryTypePaths.get(qualifiedName) ); //$NON-NLS-1$", "-\t\t\t\t}", "+\t\t\tSystem.out.print(Thread.currentThread() + \"\t-> secondary paths: \");  //$NON-NLS-1$", "+\t\t\tSystem.out.println();", "+\t\t\tIterator keys = secondaryTypes.keySet().iterator();", "+\t\t\twhile (keys.hasNext()) {", "+\t\t\t\tString qualifiedName = (String) keys.next();", "+\t\t\t\tUtil.verbose(\"\t\t- \"+qualifiedName+'-'+secondaryTypes.get(qualifiedName) ); //$NON-NLS-1$", "-\t\t", "+", "-\t\tIterator packages = secondaryTypePaths.keySet().iterator();", "+\t\tIterator packages = secondaryTypes.keySet().iterator();", "-\t\t\tHashMap types = (HashMap) secondaryTypePaths.get(packName);", "+\t\t\tHashMap types = (HashMap) secondaryTypes.get(packName);", "-\t\t", "-\t\t// Store result in per project info cache", "-\t\treturn (projectInfo.secondaryTypes = secondaryTypePaths);", "+", "+\t\t// Store result in per project info cache if still null or dirty (may have been set by another thread...)", "+\t\tif (projectInfo.secondaryTypes == null || projectInfo.secondaryTypes.get(DIRTY_CACHE) != null) {", "+\t\t\tprojectInfo.secondaryTypes = secondaryTypes;", "+\t\t}", "+\t\treturn projectInfo.secondaryTypes;"]}], "num": 55963}
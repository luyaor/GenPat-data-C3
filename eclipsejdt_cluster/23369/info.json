{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1f0288466c81c0f7daa3fce306a12fb", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06bdd71105d65b1576a3141d1ce7377c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\t \tprivate CompilationParticipantResult preBuildNotify( PreBuildCompilationEvent pbce )", "signatureAfterChange": " \t \tpublic void processAnnotations(ICompilationParticipantResult[] filesWithAnnotations, boolean isBatchBuild)", "diff": ["-\t\t", "-\tprivate CompilationParticipantResult preBuildNotify( PreBuildCompilationEvent pbce )", "-\t{\t\t", "-\t\tif ( pbce == null )", "-\t\t\treturn EMPTY_PRE_BUILD_COMPILATION_RESULT;", "-", "-\t\tIFile[] buildFiles = pbce.getFiles();", "-\t\tIJavaProject javaProject = pbce.getJavaProject();", "-\t\t", "-\t\tif ( buildFiles == null || buildFiles.length == 0 )", "-\t\t\treturn EMPTY_PRE_BUILD_COMPILATION_RESULT;", "-\t\t", "+\t", "+\tpublic void processAnnotations(ICompilationParticipantResult[] filesWithAnnotations, boolean isBatchBuild) {", "+\t\tif( filesWithAnnotations == null || filesWithAnnotations.length == 0 )", "+\t\t\treturn;", "+\t\tfinal IProject project = filesWithAnnotations[0].getFile().getProject();", "+\t\tfinal IJavaProject javaProject = JavaCore.create(project);", "-\t\tString javaVersion = javaProject.getOption(\"org.eclipse.jdt.core.compiler.source\", true); //$NON-NLS-1$", "-\t\t", "+\t\tString javaVersion = javaProject.getOption(\"org.eclipse.jdt.core.compiler.source\", true); //$NON-NLS-1$\t\t", "-\t\t\treturn EMPTY_PRE_BUILD_COMPILATION_RESULT;", "+\t\t\treturn;", "-\t", "-\t\t// If we're in batch mode, we need to reset the classloaders", "-\t\t// for the batch processors before we begin", "-\t\tboolean isFullBuild = pbce.isFullBuild();", "+\t\t", "-\t\t\tif (isFullBuild && pbce.getRound() == 0) {", "-\t\t\t\tAnnotationProcessorFactoryLoader.getLoader().resetBatchProcessors(pbce.getJavaProject());", "+\t\t\tif (isBatchBuild && _buildRound == 0 ) {", "+\t\t\t\tAnnotationProcessorFactoryLoader.getLoader().resetBatchProcessors(javaProject);", "-\t\t\t", "+\t\t", "-\t\t\tAPTResult result = APTDispatch.runAPTDuringBuild(factories, _previousRoundsBatchFactories, buildFiles, javaProject, isFullBuild);", "-\t\t\tSet<IFile> newFiles = result.getNewFiles();\t\t\t", "-\t\t\tSet<IFile> deletedFiles = new HashSet<IFile>();", "-\t\t\t_previousRoundsBatchFactories.addAll(result.getDispatchedBatchFactory());", "-\t\t\t", "-\t\t\t// for apt, new files will always trump deleted files", "-\t\t\tfor ( IFile df : result.getDeletedFiles() ){", "-\t\t\t\tif ( !newFiles.contains( df ) ){", "-\t\t\t\t\tdeletedFiles.add(df);", "-\t\t\t\t}", "-\t\t\t}", "-\t", "-\t\t\treturn new PreBuildCompilationResult( ", "-\t\t\t\t\tnewFiles.toArray( new IFile[ newFiles.size() ] ), ", "-\t\t\t\t\tdeletedFiles.toArray( new IFile[ deletedFiles.size() ] ), ", "-\t\t\t\t\tresult.getNewDependencies(), ", "-\t\t\t\t\tresult.getProblems());", "+\t\t\tAptProject aptProject = AptPlugin.getAptProject(javaProject);", "+\t\t\tSet<AnnotationProcessorFactory> dispatchedBatchFactories = ", "+\t\t\t\tAPTDispatchRunnable.runAPTDuringBuild(filesWithAnnotations, aptProject, factories, _previousRoundsBatchFactories, isBatchBuild);", "+\t\t\t_previousRoundsBatchFactories.addAll(dispatchedBatchFactories);", "-\t\t\tif (isFullBuild) {", "+\t\t\tif (isBatchBuild) {", "+\t\t\t_buildRound ++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61f6bb7178ee8c1bf44966201b30040d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java", "commitBeforeChange": "f1d83e37dc72ba6d2676594fd1c64161817b3d74", "commitAfterChange": "50c8fc7c21507137e2b63d15c742a120cb954eef", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\t \tprivate CompilationParticipantResult preBuildNotify( PreBuildCompilationEvent pbce )", "signatureAfterChange": " \t\t \tprivate CompilationParticipantResult preBuildNotify( PreBuildCompilationEvent pbce )", "diff": ["-\t\tif (isFullBuild && pbce.getRound() == 0) {", "-\t\t\tAnnotationProcessorFactoryLoader.getLoader().resetBatchProcessors(pbce.getJavaProject());", "-\t\t\t_previousRoundsBatchFactories.clear();", "+\t\ttry {", "+\t\t\tif (isFullBuild && pbce.getRound() == 0) {", "+\t\t\t\tAnnotationProcessorFactoryLoader.getLoader().resetBatchProcessors(pbce.getJavaProject());", "+\t\t\t\t_previousRoundsBatchFactories.clear();", "+\t\t\t}", "+\t\t\t", "+\t\t\tMap<AnnotationProcessorFactory, FactoryPath.Attributes> factories =", "+\t\t\t\tAnnotationProcessorFactoryLoader.getLoader().getFactoriesAndAttributesForProject(javaProject);", "+\t\t\t", "+\t\t\tAPTResult result = APTDispatch.runAPTDuringBuild(factories, _previousRoundsBatchFactories, buildFiles, javaProject, isFullBuild);", "+\t\t\tSet<IFile> newFiles = result.getNewFiles();\t\t\t", "+\t\t\tSet<IFile> deletedFiles = new HashSet<IFile>();", "+\t\t\t_previousRoundsBatchFactories.addAll(result.getDispatchedBatchFactory());", "+\t\t\t", "+\t\t\t// see if APT updated a project's source path", "+\t\t\tboolean sourcePathChanged = result.getSourcePathChanged();", "+\t\t\t", "+\t\t\t// for apt, new files will always trump deleted files", "+\t\t\tfor ( IFile df : result.getDeletedFiles() ){", "+\t\t\t\tif ( !newFiles.contains( df ) ){", "+\t\t\t\t\tdeletedFiles.add(df);", "+\t\t\t\t}", "+\t\t\t}", "+\t", "+\t\t\treturn new PreBuildCompilationResult( ", "+\t\t\t\t\tnewFiles.toArray( new IFile[ newFiles.size() ] ), ", "+\t\t\t\t\tdeletedFiles.toArray( new IFile[ deletedFiles.size() ] ), ", "+\t\t\t\t\tresult.getNewDependencies(), ", "+\t\t\t\t\tresult.getProblems(), ", "+\t\t\t\t\tsourcePathChanged );", "-\t\t", "-\t\tMap<AnnotationProcessorFactory, FactoryPath.Attributes> factories =", "-\t\t\tAnnotationProcessorFactoryLoader.getLoader().getFactoriesAndAttributesForProject(javaProject);", "-\t\t", "-\t\tAPTResult result = APTDispatch.runAPTDuringBuild(factories, _previousRoundsBatchFactories, buildFiles, javaProject, isFullBuild);", "-\t\tSet<IFile> newFiles = result.getNewFiles();\t\t\t", "-\t\tSet<IFile> deletedFiles = new HashSet<IFile>();", "-\t\t_previousRoundsBatchFactories.addAll(result.getDispatchedBatchFactory());", "-\t\t", "-\t\t// see if APT updated a project's source path", "-\t\tboolean sourcePathChanged = result.getSourcePathChanged();", "-\t\t", "-\t\t// for apt, new files will always trump deleted files", "-\t\tfor ( IFile df : result.getDeletedFiles() ){", "-\t\t\tif ( !newFiles.contains( df ) ){", "-\t\t\t\tdeletedFiles.add(df);", "+\t\tfinally {", "+\t\t\tif (isFullBuild) {", "+\t\t\t\t// In order to keep from locking jars, we explicitly close any batch-based", "+\t\t\t\t// classloaders we opened", "+\t\t\t\tAnnotationProcessorFactoryLoader.getLoader().closeBatchClassLoader();", "-", "-\t\treturn new PreBuildCompilationResult( ", "-\t\t\t\tnewFiles.toArray( new IFile[ newFiles.size() ] ), ", "-\t\t\t\tdeletedFiles.toArray( new IFile[ deletedFiles.size() ] ), ", "-\t\t\t\tresult.getNewDependencies(), ", "-\t\t\t\tresult.getProblems(), ", "-\t\t\t\tsourcePathChanged );"]}], "num": 23369}
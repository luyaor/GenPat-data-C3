{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f59087033696571403a61b54eeb3e42a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0360992c03e4e57a2e779d37c153ab6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "723628e20cdcca3d7368991555fbb1e08f7222a1", "commitAfterChange": "daa096617d4294add6bd8531102c2906f3417dbb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected int classpathContains( \t\tIClasspathEntry[] list, \t\tIClasspathEntry entry)", "signatureAfterChange": " \tprotected int classpathContains( \t\tIClasspathEntry[] list, \t\tIClasspathEntry entry)", "diff": ["-\t\tfor (int i = 0; i < list.length; i++) {", "+\t\tString[] exclusionPatterns = entry.getExclusionPatterns();", "+\t\tnextEntry: for (int i = 0; i < list.length; i++) {", "+\t\t\t\t\tString[] otherExcludes = other.getExclusionPatterns();", "+\t\t\t\t\tif (exclusionPatterns == null) {", "+\t\t\t\t\t\tif (otherExcludes != null)", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint excludeLength = exclusionPatterns.length;", "+\t\t\t\t\t\tif (otherExcludes == null || otherExcludes.length != excludeLength)", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tfor (int j = 0; j < excludeLength; j++) {", "+\t\t\t\t\t\t\tif (!exclusionPatterns[j].equals(otherExcludes[j]))", "+\t\t\t\t\t\t\t\tcontinue nextEntry;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29b9a0cf54977d3a7480d9232844b758", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected IClasspathEntry[] decodeClasspath(String xmlClasspath, boolean createMarker, boolean logProblems)", "signatureAfterChange": "  \tpublic static boolean areClasspathsEqual( \t\t\tIClasspathEntry[] firstClasspath, IClasspathEntry[] secondClasspath,  \t\t\tIPath firstOutputLocation, IPath secondOutputLocation)", "diff": ["+", "+\tpublic static boolean areClasspathsEqual(", "+\t\t\tIClasspathEntry[] firstClasspath, IClasspathEntry[] secondClasspath, ", "+\t\t\tIPath firstOutputLocation, IPath secondOutputLocation) {", "+\t\tint length = firstClasspath.length;", "+\t\tif (length != secondClasspath.length) return false;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tif (!firstClasspath[i].equals(secondClasspath[i]))", "+\t\t\t\treturn false;", "+\t\t}", "+\t\tif (firstOutputLocation == null)", "+\t\t\treturn secondOutputLocation == null;", "+\t\treturn firstOutputLocation.equals(secondOutputLocation);", "+\t}", "-\tprotected IClasspathEntry[] decodeClasspath(String xmlClasspath, boolean createMarker, boolean logProblems) {", "-\t\treturn decodeClasspath(xmlClasspath, createMarker, logProblems, null/*not interested in unknown elements*/);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f45352551635ff89a69c61ec0d688ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/TestUtil.java", "commitBeforeChange": "a4c0884f4909a7148eef43d80a79301d90c42921", "commitAfterChange": "04ac73525421db342cbea7b61068c93b1fac3e50", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t\t\tpublic boolean accept(File pathname)", "signatureAfterChange": " \t\t \t\tpublic boolean accept(File pathname)", "diff": ["-\t\t{", "-\t\t\tpublic boolean accept(File pathname)", "-\t\t\t{", "-\t\t\t\tIPath f = new Path( pathname.getAbsolutePath() );", "-", "-\t\t\t\tint nsegments = f.matchingFirstSegments( new Path(", "-\t\t\t\t\tgetPluginClassesDir() ) );", "-\t\t\t\tboolean ok = true;", "-\t\t\t\tint min = Math.min( f.segmentCount() - nsegments,", "-\t\t\t\t\tANNOTATIONS_PKG_PARTS.length );", "-\t\t\t\tfor( int i = nsegments, j = 0; j < min; i++, j++ )", "-\t\t\t\t{", "-\t\t\t\t\tif( !f.segment( i ).equals( ANNOTATIONS_PKG_PARTS[j] ) )", "-\t\t\t\t\t{", "-\t\t\t\t\t\tok = false;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn ok;", "-\t\t\t}", "+\t\t", "+\t\tpublic boolean accept(File pathname)", "+\t\t{", "+\t\t\tIPath f = new Path( pathname.getAbsolutePath() );", "+\t\t\tint nsegments = f.matchingFirstSegments( _binDir );", "+\t\t\tboolean ok = true;", "+\t\t\tint min = Math.min( f.segmentCount() - nsegments,", "+\t\t\t\t\t_packageParts.length );", "+\t\t\tfor( int i = nsegments, j = 0; j < min; i++, j++ )", "+\t\t\t{", "+\t\t\t\tif( !f.segment( i ).equals( _packageParts[j] ) )", "+\t\t\t\t{", "+\t\t\t\t\tok = false;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn ok;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89b9df135d10cf5423094b90f99b2a50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprotected int classpathContains( \t\tIClasspathEntry[] list, \t\tIClasspathEntry entry)", "signatureAfterChange": " \tprotected int classpathContains( \t\tIClasspathEntry[] list, \t\tIClasspathEntry entry)", "diff": ["+\t\tIPath[] inclusionPatterns = entry.getInclusionPatterns();", "+\t\t\t\t\t// check inclusion patterns", "+\t\t\t\t\tIPath[] otherIncludes = other.getInclusionPatterns();", "+\t\t\t\t\tif (inclusionPatterns != otherIncludes) {", "+\t\t\t\t\t    if (inclusionPatterns == null) continue;", "+\t\t\t\t\t\tint includeLength = inclusionPatterns.length;", "+\t\t\t\t\t\tif (otherIncludes == null || otherIncludes.length != includeLength)", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tfor (int j = 0; j < includeLength; j++) {", "+\t\t\t\t\t\t\t// compare toStrings instead of IPaths ", "+\t\t\t\t\t\t\t// since IPath.equals is specified to ignore trailing separators", "+\t\t\t\t\t\t\tif (!inclusionPatterns[j].toString().equals(otherIncludes[j].toString()))", "+\t\t\t\t\t\t\t\tcontinue nextEntry;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t    if (exclusionPatterns == null) continue;", "-\t\t\t\t\t\tif (otherExcludes.length != excludeLength)", "+\t\t\t\t\t\tif (otherExcludes == null || otherExcludes.length != excludeLength)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f98972999d9686af08244fc60c925c0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic boolean equals(Object object)", "signatureAfterChange": " \tpublic boolean equals(Object object)", "diff": ["+\t\t\tIPath[] otherIncludes = otherEntry.getInclusionPatterns();", "+\t\t\tif (this.inclusionPatterns != otherIncludes){", "+\t\t\t    if (this.inclusionPatterns == null) return false;", "+\t\t\t\tint includeLength = this.inclusionPatterns.length;", "+\t\t\t\tif (otherIncludes == null || otherIncludes.length != includeLength) ", "+\t\t\t\t\treturn false;", "+\t\t\t\tfor (int i = 0; i < includeLength; i++) {", "+\t\t\t\t\t// compare toStrings instead of IPaths ", "+\t\t\t\t\t// since IPath.equals is specified to ignore trailing separators", "+\t\t\t\t\tif (!this.inclusionPatterns[i].toString().equals(otherIncludes[i].toString()))", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\t    if (this.exclusionPatterns == null) return false;", "-\t\t\t\tif (otherExcludes.length != excludeLength) ", "+\t\t\t\tif (otherExcludes == null || otherExcludes.length != excludeLength) "]}], "num": 54632}
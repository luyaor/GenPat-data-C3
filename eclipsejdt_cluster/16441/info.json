{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cdc3c0c435409576e809abafa8c4bcf5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "740805f568f84cb0742c0d034b3b5e36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "105a4ca655d44213ffe23400e85e9364ac7516e4", "commitAfterChange": "3e28b00b3ff1ea2877f4a4e8b245ac6023e86b59", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tprivate ASTNode internalCreateAST(IProgressMonitor monitor)", "signatureAfterChange": " \t \tprivate ASTNode internalCreateAST(IProgressMonitor monitor)", "diff": ["+\t", "-\t\t\t\t\tchar[] source = null;", "-\t\t\t\t\tchar[][] packageName = null;", "-\t\t\t\t\tString fileName = null;", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit = null;", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tsource = this.compilationUnitSource.getSource().toCharArray();", "-\t\t\t\t\t\t} catch(JavaModelException e) {", "-\t\t\t\t\t\t\t// no source, then we cannot build anything", "-\t\t\t\t\t\t\tthrow new IllegalStateException();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tPackageFragment packageFragment = (PackageFragment)this.compilationUnitSource.getAncestor(IJavaElement.PACKAGE_FRAGMENT);", "-\t\t\t\t\t\tif (packageFragment != null){", "-\t\t\t\t\t\t\tpackageName = Util.toCharArrays(packageFragment.names);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tfileName = this.compilationUnitSource.getElementName();", "+\t\t\t\t\t\tsourceUnit = (org.eclipse.jdt.internal.compiler.env.ICompilationUnit) this.compilationUnitSource;", "-\t\t\t\t\t\tString sourceString = null;", "-\t\t\t\t\t\t\tsourceString = this.classFileSource.getSource();", "-\t\t\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t\t\t// nothing to do", "-\t\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\t\tif (sourceString == null) {", "-\t\t\t\t\t\t\tthrow new IllegalStateException();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tsource = sourceString.toCharArray();", "-\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tString sourceString = this.classFileSource.getSource();", "+\t\t\t\t\t\t\tif (sourceString == null) {", "+\t\t\t\t\t\t\t\tthrow new IllegalStateException();", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tpackageName = Util.toCharArrays(packageFragment.names);", "-\t\t\t\t\t\t\tfileName = type.sourceFileName(binaryType);", "+\t\t\t\t\t\t\tString fileName = type.sourceFileName(binaryType);", "+\t\t\t\t\t\t\tsourceUnit = new BasicCompilationUnit(sourceString.toCharArray(), Util.toCharArrays(packageFragment.names), fileName, this.project);", "+\t\t\t\t\t\t\t// class file doesn't exist", "-\t\t\t\t\t\tsource = this.rawSource;", "-\t\t\t\t\t\tif (this.unitName == null || this.project == null || this.compilerOptions == null) {", "-\t\t\t\t\t\t\tneedToResolveBindings = false;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tfileName = this.unitName;", "-\t\t\t\t\t\t\tneedToResolveBindings = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (source == null) {", "+\t\t\t\t\t\tneedToResolveBindings = this.unitName != null && this.project != null && this.compilerOptions != null;", "+\t\t\t\t\t\tsourceUnit = new BasicCompilationUnit(this.rawSource, null, this.unitName == null ? \"\" : this.unitName, this.project); //$NON-NLS-1$", "+\t\t\t\t\t} else {", "-\t\t\t\t\t}", "-\t\t\t\t\tif (this.sourceLength == -1) {", "-\t\t\t\t\t\tthis.sourceLength = source.length;", "-\t\t\t\t\t\t\t\t\tsource,", "-\t\t\t\t\t\t\t\t\tpackageName,", "-\t\t\t\t\t\t\t\t\tfileName,", "+\t\t\t\t\t\t\t\t\tsourceUnit,", "-\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\tsource,", "+\t\t\t\t\t\t\t\t\tsourceUnit,", "-\t\t\t\t\t\t\t\tsource,", "+\t\t\t\t\t\t\t\tsourceUnit,", "-\t\t\t\t\treturn convert(monitor, compilationUnitDeclaration, source, needToResolveBindings);", "+\t\t\t\t\treturn CompilationUnitResolver.convert(", "+\t\t\t\t\t\tcompilationUnitDeclaration, ", "+\t\t\t\t\t\tsourceUnit.getContents(), ", "+\t\t\t\t\t\tthis.apiLevel, ", "+\t\t\t\t\t\tthis.compilerOptions,", "+\t\t\t\t\t\tneedToResolveBindings,", "+\t\t\t\t\t\tthis.compilationUnitSource == null ? this.workingCopyOwner : this.compilationUnitSource.getOwner(),", "+\t\t\t\t\t\tneedToResolveBindings ? new DefaultBindingResolver.BindingTables() : null, ", "+\t\t\t\t\t\tmonitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88c7151f2a20c80a064adbae0ab292b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java", "commitBeforeChange": "1ffd93ec138fc38a22c082921b3ee25a9e75ba37", "commitAfterChange": "cef21f9db5e181946eac0a0d175b10763094848c", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \tprivate ASTNode internalCreateAST(IProgressMonitor monitor)", "signatureAfterChange": " \t \tprivate ASTNode internalCreateAST(IProgressMonitor monitor)", "diff": ["-\t\t\t\t\tIJavaElement element = null;", "-\t\t\t\t\tif (this.compilationUnitSource != null) {", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * this.compilationUnitSource is an instance of org.eclipse.jdt.internal.core.CompilationUnit that implements", "-\t\t\t\t\t\t * both org.eclipse.jdt.core.ICompilationUnit and org.eclipse.jdt.internal.compiler.env.ICompilationUnit", "-\t\t\t\t\t\t */ ", "-\t\t\t\t\t\tsourceUnit = (org.eclipse.jdt.internal.compiler.env.ICompilationUnit) this.compilationUnitSource;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * use a BasicCompilation that caches the source instead of using the compilationUnitSource directly", "-\t\t\t\t\t\t * (if it is a working copy, the source can change between the parse and the AST convertion)", "-\t\t\t\t\t\t * (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=75632)", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tsourceUnit = new BasicCompilationUnit(sourceUnit.getContents(), sourceUnit.getPackageName(), new String(sourceUnit.getFileName()), this.project);", "-\t\t\t\t\t\telement = this.compilationUnitSource;", "-\t\t\t\t\t} else if (this.classFileSource != null) {", "+\t\t\t\t\tWorkingCopyOwner wcOwner = this.workingCopyOwner;", "+\t\t\t\t\tif (this.typeRoot instanceof ICompilationUnit) {", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t * this.compilationUnitSource is an instance of org.eclipse.jdt.internal.core.CompilationUnit that implements", "+\t\t\t\t\t\t\t * both org.eclipse.jdt.core.ICompilationUnit and org.eclipse.jdt.internal.compiler.env.ICompilationUnit", "+\t\t\t\t\t\t\t */ ", "+\t\t\t\t\t\t\tsourceUnit = (org.eclipse.jdt.internal.compiler.env.ICompilationUnit) this.typeRoot;", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t * use a BasicCompilation that caches the source instead of using the compilationUnitSource directly", "+\t\t\t\t\t\t\t * (if it is a working copy, the source can change between the parse and the AST convertion)", "+\t\t\t\t\t\t\t * (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=75632)", "+\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\tsourceUnit = new BasicCompilationUnit(sourceUnit.getContents(), sourceUnit.getPackageName(), new String(sourceUnit.getFileName()), this.project);", "+\t\t\t\t\t\t\twcOwner = ((ICompilationUnit) this.typeRoot).getOwner();", "+\t\t\t\t\t} else if (this.typeRoot instanceof IClassFile) {", "-\t\t\t\t\t\t\tString sourceString = this.classFileSource.getSource();", "+\t\t\t\t\t\t\tString sourceString = this.typeRoot.getSource();", "-\t\t\t\t\t\t\tPackageFragment packageFragment = (PackageFragment) this.classFileSource.getParent();", "-\t\t\t\t\t\t\tBinaryType type = (BinaryType) this.classFileSource.getType();", "+\t\t\t\t\t\t\tPackageFragment packageFragment = (PackageFragment) this.typeRoot.getParent();", "+\t\t\t\t\t\t\tBinaryType type = (BinaryType) this.typeRoot.findPrimaryType();", "-\t\t\t\t\t\t\telement = this.classFileSource;", "-\t\t\t\t\t\tthis.compilationUnitSource == null ? this.workingCopyOwner : this.compilationUnitSource.getOwner(),", "+\t\t\t\t\t\twcOwner,", "-\t\t\t\t\tresult.setJavaElement(element);", "+\t\t\t\t\tresult.setTypeRoot(this.typeRoot);"]}], "num": 16441}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f73e480aeb9bb5d8078afa0729018cb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "689e5379e212f107b6c6206878ebc0ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 116, "signatureBeforeChange": " \tpublic void test0105() throws JavaModelException", "signatureAfterChange": " \tpublic void test0105() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"@interface Ann {}\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"@Ann public class X {}\\n\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tassertProblemsSize(compilationUnit, 0);", "-\t\t\tnode = getASTNode(compilationUnit, 1);", "-\t\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "-\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "-\t\t\tList modifiers = typeDeclaration.modifiers();", "-\t\t\tassertEquals(\"Wrong size\", 2, modifiers.size());", "-\t\t\tIExtendedModifier extendedModifier = (IExtendedModifier) modifiers.get(0);", "-\t\t\tassertTrue(\"Not a marker annotation\", extendedModifier instanceof MarkerAnnotation);", "-\t\t\tMarkerAnnotation markerAnnotation = (MarkerAnnotation) extendedModifier;", "-\t\t\tITypeBinding binding = markerAnnotation.resolveTypeBinding();", "-\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t\tName name = markerAnnotation.getTypeName();", "-\t\t\tbinding = name.resolveTypeBinding();", "-\t\t\tassertNotNull(\"No binding\", binding);", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"@interface Ann {}\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"@Ann public class X {}\\n\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/X.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tassertProblemsSize(compilationUnit, 0);", "+\t\tnode = getASTNode(compilationUnit, 1);", "+\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "+\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "+\t\tList modifiers = typeDeclaration.modifiers();", "+\t\tassertEquals(\"Wrong size\", 2, modifiers.size());", "+\t\tIExtendedModifier extendedModifier = (IExtendedModifier) modifiers.get(0);", "+\t\tassertTrue(\"Not a marker annotation\", extendedModifier instanceof MarkerAnnotation);", "+\t\tMarkerAnnotation markerAnnotation = (MarkerAnnotation) extendedModifier;", "+\t\tITypeBinding binding = markerAnnotation.resolveTypeBinding();", "+\t\tassertNotNull(\"No binding\", binding);", "+\t\tName name = markerAnnotation.getTypeName();", "+\t\tbinding = name.resolveTypeBinding();", "+\t\tassertNotNull(\"No binding\", binding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82cd07c21e86c73fce38ea9c0acd74ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "0e633ca1b1574b340ecc37b223f7ad4a327d24e1", "commitAfterChange": "882f4a412452cbe6d8e04ad004cc47e303c5c4e3", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 107, "signatureBeforeChange": " \tpublic void test0096() throws JavaModelException", "signatureAfterChange": " \tpublic void test0096() throws JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tString contents =", "-\t\t\t\t\"public @interface An1 {\\n\" +", "-\t\t\t\t\"\tString value();\\n\" +", "-\t\t\t\t\"\tString item() default \\\"Hello\\\";\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"@An1(value=\\\"X\\\") class A {\\n\" +", "-\t\t\t\t\"\t\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tworkingCopy = getWorkingCopy(\"/Converter15/src/An1.java\", true/*resolve*/);", "-\t\t\tASTNode node = buildAST(", "-\t\t\t\tcontents,", "-\t\t\t\tworkingCopy);", "-\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "-\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "-\t\t\tnode = getASTNode(compilationUnit, 1);", "-\t\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "-\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "-\t\t\tassertEquals(\"Wrong name\", \"A\", typeDeclaration.getName().getIdentifier());", "-\t\t\tList modifiers = typeDeclaration.modifiers();", "-\t\t\tassertEquals(\"Wrong size\", 1, modifiers.size());", "-\t\t\tIExtendedModifier modifier = (IExtendedModifier) modifiers.get(0);", "-\t\t\tassertTrue(\"Not an annotation\", modifier instanceof Annotation);", "-\t\t\tcheckSourceRange((Annotation) modifier, \"@An1(value=\\\"X\\\")\", contents.toCharArray());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tString contents =", "+\t\t\t\"public @interface An1 {\\n\" +", "+\t\t\t\"\tString value();\\n\" +", "+\t\t\t\"\tString item() default \\\"Hello\\\";\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"}\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"@An1(value=\\\"X\\\") class A {\\n\" +", "+\t\t\t\"\t\\n\" +", "+\t\t\t\"}\";", "+\t\tthis.workingCopy = getWorkingCopy(\"/Converter15/src/An1.java\", true/*resolve*/);", "+\t\tASTNode node = buildAST(", "+\t\t\tcontents,", "+\t\t\tthis.workingCopy);", "+\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\tnode = getASTNode(compilationUnit, 1);", "+\t\tassertEquals(\"Not a type declaration\", ASTNode.TYPE_DECLARATION, node.getNodeType());", "+\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) node;", "+\t\tassertEquals(\"Wrong name\", \"A\", typeDeclaration.getName().getIdentifier());", "+\t\tList modifiers = typeDeclaration.modifiers();", "+\t\tassertEquals(\"Wrong size\", 1, modifiers.size());", "+\t\tIExtendedModifier modifier = (IExtendedModifier) modifiers.get(0);", "+\t\tassertTrue(\"Not an annotation\", modifier instanceof Annotation);", "+\t\tcheckSourceRange((Annotation) modifier, \"@An1(value=\\\"X\\\")\", contents.toCharArray());"]}], "num": 32786}
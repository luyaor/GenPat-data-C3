{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d2c65f9c1a644ddecc2097de41609ae", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11f01f434dd1152b4f625d6429464a9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "bb811cafdba11489b23b9c8cd6c46c237bf0db24", "commitAfterChange": "2a64f816a9e1e382be3c6f39875e5c587a7235c0", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 28, "signatureBeforeChange": " private void writeCategoryTable(char[] categoryName, HashtableOfObject wordsToDocs, DataOutputStream stream) throws IOException", "signatureAfterChange": " private void writeCategoryTable(char[] categoryName, HashtableOfObject wordsToDocs, FileOutputStream stream) throws IOException", "diff": ["-private void writeCategoryTable(char[] categoryName, HashtableOfObject wordsToDocs, DataOutputStream stream) throws IOException {", "+private void writeCategoryTable(char[] categoryName, HashtableOfObject wordsToDocs, FileOutputStream stream) throws IOException {", "-\t\t\t\tvalues[i] = new Integer(stream.size());", "+\t\t\t\tvalues[i] = new Integer(this.streamEnd);", "-\tthis.categoryOffsets.put(categoryName, stream.size()); // remember the offset to the start of the table", "+\tthis.categoryOffsets.put(categoryName, this.streamEnd); // remember the offset to the start of the table", "-\tstream.writeInt(wordsToDocs.elementSize);", "+\twriteStreamInt(stream, wordsToDocs.elementSize);", "-\t\t\tUtil.writeUTF(stream, words[i]);", "+\t\t\twriteStreamChars(stream, words[i]);", "-\t\t\t\t\tstream.writeInt(-documentNumbers[0]); // store an array of 1 element by negating the documentNumber (can be zero)", "+\t\t\t\t\twriteStreamInt(stream, -documentNumbers[0]); // store an array of 1 element by negating the documentNumber (can be zero)", "-\t\t\t\tstream.writeInt(largeArraySize); // mark to identify that an offset follows", "-\t\t\t\tstream.writeInt(((Integer) o).intValue()); // offset in the file of the array of document numbers", "+\t\t\t\twriteStreamInt(stream, largeArraySize); // mark to identify that an offset follows", "+\t\t\t\twriteStreamInt(stream, ((Integer) o).intValue()); // offset in the file of the array of document numbers"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45cb9de7307e4885c589aca6cb816123", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "b501a050436f0ed4b21c2887b8c36095ae4a6672", "commitAfterChange": "b1617566bbecda597db8e35043fbdcfac0211c24", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " private synchronized HashtableOfObject readCategoryTable(char[] categoryName, boolean readDocNumbers) throws IOException", "signatureAfterChange": " private synchronized CategoryTable readCategoryTable(char[] categoryName, boolean readDocNumbers) throws IOException", "diff": ["-private synchronized HashtableOfObject readCategoryTable(char[] categoryName, boolean readDocNumbers) throws IOException {", "+private synchronized CategoryTable readCategoryTable(char[] categoryName, boolean readDocNumbers) throws IOException {", "-\t\tHashtableOfObject cachedTable = (HashtableOfObject) this.categoryTables.get(categoryName);", "+\t\tCategoryTable cachedTable = (CategoryTable) this.categoryTables.get(categoryName);", "-\tHashtableOfObject categoryTable = null;", "+\tCategoryTable categoryTable = null;", "-\t\t\tcategoryTable = new HashtableOfObject(size);", "+\t\t\tcategoryTable = new CategoryTable(size);", "-\t\t\t\tcategoryTable.put(word, new int[] {-arrayOffset}); // store 1 element array by negating documentNumber", "+\t\t\t\tcategoryTable.putUnsafely(word, new int[] {-arrayOffset}); // store 1 element array by negating documentNumber", "-\t\t\t\tcategoryTable.put(word, readStreamDocumentArray(stream, arrayOffset)); // read in-lined array providing size", "+\t\t\t\tcategoryTable.putUnsafely(word, readStreamDocumentArray(stream, arrayOffset)); // read in-lined array providing size", "-\t\t\t\tcategoryTable.put(word, new Integer(arrayOffset)); // offset to array in the file", "+\t\t\t\tcategoryTable.putUnsafely(word, new Integer(arrayOffset)); // offset to array in the file"]}], "num": 26457}
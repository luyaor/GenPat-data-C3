{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9f4a4310c3498ea65996a16030c648d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b134acce7676caadf429fdd05369cc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocArgumentExpression.java", "commitBeforeChange": "6cb1ee2c113971e09be9a0df169e31be32946ece", "commitAfterChange": "471f53ef0bd83fc3e916031568fa5c5d2d4e985d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["+\t\t\t\t} else if (typeRef instanceof QualifiedTypeReference) {", "+\t\t\t\t\tTypeBinding enclosingType = this.resolvedType.leafComponentType().enclosingType();", "+\t\t\t\t\tif (enclosingType != null) {", "+\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=233187", "+\t\t\t\t\t\t// inner type references should be fully qualified", "+\t\t\t\t\t\tint compoundLength = 2;", "+\t\t\t\t\t\twhile ((enclosingType = enclosingType.enclosingType()) != null) compoundLength++;", "+\t\t\t\t\t\tcompoundLength+=this.resolvedType.getPackage().compoundName.length;", "+\t\t\t\t\t\tif (typeRef.getTypeName().length != compoundLength) {", "+\t\t\t\t\t\t\tscope.problemReporter().javadocInvalidMemberTypeQualification(typeRef.sourceStart, typeRef.sourceEnd, scope.getDeclarationModifiers());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2ac5b2782721624d765056a2523887e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocFieldReference.java", "commitBeforeChange": "f3797939fa5164cd62a3ae51074dba1ccea759ff", "commitAfterChange": "0df341e86846b5d019d9adfde0716c02f828f524", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\t\tscope.problemReporter().javadocInvalidField(this, this.receiverType, scope.getDeclarationModifiers());", "-\t\t\treturn null;", "+\t\t\tif (this.receiverType instanceof ReferenceBinding) {", "+\t\t\t\tReferenceBinding refBinding = (ReferenceBinding) this.receiverType;", "+\t\t\t\tMethodBinding[] bindings = refBinding.getMethods(this.token);", "+\t\t\t\tif (bindings == null) {", "+\t\t\t\t\tscope.problemReporter().javadocInvalidField(this, this.receiverType, scope.getDeclarationModifiers());", "+\t\t\t\t\treturn null;", "+\t\t\t\t} ", "+\t\t\t\tswitch (bindings.length) {", "+\t\t\t\t\tcase 0:", "+\t\t\t\t\t\tscope.problemReporter().javadocInvalidField(this, this.receiverType, scope.getDeclarationModifiers());", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\tcase 1:", "+\t\t\t\t\t\tthis.binding = null;", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tscope.problemReporter().javadocAmbiguousMethodReference(this, scope.getDeclarationModifiers());", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 27117}
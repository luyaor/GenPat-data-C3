{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "325a2b25a8e75b6c63857d08cef10e37", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "990eac5435c4b449b2a987edcc50ee8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferenceLocator.java", "commitBeforeChange": "9170036b60b531a506b4ffe0efeda8e18d918bef", "commitAfterChange": "f8aee71b6b129d09f997301cd8500148a6feb325", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected int matchLevelForTokens(char[][] tokens)", "signatureAfterChange": " protected int matchLevelForTokens(char[][] tokens)", "diff": ["+\tchar[] packageName = null;", "+\tif (this.isCamelCase) {", "+\t\tpackageName = CharOperation.concatWith(tokens, '.');", "+\t\tif (CharOperation.camelCaseMatch(this.pattern.pkgName, packageName)) {", "+\t\t\treturn POSSIBLE_CAMELCASE_MATCH;", "+\t\t}", "+\t}", "+\t\t\tif (this.isCamelCase) break;", "-\t\t\tif (CharOperation.prefixEquals(this.pattern.pkgName, CharOperation.concatWith(tokens, '.'), this.isCaseSensitive))", "-\t\t\t\treturn POSSIBLE_MATCH;", "+\t\t\tif (packageName==null) packageName = CharOperation.concatWith(tokens, '.');", "+\t\t\tif (CharOperation.prefixEquals(this.pattern.pkgName, packageName, this.isCaseSensitive)) {", "+\t\t\t\treturn POSSIBLE_PREFIX_MATCH;", "+\t\t\t}", "-\t\t\tif (CharOperation.match(patternName, CharOperation.concatWith(tokens, '.'), this.isCaseSensitive))", "+\t\t\tif (packageName==null) packageName = CharOperation.concatWith(tokens, '.');", "+\t\t\tif (CharOperation.match(patternName, packageName, this.isCaseSensitive)) {", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase SearchPattern.R_REGEXP_MATCH :", "+\t\t\t// TODO (frederic) implement regular expression match"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d33a568e2800e6b36b0a91fffe03e0a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "55fc1d09be22c3edd63ee3458e199979c3f77613", "commitAfterChange": "84e7ccc666453bf6300ee2ec41ee2751e7c7737b", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " public void locateMatches(SearchDocument[] searchDocuments) throws CoreException", "signatureAfterChange": " public void locateMatches(SearchDocument[] searchDocuments) throws CoreException", "diff": ["+\tint progressLength = docsLength;", "+\tIJavaProject[] javaModelProjects = null;", "+\tif (this.searchPackageDeclaration) {", "+\t\tjavaModelProjects = JavaModelManager.getJavaModelManager().getJavaModel().getJavaProjects();", "+\t\tprogressLength += javaModelProjects.length;", "+\t}", "-\tint n = docsLength<1000 ? Math.min(Math.max(docsLength/200+1, 2),4) : 5 *(docsLength/1000);", "-\tthis.progressStep = docsLength < n ? 1 : docsLength / n; // step should not be 0", "+\tint n = progressLength<1000 ? Math.min(Math.max(progressLength/200+1, 2),4) : 5 *(progressLength/1000);", "+\tthis.progressStep = progressLength < n ? 1 : progressLength / n; // step should not be 0", "+\t\tSearchParticipant searchParticipant = null;", "+\t\t\tif (searchParticipant == null) {", "+\t\t\t\tsearchParticipant = searchDocument.getParticipant();", "+\t\t\t}", "-\t\t} ", "+\t\t}", "+", "+\t\tif (this.searchPackageDeclaration) {", "+\t\t\tlocatePackageDeclarations(searchParticipant, javaModelProjects);", "+\t\t}"]}], "num": 69376}
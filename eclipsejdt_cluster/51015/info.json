{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff3d3612dce4a42f4b4bc72a87d31846", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "591cb28cb97e95a147d39917561a16e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "0574a8adbdf81e334e9d9100de29641afab2bba5", "commitAfterChange": "7186c730d487753734b0547672e890b50fededb4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": "   \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t} else { // cf. MessageSend.generateCode()", "+\t\t} else { // cf. MessageSend.generateCode()'s call to CodeStream.getConstantPoolDeclaringClass. We have extracted the relevant portions sans side effect here. ", "-\t\t\t\tTypeBinding declaringClass = CodeStream.getConstantPoolDeclaringClass(currentScope, this.binding, this.lhs.resolvedType, false);", "-\t\t\t\tif (declaringClass instanceof ReferenceBinding)", "-\t\t\t\t\tthis.binding.declaringClass = (ReferenceBinding) declaringClass;", "+\t\t\t\tif (TypeBinding.notEquals(this.binding.declaringClass, this.lhs.resolvedType.erasure())) {", "+\t\t\t\t\tif (!this.binding.declaringClass.canBeSeenBy(currentScope)) {", "+\t\t\t\t\t\tthis.binding = new MethodBinding(this.binding, (ReferenceBinding) this.lhs.resolvedType.erasure());", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca482193800ad01a2410e2960471e40e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocQualifiedTypeReference.java", "commitBeforeChange": "1ad299c6e46ed5abccc52b588c8064972a8a8007", "commitAfterChange": "9161de43572385b89c05cb5fcdc58a0f1e197e80", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["-\t\tconstant = Constant.NotAConstant;", "-\t\tif (resolvedType != null) // is a shared type reference which was already resolved", "-\t\t\treturn resolvedType.isValidBinding() ? resolvedType : null; // already reported error", "+\t\tthis.constant = Constant.NotAConstant;", "+\t\tif (this.resolvedType != null) // is a shared type reference which was already resolved", "+\t\t\treturn this.resolvedType.isValidBinding() ? this.resolvedType : null; // already reported error", "-\t\tresolvedType = getTypeBinding(scope);", "-\t\tif (!resolvedType.isValidBinding()) {", "-\t\t\tBinding binding = scope.getTypeOrPackage(tokens);", "+\t\tthis.resolvedType = getTypeBinding(scope);", "+\t\tif (!this.resolvedType.isValidBinding()) {", "+\t\t\tBinding binding = scope.getTypeOrPackage(this.tokens);", "-\t\t\t\tpackageBinding = (PackageBinding) binding;", "+\t\t\t\tthis.packageBinding = (PackageBinding) binding;", "-\t\tif (isTypeUseDeprecated(resolvedType, scope))", "-\t\t\treportDeprecatedType(scope);", "-\t\tif (resolvedType instanceof ParameterizedTypeBinding) {", "-\t\t\tresolvedType = ((ParameterizedTypeBinding)resolvedType).type;", "+\t\tif (isTypeUseDeprecated(this.resolvedType, scope))", "+\t\t\treportDeprecatedType(this.resolvedType, scope);", "+\t\tif (this.resolvedType instanceof ParameterizedTypeBinding) {", "+\t\t\tthis.resolvedType = ((ParameterizedTypeBinding)this.resolvedType).type;", "-\t\treturn resolvedType;", "+\t\treturn this.resolvedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e40c77a7626b554da7184ca2490c9901", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "2b5adfd5bdf5a370e30eef7cf60813025897bdd3", "commitAfterChange": "6c719f0e5c9d00da68797ddc3b13bec6943a8d9c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": " protected boolean matchIndexEntry()", "signatureAfterChange": " protected boolean matchIndexEntry()", "diff": ["+\tif (this.checkOnlySuperinterfaces)", "+\t\tif (this.decodedSuperClassOrInterface != IIndexConstants.INTERFACE_SUFFIX) return false;", "-\t/* check type name matches */", "-\tif (superSimpleName != null){", "-\t\tswitch(matchMode){", "+\tif (this.superSimpleName != null) {", "+\t\tswitch(matchMode) {", "-\t\t\t\tif (!CharOperation.equals(superSimpleName, decodedSuperSimpleName, isCaseSensitive)){", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\t\t\treturn CharOperation.equals(this.superSimpleName, this.decodedSuperSimpleName, this.isCaseSensitive);", "-\t\t\t\tif (!CharOperation.prefixEquals(superSimpleName, decodedSuperSimpleName, isCaseSensitive)){", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\t\t\treturn CharOperation.prefixEquals(this.superSimpleName, this.decodedSuperSimpleName, this.isCaseSensitive);", "-\t\t\t\tif (!CharOperation.match(superSimpleName, decodedSuperSimpleName, isCaseSensitive)){", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "+\t\t\t\treturn CharOperation.match(this.superSimpleName, this.decodedSuperSimpleName, this.isCaseSensitive);"]}], "num": 51015}
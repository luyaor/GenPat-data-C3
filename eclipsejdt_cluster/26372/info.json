{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c45184ade2473753b8e581cc5b4993ca", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b726acc28824600e42ac122d25999b47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "7560640d61f8673c0bdcc6e3d95d6a5f677e0190", "commitAfterChange": "7fbc4da79ec0a9ef14be7ae27876f0928711c53f", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tfinal void doTextInsert(int offset, String insertString, TextEditGroup editGroup)", "signatureAfterChange": " \t \tfinal void doTextInsert(int offset, String insertString, TextEditGroup editGroup)", "diff": ["+\t\t\t// bug fix for 95839: problem with inserting at the end of a line comment", "+\t\t\tif (this.lineCommentEndOffsets.isEndOfLineComment(offset, this.content)) {", "+\t\t\t\tif (!insertString.startsWith(getLineDelimiter())) {", "+\t\t\t\t\tTextEdit edit= new InsertEdit(offset, getLineDelimiter());  // add a line delimiter", "+\t\t\t\t\taddEdit(edit);", "+\t\t\t\t\tif (editGroup != null) {", "+\t\t\t\t\t\taddEditGroup(editGroup, edit);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tthis.lineCommentEndOffsets.remove(offset); // only one line delimiter per line comment required", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0f14b5303781cbcb29a092a1e150831", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/AptConfigurationBlock.java", "commitBeforeChange": "3afec0fe69ebf611aef25566e9f2867c88dc9b66", "commitAfterChange": "7e373723161c71c5d5edc915bc1dcda42c748d81", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t@Override \tprotected String[] getFullBuildDialogStrings(boolean workspaceSettings)", "signatureAfterChange": " \t@Override \tprotected String[] getFullBuildDialogStrings(boolean workspaceSettings)", "diff": ["-\t\treturn workspaceSettings ? null : super.getFullBuildDialogStrings(workspaceSettings);", "+\t\tif (workspaceSettings)", "+\t\t\treturn null;", "+\t\t// if the only thing that changed was the reconcile setting, return null: a rebuild is not necessary", "+\t\tif (fOriginalGenSrcDir.equals(fGenSrcDirField.getText())) {", "+\t\t\tif (fOriginalAptEnabled == fAptEnabledField.isSelected()) {", "+\t\t\t\tif (!procOptionsChanged()) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn super.getFullBuildDialogStrings(workspaceSettings);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f89f6a13ef40b22f5d677afb731eb8a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java", "commitBeforeChange": "756bb6bed26516f6a7f37d505e2052383d6cc457", "commitAfterChange": "4859598654fee7e1f981761dd77f16f864bb4009", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic boolean isEqualTo(IBinding other)", "signatureAfterChange": " \tpublic boolean isEqualTo(IBinding other)", "diff": ["-\t\t\treturn BindingComparator.isEqual(this.binding, otherBinding);", "+\t\t\tif (BindingComparator.isEqual(this.binding, otherBinding)) {", "+\t\t\t\tIMethodBinding declaringMethod = this.getDeclaringMethod();", "+\t\t\t\tIMethodBinding otherDeclaringMethod = ((VariableBinding) other).getDeclaringMethod();", "+\t\t\t\tif (declaringMethod == null) {", "+\t\t\t\t\tif (otherDeclaringMethod != null) {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\treturn declaringMethod.isEqualTo(otherDeclaringMethod);", "+\t\t\t}", "+\t\t\treturn false;"]}], "num": 26372}
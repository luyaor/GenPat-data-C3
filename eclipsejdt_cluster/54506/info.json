{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9df5e9eb6a60c4c7a2f15d34a37012cb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3933d4fa71fd549035dd925af7c5cf04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tprivate void buildMethods()", "signatureAfterChange": " \t \tprivate void buildMethods()", "diff": ["-\t\tif (referenceContext.methods == null) {", "-\t\t\treferenceContext.binding.methods = NoMethods;", "-\t\t\treturn;", "+\t\t", "+\t\t// iterate the method declarations to create the bindings", "+\t\tint bindingCount;", "+\t\tAbstractMethodDeclaration[] methods = referenceContext.methods;", "+\t\tint size = methods == null ? 0 : methods.length;", "+\t\tboolean isEnum = referenceContext.getKind() == IGenericType.ENUM;", "+\t\tif (isEnum) {", "+\t\t\t// reserve 2 slots for special enum methods: #values() and #valueOf(String)", "+\t\t\tbindingCount = 2;", "+\t\t} else {", "+\t\t\tif (size == 0) {", "+\t\t\t\treferenceContext.binding.methods = NoMethods;", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tbindingCount = 0;", "-\t\t// iterate the method declarations to create the bindings", "-\t\tAbstractMethodDeclaration[] methods = referenceContext.methods;", "-\t\tint size = methods.length;", "+\t\t// look for <clinit> method", "-\t\t\tif (methods[i] instanceof Clinit) {", "+\t\t\tif (methods[i].isClinit()) {", "-\t\tMethodBinding[] methodBindings = new MethodBinding[clinitIndex == -1 ? size : size - 1];", "-", "-\t\tint count = 0;", "+\t\tMethodBinding[] methodBindings = new MethodBinding[(clinitIndex == -1 ? size : size - 1) + bindingCount/*reserve room for special enum methods*/];", "+\t\t// create special methods for enums", "+\t\tif (isEnum) {", "+\t\t    SourceTypeBinding sourceType = referenceContext.binding;", "+\t\t\tmethodBindings[0] = sourceType.addSyntheticEnumMethod(TypeConstants.VALUES); // add <EnumType>[] values() ", "+\t\t\tmethodBindings[1] = sourceType.addSyntheticEnumMethod(TypeConstants.VALUEOF); // add <EnumType> valueOf() ", "+\t\t}", "+\t\t// create bindings for source methods", "-\t\t\t\t\tmethodBindings[count++] = methodBinding;", "+\t\t\t\t\tmethodBindings[bindingCount++] = methodBinding;", "-\t\tif (count != methodBindings.length)", "-\t\t\tSystem.arraycopy(methodBindings, 0, methodBindings = new MethodBinding[count], 0, count);", "+\t\tif (bindingCount != methodBindings.length)", "+\t\t\tSystem.arraycopy(methodBindings, 0, methodBindings = new MethodBinding[bindingCount], 0, bindingCount);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49410465af93dbbf9e562bd726995e89", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void resolve(MethodScope methScope)", "signatureAfterChange": " \tpublic void resolve(MethodScope methScope)", "diff": ["-\t\t\t\t\t\tif (messageSend.binding != null && messageSend.binding.isValidBinding()) {", "-\t\t\t\t\t\t\tif (methDecl.binding.declaringClass.isCompatibleWith(messageSend.actualReceiverType) &&", "+\t\t\t\t\t\tif (messageSend.binding != null && messageSend.binding.isValidBinding() && messageSend.actualReceiverType instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\tReferenceBinding methodReceiverType = (ReferenceBinding) messageSend.actualReceiverType;", "+\t\t\t\t\t\t\tif ((methodReceiverType.isSuperclassOf(methDecl.binding.declaringClass) || (methodReceiverType.isInterface() && methDecl.binding.declaringClass.implementsInterface(methodReceiverType, true))) &&", "-\t\t\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParametersCompatibleWith(messageSend.binding.parameters);", "+\t\t\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParameterErasuresEqual(messageSend.binding);", "+\t\t// Look at @Override annotations", "+\t\tif (!superRef && methDecl != null && methDecl.annotations != null) {", "+\t\t\tint length = methDecl.annotations.length;", "+\t\t\tfor (int i=0; i<length && !superRef; i++) {", "+\t\t\t\tsuperRef = (methDecl.binding.tagBits & TagBits.AnnotationOverride) != 0;", "+\t\t\t}", "+\t\t}", "+\t\t"]}], "num": 54506}
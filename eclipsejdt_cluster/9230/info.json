{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7b7474399e0740aa0e66a907e770defd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f3e768f68c81c329bd1678f92bb2542", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileFinder.java", "commitBeforeChange": "1fd4391b9d956e4b222e75746a12248fe673ae09", "commitAfterChange": "0ac06ace387f6f7ca79dcd41a12a6564b157c4e4", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public void find(File f, String pattern, boolean verbose)", "signatureAfterChange": " \t public static String[] find(File f, String pattern)", "diff": ["-\tpublic int count = 0;", "-public void find(File f, String pattern, boolean verbose) {", "-\tif (verbose) {", "-\t\tSystem.out.println(Main.bind(\"scanning.start\",f.getAbsolutePath())); //$NON-NLS-1$", "-\t}", "-\tfind0(f, pattern, verbose);", "-\tSystem.arraycopy(this.resultFiles, 0, (this.resultFiles = new String[this.count]), 0, this.count);", "+\t", "+public static String[] find(File f, String pattern) {", "+\tArrayList files = new ArrayList();", "+\tfind0(f, pattern, files);", "+\tString[] result = new String[files.size()];", "+\tfiles.toArray(result);", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d553490704dee72288b28132d0d9b3c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SortCompilationUnitElementsTests.java", "commitBeforeChange": "c643d728d2e9e02e64e38383ffd6f16606630706", "commitAfterChange": "63388558ea06565be17a1534cd08a874e27b0880", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void sortUnit(ICompilationUnit unit) throws CoreException", "signatureAfterChange": " private void sortUnit(ICompilationUnit unit) throws CoreException", "diff": ["+}", "+private void sortUnit(ICompilationUnit unit) throws CoreException {", "+\tdebug(unit, \"BEFORE\");", "+\tJavaCompilationUnitSorter.sort(new ICompilationUnit[] { unit }, new DefaultJavaElementComparator(), new NullProgressMonitor());", "+\tString sortedSource = unit.getBuffer().getContents();", "+\tJavaCompilationUnitSorter.sort(new ICompilationUnit[] { unit }, new DefaultJavaElementComparator(), new NullProgressMonitor());", "+\tString sortedSource2 = unit.getBuffer().getContents();", "+\tdebug(unit, \"AFTER\");", "+\tassertEquals(\"Different output\", sortedSource, sortedSource2);", "+}", "-public void sortUnit(ICompilationUnit unit) throws CoreException {", "-\tString source = unit.getBuffer().getContents();", "-\tSystem.out.println(\"========================== BEFORE ==============================\");", "-\tSystem.out.println(source);", "-\tSystem.out.println(\"========================== BEFORE ==============================\");", "-\tSystem.out.println(\"========================== AFTER  ==============================\");", "-\tJavaCompilationUnitSorter.sort(new ICompilationUnit[] { unit }, new DefaultJavaElementComparator(), new NullProgressMonitor());", "-\tsource = unit.getBuffer().getContents();", "-\tSystem.out.println(source);", "-\tSystem.out.println(\"========================== AFTER  ==============================\");"]}], "num": 9230}
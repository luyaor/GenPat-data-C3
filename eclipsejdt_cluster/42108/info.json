{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "90fd409877767bab1dc8e82f88027249", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ba78aff959a2c0de7c749c61f741704", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "ae0b30b76dcbe89d5bd08d53d907ae7218823168", "commitAfterChange": "cbe2b622e81a27ceffd382724966e1dd065a9d5c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void resolve(BlockScope scope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_8 && argument.isPolyExpression())", "-\t\t\t\t\t\tthis.innersNeedUpdate = true;", "+\t\t\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_8 && argument.isPolyExpression()) {", "+\t\t\t\t\t\tif (this.innerInferenceHelper == null)", "+\t\t\t\t\t\t\tthis.innerInferenceHelper = new InnerInferenceHelper();", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a50615cc13945426507eed42cf1be627", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "ae0b30b76dcbe89d5bd08d53d907ae7218823168", "commitAfterChange": "cbe2b622e81a27ceffd382724966e1dd065a9d5c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate TypeBinding resolveTypeForQualifiedAllocationExpression(BlockScope scope)", "signatureAfterChange": " \t \tprivate TypeBinding resolveTypeForQualifiedAllocationExpression(BlockScope scope)", "diff": ["-\t\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_8 && argument.isPolyExpression())", "-\t\t\t\t\tthis.innersNeedUpdate = true;", "+\t\t\t\tif (sourceLevel >= ClassFileConstants.JDK1_8 && argument.isPolyExpression()) {", "+\t\t\t\t\tif (this.innerInferenceHelper == null)", "+\t\t\t\t\t\tthis.innerInferenceHelper = new InnerInferenceHelper();", "+\t\t\t\t}"]}], "num": 42108}
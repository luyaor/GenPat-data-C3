{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "42d73f2c74a1108466714b1add5ef85d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15665165ef9bd6428c1a06c37b31151a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "7548eaaea6e1259875e63eaf19dcd9a6bb7fd118", "commitAfterChange": "3d5aa7d7eabaf3445aad76f168f1c9da2ba34591", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void add(IJavaElement element, IJavaProject project) throws JavaModelException", "signatureAfterChange": " public void add(IJavaElement element) throws JavaModelException", "diff": ["- */", "-public void add(IJavaElement element, IJavaProject project) throws JavaModelException {", "-\tIPackageFragmentRoot root = null;", "+\tIPath containerPath = null;", "-\t\t\tif (project == null)", "-\t\t\t\tadd((JavaProject)element, null, includeMask, new HashSet(2), null);", "-\t\t\telse", "-\t\t\t\tadd((JavaProject)project, element.getPath(), includeMask, new HashSet(2), null);", "+\t\t\tadd((JavaProject)element, null, includeMask, new HashSet(2), null);", "-\t\t\troot = (IPackageFragmentRoot)element;", "-\t\t\tif (project == null)", "-\t\t\t\tadd(root.getPath().toString(), true, null);", "-\t\t\telse", "-\t\t\t\tadd((JavaProject)project, root.getPath(), includeMask, new HashSet(2), null);", "+\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)element;", "+\t\t\tIPath rootPath = root.getPath();", "+\t\t\tcontainerPath = root.getKind() == IPackageFragmentRoot.K_SOURCE ? root.getParent().getPath() : rootPath;", "+\t\t\tadd(rootPath.toString(), containerPath.toString(), true, null);", "-\t\t\t\tIPath path = root.getPath().append(new Path(relativePath));", "-\t\t\t\tif (project == null)", "-\t\t\t\t\tadd(path.toString(), false, null);", "-\t\t\t\telse", "-\t\t\t\t\tadd((JavaProject)project, path, includeMask, new HashSet(2), null);", "+\t\t\t\tcontainerPath = root.getPath();", "+\t\t\t\tIPath path = containerPath.append(new Path(relativePath));", "+\t\t\t\tadd(path.toString(), containerPath.toString(), false, null);", "-\t\t\t\t\tif (project == null)", "-\t\t\t\t\t\tadd(resource.getFullPath().toString(), false, null);", "-\t\t\t\t\telse", "-\t\t\t\t\t\tadd((JavaProject)project, resource.getFullPath(), includeMask, new HashSet(2), null);", "+\t\t\t\t\tcontainerPath = root.getKind() == IPackageFragmentRoot.K_SOURCE ? root.getParent().getPath() : root.getPath();", "+\t\t\t\t\tadd(resource.getFullPath().toString(), containerPath.toString(), false, null);", "-\t\t\tadd(fullPath(element), true, null);", "-\t\t\t", "-\t\t\t// find package fragment root including this java element", "-\t\t\tIJavaElement parent = element.getParent();", "-\t\t\twhile (parent != null && !(parent instanceof IPackageFragmentRoot)) {", "-\t\t\t\tparent = parent.getParent();", "-\t\t\t}", "-\t\t\tif (parent instanceof IPackageFragmentRoot) {", "-\t\t\t\troot = (IPackageFragmentRoot)parent;", "-\t\t\t}", "+\t\t\troot = (IPackageFragmentRoot) element.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);", "+\t\t\tcontainerPath = root.getKind() == IPackageFragmentRoot.K_SOURCE ? root.getParent().getPath() : root.getPath();", "+\t\t\tadd(fullPath(element), containerPath.toString(), true, null);", "-\tif (root != null) {", "-\t\tif (root.getKind() == IPackageFragmentRoot.K_BINARY) {", "-\t\t\tthis.addEnclosingProjectOrJar(root.getPath());", "-\t\t} else {", "-\t\t\tthis.addEnclosingProjectOrJar(root.getJavaProject().getProject().getFullPath());", "-\t\t}", "-\t}", "+\tif (containerPath != null)", "+\t\taddEnclosingProjectOrJar(containerPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93ed44cd5dacbf0c3c0d02e8de98a641", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "ca1c70fe619bd146613895fa764af2d040529e30", "commitAfterChange": "0ae44cb94fd5970ee99a6625f01c4e21cfef9943", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r private boolean updateCurrentDeltaAndIndex(IResourceDelta delta, int elementType, IJavaProject project) throws JavaModelException", "signatureAfterChange": "\r private boolean updateCurrentDeltaAndIndex(IResourceDelta delta, int elementType, IJavaProject project) throws JavaModelException", "diff": ["-\t\t\t} else if (elementType == IJavaElement.JAVA_PROJECT\r", "-\t\t\t\t\t&& (flags & IResourceDelta.OPEN) != 0) {\r", "-\t\t\t\t// project has been opened or closed\r", "-\t\t\t\tIProject res = (IProject)delta.getResource();\r", "-\t\t\t\telement = this.createElement(res, elementType, project);\r", "-\t\t\t\tif (element == null) throw newInvalidElementType();\r", "-\t\t\t\tif (res.isOpen()) {\r", "-\t\t\t\t\tthis.elementOpened(element, delta);\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tthis.elementClosed(element, delta);\r", "+\t\t\t} else if (elementType == IJavaElement.JAVA_PROJECT) {\r", "+\t\t\t\tif ((flags & IResourceDelta.OPEN) != 0) {\r", "+\t\t\t\t\t// project has been opened or closed\r", "+\t\t\t\t\tIProject res = (IProject)delta.getResource();\r", "+\t\t\t\t\telement = this.createElement(res, elementType, project);\r", "+\t\t\t\t\tif (element == null) throw newInvalidElementType();\r", "+\t\t\t\t\tif (res.isOpen()) {\r", "+\t\t\t\t\t\tif (this.hasJavaNature(res)) {\r", "+\t\t\t\t\t\t\tthis.elementAdded(element, delta);\r", "+\t\t\t\t\t\t\tthis.indexManager.indexAll(res);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tJavaModel javaModel = JavaModelManager.getJavaModelManager().getJavaModel();\r", "+\t\t\t\t\t\tboolean wasJavaProject = javaModel.findJavaProject(res) != null;\r", "+\t\t\t\t\t\tif (wasJavaProject) {\r", "+\t\t\t\t\t\t\tthis.elementRemoved(element, delta);\r", "+\t\t\t\t\t\t\tthis.indexManager.removeIndex(res.getFullPath());\r", "+\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\treturn false; // when a project is open/closed don't process children\r", "-\t\t\t\tthis.updateIndex(element, delta);\r", "-\t\t\t\treturn false; // when a project is open/closed don't process children\r", "+\t\t\t\tif ((flags & IResourceDelta.DESCRIPTION) != 0) {\r", "+\t\t\t\t\tIProject res = (IProject)delta.getResource();\r", "+\t\t\t\t\tJavaModel javaModel = JavaModelManager.getJavaModelManager().getJavaModel();\r", "+\t\t\t\t\tboolean wasJavaProject = javaModel.findJavaProject(res) != null;\r", "+\t\t\t\t\tboolean isJavaProject = this.hasJavaNature(res);\r", "+\t\t\t\t\tif (wasJavaProject != isJavaProject) {\r", "+\t\t\t\t\t\t// project's nature has been added or removed\r", "+\t\t\t\t\t\telement = this.createElement(res, elementType, project);\r", "+\t\t\t\t\t\tif (element == null) throw newInvalidElementType();\r", "+\t\t\t\t\t\tif (isJavaProject) {\r", "+\t\t\t\t\t\t\tthis.elementAdded(element, delta);\r", "+\t\t\t\t\t\t\tthis.indexManager.indexAll(res);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tthis.elementRemoved(element, delta);\r", "+\t\t\t\t\t\t\tthis.indexManager.removeIndex(res.getFullPath());\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\treturn false; // when a project's nature is added/removed don't process children\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a484ed44b9d95b43f9b4ea8296ba2e07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "de1a896ae0cf9cc7fdee8ce3aebee48242ef244b", "commitAfterChange": "38590129939501d58d89738289276afaa02e2706", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public void add(IJavaElement element) throws JavaModelException", "signatureAfterChange": "\r public void add(IJavaElement element) throws JavaModelException", "diff": ["-\tif (element instanceof IJavaProject) {\r", "-\t\tthis.add((IJavaProject)element, true, new HashSet(2));\r", "-\t} else if (element instanceof IPackageFragmentRoot) {\r", "-\t\troot = (IPackageFragmentRoot)element;\r", "-\t\tthis.add(root.getPath(), true);\r", "-\t} else if (element instanceof IPackageFragment) {\r", "-\t\troot = (IPackageFragmentRoot)element.getParent();\r", "-\t\tif (root.isArchive()) {\r", "-\t\t\tthis.add(root.getPath().append(new Path(element.getElementName().replace('.', '/'))), false);\r", "-\t\t} else {\r", "+\tswitch (element.getElementType()) {\r", "+\t\tcase IJavaElement.JAVA_MODEL:\r", "+\t\t\t// a workspace sope should be used\r", "+\t\t\tbreak; \r", "+\t\tcase IJavaElement.JAVA_PROJECT:\r", "+\t\t\tthis.add((IJavaProject)element, true, new HashSet(2));\r", "+\t\t\tbreak;\r", "+\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT:\r", "+\t\t\troot = (IPackageFragmentRoot)element;\r", "+\t\t\tthis.add(root.getPath(), true);\r", "+\t\t\tbreak;\r", "+\t\tcase IJavaElement.PACKAGE_FRAGMENT:\r", "+\t\t\troot = (IPackageFragmentRoot)element.getParent();\r", "+\t\t\tif (root.isArchive()) {\r", "+\t\t\t\tthis.add(root.getPath().append(new Path(element.getElementName().replace('.', '/'))), false);\r", "+\t\t\t} else {\r", "+\t\t\t\tIResource resource = element.getUnderlyingResource();\r", "+\t\t\t\tif (resource != null && resource.isAccessible()) {\r", "+\t\t\t\t\tthis.add(resource.getFullPath(), false);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tdefault:\r", "-\t\t\t\tthis.add(resource.getFullPath(), false);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t} else {\r", "-\t\tIResource resource = element.getUnderlyingResource();\r", "-\t\tif (resource != null && resource.isAccessible()) {\r", "-\t\t\tthis.add(resource.getFullPath(), true);\r", "-\t\t\t\r", "-\t\t\t// find package fragment root including this java element\r", "-\t\t\tIJavaElement parent = element.getParent();\r", "-\t\t\twhile (parent != null && !(parent instanceof IPackageFragmentRoot)) {\r", "-\t\t\t\tparent = parent.getParent();\r", "-\t\t\t}\r", "-\t\t\tif (parent instanceof IPackageFragmentRoot) {\r", "-\t\t\t\troot = (IPackageFragmentRoot)parent;\r", "-\t\t\t}\r", "-\t\t}\t\r", "+\t\t\t\t// remember sub-cu (or sub-class file) java elements\r", "+\t\t\t\tif (element instanceof IMember) {\r", "+\t\t\t\t\tif (this.elements == null) {\r", "+\t\t\t\t\t\tthis.elements = new ArrayList();\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tthis.elements.add(element);\r", "+\t\t\t\t}\r", "+\t\t\t\tthis.add(resource.getFullPath(), true);\r", "+\t\t\t\t\r", "+\t\t\t\t// find package fragment root including this java element\r", "+\t\t\t\tIJavaElement parent = element.getParent();\r", "+\t\t\t\twhile (parent != null && !(parent instanceof IPackageFragmentRoot)) {\r", "+\t\t\t\t\tparent = parent.getParent();\r", "+\t\t\t\t}\r", "+\t\t\t\tif (parent instanceof IPackageFragmentRoot) {\r", "+\t\t\t\t\troot = (IPackageFragmentRoot)parent;\r", "+\t\t\t\t}\r", "+\t\t\t}\t\r"]}], "num": 62703}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d31ae24dec5390b5864424f29e87892", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf72aa5fa918506d9276a2f5b74fa5d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "bd4e463e70c48341a4facb3eb15798b9401bc413", "commitAfterChange": "cd5244314444ffca85021f9f3028441800f62a51", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "signatureAfterChange": " \t \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "diff": ["-", "+\t", "-\t\t\t\t\tif (oneParam.leafComponentType().isRawType()) {", "-\t\t\t\t\t\t// A#RAW is not more specific than a rawified A<T>", "-\t\t\t\t\t\tif (oneParam == one.original().parameters[i] && oneParam != two.original().parameters[i])", "+\t\t\t\t\tif (twoParam.leafComponentType().isRawType()) {", "+\t\t\t\t\t\t// must detect & reject this case", "+\t\t\t\t\t\t// when Y<U> extends X<U>", "+\t\t\t\t\t\t// void foo(Y y) {}", "+\t\t\t\t\t\t// <T extends X<Object>> void foo(T t) {}", "+\t\t\t\t\t\t// foo(T) will show up as foo(Y#RAW) and not foo(X#RAW)", "+\t\t\t\t\t\t// Y#RAW is not more specific than a rawified X<T>", "+\t\t\t\t\t\tif (oneParam == one.original().parameters[i]", "+\t\t\t\t\t\t\t\t&&  twoParam.leafComponentType().erasure() != two.original().parameters[i].leafComponentType().erasure()) {", "+\t\t\t\t\t\t}", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (oneParam.isCompatibleWith(twoParam)) {", "+\t\t\t\t} else if (oneParam.isCompatibleWith(twoParam)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e78847c1e9096d635eee0a7fa6b1b908", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "36953857ec204432ce079b8cdc9bdf8b23fc1bb7", "commitAfterChange": "a6d256122ce87d40be01c47655a9ce23e12ad61a", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "signatureAfterChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "diff": ["-\t\t\t\tif (oneParam == twoParam) continue;", "-\t\t\t\tif (oneParam.isRawType()) {", "-\t\t\t\t\tTypeBinding match = oneParam.findSuperTypeWithSameErasure(twoParam);", "-\t\t\t\t\tif (match != twoParam)", "-\t\t\t\t\t\treturn false;", "+\t\t\t\tif (oneParam == twoParam) {", "+\t\t\t\t\tif (oneParam.leafComponentType().isRawType()) {", "+\t\t\t\t\t\t// A#RAW is not more specific than a rawified A<T>", "+\t\t\t\t\t\tif (oneParam == one.original().parameters[i] && oneParam != two.original().parameters[i])", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\tcontinue;", "-\t\t\t\tif (!oneParam.isCompatibleWith(twoParam)) {", "+\t\t\t\tif (oneParam.isCompatibleWith(twoParam)) {", "+\t\t\t\t\tif (oneParam.leafComponentType().isRawType()) {", "+\t\t\t\t\t\tif (oneParam.needsUncheckedConversion(twoParam))", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t// A#RAW is not more specific than a rawified A<T>", "+\t\t\t\t\t\tif (oneParam == one.original().parameters[i] && twoParam != two.original().parameters[i])", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t} else {"]}], "num": 69467}
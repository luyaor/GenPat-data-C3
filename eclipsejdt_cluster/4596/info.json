{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "023a7e64cc18d9969b147df3bcd607f9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b342d11e93317e2cbd13b12fe1fb7736", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java", "commitBeforeChange": "be3c15b9323bfb13e7c2f0f44638bfa19d5abff2", "commitAfterChange": "43ba239664019dd489061a00645e975e2ecd1a6c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t// X.this is not a param/raw type as denoting enclosing instance", "-\t\tthis.resolvedType = type = type.erasure();", "-", "+\t\ttype = type.erasure();", "+\t\t", "+\t\t// resolvedType needs to be converted to parameterized", "+\t\tif (type instanceof ReferenceBinding) {", "+\t\t\tthis.resolvedType = scope.environment().convertToParameterizedType((ReferenceBinding) type);", "+\t\t} else {", "+\t\t\t// error case", "+\t\t\tthis.resolvedType = type;", "+\t\t}", "+\t\t", "-\t\twhile (this.currentCompatibleType != null", "-\t\t\t&& this.currentCompatibleType != type) {", "+\t\twhile (this.currentCompatibleType != null && this.currentCompatibleType != type) {", "-\t\t\treturn type;", "+\t\t\treturn this.resolvedType;", "-\t\treturn type;", "+\t\t", "+\t\treturn  this.resolvedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffe520414ae6108306e8ef2ebc0b340b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java", "commitBeforeChange": "78950c7a462ba6fe8424532e69a4abeff0c7c745", "commitAfterChange": "bb74c75a01728288c8fd321cd0dfd5da07348196", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tcheckAccess(scope.methodScope(), this.resolvedType);", "-\t\t} else {", "-\t\t\t// Could also be targeting an enclosing instance inside a super constructor invocation", "-\t\t\t//\tclass X {", "-\t\t\t//\t\tpublic X(int i) {", "-\t\t\t//\t\t\tthis(new Object() { Object obj = X.this; });", "-\t\t\t//\t\t}", "-\t\t\t//\t}", "-", "-\t\t\tMethodScope methodScope = scope.methodScope();", "-\t\t\twhile (methodScope != null) {", "-\t\t\t\tif (!this.checkAccess(methodScope, this.resolvedType)) break;", "-\t\t\t\tif (methodScope.enclosingSourceType() == this.currentCompatibleType) break;", "-\t\t\t\tmethodScope = methodScope.parent.methodScope();", "-\t\t\t}", "-\t\t}", "+\t\t\tcheckAccess(scope.methodScope());", "+\t\t} // if depth>0, path emulation will diagnose bad scenarii"]}], "num": 4596}
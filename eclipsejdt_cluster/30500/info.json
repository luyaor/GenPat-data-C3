{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "20b9982553c45e293aa1452ce09deace", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e6e17cab8b07046757aff03841603b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java", "commitBeforeChange": "0bd04abb8575a021cf8905c773ca1d2199f31c53", "commitAfterChange": "1bf6db68524b43c8e140351de0b8d9940aee5925", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprotected TypeBinding getTypeBinding(Scope scope)", "signatureAfterChange": "  \tprotected TypeBinding getTypeBinding(Scope scope)", "diff": ["+\t\t\t} else if (qualifiedType != null) {", "+\t\t\t\tboolean rawQualified;", "+\t\t\t\tif ((rawQualified = qualifiedType.isRawType()) && !currentType.isStatic()) {", "+\t\t\t\t\tqualifiedType = scope.environment().createRawType((ReferenceBinding)currentType.erasure(), qualifiedType);", "+\t\t\t\t} else if (rawQualified || qualifiedType.isParameterizedType()) {", "+\t\t\t\t\tqualifiedType = scope.createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType);", "+\t\t\t\t} else {", "+\t\t\t\t\tqualifiedType = currentType;", "+\t\t\t\t}", "-\t\t\t\tqualifiedType = (qualifiedType != null && (qualifiedType.isRawType() || qualifiedType.isParameterizedType()))", "-\t\t\t\t\t\t\t\t\t\t? scope.createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifiedType)", "-\t\t\t\t\t\t\t\t\t\t: currentType;", "-\t\t\t}", "+\t\t\t\tqualifiedType = currentType;", "+\t\t\t}\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74b50eb3a56d3c81ca9ae9d4e8094b48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "0bd04abb8575a021cf8905c773ca1d2199f31c53", "commitAfterChange": "1bf6db68524b43c8e140351de0b8d9940aee5925", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tpublic final Binding getTypeOrPackage(char[][] compoundName)", "signatureAfterChange": " \tpublic final Binding getTypeOrPackage(char[][] compoundName)", "diff": ["+\t\t} else if (qualifiedType != null) {", "+\t\t\tboolean rawQualified;", "+\t\t\tif ((rawQualified = qualifiedType.isRawType()) && !typeBinding.isStatic()) {", "+\t\t\t\tqualifiedType = this.environment().createRawType((ReferenceBinding)typeBinding.erasure(), qualifiedType);", "+\t\t\t} else if (rawQualified || qualifiedType.isParameterizedType()) {", "+\t\t\t\tqualifiedType = this.createParameterizedType((ReferenceBinding)typeBinding.erasure(), null, qualifiedType);", "+\t\t\t} else {", "+\t\t\t\tqualifiedType = typeBinding;", "+\t\t\t}", "-\t\t\tqualifiedType = (qualifiedType != null && (qualifiedType.isRawType() || qualifiedType.isParameterizedType()))", "-\t\t\t\t? this.createParameterizedType(typeBinding, null, qualifiedType)", "-\t\t\t\t: typeBinding;", "+\t\t\tqualifiedType = typeBinding;"]}], "num": 30500}
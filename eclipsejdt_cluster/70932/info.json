{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66e81b69b7b8838e0274993a4ac749a0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84588f5d927bea1f41e198866e4ad496", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r private void locatePackageDeclarations(SearchPattern searchPattern, IWorkspace workspace) throws JavaModelException", "signatureAfterChange": "\r \tprivate void locatePackageDeclarations(\r \t\tSearchPattern searchPattern,\r \t\tIWorkspace workspace)\r \t\tthrows JavaModelException", "diff": ["- */\r", "-private void locatePackageDeclarations(SearchPattern searchPattern, IWorkspace workspace) throws JavaModelException {\r", "-\tif (searchPattern instanceof OrPattern) {\r", "-\t\tOrPattern orPattern = (OrPattern)searchPattern;\r", "-\t\tthis.locatePackageDeclarations(orPattern.leftPattern, workspace);\r", "-\t\tthis.locatePackageDeclarations(orPattern.rightPattern, workspace);\r", "-\t} else if (searchPattern instanceof PackageDeclarationPattern) {\r", "-\t\tPackageDeclarationPattern pkgPattern = (PackageDeclarationPattern)searchPattern;\r", "-\t\tString pkgName = new String(pkgPattern.pkgName);\r", "-\t\tIJavaProject[] projects = JavaModelManager.getJavaModel(workspace).getJavaProjects();\r", "-\t\tfor (int i = 0, length = projects.length; i < length; i++) {\r", "-\t\t\tIJavaProject javaProject = projects[i];\r", "-\t\t\tIPackageFragmentRoot[] roots = javaProject.getPackageFragmentRoots();\r", "-\t\t\tfor (int j = 0, rootsLength = roots.length; j < rootsLength; j++) {\r", "-\t\t\t\tIJavaElement[] pkgs = roots[j].getChildren();\r", "-\t\t\t\tfor (int k = 0, pksLength = pkgs.length; k < pksLength; k++) {\r", "-\t\t\t\t\tIJavaElement pkg = pkgs[k];\r", "-\t\t\t\t\tif (pkgPattern.matchesName(pkgPattern.pkgName, pkg.getElementName().toCharArray())) {\r", "-\t\t\t\t\t\tthis.currentResource = pkg.getUnderlyingResource();\r", "-\t\t\t\t\t\tif (this.currentResource == null) { // case of a file in an external jar\r", "-\t\t\t\t\t\t\tthis.currentResource = javaProject.getProject();\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\ttry {\r", "-\t\t\t\t\t\t\tthis.report(-1, -2, pkg, IJavaSearchResultCollector.EXACT_MATCH);\r", "-\t\t\t\t\t\t} catch (CoreException e) {\r", "-\t\t\t\t\t\t\tif (e instanceof JavaModelException) {\r", "-\t\t\t\t\t\t\t\tthrow (JavaModelException)e;\r", "-\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\tthrow new JavaModelException(e);\r", "+\t */\r", "+\tprivate void locatePackageDeclarations(\r", "+\t\tSearchPattern searchPattern,\r", "+\t\tIWorkspace workspace)\r", "+\t\tthrows JavaModelException {\r", "+\t\tif (searchPattern instanceof OrPattern) {\r", "+\t\t\tOrPattern orPattern = (OrPattern) searchPattern;\r", "+\t\t\tthis.locatePackageDeclarations(orPattern.leftPattern, workspace);\r", "+\t\t\tthis.locatePackageDeclarations(orPattern.rightPattern, workspace);\r", "+\t\t} else\r", "+\t\t\tif (searchPattern instanceof PackageDeclarationPattern) {\r", "+\t\t\t\tPackageDeclarationPattern pkgPattern =\r", "+\t\t\t\t\t(PackageDeclarationPattern) searchPattern;\r", "+\t\t\t\tString pkgName = new String(pkgPattern.pkgName);\r", "+\t\t\t\tIJavaProject[] projects =\r", "+\t\t\t\t\tJavaModelManager.getJavaModel(workspace).getJavaProjects();\r", "+\t\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {\r", "+\t\t\t\t\tIJavaProject javaProject = projects[i];\r", "+\t\t\t\t\tIPackageFragmentRoot[] roots = javaProject.getPackageFragmentRoots();\r", "+\t\t\t\t\tfor (int j = 0, rootsLength = roots.length; j < rootsLength; j++) {\r", "+\t\t\t\t\t\tIJavaElement[] pkgs = roots[j].getChildren();\r", "+\t\t\t\t\t\tfor (int k = 0, pksLength = pkgs.length; k < pksLength; k++) {\r", "+\t\t\t\t\t\t\tIJavaElement pkg = pkgs[k];\r", "+\t\t\t\t\t\t\tif (pkgPattern\r", "+\t\t\t\t\t\t\t\t.matchesName(pkgPattern.pkgName, pkg.getElementName().toCharArray())) {\r", "+\t\t\t\t\t\t\t\tIResource resource = pkg.getUnderlyingResource();\r", "+\t\t\t\t\t\t\t\tif (resource == null) { // case of a file in an external jar\r", "+\t\t\t\t\t\t\t\t\tresource = javaProject.getProject();\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\tthis.potentialMatchesIndex = 0;\r", "+\t\t\t\t\t\t\t\tthis.potentialMatches =\r", "+\t\t\t\t\t\t\t\t\tnew PotentialMatch[] { new PotentialMatch(this, resource, null)};\r", "+\t\t\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\t\t\tthis.report(-1, -2, pkg, IJavaSearchResultCollector.EXACT_MATCH);\r", "+\t\t\t\t\t\t\t\t} catch (CoreException e) {\r", "+\t\t\t\t\t\t\t\t\tif (e instanceof JavaModelException) {\r", "+\t\t\t\t\t\t\t\t\t\tthrow (JavaModelException) e;\r", "+\t\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\t\tthrow new JavaModelException(e);\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t}\r", "+\t}\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c2725e4eabf7f82db0b436a7dbd1a7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "305e4f0c27f7df148c6acf3c313dda144407f8c1", "commitAfterChange": "c72a639799e1f7a209f8477bea888d0d19067c25", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r private void locatePackageDeclarations(SearchPattern searchPattern, IWorkspace workspace) throws JavaModelException", "signatureAfterChange": "\r private void locatePackageDeclarations(SearchPattern searchPattern, IWorkspace workspace) throws JavaModelException", "diff": ["-\t\t\t\t\t\tthis.currentResource = pkg.getUnderlyingResource();\r", "-\t\t\t\t\t\tif (this.currentResource == null) { // case of a file in an external jar\r", "-\t\t\t\t\t\t\tthis.currentResource = javaProject.getProject();\r", "+\t\t\t\t\t\tIResource resource = pkg.getUnderlyingResource();\r", "+\t\t\t\t\t\tif (resource == null) { // case of a file in an external jar\r", "+\t\t\t\t\t\t\tresource = javaProject.getProject();\r", "+\t\t\t\t\t\tthis.potentialMatchesIndex = 0;\r", "+\t\t\t\t\t\tthis.potentialMatches = new PotentialMatch[] {\r", "+\t\t\t\t\t\t\tnew PotentialMatch(this, resource, null)\r", "+\t\t\t\t\t\t};\r"]}], "num": 70932}
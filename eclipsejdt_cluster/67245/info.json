{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1990ed1fce4931fc0b1114e890838a8d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adf13cae90e61abf752272efcf0205e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "13012d4d345052a766efaa509c91e36e4e9c4bd7", "commitAfterChange": "0e6d159b6b5bd2cefe41360d930f2e2ea9602f91", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "  public TypeBinding getTypeFromTypeSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType,  \t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker)", "signatureAfterChange": "  public TypeBinding getTypeFromTypeSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType,  \t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker)", "diff": ["+\t// annotations on dimensions?", "+\tAnnotationBinding [][] annotationsOnDimensions = null;", "+\tif (dimension > 0 && walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "+\t\tfor (int i = 0; i < dimension; i++) {", "+\t\t\tAnnotationBinding [] annotations = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "+\t\t\tif (annotations != Binding.NO_ANNOTATIONS) { ", "+\t\t\t\tif (annotationsOnDimensions == null)", "+\t\t\t\t\tannotationsOnDimensions = new AnnotationBinding[dimension][];", "+\t\t\t\t\tannotationsOnDimensions[i] = annotations;", "+\t\t\t}", "+\t\t\twalker = walker.toNextArrayDimension();", "+\t\t}", "+\t}", "-\t\t\t\treturn typeFromTypeVariable(staticVariables[i], dimension, walker, missingTypeNames);", "+\t\t\t\treturn getTypeFromTypeVariable(staticVariables[i], dimension, walker, missingTypeNames);", "-\t\t\t\t\treturn typeFromTypeVariable(enclosingTypeVariables[i], dimension, walker, missingTypeNames);", "+\t\t\t\t\treturn getTypeFromTypeVariable(enclosingTypeVariables[i], dimension, walker, missingTypeNames);", "-\t\treturn dimension == 0 ? type : createArrayType(type, dimension);", "+\t\treturn dimension == 0 ? type : createArrayType(type, dimension, AnnotatableTypeSystem.flattenedAnnotations(annotationsOnDimensions));", "-\treturn dimension == 0 ? (TypeBinding) parameterizedType : createArrayType(parameterizedType, dimension);", "+\treturn dimension == 0 ? (TypeBinding) parameterizedType : createArrayType(parameterizedType, dimension, AnnotatableTypeSystem.flattenedAnnotations(annotationsOnDimensions));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dab8e009e74dc4a9a0cb78ab74cabc22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "db9994e6bbc68b36b6835d66f1e05a3b040360e2", "commitAfterChange": "01c814e6bd45b7fbd49eec3a490338a17c21d9fb", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames)", "signatureAfterChange": " ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames, TypeAnnotationWalker walker)", "diff": ["-ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames) {", "+ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames, TypeAnnotationWalker walker) {", "-\treturn getTypeFromCompoundName(compoundName, isParameterized, wasMissingType);", "+\tReferenceBinding binding = getTypeFromCompoundName(compoundName, isParameterized, wasMissingType);", "+\tif (walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "+\t\tfinal int depth = binding.depth();", "+\t\tAnnotationBinding [][] annotations = null;", "+\t\tfor (int i = 0; i <= depth; i++) {", "+\t\t\tAnnotationBinding[] annots = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);", "+\t\t\tif (annots != null && annots.length > 0) {", "+\t\t\t\tif (annotations == null)", "+\t\t\t\t\tannotations = new AnnotationBinding[depth + 1][];", "+\t\t\t\tannotations[i] = annots;", "+\t\t\t}", "+\t\t\twalker = walker.toNextNestedType();", "+\t\t}", "+\t\tif (annotations != null)", "+\t\t\tbinding = (ReferenceBinding) createAnnotatedType(binding, annotations);", "+\t}", "+\treturn binding;", "+}"]}], "num": 67245}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ff2ba22888bee8ace1f0ae5203f73aa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22014db3a4f15a4d24fb7406f11c3792", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "c0679d24710a6b2a91bf47b3b4b03da992188ceb", "commitAfterChange": "e0d96d91a2a3382c51c572fe1c4254d193e4a7b4", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " boolean checkInheritedReturnTypes(MethodBinding[] methods, int length)", "signatureAfterChange": " boolean checkInheritedReturnTypes(MethodBinding[] methods, int length)", "diff": ["+\tif (length <= 1) {", "+\t\treturn true; // no need to continue since only 1 inherited method is left", "+\t}", "+\t// get rid of overriden methods coming from interfaces - if any", "+\tMethodBinding methodsToCheck[] = new MethodBinding[length];\t// must not nullify methods slots in place", "+\tint count = length;", "+\tfor (int i = 0; i < length; i++) {", "+\t\tmethodsToCheck[i] = methods[i];", "+\t}", "+\tfor (int i = 0; i < length; i++) {", "+\t\tMethodBinding existingMethod;", "+\t\tif ((existingMethod = methodsToCheck[i]) != null) {", "+\t\t\tfor (int j = 0; j < length; j++) {", "+\t\t\t\tMethodBinding inheritedMethod;", "+\t\t\t\tif (i != j && (inheritedMethod = methodsToCheck[j]) != null &&", "+\t\t\t\t\t\texistingMethod.declaringClass.implementsInterface(inheritedMethod.declaringClass, true)) {", "+\t\t\t\t\tMethodBinding substitute = computeSubstituteMethod(inheritedMethod, existingMethod);", "+\t\t\t\t\tif (substitute != null && ", "+\t\t\t\t\t\t\tdoesSubstituteMethodOverride(existingMethod, substitute) &&", "+\t\t\t\t\t\t\t(existingMethod.returnType.isCompatibleWith(substitute.returnType) ||", "+\t\t\t\t\t\t\t\t\tisReturnTypeSubstituable(substitute, existingMethod))) {", "+\t\t\t\t\t\tcount--;", "+\t\t\t\t\t\tmethodsToCheck[j] = null;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (count < length) {", "+\t\tif (count == 1) { ", "+\t\t\treturn true; // no need to continue since only 1 inherited method is left", "+\t\t}", "+\t\tfor (int i = 0, j = 0; j < count; i++) {", "+\t\t\tif (methodsToCheck[i] != null) {", "+\t\t\t\tmethodsToCheck[j++] = methodsToCheck[i];", "+\t\t\t}", "+\t\t}", "+\t\tmethods = methodsToCheck;", "+\t\tlength = count;", "+\t} // else keep methods unchanged for further checks"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2aa5af6e219586bc36b02b8442784fda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "e5fda1d929f48b1ed961a5e3c698240a2263aa5e", "commitAfterChange": "492742130581f98e928eea7bd4ac7e448a4c7517", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " boolean checkInheritedReturnTypes(MethodBinding[] methods, int length)", "signatureAfterChange": " boolean checkInheritedReturnTypes(MethodBinding[] methods, int length)", "diff": ["-\tif (length <= 1) {", "-\t\treturn true; // no need to continue since only 1 inherited method is left", "-\t}", "-\t// get rid of overriden methods coming from interfaces - if any", "-\tMethodBinding methodsToCheck[] = new MethodBinding[length];\t// must not nullify methods slots in place", "-\tint count = length;", "-\tfor (int i = 0; i < length; i++) {", "-\t\tmethodsToCheck[i] = methods[i];", "-\t}", "-\tfor (int i = 0; i < length; i++) {", "-\t\tMethodBinding existingMethod;", "-\t\tif ((existingMethod = methodsToCheck[i]) != null) {", "-\t\t\tfor (int j = 0; j < length; j++) {", "-\t\t\t\tMethodBinding inheritedMethod;", "-\t\t\t\tif (i != j && (inheritedMethod = methodsToCheck[j]) != null &&", "-\t\t\t\t\t\texistingMethod.declaringClass.implementsInterface(inheritedMethod.declaringClass, true)) {", "-\t\t\t\t\tMethodBinding substitute = computeSubstituteMethod(inheritedMethod, existingMethod);", "-\t\t\t\t\tif (substitute != null && ", "-\t\t\t\t\t\t\tdoesSubstituteMethodOverride(existingMethod, substitute) &&", "-\t\t\t\t\t\t\t(existingMethod.returnType.isCompatibleWith(substitute.returnType) ||", "-\t\t\t\t\t\t\t\t\tisReturnTypeSubstituable(substitute, existingMethod))) {", "-\t\t\t\t\t\tcount--;", "-\t\t\t\t\t\tmethodsToCheck[j] = null;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (count < length) {", "-\t\tif (count == 1) { ", "-\t\t\treturn true; // no need to continue since only 1 inherited method is left", "-\t\t}", "-\t\tfor (int i = 0, j = 0; j < count; i++) {", "-\t\t\tif (methodsToCheck[i] != null) {", "-\t\t\t\tmethodsToCheck[j++] = methodsToCheck[i];", "-\t\t\t}", "-\t\t}", "-\t\tmethods = methodsToCheck;", "-\t\tlength = count;", "-\t} // else keep methods unchanged for further checks", "-\t\tfor (int j = i; j <= l; j++) {", "+\t\tnextMethod : for (int j = i; j <= l; j++) {", "-\t\t\t\t\t\t\treturn false; // do not complain since the super interface already got blamed", "+\t\t\t\t\t\t\tcontinue nextMethod; // do not complain since the super interface already got blamed"]}], "num": 46817}
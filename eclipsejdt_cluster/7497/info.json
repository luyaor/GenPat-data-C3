{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55f60d0957fec4a8b879692bf17d4f27", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b98faa593105cfc0d056d762a224397", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "519f65f0f5344992cd2a44d698edb1295f3c3a67", "commitAfterChange": "1b7858c417f0a2eea0d6f609fa41df3128fd97dd", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["-\t\tif (isCompliant14)", "-\t\t\treturn mostSpecificMethodBinding(candidates, visiblesCount, argumentTypes, invocationSite);", "+\t\tif (isCompliant14) {", "+\t\t\tmatchingMethod = mostSpecificMethodBinding(candidates, visiblesCount, argumentTypes, invocationSite);", "+\t\t\tif (parameterCompatibilityLevel(matchingMethod, argumentTypes) > COMPATIBLE) {", "+\t\t\t\t// see if there is a better match in the interfaces", "+\t\t\t\tMethodBinding interfaceMethod =", "+\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, new ObjectVector());", "+\t\t\t\tif (interfaceMethod != null) return interfaceMethod;", "+\t\t\t}", "+\t\t\treturn matchingMethod;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2a09937a19c1ce72e1d528c3d5c51a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "cb998bf2848dbe13467716ab126d457f7b87a36f", "commitAfterChange": "6af8fbe594b566a3cffc3af07a2c8c2ab9cbf395", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "diff": ["-\t\t\tif (matchingMethod == null) {\r", "-\t\t\t\tMethodBinding interfaceMethod =\r", "-\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "-\t\t\t\tif (interfaceMethod != null) return interfaceMethod;\r", "-\t\t\t}\r", "-\t\t\treturn matchingMethod; // may be null - have not checked arg types or visibility\r", "+\t\t\tif (matchingMethod != null)\r", "+\t\t\t\treturn matchingMethod; // have not checked arg types or visibility\r", "+\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);\r", "+\r", "-\r"]}], "num": 7497}
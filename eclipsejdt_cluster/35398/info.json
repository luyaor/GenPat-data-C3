{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b5e4fc198c0434a734a21f06fb39445", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15002138704b94b82f929f1a39b163e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java", "commitBeforeChange": "da1ed68bc4edf753a4c670a981fc3b101d0548b0", "commitAfterChange": "d60a521aebaf899095636d4081476cd72ef03126", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName)", "signatureAfterChange": "  private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName)", "diff": ["-\tif (initialTypeNames != null) {", "-\t\t// TODO (kent) should use a hash set to avoid linear search once massive source set is being processed", "-\t\tfor (int i = 0, l = initialTypeNames.length; i < l; i++) {", "-\t\t\tif (qualifiedTypeName.equals(initialTypeNames[i])) {", "-\t\t\t\tif (isIncrementalBuild)", "-\t\t\t\t\t// catch the case that a type inside a source file has been renamed but other class files are looking for it", "-\t\t\t\t\tthrow new AbortCompilation(true, new AbortIncrementalBuildException(qualifiedTypeName));", "-\t\t\t\treturn null; // looking for a file which we know was provided at the beginning of the compilation", "-\t\t\t}", "-\t\t}", "+\tif (this.initialTypeNames != null && this.initialTypeNames.includes(qualifiedTypeName)) {", "+\t\tif (isIncrementalBuild)", "+\t\t\t// catch the case that a type inside a source file has been renamed but other class files are looking for it", "+\t\t\tthrow new AbortCompilation(true, new AbortIncrementalBuildException(qualifiedTypeName));", "+\t\treturn null; // looking for a file which we know was provided at the beginning of the compilation", "-\tif (additionalUnits != null && sourceLocations.length > 0) {", "+\tif (this.additionalUnits != null && this.sourceLocations.length > 0) {", "-\t\tIPath qSourceFilePath = new Path(qualifiedTypeName); // doesn't have file extension", "-\t\tint qSegmentCount = qSourceFilePath.segmentCount();", "-\t\tnext : for (int i = 0, l = additionalUnits.length; i < l; i++) {", "-\t\t\tSourceFile additionalUnit = additionalUnits[i];", "-\t\t\tIPath fullPath = additionalUnit.resource.getFullPath();", "-\t\t\tint prefixCount = additionalUnit.sourceLocation.sourceFolder.getFullPath().segmentCount();", "-\t\t\tif (qSegmentCount == fullPath.segmentCount() - prefixCount) {", "-\t\t\t\tfor (int j = 0; j < qSegmentCount - 1; j++)", "-\t\t\t\t\tif (!qSourceFilePath.segment(j).equals(fullPath.segment(j + prefixCount)))", "-\t\t\t\t\t\tcontinue next;", "-\t\t\t\tif (!Util.equalsIgnoreJavaLikeExtension(fullPath.segment(qSegmentCount-1 + prefixCount), qSourceFilePath.segment(qSegmentCount-1)))", "-\t\t\t\t\tcontinue next;", "-\t\t\t\treturn new NameEnvironmentAnswer(additionalUnit, null /*no access restriction*/);", "-\t\t\t}", "-\t\t}", "+\t\tSourceFile unit = (SourceFile) this.additionalUnits.get(qualifiedTypeName); // doesn't have file extension", "+\t\tif (unit != null)", "+\t\t\treturn new NameEnvironmentAnswer(unit, null /*no access restriction*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b564afdadd4f3272fd690e79c52b015f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "4b7408bf1768e4fe08faa711e23ea5c6fe36d225", "commitAfterChange": "4088e11dac262e43550a58fc93a14d090417ec2f", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\t\t\t\tSimpleSet possibleMethods = null;", "+\t\t\t\tboolean shouldIntersectExceptions = original.declaringClass.isInterface() && original.thrownExceptions != Binding.NO_EXCEPTIONS; // only needed when selecting from interface methods", "-\t\t\t\t\t\tif (original.thrownExceptions != original2.thrownExceptions) {", "-\t\t\t\t\t\t\tif (mostSpecificExceptions == null)", "-\t\t\t\t\t\t\t\tmostSpecificExceptions = original.thrownExceptions;", "-\t\t\t\t\t\t\tif (possibleMethods == null)", "-\t\t\t\t\t\t\t\tpossibleMethods = new SimpleSet(3);", "-\t\t\t\t\t\t\tint mostSpecificLength = mostSpecificExceptions.length;", "-\t\t\t\t\t\t\tint original2Length = original2.thrownExceptions.length;", "-\t\t\t\t\t\t\tSimpleSet temp = new SimpleSet(mostSpecificLength);", "-\t\t\t\t\t\t\tnextException : for (int t = 0; t < mostSpecificLength; t++) {", "-\t\t\t\t\t\t\t\tReferenceBinding exception = mostSpecificExceptions[t];", "-\t\t\t\t\t\t\t\tfor (int s = 0; s < original2Length; s++) {", "-\t\t\t\t\t\t\t\t\tif (exception.isCompatibleWith(original2.thrownExceptions[s])) {", "-\t\t\t\t\t\t\t\t\t\tpossibleMethods.add(current);", "-\t\t\t\t\t\t\t\t\t\ttemp.add(exception);", "-\t\t\t\t\t\t\t\t\t\tcontinue nextException;", "-\t\t\t\t\t\t\t\t\t} else if (original2.thrownExceptions[s].isCompatibleWith(exception)) {", "-\t\t\t\t\t\t\t\t\t\tpossibleMethods.add(next);", "-\t\t\t\t\t\t\t\t\t\ttemp.add(original2.thrownExceptions[s]);", "-\t\t\t\t\t\t\t\t\t\tcontinue nextException;", "+\t\t\t\t\t\tif (shouldIntersectExceptions && original2.declaringClass.isInterface()) {", "+\t\t\t\t\t\t\tif (original.thrownExceptions != original2.thrownExceptions) {", "+\t\t\t\t\t\t\t\tif (original2.thrownExceptions == Binding.NO_EXCEPTIONS) {", "+\t\t\t\t\t\t\t\t\tmostSpecificExceptions = Binding.NO_EXCEPTIONS;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tif (mostSpecificExceptions == null) {", "+\t\t\t\t\t\t\t\t\t\tmostSpecificExceptions = original.thrownExceptions;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tint mostSpecificLength = mostSpecificExceptions.length;", "+\t\t\t\t\t\t\t\t\tint original2Length = original2.thrownExceptions.length;", "+\t\t\t\t\t\t\t\t\tSimpleSet temp = new SimpleSet(mostSpecificLength);", "+\t\t\t\t\t\t\t\t\tboolean changed = false;", "+\t\t\t\t\t\t\t\t\tnextException : for (int t = 0; t < mostSpecificLength; t++) {", "+\t\t\t\t\t\t\t\t\t\tReferenceBinding exception = mostSpecificExceptions[t];", "+\t\t\t\t\t\t\t\t\t\tfor (int s = 0; s < original2Length; s++) {", "+\t\t\t\t\t\t\t\t\t\t\tif (exception.isCompatibleWith(original2.thrownExceptions[s])) {", "+\t\t\t\t\t\t\t\t\t\t\t\ttemp.add(exception);", "+\t\t\t\t\t\t\t\t\t\t\t\tcontinue nextException;", "+\t\t\t\t\t\t\t\t\t\t\t} else if (original2.thrownExceptions[s].isCompatibleWith(exception)) {", "+\t\t\t\t\t\t\t\t\t\t\t\ttemp.add(original2.thrownExceptions[s]);", "+\t\t\t\t\t\t\t\t\t\t\t\tchanged = true;", "+\t\t\t\t\t\t\t\t\t\t\t\tcontinue nextException;", "+\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\tchanged = true;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (changed) {", "+\t\t\t\t\t\t\t\t\t\tmostSpecificExceptions = temp.elementSize == 0 ? Binding.NO_EXCEPTIONS : new ReferenceBinding[temp.elementSize];", "+\t\t\t\t\t\t\t\t\t\ttemp.asArray(mostSpecificExceptions);", "-\t\t\t\t\t\t\tmostSpecificExceptions = temp.elementSize == 0 ? Binding.NO_EXCEPTIONS : new ReferenceBinding[temp.elementSize];", "-\t\t\t\t\t\t\ttemp.asArray(mostSpecificExceptions);", "-\t\t\t\tif (mostSpecificExceptions != null) {", "-\t\t\t\t\tObject[] values = possibleMethods.values;", "-\t\t\t\t\tint exceptionLength = mostSpecificExceptions.length;", "-\t\t\t\t\tnextMethod : for (int p = 0, vLength = values.length; p < vLength; p++) {", "-\t\t\t\t\t\tMethodBinding possible = (MethodBinding) values[p];", "-\t\t\t\t\t\tif (possible == null) continue nextMethod;", "-\t\t\t\t\t\tReferenceBinding[] itsExceptions = possible.thrownExceptions;", "-\t\t\t\t\t\tif (itsExceptions.length == exceptionLength) {", "-\t\t\t\t\t\t\tnextException : for (int e = 0; e < exceptionLength; e++) {", "-\t\t\t\t\t\t\t\tReferenceBinding exception = itsExceptions[e];", "-\t\t\t\t\t\t\t\tfor (int f = 0; f < exceptionLength; f++)", "-\t\t\t\t\t\t\t\t\tif (exception == mostSpecificExceptions[f]) continue nextException;", "-\t\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn possible;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn new MethodBinding(", "-\t\t\t\t\t\tcurrent.modifiers | ClassFileConstants.AccSynthetic,", "-\t\t\t\t\t\tcurrent.selector,", "-\t\t\t\t\t\tcurrent.returnType,", "-\t\t\t\t\t\tcurrent.parameters,", "-\t\t\t\t\t\tmostSpecificExceptions,", "-\t\t\t\t\t\tcurrent.declaringClass", "-\t\t\t\t\t);", "+\t\t\t\tif (mostSpecificExceptions != null && mostSpecificExceptions != current.thrownExceptions) {", "+\t\t\t\t\treturn new MostSpecificExceptionMethodBinding(current, mostSpecificExceptions);"]}], "num": 35398}
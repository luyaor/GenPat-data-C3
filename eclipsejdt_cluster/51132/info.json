{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7fc912f4c45c86889417537c91de9616", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f8a6908761dd8a63abcb093d50ec5f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "67be753fec1b8f88653e28d3d4d4837dd29cdece", "commitAfterChange": "c76b87d837ed14384819cb84439501329f23edce", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": "\r \t\r \tpublic ClassInstanceCreation convert(AnonymousLocalTypeDeclaration expression)", "signatureAfterChange": "\r \t\r \tpublic ClassInstanceCreation convert(AnonymousLocalTypeDeclaration expression)", "diff": ["+\t\t\tclassInstanceCreation.resolveTypeBinding();\r", "-\t\tint fieldsLength;\r", "-\t\tint methodsLength;\r", "-\t\tint memberTypesLength;\r", "-\r", "-\t\t// <superclass> is bound to the actual type from the allocation expression\r", "-\t\t// therefore it has already been iterated at this point.\r", "-\t\tMemberTypeDeclaration[] memberTypes = expression.memberTypes;\r", "-\t\tif (memberTypes != null) {\r", "-\t\t\tmemberTypesLength = memberTypes.length;\r", "-\t\t\tfor (int i = 0; i < memberTypesLength; i++) {\r", "-\t\t\t\tclassInstanceCreation.bodyDeclarations().add(convert(memberTypes[i]));\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] fields = expression.fields;\r", "-\t\tif (fields != null) {\r", "-\t\t\tfieldsLength = fields.length;\r", "-\t\t\tfor (int i = 0; i < fieldsLength; i++) {\r", "-\t\t\t\tcheckAndAddMultipleFieldDeclaration(fields, i, classInstanceCreation.bodyDeclarations());\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\torg.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] methods = expression.methods;\r", "-\t\tif (methods != null) {\r", "-\t\t\tmethodsLength = methods.length;\r", "-\t\t\tfor (int i = 0; i < methodsLength; i++) {\r", "-\t\t\t\tif (!methods[i].isDefaultConstructor() && !methods[i].isClinit()) {\r", "-\t\t\t\t\tclassInstanceCreation.bodyDeclarations().add(convert(methods[i]));\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "+\t\tbuildBodyDeclarations(expression, classInstanceCreation);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c33afb5ff69b3a66281f27461c7939a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "da39b69e72c50baaaa7ca77863d468ca697fcf61", "commitAfterChange": "ff204ce3a41738619b4636be750fa00b8770f7a8", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "\r public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope)", "signatureAfterChange": "\r public void traverse(IAbstractSyntaxTreeVisitor visitor, CompilationUnitScope unitScope)", "diff": ["- */\r", "-public void traverse(IAbstractSyntaxTreeVisitor visitor, BlockScope blockScope) {\r", "-\tif (ignoreFurtherInvestigation)\r", "-\t\treturn;\r", "-\ttry {\r", "-\t\tif (visitor.visit(this, blockScope)) {\r", "-\t\t\tif (superclass != null)\r", "-\t\t\t\tsuperclass.traverse(visitor, scope);\r", "-\t\t\tif (superInterfaces != null) {\r", "-\t\t\t\tint superInterfaceLength = superInterfaces.length;\r", "-\t\t\t\tfor (int i = 0; i < superInterfaceLength; i++)\r", "-\t\t\t\t\tsuperInterfaces[i].traverse(visitor, scope);\r", "-\t\t\t}\r", "-\t\t\tif (memberTypes != null) {\r", "-\t\t\t\tint memberTypesLength = memberTypes.length;\r", "-\t\t\t\tfor (int i = 0; i < memberTypesLength; i++)\r", "-\t\t\t\t\tmemberTypes[i].traverse(visitor, scope);\r", "-\t\t\t}\r", "-\t\t\tif (fields != null) {\r", "-\t\t\t\tint fieldsLength = fields.length;\r", "-\t\t\t\tfor (int i = 0; i < fieldsLength; i++) {\r", "-\t\t\t\t\tFieldDeclaration field;\r", "-\t\t\t\t\tif ((field = fields[i]).isStatic()) {\r", "-\t\t\t\t\t\t// local type cannot have static fields\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tfield.traverse(visitor, initializerScope);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tif (methods != null) {\r", "-\t\t\t\tint methodsLength = methods.length;\r", "-\t\t\t\tfor (int i = 0; i < methodsLength; i++)\r", "-\t\t\t\t\tmethods[i].traverse(visitor, scope);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tvisitor.endVisit(this, blockScope);\r", "-\t} catch (AbortType e) {\r", "-\t}\r", "-}\r"]}], "num": 51132}
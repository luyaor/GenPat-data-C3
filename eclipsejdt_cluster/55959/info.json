{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c7e2602c407682e73b23b4080e6d9d7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e2ab2549d19d81f848a7c31af5808fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java", "commitBeforeChange": "46e3483cccbab80fe0f5c6a0da160435634e474e", "commitAfterChange": "11003ca2577758ec0d599f8537deaa61370b0b9e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public Index[] getIndexes(IProgressMonitor progressMonitor)", "signatureAfterChange": " public Index[] getIndexes(IProgressMonitor progressMonitor)", "diff": ["-\t\tIPath containerPath = (IPath) indexManager.indexLocations.keyForValue(indexLocation);", "-\t\tif (containerPath != null) { // sanity check", "-\t\t\tIndex index = indexManager.getIndex(containerPath, indexLocation, true /*reuse index file*/, false /*do not create if none*/);", "-\t\t\tif (index != null)", "-\t\t\t\tindexes[count++] = index; // only consider indexes which are ready", "+\t\tIndex index = indexManager.getIndex(indexLocation);", "+\t\tif (index == null) {", "+\t\t\t// only need containerPath if the index must be built", "+\t\t\tIPath containerPath = (IPath) indexManager.indexLocations.keyForValue(indexLocation);", "+\t\t\tif (containerPath != null) // sanity check", "+\t\t\t\tindex = indexManager.getIndex(containerPath, indexLocation, true /*reuse index file*/, false /*do not create if none*/);", "+\t\tif (index != null)", "+\t\t\tindexes[count++] = index; // only consider indexes which are ready"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0528b95bf9ad7537e1c98ccc0f005b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java", "commitBeforeChange": "e569ccbcfbcb74e518eafb76280b234f1f261194", "commitAfterChange": "2f320253f72e97c287894f0303a7d3fb710470ca", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public Index[] getIndexes(IProgressMonitor progressMonitor)", "signatureAfterChange": " public Index[] getIndexes(IProgressMonitor progressMonitor)", "diff": ["-\tIndex[] indexes = new Index[length];", "-\tint count = 0;", "-\tIndexManager indexManager = JavaModelManager.getIndexManager();", "-\tfor (int i = 0; i < length; i++) {", "-\t\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "-\t\t// may trigger some index recreation work", "-\t\tIPath indexLocation = indexLocations[i];", "-\t\tIndex index = indexManager.getIndex(indexLocation);", "-\t\tif (index == null) {", "-\t\t\t// only need containerPath if the index must be built", "-\t\t\tIPath containerPath = (IPath) indexManager.indexLocations.keyForValue(indexLocation);", "-\t\t\tif (containerPath != null) // sanity check", "-\t\t\t\tindex = indexManager.getIndex(containerPath, indexLocation, true /*reuse index file*/, false /*do not create if none*/);", "-\t\t}", "-\t\tif (index != null)", "-\t\t\tindexes[count++] = index; // only consider indexes which are ready", "-\t}", "-\tif (count == length) ", "-\t\tthis.areIndexesReady = true;", "-\telse", "-\t\tSystem.arraycopy(indexes, 0, indexes=new Index[count], 0, count);", "+\tIndex[] indexes = JavaModelManager.getIndexManager().getIndexes(indexLocations, progressMonitor);", "+\tthis.areIndexesReady = indexes.length == length;"]}], "num": 55959}
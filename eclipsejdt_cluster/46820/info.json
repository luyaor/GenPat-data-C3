{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76251ac0bd3a398486c78d58e52b4a28", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b90ec1b03336d050da397a14fa75d380", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "380f51fb07b01d50fdf783879a49310c31bf8dde", "commitAfterChange": "cdb3e8d99e2ddf40df3afd879c65627abb3809dc", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic static IPath getExternalAnnotationPath(IClasspathEntry entry, IProject project, boolean resolve)", "signatureAfterChange": " \tpublic static IPath getExternalAnnotationPath(IClasspathEntry entry, IProject project, boolean resolve)", "diff": ["-\t\t\t\tIProject targetProject = project.getWorkspace().getRoot().getProject(annotationPath.segment(0));", "-\t\t\t\tif (targetProject.exists()) {", "-\t\t\t\t\tif (annotationPath.segmentCount() > 1)", "-\t\t\t\t\t\treturn targetProject.getLocation().append(annotationPath.removeFirstSegments(1));", "-\t\t\t\t\telse", "-\t\t\t\t\t\treturn targetProject.getLocation();", "+\t\t\t\tIResource resource = project.getWorkspace().getRoot().findMember(annotationPath);", "+\t\t\t\tif (resource != null) {", "+\t\t\t\t\treturn resource.getLocation();", "+\t\t\t\t} else if (new File(annotationPath.toOSString()).exists()) { // absolute, not in workspace, must be Filesystem-absolute", "+\t\t\t\t\treturn annotationPath;", "-\t\t\t\t// absolute, not in workspace, must be Filesystem-absolute:", "-\t\t\t\treturn annotationPath;", "+\t\t\t\tinvalidExternalAnnotationPath(project);", "-\t\t\t\t\tif (resolve)", "-\t\t\t\t\t\treturn project.getLocation().append(annotationPath);", "-\t\t\t\t\telse", "+\t\t\t\t\tif (resolve) {", "+\t\t\t\t\t\tIResource member = project.findMember(annotationPath);", "+\t\t\t\t\t\tif (member != null)", "+\t\t\t\t\t\t\treturn member.getLocation();", "+\t\t\t\t\t\tinvalidExternalAnnotationPath(project);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc632157280bc625e4a905efbb379cd7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java", "commitBeforeChange": "0747d5e7c6159c917fde8175fc9c67a8bade55fc", "commitAfterChange": "07efa537488d0df9da9dc6880afc536aaccc6b60", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  private void setupExternalAnnotationProvider(IProject project, final IPath externalAnnotationPath, \t\tZipFile annotationZip, ClassFileReader reader, final String typeName)", "signatureAfterChange": "  private void setupExternalAnnotationProvider(IProject project, final IPath externalAnnotationPath, \t\tZipFile annotationZip, ClassFileReader reader, final String typeName)", "diff": ["-\tIResource resource = root.getFolder(externalAnnotationPath);", "+\tIResource resource = externalAnnotationPath.segmentCount() == 1", "+\t\t\t? root.getProject(externalAnnotationPath.lastSegment())", "+\t\t\t: root.getFolder(externalAnnotationPath);", "-\tString resolvedPath = resource.exists()", "-\t\t\t\t\t\t\t? resource.getLocation().toString() // workspace lookup succeeded -> resolve it", "-\t\t\t\t\t\t\t: externalAnnotationPath.toString(); // not in workspace, use as is", "+\tString resolvedPath;", "+\tif (resource.exists()) {", "+\t\tif (resource.isVirtual()) {", "+\t\t\tUtil.log(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, ", "+\t\t\t\t\t\"Virtual resource \"+externalAnnotationPath+\" cannot be used as annotationpath for project \"+project.getName())); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\treturn;", "+\t\t}", "+\t\tresolvedPath = resource.getLocation().toString(); // workspace lookup succeeded -> resolve it", "+\t} else {", "+\t\tresolvedPath = externalAnnotationPath.toString(); // not in workspace, use as is", "+\t}"]}], "num": 46820}
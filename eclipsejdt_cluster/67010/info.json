{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2736918073a5f435dfd4da0177b17a2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f55223de10ce0f04796a4adfb398eab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java", "commitBeforeChange": "3f665dc08ffa02e27b74efb0940c16f2120a11f8", "commitAfterChange": "307e2de84d078daed3099015a7ac89d980746b6b", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 35, "signatureBeforeChange": " public boolean isIntersectingWith(TypeBinding otherType)", "signatureAfterChange": " public boolean isProvablyDistinct(TypeBinding otherType)", "diff": ["- */", "-public boolean isIntersectingWith(TypeBinding otherType) {", "-\treturn this == otherType;", "-}", "+ */", "+public boolean isProvablyDistinct(TypeBinding otherType) {", "+\tif (this == otherType) ", "+\t    return false;", "+    if (otherType == null) ", "+        return true;", "+\t", "+    switch (kind()) {", "+", "+\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t    ParameterizedTypeBinding paramType = (ParameterizedTypeBinding) this;", "+\t\t    switch(otherType.kind()) {", "+\t\t    \tcase Binding.PARAMETERIZED_TYPE :", "+\t\t            ParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "+\t\t            if (paramType.genericType() != otherParamType.genericType()) ", "+\t\t                return true;", "+\t\t            if (!paramType.isStatic()) { // static member types do not compare their enclosing", "+\t\t            \tReferenceBinding enclosing = enclosingType();", "+\t\t            \tif (enclosing != null) {", "+\t\t            \t\tReferenceBinding otherEnclosing = otherParamType.enclosingType();", "+\t\t            \t\tif (otherEnclosing == null) return true;", "+\t\t            \t\tif ((otherEnclosing.tagBits & TagBits.HasDirectWildcard) == 0) {", "+\t\t\t\t\t\t\t\tif (enclosing != otherEnclosing) return true;", "+\t\t            \t\t} else {", "+\t\t            \t\t\tif (!enclosing.isEquivalentTo(otherParamType.enclosingType())) return true;", "+\t\t            \t\t}", "+\t\t            \t}", "+\t\t            }", "+\t\t            int length = paramType.arguments == null ? 0 : paramType.arguments.length;", "+\t\t            TypeBinding[] otherArguments = otherParamType.arguments;", "+\t\t            int otherLength = otherArguments == null ? 0 : otherArguments.length;", "+\t\t            if (otherLength != length) ", "+\t\t                return true;", "+\t\t            for (int i = 0; i < length; i++) {", "+\t\t            \tif (paramType.arguments[i].isProvablyDistinctTypeArgument(otherArguments[i], paramType, i))", "+\t\t            \t\treturn true;", "+\t\t            }", "+\t\t            return false;", "+", "+\t\t    \tcase Binding.GENERIC_TYPE :", "+\t\t            SourceTypeBinding otherGenericType = (SourceTypeBinding) otherType;", "+\t\t            if (paramType.genericType() != otherGenericType) ", "+\t\t                return true;", "+\t\t            if (!paramType.isStatic()) { // static member types do not compare their enclosing", "+\t\t            \tReferenceBinding enclosing = enclosingType();", "+\t\t            \tif (enclosing != null) {", "+\t\t            \t\tReferenceBinding otherEnclosing = otherGenericType.enclosingType();", "+\t\t            \t\tif (otherEnclosing == null) return true;", "+\t\t            \t\tif ((otherEnclosing.tagBits & TagBits.HasDirectWildcard) == 0) {", "+\t\t\t\t\t\t\t\tif (enclosing != otherEnclosing) return true;", "+\t\t            \t\t} else {", "+\t\t            \t\t\tif (!enclosing.isEquivalentTo(otherGenericType.enclosingType())) return true;", "+\t\t            \t\t}", "+\t\t            \t}", "+\t\t            }", "+\t\t            length = paramType.arguments == null ? 0 : paramType.arguments.length;", "+\t\t            otherArguments = otherGenericType.typeVariables();", "+\t\t            otherLength = otherArguments == null ? 0 : otherArguments.length;", "+\t\t            if (otherLength != length) ", "+\t\t                return true;", "+\t\t            for (int i = 0; i < length; i++) {", "+\t\t            \tif (paramType.arguments[i].isProvablyDistinctTypeArgument(otherArguments[i], paramType, i))", "+\t\t            \t\treturn true;", "+\t\t            }", "+\t\t            return false;", "+\t\t            ", "+\t\t    \tcase Binding.RAW_TYPE :", "+\t\t            return erasure() != otherType.erasure();", "+\t\t    }", "+\t        return true;", "+\t\t\t\t\t", "+\t\tcase Binding.RAW_TYPE :", "+", "+\t\t    switch(otherType.kind()) {", "+\t\t", "+\t\t    \tcase Binding.GENERIC_TYPE :", "+\t\t    \tcase Binding.PARAMETERIZED_TYPE :", "+\t\t    \tcase Binding.RAW_TYPE :", "+\t\t            return erasure() != otherType.erasure();", "+\t\t    }", "+\t        return true;", "+\t\t\t\t\t", "+\t\tdefault :", "+\t\t\tbreak;", "+\t}", "+    return true;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f1762c19ce546d8cc5d7ceb743b4e79", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "signatureAfterChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "diff": ["-\t\tproper:", "-\t\t\tTypeBinding exprType = this.left.resolvedType;", "-\t\t\tif (exprType == null) {", "-\t\t\t\t// if we get here for some kinds of poly expressions (incl. ConditionalExpression),", "-\t\t\t\t// then other ways for checking compatibility are needed:", "-                if (this.left instanceof FunctionalExpression) {", "-                    if (this.left instanceof LambdaExpression) {", "-                        // cf. NegativeLambdaExpressionTest.test412453()", "-                        LambdaExpression copy = ((LambdaExpression) this.left).getResolvedCopyForInferenceTargeting(this.right);", "-                        return (copy != null && copy.resolvedType != null && copy.resolvedType.isValidBinding()) ? TRUE : FALSE;", "-                    }", "-                }", "-                return this.left.isCompatibleWith(this.right, inferenceContext.scope) ? TRUE : FALSE;", "-\t\t\t} else if (!exprType.isValidBinding()) {", "-\t\t\t\treturn FALSE;", "-\t\t\t}", "-\t\t\tif (isCompatibleWithInLooseInvocationContext(exprType, this.right, inferenceContext)) {", "-\t\t\t\treturn TRUE;", "-\t\t\t} else if (this.left instanceof AllocationExpression && this.left.isPolyExpression()) {", "-\t\t\t\t// half-resolved diamond has a resolvedType, but that may not be the final word, try one more step of resolution:", "-            \tMethodBinding binding = ((AllocationExpression) this.left).binding(this.right, false, null);", "-            \treturn (binding != null && binding.declaringClass.isCompatibleWith(this.right, inferenceContext.scope)) ? TRUE : FALSE;", "-            } else if (this.left instanceof Invocation && this.left.isPolyExpression()) {", "-            \tInvocation invoc = (Invocation) this.left;", "-            \tMethodBinding binding = invoc.binding(this.right, false, null);", "-            \tif (binding instanceof ParameterizedGenericMethodBinding) {", "-            \t\tParameterizedGenericMethodBinding method = (ParameterizedGenericMethodBinding) binding;", "-\t\t\t\t\tInferenceContext18 leftCtx = invoc.getInferenceContext(method);", "-            \t\tif (leftCtx.stepCompleted < InferenceContext18.TYPE_INFERRED) {", "-            \t\t\tbreak proper; // fall through into nested inference below (not explicit in the spec!)", "-            \t\t}", "-            \t}", "-            }", "-\t\t\treturn FALSE;", "+\t\t\treturn this.left.isCompatibleWith(this.right, inferenceContext.scope) || this.left.isBoxingCompatibleWith(this.right, inferenceContext.scope) ? TRUE : FALSE;", "-\t\t\t\tMethodBinding previousMethod = invocation.binding(this.right, false, null);", "+\t\t\t\tMethodBinding previousMethod = invocation.binding(this.right, inferenceContext.scope);", "+\t\t\t\t\t\tif (innerCtx.stepCompleted >= InferenceContext18.TYPE_INFERRED) {", "+\t\t\t\t\t\t\t// The constraints and initial bounds that would effectively reduce to b3 are already transferred to current context during C Set construction.", "+\t\t\t\t\t\t\treturn TRUE;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tinnerCtx.outerContext = inferenceContext;", "-\t\t\t\t\tExpression[] exprs;", "-\t\t\t\t\tif (lambda.body() instanceof Expression) {", "-\t\t\t\t\t\texprs = new Expression[] {(Expression)lambda.body()};", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\texprs = lambda.resultExpressions();", "-\t\t\t\t\t}", "-\t\t\t\t\tfor (int i = 0; i < exprs.length; i++) {", "+\t\t\t\t\tExpression[] exprs = lambda.resultExpressions();", "+\t\t\t\t\tfor (int i = 0, length = exprs == null ? 0 : exprs.length; i < length; i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fff6c1321e5cd87614e7a25d7efbf65f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "6cdef9e50c0c19ef931636bb6582e431ba4ed6f0", "commitAfterChange": "a08dcb71c251f4a65da174f08c5aedb4a1c21fbd", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t \tpublic boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": " \t \tpublic boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-        if (otherType.isRawType())", "-            return erasure() == otherType.erasure();", "-        if (otherType.isParameterizedType()) {", "-            if ((otherType.tagBits & HasWildcard) == 0 && (!this.isMemberType() || !otherType.isMemberType())) ", "-            \treturn false; // should have been identical", "-            ParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "-            if (this.type != otherParamType.type) ", "-                return false;", "-            ReferenceBinding enclosing = enclosingType();", "-            if (enclosing != null && !enclosing.isEquivalentTo(otherParamType.enclosingType()))", "-                return false;", "-            int length = this.arguments == null ? 0 : this.arguments.length;", "-            TypeBinding[] otherArguments = otherParamType.arguments;", "-            int otherLength = otherArguments == null ? 0 : otherArguments.length;", "-            if (otherLength != length) ", "-                return false;", "-            // argument must be identical, only equivalence is allowed if wildcard other type", "-            for (int i = 0; i < length; i++) {", "-            \tTypeBinding argument = this.arguments[i];", "-            \tTypeBinding otherArgument = otherArguments[i];", "-\t\t\t\tif (!(argument == otherArgument", "-\t\t\t\t\t\t|| (otherArgument.isWildcard()) && argument.isEquivalentTo(otherArgument))) {", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-            }", "-            return true;", "-        }", "-        if (otherType.isWildcard())", "-        \treturn ((WildcardBinding) otherType).boundCheck(this);", "+\t    switch(otherType.bindingType()) {", "+\t", "+\t    \tcase Binding.WILDCARD_TYPE :", "+\t        \treturn ((WildcardBinding) otherType).boundCheck(this);", "+\t    \t\t", "+\t    \tcase Binding.PARAMETERIZED_TYPE :", "+\t            if ((otherType.tagBits & HasWildcard) == 0 && (!this.isMemberType() || !otherType.isMemberType())) ", "+\t            \treturn false; // should have been identical", "+\t            ParameterizedTypeBinding otherParamType = (ParameterizedTypeBinding) otherType;", "+\t            if (this.type != otherParamType.type) ", "+\t                return false;", "+\t            ReferenceBinding enclosing = enclosingType();", "+\t            if (enclosing != null && !enclosing.isEquivalentTo(otherParamType.enclosingType()))", "+\t                return false;", "+\t            int length = this.arguments == null ? 0 : this.arguments.length;", "+\t            TypeBinding[] otherArguments = otherParamType.arguments;", "+\t            int otherLength = otherArguments == null ? 0 : otherArguments.length;", "+\t            if (otherLength != length) ", "+\t                return false;", "+\t            // argument must be identical, only equivalence is allowed if wildcard other type", "+\t            for (int i = 0; i < length; i++) {", "+\t            \tTypeBinding argument = this.arguments[i];", "+\t            \tTypeBinding otherArgument = otherArguments[i];", "+\t\t\t\t\tif (!(argument == otherArgument", "+\t\t\t\t\t\t\t|| (otherArgument.isWildcard()) && argument.isEquivalentTo(otherArgument))) {", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t            }", "+\t            return true;", "+\t    \t", "+\t    \tcase Binding.RAW_TYPE :", "+\t            return erasure() == otherType.erasure();", "+\t    }"]}], "num": 67010}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a17a688689c6a579aa195fe9b588dc2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3efe9853277cee8c437adffa6b901a8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "diff": ["-\t\tif (actualType == NullBinding) return;", "+\t\tif (actualType == TypeBinding.NULL) return;", "-\t\t\tcase CONSTRAINT_EXTENDS : // A << F", "+\t\t\tcase TypeConstants.CONSTRAINT_EXTENDS : // A << F", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, CONSTRAINT_EXTENDS);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, TypeConstants.CONSTRAINT_EXTENDS);", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, CONSTRAINT_EXTENDS);", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, TypeConstants.CONSTRAINT_EXTENDS);", "-\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualType, substitutes, CONSTRAINT_EXTENDS);", "+\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualType, substitutes, TypeConstants.CONSTRAINT_EXTENDS);", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, CONSTRAINT_SUPER);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, TypeConstants.CONSTRAINT_SUPER);", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, CONSTRAINT_SUPER);", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, TypeConstants.CONSTRAINT_SUPER);", "-\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualType, substitutes, CONSTRAINT_SUPER);\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualType, substitutes, TypeConstants.CONSTRAINT_SUPER);\t\t\t\t\t\t\t", "-\t\t\tcase CONSTRAINT_EQUAL : // A == F", "+\t\t\tcase TypeConstants.CONSTRAINT_EQUAL : // A == F", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, CONSTRAINT_EQUAL);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, TypeConstants.CONSTRAINT_EQUAL);", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, CONSTRAINT_EQUAL);", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, TypeConstants.CONSTRAINT_EQUAL);", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, CONSTRAINT_EQUAL);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, TypeConstants.CONSTRAINT_EQUAL);", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, CONSTRAINT_EQUAL);", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, TypeConstants.CONSTRAINT_EQUAL);", "-\t\t\tcase CONSTRAINT_SUPER : // A >> F", "+\t\t\tcase TypeConstants.CONSTRAINT_SUPER : // A >> F", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, CONSTRAINT_SUPER);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, TypeConstants.CONSTRAINT_SUPER);", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, CONSTRAINT_SUPER);", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, TypeConstants.CONSTRAINT_SUPER);", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, CONSTRAINT_SUPER);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, TypeConstants.CONSTRAINT_SUPER);", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, CONSTRAINT_SUPER);", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, TypeConstants.CONSTRAINT_SUPER);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edde794bfc34b704dc46ea02bb1a1bf5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "b1909bb0c4bbb70fecea5345c2e954fa4204b1dd", "commitAfterChange": "1ef42230a28632657bfac5df1d197b6d35dcc83d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, InferenceContext inferenceContext, int constraint)", "diff": ["-\tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, Map substitutes, int constraint) {", "+\tpublic void collectSubstitutes(Scope scope, TypeBinding actualType, InferenceContext inferenceContext, int constraint) {", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, TypeConstants.CONSTRAINT_EXTENDS);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, inferenceContext, TypeConstants.CONSTRAINT_EXTENDS);", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, TypeConstants.CONSTRAINT_EXTENDS);", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], inferenceContext, TypeConstants.CONSTRAINT_EXTENDS);", "-\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualType, substitutes, TypeConstants.CONSTRAINT_EXTENDS);", "+\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualType, inferenceContext, TypeConstants.CONSTRAINT_EXTENDS);", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, TypeConstants.CONSTRAINT_SUPER);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, inferenceContext, TypeConstants.CONSTRAINT_SUPER);", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, TypeConstants.CONSTRAINT_SUPER);", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], inferenceContext, TypeConstants.CONSTRAINT_SUPER);", "-\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualType, substitutes, TypeConstants.CONSTRAINT_SUPER);\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualType, inferenceContext, TypeConstants.CONSTRAINT_SUPER);\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, TypeConstants.CONSTRAINT_EQUAL);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, inferenceContext, TypeConstants.CONSTRAINT_EQUAL);", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, TypeConstants.CONSTRAINT_EQUAL);", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], inferenceContext, TypeConstants.CONSTRAINT_EQUAL);", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, TypeConstants.CONSTRAINT_EQUAL);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, inferenceContext, TypeConstants.CONSTRAINT_EQUAL);", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, TypeConstants.CONSTRAINT_EQUAL);", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], inferenceContext, TypeConstants.CONSTRAINT_EQUAL);", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, TypeConstants.CONSTRAINT_SUPER);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, inferenceContext, TypeConstants.CONSTRAINT_SUPER);", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, TypeConstants.CONSTRAINT_SUPER);", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], inferenceContext, TypeConstants.CONSTRAINT_SUPER);", "-\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, substitutes, TypeConstants.CONSTRAINT_SUPER);", "+\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.bound, inferenceContext, TypeConstants.CONSTRAINT_SUPER);", "-\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], substitutes, TypeConstants.CONSTRAINT_SUPER);", "+\t\t\t\t\t\t\t\t\t\tthis.bound.collectSubstitutes(scope, actualWildcard.otherBounds[i], inferenceContext, TypeConstants.CONSTRAINT_SUPER);"]}], "num": 59286}
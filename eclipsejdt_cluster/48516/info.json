{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "faa0c8e5966304424c35e3b6bffa3e69", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "476a65e3728c12202f1daf932227783d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "489c8df8b304202e6d95c31d2657dd3b11577e64", "commitAfterChange": "11e96c9dafd71d6efeeef32eb7653fd847eaeb30", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Set invocations, List lubStack)", "signatureAfterChange": " \tprivate TypeBinding leastContainingInvocation(TypeBinding mec, Set invocations, List lubStack)", "diff": ["-\t\t\tTypeVariableBinding[] invocationVariables = invocation.typeVariables();", "-\t\t\tif (invocation.isGenericType()) {", "-\t\t\t\tfor (int i = 0; i < argLength; i++) {", "-\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[i], invocationVariables[i], (ReferenceBinding) mec, i, lubStack);", "-\t\t\t\t\tif (bestArgument == null) return null;", "-\t\t\t\t\tbestArguments[i] = bestArgument;", "-\t\t\t\t}", "-\t\t\t} else if (invocation.isParameterizedType()) {", "-\t\t\t\tParameterizedTypeBinding parameterizedType = (ParameterizedTypeBinding)invocation;", "-\t\t\t\tfor (int i = 0; i < argLength; i++) {", "-\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[i], parameterizedType.arguments[i], (ReferenceBinding) mec, i, lubStack);", "-\t\t\t\t\tif (bestArgument == null) return null;", "-\t\t\t\t\tbestArguments[i] = bestArgument;", "-\t\t\t\t}", "-\t\t\t} else if (invocation.isRawType()) {", "-\t\t\t\treturn invocation; // raw type is taking precedence", "+\t\t\tswitch (invocation.kind()) {", "+\t\t\t\tcase Binding.GENERIC_TYPE :", "+\t\t\t\t\tTypeVariableBinding[] invocationVariables = invocation.typeVariables();", "+\t\t\t\t\tfor (int i = 0; i < argLength; i++) {", "+\t\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[i], invocationVariables[i], (ReferenceBinding) mec, i, lubStack);", "+\t\t\t\t\t\tif (bestArgument == null) return null;", "+\t\t\t\t\t\tbestArguments[i] = bestArgument;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\t\tParameterizedTypeBinding parameterizedType = (ParameterizedTypeBinding)invocation;", "+\t\t\t\t\tfor (int i = 0; i < argLength; i++) {", "+\t\t\t\t\t\tTypeBinding bestArgument = leastContainingTypeArgument(bestArguments[i], parameterizedType.arguments[i], (ReferenceBinding) mec, i, lubStack);", "+\t\t\t\t\t\tif (bestArgument == null) return null;", "+\t\t\t\t\t\tbestArguments[i] = bestArgument;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Binding.RAW_TYPE :", "+\t\t\t\t\treturn invocation; // raw type is taking precedence", "+\t\t\tTypeVariableBinding[] invocationVariables = invocation.typeVariables();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6d7c736a3a6b623d3a0a6c538ab0ec9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java", "commitBeforeChange": "dedd0de2d483ac96da80680e3e3d745b2d68aa6c", "commitAfterChange": "2ddb5bdb136d602bfa0ac6f00f3f620fd9563fb5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\t  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "signatureAfterChange": "\t  \tpublic TypeBinding resolveForCatch(BlockScope scope)", "diff": ["-\t\tif (exceptionType == null) return null;", "-\t\tboolean hasError = false;", "-\t\tif (exceptionType.isBoundParameterizedType()) {", "-\t\t\tscope.problemReporter().invalidParameterizedExceptionType(exceptionType, this);", "+\t\tboolean hasError;", "+\t\tif (exceptionType == null) {", "-\t\t\t// fall thru to create the variable - avoids additional errors because the variable is missing", "-\t\t}", "-\t\tif (exceptionType.isTypeVariable()) {", "-\t\t\tscope.problemReporter().invalidTypeVariableAsException(exceptionType, this);", "-\t\t\thasError = true;", "-\t\t\t// fall thru to create the variable - avoids additional errors because the variable is missing", "-\t\t}", "-\t\tif (exceptionType.isArrayType() && ((ArrayBinding) exceptionType).leafComponentType == TypeBinding.VOID) {", "-\t\t\tscope.problemReporter().variableTypeCannotBeVoidArray(this);", "-\t\t\thasError = true;", "-\t\t\t// fall thru to create the variable - avoids additional errors because the variable is missing", "-\t\t}", "-\t\tif (exceptionType.findSuperTypeErasingTo(TypeIds.T_JavaLangThrowable, true) == null) {", "-\t\t\tscope.problemReporter().cannotThrowType(this.type, exceptionType);", "-\t\t\thasError = true;", "-\t\t\t// fall thru to create the variable - avoids additional errors because the variable is missing", "-\t\t}", "-\t\t", "+\t\t} else {", "+\t\t\thasError = false;", "+\t\t\tswitch(exceptionType.kind()) {", "+\t\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\t\tif (exceptionType.isBoundParameterizedType()) {", "+\t\t\t\t\t\thasError = true;", "+\t\t\t\t\t\tscope.problemReporter().invalidParameterizedExceptionType(exceptionType, this);", "+\t\t\t\t\t\t// fall thru to create the variable - avoids additional errors because the variable is missing", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Binding.TYPE_PARAMETER :\t\t\t\t\t", "+\t\t\t\t\tscope.problemReporter().invalidTypeVariableAsException(exceptionType, this);", "+\t\t\t\t\thasError = true;", "+\t\t\t\t\t// fall thru to create the variable - avoids additional errors because the variable is missing", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase Binding.ARRAY_TYPE :", "+\t\t\t\t\tif (((ArrayBinding) exceptionType).leafComponentType == TypeBinding.VOID) {", "+\t\t\t\t\t\tscope.problemReporter().variableTypeCannotBeVoidArray(this);", "+\t\t\t\t\t\thasError = true;", "+\t\t\t\t\t\t// fall thru to create the variable - avoids additional errors because the variable is missing", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif (exceptionType.findSuperTypeErasingTo(TypeIds.T_JavaLangThrowable, true) == null) {", "+\t\t\t\tscope.problemReporter().cannotThrowType(this.type, exceptionType);", "+\t\t\t\thasError = true;", "+\t\t\t\t// fall thru to create the variable - avoids additional errors because the variable is missing", "+\t\t\t}", "+\t\t}\t\t"]}], "num": 48516}
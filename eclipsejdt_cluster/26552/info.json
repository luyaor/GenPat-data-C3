{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1ad6e8f9696718c10ac041986e0f206", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "524aa579e4957358b8e16a551913c2ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "917603919e9d38772fd63709feb3bbda7696f523", "commitAfterChange": "fca5fd453024a315e76f840acd34b846e15423bf", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tprivate void printJavadocBlock(FormatJavadocBlock block)", "signatureAfterChange": "  \tprivate void printJavadocBlock(FormatJavadocBlock block)", "diff": ["-\t\tFormatJavadocNode previousNode = null;", "-\t\t\t\t\tif (newLines == 0 && previousNode.isText() && node.isText()) {", "+\t\t\t\t\tif (newLines == 0 && node.isText()) {", "-\t\t\t\t\t\t\tif ((this.column + tokenLength + 1) > this.formatter.preferences.comment_line_length) {", "-\t\t\t\t\t\t\t\t// finally a new line will be inserted while printing next text, just reset the column", "-\t\t\t\t\t\t\t\tthis.column = 1;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t// print one", "-\t\t\t\t\t   \t\t\tprintJavadocGapLines(previousEnd+1, nodeStart-1, newLines, this.formatter.preferences.comment_clear_blank_lines_in_javadoc_comment, false, null);", "+\t\t\t\t\t\t\tif (nodeStart > (previousEnd+1)) {", "+\t\t\t\t\t\t\t\ttokenLength++; // include space between nodes", "+\t\t\t\t\t\t\tif ((this.column + tokenLength) > this.formatter.preferences.comment_line_length) {", "+\t\t\t\t\t\t\t\t// finally a new line will be inserted while printing next text", "+\t\t\t\t\t\t\t\tnewLines = 1;", "+\t\t\t\t\t\t\t\t((FormatJavadocText)node).linesBefore = 1;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t   \t\t\tprintJavadocGapLines(previousEnd+1, nodeStart-1, newLines, this.formatter.preferences.comment_clear_blank_lines_in_javadoc_comment, false, null);", "+\t\t\t\t\t\t// Immutable tags are not formatted", "-\t\t\t\t\t\t// Immutable tags are not formatted", "-//\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-//\t\t\t\t\t\tif ((text.htmlTagIndex & JAVADOC_TAGS_ID_MASK) != JAVADOC_CODE_TAGS_ID) {", "-//\t\t\t\t\t\t\taddReplaceEdit(text.sourceStart, text.sourceEnd, buffer.toString());", "-//\t\t\t\t\t\t}", "-\t\t\tpreviousNode = node;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdb89e3203be6a7a8f42cf6fa24d64fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "844b891620178c0b92403d6108fad8dcdac272df", "commitAfterChange": "f4f81968c0fa49af0ebd2fc1f35fb9113776c823", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void testDeltaDiscardPrimaryWorkingCopy1() throws CoreException", "signatureAfterChange": " \tpublic void testDeltaDiscardPrimaryWorkingCopy1() throws CoreException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\t\tworkingCopy = getCompilationUnit(\"P/Y.java\");", "-\t\t\tworkingCopy.becomeWorkingCopy(null, null);", "+\t\t\tthis.workingCopy = getCompilationUnit(\"P/Y.java\");", "+\t\t\tthis.workingCopy.becomeWorkingCopy(null, null);", "-\t\t\tworkingCopy.discardWorkingCopy();", "+\t\t\tthis.workingCopy.discardWorkingCopy();", "-\t\t\tif (workingCopy != null) {", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t\t}"]}], "num": 26552}
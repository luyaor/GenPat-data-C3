{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "469abc585ad8f3fefaba1cd2d2c62dd1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ed632874a573095985f3ac860319e00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "e760e456d0e96ba9bce504014e582b9dbdf7e542", "commitAfterChange": "c67d112c20f07c2dcda11714ef23687a9781a753", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static void checkNeedForAssignedCast(BlockScope scope, TypeBinding expectedType, CastExpression rhs)", "signatureAfterChange": " public static void checkNeedForAssignedCast(BlockScope scope, TypeBinding expectedType, CastExpression rhs)", "diff": ["-\tif (scope.compilerOptions().getSeverity(CompilerOptions.UnnecessaryTypeCheck) == ProblemSeverities.Ignore) return;", "+\tCompilerOptions compilerOptions = scope.compilerOptions();", "+\tif (compilerOptions.getSeverity(CompilerOptions.UnnecessaryTypeCheck) == ProblemSeverities.Ignore) return;", "+\t\tif (compilerOptions.isAnnotationBasedNullAnalysisEnabled && compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\t\t// are null annotations compatible, too?", "+\t\t\tif (findNullTypeAnnotationMismatch(expectedType, castedExpressionType, -1) > 0)", "+\t\t\t\treturn; // already reported unchecked cast (nullness), say no more.", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce4477d70b8c66c659cd8dfd93487925", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayInitializer.java", "commitBeforeChange": "a51f0328f1978f4c547fe994573879b0bcceba88", "commitAfterChange": "cbe22d350fa314e6e5df169cf670cab9bb8c2a20", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\tboolean analyseResources = currentScope.compilerOptions().analyseResourceLeaks;", "+\t\t\tCompilerOptions compilerOptions = currentScope.compilerOptions();", "+\t\t\tboolean analyseResources = compilerOptions.analyseResourceLeaks;", "+\t\t\tboolean evalNullTypeAnnotations = compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8 ", "+\t\t\t\t\t\t\t\t\t\t\t\t&& compilerOptions.isAnnotationBasedNullAnalysisEnabled;", "+\t\t\t\tif (evalNullTypeAnnotations) {", "+\t\t\t\t\tcheckAgainstNullTypeAnnotation(currentScope, this.binding.elementsType(), this.expressions[i], flowContext, flowInfo);", "+\t\t\t\t}"]}], "num": 17285}
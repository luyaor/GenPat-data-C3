{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b63167d1896d344a85b47f34a514194", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62f454c8cdece4e0da6039ee5c4002ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " MethodBinding createMethod(AbstractMethodDeclaration method)", "signatureAfterChange": " MethodBinding createMethod(AbstractMethodDeclaration method)", "diff": ["-\tif (argLength > 0 && compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5) {", "-\t\tif (argTypes[--argLength].isVarArgs())", "+\tlong sourceLevel = compilerOptions().sourceLevel;", "+\tif (argLength > 0 && sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\tArgument argument = argTypes[--argLength];", "+\t\tif (argument.isVarArgs())", "+\t\tif (CharOperation.equals(argument.name, ConstantPool.This)) {", "+\t\t\tif (argLength != 0 || sourceLevel <= ClassFileConstants.JDK1_7) {", "+\t\t\t\tproblemReporter().illegalThis(argument, method, sourceLevel);", "+\t\t\t}", "+\t\t\tif (argument.annotations != null) {", "+\t\t\t\tmethod.receiverAnnotations = argument.annotations;", "+\t\t\t\tmethod.bits |= ASTNode.HasTypeAnnotations;", "+\t\t\t}", "+\t\t}", "-\t\t\tif (argTypes[argLength].isVarArgs())", "-\t\t\t\tproblemReporter().illegalVararg(argTypes[argLength], method);", "+\t\t\targument = argTypes[argLength];", "+\t\t\tif (argument.isVarArgs())", "+\t\t\t\tproblemReporter().illegalVararg(argument, method);", "+\t\t\tif (CharOperation.equals(argument.name, ConstantPool.This)) {", "+\t\t\t\tif (argLength != 0 || sourceLevel <= ClassFileConstants.JDK1_7) {", "+\t\t\t\t\tproblemReporter().illegalThis(argument, method, sourceLevel);", "+\t\t\t\t}", "+\t\t\t\tif (argument.annotations != null) {", "+\t\t\t\t\tmethod.receiverAnnotations = argument.annotations;", "+\t\t\t\t\tmethod.bits |= ASTNode.HasTypeAnnotations;", "+\t\t\t\t}", "+\t\t\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "760c3029c2f4f5d8d3fa3ee7995f98a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "ef3c2078d9cee48378a186a3e9a6e61cb6a67acc", "commitAfterChange": "18c98a5a751096350077436fcf968eb63364ccb9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tvoid buildAnonymousTypeBinding(SourceTypeBinding enclosingType, ReferenceBinding supertype)", "signatureAfterChange": " \t \tvoid buildAnonymousTypeBinding(SourceTypeBinding enclosingType, ReferenceBinding supertype)", "diff": ["-\t\tLocalTypeBinding anonymousType = buildLocalType(enclosingType, enclosingType.fPackage);", "-\t\tSourceTypeBinding sourceType = referenceContext.binding;", "+\t\tLocalTypeBinding anonymousType = buildLocalType(enclosingType, supertype, enclosingType.fPackage);", "-\t\t\tsourceType.superclass = getJavaLangObject();", "-\t\t\tsourceType.superInterfaces = new ReferenceBinding[] { supertype };", "+\t\t\tanonymousType.superclass = getJavaLangObject();", "+\t\t\tanonymousType.superInterfaces = new ReferenceBinding[] { supertype };", "-\t\t\tsourceType.superclass = supertype;", "-\t\t\tsourceType.superInterfaces = Binding.NO_SUPERINTERFACES;", "+\t\t\tanonymousType.superclass = supertype;", "+\t\t\tanonymousType.superInterfaces = Binding.NO_SUPERINTERFACES;", "+\t\t\tTypeReference typeReference = referenceContext.allocation.type;", "+\t\t\tif (typeReference != null) { // no check for enum constant body", "+\t\t\t\tif (supertype.erasure().id == TypeIds.T_JavaLangEnum) {", "+\t\t\t\t\tproblemReporter().cannotExtendEnum(anonymousType, typeReference, supertype);", "+\t\t\t\t\tanonymousType.tagBits |= TagBits.HierarchyHasProblems;\t\t", "+\t\t\t\t\tanonymousType.superclass = getJavaLangObject();", "+\t\t\t\t} else if (supertype.isFinal()) {", "+\t\t\t\t\tproblemReporter().anonymousClassCannotExtendFinalClass(typeReference, supertype);", "+\t\t\t\t\tanonymousType.tagBits |= TagBits.HierarchyHasProblems;\t\t", "+\t\t\t\t\tanonymousType.superclass = getJavaLangObject();", "+\t\t\t\t} else if ((supertype.tagBits & TagBits.HasDirectWildcard) != 0) {", "+\t\t\t\t\tproblemReporter().superTypeCannotUseWildcard(anonymousType, typeReference, supertype);", "+\t\t\t\t\tanonymousType.tagBits |= TagBits.HierarchyHasProblems;\t\t", "+\t\t\t\t\tanonymousType.superclass = getJavaLangObject();", "+\t\t\t\t}", "+\t\t\t} ", "-\t\tsourceType.verifyMethods(environment().methodVerifier());", "+\t\tanonymousType.verifyMethods(environment().methodVerifier());"]}], "num": 3251}
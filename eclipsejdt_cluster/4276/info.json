{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "321fd8b1e27885ed0c75d8e441ff1070", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77cf8c7766c7f7e397733d06d09b42b2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/Label.java", "commitBeforeChange": "dce94b0c0eeb9d47d8633b3457a8df0582e6afe6", "commitAfterChange": "ebe45f1f388a3abbe4072748912313068fb2673a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " void branch()", "signatureAfterChange": " void branch()", "diff": ["-\t} else { //Position is set. Write it!", "-\t\tcodeStream.writeSignedShort((short) (position - codeStream.position + 1));", "+\t} else {", "+\t\t/*", "+\t\t * Position is set. Write it if it is not a wide branch.", "+\t\t */", "+\t\tint offset = position - codeStream.position + 1;", "+\t\tif (Math.abs(offset) > 0x7FFF && !this.codeStream.wideMode) {", "+\t\t\tthrow new AbortMethod(CodeStream.RESTART_IN_WIDE_MODE);", "+\t\t}", "+\t\tcodeStream.writeSignedShort((short) offset);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6fe1dc00b6c31701b0b6e9ddacb425b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "0e9405a9e49c7485808bf9ceeda288829b9a70e4", "commitAfterChange": "9780986f8f62312ec3af9f68bef8ca099c5a7fef", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public static ISearchPattern createSearchPattern(String stringPattern, int searchFor, int limitTo, boolean isCaseSensitive)", "signatureAfterChange": " public static ISearchPattern createSearchPattern(String stringPattern, int searchFor, int limitTo, boolean isCaseSensitive)", "diff": ["-", "-\treturn SearchPattern.createPattern(stringPattern, searchFor, limitTo, IJavaSearchConstants.PATTERN_MATCH, isCaseSensitive);", "+\tint matchMode;", "+\tif (stringPattern.indexOf('*') != -1 || stringPattern.indexOf('?') != -1) {", "+\t\tmatchMode = IJavaSearchConstants.PATTERN_MATCH;", "+\t} else {", "+\t\tmatchMode = IJavaSearchConstants.EXACT_MATCH;", "+\t}", "+\treturn SearchPattern.createPattern(stringPattern, searchFor, limitTo, matchMode, isCaseSensitive);"]}], "num": 4276}
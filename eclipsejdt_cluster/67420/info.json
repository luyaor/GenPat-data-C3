{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd37cb1f26f897d6f7d232243770254e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cd96435a787c4ef956dc2d993b932a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "27ea6a0fbbf21aa67558c947e4511cc8d2e4373e", "commitAfterChange": "e9732d840472d86dc8cecd7870ba24211e70fbb1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprivate void checkAndSetModifiers()", "signatureAfterChange": " \t \tprivate void checkAndSetModifiers()", "diff": ["-\t\t\t\t\t~(AccPublic | AccPrivate | AccProtected | AccStatic | AccAbstract | AccFinal | AccStrictfp | AccEnum);", "+\t\t\t\t\t~(AccPublic | AccPrivate | AccProtected | AccStatic | AccAbstract | AccStrictfp | AccEnum);", "-\t\t\t\tint unexpectedModifiers = ~(AccAbstract | AccFinal | AccStrictfp | AccEnum);", "+\t\t\t\tint unexpectedModifiers = ~(AccAbstract | AccStrictfp | AccFinal | AccEnum); // add final since implicitly set for anonymous type", "-\t\t\t\tint unexpectedModifiers = ~(AccPublic | AccAbstract | AccFinal | AccStrictfp | AccEnum);", "+\t\t\t\tint unexpectedModifiers = ~(AccPublic | AccAbstract | AccStrictfp | AccEnum);", "-", "-\t\t\t// check that Final and Abstract are not set together", "-\t\t\tif ((realModifiers & (AccFinal | AccAbstract)) == (AccFinal | AccAbstract))", "-\t\t\t\tproblemReporter().illegalModifierCombinationFinalAbstractForClass(sourceType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73525f26d6d34bae19a0acb02f94eb51", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "6ee69a27bb90b4501869adce2a7020b0fadb9402", "commitAfterChange": "886d0f0c1c856616883aceae38186164d207f2a8", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprotected boolean parseReference() throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseReference() throws InvalidInputException", "diff": ["+\t\t\t\t\t\t\t// String reference are not allowed for @value tag", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t// If typeRef != null we may raise a warning here to let user know there's an unused reference...", "-\t\t\t\t\t\t\t// Currently as javadoc 1.4.2 ignore it, we do the same (see bug 69302)", "-\t\t\t\t\t\t\tif (typeRef != null) {", "-\t\t\t\t\t\t\t\tstart = this.tagSourceEnd+1;", "-\t\t\t\t\t\t\t\tpreviousPosition = start;", "-\t\t\t\t\t\t\t\ttypeRef = null;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// verify end line (expecting empty or end comment)", "-\t\t\t\t\t\t\tif (verifyEndLine(previousPosition)) {", "-\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocUnexpectedText(this.scanner.currentPosition, this.lineEnd);", "+\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t// If typeRef != null we may raise a warning here to let user know there's an unused reference...", "+\t\t\t\t\t\t// Currently as javadoc 1.4.2 ignore it, we do the same (see bug 69302)", "+\t\t\t\t\t\tif (typeRef != null) {", "+\t\t\t\t\t\t\tstart = this.tagSourceEnd+1;", "+\t\t\t\t\t\t\tpreviousPosition = start;", "+\t\t\t\t\t\t\ttypeRef = null;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// verify end line", "+\t\t\t\t\t\tif (verifyEndLine(previousPosition)) {", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocUnexpectedText(this.scanner.currentPosition, this.lineEnd);", "-\t\t\t\t\t\t\t// verify end line (expecting empty or end comment)", "-\t\t\t\t\t\t\tif (verifyEndLine(previousPosition)) {", "-\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\tif (this.tagValue == TAG_VALUE_VALUE) {", "+\t\t\t\t\t\t\t\t// String reference are not allowed for @value tag", "+\t\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidValueReference(start, getIndexPosition());", "+\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\tif (this.tagValue != TAG_VALUE_VALUE && this.sourceParser != null) {", "-//\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidReference(start, this.lineEnd);", "-\t\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocUnexpectedText(this.scanner.currentPosition, this.lineEnd);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t// verify end line", "+\t\t\t\t\t\t\tif (verifyEndLine(previousPosition)) return true;", "+\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocUnexpectedText(this.scanner.currentPosition, this.lineEnd);", "-\t\t\t\t\t\tif (this.tagValue == TAG_VALUE_VALUE && this.sourceParser != null) {", "-\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidValueReference(start, getIndexPosition());", "+\t\t\t\t\t\telse if (this.tagValue == TAG_VALUE_VALUE) {", "+\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidValueReference(start, getIndexPosition());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e9bf68d2f7e1c474507c725ba3dd352", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "0faf571a2b978290e761500f873fc8f116675788", "commitAfterChange": "16ea2a8daece1ce57aeee98ca0579c5d79d5f9c9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprivate void checkAndSetModifiers()", "signatureAfterChange": " \t \tprivate void checkAndSetModifiers()", "diff": ["-\t\t\t\t\t~(AccPublic | AccPrivate | AccProtected | AccStatic | AccAbstract | AccStrictfp | AccEnum);", "+\t\t\t\t\t~(AccPublic | AccPrivate | AccProtected | AccStatic | AccStrictfp | AccEnum);", "-\t\t\t\tint unexpectedModifiers = ~(AccAbstract | AccStrictfp | AccFinal | AccEnum); // add final since implicitly set for anonymous type", "+\t\t\t\tint unexpectedModifiers = ~(AccStrictfp | AccFinal | AccEnum); // add final since implicitly set for anonymous type", "-\t\t\t\tint unexpectedModifiers = ~(AccPublic | AccAbstract | AccStrictfp | AccEnum);", "+\t\t\t\tint unexpectedModifiers = ~(AccPublic | AccStrictfp | AccEnum);", "+\t\t\tif ((referenceContext.bits & ASTNode.HasAbstractMethods) != 0) {", "+\t\t\t\tmodifiers |= AccAbstract;", "+\t\t\t}", "+\t\t\t"]}], "num": 67420}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "282b9e8ebbbf14edec1875931f5ebe5a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46ec11f20a884807af3b1c703cdf4d7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "ddf48a7e21056eecd0111cd750a59c8617c397eb", "commitAfterChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t\tpublic void setInstantiation(TypeBinding type, InferenceVariable variable, LookupEnvironment environment)", "signatureAfterChange": " \t\tpublic void setInstantiation(TypeBinding type, InferenceVariable variable, LookupEnvironment environment)", "diff": ["-\t\t\t\tlong oldBits = ((this.instantiation != null) ? this.instantiation.tagBits : variable.tagBits)", "-\t\t\t\t\t\t\t\t& TagBits.AnnotationNullMASK;", "-\t\t\t\tlong requestedBits = type.tagBits & TagBits.AnnotationNullMASK;", "-\t\t\t\tlong newBits = (oldBits == TagBits.AnnotationNonNull) ? oldBits : requestedBits; // need to preserve @NonNull", "-\t\t\t\tif (this.instantiation != null && oldBits == newBits) {", "-\t\t\t\t\treturn; // no update needed", "+\t\t\t\tlong variableBits = variable.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\tlong allBits = type.tagBits | variableBits;", "+\t\t\t\tif (this.instantiation != null)", "+\t\t\t\t\tallBits |= this.instantiation.tagBits;", "+\t\t\t\tallBits &= TagBits.AnnotationNullMASK;", "+\t\t\t\tif (allBits == TagBits.AnnotationNullMASK) { // contradiction", "+\t\t\t\t\tallBits = variableBits;", "-\t\t\t\tif (requestedBits != newBits) {", "-\t\t\t\t\t// adjust 'type' to fit the newBits", "-\t\t\t\t\tAnnotationBinding[] annot = environment.nullAnnotationsFromTagBits(newBits);", "+\t\t\t\tif (allBits != (type.tagBits & TagBits.AnnotationNullMASK)) {", "+\t\t\t\t\tAnnotationBinding[] annot = environment.nullAnnotationsFromTagBits(allBits);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "739c67c5ad32819e02fd0f71e42c3c3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "a6d9bda80e868cca3f3164e68cf46fd5fb2642ae", "commitAfterChange": "b91ada4688442ba390f3bab334c211412d8a03f2", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "\t \t  \tprivate void rewriteModifiers(ASTNode parent, StructuralPropertyDescriptor property, int offset)", "signatureAfterChange": "\t \t  \tprivate void rewriteModifiers(ASTNode parent, StructuralPropertyDescriptor property, int offset)", "diff": ["-\t\t", "-\t\t", "-\t\tint oldModifiers= ((Integer) event.getOriginalValue()).intValue();", "-\t\tint newModifiers= ((Integer) event.getNewValue()).intValue();", "-\t\tTextEditGroup editGroup= getEditGroup(event);", "-\t\t", "-\t\t\tint tok= getScanner().readNext(offset, true);", "-\t\t\tint startPos= getScanner().getCurrentStartOffset();", "-\t\t\tint endPos= startPos;", "+\t\t\tint oldModifiers= ((Integer) event.getOriginalValue()).intValue();", "+\t\t\tint newModifiers= ((Integer) event.getNewValue()).intValue();", "+\t\t\tTextEditGroup editGroup= getEditGroup(event);", "+\t\t", "+\t\t\tTokenScanner scanner= getScanner();", "+", "+\t\t\tint tok= scanner.readNext(offset, false);", "+\t\t\tint startPos= scanner.getCurrentStartOffset();", "+\t\t\tint nextStart= startPos;", "+\t\t\t\tif (TokenScanner.isComment(tok)) {", "+\t\t\t\t\ttok= scanner.readNext(true); // next non-comment token", "+\t\t\t\t}", "-\t\t\t\ttok= getScanner().readNext(true);", "-\t\t\t\tint currPos= endPos;", "-\t\t\t\tendPos= getScanner().getCurrentStartOffset();", "+\t\t\t\ttok= getScanner().readNext(false); // include comments", "+\t\t\t\tint currPos= nextStart;", "+\t\t\t\tnextStart= getScanner().getCurrentStartOffset();", "-\t\t\t\t\tdoTextRemove(currPos, endPos - currPos, editGroup);", "+\t\t\t\t\tdoTextRemove(currPos, nextStart - currPos, editGroup);", "-\t\t\t\tif (startPos != endPos) {", "+\t\t\t\tif (startPos != nextStart) {", "-\t\t\t\tdoTextInsert(endPos, buf.toString(), editGroup);", "+\t\t\t\tdoTextInsert(nextStart, buf.toString(), editGroup);", "-\t\t\t// ignore", "-\t\t}\t\t", "+\t\t\thandleException(e);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c39a1c13ef81d8b3859746de25966ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "25d70eac1f59d17fd35f15454804710ecb835662", "commitAfterChange": "e7e2695fe5657cf6f05f673f7f1f6646805752fe", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 131, "signatureBeforeChange": " \tpublic boolean visit(Javadoc node)", "signatureAfterChange": " \tpublic boolean visit(IntersectionType node)", "diff": ["+\t */", "+\tpublic boolean visit(IntersectionType node) {", "+\t\tif (!hasChildrenChanges(node)) {", "+\t\t\treturn doVisitUnchangedChildren(node);", "+\t\t}", "+\t\tint pos= node.getStartPosition();", "+\t\tif (isChanged(node, IntersectionType.TYPES_PROPERTY)) {", "+\t\t\tpos= rewriteNodeList(node, IntersectionType.TYPES_PROPERTY, pos, Util.EMPTY_STRING, \" & \"); //$NON-NLS-1$", "+\t\t} else {", "+\t\t\tpos= doVisit(node, IntersectionType.TYPES_PROPERTY, pos);", "+\t\t}", "+\t\treturn false;", "+\t}"]}], "num": 9015}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f8b35db342fe6b9492fac4d0fe8f7f6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1501072a01e1738652fb7a9b7d0a7528", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "b569ead8ca8eb70f2238fa7623595fd9d9d2052b", "commitAfterChange": "fa3daf9bf67e6348fc32b1850f7aae915874e42e", "methodNumberBeforeChange": 351, "methodNumberAfterChange": 181, "signatureBeforeChange": " protected void ignoreInvalidConstructorDeclaration(boolean hasBody)", "signatureAfterChange": " protected void consumeInvalidConstructorDeclaration(boolean hasBody)", "diff": ["+}", "+protected void consumeInvalidConstructorDeclaration(boolean hasBody) {", "+\t// InvalidConstructorDeclaration ::= ConstructorHeader ConstructorBody ==> true", "+\t// InvalidConstructorDeclaration ::= ConstructorHeader ';' ==> false", "+", "+\t/*", "+\tthis.astStack : modifiers arguments throws statements", "+\tthis.identifierStack : name", "+\t ==>", "+\tthis.astStack : MethodDeclaration", "+\tthis.identifierStack :", "+\t*/", "+\tif (hasBody) {", "+\t\t// pop the position of the {  (body of the method) pushed in block decl", "+\t\tthis.intPtr--;", "+\t}", "+", "+\t//statements", "+\tif (hasBody) {", "+\t\tthis.realBlockPtr--;", "+\t}", "+", "+\tint length;", "+\tif (hasBody && ((length = this.astLengthStack[this.astLengthPtr--]) != 0)) {", "+\t\tthis.astPtr -= length;", "+\t}", "+\tConstructorDeclaration constructorDeclaration = (ConstructorDeclaration) this.astStack[this.astPtr];", "+\tconstructorDeclaration.bodyEnd = this.endStatementPosition;", "+\tconstructorDeclaration.declarationSourceEnd = flushCommentsDefinedPriorTo(this.endStatementPosition);", "+\tif (!hasBody) {", "+\t\tconstructorDeclaration.modifiers |= AccSemicolonBody;", "+\t}", "+}", "-}", "-protected void ignoreInvalidConstructorDeclaration(boolean hasBody) {", "-\t// InvalidConstructorDeclaration ::= ConstructorHeader ConstructorBody ==> true", "-\t// InvalidConstructorDeclaration ::= ConstructorHeader ';' ==> false", "-", "-\t/*", "-\tthis.astStack : modifiers arguments throws statements", "-\tthis.identifierStack : name", "-\t ==>", "-\tthis.astStack : MethodDeclaration", "-\tthis.identifierStack :", "-\t*/", "-\tif (hasBody) {", "-\t\t// pop the position of the {  (body of the method) pushed in block decl", "-\t\tthis.intPtr--;", "-\t}", "-", "-\t//statements", "-\tif (hasBody) {", "-\t\tthis.realBlockPtr--;", "-\t}", "-", "-\tint length;", "-\tif (hasBody && ((length = this.astLengthStack[this.astLengthPtr--]) != 0)) {", "-\t\tthis.astPtr -= length;", "-\t}", "-\tConstructorDeclaration constructorDeclaration = (ConstructorDeclaration) this.astStack[this.astPtr];", "-\tconstructorDeclaration.bodyEnd = this.endStatementPosition;", "-\tconstructorDeclaration.declarationSourceEnd = flushCommentsDefinedPriorTo(this.endStatementPosition);", "-\tif (!hasBody) {", "-\t\tconstructorDeclaration.modifiers |= AccSemicolonBody;", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23c056675f46deeb310b18706e4f9d7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "b569ead8ca8eb70f2238fa7623595fd9d9d2052b", "commitAfterChange": "fa3daf9bf67e6348fc32b1850f7aae915874e42e", "methodNumberBeforeChange": 352, "methodNumberAfterChange": 184, "signatureBeforeChange": " protected void ignoreMethodBody()", "signatureAfterChange": " protected void consumeInvalidMethodDeclaration()", "diff": ["+}", "+protected void consumeInvalidMethodDeclaration() {", "+\t// InterfaceMemberDeclaration ::= InvalidMethodDeclaration", "+", "+\t/*", "+\tthis.astStack : modifiers arguments throws statements", "+\tthis.identifierStack : type name", "+\tthis.intStack : dim dim dim", "+\t ==>", "+\tthis.astStack : MethodDeclaration", "+\tthis.identifierStack :", "+\tthis.intStack : ", "+\t*/", "+", "+\t// pop the position of the {  (body of the method) pushed in block decl", "+\tthis.intPtr--;", "+\t// retrieve end position of method declarator", "+", "+\t//statements", "+\tthis.realBlockPtr--;", "+\tint length;", "+\tif ((length = this.astLengthStack[this.astLengthPtr--]) != 0) {", "+\t\tthis.astPtr -= length;", "+\t}", "+", "+\t//watch for } that could be given as a unicode ! ( u007D is '}' )", "+\tMethodDeclaration md = (MethodDeclaration) this.astStack[this.astPtr];", "+\tmd.bodyEnd = this.endPosition;", "+\tmd.declarationSourceEnd = flushCommentsDefinedPriorTo(this.endStatementPosition);", "+", "+\t// report the problem and continue the parsing - narrowing the problem onto the method", "+\tproblemReporter().abstractMethodNeedingNoBody(md);", "-}", "-protected void ignoreMethodBody() {", "-\t// InterfaceMemberDeclaration ::= InvalidMethodDeclaration", "-", "-\t/*", "-\tthis.astStack : modifiers arguments throws statements", "-\tthis.identifierStack : type name", "-\tthis.intStack : dim dim dim", "-\t ==>", "-\tthis.astStack : MethodDeclaration", "-\tthis.identifierStack :", "-\tthis.intStack : ", "-\t*/", "-", "-\t// pop the position of the {  (body of the method) pushed in block decl", "-\tthis.intPtr--;", "-\t// retrieve end position of method declarator", "-", "-\t//statements", "-\tthis.realBlockPtr--;", "-\tint length;", "-\tif ((length = this.astLengthStack[this.astLengthPtr--]) != 0) {", "-\t\tthis.astPtr -= length;", "-\t}", "-", "-\t//watch for } that could be given as a unicode ! ( u007D is '}' )", "-\tMethodDeclaration md = (MethodDeclaration) this.astStack[this.astPtr];", "-\tmd.bodyEnd = this.endPosition;", "-\tmd.declarationSourceEnd = flushCommentsDefinedPriorTo(this.endStatementPosition);", "-", "-\t// report the problem and continue the parsing - narrowing the problem onto the method", "-\tproblemReporter().abstractMethodNeedingNoBody(md);"]}], "num": 34379}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "14ba1a8fe091a89ce0dfa68cec7aba9a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "243c412e6850bdc0ebfdc19ec50ca613", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceField.java", "commitBeforeChange": "d3438591c6303b10ffdfe04935a028a1a295bc18", "commitAfterChange": "7acc82a1aa09d7f270cc2a9bb108a01a76d98132", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object getConstant() throws JavaModelException", "signatureAfterChange": " public Object getConstant() throws JavaModelException", "diff": ["-\tif (this.constant != null) {", "-\t\treturn this.constant;", "-\t}", "+\tObject constant = null;\t", "-\t\tthis.constant = new Integer(constantSource);", "+\t\tconstant = new Integer(constantSource);", "-\t\tthis.constant = new Short(constantSource);", "+\t\tconstant = new Short(constantSource);", "-\t\tthis.constant = new Byte(constantSource);", "+\t\tconstant = new Byte(constantSource);", "-\t\tthis.constant = new Boolean(constantSource);", "+\t\tconstant = new Boolean(constantSource);", "-\t\tthis.constant = new Character(constantSource.charAt(0));", "+\t\tconstant = new Character(constantSource.charAt(0));", "-\t\tthis.constant = new Double(constantSource);", "+\t\tconstant = new Double(constantSource);", "-\t\tthis.constant = new Float(constantSource);", "+\t\tconstant = new Float(constantSource);", "-\t\tthis.constant = new Long(constantSource);", "+\t\tconstant = new Long(constantSource);", "-\t\tthis.constant = constantSource;", "+\t\tconstant = constantSource;", "-\treturn this.constant;", "+\treturn constant;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be4c5be1fbf779af4baf7d398c119c5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DocCommentParser.java", "commitBeforeChange": "12f65faa0a3b984e9751d243a3eab6e6ab078ed7", "commitAfterChange": "36d2cf066100445cbe45dd4cf851204404f7d76f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected void pushText(int start, int end)", "signatureAfterChange": " \tprotected void pushText(int start, int end)", "diff": ["+", "+\t\t// Create text element", "+", "+\t\t// Search previous tag on which to add the text element", "+", "+\t\t// If we're in a inline tag, then retrieve previous tag in its fragments", "+\t\tList fragments = previousTag.fragments();", "-\t\t\tif (previousTag.fragments().size() == 0) {", "+\t\t\tint size = fragments.size();", "+\t\t\tif (size == 0) {", "+\t\t\t\t// no existing fragment => just add the element", "-\t\t\t\tpreviousTag.fragments().add(inlineTag);", "+\t\t\t\tfragments.add(inlineTag);", "-\t\t\t\tASTNode inlineTag = (ASTNode) previousTag.fragments().get(previousTag.fragments().size()-1);", "-\t\t\t\tif (inlineTag.getNodeType() == ASTNode.TAG_ELEMENT) {", "-\t\t\t\t\tpreviousTag = (TagElement) inlineTag;", "+\t\t\t\t// If last fragment is a tag, then use it as previous tag", "+\t\t\t\tASTNode lastFragment = (ASTNode) fragments.get(size-1);", "+\t\t\t\tif (lastFragment.getNodeType() == ASTNode.TAG_ELEMENT) {", "+\t\t\t\t\tpreviousTag = (TagElement) lastFragment;", "+", "+\t\t// Add the text"]}], "num": 23709}
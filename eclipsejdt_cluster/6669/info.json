{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7792b7e253f292db4724aacaf6d1c3b5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6accfd7d524a08915dfd7135b4f0d9b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "a6b76fc7d7890cbbcb2fc001b8031466dd0ad995", "commitAfterChange": "8c05bff0d88a6a537ed2accc1c62c5430e927aee", "methodNumberBeforeChange": 348, "methodNumberAfterChange": 348, "signatureBeforeChange": " public void typeHiding(TypeParameter typeParam, Binding hidden)", "signatureAfterChange": " public void typeHiding(TypeDeclaration typeDecl, TypeVariableBinding hiddenTypeParameter)", "diff": ["+}", "+public void typeHiding(TypeDeclaration typeDecl, TypeVariableBinding hiddenTypeParameter) {", "+\tint severity = computeSeverity(IProblem.TypeHidingTypeParameterFromType);", "+\tif (severity == ProblemSeverities.Ignore) return;", "+\tif (hiddenTypeParameter.declaringElement instanceof TypeBinding) {", "+\t\tTypeBinding declaringType = (TypeBinding) hiddenTypeParameter.declaringElement;", "+\t\tthis.handle(", "+\t\t\tIProblem.TypeHidingTypeParameterFromType,", "+\t\t\tnew String[] { new String(typeDecl.name) , new String(hiddenTypeParameter.readableName()), new String(declaringType.readableName())  },", "+\t\t\tnew String[] { new String(typeDecl.name) , new String(hiddenTypeParameter.shortReadableName()), new String(declaringType.shortReadableName()) },", "+\t\t\tseverity,", "+\t\t\ttypeDecl.sourceStart,", "+\t\t\ttypeDecl.sourceEnd);", "+\t} else {", "+\t\t// type parameter of generic method", "+\t\tMethodBinding declaringMethod = (MethodBinding) hiddenTypeParameter.declaringElement;", "+\t\tthis.handle(", "+\t\t\t\tIProblem.TypeHidingTypeParameterFromMethod,", "+\t\t\t\tnew String[] { ", "+\t\t\t\t\t\tnew String(typeDecl.name), ", "+\t\t\t\t\t\tnew String(hiddenTypeParameter.readableName()),", "+\t\t\t\t\t\tnew String(declaringMethod.selector),", "+\t\t\t\t\t\ttypesAsString(declaringMethod.isVarargs(), declaringMethod.parameters, false),", "+\t\t\t\t\t\tnew String(declaringMethod.declaringClass.readableName()),\t\t\t\t\t\t", "+\t\t\t\t},", "+\t\t\t\tnew String[] { ", "+\t\t\t\t\t\tnew String(typeDecl.name),", "+\t\t\t\t\t\tnew String(hiddenTypeParameter.shortReadableName()),", "+\t\t\t\t\t\tnew String(declaringMethod.selector),", "+\t\t\t\t\t\ttypesAsString(declaringMethod.isVarargs(), declaringMethod.parameters, true),", "+\t\t\t\t\t\tnew String(declaringMethod.declaringClass.shortReadableName()),\t\t\t\t\t\t", "+\t\t\t\t},", "+\t\t\t\tseverity,", "+\t\t\t\ttypeDecl.sourceStart,", "+\t\t\t\ttypeDecl.sourceEnd);", "+\t}", "+}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4b5ac8c115cff1183e2098c2139ec71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "0241b6a034ef8fa4f27f3bd260b936d3f2c0aea7", "commitAfterChange": "99074098c6405e18b1f1a04aabe7c2838c777448", "methodNumberBeforeChange": 126, "methodNumberAfterChange": 126, "signatureBeforeChange": " public void illegalInstanceOfGenericType(TypeBinding checkedType, ASTNode location)", "signatureAfterChange": " public void illegalInstanceOfGenericType(TypeBinding checkedType, ASTNode location)", "diff": ["-\tif (checkedType.isTypeVariable()) {", "+\tTypeBinding erasedType = checkedType.leafComponentType().erasure();", "+\tStringBuffer recommendedFormBuffer = new StringBuffer(10);", "+\trecommendedFormBuffer.append(erasedType.sourceName());", "+\tint count = erasedType.typeVariables().length;", "+\tif (count > 0) {", "+\t\trecommendedFormBuffer.append('<');", "+\t\tfor (int i = 0; i < count; i++) {", "+\t\t\tif (i > 0) {", "+\t\t\t\trecommendedFormBuffer.append(',');", "+\t\t\t}", "+\t\t\trecommendedFormBuffer.append('?');", "+\t\t}", "+\t\trecommendedFormBuffer.append('>');", "+\t}", "+\tfor (int i = 0, dim = checkedType.dimensions(); i < dim; i++) {", "+\t\trecommendedFormBuffer.append(\"[]\"); //$NON-NLS-1$", "+\t}", "+\tString recommendedForm = recommendedFormBuffer.toString();", "+\tif (checkedType.leafComponentType().isTypeVariable()) {", "-\t\tIProblem.IllegalInstanceofTypeParameter,", "-\t\t\tnew String[] { new String(checkedType.readableName()), new String(checkedType.erasure().readableName())},", "-\t\t\tnew String[] { new String(checkedType.shortReadableName()), new String(checkedType.erasure().shortReadableName())},", "-\t\t\tlocation.sourceStart,", "-\t\t\tlocation.sourceEnd);", "+\t\t\tIProblem.IllegalInstanceofTypeParameter,", "+\t\t\tnew String[] { new String(checkedType.readableName()), recommendedForm, },", "+\t\t\tnew String[] { new String(checkedType.shortReadableName()), recommendedForm, },", "+\t\t\t\tlocation.sourceStart,", "+\t\t\t\tlocation.sourceEnd);", "-\t\tnew String[] { new String(checkedType.readableName()), new String(checkedType.erasure().sourceName())},", "-\t\tnew String[] { new String(checkedType.shortReadableName()), new String(checkedType.erasure().sourceName())},", "+\t\tnew String[] { new String(checkedType.readableName()), recommendedForm, },", "+\t\tnew String[] { new String(checkedType.shortReadableName()), recommendedForm, },"]}], "num": 6669}
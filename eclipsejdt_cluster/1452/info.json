{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9fd48c2808f249856c2cbbfc8ec357ea", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03d1230f115482e2d08c1dfed876951b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, ASTNode enclosingNode, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, ASTNode enclosingNode, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "diff": ["-\t\t\t\tif (receiverType != null) {", "+\t\t\t\tif (receiverType != null && (receiverType.tagBits & TagBits.HasMissingType) == 0) {", "-\t\t\t\t\t\tif (qualifiedBinding instanceof LocalVariableBinding) {", "-\t\t\t\t\t\t\t// complete local variable members with missing variables type", "-\t\t\t\t\t\t\t// class X {", "-\t\t\t\t\t\t\t//   void foo() {", "-\t\t\t\t\t\t\t//     Missing f;", "-\t\t\t\t\t\t\t//     f.|", "-\t\t\t\t\t\t\t//   }", "-\t\t\t\t\t\t\t// }", "-\t\t\t\t\t\t\tLocalVariableBinding localVariableBinding = (LocalVariableBinding) qualifiedBinding;", "+\t\t\t\t\t\tif(ref.tokens.length == 1) {", "+\t\t\t\t\t\t\tif (qualifiedBinding instanceof LocalVariableBinding) {", "+\t\t\t\t\t\t\t\t// complete local variable members with missing variables type", "+\t\t\t\t\t\t\t\t// class X {", "+\t\t\t\t\t\t\t\t//   void foo() {", "+\t\t\t\t\t\t\t\t//     Missing f;", "+\t\t\t\t\t\t\t\t//     f.|", "+\t\t\t\t\t\t\t\t//   }", "+\t\t\t\t\t\t\t\t// }", "+\t\t\t\t\t\t\t\tLocalVariableBinding localVariableBinding = (LocalVariableBinding) qualifiedBinding;", "+\t\t\t\t\t\t\t\tfindFieldsAndMethodsFromMissingType(", "+\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\t\t\t\tlocalVariableBinding.declaration.type,", "+\t\t\t\t\t\t\t\t\t\tlocalVariableBinding.declaringScope,", "+\t\t\t\t\t\t\t\t\t\tref,", "+\t\t\t\t\t\t\t\t\t\tscope);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t// complete field members with missing fields type", "+\t\t\t\t\t\t\t\t// class X {", "+\t\t\t\t\t\t\t\t//   Missing f;", "+\t\t\t\t\t\t\t\t//   void foo() {", "+\t\t\t\t\t\t\t\t//     f.|", "+\t\t\t\t\t\t\t\t//   }", "+\t\t\t\t\t\t\t\t// }", "+\t\t\t\t\t\t\t\tfindFieldsAndMethodsFromMissingFieldType(ref.tokens[0], scope, ref, insideTypeAnnotation);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tfindFieldsAndMethodsFromMissingType(", "-\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\tlocalVariableBinding.declaration.type,", "-\t\t\t\t\t\t\t\t\tlocalVariableBinding.declaringScope,", "-\t\t\t\t\t\t\t\t\tref,", "-\t\t\t\t\t\t\t\t\tscope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef86e49cff531a798467e30db452b5f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/diagnose/Util.java", "commitBeforeChange": "5fa6afe954089094ae8cca4de90fd35757e48b64", "commitAfterChange": "ae67359ba1af0f32a3cb74678feaffc1673aa2c9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tprivate static void computeDietRange0(TypeDeclaration[] types)", "signatureAfterChange": " \t \tprivate static void computeDietRange0(TypeDeclaration[] types)", "diff": ["-\t\t\t\t\tif(!method.isDefaultConstructor() && !method.isClinit()) {", "-\t\t\t\t\t\taddInterval(method.bodyStart, method.bodyEnd);", "+\t\t\t\t\tif(!method.isDefaultConstructor()", "+\t\t\t\t\t\t&& !method.isClinit()", "+\t\t\t\t\t\t&& (method.modifiers & CompilerModifiers.AccSemicolonBody) == 0) {", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tint flags = method.sourceEnd + 1 == method.bodyStart ? LBRACE_MISSING : NO_FLAG;", "+\t\t\t\t\t\taddInterval(method.bodyStart, method.bodyEnd, flags);", "-\t\t\t\t\t\taddInterval(initializer.sourceStart, initializer.sourceEnd);", "+\t\t\t\t\t\taddInterval(initializer.bodyStart, initializer.bodyEnd);"]}], "num": 1452}
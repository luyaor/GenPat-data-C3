{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1235afdfa64e0f3f62927694e0d51144", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46ded1f97aaa670aa3edd2b3ed46876e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AbstractIndexer.java", "commitBeforeChange": "cbf4d8b0c602d0860355a0bb315f58708fa257d2", "commitAfterChange": "0d8c4f28f9db6373751aa6d7cffbf4e0fcb51948", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void addMethodDeclaration(char[] methodName, char[][] parameterTypes, char[] returnType, char[][] exceptionTypes)", "signatureAfterChange": " public void addMethodDeclaration(char[] methodName, char[][] parameterTypes, char[] returnType, char[][] exceptionTypes)", "diff": ["+public void addMethodDeclaration(char[] methodName, char[][] parameterTypes, char[] returnType, char[][] exceptionTypes) {", "+\tint argCount = parameterTypes == null ? 0 : parameterTypes.length;", "+\tthis.output.addRef(MethodPattern.createDeclaration(methodName, argCount));", "+\tfor (int i = 0; i < argCount; i++)", "+\t\taddTypeReference(parameterTypes[i]);", "+\tif (exceptionTypes != null)", "+\t\tfor (int i = 0, max = exceptionTypes.length; i < max; i++)", "+\t\t\taddTypeReference(exceptionTypes[i]);", "+\tif (returnType != null)", "+\t\taddTypeReference(returnType);", "-public void addMethodDeclaration(char[] methodName, char[][] parameterTypes, char[] returnType, char[][] exceptionTypes){", "-\t// Calculate the number of arguments of the method", "-\tint numberOfArguments = 0;", "-\tif (parameterTypes != null){", "-\t\tnumberOfArguments = parameterTypes.length;", "-\t\tfor (int i = 0; i < numberOfArguments; i++){", "-\t\t\tthis.addTypeReference(parameterTypes[i]);", "-\t\t}", "-\t}", "-\t//convert the number of arguments into a char array", "-\tchar[] countChars;", "-\tif (numberOfArguments < 10) {", "-\t\tcountChars = COUNTS[numberOfArguments];", "-\t} else {", "-\t\tcountChars = String.valueOf(numberOfArguments).toCharArray();", "-\t}", "-\t//add the reference", "-\tthis.output.addRef(concat(METHOD_DECL, methodName, countChars, SEPARATOR));", "-", "-\tif (exceptionTypes != null){", "-\t\tfor (int i = 0, max = exceptionTypes.length; i < max; i++){", "-\t\t\tthis.addTypeReference(exceptionTypes[i]);", "-\t\t}", "-\t}", "-\tif (returnType != null) this.addTypeReference(returnType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd7692ab449709432f0a2f1c3cc67398", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AbstractIndexer.java", "commitBeforeChange": "cbf4d8b0c602d0860355a0bb315f58708fa257d2", "commitAfterChange": "0d8c4f28f9db6373751aa6d7cffbf4e0fcb51948", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void addConstructorDeclaration(char[] typeName, char[][] parameterTypes, char[][] exceptionTypes)", "signatureAfterChange": " public void addConstructorDeclaration(char[] typeName, char[][] parameterTypes, char[][] exceptionTypes)", "diff": ["-public void addConstructorDeclaration(char[] typeName, char[][] parameterTypes, char[][] exceptionTypes){", "-\t// Calculate the number of arguments of the constructor", "-\tint numberOfArguments = 0;", "-\tif (parameterTypes != null){", "-\t\tnumberOfArguments = parameterTypes.length;", "-\t\tfor (int i = 0; i < numberOfArguments; i++){", "-\t\t\tthis.addTypeReference(parameterTypes[i]);", "-\t\t}", "-\t}", "-\t//convert the number of arguments into a char array", "-\tchar[] countChars;", "-\tif (numberOfArguments < 10) {", "-\t\tcountChars = COUNTS[numberOfArguments];", "-\t} else {", "-\t\tcountChars = String.valueOf(numberOfArguments).toCharArray();", "-\t}", "-\t//add the reference", "-\tthis.output.addRef(concat(CONSTRUCTOR_DECL, CharOperation.lastSegment(typeName,'.'), countChars, SEPARATOR));", "+public void addConstructorDeclaration(char[] typeName, char[][] parameterTypes, char[][] exceptionTypes) {", "+\tint argCount = parameterTypes == null ? 0 : parameterTypes.length;", "+\tthis.output.addRef(ConstructorPattern.createDeclaration(CharOperation.lastSegment(typeName,'.'), argCount));", "-\tif (exceptionTypes != null){", "-\t\tfor (int i = 0, max = exceptionTypes.length; i < max; i++){", "-\t\t\tthis.addTypeReference(exceptionTypes[i]);", "-\t\t}", "-\t}", "+\tfor (int i = 0; i < argCount; i++)", "+\t\taddTypeReference(parameterTypes[i]);", "+\tif (exceptionTypes != null)", "+\t\tfor (int i = 0, max = exceptionTypes.length; i < max; i++)", "+\t\t\taddTypeReference(exceptionTypes[i]);"]}], "num": 65174}
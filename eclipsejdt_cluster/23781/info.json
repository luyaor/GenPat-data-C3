{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e03b1522b9ccfcd5334464f19bb67e2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee908b49ebd2a0183cb0660454838a33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "c67d112c20f07c2dcda11714ef23687a9781a753", "commitAfterChange": "af79dfe4ab6f88841082d7727b71d3b65b4f7778", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, int nullStatus)", "signatureAfterChange": " void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, int nullStatus)", "diff": ["-\t\tint severity = findNullTypeAnnotationMismatch(methodBinding.returnType, this.expression.resolvedType, nullStatus);", "-\t\tif (severity == 2) {", "-\t\t\tscope.problemReporter().nullityMismatchingTypeAnnotation(this.expression, this.expression.resolvedType, methodBinding.returnType, severity);", "-\t\t\treturn;", "-\t\t} else if (severity == 1) {", "+\t\tNullAnnotationStatus annotationStatus = findNullTypeAnnotationMismatch(methodBinding.returnType, this.expression.resolvedType, nullStatus);", "+\t\tif (annotationStatus.isDefiniteMismatch()) {", "+\t\t\tscope.problemReporter().nullityMismatchingTypeAnnotation(this.expression, this.expression.resolvedType, methodBinding.returnType, annotationStatus);", "+\t\t} else if (annotationStatus.isUnchecked()) {", "-\t\t\treturn;", "-\t}", "-\tif (nullStatus != FlowInfo.NON_NULL) {", "+\t} else if (nullStatus != FlowInfo.NON_NULL) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff1ce313f1c5ff1f3d5f9e913c4d4e65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " void analyseOneArgument18(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, \t\tTypeBinding expectedType, Expression argument)", "signatureAfterChange": " void analyseOneArgument18(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, \t\tTypeBinding expectedType, Expression argument, Boolean expectedNonNullness, TypeBinding originalExpected)", "diff": ["-\t\tTypeBinding expectedType, Expression argument) {", "+\t\tTypeBinding expectedType, Expression argument, Boolean expectedNonNullness, TypeBinding originalExpected) {", "+\t", "+\t// here we consume special case information generated in the ctor of ParameterizedGenericMethodBinding (see there):", "+\tint statusFromAnnotatedNull = expectedNonNullness == Boolean.TRUE ? nullStatus : 0;  ", "+\t", "-\tif (annotationStatus.isDefiniteMismatch()) {", "+\t", "+\tif (!annotationStatus.isAnyMismatch() && statusFromAnnotatedNull != 0)", "+\t\texpectedType = originalExpected; // to avoid reports mentioning '@NonNull null'!", "+\t", "+\tif (annotationStatus.isDefiniteMismatch() || statusFromAnnotatedNull == FlowInfo.NULL) {", "-\t} else if (annotationStatus.isUnchecked()) {", "+\t} else if (annotationStatus.isUnchecked() || (statusFromAnnotatedNull & FlowInfo.POTENTIALLY_NULL) != 0) {"]}], "num": 23781}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "313bb85228765e77322183f6d8317d42", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b58fe71acec76f19c28f237fdd04ea58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "246965b39748e3da2ea49457412592390c45caa5", "commitAfterChange": "b0e753009ffb9bf0d92f75f621fb0d6188adb57e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate TextEdit formatComment(int kind, String source, int indentationLevel, String lineSeparator, IRegion[] regions)", "signatureAfterChange": "  \tprivate TextEdit formatComments(String source, int kind, IRegion[] regions)", "diff": ["+", "+\tprivate TextEdit formatComments(String source, int kind, IRegion[] regions) {", "+\t\tMultiTextEdit result = new MultiTextEdit();", "+\t\tif (!init(source))", "+\t\t\treturn result;", "+", "+\t\tCommentsPreparator commentsPreparator = new CommentsPreparator(this.tokenManager, this.workingOptions,", "+\t\t\t\tthis.sourceLevel);", "+\t\tCommentWrapExecutor commentWrapper = new CommentWrapExecutor(this.tokenManager, this.workingOptions);", "+\t\tswitch (kind) {", "+\t\t\tcase K_JAVA_DOC:", "+\t\t\t\tASTParser parser = ASTParser.newParser(AST.JLS8);", "+\t\t\t\tfor (Token token : this.tokens) {", "+\t\t\t\t\tif (token.tokenType == TokenNameCOMMENT_JAVADOC) {", "+\t\t\t\t\t\tparser.setSourceRange(token.originalStart, token.countChars());", "+\t\t\t\t\t\tCompilationUnit cu = (CompilationUnit) parseSourceCode(parser, ASTParser.K_COMPILATION_UNIT,", "+\t\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\tJavadoc javadoc = (Javadoc) cu.getCommentList().get(0);", "+\t\t\t\t\t\tjavadoc.accept(commentsPreparator);", "+\t\t\t\t\t\tint startPosition = this.tokenManager.findSourcePositionInLine(token.originalStart);", "+\t\t\t\t\t\tcommentWrapper.wrapMultiLineComment(token, startPosition, false, false);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase K_MULTI_LINE_COMMENT:", "+\t\t\t\tfor (int i = 0; i < this.tokens.size(); i++) {", "+\t\t\t\t\tToken token = this.tokens.get(i);", "+\t\t\t\t\tif (token.tokenType == TokenNameCOMMENT_BLOCK) {", "+\t\t\t\t\t\tcommentsPreparator.handleBlockComment(i);", "+\t\t\t\t\t\tint startPosition = this.tokenManager.findSourcePositionInLine(token.originalStart);", "+\t\t\t\t\t\tcommentWrapper.wrapMultiLineComment(token, startPosition, false, false);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase K_SINGLE_LINE_COMMENT:", "+\t\t\t\tfor (int i = 0; i < this.tokens.size(); i++) {", "+\t\t\t\t\tToken token = this.tokens.get(i);", "+\t\t\t\t\tif (token.tokenType == TokenNameCOMMENT_LINE) {", "+\t\t\t\t\t\tcommentsPreparator.handleLineComment(i);", "+\t\t\t\t\t\tif (i >= this.tokens.size() || this.tokens.get(i) != token) {", "+\t\t\t\t\t\t\t// current token has been removed and merged with previous one", "+\t\t\t\t\t\t\ti--;", "+\t\t\t\t\t\t\ttoken = this.tokens.get(i);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint startPosition = this.tokenManager.findSourcePositionInLine(token.originalStart);", "+\t\t\t\t\t\tcommentWrapper.wrapLineComment(token, startPosition);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tthrow new AssertionError(String.valueOf(kind));", "+\t\t}", "+", "+\t\tthis.tokenManager.applyFormatOff();", "+", "+\t\tTextEditsBuilder resultBuilder = new TextEditsBuilder(source, regions, this.tokenManager, this.workingOptions);", "+\t\tresultBuilder.setAlignChar(DefaultCodeFormatterOptions.SPACE);", "+\t\tfor (Token token : this.tokens) {", "+\t\t\tList<Token> structure = token.getInternalStructure();", "+\t\t\tif (structure != null && !structure.isEmpty())", "+\t\t\t\tresultBuilder.processComment(token);", "+\t\t}", "+", "+\t\tfor (TextEdit edit : resultBuilder.getEdits()) {", "+\t\t\tresult.addChild(edit);", "+\t\t}", "+\t\treturn result;", "+\t}", "-\t */", "-\tprivate TextEdit formatComment(int kind, String source, int indentationLevel, String lineSeparator, IRegion[] regions) {", "-\t\tObject oldOption = oldCommentFormatOption();", "-\t\tboolean isFormattingComments = false;", "-\t\tif (oldOption == null) {", "-\t\t\tswitch (kind & K_MASK) {", "-\t\t\t\tcase K_SINGLE_LINE_COMMENT:", "-\t\t\t\t\tisFormattingComments = DefaultCodeFormatterConstants.TRUE.equals(this.options.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_FORMAT_LINE_COMMENT));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase K_MULTI_LINE_COMMENT:", "-\t\t\t\t\tisFormattingComments = DefaultCodeFormatterConstants.TRUE.equals(this.options.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_FORMAT_BLOCK_COMMENT));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase K_JAVA_DOC:", "-\t\t\t\t\tisFormattingComments = DefaultCodeFormatterConstants.TRUE.equals(this.options.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_FORMAT_JAVADOC_COMMENT));", "-\t\t} else {", "-\t\t\tisFormattingComments = DefaultCodeFormatterConstants.TRUE.equals(oldOption);", "-\t\tif (isFormattingComments) {", "-\t\t\tif (lineSeparator != null) {", "-\t\t\t\tthis.preferences.line_separator = lineSeparator;", "-\t\t\t} else {", "-\t\t\t\tthis.preferences.line_separator = Util.LINE_SEPARATOR;", "-\t\t\t}", "-\t\t\tthis.preferences.initial_indentation_level = indentationLevel;", "-\t\t\tif (this.codeSnippetParsingUtil == null) this.codeSnippetParsingUtil = new CodeSnippetParsingUtil();", "-\t\t\tthis.codeSnippetParsingUtil.parseCompilationUnit(source.toCharArray(), this.defaultCompilerOptions, true);", "-\t\t\tthis.newCodeFormatter = new CodeFormatterVisitor(this.preferences, this.options, regions, this.codeSnippetParsingUtil, true);", "-\t\t\tIRegion coveredRegion = getCoveredRegion(regions);", "-\t\t\tint start = coveredRegion.getOffset();", "-\t\t\tint end = start + coveredRegion.getLength();", "-\t\t\tthis.newCodeFormatter.formatComment(kind, source, start, end, indentationLevel);", "-\t\t\treturn this.newCodeFormatter.scribe.getRootEdit();", "-\t\t}", "-\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fed3fa86e14b51148b8fa43a02f9c38f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate TextEdit formatComment(int kind, String source, int indentationLevel, String lineSeparator, IRegion[] regions)", "signatureAfterChange": "  \tprivate TextEdit formatComments(String source, int kind, IRegion[] regions)", "diff": ["+", "+\tprivate TextEdit formatComments(String source, int kind, IRegion[] regions) {", "+\t\tMultiTextEdit result = new MultiTextEdit();", "+\t\tif (!init(source))", "+\t\t\treturn result;", "+", "+\t\tCommentsPreparator commentsPreparator = new CommentsPreparator(this.tokenManager, this.workingOptions,", "+\t\t\t\tthis.sourceLevel);", "+\t\tCommentWrapExecutor commentWrapper = new CommentWrapExecutor(this.tokenManager, this.workingOptions);", "+\t\tswitch (kind) {", "+\t\t\tcase K_JAVA_DOC:", "+\t\t\t\tASTParser parser = ASTParser.newParser(AST.JLS8);", "+\t\t\t\tfor (Token token : this.tokens) {", "+\t\t\t\t\tif (token.tokenType == TokenNameCOMMENT_JAVADOC) {", "+\t\t\t\t\t\tparser.setSourceRange(token.originalStart, token.countChars());", "+\t\t\t\t\t\tCompilationUnit cu = (CompilationUnit) parseSourceCode(parser, ASTParser.K_COMPILATION_UNIT,", "+\t\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\tJavadoc javadoc = (Javadoc) cu.getCommentList().get(0);", "+\t\t\t\t\t\tjavadoc.accept(commentsPreparator);", "+\t\t\t\t\t\tint startPosition = this.tokenManager.findSourcePositionInLine(token.originalStart);", "+\t\t\t\t\t\tcommentWrapper.wrapMultiLineComment(token, startPosition, false, false);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase K_MULTI_LINE_COMMENT:", "+\t\t\t\tfor (int i = 0; i < this.tokens.size(); i++) {", "+\t\t\t\t\tToken token = this.tokens.get(i);", "+\t\t\t\t\tif (token.tokenType == TokenNameCOMMENT_BLOCK) {", "+\t\t\t\t\t\tcommentsPreparator.handleBlockComment(i);", "+\t\t\t\t\t\tint startPosition = this.tokenManager.findSourcePositionInLine(token.originalStart);", "+\t\t\t\t\t\tcommentWrapper.wrapMultiLineComment(token, startPosition, false, false);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase K_SINGLE_LINE_COMMENT:", "+\t\t\t\tfor (int i = 0; i < this.tokens.size(); i++) {", "+\t\t\t\t\tToken token = this.tokens.get(i);", "+\t\t\t\t\tif (token.tokenType == TokenNameCOMMENT_LINE) {", "+\t\t\t\t\t\tcommentsPreparator.handleLineComment(i);", "+\t\t\t\t\t\tif (i >= this.tokens.size() || this.tokens.get(i) != token) {", "+\t\t\t\t\t\t\t// current token has been removed and merged with previous one", "+\t\t\t\t\t\t\ti--;", "+\t\t\t\t\t\t\ttoken = this.tokens.get(i);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint startPosition = this.tokenManager.findSourcePositionInLine(token.originalStart);", "+\t\t\t\t\t\tcommentWrapper.wrapLineComment(token, startPosition);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tthrow new AssertionError(String.valueOf(kind));", "+\t\t}", "+", "+\t\tthis.tokenManager.applyFormatOff();", "+", "+\t\tTextEditsBuilder resultBuilder = new TextEditsBuilder(source, regions, this.tokenManager, this.workingOptions);", "+\t\tresultBuilder.setAlignChar(DefaultCodeFormatterOptions.SPACE);", "+\t\tfor (Token token : this.tokens) {", "+\t\t\tList<Token> structure = token.getInternalStructure();", "+\t\t\tif (structure != null && !structure.isEmpty())", "+\t\t\t\tresultBuilder.processComment(token);", "+\t\t}", "+", "+\t\tfor (TextEdit edit : resultBuilder.getEdits()) {", "+\t\t\tresult.addChild(edit);", "+\t\t}", "+\t\treturn result;", "+\t}", "-\t */", "-\tprivate TextEdit formatComment(int kind, String source, int indentationLevel, String lineSeparator, IRegion[] regions) {", "-\t\tObject oldOption = oldCommentFormatOption();", "-\t\tboolean isFormattingComments = false;", "-\t\tif (oldOption == null) {", "-\t\t\tswitch (kind & K_MASK) {", "-\t\t\t\tcase K_SINGLE_LINE_COMMENT:", "-\t\t\t\t\tisFormattingComments = DefaultCodeFormatterConstants.TRUE.equals(this.options.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_FORMAT_LINE_COMMENT));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase K_MULTI_LINE_COMMENT:", "-\t\t\t\t\tisFormattingComments = DefaultCodeFormatterConstants.TRUE.equals(this.options.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_FORMAT_BLOCK_COMMENT));", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase K_JAVA_DOC:", "-\t\t\t\t\tisFormattingComments = DefaultCodeFormatterConstants.TRUE.equals(this.options.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_FORMAT_JAVADOC_COMMENT));", "-\t\t} else {", "-\t\t\tisFormattingComments = DefaultCodeFormatterConstants.TRUE.equals(oldOption);", "-\t\tif (isFormattingComments) {", "-\t\t\tif (lineSeparator != null) {", "-\t\t\t\tthis.preferences.line_separator = lineSeparator;", "-\t\t\t} else {", "-\t\t\t\tthis.preferences.line_separator = Util.LINE_SEPARATOR;", "-\t\t\t}", "-\t\t\tthis.preferences.initial_indentation_level = indentationLevel;", "-\t\t\tif (this.codeSnippetParsingUtil == null) this.codeSnippetParsingUtil = new CodeSnippetParsingUtil();", "-\t\t\tthis.codeSnippetParsingUtil.parseCompilationUnit(source.toCharArray(), this.defaultCompilerOptions, true);", "-\t\t\tthis.newCodeFormatter = new CodeFormatterVisitor(this.preferences, this.options, regions, this.codeSnippetParsingUtil, true);", "-\t\t\tIRegion coveredRegion = getCoveredRegion(regions);", "-\t\t\tint start = coveredRegion.getOffset();", "-\t\t\tint end = start + coveredRegion.getLength();", "-\t\t\tthis.newCodeFormatter.formatComment(kind, source, start, end, indentationLevel);", "-\t\t\treturn this.newCodeFormatter.scribe.getRootEdit();", "-\t\t}", "-\t\treturn null;"]}], "num": 40524}
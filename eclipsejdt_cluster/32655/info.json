{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5853ffd705aa8f2e0c209b526a42fc4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c2690cc2d188f3468199df1d039d16f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  public void markAsComparedEqualToNull(LocalVariableBinding local)", "signatureAfterChange": "  public void markAsComparedEqualToNonNull(LocalVariableBinding local)", "diff": ["+\t\tlong a1, a2, a3, a4, na2;", "+\t\t\tif (((mask = 1L << position) ", "+\t\t\t\t& (a1 = this.nullBit1)", "+\t\t\t\t& (na2 = ~(a2 = this.nullBit2))", "+\t\t\t\t& ~(a3 = this.nullBit3)", "+\t\t\t\t& (a4 = this.nullBit4))", "+\t\t\t\t\t!= 0) {", "+\t\t\t  \tthis.nullBit4 &= ~mask;", "+\t\t\t} else if ((mask & a1 & na2 & a3) == 0) {", "+\t\t\t  \tthis.nullBit4 |= mask;", "+\t\t\t  \tif ((mask & a1) == 0) {", "+\t\t\t  \t  \tif ((mask & a2 & (a3 ^ a4)) != 0) {", "+\t\t\t  \t  \t  \tthis.nullBit2 &= ~mask;", "+\t\t\t  \t  \t}", "+\t\t\t  \t  \telse if ((mask & (a2 | a3 | a4)) == 0) {", "+\t\t\t  \t  \t  \tthis.nullBit2 |= mask;", "+\t\t\t  \t  \t}", "+\t\t\t  \t}", "+\t\t\tthis.nullBit1 |= mask;", "+\t\t\tthis.nullBit3 |= mask; ", "+\t\t\tif (coverageTestFlag && coverageTestId == 15) {", "+\t\t\t  \tthis.nullBit4 = ~0;", "+\t\t\t\tif (coverageTestFlag && coverageTestId == 16) {", "+\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 16\"); //$NON-NLS-1$", "+\t\t\t\t\tif (coverageTestFlag && coverageTestId == 17) {", "+\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 17\"); //$NON-NLS-1$", "+\t\t\t// MACRO :'b,'es/nullBit\\(.\\)/extra[\\1 + 1][vectorIndex]/gc", "+\t\t\tif (((mask = 1L << (position % BitCacheSize)) ", "+  \t\t\t\t& (a1 = this.extra[1 + 1][vectorIndex])", "+  \t\t\t\t& (na2 = ~(a2 = this.extra[2 + 1][vectorIndex]))", "+  \t\t\t\t& ~(a3 = this.extra[3 + 1][vectorIndex])", "+  \t\t\t\t& (a4 = this.extra[4 + 1][vectorIndex]))", "+  \t\t\t\t\t!= 0) {", "+  \t\t\t  \tthis.extra[4 + 1][vectorIndex] &= ~mask;", "+  \t\t\t} else if ((mask & a1 & na2 & a3) == 0) {", "+  \t\t\t  \tthis.extra[4 + 1][vectorIndex] |= mask;", "+  \t\t\t  \tif ((mask & a1) == 0) {", "+  \t\t\t  \t  \tif ((mask & a2 & (a3 ^ a4)) != 0) {", "+  \t\t\t  \t  \t  \tthis.extra[2 + 1][vectorIndex] &= ~mask;", "+  \t\t\t  \t  \t}", "+  \t\t\t  \t  \telse if ((mask & (a2 | a3 | a4)) == 0) {", "+  \t\t\t  \t  \t  \tthis.extra[2 + 1][vectorIndex] |= mask;", "+  \t\t\t  \t  \t}", "+  \t\t\t  \t}", "+  \t\t\t}", "+  \t\t\tthis.extra[1 + 1][vectorIndex] |= mask;", "+  \t\t\tthis.extra[3 + 1][vectorIndex] |= mask; ", "+\t\t\tif (coverageTestFlag && coverageTestId == 18) {", "+\t\t\t  \tthis.extra[5][vectorIndex] = ~0;", "-\t\tlong mask, unknownAssigned;", "-\t\t\tmask = 1L << position;", "-\t\t\tif ((mask & // leave assigned null unchanged", "-\t\t\t\t\tthis.nullAssignmentStatusBit1 &", "-\t\t\t\t\t~this.nullAssignmentStatusBit2 &", "-\t\t\t\t\tthis.nullAssignmentValueBit1 &", "-\t\t\t\t\t~this.nullAssignmentValueBit2) == 0) {", "-\t\t\t\tunknownAssigned = this.nullAssignmentStatusBit1 &", "-\t\t\t\t\t~this.nullAssignmentStatusBit2 &", "-\t\t\t\t\tthis.nullAssignmentValueBit1 &", "-\t\t\t\t\tthis.nullAssignmentValueBit2;", "-\t\t\t\t// set protected", "-\t\t\t\tthis.nullAssignmentStatusBit2 |= mask;", "-\t\t\t\tthis.nullAssignmentStatusBit1 &= (mask = ~mask);", "-\t\t\t\t// protected is null", "-\t\t\t\tthis.nullAssignmentValueBit1 &= mask | ~unknownAssigned;", "-\t\t\t\tthis.nullAssignmentValueBit2 &= mask;", "-\t\t\t\t// clear potential anything but null", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 24) {", "-\t\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "-\t\t\t\t}", "-\t\t\tif (coverageTestFlag && coverageTestId == 25) {", "-\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 26) {", "-\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 26\"); //$NON-NLS-1$", "-\t\t\t\t\tif (coverageTestFlag && coverageTestId == 27) {", "-\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 27\"); //$NON-NLS-1$", "-\t\t\tif ((mask &", "-\t\t\t\t\tthis.extra[2][vectorIndex] &", "-\t\t\t\t\t~this.extra[3][vectorIndex] &", "-\t\t\t\t\tthis.extra[4][vectorIndex] &", "-\t\t\t\t\t~this.extra[5][vectorIndex]) == 0) {", "-\t\t\t\tunknownAssigned = this.extra[2][vectorIndex] &", "-\t\t\t\t\t~this.extra[3][vectorIndex] &", "-\t\t\t\t\tthis.extra[4][vectorIndex] &", "-\t\t\t\t\tthis.extra[5][vectorIndex];", "-\t\t\t\tthis.extra[3][vectorIndex]\t |= mask;", "-\t\t\t\tthis.extra[2][vectorIndex] &= (mask = ~mask);", "-\t\t\t\tthis.extra[4][vectorIndex] &= mask | ~unknownAssigned;", "-\t\t\t\tthis.extra[5][vectorIndex]\t&= mask;", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 28) {", "-\t\t\t\t\tthis.extra[5][vectorIndex] = ~0;", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b61cdeec7487094f3bbddc7599760e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": "  public void markAsComparedEqualToNonNull(LocalVariableBinding local)", "signatureAfterChange": "  public void markAsComparedEqualToNull(LocalVariableBinding local)", "diff": ["-\t\t\tif (((mask = 1L << position) & // leave assigned non null unchanged ", "-\t\t\t\t\tthis.nullAssignmentStatusBit1 &", "-\t\t\t\t\t~this.nullAssignmentStatusBit2 &", "-\t\t\t\t\t~this.nullAssignmentValueBit1 &", "-\t\t\t\t\tthis.nullAssignmentValueBit2) == 0) {", "-\t\t\t\t// set protected non null", "-\t\t\t\tthis.nullAssignmentStatusBit1 |= mask;", "-\t\t\t\tthis.nullAssignmentStatusBit2 |= mask;", "-\t\t\t\t // clear potential null", "-\t\t\t\tthis.nullAssignmentValueBit1 &= ~mask;", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 19) {", "-\t\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "-\t\t\t\t}", "-\t\t\tif (coverageTestFlag && coverageTestId == 20) {", "-\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 21) {", "-\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 21\"); //$NON-NLS-1$", "-\t\t\t\t\tif (coverageTestFlag && coverageTestId == 22) {", "-\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 22\"); //$NON-NLS-1$", "-\t\t\tif (((mask = 1L << (position % BitCacheSize)) & ", "-\t\t\t\t\tthis.extra[2][vectorIndex] &", "-\t\t\t\t\t~this.extra[3][vectorIndex] &", "-\t\t\t\t\t~this.extra[4][vectorIndex] &", "-\t\t\t\t\tthis.extra[5][vectorIndex]) == 0) {", "-\t\t\t\tthis.extra[2][vectorIndex] |= mask;", "-\t\t\t\tthis.extra[3][vectorIndex] |= mask;", "-\t\t\t\tthis.extra[4][vectorIndex] &= ~mask;", "-\t\t\t\tif (coverageTestFlag && coverageTestId == 23) {", "-\t\t\t\t\tthis.extra[5][vectorIndex] = ~0;", "-\t\t\t\t}", "+\t\tlong mask;", "+\t\t\tif (((mask = 1L << position) & this.nullBit1) != 0) {", "+  \t\t\t  \tif ((mask  ", "+  \t\t\t  \t\t& (~this.nullBit2 | this.nullBit3", "+  \t\t\t  \t\t\t| ~this.nullBit4)) != 0) {", "+  \t\t\t  \t  \tthis.nullBit4 &= ~mask;", "+  \t\t\t  \t}", "+\t\t\t} else if ((mask & this.nullBit4) != 0) {", "+\t\t\t  \t  this.nullBit3 &= ~mask;", "+\t\t\t} else {", "+    \t\t\tif ((mask & this.nullBit2) != 0) {", "+    \t\t\t  \tthis.nullBit3 &= ~mask;", "+      \t\t\t  \tthis.nullBit4 |= mask;", "+    \t\t\t} else {", "+    \t\t\t  \tthis.nullBit3 |= mask;", "+    \t\t\t}", "+\t\t\tthis.nullBit1 |= mask;", "+\t\t\tthis.nullBit2 |= mask; ", "+\t\t\tif (coverageTestFlag && coverageTestId == 19) {", "+\t\t\t  \tthis.nullBit4 = ~0;", "+\t\t\t\tif (coverageTestFlag && coverageTestId == 20) {", "+\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 20\"); //$NON-NLS-1$", "+\t\t\t\t\tif (coverageTestFlag && coverageTestId == 21) {", "+\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 21\"); //$NON-NLS-1$", "+\t\t\tif ((mask & this.extra[1 + 1][vectorIndex]) != 0) {", "+  \t\t\t  \tif ((mask  ", "+  \t\t\t  \t\t& (~this.extra[2 + 1][vectorIndex] | this.extra[3 + 1][vectorIndex]", "+  \t\t\t  \t\t\t| ~this.extra[4 + 1][vectorIndex])) != 0) {", "+  \t\t\t  \t  \tthis.extra[4 + 1][vectorIndex] &= ~mask;", "+  \t\t\t  \t}", "+\t\t\t} else if ((mask & this.extra[4 + 1][vectorIndex]) != 0) {", "+\t\t\t  \t  this.extra[3 + 1][vectorIndex] &= ~mask;", "+\t\t\t} else {", "+    \t\t\tif ((mask & this.extra[2 + 1][vectorIndex]) != 0) {", "+    \t\t\t  \tthis.extra[3 + 1][vectorIndex] &= ~mask;", "+      \t\t\t  \tthis.extra[4 + 1][vectorIndex] |= mask;", "+    \t\t\t} else {", "+    \t\t\t  \tthis.extra[3 + 1][vectorIndex] |= mask;", "+    \t\t\t}", "+\t\t\tthis.extra[1 + 1][vectorIndex] |= mask;", "+\t\t\tthis.extra[2 + 1][vectorIndex] |= mask; "]}], "num": 32655}
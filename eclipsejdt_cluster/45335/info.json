{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a196b7ccea463369632eebbd0482f7a5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1820ae2503eeb21814d9ab4771cc7ffa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "c7e61e314902d7cf48e71c1a1c0437bb40107c2e", "commitAfterChange": "8a1621e802c664e59aba36b8a87f59ae57902e37", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public ParameterizedTypeBinding createAnnotatedType(ReferenceBinding genericType, long annotationBits)", "signatureAfterChange": " public TypeBinding createAnnotatedType(TypeBinding genericType, long annotationBits)", "diff": ["-public ParameterizedTypeBinding createAnnotatedType(ReferenceBinding genericType, long annotationBits) {", "-\tTypeBinding[] typeArguments = genericType.isParameterizedType() ? ((ParameterizedTypeBinding) genericType).arguments : null;", "-\treturn createParameterizedType(genericType, typeArguments, annotationBits, genericType.enclosingType());", "-}\t", "+public TypeBinding createAnnotatedType(TypeBinding genericType, long annotationBits) {", "+\tif (genericType instanceof UnresolvedReferenceBinding) {", "+\t\t// clone so we don't interfere with future lookups:", "+\t\treturn new UnresolvedReferenceBinding((UnresolvedReferenceBinding)genericType, annotationBits);", "+\t}", "+\tif (genericType instanceof ReferenceBinding) {", "+\t\tTypeBinding[] typeArguments = genericType.isParameterizedType() ? ((ParameterizedTypeBinding) genericType).arguments : null;", "+\t\tParameterizedTypeBinding parameterizedType = createParameterizedType((ReferenceBinding) genericType, typeArguments, ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tannotationBits, genericType.enclosingType());", "+\t\tparameterizedType.id = genericType.id; // for well-known types shared the id (only here since those types are not generic, are they?)", "+\t\treturn parameterizedType;", "+\t} else if (genericType instanceof ArrayBinding) {", "+\t\tlong[] tagBitsPerDims = ((ArrayBinding) genericType).nullTagBitsPerDimension;", "+\t\tif (tagBitsPerDims == null)", "+\t\t\ttagBitsPerDims = new long[genericType.dimensions()+1];", "+\t\tif (tagBitsPerDims[0] != annotationBits) {", "+\t\t\ttagBitsPerDims[0] = annotationBits;", "+\t\t\treturn createArrayType(genericType.leafComponentType(), genericType.dimensions(), tagBitsPerDims);", "+\t\t}", "+\t}", "+\t// TODO(stephan): PolyTypeBinding", "+\treturn genericType;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de0394a247612d7e9ad61a952db07c23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public TypeBinding createAnnotatedType(TypeBinding genericType, long annotationBits)", "signatureAfterChange": "  public TypeBinding createAnnotatedType(TypeBinding type, AnnotationBinding[][] annotations)", "diff": ["- */", "-public TypeBinding createAnnotatedType(TypeBinding genericType, long annotationBits) {", "-\tif (genericType instanceof UnresolvedReferenceBinding) {", "-\t\t// clone so we don't interfere with future lookups:", "-\t\treturn new UnresolvedReferenceBinding((UnresolvedReferenceBinding)genericType, annotationBits);", "-\t}", "-\tif (genericType instanceof ReferenceBinding) {", "-\t\tTypeBinding[] typeArguments = genericType.isParameterizedType() ? ((ParameterizedTypeBinding) genericType).arguments : null;", "-\t\tParameterizedTypeBinding parameterizedType = createParameterizedType((ReferenceBinding) genericType.original(), typeArguments, ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tannotationBits, genericType.enclosingType());", "-\t\tparameterizedType.id = genericType.id; // for well-known types shared the id (only here since those types are not generic, are they?)", "-\t\treturn parameterizedType;", "-\t} else if (genericType instanceof ArrayBinding) {", "-\t\tlong[] tagBitsPerDims = ((ArrayBinding) genericType).nullTagBitsPerDimension;", "-\t\tif (tagBitsPerDims == null)", "-\t\t\ttagBitsPerDims = new long[genericType.dimensions()+1];", "-\t\tif (tagBitsPerDims[0] != annotationBits) {", "-\t\t\ttagBitsPerDims[0] = annotationBits;", "-\t\t\treturn createArrayType(genericType.leafComponentType(), genericType.dimensions(), tagBitsPerDims);", "-\t\t}", "-\t}", "-\treturn genericType;", "+public TypeBinding createAnnotatedType(TypeBinding type, AnnotationBinding[][] annotations) {", "+\treturn this.typeSystem.getAnnotatedType(type, annotations);"]}], "num": 45335}
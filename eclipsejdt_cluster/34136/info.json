{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f213bf2b77594eb1f68503f7a2adaf53", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f42964b5af72701b8448f1d6f2538a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java", "commitBeforeChange": "b5b90ec2f42e0eb7ce3ad684f46b8d872887e632", "commitAfterChange": "9144806e49f76b29608474c4bebb2700b5c20faa", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate Map<AnnotationProcessorFactory, FactoryPath.Attributes> loadFactories( Map<FactoryContainer, FactoryPath.Attributes> containers, IJavaProject project )", "signatureAfterChange": " \tprivate Map<AnnotationProcessorFactory, FactoryPath.Attributes> loadFactories( Map<FactoryContainer, FactoryPath.Attributes> containers, IJavaProject project )", "diff": ["-\t\tClassLoader classLoader = _createClassLoader( containers );", "+\t\t", "+\t\t// Need to use the cached classloader if we have one", "+\t\tClassLoader iterativeClassLoader = _project2IterativeClassloaders.get(project);", "+\t\tif (iterativeClassLoader == null) {", "+\t\t\titerativeClassLoader = _createIterativeClassLoader(containers);", "+\t\t\t_project2IterativeClassloaders.put(project, iterativeClassLoader);", "+\t\t}", "+\t\t", "+\t\tClassLoader batchClassLoader = _createBatchClassLoader(containers, iterativeClassLoader);", "-\t\t\t\tList<AnnotationProcessorFactory> f = loadFactoryClasses( fc, classLoader );", "-\t\t\t\tfor ( AnnotationProcessorFactory apf : f )", "+\t\t\t\tfinal FactoryPath.Attributes attr = entry.getValue();", "+\t\t\t\tList<AnnotationProcessorFactory> factories;", "+\t\t\t\tif (attr.runInBatchMode()) {", "+\t\t\t\t\tfactories = loadFactoryClasses(fc, batchClassLoader);", "+\t\t\t\t}", "+\t\t\t\telse {", "+\t\t\t\t\tfactories = loadFactoryClasses(fc, iterativeClassLoader);", "+\t\t\t\t}", "+\t\t\t\tfor ( AnnotationProcessorFactory apf : factories )"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84f5f8bfce06b6198351a1d0c5e66c5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java", "commitBeforeChange": "9ea1cdb7f6499dc7c1092eeaa0da392a32816565", "commitAfterChange": "fb03590c09a39a7f190240bf883ad18bc23e5222", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprivate void loadFactories(  \t\t\tMap<FactoryContainer, FactoryPath.Attributes> containers,  \t\t\tIJavaProject project, \t\t\tLoadFailureHandler failureHandler)", "signatureAfterChange": " \tprivate void loadFactories(  \t\t\tMap<FactoryContainer, FactoryPath.Attributes> containers,  \t\t\tIJavaProject project, \t\t\tLoadFailureHandler failureHandler)", "diff": ["-\t\tClassLoader iterativeClassLoader = _iterativeLoaders.get(project);", "-\t\tif (iterativeClassLoader == null) {", "-\t\t\titerativeClassLoader = _createIterativeClassLoader(containers);", "-\t\t\t_iterativeLoaders.put(project, iterativeClassLoader);", "+\t\tClassLoader iterativeClassLoader;", "+\t\tsynchronized (cacheMutex) {", "+\t\t\titerativeClassLoader = _iterativeLoaders.get(project);", "+\t\t\tif (iterativeClassLoader == null) {", "+\t\t\t\titerativeClassLoader = _createIterativeClassLoader(containers);", "+\t\t\t\t_iterativeLoaders.put(project, iterativeClassLoader);", "+\t\t\t}", "-\t\t_createBatchClassLoader(containers, project);", "-\t\tClassLoader batchClassLoader = _batchLoaders.get(project);", "+\t\tClassLoader batchClassLoader = _createBatchClassLoader(containers, project);", "-\t\t_project2Java5Factories.put(project, java5Factories);", "-\t\t_project2Java6Factories.put(project, java6Factories);", "+\t\t", "+\t\tsynchronized (cacheMutex) {", "+\t\t\t_project2Java5Factories.put(project, java5Factories);", "+\t\t\t_project2Java6Factories.put(project, java6Factories);", "+\t\t}"]}], "num": 34136}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f69678902946927230036c9d5093b03d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62b0d20e71c874cd52afa330b79abdcf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "276d690deab11e5ff278dd7a12340b7922d913fc", "commitAfterChange": "1ed5028f52cac9ac32a1eba090840061fb91b107", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\t\t\t\ttypeOrPackageCache.put(name, binding = ((ImportBinding) binding).resolvedImport); // already know its visible", "+\t\t\t\t\tif (binding instanceof ImportConflictBinding)", "+\t\t\t\t\t\ttypeOrPackageCache.put(name, binding = ((ImportConflictBinding) binding).conflictingTypeBinding); // already know its visible", "+\t\t\t\t\telse", "+\t\t\t\t\t\ttypeOrPackageCache.put(name, binding = ((ImportBinding) binding).resolvedImport); // already know its visible", "-\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {", "-\t\t\t\t\tImportBinding typeImport = imports[i];", "-\t\t\t\t\tif (!typeImport.onDemand) {", "-\t\t\t\t\t\tif (CharOperation.equals(typeImport.compoundName[typeImport.compoundName.length - 1], name)) {", "-\t\t\t\t\t\t\tBinding resolvedImport = unitScope.resolveSingleImport(typeImport);", "-\t\t\t\t\t\t\tif (resolvedImport != null && resolvedImport instanceof TypeBinding) {", "-\t\t\t\t\t\t\t\tImportReference importReference = typeImport.reference;", "+\t\t\t\tnextImport : for (int i = 0, length = imports.length; i < length; i++) {", "+\t\t\t\t\tImportBinding importBinding = imports[i];", "+\t\t\t\t\tif (!importBinding.onDemand) {", "+\t\t\t\t\t\tif (CharOperation.equals(importBinding.compoundName[importBinding.compoundName.length - 1], name)) {", "+\t\t\t\t\t\t\tBinding resolvedImport = unitScope.resolveSingleImport(importBinding);", "+\t\t\t\t\t\t\tif (resolvedImport == null) continue nextImport;", "+\t\t\t\t\t\t\tif (resolvedImport instanceof MethodBinding) {", "+\t\t\t\t\t\t\t\tresolvedImport = (ReferenceBinding) getType(importBinding.compoundName, importBinding.compoundName.length);", "+\t\t\t\t\t\t\t\tif (!resolvedImport.isValidBinding()) continue nextImport;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (resolvedImport instanceof TypeBinding) {", "+\t\t\t\t\t\t\t\tImportReference importReference = importBinding.reference;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb7a54dd0bcbe1b6283a1a80b1b05379", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "bffd05273174fba670489cd637d40ac2a4d0913b", "commitAfterChange": "5cda6ee5d9726ecd4c3800dc98f96b9913f2498c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tpublic void connect(\r \t\tIGenericType suppliedType,\r \t\tIGenericType superclass,\r \t\tIGenericType[] superinterfaces)", "signatureAfterChange": "\r \tpublic void connect(\r \t\tIGenericType suppliedType,\r \t\tIGenericType superclass,\r \t\tIGenericType[] superinterfaces)", "diff": ["-\t\t\tsuperHandle = getHandle(superclass);\r", "+\t\t\tif (superclass instanceof HierarchyResolver.MissingType) {\r", "+\t\t\t\tthis.hierarchy.missingTypes.add(((HierarchyResolver.MissingType)superclass).simpleName);\r", "+\t\t\t} else {\r", "+\t\t\t\tsuperHandle = getHandle(superclass);\r", "+\t\t\t}\r", "-\t\t\t\tif (superinterfaces[i] != null) {\r", "-\t\t\t\t\tresolvedInterfaceHandles[index++] = getHandle(superinterfaces[i]);\r", "+\t\t\t\tIGenericType superInterface = superinterfaces[i];\r", "+\t\t\t\tif (superInterface != null) {\r", "+\t\t\t\t\tif (superInterface instanceof HierarchyResolver.MissingType) {\r", "+\t\t\t\t\t\tthis.hierarchy.missingTypes.add(((HierarchyResolver.MissingType)superInterface).simpleName);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tresolvedInterfaceHandles[index] = getHandle(superInterface);\r", "+\t\t\t\t\t\tif (resolvedInterfaceHandles[index] != null) {\r", "+\t\t\t\t\t\t\tindex++;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "-\t\t\tif (interfaceHandles == null) {\r", "+\t\t\tif (interfaceHandles == null || interfaceHandles.length == 0) {\r", "-\t\t\tinterfaceHandles = this.hierarchy.fgEmpty;\r", "+\t\t\tinterfaceHandles = this.hierarchy.NO_TYPE;\r"]}], "num": 12418}
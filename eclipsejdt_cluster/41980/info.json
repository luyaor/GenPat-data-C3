{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6689e2fd68c29d13dc03f2639549136", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14e4575fb15af24505378aeca7df7a61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "77be59ea5d67230fd212d874b96aeadaa71fd38c", "commitAfterChange": "496ec362de1eac6b25f53a35b2409254a0390a5f", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public int scanNumber(boolean dotPrefix) throws InvalidInputException", "signatureAfterChange": " public int scanNumber(boolean dotPrefix) throws InvalidInputException", "diff": ["-\t\t\t\tif (getNextChar('.')) { //bingo ! ....", "+\t\t\t\tboolean isInteger = true;", "+\t\t\t\tif (getNextChar('.')) { ", "+\t\t\t\t\tisInteger = false;", "-\t\t\t\t\tif (getNextChar('e', 'E') >= 0) { // consume next character", "+\t\t\t\t}", "+\t\t\t\tif (getNextChar('e', 'E') >= 0) { // consume next character", "+\t\t\t\t\tisInteger = false;", "+\t\t\t\t\tunicodeAsBackSlash = false;", "+\t\t\t\t\tif (((currentCharacter = source[currentPosition++]) == '\\\\')", "+\t\t\t\t\t\t&& (source[currentPosition] == 'u')) {", "+\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+", "+\t\t\t\t\tif ((currentCharacter == '-')", "+\t\t\t\t\t\t|| (currentCharacter == '+')) { // consume next character", "-", "-\t\t\t\t\t\tif ((currentCharacter == '-')", "-\t\t\t\t\t\t\t|| (currentCharacter == '+')) { // consume next character", "-\t\t\t\t\t\t\tunicodeAsBackSlash = false;", "-\t\t\t\t\t\t\tif (((currentCharacter = source[currentPosition++]) == '\\\\')", "-\t\t\t\t\t\t\t\t&& (source[currentPosition] == 'u')) {", "-\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tif (withoutUnicodePtr != 0) {", "-\t\t\t\t\t\t\t\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!Character.isDigit(currentCharacter))", "-\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_FLOAT);", "-\t\t\t\t\t\twhile (getNextCharAsDigit()) {};", "-\t\t\t\t\tif (getNextChar('f', 'F') >= 0)", "-\t\t\t\t\t\treturn TokenNameFloatingPointLiteral;", "-\t\t\t\t\tgetNextChar('d', 'D'); //jump over potential d or D", "-\t\t\t\t\treturn TokenNameDoubleLiteral;", "-\t\t\t\t} else {", "-\t\t\t\t\treturn TokenNameIntegerLiteral;", "+\t\t\t\t\tif (!Character.isDigit(currentCharacter))", "+\t\t\t\t\t\tthrow new InvalidInputException(INVALID_FLOAT);", "+\t\t\t\t\twhile (getNextCharAsDigit()) {};", "+\t\t\t\tif (getNextChar('f', 'F') >= 0)", "+\t\t\t\t\treturn TokenNameFloatingPointLiteral;", "+\t\t\t\tif (getNextChar('d', 'D') >= 0 || !isInteger)", "+\t\t\t\t\treturn TokenNameDoubleLiteral;", "+\t\t\t\treturn TokenNameIntegerLiteral;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3058faa9d4fc9a02a21ec949144f5b60", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "7fcce8c57c783f249352148215037cdd2cb340b1", "commitAfterChange": "4d5650b7a5b6c37c6b002628ba2f3e1fdfd53b03", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public int scanNumber(boolean dotPrefix) throws InvalidInputException", "signatureAfterChange": " public int scanNumber(boolean dotPrefix) throws InvalidInputException", "diff": ["-\t\t\t\tif (getNextChar('.')) { //bingo ! ....", "+\t\t\t\tboolean isInteger = true;", "+\t\t\t\tif (getNextChar('.')) { ", "+\t\t\t\t\tisInteger = false;", "-\t\t\t\t\tif (getNextChar('e', 'E') >= 0) { // consume next character", "+\t\t\t\t}", "+\t\t\t\tif (getNextChar('e', 'E') >= 0) { // consume next character", "+\t\t\t\t\tisInteger = false;", "+\t\t\t\t\tunicodeAsBackSlash = false;", "+\t\t\t\t\tif (((currentCharacter = source[currentPosition++]) == '\\\\')", "+\t\t\t\t\t\t&& (source[currentPosition] == 'u')) {", "+\t\t\t\t\t\tgetNextUnicodeChar();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (withoutUnicodePtr != 0) {", "+\t\t\t\t\t\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+", "+\t\t\t\t\tif ((currentCharacter == '-')", "+\t\t\t\t\t\t|| (currentCharacter == '+')) { // consume next character", "-", "-\t\t\t\t\t\tif ((currentCharacter == '-')", "-\t\t\t\t\t\t\t|| (currentCharacter == '+')) { // consume next character", "-\t\t\t\t\t\t\tunicodeAsBackSlash = false;", "-\t\t\t\t\t\t\tif (((currentCharacter = source[currentPosition++]) == '\\\\')", "-\t\t\t\t\t\t\t\t&& (source[currentPosition] == 'u')) {", "-\t\t\t\t\t\t\t\tgetNextUnicodeChar();", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tif (withoutUnicodePtr != 0) {", "-\t\t\t\t\t\t\t\t\twithoutUnicodeBuffer[++withoutUnicodePtr] = currentCharacter;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!Character.isDigit(currentCharacter))", "-\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_FLOAT);", "-\t\t\t\t\t\twhile (getNextCharAsDigit()) {};", "-\t\t\t\t\tif (getNextChar('f', 'F') >= 0)", "-\t\t\t\t\t\treturn TokenNameFloatingPointLiteral;", "-\t\t\t\t\tgetNextChar('d', 'D'); //jump over potential d or D", "-\t\t\t\t\treturn TokenNameDoubleLiteral;", "-\t\t\t\t} else {", "-\t\t\t\t\treturn TokenNameIntegerLiteral;", "+\t\t\t\t\tif (!Character.isDigit(currentCharacter))", "+\t\t\t\t\t\tthrow new InvalidInputException(INVALID_FLOAT);", "+\t\t\t\t\twhile (getNextCharAsDigit()) {};", "+\t\t\t\tif (getNextChar('f', 'F') >= 0)", "+\t\t\t\t\treturn TokenNameFloatingPointLiteral;", "+\t\t\t\tif (getNextChar('d', 'D') >= 0 || !isInteger)", "+\t\t\t\t\treturn TokenNameDoubleLiteral;", "+\t\t\t\treturn TokenNameIntegerLiteral;"]}], "num": 41980}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "736b1c3c7b8927f0bafb9f30defed02f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33620c39a827cab65da1682150403aca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "f0ba284185943d1b8df039a8beb736a55eeed994", "commitAfterChange": "e51594c408ebb686b1be624626fdc1156c116aa5", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic static void resolveAnnotations(BlockScope scope, Annotation[] annotations, Binding recipient)", "signatureAfterChange": " \tpublic static void resolveAnnotations(BlockScope scope, Annotation[] annotations, Binding recipient)", "diff": ["-\t\t\tannotation.recipient = recipient;", "-\t\t\tannotationTypes[i] = annotation.resolveType(scope);", "-", "-\t\t\t// null if receiver is a package binding", "-\t\t\tif (instances != null)", "-\t\t\t\tinstances[i] = annotation.getCompilerAnnotation();", "+\t\t\tfinal Binding annotationRecipient = annotation.recipient;", "+\t\t\tif (annotationRecipient != null && recipient != null) {", "+\t\t\t\t// only local and field can share annnotations", "+\t\t\t\tswitch (recipient.kind()) {", "+\t\t\t\t\tcase Binding.FIELD :", "+\t\t\t\t\t\tFieldBinding field = (FieldBinding) recipient;", "+\t\t\t\t\t\tfield.tagBits = ((FieldBinding) annotationRecipient).tagBits;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.LOCAL :", "+\t\t\t\t\t\tLocalVariableBinding local = (LocalVariableBinding) recipient;", "+\t\t\t\t\t\tlocal.tagBits = ((LocalVariableBinding) annotationRecipient).tagBits;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tif (instances != null) {", "+\t\t\t\t\t// need to fill the instances array", "+\t\t\t\t\tinstances[0] = annotation.getCompilerAnnotation();", "+\t\t\t\t\tfor (int j = 1; j < length; j++) {", "+\t\t\t\t\t\tAnnotation annot = annotations[j];", "+\t\t\t\t\t\tinstances[j] = annot.getCompilerAnnotation();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn;", "+\t\t\t} else {", "+\t\t\t\tannotation.recipient = recipient;", "+\t\t\t\tannotationTypes[i] = annotation.resolveType(scope);", "+\t\t\t\t// null if receiver is a package binding", "+\t\t\t\tif (instances != null) {", "+\t\t\t\t\tinstances[i] = annotation.getCompilerAnnotation();", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "645f4aeb922f3c1dbf23da0517d974b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "b2caa750738c585e3970cd6cbdee229067bea596", "commitAfterChange": "8d1eb8a1ba1f8d42e85f057c2e74fe0db8cb690d", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 54, "signatureBeforeChange": " \t \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression)", "signatureAfterChange": " \t \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.BinaryExpression expression)", "diff": ["-\t\tif (expression.left instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression && ((expression.left.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0)) {", "+\t\tif (expression.left instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression", "+\t\t\t\t&& ((expression.left.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0)) {", "-\t\t\t\tif ((((leftOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT) != expressionOperatorID && ((leftOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0))", "-\t\t\t\t || ((rightOperand instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression && ((rightOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT) != expressionOperatorID) && ((rightOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0))) {", "+\t\t\t\tif ((((leftOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT) != expressionOperatorID", "+\t\t\t\t\t\t\t&& ((leftOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0))", "+\t\t\t\t\t || ((rightOperand instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression", "+\t\t\t\t \t\t\t&& ((rightOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorMASK) >> org.eclipse.jdt.internal.compiler.ast.ASTNode.OperatorSHIFT) != expressionOperatorID)", "+\t\t\t\t\t\t\t&& ((rightOperand.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0))) {", "-\t\t}\t\t", "+\t\t} else if (expression.left instanceof StringLiteralConcetanation", "+\t\t\t\t&& ((expression.left.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) == 0)) {", "+\t\t\tStringLiteralConcetanation literal = (StringLiteralConcetanation) expression.left;", "+\t\t\tfinal org.eclipse.jdt.internal.compiler.ast.StringLiteral[] stringLiterals = literal.literals;", "+\t\t\tinfixExpression.setLeftOperand(convert(stringLiterals[0]));", "+\t\t\tinfixExpression.setRightOperand(convert(stringLiterals[1]));", "+\t\t\tfor (int i = 2; i < literal.counter; i++) {", "+\t\t\t\tinfixExpression.extendedOperands().add(convert(stringLiterals[i]));", "+\t\t\t}", "+\t\t\tinfixExpression.extendedOperands().add(convert(expression.right));", "+\t\t\tint startPosition = literal.sourceStart;", "+\t\t\tinfixExpression.setSourceRange(startPosition, expression.sourceEnd - startPosition + 1);", "+\t\t\treturn infixExpression;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddcb2babf7cebc467fec99ced4e10f83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/HierarchyResolver.java", "commitBeforeChange": "f5c8fa183f49a587ca0e6e41a5167044809abbaf", "commitAfterChange": "f2539f967d6224481505d94554439a7a56cc2d0a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r private void rememberWithMemberTypes(TypeDeclaration typeDeclaration, HierarchyType enclosingType, ICompilationUnit unit)", "signatureAfterChange": "\r private void rememberWithMemberTypes(TypeDeclaration typeDeclaration, HierarchyType enclosingType, ICompilationUnit unit)", "diff": ["+\t// simple super class name\r", "+\tchar[] superclassName = null;\r", "+\tTypeReference superclass = typeDeclaration.superclass;\r", "+\tif (superclass != null) {\r", "+\t\tchar[][] typeName = superclass.getTypeName();\r", "+\t\tsuperclassName = typeName == null ? null : typeName[typeName.length-1];\r", "+\t}\r", "+\t\r", "+\t// simple super interface names\r", "+\tchar[][] superInterfaceNames = null;\r", "+\tTypeReference[] superInterfaces = typeDeclaration.superInterfaces;\r", "+\tif (superInterfaces != null) {\r", "+\t\tint length = superInterfaces.length;\r", "+\t\tsuperInterfaceNames = new char[length][];\r", "+\t\tfor (int i = 0; i < length; i++) {\r", "+\t\t\tTypeReference superInterface = superInterfaces[i];\r", "+\t\t\tchar[][] typeName = superInterface.getTypeName();\r", "+\t\t\tsuperInterfaceNames[i] = typeName[typeName.length-1];\r", "+\t\t}\r", "+\t}\r", "+\r", "+\t\tsuperclassName,\r", "+\t\tsuperInterfaceNames,\r"]}], "num": 6116}
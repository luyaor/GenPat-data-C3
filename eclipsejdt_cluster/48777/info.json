{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "587f6931dc7c7aebae5bfc26467e5cc1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a19a8dd4f3c53b5782d4487a4f5b47ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "a00b91e363390d5872f24709421a2a2b1249ea30", "commitAfterChange": "61bf91bb0112a7323235a8711e82564a6109221c", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public boolean doesMethodOverride(MethodBinding one, MethodBinding two)", "signatureAfterChange": " public boolean doesMethodOverride(MethodBinding method, MethodBinding inheritedMethod)", "diff": ["-public boolean doesMethodOverride(MethodBinding one, MethodBinding two) {", "-\tMethodBinding sub = computeSubstituteMethod(two, one);", "-\treturn sub != null && super.doesMethodOverride(one, sub);", "+public boolean doesMethodOverride(MethodBinding method, MethodBinding inheritedMethod) {", "+\tif (doTypeVariablesClash(method, inheritedMethod)) return false;", "+\tif (areParametersEqual(method, inheritedMethod)) return true;", "+\tif (method.declaringClass == inheritedMethod.declaringClass) return false;", "+", "+\tTypeBinding[] params = method.parameters;", "+\tTypeBinding[] inheritedParams = inheritedMethod.parameters;", "+\tint length = params.length;", "+\tif (length != inheritedParams.length)", "+\t\treturn false;", "+", "+\t// also allow a method such as Number foo(Number) to override <U> T foo(T) where T extends Number", "+\tif (method.typeVariables != NoTypeVariables || !inheritedMethod.hasSubstitutedParameters())", "+\t\treturn false;", "+\tif (method.declaringClass.findSuperTypeWithSameErasure(inheritedMethod.declaringClass) == null)", "+\t\treturn false;", "+", "+\tfor (int i = 0; i < length; i++)", "+\t\tif (params[i] != inheritedParams[i].erasure())", "+\t\t\treturn false;", "+\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7f436b542e85919a753dc1756181739", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "45a4564880a2dc68bab13a8cd21e316c500cb042", "commitAfterChange": "66abc385db66fdca41f9fe3a5bc9d59e168597c8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " boolean areMethodsCompatible(MethodBinding one, MethodBinding two)", "signatureAfterChange": " boolean areMethodsCompatible(MethodBinding one, MethodBinding two)", "diff": ["-\tMethodBinding sub = computeSubstituteMethod(two, one);", "-\treturn sub != null && isSubstituteParameterSubsignature(one, sub) && areReturnTypesCompatible(one, sub);", "+\t// use the original methods to test compatibility, but do not check visibility, etc", "+\tone = one.original();", "+\ttwo = two.original();", "+", "+\tTypeBinding match = one.declaringClass.findSuperTypeOriginatingFrom(two.declaringClass);", "+\tif (!(match instanceof ReferenceBinding))", "+\t\treturn false; // method's declaringClass does not inherit from inheritedMethod's ", "+", "+\tif (match != two.declaringClass) {", "+\t\tMethodBinding[] superMethods = ((ReferenceBinding) match).getMethods(two.selector);", "+\t\tfor (int i = 0, length = superMethods.length; i < length; i++)", "+\t\t\tif (superMethods[i].original() == two)", "+\t\t\t\treturn isParameterSubsignature(one, superMethods[i]);", "+\t}", "+", "+\treturn isParameterSubsignature(one, two);"]}], "num": 48777}
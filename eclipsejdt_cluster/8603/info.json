{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d95aebdbfba526d63d188a7c5fc49d7d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94a40ea245d17146d7855421dd9c95bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " public int literalIndex(FieldBinding aFieldBinding)", "signatureAfterChange": " public int literalIndex(FieldBinding aFieldBinding)", "diff": ["-\tint nameAndTypeIndex;", "-\tint classIndex;", "-\tint indexWellKnownField;", "-\tif ((indexWellKnownField = indexOfWellKnownFields(aFieldBinding)) == -1) {", "-\t\tif ((index = fieldCache.get(aFieldBinding)) < 0) {", "-\t\t\t// The entry doesn't exit yet", "-\t\t\tclassIndex = literalIndex(aFieldBinding.declaringClass);", "-\t\t\tnameAndTypeIndex = literalIndexForFields(literalIndex(aFieldBinding.name), literalIndex(aFieldBinding.type.signature()), aFieldBinding);", "-\t\t\tindex = fieldCache.put(aFieldBinding, currentIndex++);", "-\t\t\tif (index > 0xFFFF){", "-\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t\t}", "-\t\t\twriteU1(FieldRefTag);", "-\t\t\twriteU2(classIndex);", "-\t\t\twriteU2(nameAndTypeIndex);", "+\tif ((index = getFromCache(aFieldBinding)) < 0) {", "+\t\t// The entry doesn't exit yet", "+\t\tint classIndex = literalIndexForType(aFieldBinding.declaringClass.constantPoolName());", "+\t\tint nameAndTypeIndex = literalIndexForFields(literalIndex(aFieldBinding.name), literalIndex(aFieldBinding.type.signature()), aFieldBinding);", "+\t\tindex = putInCache(aFieldBinding, currentIndex++);", "+\t\tif (index > 0xFFFF){", "+\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t} else {", "-\t\tif ((index = wellKnownFields[indexWellKnownField]) == 0) {", "-\t\t\t// that field need to be inserted", "-\t\t\tclassIndex = literalIndex(aFieldBinding.declaringClass);", "-\t\t\tnameAndTypeIndex = literalIndexForFields(literalIndex(aFieldBinding.name), literalIndex(aFieldBinding.type.signature()), aFieldBinding);", "-\t\t\tindex = wellKnownFields[indexWellKnownField] = currentIndex++;", "-\t\t\tif (index > 0xFFFF){", "-\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t\t}", "-\t\t\twriteU1(FieldRefTag);", "-\t\t\twriteU2(classIndex);", "-\t\t\twriteU2(nameAndTypeIndex);", "-\t\t}", "+\t\twriteU1(FieldRefTag);", "+\t\twriteU2(classIndex);", "+\t\twriteU2(nameAndTypeIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f79213505eda583d4c266b90fbcbdc69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " public int literalIndex(MethodBinding aMethodBinding)", "signatureAfterChange": " public int literalIndex(MethodBinding aMethodBinding)", "diff": ["-\tint nameAndTypeIndex;", "-\tint classIndex;", "-\tint indexWellKnownMethod;", "-\tif ((indexWellKnownMethod = indexOfWellKnownMethods(aMethodBinding)) == -1) {", "-\t\tif (aMethodBinding.constantPoolDeclaringClass().isInterface()) {", "-\t\t\t// Lookinf into the interface method ref table", "-\t\t\tif ((index = interfaceMethodCache.get(aMethodBinding)) < 0) {", "-\t\t\t\tclassIndex = literalIndex(aMethodBinding.constantPoolDeclaringClass());", "-\t\t\t\tnameAndTypeIndex = literalIndexForMethods(literalIndex(aMethodBinding.constantPoolName()), literalIndex(aMethodBinding.signature()), aMethodBinding);", "-\t\t\t\tindex = interfaceMethodCache.put(aMethodBinding, currentIndex++);", "-\t\t\t\tif (index > 0xFFFF){", "-\t\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t\t\t}", "-\t\t\t\t// Write the interface method ref constant into the constant pool", "-\t\t\t\t// First add the tag", "-\t\t\t\twriteU1(InterfaceMethodRefTag);", "-\t\t\t\t// Then write the class index", "-\t\t\t\twriteU2(classIndex);", "-\t\t\t\t// The write the nameAndType index", "-\t\t\t\twriteU2(nameAndTypeIndex);", "-\t\t\t}", "-\t\t} else {", "-\t\t\t// Lookinf into the method ref table", "-\t\t\tif ((index = methodCache.get(aMethodBinding)) < 0) {", "-\t\t\t\tclassIndex = literalIndex(aMethodBinding.constantPoolDeclaringClass());", "-\t\t\t\tnameAndTypeIndex = literalIndexForMethods(literalIndex(aMethodBinding.constantPoolName()), literalIndex(aMethodBinding.signature()), aMethodBinding);", "-\t\t\t\tindex = methodCache.put(aMethodBinding, currentIndex++);", "-\t\t\t\tif (index > 0xFFFF){", "-\t\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t\t\t}", "-\t\t\t\t// Write the method ref constant into the constant pool", "-\t\t\t\t// First add the tag", "-\t\t\t\twriteU1(MethodRefTag);", "-\t\t\t\t// Then write the class index", "-\t\t\t\twriteU2(classIndex);", "-\t\t\t\t// The write the nameAndType index", "-\t\t\t\twriteU2(nameAndTypeIndex);", "-\t\t\t}", "+\tif ((index = getFromCache(aMethodBinding)) < 0) {", "+\t\tint classIndex = literalIndexForType(aMethodBinding.constantPoolDeclaringClass().constantPoolName());", "+\t\tint nameAndTypeIndex = literalIndexForMethods(literalIndex(aMethodBinding.constantPoolName()), literalIndex(aMethodBinding.signature()), aMethodBinding);", "+\t\tindex = putInCache(aMethodBinding, currentIndex++);", "+\t\tif (index > 0xFFFF){", "+\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t} else {", "-\t\t// This is a well known method", "-\t\tif ((index = wellKnownMethods[indexWellKnownMethod]) == 0) {", "-\t\t\t// this methods was not inserted yet", "-\t\t\tif (aMethodBinding.constantPoolDeclaringClass().isInterface()) {", "-\t\t\t\t// Lookinf into the interface method ref table", "-\t\t\t\tclassIndex = literalIndex(aMethodBinding.constantPoolDeclaringClass());", "-\t\t\t\tnameAndTypeIndex = literalIndexForMethods(literalIndex(aMethodBinding.constantPoolName()), literalIndex(aMethodBinding.signature()), aMethodBinding);", "-\t\t\t\tindex = wellKnownMethods[indexWellKnownMethod] = currentIndex++;", "-\t\t\t\tif (index > 0xFFFF){", "-\t\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t\t\t}", "-\t\t\t\t// Write the interface method ref constant into the constant pool", "-\t\t\t\t// First add the tag", "-\t\t\t\twriteU1(InterfaceMethodRefTag);", "-\t\t\t\t// Then write the class index", "-\t\t\t\twriteU2(classIndex);", "-\t\t\t\t// The write the nameAndType index", "-\t\t\t\twriteU2(nameAndTypeIndex);", "-\t\t\t} else {", "-\t\t\t\t// Lookinf into the method ref table", "-\t\t\t\tclassIndex = literalIndex(aMethodBinding.constantPoolDeclaringClass());", "-\t\t\t\tnameAndTypeIndex = literalIndexForMethods(literalIndex(aMethodBinding.constantPoolName()), literalIndex(aMethodBinding.signature()), aMethodBinding);", "-\t\t\t\tindex = wellKnownMethods[indexWellKnownMethod] = currentIndex++;", "-\t\t\t\tif (index > 0xFFFF){", "-\t\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t\t\t}", "-\t\t\t\t// Write the method ref constant into the constant pool", "-\t\t\t\t// First add the tag", "-\t\t\t\twriteU1(MethodRefTag);", "-\t\t\t\t// Then write the class index", "-\t\t\t\twriteU2(classIndex);", "-\t\t\t\t// The write the nameAndType index", "-\t\t\t\twriteU2(nameAndTypeIndex);", "-\t\t\t}", "-\t\t}", "+\t\t// Write the interface method ref constant into the constant pool", "+\t\t// First add the tag", "+\t\twriteU1(aMethodBinding.constantPoolDeclaringClass().isInterface() ? InterfaceMethodRefTag : MethodRefTag);", "+\t\t// Then write the class index", "+\t\twriteU2(classIndex);", "+\t\t// The write the nameAndType index", "+\t\twriteU2(nameAndTypeIndex);"]}], "num": 8603}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ce26de9726396cfc37a7725729d0c89", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "095593a20d87a15ebac7b6eeeadad510", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "6c797406271c70e354dc360e4e2b55dc743bf914", "commitAfterChange": "6bb034ac24fec033a91d15d668c7ba33f5039fc9", "methodNumberBeforeChange": 177, "methodNumberAfterChange": 177, "signatureBeforeChange": " public void javadocInvalidConstructor(Statement statement, MethodBinding targetConstructor, int modifiers)", "signatureAfterChange": " public void javadocInvalidConstructor(Statement statement, MethodBinding targetConstructor, int modifiers)", "diff": ["-\tif (!javadocVisibility(this.options.reportInvalidJavadocTagsVisibility, modifiers)) {", "-\t\treturn;", "-\t}", "-//\tboolean insideDefaultConstructor = ", "-//\t\t(this.referenceContext instanceof ConstructorDeclaration)", "-//\t\t\t&& ((ConstructorDeclaration)this.referenceContext).isDefaultConstructor();", "-//\tboolean insideImplicitConstructorCall =", "-//\t\t(statement instanceof ExplicitConstructorCall)", "-//\t\t\t&& (((ExplicitConstructorCall) statement).accessMode == ExplicitConstructorCall.ImplicitSuper);", "-", "+\tif (!javadocVisibility(this.options.reportInvalidJavadocTagsVisibility, modifiers)) return;", "-//\t\t\tif (insideDefaultConstructor){", "-//\t\t\t\tid = IProblem.JavadocUndefinedConstructorInDefaultConstructor;", "-//\t\t\t} else if (insideImplicitConstructorCall){", "-//\t\t\t\tid = IProblem.JavadocUndefinedConstructorInImplicitConstructorCall;", "-//\t\t\t} else {", "-\t\t\t\tid = IProblem.JavadocUndefinedConstructor;", "-//\t\t\t}", "+\t\t\tid = IProblem.JavadocUndefinedConstructor;", "-//\t\t\tif (insideDefaultConstructor){", "-//\t\t\t\tid = IProblem.JavadocNotVisibleConstructorInDefaultConstructor;", "-//\t\t\t} else if (insideImplicitConstructorCall){", "-//\t\t\t\tid = IProblem.JavadocNotVisibleConstructorInImplicitConstructorCall;", "-//\t\t\t} else {", "-\t\t\t\tid = IProblem.JavadocNotVisibleConstructor;", "-//\t\t\t}", "+\t\t\tid = IProblem.JavadocNotVisibleConstructor;", "-//\t\t\tif (insideDefaultConstructor){", "-//\t\t\t\tid = IProblem.AmbiguousConstructorInDefaultConstructor;", "-//\t\t\t} else if (insideImplicitConstructorCall){", "-//\t\t\t\tid = IProblem.AmbiguousConstructorInImplicitConstructorCall;", "-//\t\t\t} else {", "-\t\t\t\tid = IProblem.JavadocAmbiguousConstructor;", "-//\t\t\t}", "+\t\t\tid = IProblem.JavadocAmbiguousConstructor;", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "192553c13e665e498d969a4b58b4f2b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "f67216e8a4721dbe44a0a5d1b44a59dfb3149cc6", "commitAfterChange": "74fdaef3cc94563b0c878462808ab3d2bb5b8d72", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": "\r public void invalidConstructor(Statement statement, MethodBinding method)", "signatureAfterChange": "\r public void invalidConstructor(Statement statement, MethodBinding targetConstructor)", "diff": ["-public void invalidConstructor(Statement statement, MethodBinding method) {\r", "-\t// CODE should be UPDATED according to error coding in the different method binding errors\r", "-\t// The different targetted errors should be :\r", "-\t// UndefinedConstructor\r", "-\t//\tNotVisibleConstructor\r", "-\t//\tAmbiguousConstructor\r", "+public void invalidConstructor(Statement statement, MethodBinding targetConstructor) {\r", "+\r", "+\tboolean insideDefaultConstructor = \r", "+\t\t(referenceContext instanceof ConstructorDeclaration)\r", "+\t\t\t&& ((ConstructorDeclaration)referenceContext).isDefaultConstructor();\r", "+\tboolean insideImplicitConstructorCall =\r", "+\t\t(statement instanceof ExplicitConstructorCall)\r", "+\t\t\t&& (((ExplicitConstructorCall) statement).accessMode == ExplicitConstructorCall.ImplicitSuper);\r", "-\tswitch (method.problemId()) {\r", "+\tswitch (targetConstructor.problemId()) {\r", "-\t\t\tflag = IProblem.UndefinedConstructor;\r", "+\t\t\tif (insideDefaultConstructor){\r", "+\t\t\t\tflag = IProblem.UndefinedConstructorInDefaultConstructor;\r", "+\t\t\t} else if (insideImplicitConstructorCall){\r", "+\t\t\t\tflag = IProblem.UndefinedConstructorInImplicitConstructorCall;\r", "+\t\t\t} else {\r", "+\t\t\t\tflag = IProblem.UndefinedConstructor;\r", "+\t\t\t}\r", "-\t\t\tflag = IProblem.NotVisibleConstructor;\r", "+\t\t\tif (insideDefaultConstructor){\r", "+\t\t\t\tflag = IProblem.NotVisibleConstructorInDefaultConstructor;\r", "+\t\t\t} else if (insideImplicitConstructorCall){\r", "+\t\t\t\tflag = IProblem.NotVisibleConstructorInImplicitConstructorCall;\r", "+\t\t\t} else {\r", "+\t\t\t\tflag = IProblem.NotVisibleConstructor;\r", "+\t\t\t}\r", "-\t\t\tflag = IProblem.AmbiguousConstructor;\r", "+\t\t\tif (insideDefaultConstructor){\r", "+\t\t\t\tflag = IProblem.AmbiguousConstructorInDefaultConstructor;\r", "+\t\t\t} else if (insideImplicitConstructorCall){\r", "+\t\t\t\tflag = IProblem.AmbiguousConstructorInImplicitConstructorCall;\r", "+\t\t\t} else {\r", "+\t\t\t\tflag = IProblem.AmbiguousConstructor;\r", "+\t\t\t}\r", "+\t\r", "-\t\tnew String[] {new String(method.declaringClass.readableName()), parametersAsString(method)},\r", "+\t\tnew String[] {new String(targetConstructor.declaringClass.readableName()), parametersAsString(targetConstructor)},\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "418cd28d052cf9847ea4475ec8c58dad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "f1ecb4b2d8ea593a495f1608bdd4d8fccb10a732", "commitAfterChange": "575694a4feaf3caf1988ca9a05c237c3a23369b5", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": " public void javadocInvalidConstructor(Statement statement, MethodBinding targetConstructor, int modifiers)", "signatureAfterChange": " public void javadocInvalidConstructor(Statement statement, MethodBinding targetConstructor, int modifiers)", "diff": ["-\tboolean insideDefaultConstructor = ", "-\t\t(this.referenceContext instanceof ConstructorDeclaration)", "-\t\t\t&& ((ConstructorDeclaration)this.referenceContext).isDefaultConstructor();", "-\tboolean insideImplicitConstructorCall =", "-\t\t(statement instanceof ExplicitConstructorCall)", "-\t\t\t&& (((ExplicitConstructorCall) statement).accessMode == ExplicitConstructorCall.ImplicitSuper);", "+//\tboolean insideDefaultConstructor = ", "+//\t\t(this.referenceContext instanceof ConstructorDeclaration)", "+//\t\t\t&& ((ConstructorDeclaration)this.referenceContext).isDefaultConstructor();", "+//\tboolean insideImplicitConstructorCall =", "+//\t\t(statement instanceof ExplicitConstructorCall)", "+//\t\t\t&& (((ExplicitConstructorCall) statement).accessMode == ExplicitConstructorCall.ImplicitSuper);", "-\tint id = IProblem.UndefinedConstructor; //default...", "+\tint id = IProblem.JavadocUndefinedConstructor; //default...", "-\t\t\tif (insideDefaultConstructor){", "-\t\t\t\tid = IProblem.UndefinedConstructorInDefaultConstructor;", "-\t\t\t} else if (insideImplicitConstructorCall){", "-\t\t\t\tid = IProblem.UndefinedConstructorInImplicitConstructorCall;", "-\t\t\t} else {", "-\t\t\t\tid = IProblem.UndefinedConstructor;", "-\t\t\t}", "+//\t\t\tif (insideDefaultConstructor){", "+//\t\t\t\tid = IProblem.JavadocUndefinedConstructorInDefaultConstructor;", "+//\t\t\t} else if (insideImplicitConstructorCall){", "+//\t\t\t\tid = IProblem.JavadocUndefinedConstructorInImplicitConstructorCall;", "+//\t\t\t} else {", "+\t\t\t\tid = IProblem.JavadocUndefinedConstructor;", "+//\t\t\t}", "-\t\t\tif (insideDefaultConstructor){", "-\t\t\t\tid = IProblem.NotVisibleConstructorInDefaultConstructor;", "-\t\t\t} else if (insideImplicitConstructorCall){", "-\t\t\t\tid = IProblem.NotVisibleConstructorInImplicitConstructorCall;", "-\t\t\t} else {", "-\t\t\t\tid = IProblem.NotVisibleConstructor;", "-\t\t\t}", "+//\t\t\tif (insideDefaultConstructor){", "+//\t\t\t\tid = IProblem.JavadocNotVisibleConstructorInDefaultConstructor;", "+//\t\t\t} else if (insideImplicitConstructorCall){", "+//\t\t\t\tid = IProblem.JavadocNotVisibleConstructorInImplicitConstructorCall;", "+//\t\t\t} else {", "+\t\t\t\tid = IProblem.JavadocNotVisibleConstructor;", "+//\t\t\t}", "-\t\t\tif (insideDefaultConstructor){", "-\t\t\t\tid = IProblem.AmbiguousConstructorInDefaultConstructor;", "-\t\t\t} else if (insideImplicitConstructorCall){", "-\t\t\t\tid = IProblem.AmbiguousConstructorInImplicitConstructorCall;", "-\t\t\t} else {", "-\t\t\t\tid = IProblem.AmbiguousConstructor;", "-\t\t\t}", "+//\t\t\tif (insideDefaultConstructor){", "+//\t\t\t\tid = IProblem.AmbiguousConstructorInDefaultConstructor;", "+//\t\t\t} else if (insideImplicitConstructorCall){", "+//\t\t\t\tid = IProblem.AmbiguousConstructorInImplicitConstructorCall;", "+//\t\t\t} else {", "+\t\t\t\tid = IProblem.JavadocAmbiguousConstructor;", "+//\t\t\t}", "-\t\tid|IProblem.Javadoc,", "+\t\tid,"]}], "num": 24402}
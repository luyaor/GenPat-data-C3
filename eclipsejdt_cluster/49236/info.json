{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58167f9da74450669940932b9f406665", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9632b077eee6fe949c9d001362f7c5b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModel.java", "commitBeforeChange": "3758ce6a10bd01302b15da1982aa821d553e3aa3", "commitAfterChange": "3f52c731c12e40c6d36b09a1af089b5451926fb5", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r public static Object getTarget(IContainer container, IPath path, boolean checkResourceExistence)", "signatureAfterChange": "\r public static Object getTarget(IContainer container, IPath path, boolean checkResourceExistence)", "diff": ["-\t\r", "-\tString extension;\r", "-\tif (JavaModelManager.ZIP_ACCESS_VERBOSE && (extension = path.getFileExtension()) != null \r", "-\t\t&& (extension.toLowerCase().equals(\"zip\") || extension.toLowerCase().equals(\"jar\"))) { //$NON-NLS-1$ //$NON-NLS-2$\r", "-\t\t\t\r", "-\t\tSystem.out.println(\"Getting target for \" + path.toString() + \" checkResourceExistence=\" + checkResourceExistence); //$NON-NLS-1$ //$NON-NLS-2$\r", "-\t}\r", "-\tif (!checkResourceExistence ||externalFile.exists()) return externalFile;\r", "+\tif (!checkResourceExistence) {\r", "+\t\treturn externalFile;\r", "+\t} else if (existingExternalFiles.contains(externalFile)) {\r", "+\t\treturn externalFile;\r", "+\t} else {\r", "+\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE) {\r", "+\t\t\tSystem.out.println(\"[JavaModel.getTarget(...)] Checking existence of \" + path.toString()); //$NON-NLS-1$\r", "+\t\t}\r", "+\t\tif (externalFile.exists()) {\r", "+\t\t\t// cache external file\r", "+\t\t\texistingExternalFiles.add(externalFile);\r", "+\t\t\treturn externalFile;\r", "+\t\t}\r", "+\t}\r", "+\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b024f74296ce4551143007f68e6503c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java", "commitBeforeChange": "e96b882d1f54d34db2067149e2d3228b0faf374b", "commitAfterChange": "4faced18aa2f149b9a6ea49e609b9be294554038", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void computeClasspathLocations( \tIWorkspaceRoot root, \tJavaProject javaProject, \tSimpleLookupTable binaryLocationsPerProject) throws CoreException", "signatureAfterChange": " private void computeClasspathLocations( \tIWorkspaceRoot root, \tJavaProject javaProject, \tSimpleLookupTable binaryLocationsPerProject) throws CoreException", "diff": ["-\t\t\t\t\t\tString extension = path.getFileExtension();", "-\t\t\t\t\t\tif (!(JavaBuilder.JAR_EXTENSION.equalsIgnoreCase(extension) || JavaBuilder.ZIP_EXTENSION.equalsIgnoreCase(extension)))", "+\t\t\t\t\t\tif (!(Util.isArchiveFileName(path.lastSegment())))", "-\t\t\t\t\tString extension = path.getFileExtension();", "-\t\t\t\t\tif (!(JavaBuilder.JAR_EXTENSION.equalsIgnoreCase(extension) || JavaBuilder.ZIP_EXTENSION.equalsIgnoreCase(extension)))", "+\t\t\t\t\tif (!(Util.isArchiveFileName(path.lastSegment())))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9045480ba6990f9d06232c93f932a1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedSourceFolderManager.java", "commitBeforeChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "commitAfterChange": "6fea7eafdd413dccff31028f8da1f1ac6859e6fe", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void changeFolderName(String oldName, String newName)", "signatureAfterChange": " \tpublic void folderNamePreferenceChanged()", "diff": ["+\t */", "+\tpublic void folderNamePreferenceChanged()", "+\t{", "+\t\t// if APT is disabled, we don't need to do anything", "+\t\tfinal boolean aptEnabled = AptConfig.isEnabled(_aptProject.getJavaProject());", "+\t\tif (!aptEnabled) {", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\t// if name didn't change, we don't need to do anything", "+\t\tif (_generatedSourceFolder != null && _generatedSourceFolder.equals(getFolderPreference())) {", "+\t\t\tif( AptPlugin.DEBUG ) {", "+\t\t\t\tAptPlugin.trace(\"folderNameChanged() doing nothing; name is already \" +  //$NON-NLS-1$", "+\t\t\t\t\t\t_generatedSourceFolder.getProjectRelativePath());", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\tremoveFolder();", "+\t\tconfigure();", "+\t}", "-\tpublic void changeFolderName(String oldName, String newName)", "-\t{", "-\t\tif (newName == null) {", "-\t\t\t// Null is used to indicate this preference has", "-\t\t\t// been removed, as the project has been deleted.", "-\t\t\t// We do nothing", "-\t\t\treturn;", "-\t\t}", "-\t\tif (newName.equals(oldName)) {", "-\t\t\t// No-op -- same config", "-\t\t\treturn;", "-\t\tfinal boolean aptEnabled = AptConfig.isEnabled(_aptProject.getJavaProject());", "-\t\tif( AptPlugin.DEBUG )", "-\t\t\tAptPlugin.trace(\"configure generated source directory new value = \" +  //$NON-NLS-1$", "-\t\t\t\t\tnewName + ", "-\t\t\t\t\t\" old value = \"  + oldName + //$NON-NLS-1$", "-\t\t\t\t\t\" APT is enabled = \" + aptEnabled); //$NON-NLS-1$", "-\t\tif( aptEnabled )", "-\t\t\t// If APT is enabled, ", "-\t\t\t// clean up the old cp entry, delete the old folder, ", "-\t\t\t// create the new one and update the classpath.", "-\t\t\tconfigure( newName, oldName );", "-\t\telse", "-\t\t\t// If APT is not enabled, the folder should not exist", "-\t\t\t// and there should be no entry on the classpath.", "-\t\t\tsynchronized (this) {", "-\t\t\t\t_generatedSourceFolderName = newName;", "-\t\t\t}"]}], "num": 49236}
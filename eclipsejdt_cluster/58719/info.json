{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "99e25c84204a4ca49593bef02282c832", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "064b2d9dcf0ff902f7a276dde941ad5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "c8a2939446a95f9a322e1a05c00fbcc6a0bbf68a", "commitAfterChange": "83b433cefe204b4efddb34a5fec23235369a79e2", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic LambdaExpression getResolvedCopyForInferenceTargeting(TypeBinding targetType)", "signatureAfterChange": " \tpublic LambdaExpression getResolvedCopyForInferenceTargeting(TypeBinding targetType)", "diff": ["-\t\tLambdaExpression lambda = this.resolvedCopies.get(targetType);", "+\t\tLambdaExpression lambda = this.resolvedCopies != null ? this.resolvedCopies.get(targetType) : null;", "-\t\t\tif (lambda != null) {", "-\t\t\t\tthis.resolvedCopies.put(targetType, lambda);", "-\t\t\t}", "+\t\t\tif (this.resolvedCopies == null)", "+\t\t\t\tthis.resolvedCopies = new HashMap<TypeBinding, LambdaExpression>();", "+\t\t\tthis.resolvedCopies.put(targetType, lambda);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12e5b8a1701aaf75e5e7666aa3a6e964", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "1ddc6abfe5d6cd8ad8c71d5100cfa53f4e84487a", "commitAfterChange": "9043b6a8e4132c7e53a6fb980711e9a0982fef9b", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \t@Override \tpublic boolean isPotentiallyCompatibleWith(TypeBinding targetType, Scope scope)", "signatureAfterChange": "  \t@Override \tpublic boolean isPotentiallyCompatibleWith(TypeBinding targetType, Scope scope)", "diff": ["-        \tMethodBinding compileTimeDeclaration = isMethodReference ? scope.getMethod(this.receiverType, this.selector, descriptorParameters, this) :", "-        \t\tscope.getConstructor((ReferenceBinding) this.receiverType, descriptorParameters, this);", "+        \tMethodBinding compileTimeDeclaration = ", "+        \t\t\tthis.exactMethodBinding != null ? this.exactMethodBinding :", "+        \t\t\t\t\t\t\tisMethodReference ? scope.getMethod(this.receiverType, this.selector, descriptorParameters, this) :", "+        \t\t\t\t\t\t\t\t\t\t\t\tscope.getConstructor((ReferenceBinding) this.receiverType, descriptorParameters, this);", "-        \t       OR there are no potentially compatible compile time declaration ...", "+        \t       OR there is no potentially compatible compile time declaration ...", "-        \tcompileTimeDeclaration = scope.getMethod(this.receiverType, this.selector, descriptorParameters, this);", "+        \tcompileTimeDeclaration = this.exactMethodBinding != null ? this.exactMethodBinding : scope.getMethod(this.receiverType, this.selector, descriptorParameters, this);", "-              \t   OR there are no potentially compatible compile time declaration ...", "+              \t   OR there is no potentially compatible compile time declaration ...", "+        \tthis.freeParameters = null; // not used after method lookup"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3405a3cdf722aa54c60335dae60c969a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "f1be73585a15718b8d7e7bfcd6517de46dc0a4a4", "commitAfterChange": "c5f13d0ee9ef1590b509e21fa6cb7160b90c28f0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t\tpublic void updateProjectReferencesIfNecessary() throws JavaModelException", "signatureAfterChange": " \t\tpublic void updateProjectReferencesIfNecessary() throws JavaModelException", "diff": ["-\t\t\tString[] oldRequired = this.project.projectPrerequisites(this.oldResolvedPath);", "+\t\t\tString[] oldRequired = this.oldResolvedPath == null ? CharOperation.NO_STRINGS : this.project.projectPrerequisites(this.oldResolvedPath);", "-\t\t\t\tthis.newResolvedPath = this.project.getResolvedClasspath(this.newRawPath, null, true, true, null/*no reverse map*/);", "+\t\t\t\tif (this.newRawPath == null)", "+\t\t\t\t\tthis.newRawPath = this.project.getRawClasspath(true/*create markers*/, false/*don't log problems*/);", "+\t\t\t\tthis.newResolvedPath = ", "+\t\t\t\t\tthis.project.getResolvedClasspath(", "+\t\t\t\t\t\tthis.newRawPath, ", "+\t\t\t\t\t\tnull/*no output*/, ", "+\t\t\t\t\t\ttrue/*ignore unresolved entry*/, ", "+\t\t\t\t\t\ttrue/*generate marker on error*/, ", "+\t\t\t\t\t\tnull/*no reverse map*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5be35f43bb1abbe7435c38d2dc27625d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "e9215020072f2df9a0b47df094d17dfa3ad95402", "commitAfterChange": "2af56d6fe3e00a7c799ea8c6f7aeb1409e4db2f8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic Map getMap()", "signatureAfterChange": "  \tpublic Map<String, String> getMap()", "diff": ["-\tpublic Map getMap() {", "-\t\tMap options = new HashMap();", "+\tpublic Map<String, String> getMap() {", "+\t\tMap<String, String> options = new HashMap<String, String>();", "-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INDENTATION_SIZE, Integer.toString(this.indentation_size));", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_INDENTATION_SIZE, Integer.toString(this.tab_char == MIXED ? this.indentation_size : this.tab_size)); // reverse values swapping performed by IndentationTabPage", "-\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_TAB_SIZE, Integer.toString(this.tab_size));", "+\t\toptions.put(DefaultCodeFormatterConstants.FORMATTER_TAB_SIZE, Integer.toString(this.tab_char == MIXED ? this.tab_size : this.indentation_size)); // reverse values swapping performed by IndentationTabPage"]}], "num": 58719}
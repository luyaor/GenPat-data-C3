{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6364a92f03ab17797b67b0d348b9428c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "088e3c1d908e42352c9a08cd058fb4cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "4e63b50ba3ef9bcdccdff9a2ea673562f37143e4", "commitAfterChange": "4997f1f5c27828dc6733e1f0cda3081f9d59b298", "methodNumberBeforeChange": 267, "methodNumberAfterChange": 267, "signatureBeforeChange": " public void _test428177()", "signatureAfterChange": " public void test428177()", "diff": ["-public void _test428177() {", "+public void test428177() {", "-\t\t\"valid error messages go here - some are expected since javac also complains\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 19)\\n\" + ", "+\t\t\"\tStream<String> stream2 = entries.map(toName).distinct(); // ERROR\\n\" + ", "+\t\t\"\t                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Stream<capture#7-of ? extends String> to Stream<String>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 20)\\n\" + ", "+\t\t\"\twithoutWildcard(entries.map(toName).distinct()); // ERROR\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The method withoutWildcard(Stream<String>) in the type InsistentCapture is not applicable for the arguments (Stream<capture#9-of ? extends String>)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 21)\\n\" + ", "+\t\t\"\twithoutWildcard(stream); // ERROR\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The method withoutWildcard(Stream<String>) in the type InsistentCapture is not applicable for the arguments (Stream<capture#10-of ? extends String>)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 36)\\n\" + ", "+\t\t\"\tif(\\\"1\\\" == \\\"\\\") { return stream.collect(Collectors.toList()).stream(); // ERROR\\n\" + ", "+\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Stream<capture#14-of ? extends String> to Stream<String>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 38)\\n\" + ", "+\t\t\"\treturn stream.collect(Collectors.toList()); // NO ERROR\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#19-of ? extends String> to Stream<String>\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95ce4c15c88442d91ba2a3538cf83c33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java", "commitBeforeChange": "1f936417a416d90917cba09bee390af7aeeb85e8", "commitAfterChange": "cf0fc1d100d6a0dfa353e3125744fa10a50c8d3b", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 125, "signatureBeforeChange": " public void testDefault01b()", "signatureAfterChange": " public void testDefault01b()", "diff": ["-// apply null default to type arguments - no effect on type variable or wildcard:", "+// apply null default to type arguments - no effect on type variable or wildcard, but apply strict checking assuming nothing", "-\trunConformTestWithLibs(", "+\trunNegativeTestWithLibs(", "-\t\t\t\"\t\tin.add(null); // OK\\n\" +", "-\t\t\t\"\t\treturn new ArrayList<@Nullable T>();\\n\" + // TODO: unannotated type variable should be regarded as 'could be either'", "+\t\t\t\"\t\tin.add(null); // NOK, cannot assume nullable\\n\" +", "+\t\t\t\"\t\tneedNN(in.get(0)); // NOK, cannot assume nonnull\\n\" +", "+\t\t\t\"\t\treturn new ArrayList<@Nullable T>(); // NOK, cannot assume nullable for T in List<T>\\n\" +", "+\t\t\t\"\tvoid needNN(@NonNull Number n) {}\\n\" +", "-\t\t\"\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tin.add(null); // NOK, cannot assume nullable\\n\" + ", "+\t\t\"\t       ^^^^\\n\" + ", "+\t\t\"Null type mismatch (type annotations): \\'null\\' is not compatible to the free type variable '? extends Number'\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tneedNN(in.get(0)); // NOK, cannot assume nonnull\\n\" + ", "+\t\t\"\t       ^^^^^^^^^\\n\" + ", "+\t\t\"Null type safety (type annotations): The expression of type \\'capture#of ? extends Number\\' needs unchecked conversion to conform to \\'@NonNull Number\\'\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\treturn new ArrayList<@Nullable T>(); // NOK, cannot assume nullable for T in List<T>\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Null type mismatch (type annotations): required \\'List<T>\\' but this expression has type \\'ArrayList<@Nullable T>\\', corresponding supertype is \\'List<@Nullable T>\\'\\n\" + ", "+\t\t\"----------\\n\");"]}], "num": 14889}
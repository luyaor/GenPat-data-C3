{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b256c9538c23ce488b7f9aac568e7a0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dac99989bdb9b2387ddf50010d03d93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationMirrorImpl.java", "commitBeforeChange": "3b5ea00b50d63fc78cd3c242ec3222102b9b9066", "commitAfterChange": "6badce2dccc8e615c2a9287f7b93153c364e5923", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t     public AnnotationType getAnnotationType()", "signatureAfterChange": " \t     public AnnotationType getAnnotationType()", "diff": ["-\t\treturn (AnnotationType)Factory.createReferenceType(binding, _env);        ", "+        if( binding == null ){", "+        \tfinal ASTNode node = _annotated.getCompilationUnit().findDeclaringNode(_domAnnotation);", "+        \tString name = \"\"; //$NON-NLS-1$", "+        \tif( node != null && node instanceof Annotation ){", "+        \t\tfinal Name typeNameNode = ((Annotation)node).getTypeName();", "+        \t\tif( typeNameNode != null )", "+        \t\t\tname = typeNameNode.toString();", "+        \t}", "+        \treturn Factory.createErrorAnnotationType(name);", "+        }", "+        else", "+        \treturn (AnnotationType)Factory.createReferenceType(binding, _env);        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c68c43494a6e7eba2773ba8e4a42f59d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "ae0b30b76dcbe89d5bd08d53d907ae7218823168", "commitAfterChange": "cbe2b622e81a27ceffd382724966e1dd065a9d5c", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-\t\t// Apply one level of filtering per poly expression more specific rules.", "-\t\tif (compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8) {", "+", "+\t\tboolean isJdk18 = compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8;", "+\t\tif (isJdk18) {", "+\t\t\t// Apply one level of filtering per poly expression more specific rules.", "-\t\tfor (int i = 0; i < visibleSize; i++)", "-\t\t\tcompatibilityLevels[i] = parameterCompatibilityLevel(visible[i], argumentTypes);", "+\t\tfor (int i = 0; i < visibleSize; i++) {", "+\t\t\tTypeBinding[] argTypes = argumentTypes;", "+\t\t\tif (isJdk18 && invocationSite instanceof Invocation) {", "+\t\t\t\tInnerInferenceHelper innerInferenceHelper = ((Invocation)invocationSite).innerInferenceHelper();", "+\t\t\t\tif (innerInferenceHelper != null)", "+\t\t\t\t\targTypes = innerInferenceHelper.getArgumentTypesForCandidate(visible[i], argumentTypes);", "+\t\t\t}", "+\t\t\tcompatibilityLevels[i] = parameterCompatibilityLevel(visible[i], argTypes);", "+\t\t}"]}], "num": 54790}
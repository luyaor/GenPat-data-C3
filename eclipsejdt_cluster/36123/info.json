{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d6befca070db8948b227af5454ba63cb", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43b1306be692cd8cb688489726e80f82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "f51fdf456ddb08b822391ad1e88baeaffa718152", "commitAfterChange": "10120d7f093516b836f6d8f9cf5fc571a020d477", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeDeclaration convert(ISourceType sourceType, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate TypeDeclaration convert(ISourceType sourceType, CompilationResult compilationResult)", "diff": ["-\t\tif (typeParameterNames != null && typeParameterNames.length > 0) { // TODO (jerome) fix once ISourceType's spec & SourceTypeElementInfo match", "+\t\tif (typeParameterNames.length > 0) {", "-\t\t\tint sourceMemberTypeCount =", "-\t\t\t\tsourceMemberTypes == null ? 0 : sourceMemberTypes.length;", "+\t\t\tint sourceMemberTypeCount = sourceMemberTypes.length;", "-\t\t\tsourceFieldCount = sourceFields == null ? 0 : sourceFields.length;", "+\t\t\tsourceFieldCount = sourceFields.length;", "-\t\t\tint sourceMethodCount = sourceMethods == null ? 0 : sourceMethods.length;", "+\t\t\tint sourceMethodCount = sourceMethods.length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b36e5bf7317028b8c827ed1250b0338c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java", "commitBeforeChange": "c35a406d8489fffe10e4c19f8da7ee3f89df04a6", "commitAfterChange": "df99e4aceb13af1666d55c25b92d61d0d516861d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void initializeRoots()", "signatureAfterChange": "  \tpublic void initializeRoots()", "diff": ["-\t\t\tthis.oldRoots = this.roots == null ? new HashMap() : this.roots;", "-\t\t\tthis.oldOtherRoots = this.otherRoots == null ? new HashMap() : this.otherRoots;\t\t\t", "+\t\t\tthis.oldRoots = this.roots;", "+\t\t\tthis.oldOtherRoots = this.otherRoots;\t\t\t"]}], "num": 36123}
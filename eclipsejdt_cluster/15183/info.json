{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75689d227ed867fafe9a617aeecf1921", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65aaed54267ece9dfd6b3e572c168e00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "451a4290b08482db72c12f90b576f09a8da8fda2", "commitAfterChange": "68032f015aeece9b1e17b3f98b4f78c4d8098b12", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "  \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": "  \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["+\t\t\t\t\t// pick a concrete method over a bridge method when parameters are equal since the return type of the concrete method is more specific", "+\t\t\t\t\tif (current.isBridge() && !next.isBridge())", "+\t\t\t\t\t\tif (tiebreakMethod.areParametersEqual(acceptable))", "+\t\t\t\t\t\t\tcontinue nextVisible; // skip current so acceptable wins over this bridge method"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4ea250b8df319b44fdf88595d46ad57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "af330be1052a8d3b1a31b10596d367fb42f89f79", "commitAfterChange": "b3a6b4ddf9d5bd5365b7e897739a001bb2ff860b", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType,  \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "signatureAfterChange": " \tprotected MethodBinding findDefaultAbstractMethod( \t\tReferenceBinding receiverType,  \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite, \t\tReferenceBinding classHierarchyStart, \t\tObjectVector found, \t\tMethodBinding concreteMatch)", "diff": ["+\t\t\t\t\t\tif (concreteMatch != null && concreteMatch.declaringClass.findSuperTypeWithSameErasure(compatibleMethod.declaringClass) != null)", "+\t\t\t\t\t\t\tif (environment().methodVerifier().doesMethodOverride(concreteMatch, compatibleMethod))", "+\t\t\t\t\t\t\t\tcontinue; // can skip this method since concreteMatch overrides it"]}], "num": 15183}
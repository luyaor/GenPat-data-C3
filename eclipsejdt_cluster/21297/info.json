{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "024281768a84cb6c0afe18588a9f0315", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "720615bf651e4dba1c2d4dacf7777e39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJarFileToIndex.java", "commitBeforeChange": "fa88cb3d17048056f6b43aa969ba12f4c9456158", "commitAfterChange": "84b18ff929c59d9bd138487e220218b9da4b2ce2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-\t\t\t\t\tIPath location = this.resource.getLocation();", "+\t\t\t\t\tURI location = this.resource.getLocationURI();", "-\t\t\t\t\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [AddJarFileToIndex.execute()] Creating ZipFile on \" + location); //$NON-NLS-1$\t//$NON-NLS-2$", "-\t\t\t\t\tzip = new ZipFile(location.toFile());", "+\t\t\t\t\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [AddJarFileToIndex.execute()] Creating ZipFile on \" + location.getPath()); //$NON-NLS-1$\t//$NON-NLS-2$", "+\t\t\t\t\tFile file = null;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tfile = org.eclipse.jdt.internal.core.util.Util.toLocalFile(location, progressMonitor);", "+\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\tif (JobManager.VERBOSE) {", "+\t\t\t\t\t\t\torg.eclipse.jdt.internal.core.util.Util.verbose(\"-> failed to index \" + location.getPath() + \" because of the following exception:\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (file == null) {", "+\t\t\t\t\t\tif (JobManager.VERBOSE)", "+\t\t\t\t\t\t\torg.eclipse.jdt.internal.core.util.Util.verbose(\"-> failed to index \" + location.getPath() + \" because the file could not be fetched\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\tzip = new ZipFile(file);", "+\t\t\t\t\t// external file -> it is ok to use toFile()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7705300885c83c89b108fa40aaf344e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryFile.java", "commitBeforeChange": "adda76dd8bf9eeacb64e3f4f77b7d994b5e9cb4d", "commitAfterChange": "bad954afb2676759183aeb6e67aac62fcd10e156", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t public InputStream getContents() throws CoreException", "signatureAfterChange": " \t \tpublic InputStream getContents() throws CoreException", "diff": ["-\t", "-public InputStream getContents() throws CoreException {", "-", "-\ttry {", "-\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE) {", "-\t\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [JarEntryFile.getContents()] Creating ZipFile on \" + this.zipName); //$NON-NLS-1$\t//$NON-NLS-2$", "-\t\t}", "-\t\tZipFile zipFile = new ZipFile(this.zipName); ", "-\t\tZipEntry zipEntry = zipFile.getEntry(this.entryName);", "-\t\tif (zipEntry == null){", "-\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, this.entryName));", "-\t\t}", "-\t\treturn zipFile.getInputStream(zipEntry);", "-\t} catch (IOException e){", "-\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "-}", "+\t", "+\tpublic InputStream getContents() throws CoreException {", "+\t\tZipFile zipFile = null;", "+\t\ttry {", "+\t\t\tzipFile = getZipFile();", "+\t\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE) {", "+\t\t\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [JarEntryFile.getContents()] Creating ZipFile on \" +zipFile.getName()); //$NON-NLS-1$\t//$NON-NLS-2$", "+\t\t\t}", "+\t\t\tString entryName = getEntryName();", "+\t\t\tZipEntry zipEntry = zipFile.getEntry(entryName);", "+\t\t\tif (zipEntry == null){", "+\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryName));", "+\t\t\t}", "+\t\t\tbyte[] contents = Util.getZipEntryByteContent(zipEntry, zipFile);", "+\t\t\treturn new ByteArrayInputStream(contents);", "+\t\t} catch (IOException e){", "+\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "+\t\t} finally {", "+\t\t\t// avoid leaking ZipFiles", "+\t\t\tJavaModelManager.getJavaModelManager().closeZipFile(zipFile);", "+\t\t}", "+\t}"]}], "num": 21297}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "459349990929847328fe9481541e6c1d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4436b6b44ddfdb49d924445382cb72d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "95a11b9ca0b7fa64ff576e466ecdb0a279ed2783", "commitAfterChange": "4b94aeae3b2f17272ac43325195dd1b4ff823c4d", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tpublic void test056()", "signatureAfterChange": " \tpublic void test056()", "diff": ["+\t\tString expectedOutput = ", "+\t\t\t\"// Compiled from X.java (version 1.5 : 49.0, no super bit)\\n\" + ", "+\t\t\t\"// Signature: Ljava/lang/Enum<LX;>;\\n\" + ", "+\t\t\t\"public abstract enum X extends java.lang.Enum {\\n\"; ", "+", "+\t\t\tint index = actualOutput.indexOf(expectedOutput);", "+\t\t\tif (index == -1 || expectedOutput.length() == 0) {", "+\t\t\t\tSystem.out.println(Util.displayString(actualOutput, 3));", "+\t\t\t}", "+\t\t\tif (index == -1) {", "+\t\t\t\tassertEquals(\"Wrong contents\", expectedOutput, actualOutput);", "+\t\t\t}", "-\t\t", "-\t\tString expectedOutput = ", "-\t\t\t\"// Compiled from X.java (version 1.5 : 49.0, no super bit)\\n\" + ", "-\t\t\t\"// Signature: Ljava/lang/Enum<LX;>;\\n\" + ", "-\t\t\t\"public abstract enum X extends java.lang.Enum {\\n\"; ", "-\t\t\t", "-\t\tif (actualOutput.indexOf(expectedOutput) == -1) {", "-\t\t\tSystem.out.println(org.eclipse.jdt.core.tests.util.Util.displayString(actualOutput, 2));", "-\t\t}", "-\t\tassertTrue(\"unexpected bytecode sequence\", actualOutput.indexOf(expectedOutput) != -1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5d207f5fa5a1d8989dc4dd8de530b67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "46707c76fd68c0bae496959cbe90bc206d6a8322", "commitAfterChange": "4b6ca10fae490fdd3d43c251801c6ab4492e083d", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \t \tpublic void test051()", "signatureAfterChange": " \t \tpublic void test051()", "diff": ["-\t\t\t\t\"    String value() default ;\\n\" + ", "+\t\t\t\t\"    String value() default \\\"Hello\\\";\\n\" + ", "-\t\t\t\t\"    @I(\\\"Hello\\\") void foo() {\\n\" + ", "+\t\t\t\t\"    @I(\\\"Hi\\\") void foo() {\\n\" + ", "-\t\t\t\"  @I(value={\\\"Hello\\\"})\\n\" + ", "+\t\t\t\"  @I(value=\\\"Hi\\\")\\n\" + ", "+\t\t\t\"  void foo();\\n\" + ", "+\t\t\t\"    0  return\\n\" + ", "+\t\t\t\"      Line numbers:\\n\" + ", "+\t\t\t\"        [pc: 0, line: 7]\\n\" + ", "+\t\t\t\"      Local variable table:\\n\" + ", "+\t\t\t\"        [pc: 0, pc: 1] local: this index: 0 type: LX;\\n\" + ", "+\t\t\t\"}\"; ", "+\t\t\t", "+\t\tif (actualOutput.indexOf(expectedOutput) == -1) {", "+\t\t\tSystem.out.println(org.eclipse.jdt.core.tests.util.Util.displayString(actualOutput, 2));", "+\t\t}", "+\t\tassertTrue(\"unexpected bytecode sequence\", actualOutput.indexOf(expectedOutput) != -1);", "+\t}"]}], "num": 36019}
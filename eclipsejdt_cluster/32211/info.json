{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba48c23edcbac18d488bdeb22beb332f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "113d2b5bdb56a9d4b3953012c7b81875", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "83b433cefe204b4efddb34a5fec23235369a79e2", "commitAfterChange": "f0ad677ecfc3fb2aae0264f20715771e958071e0", "methodNumberBeforeChange": 848, "methodNumberAfterChange": 848, "signatureBeforeChange": " public void test0827()", "signatureAfterChange": " public void test0827()", "diff": ["-// FAIL ERRMSG", "-\tif (this.complianceLevel >= ClassFileConstants.JDK1_8)", "-\t\treturn;", "+\t\tthis.complianceLevel < ClassFileConstants.JDK1_8 ? ", "-\t\t\"----------\\n\");", "+\t\t\"----------\\n\" :", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tX t1 = new X();\\n\" + ", "+\t\t\t\"\t^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tX t1 = new X();\\n\" + ", "+\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tt1.test(a, b); //this gives an error but should be OK\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The method test(Object, List) belongs to the raw type X. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tt2.test(a, b); //this compiles OK\\n\" + ", "+\t\t\t\"\t   ^^^^\\n\" + ", "+\t\t\t\"The method test(V1, V2) in the type X<Object> is not applicable for the arguments (XA, List<Object>)\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a82f972b224c13b8b614309f8c30dd5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 265, "methodNumberAfterChange": 265, "signatureBeforeChange": " public void test116()", "signatureAfterChange": " public void test116()", "diff": ["+\t\t\"\t^^^^^^\\n\" + ", "+\t\t\"The return type is incompatible with Y.foo()\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tObject foo() {\\n\" + ", "-\t\tmustOverrideMessage(\"foo()\", \"X\") + ", "+\t\t\"The method X.foo() is overriding a method without making a super invocation\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\tObject foo() {\\n\" + ", "+\t\t\"\t^^^^^^\\n\" + ", "+\t\t\"The return type is incompatible with Y.foo()\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\"\tObject foo() {\\n\" + ", "+\t\t\"\t       ^^^^^\\n\" + ", "+\t\t\"The method foo() of type new Y(){} should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\tObject foo() {\\n\" + ", "+\t\t\"\t       ^^^^^\\n\" + ", "+\t\t\"The method new Y(){}.foo() is overriding a method without making a super invocation\\n\" + "]}], "num": 32211}
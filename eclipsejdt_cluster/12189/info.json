{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1dd4f0f50a6254a29d3118543d6e49eb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "820dd3fb31d62f36b9834db23f813103", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "73100562c653e9756405c4478f78d4c46826e31a", "commitAfterChange": "b17c7970aa52528427b488a1895b516cefe9f2a2", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " public MethodBinding getSingleAbstractMethod(Scope scope, boolean replaceWildcards)", "signatureAfterChange": " public MethodBinding getSingleAbstractMethod(Scope scope, boolean replaceWildcards)", "diff": ["+\t\tif (methods == null || methods.length == 0)", "+\t\t\treturn this.singleAbstractMethod[index] = samProblemBinding;", "+\t\tint contractParameterLength = 0;", "+\t\tchar [] contractSelector = null;", "+\t\tfor (int i = 0, length = methods.length; i < length; i++) {", "+\t\t\tMethodBinding method = methods[i];", "+\t\t\tif (method == null) continue;", "+\t\t\tif (contractSelector == null) {", "+\t\t\t\tcontractSelector = method.selector;", "+\t\t\t\tcontractParameterLength = method.parameters == null ? 0 : method.parameters.length;", "+\t\t\t} else {", "+\t\t\t\tint methodParameterLength = method.parameters == null ? 0 : method.parameters.length;", "+\t\t\t\tif (methodParameterLength != contractParameterLength || !CharOperation.equals(method.selector, contractSelector))", "+\t\t\t\t\treturn this.singleAbstractMethod[index] = samProblemBinding;", "+\t\t\t}", "+\t\t}", "-\tif (methods != null && methods.length == 1)", "+\tif (methods.length == 1)", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0292e324ca14358fbba149a218f18a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public MethodBinding getConstructor(ReferenceBinding receiverType, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": "  public MethodBinding getConstructor(ReferenceBinding receiverType, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\tfor (int i = 0, length = methods.length; i < length; i++)", "-\t\tif (areParametersAssignable(methods[i].parameters, argumentTypes))", "-\t\t\tcompatible[compatibleIndex++] = methods[i];", "+\tfor (int i = 0, length = methods.length; i < length; i++) {", "+\t    MethodBinding compatibleMethod = computeCompatibleMethod(methods[i], argumentTypes, invocationSite);", "+\t\tif (compatibleMethod != null)", "+\t\t\tcompatible[compatibleIndex++] = compatibleMethod;", "+\t}", "-\t\treturn new ProblemMethodBinding(ConstructorDeclaration.ConstantPoolName, compatible[0].parameters, NotVisible);", "+\t\treturn new ProblemMethodBinding(compatible[0], ConstructorDeclaration.ConstantPoolName, compatible[0].parameters, NotVisible);", "-\treturn mostSpecificClassMethodBinding(visible, visibleIndex);", "+\treturn mostSpecificClassMethodBinding(visible, visibleIndex, invocationSite);"]}], "num": 12189}
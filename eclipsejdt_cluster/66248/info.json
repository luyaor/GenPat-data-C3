{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75479612e981af2810f4ed4899e83548", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "675fbae63f403599c540816ab3665ffa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "c93b7fc02953335388042ab5bd4ec34f70464821", "commitAfterChange": "c9213ae595dd32af0d2b3bd7c31b733e8b1d0dd1", "methodNumberBeforeChange": 386, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void acceptTypeNameMatch(TypeNameMatch match)", "signatureAfterChange": " \tpublic void acceptTypeNameMatch(TypeNameMatch match)", "diff": ["+\tpublic String[] results = new String[10];", "+\tpublic void acceptTypeNameMatch(TypeNameMatch match) {", "+\t\tint length = results.length;", "+\t\tif (++index > length) {", "+\t\t\tSystem.arraycopy(results, 0, results = new String[length+10], 0, length);", "+\t\t}", "+\t\ttry {", "+\t\t\tIType type = match.getType();", "+\t\t\tif (type != null) {", "+\t\t\t\tresults[index] = type.toString();", "+\t\t\t}", "+\t\t}", "+\t\tcatch (JavaModelException jme) {", "+\t\t\tassertTrue(\"We should not have any JavaModel exception! Message:\"+jme.getMessage(), false);", "+\t\t}", "+\t}", "-\tpublic StringBuffer results = new StringBuffer();", "-\tpublic void acceptTypeNameMatch(TypeNameMatch match) {", "-\t\tif (results.length() > 0) results.append('\\n');", "-\t\ttry {", "-\t\t\tIType type = match.resolvedType();", "-\t\t\tif (type != null) {", "-\t\t\t\tresults.append(type.toString());", "-\t\t\t}", "-\t\t}", "-\t\tcatch (JavaModelException jme) {", "-\t\t\tassertTrue(\"We should not have no JavaModel exception! Message:\"+jme.getMessage(), false);", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c305466aaa477191a761d5027740614", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public FieldBinding[] fields()", "signatureAfterChange": " public FieldBinding[] fields()", "diff": ["+\tFieldBinding[] resolvedFields = this.fields;", "-\t\t}\t\t\t", "+\t\t}", "-\t\t\t\tthis.fields[i] = null;", "+\t\t\t\t// do not alter original field array until resolution is over, due to reentrance (143259)", "+\t\t\t\tif (resolvedFields == this.fields) {", "+\t\t\t\t\tSystem.arraycopy(this.fields, 0, resolvedFields = new FieldBinding[length], 0, length);", "+\t\t\t\t}", "+\t\t\t\tresolvedFields[i] = null;", "-\t\t\tint newSize = this.fields.length - failed;", "+\t\t\tint newSize = resolvedFields.length - failed;", "-\t\t\tfor (int i = 0, j = 0, length = this.fields.length; i < length; i++) {", "-\t\t\t\tif (this.fields[i] != null)", "-\t\t\t\t\tnewFields[j++] = this.fields[i];", "+\t\t\tfor (int i = 0, j = 0, length = resolvedFields.length; i < length; i++) {", "+\t\t\t\tif (resolvedFields[i] != null)", "+\t\t\t\t\tnewFields[j++] = resolvedFields[i];"]}], "num": 66248}
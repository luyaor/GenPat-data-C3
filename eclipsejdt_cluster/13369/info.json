{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b70d552564d50242802b9dcdc3ed6fa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2320ccb0117f2ff2a85929b6d8b23b18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "d11e0b7b2ec4acf083dada122937da91409bfbab", "commitAfterChange": "e9864a131b54828255a924bbf70ed7031ad409fb", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " protected void consumeCatchHeader()", "signatureAfterChange": " protected void consumeCatchHeader()", "diff": ["-\t\treturn;", "+\t\tif(!(currentElement instanceof RecoveredMethod)) {", "+\t\t\treturn;", "+\t\t}", "+\t\tRecoveredMethod rMethod = (RecoveredMethod) currentElement;", "+\t\tif(!(rMethod.methodBody == null && rMethod.bracketBalance > 0)) {", "+\t\t\treturn;", "+\t\t}", "-\t// exception argument is already on astStack", "-\t((RecoveredBlock)currentElement).attach(", "-\t\tnew RecoveredLocalVariable((Argument)astStack[astPtr--], currentElement, 0)); // insert catch variable in catch block", "+\t", "+\tArgument arg = (Argument)astStack[astPtr--];", "+\t// convert argument to local variable", "+\tLocalDeclaration localDeclaration = new LocalDeclaration(arg.name, arg.sourceStart, arg.sourceEnd);", "+\tlocalDeclaration.type = arg.type;", "+\tlocalDeclaration.declarationSourceStart = arg.declarationSourceStart;", "+\tlocalDeclaration.declarationSourceEnd = arg.declarationSourceEnd;", "+\t", "+\tcurrentElement = currentElement.add(localDeclaration, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b02a8643ddbbe83bf54106a43a5a45c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "9951b7a54ba18cc36a88513505c20a6b6559265f", "commitAfterChange": "37e893fac6e74361f92234e78fe4ff338a9de8c2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \tpublic void computePackageFragmentRoots(\r \t\tIClasspathEntry entry,\r \t\tObjectVector accumulatedRoots, \r \t\tObjectSet visitedProjects, \r \t\tboolean insideOriginalProject,\r \t\tboolean checkExistency,\r \t\tboolean computeBuilderRoots)", "signatureAfterChange": "\r \tpublic void computePackageFragmentRoots(\r \t\tIClasspathEntry entry,\r \t\tObjectVector accumulatedRoots, \r \t\tObjectSet rootIDs, \r \t\tboolean insideOriginalProject,\r \t\tboolean checkExistency,\r \t\tboolean computeBuilderRoots)", "diff": ["-\t\tObjectSet visitedProjects, \r", "+\t\tObjectSet rootIDs, \r", "-\t\tIWorkspaceRoot workspaceRoot = getWorkspace().getRoot();\r", "+\t\tString rootID = ((ClasspathEntry)entry).rootID();\r", "+\t\tif (rootIDs.contains(rootID)) return;\r", "+\r", "-\r", "-\t\t// existency check\r", "-\t\tObject target = JavaModel.getTarget(workspaceRoot, entryPath, checkExistency);\r", "-\t\tif (target == null) return;\r", "+\t\tIWorkspaceRoot workspaceRoot = getWorkspace().getRoot();\r", "-\t\t\t\t\r", "+\t\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, entryPath, checkExistency);\r", "+\t\t\t\t\tif (target == null) return;\r", "+\r", "+\t\t\t\t\t\trootIDs.add(rootID);\r", "+\r", "+\t\t\t\tObject target = JavaModel.getTarget(workspaceRoot, entryPath, checkExistency);\r", "+\t\t\t\tif (target == null) return;\r", "+\r", "+\t\t\t\t\t\t\trootIDs.add(rootID);\r", "-\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\t\trootIDs.add(rootID);\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\trootIDs.add(rootID);\r", "-\r", "-\t\t\t\tif (requiredProject.getProject().isOpen()){ // special builder binary output\r", "+\t\t\t\tIProject requiredProjectRsc = requiredProject.getProject();\r", "+\t\t\t\tif (requiredProjectRsc.exists() && requiredProjectRsc.isOpen()){ // special builder binary output\r", "-\t\t\t\t\trequiredProject.computePackageFragmentRoots(accumulatedRoots, visitedProjects, false, checkExistency, computeBuilderRoots);\r", "+\t\t\t\t\trootIDs.add(rootID);\r", "+\t\t\t\t\trequiredProject.computePackageFragmentRoots(accumulatedRoots, rootIDs, false, checkExistency, computeBuilderRoots);\r"]}], "num": 13369}
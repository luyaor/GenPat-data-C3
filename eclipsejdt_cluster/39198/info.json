{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "84329d88a349d8fd424faa24c42cfe25", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e7c7fbb47efea2288f619a888d65379", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 1281, "methodNumberAfterChange": 1282, "signatureBeforeChange": " public void test1247()", "signatureAfterChange": " public void test1247()", "diff": ["-\tthis.runNegativeTest(", "-\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "+\tString xSource =", "-\t\t\t\t\"}\", // =================", "-\t\t},", "-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 5)\\n\" +", "-\t\t\"\teval(foo); // fails\\n\" +", "-\t\t\"\t^^^^\\n\" +", "-\t\t\"Bound mismatch: The generic method eval(T) of type X is not applicable for the arguments (X.Foo<capture#1-of ?,capture#2-of ?>). The inferred type X.Foo<capture#1-of ?,capture#2-of ?> is not a valid substitute for the bounded parameter <T extends Iterable<T>>\\n\" +", "-\t\t\"----------\\n\");", "+\t\t\t\t\"}\";", "+\tif (this.complianceLevel < ClassFileConstants.JDK1_8) {", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\txSource,", "+\t\t\t},", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 5)\\n\" +", "+\t\t\t\"\teval(foo); // fails\\n\" +", "+\t\t\t\"\t^^^^\\n\" +", "+\t\t\t\"Bound mismatch: The generic method eval(T) of type X is not applicable for the arguments (X.Foo<capture#1-of ?,capture#2-of ?>). The inferred type X.Foo<capture#1-of ?,capture#2-of ?> is not a valid substitute for the bounded parameter <T extends Iterable<T>>\\n\" +", "+\t\t\t\"----------\\n\");", "+\t} else {", "+\t\trunConformTest(new String[] { \"X.java\", xSource });", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae50c6c9f81f71debbdfedde3acaf176", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 513, "methodNumberAfterChange": 513, "signatureBeforeChange": " \tpublic void test0494()", "signatureAfterChange": " \tpublic void test0494()", "diff": ["-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",//====================================", "+\t\tString xSource =", "-\t\t\t\t\"}\\n\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 6)\\n\" +", "-\t\t\t\"\tnew X().nextTry(i, n);\\n\" +", "-\t\t\t\"\t        ^^^^^^^\\n\" +", "-\t\t\t\"Bound mismatch: The generic method nextTry(I, N) of type X is not applicable for the arguments (Integer, Number). The inferred type Number is not a valid substitute for the bounded parameter <N extends I>\\n\" +", "-\t\t\t\"----------\\n\");", "+\t\t\t\t\"}\\n\";", "+\t\tif (this.complianceLevel < ClassFileConstants.JDK1_8) {", "+\t\t\tthis.runNegativeTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\txSource", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"1. ERROR in X.java (at line 6)\\n\" +", "+\t\t\t\t\"\tnew X().nextTry(i, n);\\n\" +", "+\t\t\t\t\"\t        ^^^^^^^\\n\" +", "+\t\t\t\t\"Bound mismatch: The generic method nextTry(I, N) of type X is not applicable for the arguments (Integer, Number). The inferred type Number is not a valid substitute for the bounded parameter <N extends I>\\n\" +", "+\t\t\t\t\"----------\\n\");", "+\t\t} else {", "+\t\t\trunConformTest(new String[] { \"X.java\", xSource });", "+\t\t}"]}], "num": 39198}
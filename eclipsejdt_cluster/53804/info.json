{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f148f44c389e66e1ec2ac866a8ee242", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22de185924defca879b8b9be8402d497", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "34f79b507663962f5a8b34c6546e7cf80423bb0b", "commitAfterChange": "0b3c372cd8063a26d1eaf5c9a3c9657a40eb4a99", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 118, "signatureBeforeChange": " \tpublic void resolveClasspath(PerProjectInfo perProjectInfo, boolean usePreviousSession) throws JavaModelException", "signatureAfterChange": " \tpublic void resolveClasspath(PerProjectInfo perProjectInfo) throws JavaModelException", "diff": ["-\tpublic void resolveClasspath(PerProjectInfo perProjectInfo, boolean usePreviousSession) throws JavaModelException {", "+\tpublic void resolveClasspath(PerProjectInfo perProjectInfo) throws JavaModelException {", "-\t\t\t\t\t\t\tresolvedEntry = manager.getResolvedClasspathEntry(rawEntry, usePreviousSession);", "+\t\t\t\t\t\t\tresolvedEntry = JavaCore.getResolvedClasspathEntry(rawEntry);", "-\t\t\t\t\t\tIClasspathContainer container = usePreviousSession ? manager.getPreviousSessionContainer(rawEntry.getPath(), this) : JavaCore.getClasspathContainer(rawEntry.getPath(), this);", "+\t\t\t\t\t\tIClasspathContainer container = JavaCore.getClasspathContainer(rawEntry.getPath(), this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e1eb56b1143447fa4808a8a31a9674a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "fbf0909c10f2ace01461d4ca2e7f7ef5d34ed6fa", "commitAfterChange": "34f79b507663962f5a8b34c6546e7cf80423bb0b", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 118, "signatureBeforeChange": " \tpublic void resolveClasspath(PerProjectInfo perProjectInfo) throws JavaModelException", "signatureAfterChange": " \tpublic void resolveClasspath(PerProjectInfo perProjectInfo, boolean usePreviousSession) throws JavaModelException", "diff": ["-\tpublic void resolveClasspath(PerProjectInfo perProjectInfo) throws JavaModelException {", "+\tpublic void resolveClasspath(PerProjectInfo perProjectInfo, boolean usePreviousSession) throws JavaModelException {", "-\t\t\t\t\t\t\tresolvedEntry = JavaCore.getResolvedClasspathEntry(rawEntry);", "+\t\t\t\t\t\t\tresolvedEntry = manager.getResolvedClasspathEntry(rawEntry, usePreviousSession);", "-\t\t\t\t\t\tIClasspathContainer container = JavaCore.getClasspathContainer(rawEntry.getPath(), this);", "+\t\t\t\t\t\tIClasspathContainer container = usePreviousSession ? manager.getPreviousSessionContainer(rawEntry.getPath(), this) : JavaCore.getClasspathContainer(rawEntry.getPath(), this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3a3ccc6691eea658a6056964976c07e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 120, "signatureBeforeChange": " \t \tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env, boolean tieBreakingVarargsMethods, boolean tolerateInferenceVariables)", "signatureAfterChange": " \t \tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env, boolean tieBreakingVarargsMethods)", "diff": ["-\tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env, boolean tieBreakingVarargsMethods, boolean tolerateInferenceVariables) {", "+\tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env, boolean tieBreakingVarargsMethods) {", "-\t\t}", "-\t\tif (tolerateInferenceVariables && (!arg.isProperType(false) || !param.isProperType(false))) {", "-\t\t\t// during type inference involving a ReferenceExpression ignore incompatibility due to an inference variable,", "-\t\t\t// knowing that we will produce constraints that will ensure compatible instantiation (if one exists).", "-\t\t\treturn COMPATIBLE; "]}], "num": 53804}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9973cc8c8e1b0384d5a808e5a8cf83ec", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "760c3029c2f4f5d8d3fa3ee7995f98a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "ef3c2078d9cee48378a186a3e9a6e61cb6a67acc", "commitAfterChange": "18c98a5a751096350077436fcf968eb63364ccb9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tvoid buildAnonymousTypeBinding(SourceTypeBinding enclosingType, ReferenceBinding supertype)", "signatureAfterChange": " \t \tvoid buildAnonymousTypeBinding(SourceTypeBinding enclosingType, ReferenceBinding supertype)", "diff": ["-\t\tLocalTypeBinding anonymousType = buildLocalType(enclosingType, enclosingType.fPackage);", "-\t\tSourceTypeBinding sourceType = referenceContext.binding;", "+\t\tLocalTypeBinding anonymousType = buildLocalType(enclosingType, supertype, enclosingType.fPackage);", "-\t\t\tsourceType.superclass = getJavaLangObject();", "-\t\t\tsourceType.superInterfaces = new ReferenceBinding[] { supertype };", "+\t\t\tanonymousType.superclass = getJavaLangObject();", "+\t\t\tanonymousType.superInterfaces = new ReferenceBinding[] { supertype };", "-\t\t\tsourceType.superclass = supertype;", "-\t\t\tsourceType.superInterfaces = Binding.NO_SUPERINTERFACES;", "+\t\t\tanonymousType.superclass = supertype;", "+\t\t\tanonymousType.superInterfaces = Binding.NO_SUPERINTERFACES;", "+\t\t\tTypeReference typeReference = referenceContext.allocation.type;", "+\t\t\tif (typeReference != null) { // no check for enum constant body", "+\t\t\t\tif (supertype.erasure().id == TypeIds.T_JavaLangEnum) {", "+\t\t\t\t\tproblemReporter().cannotExtendEnum(anonymousType, typeReference, supertype);", "+\t\t\t\t\tanonymousType.tagBits |= TagBits.HierarchyHasProblems;\t\t", "+\t\t\t\t\tanonymousType.superclass = getJavaLangObject();", "+\t\t\t\t} else if (supertype.isFinal()) {", "+\t\t\t\t\tproblemReporter().anonymousClassCannotExtendFinalClass(typeReference, supertype);", "+\t\t\t\t\tanonymousType.tagBits |= TagBits.HierarchyHasProblems;\t\t", "+\t\t\t\t\tanonymousType.superclass = getJavaLangObject();", "+\t\t\t\t} else if ((supertype.tagBits & TagBits.HasDirectWildcard) != 0) {", "+\t\t\t\t\tproblemReporter().superTypeCannotUseWildcard(anonymousType, typeReference, supertype);", "+\t\t\t\t\tanonymousType.tagBits |= TagBits.HierarchyHasProblems;\t\t", "+\t\t\t\t\tanonymousType.superclass = getJavaLangObject();", "+\t\t\t\t}", "+\t\t\t} ", "-\t\tsourceType.verifyMethods(environment().methodVerifier());", "+\t\tanonymousType.verifyMethods(environment().methodVerifier());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac89f7ce54bd456a4af61fe9b5ebf6a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "f1e9abf0f06a7b0eae105e5fd6b001a54a4c16b0", "commitAfterChange": "c776cc200b201a2e0f488b5ea4478d54f3a2d31a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters)", "signatureAfterChange": " \t \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters)", "diff": ["-\t\t\tReferenceBinding superType = this.kind == METHOD_SCOPE", "-\t\t\t\t? (ReferenceBinding) typeRef.resolveType((BlockScope)this, false/*no bound check*/)", "-\t\t\t\t: (ReferenceBinding) typeRef.resolveType((ClassScope)this);", "+\t\t\tTypeBinding superType = this.kind == METHOD_SCOPE", "+\t\t\t\t? typeRef.resolveType((BlockScope)this, false/*no bound check*/)", "+\t\t\t\t: typeRef.resolveType((ClassScope)this);", "+\t\t\t\tcontinue nextVariable;", "+\t\t\t}", "+\t\t\ttypeRef.resolvedType = superType; // hold onto the problem type", "+\t\t\tif (superType.isArrayType()) {", "+\t\t\t\tproblemReporter().boundCannotBeArray(typeRef, superType);", "-\t\t\tif (superType.isFinal())", "+\t\t\tReferenceBinding superRefType = (ReferenceBinding) superType;", "+\t\t\tif (superRefType.isFinal())", "-\t\t\ttypeRef.resolvedType = superType; // hold onto the problem type", "-\t\t\t\ttypeVariable.superclass = superType;", "+\t\t\t\ttypeVariable.superclass = superRefType;", "-\t\t\t\ttypeVariable.superInterfaces = new ReferenceBinding[] {superType};", "+\t\t\t\ttypeVariable.superInterfaces = new ReferenceBinding[] {superRefType};", "-\t\t\ttypeVariable.firstBound = superType; // first bound used to compute erasure", "+\t\t\ttypeVariable.firstBound = superRefType; // first bound used to compute erasure", "-\t\t\t\t\t\t? (ReferenceBinding) typeRef.resolveType((BlockScope)this, false)", "-\t\t\t\t\t\t: (ReferenceBinding) typeRef.resolveType((ClassScope)this);", "+\t\t\t\t\t\t? typeRef.resolveType((BlockScope)this, false)", "+\t\t\t\t\t\t: typeRef.resolveType((ClassScope)this);", "+\t\t\t\t\tif (superType.isArrayType()) {", "+\t\t\t\t\t\tproblemReporter().boundCannotBeArray(typeRef, superType);", "+\t\t\t\t\t\tcontinue nextVariable;", "+\t\t\t\t\t}", "+\t\t\t\t\tsuperRefType = (ReferenceBinding) superType;", "-\t\t\t\t\t\tproblemReporter().boundsMustBeAnInterface(typeRef, superType);", "+\t\t\t\t\t\tproblemReporter().boundMustBeAnInterface(typeRef, superType);", "-\t\t\t\t\ttypeVariable.superInterfaces[size] = superType;", "+\t\t\t\t\ttypeVariable.superInterfaces[size] = superRefType;"]}], "num": 24046}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d31f37fa1b020254e64f5f28f9f4aca", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b866c1cdf04bba83e3303e20e53cc3ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic TypeBinding resolveTypeExpecting( \t\t\tBlockScope scope, \t\t\tTypeBinding expectedType)", "signatureAfterChange": " \tpublic TypeBinding resolveTypeExpecting( \t\t\tBlockScope scope, \t\t\tTypeBinding expectedType)", "diff": ["+\t\tTypeBinding lhsType = this.resolvedType; ", "+\t\tTypeBinding rhsType = this.expression.resolvedType;", "-\t\t\t\t&& this.lhs.resolvedType == BooleanBinding ", "+\t\t\t\t&& lhsType == BooleanBinding ", "-", "+\t\tcheckAssignment(scope, lhsType, rhsType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2ebe61742fcef08a55c30aa91af4fa5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "78c62e3a4157070f714848f4de312a55f14f5144", "commitAfterChange": "fb48e11da0ebe84c63fab7b3cb5afd39c0ba6101", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "signatureAfterChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "diff": ["-\t\t\t        if (substitutedBound != originalBound) {", "-\t\t        \t\treturn wildcard.environment.createWildcard(wildcard.genericType, wildcard.rank, substitutedBound, wildcard.kind);", "+\t\t\t        TypeBinding[] originalOtherBounds = wildcard.otherBounds;", "+\t\t\t        TypeBinding[] substitutedOtherBounds = substitute(substitution, originalOtherBounds);", "+\t\t\t        if (substitutedBound != originalBound || originalOtherBounds != substitutedOtherBounds) {", "+\t\t        \t\treturn wildcard.environment.createWildcard(wildcard.genericType, wildcard.rank, substitutedBound, substitutedOtherBounds, wildcard.kind);"]}], "num": 39713}
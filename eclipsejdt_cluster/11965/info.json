{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "743099ca5aff4df9dcbf903b90e18c1c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "983d27a5c18a8afd7277c563ffa04d8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "c74124c71dc16aadffc9c127481cf29440dd03c8", "commitAfterChange": "2d053de9651cebac3cf0a82f4012b7196ccb5c83", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate Object reduceReferenceExpressionCompatibility(ReferenceExpression reference, InferenceContext18 inferenceContext)", "signatureAfterChange": "  \tprivate Object reduceReferenceExpressionCompatibility(ReferenceExpression reference, InferenceContext18 inferenceContext)", "diff": ["-\t\t\t\t\t\t|| (original.isConstructor() && original.declaringClass.typeVariables() != Binding.NO_TYPE_VARIABLES && r.mentionsAny(original.declaringClass.typeVariables(), -1)))) ", "+\t\t\t\t\t\t|| (original.isConstructor() && original.declaringClass.typeVariables() != Binding.NO_TYPE_VARIABLES)))", "+\t\t\t\t\t\t\t// not checking r.mentionsAny for constructors, because A::new resolves to the raw type", "+\t\t\t\t\t\t\t// whereas in fact the type of all expressions of this shape depends on their type variable (if any)", "-\t\t\t\t\treturn null; // already incorporated", "+\t\t\t\t\tif (!original.isConstructor() ", "+\t\t\t\t\t\t\t|| reference.receiverType.isRawType()  // note: rawtypes may/may not have typeArguments() depending on initialization state", "+\t\t\t\t\t\t\t|| reference.receiverType.typeArguments() == null)", "+\t\t\t\t\t\treturn null; // already incorporated", "+\t\t\t\t\t// for Foo<Bar>::new we need to (illegally) add one more constraint below to get to the Bar"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad5a4bf9e24a462a88f9c605eef76737", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "a337a67d07e229d2e8a590edfef8bdffb92e4516", "commitAfterChange": "f0baa4687c4b232261eab4264c1bc16ee1b49e9d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate Object reduceReferenceExpressionCompatibility(ReferenceExpression reference, InferenceContext18 inferenceContext)", "signatureAfterChange": "  \tprivate Object reduceReferenceExpressionCompatibility(ReferenceExpression reference, InferenceContext18 inferenceContext)", "diff": ["-\t\t\tMethodBinding original = compileTimeDecl.original();", "+\t\t\tMethodBinding original = compileTimeDecl.shallowOriginal();", "+\t\t\tTypeBinding compileTypeReturn = original.isConstructor() ? original.declaringClass : original.returnType;", "-\t\t\t\t\t&& ((original.typeVariables() != Binding.NO_TYPE_VARIABLES && r.mentionsAny(original.typeVariables(), -1))", "+\t\t\t\t\t&& ((original.typeVariables() != Binding.NO_TYPE_VARIABLES && compileTypeReturn.mentionsAny(original.typeVariables(), -1))", "-\t\t\t\tSuspendedInferenceRecord prevInvocation = inferenceContext.enterPolyInvocation(reference, null/*no invocation arguments available*/);", "+\t\t\t\tSuspendedInferenceRecord prevInvocation = inferenceContext.enterPolyInvocation(reference, reference.createPseudoExpressions(functionType.parameters));", "-\t\t\t\t\tinferInvocationApplicability(inferenceContext, original, functionType.parameters, original.isConstructor()/*mimic a diamond?*/, inferenceContext.inferenceKind);", "+\t\t\t\t\tinferInvocationApplicability(inferenceContext, original, functionType.parameters, original.isConstructor()/*mimic a diamond?*/, reference.inferenceKind);"]}], "num": 11965}
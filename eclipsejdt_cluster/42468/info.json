{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c228468af25c984c0ed3696fb20a6e1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f034a07745050bd9c7910e798557ac5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/NullInfoRegistry.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public void markAsDefinitelyUnknown(LocalVariableBinding local)", "signatureAfterChange": "  public void markAsDefinitelyUnknown(LocalVariableBinding local)", "diff": ["-\tthis.tagBits |= NULL_FLAG_MASK;", "-\tint position;", "-\t// position is zero-based", "-\tif ((position = local.id + this.maxFieldCount) < BitCacheSize) {", "-\t\t// use bits", "-\t\tthis.nullAssignmentValueBit1 |= (1L << position);", "-\t} ", "-\telse {", "-\t\t// use extra vector", "-\t\tint vectorIndex = (position / BitCacheSize) - 1;", "-\t\tif (this.extra == null) {", "-\t\t\tint length = vectorIndex + 1;", "-\t\t\tthis.extra = new long[extraLength][];", "-\t\t\tfor (int j = 2 /* do not care about non null info */;", "-\t\t\t\t\tj < extraLength; j++) {", "-\t\t\t\tthis.extra[j] = new long[length];", "-\t\t\t}", "-\t\t}", "-\t\telse {", "-\t\t\tint oldLength;", "-\t\t\tif (vectorIndex >= (oldLength = this.extra[2].length)) {", "-\t\t\t\tint newLength = vectorIndex + 1;", "-\t\t\t\tfor (int j = 2 /* do not care about non null info */; ", "-\t\t\t\t\t\tj < extraLength; j++) {", "-\t\t\t\t\tSystem.arraycopy(this.extra[j], 0, ", "-\t\t\t\t\t\t(this.extra[j] = new long[newLength]), 0, ", "-\t\t\t\t\t\toldLength);", "+\t// protected from non-object locals in calling methods", "+\tif (this != DEAD_END) {", "+    \tthis.tagBits |= NULL_FLAG_MASK;", "+    \tint position;", "+    \t// position is zero-based", "+    \tif ((position = local.id + this.maxFieldCount) < BitCacheSize) { // use bits", "+    \t\t// set assigned unknown", "+    \t\tthis.nullBit4 |= (1L << position);", "+    \t\tif (coverageTestFlag && coverageTestId == 290) {", "+    \t\t  \tthis.nullBit1 = 0;", "+    \t\t}", "+    \t} ", "+    \telse {", "+    \t\t// use extra vector", "+\t\t\tint vectorIndex = (position / BitCacheSize) - 1;", "+\t\t\tif (this.extra == null) {", "+\t\t\t\tint length = vectorIndex + 1;", "+\t\t\t\tthis.extra = new long[extraLength][];", "+\t\t\t\tfor (int j = 2; j < extraLength; j++) {", "+\t\t\t\t\tthis.extra[j] = new long[length];", "+\t\t\t\t}", "+\t\t\t} ", "+\t\t\telse {", "+\t\t\t\tint oldLength; // might need to grow the arrays", "+\t\t\t\tif (vectorIndex >= (oldLength = this.extra[2].length)) {", "+\t\t\t\t\tfor (int j = 2; j < extraLength; j++) {", "+\t\t\t\t\t\tSystem.arraycopy(this.extra[j], 0, ", "+\t\t\t\t\t\t\t(this.extra[j] = new long[vectorIndex + 1]), 0, ", "+\t\t\t\t\t\t\toldLength);", "+\t\t\t\t\t}", "-\t\t}", "-\t\tthis.extra[4][vectorIndex] |= (1L << (position % BitCacheSize));", "+    \t\tthis.extra[5][vectorIndex] |= (1L << (position % BitCacheSize));", "+    \t\tif (coverageTestFlag && coverageTestId == 300) {", "+    \t\t  \tthis.extra[5][vectorIndex] = ~0;", "+    \t\t}", "+    \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3011acfbdc49bfed4213a3c713926f7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/NullInfoRegistry.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void markAsDefinitelyNull(LocalVariableBinding local)", "signatureAfterChange": "  public void markAsDefinitelyNonNull(LocalVariableBinding local)", "diff": ["+\t// protected from non-object locals in calling methods", "+\tif (this != DEAD_END) {", "+    \tthis.tagBits |= NULL_FLAG_MASK;", "+    \tint position;", "+    \t// position is zero-based", "+    \tif ((position = local.id + this.maxFieldCount) < BitCacheSize) { // use bits", "+    \t\t// set assigned non null", "+    \t\tthis.nullBit3 |= (1L << position);", "+    \t\tif (coverageTestFlag && coverageTestId == 290) {", "+    \t\t  \tthis.nullBit1 = 0;", "+    \t\t}", "+    \t} ", "+    \telse {", "+    \t\t// use extra vector", "+\t\t\tint vectorIndex = (position / BitCacheSize) - 1;", "+\t\t\tif (this.extra == null) {", "+\t\t\t\tint length = vectorIndex + 1;", "+\t\t\t\tthis.extra = new long[extraLength][];", "+\t\t\t\tfor (int j = 2; j < extraLength; j++) {", "+\t\t\t\t\tthis.extra[j] = new long[length];", "+\t\t\t\t}", "+\t\t\t} ", "+\t\t\telse {", "+\t\t\t\tint oldLength; // might need to grow the arrays", "+\t\t\t\tif (vectorIndex >= (oldLength = this.extra[2].length)) {", "+\t\t\t\t\tfor (int j = 2; j < extraLength; j++) {", "+\t\t\t\t\t\tSystem.arraycopy(this.extra[j], 0, ", "+\t\t\t\t\t\t\t(this.extra[j] = new long[vectorIndex + 1]), 0, ", "+\t\t\t\t\t\t\toldLength);", "+\t\t\t\t\t}", "+    \t\tthis.extra[4][vectorIndex] |= (1L << (position % BitCacheSize));", "+    \t\tif (coverageTestFlag && coverageTestId == 300) {", "+    \t\t  \tthis.extra[5][vectorIndex] = ~0;", "+    \t\t}", "+    \t}", "-", "-\tthis.tagBits |= NULL_FLAG_MASK;", "-\tint position;", "-\t// position is zero-based", "-\tif ((position = local.id + this.maxFieldCount) < BitCacheSize) {", "-\t\t// use bits", "-\t\tthis.nullAssignmentStatusBit1 |= (1L << position);", "-\t} ", "-\telse {", "-\t\t// use extra vector", "-\t\tint vectorIndex = (position / BitCacheSize) - 1;", "-\t\tif (this.extra == null) {", "-\t\t\tint length = vectorIndex + 1;", "-\t\t\tthis.extra = new long[extraLength][];", "-\t\t\tfor (int j = 2 /* do not care about non null info */;", "-\t\t\t\t\tj < extraLength; j++) {", "-\t\t\t\tthis.extra[j] = new long[length];", "-\t\t\t}", "-\t\t}", "-\t\telse {", "-\t\t\tint oldLength;", "-\t\t\tif (vectorIndex >= (oldLength = this.extra[2].length)) {", "-\t\t\t\tint newLength = vectorIndex + 1;", "-\t\t\t\tfor (int j = 2 /* do not care about non null info */; ", "-\t\t\t\t\t\tj < extraLength; j++) {", "-\t\t\t\t\tSystem.arraycopy(this.extra[j], 0, ", "-\t\t\t\t\t\t(this.extra[j] = new long[newLength]), 0, ", "-\t\t\t\t\t\toldLength);", "-\t\t}", "-\t\tthis.extra[2][vectorIndex] |= (1L << (position % BitCacheSize));"]}], "num": 42468}
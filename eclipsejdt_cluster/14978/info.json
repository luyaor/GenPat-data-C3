{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db533dcc3c7c04de5f82f5e68e513f50", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a9caa5819c20fdf5ad5b6f48f849ce0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java", "commitBeforeChange": "ae0a76573965cce34aad958398b603107880e8e6", "commitAfterChange": "22f68238a49995ff90d0a5b80069c5ce0a399d4d", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " \t@Override \tpublic boolean mentionsAny(TypeBinding[] parameters, int idx)", "signatureAfterChange": " \t@Override \tpublic boolean mentionsAny(TypeBinding[] parameters, int idx)", "diff": ["-\t\tif (super.mentionsAny(parameters, idx))", "-\t\t\treturn true;", "-\t\tif (this.bound != null && \tthis.bound.mentionsAny(parameters, -1))", "-\t\t\treturn true;", "-\t\tif (this.otherBounds != null) {", "-\t\t\tfor (int i = 0, length = this.otherBounds.length; i < length; i++)", "-\t\t\t\tif (this.otherBounds[i].mentionsAny(parameters, -1))", "-\t\t\t\t\treturn true;", "+\t\tif (this.inRecursiveFunction)", "+\t\t\treturn false;", "+\t\tthis.inRecursiveFunction = true;", "+\t\ttry {", "+\t\t\tif (super.mentionsAny(parameters, idx))", "+\t\t\t\treturn true;", "+\t\t\tif (this.bound != null && \tthis.bound.mentionsAny(parameters, -1))", "+\t\t\t\treturn true;", "+\t\t\tif (this.otherBounds != null) {", "+\t\t\t\tfor (int i = 0, length = this.otherBounds.length; i < length; i++)", "+\t\t\t\t\tif (this.otherBounds[i].mentionsAny(parameters, -1))", "+\t\t\t\t\t\treturn true;", "+\t\t\t}", "+\t\t} finally {", "+\t\t\tthis.inRecursiveFunction = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea987be3c682017a79b936a54cd88ef3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding18.java", "commitBeforeChange": "ba102afaa27b3b6b63ee0fd01eab5a8d45f4d8a9", "commitAfterChange": "73100562c653e9756405c4478f78d4c46826e31a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic boolean isCompatibleWith(TypeBinding otherType, Scope captureScope)", "signatureAfterChange": "  \tpublic boolean isCompatibleWith(TypeBinding otherType, Scope captureScope)", "diff": ["-\t\tif (this.upperBounds != null) {", "-\t\t\tfor (int i = 0; i < this.upperBounds.length; i++) {", "-\t\t\t\tif (this.upperBounds[i].isCompatibleWith(otherType, captureScope))", "-\t\t\t\t\treturn true;", "+\t\tif (this.inRecursiveFunction)", "+\t\t\treturn true;", "+\t\tthis.inRecursiveFunction = true; ", "+\t\ttry {", "+\t\t\tif (this.upperBounds != null) {", "+\t\t\t\tfor (int i = 0; i < this.upperBounds.length; i++) {", "+\t\t\t\t\tif (this.upperBounds[i].isCompatibleWith(otherType, captureScope))", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\treturn super.isCompatibleWith(otherType, captureScope);", "+\t\t} finally {", "+\t\t\tthis.inRecursiveFunction = false;", "-\t\treturn super.isCompatibleWith(otherType, captureScope);"]}], "num": 14978}
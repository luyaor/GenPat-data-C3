{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "489bcafca7fab8aea7f39f84a38ab1f5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "008b0b7c1e2cf65b88c11894f3754542", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "6d8036f4b0f90ef715394ba92952a819714c2135", "commitAfterChange": "02733ea32199eef92e7e8bc7be9f2db172e7eedd", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " protected void locateMatches(JavaProject javaProject, PotentialMatchSet matchSet) throws JavaModelException", "signatureAfterChange": " protected void locateMatches(JavaProject javaProject, PossibleMatchSet matchSet) throws JavaModelException", "diff": ["-protected void locateMatches(JavaProject javaProject, PotentialMatchSet matchSet) throws JavaModelException {", "-\tPotentialMatch[] potentialMatches = matchSet.getPotentialMatches(javaProject.getPackageFragmentRoots());", "-\tfor (int index = 0, length = potentialMatches.length; index < length;) {", "+protected void locateMatches(JavaProject javaProject, PossibleMatchSet matchSet) throws JavaModelException {", "+\tPossibleMatch[] possibleMatches = matchSet.getPossiblelMatches(javaProject.getPackageFragmentRoots());", "+\tfor (int index = 0, length = possibleMatches.length; index < length;) {", "-\t\tlocateMatches(javaProject, potentialMatches, index, max);", "+\t\tlocateMatches(javaProject, possibleMatches, index, max);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7296738704bde361e184a149edf53f08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "302f1877ad74fd63c3cd5c56aacc5cc510a8d88b", "commitAfterChange": "240c118718aa210b0d9c1362ebe7843e41fba8b4", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " protected void locateMatches(JavaProject javaProject, PossibleMatchSet matchSet) throws CoreException", "signatureAfterChange": " protected void locateMatches(JavaProject javaProject, PossibleMatchSet matchSet, int expected) throws CoreException", "diff": ["-protected void locateMatches(JavaProject javaProject, PossibleMatchSet matchSet) throws CoreException {", "+protected void locateMatches(JavaProject javaProject, PossibleMatchSet matchSet, int expected) throws CoreException {", "-\tfor (int index = 0, length = possibleMatches.length; index < length;) {", "+\tint length = possibleMatches.length;", "+\t// increase progress from duplicate matches not stored in matchSet while adding...", "+\tif (this.progressMonitor != null) {", "+\t\tthis.progressWorked += expected-length;", "+\t\tthis.progressMonitor.worked( expected-length);", "+\t}", "+\t// locate matches (processed matches are limited to avoid problem while using VM default memory heap size)", "+\tfor (int index = 0; index < length;) {", "-\t\tif (this.progressMonitor != null)", "-\t\t\tthis.progressMonitor.worked(max);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "770ea7656a01ec14134410b50e176513", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprivate void locateMatches(JavaProject javaProject) throws JavaModelException", "signatureAfterChange": " protected void locateMatches(JavaProject javaProject, PotentialMatchSet matchSet) throws JavaModelException", "diff": ["-\t */", "-\tprivate void locateMatches(JavaProject javaProject) throws JavaModelException {", "-\t\tPotentialMatch[] potentialMatches = this.matchSet.getPotentialMatches(javaProject.getPackageFragmentRoots());", "-\t\t", "-\t\tint length = potentialMatches.length;", "-\t\tint index = 0;", "-\t\twhile (index < length) {", "-\t\t\tint max = Math.min(MAX_AT_ONCE, length-index);", "-\t\t\tlocateMatches(javaProject, potentialMatches, index, max);", "-\t\t\tindex += max;", "+ */", "+protected void locateMatches(JavaProject javaProject, PotentialMatchSet matchSet) throws JavaModelException {", "+\tPotentialMatch[] potentialMatches = matchSet.getPotentialMatches(javaProject.getPackageFragmentRoots());", "+\tfor (int index = 0, length = potentialMatches.length; index < length;) {", "+\t\tint max = Math.min(MAX_AT_ONCE, length - index);", "+\t\tlocateMatches(javaProject, potentialMatches, index, max);", "+\t\tindex += max;", "+\t}", "+}"]}], "num": 6074}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c659344f41c1f0be46d7b5528f08a81c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d91df1a829e4f764bdfd3b81beb7016", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocAllocationExpression.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\t\tthis.resolvedType = this.type.resolveType((BlockScope)scope);", "+\t\t\tthis.resolvedType = this.type.resolveType((BlockScope)scope, true /* check bounds*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "502d8d098f9bcef7cfcb76b579483656", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "7065da01531bf4c318c59206b62aa1503a948abe", "commitAfterChange": "0d303c13e0085d7aef9947e46f37c617f206a066", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void selectType(ISourceType sourceType, char[] typeName, ISourceType[] topLevelTypes, boolean searchInEnvironment)", "signatureAfterChange": " \tpublic void selectType(ISourceType sourceType, char[] typeName, ISourceType[] topLevelTypes, boolean searchInEnvironment)", "diff": ["-\t\t\t\tSourceTypeConverter", "-\t\t\t\t\t.buildCompilationUnit(", "+\t\t\t\tSourceTypeConverter.buildCompilationUnit(", "-\t\t\t\t\t\tfalse,", "-\t\t\t// don't need field and methods", "-\t\t\ttrue, // by default get member types", "-\t\t\tthis.parser.problemReporter(), result);", "+\t\t\t\t\t\tfalse, // no need for field and methods", "+\t\t\t\t\t\ttrue, // need member types", "+\t\t\t\t\t\tfalse, // no need for field initialization", "+\t\t\t\t\t\tthis.parser.problemReporter(), ", "+\t\t\t\t\t\tresult);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6243dcb76f32ff7f400115c6b88bd42a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/BatchTestUtils.java", "commitBeforeChange": "8a17153af69ddcddcc6ac5bd94649f0b523f5b72", "commitAfterChange": "a6fddb558f09852d0df8b3655125e6a25d3ce37b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static boolean compileTreeWithErrors( \t\t\tJavaCompiler compiler, \t\t\tList<String> options, \t\t\tFile targetFolder, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener)", "signatureAfterChange": " \tpublic static boolean compileTreeWithErrors( \t\t\tJavaCompiler compiler, \t\t\tList<String> options, \t\t\tFile targetFolder, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener)", "diff": ["-\t\treturn compileTreeWithErrors(compiler, options, targetFolder, diagnosticListener, false);", "+\t\treturn compileTreeWithErrors(compiler, options, targetFolder, diagnosticListener, false, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85f8c29ab927a17d02a1f2551f356335", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "1ca61ba390ea54fcabd09223853d7a3d6816c249", "commitAfterChange": "5663a1e0521003a6152962cf3fce8cc9ca6a4647", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": "  \tprotected void setExtraAnnotatedDimensions(int start, int end, TypeReference type, final List extraAnnotatedDimensions, int extraDimension)", "signatureAfterChange": "  \tprotected void setExtraAnnotatedDimensions(int start, int end, TypeReference type, final List extraAnnotatedDimensions, int extraDimension)", "diff": ["-\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[][] annotationsOnDims = type.getAnnotationsOnDimensions();", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[][] annotationsOnDims = type.getAnnotationsOnDimensions(true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9289f60a4cc29f7724a3da366f2e0ac6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "8cb541445a60df0cc8244f7bb091d1f12632b37f", "commitAfterChange": "7cb036f969007a8d8602358c2ef2fc801f7c2a88", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprotected void seekTypesInType(String prefix, int firstDot, IType type, IJavaElementRequestor requestor, int acceptFlags)", "signatureAfterChange": " \tprotected void seekTypesInType(String prefix, int firstDot, IType type, IJavaElementRequestor requestor, int acceptFlags)", "diff": ["-\t\t\t\t\tif (acceptType(memberType, acceptFlags)) ", "+\t\t\t\t\tif (acceptType(memberType, acceptFlags, true/*a source type*/)) "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2b8eb6292142f2f18f27bc4d8311f4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "7ad33f26eedd4780b8e7bafe9288f3217000d5fd", "commitAfterChange": "011b2686c2cb0787dd0d6632931ecc153c5a5666", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 131, "signatureBeforeChange": " \tpublic boolean visit(SuperMethodInvocation node)", "signatureAfterChange": " \tpublic boolean visit(SuperMethodInvocation node)", "diff": ["-\t\t\t\t\trewriteOptionalTypeParameters(node, SuperMethodInvocation.TYPE_ARGUMENTS_PROPERTY, pos, \"\"); //$NON-NLS-1$", "+\t\t\t\t\trewriteOptionalTypeParameters(node, SuperMethodInvocation.TYPE_ARGUMENTS_PROPERTY, pos, \"\", false); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6e8b1820a306a53d1919df614489b3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "7065da01531bf4c318c59206b62aa1503a948abe", "commitAfterChange": "0d303c13e0085d7aef9947e46f37c617f206a066", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "signatureAfterChange": " public void accept(ISourceType[] sourceTypes, PackageBinding packageBinding)", "diff": ["-\t\tSourceTypeConverter.buildCompilationUnit(new ISourceType[] {sourceType}, false, true, lookupEnvironment.problemReporter, result);", "+\t\tSourceTypeConverter.buildCompilationUnit(", "+\t\t\tnew ISourceType[] {sourceType}, ", "+\t\t\tfalse, // no need for field and methods", "+\t\t\ttrue, // need member types", "+\t\t\tfalse, // no need for field initialization", "+\t\t\tlookupEnvironment.problemReporter, ", "+\t\t\tresult);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba7bcd1fa43f36393d7a7554af99ca57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding checkedType = type.resolveType(scope);", "+\t\tTypeBinding checkedType = type.resolveType(scope, true /* check bounds*/);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f62bf91eecd539fdbb0681a2f09b73e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/BatchTestUtils.java", "commitBeforeChange": "8a17153af69ddcddcc6ac5bd94649f0b523f5b72", "commitAfterChange": "a6fddb558f09852d0df8b3655125e6a25d3ce37b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic static void compileTree(JavaCompiler compiler, List<String> options, \t\t\tFile targetFolder, boolean useJLS8Processors, \t\t\tDiagnosticListener<? super JavaFileObject> listener)", "signatureAfterChange": "  \tpublic static void compileTree(JavaCompiler compiler, List<String> options, \t\t\tFile targetFolder, boolean useJLS8Processors, \t\t\tDiagnosticListener<? super JavaFileObject> listener)", "diff": ["-\t\taddProcessorPaths(options, useJLS8Processors);", "+\t\taddProcessorPaths(options, useJLS8Processors, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe25ae92e4fde81cce16ae6d51196ed6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "0790094c582259a11cb5775cf9802758597e2f7f", "commitAfterChange": "8631fe374a0c007fcac770c2d9427a82a5e04a3d", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tprivate boolean createExternalArchiveDelta(HashSet refreshedElements, IProgressMonitor monitor)", "signatureAfterChange": " \tprivate boolean createExternalArchiveDelta(HashSet refreshedElements, IProgressMonitor monitor)", "diff": ["-\t\t\t\t\t\t\t\t\tthis.manager.indexManager.indexLibrary(entryPath, project.getProject(), ((ClasspathEntry)entries[j]).getLibraryIndexLocation());", "+\t\t\t\t\t\t\t\t\tthis.manager.indexManager.indexLibrary(entryPath, project.getProject(), ((ClasspathEntry)entries[j]).getLibraryIndexLocation(), true);"]}], "num": 68504}
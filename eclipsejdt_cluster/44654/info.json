{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8598a0677814d8d516a7a4407691daad", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2235a19c520770f9c494db1fb97fa125", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ElementInfoConverter.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeDeclaration convert(SourceTypeElementInfo sourceType, CompilationResult compilationResult)", "signatureAfterChange": " \tprivate TypeDeclaration convert(SourceTypeElementInfo sourceType, CompilationResult compilationResult)", "diff": ["-\t\tTypeDeclaration type;", "-\t\tboolean isAnonymous = false;", "+\t\tTypeDeclaration type = new TypeDeclaration(compilationResult);", "-\t\t\t\t\ttype = new AnonymousLocalTypeDeclaration(compilationResult);", "-\t\t\t\t\tisAnonymous = true;", "-\t\t\t\t} else if (typeHandle.isLocal()) {", "-\t\t\t\t\ttype = new LocalTypeDeclaration(compilationResult);", "+\t\t\t\t\ttype.name = TypeDeclaration.ANONYMOUS_EMPTY_NAME;", "+\t\t\t\t\ttype.bits |= ASTNode.AnonymousAndLocalMask;", "-\t\t\t\t\ttype = new TypeDeclaration(compilationResult);", "+\t\t\t\t\tif (typeHandle.isLocal()) {", "+\t\t\t\t\t\ttype.bits |= ASTNode.IsLocalTypeMASK;", "+\t\t\t\t\t}", "-\t\t\t\ttype = new TypeDeclaration(compilationResult);", "+\t\t\t\t// could not figure, assume toplevel", "-\t\t\ttype = new MemberTypeDeclaration(compilationResult);", "+\t\t\ttype.bits |= ASTNode.IsMemberTypeMASK;", "-\t\tif (!isAnonymous) {", "+\t\tif ((type.bits & ASTNode.IsAnonymousTypeMASK) == 0) {", "-\t\t} else {", "-\t\t\ttype.name = AnonymousLocalTypeDeclaration.ANONYMOUS_EMPTY_NAME;", "-\t\ttype.memberTypes = new MemberTypeDeclaration[sourceMemberTypeCount];", "+\t\ttype.memberTypes = new TypeDeclaration[sourceMemberTypeCount];", "-\t\t\ttype.memberTypes[i] =", "-\t\t\t\t(MemberTypeDeclaration) convert((SourceTypeElementInfo)sourceMemberTypes[i], compilationResult);", "+\t\t\ttype.memberTypes[i] = convert((SourceTypeElementInfo)sourceMemberTypes[i], compilationResult);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "276c5cd43c7efe35e26692588e1f113d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDelta.java", "commitBeforeChange": "6a5c512cff72c8d122f75160d7a3ca9f79b312ee", "commitAfterChange": "2b626d6b99c12d614e4c1d8f27d369b3ddf2a137", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected void addAffectedChild(JavaElementDelta child)", "signatureAfterChange": " protected void addAffectedChild(JavaElementDelta child)", "diff": ["-\tIJavaElementDelta existingChild = null;", "+\tJavaElementDelta existingChild = null;", "-\t\t\t\texistingChild = fAffectedChildren[i];", "+\t\t\t\texistingChild = (JavaElementDelta)fAffectedChildren[i];", "-\t\t\t\t\t\t\t((JavaElementDelta) existingChild).addAffectedChild(childsChild);", "+\t\t\t\t\t\t\texistingChild.addAffectedChild(childsChild);", "-\t\t\t\t\t\t// update flags if needed", "-\t\t\t\t\t\tswitch (((JavaElementDelta) existingChild).fChangeFlags) {", "-\t\t\t\t\t\t\tcase F_ADDED_TO_CLASSPATH:", "-\t\t\t\t\t\t\tcase F_REMOVED_FROM_CLASSPATH:", "-\t\t\t\t\t\t\tcase F_SOURCEATTACHED:", "-\t\t\t\t\t\t\tcase F_SOURCEDETACHED:", "-\t\t\t\t\t\t\t\t((JavaElementDelta) existingChild).fChangeFlags |= child.fChangeFlags;", "-\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t// update flags", "+\t\t\t\t\t\tboolean childHadContentFlag = (child.fChangeFlags & F_CONTENT) != 0;", "+\t\t\t\t\t\tboolean existingChildHadChildrenFlag = (existingChild.fChangeFlags & F_CHILDREN) != 0;", "+\t\t\t\t\t\texistingChild.fChangeFlags |= child.fChangeFlags;", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// remove F_CONTENT flag if existing child had F_CHILDREN flag set ", "+\t\t\t\t\t\t// (case of fine grained delta (existing child) and delta coming from ", "+\t\t\t\t\t\t// DeltaProcessor (child))", "+\t\t\t\t\t\tif (childHadContentFlag && existingChildHadChildrenFlag) {", "+\t\t\t\t\t\t\texistingChild.fChangeFlags &= ~F_CONTENT;", "-\t\t\t\t\t\t\t((JavaElementDelta)existingChild).resourceDeltas = resDeltas;", "-\t\t\t\t\t\t\t((JavaElementDelta)existingChild).resourceDeltasCounter = child.resourceDeltasCounter;", "+\t\t\t\t\t\t\texistingChild.resourceDeltas = resDeltas;", "+\t\t\t\t\t\t\texistingChild.resourceDeltasCounter = child.resourceDeltasCounter;"]}], "num": 44654}
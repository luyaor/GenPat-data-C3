{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0c655ff324862addc491d697794a524", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ee96bd38e0c3a622c8efea830f2c0e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "83dc88df7a1508be17b764df4120ac8a34178f58", "commitAfterChange": "f428b70bc80bfdae47260a00a8636113b21b698c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["-\t\t\t\t\tTypeBinding match = expressionType.findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\tTypeBinding match = expressionType.findSuperTypeOriginatingFrom(castType);", "-\t\t\tTypeBinding match = expressionType.findSuperTypeWithSameErasure(castType);", "+\t\t\tTypeBinding match = expressionType.findSuperTypeOriginatingFrom(castType);", "-\t\tcase Binding.WILDCARD_TYPE : // intersection type", "-\t\t\tmatch = expressionType.findSuperTypeWithSameErasure(castType);", "+\t\tcase Binding.WILDCARD_TYPE :", "+\t\tcase Binding.INTERSECTION_TYPE :", "+\t\t\tmatch = expressionType.findSuperTypeOriginatingFrom(castType);", "-\t\t\t\t\t\tmatch = expressionType.findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\tmatch = expressionType.findSuperTypeOriginatingFrom(castType);", "-\t\t\t\t\t\t\tmatch = interfaceType.findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\t\tmatch = interfaceType.findSuperTypeOriginatingFrom(castType);", "-\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(interfaceType);", "+\t\t\t\t\t\t\tmatch = castType.findSuperTypeOriginatingFrom(interfaceType);", "-\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(expressionType);", "+\t\t\t\t\t\t\tmatch = castType.findSuperTypeOriginatingFrom(expressionType);", "-\t\t\t\t\t\tmatch = expressionType.findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\tmatch = expressionType.findSuperTypeOriginatingFrom(castType);", "-\t\t\t\t\t\t\tmatch = refExprType.findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\t\tmatch = refExprType.findSuperTypeOriginatingFrom(castType);", "-\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(expressionType);", "+\t\t\t\t\t\t\tmatch = castType.findSuperTypeOriginatingFrom(expressionType);", "-\t\t\t\t\t\t\tmatch = expressionType.findSuperTypeWithSameErasure(castType);", "+\t\t\t\t\t\t\tmatch = expressionType.findSuperTypeOriginatingFrom(castType);", "-\t\t\t\t\t\t\tmatch = castType.findSuperTypeWithSameErasure(expressionType);", "+\t\t\t\t\t\t\tmatch = castType.findSuperTypeOriginatingFrom(expressionType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49088b470ee2f9ae228b5e96d7b7807f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "5c85e7570588f45bc28b317d5381f96243304903", "commitAfterChange": "e3af240dccc65542f2700248f6e576a65441a265", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-\t\t\t\t", "-\t\t\t\tReferenceBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo(castType.isTypeVariable() ? (ReferenceBinding)castType : (ReferenceBinding)castType.erasure());", "-\t\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\t\tif (!castType.isTypeVariable() || (((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure()) == null)) {", "+\t\t\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\t\t}", "-\t\t\t\tReferenceBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo(castType.isTypeVariable() ? (ReferenceBinding)castType : (ReferenceBinding)castType.erasure());", "-\t\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\t\tif (!castType.isTypeVariable() || (((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure()) == null)) {", "+\t\t\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\t\t}", "-\t\t\t\tReferenceBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "+\t\t\t\tTypeBinding match = ((ReferenceBinding)castType).findSuperTypeErasingTo(expressionType.isTypeVariable() ? (ReferenceBinding)expressionType : (ReferenceBinding)expressionType.erasure());", "-\t\t\tReferenceBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "+\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo(castType.isTypeVariable() ? (ReferenceBinding)castType : (ReferenceBinding)castType.erasure());", "-\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\tif (!castType.isTypeVariable() || (((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure()) == null)) {", "+\t\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\t}"]}], "num": 63948}
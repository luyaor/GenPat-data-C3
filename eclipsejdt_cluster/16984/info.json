{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "351ac9cb501461d7d0e2312ec150e3ae", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dc49763e49b80edb61d2f40a3e2f2d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "67da1da15e9afbcd33679f07597c706e7915cf4a", "commitAfterChange": "027fccb2c17e0f0d2b28705c6704af10fc8ce0aa", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 41, "signatureBeforeChange": " protected void consumeToken(int token)", "signatureAfterChange": " protected void consumeToken(int token)", "diff": ["+\t", "+\tif (isInsideMethod() || isInsideFieldInitialization()) {", "+\t\tswitch(token) {", "+\t\t\tcase TokenNameLPAREN:", "+\t\t\t\tpopElement(K_BETWEEN_NEW_AND_LEFT_BRACKET);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameLBRACE:", "+\t\t\t\tpopElement(K_BETWEEN_NEW_AND_LEFT_BRACKET);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameLBRACKET:", "+\t\t\t\tpopElement(K_BETWEEN_NEW_AND_LEFT_BRACKET);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameRBRACE:", "+\t\t\t\tpopElement(K_BLOCK_DELIMITER);", "+\t\t\t\tbreak;", "+\t\t}", "+\t}", "-\t\t\t&& this.insideFieldInitialization()) {", "+\t\t\t&& this.isIndirectlyInsideFieldInitialization()) {", "-\tif (this.inMethodStack[this.inMethodPtr] || this.inFieldInitializationStack[this.inFieldInitializationPtr]) {", "+\tif (isInsideMethod() || isInsideFieldInitialization()) {", "-\t\t\t\t\t\tif (!this.betweenNewAndLeftBraket) { // eg. not new z.y[.]X()", "+\t\t\t\t\t\tif (topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) != K_BETWEEN_NEW_AND_LEFT_BRACKET) {", "-\t\t\t\t\t// if current identifier is the empty completion one", "-\t\t\t\t\tif (identifierStack[identifierPtr] == CompletionScanner.EmptyCompletionIdentifier){", "-\t\t\t\t\t\tthis.completionBehindDot = true;", "-\t\t\t\t\t}", "-\t\t\t\tthis.betweenNewAndLeftBraket = true;", "+\t\t\t\tpushOnElementStack(K_BETWEEN_NEW_AND_LEFT_BRACKET);", "-\t\t\t\tthis.betweenCatchAndRightParen = true;", "+\t\t\t\tpushOnElementStack(K_BETWEEN_CATCH_AND_RIGHT_PAREN);", "-\t\t\t\tthis.betweenNewAndLeftBraket = false;", "-\t\t\t\tthis.bracketDepth++;", "-\t\t\t\t\t\tthis.pushOnInvocationStacks(this.invocationType, this.qualifier);", "+\t\t\t\t\t\tif (topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_SELECTOR) {", "+\t\t\t\t\t\t\tthis.pushOnElementStack(K_SELECTOR_INVOCATION_TYPE, this.invocationType);", "+\t\t\t\t\t\t\tthis.pushOnElementStack(K_SELECTOR_QUALIFIER, this.qualifier);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.pushOnInvocationStacks(", "-\t\t\t\t\t\t\t(this.invocationType == QUALIFIED_ALLOCATION) ? QUALIFIED_ALLOCATION : ALLOCATION, ", "-\t\t\t\t\t\t\tthis.qualifier);", "+\t\t\t\t\t\tif (topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_SELECTOR) {", "+\t\t\t\t\t\t\tthis.pushOnElementStack(K_SELECTOR_INVOCATION_TYPE, (this.invocationType == QUALIFIED_ALLOCATION) ? QUALIFIED_ALLOCATION : ALLOCATION);", "+\t\t\t\t\t\t\tthis.pushOnElementStack(K_SELECTOR_QUALIFIER, this.qualifier);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.pushOnInvocationStacks(", "-\t\t\t\t\t\t\t(this.invocationType == QUALIFIED_ALLOCATION) ? QUALIFIED_ALLOCATION : ALLOCATION, ", "-\t\t\t\t\t\t\tthis.qualifier);", "+\t\t\t\t\t\tif (topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_SELECTOR) {", "+\t\t\t\t\t\t\tthis.pushOnElementStack(K_SELECTOR_INVOCATION_TYPE, (this.invocationType == QUALIFIED_ALLOCATION) ? QUALIFIED_ALLOCATION : ALLOCATION);", "+\t\t\t\t\t\t\tthis.pushOnElementStack(K_SELECTOR_QUALIFIER, this.qualifier);", "+\t\t\t\t\t\t}", "-\t\t\t\tthis.betweenNewAndLeftBraket = false;", "-\t\t\t\tthis.pushBlockInvocationPtr();", "+\t\t\t\tpushOnElementStack(K_BLOCK_DELIMITER);", "-\t\t\t\tthis.betweenNewAndLeftBraket = false;", "-\t\t\t\tif (this.blockInvocationPtr >= 0) this.blockInvocationPtr--;", "-\t\t\t\tthis.betweenCatchAndRightParen = false;", "-\t\t\t\tthis.bracketDepth--;", "-\t\t\t\tbreak;", "-\t\t\tcase TokenNameCOLON:", "-\t\t\t\tif (previous == TokenNameIdentifier) {", "-\t\t\t\t\tif (this.labelCounterPtr >= 0) this.labelCounterStack[this.labelCounterPtr]++;", "-\t\t\t\t}", "+\t\t\t\tpopElement(K_BETWEEN_CATCH_AND_RIGHT_PAREN);", "-\t\t\t\tthis.throwBracketDepth= bracketDepth;", "+\t\t\t\tpushOnElementStack(K_INSIDE_THROW_STATEMENT, bracketDepth);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameSEMICOLON:", "+\t\t\t\tif(topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_INSIDE_THROW_STATEMENT", "+\t\t\t\t\t&& topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == this.bracketDepth) {", "+\t\t\t\t\tpopElement(K_INSIDE_THROW_STATEMENT);", "+\t\t\t\t} else if (topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_INSIDE_RETURN_STATEMENT", "+\t\t\t\t\t&& topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == this.bracketDepth){", "+\t\t\t\t\tpopElement(K_INSIDE_RETURN_STATEMENT);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNamereturn:", "+\t\t\t\tpushOnElementStack(K_INSIDE_RETURN_STATEMENT, this.bracketDepth);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameMULTIPLY:", "+\t\t\t\tpushOnElementStack(K_OPERATOR, MULTIPLY);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameDIVIDE:", "+\t\t\t\tpushOnElementStack(K_OPERATOR, DIVIDE);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameREMAINDER:", "+\t\t\t\tpushOnElementStack(K_OPERATOR, REMAINDER);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNamePLUS:", "+\t\t\t\tpushOnElementStack(K_OPERATOR, PLUS);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameMINUS:", "+\t\t\t\tpushOnElementStack(K_OPERATOR, MINUS);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameLEFT_SHIFT:", "+\t\t\t\tpushOnElementStack(K_OPERATOR, LEFT_SHIFT);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameRIGHT_SHIFT:", "+\t\t\t\tpushOnElementStack(K_OPERATOR, RIGHT_SHIFT);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameUNSIGNED_RIGHT_SHIFT:", "+\t\t\t\tpushOnElementStack(K_OPERATOR, UNSIGNED_RIGHT_SHIFT);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameLESS:", "+\t\t\t\tpushOnElementStack(K_OPERATOR, LESS);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameGREATER:", "+\t\t\t\tpushOnElementStack(K_OPERATOR, GREATER);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameLESS_EQUAL:", "+\t\t\t\tpushOnElementStack(K_OPERATOR, LESS_EQUAL);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameGREATER_EQUAL:", "+\t\t\t\tpushOnElementStack(K_OPERATOR, GREATER_EQUAL);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameAND:", "+\t\t\t\tpushOnElementStack(K_OPERATOR, AND);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameXOR:", "+\t\t\t\tpushOnElementStack(K_OPERATOR, XOR);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameOR:", "+\t\t\t\tpushOnElementStack(K_OPERATOR, OR);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameAND_AND:", "+\t\t\t\tpushOnElementStack(K_OPERATOR, AND_AND);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameOR_OR:", "+\t\t\t\tpushOnElementStack(K_OPERATOR, OR_OR);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNamePLUS_PLUS:", "+\t\t\t\tpushOnElementStack(K_OPERATOR, PLUS_PLUS);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameMINUS_MINUS:", "+\t\t\t\tpushOnElementStack(K_OPERATOR, MINUS_MINUS);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameTWIDDLE:", "+\t\t\t\tpushOnElementStack(K_OPERATOR, TWIDDLE);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameNOT:", "+\t\t\t\tpushOnElementStack(K_OPERATOR, NOT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff37d138a69b29146c00cc79724a343e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "e73037ff248454bfb7965c3990814d5ef5cb4620", "commitAfterChange": "cafb328a42240bc62f70f6b130384a29f0e8d16a", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 49, "signatureBeforeChange": " protected void consumeToken(int token)", "signatureAfterChange": " protected void consumeToken(int token)", "diff": ["+}", "+\tif(isFirst) {", "+\t\tsuper.consumeToken(token);", "+\t\treturn;", "+\t}", "+\t", "-\t\t\t\tpushOnElementStack(K_OPERATOR, MULTIPLY);", "+\t\t\t\tpushOnElementStack(K_BINARY_OPERATOR, MULTIPLY);", "-\t\t\t\tpushOnElementStack(K_OPERATOR, DIVIDE);", "+\t\t\t\tpushOnElementStack(K_BINARY_OPERATOR, DIVIDE);", "-\t\t\t\tpushOnElementStack(K_OPERATOR, REMAINDER);", "+\t\t\t\tpushOnElementStack(K_BINARY_OPERATOR, REMAINDER);", "-\t\t\t\tpushOnElementStack(K_OPERATOR, PLUS);", "+\t\t\t\tpushOnElementStack(K_BINARY_OPERATOR, PLUS);", "-\t\t\t\tpushOnElementStack(K_OPERATOR, MINUS);", "+\t\t\t\tpushOnElementStack(K_BINARY_OPERATOR, MINUS);", "-\t\t\t\tpushOnElementStack(K_OPERATOR, LEFT_SHIFT);", "+\t\t\t\tpushOnElementStack(K_BINARY_OPERATOR, LEFT_SHIFT);", "-\t\t\t\tpushOnElementStack(K_OPERATOR, RIGHT_SHIFT);", "+\t\t\t\tpushOnElementStack(K_BINARY_OPERATOR, RIGHT_SHIFT);", "-\t\t\t\tpushOnElementStack(K_OPERATOR, UNSIGNED_RIGHT_SHIFT);", "+\t\t\t\tpushOnElementStack(K_BINARY_OPERATOR, UNSIGNED_RIGHT_SHIFT);", "-\t\t\t\tpushOnElementStack(K_OPERATOR, LESS);", "+\t\t\t\tpushOnElementStack(K_BINARY_OPERATOR, LESS);", "-\t\t\t\tpushOnElementStack(K_OPERATOR, GREATER);", "+\t\t\t\tpushOnElementStack(K_BINARY_OPERATOR, GREATER);", "-\t\t\t\tpushOnElementStack(K_OPERATOR, LESS_EQUAL);", "+\t\t\t\tpushOnElementStack(K_BINARY_OPERATOR, LESS_EQUAL);", "-\t\t\t\tpushOnElementStack(K_OPERATOR, GREATER_EQUAL);", "+\t\t\t\tpushOnElementStack(K_BINARY_OPERATOR, GREATER_EQUAL);", "-\t\t\t\tpushOnElementStack(K_OPERATOR, AND);", "+\t\t\t\tpushOnElementStack(K_BINARY_OPERATOR, AND);", "-\t\t\t\tpushOnElementStack(K_OPERATOR, XOR);", "+\t\t\t\tpushOnElementStack(K_BINARY_OPERATOR, XOR);", "-\t\t\t\tpushOnElementStack(K_OPERATOR, OR);", "+\t\t\t\tpushOnElementStack(K_BINARY_OPERATOR, OR);", "-\t\t\t\tpushOnElementStack(K_OPERATOR, AND_AND);", "+\t\t\t\tpushOnElementStack(K_BINARY_OPERATOR, AND_AND);", "-\t\t\t\tpushOnElementStack(K_OPERATOR, OR_OR);", "+\t\t\t\tpushOnElementStack(K_BINARY_OPERATOR, OR_OR);", "-\t\t\t\tpushOnElementStack(K_OPERATOR, PLUS_PLUS);", "+\t\t\t\tpushOnElementStack(K_UNARY_OPERATOR, PLUS_PLUS);", "-\t\t\t\tpushOnElementStack(K_OPERATOR, MINUS_MINUS);", "+\t\t\t\tpushOnElementStack(K_UNARY_OPERATOR, MINUS_MINUS);", "-\t\t\t\tpushOnElementStack(K_OPERATOR, TWIDDLE);", "+\t\t\t\tpushOnElementStack(K_UNARY_OPERATOR, TWIDDLE);", "-\t\t\t\tpushOnElementStack(K_OPERATOR, NOT);", "+\t\t\t\tpushOnElementStack(K_UNARY_OPERATOR, NOT);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameEQUAL_EQUAL:", "+\t\t\t\tpushOnElementStack(K_BINARY_OPERATOR, EQUAL_EQUAL);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameNOT_EQUAL:", "+\t\t\t\tpushOnElementStack(K_BINARY_OPERATOR, NOT_EQUAL);", "+\t\t\t\tbreak;", "+\t\t\tcase TokenNameinstanceof:", "+\t\t\t\tpushOnElementStack(K_BINARY_OPERATOR, INSTANCEOF);"]}], "num": 16984}
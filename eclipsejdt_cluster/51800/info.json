{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f0c523555e7b7d08b9387e70788dae5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ff6d7ac55bb6215fef1851e6d81c0eb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemHandler.java", "commitBeforeChange": "c3cfcbf3735a569bd82b9e06ea31c818736eb0c6", "commitAfterChange": "49663a93eec65b4c3aab7e71b88620319802d4cc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void handle( \tint problemId, \tString[] problemArguments, \tint elaborationId, \tString[] messageArguments, \tint severity, \tint problemStartPosition, \tint problemEndPosition, \tReferenceContext referenceContext, \tCompilationResult unitResult)", "signatureAfterChange": " public void handle( \tint problemId, \tString[] problemArguments, \tint elaborationId, \tString[] messageArguments, \tint severity, \tint problemStartPosition, \tint problemEndPosition, \tReferenceContext referenceContext, \tCompilationResult unitResult)", "diff": ["+\t\t // if no reference context, we need to abort from the current compilation process", "+\t\t if (referenceContext == null) {", "+\t\t\t if ((severity & ProblemSeverities.Error) != 0) { // non reportable error is fatal", "+\t\t\t\t CategorizedProblem problem = this.createProblem(null, problemId, problemArguments, elaborationId, messageArguments, severity, 0, 0, 0, 0);", "+\t\t\t\t throw new AbortCompilation(null, problem);", "+\t\t\t } else {", "+\t\t\t\t return; // ignore non reportable warning", "+\t\t\t }", "+\t\t }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9e25eb9243f940a7bc0cb3b561829c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemHandler.java", "commitBeforeChange": "3c9fcd486312b0a7ab40ed5ba3b6e46d9bce5dc9", "commitAfterChange": "7e8a00ed0fb06969786f78f88b755624a0317803", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void handle( \tint problemId, \tString[] problemArguments, \tint elaborationId, \tString[] messageArguments, \tint severity, \tint problemStartPosition, \tint problemEndPosition, \tReferenceContext referenceContext, \tCompilationResult unitResult)", "signatureAfterChange": " public void handle( \tint problemId, \tString[] problemArguments, \tint elaborationId, \tString[] messageArguments, \tint severity, \tint problemStartPosition, \tint problemEndPosition, \tReferenceContext referenceContext, \tCompilationResult unitResult)", "diff": ["+\t\t\t\t// don't abort or tag as error if the error is suppressed", "+\t\t\t\tif (!referenceContext.hasErrors() && (severity & ProblemSeverities.Optional) != 0 && this.options.suppressOptionalErrors) {", "+\t\t\t\t\tCompilationUnitDeclaration unitDecl = referenceContext.getCompilationUnitDeclaration();", "+\t\t\t\t\tif (unitDecl != null && unitDecl.isSuppressed(problem)) {", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 51800}
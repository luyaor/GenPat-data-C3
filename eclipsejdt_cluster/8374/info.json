{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec8e6b986781a2d6364f6b34579a259b", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a7ee2b31e8b19cf6b7ae4caa50cb58a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r \r \tprivate void findMemberTypes(\r \t\tchar[] typeName,\r \t\tReferenceBinding[] memberTypes,\r \t\tObjectVector typesFound,\r \t\tReferenceBinding receiverType,\r \t\tSourceTypeBinding invocationType)", "signatureAfterChange": "\r \r private void findMemberTypes(char[] typeName, ReferenceBinding[] memberTypes, ObjectVector typesFound)", "diff": ["-\r", "-\tprivate void findMemberTypes(\r", "-\t\tchar[] typeName,\r", "-\t\tReferenceBinding[] memberTypes,\r", "-\t\tObjectVector typesFound,\r", "-\t\tReferenceBinding receiverType,\r", "-\t\tSourceTypeBinding invocationType) {\r", "-\r", "-\t\t// Inherited member types which are hidden by subclasses are filtered out\r", "-\t\t// No visibility checks can be performed without the scope & invocationSite\r", "-\r", "-\t\tint typeLength = typeName.length;\r", "-\t\tnext : for (int m = memberTypes.length; --m >= 0;) {\r", "-\t\t\tReferenceBinding memberType = memberTypes[m];\r", "-\t\t\t//\t\tif (!wantClasses && memberType.isClass()) continue next;\r", "-\t\t\t//\t\tif (!wantInterfaces && memberType.isInterface()) continue next;\r", "-\t\t\tif (typeLength > memberType.sourceName.length)\r", "-\t\t\t\tcontinue next;\r", "-\t\t\tif (!CharOperation.prefixEquals(typeName, memberType.sourceName, false\r", "-\t\t\t\t/* ignore case */\r", "-\t\t\t\t))\r", "-\t\t\t\tcontinue next;\r", "-\r", "-\t\t\tif (options.checkVisibilitySensitive()\r", "-\t\t\t\t&& !memberType.canBeSeenBy(receiverType, invocationType))\r", "-\t\t\t\tcontinue next;\r", "-\r", "-\t\t\tfor (int i = typesFound.size; --i >= 0;) {\r", "-\t\t\t\tReferenceBinding otherType = (ReferenceBinding) typesFound.elementAt(i);\r", "-\t\t\t\tif (memberType == otherType)\r", "-\t\t\t\t\tcontinue next;\r", "-\t\t\t\tif (CharOperation.equals(memberType.sourceName, otherType.sourceName, true)) {\r", "-\t\t\t\t\tif (memberType.enclosingType().isSuperclassOf(otherType.enclosingType()))\r", "-\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t\tif (otherType.enclosingType().isInterface())\r", "-\t\t\t\t\t\tif (memberType\r", "-\t\t\t\t\t\t\t.enclosingType()\r", "-\t\t\t\t\t\t\t.implementsInterface(otherType.enclosingType(), true))\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t}\r", "-\r", "-\t\t\ttypesFound.add(memberType);\r", "-\t\t\tif (memberType.isClass())\r", "-\t\t\t\trequestor.acceptClass(\r", "-\t\t\t\t\tmemberType.qualifiedPackageName(),\r", "-\t\t\t\t\tmemberType.qualifiedSourceName(),\r", "-\t\t\t\t\tmemberType.sourceName(),\r", "-\t\t\t\t\tmemberType.modifiers,\r", "-\t\t\t\t\tstartPosition,\r", "-\t\t\t\t\tendPosition);\r", "-\t\t\telse\r", "-\t\t\t\trequestor.acceptInterface(\r", "-\t\t\t\t\tmemberType.qualifiedPackageName(),\r", "-\t\t\t\t\tmemberType.qualifiedSourceName(),\r", "-\t\t\t\t\tmemberType.sourceName(),\r", "-\t\t\t\t\tmemberType.modifiers,\r", "-\t\t\t\t\tstartPosition,\r", "-\t\t\t\t\tendPosition);\r", "+\r", "+private void findMemberTypes(char[] typeName, ReferenceBinding[] memberTypes, ObjectVector typesFound) {\r", "+\r", "+\t// Inherited member types which are hidden by subclasses are filtered out\r", "+\t// No visibility checks can be performed without the scope & invocationSite\r", "+\r", "+\tint typeLength = typeName.length;\r", "+\tnext : for (int m = memberTypes.length; --m >= 0;) {\r", "+\t\tReferenceBinding memberType = memberTypes[m];\r", "+//\t\tif (!wantClasses && memberType.isClass()) continue next;\r", "+//\t\tif (!wantInterfaces && memberType.isInterface()) continue next;\r", "+\t\tif (typeLength > memberType.sourceName.length) continue next;\r", "+\t\tif (!CharOperation.prefixEquals(typeName, memberType.sourceName, false /* ignore case */)) continue next;\r", "+\r", "+\t\tfor (int i = typesFound.size; --i >= 0;) {\r", "+\t\t\tReferenceBinding otherType = (ReferenceBinding) typesFound.elementAt(i);\r", "+\t\t\tif (memberType == otherType) continue next;\r", "+\t\t\tif (CharOperation.equals(memberType.sourceName, otherType.sourceName, true)) {\r", "+\t\t\t\tif (memberType.enclosingType().isSuperclassOf(otherType.enclosingType())) continue next;\r", "+\t\t\t\tif (otherType.enclosingType().isInterface())\r", "+\t\t\t\t\tif (memberType.enclosingType().implementsInterface(otherType.enclosingType(), true)) continue next;\r", "+\t\t\t}\r", "+\t\t}\r", "+\r", "+\t\ttypesFound.add(memberType);\r", "+\t\tif (memberType.isClass())\r", "+\t\t\trequestor.acceptClass(\r", "+\t\t\t\tmemberType.qualifiedPackageName(),\r", "+\t\t\t\tmemberType.qualifiedSourceName(),\r", "+\t\t\t\tmemberType.sourceName(),\r", "+\t\t\t\tmemberType.modifiers,\r", "+\t\t\t\tstartPosition,\r", "+\t\t\t\tendPosition);\r", "+\t\telse\r", "+\t\t\trequestor.acceptInterface(\r", "+\t\t\t\tmemberType.qualifiedPackageName(),\r", "+\t\t\t\tmemberType.qualifiedSourceName(),\r", "+\t\t\t\tmemberType.sourceName(),\r", "+\t\t\t\tmemberType.modifiers,\r", "+\t\t\t\tstartPosition,\r", "+\t\t\t\tendPosition);\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49ab37443491f87d3453dc5728db6e28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r \r \tprivate void findMemberTypes(\r \t\tchar[] typeName,\r \t\tReferenceBinding[] memberTypes,\r \t\tObjectVector typesFound,\r \t\tReferenceBinding receiverType,\r \t\tSourceTypeBinding invocationType)", "signatureAfterChange": "\r \r private void findMemberTypes(char[] typeName, ReferenceBinding[] memberTypes, ObjectVector typesFound)", "diff": ["-\r", "-\tprivate void findMemberTypes(\r", "-\t\tchar[] typeName,\r", "-\t\tReferenceBinding[] memberTypes,\r", "-\t\tObjectVector typesFound,\r", "-\t\tReferenceBinding receiverType,\r", "-\t\tSourceTypeBinding invocationType) {\r", "-\r", "-\t\t// Inherited member types which are hidden by subclasses are filtered out\r", "-\t\t// No visibility checks can be performed without the scope & invocationSite\r", "-\r", "-\t\tint typeLength = typeName.length;\r", "-\t\tnext : for (int m = memberTypes.length; --m >= 0;) {\r", "-\t\t\tReferenceBinding memberType = memberTypes[m];\r", "-\t\t\t//\t\tif (!wantClasses && memberType.isClass()) continue next;\r", "-\t\t\t//\t\tif (!wantInterfaces && memberType.isInterface()) continue next;\r", "-\t\t\tif (typeLength > memberType.sourceName.length)\r", "-\t\t\t\tcontinue next;\r", "-\t\t\tif (!CharOperation.prefixEquals(typeName, memberType.sourceName, false\r", "-\t\t\t\t/* ignore case */\r", "-\t\t\t\t))\r", "-\t\t\t\tcontinue next;\r", "-\r", "-\t\t\tif (options.checkVisibilitySensitive()\r", "-\t\t\t\t&& !memberType.canBeSeenBy(receiverType, invocationType))\r", "-\t\t\t\tcontinue next;\r", "-\r", "-\t\t\tfor (int i = typesFound.size; --i >= 0;) {\r", "-\t\t\t\tReferenceBinding otherType = (ReferenceBinding) typesFound.elementAt(i);\r", "-\t\t\t\tif (memberType == otherType)\r", "-\t\t\t\t\tcontinue next;\r", "-\t\t\t\tif (CharOperation.equals(memberType.sourceName, otherType.sourceName, true)) {\r", "-\t\t\t\t\tif (memberType.enclosingType().isSuperclassOf(otherType.enclosingType()))\r", "-\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t\tif (otherType.enclosingType().isInterface())\r", "-\t\t\t\t\t\tif (memberType\r", "-\t\t\t\t\t\t\t.enclosingType()\r", "-\t\t\t\t\t\t\t.implementsInterface(otherType.enclosingType(), true))\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t}\r", "-\r", "-\t\t\ttypesFound.add(memberType);\r", "-\t\t\tif (memberType.isClass())\r", "-\t\t\t\trequestor.acceptClass(\r", "-\t\t\t\t\tmemberType.qualifiedPackageName(),\r", "-\t\t\t\t\tmemberType.qualifiedSourceName(),\r", "-\t\t\t\t\tmemberType.sourceName(),\r", "-\t\t\t\t\tmemberType.modifiers,\r", "-\t\t\t\t\tstartPosition,\r", "-\t\t\t\t\tendPosition);\r", "-\t\t\telse\r", "-\t\t\t\trequestor.acceptInterface(\r", "-\t\t\t\t\tmemberType.qualifiedPackageName(),\r", "-\t\t\t\t\tmemberType.qualifiedSourceName(),\r", "-\t\t\t\t\tmemberType.sourceName(),\r", "-\t\t\t\t\tmemberType.modifiers,\r", "-\t\t\t\t\tstartPosition,\r", "-\t\t\t\t\tendPosition);\r", "+\r", "+private void findMemberTypes(char[] typeName, ReferenceBinding[] memberTypes, ObjectVector typesFound) {\r", "+\r", "+\t// Inherited member types which are hidden by subclasses are filtered out\r", "+\t// No visibility checks can be performed without the scope & invocationSite\r", "+\r", "+\tint typeLength = typeName.length;\r", "+\tnext : for (int m = memberTypes.length; --m >= 0;) {\r", "+\t\tReferenceBinding memberType = memberTypes[m];\r", "+//\t\tif (!wantClasses && memberType.isClass()) continue next;\r", "+//\t\tif (!wantInterfaces && memberType.isInterface()) continue next;\r", "+\t\tif (typeLength > memberType.sourceName.length) continue next;\r", "+\t\tif (!CharOperation.prefixEquals(typeName, memberType.sourceName, false /* ignore case */)) continue next;\r", "+\r", "+\t\tfor (int i = typesFound.size; --i >= 0;) {\r", "+\t\t\tReferenceBinding otherType = (ReferenceBinding) typesFound.elementAt(i);\r", "+\t\t\tif (memberType == otherType) continue next;\r", "+\t\t\tif (CharOperation.equals(memberType.sourceName, otherType.sourceName, true)) {\r", "+\t\t\t\tif (memberType.enclosingType().isSuperclassOf(otherType.enclosingType())) continue next;\r", "+\t\t\t\tif (otherType.enclosingType().isInterface())\r", "+\t\t\t\t\tif (memberType.enclosingType().implementsInterface(otherType.enclosingType(), true)) continue next;\r", "+\t\t\t}\r", "+\t\t}\r", "+\r", "+\t\ttypesFound.add(memberType);\r", "+\t\tif (memberType.isClass())\r", "+\t\t\trequestor.acceptClass(\r", "+\t\t\t\tmemberType.qualifiedPackageName(),\r", "+\t\t\t\tmemberType.qualifiedSourceName(),\r", "+\t\t\t\tmemberType.sourceName(),\r", "+\t\t\t\tmemberType.modifiers,\r", "+\t\t\t\tstartPosition,\r", "+\t\t\t\tendPosition);\r", "+\t\telse\r", "+\t\t\trequestor.acceptInterface(\r", "+\t\t\t\tmemberType.qualifiedPackageName(),\r", "+\t\t\t\tmemberType.qualifiedSourceName(),\r", "+\t\t\t\tmemberType.sourceName(),\r", "+\t\t\t\tmemberType.modifiers,\r", "+\t\t\t\tstartPosition,\r", "+\t\t\t\tendPosition);\r", "+\t}\r", "+}\r"]}], "num": 8374}
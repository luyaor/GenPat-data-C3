{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "112415f634d40c234c73a4ad496bf28d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e75b25744005fcc53268179abe93e6d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "736ab1401ac40af7ae9c9d4ce2ab217352c0db9f", "commitAfterChange": "248db5ec0834fe6986101c8a84d5b58b7fe22a2c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["+\t\tcst = this.condition.optimizedBooleanConstant();", "+\t\tboolean isConditionOptimizedTrue = cst != NotAConstant && cst.booleanValue() == true;", "+\t\tboolean isConditionOptimizedFalse = cst != NotAConstant && cst.booleanValue() == false;", "+", "+\t\tif (isConditionOptimizedFalse) trueInfo.setReachMode(FlowInfo.CHECK_POT_INIT_FAKE_REACHABLE);", "+\t\tif (isConditionOptimizedTrue) falseInfo.setReachMode(FlowInfo.CHECK_POT_INIT_FAKE_REACHABLE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eec2f9f72729624fcb9b0ea144911b96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "e91a03d6ffd76cb11afae070200dbbbe73ce30b0", "commitAfterChange": "1ea5f94648ece67f779d3f9547f2c42cabdfedc2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\tConstant conditionConstant = condition.constant;", "+\t\tConstant cst = this.condition.constant;", "+\t\tboolean isConditionTrue = cst != NotAConstant && cst.booleanValue() == true;", "+\t\tboolean isConditionFalse = cst != NotAConstant && cst.booleanValue() == false;", "-\t\tflowInfo = condition.analyseCode(currentScope, flowContext, flowInfo, conditionConstant == NotAConstant);", "+\t\tflowInfo = condition.analyseCode(currentScope, flowContext, flowInfo, cst == NotAConstant);", "-\t\tif (conditionConstant != NotAConstant) {", "-\t\t\tif (conditionConstant.booleanValue() == true) {", "-\t\t\t\t// TRUE ? left : right", "-\t\t\t\tFlowInfo resultInfo =", "-\t\t\t\t\tvalueIfTrue.analyseCode(currentScope, flowContext, flowInfo.initsWhenTrue().unconditionalInits());", "-\t\t\t\t// analyse valueIfFalse, but do not take into account any of its infos", "-\t\t\t\tvalueIfFalse.analyseCode(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tflowContext,", "-\t\t\t\t\tflowInfo.initsWhenFalse().copy().unconditionalInits().markAsFakeReachable(true));", "-\t\t\t\tmergedInitStateIndex =", "-\t\t\t\t\tcurrentScope.methodScope().recordInitializationStates(resultInfo);", "-\t\t\t\treturn resultInfo;", "-\t\t\t} else {", "-\t\t\t\t// FALSE ? left : right", "-\t\t\t\t// analyse valueIfTrue, but do not take into account any of its infos\t\t\t", "-\t\t\t\tvalueIfTrue.analyseCode(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tflowContext,", "-\t\t\t\t\tflowInfo.initsWhenTrue().copy().unconditionalInits().markAsFakeReachable(true));", "-\t\t\t\tFlowInfo mergeInfo =", "-\t\t\t\t\tvalueIfFalse.analyseCode(currentScope, flowContext, flowInfo.initsWhenFalse().unconditionalInits());", "-\t\t\t\tmergedInitStateIndex =", "-\t\t\t\t\tcurrentScope.methodScope().recordInitializationStates(mergeInfo);", "-\t\t\t\treturn mergeInfo;", "-\t\t\t}", "+\t\tif (isConditionTrue) {", "+\t\t\t// TRUE ? left : right", "+\t\t\tFlowInfo resultInfo =", "+\t\t\t\tvalueIfTrue.analyseCode(currentScope, flowContext, flowInfo.initsWhenTrue().unconditionalInits());", "+\t\t\t// analyse valueIfFalse, but do not take into account any of its infos", "+\t\t\tvalueIfFalse.analyseCode(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tflowContext,", "+\t\t\t\tflowInfo.initsWhenFalse().copy().unconditionalInits().setReachMode(FlowInfo.SILENT_FAKE_REACHABLE));", "+\t\t\tmergedInitStateIndex =", "+\t\t\t\tcurrentScope.methodScope().recordInitializationStates(resultInfo);", "+\t\t\treturn resultInfo;", "+\t\t} else if (isConditionFalse) {", "+\t\t\t// FALSE ? left : right", "+\t\t\t// analyse valueIfTrue, but do not take into account any of its infos\t\t\t", "+\t\t\tvalueIfTrue.analyseCode(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tflowContext,", "+\t\t\t\tflowInfo.initsWhenTrue().copy().unconditionalInits().setReachMode(FlowInfo.SILENT_FAKE_REACHABLE));", "+\t\t\tFlowInfo mergeInfo =", "+\t\t\t\tvalueIfFalse.analyseCode(currentScope, flowContext, flowInfo.initsWhenFalse().unconditionalInits());", "+\t\t\tmergedInitStateIndex =", "+\t\t\t\tcurrentScope.methodScope().recordInitializationStates(mergeInfo);", "+\t\t\treturn mergeInfo;", "-\t\tFlowInfo trueInfo = flowInfo.initsWhenTrue();", "-\t\tthenInitStateIndex =", "-\t\t\tcurrentScope.methodScope().recordInitializationStates(trueInfo);", "-\t\tFlowInfo falseInfo = flowInfo.initsWhenFalse();", "-\t\telseInitStateIndex =", "-\t\t\tcurrentScope.methodScope().recordInitializationStates(falseInfo);", "+\t\tFlowInfo trueInfo = flowInfo.initsWhenTrue().copy();", "+\t\tthenInitStateIndex = currentScope.methodScope().recordInitializationStates(trueInfo);", "+\t\tFlowInfo falseInfo = flowInfo.initsWhenFalse().copy();", "+\t\telseInitStateIndex = currentScope.methodScope().recordInitializationStates(falseInfo);", "-\t\ttrueInfo = valueIfTrue.analyseCode(currentScope, flowContext, trueInfo.copy());", "-\t\tfalseInfo =", "-\t\t\tvalueIfFalse.analyseCode(currentScope, flowContext, falseInfo.copy());", "+\t\ttrueInfo = valueIfTrue.analyseCode(currentScope, flowContext, trueInfo);", "+\t\tfalseInfo = valueIfFalse.analyseCode(currentScope, flowContext, falseInfo);", "-\t\t// merge back using a conditional info -  1GK2BLM", "+\t\t// merge using a conditional info -  1GK2BLM", "-\t\t/*\t\t\t", "-\t\t\tFlowInfo mergedInfo = valueIfTrue.analyseCode(", "-\t\t\t\tcurrentScope,", "-\t\t\t\tflowContext,", "-\t\t\t\tflowInfo.initsWhenTrue().copy()).", "-\t\t\t\t\tunconditionalInits().", "-\t\t\t\t\t\tmergedWith(", "-\t\t\t\t\t\t\tvalueIfFalse.analyseCode(", "-\t\t\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\t\t\tflowContext,", "-\t\t\t\t\t\t\t\tflowInfo.initsWhenFalse().copy()).", "-\t\t\t\t\t\t\t\t\tunconditionalInits());", "-\t\t*/", "+"]}], "num": 33732}
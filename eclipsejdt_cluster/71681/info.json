{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45a95c3619c085d018fbbd30d7688f30", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "399dd1e8cd682c789bd2c27ccf02ab16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceBuildTests.java", "commitBeforeChange": "87b777c1fc477e9b3f12a1e072f005600f998f84", "commitAfterChange": "f66fb438b9cc0be7e04e5e7cd4ac6af72beb4f11", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void testScanner() throws InvalidInputException, IOException", "signatureAfterChange": " \tpublic void testScanner() throws InvalidInputException, IOException, CoreException", "diff": ["-\tpublic void testScanner() throws InvalidInputException, IOException {", "+\tpublic void testScanner() throws InvalidInputException, IOException, CoreException {", "-\t\tfinal String targetWorkspacePath = workspaceRoot.getProject(JavaCore.PLUGIN_ID)", "-\t\t\t.getLocation()", "-\t\t\t.toFile()", "-\t\t\t.getCanonicalPath();", "-\t\t", "+\t\tfinal String workspacePath = workspaceRoot.getLocation().toFile().getCanonicalPath();", "+", "-//\t\tscanFile(targetWorkspacePath+\"/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java\", 0/*only scan tokens*/);", "-\t\tscanFile(targetWorkspacePath+\"/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java\", 1/*scan tokens+get identifiers*/);", "+\t\tIWorkspaceRunnable compilation = new IWorkspaceRunnable() {", "+\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "+\t\t\t\ttry {", "+\t\t\t\t\tscanFile(workspacePath+PARSER_WORKING_COPY.getPath(), 1/*scan tokens+get identifiers*/);", "+\t\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\t\t// TODO Auto-generated catch block", "+\t\t\t\t\te.printStackTrace();", "+\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\t// TODO Auto-generated catch block", "+\t\t\t\t\te.printStackTrace();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t};", "+\t\tif (workspace.isTreeLocked()) {", "+\t\t\tcompilation.run(null/*no progress available*/);", "+\t\t} else {", "+\t\t\tworkspace.run(", "+\t\t\t\tcompilation,", "+\t\t\t\tnull/*don't take any lock*/,", "+\t\t\t\tIWorkspace.AVOID_UPDATE,", "+\t\t\t\tnull/*no progress available here*/);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f861f6ed8cbbaec94f2759851745ba72", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceBuildTests.java", "commitBeforeChange": "87b777c1fc477e9b3f12a1e072f005600f998f84", "commitAfterChange": "f66fb438b9cc0be7e04e5e7cd4ac6af72beb4f11", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tvoid parseParserFile(int kind) throws InvalidInputException, IOException", "signatureAfterChange": " \tvoid parseParserFile(final int kind) throws InvalidInputException, IOException, CoreException", "diff": ["-\tvoid parseParserFile(int kind) throws InvalidInputException, IOException {", "+\tvoid parseParserFile(final int kind) throws InvalidInputException, IOException, CoreException {", "-\t\tfinal String targetWorkspacePath = workspaceRoot.getProject(JavaCore.PLUGIN_ID)", "-\t\t\t.getLocation()", "-\t\t\t.toFile()", "-\t\t\t.getCanonicalPath();", "+\t\tfinal String workspacePath = workspaceRoot.getLocation().toFile().getCanonicalPath();", "-\t\t\tparseFile(targetWorkspacePath+\"/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java\", kind, ITERATIONS_COUNT*6);", "+\t\t\tIWorkspaceRunnable compilation = new IWorkspaceRunnable() {", "+\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tparseFile(workspacePath+PARSER_WORKING_COPY.getPath(), kind, ITERATIONS_COUNT*6);", "+\t\t\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\t\t\t// TODO Auto-generated catch block", "+\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\t\t// TODO Auto-generated catch block", "+\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t};", "+\t\t\tif (workspace.isTreeLocked()) {", "+\t\t\t\tcompilation.run(null/*no progress available*/);", "+\t\t\t} else {", "+\t\t\t\tworkspace.run(", "+\t\t\t\t\tcompilation,", "+\t\t\t\t\tnull/*don't take any lock*/,", "+\t\t\t\t\tIWorkspace.AVOID_UPDATE,", "+\t\t\t\t\tnull/*no progress available here*/);", "+\t\t\t}"]}], "num": 71681}
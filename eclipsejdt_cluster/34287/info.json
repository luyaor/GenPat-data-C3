{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aa64c070c444d36ea5903001f6b282bb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44b22909ee8f286e81dff63390af46a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest.java", "commitBeforeChange": "3f1cbb254c604c7416bb668e3ca0c2f6d90b8afc", "commitAfterChange": "8e450c528250a8d607aa5dc2fb3b5dddfe8b9870", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": " public void testBug413958_2()", "signatureAfterChange": " public void testBug413958_2()", "diff": ["-\trunConformTest(", "+\tString[] sourceFiles =", "-\t\t});", "+\t\t};", "+\tif (this.complianceLevel < ClassFileConstants.JDK1_8)", "+\t\trunNegativeTest(", "+\t\t\tsourceFiles,", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in TestGenerics.java (at line 6)\\n\" +", "+\t\t\t\"\tfinal WritableWrapper<TestA2,TestB> v4 = v1.icopy();\\n\" +", "+\t\t\t\"\t                                         ^^^^^^^^^^\\n\" +", "+\t\t\t\"Type mismatch: cannot convert from ReadOnlyWrapper<TestA,TestB> to WritableWrapper<TestA2,TestB>\\n\" +", "+\t\t\t\"----------\\n\");", "+\telse", "+\t\trunConformTest(sourceFiles);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91aa4ddbe259bb3631c7e96ff09e0821", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "995521865cfd6e568bdd12bfb7d4a59fc50611ab", "commitAfterChange": "3efbae02af9125c723d4c2de65767b20d72aaa7a", "methodNumberBeforeChange": 1308, "methodNumberAfterChange": 1308, "signatureBeforeChange": " public void test1273()", "signatureAfterChange": " public void test1273()", "diff": ["-// FIXME javac8 rejects", "-\tthis.runConformTest(", "+\tString sourceX =", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"\t// some functor and functor instances definitions\\n\" +", "+\t\t\t\"\tstatic interface OO<T, E> { \\n\" +", "+\t\t\t\"\t\tpublic T eval(E x);\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\tstatic interface TO<T> extends OO<String, T> {\\n\" +", "+\t\t\t\"\t\tpublic String eval(T x);\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\tstatic interface TT extends TO<String> {\\n\" +", "+\t\t\t\"\t\tpublic String eval(String x);\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\tstatic final TO<Object> FUNC1 = null;\\n\" +", "+\t\t\t\"\tstatic final TT FUNC2 = null;\\n\" +", "+\t\t\t\"\\n\" +", "+\t\t\t\"\t// some functor combinators\\n\" +", "+\t\t\t\"\tstatic <E> TO<E> combine(final TT x, final TO<? super E> y) { // # 1\\n\" +", "+\t\t\t\"\t\tSystem.out.println(\\\"#1#\\\");\\n\" +", "+\t\t\t\"\t\treturn new TO<E>() { public String eval(E o) { return x.eval(y.eval(o)); } }; \\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\tstatic <E, T> TO<T> combine(final TO<? super E> x, final OO<E, T> y) { // # 2\\n\" +", "+\t\t\t\"\t\tSystem.out.println(\\\"#2#\\\");\\n\" +", "+\t\t\t\"\t\treturn new TO<T>() { public String eval(T o) { return x.eval(y.eval(o)); } }; \\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\t// body of the test\\n\" +", "+\t\t\t\"\tstatic <E> void put(Class<E> type, TO<? super E> func) {\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\"\t\tput(Integer.class, combine(FUNC2, FUNC1));\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\\n\";", "+\tif (this.complianceLevel < ClassFileConstants.JDK1_8) {", "+\t\tthis.runConformTest(", "-\t\t\t\t\t\"X.java\",", "-\t\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\t\"\t// some functor and functor instances definitions\\n\" +", "-\t\t\t\t\t\"\tstatic interface OO<T, E> { \\n\" +", "-\t\t\t\t\t\"\t\tpublic T eval(E x);\\n\" +", "-\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\"\tstatic interface TO<T> extends OO<String, T> {\\n\" +", "-\t\t\t\t\t\"\t\tpublic String eval(T x);\\n\" +", "-\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\"\tstatic interface TT extends TO<String> {\\n\" +", "-\t\t\t\t\t\"\t\tpublic String eval(String x);\\n\" +", "-\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\"\tstatic final TO<Object> FUNC1 = null;\\n\" +", "-\t\t\t\t\t\"\tstatic final TT FUNC2 = null;\\n\" +", "-\t\t\t\t\t\"\\n\" +", "-\t\t\t\t\t\"\t// some functor combinators\\n\" +", "-\t\t\t\t\t\"\tstatic <E> TO<E> combine(final TT x, final TO<? super E> y) { // # 1\\n\" +", "-\t\t\t\t\t\"\t\tSystem.out.println(\\\"#1#\\\");\\n\" +", "-\t\t\t\t\t\"\t\treturn new TO<E>() { public String eval(E o) { return x.eval(y.eval(o)); } }; \\n\" +", "-\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\"\tstatic <E, T> TO<T> combine(final TO<? super E> x, final OO<E, T> y) { // # 2\\n\" +", "-\t\t\t\t\t\"\t\tSystem.out.println(\\\"#2#\\\");\\n\" +", "-\t\t\t\t\t\"\t\treturn new TO<T>() { public String eval(T o) { return x.eval(y.eval(o)); } }; \\n\" +", "-\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\"\t// body of the test\\n\" +", "-\t\t\t\t\t\"\tstatic <E> void put(Class<E> type, TO<? super E> func) {\\n\" +", "-\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\t\"\t\tput(Integer.class, combine(FUNC2, FUNC1));\\n\" +", "-\t\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\t\"}\\n\", // =================", "+\t\t\t\t\"X.java\",", "+\t\t\t\tsourceX,", "+\t} else {", "+\t\trunNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\tsourceX", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 28)\\n\" + ", "+\t\t\t\"\tput(Integer.class, combine(FUNC2, FUNC1));\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^\\n\" + ", "+\t\t\t\"The method combine(X.TT, X.TO<? super Object>) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\" );", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdf0296d4c4ebc6ddc6db02b02025394", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "995521865cfd6e568bdd12bfb7d4a59fc50611ab", "commitAfterChange": "3efbae02af9125c723d4c2de65767b20d72aaa7a", "methodNumberBeforeChange": 1313, "methodNumberAfterChange": 1313, "signatureBeforeChange": " public void test1278()", "signatureAfterChange": " public void test1278()", "diff": ["-//FIXME javac8 rejects", "-\tthis.runConformTest(", "+\tString[] input =", "-\t\t\t},", "+\t\t\t};", "+\tif (this.complianceLevel < ClassFileConstants.JDK1_8) {", "+\t\trunConformTest(", "+\t\t\tinput,", "+\t} else {", "+\t\trunNegativeTest(", "+\t\t\tinput,", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 32)\\n\" + ", "+\t\t\t\"\tput(Integer.class, combine(FUNC2, FUNC1));\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^\\n\" + ", "+\t\t\t\"The method combine(X.TT, X.TO<? super Object>) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce56a05ba13201a13cee8ca7c230c236", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic void test061()", "signatureAfterChange": " \tpublic void test061()", "diff": ["+\t\tString expectedOutput = ", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"1. WARNING in X.java (at line 5)\\n\" +", "+\t\t\t\t\"\tCollections.addAll(constantClassSet, String.class, Object.class);\\n\" +", "+\t\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "+\t\t\t\t\"Type safety: A generic array of Class<? extends Object> is created for a varargs parameter\\n\" +", "+\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\"2. ERROR in X.java (at line 6)\\n\" +", "+\t\t\t\t\"\tZork z;\\n\" +", "+\t\t\t\t\"\t^^^^\\n\" +", "+\t\t\t\t\"Zork cannot be resolved to a type\\n\" +", "+\t\t\t\t\"----------\\n\";", "+\t\tif (this.complianceLevel >= ClassFileConstants.JDK1_7) {", "+\t\t\texpectedOutput = ", "+\t\t\t\t\t\"----------\\n\" +", "+\t\t\t\t\t\"1. ERROR in X.java (at line 6)\\n\" +", "+\t\t\t\t\t\"\tZork z;\\n\" +", "+\t\t\t\t\t\"\t^^^^\\n\" +", "+\t\t\t\t\t\"Zork cannot be resolved to a type\\n\" +", "+\t\t\t\t\t\"----------\\n\";", "+\t\t}", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"1. WARNING in X.java (at line 5)\\n\" +", "-\t\t\t\t\"\tCollections.addAll(constantClassSet, String.class, Object.class);\\n\" +", "-\t\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\t\"Type safety : A generic array of Class<? extends Object> is created for a varargs parameter\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"2. ERROR in X.java (at line 6)\\n\" +", "-\t\t\t\t\"\tZork z;\\n\" +", "-\t\t\t\t\"\t^^^^\\n\" +", "-\t\t\t\t\"Zork cannot be resolved to a type\\n\" +", "-\t\t\t\t\"----------\\n\");", "+\t\t\t\texpectedOutput);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e12f6462d197cd513aa134639e8e9748", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "387a7f4b80fb7f4c6b182f9cb1c77742b68dd79d", "commitAfterChange": "8416566886932c2293d5d7d94608e0a2439f55b6", "methodNumberBeforeChange": 1062, "methodNumberAfterChange": 1062, "signatureBeforeChange": " public void test1050()", "signatureAfterChange": " public void test1050()", "diff": ["+\tString expectedOutput =", "+\t\t\"xxx\\n\" + ", "+    \t\"true\\n\" + ", "+    \t\"Exception: java.lang.ClassCastException: [Ljava.lang.Object;\\n\" + ", "+    \t\"Exception: java.lang.ClassCastException: [Ljava.lang.Object;\";", "+\t", "+\tif (System.getProperty(\"java.version\").startsWith(\"1.6\")) {", "+\t\texpectedOutput =", "+\t\t\t\"xxx\\n\" + ", "+\t\t\t\"true\\n\" + ", "+\t\t\t\"Exception: java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Ljava.lang.String;\\n\" + ", "+\t\t\t\"Exception: java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Ljava.lang.String;\";", "+\t}", "+    \t", "+\t", "-\t\t\"xxx\\n\" + ", "-\t\t\"true\\n\" + ", "-\t\t\"Exception: java.lang.ClassCastException: [Ljava.lang.Object;\\n\" + ", "-\t\t\"Exception: java.lang.ClassCastException: [Ljava.lang.Object;\");", "+\t\texpectedOutput);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5a2a10de8e3f58714977ee27d30e2bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "995521865cfd6e568bdd12bfb7d4a59fc50611ab", "commitAfterChange": "3efbae02af9125c723d4c2de65767b20d72aaa7a", "methodNumberBeforeChange": 1310, "methodNumberAfterChange": 1310, "signatureBeforeChange": " public void test1275()", "signatureAfterChange": " public void test1275()", "diff": ["-//FIXME javac8 rejects", "-\tthis.runConformTest(", "+\tString[] input = ", "-\t\t\t},", "+\t\t\t};", "+\tif (this.complianceLevel < ClassFileConstants.JDK1_8) {", "+\t\trunConformTest(", "+\t\t\tinput,", "+\t} else {", "+\t\trunNegativeTest(", "+\t\t\tinput,", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 28)\\n\" + ", "+\t\t\t\"\tput(Integer.class, combine(FUNC2, FUNC1));\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^\\n\" + ", "+\t\t\t\"The method combine(X.TT, X.TO<? super Object>) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t}"]}], "num": 34287}
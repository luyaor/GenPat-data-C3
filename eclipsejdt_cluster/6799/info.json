{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "56eaf528ef4ff19ac222b38c6149b18c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7b63894b219725f19b055b9680ee57e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java", "commitBeforeChange": "837e74414fb9b240932cd6afae3110277fb777db", "commitAfterChange": "a966ab9bd6f1a46289abe3e77d65d881ca0ea764", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public void resolve(BlockScope upperScope)", "signatureAfterChange": "\r public void resolve(BlockScope upperScope)", "diff": ["-\r", "-\tBlockScope tryScope = new BlockScope(scope);\r", "-\tBlockScope finallyScope = null;\r", "-\t\tscope.methodScope().addLocalVariable(returnAddressVariable);\r", "+\t\tscope.addLocalVariable(returnAddressVariable);\r", "-\t\tfinallyScope = new BlockScope(scope);\r", "+\t\tBlockScope finallyScope = new BlockScope(scope);\r", "-\t\t// force the finally scope to have variable positions shifted after its try scope.\r", "-\t\tfinallyScope.shiftScope = tryScope; \r", "-\ttryBlock.resolveUsing(tryScope);\r", "+\ttryBlock.resolve(scope);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee7ea63d581a62d0fb651c086249f36d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t// internally for type checking use the unannotated types:", "-\t\t\tTypeBinding unannotatedCastType = castType.unannotated();", "-\t\t\tif (nullAnnotationMismatch)", "-\t\t\t\tcastType = unannotatedCastType; // problem exists, so use the unannotated type also externally", "-\t\t\texpressionType = expressionType.unannotated();", "-\t\t\tboolean isLegal = checkCastTypesCompatibility(scope, unannotatedCastType, expressionType, this.expression);", "+\t\t\tboolean isLegal = checkCastTypesCompatibility(scope, castType, expressionType, this.expression);", "-\t\t\t\tthis.expression.computeConversion(scope, unannotatedCastType, expressionType);", "+\t\t\t\tthis.expression.computeConversion(scope, castType, expressionType);", "-\t\t\t\t\tif (unannotatedCastType.isRawType() && scope.compilerOptions().getSeverity(CompilerOptions.RawTypeReference) != ProblemSeverities.Ignore){", "-\t\t\t\t\t\tscope.problemReporter().rawTypeReference(this.type, unannotatedCastType);", "+\t\t\t\t\tif (castType.isRawType() && scope.compilerOptions().getSeverity(CompilerOptions.RawTypeReference) != ProblemSeverities.Ignore){", "+\t\t\t\t\t\tscope.problemReporter().rawTypeReference(this.type, castType);", "-\t\t\t\tif ((unannotatedCastType.tagBits & TagBits.HasMissingType) == 0) { // no complaint if secondary error", "-\t\t\t\t\tscope.problemReporter().typeCastError(this, unannotatedCastType, expressionType);", "+\t\t\t\tif ((castType.tagBits & TagBits.HasMissingType) == 0) { // no complaint if secondary error", "+\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);"]}], "num": 6799}
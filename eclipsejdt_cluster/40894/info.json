{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "348f476131e185c96c92f5e710979aae", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb4fbfcddbe487e623dddc45d2d17c6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "124dd88225a5a14f52eb2599c64569ad41838fe8", "commitAfterChange": "168c23a22b63928342eea63e0cfb70339ac9c9f4", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic String getQualifiedName()", "signatureAfterChange": " \tpublic String getQualifiedName()", "diff": ["-\t */", "-\tpublic String getQualifiedName() {", "-\t\tif (isAnonymous() || isLocal()) {", "-\t\t\treturn NO_NAME;", "-\t\t}", "-\t\t", "-\t\tif (isPrimitive() || isNullType()) {", "-\t\t\treturn getName();", "-\t\t}", "-\t\t", "-\t\tif (isArray()) {", "-\t\t\tITypeBinding elementType = getElementType();", "-\t\t\tString elementTypeQualifiedName = elementType.getQualifiedName();", "-\t\t\tif (elementTypeQualifiedName.length() != 0) {", "-\t\t\t\tint dimensions = this.getDimensions();", "-\t\t\t\tchar[] brackets = new char[dimensions * 2];", "-\t\t\t\tfor (int i = dimensions * 2 - 1; i >= 0; i -= 2) {", "-\t\t\t\t\tbrackets[i] = ']';", "-\t\t\t\t\tbrackets[i - 1] = '[';", "-\t\t\t\t}", "-\t\t\t\tStringBuffer stringBuffer = new StringBuffer(elementTypeQualifiedName);", "-\t\t\t\tstringBuffer.append(brackets);", "-\t\t\t\treturn stringBuffer.toString();", "-\t\t\t} else {", "-\t\t\t\treturn NO_NAME;", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tif (this.isTypeVariable()) {", "-\t\t\treturn new String(this.binding.sourceName());\t\t\t", "-\t\t}", "-\t\t", "-\t\tif (isTopLevel() || isMember()) {", "-\t\t\tPackageBinding packageBinding = this.binding.getPackage();", "-\t\t\t", "-\t\t\tif (packageBinding == null || packageBinding.compoundName == CharOperation.NO_CHAR_CHAR) {", "-\t\t\t\treturn new String(this.binding.qualifiedSourceName());", "-\t\t\t} else {", "-\t\t\t\tStringBuffer stringBuffer = new StringBuffer();", "-\t\t\t\tstringBuffer", "-\t\t\t\t\t.append(this.binding.qualifiedPackageName())", "-\t\t\t\t\t.append('.')", "-\t\t\t\t\t.append(this.binding.qualifiedSourceName());", "-\t\t\t\treturn stringBuffer.toString();", "-\t\t\t}", "-\t\t}", "-\t\treturn NO_NAME;", "-\t}", "+\t */", "+\tpublic String getQualifiedName() {", "+\t\tif (isAnonymous() || isLocal()) {", "+\t\t\treturn NO_NAME;", "+\t\t}", "+\t\t", "+\t\tif (isPrimitive() || isNullType() || this.isTypeVariable()) {", "+\t\t\treturn new String(this.binding.sourceName());", "+\t\t}", "+\t\t", "+\t\tif (isArray()) {", "+\t\t\tITypeBinding elementType = getElementType();", "+\t\t\tString elementTypeQualifiedName = elementType.getQualifiedName();", "+\t\t\tif (elementTypeQualifiedName.length() != 0) {", "+\t\t\t\tint dimensions = this.getDimensions();", "+\t\t\t\tchar[] brackets = new char[dimensions * 2];", "+\t\t\t\tfor (int i = dimensions * 2 - 1; i >= 0; i -= 2) {", "+\t\t\t\t\tbrackets[i] = ']';", "+\t\t\t\t\tbrackets[i - 1] = '[';", "+\t\t\t\t}", "+\t\t\t\tStringBuffer stringBuffer = new StringBuffer(elementTypeQualifiedName);", "+\t\t\t\tstringBuffer.append(brackets);", "+\t\t\t\treturn stringBuffer.toString();", "+\t\t\t} else {", "+\t\t\t\treturn NO_NAME;", "+\t\t\t}", "+\t\t}", "+\t\tif (isTopLevel() || isMember()) {", "+\t\t\tPackageBinding packageBinding = this.binding.getPackage();", "+\t\t\t", "+\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\tif (isWildcardType()) {", "+\t\t\t\tbuffer.append(TypeConstants.WILDCARD_NAME);", "+\t\t\t\tWildcardBinding wildcardBinding = (WildcardBinding) this.binding;", "+\t\t\t\tif (wildcardBinding.bound != null) {", "+\t\t\t\t\tswitch(wildcardBinding.kind) {", "+\t\t\t\t\t\tcase Wildcard.SUPER :", "+\t\t\t\t\t\t\tbuffer.append(TypeConstants.WILDCARD_SUPER);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Wildcard.EXTENDS :", "+\t\t\t\t\t\t\tbuffer.append(TypeConstants.WILDCARD_EXTENDS);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tbuffer.append(getBound().getQualifiedName());\t\t\t\t", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif (packageBinding != null && packageBinding.compoundName != CharOperation.NO_CHAR_CHAR) {", "+\t\t\t\t\tbuffer.append(packageBinding.readableName()).append('.');", "+\t\t\t\t}", "+\t\t\t\tbuffer.append(this.binding.qualifiedSourceName());", "+\t\t\t\tif (!isRawType()) {", "+\t\t\t\t\t// only one of the type parameters or type arguments is non-empty at the same time", "+\t\t\t\t\tappendQualifiedTypeParameters(buffer, getTypeParameters());", "+\t\t\t\t\tappendQualifiedTypeArguments(buffer, getTypeArguments());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn String.valueOf(buffer);", "+\t\t}", "+\t\treturn NO_NAME;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbadda35fd57886257a47a5b025b0d3a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DefaultBytecodeVisitor.java", "commitBeforeChange": "f711a2e15fc3de73f79ccc61d2dafcbdd0d9f0f1", "commitAfterChange": "e823242f8d03d0ef2504eab819b418e785f092ee", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tprivate String getLocalVariableName(int pc, int index, boolean showIndex)", "signatureAfterChange": "  \tprivate String getLocalVariableName(int pc, int index, boolean showIndex)", "diff": ["-        int nextPC = pc + 1;", "-        switch(index) {", "-            case 0 :", "-            case 1 :", "-            case 2 :", "-            case 3 :", "-                break;", "-            default :", "-                nextPC = index <= 255 ? pc + 2 : pc + 3;", "-        }", "+\t\tint nextPC = pc + 1;", "+\t\tswitch(index) {", "+\t\t\tcase 0 :", "+\t\t\tcase 1 :", "+\t\t\tcase 2 :", "+\t\t\tcase 3 :", "+\t\t\t\tbreak;", "+\t\t\tdefault :", "+\t\t\t\tnextPC = index <= 255 ? pc + 2 : pc + 3;", "+\t\t}", "-        for (int i = 0, max = this.localVariableAttributeLength; i < max; i++) {", "-            final ILocalVariableTableEntry entry = this.localVariableTableEntries[i];", "-            final int startPC = entry.getStartPC();", "-            if (entry.getIndex() == index && (startPC <= nextPC) && ((startPC + entry.getLength()) > nextPC)) {", "-            \tfinal StringBuffer stringBuffer = new StringBuffer();", "-            \tif (showIndex) {", "-            \t\tstringBuffer.append(' ').append(index);", "-            \t}", "-            \tstringBuffer.append(' ').append('[').append(entry.getName()).append(']');", "-            \treturn String.valueOf(stringBuffer);", "-            }", "-        }", "-    \tif (showIndex) {", "-        \tfinal StringBuffer stringBuffer = new StringBuffer();", "-        \tstringBuffer.append(' ').append(index);", "-         \treturn String.valueOf(stringBuffer);", "-    \t}", "-        return EMPTY_LOCAL_NAME;", "+\t\tfor (int i = 0, max = this.localVariableAttributeLength; i < max; i++) {", "+\t\t\tfinal ILocalVariableTableEntry entry = this.localVariableTableEntries[i];", "+\t\t\tfinal int startPC = entry.getStartPC();", "+\t\t\tif (entry.getIndex() == index && (startPC <= nextPC) && ((startPC + entry.getLength()) > nextPC)) {", "+\t\t\t\tfinal StringBuffer stringBuffer = new StringBuffer();", "+\t\t\t\tif (showIndex) {", "+\t\t\t\t\tstringBuffer.append(' ').append(index);", "+\t\t\t\t}", "+\t\t\t\tstringBuffer.append(' ').append('[').append(entry.getName()).append(']');", "+\t\t\t\treturn String.valueOf(stringBuffer);", "+\t\t\t}", "+\t\t}", "+\t\tif (this.parameterNames != null) {", "+\t\t\tif (index == 0) {", "+\t\t\t\tif (!this.isStatic) {", "+\t\t\t\t\tfinal StringBuffer stringBuffer = new StringBuffer();", "+\t\t\t\t\tstringBuffer.append(' ').append('[').append(\"this\").append(']'); //$NON-NLS-1$", "+\t\t\t\t\treturn String.valueOf(stringBuffer);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tint indexInParameterNames = index;", "+\t\t\tif (index != 0) {", "+\t\t\t\tint resolvedPosition = 0;", "+\t\t\t\tif (!this.isStatic) {", "+\t\t\t\t\tresolvedPosition = 1;", "+\t\t\t\t}", "+\t\t\t\tint i = 0;", "+\t\t\t\tloop: for (int max = this.argumentSizes.length; i < max; i++) {", "+\t\t\t\t\tif (index == resolvedPosition) {", "+\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t}", "+\t\t\t\t\tresolvedPosition += this.argumentSizes[i];", "+\t\t\t\t}", "+\t\t\t\tindexInParameterNames = i;", "+\t\t\t}", "+\t\t\tif (indexInParameterNames < this.parameterNames.length", "+\t\t\t\t\t&& this.parameterNames[indexInParameterNames] != null) {", "+\t\t\t\tfinal StringBuffer stringBuffer = new StringBuffer();", "+\t\t\t\tif (showIndex) {", "+\t\t\t\t\tstringBuffer.append(' ').append(index);", "+\t\t\t\t}", "+\t\t\t\tstringBuffer.append(' ').append('[').append(this.parameterNames[indexInParameterNames]).append(']');", "+\t\t\t\treturn String.valueOf(stringBuffer);", "+\t\t\t}", "+\t\t}", "+\t\tif (showIndex) {", "+\t\t\tfinal StringBuffer stringBuffer = new StringBuffer();", "+\t\t\tstringBuffer.append(' ').append(index);", "+\t\t\treturn String.valueOf(stringBuffer);", "+\t\t}", "+\t\treturn EMPTY_LOCAL_NAME;"]}], "num": 40894}
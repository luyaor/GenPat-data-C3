{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25d7089f76d5597014674f737baaef8c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "116d3585c04cf80d0c3ea27703550b69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "b1289825b1d85858e43a8d7cb146ae5cf4375ba5", "commitAfterChange": "968dabd0ec3dcd97fcc7fea5e184cd16cad5b076", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic void test047()", "signatureAfterChange": " \tpublic void test047()", "diff": ["-\t\ttry {", "-\t\t\tString sourceA =", "-\t\t\t\t\"public class A {\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\tboolean b = false;\\n\" +", "-\t\t\t\t\"\t\tif (false\\n\" +", "-\t\t\t\t\"\t\t   ^ !b) {   \t\\n\" +", "-\t\t\t\t\"\t\t   \tSystem.out.println();\\n\" +", "-\t\t\t\t\"\t\t   }\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tcompileAndDeploy(sourceA, \"A\");", "-\t\t\tIClassFileReader classFileReader = ToolFactory.createDefaultClassFileReader(EVAL_DIRECTORY + File.separator + \"A.class\", IClassFileReader.ALL);", "-\t\t\tIMethodInfo[] methodInfos = classFileReader.getMethodInfos();", "-\t\t\tassertEquals(\"wrong size\", 2, methodInfos.length);", "-\t\t\tIMethodInfo methodInfo = methodInfos[1];", "-\t\t\tassertEquals(\"wrong name\", \"main\", new String(methodInfo.getName()));", "-\t\t\tICodeAttribute codeAttribute = methodInfo.getCodeAttribute();", "-\t\t\tassertNotNull(\"No code attribute\", codeAttribute);", "-\t\t\tILineNumberAttribute lineNumberAttribute = codeAttribute.getLineNumberAttribute();", "-\t\t\tassertNotNull(\"No code line number attribute\", lineNumberAttribute);", "-\t\t\tint[][] lineNumberTable = lineNumberAttribute.getLineNumberTable();", "-\t\t\tassertEquals(\"wrong size\", 4, lineNumberTable.length);", "-\t\t\tassertEquals(\"wrong pc[0]\", 0, lineNumberTable[0][0]);", "-\t\t\tassertEquals(\"wrong line[0]\", 3, lineNumberTable[0][1]);", "-\t\t\tassertEquals(\"wrong pc[1]\", 2, lineNumberTable[1][0]);", "-\t\t\tassertEquals(\"wrong line[1]\", 5, lineNumberTable[1][1]);", "-\t\t\tassertEquals(\"wrong pc[2]\", 6, lineNumberTable[2][0]);", "-\t\t\tassertEquals(\"wrong line[2]\", 6, lineNumberTable[2][1]);", "-\t\t\tassertEquals(\"wrong pc[3]\", 12, lineNumberTable[3][0]);", "-\t\t\tassertEquals(\"wrong line[3]\", 8, lineNumberTable[3][1]);", "-\t\t} finally {", "-\t\t\tremoveTempClass(\"A\");", "-\t\t}", "+\t\tString source =", "+\t\t\t\"public class A {\\n\" +", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\"\t\tboolean b = false;\\n\" +", "+\t\t\t\"\t\tif (false\\n\" +", "+\t\t\t\"\t\t   ^ !b) {   \t\\n\" +", "+\t\t\t\"\t\t   \tSystem.out.println();\\n\" +", "+\t\t\t\"\t\t   }\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tString expectedOutput =", "+\t\t\t\"/* \\n\" + ", "+\t\t\t\" * Version (target 1.2) \\n\" + ", "+\t\t\t\" * - magic: CAFEBABE\\n\" + ", "+\t\t\t\" * - minor: 0\\n\" + ", "+\t\t\t\" * - major: 46\\n\" + ", "+\t\t\t\" */\\n\" + ", "+\t\t\t\"// Compiled from A.java\\n\" + ", "+\t\t\t\"public class A extends java.lang.Object {\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #6 ()V */\\n\" + ", "+\t\t\t\"  public A();\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 1 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"      0  aload_0\\n\" + ", "+\t\t\t\"      1  invokespecial #9 <Constructor java.lang.Object()>\\n\" + ", "+\t\t\t\"      4  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 1]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 5] local: this index: 0 type: A\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #15 ([Ljava/lang/String;)V */\\n\" + ", "+\t\t\t\"  public static void main(String[] args);\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 2 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"       0  iconst_0\\n\" + ", "+\t\t\t\"       1  istore_1\\n\" + ", "+\t\t\t\"       2  iload_1\\n\" + ", "+\t\t\t\"       3  ifne 12\\n\" + ", "+\t\t\t\"       6  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\\n\" + ", "+\t\t\t\"       9  invokevirtual #26 <Method java.io.PrintStream#println() void>\\n\" + ", "+\t\t\t\"      12  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 3]\\n\" + ", "+\t\t\t\"      [pc: 2, line: 5]\\n\" + ", "+\t\t\t\"      [pc: 6, line: 6]\\n\" + ", "+\t\t\t\"      [pc: 12, line: 8]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 13] local: args index: 0 type: java/lang/String[]\\n\" + ", "+\t\t\t\"      [pc: 2, pc: 13] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"}\";", "+\t\tcheckClassFile(\"A\", source, expectedOutput);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50d64765e71a1e3383956a943fe3c60e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "b1289825b1d85858e43a8d7cb146ae5cf4375ba5", "commitAfterChange": "968dabd0ec3dcd97fcc7fea5e184cd16cad5b076", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 51, "signatureBeforeChange": " \tpublic void test046()", "signatureAfterChange": " \tpublic void test046()", "diff": ["-\t\ttry {", "-\t\t\tString sourceA =", "-\t\t\t\t\"public class A {\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\tboolean b = false;\\n\" +", "-\t\t\t\t\"\t\tif (true\\n\" +", "-\t\t\t\t\"\t\t   ^ !b) {   \t\\n\" +", "-\t\t\t\t\"\t\t   \tSystem.out.println();\\n\" +", "-\t\t\t\t\"\t\t   }\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tcompileAndDeploy(sourceA, \"A\");", "-\t\t\tIClassFileReader classFileReader = ToolFactory.createDefaultClassFileReader(EVAL_DIRECTORY + File.separator + \"A.class\", IClassFileReader.ALL);", "-\t\t\tIMethodInfo[] methodInfos = classFileReader.getMethodInfos();", "-\t\t\tassertEquals(\"wrong size\", 2, methodInfos.length);", "-\t\t\tIMethodInfo methodInfo = methodInfos[1];", "-\t\t\tassertEquals(\"wrong name\", \"main\", new String(methodInfo.getName()));", "-\t\t\tICodeAttribute codeAttribute = methodInfo.getCodeAttribute();", "-\t\t\tassertNotNull(\"No code attribute\", codeAttribute);", "-\t\t\tILineNumberAttribute lineNumberAttribute = codeAttribute.getLineNumberAttribute();", "-\t\t\tassertNotNull(\"No code line number attribute\", lineNumberAttribute);", "-\t\t\tint[][] lineNumberTable = lineNumberAttribute.getLineNumberTable();", "-\t\t\tassertEquals(\"wrong size\", 4, lineNumberTable.length);", "-\t\t\tassertEquals(\"wrong pc[0]\", 0, lineNumberTable[0][0]);", "-\t\t\tassertEquals(\"wrong line[0]\", 3, lineNumberTable[0][1]);", "-\t\t\tassertEquals(\"wrong pc[1]\", 2, lineNumberTable[1][0]);", "-\t\t\tassertEquals(\"wrong line[1]\", 5, lineNumberTable[1][1]);", "-\t\t\tassertEquals(\"wrong pc[2]\", 6, lineNumberTable[2][0]);", "-\t\t\tassertEquals(\"wrong line[2]\", 6, lineNumberTable[2][1]);", "-\t\t\tassertEquals(\"wrong pc[3]\", 12, lineNumberTable[3][0]);", "-\t\t\tassertEquals(\"wrong line[3]\", 8, lineNumberTable[3][1]);", "-\t\t} finally {", "-\t\t\tremoveTempClass(\"A\");", "-\t\t}", "+\t\tString source =", "+\t\t\t\"public class A {\\n\" +", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\"\t\tboolean b = false;\\n\" +", "+\t\t\t\"\t\tif (true\\n\" +", "+\t\t\t\"\t\t   ^ !b) {   \t\\n\" +", "+\t\t\t\"\t\t   \tSystem.out.println();\\n\" +", "+\t\t\t\"\t\t   }\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tString expectedOutput =", "+\t\t\t\"/* \\n\" + ", "+\t\t\t\" * Version (target 1.2) \\n\" + ", "+\t\t\t\" * - magic: CAFEBABE\\n\" + ", "+\t\t\t\" * - minor: 0\\n\" + ", "+\t\t\t\" * - major: 46\\n\" + ", "+\t\t\t\" */\\n\" + ", "+\t\t\t\"// Compiled from A.java\\n\" + ", "+\t\t\t\"public class A extends java.lang.Object {\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #6 ()V */\\n\" + ", "+\t\t\t\"  public A();\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 1 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"      0  aload_0\\n\" + ", "+\t\t\t\"      1  invokespecial #9 <Constructor java.lang.Object()>\\n\" + ", "+\t\t\t\"      4  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 1]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 5] local: this index: 0 type: A\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #15 ([Ljava/lang/String;)V */\\n\" + ", "+\t\t\t\"  public static void main(String[] args);\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 2 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"       0  iconst_0\\n\" + ", "+\t\t\t\"       1  istore_1\\n\" + ", "+\t\t\t\"       2  iload_1\\n\" + ", "+\t\t\t\"       3  ifeq 12\\n\" + ", "+\t\t\t\"       6  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\\n\" + ", "+\t\t\t\"       9  invokevirtual #26 <Method java.io.PrintStream#println() void>\\n\" + ", "+\t\t\t\"      12  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 3]\\n\" + ", "+\t\t\t\"      [pc: 2, line: 5]\\n\" + ", "+\t\t\t\"      [pc: 6, line: 6]\\n\" + ", "+\t\t\t\"      [pc: 12, line: 8]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 13] local: args index: 0 type: java/lang/String[]\\n\" + ", "+\t\t\t\"      [pc: 2, pc: 13] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"}\";", "+\t\tcheckClassFile(\"A\", source, expectedOutput);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65d5863011f08029704cdefe1539bfc5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "b1289825b1d85858e43a8d7cb146ae5cf4375ba5", "commitAfterChange": "968dabd0ec3dcd97fcc7fea5e184cd16cad5b076", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void test007()", "signatureAfterChange": " \tpublic void test007()", "diff": ["-\t\ttry {", "-\t\t\tString sourceA =", "-\t\t\t\t\"public class A {\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\tboolean b = false;\\n\" +", "-\t\t\t\t\"\t\tif (true\\n\" +", "-\t\t\t\t\"\t\t   && !b) {   \t\\n\" +", "-\t\t\t\t\"\t\t   \tSystem.out.println();\\n\" +", "-\t\t\t\t\"\t\t   }\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tcompileAndDeploy(sourceA, \"A\");", "-\t\t\tIClassFileReader classFileReader = ToolFactory.createDefaultClassFileReader(EVAL_DIRECTORY + File.separator + \"A.class\", IClassFileReader.ALL);", "-\t\t\tIMethodInfo[] methodInfos = classFileReader.getMethodInfos();", "-\t\t\tassertEquals(\"wrong size\", 2, methodInfos.length);", "-\t\t\tIMethodInfo methodInfo = methodInfos[1];", "-\t\t\tassertEquals(\"wrong name\", \"main\", new String(methodInfo.getName()));", "-\t\t\tICodeAttribute codeAttribute = methodInfo.getCodeAttribute();", "-\t\t\tassertNotNull(\"No code attribute\", codeAttribute);", "-\t\t\tILineNumberAttribute lineNumberAttribute = codeAttribute.getLineNumberAttribute();", "-\t\t\tassertNotNull(\"No code line number attribute\", lineNumberAttribute);", "-\t\t\tint[][] lineNumberTable = lineNumberAttribute.getLineNumberTable();", "-\t\t\tassertEquals(\"wrong size\", 4, lineNumberTable.length);", "-\t\t\tassertEquals(\"wrong pc[0]\", 0, lineNumberTable[0][0]);", "-\t\t\tassertEquals(\"wrong line[0]\", 3, lineNumberTable[0][1]);", "-\t\t\tassertEquals(\"wrong pc[1]\", 2, lineNumberTable[1][0]);", "-\t\t\tassertEquals(\"wrong line[1]\", 5, lineNumberTable[1][1]);", "-\t\t\tassertEquals(\"wrong pc[2]\", 6, lineNumberTable[2][0]);", "-\t\t\tassertEquals(\"wrong line[2]\", 6, lineNumberTable[2][1]);", "-\t\t\tassertEquals(\"wrong pc[3]\", 12, lineNumberTable[3][0]);", "-\t\t\tassertEquals(\"wrong line[3]\", 8, lineNumberTable[3][1]);", "-\t\t} finally {", "-\t\t\tremoveTempClass(\"A\");", "-\t\t}", "+\t\tString source =", "+\t\t\t\"public class A {\\n\" +", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\"\t\tboolean b = false;\\n\" +", "+\t\t\t\"\t\tif (true\\n\" +", "+\t\t\t\"\t\t   && !b) {   \t\\n\" +", "+\t\t\t\"\t\t   \tSystem.out.println();\\n\" +", "+\t\t\t\"\t\t   }\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tString expectedOutput = ", "+\t\t\t\"/* \\n\" + ", "+\t\t\t\" * Version (target 1.2) \\n\" + ", "+\t\t\t\" * - magic: CAFEBABE\\n\" + ", "+\t\t\t\" * - minor: 0\\n\" + ", "+\t\t\t\" * - major: 46\\n\" + ", "+\t\t\t\" */\\n\" + ", "+\t\t\t\"// Compiled from A.java\\n\" + ", "+\t\t\t\"public class A extends java.lang.Object {\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #6 ()V */\\n\" + ", "+\t\t\t\"  public A();\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 1 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"      0  aload_0\\n\" + ", "+\t\t\t\"      1  invokespecial #9 <Constructor java.lang.Object()>\\n\" + ", "+\t\t\t\"      4  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 1]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 5] local: this index: 0 type: A\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #15 ([Ljava/lang/String;)V */\\n\" + ", "+\t\t\t\"  public static void main(String[] args);\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 2 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"       0  iconst_0\\n\" + ", "+\t\t\t\"       1  istore_1\\n\" + ", "+\t\t\t\"       2  iload_1\\n\" + ", "+\t\t\t\"       3  ifne 12\\n\" + ", "+\t\t\t\"       6  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\\n\" + ", "+\t\t\t\"       9  invokevirtual #26 <Method java.io.PrintStream#println() void>\\n\" + ", "+\t\t\t\"      12  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 3]\\n\" + ", "+\t\t\t\"      [pc: 2, line: 5]\\n\" + ", "+\t\t\t\"      [pc: 6, line: 6]\\n\" + ", "+\t\t\t\"      [pc: 12, line: 8]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 13] local: args index: 0 type: java/lang/String[]\\n\" + ", "+\t\t\t\"      [pc: 2, pc: 13] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"}\";", "+\t\tcheckClassFile(\"A\", source, expectedOutput);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7fb25bb0e9c2641a22167e0a7e86b8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "b1289825b1d85858e43a8d7cb146ae5cf4375ba5", "commitAfterChange": "968dabd0ec3dcd97fcc7fea5e184cd16cad5b076", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["-\t\ttry {", "-\t\t\tString sourceA =", "-\t\t\t\t\"public class A {\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\tboolean b = false;\\n\" +", "-\t\t\t\t\"\t\tif (false\\n\" +", "-\t\t\t\t\"\t\t   || !b) {   \t\\n\" +", "-\t\t\t\t\"\t\t   \tSystem.out.println();\\n\" +", "-\t\t\t\t\"\t\t   }\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tcompileAndDeploy(sourceA, \"A\");", "-\t\t\tIClassFileReader classFileReader = ToolFactory.createDefaultClassFileReader(EVAL_DIRECTORY + File.separator + \"A.class\", IClassFileReader.ALL);", "-\t\t\tIMethodInfo[] methodInfos = classFileReader.getMethodInfos();", "-\t\t\tassertEquals(\"wrong size\", 2, methodInfos.length);", "-\t\t\tIMethodInfo methodInfo = methodInfos[1];", "-\t\t\tassertEquals(\"wrong name\", \"main\", new String(methodInfo.getName()));", "-\t\t\tICodeAttribute codeAttribute = methodInfo.getCodeAttribute();", "-\t\t\tassertNotNull(\"No code attribute\", codeAttribute);", "-\t\t\tILineNumberAttribute lineNumberAttribute = codeAttribute.getLineNumberAttribute();", "-\t\t\tassertNotNull(\"No code line number attribute\", lineNumberAttribute);", "-\t\t\tint[][] lineNumberTable = lineNumberAttribute.getLineNumberTable();", "-\t\t\tassertEquals(\"wrong size\", 4, lineNumberTable.length);", "-\t\t\tassertEquals(\"wrong pc[0]\", 0, lineNumberTable[0][0]);", "-\t\t\tassertEquals(\"wrong line[0]\", 3, lineNumberTable[0][1]);", "-\t\t\tassertEquals(\"wrong pc[1]\", 2, lineNumberTable[1][0]);", "-\t\t\tassertEquals(\"wrong line[1]\", 5, lineNumberTable[1][1]);", "-\t\t\tassertEquals(\"wrong pc[2]\", 6, lineNumberTable[2][0]);", "-\t\t\tassertEquals(\"wrong line[2]\", 6, lineNumberTable[2][1]);", "-\t\t\tassertEquals(\"wrong pc[3]\", 12, lineNumberTable[3][0]);", "-\t\t\tassertEquals(\"wrong line[3]\", 8, lineNumberTable[3][1]);", "-\t\t} finally {", "-\t\t\tremoveTempClass(\"A\");", "-\t\t}", "+\t\tString source =", "+\t\t\t\"public class A {\\n\" +", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\"\t\tboolean b = false;\\n\" +", "+\t\t\t\"\t\tif (false\\n\" +", "+\t\t\t\"\t\t   || !b) {   \t\\n\" +", "+\t\t\t\"\t\t   \tSystem.out.println();\\n\" +", "+\t\t\t\"\t\t   }\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tString expectedOutput =", "+\t\t\t\"/* \\n\" + ", "+\t\t\t\" * Version (target 1.2) \\n\" + ", "+\t\t\t\" * - magic: CAFEBABE\\n\" + ", "+\t\t\t\" * - minor: 0\\n\" + ", "+\t\t\t\" * - major: 46\\n\" + ", "+\t\t\t\" */\\n\" + ", "+\t\t\t\"// Compiled from A.java\\n\" + ", "+\t\t\t\"public class A extends java.lang.Object {\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #6 ()V */\\n\" + ", "+\t\t\t\"  public A();\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 1 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"      0  aload_0\\n\" + ", "+\t\t\t\"      1  invokespecial #9 <Constructor java.lang.Object()>\\n\" + ", "+\t\t\t\"      4  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 1]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 5] local: this index: 0 type: A\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #15 ([Ljava/lang/String;)V */\\n\" + ", "+\t\t\t\"  public static void main(String[] args);\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 2 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"       0  iconst_0\\n\" + ", "+\t\t\t\"       1  istore_1\\n\" + ", "+\t\t\t\"       2  iload_1\\n\" + ", "+\t\t\t\"       3  ifne 12\\n\" + ", "+\t\t\t\"       6  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\\n\" + ", "+\t\t\t\"       9  invokevirtual #26 <Method java.io.PrintStream#println() void>\\n\" + ", "+\t\t\t\"      12  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 3]\\n\" + ", "+\t\t\t\"      [pc: 2, line: 5]\\n\" + ", "+\t\t\t\"      [pc: 6, line: 6]\\n\" + ", "+\t\t\t\"      [pc: 12, line: 8]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 13] local: args index: 0 type: java/lang/String[]\\n\" + ", "+\t\t\t\"      [pc: 2, pc: 13] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"}\";", "+\t\tcheckClassFile(\"A\", source, expectedOutput);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dabc4ef900fb5ae48cb839ec31ba3c5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "b1289825b1d85858e43a8d7cb146ae5cf4375ba5", "commitAfterChange": "968dabd0ec3dcd97fcc7fea5e184cd16cad5b076", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic void test042()", "signatureAfterChange": " \tpublic void test042()", "diff": ["-\t\ttry {", "-\t\t\tString sourceA =", "-\t\t\t\t\"public class A {\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\tboolean b = false;\\n\" +", "-\t\t\t\t\"\t\tif (false\\n\" +", "-\t\t\t\t\"\t\t   | !b) {   \t\\n\" +", "-\t\t\t\t\"\t\t   \tSystem.out.println();\\n\" +", "-\t\t\t\t\"\t\t   }\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tcompileAndDeploy(sourceA, \"A\");", "-\t\t\tIClassFileReader classFileReader = ToolFactory.createDefaultClassFileReader(EVAL_DIRECTORY + File.separator + \"A.class\", IClassFileReader.ALL);", "-\t\t\tIMethodInfo[] methodInfos = classFileReader.getMethodInfos();", "-\t\t\tassertEquals(\"wrong size\", 2, methodInfos.length);", "-\t\t\tIMethodInfo methodInfo = methodInfos[1];", "-\t\t\tassertEquals(\"wrong name\", \"main\", new String(methodInfo.getName()));", "-\t\t\tICodeAttribute codeAttribute = methodInfo.getCodeAttribute();", "-\t\t\tassertNotNull(\"No code attribute\", codeAttribute);", "-\t\t\tILineNumberAttribute lineNumberAttribute = codeAttribute.getLineNumberAttribute();", "-\t\t\tassertNotNull(\"No code line number attribute\", lineNumberAttribute);", "-\t\t\tint[][] lineNumberTable = lineNumberAttribute.getLineNumberTable();", "-\t\t\tassertEquals(\"wrong size\", 4, lineNumberTable.length);", "-\t\t\tassertEquals(\"wrong pc[0]\", 0, lineNumberTable[0][0]);", "-\t\t\tassertEquals(\"wrong line[0]\", 3, lineNumberTable[0][1]);", "-\t\t\tassertEquals(\"wrong pc[1]\", 2, lineNumberTable[1][0]);", "-\t\t\tassertEquals(\"wrong line[1]\", 5, lineNumberTable[1][1]);", "-\t\t\tassertEquals(\"wrong pc[2]\", 6, lineNumberTable[2][0]);", "-\t\t\tassertEquals(\"wrong line[2]\", 6, lineNumberTable[2][1]);", "-\t\t\tassertEquals(\"wrong pc[3]\", 12, lineNumberTable[3][0]);", "-\t\t\tassertEquals(\"wrong line[3]\", 8, lineNumberTable[3][1]);", "-\t\t} finally {", "-\t\t\tremoveTempClass(\"A\");", "-\t\t}", "+\t\tString source =", "+\t\t\t\"public class A {\\n\" +", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\"\t\tboolean b = false;\\n\" +", "+\t\t\t\"\t\tif (false\\n\" +", "+\t\t\t\"\t\t   | !b) {   \t\\n\" +", "+\t\t\t\"\t\t   \tSystem.out.println();\\n\" +", "+\t\t\t\"\t\t   }\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tString expectedOutput =", "+\t\t\t\"/* \\n\" + ", "+\t\t\t\" * Version (target 1.2) \\n\" + ", "+\t\t\t\" * - magic: CAFEBABE\\n\" + ", "+\t\t\t\" * - minor: 0\\n\" + ", "+\t\t\t\" * - major: 46\\n\" + ", "+\t\t\t\" */\\n\" + ", "+\t\t\t\"// Compiled from A.java\\n\" + ", "+\t\t\t\"public class A extends java.lang.Object {\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #6 ()V */\\n\" + ", "+\t\t\t\"  public A();\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 1 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"      0  aload_0\\n\" + ", "+\t\t\t\"      1  invokespecial #9 <Constructor java.lang.Object()>\\n\" + ", "+\t\t\t\"      4  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 1]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 5] local: this index: 0 type: A\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #15 ([Ljava/lang/String;)V */\\n\" + ", "+\t\t\t\"  public static void main(String[] args);\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 2 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"       0  iconst_0\\n\" + ", "+\t\t\t\"       1  istore_1\\n\" + ", "+\t\t\t\"       2  iload_1\\n\" + ", "+\t\t\t\"       3  ifne 12\\n\" + ", "+\t\t\t\"       6  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\\n\" + ", "+\t\t\t\"       9  invokevirtual #26 <Method java.io.PrintStream#println() void>\\n\" + ", "+\t\t\t\"      12  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 3]\\n\" + ", "+\t\t\t\"      [pc: 2, line: 5]\\n\" + ", "+\t\t\t\"      [pc: 6, line: 6]\\n\" + ", "+\t\t\t\"      [pc: 12, line: 8]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 13] local: args index: 0 type: java/lang/String[]\\n\" + ", "+\t\t\t\"      [pc: 2, pc: 13] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"}\";", "+\t\tcheckClassFile(\"A\", source, expectedOutput);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dce72eab3046e4322316b2a210d3232f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "b1289825b1d85858e43a8d7cb146ae5cf4375ba5", "commitAfterChange": "968dabd0ec3dcd97fcc7fea5e184cd16cad5b076", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic void test018()", "signatureAfterChange": " \tpublic void test018()", "diff": ["-\t\ttry {", "-\t\t\tString sourceA =", "-\t\t\t\t\"public class A {\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\tboolean b = false;\\n\" +", "-\t\t\t\t\"\t\tif (false\\n\" +", "-\t\t\t\t\"\t\t   == !b) {   \t\\n\" +", "-\t\t\t\t\"\t\t   \tSystem.out.println();\\n\" +", "-\t\t\t\t\"\t\t   }\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tcompileAndDeploy(sourceA, \"A\");", "-\t\t\tIClassFileReader classFileReader = ToolFactory.createDefaultClassFileReader(EVAL_DIRECTORY + File.separator + \"A.class\", IClassFileReader.ALL);", "-\t\t\tIMethodInfo[] methodInfos = classFileReader.getMethodInfos();", "-\t\t\tassertEquals(\"wrong size\", 2, methodInfos.length);", "-\t\t\tIMethodInfo methodInfo = methodInfos[1];", "-\t\t\tassertEquals(\"wrong name\", \"main\", new String(methodInfo.getName()));", "-\t\t\tICodeAttribute codeAttribute = methodInfo.getCodeAttribute();", "-\t\t\tassertNotNull(\"No code attribute\", codeAttribute);", "-\t\t\tILineNumberAttribute lineNumberAttribute = codeAttribute.getLineNumberAttribute();", "-\t\t\tassertNotNull(\"No code line number attribute\", lineNumberAttribute);", "-\t\t\tint[][] lineNumberTable = lineNumberAttribute.getLineNumberTable();", "-\t\t\tassertEquals(\"wrong size\", 4, lineNumberTable.length);", "-\t\t\tassertEquals(\"wrong pc[0]\", 0, lineNumberTable[0][0]);", "-\t\t\tassertEquals(\"wrong line[0]\", 3, lineNumberTable[0][1]);", "-\t\t\tassertEquals(\"wrong pc[1]\", 2, lineNumberTable[1][0]);", "-\t\t\tassertEquals(\"wrong line[1]\", 5, lineNumberTable[1][1]);", "-\t\t\tassertEquals(\"wrong pc[2]\", 6, lineNumberTable[2][0]);", "-\t\t\tassertEquals(\"wrong line[2]\", 6, lineNumberTable[2][1]);", "-\t\t\tassertEquals(\"wrong pc[3]\", 12, lineNumberTable[3][0]);", "-\t\t\tassertEquals(\"wrong line[3]\", 8, lineNumberTable[3][1]);", "-\t\t} finally {", "-\t\t\tremoveTempClass(\"A\");", "-\t\t}", "+\t\tString source =", "+\t\t\t\"public class A {\\n\" +", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\"\t\tboolean b = false;\\n\" +", "+\t\t\t\"\t\tif (false\\n\" +", "+\t\t\t\"\t\t   == !b) {   \t\\n\" +", "+\t\t\t\"\t\t   \tSystem.out.println();\\n\" +", "+\t\t\t\"\t\t   }\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tString expectedOutput =", "+\t\t\t\"/* \\n\" + ", "+\t\t\t\" * Version (target 1.2) \\n\" + ", "+\t\t\t\" * - magic: CAFEBABE\\n\" + ", "+\t\t\t\" * - minor: 0\\n\" + ", "+\t\t\t\" * - major: 46\\n\" + ", "+\t\t\t\" */\\n\" + ", "+\t\t\t\"// Compiled from A.java\\n\" + ", "+\t\t\t\"public class A extends java.lang.Object {\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #6 ()V */\\n\" + ", "+\t\t\t\"  public A();\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 1 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"      0  aload_0\\n\" + ", "+\t\t\t\"      1  invokespecial #9 <Constructor java.lang.Object()>\\n\" + ", "+\t\t\t\"      4  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 1]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 5] local: this index: 0 type: A\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #15 ([Ljava/lang/String;)V */\\n\" + ", "+\t\t\t\"  public static void main(String[] args);\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 2 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"       0  iconst_0\\n\" + ", "+\t\t\t\"       1  istore_1\\n\" + ", "+\t\t\t\"       2  iload_1\\n\" + ", "+\t\t\t\"       3  ifeq 12\\n\" + ", "+\t\t\t\"       6  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\\n\" + ", "+\t\t\t\"       9  invokevirtual #26 <Method java.io.PrintStream#println() void>\\n\" + ", "+\t\t\t\"      12  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 3]\\n\" + ", "+\t\t\t\"      [pc: 2, line: 5]\\n\" + ", "+\t\t\t\"      [pc: 6, line: 6]\\n\" + ", "+\t\t\t\"      [pc: 12, line: 8]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 13] local: args index: 0 type: java/lang/String[]\\n\" + ", "+\t\t\t\"      [pc: 2, pc: 13] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"}\";", "+\t\tcheckClassFile(\"A\", source, expectedOutput);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e120ea336f78693b59ac986eff3599d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "b1289825b1d85858e43a8d7cb146ae5cf4375ba5", "commitAfterChange": "968dabd0ec3dcd97fcc7fea5e184cd16cad5b076", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void test017()", "signatureAfterChange": " \tpublic void test017()", "diff": ["-\t\ttry {", "-\t\t\tString sourceA =", "-\t\t\t\t\"public class A {\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\tboolean b = false;\\n\" +", "-\t\t\t\t\"\t\tif (true\\n\" +", "-\t\t\t\t\"\t\t   == !b) {   \t\\n\" +", "-\t\t\t\t\"\t\t   \tSystem.out.println();\\n\" +", "-\t\t\t\t\"\t\t   }\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tcompileAndDeploy(sourceA, \"A\");", "-\t\t\tIClassFileReader classFileReader = ToolFactory.createDefaultClassFileReader(EVAL_DIRECTORY + File.separator + \"A.class\", IClassFileReader.ALL);", "-\t\t\tIMethodInfo[] methodInfos = classFileReader.getMethodInfos();", "-\t\t\tassertEquals(\"wrong size\", 2, methodInfos.length);", "-\t\t\tIMethodInfo methodInfo = methodInfos[1];", "-\t\t\tassertEquals(\"wrong name\", \"main\", new String(methodInfo.getName()));", "-\t\t\tICodeAttribute codeAttribute = methodInfo.getCodeAttribute();", "-\t\t\tassertNotNull(\"No code attribute\", codeAttribute);", "-\t\t\tILineNumberAttribute lineNumberAttribute = codeAttribute.getLineNumberAttribute();", "-\t\t\tassertNotNull(\"No code line number attribute\", lineNumberAttribute);", "-\t\t\tint[][] lineNumberTable = lineNumberAttribute.getLineNumberTable();", "-\t\t\tassertEquals(\"wrong size\", 4, lineNumberTable.length);", "-\t\t\tassertEquals(\"wrong pc[0]\", 0, lineNumberTable[0][0]);", "-\t\t\tassertEquals(\"wrong line[0]\", 3, lineNumberTable[0][1]);", "-\t\t\tassertEquals(\"wrong pc[1]\", 2, lineNumberTable[1][0]);", "-\t\t\tassertEquals(\"wrong line[1]\", 5, lineNumberTable[1][1]);", "-\t\t\tassertEquals(\"wrong pc[2]\", 6, lineNumberTable[2][0]);", "-\t\t\tassertEquals(\"wrong line[2]\", 6, lineNumberTable[2][1]);", "-\t\t\tassertEquals(\"wrong pc[3]\", 12, lineNumberTable[3][0]);", "-\t\t\tassertEquals(\"wrong line[3]\", 8, lineNumberTable[3][1]);", "-\t\t} finally {", "-\t\t\tremoveTempClass(\"A\");", "-\t\t}", "+\t\tString source =", "+\t\t\t\"public class A {\\n\" +", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\"\t\tboolean b = false;\\n\" +", "+\t\t\t\"\t\tif (true\\n\" +", "+\t\t\t\"\t\t   == !b) {   \t\\n\" +", "+\t\t\t\"\t\t   \tSystem.out.println();\\n\" +", "+\t\t\t\"\t\t   }\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tString expectedOutput =", "+\t\t\t\"/* \\n\" + ", "+\t\t\t\" * Version (target 1.2) \\n\" + ", "+\t\t\t\" * - magic: CAFEBABE\\n\" + ", "+\t\t\t\" * - minor: 0\\n\" + ", "+\t\t\t\" * - major: 46\\n\" + ", "+\t\t\t\" */\\n\" + ", "+\t\t\t\"// Compiled from A.java\\n\" + ", "+\t\t\t\"public class A extends java.lang.Object {\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #6 ()V */\\n\" + ", "+\t\t\t\"  public A();\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 1 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"      0  aload_0\\n\" + ", "+\t\t\t\"      1  invokespecial #9 <Constructor java.lang.Object()>\\n\" + ", "+\t\t\t\"      4  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 1]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 5] local: this index: 0 type: A\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #15 ([Ljava/lang/String;)V */\\n\" + ", "+\t\t\t\"  public static void main(String[] args);\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 2 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"       0  iconst_0\\n\" + ", "+\t\t\t\"       1  istore_1\\n\" + ", "+\t\t\t\"       2  iload_1\\n\" + ", "+\t\t\t\"       3  ifne 12\\n\" + ", "+\t\t\t\"       6  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\\n\" + ", "+\t\t\t\"       9  invokevirtual #26 <Method java.io.PrintStream#println() void>\\n\" + ", "+\t\t\t\"      12  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 3]\\n\" + ", "+\t\t\t\"      [pc: 2, line: 5]\\n\" + ", "+\t\t\t\"      [pc: 6, line: 6]\\n\" + ", "+\t\t\t\"      [pc: 12, line: 8]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 13] local: args index: 0 type: java/lang/String[]\\n\" + ", "+\t\t\t\"      [pc: 2, pc: 13] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"}\";", "+\t\tcheckClassFile(\"A\", source, expectedOutput);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0685fbc63934ac9702d95527b330b48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest.java", "commitBeforeChange": "b1289825b1d85858e43a8d7cb146ae5cf4375ba5", "commitAfterChange": "968dabd0ec3dcd97fcc7fea5e184cd16cad5b076", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic void test036()", "signatureAfterChange": " \tpublic void test036()", "diff": ["-\t\ttry {", "-\t\t\tString sourceA =", "-\t\t\t\t\"public class A {\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\tboolean b = false;\\n\" +", "-\t\t\t\t\"\t\tif (true\\n\" +", "-\t\t\t\t\"\t\t   & !b) {   \t\\n\" +", "-\t\t\t\t\"\t\t   \tSystem.out.println();\\n\" +", "-\t\t\t\t\"\t\t   }\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\";", "-\t\t\tcompileAndDeploy(sourceA, \"A\");", "-\t\t\tIClassFileReader classFileReader = ToolFactory.createDefaultClassFileReader(EVAL_DIRECTORY + File.separator + \"A.class\", IClassFileReader.ALL);", "-\t\t\tIMethodInfo[] methodInfos = classFileReader.getMethodInfos();", "-\t\t\tassertEquals(\"wrong size\", 2, methodInfos.length);", "-\t\t\tIMethodInfo methodInfo = methodInfos[1];", "-\t\t\tassertEquals(\"wrong name\", \"main\", new String(methodInfo.getName()));", "-\t\t\tICodeAttribute codeAttribute = methodInfo.getCodeAttribute();", "-\t\t\tassertNotNull(\"No code attribute\", codeAttribute);", "-\t\t\tILineNumberAttribute lineNumberAttribute = codeAttribute.getLineNumberAttribute();", "-\t\t\tassertNotNull(\"No code line number attribute\", lineNumberAttribute);", "-\t\t\tint[][] lineNumberTable = lineNumberAttribute.getLineNumberTable();", "-\t\t\tassertEquals(\"wrong size\", 4, lineNumberTable.length);", "-\t\t\tassertEquals(\"wrong pc[0]\", 0, lineNumberTable[0][0]);", "-\t\t\tassertEquals(\"wrong line[0]\", 3, lineNumberTable[0][1]);", "-\t\t\tassertEquals(\"wrong pc[1]\", 2, lineNumberTable[1][0]);", "-\t\t\tassertEquals(\"wrong line[1]\", 5, lineNumberTable[1][1]);", "-\t\t\tassertEquals(\"wrong pc[2]\", 6, lineNumberTable[2][0]);", "-\t\t\tassertEquals(\"wrong line[2]\", 6, lineNumberTable[2][1]);", "-\t\t\tassertEquals(\"wrong pc[3]\", 12, lineNumberTable[3][0]);", "-\t\t\tassertEquals(\"wrong line[3]\", 8, lineNumberTable[3][1]);", "-\t\t} finally {", "-\t\t\tremoveTempClass(\"A\");", "-\t\t}", "+\t\tString source =", "+\t\t\t\"public class A {\\n\" +", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "+\t\t\t\"\t\tboolean b = false;\\n\" +", "+\t\t\t\"\t\tif (true\\n\" +", "+\t\t\t\"\t\t   & !b) {   \t\\n\" +", "+\t\t\t\"\t\t   \tSystem.out.println();\\n\" +", "+\t\t\t\"\t\t   }\\n\" +", "+\t\t\t\"\t}\\n\" +", "+\t\t\t\"}\";", "+\t\tString expectedOutput =", "+\t\t\t\"/* \\n\" + ", "+\t\t\t\" * Version (target 1.2) \\n\" + ", "+\t\t\t\" * - magic: CAFEBABE\\n\" + ", "+\t\t\t\" * - minor: 0\\n\" + ", "+\t\t\t\" * - major: 46\\n\" + ", "+\t\t\t\" */\\n\" + ", "+\t\t\t\"// Compiled from A.java\\n\" + ", "+\t\t\t\"public class A extends java.lang.Object {\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #6 ()V */\\n\" + ", "+\t\t\t\"  public A();\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 1 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"      0  aload_0\\n\" + ", "+\t\t\t\"      1  invokespecial #9 <Constructor java.lang.Object()>\\n\" + ", "+\t\t\t\"      4  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 1]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 5] local: this index: 0 type: A\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"  /*  Method descriptor  #15 ([Ljava/lang/String;)V */\\n\" + ", "+\t\t\t\"  public static void main(String[] args);\\n\" + ", "+\t\t\t\"    /* Stack: 1, Locals: 2 */\\n\" + ", "+\t\t\t\"    Code attribute:\\n\" + ", "+\t\t\t\"       0  iconst_0\\n\" + ", "+\t\t\t\"       1  istore_1\\n\" + ", "+\t\t\t\"       2  iload_1\\n\" + ", "+\t\t\t\"       3  ifne 12\\n\" + ", "+\t\t\t\"       6  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\\n\" + ", "+\t\t\t\"       9  invokevirtual #26 <Method java.io.PrintStream#println() void>\\n\" + ", "+\t\t\t\"      12  return\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"    Line number attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, line: 3]\\n\" + ", "+\t\t\t\"      [pc: 2, line: 5]\\n\" + ", "+\t\t\t\"      [pc: 6, line: 6]\\n\" + ", "+\t\t\t\"      [pc: 12, line: 8]\\n\" + ", "+\t\t\t\"    Local variable table attribute:\\n\" + ", "+\t\t\t\"      [pc: 0, pc: 13] local: args index: 0 type: java/lang/String[]\\n\" + ", "+\t\t\t\"      [pc: 2, pc: 13] local: b index: 1 type: boolean\\n\" + ", "+\t\t\t\"  \\n\" + ", "+\t\t\t\"}\";", "+\t\tcheckClassFile(\"A\", source, expectedOutput);"]}], "num": 552}
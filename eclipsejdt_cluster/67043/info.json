{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7679614f0daf56a4485679f0a62f46a0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b8e3c2f69f55f3cb2dca8a189e3292c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragment.java", "commitBeforeChange": "80f13f589612d3209f47e541aabe6ab2c65adcfb", "commitAfterChange": "368ef540dc656f1299283391a6f5a5b30ecfed90", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " void computeNonJavaResources(String[] resNames, JarPackageFragmentInfo info, String zipName)", "signatureAfterChange": " void computeNonJavaResources(String[] resNames, JarPackageFragmentInfo info, String zipName)", "diff": ["+\tint index = 0;\r", "-\t\tres[i] = new JarEntryFile(resNames[i], zipName);\r", "+\t\tString resName = resNames[i];\r", "+\t\t// consider that a .java file is not a non-java resource (see bug 12246 Packages view shows .class and .java files when JAR has source)\r", "+\t\tif (!resName.toLowerCase().endsWith(\".java\")) { //$NON-NLS-1$\r", "+\t\t\tres[index++] = new JarEntryFile(resName, zipName);\r", "+\t\t}\r", "+\tif (index != max) {\r", "+\t\tSystem.arraycopy(res, 0, res = new Object[index], 0, index);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1f8f3cbf183a0ba7993ecb2e57ffdfa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "cf2e4750b0bf80acaca57190591526193389bd11", "commitAfterChange": "c8343c5add6dda54a91bc7ca5cb7fef7041d4b69", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate static IPath[] decodePatterns(Element element, String tag)", "signatureAfterChange": " \tprivate static IPath[] decodePatterns(Element element, String tag)", "diff": ["-\t\t\tif ((patternCount  = patterns.length) > 0) {", "+\t\t\tif ((patternCount = patterns.length) > 0) {", "-\t\t\t\tfor (int j = 0; j < patterns.length; j++){", "-\t\t\t\t\tpaths[j] = new Path(new String(patterns[j]));", "+\t\t\t\tint index = 0;", "+\t\t\t\tfor (int j = 0; j < patternCount; j++) {", "+\t\t\t\t\tchar[] pattern = patterns[j];", "+\t\t\t\t\tif (pattern.length == 0) continue; // see https://bugs.eclipse.org/bugs/show_bug.cgi?id=105581", "+\t\t\t\t\tpaths[index++] = new Path(new String(pattern));", "+\t\t\t\tif (index < patternCount)", "+\t\t\t\t\tSystem.arraycopy(paths, 0, paths = new IPath[index], 0, index);"]}], "num": 67043}
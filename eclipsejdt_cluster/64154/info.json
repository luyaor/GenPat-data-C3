{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "690912ed3f3ded64bfa5302b208c26e0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55965414c233fd609944eb7491681cdd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MultiTypeDeclarationPattern.java", "commitBeforeChange": "e85ef31dfa86374477953b5334cffc5119f2feae", "commitAfterChange": "8a1e311af393ccdbbaab4d3836c703deb332d624", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public MultiTypeDeclarationPattern( \tchar[][] qualifications, \tchar[][] simpleNames, \tchar typeSuffix, \tint matchRule)", "signatureAfterChange": "  public MultiTypeDeclarationPattern( \tchar[][] qualifications, \tchar[][] simpleNames, \tchar typeSuffix, \tint matchRule)", "diff": ["-\tif (simpleNames == null) {", "-\t\tthis.simpleNames = CharOperation.NO_CHAR_CHAR;", "-\t} else if ((isCaseSensitive() || isCamelCase()) ) {", "-\t\tthis.simpleNames = simpleNames;", "-\t} else {", "-\t\tint length = simpleNames.length;", "-\t\tthis.simpleNames = new char[length][];", "-\t\tfor (int i = 0; i < length; i++)", "-\t\t\tthis.simpleNames[i] = CharOperation.toLowerCase(simpleNames[i]);", "+\t// null simple names are allowed (should return all names)", "+\tif (simpleNames != null) {", "+\t\tif ((isCaseSensitive() || isCamelCase()) ) {", "+\t\t\tthis.simpleNames = simpleNames;", "+\t\t} else {", "+\t\t\tint length = simpleNames.length;", "+\t\t\tthis.simpleNames = new char[length][];", "+\t\t\tfor (int i = 0; i < length; i++)", "+\t\t\t\tthis.simpleNames[i] = CharOperation.toLowerCase(simpleNames[i]);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95c76220278f6a2dce705115b04790e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "c4112ab397da10b85cbb2a3f081c4c91ed7c7975", "commitAfterChange": "2077df1da6fa132fd5beb7d042b102e760cf8cbf", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  static State read(IProject project, DataInputStream in) throws IOException", "signatureAfterChange": "  static State read(IProject project, DataInputStream in) throws IOException", "diff": ["+\tchar[][] internedRootNames = ReferenceCollection.internSimpleNames(readNames(in), false);", "-\t\t\t\tcollection = new AdditionalTypeCollection(additionalTypeNames, qualifiedNames, simpleNames);", "+\t\t\t\tchar[][] rootNames = new char[in.readInt()][];", "+\t\t\t\tfor (int j = 0, m = rootNames.length; j < m; j++)", "+\t\t\t\t\trootNames[j] = internedRootNames[in.readInt()];", "+\t\t\t\tcollection = new AdditionalTypeCollection(additionalTypeNames, qualifiedNames, simpleNames, rootNames);", "-\t\t\t\tcollection = new ReferenceCollection(qNames, sNames);", "+\t\t\t\tchar[][] rNames = new char[in.readInt()][];", "+\t\t\t\tfor (int j = 0, m = rNames.length; j < m; j++)", "+\t\t\t\t\trNames[j] = internedRootNames[in.readInt()];", "+\t\t\t\tcollection = new ReferenceCollection(qNames, sNames, rNames);"]}], "num": 64154}
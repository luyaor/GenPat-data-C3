{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1feaf35ea36d4b2feda0984835408a27", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a009dee278cf215c3d6944e77b45beab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic FlowInfo copy()", "signatureAfterChange": "  public FlowInfo copy()", "diff": ["+", "+public FlowInfo copy() {", "+\t// do not clone the DeadEnd", "+\tif (this == DEAD_END) {", "-\t */", "-\tpublic FlowInfo copy() {", "-\t\t", "-\t\t// do not clone the DeadEnd", "-\t\tif (this == DEAD_END)", "-\t\t\treturn this;", "-\t", "-\t\t// look for an unused preallocated object", "-\t\tUnconditionalFlowInfo copy = new UnconditionalFlowInfo();", "-\t", "-\t\t// copy slots", "-\t\tcopy.definiteInits = this.definiteInits;", "-\t\tcopy.potentialInits = this.potentialInits;", "-\t\tcopy.definiteNulls = this.definiteNulls;", "-\t\tcopy.definiteNonNulls = this.definiteNonNulls;", "-\t\tcopy.reachMode = this.reachMode;", "-\t\tcopy.maxFieldCount = this.maxFieldCount;", "-\t\t", "-\t\tif (this.extraDefiniteInits != null) {", "-\t\t\tint length;", "-\t\t\tSystem.arraycopy(this.extraDefiniteInits, 0, (copy.extraDefiniteInits = new long[length = extraDefiniteInits.length]), 0, length);", "-\t\t\tSystem.arraycopy(this.extraPotentialInits, 0, (copy.extraPotentialInits = new long[length]), 0, length);", "-\t\t\tSystem.arraycopy(this.extraDefiniteNulls, 0, (copy.extraDefiniteNulls = new long[length]), 0, length);", "-\t\t\tSystem.arraycopy(this.extraDefiniteNonNulls, 0, (copy.extraDefiniteNonNulls = new long[length]), 0, length);", "-\t\t}", "-\t\treturn copy;", "+\tUnconditionalFlowInfo copy = new UnconditionalFlowInfo();", "+\t// copy slots", "+\tcopy.definiteInits = this.definiteInits;", "+\tcopy.potentialInits = this.potentialInits;", "+\tboolean hasNullInfo = (this.tagBits & NULL_FLAG_MASK) != 0;", "+\tif (hasNullInfo) { ", "+\t\tcopy.nullAssignmentStatusBit1 = this.nullAssignmentStatusBit1;", "+\t\tcopy.nullAssignmentStatusBit2 = this.nullAssignmentStatusBit2;", "+\t\tcopy.nullAssignmentValueBit1 = this.nullAssignmentValueBit1;", "+\t\tcopy.nullAssignmentValueBit2 = this.nullAssignmentValueBit2;", "+\tcopy.tagBits = this.tagBits;", "+\tcopy.maxFieldCount = this.maxFieldCount;", "+\tif (this.extra != null) {", "+\t\tint length;", "+\t\tcopy.extra = new long[extraLength][];", "+\t\tSystem.arraycopy(this.extra[0], 0, ", "+\t\t\t(copy.extra[0] = new long[length = this.extra[0].length]), 0, ", "+\t\t\tlength);", "+\t\tSystem.arraycopy(this.extra[1], 0, ", "+\t\t\t(copy.extra[1] = new long[length]), 0, length);", "+\t\tif (hasNullInfo) {", "+\t\t\tfor (int j = 2; j < extraLength; j++) {", "+\t\t\t\tSystem.arraycopy(this.extra[j], 0, ", "+\t\t\t\t\t(copy.extra[j] = new long[length]), 0, length);", "+\t\t\t}", "+\t\t}", "+\t\telse {", "+\t\t\tfor (int j = 2; j < extraLength; j++) {", "+\t\t\t\tcopy.extra[j] = new long[length];", "+\t\t\t}", "+\t\t}", "+\t}", "+\treturn copy;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af046090c20f5bdf688caa40e7b33dfd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "aa46ed677ee85f03d71a5e403b6a2449b883ffe1", "commitAfterChange": "c0de86876da4886baced9b3782c3e678b86d856e", "methodNumberBeforeChange": 350, "methodNumberAfterChange": 318, "signatureBeforeChange": "  public FlowInfo copy()", "signatureAfterChange": " public void test1501()", "diff": ["+// encoding validation", "+public void test1501() {", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  void foo(Object o, int i, boolean b, Object u) {\\n\" +", "+\t\t\t\"    if (b) {\\n\" +", "+\t\t\t\"      o = new Object();\\n\" +", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    o.toString();\\n\" + ", "+\t\t\t\"    switch (i) {\\n\" + ", "+\t\t\t\"      case 0:\\n\" +", "+\t\t\t\"        if (b) {\\n\" +", "+\t\t\t\"          o = u;\\n\" +", "+\t\t\t\"        } else {\\n\" +", "+\t\t\t\"          o = new Object();\\n\" +", "+\t\t\t\"        }\\n\" +", "+\t\t\t\"        break;\\n\" + ", "+\t\t\t\"    }\\n\" +", "+\t\t\t\"    if (o == null) { /* empty */ }\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"\");", "+}", "-", "-public FlowInfo copy() {", "-\tUnconditionalFlowInfoTestHarness copy = ", "-\t\tnew UnconditionalFlowInfoTestHarness();", "-\tcopy.testPosition = this.testPosition;", "-\tcopy.definiteInits = this.definiteInits;", "-\tcopy.potentialInits = this.potentialInits;", "-\tboolean hasNullInfo = (this.tagBits & NULL_FLAG_MASK) != 0;", "-\tif (hasNullInfo) { ", "-\t\tcopy.nullAssignmentStatusBit1 = this.nullAssignmentStatusBit1;", "-\t\tcopy.nullAssignmentStatusBit2 = this.nullAssignmentStatusBit2;", "-\t\tcopy.nullAssignmentValueBit1 = this.nullAssignmentValueBit1;", "-\t\tcopy.nullAssignmentValueBit2 = this.nullAssignmentValueBit2;", "-\t}", "-\tcopy.tagBits = this.tagBits;", "-\tcopy.maxFieldCount = this.maxFieldCount;", "-\tif (this.extra != null) {", "-\t\tint length;", "-        copy.extra = new long[extraLength][];", "-\t\tSystem.arraycopy(this.extra[0], 0, ", "-\t\t\t(copy.extra[0] = new long[length = extra[0].length]), 0, length);", "-\t\tSystem.arraycopy(this.extra[1], 0, ", "-\t\t\t(copy.extra[1] = new long[length]), 0, length);", "-\t\tif (hasNullInfo) {", "-            for (int j = 0; j < extraLength; j++) {", "-\t\t\t    System.arraycopy(this.extra[j], 0, ", "-\t\t\t\t    (copy.extra[j] = new long[length]), 0, length);", "-            }", "-\t\t}", "-\t\telse {", "-            for (int j = 0; j < extraLength; j++) {", "-\t\t\t    copy.extra[j] = new long[length];", "-            }", "-\t\t}", "-\t}", "-\treturn copy;", "-}"]}], "num": 68138}
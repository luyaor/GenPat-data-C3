{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9db4860eea5d10378cb36ccc74bfbd6e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0648249e4a5d4aed18254b07cfc670c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "0bb31250e6dfa81e101547a2ec18bc13a11477d7", "commitAfterChange": "09c8d2f925a57bbf1511d8664e73fc036c4e20a7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t", "+", "+\t\tboolean initializeCompilerAnnotation = true; // scope.compilerOptions().storeAnnotations;", "-\t\t\tthis.compilerAnnotation = new AnnotationBinding(this);", "+\t\t\tif (initializeCompilerAnnotation)", "+\t\t\t\tthis.compilerAnnotation = new AnnotationBinding(this);", "-\t\t\tthis.compilerAnnotation = new AnnotationBinding(this);", "+\t\t\tif (initializeCompilerAnnotation)", "+\t\t\t\tthis.compilerAnnotation = new AnnotationBinding(this);", "-\t\tthis.compilerAnnotation = new AnnotationBinding(this);", "+\t\tif (initializeCompilerAnnotation)", "+\t\t\tthis.compilerAnnotation = new AnnotationBinding(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f109e3ca5fd745c9d859fe2bf26d6cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "3aa835135283a2acadb61b0aae182c129f17ffab", "commitAfterChange": "a9c15bae1087a65c1bc60140ceb7a5a5416fd8a8", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r public void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": "\r public void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration)", "diff": ["+\r", "+\t// range check\r", "+\tboolean isInRange = \r", "+\t\t\t\tscanner.initialPosition <= methodDeclaration.declarationSourceStart\r", "+\t\t\t\t&& scanner.eofPosition >= methodDeclaration.declarationSourceEnd;\r", "+\r", "-\t\tif (scanner.initialPosition <= methodDeclaration.declarationSourceStart) {\r", "+\t\tif (isInRange){\r", "-\t\t\tif (reportReferenceInfo) {\r", "-\t\t\t\tConstructorDeclaration constructorDeclaration = (ConstructorDeclaration) methodDeclaration;\r", "-\t\t\t\tExplicitConstructorCall constructorCall = constructorDeclaration.constructorCall;\r", "-\t\t\t\tif (constructorCall != null) {\r", "-\t\t\t\t\tswitch(constructorCall.accessMode) {\r", "-\t\t\t\t\t\tcase ExplicitConstructorCall.This :\r", "-\t\t\t\t\t\t\trequestor.acceptConstructorReference(\r", "-\t\t\t\t\t\t\t\ttypeNames[nestedTypeIndex-1],\r", "-\t\t\t\t\t\t\t\tconstructorCall.arguments == null ? 0 : constructorCall.arguments.length, \r", "-\t\t\t\t\t\t\t\tconstructorCall.sourceStart);\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\tcase ExplicitConstructorCall.Super :\r", "-\t\t\t\t\t\tcase ExplicitConstructorCall.ImplicitSuper :\r", "-\t\t\t\t\t\t\trequestor.acceptConstructorReference(\r", "-\t\t\t\t\t\t\t\tsuperTypeNames[nestedTypeIndex-1],\r", "-\t\t\t\t\t\t\t\tconstructorCall.arguments == null ? 0 : constructorCall.arguments.length, \r", "-\t\t\t\t\t\t\t\tconstructorCall.sourceStart);\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t}\r", "+\t\t}\r", "+\t\tif (reportReferenceInfo) {\r", "+\t\t\tConstructorDeclaration constructorDeclaration = (ConstructorDeclaration) methodDeclaration;\r", "+\t\t\tExplicitConstructorCall constructorCall = constructorDeclaration.constructorCall;\r", "+\t\t\tif (constructorCall != null) {\r", "+\t\t\t\tswitch(constructorCall.accessMode) {\r", "+\t\t\t\t\tcase ExplicitConstructorCall.This :\r", "+\t\t\t\t\t\trequestor.acceptConstructorReference(\r", "+\t\t\t\t\t\t\ttypeNames[nestedTypeIndex-1],\r", "+\t\t\t\t\t\t\tconstructorCall.arguments == null ? 0 : constructorCall.arguments.length, \r", "+\t\t\t\t\t\t\tconstructorCall.sourceStart);\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase ExplicitConstructorCall.Super :\r", "+\t\t\t\t\tcase ExplicitConstructorCall.ImplicitSuper :\r", "+\t\t\t\t\t\trequestor.acceptConstructorReference(\r", "+\t\t\t\t\t\t\tsuperTypeNames[nestedTypeIndex-1],\r", "+\t\t\t\t\t\t\tconstructorCall.arguments == null ? 0 : constructorCall.arguments.length, \r", "+\t\t\t\t\t\t\tconstructorCall.sourceStart);\r", "+\t\t\t\t\t\tbreak;\r", "-\t\tif (scanner.eofPosition >= methodDeclaration.declarationSourceEnd) {\r", "+\t\tif (isInRange){\r", "-\trequestor.enterMethod(\r", "-\t\tmethodDeclaration.declarationSourceStart, \r", "-\t\tmethodDeclaration.modifiers & AccJustFlag, \r", "-\t\treturnTypeName(((MethodDeclaration) methodDeclaration).returnType), \r", "-\t\tmethodDeclaration.selector, \r", "-\t\tmethodDeclaration.sourceStart, \r", "-\t\tselectorSourceEnd, \r", "-\t\targumentTypes, \r", "-\t\targumentNames, \r", "-\t\tthrownExceptionTypes); \r", "-\t\t\r", "+\tif (isInRange){\r", "+\t\trequestor.enterMethod(\r", "+\t\t\tmethodDeclaration.declarationSourceStart, \r", "+\t\t\tmethodDeclaration.modifiers & AccJustFlag, \r", "+\t\t\treturnTypeName(((MethodDeclaration) methodDeclaration).returnType), \r", "+\t\t\tmethodDeclaration.selector, \r", "+\t\t\tmethodDeclaration.sourceStart, \r", "+\t\t\tselectorSourceEnd, \r", "+\t\t\targumentTypes, \r", "+\t\t\targumentNames, \r", "+\t\t\tthrownExceptionTypes); \r", "+\t}\t\t\r", "-\t\r", "-\trequestor.exitMethod(methodDeclaration.declarationSourceEnd);\r", "+\r", "+\tif (isInRange){\t\r", "+\t\trequestor.exitMethod(methodDeclaration.declarationSourceEnd);\r", "+\t}\r"]}], "num": 51404}
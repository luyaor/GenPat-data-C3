{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c907cfbdd83f8c7ed15e57898229675c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3581583f352df9d24ba20bf2ce6226f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "7fb86fb96d585ee8957fc13764a67f220efdab28", "commitAfterChange": "ac9209adc3bf5bee5093a73bfc9f86fe5825e76d", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void locateMatches( \t\tString[] filePaths,  \t\tIWorkspace workspace, \t\tIWorkingCopy[] workingCopies,  \t\tIProgressMonitor progressMonitor) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic void locateMatches( \t\tString[] filePaths,  \t\tIWorkspace workspace, \t\tIWorkingCopy[] workingCopies,  \t\tIProgressMonitor progressMonitor) \t\tthrows JavaModelException", "diff": ["-\t\t\t\t\t\t// create parser for this project", "-\t\t\t\t\t\tthis.createParser(javaProject);", "+\t\t\t\t\t\t// initialization for this project", "+\t\t\t\t\t\tif (length == 1) {", "+\t\t\t\t\t\t\t// if only one potential match, a file name environment costs too much,", "+\t\t\t\t\t\t\t// so use the existing searchable  environment wich will populate the java model", "+\t\t\t\t\t\t\t// only for this potential match and its required types.", "+\t\t\t\t\t\t\tif (this.nameEnvironment != null) { // cleanup", "+\t\t\t\t\t\t\t\tthis.nameEnvironment.cleanup();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.nameEnvironment = javaProject.getSearchableNameEnvironment();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.initializeNameEnvironment(javaProject);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthis.initialize(javaProject);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0eb96c98a227d6073c36cd047cc34e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "a6829de4e3db7f328203e4f515f45bdc76ef3eb6", "commitAfterChange": "458d6ecb95c70f1df88b46b781028646894448a8", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " public void initialize(JavaProject project, int possibleMatchSize) throws JavaModelException", "signatureAfterChange": " public void initialize(JavaProject project, int possibleMatchSize) throws JavaModelException", "diff": ["-\t// if only one possible match, a file name environment costs too much,", "-\t// so use the existing searchable  environment which will populate the java model", "-\t// only for this possible match and its required types.", "-\tthis.nameEnvironment = possibleMatchSize == 1", "-\t\t? (INameEnvironment) searchableEnvironment", "-\t\t: (INameEnvironment) new JavaSearchNameEnvironment(project, this.workingCopies);", "+\tthis.nameEnvironment = new JavaSearchNameEnvironment(project, this.workingCopies);", "+\tif (this.pattern.focus != null)  ", "+\t\t((JavaSearchNameEnvironment) this.nameEnvironment).addProjectClassPath((JavaProject) this.pattern.focus.getJavaProject());"]}], "num": 39676}
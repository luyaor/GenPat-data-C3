{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9ed7c1fa2b749647475b4835cdce416", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a6a119f432002d817b2219b806a2e9f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "7bf89e29c34a348a2ed388f7cdb6c1016941cf61", "commitAfterChange": "cd5adcef3921beea7df4f6703ab58225bdb4ec39", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic boolean visit(AnnotationTypeDeclaration annotationTypeDeclaration, \t\t\tCompilationUnitScope scope)", "signatureAfterChange": " \tpublic boolean visit(ArrayInitializer arrayInitializer, BlockScope scope)", "diff": ["-\t}", "-\tpublic boolean visit(AnnotationTypeDeclaration annotationTypeDeclaration,", "-\t\t\tCompilationUnitScope scope) {", "-\t\tformat(annotationTypeDeclaration);", "-\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbb3031c948dae202a1929e4e172b226", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " \tpublic boolean visit(Initializer initializer, MethodScope scope)", "signatureAfterChange": " \tpublic boolean visit(EnumDeclaration enumDeclaration, BlockScope scope)", "diff": ["+\t}", "+\tpublic boolean visit(EnumDeclaration enumDeclaration, BlockScope scope) {", "+        /*", "+         * Print comments to get proper line number", "+         */", "+        this.scribe.printComment();", "+        final int line = this.scribe.line; ", "+        ", "+        this.scribe.printModifiers(enumDeclaration.annotations, this);", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameenum, true); ", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameIdentifier, true); ", "+", "+\t\t/* ", "+\t\t * Super Interfaces ", "+\t\t */", "+\t\tfinal TypeReference[] superInterfaces = enumDeclaration.superInterfaces;", "+\t\tif (superInterfaces != null) {", "+\t\t\tint superInterfaceLength = superInterfaces.length;", "+\t\t\tAlignment interfaceAlignment =this.scribe.createAlignment(", "+\t\t\t\t\t\"superInterfaces\",//$NON-NLS-1$", "+\t\t\t\t\tthis.preferences.alignment_for_superinterfaces_in_enum_declaration,", "+\t\t\t\t\tsuperInterfaceLength+1,  // implements token is first fragment", "+\t\t\t\t\tthis.scribe.scanner.currentPosition);", "+\t\t\tthis.scribe.enterAlignment(interfaceAlignment);", "+\t\t\tboolean ok = false;", "+\t\t\tdo {", "+\t\t\t\ttry {", "+\t\t\t\t\tthis.scribe.alignFragment(interfaceAlignment, 0);", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameimplements, true);", "+\t\t\t\t\tfor (int i = 0; i < superInterfaceLength; i++) {", "+\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_superinterfaces);", "+\t\t\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\t\t\tthis.scribe.alignFragment(interfaceAlignment, i + 1);", "+\t\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_superinterfaces) {", "+\t\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tsuperInterfaces[i].traverse(this, scope);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.scribe.alignFragment(interfaceAlignment, i + 1);", "+\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t\tsuperInterfaces[i].traverse(this, scope);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tok = true;", "+\t\t\t\t} catch (AlignmentException e) {", "+\t\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t\t}", "+\t\t\t} while (!ok);", "+\t\t\tthis.scribe.exitAlignment(interfaceAlignment, true);", "+\t\t}", "+", "+\t\t/*", "+\t\t * Type body", "+\t\t */", "+\t\tString enum_declaration_brace = this.preferences.brace_position_for_enum_declaration;", "+", "+        formatLeftCurlyBrace(line, enum_declaration_brace);", "+\t\tformatTypeOpeningBrace(enum_declaration_brace, this.preferences.insert_space_before_opening_brace_in_enum_declaration, enumDeclaration);", "+\t\t", "+\t\tif (this.preferences.indent_body_declarations_compare_to_type_header) {", "+\t\t\tthis.scribe.indent();", "+\t\t}", "+", "+\t\tEnumConstant[] enumConstants = enumDeclaration.enumConstants;", "+\t\tif (enumConstants != null) {", "+\t\t\tint length = enumConstants.length;", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tif (i < length - 1) {", "+\t\t\t\t\tenumConstants[i].traverse(this, enumDeclaration.scope);\t\t\t\t\t", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_enum_declarations);", "+\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_enum_declarations) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t} else if (isComma()) {", "+\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_enum_declarations);", "+\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_enum_declarations) {", "+\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "+\t\t\tthis.scribe.printTrailingComment();", "+\t\t} else {", "+\t\t\tthis.scribe.printNewLine();", "+\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameSEMICOLON, this.preferences.insert_space_before_semicolon);", "+\t\t\tthis.scribe.printTrailingComment();", "+\t\t}", "+\t\t", "+\t\tformatTypeMembers(enumDeclaration);", "+", "+\t\tthis.scribe.printComment();", "+\t\t", "+\t\tif (this.preferences.indent_body_declarations_compare_to_enum_declaration_header) {", "+\t\t\tthis.scribe.unIndent();", "+\t\t}", "+\t\t", "+\t\tif (this.preferences.insert_new_line_in_empty_enum_declaration) {", "+\t\t\tthis.scribe.printNewLine();", "+\t\t}", "+\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);", "+\t\tthis.scribe.printTrailingComment();", "+\t\tif (enum_declaration_brace.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "+\t\t\tthis.scribe.unIndent();", "+\t\t}", "+\t\tif (hasComments()) {", "+\t\t\tthis.scribe.printNewLine();", "+\t\t}", "+\t\treturn false;", "+\t}"]}], "num": 36273}
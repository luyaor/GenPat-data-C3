{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "416d4ddc6b238d5cfe58fd74fa75d753", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "004b6692433e0e6ee1e7d607078048b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "09eb4e140e56d67f0ba07a1283f7afed03f5d473", "commitAfterChange": "193042cfcc3e974ade1d4da172a703fabd891361", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " private void writeDocumentNumbers(int[] documentNumbers, FileOutputStream stream) throws IOException", "signatureAfterChange": " private void writeDocumentNumbers(int[] documentNumbers, FileOutputStream stream) throws IOException", "diff": ["-\tint idx = this.bufferIndex;", "+\tint start = 0;", "-\t\t\tthis.bufferIndex += length;", "-\t\t\tif (this.bufferIndex < BUFFER_WRITE_SIZE) {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) documentNumbers[i];", "+\t\t\twhile ((this.bufferIndex + length - start) >= BUFFER_WRITE_SIZE) {", "+\t\t\t\t// when documentNumbers is large, write BUFFER_WRITE_SIZE parts & fall thru to write the last part", "+\t\t\t\tint bytesLeft = BUFFER_WRITE_SIZE - this.bufferIndex;", "+\t\t\t\tfor (int i=0; i < bytesLeft; i++) {", "+\t\t\t\t\tthis.streamBuffer[this.bufferIndex++] = (byte) documentNumbers[start++];", "-\t\t\t} else {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) documentNumbers[i];", "-\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tstream.write(this.streamBuffer, 0, this.bufferIndex);", "+\t\t\t\tthis.bufferIndex = 0;", "+\t\t\t}", "+\t\t\twhile (start < length) {", "+\t\t\t\tthis.streamBuffer[this.bufferIndex++] = (byte) documentNumbers[start++];", "-\t\t\tint size = length << 1;", "-\t\t\tthis.bufferIndex += size;", "-\t\t\tif (this.bufferIndex < BUFFER_WRITE_SIZE) {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (documentNumbers[i] >> 8);", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) documentNumbers[i];", "+\t\t\twhile ((this.bufferIndex + ((length - start) * 2)) >= BUFFER_WRITE_SIZE) {", "+\t\t\t\t// when documentNumbers is large, write BUFFER_WRITE_SIZE parts & fall thru to write the last part", "+\t\t\t\tint shortsLeft = (BUFFER_WRITE_SIZE - this.bufferIndex) / 2;", "+\t\t\t\tfor (int i=0; i < shortsLeft; i++) {", "+\t\t\t\t\tthis.streamBuffer[this.bufferIndex++] = (byte) (documentNumbers[start] >> 8);", "+\t\t\t\t\tthis.streamBuffer[this.bufferIndex++] = (byte) documentNumbers[start++];", "-\t\t\t} else {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (documentNumbers[i] >> 8);", "-\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) documentNumbers[i];", "-\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tstream.write(this.streamBuffer, 0, this.bufferIndex);", "+\t\t\t\tthis.bufferIndex = 0;", "-\t\t\tthis.streamEnd += size;", "+\t\t\twhile (start < length) {", "+\t\t\t\tthis.streamBuffer[this.bufferIndex++] = (byte) (documentNumbers[start] >> 8);", "+\t\t\t\tthis.streamBuffer[this.bufferIndex++] = (byte) documentNumbers[start++];", "+\t\t\t}", "+\t\t\tthis.streamEnd += length * 2;", "-\t\t\tsize = length << 2;", "-\t\t\tthis.bufferIndex += size;", "-\t\t\tif (this.bufferIndex < BUFFER_WRITE_SIZE) {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tint number = documentNumbers[i];", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 24);", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 16);", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 8);", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) number;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tint number = documentNumbers[i];", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 24);", "-\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 16);", "-\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 8);", "-\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.streamBuffer[idx++] = (byte) number;", "-\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "-\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "-\t\t\t\t\t\tidx = 0;", "-\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\twhile (start < length) {", "+\t\t\t\twriteStreamInt(stream, documentNumbers[start++]);", "-\t\t\tthis.streamEnd += size;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6db31092600cd99fca42184fcab681c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "bb811cafdba11489b23b9c8cd6c46c237bf0db24", "commitAfterChange": "2a64f816a9e1e382be3c6f39875e5c587a7235c0", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 29, "signatureBeforeChange": " private void writeDocumentNumbers(int[] documentNumbers, DataOutputStream stream) throws IOException", "signatureAfterChange": " private void writeDocumentNumbers(int[] documentNumbers, FileOutputStream stream) throws IOException", "diff": ["-private void writeDocumentNumbers(int[] documentNumbers, DataOutputStream stream) throws IOException {", "+private void writeDocumentNumbers(int[] documentNumbers, FileOutputStream stream) throws IOException {", "-\tstream.writeInt(length);", "+\twriteStreamInt(stream, length);", "+\tint idx = this.bufferIndex;", "-\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\tstream.writeByte(documentNumbers[i]);", "+\t\t\tthis.bufferIndex += length;", "+\t\t\tif (this.bufferIndex < BUFFER_WRITE_SIZE) {", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) documentNumbers[i];", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) documentNumbers[i];", "+\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "+\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.streamEnd += length;", "-\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\tstream.writeShort(documentNumbers[i]);", "+\t\t\tint size = length << 1;", "+\t\t\tthis.bufferIndex += size;", "+\t\t\tif (this.bufferIndex < BUFFER_WRITE_SIZE) {", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (documentNumbers[i] >> 8);", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) documentNumbers[i];", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (documentNumbers[i] >> 8);", "+\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "+\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) documentNumbers[i];", "+\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "+\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.streamEnd += size;", "-\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\tstream.writeInt(documentNumbers[i]);", "+\t\t\tsize = length << 2;", "+\t\t\tthis.bufferIndex += size;", "+\t\t\tif (this.bufferIndex < BUFFER_WRITE_SIZE) {", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tint number = documentNumbers[i];", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 24);", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 16);", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 8);", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) number;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tint number = documentNumbers[i];", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 24);", "+\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "+\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 16);", "+\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "+\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) (number >> 8);", "+\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "+\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.streamBuffer[idx++] = (byte) number;", "+\t\t\t\t\tif (idx == BUFFER_WRITE_SIZE) { // write bytes array on stream if buffer is full", "+\t\t\t\t\t\tstream.write(this.streamBuffer, 0, BUFFER_WRITE_SIZE);", "+\t\t\t\t\t\tidx = 0;", "+\t\t\t\t\t\tthis.bufferIndex -= BUFFER_WRITE_SIZE;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.streamEnd += size;"]}], "num": 7778}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cd9961018173f68bd10d7f420b215b4c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3baee0ae0b47a41abe5c57f35f01c3ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "a1a6d45179940b02582a205f563838be0a6dc046", "commitAfterChange": "e96689e0f6202301820331bad4a76685b7be9aca", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \tprotected void elementRemoved(Openable element, IResourceDelta delta)", "signatureAfterChange": "\r \tprotected void elementRemoved(Openable element, IResourceDelta delta)", "diff": ["-\t\t\tif (res instanceof IFile) {\r", "-\t\t\t\tmovedToRes = res.getWorkspace().getRoot().getFile(movedToPath);\r", "-\t\t\t} else {\r", "-\t\t\t\tmovedToRes = res.getWorkspace().getRoot().getFolder(movedToPath);\r", "+\t\t\tswitch (res.getType()) {\r", "+\t\t\t\tcase IResource.PROJECT:\r", "+\t\t\t\t\tmovedToRes = res.getWorkspace().getRoot().getProject(movedToPath.lastSegment());\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase IResource.FOLDER:\r", "+\t\t\t\t\tmovedToRes = res.getWorkspace().getRoot().getFolder(movedToPath);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase IResource.FILE:\r", "+\t\t\t\t\tmovedToRes = res.getWorkspace().getRoot().getFile(movedToPath);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tdefault:\r", "+\t\t\t\t\treturn;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e5f40c4cf4ce925886f897d40a13600", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HandleFactory.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tprivate IJavaElement createElement(Scope scope, int elementPosition, ICompilationUnit unit, HashSet existingElements, HashMap knownScopes)", "signatureAfterChange": " \tprivate IJavaElement createElement(Scope scope, int elementPosition, ICompilationUnit unit, HashSet existingElements, HashMap knownScopes)", "diff": ["-\t\t\t\t\t\t\tif (field.isField()) {", "-\t\t\t\t\t\t\t\tnewElement = parentType.getField(new String(field.name));", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tnewElement = parentType.getInitializer(occurenceCount);", "+\t\t\t\t\t\t\tswitch (field.getKind()) {", "+\t\t\t\t\t\t\t\tcase AbstractVariableDeclaration.FIELD :", "+\t\t\t\t\t\t\t\t\tnewElement = parentType.getField(new String(field.name));", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase AbstractVariableDeclaration.INITIALIZER :", "+\t\t\t\t\t\t\t\t\tnewElement = parentType.getInitializer(occurenceCount);", "+\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t} else if (!field.isField()) {", "+\t\t\t\t\t\t} else if (field.getKind() == AbstractVariableDeclaration.INITIALIZER) {"]}], "num": 45454}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55eb1abaeeba53b5a3578bd81be7fe81", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16885a31137e1a8c0dbbecd140a72539", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "a283419708f25fe1336a00a0cfc8b4d7ffdb4ea6", "commitAfterChange": "78df60c293834e15ab5138d21694328394cc129c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate void resolveThrowsTags(MethodScope methScope)", "signatureAfterChange": " \tprivate void resolveThrowsTags(MethodScope methScope, boolean reportMissing)", "diff": ["-\tprivate void resolveThrowsTags(MethodScope methScope) {", "+\tprivate void resolveThrowsTags(MethodScope methScope, boolean reportMissing) {", "-\t\t\tfor (int i = 0; i < thrownExceptionSize; i++) {", "-\t\t\t\tTypeReference typeRef = md.thrownExceptions[i];", "-\t\t\t\tif (typeRef.resolvedType != null) { // flag only valid class name", "-\t\t\t\t\tmethScope.problemReporter().javadocMissingThrowsTag(typeRef);", "+\t\t\tif (reportMissing) {", "+\t\t\t\tfor (int i = 0; i < thrownExceptionSize; i++) {", "+\t\t\t\t\tTypeReference typeRef = md.thrownExceptions[i];", "+\t\t\t\t\tif (typeRef.resolvedType != null) { // flag only valid class name", "+\t\t\t\t\t\tmethScope.problemReporter().javadocMissingThrowsTag(typeRef);", "+\t\t\t\t\t}", "-\t\t\tfor (int i = 0; i < thrownExceptionSize; i++) {", "-\t\t\t\tTypeReference exception = md.thrownExceptions[i];", "-\t\t\t\tboolean found = false;", "-\t\t\t\tfor (int j = 0; j < maxRef && !found; j++) {", "-\t\t\t\t\tif (typeReferences[j] != null) {", "-\t\t\t\t\t\tTypeBinding typeBinding = typeReferences[j].resolvedType;", "-\t\t\t\t\t\tif (exception.resolvedType == typeBinding) {", "-\t\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\t\ttypeReferences[j] = null;", "+\t\t\tif (reportMissing) {", "+\t\t\t\tfor (int i = 0; i < thrownExceptionSize; i++) {", "+\t\t\t\t\tTypeReference exception = md.thrownExceptions[i];", "+\t\t\t\t\tboolean found = false;", "+\t\t\t\t\tfor (int j = 0; j < maxRef && !found; j++) {", "+\t\t\t\t\t\tif (typeReferences[j] != null) {", "+\t\t\t\t\t\t\tTypeBinding typeBinding = typeReferences[j].resolvedType;", "+\t\t\t\t\t\t\tif (exception.resolvedType == typeBinding) {", "+\t\t\t\t\t\t\t\tfound = true;", "+\t\t\t\t\t\t\t\ttypeReferences[j] = null;", "+\t\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (!found) {", "-\t\t\t\t\tif (exception.resolvedType != null) { // flag only valid class name", "-\t\t\t\t\t\tmethScope.problemReporter().javadocMissingThrowsTag(exception);", "+\t\t\t\t\tif (!found) {", "+\t\t\t\t\t\tif (exception.resolvedType != null) { // flag only valid class name", "+\t\t\t\t\t\t\tmethScope.problemReporter().javadocMissingThrowsTag(exception);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a3cce6e583d3ab634e73c0978e23382", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "a283419708f25fe1336a00a0cfc8b4d7ffdb4ea6", "commitAfterChange": "78df60c293834e15ab5138d21694328394cc129c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate void resolveParamTags(MethodScope methScope)", "signatureAfterChange": " \tprivate void resolveParamTags(MethodScope methScope, boolean reportMissing)", "diff": ["-\tprivate void resolveParamTags(MethodScope methScope) {", "+\tprivate void resolveParamTags(MethodScope methScope, boolean reportMissing) {", "-\t\t\tfor (int i = 0; i < argumentsSize; i++) {", "-\t\t\t\tArgument arg = md.arguments[i];", "-\t\t\t\tmethScope.problemReporter().javadocMissingParamTag(arg);", "+\t\t\tif (reportMissing) {", "+\t\t\t\tfor (int i = 0; i < argumentsSize; i++) {", "+\t\t\t\t\tArgument arg = md.arguments[i];", "+\t\t\t\t\tmethScope.problemReporter().javadocMissingParamTag(arg);", "+\t\t\t\t}", "-\t\t\tfor (int i = 0; i < argumentsSize; i++) {", "-\t\t\t\tArgument arg = md.arguments[i];", "-\t\t\t\tboolean found = false;", "-\t\t\t\tfor (int j = 0; j < maxBindings && !found; j++) {", "-\t\t\t\t\tLocalVariableBinding binding = bindings[j];", "-\t\t\t\t\tif (arg.binding == binding) {", "-\t\t\t\t\t\tfound = true;", "+\t\t\tif (reportMissing) {", "+\t\t\t\tfor (int i = 0; i < argumentsSize; i++) {", "+\t\t\t\t\tArgument arg = md.arguments[i];", "+\t\t\t\t\tboolean found = false;", "+\t\t\t\t\tfor (int j = 0; j < maxBindings && !found; j++) {", "+\t\t\t\t\t\tLocalVariableBinding binding = bindings[j];", "+\t\t\t\t\t\tif (arg.binding == binding) {", "+\t\t\t\t\t\t\tfound = true;", "+\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (!found) {", "-\t\t\t\t\tmethScope.problemReporter().javadocMissingParamTag(arg);", "+\t\t\t\t\tif (!found) {", "+\t\t\t\t\t\tmethScope.problemReporter().javadocMissingParamTag(arg);", "+\t\t\t\t\t}"]}], "num": 24927}
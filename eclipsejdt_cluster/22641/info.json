{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "184497532f4a0c813125f4456c09a911", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0269185b92e3d4529b269cf7a247b104", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NameEnvironmentWithProgress.java", "commitBeforeChange": "9359ba8e380aaa366dda637da6a8c80a24875b62", "commitAfterChange": "c39467a5717299e0743e249af795ac84f7541935", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic NameEnvironmentAnswer findType(char[] typeName, char[][] packageName)", "signatureAfterChange": " \tpublic NameEnvironmentAnswer findType(char[] typeName, char[][] packageName)", "diff": ["-\t\treturn super.findType(typeName, packageName);", "+\t\tNameEnvironmentAnswer answer = super.findType(typeName, packageName);", "+\t\tif (answer == null) {", "+\t\t\tNameEnvironmentAnswer suggestedAnswer = null;", "+\t\t\tString qualifiedPackageName = new String(CharOperation.concatWith(packageName, '/'));", "+\t\t\tString qualifiedTypeName = new String(CharOperation.concatWith(packageName, typeName, '/'));", "+\t\t\tString qualifiedBinaryFileName = qualifiedTypeName + SUFFIX_STRING_class;", "+\t\t\tfor (int i = 0, length = this.classpaths.length; i < length; i++) {", "+\t\t\t\tif (!(this.classpaths[i] instanceof ClasspathDirectory)) continue;", "+\t\t\t\tClasspathDirectory classpathDirectory = (ClasspathDirectory) this.classpaths[i];", "+\t\t\t\tanswer = classpathDirectory.findSecondaryInClass(typeName, qualifiedPackageName, qualifiedBinaryFileName);", "+\t\t\t\tif (answer != null) {", "+\t\t\t\t\tif (!answer.ignoreIfBetter()) {", "+\t\t\t\t\t\tif (answer.isBetter(suggestedAnswer))", "+\t\t\t\t\t\t\treturn answer;", "+\t\t\t\t\t} else if (answer.isBetter(suggestedAnswer))", "+\t\t\t\t\t\t// remember suggestion and keep looking", "+\t\t\t\t\t\tsuggestedAnswer = answer;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn answer;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bc926ebb091c8f69ed65e5167ce2e5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "de8634c6596eba9d498f21b3f06a4d952c468878", "commitAfterChange": "ed3ff9a36eb2db48659e462eacb164d15ad7a872", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic IType findType(String typeName, String packageName, boolean partialMatch, int acceptFlags, boolean considerSecondaryTypes, boolean waitForIndexes, IProgressMonitor monitor)", "signatureAfterChange": " \tpublic Answer findType( \t\t\tString typeName,  \t\t\tString packageName,  \t\t\tboolean partialMatch,  \t\t\tint acceptFlags,  \t\t\tboolean considerSecondaryTypes,  \t\t\tboolean waitForIndexes,  \t\t\tboolean checkRestrictions, \t\t\tIProgressMonitor monitor)", "diff": ["-\tpublic IType findType(String typeName, String packageName, boolean partialMatch, int acceptFlags, boolean considerSecondaryTypes, boolean waitForIndexes, IProgressMonitor monitor) {", "+\tpublic Answer findType(", "+\t\t\tString typeName, ", "+\t\t\tString packageName, ", "+\t\t\tboolean partialMatch, ", "+\t\t\tint acceptFlags, ", "+\t\t\tboolean considerSecondaryTypes, ", "+\t\t\tboolean waitForIndexes, ", "+\t\t\tboolean checkRestrictions,", "+\t\t\tIProgressMonitor monitor) {", "+\t\tAnswer suggestedAnswer = null;", "-\t\t\t\treturn type;", "+\t\t\t\tAccessRestriction accessRestriction = null;", "+\t\t\t\tif (checkRestrictions) {", "+\t\t\t\t\taccessRestriction = getViolatedRestriction(typeName, packageName, type, accessRestriction);", "+\t\t\t\t}", "+\t\t\t\tAnswer answer = new Answer(type, accessRestriction);", "+\t\t\t\tif (!answer.ignoreIfBetter()) {", "+\t\t\t\t\tif (answer.isBetter(suggestedAnswer))", "+\t\t\t\t\t\treturn answer;", "+\t\t\t\t} else if (answer.isBetter(suggestedAnswer))", "+\t\t\t\t\t// remember suggestion and keep looking", "+\t\t\t\t\tsuggestedAnswer = answer;", "+\t\tif (suggestedAnswer != null)", "+\t\t\t// no better answer was found", "+\t\t\treturn suggestedAnswer;", "-\t\treturn type;", "+\t\treturn type == null ? null : new Answer(type, null);", "+\t}"]}], "num": 22641}
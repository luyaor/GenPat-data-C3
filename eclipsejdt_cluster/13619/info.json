{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d11e8e90a92ae62c984641315475395", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "058ed5a78615672d766d1b5bad03b15d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/Constant.java", "commitBeforeChange": "7111a90a9313c88b41ed63cd6da2db497c5fcfb7", "commitAfterChange": "b1e8bf37aa256ab5bf86ee13594009ed0a13e10a", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tpublic static final Constant computeConstantOperationXOR(Constant left, int leftId, Constant right, int rightId)", "signatureAfterChange": " \t \tpublic static final Constant computeConstantOperationXOR(Constant left, int leftId, Constant right, int rightId)", "diff": ["-\t\t\tcase T_boolean :\t\treturn Constant.fromValue(left.booleanValue() ^ right.booleanValue());", "+\t\t\tcase T_boolean :\t\treturn BooleanConstant.fromValue(left.booleanValue() ^ right.booleanValue());", "-\t\t\t\t\tcase T_char :\treturn Constant.fromValue(left.charValue() ^ right.charValue());", "-\t\t\t\t\tcase T_byte:\treturn Constant.fromValue(left.charValue() ^ right.byteValue());", "-\t\t\t\t\tcase T_short:\treturn Constant.fromValue(left.charValue() ^ right.shortValue());", "-\t\t\t\t\tcase T_int:\t\treturn Constant.fromValue(left.charValue() ^ right.intValue());", "-\t\t\t\t\tcase T_long:\treturn Constant.fromValue(left.charValue() ^ right.longValue());", "+\t\t\t\t\tcase T_char :\treturn IntConstant.fromValue(left.charValue() ^ right.charValue());", "+\t\t\t\t\tcase T_byte:\treturn IntConstant.fromValue(left.charValue() ^ right.byteValue());", "+\t\t\t\t\tcase T_short:\treturn IntConstant.fromValue(left.charValue() ^ right.shortValue());", "+\t\t\t\t\tcase T_int:\t\treturn IntConstant.fromValue(left.charValue() ^ right.intValue());", "+\t\t\t\t\tcase T_long:\treturn LongConstant.fromValue(left.charValue() ^ right.longValue());", "-\t\t\t\t\tcase T_char :\treturn Constant.fromValue(left.byteValue() ^ right.charValue());", "-\t\t\t\t\tcase T_byte:\treturn Constant.fromValue(left.byteValue() ^ right.byteValue());", "-\t\t\t\t\tcase T_short:\treturn Constant.fromValue(left.byteValue() ^ right.shortValue());", "-\t\t\t\t\tcase T_int:\t\treturn Constant.fromValue(left.byteValue() ^ right.intValue());", "-\t\t\t\t\tcase T_long:\treturn Constant.fromValue(left.byteValue() ^ right.longValue());", "+\t\t\t\t\tcase T_char :\treturn IntConstant.fromValue(left.byteValue() ^ right.charValue());", "+\t\t\t\t\tcase T_byte:\treturn IntConstant.fromValue(left.byteValue() ^ right.byteValue());", "+\t\t\t\t\tcase T_short:\treturn IntConstant.fromValue(left.byteValue() ^ right.shortValue());", "+\t\t\t\t\tcase T_int:\t\treturn IntConstant.fromValue(left.byteValue() ^ right.intValue());", "+\t\t\t\t\tcase T_long:\treturn LongConstant.fromValue(left.byteValue() ^ right.longValue());", "-\t\t\t\t\tcase T_char :\treturn Constant.fromValue(left.shortValue() ^ right.charValue());", "-\t\t\t\t\tcase T_byte:\treturn Constant.fromValue(left.shortValue() ^ right.byteValue());", "-\t\t\t\t\tcase T_short:\treturn Constant.fromValue(left.shortValue() ^ right.shortValue());", "-\t\t\t\t\tcase T_int:\t\treturn Constant.fromValue(left.shortValue() ^ right.intValue());", "-\t\t\t\t\tcase T_long:\treturn Constant.fromValue(left.shortValue() ^ right.longValue());", "+\t\t\t\t\tcase T_char :\treturn IntConstant.fromValue(left.shortValue() ^ right.charValue());", "+\t\t\t\t\tcase T_byte:\treturn IntConstant.fromValue(left.shortValue() ^ right.byteValue());", "+\t\t\t\t\tcase T_short:\treturn IntConstant.fromValue(left.shortValue() ^ right.shortValue());", "+\t\t\t\t\tcase T_int:\t\treturn IntConstant.fromValue(left.shortValue() ^ right.intValue());", "+\t\t\t\t\tcase T_long:\treturn LongConstant.fromValue(left.shortValue() ^ right.longValue());", "-\t\t\t\t\tcase T_char :\treturn Constant.fromValue(left.intValue() ^ right.charValue());", "-\t\t\t\t\tcase T_byte:\treturn Constant.fromValue(left.intValue() ^ right.byteValue());", "-\t\t\t\t\tcase T_short:\treturn Constant.fromValue(left.intValue() ^ right.shortValue());", "-\t\t\t\t\tcase T_int:\t\treturn Constant.fromValue(left.intValue() ^ right.intValue());", "-\t\t\t\t\tcase T_long:\treturn Constant.fromValue(left.intValue() ^ right.longValue());", "+\t\t\t\t\tcase T_char :\treturn IntConstant.fromValue(left.intValue() ^ right.charValue());", "+\t\t\t\t\tcase T_byte:\treturn IntConstant.fromValue(left.intValue() ^ right.byteValue());", "+\t\t\t\t\tcase T_short:\treturn IntConstant.fromValue(left.intValue() ^ right.shortValue());", "+\t\t\t\t\tcase T_int:\t\treturn IntConstant.fromValue(left.intValue() ^ right.intValue());", "+\t\t\t\t\tcase T_long:\treturn LongConstant.fromValue(left.intValue() ^ right.longValue());", "-\t\t\t\t\tcase T_char :\treturn Constant.fromValue(left.longValue() ^ right.charValue());", "-\t\t\t\t\tcase T_byte:\treturn Constant.fromValue(left.longValue() ^ right.byteValue());", "-\t\t\t\t\tcase T_short:\treturn Constant.fromValue(left.longValue() ^ right.shortValue());", "-\t\t\t\t\tcase T_int:\t\treturn Constant.fromValue(left.longValue() ^ right.intValue());", "-\t\t\t\t\tcase T_long:\treturn Constant.fromValue(left.longValue() ^ right.longValue());", "+\t\t\t\t\tcase T_char :\treturn LongConstant.fromValue(left.longValue() ^ right.charValue());", "+\t\t\t\t\tcase T_byte:\treturn LongConstant.fromValue(left.longValue() ^ right.byteValue());", "+\t\t\t\t\tcase T_short:\treturn LongConstant.fromValue(left.longValue() ^ right.shortValue());", "+\t\t\t\t\tcase T_int:\t\treturn LongConstant.fromValue(left.longValue() ^ right.intValue());", "+\t\t\t\t\tcase T_long:\treturn LongConstant.fromValue(left.longValue() ^ right.longValue());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e01df47246ba1d7998646c81c6ac56e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/Constant.java", "commitBeforeChange": "7111a90a9313c88b41ed63cd6da2db497c5fcfb7", "commitAfterChange": "b1e8bf37aa256ab5bf86ee13594009ed0a13e10a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic static final Constant computeConstantOperationAND(Constant left, int leftId, Constant right, int rightId)", "signatureAfterChange": " \t \tpublic static final Constant computeConstantOperationAND(Constant left, int leftId, Constant right, int rightId)", "diff": ["-\t\t\tcase T_boolean :\t\treturn Constant.fromValue(left.booleanValue() & right.booleanValue());", "+\t\t\tcase T_boolean :\t\treturn BooleanConstant.fromValue(left.booleanValue() & right.booleanValue());", "-\t\t\t\t\tcase T_char :\treturn Constant.fromValue(left.charValue() & right.charValue());", "-\t\t\t\t\tcase T_byte:\treturn Constant.fromValue(left.charValue() & right.byteValue());", "-\t\t\t\t\tcase T_short:\treturn Constant.fromValue(left.charValue() & right.shortValue());", "-\t\t\t\t\tcase T_int:\t\treturn Constant.fromValue(left.charValue() & right.intValue());", "-\t\t\t\t\tcase T_long:\treturn Constant.fromValue(left.charValue() & right.longValue());", "+\t\t\t\t\tcase T_char :\treturn IntConstant.fromValue(left.charValue() & right.charValue());", "+\t\t\t\t\tcase T_byte:\treturn IntConstant.fromValue(left.charValue() & right.byteValue());", "+\t\t\t\t\tcase T_short:\treturn IntConstant.fromValue(left.charValue() & right.shortValue());", "+\t\t\t\t\tcase T_int:\t\treturn IntConstant.fromValue(left.charValue() & right.intValue());", "+\t\t\t\t\tcase T_long:\treturn LongConstant.fromValue(left.charValue() & right.longValue());", "-\t\t\t\t\tcase T_char :\treturn Constant.fromValue(left.byteValue() & right.charValue());", "-\t\t\t\t\tcase T_byte:\treturn Constant.fromValue(left.byteValue() & right.byteValue());", "-\t\t\t\t\tcase T_short:\treturn Constant.fromValue(left.byteValue() & right.shortValue());", "-\t\t\t\t\tcase T_int:\t\treturn Constant.fromValue(left.byteValue() & right.intValue());", "-\t\t\t\t\tcase T_long:\treturn Constant.fromValue(left.byteValue() & right.longValue());", "+\t\t\t\t\tcase T_char :\treturn IntConstant.fromValue(left.byteValue() & right.charValue());", "+\t\t\t\t\tcase T_byte:\treturn IntConstant.fromValue(left.byteValue() & right.byteValue());", "+\t\t\t\t\tcase T_short:\treturn IntConstant.fromValue(left.byteValue() & right.shortValue());", "+\t\t\t\t\tcase T_int:\t\treturn IntConstant.fromValue(left.byteValue() & right.intValue());", "+\t\t\t\t\tcase T_long:\treturn LongConstant.fromValue(left.byteValue() & right.longValue());", "-\t\t\t\t\tcase T_char :\treturn Constant.fromValue(left.shortValue() & right.charValue());", "-\t\t\t\t\tcase T_byte:\treturn Constant.fromValue(left.shortValue() & right.byteValue());", "-\t\t\t\t\tcase T_short:\treturn Constant.fromValue(left.shortValue() & right.shortValue());", "-\t\t\t\t\tcase T_int:\t\treturn Constant.fromValue(left.shortValue() & right.intValue());", "-\t\t\t\t\tcase T_long:\treturn Constant.fromValue(left.shortValue() & right.longValue());", "+\t\t\t\t\tcase T_char :\treturn IntConstant.fromValue(left.shortValue() & right.charValue());", "+\t\t\t\t\tcase T_byte:\treturn IntConstant.fromValue(left.shortValue() & right.byteValue());", "+\t\t\t\t\tcase T_short:\treturn IntConstant.fromValue(left.shortValue() & right.shortValue());", "+\t\t\t\t\tcase T_int:\t\treturn IntConstant.fromValue(left.shortValue() & right.intValue());", "+\t\t\t\t\tcase T_long:\treturn LongConstant.fromValue(left.shortValue() & right.longValue());", "-\t\t\t\t\tcase T_char :\treturn Constant.fromValue(left.intValue() & right.charValue());", "-\t\t\t\t\tcase T_byte:\treturn Constant.fromValue(left.intValue() & right.byteValue());", "-\t\t\t\t\tcase T_short:\treturn Constant.fromValue(left.intValue() & right.shortValue());", "-\t\t\t\t\tcase T_int:\t\treturn Constant.fromValue(left.intValue() & right.intValue());", "-\t\t\t\t\tcase T_long:\treturn Constant.fromValue(left.intValue() & right.longValue());", "+\t\t\t\t\tcase T_char :\treturn IntConstant.fromValue(left.intValue() & right.charValue());", "+\t\t\t\t\tcase T_byte:\treturn IntConstant.fromValue(left.intValue() & right.byteValue());", "+\t\t\t\t\tcase T_short:\treturn IntConstant.fromValue(left.intValue() & right.shortValue());", "+\t\t\t\t\tcase T_int:\t\treturn IntConstant.fromValue(left.intValue() & right.intValue());", "+\t\t\t\t\tcase T_long:\treturn LongConstant.fromValue(left.intValue() & right.longValue());", "-\t\t\t\t\tcase T_char :\treturn Constant.fromValue(left.longValue() & right.charValue());", "-\t\t\t\t\tcase T_byte:\treturn Constant.fromValue(left.longValue() & right.byteValue());", "-\t\t\t\t\tcase T_short:\treturn Constant.fromValue(left.longValue() & right.shortValue());", "-\t\t\t\t\tcase T_int:\t\treturn Constant.fromValue(left.longValue() & right.intValue());", "-\t\t\t\t\tcase T_long:\treturn Constant.fromValue(left.longValue() & right.longValue());", "+\t\t\t\t\tcase T_char :\treturn LongConstant.fromValue(left.longValue() & right.charValue());", "+\t\t\t\t\tcase T_byte:\treturn LongConstant.fromValue(left.longValue() & right.byteValue());", "+\t\t\t\t\tcase T_short:\treturn LongConstant.fromValue(left.longValue() & right.shortValue());", "+\t\t\t\t\tcase T_int:\t\treturn LongConstant.fromValue(left.longValue() & right.intValue());", "+\t\t\t\t\tcase T_long:\treturn LongConstant.fromValue(left.longValue() & right.longValue());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b65073a52da7f14a7156ba50e59ec91d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/Constant.java", "commitBeforeChange": "7111a90a9313c88b41ed63cd6da2db497c5fcfb7", "commitAfterChange": "b1e8bf37aa256ab5bf86ee13594009ed0a13e10a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tpublic static final Constant computeConstantOperationOR(Constant left, int leftId, Constant right, int rightId)", "signatureAfterChange": " \t \tpublic static final Constant computeConstantOperationOR(Constant left, int leftId, Constant right, int rightId)", "diff": ["-\t\t\tcase T_boolean :\t\treturn Constant.fromValue(left.booleanValue() | right.booleanValue());", "+\t\t\tcase T_boolean :\t\treturn BooleanConstant.fromValue(left.booleanValue() | right.booleanValue());", "-\t\t\t\t\tcase T_char :\treturn Constant.fromValue(left.charValue() | right.charValue());", "-\t\t\t\t\tcase T_byte:\treturn Constant.fromValue(left.charValue() | right.byteValue());", "-\t\t\t\t\tcase T_short:\treturn Constant.fromValue(left.charValue() | right.shortValue());", "-\t\t\t\t\tcase T_int:\t\treturn Constant.fromValue(left.charValue() | right.intValue());", "-\t\t\t\t\tcase T_long:\treturn Constant.fromValue(left.charValue() | right.longValue());", "+\t\t\t\t\tcase T_char :\treturn IntConstant.fromValue(left.charValue() | right.charValue());", "+\t\t\t\t\tcase T_byte:\treturn IntConstant.fromValue(left.charValue() | right.byteValue());", "+\t\t\t\t\tcase T_short:\treturn IntConstant.fromValue(left.charValue() | right.shortValue());", "+\t\t\t\t\tcase T_int:\t\treturn IntConstant.fromValue(left.charValue() | right.intValue());", "+\t\t\t\t\tcase T_long:\treturn LongConstant.fromValue(left.charValue() | right.longValue());", "-\t\t\t\t\tcase T_char :\treturn Constant.fromValue(left.byteValue() | right.charValue());", "-\t\t\t\t\tcase T_byte:\treturn Constant.fromValue(left.byteValue() | right.byteValue());", "-\t\t\t\t\tcase T_short:\treturn Constant.fromValue(left.byteValue() | right.shortValue());", "-\t\t\t\t\tcase T_int:\t\treturn Constant.fromValue(left.byteValue() | right.intValue());", "-\t\t\t\t\tcase T_long:\treturn Constant.fromValue(left.byteValue() | right.longValue());", "+\t\t\t\t\tcase T_char :\treturn IntConstant.fromValue(left.byteValue() | right.charValue());", "+\t\t\t\t\tcase T_byte:\treturn IntConstant.fromValue(left.byteValue() | right.byteValue());", "+\t\t\t\t\tcase T_short:\treturn IntConstant.fromValue(left.byteValue() | right.shortValue());", "+\t\t\t\t\tcase T_int:\t\treturn IntConstant.fromValue(left.byteValue() | right.intValue());", "+\t\t\t\t\tcase T_long:\treturn LongConstant.fromValue(left.byteValue() | right.longValue());", "-\t\t\t\t\tcase T_char :\treturn Constant.fromValue(left.shortValue() | right.charValue());", "-\t\t\t\t\tcase T_byte:\treturn Constant.fromValue(left.shortValue() | right.byteValue());", "-\t\t\t\t\tcase T_short:\treturn Constant.fromValue(left.shortValue() | right.shortValue());", "-\t\t\t\t\tcase T_int:\t\treturn Constant.fromValue(left.shortValue() | right.intValue());", "-\t\t\t\t\tcase T_long:\treturn Constant.fromValue(left.shortValue() | right.longValue());", "+\t\t\t\t\tcase T_char :\treturn IntConstant.fromValue(left.shortValue() | right.charValue());", "+\t\t\t\t\tcase T_byte:\treturn IntConstant.fromValue(left.shortValue() | right.byteValue());", "+\t\t\t\t\tcase T_short:\treturn IntConstant.fromValue(left.shortValue() | right.shortValue());", "+\t\t\t\t\tcase T_int:\t\treturn IntConstant.fromValue(left.shortValue() | right.intValue());", "+\t\t\t\t\tcase T_long:\treturn LongConstant.fromValue(left.shortValue() | right.longValue());", "-\t\t\t\t\tcase T_char :\treturn Constant.fromValue(left.intValue() | right.charValue());", "-\t\t\t\t\tcase T_byte:\treturn Constant.fromValue(left.intValue() | right.byteValue());", "-\t\t\t\t\tcase T_short:\treturn Constant.fromValue(left.intValue() | right.shortValue());", "-\t\t\t\t\tcase T_int:\t\treturn Constant.fromValue(left.intValue() | right.intValue());", "-\t\t\t\t\tcase T_long:\treturn Constant.fromValue(left.intValue() | right.longValue());", "+\t\t\t\t\tcase T_char :\treturn IntConstant.fromValue(left.intValue() | right.charValue());", "+\t\t\t\t\tcase T_byte:\treturn IntConstant.fromValue(left.intValue() | right.byteValue());", "+\t\t\t\t\tcase T_short:\treturn IntConstant.fromValue(left.intValue() | right.shortValue());", "+\t\t\t\t\tcase T_int:\t\treturn IntConstant.fromValue(left.intValue() | right.intValue());", "+\t\t\t\t\tcase T_long:\treturn LongConstant.fromValue(left.intValue() | right.longValue());", "-\t\t\t\t\tcase T_char :\treturn Constant.fromValue(left.longValue() | right.charValue());", "-\t\t\t\t\tcase T_byte:\treturn Constant.fromValue(left.longValue() | right.byteValue());", "-\t\t\t\t\tcase T_short:\treturn Constant.fromValue(left.longValue() | right.shortValue());", "-\t\t\t\t\tcase T_int:\t\treturn Constant.fromValue(left.longValue() | right.intValue());", "-\t\t\t\t\tcase T_long:\treturn Constant.fromValue(left.longValue() | right.longValue());", "+\t\t\t\t\tcase T_char :\treturn LongConstant.fromValue(left.longValue() | right.charValue());", "+\t\t\t\t\tcase T_byte:\treturn LongConstant.fromValue(left.longValue() | right.byteValue());", "+\t\t\t\t\tcase T_short:\treturn LongConstant.fromValue(left.longValue() | right.shortValue());", "+\t\t\t\t\tcase T_int:\t\treturn LongConstant.fromValue(left.longValue() | right.intValue());", "+\t\t\t\t\tcase T_long:\treturn LongConstant.fromValue(left.longValue() | right.longValue());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8c3a50e9e5718fa337ab224f7f4ce3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterAST3Test.java", "commitBeforeChange": "3c4337082bfd6cd03c12a697c9ff074574c40dcb", "commitAfterChange": "62673bfe33e35621438dc115dd9c632f8333785c", "methodNumberBeforeChange": 346, "methodNumberAfterChange": 346, "signatureBeforeChange": " \tpublic void test0344() throws JavaModelException", "signatureAfterChange": " \tpublic void test0344() throws JavaModelException", "diff": ["-\t\tPreferences preferences = null;", "+//\t\tPreferences preferences = null;", "+\t\tIJavaProject project = null;", "-\t\t\tpreferences = JavaCore.getPlugin().getPluginPreferences();", "-\t\t\tpb_assert = preferences.getString(JavaCore.COMPILER_PB_ASSERT_IDENTIFIER);", "-\t\t\tcompiler_source = preferences.getString(JavaCore.COMPILER_SOURCE);", "-\t\t\tcompiler_compliance = preferences.getString(JavaCore.COMPILER_COMPLIANCE);", "+//\t\t\tpreferences = JavaCore.getPluginPreferences();", "+//\t\t\tpb_assert = preferences.getString(JavaCore.COMPILER_PB_ASSERT_IDENTIFIER);", "+//\t\t\tcompiler_source = preferences.getString(JavaCore.COMPILER_SOURCE);", "+//\t\t\tcompiler_compliance = preferences.getString(JavaCore.COMPILER_COMPLIANCE);", "+\t\t\tproject = sourceUnit.getJavaProject();", "+\t\t\tpb_assert = project.getOption(JavaCore.COMPILER_PB_ASSERT_IDENTIFIER, true);", "+\t\t\tcompiler_source = project.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\tcompiler_compliance = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "-\t\t\tpreferences.setValue(JavaCore.COMPILER_PB_ASSERT_IDENTIFIER, JavaCore.ERROR); ", "-\t\t\tpreferences.setValue(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_4);", "-\t\t\tpreferences.setValue(JavaCore.COMPILER_COMPLIANCE, JavaCore.VERSION_1_4); ", "+//\t\t\tpreferences.setValue(JavaCore.COMPILER_PB_ASSERT_IDENTIFIER, JavaCore.ERROR); ", "+//\t\t\tpreferences.setValue(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_4);", "+//\t\t\tpreferences.setValue(JavaCore.COMPILER_COMPLIANCE, JavaCore.VERSION_1_4);", "+\t\t\tproject.setOption(JavaCore.COMPILER_PB_ASSERT_IDENTIFIER, JavaCore.ERROR); ", "+\t\t\tproject.setOption(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_4);", "+\t\t\tproject.setOption(JavaCore.COMPILER_COMPLIANCE, JavaCore.VERSION_1_4);", "+", "-\t\t\tif (preferences != null) {", "-\t\t\t\tpreferences.setValue(JavaCore.COMPILER_PB_ASSERT_IDENTIFIER, pb_assert); ", "-\t\t\t\tpreferences.setValue(JavaCore.COMPILER_SOURCE, compiler_source); ", "-\t\t\t\tpreferences.setValue(JavaCore.COMPILER_COMPLIANCE, compiler_compliance); ", "+//\t\t\tif (preferences != null) {", "+//\t\t\t\tpreferences.setValue(JavaCore.COMPILER_PB_ASSERT_IDENTIFIER, pb_assert); ", "+//\t\t\t\tpreferences.setValue(JavaCore.COMPILER_SOURCE, compiler_source); ", "+//\t\t\t\tpreferences.setValue(JavaCore.COMPILER_COMPLIANCE, compiler_compliance); ", "+//\t\t\t}", "+\t\t\tif (project != null) {", "+\t\t\t\tproject.setOption(JavaCore.COMPILER_PB_ASSERT_IDENTIFIER, pb_assert); ", "+\t\t\t\tproject.setOption(JavaCore.COMPILER_SOURCE, compiler_source); ", "+\t\t\t\tproject.setOption(JavaCore.COMPILER_COMPLIANCE, compiler_compliance); "]}], "num": 13619}
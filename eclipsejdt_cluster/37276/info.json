{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f466e07a906253369ca83e0c80697356", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08bad76548974cfea537890853667680", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "8861b8acfd87086e544117143aef10af0195095f", "commitAfterChange": "e6a8418fa053d90159e93cddfdeaf1bb437e9155", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["-\t\t\t} ", "+\t\t\t}", "+\t\t\t// Report no implicit string conversion", "+\t\t\tif (optionID.equals(OPTION_ReportNoImplicitStringConversion)) {", "+\t\t\t\tif (optionValue.equals(ERROR)) {", "+\t\t\t\t\tthis.errorThreshold |= NoImplicitStringConversion;", "+\t\t\t\t\tthis.warningThreshold &= ~NoImplicitStringConversion;", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {", "+\t\t\t\t\tthis.errorThreshold &= ~NoImplicitStringConversion;", "+\t\t\t\t\tthis.warningThreshold |= NoImplicitStringConversion;", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "+\t\t\t\t\tthis.errorThreshold &= ~NoImplicitStringConversion;", "+\t\t\t\t\tthis.warningThreshold &= ~NoImplicitStringConversion;", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aa7d1a7b5e54a8d30cc55b8503746d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "cf3402778a386b4819e4d3554ae8d21d9e5326e6", "commitAfterChange": "56a4d388176794077c8c6fb2f22cd1defef6beb5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["-\t\t\t}\t\t\t// Report non-externalized string literals", "+\t\t\t}\t\t\t", "+\t\t\t// Report possible accidental boolean assignment", "+\t\t\tif(optionID.equals(OPTION_ReportPossibleAccidentalBooleanAssignment)){", "+\t\t\t\tif (optionValue.equals(ERROR)) {", "+\t\t\t\t\tthis.errorThreshold |= AccidentalBooleanAssign;", "+\t\t\t\t\tthis.warningThreshold &= ~AccidentalBooleanAssign;", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {", "+\t\t\t\t\tthis.errorThreshold &= ~AccidentalBooleanAssign;", "+\t\t\t\t\tthis.warningThreshold |= AccidentalBooleanAssign;", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "+\t\t\t\t\tthis.errorThreshold &= ~AccidentalBooleanAssign;", "+\t\t\t\t\tthis.warningThreshold &= ~AccidentalBooleanAssign;", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t}", "+\t\t\t// Report non-externalized string literals"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "288e9d9c4d839e580f359b2109c1d4f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "3c24f3c5868942545b866a06aea7ff0e6d501ace", "commitAfterChange": "c52bf9c9641831c37e7ba4fe251dcc6debca74a5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["+\t\t\t// Report possible accidental boolean assignment", "+\t\t\tif(optionID.equals(OPTION_ReportSuperfluousSemicolon)){", "+\t\t\t\tif (optionValue.equals(ERROR)) {", "+\t\t\t\t\tthis.errorThreshold |= SuperfluousSemicolon;", "+\t\t\t\t\tthis.warningThreshold &= ~SuperfluousSemicolon;", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {", "+\t\t\t\t\tthis.errorThreshold &= ~SuperfluousSemicolon;", "+\t\t\t\t\tthis.warningThreshold |= SuperfluousSemicolon;", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "+\t\t\t\t\tthis.errorThreshold &= ~SuperfluousSemicolon;", "+\t\t\t\t\tthis.warningThreshold &= ~SuperfluousSemicolon;", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dcd8a8bbea3a5200a2e33cbb9c68347", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "6dad91e4f298fff813aeb65b0b459a8698c68fdb", "commitAfterChange": "74ba53ab0437265c5342ec723f72d2aea81fd661", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["+\t\t\t// Report todo", "+\t\t\tif(optionID.equals(OPTION_ReportToDo)){", "+\t\t\t\tif (optionValue.equals(ERROR)) {", "+\t\t\t\t\tthis.errorThreshold |= ToDo;", "+\t\t\t\t\tthis.warningThreshold &= ~ToDo;", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {", "+\t\t\t\t\tthis.errorThreshold &= ~ToDo;", "+\t\t\t\t\tthis.warningThreshold |= ToDo;", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "+\t\t\t\t\tthis.errorThreshold &= ~ToDo;", "+\t\t\t\t\tthis.warningThreshold &= ~ToDo;", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t} ", "+\t\t\t// Report todo", "+\t\t\tif(optionID.equals(OPTION_ToDoTag)){", "+\t\t\t\tthis.toDoTag = optionValue.toCharArray();", "+\t\t\t\tcontinue;", "+\t\t\t} "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "460280ef0945252d339ec7fb99cc6344", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "cc370a50ac7ec603f065f1e6278826253518f4d4", "commitAfterChange": "1ae189eb0affddcddb5cf43f9552f434a9d25d38", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["+\t\t\t// Report unnecessary receiver for static access", "+\t\t\tif(optionID.equals(OPTION_ReportStaticAccessReceiver)){", "+\t\t\t\tif (optionValue.equals(ERROR)) {", "+\t\t\t\t\tthis.errorThreshold |= StaticAccessReceiver;", "+\t\t\t\t\tthis.warningThreshold &= ~StaticAccessReceiver;", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {", "+\t\t\t\t\tthis.errorThreshold &= ~StaticAccessReceiver;", "+\t\t\t\t\tthis.warningThreshold |= StaticAccessReceiver;", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "+\t\t\t\t\tthis.errorThreshold &= ~StaticAccessReceiver;", "+\t\t\t\t\tthis.warningThreshold &= ~StaticAccessReceiver;", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t} "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5544606e1d758056a83948f5a95f310e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "e6bf96fd82847410c46479a652f4e58f9a6dd052", "commitAfterChange": "5e8c3183792bb167a28b31bd623b66ded11f658d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["-\t\t\t// Report unnecessary receiver for static access", "+\t\t\t// Report interface method incompatible with non-inherited Object method", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t} ", "+\t\t\t// Report unused private members", "+\t\t\tif(optionID.equals(OPTION_ReportUnusedPrivateMember)){", "+\t\t\t\tif (optionValue.equals(ERROR)) {", "+\t\t\t\t\tthis.errorThreshold |= UnusedPrivateMember;", "+\t\t\t\t\tthis.warningThreshold &= ~UnusedPrivateMember;", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {", "+\t\t\t\t\tthis.errorThreshold &= ~UnusedPrivateMember;", "+\t\t\t\t\tthis.warningThreshold |= UnusedPrivateMember;", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "+\t\t\t\t\tthis.errorThreshold &= ~UnusedPrivateMember;", "+\t\t\t\t\tthis.warningThreshold &= ~UnusedPrivateMember;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55be75f9f79a870d5e4cdaa95cbe35c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "2102b467360a15c8cee175a15e0e8b3a9bf530a3", "commitAfterChange": "2f99bede247620c1c16748fe7b02dd925afcf7a5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["+\t\t\t// Report unnecessary receiver for static access", "+\t\t\tif(optionID.equals(OPTION_ReportIncompatibleNonInheritedInterfaceMethod)){", "+\t\t\t\tif (optionValue.equals(ERROR)) {", "+\t\t\t\t\tthis.errorThreshold |= IncompatibleNonInheritedInterfaceMethod;", "+\t\t\t\t\tthis.warningThreshold &= ~IncompatibleNonInheritedInterfaceMethod;", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {", "+\t\t\t\t\tthis.errorThreshold &= ~IncompatibleNonInheritedInterfaceMethod;", "+\t\t\t\t\tthis.warningThreshold |= IncompatibleNonInheritedInterfaceMethod;", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "+\t\t\t\t\tthis.errorThreshold &= ~IncompatibleNonInheritedInterfaceMethod;", "+\t\t\t\t\tthis.warningThreshold &= ~IncompatibleNonInheritedInterfaceMethod;", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t} "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d11f55ae23490a9945c416587c56d9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "a466448c8c20caf6437280cc371e39e731c58c8c", "commitAfterChange": "a378fd4d849bd18205ff3b90c2e9bce96c37a3e7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \tpublic CompilerOptions(Map settings)", "signatureAfterChange": "\r \tpublic CompilerOptions(Map settings)", "diff": ["+\t\t\t// Report unused parameter\r", "+\t\t\tif(optionID.equals(OPTION_ReportUnusedImport)){\r", "+\t\t\t\tif (optionValue.equals(ERROR)) {\r", "+\t\t\t\t\tthis.errorThreshold |= UnusedImport;\r", "+\t\t\t\t\tthis.warningThreshold &= ~UnusedImport;\r", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~UnusedImport;\r", "+\t\t\t\t\tthis.warningThreshold |= UnusedImport;\r", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {\r", "+\t\t\t\t\tthis.errorThreshold &= ~UnusedImport;\r", "+\t\t\t\t\tthis.warningThreshold &= ~UnusedImport;\r", "+\t\t\t\t}\r", "+\t\t\t\tcontinue;\r", "+\t\t\t} \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9995b40d68666aadd3f6a7cd465967c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "fa6e92df9d3db7e8cd1dd939b87ce17fd6a25504", "commitAfterChange": "669b9af0f5a06f4381a84a633c0be85e376c6f3e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["+\t\t\t// Report no-op assignments", "+\t\t\tif(optionID.equals(OPTION_ReportNoEffectAssignment)){", "+\t\t\t\tif (optionValue.equals(ERROR)) {", "+\t\t\t\t\tthis.errorThreshold |= NoEffectAssignment;", "+\t\t\t\t\tthis.warningThreshold &= ~NoEffectAssignment;", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {", "+\t\t\t\t\tthis.errorThreshold &= ~NoEffectAssignment;", "+\t\t\t\t\tthis.warningThreshold |= NoEffectAssignment;", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "+\t\t\t\t\tthis.errorThreshold &= ~NoEffectAssignment;", "+\t\t\t\t\tthis.warningThreshold &= ~NoEffectAssignment;", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t}"]}], "num": 37276}
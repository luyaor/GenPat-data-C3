{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e53182870c0c18849b65632a53b16ee", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a81bfcfbe3b21684865b108fdcda2fbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "602a7d55ff75dfdfa2cae12bead009c418215b66", "commitAfterChange": "183f54b68364b226246fe663acdbcbf6f6f1dd9e", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 78, "signatureBeforeChange": " \t \tprivate void proposeNewMethod(char[] token, ReferenceBinding reference)", "signatureAfterChange": " \t \tprivate void proposeNewMethod(char[] token, ReferenceBinding reference)", "diff": ["-\t\tint relevance = computeBaseRelevance();", "-\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\trelevance += computeRelevanceForRestrictions(false); // no access restriction for new method", "-\t\t", "-\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.POTENTIAL_METHOD_DECLARATION, this.actualCompletionPosition);", "-\t\tproposal.setDeclarationSignature(getSignature(reference));", "-\t\tproposal.setSignature(", "-\t\t\t\tcreateMethodSignature(", "-\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "-\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "-\t\t\t\t\t\tCharOperation.NO_CHAR,", "-\t\t\t\t\t\tVOID));", "-\t\tproposal.setDeclarationPackageName(reference.qualifiedPackageName());", "-\t\tproposal.setDeclarationTypeName(reference.qualifiedSourceName());", "-\t\t", "-\t\t//proposal.setPackageName(null);", "-\t\tproposal.setTypeName(VOID);", "-\t\tproposal.setName(token);", "-\t\t//proposal.setParameterPackageNames(null);", "-\t\t//proposal.setParameterTypeNames(null);", "-\t\t//proposal.setPackageName(null);", "-\t\tproposal.setCompletion(token);", "-\t\tproposal.setFlags(Flags.AccPublic);", "-\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\tproposal.setRelevance(relevance);", "-\t\tthis.requestor.accept(proposal);", "-\t\tif(DEBUG) {", "-\t\t\tthis.printDebug(proposal);", "+\t\tif(!this.requestor.isIgnored(CompletionProposal.POTENTIAL_METHOD_DECLARATION)) {", "+\t\t\tint relevance = computeBaseRelevance();", "+\t\t\trelevance += computeRelevanceForInterestingProposal();", "+\t\t\trelevance += computeRelevanceForRestrictions(false); // no access restriction for new method", "+\t\t\t", "+\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.POTENTIAL_METHOD_DECLARATION, this.actualCompletionPosition);", "+\t\t\tproposal.setDeclarationSignature(getSignature(reference));", "+\t\t\tproposal.setSignature(", "+\t\t\t\t\tcreateMethodSignature(", "+\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\tCharOperation.NO_CHAR,", "+\t\t\t\t\t\t\tVOID));", "+\t\t\tproposal.setDeclarationPackageName(reference.qualifiedPackageName());", "+\t\t\tproposal.setDeclarationTypeName(reference.qualifiedSourceName());", "+\t\t\t", "+\t\t\t//proposal.setPackageName(null);", "+\t\t\tproposal.setTypeName(VOID);", "+\t\t\tproposal.setName(token);", "+\t\t\t//proposal.setParameterPackageNames(null);", "+\t\t\t//proposal.setParameterTypeNames(null);", "+\t\t\t//proposal.setPackageName(null);", "+\t\t\tproposal.setCompletion(token);", "+\t\t\tproposal.setFlags(Flags.AccPublic);", "+\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\tproposal.setRelevance(relevance);", "+\t\t\tthis.requestor.accept(proposal);", "+\t\t\tif(DEBUG) {", "+\t\t\t\tthis.printDebug(proposal);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff2e7e6a8ee3434039c3e81c30e0f489", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "f6481dd9693bf03828e045ffe5a565f52edfa2f0", "commitAfterChange": "d05cd9265b556f2a2d32057ce8a58ca51378188a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "diff": ["-\t\t\tif (!this.requestor.isIgnored(CompletionProposal.ANNOTATION_ATTRIBUTE_REF)) {", "-\t\t\t\tCompletionOnMemberValueName memberValuePair = (CompletionOnMemberValueName) astNode;", "-\t\t\t\tAnnotation annotation = (Annotation) astNodeParent;", "-\t\t\t\t", "-\t\t\t\tthis.completionToken = memberValuePair.name;", "-\t\t\t\t", "-\t\t\t\tif (this.completionToken.length == 0) {", "+\t\t\tCompletionOnMemberValueName memberValuePair = (CompletionOnMemberValueName) astNode;", "+\t\t\tAnnotation annotation = (Annotation) astNodeParent;", "+\t\t\t", "+\t\t\tthis.completionToken = memberValuePair.name;", "+\t\t\t", "+\t\t\tif (this.completionToken.length == 0) {", "+\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t} else {", "-\t\t\t\t\tMemberValuePair[] memberValuePairs = annotation.memberValuePairs();", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tMemberValuePair[] memberValuePairs = annotation.memberValuePairs();", "+\t\t\t\tif (!this.requestor.isIgnored(CompletionProposal.ANNOTATION_ATTRIBUTE_REF)) {", "-\t\t\t\t\tif (memberValuePairs == null || memberValuePairs.length == 0) {", "-\t\t\t\t\t\tif (annotation.resolvedType instanceof ReferenceBinding) {", "-\t\t\t\t\t\t\tMethodBinding[] methodBindings =", "-\t\t\t\t\t\t\t\t((ReferenceBinding)annotation.resolvedType).availableMethods();", "-\t\t\t\t\t\t\tif (methodBindings != null &&", "-\t\t\t\t\t\t\t\t\tmethodBindings.length == 1 &&", "-\t\t\t\t\t\t\t\t\tCharOperation.equals(methodBindings[0].selector, VALUE)) {", "-\t\t\t\t\t\t\t\tif (this.expectedTypesPtr > -1 && this.expectedTypes[0].isAnnotationType()) {", "-\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tfindVariablesAndMethods(", "-\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\tFakeInvocationSite,", "-\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\tinsideTypeAnnotation,", "-\t\t\t\t\t\t\t\t\t\ttrue);", "-\t\t\t\t\t\t\t\t\t// can be the start of a qualified type name", "-\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (memberValuePairs == null || memberValuePairs.length == 0) {", "+\t\t\t\t\tif (annotation.resolvedType instanceof ReferenceBinding) {", "+\t\t\t\t\t\tMethodBinding[] methodBindings =", "+\t\t\t\t\t\t\t((ReferenceBinding)annotation.resolvedType).availableMethods();", "+\t\t\t\t\t\tif (methodBindings != null &&", "+\t\t\t\t\t\t\t\tmethodBindings.length == 1 &&", "+\t\t\t\t\t\t\t\tCharOperation.equals(methodBindings[0].selector, VALUE)) {", "+\t\t\t\t\t\t\tif (this.expectedTypesPtr > -1 && this.expectedTypes[0].isAnnotationType()) {", "+\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tfindVariablesAndMethods(", "+\t\t\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\tFakeInvocationSite,", "+\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\tinsideTypeAnnotation,", "+\t\t\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t\t\t// can be the start of a qualified type name", "+\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);"]}], "num": 64372}
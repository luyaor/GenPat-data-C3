{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "418452a106370cb7ae9b758ce4755ce7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04e400d1933503d2d767533a7dc988cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "a283419708f25fe1336a00a0cfc8b4d7ffdb4ea6", "commitAfterChange": "78df60c293834e15ab5138d21694328394cc129c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void resolve(MethodScope methScope)", "signatureAfterChange": " \tpublic void resolve(MethodScope methScope)", "diff": ["+\t\t", "+\t\t// get method declaration", "+\t\tAbstractMethodDeclaration methDecl = methScope.referenceMethod();", "+", "+\t\t// @see tags", "+\t\tint seeTagsNbre = references == null ? 0 : references.length;", "+\t\tboolean superRef = false;", "+\t\tfor (int i = 0; i < seeTagsNbre; i++) {", "+\t\t\tTypeBinding binding = references[i].resolveType(methScope);", "+\t\t\tif (!superRef && binding != null && binding.isValidBinding()) {", "+\t\t\t\t// if binding is valid then look if we have a reference to an overriden method/constructor", "+\t\t\t\tif (references[i] instanceof JavadocMessageSend) {", "+\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) references[i];", "+\t\t\t\t\tif (methDecl.binding.declaringClass.isCompatibleWith(messageSend.qualifyingType) &&", "+\t\t\t\t\t\tCharOperation.equals(messageSend.selector, methDecl.selector) &&", "+\t\t\t\t\t\t(messageSend.binding.returnType == methDecl.binding.returnType)) {", "+\t\t\t\t\t\tif (messageSend.arguments == null && methDecl.arguments == null) {", "+\t\t\t\t\t\t\tsuperRef = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\telse if (messageSend.arguments != null && methDecl.arguments != null) {", "+\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParametersEqual(messageSend.binding);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\telse if (references[i] instanceof JavadocAllocationExpression) {", "+\t\t\t\t\tJavadocAllocationExpression allocationExpr = (JavadocAllocationExpression) references[i];", "+\t\t\t\t\tTypeBinding constructorBinding = allocationExpr.type.resolvedType;", "+\t\t\t\t\tif (methDecl.binding.declaringClass.isCompatibleWith(constructorBinding)) {", "+\t\t\t\t\t\tif (allocationExpr.arguments == null && methDecl.arguments == null) {", "+\t\t\t\t\t\t\tsuperRef = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\telse if (allocationExpr.arguments != null && methDecl.arguments != null) {", "+\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParametersEqual(allocationExpr.binding);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\t// Store if a reference exists to an overriden method/constructor or the method is in a local type,", "+\t\tboolean reportMissing = !(superRef || (methDecl.binding.declaringClass != null && methDecl.binding.declaringClass.isLocalType()));", "-\t\tresolveParamTags(methScope);", "+\t\tresolveParamTags(methScope, reportMissing);", "-\t\t\tAbstractMethodDeclaration md = methScope.referenceMethod();", "-\t\t\tif (!md.isConstructor() && !md.isClinit()) {", "-\t\t\t\tMethodDeclaration meth = (MethodDeclaration) md;", "-\t\t\t\tif (meth.binding.returnType != VoidBinding) {", "-\t\t\t\t\t// method with return should have @return tag", "-\t\t\t\t\t//int end = md.sourceStart + md.selector.length - 1;", "-\t\t\t\t\tmethScope.problemReporter().javadocInvalidReturnTag(meth.returnType.sourceStart, meth.returnType.sourceEnd, true);", "+\t\t\tif (reportMissing) {", "+\t\t\t\tif (!methDecl.isConstructor() && !methDecl.isClinit()) {", "+\t\t\t\t\tMethodDeclaration meth = (MethodDeclaration) methDecl;", "+\t\t\t\t\tif (meth.binding.returnType != VoidBinding) {", "+\t\t\t\t\t\t// method with return should have @return tag", "+\t\t\t\t\t\tmethScope.problemReporter().javadocMissingReturnTag(meth.returnType.sourceStart, meth.returnType.sourceEnd);", "+\t\t\t\t\t}", "-\t\tresolveThrowsTags(methScope);", "-", "-\t\t// @see tags", "-\t\tint seeTagsNbre = references == null ? 0 : references.length;", "-\t\tfor (int i = 0; i < seeTagsNbre; i++) {", "-\t\t\treferences[i].resolveType(methScope);", "-\t\t}", "+\t\tresolveThrowsTags(methScope, reportMissing);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3194e6232a1e2fdeaad9e9d455638a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "41f0eedac440a5a7408e664ba09866184ebddd55", "commitAfterChange": "e0b93cd9388950bd51950e07247cdecc9e3263df", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void resolve(MethodScope methScope)", "signatureAfterChange": " \tpublic void resolve(MethodScope methScope)", "diff": ["-\t\t\tTypeBinding binding = references[i].resolveType(methScope);", "-\t\t\t", "-\t\t\tif ((methDecl.isConstructor() || override) && !superRef && binding != null && binding.isValidBinding()) {", "-\t\t\t\t// if binding is valid then look if we have a reference to an overriden method/constructor", "-\t\t\t\tif (references[i] instanceof JavadocMessageSend) {", "-\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) references[i];", "-\t\t\t\t\tif (methDecl.binding.declaringClass.isCompatibleWith(messageSend.qualifyingType) &&", "-\t\t\t\t\t\tCharOperation.equals(messageSend.selector, methDecl.selector) &&", "-\t\t\t\t\t\t(messageSend.binding.returnType == methDecl.binding.returnType)) {", "-\t\t\t\t\t\tif (messageSend.arguments == null && methDecl.arguments == null) {", "-\t\t\t\t\t\t\tsuperRef = true;", "+\t\t\treferences[i].resolveType(methScope);", "+\t\t\ttry {", "+\t\t\t\t// see whether we can have a super reference", "+\t\t\t\tif ((methDecl.isConstructor() || override) && !superRef) {", "+\t\t\t\t\tif (references[i] instanceof JavadocMessageSend) {", "+\t\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) references[i];", "+\t\t\t\t\t\t// if binding is valid then look if we have a reference to an overriden method/constructor", "+\t\t\t\t\t\tif (messageSend.binding != null && messageSend.binding.isValidBinding()) {", "+\t\t\t\t\t\t\tif (methDecl.binding.declaringClass.isCompatibleWith(messageSend.receiverType) &&", "+\t\t\t\t\t\t\t\tCharOperation.equals(messageSend.selector, methDecl.selector) &&", "+\t\t\t\t\t\t\t\t(messageSend.binding.returnType == methDecl.binding.returnType)) {", "+\t\t\t\t\t\t\t\tif (messageSend.arguments == null && methDecl.arguments == null) {", "+\t\t\t\t\t\t\t\t\tsuperRef = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\telse if (messageSend.arguments != null && methDecl.arguments != null) {", "+\t\t\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParametersEqual(messageSend.binding);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\telse if (messageSend.arguments != null && methDecl.arguments != null) {", "-\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParametersEqual(messageSend.binding);", "+\t\t\t\t\t}", "+\t\t\t\t\telse if (references[i] instanceof JavadocAllocationExpression) {", "+\t\t\t\t\t\tJavadocAllocationExpression allocationExpr = (JavadocAllocationExpression) references[i];", "+\t\t\t\t\t\t// if binding is valid then look if we have a reference to an overriden method/constructor", "+\t\t\t\t\t\tif (allocationExpr.binding != null && allocationExpr.binding.isValidBinding()) {", "+\t\t\t\t\t\t\tif (methDecl.binding.declaringClass.isCompatibleWith(allocationExpr.resolvedType)) {", "+\t\t\t\t\t\t\t\tif (allocationExpr.arguments == null && methDecl.arguments == null) {", "+\t\t\t\t\t\t\t\t\tsuperRef = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\telse if (allocationExpr.arguments != null && methDecl.arguments != null) {", "+\t\t\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParametersEqual(allocationExpr.binding);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "-\t\t\t\telse if (references[i] instanceof JavadocAllocationExpression) {", "-\t\t\t\t\tJavadocAllocationExpression allocationExpr = (JavadocAllocationExpression) references[i];", "-\t\t\t\t\tTypeBinding constructorBinding = allocationExpr.type.resolvedType;", "-\t\t\t\t\tif (methDecl.binding.declaringClass.isCompatibleWith(constructorBinding)) {", "-\t\t\t\t\t\tif (allocationExpr.arguments == null && methDecl.arguments == null) {", "-\t\t\t\t\t\t\tsuperRef = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\telse if (allocationExpr.arguments != null && methDecl.arguments != null) {", "-\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParametersEqual(allocationExpr.binding);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t}", "+\t\t\tcatch (Exception e) {", "+\t\t\t\t// Something wrong happen, forgot super ref..."]}], "num": 34502}
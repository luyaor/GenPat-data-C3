{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d72eec81685d89bfeb474dce118a7878", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0292e324ca14358fbba149a218f18a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public MethodBinding getConstructor(ReferenceBinding receiverType, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": "  public MethodBinding getConstructor(ReferenceBinding receiverType, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\tfor (int i = 0, length = methods.length; i < length; i++)", "-\t\tif (areParametersAssignable(methods[i].parameters, argumentTypes))", "-\t\t\tcompatible[compatibleIndex++] = methods[i];", "+\tfor (int i = 0, length = methods.length; i < length; i++) {", "+\t    MethodBinding compatibleMethod = computeCompatibleMethod(methods[i], argumentTypes, invocationSite);", "+\t\tif (compatibleMethod != null)", "+\t\t\tcompatible[compatibleIndex++] = compatibleMethod;", "+\t}", "-\t\treturn new ProblemMethodBinding(ConstructorDeclaration.ConstantPoolName, compatible[0].parameters, NotVisible);", "+\t\treturn new ProblemMethodBinding(compatible[0], ConstructorDeclaration.ConstantPoolName, compatible[0].parameters, NotVisible);", "-\treturn mostSpecificClassMethodBinding(visible, visibleIndex);", "+\treturn mostSpecificClassMethodBinding(visible, visibleIndex, invocationSite);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa32102f444d4dbe7b349474ce57b811", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public MethodBinding findMethod( \tReferenceBinding receiverType, \tchar[] selector, \tTypeBinding[] argumentTypes, \tInvocationSite invocationSite)", "signatureAfterChange": " public MethodBinding findMethod( \tReferenceBinding receiverType, \tchar[] selector, \tTypeBinding[] argumentTypes, \tInvocationSite invocationSite)", "diff": ["-\t\t\tif (areParametersAssignable(methodBinding.parameters, argumentTypes))", "-\t\t\t\tcandidates[candidatesCount++] = methodBinding;", "+\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "+\t\t\tif (compatibleMethod != null)", "+\t\t\t\tcandidates[candidatesCount++] = compatibleMethod;", "-\t\t\treturn mostSpecificClassMethodBinding(candidates, visiblesCount);", "+\t\t\treturn mostSpecificClassMethodBinding(candidates, visiblesCount, invocationSite);", "-\t\t\treturn mostSpecificInterfaceMethodBinding(candidates, visiblesCount);", "+\t\t\treturn mostSpecificInterfaceMethodBinding(candidates, visiblesCount, invocationSite);"]}], "num": 71505}
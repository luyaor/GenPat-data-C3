{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c2a018915ecbc5fcbcae7bd5ea5703c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "403d336519a1b9c8a3fe49858ade0e6b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "6ca69a40178f9de6a928924e59e2e88fbb52d965", "commitAfterChange": "06fd76b8332a7a5790831ad62dc1626276814e9a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  static State read(IProject project, DataInputStream in) throws IOException", "signatureAfterChange": "  static State read(IProject project, DataInputStream in) throws IOException", "diff": ["-\t\t\tcase 4 : // project relative jar", "-\t\t\t\tnewState.binaryLocations[i] = ClasspathLocation.forLibrary(project.getFile(in.readUTF()));", "+\t\t\tcase 4 : // workspace relative jar", "+\t\t\t\tWorkspaceRoot root = (WorkspaceRoot) project.getWorkspace().getRoot();", "+\t\t\t\tnewState.binaryLocations[i] = ClasspathLocation.forLibrary(root.getFile(in.readUTF()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6716310dbc6be267d82b7a032c6d9d13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/Factory.java", "commitBeforeChange": "2445b4918489720c19f8f06e5268b782d8fa3e09", "commitAfterChange": "a4c0884f4909a7148eef43d80a79301d90c42921", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static AnnotationValue createDefaultValue(Object domValue,  \t\t\t\t\t\t\t\t\t\t\t\t\t AnnotationElementDeclarationImpl decl,  \t\t\t\t\t\t\t\t\t\t\t\t\t ProcessorEnvImpl env)", "signatureAfterChange": "     public static AnnotationValue createDefaultValue(Object domValue,  \t\t\t\t\t\t\t\t\t\t\t\t\t AnnotationElementDeclarationImpl decl,  \t\t\t\t\t\t\t\t\t\t\t\t\t ProcessorEnvImpl env)", "diff": ["-\t\tfinal Object converted = convertDOMValueToMirrorValue(domValue, null, decl, decl, env);\t\t", "+        boolean needBoxing = decl.getReturnType() instanceof ArrayType;\t\t", "+\t\tfinal Object converted = convertDOMValueToMirrorValue(domValue, null, decl, decl, env, decl.getReturnType());", "+\t\t"]}], "num": 13157}
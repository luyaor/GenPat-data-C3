{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b02f9c74306491ff2ee9323c0a7a521a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1715d1c9ca80bd43004b464c99ad3d96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "75e2dec6c40beb99004df5e9b441c0ff490527b5", "commitAfterChange": "6072925ab1af00c7091afbac8257e69ef61e2818", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " public ReferenceBinding[] superInterfaces()", "signatureAfterChange": " public ReferenceBinding[] superInterfaces()", "diff": ["+\t\t\t\tif (this.superInterfaces[i].isParameterizedType()) {", "+\t\t\t\t\tReferenceBinding superType = this.superInterfaces[i].actualType();", "+\t\t\t\t\tif (TypeBinding.equalsEquals(superType, this)) {", "+\t\t\t\t\t\tthis.tagBits |= TagBits.HierarchyHasProblems;", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4050c3152523c701f5a210edd8b59116", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "6a9c839afeea06e7dd97b023fa9c24def00f0f08", "commitAfterChange": "cf7db1b07f7da2723bd250cc64a7e16bec1c504d", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": " public ReferenceBinding superclass()", "signatureAfterChange": " public ReferenceBinding superclass()", "diff": ["+\tif (this.superclass.problemId() == ProblemReasons.NotFound)", "+\t\tthis.tagBits |= TagBits.HierarchyHasProblems; // propagate type inconsistency"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59d95d2f1d04d69b7964e45af033492b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "d9e6c0049038e663cad2563d53428b02731e6d69", "commitAfterChange": "7c88f2dadd58695e598a3974e188a04cef737b59", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void bindArguments()", "signatureAfterChange": " \tpublic void bindArguments()", "diff": ["-\t\t\t\tthis.arguments[i].bind(this.scope, argType, used);", "+\t\t\t\tArgument argument = this.arguments[i];", "+\t\t\t\targument.bind(this.scope, argType, used);", "+\t\t\t\tif (argument.annotations != null) {", "+\t\t\t\t\tthis.binding.tagBits |= TagBits.HasParameterAnnotations;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "661907f1dbfe021ee53ea5bfcb06bb76", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "6a9c839afeea06e7dd97b023fa9c24def00f0f08", "commitAfterChange": "cf7db1b07f7da2723bd250cc64a7e16bec1c504d", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 35, "signatureBeforeChange": " public ReferenceBinding[] superInterfaces()", "signatureAfterChange": " public ReferenceBinding[] superInterfaces()", "diff": ["-\tfor (int i = this.superInterfaces.length; --i >= 0;)", "+\tfor (int i = this.superInterfaces.length; --i >= 0;) {", "+\t\tif (this.superInterfaces[i].problemId() == ProblemReasons.NotFound)", "+\t\t\tthis.tagBits |= TagBits.HierarchyHasProblems; // propagate type inconsistency", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8aa64eaead6fa418a5ff760746a7df1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "a81195ff09b3e00d1785645fd080f14d3c2692cf", "commitAfterChange": "0300a57044fe7d054155c36f505a1e0c238247a4", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprotected boolean createHierarchyResolver(PotentialMatch[] potentialMatches)", "signatureAfterChange": " \tprotected boolean createHierarchyResolver(PotentialMatch[] potentialMatches)", "diff": ["-\t\t\tif (this.hierarchyResolver.setFocusType(compoundName) == null) {", "+\t\t\tReferenceBinding focusTypeBinding = this.hierarchyResolver.setFocusType(compoundName);", "+\t\t\tif (focusTypeBinding == null || !focusTypeBinding.isValidBinding() || (focusTypeBinding.tagBits & TagBits.HierarchyHasProblems) > 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d2ac5d3f94e64cce48997e509857fd8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "165d2ee0a4a374ec3dbb0f3df780db24664ac692", "commitAfterChange": "146dc3b7afcca724ac2ba30b2cbb382c047a5a77", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "signatureAfterChange": " \tprotected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "diff": ["+\t\t\t\tint ptr = this.sourceParser.astPtr;", "+\t\t\t\twhile (ptr >= 0) {", "+\t\t\t\t\tObject node = this.sourceParser.astStack[ptr];", "+\t\t\t\t\tif (node instanceof TypeDeclaration) {", "+\t\t\t\t\t\tname = ((TypeDeclaration)node).name;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tptr--;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a81cd818f14d19ad5e63d1d375e50036", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "signatureAfterChange": " \tprotected Object createMethodReference(Object receiver, List arguments) throws InvalidInputException", "diff": ["-\t\t\t\tint ptr = this.sourceParser.astPtr;", "-\t\t\t\twhile (ptr >= 0) {", "-\t\t\t\t\tObject node = this.sourceParser.astStack[ptr];", "-\t\t\t\t\tif (node instanceof TypeDeclaration) {", "-\t\t\t\t\t\tTypeDeclaration typeDecl = (TypeDeclaration) node;", "-\t\t\t\t\t\tif (typeDecl.bodyEnd == 0) { // type declaration currenly parsed", "-\t\t\t\t\t\t\tname = typeDecl.name;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tptr--;", "+\t\t\t\tTypeDeclaration typeDecl = getParsedTypeDeclaration();", "+\t\t\t\tif (typeDecl != null) {", "+\t\t\t\t\tname = typeDecl.name;"]}], "num": 7936}
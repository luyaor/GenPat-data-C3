{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "929ae9ecdcd9a0da300e9eb428794b23", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cca3e38468c3eeec880b02e21b197b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "c5887d07050c9433ef244b9fc8d660e0afd1c02c", "commitAfterChange": "57b394813576bd0089aca541b5b581458c1b6d75", "methodNumberBeforeChange": 333, "methodNumberAfterChange": 333, "signatureBeforeChange": " public void packageIsNotExpectedPackage(CompilationUnitDeclaration compUnitDecl)", "signatureAfterChange": " public void packageIsNotExpectedPackage(CompilationUnitDeclaration compUnitDecl)", "diff": ["+\tboolean hasPackageDeclaration = compUnitDecl.currentPackage == null;", "-\t\tcompUnitDecl.currentPackage == null ? \"\" : CharOperation.toString(compUnitDecl.currentPackage.tokens), //$NON-NLS-1$", "+\t\thasPackageDeclaration ? \"\" : CharOperation.toString(compUnitDecl.currentPackage.tokens), //$NON-NLS-1$", "+\tint end;", "+\tif (compUnitDecl.sourceEnd <= 0) {", "+\t\tend = -1;", "+\t} else {", "+\t\tend = hasPackageDeclaration ? 0 : compUnitDecl.currentPackage.sourceEnd;", "+\t}\t", "-\t\tcompUnitDecl.currentPackage == null ? 0 : compUnitDecl.currentPackage.sourceStart,", "-\t\tcompUnitDecl.currentPackage == null ? 0 : compUnitDecl.currentPackage.sourceEnd);", "+\t\thasPackageDeclaration ? 0 : compUnitDecl.currentPackage.sourceStart,", "+\t\tend);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6ab47c94caec1c5f8b79d479bcfd01c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "90b243491d35267d13bcf8f4b3b622ed87af2ae7", "commitAfterChange": "dc2b5ae9776368d6bc02c0700f41658b033db2c3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic InferenceVariable[] addTypeVariableSubstitutions(TypeBinding[] typeVariables)", "signatureAfterChange": " \tpublic InferenceVariable[] addTypeVariableSubstitutions(TypeBinding[] typeVariables)", "diff": ["+\t\tInferenceVariable[] toAdd = new InferenceVariable[len2];", "+\t\tint numToAdd = 0;", "-\t\t\t\tnewVariables[i] = new InferenceVariable(typeVariables[i], this.variableCount++, this.currentInvocation, this.environment, this.object);", "+\t\t\t\ttoAdd[numToAdd++] =", "+\t\t\t\t\tnewVariables[i] = new InferenceVariable(typeVariables[i], this.variableCount++, this.currentInvocation, this.environment, this.object);", "-", "-\t\tint start = 0;", "-\t\tif (this.inferenceVariables != null) {", "-\t\t\tint len1 = this.inferenceVariables.length;", "-\t\t\tSystem.arraycopy(this.inferenceVariables, 0, this.inferenceVariables = new InferenceVariable[len1+len2], 0, len1);", "-\t\t\tstart = len1;", "-\t\t} else {", "-\t\t\tthis.inferenceVariables = new InferenceVariable[len2];", "+\t\tif (numToAdd > 0) {", "+\t\t\tint start = 0;", "+\t\t\tif (this.inferenceVariables != null) {", "+\t\t\t\tint len1 = this.inferenceVariables.length;", "+\t\t\t\tSystem.arraycopy(this.inferenceVariables, 0, this.inferenceVariables = new InferenceVariable[len1+numToAdd], 0, len1);", "+\t\t\t\tstart = len1;", "+\t\t\t} else {", "+\t\t\t\tthis.inferenceVariables = new InferenceVariable[numToAdd];", "+\t\t\t}", "+\t\t\tSystem.arraycopy(toAdd, 0, this.inferenceVariables, start, numToAdd);", "-\t\tSystem.arraycopy(newVariables, 0, this.inferenceVariables, start, len2);"]}], "num": 29078}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d22d6765110c9145f2caf198ddc6bf5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0905326782ee9cc201e901290b120d04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "3307a3b21f8472cc998512e9e4cd5afdd4f17b52", "commitAfterChange": "b155f47580a90f694a899aae6d06a1ff29f450b8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic boolean complainIfUnreachable(FlowInfo flowInfo, BlockScope scope, boolean didAlreadyComplain)", "signatureAfterChange": " public int complainIfUnreachable(FlowInfo flowInfo, BlockScope scope, int previousComplaintLevel)", "diff": ["-\t// Report an error if necessary", "-\tpublic boolean complainIfUnreachable(FlowInfo flowInfo, BlockScope scope, boolean didAlreadyComplain) {", "-", "-\t\tif ((flowInfo.reachMode() & FlowInfo.UNREACHABLE) != 0) {", "-\t\t\tthis.bits &= ~ASTNode.IsReachable;", "-\t\t\tboolean reported = flowInfo == FlowInfo.DEAD_END;", "-\t\t\tif (!didAlreadyComplain && reported) {", "+// complaintLevel = 0 if was reachable up until now, 1 if fake reachable (deadcode), 2 if fatal unreachable (error)", "+public int complainIfUnreachable(FlowInfo flowInfo, BlockScope scope, int previousComplaintLevel) {", "+\tif ((flowInfo.reachMode() & FlowInfo.UNREACHABLE) != 0) {", "+\t\tthis.bits &= ~ASTNode.IsReachable;", "+\t\tif (flowInfo == FlowInfo.DEAD_END) {", "+\t\t\tif (previousComplaintLevel < COMPLAINED_UNREACHABLE) {", "-\t\t\treturn reported; // keep going for fake reachable", "-\t\t}", "-\t\treturn false;", "-\t}", "+\t\t\treturn COMPLAINED_UNREACHABLE;", "+\t\t} else {", "+\t\t\tif (previousComplaintLevel < COMPLAINED_FAKE_REACHABLE) {", "+\t\t\t\tscope.problemReporter().fakeReachable(this);", "+\t\t\treturn COMPLAINED_FAKE_REACHABLE;", "+\t\t}", "+\t}", "+\treturn previousComplaintLevel;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cc219d6004a9c5b1e29707db979ceee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate static SearchPattern createTypePattern(String patternString, int limitTo, int matchRule)", "signatureAfterChange": " \tprivate static SearchPattern createTypePattern(String patternString, int limitTo, int matchRule)", "diff": ["-\t\tint paramCount = 0;", "+\t\tint argCount = 0;", "-\t\t\tswitch (token) {", "-\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE:", "-\t\t\t\t\tif (paramCount == 0) break;", "-\t\t\t\t\t// fall through default case if we're inside a type argument...", "-\t\t\t\tdefault: // all other tokens are considered identifiers (see bug 21763 Problem in Java search [search])", "-\t\t\t\t\tswitch (token) {", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameGREATER:", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameRIGHT_SHIFT:", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameUNSIGNED_RIGHT_SHIFT:", "-\t\t\t\t\t\t\tparamCount--;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase TerminalTokens.TokenNameLESS:", "-\t\t\t\t\t\t\tparamCount++;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (type == null)", "-\t\t\t\t\t\ttype = new String(scanner.getCurrentTokenSource());", "-\t\t\t\t\telse", "-\t\t\t\t\t\ttype += new String(scanner.getCurrentTokenSource());", "+\t\t\tif (argCount == 0) {", "+\t\t\t\tswitch (token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE:", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameLESS:", "+\t\t\t\t\t\targCount++;", "+\t\t\t\t\t\t// fall through default case to add token to type", "+\t\t\t\t\tdefault: // all other tokens are considered identifiers (see bug 21763 Problem in Java search [search])", "+\t\t\t\t\t\tif (type == null)", "+\t\t\t\t\t\t\ttype = scanner.getCurrentTokenString();", "+\t\t\t\t\t\telse", "+\t\t\t\t\t\t\ttype += scanner.getCurrentTokenString();", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tswitch (token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameGREATER:", "+\t\t\t\t\tcase TerminalTokens.TokenNameRIGHT_SHIFT:", "+\t\t\t\t\tcase TerminalTokens.TokenNameUNSIGNED_RIGHT_SHIFT:", "+\t\t\t\t\t\targCount--;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameLESS:", "+\t\t\t\t\t\targCount++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tif (type == null) return null; // invalid syntax", "+\t\t\t\ttype += scanner.getCurrentTokenString();"]}], "num": 46161}
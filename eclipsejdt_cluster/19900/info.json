{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4906d1e8e6fbf969dbda3a9de8c41ad", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cf018cf7df8a45e0aba0ede99de5224", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "d45a6d72ecac1399ae839b8bb0faf0b4626c38b4", "commitAfterChange": "ea3771830307a556e22215a6aa94c2a020dd70b2", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " \tpublic String getSharedProperty(String key) throws CoreException", "signatureAfterChange": " \tpublic String getSharedProperty(String key) throws CoreException", "diff": ["+\t\t} else {", "+\t\t\t// when a project is imported, we get a first delta for the addition of the .project, but the .classpath is not accessible", "+\t\t\t// so default to using java.io.File", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=96258", "+\t\t\tFile file  = rscFile.getLocation().toFile();", "+\t\t\tif (file.exists()) {", "+\t\t\t\tbyte[] bytes;", "+\t\t\t\ttry {", "+\t\t\t\t\tbytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(file);", "+\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\ttry {", "+\t\t\t\t\tproperty = new String(bytes, \"UTF-8\"); //$NON-NLS-1$ // .classpath always encoded with UTF-8", "+\t\t\t\t} catch (UnsupportedEncodingException e) {", "+\t\t\t\t\tUtil.log(e, \"Could not read .classpath with UTF-8 encoding\"); //$NON-NLS-1$", "+\t\t\t\t\t// fallback to default", "+\t\t\t\t\tproperty = new String(bytes);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a88979538e1801e18f6a511293f44d8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "3614fb7a931da6f7d6b963e79da43a1a287be280", "commitAfterChange": "f35ac795e031f468ed2702736c7462517694be67", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 49, "signatureBeforeChange": " public char[] getContents()", "signatureAfterChange": " public char[] getContents()", "diff": ["+\t\tIFile file = (IFile) getResource();", "+\t\t// Get encoding from file", "+\t\tString encoding;", "-\t\t\treturn Util.getResourceContentsAsCharArray((IFile) getResource());", "+\t\t\tencoding = file.getCharset();", "+\t\t} catch(CoreException ce) {", "+\t\t\t// do not use any encoding", "+\t\t\tencoding = null;", "+\t\t}", "+\t\ttry {", "+\t\t\treturn Util.getResourceContentsAsCharArray(file, encoding);", "+\t\t\tif (JavaModelManager.getJavaModelManager().abortOnMissingSource.get() == Boolean.TRUE) {", "+\t\t\t\tIOException ioException =", "+\t\t\t\t\te.getJavaModelStatus().getCode() == IJavaModelStatusConstants.IO_EXCEPTION ? ", "+\t\t\t\t\t\t(IOException)e.getException() : ", "+\t\t\t\t\t\tnew IOException(e.getMessage());", "+\t\t\t\tthrow new AbortCompilationUnit(null, ioException, encoding);", "+\t\t\t} else {", "+\t\t\t\tUtil.log(e, Messages.bind(Messages.file_notFound, file.getFullPath().toString()));", "+\t\t\t}", "-\tif (contents == null) // see https://bugs.eclipse.org/bugs/show_bug.cgi?id=129814", "+\tif (contents == null) { // see https://bugs.eclipse.org/bugs/show_bug.cgi?id=129814", "+\t\tif (JavaModelManager.getJavaModelManager().abortOnMissingSource.get() == Boolean.TRUE) {", "+\t\t\tIOException ioException = new IOException(Messages.buffer_closed);", "+\t\t\tIFile file = (IFile) getResource();", "+\t\t\t// Get encoding from file", "+\t\t\tString encoding;", "+\t\t\ttry {", "+\t\t\t\tencoding = file.getCharset();", "+\t\t\t} catch(CoreException ce) {", "+\t\t\t\t// do not use any encoding", "+\t\t\t\tencoding = null;", "+\t\t\t}", "+\t\t\tthrow new AbortCompilationUnit(null, ioException, encoding);", "+\t\t}", "+\t}"]}], "num": 19900}
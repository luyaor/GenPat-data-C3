{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d967162a8ea0ae4965884a99aca91a97", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c9f322f34c9caf7674bde03774b7e03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java", "commitBeforeChange": "78ca28be54dd37f4936afd7f9f84bc9cf69d2754", "commitAfterChange": "bffba7ea3757cad0d78bd45d4de11e93bc4b09c5", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public final void jumpOverMethodBody()", "signatureAfterChange": " public final void jumpOverMethodBody()", "diff": ["+\t\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\t\tbreak NextToken;", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_LOW_SURROGATE);", "+\t\t\t\t\t\t\t\tbreak NextToken;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\telse if (c >= LOW_SURROGATE_MIN_VALUE && c <= LOW_SURROGATE_MAX_VALUE) {", "-\t\t\t\t\t\t\tif (this.complianceLevel < ClassFileConstants.JDK1_5) {", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_UNICODE_ESCAPE);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_HIGH_SURROGATE);", "+\t\t\t\t\t\t} else if (c >= LOW_SURROGATE_MIN_VALUE && c <= LOW_SURROGATE_MAX_VALUE) {", "+\t\t\t\t\t\t\tbreak NextToken;", "-\t\t\t\t\t\tif (ScannerHelper.isDigit(this.currentCharacter)) {", "-\t\t\t\t\t\t\tscanNumber(false);", "-\t\t\t\t\t\t\tbreak NextToken;", "-\t\t\t\t\t\t}\t\t\t\t\t\t", "+//\t\t\t\t\t\tif (ScannerHelper.isDigit(this.currentCharacter)) {", "+//\t\t\t\t\t\t\tscanNumber(false);", "+//\t\t\t\t\t\t\tbreak NextToken;", "+//\t\t\t\t\t\t}\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2082ff5bf2670bf40430edd9ec34556c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "78ca28be54dd37f4936afd7f9f84bc9cf69d2754", "commitAfterChange": "bffba7ea3757cad0d78bd45d4de11e93bc4b09c5", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public final void jumpOverMethodBody()", "signatureAfterChange": " public final void jumpOverMethodBody()", "diff": ["+\t\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\t\tbreak NextToken;", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_LOW_SURROGATE);", "+\t\t\t\t\t\t\t\tbreak NextToken;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\telse if (c >= LOW_SURROGATE_MIN_VALUE && c <= LOW_SURROGATE_MAX_VALUE) {", "-\t\t\t\t\t\t\tif (this.complianceLevel < ClassFileConstants.JDK1_5) {", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_UNICODE_ESCAPE);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_HIGH_SURROGATE);", "+\t\t\t\t\t\t} else if (c >= LOW_SURROGATE_MIN_VALUE && c <= LOW_SURROGATE_MAX_VALUE) {", "+\t\t\t\t\t\t\tbreak NextToken;", "-\t\t\t\t\t\tif (ScannerHelper.isDigit(this.currentCharacter)) {", "-\t\t\t\t\t\t\tscanNumber(false);", "-\t\t\t\t\t\t\tbreak NextToken;", "-\t\t\t\t\t\t}\t\t\t\t\t\t", "+//\t\t\t\t\t\tif (ScannerHelper.isDigit(this.currentCharacter)) {", "+//\t\t\t\t\t\t\tscanNumber(false);", "+//\t\t\t\t\t\t\tbreak NextToken;", "+//\t\t\t\t\t\t}\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "858d7665130cde0fe09f2387cd643531", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void codeComplete(char[] snippet,int insertion,int position,char[][] localVariableTypeNames,char[][] localVariableNames,int[] localVariableModifiers,boolean isStatic,ICompletionRequestor requestor, WorkingCopyOwner owner) throws JavaModelException", "signatureAfterChange": " public void codeComplete(char[] snippet,int insertion,int position,char[][] localVariableTypeNames,char[][] localVariableNames,int[] localVariableModifiers,boolean isStatic,ICompletionRequestor requestor, WorkingCopyOwner owner) throws JavaModelException", "diff": ["-\tSearchableEnvironment environment = (SearchableEnvironment) project.getSearchableNameEnvironment();", "-\tNameLookup nameLookup = project.getNameLookup();", "-\tCompletionRequestorWrapper requestorWrapper = new CompletionRequestorWrapper(requestor,nameLookup);", "+\tSearchableEnvironment environment = (SearchableEnvironment) project.newSearchableNameEnvironment(owner);", "+\tCompletionRequestorWrapper requestorWrapper = new CompletionRequestorWrapper(requestor, environment.nameLookup);", "-\t\ttry {", "-\t\t\t// set the units to look inside", "-\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "-\t\t\tnameLookup.setUnitsToLookInside(workingCopies);", "-\t", "-\t\t\t// code complete", "-\t\t\tString encoding = project.getOption(JavaCore.CORE_ENCODING, true);", "-\t\t\t", "-\t\t\tchar[] prefix = CharOperation.concat(source.substring(0, insertion).toCharArray(), new char[]{'{'});", "-\t\t\tchar[] suffix = CharOperation.concat(new char[]{'}'}, source.substring(insertion).toCharArray());", "-\t\t\tchar[] fakeSource = CharOperation.concat(prefix, snippet, suffix);", "-\t\t\t", "-\t\t\tBasicCompilationUnit cu = ", "-\t\t\t\tnew BasicCompilationUnit(", "-\t\t\t\t\tfakeSource, ", "-\t\t\t\t\tnull,", "-\t\t\t\t\tgetElementName(),", "-\t\t\t\t\tencoding); ", "-\t", "-\t\t\tengine.complete(cu, prefix.length + position, prefix.length);", "-\t\t} finally {", "-\t\t\tif (nameLookup != null) {", "-\t\t\t\tnameLookup.setUnitsToLookInside(null);", "-\t\t\t}", "-\t\t}", "+\t\tString encoding = project.getOption(JavaCore.CORE_ENCODING, true);", "+\t\t", "+\t\tchar[] prefix = CharOperation.concat(source.substring(0, insertion).toCharArray(), new char[]{'{'});", "+\t\tchar[] suffix = CharOperation.concat(new char[]{'}'}, source.substring(insertion).toCharArray());", "+\t\tchar[] fakeSource = CharOperation.concat(prefix, snippet, suffix);", "+\t\t", "+\t\tBasicCompilationUnit cu = ", "+\t\t\tnew BasicCompilationUnit(", "+\t\t\t\tfakeSource, ", "+\t\t\t\tnull,", "+\t\t\t\tgetElementName(),", "+\t\t\t\tencoding); ", "+", "+\t\tengine.complete(cu, prefix.length + position, prefix.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4daafe3b3cb0143c7d906a9c351ef95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void codeComplete(char[] snippet,int insertion,int position,char[][] localVariableTypeNames,char[][] localVariableNames,int[] localVariableModifiers,boolean isStatic,ICompletionRequestor requestor, WorkingCopyOwner owner) throws JavaModelException", "signatureAfterChange": " public void codeComplete(char[] snippet,int insertion,int position,char[][] localVariableTypeNames,char[][] localVariableNames,int[] localVariableModifiers,boolean isStatic,ICompletionRequestor requestor, WorkingCopyOwner owner) throws JavaModelException", "diff": ["-\tSearchableEnvironment environment = (SearchableEnvironment) project.getSearchableNameEnvironment();", "-\tNameLookup nameLookup = project.getNameLookup();", "-\tCompletionRequestorWrapper requestorWrapper = new CompletionRequestorWrapper(requestor,nameLookup);", "+\tSearchableEnvironment environment = (SearchableEnvironment) project.newSearchableNameEnvironment(owner);", "+\tCompletionRequestorWrapper requestorWrapper = new CompletionRequestorWrapper(requestor, environment.nameLookup);", "-\t\ttry {", "-\t\t\t// set the units to look inside", "-\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "-\t\t\tnameLookup.setUnitsToLookInside(workingCopies);", "-\t", "-\t\t\t// code complete", "-\t\t\tString encoding = project.getOption(JavaCore.CORE_ENCODING, true); ", "-\t\t\t", "-\t\t\tchar[] prefix = CharOperation.concat(source.substring(0, insertion).toCharArray(), new char[]{'{'});", "-\t\t\tchar[] suffix =  CharOperation.concat(new char[]{'}'}, source.substring(insertion).toCharArray());", "-\t\t\tchar[] fakeSource = CharOperation.concat(prefix, snippet, suffix);", "-\t\t\t", "-\t\t\tBasicCompilationUnit cu = ", "-\t\t\t\tnew BasicCompilationUnit(", "-\t\t\t\t\tfakeSource, ", "-\t\t\t\t\tnull,", "-\t\t\t\t\tgetElementName(),", "-\t\t\t\t\tencoding); ", "-\t", "-\t\t\tengine.complete(cu, prefix.length + position, prefix.length);", "-\t\t} finally {", "-\t\t\tif (nameLookup != null) {", "-\t\t\t\tnameLookup.setUnitsToLookInside(null);", "-\t\t\t}", "-\t\t}", "+\t\t// code complete", "+\t\tString encoding = project.getOption(JavaCore.CORE_ENCODING, true); ", "+\t\t", "+\t\tchar[] prefix = CharOperation.concat(source.substring(0, insertion).toCharArray(), new char[]{'{'});", "+\t\tchar[] suffix =  CharOperation.concat(new char[]{'}'}, source.substring(insertion).toCharArray());", "+\t\tchar[] fakeSource = CharOperation.concat(prefix, snippet, suffix);", "+\t\t", "+\t\tBasicCompilationUnit cu = ", "+\t\t\tnew BasicCompilationUnit(", "+\t\t\t\tfakeSource, ", "+\t\t\t\tnull,", "+\t\t\t\tgetElementName(),", "+\t\t\t\tencoding); ", "+", "+\t\tengine.complete(cu, prefix.length + position, prefix.length);"]}], "num": 33116}
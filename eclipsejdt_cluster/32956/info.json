{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0107a262164bb0035c0ec7860501fccc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ec3a7a9d775a7eb736cd74fe17e4691", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "2b899d5709db9c6865f7da76d74928892a056b7b", "commitAfterChange": "1cce623392dc2abad468b342ade5233f38d20f6c", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 151, "signatureBeforeChange": " public void recursiveConstructorInvocation(TypeDeclaration typeDeclaration)", "signatureAfterChange": "  public void recursiveConstructorInvocation(ExplicitConstructorCall constructorCall)", "diff": ["- */", "-public void recursiveConstructorInvocation(TypeDeclaration typeDeclaration) {", "-\t// propagate the reference count, negative counts means leading to a super constructor invocation (directly or indirectly)", "-\tboolean hasChanged;", "-\tAbstractMethodDeclaration[] methods = typeDeclaration.methods;", "-\tint max = methods.length;", "-\tdo {", "-\t\thasChanged = false;", "-\t\tfor(int i = 0; i < max; i++){", "-\t\t\tif (methods[i].isConstructor()){", "-\t\t\t\tConstructorDeclaration constructor = (ConstructorDeclaration) methods[i];", "-\t\t\t\tif (constructor.referenceCount > 0){", "-\t\t\t\t\tConstructorDeclaration targetConstructor = constructor.constructorCall == null", "-\t\t\t\t\t\t? null", "-\t\t\t\t\t\t: (ConstructorDeclaration)(typeDeclaration.declarationOf(constructor.constructorCall.binding));", "-\t\t\t\t\tif ((targetConstructor == null) || (targetConstructor.referenceCount < 0)){", "-\t\t\t\t\t\thasChanged = true;", "-\t\t\t\t\t\tconstructor.referenceCount = -1;", "-\t\t\t\t\t}\t", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t} while (hasChanged);", "+public void recursiveConstructorInvocation(ExplicitConstructorCall constructorCall) {", "-\t// all remaining constructors with a positive count are still involved in a cycle", "-\tfor(int i = 0; i < max; i++){", "-\t\tif (methods[i].isConstructor()){", "-\t\t\tConstructorDeclaration constructor = (ConstructorDeclaration) methods[i];", "-\t\t\tif (constructor.referenceCount > 0){", "-\t\t\t\tthis.referenceContext = constructor;", "-\t\t\t\tthis.handle(", "-\t\t\t\t\tIProblem.RecursiveConstructorInvocation,", "-\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\tnew String(constructor.constructorCall.binding.declaringClass.readableName()), ", "-\t\t\t\t\t\tparametersAsString(constructor.constructorCall.binding)", "-\t\t\t\t\t},", "-\t\t\t\t\tnew String[] {", "-\t\t\t\t\t\tnew String(constructor.constructorCall.binding.declaringClass.shortReadableName()), ", "-\t\t\t\t\t\tparametersAsShortString(constructor.constructorCall.binding)", "-\t\t\t\t\t},", "-\t\t\t\t\tconstructor.constructorCall.sourceStart,", "-\t\t\t\t\tconstructor.constructorCall.sourceEnd);", "-\t\t\t}", "-\t\t}", "-\t}", "+\tthis.handle(", "+\t\tIProblem.RecursiveConstructorInvocation,", "+\t\tnew String[] {", "+\t\t\tnew String(constructorCall.binding.declaringClass.readableName()), ", "+\t\t\tparametersAsString(constructorCall.binding)", "+\t\t},", "+\t\tnew String[] {", "+\t\t\tnew String(constructorCall.binding.declaringClass.shortReadableName()), ", "+\t\t\tparametersAsShortString(constructorCall.binding)", "+\t\t},", "+\t\tconstructorCall.sourceStart,", "+\t\tconstructorCall.sourceEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9721c6463cffb227bf136f8913103ab1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "830277de86eee08c18b5e0da495c01b96cccdad2", "commitAfterChange": "a874c20c38675a0faf72bfd6c0cb69354f6ff3fb", "methodNumberBeforeChange": 138, "methodNumberAfterChange": 19, "signatureBeforeChange": " public boolean inlineForwardReferencesFromLabelsTargeting(BranchLabel targetLabel, int gotoLocation)", "signatureAfterChange": " public boolean hasFramePositions()", "diff": ["-}", "-public boolean inlineForwardReferencesFromLabelsTargeting(BranchLabel targetLabel, int gotoLocation) {", "-    if (targetLabel.delegate != null) return false; // already inlined", "-    int chaining = L_UNKNOWN;", "-", "-    boolean removeFrame = true;", "-    for (int i = this.countLabels - 1; i >= 0; i--) {", "-        BranchLabel currentLabel = labels[i];", "-        if (currentLabel.position != gotoLocation) break;", "-        if (currentLabel == targetLabel) {", "-            chaining |= L_CANNOT_OPTIMIZE;", "-            continue;", "-        }", "-        if (currentLabel.isStandardLabel()) {", "-            if (currentLabel.delegate != null) continue;", "-            chaining |= L_OPTIMIZABLE;", "-            if (currentLabel.forwardReferenceCount() == 0 && ((currentLabel.tagBits & BranchLabel.USED) != 0)) {", "-                removeFrame = false;", "-            }", "-            continue;", "-        }", "-        // case label", "-        removeFrame = false;", "-        chaining |= L_CANNOT_OPTIMIZE;", "-    }", "-    if ((chaining & L_OPTIMIZABLE) != 0) {", "-        for (int i = this.countLabels - 1; i >= 0; i--) {", "-            BranchLabel currentLabel = labels[i];", "-            if (currentLabel.position != gotoLocation) break;", "-            if (currentLabel == targetLabel) continue;", "-            if (currentLabel.isStandardLabel()) {", "-                if (currentLabel.delegate != null) continue;", "-                targetLabel.becomeDelegateFor(currentLabel);", "-                // we should remove the frame corresponding to otherLabel position in order to prevent unused stack frame", "-                if (removeFrame) {", "-                    currentLabel.tagBits &= ~BranchLabel.USED;", "-                    this.removeStackFrameFor(gotoLocation);", "-                }", "-            }", "-        }", "-    }", "-    return (chaining & (L_OPTIMIZABLE|L_CANNOT_OPTIMIZE)) == L_OPTIMIZABLE; // check was some standards, and no case/recursive", "-}", "+}", "+public boolean hasFramePositions() {", "+\treturn this.framePositions.size() != 0;", "+}"]}], "num": 32956}
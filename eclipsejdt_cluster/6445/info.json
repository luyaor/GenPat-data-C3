{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "06a73054a0e3737fd45a3854279393e0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cb67bf93508b63f008d65fc5890b83d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 81, "signatureBeforeChange": "  private void generateFieldAccess(byte opcode, int returnTypeSize, ReferenceBinding binding, char[] name, TypeBinding type)", "signatureAfterChange": "  public void fieldAccess(byte opcode, FieldBinding fieldBinding, TypeBinding declaringClass)", "diff": ["+public void fieldAccess(byte opcode, FieldBinding fieldBinding, TypeBinding declaringClass) {", "+\tif (declaringClass == null) declaringClass = fieldBinding.declaringClass;", "+\tif (declaringClass.leafComponentType().isNestedType()) {", "+\t\tthis.classFile.recordInnerClasses(declaringClass);", "+\t}", "+\tTypeBinding returnType = fieldBinding.type;", "+\tint returnTypeSize;", "+\tswitch (returnType.id) {", "+\t\tcase TypeIds.T_long :", "+\t\tcase TypeIds.T_double :", "+\t\t\treturnTypeSize = 2;", "+\t\t\tbreak;", "+\t\tdefault :", "+\t\t\treturnTypeSize = 1;", "+\t\t\tbreak;", "+\t}", "+\tthis.fieldAccess(opcode, returnTypeSize, declaringClass.constantPoolName(), fieldBinding.name, returnType.signature());", "+}", "-", "-private void generateFieldAccess(byte opcode, int returnTypeSize, ReferenceBinding binding, char[] name, TypeBinding type) {", "-\tif (binding.isNestedType()) {", "-\t\tthis.classFile.recordInnerClasses(binding);", "-\t}", "-\tTypeBinding leafComponentType = type.leafComponentType();", "-\tif (leafComponentType.isNestedType()) {", "-\t\tthis.classFile.recordInnerClasses(leafComponentType);", "-\t}", "-\tthis.generateFieldAccess(opcode, returnTypeSize, binding.constantPoolName(), name, type.signature());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b4ea75370d6309f19997a2cfcc7504f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final boolean canBeSeenByForCodeSnippet(MethodBinding methodBinding, TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "signatureAfterChange": " public final boolean canBeSeenByForCodeSnippet(MethodBinding methodBinding, TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "diff": ["-\tif (invocationType == methodBinding.declaringClass) return true;", "+\tif (TypeBinding.equalsEquals(invocationType, methodBinding.declaringClass)) return true;", "-\t\tif (invocationType == methodBinding.declaringClass) return true;", "+\t\tif (TypeBinding.equalsEquals(invocationType, methodBinding.declaringClass)) return true;", "-\t\tif (receiverType != methodBinding.declaringClass) return false;", "+\t\tif (TypeBinding.notEquals(receiverType, methodBinding.declaringClass)) return false;", "-\t\tif (invocationType != methodBinding.declaringClass) {", "+\t\tif (TypeBinding.notEquals(invocationType, methodBinding.declaringClass)) {", "-\t\t\tif (outerInvocationType != outerDeclaringClass) return false;", "+\t\t\tif (TypeBinding.notEquals(outerInvocationType, outerDeclaringClass)) return false;", "-\t\t\tif (originalDeclaringClass == type.erasure().original()) return true;", "+\t\t\tif (TypeBinding.equalsEquals(originalDeclaringClass, type.erasure().original())) return true;", "-\t\t\tif (originalDeclaringClass == type.original()) return true;", "+\t\t\tif (TypeBinding.equalsEquals(originalDeclaringClass, type.original())) return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5def853caee6d9682ecbf74fc252f7bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public final boolean canBeSeenByForCodeSnippet(FieldBinding fieldBinding, TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "signatureAfterChange": "  public final boolean canBeSeenByForCodeSnippet(FieldBinding fieldBinding, TypeBinding receiverType, InvocationSite invocationSite, Scope scope)", "diff": ["-\tif (invocationType == fieldBinding.declaringClass) return true;", "+\tif (TypeBinding.equalsEquals(invocationType, fieldBinding.declaringClass)) return true;", "-\t\tif (invocationType == fieldBinding.declaringClass) return true;", "+\t\tif (TypeBinding.equalsEquals(invocationType, fieldBinding.declaringClass)) return true;", "-\t\tif (receiverType != fieldBinding.declaringClass) return false;", "+\t\tif (TypeBinding.notEquals(receiverType, fieldBinding.declaringClass)) return false;", "-\t\tif (invocationType != fieldBinding.declaringClass) {", "+\t\tif (TypeBinding.notEquals(invocationType, fieldBinding.declaringClass)) {", "-\t\t\tif (outerInvocationType != outerDeclaringClass) return false;", "+\t\t\tif (TypeBinding.notEquals(outerInvocationType, outerDeclaringClass)) return false;", "-\t\t\tif (originalDeclaringClass == type.erasure().original()) return true;\t", "+\t\t\tif (TypeBinding.equalsEquals(originalDeclaringClass, type.erasure().original())) return true;\t", "-\t\t\tif (originalDeclaringClass == type.original()) return true;", "+\t\t\tif (TypeBinding.equalsEquals(originalDeclaringClass, type.original())) return true;"]}], "num": 6445}
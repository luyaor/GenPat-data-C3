{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94bad30b2ff92722cbe71fda05b9b48a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00213ce6276db01e225f253e324aa4c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "5292c15945b50fef548808f853ce39423b5670f2", "commitAfterChange": "e32dbbc9904e1f7eb4c6e79a7595e742217638b3", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 69, "signatureBeforeChange": "  \tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block)", "signatureAfterChange": "  \tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block, boolean textOnNewLine)", "diff": ["-\tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block) {", "+\tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block, boolean textOnNewLine) {", "-\t\tboolean indentRootTags = this.formatter.preferences.comment_indent_root_tags && !block.isDescription();", "-\t\tboolean indentParamTag = this.formatter.preferences.comment_indent_parameter_description && block.isParamTag();", "-\t\tStringBuffer indentationBuffer = null;", "-\t\tif (indentRootTags) {", "-\t\t\tint indentLevel = this.indentationLevel;", "-\t\t\tint indentations = this.numberOfIndentations;", "-\t\t\tthis.numberOfIndentations += (BLOCK_LINE_PREFIX_LENGTH / this.indentationSize) + 1;", "-\t\t\tthis.indentationLevel = this.numberOfIndentations * this.indentationSize;", "-\t\t\tint currentColumn = this.column;", "-\t\t\tthis.column = firstColumn;", "-\t\t\tif (indentParamTag) {", "-\t\t\t\tthis.indentationLevel += this.indentationSize;", "-\t\t\t\tthis.numberOfIndentations++;", "-\t\t\t}", "-\t\t\tprintIndentationIfNecessary(indentationBuffer = new StringBuffer());", "-\t\t\tthis.column = currentColumn;", "-\t\t\tthis.indentationLevel = indentLevel;", "-\t\t\tthis.numberOfIndentations = indentations;", "-\t\t}", "+\t\tStringBuffer indentationBuffer = printJavadocIndentationBuffer(block, firstColumn);", "-\t\tboolean textOnNewLine = (text == block.nodes[0] && ((!block.isInlined() && block.isParamTag() && this.formatter.preferences.comment_insert_new_line_for_parameter) || !block.hasTextOnTagLine())) || text.linesBefore > 0;", "-\t\t\t\tboolean wasHtmlTag = false;", "+\t\t\t\tint nodeKind = 0; // text break", "+\t\t\t\t\tif (newLines == 0) {", "+\t\t\t\t\t\tnewLines = printJavadocBlockNodesNewLines(block, node, previousEnd);", "+\t\t\t\t\t}", "-\t\t\t\t\t\t\tlinesAfter = printJavadocHtmlTag(htmlTag, block);", "+\t\t\t\t\t\t\tlinesAfter = printJavadocHtmlTag(htmlTag, block, textOnNewLine);", "+\t\t\t\t\t\tnodeKind = 1; // text", "+\t\t\t\t\t\tnodeKind = 2; // block", "-\t\t\t\t\twasHtmlTag = true;", "-\t\t\t\t\tif (clearBlankLines) {", "+\t\t\t\t\tif (clearBlankLines && linesGap > 1) {", "-\t\t\t\t\t\tif (idx==0 || (idx==max && ((text.htmlIndexes[max] & JAVADOC_TAGS_ID_MASK) == htmlTagID)) || (idx < max && wasHtmlTag && (text.htmlIndexes[idx-1] & JAVADOC_TAGS_ID_MASK) != JAVADOC_IMMUTABLE_TAGS_ID)) {", "+\t\t\t\t\t\tif (idx==0 || (idx==max && ((text.htmlIndexes[max] & JAVADOC_TAGS_ID_MASK) == htmlTagID)) || (idx < max && nodeKind==1 && (text.htmlIndexes[idx-1] & JAVADOC_TAGS_ID_MASK) != JAVADOC_IMMUTABLE_TAGS_ID)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06c708683fda7bc1dddfa0a7227dee16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "00cabdb6b90ee48364f71e75a5da5edca1e7837c", "commitAfterChange": "fcccc4dd1377e549112e0bdc9a74b0eb625c6ab2", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "  \tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block)", "signatureAfterChange": "  \tprivate int printJavadocHtmlTag(FormatJavadocText text, FormatJavadocBlock block)", "diff": ["-\t\t", "-\t\t// Local variables init", "+", "+\t\t// Compute indentation if necessary", "+\t\tboolean indentRootTags = this.formatter.preferences.comment_indent_root_tags && !block.isDescription();", "+\t\tboolean indentParamTag = this.formatter.preferences.comment_indent_parameter_description && block.isParamTag();", "+\t\tboolean headerLine = block.isHeaderLine() && this.lastNumberOfNewLines == 0;", "+\t\tint firstColumn = 1 + this.indentationLevel + BLOCK_LINE_PREFIX_LENGTH;", "+\t\tif (headerLine) firstColumn++;", "+\t\tStringBuffer indentationBuffer = null;", "+\t\tif (indentRootTags) {", "+\t\t\tint indentLevel = this.indentationLevel;", "+\t\t\tint indentations = this.numberOfIndentations;", "+\t\t\tthis.numberOfIndentations += (BLOCK_LINE_PREFIX_LENGTH / this.indentationSize) + 1;", "+\t\t\tthis.indentationLevel = this.numberOfIndentations * this.indentationSize;", "+\t\t\tint currentColumn = this.column;", "+\t\t\tthis.column = firstColumn;", "+\t\t\tif (indentParamTag) {", "+\t\t\t\tthis.indentationLevel += this.indentationSize;", "+\t\t\t\tthis.numberOfIndentations++;", "+\t\t\t}", "+\t\t\tprintIndentationIfNecessary(indentationBuffer = new StringBuffer());", "+\t\t\tthis.column = currentColumn;", "+\t\t\tthis.indentationLevel = indentLevel;", "+\t\t\tthis.numberOfIndentations = indentations;", "+\t\t}", "+", "+\t\t// Local variables init", "-\t\t\t\t\tif (textStart < previousEnd) addReplaceEdit(textStart, previousEnd, buffer.toString());", "+\t\t\t\t\tif (textStart < previousEnd) {", "+\t\t\t\t\t\taddReplaceEdit(textStart, previousEnd, buffer.toString());", "+//\t\t\t\t\t\tthis.column += buffer.length();", "+\t\t\t\t\t}", "+\t\t\t\t\tboolean immutable = htmlTag == null ? false : htmlTag.isImmutableHtmlTag();", "+\t\t\t\t\tboolean overEndLine = false;", "+\t\t\t\t\tif (immutable) {", "+\t\t\t\t\t\toverEndLine = (this.column + htmlTag.getLength()) > this.formatter.preferences.comment_line_length;", "+\t\t\t\t\t\tif (overEndLine) {", "+\t\t\t\t\t\t\tif (newLines < 1) newLines = 1;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tbuffer = new StringBuffer();", "-\t\t\t\t\t\tlinesAfter = printJavadocHtmlTag(htmlTag, block);", "+\t\t\t\t\t\tif (immutable) {", "+\t\t\t\t\t\t\t// do not change immutable tags, just increment column", "+\t\t\t\t\t\t\tthis.column += getTextLength(block, htmlTag);", "+\t\t\t\t\t\t\tlinesAfter = 0;", "+\t\t\t\t\t\t\tif (overEndLine) {", "+\t\t\t\t\t\t\t\t// need to indent", "+\t\t\t\t\t\t\t\tif (indentationBuffer != null) {", "+\t\t\t\t\t\t\t\t\taddInsertEdit(node.sourceStart, indentationBuffer.toString());", "+\t\t\t\t\t\t\t\t}", "+//\t\t\t\t\t\t\t\tbuffer.append(' ');", "+//\t\t\t\t\t\t\t\tthis.column++;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tlinesAfter = printJavadocHtmlTag(htmlTag, block);", "+\t\t\t\t\t\t}", "-\t\t\t\t\tbuffer = new StringBuffer();", "-\t\t\t\t\ttextStart = node.sourceEnd + 1;", "+\t\t\t\t\ttextStart = node.sourceEnd+1;", "-\t\t\t\t\t\tif (wasHtmlTag || idx==0 || (idx==max && ((text.htmlIndexes[max] & JAVADOC_TAGS_ID_MASK) == htmlTagID))) {", "+//\t\t\t\t\t\tif (wasHtmlTag || idx==0 || (idx==max && ((text.htmlIndexes[max] & JAVADOC_TAGS_ID_MASK) == htmlTagID))) {", "+\t\t\t\t\t\tif (idx==0 || (idx==max && ((text.htmlIndexes[max] & JAVADOC_TAGS_ID_MASK) == htmlTagID)) || (idx < max && wasHtmlTag && (text.htmlIndexes[idx-1] & JAVADOC_TAGS_ID_MASK) != JAVADOC_IMMUTABLE_TAGS_ID)) {"]}], "num": 60573}
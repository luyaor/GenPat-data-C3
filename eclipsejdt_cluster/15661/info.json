{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19eb90a9363d44ec0283626c65cae64c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a645ff2c07fc340438b5e7f9e2cb4a53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "78c62e3a4157070f714848f4de312a55f14f5144", "commitAfterChange": "fb48e11da0ebe84c63fab7b3cb5afd39c0ba6101", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate static boolean checkInvocationArgument(BlockScope scope, Expression argument, TypeBinding parameterType, TypeBinding argumentType)", "signatureAfterChange": " \tprivate static boolean checkInvocationArgument(BlockScope scope, Expression argument, TypeBinding parameterType, TypeBinding argumentType)", "diff": ["-\t\tif (argumentType != NullBinding && parameterType.isWildcard() && ((WildcardBinding) parameterType).kind != Wildcard.SUPER)", "-\t\t    return true; // unsafeWildcardInvocation", "+\t\tif (argumentType != NullBinding && parameterType.isWildcard()) {", "+\t\t\tWildcardBinding wildcard = (WildcardBinding) parameterType;", "+\t\t\tif (wildcard.kind != Wildcard.SUPER && wildcard.otherBounds == null) // lub wildcards are tolerated", "+\t\t    \treturn true; // unsafeWildcardInvocation", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "accdeefad49bd553682b2f1d55805c3d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "4addbf3fcf740f0ae7bd5f62f816a19ffc370ba8", "commitAfterChange": "0d32c20ed2cca4af752cdfe8890dae5f9b83ecc6", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 118, "signatureBeforeChange": "  \tprivate void findVariableNames(char[] name, TypeReference type , char[][] discouragedNames, char[][] forbiddenNames, int kind, int modifiers)", "signatureAfterChange": "  \tprivate void findVariableNames(char[] name, TypeReference type , char[][] discouragedNames, char[][] forbiddenNames, int kind, int modifiers)", "diff": ["-", "-\t\t\ttype.resolvedType != null &&", "-\t\t\ttype.resolvedType.problemId() == ProblemReasons.NoError){", "+\t\t\ttype.resolvedType != null) {", "-\t\t\tfindVariableName(", "-\t\t\t\tname,", "-\t\t\t\ttb.leafComponentType().qualifiedPackageName(),", "-\t\t\t\ttb.leafComponentType().qualifiedSourceName(),", "-\t\t\t\ttb.leafComponentType().sourceName(),", "-\t\t\t\ttb,", "-\t\t\t\tdiscouragedNames,", "-\t\t\t\tforbiddenNames,", "-\t\t\t\ttype.dimensions(),", "-\t\t\t\tkind,", "-\t\t\t\tmodifiers);", "-\t\t}/*\telse {", "-\t\t\tchar[][] typeName = type.getTypeName();", "-\t\t\tfindVariableName(", "-\t\t\t\tname,", "-\t\t\t\tNoChar,", "-\t\t\t\tCharOperation.concatWith(typeName, '.'),", "-\t\t\t\ttypeName[typeName.length - 1],", "-\t\t\t\texcludeNames,", "-\t\t\t\ttype.dimensions());", "-\t\t}*/", "+\t\t\t", "+\t\t\tif (tb.problemId() == ProblemReasons.NoError &&", "+\t\t\t\t\ttb != Scope.getBaseType(VOID)) {", "+\t\t\t\tfindVariableName(", "+\t\t\t\t\tname,", "+\t\t\t\t\ttb.leafComponentType().qualifiedPackageName(),", "+\t\t\t\t\ttb.leafComponentType().qualifiedSourceName(),", "+\t\t\t\t\ttb.leafComponentType().sourceName(),", "+\t\t\t\t\ttb,", "+\t\t\t\t\tdiscouragedNames,", "+\t\t\t\t\tforbiddenNames,", "+\t\t\t\t\ttype.dimensions(),", "+\t\t\t\t\tkind,", "+\t\t\t\t\tmodifiers);", "+\t\t\t}", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4165247a5310a9a042a5d56a3430b55", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "8d011b03381d3efb22f096963964840a728e892c", "commitAfterChange": "637d66e0d1e2e285ddeeaf1de62c4418b17f95fd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic void resolve(MethodScope initializationScope)", "signatureAfterChange": " \t \tpublic void resolve(MethodScope initializationScope)", "diff": ["-\t\t\t\tif (checkLocal && declaringType.enclosingType() != null) {", "+\t\t\t\tif (checkLocal) {", "-\t\t\t\t\tBinding existingVariable = outerScope.getBinding(this.name, Binding.VARIABLE, this, false /*do not resolve hidden field*/);", "-\t\t\t\t\tif (existingVariable != null && this.binding != existingVariable && existingVariable.isValidBinding()", "-\t\t\t\t\t\t\t&& (!(existingVariable instanceof FieldBinding)", "-\t\t\t\t\t\t\t\t\t|| ((FieldBinding) existingVariable).isStatic() ", "-\t\t\t\t\t\t\t\t\t|| !declaringType.isStatic())) {", "-\t\t\t\t\t\tinitializationScope.problemReporter().fieldHiding(this, existingVariable);", "+\t\t\t\t\tif (outerScope.kind != Scope.COMPILATION_UNIT_SCOPE) {", "+\t\t\t\t\t\tBinding existingVariable = outerScope.getBinding(this.name, Binding.VARIABLE, this, false /*do not resolve hidden field*/);", "+\t\t\t\t\t\tif (existingVariable != null && this.binding != existingVariable && existingVariable.isValidBinding()", "+\t\t\t\t\t\t\t\t&& (!(existingVariable instanceof FieldBinding)", "+\t\t\t\t\t\t\t\t\t\t|| ((FieldBinding) existingVariable).isStatic() ", "+\t\t\t\t\t\t\t\t\t\t|| !declaringType.isStatic())) {", "+\t\t\t\t\t\t\tinitializationScope.problemReporter().fieldHiding(this, existingVariable);", "+\t\t\t\t\t\t}"]}], "num": 15661}
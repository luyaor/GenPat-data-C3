{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd7f39e6cada1d795d7210523e7748fe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00c147b2fd93950d382f9467865fce79", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "ce5e99be53ea4136316bd613e61153c059e7a481", "commitAfterChange": "6ba8969cfb610f1f976fc162e09094107082e31f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic String format( \t\tString source, \t\tint indentationLevel, \t\tint[] positions, \t\tString lineSeparator)", "signatureAfterChange": " \tpublic String format( \t\tString source, \t\tint indentationLevel, \t\tint[] positions, \t\tString lineSeparator)", "diff": ["-\t\tMap options = JavaCore.getOptions();", "-\t\t// probing algorithm", "-\t\t/*", "-\t\t * 1) expression", "-\t\t * 2) statements", "-\t\t * 3) classbody declarations", "-\t\t * 4) compilation unit", "-\t\t */", "-\t\tExpression expression = parseExpression(source.toCharArray(), options);", "-\t\t", "-\t\tif (expression != null) {", "-\t\t\treturn internalFormatExpression(source, indentationLevel, positions, lineSeparator, options, expression);", "-\t\t}", "-", "-\t\tConstructorDeclaration constructorDeclaration = parseStatements(source.toCharArray(), options);", "-\t\t", "-\t\tif (constructorDeclaration.statements != null) {", "-\t\t\treturn internalFormatStatements(source, indentationLevel, positions, lineSeparator, options, constructorDeclaration);", "-\t\t}", "-\t\t", "-\t\tAstNode[] bodyDeclarations = parseClassBodyDeclarations(source.toCharArray(), options);", "-\t\t", "-\t\tif (bodyDeclarations != null) {", "-\t\t\treturn internalFormatClassBodyDeclarations(source, indentationLevel, positions, lineSeparator, options, bodyDeclarations);", "-\t\t}", "-", "-\t\treturn format(K_COMPILATION_UNIT, source, indentationLevel, positions, lineSeparator, JavaCore.getOptions());", "+\t\treturn format(K_UNKNOWN, source, indentationLevel, positions, lineSeparator, JavaCore.getOptions());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb77b2e2d78555aa334e657e70176610", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "57799a8beed7490f3a4382e24299a6b44ffe4faf", "commitAfterChange": "a623a62c4949e78ffb1e3db21245d05c22d9fb98", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic String format( \t\tString source, \t\tint indentationLevel, \t\tint[] positions, \t\tString lineSeparator)", "signatureAfterChange": " \tpublic String format( \t\tString source, \t\tint indentationLevel, \t\tint[] positions, \t\tString lineSeparator)", "diff": ["-\t\t\treturn format(K_COMPILATION_UNIT, source, indentationLevel, positions, lineSeparator, JavaCore.getOptions());", "+\t\t", "+\t\tMap options = JavaCore.getOptions();", "+\t\t// probing algorithm", "+\t\t/*", "+\t\t * 1) expression", "+\t\t * 2) statements", "+\t\t * 3) classbody declarations", "+\t\t * 4) compilation unit", "+\t\t */", "+\t\tExpression expression = parseExpression(source.toCharArray(), options);", "+\t\t", "+\t\tif (expression != null) {", "+\t\t\treturn internalFormatExpression(source, indentationLevel, positions, lineSeparator, options, expression);", "+\t\t}", "+", "+\t\tConstructorDeclaration constructorDeclaration = parseStatements(source.toCharArray(), options);", "+\t\t", "+\t\tif (constructorDeclaration.statements != null) {", "+\t\t\treturn internalFormatStatements(source, indentationLevel, positions, lineSeparator, options, constructorDeclaration);", "+\t\t}", "+\t\t", "+\t\tAstNode[] bodyDeclarations = parseClassBodyDeclarations(source.toCharArray(), options);", "+\t\t", "+\t\tif (bodyDeclarations != null) {", "+\t\t\treturn internalFormatClassBodyDeclarations(source, indentationLevel, positions, lineSeparator, options, bodyDeclarations);", "+\t\t}", "+", "+\t\treturn format(K_COMPILATION_UNIT, source, indentationLevel, positions, lineSeparator, JavaCore.getOptions());"]}], "num": 33561}
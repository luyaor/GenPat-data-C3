{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d88b72d5a73045940f6ed1aaeb94539d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3101c1f9de202bb2e5df3992b5c743a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "11d37ba24baa8a8d5177d1ba6ab1649342a0de47", "commitAfterChange": "3b53dc72aa60c63aafa5e63cea69df72f36f7346", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "signatureAfterChange": " \t \tpublic boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "diff": ["-\t\tboolean isCastingToBoundParameterized;", "-\t\tif (match != null && (", "-\t\t\t\t(isCastingToBoundParameterized = castType.isBoundParameterizedType())", "-\t\t\t\t|| \texpressionType.isBoundParameterizedType())) {", "-\t\t\t", "-\t\t\tif (match.isProvablyDistinctFrom(isNarrowing ? expressionType : castType, 0)) {", "-\t\t\t\treturn false; ", "-\t\t\t}", "-\t\t\tif (isCastingToBoundParameterized ", "-\t\t\t\t\t&& (isNarrowing ? !expressionType.isEquivalentTo(match) : !match.isEquivalentTo(castType))) {", "+\t\tif (match != null && match.isProvablyDistinctFrom(isNarrowing ? expressionType : castType, 0)) {", "+\t\t\treturn false; ", "+\t\t}", "+\t\tswitch (castType.kind()) {", "+\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\tif (castType.isBoundParameterizedType()) {", "+\t\t\t\t\tif (match == null) { // unrelated types", "+\t\t\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t\tswitch (match.kind()) {", "+\t\t\t\t\t\tcase Binding.PARAMETERIZED_TYPE :", "+\t\t\t\t\t\t\tif (isNarrowing) {", "+\t\t\t\t\t\t\t\t// [JLS 5.5] T <: S", "+\t\t\t\t\t\t\t\tif (expressionType.isRawType() || !expressionType.isEquivalentTo(match)) {", "+\t\t\t\t\t\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t// [JLS 5.5] S has no subtype X != T, such that |X| == |T|", "+\t\t\t\t\t\t\t\tTypeBinding genericCastType = castType.erasure(); // jump to generic type", "+\t\t\t\t\t\t\t\tTypeBinding genericMatch = genericCastType.findSuperTypeWithSameErasure(expressionType);", "+\t\t\t\t\t\t\t\tif (genericMatch == match) {", "+\t\t\t\t\t\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t// [JLS 5.5] T >: S", "+\t\t\t\t\t\t\t\tif (!match.isEquivalentTo(castType)) {", "+\t\t\t\t\t\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Binding.RAW_TYPE :", "+\t\t\t\t\t\t\tthis.bits |= UnsafeCast; // upcast since castType is known to be bound paramType", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\tif (isNarrowing){", "+\t\t\t\t\t\t\t\t// match is not parameterized or raw, then any other subtype of match will erase  to |T|", "+\t\t\t\t\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.ARRAY_TYPE :", "+\t\t\t\tTypeBinding leafType = castType.leafComponentType();", "+\t\t\t\tif (isNarrowing && (leafType.isBoundParameterizedType() || leafType.isTypeVariable())) {", "+\t\t\t\t\tthis.bits |= UnsafeCast;", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase Binding.TYPE_PARAMETER :", "-\t\t\t\treturn true;", "-\t\t\t} else if ((castType.tagBits & TagBits.HasDirectWildcard) == 0", "-\t\t\t\t\t&& (!match.isParameterizedType() || expressionType.isRawType())) {", "-\t\t\t\tthis.bits |= UnsafeCast;", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t} else if (isNarrowing) {", "-\t\t\tTypeBinding leafType = castType.leafComponentType();", "-\t\t\tif (expressionType.id == T_JavaLangObject && castType.isArrayType() && leafType.isBoundParameterizedType()) {", "-\t\t\t\tthis.bits |= UnsafeCast;", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tif (match == null && castType.isBoundParameterizedType()) { // cast between unrelated types", "-\t\t\t\tthis.bits |= UnsafeCast;", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tif (leafType.isTypeVariable()) {", "-\t\t\t\tthis.bits |= UnsafeCast;", "-\t\t\t\treturn true;", "-\t\t\t}", "+\t\t\t\treturn true;\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db7a03d5c894c9e92178976ca1159713", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "99d47e4046e97803f75625986f5eb5ffc13cddfe", "commitAfterChange": "8282cb3c46786d73ca763e64384724ac9c0798d9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "signatureAfterChange": " \tpublic void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint)", "diff": ["-\tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes) {", "+\tpublic void collectSubstitutes(Scope scope, TypeBinding otherType, Map substitutes, int constraint) {", "+\t\t", "+\t", "+\t\tif (otherType.isBaseType()) {", "+\t\t\tTypeBinding boxedType = scope.environment().computeBoxingType(otherType);", "+\t\t\tif (boxedType == otherType) return;", "+\t\t\totherType = boxedType;", "+\t\t}", "-\t    TypeBinding[] variableSubstitutes = (TypeBinding[])substitutes.get(this);", "+\t\t// reverse constraint, to reflect variable on rhs:   A << T --> T >: A", "+\t\tint variableConstraint;", "+\t\tswitch(constraint) {", "+\t\t\tcase CONSTRAINT_EQUAL :", "+\t\t\t\tvariableConstraint = CONSTRAINT_EQUAL;", "+\t\t\t\tbreak;", "+\t\t\tcase CONSTRAINT_EXTENDS :", "+\t\t\t\tvariableConstraint = CONSTRAINT_SUPER;", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t//case CONSTRAINT_SUPER :", "+\t\t\t\tvariableConstraint = CONSTRAINT_EXTENDS;", "+\t\t\t\tbreak;", "+\t\t}", "+\t    TypeBinding[][] variableSubstitutes = (TypeBinding[][])substitutes.get(this);", "-\t\t        int length = variableSubstitutes.length;", "-\t\t        for (int i = 0; i < length; i++) {", "-\t\t        \tTypeBinding substitute = variableSubstitutes[i];", "-\t\t            if (substitute == otherType) return; // already there", "-\t\t            if (substitute == null) {", "-\t\t                variableSubstitutes[i] = otherType;", "-\t\t                break insertLoop;", "-\t\t            }", "-\t\t        }", "-\t\t        // no free spot found, need to grow", "-\t\t        System.arraycopy(variableSubstitutes, 0, variableSubstitutes = new TypeBinding[2*length], 0, length);", "-\t\t        variableSubstitutes[length] = otherType;", "-\t\t        substitutes.put(this, variableSubstitutes);", "+\t\t    \tTypeBinding[] constraintSubstitutes = variableSubstitutes[variableConstraint];", "+\t\t    \tint length;", "+\t\t    \tif (constraintSubstitutes == null) {", "+\t\t    \t\tlength = 0;", "+\t\t    \t\tconstraintSubstitutes = new TypeBinding[1];", "+\t\t    \t} else {", "+\t\t    \t\tlength = constraintSubstitutes.length;", "+\t\t\t        for (int i = 0; i < length; i++) {", "+\t\t\t        \tTypeBinding substitute = constraintSubstitutes[i];", "+\t\t\t            if (substitute == otherType) return; // already there", "+\t\t\t            if (substitute == null) {", "+\t\t\t                constraintSubstitutes[i] = otherType;", "+\t\t\t                break insertLoop;", "+\t\t\t            }", "+\t\t\t        }", "+\t\t\t        // no free spot found, need to grow", "+\t\t\t        System.arraycopy(constraintSubstitutes, 0, constraintSubstitutes = new TypeBinding[2*length], 0, length);", "+\t\t    \t}", "+\t\t        constraintSubstitutes[length] = otherType;", "+\t\t        variableSubstitutes[variableConstraint] = constraintSubstitutes;", "-            // recurse in variable bounds (82187)", "-            if (this.superclass != null && this.firstBound == this.superclass) {", "-                this.superclass.collectSubstitutes(otherType, substitutes);", "-            }", "-            for (int i = 0, length = this.superInterfaces.length; i < length; i++) {", "-                this.superInterfaces[i].collectSubstitutes(otherType, substitutes);", "-            }"]}], "num": 49451}
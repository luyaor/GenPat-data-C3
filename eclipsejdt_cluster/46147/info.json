{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "272e4009a8580150d4a6c45448ad08db", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d65bc62d69c4d7915636f8fa0db2e92", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "6cd0099c2021e34815eaba987a586ae52dacf569", "commitAfterChange": "d6dc74869d8c303dbb7a6d8b327d8b104cd5865b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 33, "signatureBeforeChange": " \tprivate ReferenceExpression registerCopy(TypeBinding targetType, ReferenceExpression copy)", "signatureAfterChange": " \t \tpublic boolean isCompatibleWith(TypeBinding targetType, Scope scope)", "diff": ["-\t// Cache resolved copies against various target types, so repeat overload resolution and possibly type inference could be avoided.", "-\tprivate ReferenceExpression registerCopy(TypeBinding targetType, ReferenceExpression copy) {", "-\t\tif (this.copiesPerTargetType == null)", "-\t\t\tthis.copiesPerTargetType = new HashMap<TypeBinding, ReferenceExpression>();", "-\t\tthis.copiesPerTargetType.put(targetType, copy);", "-\t\treturn copy;", "+\t\tReferenceExpression copy = cachedResolvedCopy(targetType);", "+\t\treturn copy != null && copy.resolvedType != null && copy.resolvedType.isValidBinding() && copy.binding != null && copy.binding.isValidBinding();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3194e6232a1e2fdeaad9e9d455638a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "41f0eedac440a5a7408e664ba09866184ebddd55", "commitAfterChange": "e0b93cd9388950bd51950e07247cdecc9e3263df", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void resolve(MethodScope methScope)", "signatureAfterChange": " \tpublic void resolve(MethodScope methScope)", "diff": ["-\t\t\tTypeBinding binding = references[i].resolveType(methScope);", "-\t\t\t", "-\t\t\tif ((methDecl.isConstructor() || override) && !superRef && binding != null && binding.isValidBinding()) {", "-\t\t\t\t// if binding is valid then look if we have a reference to an overriden method/constructor", "-\t\t\t\tif (references[i] instanceof JavadocMessageSend) {", "-\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) references[i];", "-\t\t\t\t\tif (methDecl.binding.declaringClass.isCompatibleWith(messageSend.qualifyingType) &&", "-\t\t\t\t\t\tCharOperation.equals(messageSend.selector, methDecl.selector) &&", "-\t\t\t\t\t\t(messageSend.binding.returnType == methDecl.binding.returnType)) {", "-\t\t\t\t\t\tif (messageSend.arguments == null && methDecl.arguments == null) {", "-\t\t\t\t\t\t\tsuperRef = true;", "+\t\t\treferences[i].resolveType(methScope);", "+\t\t\ttry {", "+\t\t\t\t// see whether we can have a super reference", "+\t\t\t\tif ((methDecl.isConstructor() || override) && !superRef) {", "+\t\t\t\t\tif (references[i] instanceof JavadocMessageSend) {", "+\t\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) references[i];", "+\t\t\t\t\t\t// if binding is valid then look if we have a reference to an overriden method/constructor", "+\t\t\t\t\t\tif (messageSend.binding != null && messageSend.binding.isValidBinding()) {", "+\t\t\t\t\t\t\tif (methDecl.binding.declaringClass.isCompatibleWith(messageSend.receiverType) &&", "+\t\t\t\t\t\t\t\tCharOperation.equals(messageSend.selector, methDecl.selector) &&", "+\t\t\t\t\t\t\t\t(messageSend.binding.returnType == methDecl.binding.returnType)) {", "+\t\t\t\t\t\t\t\tif (messageSend.arguments == null && methDecl.arguments == null) {", "+\t\t\t\t\t\t\t\t\tsuperRef = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\telse if (messageSend.arguments != null && methDecl.arguments != null) {", "+\t\t\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParametersEqual(messageSend.binding);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\telse if (messageSend.arguments != null && methDecl.arguments != null) {", "-\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParametersEqual(messageSend.binding);", "+\t\t\t\t\t}", "+\t\t\t\t\telse if (references[i] instanceof JavadocAllocationExpression) {", "+\t\t\t\t\t\tJavadocAllocationExpression allocationExpr = (JavadocAllocationExpression) references[i];", "+\t\t\t\t\t\t// if binding is valid then look if we have a reference to an overriden method/constructor", "+\t\t\t\t\t\tif (allocationExpr.binding != null && allocationExpr.binding.isValidBinding()) {", "+\t\t\t\t\t\t\tif (methDecl.binding.declaringClass.isCompatibleWith(allocationExpr.resolvedType)) {", "+\t\t\t\t\t\t\t\tif (allocationExpr.arguments == null && methDecl.arguments == null) {", "+\t\t\t\t\t\t\t\t\tsuperRef = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\telse if (allocationExpr.arguments != null && methDecl.arguments != null) {", "+\t\t\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParametersEqual(allocationExpr.binding);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "-\t\t\t\telse if (references[i] instanceof JavadocAllocationExpression) {", "-\t\t\t\t\tJavadocAllocationExpression allocationExpr = (JavadocAllocationExpression) references[i];", "-\t\t\t\t\tTypeBinding constructorBinding = allocationExpr.type.resolvedType;", "-\t\t\t\t\tif (methDecl.binding.declaringClass.isCompatibleWith(constructorBinding)) {", "-\t\t\t\t\t\tif (allocationExpr.arguments == null && methDecl.arguments == null) {", "-\t\t\t\t\t\t\tsuperRef = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\telse if (allocationExpr.arguments != null && methDecl.arguments != null) {", "-\t\t\t\t\t\t\tsuperRef = methDecl.binding.areParametersEqual(allocationExpr.binding);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t}", "+\t\t\tcatch (Exception e) {", "+\t\t\t\t// Something wrong happen, forgot super ref..."]}], "num": 46147}
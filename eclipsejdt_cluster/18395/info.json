{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d62d1114d79c065b0cf70b64a9a17a8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e8ed4a97fad1c4b1eababc199df8236", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "bc58ceae1b3691095e4db8bfcb9f2192eeaf077d", "commitAfterChange": "df9c3a401cd78995716c690f400af3a4d95f0187", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " MethodBinding inferInvocationType(Invocation invocation, TypeBinding[] argumentTypes, ParameterizedGenericMethodBinding method)", "signatureAfterChange": " MethodBinding inferInvocationType(Invocation invocation, TypeBinding[] argumentTypes, ParameterizedGenericMethodBinding method)", "diff": ["+\t\t\t\t\tif (this.scope.compilerOptions().isAnnotationBasedNullAnalysisEnabled)", "+\t\t\t\t\t\tfinalMethod = NullAnnotationMatching.checkForContraditions(finalMethod, invocation, this.scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "370a2324a84ec75315f3a49fe8a2b6e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "b16af955ad096598d372b7b23da79db705ddee11", "commitAfterChange": "906228369eed23f930bc548422a9ed0c01a3237e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, \t\t\tInvocationSite invocationSite, int inferenceLevel)", "signatureAfterChange": " \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, \t\t\tInvocationSite invocationSite, int inferenceLevel)", "diff": ["-\t\t\tif (scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\t\tCompilerOptions compilerOptions = scope.compilerOptions();", "+\t\t\tif (compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\t\t\t\t\t\tif (compilerOptions.isAnnotationBasedNullAnalysisEnabled)", "+\t\t\t\t\t\t\t\tmethodSubstitute = NullAnnotationMatching.checkForContraditions(methodSubstitute, invocationSite, scope);"]}], "num": 18395}
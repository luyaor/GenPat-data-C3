{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7cc95e2e1f6e3b902bf86f7e4626aff8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce2069fcf294000c7b53934082dc423f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "bdbec2bb7327b3b0460877d15c9ab293cc246fb3", "commitAfterChange": "b9385062e73b7ce20cfbd5836208ddfca433f1f5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\t \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "signatureAfterChange": "\t \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "diff": ["-\t\t\t\tTypeBinding upperBound = null;", "-\t\t\t\tif (methodSubstitute.returnType.isTypeVariable()) {", "-\t\t\t\t\t// should be: if no expected type, then assume Object", "-\t\t\t\t\t// actually it rather seems to handle the returned variable case by expecting its erasure instead", "-\t\t\t\t\tupperBound = methodSubstitute.returnType.erasure();", "-\t\t\t\t} else {", "-\t\t\t\t\tif (methodSubstitute.returnType.id != TypeIds.T_void)", "+\t\t\t\tTypeBinding upperBound;", "+\t\t\t\tTypeBinding substitutedReturnType = methodSubstitute.returnType;", "+\t\t\t\tswitch (substitutedReturnType.kind()) {", "+\t\t\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\t\t// should be: if no expected type, then assume Object", "+\t\t\t\t\t\t// actually it rather seems to handle the returned variable case by expecting its erasure instead", "+\t\t\t\t\t\tupperBound = substitutedReturnType.erasure();", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.BASE_TYPE :", "+\t\t\t\t\t\tif (substitutedReturnType == VoidBinding) {", "+\t\t\t\t\t\t\tupperBound = null;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// fallthrough", "+\t\t\t\t\tdefault:", "-\t\t\t\tif (expectedType == null || upperBound.isCompatibleWith(expectedType)) {", "+\t\t\t\tif (expectedType == null || (upperBound != null && upperBound.isCompatibleWith(expectedType))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfe45c6f4b88bc75306d9613c865fb7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "f8406402dab63bd844517051ef5aaa1b160d2392", "commitAfterChange": "5bd6b9d7331a9e7fe82d427994d62e0af1821389", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t\tpublic CategorizedProblem createProblem( \t\t\tchar[] originatingFileName, \t\t\tint problemId, \t\t\tString[] problemArguments, \t\t\tString[] messageArguments, \t\t\tint severity, \t\t\tint start, \t\t\tint end, \t\t\tint lineNumber, \t\t\tint columnNumber)", "signatureAfterChange": "  \t\tpublic CategorizedProblem createProblem( \t\t\tchar[] originatingFileName, \t\t\tint problemId, \t\t\tString[] problemArguments, \t\t\tString[] messageArguments, \t\t\tint severity, \t\t\tint start, \t\t\tint end, \t\t\tint lineNumber, \t\t\tint columnNumber)", "diff": ["-\t\t\tif (this.checkProblems && !this.hasProblems) {", "-\t\t\t\tif (id == IProblem.UsingDeprecatedType) {", "-\t\t\t\t\tthis.hasProblems =", "-\t\t\t\t\t\tCompletionEngine.this.options.checkDeprecation;", "-\t\t\t\t} else if (id == IProblem.NotVisibleType) {", "-\t\t\t\t\tthis.hasProblems =", "-\t\t\t\t\t\tCompletionEngine.this.options.checkVisibility;", "-\t\t\t\t} else if (id == IProblem.ForbiddenReference) {", "-\t\t\t\t\tthis.hasProblems =", "-\t\t\t\t\t\tCompletionEngine.this.options.checkForbiddenReference;", "-\t\t\t\t} else if (id == IProblem.DiscouragedReference) {", "-\t\t\t\t\tthis.hasProblems =", "-\t\t\t\t\t\tCompletionEngine.this.options.checkDiscouragedReference;", "-\t\t\t\t} else {", "-\t\t\t\t\tthis.hasProblems = true;", "+\t\t\tif (this.checkProblems && !this.hasForbiddenProblems) {", "+\t\t\t\tswitch (id) {", "+\t\t\t\t\tcase IProblem.UsingDeprecatedType:", "+\t\t\t\t\t\tthis.hasForbiddenProblems =", "+\t\t\t\t\t\t\tCompletionEngine.this.options.checkDeprecation;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IProblem.NotVisibleType:", "+\t\t\t\t\t\tthis.hasForbiddenProblems =", "+\t\t\t\t\t\t\tCompletionEngine.this.options.checkVisibility;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IProblem.ForbiddenReference:", "+\t\t\t\t\t\tthis.hasForbiddenProblems =", "+\t\t\t\t\t\t\tCompletionEngine.this.options.checkForbiddenReference;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IProblem.DiscouragedReference:", "+\t\t\t\t\t\tthis.hasForbiddenProblems =", "+\t\t\t\t\t\t\tCompletionEngine.this.options.checkDiscouragedReference;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tif ((severity & ProblemSeverities.Optional) != 0) {", "+\t\t\t\t\t\t\tthis.hasAllowedProblems = true;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.hasForbiddenProblems = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tbreak;", "+\t\t}"]}], "num": 63123}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4005b4c0b91394e5488b69f236d6c7fb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03d85082f038835c3cb4913994a2e25f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/CompletionProposal.java", "commitBeforeChange": "1f6e4f319b3c9af55b51e02d9d1789b4b8ea5ed9", "commitAfterChange": "52e9a16e0c24b173f31a03d11485ff960e6a0dcd", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic char[][] findParameterNames(IProgressMonitor monitor)", "signatureAfterChange": " \tpublic char[][] findParameterNames(IProgressMonitor monitor)", "diff": ["-\t\t// TODO (jerome) - Missing implementation", "-\t\treturn null;", "+\t\tif (!parameterNamesComputed) {", "+\t\t\tthis.parameterNamesComputed = true;", "+\t\t\t// TODO (jerome) - Missing implementation", "+\t\t}", "+\t\treturn this.parameterNames;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b3586a8e0307ec1ebb17525c3e89752", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "7837c22c77d5de1a45545030033be1e2b2970468", "commitAfterChange": "eaed8b4c57bf985bb0b4f36634f058b94194b2e7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public synchronized IIndex getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing)", "signatureAfterChange": " public synchronized IIndex getIndex(IPath path, boolean reuseExistingFile, boolean createIfMissing)", "diff": ["-\t\t\t\t\tif (VERBOSE)", "-\t\t\t\t\t\tJobManager.verbose(\"-> cannot reuse existing index: \"+indexName+\" path: \"+path.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\trebuildIndex(indexName, path);", "-\t\t\t\t\treturn null;", "+\t\t\t\t\tif (currentIndexState != REBUILDING_STATE) { // rebuild index if existing file is corrupt, unless the index is already being rebuilt", "+\t\t\t\t\t\tif (VERBOSE)", "+\t\t\t\t\t\t\tJobManager.verbose(\"-> cannot reuse existing index: \"+indexName+\" path: \"+path.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\trebuildIndex(indexName, path);", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tindex = null; // will fall thru to createIfMissing & create a empty index for the rebuild all job to populate", "+\t\t\t\t\t}", "-\t\t\tif (currentIndexState == SAVED_STATE) { // rebuild index if existing file is missing or corrupt", "+\t\t\tif (currentIndexState == SAVED_STATE) { // rebuild index if existing file is missing"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a952f2cf9f850e6b362535e65907ba2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaModelException.java", "commitBeforeChange": "25bee693161afc3e4f8a13c9ec2792610c1ba510", "commitAfterChange": "921f949a0e5dc802cf0168c26af5339acdc851e1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public Throwable getException()", "signatureAfterChange": "\r public Throwable getException()", "diff": ["-\treturn getStatus().getException();\r", "+\tif (this.nestedCoreException == null) {\r", "+\t\treturn getStatus().getException();\r", "+\t} else {\r", "+\t\treturn this.nestedCoreException;\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ba4dae569a11bb10c02adc73d9d8f9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java", "commitBeforeChange": "b787a2d070ec7a069ea3a4743d44582b432344cc", "commitAfterChange": "0cd2456c15522e79dfe115de96668671a08c4686", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic int getExtendedLength(ASTNode node)", "signatureAfterChange": " \tpublic int getExtendedLength(ASTNode node)", "diff": ["-\t\treturn this.commentMapper.getExtendedLength(node);", "+\t\tif (this.commentMapper == null) {", "+\t\t\treturn 0;", "+\t\t} else {", "+\t\t\treturn this.commentMapper.getExtendedLength(node);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3a8f9330475cdc892e42070ee2bab18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/APTProblem.java", "commitBeforeChange": "1f82fbfe681e32018e530b8aaba28b5eaf34206f", "commitAfterChange": "01183640e0035cac2c0d8aba45f61a8be154617f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\t     \tpublic int getID()", "signatureAfterChange": "  \tpublic int getID()", "diff": ["-   ", "-\tpublic int getID() {", "-\t\treturn EclipseMessager.APT_PROBLEM_ID;", "+", "+\tpublic int getID() {", "+\t\t// If we have arguments, then we're quick-fixable", "+\t\tif (_arguments != null) {", "+\t\t\treturn EclipseMessager.APT_QUICK_FIX_PROBLEM_ID;", "+\t\t}", "+\t\telse {", "+\t\t\treturn EclipseMessager.APT_PROBLEM_ID;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e806efbc1e2a6fc47f3e228baebfc306", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java", "commitBeforeChange": "b787a2d070ec7a069ea3a4743d44582b432344cc", "commitAfterChange": "0cd2456c15522e79dfe115de96668671a08c4686", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic int getExtendedStartPosition(ASTNode node)", "signatureAfterChange": " \tpublic int getExtendedStartPosition(ASTNode node)", "diff": ["-\t\treturn this.commentMapper.getExtendedStartPosition(node);", "+\t\tif (this.commentMapper == null) {", "+\t\t\treturn -1;", "+\t\t} else {", "+\t\t\treturn this.commentMapper.getExtendedStartPosition(node);", "+\t\t}"]}], "num": 1181}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "81058d4843d06455571c8eeb8325565e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9038f1729900e9928093e655e37c5830", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "d8f389cbde24bb1c104b01e8be23d8716da06c45", "commitAfterChange": "314f66e76f751455a7dd539f576706f5f92aab24", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprotected boolean parseReference() throws InvalidInputException", "signatureAfterChange": " \tprotected boolean parseReference() throws InvalidInputException", "diff": ["-\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocInvalidReference(start, this.lineEnd);", "+\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocUnexpectedText(this.scanner.currentPosition, this.lineEnd);", "-\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidReference(start, this.lineEnd);", "+//\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocInvalidReference(start, this.lineEnd);", "+\t\t\t\t\t\t\t\tif (this.sourceParser != null) this.sourceParser.problemReporter().javadocUnexpectedText(this.scanner.currentPosition, this.lineEnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcf42b1179eb747e18c8365f8426db8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java", "commitBeforeChange": "9cad13dc2bab42b3a3dc14ba8cd1b82a5b440537", "commitAfterChange": "6c2aab4fe1b0b20513b890c178ac138b7c1a6682", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic String getKey()", "signatureAfterChange": " \tpublic String getKey()", "diff": ["-\t\t// TODO (olivier) would improve to compute key once and cache it", "-\t\tStringBuffer buffer = new StringBuffer();", "-\t\tbuffer.append(this.getDeclaringClass().getKey());", "-\t\tbuffer.append('/');", "-\t\tITypeBinding _returnType = getReturnType();", "-\t\tif (_returnType != null) {", "-\t\t\tif (_returnType.isTypeVariable()) {", "-\t\t\t\tbuffer.append(_returnType.getQualifiedName());", "-\t\t\t} else {", "-\t\t\t\tbuffer.append(_returnType.getKey());", "-\t\t\t}", "-\t\t}", "-\t\tif (!isConstructor()) {", "-\t\t\tbuffer.append(this.getName());", "-\t\t}", "-\t\tITypeBinding[] parameters = getParameterTypes();", "-\t\tbuffer.append('(');", "-\t\tfor (int i = 0, max = parameters.length; i < max; i++) {", "-\t\t\tfinal ITypeBinding parameter = parameters[i];", "-\t\t\tif (parameter != null) {", "-\t\t\t\tif (parameter.isTypeVariable()) {", "-\t\t\t\t\tbuffer.append(parameter.getQualifiedName());", "+\t\tif (this.key == null) {", "+\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\tbuffer.append(this.getDeclaringClass().getKey());", "+\t\t\tbuffer.append('/');", "+\t\t\tITypeBinding _returnType = getReturnType();", "+\t\t\tif (_returnType != null) {", "+\t\t\t\tif (_returnType.isTypeVariable()) {", "+\t\t\t\t\tbuffer.append(_returnType.getQualifiedName());", "-\t\t\t\t\tbuffer.append(parameter.getKey());", "+\t\t\t\t\tbuffer.append(_returnType.getKey());", "-\t\t}", "-\t\tbuffer.append(')');", "-\t\tITypeBinding[] thrownExceptions = getExceptionTypes();", "-\t\tfor (int i = 0, max = thrownExceptions.length; i < max; i++) {", "-\t\t\tfinal ITypeBinding thrownException = thrownExceptions[i];", "-\t\t\tif (thrownException != null) {", "-\t\t\t\tif (thrownException.isTypeVariable()) {", "-\t\t\t\t\tbuffer.append(thrownException.getQualifiedName());\t\t\t\t\t", "-\t\t\t\t} else {", "-\t\t\t\t\tbuffer.append(thrownException.getKey());", "+\t\t\tif (!isConstructor()) {", "+\t\t\t\tbuffer.append(this.getName());", "+\t\t\t}", "+\t\t\tITypeBinding[] parameters = getParameterTypes();", "+\t\t\tbuffer.append('(');", "+\t\t\tfor (int i = 0, max = parameters.length; i < max; i++) {", "+\t\t\t\tfinal ITypeBinding parameter = parameters[i];", "+\t\t\t\tif (parameter != null) {", "+\t\t\t\t\tif (parameter.isTypeVariable()) {", "+\t\t\t\t\t\tbuffer.append(parameter.getQualifiedName());", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbuffer.append(parameter.getKey());", "+\t\t\t\t\t}", "+\t\t\tbuffer.append(')');", "+\t\t\tITypeBinding[] thrownExceptions = getExceptionTypes();", "+\t\t\tfor (int i = 0, max = thrownExceptions.length; i < max; i++) {", "+\t\t\t\tfinal ITypeBinding thrownException = thrownExceptions[i];", "+\t\t\t\tif (thrownException != null) {", "+\t\t\t\t\tif (thrownException.isTypeVariable()) {", "+\t\t\t\t\t\tbuffer.append(thrownException.getQualifiedName());\t\t\t\t\t", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbuffer.append(thrownException.getKey());", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tthis.key = String.valueOf(buffer);", "-\t\treturn buffer.toString();", "+\t\treturn this.key;"]}], "num": 633}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e48db159b7e9123716b63308c23d55ec", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21a47900980de651513531bc5a64da9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 55, "signatureBeforeChange": " public void duplicateMethodInType(SourceTypeBinding type, AbstractMethodDeclaration methodDecl)", "signatureAfterChange": " public void duplicateMethodInType(SourceTypeBinding type, AbstractMethodDeclaration methodDecl)", "diff": ["-\tString[] arguments = new String[] {new String(methodDecl.selector), new String(type.sourceName())};", "-\tthis.handle(", "-\t\tIProblem.DuplicateMethod,", "-\t\targuments,", "-\t\targuments,", "-\t\tmethodDecl.sourceStart,", "-\t\tmethodDecl.sourceEnd);", "+    MethodBinding method = methodDecl.binding;", "+    boolean duplicateErasure = false;", "+    if ((method.modifiers & CompilerModifiers.AccGenericSignature) != 0) {", "+        // chech it occurs in parameters (the bit is set for return type | params | thrown exceptions", "+        for (int i = 0, length = method.parameters.length; i < length; i++) {", "+            if ((method.parameters[i].tagBits & TagBits.HasTypeVariable) != 0) {", "+                duplicateErasure = true;", "+                break;", "+            }", "+        }", "+    }", "+    if (duplicateErasure) {", "+        int length = method.parameters.length;", "+        TypeBinding[] erasures = new TypeBinding[length];", "+        for (int i = 0; i < length; i++)  {", "+            erasures[i] = method.parameters[i].erasure();", "+        }", "+\t\tthis.handle(", "+\t\t\tIProblem.DuplicateMethodErasure,", "+\t\t\tnew String[] {", "+\t\t        new String(methodDecl.selector),", "+\t\t\t\tnew String(method.declaringClass.readableName()),", "+\t\t\t\tparametersAsString(method.parameters, false),", "+\t\t\t\tparametersAsString(erasures, false) } ,", "+\t\t\tnew String[] {", "+\t\t\t\tnew String(methodDecl.selector),", "+\t\t\t\tnew String(method.declaringClass.shortReadableName()),", "+\t\t\t\tparametersAsString(method.parameters, true),", "+\t\t\t\tparametersAsString(erasures, true) },", "+\t\t\tmethodDecl.sourceStart,", "+\t\t\tmethodDecl.sourceEnd);", "+    } else {", "+\t\tthis.handle(", "+\t\t\tIProblem.DuplicateMethod,", "+\t\t\tnew String[] {", "+\t\t        new String(methodDecl.selector),", "+\t\t\t\tnew String(method.declaringClass.readableName()),", "+\t\t\t\tparametersAsString(method.parameters, false)},", "+\t\t\tnew String[] {", "+\t\t\t\tnew String(methodDecl.selector),", "+\t\t\t\tnew String(method.declaringClass.shortReadableName()),", "+\t\t\t\tparametersAsString(method.parameters, true)},", "+\t\t\tmethodDecl.sourceStart,", "+\t\t\tmethodDecl.sourceEnd);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a36ebc55d26575dcc4c9658f1e415ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "f8fd71e42120d981a783dd80ec418ad1ea7de0d5", "commitAfterChange": "518136359f5965283b51c0a8b8ed6cb4be064713", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "  public void duplicateMethodInType(SourceTypeBinding type, AbstractMethodDeclaration methodDecl)", "signatureAfterChange": "  public void duplicateMethodInType(SourceTypeBinding type, AbstractMethodDeclaration methodDecl, boolean equalParameters)", "diff": ["-public void duplicateMethodInType(SourceTypeBinding type, AbstractMethodDeclaration methodDecl) {", "+public void duplicateMethodInType(SourceTypeBinding type, AbstractMethodDeclaration methodDecl, boolean equalParameters) {", "-    boolean duplicateErasure = false;", "-    if ((method.modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0) {", "-        // chech it occurs in parameters (the bit is set for return type | params | thrown exceptions", "-        for (int i = 0, length = method.parameters.length; i < length; i++) {", "-            if ((method.parameters[i].tagBits & TagBits.HasTypeVariable) != 0) {", "-                duplicateErasure = true;", "-                break;", "-            }", "-        }", "-    }", "-    if (duplicateErasure) {", "+    if (equalParameters) {", "+\t\tthis.handle(", "+\t\t\tIProblem.DuplicateMethod,", "+\t\t\tnew String[] {", "+\t\t        new String(methodDecl.selector),", "+\t\t\t\tnew String(method.declaringClass.readableName()),", "+\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, false)},", "+\t\t\tnew String[] {", "+\t\t\t\tnew String(methodDecl.selector),", "+\t\t\t\tnew String(method.declaringClass.shortReadableName()),", "+\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, true)},", "+\t\t\tmethodDecl.sourceStart,", "+\t\t\tmethodDecl.sourceEnd);", "+    } else {", "-\t\t\tmethodDecl.sourceStart,", "-\t\t\tmethodDecl.sourceEnd);", "-    } else {", "-\t\tthis.handle(", "-\t\t\tIProblem.DuplicateMethod,", "-\t\t\tnew String[] {", "-\t\t        new String(methodDecl.selector),", "-\t\t\t\tnew String(method.declaringClass.readableName()),", "-\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, false)},", "-\t\t\tnew String[] {", "-\t\t\t\tnew String(methodDecl.selector),", "-\t\t\t\tnew String(method.declaringClass.shortReadableName()),", "-\t\t\t\ttypesAsString(method.isVarargs(), method.parameters, true)},"]}], "num": 44974}
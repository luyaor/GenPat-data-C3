{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3bd8a164937528892a8b0487f08ce9a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "425d3862527f7f8ace951347dcc0872d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "de0f1812a2159827ab464df5cef59ee9edaa3ab7", "commitAfterChange": "52749e60066d0fcd4c1a6df86d6646106f09eae5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \t \tvoid checkMemberValues(MemberValuePair[] valuePairs, Scope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t", "+\tpublic TypeBinding resolveType(BlockScope scope) {", "+\t\t", "+\t\tTypeBinding typeBinding = this.type.resolveType(scope);", "+\t\tif (typeBinding == null)", "+\t\tthis.resolvedType = typeBinding;", "+\t\tif (!typeBinding.isAnnotationType()) {", "+\t\t\tscope.problemReporter().typeMismatchError(typeBinding, scope.getJavaLangAnnotationAnnotation(), this.type);", "-\t", "-\tvoid checkMemberValues(MemberValuePair[] valuePairs, Scope scope) {", "-\t\t", "+", "-\t\tTypeBinding expectedValueType = null;", "+\t\tMemberValuePair[] valuePairs = memberValuePairs();", "-\t\t\t\t\tExpression memberValue = valuePair.value;", "-\t\t\t\t\texpectedValueType = method.returnType;", "-\t\t\t\t\tmemberValue.setExpectedType(expectedValueType); // needed in case of generic method invocation", "-\t\t\t\t\tTypeBinding valueType = scope instanceof ClassScope", "-\t\t\t\t\t\t? memberValue.resolveType((ClassScope)scope)", "-\t\t\t\t\t\t: memberValue.resolveType((BlockScope)scope);", "-\t\t\t\t\tif (expectedValueType == null || valueType == null)", "-\t\t\t\t\t\tcontinue nextPair;", "-", "-\t\t\t\t\tcheckAnnotationValue(expectedValueType, method.declaringClass, method.selector, memberValue, scope);", "+\t\t\t\t\tvaluePair.resolveTypeExpecting(scope, method.returnType);", "-\t}", "+\t\treturn this.resolvedType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae4c674c80ca6e3f5f42ced35e1189e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocFieldReference.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\tconstant = NotAConstant;", "-", "-\t\tif (this.receiver == null) {", "-\t\t\tSourceTypeBinding sourceTypeBinding = scope.enclosingSourceType();", "-\t\t\tthis.receiverType = sourceTypeBinding;", "-\t\t\tthis.receiver = new JavadocQualifiedTypeReference(sourceTypeBinding.compoundName, new long[sourceTypeBinding.compoundName.length], 0, 0);", "+\t\tthis.constant = NotAConstant;", "+\t\tif (scope.kind == Scope.CLASS_SCOPE) {", "+\t\t\tthis.receiverType = this.receiver.resolveType((ClassScope) scope);", "-\t\t\tif (scope.kind == Scope.CLASS_SCOPE) {", "-\t\t\t\tthis.receiverType = receiver.resolveType((ClassScope)scope);", "-\t\t\t} else {", "-\t\t\t\tthis.receiverType = receiver.resolveType((BlockScope)scope);", "-\t\t\t}", "+\t\t\tthis.receiverType = this.receiver.resolveType((BlockScope)scope);", "-\t\t\tconstant = NotAConstant;", "-\t\t\tscope.problemReporter().invalidField(this, this.receiverType);", "+\t\t\tscope.problemReporter().javadocInvalidField(this, this.receiverType, scope.getModifiers());", "-\t\tif (isFieldUseDeprecated(binding, scope, (this.bits & IsStrictlyAssignedMASK) != 0)) {", "-\t\t\tscope.problemReporter().deprecatedField(this.binding, this);", "+\t\tif (isFieldUseDeprecated(this.binding, scope, (this.bits & IsStrictlyAssignedMASK) != 0)) {", "+\t\t\tscope.problemReporter().javadocDeprecatedField(this.binding, this, scope.getModifiers());", "-\t\treturn this.resolvedType = binding.type;", "+\t\treturn this.resolvedType = this.binding.type;"]}], "num": 71230}
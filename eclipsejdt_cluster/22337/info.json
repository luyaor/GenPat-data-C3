{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7adfe0742da37e9cf58bde1af8777e34", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3abc7ca800c983cea0276f5fc98b17c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnresolvedReferenceBinding.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " ReferenceBinding resolve(LookupEnvironment environment, boolean convertGenericToRawType)", "signatureAfterChange": " ReferenceBinding resolve(LookupEnvironment environment, boolean convertGenericToRawType)", "diff": ["-\tif (convertGenericToRawType && targetType.isGenericType()) // raw reference to generic ?", "-\t    return environment.createRawType(targetType, null);", "+\tif (convertGenericToRawType) {", "+\t\tboolean rawEnclosing = false;", "+\t\tReferenceBinding targetEnclosingType = targetType.enclosingType();", "+\t\tif (targetEnclosingType != null && targetEnclosingType.isGenericType()) { // convert to raw type since wasn't parameterized", "+\t\t\trawEnclosing = true;", "+\t\t\ttargetEnclosingType = environment.createRawType(targetEnclosingType, targetEnclosingType.enclosingType());", "+\t\t}", "+\t\tif (targetType.isGenericType()) { // raw reference to generic ?", "+\t\t    return environment.createRawType(targetType, targetEnclosingType);", "+\t\t} else if (rawEnclosing) {", "+\t\t\treturn environment.createParameterizedType(targetType, null, targetEnclosingType);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfecdbeab3d84bcebf71347ce320d82d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PotentialMatch.java", "commitBeforeChange": "4e66475f9a73014d666c99c51fe059857a4663fa", "commitAfterChange": "faddcb079bee5b548a6f2f972d8258d3ff3dc5d3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r public PotentialMatch(MatchLocator locator, IResource resource, Openable openable)", "signatureAfterChange": "\r public PotentialMatch(MatchLocator locator, IResource resource, Openable openable)", "diff": ["-\t\t\tString source = ((org.eclipse.jdt.internal.core.ClassFile)openable).getSource();\r", "+\t\t\tchar[] source = null; \r", "+\t\t\torg.eclipse.jdt.internal.core.ClassFile classFile = (org.eclipse.jdt.internal.core.ClassFile)openable;\r", "+\t\t\tSourceMapper sourceMapper = classFile.getSourceMapper();\r", "+\t\t\tif (sourceMapper != null) {\r", "+\t\t\t\tsource = sourceMapper.findSource(classFile.getType());\r", "+\t\t\t}\r", "+\t\t\tif (source == null) {\r", "+\t\t\t\t// default to opening the class file\r", "+\t\t\t\tString sourceFromBuffer = classFile.getSource();\r", "+\t\t\t\tif (sourceFromBuffer != null) {\r", "+\t\t\t\t\tsource = sourceFromBuffer.toCharArray();\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "-\t\t\t\tthis.buildTypeBindings(source.toCharArray());\r", "+\t\t\t\tthis.buildTypeBindings(source);\r", "-\t\t\t\t\torg.eclipse.jdt.core.IClassFile classFile = \r", "+\t\t\t\t\torg.eclipse.jdt.core.IClassFile mainTypeClassFile = \r", "-\t\t\t\t\tif (classFile.exists()) {\r", "-\t\t\t\t\t\tthis.openable = (Openable)classFile;\r", "+\t\t\t\t\tif (mainTypeClassFile.exists()) {\r", "+\t\t\t\t\t\tthis.openable = (Openable)mainTypeClassFile;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6ac1c7caa93a22d66961ce570c27d0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "dfc3492f1dfa8030e6c5e549e9d395bb7974946d", "commitAfterChange": "31f2324dbe5aa372f6cc9e20e7c58835cb77cd86", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r \tprotected IJavaElement getUnqualifiedMethodHandle(IMethod method)", "signatureAfterChange": "\r \tprotected IJavaElement getUnqualifiedMethodHandle(IMethod method, boolean noDollar)", "diff": ["-\tprotected IJavaElement getUnqualifiedMethodHandle(IMethod method) {\r", "-\r", "+\tprotected IJavaElement getUnqualifiedMethodHandle(IMethod method, boolean noDollar) {\r", "+\t\thasDollar = false;\r", "-\t\t\t\tunqualifiedName.append(Signature.getSimpleName(qualifiedName));\r", "+\t\t\t\tString simpleName = Signature.getSimpleName(qualifiedName.substring(count+1));\r", "+\t\t\t\tif(!noDollar) {\r", "+\t\t\t\t\tif(!hasDollar && simpleName.indexOf('$') != -1) {\r", "+\t\t\t\t\t\thasDollar = true;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tunqualifiedName.append(simpleName);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tunqualifiedName.append(CharOperation.lastSegment(simpleName.toCharArray(), '$'));\r", "+\t\t\t\t}\r"]}], "num": 22337}
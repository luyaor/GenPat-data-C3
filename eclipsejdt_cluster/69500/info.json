{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "095f1c894e2c258016188f43b84d171c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "097515e8e043b2874bfec97731592e65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FinallyFlowContext.java", "commitBeforeChange": "d6c2a90130be430285c5f6a000090d250c310afd", "commitAfterChange": "51e1f00f8d474f0b209b47afa85e44328a517f92", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void recordUsingNullReference(Scope scope, VariableBinding local, \t\t\tExpression reference, int checkType, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void recordUsingNullReference(Scope scope, VariableBinding var, \t\t\tExpression reference, int checkType, FlowInfo flowInfo)", "diff": ["-\tpublic void recordUsingNullReference(Scope scope, VariableBinding local,", "+\tpublic void recordUsingNullReference(Scope scope, VariableBinding var,", "-\t\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0 && !flowInfo.isDefinitelyUnknown(local))\t{", "+\t\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0 && !flowInfo.isDefinitelyUnknown(var))\t{", "-\t\t\t\t\t\tif (flowInfo.cannotBeNull(local)) {", "+\t\t\t\t\t\tif (flowInfo.cannotBeNull(var)) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(var, reference);", "-\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "+\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(var)) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(var, reference);", "-\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "+\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(var)) {", "-\t\t\t\t\t\tif (flowInfo.canOnlyBeNull(local)) {", "+\t\t\t\t\t\tif (flowInfo.canOnlyBeNull(var)) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(var, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(var, reference);", "-\t\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "+\t\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(var)) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(var, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(var, reference);", "-\t\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "+\t\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(var)) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantNullAssignment(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantNullAssignment(var, reference);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullInstanceof(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullInstanceof(var, reference);", "-\t\t\t\t\t\t} else if (flowInfo.isPotentiallyNull(local)) {", "+\t\t\t\t\t\t} else if (flowInfo.isPotentiallyNull(var)) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(var, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(var, reference);", "-\t\t\t\t\t\tif (flowInfo.cannotBeNull(local)) {", "+\t\t\t\t\t\tif (flowInfo.cannotBeNull(var)) {", "-\t\t\t\t\t\tif (flowInfo.canOnlyBeNull(local)) {", "-\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "+\t\t\t\t\t\tif (flowInfo.canOnlyBeNull(var)) {", "+\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(var, reference);", "-\t\t\t\t\t\tif (flowInfo.isDefinitelyNonNull(local)) {", "+\t\t\t\t\t\tif (flowInfo.isDefinitelyNonNull(var)) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(var, reference);", "-\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "+\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(var)) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(var, reference);", "-\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "+\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(var)) {", "-\t\t\t\t\t\tif (flowInfo.isDefinitelyNull(local)) {", "+\t\t\t\t\t\tif (flowInfo.isDefinitelyNull(var)) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(var, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(var, reference);", "-\t\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "+\t\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(var)) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(var, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(var, reference);", "-\t\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "+\t\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(var)) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantNullAssignment(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantNullAssignment(var, reference);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullInstanceof(local, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullInstanceof(var, reference);", "-\t\t\t\t\t\t} else if (flowInfo.isPotentiallyNull(local)) {", "+\t\t\t\t\t\t} else if (flowInfo.isPotentiallyNull(var)) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(var, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(var, reference);", "-\t\t\t\t\t\tif (flowInfo.isDefinitelyNull(local)) {", "-\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "+\t\t\t\t\t\tif (flowInfo.isDefinitelyNull(var)) {", "+\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(var, reference);", "-\t\t\t\t\t\tif (flowInfo.isPotentiallyNull(local)) {", "-\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "+\t\t\t\t\t\tif (flowInfo.isPotentiallyNull(var)) {", "+\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(var, reference);", "-\t\t\t\t\t\tif (flowInfo.isDefinitelyNonNull(local)) {", "+\t\t\t\t\t\tif (flowInfo.isDefinitelyNonNull(var)) {", "-\t\t\t\trecordNullReference(local, reference, checkType);", "+\t\t\t\trecordNullReference(var, reference, checkType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbd388b49b8f454b389d25bf5251d6ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FinallyFlowContext.java", "commitBeforeChange": "448d62b2ff66cd7ed3c1bda65bd5259a6d0971b0", "commitAfterChange": "e283e45dcf10b8a279f599faf5a92449ec8c719c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void recordUsingNullReference(Scope scope, VariableBinding var, \t\t\tASTNode location, int checkType, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void recordUsingNullReference(Scope scope, VariableBinding local, \t\t\tASTNode location, int checkType, FlowInfo flowInfo)", "diff": ["-\tpublic void recordUsingNullReference(Scope scope, VariableBinding var,", "+\tpublic void recordUsingNullReference(Scope scope, VariableBinding local,", "-\t\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0 && !flowInfo.isDefinitelyUnknown(var))\t{", "+\t\tif ((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0 && !flowInfo.isDefinitelyUnknown(local))\t{", "-\t\t\t\t\t\tif (flowInfo.cannotBeNull(var)) {", "+\t\t\t\t\t\tif (flowInfo.cannotBeNull(local)) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(var, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, reference);", "-\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(var)) {", "+\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(var, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, reference);", "-\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(var)) {", "+\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\tif (flowInfo.canOnlyBeNull(var)) {", "+\t\t\t\t\t\tif (flowInfo.canOnlyBeNull(local)) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(var, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(var, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, reference);", "-\t\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(var)) {", "+\t\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(var, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(var, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, reference);", "-\t\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(var)) {", "+\t\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantNullAssignment(var, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantNullAssignment(local, reference);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullInstanceof(var, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullInstanceof(local, reference);", "-\t\t\t\t\t\t} else if (flowInfo.isPotentiallyNull(var)) {", "+\t\t\t\t\t\t} else if (flowInfo.isPotentiallyNull(local)) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(var, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(var, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "-\t\t\t\t\t\tif (flowInfo.cannotBeNull(var)) {", "+\t\t\t\t\t\tif (flowInfo.cannotBeNull(local)) {", "-\t\t\t\t\t\tif (flowInfo.canOnlyBeNull(var)) {", "-\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(var, location);", "+\t\t\t\t\t\tif (flowInfo.canOnlyBeNull(local)) {", "+\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, location);", "-\t\t\t\t\t\tif (flowInfo.isDefinitelyNonNull(var)) {", "+\t\t\t\t\t\tif (flowInfo.isDefinitelyNonNull(local)) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(var, location);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNonNull(local, location);", "-\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(var)) {", "+\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(var, location);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNonNullComparedToNull(local, location);", "-\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(var)) {", "+\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\tif (flowInfo.isDefinitelyNull(var)) {", "+\t\t\t\t\t\tif (flowInfo.isDefinitelyNull(local)) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(var, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(var, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantCheckOnNull(local, reference);", "-\t\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(var)) {", "+\t\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(var, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(var, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullComparedToNonNull(local, reference);", "-\t\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(var)) {", "+\t\t\t\t\t\t\t\t\tif (!flowInfo.isMarkedAsNullOrNonNullInAssertExpression(local)) {", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantNullAssignment(var, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableRedundantNullAssignment(local, reference);", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullInstanceof(var, reference);", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().variableNullInstanceof(local, reference);", "-\t\t\t\t\t\t} else if (flowInfo.isPotentiallyNull(var)) {", "+\t\t\t\t\t\t} else if (flowInfo.isPotentiallyNull(local)) {", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(var, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "-\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(var, reference);", "+\t\t\t\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, reference);", "-\t\t\t\t\t\tif (flowInfo.isDefinitelyNull(var)) {", "-\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(var, location);", "+\t\t\t\t\t\tif (flowInfo.isDefinitelyNull(local)) {", "+\t\t\t\t\t\t\tscope.problemReporter().variableNullReference(local, location);", "-\t\t\t\t\t\tif (flowInfo.isPotentiallyNull(var)) {", "-\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(var, location);", "+\t\t\t\t\t\tif (flowInfo.isPotentiallyNull(local)) {", "+\t\t\t\t\t\t\tscope.problemReporter().variablePotentialNullReference(local, location);", "-\t\t\t\t\t\tif (flowInfo.isDefinitelyNonNull(var)) {", "+\t\t\t\t\t\tif (flowInfo.isDefinitelyNonNull(local)) {", "-\t\t\t\trecordNullReference(var, location, checkType);", "+\t\t\t\trecordNullReference(local, location, checkType);"]}], "num": 69500}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "438b39cf344a4b852825fd3308ba1244", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ca5315e487a12c4e6ee71ea85c828d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "1a94a1e6652f1701b8c360d56d755e5438b79c26", "commitAfterChange": "3b002cab97d2ee77b59be67feaf705de255bc1fb", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "  private void addNewEntry(ArrayList paths, String currentClasspathName, ArrayList currentRuleSpecs, String customEncoding, boolean isSourceOnly)", "signatureAfterChange": "  private void addNewEntry(ArrayList paths, String currentClasspathName,  \t\tArrayList currentRuleSpecs, String customEncoding,  \t\tString destPath, boolean isSourceOnly,  \t\tboolean rejectDestinationPathOnJars) throws InvalidInputException", "diff": ["-private void addNewEntry(ArrayList paths, String currentClasspathName, ArrayList currentRuleSpecs, String customEncoding, boolean isSourceOnly) {", "+private void addNewEntry(ArrayList paths, String currentClasspathName, ", "+\t\tArrayList currentRuleSpecs, String customEncoding, ", "+\t\tString destPath, boolean isSourceOnly, ", "+\t\tboolean rejectDestinationPathOnJars) throws InvalidInputException {", "+\t\tif (NONE.equals(destPath)) {", "+\t\t\tdestPath = NONE; // keep == comparison valid", "+\t\t}", "+\t\tif (rejectDestinationPathOnJars && destPath != null &&", "+\t\t\t\t(currentClasspathName.endsWith(\".jar\") || //$NON-NLS-1$ ", "+\t\t\t\t\tcurrentClasspathName.endsWith(\".zip\"))) { //$NON-NLS-1$ ", "+\t\t\tthrow new InvalidInputException(", "+\t\t\t\tMain.bind(\"configure.unexpectedDestinationPathEntryFile\", //$NON-NLS-1$ ", "+\t\t\t\t\t\t\tcurrentClasspathName));", "+\t\t}", "-\t\t\t\taccessRuleSet);", "+\t\t\t\taccessRuleSet,", "+\t\t\t\tdestPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f262faafe70a633d989375cf4cdd19bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "4b1cb82b00b0f3c43755c37280deb732ae600c1a", "commitAfterChange": "1caf2b41c370e66c328190589dd64f01b35d7384", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " public void generateSyntheticEnclosingInstanceValues( \t\tBlockScope currentScope,  \t\tReferenceBinding targetType,  \t\tExpression enclosingInstance,  \t\tASTNode invocationSite)", "signatureAfterChange": " public void generateSyntheticEnclosingInstanceValues( \t\tBlockScope currentScope,  \t\tReferenceBinding targetType,  \t\tExpression enclosingInstance,  \t\tASTNode invocationSite)", "diff": ["-\t\tboolean complyTo14 = currentScope.environment().options.complianceLevel >= ClassFileConstants.JDK1_4;", "+\t\tlong compliance = currentScope.environment().options.complianceLevel;", "+", "-\t\tboolean ignoreEnclosingArgInConstructorCall = invocationSite instanceof AllocationExpression", "-\t\t\t\t\t|| (complyTo14 && ((invocationSite instanceof ExplicitConstructorCall && ((ExplicitConstructorCall)invocationSite).isSuperAccess())));", "-\t\t\t\t\t\t", "+\t\t// always consider it if complying to 1.5", "+\t\tboolean denyEnclosingArgInConstructorCall;", "+\t\tif (compliance <= JDK1_3) {", "+\t\t\tdenyEnclosingArgInConstructorCall = invocationSite instanceof AllocationExpression;", "+\t\t} else if (compliance == JDK1_4){", "+\t\t\tdenyEnclosingArgInConstructorCall = invocationSite instanceof AllocationExpression", "+\t\t\t\t|| invocationSite instanceof ExplicitConstructorCall && ((ExplicitConstructorCall)invocationSite).isSuperAccess();", "+\t\t} else {", "+\t\t\t//compliance >= JDK1_5", "+\t\t\tdenyEnclosingArgInConstructorCall = (invocationSite instanceof AllocationExpression", "+\t\t\t\t\t|| invocationSite instanceof ExplicitConstructorCall && ((ExplicitConstructorCall)invocationSite).isSuperAccess()) ", "+\t\t\t\t&& !targetType.isLocalType();", "+\t\t}", "+\t\t", "+\t\tboolean complyTo14 = compliance >= ClassFileConstants.JDK1_4;", "-\t\t\t\t\t\tignoreEnclosingArgInConstructorCall);", "+\t\t\t\t\t\tdenyEnclosingArgInConstructorCall);"]}], "num": 58718}
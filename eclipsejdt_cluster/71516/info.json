{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ac0c47aaff70f68f23c744cd3b98202", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1671a58d55fb1b577caca319041220a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "e749248b2d171474b4cec0b274f15c474b2172fa", "commitAfterChange": "49bbfb9368cdcf7ee010de91440ff4d54ad31533", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t\t\t\t\t\t\t\tObject[] emulationPath = currentScope.getExactEmulationPath(currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT));", "-\t\t\t\t\t\t\t\t\tif (emulationPath == null) {", "-\t\t\t\t\t\t\t\t\t\t// internal error, per construction we should have found it", "-\t\t\t\t\t\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, currentScope);", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tReferenceBinding targetType = currentScope.enclosingSourceType().enclosingTypeAt((bits & DepthMASK) >> DepthSHIFT);", "+\t\t\t\t\t\t\t\t\tObject[] emulationPath = currentScope.getEmulationPath(targetType, true /*only exact match*/, false/*consider enclosing arg*/);", "+\t\t\t\t\t\t\t\t\tcodeStream.generateOuterAccess(emulationPath, this, targetType, currentScope);", "-\t\t\t\t\t\tif (path == null) {", "-\t\t\t\t\t\t\t// emulation was not possible (should not happen per construction)", "-\t\t\t\t\t\t\tcurrentScope.problemReporter().needImplementation();", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.generateOuterAccess(path, this, currentScope);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tcodeStream.generateOuterAccess(path, this, localBinding, currentScope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab2c3112a0bc4b4ddb5d5d611b9a8832", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "0edd2a8da94febc0bef7418a02cfac9f1a30d36a", "commitAfterChange": "85f48e0f08275e1f81e9995073d5c4f69bfd0707", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 64, "signatureBeforeChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "signatureAfterChange": " \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "diff": ["+\t// Tie break IS running to determine the most specific method binding.", "+\t\t\t\t\t\tTypeBinding oType = ((ArrayBinding) oneParam).elementsType();", "-\t\t\t\t\t\tif (oneParam == eType || oneParam.isCompatibleWith(eType))", "+\t\t\t\t\t\tif (oType == eType || oType.isCompatibleWith(eType))", "-\t\t\tif (oneParamsLength > twoParamsLength) {", "-\t\t\t\t// special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or (Integer, int...)", "-\t\t\t\tif (((ArrayBinding) twoParams[twoParamsLength - 1]).elementsType().id != TypeIds.T_JavaLangObject)", "-\t\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tif (parameterCompatibilityLevel(one, twoParams) == NOT_COMPATIBLE", "-\t\t\t\t\t&& parameterCompatibilityLevel(two, oneParams) == VARARGS_COMPATIBLE)", "+\t\t\tif (parameterCompatibilityLevel(one, twoParams, true) == NOT_COMPATIBLE", "+\t\t\t\t\t&& parameterCompatibilityLevel(two, oneParams, true) == VARARGS_COMPATIBLE)"]}], "num": 71516}
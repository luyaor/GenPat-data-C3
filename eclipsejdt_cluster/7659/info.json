{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5246bc8c196e8918321b5511a59db5b5", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13fdd3092036211e3ccabb8b0d8ac36f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal ITypeNameRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal ITypeNameRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t\tfinal char classOrInterface;", "+\t\tfinal char typeSuffix;", "-\t\t\t\tclassOrInterface = IIndexConstants.CLASS_SUFFIX;", "+\t\t\t\ttypeSuffix = IIndexConstants.CLASS_SUFFIX;", "-\t\t\t\tclassOrInterface = IIndexConstants.INTERFACE_SUFFIX;", "+\t\t\t\ttypeSuffix = IIndexConstants.INTERFACE_SUFFIX;", "+\t\t\t\tbreak;", "+\t\t\tcase IJavaSearchConstants.ENUM :", "+\t\t\t\ttypeSuffix = IIndexConstants.ENUM_SUFFIX;", "+\t\t\t\tbreak;", "+\t\t\tcase IJavaSearchConstants.ANNOTATION_TYPE :", "+\t\t\t\ttypeSuffix = IIndexConstants.ANNOTATION_TYPE_SUFFIX;", "-\t\t\t\tclassOrInterface = IIndexConstants.TYPE_SUFFIX;", "+\t\t\t\ttypeSuffix = IIndexConstants.TYPE_SUFFIX;", "-\t\t\tclassOrInterface,", "+\t\t\ttypeSuffix,", "-\t\t\t\t\tboolean isClass = record.classOrInterface != IIndexConstants.INTERFACE_SUFFIX;", "-\t\t\t\t\tif (isClass) {", "-\t\t\t\t\t\tnameRequestor.acceptClass(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath);", "-\t\t\t\t\t} else {", "+\t\t\t\t\tswitch (record.typeSuffix) {", "+\t\t\t\t\t\tcase IIndexConstants.CLASS_SUFFIX :", "+\t\t\t\t\t\t\tnameRequestor.acceptClass(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IIndexConstants.INTERFACE_SUFFIX :", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IIndexConstants.ENUM_SUFFIX :", "+\t\t\t\t\t\t\t// TODO (frederic) need support", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IIndexConstants.ANNOTATION_TYPE_SUFFIX :", "+\t\t\t\t\t\t\t// TODO (frederic) need support", "+\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tif (match(classOrInterface, packageName, typeName, matchRule, type.isClass(), packageDeclaration, simpleName)) {", "-\t\t\t\t\t\t\t\tif (type.isClass()) {", "-\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, simpleName, enclosingTypeNames, path);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, simpleName, enclosingTypeNames, path);", "+\t\t\t\t\t\t\tint kind;", "+\t\t\t\t\t\t\tif (type.isClass()) {", "+\t\t\t\t\t\t\t\tkind = IGenericType.CLASS;", "+\t\t\t\t\t\t\t} else if (type.isInterface()) {", "+\t\t\t\t\t\t\t\tkind = IGenericType.INTERFACE;", "+\t\t\t\t\t\t\t} else if (type.isEnum()) {", "+\t\t\t\t\t\t\t\tkind = IGenericType.ENUM;", "+\t\t\t\t\t\t\t} else /*if (type.isAnnotation())*/ {", "+\t\t\t\t\t\t\t\tkind = IGenericType.ANNOTATION_TYPE;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (match(typeSuffix, packageName, typeName, matchRule, kind, packageDeclaration, simpleName)) {", "+\t\t\t\t\t\t\t\tswitch(kind) {", "+\t\t\t\t\t\t\t\t\tcase IGenericType.CLASS:", "+\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, simpleName, enclosingTypeNames, path);", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase IGenericType.INTERFACE:", "+\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, simpleName, enclosingTypeNames, path);", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase IGenericType.ENUM:", "+\t\t\t\t\t\t\t\t\t\t// TODO need support", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE:", "+\t\t\t\t\t\t\t\t\t\t// TODO need support", "+\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tif (match(classOrInterface, packageName, typeName, matchRule, !typeDeclaration.isInterface(), packageDeclaration, typeDeclaration.name)) {", "-\t\t\t\t\t\t\t\t\t\tif (!typeDeclaration.isInterface()) {", "-\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "+\t\t\t\t\t\t\t\t\tif (match(typeSuffix, packageName, typeName, matchRule, typeDeclaration.getKind(), packageDeclaration, typeDeclaration.name)) {", "+\t\t\t\t\t\t\t\t\t\tswitch(typeDeclaration.getKind()) {", "+\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.CLASS:", "+\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.INTERFACE:", "+\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path);", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ENUM:", "+\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE:", "+\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tif (match(classOrInterface, packageName, typeName, matchRule, !memberTypeDeclaration.isInterface(), packageDeclaration, memberTypeDeclaration.name)) {", "+\t\t\t\t\t\t\t\t\tif (match(typeSuffix, packageName, typeName, matchRule, memberTypeDeclaration.getKind(), packageDeclaration, memberTypeDeclaration.name)) {", "-\t\t\t\t\t\t\t\t\t\tif (!memberTypeDeclaration.isInterface()) {", "-\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "+\t\t\t\t\t\t\t\t\t\tswitch(memberTypeDeclaration.getKind()) {", "+\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.CLASS:", "+\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.INTERFACE:", "+\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path);", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ENUM:", "+\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE:", "+\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f1c8537b055f23226b4a60f18e5176e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java", "commitBeforeChange": "7074c59308dc8c330e55b938db8ab604500cf9cc", "commitAfterChange": "969ab36cc555c2b725d4ca76526de3c9dab44ded", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "signatureAfterChange": " \tpublic void searchAllTypeNames( \t\tfinal char[] packageName,  \t\tfinal char[] typeName, \t\tfinal int matchRule,  \t\tint searchFor,  \t\tIJavaSearchScope scope,  \t\tfinal IRestrictedAccessTypeRequestor nameRequestor, \t\tint waitingPolicy, \t\tIProgressMonitor progressMonitor)  throws JavaModelException", "diff": ["-\t\t\t\t\tswitch (record.typeSuffix) {", "-\t\t\t\t\t\tcase IIndexConstants.CLASS_SUFFIX :", "-\t\t\t\t\t\t\tnameRequestor.acceptClass(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath, access);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IIndexConstants.INTERFACE_SUFFIX :", "-\t\t\t\t\t\t\tnameRequestor.acceptInterface(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath, access);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IIndexConstants.ENUM_SUFFIX :", "-\t\t\t\t\t\t\t// TODO (frederic) hack to get enum while getting all type names...", "-\t\t\t\t\t\t\tnameRequestor.acceptEnum(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath, access);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IIndexConstants.ANNOTATION_TYPE_SUFFIX :", "-\t\t\t\t\t\t\t// TODO (frederic) hack to get annotation while getting all type names...", "-\t\t\t\t\t\t\tnameRequestor.acceptAnnotation(record.pkg, record.simpleName, record.enclosingTypeNames, documentPath, access);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "+\t\t\t\t\tnameRequestor.acceptType(record.modifiers, record.pkg, record.simpleName, record.enclosingTypeNames, documentPath, access);", "-\t\t\t\t\t\t\t\tswitch(kind) {", "-\t\t\t\t\t\t\t\t\tcase IGenericType.CLASS_DECL:", "-\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, simpleName, enclosingTypeNames, path, null);", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase IGenericType.INTERFACE_DECL:", "-\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, simpleName, enclosingTypeNames, path, null);", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase IGenericType.ENUM_DECL:", "-\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE_DECL:", "-\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tnameRequestor.acceptType(type.getFlags(), packageDeclaration, simpleName, enclosingTypeNames, path, null);", "-\t\t\t\t\t\t\t\t\t\tswitch(typeDeclaration.kind()) {", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.CLASS_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path, null);", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.INTERFACE_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path, null);", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ENUM_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptType(typeDeclaration.modifiers, packageDeclaration, typeDeclaration.name, CharOperation.NO_CHAR_CHAR, path, null);", "-\t\t\t\t\t\t\t\t\t\tswitch(memberTypeDeclaration.kind()) {", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.CLASS_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptClass(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path, null);", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.INTERFACE_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptInterface(packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path, null);", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ENUM_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\tcase IGenericType.ANNOTATION_TYPE_DECL:", "-\t\t\t\t\t\t\t\t\t\t\t\t// TODO need support", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tnameRequestor.acceptType(memberTypeDeclaration.modifiers, packageDeclaration, memberTypeDeclaration.name, enclosingTypeNames, path, null);"]}], "num": 7659}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e98dad8b5537880cfa709d78b288d6ee", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67f4f665d39a821d7978db38c4e68251", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ImportRewriteAnalyzer.java", "commitBeforeChange": "919024c6945d276058446a723145394a23656d2f", "commitAfterChange": "4acde1e0a5179616c6bfc8db1555f7556fcd927f", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \t \tprivate String[] getNewImportStrings(IBuffer buffer, PackageEntry packageEntry, boolean isStatic, String lineDelim)", "signatureAfterChange": " \t \tprivate String[] getNewImportStrings(IBuffer buffer, PackageEntry packageEntry, boolean isStatic, String lineDelim)", "diff": ["-\t\t\tString simpleName = curr.getTypeQualifiedName();", "-\t\t\tif (simpleName.indexOf('.') != -1) {", "-\t\t\t\t// member type imports - we preserve it", "+\t\t\tif (curr.isComment()) {", "-\t\t\t\tallImports.add(getNewImportString(curr.getElementName(), isStatic, trailingComment, lineDelim));", "-\t\t\t} else if (!isStarImportAdded) {", "-\t\t\t\tString starImportString= packageEntry.getName() + \".*\"; //$NON-NLS-1$", "-\t\t\t\t// collect all comments", "-\t\t\t\tIRegion rangeBefore = curr.getPrecedingCommentRange();", "-\t\t\t\tif (rangeBefore != null) {", "-\t\t\t\t\tallImports.add(buffer.getText(rangeBefore.getOffset(), rangeBefore.getLength()));", "+\t\t\t\tif (trailingComment != null) {", "+\t\t\t\t\tallImports.add(buffer.getText(rangeAfter.getOffset(), rangeAfter.getLength()));", "-\t\t\t\tIRegion rangeAfter = curr.getTrailingCommentRange();", "-\t\t\t\tString trailComments = null;", "-\t\t\t\tif (rangeAfter != null) {", "-\t\t\t\t\ttrailComments = buffer.getText(rangeAfter.getOffset(), rangeAfter.getLength());", "-\t\t\t\t}", "-\t\t\t\tallImports.add(getNewImportString(starImportString, isStatic, trailComments, lineDelim));", "-\t\t\t\tisStarImportAdded = true;", "-\t\t\t\t// collect all comments", "-\t\t\t\tIRegion rangeBefore = curr.getPrecedingCommentRange();", "-\t\t\t\tif (rangeBefore != null) {", "-\t\t\t\t\tif (allCommentsLead == null) {", "-\t\t\t\t\t\tallCommentsLead = new StringBuffer();", "+\t\t\t\tString simpleName = curr.getTypeQualifiedName();", "+\t\t\t\tif (simpleName.indexOf('.') != -1) {", "+\t\t\t\t\t// member type imports - we preserve it", "+\t\t\t\t\tIRegion rangeBefore = curr.getPrecedingCommentRange();", "+\t\t\t\t\tif (rangeBefore != null) {", "+\t\t\t\t\t\tallImports.add(buffer.getText(rangeBefore.getOffset(), rangeBefore.getLength()));", "-\t\t\t\t\tallCommentsLead.append(buffer.getText(rangeBefore.getOffset(), rangeBefore.getLength()));", "-\t\t\t\t}", "-\t\t\t\tIRegion rangeAfter = curr.getTrailingCommentRange();", "-\t\t\t\tif (rangeAfter != null) {", "-\t\t\t\t\tif (allComments == null) {", "-\t\t\t\t\t\tallComments = new StringBuffer();", "+\t\t\t\t\tIRegion rangeAfter = curr.getTrailingCommentRange();", "+\t\t\t\t\tString trailingComment = null;", "+\t\t\t\t\tif (rangeAfter != null) {", "+\t\t\t\t\t\ttrailingComment = buffer.getText(rangeAfter.getOffset(), rangeAfter.getLength());", "-\t\t\t\t\tallComments.append(buffer.getText(rangeAfter.getOffset(), rangeAfter.getLength()));", "+\t\t\t\t\tallImports.add(getNewImportString(curr.getElementName(), isStatic, trailingComment, lineDelim));", "+\t\t\t\t} else if (!isStarImportAdded) {", "+\t\t\t\t\tString starImportString= packageEntry.getName() + \".*\"; //$NON-NLS-1$", "+\t\t\t\t\t// collect all comments", "+\t\t\t\t\tIRegion rangeBefore = curr.getPrecedingCommentRange();", "+\t\t\t\t\tif (rangeBefore != null) {", "+\t\t\t\t\t\tallImports.add(buffer.getText(rangeBefore.getOffset(), rangeBefore.getLength()));", "+\t\t\t\t\t}", "+\t\t\t\t\tIRegion rangeAfter = curr.getTrailingCommentRange();", "+\t\t\t\t\tString trailComments = null;", "+\t\t\t\t\tif (rangeAfter != null) {", "+\t\t\t\t\t\ttrailComments = buffer.getText(rangeAfter.getOffset(), rangeAfter.getLength());", "+\t\t\t\t\t}", "+\t\t\t\t\tallImports.add(getNewImportString(starImportString, isStatic, trailComments, lineDelim));", "+\t\t\t\t\tisStarImportAdded = true;", "+\t\t\t\t} else {", "+\t\t\t\t\t// collect all comments", "+\t\t\t\t\tIRegion rangeBefore = curr.getPrecedingCommentRange();", "+\t\t\t\t\tif (rangeBefore != null) {", "+\t\t\t\t\t\tif (allCommentsLead == null) {", "+\t\t\t\t\t\t\tallCommentsLead = new StringBuffer();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tallCommentsLead.append(buffer.getText(rangeBefore.getOffset(), rangeBefore.getLength()));", "+\t\t\t\t\t}", "+\t\t\t\t\tIRegion rangeAfter = curr.getTrailingCommentRange();", "+\t\t\t\t\tif (rangeAfter != null) {", "+\t\t\t\t\t\tif (allComments == null) {", "+\t\t\t\t\t\t\tallComments = new StringBuffer();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tallComments.append(buffer.getText(rangeAfter.getOffset(), rangeAfter.getLength()));", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce720d1c208ef57010175f716f432ca8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ImportRewriteAnalyzer.java", "commitBeforeChange": "fd3b7a5f13831ab502da35b25283f8932b2b1174", "commitAfterChange": "4542c74874023fdaf35f1d53423cc7a878dae2ec", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \t \tprivate String[] getNewImportStrings(IBuffer buffer, PackageEntry packageEntry, boolean isStatic, String lineDelim)", "signatureAfterChange": " \t \tprivate String[] getNewImportStrings(IBuffer buffer, PackageEntry packageEntry, boolean isStatic, String lineDelim)", "diff": ["-\t\t\tString simpleName = curr.getTypeQualifiedName();", "-\t\t\tif (simpleName.indexOf('.') != -1) {", "-\t\t\t\t// member type imports - we preserve it", "+\t\t\tif (curr.isComment()) {", "-\t\t\t\tallImports.add(getNewImportString(curr.getElementName(), isStatic, trailingComment, lineDelim));", "-\t\t\t} else if (!isStarImportAdded) {", "-\t\t\t\tString starImportString= packageEntry.getName() + \".*\"; //$NON-NLS-1$", "-\t\t\t\t// collect all comments", "-\t\t\t\tIRegion rangeBefore = curr.getPrecedingCommentRange();", "-\t\t\t\tif (rangeBefore != null) {", "-\t\t\t\t\tallImports.add(buffer.getText(rangeBefore.getOffset(), rangeBefore.getLength()));", "+\t\t\t\tif (trailingComment != null) {", "+\t\t\t\t\tallImports.add(buffer.getText(rangeAfter.getOffset(), rangeAfter.getLength()));", "-\t\t\t\tIRegion rangeAfter = curr.getTrailingCommentRange();", "-\t\t\t\tString trailComments = null;", "-\t\t\t\tif (rangeAfter != null) {", "-\t\t\t\t\ttrailComments = buffer.getText(rangeAfter.getOffset(), rangeAfter.getLength());", "-\t\t\t\t}", "-\t\t\t\tallImports.add(getNewImportString(starImportString, isStatic, trailComments, lineDelim));", "-\t\t\t\tisStarImportAdded = true;", "-\t\t\t\t// collect all comments", "-\t\t\t\tIRegion rangeBefore = curr.getPrecedingCommentRange();", "-\t\t\t\tif (rangeBefore != null) {", "-\t\t\t\t\tif (allCommentsLead == null) {", "-\t\t\t\t\t\tallCommentsLead = new StringBuffer();", "+\t\t\t\tString simpleName = curr.getTypeQualifiedName();", "+\t\t\t\tif (simpleName.indexOf('.') != -1) {", "+\t\t\t\t\t// member type imports - we preserve it", "+\t\t\t\t\tIRegion rangeBefore = curr.getPrecedingCommentRange();", "+\t\t\t\t\tif (rangeBefore != null) {", "+\t\t\t\t\t\tallImports.add(buffer.getText(rangeBefore.getOffset(), rangeBefore.getLength()));", "-\t\t\t\t\tallCommentsLead.append(buffer.getText(rangeBefore.getOffset(), rangeBefore.getLength()));", "-\t\t\t\t}", "-\t\t\t\tIRegion rangeAfter = curr.getTrailingCommentRange();", "-\t\t\t\tif (rangeAfter != null) {", "-\t\t\t\t\tif (allComments == null) {", "-\t\t\t\t\t\tallComments = new StringBuffer();", "+\t\t\t\t\tIRegion rangeAfter = curr.getTrailingCommentRange();", "+\t\t\t\t\tString trailingComment = null;", "+\t\t\t\t\tif (rangeAfter != null) {", "+\t\t\t\t\t\ttrailingComment = buffer.getText(rangeAfter.getOffset(), rangeAfter.getLength());", "-\t\t\t\t\tallComments.append(buffer.getText(rangeAfter.getOffset(), rangeAfter.getLength()));", "+\t\t\t\t\tallImports.add(getNewImportString(curr.getElementName(), isStatic, trailingComment, lineDelim));", "+\t\t\t\t} else if (!isStarImportAdded) {", "+\t\t\t\t\tString starImportString= packageEntry.getName() + \".*\"; //$NON-NLS-1$", "+\t\t\t\t\t// collect all comments", "+\t\t\t\t\tIRegion rangeBefore = curr.getPrecedingCommentRange();", "+\t\t\t\t\tif (rangeBefore != null) {", "+\t\t\t\t\t\tallImports.add(buffer.getText(rangeBefore.getOffset(), rangeBefore.getLength()));", "+\t\t\t\t\t}", "+\t\t\t\t\tIRegion rangeAfter = curr.getTrailingCommentRange();", "+\t\t\t\t\tString trailComments = null;", "+\t\t\t\t\tif (rangeAfter != null) {", "+\t\t\t\t\t\ttrailComments = buffer.getText(rangeAfter.getOffset(), rangeAfter.getLength());", "+\t\t\t\t\t}", "+\t\t\t\t\tallImports.add(getNewImportString(starImportString, isStatic, trailComments, lineDelim));", "+\t\t\t\t\tisStarImportAdded = true;", "+\t\t\t\t} else {", "+\t\t\t\t\t// collect all comments", "+\t\t\t\t\tIRegion rangeBefore = curr.getPrecedingCommentRange();", "+\t\t\t\t\tif (rangeBefore != null) {", "+\t\t\t\t\t\tif (allCommentsLead == null) {", "+\t\t\t\t\t\t\tallCommentsLead = new StringBuffer();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tallCommentsLead.append(buffer.getText(rangeBefore.getOffset(), rangeBefore.getLength()));", "+\t\t\t\t\t}", "+\t\t\t\t\tIRegion rangeAfter = curr.getTrailingCommentRange();", "+\t\t\t\t\tif (rangeAfter != null) {", "+\t\t\t\t\t\tif (allComments == null) {", "+\t\t\t\t\t\t\tallComments = new StringBuffer();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tallComments.append(buffer.getText(rangeAfter.getOffset(), rangeAfter.getLength()));", "+\t\t\t\t\t}"]}], "num": 30862}
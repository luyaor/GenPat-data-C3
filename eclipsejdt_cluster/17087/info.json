{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dbd6f557c7bb757b16bda8b7ab65c16d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4320fa571a927443377b6d43e17463b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public static void searchAllPossibleSubTypes( \tIType type, \tIJavaSearchScope scope, \tfinal Map binariesFromIndexMatches, \tfinal IPathRequestor pathRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)", "signatureAfterChange": "  public static void searchAllPossibleSubTypes( \tIType type, \tIJavaSearchScope scope, \tfinal Map binariesFromIndexMatches, \tfinal IPathRequestor pathRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)", "diff": ["-\tIIndexSearchRequestor searchRequestor = new IndexSearchAdapter(){", "-\t\tpublic void acceptSuperTypeReference(String resourcePath, char[] qualification, char[] typeName, char[] enclosingTypeName, char classOrInterface, char[] superQualification, char[] superTypeName, char superClassOrInterface, int modifiers) {", "-\t\t\tpathRequestor.acceptPath(resourcePath, enclosingTypeName == IIndexConstants.ONE_ZERO);", "-\t\t\tint suffix = resourcePath.toLowerCase().indexOf(SUFFIX_STRING_class);", "+\tIndexQueryRequestor searchRequestor = new IndexQueryRequestor() {", "+\t\tpublic boolean acceptIndexMatch(String documentPath, SearchPattern indexRecord, SearchParticipant participant) {", "+\t\t\tSuperTypeReferencePattern record = (SuperTypeReferencePattern)indexRecord;", "+\t\t\tpathRequestor.acceptPath(documentPath, record.enclosingTypeName == IIndexConstants.ONE_ZERO);", "+\t\t\tchar[] typeName = record.simpleName;", "+\t\t\tint suffix = documentPath.toLowerCase().indexOf(SUFFIX_STRING_class);", "-\t\t\t\tHierarchyBinaryType binaryType = (HierarchyBinaryType)binariesFromIndexMatches.get(resourcePath);", "+\t\t\t\tHierarchyBinaryType binaryType = (HierarchyBinaryType)binariesFromIndexMatches.get(documentPath);", "+\t\t\t\t\tchar[] enclosingTypeName = record.enclosingTypeName;", "-\t\t\t\t\t\tint lastSlash = resourcePath.lastIndexOf('/');", "-\t\t\t\t\t\tif (lastSlash == -1) return;", "-\t\t\t\t\t\tint lastDollar = resourcePath.lastIndexOf('$');", "-\t\t\t\t\t\tif (lastDollar == -1) return;", "-\t\t\t\t\t\tenclosingTypeName = resourcePath.substring(lastSlash+1, lastDollar).toCharArray();", "-\t\t\t\t\t\ttypeName = resourcePath.substring(lastDollar+1, suffix).toCharArray();", "+\t\t\t\t\t\tint lastSlash = documentPath.lastIndexOf('/');", "+\t\t\t\t\t\tif (lastSlash == -1) return true;", "+\t\t\t\t\t\tint lastDollar = documentPath.lastIndexOf('$');", "+\t\t\t\t\t\tif (lastDollar == -1) return true;", "+\t\t\t\t\t\tenclosingTypeName = documentPath.substring(lastSlash+1, lastDollar).toCharArray();", "+\t\t\t\t\t\ttypeName = documentPath.substring(lastDollar+1, suffix).toCharArray();", "-\t\t\t\t\tbinaryType = new HierarchyBinaryType(modifiers, qualification, typeName, enclosingTypeName, classOrInterface);", "-\t\t\t\t\tbinariesFromIndexMatches.put(resourcePath, binaryType);", "+\t\t\t\t\tbinaryType = new HierarchyBinaryType(record.modifiers, record.pkgName, typeName, enclosingTypeName, record.classOrInterface);", "+\t\t\t\t\tbinariesFromIndexMatches.put(documentPath, binaryType);", "-\t\t\t\tbinaryType.recordSuperType(superTypeName, superQualification, superClassOrInterface);", "+\t\t\t\tbinaryType.recordSuperType(record.superSimpleName, record.superQualification, record.superClassOrInterface);", "+\t\t\treturn true;", "-\tSuperTypeReferencePattern pattern = new SuperTypeReferencePattern(null, null, IJavaSearchConstants.EXACT_MATCH, IJavaSearchConstants.CASE_SENSITIVE);", "+\tSuperTypeReferencePattern pattern = new SuperTypeReferencePattern(null, null, SearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE);", "-\t\t\t\tpattern, ", "-\t\t\t\tscope,", "-\t\t\t\tsearchRequestor, ", "-\t\t\t\tindexManager);", "+\t\tpattern, ", "+\t\tnew JavaSearchParticipant(null), // java search only", "+\t\tscope, ", "+\t\tsearchRequestor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdea082d96a3937d626a598a4a4fd0a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java", "commitBeforeChange": "ee6e442281c6adfce6f28a674af1fb9f7f9d707f", "commitAfterChange": "9d88e07972fdc72c8f68cd0cc8f036c691b75fb7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void connect( \t\tIGenericType suppliedType, \t\tIGenericType superclass, \t\tIGenericType[] superinterfaces)", "signatureAfterChange": " \tpublic void connect( \t\tIGenericType type, \t\tIType typeHandle, \t\tIType superclassHandle, \t\tIType[] superinterfaceHandles)", "diff": ["-\t\tIGenericType suppliedType,", "-\t\tIGenericType superclass,", "-\t\tIGenericType[] superinterfaces) {", "+\t\tIGenericType type,", "+\t\tIType typeHandle,", "+\t\tIType superclassHandle,", "+\t\tIType[] superinterfaceHandles) {", "-\t\t// convert all infos to handles", "-\t\tIType typeHandle = getHandle(suppliedType);", "-\t\tIType superHandle = null;", "-\t\tif (superclass != null) {", "-\t\t\tif (superclass instanceof HierarchyResolver.MissingType) {", "-\t\t\t\tthis.hierarchy.missingTypes.add(((HierarchyResolver.MissingType)superclass).simpleName);", "-\t\t\t} else {", "-\t\t\t\tsuperHandle = getHandle(superclass);", "-\t\t\t}", "-\t\t}", "-\t\tIType[] interfaceHandles = null;", "-\t\tif (superinterfaces != null && superinterfaces.length > 0) {", "-\t\t\tint length = superinterfaces.length;", "-\t\t\tIType[] resolvedInterfaceHandles = new IType[length];", "-\t\t\tint index = 0;", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tIGenericType superInterface = superinterfaces[i];", "-\t\t\t\tif (superInterface != null) {", "-\t\t\t\t\tif (superInterface instanceof HierarchyResolver.MissingType) {", "-\t\t\t\t\t\tthis.hierarchy.missingTypes.add(((HierarchyResolver.MissingType)superInterface).simpleName);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tresolvedInterfaceHandles[index] = getHandle(superInterface);", "-\t\t\t\t\t\tif (resolvedInterfaceHandles[index] != null) {", "-\t\t\t\t\t\t\tindex++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t// resize", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tresolvedInterfaceHandles,", "-\t\t\t\t0,", "-\t\t\t\tinterfaceHandles = new IType[index],", "-\t\t\t\t0,", "-\t\t\t\tindex);", "-\t\t}", "-\t\t\t\t\t+ (superHandle == null", "+\t\t\t\t\t+ (superclassHandle == null", "-\t\t\t\t\t\t: ((JavaElement) superHandle).toStringWithAncestors()));", "+\t\t\t\t\t\t: ((JavaElement) superclassHandle).toStringWithAncestors()));", "-\t\t\tif (interfaceHandles == null || interfaceHandles.length == 0) {", "+\t\t\tif (superinterfaceHandles == null || superinterfaceHandles.length == 0) {", "-\t\t\t\tfor (int i = 0, length = interfaceHandles.length; i < length; i++) {", "+\t\t\t\tfor (int i = 0, length = superinterfaceHandles.length; i < length; i++) {", "+\t\t\t\t\tif (superinterfaceHandles[i] == null) continue;", "-\t\t\t\t\t\t\"    \" + ((JavaElement) interfaceHandles[i]).toStringWithAncestors()); //$NON-NLS-1$", "+\t\t\t\t\t\t\"    \" + ((JavaElement) superinterfaceHandles[i]).toStringWithAncestors()); //$NON-NLS-1$", "-\t\tswitch (suppliedType.getKind()) {", "+\t\tswitch (type.getKind()) {", "-\t\t\t\tif (superHandle == null) {", "+\t\t\t\tif (superclassHandle == null) {", "-\t\t\t\t\tthis.hierarchy.cacheSuperclass(typeHandle, superHandle);", "+\t\t\t\t\tthis.hierarchy.cacheSuperclass(typeHandle, superclassHandle);", "-\t\tif (interfaceHandles == null) {", "-\t\t\tinterfaceHandles = TypeHierarchy.NO_TYPE;", "+\t\tif (superinterfaceHandles == null) {", "+\t\t\tsuperinterfaceHandles = TypeHierarchy.NO_TYPE;", "-\t\tthis.hierarchy.cacheSuperInterfaces(typeHandle, interfaceHandles);", "+\t\tthis.hierarchy.cacheSuperInterfaces(typeHandle, superinterfaceHandles);", "-\t\tthis.hierarchy.cacheFlags(typeHandle, suppliedType.getModifiers());", "+\t\tthis.hierarchy.cacheFlags(typeHandle, type.getModifiers());"]}], "num": 17087}
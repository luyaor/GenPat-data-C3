{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6af9ef0fed956414023d59327c9c2d36", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16d221b0b444af32fcca6cdeee6e9c5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "8257947b843e715f21b92a87dc4b423cbc1eed03", "commitAfterChange": "00cae100ff4808e2019f6a4d94df4143c8fabbd0", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tprivate void updateIndex(Openable element, IResourceDelta delta)", "signatureAfterChange": " \tprivate void updateIndex(Openable element, IResourceDelta delta)", "diff": ["+\t\tIndexManager indexManager = this.manager.indexManager;", "-\t\t\t\t\t\tthis.indexManager.indexAll(element.getJavaProject().getProject());", "+\t\t\t\t\t\tindexManager.indexAll(element.getJavaProject().getProject());", "-\t\t\t\t\t\tthis.indexManager.removeIndexFamily(element.getJavaProject().getProject().getFullPath());", "+\t\t\t\t\t\tindexManager.removeIndexFamily(element.getJavaProject().getProject().getFullPath());", "-\t\t\t\t\t\t\tthis.indexManager.discardJobs(jarPath.toString());", "-\t\t\t\t\t\t\tthis.indexManager.removeIndex(jarPath);", "+\t\t\t\t\t\t\tindexManager.discardJobs(jarPath.toString());", "+\t\t\t\t\t\t\tindexManager.removeIndex(jarPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b66302288ca3f5fd27a5862c730c9f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "52b692ed21634a88100b21eba7894614726adbcf", "commitAfterChange": "0d07e8a93b23da2b01f8b175a71d349d77236596", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode( \tBlockScope currentScope, \tCodeStream codeStream, \tboolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, \tboolean valueRequired)", "diff": ["-public void generateCode(", "-\tBlockScope currentScope,", "-\tCodeStream codeStream,", "-\tboolean valueRequired) {", "-", "+public void generateCode(BlockScope currentScope, CodeStream codeStream, \tboolean valueRequired) {", "-\tReferenceBinding allocatedType = this.codegenBinding.declaringClass;", "+\tMethodBinding codegenBinding = this.binding.original();", "+\tReferenceBinding allocatedType = codegenBinding.declaringClass;", "-\tif (this.codegenBinding.canBeSeenBy(allocatedType, this, currentScope)) {", "+\tif (codegenBinding.canBeSeenBy(allocatedType, this, currentScope)) {", "-\t\tcodeStream.invoke(Opcodes.OPC_invokespecial, this.codegenBinding, null /* default declaringClass */);", "+\t\tcodeStream.invoke(Opcodes.OPC_invokespecial, codegenBinding, null /* default declaringClass */);", "-\t\tcodeStream.generateEmulationForConstructor(currentScope, this.codegenBinding);", "+\t\tcodeStream.generateEmulationForConstructor(currentScope, codegenBinding);", "-\t\t\t\tTypeBinding parameterBinding = this.codegenBinding.parameters[i];", "+\t\t\t\tTypeBinding parameterBinding = codegenBinding.parameters[i];", "-\t\t\t\t\tcodeStream.generateBoxingConversion(this.codegenBinding.parameters[i].id);", "+\t\t\t\t\tcodeStream.generateBoxingConversion(codegenBinding.parameters[i].id);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d626a66a93bc324ad8c12792b511ebd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "52b692ed21634a88100b21eba7894614726adbcf", "commitAfterChange": "0d07e8a93b23da2b01f8b175a71d349d77236596", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\tboolean isStatic = this.codegenBinding.isStatic();", "+\tMethodBinding codegenBinding = this.binding.original();", "+\tboolean isStatic = codegenBinding.isStatic();", "-\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, this.codegenBinding, constantPoolDeclaringClass);", "-\t\t} else if( (this.receiver.isSuper()) || this.codegenBinding.isPrivate()){", "-\t\t\tcodeStream.invoke(Opcodes.OPC_invokespecial, this.codegenBinding, constantPoolDeclaringClass);", "+\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, codegenBinding, constantPoolDeclaringClass);", "+\t\t} else if( (this.receiver.isSuper()) || codegenBinding.isPrivate()){", "+\t\t\tcodeStream.invoke(Opcodes.OPC_invokespecial, codegenBinding, constantPoolDeclaringClass);", "-\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokeinterface, this.codegenBinding, constantPoolDeclaringClass);", "+\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokeinterface, codegenBinding, constantPoolDeclaringClass);", "-\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokevirtual, this.codegenBinding, constantPoolDeclaringClass);", "+\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokevirtual, codegenBinding, constantPoolDeclaringClass);", "-\t\tswitch (isUnboxing ? postConversionType(currentScope).id : this.codegenBinding.returnType.id) {", "+\t\tswitch (isUnboxing ? postConversionType(currentScope).id : codegenBinding.returnType.id) {"]}], "num": 29111}
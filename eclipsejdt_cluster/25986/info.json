{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "03f8ea92747a7fa567e502000469a5b6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e34f08fa9af874cff2df4a77f869970", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": " public int literalIndex(FieldBinding aFieldBinding)", "signatureAfterChange": " public int literalIndexForField(char[] declaringClass, char[] name, char[] signature)", "diff": ["- */", "-public int literalIndex(FieldBinding aFieldBinding) {", "-\tint index;", "-\tfinal char[] name = aFieldBinding.name;", "-\tfinal char[] signature = aFieldBinding.type.signature();", "-\tfinal char[] declaringClassConstantPoolName = aFieldBinding.declaringClass.constantPoolName();", "-\tif ((index = getFromCache(declaringClassConstantPoolName, name, signature)) < 0) {", "-\t\t// The entry doesn't exit yet", "-\t\tint classIndex = literalIndexForType(declaringClassConstantPoolName);", "-\t\tint nameAndTypeIndex = literalIndexForFields(literalIndex(name), literalIndex(signature), name, signature);", "-\t\tindex = putInCache(declaringClassConstantPoolName, name, signature, currentIndex++);", "-\t\tif (index > 0xFFFF){", "-\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\twriteU1(FieldRefTag);", "-\t\twriteU2(classIndex);", "-\t\twriteU2(nameAndTypeIndex);", "-\t}", "-\treturn index;", "-}", "+\tint index;", "+\tif ((index = putInCacheIfAbsent(declaringClass, name, signature, this.currentIndex)) < 0) {", "+\t\tthis.currentIndex++;", "+\t\t// doesn't exist yet", "+\t\tif ((index = -index) > 0xFFFF){", "+\t\tint classIndexOffset = this.currentOffset;", "+\t\tif (currentOffset + 4 >= poolContent.length) {", "+\t\t\tresizePoolContents(4);", "+\t\tcurrentOffset+=4;", "+\t\t", "+\t\tfinal int classIndex = literalIndexForType(declaringClass);", "+\t\tfinal int nameAndTypeIndex = literalIndexForNameAndType(name, signature);", "+", "+\t\tpoolContent[classIndexOffset++] = (byte) (classIndex >> 8);", "+\t\tpoolContent[classIndexOffset++] = (byte) classIndex;", "+\t\tpoolContent[classIndexOffset++] = (byte) (nameAndTypeIndex >> 8);", "+\t\tpoolContent[classIndexOffset] = (byte) nameAndTypeIndex;\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b69944ac36c451f5177f8db9a69d9938", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java", "commitBeforeChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "commitAfterChange": "c17970bb54810597f5d28802d36bfac65d844634", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 11, "signatureBeforeChange": " public int literalIndexForMethod(char[] declaringClass, char[] selector, char[] signature, boolean isInterface)", "signatureAfterChange": " public int literalIndexForMethod(char[] declaringClass, char[] selector, char[] signature, boolean isInterface)", "diff": ["-\tint index = getFromCache(declaringClass, selector, signature);", "-\tif (index == -1) {", "-\t\tint classIndex;", "-\t\tif ((classIndex = classCache.get(declaringClass)) < 0) {", "-\t\t\t// The entry doesn't exit yet", "-\t\t\tint nameIndex = literalIndex(declaringClass);", "-\t\t\tclassIndex = classCache.put(declaringClass, this.currentIndex++);", "-\t\t\tif (index > 0xFFFF){", "-\t\t\t\tthis.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());", "-\t\t\t}", "-\t\t\twriteU1(ClassTag);", "-\t\t\t// Then add the 8 bytes representing the long", "-\t\t\twriteU2(nameIndex);", "-\t\t}", "-\t\tint nameAndTypeIndex = literalIndexForMethod(selector, signature);", "-\t\tindex = putInCache(declaringClass, selector, signature, currentIndex++);", "-\t\tif (index > 0xFFFF){", "+\tint index;", "+\tif ((index = putInCacheIfAbsent(declaringClass, selector, signature, this.currentIndex)) < 0) {", "+\t\t// it doesn't exist yet", "+\t\tthis.currentIndex++;", "+\t\tif ((index = -index) > 0xFFFF){", "-\t\t// Then write the class index", "-\t\twriteU2(classIndex);", "-\t\t// The write the nameAndType index", "-\t\twriteU2(nameAndTypeIndex);\t\t", "+", "+\t\tint classIndexOffset = this.currentOffset;", "+\t\tif (currentOffset + 4 >= poolContent.length) {", "+\t\t\tresizePoolContents(4);", "+\t\t}", "+\t\tcurrentOffset+=4;", "+\t\t", "+\t\tfinal int classIndex = literalIndexForType(declaringClass);", "+\t\tfinal int nameAndTypeIndex = literalIndexForNameAndType(selector, signature);", "+", "+\t\tpoolContent[classIndexOffset++] = (byte) (classIndex >> 8);", "+\t\tpoolContent[classIndexOffset++] = (byte) classIndex;", "+\t\tpoolContent[classIndexOffset++] = (byte) (nameAndTypeIndex >> 8);", "+\t\tpoolContent[classIndexOffset] = (byte) nameAndTypeIndex;"]}], "num": 25986}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c8d76c798184f6c23ade5cbff69ac03", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dd896427814604df5ffab940c53d67d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " protected void evaluateWithExpectedProblem(char[] codeSnippet, IProblem expected)", "signatureAfterChange": " \tprotected void evaluateWithExpectedProblem(char[] codeSnippet, IProblem expected)", "diff": ["+\t */", "+\tprotected void evaluateWithExpectedProblem(char[] codeSnippet, IProblem expected) {", "+\t\tRequestor requestor = new Requestor();", "+\t\ttry {", "+\t\t\tcontext.evaluate(codeSnippet, getEnv(), getCompilerOptions(), requestor, getProblemFactory());", "+\t\t} catch (InstallException e) {", "+\t\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "+\t\t}", "+\t\tfor (int i = 0; i <= requestor.resultIndex; i++) {", "+\t\t\tEvaluationResult result = requestor.results[i];", "+\t\t\tassertTrue(\"Has value\", !result.hasValue());", "+\t\t\tassertTrue(\"Has problem\", result.hasProblems());", "+\t\t\tassertEquals(\"Evaluation type\", EvaluationResult.T_CODE_SNIPPET, result.getEvaluationType());", "+\t\t\tassertEquals(\"Evaluation id\", codeSnippet, result.getEvaluationID());", "+\t\t\tIProblem[] problems = result.getProblems();", "+\t\t\tif (equals(expected, problems[0])) {", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}", "+\t\tassertTrue(\"Expected problem not found\", false);", "- */", "-protected void evaluateWithExpectedProblem(char[] codeSnippet, IProblem expected) {", "-\tRequestor requestor = new Requestor();", "-\ttry {", "-\t\tcontext.evaluate(codeSnippet, getEnv(), getOptions(), requestor, getProblemFactory());", "-\t} catch (InstallException e) {", "-\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "-\t}", "-\tfor (int i = 0; i <= requestor.resultIndex; i++) {", "-\t\tEvaluationResult result = requestor.results[i];", "-\t\tif (equals(expected, problems[0])) {", "-\t\t\treturn;", "-\tassertTrue(\"Expected problem not found\", false);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c0ac4e03751003cef9b8c41a676ce12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": " protected void evaluateWithExpectedProblem(GlobalVariable var, IProblem expected)", "signatureAfterChange": " \tprotected void evaluateWithExpectedProblem(GlobalVariable var, IProblem expected)", "diff": ["- */", "-protected void evaluateWithExpectedProblem(GlobalVariable var, IProblem expected) {", "-\tRequestor requestor = new Requestor();", "-\ttry {", "-\t\tcontext.evaluateVariables(getEnv(), getOptions(), requestor, getProblemFactory());", "-\t} catch (InstallException e) {", "-\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "-\t}", "-\tfor (int i = 0; i <= requestor.resultIndex; i++) {", "-\t\tEvaluationResult result = requestor.results[i];", "-\t\tassertTrue(\"Has value\", !result.hasValue());", "-\t\tassertTrue(\"Has problem\", result.hasProblems());", "-\t\tassertEquals(\"Evaluation type\", EvaluationResult.T_VARIABLE, result.getEvaluationType());", "-\t\tassertEquals(\"Evaluation id\", var.getName(), result.getEvaluationID());", "-\t\tIProblem[] problems = result.getProblems();", "-\t\tif (equals(expected, problems[0])) {", "-\t\t\treturn;", "+\t */", "+\tprotected void evaluateWithExpectedProblem(GlobalVariable var, IProblem expected) {", "+\t\tRequestor requestor = new Requestor();", "+\t\ttry {", "+\t\t\tcontext.evaluateVariables(getEnv(), getCompilerOptions(), requestor, getProblemFactory());", "+\t\t} catch (InstallException e) {", "+\t\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "-\t}", "-\tassertTrue(\"Expected problem not found\", false);", "-}", "+\t\tfor (int i = 0; i <= requestor.resultIndex; i++) {", "+\t\t\tEvaluationResult result = requestor.results[i];", "+\t\t\tassertTrue(\"Has value\", !result.hasValue());", "+\t\t\tassertTrue(\"Has problem\", result.hasProblems());", "+\t\t\tassertEquals(\"Evaluation type\", EvaluationResult.T_VARIABLE, result.getEvaluationType());", "+\t\t\tassertEquals(\"Evaluation id\", var.getName(), result.getEvaluationID());", "+\t\t\tIProblem[] problems = result.getProblems();", "+\t\t\tif (equals(expected, problems[0])) {", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\tassertTrue(\"Expected problem not found\", false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37319104c1b9f4bdaeeae50d0fe0d3c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": " protected void evaluateWithExpectedType(char[] codeSnippet, char[] expectedTypeName)", "signatureAfterChange": " \tprotected void evaluateWithExpectedType(char[] codeSnippet, char[] expectedTypeName)", "diff": ["- */", "-protected void evaluateWithExpectedType(char[] codeSnippet, char[] expectedTypeName) {", "-\tRequestor requestor = new Requestor();", "-\ttry {", "-\t\tcontext.evaluate(codeSnippet, getEnv(), getOptions(), requestor, getProblemFactory());", "-\t} catch (InstallException e) {", "-\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "-\t}", "-\tif (requestor.resultIndex != 0) {", "-\t\tfor (int i = 0; i < requestor.resultIndex; i++){", "-\t\t\tSystem.out.println(\"unexpected result[\"+i+\"]: \" + requestor.results[i]);", "-\tassertTrue(\"Got one result\", requestor.resultIndex == 0);", "-\tEvaluationResult result = requestor.results[0];", "-\tif (expectedTypeName == null) {", "-\t\tassertTrue(\"Has value\", !result.hasValue());", "-\t} else {", "-\t\tassertTrue(\"Has value\", result.hasValue());", "-\t\tassertEquals(\"Evaluation type\", EvaluationResult.T_CODE_SNIPPET, result.getEvaluationType());", "-\t\t//assertEquals(\"Evaluation id\", codeSnippet, result.getEvaluationID());", "-\t\tassertEquals(\"Value type name\", expectedTypeName, result.getValueTypeName());", "-\t}", "-}", "+\t */", "+\tprotected void evaluateWithExpectedType(char[] codeSnippet, char[] expectedTypeName) {", "+\t\tRequestor requestor = new Requestor();", "+\t\ttry {", "+\t\t\tcontext.evaluate(codeSnippet, getEnv(), getCompilerOptions(), requestor, getProblemFactory());", "+\t\t} catch (InstallException e) {", "+\t\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "+\t\tif (requestor.resultIndex != 0) {", "+\t\t\tfor (int i = 0; i < requestor.resultIndex; i++) {", "+\t\t\t\tSystem.out.println(\"unexpected result[\" + i + \"]: \" + requestor.results[i]);", "+\t\t\t}", "+\t\t}", "+\t\tassertTrue(\"Got one result\", requestor.resultIndex == 0);", "+\t\tEvaluationResult result = requestor.results[0];", "+\t\tif (expectedTypeName == null) {", "+\t\t\tassertTrue(\"Has value\", !result.hasValue());", "+\t\t} else {", "+\t\t\tassertTrue(\"Has value\", result.hasValue());", "+\t\t\tassertEquals(\"Value type name\", expectedTypeName, result.getValueTypeName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "790b3928797fae51bb3fd7dd79a18652", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 13, "signatureBeforeChange": " protected void evaluateWithExpectedProblem(char[] codeSnippet, String problemsString)", "signatureAfterChange": " \tprotected void evaluateWithExpectedProblem(char[] codeSnippet, String problemsString)", "diff": ["- */", "-protected void evaluateWithExpectedProblem(char[] codeSnippet, String problemsString) {", "-\tRequestor requestor = new Requestor();", "-\ttry {", "-\t\tcontext.evaluate(codeSnippet, getEnv(), getOptions(), requestor, getProblemFactory());", "-\t} catch (InstallException e) {", "-\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "-\tassertTrue(\"Got one result\", requestor.resultIndex == 0);", "-\tEvaluationResult result = requestor.results[0];", "-\tassertTrue(\"Has value\", !result.hasValue());", "-\tassertTrue(\"Has problem\", result.hasProblems());", "-\tassertEquals(\"Evaluation type\", EvaluationResult.T_CODE_SNIPPET, result.getEvaluationType());", "-\tassertEquals(\"Evaluation id\", codeSnippet, result.getEvaluationID());", "-\tStringBuffer problemBuffer = new StringBuffer(20);", "-\tIProblem[] problems = result.getProblems();", "-\tfor (int i = 0; i < problems.length; i++) {", "-\t\tproblemBuffer.append(problems[i].getMessage()).append('\\n');", "-\t}", "-\tassertEquals(\"Unexpected problems\", problemsString, problemBuffer.toString());", "-}", "+\t */", "+\tprotected void evaluateWithExpectedProblem(char[] codeSnippet, String problemsString) {", "+\t\tRequestor requestor = new Requestor();", "+\t\ttry {", "+\t\t\tcontext.evaluate(codeSnippet, getEnv(), getCompilerOptions(), requestor, getProblemFactory());", "+\t\t} catch (InstallException e) {", "+\t\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "+\t\t}", "+\t\tassertTrue(\"Got one result\", requestor.resultIndex == 0);", "+\t\tEvaluationResult result = requestor.results[0];", "+\t\tStringBuffer problemBuffer = new StringBuffer(20);", "+\t\tfor (int i = 0; i < problems.length; i++) {", "+\t\t\tproblemBuffer.append(problems[i].getMessage()).append('\\n');", "+\t\tassertEquals(\"Unexpected problems\", problemsString, problemBuffer.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "850b481697cee6718ff934f29faf99a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": " protected void evaluateWithExpectedValue(char[] codeSnippet, char[] displayString, char[] typeName)", "signatureAfterChange": " \tprotected void evaluateWithExpectedValue(char[] codeSnippet, char[] displayString, char[] typeName)", "diff": ["- */", "-protected void evaluateWithExpectedValue(char[] codeSnippet, char[] displayString, char[] typeName) {", "-\tRequestor requestor = new Requestor();", "-\ttry {", "-\t\tcontext.evaluate(codeSnippet, getEnv(), getOptions(), requestor, getProblemFactory());", "-\t} catch (InstallException e) {", "-\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "-\t}", "-\tassertTrue(\"Got one result\", requestor.resultIndex == 0);", "-\tEvaluationResult result = requestor.results[0];", "-\tif (displayString == null) {", "-\t\tassertTrue(\"Missing value\", !result.hasValue());", "-\t} else {", "-\t\tassertTrue(\"Has value\", result.hasValue());", "-\t\tassertEquals(\"Evaluation type\", EvaluationResult.T_CODE_SNIPPET, result.getEvaluationType());", "-\t\t//assertEquals(\"Evaluation id\", codeSnippet, result.getEvaluationID());", "-\t\tassertEquals(\"Value display string\", displayString, result.getValueDisplayString());", "-\t\tassertEquals(\"Value type name\", typeName, result.getValueTypeName());", "-\t}", "-}", "+\t */", "+\tprotected void evaluateWithExpectedValue(char[] codeSnippet, char[] displayString, char[] typeName) {", "+\t\tRequestor requestor = new Requestor();", "+\t\t\tcontext.evaluate(codeSnippet, getEnv(), getCompilerOptions(), requestor, getProblemFactory());", "+\t\t} catch (InstallException e) {", "+\t\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "+\t\t}", "+\t\tassertTrue(\"Got one result\", requestor.resultIndex == 0);", "+\t\tEvaluationResult result = requestor.results[0];", "+\t\tif (displayString == null) {", "+\t\t\tassertTrue(\"Missing value\", !result.hasValue());", "+\t\t} else {", "+\t\t\tassertTrue(\"Has value\", result.hasValue());", "+\t\t\tassertEquals(\"Evaluation type\", EvaluationResult.T_CODE_SNIPPET, result.getEvaluationType());", "+\t\t\t//assertEquals(\"Evaluation id\", codeSnippet, result.getEvaluationID());", "+\t\t\tassertEquals(\"Value display string\", displayString, result.getValueDisplayString());", "+\t\t\tassertEquals(\"Value type name\", typeName, result.getValueTypeName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcd16a84ff290c99d51ac6a1ba0cab78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/eval/EvaluationTest.java", "commitBeforeChange": "faf6597aa00a794b3bf608aa263d02964fb5a0f9", "commitAfterChange": "26e210811de2fca857d5561ae26405b72dccc0f5", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": " protected void evaluateWithExpectedValue(GlobalVariable var, char[] displayString, char[] typeName)", "signatureAfterChange": " \tprotected void evaluateWithExpectedValue(GlobalVariable var, char[] displayString, char[] typeName)", "diff": ["- */", "-protected void evaluateWithExpectedValue(GlobalVariable var, char[] displayString, char[] typeName) {", "-\tRequestor requestor = new Requestor();", "-\ttry {", "-\t\tcontext.evaluateVariable(var, getEnv(), getOptions(), requestor, getProblemFactory());", "-\t} catch (InstallException e) {", "-\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "-\t}", "-\tif (requestor.resultIndex != 0) {", "-\t\tfor (int i = 0; i < requestor.resultIndex; i++){", "-\t\t\tSystem.out.println(\"unexpected result[\"+i+\"]: \" + requestor.results[i]);", "-\t}", "-\tassertTrue(\"Unexpected result\", requestor.resultIndex == 0);", "-\tEvaluationResult result = requestor.results[0];", "-\tif (displayString == null) {", "-\t\tassertTrue(\"Has value\", !result.hasValue());", "-\t} else {", "-\t\tassertTrue(\"Has value\", result.hasValue());", "-\t\tassertEquals(\"Value display string\", displayString, result.getValueDisplayString());", "-\t\tassertEquals(\"Value type name\", typeName, result.getValueTypeName());", "-\t}", "-}", "+\t */", "+\tprotected void evaluateWithExpectedValue(GlobalVariable var, char[] displayString, char[] typeName) {", "+\t\tRequestor requestor = new Requestor();", "+\t\ttry {", "+\t\t\tcontext.evaluateVariable(var, getEnv(), getCompilerOptions(), requestor, getProblemFactory());", "+\t\t} catch (InstallException e) {", "+\t\t\tassertTrue(\"Target exception \" + e.getMessage(), false);", "+\t\t}", "+\t\tif (requestor.resultIndex != 0) {", "+\t\t\tfor (int i = 0; i < requestor.resultIndex; i++) {", "+\t\t\t\tSystem.out.println(\"unexpected result[\" + i + \"]: \" + requestor.results[i]);", "+\t\t\t}", "+\t\t}", "+\t\tassertTrue(\"Unexpected result\", requestor.resultIndex == 0);", "+\t\tEvaluationResult result = requestor.results[0];", "+\t\tif (displayString == null) {", "+\t\t\tassertTrue(\"Has value\", !result.hasValue());", "+\t\t} else {", "+\t\t\tassertTrue(\"Has value\", result.hasValue());", "+\t\t\tassertEquals(\"Value display string\", displayString, result.getValueDisplayString());", "+\t\t\tassertEquals(\"Value type name\", typeName, result.getValueTypeName());", "+\t\t}", "+\t}"]}], "num": 33371}
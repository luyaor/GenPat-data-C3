{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7bd56224c4589e3b0d50cb08972eff3e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "236d9b72fc256f2cdba1b74b80595909", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StackMapAttributeTest.java", "commitBeforeChange": "8a3b59860042c242d4e16ee3f50746d591d948f0", "commitAfterChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tpublic void test018()", "signatureAfterChange": "  \tpublic void test018()", "diff": ["+            \t\tITERABLE_IMPL_JRE8.replaceAll(\"\\\\*\", \"Value_Type\") +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68d563073dd40def9df50ab3f54fe1fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "3d9dfcf2d4683f81f20b400a02d628c05183bbef", "commitAfterChange": "10f53ffde4fd2f21862aebc4c2818dc05c3ec342", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors\\\" value=\\\"disabled\\\"/>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e53532220d9f4739ad397ebcf11bb7d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "67da1da15e9afbcd33679f07597c706e7915cf4a", "commitAfterChange": "027fccb2c17e0f0d2b28705c6704af10fc8ce0aa", "methodNumberBeforeChange": 142, "methodNumberAfterChange": 144, "signatureBeforeChange": " \tprotected void consumeRule(int act)", "signatureAfterChange": " \tprotected void consumeRule(int act)", "diff": ["-\t    case 339 : // System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt PushRPAREN UnaryExpression\");", "+\t    case 339 : // System.out.println(\"CastExpression ::= PushLPAREN PrimitiveType Dimsopt PushRPAREN InsideCastExpression\");", "-\t    case 340 : // System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN UnaryExpressionNotPlusMinus\");", "+\t    case 340 : // System.out.println(\"CastExpression ::= PushLPAREN Name Dims PushRPAREN InsideCastExpression...\");", "-\t    case 341 : // System.out.println(\"CastExpression ::= PushLPAREN Expression PushRPAREN UnaryExpressionNotPlusMinus\");", "+\t    case 341 : // System.out.println(\"CastExpression ::= PushLPAREN Expression PushRPAREN InsideCastExpressionLL1...\");", "-\t    case 343 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression MULTIPLY UnaryExpression\");", "+\t    case 342 : // System.out.println(\"InsideCastExpression ::=\");", "+\t\t\t    consumeInsideCastExpression();  ", "+\t\t\t\tbreak ;", "+\t ", "+\t    case 343 : // System.out.println(\"InsideCastExpressionLL1 ::=\");", "+\t\t\t    consumeInsideCastExpressionLL1();  ", "+\t\t\t\tbreak ;", "+\t ", "+\t    case 345 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression MULTIPLY UnaryExpression\");", "-\t    case 344 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression DIVIDE UnaryExpression\");", "+\t    case 346 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression DIVIDE UnaryExpression\");", "-\t    case 345 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression REMAINDER UnaryExpression\");", "+\t    case 347 : // System.out.println(\"MultiplicativeExpression ::= MultiplicativeExpression REMAINDER UnaryExpression\");", "-\t    case 347 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS MultiplicativeExpression\");", "+\t    case 349 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression PLUS MultiplicativeExpression\");", "-\t    case 348 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS MultiplicativeExpression\");", "+\t    case 350 : // System.out.println(\"AdditiveExpression ::= AdditiveExpression MINUS MultiplicativeExpression\");", "-\t    case 350 : // System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT AdditiveExpression\");", "+\t    case 352 : // System.out.println(\"ShiftExpression ::= ShiftExpression LEFT_SHIFT AdditiveExpression\");", "-\t    case 351 : // System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT AdditiveExpression\");", "+\t    case 353 : // System.out.println(\"ShiftExpression ::= ShiftExpression RIGHT_SHIFT AdditiveExpression\");", "-\t    case 352 : // System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT AdditiveExpression\");", "+\t    case 354 : // System.out.println(\"ShiftExpression ::= ShiftExpression UNSIGNED_RIGHT_SHIFT AdditiveExpression\");", "-\t    case 354 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS ShiftExpression\");", "+\t    case 356 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS ShiftExpression\");", "-\t    case 355 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER ShiftExpression\");", "+\t    case 357 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER ShiftExpression\");", "-\t    case 356 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL ShiftExpression\");", "+\t    case 358 : // System.out.println(\"RelationalExpression ::= RelationalExpression LESS_EQUAL ShiftExpression\");", "-\t    case 357 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER_EQUAL ShiftExpression\");", "+\t    case 359 : // System.out.println(\"RelationalExpression ::= RelationalExpression GREATER_EQUAL ShiftExpression\");", "-\t    case 358 : // System.out.println(\"RelationalExpression ::= RelationalExpression instanceof ReferenceType\");", "+\t    case 360 : // System.out.println(\"RelationalExpression ::= RelationalExpression instanceof ReferenceType\");", "-\t    case 360 : // System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL RelationalExpression\");", "+\t    case 362 : // System.out.println(\"EqualityExpression ::= EqualityExpression EQUAL_EQUAL RelationalExpression\");", "-\t    case 361 : // System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL RelationalExpression\");", "+\t    case 363 : // System.out.println(\"EqualityExpression ::= EqualityExpression NOT_EQUAL RelationalExpression\");", "-\t    case 363 : // System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\");", "+\t    case 365 : // System.out.println(\"AndExpression ::= AndExpression AND EqualityExpression\");", "-\t    case 365 : // System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR AndExpression\");", "+\t    case 367 : // System.out.println(\"ExclusiveOrExpression ::= ExclusiveOrExpression XOR AndExpression\");", "-\t    case 367 : // System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR ExclusiveOrExpression\");", "+\t    case 369 : // System.out.println(\"InclusiveOrExpression ::= InclusiveOrExpression OR ExclusiveOrExpression\");", "-\t    case 369 : // System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression AND_AND InclusiveOrExpression\");", "+\t    case 371 : // System.out.println(\"ConditionalAndExpression ::= ConditionalAndExpression AND_AND InclusiveOrExpression\");", "-\t    case 371 : // System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression OR_OR ConditionalAndExpression\");", "+\t    case 373 : // System.out.println(\"ConditionalOrExpression ::= ConditionalOrExpression OR_OR ConditionalAndExpression\");", "-\t    case 373 : // System.out.println(\"ConditionalExpression ::= ConditionalOrExpression QUESTION Expression COLON...\");", "+\t    case 375 : // System.out.println(\"ConditionalExpression ::= ConditionalOrExpression QUESTION Expression COLON...\");", "-\t    case 376 : // System.out.println(\"Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression\");", "+\t    case 378 : // System.out.println(\"Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression\");", "-\t    case 378 : // System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\");", "+\t    case 380 : // System.out.println(\"Assignment ::= InvalidArrayInitializerAssignement\");", "-\t    case 379 : // System.out.println(\"LeftHandSide ::= Name\");", "+\t    case 381 : // System.out.println(\"LeftHandSide ::= Name\");", "-\t    case 382 : // System.out.println(\"AssignmentOperator ::= EQUAL\");", "+\t    case 384 : // System.out.println(\"AssignmentOperator ::= EQUAL\");", "-\t    case 383 : // System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\");", "+\t    case 385 : // System.out.println(\"AssignmentOperator ::= MULTIPLY_EQUAL\");", "-\t    case 384 : // System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\");", "+\t    case 386 : // System.out.println(\"AssignmentOperator ::= DIVIDE_EQUAL\");", "-\t    case 385 : // System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\");", "+\t    case 387 : // System.out.println(\"AssignmentOperator ::= REMAINDER_EQUAL\");", "-\t    case 386 : // System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\");", "+\t    case 388 : // System.out.println(\"AssignmentOperator ::= PLUS_EQUAL\");", "-\t    case 387 : // System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\");", "+\t    case 389 : // System.out.println(\"AssignmentOperator ::= MINUS_EQUAL\");", "-\t    case 388 : // System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\");", "+\t    case 390 : // System.out.println(\"AssignmentOperator ::= LEFT_SHIFT_EQUAL\");", "-\t    case 389 : // System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\");", "+\t    case 391 : // System.out.println(\"AssignmentOperator ::= RIGHT_SHIFT_EQUAL\");", "-\t    case 390 : // System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\");", "+\t    case 392 : // System.out.println(\"AssignmentOperator ::= UNSIGNED_RIGHT_SHIFT_EQUAL\");", "-\t    case 391 : // System.out.println(\"AssignmentOperator ::= AND_EQUAL\");", "+\t    case 393 : // System.out.println(\"AssignmentOperator ::= AND_EQUAL\");", "-\t    case 392 : // System.out.println(\"AssignmentOperator ::= XOR_EQUAL\");", "+\t    case 394 : // System.out.println(\"AssignmentOperator ::= XOR_EQUAL\");", "-\t    case 393 : // System.out.println(\"AssignmentOperator ::= OR_EQUAL\");", "+\t    case 395 : // System.out.println(\"AssignmentOperator ::= OR_EQUAL\");", "-\t    case 400 : // System.out.println(\"Expressionopt ::=\");", "+\t    case 402 : // System.out.println(\"Expressionopt ::=\");", "-\t    case 404 : // System.out.println(\"ImportDeclarationsopt ::=\");", "+\t    case 406 : // System.out.println(\"ImportDeclarationsopt ::=\");", "-\t    case 405 : // System.out.println(\"ImportDeclarationsopt ::= ImportDeclarations\");", "+\t    case 407 : // System.out.println(\"ImportDeclarationsopt ::= ImportDeclarations\");", "-\t    case 406 : // System.out.println(\"TypeDeclarationsopt ::=\");", "+\t    case 408 : // System.out.println(\"TypeDeclarationsopt ::=\");", "-\t    case 407 : // System.out.println(\"TypeDeclarationsopt ::= TypeDeclarations\");", "+\t    case 409 : // System.out.println(\"TypeDeclarationsopt ::= TypeDeclarations\");", "-\t    case 408 : // System.out.println(\"ClassBodyDeclarationsopt ::=\");", "+\t    case 410 : // System.out.println(\"ClassBodyDeclarationsopt ::=\");", "-\t    case 409 : // System.out.println(\"ClassBodyDeclarationsopt ::= NestedType ClassBodyDeclarations\");", "+\t    case 411 : // System.out.println(\"ClassBodyDeclarationsopt ::= NestedType ClassBodyDeclarations\");", "-\t     case 410 : // System.out.println(\"Modifiersopt ::=\");", "+\t     case 412 : // System.out.println(\"Modifiersopt ::=\");", "-\t    case 411 : // System.out.println(\"Modifiersopt ::= Modifiers\");", "+\t    case 413 : // System.out.println(\"Modifiersopt ::= Modifiers\");", "-\t    case 412 : // System.out.println(\"BlockStatementsopt ::=\");", "+\t    case 414 : // System.out.println(\"BlockStatementsopt ::=\");", "-\t     case 414 : // System.out.println(\"Dimsopt ::=\");", "+\t     case 416 : // System.out.println(\"Dimsopt ::=\");", "-\t     case 416 : // System.out.println(\"ArgumentListopt ::=\");", "+\t     case 418 : // System.out.println(\"ArgumentListopt ::=\");", "-\t    case 420 : // System.out.println(\"FormalParameterListopt ::=\");", "+\t    case 422 : // System.out.println(\"FormalParameterListopt ::=\");", "-\t     case 424 : // System.out.println(\"InterfaceMemberDeclarationsopt ::=\");", "+\t     case 426 : // System.out.println(\"InterfaceMemberDeclarationsopt ::=\");", "-\t     case 425 : // System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType InterfaceMemberDeclarations\");", "+\t     case 427 : // System.out.println(\"InterfaceMemberDeclarationsopt ::= NestedType InterfaceMemberDeclarations\");", "-\t    case 426 : // System.out.println(\"NestedType ::=\");", "+\t    case 428 : // System.out.println(\"NestedType ::=\");", "-\t     case 427 : // System.out.println(\"ForInitopt ::=\");", "+\t     case 429 : // System.out.println(\"ForInitopt ::=\");", "-\t     case 429 : // System.out.println(\"ForUpdateopt ::=\");", "+\t     case 431 : // System.out.println(\"ForUpdateopt ::=\");", "-\t     case 433 : // System.out.println(\"Catchesopt ::=\");", "+\t     case 435 : // System.out.println(\"Catchesopt ::=\");", "-\t     case 435 : // System.out.println(\"ArrayInitializeropt ::=\");", "+\t     case 437 : // System.out.println(\"ArrayInitializeropt ::=\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb07875867ff94411e621df9aecf7ca3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "45eeabd31b9c2797f8358a82ef28ccf00894105c", "commitAfterChange": "5d2c6921b9c27b1190136ddb9ecff1e67f94074b", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tpublic void test013()", "signatureAfterChange": " \tpublic void test013()", "diff": ["+\t\t\t\"\t\t<option key=\\\"org.eclipse.jdt.core.compiler.problem.redundantSuperinterface\\\" value=\\\"ignore\\\"/>\\n\" +"]}], "num": 18559}
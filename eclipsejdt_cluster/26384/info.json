{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62e136d7a508db6a476be35edfcc8549", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22d417ba08fe447fe2982918cc3a1651", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "398e8d147a46c3545f1649998bce7bfa998c4b7a", "commitAfterChange": "ca754698b1922c273fecd6b08af20ed5ff251081", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tpublic void testExampleSnippets()", "signatureAfterChange": " \tpublic void testExampleSnippets()", "diff": ["-\t\t\tAST ast = new AST();", "-\t\t\tCompilationUnit cu = ast.newCompilationUnit();", "+\t\t\tAST localAst = new AST();", "+\t\t\tCompilationUnit cu = localAst.newCompilationUnit();", "-\t\t\tPackageDeclaration pd = ast.newPackageDeclaration();", "-\t\t\tpd.setName(ast.newName(new String[]{\"com\", \"example\"})); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tPackageDeclaration pd = localAst.newPackageDeclaration();", "+\t\t\tpd.setName(localAst.newName(new String[]{\"com\", \"example\"})); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tImportDeclaration im1 = ast.newImportDeclaration();", "-\t\t\tim1.setName(ast.newName(new String[]{\"java\", \"io\"})); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tImportDeclaration im1 = localAst.newImportDeclaration();", "+\t\t\tim1.setName(localAst.newName(new String[]{\"java\", \"io\"})); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tImportDeclaration im2 = ast.newImportDeclaration();", "-\t\t\tim2.setName(ast.newName(new String[]{\"java\", \"util\", \"List\"})); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\tImportDeclaration im2 = localAst.newImportDeclaration();", "+\t\t\tim2.setName(localAst.newName(new String[]{\"java\", \"util\", \"List\"})); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\t\tTypeDeclaration td = ast.newTypeDeclaration();", "+\t\t\tTypeDeclaration td = localAst.newTypeDeclaration();", "-\t\t\ttd.setName(ast.newSimpleName(\"MyClass\")); //$NON-NLS-1$", "+\t\t\ttd.setName(localAst.newSimpleName(\"MyClass\")); //$NON-NLS-1$", "-\t\t\tVariableDeclarationFragment f1 = ast.newVariableDeclarationFragment();", "-\t\t\tf1.setName(ast.newSimpleName(\"DEBUG\")); //$NON-NLS-1$", "-\t\t\tf1.setInitializer(ast.newBooleanLiteral(true));", "-\t\t\tFieldDeclaration fd = ast.newFieldDeclaration(f1);", "-\t\t\tfd.setType(ast.newPrimitiveType(PrimitiveType.BOOLEAN));", "+\t\t\tVariableDeclarationFragment f1 = localAst.newVariableDeclarationFragment();", "+\t\t\tf1.setName(localAst.newSimpleName(\"DEBUG\")); //$NON-NLS-1$", "+\t\t\tf1.setInitializer(localAst.newBooleanLiteral(true));", "+\t\t\tFieldDeclaration fd = localAst.newFieldDeclaration(f1);", "+\t\t\tfd.setType(localAst.newPrimitiveType(PrimitiveType.BOOLEAN));", "-\t\t\tMethodDeclaration md = ast.newMethodDeclaration();", "+\t\t\tMethodDeclaration md = localAst.newMethodDeclaration();", "-\t\t\tmd.setName(ast.newSimpleName(\"main\")); //$NON-NLS-1$", "-\t\t\tmd.setReturnType(ast.newPrimitiveType(PrimitiveType.VOID));", "+\t\t\tmd.setName(localAst.newSimpleName(\"main\")); //$NON-NLS-1$", "+\t\t\tmd.setReturnType(localAst.newPrimitiveType(PrimitiveType.VOID));", "-\t\t\tSingleVariableDeclaration a1 = ast.newSingleVariableDeclaration();", "-\t\t\ta1.setType(ast.newArrayType(", "-\t\t\t\tast.newSimpleType(ast.newSimpleName(\"String\")))); //$NON-NLS-1$", "-\t\t\ta1.setName(ast.newSimpleName(\"args\")); //$NON-NLS-1$", "+\t\t\tSingleVariableDeclaration a1 = localAst.newSingleVariableDeclaration();", "+\t\t\ta1.setType(localAst.newArrayType(", "+\t\t\t\tlocalAst.newSimpleType(localAst.newSimpleName(\"String\")))); //$NON-NLS-1$", "+\t\t\ta1.setName(localAst.newSimpleName(\"args\")); //$NON-NLS-1$", "-\t\t\tBlock b = ast.newBlock();", "+\t\t\tBlock b = localAst.newBlock();", "-\t\t\tMethodInvocation e = ast.newMethodInvocation();", "-\t\t\te.setExpression(ast.newName(new String[] {\"System\", \"out\"})); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\te.setName(ast.newSimpleName(\"println\")); //$NON-NLS-1$", "-\t\t\tStringLiteral h = ast.newStringLiteral();", "+\t\t\tMethodInvocation e = localAst.newMethodInvocation();", "+\t\t\te.setExpression(localAst.newName(new String[] {\"System\", \"out\"})); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\te.setName(localAst.newSimpleName(\"println\")); //$NON-NLS-1$", "+\t\t\tStringLiteral h = localAst.newStringLiteral();", "-\t\t\tb.statements().add(ast.newExpressionStatement(e));", "+\t\t\tb.statements().add(localAst.newExpressionStatement(e));", "-\t\t\tArrayCreation ac1 = ast.newArrayCreation();", "+\t\t\tArrayCreation ac1 = localAst.newArrayCreation();", "-\t\t\t\tast.newArrayType(", "-\t\t\t\t\tast.newSimpleType(ast.newSimpleName(\"String\")))); //$NON-NLS-1$", "-\t\t\tac1.dimensions().add(ast.newSimpleName(\"len\")); //$NON-NLS-1$", "-\t\t\tb.statements().add(ast.newExpressionStatement(ac1));", "+\t\t\t\tlocalAst.newArrayType(", "+\t\t\t\t\tlocalAst.newSimpleType(localAst.newSimpleName(\"String\")))); //$NON-NLS-1$", "+\t\t\tac1.dimensions().add(localAst.newSimpleName(\"len\")); //$NON-NLS-1$", "+\t\t\tb.statements().add(localAst.newExpressionStatement(ac1));", "-\t\t\tArrayCreation ac2 = ast.newArrayCreation();", "+\t\t\tArrayCreation ac2 = localAst.newArrayCreation();", "-\t\t\t\tast.newArrayType(", "-\t\t\t\t\tast.newPrimitiveType(PrimitiveType.DOUBLE), 3));", "-\t\t\tac2.dimensions().add(ast.newNumberLiteral(\"7\")); //$NON-NLS-1$", "-\t\t\tac2.dimensions().add(ast.newNumberLiteral(\"24\")); //$NON-NLS-1$", "-\t\t\tb.statements().add(ast.newExpressionStatement(ac2));", "+\t\t\t\tlocalAst.newArrayType(", "+\t\t\t\t\tlocalAst.newPrimitiveType(PrimitiveType.DOUBLE), 3));", "+\t\t\tac2.dimensions().add(localAst.newNumberLiteral(\"7\")); //$NON-NLS-1$", "+\t\t\tac2.dimensions().add(localAst.newNumberLiteral(\"24\")); //$NON-NLS-1$", "+\t\t\tb.statements().add(localAst.newExpressionStatement(ac2));", "-\t\t\tArrayCreation ac3 = ast.newArrayCreation();", "+\t\t\tArrayCreation ac3 = localAst.newArrayCreation();", "-\t\t\t\tast.newArrayType(", "-\t\t\t\t\tast.newPrimitiveType(PrimitiveType.INT)));", "-\t\t\tArrayInitializer ai = ast.newArrayInitializer();", "+\t\t\t\tlocalAst.newArrayType(", "+\t\t\t\t\tlocalAst.newPrimitiveType(PrimitiveType.INT)));", "+\t\t\tArrayInitializer ai = localAst.newArrayInitializer();", "-\t\t\tai.expressions().add(ast.newNumberLiteral(\"1\")); //$NON-NLS-1$", "-\t\t\tai.expressions().add(ast.newNumberLiteral(\"2\")); //$NON-NLS-1$", "-\t\t\tb.statements().add(ast.newExpressionStatement(ac3));", "+\t\t\tai.expressions().add(localAst.newNumberLiteral(\"1\")); //$NON-NLS-1$", "+\t\t\tai.expressions().add(localAst.newNumberLiteral(\"2\")); //$NON-NLS-1$", "+\t\t\tb.statements().add(localAst.newExpressionStatement(ac3));", "-\t\t\tClassInstanceCreation cr1 = ast.newClassInstanceCreation();", "-\t\t\tcr1.setName(ast.newSimpleName(\"String\")); //$NON-NLS-1$", "-\t\t\tcr1.arguments().add(ast.newNumberLiteral(\"10\"));\t\t //$NON-NLS-1$", "-\t\t\tb.statements().add(ast.newExpressionStatement(cr1));", "+\t\t\tClassInstanceCreation cr1 = localAst.newClassInstanceCreation();", "+\t\t\tcr1.setName(localAst.newSimpleName(\"String\")); //$NON-NLS-1$", "+\t\t\tcr1.arguments().add(localAst.newNumberLiteral(\"10\"));\t\t //$NON-NLS-1$", "+\t\t\tb.statements().add(localAst.newExpressionStatement(cr1));", "-\t\t\tClassInstanceCreation cr2 = ast.newClassInstanceCreation();", "-\t\t\tAnonymousClassDeclaration ad1 = ast.newAnonymousClassDeclaration();", "+\t\t\tClassInstanceCreation cr2 = localAst.newClassInstanceCreation();", "+\t\t\tAnonymousClassDeclaration ad1 = localAst.newAnonymousClassDeclaration();", "-\t\t\tcr2.setName(ast.newSimpleName(\"Listener\")); //$NON-NLS-1$", "-\t\t\tMethodDeclaration md0 = ast.newMethodDeclaration();", "+\t\t\tcr2.setName(localAst.newSimpleName(\"Listener\")); //$NON-NLS-1$", "+\t\t\tMethodDeclaration md0 = localAst.newMethodDeclaration();", "-\t\t\tmd0.setName(ast.newSimpleName(\"handleEvent\")); //$NON-NLS-1$", "-\t\t\tmd0.setBody(ast.newBlock());", "+\t\t\tmd0.setName(localAst.newSimpleName(\"handleEvent\")); //$NON-NLS-1$", "+\t\t\tmd0.setBody(localAst.newBlock());", "-\t\t\tb.statements().add(ast.newExpressionStatement(cr2));", "+\t\t\tb.statements().add(localAst.newExpressionStatement(cr2));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c4dbe62860b56f4fee3cd3a6cc97c4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelStatus.java", "commitBeforeChange": "ab7733a54402b64bb328ef9a7aa36d933deb8ac7", "commitAfterChange": "7ed8fb3f335f5407b01a590a0c668733ebc19aa6", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic String getMessage()", "signatureAfterChange": " \tpublic String getMessage()", "diff": ["-\t\t\t\t\treturn Util.bind(\"status.coreException\"); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.status_coreException; ", "-\t\t\t\t\treturn Util.bind(\"build.initializationError\"); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.build_initializationError; ", "-\t\t\t\t\treturn Util.bind(\"build.serializationError\"); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.build_serializationError; ", "-\t\t\t\t\treturn Util.bind(\"status.cannotUseDeviceOnPath\", getPath().toString()); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.bind(Messages.status_cannotUseDeviceOnPath, getPath().toString()); ", "-\t\t\t\t\treturn Util.bind(\"status.JDOMError\"); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.status_JDOMError; ", "-\t\t\t\t\treturn Util.bind(\"element.doesNotExist\",((JavaElement)elements[0]).toStringWithAncestors()); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.bind(Messages.element_doesNotExist, ((JavaElement)elements[0]).toStringWithAncestors()); ", "-\t\t\t\t\treturn Util.bind(\"element.notOnClasspath\",((JavaElement)elements[0]).toStringWithAncestors()); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.bind(Messages.element_notOnClasspath, ((JavaElement)elements[0]).toStringWithAncestors()); ", "-\t\t\t\t\treturn Util.bind(\"status.evaluationError\", string); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.bind(Messages.status_evaluationError, string); ", "-\t\t\t\t\treturn Util.bind(\"status.indexOutOfBounds\"); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.status_indexOutOfBounds; ", "-\t\t\t\t\treturn Util.bind(\"status.invalidContents\"); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.status_invalidContents; ", "-\t\t\t\t\treturn Util.bind(\"status.invalidDestination\", ((JavaElement)elements[0]).toStringWithAncestors()); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.bind(Messages.status_invalidDestination, ((JavaElement)elements[0]).toStringWithAncestors()); ", "-\t\t\t\t\tStringBuffer buff= new StringBuffer(Util.bind(\"operation.notSupported\")); //$NON-NLS-1$", "+\t\t\t\t\tStringBuffer buff= new StringBuffer(Messages.operation_notSupported); ", "-\t\t\t\t\treturn Util.bind(\"status.invalidName\", string); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.bind(Messages.status_invalidName, string); ", "-\t\t\t\t\treturn Util.bind(\"status.invalidPackage\", string); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.bind(Messages.status_invalidPackage, string); ", "-\t\t\t\t\t\treturn Util.bind(\"status.invalidPath\", getPath() == null ? \"null\" : getPath().toString()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\treturn Messages.bind(", "+\t\t\t\t\t\t\tMessages.status_invalidPath,", "+\t\t\t\t\t\t\tnew String[] {getPath() == null ? \"null\" : getPath().toString()} //$NON-NLS-1$", "+\t\t\t\t\t\t); ", "-\t\t\t\t\treturn Util.bind(\"status.invalidProject\", string); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.bind(Messages.status_invalidProject, string); ", "-\t\t\t\t\treturn Util.bind(\"status.invalidResource\", string); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.bind(Messages.status_invalidResource, string); ", "-\t\t\t\t\treturn Util.bind(\"status.invalidResourceType\", string); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.bind(Messages.status_invalidResourceType, string); ", "-\t\t\t\t\t\treturn Util.bind(\"status.invalidSibling\", string); //$NON-NLS-1$", "+\t\t\t\t\t\treturn Messages.bind(Messages.status_invalidSibling, string); ", "-\t\t\t\t\t\treturn Util.bind(\"status.invalidSibling\", ((JavaElement)elements[0]).toStringWithAncestors()); //$NON-NLS-1$", "+\t\t\t\t\t\treturn Messages.bind(Messages.status_invalidSibling, ((JavaElement)elements[0]).toStringWithAncestors()); ", "-\t\t\t\t\treturn Util.bind(\"status.IOException\"); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.status_IOException; ", "-\t\t\t\t\t\t\treturn Util.bind(\"operation.cannotRenameDefaultPackage\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\treturn Messages.operation_cannotRenameDefaultPackage; ", "-\t\t\t\t\t\treturn Util.bind(\"status.nameCollision\", \"\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\treturn Messages.bind(Messages.status_nameCollision, \"\");  //$NON-NLS-1$", "-\t\t\t\t\treturn Util.bind(\"operation.needElements\"); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.operation_needElements; ", "-\t\t\t\t\treturn Util.bind(\"operation.needName\"); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.operation_needName; ", "-\t\t\t\t\treturn Util.bind(\"operation.needPath\"); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.operation_needPath; ", "-\t\t\t\t\treturn Util.bind(\"operation.needString\"); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.operation_needString; ", "-\t\t\t\t\treturn Util.bind(\"operation.pathOutsideProject\", string, ((JavaElement)elements[0]).toStringWithAncestors()); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.bind(Messages.operation_pathOutsideProject, new String[] {string, ((JavaElement)elements[0]).toStringWithAncestors()}); ", "-\t\t\t\t\t\treturn Util.bind(\"status.defaultPackageReadOnly\"); //$NON-NLS-1$", "+\t\t\t\t\t\treturn Messages.status_defaultPackageReadOnly; ", "-\t\t\t\t\treturn  Util.bind(\"status.readOnly\", name); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.bind(Messages.status_readOnly, name); ", "-\t\t\t\t\treturn Util.bind(\"operation.needAbsolutePath\", getPath().toString()); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.bind(Messages.operation_needAbsolutePath, getPath().toString()); ", "-\t\t\t\t\treturn Util.bind(\"status.targetException\"); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.status_targetException; ", "-\t\t\t\t\treturn Util.bind(\"status.updateConflict\"); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.status_updateConflict; ", "-\t\t\t\t\treturn Util.bind(\"status.noLocalContents\", getPath().toString()); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.bind(Messages.status_noLocalContents, getPath().toString()); ", "-\t\t\t\t\treturn Util.bind(\"classpath.unboundContainerPath\", description, javaProject.getElementName()); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.bind(Messages.classpath_unboundContainerPath, new String[] {description, javaProject.getElementName()}); ", "-\t\t\t\t\treturn Util.bind(\"classpath.invalidContainer\", description, javaProject.getElementName()); //$NON-NLS-1$", "+\t\t\t\t\treturn Messages.bind(Messages.classpath_invalidContainer, new String[] {description, javaProject.getElementName()}); ", "-\t\t\t\treturn Util.bind(\"classpath.unboundVariablePath\", path.makeRelative().toString(), javaProject.getElementName()); //$NON-NLS-1$", "+\t\t\t\treturn Messages.bind(Messages.classpath_unboundVariablePath, new String[] {path.makeRelative().toString(), javaProject.getElementName()}); ", "-\t\t\t\treturn Util.bind(\"classpath.cycle\", javaProject.getElementName()); //$NON-NLS-1$", "+\t\t\t\treturn Messages.bind(Messages.classpath_cycle, javaProject.getElementName()); ", "-\t\t\t\treturn Util.bind(\"classpath.disabledInclusionExclusionPatterns\", newPath.makeRelative().toString(), projectName); //$NON-NLS-1$", "+\t\t\t\treturn Messages.bind(Messages.classpath_disabledInclusionExclusionPatterns, new String[] {newPath.makeRelative().toString(), projectName}); ", "-\t\t\t\treturn Util.bind(\"classpath.disabledMultipleOutputLocations\", newPath.makeRelative().toString(), projectName); //$NON-NLS-1$", "+\t\t\t\treturn Messages.bind(Messages.classpath_disabledMultipleOutputLocations, new String[] {newPath.makeRelative().toString(), projectName}); ", "-\t\t\t\t\treturn Util.bind(\"classpath.incompatibleLibraryJDKLevel\", new String[]{\t//$NON-NLS-1$", "+\t\t\t\t\treturn Messages.bind(Messages.classpath_incompatibleLibraryJDKLevel, new String[]{\t"]}], "num": 26384}
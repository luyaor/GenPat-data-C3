{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94810a9bf6409d8408832f7ed2ccc127", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25e27cd9cf64be8a43412df76d53c651", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 151, "signatureBeforeChange": "\t\t  \tpublic void testPackageDeclaration()", "signatureAfterChange": "\t\t  \tpublic void testPackageDeclaration()", "diff": ["+", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tassertTrue(x.annotations().isEmpty());", "+\t\t}", "+\t\tif (ast.apiLevel() >= AST.LEVEL_3_0) {", "+\t\t\tgenericPropertyListTest(x, x.annotations(), new Property(\"Annotations\", true, Annotation.class) { //$NON-NLS-1$", "+\t\t\t\tpublic ASTNode sample(AST targetAst, boolean parented) {", "+\t\t\t\t\tMarkerAnnotation result = targetAst.newMarkerAnnotation();", "+\t\t\t\t\tif (parented) {", "+\t\t\t\t\t\tPackageDeclaration pd = targetAst.newPackageDeclaration();", "+\t\t\t\t\t\tpd.annotations().add(result);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fba27cbce2515d1886f25fb6b8ee3401", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/SampleASTs.java", "commitBeforeChange": "6a514a348b687707873fde0f6184e6b09d1607ee", "commitAfterChange": "15cb47257592351618c0f415edc117a6b315a803", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static ASTNode oneOfEach(AST target)", "signatureAfterChange": " \tpublic static ASTNode oneOfEach(AST target)", "diff": ["+\t\tif (target.apiLevel() >= AST.JLS8) {", "+\t\t\tExtraDimension ed = target.newExtraDimension();", "+\t\t\tmd.extraDimensions().add(ed);", "+\t\t}", "+\t\tif (target.apiLevel() >= JLS4_INTERNAL) {", "+\t\t\tUnionType ut = target.newUnionType();", "+\t\t\tcatchClause.getException().setType(ut);", "+\t\t}", "+\t\tif (target.apiLevel() >= AST.JLS8) {", "+\t\t\tIntersectionType it = target.newIntersectionType();", "+\t\t\tcastExpression.setType(it);", "+\t\t}", "+\t\tif (target.apiLevel() >= AST.JLS8) {", "+\t\t\tLambdaExpression lambdaExpression = target.newLambdaExpression();", "+\t\t\tz.add(lambdaExpression);", "+\t\t}"]}], "num": 71289}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a6eb8ac6d406be7af177c13cbabdb0b4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a02a6f74979abbff8f4255eaa76723f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "0bb8dba3efca9a5500b67c37770710de86a06c2e", "commitAfterChange": "6726a5eb1723cea7dfdb4d1905ca215391f75d8e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t// recording the closing of AutoCloseable resources:", "+\tif (CharOperation.equals(TypeConstants.CLOSE, this.selector)) ", "+\t{", "+\t\tFakedTrackingVariable trackingVariable = FakedTrackingVariable.getCloseTrackingVariable(this.receiver);", "+\t\tif (trackingVariable != null) { // null happens if receiver is not a local variable or not an AutoCloseable", "+\t\t\tif (trackingVariable.methodScope == currentScope.methodScope()) {", "+\t\t\t\ttrackingVariable.markClose(flowInfo, flowContext);", "+\t\t\t} else {", "+\t\t\t\ttrackingVariable.markClosedInNestedMethod();", "+\t\t\t}", "+\t\t}", "+\t}", "+\t\t\t// if argument is an AutoCloseable insert info that it *may* be closed (by the target method, i.e.)", "+\t\t\tflowInfo = FakedTrackingVariable.markPassedToOutside(currentScope, this.arguments[i], flowInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23633fa0068c6677e83b386ffbdcdb1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "3f131825dfbebcd2d9846517fd8419ae56311784", "commitAfterChange": "ede87229fe271e061ecd80820c468f7956351f61", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t// recording the closing of AutoCloseable resources:", "-\tif (CharOperation.equals(TypeConstants.CLOSE, this.selector)) ", "-\t{", "-\t\tFakedTrackingVariable trackingVariable = FakedTrackingVariable.getCloseTrackingVariable(this.receiver);", "-\t\tif (trackingVariable != null) { // null happens if receiver is not a local variable or not an AutoCloseable", "-\t\t\tif (trackingVariable.methodScope == currentScope.methodScope()) {", "-\t\t\t\ttrackingVariable.markClose(flowInfo, flowContext);", "-\t\t\t} else {", "-\t\t\t\ttrackingVariable.markClosedInNestedMethod();", "-\t\t\t}", "-\t\t}", "-\t}", "-\t\t\t// if argument is an AutoCloseable insert info that it *may* be closed (by the target method, i.e.)", "-\t\t\tflowInfo = FakedTrackingVariable.markPassedToOutside(currentScope, this.arguments[i], flowInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "867b2a865033dd83fe531247f5d9329b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "054ef716f5c2a57e4e4c8e790ba134b6404d4f2a", "commitAfterChange": "1bf30b93f1c2f17c02d0cecfa43e877f00d01800", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t// recording the closing of AutoCloseable resources:", "+\tif (CharOperation.equals(TypeConstants.CLOSE, this.selector)) ", "+\t{", "+\t\tFakedTrackingVariable trackingVariable = FakedTrackingVariable.getCloseTrackingVariable(this.receiver);", "+\t\tif (trackingVariable != null) { // null happens if receiver is not a local variable or not an AutoCloseable", "+\t\t\tif (trackingVariable.methodScope == currentScope.methodScope()) {", "+\t\t\t\ttrackingVariable.markClose(flowInfo, flowContext);", "+\t\t\t} else {", "+\t\t\t\ttrackingVariable.markClosedInNestedMethod();", "+\t\t\t}", "+\t\t}", "+\t}", "+\t\t\t// if argument is an AutoCloseable insert info that it *may* be closed (by the target method, i.e.)", "+\t\t\tflowInfo = FakedTrackingVariable.markPassedToOutside(currentScope, this.arguments[i], flowInfo);"]}], "num": 28310}
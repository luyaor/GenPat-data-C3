{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e71cb042563c7c707b6a8ffedb2e5615", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cf6e1fcdad8a4d498004681f6c6c08f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "e0cd6e6d433203b4e058ad278dd47a28ff7501a4", "commitAfterChange": "1e3b5e92aa51321dda2b6b727f1d9a3ab953e626", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public char[] genericSignature()", "signatureAfterChange": " public char[] genericSignature()", "diff": ["-\t    for (int i = 0, length = this.typeVariables.length; i < length; i++) {", "+\t    for (int i = 0, length = this.typeVariables.length; i < length; i++)", "-\t    }", "-\t\t    for (int i = 0, length = this.superInterfaces.length; i < length; i++) {", "-\t\t        if (this.superInterfaces[i].isParameterizedType()) break noSignature;", "-\t\t    }        ", "+\t\t    for (int i = 0, length = this.superInterfaces.length; i < length; i++)", "+\t\t        if (this.superInterfaces[i].isParameterizedType())", "+\t\t\t\t\tbreak noSignature;", "-\tif (this.superclass != null) {", "+\tif (this.superclass != null)", "-\t} else {", "-\t\t// interface scenario only (as Object cannot be generic) - 65953", "+\telse // interface scenario only (as Object cannot be generic) - 65953", "-\t}", "-    for (int i = 0, length = this.superInterfaces.length; i < length; i++) {", "+    for (int i = 0, length = this.superInterfaces.length; i < length; i++)", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85c85a93ceb1b247965f2071d68031cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "7691e377e6a3f67a1337716bc77c2ad7f6446dc7", "commitAfterChange": "ba9391e4c434f83f729da7aa6be3c7a6812bfd1a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "signatureAfterChange": " \tpublic void collectSubstitutes(TypeBinding otherType, Map substitutes)", "diff": ["-\t\t// only collect for method type parameters", "-\t\tif (!(this.declaringElement instanceof MethodBinding)) return;", "+            // recurse in variable bounds (82187)", "+            if (this.superclass != null && this.firstBound == this.superclass) {", "+                this.superclass.collectSubstitutes(otherType, substitutes);", "+            }", "+            for (int i = 0, length = this.superInterfaces.length; i < length; i++) {", "+                this.superInterfaces[i].collectSubstitutes(otherType, substitutes);", "+            }", "-\t    // recurse in variable bounds (82187)", "-\t    if (this.superclass != null && this.firstBound == this.superclass) {", "-\t    \tthis.superclass.collectSubstitutes(otherType, substitutes);", "-\t    }", "-\t   \tfor (int i = 0, length = this.superInterfaces.length; i < length; i++) {", "-\t   \t\tthis.superInterfaces[i].collectSubstitutes(otherType, substitutes);", "-\t   \t}"]}], "num": 7836}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f9cfb284a6c2c2b3eabea48e7532a00", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00f33f24368d5da8556942f8fe09b87b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "c2e73e92d84b995d792bc11e9e3cc44e31128806", "commitAfterChange": "7530e9811f8e0b012d59fd23237f75cdb4977fd6", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprivate long detectStandardAnnotation(Scope scope, ReferenceBinding annotationType, MemberValuePair valueAttribute)", "signatureAfterChange": " \tprivate long detectStandardAnnotation(Scope scope, ReferenceBinding annotationType, MemberValuePair valueAttribute)", "diff": ["-\t\t\t\t\tif (valueAttribute.value instanceof FalseLiteral) {", "-\t\t\t\t\t\t// parameter 'false' means: this annotation cancels any defaults", "-\t\t\t\t\t\ttagBits |= TagBits.AnnotationNullUnspecifiedByDefault;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t} else if (valueAttribute.compilerElementPair != null) {", "+\t\t\t\t\tif (valueAttribute.compilerElementPair != null)", "-\t\t\t\t\t}", "-\t\t\t\t} else if (scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8) { // fetch default value  - TODO: cache it?", "+\t\t\t\t} else { // fetch default value  - TODO: cache it?", "-\t\t\t\t\tif (methods != null && methods.length == 1) {", "-\t\t\t\t\t\tObject defaultValue = methods[0].getDefaultValue();", "-\t\t\t\t\t\tif (defaultValue instanceof Object[])", "-\t\t\t\t\t\t\tvalue = defaultValue;", "-\t\t\t\t\t}", "+\t\t\t\t\tif (methods != null && methods.length == 1)", "+\t\t\t\t\t\tvalue = methods[0].getDefaultValue();", "+\t\t\t\t\telse", "+\t\t\t\t\t\ttagBits |= TagBits.AnnotationNonNullByDefault; // custom unconfigurable NNBD", "-\t\t\t\tif (value != null) {", "-\t\t\t\t\ttagBits |= nullTagBitsFromAnnotationValue(value);", "-\t\t\t\t} else {", "-\t\t\t\t\t// neither explicit value, nor default value from DefaultLocation (1.8)", "-\t\t\t\t\ttagBits |= TagBits.AnnotationNonNullByDefault;", "+\t\t\t\tif (value instanceof BooleanConstant) {", "+\t\t\t\t\t// boolean value is used for declaration annotations, signal using the annotation tag bit:", "+\t\t\t\t\ttagBits |= ((BooleanConstant)value).booleanValue() ? TagBits.AnnotationNonNullByDefault : TagBits.AnnotationNullUnspecifiedByDefault;", "+\t\t\t\t} else if (value != null) {", "+\t\t\t\t\t// non-boolean value signals type annotations, evaluate from DefaultLocation[] to bitvector a la Binding#NullnessDefaultMASK:", "+\t\t\t\t\ttagBits |= nullLocationBitsFromAnnotationValue(value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3475cab15c5ac509afbf00ca0845e7ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "c6083a2d48fa11ffa1e9554a2f00be6af36feafe", "commitAfterChange": "6dbe2813dd7277bd2252f3441ba09237b6b43790", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprivate long detectStandardAnnotation(Scope scope, ReferenceBinding annotationType, MemberValuePair valueAttribute)", "signatureAfterChange": " \tprivate long detectStandardAnnotation(Scope scope, ReferenceBinding annotationType, MemberValuePair valueAttribute)", "diff": ["-\t\t\tcase TypeIds.T_ConfiguredAnnotationNullable :", "-\t\t\t\ttagBits |= TagBits.AnnotationNullable;", "-\t\t\t\tbreak;", "-\t\t\tcase TypeIds.T_ConfiguredAnnotationNonNull :", "-\t\t\t\ttagBits |= TagBits.AnnotationNonNull;", "-\t\t\t\tbreak;", "-\t\t\tcase TypeIds.T_ConfiguredAnnotationNonNullByDefault :", "-\t\t\t\t// seeing this id implies that null annotation analysis is enabled", "-\t\t\t\tObject value = null;", "-\t\t\t\tif (valueAttribute != null) {", "-\t\t\t\t\tif (valueAttribute.compilerElementPair != null)", "-\t\t\t\t\t\tvalue = valueAttribute.compilerElementPair.value;", "-\t\t\t\t} else { // fetch default value  - TODO: cache it?", "-\t\t\t\t\tMethodBinding[] methods = annotationType.methods();", "-\t\t\t\t\tif (methods != null && methods.length == 1)", "-\t\t\t\t\t\tvalue = methods[0].getDefaultValue();", "-\t\t\t\t\telse", "-\t\t\t\t\t\ttagBits |= TagBits.AnnotationNonNullByDefault; // custom unconfigurable NNBD", "-\t\t\t\t}", "-\t\t\t\tif (value instanceof BooleanConstant) {", "-\t\t\t\t\t// boolean value is used for declaration annotations, signal using the annotation tag bit:", "-\t\t\t\t\ttagBits |= ((BooleanConstant)value).booleanValue() ? TagBits.AnnotationNonNullByDefault : TagBits.AnnotationNullUnspecifiedByDefault;", "-\t\t\t\t} else if (value != null) {", "-\t\t\t\t\t// non-boolean value signals type annotations, evaluate from DefaultLocation[] to bitvector a la Binding#NullnessDefaultMASK:", "-\t\t\t\t\ttagBits |= nullLocationBitsFromAnnotationValue(value);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\tif (annotationType.hasNullBit(TypeIds.BitNullableAnnotation)) {", "+\t\t\ttagBits |= TagBits.AnnotationNullable;", "+\t\t} else if (annotationType.hasNullBit(TypeIds.BitNonNullAnnotation)) {", "+\t\t\ttagBits |= TagBits.AnnotationNonNull;", "+\t\t} else if (annotationType.hasNullBit(TypeIds.BitNonNullByDefaultAnnotation)) {", "+\t\t\tObject value = null;", "+\t\t\tif (valueAttribute != null) {", "+\t\t\t\tif (valueAttribute.compilerElementPair != null)", "+\t\t\t\t\tvalue = valueAttribute.compilerElementPair.value;", "+\t\t\t} else { // fetch default value  - TODO: cache it?", "+\t\t\t\tMethodBinding[] methods = annotationType.methods();", "+\t\t\t\tif (methods != null && methods.length == 1)", "+\t\t\t\t\tvalue = methods[0].getDefaultValue();", "+\t\t\t\telse", "+\t\t\t\t\ttagBits |= TagBits.AnnotationNonNullByDefault; // custom unconfigurable NNBD", "+\t\t\t}", "+\t\t\tif (value instanceof BooleanConstant) {", "+\t\t\t\t// boolean value is used for declaration annotations, signal using the annotation tag bit:", "+\t\t\t\ttagBits |= ((BooleanConstant)value).booleanValue() ? TagBits.AnnotationNonNullByDefault : TagBits.AnnotationNullUnspecifiedByDefault;", "+\t\t\t} else if (value != null) {", "+\t\t\t\t// non-boolean value signals type annotations, evaluate from DefaultLocation[] to bitvector a la Binding#NullnessDefaultMASK:", "+\t\t\t\ttagBits |= nullLocationBitsFromAnnotationValue(value);", "+\t\t\t}", "+\t\t}", "+\t\t"]}], "num": 68155}
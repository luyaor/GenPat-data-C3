{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a87282596e39dc09e1869928a0275697", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a0f933c239e4a3ffbd2b93a9227de08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "e0e72ddcc0cb92dd5918821db9f129be4dc54623", "commitAfterChange": "c6ce9b44823430aa35379738665c59555f0655b0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "signatureAfterChange": " \tpublic void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "diff": ["-\t\tFieldBinding field;", "+\t\tFieldBinding field = null;", "-\t\t\tif (!this.binding.isValidBinding()) return;", "-\t\t\tfield = (FieldBinding) this.binding;", "+\t\t\tif (this.binding != null && this.binding.isValidBinding()) {", "+\t\t\t\tfield = (FieldBinding) this.binding;", "+\t\t\t}", "-\t\tFieldBinding originalBinding = field.original();", "-\t\tif (originalBinding != field) {", "-\t\t    // extra cast needed if method return type has type variable", "-\t\t    if ((originalBinding.type.tagBits & TagBits.HasTypeVariable) != 0 && runtimeTimeType.id != T_Object) {", "-\t\t    \tsetGenericCast(length,originalBinding.type.genericCast(runtimeTimeType));", "-\t\t    }", "-\t\t} \t", "+\t\tif (field != null) {", "+\t\t\tFieldBinding originalBinding = field.original();", "+\t\t\tif (originalBinding != field) {", "+\t\t\t    // extra cast needed if method return type has type variable", "+\t\t\t    if ((originalBinding.type.tagBits & TagBits.HasTypeVariable) != 0 && runtimeTimeType.id != T_Object) {", "+\t\t\t    \tsetGenericCast(length,originalBinding.type.genericCast(runtimeTimeType));", "+\t\t\t    }", "+\t\t\t} \t", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e90185188e507ceecec8076628e25723", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "e0e72ddcc0cb92dd5918821db9f129be4dc54623", "commitAfterChange": "c6ce9b44823430aa35379738665c59555f0655b0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "signatureAfterChange": " \tpublic void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "diff": ["-\t\tFieldBinding originalBinding = this.binding.original();", "-\t\tif (originalBinding != this.binding) {", "-\t\t    // extra cast needed if method return type has type variable", "-\t\t    if ((originalBinding.type.tagBits & TagBits.HasTypeVariable) != 0 && runtimeTimeType.id != T_Object) {", "-\t\t        this.genericCast = originalBinding.type.genericCast(runtimeTimeType);", "-\t\t    }", "+\t\tif (this.binding != null && this.binding.isValidBinding()) {", "+\t\t\tFieldBinding originalBinding = this.binding.original();", "+\t\t\tif (originalBinding != this.binding) {", "+\t\t\t    // extra cast needed if method return type has type variable", "+\t\t\t    if ((originalBinding.type.tagBits & TagBits.HasTypeVariable) != 0 && runtimeTimeType.id != T_Object) {", "+\t\t\t        this.genericCast = originalBinding.type.genericCast(runtimeTimeType);", "+\t\t\t    }", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4f484f4b0f99ffd0846036ef7d8bc9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "e0e72ddcc0cb92dd5918821db9f129be4dc54623", "commitAfterChange": "c6ce9b44823430aa35379738665c59555f0655b0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "signatureAfterChange": " public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "diff": ["-\tif (!this.binding.isValidBinding()) return;", "-\tMethodBinding originalBinding = this.binding.original();", "-\tif (originalBinding != this.binding) {", "-\t    // extra cast needed if method return type has type variable", "-\t    if ((originalBinding.returnType.tagBits & TagBits.HasTypeVariable) != 0 && runtimeTimeType.id != T_Object) {", "-\t        this.genericCast = originalBinding.returnType.genericCast(runtimeTimeType);", "-\t    }", "-\t} \t", "+\tif (this.binding != null && this.binding.isValidBinding()) {", "+\t\tMethodBinding originalBinding = this.binding.original();", "+\t\tif (originalBinding != this.binding) {", "+\t\t    // extra cast needed if method return type has type variable", "+\t\t    if ((originalBinding.returnType.tagBits & TagBits.HasTypeVariable) != 0 && runtimeTimeType.id != T_Object) {", "+\t\t        this.genericCast = originalBinding.returnType.genericCast(runtimeTimeType);", "+\t\t    }", "+\t\t} \t", "+\t}"]}], "num": 44621}
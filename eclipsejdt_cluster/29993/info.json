{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c101dba70d08a7c4847fbb7d796202f0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d6340ee2aeea088010da79639debc14", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["-\t\tObjectVector found = new ObjectVector(); //TODO should rewrite to remove #matchingMethod since found is allocated anyway", "+\t\tObjectVector found = new ObjectVector(); //TODO (kent) should rewrite to remove #matchingMethod since found is allocated anyway", "+\t\tMethodBinding problemMethod = null;", "-\t\t\t\tif (areParametersAssignable(methodBinding.parameters, argumentTypes)) {", "-\t\t\t\t\tswitch (candidatesCount) {", "-\t\t\t\t\t\tcase 0: ", "-\t\t\t\t\t\t\tmatchingMethod = methodBinding; // if only one match, reuse matchingMethod", "-\t\t\t\t\t\t\tcheckedMatchingMethod = true; // matchingMethod is known to exist and match params here", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase 1:", "-\t\t\t\t\t\t\tcandidates = new MethodBinding[foundSize]; // only lazily created if more than one match", "-\t\t\t\t\t\t\tcandidates[0] = matchingMethod; // copy back", "-\t\t\t\t\t\t\tmatchingMethod = null;", "-\t\t\t\t\t\t\t// fall through", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\tcandidates[candidatesCount] = methodBinding;", "+\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "+\t\t\t\tif (compatibleMethod != null) {", "+\t\t\t\t\tif (compatibleMethod.isValidBinding()) {", "+\t\t\t\t\t\tswitch (candidatesCount) {", "+\t\t\t\t\t\t\tcase 0: ", "+\t\t\t\t\t\t\t\tmatchingMethod = compatibleMethod; // if only one match, reuse matchingMethod", "+\t\t\t\t\t\t\t\tcheckedMatchingMethod = true; // matchingMethod is known to exist and match params here", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 1:", "+\t\t\t\t\t\t\t\tcandidates = new MethodBinding[foundSize]; // only lazily created if more than one match", "+\t\t\t\t\t\t\t\tcandidates[0] = matchingMethod; // copy back", "+\t\t\t\t\t\t\t\tmatchingMethod = null;", "+\t\t\t\t\t\t\t\t// fall through", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tcandidates[candidatesCount] = compatibleMethod;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcandidatesCount++;", "+\t\t\t\t\t} else if (problemMethod == null) {", "+\t\t\t\t\t\tproblemMethod = compatibleMethod;", "-\t\t\t\t\tcandidatesCount++;", "+\t\tif (candidatesCount > 0)", "+\t\t\tproblemMethod = null; // forget the problem method if candidates were found", "+", "-\t\t\tif (checkedMatchingMethod || areParametersAssignable(matchingMethod.parameters, argumentTypes)) {", "+\t\t\tif (!checkedMatchingMethod) {", "+\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(matchingMethod, argumentTypes, invocationSite);", "+\t\t\t\tif (compatibleMethod != null) {", "+\t\t\t\t\tif (compatibleMethod.isValidBinding()) {", "+\t\t\t\t\t\tmatchingMethod = compatibleMethod;", "+\t\t\t\t\t\tcheckedMatchingMethod = true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tproblemMethod = compatibleMethod;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (checkedMatchingMethod) {", "-\t\t\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, null, found);\t\t\t\t\t\t", "+\t\t\t\t\tMethodBinding interfaceMethod =", "+\t\t\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, null, found);\t\t\t\t\t\t", "-\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);", "+\t\t\tmatchingMethod =", "+\t\t\t\tfindDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, matchingMethod, found);", "+\t\t\tif (matchingMethod != null) return matchingMethod;", "+\t\t\treturn problemMethod;", "+\t\t\tif (problemMethod != null) return problemMethod;", "+\t\t}", "+", "+\t\t// check for duplicate parameterized methods", "+\t\tif (compilationUnitScope().environment.options.sourceLevel >= ClassFileConstants.JDK1_5) {", "+\t\t\tfor (int i = 0; i < candidatesCount; i++) {", "+\t\t\t\tMethodBinding current = candidates[i];", "+\t\t\t\tif (current instanceof ParameterizedMethodBinding)", "+\t\t\t\t\tfor (int j = i + 1; j < candidatesCount; j++)", "+\t\t\t\t\t\tif (current.declaringClass == candidates[j].declaringClass && current.areParametersEqual(candidates[j]))", "+\t\t\t\t\t\t\treturn new ProblemMethodBinding(candidates[i].selector, candidates[i].parameters, Ambiguous);", "+\t\t\t}", "-\t\t\treturn mostSpecificMethodBinding(candidates, visiblesCount);", "+\t\t\treturn mostSpecificMethodBinding(candidates, visiblesCount, invocationSite);", "-\t\t\t? mostSpecificClassMethodBinding(candidates, visiblesCount)", "-\t\t\t: mostSpecificInterfaceMethodBinding(candidates, visiblesCount);", "+\t\t\t? mostSpecificClassMethodBinding(candidates, visiblesCount, invocationSite)", "+\t\t\t: mostSpecificInterfaceMethodBinding(candidates, visiblesCount, invocationSite);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e1f5ef8cd9669f16ae745eaea8f8560", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "b42787861f816a2d5e1ca0d96a18df1cf4233d07", "commitAfterChange": "4e662c88b43a06e20d9e48b2e15e47b3369e62a5", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["+\t\t// if found several candidates, then eliminate those not matching argument types", "-\t\tif (foundSize == 0) {", "-\t\t\tif (matchingMethod != null && areParametersAssignable(matchingMethod.parameters, argumentTypes)) {", "+\t\tMethodBinding[] candidates = null;", "+\t\tint candidatesCount = 0;", "+\t\tboolean checkedMatchingMethod = false; // is matchingMethod meeting argument expectation ?", "+\t\tif (foundSize > 0) {", "+\t\t\t// argument type compatibility check", "+\t\t\tfor (int i = 0; i < foundSize; i++) {", "+\t\t\t\tMethodBinding methodBinding = (MethodBinding) found.elementAt(i);", "+\t\t\t\tif (areParametersAssignable(methodBinding.parameters, argumentTypes)) {", "+\t\t\t\t\tswitch (candidatesCount) {", "+\t\t\t\t\t\tcase 0: ", "+\t\t\t\t\t\t\tmatchingMethod = methodBinding; // if only one match, reuse matchingMethod", "+\t\t\t\t\t\t\tcheckedMatchingMethod = true; // matchingMethod is known to exist and match params here", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase 1:", "+\t\t\t\t\t\t\tcandidates = new MethodBinding[foundSize]; // only lazily created if more than one match", "+\t\t\t\t\t\t\tcandidates[0] = matchingMethod; // copy back", "+\t\t\t\t\t\t\tmatchingMethod = null;", "+\t\t\t\t\t\t\t// fall through", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tcandidates[candidatesCount] = methodBinding;", "+\t\t\t\t\t}", "+\t\t\t\t\tcandidatesCount++;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t// if only one matching method left (either from start or due to elimination of rivals), then match is in matchingMethod", "+\t\tif (matchingMethod != null) {", "+\t\t\tif (checkedMatchingMethod || areParametersAssignable(matchingMethod.parameters, argumentTypes)) {", "-\t\tMethodBinding[] candidates = new MethodBinding[foundSize];", "-\t\tint candidatesCount = 0;", "-\t\t// argument type compatibility check", "-\t\tfor (int i = 0; i < foundSize; i++) {", "-\t\t\tMethodBinding methodBinding = (MethodBinding) found.elementAt(i);", "-\t\t\tif (areParametersAssignable(methodBinding.parameters, argumentTypes))", "-\t\t\t\tcandidates[candidatesCount++] = methodBinding;", "-\t\t}", "-\t\tif (candidatesCount == 1) {", "-\t\t\t\t// (if no default abstract) must explicitly look for one instead, which could be a better match", "-\t\t\t\tif (!candidates[0].canBeSeenBy(receiverType, invocationSite, this)) {", "-\t\t\t\t\t// ignore matching method (to be consistent with multiple matches, none visible (matching method is then null)", "-\t\t\t\t\tMethodBinding interfaceMethod = findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, null, found);\t\t\t\t\t\t", "-\t\t\t\t\tif (interfaceMethod != null) return interfaceMethod;", "-\t\t\t\t\tcompilationUnitScope().recordTypeReferences(candidates[0].thrownExceptions);", "-\t\t\t\t\treturn candidates[0];", "-\t\t\t\t}", "-\t\t\t\treturn findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, candidates[0], found); // have not checked visibility", "-\t\t}", "-\t\tif (candidatesCount == 0) { // try to find a close match when the parameter order is wrong or missing some parameters", "+\t\t// no match was found, try to find a close match when the parameter order is wrong or missing some parameters", "+\t\tif (candidatesCount == 0) {", "-\t\t// visibility check", "+\t\t// tiebreak using visibility check"]}], "num": 29993}
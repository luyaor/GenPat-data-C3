{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1077572c8c2ea4036440d10d5ae8b796", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "052404ff648ebb374fe8ad8d24cd9bd0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest2.java", "commitBeforeChange": "73d46cf67b022e45f4a1a5989eb3965ffa6f4612", "commitAfterChange": "8d01bdf14ca1578a6e5cf005bcc2d8a196fd2354", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void test0443() throws JavaModelException", "signatureAfterChange": " \tpublic void test0443() throws JavaModelException", "diff": ["-\t\tassertTrue(\"Not an abstract method\", Modifier.isAbstract(methodDeclaration.getModifiers())); ", "+\t\tassertTrue(\"Not an abstract method\", Modifier.isAbstract(methodDeclaration.getModifiers()));", "+\t\tList modifiers = methodDeclaration.modifiers();", "+\t\tassertEquals(\"Wrong size\", 2, modifiers.size());", "+\t\tModifier modifier1 = (Modifier) modifiers.get(0);", "+\t\tassertTrue(\"Not a public modifier\", modifier1.isPublic());", "+\t\tModifier modifier2 = (Modifier) modifiers.get(1);", "+\t\tassertTrue(\"Not an abstract modifier\", modifier2.isAbstract());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7dd6764e120ebc84d4082e37fc46aeda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/Java8ElementProcessor.java", "commitBeforeChange": "70293ebfba1aa3d3dce9544e23e757d77487db91", "commitAfterChange": "2e4e63b9ed8aad7925bed1f9109d7e2d1a341f45", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void testSE8Specifics()", "signatureAfterChange": "  \tpublic void testSE8Specifics()", "diff": ["-\t\tVariableElement field = null, field1 = null;", "+\t\tVariableElement field = null, field1 = null, field11 = null;", "+\t\t\t} else if (\"_field11\".equals(member.getSimpleName().toString())) {", "+\t\t\t\tfield11 = (VariableElement) member;", "+\t\t\t", "+\t\tTypeMirror similar = typeMirror;", "+\t\tassertFalse(\"Should be of same type\", _typeUtils.isSameType(typeMirror, similar));", "+\t\tsimilar = field11.asType();", "+\t\tassertTrue(\"Should be of same type\", _typeUtils.isSameType(typeMirror, similar));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1c0798873be2299557a6368daac3412", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTestAST3_2.java", "commitBeforeChange": "8d01bdf14ca1578a6e5cf005bcc2d8a196fd2354", "commitAfterChange": "626629ce58a6dc508d0b223f570ad72c46ee3dd0", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic void test0443() throws JavaModelException", "signatureAfterChange": " \tpublic void test0443() throws JavaModelException", "diff": ["-\t\tassertTrue(\"Not an abstract method\", Modifier.isAbstract(methodDeclaration.getModifiers())); ", "+\t\tassertTrue(\"Not an abstract method\", Modifier.isAbstract(methodDeclaration.getModifiers()));", "+\t\tList modifiers = methodDeclaration.modifiers();", "+\t\tassertEquals(\"Wrong size\", 2, modifiers.size());", "+\t\tModifier modifier1 = (Modifier) modifiers.get(0);", "+\t\tassertTrue(\"Not a public modifier\", modifier1.isPublic());", "+\t\tModifier modifier2 = (Modifier) modifiers.get(1);", "+\t\tassertTrue(\"Not an abstract modifier\", modifier2.isAbstract());\t\t"]}], "num": 37072}
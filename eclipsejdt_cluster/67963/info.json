{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9871b39e8e1a28230bffad464510a72a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54d08ffd6776dd228ee19acea91ebf43", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "45a56425aa646e258743712b7b8dd871458d173e", "commitAfterChange": "53367e7594cd90802bb610558e9e1ffd148fd7db", "methodNumberBeforeChange": 313, "methodNumberAfterChange": 313, "signatureBeforeChange": " \tpublic void _test311()", "signatureAfterChange": " \tpublic void _test311()", "diff": ["-\t// TODO (kent) reenable once addressed", "+\t// TODO (kent) fixed with !inheritedArg.isEquivalentTo(currentArg) check in MethodVerifier", "-\t\t\t\"should report name clash and ambiguity\");\t", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in p\\\\X.java (at line 4)\\n\" + ", "+\t\t\t\"\tvoid foo(List<X> lx) { }\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash : The method foo(List<X>) of type X has the same erasure as foo(List<Object>) of type X2 but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in p\\\\X.java (at line 6)\\n\" + ", "+\t\t\t\"\tthis.foo((List)null);\\n\" + ", "+\t\t\t\"\t     ^^^\\n\" + ", "+\t\t\t\"The method foo(List<X>) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\");\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a3469ab975d3bca7275ecc50ebc6ef6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a61eee4f24f1c2965e704a1c85f9756b85244f55", "commitAfterChange": "fc6677e40e721485518e6c374f4d05609842a9f4", "methodNumberBeforeChange": 532, "methodNumberAfterChange": 532, "signatureBeforeChange": " \tpublic void test530()", "signatureAfterChange": " \tpublic void test530()", "diff": ["-\t\t\t\"\"", "-\t\t);", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tfoo(l); // BUG!!!\\n\" + ", "+\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\"The method foo(T) in the type Foo<T> is not applicable for the arguments (List)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\t\"\tvoid foo(ArrayList l)\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"The method foo(ArrayList) of type X should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "722497356e467b3bc0d87e89c3fe4538", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "40dc3e7d9dd43b267f2ba783336b865193eac1be", "commitAfterChange": "01b9296a9ea93c38acbcfd0ee226b1f00d5fc41b", "methodNumberBeforeChange": 327, "methodNumberAfterChange": 327, "signatureBeforeChange": " \tpublic void test325()", "signatureAfterChange": " \tpublic void test325()", "diff": ["-\t\t\t\"should also report illegal construct on init of j field\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tX<String>.Item<Thread> i = new X<Exception>().new Item<Thread>();\\n\" + ", "+\t\t\t\"\t                       ^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from X<Exception>.Item<Thread> to X<String>.Item<Thread>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tX.Item k = new X.Item();\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"No enclosing instance of type X<T> is accessible. Must qualify the allocation with an enclosing instance of type X<T> (e.g. x.new A() where x is an instance of X<T>).\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca17b04d630882ce5f89de672494c178", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java", "commitBeforeChange": "341ead40b71a0bffec0f8325f6b29d2b567caf8a", "commitAfterChange": "f5884fa8b0573c548eaeabaa37cd99c51e41fd3b", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 123, "signatureBeforeChange": " public void testBug435767()", "signatureAfterChange": " public void testBug435767()", "diff": ["-\t\t\"\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in DummyClass.java (at line 18)\\n\" + ", "+\t\t\"\t.collect(Collectors.toMap(path -> this.getKey(path), path -> this.getValue(path))));\\n\" + ", "+\t\t\"\t                                       ^^^^^^\\n\" + ", "+\t\t\"The method getKey(String) in the type DummyClass is not applicable for the arguments (Object)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in DummyClass.java (at line 18)\\n\" + ", "+\t\t\"\t.collect(Collectors.toMap(path -> this.getKey(path), path -> this.getValue(path))));\\n\" + ", "+\t\t\"\t                                                                  ^^^^^^^^\\n\" + ", "+\t\t\"The method getValue(String) in the type DummyClass is not applicable for the arguments (Object)\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce6e30fc0c9ae343bc8ab251d0607113", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CastTest.java", "commitBeforeChange": "3307a3b21f8472cc998512e9e4cd5afdd4f17b52", "commitAfterChange": "b155f47580a90f694a899aae6d06a1ff29f450b8", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void test036()", "signatureAfterChange": " public void test036()", "diff": ["-\t\t\"\" /* expected compiler log */,", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\"\tnull : new Base() {\\n\" + ", "+\t\t\"\t\t\t\tpublic final String test() {\\n\" + ", "+\t\t\"\t\t\t\t\treturn (\\\"anonymous\\\");\\n\" + ", "+\t\t\"\t\t\t\t}\\n\" + ", "+\t\t\"\t\t\t};\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + ", "+\t\t\"----------\\n\", /* expected compiler log */"]}], "num": 67963}
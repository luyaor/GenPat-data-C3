{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e987148ba3c4375aa3b44ccb6692019", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a56af801cb68b5b1a0fdb7f5f82788d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void testBug77093constructor() throws CoreException", "signatureAfterChange": " \tpublic void testBug77093constructor() throws CoreException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b77093/X.java\",", "-\t\t\t\t\"package b77093;\\n\" + ", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\tclass Z {\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tZ[][] z_arrays;\\n\" + ", "-\t\t\t\t\"\tX() {\\n\" + ", "-\t\t\t\t\"\t\tthis(new Z[10][]);\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tX(Z[][] arrays) {\\n\" + ", "-\t\t\t\t\"\t\tz_arrays = arrays;\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tprivate void foo(Z[] args) {\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tvoid bar() {\\n\" + ", "-\t\t\t\t\"\t\tfor (int i=0; i<z_arrays.length; i++)\\n\" + ", "-\t\t\t\t\"\t\t\tfoo(z_arrays[i]);\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\");", "-\t\t\tIType type = workingCopy.getType(\"X\");", "-\t\t\tIMethod method = type.getMethod(\"X\", new String[] {\"[[QZ;\"});", "-\t\t\t// Search for constructor declarations and references", "-\t\t\tsearch(method, ALL_OCCURRENCES);", "-\t\t\tassertSearchResults(", "-\t\t\t\t\"src/b77093/X.java b77093.X() [this(new Z[10][])] EXACT_MATCH\\n\"+", "-\t\t\t\t\"src/b77093/X.java b77093.X(Z[][]) [X] EXACT_MATCH\"", "-\t\t\t);", "-\t\t}", "-\t\tfinally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "+\t\tworkingCopies = new ICompilationUnit[1];", "+\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b77093/X.java\",", "+\t\t\t\"package b77093;\\n\" + ", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"\tclass Z {\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tZ[][] z_arrays;\\n\" + ", "+\t\t\t\"\tX() {\\n\" + ", "+\t\t\t\"\t\tthis(new Z[10][]);\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tX(Z[][] arrays) {\\n\" + ", "+\t\t\t\"\t\tz_arrays = arrays;\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tprivate void foo(Z[] args) {\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tvoid bar() {\\n\" + ", "+\t\t\t\"\t\tfor (int i=0; i<z_arrays.length; i++)\\n\" + ", "+\t\t\t\"\t\t\tfoo(z_arrays[i]);\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\");", "+\t\tIType type = workingCopies[0].getType(\"X\");", "+\t\tIMethod method = type.getMethod(\"X\", new String[] {\"[[QZ;\"});", "+\t\t// Search for constructor declarations and references", "+\t\tsearch(method, ALL_OCCURRENCES);", "+\t\tassertSearchResults(", "+\t\t\t\"src/b77093/X.java b77093.X() [this(new Z[10][])] EXACT_MATCH\\n\"+", "+\t\t\t\"src/b77093/X.java b77093.X(Z[][]) [X] EXACT_MATCH\"", "+\t\t);", "+\t\t// keep working copies for next test", "+\t\tdiscard = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be73a66826edd3667967d7f4963cdb5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic void testBug81084a() throws CoreException, JavaModelException", "signatureAfterChange": " \tpublic void testBug81084a() throws CoreException, JavaModelException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getWorkingCopy(\"/JavaSearchBugs/src/b81084a/Test.java\",", "-\t\t\t\t\"package b81084a;\\n\" + ", "-\t\t\t\t\"class List<E> {}\\n\" + ", "-\t\t\t\t\"public class Test {\\n\" + ", "-\t\t\t\t\"\tclass Element{}\\n\" + ", "-\t\t\t\t\"\tstatic class Inner {\\n\" + ", "-\t\t\t\t\"\t\tprivate final List<Element> fList1;\\n\" + ", "-\t\t\t\t\"\t\tprivate final List<Test.Element> fList2;\\n\" + ", "-\t\t\t\t\"\t\tpublic Inner(List<Element> list) {\\n\" + ", "-\t\t\t\t\"\t\t\tfList1 = list;\\n\" + ", "-\t\t\t\t\"\t\t\tfList2 = list;\\n\" + ", "-\t\t\t\t\"\t\t}\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\\n\"", "-\t\t\t\t);", "-\t\t\tIType type = workingCopy.getType(\"Test\").getType(\"Inner\");", "-\t\t\tIField field1 = type.getField(\"fList1\");", "-\t\t\tsearch(field1, REFERENCES);", "-\t\t\tIField field2 = type.getField(\"fList2\");", "-\t\t\tsearch(field2, REFERENCES);", "-\t\t\tassertSearchResults(", "-\t\t\t\t\"src/b81084a/Test.java b81084a.Test$Inner(List<Element>) [fList1] EXACT_MATCH\\n\" + ", "-\t\t\t\t\"src/b81084a/Test.java b81084a.Test$Inner(List<Element>) [fList2] EXACT_MATCH\",", "-\t\t\t\tthis.resultCollector);", "-\t\t}", "-\t\tfinally {", "-\t\t\tif (workingCopy != null)", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t}", "-\t}", "+\t\tworkingCopies = new ICompilationUnit[1];", "+\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b81084a/Test.java\",", "+\t\t\t\"package b81084a;\\n\" + ", "+\t\t\t\"class List<E> {}\\n\" + ", "+\t\t\t\"public class Test {\\n\" + ", "+\t\t\t\"\tclass Element{}\\n\" + ", "+\t\t\t\"\tstatic class Inner {\\n\" + ", "+\t\t\t\"\t\tprivate final List<Element> fList1;\\n\" + ", "+\t\t\t\"\t\tprivate final List<Test.Element> fList2;\\n\" + ", "+\t\t\t\"\t\tpublic Inner(List<Element> list) {\\n\" + ", "+\t\t\t\"\t\t\tfList1 = list;\\n\" + ", "+\t\t\t\"\t\t\tfList2 = list;\\n\" + ", "+\t\t\t\"\t\t}\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\"", "+\t\t\t);", "+\t\tIType type = workingCopies[0].getType(\"Test\").getType(\"Inner\");", "+\t\tIField field1 = type.getField(\"fList1\");", "+\t\tsearch(field1, REFERENCES);", "+\t\tIField field2 = type.getField(\"fList2\");", "+\t\tsearch(field2, REFERENCES);", "+\t\t\t\"src/b81084a/Test.java b81084a.Test$Inner(List<Element>) [fList2] EXACT_MATCH\"", "+\t\t);", "+\t\t// keep working copies for next test", "+\t\tdiscard = false;", "+\t}"]}], "num": 57779}
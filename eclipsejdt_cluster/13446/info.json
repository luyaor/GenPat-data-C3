{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37cc1c4fdbdcc09ec3b75cd49cfc2eec", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8237a787c53916a5bcbeaee2eb3cf18", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 100, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificMethodBinding(MethodBinding[] visible, int visibleSize, TypeBinding[] argumentTypes, final InvocationSite invocationSite, ReferenceBinding receiverType)", "diff": ["-", "-\t\tfor (int i = 0; i < visibleSize; i++) {", "-\t\t\tTypeBinding[] argTypes = argumentTypes;", "-\t\t\tif (isJdk18 && invocationSite instanceof Invocation) {", "-\t\t\t\tInnerInferenceHelper innerInferenceHelper = ((Invocation)invocationSite).innerInferenceHelper();", "-\t\t\t\tif (innerInferenceHelper != null)", "-\t\t\t\t\targTypes = innerInferenceHelper.getArgumentTypesForCandidate(visible[i], argumentTypes);", "-\t\t\t}", "-\t\t\tif ((compatibilityLevels[i] = parameterCompatibilityLevel(visible[i], argTypes)) != NOT_COMPATIBLE) {", "+\t\tfor (int i = 0; i < visibleSize; i++)", "+\t\t\tif ((compatibilityLevels[i] = parameterCompatibilityLevel(visible[i], argumentTypes)) != NOT_COMPATIBLE) {", "-\t\t}", "-// TODO: Disabled, because we know a situation where this is expected, see https://bugs.eclipse.org/429490", "-//\t\tif (compatibleCount != visibleSize) {", "-//\t\t\tproblemReporter().genericInferenceProblem(\"(Recovered) Internal inconsistency while checking invocation ambiguity\", invocationSite, ProblemSeverities.Warning); //$NON-NLS-1$", "-//\t\t}", "+\t\t", "-\t\t\tMethodBinding candidate = inferInvocationType(invocationSite, visible[0], argumentTypes);", "+\t\t\tMethodBinding candidate = visible[0];", "+\t\t", "-", "-\t\t\t\tMethodBinding candidate = inferInvocationType(invocationSite, moreSpecific[0], argumentTypes);", "+\t\t\t\tMethodBinding candidate = moreSpecific[0];", "-\t\t\t\t\t\t\t\ttieBreakInvocationSite, INVOCATION_TYPE, level == VARARGS_COMPATIBLE);", "+\t\t\t\t\t\t\t\ttieBreakInvocationSite, level == VARARGS_COMPATIBLE);", "-\t\t\t\t\t\t// 1.8: Give inference a chance to perform outstanding tasks (18.5.2):", "-\t\t\t\t\t\tMethodBinding candidate = inferInvocationType(invocationSite, visible[i], argumentTypes);", "+\t\t\t\t\t\tMethodBinding candidate = visible[i];", "-\t\t\t\t// 1.8: Before returning give inference a chance to perform outstanding tasks (18.5.2):", "-\t\t\t\treturn inferInvocationType(invocationSite, current, argumentTypes);", "+\t\t\t\treturn current;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccf1e89a1175f2c49ad28321ef3c3629", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "7183d81a2458b7a9ecc9004f74bf12b52ac2eafc", "commitAfterChange": "54eb6fa8730358fcf98285db139cf9edbd02f92a", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 31, "signatureBeforeChange": " \t \tprivate final boolean doVisitUnchangedChildren(ASTNode parent)", "signatureAfterChange": " \t \tprivate final boolean doVisitUnchangedChildren(ASTNode parent)", "diff": ["-\t\t\tStructuralPropertyDescriptor property= (StructuralPropertyDescriptor) properties.get(i);", "-\t\t\tif (property.isChildProperty()) {", "-\t\t\t\tASTNode child= (ASTNode) parent.getStructuralProperty(property);", "-\t\t\t\tif (child != null) {", "-\t\t\t\t\tvoidVisit(child);", "-\t\t\t\t}", "-\t\t\t} else if (property.isChildListProperty()) {", "-\t\t\t\tList list= (List) parent.getStructuralProperty(property);", "-\t\t\t\tboolean hasRangeCopySources= this.eventStore.hasRangeCopySources(parent, property);", "-\t\t\t\tvoidVisitList(list, hasRangeCopySources);", "-\t\t\t}", "+\t\t\tvoidVisit(parent, (StructuralPropertyDescriptor) properties.get(i));"]}], "num": 13446}
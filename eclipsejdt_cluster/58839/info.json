{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e9f140fa240182d2d2ced09c46fa86c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0700a31209b02b0ef32a60f27e365e64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "ea1c8b8993d94a4a2825823d6fa38985fe017c12", "commitAfterChange": "888e470c7f7a7ee8a22b2b1b1e2107e435c5dd95", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 35, "signatureBeforeChange": " \t\tprivate void logXmlProblem(CategorizedProblem problem, char[] unitSource)", "signatureAfterChange": " \t\tprivate void logXmlProblem(CategorizedProblem problem, char[] unitSource)", "diff": ["-\t\t\tthis.parameters.put(Logger.PROBLEM_SEVERITY, problem.isError() ? Logger.ERROR : Logger.WARNING);", "+\t\t\tint severity = problem.isError() ? ProblemSeverities.Error : ProblemSeverities.Warning;", "+\t\t\tthis.parameters.put(Logger.PROBLEM_SEVERITY, severity == ProblemSeverities.Error ? Logger.ERROR : Logger.WARNING);", "+\t\t\tint categoryID = ProblemReporter.getProblemCategory(severity, id);", "+\t\t\tthis.parameters.put(Logger.CATEGORY_ID, new Integer(categoryID));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09cee3ab924470c8848086c26d6dca3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredType.java", "commitBeforeChange": "5194065a29db2efb6ca399235812dc2379a0b639", "commitAfterChange": "64dc9dc143f648f63c2998f7d684fab052c282d9", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public TypeDeclaration updatedTypeDeclaration()", "signatureAfterChange": "\r public TypeDeclaration updatedTypeDeclaration()", "diff": ["-\t\t\tmemberTypes[memberTypeCount - 1].typeDeclaration.declarationSourceEnd = bodyEnd();\r", "+\t\t\tint bodyEnd = bodyEnd();\r", "+\t\t\tmemberTypes[memberTypeCount - 1].typeDeclaration.declarationSourceEnd = bodyEnd;\r", "+\t\t\tmemberTypes[memberTypeCount - 1].typeDeclaration.bodyEnd =  bodyEnd;\r", "-\t\t\tmethods[methodCount - 1].methodDeclaration.declarationSourceEnd = bodyEnd();\r", "+\t\t\tint bodyEnd = bodyEnd();\r", "+\t\t\tmethods[methodCount - 1].methodDeclaration.declarationSourceEnd = bodyEnd;\r", "+\t\t\tmethods[methodCount - 1].methodDeclaration.bodyEnd = bodyEnd;\r", "+\t\tnewTypeDeclaration.bodyEnd = typeDeclaration.bodyEnd;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b0c52130ea9070e69c57a8b840f9821", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/FieldBinding.java", "commitBeforeChange": "8e69a3a7281a71cf8bb89a21d1bb526115e1dbf1", "commitAfterChange": "abf6eeb0171a16a4864dd1645223bf575f08c2ee", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public char[] computeUniqueKey(boolean isLeaf)", "signatureAfterChange": " public char[] computeUniqueKey(boolean isLeaf)", "diff": ["-\tchar[] uniqueKey = new char[declaringLength + 1 + nameLength];", "+\t// return type", "+\tchar[] returnTypeKey = this.type.computeUniqueKey(false/*not a leaf*/);", "+\tint returnTypeLength = returnTypeKey.length;", "+\t", "+\tchar[] uniqueKey = new char[declaringLength + 1 + nameLength + 1 + returnTypeLength];", "+\tindex += nameLength;", "+\tuniqueKey[index++] = ')';", "+\tSystem.arraycopy(returnTypeKey, 0, uniqueKey, index, returnTypeLength);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aef94914a173a6db7616b1a111750cdd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "69ecd7e8020aa690cd3b9097f1c2c90293a5da2f", "commitAfterChange": "12226f15f814a416d1b5ce2c6de204d00d53b835", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tprivate CompilationUnitDeclaration resolve( \t\t\tCompilationUnitDeclaration unit, \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\t\tNodeSearcher nodeSearcher, \t\t\tboolean verifyMethods, \t\t\tboolean analyzeCode, \t\t\tboolean generateCode)", "signatureAfterChange": "  \tprivate CompilationUnitDeclaration resolve( \t\t\tCompilationUnitDeclaration unit, \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\t\tNodeSearcher nodeSearcher, \t\t\tboolean verifyMethods, \t\t\tboolean analyzeCode, \t\t\tboolean generateCode)", "diff": ["-\t\t\t\t\tthis.parser.scanner.setSource(source, unit.compilationResult);", "-", "+\t\t\t\t\t\t// save existing values to restore them at the end of the parsing process", "+\t\t\t\t\t\t// see bug 47079 for more details", "+\t\t\t\t\t\tint[] oldLineEnds = this.parser.scanner.lineEnds;", "+\t\t\t\t\t\tint oldLinePtr = this.parser.scanner.linePtr;", "+", "+\t\t\t\t\t\tthis.parser.scanner.setSource(source, unit.compilationResult);", "+", "-\t\t  \t\t\t\tif (node instanceof AbstractMethodDeclaration) {", "+\t\t\t\t\t\tif (node instanceof AbstractMethodDeclaration) {", "-\t\t \t\t\t\t} else if (enclosingTypeDeclaration != null) {", "+\t\t\t\t\t\t} else if (enclosingTypeDeclaration != null) {", "-\t\t\t \t\t\t\t\t((org.eclipse.jdt.internal.compiler.ast.Initializer) node).parseStatements(this.parser, enclosingTypeDeclaration, unit);", "-\t\t \t\t\t\t\t} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {", "+\t\t\t\t\t\t\t\t((org.eclipse.jdt.internal.compiler.ast.Initializer) node).parseStatements(this.parser, enclosingTypeDeclaration, unit);", "+\t\t\t\t\t\t\t} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {", "-\t\t \t\t\t\t}", "-\t\t \t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// this is done to prevent any side effects on the compilation unit result", "+\t\t\t\t\t\t// line separator positions array.", "+\t\t\t\t\t\tthis.parser.scanner.lineEnds = oldLineEnds;", "+\t\t\t\t\t\tthis.parser.scanner.linePtr = oldLinePtr;", "+\t\t\t\t\t}"]}], "num": 58839}
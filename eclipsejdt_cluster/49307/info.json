{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "01343df207e20579ec30af2405212970", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "798428bbf00e59a593ea430c6abf615b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "bb843f95599450191304045d0679d3f06eac28ae", "commitAfterChange": "4bbe3baf3c6fb1695afac4562bc59202c79b2185", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["-            /*", "-             * No bootclasspath, we will add one throught the JRE_LIB variable", "-             */", "-            String javaHome = System.getProperty(\"java.home\");//$NON-NLS-1$", "-            if (javaHome == null) {", "-\t\t\t\tthrow new BuildException(Util.getString(\"ant.jdtadapter.error.noBootclasspath\"));  //$NON-NLS-1$", "-            } else if (JavaEnvUtils.getJavaVersion().equals(JavaEnvUtils.JAVA_1_4)", "-            \t\t|| JavaEnvUtils.getJavaVersion().equals(JavaEnvUtils.JAVA_1_3)", "-            \t\t|| JavaEnvUtils.getJavaVersion().equals(JavaEnvUtils.JAVA_1_2)) {", "-            \tFile f = new File(javaHome, \"/lib/rt.jar\");//$NON-NLS-1$", "-\t        \tif (f.exists()) {", "-\t\t\t\t\tcmd.createArgument().setPath(new Path(null, f.getAbsolutePath()));        \t", "-        \t\t} else {", "-\t\t\t\t\tthrow new BuildException(Util.getString(\"ant.jdtadapter.error.cannotInfereBootclasspath\", JavaEnvUtils.getJavaVersion()));  //$NON-NLS-1$", "-\t        \t}", "-           \t} else {", "-\t\t\t\tthrow new BuildException(Util.getString(\"ant.jdtadapter.error.cannotInfereBootclasspath\", JavaEnvUtils.getJavaVersion()));  //$NON-NLS-1$", "-           \t}", "+            includeJavaRuntime = true;", "-\t\tincludeJavaRuntime = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d577dae1f2f65054a386ed49feed468", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "fe11cfff40c61fffff9aae0ef9f8efcbbccd75ca", "commitAfterChange": "75005dc0c3aa6109c4292d3d78ff1f819b20b258", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " \tpublic ZipFile getZipFile(IPath path) throws CoreException", "signatureAfterChange": " \tpublic ZipFile getZipFile(IPath path) throws CoreException", "diff": ["-\t\t\tif (path.isAbsolute() && file != null) {", "-\t\t\t\tif (file == null) { // external file", "-\t\t\t\t\tfileSystemPath= path.toOSString();", "-\t\t\t\t} else { // internal resource (not an IFile or not existing)", "-\t\t\t\t\tIPath location;", "-\t\t\t\t\tif (file.getType() != IResource.FILE || (location = file.getLocation()) == null) {", "-\t\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tfileSystemPath= location.toOSString();", "-\t\t\t\t}", "-\t\t\t} else if (!path.isAbsolute()) {", "-\t\t\t\tfile= root.getFile(path);", "-\t\t\t\tif (file == null || file.getType() != IResource.FILE) {", "-\t\t\t\t\tthrow new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind(\"file.notFound\", path.toString()), null)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tIPath location = file.getLocation();", "-\t\t\t\tif (location == null) {", "+\t\t\tif (file != null) {", "+\t\t\t\t// internal resource", "+\t\t\t\tIPath location;", "+\t\t\t\tif (file.getType() != IResource.FILE || (location = file.getLocation()) == null) {", "+\t\t\t\t// external resource"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b551a689426c67b3e69159ee9ee0b9ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "41073afde07bc165731dc0876951fb4352f46439", "commitAfterChange": "95ccf829fe70457c64a0e61794a7f1137ca9c9b0", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "  \tprotected void setUp() throws Exception", "signatureAfterChange": "  \tprotected void setUp() throws Exception", "diff": ["-\t\tString previousClassName = CURRENT_CLASS_NAME;", "-\t\tif (isFirst()) {", "-\t\t\tIPath dir = new Path(Util.getOutputDirectory());", "-\t\t\tif (previousClassName != null) {", "-\t\t\t\t// Minimize resilient files by removing previous test class global output dir", "-\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(previousClassName, \".\");", "-\t\t\t\tIPath previousDir = dir;", "-\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\tpreviousDir = previousDir.append(tokenizer.nextToken());", "-\t\t\t\t}", "-\t\t\t\tUtil.rmdir(new File(previousDir.toOSString()));", "-\t\t\t}", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(CURRENT_CLASS_NAME, \".\");", "-\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\tdir = dir.append(tokenizer.nextToken());", "-\t\t\t}", "-\t\t\tOUTPUT_DIR =  dir.append(\"output\").toOSString();", "-\t\t\tSOURCE_DIRECTORY = dir.append(\"source\").toOSString();", "-\t\t\tJAVAC_OUTPUT_DIR = dir.append(\"javac\").toOSString();", "-\t\t}", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8112932a103f0f81339240c4ff92937", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/FilerImpl.java", "commitBeforeChange": "64db8d36b73417ee83ea1a6d91baaefe7d3848b0", "commitAfterChange": "706bf7889f5a9b55b080bd919d03ab5ee97600fa", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public PrintWriter createTextFile(Filer.Location loc, String pkg, File relPath, String charsetName)          throws IOException", "signatureAfterChange": "     public PrintWriter createTextFile(Filer.Location loc, String pkg, File relPath, String charsetName)          throws IOException", "diff": ["-    \t", "-    \t// TODO - clean this up", "-    \tFile f = null;", "-    \tGeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager( _env.getProject() );", "-    \tif ( loc == Filer.Location.CLASS_TREE )", "-    \t{", "-    \t\ttry ", "-    \t\t{", "-    \t\t\tf = gfm.getGeneratedSourceFolderOutputLocation();", "-    \t\t}", "-    \t\tcatch ( Exception e )", "-    \t\t{", "-    \t\t\t// TODO - stop throwing this exception", "-    \t\t\tAptPlugin.log(e, \"Failure getting the output file\"); //$NON-NLS-1$", "-    \t\t\tthrow new IOException();", "-    \t\t}", "-    \t}", "-    \telse if ( loc == Filer.Location.SOURCE_TREE )", "-    \t\tf = gfm.getGeneratedSourceFolder().getRawLocation().toFile();", "-    \t\t\t", "-", "-", "-        if( pkg != null )", "-            f = new File( f, pkg.replace('.', File.separatorChar) );", "-", "-        f = new File( f, relPath.getPath() );", "-", "-        // REVIEW: for no apparent reason it is sometimes necessary to create the", "-        // parent dir, else an IOException occurs creating f..", "-        File p = f.getParentFile();", "-        FileSystemUtil.mkdirs( p );", "+    \tFile f = getOutputFileForLocation( loc, pkg, relPath );"]}], "num": 49307}
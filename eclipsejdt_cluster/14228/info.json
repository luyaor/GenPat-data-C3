{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "600f08e3fadd1def8544cb2b89eaa2ce", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43db5f998e39ee69d192e08151fc12ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic IJavaModelStatus verify()", "signatureAfterChange": "  \tpublic IJavaModelStatus verify()", "diff": ["-", "-", "-\t\tif (!status.isOK()) {", "+\t\tif (!status.isOK())", "-\t\t}", "-", "-\t\tif (needValidation) {", "-\t\t\t// retrieve classpath ", "-\t\t\tIClasspathEntry[] entries = this.newRawPath;", "-\t\t\tif (entries == DO_NOT_SET_ENTRIES){", "-\t\t\t\ttry {", "-\t\t\t\t\tentries = project.getRawClasspath();\t\t\t", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\treturn e.getJavaModelStatus();", "-\t\t\t\t}", "-\t\t\t}\t\t", "-\t\t\t// retrieve output location", "-\t\t\tIPath outputLocation = this.newOutputLocation;", "-\t\t\tif (outputLocation == DO_NOT_SET_OUTPUT){", "-\t\t\t\ttry {", "-\t\t\t\t\toutputLocation = project.getOutputLocation();", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\treturn e.getJavaModelStatus();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t\t\t", "-\t\t\t// perform validation", "-\t\t\treturn ClasspathEntry.validateClasspath(", "-\t\t\t\tproject,", "-\t\t\t\tentries,", "-\t\t\t\toutputLocation);", "-\t\t}", "-\t\t", "-\t\treturn JavaModelStatus.VERIFIED_OK;", "+\t\treturn ClasspathEntry.validateClasspath(\tthis.project, this.newRawClasspath, this.newOutputLocation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db48dc51655553c88f102ff203e0e96b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "581702d71a138ac97fe73cfd2b06cc855f39a496", "commitAfterChange": "d47f7e16ee9a06ebea0c1bfa73440fda6af0235f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic Object getElementInfo() throws JavaModelException", "signatureAfterChange": " \tpublic Object getElementInfo() throws JavaModelException", "diff": ["+\t\treturn getElementInfo(null);", "+\t}", "-\t\t// workaround to ensure parent project resolved classpath is available to avoid triggering initializers", "-\t\t// while the JavaModelManager lock is acquired (can cause deadlocks in clients)", "-\t\tIJavaProject project = getJavaProject();", "-\t\tif (project != null && !project.isOpen()) {", "-\t\t\t// TODO: (jerome) need to revisit, since deadlock could still occur if perProjectInfo is removed concurrent before entering the lock", "-\t\t\ttry {", "-\t\t\t\tproject.getResolvedClasspath(true); // trigger all possible container/variable initialization outside the model lock", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// project is not accessible or is not a java project", "-\t\t\t}", "-\t\t}", "-", "-\t\t// element info creation is done inside a lock on the JavaModelManager", "-\t\tJavaModelManager manager;", "-\t\tsynchronized(manager = JavaModelManager.getJavaModelManager()){", "-\t\t\tObject info = manager.getInfo(this);", "-\t\t\t\topenHierarchy();", "-\t\t\t\tinfo= manager.getInfo(this);", "-\t\t\t\tif (info == null) {", "-\t\t\t\t\tthrow newNotPresentException();", "-\t\t\treturn info;"]}], "num": 14228}
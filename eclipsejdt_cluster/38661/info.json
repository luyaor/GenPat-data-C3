{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1bfaf51c4a5fa6822bd009e25cfc465c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cb5d225d1bbcc969b9f6c23d351f3c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "af8e4657dabc36f9f429517d3e6a26c71037fd72", "commitAfterChange": "dde10a32a06755d74ad0951237c7c70d1379bcf2", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  public int getNextToken() throws InvalidInputException", "signatureAfterChange": "  public int getNextToken() throws InvalidInputException", "diff": ["+\t} else if (token == TokenNameELLIPSIS) {", "+\t\tthis.consumingEllipsisAnnotations = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "320cd4154ac38ecf50b2094ba5d54b9e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "538c0b31c8df84049489b5a401103859bb5eec8f", "commitAfterChange": "16b28f2f33ec894bf25a38e03f521a91d92e684d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, CompilationResult compilationResult) throws JavaModelException", "signatureAfterChange": " \tprivate AbstractMethodDeclaration convert(SourceMethod methodHandle, CompilationResult compilationResult) throws JavaModelException", "diff": ["-\t\t/* convert type parameters */", "-\t\tchar[][] typeParameterNames = methodInfo.getTypeParameterNames();", "+\t\t// convert 1.5 specific constructs only if compliance is 1.5 or above", "-\t\tif (typeParameterNames != null) {", "-\t\t\tint parameterCount = typeParameterNames.length;", "-\t\t\tif (parameterCount > 0) { // method's type parameters must be null if no type parameter", "-\t\t\t\tchar[][][] typeParameterBounds = methodInfo.getTypeParameterBounds();", "-\t\t\t\ttypeParams = new TypeParameter[parameterCount];", "-\t\t\t\tfor (int i = 0; i < parameterCount; i++) {", "-\t\t\t\t\ttypeParams[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);", "+\t\tif (this.has1_5Compliance) {", "+\t\t\t/* convert type parameters */", "+\t\t\tchar[][] typeParameterNames = methodInfo.getTypeParameterNames();", "+\t\t\tif (typeParameterNames != null) {", "+\t\t\t\tint parameterCount = typeParameterNames.length;", "+\t\t\t\tif (parameterCount > 0) { // method's type parameters must be null if no type parameter", "+\t\t\t\t\tchar[][][] typeParameterBounds = methodInfo.getTypeParameterBounds();", "+\t\t\t\t\ttypeParams = new TypeParameter[parameterCount];", "+\t\t\t\t\tfor (int i = 0; i < parameterCount; i++) {", "+\t\t\t\t\t\ttypeParams[i] = createTypeParameter(typeParameterNames[i], typeParameterBounds[i], start, end);", "+\t\t\t\t\t}", "-\t\t/* convert annotations */", "-\t\tmethod.annotations = convertAnnotations(methodHandle);", "+\t\t// convert 1.5 specific constructs only if compliance is 1.5 or above", "+\t\tif (this.has1_5Compliance) {", "+\t\t\t/* convert annotations */", "+\t\t\tmethod.annotations = convertAnnotations(methodHandle);", "+\t\t}"]}], "num": 38661}
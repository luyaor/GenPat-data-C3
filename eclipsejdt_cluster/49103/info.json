{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d3f7d9dc0959ec2d5f0316d641cadc2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52d12357536abc342b3cc44cd9315c3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseMessagerImpl.java", "commitBeforeChange": "f2226bbed940778401b5f9a8cbc4f34bcf0789f4", "commitAfterChange": "e877d064b04747bbafa04391a87e31df3c17a315", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static AptProblem createProblem(Kind kind, CharSequence msg, Element e)", "signatureAfterChange": " \tpublic static AptProblem createProblem(Kind kind, CharSequence msg, Element e,  \t\t\tAnnotationMirror a, AnnotationValue v)", "diff": ["-\tpublic static AptProblem createProblem(Kind kind, CharSequence msg, Element e) {", "+\tpublic static AptProblem createProblem(Kind kind, CharSequence msg, Element e, ", "+\t\t\tAnnotationMirror a, AnnotationValue v) {", "+\t\tAnnotation[] elementAnnotations = null;", "+\t\t\t\t\t\telementAnnotations = typeDeclaration.annotations;", "+\t\t\t\t\t\t\telementAnnotations = sourceMethod.annotations;", "+\t\t\t\t\t\t\telementAnnotations = fieldDeclaration.annotations;", "+\t\t\t\t\t\t\telementAnnotations = parameterDeclaration.annotations;", "+\t\tif (a != null && elementAnnotations != null) {", "+\t\t\tAnnotationBinding annotationBinding = ((AnnotationMirrorImpl) a)._binding;", "+\t\t\tAnnotation annotation = null;", "+\t\t\tfor (int i = 0; annotation == null && i < elementAnnotations.length; i++) {", "+\t\t\t\tif (annotationBinding == elementAnnotations[i].getCompilerAnnotation()) {", "+\t\t\t\t\tannotation = elementAnnotations[i];", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (annotation != null) {", "+\t\t\t\tstartPosition = annotation.sourceStart;", "+\t\t\t\tendPosition = annotation.sourceEnd;", "+\t\t\t\tif (v != null && v instanceof AnnotationMemberValue) {", "+\t\t\t\t\tMethodBinding methodBinding = ((AnnotationMemberValue) v).getMethodBinding();", "+\t\t\t\t\tMemberValuePair[] memberValuePairs = annotation.memberValuePairs();", "+\t\t\t\t\tMemberValuePair memberValuePair = null;", "+\t\t\t\t\tfor (int i = 0; memberValuePair == null && i < memberValuePairs.length; i++) {", "+\t\t\t\t\t\tif (methodBinding == memberValuePairs[i].binding) {", "+\t\t\t\t\t\t\tmemberValuePair = memberValuePairs[i];", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (memberValuePair != null) {", "+\t\t\t\t\t\tstartPosition = memberValuePair.sourceStart;", "+\t\t\t\t\t\tendPosition = memberValuePair.sourceEnd;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bf1f8cac46edb87c92eb9ef4370e509", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "7ba9ff29fe6b05ec0a2f58eaa1f5d3e68bb11101", "commitAfterChange": "427a01e331e57852efc472cca3a8360bd121fda9", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 47, "signatureBeforeChange": " TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType, char[][][] missingTypeNames)", "signatureAfterChange": " TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType,  \t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker)", "diff": ["-TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType, char[][][] missingTypeNames) {", "+TypeBinding getTypeFromSignature(char[] signature, int start, int end, boolean isParameterized, TypeBinding enclosingType, ", "+\t\tchar[][][] missingTypeNames, TypeAnnotationWalker walker)", "+{", "+\t// null annotations on dimensions?", "+\tlong[] annotationTagBitsOnDimensions = null;", "+\tif (dimension > 0 && walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "+\t\tTypeAnnotationWalker dimensionsWalker = null;", "+\t\tfor (int i = 0; i < dimension; i++) {", "+\t\t\tif (dimensionsWalker == null)", "+\t\t\t\tdimensionsWalker = walker; // outermost dimension == main type", "+\t\t\telse", "+\t\t\t\tdimensionsWalker = dimensionsWalker.toNextArrayDimension();", "+\t\t\tlong tagBits = typeAnnotationsToTagBits(dimensionsWalker.getAnnotationsAtCursor());", "+\t\t\tif (tagBits != 0L) {", "+\t\t\t\tif (annotationTagBitsOnDimensions == null)", "+\t\t\t\t\tannotationTagBitsOnDimensions = new long[dimension+1]; // leave room for leaf type", "+\t\t\t\tannotationTagBitsOnDimensions[i] = tagBits; ", "+\t\t\t}", "+\t\t}", "+\t}", "+", "-\t\tbinding = getTypeFromConstantPoolName(signature, start + 1, end, isParameterized, missingTypeNames); // skip leading 'L' or 'T'", "+\t\tReferenceBinding refType = getTypeFromConstantPoolName(signature, start + 1, end, isParameterized, missingTypeNames); // skip leading 'L' or 'T'", "+\t\tint depth = refType.depth();", "+\t\twhile (depth > 0 && walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {", "+\t\t\twalker = walker.toNextNestedType();", "+\t\t\tdepth--;", "+\t\t}", "+\t\tlong tagBits = typeAnnotationsToTagBits(walker.getAnnotationsAtCursor());", "+\t\tif (tagBits != 0 && annotationTagBitsOnDimensions == null) {", "+\t\t\tif (refType instanceof UnresolvedReferenceBinding) {", "+\t\t\t\t// clone so we don't interfere with future lookups:", "+\t\t\t\tbinding = new UnresolvedReferenceBinding(refType, tagBits);", "+\t\t\t} else {", "+\t\t\t\tbinding = createAnnotatedType(refType, tagBits);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (annotationTagBitsOnDimensions != null)", "+\t\t\t\tannotationTagBitsOnDimensions[dimension] = tagBits; // insert leaf type into array", "+\t\t\tbinding = refType;", "+\t\t}", "+\tif (annotationTagBitsOnDimensions != null)", "+\t\treturn createArrayType(binding, dimension, annotationTagBitsOnDimensions);"]}], "num": 49103}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0da30881fc49c1049723d203fe00c18", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21ebeee3fefb4cfd4a7310116c96ba81", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "  protected void decodeIndexEntry(IEntryResult entryResult)", "signatureAfterChange": " public void decodeIndexKey(char[] key)", "diff": ["+public void decodeIndexKey(char[] key) {", "+\tint nameLength = CharOperation.indexOf(SEPARATOR, key);", "+\tif (nameLength != -1)", "+\t\tkey = CharOperation.subarray(key, 0, nameLength);", "+\t", "+\tthis.simpleName = key;", "+", "+\t// Optimization, eg. type reference is 'org.eclipse.jdt.core.*'", "+\tthis.segments[0] = key;", "- */ ", "-protected void decodeIndexEntry(IEntryResult entryResult) {", "-\tchar[] word = entryResult.getWord();", "-\tint tagLength = currentTag.length;", "-\tint nameLength = CharOperation.indexOf(SEPARATOR, word, tagLength);", "-\tif (this.simpleName == null)", "-\t\t// Optimization, eg. type reference is 'org.eclipse.jdt.core.*'", "-\t\tthis.decodedSegment = CharOperation.subarray(word, tagLength, nameLength);", "-\t\tthis.decodedSimpleName = CharOperation.subarray(word, tagLength, nameLength);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90946f838e5b047287b3aa6e968c4692", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tprivate boolean hasNewFiles(APTResult oldResult, APTResult newResult)", "signatureAfterChange": " \t \tprivate Set<IFile> cleanupAllGeneratedFilesFrom( \t\t\tIFile[] files, \t\t\tSet<IFile> deletedFiles)", "diff": ["-\tprivate boolean hasNewFiles(APTResult oldResult, APTResult newResult) {", "-\t\tSet<IFile> oldFiles = oldResult.getNewFiles();", "-\t\tSet<IFile> newFiles = newResult.getNewFiles();", "-\t\tfor (IFile file : newFiles) {", "-\t\t\tif (!oldFiles.contains(file)) {", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t}", "-\t\treturn false;", "-\t}", "+\t", "+\tprivate Set<IFile> cleanupAllGeneratedFilesFrom(", "+\t\t\tIFile[] files,", "+\t\t\tSet<IFile> deletedFiles){", "+\t\tif( deletedFiles == null )", "+\t\t\tdeletedFiles = new HashSet<IFile>();", "+\t\t", "+\t\tif( files != null ){", "+\t\t\tfor(IFile f : files ){\t\t\t\t", "+\t\t\t\tcleanupAllGeneratedFilesForParent( f, null, deletedFiles );", "+\t\t\t}", "+\t\t}", "+\t\treturn deletedFiles;", "+\t}"]}], "num": 62338}
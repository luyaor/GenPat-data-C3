{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6b799e4322fea6c0c49f4e5a123a041", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "672d7031e8dd95632d072cea34f13697", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "bbf01bd45c20dcf892a1672b9d9c504b05790a01", "commitAfterChange": "64f2a5b8a78095fa170a97cceb8e661d31b0ae71", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \tprotected void generateClasspathChangeDeltas(\r \t\tIClasspathEntry[] oldResolvedPath,\r \t\tIClasspathEntry[] newResolvedPath,\r \t\tJavaModelManager manager,\r \t\tJavaProject project)", "signatureAfterChange": "\r \tprotected void generateClasspathChangeDeltas(\r \t\tIClasspathEntry[] oldResolvedPath,\r \t\tIClasspathEntry[] newResolvedPath,\r \t\tJavaModelManager manager,\r \t\tJavaProject project)", "diff": ["-\t\t// need to write out the classpath file ?\r", "-\t\tboolean needSave = oldLength != newLength;\r", "-\t\tif (!needSave){\r", "-\t\t\tfor (int i = 0; i < newLength; i++){ // need to check for entry#equals\r", "-\t\t\t\tif (!oldResolvedPath[i].equals(newResolvedPath[i])){\r", "-\t\t\t\t\tneedSave = true;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tif (needSave){\r", "-\t\t\ttry {\r", "-\t\t\t\tthis.hasModifiedResource = project.saveClasspath(this.forceSave);\r", "-\t\t\t} catch(JavaModelException e) {\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1d8f370dc4402faac812a0ab1260aa4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "0e2784c65bd65ef2a138f6fdb09cd313f041cee1", "commitAfterChange": "b5e57d73d725bb5d865a6308c973c0edca66e4cf", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate void setUpFullSourceWorkspace() throws IOException, CoreException", "signatureAfterChange": " \tprivate void setUpFullSourceWorkspace() throws IOException, CoreException", "diff": ["-\t\tString jdkLib = Util.getJavaClassLibs()[0];", "-\t\tJavaCore.setClasspathVariable(\"JRE_LIB\", new Path(jdkLib), null);", "+\t\tString[] jdkLibs = Util.getJavaClassLibs();", "+\t\tint length = jdkLibs.length;", "+\t\tString jdkLib = null;", "+\t\tfor (int i=0; i<length; i++) {", "+\t\t\tif (jdkLibs[i].endsWith(\"rt.jar\")) {", "+\t\t\t\tjdkLib = jdkLibs[i];", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\tif (jdkLib == null) {", "+\t\t\tthrow new RuntimeException(\"Cannot set JRE_LIB classpath variable as the rt.jar lib was not found!!!\");", "+\t\t}", "-\t\tint length = ALL_PROJECTS.length;", "+\t\tlength = ALL_PROJECTS.length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f766ac5c9694ab49e8baa440ec2b37dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "aa26b9b8d7416323ddb940d58fe661ba8f5d7223", "commitAfterChange": "a4cacbfb8be6276f1bbe9130c20576048fe33408", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " public boolean hasStructuralChanges(byte[] newBytes, boolean orderRequired, boolean excludesSynthetic)", "signatureAfterChange": " public boolean hasStructuralChanges(byte[] newBytes, boolean orderRequired, boolean excludesSynthetic)", "diff": ["+\t\tchar[][][] missingTypes = getMissingTypeNames();", "+\t\tchar[][][] newMissingTypes = newClassFile.getMissingTypeNames();", "+\t\tif (missingTypes != null) {", "+\t\t\tif (newMissingTypes == null) {", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tint length = missingTypes.length;", "+\t\t\tif (length != newMissingTypes.length) {", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tif (!CharOperation.equals(missingTypes[i], newMissingTypes[i])) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else if (newMissingTypes != null) {", "+\t\t\treturn true;", "+\t\t}"]}], "num": 71795}
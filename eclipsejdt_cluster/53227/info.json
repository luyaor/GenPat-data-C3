{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ca9a0678cb75a6177b1b248d9cf9f19", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74e9a45dd7d457ef2c2252dd32e20a09", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e7041eebe1b9ef3b1ae9f5f9c79b24274ea327d1", "commitAfterChange": "8585977b682b225927c2b7dfa188383f714b1d41", "methodNumberBeforeChange": 402, "methodNumberAfterChange": 402, "signatureBeforeChange": " public void testBug317719c() throws Exception", "signatureAfterChange": " public void testBug317719c() throws Exception", "diff": ["-\t\t\t\"Method same(Collection<? extends T>) has the same erasure same(Collection<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method same(Collection<? extends T>) is the same as another method in type X\\n\" +", "-\t\t\t\"Method same(Collection<? extends T>) has the same erasure same(Collection<E>) as another method in type X\\n\" + ", "+\t\t\t\"Erasure of method same(Collection<? extends T>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method same(Collection<? extends T>) has the same erasure same(Collection<E>) as another method in type X\\n\" + ", "+\t\t\t\t\"Erasure of method same(Collection<? extends T>) is the same as another method in type X\\n\" +", "-\t\t\t\t\"Method same(Collection<? extends T>) has the same erasure same(Collection<E>) as another method in type X\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"Erasure of method same(Collection<? extends T>) is the same as another method in type X\\n\" +", "+\t\t\t\t\"----------\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1a10d8af0ec659746c33d00054cfb01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic void testBug83127h()", "signatureAfterChange": " \tpublic void testBug83127h()", "diff": ["-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5 or greater\\n\" + ", "-\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5\\n\" + ", "+\t\t\t\"Syntax error, parameterized types are only available if source level is 1.5 or greater\\n\" + "]}], "num": 53227}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96ad2716d1105965d177f22a3f177fb6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12667a1da3794091409198514cd95bc0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 25, "signatureBeforeChange": "     private int[] getClassNameRange(final IFile file)", "signatureAfterChange": "  \tprivate CompilationUnit createASTFrom(ICompilationParticipantResult result)", "diff": ["-     */", "-    private int[] getClassNameRange(final IFile file){", "-    \tfinal CompilationUnit astUnit = getAstCompilationUnit(file);", "-    \tint[] startAndEnd = null;", "-    \tif( astUnit != null){", "-    \t\t@SuppressWarnings({\"unchecked\", \"nls\"})", "-    \t\tfinal List<AbstractTypeDeclaration> topTypes = astUnit.types();", "-    \t\tif( topTypes != null && topTypes.size() > 0 ){", "-    \t\t\tfinal AbstractTypeDeclaration topType = topTypes.get(0);", "-    \t\t\tstartAndEnd = new int[3];", "-    \t\t\tfinal SimpleName typename = topType.getName();", "-    \t\t\tif( typename != null ){", "-    \t\t\t\tstartAndEnd[0] = typename.getStartPosition();", "-    \t\t\t\t// ending offsets need to be exclusive.", "-    \t\t\t\tstartAndEnd[1] = startAndEnd[0] + typename.getLength() - 1;", "-    \t\t\t\tstartAndEnd[2] = astUnit.lineNumber(typename.getStartPosition());", "-    \t\t\t}", "-    \t\t\telse{", "-    \t\t\t\tstartAndEnd[0] = topType.getStartPosition();", "-    \t\t\t\t// let case 2 in updateProblemLength() kicks in. ", "-    \t\t\t\tstartAndEnd[1] = -2;", "-    \t\t\t\tstartAndEnd[2] = astUnit.lineNumber(topType.getStartPosition());", "-    \t\t\t}", "-    \t\t}", "-    \t}", "-    \tif( startAndEnd == null )", "-    \t\t// let case 2 in updateProblemLength() kicks in.", "-    \t\treturn new int[]{0, -2, 1};", "-    ", "-    \treturn startAndEnd;", "-    }", "+", "+\tprivate CompilationUnit createASTFrom(ICompilationParticipantResult result){", "+\t\tASTParser p = ASTParser.newParser( AST.JLS3 );", "+\t\tp.setSource(result.getContents());\t\t", "+\t\tp.setResolveBindings( true );", "+\t\tp.setProject( _javaProject );", "+\t\t// TODO: double check that the \".java\" extension is there.", "+\t\tp.setUnitName( result.getFile().getName() );", "+\t\tp.setKind( ASTParser.K_COMPILATION_UNIT );", "+\t\tASTNode node = p.createAST( null );", "+\t\treturn node == null ? EMPTY_AST_UNIT : (CompilationUnit)node;\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f1355da5fa2dd5fa6620bfed00fd71d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tchar[] source, \t\tString unitName, \t\tIJavaProject project, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor)", "signatureAfterChange": " \tpublic static CompilationUnit parseCompilationUnit( \t\tchar[] source, \t\tString unitName, \t\tIJavaProject project, \t\tWorkingCopyOwner owner, \t\tIProgressMonitor monitor)", "diff": ["-\t\tif (unitName == null && project != null) {", "-\t\t\tthrow new IllegalArgumentException();", "-\t\t}", "-\t\tif (project == null) {", "-\t\t\t// this just reduces to the other simplest case", "-\t\t\treturn parseCompilationUnit(source);", "-\t\t}", "-\t\tif (owner == null) {", "-\t\t\towner = DefaultWorkingCopyOwner.PRIMARY;", "-\t\t}", "-\t", "-\t\tCompilationUnitDeclaration compilationUnitDeclaration = null;", "-\t\ttry {", "-\t\t\t// parse and resolve", "-\t\t\tcompilationUnitDeclaration =", "-\t\t\t\tCompilationUnitResolver.resolve(", "-\t\t\t\t\tsource,", "-\t\t\t\t\tunitName,", "-\t\t\t\t\tproject,", "-\t\t\t\t\tfalse/*don't cleanup*/,", "-\t\t\t\t\towner,", "-\t\t\t\t\tmonitor);", "-\t\t\tASTConverter converter = new ASTConverter(project.getOptions(true), true, monitor);", "-\t\t\tAST ast = new AST();", "-\t\t\tBindingResolver resolver = new DefaultBindingResolver(compilationUnitDeclaration.scope);", "-\t\t\tast.setBindingResolver(resolver);", "-\t\t\tconverter.setAST(ast);", "-\t\t", "-\t\t\tCompilationUnit cu = converter.convert(compilationUnitDeclaration, source);", "-\t\t\tcu.setLineEndTable(compilationUnitDeclaration.compilationResult.lineSeparatorPositions);", "-\t\t\tresolver.storeModificationCount(ast.modificationCount());", "-\t\t\treturn cu;", "-\t\t} catch(JavaModelException e) {", "-\t\t\t/* if a JavaModelException is thrown trying to retrieve the name environment", "-\t\t\t * then we simply do a parsing without creating bindings.", "-\t\t\t * Therefore all binding resolution will return null.", "-\t\t\t */", "-\t\t\treturn parseCompilationUnit(source);\t\t\t", "-\t\t} finally {", "-\t\t\tif (compilationUnitDeclaration != null) {", "-\t\t\t\tcompilationUnitDeclaration.cleanUp();", "-\t\t\t}", "-\t\t}", "+\t\tASTParser c = ASTParser.internalNewParser2();", "+\t\tc.setSource(source);", "+\t\tc.setUnitName(unitName);", "+\t\tc.setProject(project);", "+\t\tc.setWorkingCopyOwner(owner);", "+\t\tASTNode result = c.createAST(monitor);", "+\t\treturn (CompilationUnit) result;"]}], "num": 17129}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fcd0664ce20a51482b225b9533231581", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74af68f73143fa14354a709c69c0fea7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e0e148cd6b9c732819785b1a6035a4b2d3b71b69", "commitAfterChange": "e8d8994ddc9e43f92485e51c19ef36ea93b3771d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " public synchronized Index getIndexForUpdate(IPath path, boolean reuseExistingFile, boolean createIfMissing)", "signatureAfterChange": " public synchronized Index getIndexForUpdate(IPath containerPath, boolean reuseExistingFile, boolean createIfMissing)", "diff": ["-public synchronized Index getIndexForUpdate(IPath path, boolean reuseExistingFile, boolean createIfMissing) {", "-\tString indexName = computeIndexName(path);", "-\tif (getIndexStates().get(indexName) == REBUILDING_STATE)", "-\t\treturn getIndex(path, reuseExistingFile, createIfMissing);", "+}", "+public synchronized Index getIndexForUpdate(IPath containerPath, boolean reuseExistingFile, boolean createIfMissing) {", "+\tString indexLocation = computeIndexLocation(containerPath);", "+\tif (getIndexStates().get(indexLocation) == REBUILDING_STATE)", "+\t\treturn getIndex(containerPath, indexLocation, reuseExistingFile, createIfMissing);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a60ddb638db8be5b612760eeb57fcbbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e0e148cd6b9c732819785b1a6035a4b2d3b71b69", "commitAfterChange": "e8d8994ddc9e43f92485e51c19ef36ea93b3771d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public synchronized Index recreateIndex(IPath path)", "signatureAfterChange": " public synchronized Index recreateIndex(IPath containerPath)", "diff": ["-public synchronized Index recreateIndex(IPath path) {", "+public synchronized Index recreateIndex(IPath containerPath) {", "-\t\tIndex index = (Index) this.indexes.get(path);", "+\t\t// Path is already canonical", "+\t\tString indexLocation = computeIndexLocation(containerPath);", "+\t\t", "+\t\tIndex index = (Index) this.indexes.get(indexLocation);", "-\t\t// Path is already canonical", "-\t\tString indexPath = computeIndexName(path);", "-\t\t\tUtil.verbose(\"-> recreating index: \"+indexPath+\" for path: \"+path.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tindex = new Index(indexPath, \"Index for \" + path.toOSString(), false /*reuse index file*/); //$NON-NLS-1$", "-\t\tindexes.put(path, index);", "+\t\t\tUtil.verbose(\"-> recreating index: \"+indexLocation+\" for path: \"+containerPath.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tindex = new Index(indexLocation, \"Index for \" + containerPath.toOSString(), false /*reuse index file*/); //$NON-NLS-1$", "+\t\tthis.indexes.put(indexLocation, index);", "-\t\t\tUtil.verbose(\"-> failed to recreate index for path: \"+path.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tUtil.verbose(\"-> failed to recreate index for path: \"+containerPath.toOSString()); //$NON-NLS-1$ //$NON-NLS-2$"]}], "num": 47995}
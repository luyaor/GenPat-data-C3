{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0ee1ff958500f08b1484ee9ee0190be6", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42ebe8277550cce32b97869ccee3ba6f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "8a64589617f7b80b7f12bb3f773ab58c605663c7", "commitAfterChange": "6585c7471e2cc73387fb0d652a600f2678de9051", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate String probeFormatting(String source, int indentationLevel, int[] positions, String lineSeparator, Map options)", "signatureAfterChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length)", "diff": ["-\tprivate String probeFormatting(String source, int indentationLevel, int[] positions, String lineSeparator, Map options) {", "-\t\tExpression expression = parseExpression(source.toCharArray(), options);", "+\tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, int offset, int length) {", "+\t\tExpression expression = parseExpression(source.toCharArray(), this.options);", "-\t\t\treturn internalFormatExpression(source, indentationLevel, positions, lineSeparator, options, expression);", "+\t\t\treturn internalFormatExpression(source, indentationLevel, lineSeparator, expression, offset, length);", "-\t\tConstructorDeclaration constructorDeclaration = parseStatements(source.toCharArray(), options);", "+\t\tConstructorDeclaration constructorDeclaration = parseStatements(source.toCharArray(), this.options);", "-\t\t\treturn internalFormatStatements(source, indentationLevel, positions, lineSeparator, options, constructorDeclaration);", "+\t\t\treturn internalFormatStatements(source, indentationLevel, lineSeparator, constructorDeclaration, offset, length);", "-\t\tAstNode[] bodyDeclarations = parseClassBodyDeclarations(source.toCharArray(), options);", "+\t\tAstNode[] bodyDeclarations = parseClassBodyDeclarations(source.toCharArray(), this.options);", "-\t\t\treturn internalFormatClassBodyDeclarations(source, indentationLevel, positions, lineSeparator, options, bodyDeclarations);", "+\t\t\treturn internalFormatClassBodyDeclarations(source, indentationLevel, lineSeparator, bodyDeclarations, offset, length);", "-\t\treturn formatCompilationUnit(source, indentationLevel, positions, lineSeparator, options);", "+\t\treturn formatCompilationUnit(source, indentationLevel, lineSeparator, offset, length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7430d8e1ba786ce66c30c336881e469", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "8a64589617f7b80b7f12bb3f773ab58c605663c7", "commitAfterChange": "6585c7471e2cc73387fb0d652a600f2678de9051", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic String format( \t\t\tint kind, \t\t\tString source, \t\t\tint indentationLevel, \t\t\tint[] positions, \t\t\tString lineSeparator, \t\t\tMap options)", "signatureAfterChange": " \tpublic TextEdit format( \t\t\tint kind, \t\t\tString source, \t\t\tint offset, \t\t\tint length, \t\t\tint indentationLevel, \t\t\tString lineSeparator)", "diff": ["-\tpublic String format(", "+\tpublic TextEdit format(", "+\t\t\tint offset,", "+\t\t\tint length,", "-\t\t\tint[] positions,", "-\t\t\tString lineSeparator,", "-\t\t\tMap options) {", "+\t\t\tString lineSeparator) {", "-\t\tString result = source;\t\t\t\t", "-\t\t\t\tresult = formatClassBodyDeclarations(source, indentationLevel, positions, lineSeparator, options);", "-\t\t\t\tbreak;", "+\t\t\t\treturn formatClassBodyDeclarations(source, indentationLevel, lineSeparator, offset, length);", "-\t\t\t\tresult = formatCompilationUnit(source, indentationLevel, positions, lineSeparator, options);", "-\t\t\t\tbreak;", "+\t\t\t\treturn formatCompilationUnit(source, indentationLevel, lineSeparator, offset, length);", "-\t\t\t\tresult = formatExpression(source, indentationLevel, positions, lineSeparator, options);", "-\t\t\t\tbreak;", "+\t\t\t\treturn formatExpression(source, indentationLevel, lineSeparator, offset, length);", "-\t\t\t\tresult = formatStatements(source, indentationLevel, positions, lineSeparator, options);", "-\t\t\t\tbreak;", "+\t\t\t\treturn formatStatements(source, indentationLevel, lineSeparator, offset, length);", "-\t\t\t\tresult = probeFormatting(source, indentationLevel, positions, lineSeparator, options);", "+\t\t\t\treturn probeFormatting(source, indentationLevel, lineSeparator, offset, length);", "-\t\tthis.positionsMapping = positions;", "-\t\treturn result;", "-\t}", "+\t\treturn null;"]}], "num": 9037}
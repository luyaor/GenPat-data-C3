{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "caad2e7297caab58cd80e8e8883406df", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64e06cc8de4232e1901c4b08f0c8042c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldPattern.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " protected boolean matchIndexEntry()", "signatureAfterChange": " public boolean isMatchingIndexRecord()", "diff": ["- */", "-protected boolean matchIndexEntry() {", "-\tif (this.name != null) {", "-\t\tswitch(this.matchMode) {", "-\t\t\tcase EXACT_MATCH :", "-\t\t\t\treturn CharOperation.equals(this.name, this.decodedName, this.isCaseSensitive);", "-\t\t\tcase PREFIX_MATCH :", "-\t\t\t\treturn CharOperation.prefixEquals(this.name, this.decodedName, this.isCaseSensitive);", "-\t\t\tcase PATTERN_MATCH :", "-\t\t\t\treturn CharOperation.match(this.name, this.decodedName, this.isCaseSensitive);", "-\t\t}", "-\t}", "-\treturn true;", "+public boolean isMatchingIndexRecord() {", "+\treturn matchesName(this.name, getFieldRecord().name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f30beb8e3ed885bf72895a32a36a51b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferencePattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 9, "signatureBeforeChange": " private int matchLevel(ImportReference importRef, boolean resolve)", "signatureAfterChange": " protected int matchLevel(ImportReference importRef, boolean resolve)", "diff": ["+ */", "+protected int matchLevel(ImportReference importRef, boolean resolve) {", "+\t// NOTE: Not called when resolve is true, see MatchingNodeSet.reportMatching(unit)", "+\tif (!importRef.onDemand)", "+\t\treturn matchTokens(importRef.tokens); ", "+", "+\treturn matchesName(this.pkgName, CharOperation.concatWith(importRef.tokens, '.'))", "+\t\t? ACCURATE_MATCH : IMPOSSIBLE_MATCH;", "+}", "- */", "-private int matchLevel(ImportReference importRef, boolean resolve) {", "-\tif (importRef.onDemand) {", "-\t\tif (this.matches(importRef.tokens)) {", "-\t\t\treturn ACCURATE_MATCH;", "-\t\t} else {", "-\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t}", "-\t} else {", "-\t\tchar[] qualifiedTypeName = CharOperation.concatWith(importRef.tokens, '.');", "-\t\tswitch (this.matchMode) {", "-\t\t\tcase EXACT_MATCH :", "-\t\t\tcase PREFIX_MATCH :", "-\t\t\t\tif (CharOperation.prefixEquals(this.pkgName, qualifiedTypeName, this.isCaseSensitive)) {", "-\t\t\t\t\treturn POSSIBLE_MATCH;", "-\t\t\t\t} ", "-\t\t\t\tbreak;", "-\t\t\tcase PATTERN_MATCH :", "-\t\t\t\tif (CharOperation.match(this.pkgName, qualifiedTypeName, this.isCaseSensitive)) {", "-\t\t\t\t\treturn POSSIBLE_MATCH;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t}", "-\t\treturn IMPOSSIBLE_MATCH;", "-\t}", "-}"]}], "num": 37884}
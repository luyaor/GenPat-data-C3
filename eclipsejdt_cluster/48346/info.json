{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9014d2af709d29635385d3aecc100bd8", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c817f5b93804cef30cac3830c9880a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "d35306cb5dcf7e4ac666fd0505f3086f50241fb2", "commitAfterChange": "3284f738bbf7a2dbd90434dea313c8629bed5722", "methodNumberBeforeChange": 157, "methodNumberAfterChange": 157, "signatureBeforeChange": " public void test401610c()", "signatureAfterChange": " public void test401610c()", "diff": ["-\t\t\t\t\"\t\tnew X().foo((s)->{});\\n\" +    // error not reported here, since analyzeCode does not get to run.", "+\t\t\t\t\"\t\tnew X().foo((s)->{});\\n\" +", "-\t\t\t\t\"5. ERROR in X.java (at line 18)\\n\" + ", "+\t\t\t\t\"5. ERROR in X.java (at line 17)\\n\" + ", "+\t\t\t\t\"\tnew X().foo((s)->{});\\n\" + ", "+\t\t\t\t\"\t        ^^^\\n\" + ", "+\t\t\t\t\"The method foo(I) in the type X is not applicable for the arguments ((<no type> s) -> {})\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"6. ERROR in X.java (at line 17)\\n\" + ", "+\t\t\t\t\"\tnew X().foo((s)->{});\\n\" + ", "+\t\t\t\t\"\t            ^^^^^\\n\" + ", "+\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method foo()\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"7. ERROR in X.java (at line 18)\\n\" + ", "-\t\t\t\t\"\t                   ^^^^^^^\\n\" + ", "-\t\t\t\t\"This method must return a result of type String\\n\" + ", "+\t\t\t\t\"\t        ^^^\\n\" + ", "+\t\t\t\t\"The method foo(I) in the type X is not applicable for the arguments ((<no type> s) -> {})\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"8. ERROR in X.java (at line 18)\\n\" + ", "+\t\t\t\t\"\tnew X().foo((s)->{ return;});\\n\" + ", "+\t\t\t\t\"\t            ^^^^^\\n\" + ", "+\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method foo()\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4ee4b4cad10a0c809527a0f20725f85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "bea7b508525f70d680963772996546f2bcf8018f", "commitAfterChange": "6612336f81825afdf894aa053e2e886c83842e87", "methodNumberBeforeChange": 155, "methodNumberAfterChange": 155, "signatureBeforeChange": " public void test401610c()", "signatureAfterChange": " public void test401610c()", "diff": ["-\t\t\t\t\"\t\tnew X().foo((s)->{});\\n\" +", "+\t\t\t\t\"\t\tnew X().foo((s)->{});\\n\" +    // error not reported here, since analyzeCode does not get to run.", "+\t\t\t\t\"\t        ^^^\\n\" + ", "+\t\t\t\t\"The method foo(I) in the type X is not applicable for the arguments (() -> {\\n\" + ", "+\t\t\t\t\"  return \\\"\\\";\\n\" + ", "+\t\t\t\t\"})\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\t\t\"\tnew X().foo(()->{ return \\\"\\\";});\\n\" + ", "-\t\t\t\t\"2. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 16)\\n\" + ", "+\t\t\t\t\"\tnew X().foo(()-> 10);\\n\" + ", "+\t\t\t\t\"\t        ^^^\\n\" + ", "+\t\t\t\t\"The method foo(I) in the type X is not applicable for the arguments (() -> 10)\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 16)\\n\" + ", "-\t\t\t\t\"3. ERROR in X.java (at line 17)\\n\" + ", "-\t\t\t\t\"\tnew X().foo((s)->{});\\n\" + ", "-\t\t\t\t\"\t            ^^^^^^^\\n\" + ", "-\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method\\n\" + ", "-\t\t\t\t\"----------\\n\" + ", "-\t\t\t\t\"4. ERROR in X.java (at line 18)\\n\" + ", "+\t\t\t\t\"5. ERROR in X.java (at line 18)\\n\" + ", "-\t\t\t\t\"\t            ^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\t\"Lambda expression\\'s signature does not match the signature of the functional interface method\\n\" + ", "+\t\t\t\t\"\t                   ^^^^^^^\\n\" + ", "+\t\t\t\t\"This method must return a result of type String\\n\" + "]}], "num": 48346}
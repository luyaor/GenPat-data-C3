{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "97c763c86ba45805c1e61dce238dfb81", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eb89a353b5ebb87cbf2551f05d9f4ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "e62c45ebe5881b0e2838be4fcb8a4a48c85b9c0c", "commitAfterChange": "c36a6a2b662267e56067d121b7f34ae48cbcb692", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": " \tpublic void test036d()", "signatureAfterChange": " \tpublic void test036d()", "diff": ["-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"Y.java\",", "-\t\t\t\t\"abstract class Y implements Equivalent<String>, EqualityComparable<Integer> {\\n\" +", "-\t\t\t\t\"\tpublic abstract boolean equalTo(Number other);\\n\" +", "-\t\t\t\t\"}\\n\" +", "-\t\t\t\t\"interface Equivalent<T> { boolean equalTo(T other); }\\n\" +", "-\t\t\t\t\"interface EqualityComparable<T> { boolean equalTo(T other); }\\n\"", "-\t\t\t},", "-\t\t\t\"\"", "-\t\t\t// no bridge methods are created here since Y does not define an equalTo(?) method which equals an inherited equalTo method", "-\t\t);", "+\t\tif (this.complianceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\tthis.runConformTest(", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\t\"Y.java\",", "+\t\t\t\t\t\t\t\"abstract class Y implements Equivalent<String>, EqualityComparable<Integer> {\\n\" +", "+\t\t\t\t\t\t\t\t\t\"\tpublic abstract boolean equalTo(Number other);\\n\" +", "+\t\t\t\t\t\t\t\t\t\"}\\n\" +", "+\t\t\t\t\t\t\t\t\t\"interface Equivalent<T> { boolean equalTo(T other); }\\n\" +", "+\t\t\t\t\t\t\t\t\t\"interface EqualityComparable<T> { boolean equalTo(T other); }\\n\"", "+\t\t\t\t\t},", "+\t\t\t\t\t\"\"", "+\t\t\t\t\t// no bridge methods are created here since Y does not define an equalTo(?) method which equals an inherited equalTo method", "+\t\t\t\t\t);", "+\t\t} else {", "+\t\t\tthis.runNegativeTest(", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\t\"Y.java\",", "+\t\t\t\t\t\t\t\"abstract class Y implements Equivalent<String>, EqualityComparable<Integer> {\\n\" +", "+\t\t\t\t\t\t\t\t\t\"\tpublic abstract boolean equalTo(Number other);\\n\" +", "+\t\t\t\t\t\t\t\t\t\"}\\n\" +", "+\t\t\t\t\t\t\t\t\t\"interface Equivalent<T> { boolean equalTo(T other); }\\n\" +", "+\t\t\t\t\t\t\t\t\t\"interface EqualityComparable<T> { boolean equalTo(T other); }\\n\"", "+\t\t\t\t\t},", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in Y.java (at line 1)\\n\" + ", "+\t\t\t\t\t\"\tabstract class Y implements Equivalent<String>, EqualityComparable<Integer> {\\n\" + ", "+\t\t\t\t\t\"\t               ^\\n\" + ", "+\t\t\t\t\t\"Name clash: The method equalTo(T) of type Equivalent<T> has the same erasure as equalTo(T) of type EqualityComparable<T> but does not override it\\n\" + ", "+\t\t\t\t\t\"----------\\n\");", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54e56954f0458de0b796dcd0028724a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest.java", "commitBeforeChange": "95cf1c51bda98298c8465ff64b742f30d6302c1e", "commitAfterChange": "c061de6d65bf019fa9950896cd9e3724a43a4d46", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public void _test283353()", "signatureAfterChange": " public void test283353()", "diff": ["-public void _test283353() {", "-\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"  public static void main(String[] args) {\\n\" +", "-\t\t\t\t\"    EntityKey entityKey = null;\\n\" +", "-\t\t\t\t\"    new EntityCondenser().condense(entityKey);  \\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"  public static class EntityCondenser {\\n\" +", "-\t\t\t\t\"    <I, E extends EntityType<I, E, K>, K extends EntityKey<I>> void condense(K entityKey) {\\n\" +", "-\t\t\t\t\"    }\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"  public class EntityKey<I> {}\\n\" +", "-\t\t\t\t\"  public interface EntityType<\\n\" +", "-\t\t\t\t\"    I,\\n\" +", "-\t\t\t\t\"    E extends EntityType<I, E, K>,\\n\" +", "-\t\t\t\t\"    K extends EntityKey<I>> {\\n\" +", "-\t\t\t\t\"  }\\n\" +", "-\t\t\t\t\"}\\n\"", "-\t\t\t},", "+public void test283353() {", "+\tString source = ", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"  public static void main(String[] args) {\\n\" +", "+\t\t\t\"    EntityKey entityKey = null;\\n\" +", "+\t\t\t\"    new EntityCondenser().condense(entityKey);  \\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"  public static class EntityCondenser {\\n\" +", "+\t\t\t\"    <I, E extends EntityType<I, E, K>, K extends EntityKey<I>> void condense(K entityKey) {\\n\" +", "+\t\t\t\"    }\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"  public class EntityKey<I> {}\\n\" +", "+\t\t\t\"  public interface EntityType<\\n\" +", "+\t\t\t\"    I,\\n\" +", "+\t\t\t\"    E extends EntityType<I, E, K>,\\n\" +", "+\t\t\t\"    K extends EntityKey<I>> {\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"}\\n\";", "+\tif (this.complianceLevel < ClassFileConstants.JDK1_8) {", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] { \"X.java\", source },", "+\t} else {", "+\t\t// see https://bugs.eclipse.org/425031", "+\t\trunNegativeTest(", "+\t\t\tnew String[] { \"X.java\", source },", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tEntityKey entityKey = null;\\n\" + ", "+\t\t\t\"\t^^^^^^^^^\\n\" + ", "+\t\t\t\"X.EntityKey is a raw type. References to generic type X.EntityKey<I> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tnew EntityCondenser().condense(entityKey);  \\n\" + ", "+\t\t\t\"\t                      ^^^^^^^^\\n\" + ", "+\t\t\t\"The method condense(K) in the type X.EntityCondenser is not applicable for the arguments (X.EntityKey)\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t}"]}], "num": 7199}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c7e3b82ef514ce0e28f4a47c935d5dac", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26c4889b7ea0255b0578c9746fe8f4ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic MethodBinding getImplicitMethod( \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\tpublic MethodBinding getImplicitMethod(", "-\t\tchar[] selector,", "-\t\tTypeBinding[] argumentTypes,", "-\t\tInvocationSite invocationSite) {", "+\tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite) {", "-\t\tProblemMethodBinding foundFuzzyProblem = null;", "+\t\tMethodBinding foundFuzzyProblem = null;", "-\t\tProblemMethodBinding foundInsideProblem = null;", "+\t\tMethodBinding foundInsideProblem = null;", "-\t\t\t\t\t\t\t? classScope.findExactMethod(", "-\t\t\t\t\t\t\t\treceiverType,", "-\t\t\t\t\t\t\t\tselector,", "-\t\t\t\t\t\t\t\targumentTypes,", "-\t\t\t\t\t\t\t\tinvocationSite)", "-\t\t\t\t\t\t\t: classScope.findExactMethod(", "-\t\t\t\t\t\t\t\treceiverType,", "-\t\t\t\t\t\t\t\tfoundMethod.selector,", "-\t\t\t\t\t\t\t\tfoundMethod.parameters,", "-\t\t\t\t\t\t\t\tinvocationSite);", "-\t\t\t\t\t//\t\t\t\t\t\t? findExactMethod(receiverType, selector, argumentTypes, invocationSite)", "-\t\t\t\t\t//\t\t\t\t\t\t: findExactMethod(receiverType, foundMethod.selector, foundMethod.parameters, invocationSite);", "+\t\t\t\t\t\t\t? classScope.findExactMethod(receiverType, selector, argumentTypes, invocationSite)", "+\t\t\t\t\t\t\t: classScope.findExactMethod( receiverType, foundMethod.selector, foundMethod.parameters, invocationSite);", "+\t\t\t\t\t//\t\t? findExactMethod(receiverType, selector, argumentTypes, invocationSite)", "+\t\t\t\t\t//\t\t: findExactMethod(receiverType, foundMethod.selector, foundMethod.parameters, invocationSite);", "-\t\t\t\t\t\tmethodBinding =", "-\t\t\t\t\t\t\tclassScope.findMethod(receiverType, selector, argumentTypes, invocationSite);", "-\t\t\t\t\t\t//\t\t\t\t\tmethodBinding = findMethod(receiverType, selector, argumentTypes, invocationSite);", "+\t\t\t\t\t\tmethodBinding = classScope.findMethod(receiverType, selector, argumentTypes, invocationSite);", "+\t\t\t\t\t\t// methodBinding = findMethod(receiverType, selector, argumentTypes, invocationSite);", "-\t\t\t\t\t\tProblemMethodBinding fuzzyProblem = null;", "-\t\t\t\t\t\tProblemMethodBinding insideProblem = null;", "+\t\t\t\t\t\tMethodBinding fuzzyProblem = null;", "+\t\t\t\t\t\tMethodBinding insideProblem = null;", "-\t\t\t\t\t\t\t\tif (!areParametersAssignable(methodBinding.parameters, argumentTypes)) {", "-\t\t\t\t\t\t\t\t\tif (foundMethod == null || foundMethod.problemId() == NotVisible){", "+\t\t\t\t\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "+\t\t\t\t\t\t\t\tif (compatibleMethod == null) {", "+\t\t\t\t\t\t\t\t\tif (foundMethod == null || foundMethod.problemId() == NotVisible)", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tfuzzyProblem = new ProblemMethodBinding(selector, methodBinding.parameters, InheritedNameHidesEnclosingName);", "-", "-\t\t\t\t\t\t\t\t} else if (!methodBinding.canBeSeenBy(receiverType, invocationSite, classScope)) {", "-\t\t\t\t\t\t\t\t\t// using <classScope> instead of <this> for visibility check does grant all access to innerclass", "-\t\t\t\t\t\t\t\t\tfuzzyProblem =", "-\t\t\t\t\t\t\t\t\t\tnew ProblemMethodBinding(", "-\t\t\t\t\t\t\t\t\t\t\tmethodBinding,", "-\t\t\t\t\t\t\t\t\t\t\tselector,", "-\t\t\t\t\t\t\t\t\t\t\tmethodBinding.parameters,", "-\t\t\t\t\t\t\t\t\t\t\tNotVisible);", "+\t\t\t\t\t\t\t\t\tfuzzyProblem = new ProblemMethodBinding(methodBinding, selector, methodBinding.parameters, InheritedNameHidesEnclosingName);", "+\t\t\t\t\t\t\t\t} else if (!compatibleMethod.isValidBinding()) {", "+\t\t\t\t\t\t\t\t\tfuzzyProblem = compatibleMethod;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tmethodBinding = compatibleMethod;", "+\t\t\t\t\t\t\t\t\tif (!methodBinding.canBeSeenBy(receiverType, invocationSite, classScope)) {", "+\t\t\t\t\t\t\t\t\t\t// using <classScope> instead of <this> for visibility check does grant all access to innerclass", "+\t\t\t\t\t\t\t\t\t\tfuzzyProblem = new ProblemMethodBinding(methodBinding, selector, methodBinding.parameters, NotVisible);", "+\t\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39738dc138c5afbdc1921507e6eacccc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 45, "signatureBeforeChange": "  \tpublic MethodBinding getMethod(TypeBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": "  \tpublic MethodBinding getMethod(TypeBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\t\tif (!areParametersAssignable(methodBinding.parameters, argumentTypes))", "-\t\t\t\t\treturn new ProblemMethodBinding(", "-\t\t\t\t\t\tmethodBinding,", "-\t\t\t\t\t\tselector,", "-\t\t\t\t\t\targumentTypes,", "-\t\t\t\t\t\tNotFound);", "+\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "+\t\t\t\tif (compatibleMethod == null)", "+\t\t\t\t\treturn new ProblemMethodBinding(methodBinding, selector, argumentTypes, NotFound);", "+\t\t\t\tif (!compatibleMethod.isValidBinding())", "+\t\t\t\t\treturn compatibleMethod;", "+\t", "+\t\t\t\tmethodBinding = compatibleMethod;", "-\t\t\t\t\treturn new ProblemMethodBinding(", "-\t\t\t\t\t\tmethodBinding,", "-\t\t\t\t\t\tselector,", "-\t\t\t\t\t\tmethodBinding.parameters,", "-\t\t\t\t\t\tNotVisible);", "+\t\t\t\t\treturn new ProblemMethodBinding( methodBinding, selector, methodBinding.parameters, NotVisible);", "-\t\t\t"]}], "num": 39092}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c36b8598481c417cd9c2c53d623aaa8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "480d6fa2dffec93bb97ad8d2cbae7df9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest.java", "commitBeforeChange": "6defd2b79520062f5150164ded77c2d030acc168", "commitAfterChange": "d351702f3561d64a024c15ffbed0faad48ce2838", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic static Test suite()", "signatureAfterChange": "  \tpublic static Test suite()", "diff": ["-\t", "-\t\t\t// call the suite() method and add the resulting suite to the suite", "-\t\t\ttry {", "-\t\t\t\tMethod suiteMethod = testClass.getDeclaredMethod(\"suite\", new Class[0]); //$NON-NLS-1$", "-\t\t\t\tTest suite = (Test)suiteMethod.invoke(null, new Object[0]);", "-\t\t\t\tts.addTest(suite);", "-\t\t\t} catch (IllegalAccessException e) {", "-\t\t\t\te.printStackTrace();", "-\t\t\t} catch (InvocationTargetException e) {", "-\t\t\t\te.getTargetException().printStackTrace();", "-\t\t\t} catch (NoSuchMethodException e) {", "-\t\t\t\te.printStackTrace();", "-\t\t\t}", "+\t\t\tTest suite = buildTestSuite(testClass);", "+\t\t\tts.addTest(suite);", "+\t\t}", "+\t\tint complianceLevels = AbstractCompilerTest.getPossibleComplianceLevels();", "+\t\tif ((complianceLevels & AbstractCompilerTest.F_1_3) != 0) {", "+\t\t\tTest suite = buildTestSuite(JavadocTest_1_3.class);", "+\t\t\tts.addTest(new RegressionTestSetup(suite, COMPLIANCE_1_3));", "+\t\t}", "+\t\tif ((complianceLevels & AbstractCompilerTest.F_1_4) != 0) {", "+\t\t\tTest suite = buildTestSuite(JavadocTest_1_4.class);", "+\t\t\tts.addTest(new RegressionTestSetup(suite, COMPLIANCE_1_4));", "+\t\t}", "+\t\tif ((complianceLevels & AbstractCompilerTest.F_1_5) != 0) {", "+\t\t\tTest suite = buildTestSuite(JavadocTest_1_5.class);", "+\t\t\tts.addTest(new RegressionTestSetup(suite, COMPLIANCE_1_5));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "743ea1735a8ab25f8dc68b65757ecf5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "82e38714e3cc40f0c2983bf6e0392b987ccce94e", "commitAfterChange": "6f52e55dfcdb3767d3e0659e7f3cf8875e7f6b50", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": "  \tpublic void ensureSpaceBeforeReplace(ASTNode node, ChildPropertyDescriptor desc, int offset, int numTokenBefore)", "signatureAfterChange": " \t \tpublic void ensureSpaceBeforeReplace(ASTNode node)", "diff": ["-", "-\tpublic void ensureSpaceBeforeReplace(ASTNode node, ChildPropertyDescriptor desc, int offset, int numTokenBefore) {", "-\t\t// bug 103970", "-\t\tif (getChangeKind(node, desc) == RewriteEvent.REPLACED) {", "-\t\t\ttry {", "-\t\t\t\twhile (numTokenBefore > 0) {", "-\t\t\t\t\toffset= getScanner().getNextEndOffset(offset, true);", "-\t\t\t\t\tnumTokenBefore--;", "+\t", "+\tpublic void ensureSpaceBeforeReplace(ASTNode node) {", "+\t\tif (this.beforeRequiredSpaceIndex  == -1) return;", "+\t\t", "+\t\tList events = this.eventStore.getChangedPropertieEvents(node);", "+\t\t", "+\t\tfor (Iterator iterator = events.iterator(); iterator.hasNext();) {", "+\t\t\tRewriteEvent event = (RewriteEvent) iterator.next();", "+\t\t\tif (event.getChangeKind() == RewriteEvent.REPLACED && event.getOriginalValue() instanceof ASTNode) {", "+\t\t\t\tif (this.beforeRequiredSpaceIndex  == getExtendedOffset((ASTNode) event.getOriginalValue())) {", "+\t\t\t\t\tdoTextInsert(this.beforeRequiredSpaceIndex , String.valueOf(' '), getEditGroup(event));", "+\t\t\t\t\tthis.beforeRequiredSpaceIndex  = -1;", "+\t\t\t\t\treturn;", "-    \t\t\tif (offset == getExtendedOffset((ASTNode) getOriginalValue(node, desc))) {", "-\t\t\t\t\tdoTextInsert(offset, String.valueOf(' '), getEditGroup(node, desc));", "-\t\t\t\t}", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\thandleException(e);", "+\t\t", "+\t\tif (this.beforeRequiredSpaceIndex  < getExtendedOffset(node)) {", "+\t\t\tthis.beforeRequiredSpaceIndex  = -1;", "+\t\t}"]}], "num": 47505}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce615870e13a69ca8a0cef5429cf1761", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e8d40bfd1edebc3a3656870fce76c99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AnnotationParser.java", "commitBeforeChange": "d5b9ab15bb3f769b7e2ac485fe6da55027818828", "commitAfterChange": "e98478cd38caef5e23457b8b0fdc364bf2846afc", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tprivate boolean parseHref() throws InvalidInputException", "signatureAfterChange": "  \tprivate boolean parseHref() throws InvalidInputException", "diff": ["+", "+\tprivate boolean parseHref() throws InvalidInputException {", "+\t\tint start = this.scanner.getCurrentTokenStartPosition();", "+\t\t//int end = this.scanner.getCurrentTokenEndPosition();", "+\t\tif (readTokenAndConsume() == TerminalTokens.TokenNameIdentifier) {", "+\t\t\t//end = this.index-1;", "+\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), new char[]{'a'}, false)", "+\t\t\t\t\t&& readTokenAndConsume() == TerminalTokens.TokenNameIdentifier) {", "+\t\t\t\t//end = this.index - 1;", "+\t\t\t\ttry {", "+\t\t\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), new char[]{'h', 'r', 'e', 'f'}, false) &&", "+\t\t\t\t\t\treadTokenAndConsume() == TerminalTokens.TokenNameEQUAL &&", "+\t\t\t\t\t\treadTokenAndConsume() == TerminalTokens.TokenNameStringLiteral &&", "+\t\t\t\t\t\treadTokenAndConsume() == TerminalTokens.TokenNameGREATER) {", "+\t\t\t\t\t\twhile (readTokenAndConsume() != TerminalTokens.TokenNameLESS) {", "+\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.lineEnd) {", "+\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().annotationInvalidSeeUrlReference(start, this.lineEnd - 1);", "+\t\t\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (readTokenAndConsume() == TerminalTokens.TokenNameDIVIDE\t&&", "+\t\t\t\t\t\t\treadTokenAndConsume() == TerminalTokens.TokenNameIdentifier) {", "+\t\t\t\t\t\t\t//end = this.index - 1;", "+\t\t\t\t\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), new char[]{'a'}, false)\t&&", "+\t\t\t\t\t\t\t\treadTokenAndConsume() == TerminalTokens.TokenNameGREATER) {", "+\t\t\t\t\t\t\t\t// Valid href", "+\t\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} catch (InvalidInputException ex) {", "+\t\t\t\t\t// Place to change end position for error report", "+\t\t\t\t\t//end = getEndPosition();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tthis.sourceParser.problemReporter().annotationInvalidSeeUrlReference(start, this.lineEnd - 1);", "+\t\treturn false;", "+\t}", "-\t", "-\tprivate boolean parseHref() throws InvalidInputException {", "-\t\tint start = this.scanner.getCurrentTokenStartPosition();", "-\t\t//int end = this.scanner.getCurrentTokenEndPosition();", "-\t\tif (readConsumeToken() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\t//end = this.index-1;", "-\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), new char[] { 'a' }, false)", "-\t\t\t\t&& readConsumeToken() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\t\t//end = this.index - 1;", "-\t\t\t\ttry {", "-\t\t\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), new char[] { 'h', 'r', 'e', 'f' }, false)", "-\t\t\t\t\t\t&& readConsumeToken() == TerminalTokens.TokenNameEQUAL", "-\t\t\t\t\t\t&& readConsumeToken() == TerminalTokens.TokenNameStringLiteral", "-\t\t\t\t\t\t&& readConsumeToken() == TerminalTokens.TokenNameGREATER) {", "-\t\t\t\t\t\twhile (readConsumeToken() != TerminalTokens.TokenNameLESS) {", "-\t\t\t\t\t\t\tif (this.scanner.currentPosition >= this.lineEnd) {", "-\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().annotationInvalidSeeUrlReference(start, this.lineEnd-1);", "-\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (readConsumeToken() == TerminalTokens.TokenNameDIVIDE", "-\t\t\t\t\t\t\t&& readConsumeToken() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\t\t\t\t\t//end = this.index - 1;", "-\t\t\t\t\t\t\tif (CharOperation.equals(this.scanner.getCurrentIdentifierSource(), new char[] { 'a' }, false)", "-\t\t\t\t\t\t\t\t&& readConsumeToken() == TerminalTokens.TokenNameGREATER) {", "-\t\t\t\t\t\t\t\t// Valid href", "-\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tcatch (InvalidInputException ex) {", "-\t\t\t\t\t//end = getEndPosition();", "-\t\t\t\t}", "-\t\tthis.sourceParser.problemReporter().annotationInvalidSeeUrlReference(start, this.lineEnd-1);", "-\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c86f4218a23963a1bb6a46b7d3ed9a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AnnotationParser.java", "commitBeforeChange": "d5b9ab15bb3f769b7e2ac485fe6da55027818828", "commitAfterChange": "e98478cd38caef5e23457b8b0fdc364bf2846afc", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate Expression parseMember(TypeReference receiver) throws InvalidInputException", "signatureAfterChange": "  \tprivate Expression parseMember(TypeReference receiver) throws InvalidInputException", "diff": ["+", "+\tprivate Expression parseMember(TypeReference receiver) throws InvalidInputException {", "+\t\tthis.identifierPtr = -1;", "+\t\tthis.identifierLengthPtr = -1;", "+\t\tint start = this.scanner.getCurrentTokenStartPosition();", "+\t\tif (readTokenAndConsume() == TerminalTokens.TokenNameIdentifier) {", "+\t\t\tpushIdentifier(true);", "+\t\t\tif (readTokenAndConsume() == TerminalTokens.TokenNameLPAREN) {", "+\t\t\t\tstart = this.scanner.currentPosition;", "+\t\t\t\tAnnotationMessageSend msg = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tmsg = parseArguments(receiver);", "+\t\t\t\t\tmsg.tagSourceStart = this.tagSourceStart;", "+\t\t\t\t\tmsg.tagSourceEnd = this.tagSourceEnd;", "+\t\t\t\t} catch (InvalidInputException e) {", "+\t\t\t\t\tint end = this.scanner.getCurrentTokenEndPosition() < this.lineEnd ?", "+\t\t\t\t\t\t\tthis.scanner.getCurrentTokenEndPosition() :", "+\t\t\t\t\t\t\tthis.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\tend = end < this.lineEnd ? end : (this.lineEnd - 1);", "+\t\t\t\t\tthis.sourceParser.problemReporter()\t.annotationInvalidSeeReferenceArgs(start, end);", "+\t\t\t\t}", "+\t\t\t\treturn msg;", "+\t\t\t}", "+\t\t\tAnnotationFieldReference field = new AnnotationFieldReference(identifierStack[0], identifierPositionStack[0]);", "+\t\t\tfield.receiver = receiver;", "+\t\t\tfield.tagSourceStart = this.tagSourceStart;", "+\t\t\tfield.tagSourceEnd = this.tagSourceEnd;", "+\t\t\treturn field;", "+\t\t}", "+\t\tthis.sourceParser.problemReporter().annotationInvalidSeeReference(start, getEndPosition());", "+\t\treturn null;", "+\t}", "-\tprivate Expression parseMember(TypeReference receiver) throws InvalidInputException {", "-\t\tthis.identifierPtr = -1;", "-\t\tthis.identifierLengthPtr = -1;", "-\t\tint start = this.scanner.getCurrentTokenStartPosition();", "-\t\tif (readConsumeToken() == TerminalTokens.TokenNameIdentifier) {", "-\t\t\tpushIdentifier(true);", "-\t\t\tif (readConsumeToken() == TerminalTokens.TokenNameLPAREN) {", "-\t\t\t\tstart = this.scanner.currentPosition;", "-\t\t\t\tAnnotationMessageSend msg = null;", "-\t\t\t\ttry {", "-\t\t\t\t\tmsg = parseArguments(receiver);", "-\t\t\t\t\tmsg.tagSourceStart = this.tagSourceStart;", "-\t\t\t\t\tmsg.tagSourceEnd = this.tagSourceEnd;", "-\t\t\t\t}", "-\t\t\t\tcatch (InvalidInputException e) {", "-\t\t\t\t\tint end = this.scanner.getCurrentTokenEndPosition() < this.lineEnd ? this.scanner.getCurrentTokenEndPosition() : this.scanner.getCurrentTokenStartPosition();", "-\t\t\t\t\tthis.sourceParser.problemReporter().annotationInvalidSeeReferenceArgs(start, (end<this.lineEnd?end:(this.lineEnd-1)));", "-\t\t\t\t}", "-\t\t\t\treturn msg;", "-\t\t\t}", "-\t\t\tAnnotationFieldReference field = new AnnotationFieldReference(identifierStack[0], identifierPositionStack[0]);", "-\t\t\tfield.receiver = receiver;", "-\t\t\tfield.tagSourceStart = this.tagSourceStart;", "-\t\t\tfield.tagSourceEnd = this.tagSourceEnd;", "-\t\t\treturn field;", "-\t\tthis.sourceParser.problemReporter().annotationInvalidSeeReference(start, getEndPosition());", "-\t\treturn null;", "-\t}"]}], "num": 58086}
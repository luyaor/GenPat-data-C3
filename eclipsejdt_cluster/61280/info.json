{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e2fd7b42a47fed5ba820d6065cd9335", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86aca4e8072f0164319b9a670263eb64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor2.java", "commitBeforeChange": "50acefc2048260070d2acf9418003e0db6eb34ad", "commitAfterChange": "92852bca9a4e0ceab73bc2cba44652396852b1a5", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tprivate void formatStatements(final List statements, boolean insertNewLineAfterLastStatement)", "signatureAfterChange": " \t \tprivate void formatStatements(final List statements, boolean insertNewLineAfterLastStatement)", "diff": ["-\t\tfor (int i = 0; i < statementsLength; i++) {", "-\t\t\tfinal Statement statement = (Statement) statements.get(i);", "+\t\tif (statementsLength > 1) {", "+\t\t\tStatement previousStatement = (Statement) statements.get(0);", "+\t\t\tpreviousStatement.accept(this);", "+\t\t\tfor (int i = 1; i < statementsLength - 1; i++) {", "+\t\t\t\tfinal Statement statement = (Statement) statements.get(i);", "+\t\t\t\tif (i > 0", "+\t\t\t\t\t\t&& (previousStatement.getNodeType() == ASTNode.EMPTY_STATEMENT)", "+\t\t\t\t\t\t&& (statement.getNodeType() != ASTNode.EMPTY_STATEMENT)) {", "+\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t}", "+\t\t\t\tstatement.accept(this);", "+\t\t\t\tpreviousStatement = statement;", "+\t\t\t}", "+\t\t\tfinal Statement statement = ((Statement) statements.get(statementsLength - 1));", "+\t\t\tif (previousStatement.getNodeType() == ASTNode.EMPTY_STATEMENT", "+\t\t\t\t\t&& statement.getNodeType() != ASTNode.EMPTY_STATEMENT) {", "+\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t}", "+\t\t} else {", "+\t\t\t((Statement) statements.get(0)).accept(this);", "+\t\t}", "+\t\tif (insertNewLineAfterLastStatement) {", "+\t\t\tthis.scribe.printNewLine();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbb9c7e9810830e9b90da8747fe3a7ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/ExternalAnnotationUtil.java", "commitBeforeChange": "34f724a9738d7636a75842e2910c694725115548", "commitAfterChange": "9b49fc6edec0d13e82a14df97219e6ae294f74cc", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate static String updateParameterType(String newParameterType, int paramIdx, String oldSignature, MergeStrategy mergeStrategy)", "signatureAfterChange": "  \tprivate static String updateSignature(String originalSignature, String annotatedSignature, int updatePosition, MergeStrategy mergeStrategy)", "diff": ["+", "+\tprivate static String updateSignature(String originalSignature, String annotatedSignature, int updatePosition, MergeStrategy mergeStrategy) {", "+\t\tStringBuffer buf = new StringBuffer();", "+\t\tString signatureToReplace;", "+\t\tString postfix = null;", "+\t\tswitch (updatePosition) {", "+\t\t\tcase POSITION_FULL_SIGNATURE:", "+\t\t\t\tsignatureToReplace = originalSignature;", "+\t\t\t\tbreak;", "+\t\t\tcase POSITION_RETURN_TYPE:", "+\t\t\t\tassert originalSignature.charAt(0) == '(' : \"signature must start with '('\"; //$NON-NLS-1$", "+\t\t\t\tint close = originalSignature.indexOf(')');", "+\t\t\t\tbuf.append(originalSignature, 0, close+1);", "+\t\t\t\tsignatureToReplace = originalSignature.substring(close+1);", "+\t\t\t\tbreak;", "+\t\t\tdefault: // parameter", "+\t\t\t\tSignatureWrapper wrapper = new SignatureWrapper(originalSignature.toCharArray(), true, true); // may already contain annotations", "+\t\t\t\twrapper.start = 1;", "+\t\t\t\tfor (int i = 0; i < updatePosition; i++)", "+\t\t\t\t\twrapper.start = wrapper.computeEnd() + 1;", "+\t\t\t\tint start = wrapper.start;", "+\t\t\t\tint end = wrapper.computeEnd();", "+\t\t\t\tend = wrapper.skipAngleContents(end);", "+\t\t\t\tbuf.append(originalSignature, 0, start);", "+\t\t\t\tsignatureToReplace = originalSignature.substring(start, end+1);", "+\t\t\t\tpostfix = originalSignature.substring(end+1, originalSignature.length());", "+\t\t}", "+\t\tupdateType(buf, signatureToReplace.toCharArray(), annotatedSignature.toCharArray(), mergeStrategy);", "+\t\tif (postfix != null)", "+\t\t\tbuf.append(postfix);", "+\t\treturn buf.toString();", "-", "-\tprivate static String updateParameterType(String newParameterType, int paramIdx, String oldSignature, MergeStrategy mergeStrategy) {", "-\t\tStringBuffer buf = new StringBuffer();", "-", "-\t\tSignatureWrapper wrapper = new SignatureWrapper(oldSignature.toCharArray(), true, true); // may already contain annotations", "-\t\twrapper.start = 1;", "-\t\tfor (int i = 0; i < paramIdx; i++)", "-\t\t\twrapper.start = wrapper.computeEnd() + 1;", "-\t\tint start = wrapper.start;", "-\t\tint end = wrapper.computeEnd();", "-\t\tend = wrapper.skipAngleContents(end);", "-\t\tbuf.append(oldSignature, 0, start);", "-\t\tupdateType(buf, oldSignature.substring(start, end+1).toCharArray(), newParameterType.toCharArray(), mergeStrategy);", "-\t\tbuf.append(oldSignature, end+1, oldSignature.length());", "-\t\treturn buf.toString();", "-\t}"]}], "num": 61280}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96a55512c7ff866a1403624d1cce8e88", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f800a19e35f6d9d8f7240ef9c2a904b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/FactoryPathUtil.java", "commitBeforeChange": "6a39aeee024a65d73e9084e99bead655e3ded072", "commitAfterChange": "30a0d8b166ac2fa2854a231544dfecb8e382982a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic static Map<FactoryContainer, Boolean> decodeFactoryPath(final String xmlFactoryPath)  \t\tthrows CoreException", "signatureAfterChange": "  \tpublic static Map<FactoryContainer, FactoryPath.Attributes> decodeFactoryPath(final String xmlFactoryPath)  \tthrows CoreException", "diff": ["-\tpublic static Map<FactoryContainer, Boolean> decodeFactoryPath(final String xmlFactoryPath) ", "-\t\tthrows CoreException", "-\t{", "-\t\tMap<FactoryContainer, Boolean> result = new LinkedHashMap<FactoryContainer, Boolean>();", "-\t\tStringReader reader = new StringReader(xmlFactoryPath);", "-\t\tElement fpElement = null;", "-\t\t", "-\t\ttry {", "-\t\t\tDocumentBuilder parser = ", "-\t\t\t\tDocumentBuilderFactory.newInstance().newDocumentBuilder();", "-\t\t\tfpElement = parser.parse(new InputSource(reader)).getDocumentElement();", "-\t\t\t", "-\t\t}", "-\t\tcatch (IOException e) {", "-\t\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_ioException, e));", "-\t\t}", "-\t\tcatch (SAXException e) {", "-\t\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_couldNotParse, e));", "-\t\t}", "-\t\tcatch (ParserConfigurationException e) {", "-\t\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_parserConfigError, e));", "-\t\t}", "-\t\tfinally {", "-\t\t\treader.close();", "-\t\t}", "-\t\t", "-\t\tif (!fpElement.getNodeName().equalsIgnoreCase(FACTORYPATH_TAG)) {", "-\t\t\tIOException e = new IOException(\"Incorrect file format. File must begin with \" + FACTORYPATH_TAG); //$NON-NLS-1$", "-\t\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_ioException, e));", "-\t\t}", "-\t\tNodeList nodes = fpElement.getElementsByTagName(FACTORYPATH_ENTRY_TAG);", "-\t\tfor (int i=0; i < nodes.getLength(); i++) {", "-\t\t\tNode node = nodes.item(i);", "-\t\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {", "-\t\t\t\tElement element = (Element)node;", "-\t\t\t\tString kindString = element.getAttribute(KIND);", "-\t\t\t\t// deprecated container type \"JAR\" is now \"EXTJAR\"", "-\t\t\t\tif (\"JAR\".equals(kindString)) { //$NON-NLS-1$", "-\t\t\t\t\tkindString = \"EXTJAR\"; //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tString idString = element.getAttribute(ID);", "-\t\t\t\tString enabledString = element.getAttribute(ENABLED);", "-\t\t\t\tFactoryType kind = FactoryType.valueOf(kindString);", "-\t\t\t\tFactoryContainer container = null;", "-\t\t\t\tswitch (kind) {", "-\t\t\t\t", "-\t\t\t\tcase WKSPJAR :", "-\t\t\t\t\tcontainer = FactoryPath.newWkspJarFactoryContainer(new Path(idString));", "-\t\t\t\t\tbreak;", "-\t\t\t\t\t", "-\t\t\t\tcase EXTJAR :", "-\t\t\t\t\tcontainer = FactoryPath.newExtJarFactoryContainer(new File(idString));", "-\t\t\t\t\tbreak;", "-\t\t\t\t\t", "-\t\t\t\tcase VARJAR :", "-\t\t\t\t\tcontainer = FactoryPath.newVarJarFactoryContainer(new Path(idString));", "-\t\t\t\t\tbreak;", "-\t\t\t\t", "-\t\t\t\tcase PLUGIN :", "-\t\t\t\t\tcontainer = FactoryPath.getPluginFactoryContainer(idString);", "-\t\t\t\t\tbreak;", "-\t\t\t\t\t", "-\t\t\t\tdefault :", "-\t\t\t\t\tthrow new IllegalStateException(\"Unrecognized kind: \" + kind + \". Original string: \" + kindString); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tif (null != container) {", "-\t\t\t\t\tresult.put(container, new Boolean(enabledString));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\treturn result;", "+", "+\tpublic static Map<FactoryContainer, FactoryPath.Attributes> decodeFactoryPath(final String xmlFactoryPath) ", "+\tthrows CoreException", "+{", "+\tMap<FactoryContainer, FactoryPath.Attributes> result = new LinkedHashMap<FactoryContainer, FactoryPath.Attributes>();", "+\tStringReader reader = new StringReader(xmlFactoryPath);", "+\tElement fpElement = null;", "+\t", "+\ttry {", "+\t\tDocumentBuilder parser = ", "+\t\t\tDocumentBuilderFactory.newInstance().newDocumentBuilder();", "+\t\tfpElement = parser.parse(new InputSource(reader)).getDocumentElement();", "+\t\t", "+\t}", "+\tcatch (IOException e) {", "+\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_ioException, e));", "+\t}", "+\tcatch (SAXException e) {", "+\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_couldNotParse, e));", "+\t}", "+\tcatch (ParserConfigurationException e) {", "+\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_parserConfigError, e));", "+\t}", "+\tfinally {", "+\t\treader.close();", "+\t}", "+\t", "+\tif (!fpElement.getNodeName().equalsIgnoreCase(FACTORYPATH_TAG)) {", "+\t\tIOException e = new IOException(\"Incorrect file format. File must begin with \" + FACTORYPATH_TAG); //$NON-NLS-1$", "+\t\tthrow new CoreException(new Status(IStatus.ERROR, AptPlugin.PLUGIN_ID, -1, Messages.FactoryPathUtil_status_ioException, e));", "+\t}", "+\tNodeList nodes = fpElement.getElementsByTagName(FACTORYPATH_ENTRY_TAG);", "+\tfor (int i=0; i < nodes.getLength(); i++) {", "+\t\tNode node = nodes.item(i);", "+\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {", "+\t\t\tElement element = (Element)node;", "+\t\t\tString kindString = element.getAttribute(KIND);", "+\t\t\t// deprecated container type \"JAR\" is now \"EXTJAR\"", "+\t\t\tif (\"JAR\".equals(kindString)) { //$NON-NLS-1$", "+\t\t\t\tkindString = \"EXTJAR\"; //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tString idString = element.getAttribute(ID);", "+\t\t\tString enabledString = element.getAttribute(ENABLED);", "+\t\t\tString runInAptModeString = element.getAttribute(RUN_IN_BATCH_MODE); ", "+\t\t\tFactoryType kind = FactoryType.valueOf(kindString);", "+\t\t\tFactoryContainer container = null;", "+\t\t\tswitch (kind) {", "+\t\t\t", "+\t\t\tcase WKSPJAR :", "+\t\t\t\tcontainer = newWkspJarFactoryContainer(new Path(idString));", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tcase EXTJAR :", "+\t\t\t\tcontainer = newExtJarFactoryContainer(new File(idString));", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tcase VARJAR :", "+\t\t\t\tcontainer = newVarJarFactoryContainer(new Path(idString));", "+\t\t\t\tbreak;", "+\t\t\t", "+\t\t\tcase PLUGIN :", "+\t\t\t\tcontainer = getPluginFactoryContainer(idString);", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tdefault :", "+\t\t\t\tthrow new IllegalStateException(\"Unrecognized kind: \" + kind + \". Original string: \" + kindString); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (null != container) {", "+\t\t\t\tFactoryPath.Attributes a = new FactoryPath.Attributes( ", "+\t\t\t\t\t\tBoolean.parseBoolean(enabledString), Boolean.parseBoolean(runInAptModeString));", "+\t\t\t\tresult.put(container, a);", "+\t\t\t}", "+\t\t}", "+\t}", "+\t", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1db9001b8d5c2ad14f448792b0e864a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java", "commitBeforeChange": "14e234724f203a6fef415e43d34432d323b84ca1", "commitAfterChange": "66e076adb0340dce3dd9bba5c2d65608184b470b", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " protected void consumeClassDeclaration()", "signatureAfterChange": " protected void consumeClassDeclaration()", "diff": ["-\tif (this.astPtr >= 0 && this.astStack[this.astPtr] instanceof TypeDeclaration) {", "-\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) this.astStack[this.astPtr];", "+\tif (this.astPtr >= 0) {", "+\t\tint length = this.astLengthStack[this.astLengthPtr];", "+\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) this.astStack[this.astPtr-length];", "+\t\tCompletionJavadocParser completionJavadocParser = (CompletionJavadocParser)this.javadocParser;", "+\t\tcompletionJavadocParser.allPossibleTags = true;", "-\t\t\t// completion is in an orphan javadoc comment => replace type declaration one with it to allow completion resolution", "+\t\t\t// completion is in an orphan javadoc comment => replace in last read declaration to allow completion resolution", "+\t\tcompletionJavadocParser.allPossibleTags = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee4dd75e9a91af53665e7487f59eeb19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DiscardWorkingCopyOperation.java", "commitBeforeChange": "ec455405a83bfb36b65a1594dcc37928d4b0bc3b", "commitAfterChange": "79b8d8f9507454c772f9092ea04ba032447d4b59", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\tint useCount = JavaModelManager.getJavaModelManager().discardPerWorkingCopyInfo(workingCopy);", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tint useCount = manager.discardPerWorkingCopyInfo(workingCopy);", "+\t\t\tIJavaProject javaProject = workingCopy.getJavaProject();", "+\t\t\tif (ExternalJavaProject.EXTERNAL_PROJECT_NAME.equals(javaProject.getElementName()))", "+\t\t\t\tmanager.removePerProjectInfo((JavaProject) javaProject);", "-\t\t\t\tJavaElementDelta delta = new JavaElementDelta(this.getJavaModel());", "+\t\t\t\tJavaElementDelta delta = new JavaElementDelta(getJavaModel());", "-\t\t\t\t\tJavaElementDelta delta = new JavaElementDelta(this.getJavaModel());", "+\t\t\t\t\tJavaElementDelta delta = new JavaElementDelta(getJavaModel());", "-\t\t\t\t\tJavaElementDelta delta = new JavaElementDelta(this.getJavaModel());", "+\t\t\t\t\tJavaElementDelta delta = new JavaElementDelta(getJavaModel());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd760a7232ffeff8a987b3a1fc7907df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "6c16279776a9d4d3bb77771278cb12f54d9affa3", "commitAfterChange": "bc7a22c71b140b80201d8c50a10c85725952881d", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError, \t\tboolean returnResolutionInProgress) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError, \t\tboolean returnResolutionInProgress) \t\tthrows JavaModelException", "diff": ["+\t    JavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\t\t\tif (infoPath != null && (returnResolutionInProgress || infoPath != RESOLUTION_IN_PROGRESS)) {", "-\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE) {", "-\t\t\t\t\t\tif (infoPath == RESOLUTION_IN_PROGRESS) {", "-\t\t\t\t\t\t    Util.verbose(\"CPResolution: Reentering Raw Classpath Resolution for project: \"+ this.getElementName() + \"\\n  will use empty classpath instead\");  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\t\t    new Exception(\"TRACE OF REENTERING CALL\").printStackTrace(System.out);  //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\tif (infoPath != null) {", "+\t\t\t\t} else if  (returnResolutionInProgress && manager.isClasspathBeingResolved(this)) {", "+\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE) {", "+\t\t\t\t\t\tUtil.verbose(", "+\t\t\t\t\t\t\t\"CPResolution: reentering raw classpath resolution, will use empty classpath instead\" + //$NON-NLS-1$", "+\t\t\t\t\t\t\t\"\tproject: \" + getElementName() + '\\n' + //$NON-NLS-1$", "+\t\t\t\t\t\t\t\"\tinvocation stack trace:\"); //$NON-NLS-1$", "+\t\t\t\t\t\tnew Exception(\"<Fake exception>\").printStackTrace(System.out); //$NON-NLS-1$", "+\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t    return RESOLUTION_IN_PROGRESS;", "-\t\t\tif (nullOldResolvedCP) perProjectInfo.resolvedClasspath = RESOLUTION_IN_PROGRESS;", "+\t\t\tif (nullOldResolvedCP) manager.setClasspathBeingResolved(this, true);", "+\t\t\tmanager.setClasspathBeingResolved(this, false);"]}], "num": 43342}
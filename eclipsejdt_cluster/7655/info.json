{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5be70db77976f76a145a1262c5452bdc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "762cbb2a42eb64946739b17d1613e299", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 23, "signatureBeforeChange": "     \tprivate EndingOffsetFinder(int[] offsets)", "signatureAfterChange": " \t \tprivate CompilationUnit[] createASTsFrom(ICompilationParticipantResult[] cpResults)", "diff": ["-    \t */", "-    \tprivate EndingOffsetFinder(int[] offsets)", "-    \t{", "-    \t\tif(offsets == null)", "-    \t\t\tthrow new IllegalArgumentException(\"argument cannot be null.\"); //$NON-NLS-1$", "-    \t\t// sort the array first", "-    \t\tArrays.sort(offsets);", "-    \t", "-    \t\t// look for duplicates.\t\t", "-    \t\tint count = 0;\t", "-    \t\tfor( int i=0, len=offsets.length; i<len; i++){", "-    \t\t\tif( i == 0 ) ; // do nothing\t\t\t\t", "-    \t\t\telse if( offsets[i-1] == offsets[i] )", "-    \t\t\t\tcontinue;\t\t\t", "-    \t\t\tcount ++;", "-    \t\t}\t", "-    \t", "-    \t\tif( count != offsets.length ){", "-    \t\t\t_sortedStartingOffset = new int[count];", "-    \t", "-    \t\t\tint index = 0;", "-    \t\t\tfor( int i=0, len=offsets.length; i<len; i++){", "-    \t\t\t\tif( i != 0 && offsets[i-1] == offsets[i] )", "-    \t\t\t\t\tcontinue;", "-    \t\t\t\t_sortedStartingOffset[index++] = offsets[i];", "-    \t\t\t}\t\t", "-    \t\t}", "-    \t\telse{", "-    \t\t\t_sortedStartingOffset = offsets;", "-    \t\t}", "-    \t\t", "-    \t\t_endingOffsets = new int[count];", "-    \t\tfor( int i=0; i<count; i++ )", "-    \t\t\t_endingOffsets[i] = 0;", "-    \t}", "+\tprivate CompilationUnit[] createASTsFrom(ICompilationParticipantResult[] cpResults){", "+\t\tfinal int size = cpResults.length;", "+\t\tfinal IFile[] files = new IFile[size];", "+\t\tint i=0;", "+\t\tfor( ICompilationParticipantResult cpResult : cpResults )", "+\t\t\tfiles[i++] = cpResult.getFile();", "+\t\treturn createASTsFrom(files);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7b82937454a5beed5320f394e293f82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "7065da01531bf4c318c59206b62aa1503a948abe", "commitAfterChange": "0d303c13e0085d7aef9947e46f37c617f206a066", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static CompilationUnitDeclaration buildCompilationUnit( \t\tISourceType[] sourceTypes, \t\tboolean needFieldsAndMethods, \t\tboolean needMemberTypes, \t\tProblemReporter problemReporter, \t\tCompilationResult compilationResult)", "signatureAfterChange": " \tpublic static CompilationUnitDeclaration buildCompilationUnit( \t\tISourceType[] sourceTypes, \t\tboolean needFieldsAndMethods, \t\tboolean needMemberTypes, \t\tboolean needFieldInitialization, \t\tProblemReporter problemReporter, \t\tCompilationResult compilationResult)", "diff": ["+\t\tboolean needFieldInitialization,", "+\t\t\t", "+\t\treturn ", "+\t\t\tnew SourceTypeConverter(needFieldInitialization, problemReporter).convert(", "+\t\t\t\tsourceTypes, ", "+\t\t\t\tneedFieldsAndMethods,", "+\t\t\t\tneedMemberTypes,", "+\t\t\t\tcompilationResult);", "+\t}", "-\t\tCompilationUnitDeclaration compilationUnit =", "-\t\t\tnew CompilationUnitDeclaration(problemReporter, compilationResult, 0);", "-\t\t\tcompilationUnit.currentPackage =", "-\t\tcompilationUnit.imports = new ImportReference[importCount];", "-\t\t\tcompilationUnit.imports[i] = createImportReference(importNames[i], start, end);", "-\t\tcompilationUnit.types = new TypeDeclaration[typeCount];", "-\t\t\tcompilationUnit.types[i] =", "-\t\treturn compilationUnit;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa76def2cd81f9dc10372f41fa073d2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HandleFactory.java", "commitBeforeChange": "287a8246425dec3b8e6cdd428f661326776e45cd", "commitAfterChange": "058b7e49b52c7b18f15a01083d7620b3d5aa8490", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic IJavaElement createElement(final ASTNode toBeFound, CompilationUnitDeclaration parsedUnit, Openable openable)", "signatureAfterChange": " \tpublic IJavaElement createElement(ClassScope scope, ICompilationUnit unit, HashSet existingElements, HashMap knownScopes)", "diff": ["-\t */", "-\tpublic IJavaElement createElement(final ASTNode toBeFound, CompilationUnitDeclaration parsedUnit, Openable openable) {", "-\t\tclass EndVisit extends RuntimeException {", "-\t\t\t// marker to stop traversing ast", "-\t\t\tprivate static final long serialVersionUID = 7264372508108115988L; // backward compatible", "-\t\t}", "-\t\tclass Visitor extends ASTVisitor {", "-\t\t    ASTNode[] nodeStack = new ASTNode[10];", "-\t\t    int nodeIndex = -1;", "-\t\t\t", "-\t\t    public void push(ASTNode node) {", "-\t\t    \tif (++this.nodeIndex >= this.nodeStack.length) ", "-\t\t            System.arraycopy(this.nodeStack, 0, this.nodeStack = new ASTNode[this.nodeStack.length*2], 0, this.nodeIndex);", "-\t            this.nodeStack[this.nodeIndex] = node;", "-\t\t    }", "-\t\t    ", "-\t\t    public void pop(ASTNode node) {", "-\t\t    \twhile (this.nodeIndex >= 0 && this.nodeStack[this.nodeIndex--] != node){/*empty*/}", "-\t\t    }", "-\t\t    ", "-\t\t\tpublic boolean visit(Argument node, BlockScope scope) {", "-\t\t\t    push(node);", "-\t\t\t\tif (node == toBeFound) throw new EndVisit();", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tpublic void endVisit(Argument node, BlockScope scope) {", "-\t\t\t    pop(node);", "-            }", "-", "-\t\t\tpublic boolean visit(ConstructorDeclaration node, ClassScope scope) {", "-\t\t\t    push(node);", "-\t\t\t\tif (node == toBeFound) throw new EndVisit();", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tpublic void endVisit(ConstructorDeclaration node, ClassScope scope) {", "-\t\t\t\tpop(node);", "-\t\t\t}", "-\t\t\t", "-\t\t\tpublic boolean visit(FieldDeclaration node, MethodScope scope) {", "-\t\t\t    push(node);", "-\t\t\t\tif (node == toBeFound) throw new EndVisit();", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tpublic void endVisit(FieldDeclaration node, MethodScope scope) {", "-\t\t\t    pop(node);", "-\t\t\t}", "-", "-\t\t\tpublic boolean visit(Initializer node, MethodScope scope) {", "-\t\t\t    push(node);", "-\t\t\t\tif (node == toBeFound) throw new EndVisit();", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\t// don't pop initializers (used to count how many occurrences are in the type)", "-", "-\t\t\tpublic boolean visit(LocalDeclaration node, BlockScope scope) {", "-\t\t\t    push(node);", "-\t\t\t\tif (node == toBeFound) throw new EndVisit();", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tpublic void endVisit(LocalDeclaration node, BlockScope scope) {", "-\t\t\t    pop(node);", "-            }", "-", "-\t\t\tpublic boolean visit(TypeDeclaration node, BlockScope scope) {", "-\t\t\t    push(node);", "-\t\t\t\tif (node == toBeFound) throw new EndVisit();", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tpublic void endVisit(TypeDeclaration node, BlockScope scope) {", "-\t\t\t\tif ((node.bits & ASTNode.IsMemberTypeMASK) != 0) {", "-\t\t\t\t    pop(node);", "-\t\t\t\t}", "-\t\t\t\t// don't pop local/anonymous types (used to count how many occurrences are in the method)", "-\t\t\t}", "-", "-\t\t\tpublic boolean visit(TypeDeclaration node, ClassScope scope) {", "-\t\t\t    push(node);", "-\t\t\t\tif (node == toBeFound) throw new EndVisit();", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tpublic void endVisit(TypeDeclaration node, ClassScope scope) {", "-\t\t\t\tif ((node.bits & ASTNode.IsMemberTypeMASK) != 0) {", "-\t\t\t\t    pop(node);", "-\t\t\t\t}", "-\t\t\t\t// don't pop local/anonymous types (used to count how many occurrences are in the initializer)", "-\t\t\t}", "-\t\t\t\t\t\t", "-\t\t\tpublic boolean visit(MethodDeclaration node, ClassScope scope) {", "-\t\t\t    push(node);", "-\t\t\t\tif (node == toBeFound) throw new EndVisit();", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tpublic void endVisit(MethodDeclaration node, ClassScope scope) {", "-\t\t\t\tpop(node);", "-\t\t\t}", "-\t\t\t", "-\t\t\tpublic boolean visit(TypeDeclaration node, CompilationUnitScope scope) {", "-\t\t\t    push(node);", "-\t\t\t\tif (node == toBeFound) throw new EndVisit();", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tpublic void endVisit(TypeDeclaration node, CompilationUnitScope scope) {", "-\t\t\t\tpop(node);", "-\t\t\t}", "-\t\t}", "-\t\tVisitor visitor = new Visitor();", "-\t\ttry {", "-\t\t\tparsedUnit.traverse(visitor, parsedUnit.scope);", "-\t\t} catch (EndVisit e) {", "-\t\t    ASTNode[] nodeStack = visitor.nodeStack;", "-\t\t    int end = visitor.nodeIndex;", "-\t\t    int start = 0;", "-\t\t    ", "-\t\t    // find the inner most type declaration if binary type", "-\t\t    ASTNode typeDecl = null;", "-\t\t    if (openable instanceof ClassFile) {", "-\t\t\t\tfor (int i = end; i >= 0; i--) {", "-\t\t\t\t    if (nodeStack[i] instanceof TypeDeclaration) {", "-\t\t\t\t        typeDecl = nodeStack[i];", "-\t\t\t\t        start = i;", "-\t\t\t\t        break;", "-\t\t\t\t    }", "-\t\t\t\t}", "-\t\t    }", "-\t\t\t", "-\t\t\t// find the openable corresponding to this type declaration", "-\t\t\tif (typeDecl != null) {", "-\t\t\t    openable = getOpenable(typeDecl, openable);", "-\t\t\t}", "-\t\t\t", "-\t\t\treturn createElement(nodeStack, start, end, openable);", "-\t\t}", "-\t\treturn null;", "-\t}"]}], "num": 7655}
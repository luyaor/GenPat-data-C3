{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2cc3191ebb431181322e3ee24bcb2fde", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84dab03aead8a1de9addf7b79e6ab3d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IfStatement.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t// generate boolean condition", "-\t\tthis.condition.generateOptimizedBoolean(", "-\t\t\tcurrentScope,", "-\t\t\tcodeStream,", "-\t\t\tnull,", "-\t\t\thasElsePart ? (falseLabel = new BranchLabel(codeStream)) : endifLabel,", "-\t\t\ttrue/*cst == Constant.NotAConstant*/);", "+\t\t// generate boolean condition only if needed", "+\t\tif (cst != Constant.NotAConstant && cst.booleanValue() == true) {", "+\t\t\t// No need to generate if condition statement when we know that only the then action", "+\t\t\t// will be executed", "+\t\t\tthis.condition.generateCode(currentScope, codeStream, false);", "+\t\t} else {", "+\t\t\tthis.condition.generateOptimizedBoolean(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tcodeStream,", "+\t\t\t\tnull,", "+\t\t\t\thasElsePart ? (falseLabel = new BranchLabel(codeStream)) : endifLabel,", "+\t\t\t\ttrue/*cst == Constant.NotAConstant*/);", "+\t\t}", "-\t\t// generate boolean condition", "-\t\tthis.condition.generateOptimizedBoolean(", "-\t\t\tcurrentScope,", "-\t\t\tcodeStream,", "-\t\t\tendifLabel,", "-\t\t\tnull,", "-\t\t\ttrue/*cst == Constant.NotAConstant*/);", "+\t\t// generate boolean condition only if needed", "+\t\tif (cst != Constant.NotAConstant && cst.booleanValue() == false) {", "+\t\t\t// No need to generate if condition statement when we know that only the else action", "+\t\t\t// will be executed", "+\t\t\tthis.condition.generateCode(currentScope, codeStream, false);", "+\t\t} else {", "+\t\t\tthis.condition.generateOptimizedBoolean(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tcodeStream,", "+\t\t\t\tendifLabel,", "+\t\t\t\tnull,", "+\t\t\t\ttrue/*cst == Constant.NotAConstant*/);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbf47540c48540a69d24576a4f453101", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java", "commitBeforeChange": "15b0c36cf52521c62289eac551e0070a05f02d1e", "commitAfterChange": "0dc40a2b7305dcb95f5eb7b6afe75532653bb19e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "signatureAfterChange": "  \tprivate void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration)", "diff": ["-\t\t\t\tthis.requestor.acceptTypeParameter(", "-\t\t\t\t\tenclosingType.qualifiedPackageName(),", "-\t\t\t\t\tenclosingType.qualifiedSourceName(),", "-\t\t\t\t\ttypeVariableBinding.sourceName(),", "-\t\t\t\t\tfalse,", "-\t\t\t\t\tthis.actualSelectionStart,", "-\t\t\t\t\tthis.actualSelectionEnd);", "+\t\t\t\tif (isLocal(enclosingType) && this.requestor instanceof SelectionRequestor) {", "+\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalTypeParameter(typeVariableBinding);", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.requestor.acceptTypeParameter(", "+\t\t\t\t\t\tenclosingType.qualifiedPackageName(),", "+\t\t\t\t\t\tenclosingType.qualifiedSourceName(),", "+\t\t\t\t\t\ttypeVariableBinding.sourceName(),", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\t\tthis.actualSelectionEnd);", "+\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tthis.requestor.acceptMethodTypeParameter(", "-\t\t\t\t\tenclosingMethod.declaringClass.qualifiedPackageName(),", "-\t\t\t\t\tenclosingMethod.declaringClass.qualifiedSourceName(),", "-\t\t\t\t\tenclosingMethod.isConstructor()", "-\t\t\t\t\t\t\t? enclosingMethod.declaringClass.sourceName()", "-\t\t\t\t\t\t\t: enclosingMethod.selector,", "-\t\t\t\t\tenclosingMethod.sourceStart(),", "-\t\t\t\t\tenclosingMethod.sourceEnd(),", "-\t\t\t\t\ttypeVariableBinding.sourceName(),", "-\t\t\t\t\tfalse,", "-\t\t\t\t\tthis.actualSelectionStart,", "-\t\t\t\t\tthis.actualSelectionEnd);", "+\t\t\t\tif (isLocal(enclosingMethod.declaringClass) && this.requestor instanceof SelectionRequestor) {", "+\t\t\t\t\t((SelectionRequestor)this.requestor).acceptLocalMethodTypeParameter(typeVariableBinding);", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.requestor.acceptMethodTypeParameter(", "+\t\t\t\t\t\tenclosingMethod.declaringClass.qualifiedPackageName(),", "+\t\t\t\t\t\tenclosingMethod.declaringClass.qualifiedSourceName(),", "+\t\t\t\t\t\tenclosingMethod.isConstructor()", "+\t\t\t\t\t\t\t\t? enclosingMethod.declaringClass.sourceName()", "+\t\t\t\t\t\t\t\t: enclosingMethod.selector,", "+\t\t\t\t\t\tenclosingMethod.sourceStart(),", "+\t\t\t\t\t\tenclosingMethod.sourceEnd(),", "+\t\t\t\t\t\ttypeVariableBinding.sourceName(),", "+\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\tthis.actualSelectionStart,", "+\t\t\t\t\t\tthis.actualSelectionEnd);", "+\t\t\t\t}"]}], "num": 4315}
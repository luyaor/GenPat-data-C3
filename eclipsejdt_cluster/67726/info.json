{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e4da570214dc8e12540e7bacd7af9ea", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51afca06f1aba1a2e1dd3d8db617fe5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "aabd59e4934a861167bc5ad69597bc9fd97e06dc", "commitAfterChange": "4ed2786f22dd00c9c1f7773433c3548c8c0f6fc3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public void test001()", "signatureAfterChange": " protected void runNegativeReferenceTest(String[] testFiles, String expected)", "diff": ["-public void test001() { ", "-\tMap customOptions = getCompilerOptions();", "-\tcustomOptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.ERROR);", "-\tthis.runNegativeTest(", "-\t\t\t\"X.java\",", "-\t\t\t\"public class X {\\n\" + ", "-\t\t\t\"\t\\n\" + ", "-\t\t\t\"\t{\\n\" + ", "-\t\t\t\"\t\tnew Z().foo();\\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"}\\n\",", "-\t\t\t\"Z.java\",", "-\t\t\t\"public class Z {\\n\" + ", "-\t\t\t\"  /** \\n\"+", "-\t\t\t\"   * \\n\"+", "-\t\t\t\"   * ** \f  ** ** ** @deprecated */\\n\" +", "-\t\t\t\"\tpublic void foo() { \\n\" + ", "-\t\t\t\"\t}\\n\" + ", "-\t\t\t\"}\\n\",", "-\t\t},", "-\t\t\"----------\\n\" + ", "-\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\"\tnew Z().foo();\\n\" + ", "-\t\t\"\t^^^^^^^^^^^^^\\n\" + ", "-\t\t\"The method foo() from the type Z is deprecated\\n\" + ", "-\t\t\"----------\\n\");", "+}", "+protected void runNegativeReferenceTest(String[] testFiles, String expected) {", "+\tString[] completedFiles = testFiles;", "+\tif (!useLibrary) {", "+\t\tcompletedFiles = new String[testFiles.length + referencedClasses.length];", "+\t\tSystem.arraycopy(referencedClasses, 0, completedFiles, 0, referencedClasses.length);", "+\t\tSystem.arraycopy(testFiles, 0, completedFiles, referencedClasses.length, testFiles.length);", "+\t}", "+\trunNegativeTest(completedFiles, expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc7eb1b5f80fc0d6f232a3d9bfa88049", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "33b6ddc355225393e9c9a4c6f58c7187e9dd64c0", "commitAfterChange": "ac5139f97b2ef313a03ae57144bf0ffdd5bcb6f8", "methodNumberBeforeChange": 1082, "methodNumberAfterChange": 1082, "signatureBeforeChange": " public void test1054()", "signatureAfterChange": " public void test1054()", "diff": ["+\tMap customOptions = getCompilerOptions();", "+\t// check no unsafe type operation problem is issued", "+\tcustomOptions.put(CompilerOptions.OPTION_ReportUncheckedTypeOperation, CompilerOptions.IGNORE);", "+\tcustomOptions.put(CompilerOptions.OPTION_ReportRawTypeReference, CompilerOptions.IGNORE);", "-\t\t\"1. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\"\tClass clazz= X.class;\\n\" + ", "-\t\t\"\t^^^^^\\n\" + ", "-\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "-\t\t\"\tBar bar= clazz.getAnnotation(Bar.class);\\n\" + ", "-\t\t\"\t         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type safety: The method getAnnotation(Class) belongs to the raw type Class. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 11)\\n\" + ", "-\t", "-\tif (isJRELevel(AbstractCompilerTest.F_1_6|AbstractCompilerTest.F_1_7)) {", "-\t\texpectedOutput =", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"\tClass clazz= X.class;\\n\" + ", "-\t\t\t\"\t^^^^^\\n\" + ", "-\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tBar bar= clazz.getAnnotation(Bar.class);\\n\" + ", "-\t\t\t\"\t         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method getAnnotation(Class) belongs to the raw type Class. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tBar bar= clazz.getAnnotation(Bar.class);\\n\" + ", "-\t\t\t\"\t         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type mismatch: cannot convert from Annotation to Bar\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"\tMethod method= clazz.getMethod(\\\"bar\\\");\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Type safety: The method getMethod(String, Class...) belongs to the raw type Class. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\";", "-\t}", "-\t\t}, ", "-\t\texpectedOutput);", "+\t\t},", "+\t\texpectedOutput,", "+\t\tnull,", "+\t\ttrue,", "+\t\tcustomOptions);"]}], "num": 67726}
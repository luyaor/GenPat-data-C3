{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19dc2986f6e40a30ac98c784363c51c1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f80e2c20a4966d370adcf27aeee0a4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "da3abb814c31b6e1c2d43312de494af316e19273", "commitAfterChange": "8af0e3d96f10bb27360a77bbd330487cf3fdc8dd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tprotected boolean commentParse(int javadocStart, int javadocEnd)", "diff": ["-\tprotected boolean parseComment(int javadocStart, int javadocEnd) {", "+\tprotected boolean commentParse(int javadocStart, int javadocEnd) {", "-\t\t\t\t\t\tboolean valid = false;", "-\t\t\t\t\t\t// Start tag parsing only if we have a java identifier start character and if we are on line beginning or at inline tag beginning", "+\t\t\t\t\t\t// Start tag parsing only if we are on line beginning or at inline tag beginning", "-\t\t\t\t\t\t\t\tint token = readTokenAndConsume();", "-\t\t\t\t\t\t\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "-\t\t\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\t\t\t\t\tchar[] tag = this.scanner.getCurrentIdentifierSource(); // first token is either an identifier or a keyword", "-\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "-\t\t\t\t\t\t\t\t\t// For DOM parser, try to get tag name other than java identifier", "-\t\t\t\t\t\t\t\t\t// (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51660)", "-\t\t\t\t\t\t\t\t\tint tk = token;", "-\t\t\t\t\t\t\t\t\tint le = this.lineEnd;", "-\t\t\t\t\t\t\t\t\tchar pc = peekChar();", "-\t\t\t\t\t\t\t\t\ttagNameToken: while (tk != TerminalTokens.TokenNameEOF) {", "-\t\t\t\t\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\t\t\t\t\t\t\ttoken = tk;", "-\t\t\t\t\t\t\t\t\t\t// !, \", #, %, &, ', -, :, <, >, * chars and spaces are not allowed in tag names", "-\t\t\t\t\t\t\t\t\t\tswitch (pc) {", "-\t\t\t\t\t\t\t\t\t\t\tcase '}':", "-\t\t\t\t\t\t\t\t\t\t\tcase '!':", "-\t\t\t\t\t\t\t\t\t\t\tcase '#':", "-\t\t\t\t\t\t\t\t\t\t\tcase '%':", "-\t\t\t\t\t\t\t\t\t\t\tcase '&':", "-\t\t\t\t\t\t\t\t\t\t\tcase '\\'':", "-\t\t\t\t\t\t\t\t\t\t\tcase ':':", "-\t\t\t\t\t\t\t\t\t\t\t// case '-': allowed in tag names as this character is often used in doclets (bug 68087)", "-\t\t\t\t\t\t\t\t\t\t\tcase '<':", "-\t\t\t\t\t\t\t\t\t\t\tcase '>':", "-\t\t\t\t\t\t\t\t\t\t\tcase '*': // break for '*' as this is perhaps the end of comment (bug 65288)", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak tagNameToken;", "-\t\t\t\t\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\t\t\t\t\tif (pc == ' ' || Character.isWhitespace(pc)) break tagNameToken;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\ttk = readTokenAndConsume();", "-\t\t\t\t\t\t\t\t\t\tpc = peekChar();", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tint length = this.tagSourceEnd-this.tagSourceStart+1;", "-\t\t\t\t\t\t\t\t\ttag = new char[length];", "-\t\t\t\t\t\t\t\t\tSystem.arraycopy(this.source, this.tagSourceStart, tag, 0, length);", "-\t\t\t\t\t\t\t\t\tthis.index = this.tagSourceEnd+1;", "-\t\t\t\t\t\t\t\t\tthis.scanner.currentPosition = this.tagSourceEnd+1;", "-\t\t\t\t\t\t\t\t\tthis.tagSourceStart = previousPosition;", "-\t\t\t\t\t\t\t\t\tthis.lineEnd = le;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tswitch (token) {", "-\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "-\t\t\t\t\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "-\t\t\t\t\t\t\t\t\t\t\tthis.deprecated = true;", "-\t\t\t\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "-\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = true;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_INHERITDOC)) {", "-\t\t\t\t\t\t\t\t\t\t\t// inhibits inherited flag when tags have been already stored", "-\t\t\t\t\t\t\t\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51606", "-\t\t\t\t\t\t\t\t\t\t\t// Note that for DOM_PARSER, nodes stack may be not empty even no '@' tag", "-\t\t\t\t\t\t\t\t\t\t\t// was encountered in comment. But it cannot be the case for COMPILER_PARSER", "-\t\t\t\t\t\t\t\t\t\t\t// and so is enough as it is only this parser which signals the missing tag warnings...", "-\t\t\t\t\t\t\t\t\t\t\tthis.inherited = this.astPtr==-1;", "-\t\t\t\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "-\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = true;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_PARAM)) {", "-\t\t\t\t\t\t\t\t\t\t\tvalid = parseParam();", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_EXCEPTION)) {", "-\t\t\t\t\t\t\t\t\t\t\tvalid = parseThrows(false);", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_SEE)) {", "-\t\t\t\t\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "-\t\t\t\t\t\t\t\t\t\t\t\t// Cannot have @see inside inline comment", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = false;", "-\t\t\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null)", "-\t\t\t\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "-\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee(false);", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_LINK)) {", "-\t\t\t\t\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee(false);", "-\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "-\t\t\t\t\t\t\t\t\t\t\t\t// Cannot have @link outside inline comment", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = false;", "-\t\t\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null)", "-\t\t\t\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_LINKPLAIN)) {", "-\t\t\t\t\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee(true);", "-\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamereturn :", "-\t\t\t\t\t\t\t\t\t\tvalid = parseReturn();", "-\t\t\t\t\t\t\t\t\t\t// verify characters after return tag (we're expecting text description)", "-\t\t\t\t\t\t\t\t\t\tif(!verifyCharsAfterReturnTag(this.index)) {", "-\t\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null) {", "-\t\t\t\t\t\t\t\t\t\t\t\tint end = this.starPosition == -1 || this.lineEnd<this.starPosition ? this.lineEnd : this.starPosition;", "-\t\t\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocEmptyReturnTag(this.tagSourceStart, end);", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamethrows :", "-\t\t\t\t\t\t\t\t\t\tvalid = parseThrows(true);", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "-\t\t\t\t\t\t\t\t\t\t\tswitch (token) {", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameabstract:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameassert:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameboolean:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamebreak:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamebyte:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamecase:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamecatch:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamechar:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameclass:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamecontinue:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamedefault:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamedo:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamedouble:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameelse:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameextends:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamefalse:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamefinal:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamefinally:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamefloat:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamefor:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameif:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameimplements:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameimport:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameinstanceof:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameint:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameinterface:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamelong:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamenative:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamenew:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamenull:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamepackage:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameprivate:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameprotected:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamepublic:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameshort:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamestatic:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamestrictfp:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamesuper:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameswitch:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamesynchronized:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamethis:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamethrow:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNametransient:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNametrue:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNametry:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamevoid:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamevolatile:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamewhile:", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "-\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tthis.textStart = this.index;", "-\t\t\t\t\t\t\t\tif (!valid) {", "+\t\t\t\t\t\t\t\tif (!parseTag(previousPosition)) {", "-\t\t\t\t\t\t\t\t\t\tparseTag();", "+\t\t\t\t\t\t\t\t\t\tcreateTag();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aaac63b5aff066e1074aeb72c88bb8f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DocCommentParser.java", "commitBeforeChange": "da3abb814c31b6e1c2d43312de494af316e19273", "commitAfterChange": "8af0e3d96f10bb27360a77bbd330487cf3fdc8dd", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprotected boolean parseTag()", "signatureAfterChange": " \tprotected boolean parseTag(int previousPosition) throws InvalidInputException", "diff": ["-\tprotected boolean parseTag() {", "-\t\tTagElement tag = this.ast.newTagElement();", "-\t\tint start = this.tagSourceStart;", "-\t\ttag.setTagName(new String(this.source, start, this.tagSourceEnd-start+1));", "-\t\tif (this.inlineTagStarted) {", "-\t\t\tstart = this.inlineTagStart;", "-\t\t\tTagElement previousTag = null;", "-\t\t\tif (this.astPtr == -1) {", "-\t\t\t\tpreviousTag = this.ast.newTagElement();", "-\t\t\t\tpreviousTag.setSourceRange(start, this.tagSourceEnd-start+1);", "-\t\t\t\tpushOnAstStack(previousTag, true);", "-\t\t\t} else {", "-\t\t\t\tpreviousTag = (TagElement) this.astStack[this.astPtr];", "+\tprotected boolean parseTag(int previousPosition) throws InvalidInputException {", "+\t\t", "+\t\t// Read tag name", "+\t\tint token = readTokenAndConsume();", "+\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "+\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\tchar[] tag = this.scanner.getCurrentIdentifierSource(); // first token is either an identifier or a keyword", "+", "+\t\t// Try to get tag name other than java identifier", "+\t\t// (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51660)", "+\t\tint tk = token;", "+\t\tint le = this.lineEnd;", "+\t\tchar pc = peekChar();", "+\t\ttagNameToken: while (tk != TerminalTokens.TokenNameEOF) {", "+\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "+\t\t\ttoken = tk;", "+\t\t\t// !, \", #, %, &, ', -, :, <, >, * chars and spaces are not allowed in tag names", "+\t\t\tswitch (pc) {", "+\t\t\t\tcase '}':", "+\t\t\t\tcase '!':", "+\t\t\t\tcase '#':", "+\t\t\t\tcase '%':", "+\t\t\t\tcase '&':", "+\t\t\t\tcase '\\'':", "+\t\t\t\tcase '\"':", "+\t\t\t\tcase ':':", "+\t\t\t\t// case '-': allowed in tag names as this character is often used in doclets (bug 68087)", "+\t\t\t\tcase '<':", "+\t\t\t\tcase '>':", "+\t\t\t\tcase '*': // break for '*' as this is perhaps the end of comment (bug 65288)", "+\t\t\t\t\tbreak tagNameToken;", "+\t\t\t\tdefault:", "+\t\t\t\t\tif (pc == ' ' || Character.isWhitespace(pc)) break tagNameToken;", "-\t\t\tint previousStart = previousTag.getStartPosition();", "-\t\t\tpreviousTag.fragments().add(tag);", "-\t\t\tpreviousTag.setSourceRange(previousStart, this.tagSourceEnd-previousStart+1);", "-\t\t} else {", "-\t\t\tpushOnAstStack(tag, true);", "+\t\t\ttk = readTokenAndConsume();", "+\t\t\tpc = peekChar();", "-\t\ttag.setSourceRange(start, this.tagSourceEnd-start+1);", "-\t\treturn true;", "+\t\tint length = this.tagSourceEnd-this.tagSourceStart+1;", "+\t\ttag = new char[length];", "+\t\tSystem.arraycopy(this.source, this.tagSourceStart, tag, 0, length);", "+\t\tthis.index = this.tagSourceEnd+1;", "+\t\tthis.scanner.currentPosition = this.tagSourceEnd+1;", "+\t\tthis.tagSourceStart = previousPosition;", "+\t\tthis.lineEnd = le;", "+", "+\t\t// Decide which parse to perform depending on tag name", "+\t\tthis.tagValue = NO_TAG_VALUE;", "+\t\tboolean valid = true;", "+\t\tswitch (token) {", "+\t\t\tcase TerminalTokens.TokenNameIdentifier :", "+\t\t\t\tswitch (tag[0]) {", "+\t\t\t\t\tcase 'd':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "+\t\t\t\t\t\t\tthis.deprecated = true;", "+\t\t\t\t\t\t\tthis.tagValue = TAG_DEPRECATED_VALUE;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcreateTag();", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'i':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_INHERITDOC)) {", "+\t\t\t\t\t\t\t// inhibits inherited flag when tags have been already stored", "+\t\t\t\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51606", "+\t\t\t\t\t\t\t// Note that for DOM_PARSER, nodes stack may be not empty even no '@' tag", "+\t\t\t\t\t\t\t// was encountered in comment. But it cannot be the case for COMPILER_PARSER", "+\t\t\t\t\t\t\t// and so is enough as it is only this parser which signals the missing tag warnings...", "+\t\t\t\t\t\t\tthis.inherited = this.astPtr==-1;", "+\t\t\t\t\t\t\tthis.tagValue = TAG_INHERITDOC_VALUE;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcreateTag();", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'p':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_PARAM)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_PARAM_VALUE;", "+\t\t\t\t\t\t\tvalid = parseParam();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\t\t\t\tcreateTag();", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'e':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_EXCEPTION)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_EXCEPTION_VALUE;", "+\t\t\t\t\t\t\tvalid = parseThrows();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\t\t\t\tcreateTag();", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 's':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_SEE)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_SEE_VALUE;", "+\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "+\t\t\t\t\t\t\t\t// Cannot have @see inside inline comment", "+\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\t\t\t\tcreateTag();", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'l':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_LINK)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_LINK_VALUE;", "+\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_LINKPLAIN)) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_LINKPLAIN_VALUE;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (this.tagValue != NO_TAG_VALUE)  {", "+\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "+\t\t\t\t\t\t\t\t// Cannot have @link outside inline comment", "+\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\t\t\t\tcreateTag();", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 'v':", "+\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_VALUE) && this.ast.apiLevel() >= AST.JLS3) {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_VALUE_VALUE;", "+\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "+\t\t\t\t\t\t\t\tvalid = parseReference();", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tvalid = false;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\t\t\t\tcreateTag();", "+\t\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\t\t\tcreateTag();", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase TerminalTokens.TokenNamereturn :", "+\t\t\t\tthis.tagValue = TAG_RETURN_VALUE;", "+\t\t\t\tvalid = parseReturn();", "+\t\t\t\tbreak;", "+\t\t\tcase TerminalTokens.TokenNamethrows :", "+\t\t\t\tthis.tagValue = TAG_THROWS_VALUE;", "+\t\t\t\tvalid = parseThrows();", "+\t\t\t\tbreak;", "+\t\t\tcase TerminalTokens.TokenNameabstract:", "+\t\t\tcase TerminalTokens.TokenNameassert:", "+\t\t\tcase TerminalTokens.TokenNameboolean:", "+\t\t\tcase TerminalTokens.TokenNamebreak:", "+\t\t\tcase TerminalTokens.TokenNamebyte:", "+\t\t\tcase TerminalTokens.TokenNamecase:", "+\t\t\tcase TerminalTokens.TokenNamecatch:", "+\t\t\tcase TerminalTokens.TokenNamechar:", "+\t\t\tcase TerminalTokens.TokenNameclass:", "+\t\t\tcase TerminalTokens.TokenNamecontinue:", "+\t\t\tcase TerminalTokens.TokenNamedefault:", "+\t\t\tcase TerminalTokens.TokenNamedo:", "+\t\t\tcase TerminalTokens.TokenNamedouble:", "+\t\t\tcase TerminalTokens.TokenNameelse:", "+\t\t\tcase TerminalTokens.TokenNameextends:", "+\t\t\tcase TerminalTokens.TokenNamefalse:", "+\t\t\tcase TerminalTokens.TokenNamefinal:", "+\t\t\tcase TerminalTokens.TokenNamefinally:", "+\t\t\tcase TerminalTokens.TokenNamefloat:", "+\t\t\tcase TerminalTokens.TokenNamefor:", "+\t\t\tcase TerminalTokens.TokenNameif:", "+\t\t\tcase TerminalTokens.TokenNameimplements:", "+\t\t\tcase TerminalTokens.TokenNameimport:", "+\t\t\tcase TerminalTokens.TokenNameinstanceof:", "+\t\t\tcase TerminalTokens.TokenNameint:", "+\t\t\tcase TerminalTokens.TokenNameinterface:", "+\t\t\tcase TerminalTokens.TokenNamelong:", "+\t\t\tcase TerminalTokens.TokenNamenative:", "+\t\t\tcase TerminalTokens.TokenNamenew:", "+\t\t\tcase TerminalTokens.TokenNamenull:", "+\t\t\tcase TerminalTokens.TokenNamepackage:", "+\t\t\tcase TerminalTokens.TokenNameprivate:", "+\t\t\tcase TerminalTokens.TokenNameprotected:", "+\t\t\tcase TerminalTokens.TokenNamepublic:", "+\t\t\tcase TerminalTokens.TokenNameshort:", "+\t\t\tcase TerminalTokens.TokenNamestatic:", "+\t\t\tcase TerminalTokens.TokenNamestrictfp:", "+\t\t\tcase TerminalTokens.TokenNamesuper:", "+\t\t\tcase TerminalTokens.TokenNameswitch:", "+\t\t\tcase TerminalTokens.TokenNamesynchronized:", "+\t\t\tcase TerminalTokens.TokenNamethis:", "+\t\t\tcase TerminalTokens.TokenNamethrow:", "+\t\t\tcase TerminalTokens.TokenNametransient:", "+\t\t\tcase TerminalTokens.TokenNametrue:", "+\t\t\tcase TerminalTokens.TokenNametry:", "+\t\t\tcase TerminalTokens.TokenNamevoid:", "+\t\t\tcase TerminalTokens.TokenNamevolatile:", "+\t\t\tcase TerminalTokens.TokenNamewhile:", "+\t\t\t\tthis.tagValue = TAG_OTHERS_VALUE;", "+\t\t\t\tcreateTag();", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tthis.textStart = this.index;", "+\t\treturn valid;"]}], "num": 70750}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b4e1b9f5b14bf078e1e0d4fff9f54227", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "490cc4addd671448ec00dd2b1c7fe2aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "471c15cd43796bd63b4d1f53aca608e4822d5ab8", "commitAfterChange": "7a3ae46899cc014db3e6ff04c755844a7b20ac77", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic CopyResourceElementsOperation(IJavaElement[] resourcesToCopy, IJavaElement destContainer, boolean force)", "signatureAfterChange": " \tprotected ISchedulingRule getSchedulingRule()", "diff": ["-\t */", "-\tpublic CopyResourceElementsOperation(IJavaElement[] resourcesToCopy, IJavaElement destContainer, boolean force) {", "-\t\tthis(resourcesToCopy, new IJavaElement[]{destContainer}, force);", "-\t}", "+\tprotected ISchedulingRule getSchedulingRule() {", "+\t\tif (this.elementsToProcess == null)", "+\t\t\treturn null;", "+\t\tint length = this.elementsToProcess.length;", "+\t\tif (length == 1)", "+\t\t\treturn getSchedulingRule(this.elementsToProcess[0]);", "+\t\tISchedulingRule[] rules = new ISchedulingRule[length];", "+\t\tint index = 0;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tISchedulingRule rule = getSchedulingRule(this.elementsToProcess[i]);", "+\t\t\tif (rule != null) {", "+\t\t\t\trules[index++] = rule;", "+\t\t\t}", "+\t\t}", "+\t\tif (index != length)", "+\t\t\tSystem.arraycopy(rules, 0, rules = new ISchedulingRule[index], 0, index);", "+\t\treturn new MultiRule(rules);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae761fa1410ef8ffc76fdab560f145cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "7064f5cf4e1b20562054db6ff22e27e2bfde4008", "commitAfterChange": "c020688b25edf08bbc7d8d68981663ad78d2a9d8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tprivate static IFile[] getFilesToProcess(final IFile[] orig)", "signatureAfterChange": " \t \tprivate void filterFilesForProcessing(final IFile[] orig)", "diff": ["-\tprivate static IFile[] getFilesToProcess(final IFile[] orig)", "+\tprivate void filterFilesForProcessing(final IFile[] orig)", "-\t\tif( numFiles == 0 )", "-\t\t\treturn NO_FILES;", "+\t\tif( numFiles == 0 ){", "+\t\t\t_allFilesRequireProcessing = NO_FILES;", "+\t\t\t_remainingFiles = orig;", "+\t\t\treturn;", "+\t\t}", "-\t\tif( count == 0 )", "-\t\t\treturn NO_FILES;", "+\t\tif( count == 0 ){", "+\t\t\t_allFilesRequireProcessing = NO_FILES;", "+\t\t\t_remainingFiles = orig;", "+\t\t\treturn;", "+\t\t}", "-\t\tIFile[] filesToProcess = new IFile[count];", "-\t\tint index = 0;", "+\t\t_allFilesRequireProcessing = new IFile[count];", "+\t\t_remainingFiles = count == numFiles ? NO_FILES : new IFile[numFiles-count];", "+\t\tint pIndex = 0;", "+\t\tint rIndex = 0;", "-\t\t\t\tfilesToProcess[index++] = orig[i];", "+\t\t\t\t_allFilesRequireProcessing[pIndex++] = orig[i];", "+\t\t\telse", "+\t\t\t\t_remainingFiles[rIndex++] = orig[i];", "-\t\treturn filesToProcess;"]}], "num": 65459}
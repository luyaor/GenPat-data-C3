{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1402ada10b5f9b111abb7d1c94f219b9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec84943df9a9361e4ea940d3e258e0c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "85a51230859ba76a62ce4d566f4cbd47aac06488", "commitAfterChange": "3885d0327ef37626bb68aa8a0a9e1a4a5bb4ba7a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprivate void disassemble(IClassFileAttribute classFileAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": "  \tprivate void disassemble(IConstantPool constantPool, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["+\tprivate void disassemble(IConstantPool constantPool, StringBuffer buffer, String lineSeparator, int tabNumber) {", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber);", "+\t\tint length = constantPool.getConstantPoolCount();", "+\t\tbuffer.append(Util.bind(\"disassembler.constantpoolheader\")); //$NON-NLS-1$", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\tfor (int i = 1; i < length; i++) {", "+\t\t\tIConstantPoolEntry constantPoolEntry = constantPool.decodeEntry(i);", "+\t\t\tswitch (constantPool.getEntryKind(i)) {", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_Class :", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.class\", //$NON-NLS-1$", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\tInteger.toString(constantPoolEntry.getClassInfoNameIndex()),", "+\t\t\t\t\t\t\tnew String(constantPoolEntry.getClassInfoName())})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_Double :", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.double\", //$NON-NLS-1$", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\tDouble.toString(constantPoolEntry.getDoubleValue())})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_Fieldref :", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.fieldref\", //$NON-NLS-1$", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\tInteger.toString(constantPoolEntry.getClassIndex()),", "+\t\t\t\t\t\t\tInteger.toString(constantPoolEntry.getNameAndTypeIndex()),", "+\t\t\t\t\t\t\tnew String(constantPoolEntry.getClassName()),", "+\t\t\t\t\t\t\tgetFieldRefNameAndType(constantPoolEntry)})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_Float :", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.float\", //$NON-NLS-1$", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\tFloat.toString(constantPoolEntry.getFloatValue())})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_Integer :", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.integer\", //$NON-NLS-1$", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\tInteger.toString(constantPoolEntry.getIntegerValue())})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_InterfaceMethodref :", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.interfacemethodref\", //$NON-NLS-1$", "+\t\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\t\tInteger.toString(constantPoolEntry.getClassIndex()),", "+\t\t\t\t\t\t\t\tInteger.toString(constantPoolEntry.getNameAndTypeIndex()),", "+\t\t\t\t\t\t\t\tnew String(constantPoolEntry.getClassName()),", "+\t\t\t\t\t\t\t\tgetMethodRefNameAndType(constantPoolEntry)})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_Long :", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.long\", //$NON-NLS-1$", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\tLong.toString(constantPoolEntry.getLongValue())})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_Methodref :", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.methodref\", //$NON-NLS-1$", "+\t\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\t\tInteger.toString(constantPoolEntry.getClassIndex()),", "+\t\t\t\t\t\t\t\tInteger.toString(constantPoolEntry.getNameAndTypeIndex()),", "+\t\t\t\t\t\t\t\tnew String(constantPoolEntry.getClassName()),", "+\t\t\t\t\t\t\t\tgetMethodRefNameAndType(constantPoolEntry)})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_NameAndType :", "+\t\t\t\t\tint nameIndex = constantPoolEntry.getNameAndTypeInfoNameIndex();", "+\t\t\t\t\tint typeIndex = constantPoolEntry.getNameAndTypeInfoDescriptorIndex();", "+\t\t\t\t\tIConstantPoolEntry entry = constantPool.decodeEntry(nameIndex);", "+\t\t\t\t\tchar[] nameValue = (char[]) entry.getUtf8Value().clone();", "+\t\t\t\t\tentry = constantPool.decodeEntry(typeIndex);", "+\t\t\t\t\tchar[] typeValue = (char[])  entry.getUtf8Value().clone();", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.name_and_type\", //$NON-NLS-1$", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\tInteger.toString(nameIndex),", "+\t\t\t\t\t\t\tInteger.toString(typeIndex),", "+\t\t\t\t\t\t\tString.valueOf(nameValue),", "+\t\t\t\t\t\t\tString.valueOf(typeValue)})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_String :", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.string\", //$NON-NLS-1$", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\tInteger.toString(constantPoolEntry.getStringIndex()),", "+\t\t\t\t\t\t\tconstantPoolEntry.getStringValue()})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase IConstantPoolConstant.CONSTANT_Utf8 :", "+\t\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tUtil.bind(\"disassembler.constantpool.utf8\", //$NON-NLS-1$", "+\t\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\tInteger.toString(i),", "+\t\t\t\t\t\t\tnew String(constantPoolEntry.getUtf8Value())})); //$NON-NLS-1$", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif (i < length - 1) {", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f516b286249ebd53b7fddbcdbc78c854", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "51c6ca3e4dfed3078a1640da7a2ab7f26c899e0a", "commitAfterChange": "de8aa9940086fe152901aa168536f30670945804", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tprivate void disassemble(IAnnotationComponent annotationComponent, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": "  \tprivate void disassemble(IExtendedAnnotation extendedAnnotation, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["+\tprivate void disassemble(IExtendedAnnotation extendedAnnotation, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\tfinal int typeIndex = extendedAnnotation.getTypeIndex();", "+\t\tfinal char[] typeName = CharOperation.replaceOnCopy(extendedAnnotation.getTypeName(), '/', '.');", "+\t\tbuffer.append(", "+\t\t\tMessages.bind(Messages.disassembler_extendedannotationentrystart, new String[] {", "+\t\t\t\tInteger.toString(typeIndex),", "+\t\t\t\tnew String(returnClassName(Signature.toCharArray(typeName), '.', mode))", "+\t\t\t}));", "+\t\tfinal IAnnotationComponent[] components = extendedAnnotation.getComponents();", "+\t\tfor (int i = 0, max = components.length; i < max; i++) {", "+\t\t\tdisassemble(components[i], buffer, lineSeparator, tabNumber + 1, mode);", "+\t\t}", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "+\t\tint targetType = extendedAnnotation.getTargetType();", "+\t\tbuffer.append(", "+\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_targetType, new String[] {", "+\t\t\t\t\tInteger.toHexString(targetType),", "+\t\t\t\t\tgetTargetType(targetType),", "+\t\t\t\t}));", "+\t\tswitch(targetType) {", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_RECEIVER :", "+\t\t\tcase IExtendedAnnotationConstants.METHOD_RETURN_TYPE :", "+\t\t\tcase IExtendedAnnotationConstants.FIELD :", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "+\t\t}", "+\t\t", "+\t\tswitch(targetType) {", "+\t\t\tcase IExtendedAnnotationConstants.WILDCARD_BOUND :", "+\t\t\t\tint wildcardLocationType = extendedAnnotation.getWildcardLocationType();", "+\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocationtype, new String[] {", "+\t\t\t\t\t\t\tInteger.toString(wildcardLocationType),", "+\t\t\t\t\t\t\tgetTargetType(wildcardLocationType),", "+\t\t\t\t\t\t}));", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 3);", "+\t\t\t\tdisassembleTargetTypeContents(true, wildcardLocationType, extendedAnnotation, buffer, lineSeparator, tabNumber + 3, mode);", "+\t\t\t\tbreak;", "+\t\t\tcase IExtendedAnnotationConstants.WILDCARD_BOUND_GENERIC_OR_ARRAY :", "+\t\t\t\twildcardLocationType = extendedAnnotation.getWildcardLocationType();", "+\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_wildcardlocationtype, new String[] {", "+\t\t\t\t\t\t\tInteger.toString(wildcardLocationType),", "+\t\t\t\t\t\t\tgetTargetType(wildcardLocationType),", "+\t\t\t\t\t\t}));", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 3);", "+\t\t\t\tdisassembleTargetTypeContents(true, wildcardLocationType, extendedAnnotation, buffer, lineSeparator, tabNumber + 3, mode);", "+\t\t\t\twriteNewLine(buffer, lineSeparator, tabNumber + 2);", "+\t\t\t\tbuffer.append(", "+\t\t\t\t\t\tMessages.bind(Messages.disassembler_extendedannotation_locations, new String[] {", "+\t\t\t\t\t\t\ttoString(extendedAnnotation.getLocations()),", "+\t\t\t\t\t\t}));", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tdisassembleTargetTypeContents(false, targetType, extendedAnnotation, buffer, lineSeparator, tabNumber, mode);", "+\t\t}", "+\t\twriteNewLine(buffer, lineSeparator, tabNumber + 1);", "+\t\tbuffer.append(Messages.disassembler_extendedannotationentryend);", "+\t}"]}], "num": 38239}
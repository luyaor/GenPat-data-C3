{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ebc1b84a673d32e6cc2d73a0bae5ed7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56248052e78e8ccf338eb5c5f9056a05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceBuildTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void testPerfParserOneFile() throws InvalidInputException, IOException", "signatureAfterChange": " \tpublic void testParser() throws InvalidInputException, IOException", "diff": ["-\tpublic void testPerfParserOneFile() throws InvalidInputException, IOException {", "-\t\t// Do no longer print result in performance fingerprint", "-\t\ttagAsSummary(\"Compile>Parse>Src:parser>Options:Default\", Dimension.CPU_TIME, true); // put in fingerprint", "-", "-\t\t// Get workspace path", "-\t\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "-\t\tfinal IWorkspaceRoot workspaceRoot = workspace.getRoot();", "-\t\tfinal String targetWorkspacePath = workspaceRoot.getProject(JavaCore.PLUGIN_ID)", "-\t\t\t.getLocation()", "-\t\t\t.toFile()", "-\t\t\t.getCanonicalPath();", "-\t\t", "-\t\t// Run test", "-\t\tfor (int i=0; i<MEASURES_COUNT; i++) {", "-\t\t\tparseFile(targetWorkspacePath+\"/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java\", ITERATIONS_COUNT*6);", "-\t\t}", "-", "-\t\t// dump measure", "-\t\tcommitMeasurements();", "-\t\tassertPerformance();", "-\t}", "+\tpublic void testParser() throws InvalidInputException, IOException {", "+\t\ttagAsSummary(\"Compile>Parse>Parser>Default\", true); // put in fingerprint", "+\t\tparseParserFile(0); // Parser kind"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6918f92cac60ccad2fbb339025a49f73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceBuildTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void testPerfBuildCompilerUsingBatchCompiler() throws IOException", "signatureAfterChange": " \tpublic void testBatchCompilerNoWarning() throws IOException", "diff": ["-\tpublic void testPerfBuildCompilerUsingBatchCompiler() throws IOException {", "-\t\t// Do no longer print results in performance fingerprint", "-\t\ttagAsSummary(\"Compile>Build>Batch>Src:compiler>Options:DocCommentSupport,None\", Dimension.CPU_TIME, true); // put in fingerprint", "-\t\tFile logsFile = buildUsingBatchCompiler(\"-enableJavadoc -nowarn\");", "-", "-\t\t// Should not get any error", "-\t\tassertTrue(\"No log file\", logsFile.exists());", "-\t\tif (logsFile.length() != 0) {", "-\t\t\tchar[] errors = Util.getFileCharContent(logsFile, null);", "-\t\t\tint length = Math.min(errors.length, 1000);", "-\t\t\tassertTrue(\"Should have NO warning!\\nAlthoug, got following ones:\\n\"+(new String(errors, 0, length)), false);", "+\t */", "+\tpublic void testBatchCompilerNoWarning() throws IOException {", "+\t\ttagAsSummary(\"Compile>Batch>Compiler>No warning\", true); // put in fingerprint", "+\t\tbuildUsingBatchCompiler(\"-nowarn\");", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d82a564bb8ecfacc161439f4bf58f83a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceBuildTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void testPerfFullBuildNoComments() throws CoreException, IOException", "signatureAfterChange": " \tpublic void testFullBuildAllWarnings() throws CoreException, IOException", "diff": ["-\t */", "-\tpublic void testPerfFullBuildNoComments() throws CoreException, IOException {", "-\t\t// Do no longer print results for this test", "-\t\ttagAsSummary(\"Compile>Build>Clean>Src:full wksp>Options:NoCommentSupport\", Dimension.CPU_TIME, true); // put in fingerprint", "-\t\tHashtable options = JavaCore.getOptions();", "-\t\toptions.put(JavaCore.COMPILER_DOC_COMMENT_SUPPORT, JavaCore.DISABLED);", "-\t\toptions.put(JavaCore.COMPILER_PB_INVALID_JAVADOC, JavaCore.IGNORE);", "-\t\toptions.put(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS, JavaCore.IGNORE);", "-\t\toptions.put(JavaCore.COMPILER_PB_MISSING_JAVADOC_COMMENTS, JavaCore.IGNORE);", "-\t\tstartBuild(options);", "-\t}", "+\t */", "+\tpublic void testFullBuildAllWarnings() throws CoreException, IOException {", "+\t\ttagAsSummary(\"Compile>Build>Clean>Full>All warnings\", false); // do NOT put in fingerprint", "+\t\tstartBuild(warningOptions(true/*all warnings*/), false);", "+\t}"]}], "num": 49810}
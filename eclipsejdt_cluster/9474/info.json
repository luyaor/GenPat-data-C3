{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a333108f09e5d864e36d3508abb9937", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "042b087e3881cd388285d55d5d4a390b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "332f2b4bbc61519d48f9e1634468f589fe6ec357", "commitAfterChange": "1dac44e6f5251febeac5322fb143c153ef780c6a", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tprotected TypeBinding[] minimalErasedCandidates(TypeBinding[] types, Map allInvocations)", "signatureAfterChange": " \tprotected TypeBinding[] minimalErasedCandidates(TypeBinding[] types, Map allInvocations)", "diff": ["+\t\tTypeBinding firstType = types[indexOfFirst];", "+\t\tif (firstType.isBaseType()) return null; ", "-\t\tTypeBinding firstType = types[indexOfFirst];", "-\t\tTypeBinding[] erasedSuperTypes;", "-\t\tint superLength;", "-\t\tif (firstType.isBaseType()) {", "-\t\t\treturn null; ", "-\t\t} else if (firstType.isArrayType()) {", "-\t\t\tsuperLength = 4;", "-\t\t\tif (firstType.erasure() != firstType) {", "-\t\t\t\tSet someInvocations = new HashSet(1);", "-\t\t\t\tsomeInvocations.add(firstType);", "-\t\t\t\tallInvocations.put(firstType.erasure(), someInvocations);", "-\t\t\t}", "-\t\t\terasedSuperTypes = new TypeBinding[] { // inject well-known array supertypes", "-\t\t\t\t\tfirstType.erasure(), ", "-\t\t\t\t\tgetJavaIoSerializable(),", "-\t\t\t\t\tgetJavaLangCloneable(),", "-\t\t\t\t\tgetJavaLangObject(),", "-\t\t\t};", "-\t\t} else {", "-\t\t\tArrayList typesToVisit = new ArrayList(5);", "-\t\t\tTypeBinding firstErasure = (firstType.isTypeVariable() && !firstType.isCapture()) ? firstType : firstType.erasure();", "-\t\t\tif (firstErasure != firstType) {", "-\t\t\t\tSet someInvocations = new HashSet(1);", "-\t\t\t\tsomeInvocations.add(firstType);", "-\t\t\t\tallInvocations.put(firstErasure, someInvocations);", "-\t\t\t}", "-\t\t\ttypesToVisit.add(firstType);", "-\t\t\tint max = 1;", "-\t\t\tif (firstErasure.isArrayType()) {", "-\t\t\t\ttypesToVisit.add(getJavaIoSerializable());", "-\t\t\t\ttypesToVisit.add(getJavaLangCloneable());", "-\t\t\t\ttypesToVisit.add(getJavaLangObject());", "-\t\t\t\tmax += 3;", "-\t\t\t}", "-\t\t\tReferenceBinding currentType = (ReferenceBinding)firstType;", "-\t\t\tfor (int i = 0; i < max; i++) {", "-\t\t\t\tTypeBinding typeToVisit = (TypeBinding) typesToVisit.get(i);", "-\t\t\t\tif (typeToVisit.isArrayType()) continue;", "-\t\t\t\tcurrentType = (ReferenceBinding) typeToVisit;", "-\t\t\t\t// inject super interfaces prior to superclass", "-\t\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();", "-\t\t\t\tfor (int j = 0, count = itsInterfaces.length; j < count; j++) {", "-\t\t\t\t\tTypeBinding itsInterface = itsInterfaces[j];", "-\t\t\t\t\tTypeBinding itsInterfaceErasure = (itsInterface.isTypeVariable() && !itsInterface.isCapture()) ? itsInterface : itsInterface.erasure();", "-\t\t\t\t\tif (!typesToVisit.contains(itsInterfaceErasure)) {", "-\t\t\t\t\t\tif (itsInterfaceErasure != itsInterface) {", "-\t\t\t\t\t\t\tSet someInvocations = new HashSet(1);", "-\t\t\t\t\t\t\tsomeInvocations.add(itsInterface);", "-\t\t\t\t\t\t\tallInvocations.put(itsInterfaceErasure, someInvocations);", "-\t\t\t\t\t\t}\t\t\t\t\t\t", "-\t\t\t\t\t\ttypesToVisit.add(itsInterface);", "-\t\t\t\t\t\tmax++;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tTypeBinding itsSuperclass = currentType.superclass();", "-\t\t\t\tif (itsSuperclass != null) {", "-\t\t\t\t\tTypeBinding itsSuperclassErasure = (itsSuperclass.isTypeVariable() && !itsSuperclass.isCapture()) ? itsSuperclass : itsSuperclass.erasure();", "-\t\t\t\t\tif (!typesToVisit.contains(itsSuperclassErasure)) {", "-\t\t\t\t\t\tif (itsSuperclassErasure != itsSuperclass) {", "-\t\t\t\t\t\t\tSet someInvocations = new HashSet(1);", "-\t\t\t\t\t\t\tsomeInvocations.add(itsSuperclass);", "-\t\t\t\t\t\t\tallInvocations.put(itsSuperclassErasure, someInvocations);", "+\t\tArrayList typesToVisit = new ArrayList(5);", "+\t\t", "+\t\tint dim = firstType.dimensions();", "+\t\tTypeBinding leafType = firstType.leafComponentType();", "+\t\tTypeBinding firstErasure = (leafType.isTypeVariable() || leafType.isWildcard()/*&& !leafType.isCapture()*/) ? firstType : firstType.erasure();", "+\t\tif (firstErasure != firstType) {", "+\t\t\tSet someInvocations = new HashSet(1);", "+\t\t\tsomeInvocations.add(firstType);", "+\t\t\tallInvocations.put(firstErasure, someInvocations);", "+\t\t}\t\t\t\t\t\t", "+\t\ttypesToVisit.add(firstType);", "+\t\tint max = 1;", "+\t\tReferenceBinding currentType;", "+\t\tfor (int i = 0; i < max; i++) {", "+\t\t\tTypeBinding typeToVisit = (TypeBinding) typesToVisit.get(i);", "+\t\t\tdim = typeToVisit.dimensions();", "+\t\t\tif (dim > 0) {", "+\t\t\t\tleafType = typeToVisit.leafComponentType();", "+\t\t\t\tswitch(leafType.id) {", "+\t\t\t\t\tcase T_JavaLangObject:", "+\t\t\t\t\t\tif (dim > 1) { // Object[][] supertype is Object[]", "+\t\t\t\t\t\t\tTypeBinding elementType = ((ArrayBinding)typeToVisit).elementsType();", "+\t\t\t\t\t\t\tif (!typesToVisit.contains(elementType)) {", "+\t\t\t\t\t\t\t\ttypesToVisit.add(elementType);", "+\t\t\t\t\t\t\t\tmax++;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\ttypesToVisit.add(itsSuperclass);", "+\t\t\t\t\t\t// fallthrough", "+\t\t\t\t\tcase T_byte:", "+\t\t\t\t\tcase T_short:", "+\t\t\t\t\tcase T_char:", "+\t\t\t\t\tcase T_boolean:", "+\t\t\t\t\tcase T_int:", "+\t\t\t\t\tcase T_long:", "+\t\t\t\t\tcase T_float:", "+\t\t\t\t\tcase T_double:", "+\t\t\t\t\t\tTypeBinding superType = getJavaIoSerializable();", "+\t\t\t\t\t\tif (!typesToVisit.contains(superType)) {", "+\t\t\t\t\t\t\ttypesToVisit.add(superType);", "+\t\t\t\t\t\t\tmax++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tsuperType = getJavaLangCloneable();", "+\t\t\t\t\t\tif (!typesToVisit.contains(superType)) {", "+\t\t\t\t\t\t\ttypesToVisit.add(superType);", "+\t\t\t\t\t\t\tmax++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tsuperType = getJavaLangObject();", "+\t\t\t\t\t\tif (!typesToVisit.contains(superType)) {", "+\t\t\t\t\t\t\ttypesToVisit.add(superType);", "+\t\t\t\t\t\t\tmax++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t", "+\t\t\t\t\tdefault:", "+\t\t\t\t}", "+\t\t\t\ttypeToVisit = leafType;", "+\t\t\t}", "+\t\t\tcurrentType = (ReferenceBinding) typeToVisit;", "+\t\t\tif (currentType.isCapture()) {", "+\t\t\t\tTypeBinding firstBound = ((CaptureBinding) currentType).firstBound;", "+\t\t\t\tif (firstBound != null && firstBound.isArrayType()) {", "+\t\t\t\t\tTypeBinding superType = dim == 0 ? firstBound : (TypeBinding)environment().createArrayType(firstBound, dim); // recreate array if needed", "+\t\t\t\t\tif (!typesToVisit.contains(superType)) {", "+\t\t\t\t\t\ttypesToVisit.add(superType);", "+\t\t\t\t\t\tTypeBinding superTypeErasure = (firstBound.isTypeVariable() || firstBound.isWildcard() /*&& !itsInterface.isCapture()*/) ? superType : superType.erasure();", "+\t\t\t\t\t\tif (superTypeErasure != superType) {", "+\t\t\t\t\t\t\tSet someInvocations = new HashSet(1);", "+\t\t\t\t\t\t\tsomeInvocations.add(superType);", "+\t\t\t\t\t\t\tallInvocations.put(superTypeErasure, someInvocations);", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// inject super interfaces prior to superclass", "+\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();", "+\t\t\tfor (int j = 0, count = itsInterfaces.length; j < count; j++) {", "+\t\t\t\tTypeBinding itsInterface = itsInterfaces[j];", "+\t\t\t\tTypeBinding superType = dim == 0 ? itsInterface : (TypeBinding)environment().createArrayType(itsInterface, dim); // recreate array if needed", "+\t\t\t\tif (!typesToVisit.contains(superType)) {", "+\t\t\t\t\ttypesToVisit.add(superType);", "+\t\t\t\t\tmax++;", "+\t\t\t\t\tTypeBinding superTypeErasure = (itsInterface.isTypeVariable() || itsInterface.isWildcard() /*&& !itsInterface.isCapture()*/) ? superType : superType.erasure();", "+\t\t\t\t\tif (superTypeErasure != superType) {", "+\t\t\t\t\t\tSet someInvocations = new HashSet(1);", "+\t\t\t\t\t\tsomeInvocations.add(superType);", "+\t\t\t\t\t\tallInvocations.put(superTypeErasure, someInvocations);", "+\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tTypeBinding itsSuperclass = currentType.superclass();", "+\t\t\tif (itsSuperclass != null) {", "+\t\t\t\tTypeBinding superType = dim == 0 ? itsSuperclass : (TypeBinding)environment().createArrayType(itsSuperclass, dim); // recreate array if needed", "+\t\t\t\tif (!typesToVisit.contains(superType)) {", "+\t\t\t\t\ttypesToVisit.add(superType);", "+\t\t\t\t\tmax++;", "+\t\t\t\t\tTypeBinding superTypeErasure = (itsSuperclass.isTypeVariable() || itsSuperclass.isWildcard() /*&& !itsSuperclass.isCapture()*/) ? superType : superType.erasure();", "+\t\t\t\t\tif (superTypeErasure != superType) {", "+\t\t\t\t\t\tSet someInvocations = new HashSet(1);", "+\t\t\t\t\t\tsomeInvocations.add(superType);", "+\t\t\t\t\t\tallInvocations.put(superTypeErasure, someInvocations);", "-\t\t\tsuperLength = typesToVisit.size();", "-\t\t\terasedSuperTypes = new TypeBinding[superLength];", "-\t\t\tint rank = 0;", "-\t\t\tfor (Iterator iter = typesToVisit.iterator(); iter.hasNext();) {", "-\t\t\t\tTypeBinding type = (TypeBinding)iter.next();", "-\t\t\t\terasedSuperTypes[rank++] = type.isTypeVariable() ? type : type.erasure();", "-\t\t\t}", "+\t\t}", "+\t\tint superLength = typesToVisit.size();", "+\t\tTypeBinding[] erasedSuperTypes = new TypeBinding[superLength];", "+\t\tint rank = 0;", "+\t\tfor (Iterator iter = typesToVisit.iterator(); iter.hasNext();) {", "+\t\t\tTypeBinding type = (TypeBinding)iter.next();", "+\t\t\tleafType = type.leafComponentType();", "+\t\t\terasedSuperTypes[rank++] = (leafType.isTypeVariable() || leafType.isWildcard() /*&& !leafType.isCapture()*/) ? type : type.erasure();", "-\t\t\t\t\tswitch (erasedSuperType.id) {", "-\t\t\t\t\t\tcase T_JavaIoSerializable :", "-\t\t\t\t\t\tcase T_JavaLangCloneable :", "-\t\t\t\t\t\tcase T_JavaLangObject :", "-\t\t\t\t\t\t\tcontinue nextSuperType;", "+\t\t\t\t\tTypeBinding match;", "+\t\t\t\t\tif ((match = ((ArrayBinding)otherType).findSuperTypeWithSameErasure(erasedSuperType)) == null) {", "+\t\t\t\t\t\terasedSuperTypes[j] = null;", "+\t\t\t\t\t\tif (--remaining == 0) return null;", "+\t\t\t\t\t\tcontinue nextSuperType;", "-\t\t\t\t\terasedSuperTypes[j] = null;", "-\t\t\t\t\tif (--remaining == 0) return null;", "-\t\t\t\t\t", "+\t\t\t\t\t// record invocation", "+\t\t\t\t\tSet someInvocations = (Set) allInvocations.get(erasedSuperType);", "+\t\t\t\t\tif (someInvocations == null) someInvocations = new HashSet(1);", "+\t\t\t\t\tsomeInvocations.add(match);", "+\t\t\t\t\tallInvocations.put(erasedSuperType, someInvocations);", "-\t\t\t\t\tif (otherType.id == T_JavaLangObject && erasedSuperType.isInterface()) continue nextOtherType;", "+\t\t\t\t\t\tif (otherType.id == T_JavaLangObject && erasedSuperType.isInterface()) continue nextOtherType; // keep Object for an interface", "+\t\t\t\t\t} else if (erasedSuperType.isArrayType()) {", "+\t\t\t\t\tif (otherType.isArrayType() // keep Object[...] for an interface array (same dimensions)", "+\t\t\t\t\t\t\t&& otherType.leafComponentType().id == T_JavaLangObject", "+\t\t\t\t\t\t\t&& otherType.dimensions() == erasedSuperType.dimensions()", "+\t\t\t\t\t\t\t&& erasedSuperType.leafComponentType().isInterface()) continue nextOtherType;", "+\t\t\t\t\t\tif (((ArrayBinding)erasedSuperType).findSuperTypeWithSameErasure(otherType) != null) {", "+\t\t\t\t\t\t\terasedSuperTypes[j] = null; // discard non minimal supertype", "+\t\t\t\t\t\t\tremaining--;", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21a51efe068590310b109521a52afa75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/InstanceOfExpression.java", "commitBeforeChange": "00b719c0d7c4b5271c818d210d84b349bc0324e3", "commitAfterChange": "f90ca993824b1d0e38aec24edba147ca4e8ec0d1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic final boolean areTypesCastCompatible( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "diff": ["-", "-\tpublic final boolean areTypesCastCompatible(", "+\t */", "+\tpublic final boolean checkCastTypesCompatibility(", "-", "-\t\t//\tsee specifications p.68", "-\t\t//A more cpmplete version of this method is provided on", "+\t", "+\t\t//A more complete version of this method is provided on", "-\t\tif (castType == expressionType) return true;", "+\t\tif (castType == expressionType) return false;", "-\t\t//by grammatical construction, the first test is ALWAYS false", "-\t\t//if (castTb.isBaseType())", "-\t\t//{\tif (expressionTb.isBaseType())", "-\t\t//\t{\tif (expression.isConstantValueOfTypeAssignableToType(expressionTb,castTb))", "-\t\t//\t\t{\treturn true;}", "-\t\t//\t\telse", "-\t\t//\t\t{\tif (expressionTb==castTb)", "-\t\t//\t\t\t{\treturn true;}", "-\t\t//\t\t\telse ", "-\t\t//\t\t\t{\tif (scope.areTypesCompatible(expressionTb,castTb))", "-\t\t//\t\t\t\t{\treturn true; }", "-\t\t//\t\t\t\t", "-\t\t//\t\t\t\tif (BaseTypeBinding.isNarrowing(castTb.id,expressionTb.id))", "-\t\t//\t\t\t\t{\treturn true;}", "-\t\t//\t\t\t\treturn false;}}}", "-\t\t//\telse", "-\t\t//\t{\treturn false; }}", "-\t\t//else", "-\t\t{ //-------------checkcast to something which is NOT a basetype----------------------------------\t", "+\t\t//by grammatical construction, the base type check is not necessary", "-\t\t\t//null is compatible with every thing .... ", "-\t\t\tif (NullBinding == expressionType) {", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t\tif (expressionType.isArrayType()) {", "-\t\t\t\tif (castType.isArrayType()) {", "-\t\t\t\t\t//------- (castTb.isArray) expressionTb.isArray -----------", "-\t\t\t\t\tTypeBinding expressionEltTb = ((ArrayBinding) expressionType).elementsType(scope);", "-\t\t\t\t\tif (expressionEltTb.isBaseType())", "-\t\t\t\t\t\t// <---stop the recursion------- ", "-\t\t\t\t\t\treturn ((ArrayBinding) castType).elementsType(scope) == expressionEltTb;", "-\t\t\t\t\t//recursivly on the elts...", "-\t\t\t\t\treturn areTypesCastCompatible(", "-\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t((ArrayBinding) castType).elementsType(scope),", "-\t\t\t\t\t\texpressionEltTb);", "-\t\t\t\t}", "-\t\t\t\tif (castType.isClass()) {", "-\t\t\t\t\t//------(castTb.isClass) expressionTb.isArray ---------------\t", "-\t\t\t\t\tif (scope.isJavaLangObject(castType))", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tif (castType.isInterface()) {", "-\t\t\t\t\t//------- (castTb.isInterface) expressionTb.isArray -----------", "-\t\t\t\t\tif (scope.isJavaLangCloneable(castType) || scope.isJavaIoSerializable(castType)) {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tif (expressionType.isBaseType()) {", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tif (expressionType.isClass()) {", "-\t\t\t\tif (castType.isArrayType()) {", "-\t\t\t\t\t// ---- (castTb.isArray) expressionTb.isClass -------", "-\t\t\t\t\tif (scope.isJavaLangObject(expressionType)) {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (castType.isClass()) { // ----- (castTb.isClass) expressionTb.isClass ------ ", "-\t\t\t\t\tif (expressionType.isCompatibleWith(castType))", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\telse {", "-\t\t\t\t\t\tif (castType.isCompatibleWith(expressionType)) {", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (castType.isInterface()) {", "-\t\t\t\t\t// ----- (castTb.isInterface) expressionTb.isClass -------  ", "-\t\t\t\t\tif (((ReferenceBinding) expressionType).isFinal()) {", "-\t\t\t\t\t\t//no subclass for expressionTb, thus compile-time check is valid", "-\t\t\t\t\t\tif (expressionType.isCompatibleWith(castType))", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t\tif (expressionType.isInterface()) {", "-\t\t\t\tif (castType.isArrayType()) {", "-\t\t\t\t\t// ----- (castTb.isArray) expressionTb.isInterface ------", "-\t\t\t\t\tif (scope.isJavaLangCloneable(expressionType)", "-\t\t\t\t\t\t|| scope.isJavaIoSerializable(expressionType))", "-\t\t\t\t\t\t//potential runtime error", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t\tif (castType.isClass()) {", "-\t\t\t\t\t// ----- (castTb.isClass) expressionTb.isInterface --------", "-\t\t\t\t\tif (scope.isJavaLangObject(castType))", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\tif (((ReferenceBinding) castType).isFinal()) {", "-\t\t\t\t\t\t//no subclass for castTb, thus compile-time check is valid", "-\t\t\t\t\t\tif (castType.isCompatibleWith(expressionType)) {", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn false;", "-\t\t\t\t\t}", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t\tif (castType.isInterface()) {", "-\t\t\t\t\t// ----- (castTb.isInterface) expressionTb.isInterface -------", "-\t\t\t\t\tif ((Scope.compareTypes(castType, expressionType) == NotRelated)) {", "-\t\t\t\t\t\tMethodBinding[] castTbMethods = ((ReferenceBinding) castType).methods();", "-\t\t\t\t\t\tint castTbMethodsLength = castTbMethods.length;", "-\t\t\t\t\t\tMethodBinding[] expressionTbMethods =", "-\t\t\t\t\t\t\t((ReferenceBinding) expressionType).methods();", "-\t\t\t\t\t\tint expressionTbMethodsLength = expressionTbMethods.length;", "-\t\t\t\t\t\tfor (int i = 0; i < castTbMethodsLength; i++) {", "-\t\t\t\t\t\t\tfor (int j = 0; j < expressionTbMethodsLength; j++) {", "-\t\t\t\t\t\t\t\tif (castTbMethods[i].selector == expressionTbMethods[j].selector) {", "-\t\t\t\t\t\t\t\t\tif (castTbMethods[i].returnType != expressionTbMethods[j].returnType) {", "-\t\t\t\t\t\t\t\t\t\tif (castTbMethods[i].areParametersEqual(expressionTbMethods[j])) {", "-\t\t\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-", "-\t\t\t\treturn false;", "-\t\t\t} ", "-", "-\t\t\treturn false;", "+\t\tif (castType == null || expressionType == null) return true;", "+\t", "+\t\t//-----------cast to something which is NOT a base type--------------------------\t", "+\t\tif (expressionType == NullBinding) {", "+\t\t\t//\tif (castType.isArrayType()){ // 26903 - need checkcast when casting null to array type", "+\t\t\t//\t\tneedRuntimeCheckcast = true;", "+\t\t\t//\t}", "+\t\t\treturn false; //null is compatible with every thing", "+\t\tif (expressionType.isBaseType()) {", "+\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, castType);", "+\t\t\treturn true;", "+\t\t}", "+\t", "+\t\tif (expressionType.isArrayType()) {", "+\t\t\tif (castType == expressionType) return false; // identity conversion", "+\t", "+\t\t\tif (castType.isArrayType()) {", "+\t\t\t\t//------- (castType.isArray) expressionType.isArray -----------", "+\t\t\t\tTypeBinding exprElementType = ((ArrayBinding) expressionType).elementsType(scope);", "+\t\t\t\tif (exprElementType.isBaseType()) {", "+\t\t\t\t\t// <---stop the recursion------- ", "+\t\t\t\t\tif (((ArrayBinding) castType).elementsType(scope) != exprElementType)", "+\t\t\t\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, castType);", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\t// recursively on the elements...", "+\t\t\t\treturn checkCastTypesCompatibility(", "+\t\t\t\t\tscope,", "+\t\t\t\t\t((ArrayBinding) castType).elementsType(scope),", "+\t\t\t\t\texprElementType);", "+\t\t\t} else if (", "+\t\t\t\tcastType.isClass()) {", "+\t\t\t\t//------(castType.isClass) expressionType.isArray ---------------\t", "+\t\t\t\tif (scope.isJavaLangObject(castType)) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t} else { //------- (castType.isInterface) expressionType.isArray -----------", "+\t\t\t\tif (scope.isJavaLangCloneable(castType) || scope.isJavaIoSerializable(castType)) {", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, castType);", "+\t\t\treturn true;", "+\t\t}", "+\t", "+\t\tif (expressionType.isClass()) {", "+\t\t\tif (castType.isArrayType()) {", "+\t\t\t\t// ---- (castType.isArray) expressionType.isClass -------", "+\t\t\t\tif (scope.isJavaLangObject(expressionType)) { // potential runtime error", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t} else if (castType.isClass()) { // ----- (castType.isClass) expressionType.isClass ------", "+\t\t\t\tif (expressionType.isCompatibleWith(castType)){ // no runtime error", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tif (castType.isCompatibleWith(expressionType)) {", "+\t\t\t\t\t// potential runtime  error", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t} else { // ----- (castType.isInterface) expressionType.isClass -------  ", "+\t\t\t\tif (((ReferenceBinding) expressionType).isFinal()) {", "+\t\t\t\t\t// no subclass for expressionType, thus compile-time check is valid", "+\t\t\t\t\tif (expressionType.isCompatibleWith(castType)) ", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t} else { // a subclass may implement the interface ==> no check at compile time", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, castType);", "+\t\t\treturn true;", "+\t\t}", "+\t", "+\t\t//\tif (expressionType.isInterface()) { cannot be anything else", "+\t\tif (castType.isArrayType()) {", "+\t\t\t// ----- (castType.isArray) expressionType.isInterface ------", "+\t\t\tif (!(scope.isJavaLangCloneable(expressionType)", "+\t\t\t\t\t|| scope.isJavaIoSerializable(expressionType))) {// potential runtime error", "+\t\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, castType);", "+\t\t\t}", "+\t\t\treturn true;", "+\t\t} else if (castType.isClass()) { // ----- (castType.isClass) expressionType.isInterface --------", "+\t\t\tif (scope.isJavaLangObject(castType)) { // no runtime error", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tif (((ReferenceBinding) castType).isFinal()) {", "+\t\t\t\t// no subclass for castType, thus compile-time check is valid", "+\t\t\t\tif (!castType.isCompatibleWith(expressionType)) {", "+\t\t\t\t\t// potential runtime error", "+\t\t\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, castType);", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else { // ----- (castType.isInterface) expressionType.isInterface -------", "+\t\t\tif (castType == expressionType) { ", "+\t\t\t\treturn false; // identity conversion", "+\t\t\t}", "+\t\t\tif (Scope.compareTypes(castType, expressionType) == NotRelated) {", "+\t\t\t\tMethodBinding[] castTypeMethods = ((ReferenceBinding) castType).methods();", "+\t\t\t\tMethodBinding[] expressionTypeMethods =", "+\t\t\t\t\t((ReferenceBinding) expressionType).methods();", "+\t\t\t\tint exprMethodsLength = expressionTypeMethods.length;", "+\t\t\t\tfor (int i = 0, castMethodsLength = castTypeMethods.length; i < castMethodsLength; i++)", "+\t\t\t\t\tfor (int j = 0; j < exprMethodsLength; j++) {", "+\t\t\t\t\t\tif ((castTypeMethods[i].returnType != expressionTypeMethods[j].returnType)", "+\t\t\t\t\t\t\t\t&& (castTypeMethods[i].selector == expressionTypeMethods[j].selector)", "+\t\t\t\t\t\t\t\t&& castTypeMethods[i].areParametersEqual(expressionTypeMethods[j])) {", "+\t\t\t\t\t\t\tscope.problemReporter().notCompatibleTypesError(this, expressionType, castType);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn true;"]}], "num": 9474}
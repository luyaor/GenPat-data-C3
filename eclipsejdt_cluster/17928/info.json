{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d09bbec1afc08a937990162c6f918b16", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "336f46e6c5b6adc8f8069329d84d9059", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "090b7506b3ab9c07ea9fd06731a9f4e99a99b062", "commitAfterChange": "621bbc75ca3867569a8570d69a8ba58a735bd4e0", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tprivate TypeBinding leastContainingTypeArgument(TypeBinding u, TypeBinding v, ReferenceBinding genericType, int rank, List lubStack)", "signatureAfterChange": " \tprivate TypeBinding leastContainingTypeArgument(TypeBinding u, TypeBinding v, ReferenceBinding genericType, int rank, List lubStack)", "diff": ["-\t\t\t\t\t\t\t\tif (lub == IntBinding) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\t\t\t\t\t\tif (lub == TypeBinding.INT) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "-\t\t\t\t\t\tif (lub == IntBinding) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\t\t\t\tif (lub == TypeBinding.INT) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "-\t\t\t\t\tif (lub == IntBinding) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\t\t\tif (lub == TypeBinding.INT) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "-\t\tif (lub == IntBinding) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\tif (lub == TypeBinding.INT) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75dee42159c335dbec4cfd1644631791", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " \tprivate TypeBinding leastContainingTypeArgument(TypeBinding u, TypeBinding v, ReferenceBinding genericType, int rank, ArrayList lubStack)", "signatureAfterChange": " \tprivate TypeBinding leastContainingTypeArgument(TypeBinding u, TypeBinding v, ReferenceBinding genericType, int rank, ArrayList lubStack)", "diff": ["-\t\tif (u == v) return u;", "+\t\tif (TypeBinding.equalsEquals(u, v)) return u;", "-\t\t\t\t\t\t\t\tif (lub == TypeBinding.INT) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(lub, TypeBinding.INT)) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "-\t\t\t\t\t\t\t\tif (wildU.bound == wildV.bound) return wildU.bound;", "+\t\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(wildU.bound, wildV.bound)) return wildU.bound;", "-\t\t\t\t\t\tif (lub == TypeBinding.INT) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\t\t\t\tif (TypeBinding.equalsEquals(lub, TypeBinding.INT)) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "-\t\t\t\t\tif (lub == TypeBinding.INT) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\t\t\tif (TypeBinding.equalsEquals(lub, TypeBinding.INT)) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "-\t\tif (lub == TypeBinding.INT) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\tif (TypeBinding.equalsEquals(lub, TypeBinding.INT)) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);"]}], "num": 17928}
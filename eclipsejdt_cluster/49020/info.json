{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "15c196f01a443e172837cb9fd016f6b6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "932b4de6b762bec1c9b6f22fa0b6b87f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "364abd1fe47d562f576cb6b54a083094e0671f23", "commitAfterChange": "1b555425db41a9eb4fba300521a43b3ff494a42f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tprivate static TypeBinding mergeAnnotationsIntoType(BlockScope scope, AnnotationBinding[] se8Annotations, long se8nullBits, Annotation se8NullAnnotation, \t\t\tTypeReference typeRef, TypeBinding existingType)", "signatureAfterChange": "  \tprivate static TypeBinding mergeAnnotationsIntoType(BlockScope scope, AnnotationBinding[] se8Annotations, long se8nullBits, Annotation se8NullAnnotation, \t\t\tTypeReference typeRef, TypeBinding existingType)", "diff": ["-\t\tif (se8nullBits != 0 && prevNullBits != se8nullBits && ((prevNullBits | se8nullBits) == TagBits.AnnotationNullMASK)) {", "-\t\t\tif (existingType instanceof TypeVariableBinding) {", "-\t\t\t\t// let type-use annotations override annotations on the type parameter declaration", "-\t\t\t\texistingType = existingType.withoutToplevelNullAnnotation();", "-\t\t\t} else {", "-\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(se8NullAnnotation);", "+\t\tif ((prevNullBits | se8nullBits) == TagBits.AnnotationNullMASK) { // contradiction after merge?", "+\t\t\tif (!(existingType instanceof TypeVariableBinding)) { // let type-use annotations override annotations on the type parameter declaration", "+\t\t\t\tif (prevNullBits != TagBits.AnnotationNullMASK && se8nullBits != TagBits.AnnotationNullMASK) { // conflict caused by the merge?", "+\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(se8NullAnnotation);", "+\t\t\t\t}", "+\t\t\t\tse8Annotations = Binding.NO_ANNOTATIONS;", "+\t\t\texistingType = existingType.withoutToplevelNullAnnotation();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a99eae8dec0519a8da3e8ca01603e706", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "04462acb576297f6fd2704a63e0758e525633e09", "commitAfterChange": "cd22e7cc518ff2d997c93cef84c2cb3849fd35bd", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  protected void fillInDefaultNonNullness18(AbstractMethodDeclaration sourceMethod, LookupEnvironment env)", "signatureAfterChange": "  protected void fillInDefaultNonNullness18(AbstractMethodDeclaration sourceMethod, LookupEnvironment env)", "diff": ["-\tif (   this.returnType != null", "-\t\t&& !this.returnType.isBaseType()", "-\t\t&& (this.returnType.tagBits & TagBits.AnnotationNullMASK) == 0)", "-\t{", "-\t\tthis.returnType = env.createAnnotatedType(this.returnType, new AnnotationBinding[]{env.getNonNullAnnotation()});", "-\t} else if (sourceMethod != null && (this.returnType.tagBits & TagBits.AnnotationNonNull) != 0) {", "-\t\tsourceMethod.scope.problemReporter().nullAnnotationIsRedundant(sourceMethod, -1/*signifies method return*/);", "+\tif (this.returnType != null) {", "+\t\tif (!this.returnType.isBaseType() && (this.returnType.tagBits & TagBits.AnnotationNullMASK) == 0) {", "+\t\t\tthis.returnType = env.createAnnotatedType(this.returnType, new AnnotationBinding[]{env.getNonNullAnnotation()});", "+\t\t} else if (sourceMethod != null && (this.returnType.tagBits & TagBits.AnnotationNonNull) != 0) {", "+\t\t\tsourceMethod.scope.problemReporter().nullAnnotationIsRedundant(sourceMethod, -1/*signifies method return*/);", "+\t\t}"]}], "num": 49020}
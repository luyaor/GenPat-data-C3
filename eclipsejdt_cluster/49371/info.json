{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6301c82d54d644cbf2160b0810461aa7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11d89d13c743876b3bd4055a1e4e37ff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 912, "methodNumberAfterChange": 912, "signatureBeforeChange": " public void test0906()", "signatureAfterChange": " public void test0906()", "diff": ["-\t\t\"----------\\n\" + ", "-\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\"\tpublic class X implements I {\\n\" + ", "-\t\t\"\t                          ^\\n\" + ", "-\t\t\"I is a raw type. References to generic type I<V> should be parameterized\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\"\tI<Integer> x1 = (I<Integer>) (X) null;\\n\" + ", "-\t\t\"\t                ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Unnecessary cast from X to I<Integer>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\"\tI<Integer> x1 = (I<Integer>) (X) null;\\n\" + ", "-\t\t\"\t                ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type safety: The cast from X to I<Integer> is actually checking against the erased type I\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"4. WARNING in X.java (at line 5)\\n\" + ", "-\t\t\"\tI<Integer> x1 = (I<Integer>) (X) null;\\n\" + ", "-\t\t\"\t                             ^^^^^^^^\\n\" + ", "-\t\t\"Unnecessary cast from null to X\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"5. WARNING in X.java (at line 6)\\n\" + ", "-\t\t\"\tI<Integer> x2 = (I<Integer>) new X();\\n\" + ", "-\t\t\"\t                ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Unnecessary cast from X to I<Integer>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"6. WARNING in X.java (at line 6)\\n\" + ", "-\t\t\"\tI<Integer> x2 = (I<Integer>) new X();\\n\" + ", "-\t\t\"\t                ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Type safety: The cast from X to I<Integer> is actually checking against the erased type I\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"7. WARNING in X.java (at line 7)\\n\" + ", "-\t\t\"\tI<Integer> x3 = (I<Integer>) null;\\n\" + ", "-\t\t\"\t                ^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Unnecessary cast from null to I<Integer>\\n\" + ", "-\t\t\"----------\\n\" + ", "-\t\t\"8. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\"\tX x4 = (X) (I<Integer>) null;\\n\" + ", "-\t\t\"\t           ^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\"Unnecessary cast from null to I<Integer>\\n\" + ", "-\t\t\"----------\\n\");", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tpublic class X implements I {\\n\" + ", "+\t\t\t\"\t                          ^\\n\" + ", "+\t\t\t\"I is a raw type. References to generic type I<V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tI<Integer> x1 = (I<Integer>) (X) null;\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The cast from X to I<Integer> is actually checking against the erased type I\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tI<Integer> x1 = (I<Integer>) (X) null;\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast from X to I<Integer>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tI<Integer> x1 = (I<Integer>) (X) null;\\n\" + ", "+\t\t\t\"\t                             ^^^^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast from null to X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tI<Integer> x2 = (I<Integer>) new X();\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The cast from X to I<Integer> is actually checking against the erased type I\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tI<Integer> x2 = (I<Integer>) new X();\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast from X to I<Integer>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tI<Integer> x3 = (I<Integer>) null;\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast from null to I<Integer>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tX x4 = (X) (I<Integer>) null;\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast from null to I<Integer>\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ef207fd97ea8c375f807883226f6ced", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " \tpublic void test075()", "signatureAfterChange": " \tpublic void test075()", "diff": ["-\t\t\t\"The method foo() of type B must override a superclass method\\n\" + ", "+\t\t\t\"Name clash: The method foo() of type B has the same erasure as foo() of type A but does not override it\\n\" + ", "-\t\t\t\"Name clash: The method foo() of type B has the same erasure as foo() of type A but does not override it\\n\" + ", "+\t\t\t\"The method foo() of type B must override a superclass method\\n\" + ", "-\t\t\t\"The method foo() of type C must override a superclass method\\n\" + ", "+\t\t\t\"Name clash: The method foo() of type C has the same erasure as foo() of type A but does not override it\\n\" + ", "-\t\t\t\"Name clash: The method foo() of type C has the same erasure as foo() of type A but does not override it\\n\" + ", "+\t\t\t\"The method foo() of type C must override a superclass method\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce9068fe7f07953261c027429c6e6860", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void test011()", "signatureAfterChange": " \tpublic void test011()", "diff": ["-\t\t\t\"The method count(int[]) of type Y should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+\t\t\t\"Varargs methods should only override or be overridden by other varargs methods unlike Y.count(int[]) and X.count(int...)\\n\" + ", "-\t\t\t\"Varargs methods should only override or be overridden by other varargs methods unlike Y.count(int[]) and X.count(int...)\\n\" + ", "+\t\t\t\"The method count(int[]) of type Y should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "-\t\t\t\"The method count(int...) of type Z should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+\t\t\t\"Varargs methods should only override or be overridden by other varargs methods unlike Z.count(int...) and Y.count(int[])\\n\" + ", "-\t\t\t\"Varargs methods should only override or be overridden by other varargs methods unlike Z.count(int...) and Y.count(int[])\\n\" + ", "+\t\t\t\"The method count(int...) of type Z should be tagged with @Override since it actually overrides a superclass method\\n\" + "]}], "num": 49371}
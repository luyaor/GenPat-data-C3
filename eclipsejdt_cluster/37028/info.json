{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d228cbfa6f6bed7d18d2051d56682d54", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b3fb8df0950307d0f5edb7a4d1b1fe3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "99610839b414c1a151891246c04d5389bbb2fe00", "commitAfterChange": "a00bb5eefc5dc1b2770154375a5f65dad7ebaf03", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 84, "signatureBeforeChange": "  \tpublic void traverse(MethodBinding methodBinding, int maxLocals, byte[] bytecodes, int codeOffset, int codeLength, ArrayList frames, boolean isClinit)", "signatureAfterChange": "  \tpublic List traverse(MethodBinding methodBinding, int maxLocals, byte[] bytecodes, int codeOffset, int codeLength, Map frames, boolean isClinit)", "diff": ["-\tpublic void traverse(MethodBinding methodBinding, int maxLocals, byte[] bytecodes, int codeOffset, int codeLength, ArrayList frames, boolean isClinit) {", "+\tpublic List traverse(MethodBinding methodBinding, int maxLocals, byte[] bytecodes, int codeOffset, int codeLength, Map frames, boolean isClinit) {", "+\t\tSet realJumpTarget = new HashSet(); ", "+", "-\t\tframes.add(frame.duplicate());", "+\t\tadd(frames, frame.duplicate());", "+\t\taddRealJumpTarget(realJumpTarget, -1);", "+\t\tfor (int i = 0, max = this.codeStream.exceptionLabelsCounter; i < max; i++) {", "+\t\t\tExceptionLabel exceptionLabel = this.codeStream.exceptionLabels[i];", "+\t\t\tif (exceptionLabel != null) {", "+\t\t\t\taddRealJumpTarget(realJumpTarget, exceptionLabel.position);", "+\t\t\t}", "+\t\t}", "-\t\t\t\t\t\t// no more frame to generate", "-\t\t\t\t\t\treturn;", "+\t\t\t\t\t\tcurrentFramePosition = Integer.MAX_VALUE;", "-\t\t\t\tframes.add(currentFrame);", "+\t\t\t\tadd(frames, currentFrame);", "-\t\t\t\t\t// no more frame to generate", "-\t\t\t\t\treturn;", "+\t\t\t\t\tcurrentFramePosition = Integer.MAX_VALUE;", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, currentPC + i2At(bytecodes, 1, pc));", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, currentPC + i2At(bytecodes, 1, pc));", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, currentPC + i2At(bytecodes, 1, pc));", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, pc - codeOffset);", "+\t\t\t\t\t// default offset", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, currentPC + i4At(bytecodes, 0, pc));", "-\t\t\t\t\tpc += (length * 4);", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t// pair offset", "+\t\t\t\t\t\taddRealJumpTarget(realJumpTarget, currentPC + i4At(bytecodes, 0, pc));", "+\t\t\t\t\t\tpc += 4;", "+\t\t\t\t\t}", "-\t\t\t\t\tpc += 4; // default", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, currentPC + i4At(bytecodes, 0, pc));", "+\t\t\t\t\tpc += 4; // default offset", "-\t\t\t\t\tpc += (4 + npairs * 8);", "+\t\t\t\t\tpc += 4; // npair value", "+\t\t\t\t\tfor (int i = 0; i < npairs; i++) {", "+\t\t\t\t\t\tpc += 4; // case value", "+\t\t\t\t\t\t// pair offset", "+\t\t\t\t\t\taddRealJumpTarget(realJumpTarget, currentPC + i4At(bytecodes, 0, pc));", "+\t\t\t\t\t\tpc += 4;", "+\t\t\t\t\t}", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, pc - codeOffset);", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, pc - codeOffset);", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, pc - codeOffset);", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, currentPC + i2At(bytecodes, 1, pc));", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, currentPC + i4At(bytecodes, 1, pc));", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, pc - codeOffset); // handle infinite loop", "+\t\treturn filterFakeFrames(realJumpTarget, frames, codeLength);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b1ba0f7380f119656ebbf358c829b83", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "8f15d46eb206cf54f2a40cd71ec03c4f46b7ee7f", "commitAfterChange": "c330a629b2e57a349c9f1b78416b69b069678655", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 84, "signatureBeforeChange": "  \tpublic void traverse(MethodBinding methodBinding, int maxLocals, byte[] bytecodes, int codeOffset, int codeLength, ArrayList frames, boolean isClinit)", "signatureAfterChange": "  \tpublic List traverse(MethodBinding methodBinding, int maxLocals, byte[] bytecodes, int codeOffset, int codeLength, Map frames, boolean isClinit)", "diff": ["-\tpublic void traverse(MethodBinding methodBinding, int maxLocals, byte[] bytecodes, int codeOffset, int codeLength, ArrayList frames, boolean isClinit) {", "+\tpublic List traverse(MethodBinding methodBinding, int maxLocals, byte[] bytecodes, int codeOffset, int codeLength, Map frames, boolean isClinit) {", "+\t\tSet realJumpTarget = new HashSet(); ", "+", "-\t\tframes.add(frame.duplicate());", "+\t\tadd(frames, frame.duplicate());", "+\t\taddRealJumpTarget(realJumpTarget, -1);", "+\t\tfor (int i = 0, max = this.codeStream.exceptionLabelsCounter; i < max; i++) {", "+\t\t\tExceptionLabel exceptionLabel = this.codeStream.exceptionLabels[i];", "+\t\t\tif (exceptionLabel != null) {", "+\t\t\t\taddRealJumpTarget(realJumpTarget, exceptionLabel.position);", "+\t\t\t}", "+\t\t}", "-\t\t\t\t\t\t// no more frame to generate", "-\t\t\t\t\t\treturn;", "+\t\t\t\t\t\tcurrentFramePosition = Integer.MAX_VALUE;", "-\t\t\t\tframes.add(currentFrame);", "+\t\t\t\tadd(frames, currentFrame);", "-\t\t\t\t\t// no more frame to generate", "-\t\t\t\t\treturn;", "+\t\t\t\t\tcurrentFramePosition = Integer.MAX_VALUE;", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, currentPC + i2At(bytecodes, 1, pc));", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, currentPC + i2At(bytecodes, 1, pc));", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, currentPC + i2At(bytecodes, 1, pc));", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, pc - codeOffset);", "+\t\t\t\t\t// default offset", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, currentPC + i4At(bytecodes, 0, pc));", "-\t\t\t\t\tpc += (length * 4);", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t// pair offset", "+\t\t\t\t\t\taddRealJumpTarget(realJumpTarget, currentPC + i4At(bytecodes, 0, pc));", "+\t\t\t\t\t\tpc += 4;", "+\t\t\t\t\t}", "-\t\t\t\t\tpc += 4; // default", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, currentPC + i4At(bytecodes, 0, pc));", "+\t\t\t\t\tpc += 4; // default offset", "-\t\t\t\t\tpc += (4 + npairs * 8);", "+\t\t\t\t\tpc += 4; // npair value", "+\t\t\t\t\tfor (int i = 0; i < npairs; i++) {", "+\t\t\t\t\t\tpc += 4; // case value", "+\t\t\t\t\t\t// pair offset", "+\t\t\t\t\t\taddRealJumpTarget(realJumpTarget, currentPC + i4At(bytecodes, 0, pc));", "+\t\t\t\t\t\tpc += 4;", "+\t\t\t\t\t}", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, pc - codeOffset);", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, pc - codeOffset);", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, pc - codeOffset);", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, currentPC + i2At(bytecodes, 1, pc));", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, currentPC + i4At(bytecodes, 1, pc));", "+\t\t\t\t\taddRealJumpTarget(realJumpTarget, pc - codeOffset); // handle infinite loop", "+\t\treturn filterFakeFrames(realJumpTarget, frames, codeLength);"]}], "num": 37028}
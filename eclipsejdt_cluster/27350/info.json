{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba96c546d6fc920501757f0f62793123", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17be2e2422a15130222321c03a56dceb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/diagnose/LexStream.java", "commitBeforeChange": "b81c6103bf7171fcae97c1ae243c994607982ad6", "commitAfterChange": "cd06975b0ff4634209d721ce90d8cdeb1378d693", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic String toString()", "signatureAfterChange": " \tpublic String toString()", "diff": ["-\t\t\tres.append(source);", "+\t\t\tint previousEnd = -1;", "+\t\t\tfor (int i = 0; i < intervalStartToSkip.length; i++) {", "+\t\t\t\tint intervalStart = intervalStartToSkip[i];", "+\t\t\t\tint intervalEnd = intervalEndToSkip[i];", "+\t\t\t\t", "+\t\t\t\tres.append(source.substring(previousEnd + 1, intervalStart));", "+\t\t\t\tres.append('<');", "+\t\t\t\tres.append('@');", "+\t\t\t\tres.append(source.substring(intervalStart, intervalEnd + 1));", "+\t\t\t\tres.append('@');", "+\t\t\t\tres.append('>');", "+\t\t\t\t", "+\t\t\t\tpreviousEnd = intervalEnd;", "+\t\t\t}", "+\t\t\tres.append(source.substring(previousEnd + 1));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3accbe12d6ae6a0cafea1467228956b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModelTestsUtil.java", "commitBeforeChange": "917603919e9d38772fd63709feb3bbda7696f523", "commitAfterChange": "fca5fd453024a315e76f840acd34b846e15423bf", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public static String trimLinesLeadingWhitespaces(String input)", "signatureAfterChange": " public static String trimLinesLeadingWhitespaces(String input)", "diff": ["-\t\t\tbuffer.append(line.substring(index+1).trim());", "+\t\t\tint length = line.length();", "+\t\t\tif (length > 80 && line.charAt(length-1) == '>') { // should not happen:  bug of old formatter", "+\t\t\t\tint idx = line.lastIndexOf('<');", "+\t\t\t\tbuffer.append(line.substring(index+1, idx).trim());", "+\t\t\t\tbuffer.append(Util.LINE_SEPARATOR);", "+\t\t\t\tbuffer.append(line.substring(idx).trim());", "+\t\t\t\tcontinue;", "+\t\t\t} else {", "+\t\t\t\tbuffer.append(line.substring(index+1).trim());", "+\t\t\t}"]}], "num": 27350}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "42909c95f2ebd0f95e3c3a7fbcf05a8f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c88770fbde6b2c4e6852ba919addec7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/InnerClassInfo.java", "commitBeforeChange": "5166ddb130bcb062c1e82da491c829c5d95a6211", "commitAfterChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public InnerClassInfo(byte classFileBytes[], int offsets[], int offset)", "signatureAfterChange": "  public InnerClassInfo(byte classFileBytes[], int offsets[], int offset)", "diff": ["+", "-\tsuper(classFileBytes, offset);", "-\tconstantPoolOffsets = offsets;", "-\tinnerClassNameIndex = u2At(0);", "-\touterClassNameIndex = u2At(2);", "+\tsuper(classFileBytes, offsets, offset);", "+\tthis.innerClassNameIndex = u2At(0);", "+\tthis.outerClassNameIndex = u2At(2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a8139bbdf59e7cedcd52ae821c719fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "8b0f83ab2fc2f0377aa0a160aaebc6cf11976024", "commitAfterChange": "841d4b99f7f88577aa004d23df8444d60d488b4b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic final void addClinit()", "signatureAfterChange": " public final void addClinit()", "diff": ["-\t */", "-\tpublic final void addClinit() {", "-", "-\t\t//see comment on needClassInitMethod", "-\t\tif (needClassInitMethod()) {", "-\t\t\tint length;", "-\t\t\tAbstractMethodDeclaration[] methodDeclarations;", "-\t\t\tif ((methodDeclarations = this.methods) == null) {", "-\t\t\t\tlength = 0;", "-\t\t\t\tmethodDeclarations = new AbstractMethodDeclaration[1];", "-\t\t\t} else {", "-\t\t\t\tlength = methodDeclarations.length;", "-\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\tmethodDeclarations,", "-\t\t\t\t\t0,", "-\t\t\t\t\t(methodDeclarations = new AbstractMethodDeclaration[length + 1]),", "-\t\t\t\t\t1,", "-\t\t\t\t\tlength);", "-\t\t\t}", "-\t\t\tClinit clinit = new Clinit(this.compilationResult);", "-\t\t\tmethodDeclarations[0] = clinit;", "-\t\t\t// clinit is added in first location, so as to minimize the use of ldcw (big consumer of constant inits)", "-\t\t\tclinit.declarationSourceStart = clinit.sourceStart = sourceStart;", "-\t\t\tclinit.declarationSourceEnd = clinit.sourceEnd = sourceEnd;", "-\t\t\tclinit.bodyEnd = sourceEnd;", "-\t\t\tthis.methods = methodDeclarations;", "-\t\t}", "-\t}", "+ */", "+public final void addClinit() {", "+\t//see comment on needClassInitMethod", "+\tif (needClassInitMethod()) {", "+\t\tint length;", "+\t\tAbstractMethodDeclaration[] methodDeclarations;", "+\t\tif ((methodDeclarations = this.methods) == null) {", "+\t\t\tlength = 0;", "+\t\t\tmethodDeclarations = new AbstractMethodDeclaration[1];", "+\t\t\tlength = methodDeclarations.length;", "+\t\t\t\tmethodDeclarations,", "+\t\t\t\t(methodDeclarations = new AbstractMethodDeclaration[length + 1]),", "+\t\t\t\tlength);", "+\t\tClinit clinit = new Clinit(this.compilationResult);", "+\t\tmethodDeclarations[0] = clinit;", "+\t\t// clinit is added in first location, so as to minimize the use of ldcw (big consumer of constant inits)", "+\t\tclinit.declarationSourceStart = clinit.sourceStart = this.sourceStart;", "+\t\tclinit.declarationSourceEnd = clinit.sourceEnd = this.sourceEnd;", "+\t\tclinit.bodyEnd = this.sourceEnd;", "+\t\tthis.methods = methodDeclarations;", "+\t}", "+}"]}], "num": 36145}
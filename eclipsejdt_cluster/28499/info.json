{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bfeebf4e0f80a7503ea1d2aa9b83e767", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fa9c48b61e527ecd5d074fbc55737e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 374, "methodNumberAfterChange": 375, "signatureBeforeChange": " public void typeMismatchError(TypeBinding actualType, TypeBinding expectedType, ASTNode location)", "signatureAfterChange": " public void typeMismatchError(TypeBinding actualType, TypeBinding expectedType, ASTNode location, ASTNode expectingLocation)", "diff": ["-public void typeMismatchError(TypeBinding actualType, TypeBinding expectedType, ASTNode location) {", "+public void typeMismatchError(TypeBinding actualType, TypeBinding expectedType, ASTNode location, ASTNode expectingLocation) {", "+\tif (actualType != null && (actualType.tagBits & TagBits.HasMissingType) != 0) { // improve secondary error", "+\t\tthis.handle(", "+\t\t\t\tIProblem.UndefinedType,  ", "+\t\t\t\tnew String[] {new String(actualType.leafComponentType().readableName())},", "+\t\t\t\tnew String[] {new String(actualType.leafComponentType().shortReadableName())},", "+\t\t\t\tlocation.sourceStart,", "+\t\t\t\tlocation.sourceEnd);", "+\t\t\treturn;\t\t", "+\t}\t", "+\tif (expectingLocation != null && (expectedType.tagBits & TagBits.HasMissingType) != 0) { // improve secondary error", "+\t\tthis.handle(", "+\t\t\t\tIProblem.UndefinedType,  ", "+\t\t\t\tnew String[] {new String(expectedType.leafComponentType().readableName())},", "+\t\t\t\tnew String[] {new String(expectedType.leafComponentType().shortReadableName())},", "+\t\t\t\texpectingLocation.sourceStart,", "+\t\t\t\texpectingLocation.sourceEnd);", "+\t\t\treturn;\t\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e450662c8e3d4f7c4e0081b143acfa5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "9bef1c9466abe8b593c4d2051a95cedc2ae4d102", "commitAfterChange": "2b3faf03e480607600ec10a4a39f50f16f7be45e", "methodNumberBeforeChange": 153, "methodNumberAfterChange": 153, "signatureBeforeChange": " public void importProblem(ImportReference importRef, Binding expectedImport)", "signatureAfterChange": " public void importProblem(ImportReference importRef, Binding expectedImport)", "diff": ["+\tif (expectedImport instanceof FieldBinding) {", "+\t\tint id = IProblem.UndefinedField;", "+\t\tFieldBinding field = (FieldBinding) expectedImport;", "+\t\tswitch (expectedImport.problemId()) {", "+\t\t\tcase ProblemReasons.NotVisible :", "+\t\t\t\tthis.handle(", "+\t\t\t\t\tIProblem.NotVisibleField,", "+\t\t\t\t\tnew String[] {CharOperation.toString(importRef.tokens), new String(field.declaringClass.readableName())},", "+\t\t\t\t\tnew String[] {CharOperation.toString(importRef.tokens), new String(field.declaringClass.shortReadableName())},", "+\t\t\t\t\timportRef.sourceStart,", "+\t\t\t\t\timportRef.sourceEnd);\t\t\t", "+\t\t\t\treturn;", "+\t\t\tcase ProblemReasons.Ambiguous :", "+\t\t\t\tid = IProblem.AmbiguousField;", "+\t\t\t\tbreak;", "+\t\t\tcase ProblemReasons.ReceiverTypeNotVisible :", "+\t\t\t\tid = IProblem.NotVisibleType;", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tthis.handle(", "+\t\t\tid, ", "+\t\t\tnew String[] {new String(field.declaringClass.leafComponentType().readableName())},", "+\t\t\tnew String[] {new String(field.declaringClass.leafComponentType().shortReadableName())},", "+\t\t\timportRef.sourceStart,", "+\t\t\timportRef.sourceEnd);", "+\t\treturn;", "+\t}", "+"]}], "num": 28499}
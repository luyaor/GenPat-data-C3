{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd49fd1116adc9273a647d60df8ea7be", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a3314fdacce7079622e7fa2349d2554", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "7a9726508a1cf4124fc56e814b6b230c72a37501", "commitAfterChange": "4bc0ba437bacd2b1f452f8c7e62bbdf6cd1994b3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public TypeHierarchy(IType type, IJavaProject project, boolean computeSubtypes) throws JavaModelException", "signatureAfterChange": " public TypeHierarchy(IType type, IJavaProject project, boolean computeSubtypes, ICompilationUnit[] workingCopies) throws JavaModelException", "diff": ["-public TypeHierarchy(IType type, IJavaProject project, boolean computeSubtypes) throws JavaModelException {", "-\tthis(type, SearchEngine.createJavaSearchScope(new IJavaElement[] {project}), computeSubtypes);", "+public TypeHierarchy(IType type, IJavaProject project, boolean computeSubtypes, ICompilationUnit[] workingCopies) throws JavaModelException {", "+\tthis(type, SearchEngine.createJavaSearchScope(new IJavaElement[] {project}), computeSubtypes, workingCopies);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96ec1d00aad4c2a52614b7fa2d035a93", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "364abd1fe47d562f576cb6b54a083094e0671f23", "commitAfterChange": "1b555425db41a9eb4fba300521a43b3ff494a42f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean complain, MethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": "  void checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean complain, MethodBinding inheritedMethod, MethodBinding[] allInherited, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["-\t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean complain, MethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "+\t\tboolean hasReturnNonNullDefault, boolean hasParameterNonNullDefault, boolean complain, MethodBinding inheritedMethod, MethodBinding[] allInherited, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "-\tsuper.checkNullSpecInheritance(currentMethod, srcMethod, hasReturnNonNullDefault, hasParameterNonNullDefault, complain, inheritedMethod, scope, inheritedNonNullnessInfos);", "+\tsuper.checkNullSpecInheritance(currentMethod, srcMethod, hasReturnNonNullDefault, hasParameterNonNullDefault, complain, inheritedMethod, allInherited, scope, inheritedNonNullnessInfos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6806b5d4f77818413ef74e37b1b49cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "ba623d582045575b43eee2b86be165ff58225746", "commitAfterChange": "5f25db2c9c02bf799108bff292447ab679c3c3b7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] otherInheritedMethods)", "diff": ["-void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length) {", "+void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] otherInheritedMethods) {", "-\t\t\tcheckForBridgeMethod(currentMethod, inheritedMethod);", "+\t\t\tcheckForBridgeMethod(currentMethod, inheritedMethod, otherInheritedMethods);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaa17b78dbbc4b32112e4d865b6ee130", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeAnnotationProcessorManager.java", "commitBeforeChange": "a67fa7cbc880c9e9bad3f8e391aeed5f3e00392a", "commitAfterChange": "b492bcd26f25dcd86303e009ed59915c2ac84c99", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t@Override \tpublic void processAnnotations(CompilationUnitDeclaration[] units, boolean isLastRound)", "signatureAfterChange": " \t@Override \tpublic void processAnnotations(CompilationUnitDeclaration[] units, BinaryTypeBinding[] binaryTypeBindings, boolean isLastRound)", "diff": ["-\tpublic void processAnnotations(CompilationUnitDeclaration[] units, boolean isLastRound) {", "+\tpublic void processAnnotations(CompilationUnitDeclaration[] units, BinaryTypeBinding[] binaryTypeBindings, boolean isLastRound) {", "-\t\t\tsuper.processAnnotations(units, isLastRound);", "+\t\t\tsuper.processAnnotations(units, binaryTypeBindings, isLastRound);"]}], "num": 42114}
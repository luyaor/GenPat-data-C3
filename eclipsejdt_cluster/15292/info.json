{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "13a8848ce733d40efae1ec290689f2fb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92a7d209d5fb0afa017f91ba93cbaa0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultCommentMapper.java", "commitBeforeChange": "64b96fa1ce2b515f4a874add8f64c38e4d9533fd", "commitAfterChange": "4dc818b4e43cdaa450b9bd9617f340ff5b901864", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tint storeTrailingComments(ASTNode node, int nextStart, Scanner scanner)", "signatureAfterChange": " \tint storeTrailingComments(ASTNode node, int nextStart, Scanner scanner, boolean lastChild)", "diff": ["-\tint storeTrailingComments(ASTNode node, int nextStart, Scanner scanner) {", "+\tint storeTrailingComments(ASTNode node, int nextStart, Scanner scanner, boolean lastChild) {", "-\t\twhile (idx<length && commentStart <= nextStart) {", "+\t\twhile (idx<length && commentStart < nextStart) {", "-\t\t\tif (commentStart > nextStart) {", "+\t\t\tif (commentStart >= nextStart) {", "-\t\t\tint nextLine = scanner.getLineNumber(nextStart);", "-\t\t\tint previousLine = scanner.getLineNumber(previousEnd);", "-\t\t\tif((nextLine - previousLine) <= 1) {", "-\t\t\t\tif (sameLineIdx == -1) return nodeEnd;", "-\t\t\t\tendIdx = sameLineIdx;", "-\t\t\t}", "-\t\t\t// Verify that traling comment is not an already attached doc comment", "-\t\t\tidx = startIdx;", "-\t\t\tfor (; idx <= endIdx; idx++) {", "-\t\t\t\tif (this.comments[idx].isDocComment() && this.attachedDocComments.contains(this.comments[idx]))  {", "-\t\t\t\t\tif (idx == startIdx) return nodeEnd;", "-\t\t\t\t\tbreak;", "+\t\t\tif (!lastChild) {", "+\t\t\t\tint nextLine = scanner.getLineNumber(nextStart);", "+\t\t\t\tint previousLine = scanner.getLineNumber(previousEnd);", "+\t\t\t\tif((nextLine - previousLine) <= 1) {", "+\t\t\t\t\tif (sameLineIdx == -1) return nodeEnd;", "+\t\t\t\t\tendIdx = sameLineIdx;", "-\t\t\tendIdx = idx - 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac1289c058aea88aa1c5241f2d865d9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/UnresolvedReferenceNameFinder.java", "commitBeforeChange": "cf6c558f3e8d77fc234110cd8914f5b336ef0d92", "commitAfterChange": "ab10a34ac484d145f4f6c275f96c1a07de4e2006", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tprivate MethodDeclaration find(char[] startWith, Scope s, int from, int to, UnresolvedReferenceNameRequestor nameRequestor)", "signatureAfterChange": " \t \tprivate MethodDeclaration findBefore( \t\t\tchar[] startWith, \t\t\tScope s, \t\t\tint from, \t\t\tint to, \t\t\tint maxLineCount, \t\t\tUnresolvedReferenceNameRequestor nameRequestor)", "diff": ["-\tprivate MethodDeclaration find(char[] startWith, Scope s, int from, int to, UnresolvedReferenceNameRequestor nameRequestor) {", "-\t\t// compute location of the end of the current block", "-\t\tthis.completionScanner.resetTo(from + 1, to);", "-\t\tthis.completionScanner.jumpOverBlock();", "-\t\t", "-\t\tint blockEnd = this.completionScanner.startPosition - 1;", "-\t\t\t\t\tthis.completionScanner.getLineNumber(from) + MAX_LINE_COUNT);", "-\t\t\tend = blockEnd;", "-\t\t\tend = maxEnd < blockEnd ? maxEnd : blockEnd;", "-\t\tMethodDeclaration fakeMethod = this.parser.parseStatementsAfterCompletion(", "+\t", "+\tprivate MethodDeclaration findBefore(", "+\t\t\tchar[] startWith,", "+\t\t\tScope s,", "+\t\t\tint from,", "+\t\t\tint to,", "+\t\t\tint maxLineCount,", "+\t\t\tUnresolvedReferenceNameRequestor nameRequestor) {", "+\t\tthis.requestor = nameRequestor;", "+\t\t", "+\t\t// reinitialize completion scanner to be usable as a normal scanner", "+\t\tthis.completionScanner.cursorLocation = 0;", "+\t\t", "+\t\t// reinitialize completionIdentifier", "+\t\tthis.completionScanner.prefix = startWith;", "+\t\t", "+\t\tint minStart =", "+\t\t\tthis.completionScanner.getLineStart(", "+\t\t\t\t\tthis.completionScanner.getLineNumber(to) - maxLineCount);", "+\t\t", "+\t\tint start;", "+\t\tint fakeBlocksCount;", "+\t\tif (minStart <= from) {", "+\t\t\tstart = from;", "+\t\t\tfakeBlocksCount = 0;", "+\t\t} else {", "+\t\t\tstart = minStart;", "+\t\t\tfakeBlocksCount = FAKE_BLOCKS_COUNT;", "+\t\t}", "+\t\t", "+\t\tthis.completionScanner.startRecordingIdentifiers();", "+\t\t", "+\t\tMethodDeclaration fakeMethod = this.parser.parseSomeStatements(", "+\t\t\t\tstart,", "+\t\t\t\tto,", "+\t\t\t\tfakeBlocksCount,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb6563f67400f20d52c4d140c3593e1c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultCommentMapper.java", "commitBeforeChange": "43c947b648b5a1fa1fb7d4f5ce5b7cea1d4fa7a2", "commitAfterChange": "eee151556fa5628da58c297d3e841df408f33c62", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tint storeTrailingComments(ASTNode node, int nextStart, Scanner scanner, boolean lastChild)", "signatureAfterChange": " \tint storeTrailingComments(ASTNode node, int nextStart,  boolean lastChild)", "diff": ["-\tint storeTrailingComments(ASTNode node, int nextStart, Scanner scanner, boolean lastChild) {", "+\tint storeTrailingComments(ASTNode node, int nextStart,  boolean lastChild) {", "+", "+\t\tif (nodeEnd == nextStart) {", "+\t\t\t// special case for last child of its parent", "+\t\t\tthis.trailingComments.put(node, new int[] { -1, -1 });", "+\t\t\treturn nodeEnd;", "+\t\t}", "-\t\tint nodeEndLine = scanner.getLineNumber(nodeEnd);", "+\t\tint nodeEndLine = this.scanner.getLineNumber(nodeEnd);", "-\t\tint idx = getCommentIndex(this.commentIndex, nodeEnd, 1);", "+\t\tint idx = getCommentIndex(0, nodeEnd, 1);", "-\t\t\t\tscanner.resetTo(previousEnd, commentStart);", "+\t\t\t\tthis.scanner.resetTo(previousEnd, commentStart);", "-\t\t\t\t\tint token = scanner.getNextToken();", "-\t\t\t\t\tif (token != TerminalTokens.TokenNameWHITESPACE || scanner.currentPosition != commentStart) {", "+\t\t\t\t\tint token = this.scanner.getNextToken();", "+\t\t\t\t\tif (token != TerminalTokens.TokenNameWHITESPACE || this.scanner.currentPosition != commentStart) {", "-\t\t\t\tchar[] gap = scanner.getCurrentIdentifierSource();", "+\t\t\t\tchar[] gap = this.scanner.getCurrentIdentifierSource();", "-\t\t\tint commentLine = scanner.getLineNumber(commentStart);", "+\t\t\tint commentLine = this.scanner.getLineNumber(commentStart);", "-\t\t\t\tint nextLine = scanner.getLineNumber(nextStart);", "-\t\t\t\tint previousLine = scanner.getLineNumber(previousEnd);", "+\t\t\t\tint nextLine = this.scanner.getLineNumber(nextStart);", "+\t\t\t\tint previousLine = this.scanner.getLineNumber(previousEnd);", "-\t\t\tthis.commentIndex = endIdx;"]}], "num": 15292}
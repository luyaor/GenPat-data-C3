{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bca28adaa7465c587c2477cb0315dc00", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ed8d2e0087967097946c70f8fa42008", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "007f2027ff425d194812a64dbd50790ef7383015", "commitAfterChange": "f7f17008db6ff3c3f5e70873efcd612c1034949b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType)", "diff": ["-\t    ", "-\t    boolean isClassScope = scope.kind == Scope.CLASS_SCOPE;", "-\t    ", "+", "-\t\t\tif (this.resolvedType != null && !this.resolvedType.isValidBinding()) {", "+\t\t\tif (this.resolvedType != null && !this.resolvedType.isValidBinding())", "-\t\t\t}", "-\t\tReferenceBinding currentType = null;", "-\t\tcurrentType = (ReferenceBinding) this.resolvedType;", "-\t\t// TODO (kent) - if ((this.bits & ASTNode.IsSuperType) != 0)", "-\t\tif (isClassScope)", "-\t\t\tif (((ClassScope) scope).detectCycle(currentType, this))", "-\t\t\t\treturn null;", "-\t    // check generic and arity", "-\t\tTypeVariableBinding[] typeVariables = currentType.typeVariables();", "+", "+\t\t// check generic and arity", "+\t    boolean isClassScope = scope.kind == Scope.CLASS_SCOPE;", "+\t\tReferenceBinding currentType = (ReferenceBinding) this.resolvedType;", "+\t\t// TODO (kent) - if ((this.bits & ASTNode.IsSuperType) != 0)", "+\t\tif (isClassScope)", "+\t\t\tif (((ClassScope) scope).detectCycle(currentType, this, argTypes))", "+\t\t\t\treturn null;", "+", "+\t\tTypeVariableBinding[] typeVariables = currentType.typeVariables();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51676a2c124fa40a85a4814584864d62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "007f2027ff425d194812a64dbd50790ef7383015", "commitAfterChange": "f7f17008db6ff3c3f5e70873efcd612c1034949b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t    ", "-\t    boolean isClassScope = scope.kind == Scope.CLASS_SCOPE;", "-\t\t\tif (this.resolvedType != null && !this.resolvedType.isValidBinding()) {", "+\t\t\tif (this.resolvedType != null && !this.resolvedType.isValidBinding())", "-\t\t\t}", "+\t    boolean isClassScope = scope.kind == Scope.CLASS_SCOPE;", "-\t\t\tif (isClassScope)", "-\t\t\t\tif (((ClassScope) scope).detectCycle(currentType, this))", "-\t\t\t\t\treturn null;", "-\t\t\tTypeVariableBinding[] typeVariables = currentType.typeVariables();", "+\t\t\t\t// TODO (kent) - if ((this.bits & ASTNode.IsSuperType) != 0)", "+\t\t\t\tif (isClassScope)", "+\t\t\t\t\tif (((ClassScope) scope).detectCycle(currentType, this, argTypes))", "+\t\t\t\t\t\treturn null;", "+", "+\t\t\t    TypeVariableBinding[] typeVariables = currentType.typeVariables();", "-\t\t    } else if (currentType.isGenericType()) { // check raw type", "-\t\t\t        qualifiedType = scope.environment().createRawType(currentType, qualifiedType); // raw type", "-\t\t\t} else if (qualifiedType != null && (qualifiedType.isParameterizedType() || qualifiedType.isRawType())) {", "-\t\t\t\t    qualifiedType = scope.createParameterizedType(currentType, null, qualifiedType);", "+\t\t    } else {", "+   \t\t\t    if ((this.bits & ASTNode.IsSuperType) != 0)", "+   \t\t\t    \tif (((ClassScope) scope).detectCycle(currentType, this, null))", "+   \t\t\t    \t\treturn null;", "+   \t\t\t    if (currentType.isGenericType()) { // check raw type", "+   \t\t\t    \tqualifiedType = scope.environment().createRawType(currentType, qualifiedType); // raw type", "+   \t\t\t    } else if (qualifiedType != null && (qualifiedType.isParameterizedType() || qualifiedType.isRawType())) {", "+   \t\t\t    \tqualifiedType = scope.createParameterizedType(currentType, null, qualifiedType);", "+   \t\t\t    }"]}], "num": 51589}
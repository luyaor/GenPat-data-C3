{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cbf0e536455e80d76a0fdcaea7b8a2a4", "detectedBy": ["DIFF_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f1c6f9b86817768dc6f24b84d142444", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tpublic String getEmptyLines(int linesNumber)", "signatureAfterChange": "  \tpublic String getEmptyLines(int linesNumber)", "diff": ["-\t\tStringBuffer buffer = new StringBuffer();", "+\t\tString emptyLines;", "-\t\t\tfor (int i = 0; i < linesNumber; i++) {", "-\t\t\t\tif (this.indentEmptyLines) printIndentationIfNecessary(buffer);", "-\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\tif (this.indentEmptyLines) {", "+\t\t\t\tthis.tempBuffer.setLength(0);", "+\t\t\t\tfor (int i = 0; i < linesNumber; i++) {", "+\t\t\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\t\tthis.tempBuffer.append(this.lineSeparator);", "+\t\t\t\t}", "+\t\t\t\temptyLines = this.tempBuffer.toString();", "+\t\t\t} else {", "+\t\t\t\temptyLines = getNewLineString(linesNumber);", "-\t\t\tfor (int i = 0; i < linesNumber; i++) {", "-\t\t\t\tif (this.indentEmptyLines) printIndentationIfNecessary(buffer);", "-\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\tif (this.indentEmptyLines) {", "+\t\t\t\tthis.tempBuffer.setLength(0);", "+\t\t\t\tfor (int i = 0; i < linesNumber; i++) {", "+\t\t\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\t\tthis.tempBuffer.append(this.lineSeparator);", "+\t\t\t\t}", "+\t\t\t\temptyLines = this.tempBuffer.toString();", "+\t\t\t} else {", "+\t\t\t\temptyLines = getNewLineString(linesNumber);", "-\t\t\tfor (int i = 0; i < realNewLineNumber; i++) {", "-\t\t\t\tif (this.indentEmptyLines) printIndentationIfNecessary(buffer);", "-\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\tif (this.indentEmptyLines) {", "+\t\t\t\tthis.tempBuffer.setLength(0);", "+\t\t\t\tfor (int i = 0; i < realNewLineNumber; i++) {", "+\t\t\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\t\tthis.tempBuffer.append(this.lineSeparator);", "+\t\t\t\t}", "+\t\t\t\temptyLines = this.tempBuffer.toString();", "+\t\t\t} else {", "+\t\t\t\temptyLines = getNewLineString(realNewLineNumber);", "-\t\treturn String.valueOf(buffer);", "+\t\treturn emptyLines;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fab86979d53d78a5605df6afb67a63b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 76, "signatureBeforeChange": " \tprivate void printJavadocGapLinesForImmutableBlock(FormatJavadocBlock block)", "signatureAfterChange": " \tprivate void printJavadocGapLinesForImmutableBlock(FormatJavadocBlock block)", "diff": ["-\t\tStringBuffer buffer = null;", "+\t\tString newLineString = null;", "-\t\t\t\t\t\tif (buffer == null) {", "-\t\t\t\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\t\t\tif (newLineString == null) {", "-\t\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\tthis.tempBuffer.setLength(0);", "+\t\t\t\t\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\t\t\t\tthis.tempBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\tnewLineString = this.tempBuffer.toString();", "-\t\t\t\t\t\taddReplaceEdit(newLineStart, newLineStart+indentationColumn-2, buffer.toString());", "+\t\t\t\t\t\taddReplaceEdit(newLineStart, newLineStart+indentationColumn-2, newLineString);", "-\t\t\t\t\t\t\t\tif (buffer == null) {", "-\t\t\t\t\t\t\t\t\tbuffer = new StringBuffer();", "+\t\t\t\t\t\t\t\tif (newLineString == null) {", "+\t\t\t\t\t\t\t\t\tthis.tempBuffer.setLength(0);", "-\t\t\t\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\t\t\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\t\t\t\t\t\tthis.tempBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\t\t\tnewLineString = this.tempBuffer.toString();", "-\t\t\t\t\t\t\t\taddReplaceEdit(newLineStart, secondLineStart-1, buffer.toString());", "+\t\t\t\t\t\t\t\taddReplaceEdit(newLineStart, secondLineStart-1, newLineString);", "-\t\t\tif (buffer == null) {", "-\t\t\t\tbuffer = new StringBuffer();", "+\t\t\tif (newLineString == null) {", "+\t\t\t\tthis.tempBuffer.setLength(0);", "-\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\tthis.tempBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\tnewLineString = this.tempBuffer.toString();", "-\t\t\taddReplaceEdit(newLineStart, secondLineStart-1, buffer.toString());", "+\t\t\taddReplaceEdit(newLineStart, secondLineStart-1, newLineString);", "-\t\t\tif (buffer == null) {", "-\t\t\t\tbuffer = new StringBuffer();", "+\t\t\tif (newLineString == null) {", "+\t\t\t\tthis.tempBuffer.setLength(0);", "-\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\tprintIndentationIfNecessary(this.tempBuffer);", "+\t\t\t\tthis.tempBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\tnewLineString = this.tempBuffer.toString();", "-\t\t\taddReplaceEdit(newLineStart, newLineStart+indentationColumn-2, buffer.toString());", "+\t\t\taddReplaceEdit(newLineStart, newLineStart+indentationColumn-2, newLineString);"]}], "num": 12436}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47485c9a3e7161b79f9ec7abf800b565", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "146fb155f7b79d6d7590d214f3a7b81d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "dba39c1d5c61bbe26665fc6f71117b5055d2912c", "commitAfterChange": "69c496e755cc6913b44756320f466e0fd51afc57", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType)", "signatureAfterChange": " \t \tpublic TypeBinding checkAgainstFinalTargetType(TypeBinding targetType)", "diff": ["-\t\t\tthis.valueIfTrue.checkAgainstFinalTargetType(targetType);", "-\t\t\tthis.valueIfFalse.checkAgainstFinalTargetType(targetType);", "+\t\t\tTypeBinding valueIfTrueType = this.valueIfTrue.checkAgainstFinalTargetType(targetType);", "+\t\t\tTypeBinding valueIfFalseType = this.valueIfFalse.checkAgainstFinalTargetType(targetType);", "+\t\t\tif (valueIfTrueType != null && !valueIfTrueType.isCompatibleWith(targetType, this.polyExpressionScope)) {", "+\t\t\t\tthis.polyExpressionScope.problemReporter().typeMismatchError(valueIfTrueType, targetType, this.valueIfTrue, null);", "+\t\t\t}", "+\t\t\tif (valueIfFalseType != null && !valueIfFalseType.isCompatibleWith(targetType, this.polyExpressionScope)) {", "+\t\t\t\tthis.polyExpressionScope.problemReporter().typeMismatchError(valueIfFalseType, targetType, this.valueIfFalse, null);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e3c61084cb7b2d79f7c7bcfcf6fbc28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["+\t\t\tthis.resolvedCopies = new HashMap<TypeBinding, LambdaExpression>();", "+\t\t\t", "+\t\t\t\t\tif (groundType != expectedSAMType) { //$IDENTITY-COMPARISON$", "+\t\t\t\t\t\tif (!groundType.isCompatibleWith(expectedSAMType, this.scope)) { // the ground has shifted, are we still on firm grounds ? ", "+\t\t\t\t\t\t\tblockScope.problemReporter().typeMismatchError(groundType, this.expectedType, this, null); // report deliberately against block scope so as not to blame the lambda.", "+\t\t\t\t\t\t\treturn this.resolvedType = null;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\tthis.voidCompatible = this.original.voidCompatible = expression.statementExpression();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf8605ad748d270ceb0455a520b04d5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "f200f8d976d56839e6f0d721d690d85cc3afbb03", "commitAfterChange": "0b27e1fc307c28641d0d95f2d81ae5062cecb103", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\tif (valueIfTrueType != null && !valueIfTrueType.isCompatibleWith(this.expectedType, scope)) {", "+\t\t\t\tscope.problemReporter().typeMismatchError(valueIfTrueType, this.expectedType, this.valueIfTrue, null);", "+\t\t\t}", "+\t\t\tif (valueIfFalseType != null && !valueIfFalseType.isCompatibleWith(this.expectedType, scope)) {", "+\t\t\t\tscope.problemReporter().typeMismatchError(valueIfFalseType, this.expectedType, this.valueIfFalse, null);", "+\t\t\t}"]}], "num": 24429}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b869168b0229f32e4b30a22847b4e8ef", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54c051a46b53bc3b134f1d6ecfc5c0bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/RegionBasedHierarchyBuilder.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void createTypeHierarchyBasedOnRegion(ArrayList allOpenablesInRegion, IProgressMonitor monitor)", "signatureAfterChange": " private void createTypeHierarchyBasedOnRegion(ArrayList allOpenablesInRegion, IProgressMonitor monitor)", "diff": ["-\t\t\tIType focusType = this.getType();", "-\t\t\tCompilationUnit unitToLookInside = null;", "-\t\t\tif (focusType != null) {", "-\t\t\t\tunitToLookInside = (CompilationUnit)focusType.getCompilationUnit();", "-\t\t\t}", "-\t\t\tif (this.nameLookup != null && unitToLookInside != null) {", "-\t\t\t\ttry {", "-\t\t\t\t\tnameLookup.setUnitsToLookInside(new ICompilationUnit[] {unitToLookInside}); // NB: this uses a PerThreadObject, so it is thread safe", "-\t\t\t\t\tthis.hierarchyResolver.resolve(openables, null, monitor);", "-\t\t\t\t} finally {", "-\t\t\t\t\tnameLookup.setUnitsToLookInside(null);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tthis.hierarchyResolver.resolve(openables, null, monitor);", "-\t\t\t}", "+\t\t\tthis.hierarchyResolver.resolve(openables, null, monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9f1b0db4954ab6d92d4fd9a343edc6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/RegionBasedHierarchyBuilder.java", "commitBeforeChange": "dd94cf0bd440f6e64eda78265f5494ba3f323126", "commitAfterChange": "d1744bcd23d1403e6d9f13ec027be2082d1bac18", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void createTypeHierarchyBasedOnRegion(ArrayList allTypesInRegion, IProgressMonitor monitor)", "signatureAfterChange": " private void createTypeHierarchyBasedOnRegion(ArrayList allTypesInRegion, IProgressMonitor monitor)", "diff": ["-\t\t\t\tsynchronized(this.nameLookup) { // prevent 2 concurrent accesses to name lookup while the working copies are set", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tnameLookup.setUnitsToLookInside(new IWorkingCopy[] {unitToLookInside});", "-\t\t\t\t\t\tthis.hierarchyResolver.resolve(genericTypes, compilationUnits, monitor);", "-\t\t\t\t\t} finally {", "-\t\t\t\t\t\tnameLookup.setUnitsToLookInside(null);", "-\t\t\t\t\t}", "+\t\t\t\ttry {", "+\t\t\t\t\tnameLookup.setUnitsToLookInside(new IWorkingCopy[] {unitToLookInside}); // NB: this uses a PerThreadObject, so it is thread safe", "+\t\t\t\t\tthis.hierarchyResolver.resolve(genericTypes, compilationUnits, monitor);", "+\t\t\t\t} finally {", "+\t\t\t\t\tnameLookup.setUnitsToLookInside(null);"]}], "num": 15808}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "194589177470ff526d67fc28e285720f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e7ea8644477581a8075d836ca34cab2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "1dbf45ade1eaa8473579771e92825a7887776253", "commitAfterChange": "0fb8e6d8cd5771230b88c7189dc0d95f3a5da0e3", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tprivate void verifyPositions(TagElement tagElement, char[] source)", "signatureAfterChange": " \tprivate void verifyPositions(TagElement tagElement, char[] source)", "diff": ["-\t\t\tassertEquals(\"Wrong start position for \"+tagElement, '{', source[tagStart++]);", "+\t\t\tassertEquals(this.prefix+\"Wrong start position for \"+tagElement, '{', source[tagStart++]);", "-\t\t\tassertEquals(\"Misplaced tag name at \"+tagStart, tagName, text);", "+\t\t\tassertEquals(this.prefix+\"Misplaced tag name at \"+tagStart, tagName, text);", "-\t\t\t\tif (previousFragment != null && previousFragment.getNodeType() == ASTNode.TEXT_ELEMENT) {", "-\t\t\t\t\tassertTrue(\"Wrong length for text element \"+previousFragment, source[tagStart] == '\\r' || source[tagStart] == '\\n');", "-\t\t\t\t\twhile (source[tagStart] == '*' || Character.isWhitespace(source[tagStart])) {", "-\t\t\t\t\t\ttagStart++; // purge non-stored characters", "+\t\t\t\tif (previousFragment != null) {", "+\t\t\t\t\tif (previousFragment.getNodeType() == ASTNode.TEXT_ELEMENT) {", "+\t\t\t\t\t\tassertTrue(this.prefix+\"Wrong length for text element \"+previousFragment, source[tagStart] == '\\r' || source[tagStart] == '\\n');", "+\t\t\t\t\t\twhile (source[tagStart] == '*' || Character.isWhitespace(source[tagStart])) {", "+\t\t\t\t\t\t\ttagStart++; // purge non-stored characters", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint start = tagStart;", "+\t\t\t\t\t\tboolean newLine = false;", "+\t\t\t\t\t\twhile (source[start] == '*' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\t\tstart++; // purge non-stored characters", "+\t\t\t\t\t\t\tif (source[tagStart] == '\\r' || source[tagStart] == '\\n') {", "+\t\t\t\t\t\t\t\tnewLine = true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (newLine) tagStart = start;", "-\t\t\t\tassertEquals(\"Misplaced or wrong text element at \"+tagStart, text, ((TextElement) fragment).getText());", "+\t\t\t\tassertEquals(this.prefix+\"Misplaced or wrong text element at \"+tagStart, text, ((TextElement) fragment).getText());", "-\t\t\t\t\tassertEquals(\"Tag element has wrong start position\", tagStart, inlineTag.getStartPosition());", "+\t\t\t\t\tassertEquals(this.prefix+\"Tag element has wrong start position\", tagStart, inlineTag.getStartPosition());", "-\t\t\t\t\t\tassertEquals(\"Misplaced or wrong member ref qualifier at \"+start, text, qualifier.toString());", "+\t\t\t\t\t\tassertEquals(this.prefix+\"Misplaced or wrong member ref qualifier at \"+start, text, qualifier.toString());", "-\t\t\t\t\tassertEquals(\"Misplace # separator for member ref\"+memberRef, '#', source[start]);", "+\t\t\t\t\tassertEquals(this.prefix+\"Misplace # separator for member ref\"+memberRef, '#', source[start]);", "-\t\t\t\t\tassertEquals(\"Misplaced or wrong member ref name at \"+start, text, name.toString());", "+\t\t\t\t\tassertEquals(this.prefix+\"Misplaced or wrong member ref name at \"+start, text, name.toString());", "-\t\t\t\t\t\tassertEquals(\"Misplaced or wrong member ref qualifier at \"+start, text, qualifier.toString());", "+\t\t\t\t\t\tassertEquals(this.prefix+\"Misplaced or wrong member ref qualifier at \"+start, text, qualifier.toString());", "-\t\t\t\t\tassertEquals(\"Misplace # separator for member ref\"+methodRef, '#', source[start]);", "+\t\t\t\t\tassertEquals(this.prefix+\"Misplaced # separator for member ref\"+methodRef, '#', source[start]);", "-\t\t\t\t\tassertEquals(\"Misplaced or wrong member ref name at \"+start, text, name.toString());", "+\t\t\t\t\tassertEquals(this.prefix+\"Misplaced or wrong member ref name at \"+start, text, name.toString());", "-\t\t\t\t\twhile (source[start] == '(' || source[start] == '*' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t// Verify arguments starting open parenthesis", "+\t\t\t\t\twhile (source[start] == '*' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\tassertEquals(this.prefix+\"Misplaced ( for member ref arguments \"+methodRef, '(', source[start]);", "+\t\t\t\t\tstart++;", "+\t\t\t\t\t\twhile (source[start] == '*' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\t\t start++; // purge non-stored characters", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tassertEquals(\"Misplaced or wrong method ref parameter type at \"+start, text, type.toString());", "+\t\t\t\t\t\tassertEquals(this.prefix+\"Misplaced or wrong method ref parameter type at \"+start, text, type.toString());", "-\t\t\t\t\t\twhile (Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\t// Verify parameter name positions", "+\t\t\t\t\t\twhile (Character.isWhitespace(source[start])) { // do NOT accept '*' in parameter declaration", "-\t\t\t\t\t\t// Verify parameter name positions", "-\t\t\t\t\t\t\tassertEquals(\"Misplaced or wrong method ref parameter name at \"+start, text, name.toString());", "+\t\t\t\t\t\t\tassertEquals(this.prefix+\"Misplaced or wrong method ref parameter name at \"+start, text, name.toString());", "-\t\t\t\t\t\twhile (source[start] == ',' || source[start] == ')' || source[start] == '*' || Character.isWhitespace(source[start])) {", "-\t\t\t\t\t\t\tchar ch = source[start++];", "-\t\t\t\t\t\t\t if (ch == ',' || ch == ')') {", "-\t\t\t\t\t\t\t \tbreak;", "-\t\t\t\t\t\t\t }", "+\t\t\t\t\t\t// Verify end parameter declaration", "+\t\t\t\t\t\twhile (source[start] == '*' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tassertTrue(this.prefix+\"Misplaced or wrong method ref parameter end at \"+start, source[start] == ',' || source[start] == ')');", "+\t\t\t\t\t\tstart++;", "+\t\t\t\t\t\tif (source[start] == ')') {", "+\t\t\t\t\t\t\tbreak;", "-\t\t\tassertEquals(\"Wrong end character for \"+tagElement, '}', source[tagStart++]);", "+\t\t\tassertEquals(this.prefix+\"Wrong end character for \"+tagElement, '}', source[tagStart++]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efb52a2ce6224db51dca0833cafd6291", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "82e3492687fb385a8a9ba6c56e1f6d491dc8d79a", "commitAfterChange": "0b30f6ac807cc8aa14a5978d1dd305dd71baedda", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected void verifyFragmentsPositions(TagElement tagElement, char[] source)", "signatureAfterChange": " \tprivate void verifyPositions(TagElement tagElement, char[] source)", "diff": ["-\t */", "-\tprotected void verifyFragmentsPositions(TagElement tagElement, char[] source) {", "+\t */", "+\tprivate void verifyPositions(TagElement tagElement, char[] source) {", "+\t\tString text = null;", "+\t\tint tagStart = tagElement.getStartPosition();", "+\t\tif (tagElement.isNested()) {", "+\t\t\tassertEquals(\"Wrong start position for \"+tagElement, '{', source[tagStart++]);", "+\t\t}", "+\t\t\ttext= new String(source, tagStart, tagName.length());", "+\t\t\tassertEquals(\"Misplaced tag name at \"+tagStart, tagName, text);", "+\t\t\ttagStart += tagName.length();", "+\t\tASTNode previousFragment = null;", "+\t\t\t\tif (previousFragment != null && previousFragment.getNodeType() == ASTNode.TEXT_ELEMENT) {", "+\t\t\t\t\tassertTrue(\"Wrong length for text element \"+previousFragment, source[tagStart] == '\\r' || source[tagStart] == '\\n');", "+\t\t\t\t\twhile (source[tagStart] == '*' || Character.isWhitespace(source[tagStart])) {", "+\t\t\t\t\t\ttagStart++; // purge non-stored characters", "+\t\t\t\t}", "+\t\t\t\ttext = new String(source, tagStart, fragment.getLength());", "+\t\t\t\tassertEquals(\"Misplaced or wrong text element at \"+tagStart, text, ((TextElement) fragment).getText());", "+\t\t\t} else {", "+\t\t\t\twhile (source[tagStart] == '*' || Character.isWhitespace(source[tagStart])) {", "+\t\t\t\t\ttagStart++; // purge non-stored characters", "+\t\t\t\t}", "+\t\t\t\tif (fragment.getNodeType() == ASTNode.SIMPLE_NAME || fragment.getNodeType() == ASTNode.QUALIFIED_NAME) {", "+\t\t\t\t\tverifyNamePositions(tagStart, (Name) fragment, source);", "+\t\t\t\t} else if (fragment.getNodeType() == ASTNode.TAG_ELEMENT) {", "+\t\t\t\t\tTagElement inlineTag = (TagElement) fragment;", "+\t\t\t\t\tassertEquals(\"Tag element has wrong start position\", tagStart, inlineTag.getStartPosition());", "+\t\t\t\t\tverifyPositions(inlineTag, source);", "+\t\t\t\t} else if (fragment.getNodeType() == ASTNode.MEMBER_REF) {", "+\t\t\t\t\tMemberRef memberRef = (MemberRef) fragment;", "+\t\t\t\t\t// Store start position", "+\t\t\t\t\tint start = tagStart;", "+\t\t\t\t\t// Verify qualifier position", "+\t\t\t\t\tName qualifier = memberRef.getQualifier();", "+\t\t\t\t\tif (qualifier != null) {", "+\t\t\t\t\t\ttext = new String(source, start, qualifier.getLength());", "+\t\t\t\t\t\tassertEquals(\"Misplaced or wrong member ref qualifier at \"+start, text, qualifier.toString());", "+\t\t\t\t\t\tverifyNamePositions(start, qualifier, source);", "+\t\t\t\t\t\tstart += qualifier.getLength();", "+\t\t\t\t\t\twhile (source[start] == '*' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\t\tstart++; // purge non-stored characters", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t// Verify member separator position", "+\t\t\t\t\tassertEquals(\"Misplace # separator for member ref\"+memberRef, '#', source[start]);", "+\t\t\t\t\tstart++;", "+\t\t\t\t\twhile (source[start] == '*' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\tstart++; // purge non-stored characters", "+\t\t\t\t\t}", "+\t\t\t\t\t// Verify member name position", "+\t\t\t\t\tName name = memberRef.getName();", "+\t\t\t\t\ttext = new String(source, start, name.getLength());", "+\t\t\t\t\tassertEquals(\"Misplaced or wrong member ref name at \"+start, text, name.toString());", "+\t\t\t\t\tverifyNamePositions(start, name, source);", "+\t\t\t\t} else if (fragment.getNodeType() == ASTNode.METHOD_REF) {", "+\t\t\t\t\tMethodRef methodRef = (MethodRef) fragment;", "+\t\t\t\t\t// Store start position", "+\t\t\t\t\tint start = tagStart;", "+\t\t\t\t\t// Verify qualifier position", "+\t\t\t\t\tName qualifier = methodRef.getQualifier();", "+\t\t\t\t\tif (qualifier != null) {", "+\t\t\t\t\t\ttext = new String(source, start, qualifier.getLength());", "+\t\t\t\t\t\tassertEquals(\"Misplaced or wrong member ref qualifier at \"+start, text, qualifier.toString());", "+\t\t\t\t\t\tverifyNamePositions(start, qualifier, source);", "+\t\t\t\t\t\tstart += qualifier.getLength();", "+\t\t\t\t\t\twhile (source[start] == '*' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\t\tstart++; // purge non-stored characters", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t// Verify member separator position", "+\t\t\t\t\tassertEquals(\"Misplace # separator for member ref\"+methodRef, '#', source[start]);", "+\t\t\t\t\tstart++;", "+\t\t\t\t\twhile (source[start] == '*' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\tstart++; // purge non-stored characters", "+\t\t\t\t\t}", "+\t\t\t\t\t// Verify member name position", "+\t\t\t\t\tName name = methodRef.getName();", "+\t\t\t\t\ttext = new String(source, start, name.getLength());", "+\t\t\t\t\tassertEquals(\"Misplaced or wrong member ref name at \"+start, text, name.toString());", "+\t\t\t\t\tverifyNamePositions(start, name, source);", "+\t\t\t\t\tstart += name.getLength();", "+\t\t\t\t\twhile (source[start] == '(' || source[start] == '*' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\tstart++; // purge non-stored characters", "+\t\t\t\t\t}", "+\t\t\t\t\t// Verify parameters", "+\t\t\t\t\tIterator parameters = methodRef.parameters().listIterator();", "+\t\t\t\t\twhile (parameters.hasNext()) {", "+\t\t\t\t\t\tMethodRefParameter param = (MethodRefParameter) parameters.next();", "+\t\t\t\t\t\t// Verify parameter type positions", "+\t\t\t\t\t\tType type = param.getType();", "+\t\t\t\t\t\ttext = new String(source, start, type.getLength());", "+\t\t\t\t\t\tassertEquals(\"Misplaced or wrong method ref parameter type at \"+start, text, type.toString());", "+\t\t\t\t\t\tif (type.isSimpleType()) {", "+\t\t\t\t\t\t\tverifyNamePositions(start, ((SimpleType)type).getName(), source);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tstart += type.getLength();", "+\t\t\t\t\t\twhile (Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\t\t start++; // purge non-stored characters", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// Verify parameter name positions", "+\t\t\t\t\t\tname = param.getName();", "+\t\t\t\t\t\tif (name != null) {", "+\t\t\t\t\t\t\ttext = new String(source, start, name.getLength());", "+\t\t\t\t\t\t\tassertEquals(\"Misplaced or wrong method ref parameter name at \"+start, text, name.toString());", "+\t\t\t\t\t\t\tstart += name.getLength();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\twhile (source[start] == ',' || source[start] == ')' || source[start] == '*' || Character.isWhitespace(source[start])) {", "+\t\t\t\t\t\t\tchar ch = source[start++];", "+\t\t\t\t\t\t\t if (ch == ',' || ch == ')') {", "+\t\t\t\t\t\t\t \tbreak;", "+\t\t\t\t\t\t\t }", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\ttagStart += fragment.getLength();", "+//\t\t\tif (source[tagStart] == '\\r' || source[tagStart] == '\\n') {", "+//\t\t\t\twhile (source[tagStart] == '*' || Character.isWhitespace(source[tagStart])) {", "+//\t\t\t\t\ttagStart++; // purge non-stored characters", "+//\t\t\t\t}", "+//\t\t\t}", "+\t\t\tpreviousFragment = fragment;", "+\t\t}", "+\t\tif (tagElement.isNested()) {", "+\t\t\tassertEquals(\"Wrong end character for \"+tagElement, '}', source[tagStart++]);"]}], "num": 35627}
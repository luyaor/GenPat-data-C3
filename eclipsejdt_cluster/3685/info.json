{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "caaac6e574f0e0bf617c6d6c080dfd4c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da4422448eeae873a2a18112d1fc3094", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/InternalASTRewrite.java", "commitBeforeChange": "9d818d966f2a85328fdb72d739392b1760183111", "commitAfterChange": "9115bb8a229c7ea0533ba010d4fd36e981257274", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate  void markAsMoveOrCopyTarget(ASTNode node, ASTNode newChild)", "signatureAfterChange": "  \tprivate  void markAsMoveOrCopyTarget(ASTNode node, ASTNode newChild)", "diff": ["+\t\tif (this.cloneDepth == 0) {", "+\t\t\twhile (node != null && this.clonedNodes.containsKey(node)) {", "+\t\t\t\t/*", "+\t\t\t\t * A modified node cannot be considered as cloned any more.", "+\t\t\t\t * we can't copy the original formatting/comments and at the same time modify the node.", "+\t\t\t\t * ", "+\t\t\t\t * Workaround for https://bugs.eclipse.org/405699 is to remove such nodes from clonedNodes", "+\t\t\t\t * and instead mark all children as cloned (or skip them if they are not in clonedNodes).", "+\t\t\t\t */", "+\t\t\t\tASTNode orig = (ASTNode) this.clonedNodes.remove(node);", "+\t\t\t\tif (orig != null) {", "+\t\t\t\t\tList properties = node.structuralPropertiesForType();", "+\t\t\t\t\tfor (int i= 0; i < properties.size(); i++) {", "+\t\t\t\t\t\tStructuralPropertyDescriptor property = (StructuralPropertyDescriptor) properties.get(i);", "+\t\t\t\t\t\tObject child = node.getStructuralProperty(property);", "+\t\t\t\t\t\tif (child instanceof ASTNode) {", "+\t\t\t\t\t\t\tmarkAsMoveOrCopyTarget(node, (ASTNode) child);", "+\t\t\t\t\t\t} else if (child instanceof List) {", "+\t\t\t\t\t\t\tList children = (List) child;", "+\t\t\t\t\t\t\tfor (int j= 0; j < children.size(); j++) {", "+\t\t\t\t\t\t\t\tASTNode clonedChild = (ASTNode) children.get(j);", "+\t\t\t\t\t\t\t\tmarkAsMoveOrCopyTarget(node, clonedChild);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tnode = node.getParent();", "+\t\t\t}", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb28dd71f05da99f8679766466e4c081", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/InternalASTRewrite.java", "commitBeforeChange": "e7c5395b4e9c05ba913bf25933d883fecf8ded62", "commitAfterChange": "af7ff2df96d5070816282ef48d7972e5ac07e756", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate  void markAsMoveOrCopyTarget(ASTNode node, ASTNode newChild)", "signatureAfterChange": "  \tprivate  void markAsMoveOrCopyTarget(ASTNode node, ASTNode newChild)", "diff": ["+\t\tif (this.cloneDepth == 0) {", "+\t\t\twhile (node != null && this.clonedNodes.containsKey(node)) {", "+\t\t\t\t/*", "+\t\t\t\t * A modified node cannot be considered as cloned any more.", "+\t\t\t\t * we can't copy the original formatting/comments and at the same time modify the node.", "+\t\t\t\t * ", "+\t\t\t\t * Workaround for https://bugs.eclipse.org/405699 is to remove such nodes from clonedNodes", "+\t\t\t\t * and instead mark all children as cloned (or skip them if they are not in clonedNodes).", "+\t\t\t\t */", "+\t\t\t\tASTNode orig = (ASTNode) this.clonedNodes.remove(node);", "+\t\t\t\tif (orig != null) {", "+\t\t\t\t\tList properties = node.structuralPropertiesForType();", "+\t\t\t\t\tfor (int i= 0; i < properties.size(); i++) {", "+\t\t\t\t\t\tStructuralPropertyDescriptor property = (StructuralPropertyDescriptor) properties.get(i);", "+\t\t\t\t\t\tObject child = node.getStructuralProperty(property);", "+\t\t\t\t\t\tif (child instanceof ASTNode) {", "+\t\t\t\t\t\t\tmarkAsMoveOrCopyTarget(node, (ASTNode) child);", "+\t\t\t\t\t\t} else if (child instanceof List) {", "+\t\t\t\t\t\t\tList children = (List) child;", "+\t\t\t\t\t\t\tfor (int j= 0; j < children.size(); j++) {", "+\t\t\t\t\t\t\t\tASTNode clonedChild = (ASTNode) children.get(j);", "+\t\t\t\t\t\t\t\tmarkAsMoveOrCopyTarget(node, clonedChild);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tnode = node.getParent();", "+\t\t\t}", "+\t\t}", "+\t\t"]}], "num": 3685}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f88bfe08919cfa8ef944a2a3447540d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25ec4ae710e630a38dc47c0e605a02a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "42a83e286ceeeb29630f8c589f53ac9c4faaa3fa", "commitAfterChange": "daca3c57fe8ee65cb418bcec5cbbb6e712e7dc06", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public int computeSeverity(int problemId)", "signatureAfterChange": " public int computeSeverity(int problemId)", "diff": ["-\t\t", "+\t\tcase IProblem.LocalVariableHidingLocalVariable:", "+\t\tcase IProblem.LocalVariableHidingField:", "+\t\tcase IProblem.ArgumentHidingLocalVariable:", "+\t\tcase IProblem.ArgumentHidingField:", "+\t\t\tif ((errorThreshold & CompilerOptions.LocalVariableHiding) != 0){", "+\t\t\t\treturn Error;", "+\t\t\t}", "+\t\t\tif ((warningThreshold & CompilerOptions.LocalVariableHiding) != 0){", "+\t\t\t\treturn Warning;", "+\t\t\t}", "+\t\t\treturn Ignore;\t\t", "+\t\tcase IProblem.ConstructorArgumentHidingField:", "+\t\t\tif ((errorThreshold & CompilerOptions.ConstructorParameterHidingField) != 0){", "+\t\t\t\treturn Error;", "+\t\t\t}", "+\t\t\tif ((warningThreshold & CompilerOptions.ConstructorParameterHidingField) != 0){", "+\t\t\t\treturn Warning;", "+\t\t\t}", "+\t\t\treturn Ignore;\t\t", "+\t\tcase IProblem.FieldHidingLocalVariable:", "+\t\tcase IProblem.FieldHidingField:", "+\t\t\tif ((errorThreshold & CompilerOptions.FieldHiding) != 0){", "+\t\t\t\treturn Error;", "+\t\t\t}", "+\t\t\tif ((warningThreshold & CompilerOptions.FieldHiding) != 0){", "+\t\t\t\treturn Warning;", "+\t\t\t}", "+\t\t\treturn Ignore;\t\t", "+\t  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87e074913b3087323a1be9a2ec0d39cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "2923ed68c1f82d0e305a158b4c5d393b708481eb", "commitAfterChange": "78fb30efd0199bf293193efc0adbb492172aafcc", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tvoid updateSeverity(long irritant, Object severityString)", "signatureAfterChange": " \t \tprotected void updateSeverity(int irritant, Object severityString)", "diff": ["-", "-\tvoid updateSeverity(long irritant, Object severityString) {", "-\t\tif (ERROR.equals(severityString)) {", "-\t\t\tthis.errorThreshold |= irritant;", "-\t\t\tthis.warningThreshold &= ~irritant;", "-\t\t} else if (WARNING.equals(severityString)) {", "-\t\t\tthis.errorThreshold &= ~irritant;", "-\t\t\tthis.warningThreshold |= irritant;", "-\t\t} else if (IGNORE.equals(severityString)) {", "-\t\t\tthis.errorThreshold &= ~irritant;", "-\t\t\tthis.warningThreshold &= ~irritant;", "-\t\t}", "-\t}", "+\tprotected void updateSeverity(int irritant, Object severityString) {", "+\t\tif (ERROR.equals(severityString)) {", "+\t\t\tthis.errorThreshold.set(irritant);", "+\t\t\tthis.warningThreshold.clear(irritant);", "+\t\t} else if (WARNING.equals(severityString)) {", "+\t\t\tthis.errorThreshold.clear(irritant);", "+\t\t\tthis.warningThreshold.set(irritant);", "+\t\t} else if (IGNORE.equals(severityString)) {", "+\t\t\tthis.errorThreshold.clear(irritant);", "+\t\t\tthis.warningThreshold.clear(irritant);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c076b885eff7c37963ef226e83b3445e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "7e5be365074b33481ef62dd48f6cd0d39e341472", "commitAfterChange": "f36e322ad03d5099709a00be20eb1b709bb0eac1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["-\t\t\t// Report constructor parameter hiding another variable", "-\t\t\tif(optionID.equals(OPTION_ReportConstructorParameterHidingField)){", "-\t\t\t\tif (optionValue.equals(ERROR)) {", "-\t\t\t\t\tthis.errorThreshold |= ConstructorParameterHidingField;", "-\t\t\t\t\tthis.warningThreshold &= ~ConstructorParameterHidingField;", "-\t\t\t\t} else if (optionValue.equals(WARNING)) {", "-\t\t\t\t\tthis.errorThreshold &= ~ConstructorParameterHidingField;", "-\t\t\t\t\tthis.warningThreshold |= ConstructorParameterHidingField;", "-\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "-\t\t\t\t\tthis.errorThreshold &= ~ConstructorParameterHidingField;", "-\t\t\t\t\tthis.warningThreshold &= ~ConstructorParameterHidingField;", "+\t\t\t// Report constructor/setter parameter hiding another field", "+\t\t\tif(optionID.equals(OPTION_ReportSpecialParameterHidingField)){", "+\t\t\t\tif (optionValue.equals(ENABLED)) {", "+\t\t\t\t\tthis.reportSpecialParameterHidingField = true;", "+\t\t\t\t} else if (optionValue.equals(DISABLED)) {", "+\t\t\t\t\tthis.reportSpecialParameterHidingField = false;"]}], "num": 14107}
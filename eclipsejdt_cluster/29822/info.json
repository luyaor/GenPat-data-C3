{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4aaabcf02c15a478a3f3640bedf50f45", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0661550dc784a6f88b548152a267c0e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "d7bf97b0906e6821b36f900e536d18f1ccdddff2", "commitAfterChange": "dd10489904dda11a1b9c522a71a4705b9646605e", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " \tpublic void rebindInnerPolies(BoundSet bounds, TypeBinding[] parameterTypes)", "signatureAfterChange": " \tpublic void rebindInnerPolies(BoundSet bounds, TypeBinding[] parameterTypes)", "diff": ["-\t\t\t\tTypeBinding innerTargetType = getParameter(parameterTypes, i, isVarargs);", "-\t\t\t\tMethodBinding binding = innerMessage.binding(innerTargetType);", "+\t\t\t\tTypeBinding innerTargetType = inner.expectedType(); // may be set from acceptPendingPolyArguments", "+\t\t\t\tif (innerTargetType != null && !innerTargetType.isProperType(true))", "+\t\t\t\t\tinnerTargetType = null;", "+\t\t\t\tMethodBinding binding = innerMessage.binding(innerTargetType, innerTargetType != null, this.scope);", "-\t\t\t\t\tASTNode.resolvePolyExpressionArguments(innerMessage, innerBinding);", "+\t\t\t\t\tASTNode.resolvePolyExpressionArguments(innerMessage, innerBinding, this.scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bf600aa0f84234dda4b031b8561877b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "6c76d390a016d2bc042688766f03adca637f8318", "commitAfterChange": "ae0b30b76dcbe89d5bd08d53d907ae7218823168", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void rebindInnerPolies(BoundSet bounds, TypeBinding[] parameterTypes)", "signatureAfterChange": " \tpublic void rebindInnerPolies(BoundSet bounds, TypeBinding[] parameterTypes)", "diff": ["-\t\t\t\tMethodBinding binding = innerMessage.binding(getParameter(parameterTypes, i, isVarargs));", "+\t\t\t\tTypeBinding innerTargetType = getParameter(parameterTypes, i, isVarargs);", "+\t\t\t\tMethodBinding binding = innerMessage.binding(innerTargetType);", "-\t\t\t\tif (innerMessage.updateBindings(innerBinding)) { // only if we are actually improving anything", "-\t\t\t\t\tTypeBinding[] innerArgumentTypes = null;", "-\t\t\t\t\tExpression[] innerArguments = innerMessage.arguments();", "-\t\t\t\t\tif (innerArguments != null) {", "-\t\t\t\t\t\tinnerArgumentTypes = new TypeBinding[innerArguments.length];", "-\t\t\t\t\t\tfor (int j = 0; j < innerArguments.length; j++)", "-\t\t\t\t\t\t\tinnerArgumentTypes[i] = innerArguments[i].resolvedType;", "-\t\t\t\t\t}", "-\t\t\t\t\tASTNode.resolvePolyExpressionArguments(innerMessage, innerBinding, innerArgumentTypes);", "+\t\t\t\tif (innerMessage.updateBindings(innerBinding, innerTargetType)) { // only if we are actually improving anything", "+\t\t\t\t\tASTNode.resolvePolyExpressionArguments(innerMessage, innerBinding);"]}], "num": 29822}
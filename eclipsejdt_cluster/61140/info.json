{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54099b56c197f9a0d0452dc5a280f24c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15015aba2f5a34825b9e59df1a50e746", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void testTypeReferenceBug73336() throws CoreException", "signatureAfterChange": " \tpublic void testBug73336() throws CoreException", "diff": ["+\t */", "+\tpublic void testBug73336() throws CoreException {", "+\t\tICompilationUnit[] workingCopies = new ICompilationUnit[6];", "+\t\ttry {", "+\t\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "+\t\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/A.java\",", "+\t\t\t\t\"package b73336;\\n\" + ", "+\t\t\t\t\"public class A {}\\n\",", "+\t\t\t\towner", "+\t\t\t\t);", "+\t\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/AA.java\",", "+\t\t\t\t\"package b73336;\\n\" + ", "+\t\t\t\t\"public class AA extends A {}\\n\",", "+\t\t\t\towner,", "+\t\t\t\ttrue);", "+\t\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/B.java\",", "+\t\t\t\t\"package b73336;\\n\" + ", "+\t\t\t\t\"public class B extends X<A, A> {\\n\" + ", "+\t\t\t\t\"\t<T> void foo(T t) {}\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\towner,", "+\t\t\t\ttrue);", "+\t\t\tworkingCopies[3] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/C.java\",", "+\t\t\t\t\"package b73336;\\n\" + ", "+\t\t\t\t\"public class C implements I<A> {\\n\" + ", "+\t\t\t\t\"\tpublic void foo() {\\n\" + ", "+\t\t\t\t\"\t\tB b = new B();\\n\" + ", "+\t\t\t\t\"\t\tb.<A>foo(new A());\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\towner,", "+\t\t\t\ttrue\t);", "+\t\t\tworkingCopies[4] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/I.java\",", "+\t\t\t\t\"package b73336;\\n\" + ", "+\t\t\t\t\"public interface I<T>  {\\n\" + ", "+\t\t\t\t\"\tpublic void foo();\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\towner,", "+\t\t\t\ttrue\t);", "+\t\t\tworkingCopies[5] = getWorkingCopy(\"/JavaSearchBugs/src/b73336/X.java\",", "+\t\t\t\t\"package b73336;\\n\" + ", "+\t\t\t\t\"public class X<T, U> {\\n\" + ", "+\t\t\t\t\"\t<V> void foo(V v) {}\\n\" + ", "+\t\t\t\t\"\tclass Member<T> {\\n\" + ", "+\t\t\t\t\"\t\tvoid foo() {}\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\towner,", "+\t\t\t\ttrue\t);", "+\t\t\t// search for first and second method should both return 2 inaccurate matches", "+\t\t\tIType type = workingCopies[0].getType(\"A\");", "+\t\t\tsearch(type,", "+\t\t\t\tREFERENCES,", "+\t\t\t\tgetJavaSearchScopeBugs(\"b73336\", false),", "+\t\t\t\tthis.resultCollector);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b73336/AA.java b73336.AA [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336/B.java b73336.B [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336/B.java b73336.B [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336/C.java b73336.C [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336/C.java void b73336.C.foo() [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336/C.java void b73336.C.foo() [A] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tdiscardWorkingCopies(workingCopies);", "+\t\t}", "+\t}", "-\t */", "-\tpublic void testTypeReferenceBug73336() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs/src/b73336/A.java\").getType(\"A\");", "-\t\t", "-\t\tsearch(type,", "-\t\t\tREFERENCES,", "-\t\t\tgetJavaSearchScopeBugs(\"b73336\", false),", "-\t\t\tresultCollector);", "-\t\t\t\"src/b73336/AA.java b73336.AA [A] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73336/B.java b73336.B [A] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73336/B.java b73336.B [A] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73336/C.java b73336.C [A] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73336/C.java void b73336.C.foo() [A] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73336/C.java void b73336.C.foo() [A] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2aa15bd30e67175290221a589ccf81d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void testMethodReferenceBug72866() throws CoreException", "signatureAfterChange": " \tpublic void testBug72866() throws CoreException", "diff": ["-\t */", "-\tpublic void testMethodReferenceBug72866() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs/src/b72866/V.java\").getType(\"V\");", "-\t\tIMethod method = type.getMethod(\"bar\", new String[] {\"QX;\"});", "-\t\t", "-\t\tsearch(method, REFERENCES, getJavaSearchScopeBugs(), resultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b72866/X.java void b72866.X.foo(V) [bar(this)] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}", "+\t */", "+\tpublic void testBug72866() throws CoreException {", "+\t\tICompilationUnit[] workingCopies = new ICompilationUnit[4];", "+\t\ttry {", "+\t\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "+\t\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b72866/A.java\",", "+\t\t\t\t\"package b72866;\\n\" + ", "+\t\t\t\t\"public abstract class A {\\n\" + ", "+\t\t\t\t\"\tpublic abstract void foo(V v);\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\towner", "+\t\t\t\t);", "+\t\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b72866/SX.java\",", "+\t\t\t\t\"package b72866;\\n\" + ", "+\t\t\t\t\"public class SX extends A {\\n\" + ", "+\t\t\t\t\"\tpublic void foo(V v) {\\n\" + ", "+\t\t\t\t\"\t    v.bar(this);\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\"\t,", "+\t\t\t\towner,", "+\t\t\t\ttrue);", "+\t\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b72866/V.java\",", "+\t\t\t\t\"package b72866;\\n\" + ", "+\t\t\t\t\"public class V {\\n\" + ", "+\t\t\t\t\"\tvoid bar(A a) {}\\n\" + ", "+\t\t\t\t\"\tvoid bar(X x) {}\\n\" + ", "+\t\t\t\t\"\tvoid bar(SX s) {}\\n\" + ", "+\t\t\t\t\"}\\n\"\t,", "+\t\t\t\towner,", "+\t\t\t\ttrue);", "+\t\t\tworkingCopies[3] = getWorkingCopy(\"/JavaSearchBugs/src/b72866/X.java\",", "+\t\t\t\t\"package b72866;\\n\" + ", "+\t\t\t\t\"public class X extends A {\\n\" + ", "+\t\t\t\t\"\tpublic void foo(V v) {\\n\" + ", "+\t\t\t\t\"\t    v.bar(this);\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\"\t,", "+\t\t\t\towner,", "+\t\t\t\ttrue\t);", "+\t\t\t// search for first and second method should both return 2 inaccurate matches", "+\t\t\tIType type = workingCopies[2].getType(\"V\");", "+\t\t\tIMethod method = type.getMethod(\"bar\", new String[] {\"QX;\"});", "+\t\t\tsearch(method, REFERENCES);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b72866/X.java void b72866.X.foo(V) [bar(this)] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tdiscardWorkingCopies(workingCopies);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0321072d1d24f10718f36efeb634bba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "59cddc534051cc4e23e296eb517b3676eee08cc0", "commitAfterChange": "a739bc928d6e81f07965268d15ff502fa14ed12d", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void testTypeReferenceBug73336b() throws CoreException", "signatureAfterChange": " \tpublic void testBug73336b() throws CoreException", "diff": ["+\t}", "+\tpublic void testBug73336b() throws CoreException {", "+\t\tICompilationUnit[] workingCopies = new ICompilationUnit[4];", "+\t\ttry {", "+\t\t\tWorkingCopyOwner owner = new WorkingCopyOwner() {};", "+\t\t\tworkingCopies[0] = getWorkingCopy(\"/JavaSearchBugs/src/b73336b/A.java\",", "+\t\t\t\t\"package b73336b;\\n\" + ", "+\t\t\t\t\"public class A {}\\n\",", "+\t\t\t\towner", "+\t\t\t\t);", "+\t\t\tworkingCopies[1] = getWorkingCopy(\"/JavaSearchBugs/src/b73336b/B.java\",", "+\t\t\t\t\"package b73336b;\\n\" + ", "+\t\t\t\t\"public class B extends X<A, A> {\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\towner,", "+\t\t\t\ttrue);", "+\t\t\tworkingCopies[2] = getWorkingCopy(\"/JavaSearchBugs/src/b73336b/C.java\",", "+\t\t\t\t\"package b73336b;\\n\" + ", "+\t\t\t\t\"public class C extends X<A, A>.Member<A> {\\n\" + ", "+\t\t\t\t\"\tpublic C() {\\n\" + ", "+\t\t\t\t\"\t\tnew X<A, A>().super();\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\towner,", "+\t\t\t\ttrue);", "+\t\t\tworkingCopies[3] = getWorkingCopy(\"/JavaSearchBugs/src/b73336b/X.java\",", "+\t\t\t\t\"package b73336b;\\n\" + ", "+\t\t\t\t\"public class X<T, U> {\\n\" + ", "+\t\t\t\t\"\t<V> void foo(V v) {}\\n\" + ", "+\t\t\t\t\"\tclass Member<T> {\\n\" + ", "+\t\t\t\t\"\t\tvoid foo() {}\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\towner,", "+\t\t\t\ttrue\t);", "+\t\t\t// search for first and second method should both return 2 inaccurate matches", "+\t\t\tIType type = workingCopies[0].getType(\"A\");", "+\t\t\tsearch(type,", "+\t\t\t\tREFERENCES,", "+\t\t\t\tgetJavaSearchScopeBugs(\"b73336b\", false), ", "+\t\t\t\tthis.resultCollector);", "+\t\t\tassertSearchResults(", "+\t\t\t\t\"src/b73336b/B.java b73336b.B [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336b/B.java b73336b.B [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336b/C.java b73336b.C [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336b/C.java b73336b.C [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336b/C.java b73336b.C [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336b/C.java b73336b.C() [A] EXACT_MATCH\\n\" + ", "+\t\t\t\t\"src/b73336b/C.java b73336b.C() [A] EXACT_MATCH\"", "+\t\t\t);", "+\t\t}", "+\t\tfinally {", "+\t\t\tdiscardWorkingCopies(workingCopies);", "+\t\t}", "+\t}", "-\t}", "-\tpublic void testTypeReferenceBug73336b() throws CoreException {", "-\t\tIType type = getCompilationUnit(\"JavaSearchBugs/src/b73336b/A.java\").getType(\"A\");", "-\t\t", "-\t\tsearch(type,", "-\t\t\tREFERENCES,", "-\t\t\tgetJavaSearchScopeBugs(\"b73336b\", false), ", "-\t\t\tresultCollector);", "-\t\tassertSearchResults(", "-\t\t\t\"src/b73336b/B.java b73336b.B [A] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73336b/B.java b73336b.B [A] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73336b/C.java b73336b.C [A] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73336b/C.java b73336b.C [A] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73336b/C.java b73336b.C [A] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73336b/C.java b73336b.C() [A] EXACT_MATCH\\n\" + ", "-\t\t\t\"src/b73336b/C.java b73336b.C() [A] EXACT_MATCH\",", "-\t\t\tresultCollector);", "-\t}"]}], "num": 61140}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "64825ada3246850026d057c95a0d43a7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06a37ca6d98825665585235494f1d54c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "24ecdaaa88a3d3df53c6657b56b1c35a02f254d7", "commitAfterChange": "b77d2ea3108de5650fdc8f1f0c9f51bf7203159f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashtableOfArrayToObject packageFragments, ICompilationUnit[] workingCopies, Map rootToResolvedEntries)", "signatureAfterChange": "  \tpublic NameLookup(IPackageFragmentRoot[] packageFragmentRoots, HashtableOfArrayToObject packageFragments, ICompilationUnit[] workingCopies, Map rootToResolvedEntries)", "diff": ["-\t\t\tthis.unitsToLookInside = new HashMap();", "+\t\t\tthis.typesInWorkingCopies = new HashMap();", "-\t\t\t\tHashMap typeMap = (HashMap) this.unitsToLookInside.get(pkg);", "+\t\t\t\tHashMap typeMap = (HashMap) this.typesInWorkingCopies.get(pkg);", "-\t\t\t\t\tthis.unitsToLookInside.put(pkg, typeMap);", "+\t\t\t\t\tthis.typesInWorkingCopies.put(pkg, typeMap);", "-\t\t\t\t\tfor (int j = 0, typeLength = types.length; j < typeLength; j++) {", "-\t\t\t\t\t\tIType type = types[j];", "-\t\t\t\t\t\tString typeName = type.getElementName();", "-\t\t\t\t\t\tObject existing = typeMap.get(typeName);", "-\t\t\t\t\t\tif (existing == null) {", "-\t\t\t\t\t\t\ttypeMap.put(typeName, type);", "-\t\t\t\t\t\t} else if (existing instanceof IType) {", "-\t\t\t\t\t\t\ttypeMap.put(typeName, new IType[] {(IType) existing, type});", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tIType[] existingTypes = (IType[]) existing;", "-\t\t\t\t\t\t\tint existingTypeLength = existingTypes.length;", "-\t\t\t\t\t\t\tSystem.arraycopy(existingTypes, 0, existingTypes = new IType[existingTypeLength+1], 0, existingTypeLength);", "-\t\t\t\t\t\t\texistingTypes[existingTypeLength] = type;", "-\t\t\t\t\t\t\ttypeMap.put(typeName, existingTypes);", "+\t\t\t\t\tint typeLength = types.length;", "+\t\t\t\t\tif (typeLength == 0) {", "+\t\t\t\t\t\tString typeName = Util.getNameWithoutJavaLikeExtension(workingCopy.getElementName());", "+\t\t\t\t\t\ttypeMap.put(typeName, NO_TYPES);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfor (int j = 0; j < typeLength; j++) {", "+\t\t\t\t\t\t\tIType type = types[j];", "+\t\t\t\t\t\t\tString typeName = type.getElementName();", "+\t\t\t\t\t\t\tObject existing = typeMap.get(typeName);", "+\t\t\t\t\t\t\tif (existing == null) {", "+\t\t\t\t\t\t\t\ttypeMap.put(typeName, type);", "+\t\t\t\t\t\t\t} else if (existing instanceof IType) {", "+\t\t\t\t\t\t\t\ttypeMap.put(typeName, new IType[] {(IType) existing, type});", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tIType[] existingTypes = (IType[]) existing;", "+\t\t\t\t\t\t\t\tint existingTypeLength = existingTypes.length;", "+\t\t\t\t\t\t\t\tSystem.arraycopy(existingTypes, 0, existingTypes = new IType[existingTypeLength+1], 0, existingTypeLength);", "+\t\t\t\t\t\t\t\texistingTypes[existingTypeLength] = type;", "+\t\t\t\t\t\t\t\ttypeMap.put(typeName, existingTypes);", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97ad24a1acf87c2616ddfce3d38b59c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "c3271ff1efc9aa0005c1b38acc4beffb4214faf2", "commitAfterChange": "6ea5da3b3aba0c24a894916fd736da958565abc5", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "\r \tpublic void saving(ISaveContext context) throws CoreException", "signatureAfterChange": "\r \tpublic void saving(ISaveContext context) throws CoreException", "diff": ["-\t\t\r", "-\t\tif (context.getKind() == ISaveContext.FULL_SAVE){\r", "+\r", "+\t\tint k = context.getKind();\r", "+\t\tif (k == ISaveContext.FULL_SAVE){\r", "+\t\t} else if (k == ISaveContext.PROJECT_SAVE){\r", "+\t\t\tPerProjectInfo info = getPerProjectInfo(context.getProject());\r", "+\t\t\tif (info.triedRead)\r", "+\t\t\t\tsaveState(info);\r"]}], "num": 55564}
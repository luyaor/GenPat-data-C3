{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76aa5898d71f03b39c82c92bd60fec21", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "065273dad241167488fcb9a2fe8966d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrLocator.java", "commitBeforeChange": "11d9bc69677fa9c8e3ad183264b865451dc15a16", "commitAfterChange": "0aef5635cdda5f8b487e6520930c462feef51cd5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void match(TypeDeclaration node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(TypeDeclaration node, MatchingNodeSet nodeSet)", "diff": ["-public void match(TypeDeclaration node, MatchingNodeSet nodeSet) {", "-\tfor (int i = 0, length = this.patternLocators.length; i < length; i++)", "-\t\tthis.patternLocators[i].match(node, nodeSet);", "+public int match(TypeDeclaration node, MatchingNodeSet nodeSet) {", "+\tint level = IMPOSSIBLE_MATCH;", "+\tfor (int i = 0, length = this.patternLocators.length; i < length; i++) {", "+\t\tint newLevel = this.patternLocators[i].match(node, nodeSet);", "+\t\tif (newLevel > level) {", "+\t\t\tif (newLevel == ACCURATE_MATCH) return ACCURATE_MATCH;", "+\t\t\tlevel = newLevel;", "+\t\t}", "+\t}", "+\treturn level;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f452072f3494a900fe2850d9f669867", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrLocator.java", "commitBeforeChange": "11d9bc69677fa9c8e3ad183264b865451dc15a16", "commitAfterChange": "0aef5635cdda5f8b487e6520930c462feef51cd5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void match(MessageSend node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(MessageSend node, MatchingNodeSet nodeSet)", "diff": ["-public void match(MessageSend node, MatchingNodeSet nodeSet) {", "-\tfor (int i = 0, length = this.patternLocators.length; i < length; i++)", "-\t\tthis.patternLocators[i].match(node, nodeSet);", "+public int match(MessageSend node, MatchingNodeSet nodeSet) {", "+\tint level = IMPOSSIBLE_MATCH;", "+\tfor (int i = 0, length = this.patternLocators.length; i < length; i++) {", "+\t\tint newLevel = this.patternLocators[i].match(node, nodeSet);", "+\t\tif (newLevel > level) {", "+\t\t\tif (newLevel == ACCURATE_MATCH) return ACCURATE_MATCH;", "+\t\t\tlevel = newLevel;", "+\t\t}", "+\t}", "+\treturn level;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3600dc39fc663d97a133e452bb838c36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrLocator.java", "commitBeforeChange": "11d9bc69677fa9c8e3ad183264b865451dc15a16", "commitAfterChange": "0aef5635cdda5f8b487e6520930c462feef51cd5", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void match(TypeReference node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(TypeReference node, MatchingNodeSet nodeSet)", "diff": ["-public void match(TypeReference node, MatchingNodeSet nodeSet) {", "-\tfor (int i = 0, length = this.patternLocators.length; i < length; i++)", "-\t\tthis.patternLocators[i].match(node, nodeSet);", "+public int match(TypeReference node, MatchingNodeSet nodeSet) {", "+\tint level = IMPOSSIBLE_MATCH;", "+\tfor (int i = 0, length = this.patternLocators.length; i < length; i++) {", "+\t\tint newLevel = this.patternLocators[i].match(node, nodeSet);", "+\t\tif (newLevel > level) {", "+\t\t\tif (newLevel == ACCURATE_MATCH) return ACCURATE_MATCH;", "+\t\t\tlevel = newLevel;", "+\t\t}", "+\t}", "+\treturn level;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "638e2c1493a24034992cf9d08d67b31d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrLocator.java", "commitBeforeChange": "11d9bc69677fa9c8e3ad183264b865451dc15a16", "commitAfterChange": "0aef5635cdda5f8b487e6520930c462feef51cd5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void match(Reference node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(Reference node, MatchingNodeSet nodeSet)", "diff": ["-public void match(Reference node, MatchingNodeSet nodeSet) {", "-\tfor (int i = 0, length = this.patternLocators.length; i < length; i++)", "-\t\tthis.patternLocators[i].match(node, nodeSet);", "+public int match(Reference node, MatchingNodeSet nodeSet) {", "+\tint level = IMPOSSIBLE_MATCH;", "+\tfor (int i = 0, length = this.patternLocators.length; i < length; i++) {", "+\t\tint newLevel = this.patternLocators[i].match(node, nodeSet);", "+\t\tif (newLevel > level) {", "+\t\t\tif (newLevel == ACCURATE_MATCH) return ACCURATE_MATCH;", "+\t\t\tlevel = newLevel;", "+\t\t}", "+\t}", "+\treturn level;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f316fdfe07b4d30e0eaf2f5d1ae4c8f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/OrLocator.java", "commitBeforeChange": "11d9bc69677fa9c8e3ad183264b865451dc15a16", "commitAfterChange": "0aef5635cdda5f8b487e6520930c462feef51cd5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void match(MethodDeclaration node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(MethodDeclaration node, MatchingNodeSet nodeSet)", "diff": ["-public void match(MethodDeclaration node, MatchingNodeSet nodeSet) {", "-\tfor (int i = 0, length = this.patternLocators.length; i < length; i++)", "-\t\tthis.patternLocators[i].match(node, nodeSet);", "+public int match(MethodDeclaration node, MatchingNodeSet nodeSet) {", "+\tint level = IMPOSSIBLE_MATCH;", "+\tfor (int i = 0, length = this.patternLocators.length; i < length; i++) {", "+\t\tint newLevel = this.patternLocators[i].match(node, nodeSet);", "+\t\tif (newLevel > level) {", "+\t\t\tif (newLevel == ACCURATE_MATCH) return ACCURATE_MATCH;", "+\t\t\tlevel = newLevel;", "+\t\t}", "+\t}", "+\treturn level;"]}], "num": 60140}
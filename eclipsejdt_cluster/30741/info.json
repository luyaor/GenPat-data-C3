{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3590a998c1c571cb5918689fd88c073c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0120d210ad929f05f0dfd34982f487dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyNotInClasspathTests.java", "commitBeforeChange": "b200ac7d7ee292ea3a174fc5a4e53520cc708094", "commitAfterChange": "85606d85d072a166e56a66b96ebe50ecf06f8b34", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void testIsOnClasspath() throws CoreException", "signatureAfterChange": " public void testIsOnClasspath() throws CoreException", "diff": ["-\t\ttry {", "-\t\t\tworkingCopy.getJavaProject().isOnClasspath(workingCopy);", "-\t\t\t// shouldn't reach that far, since isOnClasspath should throw an exception (not present)", "-\t\t\tassertTrue(\"working copy shouldn't answer to isOnClasspath (1/2)\", false);", "-\t\t} catch(JavaModelException e) {", "-\t\t}", "-\t\tworkingCopy.getJavaProject().getOptions(true); // bug 31799", "-\t\ttry {", "-\t\t\tworkingCopy.getJavaProject().isOnClasspath(workingCopy);", "-\t\t\t// shouldn't reach that far, since isOnClasspath should throw an exception (not present)", "-\t\t\tassertTrue(\"working copy should dstill not answer to isOnClasspath (2/2)\", false);", "-\t\t} catch(JavaModelException e) {", "-\t\t}", "+\t\t// working creation will cause it to open, and thus request project options", "+\t\ttry {", "+\t\t\tworkingCopy.getJavaProject().isOnClasspath(workingCopy);", "+\t\t\t// shouldn't reach that far, since isOnClasspath should throw an exception (not present)", "+\t\t\tassertTrue(\"working copy shouldn't answer to isOnClasspath\", false);", "+\t\t} catch(JavaModelException e) {", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cbccfb96f7852634b2803ec3ce200a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyNotInClasspathTests.java", "commitBeforeChange": "f412bf1f12d172ee129fe88edc5edc3e752232ac", "commitAfterChange": "b200ac7d7ee292ea3a174fc5a4e53520cc708094", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void testIsOnClasspath() throws CoreException", "signatureAfterChange": " public void testIsOnClasspath() throws CoreException", "diff": ["-\t\tIFile file = this.createFile(\"/P1/src/junit/test/X.java\", source);", "+\t\tIFile file = this.createFile(\"/SimpleProject/src/junit/test/X.java\", source);", "-\t\tassertTrue(\"working copy shouldn't be on classpath (1/2)\", workingCopy.getJavaProject().isOnClasspath(workingCopy));", "-\t\tMap options = workingCopy.getJavaProject().getOptions(true); // bug 31799", "-\t\tassertTrue(\"working copy should still not be on classpath (2/2)\", workingCopy.getJavaProject().isOnClasspath(workingCopy));", "+\t\ttry {", "+\t\t\tworkingCopy.getJavaProject().isOnClasspath(workingCopy);", "+\t\t\t// shouldn't reach that far, since isOnClasspath should throw an exception (not present)", "+\t\t\tassertTrue(\"working copy shouldn't answer to isOnClasspath (1/2)\", false);", "+\t\t} catch(JavaModelException e) {", "+\t\t}", "+\t\tworkingCopy.getJavaProject().getOptions(true); // bug 31799", "+\t\ttry {", "+\t\t\tworkingCopy.getJavaProject().isOnClasspath(workingCopy);", "+\t\t\t// shouldn't reach that far, since isOnClasspath should throw an exception (not present)", "+\t\t\tassertTrue(\"working copy should dstill not answer to isOnClasspath (2/2)\", false);", "+\t\t} catch(JavaModelException e) {", "+\t\t}"]}], "num": 30741}
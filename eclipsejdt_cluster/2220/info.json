{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2bee084df1d78c9c84fb9cd6b31f9c9f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dec24a0876f8da465bf4677227d6d763", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "0b874da6971de1fd32448699ceb47420d2fca967", "commitAfterChange": "26e0fa15f2532c349b39ea632fd814fc4a7186c8", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " public int computeSeverity(int problemId)", "signatureAfterChange": " public int computeSeverity(int problemId)", "diff": ["+\t\tcase IProblem.JavadocGenericMethodTypeArgumentMismatch:", "+\t\tcase IProblem.JavadocNonGenericMethod:", "+\t\tcase IProblem.JavadocIncorrectArityForParameterizedMethod:", "+\t\tcase IProblem.JavadocParameterizedMethodArgumentTypeMismatch:", "+\t\tcase IProblem.JavadocTypeArgumentsForRawGenericMethod:", "+\t\tcase IProblem.JavadocGenericConstructorTypeArgumentMismatch:", "+\t\tcase IProblem.JavadocNonGenericConstructor:", "+\t\tcase IProblem.JavadocIncorrectArityForParameterizedConstructor:", "+\t\tcase IProblem.JavadocParameterizedConstructorArgumentTypeMismatch:", "+\t\tcase IProblem.JavadocTypeArgumentsForRawGenericConstructor:"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8dd1ca01041a38a804ed57f3f1f0694", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "16aeb6ab93a7967781befde8450c33172dc017a7", "commitAfterChange": "272c951df671b1ff904ed6bfcde81c10aeb94ffd", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  \tprivate int getUnqualifiedTypeSignature(String qualifiedTypeSig, int start, int length, StringBuffer unqualifiedTypeSig, boolean noDollar)", "signatureAfterChange": "  \tprivate int getUnqualifiedTypeSignature(String qualifiedTypeSig, int start, int length, StringBuffer unqualifiedTypeSig, boolean noDollar)", "diff": ["+\t\t\t\tcase Signature.C_BOOLEAN :", "+\t\t\t\tcase Signature.C_BYTE :", "+\t\t\t\tcase Signature.C_CHAR :", "+\t\t\t\tcase Signature.C_DOUBLE :", "+\t\t\t\tcase Signature.C_FLOAT :", "+\t\t\t\tcase Signature.C_INT :", "+\t\t\t\tcase Signature.C_LONG :", "+\t\t\t\tcase Signature.C_SHORT :", "+\t\t\t\t\tif (!sigStart) {", "+\t\t\t\t\t\tunqualifiedTypeSig.append(current);", "+\t\t\t\t\t\treturn i+1;", "+\t\t\t\t\t}"]}], "num": 2220}
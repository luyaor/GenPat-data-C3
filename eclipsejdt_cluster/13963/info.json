{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac3ce013311cc40d919592147c0557dd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fd69e4e71ec5e4cbfe3598aaa5b7b64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "a170a70f9fd89b9996c94f318397ff4dca1db782", "commitAfterChange": "25c55f5a3b95044fb71ce56ee0bb0a797b58daa1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t}", "-\tif (compilerOptions.isAnnotationBasedNullAnalysisEnabled && compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8) {", "-\t\tif (this.binding instanceof ParameterizedGenericMethodBinding && this.typeArguments != null) {", "-\t\t\tTypeVariableBinding[] typeVariables = this.binding.original().typeVariables();", "-\t\t\tfor (int i = 0; i < this.typeArguments.length; i++)", "-\t\t\t\tthis.typeArguments[i].checkNullConstraints(currentScope, typeVariables, i);", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdb51e8d3a37f0f0fc8cbb347c19170c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "874e2c41609c64af417834df9af2e898d8dcf37a", "commitAfterChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " private void checkInternalNPE(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, boolean checkString)", "signatureAfterChange": "  public void checkNPE(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, boolean checkString)", "diff": ["-/* check if any dot in this QNR may trigger an NPE. */", "-private void checkInternalNPE(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, boolean checkString) {", "+public void checkNPE(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, boolean checkString) {", "+\t// cannot override localVariableBinding because this would project o.m onto o when", "+\t// analyzing assignments", "-\t} else if ((this.bits & ASTNode.RestrictiveFlagMASK) == Binding.FIELD) {", "-\t\t// look for annotated fields, they do not depend on flow context -> check immediately:", "-\t\tcheckNullableDereference(scope, (FieldBinding) this.binding, this.sourcePositions[0]);", "-\tif (this.otherBindings != null) {", "-\t\t// look for annotated fields, they do not depend on flow context -> check immediately:", "-\t\tint length = this.otherBindings.length - 1; // don't check the last binding", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tcheckNullableDereference(scope, this.otherBindings[i], this.sourcePositions[i+1]);", "-\t\t}", "-\t}", "-}"]}], "num": 13963}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dfd1b8ea452bd6f49c19e750679fe9f9", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7929c0c3916fde5801cab72f7db290df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "aa840c8bcdfb26adabb4ef3914d3bd09d15784c4", "commitAfterChange": "c1f9cc390c170609267b76bee97dfba81631d517", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "signatureAfterChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "diff": ["-\tif (this.binding != null && !this.binding.isUsed() && (this.binding.isPrivate() || (this.binding.declaringClass.tagBits & (TagBits.IsAnonymousType|TagBits.IsLocalType)) == TagBits.IsLocalType)) {", "-\t\tif (!classScope.referenceCompilationUnit().compilationResult.hasSyntaxError) {", "-\t\t\tthis.scope.problemReporter().unusedPrivateConstructor(this);", "+\tcheckUnused: {", "+\t\tMethodBinding constructorBinding;", "+\t\tif ((constructorBinding = this.binding) == null) break checkUnused;", "+\t\tif (this.isDefaultConstructor) break checkUnused;", "+\t\tif (constructorBinding.isUsed()) break checkUnused;", "+\t\tif (constructorBinding.isPrivate()) {", "+\t\t\tif ((this.binding.declaringClass.tagBits & TagBits.HasNonPrivateConstructor) == 0)", "+\t\t\t\tbreak checkUnused; // tolerate as known pattern to block instantiation", "+\t\t} else if ((this.binding.declaringClass.tagBits & (TagBits.IsAnonymousType|TagBits.IsLocalType)) != TagBits.IsLocalType) {", "+\t\t\tbreak checkUnused;", "+\t\t// complain unused", "+\t\tthis.scope.problemReporter().unusedPrivateConstructor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d7e124615f5c86a23624762fa6d94a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "1c0c2bf77ea7eb024038ba5150fcc9eb4dd14084", "commitAfterChange": "1cdb6c1b0fb5ba08d4e282b871474685ab8baf3f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void resolveStatements()", "signatureAfterChange": "  \tpublic void resolveStatements()", "diff": ["-\t\tif (this.binding != null ", "-\t\t\t\t&& (this.binding.tagBits & TagBits.AnnotationOverride) != 0", "-\t\t\t\t&& (this.binding.modifiers & AccOverriding) == 0) {", "-\t\t\tscope.problemReporter().methodMustOverride(this);", "+\t\tif (this.binding != null) {", "+\t\t\t// claims to override, and doesn't actually do so", "+\t\t\tif ((this.binding.tagBits & TagBits.AnnotationOverride) != 0 && (this.binding.modifiers & AccOverriding) == 0) {", "+\t\t\t\tscope.problemReporter().methodMustOverride(this);", "+\t\t\t}", "+\t\t\t// actually overrides, but did not claim to do so", "+\t\t\tif ((this.binding.tagBits & TagBits.AnnotationOverride) == 0 ", "+\t\t\t\t\t&& (this.binding.modifiers & AccOverriding) != 0", "+\t\t\t\t\t&& scope.environment().options.sourceLevel >= JDK1_5) {", "+\t\t\t\tscope.problemReporter().missingOverrideAnnotation(this);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c85c2ee8e56af478b442a2909b42baa6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java", "commitBeforeChange": "0eda4899fe49711eb207c4c5710f5520d9ea2e2d", "commitAfterChange": "4a8da6910e1c14334403dae0988de171cbd44126", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void analyseCode(ClassScope classScope, InitializationFlowContext initializationContext, FlowInfo flowInfo)", "signatureAfterChange": "  \tpublic void analyseCode(ClassScope classScope, InitializationFlowContext initializationContext, FlowInfo flowInfo)", "diff": ["-\t\t\tif (!this.binding.isUsed() &&", "-\t\t\t\t\t(this.binding.isPrivate()", "-\t\t\t\t\t\t|| (((this.binding.modifiers & (ExtraCompilerModifiers.AccOverriding|ExtraCompilerModifiers.AccImplementing)) == 0) && this.binding.declaringClass.isLocalType()))) {", "-\t\t\t\tif (!classScope.referenceCompilationUnit().compilationResult.hasSyntaxError) {", "-\t\t\t\t\tthis.scope.problemReporter().unusedPrivateMethod(this);", "+\t\t\tif (!this.binding.isUsed()) {", "+\t\t\t\tif (this.binding.isPrivate()", "+\t\t\t\t\t|| (((this.binding.modifiers & (ExtraCompilerModifiers.AccOverriding|ExtraCompilerModifiers.AccImplementing)) == 0)", "+\t\t\t\t\t\t&& this.binding.isOrEnclosedByPrivateType())) {", "+\t\t\t\t\tif (!classScope.referenceCompilationUnit().compilationResult.hasSyntaxError) {", "+\t\t\t\t\t\tthis.scope.problemReporter().unusedPrivateMethod(this);", "+\t\t\t\t\t}"]}], "num": 15275}
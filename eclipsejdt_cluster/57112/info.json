{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ddc5329aa45fd17194c420e6dfee9dd3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a6f581cceda5fa9a84223abd305f107", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "fe01542fcd3aa3aadeb3ef9dbecdc34ba5993c8d", "commitAfterChange": "e89bfd441ddc86e7db4459ee29b0092f7959a77e", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 26, "signatureBeforeChange": "  protected void consumeEnterVariable()", "signatureAfterChange": "  protected void consumeEnterVariable()", "diff": ["+", "+protected void consumeEnterVariable() {", "+\tboolean isLocalDeclaration = this.nestedMethod[this.nestedType] != 0; ", "+\tsuper.consumeEnterVariable();", "+\tif (isLocalDeclaration) {", "+\t\tif ((this.patternFineGrain & IJavaSearchConstants.LOCAL_VARIABLE_DECLARATION_TYPE_REFERENCE) != 0) {", "+\t\t\tLocalDeclaration localDeclaration = (LocalDeclaration) this.astStack[this.astPtr];", "+\t\t\tthis.patternLocator.match(localDeclaration.type, this.nodeSet);", "+\t\t}", "+\t} else {", "+\t\tif ((this.patternFineGrain & IJavaSearchConstants.FIELD_DECLARATION_TYPE_REFERENCE) != 0) {", "+\t\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) this.astStack[this.astPtr];", "+\t\t\tthis.patternLocator.match(fieldDeclaration.type, this.nodeSet);", "+\t\t}", "+\t}", "+}", "-", "-protected void consumeEnterVariable() {", "-\tint grain = IJavaSearchConstants.FIELD_DECLARATION_TYPE_REFERENCE | IJavaSearchConstants.LOCAL_VARIABLE_DECLARATION_TYPE_REFERENCE;", "-\tthis.typeRefFineGrain |= grain;", "-\tsuper.consumeEnterVariable();", "-\tthis.typeRefFineGrain &= ~grain;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc4aa53cb6fb7bc0f8da9af863b0c636", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "818dca3cf84fd118ea99497de1f8b977d4253551", "commitAfterChange": "52f6144c4e9af7092e9f26d44a5197a00c39427c", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "  \tprivate int printJavadocBlockNodesNewLines(FormatJavadocBlock block, FormatJavadocNode node, int previousEnd)", "signatureAfterChange": "  \tprivate int printJavadocBlockNodesNewLines(FormatJavadocBlock block, FormatJavadocNode node, int previousEnd)", "diff": ["-\t    \tint newLines = 0;", "-\t    \tif (node.isText()) {", "-\t    \t\tFormatJavadocText text = (FormatJavadocText)node;", "-    \t\t\tif (text.isImmutableHtmlTag()) {", "+\t\t\tFormatJavadocText text = null;", "+\t\t\tboolean isImmutableNode = node.isImmutable();", "+\t\t\tboolean nodeIsText = node.isText();", "+\t\t\tif (nodeIsText) {", "+\t    \t\ttext = (FormatJavadocText)node;", "+\t\t\t} else {", "+\t\t\t\tFormatJavadocBlock inlinedBlock = (FormatJavadocBlock)node;", "+\t\t\t\tif (isImmutableNode) {", "+\t\t\t\t\ttext = (FormatJavadocText) inlinedBlock.getLastNode();", "+\t\t    \t\tlength += inlinedBlock.tagEnd - inlinedBlock.sourceStart + 1;  // tag length", "+\t\t\t    \tif (nodeStart > (previousEnd+1)) {", "+\t\t\t    \t\tlength++; // include space between nodes", "+\t\t\t    \t}", "+\t\t\t\t\tthis.scanner.resetTo(text.sourceStart , node.sourceEnd);", "+\t\t\t\t}", "+\t\t\t}", "+\t    \tif (text != null) {", "+    \t\t\tif (isImmutableNode) {", "-\t\t    \t\t\t\t\t\tif (CharOperation.indexOf('\\n', this.scanner.source, this.scanner.startPosition, this.scanner.currentPosition) >= 0) {", "-\t\t    \t\t\t\t\t\t\treturn newLines;", "+\t\t    \t\t\t\t\t\tif (nodeIsText) {", "+\t\t\t    \t\t\t\t\t\tif (CharOperation.indexOf('\\n', this.scanner.source, this.scanner.startPosition, this.scanner.currentPosition) >= 0) {", "+\t\t\t    \t\t\t\t\t\t\treturn 0;", "+\t\t\t    \t\t\t\t\t\t}", "-\t\t\t\t\t\t\tnewLines++;", "-\t\t\t\t    \t\tif (headerLine) {", "-\t\t\t\t\t\t\t\tmaxColumn--;", "-\t\t\t\t\t\t\t\theaderLine = false;", "-\t\t\t    \t\t\t}", "-\t\t\t\t\t\t\tlastColumn = firstColumn;", "+\t    \t\t\t\t\treturn 1;", "-\t    \t\t\treturn newLines;", "+\t    \t\t\treturn 0;"]}], "num": 57112}
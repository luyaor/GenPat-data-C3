{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b309e356480d99b7f3f7df66d833a2b6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "891117d83ae42639969fedd6f4acadca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "e5d472ae376881b61d2a17c3e23cd62b7ed964f0", "commitAfterChange": "447de272007f97647787cc473ca78784fcaddeeb", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic IJavaElement findElement(IPath path, WorkingCopyOwner owner) throws JavaModelException", "signatureAfterChange": " \tpublic IJavaElement findElement(IPath path, WorkingCopyOwner owner) throws JavaModelException", "diff": ["-", "-\t\t\t\tNameLookup lookup = newNameLookup((WorkingCopyOwner)null/*no need to look at working copies for pkgs*/);", "-\t\t\t\tIPackageFragment[] pkgFragments = lookup.findPackageFragments(packageName, false);", "-\t\t\t\tif (pkgFragments == null) {", "-\t\t\t\t\treturn null;", "-", "-\t\t\t\t} else {", "-\t\t\t\t\t// try to return one that is a child of this project", "-\t\t\t\t\tfor (int i = 0, length = pkgFragments.length; i < length; i++) {", "-", "-\t\t\t\t\t\tIPackageFragment pkgFragment = pkgFragments[i];", "-\t\t\t\t\t\tif (this.equals(pkgFragment.getParent().getParent())) {", "-\t\t\t\t\t\t\treturn pkgFragment;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\t// default to the first one", "-\t\t\t\t\treturn pkgFragments[0];", "-\t\t\t\t}", "+\t\t\t\treturn findPackageFragment(packageName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afec2d705812fc84a36994d14a423e4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \tpublic void indexAll(IProject project)", "signatureAfterChange": "\r public void indexAll(IProject project)", "diff": ["-\t */\r", "-\tpublic void indexAll(IProject project) {\r", "-\t\tif (JavaCore.getPlugin() == null || this.workspace == null)\r", "-\t\t\treturn;\r", "-\r", "-\t\t// Also request indexing of binaries on the classpath\r", "-\t\t// determine the new children\r", "-\t\t\tIJavaModel model = JavaModelManager.getJavaModel(this.workspace);\r", "-\t\t\tIJavaProject javaProject = ((JavaModel) model).getJavaProject(project);\r", "-\t\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true);\r", "-\t\t\tfor (int i = 0; i < entries.length; i++) {\r", "-\t\t\t\tIClasspathEntry entry = entries[i];\r", "-\t\t\t\tIPackageFragmentRoot[] roots = javaProject.getPackageFragmentRoots(entry);\r", "-\t\t\t\tfor (int j = 0; j < roots.length; j++) {\r", "-\t\t\t\t\tIPackageFragmentRoot root = roots[j];\r", "-\t\t\t\t\tif (root.exists()) {\r", "-\t\t\t\t\t\tif (root.isArchive()) {\r", "-\t\t\t\t\t\t\tIResource rsc = root.getUnderlyingResource();\r", "-\t\t\t\t\t\t\tif (rsc == null) {\r", "-\t\t\t\t\t\t\t\tindexJarFile(root, project.getName());\r", "-\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\tindexJarFile((IFile) rsc, project.getName());\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t} catch (JavaModelException e) { // cannot retrieve classpath info\r", "-\t\t}\r", "-\t\trequest(new IndexAllProject(project, this));\r", "-\t}\r", "+ */\r", "+public void indexAll(IProject project){\r", "+\tif (JavaCore.getPlugin() == null || this.workspace == null) return;\r", "+\r", "+\t// Also request indexing of binaries on the classpath\r", "+\t// determine the new children\r", "+\ttry {\r", "+\t\tIJavaModel model = JavaModelManager.getJavaModel(this.workspace);\r", "+\t\tIJavaProject javaProject = ((JavaModel) model).getJavaProject(project);\t\r", "+\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true);\t\r", "+\t\tfor (int i = 0; i < entries.length; i++) {\r", "+\t\t\tIClasspathEntry entry= entries[i];\r", "+\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY){\r", "+\t\t\t\tindexJarFile(entry.getPath(), project.getName());\r", "+\t} catch(JavaModelException e){ // cannot retrieve classpath info\r", "+\t}\t\r", "+\trequest(new IndexAllProject(project, this));\r", "+}\r"]}], "num": 58576}
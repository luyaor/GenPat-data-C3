{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57b6437ab70d58858da40f079f9dcc7a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "712bf1a1475a090791b35d3dd12e878c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "63893780bad36827f62e4f410f92f9cc758dcd3a", "commitAfterChange": "8e69a3a7281a71cf8bb89a21d1bb526115e1dbf1", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment, boolean recurseInContainers)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspathEntry(IJavaProject project, IClasspathEntry entry, boolean checkSourceAttachment, boolean recurseInContainers)", "diff": ["+\t\t\t\t\t\t\t// Validate extra attributes", "+\t\t\t\t\t\t\tIClasspathAttribute[] extraAttributes = entry.getExtraAttributes();", "+\t\t\t\t\t\t\tif (extraAttributes != null) {", "+\t\t\t\t\t\t\t\tint length = extraAttributes.length;", "+\t\t\t\t\t\t\t\tHashSet set = new HashSet(length);", "+\t\t\t\t\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\t\t\t\t\tString attName = extraAttributes[i].getName();", "+\t\t\t\t\t\t\t\t\tif (!set.add(attName)) {", "+\t\t\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION, Messages.bind(Messages.classpath_duplicateEntryExtraAttribute, new String[] {attName, entryPathMsg, projectName})); ", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+", "+\t\t// Validate extra attributes", "+\t\tIClasspathAttribute[] extraAttributes = entry.getExtraAttributes();", "+\t\tif (extraAttributes != null) {", "+\t\t\tint length = extraAttributes.length;", "+\t\t\tHashSet set = new HashSet(length);", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tString attName = extraAttributes[i].getName();", "+\t\t\t\tif (!set.add(attName)) {", "+\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION, Messages.bind(Messages.classpath_duplicateEntryExtraAttribute, new String[] {attName, entryPathMsg, projectName})); ", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1546fd8b0e725d7c43d56e0b3076818", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "f4a4e733ec9a6ee8e5480938f7f746aa2704ad0d", "commitAfterChange": "f775b73fdbd5c38023656e438f9ccb262941721f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["+\t    boolean isClassScope = scope.kind == Scope.CLASS_SCOPE;", "+\t\t\t// be resilient, still attempt resolving arguments", "+\t\t\tif (binding instanceof ProblemReferenceBinding) {", "+\t\t\t    TypeReference[] args = this.typeArguments[((ProblemReferenceBinding) binding).compoundName.length - 1];", "+\t\t\t    if (args != null) {", "+\t\t\t\t\tint argLength = args.length;", "+\t\t\t\t\tfor (int j = 0; j < argLength; j++) {", "+\t\t\t\t\t    TypeReference typeArgument = args[j];", "+\t\t\t\t\t    if (isClassScope) {", "+\t\t\t\t\t    \ttypeArgument.resolveType((ClassScope) scope);", "+\t\t\t\t\t    } else {", "+\t\t\t\t\t    \ttypeArgument.resolveType((BlockScope) scope, checkBounds);", "+\t\t\t\t\t    }", "+\t\t\t\t\t}", "+\t\t\t    }\t\t\t\t", "+\t\t\t}", "-\t    boolean isClassScope = scope.kind == Scope.CLASS_SCOPE;", "+\t\t\t\t// be resilient, still attempt resolving arguments", "+\t\t\t    TypeReference[] args = this.typeArguments[i];", "+\t\t\t    if (args != null) {", "+\t\t\t\t\tint argLength = args.length;", "+\t\t\t\t\tfor (int j = 0; j < argLength; j++) {", "+\t\t\t\t\t    TypeReference typeArgument = args[j];", "+\t\t\t\t\t    if (isClassScope) {", "+\t\t\t\t\t    \ttypeArgument.resolveType((ClassScope) scope);", "+\t\t\t\t\t    } else {", "+\t\t\t\t\t    \ttypeArgument.resolveType((BlockScope) scope);", "+\t\t\t\t\t    }", "+\t\t\t\t\t}", "+\t\t\t    }\t\t\t\t"]}], "num": 52567}
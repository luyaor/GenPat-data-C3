{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bfe09b5cf70d0eae111657ed854efbe3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b6e6b17b89598fdb0570d487f26dc5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddCompilationUnitToIndex.java", "commitBeforeChange": "7139526b453f0e67eab8762699884060db7f0843", "commitAfterChange": "2acf337b771d06ad716c2ae54bdb8443b5b5d1d6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tprotected boolean indexDocument(IIndex index) throws IOException", "diff": ["-\t}", "-\tpublic boolean execute(IProgressMonitor progressMonitor) {", "-\t\tif (progressMonitor != null && progressMonitor.isCanceled()) return COMPLETE;", "-\t\ttry {", "-\t\t\tIIndex index = manager.getIndex(this.indexedContainer, true /*reuse index file*/, true /*create if none*/);", "-", "-\t\t\t/* ensure no concurrent write access to index */", "-\t\t\tif (index == null)", "-\t\t\t\treturn COMPLETE;", "-\t\t\tReadWriteMonitor monitor = manager.getMonitorFor(index);", "-\t\t\tif (monitor == null)", "-\t\t\t\treturn COMPLETE; // index got deleted since acquired", "+\t}", "+\tprotected boolean indexDocument(IIndex index) throws IOException {", "+\t\tif (!initializeContents()) return false;", "+\t\tindex.add(new IFileDocument(resource, this.contents), new SourceIndexer(resource));", "+\t\treturn true;", "+\t}", "-\t\t\t\tmonitor.enterWrite(); // ask permission to write", "-\t\t\t\tchar[] contents = this.getContents();", "-\t\t\t\tif (contents == null)", "-\t\t\t\t\treturn FAILED;", "-\t\t\t\tindex.add(new IFileDocument(resource, contents), new SourceIndexer(resource));", "-\t\t\t} finally {", "-\t\t\t\tmonitor.exitWrite(); // free write lock", "-\t\t} catch (IOException e) {", "-\t\t\tif (JobManager.VERBOSE) {", "-\t\t\t\tJobManager.verbose(\"-> failed to index \" + this.resource + \" because of the following exception:\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\te.printStackTrace();", "-\t\t\t}", "-\t\t\treturn FAILED;", "-\t\treturn COMPLETE;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bdb826dd023be471230a3d835905e4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddClassFileToIndex.java", "commitBeforeChange": "7139526b453f0e67eab8762699884060db7f0843", "commitAfterChange": "2acf337b771d06ad716c2ae54bdb8443b5b5d1d6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tprotected boolean indexDocument(IIndex index) throws IOException", "diff": ["+\tprotected boolean indexDocument(IIndex index) throws IOException {", "+\t\tif (!initializeContents()) return false;", "+\t\tindex.add(new IFileDocument(resource, this.contents), new BinaryIndexer(true));", "+\t\treturn true;", "-\tpublic boolean execute(IProgressMonitor progressMonitor) {", "-\t\t", "-\t\tif (progressMonitor != null && progressMonitor.isCanceled()) return COMPLETE;", "-\t\t", "-\t\ttry {", "-\t\t\tIIndex index = manager.getIndex(this.indexedContainer, true /*reuse index file*/, true /*create if none*/);", "-\t\t\t/* ensure no concurrent write access to index */", "-\t\t\tif (index == null)", "-\t\t\t\treturn COMPLETE;", "-\t\t\tReadWriteMonitor monitor = manager.getMonitorFor(index);", "-\t\t\tif (monitor == null)", "-\t\t\t\treturn COMPLETE; // index got deleted since acquired", "-\t\t\t\tmonitor.enterWrite(); // ask permission to write", "-\t\t\t\tbyte[] contents = this.getContents();", "-\t\t\t\tif (contents == null)", "-\t\t\t\t\treturn FAILED;", "-\t\t\t\tindex.add(new IFileDocument(resource, contents), new BinaryIndexer(true));", "-\t\t\t} finally {", "-\t\t\t\tmonitor.exitWrite(); // free write lock", "-\t\t} catch (IOException e) {", "-\t\t\tif (JobManager.VERBOSE) {", "-\t\t\t\tJobManager.verbose(\"-> failed to index \" + this.resource + \" because of the following exception:\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\te.printStackTrace();", "-\t\t\t}", "-\t\t\treturn FAILED;", "-\t\treturn COMPLETE;", "-\t}"]}], "num": 72009}
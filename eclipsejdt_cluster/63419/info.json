{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7af414ef3903101eb2d538086d7a0eb8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ad6a52cf7f57654b8e89e0e9b118d5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java", "commitBeforeChange": "24c681585ef2f4b155e3d0f5cb2c551e612e2484", "commitAfterChange": "1075c02575f13a345cda8e06bd18891df8b3e61e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate void setDeprecatedOptions(Map settings)", "signatureAfterChange": " \tprivate void setDeprecatedOptions(Map settings)", "diff": ["-\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=122247", "+\t\t// New line after annotations", "-\t\tif (insertNewLineAfterAnnotationOption != null) { // check if deprecated option was used", "-\t\t\tthis.insert_new_line_after_annotation_on_member = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOption);", "-\t\t\tthis.insert_new_line_after_annotation_on_parameter = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOption);", "-\t\t\tthis.insert_new_line_after_annotation_on_local_variable = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOption);", "+\t\tif (insertNewLineAfterAnnotationOption != null) { // check if deprecated 3.1 option was used", "+\t\t\tboolean insert = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOption);", "+\t\t\tthis.insert_new_line_after_annotation_on_type = insert;", "+\t\t\tthis.insert_new_line_after_annotation_on_field = insert;", "+\t\t\tthis.insert_new_line_after_annotation_on_method = insert;", "+\t\t\tthis.insert_new_line_after_annotation_on_package = insert;", "+\t\t\tthis.insert_new_line_after_annotation_on_parameter = insert;", "+\t\t\tthis.insert_new_line_after_annotation_on_local_variable = insert;", "-\t\t\tif (insertNewLineAfterAnnotationOnMemberOption != null) { // otherwhise, use the new options", "-\t\t\t\tthis.insert_new_line_after_annotation_on_member = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnMemberOption);", "+\t\t\tif (insertNewLineAfterAnnotationOnMemberOption != null) { // check if deprecated 3.4 option was used", "+\t\t\t\tboolean insert = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnMemberOption);", "+\t\t\t\tthis.insert_new_line_after_annotation_on_type = insert;", "+\t\t\t\tthis.insert_new_line_after_annotation_on_field = insert;", "+\t\t\t\tthis.insert_new_line_after_annotation_on_method = insert;", "+\t\t\t\tthis.insert_new_line_after_annotation_on_package = insert;", "+\t\t\t} else { // otherwise use new options", "+\t\t\t\tfinal Object insertNewLineAfterAnnotationOnTypeOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_TYPE);", "+\t\t\t\tif (insertNewLineAfterAnnotationOnTypeOption != null) {", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_type = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnTypeOption);", "+\t\t\t\t}", "+\t\t\t\tfinal Object insertNewLineAfterAnnotationOnFieldOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_FIELD);", "+\t\t\t\tif (insertNewLineAfterAnnotationOnFieldOption != null) {", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_field = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnFieldOption);", "+\t\t\t\t}", "+\t\t\t\tfinal Object insertNewLineAfterAnnotationOnMethodOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_METHOD);", "+\t\t\t\tif (insertNewLineAfterAnnotationOnMethodOption != null) {", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_method = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnMethodOption);", "+\t\t\t\t}", "+\t\t\t\tfinal Object insertNewLineAfterAnnotationOnPackageOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PACKAGE);", "+\t\t\t\tif (insertNewLineAfterAnnotationOnPackageOption != null) {", "+\t\t\t\t\tthis.insert_new_line_after_annotation_on_package = JavaCore.INSERT.equals(insertNewLineAfterAnnotationOnPackageOption);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78cabe208af527c5c32c87ee38375a5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "6781b5445d9813f939573ded9d37ee82c9dbbd15", "commitAfterChange": "6989e5bb4ed8f3be37ea69298930332629e9b475", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["+\t\tboolean isRawMemberInvocation = !method.isStatic() && !receiverType.isUnboundWildcard() && method.declaringClass.isRawType() && method.hasSubstitutedParameters();", "+\t\tMethodBinding rawOriginalGenericMethod = null;", "+\t\tif (!isRawMemberInvocation) {", "+\t\t\tif (method instanceof ParameterizedGenericMethodBinding) {", "+\t\t\t\tif (((ParameterizedGenericMethodBinding)method).isRaw && method.hasSubstitutedParameters()) {", "+\t\t\t\t\trawOriginalGenericMethod = method.original();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-\t\t\tfor (int i = 0; i < lastIndex; i++)", "-\t\t\t    if (checkInvocationArgument(scope, arguments[i], params[i], argumentTypes[i]))", "+\t\t\tfor (int i = 0; i < lastIndex; i++) {", "+\t\t\t\tTypeBinding originalRawParam = rawOriginalGenericMethod == null ? null : rawOriginalGenericMethod.parameters[i];", "+\t\t\t    if (checkInvocationArgument(scope, arguments[i], params[i] , argumentTypes[i], originalRawParam)) {", "+\t\t\t    }", "+\t\t\t}", "-\t\t\t    if (params.length != argLength || parameterType.dimensions() != argumentTypes[lastIndex].dimensions())", "+\t\t\t\tTypeBinding originalRawParam = null;", "+", "+\t\t\t    if (params.length != argLength || parameterType.dimensions() != argumentTypes[lastIndex].dimensions()) {", "-\t\t\t\tfor (int i = lastIndex; i < argLength; i++)", "-\t\t\t\t    if (checkInvocationArgument(scope, arguments[i], parameterType, argumentTypes[i]))", "+\t\t\t\t\toriginalRawParam = rawOriginalGenericMethod == null ? null : ((ArrayBinding)rawOriginalGenericMethod.parameters[lastIndex]).elementsType();", "+\t\t\t    }", "+\t\t\t\tfor (int i = lastIndex; i < argLength; i++) {", "+\t\t\t\t    if (checkInvocationArgument(scope, arguments[i], parameterType, argumentTypes[i], originalRawParam))", "+\t\t\t\t}", "-\t\t\tfor (int i = 0, argLength = arguments.length; i < argLength; i++)", "-\t\t\t    if (checkInvocationArgument(scope, arguments[i], params[i], argumentTypes[i]))", "+\t\t\tfor (int i = 0, argLength = arguments.length; i < argLength; i++) {", "+\t\t\t\tTypeBinding originalRawParam = rawOriginalGenericMethod == null ? null : rawOriginalGenericMethod.parameters[i];", "+\t\t\t    if (checkInvocationArgument(scope, arguments[i], params[i], argumentTypes[i], originalRawParam))", "+\t\t\t}", "+\t\t} else if (rawOriginalGenericMethod != null) {", "+\t\t    scope.problemReporter().unsafeRawGenericMethodInvocation((ASTNode)invocationSite, method);"]}], "num": 63419}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66dcc72a42686af19f6791d1ccf6eea5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32a7bc8e3fa9f1acb42947a1513f7029", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "abe6a4b8c7a37b999ce782468f77dcc11e925eae", "commitAfterChange": "b3906111a4433325958de7604465d8f0e49325d2", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tpublic MethodBinding getSingleAbstractMethod(final Scope scope, boolean replaceWildcards)", "signatureAfterChange": " \tpublic MethodBinding getSingleAbstractMethod(final Scope scope, boolean replaceWildcards)", "diff": ["+\t\tint index = replaceWildcards ? 0 : 1;", "-\t\t\treturn this.singleAbstractMethod;", "+\t\t\tif (this.singleAbstractMethod[index] != null)", "+\t\t\treturn this.singleAbstractMethod[index];", "+\t\t} else {", "+\t\t\tthis.singleAbstractMethod = new MethodBinding[2];", "-\t\t\treturn this.singleAbstractMethod = theAbstractMethod;", "+\t\t\treturn this.singleAbstractMethod[index] = theAbstractMethod;", "-\t\t\t\treturn this.singleAbstractMethod = new ProblemMethodBinding(TypeConstants.ANONYMOUS_METHOD, null, ProblemReasons.NotAWellFormedParameterizedType);", "+\t\t\t\treturn this.singleAbstractMethod[index] = new ProblemMethodBinding(TypeConstants.ANONYMOUS_METHOD, null, ProblemReasons.NotAWellFormedParameterizedType);", "-\t\t\t\treturn this.singleAbstractMethod = new ProblemMethodBinding(TypeConstants.ANONYMOUS_METHOD, null, ProblemReasons.NotAWellFormedParameterizedType);\t\t\t", "+\t\t\t\treturn this.singleAbstractMethod[index] = new ProblemMethodBinding(TypeConstants.ANONYMOUS_METHOD, null, ProblemReasons.NotAWellFormedParameterizedType);\t\t\t", "-\t\t\tthis.singleAbstractMethod = method;", "+\t\t\tthis.singleAbstractMethod[index] = method;", "-\t\treturn this.singleAbstractMethod;", "+\t\treturn this.singleAbstractMethod[index];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf41dcb563c7cce702826fe5d3860df2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "efe1773a267b3bdb803164d9b413b69c3685878f", "commitAfterChange": "0376a8916bf0d47726d1ecccdbf4f7791bd5714e", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic MethodBinding getSingleAbstractMethod(final Scope scope, boolean replaceWildcards)", "signatureAfterChange": " \tpublic MethodBinding getSingleAbstractMethod(final Scope scope, boolean replaceWildcards)", "diff": ["-\t\t\tif (typeParameters[i].boundCheck(null, types[i], scope) != TypeConstants.OK)", "-\t\t\t\treturn this.singleAbstractMethod = new ProblemMethodBinding(TypeConstants.ANONYMOUS_METHOD, null, ProblemReasons.NotAWellFormedParameterizedType);", "-\t\tReferenceBinding declaringType = scope.environment().createParameterizedType(genericType, types, genericType.enclosingType());", "-\t\tdeclaringType = (ReferenceBinding) declaringType.findSuperTypeOriginatingFrom(theAbstractMethod.declaringClass);", "-\t\tMethodBinding [] choices = declaringType.getMethods(theAbstractMethod.selector);", "+\t\tParameterizedTypeBinding declaringType = scope.environment().createParameterizedType(genericType, types, genericType.enclosingType());", "+\t\tfor (int i = 0, length = typeParameters.length; i < length; i++) {", "+\t\t\tif (typeParameters[i].boundCheck(declaringType, types[i], scope) != TypeConstants.OK)", "+\t\t\t\treturn this.singleAbstractMethod = new ProblemMethodBinding(TypeConstants.ANONYMOUS_METHOD, null, ProblemReasons.NotAWellFormedParameterizedType);\t\t\t", "+\t\t}", "+\t\tReferenceBinding substitutedDeclaringType = (ReferenceBinding) declaringType.findSuperTypeOriginatingFrom(theAbstractMethod.declaringClass);", "+\t\tMethodBinding [] choices = substitutedDeclaringType.getMethods(theAbstractMethod.selector);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2bb46874da4e8e2b0327d301056829e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "abe6a4b8c7a37b999ce782468f77dcc11e925eae", "commitAfterChange": "b3906111a4433325958de7604465d8f0e49325d2", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": " public MethodBinding getSingleAbstractMethod(Scope scope, boolean replaceWildcards)", "signatureAfterChange": " public MethodBinding getSingleAbstractMethod(Scope scope, boolean replaceWildcards)", "diff": ["+\tint index = replaceWildcards ? 0 : 1;", "-\t\treturn this.singleAbstractMethod;", "+\t\tif (this.singleAbstractMethod[index] != null)", "+\t\treturn this.singleAbstractMethod[index];", "+\t} else {", "+\t\tthis.singleAbstractMethod = new MethodBinding[2];", "-\t\treturn this.singleAbstractMethod = samProblemBinding;", "+\t\treturn this.singleAbstractMethod[index] = samProblemBinding;", "-\t\treturn this.singleAbstractMethod = methods[0];", "+\t\treturn this.singleAbstractMethod[index] = methods[0];", "-\t\tthis.singleAbstractMethod = new MethodBinding(theAbstractMethod.modifiers, ", "+\t\tthis.singleAbstractMethod[index] = new MethodBinding(theAbstractMethod.modifiers, ", "-\t    this.singleAbstractMethod.typeVariables = theAbstractMethod.typeVariables;", "-\t\treturn this.singleAbstractMethod;", "+\t    this.singleAbstractMethod[index].typeVariables = theAbstractMethod.typeVariables;", "+\t\treturn this.singleAbstractMethod[index];", "-\treturn this.singleAbstractMethod = samProblemBinding;", "+\treturn this.singleAbstractMethod[index] = samProblemBinding;"]}], "num": 3100}
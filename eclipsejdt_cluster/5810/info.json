{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "359fa7e7e6635176be79524f04c9e82b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "184d9ec96fe202d35a8a6d53db0448f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetCodeStream.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void getBaseTypeValue(int baseTypeID)", "signatureAfterChange": " public void getBaseTypeValue(int baseTypeID)", "diff": ["-\tthis.countLabels = 0;", "-\tif (classFileOffset + 2 >= bCodeStream.length) {", "-\t\tresizeByteArray();", "-\t}", "-\tthis.position++;", "-\tthis.bCodeStream[this.classFileOffset++] = OPC_invokevirtual;", "-\t\t\twriteUnsignedShort(((CodeSnippetConstantPool) this.constantPool).literalIndexForJavaLangByteByteValue());", "+\t\t\tthis.invoke(", "+\t\t\t\t\tOPC_invokevirtual,", "+\t\t\t\t\t0, // argCount", "+\t\t\t\t\t1, // return type size", "+\t\t\t\t\tQualifiedNamesConstants.JavaLangByteConstantPoolName,", "+\t\t\t\t\tQualifiedNamesConstants.BYTEVALUE_BYTE_METHOD_NAME,", "+\t\t\t\t\tQualifiedNamesConstants.BYTEVALUE_BYTE_METHOD_SIGNATURE);", "-\t\t\twriteUnsignedShort(((CodeSnippetConstantPool) this.constantPool).literalIndexForJavaLangShortShortValue());", "+\t\t\tthis.invoke(", "+\t\t\t\t\tOPC_invokevirtual,", "+\t\t\t\t\t0, // argCount", "+\t\t\t\t\t1, // return type size", "+\t\t\t\t\tQualifiedNamesConstants.JavaLangShortConstantPoolName,", "+\t\t\t\t\tQualifiedNamesConstants.SHORTVALUE_SHORT_METHOD_NAME,", "+\t\t\t\t\tQualifiedNamesConstants.SHORTVALUE_SHORT_METHOD_SIGNATURE);", "-\t\t\twriteUnsignedShort(((CodeSnippetConstantPool) this.constantPool).literalIndexForJavaLangCharacterCharValue());", "+\t\t\tthis.invoke(", "+\t\t\t\t\tOPC_invokevirtual,", "+\t\t\t\t\t0, // argCount", "+\t\t\t\t\t1, // return type size", "+\t\t\t\t\tQualifiedNamesConstants.JavaLangCharacterConstantPoolName,", "+\t\t\t\t\tQualifiedNamesConstants.CHARVALUE_CHARACTER_METHOD_NAME,", "+\t\t\t\t\tQualifiedNamesConstants.CHARVALUE_CHARACTER_METHOD_SIGNATURE);", "-\t\t\twriteUnsignedShort(((CodeSnippetConstantPool) this.constantPool).literalIndexForJavaLangIntegerIntValue());", "+\t\t\tthis.invoke(", "+\t\t\t\t\tOPC_invokevirtual,", "+\t\t\t\t\t0, // argCount", "+\t\t\t\t\t1, // return type size", "+\t\t\t\t\tQualifiedNamesConstants.JavaLangIntegerConstantPoolName,", "+\t\t\t\t\tQualifiedNamesConstants.INTVALUE_INTEGER_METHOD_NAME,", "+\t\t\t\t\tQualifiedNamesConstants.INTVALUE_INTEGER_METHOD_SIGNATURE);", "-\t\t\tthis.stackDepth++;", "-\t\t\tif (this.stackDepth > this.stackMax)", "-\t\t\t\tthis.stackMax = this.stackDepth;", "-\t\t\twriteUnsignedShort(((CodeSnippetConstantPool) this.constantPool).literalIndexForJavaLangLongLongValue());", "+\t\t\tthis.invoke(", "+\t\t\t\t\tOPC_invokevirtual,", "+\t\t\t\t\t0, // argCount", "+\t\t\t\t\t2, // return type size", "+\t\t\t\t\tQualifiedNamesConstants.JavaLangLongConstantPoolName,", "+\t\t\t\t\tQualifiedNamesConstants.LONGVALUE_LONG_METHOD_NAME,", "+\t\t\t\t\tQualifiedNamesConstants.LONGVALUE_LONG_METHOD_SIGNATURE);", "-\t\t\twriteUnsignedShort(((CodeSnippetConstantPool) this.constantPool).literalIndexForJavaLangFloatFloatValue());", "+\t\t\tthis.invoke(", "+\t\t\t\t\tOPC_invokevirtual,", "+\t\t\t\t\t0, // argCount", "+\t\t\t\t\t1, // return type size", "+\t\t\t\t\tQualifiedNamesConstants.JavaLangFloatConstantPoolName,", "+\t\t\t\t\tQualifiedNamesConstants.FLOATVALUE_FLOAT_METHOD_NAME,", "+\t\t\t\t\tQualifiedNamesConstants.FLOATVALUE_FLOAT_METHOD_SIGNATURE);", "-\t\t\tthis.stackDepth++;", "-\t\t\tif (this.stackDepth > this.stackMax)", "-\t\t\t\tthis.stackMax = this.stackDepth;", "-\t\t\twriteUnsignedShort(((CodeSnippetConstantPool) this.constantPool).literalIndexForJavaLangDoubleDoubleValue());", "+\t\t\tthis.invoke(", "+\t\t\t\t\tOPC_invokevirtual,", "+\t\t\t\t\t0, // argCount", "+\t\t\t\t\t2, // return type size", "+\t\t\t\t\tQualifiedNamesConstants.JavaLangDoubleConstantPoolName,", "+\t\t\t\t\tQualifiedNamesConstants.DOUBLEVALUE_DOUBLE_METHOD_NAME,", "+\t\t\t\t\tQualifiedNamesConstants.DOUBLEVALUE_DOUBLE_METHOD_SIGNATURE);", "-\t\t\twriteUnsignedShort(((CodeSnippetConstantPool) this.constantPool).literalIndexForJavaLangBooleanBooleanValue());", "+\t\t\tthis.invoke(", "+\t\t\t\t\tOPC_invokevirtual,", "+\t\t\t\t\t0, // argCount", "+\t\t\t\t\t1, // return type size", "+\t\t\t\t\tQualifiedNamesConstants.JavaLangBooleanConstantPoolName,", "+\t\t\t\t\tQualifiedNamesConstants.BOOLEANVALUE_BOOLEAN_METHOD_NAME,", "+\t\t\t\t\tQualifiedNamesConstants.BOOLEANVALUE_BOOLEAN_METHOD_SIGNATURE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45d4bc14780bef31fc31819ffabf0981", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "98ad487e103c268099d7117573693243c8d3b8fc", "commitAfterChange": "721a9dcda02493639666143934bddb089e848d18", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 72, "signatureBeforeChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "diff": ["-\t", "+", "-\t\tfor (int i=0, l=type.typeParameters.length; i<l; i++) {", "-\t\t\tTypeParameter typeParameter = type.typeParameters[i];", "-\t\t\tif (typeParameter != null) {", "-\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(typeParameter);", "-\t\t\t\tif (level != null && matchedClassContainer) {", "-\t\t\t\t\tif (level.intValue() > -1 && enclosesElement) {", "-\t\t\t\t\t\tint offset = typeParameter.sourceStart;", "-\t\t\t\t\t\tSearchMatch match = this.patternLocator.newDeclarationMatch(typeParameter, enclosingElement, type.binding, level.intValue(), typeParameter.sourceEnd-offset+1, this);", "-\t\t\t\t\t\treport(match);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (typeParameter.type != null) {", "-\t\t\t\t\tlevel = (Integer) nodeSet.matchingNodes.removeKey(typeParameter.type);", "-\t\t\t\t\tif (level != null && matchedClassContainer) {", "-\t\t\t\t\t\tthis.patternLocator.matchReportReference(typeParameter.type, enclosingElement, type.binding, level.intValue(), this);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (typeParameter.bounds != null) {", "-\t\t\t\t\tfor (int j=0, b=typeParameter.bounds.length; j<b; j++) {", "-\t\t\t\t\t\tlevel = (Integer) nodeSet.matchingNodes.removeKey(typeParameter.bounds[j]);", "-\t\t\t\t\t\tif (level != null && matchedClassContainer) {", "-\t\t\t\t\t\t\tthis.patternLocator.matchReportReference(typeParameter.bounds[j], enclosingElement, type.binding, level.intValue(), this);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\treportMatching(type.typeParameters, enclosingElement, parent, type.binding, nodeSet);", "+\t// Visit fields", "-\t\tif (nodeSet.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\tif (nodeSet.matchingNodes.elementSize == 0) return;\t// end as all matching nodes were reported", "+\t\tIJavaElement[] otherElements = null;", "+\t\tint first = -1;", "-\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(field);", "-\t\t\tint value = (level != null && matchedClassContainer) ? level.intValue() : -1;", "-\t\t\treportMatching(field, type, enclosingElement, value, typeInHierarchy, nodeSet);", "+\t\t\tboolean last = field.endPart2Position == 0 || field.declarationEnd == field.endPart2Position;", "+\t\t\t// Store first index of multiple field declaration", "+\t\t\tif (!last) {", "+\t\t\t\tif (first == -1) {", "+\t\t\t\t\tfirst = i;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// Mutliple declaration fields", "+\t\t\tif (first >= 0) {", "+\t\t\t\t// Create handle for all multiple fields except first one as it would be returned through the match", "+\t\t\t\tif (i > first) {", "+\t\t\t\t\tif (otherElements == null) {", "+\t\t\t\t\t\totherElements = new IJavaElement[] { createHandle(field, type, enclosingElement) };", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint length = otherElements.length;", "+\t\t\t\t\t\tSystem.arraycopy(otherElements, 0, otherElements = new IJavaElement[length+1], 0, length);", "+\t\t\t\t\t\totherElements[length] = createHandle(field, type, enclosingElement);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t// On last field, report match with all other elements", "+\t\t\t\tif (last) {", "+\t\t\t\t\tfor (int j=first; j<=i; j++) {", "+\t\t\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(fields[j]);", "+\t\t\t\t\t\tint value = (level != null && matchedClassContainer) ? level.intValue() : -1;", "+\t\t\t\t\t\treportMatching(fields[j], type, enclosingElement, otherElements, value, typeInHierarchy, nodeSet);", "+\t\t\t\t\t}", "+\t\t\t\t\tfirst = -1;", "+\t\t\t\t\totherElements = null;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t// Single field, report normally", "+\t\t\t\tInteger level = (Integer) nodeSet.matchingNodes.removeKey(field);", "+\t\t\t\tint value = (level != null && matchedClassContainer) ? level.intValue() : -1;", "+\t\t\t\treportMatching(field, type, enclosingElement, null, value, typeInHierarchy, nodeSet);", "+\t\t\t}", "+\t// Visit methods", "-\t\tif (nodeSet.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\tif (nodeSet.matchingNodes.elementSize == 0) return;\t// end as all matching nodes were reported", "+\t// Visit types", "-\t\t\tif (nodeSet.matchingNodes.elementSize == 0) return; // reported all the matching nodes", "+\t\t\tif (nodeSet.matchingNodes.elementSize == 0) return;\t// end as all matching nodes were reported"]}], "num": 5810}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "badb9ac2fc9ce8ed7494f23987668d03", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "098327d8f6538f04d342316d3097d3a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedResourceChangeListener.java", "commitBeforeChange": "21b06b1f77b7fda7b2358e6e2d335e77a6ac8125", "commitAfterChange": "b397fbf1ef2684ee73e7617091ec4c7be38fc011", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\tpublic boolean visit(IResourceDelta delta) throws CoreException", "signatureAfterChange": " \t\tpublic boolean visit(IResourceDelta delta) throws CoreException", "diff": ["+\t\tprivate final Set<IProject> _removedProjects = new HashSet<IProject>();", "-\t\t\tIProject project = r.getProject();\t\t", "+\t\t\tIProject project = r.getProject();", "-\t\t\t\tIJavaProject jp = JavaCore.create(project);", "-\t\t\t\tGeneratedFileManager gfm = AptPlugin.getAptProject(jp).getGeneratedFileManager();", "+\t\t\t\tfinal IJavaProject javaProj = JavaCore.create(project);", "+\t\t\t\tfinal GeneratedFileManager gfm = AptPlugin.getAptProject(javaProj).getGeneratedFileManager();", "-\t\t\t\t}", "+\t\t\t\t}\t\t\t\t", "-\t\t\t\t\tIFolder f = (IFolder) r;", "+\t\t\t\t\tIFolder f = (IFolder) r;\t\t\t\t\t", "+\t\t\t\t\t\t// all deletion occurs before any add (adding the generated source directory)", "+\t\t\t\t\t\tif( !_removedProjects.contains(project) ){", "+\t\t\t\t\t\t\t_addGenFolderTo.add(project);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// if the project is already closed or in the process of being", "+\t\t\t\t\t\t// deleted, will ignore this deletion since we cannot correct ", "+\t\t\t\t\t\t// the classpath anyways.", "+\t\t\t\telse if( r instanceof IProject ){\t", "+\t\t\t\t\t_removedProjects.add((IProject)r);", "+\t\t\t\t}", "+\t\t\telse if( r instanceof IProject ){", "+\t\t\t\tfinal IProject proj = (IProject)delta.getResource();\t\t", "+\t\t\t\tif( canUpdate(proj) ){", "+\t\t\t\t\t_addGenFolderTo.add(proj);", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\telse", "+\t\t\t\t\t_removedProjects.add(proj);", "+\t\t\t}", "+", "+\t\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f42964b5af72701b8448f1d6f2538a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java", "commitBeforeChange": "b5b90ec2f42e0eb7ce3ad684f46b8d872887e632", "commitAfterChange": "9144806e49f76b29608474c4bebb2700b5c20faa", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate Map<AnnotationProcessorFactory, FactoryPath.Attributes> loadFactories( Map<FactoryContainer, FactoryPath.Attributes> containers, IJavaProject project )", "signatureAfterChange": " \tprivate Map<AnnotationProcessorFactory, FactoryPath.Attributes> loadFactories( Map<FactoryContainer, FactoryPath.Attributes> containers, IJavaProject project )", "diff": ["-\t\tClassLoader classLoader = _createClassLoader( containers );", "+\t\t", "+\t\t// Need to use the cached classloader if we have one", "+\t\tClassLoader iterativeClassLoader = _project2IterativeClassloaders.get(project);", "+\t\tif (iterativeClassLoader == null) {", "+\t\t\titerativeClassLoader = _createIterativeClassLoader(containers);", "+\t\t\t_project2IterativeClassloaders.put(project, iterativeClassLoader);", "+\t\t}", "+\t\t", "+\t\tClassLoader batchClassLoader = _createBatchClassLoader(containers, iterativeClassLoader);", "-\t\t\t\tList<AnnotationProcessorFactory> f = loadFactoryClasses( fc, classLoader );", "-\t\t\t\tfor ( AnnotationProcessorFactory apf : f )", "+\t\t\t\tfinal FactoryPath.Attributes attr = entry.getValue();", "+\t\t\t\tList<AnnotationProcessorFactory> factories;", "+\t\t\t\tif (attr.runInBatchMode()) {", "+\t\t\t\t\tfactories = loadFactoryClasses(fc, batchClassLoader);", "+\t\t\t\t}", "+\t\t\t\telse {", "+\t\t\t\t\tfactories = loadFactoryClasses(fc, iterativeClassLoader);", "+\t\t\t\t}", "+\t\t\t\tfor ( AnnotationProcessorFactory apf : factories )"]}], "num": 13125}
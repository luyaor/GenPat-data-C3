{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f7e505ff367a4b29f22ee0675012a1aa", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e104afb7b31d9335ca2cb9ff74dfdd36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/apitest/APIAnnotationProcessorFactory.java", "commitBeforeChange": "30c49b5bc6e547c53d00a168ee911b66fd1b8333", "commitAfterChange": "5b13e00811f6ebc9106e29508e7dea2c0317b22d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\t \t\tpublic void process()", "signatureAfterChange": " \t\t \t\tpublic void process()", "diff": ["-\t\t\tfinal Messager msgr = _env.getMessager();", "+\t\t\t_msgr = _env.getMessager();", "+\t\t\t_types = _env.getTypeUtils();", "+\t\t\tcheckCommon();", "+\t\t\tcheckSubtypeOf();", "+\t\t\tcheckAssignableTo();", "+\t\t}", "-\t\t\t\t\t\t\t\tmsgr.printError(typeVar + \" is assignable to \" + collectionType );", "-\t\t\t\t\t\t\t\tmsgr.printError(typeVar + \" is not assignable to \" + collectionType );", "-\t\t\t\t\t\tmsgr.printError(\"Type parameter '\" + typeParam + \"' belongs to \" + owner.getClass().getName() + \" \" + owner.getSimpleName() );", "-\t\t\t\t\t\tmsgr.printError(\"Type parameter '\" + typeParam + \"' belongs to \" + owner.getClass().getName() + \" \" + owner.getSimpleName() );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff15d23df0e883b58ca669077ac1cad3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ImportRewrite.java", "commitBeforeChange": "ee7d00c6fce3f5ac075ad1ae838556503fe6ca33", "commitAfterChange": "42a20f90363fe2e676c07d56364d6cc6b90a9458", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic Type addImport(ITypeBinding binding, AST ast, ImportRewriteContext context)", "signatureAfterChange": " \tpublic Type addImport(ITypeBinding binding, AST ast, ImportRewriteContext context)", "diff": ["-\t\tif (bindingPoint != null) {", "-\t\t\treturn createType(binding, bindingPoint, ast, context);", "+\t\tType type = internalAddImport(bindingPoint == null ? binding : bindingPoint, ast, context, null, /* getBase */ true);", "+\t\tif (bindingPoint != null && !bindingPoint.equals(binding)) {", "+\t\t\ttype = buildType(binding, bindingPoint, ast, context, type);", "-\t\tif (binding.isPrimitive()) {", "-\t\t\treturn ast.newPrimitiveType(PrimitiveType.toCode(binding.getName()));", "-\t\t}", "-", "-\t\tITypeBinding normalizedBinding= normalizeTypeBinding(binding);", "-\t\tif (normalizedBinding == null) {", "-\t\t\treturn ast.newSimpleType(ast.newSimpleName(\"invalid\")); //$NON-NLS-1$", "-\t\t}", "-", "-\t\tif (normalizedBinding.isTypeVariable()) {", "-\t\t\t// no import", "-\t\t\treturn ast.newSimpleType(ast.newSimpleName(binding.getName()));", "-\t\t}", "-\t\tif (normalizedBinding.isWildcardType()) {", "-\t\t\tWildcardType wcType= ast.newWildcardType();", "-\t\t\tITypeBinding bound= normalizedBinding.getBound();", "-\t\t\tif (bound != null && !bound.isWildcardType() && !bound.isCapture()) { // bug 96942", "-\t\t\t\tType boundType= addImport(bound, ast, context);", "-\t\t\t\twcType.setBound(boundType, normalizedBinding.isUpperbound());", "-\t\t\t}", "-\t\t\treturn wcType;", "-\t\t}", "-", "-\t\tif (normalizedBinding.isArray()) {", "-\t\t\tType elementType= addImport(normalizedBinding.getElementType(), ast, context);", "-\t\t\treturn ast.newArrayType(elementType, normalizedBinding.getDimensions());", "-\t\t}", "-", "-\t\tString qualifiedName= getRawQualifiedName(normalizedBinding);", "-\t\tif (qualifiedName.length() > 0) {", "-\t\t\tString res= internalAddImport(qualifiedName, context);", "-", "-\t\t\tITypeBinding[] typeArguments= normalizedBinding.getTypeArguments();", "-\t\t\tif (typeArguments.length > 0) {", "-\t\t\t\tType erasureType= ast.newSimpleType(ast.newName(res));", "-\t\t\t\tParameterizedType paramType= ast.newParameterizedType(erasureType);", "-\t\t\t\tList arguments= paramType.typeArguments();", "-\t\t\t\tfor (int i= 0; i < typeArguments.length; i++) {", "-\t\t\t\t\tITypeBinding curr= typeArguments[i];", "-\t\t\t\t\tif (containsNestedCapture(curr, false)) { // see bug 103044", "-\t\t\t\t\t\targuments.add(ast.newWildcardType());", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\targuments.add(addImport(curr, ast, context));", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn paramType;", "-\t\t\t}", "-\t\t\treturn ast.newSimpleType(ast.newName(res));", "-\t\t}", "-\t\treturn ast.newSimpleType(ast.newName(getRawName(normalizedBinding)));", "+\t\treturn type;"]}], "num": 40405}
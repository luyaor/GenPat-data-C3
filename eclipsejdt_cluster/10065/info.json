{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b155b0d4456a0da3a641defc02d594d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71e3eddc0d191ba608003e159658f880", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "f4bdb5d912579981f22fe9e7c4679e93b1a5f059", "commitAfterChange": "a3a09ad256da223aa1f3d2fe29b81e346d09a16c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void computeLocalVariablePositions( \t\tint initOffset, \t\tCodeStream codeStream)", "signatureAfterChange": " \tvoid computeLocalVariablePositions(int ilocal, int initOffset, CodeStream codeStream)", "diff": ["-\tpublic void computeLocalVariablePositions(", "-\t\tint initOffset,", "-\t\tCodeStream codeStream) {", "+\tvoid computeLocalVariablePositions(int ilocal, int initOffset, CodeStream codeStream) {", "-\t\tint ilocal = 0, maxLocals = 0, localsLength = locals.length;", "-\t\twhile ((maxLocals < localsLength) && (locals[maxLocals] != null))", "-\t\t\tmaxLocals++;", "-\t\tboolean hasMoreVariables = maxLocals > 0;", "+\t\tint maxLocals = this.localIndex;", "+\t\tboolean hasMoreVariables = ilocal < maxLocals;", "-\t\tint iscope = 0, maxScopes = 0, subscopesLength = subscopes.length;", "-\t\twhile ((maxScopes < subscopesLength) && (subscopes[maxScopes] != null))", "-\t\t\tmaxScopes++;", "+\t\tint iscope = 0, maxScopes = this.scopeIndex;", "-\t\t\t\t\tsubscope.computeLocalVariablePositions(subOffset, codeStream);", "+\t\t\t\t\tsubscope.computeLocalVariablePositions(0, subOffset, codeStream);", "+\t\t\t\t", "-\t\t\t\tLocalVariableBinding local = locals[ilocal];", "-", "+\t\t\t\tLocalVariableBinding local = locals[ilocal]; // if no local at all, will be locals[ilocal]==null", "+\t\t\t\t", "-\t\t\t\tboolean generatesLocal =", "-\t\t\t\t\t(local.useFlag == LocalVariableBinding.USED && (local.constant == Constant.NotAConstant)) || local.isArgument;", "+\t\t\t\tboolean generateCurrentLocalVar = (local.useFlag == LocalVariableBinding.USED && (local.constant == Constant.NotAConstant));", "-\t\t\t\t\tif (local.isArgument) // method argument", "-\t\t\t\t\t\tthis.problemReporter().unusedArgument(local.declaration);", "-\t\t\t\t\telse if (!(local.declaration instanceof Argument))  // do not report unused catch arguments", "+\t\t\t\t\tif (!(local.declaration instanceof Argument))  // do not report unused catch arguments", "-\t\t\t\t// need to preserve unread variables ?", "-\t\t\t\tif (!generatesLocal) {", "-\t\t\t\t\tif (local.declaration != null", "-\t\t\t\t\t\t&& environment().options.preserveAllLocalVariables) {", "-\t\t\t\t\t\t\t", "-\t\t\t\t\t\tgeneratesLocal = true; // force it to be preserved in the generated code", "+\t\t\t\t// could be optimized out, but does need to preserve unread variables ?", "+\t\t\t\tif (!generateCurrentLocalVar) {", "+\t\t\t\t\tif (local.declaration != null && environment().options.preserveAllLocalVariables) {", "+\t\t\t\t\t\tgenerateCurrentLocalVar = true; // force it to be preserved in the generated code", "-\t\t\t\tif (generatesLocal) {", "+\t\t\t\tif (generateCurrentLocalVar) {", "-\t\t\t\t\t// check for too many arguments/local variables", "-\t\t\t\t\tif (local.isArgument) {", "-\t\t\t\t\t\tif (this.offset > 0xFF) { // no more than 255 words of arguments", "-\t\t\t\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForArgument(local, local.declaration);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (this.offset > 0xFFFF) { // no more than 65535 words of locals", "-\t\t\t\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForLocal(", "-\t\t\t\t\t\t\t\tlocal, ", "-\t\t\t\t\t\t\t\tlocal.declaration == null ? (AstNode)this.methodScope().referenceContext : local.declaration);", "-\t\t\t\t\t\t}", "+\t\t\t\t\tif (this.offset > 0xFFFF) { // no more than 65535 words of locals", "+\t\t\t\t\t\tthis.problemReporter().noMoreAvailableSpaceForLocal(", "+\t\t\t\t\t\t\tlocal, ", "+\t\t\t\t\t\t\tlocal.declaration == null ? (AstNode)this.methodScope().referenceContext : local.declaration);", "-", "-\t\t\t\t\t// increment offset"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f974fe31c721ea1333b42bdd2fbe7cb1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "10bffe6b84331580bd1f7b273305c5a3d5e7af2d", "commitAfterChange": "a9d9ef126afa0b02402ec922ee1b18941ed8396d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \t \tprivate void format(TypeDeclaration typeDeclaration)", "signatureAfterChange": " \t \tprivate void format(TypeDeclaration typeDeclaration)", "diff": ["-", "-\t\tif ((typeDeclaration.bits & ASTNode.IsAnonymousTypeMASK) != 0) {", "-\t\t\t/*", "-\t\t\t * Type body", "-\t\t\t */", "-\t\t\tString anonymous_type_declaration_brace_position = this.preferences.anonymous_type_declaration_brace_position;", "-\t\t\tformatTypeOpeningBrace(anonymous_type_declaration_brace_position, this.preferences.insert_space_before_anonymous_type_open_brace, typeDeclaration);", "-\t\t\t", "-\t\t\tthis.scribe.indent();", "-\t", "-\t\t\tformatTypeMembers(typeDeclaration);", "-\t\t\t", "-\t\t\tthis.scribe.printComment();", "-\t\t\tthis.scribe.unIndent();", "-\t\t\tif (this.preferences.insert_new_line_in_empty_anonymous_type_declaration) {", "-\t\t\t\tthis.scribe.printNewLine();", "-\t\t\t}", "-\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACE);", "-\t\t\tif (anonymous_type_declaration_brace_position.equals(DefaultCodeFormatterConstants.NEXT_LINE_SHIFTED)) {", "-\t\t\t\tthis.scribe.unIndent();", "-\t\t\t}", "-\t\t\treturn;", "-\t\t}", "-\t\tthis.scribe.printModifiers();", "+        /*", "+         * Print comments to get proper line number", "+         */", "+        this.scribe.printComment();", "+        final int line = scribe.line; ", "+        ", "+        this.scribe.printModifiers();", "+        formatLeftCurlyBrace(line, this.preferences.type_declaration_brace_position);", "+\t}"]}], "num": 10065}
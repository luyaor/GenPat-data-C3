{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63f24cda8a45f93ef4eb5de41981b0dd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ebc827d8455bc48283a3641260e75be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/JavaSourceFilePrintWriter.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t     public void close()", "signatureAfterChange": " \t     public void close()", "diff": ["-\t        FileGenerationResult result = gfm.generateFileDuringBuild( ", "-\t\t\t\t\t_env.getFile(),  _typeName, contents, null /* progress monitor */ );", "+\t        Phase phase = _env.getPhase();", "+\t\t\t", "+\t        FileGenerationResult result = null;", "+\t        if ( phase == Phase.RECONCILE )", "+\t        {", "+\t        \tReconcileEnv reconcileEnv = (ReconcileEnv)_env;", "+\t        \tICompilationUnit parentCompilationUnit = reconcileEnv.getCompilationUnit();", "+\t            result  = gfm.generateFileDuringReconcile( ", "+\t                parentCompilationUnit, _typeName, contents );", "+\t            // Need to call ReconcileContext.resetAst() for this to be effective;", "+\t            // that will happen in ReconcileEnv.close().", "+\t        }", "+\t        else if ( phase == Phase.BUILD)\t{", "+\t\t        result = gfm.generateFileDuringBuild( ", "+\t\t\t\t\t\t_env.getFile(),  _typeName, contents, null /* progress monitor */ );", "+\t        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68ebca5b789f304514ee38dbe3c285bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "6cea394a74122bc3b2f5fee1a70c7921f0e635d8", "commitAfterChange": "c0d8ddbb4b72e166c7dc81eb807bc47fd1beaa74", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tpublic boolean visit(SimpleType node)", "signatureAfterChange": " \tpublic boolean visit(SimpleType node)", "diff": ["-\t\tvisitTypeAnnotations(node);", "-\t\tnode.getName().accept(this);", "+\t\tName name = node.getName();", "+\t\tif (name.isQualifiedName()) {", "+\t\t\tQualifiedName qualifiedName = (QualifiedName) name;", "+\t\t\tqualifiedName.getQualifier().accept(this);", "+\t\t\tthis.buffer.append(\".\");//$NON-NLS-1$", "+\t\t\tvisitTypeAnnotations(node);", "+\t\t\tqualifiedName.getName().accept(this);", "+\t\t} else {", "+\t\t\tvisitTypeAnnotations(node);", "+\t\t\tnode.getName().accept(this);\t\t\t", "+\t\t}"]}], "num": 6085}
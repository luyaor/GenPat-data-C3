{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9eccff27a85ebc2ab4453fd08a95806c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b3ce3256ff7f81fa88c22c05ba1fb5e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "372799d5bd955eabbf1069fe0bbf8aba8ea8af85", "commitAfterChange": "baf433f0226e8b9036b18a28d560e5a42cb8b949", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 33, "signatureBeforeChange": "     private void updateProblemLength()", "signatureAfterChange": "     private void updateProblemLength()", "diff": ["-    \t// for those markers that doesn't have an ending offset, figure it out by", "+    \t// for those problems that doesn't have an ending offset, figure it out by", "-    \tint count = 0;", "-    \tfor( Map.Entry<IFile, List<IProblem>> entry : _allProblems.entrySet() ){  ", "-    \t\tif( _file.equals(entry.getKey()) ){", "-    \t\t\tfor(IProblem problem : entry.getValue() ){", "-    \t\t\t\tif( problem.getSourceEnd() == -1 )", "+    \tfor( Map.Entry<IFile, List<IProblem>> entry : _allProblems.entrySet() ){", "+    \t\tint count = 0;", "+    \t\tint fileIndex = -1;", "+    \t\tfinal IFile file = entry.getKey();", "+    \t\tfor( IProblem problem : entry.getValue() ){", "+    \t\t\tif( problem.getSourceEnd() == -1 ){", "+    \t\t\t\tif( fileIndex == -1 )", "+    \t\t\t\t\tfileIndex = getFileIndex(file);", "+    \t\t\t\t// -2 means it's not one of the files that we are processing.", "+    \t\t\t\tif( fileIndex != -2 )", "-    \t\t\t}    \t\t\t\t", "-    \t\t}", "-    \t\telse{", "-    \t\t\tfor(IProblem problem : entry.getValue() ){", "-    \t\t\t\tif( problem.getSourceEnd() < problem.getSourceStart() )", "-    \t\t\t\t\tproblem.setSourceEnd(problem.getSourceStart());", "-    \t}", "-    \tif( count > 0 ){", "-\t    \tfinal int[] startingOffsets = new int[count];", "-\t    \tint index = 0;", "-\t    \t", "-\t    \tfor( Map.Entry<IFile, List<IProblem>> entry : _allProblems.entrySet() ){  ", "-\t    \t\tif( entry.getKey() == _file ){", "-\t    \t\t\tfor(IProblem problem : entry.getValue() ){", "+    \t\t", "+    \t\tif( fileIndex != -2 ){", "+    \t\t\tif( count > 0 ){", "+    \t\t\t\tfinal int[] startingOffsets = new int[count];", "+    \t\t    \tint index = 0;", "+\t    \t\t\tfor( IProblem problem : entry.getValue() ){", "-\t    \t\t\t}    \t\t\t\t", "-\t    \t\t}", "-\t    \t}", "-\t    \t", "-\t    \tfinal EndingOffsetFinder lfinder = new EndingOffsetFinder(startingOffsets);", "-\t    \t_astCompilationUnit.accept( lfinder );", "-\t    \t", "-\t    \tfor( Map.Entry<IFile, List<IProblem>> entry : _allProblems.entrySet() ){  ", "-\t    \t\tif( _file.equals(entry.getKey()) ){", "-\t    \t\t\tfor(IProblem problem : entry.getValue() ){", "+\t    \t\t\t}", "+\t    \t\t\t", "+\t    \t\t\tfinal EndingOffsetFinder lfinder = new EndingOffsetFinder(startingOffsets);", "+\t    \t\t\t_astUnits[fileIndex].accept( lfinder );", "+\t    \t    \t", "+\t    \t    \tfor(IProblem problem : entry.getValue() ){", "-\t    \t\t\t}    \t\t\t\t", "-\t    \t\t}", "-\t    \t}", "+\t    \t\t\t}", "+    \t\t\t}", "+    \t\t\t// else everything is clear.", "+    \t\t}", "+    \t\telse{", "+    \t\t\tfor(IProblem problem : entry.getValue() ){", "+    \t\t\t\t// set the -1 source end to be the same as the source start.", "+    \t\t\t\tif( problem.getSourceEnd() < problem.getSourceStart() )", "+    \t\t\t\t\tproblem.setSourceEnd(problem.getSourceStart());", "+    \t\t\t}", "+    \t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39539e23e3987084814f33640c844c1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java", "commitBeforeChange": "0c96a215dc417e2a3711d5e3a64712a85e5ebfe5", "commitAfterChange": "79e03912c161a70c24307f9119f487254a855031", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public IJavaElement getElementAtConsideringSibling(int position) throws JavaModelException", "signatureAfterChange": " public IJavaElement getElementAtConsideringSibling(int position) throws JavaModelException", "diff": ["-\t\tString prefix = null;", "-\t\tif (index > -1) {", "-\t\t\tprefix = this.name.substring(0, index);", "-\t\t} else {", "-\t\t\tprefix = this.name;", "-\t\t}", "-\t\t", "+\t\tint prefixLength = index < 0 ? this.name.length() : index;", "-\t\t\tString childPrefix = null;", "-\t\t\tif (childIndex > -1) {", "-\t\t\t\tchildPrefix = childName.substring(0, childIndex);", "-\t\t\t} else {", "-\t\t\t\tchildPrefix = childName.substring(0, childName.indexOf('.'));", "-\t\t\t}", "-\t\t\t", "-\t\t\tif(prefix.equals(childPrefix)) {", "+\t\t\tint childPrefixLength = childIndex < 0 ? childName.indexOf('.') : childIndex;", "+\t\t\tif (prefixLength == childPrefixLength && this.name.regionMatches(0, childName, 0, prefixLength)) {"]}], "num": 40655}
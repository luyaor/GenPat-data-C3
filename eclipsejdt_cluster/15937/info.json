{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b9828a2033c4b531ba5f4b650476a15", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ab160af605eab27687847b20bb5d7de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "0ba58bf39f4ee677ba1a92a3a5a9e2a6d35beeef", "commitAfterChange": "801b41050572fefc84dbdd642dfdb273c04ef277", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public static final boolean camelCaseMatch(char[] pattern, int patternStart, int patternEnd, char[] name, int nameStart, int nameEnd)", "signatureAfterChange": " public static final boolean camelCaseMatch(char[] pattern, int patternStart, int patternEnd, char[] name, int nameStart, int nameEnd)", "diff": ["-\t\t\tswitch (ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[patternChar]) {", "-\t\t\t\tcase ScannerHelper.C_UPPER_LETTER :", "-\t\t\t\t\t// still uppercase", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault:", "-\t\t\t\t\t// end of camelCase part of pattern", "-\t\t\t\t\tbreak nextPatternChar;", "+\t\t\tif (ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[patternChar] != ScannerHelper.C_UPPER_LETTER) {", "+\t\t\t\t// end of camelCase part of pattern", "+\t\t\t\tbreak nextPatternChar;", "+\t\t\t// still uppercase", "-\t\t\t\t\tif ((ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[nameChar] & ScannerHelper.C_LOWER_LETTER|ScannerHelper.C_IDENT_PART|ScannerHelper.C_DIGIT) != 0) {", "+\t\t\t\t\tif ((ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[nameChar] & (ScannerHelper.C_LOWER_LETTER|ScannerHelper.C_IDENT_PART|ScannerHelper.C_DIGIT)) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd3483d4da0310f6ca0a5c4cd7fea18e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "01b9296a9ea93c38acbcfd0ee226b1f00d5fc41b", "commitAfterChange": "33cf2c285ddb9d801a508bfb1e7446c0a204b2e0", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprivate boolean connectSuperclass()", "signatureAfterChange": " \tprivate boolean connectSuperclass()", "diff": ["-\t\tswitch (sourceType.id) { //handle the case of redefining root types up front", "-\t\t\tcase T_JavaLangObject :", "-\t\t\t\tsourceType.superclass = null;", "-\t\t\t\tsourceType.superInterfaces = NoSuperInterfaces;", "-\t\t\t\tif (!sourceType.isClass())", "-\t\t\t\t\tproblemReporter().objectMustBeClass(sourceType);", "-\t\t\t\tif (referenceContext.superclass != null || referenceContext.superInterfaces != null)", "-\t\t\t\t\tproblemReporter().objectCannotHaveSuperTypes(sourceType);", "-\t\t\t\treturn true; // do not propagate Object's hierarchy problems down to every subtype", "-\t\t\tcase T_JavaLangEnum :", "-\t\t\t\t// TODO (kent) need to check is generic class with exactly one unbound parameter, and defines constructor Enum(String,int)", "+\t\tif (sourceType.id == T_JavaLangObject) { // handle the case of redefining java.lang.Object up front", "+\t\t\tsourceType.superclass = null;", "+\t\t\tsourceType.superInterfaces = NoSuperInterfaces;", "+\t\t\tif (!sourceType.isClass())", "+\t\t\t\tproblemReporter().objectMustBeClass(sourceType);", "+\t\t\tif (referenceContext.superclass != null || referenceContext.superInterfaces != null)", "+\t\t\t\tproblemReporter().objectCannotHaveSuperTypes(sourceType);", "+\t\t\treturn true; // do not propagate Object's hierarchy problems down to every subtype"]}], "num": 15937}
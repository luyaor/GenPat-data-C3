{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5fffd2aac8e5724a8aa1db5d4847e204", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "591370a8f08828df35b95fa1baf5e6cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetClassFile.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static void createProblemType(TypeDeclaration typeDeclaration, CompilationResult unitResult)", "signatureAfterChange": " public static void createProblemType(TypeDeclaration typeDeclaration, CompilationResult unitResult)", "diff": ["-\tFieldBinding[] fields = typeBinding.fields;", "+\tFieldBinding[] fields = typeBinding.fields();", "-\tMethodBinding[] methods = typeBinding.methods;", "-\tAbstractMethodDeclaration[] methodDeclarations = typeDeclaration.methods;", "-\tint maxMethodDecl = methodDeclarations == null ? 0 : methodDeclarations.length;", "-\tif (methods != null) {", "+\tAbstractMethodDeclaration[] methodDecls = typeDeclaration.methods;", "+\tif (methodDecls != null) {", "-\t\t\tfor (int i = 0, max = methods.length; i < max; i++) {", "-\t\t\t\tMethodBinding methodBinding;", "-\t\t\t\tif ((methodBinding = methods[i]) != null) {", "-\t\t\t\t\t// find the corresponding method declaration", "-\t\t\t\t\tfor (int j = 0; j < maxMethodDecl; j++) {", "-\t\t\t\t\t\tif ((methodDeclarations[j] != null) && (methodDeclarations[j].binding == methods[i])) {", "-\t\t\t\t\t\t\tif (!methodBinding.isConstructor()) {", "-\t\t\t\t\t\t\t\tclassFile.addAbstractMethod(methodDeclarations[j], methodBinding);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}\t\t\t", "+\t\t\tfor (int i = 0, length = methodDecls.length; i < length; i++) {", "+\t\t\t\tAbstractMethodDeclaration methodDecl = methodDecls[i];", "+\t\t\t\tMethodBinding method = methodDecl.binding;", "+\t\t\t\tif (method == null || method.isConstructor()) continue;", "+\t\t\t\tclassFile.addAbstractMethod(methodDecl, method);", "+\t\t\t}\t\t", "-\t\t\tfor (int i = 0, max = methods.length; i < max; i++) {", "-\t\t\t\tMethodBinding methodBinding;", "-\t\t\t\tif ((methodBinding = methods[i]) != null) {", "-\t\t\t\t\t// find the corresponding method declaration", "-\t\t\t\t\tfor (int j = 0; j < maxMethodDecl; j++) {", "-\t\t\t\t\t\tif ((methodDeclarations[j] != null) && (methodDeclarations[j].binding == methods[i])) {", "-\t\t\t\t\t\t\tAbstractMethodDeclaration methodDecl;", "-\t\t\t\t\t\t\tif ((methodDecl = methodDeclarations[j]).isConstructor()) {", "-\t\t\t\t\t\t\t\tclassFile.addProblemConstructor(methodDecl, methodBinding, problemsCopy);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tclassFile.addProblemMethod(methodDecl, methodBinding, problemsCopy);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\tfor (int i = 0, length = methodDecls.length; i < length; i++) {", "+\t\t\t\tAbstractMethodDeclaration methodDecl = methodDecls[i];", "+\t\t\t\tMethodBinding method = methodDecl.binding;", "+\t\t\t\tif (method == null) continue;", "+\t\t\t\tif (method.isConstructor()) {", "+\t\t\t\t\tclassFile.addProblemConstructor(methodDecl, method, problemsCopy);", "+\t\t\t\t} else {", "+\t\t\t\t\tclassFile.addProblemMethod(methodDecl, method, problemsCopy);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "998481c1f2a2b4bd315670d613bd0bf7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static void createProblemType( \t\tTypeDeclaration typeDeclaration, \t\tCompilationResult unitResult)", "signatureAfterChange": " \tpublic static void createProblemType( \t\tTypeDeclaration typeDeclaration, \t\tCompilationResult unitResult)", "diff": ["-\t\tFieldBinding[] fields = typeBinding.fields;", "+\t\tFieldBinding[] fields = typeBinding.fields();", "-\t\tMethodBinding[] methods = typeBinding.methods;", "-\t\tAbstractMethodDeclaration[] methodDeclarations = typeDeclaration.methods;", "-\t\tint maxMethodDecl = methodDeclarations == null ? 0 : methodDeclarations.length;", "-\t\tif (methods != null) {", "+\t\t", "+\t\tAbstractMethodDeclaration[] methodDecls = typeDeclaration.methods;", "+\t\tif (methodDecls != null) {", "-\t\t\t\tfor (int i = 0, max = methods.length; i < max; i++) {", "-\t\t\t\t\tMethodBinding methodBinding;", "-\t\t\t\t\tif ((methodBinding = methods[i]) != null) {", "-\t\t\t\t\t\t// find the corresponding method declaration", "-\t\t\t\t\t\tfor (int j = 0; j < maxMethodDecl; j++) {", "-\t\t\t\t\t\t\tif ((methodDeclarations[j] != null)", "-\t\t\t\t\t\t\t\t&& (methodDeclarations[j].binding == methods[i])) {", "-\t\t\t\t\t\t\t\tif (!methodBinding.isConstructor()) {", "-\t\t\t\t\t\t\t\t\tclassFile.addAbstractMethod(methodDeclarations[j], methodBinding);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tfor (int i = 0, length = methodDecls.length; i < length; i++) {", "+\t\t\t\t\tAbstractMethodDeclaration methodDecl = methodDecls[i];", "+\t\t\t\t\tMethodBinding method = methodDecl.binding;", "+\t\t\t\t\tif (method == null || method.isConstructor()) continue;", "+\t\t\t\t\tclassFile.addAbstractMethod(methodDecl, method);", "+\t\t\t\t}\t\t", "-\t\t\t\tfor (int i = 0, max = methods.length; i < max; i++) {", "-\t\t\t\t\tMethodBinding methodBinding;", "-\t\t\t\t\tif ((methodBinding = methods[i]) != null) {", "-\t\t\t\t\t\t// find the corresponding method declaration", "-\t\t\t\t\t\tfor (int j = 0; j < maxMethodDecl; j++) {", "-\t\t\t\t\t\t\tif ((methodDeclarations[j] != null)", "-\t\t\t\t\t\t\t\t&& (methodDeclarations[j].binding == methods[i])) {", "-\t\t\t\t\t\t\t\tAbstractMethodDeclaration methodDecl;", "-\t\t\t\t\t\t\t\tif ((methodDecl = methodDeclarations[j]).isConstructor()) {", "-\t\t\t\t\t\t\t\t\tclassFile.addProblemConstructor(methodDecl, methodBinding, problemsCopy);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tclassFile.addProblemMethod(methodDecl, methodBinding, problemsCopy);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\tfor (int i = 0, length = methodDecls.length; i < length; i++) {", "+\t\t\t\t\tAbstractMethodDeclaration methodDecl = methodDecls[i];", "+\t\t\t\t\tMethodBinding method = methodDecl.binding;", "+\t\t\t\t\tif (method == null) continue;", "+\t\t\t\t\tif (method.isConstructor()) {", "+\t\t\t\t\t\tclassFile.addProblemConstructor(methodDecl, method, problemsCopy);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tclassFile.addProblemMethod(methodDecl, method, problemsCopy);", "-\t\t}", "+\t\t}\t\t", "+\t\t"]}], "num": 35822}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c873c5eb381190a1a1a73e472de4f8c4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7869b7d3cece1358de2170c625a90345", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_3.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void test021()", "signatureAfterChange": " public void test021()", "diff": ["-\t\t// check that \"new Z().init()\" is bound to \"AbstractB.init()\"", "-\t\tfinal StringBuffer references = new StringBuffer(10);", "-\t\ttry {", "-\t\t\tBinaryIndexer indexer = new BinaryIndexer(true);", "-\t\t\tindexer.index(", "-\t\t\t\tnew IDocument() {", "-\t\t\t\t\tpublic byte[] getByteContent() throws IOException {", "-\t\t\t\t\t\treturn Util.getFileByteContent(new File(OUTPUT_DIR + \"/p1/Z.class\"));", "-\t\t\t\t\t}", "-\t\t\t\t\tpublic char[] getCharContent() { return null; }", "-\t\t\t\t\tpublic String getName() { return \"Z.class\"; }", "-\t\t\t\t\tpublic String getStringContent() { return null; }", "-\t\t\t\t\tpublic String getType() { return \"class\"; }", "-\t\t\t\t\tpublic String getEncoding() { return \"\"; }", "-", "-\t\t\t\t}, ", "-\t\t\t\tnew IIndexerOutput() {", "-\t\t\t\t\tpublic void addDocument(IDocument document) { ", "-\t\t\t\t\t\t// do nothing", "-\t\t\t\t\t}", "-\t\t\t\t\tpublic void addRef(char[] word) { ", "-\t\t\t\t\t\treferences.append(word);", "-\t\t\t\t\t\treferences.append('\\n');", "-\t\t\t\t\t}", "-\t\t\t\t\tpublic void addRef(String word) {", "-\t\t\t\t\t\t//System.out.println(word);", "-\t\t\t\t\t}", "-\t\t\t\t});", "-\t\t} catch(IOException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t\tString computedReferences = references.toString();", "+\t\tString computedReferences = findReferences(OUTPUT_DIR + \"/p1/Z.class\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9a7e5861e2910ae9394c3b80f48f38a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_4.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void test021()", "signatureAfterChange": " public void test021()", "diff": ["-\t\tfinal StringBuffer references = new StringBuffer(10);", "-\t\ttry {", "-\t\t\tBinaryIndexer indexer = new BinaryIndexer(true);", "-\t\t\tindexer.index(", "-\t\t\t\tnew IDocument() {", "-\t\t\t\t\tpublic byte[] getByteContent() throws IOException {", "-\t\t\t\t\t\treturn Util.getFileByteContent(new File(OUTPUT_DIR + \"/p1/Z.class\"));", "-\t\t\t\t\t}", "-\t\t\t\t\tpublic char[] getCharContent() { return null; }", "-\t\t\t\t\tpublic String getName() { return \"Z.class\"; }", "-\t\t\t\t\tpublic String getStringContent() { return null; }", "-\t\t\t\t\tpublic String getType() { return \"class\"; }", "-\t\t\t\t\tpublic String getEncoding() { return null; }", "-\t\t\t\t}, ", "-\t\t\t\tnew IIndexerOutput() {", "-\t\t\t\t\tpublic void addDocument(IDocument document) { ", "-\t\t\t\t\t\t// do nothing", "-\t\t\t\t\t}", "-\t\t\t\t\tpublic void addRef(char[] word) { ", "-\t\t\t\t\t\treferences.append(word);", "-\t\t\t\t\t\treferences.append('\\n');", "-\t\t\t\t\t}", "-\t\t\t\t\tpublic void addRef(String word) {", "-\t\t\t\t\t\t//System.out.println(word);", "-\t\t\t\t\t}", "-\t\t\t\t});", "-\t\t} catch(IOException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t\tString computedReferences = references.toString();", "+\t\tString computedReferences = findReferences(OUTPUT_DIR + \"/p1/Z.class\");"]}], "num": 7686}
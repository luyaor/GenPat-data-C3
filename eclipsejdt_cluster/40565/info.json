{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6aa54a3435a0a4930ebf30c476b51f48", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4818f8d0ade832ac5b7f30b2a9ad46d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic static Hashtable getOptions()", "signatureAfterChange": " \tpublic static Hashtable getOptions()", "diff": ["-\t\t", "-\t\tHashtable options = new Hashtable(10);", "-\t\t// see #initializeDefaultPluginPreferences() for changing default settings", "-\t\tPlugin plugin = getPlugin();", "-\t\tif (plugin != null) {", "-\t\t\tPreferences preferences = getPlugin().getPluginPreferences();", "-\t\t\tHashSet optionNames = JavaModelManager.getJavaModelManager().optionNames;", "-\t\t\t", "-\t\t\t// initialize preferences to their default", "-\t\t\tIterator iterator = optionNames.iterator();", "-\t\t\twhile (iterator.hasNext()) {", "-\t\t\t    String propertyName = (String) iterator.next();", "-\t\t\t    options.put(propertyName, preferences.getDefaultString(propertyName));", "-\t\t\t}", "-\t\t\t// get preferences not set to their default", "-\t\t\tString[] propertyNames = preferences.propertyNames();", "-\t\t\tfor (int i = 0; i < propertyNames.length; i++){", "-\t\t\t\tString propertyName = propertyNames[i];", "-\t\t\t\tString value = preferences.getString(propertyName).trim();", "-\t\t\t\tif (optionNames.contains(propertyName)){", "-\t\t\t\t\toptions.put(propertyName, value);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t// get encoding through resource plugin", "-\t\t\toptions.put(CORE_ENCODING, getEncoding()); ", "-\t\t\t// backward compatibility", "-\t\t\toptions.put(COMPILER_PB_INVALID_IMPORT, ERROR);", "-\t\t\toptions.put(COMPILER_PB_UNREACHABLE_CODE, ERROR);", "+\t\t// init", "+\t\tHashtable options = new Hashtable(10);", "+\t\tHashSet optionNames = JavaModelManager.getJavaModelManager().optionNames;", "+\t\tIPreferencesService service = Platform.getPreferencesService();", "+", "+\t\t// set options using preferences service lookup", "+\t\tIterator iterator = optionNames.iterator();", "+\t\twhile (iterator.hasNext()) {", "+\t\t    String propertyName = (String) iterator.next();", "+\t\t    String propertyValue = service.get(propertyName, null, preferencesLookup);", "+\t\t    if (propertyValue != null) {", "+\t\t\t    options.put(propertyName, propertyValue);", "+\t\t    }", "+", "+\t\t// get encoding through resource plugin", "+\t\toptions.put(CORE_ENCODING, getEncoding()); ", "+", "+\t\t// backward compatibility", "+\t\toptions.put(COMPILER_PB_INVALID_IMPORT, ERROR);", "+\t\toptions.put(COMPILER_PB_UNREACHABLE_CODE, ERROR);", "+", "+\t\t// return built map"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50c09db097ebf03c19c1a456316451bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodPattern.java", "commitBeforeChange": "a446855af1d75ce4a9db853f60a76eb10d11782d", "commitAfterChange": "b39119968c7f32d55ae4a97790cb0a2d7d32153a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public int matchLevel(AstNode node, boolean resolve)", "signatureAfterChange": " public int matchLevel(AstNode node, boolean resolve)", "diff": ["+\tboolean checkTypeReferences = false;", "+\t\tcheckTypeReferences = true;", "-\t\tif (length != argsLength) {", "-\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t} else {", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tAstNode arg = args[i];", "-\t\t\t\tif (arg instanceof Argument) {", "-\t\t\t\t\tTypeReference argType = ((Argument)arg).type;", "-\t\t\t\t\tchar[][] argTypeName = argType.getTypeName();", "-\t\t\t\t\tchar[] sourceName = toArrayName(", "-\t\t\t\t\t\targTypeName[argTypeName.length-1], ", "-\t\t\t\t\t\targType.dimensions());", "-\t\t\t\t\tif (!matchesName(this.parameterSimpleNames[i], sourceName))", "-\t\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\tif (length != argsLength) return IMPOSSIBLE_MATCH;", "+", "+\t\tif (checkTypeReferences)", "+\t\t\tfor (int i = 0; i < argsLength; i++)", "+\t\t\t\tif (!matchesTypeReference(this.parameterSimpleNames[i], ((Argument) args[i]).type))", "+\t\t\t\t\treturn IMPOSSIBLE_MATCH;", "-\tif (methodReturnType != null) {", "-\t\tchar[][] methodReturnTypeName = methodReturnType.getTypeName();", "-\t\tchar[] sourceName = toArrayName(", "-\t\t\tmethodReturnTypeName[methodReturnTypeName.length-1], ", "-\t\t\tmethodReturnType.dimensions());", "-\t\tif (!matchesName(this.returnSimpleName, sourceName))", "-\t\t\treturn IMPOSSIBLE_MATCH;", "-\t}", "+\tif (methodReturnType != null && !matchesTypeReference(this.returnSimpleName, methodReturnType))", "+\t\treturn IMPOSSIBLE_MATCH;"]}], "num": 40565}
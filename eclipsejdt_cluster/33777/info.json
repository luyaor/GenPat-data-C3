{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44ce3193ddd451e57381f169763c912b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cad2665e5663404e75cb22de833306a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "fc25b1b826e7fad7f1da04ab9d452bc350b24919", "commitAfterChange": "19b4c669e6d8313d03dbcc8b595622002fe408a5", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void set(Map optionsMap)", "signatureAfterChange": "  \tpublic void set(Map optionsMap)", "diff": ["+\t\tif ((optionValue = optionsMap.get(OPTION_ReportNullContractViolation)) != null) updateSeverity(NullContractViolation, optionValue);", "+\t\tif ((optionValue = optionsMap.get(OPTION_ReportPotentialNullContractViolation)) != null) updateSeverity(PotentialNullContractViolation, optionValue);", "+\t\tif ((optionValue = optionsMap.get(OPTION_ReportNullContractInsufficientInfo)) != null) updateSeverity(NullContractInsufficientInfo, optionValue);", "+\t\tif ((optionValue = optionsMap.get(OPTION_NullableAnnotationName)) != null) {", "+\t\t\tthis.nullableAnnotationName = CharOperation.splitAndTrimOn('.', ((String)optionValue).toCharArray());", "+\t\t}", "+\t\tif ((optionValue = optionsMap.get(OPTION_NonNullAnnotationName)) != null) {", "+\t\t\tthis.nonNullAnnotationName = CharOperation.splitAndTrimOn('.', ((String)optionValue).toCharArray());", "+\t\t}", "+\t\tif ((optionValue = optionsMap.get(OPTION_EmulateNullAnnotationTypes)) != null) {", "+\t\t\tif (ENABLED.equals(optionValue)) {", "+\t\t\t\tthis.emulateNullAnnotationTypes = true;", "+\t\t\t\t// ensure that we actually have annotation names to emulate:", "+\t\t\t\tif (this.nullableAnnotationName == null)", "+\t\t\t\t\tthis.nullableAnnotationName = DEFAULT_NULLABLE_ANNOTATION_NAME;", "+\t\t\t\tif (this.nonNullAnnotationName == null)", "+\t\t\t\t\tthis.nonNullAnnotationName = DEFAULT_NONNULL_ANNOTATION_NAME;", "+\t\t\t} else if (DISABLED.equals(optionValue)) {", "+\t\t\t\tthis.emulateNullAnnotationTypes = false;", "+\t\t\t}", "+\t\t}", "+\t\tif ((optionValue = optionsMap.get(OPTION_DefaultImportNullAnnotationTypes)) != null) {", "+\t\t\tif (ENABLED.equals(optionValue)) {", "+\t\t\t\tthis.defaultImportNullAnnotationTypes = true;", "+\t\t\t\t// ensure that we actually have annotation names to be used for default imports:", "+\t\t\t\tif (this.nullableAnnotationName == null)", "+\t\t\t\t\tthis.nullableAnnotationName = DEFAULT_NULLABLE_ANNOTATION_NAME;", "+\t\t\t\tif (this.nonNullAnnotationName == null)", "+\t\t\t\t\tthis.nonNullAnnotationName = DEFAULT_NONNULL_ANNOTATION_NAME;", "+\t\t\t} else if (DISABLED.equals(optionValue)) {", "+\t\t\t\tthis.defaultImportNullAnnotationTypes = false;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bcf8f7b4e8c19137721daa35dd87980", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "19b4c669e6d8313d03dbcc8b595622002fe408a5", "commitAfterChange": "7b084156620c5c922d11b27bd8e1266a04bb9736", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tpublic void set(Map optionsMap)", "signatureAfterChange": "  \tpublic void set(Map optionsMap)", "diff": ["-\t\tif ((optionValue = optionsMap.get(OPTION_ReportNullContractViolation)) != null) updateSeverity(NullContractViolation, optionValue);", "-\t\tif ((optionValue = optionsMap.get(OPTION_ReportPotentialNullContractViolation)) != null) updateSeverity(PotentialNullContractViolation, optionValue);", "-\t\tif ((optionValue = optionsMap.get(OPTION_ReportNullContractInsufficientInfo)) != null) updateSeverity(NullContractInsufficientInfo, optionValue);", "-\t\tif ((optionValue = optionsMap.get(OPTION_NullableAnnotationName)) != null) {", "-\t\t\tthis.nullableAnnotationName = CharOperation.splitAndTrimOn('.', ((String)optionValue).toCharArray());", "-\t\t}", "-\t\tif ((optionValue = optionsMap.get(OPTION_NonNullAnnotationName)) != null) {", "-\t\t\tthis.nonNullAnnotationName = CharOperation.splitAndTrimOn('.', ((String)optionValue).toCharArray());", "-\t\t}", "-\t\tif ((optionValue = optionsMap.get(OPTION_EmulateNullAnnotationTypes)) != null) {", "-\t\t\tif (ENABLED.equals(optionValue)) {", "-\t\t\t\tthis.emulateNullAnnotationTypes = true;", "-\t\t\t\t// ensure that we actually have annotation names to emulate:", "-\t\t\t\tif (this.nullableAnnotationName == null)", "-\t\t\t\t\tthis.nullableAnnotationName = DEFAULT_NULLABLE_ANNOTATION_NAME;", "-\t\t\t\tif (this.nonNullAnnotationName == null)", "-\t\t\t\t\tthis.nonNullAnnotationName = DEFAULT_NONNULL_ANNOTATION_NAME;", "-\t\t\t} else if (DISABLED.equals(optionValue)) {", "-\t\t\t\tthis.emulateNullAnnotationTypes = false;", "-\t\t\t}", "-\t\t}", "-\t\tif ((optionValue = optionsMap.get(OPTION_DefaultImportNullAnnotationTypes)) != null) {", "-\t\t\tif (ENABLED.equals(optionValue)) {", "-\t\t\t\tthis.defaultImportNullAnnotationTypes = true;", "-\t\t\t\t// ensure that we actually have annotation names to be used for default imports:", "-\t\t\t\tif (this.nullableAnnotationName == null)", "-\t\t\t\t\tthis.nullableAnnotationName = DEFAULT_NULLABLE_ANNOTATION_NAME;", "-\t\t\t\tif (this.nonNullAnnotationName == null)", "-\t\t\t\t\tthis.nonNullAnnotationName = DEFAULT_NONNULL_ANNOTATION_NAME;", "-\t\t\t} else if (DISABLED.equals(optionValue)) {", "-\t\t\t\tthis.defaultImportNullAnnotationTypes = false;", "-\t\t\t}", "-\t\t}"]}], "num": 33777}
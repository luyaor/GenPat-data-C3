{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef4527624e04f9354dc5179d757575e2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bd33865db30ca45a5b13b9a8466d3a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "6a44e0777af1a4632e0d20c0e9b92d35d2ad59f3", "commitAfterChange": "2ca339c139c0fe73a5bd2705f66592731098d347", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic CompilationUnit[] getCompilationUnits() \t\tthrows InvalidInputException", "signatureAfterChange": " \tpublic CompilationUnit[] getCompilationUnits() \t\tthrows InvalidInputException", "diff": ["-\t\tint fileCount = filenames.length;", "+\t\tint fileCount = this.filenames.length;", "-\t\tString defaultEncoding = (String) options.get(CompilerOptions.OPTION_Encoding);", "+\t\tString defaultEncoding = (String) this.options.get(CompilerOptions.OPTION_Encoding);", "-\t\t\tchar[] charName = filenames[i].toCharArray();", "+\t\t\tchar[] charName = this.filenames[i].toCharArray();", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"unit.more\", filenames[i])); //$NON-NLS-1$", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"unit.more\", this.filenames[i])); //$NON-NLS-1$", "-\t\t\tFile file = new File(filenames[i]);", "+\t\t\tFile file = new File(this.filenames[i]);", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"unit.missing\", filenames[i])); //$NON-NLS-1$", "-\t\t\tString encoding = encodings[i];", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"unit.missing\", this.filenames[i])); //$NON-NLS-1$", "+\t\t\tString encoding = this.encodings[i];", "-\t\t\tunits[i] = new CompilationUnit(null, filenames[i], encoding);", "+\t\t\tunits[i] = new CompilationUnit(null, this.filenames[i], encoding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31636bf3bcb055f0f091dade57b71ea4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "e33f9e50507ed5c3d45f37527737576191428633", "commitAfterChange": "62bebd71f36545c90d6c943df5cd6ccb18d59a48", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tprivate int computeRelevanceForExpectingType(TypeBinding proposalType)", "signatureAfterChange": " \tprivate int computeRelevanceForExpectingType(TypeBinding proposalType)", "diff": ["-\t\tif(expectedTypes != null && proposalType != null) {", "-\t\t\tfor (int i = 0; i <= expectedTypesPtr; i++) {", "-\t\t\t\tif(CharOperation.equals(expectedTypes[i].qualifiedPackageName(), proposalType.qualifiedPackageName()) &&", "-\t\t\t\t\tCharOperation.equals(expectedTypes[i].qualifiedSourceName(), proposalType.qualifiedSourceName())) {", "+\t\tif(this.expectedTypes != null && proposalType != null) {", "+\t\t\tfor (int i = 0; i <= this.expectedTypesPtr; i++) {", "+\t\t\t\tif(CharOperation.equals(this.expectedTypes[i].qualifiedPackageName(), proposalType.qualifiedPackageName()) &&", "+\t\t\t\t\tCharOperation.equals(this.expectedTypes[i].qualifiedSourceName(), proposalType.qualifiedSourceName())) {", "-\t\t\t\tif((expectedTypesFilter & SUBTYPE) != 0", "-\t\t\t\t\t&& proposalType.isCompatibleWith(expectedTypes[i])) {", "+\t\t\t\tif((this.expectedTypesFilter & SUBTYPE) != 0", "+\t\t\t\t\t&& proposalType.isCompatibleWith(this.expectedTypes[i])) {", "-\t\t\t\tif((expectedTypesFilter & SUPERTYPE) != 0", "-\t\t\t\t\t&& expectedTypes[i].isCompatibleWith(proposalType)) {", "+\t\t\t\tif((this.expectedTypesFilter & SUPERTYPE) != 0", "+\t\t\t\t\t&& this.expectedTypes[i].isCompatibleWith(proposalType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "514cd13aa3321d30e4d4ff80e2fe8c7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java", "commitBeforeChange": "c30613b3c1eac52834666cb07a38e3f9077e1829", "commitAfterChange": "cbaf155d59bae1aee7ec473c177014431f794c16", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void complainIfUnusedExceptionHandlers( \t\tBlockScope scope, \t\tTryStatement tryStatement)", "signatureAfterChange": "  public void complainIfUnusedExceptionHandlers(BlockScope scope,TryStatement tryStatement)", "diff": ["-\t", "-\tpublic void complainIfUnusedExceptionHandlers(", "-\t\tBlockScope scope,", "-\t\tTryStatement tryStatement) {", "-\t\t// report errors for unreachable exception handlers", "-\t\tfor (int i = 0, count = handledExceptions.length; i < count; i++) {", "-\t\t\tint index = indexes.get(handledExceptions[i]);", "-\t\t\tint cacheIndex = index / BitCacheSize;", "-\t\t\tint bitMask = 1 << (index % BitCacheSize);", "-\t\t\tif ((isReached[cacheIndex] & bitMask) == 0) {", "-\t\t\t\tscope.problemReporter().unreachableCatchBlock(", "-\t\t\t\t\thandledExceptions[index],", "+", "+public void complainIfUnusedExceptionHandlers(BlockScope scope,TryStatement tryStatement) {", "+\t// report errors for unreachable exception handlers", "+\tfor (int i = 0, count = this.handledExceptions.length; i < count; i++) {", "+\t\tint index = this.indexes.get(this.handledExceptions[i]);", "+\t\tint cacheIndex = index / ExceptionHandlingFlowContext.BitCacheSize;", "+\t\tint bitMask = 1 << (index % ExceptionHandlingFlowContext.BitCacheSize);", "+\t\tif ((this.isReached[cacheIndex] & bitMask) == 0) {", "+\t\t\tscope.problemReporter().unreachableCatchBlock(", "+\t\t\t\tthis.handledExceptions[index],", "+\t\t\t\ttryStatement.catchArguments[index].type);", "+\t\t} else {", "+\t\t\tif ((this.isNeeded[cacheIndex] & bitMask) == 0) {", "+\t\t\t\tscope.problemReporter().hiddenCatchBlock(", "+\t\t\t\t\tthis.handledExceptions[index],", "-\t\t\t} else {", "-\t\t\t\tif ((isNeeded[cacheIndex] & bitMask) == 0) {", "-\t\t\t\t\tscope.problemReporter().hiddenCatchBlock(", "-\t\t\t\t\t\thandledExceptions[index],", "-\t\t\t\t\t\ttryStatement.catchArguments[index].type);", "-\t\t\t\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6446d1fef4e94b0cfe75f8269febd281", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/RewriteEventStore.java", "commitBeforeChange": "a40cb3ef59ebbd67185c7faac7fb4434fed79ef4", "commitAfterChange": "ee62bf9b530a584a4251f975aa510ac6ec2f5d0f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \tpublic RewriteEvent getEvent(ASTNode parent, StructuralPropertyDescriptor property)", "signatureAfterChange": " \t \tpublic RewriteEvent getEvent(ASTNode parent, StructuralPropertyDescriptor property)", "diff": ["-\t\tif (fLastEvent != null && fLastEvent.parent == parent && fLastEvent.childProperty == property) {", "-\t\t\treturn fLastEvent.event;", "+\t\tif (this.lastEvent != null && this.lastEvent.parent == parent && this.lastEvent.childProperty == property) {", "+\t\t\treturn this.lastEvent.event;", "-\t\tfor (int i= 0; i < fEvents.size(); i++) {", "-\t\t\tEventHolder holder= (EventHolder) fEvents.get(i);", "+\t\tfor (int i= 0; i < this.events.size(); i++) {", "+\t\t\tEventHolder holder= (EventHolder) this.events.get(i);", "-\t\t\t\tfLastEvent= holder;", "+\t\t\t\tthis.lastEvent= holder;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1b8ba9f6e2bd792223d3f89c361c831", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "commitAfterChange": "7d45b883ec69848a56f546daa0819092ba819185", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprivate void enterAbstractMethod(MethodInfo methodInfo)", "signatureAfterChange": " \tprivate void enterAbstractMethod(MethodInfo methodInfo)", "diff": ["-\t\t\tfMemberName[typeDepth] = new String(methodInfo.name);", "-\t\t\tfMemberNameRange[typeDepth] =", "+\t\t\tthis.memberName[typeDepth] = new String(methodInfo.name);", "+\t\t\tthis.memberNameRange[typeDepth] =", "-\t\t\tfMemberDeclarationStart[typeDepth] = methodInfo.declarationStart;", "-\t\t\tfMethodParameterTypes[typeDepth] = methodInfo.parameterTypes;", "-\t\t\tfMethodParameterNames[typeDepth] = methodInfo. parameterNames;", "+\t\t\tthis.memberDeclarationStart[typeDepth] = methodInfo.declarationStart;", "+\t\t\tthis.methodParameterTypes[typeDepth] = methodInfo.parameterTypes;", "+\t\t\tthis.methodParameterNames[typeDepth] = methodInfo. parameterNames;", "-\t\t\t\t\t\tfMemberName[typeDepth],", "-\t\t\t\t\t\tconvertTypeNamesToSigs(fMethodParameterTypes[typeDepth]));", "+\t\t\t\t\t\tthis.memberName[typeDepth],", "+\t\t\t\t\t\tconvertTypeNamesToSigs(this.methodParameterTypes[typeDepth]));"]}], "num": 13904}
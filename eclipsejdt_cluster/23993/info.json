{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5faba0cebd8891fd989cd632d6ef9a4d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46adb7299850fb9e746ce64dce007308", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "00000b60f562c2a527973770ffa6c4e4b7e3b76a", "commitAfterChange": "78b625fa215070da4df50c1048fd705a8af21bd9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\tReferenceBinding enclosingInstanceReference = null;", "+\t\t\t} else if (!(enclosingInstanceReference = (ReferenceBinding) enclosingInstanceType).canBeSeenBy(scope)) {", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=317212", "+\t\t\t\tenclosingInstanceType = new ProblemReferenceBinding(", "+\t\t\t\t\t\t\tenclosingInstanceReference.compoundName,", "+\t\t\t\t\t\t\tenclosingInstanceReference,", "+\t\t\t\t\t\t\tProblemReasons.NotVisible);", "+\t\t\t\tscope.problemReporter().invalidType(this.enclosingInstance, enclosingInstanceType);", "+\t\t\t\thasError = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "915946c1d64f9e1dd9862d534d7861e1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "857538330357565215d6d2e64f21fab912b5ef20", "commitAfterChange": "f9fabd872f39dca4f00ed1200322e9463d41565c", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " public void generateSyntheticArgumentValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "signatureAfterChange": " public void generateSyntheticArgumentValues(BlockScope currentScope, ReferenceBinding targetType, Expression enclosingInstance, AstNode invocationSite)", "diff": ["+\tboolean hasExtraEnclosingInstance = enclosingInstance != null;", "-\t\tboolean hasExtraEnclosingInstance = enclosingInstance != null;", "-\t\t", "-\t\t\t\tthis.dup();", "-\t\t\t\tthis.invokeObjectGetClass(); // causes null check for all explicit enclosing instances", "-\t\t\t\tthis.pop();", "-\t\tif (enclosingInstance != null) {", "+\t\tif (hasExtraEnclosingInstance) {", "-\t\t\tenclosingInstance.generateCode(currentScope, this, true);", "-\t\t\tthis.invokeObjectGetClass(); // causes null check for all explicit enclosing instances", "-\t\t\tthis.pop();"]}], "num": 23993}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e8530ef916d684bf864e22f6ec0eba5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d7d86c810b1df6ebba418acd3d3bb35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "0660a80b4f83507ec084149491c197acba246b67", "commitAfterChange": "593a2bfc58d2fd5243ade8b5af13c44714cac2ea", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  \tpublic void test025()", "signatureAfterChange": "  \tpublic void test025()", "diff": ["+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tabstract class Z implements X { public abstract X[] x(); }\\n\" + ", "+\t\t\t\"\t                                                ^\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "234e92a633a078f8b8820286e30d5d47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "0d2bb4cd9a920a832985dcd25c76a6d09b85febf", "commitAfterChange": "9580475674d2dc0e975687220941c33b61d1b0ac", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \t \tpublic void test014()", "signatureAfterChange": " \t \tpublic void test014()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 16)\\n\" + ", "+\t\t\t\"\tclass EX extends Exception {\\n\" + ", "+\t\t\t\"\t      ^^\\n\" + ", "+\t\t\t\"The serializable class EX does not declare a static final serialVersionUID field of type long\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25ab7d7f4d6925a83ff7b62cb62e36b0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "8f217d25322b885604d27f1ae4690e476bac378b", "commitAfterChange": "9cc20cb240e3ca7f459d6bee269a4e8a319e621d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void test011()", "signatureAfterChange": " \tpublic void test011()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in Test1.java (at line 4)\\n\" + ", "+\t\t\t\"\tvoid pickOne2(Test1<Integer,Integer> c) throws ExOne { c.pickOne((Comparable) \\\"test\\\"); }\\n\" + ", "+\t\t\t\"\t                                                                  ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2de20219fcd6be268267ceee9589d56c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 401, "methodNumberAfterChange": 401, "signatureBeforeChange": " public void test2012_flow_info()", "signatureAfterChange": " public void test2012_flow_info()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 24)\\n\" + ", "+\t\t\"\tif (o == null) { /* */ }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3718d47ccc4fafb22728e956d43d4377", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "210b89134044d06a70fa2c472f5e9a859c41ba00", "commitAfterChange": "b268992d45d00cd5439bb032a6e5a5226c715e7e", "methodNumberBeforeChange": 144, "methodNumberAfterChange": 144, "signatureBeforeChange": " public void test139()", "signatureAfterChange": " public void test139()", "diff": ["+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\"\tabstract double eval2(double x, double y);\\n\" + ", "+\t\t\"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The method eval2 cannot be abstract in the enum constant MINUS\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38d476f34782899c0882d409ba57900f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "f4a4e733ec9a6ee8e5480938f7f746aa2704ad0d", "commitAfterChange": "f775b73fdbd5c38023656e438f9ccb262941721f", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "\t \t \tpublic void test0045()", "signatureAfterChange": "\t \t \tpublic void test0045()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic Z<T> var;\\n\" + ", "+\t\t\t\"\t         ^\\n\" + ", "+\t\t\t\"T cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a4c3b2fb67f957799fc66c3f46dd739", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "0660a80b4f83507ec084149491c197acba246b67", "commitAfterChange": "593a2bfc58d2fd5243ade8b5af13c44714cac2ea", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "     public void test111()", "signatureAfterChange": "     public void test111()", "diff": ["-            \"----------\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"9. WARNING in X.java (at line 41)\\n\" + ", "+    \t\t\"\tClass[] i = c.getInterfaces();\\n\" + ", "+    \t\t\"\t^^^^^\\n\" + ", "+    \t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c713616cc0c8b4a57233f57d1e99b73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a61562d7e56bcf68476db5393ae43445e5aee116", "commitAfterChange": "73e230db98e1a65780b6160021e4c8063d2276e3", "methodNumberBeforeChange": 724, "methodNumberAfterChange": 724, "signatureBeforeChange": " public void test0706()", "signatureAfterChange": " public void test0706()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tclass BB extends AA<CC> { <U> BB test() {return null;} }\\n\" + ", "+\t\t\t\"\t                                 ^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method test() of type BB has the same erasure as test() of type AA<T> but does not override it\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d39c737347538d3f1ad4aab4e9e44d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " public void test0064_method_call_isolation()", "signatureAfterChange": " public void test0064_method_call_isolation()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (o == null) {/* empty */}\\n\" + ", "+\t\t\"\t               ^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f003afaaf36c4c9f68ece64d0a1f7a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/DeprecatedTest.java", "commitBeforeChange": "2fdd800912ee4f65c51a2ec384533d1146c71af7", "commitAfterChange": "844f82aaef831e55c4827a65ccd98caed0cd08f3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void test003()", "signatureAfterChange": " public void test003()", "diff": ["-\t\t\"----------\\n\"\t);", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in p\\\\Top.java (at line 42)\\n\" + ", "+\t\t\"\tObject hello(){\\n\" + ", "+\t\t\"\t       ^^^^^^^\\n\" + ", "+\t\t\"The method hello() from the type new Top.StaticM1.StaticM2.NonStaticM3(){} is never used locally\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "432281839221c1aa9c236395e8af91d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "bb670e5ec8185e24981d836127d58e53e56c1ba8", "commitAfterChange": "83a5df02089ecb5f7e6df978c59083c15170780c", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 186, "signatureBeforeChange": " \tpublic void test0178()", "signatureAfterChange": " \tpublic void test0178()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\"\tif (t instanceof X<T>) {\\n\" +", "-\t\t\t\"\t    ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Cannot perform instanceof check against parameterized type X<T>. Use instead its raw form X since generic type information will be erased at runtime\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 6)\\n\" +", "-\t\t\t\"\t} else if (t instanceof X<String>) {\\n\" +", "-\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Cannot perform instanceof check against parameterized type X<String>. Use instead its raw form X since generic type information will be erased at runtime\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 10)\\n\" +", "-\t\t\t\"\t} else \tif (t instanceof T) {\\n\" +", "-\t\t\t\"\t       \t    ^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Cannot perform instanceof check against type parameter T. Use instead its erasure Object since generic type information will be erased at runtime\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tif (t instanceof X<T>) {\\n\" + ", "+\t\t\t\"\t    ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against parameterized type X<T>. Use instead its raw form X since generic type information will be erased at runtime\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\t} else if (t instanceof X<String>) {\\n\" + ", "+\t\t\t\"\t           ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against parameterized type X<String>. Use instead its raw form X since generic type information will be erased at runtime\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\t} else \tif (t instanceof T) {\\n\" + ", "+\t\t\t\"\t       \t    ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Cannot perform instanceof check against type parameter T. Use instead its erasure Object since generic type information will be erased at runtime\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"\t} else if (t instanceof X) {\\n\" + ", "+\t\t\t\"\t                        ^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5910524c018de11248521be929bfde32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_4.java", "commitBeforeChange": "149c538751123b079a5874a00aba83297561ab5c", "commitAfterChange": "7bd675acf4007077bf6bd84b82139719c7a8ca75", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void test037()", "signatureAfterChange": " \tpublic void test037()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\t\"\t* @param <T> Type parameter 2\\n\" +", "-\t\t\t\t\"\t         ^^^\\n\" +", "-\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"2. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\t\"\t* @param <V> Type parameter 2\\n\" +", "-\t\t\t\t\"\t         ^^^\\n\" +", "-\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"3. ERROR in X.java (at line 6)\\n\" +", "-\t\t\t\t\"\t* @param <U> Type parameter 1\\n\" +", "-\t\t\t\t\"\t         ^^^\\n\" +", "-\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"4. ERROR in X.java (at line 10)\\n\" +", "-\t\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" +", "-\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "-\t\t\t\t\"----------\\n\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t* @param <T> Type parameter 2\\n\" + ", "+\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t* @param <V> Type parameter 2\\n\" + ", "+\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\t* @param <U> Type parameter 1\\n\" + ", "+\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" + ", "+\t\t\t\"\t                        ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Exceptions cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ab555a9d267f5e59e7300ba8784b30e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c80004d70ebe07235571e96c3ea452dbc7ba5394", "commitAfterChange": "70dd884582455dcf661aaade70c8faff4213db3a", "methodNumberBeforeChange": 256, "methodNumberAfterChange": 256, "signatureBeforeChange": " \tpublic void test0252()", "signatureAfterChange": " \tpublic void test0252()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\telement = (Set<X>) iter.next();\\n\" + ", "+\t\t\t\"\t          ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The cast from X to Set<X> is actually checking against the erased type Set\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f786e5e20df75450eb2d9018fceb2fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  \tpublic void test039()", "signatureAfterChange": "  \tpublic void test039()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tvoid foo(L l){}\\n\" + ", "+\t\t\t\"\t         ^\\n\" + ", "+\t\t\t\"Type safety: L is a raw type. References to generic type L<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "600c6be8a6fc94e86b1c90c0fa65f9c1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " public void test0067_method_call_invocation_target()", "signatureAfterChange": " public void test0067_method_call_invocation_target()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (o == null)  { /* */ }\\n\" + ", "+\t\t\"\t                ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "627d6acf001de568018c0ca0b5e22c9c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "d35306cb5dcf7e4ac666fd0505f3086f50241fb2", "commitAfterChange": "3284f738bbf7a2dbd90434dea313c8629bed5722", "methodNumberBeforeChange": 179, "methodNumberAfterChange": 179, "signatureBeforeChange": " public void test401939c()", "signatureAfterChange": " public void test401939c()", "diff": ["+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 9)\\n\" + ", "+\t\t\t\t\"\tgoo((x) -> {});\\n\" + ", "+\t\t\t\t\"\t^^^\\n\" + ", "+\t\t\t\t\"The method goo(I) in the type X is not applicable for the arguments ((<no type> x) -> {})\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f118125dcaf13cbce04545993646c6e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 283, "methodNumberAfterChange": 283, "signatureBeforeChange": " \tpublic void test279()", "signatureAfterChange": " \tpublic void test279()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic Class getSomething() { return null; }\\n\" + ", "+\t\t\t\"\t       ^^^^^\\n\" + ", "+\t\t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "788d113c325d136e519343743e062bd6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " public void test0082_shortcut_boolean_expression()", "signatureAfterChange": " public void test0082_shortcut_boolean_expression()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"3. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\"\tif (o == null) { /* */ }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a7444cece93897e52fcb277a4627906", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java", "commitBeforeChange": "210b89134044d06a70fa2c472f5e9a859c41ba00", "commitAfterChange": "b268992d45d00cd5439bb032a6e5a5226c715e7e", "methodNumberBeforeChange": 148, "methodNumberAfterChange": 148, "signatureBeforeChange": " public void test143()", "signatureAfterChange": " public void test143()", "diff": ["+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tpublic abstract String a();\\n\" + ", "+\t\t\"\t                       ^^^\\n\" + ", "+\t\t\"The method a cannot be abstract in the enum constant A\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a84ddbcc192dc07ea8e9f0aeb7d579c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " public void test0083_shortcut_boolean_expression()", "signatureAfterChange": " public void test0083_shortcut_boolean_expression()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"3. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\"\tif (o == null) { /* */ }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8b8dffcbc6fbdf147b9cb7bc77209d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "17c3ff29c758ba3af32e32b7cf74f8bc1004af3b", "commitAfterChange": "3406cbdf1170bd7765ceb54091ffb987caaf1f67", "methodNumberBeforeChange": 1049, "methodNumberAfterChange": 1049, "signatureBeforeChange": " public void test1037()", "signatureAfterChange": " public void test1037()", "diff": ["+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tMap.Entry<?,? super Zork>\tentry;\\n\" + ", "+\t\t\"\t                    ^^^^\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3b010e135a9e12aeb34f930cc84e229", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tpublic void test050()", "signatureAfterChange": " \tpublic void test050()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass Y <T extends Y.M> extends Super {}\\n\" + ", "+\t\t\t\"\t                   ^^^\\n\" + ", "+\t\t\t\"Type safety: Y.M is a raw type. References to generic type Super.M should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c128dfa4c8da98b9a959acfbd4e84044", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "     public void test111()", "signatureAfterChange": "     public void test111()", "diff": ["-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"\tinterface Iface extends Ann {\\n\" + ", "-\t\t\t\"\t                        ^^^\\n\" + ", "-\t\t\t\"The annotation type Ann should not be used as a superinterface for Iface\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "-\t\t\t\"\tabstract class Klass implements Ann {\\n\" + ", "-\t\t\t\"\t                                ^^^\\n\" + ", "-\t\t\t\"The annotation type Ann should not be used as a superinterface for Klass\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\t\"\tclass SubKlass extends Klass {\\n\" + ", "-\t\t\t\"\t      ^^^^^^^^\\n\" + ", "-\t\t\t\"The type SubKlass must implement the inherited abstract method Ann.foo()\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 20)\\n\" + ", "-\t\t\t\"\tclass AnnImpl implements Ann {\\n\" + ", "-\t\t\t\"\t                         ^^^\\n\" + ", "-\t\t\t\"The annotation type Ann should not be used as a superinterface for AnnImpl\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"5. WARNING in X.java (at line 21)\\n\" + ", "-\t\t\t\"\tpublic boolean equals(Object obj) { return false; }\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method equals(Object) of type AnnImpl should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"6. WARNING in X.java (at line 22)\\n\" + ", "-\t\t\t\"\tpublic int hashCode() { return 0; }\\n\" + ", "-\t\t\t\"\t           ^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method hashCode() of type AnnImpl should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"7. WARNING in X.java (at line 23)\\n\" + ", "-\t\t\t\"\tpublic String toString() { return null; }\\n\" + ", "-\t\t\t\"\t              ^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method toString() of type AnnImpl should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "-\t\t\t\"----------\\n\");", "+            \"----------\\n\" + ", "+    \t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "+    \t\t\"\tinterface Iface extends Ann {\\n\" + ", "+    \t\t\"\t                        ^^^\\n\" + ", "+    \t\t\"The annotation type Ann should not be used as a superinterface for Iface\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "+    \t\t\"\tabstract class Klass implements Ann {\\n\" + ", "+    \t\t\"\t                                ^^^\\n\" + ", "+    \t\t\"The annotation type Ann should not be used as a superinterface for Klass\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "+    \t\t\"\tclass SubKlass extends Klass {\\n\" + ", "+    \t\t\"\t      ^^^^^^^^\\n\" + ", "+    \t\t\"The type SubKlass must implement the inherited abstract method Ann.foo()\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"4. WARNING in X.java (at line 20)\\n\" + ", "+    \t\t\"\tclass AnnImpl implements Ann {\\n\" + ", "+    \t\t\"\t                         ^^^\\n\" + ", "+    \t\t\"The annotation type Ann should not be used as a superinterface for AnnImpl\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"5. WARNING in X.java (at line 21)\\n\" + ", "+    \t\t\"\tpublic boolean equals(Object obj) { return false; }\\n\" + ", "+    \t\t\"\t               ^^^^^^^^^^^^^^^^^^\\n\" + ", "+    \t\t\"The method equals(Object) of type AnnImpl should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"6. WARNING in X.java (at line 22)\\n\" + ", "+    \t\t\"\tpublic int hashCode() { return 0; }\\n\" + ", "+    \t\t\"\t           ^^^^^^^^^^\\n\" + ", "+    \t\t\"The method hashCode() of type AnnImpl should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"7. WARNING in X.java (at line 23)\\n\" + ", "+    \t\t\"\tpublic String toString() { return null; }\\n\" + ", "+    \t\t\"\t              ^^^^^^^^^^\\n\" + ", "+    \t\t\"The method toString() of type AnnImpl should be tagged with @Override since it actually overrides a superclass method\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"8. WARNING in X.java (at line 30)\\n\" + ", "+    \t\t\"\tClass c = SubKlass.class;\\n\" + ", "+    \t\t\"\t^^^^^\\n\" + ", "+    \t\t\"Type safety: Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+    \t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c17793e0479e66ebe5e862cb1d6c59d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "3f665dc08ffa02e27b74efb0940c16f2120a11f8", "commitAfterChange": "307e2de84d078daed3099015a7ac89d980746b6b", "methodNumberBeforeChange": 750, "methodNumberAfterChange": 750, "signatureBeforeChange": " public void test0730()", "signatureAfterChange": " public void test0730()", "diff": ["-\t\t\"----------\\n\"", "-\t\t//TODO should be", "-//\t\t\"----------\\n\" + ", "-//\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-//\t\t\"\tZork z;\\n\" + ", "-//\t\t\"\t^^^^\\n\" + ", "-//\t\t\"Zork cannot be resolved to a type\\n\" + ", "-//\t\t\"----------\\n\" + ", "-//\t\t\"2. WARNING in X.java (at line 11)\\n\" + ", "-//\t\t\"\tprivate SuperInterface< ? extends SuperInterface> x = null;\\n\" + ", "-//\t\t\"\t                                  ^^^^^^^^^^^^^^\\n\" + ", "-//\t\t\"X.SuperInterface is a raw type. References to generic type X.SuperInterface<A> should be parameterized\\n\" + ", "-//\t\t\"----------\\n\" + ", "-//\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "-//\t\t\"\t((SubInterface) this.x).getString();\\n\" + ", "-//\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-//\t\t\"Cannot cast from X.SuperInterface<capture#1-of ? extends X.SuperInterface> to X.SubInterface\\n\" + ", "-//\t\t\"----------\\n\"", "-\t\t);", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\"\t((SubInterface) this.x).getString();\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Cannot cast from X.SuperInterface<capture#1-of ? extends X.SuperInterface> to X.SubInterface\\n\" + ", "+\t\t\"----------\\n\"\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5aea6559310fd99dbce3c0539846e44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "0660a80b4f83507ec084149491c197acba246b67", "commitAfterChange": "593a2bfc58d2fd5243ade8b5af13c44714cac2ea", "methodNumberBeforeChange": 1045, "methodNumberAfterChange": 1045, "signatureBeforeChange": " public void test1033()", "signatureAfterChange": " public void test1033()", "diff": ["+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"\tvoid bar2(Class... classes) {}\\n\" + ", "+\t\t\"\t          ^^^^^\\n\" + ", "+\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caefbf77685e3e0d9a891b2e22d93374", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "909d7ea106422d6ae8df5392c045bb0bb269cbe3", "commitAfterChange": "1b7cc740dd9297bd0f4bafe7fea18d712058ba6e", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " public void test0093_instanceof()", "signatureAfterChange": " public void test0093_instanceof()", "diff": ["+\t\t\"----------\\n\" +", "+\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (x == null) { /* */ }\\n\" + ", "+\t\t\"\t               ^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfb3366e0d5c2c8c83b426cd7decf804", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaRegressionTest.java", "commitBeforeChange": "40aba6682d4eea8f15f9ae037123e7cedc4a4ef3", "commitAfterChange": "ffcab3bbd38103e7f6861237d076c93f4488ed08", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void testBug463526()", "signatureAfterChange": " public void testBug463526()", "diff": ["+\t\"----------\\n\" + ", "+\t\"2. ERROR in Test.java (at line 4)\\n\" + ", "+\t\"\tr.accept((l) -> (doItOnTheClass(new Object())));\\n\" + ", "+\t\"\t                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\"Invalid expression as statement\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e410ddc8197a7053431cd79bc5cb7e30", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_3.java", "commitBeforeChange": "a7538ae82dbd33b3f26dec50ae8ce6f249c7a04f", "commitAfterChange": "f0ca1f9e3571a6c8cc7bcfc8fee3982374c51194", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic void test037()", "signatureAfterChange": " \tpublic void test037()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\t\"\t* @param <T> Type parameter 2\\n\" +", "-\t\t\t\t\"\t         ^^^\\n\" +", "-\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"2. ERROR in X.java (at line 5)\\n\" +", "-\t\t\t\t\"\t* @param <V> Type parameter 2\\n\" +", "-\t\t\t\t\"\t         ^^^\\n\" +", "-\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"3. ERROR in X.java (at line 6)\\n\" +", "-\t\t\t\t\"\t* @param <U> Type parameter 1\\n\" +", "-\t\t\t\t\"\t         ^^^\\n\" +", "-\t\t\t\t\"Javadoc: Invalid param tag name\\n\" +", "-\t\t\t\t\"----------\\n\" +", "-\t\t\t\t\"4. ERROR in X.java (at line 10)\\n\" +", "-\t\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" +", "-\t\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" +", "-\t\t\t\t\"----------\\n\"", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\t* @param <T> Type parameter 2\\n\" + ", "+\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\t* @param <V> Type parameter 2\\n\" + ", "+\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\t* @param <U> Type parameter 1\\n\" + ", "+\t\t\t\"\t         ^^^\\n\" + ", "+\t\t\t\"Javadoc: Invalid param tag name\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" + ", "+\t\t\t\"\t        ^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Syntax error, type parameters are only available if source level is 1.5\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tpublic <T, U, V extends Exceptions> void foo(int val, Object obj) {}\\n\" + ", "+\t\t\t\"\t                        ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Exceptions cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7f043d9b5ba7ad04c41542f6695929d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 269, "methodNumberAfterChange": 269, "signatureBeforeChange": "\t\t \tpublic void test265()", "signatureAfterChange": "\t\t \tpublic void test265()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tXC<?> xcu2 = (XC<? extends X>) new X<E>();\t\t\t\t\t\t\\n\" + ", "+\t\t\t\"\t                           ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0d83c903fdcbb7b3fe9ee8b500d2f0e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AnnotationTest.java", "commitBeforeChange": "75fd26922e4c1a3951587500ef0d4c4aec9b93ba", "commitAfterChange": "ec933200149b0beb2aa7f1482e62f6a573c5bd61", "methodNumberBeforeChange": 182, "methodNumberAfterChange": 182, "signatureBeforeChange": "     public void test176()", "signatureAfterChange": "     public void test176()", "diff": ["-    // https://bugs.eclipse.org/bugs/show_bug.cgi?id=97220", "+    // https://bugs.eclipse.org/bugs/show_bug.cgi?id=97220 - variation", "-            \"----------\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"----------\\n\" + ", "+    \t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+    \t\t\"\t@SuppressWarnings({\\\"serial\\\", \\\"nls\\\"})\\n\" + ", "+    \t\t\"\t                   ^^^^^^^^\\n\" + ", "+    \t\t\"Unnecessary @SuppressWarnings(\\\"serial\\\")\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f638e3011e6f4f5c00bbe478731b7047", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 285, "methodNumberAfterChange": 285, "signatureBeforeChange": "\t \tpublic void test281()", "signatureAfterChange": "\t \tpublic void test281()", "diff": ["-\t\t\t\"\t                         ^^\\n\" +", "+\t\t\t\"\t                         ^^\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tinterface Y<T3 extends Comparable> {}\\n\" + ", "+\t\t\t\"\t                       ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Comparable is a raw type. References to generic type Comparable<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fac9009b4708a0755811bca614cf38c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_3.java", "commitBeforeChange": "3307a3b21f8472cc998512e9e4cd5afdd4f17b52", "commitAfterChange": "b155f47580a90f694a899aae6d06a1ff29f450b8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void test011()", "signatureAfterChange": " public void test011()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in p1\\\\X.java (at line 5)\\n\" +", "-\t\t\"\twhile (false) System.out.println(\\\"unreachable\\\");\t\\n\" +", "-\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Unreachable code\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. ERROR in p1\\\\X.java (at line 9)\\n\" +", "-\t\t\"\tfor (;false;) System.out.println(\\\"unreachable\\\");\t\\n\" +", "-\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Unreachable code\\n\" +", "-\t\t\"----------\\n\"", "-\t);", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in p1\\\\X.java (at line 5)\\n\" + ", "+\t\t\"\twhile (false) System.out.println(\\\"unreachable\\\");\t\\n\" + ", "+\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Unreachable code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in p1\\\\X.java (at line 9)\\n\" + ", "+\t\t\"\tfor (;false;) System.out.println(\\\"unreachable\\\");\t\\n\" + ", "+\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Unreachable code\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in p1\\\\X.java (at line 11)\\n\" + ", "+\t\t\"\tif (false)System.out.println(\\\"unreachable\\\");\t\t\\n\" + ", "+\t\t\"\t          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Dead code\\n\" + ", "+\t\t\"----------\\n\");"]}], "num": 32708}
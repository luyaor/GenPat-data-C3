{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "20d755d59dc29dd368b7407c0a8c3496", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b0081b63dbdf7d4c4504b8aefbcbafc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "ca2d3ce8265fe41695ca043d40ccc35d5ce77b25", "commitAfterChange": "8fd47ede750ba6005aab3e86ceccb03a6e16dba8", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " \tprivate IClasspathContainer initializeAllContainers(IJavaProject javaProjectToInit, IPath containerToInit) throws JavaModelException", "signatureAfterChange": " \tprivate IClasspathContainer initializeAllContainers(IJavaProject javaProjectToInit, IPath containerToInit) throws JavaModelException", "diff": ["-\t\tHashSet containerPaths = (HashSet) allContainerPaths.get(javaProjectToInit);", "-\t\tif (containerPaths == null) {", "-\t\t\tcontainerPaths = new HashSet();", "-\t\t\tallContainerPaths.put(javaProjectToInit, containerPaths);", "+\t\tif (javaProjectToInit != null) {", "+\t\t\tHashSet containerPaths = (HashSet) allContainerPaths.get(javaProjectToInit);", "+\t\t\tif (containerPaths == null) {", "+\t\t\t\tcontainerPaths = new HashSet();", "+\t\t\t\tallContainerPaths.put(javaProjectToInit, containerPaths);", "+\t\t\t}", "+\t\t\tcontainerPaths.add(containerToInit);", "+\t\t\t// mark container as being initialized", "+\t\t\tcontainerAddInitializationInProgress(javaProjectToInit, containerToInit);", "-\t\tcontainerPaths.add(containerToInit);", "-\t\t// mark container as being initialized", "-\t\tcontainerAddInitializationInProgress(javaProjectToInit, containerToInit);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9376a97a1fa02f0ad01e74819fab0741", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "5fad474fe873700d0e43495d7c1c8c2c489d0d4f", "commitAfterChange": "d1974547d7c9577873b59a9bbfd6fce3981cc7e4", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "\r \tpublic String getVariablesAsXMLString() throws CoreException", "signatureAfterChange": "\r \tpublic String getVariablesAsXMLString() throws CoreException", "diff": ["-\t\t\tElement varElement= document.createElement(\"variable\"); //$NON-NLS-1$\r", "-\t\t\tvarElement.setAttribute(\"name\", var); //$NON-NLS-1$\r", "-\t\t\tvarElement.setAttribute(\"path\", varPath.toString());\t\t\t //$NON-NLS-1$\r", "-\t\t\trootElement.appendChild(varElement);\r", "+\t\t\tif (varPath != null){\r", "+\t\t\t\tElement varElement= document.createElement(\"variable\"); //$NON-NLS-1$\r", "+\t\t\t\tvarElement.setAttribute(\"name\", var); //$NON-NLS-1$\r", "+\t\t\t\tvarElement.setAttribute(\"path\", varPath.toString());\t\t\t //$NON-NLS-1$\r", "+\t\t\t\trootElement.appendChild(varElement);\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f01ffb4b4eb2a822455c6daaf2d0eec4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java", "commitBeforeChange": "01df0dd7f81a30148e9341436af241c588cea60b", "commitAfterChange": "14f758abdbf93582152d632f97767b107ab4115d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic char[] computeUniqueKey(boolean isLeaf)", "signatureAfterChange": " \tpublic char[] computeUniqueKey(boolean isLeaf)", "diff": ["-\t\tMethodScope methodScope = scope instanceof MethodScope ? (MethodScope) scope : scope.enclosingMethodScope();", "-\t\tReferenceContext referenceContext = methodScope.referenceContext;", "-\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "-\t\t\tMethodBinding methodBinding = ((AbstractMethodDeclaration) referenceContext).binding;", "-\t\t\tif (methodBinding != null) {", "-\t\t\t\tbuffer.append(methodBinding.computeUniqueKey(false/*not a leaf*/));", "+\t\tif (scope != null) {", "+\t\t\t// the scope can be null. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=185129", "+\t\t\tMethodScope methodScope = scope instanceof MethodScope ? (MethodScope) scope : scope.enclosingMethodScope();", "+\t\t\tReferenceContext referenceContext = methodScope.referenceContext;", "+\t\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "+\t\t\t\tMethodBinding methodBinding = ((AbstractMethodDeclaration) referenceContext).binding;", "+\t\t\t\tif (methodBinding != null) {", "+\t\t\t\t\tbuffer.append(methodBinding.computeUniqueKey(false/*not a leaf*/));", "+\t\t\t\t}", "+\t\t\t} else if (referenceContext instanceof TypeDeclaration) {", "+\t\t\t\tTypeBinding typeBinding = ((TypeDeclaration) referenceContext).binding;", "+\t\t\t\tif (typeBinding != null) {", "+\t\t\t\t\tbuffer.append(typeBinding.computeUniqueKey(false/*not a leaf*/));", "+\t\t\t\t}", "-\t\t} else if (referenceContext instanceof TypeDeclaration) {", "-\t\t\tTypeBinding typeBinding = ((TypeDeclaration) referenceContext).binding;", "-\t\t\tif (typeBinding != null) {", "-\t\t\t\tbuffer.append(typeBinding.computeUniqueKey(false/*not a leaf*/));", "-\t\t\t}", "+\t", "+\t\t\t// scope index", "+\t\t\tgetScopeKey(scope, buffer);", "-", "-\t\t// scope index", "-\t\tgetScopeKey(scope, buffer);", "-"]}], "num": 69101}
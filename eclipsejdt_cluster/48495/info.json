{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "213560421b0a8ae92135303c98679d4c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76b806b570393485d158e7f18912606e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 234, "methodNumberAfterChange": 238, "signatureBeforeChange": " public void javadocInvalidMethod(MessageSend messageSend, MethodBinding method, int modifiers)", "signatureAfterChange": " public void javadocInvalidMethod(MessageSend messageSend, MethodBinding method, int modifiers)", "diff": ["-\t\t\t\tString closestParameterTypeNames = typesAsString(problemMethod.closestMatch.isVarargs(), problemMethod.closestMatch.parameters, false);", "-\t\t\t\tString parameterTypeNames = typesAsString(method.isVarargs(), method.parameters, false);", "-\t\t\t\tString closestParameterTypeShortNames = typesAsString(problemMethod.closestMatch.isVarargs(), problemMethod.closestMatch.parameters, true);", "-\t\t\t\tString parameterTypeShortNames = typesAsString(method.isVarargs(), method.parameters, true);", "+\t\t\t\tString closestParameterTypeNames = typesAsString(problemMethod.closestMatch, false);", "+\t\t\t\tString parameterTypeNames = typesAsString(method, false);", "+\t\t\t\tString closestParameterTypeShortNames = typesAsString(problemMethod.closestMatch, true);", "+\t\t\t\tString parameterTypeShortNames = typesAsString(method, true);", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false),", "+\t\t\t\t        typesAsString(shownMethod, false),", "-\t\t\t\t        typesAsString(false, invocationArguments, false),", "+\t\t\t\t        typesAsString(invocationArguments, false),", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true),", "+\t\t\t\t        typesAsString(shownMethod, true),", "-\t\t\t\t        typesAsString(false, invocationArguments, true),", "+\t\t\t\t        typesAsString(invocationArguments, true),", "-\t\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false),", "+\t\t\t\t\t        typesAsString(shownMethod, false),", "-\t\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, false) },", "+\t\t\t\t\t        typesAsString(method, false) },", "-\t\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true),", "+\t\t\t\t\t        typesAsString(shownMethod, true),", "-\t\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, true) },", "+\t\t\t\t\t        typesAsString(method, true) },", "-\t\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false),", "+\t\t\t\t\t        typesAsString(shownMethod, false),", "-\t\t\t\t\t\t\ttypesAsString(false, shownMethod.typeVariables, false),", "-\t\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, false) },", "+\t\t\t\t\t\t\ttypesAsString(shownMethod.typeVariables, false),", "+\t\t\t\t\t        typesAsString(method, false) },", "-\t\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true),", "+\t\t\t\t\t        typesAsString(shownMethod, true),", "-\t\t\t\t\t\t\ttypesAsString(false, shownMethod.typeVariables, true),", "-\t\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, true) },", "+\t\t\t\t\t\t\ttypesAsString(shownMethod.typeVariables, true),", "+\t\t\t\t\t        typesAsString(method, true) },", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false),", "+\t\t\t\t        typesAsString(shownMethod, false),", "-\t\t\t\t\t\ttypesAsString(false, ((ParameterizedGenericMethodBinding)shownMethod).typeArguments, false),", "-\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, false) },", "+\t\t\t\t\t\ttypesAsString(((ParameterizedGenericMethodBinding)shownMethod).typeArguments, false),", "+\t\t\t\t        typesAsString(method, false) },", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true),", "+\t\t\t\t        typesAsString(shownMethod, true),", "-\t\t\t\t\t\ttypesAsString(false, ((ParameterizedGenericMethodBinding)shownMethod).typeArguments, true),", "-\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, true) },", "+\t\t\t\t\t\ttypesAsString(((ParameterizedGenericMethodBinding)shownMethod).typeArguments, true),", "+\t\t\t\t        typesAsString(method, true) },", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false),", "+\t\t\t\t        typesAsString(shownMethod, false),", "-\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, false) },", "+\t\t\t\t        typesAsString(method, false) },", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true),", "+\t\t\t\t        typesAsString(shownMethod, true),", "-\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, true) },", "+\t\t\t\t        typesAsString(method, true) },", "-\t\t\tnew String(method.selector), typesAsString(method.isVarargs(), method.parameters, false)},", "+\t\t\tnew String(method.selector), typesAsString(method, false)},", "-\t\t\tnew String(method.selector), typesAsString(method.isVarargs(), method.parameters, true)},", "+\t\t\tnew String(method.selector), typesAsString(method, true)},"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "814fb6e02557cc7ecdd9480b0904f6de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 190, "methodNumberAfterChange": 194, "signatureBeforeChange": "  public void invalidMethod(MessageSend messageSend, MethodBinding method)", "signatureAfterChange": "  public void invalidMethod(MessageSend messageSend, MethodBinding method)", "diff": ["-\t\t\t\t\tString closestParameterTypeNames = typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false);", "-\t\t\t\t\tString parameterTypeNames = typesAsString(false, problemMethod.parameters, false);", "-\t\t\t\t\tString closestParameterTypeShortNames = typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true);", "-\t\t\t\t\tString parameterTypeShortNames = typesAsString(false, problemMethod.parameters, true);", "+\t\t\t\t\tString closestParameterTypeNames = typesAsString(shownMethod, false);", "+\t\t\t\t\tString parameterTypeNames = typesAsString(problemMethod.parameters, false);", "+\t\t\t\t\tString closestParameterTypeShortNames = typesAsString(shownMethod, true);", "+\t\t\t\t\tString parameterTypeShortNames = typesAsString(problemMethod.parameters, true);", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false),", "+\t\t\t\t        typesAsString(shownMethod, false),", "-\t\t\t\t        typesAsString(false, invocationArguments, false),", "+\t\t\t\t        typesAsString(invocationArguments, false),", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true),", "+\t\t\t\t        typesAsString(shownMethod, true),", "-\t\t\t\t        typesAsString(false, invocationArguments, true),", "+\t\t\t\t        typesAsString(invocationArguments, true),", "-\t\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false),", "+\t\t\t\t\t        typesAsString(shownMethod, false),", "-\t\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, false) },", "+\t\t\t\t\t        typesAsString(method, false) },", "-\t\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true),", "+\t\t\t\t\t        typesAsString(shownMethod, true),", "-\t\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, true) },", "+\t\t\t\t\t        typesAsString(method, true) },", "-\t\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false),", "+\t\t\t\t\t        typesAsString(shownMethod, false),", "-\t\t\t\t\t\t\ttypesAsString(false, shownMethod.typeVariables, false),", "-\t\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, false) },", "+\t\t\t\t\t\t\ttypesAsString(shownMethod.typeVariables, false),", "+\t\t\t\t\t        typesAsString(method, false) },", "-\t\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true),", "+\t\t\t\t\t        typesAsString(shownMethod, true),", "-\t\t\t\t\t\t\ttypesAsString(false, shownMethod.typeVariables, true),", "-\t\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, true) },", "+\t\t\t\t\t\t\ttypesAsString(shownMethod.typeVariables, true),", "+\t\t\t\t\t        typesAsString(method, true) },", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false),", "+\t\t\t\t        typesAsString(shownMethod, false),", "-\t\t\t\t\t\ttypesAsString(false, ((ParameterizedGenericMethodBinding)shownMethod).typeArguments, false),", "-\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, false) },", "+\t\t\t\t\t\ttypesAsString(((ParameterizedGenericMethodBinding)shownMethod).typeArguments, false),", "+\t\t\t\t        typesAsString(method, false) },", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true),", "+\t\t\t\t        typesAsString(shownMethod, true),", "-\t\t\t\t\t\ttypesAsString(false, ((ParameterizedGenericMethodBinding)shownMethod).typeArguments, true),", "-\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, true) },", "+\t\t\t\t\t\ttypesAsString(((ParameterizedGenericMethodBinding)shownMethod).typeArguments, true),", "+\t\t\t\t        typesAsString(method, true) },", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false),", "+\t\t\t\t        typesAsString(shownMethod, false),", "-\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, false) },", "+\t\t\t\t        typesAsString(method, false) },", "-\t\t\t\t        typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true),", "+\t\t\t\t        typesAsString(shownMethod, true),", "-\t\t\t\t        typesAsString(method.isVarargs(), method.parameters, true) },", "+\t\t\t\t        typesAsString(method, true) },", "-\t\t\tnew String(shownMethod.selector), typesAsString(shownMethod.isVarargs(), shownMethod.parameters, false)},", "+\t\t\tnew String(shownMethod.selector), typesAsString(shownMethod, false)},", "-\t\t\tnew String(shownMethod.selector), typesAsString(shownMethod.isVarargs(), shownMethod.parameters, true)},", "+\t\t\tnew String(shownMethod.selector), typesAsString(shownMethod, true)},"]}], "num": 48495}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2901608a26f10b70ee7271748db1afa9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61c7d2b96d10be0a69a957e3c28fec5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CharacterLiteral.java", "commitBeforeChange": "0874cfb2ef67a79a49d909a248c81f1f23dd713a", "commitAfterChange": "c45642653b63db018daa5628a39e66d2c31eb53d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \r \tpublic char charValue()", "signatureAfterChange": " \r \tpublic char charValue()", "diff": ["-\t\t\t// legal: b, t, n, f, r, \", ', \\, 0, 1, 2, 3, 4, 5, 6, or 7\r", "-\t\t\t// FIXME\r", "-\t\t\tthrow new RuntimeException(\"not implemented yet\");//$NON-NLS-1$\r", "+\t\t\tif (len == 3) {\r", "+\t\t\t\tchar nextChar = s.charAt(2);\r", "+\t\t\t\tswitch(nextChar) {\r", "+\t\t\t\t\tcase 'b' :\r", "+\t\t\t\t\t\treturn '\\b';\r", "+\t\t\t\t\tcase 't' :\r", "+\t\t\t\t\t\treturn '\\t';\r", "+\t\t\t\t\tcase 'n' :\r", "+\t\t\t\t\t\treturn '\\n';\r", "+\t\t\t\t\tcase 'f' :\r", "+\t\t\t\t\t\treturn '\\f';\r", "+\t\t\t\t\tcase 'r' :\r", "+\t\t\t\t\t\treturn '\\r';\r", "+\t\t\t\t\tcase '\\\"':\r", "+\t\t\t\t\t\treturn '\\\"';\r", "+\t\t\t\t\tcase '\\'':\r", "+\t\t\t\t\t\treturn '\\'';\r", "+\t\t\t\t\tcase '\\\\':\r", "+\t\t\t\t\t\treturn '\\\\';\r", "+\t\t\t\t\tcase '0' :\r", "+\t\t\t\t\t\treturn '\\0';\r", "+\t\t\t\t\tcase '1' :\r", "+\t\t\t\t\t\treturn '\\1';\r", "+\t\t\t\t\tcase '2' :\r", "+\t\t\t\t\t\treturn '\\2';\r", "+\t\t\t\t\tcase '3' :\r", "+\t\t\t\t\t\treturn '\\3';\r", "+\t\t\t\t\tcase '4' :\r", "+\t\t\t\t\t\treturn '\\4';\r", "+\t\t\t\t\tcase '5' :\r", "+\t\t\t\t\t\treturn '\\5';\r", "+\t\t\t\t\tcase '6' :\r", "+\t\t\t\t\t\treturn '\\6';\r", "+\t\t\t\t\tcase '7' :\r", "+\t\t\t\t\t\treturn '\\7';\r", "+\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");\r", "+\t\t\t\t}\r", "+\t\t\t} else if (len == 8) {\r", "+\t\t\t\t//handle the case of unicode.\r", "+\t\t\t\tint currentPosition = 2;\r", "+\t\t\t\tint c1 = 0, c2 = 0, c3 = 0, c4 = 0;\r", "+\t\t\t\tif (s.charAt(currentPosition++) == 'u') {\r", "+\t\t\t\t\tif ((c1 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t|| c1 < 0\r", "+\t\t\t\t\t\t|| (c2 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t|| c2 < 0\r", "+\t\t\t\t\t\t|| (c3 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t|| c3 < 0\r", "+\t\t\t\t\t\t|| (c4 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t|| c4 < 0){\r", "+\t\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\treturn (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\tthrow new IllegalArgumentException(\"illegal character literal\");\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebc967d41512013988d45c1203ffb744", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "7c5e971605e3df9f80c39caf6a5dabceeb49148b", "commitAfterChange": "ffe39da04df0f3a3dcc2e15c0353857438ce8e35", "methodNumberBeforeChange": 130, "methodNumberAfterChange": 130, "signatureBeforeChange": " protected void consumeEmptyStatement()", "signatureAfterChange": " protected void consumeEmptyStatement()", "diff": ["-\tif (this.scanner.source[this.endStatementPosition] == ';') {", "+\tchar[] source = this.scanner.source;", "+\tif (source[this.endStatementPosition] == ';') {", "-\t\t// we have a Unicode for the ';' (/u003B)", "-\t\tpushOnAstStack(new EmptyStatement(this.endStatementPosition - 5, this.endStatementPosition));", "+\t\tif(source.length > 5) {", "+\t\t\tint c1 = 0, c2 = 0, c3 = 0, c4 = 0;", "+\t\t\tint pos = this.endStatementPosition - 4;", "+\t\t\twhile (source[pos] == 'u') {", "+\t\t\t\tpos--;", "+\t\t\t}", "+\t\t\tif (source[pos] == '\\\\' &&", "+\t\t\t\t\t!((c1 = Character.getNumericValue(source[this.endStatementPosition - 3])) > 15", "+\t\t\t\t\t\t|| c1 < 0", "+\t\t\t\t\t\t|| (c2 = Character.getNumericValue(source[this.endStatementPosition - 2])) > 15", "+\t\t\t\t\t\t|| c2 < 0", "+\t\t\t\t\t\t|| (c3 = Character.getNumericValue(source[this.endStatementPosition - 1])) > 15", "+\t\t\t\t\t\t|| c3 < 0", "+\t\t\t\t\t\t|| (c4 = Character.getNumericValue(source[this.endStatementPosition])) > 15", "+\t\t\t\t\t\t|| c4 < 0) &&", "+\t\t\t\t\t((char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4)) == ';'){", "+\t\t\t\t// we have a Unicode for the ';' (/u003B)", "+\t\t\t\tpushOnAstStack(new EmptyStatement(pos, this.endStatementPosition));", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}", "+\t\tpushOnAstStack(new EmptyStatement(this.endStatementPosition, this.endStatementPosition));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3820c473c91b4785d80d32cf329ab98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java", "commitBeforeChange": "d7e050c27656f3c655cbceb92a53dfdd3a265d24", "commitAfterChange": "36dbe4a61ccd2e283322ec353cff1f83cf809e44", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public int getNextToken() throws InvalidInputException", "signatureAfterChange": " public int getNextToken() throws InvalidInputException", "diff": ["+\tint whiteStart = 0;", "-\t\t\tint whiteStart = currentPosition;", "+\t\t\twhiteStart = currentPosition;", "-\t\t\t\t\t\t\tint endPositionForLineComment = 0;", "-\t\t\t\t\t\t\t\tif (isUnicode) {", "-\t\t\t\t\t\t\t\t\tendPositionForLineComment = currentPosition - 6;", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tendPositionForLineComment = currentPosition - 1;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t * We need to completely consume the line break\r\t\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\t\tif (currentCharacter == '\\r'", "+\t\t\t\t\t\t\t\t   && source.length > currentPosition) {", "+\t\t\t\t\t\t\t\t   \tif (source[currentPosition] == '\\n') {", "+\t\t\t\t\t\t\t\t\t\tcurrentPosition++;", "+\t\t\t\t\t\t\t\t\t\tcurrentCharacter = '\\n';", "+\t\t\t\t\t\t\t\t   \t} else if (((currentCharacter = source[currentPosition]) == '\\\\')", "+\t\t\t\t\t\t\t\t\t\t&& (source[currentPosition + 1] == 'u')) {", "+\t\t\t\t\t\t\t\t\t\tisUnicode = true;\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t//-------------unicode traitement ------------", "+\t\t\t\t\t\t\t\t\t\tint c1 = 0, c2 = 0, c3 = 0, c4 = 0;", "+\t\t\t\t\t\t\t\t\t\tif ((c1 = Character.getNumericValue(source[currentPosition+2])) > 15", "+\t\t\t\t\t\t\t\t\t\t\t|| c1 < 0", "+\t\t\t\t\t\t\t\t\t\t\t|| (c2 = Character.getNumericValue(source[currentPosition+3])) > 15", "+\t\t\t\t\t\t\t\t\t\t\t|| c2 < 0", "+\t\t\t\t\t\t\t\t\t\t\t|| (c3 = Character.getNumericValue(source[currentPosition+4])) > 15", "+\t\t\t\t\t\t\t\t\t\t\t|| c3 < 0", "+\t\t\t\t\t\t\t\t\t\t\t|| (c4 = Character.getNumericValue(source[currentPosition+5])) > 15", "+\t\t\t\t\t\t\t\t\t\t\t|| c4 < 0) {", "+\t\t\t\t\t\t\t\t\t\t\tthrow new InvalidInputException(INVALID_UNICODE_ESCAPE);", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tcurrentCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (currentCharacter == '\\n') {", "+\t\t\t\t\t\t\t\t\t\t\tcurrentPosition+=6;", "+\t\t\t\t\t\t\t\t\t\t\tcurrentCharacter = '\\n';", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t   \t}", "-\t\t\t\t\t\t\t\t\tif (!isUnicode) {", "-\t\t\t\t\t\t\t\t\t\tcurrentPosition = endPositionForLineComment; // reset one character behind", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} catch (IndexOutOfBoundsException e) { //an eof will them be generated", "-\t\t\t\t\t\t\t\t\tif (tokenizeComments) {", "-\t\t\t\t\t\t\t\t\t\tcurrentPosition--; // reset one character behind", "-\t\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_LINE;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} catch (IndexOutOfBoundsException e) {", "+\t\t\t\t\t\t\t\t/* ", "+\t\t\t\t\t\t\t\t * a line comment needs to be followed by a line break to be valid\r\t\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\t\tthrow new InvalidInputException(UNTERMINATED_COMMENT);", "+\t\tif (tokenizeWhiteSpace && (whiteStart != currentPosition - 1)) {", "+\t\t\t// reposition scanner in case we are interested by spaces as tokens", "+\t\t\tcurrentPosition--;", "+\t\t\tstartPosition = whiteStart;", "+\t\t\treturn TokenNameWHITESPACE;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb006f49b2494bc20a71144a0765f1cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "d4b8f1437bd894de59822a00977399b8af50c7a1", "commitAfterChange": "00e190bf5f96c54b05d4853702eef90ea6dc4747", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void checkAnnotation()", "signatureAfterChange": " public void checkAnnotation()", "diff": ["-\t\t\t\tdeprecated = (comment[nextPos] == ' ') || (comment[nextPos] == '\\t') || (comment[nextPos] == '\\n') || (comment[nextPos] == '\\r') || (comment[nextPos] == '*');", "+\t\t\t\tchar nextCharacter = comment[nextPos];", "+\t\t\t\tif (nextCharacter == '\\\\') {", "+\t\t\t\t\tint c1, c2, c3, c4;", "+\t\t\t\t\tnextPos++;", "+\t\t\t\t\twhile (comment[nextPos] == 'u') nextPos++;", "+\t\t\t\t\tif (!(((c1 = Character.getNumericValue(comment[nextPos++])) > 15", "+\t\t\t\t\t\t|| c1 < 0)", "+\t\t\t\t\t\t|| ((c2 = Character.getNumericValue(comment[nextPos++])) > 15 || c2 < 0)", "+\t\t\t\t\t\t|| ((c3 = Character.getNumericValue(comment[nextPos++])) > 15 || c3 < 0)", "+\t\t\t\t\t\t|| ((c4 = Character.getNumericValue(comment[nextPos++])) > 15 || c4 < 0))) {", "+\t\t\t\t\t\t\tnextCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);", "+\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tdeprecated = Character.isWhitespace(nextCharacter) || nextCharacter == '*';"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc74c6fff42a1536b8d7496788f1b0a1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/StringLiteral.java", "commitBeforeChange": "44da6dbdddc84933c9778a1c775b25e500ccfc9b", "commitAfterChange": "c68d705c412170c5bfbef661e69c45f2613fe9ed", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \r \tpublic String getLiteralValue()", "signatureAfterChange": " \r \tpublic String getLiteralValue()", "diff": ["+\t\t\t\t\t\tcase 'u' :\r", "+\t\t\t\t\t\t\t//handle the case of unicode.\r", "+\t\t\t\t\t\t\tint currentPosition = i + 1;\r", "+\t\t\t\t\t\t\tint c1 = 0, c2 = 0, c3 = 0, c4 = 0;\r", "+\t\t\t\t\t\t\tif ((c1 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t\t\t|| c1 < 0\r", "+\t\t\t\t\t\t\t\t|| (c2 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t\t\t|| c2 < 0\r", "+\t\t\t\t\t\t\t\t|| (c3 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t\t\t|| c3 < 0\r", "+\t\t\t\t\t\t\t\t|| (c4 = Character.getNumericValue(s.charAt(currentPosition++))) > 15\r", "+\t\t\t\t\t\t\t\t|| c4 < 0){\r", "+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid string literal\");\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\tb.append((char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4));\r", "+\t\t\t\t\t\t\t\ti = currentPosition - 1;\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tbreak;\r"]}], "num": 2074}
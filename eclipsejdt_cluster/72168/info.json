{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1472bf8e1725843c6cf20b438ede47b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4fad0a1847370b0a0e35691297a69e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "6d8036f4b0f90ef715394ba92952a819714c2135", "commitAfterChange": "02733ea32199eef92e7e8bc7be9f2db172e7eedd", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " protected void process(PotentialMatch potentialMatch, boolean bindingsWereCreated) throws CoreException", "signatureAfterChange": " protected void process(PossibleMatch possibleMatch, boolean bindingsWereCreated) throws CoreException", "diff": ["-protected void process(PotentialMatch potentialMatch, boolean bindingsWereCreated) throws CoreException {", "-\tthis.currentPotentialMatch = potentialMatch;", "-\tCompilationUnitDeclaration unit = potentialMatch.parsedUnit;", "+protected void process(PossibleMatch possibleMatch, boolean bindingsWereCreated) throws CoreException {", "+\tthis.currentPossibleMatch = possibleMatch;", "+\tCompilationUnitDeclaration unit = possibleMatch.parsedUnit;", "-\t\t\tif (this.currentPotentialMatch.openable instanceof ClassFile) {", "-\t\t\t\tClassFile classFile = (ClassFile) this.currentPotentialMatch.openable;", "-\t\t\t\tIBinaryType info = this.getBinaryInfo(classFile, this.currentPotentialMatch.resource);", "+\t\t\tif (this.currentPossibleMatch.openable instanceof ClassFile) {", "+\t\t\t\tClassFile classFile = (ClassFile) this.currentPossibleMatch.openable;", "+\t\t\t\tIBinaryType info = this.getBinaryInfo(classFile, this.currentPossibleMatch.resource);", "-\t\tmatchingNodeSet = this.currentPotentialMatch.matchingNodeSet;", "+\t\tmatchingNodeSet = this.currentPossibleMatch.matchingNodeSet;", "-\t\t\t\tSystem.out.println(\"Resolving \" + this.currentPotentialMatch.openable.toStringWithAncestors()); //$NON-NLS-1$", "+\t\t\t\tSystem.out.println(\"Resolving \" + this.currentPossibleMatch.openable.toStringWithAncestors()); //$NON-NLS-1$", "-\t\tthis.currentPotentialMatch = null;", "+\t\tthis.currentPossibleMatch = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a565775d0f958a4b2a1243ca61960076", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "6d8036f4b0f90ef715394ba92952a819714c2135", "commitAfterChange": "02733ea32199eef92e7e8bc7be9f2db172e7eedd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void buildBindings(PotentialMatch potentialMatch)", "signatureAfterChange": " protected void buildBindings(PossibleMatch possibleMatch)", "diff": ["-protected void buildBindings(PotentialMatch potentialMatch) {", "+protected void buildBindings(PossibleMatch possibleMatch) {", "-\t\t\tSystem.out.println(\"Parsing \" + potentialMatch.openable.toStringWithAncestors()); //$NON-NLS-1$", "+\t\t\tSystem.out.println(\"Parsing \" + possibleMatch.openable.toStringWithAncestors()); //$NON-NLS-1$", "-\t\tthis.parser.setMatchSet(potentialMatch.matchingNodeSet);", "-\t\tCompilationResult unitResult = new CompilationResult(potentialMatch, 1, 1, this.options.maxProblemsPerUnit);", "-\t\tCompilationUnitDeclaration parsedUnit = this.parser.dietParse(potentialMatch, unitResult);", "+\t\tthis.parser.setMatchSet(possibleMatch.matchingNodeSet);", "+\t\tCompilationResult unitResult = new CompilationResult(possibleMatch, 1, 1, this.options.maxProblemsPerUnit);", "+\t\tCompilationUnitDeclaration parsedUnit = this.parser.dietParse(possibleMatch, unitResult);", "-\t\t\t// add the potentialMatch with its parsedUnit to matchesToProcess", "-\t\t\tpotentialMatch.parsedUnit = parsedUnit;", "+\t\t\t// add the possibleMatch with its parsedUnit to matchesToProcess", "+\t\t\tpossibleMatch.parsedUnit = parsedUnit;", "-\t\t\t\tSystem.arraycopy(this.matchesToProcess, 0, this.matchesToProcess = new PotentialMatch[size == 0 ? 1 : size * 2], 0, this.numberOfMatches);", "-\t\t\tthis.matchesToProcess[this.numberOfMatches++] = potentialMatch;", "+\t\t\t\tSystem.arraycopy(this.matchesToProcess, 0, this.matchesToProcess = new PossibleMatch[size == 0 ? 1 : size * 2], 0, this.numberOfMatches);", "+\t\t\tthis.matchesToProcess[this.numberOfMatches++] = possibleMatch;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1f860d9069ce41e69efd93777479172", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "6d8036f4b0f90ef715394ba92952a819714c2135", "commitAfterChange": "02733ea32199eef92e7e8bc7be9f2db172e7eedd", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " protected void locateMatches(JavaProject javaProject, PotentialMatch[] potentialMatches, int start, int length) throws JavaModelException", "signatureAfterChange": " protected void locateMatches(JavaProject javaProject, PossibleMatch[] possibleMatches, int start, int length) throws JavaModelException", "diff": ["-protected void locateMatches(JavaProject javaProject, PotentialMatch[] potentialMatches, int start, int length) throws JavaModelException {", "+protected void locateMatches(JavaProject javaProject, PossibleMatch[] possibleMatches, int start, int length) throws JavaModelException {", "-\t\t\t\tbuildBindings(potentialMatches[i]);", "+\t\t\t\tbuildBindings(possibleMatches[i]);", "-\t\t\t} else if (!createHierarchyResolver(focusType, potentialMatches)) {", "+\t\t\t} else if (!createHierarchyResolver(focusType, possibleMatches)) {", "-\t\t// potential match resolution", "+\t\t// possible match resolution", "-\t\t\tPotentialMatch potentialMatch = this.matchesToProcess[i];", "-\t\t\tthis.matchesToProcess[i] = null; // release reference to processed potential match", "+\t\t\tPossibleMatch possibleMatch = this.matchesToProcess[i];", "+\t\t\tthis.matchesToProcess[i] = null; // release reference to processed possible match", "-\t\t\t\tprocess(potentialMatch, bindingsWereCreated);", "+\t\t\t\tprocess(possibleMatch, bindingsWereCreated);", "-\t\t\t\t\t\t\tnew String(potentialMatch.parsedUnit.getFileName())}));", "+\t\t\t\t\t\t\tnew String(possibleMatch.parsedUnit.getFileName())}));", "-\t\t\t\tpotentialMatch.parsedUnit.cleanUp();", "-\t\t\t\tpotentialMatch.parsedUnit = null;", "+\t\t\t\tpossibleMatch.parsedUnit.cleanUp();", "+\t\t\t\tpossibleMatch.parsedUnit = null;"]}], "num": 72168}
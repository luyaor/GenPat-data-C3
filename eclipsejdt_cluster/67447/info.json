{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d6ac3071dbcf105ff26f46accb0034ae", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "568a1fee62f987e7e5fa8393218a1d40", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 46, "signatureBeforeChange": "  \tprivate void setTokenWrapPolicy(int index, WrapPolicy policy, boolean wrapPreceedingComments)", "signatureAfterChange": "  \tprivate void setTokenWrapPolicy(int index, WrapPolicy policy, boolean wrapPreceedingComments)", "diff": ["-\t\tif (this.options.join_wrapped_lines", "-\t\t\t\t&& (token.tokenType == TokenNameCOMMENT_BLOCK || token.tokenType == TokenNameCOMMENT_JAVADOC)) {", "+", "+\t\tif (this.options.join_wrapped_lines && token.tokenType == TokenNameCOMMENT_BLOCK) {", "-\t\t}", "-", "-\t\t// extend this policy to a token that is in the next line because of comments", "-\t\tfor (int i = index + 1; i < this.tm.size(); i++) {", "-\t\t\tToken next = this.tm.get(i);", "-\t\t\tWrapPolicy policy2 = next.getWrapPolicy();", "-\t\t\tif (policy2 != null && policy2.isForced && policy2.extraIndent == 0) {", "-\t\t\t\tnext.setWrapPolicy(policy);", "-\t\t\t} else if (next.tokenType != TokenNameCOMMENT_LINE && next.tokenType != TokenNameCOMMENT_BLOCK) {", "-\t\t\t\tbreak;", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7114b1bbfe12d45fee62025f8a986f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "f174c5e3ec66ea2a46810b190cc3e9d57c0432d4", "commitAfterChange": "8bbacffbe712e7ac5a5d22a44809b44ff8a5e616", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " \tpublic void setOptions(Map newOptions)", "signatureAfterChange": " \tpublic void setOptions(Map newOptions)", "diff": ["-\t\t// Backward compatibility", "+\t\t/* Test OPTION_DocCommentSupport", "-\t\t\t// bug 45112", "-\t\t\tif (CompilerOptions.OPTION_ReportInvalidAnnotation.equals(propertyName)) {", "-\t\t\t\tpreferences.setToDefault(JavaCore.OLD_COMPILER_PB_INVALID_ANNOTATION);", "+\t\t\t// set same value than missing javadoc comments overriding", "+\t\t\tif (CompilerOptions.OPTION_ReportMissingJavadocCommentsOverriding.equals(propertyName)) {", "+\t\t\t\tpreferences.setValue(JavaCore.COMPILER_DOC_COMMENT_SUPPORT, preferences.getString(propertyName));", "-\t\t\telse if (CompilerOptions.OPTION_ReportMissingAnnotation.equals(propertyName)) {", "-\t\t\t\tpreferences.setToDefault(JavaCore.OLD_COMPILER_PB_MISSING_ANNOTATION);", "-\t\t\t}", "-\t\t\t// end bug 45112", "-\t\t\t// bug 46854", "-\t\t\telse if (CompilerOptions.OPTION_ReportMissingJavadoc.equals(propertyName)) {", "-\t\t\t\tpreferences.setToDefault(JavaCore.OLD_COMPILER_PB_MISSING_JAVADOC);", "-\t\t\t}", "-\t\t\t// end bug 46854", "+\t\t*/"]}], "num": 67447}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "508eb8dbb8d74055c886d4c5f7a5176f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "832baf14d4d41e3c99734245ac7ba7ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "a2999324910e04c9c4d68f1aa93d5053c047f21c", "commitAfterChange": "a3d873b0829375e0f0465ac99af6f9753248e839", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  private static int encodeTypeSignature(char[] typeName, int start, boolean isResolved, int length, StringBuffer buffer)", "signatureAfterChange": "  private static int encodeTypeSignature(char[] typeName, int start, boolean isResolved, int length, StringBuffer buffer)", "diff": ["-\t\tcase 'c':", "-\t\t    checkPos = checkName(CHAR, typeName, pos, length);", "-\t\t    if (checkPos > 0) {", "-\t\t        pos = encodeArrayDimension(typeName, checkPos, length, buffer);", "-\t\t\t    buffer.append(C_CHAR);", "-\t\t\t    return pos;", "-\t\t\t} ", "-\t\t    break;", "+\t\tcase 'c':", "+\t\t    checkPos = checkName(CHAR, typeName, pos, length);", "+\t\t    if (checkPos > 0) {", "+\t\t        pos = encodeArrayDimension(typeName, checkPos, length, buffer);", "+\t\t\t    buffer.append(C_CHAR);", "+\t\t\t    return pos;", "+\t\t\t} else {", "+\t\t\t\tcheckPos = checkName(CAPTURE, typeName, pos, length);", "+\t\t\t\tif (checkPos > 0) {", "+\t\t\t\t\tpos = consumeWhitespace(typeName, checkPos, length);", "+\t\t\t\t\tif (typeName[pos] != '?') {", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbuffer.append(C_CAPTURE);", "+\t\t\t// fall-thru for wildcard part of capture typecheckPos"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc2cab4a4d30dfd84fc3afafa1f3e593", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java", "commitBeforeChange": "b5b90ec2f42e0eb7ce3ad684f46b8d872887e632", "commitAfterChange": "9144806e49f76b29608474c4bebb2700b5c20faa", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate ClassLoader _createClassLoader( Map<FactoryContainer, FactoryPath.Attributes> containers )", "signatureAfterChange": " \tprivate ClassLoader _createIterativeClassLoader( Map<FactoryContainer, FactoryPath.Attributes> containers )", "diff": ["-\tprivate ClassLoader _createClassLoader( Map<FactoryContainer, FactoryPath.Attributes> containers )", "+\tprivate ClassLoader _createIterativeClassLoader( Map<FactoryContainer, FactoryPath.Attributes> containers )", "-\t\tfor ( FactoryContainer fc : containers.keySet() ) ", "-\t\t{", "-\t\t\tif ( fc instanceof JarFactoryContainer  )", "-\t\t\t{", "-\t\t\t\tJarFactoryContainer jfc = (JarFactoryContainer) fc;", "+\t\tfor (Map.Entry<FactoryContainer, FactoryPath.Attributes> entry : containers.entrySet()) {", "+\t\t\tFactoryPath.Attributes attr = entry.getValue();", "+\t\t\tFactoryContainer fc = entry.getKey();", "+\t\t\tif (!attr.runInBatchMode() && fc instanceof JarFactoryContainer) {", "+\t\t\t\t\tJarFactoryContainer jfc = (JarFactoryContainer)fc;", "-\t\t\t\t\tAptPlugin.log(mue, \"Could not create ClassLoader for \" + jfc); //$NON-NLS-1$", "+\t\t\t\t\tAptPlugin.log(mue, \"Could not create ClassLoader for \" + fc); //$NON-NLS-1$", "-\t\tClassLoader cl = null;", "-\t\tif ( urlList.size() > 0 )", "-\t\t{", "+\t\tClassLoader cl;", "+\t\tif ( urlList.size() > 0 ) {", "+\t\telse {", "+\t\t\tcl = AnnotationProcessorFactoryLoader.class.getClassLoader();", "+\t\t}"]}], "num": 45066}
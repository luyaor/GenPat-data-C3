{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37973202ea70de97b50ed4d866272b35", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a7119d838eb5b081f7fd6676aa29bdb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "f40614490d4262be4e6b1da2d796674adcae4653", "commitAfterChange": "2c45e11a23da631b4ad990ef31056ea845ca3f46", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void checkExternalArchiveChanges(IJavaElement[] elementsScope, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " \tpublic void checkExternalArchiveChanges(IJavaElement[] elementsScope, IProgressMonitor monitor) throws JavaModelException", "diff": ["+\t\t\tboolean hasExternalWorkingCopyProject = false;", "+\t\t\t\tIJavaElement element = elementsScope[i];", "+\t\t\t\tif (element.getElementType() == IJavaElement.JAVA_MODEL) {", "+\t\t\t\t\t// ensure external working copies' projects' caches are reset", "+\t\t\t\t\tHashSet projects = JavaModelManager.getJavaModelManager().getExternalWorkingCopyProjects();", "+\t\t\t\t\tif (projects != null) {", "+\t\t\t\t\t\thasExternalWorkingCopyProject = true;", "+\t\t\t\t\t\tIterator iterator = projects.iterator();", "+\t\t\t\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\t\t\t\tJavaProject project = (JavaProject) iterator.next();", "+\t\t\t\t\t\t\tproject.resetCaches();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (hasExternalWorkingCopyProject) {", "+\t\t\t\t// flush jar type cache", "+\t\t\t\tJavaModelManager.getJavaModelManager().resetJarTypeCache();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83c6bbc2e4896d42bdc9e2bc2058a622", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "924cc126306c5e17d04c27b98ac7b3a97f8a8d3f", "commitAfterChange": "0b27b465378d2c4de912ede755b716ec1bc3271b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic static IJavaElement create(IFolder folder, IJavaProject project)", "signatureAfterChange": " \tpublic static IJavaElement create(IFolder folder, IJavaProject project)", "diff": ["+\t\tIJavaElement element;", "+\t\t\telement = determineIfOnClasspath(folder, project);", "+\t\t\tif (element == null) {", "+\t\t\t\t// walk all projects and find one that have the given folder on its classpath", "+\t\t\t\tIJavaProject[] projects;", "+\t\t\t\ttry {", "+\t\t\t\t\tprojects = JavaModelManager.getJavaModelManager().getJavaModel().getJavaProjects();", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "+\t\t\t\t\tproject = projects[i];", "+\t\t\t\t\telement = determineIfOnClasspath(folder, project);", "+\t\t\t\t\tif (element != null)", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\telement = determineIfOnClasspath(folder, project);", "-\t\tIJavaElement element = determineIfOnClasspath(folder, project);", "+\t\t"]}], "num": 33640}
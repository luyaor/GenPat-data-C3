{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51664baf3918273e0458d1b6c8a5c202", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88d5180a678adf451817467fe2b9af95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "3e0b35975d99c7fbc1802301d4e573e4cebc360d", "commitAfterChange": "19cb53354023f68ae04bcccb8466b1b3cfbaac2b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate static void checkAlternateBinding(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] originalArgumentTypes, TypeBinding[] alternateArgumentTypes, final InvocationSite invocationSite)", "signatureAfterChange": "  \tprivate static void checkAlternateBinding(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] originalArgumentTypes, TypeBinding[] alternateArgumentTypes, final InvocationSite invocationSite)", "diff": ["-\t\t\t\t\t\tint varargIndex = paramLength - 1;", "-\t\t\t\t\t\tArrayBinding varargType = (ArrayBinding) binding.parameters[varargIndex];", "-\t\t\t\t\t\tTypeBinding lastArgType = alternateArgumentTypes[varargIndex];", "-\t\t\t\t\t\tif (varargType.dimensions == lastArgType.dimensions() && varargType.leafComponentType != lastArgType.leafComponentType())", "-\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\tint varargsIndex = paramLength - 1;", "+\t\t\t\t\t\tArrayBinding varargsType = (ArrayBinding) binding.parameters[varargsIndex];", "+\t\t\t\t\t\tTypeBinding lastArgType = alternateArgumentTypes[varargsIndex];", "+\t\t\t\t\t\t// originalType may be compatible already, but cast mandated to clarify between varargs/non-varargs call", "+\t\t\t\t\t\tif (!lastArgType.isCompatibleWith(varargsType.elementsType()))", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0014947a6e4edafc2ab72a9e54a6b6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "3e0b35975d99c7fbc1802301d4e573e4cebc360d", "commitAfterChange": "19cb53354023f68ae04bcccb8466b1b3cfbaac2b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkInvocationArguments(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding method, Expression[] arguments, TypeBinding[] argumentTypes, boolean argsContainCast, InvocationSite invocationSite)", "diff": ["-\t\t\t\t\tint varargIndex = paramLength - 1;", "-\t\t\t\t\tArrayBinding varargType = (ArrayBinding) params[varargIndex];", "-\t\t\t\t\tTypeBinding lastArgType = argumentTypes[varargIndex];", "+\t\t\t\t\tint varargsIndex = paramLength - 1;", "+\t\t\t\t\tArrayBinding varargsType = (ArrayBinding) params[varargsIndex];", "+\t\t\t\t\tTypeBinding lastArgType = argumentTypes[varargsIndex];", "+\t\t\t\t\tint dimensions;", "-\t\t\t\t\t\tif (!(varargType.leafComponentType().isBaseType() && varargType.dimensions() == 1))", "+\t\t\t\t\t\tif (!(varargsType.leafComponentType().isBaseType() && varargsType.dimensions() == 1))", "-\t\t\t\t\t} else if (varargType.dimensions <= lastArgType.dimensions()) {", "-\t\t\t\t\t\tint dimensions = lastArgType.dimensions();", "-\t\t\t\t\t\tif (lastArgType.leafComponentType().isBaseType())", "+\t\t\t\t\t} else if (varargsType.dimensions <= (dimensions = lastArgType.dimensions())) {", "+\t\t\t\t\t\tif (lastArgType.leafComponentType().isBaseType()) {", "-\t\t\t\t\t\tif (varargType.dimensions < dimensions)", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (varargsType.dimensions < dimensions) {", "-\t\t\t\t\t\telse if (varargType.dimensions == dimensions && varargType.leafComponentType != lastArgType.leafComponentType())", "+\t\t\t\t\t\t} else if (varargsType.dimensions == dimensions ", "+\t\t\t\t\t\t\t\t\t\t&& varargsType.leafComponentType != lastArgType.leafComponentType()", "+\t\t\t\t\t\t\t\t\t\t&& lastArgType.isCompatibleWith(varargsType)) {", "+\t\t\t\t\t\t}"]}], "num": 15626}
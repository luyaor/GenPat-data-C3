{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5942c9cc70fbb467a0418a5b195afce", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a45e3e6bc730c68f51a675144e065be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void test009() throws Exception", "signatureAfterChange": " \tprotected Map getCompilerOptions()", "diff": ["-\t// throws", "-\tpublic void test009() throws Exception {", "+\t// Enables the tests to run individually", "+\tprotected Map getCompilerOptions() {", "+\t\tMap defaultOptions = super.getCompilerOptions();", "+\t\tdefaultOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_8);", "+\t\tdefaultOptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_8);", "+\t\tdefaultOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_8);", "+\t\treturn defaultOptions;", "+\t}", "-\t\t\t\t\"E.java\",", "-\t\t\t\t\"class E extends RuntimeException {\\n\" +", "-\t\t\t\t\"\tprivate static final long serialVersionUID = 1L;\\n\" +", "-\t\t\t\t\"E1.java\",", "-\t\t\t\t\"class E1 extends RuntimeException {\\n\" +", "-\t\t\t\t\"\tprivate static final long serialVersionUID = 1L;\\n\" +", "-\t\t\t\t\"E2.java\",", "-\t\t\t\t\"class E2 extends RuntimeException {\\n\" +", "-\t\t\t\t\"\tprivate static final long serialVersionUID = 1L;\\n\" +", "-\t\t\t\t\"\tvoid foo() throws @A(\\\"Hello, World!\\\") E, E1, @B @C('(') E2 {}\\n\" +", "-\t\t\t\"      #25 @A(\\n\" + ", "-\t\t\t\"        #26 value=\\\"Hello, World!\\\" (constant type)\\n\" + ", "-\t\t\t\"        target type = 0x16 THROWS\\n\" + ", "-\t\t\t\"        throws index = 0\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"      #28 @C(\\n\" + ", "-\t\t\t\"        #26 value=\\'(\\' (constant type)\\n\" + ", "-\t\t\t\"        target type = 0x16 THROWS\\n\" + ", "-\t\t\t\"        throws index = 2\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"    RuntimeInvisibleTypeAnnotations: \\n\" + ", "-\t\t\t\"      #23 @B(\\n\" + ", "-\t\t\t\"        target type = 0x16 THROWS\\n\" + ", "-\t\t\t\"        throws index = 2\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fee26bf9d2f4c0339eeb4ac03612e379", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "9f0a7de232b0429aaff702bf9a19a07638ecc8fd", "commitAfterChange": "7d8affce339a3277ba7bbb97e6b1e8cd9e2dfecb", "methodNumberBeforeChange": 419, "methodNumberAfterChange": 419, "signatureBeforeChange": " public void testBug167190() throws CoreException, JavaModelException", "signatureAfterChange": " public void testBug167190() throws CoreException, JavaModelException", "diff": ["-\tTypeNameMatchCollector requestor = new TypeNameMatchCollector();", "+\t// Search all type names with TypeNameMatchRequestor", "+\tTypeNameMatchCollector collector = new TypeNameMatchCollector() {", "+\t\tpublic String toString(){", "+\t\t\treturn toFullyQualifiedNamesString();", "+\t\t}", "+\t};", "+\tnew SearchEngine().searchAllTypeNames(", "+\t\tnull,", "+\t\tSearchPattern.R_EXACT_MATCH,", "+\t\t\"C\".toCharArray(), // need a prefix which returns most of different types (class file, CU, member,...)", "+\t\tSearchPattern.R_PREFIX_MATCH,", "+\t\tIJavaSearchConstants.TYPE,", "+\t\tscope,", "+\t\tcollector,", "+\t\tIJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH,", "+\t\tnull);", "+\t// Search all type names with old API", "+\tTypeNameRequestor requestor =  new SearchTests.SearchTypeNameRequestor();", "-\tassertSearchResults(", "-\t\t\"C (not open) [in C.class [in test [in lib/b124469.jar [in JavaSearchBugs]]]]\\n\" + ", "-\t\t\"C (not open) [in C.java [in b137984 [in src [in JavaSearchBugs]]]]\\n\" + ", "-\t\t\"C (not open) [in C.java [in b137984 [in src [in JavaSearchBugs]]]]\\n\" + ", "-\t\t\"C (not open) [in C.java [in b163984 [in src [in JavaSearchBugs]]]]\\n\" + ", "-\t\t\"C2 (not open) [in C [in C.java [in b137984 [in src [in JavaSearchBugs]]]]]\\n\" + ", "-\t\t\"C86293 (not open) [in C86293.class [in <default> [in lib/b86293.jar [in JavaSearchBugs]]]]\\n\" + ", "-\t\t\"CJ (not open) [in CJ.class [in <default> [in lib/b137984.jar [in JavaSearchBugs]]]]\\n\" + ", "-\t\t\"CJ2 (not open) [in CJ$CJ2.class [in <default> [in lib/b137984.jar [in JavaSearchBugs]]]]\\n\" + ", "-\t\t\"CJ3 (not open) [in CJ$CJ2$CJ3.class [in <default> [in lib/b137984.jar [in JavaSearchBugs]]]]\\n\" + ", "-\t\t\"C_124645 (not open) [in T_124645.java [in b124645 [in src [in JavaSearchBugs]]]]\\n\" + ", "-\t\t\"CharSequence (not open) [in CharSequence.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \"]]]\\n\" + ", "-\t\t\"Class (not open) [in Class.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \"]]]\\n\" + ", "-\t\t\"CloneNotSupportedException (not open) [in CloneNotSupportedException.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \"]]]\\n\" + ", "-\t\t\"Collection (not open) [in Collection.class [in b87627 [in lib/b87627.jar [in JavaSearchBugs]]]]\\n\" + ", "-\t\t\"Comparable (not open) [in Comparable.class [in java.lang [in \"+ getExternalJCLPathString(\"1.5\") + \"]]]\\n\" + ", "-\t\t\"Test (not open) [in Test.java [in b95794 [in src [in JavaSearchBugs]]]]\",", "-\t\trequestor", "-\t);", "+\t// Should have same types with these 2 searches", "+\tassertEquals(\"Found types sounds not to be correct\", requestor.toString(), collector.toString());"]}], "num": 37178}
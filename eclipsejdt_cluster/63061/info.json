{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d2c704f0ab2d4982b84e8f2d9b27e8b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15652fd919a4d90954acf399da8dbf95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java", "commitBeforeChange": "95689cd650fbee38a6d4ec8d5c7579614ce1a585", "commitAfterChange": "bad21fbcc8ad1fb79bdf51ed9f1a906683f3a877", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r protected void scrubOutputFolder() throws CoreException", "signatureAfterChange": "\r \r protected void scrubOutputFolder() throws CoreException", "diff": ["-\t\t\tmembers[i].delete(true, null);\r", "+\t\t\tmembers[i].delete(IResource.FORCE, null);\r", "-\t\t\t\t\t\t\tresource.delete(true, null);\r", "+\t\t\t\t\t\t\tresource.delete(IResource.FORCE, null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5136c1b2c30ab5fed2fbac673de2d214", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "7f9e7745cf3f1c024406269afc8bec9564b2443c", "commitAfterChange": "f71ae6e6dfede90c4056a2e033197a9212bd23a2", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tprivate void findFieldsAndMethods( \t\tchar[] token, \t\tTypeBinding receiverType, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "signatureAfterChange": "  \tprivate void findFieldsAndMethods( \t\tchar[] token, \t\tTypeBinding receiverType, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "diff": ["-\t\t\t\trelevance += computeRelevanceForRestrictions(false); // no access restriction for length field", "+\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for length field", "-\t\t\t\trelevance += computeRelevanceForRestrictions(false); // no access restriction for clone() method", "+\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for clone() method"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "577cc025e83d089ce65e90bbfcdce0bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java", "commitBeforeChange": "30d1d48bfa7e296fbeab8a3626c28e1130f44500", "commitAfterChange": "8f838ccefdcacadaac662cb88a80fdb1a3657843", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": " \tvoid checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\t\tboolean hasNonNullDefault, boolean shouldComplain, \t\t\tMethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["-\t\t\t\t\tif (NullAnnotationMatching.analyse(inheritedMethod.returnType, currentMethod.returnType, substituteReturnType, 0, true).isAnyMismatch()) {", "+\t\t\t\t\tif (NullAnnotationMatching.analyse(inheritedMethod.returnType, currentMethod.returnType, substituteReturnType, 0, CheckMode.OVERRIDE).isAnyMismatch()) {", "-\t\t\t\t\tif (NullAnnotationMatching.analyse(currentMethod.parameters[i], inheritedMethod.parameters[i], substituteParameter, 0, true).isAnyMismatch()) {", "+\t\t\t\t\tif (NullAnnotationMatching.analyse(currentMethod.parameters[i], inheritedMethod.parameters[i], substituteParameter, 0, CheckMode.OVERRIDE).isAnyMismatch()) {"]}], "num": 63061}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "16ccdbd4fb3e107af180e5d36d18ba8d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bf51a38f41a1a6cacb17c22e2ad21cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "09f42f58bcdf2fa84ccd2b8b65f28ab3036222ca", "commitAfterChange": "57e8dd41219d846363c918d62edb5007994c5c79", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic LambdaExpression getResolvedCopyForInferenceTargeting(TypeBinding targetType)", "signatureAfterChange": " \tpublic LambdaExpression getResolvedCopyForInferenceTargeting(TypeBinding targetType)", "diff": ["-\t\t\t\tif (this.returnsVoid) {", "+\t\t\t\tif (copy.returnsVoid) {", "-\t\t\tif (type == null || !type.isValidBinding() || this.hasIgnoredMandatoryErrors || enclosingScopesHaveErrors()) {", "-\t\t\t\treturn null;", "+\t\t\tif (type != null && type.isValidBinding() && !this.hasIgnoredMandatoryErrors && !enclosingScopesHaveErrors()) {", "+\t\t\t\t// value compatibility of block lambda's is the only open question.", "+\t\t\t\tif (!copy.shapeAnalysisComplete)", "+\t\t\t\t\tcopy.valueCompatible = copy.doesNotCompleteNormally();", "+\t\t\t} else {", "+\t\t\t\tif (!copy.returnsVoid)", "+\t\t\t\t\tcopy.valueCompatible = true; // optimistically, TODO: is this OK??", "-\t\t\t", "-\t\t\t// value compatibility of block lambda's is the only open question.", "-\t\t\tif (!copy.shapeAnalysisComplete)", "-\t\t\t\tcopy.valueCompatible = copy.doesNotCompleteNormally();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a64d70ff360dba47d2abfd8691cf5c79", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "8c12a1560b5b16e626f09d83b170c60e0f7d623a", "commitAfterChange": "12ce4293ede90551ea298fc4647747d8e255b48f", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tpublic boolean isInsideDeprecatedCode()", "signatureAfterChange": "  \tpublic boolean isInsideDeprecatedCode()", "diff": ["-\t\t\t\t\tif (context != null && context.isViewedAsDeprecated()) {", "+\t\t\t\t\tif (context != null && context.isViewedAsDeprecated())", "-\t\t\t\t\t}", "-\t\t\t\t\tif (methodScope.initializedField != null && methodScope.initializedField.isViewedAsDeprecated()) {", "+\t\t\t\t\tif (methodScope.initializedField != null && methodScope.initializedField.isViewedAsDeprecated())", "-\t\t\t\t\t}", "-\t\t\t\t\tif (type != null && type.isViewedAsDeprecated()) {", "+\t\t\t\t\tif (type != null && type.isViewedAsDeprecated())", "-\t\t\t\t\t}", "-\t\t\t\tif (context != null && context.isViewedAsDeprecated()) {", "+\t\t\t\tif (context != null && context.isViewedAsDeprecated())", "-\t\t\t\t}"]}], "num": 60073}
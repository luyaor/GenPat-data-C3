{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d3c39d9f37fbc94cc9c86320f1810789", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e5b5899e3eb4140a59dc8637ca2ad8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java", "commitBeforeChange": "73197a47274e75e8fe1581fdac3a086fb2ddf471", "commitAfterChange": "340440fc2f9b9eb03b89c385f562976def2c6c0e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate void resolveAnnotations( \t\t\tBlockScope scope, \t\t\tAnnotation[] annotations, \t\t\tBinding currentBinding)", "signatureAfterChange": "  \tprivate void resolveAnnotations(BlockScope scope, Annotation[] annotations, Binding currentBinding)", "diff": ["-\tprivate void resolveAnnotations(", "-\t\t\tBlockScope scope,", "-\t\t\tAnnotation[] annotations,", "-\t\t\tBinding currentBinding) {", "-\t\tASTNode.resolveAnnotations(scope, annotations, currentBinding, true);", "-\t\tElement element = null;", "+\tprivate void resolveAnnotations(BlockScope scope, Annotation[] annotations, Binding currentBinding) {", "-\t\tfor (Annotation annotation : annotations) {", "-\t\t\tAnnotationBinding binding = annotation.getCompilerAnnotation();", "-\t\t\tif (binding != null) { // binding should be resolved, but in case it's not, ignore it", "+\t\tint length = annotations == null ? 0 : annotations.length;", "+\t\tif (length == 0)", "+\t\t\treturn;", "+\t\t", "+\t\tASTNode.resolveAnnotations(scope, annotations, currentBinding, true);", "+\t\tElementImpl element = (ElementImpl) _factory.newElement(currentBinding);", "+\t\tAnnotationBinding [] annotationBindings = element.getPackedAnnotationBindings(); // discovery is never in terms of repeating annotation.", "+\t\tfor (AnnotationBinding binding : annotationBindings) {", "+\t\t\tif (binding != null) { // binding should be resolved, but in case it's not, ignore it: it could have been wrapped into a container.", "-\t\t\t\tif (element == null) {", "-\t\t\t\t\telement = _factory.newElement(currentBinding);", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "744bbfd1bb4b5110dfa5fcd32016349b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "445862b3ac94af052eb272bc07b8bce2907ade1f", "commitAfterChange": "3695268f3d47cb88012e58d6baed589f7f62bb31", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 186, "signatureBeforeChange": " \tpublic void test0172() throws JavaModelException", "signatureAfterChange": " \tpublic void test0172() throws JavaModelException", "diff": ["-\t\t\t\"    num().add(null);\\n\" + ", "-\t\t\t\"    num().add(n);\\n\" + ", "+\t\t\t\"    /*start1*/num().add(null)/*end1*/;\\n\" + ", "+\t\t\t\"    /*start2*/num().add(n)/*end2*/;\\n\" + ", "-\t   \tCompilationUnit compilationUnit = (CompilationUnit) buildAST(", "-\t\t\tcontents,", "-    \t\tthis.workingCopy);", "-\t   \tMarkerInfo info = new MarkerInfo(contents);", "-\t   \tinfo.astStart = contents.indexOf(\"num().add(null);\");", "-\t   \tinfo.astEnd = info.astStart + \"num().add(null)\".length();", "-\t   \tMethodInvocation invocation = (MethodInvocation) findNode(compilationUnit, info);", "-\t   \tIMethodBinding binding1 = invocation.resolveMethodBinding();", "-\t   \tinfo = new MarkerInfo(contents);", "-\t   \tinfo.astStart = contents.indexOf(\"num().add(n);\");", "-\t   \tinfo.astEnd = info.astStart + \"num().add(n)\".length();", "-\t   \tinvocation = (MethodInvocation) findNode(compilationUnit, info);", "-\t   \tIMethodBinding binding2 = invocation.resolveMethodBinding();", "-\t   \tassertTrue(\"2 different capture bindings should not be equals\", !binding1.isEqualTo(binding2));", "+\t   \tIBinding[] bindings = resolveBindings(contents, this.workingCopy);", "+\t   \tassertTrue(\"2 different capture bindings should not be equals\", !bindings[0].isEqualTo(bindings[1]));"]}], "num": 8212}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e8b380f1600202d6dd595277d00860b4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b17aa0bf8067ca24913d3d0890cbf58", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "8488c9a3ce62554aeaf73d8b90501fcd01dc2b10", "commitAfterChange": "c559b74f9272fa02909675d464836a672389a516", "methodNumberBeforeChange": 138, "methodNumberAfterChange": 138, "signatureBeforeChange": " protected void consumeEnumConstantNoClassBody()", "signatureAfterChange": " protected void consumeEnumConstantNoClassBody()", "diff": ["-\t// nothing to do", "-\t((FieldDeclaration) this.astStack[this.astPtr]).declarationSourceEnd = flushCommentsDefinedPriorTo(this.endStatementPosition);", "+\t// set declarationEnd and declarationSourceEnd", "+\tfinal FieldDeclaration fieldDeclaration = (FieldDeclaration) this.astStack[this.astPtr];", "+\tint declarationEnd = fieldDeclaration.sourceEnd;", "+\tif (declarationEnd > rParenPos) {", "+\t\tfieldDeclaration.declarationEnd = declarationEnd;", "+\t\tfieldDeclaration.declarationSourceEnd = flushCommentsDefinedPriorTo(declarationEnd);", "+\t} else {", "+\t\tfieldDeclaration.declarationEnd = rParenPos;", "+\t\tfieldDeclaration.declarationSourceEnd = flushCommentsDefinedPriorTo(rParenPos);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd4f455786fc633b8585962c6e3ee4a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java", "commitBeforeChange": "f8eb13111e85058d6a3b96c5e3a0a3762548a3d5", "commitAfterChange": "3a282cd8b7c83e96465ddc9983742da9604c6a89", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected void readBinaryChildren(HashMap newElements, IBinaryType typeInfo)", "signatureAfterChange": " protected void readBinaryChildren(HashMap newElements, IBinaryType typeInfo)", "diff": ["+\tArrayList typeParameterHandles = new ArrayList();", "-\t\tgenerateTypeParameterInfos(type, typeInfo.getGenericSignature(), newElements, childrenHandles);", "+\t\tgenerateTypeParameterInfos(type, typeInfo.getGenericSignature(), newElements, typeParameterHandles);", "-\t\tgenerateMethodInfos(type, typeInfo, newElements, childrenHandles);", "+\t\tgenerateMethodInfos(type, typeInfo, newElements, childrenHandles, typeParameterHandles);", "+\tint typeParameterHandleSize = typeParameterHandles.size();", "+\tif (typeParameterHandleSize == 0) {", "+\t\tthis.typeParameters = TypeParameter.NO_TYPE_PARAMETERS;", "+\t} else {", "+\t\tthis.typeParameters = new ITypeParameter[typeParameterHandleSize];", "+\t\ttypeParameterHandles.toArray(this.typeParameters);", "+\t}"]}], "num": 4708}
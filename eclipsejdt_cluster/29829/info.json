{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f6abaf03c6cd6f989a727651eaa45c5d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a091a19bd46630214ec7ea2ae25d8a6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "6498f02423137f9292b34e601b633d22e6c4b5d9", "commitAfterChange": "ded354ea9af9c645b73bb24272f1a729a3f65c1d", "methodNumberBeforeChange": 380, "methodNumberAfterChange": 380, "signatureBeforeChange": " public void parse(ConstructorDeclaration cd, CompilationUnitDeclaration unit)", "signatureAfterChange": " public void parse(ConstructorDeclaration cd, CompilationUnitDeclaration unit, boolean recordLineSeparator)", "diff": ["-public void parse(ConstructorDeclaration cd, CompilationUnitDeclaration unit) {", "-\tparse(cd, unit, false);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b18dacd3132a356061294828a394f31c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "5f2456aa4b2b769de40fe8c031c43b1afaff3ffc", "commitAfterChange": "7234934f3efed703cbf030a33d03d36a447aeef6", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " public void parseBlockStatements(ConstructorDeclaration cd, CompilationUnitDeclaration unit)", "signatureAfterChange": " public void parseBlockStatements(ConstructorDeclaration cd, CompilationUnitDeclaration unit)", "diff": ["+\t", "+\tif (this.assistNode != null || lastAct == ERROR_ACTION) {", "+\t\treturn;", "+\t}", "+", "+\t// if no assist node was found, attach the statements as we might be searching for a declaration in a local type", "+\tcd.explicitDeclarations = realBlockStack[realBlockPtr--];", "+\tint length;", "+\tif ((length = astLengthStack[astLengthPtr--]) != 0) {", "+\t\tastPtr -= length;", "+\t\tif (astStack[astPtr + 1] instanceof ExplicitConstructorCall)", "+\t\t\t//avoid a isSomeThing that would only be used here BUT what is faster between two alternatives ?", "+\t\t\t{", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tastStack, ", "+\t\t\t\tastPtr + 2, ", "+\t\t\t\tcd.statements = new Statement[length - 1], ", "+\t\t\t\t0, ", "+\t\t\t\tlength - 1); ", "+\t\t\tcd.constructorCall = (ExplicitConstructorCall) astStack[astPtr + 1];", "+\t\t} else { //need to add explicitly the super();", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tastStack, ", "+\t\t\t\tastPtr + 1, ", "+\t\t\t\tcd.statements = new Statement[length], ", "+\t\t\t\t0, ", "+\t\t\t\tlength); ", "+\t\t\tcd.constructorCall = SuperReference.implicitSuperConstructorCall();", "+\t\t}", "+\t} else {", "+\t\tcd.constructorCall = SuperReference.implicitSuperConstructorCall();", "+\t\tif (!containsComment(cd.bodyStart, cd.bodyEnd)) {", "+\t\t\tcd.bits |= AstNode.UndocumentedEmptyBlockMASK;", "+\t\t}\t\t", "+\t}", "+", "+\tif (cd.constructorCall.sourceEnd == 0) {", "+\t\tcd.constructorCall.sourceEnd = cd.sourceEnd;", "+\t\tcd.constructorCall.sourceStart = cd.sourceStart;", "+\t}"]}], "num": 29829}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b461b5dee47e73cd14de1d872c57db9d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0302358668a9b332ddf2c7d85d866f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CopyMoveElementsTests.java", "commitBeforeChange": "421333df924e824d9a387af5995df2c7b41074aa", "commitAfterChange": "c7529f73b947c3db96e8d513b4c29b957d02901f", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": " public void testMoveMethodsWithCancel() throws CoreException", "signatureAfterChange": " public void testMoveMethodsWithCancel() throws CoreException", "diff": ["-\tfinal IType typeDest = getCompilationUnit(\"/P/src/Y.java\").getType(\"Y\");", "+\tIType typeDest = getCompilationUnit(\"/P/src/Y.java\").getType(\"Y\");", "-\tfinal IProgressMonitor monitor = TestProgressMonitor.getInstance();", "-\tfinal boolean[] isCanceled = new boolean[] {false};", "+\tboolean isCanceled = false;", "-\t\tRunnable runnable = new Runnable() {", "-\t\t\tpublic void run() {", "-\t\t\t\ttry {", "-\t\t\t\t\tmovePositive(typeSource.getMethods(), new IJavaElement[] {typeDest}, null, null, false, monitor);", "-\t\t\t\t} catch (JavaModelException jme) {", "-\t\t\t\t\tassertTrue(\"Code not correct for JavaModelException: \" + jme, false);\t\t\t\t\t", "-\t\t\t\t\treturn;", "-\t\t\t\t} catch (OperationCanceledException e) {", "-\t\t\t\t\tisCanceled[0] = true;", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t};", "-\t\tThread runner = new Thread(runnable);", "-\t\trunner.setPriority(Thread.MIN_PRIORITY);", "-\t\tmonitor.setCanceled(true);", "-\t\trunner.start();", "-\t\trunner.join(5000);", "-\t\tassertTrue(\"Operation should have thrown an operation canceled exception\", isCanceled[0]);", "-\t} catch (InterruptedException ie) {", "+\t\tTestProgressMonitor monitor = TestProgressMonitor.getInstance();", "+\t\tmonitor.setCancelledCounter(1);", "+\t\tmovePositive(typeSource.getMethods(), new IJavaElement[] {typeDest}, null, null, false, monitor);", "+\t} catch (OperationCanceledException e) {", "+\t\tisCanceled = true;", "+\tassertTrue(\"Operation should have thrown an operation canceled exception\", isCanceled);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bac3411fa3bdaaa93b0df923f39b8178", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CopyMoveElementsTests.java", "commitBeforeChange": "421333df924e824d9a387af5995df2c7b41074aa", "commitAfterChange": "c7529f73b947c3db96e8d513b4c29b957d02901f", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 94, "signatureBeforeChange": " public void testMoveMethodsWithCancelInDifferentProject() throws CoreException", "signatureAfterChange": " public void testMoveMethodsWithCancelInDifferentProject() throws CoreException", "diff": ["-\t\tfinal IType typeDest = getCompilationUnit(\"/P2/src/Y.java\").getType(\"Y\");", "+\t\tIType typeDest = getCompilationUnit(\"/P2/src/Y.java\").getType(\"Y\");", "-\t\tfinal IProgressMonitor monitor = TestProgressMonitor.getInstance();", "-\t\tfinal boolean[] isCanceled = new boolean[] {false};", "+\t\tboolean isCanceled = false;", "-\t\t\tRunnable runnable = new Runnable() {", "-\t\t\t\tpublic void run() {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tmovePositive(typeSource.getMethods(), new IJavaElement[] {typeDest}, null, null, false, monitor);", "-\t\t\t\t\t} catch (JavaModelException jme) {", "-\t\t\t\t\t\tassertTrue(\"Code not correct for JavaModelException: \" + jme, false);\t\t\t\t\t", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t} catch (OperationCanceledException e) {", "-\t\t\t\t\t\tisCanceled[0] = true;", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t};", "-\t\t\tThread runner = new Thread(runnable);", "-\t\t\trunner.setPriority(Thread.MIN_PRIORITY);", "-\t\t\tmonitor.setCanceled(true);", "-\t\t\trunner.start();", "-\t\t\trunner.join(5000);", "-\t\t\tassertTrue(\"Operation should have thrown an operation canceled exception\", isCanceled[0]);", "-\t\t} catch (InterruptedException ie) {", "+\t\t\tTestProgressMonitor monitor = TestProgressMonitor.getInstance();", "+\t\t\tmonitor.setCancelledCounter(1);", "+\t\t\tmovePositive(typeSource.getMethods(), new IJavaElement[] {typeDest}, null, null, false, monitor);", "+\t\t} catch (OperationCanceledException e) {", "+\t\t\tisCanceled = true;", "+\t\tassertTrue(\"Operation should have thrown an operation canceled exception\", isCanceled);"]}], "num": 55691}
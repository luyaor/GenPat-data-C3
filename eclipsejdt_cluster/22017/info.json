{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5aca52ecf018f58c6ebf5d2aac6ad61", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4626b82542ab1933c68b7f3507420b6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 75, "signatureBeforeChange": " protected void consumeClassDeclaration()", "signatureAfterChange": " protected void consumeClassDeclaration()", "diff": ["-\tif (!hasConstructor && !typeDecl.isInterface()) {", "-\t\tboolean insideFieldInitializer = false;", "-\t\tif (this.diet) {", "-\t\t\tfor (int i = this.nestedType; i > 0; i--){", "-\t\t\t\tif (this.variablesCounter[i] > 0) {", "-\t\t\t\t\tinsideFieldInitializer = true;", "-\t\t\t\t\tbreak;", "+\tif (!hasConstructor) {", "+\t\tswitch(typeDecl.getKind()) {", "+\t\t\tcase IGenericType.CLASS :", "+\t\t\tcase IGenericType.ENUM :", "+\t\t\t\tboolean insideFieldInitializer = false;", "+\t\t\t\tif (this.diet) {", "+\t\t\t\t\tfor (int i = this.nestedType; i > 0; i--){", "+\t\t\t\t\t\tif (this.variablesCounter[i] > 0) {", "+\t\t\t\t\t\t\tinsideFieldInitializer = true;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t}", "+\t\t\t\ttypeDecl.createDefaultConstructor(!this.diet || insideFieldInitializer, true);", "-\t\ttypeDecl.createsInternalConstructor(!this.diet || insideFieldInitializer, true);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48bab7bb805aeb58ebba64ce9d554c73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  \tpublic void resolve()", "signatureAfterChange": "  \tpublic void resolve()", "diff": ["-\t\t\t\t\tif (field.isField()) {", "-\t\t\t\t\t\tFieldBinding fieldBinding = field.binding;", "-\t\t\t\t\t\tif (fieldBinding == null) {", "-\t\t\t\t\t\t\t// still discover secondary errors", "-\t\t\t\t\t\t\tif (field.initialization != null) field.initialization.resolve(field.isStatic() ? this.staticInitializerScope : this.initializerScope);", "-\t\t\t\t\t\t\tthis.ignoreFurtherInvestigation = true;", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (needSerialVersion", "-\t\t\t\t\t\t\t\t&& ((fieldBinding.modifiers & (AccStatic | AccFinal)) == (AccStatic | AccFinal))", "-\t\t\t\t\t\t\t\t&& CharOperation.equals(TypeConstants.SERIALVERSIONUID, fieldBinding.name)", "-\t\t\t\t\t\t\t\t&& BaseTypes.LongBinding == fieldBinding.type) {", "-\t\t\t\t\t\t\tneedSerialVersion = false;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthis.maxFieldCount++;", "-\t\t\t\t\t\tlastVisibleFieldID = field.binding.id;", "-\t\t\t\t\t} else { // initializer", "-\t\t\t\t\t\t ((Initializer) field).lastVisibleFieldID = lastVisibleFieldID + 1;", "+\t\t\t\t\tswitch(field.getKind()) {", "+\t\t\t\t\t\tcase AbstractVariableDeclaration.FIELD:", "+\t\t\t\t\t\tcase AbstractVariableDeclaration.ENUM_CONSTANT:", "+\t\t\t\t\t\t\tFieldBinding fieldBinding = field.binding;", "+\t\t\t\t\t\t\tif (fieldBinding == null) {", "+\t\t\t\t\t\t\t\t// still discover secondary errors", "+\t\t\t\t\t\t\t\tif (field.initialization != null) field.initialization.resolve(field.isStatic() ? this.staticInitializerScope : this.initializerScope);", "+\t\t\t\t\t\t\t\tthis.ignoreFurtherInvestigation = true;", "+\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (needSerialVersion", "+\t\t\t\t\t\t\t\t\t&& ((fieldBinding.modifiers & (AccStatic | AccFinal)) == (AccStatic | AccFinal))", "+\t\t\t\t\t\t\t\t\t&& CharOperation.equals(TypeConstants.SERIALVERSIONUID, fieldBinding.name)", "+\t\t\t\t\t\t\t\t\t&& BaseTypes.LongBinding == fieldBinding.type) {", "+\t\t\t\t\t\t\t\tneedSerialVersion = false;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tthis.maxFieldCount++;", "+\t\t\t\t\t\t\tlastVisibleFieldID = field.binding.id;", "+\t\t\t\t\t\t\tbreak;", "+", "+\t\t\t\t\t\tcase AbstractVariableDeclaration.INITIALIZER:", "+\t\t\t\t\t\t\t ((Initializer) field).lastVisibleFieldID = lastVisibleFieldID + 1;", "+\t\t\t\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7946a147a5eee50478f5ddf7c206bd1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredType.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public RecoveredElement add(FieldDeclaration fieldDeclaration, int bracketBalanceValue)", "signatureAfterChange": " public RecoveredElement add(FieldDeclaration fieldDeclaration, int bracketBalanceValue)", "diff": ["-\tRecoveredField element = fieldDeclaration.isField() ", "-\t\t\t\t\t\t\t\t? new RecoveredField(fieldDeclaration, this, bracketBalanceValue)", "-\t\t\t\t\t\t\t\t: new RecoveredInitializer(fieldDeclaration, this, bracketBalanceValue);", "+\tRecoveredField element;", "+\tswitch (fieldDeclaration.getKind()) {", "+\t\tcase AbstractVariableDeclaration.FIELD:", "+\t\tcase AbstractVariableDeclaration.ENUM_CONSTANT:", "+\t\t\telement = new RecoveredField(fieldDeclaration, this, bracketBalanceValue);", "+\t\t\tbreak;", "+\t\tcase AbstractVariableDeclaration.INITIALIZER:", "+\t\t\telement = new RecoveredInitializer(fieldDeclaration, this, bracketBalanceValue);", "+\t\t\tbreak;", "+\t\tdefault:", "+\t\t\t// never happens, as field is always identified", "+\t\t\treturn this;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4cb5be26d4ef1057188cd60b44c4aac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementParser.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void notifySourceElementRequestor(FieldDeclaration fieldDeclaration)", "signatureAfterChange": " public void notifySourceElementRequestor(FieldDeclaration fieldDeclaration)", "diff": ["-\tif (fieldDeclaration.isField()) {", "-\t\tint fieldEndPosition = fieldDeclaration.declarationSourceEnd;", "-\t\tif (fieldDeclaration instanceof SourceFieldDeclaration) {", "-\t\t\tfieldEndPosition = ((SourceFieldDeclaration) fieldDeclaration).fieldEndPosition;", "-\t\t\tif (fieldEndPosition == 0) {", "-\t\t\t\t// use the declaration source end by default", "-\t\t\t\tfieldEndPosition = fieldDeclaration.declarationSourceEnd;", "+\tswitch(fieldDeclaration.getKind()) {", "+\t\tcase AbstractVariableDeclaration.FIELD:", "+\t\t\tint fieldEndPosition = fieldDeclaration.declarationSourceEnd;", "+\t\t\tif (fieldDeclaration instanceof SourceFieldDeclaration) {", "+\t\t\t\tfieldEndPosition = ((SourceFieldDeclaration) fieldDeclaration).fieldEndPosition;", "+\t\t\t\tif (fieldEndPosition == 0) {", "+\t\t\t\t\t// use the declaration source end by default", "+\t\t\t\t\tfieldEndPosition = fieldDeclaration.declarationSourceEnd;", "+\t\t\t\t}", "-\t\t}", "-\t\tif (isInRange) {", "-\t\t\tint currentModifiers = fieldDeclaration.modifiers;", "-\t\t\tboolean deprecated = (currentModifiers & AccDeprecated) != 0; // remember deprecation so as to not lose it below", "-\t\t\trequestor.enterField(", "-\t\t\t\tfieldDeclaration.declarationSourceStart, ", "-\t\t\t\tdeprecated ? (currentModifiers & AccJustFlag) | AccDeprecated : currentModifiers & AccJustFlag, ", "-\t\t\t\tCharOperation.concatWith(fieldDeclaration.type.getParameterizedTypeName(), '.'),", "-\t\t\t\tfieldDeclaration.name, ", "-\t\t\t\tfieldDeclaration.sourceStart, ", "-\t\t\t\tfieldDeclaration.sourceEnd); ", "-\t\t}", "-\t\tthis.visitIfNeeded(fieldDeclaration);", "-\t\tif (isInRange){", "-\t\t\trequestor.exitField(", "-\t\t\t\t// filter out initializations that are not a constant (simple check)", "-\t\t\t\t(fieldDeclaration.initialization == null ", "-\t\t\t\t\t\t|| fieldDeclaration.initialization instanceof ArrayInitializer", "-\t\t\t\t\t\t|| fieldDeclaration.initialization instanceof AllocationExpression", "-\t\t\t\t\t\t|| fieldDeclaration.initialization instanceof ArrayAllocationExpression", "-\t\t\t\t\t\t|| fieldDeclaration.initialization instanceof Assignment", "-\t\t\t\t\t\t|| fieldDeclaration.initialization instanceof ClassLiteralAccess", "-\t\t\t\t\t\t|| fieldDeclaration.initialization instanceof MessageSend", "-\t\t\t\t\t\t|| fieldDeclaration.initialization instanceof ArrayReference", "-\t\t\t\t\t\t|| fieldDeclaration.initialization instanceof ThisReference) ? ", "-\t\t\t\t\t-1 :  ", "-\t\t\t\t\tfieldDeclaration.initialization.sourceStart, ", "-\t\t\t\tfieldEndPosition,", "-\t\t\t\tfieldDeclaration.declarationSourceEnd);", "-\t\t}", "-", "-\t} else {", "-\t\tif (isInRange){", "-\t\t\trequestor.enterInitializer(", "-\t\t\t\tfieldDeclaration.declarationSourceStart,", "-\t\t\t\tfieldDeclaration.modifiers); ", "-\t\t}", "-\t\tthis.visitIfNeeded((Initializer)fieldDeclaration);", "-\t\tif (isInRange){", "-\t\t\trequestor.exitInitializer(fieldDeclaration.declarationSourceEnd);", "-\t\t}", "+\t\t\tif (isInRange) {", "+\t\t\t\tint currentModifiers = fieldDeclaration.modifiers;", "+\t\t\t\tboolean deprecated = (currentModifiers & AccDeprecated) != 0; // remember deprecation so as to not lose it below", "+\t\t\t\trequestor.enterField(", "+\t\t\t\t\tfieldDeclaration.declarationSourceStart, ", "+\t\t\t\t\tdeprecated ? (currentModifiers & AccJustFlag) | AccDeprecated : currentModifiers & AccJustFlag, ", "+\t\t\t\t\tCharOperation.concatWith(fieldDeclaration.type.getParameterizedTypeName(), '.'),", "+\t\t\t\t\tfieldDeclaration.name, ", "+\t\t\t\t\tfieldDeclaration.sourceStart, ", "+\t\t\t\t\tfieldDeclaration.sourceEnd); ", "+\t\t\t}", "+\t\t\tthis.visitIfNeeded(fieldDeclaration);", "+\t\t\tif (isInRange){", "+\t\t\t\trequestor.exitField(", "+\t\t\t\t\t// filter out initializations that are not a constant (simple check)", "+\t\t\t\t\t(fieldDeclaration.initialization == null ", "+\t\t\t\t\t\t\t|| fieldDeclaration.initialization instanceof ArrayInitializer", "+\t\t\t\t\t\t\t|| fieldDeclaration.initialization instanceof AllocationExpression", "+\t\t\t\t\t\t\t|| fieldDeclaration.initialization instanceof ArrayAllocationExpression", "+\t\t\t\t\t\t\t|| fieldDeclaration.initialization instanceof Assignment", "+\t\t\t\t\t\t\t|| fieldDeclaration.initialization instanceof ClassLiteralAccess", "+\t\t\t\t\t\t\t|| fieldDeclaration.initialization instanceof MessageSend", "+\t\t\t\t\t\t\t|| fieldDeclaration.initialization instanceof ArrayReference", "+\t\t\t\t\t\t\t|| fieldDeclaration.initialization instanceof ThisReference) ? ", "+\t\t\t\t\t\t-1 :  ", "+\t\t\t\t\t\tfieldDeclaration.initialization.sourceStart, ", "+\t\t\t\t\tfieldEndPosition,", "+\t\t\t\t\tfieldDeclaration.declarationSourceEnd);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase AbstractVariableDeclaration.INITIALIZER:", "+\t\t\tif (isInRange){", "+\t\t\t\trequestor.enterInitializer(", "+\t\t\t\t\tfieldDeclaration.declarationSourceStart,", "+\t\t\t\t\tfieldDeclaration.modifiers); ", "+\t\t\t}", "+\t\t\tthis.visitIfNeeded((Initializer)fieldDeclaration);", "+\t\t\tif (isInRange){", "+\t\t\t\trequestor.exitInitializer(fieldDeclaration.declarationSourceEnd);", "+\t\t\t}", "+\t\t\tbreak;"]}], "num": 22017}
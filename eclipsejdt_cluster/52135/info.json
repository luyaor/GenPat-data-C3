{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75df1bae07b513e18df853cefd2e7a56", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "171276190f78cbc07f2b31a2e705e5df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "c8bfaf82a67da861220348e09ccf8e5b65eea2d7", "commitAfterChange": "7c0d6dc61f1a3a5fa2460d48c92c28c9976c6e77", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "\r public char[][] getImports()", "signatureAfterChange": "\r public char[][] getImports(BinaryType type)", "diff": ["-public char[][] getImports() {\r", "-\tif (this.imports != null && this.imports.length != this.importsCounter) {\r", "-\t\tSystem.arraycopy(this.imports, 0, (this.imports = new char[this.importsCounter][]), 0, this.importsCounter);\r", "+public char[][] getImports(BinaryType type) {\r", "+\tchar[][] imports = (char[][]) this.importsTable.get(type);\r", "+\tif (imports != null) {\r", "+\t\tint importsCounter = ((Integer) this.importsCounterTable.get(type)).intValue();\r", "+ \t\tif (imports.length != importsCounter) {\r", "+\t\t\tSystem.arraycopy(imports, 0, (imports = new char[importsCounter][]), 0, importsCounter);\r", "+ \t\t}\r", "-\treturn this.imports;\r", "+\tthis.importsTable.put(type, imports);\r", "+\treturn imports;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df6d5d1e715533ea1ba429915a636839", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "c8bfaf82a67da861220348e09ccf8e5b65eea2d7", "commitAfterChange": "7c0d6dc61f1a3a5fa2460d48c92c28c9976c6e77", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public void acceptImport(int declarationStart, int declarationEnd, char[] name, boolean onDemand)", "signatureAfterChange": "\r public void acceptImport(int declarationStart, int declarationEnd, char[] name, boolean onDemand)", "diff": ["-\tif (this.imports == null) {\r", "-\t\tthis.imports = new char[5][];\r", "-\t\tthis.importsCounter = 0;\r", "+\tchar[][] imports = (char[][]) this.importsTable.get(fType);\r", "+\tint importsCounter;\r", "+\tif (imports == null) {\r", "+\t\timports = new char[5][];\r", "+\t\timportsCounter = 0;\r", "+\t} else {\r", "+\t\timportsCounter = ((Integer) this.importsCounterTable.get(fType)).intValue();\r", "-\tif (this.imports.length == this.importsCounter) {\r", "-\t\tSystem.arraycopy(this.imports, 0, (this.imports = new char[this.importsCounter * 2][]), 0, this.importsCounter);\r", "+\tif (imports.length == importsCounter) {\r", "+\t\tSystem.arraycopy(imports, 0, (imports = new char[importsCounter * 2][]), 0, importsCounter);\r", "-\tthis.imports[this.importsCounter++] = name;\r", "+\timports[importsCounter++] = name;\r", "+\tthis.importsTable.put(fType, imports);\r", "+\tthis.importsCounterTable.put(fType, new Integer(importsCounter));\r"]}], "num": 52135}
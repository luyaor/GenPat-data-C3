{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19a68bf274b93dfb971255806e590c12", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c2a055d687be647633c4ad2eb20d479", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r private void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r private void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\tthrow new InvalidInputException(Main.bind(\"configure.noSourceFile\")); //$NON-NLS-1$\r", "+\t\tthrow new InvalidInputException(Main.bind(\"configure.noSourceFile\"/*nonNLS*/));\r", "-\tfinal int InsideSource = 32;\r", "-\tboolean warnOptionInUsed = false;\r", "+\tboolean warnOptionInUsed = false;\r", "-\t\tif (currentArg.endsWith(\".java\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.endsWith(\".java\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-log\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-log\"/*nonNLS*/)) {\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateLog\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateLog\"/*nonNLS*/,currentArg));\r", "-\t\tif (currentArg.equals(\"-repeat\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-repeat\"/*nonNLS*/)) {\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateRepeat\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateRepeat\"/*nonNLS*/,currentArg));\r", "-\t\tif (currentArg.equals(\"-source\")) { //$NON-NLS-1$\r", "-\t\t\tmode = InsideSource;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (currentArg.equals(\"-d\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-d\"/*nonNLS*/)) {\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateOutputPath\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateOutputPath\"/*nonNLS*/,currentArg));\r", "-\t\tif (currentArg.equals(\"-classpath\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-classpath\"/*nonNLS*/)) {\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateClasspath\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateClasspath\"/*nonNLS*/,currentArg));\r", "-\t\tif (currentArg.equals(\"-progress\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-progress\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-proceedOnError\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-proceedOnError\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-time\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-time\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-version\") || currentArg.equals(\"-v\")) { //$NON-NLS-1$ //$NON-NLS-2$\r", "+\t\tif (currentArg.equals(\"-version\"/*nonNLS*/) || currentArg.equals(\"-v\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-help\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-help\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-noImportError\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-noImportError\"/*nonNLS*/)) {\r", "-\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemInvalidImport\",2); //$NON-NLS-1$\r", "+\t\t\timportProblemIsError = false;\r", "-\t\tif (currentArg.equals(\"-noExit\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-noExit\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-verbose\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-verbose\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-referenceInfo\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-referenceInfo\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.startsWith(\"-g\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.startsWith(\"-g\"/*nonNLS*/)) {\r", "+\t\t\tdebugMask = 0; // reinitialize the default value\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LocalVariableAttribute, 0);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LineNumberAttribute, 0);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_SourceFileAttribute, 0);\r", "+\t\t\t\tdebugMask = CompilerOptions.Lines | CompilerOptions.Vars | CompilerOptions.Source;\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LocalVariableAttribute, 1);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LineNumberAttribute, 1);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_SourceFileAttribute, 1);\t\t\t\t\r", "-\t\t\t\tif (length == 7 && debugOption.equals(\"-g:none\")) //$NON-NLS-1$\r", "+\t\t\t\tif (length == 7 && debugOption.equals(\"-g:none\"/*nonNLS*/))\r", "-\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(debugOption.substring(3, debugOption.length()), \",\"); //$NON-NLS-1$\r", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(debugOption.substring(3, debugOption.length()), \",\"/*nonNLS*/);\r", "-\t\t\t\t\tif (token.equals(\"vars\")) { //$NON-NLS-1$\r", "-\t\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LocalVariableAttribute, 0);\r", "-\t\t\t\t\t} else if (token.equals(\"lines\")) { //$NON-NLS-1$\r", "-\t\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LineNumberAttribute, 0);\r", "-\t\t\t\t\t} else if (token.equals(\"source\")) { //$NON-NLS-1$\r", "-\t\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_SourceFileAttribute, 0);\r", "+\t\t\t\t\tif (token.equals(\"vars\"/*nonNLS*/)) {\r", "+\t\t\t\t\t\tdebugMask |= CompilerOptions.Vars;\r", "+\t\t\t\t\t} else if (token.equals(\"lines\"/*nonNLS*/)) {\r", "+\t\t\t\t\t\tdebugMask |= CompilerOptions.Lines;\r", "+\t\t\t\t\t} else if (token.equals(\"source\"/*nonNLS*/)) {\r", "+\t\t\t\t\t\tdebugMask |= CompilerOptions.Source;\r", "-\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidDebugOption\",debugOption)); //$NON-NLS-1$\r", "+\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidDebugOption\"/*nonNLS*/,debugOption));\r", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidDebugOption\",debugOption)); //$NON-NLS-1$\r", "+\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidDebugOption\"/*nonNLS*/,debugOption));\r", "-\t\tif (currentArg.startsWith(\"-nowarn\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.startsWith(\"-nowarn\"/*nonNLS*/)) {\r", "-\t\t\tnoWarn = true;\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateWarningConfiguration\")); //$NON-NLS-1$\r", "-\t\t\tmode = Default;\t\t\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateWarningConfiguration\"/*nonNLS*/));\r", "+\t\t\tmode = Default;\r", "+\t\t\twarningMask = TemporaryWarning; // reinitialize the default value (still see TemporaryWarning)\t\t\r", "-\t\tif (currentArg.startsWith(\"-warn\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.startsWith(\"-warn\"/*nonNLS*/)) {\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateWarningConfiguration\")); //$NON-NLS-1$\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateWarningConfiguration\"/*nonNLS*/));\r", "-\t\t\tif (length == 10 && warningOption.equals(\"-warn:none\")) { //$NON-NLS-1$\r", "-\t\t\t\tnoWarn = true;\r", "+\t\t\tif (length == 10 && warningOption.equals(\"-warn:none\"/*nonNLS*/)) {\r", "+\t\t\t\twarningMask = TemporaryWarning; // reinitialize the default value (still see TemporaryWarning)\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidWarningConfiguration\",warningOption)); //$NON-NLS-1$\r", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(warningOption.substring(6, warningOption.length()), \",\"); //$NON-NLS-1$\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidWarningConfiguration\"/*nonNLS*/,warningOption));\r", "+\t\t\tStringTokenizer tokenizer = new StringTokenizer(warningOption.substring(6, warningOption.length()), \",\"/*nonNLS*/);\r", "-\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportMethodWithConstructorName, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportHiddenCatchBlock, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportDeprecation, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedLocal, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedParameter, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportAssertIdentifier, 2);\r", "-\t\t\t\r", "+\t\t\twarningMask = 0; // reinitialize the default value\t\t\t\t\r", "-\t\t\t\tif (token.equals(\"constructorName\")) { //$NON-NLS-1$\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportMethodWithConstructorName, 1);\r", "-\t\t\t\t} else if (token.equals(\"packageDefaultMethod\")) { //$NON-NLS-1$\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, 1);\r", "-\t\t\t\t} else if (token.equals(\"maskedCatchBlocks\")) { //$NON-NLS-1$\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportHiddenCatchBlock, 1);\r", "-\t\t\t\t} else if (token.equals(\"deprecation\")) { //$NON-NLS-1$\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportDeprecation, 1);\r", "-\t\t\t\t} else if (token.equals(\"unusedLocals\")) { //$NON-NLS-1$\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedLocal, 1);\r", "-\t\t\t\t} else if (token.equals(\"unusedArguments\")) { //$NON-NLS-1$\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedParameter, 1);\r", "-\t\t\t\t} else if (token.equals(\"syntheticAccess\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, 1);\r", "-\t\t\t\t} else if (token.equals(\"nls\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, 1);\r", "-\t\t\t\t} else if (token.equals(\"assertIdentifier\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportAssertIdentifier, 1);\r", "+\t\t\t\tif (token.equals(\"constructorName\"/*nonNLS*/)) {\r", "+\t\t\t\t\twarningMask |= CompilerOptions.MethodWithConstructorName;\r", "+\t\t\t\t} else if (token.equals(\"packageDefaultMethod\"/*nonNLS*/)) {\r", "+\t\t\t\t\twarningMask |= CompilerOptions.OverriddenPackageDefaultMethod;\r", "+\t\t\t\t} else if (token.equals(\"maskedCatchBlocks\"/*nonNLS*/)) {\r", "+\t\t\t\t\twarningMask |= CompilerOptions.MaskedCatchBlock;\r", "+\t\t\t\t} else if (token.equals(\"deprecation\"/*nonNLS*/)) {\r", "+\t\t\t\t\twarningMask |= CompilerOptions.UsingDeprecatedAPI;\r", "+\t\t\t\t} else if (token.equals(\"unusedLocals\"/*nonNLS*/)) {\r", "+\t\t\t\t\twarningMask |= CompilerOptions.UnusedLocalVariable;\r", "+\t\t\t\t} else if (token.equals(\"unusedArguments\"/*nonNLS*/)) {\r", "+\t\t\t\t\twarningMask |= CompilerOptions.UnusedArgument;\r", "+\t\t\t\t} else if (token.equals(\"syntheticAccess\"/*nonNLS*/)){\r", "+\t\t\t\t\twarningMask |= CompilerOptions.AccessEmulation;\r", "+\t\t\t\t} else if (token.equals(\"nls\"/*nonNLS*/)){\r", "+\t\t\t\t\twarningMask |= CompilerOptions.NonExternalizedString;\r", "-\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidWarning\",token)); //$NON-NLS-1$\r", "+\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidWarning\"/*nonNLS*/,token));\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidWarningOption\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidWarningOption\"/*nonNLS*/,currentArg));\r", "-\t\tif (currentArg.equals(\"-target\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-target\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-preserveAllLocals\")) { //$NON-NLS-1$\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_PreserveUnusedLocal, 0);\r", "+\t\tif (currentArg.equals(\"-preserveAllLocals\"/*nonNLS*/)) {\r", "+\t\t\tpreserveAllLocalVariables = true;\r", "-\t\t\tif (currentArg.equals(\"1.1\")) { //$NON-NLS-1$\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_TargetPlatform, 0);\r", "-\t\t\t} else if (currentArg.equals(\"1.2\")) { //$NON-NLS-1$\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_TargetPlatform, 1);\r", "+\t\t\tif (currentArg.equals(\"1.1\"/*nonNLS*/)) {\r", "+\t\t\t\ttargetJDK = CompilerOptions.JDK1_1;\r", "+\t\t\t} else if (currentArg.equals(\"1.2\"/*nonNLS*/)) {\r", "+\t\t\t\ttargetJDK = CompilerOptions.JDK1_2;\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.targetJDK\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.targetJDK\"/*nonNLS*/,currentArg));\r", "-\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.repetition\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.repetition\"/*nonNLS*/,currentArg));\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.repetition\",currentArg)); //$NON-NLS-1$\r", "-\t\t\t}\r", "-\t\t\tmode = Default;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (mode == InsideSource){\r", "-\t\t\tif (currentArg.equals(\"1.3\")) { //$NON-NLS-1$\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_Source, 0);\r", "-\t\t\t} else if (currentArg.equals(\"1.4\")) { //$NON-NLS-1$\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_Source, 1);\r", "-\t\t\t} else {\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.source\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.repetition\"/*nonNLS*/,currentArg));\r", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.directoryNotExist\",currentArg)); //$NON-NLS-1$\r", "+\t\t\tthrow new InvalidInputException(Main.bind(\"configure.directoryNotExist\"/*nonNLS*/,currentArg));\r", "-\t\t\tfinder.find(dir, \".JAVA\", verbose); //$NON-NLS-1$\r", "+\t\t\tfinder.find(dir, \".JAVA\"/*nonNLS*/, verbose);\r", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.IOError\",currentArg));\t\t //$NON-NLS-1$\r", "+\t\t\tthrow new InvalidInputException(Main.bind(\"configure.IOError\"/*nonNLS*/,currentArg));\t\t\r", "-\tif(noWarn){\r", "-\t\tfor(int i = 0; i < problemOption.length ; i++){\r", "-\t\t\tfor(int j = 0 ; j < options.length ; j++){\r", "-\t\t\t\tif(options[j].getID().equals(problemOption[i]) && options[j].getValueIndex() == 1){\r", "-\t\t\t\t\toptions[j].setValueIndex(2);\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\t\tout.println(Main.bind(\"configure.version\",this.versionID)); //$NON-NLS-1$\r", "+\t\tout.println(Main.bind(\"configure.version\"/*nonNLS*/,this.versionID));\r", "-\t\tproceed = false;\r", "-\t\tproceed = false;\r", "-\t\tString classProp = System.getProperty(\"LFclasspath\"); //$NON-NLS-1$\r", "+\t\tString classProp = System.getProperty(\"LFclasspath\"/*nonNLS*/);\r", "-\t\t\tout.println(Main.bind(\"configure.noClasspath\")); //$NON-NLS-1$\r", "-\t\t\tclassProp = \".\"; //$NON-NLS-1$\r", "+\t\t\tout.println(Main.bind(\"configure.noClasspath\"/*nonNLS*/));\r", "+\t\t\tclassProp = \".\"/*nonNLS*/;\r", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incorrectClasspath\",classpaths[i])); //$NON-NLS-1$\r", "+\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incorrectClasspath\"/*nonNLS*/,classpaths[i]));\r", "-\t\tdestinationPath = System.getProperty(\"user.dir\"); //$NON-NLS-1$\r", "-\t} else if (\"none\".equals(destinationPath)) { //$NON-NLS-1$\r", "+\t\tdestinationPath = System.getProperty(\"user.dir\"/*nonNLS*/);\r", "+\t} else if (\"none\"/*nonNLS*/.equals(destinationPath)) {\r", "-\t\tthrow new InvalidInputException(Main.bind(\"configure.noSource\")); //$NON-NLS-1$\r", "+\t\tthrow new InvalidInputException(Main.bind(\"configure.noSource\"/*nonNLS*/));\r", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.cannotOpenLog\")); //$NON-NLS-1$\r", "+\t\t\tthrow new InvalidInputException(Main.bind(\"configure.cannotOpenLog\"/*nonNLS*/));\r", "-\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa67f94493af2aacb051794cde7679e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r private void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r private void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\tthrow new InvalidInputException(Main.bind(\"configure.noSourceFile\")); //$NON-NLS-1$\r", "+\t\tthrow new InvalidInputException(Main.bind(\"configure.noSourceFile\"/*nonNLS*/));\r", "-\tfinal int InsideSource = 32;\r", "-\tboolean warnOptionInUsed = false;\r", "+\tboolean warnOptionInUsed = false;\r", "-\t\tif (currentArg.endsWith(\".java\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.endsWith(\".java\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-log\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-log\"/*nonNLS*/)) {\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateLog\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateLog\"/*nonNLS*/,currentArg));\r", "-\t\tif (currentArg.equals(\"-repeat\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-repeat\"/*nonNLS*/)) {\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateRepeat\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateRepeat\"/*nonNLS*/,currentArg));\r", "-\t\tif (currentArg.equals(\"-source\")) { //$NON-NLS-1$\r", "-\t\t\tmode = InsideSource;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (currentArg.equals(\"-d\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-d\"/*nonNLS*/)) {\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateOutputPath\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateOutputPath\"/*nonNLS*/,currentArg));\r", "-\t\tif (currentArg.equals(\"-classpath\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-classpath\"/*nonNLS*/)) {\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateClasspath\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateClasspath\"/*nonNLS*/,currentArg));\r", "-\t\tif (currentArg.equals(\"-progress\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-progress\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-proceedOnError\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-proceedOnError\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-time\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-time\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-version\") || currentArg.equals(\"-v\")) { //$NON-NLS-1$ //$NON-NLS-2$\r", "+\t\tif (currentArg.equals(\"-version\"/*nonNLS*/) || currentArg.equals(\"-v\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-help\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-help\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-noImportError\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-noImportError\"/*nonNLS*/)) {\r", "-\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemInvalidImport\",2); //$NON-NLS-1$\r", "+\t\t\timportProblemIsError = false;\r", "-\t\tif (currentArg.equals(\"-noExit\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-noExit\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-verbose\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-verbose\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-referenceInfo\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-referenceInfo\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.startsWith(\"-g\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.startsWith(\"-g\"/*nonNLS*/)) {\r", "+\t\t\tdebugMask = 0; // reinitialize the default value\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LocalVariableAttribute, 0);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LineNumberAttribute, 0);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_SourceFileAttribute, 0);\r", "+\t\t\t\tdebugMask = CompilerOptions.Lines | CompilerOptions.Vars | CompilerOptions.Source;\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LocalVariableAttribute, 1);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LineNumberAttribute, 1);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_SourceFileAttribute, 1);\t\t\t\t\r", "-\t\t\t\tif (length == 7 && debugOption.equals(\"-g:none\")) //$NON-NLS-1$\r", "+\t\t\t\tif (length == 7 && debugOption.equals(\"-g:none\"/*nonNLS*/))\r", "-\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(debugOption.substring(3, debugOption.length()), \",\"); //$NON-NLS-1$\r", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(debugOption.substring(3, debugOption.length()), \",\"/*nonNLS*/);\r", "-\t\t\t\t\tif (token.equals(\"vars\")) { //$NON-NLS-1$\r", "-\t\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LocalVariableAttribute, 0);\r", "-\t\t\t\t\t} else if (token.equals(\"lines\")) { //$NON-NLS-1$\r", "-\t\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LineNumberAttribute, 0);\r", "-\t\t\t\t\t} else if (token.equals(\"source\")) { //$NON-NLS-1$\r", "-\t\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_SourceFileAttribute, 0);\r", "+\t\t\t\t\tif (token.equals(\"vars\"/*nonNLS*/)) {\r", "+\t\t\t\t\t\tdebugMask |= CompilerOptions.Vars;\r", "+\t\t\t\t\t} else if (token.equals(\"lines\"/*nonNLS*/)) {\r", "+\t\t\t\t\t\tdebugMask |= CompilerOptions.Lines;\r", "+\t\t\t\t\t} else if (token.equals(\"source\"/*nonNLS*/)) {\r", "+\t\t\t\t\t\tdebugMask |= CompilerOptions.Source;\r", "-\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidDebugOption\",debugOption)); //$NON-NLS-1$\r", "+\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidDebugOption\"/*nonNLS*/,debugOption));\r", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidDebugOption\",debugOption)); //$NON-NLS-1$\r", "+\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidDebugOption\"/*nonNLS*/,debugOption));\r", "-\t\tif (currentArg.startsWith(\"-nowarn\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.startsWith(\"-nowarn\"/*nonNLS*/)) {\r", "-\t\t\tnoWarn = true;\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateWarningConfiguration\")); //$NON-NLS-1$\r", "-\t\t\tmode = Default;\t\t\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateWarningConfiguration\"/*nonNLS*/));\r", "+\t\t\tmode = Default;\r", "+\t\t\twarningMask = TemporaryWarning; // reinitialize the default value (still see TemporaryWarning)\t\t\r", "-\t\tif (currentArg.startsWith(\"-warn\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.startsWith(\"-warn\"/*nonNLS*/)) {\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateWarningConfiguration\")); //$NON-NLS-1$\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateWarningConfiguration\"/*nonNLS*/));\r", "-\t\t\tif (length == 10 && warningOption.equals(\"-warn:none\")) { //$NON-NLS-1$\r", "-\t\t\t\tnoWarn = true;\r", "+\t\t\tif (length == 10 && warningOption.equals(\"-warn:none\"/*nonNLS*/)) {\r", "+\t\t\t\twarningMask = TemporaryWarning; // reinitialize the default value (still see TemporaryWarning)\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidWarningConfiguration\",warningOption)); //$NON-NLS-1$\r", "-\t\t\tStringTokenizer tokenizer = new StringTokenizer(warningOption.substring(6, warningOption.length()), \",\"); //$NON-NLS-1$\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidWarningConfiguration\"/*nonNLS*/,warningOption));\r", "+\t\t\tStringTokenizer tokenizer = new StringTokenizer(warningOption.substring(6, warningOption.length()), \",\"/*nonNLS*/);\r", "-\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportMethodWithConstructorName, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportHiddenCatchBlock, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportDeprecation, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedLocal, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedParameter, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportAssertIdentifier, 2);\r", "-\t\t\t\r", "+\t\t\twarningMask = 0; // reinitialize the default value\t\t\t\t\r", "-\t\t\t\tif (token.equals(\"constructorName\")) { //$NON-NLS-1$\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportMethodWithConstructorName, 1);\r", "-\t\t\t\t} else if (token.equals(\"packageDefaultMethod\")) { //$NON-NLS-1$\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, 1);\r", "-\t\t\t\t} else if (token.equals(\"maskedCatchBlocks\")) { //$NON-NLS-1$\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportHiddenCatchBlock, 1);\r", "-\t\t\t\t} else if (token.equals(\"deprecation\")) { //$NON-NLS-1$\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportDeprecation, 1);\r", "-\t\t\t\t} else if (token.equals(\"unusedLocals\")) { //$NON-NLS-1$\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedLocal, 1);\r", "-\t\t\t\t} else if (token.equals(\"unusedArguments\")) { //$NON-NLS-1$\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedParameter, 1);\r", "-\t\t\t\t} else if (token.equals(\"syntheticAccess\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, 1);\r", "-\t\t\t\t} else if (token.equals(\"nls\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, 1);\r", "-\t\t\t\t} else if (token.equals(\"assertIdentifier\")){ //$NON-NLS-1$\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportAssertIdentifier, 1);\r", "+\t\t\t\tif (token.equals(\"constructorName\"/*nonNLS*/)) {\r", "+\t\t\t\t\twarningMask |= CompilerOptions.MethodWithConstructorName;\r", "+\t\t\t\t} else if (token.equals(\"packageDefaultMethod\"/*nonNLS*/)) {\r", "+\t\t\t\t\twarningMask |= CompilerOptions.OverriddenPackageDefaultMethod;\r", "+\t\t\t\t} else if (token.equals(\"maskedCatchBlocks\"/*nonNLS*/)) {\r", "+\t\t\t\t\twarningMask |= CompilerOptions.MaskedCatchBlock;\r", "+\t\t\t\t} else if (token.equals(\"deprecation\"/*nonNLS*/)) {\r", "+\t\t\t\t\twarningMask |= CompilerOptions.UsingDeprecatedAPI;\r", "+\t\t\t\t} else if (token.equals(\"unusedLocals\"/*nonNLS*/)) {\r", "+\t\t\t\t\twarningMask |= CompilerOptions.UnusedLocalVariable;\r", "+\t\t\t\t} else if (token.equals(\"unusedArguments\"/*nonNLS*/)) {\r", "+\t\t\t\t\twarningMask |= CompilerOptions.UnusedArgument;\r", "+\t\t\t\t} else if (token.equals(\"syntheticAccess\"/*nonNLS*/)){\r", "+\t\t\t\t\twarningMask |= CompilerOptions.AccessEmulation;\r", "+\t\t\t\t} else if (token.equals(\"nls\"/*nonNLS*/)){\r", "+\t\t\t\t\twarningMask |= CompilerOptions.NonExternalizedString;\r", "-\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidWarning\",token)); //$NON-NLS-1$\r", "+\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidWarning\"/*nonNLS*/,token));\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidWarningOption\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidWarningOption\"/*nonNLS*/,currentArg));\r", "-\t\tif (currentArg.equals(\"-target\")) { //$NON-NLS-1$\r", "+\t\tif (currentArg.equals(\"-target\"/*nonNLS*/)) {\r", "-\t\tif (currentArg.equals(\"-preserveAllLocals\")) { //$NON-NLS-1$\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_PreserveUnusedLocal, 0);\r", "+\t\tif (currentArg.equals(\"-preserveAllLocals\"/*nonNLS*/)) {\r", "+\t\t\tpreserveAllLocalVariables = true;\r", "-\t\t\tif (currentArg.equals(\"1.1\")) { //$NON-NLS-1$\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_TargetPlatform, 0);\r", "-\t\t\t} else if (currentArg.equals(\"1.2\")) { //$NON-NLS-1$\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_TargetPlatform, 1);\r", "+\t\t\tif (currentArg.equals(\"1.1\"/*nonNLS*/)) {\r", "+\t\t\t\ttargetJDK = CompilerOptions.JDK1_1;\r", "+\t\t\t} else if (currentArg.equals(\"1.2\"/*nonNLS*/)) {\r", "+\t\t\t\ttargetJDK = CompilerOptions.JDK1_2;\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.targetJDK\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.targetJDK\"/*nonNLS*/,currentArg));\r", "-\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.repetition\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.repetition\"/*nonNLS*/,currentArg));\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.repetition\",currentArg)); //$NON-NLS-1$\r", "-\t\t\t}\r", "-\t\t\tmode = Default;\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (mode == InsideSource){\r", "-\t\t\tif (currentArg.equals(\"1.3\")) { //$NON-NLS-1$\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_Source, 0);\r", "-\t\t\t} else if (currentArg.equals(\"1.4\")) { //$NON-NLS-1$\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_Source, 1);\r", "-\t\t\t} else {\r", "-\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.source\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.repetition\"/*nonNLS*/,currentArg));\r", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.directoryNotExist\",currentArg)); //$NON-NLS-1$\r", "+\t\t\tthrow new InvalidInputException(Main.bind(\"configure.directoryNotExist\"/*nonNLS*/,currentArg));\r", "-\t\t\tfinder.find(dir, \".JAVA\", verbose); //$NON-NLS-1$\r", "+\t\t\tfinder.find(dir, \".JAVA\"/*nonNLS*/, verbose);\r", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.IOError\",currentArg));\t\t //$NON-NLS-1$\r", "+\t\t\tthrow new InvalidInputException(Main.bind(\"configure.IOError\"/*nonNLS*/,currentArg));\t\t\r", "-\tif(noWarn){\r", "-\t\tfor(int i = 0; i < problemOption.length ; i++){\r", "-\t\t\tfor(int j = 0 ; j < options.length ; j++){\r", "-\t\t\t\tif(options[j].getID().equals(problemOption[i]) && options[j].getValueIndex() == 1){\r", "-\t\t\t\t\toptions[j].setValueIndex(2);\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\t\tout.println(Main.bind(\"configure.version\",this.versionID)); //$NON-NLS-1$\r", "+\t\tout.println(Main.bind(\"configure.version\"/*nonNLS*/,this.versionID));\r", "-\t\tproceed = false;\r", "-\t\tproceed = false;\r", "-\t\tString classProp = System.getProperty(\"LFclasspath\"); //$NON-NLS-1$\r", "+\t\tString classProp = System.getProperty(\"LFclasspath\"/*nonNLS*/);\r", "-\t\t\tout.println(Main.bind(\"configure.noClasspath\")); //$NON-NLS-1$\r", "-\t\t\tclassProp = \".\"; //$NON-NLS-1$\r", "+\t\t\tout.println(Main.bind(\"configure.noClasspath\"/*nonNLS*/));\r", "+\t\t\tclassProp = \".\"/*nonNLS*/;\r", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incorrectClasspath\",classpaths[i])); //$NON-NLS-1$\r", "+\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incorrectClasspath\"/*nonNLS*/,classpaths[i]));\r", "-\t\tdestinationPath = System.getProperty(\"user.dir\"); //$NON-NLS-1$\r", "-\t} else if (\"none\".equals(destinationPath)) { //$NON-NLS-1$\r", "+\t\tdestinationPath = System.getProperty(\"user.dir\"/*nonNLS*/);\r", "+\t} else if (\"none\"/*nonNLS*/.equals(destinationPath)) {\r", "-\t\tthrow new InvalidInputException(Main.bind(\"configure.noSource\")); //$NON-NLS-1$\r", "+\t\tthrow new InvalidInputException(Main.bind(\"configure.noSource\"/*nonNLS*/));\r", "-\t\t\tthrow new InvalidInputException(Main.bind(\"configure.cannotOpenLog\")); //$NON-NLS-1$\r", "+\t\t\tthrow new InvalidInputException(Main.bind(\"configure.cannotOpenLog\"/*nonNLS*/));\r", "-\r"]}], "num": 38089}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d58b7a9e1113e33a14e9c9ea5652e95f", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bd3e25d3d44d0d26e3f8925153a9fa2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public int matchLevel(AstNode node, boolean resolve)", "signatureAfterChange": "\r public int matchLevel(AstNode node)", "diff": ["+ */\r", "+public int matchLevel(AstNode node) {\r", "+\tif (node instanceof NameReference) {\r", "+\t\tif (this.matches((NameReference)node, false)) {\r", "+\t\t\treturn POSSIBLE_MATCH; // always need to resolve name reference\r", "+\t\t} else {\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\t} else if (node instanceof ImportReference) {\r", "+\t\tif (this.matches((ImportReference)node, false)) {\r", "+\t\t\treturn POSSIBLE_MATCH;\r", "+\t\t} else {\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\t} else {\r", "+\t\treturn super.matchLevel(node);\r", "+\t}\r", "+}\r", "- */\r", "-public int matchLevel(AstNode node, boolean resolve) {\r", "-\tif (node instanceof TypeReference) {\r", "-\t\treturn this.matchLevel((TypeReference)node, resolve);\r", "-\t} else if (node instanceof NameReference) {\r", "-\t\treturn this.matchLevel((NameReference)node, resolve);\r", "-\t} else if (node instanceof ImportReference) {\r", "-\t\treturn this.matchLevel((ImportReference)node, resolve);\r", "-\t}\r", "-\treturn IMPOSSIBLE_MATCH;\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7096e50cf48fdc1fe44697696f21de28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public int matchLevel(AstNode node, boolean resolve)", "signatureAfterChange": "\r public int matchLevel(AstNode node)", "diff": ["+ */\r", "+public int matchLevel(AstNode node) {\r", "+\tif (node instanceof NameReference) {\r", "+\t\tif (this.matches((NameReference)node, false)) {\r", "+\t\t\treturn POSSIBLE_MATCH; // always need to resolve name reference\r", "+\t\t} else {\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\t} else if (node instanceof ImportReference) {\r", "+\t\tif (this.matches((ImportReference)node, false)) {\r", "+\t\t\treturn POSSIBLE_MATCH;\r", "+\t\t} else {\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\t} else {\r", "+\t\treturn super.matchLevel(node);\r", "+\t}\r", "+}\r", "- */\r", "-public int matchLevel(AstNode node, boolean resolve) {\r", "-\tif (node instanceof TypeReference) {\r", "-\t\treturn this.matchLevel((TypeReference)node, resolve);\r", "-\t} else if (node instanceof NameReference) {\r", "-\t\treturn this.matchLevel((NameReference)node, resolve);\r", "-\t} else if (node instanceof ImportReference) {\r", "-\t\treturn this.matchLevel((ImportReference)node, resolve);\r", "-\t}\r", "-\treturn IMPOSSIBLE_MATCH;\r", "-}\r"]}], "num": 69776}
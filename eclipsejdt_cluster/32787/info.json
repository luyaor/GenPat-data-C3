{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cba610a9dd62bc056bf3ba60946c0f71", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b5395cd32044daaa1a212696e9c0314", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "7511ce8ac2a616c416b32731f4d10587027e3f25", "commitAfterChange": "71d14c28198258a4d6a7c5df6309a1aa1f387bf3", "methodNumberBeforeChange": 508, "methodNumberAfterChange": 508, "signatureBeforeChange": " \t \tpublic void testClone()", "signatureAfterChange": " \t \tpublic void testClone()", "diff": ["-\t\tAST newAST;", "-\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "-\t\t\tnewAST = AST.newAST2();", "-\t\t} else {", "-\t\t\tnewAST = AST.newAST3();", "-\t\t}", "+\t\tAST newAST = AST.newAST(ast.apiLevel());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e1b46decdd64f91720a3029105d076c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "7511ce8ac2a616c416b32731f4d10587027e3f25", "commitAfterChange": "71d14c28198258a4d6a7c5df6309a1aa1f387bf3", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": " \tvoid genericPropertyTest(ASTNode node, Property prop)", "signatureAfterChange": " \tvoid genericPropertyTest(ASTNode node, Property prop)", "diff": ["-\t\t\tAST newAST;", "-\t\t\tif (node.getAST().apiLevel() == AST.LEVEL_2_0) {", "-\t\t\t\tnewAST = AST.newAST2();", "-\t\t\t} else {", "-\t\t\t\tnewAST = AST.newAST3();", "-\t\t\t}", "+\t\t\tAST newAST = AST.newAST(node.getAST().apiLevel());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f6868fe2cba3c37aac90ed5ace688f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeleteResourceElementsOperation.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \tprivate void deletePackageFragment(IPackageFragment frag)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r private void deletePackageFragment(IPackageFragment frag)\r \tthrows JavaModelException", "diff": ["+ */\r", "+private void deletePackageFragment(IPackageFragment frag)\r", "+\tthrows JavaModelException {\r", "+\tIResource res = frag.getCorrespondingResource();\r", "+\tif (res != null && res.getType() == IResource.FOLDER) {\r", "+\t\t// collect the children to remove\r", "+\t\tIJavaElement[] childrenOfInterest = frag.getChildren();\r", "+\t\tif (childrenOfInterest.length > 0) {\r", "+\t\t\tIResource[] resources = new IResource[childrenOfInterest.length];\r", "+\t\t\t// remove the children\r", "+\t\t\tfor (int i = 0; i < childrenOfInterest.length; i++) {\r", "+\t\t\t\tresources[i] = childrenOfInterest[i].getCorrespondingResource();\r", "+\t\t\t}\r", "+\t\t\tdeleteResources(resources, fForce);\r", "+\t\t}\r", "-\t */\r", "-\tprivate void deletePackageFragment(IPackageFragment frag)\r", "-\t\tthrows JavaModelException {\r", "-\t\tIResource res = frag.getCorrespondingResource();\r", "-\t\tif (res != null && res.getType() == IResource.FOLDER) {\r", "-\t\t\t// collect the children to remove\r", "-\t\t\tIJavaElement[] childrenOfInterest;\r", "-\t\t\tif (frag.getKind() == IPackageFragmentRoot.K_SOURCE) {\r", "-\t\t\t\tchildrenOfInterest = frag.getCompilationUnits();\r", "-\t\t\t} else { // K_BINARY\r", "-\t\t\t\tchildrenOfInterest = frag.getClassFiles();\r", "-\t\t\t}\r", "-\t\t\tif (childrenOfInterest.length > 0) {\r", "-\t\t\t\tIResource[] resources = new IResource[childrenOfInterest.length];\r", "-\t\t\t\t// remove the children\r", "-\t\t\t\tfor (int i = 0; i < childrenOfInterest.length; i++) {\r", "-\t\t\t\t\tresources[i] = childrenOfInterest[i].getCorrespondingResource();\r", "-\t\t\t\t}\r", "-\t\t\t\tdeleteResources(resources, fForce);\r", "-\t\t\t}\r", "-\r", "-\t\t\t// Discard non-java resources\r", "-\t\t\tObject[] nonJavaResources = frag.getNonJavaResources();\r", "-\t\t\tint actualResourceCount = 0;\r", "-\t\t\tfor (int i = 0, max = nonJavaResources.length; i < max; i++) {\r", "-\t\t\t\tif (nonJavaResources[i] instanceof IResource)\r", "-\t\t\t\t\tactualResourceCount++;\r", "-\t\t\t}\r", "-\t\t\tIResource[] actualNonJavaResources = new IResource[actualResourceCount];\r", "-\t\t\tfor (int i = 0, max = nonJavaResources.length, index = 0; i < max; i++) {\r", "-\t\t\t\tif (nonJavaResources[i] instanceof IResource)\r", "-\t\t\t\t\tactualNonJavaResources[index++] = (IResource) nonJavaResources[i];\r", "-\t\t\t}\r", "-\t\t\tdeleteResources(actualNonJavaResources, fForce);\r", "-\r", "-\t\t\t// remove the folder if it is empty\r", "-\t\t\tIResource[] members;\r", "-\t\t\ttry {\r", "-\t\t\t\tmembers = ((IFolder) res).members();\r", "-\t\t\t} catch (CoreException ce) {\r", "-\t\t\t\tthrow new JavaModelException(ce);\r", "-\t\t\t}\r", "-\t\t\tif (members.length == 0) {\r", "-\t\t\t\tdeleteEmptyPackageFragment(frag, fForce);\r", "-\t\t\t}\r", "+\t\t// Discard non-java resources\r", "+\t\tObject[] nonJavaResources = frag.getNonJavaResources();\r", "+\t\tint actualResourceCount = 0;\r", "+\t\tfor (int i = 0, max = nonJavaResources.length; i < max; i++){\r", "+\t\t\tif (nonJavaResources[i] instanceof IResource) actualResourceCount++;\r", "+\t\t}\r", "+\t\tIResource[] actualNonJavaResources = new IResource[actualResourceCount];\r", "+\t\tfor (int i = 0, max = nonJavaResources.length, index = 0; i < max; i++){\r", "+\t\t\tif (nonJavaResources[i] instanceof IResource) actualNonJavaResources[index++] = (IResource)nonJavaResources[i];\r", "+\t\t}\r", "+\t\tdeleteResources(actualNonJavaResources, fForce);\r", "+\t\t\r", "+\t\t// remove the folder if it is empty\r", "+\t\tIResource[] members;\r", "+\t\ttry {\r", "+\t\t\tmembers = ((IFolder) res).members();\r", "+\t\t} catch (CoreException ce) {\r", "+\t\t\tthrow new JavaModelException(ce);\r", "+\t\t}\r", "+\t\tif (members.length == 0) {\r", "+\t\t\tdeleteEmptyPackageFragment(frag, fForce);\r", "+}\r"]}], "num": 32787}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e628c74fa894fc943ffaafc2e1b6a49", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0bcd272cce9e5435c5f4ea705af9318", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BuildpathTests.java", "commitBeforeChange": "bbf4c65896774d7094a1b0af184fa5e65fff430e", "commitAfterChange": "88a272a79e1a01de59a7879ee7d861a289fe8315", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void testIncompatibleJdkLEvelOnWksp() throws JavaModelException", "signatureAfterChange": " public void testIncompatibleJdkLEvelOnWksp() throws JavaModelException", "diff": ["-\t\tthis.abortOnFailure = false; // NOT sure this test will pass on all releng boxes => do not abort on failures", "-\t\tStringBuffer buffer = new StringBuffer();", "-\t\tfor (int i = 0, max = classlibs.length; i < max; i++) {", "+\t\tList expectedProblems = new ArrayList();", "+\t\tint max = classlibs.length;", "+\t\tfor (int i = 0; i < max; i++) {", "-\t\t\t\tif (i>0) buffer.append('\\n');", "-\t\t\t\tbuffer.append(getJdkLevelProblem(wkspRuntime, path, IMarker.SEVERITY_WARNING));", "+\t\t\t\texpectedProblems.add(getJdkLevelProblem(wkspRuntime, path, IMarker.SEVERITY_WARNING));", "-", "-\t\texpectingProblemsFor(", "-\t\t\tprojectPath,", "-\t\t\tString.valueOf(buffer)", "-\t\t);", "+\t\texpectingProblemsFor(projectPath, expectedProblems);", "-\t\tbuffer = new StringBuffer();", "-\t\tfor (int i = 0, max = classlibs.length; i < max; i++) {", "+\t\texpectedProblems = new ArrayList();", "+\t\tfor (int i = 0; i < max; i++) {", "-\t\t\t\tif (i>0) buffer.append('\\n');", "-\t\t\t\tbuffer.append(getJdkLevelProblem(wkspRuntime, path, IMarker.SEVERITY_ERROR));", "+\t\t\t\texpectedProblems.add(getJdkLevelProblem(wkspRuntime, path, IMarker.SEVERITY_ERROR));", "-", "-\t\texpectingProblemsFor(", "-\t\t\tprojectPath,", "-\t\t\t\"Problem : The project cannot be built until build path errors are resolved [ resource : </Project> range : <-1,-1> category : <10> severity : <2>]\\n\" +", "-\t\t\tString.valueOf(buffer)", "-\t\t);", "+\t\texpectedProblems.add(\"Problem : The project cannot be built until build path errors are resolved [ resource : </Project> range : <-1,-1> category : <10> severity : <2>]\");", "+\t\texpectingProblemsFor(projectPath, expectedProblems);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7f15e4034ad2dce4b58e47d3361a9a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/BuildpathTests.java", "commitBeforeChange": "bbf4c65896774d7094a1b0af184fa5e65fff430e", "commitAfterChange": "88a272a79e1a01de59a7879ee7d861a289fe8315", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void testIncompatibleJdkLEvelOnProject() throws JavaModelException", "signatureAfterChange": " public void testIncompatibleJdkLEvelOnProject() throws JavaModelException", "diff": ["-\tthis.abortOnFailure = false; // NOT sure this test will pass on releng boxes => do not abort on failures", "-\tStringBuffer buffer = new StringBuffer();", "-\tfor (int i = 0, max = classlibs.length; i < max; i++) {", "+\tint max = classlibs.length;", "+\tList expectedProblems = new ArrayList();", "+\tfor (int i = 0; i < max; i++) {", "-\t\t\tif (i>0) buffer.append('\\n');", "-\t\t\tbuffer.append(getJdkLevelProblem(projectRuntime, path, IMarker.SEVERITY_WARNING));", "+\t\t\texpectedProblems.add(getJdkLevelProblem(projectRuntime, path, IMarker.SEVERITY_WARNING));", "-", "-\texpectingProblemsFor(", "-\t\tprojectPath,", "-\t\tString.valueOf(buffer)", "-\t);", "+\texpectingProblemsFor(projectPath, expectedProblems);", "-\tbuffer = new StringBuffer();", "-\tfor (int i = 0, max = classlibs.length; i < max; i++) {", "+\texpectedProblems = new ArrayList();", "+\tfor (int i = 0; i < max; i++) {", "-\t\t\tif (i>0) buffer.append('\\n');", "-\t\t\tbuffer.append(getJdkLevelProblem(projectRuntime, path, IMarker.SEVERITY_ERROR));", "+\t\t\texpectedProblems.add(getJdkLevelProblem(projectRuntime, path, IMarker.SEVERITY_ERROR));", "-\texpectingProblemsFor(", "-\t\tprojectPath,", "-\t\t\"Problem : The project cannot be built until build path errors are resolved [ resource : </Project> range : <-1,-1> category : <10> severity : <2>]\\n\" +", "-\t\tString.valueOf(buffer)", "-\t);", "+\texpectedProblems.add(\"Problem : The project cannot be built until build path errors are resolved [ resource : </Project> range : <-1,-1> category : <10> severity : <2>]\");", "+\texpectingProblemsFor(projectPath, expectedProblems);"]}], "num": 28040}
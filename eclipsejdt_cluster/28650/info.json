{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e1ef2ac70c156bf95a834bba01b34d2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53281d882b064b0787163c12bfa16847", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "2483ac09a8125d318f0d65ce74d17599684aee53", "commitAfterChange": "7145bdca11a91565ab60b6927646ef17342a693f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected INameEnvironment[] getClassLibs()", "signatureAfterChange": " protected INameEnvironment[] getClassLibs()", "diff": ["-\tint length = this.classpaths.length;", "-\tINameEnvironment[] classLibs = new INameEnvironment[length];", "-\tfor (int i = 0; i < length; i++) {", "-\t\tString classpath = this.classpaths[i];", "-\t\tif (classpath.equals(JAVA_CLASS_LIB_PATH)) {", "-\t\t\tif (this.javaClassLib == null) {", "-\t\t\t\tthis.javaClassLib =", "-\t\t\t\t\tnew FileSystem(", "-\t\t\t\t\t\tnew String[] {classpath}, ", "-\t\t\t\t\t\tnew String[] {}, // ignore initial file names", "-\t\t\t\t\t\tencoding // default encoding", "-\t\t\t\t);", "-\t\t\t}", "-\t\t\tclassLibs[i] = this.javaClassLib;", "-\t\t} else {", "-\t\t\tclassLibs[i] =", "-\t\t\t\tnew FileSystem(", "-\t\t\t\t\tnew String[] {classpath}, ", "-\t\t\t\t\tnew String[] {}, // ignore initial file names", "-\t\t\t\t\tencoding // default encoding\t\t\t", "-\t\t\t\t);", "-\t\t}", "-\t}", "+\tINameEnvironment[] classLibs = new INameEnvironment[1];", "+\tclassLibs[0] =", "+\t\tnew FileSystem(", "+\t\t\tclasspaths, ", "+\t\t\tnew String[] {}, // ignore initial file names", "+\t\t\tencoding // default encoding\t\t\t", "+\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa1b428979e0a4efc7078549d3d0827d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public IIndex[] getIndexes()", "signatureAfterChange": " public IPath[] getIndexKeys()", "diff": ["-public IIndex[] getIndexes() {", "+public IPath[] getIndexKeys() {", "-\t// acquire the in-memory indexes on the fly", "-\tint length = this.indexKeys.length;", "-\tIIndex[] indexes = new IIndex[length];", "-\tint count = 0;", "-\tfor (int i = 0; i < length; i++){", "-\t\t// may trigger some index recreation work", "-\t\tIIndex index = indexManager.getIndex(indexKeys[i], true /*reuse index file*/, false /*do not create if none*/);", "-\t\tif (index != null) indexes[count++] = index; // only consider indexes which are ready yet", "-\t}", "-\tif (count != length) {", "-\t\tSystem.arraycopy(indexes, 0, indexes=new IIndex[count], 0, count);", "-\t}", "-\treturn indexes;", "+\treturn this.indexKeys;"]}], "num": 28650}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85c5edadb0ff5ebbd1bf12af06bdc0ec", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a53f1ffaee4d7683ba08a083c6b8a6e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "66e076adb0340dce3dd9bba5c2d65608184b470b", "commitAfterChange": "d685be15e32cbcd494b7318a189cad8a366bfa09", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\t\t\t\t \tpublic static long versionToJdkLevel(Object versionID)", "signatureAfterChange": "\t\t\t\t \tpublic static long versionToJdkLevel(Object versionID)", "diff": ["-\t\tif (VERSION_1_1.equals(versionID)) {", "-\t\t\treturn ClassFileConstants.JDK1_1;", "-\t\t} else if (VERSION_1_2.equals(versionID)) {", "-\t\t\treturn ClassFileConstants.JDK1_2;", "-\t\t} else if (VERSION_1_3.equals(versionID)) {", "-\t\t\treturn ClassFileConstants.JDK1_3;", "-\t\t} else if (VERSION_1_4.equals(versionID) || VERSION_JSR14.equals(versionID)) {", "-\t\t\treturn ClassFileConstants.JDK1_4;", "-\t\t} else if (VERSION_1_5.equals(versionID)) {", "-\t\t\treturn ClassFileConstants.JDK1_5;", "-\t\t} else if (VERSION_1_6.equals(versionID)) {", "-\t\t\treturn ClassFileConstants.JDK1_6;", "+\t\tif (versionID instanceof String) {", "+\t\t\tString version = (String) versionID;", "+\t\t\t// verification is optimized for all versions with same length and same \"1.\" prefix", "+\t\t\tif (version.length() == 3 && version.charAt(0) == '1' && version.charAt(1) == '.') {", "+\t\t\t\tswitch (version.charAt(2)) {", "+\t\t\t\t\tcase '1':", "+\t\t\t\t\t\treturn ClassFileConstants.JDK1_1;", "+\t\t\t\t\tcase '2':", "+\t\t\t\t\t\treturn ClassFileConstants.JDK1_2;", "+\t\t\t\t\tcase '3':", "+\t\t\t\t\t\treturn ClassFileConstants.JDK1_3;", "+\t\t\t\t\tcase '4':", "+\t\t\t\t\t\treturn ClassFileConstants.JDK1_4;", "+\t\t\t\t\tcase '5':", "+\t\t\t\t\t\treturn ClassFileConstants.JDK1_5;", "+\t\t\t\t\tcase '6':", "+\t\t\t\t\t\treturn ClassFileConstants.JDK1_6;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\treturn 0; // unknown", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (VERSION_JSR14.equals(versionID)) {", "+\t\t\t\treturn ClassFileConstants.JDK1_4;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1d42a0434b3f4bcccaa449185004c6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "cdf4427e144add1a36f3939b37283556991d4db8", "commitAfterChange": "75f702ac7a9f5b98d8daf289140c0d700af63244", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\t\t\tif (didSpecifyCompliance && options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\t\t\tif (didSpecifyCompliance && CompilerOptions.versionToJdkLevel((String)options.get(CompilerOptions.OPTION_Compliance)) <= ClassFileConstants.JDK1_3) {", "-", "-\t\tif (options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)", "-\t\t\t\t&& !options.get(CompilerOptions.OPTION_TargetPlatform).equals(CompilerOptions.VERSION_1_4)", "+\t\tif (CompilerOptions.versionToJdkLevel((String)options.get(CompilerOptions.OPTION_Source)) >= ClassFileConstants.JDK1_4", "+\t\t\t\t&& CompilerOptions.versionToJdkLevel((String)options.get(CompilerOptions.OPTION_TargetPlatform)) < ClassFileConstants.JDK1_4", "-\t\tif (options.get(CompilerOptions.OPTION_TargetPlatform).equals(CompilerOptions.VERSION_1_4)", "-\t\t\t\t&& !options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)", "+\t\tif (CompilerOptions.versionToJdkLevel((String)options.get(CompilerOptions.OPTION_Compliance)) < ClassFileConstants.JDK1_4", "+\t\t\t\t&& CompilerOptions.versionToJdkLevel((String)options.get(CompilerOptions.OPTION_TargetPlatform)) >= ClassFileConstants.JDK1_4", "-\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "+\t\t\tif (!didSpecifyCompliance) options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "+\t\t\tif (!didSpecifyTarget) options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "-\t\t\t  && options.get(CompilerOptions.OPTION_TargetPlatform).equals(CompilerOptions.VERSION_1_1)) {", "+\t\t\t  \t\t&& options.get(CompilerOptions.OPTION_TargetPlatform).equals(CompilerOptions.VERSION_1_1)) {"]}], "num": 9944}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e72194033903ae64e40ce4882517796", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c94acd117943dc7eab2e52bc57c237f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 37, "signatureBeforeChange": "  \tpublic String toString()", "signatureAfterChange": "  public String toString()", "diff": ["-\tpublic String toString(){", "-\t\t", "-\t\tif (this == DEAD_END){", "-\t\t\treturn \"FlowInfo.DEAD_END\"; //$NON-NLS-1$", "+public String toString(){", "+\t// PREMATURE consider printing bit fields as 0001 0001 1000 0001...", "+\tif (this == DEAD_END){", "+\t\treturn \"FlowInfo.DEAD_END\"; //$NON-NLS-1$", "+\t}", "+\tif ((this.tagBits & NULL_FLAG_MASK) != 0) {", "+\t\tif (this.extra == null) {", "+\t\t\treturn \"FlowInfo<def: \" + this.definiteInits //$NON-NLS-1$", "+\t\t\t\t+\", pot: \" + this.potentialInits  //$NON-NLS-1$", "+\t\t\t\t+ \", reachable:\" + ((this.tagBits & UNREACHABLE) == 0) //$NON-NLS-1$", "+\t\t\t\t+\", nullS1: \" + this.nullAssignmentStatusBit1 //$NON-NLS-1$", "+\t\t\t\t+\", nullS2: \" + this.nullAssignmentStatusBit2 //$NON-NLS-1$", "+\t\t\t\t+\", nullV1: \" + this.nullAssignmentValueBit1 //$NON-NLS-1$", "+\t\t\t\t+\", nullV2: \" + this.nullAssignmentValueBit2 //$NON-NLS-1$", "+\t\t\t\t+\">\"; //$NON-NLS-1$", "-\t\treturn \"FlowInfo<def: \"+ this.definiteInits //$NON-NLS-1$", "-\t\t\t+\", pot: \" + this.potentialInits  //$NON-NLS-1$", "-\t\t\t+ \", reachable:\" + ((this.reachMode & UNREACHABLE) == 0) //$NON-NLS-1$", "-\t\t\t+\", defNull: \" + this.definiteNulls  //$NON-NLS-1$", "-\t\t\t+\", defNonNull: \" + this.definiteNonNulls  //$NON-NLS-1$", "-\t\t\t+\">\"; //$NON-NLS-1$", "+\t\telse {", "+\t\t\tString def = \"FlowInfo<def:[\" + this.definiteInits, //$NON-NLS-1$", "+\t\t\t\tpot = \"], pot:[\" + this.potentialInits, //$NON-NLS-1$", "+\t\t\t\tnullS1 = \", nullS1:[\" + this.nullAssignmentStatusBit1, //$NON-NLS-1$", "+\t\t\t\tnullS2 = \"], nullS2:[\" + this.nullAssignmentStatusBit2, //$NON-NLS-1$", "+\t\t\t\tnullV1 = \"], nullV1:[\" + this.nullAssignmentValueBit1, //$NON-NLS-1$", "+\t\t\t\tnullV2 = \"], nullV2:[\" + this.nullAssignmentValueBit2; //$NON-NLS-1$", "+\t\t\tint i, ceil;", "+\t\t\tfor (i = 0, ceil = this.extra[0].length > 3 ? ", "+\t\t\t\t\t\t\t\t3 : ", "+\t\t\t\t\t\t\t\tthis.extra[0].length;", "+\t\t\t\ti < ceil; i++) {", "+\t\t\t\tdef += \",\" + this.extra[0][i]; //$NON-NLS-1$", "+\t\t\t\tpot += \",\" + this.extra[1][i]; //$NON-NLS-1$", "+\t\t\t\tnullS1 += \",\" + this.extra[2][i]; //$NON-NLS-1$", "+\t\t\t\tnullS2 += \",\" + this.extra[3][i]; //$NON-NLS-1$", "+\t\t\t\tnullV1 += \",\" + this.extra[4][i]; //$NON-NLS-1$", "+\t\t\t\tnullV2 += \",\" + this.extra[5][i]; //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tif (ceil < this.extra[0].length) {", "+\t\t\t\tdef += \",...\"; //$NON-NLS-1$", "+\t\t\t\tpot += \",...\"; //$NON-NLS-1$", "+\t\t\t\tnullS1 += \",...\"; //$NON-NLS-1$", "+\t\t\t\tnullS2 += \",...\"; //$NON-NLS-1$", "+\t\t\t\tnullV1 += \",...\"; //$NON-NLS-1$", "+\t\t\t\tnullV2 += \",...\"; //$NON-NLS-1$", "+\t\t\t}", "+\t\t\treturn def + pot ", "+\t\t\t\t+ \"], reachable:\" + ((this.tagBits & UNREACHABLE) == 0) //$NON-NLS-1$", "+\t\t\t\t+ nullS1 + nullS2 + nullV1 + nullV2", "+\t\t\t\t+ \"]>\"; //$NON-NLS-1$", "+\t\t}", "+\telse {", "+\t\tif (this.extra == null) {", "+\t\t\treturn \"FlowInfo<def: \" + this.definiteInits //$NON-NLS-1$", "+\t\t\t\t+\", pot: \" + this.potentialInits  //$NON-NLS-1$", "+\t\t\t\t+ \", reachable:\" + ((this.tagBits & UNREACHABLE) == 0) //$NON-NLS-1$", "+\t\t\t\t+\", no null info>\"; //$NON-NLS-1$", "+\t\t}", "+\t\telse {", "+\t\t\tString def = \"FlowInfo<def:[\" + this.definiteInits, //$NON-NLS-1$", "+\t\t\t\tpot = \"], pot:[\" + this.potentialInits; //$NON-NLS-1$", "+\t\t\tint i, ceil;", "+\t\t\tfor (i = 0, ceil = this.extra[0].length > 3 ? ", "+\t\t\t\t\t\t\t\t3 : ", "+\t\t\t\t\t\t\t\tthis.extra[0].length;", "+\t\t\t\ti < ceil; i++) {", "+\t\t\t\tdef += \",\" + this.extra[0][i]; //$NON-NLS-1$", "+\t\t\t\tpot += \",\" + this.extra[1][i]; //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tif (ceil < this.extra[0].length) {", "+\t\t\t\tdef += \",...\"; //$NON-NLS-1$", "+\t\t\t\tpot += \",...\"; //$NON-NLS-1$", "+\t\t\t}", "+\t\t\treturn def + pot ", "+\t\t\t\t+ \"], reachable:\" + ((this.tagBits & UNREACHABLE) == 0) //$NON-NLS-1$", "+\t\t\t\t+ \", no null info>\"; //$NON-NLS-1$", "+\t\t}", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a91a90469ef8d6b7314cf29b9a2ae23e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultCommentMapper.java", "commitBeforeChange": "e178d64eb65916b8b54353dd9e6bcf5b085bf212", "commitAfterChange": "b43b2427c7b970b1fbbb18c36881f31743b7cd83", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tint storeTrailingComments(ASTNode node, int nextStart,  boolean lastChild)", "signatureAfterChange": " \tint storeTrailingComments(ASTNode node, int nextStart,  boolean lastChild)", "diff": ["-\t\t\tthis.trailingComments.put(node, new int[] { -1, -1 });", "+\t\t\tif (++this.trailingPtr == 0) {", "+\t\t\t\tthis.trailingNodes = new ASTNode[STORAGE_INCREMENT];", "+\t\t\t\tthis.trailingIndexes = new int[STORAGE_INCREMENT][];", "+\t\t\t\tthis.lastTrailingPtr = -1;", "+\t\t\t} else if (this.trailingPtr == this.trailingNodes.length) {", "+\t\t\t\tint newLength = (this.trailingPtr*3/2)+STORAGE_INCREMENT;", "+\t\t\t\tSystem.arraycopy(this.trailingNodes, 0, this.trailingNodes = new ASTNode[newLength], 0, this.trailingPtr);", "+\t\t\t\tSystem.arraycopy(this.trailingIndexes, 0, this.trailingIndexes = new int[newLength][], 0, this.trailingPtr);", "+\t\t\t}", "+\t\t\tthis.trailingNodes[this.trailingPtr] = node;", "+\t\t\tthis.trailingIndexes[this.trailingPtr] = new int[] { -1, -1 };", "-\t\t\tthis.trailingComments.put(node, new int[] { startIdx, endIdx });", "+\t\t\tif (++this.trailingPtr == 0) {", "+\t\t\t\tthis.trailingNodes = new ASTNode[STORAGE_INCREMENT];", "+\t\t\t\tthis.trailingIndexes = new int[STORAGE_INCREMENT][];", "+\t\t\t\tthis.lastTrailingPtr = -1;", "+\t\t\t} else if (this.trailingPtr == this.trailingNodes.length) {", "+\t\t\t\tint newLength = (this.trailingPtr*3/2)+STORAGE_INCREMENT;", "+\t\t\t\tSystem.arraycopy(this.trailingNodes, 0, this.trailingNodes = new ASTNode[newLength], 0, this.trailingPtr);", "+\t\t\t\tSystem.arraycopy(this.trailingIndexes, 0, this.trailingIndexes = new int[newLength][], 0, this.trailingPtr);", "+\t\t\t}", "+\t\t\tthis.trailingNodes[this.trailingPtr] = node;", "+\t\t\tint[] nodeRange = new int[] { startIdx, endIdx };", "+\t\t\tthis.trailingIndexes[this.trailingPtr] = nodeRange;", "+\t\t\t// Compute new extended end", "+\t\t\t// Look for children unresolved extended end", "+\t\t\tASTNode previousNode = node;", "+\t\t\tint ptr = this.trailingPtr - 1; // children extended end were stored before", "+\t\t\tunresolved: while (ptr >= 0) {", "+\t\t\t\tint[] range = this.trailingIndexes[ptr];", "+\t\t\t\tif (range[0] != -1 || range[1] != -1) break; // there's no more unresolved nodes", "+\t\t\t\tASTNode unresolved = this.trailingNodes[ptr];", "+\t\t\t\tif (previousNode != unresolved.getParent()) break; // we're no longer in node ancestor hierarchy", "+\t\t\t\tthis.trailingIndexes[ptr] = nodeRange;", "+\t\t\t\tpreviousNode = unresolved;", "+\t\t\t\tptr--; // get previous node", "+\t\t\t}", "+\t\t\t// Remove remaining unresolved nodes", "+\t\t\tif (ptr > this.lastTrailingPtr) {", "+\t\t\t\tint offset = ptr - this.lastTrailingPtr;", "+\t\t\t\tfor (int i=ptr+1; i<=this.trailingPtr; i++) {", "+\t\t\t\t\tthis.trailingNodes[i-offset] = this.trailingNodes[i];", "+\t\t\t\t\tthis.trailingIndexes[i-offset] = this.trailingIndexes[i];", "+\t\t\t\t}", "+\t\t\t\tthis.trailingPtr -= offset;", "+\t\t\t}", "+\t\t\tthis.lastTrailingPtr = this.trailingPtr;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d843f85c52cdce6b68b70c6f54594ea6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tfinal private void markAsDefinitelyNotAssigned(int position)", "signatureAfterChange": " public void markAsComparedEqualToNull(LocalVariableBinding local)", "diff": ["+// REVIEW javadoc policy?", "+public void markAsComparedEqualToNull(LocalVariableBinding local) {", "+\t// protected from non-object locals in calling methods", "+\tif (this != DEAD_END) {", "+\t\tthis.tagBits |= NULL_FLAG_MASK;", "+\t\tint position;", "+\t\tlong mask, unknownAssigned;", "+\t\t// position is zero-based", "+\t\tif ((position = local.id + this.maxFieldCount) < BitCacheSize) {", "+\t\t\t// use bits", "+\t\t\tmask = 1L << position;", "+\t\t\tif ((mask & // leave assigned null unchanged", "+\t\t\t\t\tthis.nullAssignmentStatusBit1 &", "+\t\t\t\t\t~this.nullAssignmentStatusBit2 &", "+\t\t\t\t\tthis.nullAssignmentValueBit1 &", "+\t\t\t\t\t~this.nullAssignmentValueBit2) == 0) {", "+\t\t\t\tunknownAssigned = this.nullAssignmentStatusBit1 &", "+\t\t\t\t\t~this.nullAssignmentStatusBit2 &", "+\t\t\t\t\tthis.nullAssignmentValueBit1 &", "+\t\t\t\t\tthis.nullAssignmentValueBit2;", "+\t\t\t\t// set protected", "+\t\t\t\tthis.nullAssignmentStatusBit2 |= mask;", "+\t\t\t\tthis.nullAssignmentStatusBit1 &= (mask = ~mask);", "+\t\t\t\t// protected is null", "+\t\t\t\tthis.nullAssignmentValueBit1 &= mask | ~unknownAssigned;", "+\t\t\t\tthis.nullAssignmentValueBit2 &= mask;", "+\t\t\t\t// clear potential anything but null", "+\t\t\t\t// REVIEW co\ufffdts relatifs d'un assignment et d'une n\ufffdgation?", "+\t\t\t\tif (coverageTestFlag && coverageTestId == 24) {", "+\t\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (coverageTestFlag && coverageTestId == 25) {", "+\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "+\t\t\t}", "+\t\t} ", "+\t\telse {", "+\t\t\t// use extra vector", "+\t\t\tint vectorIndex = (position / BitCacheSize) - 1;", "+\t\t\tmask = 1L << (position % BitCacheSize);", "+\t\t\tif (this.extra == null) {", "+\t\t\t\tint length = vectorIndex + 1;", "+\t\t\t\tthis.extra = new long[extraLength][];", "+\t\t\t\tfor (int j = 0; j < extraLength; j++) {", "+\t\t\t\t\tthis.extra[j] = new long[length ];", "+\t\t\t\t}", "+\t\t\t\tif (coverageTestFlag && coverageTestId == 26) {", "+\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 26\"); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse {", "+\t\t\t\tint oldLength;", "+\t\t\t\tif (vectorIndex >= (oldLength = this.extra[0].length)) {", "+\t\t\t\t\tint newLength = vectorIndex + 1;", "+\t\t\t\t\tfor (int j = 0; j < extraLength; j++) {", "+\t\t\t\t\t\tSystem.arraycopy(this.extra[j], 0, ", "+\t\t\t\t\t\t\t(this.extra[j] = new long[newLength]), 0,", "+\t\t\t\t\t\t\toldLength);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (coverageTestFlag && coverageTestId == 27) {", "+\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 27\"); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif ((mask &", "+\t\t\t\t\tthis.extra[2][vectorIndex] &", "+\t\t\t\t\t~this.extra[3][vectorIndex] &", "+\t\t\t\t\tthis.extra[4][vectorIndex] &", "+\t\t\t\t\t~this.extra[5][vectorIndex]) == 0) {", "+\t\t\t\tunknownAssigned = this.extra[2][vectorIndex] &", "+\t\t\t\t\t~this.extra[3][vectorIndex] &", "+\t\t\t\t\tthis.extra[4][vectorIndex] &", "+\t\t\t\t\tthis.extra[5][vectorIndex];", "+\t\t\t\tthis.extra[3][vectorIndex]\t |= mask;", "+\t\t\t\tthis.extra[2][vectorIndex] &= (mask = ~mask);", "+\t\t\t\tthis.extra[4][vectorIndex] &= mask | ~unknownAssigned;", "+\t\t\t\tthis.extra[5][vectorIndex]\t&= mask;", "+\t\t\t\tif (coverageTestFlag && coverageTestId == 28) {", "+\t\t\t\t\tthis.extra[5][vectorIndex] = ~0;", "+\t\t\t\t}", "+\t\t\t}", "+}", "-\t */", "-\tfinal private void markAsDefinitelyNotAssigned(int position) {", "-\t\tif (this != DEAD_END) {", "-\t", "-\t\t\t// position is zero-based", "-\t\t\tif (position < BitCacheSize) {", "-\t\t\t\t// use bits", "-\t\t\t\tlong mask;", "-\t\t\t\tdefiniteInits &= ~(mask = 1L << position);", "-\t\t\t\tpotentialInits &= ~mask;", "-\t\t\t\tdefiniteNulls &= ~mask;", "-\t\t\t\tdefiniteNonNulls &= ~mask;", "-\t\t\t} else {", "-\t\t\t\t// use extra vector", "-\t\t\t\tint vectorIndex = (position / BitCacheSize) - 1;", "-\t\t\t\tif (extraDefiniteInits == null) {", "-\t\t\t\t\treturn; // nothing to do, it was not yet set ", "-\t\t\t\t}", "-\t\t\t\t// might need to grow the arrays", "-\t\t\t\tif (vectorIndex >= extraDefiniteInits.length) {", "-\t\t\t\t\treturn; // nothing to do, it was not yet set ", "-\t\t\t\t}", "-\t\t\t\tlong mask;", "-\t\t\t\textraDefiniteInits[vectorIndex] &= ~(mask = 1L << (position % BitCacheSize));", "-\t\t\t\textraPotentialInits[vectorIndex] &= ~mask;", "-\t\t\t\textraDefiniteNulls[vectorIndex] &= ~mask;", "-\t\t\t\textraDefiniteNonNulls[vectorIndex] &= ~mask;", "-\t\t\t}", "-\t\t}", "-\t}"]}], "num": 64547}
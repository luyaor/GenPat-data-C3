{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57bf90dde158f897b9fa1fcdc0d1fc14", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "326f283f07ad1638d705c28be520f5d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "5a12a220bc147ceb34370c89306997df47624c96", "commitAfterChange": "2a31afdf467fbea6343929950855b2cce0d4c7fa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {\r", "-\r", "-\t// here requires to generate a sequence of finally blocks invocations depending corresponding\r", "+public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {\t// here requires to generate a sequence of finally blocks invocations depending corresponding\r", "+\tboolean hasValueToSave = expression != null && expression.constant == NotAConstant;\r", "-\t\t\tif (subroutines == null){\r", "-\t\t\t\tsubroutines = new AstNode[maxSub];\r", "+\t\t\tif (this.subroutines == null){\r", "+\t\t\t\tthis.subroutines = new AstNode[maxSub];\r", "-\t\t\t\tSystem.arraycopy(subroutines, 0, (subroutines = new AstNode[maxSub *= 2]), 0, subIndex); // grow\r", "+\t\t\t\tSystem.arraycopy(this.subroutines, 0, (this.subroutines = new AstNode[maxSub *= 2]), 0, subIndex); // grow\r", "-\t\t\tsubroutines[subIndex++] = sub;\r", "+\t\t\tthis.subroutines[subIndex++] = sub;\r", "+\r", "-\t\t} else {\r", "-\t\t\tif ((expression != null) && (node instanceof TryStatement)) {\r", "-\t\t\t\tsaveValueNeeded = true;\r", "-\t\t\t} else {\r", "-\t\t\t\tif (traversedContext instanceof InitializationFlowContext) {\r", "-\t\t\t\t\tcurrentScope.problemReporter().cannotReturnInInitializer(this);\r", "-\t\t\t\t\treturn FlowInfo.DeadEnd;\r", "+\r", "+\t\t} else if (node instanceof TryStatement && hasValueToSave) {\r", "+\t\t\t\tif (this.saveValueVariable == null){ // closest subroutine secret variable is used\r", "+\t\t\t\t\tprepareSaveValueLocation((TryStatement)node);\r", "-\t\t\t}\r", "+\t\t\t\tsaveValueNeeded = true;\r", "+\r", "+\t\t} else if (traversedContext instanceof InitializationFlowContext) {\r", "+\t\t\t\tcurrentScope.problemReporter().cannotReturnInInitializer(this);\r", "+\t\t\t\treturn FlowInfo.DeadEnd;\r", "+\r", "-\t// no need to save a constant value\r", "-\tif((expression != null) && (expression.constant != NotAConstant)){\r", "-\t\tsaveValueNeeded = false;\r", "-\t}\r", "-\t\tprepareSaveValueLocation(currentScope);\r", "+\t\tif (this.saveValueVariable != null) {\r", "+\t\t\tthis.saveValueVariable.used = true;\r", "+\t\t}\r", "+\t\tthis.saveValueVariable = null;\r", "-\t\t\texpression.bits |= ValueForReturnMASK;\r", "+\t\t\tthis.expression.bits |= ValueForReturnMASK;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56725a0424b6f766a1cedf67035d10d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IfStatement.java", "commitBeforeChange": "cb764d0f635c3538feb2f431a07bf4883bc5e3de", "commitAfterChange": "2fc42eeb502a121cefe1f87a9fd2e92cf7c57bec", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\tif (((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0) && ", "+\t\t\t((thenFlowInfo.tagBits & FlowInfo.UNREACHABLE) != 0)) {", "+\t\t// Mark then block as unreachable", "+\t\t// No need if the whole if-else construct itself lies in unreachable code", "+\t\tthis.bits |= ASTNode.IsThenStatementUnreachable;", "+\t} else if (((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0) &&", "+\t\t\t((elseFlowInfo.tagBits & FlowInfo.UNREACHABLE) != 0)) {", "+\t\t// Mark else block as unreachable", "+\t\t// No need if the whole if-else construct itself lies in unreachable code", "+\t\tthis.bits |= ASTNode.IsElseStatementUnreachable;", "+\t}", "-\t\tif (isConditionOptimizedFalse) {", "+\t\tif (isConditionOptimizedFalse || ((this.bits & ASTNode.IsThenStatementUnreachable) != 0)) {", "+\t\t\t} else {", "+\t\t\t\t// its a known coding pattern which should be tolerated by dead code analysis", "+\t\t\t\t// according to isKnowDeadCodePattern()", "+\t\t\t\tthis.bits &= ~ASTNode.IsThenStatementUnreachable;", "-\t    // signal else clause unnecessarily nested, tolerate else-if code pattern", "-\t    if (thenFlowInfo == FlowInfo.DEAD_END", "-\t            && (this.bits & IsElseIfStatement) == 0 \t// else of an else-if", "-\t            && !(this.elseStatement instanceof IfStatement)) {", "-\t        currentScope.problemReporter().unnecessaryElse(this.elseStatement);", "-\t    }", "+\t\t// signal else clause unnecessarily nested, tolerate else-if code pattern", "+\t\tif (thenFlowInfo == FlowInfo.DEAD_END", "+\t\t\t\t&& (this.bits & IsElseIfStatement) == 0 \t// else of an else-if", "+\t\t\t\t&& !(this.elseStatement instanceof IfStatement)) {", "+\t\t\tcurrentScope.problemReporter().unnecessaryElse(this.elseStatement);", "+\t\t}", "-\t\tif (isConditionOptimizedTrue) {", "+\t\tif (isConditionOptimizedTrue || ((this.bits & ASTNode.IsElseStatementUnreachable) != 0)) {", "+\t\t\t} else {", "+\t\t\t\t// its a known coding pattern which should be tolerated by dead code analysis", "+\t\t\t\t// according to isKnowDeadCodePattern()", "+\t\t\t\tthis.bits &= ~ASTNode.IsElseStatementUnreachable;", "-\tFlowInfo mergedInfo = FlowInfo.mergedOptimizedBranches(", "+\tFlowInfo mergedInfo = FlowInfo.mergedOptimizedBranchesIfElse(", "-\t\ttrue /*if(true){ return; }  fake-reachable(); */);", "+\t\ttrue /*if(true){ return; }  fake-reachable(); */,", "+\t\tflowInfo);"]}], "num": 21273}
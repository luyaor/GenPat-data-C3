{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b960aa18f59b94479e8f6eefdb16e0e6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19c93b7a4e897e0072c7ce65d34567ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "7365eb3c9bc3c4e2bcff5eac5d972246c40d599d", "commitAfterChange": "dd4e66116fa81ff4f74deaa928460684d87fc74d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t\tprivate void useNullHints(long nullHints, TypeBinding[] boundTypes, LookupEnvironment environment)", "signatureAfterChange": " \t\tprivate void useNullHints(long nullHints, TypeBinding[] boundTypes, LookupEnvironment environment)", "diff": ["-\t\t\tAnnotationBinding[] annot = environment.nullAnnotationsFromTagBits(nullHints);", "-\t\t\tif (annot != null) {", "-\t\t\t\t// only get here if exactly one of @NonNull or @Nullable was hinted; now apply this hint:", "+\t\t\tif (nullHints == TagBits.AnnotationNullMASK) {", "+\t\t\t\t// on contradiction remove null type annotations", "-\t\t\t\t\tboundTypes[i] = environment.createAnnotatedType(boundTypes[i], annot);", "+\t\t\t\t\tboundTypes[i] = boundTypes[i].unannotated();", "+\t\t\t} else {", "+\t\t\t\tAnnotationBinding[] annot = environment.nullAnnotationsFromTagBits(nullHints);", "+\t\t\t\tif (annot != null) {", "+\t\t\t\t\t// only get here if exactly one of @NonNull or @Nullable was hinted; now apply this hint:", "+\t\t\t\t\tfor (int i = 0; i < boundTypes.length; i++)", "+\t\t\t\t\t\tboundTypes[i] = environment.createAnnotatedType(boundTypes[i], annot);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cb1f1e5e2c3f7e6bfe8e53f2a4a2e16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "bc58ceae1b3691095e4db8bfcb9f2192eeaf077d", "commitAfterChange": "df9c3a401cd78995716c690f400af3a4d95f0187", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t\tpublic void setInstantiation(TypeBinding type, LookupEnvironment environment)", "signatureAfterChange": " \t\tpublic void setInstantiation(TypeBinding type, LookupEnvironment environment)", "diff": ["+\t\t}", "-\t\t\t\t// TODO check for existing instantiation and compare null annotations", "+\t\t\t\tif (this.instantiation != null) {", "+\t\t\t\t\t// sanity check:", "+\t\t\t\t\tif (!TypeBinding.equalsEquals(this.instantiation, type)) {", "+\t\t\t\t\t\tthis.instantiation = null;", "+\t\t\t\t\t\treturn; // incorporation should find the conflict and fail the inference", "+\t\t\t\t\t}", "+\t\t\t\t\tlong oldBits = this.instantiation.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\tif (oldBits != 0) {", "+\t\t\t\t\t\tlong newBits = type.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\t\tif (newBits == oldBits || newBits == 0)", "+\t\t\t\t\t\t\treturn; // no update", "+\t\t\t\t\t\tAnnotationBinding[] annot = environment.nullAnnotationsFromTagBits(newBits);", "+\t\t\t\t\t\tif (annot != null)", "+\t\t\t\t\t\t\ttype = environment.createAnnotatedType(this.instantiation, annot);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e2bc4800aed621270e8111b8834fe00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "e0ebad67303a47fa3ab9d8532c92ffc60ae916e2", "commitAfterChange": "6940f5238f5f044dc7dc7f5472f64a2c5617a365", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic ParameterizedGenericMethodBinding(MethodBinding originalMethod, TypeBinding[] typeArguments, LookupEnvironment environment)", "signatureAfterChange": " \tpublic ParameterizedGenericMethodBinding(MethodBinding originalMethod, TypeBinding[] typeArguments, LookupEnvironment environment)", "diff": ["+\t    // special case: @NonNull for a parameter that is inferred to 'null' is encoded the old way", "+\t    // because we cannot (and don't want to) add type annotations to NullTypeBinding.", "+\t    int len = this.parameters.length;", "+\t    for (int i = 0; i < len; i++) {", "+\t    \tif (this.parameters[i] == TypeBinding.NULL) {", "+\t    \t\tlong nullBits = originalMethod.parameters[i].tagBits & TagBits.AnnotationNullMASK;", "+\t    \t\tif (nullBits == TagBits.AnnotationNonNull) {", "+\t    \t\t\tif (this.parameterNonNullness == null)", "+\t    \t\t\t\tthis.parameterNonNullness = new Boolean[len];", "+\t    \t\t\tthis.parameterNonNullness[i] = Boolean.TRUE;", "+\t    \t\t}", "+\t    \t}", "+\t    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c01493b6a54f7e26410bdcf609db4686", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedMethodBinding.java", "commitBeforeChange": "26ecbd70f644b3e526f4a51dee0b94e84d57cade", "commitAfterChange": "63af609b0c4ca15a76568f63423f1cb23d7be92e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic ParameterizedMethodBinding(final ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod)", "signatureAfterChange": " \tpublic ParameterizedMethodBinding(final ParameterizedTypeBinding parameterizedDeclaringClass, MethodBinding originalMethod)", "diff": ["+", "+\t\t\t// after substitution transfer nullness information from type annotations:", "+\t\t\tif (parameterizedDeclaringClass.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {", "+\t\t\t\tlong returnNullBits = this.returnType.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\tif (returnNullBits != 0L) {", "+\t\t\t\t\tthis.tagBits &= ~TagBits.AnnotationNullMASK;", "+\t\t\t\t\tthis.tagBits |= returnNullBits;", "+\t\t\t\t}", "+\t\t\t\tint parametersLen = this.parameters.length;", "+\t\t\t\tfor (int i=0; i<parametersLen; i++) {", "+\t\t\t\t\tlong paramTagBits = this.parameters[i].tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\tif (paramTagBits != 0) {", "+\t\t\t\t\t\tif (this.parameterNonNullness == null)", "+\t\t\t\t\t\t\tthis.parameterNonNullness = new Boolean[parametersLen];", "+\t\t\t\t\t\tthis.parameterNonNullness[i] = Boolean.valueOf(paramTagBits == TagBits.AnnotationNonNull);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb3e257fc3df4de9622780d0a1f1d3b9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java", "commitBeforeChange": "7ba9ff29fe6b05ec0a2f58eaa1f5d3e68bb11101", "commitAfterChange": "427a01e331e57852efc472cca3a8360bd121fda9", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tReferenceBinding resolve()", "signatureAfterChange": " \tReferenceBinding resolve()", "diff": ["+\t\tlong nullTagBits = this.tagBits & TagBits.AnnotationNullMASK;", "+\t\t", "+\t\t\tlong superNullTagBits = resolveType.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\tif (superNullTagBits != 0L) {", "+\t\t\t\tif (nullTagBits == 0L) {", "+\t\t\t\t\tthis.tagBits |= superNullTagBits;", "+\t\t\t\t} else {", "+//\t\t\t\t\tSystem.err.println(\"TODO(stephan): report proper error: conflict binary TypeVariable vs. first bound\");", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t\tlong superNullTagBits = resolveType.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\tif (superNullTagBits != 0L) {", "+\t\t\t\t\tif (nullTagBits == 0L) {", "+\t\t\t\t\t\tthis.tagBits |= superNullTagBits;", "+\t\t\t\t\t} else {", "+//\t\t\t\t\t\tSystem.err.println(\"TODO(stephan): report proper error: conflict binary TypeVariable vs. bound \"+i);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffd3a40d38be0b908b9d7a8f27327d22", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java", "commitBeforeChange": "5499d7ab628f0d031c84d349d565b52915f502cb", "commitAfterChange": "48aaa503eb58e270f9afd7df4a85cb65e562a44f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t\tLookupEnvironment environment = scope.environment();", "+\t\t\tif (environment.usesNullTypeAnnotations() ", "+\t\t\t\t\t&& this.annotationsOnDimensions == null // don't annotate if explicit annotations are given on dimensions ...", "+\t\t\t\t\t&& ((referenceType.tagBits & TagBits.AnnotationNullMASK) == 0)  // ... or leaf type", "+\t\t\t\t\t&& this.expectedType != null) // need this to determine our action", "+\t\t\t{", "+\t\t\t\tExpression lastDim = this.dimensions[this.dimensions.length-1];", "+\t\t\t\tif (lastDim instanceof IntLiteral && ((IntLiteral) lastDim).value == 0) {", "+\t\t\t\t\tlong tagBit = this.expectedType.leafComponentType().tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\t// let new X[0] be seen as \"@NonNull X[]\", or \"@Nullable X[]\" just as expected", "+\t\t\t\t\tAnnotationBinding[] nullAnnotations = environment.nullAnnotationsFromTagBits(tagBit);", "+\t\t\t\t\tif (nullAnnotations != null)", "+\t\t\t\t\t\treferenceType = environment.createAnnotatedType(referenceType, nullAnnotations);", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 31759}
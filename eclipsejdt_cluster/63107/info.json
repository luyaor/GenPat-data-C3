{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a26bc70e3f9792ceb07ee64a36163ef6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32825be88604eefd31afda5094107e79", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "fe46c42d584fc9df798276778c11a2ce2f79d8c4", "commitAfterChange": "8904ea4393baa4ec97ffdacde82d6f35bb8add7c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public void add(IJavaProject javaProject, boolean includesPrereqProjects, HashSet visitedProjects) throws JavaModelException", "signatureAfterChange": "  public void add(IJavaProject javaProject, int includeMask, HashSet visitedProjects) throws JavaModelException", "diff": ["-public void add(IJavaProject javaProject, boolean includesPrereqProjects, HashSet visitedProjects) throws JavaModelException {", "+public void add(IJavaProject javaProject, int includeMask, HashSet visitedProjects) throws JavaModelException {", "-\t\t\t\tIPath path = entry.getPath();", "-\t\t\t\tthis.add(path, true);", "-\t\t\t\tthis.addEnclosingProjectOrJar(path);", "+\t\t\t\tIClasspathEntry rawEntry = null;", "+\t\t\t\tJavaModelManager.PerProjectInfo perProjectInfo = ((JavaProject)javaProject).getPerProjectInfo();", "+\t\t\t\tif (perProjectInfo != null && perProjectInfo.resolvedPathToRawEntries != null) {", "+\t\t\t\t\trawEntry = (IClasspathEntry) perProjectInfo.resolvedPathToRawEntries.get(entry.getPath());", "+\t\t\t\t}", "+\t\t\t\tif (rawEntry == null) break;", "+\t\t\t\tswitch (rawEntry.getEntryKind()) {", "+\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:", "+\t\t\t\t\tcase IClasspathEntry.CPE_VARIABLE:", "+\t\t\t\t\t\tif ((includeMask & APPLICATION_LIBRARIES) != 0) {", "+\t\t\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\t\t\tadd(path, true);", "+\t\t\t\t\t\t\taddEnclosingProjectOrJar(path);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IClasspathEntry.CPE_CONTAINER:", "+\t\t\t\t\t\tIClasspathContainer container = JavaCore.getClasspathContainer(rawEntry.getPath(), javaProject);", "+\t\t\t\t\t\tif (container == null) break;", "+\t\t\t\t\t\tif ((container.getKind() == IClasspathContainer.K_APPLICATION && (includeMask & APPLICATION_LIBRARIES) != 0)", "+\t\t\t\t\t\t\t\t|| (includeMask & SYSTEM_LIBRARIES) != 0) {", "+\t\t\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\t\t\tadd(path, true);", "+\t\t\t\t\t\t\taddEnclosingProjectOrJar(path);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "-\t\t\t\tif (includesPrereqProjects) {", "-\t\t\t\t\tthis.add(model.getJavaProject(entry.getPath().lastSegment()), true, visitedProjects);", "+\t\t\t\tif ((includeMask & REFERENCED_PROJECTS) != 0) {", "+\t\t\t\t\tadd(model.getJavaProject(entry.getPath().lastSegment()), includeMask, visitedProjects);", "-\t\t\t\tthis.add(entry.getPath(), true);", "+\t\t\t\tif ((includeMask & SOURCES) != 0) {", "+\t\t\t\t\tadd(entry.getPath(), true);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b70a6602529f8ecbee982e77564f214e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompilerImpl.java", "commitBeforeChange": "f6d7e4c8ebdaaf8a904962804a027a09edc0c0d3", "commitAfterChange": "30e98d6cc084dfe1b207ffb7493b2de7b6cec8c4", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 33, "signatureBeforeChange": "  \t@Override \tprotected void setPaths(ArrayList bootclasspaths, \t\t\tString sourcepathClasspathArg, \t\t\tArrayList sourcepathClasspaths, \t\t\tArrayList classpaths, \t\t\tArrayList extdirsClasspaths, \t\t\tArrayList endorsedDirClasspaths, \t\t\tString customEncoding)", "signatureAfterChange": "  \t@Override \tprotected void setPaths(ArrayList bootclasspaths, \t\t\tString sourcepathClasspathArg, \t\t\tArrayList sourcepathClasspaths, \t\t\tArrayList classpaths, \t\t\tArrayList extdirsClasspaths, \t\t\tArrayList endorsedDirClasspaths, \t\t\tString customEncoding)", "diff": ["-\t\tArrayList<FileSystem.Classpath> fileSystemClasspaths = new ArrayList<FileSystem.Classpath>();", "-\t\tEclipseFileManager javaFileManager = null;", "+\t\tArrayList<FileSystem.Classpath> fileSystemClasspaths = new ArrayList<>();", "+\t\tEclipseFileManager eclipseJavaFileManager = null;", "+\t\tJavaFileManager javaFileManager = null;", "+\t\tboolean havePlatformPaths = false;", "+\t\tboolean haveClassPaths = false;", "-\t\t\tjavaFileManager = (EclipseFileManager) this.fileManager;", "+\t\t\teclipseJavaFileManager = (EclipseFileManager) this.fileManager;", "+\t\tjavaFileManager = this.fileManager;", "-\t\tif (javaFileManager != null) {", "-\t\t\tif ((javaFileManager.flags & EclipseFileManager.HAS_ENDORSED_DIRS) == 0", "-\t\t\t\t\t&& (javaFileManager.flags & EclipseFileManager.HAS_BOOTCLASSPATH) != 0) {", "+\t\tif (eclipseJavaFileManager != null) {", "+\t\t\tif ((eclipseJavaFileManager.flags & EclipseFileManager.HAS_ENDORSED_DIRS) == 0", "+\t\t\t\t\t&& (eclipseJavaFileManager.flags & EclipseFileManager.HAS_BOOTCLASSPATH) != 0) {", "-\t\t}", "-\t\tif (location != null) {", "-\t\t\tfor (File file : location) {", "-\t\t\t\tClasspath classpath = FileSystem.getClasspath(", "-\t\t\t\t\tfile.getAbsolutePath(),", "-\t\t\t\t\tnull,", "-\t\t\t\t\tnull);", "-\t\t\t\tif (classpath != null) {", "-\t\t\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\tif (location != null) {", "+\t\t\t\tfor (File file : location) {", "+\t\t\t\t\tClasspath classpath = FileSystem.getClasspath(", "+\t\t\t\t\t\tfile.getAbsolutePath(),", "+\t\t\t\t\t\tnull,", "+\t\t\t\t\t\tnull);", "+\t\t\t\t\tif (classpath != null) {", "+\t\t\t\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\t\t\t\thavePlatformPaths = true;", "+\t\t\t\t\t}", "+\t\t} else if (javaFileManager != null) {", "+\t\t\tClasspath classpath = new ClasspathJsr199(this.fileManager, StandardLocation.PLATFORM_CLASS_PATH);", "+\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\thavePlatformPaths = true;", "-\t\tif (javaFileManager != null) {", "-\t\t\tif ((javaFileManager.flags & EclipseFileManager.HAS_EXT_DIRS) == 0", "-\t\t\t\t\t&& (javaFileManager.flags & EclipseFileManager.HAS_BOOTCLASSPATH) != 0) {", "+\t\tif (eclipseJavaFileManager != null) {", "+\t\t\tif ((eclipseJavaFileManager.flags & EclipseFileManager.HAS_EXT_DIRS) == 0", "+\t\t\t\t\t&& (eclipseJavaFileManager.flags & EclipseFileManager.HAS_BOOTCLASSPATH) != 0) {", "-\t\t} else {", "-\t\t\tlocation = null;", "-\t\t}", "-\t\tif (location != null) {", "-\t\t\tfor (File file : location) {", "-\t\t\t\tClasspath classpath = FileSystem.getClasspath(", "+\t\t\tif (location != null) {", "+\t\t\t\tfor (File file : location) {", "+\t\t\t\t\tClasspath classpath = FileSystem.getClasspath(", "+\t\t\t\t\t\t\tfile.getAbsolutePath(),", "+\t\t\t\t\t\t\tnull,", "+\t\t\t\t\t\t\tnull);", "+\t\t\t\t\tif (classpath != null) {", "+\t\t\t\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tlocation = standardJavaFileManager.getLocation(StandardLocation.CLASS_PATH);", "+\t\t\tif (location != null) {", "+\t\t\t\tfor (File file : location) {", "+\t\t\t\t\tClasspath classpath = FileSystem.getClasspath(", "-\t\t\t\tif (classpath != null) {", "-\t\t\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\t\t\tif (classpath != null) {", "+\t\t\t\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\t\t\t\thaveClassPaths = true;", "+\t\t\t\t\t}", "-\t\t}", "-\t\tif (standardJavaFileManager != null) {", "-\t\t\tlocation = standardJavaFileManager.getLocation(StandardLocation.CLASS_PATH);", "-\t\t} else {", "-\t\t\tlocation = null;", "-\t\t}", "-\t\tif (location != null) {", "-\t\t\tfor (File file : location) {", "-\t\t\t\tClasspath classpath = FileSystem.getClasspath(", "-\t\t\t\t\tfile.getAbsolutePath(),", "-\t\t\t\t\tnull,", "-\t\t\t\t\tnull);", "-\t\t\t\tif (classpath != null) {", "-\t\t\t\t\tfileSystemClasspaths.add(classpath);", "-\t\t\t\t}", "+\t\t} else if (javaFileManager != null) {", "+\t\t\tClasspath classpath = null;", "+\t\t\tif (this.fileManager.hasLocation(StandardLocation.SOURCE_PATH)) {", "+\t\t\t\tclasspath = new ClasspathJsr199(this.fileManager, StandardLocation.SOURCE_PATH);", "+\t\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\tclasspath = new ClasspathJsr199(this.fileManager, StandardLocation.CLASS_PATH);", "+\t\t\tfileSystemClasspaths.add(classpath);", "+\t\t\thaveClassPaths = true;", "-\t\t\tfileSystemClasspaths.addAll(this.handleBootclasspath(null, null));", "-\t\t\tfileSystemClasspaths.addAll(this.handleClasspath(null, null));", "+\t\t\t// It appears to be necessary to handleBootclasspath() for IBM JVMs", "+\t\t\t// in order to have visibility to java.lang.String (not present in rt.jar).", "+\t\t\t// The jars returned by StandardFileManager.getLocation(PLATFORM_CLASS_PATH) are", "+\t\t\t// not sufficient to resolve all standard classes.", "+\t\t\tif (!havePlatformPaths) fileSystemClasspaths.addAll(this.handleBootclasspath(null, null));", "+\t\t\tif (!haveClassPaths) fileSystemClasspaths.addAll(this.handleClasspath(null, null));"]}], "num": 63107}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f82fbb7adc5b503859b76a4f2eb3d9f5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99aaafcce50d0a30d70d8e51c48167af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "d9cf56fd4fe99ad8dd0ba89cbfa9dcc246ef0b9c", "commitAfterChange": "c143533d344835eae9053a7d384648906ed40cff", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 44, "signatureBeforeChange": "  protected void updateIndex(Openable element, IResourceDelta delta)", "signatureAfterChange": " \tprivate void updateIndex(Openable element, IResourceDelta delta)", "diff": ["+\tprivate void updateIndex(Openable element, IResourceDelta delta) {", "+\t", "+\t\tif (indexManager == null)", "+\t\t\treturn;", "+\t", "+\t\tswitch (element.getElementType()) {", "+\t\t\tcase IJavaElement.JAVA_PROJECT :", "+\t\t\t\tswitch (delta.getKind()) {", "+\t\t\t\t\tcase IResourceDelta.ADDED :", "+\t\t\t\t\t\tthis.indexManager.indexAll(element.getJavaProject().getProject());", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IResourceDelta.REMOVED :", "+\t\t\t\t\t\tthis.indexManager.removeIndexFamily(element.getJavaProject().getProject().getFullPath());", "+\t\t\t\t\t\t// NB: Discarding index jobs belonging to this project was done during PRE_DELETE", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t// NB: Update of index if project is opened, closed, or its java nature is added or removed", "+\t\t\t\t\t//     is done in updateCurrentDeltaAndIndex", "-", "-protected void updateIndex(Openable element, IResourceDelta delta) {", "-", "-\tif (indexManager == null)", "-\t\treturn;", "-", "-\tswitch (element.getElementType()) {", "-\t\tcase IJavaElement.JAVA_PROJECT :", "-\t\t\tswitch (delta.getKind()) {", "-\t\t\t\tcase IResourceDelta.ADDED :", "-\t\t\t\t\tthis.indexManager.indexAll(element.getJavaProject().getProject());", "+\t\t\t\tbreak;", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT :", "+\t\t\t\tif (element instanceof JarPackageFragmentRoot) {", "+\t\t\t\t\tJarPackageFragmentRoot root = (JarPackageFragmentRoot)element;", "+\t\t\t\t\t// index jar file only once (if the root is in its declaring project)", "+\t\t\t\t\tIPath jarPath = root.getPath();", "+\t\t\t\t\tswitch (delta.getKind()) {", "+\t\t\t\t\t\tcase IResourceDelta.ADDED:", "+\t\t\t\t\t\t\t// index the new jar", "+\t\t\t\t\t\t\tindexManager.indexLibrary(jarPath, root.getJavaProject().getProject());", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IResourceDelta.CHANGED:", "+\t\t\t\t\t\t\t// first remove the index so that it is forced to be re-indexed", "+\t\t\t\t\t\t\tindexManager.removeIndex(jarPath);", "+\t\t\t\t\t\t\t// then index the jar", "+\t\t\t\t\t\t\tindexManager.indexLibrary(jarPath, root.getJavaProject().getProject());", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase IResourceDelta.REMOVED:", "+\t\t\t\t\t\t\t// the jar was physically removed: remove the index", "+\t\t\t\t\t\t\tthis.indexManager.discardJobs(jarPath.toString());", "+\t\t\t\t\t\t\tthis.indexManager.removeIndex(jarPath);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "-\t\t\t\tcase IResourceDelta.REMOVED :", "-\t\t\t\t\tthis.indexManager.removeIndexFamily(element.getJavaProject().getProject().getFullPath());", "-\t\t\t\t\t// NB: Discarding index jobs belonging to this project was done during PRE_DELETE", "-\t\t\t\t\tbreak;", "-\t\t\t\t// NB: Update of index if project is opened, closed, or its java nature is added or removed", "-\t\t\t\t//     is done in updateCurrentDeltaAndIndex", "-\t\t\t}", "-\t\t\tbreak;", "-\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT :", "-\t\t\tif (element instanceof JarPackageFragmentRoot) {", "-\t\t\t\tJarPackageFragmentRoot root = (JarPackageFragmentRoot)element;", "-\t\t\t\t// index jar file only once (if the root is in its declaring project)", "-\t\t\t\tIPath jarPath = root.getPath();", "+\t\t\t\t} else {", "+\t\t\t\t\tint kind = delta.getKind();", "+\t\t\t\t\tif (kind == IResourceDelta.ADDED || kind == IResourceDelta.REMOVED) {", "+\t\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)element;", "+\t\t\t\t\t\tthis.updateRootIndex(root, root.getPackageFragment(\"\"), delta); //$NON-NLS-1$", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t// don't break as packages of the package fragment root can be indexed below", "+\t\t\tcase IJavaElement.PACKAGE_FRAGMENT :", "-\t\t\t\t\t\t// index the new jar", "-\t\t\t\t\t\tindexManager.indexLibrary(jarPath, root.getJavaProject().getProject());", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase IResourceDelta.CHANGED:", "-\t\t\t\t\t\t// first remove the index so that it is forced to be re-indexed", "-\t\t\t\t\t\tindexManager.removeIndex(jarPath);", "-\t\t\t\t\t\t// then index the jar", "-\t\t\t\t\t\tindexManager.indexLibrary(jarPath, root.getJavaProject().getProject());", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t// the jar was physically removed: remove the index", "-\t\t\t\t\t\tthis.indexManager.discardJobs(jarPath.toString());", "-\t\t\t\t\t\tthis.indexManager.removeIndex(jarPath);", "+\t\t\t\t\t\tIPackageFragment pkg = null;", "+\t\t\t\t\t\tif (element instanceof IPackageFragmentRoot) {", "+\t\t\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)element;", "+\t\t\t\t\t\t\tpkg = root.getPackageFragment(\"\"); //$NON-NLS-1$", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tpkg = (IPackageFragment)element;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tIResourceDelta[] children = delta.getAffectedChildren();", "+\t\t\t\t\t\tfor (int i = 0, length = children.length; i < length; i++) {", "+\t\t\t\t\t\t\tIResourceDelta child = children[i];", "+\t\t\t\t\t\t\tIResource resource = child.getResource();", "+\t\t\t\t\t\t\tif (resource instanceof IFile) {", "+\t\t\t\t\t\t\t\tString name = resource.getName();", "+\t\t\t\t\t\t\t\tif (Util.isJavaFileName(name)) {", "+\t\t\t\t\t\t\t\t\tOpenable cu = (Openable)pkg.getCompilationUnit(name);", "+\t\t\t\t\t\t\t\t\tthis.updateIndex(cu, child);", "+\t\t\t\t\t\t\t\t} else if (Util.isClassFileName(name)) {", "+\t\t\t\t\t\t\t\t\tOpenable classFile = (Openable)pkg.getClassFile(name);", "+\t\t\t\t\t\t\t\t\tthis.updateIndex(classFile, child);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tint kind = delta.getKind();", "-\t\t\t\tif (kind == IResourceDelta.ADDED || kind == IResourceDelta.REMOVED) {", "-\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)element;", "-\t\t\t\t\tthis.updateRootIndex(root, root.getPackageFragment(\"\"), delta); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t// don't break as packages of the package fragment root can be indexed below", "-\t\tcase IJavaElement.PACKAGE_FRAGMENT :", "-\t\t\tswitch (delta.getKind()) {", "-\t\t\t\tcase IResourceDelta.ADDED:", "-\t\t\t\tcase IResourceDelta.REMOVED:", "-\t\t\t\t\tIPackageFragment pkg = null;", "-\t\t\t\t\tif (element instanceof IPackageFragmentRoot) {", "-\t\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)element;", "-\t\t\t\t\t\tpkg = root.getPackageFragment(\"\"); //$NON-NLS-1$", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tpkg = (IPackageFragment)element;", "+\t\t\tcase IJavaElement.CLASS_FILE :", "+\t\t\t\tIFile file = (IFile) delta.getResource();", "+\t\t\t\tIJavaProject project = element.getJavaProject();", "+\t\t\t\tIPath binaryFolderPath = element.getPackageFragmentRoot().getPath();", "+\t\t\t\t// if the class file is part of the binary output, it has been created by", "+\t\t\t\t// the java builder -> ignore", "+\t\t\t\ttry {", "+\t\t\t\t\tif (binaryFolderPath.equals(project.getOutputLocation())) {", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\tIResourceDelta[] children = delta.getAffectedChildren();", "-\t\t\t\t\tfor (int i = 0, length = children.length; i < length; i++) {", "-\t\t\t\t\t\tIResourceDelta child = children[i];", "-\t\t\t\t\t\tIResource resource = child.getResource();", "-\t\t\t\t\t\tif (resource instanceof IFile) {", "-\t\t\t\t\t\t\tString name = resource.getName();", "-\t\t\t\t\t\t\tif (Util.isJavaFileName(name)) {", "-\t\t\t\t\t\t\t\tOpenable cu = (Openable)pkg.getCompilationUnit(name);", "-\t\t\t\t\t\t\t\tthis.updateIndex(cu, child);", "-\t\t\t\t\t\t\t} else if (Util.isClassFileName(name)) {", "-\t\t\t\t\t\t\t\tOpenable classFile = (Openable)pkg.getClassFile(name);", "-\t\t\t\t\t\t\t\tthis.updateIndex(classFile, child);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t}", "+\t\t\t\tswitch (delta.getKind()) {", "+\t\t\t\t\tcase IResourceDelta.CHANGED :", "+\t\t\t\t\t\t// no need to index if the content has not changed", "+\t\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.CONTENT) == 0)", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IResourceDelta.ADDED :", "+\t\t\t\t\t\tindexManager.addBinary(file, binaryFolderPath);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IResourceDelta.REMOVED :", "+\t\t\t\t\t\tindexManager.remove(file.getFullPath().toString(), binaryFolderPath);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase IJavaElement.COMPILATION_UNIT :", "+\t\t\t\tfile = (IFile) delta.getResource();", "+\t\t\t\tswitch (delta.getKind()) {", "+\t\t\t\t\tcase IResourceDelta.CHANGED :", "+\t\t\t\t\t\t// no need to index if the content has not changed", "+\t\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.CONTENT) == 0)", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IResourceDelta.ADDED :", "+\t\t\t\t\t\tindexManager.addSource(file, file.getProject().getProject().getFullPath());", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IResourceDelta.REMOVED :", "+\t\t\t\t\t\tindexManager.remove(file.getFullPath().toString(), file.getProject().getProject().getFullPath());", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t}", "+\t}", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tbreak;", "-\t\tcase IJavaElement.CLASS_FILE :", "-\t\t\tIFile file = (IFile) delta.getResource();", "-\t\t\tIJavaProject project = element.getJavaProject();", "-\t\t\tIPath binaryFolderPath = element.getPackageFragmentRoot().getPath();", "-\t\t\t// if the class file is part of the binary output, it has been created by", "-\t\t\t// the java builder -> ignore", "-\t\t\ttry {", "-\t\t\t\tif (binaryFolderPath.equals(project.getOutputLocation())) {", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t}", "-\t\t\tswitch (delta.getKind()) {", "-\t\t\t\tcase IResourceDelta.CHANGED :", "-\t\t\t\t\t// no need to index if the content has not changed", "-\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.CONTENT) == 0)", "-\t\t\t\t\t\tbreak;", "-\t\t\t\tcase IResourceDelta.ADDED :", "-\t\t\t\t\tindexManager.addBinary(file, binaryFolderPath);", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IResourceDelta.REMOVED :", "-\t\t\t\t\tindexManager.remove(file.getFullPath().toString(), binaryFolderPath);", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tbreak;", "-\t\tcase IJavaElement.COMPILATION_UNIT :", "-\t\t\tfile = (IFile) delta.getResource();", "-\t\t\tswitch (delta.getKind()) {", "-\t\t\t\tcase IResourceDelta.CHANGED :", "-\t\t\t\t\t// no need to index if the content has not changed", "-\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.CONTENT) == 0)", "-\t\t\t\t\t\tbreak;", "-\t\t\t\tcase IResourceDelta.ADDED :", "-\t\t\t\t\tindexManager.addSource(file, file.getProject().getProject().getFullPath());", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase IResourceDelta.REMOVED :", "-\t\t\t\t\tindexManager.remove(file.getFullPath().toString(), file.getProject().getProject().getFullPath());", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de1122a8bdfc63390444c5d1fb764897", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "ac6a9f56760bba7aec9ca8548c00a789a95fdc11", "commitAfterChange": "f238d59edecc5d87c39084d60c9040567d09deaf", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r \r protected void updateIndex(Openable element, IResourceDelta delta)", "signatureAfterChange": "\r \r protected void updateIndex(Openable element, IResourceDelta delta)", "diff": ["-\ttry {\t\t\r", "-\t\tif (indexManager == null)\r", "-\t\t\treturn;\r", "+\tif (indexManager == null)\r", "+\t\treturn;\r", "-\t\tswitch (element.getElementType()) {\r", "-\t\t\tcase IJavaElement.JAVA_PROJECT :\r", "-\t\t\t\tswitch (delta.getKind()) {\r", "-\t\t\t\t\tcase IResourceDelta.ADDED :\r", "-\t\t\t\t\tcase IResourceDelta.OPEN :\r", "-\t\t\t\t\t\tindexManager.indexAll(element.getJavaProject().getProject());\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT :\r", "-\t\t\t\tswitch (delta.getKind()) {\r", "-\t\t\t\t\tcase IResourceDelta.ADDED:\r", "-\t\t\t\t\tcase IResourceDelta.CHANGED:\r", "-\t\t\t\t\t\tif (element instanceof JarPackageFragmentRoot) {\r", "-\t\t\t\t\t\t\tJarPackageFragmentRoot root = (JarPackageFragmentRoot)element;\r", "-\t\t\t\t\t\t\t// index jar file only once (if the root is in its declaring project)\r", "-\t\t\t\t\t\t\tif (root.getJavaProject().getProject().getFullPath().isPrefixOf(root.getPath())) {\r", "-\t\t\t\t\t\t\t\tindexManager.indexJarFile(root.getPath(), root.getJavaProject().getElementName());\r", "-\t\t\t\t\t\t\t}\r", "+\tswitch (element.getElementType()) {\r", "+\t\tcase IJavaElement.JAVA_PROJECT :\r", "+\t\t\tswitch (delta.getKind()) {\r", "+\t\t\t\tcase IResourceDelta.ADDED :\r", "+\t\t\t\tcase IResourceDelta.OPEN :\r", "+\t\t\t\t\tindexManager.indexAll(element.getJavaProject().getProject());\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT :\r", "+\t\t\tswitch (delta.getKind()) {\r", "+\t\t\t\tcase IResourceDelta.ADDED:\r", "+\t\t\t\tcase IResourceDelta.CHANGED:\r", "+\t\t\t\t\tif (element instanceof JarPackageFragmentRoot) {\r", "+\t\t\t\t\t\tJarPackageFragmentRoot root = (JarPackageFragmentRoot)element;\r", "+\t\t\t\t\t\t// index jar file only once (if the root is in its declaring project)\r", "+\t\t\t\t\t\tif (root.getJavaProject().getProject().getFullPath().isPrefixOf(root.getPath())) {\r", "+\t\t\t\t\t\t\tindexManager.indexJarFile(root.getPath(), root.getJavaProject().getElementName());\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IResourceDelta.REMOVED:\r", "-\t\t\t\t\t\t// keep index in case it is added back later in this session\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "-\t\t\t\t// don't break as packages of the package fragment root can be indexed below\r", "-\t\t\tcase IJavaElement.PACKAGE_FRAGMENT :\r", "-\t\t\t\tswitch (delta.getKind()) {", "-\t\t\t\t\tcase IResourceDelta.ADDED:\r", "-\t\t\t\t\tcase IResourceDelta.REMOVED:\r", "-\t\t\t\t\t\tIPackageFragment pkg = null;\r", "-\t\t\t\t\t\tif (element instanceof IPackageFragmentRoot) {\r", "-\t\t\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)element;\r", "-\t\t\t\t\t\t\tpkg = root.getPackageFragment(\"\"); //$NON-NLS-1$\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\tpkg = (IPackageFragment)element;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tString name = pkg.getElementName();\r", "-\t\t\t\t\t\tIResourceDelta[] children = delta.getAffectedChildren();\r", "-\t\t\t\t\t\tfor (int i = 0, length = children.length; i < length; i++) {\r", "-\t\t\t\t\t\t\tIResourceDelta child = children[i];\r", "-\t\t\t\t\t\t\tIResource resource = child.getResource();\r", "-\t\t\t\t\t\t\tif (resource instanceof IFile) {\r", "-\t\t\t\t\t\t\t\tString extension = resource.getFileExtension();\r", "-\t\t\t\t\t\t\t\tif (\"java\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "-\t\t\t\t\t\t\t\t\tOpenable cu = (Openable)pkg.getCompilationUnit(resource.getName());\r", "-\t\t\t\t\t\t\t\t\tthis.updateIndex(cu, child);\r", "-\t\t\t\t\t\t\t\t} else if (\"class\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "-\t\t\t\t\t\t\t\t\tOpenable classFile = (Openable)pkg.getClassFile(resource.getName());\r", "-\t\t\t\t\t\t\t\t\tthis.updateIndex(classFile, child);\r", "-\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase IJavaElement.CLASS_FILE :\r", "-\t\t\t\tIFile file = (IFile) element.getUnderlyingResource();\r", "-\t\t\t\tIJavaProject project = element.getJavaProject();\r", "-\t\t\t\tIResource binaryFolder;\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tbinaryFolder = element.getPackageFragmentRoot().getUnderlyingResource();\r", "-\t\t\t\t\t// if the class file is part of the binary output, it has been created by\r", "-\t\t\t\t\t// the java builder -> ignore\r", "-\t\t\t\t\tif (binaryFolder.getFullPath().equals(project.getOutputLocation())) {\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase IResourceDelta.REMOVED:\r", "+\t\t\t\t\t// keep index in case it is added back later in this session\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t\t// don't break as packages of the package fragment root can be indexed below\r", "+\t\tcase IJavaElement.PACKAGE_FRAGMENT :\r", "+\t\t\tswitch (delta.getKind()) {", "+\t\t\t\tcase IResourceDelta.ADDED:\r", "+\t\t\t\tcase IResourceDelta.REMOVED:\r", "+\t\t\t\t\tIPackageFragment pkg = null;\r", "+\t\t\t\t\tif (element instanceof IPackageFragmentRoot) {\r", "+\t\t\t\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)element;\r", "+\t\t\t\t\t\tpkg = root.getPackageFragment(\"\"); //$NON-NLS-1$\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tpkg = (IPackageFragment)element;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tString name = pkg.getElementName();\r", "+\t\t\t\t\tIResourceDelta[] children = delta.getAffectedChildren();\r", "+\t\t\t\t\tfor (int i = 0, length = children.length; i < length; i++) {\r", "+\t\t\t\t\t\tIResourceDelta child = children[i];\r", "+\t\t\t\t\t\tIResource resource = child.getResource();\r", "+\t\t\t\t\t\tif (resource instanceof IFile) {\r", "+\t\t\t\t\t\t\tString extension = resource.getFileExtension();\r", "+\t\t\t\t\t\t\tif (\"java\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t\tOpenable cu = (Openable)pkg.getCompilationUnit(resource.getName());\r", "+\t\t\t\t\t\t\t\tthis.updateIndex(cu, child);\r", "+\t\t\t\t\t\t\t} else if (\"class\".equalsIgnoreCase(extension)) { //$NON-NLS-1$\r", "+\t\t\t\t\t\t\t\tOpenable classFile = (Openable)pkg.getClassFile(resource.getName());\r", "+\t\t\t\t\t\t\t\tthis.updateIndex(classFile, child);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase IJavaElement.CLASS_FILE :\r", "+\t\t\tIFile file = (IFile) delta.getResource();\r", "+\t\t\tIJavaProject project = element.getJavaProject();\r", "+\t\t\tIPath binaryFolderPath = element.getPackageFragmentRoot().getPath();\r", "+\t\t\t// if the class file is part of the binary output, it has been created by\r", "+\t\t\t// the java builder -> ignore\r", "+\t\t\ttry {\r", "+\t\t\t\tif (binaryFolderPath.equals(project.getOutputLocation())) {\r", "-\t\t\t\tswitch (delta.getKind()) {\r", "-\t\t\t\t\tcase IResourceDelta.CHANGED :\r", "-\t\t\t\t\t\t// no need to index if the content has not changed\r", "-\t\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.CONTENT) == 0)\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IResourceDelta.ADDED :\r", "-\t\t\t\t\t\tif (file.isLocal(IResource.DEPTH_ZERO))\r", "-\t\t\t\t\t\t\tindexManager.add(file, binaryFolder);\r", "+\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t}\r", "+\t\t\tswitch (delta.getKind()) {\r", "+\t\t\t\tcase IResourceDelta.CHANGED :\r", "+\t\t\t\t\t// no need to index if the content has not changed\r", "+\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.CONTENT) == 0)\r", "-\t\t\t\t\tcase IResourceDelta.REMOVED :\r", "-\t\t\t\t\t\tindexManager.remove(file.getFullPath().toString(), binaryFolder);\r", "+\t\t\t\tcase IResourceDelta.ADDED :\r", "+\t\t\t\t\tif (file.isLocal(IResource.DEPTH_ZERO))\r", "+\t\t\t\t\t\tindexManager.add(file, binaryFolderPath);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase IResourceDelta.REMOVED :\r", "+\t\t\t\t\tindexManager.remove(file.getFullPath().toString(), binaryFolderPath);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase IJavaElement.COMPILATION_UNIT :\r", "+\t\t\tfile = (IFile) delta.getResource();\r", "+\t\t\tswitch (delta.getKind()) {\r", "+\t\t\t\tcase IResourceDelta.CHANGED :\r", "+\t\t\t\t\t// no need to index if the content has not changed\r", "+\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.CONTENT) == 0)\r", "-\t\t\t\t}\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase IJavaElement.COMPILATION_UNIT :\r", "-\t\t\t\tfile = (IFile) delta.getResource();\r", "-\t\t\t\tswitch (delta.getKind()) {\r", "-\t\t\t\t\tcase IResourceDelta.CHANGED :\r", "-\t\t\t\t\t\t// no need to index if the content has not changed\r", "-\t\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.CONTENT) == 0)\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IResourceDelta.ADDED :\r", "-\t\t\t\t\t\tif (file.isLocal(IResource.DEPTH_ZERO))\r", "-\t\t\t\t\t\t\tindexManager.add(file, file.getProject());\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IResourceDelta.REMOVED :\r", "-\t\t\t\t\t\tindexManager.remove(file.getFullPath().toString(), file.getProject());\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "-\t\t}\r", "-\t} catch (CoreException e) {\r", "-\t\t// ignore: index won't be updated\r", "+\t\t\t\tcase IResourceDelta.ADDED :\r", "+\t\t\t\t\tif (file.isLocal(IResource.DEPTH_ZERO))\r", "+\t\t\t\t\t\tindexManager.add(file, file.getProject().getProject().getFullPath());\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase IResourceDelta.REMOVED :\r", "+\t\t\t\t\tindexManager.remove(file.getFullPath().toString(), file.getProject().getProject().getFullPath());\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t}\r"]}], "num": 3026}
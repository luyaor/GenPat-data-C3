{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e41c39f5a9b796822cfc6a84ba4c00c1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b6cd4babb8ed07932bd28ce25173cf2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "7eeea60289161cbc82181c2049d38d6375b340c4", "commitAfterChange": "bac0b688c9760eba84723fa01c9ef8fce3bf0175", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " private boolean isCompatibleWith0(TypeBinding otherType, Scope captureScope)", "signatureAfterChange": " private boolean isCompatibleWith0(TypeBinding otherType, Scope captureScope)", "diff": ["+\t\t\tif (otherType instanceof InferenceVariable) {", "+\t\t\t\t// may interpret InferenceVariable as a joker, but only when within an outer lambda inference:", "+\t\t\t\tif (captureScope != null) {", "+\t\t\t\t\tMethodScope methodScope = captureScope.methodScope();", "+\t\t\t\t\tif (methodScope != null) {", "+\t\t\t\t\t\tReferenceContext referenceContext = methodScope.referenceContext;", "+\t\t\t\t\t\tif (referenceContext instanceof LambdaExpression", "+\t\t\t\t\t\t\t\t&& ((LambdaExpression)referenceContext).inferenceContext != null)", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bb0a55a87b2956710bf7f36a8acc1f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "bac18f086dd9a87e1d5b6dea3b31ca1c92463a84", "commitAfterChange": "1b53a525120894192853120c7678edb264d25490", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void resetEnclosingMethodStaticFlag()", "signatureAfterChange": " public void resetEnclosingMethodStaticFlag()", "diff": ["+\twhile (methodScope != null && methodScope.referenceContext instanceof LambdaExpression) {", "+\t\tLambdaExpression lambda = (LambdaExpression) methodScope.referenceContext;", "+\t\tlambda.shouldCaptureInstance = true;", "+\t\tmethodScope = methodScope.enclosingMethodScope();", "+\t}", "+\t\t\twhile (methodScope != null && methodScope.referenceContext instanceof LambdaExpression) {", "+\t\t\t\tLambdaExpression lambda = (LambdaExpression) methodScope.referenceContext;", "+\t\t\t\tlambda.shouldCaptureInstance = true;", "+\t\t\t\tmethodScope = methodScope.enclosingMethodScope();", "+\t\t\t}"]}], "num": 67465}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c8efb02e6a2590ecd983334edd469d52", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dcd8a8bbea3a5200a2e33cbb9c68347", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "6dad91e4f298fff813aeb65b0b459a8698c68fdb", "commitAfterChange": "74ba53ab0437265c5342ec723f72d2aea81fd661", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic CompilerOptions(Map settings)", "signatureAfterChange": " \tpublic CompilerOptions(Map settings)", "diff": ["+\t\t\t// Report todo", "+\t\t\tif(optionID.equals(OPTION_ReportToDo)){", "+\t\t\t\tif (optionValue.equals(ERROR)) {", "+\t\t\t\t\tthis.errorThreshold |= ToDo;", "+\t\t\t\t\tthis.warningThreshold &= ~ToDo;", "+\t\t\t\t} else if (optionValue.equals(WARNING)) {", "+\t\t\t\t\tthis.errorThreshold &= ~ToDo;", "+\t\t\t\t\tthis.warningThreshold |= ToDo;", "+\t\t\t\t} else if (optionValue.equals(IGNORE)) {", "+\t\t\t\t\tthis.errorThreshold &= ~ToDo;", "+\t\t\t\t\tthis.warningThreshold &= ~ToDo;", "+\t\t\t\t}", "+\t\t\t\tcontinue;", "+\t\t\t} ", "+\t\t\t// Report todo", "+\t\t\tif(optionID.equals(OPTION_ToDoTag)){", "+\t\t\t\tthis.toDoTag = optionValue.toCharArray();", "+\t\t\t\tcontinue;", "+\t\t\t} "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee8c619c9d3b57298e425f9d814762d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "1585d95aacd546d0fef8e25ddee2f5a6f64f7c62", "commitAfterChange": "bcf6d39cea27ed7bf3bf85709bd7e60dc5605058", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void resolve(BlockScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(BlockScope upperScope)", "diff": ["-\t\t\t\tif (!collectionElementType.isCompatibleWith(elementType)) {", "+\t\t\t\tif (!collectionElementType.isCompatibleWith(elementType)", "+\t\t\t\t\t\t&& !scope.isBoxingCompatibleWith(collectionElementType, elementType)) {", "+\t\t\t\tint compileTimeTypeId = this.arrayElementTypeID;", "-\t\t\t\t\tthis.elementVariableImplicitWidening = (elementType.id << 4) + this.arrayElementTypeID;", "+\t\t\t\t\tif (!collectionElementType.isBaseType()) {", "+\t\t\t\t\t\tcompileTimeTypeId = scope.computeBoxingType(collectionElementType).id;", "+\t\t\t\t\t\tthis.elementVariableImplicitWidening = UNBOXING;", "+\t\t\t\t\t\tif (elementType.isBaseType()) {", "+\t\t\t\t\t\t\tthis.elementVariableImplicitWidening |= (elementType.id << 4) + compileTimeTypeId;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.elementVariableImplicitWidening = (elementType.id << 4) + compileTimeTypeId;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (collectionElementType.isBaseType()) {", "+\t\t\t\t\t\tcompileTimeTypeId = scope.computeBoxingType(collectionElementType).id;", "+\t\t\t\t\t\tthis.elementVariableImplicitWidening = BOXING | compileTimeTypeId;", "+\t\t\t\t\t}"]}], "num": 68798}
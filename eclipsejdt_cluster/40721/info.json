{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72ce880bae08a3b69fa9e3c5ce2db69e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "471c5c2a23e587ab6c8a5b8f4b255d94", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateElementInCUOperation.java", "commitBeforeChange": "90d481edc9060cc498a8f085b08186108312e37b", "commitAfterChange": "f3a3c06f6e68ab7680c250209b9759ac3d56fec6", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprotected void insertDOMNode(IDOMNode parent, IDOMNode child)", "signatureAfterChange": " \tprotected void insertASTNode(ASTRewrite rewriter, ASTNode parent, ASTNode child) throws JavaModelException", "diff": ["-    // TODO - JDOM - remove once model ported off of JDOM", "-\tprotected void insertDOMNode(IDOMNode parent, IDOMNode child) {", "-\t\tif (fInsertionPolicy != INSERT_LAST) {", "-\t\t\tIDOMNode sibling = ((JavaElement)fAnchorElement).findNode(fCUDOM);", "-\t\t\tif (sibling != null && fInsertionPolicy == INSERT_AFTER) {", "-\t\t\t\tsibling = sibling.getNextNode();", "-\t\t\t}", "-\t\t\tif (sibling != null) {", "-\t\t\t\tsibling.insertSibling(child);", "-\t\t\t\tfCreatedElement = (DOMNode)child;", "-\t\t\t\tfInsertionPosition = ((DOMNode)sibling).getStartPosition();", "-\t\t\t\tfReplacementLength = 0;", "-\t\t\t\treturn;", "-\t\t\t}", "+\tprotected void insertASTNode(ASTRewrite rewriter, ASTNode parent, ASTNode child) throws JavaModelException {", "+\t\tStructuralPropertyDescriptor propertyDescriptor = getChildPropertyDescriptor(parent);", "+\t\tif (propertyDescriptor instanceof ChildListPropertyDescriptor) {", "+\t\t\tChildListPropertyDescriptor childListPropertyDescriptor = (ChildListPropertyDescriptor) propertyDescriptor;", "+\t \t\tListRewrite rewrite = rewriter.getListRewrite(parent, childListPropertyDescriptor);", "+\t \t\tswitch (this.insertionPolicy) {", "+\t \t\t\tcase INSERT_BEFORE:", "+\t \t\t\t\tASTNode element = ((JavaElement) this.anchorElement).findNode(this.cuAST);", "+\t \t\t\t\tif (childListPropertyDescriptor.getElementType().isAssignableFrom(element.getClass()))", "+\t\t \t\t\t\trewrite.insertBefore(child, element, null);", "+\t \t\t\t\telse", "+\t \t\t\t\t\t// case of an empty import list: the anchor element is the top level type and cannot be used in insertBefore as it is not the same type", "+\t \t\t\t\t\trewrite.insertLast(child, null);", "+\t \t\t\t\tbreak;", "+\t \t\t\tcase INSERT_AFTER:", "+\t \t\t\t\telement = ((JavaElement) this.anchorElement).findNode(this.cuAST);", "+\t \t\t\t\tif (childListPropertyDescriptor.getElementType().isAssignableFrom(element.getClass()))", "+\t\t \t\t\t\trewrite.insertAfter(child, element, null);", "+\t \t\t\t\telse", "+\t \t\t\t\t\t// case of an empty import list: the anchor element is the top level type and cannot be used in insertAfter as it is not the same type", "+\t \t\t\t\t\trewrite.insertLast(child, null);", "+\t \t\t\t\tbreak;", "+\t \t\t\tcase INSERT_LAST:", "+\t \t\t\t\trewrite.insertLast(child, null);", "+\t \t\t\t\tbreak;", "+\t \t\t}", "+\t\t} else {", "+\t\t\trewriter.set(parent, propertyDescriptor, child, null);", "-\t\t//add as the last element of the parent", "-\t\tparent.addChild(child);", "-\t\tfCreatedElement = (org.eclipse.jdt.internal.core.jdom.DOMNode)child;", "-\t\tfInsertionPosition = ((org.eclipse.jdt.internal.core.jdom.DOMNode)parent).getInsertionPosition();", "-\t//\tfInsertionPosition = lastChild == null ? ((DOMNode)parent).getInsertionPosition() : lastChild.getInsertionPosition();", "-\t\tfReplacementLength = parent.getParent() == null ? -1 : 0;", "+ \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "522f6f82b113eb13a0f5e57565300967", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 56, "signatureBeforeChange": "  \tprivate boolean printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "signatureAfterChange": "  \tprivate boolean printBlockComment(int currentTokenStartPosition, int currentTokenEndPosition)", "diff": ["-\t\tStringBuffer buffer = new StringBuffer();", "+\t\tthis.blockCommentBuffer.setLength(0);", "-\t\tStringBuffer tokensBuffer = new StringBuffer();", "+\t\tthis.blockCommentTokensBuffer.setLength(0);", "-\t\t\t\t\tif (tokensBuffer.length() > 0) {", "+\t\t\t\t\tif (this.blockCommentTokensBuffer.length() > 0) {", "-\t\t\t\t\t\t\tprintBlockCommentHeaderLine(buffer);", "+\t\t\t\t\t\t\tprintBlockCommentHeaderLine(this.blockCommentBuffer);", "-\t\t\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\t\t\tthis.column += tokensBuffer.length();", "-\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\tthis.blockCommentBuffer.append(this.blockCommentTokensBuffer);", "+\t\t\t\t\t\tthis.column += this.blockCommentTokensBuffer.length();", "+\t\t\t\t\t\tthis.blockCommentTokensBuffer.setLength(0);", "-\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\tthis.blockCommentBuffer.append(' ');", "-\t\t\t\t\t\tif (tokensBuffer.length() > 0) {", "-\t\t\t\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\t\t\t\tthis.column += tokensBuffer.length();", "+\t\t\t\t\t\tif (this.blockCommentTokensBuffer.length() > 0) {", "+\t\t\t\t\t\t\tthis.blockCommentBuffer.append(this.blockCommentTokensBuffer);", "+\t\t\t\t\t\t\tthis.column += this.blockCommentTokensBuffer.length();", "-\t\t\t\t\t\t    \tbuffer.append(this.lineSeparator);", "+\t\t\t\t\t\t    \tthis.blockCommentBuffer.append(this.lineSeparator);", "-\t\t\t\t\t\t    \tprintIndentationIfNecessary(buffer);", "+\t\t\t\t\t\t    \tprintIndentationIfNecessary(this.blockCommentBuffer);", "-\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\tthis.blockCommentBuffer.append(' ');", "-\t\t\t\t\tif (tokensBuffer.length() > 0) {", "+\t\t\t\t\tif (this.blockCommentTokensBuffer.length() > 0) {", "-\t\t\t\t\t\t\tprintBlockCommentHeaderLine(buffer);", "+\t\t\t\t\t\t\tprintBlockCommentHeaderLine(this.blockCommentBuffer);", "-\t\t\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\tthis.blockCommentBuffer.append(this.blockCommentTokensBuffer);", "+\t\t\t\t\t\tthis.blockCommentTokensBuffer.setLength(0);", "-\t\t\t    \tbuffer.append(this.lineSeparator);", "+\t\t\t    \tthis.blockCommentBuffer.append(this.lineSeparator);", "-\t\t\t    \tprintIndentationIfNecessary(buffer);", "-\t\t    \t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t    \tprintIndentationIfNecessary(this.blockCommentBuffer);", "+\t\t    \t\tthis.blockCommentBuffer.append(BLOCK_LINE_PREFIX);", "-    \t\tint lastColumn = this.column + tokensBuffer.length() + tokenLength;", "+    \t\tint lastColumn = this.column + this.blockCommentTokensBuffer.length() + tokenLength;", "-\t\t    \tString tokensString = tokensBuffer.toString().trim();", "+\t\t    \tString tokensString = this.blockCommentTokensBuffer.toString().trim();", "-\t\t\t\t\tprintBlockCommentHeaderLine(buffer);", "+\t\t\t\t\tprintBlockCommentHeaderLine(this.blockCommentBuffer);", "-\t\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\t\tthis.column += tokensBuffer.length();", "-\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\tthis.blockCommentBuffer.append(this.blockCommentTokensBuffer);", "+\t\t\t\t\tthis.column += this.blockCommentTokensBuffer.length();", "+\t\t\t\t\tthis.blockCommentTokensBuffer.setLength(0);", "-\t\t\t    \tbuffer.append(this.lineSeparator);", "+\t\t\t    \tthis.blockCommentBuffer.append(this.lineSeparator);", "-\t\t\t    \tprintIndentationIfNecessary(buffer);", "-\t\t    \t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t    \tprintIndentationIfNecessary(this.blockCommentBuffer);", "+\t\t    \t\tthis.blockCommentBuffer.append(BLOCK_LINE_PREFIX);", "-\t\t    \tif (tokensBuffer.length() > 0) {", "-\t\t\t\t\tbuffer.append(tokensString);", "+\t\t    \tif (this.blockCommentTokensBuffer.length() > 0) {", "+\t\t\t\t\tthis.blockCommentBuffer.append(tokensString);", "-\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\tthis.blockCommentTokensBuffer.setLength(0);", "-\t\t\t\tbuffer.append(this.scanner.source, tokenStart, tokenLength);", "+\t\t\t\tthis.blockCommentBuffer.append(this.scanner.source, tokenStart, tokenLength);", "-\t\t\t\t\ttokensBuffer.append(' ');", "+\t\t\t\t\tthis.blockCommentTokensBuffer.append(' ');", "-\t\t\t\ttokensBuffer.append(this.scanner.source, tokenStart, tokenLength);", "+\t\t\t\tthis.blockCommentTokensBuffer.append(this.scanner.source, tokenStart, tokenLength);", "-\t\t\t\tStringBuffer replacement = new StringBuffer();", "+\t\t\t\tStringBuffer replacement;", "+\t\t\t\t\tthis.blockCommentTokensBuffer.setLength(0);", "+\t\t\t\t\treplacement = this.blockCommentTokensBuffer;", "-\t\t\t\t\t} else if (buffer.length()==0 || buffer.charAt(0)!=' ') {", "+\t\t\t\t\t} else if (this.blockCommentBuffer.length()==0 || this.blockCommentBuffer.charAt(0)!=' ') {", "+\t\t\t\t\treplacement.append(this.blockCommentBuffer);", "+\t\t\t\t} else {", "+\t\t\t\t\treplacement = this.blockCommentBuffer;", "-\t\t\t\treplacement.append(buffer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74f9bd9a6f5760590b126b5c060cc2a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "3d4c80327c4bd6f61a1ef852d9f8cb11ff6d9d62", "commitAfterChange": "a00d0694a5797c69eb50145f1a65c73c676a067b", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": "  \tpublic Type convertType(TypeReference typeReference)", "diff": ["-\t\t\tWildcard wildcard = (Wildcard) typeReference;", "-\t\t\tWildcardType wildcardType = this.ast.newWildcardType();", "+\t\t\tfinal Wildcard wildcard = (Wildcard) typeReference;", "+\t\t\tfinal WildcardType wildcardType = new WildcardType(this.ast);", "-\t\t\t\ttype = this.ast.newPrimitiveType(getPrimitiveTypeCode(name));", "-\t\t\t\ttype.setSourceRange(sourceStart, end - sourceStart + 1);", "+\t\t\t\tfinal PrimitiveType primitiveType = new PrimitiveType(this.ast);", "+\t\t\t\tprimitiveType.setPrimitiveTypeCode(getPrimitiveTypeCode(name));", "+\t\t\t\tprimitiveType.setSourceRange(sourceStart, end - sourceStart + 1);", "+\t\t\t\ttype = primitiveType;", "-\t\t\t\tSimpleName simpleName = this.ast.newSimpleName(new String(name));", "+\t\t\t\tfinal SimpleName simpleName = new SimpleName(this.ast);", "+\t\t\t\tsimpleName.internalSetIdentifier(new String(name));", "-\t\t\t\t\t\ttype = this.ast.newSimpleType(simpleName);", "-\t\t\t\t\t\ttype.setFlags(type.getFlags() | ASTNode.MALFORMED);", "-\t\t\t\t\t\ttype.setSourceRange(sourceStart, end - sourceStart + 1);", "+\t\t\t\t\t\tSimpleType simpleType = new SimpleType(this.ast);", "+\t\t\t\t\t\tsimpleType.setName(simpleName);", "+\t\t\t\t\t\tsimpleType.setFlags(simpleType.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\t\tsimpleType.setSourceRange(sourceStart, end - sourceStart + 1);", "+\t\t\t\t\t\ttype = simpleType;", "-\t\t\t\t\t\tSimpleType simpleType = this.ast.newSimpleType(simpleName);", "+\t\t\t\t\t\tsimpleType = new SimpleType(this.ast);", "+\t\t\t\t\t\tsimpleType.setName(simpleName);", "-\t\t\t\t\t\ttype = this.ast.newParameterizedType(simpleType);", "+\t\t\t\t\t\tfinal ParameterizedType parameterizedType = new ParameterizedType(this.ast);", "+\t\t\t\t\t\tparameterizedType.setType(simpleType);", "+\t\t\t\t\t\ttype = parameterizedType;", "-\t\t\t\tSimpleName simpleName = this.ast.newSimpleName(new String(name));", "+\t\t\t\tfinal SimpleName simpleName = new SimpleName(this.ast);", "+\t\t\t\tsimpleName.internalSetIdentifier(new String(name));", "-\t\t\t\ttype = this.ast.newSimpleType(simpleName);", "+\t\t\t\tfinal SimpleType simpleType = new SimpleType(this.ast);", "+\t\t\t\tsimpleType.setName(simpleName);", "+\t\t\t\ttype = simpleType;", "+\t\t\t\ttype = simpleType;", "-\t\t\t\t\t\t\ttype = this.ast.newSimpleType(qualifiedName);", "-\t\t\t\t\t\t\ttype.setSourceRange(sourceStart, length);", "+\t\t\t\t\t\t\tfinal SimpleType simpleType = new SimpleType(this.ast);", "+\t\t\t\t\t\t\tsimpleType.setName(qualifiedName);", "+\t\t\t\t\t\t\tsimpleType.setSourceRange(sourceStart, length);", "+\t\t\t\t\t\t\ttype = simpleType;", "-\t\t\t\t\t\t\t\tname = this.ast.newSimpleName(new String(tokens[startingIndex]));", "-\t\t\t\t\t\t\t\trecordPendingNameScopeResolution(name);", "+\t\t\t\t\t\t\t\tfinal SimpleName simpleName = new SimpleName(this.ast);", "+\t\t\t\t\t\t\t\tsimpleName.internalSetIdentifier(new String(tokens[startingIndex]));", "+\t\t\t\t\t\t\t\trecordPendingNameScopeResolution(simpleName);", "-\t\t\t\t\t\t\t\tname.setSourceRange(start, end - start + 1);", "-\t\t\t\t\t\t\t\tname.index = 1;", "+\t\t\t\t\t\t\t\tsimpleName.setSourceRange(start, end - start + 1);", "+\t\t\t\t\t\t\t\tsimpleName.index = 1;", "+\t\t\t\t\t\t\t\tname = simpleName;", "+\t\t\t\t\t\t\t\tif (this.resolveBindings) {", "+\t\t \t\t\t\t\t\t\trecordNodes(simpleName, typeReference);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\trecordNodes(name, typeReference);", "-\t\t\t\t\t\t\tSimpleType simpleType = this.ast.newSimpleType(name);", "+\t\t\t\t\t\t\tSimpleType simpleType = new SimpleType(this.ast);", "+\t\t\t\t\t\t\tsimpleType.setName(name);", "-\t\t\t\t\t\t\tParameterizedType parameterizedType = this.ast.newParameterizedType(simpleType);", "+\t\t\t\t\t\t\tParameterizedType parameterizedType = new ParameterizedType(this.ast);", "+\t\t\t\t\t\t\tparameterizedType.setType(simpleType);", "-\t\t\t\t\t\t\t\tSimpleName simpleName = this.ast.newSimpleName(new String(tokens[startingIndex]));", "+\t\t\t\t\t\t\t\tSimpleName simpleName = new SimpleName(this.ast);", "+\t\t\t\t\t\t\t\tsimpleName.internalSetIdentifier(new String(tokens[startingIndex]));", "-\t\t\t\t\t\t\t\tQualifiedType qualifiedType = this.ast.newQualifiedType(currentType, simpleName);", "+\t\t\t\t\t\t\t\tQualifiedType qualifiedType = new QualifiedType(this.ast);", "+\t\t\t\t\t\t\t\tqualifiedType.setQualifier(currentType);", "+\t\t\t\t\t\t\t\tqualifiedType.setName(simpleName);\t", "-\t\t\t\t\t\t\t\t\tParameterizedType parameterizedType2 = this.ast.newParameterizedType(qualifiedType);", "+\t\t\t\t\t\t\t\t\tParameterizedType parameterizedType2 = new ParameterizedType(this.ast);", "+\t\t\t\t\t\t\t\t\tparameterizedType2.setType(qualifiedType);", "-\t\t\t\tName qualifiedName = this.setQualifiedNameNameAndSourceRanges(name, positions, typeReference);", "-\t\t\t\ttype = this.ast.newSimpleType(qualifiedName);", "+\t\t\t\tfinal Name qualifiedName = this.setQualifiedNameNameAndSourceRanges(name, positions, typeReference);", "+\t\t\t\tfinal SimpleType simpleType = new SimpleType(this.ast);", "+\t\t\t\tsimpleType.setName(qualifiedName);", "+\t\t\t\ttype = simpleType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e39e8b1f667da9d328f7704a9ea0d2d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "a708a833352a17a462cbe9e9346d660fa6317a1e", "commitAfterChange": "0e8e783b8823e467b82792c7ef9289caad32e202", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 74, "signatureBeforeChange": " \tprivate void printJavadocGapLines(int textStartPosition, int textEndPosition, int newLines, boolean clearBlankLines, boolean footer, StringBuffer output)", "signatureAfterChange": " \tprivate void printJavadocGapLines(int textStartPosition, int textEndPosition, int newLines, boolean clearBlankLines, boolean footer, StringBuffer output)", "diff": ["-\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\tthis.javadocGapLinesBuffer.setLength(0);", "-\t\t\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(this.lineSeparator);", "-\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "+\t\t\t\t\t\tprintIndentationIfNecessary(this.javadocGapLinesBuffer);", "-\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(' ');", "-\t\t\t\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(BLOCK_LINE_PREFIX);", "-\t\t\t\t\t\taddInsertEdit(textStartPosition, buffer.toString());", "+\t\t\t\t\t\taddInsertEdit(textStartPosition, this.javadocGapLinesBuffer.toString());", "-\t\t\t\t\t\toutput.append(buffer);", "+\t\t\t\t\t\toutput.append(this.javadocGapLinesBuffer);", "-\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.setLength(0);", "-\t\t\t\t\t\t\t\tbuffer.append( ' ');", "+\t\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.append( ' ');", "-\t\t\t\t\t\t\t\t\t\t\taddReplaceEdit(start, textEndPosition, buffer.toString());", "+\t\t\t\t\t\t\t\t\t\t\taddReplaceEdit(start, textEndPosition, this.javadocGapLinesBuffer.toString());", "-\t\t\t\t\t\t\t\t\t\t\toutput.append(buffer);", "+\t\t\t\t\t\t\t\t\t\t\toutput.append(this.javadocGapLinesBuffer);", "-\t\t\t\t\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(this.lineSeparator);", "-\t\t\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "+\t\t\t\t\t\t\t\tprintIndentationIfNecessary(this.javadocGapLinesBuffer);", "-\t\t\t\t\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(' ');", "-\t\t\t\t\t\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(BLOCK_LINE_PREFIX);", "-\t\t\t\t\t\t\t\taddReplaceEdit(start, currentTokenStartPosition-1, buffer.toString());", "+\t\t\t\t\t\t\t\taddReplaceEdit(start, currentTokenStartPosition-1, this.javadocGapLinesBuffer.toString());", "-\t\t\t\t\t\t\t\toutput.append(buffer);", "+\t\t\t\t\t\t\t\toutput.append(this.javadocGapLinesBuffer);", "-\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\tthis.javadocGapLinesBuffer.setLength(0);", "-\t\t\t\t\tbuffer.append( ' ');", "+\t\t\t\t\tthis.javadocGapLinesBuffer.append( ' ');", "-\t\t\t\t\tprintJavadocNewLine(buffer);", "+\t\t\t\t\tprintJavadocNewLine(this.javadocGapLinesBuffer);", "-\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\t\tthis.javadocGapLinesBuffer.append(this.lineSeparator);", "-\t\t\t\tprintIndentationIfNecessary(buffer);", "+\t\t\t\tprintIndentationIfNecessary(this.javadocGapLinesBuffer);", "-\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\tthis.javadocGapLinesBuffer.append(' ');", "-\t\t\t\t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\tthis.javadocGapLinesBuffer.append(BLOCK_LINE_PREFIX);", "-\t\t\t\t\t\taddReplaceEdit(start, textEndPosition, buffer.toString());", "+\t\t\t\t\t\taddReplaceEdit(start, textEndPosition, this.javadocGapLinesBuffer.toString());", "-\t\t\t\t\t\taddInsertEdit(textEndPosition+1, buffer.toString());", "+\t\t\t\t\t\taddInsertEdit(textEndPosition+1, this.javadocGapLinesBuffer.toString());", "-\t\t\t\t\toutput.append(buffer);", "+\t\t\t\t\toutput.append(this.javadocGapLinesBuffer);", "-\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\tthis.javadocGapLinesBuffer.setLength(0);", "-\t\t\t\t\t\t\tbuffer.append( ' ');", "+\t\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(' ');", "-\t\t\t\t\t\tbuffer.append(this.lineSeparator);", "+\t\t\t\t\t\tthis.javadocGapLinesBuffer.append(this.lineSeparator);", "-\t\t\t\t\t\tprintIndentationIfNecessary(buffer);", "+\t\t\t\t\t\tprintIndentationIfNecessary(this.javadocGapLinesBuffer);", "-\t\t\t\t\tbuffer.append(' ');", "+\t\t\t\t\tthis.javadocGapLinesBuffer.append(' ');", "-\t\t\t\t\t\taddReplaceEdit(start, textEndPosition, buffer.toString());", "+\t\t\t\t\t\taddReplaceEdit(start, textEndPosition, this.javadocGapLinesBuffer.toString());", "-\t\t\t\t\t\toutput.append(buffer);", "+\t\t\t\t\t\toutput.append(this.javadocGapLinesBuffer);"]}], "num": 40721}
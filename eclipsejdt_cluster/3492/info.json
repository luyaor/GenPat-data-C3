{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bdc4954338511fbbb65e7573221357b1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b661ce0ebcb68231e24f0c95154201a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "a1c58bdaabaf9f6a9b0a77a3c1789db8c98a5d6e", "commitAfterChange": "872029642857c1c79449b2144eab1fa26e7e754a", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tpublic IClasspathEntry getClasspathEntryFor(IPath path) throws JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry getClasspathEntryFor(IPath path) throws JavaModelException", "diff": ["-\t\treturn (IClasspathEntry) rootPathToResolvedEntries.get(path);", "+\t\tIClasspathEntry classpathEntry = (IClasspathEntry) rootPathToResolvedEntries.get(path);", "+\t\tif (classpathEntry == null) {", "+\t\t\tpath = getProject().getWorkspace().getRoot().getLocation().append(path);", "+\t\t\tclasspathEntry = (IClasspathEntry) rootPathToResolvedEntries.get(path);", "+\t\t}", "+\t\treturn classpathEntry;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc02517775e2442e84a5477c2904e08c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "98ad487e103c268099d7117573693243c8d3b8fc", "commitAfterChange": "721a9dcda02493639666143934bddb089e848d18", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 68, "signatureBeforeChange": " protected void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "signatureAfterChange": " protected void reportMatching(AbstractMethodDeclaration method, IJavaElement parent, int accuracy, boolean typeInHierarchy, MatchingNodeSet nodeSet) throws CoreException", "diff": ["+\t// report the type parameters", "+\tTypeParameter[] typeParameters = method.typeParameters();", "+\tif (typeParameters != null) {", "+\t\tif (enclosingElement == null) {", "+\t\t\tenclosingElement = createHandle(method, parent);", "+\t\t}", "+\t\treportMatching(typeParameters, enclosingElement, parent, method.binding, nodeSet);", "+\t}", "+", "-\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, method.binding, level.intValue(), this);", "+\t\t\t\t\t\tthis.patternLocator.matchReportReference(node, enclosingElement, method.binding, method.scope, level.intValue(), this);"]}], "num": 3492}
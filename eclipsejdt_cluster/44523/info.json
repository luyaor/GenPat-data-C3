{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f1eb9ba2459465f2ea60d19ae887509", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0180a517d45fbb30aa833a7d10ebf736", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " private boolean resolveLevelAsSuperInvocation(ReferenceBinding type, TypeBinding[] argumentTypes, char[][][] superTypeNames, boolean methodAlreadyVerified)", "signatureAfterChange": " private boolean resolveLevelAsSuperInvocation(ReferenceBinding type, TypeBinding[] argumentTypes, char[][][] superTypeNames, boolean methodAlreadyVerified)", "diff": ["-\t\t\t\t\t\tif (parameters[k].erasure() != argumentTypes[k].erasure()) {", "+\t\t\t\t\t\tif (TypeBinding.notEquals(parameters[k].erasure(), argumentTypes[k].erasure())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0793e6207e3e2a761e7795d3bac0c5a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate TypeBinding internalResolveLeafType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveLeafType(Scope scope, boolean checkBounds)", "diff": ["-\t\t\t\tif (enclosingType != null && enclosingType.erasure() != qualifyingType.erasure()) { // qualifier != declaring/enclosing", "+\t\t\t\tif (enclosingType != null && TypeBinding.notEquals(enclosingType.erasure(), qualifyingType.erasure())) { // qualifier != declaring/enclosing"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09cc9dd0baacab8f5612a508432243f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-        \tif (this.binding.declaringClass != this.receiverType)", "+        \tif (TypeBinding.notEquals(this.binding.declaringClass, this.receiverType))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0af042324cd756ca495fb82ea77b354b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite, boolean needResolve)", "signatureAfterChange": " public FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite, boolean needResolve)", "diff": ["-\tif (!this.isConstructorCall || receiverType != enclosingSourceType())", "+\tif (!this.isConstructorCall || TypeBinding.notEquals(receiverType, enclosingSourceType()))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1243b2e9bec09af0ae10927fa844330f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " \tprotected final MethodBinding mostSpecificClassMethodBinding(MethodBinding[] visible, int visibleSize, InvocationSite invocationSite)", "signatureAfterChange": " \tprotected final MethodBinding mostSpecificClassMethodBinding(MethodBinding[] visible, int visibleSize, InvocationSite invocationSite)", "diff": ["-\t\t\tif (previous != null && method.declaringClass != previous.declaringClass)", "+\t\t\tif (previous != null && TypeBinding.notEquals(method.declaringClass, previous.declaringClass))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15d5089bbf48d9b7b22d199b33fec4be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": "  public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\tif (codegenBinding.isPrivate() && currentScope.enclosingSourceType() != (declaringClass = codegenBinding.declaringClass)) {", "+\tif (codegenBinding.isPrivate() && TypeBinding.notEquals(currentScope.enclosingSourceType(), (declaringClass = codegenBinding.declaringClass))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2822783b8292ac0914b6a5a5676bca8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\t\t        if (variableReturnType.firstBound != this.binding.returnType) { // no need for extra cast if same as first bound anyway", "+\t\t        if (TypeBinding.notEquals(variableReturnType.firstBound, this.binding.returnType)) { // no need for extra cast if same as first bound anyway"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d5a873b61a5fe8bf0bc9ac8dba2764a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["-\t\tif ((currentScope.enclosingSourceType() != codegenBinding.declaringClass)", "+\t\tif ((TypeBinding.notEquals(currentScope.enclosingSourceType(), codegenBinding.declaringClass))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3752b98318453c9d0117bf6ce1bbafd9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\tboolean hasNonNullDefault, boolean complain, MethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "signatureAfterChange": "  void checkNullSpecInheritance(MethodBinding currentMethod, AbstractMethodDeclaration srcMethod,  \t\tboolean hasNonNullDefault, boolean complain, MethodBinding inheritedMethod, Scope scope, InheritedNonNullnessInfo[] inheritedNonNullnessInfos)", "diff": ["-\tif (currentMethod.declaringClass != this.type ", "+\tif (TypeBinding.notEquals(currentMethod.declaringClass, this.type) "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a24e36ec98c29616a265393ced02016", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 139, "signatureBeforeChange": " public static TypeBinding getConstantPoolDeclaringClass(Scope currentScope, MethodBinding codegenBinding, TypeBinding actualReceiverType, boolean isImplicitThisReceiver)", "signatureAfterChange": " public static TypeBinding getConstantPoolDeclaringClass(Scope currentScope, MethodBinding codegenBinding, TypeBinding actualReceiverType, boolean isImplicitThisReceiver)", "diff": ["-\t\tif (constantPoolDeclaringClass != actualReceiverType.erasure() && !actualReceiverType.isArrayType()) {", "+\t\tif (TypeBinding.notEquals(constantPoolDeclaringClass, actualReceiverType.erasure()) && !actualReceiverType.isArrayType()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "432fb04b56ff93efd9fe9f2b98cadf25", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayInitializer.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedType)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeExpecting(BlockScope scope, TypeBinding expectedType)", "diff": ["-\t\t\t\tif (elementType != expressionType) // must call before computeConversion() and typeMismatchError()", "+\t\t\t\tif (TypeBinding.notEquals(elementType, expressionType)) // must call before computeConversion() and typeMismatchError()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44a7ce4b211352dbbe3c7037a049a8c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkInheritedMethods(MethodBinding[] methods, int length, boolean[] isOverridden)", "signatureAfterChange": " void checkInheritedMethods(MethodBinding[] methods, int length, boolean[] isOverridden)", "diff": ["-\t\t\t\t&& methods[i].declaringClass != this.type", "+\t\t\t\t&& TypeBinding.notEquals(methods[i].declaringClass, this.type)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44f4d41adce00b80d3af2840d492731d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate void verifyTypeReference(Expression reference, Expression typeReference, Scope scope, boolean source15, ReferenceBinding resolvedType, int modifiers)", "signatureAfterChange": "  \tprivate void verifyTypeReference(Expression reference, Expression typeReference, Scope scope, boolean source15, ReferenceBinding resolvedType, int modifiers)", "diff": ["-\t\t\t\t\t\tif ((!source15 && depth == 1) || topLevelType != topLevelScope.referenceContext.binding) {", "+\t\t\t\t\t\tif ((!source15 && depth == 1) || TypeBinding.notEquals(topLevelType, topLevelScope.referenceContext.binding)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "450e81372ddd115ddc4ea5f1bd9bac63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompoundAssignment.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\tif (unboxedType != lhsType) {", "+\t\t\t\tif (TypeBinding.notEquals(unboxedType, lhsType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47f29b25cc78f49d2a482836e315e06f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " void checkPackagePrivateAbstractMethod(MethodBinding abstractMethod)", "signatureAfterChange": " void checkPackagePrivateAbstractMethod(MethodBinding abstractMethod)", "diff": ["-\t} while ((superType = superType.superclass()) != abstractMethod.declaringClass);", "+\t} while (TypeBinding.notEquals((superType = superType.superclass()), abstractMethod.declaringClass));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a1627a280f7a04aaa1bf11358093715", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  private MethodBinding getMethodBinding(ReferenceBinding type, char[] methodName, TypeBinding[] argumentTypes)", "signatureAfterChange": "  private MethodBinding getMethodBinding(ReferenceBinding type, char[] methodName, TypeBinding[] argumentTypes)", "diff": ["-\t\t\t\tif (parameters[j].erasure() != argumentTypes[j].erasure()) {", "+\t\t\t\tif (TypeBinding.notEquals(parameters[j].erasure(), argumentTypes[j].erasure())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50ea52d0139effd3b2a6029df98cdb4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " private boolean isIndirectlyUsed()", "signatureAfterChange": " private boolean isIndirectlyUsed()", "diff": ["-\t\t\tif (this.resolvedType != this.expectedType)", "+\t\t\tif (TypeBinding.notEquals(this.resolvedType, this.expectedType))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52bd64148ca668b0987fe70b0264533a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public ReferenceBinding convertToParameterizedType(ReferenceBinding originalType)", "signatureAfterChange": " public ReferenceBinding convertToParameterizedType(ReferenceBinding originalType)", "diff": ["-\t\t\tneedToConvert |= originalEnclosingType != convertedEnclosingType;", "+\t\t\tneedToConvert |= TypeBinding.notEquals(originalEnclosingType, convertedEnclosingType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62b18da8dd475e17ac0e1a7b2e907be6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java", "commitBeforeChange": "82adc87bce1ed4088802638154568eeec8ab8e88", "commitAfterChange": "b1c69f20f23ddb575225e5b5cb5d470714f41aad", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "   \tprivate ConstraintTypeFormula[] deriveTypeArgumentConstraints(TypeBound boundS, TypeBound boundT)", "signatureAfterChange": "   \tprivate ConstraintTypeFormula[] deriveTypeArgumentConstraints(TypeBound boundS, TypeBound boundT)", "diff": ["-\t\tif (boundS.left != boundT.left) //$IDENTITY-COMPARISON$ InferenceVariable", "+\t\tif (TypeBinding.notEquals(boundS.left, boundT.left))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64176cfc6a9eaca1b56aae4e58335107", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t\tpublic TypeBinding substitute(TypeVariableBinding typeVariable)", "signatureAfterChange": " \t\tpublic TypeBinding substitute(TypeVariableBinding typeVariable)", "diff": ["-\t\t\tif (typeVariable.rank >= this.variables.length || this.variables[typeVariable.rank] != typeVariable) {   // not kosher, don't touch.", "+\t\t\tif (typeVariable.rank >= this.variables.length || TypeBinding.notEquals(this.variables[typeVariable.rank], typeVariable)) {   // not kosher, don't touch."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66934c5de8b1e37be1db08be30b602c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate TypeBinding internalResolveLeafType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveLeafType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "diff": ["-\t\t\tif (currentEnclosing != null && currentEnclosing.erasure() != enclosingType.erasure()) {", "+\t\t\tif (currentEnclosing != null && TypeBinding.notEquals(currentEnclosing.erasure(), enclosingType.erasure())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f3e0c07edaa56ad1b36a9d57dcfa4ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " boolean detectNameClash(MethodBinding current, MethodBinding inherited, boolean treatAsSynthetic)", "signatureAfterChange": " boolean detectNameClash(MethodBinding current, MethodBinding inherited, boolean treatAsSynthetic)", "diff": ["-\t\tif (current.returnType.erasure() != original.returnType.erasure())", "+\t\tif (TypeBinding.notEquals(current.returnType.erasure(), original.returnType.erasure()))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71543c99e37513ae2108d14a2a33c9e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public ReferenceBinding[] convertToRawTypes(ReferenceBinding[] originalTypes, boolean forceErasure, boolean forceRawEnclosingType)", "signatureAfterChange": " public ReferenceBinding[] convertToRawTypes(ReferenceBinding[] originalTypes, boolean forceErasure, boolean forceRawEnclosingType)", "diff": ["-        if (convertedType != originalType) {        ", "+        if (TypeBinding.notEquals(convertedType, originalType)) {        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76f6ef679610d14e589f86dd95203109", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\t\t\t\t\t\tif (initialFieldBinding.declaringClass != this.actualReceiverType.erasure()) {", "+\t\t\t\t\t\t\t\tif (TypeBinding.notEquals(initialFieldBinding.declaringClass, this.actualReceiverType.erasure())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ca54e42f094ec76964631e4828a65c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "signatureAfterChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "diff": ["-\t\t\t\t\tif (existingMethod.declaringClass != inheritedMethod.declaringClass && areMethodsCompatible(existingMethod, inheritedMethod) && !canOverridingMethodDifferInErasure(existingMethod, inheritedMethod)) {", "+\t\t\t\t\tif (TypeBinding.notEquals(existingMethod.declaringClass, inheritedMethod.declaringClass) && areMethodsCompatible(existingMethod, inheritedMethod) && !canOverridingMethodDifferInErasure(existingMethod, inheritedMethod)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e2d12dc6680f3cb37380d8cb21f352c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate static int checkInvocationArgument(BlockScope scope, Expression argument, TypeBinding parameterType, TypeBinding argumentType, TypeBinding originalParameterType)", "signatureAfterChange": " \tprivate static int checkInvocationArgument(BlockScope scope, Expression argument, TypeBinding parameterType, TypeBinding argumentType, TypeBinding originalParameterType)", "diff": ["-\t\tif (argumentType != checkedParameterType && argumentType.needsUncheckedConversion(checkedParameterType)) {", "+\t\tif (TypeBinding.notEquals(argumentType, checkedParameterType) && argumentType.needsUncheckedConversion(checkedParameterType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f2acc20f016ab724dd4f278a565b93f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 214, "methodNumberAfterChange": 214, "signatureBeforeChange": " \tprivate void findVariableNames(char[] name, TypeReference type , char[][] discouragedNames, char[][] forbiddenNames, int kind)", "signatureAfterChange": " \tprivate void findVariableNames(char[] name, TypeReference type , char[][] discouragedNames, char[][] forbiddenNames, int kind)", "diff": ["-\t\t\t\t\ttb != Scope.getBaseType(VOID)) {", "+\t\t\t\t\tTypeBinding.notEquals(tb, Scope.getBaseType(VOID))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f2fd9e93760a43621d67b692fa6e02a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": "  public void duplicateInheritedMethods(SourceTypeBinding type, MethodBinding inheritedMethod1, MethodBinding inheritedMethod2)", "signatureAfterChange": "  public void duplicateInheritedMethods(SourceTypeBinding type, MethodBinding inheritedMethod1, MethodBinding inheritedMethod2)", "diff": ["-\tif (inheritedMethod1.declaringClass != inheritedMethod2.declaringClass) {", "+\tif (TypeBinding.notEquals(inheritedMethod1.declaringClass, inheritedMethod2.declaringClass)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "841a2f0bb19c1698fbeed45b59cc8d20", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public void resolve(MethodScope initializationScope)", "signatureAfterChange": "  public void resolve(MethodScope initializationScope)", "diff": ["-\t\t\t\tif (fieldType != initializationType) // must call before computeConversion() and typeMismatchError()", "+\t\t\t\tif (TypeBinding.notEquals(fieldType, initializationType)) // must call before computeConversion() and typeMismatchError()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84d1fbc913ca98e44d2ab465ad227a32", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "signatureAfterChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "diff": ["-\tif (originalInherited.returnType != currentMethod.returnType)", "+\tif (TypeBinding.notEquals(originalInherited.returnType, currentMethod.returnType))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "856b8e3f7e70e65d77f29a87a4c1f6e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public void resolve(BlockScope scope)", "signatureAfterChange": "  public void resolve(BlockScope scope)", "diff": ["-\tif (methodType != expressionType) // must call before computeConversion() and typeMismatchError()", "+\tif (TypeBinding.notEquals(methodType, expressionType)) // must call before computeConversion() and typeMismatchError()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "889e06ed1421cd9f9393d1620e60e185", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 138, "methodNumberAfterChange": 138, "signatureBeforeChange": " public static TypeBinding getConstantPoolDeclaringClass(Scope currentScope, FieldBinding codegenBinding, TypeBinding actualReceiverType, boolean isImplicitThisReceiver)", "signatureAfterChange": " public static TypeBinding getConstantPoolDeclaringClass(Scope currentScope, FieldBinding codegenBinding, TypeBinding actualReceiverType, boolean isImplicitThisReceiver)", "diff": ["-\tif (constantPoolDeclaringClass != actualReceiverType.erasure()", "+\tif (TypeBinding.notEquals(constantPoolDeclaringClass, actualReceiverType.erasure())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bd1050b34fdaa0557fe9e1de9ad1abb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\t\t\t\t\t\tif (initialFieldBinding.declaringClass != this.actualReceiverType.erasure()) {", "+\t\t\t\t\t\t\t\tif (TypeBinding.notEquals(initialFieldBinding.declaringClass, this.actualReceiverType.erasure())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "935b15a76571a5e941be5900ba71d770", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  public MethodBinding findOriginalInheritedMethod(MethodBinding inheritedMethod)", "signatureAfterChange": "  public MethodBinding findOriginalInheritedMethod(MethodBinding inheritedMethod)", "diff": ["-\tif (inheritedOriginal.declaringClass != superType) {", "+\tif (TypeBinding.notEquals(inheritedOriginal.declaringClass, superType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9890eff9b7cd012d52ec99dfcc7022e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 192, "methodNumberAfterChange": 192, "signatureBeforeChange": "  \tprivate void findTrueOrFalseKeywords(char[][] choices)", "signatureAfterChange": "  \tprivate void findTrueOrFalseKeywords(char[][] choices)", "diff": ["-\t\tif(this.expectedTypesPtr != 0 || this.expectedTypes[0] != TypeBinding.BOOLEAN) return;", "+\t\tif(this.expectedTypesPtr != 0 || TypeBinding.notEquals(this.expectedTypes[0], TypeBinding.BOOLEAN)) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f8c5aebd21d96335bc56454e663a33b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, int index, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, int index, FlowInfo flowInfo)", "diff": ["-\t\tif (declaringClass != currentScope.enclosingSourceType()) {", "+\t\tif (TypeBinding.notEquals(declaringClass, currentScope.enclosingSourceType())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4dcf26aa7f421b7e02539b61a5262c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tint findCompatibleEnclosing(ReferenceBinding enclosingType, TypeBinding type)", "signatureAfterChange": "  \tint findCompatibleEnclosing(ReferenceBinding enclosingType, TypeBinding type)", "diff": ["-\t\twhile (this.currentCompatibleType != null && this.currentCompatibleType != type) {", "+\t\twhile (this.currentCompatibleType != null && TypeBinding.notEquals(this.currentCompatibleType, type)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a508bb72fe696af26196fd3d870962c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 129, "signatureBeforeChange": "  public void generateSyntheticBodyForMethodAccess(SyntheticMethodBinding accessMethod)", "signatureAfterChange": "  public void generateSyntheticBodyForMethodAccess(SyntheticMethodBinding accessMethod)", "diff": ["-\t\t\tif (argument != parameter)", "+\t\t\tif (TypeBinding.notEquals(argument, parameter))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac95668efa9f5058382936e3a78c8dd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\tif (annotatedCast || (needRuntimeCheckcast && this.expression.postConversionType(currentScope) != this.resolvedType.erasure())) { // no need to issue a checkcast if already done as genericCast", "+\tif (annotatedCast || (needRuntimeCheckcast && TypeBinding.notEquals(this.expression.postConversionType(currentScope), this.resolvedType.erasure()))) { // no need to issue a checkcast if already done as genericCast"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0d57dc536a469fa922591ff0ad8b313", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t\t\tif (this.binding.original().declaringClass != this.actualReceiverType.erasure()) {", "+\t\t\t\tif (TypeBinding.notEquals(this.binding.original().declaringClass, this.actualReceiverType.erasure())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b40f92d5cf0d93fe301ca1360de44a54", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate TypeBinding resolveTypeForQualifiedAllocationExpression(BlockScope scope)", "signatureAfterChange": " \t \tprivate TypeBinding resolveTypeForQualifiedAllocationExpression(BlockScope scope)", "diff": ["-\t\t\tif (expectedType != enclosingInstanceType) // must call before computeConversion() and typeMismatchError()", "+\t\t\tif (TypeBinding.notEquals(expectedType, enclosingInstanceType)) // must call before computeConversion() and typeMismatchError()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b85cc916a3662d2c06271a30499c3c5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \tpublic void resolve(BlockScope scope)", "diff": ["-\t\t\t\t\tif (variableType != initializationType) // must call before computeConversion() and typeMismatchError()", "+\t\t\t\t\tif (TypeBinding.notEquals(variableType, initializationType)) // must call before computeConversion() and typeMismatchError()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d498aaef35fbe97ce4d166f370d4a559", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  void checkMethods()", "signatureAfterChange": "  void checkMethods()", "diff": ["-\t\t\t\tif (inheritedMethod.declaringClass != otherInheritedMethod.declaringClass) {", "+\t\t\t\tif (TypeBinding.notEquals(inheritedMethod.declaringClass, otherInheritedMethod.declaringClass)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d710787bde82cc3fbfec6ff51146c3ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo)", "diff": ["-\t\tif (currentScope.enclosingSourceType() != codegenBinding.declaringClass){", "+\t\tif (TypeBinding.notEquals(currentScope.enclosingSourceType(), codegenBinding.declaringClass)){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7b82d0b09344528b021ed1b1134e29a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 104, "signatureBeforeChange": "\t \tpublic int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments, boolean tiebreakingVarargsMethods)", "signatureAfterChange": "\t \tpublic int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments, boolean tiebreakingVarargsMethods)", "diff": ["-\t\t\tif (arg != param) {", "+\t\t\tif (TypeBinding.notEquals(arg,param)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de2055f42824c160618f21ea3ef70d84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/Factory.java", "commitBeforeChange": "017f9918b88fff3a8fea9daac2df2ba8b7e560d6", "commitAfterChange": "5066a165665c172193991ef548a06f9b6acd680e", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic static AnnotationBinding [] getPackedAnnotationBindings(AnnotationBinding [] annotations)", "signatureAfterChange": " \tpublic static AnnotationBinding [] getPackedAnnotationBindings(AnnotationBinding [] annotations)", "diff": ["-\t\t\tif (value.returnType == null || value.returnType.dimensions() != 1 || value.returnType.leafComponentType() != annotationType)", "+\t\t\tif (value.returnType == null || value.returnType.dimensions() != 1 || TypeBinding.notEquals(value.returnType.leafComponentType(), annotationType))", "-\t\t\t\tif (otherAnnotation.getAnnotationType() == annotationType) {", "+\t\t\t\tif (otherAnnotation.getAnnotationType() == annotationType) { //$IDENTITY-COMPARISON$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4135883a1f8e07e25e9a456b65f69de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic char[] computeUniqueKey(boolean isLeaf)", "signatureAfterChange": "  \tpublic char[] computeUniqueKey(boolean isLeaf)", "diff": ["-\t\tif (captureSourceType != null && captureSourceType != this.type) {", "+\t\tif (captureSourceType != null && TypeBinding.notEquals(captureSourceType, this.type)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e640ccb3b1bfa86aa5f38bcb5a7f5d0c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif (expressionType != castType) {", "+\t\t\tif (TypeBinding.notEquals(expressionType, castType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eca7c122c71f834b7ee614deaec029ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public final boolean allowBlankFinalFieldAssignment(FieldBinding binding)", "signatureAfterChange": " public final boolean allowBlankFinalFieldAssignment(FieldBinding binding)", "diff": ["-\tif (enclosingReceiverType() != binding.declaringClass)", "+\tif (TypeBinding.notEquals(enclosingReceiverType(), binding.declaringClass))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edf62b21dc4876a81400d2ab6563af73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocMessageSend.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\t\t\tif (this.binding.parameters[i].erasure() != argumentTypes[i].erasure()) {", "+\t\t\t\tif (TypeBinding.notEquals(this.binding.parameters[i].erasure(), argumentTypes[i].erasure())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa41282154dcdb160f180adea21ca623", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 230, "methodNumberAfterChange": 230, "signatureBeforeChange": " \tprivate boolean mustQualifyType(ReferenceBinding type, char[] packageName, Scope scope)", "signatureAfterChange": " \tprivate boolean mustQualifyType(ReferenceBinding type, char[] packageName, Scope scope)", "diff": ["-\t\t\t\t\t\t\treturn memberTypes[i] != type;", "+\t\t\t\t\t\t\treturn TypeBinding.notEquals(memberTypes[i], type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fca82855833933000b1058e077836cc9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tif (lhsType != rhsType) { // must call before computeConversion() and typeMismatchError()", "+\tif (TypeBinding.notEquals(lhsType, rhsType)) { // must call before computeConversion() and typeMismatchError()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fce7068b1307bb9ef9bad56d20366bdb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public TypeBinding erasure()", "signatureAfterChange": " public TypeBinding erasure()", "diff": ["-    if (this.leafComponentType != erasedType)", "+    if (TypeBinding.notEquals(this.leafComponentType, erasedType))"]}], "num": 44523}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57178e8ba341ac1208ae4e4232e0efca", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "564a193d2c3e409b69dc3032d0634b56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "b217112507f53a311f9d32f09e4f736a9ed00294", "commitAfterChange": "7eb499e0531ac46b3d11960000ddd11e09bd5a0f", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic boolean updateCurrentDeltaAndIndex(IResourceDelta delta, int elementType, RootInfo rootInfo)", "signatureAfterChange": " \tpublic boolean updateCurrentDeltaAndIndex(IResourceDelta delta, int elementType, RootInfo rootInfo)", "diff": ["-\t\t\t\telement = this.createElement(deltaRes, elementType, rootInfo);", "+\t\t\t\telement = createElement(deltaRes, elementType, rootInfo);", "-\t\t\t\tthis.updateIndex(element, delta);", "-\t\t\t\tthis.elementAdded(element, delta, rootInfo);", "+\t\t\t\tupdateIndex(element, delta);", "+\t\t\t\t", "+\t\t\t\t// filter out changes to primary compilation unit in working copy mode", "+\t\t\t\tif (!isPrimaryWorkingCopy(element, elementType)) {", "+\t\t\t\t\telementAdded(element, delta, rootInfo);", "+\t\t\t\t}", "-\t\t\t\telement = this.createElement(deltaRes, elementType, rootInfo);", "+\t\t\t\telement = createElement(deltaRes, elementType, rootInfo);", "-\t\t\t\tthis.updateIndex(element, delta);", "-\t\t\t\tthis.elementRemoved(element, delta, rootInfo);", "+\t\t\t\tupdateIndex(element, delta);", "+", "+\t\t\t\t// filter out changes to primary compilation unit in working copy mode", "+\t\t\t\tif (!isPrimaryWorkingCopy(element, elementType)) {", "+\t\t\t\t\telementRemoved(element, delta, rootInfo);", "+\t\t\t\t}", "-\t\t\t\t\telement = this.createElement(delta.getResource(), elementType, rootInfo);", "+\t\t\t\t\telement = createElement(delta.getResource(), elementType, rootInfo);", "-\t\t\t\t\tthis.updateIndex(element, delta);", "-\t\t\t\t\tthis.contentChanged(element);", "+\t\t\t\t\tupdateIndex(element, delta);", "+\t\t\t\t\t", "+\t\t\t\t\t// filter out changes to primary compilation unit in working copy mode", "+\t\t\t\t\tif (!isPrimaryWorkingCopy(element, elementType)) {", "+\t\t\t\t\t\tcontentChanged(element);", "+\t\t\t\t\t}", "-\t\t\t\t\t\telement = this.createElement(res, elementType, rootInfo);", "+\t\t\t\t\t\telement = createElement(res, elementType, rootInfo);", "-\t\t\t\t\t\t\t\tthis.elementAdded(element, delta, rootInfo);", "+\t\t\t\t\t\t\t\telementAdded(element, delta, rootInfo);", "-\t\t\t\t\t\t\t\tthis.elementRemoved(element, delta, rootInfo);", "+\t\t\t\t\t\t\t\telementRemoved(element, delta, rootInfo);", "-\t\t\t\t\t\t\t\tthis.elementAdded(element, delta, rootInfo);", "+\t\t\t\t\t\t\t\telementAdded(element, delta, rootInfo);", "-\t\t\t\t\t\t\t\tthis.elementRemoved(element, delta, rootInfo);", "+\t\t\t\t\t\t\t\telementRemoved(element, delta, rootInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0d2c5bc639eb61966db1f28acb3164a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java", "commitBeforeChange": "b7ee6a874c851c7037f430220f1f330c599f0f24", "commitAfterChange": "fd8bd5ea880929603f28ff251e5d5a9e772d3c8b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\tif (this.action == null", "-\t\t\t\t|| this.action.isEmptyBlock()", "-\t\t\t\t|| ((this.action.bits & IsUsefulEmptyStatement) != 0)) {", "-\t\t\tcodeStream.exitUserScope(scope);", "-\t\t\tif (mergedInitStateIndex != -1) {", "-\t\t\t\tcodeStream.removeNotDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);", "-\t\t\t\tcodeStream.addDefinitelyAssignedVariables(currentScope, mergedInitStateIndex);\t\t\t\t", "-\t\t\t}", "-\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t\t\treturn;", "-\t\t}", "+\t\tfinal boolean hasEmptyAction = this.action == null", "+\t\t\t|| this.action.isEmptyBlock()", "+\t\t\t|| ((this.action.bits & IsUsefulEmptyStatement) != 0);", "+", "+\t\t\t\tif (hasEmptyAction) {", "+\t\t\t\t\tcollection.generateCode(scope, codeStream, false);", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "-\t\t", "+\t\t\t\t\tif (hasEmptyAction) break;", "-\t\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "+\t\t\t\t\tif (hasEmptyAction && !codeStream.preserveUnusedLocals) {", "+\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcodeStream.store(this.elementVariable.binding, false);", "+\t\t\t\t\t}", "-\t\tthis.action.generateCode(scope, codeStream);", "+", "+\t\tif (!hasEmptyAction) {", "+\t\t\tthis.action.generateCode(scope, codeStream);", "+\t\t}", "+\t\t\t\t\tif (hasEmptyAction) break;", "+\t\t\t\tif (hasEmptyAction) break;"]}], "num": 13558}
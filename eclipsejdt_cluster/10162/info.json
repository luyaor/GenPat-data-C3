{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6aa4ef6a3c274b13f3a25a744fb2d98c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "095632c0d9266064b0caa32ee7fb4229", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "cf072eeff121940a541295553114f490c9a9bb69", "commitAfterChange": "9617178877607b049b1a7c4f92c93a8d11facd28", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tpublic boolean visit( \t\tArrayQualifiedTypeReference arrayQualifiedTypeReference, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tArrayQualifiedTypeReference arrayQualifiedTypeReference, \t\tBlockScope scope)", "diff": ["-\t\t\tfinal int numberOfParens = (arrayQualifiedTypeReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "-\t\t\tif (numberOfParens > 0) {", "-\t\t\t\tmanageOpeningParenthesizedExpression(arrayQualifiedTypeReference, numberOfParens);", "-\t\t\t}", "-\t\t\tthis.scribe.printArrayQualifiedReference(arrayQualifiedTypeReference.tokens.length, arrayQualifiedTypeReference.sourceEnd);", "-\t\t\tint dimensions = getDimensions();", "-\t\t\tif (dimensions != 0) {", "-\t\t\t\tfor (int i = 0; i < dimensions; i++) {", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (numberOfParens > 0) {", "-\t\t\t\tmanageClosingParenthesizedExpression(arrayQualifiedTypeReference, numberOfParens);", "-\t\t\t}", "+\t\t\tformatArrayQualifiedTypeReference(arrayQualifiedTypeReference);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ad71e182826c686219840af1814926f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tpublic boolean visit(ArrayReference arrayReference, BlockScope scope)", "signatureAfterChange": " \tpublic boolean visit(AnnotationTypeDeclaration annotationTypeDeclaration, \t\t\tCompilationUnitScope scope)", "diff": ["+\t}", "+\tpublic boolean visit(AnnotationTypeDeclaration annotationTypeDeclaration,", "+\t\t\tCompilationUnitScope scope) {", "+\t\tformat(annotationTypeDeclaration);", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4aeb86e42c79586d7621fd2519f7ea7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "fe98ddbed4cd1f8bb449a78291ed05ed04f18196", "commitAfterChange": "afe1aa1e23ce83b573f50388f1a50d564fe4b851", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 64, "signatureBeforeChange": " \tpublic boolean visit( \t\tArrayQualifiedTypeReference arrayQualifiedTypeReference, \t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tArrayQualifiedTypeReference arrayQualifiedTypeReference, \t\tClassScope scope)", "diff": ["-\t\t\tfinal int numberOfParens = (arrayQualifiedTypeReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "-\t\t\tif (numberOfParens > 0) {", "-\t\t\t\tmanageOpeningParenthesizedExpression(arrayQualifiedTypeReference, numberOfParens);", "-\t\t\t}", "-\t\t\tthis.scribe.printArrayQualifiedReference(arrayQualifiedTypeReference.tokens.length, arrayQualifiedTypeReference.sourceEnd);", "-\t\t\tint dimensions = getDimensions();", "-\t\t\tif (dimensions != 0) {", "-\t\t\t\tfor (int i = 0; i < dimensions; i++) {", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (numberOfParens > 0) {", "-\t\t\t\tmanageClosingParenthesizedExpression(arrayQualifiedTypeReference, numberOfParens);", "-\t\t\t}", "+\t\t\tformatArrayQualifiedTypeReference(arrayQualifiedTypeReference);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9255a54c5aa743c2055a76279745e921", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AnnotationTypeMemberDeclaration.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void traverse( \t\tASTVisitor visitor, \t\tClassScope classScope)", "signatureAfterChange": "  \tpublic void traverse( \t\tASTVisitor visitor, \t\tClassScope classScope)", "diff": ["-\t\t\tif (returnType != null)", "+\t\t\tif (returnType != null) {", "-\t\t\tif (arguments != null) {", "-\t\t\t\tint argumentLength = arguments.length;", "-\t\t\t\tfor (int i = 0; i < argumentLength; i++)", "-\t\t\t\t\targuments[i].traverse(visitor, scope);", "-\t\t\tif (thrownExceptions != null) {", "-\t\t\t\tint thrownExceptionsLength = thrownExceptions.length;", "-\t\t\t\tfor (int i = 0; i < thrownExceptionsLength; i++)", "-\t\t\t\t\tthrownExceptions[i].traverse(visitor, scope);", "-\t\t\t}", "-\t\t\tif (statements != null) {", "-\t\t\t\tint statementsLength = statements.length;", "-\t\t\t\tfor (int i = 0; i < statementsLength; i++)", "-\t\t\t\t\tstatements[i].traverse(visitor, scope);", "+\t\t\tif (memberValue != null) {", "+\t\t\t\tmemberValue.traverse(visitor, scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b0bdddb67d191f43ebd05a3ab16c87f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "fe98ddbed4cd1f8bb449a78291ed05ed04f18196", "commitAfterChange": "afe1aa1e23ce83b573f50388f1a50d564fe4b851", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic boolean visit( \t\tArrayQualifiedTypeReference arrayQualifiedTypeReference, \t\tBlockScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\t\tArrayQualifiedTypeReference arrayQualifiedTypeReference, \t\t\tBlockScope scope)", "diff": ["-\t\tArrayQualifiedTypeReference arrayQualifiedTypeReference,", "-\t\tBlockScope scope) {", "+\t\t\tArrayQualifiedTypeReference arrayQualifiedTypeReference,", "+\t\t\tBlockScope scope) {", "-\t\t\tfinal int numberOfParens = (arrayQualifiedTypeReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "-\t\t\tif (numberOfParens > 0) {", "-\t\t\t\tmanageOpeningParenthesizedExpression(arrayQualifiedTypeReference, numberOfParens);", "-\t\t\t}", "-\t\t\tthis.scribe.printArrayQualifiedReference(arrayQualifiedTypeReference.tokens.length, arrayQualifiedTypeReference.sourceEnd);", "-\t\t\tint dimensions = getDimensions();", "-\t\t\tif (dimensions != 0) {", "-\t\t\t\tfor (int i = 0; i < dimensions; i++) {", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (numberOfParens > 0) {", "-\t\t\t\tmanageClosingParenthesizedExpression(arrayQualifiedTypeReference, numberOfParens);", "-\t\t\t}", "+\t\t\tformatArrayQualifiedTypeReference(arrayQualifiedTypeReference);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba1131e97d99dbf67c91d00552f3a044", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "849bead878c9a40a476fb6736e2c949015040926", "commitAfterChange": "ffce987f3a5cbc5edb4057595c44a9095dbf9c81", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tpublic boolean visit( \t\tArrayQualifiedTypeReference arrayQualifiedTypeReference, \t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit(AnnotationTypeDeclaration annotationTypeDeclaration, \t\t\tClassScope scope)", "diff": ["+\t}", "+\tpublic boolean visit(AnnotationTypeDeclaration annotationTypeDeclaration,", "+\t\t\tClassScope scope) {", "+\t\tformat(annotationTypeDeclaration);", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c207cca76f67e3ab1cb0ef43848fda69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "cf072eeff121940a541295553114f490c9a9bb69", "commitAfterChange": "9617178877607b049b1a7c4f92c93a8d11facd28", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tpublic boolean visit( \t\tArrayQualifiedTypeReference arrayQualifiedTypeReference, \t\tClassScope scope)", "signatureAfterChange": " \tpublic boolean visit( \t\tArrayQualifiedTypeReference arrayQualifiedTypeReference, \t\tClassScope scope)", "diff": ["-\t\t\tfinal int numberOfParens = (arrayQualifiedTypeReference.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "-\t\t\tif (numberOfParens > 0) {", "-\t\t\t\tmanageOpeningParenthesizedExpression(arrayQualifiedTypeReference, numberOfParens);", "-\t\t\t}", "-\t\t\tthis.scribe.printArrayQualifiedReference(arrayQualifiedTypeReference.tokens.length, arrayQualifiedTypeReference.sourceEnd);", "-\t\t\tint dimensions = getDimensions();", "-\t\t\tif (dimensions != 0) {", "-\t\t\t\tfor (int i = 0; i < dimensions; i++) {", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameLBRACKET);", "-\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameRBRACKET);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (numberOfParens > 0) {", "-\t\t\t\tmanageClosingParenthesizedExpression(arrayQualifiedTypeReference, numberOfParens);", "-\t\t\t}", "+\t\t\tformatArrayQualifiedTypeReference(arrayQualifiedTypeReference);"]}], "num": 10162}
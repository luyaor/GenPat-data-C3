{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a3bb73d82120725520157d0145179cb1", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3030b963479f82eaa1b28fdeff885838", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r void setOption(ConfigurableOption setting)", "signatureAfterChange": "\r void setOption(ConfigurableOption setting)", "diff": ["-\tString componentName = Compiler.class.getName();\r", "-\tString optionID = setting.getID();\r", "-\t\r", "-\tif(optionID.equals(OPTION_LocalVariableAttribute)){\r", "-\t\tif (setting.getValueIndex() == 0) {\r", "-\t\t\t// set the debug flag with Vars.\r", "-\t\t\tproduceDebugAttributes |= Vars;\r", "-\t\t} else {\r", "-\t\t\tproduceDebugAttributes &= ~Vars;\r", "-\t\t}\r", "-\t} else if(optionID.equals(OPTION_LineNumberAttribute)) {\r", "-\t\tif (setting.getValueIndex() == 0) {\r", "-\t\t\t// set the debug flag with Lines\r", "-\t\t\tproduceDebugAttributes |= Lines;\r", "-\t\t} else {\r", "-\t\t\tproduceDebugAttributes &= ~Lines;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_SourceFileAttribute)) {\r", "-\t\tif (setting.getValueIndex() == 0) {\r", "-\t\t\t// set the debug flag with Source.\r", "-\t\t\tproduceDebugAttributes |= Source;\r", "-\t\t} else {\r", "-\t\t\tproduceDebugAttributes &= ~Source;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_PreserveUnusedLocal)){\r", "-\t\tpreserveAllLocalVariables(setting.getValueIndex() == 0);\r", "-\t}else if(optionID.equals(OPTION_ReportUnreachableCode)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetUnreachableCodeSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetUnreachableCodeSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 : \r", "-\t\t\t\tsetUnreachableCodeSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportInvalidImport)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetImportProblemSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetImportProblemSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetImportProblemSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_TargetPlatform)){\r", "-\t\tsetTargetJDK(setting.getValueIndex() == 0 ? JDK1_1 : JDK1_2);\r", "-\t}else if(optionID.equals(OPTION_ReportMethodWithConstructorName)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetMethodWithConstructorNameSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetMethodWithConstructorNameSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetMethodWithConstructorNameSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportOverridingPackageDefaultMethod)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetOverriddenPackageDefaultMethodSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetOverriddenPackageDefaultMethodSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetOverriddenPackageDefaultMethodSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportDeprecation)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetDeprecationUseSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetDeprecationUseSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetDeprecationUseSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportHiddenCatchBlock)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetMaskedCatchBlockSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetMaskedCatchBlockSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetMaskedCatchBlockSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportUnusedLocal)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetUnusedLocalVariableSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetUnusedLocalVariableSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetUnusedLocalVariableSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportUnusedParameter)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetUnusedArgumentSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetUnusedArgumentSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetUnusedArgumentSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportSyntheticAccessEmulation)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetAccessEmulationSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetAccessEmulationSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetAccessEmulationSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportNonExternalizedStringLiteral)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetNonExternalizedStringLiteralSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetNonExternalizedStringLiteralSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetNonExternalizedStringLiteralSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportAssertIdentifier)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetAssertIdentifierSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetAssertIdentifierSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetAssertIdentifierSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_Source)){\r", "-\t\tsetAssertMode(setting.getValueIndex() == 1);\r", "+\tswitch (setting.getID()) {\r", "+\t\tcase 1 : // Local variable table attribute\r", "+\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "+\t\t\t\t// set the debug flag with Vars.\r", "+\t\t\t\tproduceDebugAttributes |= Vars;\r", "+\t\t\t} else {\r", "+\t\t\t\tproduceDebugAttributes &= ~Vars;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase 2 : // Line number attribute\r", "+\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "+\t\t\t\t// set the debug flag with Lines\r", "+\t\t\t\tproduceDebugAttributes |= Lines;\r", "+\t\t\t} else {\r", "+\t\t\t\tproduceDebugAttributes &= ~Lines;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase 3 : // source file attribute\r", "+\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "+\t\t\t\t// set the debug flag with Source.\r", "+\t\t\t\tproduceDebugAttributes |= Source;\r", "+\t\t\t} else {\r", "+\t\t\t\tproduceDebugAttributes &= ~Source;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase 4 : // preserveAllLocals flag\r", "+\t\t\tpreserveAllLocalVariables(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 5 : // unreachable code reported as error\r", "+\t\t\thandleUnreachableCodeAsError(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 6 : // invalid import\r", "+\t\t\thandleImportProblemAsError(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 7 : // methods with constructor name\r", "+\t\t\thandleMethodWithConstructorNameAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 8 : // overridden package default method\r", "+\t\t\thandleOverriddenPackageDefaultMethodAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 9 : // use of deprecated API\r", "+\t\t\thandleDeprecationUseAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 10 : // catch block hidden by another one\r", "+\t\t\thandleMaskedCatchBlockAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 11 : // local variable not used\r", "+\t\t\thandleUnusedLocalVariableAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 12 : // argument not used\r", "+\t\t\thandleUnusedArgumentAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 13 : // temporary warning\r", "+\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "+\t\t\t\twarningThreshold |= TemporaryWarning;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase 14 : // target JDK\r", "+\t\t\tsetTargetJDK(setting.getCurrentValueIndex() == 0 ? JDK1_1 : JDK1_2);\r", "+\t\t\tbreak;\r", "+\t\tcase 15: // synthetic access emulation\r", "+\t\t\thandleAccessEmulationAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 16: // non externalized string literal\r", "+\t\t\thandleNonExternalizedStringLiteralAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc471a3b68d0eeaca113e676ff4ac28a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r void setOption(ConfigurableOption setting)", "signatureAfterChange": "\r void setOption(ConfigurableOption setting)", "diff": ["-\tString componentName = Compiler.class.getName();\r", "-\tString optionID = setting.getID();\r", "-\t\r", "-\tif(optionID.equals(OPTION_LocalVariableAttribute)){\r", "-\t\tif (setting.getValueIndex() == 0) {\r", "-\t\t\t// set the debug flag with Vars.\r", "-\t\t\tproduceDebugAttributes |= Vars;\r", "-\t\t} else {\r", "-\t\t\tproduceDebugAttributes &= ~Vars;\r", "-\t\t}\r", "-\t} else if(optionID.equals(OPTION_LineNumberAttribute)) {\r", "-\t\tif (setting.getValueIndex() == 0) {\r", "-\t\t\t// set the debug flag with Lines\r", "-\t\t\tproduceDebugAttributes |= Lines;\r", "-\t\t} else {\r", "-\t\t\tproduceDebugAttributes &= ~Lines;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_SourceFileAttribute)) {\r", "-\t\tif (setting.getValueIndex() == 0) {\r", "-\t\t\t// set the debug flag with Source.\r", "-\t\t\tproduceDebugAttributes |= Source;\r", "-\t\t} else {\r", "-\t\t\tproduceDebugAttributes &= ~Source;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_PreserveUnusedLocal)){\r", "-\t\tpreserveAllLocalVariables(setting.getValueIndex() == 0);\r", "-\t}else if(optionID.equals(OPTION_ReportUnreachableCode)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetUnreachableCodeSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetUnreachableCodeSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 : \r", "-\t\t\t\tsetUnreachableCodeSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportInvalidImport)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetImportProblemSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetImportProblemSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetImportProblemSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_TargetPlatform)){\r", "-\t\tsetTargetJDK(setting.getValueIndex() == 0 ? JDK1_1 : JDK1_2);\r", "-\t}else if(optionID.equals(OPTION_ReportMethodWithConstructorName)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetMethodWithConstructorNameSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetMethodWithConstructorNameSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetMethodWithConstructorNameSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportOverridingPackageDefaultMethod)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetOverriddenPackageDefaultMethodSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetOverriddenPackageDefaultMethodSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetOverriddenPackageDefaultMethodSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportDeprecation)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetDeprecationUseSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetDeprecationUseSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetDeprecationUseSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportHiddenCatchBlock)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetMaskedCatchBlockSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetMaskedCatchBlockSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetMaskedCatchBlockSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportUnusedLocal)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetUnusedLocalVariableSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetUnusedLocalVariableSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetUnusedLocalVariableSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportUnusedParameter)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetUnusedArgumentSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetUnusedArgumentSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetUnusedArgumentSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportSyntheticAccessEmulation)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetAccessEmulationSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetAccessEmulationSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetAccessEmulationSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportNonExternalizedStringLiteral)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetNonExternalizedStringLiteralSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetNonExternalizedStringLiteralSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetNonExternalizedStringLiteralSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportAssertIdentifier)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetAssertIdentifierSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetAssertIdentifierSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetAssertIdentifierSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_Source)){\r", "-\t\tsetAssertMode(setting.getValueIndex() == 1);\r", "+\tswitch (setting.getID()) {\r", "+\t\tcase 1 : // Local variable table attribute\r", "+\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "+\t\t\t\t// set the debug flag with Vars.\r", "+\t\t\t\tproduceDebugAttributes |= Vars;\r", "+\t\t\t} else {\r", "+\t\t\t\tproduceDebugAttributes &= ~Vars;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase 2 : // Line number attribute\r", "+\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "+\t\t\t\t// set the debug flag with Lines\r", "+\t\t\t\tproduceDebugAttributes |= Lines;\r", "+\t\t\t} else {\r", "+\t\t\t\tproduceDebugAttributes &= ~Lines;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase 3 : // source file attribute\r", "+\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "+\t\t\t\t// set the debug flag with Source.\r", "+\t\t\t\tproduceDebugAttributes |= Source;\r", "+\t\t\t} else {\r", "+\t\t\t\tproduceDebugAttributes &= ~Source;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase 4 : // preserveAllLocals flag\r", "+\t\t\tpreserveAllLocalVariables(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 5 : // unreachable code reported as error\r", "+\t\t\thandleUnreachableCodeAsError(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 6 : // invalid import\r", "+\t\t\thandleImportProblemAsError(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 7 : // methods with constructor name\r", "+\t\t\thandleMethodWithConstructorNameAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 8 : // overridden package default method\r", "+\t\t\thandleOverriddenPackageDefaultMethodAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 9 : // use of deprecated API\r", "+\t\t\thandleDeprecationUseAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 10 : // catch block hidden by another one\r", "+\t\t\thandleMaskedCatchBlockAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 11 : // local variable not used\r", "+\t\t\thandleUnusedLocalVariableAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 12 : // argument not used\r", "+\t\t\thandleUnusedArgumentAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 13 : // temporary warning\r", "+\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "+\t\t\t\twarningThreshold |= TemporaryWarning;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase 14 : // target JDK\r", "+\t\t\tsetTargetJDK(setting.getCurrentValueIndex() == 0 ? JDK1_1 : JDK1_2);\r", "+\t\t\tbreak;\r", "+\t\tcase 15: // synthetic access emulation\r", "+\t\t\thandleAccessEmulationAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 16: // non externalized string literal\r", "+\t\t\thandleNonExternalizedStringLiteralAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc26d087799005fb8d0ba9e12e9467a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r void setOption(ConfigurableOption setting)", "signatureAfterChange": "\r void setOption(ConfigurableOption setting)", "diff": ["-\tString componentName = Compiler.class.getName();\r", "-\tString optionID = setting.getID();\r", "-\t\r", "-\tif(optionID.equals(OPTION_LocalVariableAttribute)){\r", "-\t\tif (setting.getValueIndex() == 0) {\r", "-\t\t\t// set the debug flag with Vars.\r", "-\t\t\tproduceDebugAttributes |= Vars;\r", "-\t\t} else {\r", "-\t\t\tproduceDebugAttributes &= ~Vars;\r", "-\t\t}\r", "-\t} else if(optionID.equals(OPTION_LineNumberAttribute)) {\r", "-\t\tif (setting.getValueIndex() == 0) {\r", "-\t\t\t// set the debug flag with Lines\r", "-\t\t\tproduceDebugAttributes |= Lines;\r", "-\t\t} else {\r", "-\t\t\tproduceDebugAttributes &= ~Lines;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_SourceFileAttribute)) {\r", "-\t\tif (setting.getValueIndex() == 0) {\r", "-\t\t\t// set the debug flag with Source.\r", "-\t\t\tproduceDebugAttributes |= Source;\r", "-\t\t} else {\r", "-\t\t\tproduceDebugAttributes &= ~Source;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_PreserveUnusedLocal)){\r", "-\t\tpreserveAllLocalVariables(setting.getValueIndex() == 0);\r", "-\t}else if(optionID.equals(OPTION_ReportUnreachableCode)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetUnreachableCodeSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetUnreachableCodeSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 : \r", "-\t\t\t\tsetUnreachableCodeSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportInvalidImport)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetImportProblemSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetImportProblemSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetImportProblemSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_TargetPlatform)){\r", "-\t\tsetTargetJDK(setting.getValueIndex() == 0 ? JDK1_1 : JDK1_2);\r", "-\t}else if(optionID.equals(OPTION_ReportMethodWithConstructorName)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetMethodWithConstructorNameSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetMethodWithConstructorNameSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetMethodWithConstructorNameSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportOverridingPackageDefaultMethod)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetOverriddenPackageDefaultMethodSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetOverriddenPackageDefaultMethodSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetOverriddenPackageDefaultMethodSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportDeprecation)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetDeprecationUseSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetDeprecationUseSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetDeprecationUseSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportHiddenCatchBlock)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetMaskedCatchBlockSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetMaskedCatchBlockSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetMaskedCatchBlockSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportUnusedLocal)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetUnusedLocalVariableSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetUnusedLocalVariableSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetUnusedLocalVariableSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportUnusedParameter)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetUnusedArgumentSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetUnusedArgumentSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetUnusedArgumentSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportSyntheticAccessEmulation)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetAccessEmulationSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetAccessEmulationSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetAccessEmulationSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportNonExternalizedStringLiteral)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetNonExternalizedStringLiteralSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetNonExternalizedStringLiteralSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetNonExternalizedStringLiteralSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportAssertIdentifier)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetAssertIdentifierSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetAssertIdentifierSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetAssertIdentifierSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_Source)){\r", "-\t\tsetAssertMode(setting.getValueIndex() == 1);\r", "+\tswitch (setting.getID()) {\r", "+\t\tcase 1 : // Local variable table attribute\r", "+\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "+\t\t\t\t// set the debug flag with Vars.\r", "+\t\t\t\tproduceDebugAttributes |= Vars;\r", "+\t\t\t} else {\r", "+\t\t\t\tproduceDebugAttributes &= ~Vars;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase 2 : // Line number attribute\r", "+\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "+\t\t\t\t// set the debug flag with Lines\r", "+\t\t\t\tproduceDebugAttributes |= Lines;\r", "+\t\t\t} else {\r", "+\t\t\t\tproduceDebugAttributes &= ~Lines;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase 3 : // source file attribute\r", "+\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "+\t\t\t\t// set the debug flag with Source.\r", "+\t\t\t\tproduceDebugAttributes |= Source;\r", "+\t\t\t} else {\r", "+\t\t\t\tproduceDebugAttributes &= ~Source;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase 4 : // preserveAllLocals flag\r", "+\t\t\tpreserveAllLocalVariables(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 5 : // unreachable code reported as error\r", "+\t\t\thandleUnreachableCodeAsError(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 6 : // invalid import\r", "+\t\t\thandleImportProblemAsError(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 7 : // methods with constructor name\r", "+\t\t\thandleMethodWithConstructorNameAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 8 : // overridden package default method\r", "+\t\t\thandleOverriddenPackageDefaultMethodAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 9 : // use of deprecated API\r", "+\t\t\thandleDeprecationUseAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 10 : // catch block hidden by another one\r", "+\t\t\thandleMaskedCatchBlockAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 11 : // local variable not used\r", "+\t\t\thandleUnusedLocalVariableAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 12 : // argument not used\r", "+\t\t\thandleUnusedArgumentAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 13 : // temporary warning\r", "+\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "+\t\t\t\twarningThreshold |= TemporaryWarning;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase 14 : // target JDK\r", "+\t\t\tsetTargetJDK(setting.getCurrentValueIndex() == 0 ? JDK1_1 : JDK1_2);\r", "+\t\t\tbreak;\r", "+\t\tcase 15: // synthetic access emulation\r", "+\t\t\thandleAccessEmulationAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 16: // non externalized string literal\r", "+\t\t\thandleNonExternalizedStringLiteralAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffea26d0825e1329e8065366aace99ac", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r void setOption(ConfigurableOption setting)", "signatureAfterChange": "\r void setOption(ConfigurableOption setting)", "diff": ["-\tString componentName = Compiler.class.getName();\r", "-\tString optionID = setting.getID();\r", "-\t\r", "-\tif(optionID.equals(OPTION_LocalVariableAttribute)){\r", "-\t\tif (setting.getValueIndex() == 0) {\r", "-\t\t\t// set the debug flag with Vars.\r", "-\t\t\tproduceDebugAttributes |= Vars;\r", "-\t\t} else {\r", "-\t\t\tproduceDebugAttributes &= ~Vars;\r", "-\t\t}\r", "-\t} else if(optionID.equals(OPTION_LineNumberAttribute)) {\r", "-\t\tif (setting.getValueIndex() == 0) {\r", "-\t\t\t// set the debug flag with Lines\r", "-\t\t\tproduceDebugAttributes |= Lines;\r", "-\t\t} else {\r", "-\t\t\tproduceDebugAttributes &= ~Lines;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_SourceFileAttribute)) {\r", "-\t\tif (setting.getValueIndex() == 0) {\r", "-\t\t\t// set the debug flag with Source.\r", "-\t\t\tproduceDebugAttributes |= Source;\r", "-\t\t} else {\r", "-\t\t\tproduceDebugAttributes &= ~Source;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_PreserveUnusedLocal)){\r", "-\t\tpreserveAllLocalVariables(setting.getValueIndex() == 0);\r", "-\t}else if(optionID.equals(OPTION_ReportUnreachableCode)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetUnreachableCodeSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetUnreachableCodeSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 : \r", "-\t\t\t\tsetUnreachableCodeSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportInvalidImport)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetImportProblemSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetImportProblemSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetImportProblemSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_TargetPlatform)){\r", "-\t\tsetTargetJDK(setting.getValueIndex() == 0 ? JDK1_1 : JDK1_2);\r", "-\t}else if(optionID.equals(OPTION_ReportMethodWithConstructorName)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetMethodWithConstructorNameSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetMethodWithConstructorNameSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetMethodWithConstructorNameSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportOverridingPackageDefaultMethod)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetOverriddenPackageDefaultMethodSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetOverriddenPackageDefaultMethodSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetOverriddenPackageDefaultMethodSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportDeprecation)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetDeprecationUseSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetDeprecationUseSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetDeprecationUseSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportHiddenCatchBlock)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetMaskedCatchBlockSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetMaskedCatchBlockSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetMaskedCatchBlockSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportUnusedLocal)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetUnusedLocalVariableSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetUnusedLocalVariableSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetUnusedLocalVariableSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportUnusedParameter)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetUnusedArgumentSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetUnusedArgumentSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetUnusedArgumentSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportSyntheticAccessEmulation)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetAccessEmulationSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetAccessEmulationSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetAccessEmulationSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportNonExternalizedStringLiteral)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetNonExternalizedStringLiteralSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetNonExternalizedStringLiteralSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetNonExternalizedStringLiteralSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_ReportAssertIdentifier)){\r", "-\t\tswitch(setting.getValueIndex()){\r", "-\t\t\tcase 0 : \r", "-\t\t\t\tsetAssertIdentifierSeverity(Error);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 1 :\r", "-\t\t\t\tsetAssertIdentifierSeverity(Warning);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 2 :\r", "-\t\t\t\tsetAssertIdentifierSeverity(Ignore);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t}else if(optionID.equals(OPTION_Source)){\r", "-\t\tsetAssertMode(setting.getValueIndex() == 1);\r", "+\tswitch (setting.getID()) {\r", "+\t\tcase 1 : // Local variable table attribute\r", "+\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "+\t\t\t\t// set the debug flag with Vars.\r", "+\t\t\t\tproduceDebugAttributes |= Vars;\r", "+\t\t\t} else {\r", "+\t\t\t\tproduceDebugAttributes &= ~Vars;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase 2 : // Line number attribute\r", "+\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "+\t\t\t\t// set the debug flag with Lines\r", "+\t\t\t\tproduceDebugAttributes |= Lines;\r", "+\t\t\t} else {\r", "+\t\t\t\tproduceDebugAttributes &= ~Lines;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase 3 : // source file attribute\r", "+\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "+\t\t\t\t// set the debug flag with Source.\r", "+\t\t\t\tproduceDebugAttributes |= Source;\r", "+\t\t\t} else {\r", "+\t\t\t\tproduceDebugAttributes &= ~Source;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase 4 : // preserveAllLocals flag\r", "+\t\t\tpreserveAllLocalVariables(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 5 : // unreachable code reported as error\r", "+\t\t\thandleUnreachableCodeAsError(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 6 : // invalid import\r", "+\t\t\thandleImportProblemAsError(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 7 : // methods with constructor name\r", "+\t\t\thandleMethodWithConstructorNameAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 8 : // overridden package default method\r", "+\t\t\thandleOverriddenPackageDefaultMethodAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 9 : // use of deprecated API\r", "+\t\t\thandleDeprecationUseAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 10 : // catch block hidden by another one\r", "+\t\t\thandleMaskedCatchBlockAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 11 : // local variable not used\r", "+\t\t\thandleUnusedLocalVariableAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 12 : // argument not used\r", "+\t\t\thandleUnusedArgumentAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 13 : // temporary warning\r", "+\t\t\tif (setting.getCurrentValueIndex() == 0) {\r", "+\t\t\t\twarningThreshold |= TemporaryWarning;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\tcase 14 : // target JDK\r", "+\t\t\tsetTargetJDK(setting.getCurrentValueIndex() == 0 ? JDK1_1 : JDK1_2);\r", "+\t\t\tbreak;\r", "+\t\tcase 15: // synthetic access emulation\r", "+\t\t\thandleAccessEmulationAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r", "+\t\tcase 16: // non externalized string literal\r", "+\t\t\thandleNonExternalizedStringLiteralAsWarning(setting.getCurrentValueIndex() == 0);\r", "+\t\t\tbreak;\r"]}], "num": 21921}
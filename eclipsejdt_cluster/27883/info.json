{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2247d96327d548169d7bde7274ba3b9c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fbd58cb7275100dad2206f67c918cd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "28b443981c71a5524cd8b98cc2e3b0a404e9b941", "commitAfterChange": "63dd935c4ddd77e21a308d8409617c74ad6fb4bf", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void printBlockComment(char[] s)", "signatureAfterChange": " \tpublic void printBlockComment(char[] s)", "diff": ["-\t\tStringTokenizer tokenizer = new StringTokenizer(new String(s), \"\\r\\n\");\t//$NON-NLS-1$", "+\t\tString commentSource = new String(s);", "+\t\tStringTokenizer tokenizer = new StringTokenizer(commentSource, \"\\r\\n\");\t//$NON-NLS-1$", "+\t\tint startSearchIndex = 0;", "-\t\t\t\tbuffer.append(lineContents);", "-\t\t\t\tcolumn += lineContents.length();", "+\t\t\t\tString reduceLine = lineContents.trim();", "+\t\t\t\tfinal int reduceLineLength = reduceLine.length();", "+\t\t\t\tif (this.positionsToMap != null) {", "+\t\t\t\t\tint start = commentSource.indexOf(reduceLine, startSearchIndex);", "+\t\t\t\t\tmapPositions(start, this.buffer.length(), reduceLineLength);", "+\t\t\t\t\tstartSearchIndex = start + reduceLineLength + 1;", "+\t\t\t\t}", "+\t\t\t\tbuffer.append(reduceLine);", "+\t\t\t\tcolumn += reduceLineLength;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1928cb8628cae8389607e952d739039", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "4d0bf071df00d4688845a9086931e919c0d6ab82", "commitAfterChange": "0328928ec6e943d2d976356cfda47a4325798cf6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static String displayString(String inputString, int indent)", "signatureAfterChange": " public static String displayString(String inputString, int indent)", "diff": ["-\tjava.util.StringTokenizer tokenizer = new java.util.StringTokenizer(inputString, \"\\n\\r\");", "+\tjava.util.StringTokenizer tokenizer = new java.util.StringTokenizer(inputString, \"\\n\\r\", true);", "+\tboolean wasACr = false;", "+\tboolean newLine = false;", "-\t\tif (count++ != 0) {", "+", "+\t\tString token = tokenizer.nextToken();", "+\t\tif (token.equals(\"\\r\")) {", "+\t\t\twasACr = true;", "+\t\t\tnewLine = true;", "+\t\t} else if (token.equals(\"\\n\")) {", "+\t\t\tif (!wasACr) { // \\r\\n --> \\n", "+\t\t\t\tnewLine = true;", "+\t\t\t}", "+\t\t}\t", "+\t\tif (newLine) {", "+\t\t\tnewLine = false;", "+\t\t\tcontinue;", "-\t\tString token = tokenizer.nextToken();", "+\t\twasACr = false;", "+\t\t\t\tcase '\\r' :", "+\t\t\t\t\ttokenBuffer.append(\"\\\\r\");", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase '\\n' :", "+\t\t\t\t\ttokenBuffer.append(\"\\\\n\");", "+\t\t\t\t\tbreak;", "-\t\t\t\tcase '\\n' :", "-\t\t\t\t\ttokenBuffer.append(\"\\\\n\");", "-\t\t\t\t\tbreak;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase '\\r' :", "-\t\t\t\t\ttokenBuffer.append(\"\\\\r\");"]}], "num": 27883}
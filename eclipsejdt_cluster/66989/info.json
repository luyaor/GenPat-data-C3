{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cbdd40734bad8b60a89bab96a2a34ae0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34018832261a3630dbb1a762d17d7468", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "43bf4677e87b76a460506f46871dac9cbe16b176", "commitAfterChange": "f13a740e3b814a194962fd0ef85df91efde745be", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition, int pos)", "signatureAfterChange": " \tpublic void complete(ICompilationUnit sourceUnit, int completionPosition, int pos)", "diff": ["-\t\t\t\t\t\t\tcontextAccepted = true;", "-\t\t\t\t\t\t\tthis.requestor.acceptContext(new CompletionContext());", "-\t\t\t\t\t\t\tfindImports((CompletionOnImportReference) importReference);", "-\t\t\t\t\t\t\tif(this.noProposal && this.problem != null) {", "-\t\t\t\t\t\t\t\tthis.requestor.completionFailure(this.problem);", "-\t\t\t\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\t\t\t\tthis.printDebug(this.problem);", "+\t\t\t\t\t\t\tthis.lookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "+\t\t\t\t\t\t\tif ((this.unitScope = parsedUnit.scope) != null) {", "+\t\t\t\t\t\t\t\tcontextAccepted = true;", "+\t\t\t\t\t\t\t\tthis.requestor.acceptContext(new CompletionContext());", "+\t\t\t\t\t\t\t\tfindImports((CompletionOnImportReference) importReference);", "+\t\t\t\t\t\t\t\tif(this.noProposal && this.problem != null) {", "+\t\t\t\t\t\t\t\t\tthis.requestor.completionFailure(this.problem);", "+\t\t\t\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\t\t\t\tthis.printDebug(this.problem);", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif(importReference.isStatic()) {", "-\t\t\t\t\t\t\t\tthis.lookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);", "-\t\t\t\t\t\t\t\tif ((this.unitScope = parsedUnit.scope) != null) {", "+\t\t\t\t\t\t\t\tif(importReference.isStatic()) {", "-\t\t\t\t\t\t\t\t\tBinding binding = this.unitScope.getTypeOrPackage(qualifierTokens);", "-\t\t\t\t\t\t\t\t\tif(binding != null && binding instanceof ReferenceBinding) {", "-\t\t\t\t\t\t\t\t\t\tReferenceBinding ref = (ReferenceBinding) binding;", "-\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfMemberTypes(lastToken, ref);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "-\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticFields(lastToken, ref);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_NAME_REFERENCE)) {", "-\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticMethdods(lastToken, ref);", "+\t\t\t\t\t\t\t\t\tif(qualifierTokens != null && qualifierTokens.length != 0) {", "+\t\t\t\t\t\t\t\t\t\tBinding binding = this.unitScope.getTypeOrPackage(qualifierTokens);", "+\t\t\t\t\t\t\t\t\t\tif(binding != null && binding instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\t\t\t\t\tReferenceBinding ref = (ReferenceBinding) binding;", "+\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfMemberTypes(lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {", "+\t\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticFields(lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.METHOD_NAME_REFERENCE)) {", "+\t\t\t\t\t\t\t\t\t\t\t\tthis.findImportsOfStaticMethdods(lastToken, ref);", "+\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tcontextAccepted = true;", "-\t\t\t\t\t\t\tcomplete(e.astNode, this.parser.assistNodeParent, e.qualifiedBinding, e.scope, e.insideTypeAnnotation);", "+\t\t\t\t\t\t\tcontextAccepted = complete(e.astNode, this.parser.assistNodeParent, e.qualifiedBinding, e.scope, e.insideTypeAnnotation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36dafdf050b8356a47b874c8c2f4a4e9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "beb3420e6344dd8c91012f84d653468d212cc81a", "commitAfterChange": "55b6058f41a3ac1cbaaf225684b08a0a1c9e6c30", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 139, "signatureBeforeChange": " \tprotected void removeLibrary(IJavaProject javaProject, String jarName, String sourceZipName) throws CoreException, IOException", "signatureAfterChange": " \tprotected void removeLibrary(IJavaProject javaProject, String jarName, String sourceZipName) throws CoreException, IOException", "diff": ["-\t\tproject.getFile(sourceZipName).delete(false, null);", "+\t\tif (sourceZipName != null && sourceZipName.length() != 0) {", "+\t\t\tproject.getFile(sourceZipName).delete(false, null);", "+\t\t}"]}], "num": 66989}
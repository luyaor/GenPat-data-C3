{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58a52e958ac5885d3199a420419e916f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "069d6bc0773b24302e74e016193b8d7f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java", "commitBeforeChange": "8d3c2646ec0224ab936125ae7e1adde5786e1231", "commitAfterChange": "dfa40837336948a1f985e74dddef96333913f44c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t\t \tpublic WildcardBinding getWildcard(ReferenceBinding genericType, int rank, TypeBinding bound, TypeBinding[] otherBounds, int boundKind, AnnotationBinding [] annotations)", "signatureAfterChange": "  \tpublic WildcardBinding getWildcard(ReferenceBinding genericType, int rank, TypeBinding bound, TypeBinding[] otherBounds, int boundKind, AnnotationBinding [] annotations)", "diff": ["+", "-\t\tTypeBinding[] cachedInfo = (TypeBinding[]) this.annotatedTypes.get(genericType);", "+\t\t// See explanation on misplaced annotations in getParameterizedType.", "+\t\tAnnotationBinding [] misplacedAnnotations = genericType.getTypeAnnotations();", "+\t\tif (misplacedAnnotations != null && misplacedAnnotations != Binding.NO_ANNOTATIONS) {", "+\t\t\tif (annotations != null && annotations != Binding.NO_ANNOTATIONS)", "+\t\t\t\tthrow new IllegalStateException(); // cannot cut both ways.", "+\t\t\tannotations = misplacedAnnotations;", "+\t\t\tgenericType = (ReferenceBinding) this.unannotatedTypeSystem.getUnannotatedType(genericType);", "+\t\t}", "+\t\t// generic type is expected to come in unannotated, if it came in with any misattributed annotations, they have been duly re-attributed and it is unannotated now.\t", "+\t\t", "+\t\tTypeBinding keyType = getUnannotatedType(genericType);\t\t", "+\t\tTypeBinding[] cachedInfo = (TypeBinding[]) this.annotatedTypes.get(keyType);  // promotes better instance sharing.", "-\t\t\tthis.annotatedTypes.put(genericType, cachedInfo = new TypeBinding[4]);", "+\t\t\tthis.annotatedTypes.put(keyType, cachedInfo = new TypeBinding[4]);", "-\t\t\tthis.annotatedTypes.put(genericType, cachedInfo);", "+\t\t\tthis.annotatedTypes.put(keyType, cachedInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7fdcb224fa9376e994ac30d3547f6f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java", "commitBeforeChange": "8d3c2646ec0224ab936125ae7e1adde5786e1231", "commitAfterChange": "dfa40837336948a1f985e74dddef96333913f44c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic RawTypeBinding getRawType(ReferenceBinding genericType, ReferenceBinding enclosingType, AnnotationBinding [] annotations)", "signatureAfterChange": " \t \tpublic RawTypeBinding getRawType(ReferenceBinding genericType, ReferenceBinding enclosingType, AnnotationBinding [] annotations)", "diff": ["+\t", "-\t\tTypeBinding[] cachedInfo = (TypeBinding[]) this.annotatedTypes.get(genericType);", "+\t\t// See explanation on misplaced annotations in getParameterizedType.", "+\t\tAnnotationBinding [] misplacedAnnotations = genericType.getTypeAnnotations();", "+\t\tif (misplacedAnnotations != null && misplacedAnnotations != Binding.NO_ANNOTATIONS) {", "+\t\t\tif (annotations != null && annotations != Binding.NO_ANNOTATIONS)", "+\t\t\t\tthrow new IllegalStateException(); // cannot cut both ways.", "+\t\t\tannotations = misplacedAnnotations;", "+\t\t\tgenericType = (ReferenceBinding) this.unannotatedTypeSystem.getUnannotatedType(genericType);", "+\t\t}", "+\t\t// generic type is expected to come in unannotated, if it came in with any misattributed annotations, they have been duly re-attributed and it is unannotated now.\t", "+\t\t", "+\t\tTypeBinding keyType = getUnannotatedType(genericType);", "+\t\tTypeBinding[] cachedInfo = (TypeBinding[]) this.annotatedTypes.get(keyType);", "-\t\t\tthis.annotatedTypes.put(genericType, cachedInfo = new TypeBinding[4]);", "+\t\t\tthis.annotatedTypes.put(keyType, cachedInfo = new TypeBinding[4]);", "-\t\t\tthis.annotatedTypes.put(genericType, cachedInfo);", "+\t\t\tthis.annotatedTypes.put(keyType, cachedInfo);"]}], "num": 29186}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "051c0bc3fe4c2662d7d385ffd8402250", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dde54a93e9c17cd9e3a490916f534aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "ed3a0c0705f2be20be3aaf856f81a3803e4ac341", "commitAfterChange": "c898c8105c91f9eabbfb847142d93c4c2ad29196", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " protected int matchMethod(MethodBinding method, boolean skipImpossibleArg)", "signatureAfterChange": " protected int matchMethod(MethodBinding method, boolean skipImpossibleArg)", "diff": ["-", "+\t\tboolean foundTypeVariable = false;", "-\t\t\tif (argType.isTypeVariable()) {", "-\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=123836, No point in textually comparing type variables, captures etc with concrete types. ", "-\t\t\t\tMethodBinding focusMethodBinding = this.matchLocator.getMethodBinding(this.pattern);", "-\t\t\t\tif (focusMethodBinding != null) {", "-\t\t\t\t\tif (matchOverriddenMethod(focusMethodBinding.declaringClass, focusMethodBinding, method)) {", "-\t\t\t\t\t\treturn ACCURATE_MATCH;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\t\t\t} else if (argType.isTypeVariable()) {", "+\t\t\t\t\t\tnewLevel = level;", "+\t\t\t\t\t\tfoundTypeVariable = true;", "+\t\tif (foundTypeVariable) {", "+\t\t\tif (!method.isStatic() && !method.isPrivate()) {", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=123836, No point in textually comparing type variables, captures etc with concrete types. ", "+\t\t\t\tMethodBinding focusMethodBinding = this.matchLocator.getMethodBinding(this.pattern);", "+\t\t\t\tif (focusMethodBinding != null) {", "+\t\t\t\t\tif (matchOverriddenMethod(focusMethodBinding.declaringClass, focusMethodBinding, method)) {", "+\t\t\t\t\t\treturn ACCURATE_MATCH;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} ", "+\t\t\treturn IMPOSSIBLE_MATCH;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0d87ee7c1fb5add43bae8f08e82a505", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleTypeReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding resolveTypeEnclosing(BlockScope scope, ReferenceBinding enclosingType)", "signatureAfterChange": "  \tpublic TypeBinding resolveTypeEnclosing(BlockScope scope, ReferenceBinding enclosingType)", "diff": ["-", "-\t\tTypeBinding memberType = scope.getMemberType(token, enclosingType);", "+\t\tTypeBinding memberType = this.resolvedType = scope.getMemberType(token, enclosingType);", "+\t\tboolean hasError = false;", "-\t\t\tthis.resolvedType = memberType;", "+\t\t\thasError = true;\t\t", "-\t\t\treturn null;", "+\t\t\tmemberType = ((ReferenceBinding)memberType).closestMatch();", "+\t\t\tif (memberType == null) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\tif (hasError) {", "+\t\t\t// do not store the computed type, keep the problem type instead", "+\t\t\treturn memberType;", "+\t\t}\t\t"]}], "num": 47205}
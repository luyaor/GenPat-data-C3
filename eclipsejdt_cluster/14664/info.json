{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee97b6ffd649b1156b50228220b215a0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35c33bd690f8e7c9710940c4ea40e6b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/workspace/Converter/junit/textui/TestRunner.java", "commitBeforeChange": "5f14954289dcfe3aa64cd723a9ea9807dea33e05", "commitAfterChange": "4b4449dde49cdcaed9ae00d1ac057ecfeb8d8c23", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void printFailures(TestResult result)", "signatureAfterChange": " \tpublic TestRunner(ResultPrinter printer)", "diff": ["+\tpublic TestRunner(ResultPrinter printer) {", "+\t\tfPrinter= printer;", "-\t */", "-\tpublic void printFailures(TestResult result) {", "-\t\tif (result.failureCount() != 0) {", "-\t\t\tif (result.failureCount() == 1)", "-\t\t\t\twriter().println(\"There was \" + result.failureCount() + \" failure:\");", "-\t\t\telse", "-\t\t\t\twriter().println(\"There were \" + result.failureCount() + \" failures:\");", "-\t\t\tint i = 1;", "-\t\t\tfor (Enumeration e= result.failures(); e.hasMoreElements(); i++) {", "-\t\t\t\tTestFailure failure= (TestFailure) e.nextElement();", "-\t\t\t\twriter().print(i + \") \" + failure.failedTest());", "-\t\t\t\tThrowable t= failure.thrownException();", "-\t\t\t\twriter().print(getFilteredTrace(failure.thrownException()));", "-\t\t\t}", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a43ae739bf69e7cc42839d27360cebf0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "916e1b97cb8f68e0c3d2550db5f74003efc3f036", "commitAfterChange": "cb0883381704b865376b174b125a5d26ee0abae4", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 46, "signatureBeforeChange": " \tprotected void runNegativeTest( \t\tString[] testFiles,  \t\tString expectedProblemLog,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tMap customOptions,  \t\tboolean generateOutput, \t\tboolean showCategory, \t\tboolean showWarningToken, \t\tboolean skipJavac, \t\tboolean performStatementsRecovery)", "signatureAfterChange": " \tprotected void runNegativeTest( \t\tString[] testFiles,  \t\tString expectedProblemLog,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tMap customOptions,  \t\tboolean generateOutput, \t\tboolean showCategory, \t\tboolean showWarningToken, \t\tboolean skipJavac, \t\tboolean performStatementsRecovery)", "diff": ["-\t\t\t\tString computedProblemLog = Util.convertToIndependantLineDelimiter(requestor.problemLog.toString());", "-\t\t\t\tif (!platformIndependantExpectedLog.equals(computedProblemLog)) {", "-\t\t\t\t\tSystem.out.println(getClass().getName() + '#' + getName());", "-\t\t\t\t\tSystem.out.println(Util.displayString(computedProblemLog, INDENT, SHIFT));", "-\t\t\t\t\tfor (int i = 0; i < testFiles.length; i += 2) {", "-\t\t\t\t\t\tSystem.out.print(testFiles[i]);", "-\t\t\t\t\t\tSystem.out.println(\" [\"); //$NON-NLS-1$", "-\t\t\t\t\t\tSystem.out.println(testFiles[i + 1]);", "-\t\t\t\t\t\tSystem.out.println(\"]\"); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (exception == null)", "-\t\t\t\t\tassertEquals(\"Invalid problem log \", platformIndependantExpectedLog, computedProblemLog);", "+\t\t\t\tcomputeProblemLog(testFiles, requestor, platformIndependantExpectedLog, exception);"]}], "num": 14664}
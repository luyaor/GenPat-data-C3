{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65452ec7e5397893bca62a5aceabeb64", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87ad6c67475b725a72977b1eea8e2f57", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "02f0314baf345f99ed9121a26e25ddbfb9c11d17", "commitAfterChange": "2990e636ee766a24121ef2ab5ed2ac0b361907fa", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "  public TypeBinding getTypeFromTypeSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType, char[][][] missingTypeNames)", "signatureAfterChange": "  public TypeBinding getTypeFromTypeSignature(SignatureWrapper wrapper, TypeVariableBinding[] staticVariables, ReferenceBinding enclosingType, char[][][] missingTypeNames)", "diff": ["+\t\tint memberStart = wrapper.start;", "+\t\t// need to protect against the member type being null when the signature is invalid", "+\t\tif (memberType == null)", "+\t\t\tthis.problemReporter.corruptedSignature(parameterizedType, wrapper.signature, memberStart); // aborts"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa3167376c96091082f5b0a4c25b134b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/TypeConverter.java", "commitBeforeChange": "4c69b3374b1904df80a162a61253a5fac338ca0b", "commitAfterChange": "26b534917513d2fad601a1675afb9ab2d302e49e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprivate char[][] extractIdentifiers(String typeSignature, int start, int endInclusive, int identCount)", "signatureAfterChange": " \t \tprivate char[][] extractIdentifiers(String typeSignature, int start, int endInclusive, int identCount)", "diff": ["-\t\t\tif (typeSignature.charAt(charIndex) == Signature.C_DOT || typeSignature.charAt(charIndex) == Signature.C_DOLLAR) {", "+\t\t\tchar currentChar;", "+\t\t\tif ((currentChar = typeSignature.charAt(charIndex)) == this.memberTypeSeparator || currentChar == Signature.C_DOT) {"]}], "num": 58400}
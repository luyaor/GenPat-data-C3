{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "91140e5dcf20942fbc6f04373d9aceae", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11f03d1c14b61d69b85460858af82816", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/comment/CommentFormatterUtil.java", "commitBeforeChange": "9fdf60099af5bd70d810793e82261fbcf589311b", "commitAfterChange": "862ae8342a82a200aa8036b2b41fe50ea56f4086", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static String format(int kind, String source, int offset, int length, Map preferences)", "signatureAfterChange": " \tpublic static String format(int kind, String source, int offset, int length, Map preferences)", "diff": ["+\t\tAssert.isNotNull(source);", "+\t\tIDocument document= new Document(source);", "+\t\t", "+\t\ttry {", "+\t\t\tint indentOffset= document.getLineOffset(document.getLineOfOffset(offset));", "+\t\t\tint indentationLevel= inferIndentationLevel(document.get(indentOffset, offset - indentOffset), getTabSize(preferences));", "+\t\t\treturn format(kind, source, offset, length, indentationLevel, preferences);", "+\t\t} catch (BadLocationException x) {", "+\t\t\tthrow new RuntimeException(x);", "+\t\t}", "+\t}", "-\t\ttry {", "-\t\t\tint indentOffset= document.getLineOffset(document.getLineOfOffset(offset));", "-\t\t\tint indentationLevel= inferIndentationLevel(document.get(indentOffset, offset - indentOffset), getTabSize(preferences));", "-\t\t\tedit= ToolFactory.createCodeFormatter(preferences).format(kind, source, offset, length, indentationLevel, TextUtilities.getDefaultLineDelimiter(document));", "-\t\t} catch (BadLocationException x) {", "-\t\t\tthrow new RuntimeException(x);", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "633a75834cbadb1633f6864b2ed5f15c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "c2615599dfd5ddc3fcc221204bcbd52b635e421d", "commitAfterChange": "02e31599516a86814794e26703d248f5e905f2c1", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 35, "signatureBeforeChange": " private synchronized void updateIndexState(String indexLocation, Integer indexState)", "signatureAfterChange": " private synchronized void updateIndexState(String indexLocation, Integer indexState)", "diff": ["+}", "+\twriteSavedIndexNamesFile();", "+", "+\tif (VERBOSE) {", "+\t\tString state = \"?\"; //$NON-NLS-1$", "+\t\tif (indexState == SAVED_STATE) state = \"SAVED\"; //$NON-NLS-1$", "+\t\telse if (indexState == UPDATING_STATE) state = \"UPDATING\"; //$NON-NLS-1$", "+\t\telse if (indexState == UNKNOWN_STATE) state = \"UNKNOWN\"; //$NON-NLS-1$", "+\t\telse if (indexState == REBUILDING_STATE) state = \"REBUILDING\"; //$NON-NLS-1$", "+\t\tUtil.verbose(\"-> index state updated to: \" + state + \" for: \"+indexLocation); //$NON-NLS-1$ //$NON-NLS-2$", "+\t}", "+}", "-\t}", "-\tif (VERBOSE) {", "-\t\tString state = \"?\"; //$NON-NLS-1$", "-\t\tif (indexState == SAVED_STATE) state = \"SAVED\"; //$NON-NLS-1$", "-\t\telse if (indexState == UPDATING_STATE) state = \"UPDATING\"; //$NON-NLS-1$", "-\t\telse if (indexState == UNKNOWN_STATE) state = \"UNKNOWN\"; //$NON-NLS-1$", "-\t\telse if (indexState == REBUILDING_STATE) state = \"REBUILDING\"; //$NON-NLS-1$", "-\t\tUtil.verbose(\"-> index state updated to: \" + state + \" for: \"+indexLocation); //$NON-NLS-1$ //$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97865edfb8798cd6f87f0fab2a3cefa8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingOpenable.java", "commitBeforeChange": "e6099120ee9021152f84e60105066d4964c2db21", "commitAfterChange": "82631a98caad8b28e9cefb217339d51e64ef47f9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r private void buildTypeBindings(final char[] source)", "signatureAfterChange": "\r private void buildTypeBindings(final char[] source)", "diff": ["-\tchar[] qualifiedName;\r", "+\tchar[] qualifiedName = this.getQualifiedName();\r", "+\tif (qualifiedName == null) return;\r", "+\r", "+\t// create match set\t\r", "+\tthis.matchSet = new MatchSet(this.locator);\r", "+\t\r", "+\ttry {\r", "+\t\tthis.locator.parser.matchSet = this.matchSet;\r", "+\r", "+\t\tthis.parsedUnit = (CompilationUnitDeclaration)this.locator.parsedUnits.get(qualifiedName);\r", "+\t\tif (this.parsedUnit == null) {\r", "+\t\t\t// diet parse\r", "+\t\t\tthis.parsedUnit = this.locator.dietParse(source);\r", "+\t\t\t\r", "+\t\t\t// initial type binding creation\r", "+\t\t\tthis.locator.lookupEnvironment.buildTypeBindings(this.parsedUnit);\r", "+\t\t} else {\r", "+\t\t\t// free memory\r", "+\t\t\tthis.locator.parsedUnits.put(qualifiedName, null);\r", "+\t\t}\r", "+\t} finally {\r", "+\t\tthis.locator.parser.matchSet = null;\r", "+\t}\r", "+}\r", "-\t\tqualifiedName = cu.getType(new String(mainTypeName)).getFullyQualifiedName().toCharArray();\r", "-\t\t\tqualifiedName = classFile.getType().getFullyQualifiedName().toCharArray();\r", "-\t\t\treturn; // nothing we can do here\r", "-\t}\r", "-\r", "-\t// create match set\t\r", "-\tthis.matchSet = new MatchSet(this.locator);\r", "-\tthis.locator.parser.matchSet = this.matchSet;\r", "-\r", "-\tthis.parsedUnit = (CompilationUnitDeclaration)this.locator.parsedUnits.get(qualifiedName);\r", "-\tif (this.parsedUnit == null) {\r", "-\t\t// diet parse\r", "-\t\tthis.parsedUnit = this.locator.dietParse(source);\r", "-\t\t\r", "-\t\t// initial type binding creation\r", "-\t\tthis.locator.lookupEnvironment.buildTypeBindings(this.parsedUnit);\r", "-\t} else {\r", "-\t\t// free memory\r", "-\t\tthis.locator.parsedUnits.put(qualifiedName, null);\r"]}], "num": 49643}
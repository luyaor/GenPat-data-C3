{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb0644bbd86a759b57833c16b1ea9dc6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b7a9bab6ab524f6352d8c77212fb8c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "1cc3b3e7a0647f40743545ab9e305d8f4bd58bbd", "commitAfterChange": "9e14e700eaf4553e71d5d5792e1c8a3558660da3", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void _test012()", "signatureAfterChange": " public void test012()", "diff": ["-public void _test012(){", "+public void test012(){", "-        \" \\n\" + ", "-        \" Usage: <options> <source files | directories>\\n\" + ", "-        \" If directories are specified, then their source contents are compiled.\\n\" + ", "-        \" Possible options are listed below. Options enabled by default are prefixed with \\'\\'+\\'\\'\\n\" + ", "-        \" \\n\" + ", "-        \" Classpath options:\\n\" + ", "-        \"    -cp -classpath <directories and zip/jar files separated by {1}>\\n\" + ", "-        \"                       specify location for application classes and sources. Each\\n\" + ", "-        \"                       directory or file can specify access rules for types between\\n\" + ", "-        \"                       \\'\\'[\\'\\' and \\'\\']\\'\\' (e.g. [-X.java] to deny access to type X)\\n\" + ", "-        \"    -bootclasspath <directories and zip/jar files separated by {1}>\\n\" + ", "-        \"                       specify location for system classes. Each directory or file can\\n\" + ", "-        \"                       specify access rules for types between \\'\\'[\\'\\' and \\'\\']\\'\\' (e.g. [-X.java]\\n\" + ", "-        \"                       to deny access to type X)\\n\" + ", "-        \"    -sourcepath <directories and zip/jar files separated by {1}>\\n\" + ", "-        \"                       specify location for application sources. Each directory or file can\\n\" + ", "-        \"                       specify access rules for types between \\'\\'[\\'\\' and \\'\\']\\'\\' (e.g. [-X.java]\\n\" + ", "-        \"                       to deny access to type X)\\n\" + ", "-        \"    -extdirs <directories separated by {1}>\\n\" + ", "-        \"                       specify location for extension zip/jar files\\n\" + ", "-        \"    -d <dir>           destination directory (if omitted, no directory is created)\\n\" + ", "-        \"    -d none            generate no .class files\\n\" + ", "-        \"    -encoding <enc>    specify custom encoding for all sources. Each file/directory can override it\\n\" + ", "-        \"                       when suffixed with \\'\\'[\\'\\'<enc>\\'\\']\\'\\' (e.g. X.java[utf8])\\n\" + ", "-        \" \\n\" + ", "-        \" Compliance options:\\n\" + ", "-        \"    -1.3               use 1.3 compliance level (implicit -source 1.3 -target 1.1)\\n\" + ", "-        \"    -1.4             + use 1.4 compliance level (implicit -source 1.3 -target 1.2)\\n\" + ", "-        \"    -1.5               use 1.5 compliance level (implicit -source 1.5 -target 1.5)\\n\" + ", "-        \"    -source <version>  set source level: 1.3 to 1.5 (or 5 or 5.0)\\n\" + ", "-        \"    -target <version>  set classfile target level: 1.1 to 1.5 (or 5 or 5.0)\\n\" + ", "-        \" \\n\" + ", "-        \" Warning options:\\n\" + ", "-        \"    -deprecation     + deprecation outside deprecated code\\n\" + ", "-        \"    -nowarn            disable all warnings\\n\" + ", "-        \"    -warn:none         disable all warnings\\n\" + ", "-        \"    -warn:<warnings separated by ,>    enable exactly the listed warnings\\n\" + ", "-        \"    -warn:+<warnings separated by ,>   enable additional warnings\\n\" + ", "-        \"    -warn:-<warnings separated by ,>   disable specific warnings\\n\" + ", "-        \"      allDeprecation       deprecation including inside deprecated code\\n\" + ", "-        \"      allJavadoc           invalid or missing javadoc\\n\" + ", "-        \"      assertIdentifier   + \\'\\'assert\\'\\' used as identifier\\n\" + ", "-        \"      boxing               autoboxing conversion\\n\" + ", "-        \"      charConcat         + char[] in String concat\\n\" + ", "-        \"      conditionAssign      possible accidental boolean assignment\\n\" + ", "-        \"      constructorName    + method with constructor name\\n\" + ", "-        \"      dep-ann              missing @Deprecated annotation\\n\" + ", "-        \"      deprecation        + deprecation outside deprecated code\\n\" + ", "-        \"      emptyBlock           undocumented empty block\\n\" + ", "-        \"      enumSwitch           incomplete enum switch\\n\" + ", "-        \"      fieldHiding          field hiding another variable\\n\" + ", "-        \"      finalBound           type parameter with final bound\\n\" + ", "-        \"      finally            + finally block not completing normally\\n\" + ", "-        \"      indirectStatic       indirect reference to static member\\n\" + ", "-        \"      intfAnnotation     + annotation type used as super interface\\n\" + ", "-        \"      intfNonInherited   + interface non-inherited method compatibility\\n\" + ", "-        \"      javadoc              invalid javadoc\\n\" + ", "-        \"      localHiding          local variable hiding another variable\\n\" + ", "-        \"      maskedCatchBlock   + hidden catch block\\n\" + ", "-        \"      nls                  string literal lacking non-nls tag //$NON-NLS-<n>$\\n\" + ", "-        \"      noEffectAssign     + assignment without effect\\n\" + ", "-        \"      null                 missing or redundant null check\\n\" + ", "-        \"      over-ann             missing @Override annotation\\n\" + ", "-        \"      pkgDefaultMethod   + attempt to override package-default method\\n\" + ", "-        \"      semicolon            unnecessary semicolon, empty statement\\n\" + ", "-        \"      serial             + missing serialVersionUID\\n\" + ", "-        \"      suppress           + enable @SuppressWarnings\\n\" + ", "-        \"      unqualifiedField     unqualified reference to field\\n\" + ", "-        \"      unchecked          + unchecked type operation\\n\" + ", "-        \"      unusedArgument       unread method parameter\\n\" + ", "-        \"      unusedImport       + unused import declaration\\n\" + ", "-        \"      unusedLocal          unread local variable\\n\" + ", "-        \"      unusedPrivate        unused private member declaration\\n\" + ", "-        \"      unusedThrown         unused declared thrown exception\\n\" + ", "-        \"      unnecessaryElse      unnecessary else clause\\n\" + ", "-        \"      uselessTypeCheck     unnecessary cast/instanceof operation\\n\" + ", "-        \"      specialParamHiding   constructor or setter parameter hiding another field\\n\" + ", "-        \"      staticReceiver     + non-static reference to static member\\n\" + ", "-        \"      syntheticAccess      synthetic access for innerclass\\n\" + ", "-        \"      tasks(<tags separated by |>) tasks identified by tags inside comments\\n\" + ", "-        \"      typeHiding         + type parameter hiding another type\\n\" + ", "-        \"      varargsCast        + varargs argument need explicit cast\\n\" + ", "-        \"      warningToken       + unhandled warning token in @SuppressWarnings\\n\" + ", "-        \" \\n\" + ", "-        \" Debug options:\\n\" + ", "-        \"    -g[:lines,vars,source] custom debug info\\n\" + ", "-        \"    -g:lines,source  + both lines table and source debug info\\n\" + ", "-        \"    -g                 all debug info\\n\" + ", "-        \"    -g:none            no debug info\\n\" + ", "-        \"    -preserveAllLocals preserve unused local vars for debug purpose\\n\" + ", "-        \" \\n\" + ", "-        \" Ignored options:\\n\" + ", "-        \"    -J<option>         pass option to virtual machine (ignored)\\n\" + ", "-        \"    -X<option>         specify non-standard option (ignored)\\n\" + ", "-        \"    -X                 print non-standard options and exit (ignored)\\n\" + ", "-        \"    -O                 optimize for execution time (ignored)\\n\" + ", "-        \" \\n\" + ", "-        \" Advanced options:\\n\" + ", "-        \"    @<file>            read command line arguments from file\\n\" + ", "-        \"    -maxProblems <n>   max number of problems per compilation unit (100 by default)\\n\" + ", "-        \"    -log <file>        log to a file\\n\" + ", "-        \"    -proceedOnError    do not stop at first error, dumping class files with problem methods\\n\" + ", "-        \"    -verbose           enable verbose output\\n\" + ", "-        \"    -referenceInfo     compute reference info\\n\" + ", "-        \"    -progress          show progress (only in -log mode)\\n\" + ", "-        \"    -time              display speed information \\n\" + ", "-        \"    -noExit            do not call System.exit(n) at end of compilation (n==0 if no error)\\n\" + ", "-        \"    -repeat <n>        repeat compilation process <n> times for perf analysis\\n\" + ", "-        \"    -inlineJSR         inline JSR bytecode (implicit if target >= 1.5)\\n\" + ", "-        \"    -enableJavadoc     consider references in javadoc\\n\" + ", "-        \" \\n\" + ", "-        \"    -? -help           print this help message\\n\" + ", "-        \"    -v -version        print compiler version\\n\" + ", "-        \"    -showversion       print compiler version and continue\\n\" + ", "-        \"\\n\";", "+\t\t\" \\n\" + ", "+\t\t\" Usage: <options> <source files | directories>\\n\" + ", "+\t\t\" If directories are specified, then their source contents are compiled.\\n\" + ", "+\t\t\" Possible options are listed below. Options enabled by default are prefixed with ''+''\\n\" + ", "+\t\t\" \\n\" + ", "+\t\t\" Classpath options:\\n\" + ", "+\t\t\"    -cp -classpath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" + ", "+\t\t\"                       specify location for application classes and sources. Each\\n\" + ", "+\t\t\"                       directory or file can specify access rules for types between\\n\" + ", "+\t\t\"                       ''['' and '']'' (e.g. [-X] to forbid access to type X, [~X] to\\n\" + ", "+\t\t\"                       discourage access to type X, [+p/X:-p/*] to forbid access to all\\n\" + ", "+\t\t\"                       types in package p but allow access to p/X)\\n\" + ", "+\t\t\"    -bootclasspath <directories and zip/jar files separated by \" + File.pathSeparator + \">\\n\" + ", "+\t\t\"                       specify location for system classes. Each directory or file can\\n\" + ", "+\t\t\"                       specify access rules for types between ''['' and '']''\\n\" + ", "+\t\t\"    -sourcepath <directories separated by \" + File.pathSeparator + \">\\n\" + ", "+\t\t\"                       specify location for application sources. Each directory can\\n\" + ", "+\t\t\"                       specify access rules for types between ''['' and '']''\\n\" + ", "+\t\t\"    -extdirs <directories separated by \" + File.pathSeparator + \">\\n\" + ", "+\t\t\"                       specify location for extension zip/jar files\\n\" + ", "+\t\t\"    -d <dir>           destination directory (if omitted, no directory is created)\\n\" + ", "+\t\t\"    -d none            generate no .class files\\n\" + ", "+\t\t\"    -encoding <enc>    specify custom encoding for all sources. Each file/directory can override it\\n\" + ", "+\t\t\"                       when suffixed with ''[''<enc>'']'' (e.g. X.java[utf8])\\n\" + ", "+\t\t\" \\n\" + ", "+\t\t\" Compliance options:\\n\" + ", "+\t\t\"    -1.3               use 1.3 compliance level (implicit -source 1.3 -target 1.1)\\n\" + ", "+\t\t\"    -1.4             + use 1.4 compliance level (implicit -source 1.3 -target 1.2)\\n\" + ", "+\t\t\"    -1.5               use 1.5 compliance level (implicit -source 1.5 -target 1.5)\\n\" + ", "+\t\t\"    -1.6               use 1.6 compliance level (implicit -source 1.6 -target 1.6)\\n\" + ", "+\t\t\"    -source <version>  set source level: 1.3 to 1.6 (or 6 or 6.0)\\n\" + ", "+\t\t\"    -target <version>  set classfile target level: 1.1 to 1.6 (or 6 or 6.0)\\n\" + ", "+\t\t\" \\n\" + ", "+\t\t\" Warning options:\\n\" + ", "+\t\t\"    -deprecation     + deprecation outside deprecated code\\n\" + ", "+\t\t\"    -nowarn            disable all warnings\\n\" + ", "+\t\t\"    -warn:none         disable all warnings\\n\" + ", "+\t\t\"    -warn:<warnings separated by ,>    enable exactly the listed warnings\\n\" + ", "+\t\t\"    -warn:+<warnings separated by ,>   enable additional warnings\\n\" + ", "+\t\t\"    -warn:-<warnings separated by ,>   disable specific warnings\\n\" + ", "+\t\t\"      allDeprecation       deprecation including inside deprecated code\\n\" + ", "+\t\t\"      allJavadoc           invalid or missing javadoc\\n\" + ", "+\t\t\"      assertIdentifier   + ''assert'' used as identifier\\n\" + ", "+\t\t\"      boxing               autoboxing conversion\\n\" + ", "+\t\t\"      charConcat         + char[] in String concat\\n\" + ", "+\t\t\"      conditionAssign      possible accidental boolean assignment\\n\" + ", "+\t\t\"      constructorName    + method with constructor name\\n\" + ", "+\t\t\"      dep-ann              missing @Deprecated annotation\\n\" + ", "+\t\t\"      deprecation        + deprecation outside deprecated code\\n\" + ", "+\t\t\"      discouraged        + use of types matching a discouraged access rule\\n\" + ", "+\t\t\"      emptyBlock           undocumented empty block\\n\" + ", "+\t\t\"      enumSwitch           incomplete enum switch\\n\" + ", "+\t\t\"      fieldHiding          field hiding another variable\\n\" + ", "+\t\t\"      finalBound           type parameter with final bound\\n\" + ", "+\t\t\"      finally            + finally block not completing normally\\n\" + ", "+\t\t\"      forbidden          + use of types matching a forbidden access rule\\n\" + ", "+\t\t\"      hiding               macro for fieldHiding, localHiding, typeHiding and maskedCatchBlock\\n\" + ", "+\t\t\"      incomplete-switch    same as enumSwitch\\n\" + ", "+\t\t\"      indirectStatic       indirect reference to static member\\n\" + ", "+\t\t\"      intfAnnotation     + annotation type used as super interface\\n\" + ", "+\t\t\"      intfNonInherited   + interface non-inherited method compatibility\\n\" + ", "+\t\t\"      javadoc              invalid javadoc\\n\" + ", "+\t\t\"      localHiding          local variable hiding another variable\\n\" + ", "+\t\t\"      maskedCatchBlock   + hidden catch block\\n\" + ", "+\t\t\"      nls                  string literal lacking non-nls tag //$NON-NLS-<n>$\\n\" + ", "+\t\t\"      noEffectAssign     + assignment without effect\\n\" + ", "+\t\t\"      null                 missing or redundant null check\\n\" + ", "+\t\t\"      over-ann             missing @Override annotation\\n\" + ", "+\t\t\"      paramAssign          assignment to a parameter\\n\" + ", "+\t\t\"      pkgDefaultMethod   + attempt to override package-default method\\n\" + ", "+\t\t\"      raw                  usage of raw type\\n\" + ", "+\t\t\"      semicolon            unnecessary semicolon, empty statement\\n\" + ", "+\t\t\"      serial             + missing serialVersionUID\\n\" + ", "+\t\t\"      specialParamHiding   constructor or setter parameter hiding another field\\n\" + ", "+\t\t\"      static-access        macro for indirectStatic and staticReceiver\\n\" + ", "+\t\t\"      staticReceiver     + non-static reference to static member\\n\" + ", "+\t\t\"      suppress           + enable @SuppressWarnings\\n\" + ", "+\t\t\"      synthetic-access     same as syntheticAccess\\n\" + ", "+\t\t\"      syntheticAccess      synthetic access for innerclass\\n\" + ", "+\t\t\"      tasks(<tags separated by |>) tasks identified by tags inside comments\\n\" + ", "+\t\t\"      typeHiding         + type parameter hiding another type\\n\" + ", "+\t\t\"      unchecked          + unchecked type operation\\n\" + ", "+\t\t\"      unnecessaryElse      unnecessary else clause\\n\" + ", "+\t\t\"      unqualified-field-access same as unQualifiedField\\n\" + ", "+\t\t\"      unqualifiedField     unqualified reference to field\\n\" + ", "+\t\t\"      unused               macro for unusedArgument, unusedImport, unusedLabel,\\n\" + ", "+\t\t\"                               unusedLocal, unusedPrivate and unusedThrown\\n\" + ", "+\t\t\"      unusedArgument       unread method parameter\\n\" + ", "+\t\t\"      unusedImport       + unused import declaration\\n\" + ", "+\t\t\"      unusedLabel        + unused label\\n\" + ", "+\t\t\"      unusedLocal        + unread local variable\\n\" + ", "+\t\t\"      unusedPrivate      + unused private member declaration\\n\" + ", "+\t\t\"      unusedThrown         unused declared thrown exception\\n\" + ", "+\t\t\"      uselessTypeCheck     unnecessary cast/instanceof operation\\n\" + ", "+\t\t\"      varargsCast        + varargs argument need explicit cast\\n\" + ", "+\t\t\"      warningToken       + unhandled warning token in @SuppressWarnings\\n\" + ", "+\t\t\" \\n\" + ", "+\t\t\" Debug options:\\n\" + ", "+\t\t\"    -g[:lines,vars,source] custom debug info\\n\" + ", "+\t\t\"    -g:lines,source  + both lines table and source debug info\\n\" + ", "+\t\t\"    -g                 all debug info\\n\" + ", "+\t\t\"    -g:none            no debug info\\n\" + ", "+\t\t\"    -preserveAllLocals preserve unused local vars for debug purpose\\n\" + ", "+\t\t\" \\n\" + ", "+\t\t\" Ignored options:\\n\" + ", "+\t\t\"    -J<option>         pass option to virtual machine (ignored)\\n\" + ", "+\t\t\"    -X<option>         specify non-standard option (ignored)\\n\" + ", "+\t\t\"    -X                 print non-standard options and exit (ignored)\\n\" + ", "+\t\t\"    -O                 optimize for execution time (ignored)\\n\" + ", "+\t\t\" \\n\" + ", "+\t\t\" Advanced options:\\n\" + ", "+\t\t\"    @<file>            read command line arguments from file\\n\" + ", "+\t\t\"    -maxProblems <n>   max number of problems per compilation unit (100 by default)\\n\" + ", "+\t\t\"    -log <file>        log to a file. If the file extension is ''.xml'', then the log\\n\" + ", "+\t\t\"                       will be a xml file.\\n\" + ", "+\t\t\"    -proceedOnError    do not stop at first error, dumping class files with problem methods\\n\" + ", "+\t\t\"    -verbose           enable verbose output\\n\" + ", "+\t\t\"    -referenceInfo     compute reference info\\n\" + ", "+\t\t\"    -progress          show progress (only in -log mode)\\n\" + ", "+\t\t\"    -time              display speed information \\n\" + ", "+\t\t\"    -noExit            do not call System.exit(n) at end of compilation (n==0 if no error)\\n\" + ", "+\t\t\"    -repeat <n>        repeat compilation process <n> times for perf analysis\\n\" + ", "+\t\t\"    -inlineJSR         inline JSR bytecode (implicit if target >= 1.5)\\n\" + ", "+\t\t\"    -enableJavadoc     consider references in javadoc\\n\" + ", "+\t\t\" \\n\" + ", "+\t\t\"    -? -help           print this help message\\n\" + ", "+\t\t\"    -v -version        print compiler version\\n\" + ", "+\t\t\"    -showversion       print compiler version and continue\\n\" + ", "+\t\t\"\\n\";", "-        \" -help -showversion -referenceInfo\",", "+        \" -help -referenceInfo\",", "-\t\t\t\tFile.pathSeparator", "+\t\t\t\t// File.pathSeparator"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bad0de9543dee5792c0ea8e85f4bbc87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GrammarCoverageTests308.java", "commitBeforeChange": "b524a2e75280a0f2690531c4f00fea7a6004673b", "commitAfterChange": "7e90cfc843b0651b2df6811a5c412b5db3d07d3e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void test011() throws Exception", "signatureAfterChange": " \tpublic void test011() throws Exception", "diff": ["-\t\t\t\t\t\"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\\n\" +", "+\t\t\t\t\t\"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_PARAMETER)\\n\" +", "-\t\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\t\"\tpublic @Marker String value(); \\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^\\n\" + ", "+\t\t\t\t\"The annotation @Marker is disallowed for this location\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\t\"\t@Marker String value2(); \\n\" + ", "+\t\t\t\t\"\t^^^^^^^\\n\" + ", "+\t\t\t\t\"The annotation @Marker is disallowed for this location\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\t\"\t@Marker public String value3(); \\n\" + ", "+\t\t\t\t\"\t^^^^^^^\\n\" + ", "+\t\t\t\t\"The annotation @Marker is disallowed for this location\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"\tpublic @Marker <T> @Marker String value4(); \\n\" + ", "+\t\t\t\t\"\t       ^^^^^^^\\n\" + ", "+\t\t\t\t\"The annotation @Marker is disallowed for this location\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\t\"6. ERROR in X.java (at line 5)\\n\" + ", "-\t\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"7. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\t@Marker <T> @Marker String value5(); \\n\" + ", "+\t\t\t\t\"\t^^^^^^^\\n\" + ", "+\t\t\t\t\"The annotation @Marker is disallowed for this location\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"8. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"9. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\t\"5. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"10. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"\t@Marker public <T> @Marker String value6(); \\n\" + ", "+\t\t\t\t\"\t^^^^^^^\\n\" + ", "+\t\t\t\t\"The annotation @Marker is disallowed for this location\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"11. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\t\"6. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\t\"12. ERROR in X.java (at line 7)\\n\" + "]}], "num": 71913}
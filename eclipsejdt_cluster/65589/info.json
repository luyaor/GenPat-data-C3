{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28a238df7b3f31290c58b896739a704a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18d5a52a3f1932cb2b6f1ffe8470b062", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "f595c3df6cbb40a33fa3de2980da6860a9a3730f", "commitAfterChange": "665fa70c145e3460af8c3efab89c50489feb17d0", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \tpublic static void setOptions(Hashtable newOptions)", "signatureAfterChange": " \tpublic static void setOptions(Hashtable newOptions)", "diff": ["-\t\t", "-\t\ttry {", "-\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\t\tIEclipsePreferences defaultPreferences = manager.getDefaultPreferences();", "-\t\t\tIEclipsePreferences instancePreferences = manager.getInstancePreferences();", "-", "-\t\t\tif (newOptions == null){", "-\t\t\t\tinstancePreferences.clear();", "-\t\t\t} else {", "-\t\t\t\tEnumeration keys = newOptions.keys();", "-\t\t\t\twhile (keys.hasMoreElements()){", "-\t\t\t\t\tString key = (String)keys.nextElement();", "-\t\t\t\t\tif (!JavaModelManager.getJavaModelManager().optionNames.contains(key)) continue; // unrecognized option", "-\t\t\t\t\tif (key.equals(CORE_ENCODING)) continue; // skipped, contributed by resource prefs", "-\t\t\t\t\tString value = (String)newOptions.get(key);", "-\t\t\t\t\tString defaultValue = defaultPreferences.get(key, null);", "-\t\t\t\t\tif (defaultValue != null && defaultValue.equals(value)) {", "-\t\t\t\t\t\tinstancePreferences.remove(key);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tinstancePreferences.put(key, value);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-", "-\t\t\t// persist options", "-\t\t\tinstancePreferences.flush();", "-\t\t\t", "-\t\t\t// update cache", "-\t\t\toptionsCache = newOptions==null ? null : new Hashtable(newOptions);", "-\t\t} catch (BackingStoreException e) {", "-\t\t\t// ignore", "-\t\t}", "+\t\tJavaModelManager.getJavaModelManager().setOptions(newOptions);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28887309709157a0fcdaae88cbfef5e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "60205bed5116ad3496dacec47d060779de36e647", "commitAfterChange": "af3a6832e3b1c1003f856c7a02d77d240881ed44", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 38, "signatureBeforeChange": "\r public IJavaElement getWorkingCopy(IProgressMonitor pm, IBufferFactory factory, boolean isManaged) throws JavaModelException", "signatureAfterChange": "\r public IJavaElement getWorkingCopy(IProgressMonitor pm, IBufferFactory factory) throws JavaModelException", "diff": ["- */\r", "-public IJavaElement getWorkingCopy(IProgressMonitor pm, IBufferFactory factory, boolean isManaged) throws JavaModelException {\r", "-\tWorkingCopy workingCopy;\r", "-\tMap managedWorkingCopies = null;\r", "-\tJavaModelManager manager = null;\r", "-\tif (isManaged) {\r", "-\t\tmanager = JavaModelManager.getJavaModelManager();\r", "-\t\tmanagedWorkingCopies = manager.managedWorkingCopies;\r", "-\t\tworkingCopy = (WorkingCopy)managedWorkingCopies.get(this);\r", "-\t\tif (workingCopy != null) {\r", "-\t\t\tworkingCopy.managedCount++;\r", "-\t\t\treturn workingCopy;\r", "-\t\t}\r", "-\t}\r", "-\tworkingCopy = new WorkingCopy((IPackageFragment)getParent(), getElementName(), factory);\r", "-\t// open the working copy now to ensure contents are that of the current state of this element\r", "-\tIBuffer buffer = factory == null ? null : factory.createBuffer(workingCopy);\r", "-\tworkingCopy.open(pm, buffer);\r", "-\tif (isManaged) {\r", "-\t\tmanagedWorkingCopies.put(this, workingCopy);\r", "-\t\t\r", "+ */\r", "+public IJavaElement getWorkingCopy(IProgressMonitor pm, IBufferFactory factory) throws JavaModelException {\r", "+\tWorkingCopy workingCopy = new WorkingCopy((IPackageFragment)getParent(), getElementName(), factory);\r", "+\t// open the working copy now to ensure contents are that of the current state of this element\r", "+\tIBuffer buffer = factory == null ? null : factory.createBuffer(workingCopy);\r", "+\tworkingCopy.open(pm, buffer);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e95aea434b91cc03e44a4a0a44bf0ba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "987b84492820c5eeff2230233c35db158228c8e3", "commitAfterChange": "882e850a9e00f22aac1934fd17ac4c0522b9b030", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void commitWorkingCopy(boolean force, IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": " public void commitWorkingCopy(boolean force, IProgressMonitor monitor) throws JavaModelException", "diff": ["-\tif (!isWorkingCopy()) {", "-\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_ELEMENT_TYPES, this));", "-\t}", "-\tICompilationUnit primary = getPrimary(); ", "-\tif (primary.exists()) { ", "-\t\t// primary cu on the classpath", "-\t\tCommitWorkingCopyOperation op= new CommitWorkingCopyOperation(this, force);", "-\t\trunOperation(op, monitor);", "-\t} else { ", "-\t\t// primary resource doesn't exist OR primary not on classpath", "-\t\tString encoding = this.getJavaProject().getOption(JavaCore.CORE_ENCODING, true);", "-\t\tString contents = this.getSource();", "-\t\tif (contents == null) return;", "-\t\ttry {", "-\t\t\tbyte[] bytes = encoding == null ", "-\t\t\t\t? contents.getBytes() ", "-\t\t\t\t: contents.getBytes(encoding);", "-\t\t\tByteArrayInputStream stream = new ByteArrayInputStream(bytes);", "-\t\t\tIFile originalRes = (IFile)primary.getResource();", "-\t\t\tif (originalRes.exists()) {", "-\t\t\t\toriginalRes.setContents(", "-\t\t\t\t\tstream, ", "-\t\t\t\t\tforce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY, ", "-\t\t\t\t\tnull);", "-\t\t\t} else {", "-\t\t\t\toriginalRes.create(", "-\t\t\t\t\tstream,", "-\t\t\t\t\tforce,", "-\t\t\t\t\tmonitor);", "-\t\t\t}", "-\t\t} catch (CoreException e) {", "-\t\t\tthrow new JavaModelException(e);", "-\t\t} catch (UnsupportedEncodingException e) {", "-\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "-\t\t}", "-\t}", "+\tCommitWorkingCopyOperation op= new CommitWorkingCopyOperation(this, force);", "+\trunOperation(op, monitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7f5cdd8222bef8f70e779e8f92a6f46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMirrorImpl.java", "commitBeforeChange": "f342df887ac2bde5a33a69c02311bfd7246a7e43", "commitAfterChange": "aba5db418de65ea21899bfdf893833cd0fc3f586", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate Object getReflectionValue(Object actualValue, TypeBinding actualType, Class<?> expectedType)", "signatureAfterChange": " \tprivate Object getReflectionValue(Object actualValue, TypeBinding actualType, Class<?> expectedType)", "diff": ["-\t\tif (expectedType.isEnum()) {", "-\t\t\tObject returnVal = null;", "-\t        if (actualType != null && actualType.isEnum() && actualValue instanceof FieldBinding) {", "-\t        \t", "-\t        \tFieldBinding binding = (FieldBinding)actualValue;", "-\t        \ttry {", "-\t        \t\tField returnedField = null;", "-\t        \t\treturnedField = expectedType.getField( new String(binding.name) );", "-\t        \t\tif (null != returnedField) {", "-\t        \t\t\treturnVal = returnedField.get(null);", "-\t        \t\t}", "-\t        \t}", "-\t        \tcatch (NoSuchFieldException nsfe) {", "-\t        \t\t// return null", "-\t        \t}", "-\t        \tcatch (IllegalAccessException iae) {", "-\t        \t\t// return null", "-\t        \t}", "-\t        }", "-\t        return null == returnVal ? Factory.getMatchingDummyValue(expectedType) : returnVal;", "-\t\t}", "-\t\telse if (Class.class.equals(expectedType)) {", "-\t\t\t// package the Class-valued return as a MirroredTypeException", "-\t\t\tif (actualValue instanceof TypeBinding) {", "-\t\t\t\tTypeMirror mirror = _env.getFactory().newTypeMirror((TypeBinding)actualValue);", "-\t\t\t\tthrow new MirroredTypeException(mirror);", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\t// TODO: actual value is not a TypeBinding.  Should we return a TypeMirror around an ErrorType?", "-\t\t\t\treturn null;", "-\t\t\t}", "-\t\t}", "-\t\telse if (expectedType.isArray()) {", "+\t\tif (expectedType.isArray()) {", "-\t\t\t// TODO: if we have a solo actual value, arrayify it (see org.eclipse.jdt.apt.core AnnotationInvocationHandler)", "-\t\t\treturn null;", "+\t\t\treturn convertJDTArrayToReflectionArray(actualValue, actualType, expectedType);", "-\t\telse if (expectedType.isAnnotation()) {", "-\t\t\t// member value is expected to be an annotation type.  Wrap it in an Annotation proxy.", "-\t\t\tif (actualType.isAnnotationType() && actualValue instanceof AnnotationBinding) {", "-\t\t\t\tAnnotationMirrorImpl annoMirror =", "-\t\t\t\t\t(AnnotationMirrorImpl)_env.getFactory().newAnnotationMirror((AnnotationBinding)actualValue);", "-\t\t\t\treturn Proxy.newProxyInstance(expectedType.getClassLoader(),", "-\t\t\t\t\t\tnew Class[]{ expectedType }, annoMirror );", "+\t\telse if (Class.class.equals(expectedType)) {", "+\t\t\t// package the Class-valued return as a MirroredTypeException", "+\t\t\tif (actualValue instanceof TypeBinding) {", "+\t\t\t\tTypeMirror mirror = _env.getFactory().newTypeMirror((TypeBinding)actualValue);", "+\t\t\t\tthrow new MirroredTypeException(mirror);", "+\t\t\t\t// TODO: actual value is not a TypeBinding.  Should we return a TypeMirror around an ErrorType?", "-\t\t\t// if the type is not primitive or String, this will return a dummy value.", "-\t\t\treturn convertJDTPrimitiveToReflectionType(actualValue, expectedType);", "+\t\t\t// Handle unitary values of type other than Class, e.g., int, MyEnum, ...", "+\t\t\treturn convertJDTValueToReflectionType(actualValue, actualType, expectedType);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc4f185f84faf16e8d5c50b19ec95ddc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "b862404e19fe1b0dc511da72b2317fa3ac05de7d", "commitAfterChange": "b39d81cc881475e2f341750790402944124a9023", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "\r public IJavaElement getSharedWorkingCopy(IProgressMonitor pm, IBufferFactory factory) throws JavaModelException", "signatureAfterChange": "\r public IJavaElement getSharedWorkingCopy(IProgressMonitor pm, IBufferFactory factory) throws JavaModelException", "diff": ["+\treturn getSharedWorkingCopy(pm, factory, null);\r", "+}\r", "-\t\tworkingCopy = (WorkingCopy)this.getWorkingCopy(pm, factory);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1b44d51352ed7654adf36e01c01e35c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "c0eface7c51e3af184baaa0d320e58e29799e4b8", "commitAfterChange": "ed97a9ed7d7ba3ec97e93e9090fed591e33f5e45", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " public IJavaElement getSharedWorkingCopy(IProgressMonitor pm, IBufferFactory factory, IProblemRequestor problemRequestor) throws JavaModelException", "signatureAfterChange": " public IJavaElement getSharedWorkingCopy(IProgressMonitor pm, IBufferFactory factory, IProblemRequestor problemRequestor) throws JavaModelException", "diff": ["-\tif (isWorkingCopy()) return this;", "-\t", "-", "+\t", "+\treturn getWorkingCopy(new BufferFactoryWrapper(factory), problemRequestor, pm);", "+}", "-\t// AND use the same buffer factory.", "-\tWorkingCopyOwner workingCopyOwner = new BufferFactoryWrapper(factory);", "-\t\tJavaModelManager.PerWorkingCopyInfo perWorkingCopyInfo = JavaModelManager.getJavaModelManager().getPerWorkingCopyInfo(workingCopy, false/*don't create*/, true /*record usage*/, null/*not used since don't create*/);", "-\trunOperation(op, pm);", "-\treturn workingCopy;", "-}"]}], "num": 65589}
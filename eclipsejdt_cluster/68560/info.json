{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00e9ca628ffce650c7926026b2e607ae", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79d3fd65fc57780def1b5321db9401da", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "c9df47e6bc4127d80d1e16ea8353f464e792fda3", "commitAfterChange": "514d8e9afb885d3be64fa67a03a4dd281867840f", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "  \tpublic MethodBinding getMethod(TypeBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": "  \tpublic MethodBinding getMethod(TypeBinding receiverType, char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["-\t\t\t// TODO (kent) performance - we are accumulating super methods which are *hidden* during the walk (see testcase from bug 69141)", "-\t\t\t// answers closest approximation, may not check argumentTypes or visibility", "-\t\t\tif (methodBinding.isValidBinding()) {", "-\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "-\t\t\t\tif (compatibleMethod == null)", "-\t\t\t\t\treturn new ProblemMethodBinding(methodBinding, selector, argumentTypes, ProblemReasons.NotFound);", "-\t\t\t\tif (!compatibleMethod.isValidBinding())", "-\t\t\t\t\treturn compatibleMethod;", "-\t", "-\t\t\t\tmethodBinding = compatibleMethod;", "-\t\t\t\tif (!methodBinding.canBeSeenBy(currentType, invocationSite, this))", "-\t\t\t\t\treturn new ProblemMethodBinding( methodBinding, selector, methodBinding.parameters, ProblemReasons.NotVisible);", "-\t\t\t}", "+\t\t\tif (!methodBinding.isValidBinding())", "+\t\t\t\treturn methodBinding;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b59427667c07e13120658afcbb61baf0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "c9df47e6bc4127d80d1e16ea8353f464e792fda3", "commitAfterChange": "514d8e9afb885d3be64fa67a03a4dd281867840f", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tpublic MethodBinding findMethodForArray( \t\tArrayBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findMethodForArray( \t\tArrayBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["-\t\t// answers closest approximation, may not check argumentTypes or visibility", "-\t\tif (methodBinding.isValidBinding()) {", "-\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);", "-\t\t\tif (compatibleMethod == null)", "-\t\t\t\treturn new ProblemMethodBinding(methodBinding, selector, argumentTypes, ProblemReasons.NotFound);", "-\t\t\tif (!compatibleMethod.isValidBinding())", "-\t\t\t\treturn compatibleMethod;", "-", "-\t\t\tmethodBinding = compatibleMethod;", "-\t\t\tif (!methodBinding.canBeSeenBy(receiverType, invocationSite, this))", "-\t\t\t\treturn new ProblemMethodBinding(methodBinding, selector, methodBinding.parameters, ProblemReasons.NotVisible);", "-\t\t}"]}], "num": 68560}
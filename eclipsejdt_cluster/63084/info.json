{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c5dc4bbbf1fc735fc70068ab0ee6453", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "260adf093ad1e12cd83e553185f4a42c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "signatureAfterChange": " \tpublic boolean execute(IProgressMonitor progressMonitor)", "diff": ["-\t\tif (this.indexSelector == null) {", "-\t\t\tthis.indexSelector =", "-\t\t\t\tnew IndexSelector(this.scope, this.pattern, this.indexManager);", "-\t\t}", "-\t\tIIndex[] searchIndexes = this.indexSelector.getIndexes();", "+\t\tIIndex[] indexes = getIndexes(progressMonitor);", "-\t\t\tint max = searchIndexes.length;", "+\t\t\tint max = indexes.length;", "-\t\t\t\tisComplete &= search(searchIndexes[i], progressMonitor);", "+\t\t\t\tisComplete &= search(indexes[i], progressMonitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ec7055247daab95e44803b4966b3fbd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void ensureReadyToRun()", "signatureAfterChange": " \tpublic void ensureReadyToRun()", "diff": ["-\t\tif (this.indexSelector == null) { // only check once. As long as this job is used, it will keep the same index picture", "-\t\t\tthis.indexSelector = new IndexSelector(this.scope, this.pattern, this.indexManager);", "-\t\t\tthis.indexSelector.getIndexes(); // will only cache answer if all indexes were available originally", "+\t\tif (!this.areIndexesReady) {", "+\t\t\tgetIndexes(null/*progress*/); // may trigger some index recreation"]}], "num": 63084}
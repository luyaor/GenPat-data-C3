{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e69baabc3b685fc7e972c82014eebf10", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63171f47e057cf2717fb92a88088856d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TestAll.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": " public static Test suite()", "diff": ["+\t\ttests_1_7.add(BinaryLiteralTest.class);", "+\t\ttests_1_7.add(UnderscoresInLiteralsTest.class);", "+\t\ttests_1_7.add(TryStatement17Test.class);", "+\t\ttests_1_7.add(TryWithResourcesStatementTest.class);", "+\t\ttests_1_7.add(GenericsRegressionTest_1_7.class);", "+\t\ttests_1_7.add(PolymorphicSignatureTest.class);", "+\t\ttests_1_7.add(Compliance_1_7.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6774c027134d5e0a5f5df34f0546ce7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void test012_compiler_problems_tuning()", "signatureAfterChange": " public void test012_compiler_problems_tuning()", "diff": ["+\t\texpectedProblemAttributes.put(\"ExplicitThisParameterNotBelow18\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalDeclarationOfThisParameter\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalUsageOfTypeAnnotations\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidLocationForModifiers\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfReceiverAnnotations\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidUsageOfTypeAnnotations\", SKIP);", "+\t\texpectedProblemAttributes.put(\"MisplacedTypeAnnotations\", SKIP);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77f81605b6154814a114ef9c879cf751", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/APITests.java", "commitBeforeChange": "13c7fe094d778e029a6ff3885a33b085ac95c7a1", "commitAfterChange": "3d23167de0cc8549a88a05b8aab19471006b9190", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic void testAptUtil() throws Exception", "signatureAfterChange": " \t \tpublic void testAptUtil() throws Exception", "diff": ["-\t\t// Check getting an annotation with a wildcard", "+\t\t// Check getting an annotation with a partial wildcard (\"org.eclipse.jdt.apt.tests.*\")", "+\t\t", "+\t\t", "+\t\t// Check getting an annotation with a full wildcard (\"*\")", "+\t\t// Note that these tests require that we do not cache what annotations", "+\t\t// a factory claims to support. Specifically, the HelloWorldWildcard one", "+\t\t// will swap out what it returns based on this static boolean.", "+\t\t// If we change to cache the results, this test will need to be modified to work", "+\t\t// in that scenario, probably by created a new external jar with ", "+\t\t// a processor that claims *.", "+\t\tHelloWorldWildcardAnnotationProcessorFactory.CLAIM_ALL_ANNOTATIONS = true;", "+\t\ttry {", "+\t\t\tfactory = ", "+\t\t\t\tAptUtil.getFactoryForAnnotation(\"org.eclipse.Foo\", jproj); //$NON-NLS-1$", "+\t\t\t", "+\t\t\tassertEquals(factory.getClass(), HelloWorldWildcardAnnotationProcessorFactory.class);", "+\t\t}", "+\t\tfinally {", "+\t\t\tHelloWorldWildcardAnnotationProcessorFactory.CLAIM_ALL_ANNOTATIONS = false;", "+\t\t}", "+\t\t", "+\t\t// Make sure we've unset the wildcard behavior", "+\t\tfactory = ", "+\t\t\tAptUtil.getFactoryForAnnotation(\"org.eclipse.Foo\", jproj); //$NON-NLS-1$", "+\t\t", "+\t\tassertNull(factory);", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "791fee25a200593b9777ca561264fd95", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java", "commitBeforeChange": "f5937020c6b957eed03745f57cfee671f23dd9b8", "commitAfterChange": "ad2aca1c2960107e50013b8f7866125addb168b4", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void test012_compiler_problems_tuning()", "signatureAfterChange": " public void test012_compiler_problems_tuning()", "diff": ["+\t\texpectedProblemAttributes.put(\"ContainingAnnotationHasNonDefaultMembers\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ContainingAnnotationHasShorterRetention\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ContainingAnnotationHasWrongValueType\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ContainingAnnotationMustHaveValue\", SKIP);", "+\t\texpectedProblemAttributes.put(\"RepeatableAnnotationHasTargets\", SKIP);", "+\t\texpectedProblemAttributes.put(\"RepeatableAnnotationIsDocumented\", SKIP);", "+\t\texpectedProblemAttributes.put(\"RepeatableAnnotationIsInherited\", SKIP);", "+\t\texpectedProblemAttributes.put(\"RepeatableAnnotationTargetMismatch\", SKIP);"]}], "num": 30426}
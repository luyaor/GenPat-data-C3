{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49ece3182313f60e3a4c2deadbd762a7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e37769165519d5c01ad608f3a70ddaf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public TypeBinding convertUnresolvedBinaryToRawType(TypeBinding type)", "signatureAfterChange": " public TypeBinding convertUnresolvedBinaryToRawType(TypeBinding type)", "diff": ["-\t\tif (convertedEnclosing != originalEnclosing) {", "+\t\tif (TypeBinding.notEquals(convertedEnclosing, originalEnclosing)) {", "-\t\t} else if (originalEnclosing != convertedEnclosing) {", "+\t\t} else if (TypeBinding.notEquals(originalEnclosing, convertedEnclosing)) {", "-\tif (originalType != convertedType) {", "+\tif (TypeBinding.notEquals(originalType, convertedType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55ff57f20ebfe796ac660ae6cfd1c5b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public TypeBinding convertToRawType(TypeBinding type, boolean forceRawEnclosingType)", "signatureAfterChange": " public TypeBinding convertToRawType(TypeBinding type, boolean forceRawEnclosingType)", "diff": ["-\t\t\tneedToConvert = originalEnclosing != convertedEnclosing; // only convert generic or parameterized types", "+\t\t\tneedToConvert = TypeBinding.notEquals(originalEnclosing, convertedEnclosing); // only convert generic or parameterized types", "-\t\t} else if (originalEnclosing != convertedEnclosing) {", "+\t\t} else if (TypeBinding.notEquals(originalEnclosing, convertedEnclosing)) {", "-\tif (originalType != convertedType) {", "+\tif (TypeBinding.notEquals(originalType, convertedType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ea0a7377d79dc6dc260aa9841544ef2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  public boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "signatureAfterChange": "  public boolean checkUnsafeCast(Scope scope, TypeBinding castType, TypeBinding expressionType, TypeBinding match, boolean isNarrowing)", "diff": ["-\t\tif (!isNarrowing && match == this.resolvedType.leafComponentType()) { // do not tag as unnecessary when recursing through upper bounds", "+\t\tif (!isNarrowing && TypeBinding.equalsEquals(match, this.resolvedType.leafComponentType())) { // do not tag as unnecessary when recursing through upper bounds", "-\t\t\t\t\t\t\t\t\tif (alternateCastType.findSuperTypeOriginatingFrom(expressionType) == match) {", "+\t\t\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(alternateCastType.findSuperTypeOriginatingFrom(expressionType), match)) {", "-\tif (!isNarrowing && match == this.resolvedType.leafComponentType()) { // do not tag as unnecessary when recursing through upper bounds", "+\tif (!isNarrowing && TypeBinding.equalsEquals(match, this.resolvedType.leafComponentType())) { // do not tag as unnecessary when recursing through upper bounds"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e6505014e285d0e0fd54a8383b2f760", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": "\t \tpublic int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments, boolean tiebreakingVarargsMethods)", "signatureAfterChange": "\t \tpublic int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments, boolean tiebreakingVarargsMethods)", "diff": ["-\t\t\t\tif (arg != param && !arg.isCompatibleWith(param.erasure(), this))", "+\t\t\t\tif (TypeBinding.notEquals(arg, param) && !arg.isCompatibleWith(param.erasure(), this))", "-\t\t\t\tif (param != arg) {", "+\t\t\t\tif (TypeBinding.notEquals(param, arg)) {", "-\t\t\t\t\t\tif (param != arg && parameterCompatibilityLevel(arg, param, env, tiebreakingVarargsMethods) == NOT_COMPATIBLE)", "+\t\t\t\t\t\tif (TypeBinding.notEquals(param, arg) && parameterCompatibilityLevel(arg, param, env, tiebreakingVarargsMethods) == NOT_COMPATIBLE)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fb41608bc84bba1a820d30c932d0f05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate ParameterizedGenericMethodBinding inferFromExpectedType(Scope scope, InferenceContext inferenceContext)", "signatureAfterChange": " \tprivate ParameterizedGenericMethodBinding inferFromExpectedType(Scope scope, InferenceContext inferenceContext)", "diff": ["-\t\t\tboolean argAlreadyInferred = argument != originalVariable;", "-\t\t\tif (originalVariable.firstBound == originalVariable.superclass) {", "+\t\t\tboolean argAlreadyInferred = TypeBinding.notEquals(argument, originalVariable);", "+\t\t\tif (TypeBinding.equalsEquals(originalVariable.firstBound, originalVariable.superclass)) {", "-\t\tthis.inferredReturnType = inferenceContext.hasExplicitExpectedType && this.returnType != oldReturnType;", "+\t\tthis.inferredReturnType = inferenceContext.hasExplicitExpectedType && TypeBinding.notEquals(this.returnType, oldReturnType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "781983ff3aed1bcbe682d45b2fb15f5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public final boolean canBeSeenBy(Scope scope)", "signatureAfterChange": " public final boolean canBeSeenBy(Scope scope)", "diff": ["-\tif (invocationType == this) return true;", "+\tif (TypeBinding.equalsEquals(invocationType, this)) return true;", "-\t\t\tif (declaringClass == invocationType) return true;", "+\t\t\tif (TypeBinding.equalsEquals(declaringClass, invocationType)) return true;", "-\t\treturn outerInvocationType == outerDeclaringClass;", "+\t\treturn TypeBinding.equalsEquals(outerInvocationType, outerDeclaringClass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e532f135a4055baa18382054e563d49", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java", "commitBeforeChange": "017f9918b88fff3a8fea9daac2df2ba8b7e560d6", "commitAfterChange": "5066a165665c172193991ef548a06f9b6acd680e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     @Override     public TypeMirror asMemberOf(DeclaredType containing, Element element)", "signatureAfterChange": "     @Override     public TypeMirror asMemberOf(DeclaredType containing, Element element)", "diff": ["-    \t\t\tif (methodBinding.declaringClass != referenceBinding) {", "+    \t\t\tif (TypeBinding.notEquals(methodBinding.declaringClass, referenceBinding)) {", "-    \t\t\tif (fieldBinding.declaringClass != referenceBinding) {", "+    \t\t\tif (TypeBinding.notEquals(fieldBinding.declaringClass, referenceBinding)) {", "-    \t\t\tif (referenceBinding2.enclosingType() != referenceBinding) {", "+    \t\t\tif (TypeBinding.notEquals(referenceBinding2.enclosingType(), referenceBinding)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f5ffeaffbb302bb341d3fb593fe2881", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PatternLocator.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " protected void updateMatch(TypeBinding[] argumentsBinding, MatchLocator locator, char[][] patternArguments, boolean hasTypeParameters)", "signatureAfterChange": " protected void updateMatch(TypeBinding[] argumentsBinding, MatchLocator locator, char[][] patternArguments, boolean hasTypeParameters)", "diff": ["-\t\t\t\t\t\tif (wildcardBinding.boundKind == patternWildcardKind && wildcardBinding.bound == patternBinding) {", "+\t\t\t\t\t\tif (wildcardBinding.boundKind == patternWildcardKind && TypeBinding.equalsEquals(wildcardBinding.bound, patternBinding)) {", "-\t\t\t\t\t\tif (wildcardBinding.boundKind == patternWildcardKind && wildcardBinding.bound == patternBinding) {", "+\t\t\t\t\t\tif (wildcardBinding.boundKind == patternWildcardKind && TypeBinding.equalsEquals(wildcardBinding.bound, patternBinding)) {", "-\t\t\t\t\t} else if (argumentBinding == patternBinding)", "+\t\t\t\t\t} else if (TypeBinding.equalsEquals(argumentBinding, patternBinding))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a62bc0c20aa48fd18ddfb17846e04ad5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 171, "methodNumberAfterChange": 171, "signatureBeforeChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "signatureAfterChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "diff": ["-\t\t\t\tif (method == otherMethod && receiverType == otherReceiverType)", "+\t\t\t\tif (method == otherMethod && TypeBinding.equalsEquals(receiverType, otherReceiverType))", "-\t\t\t\t\tif (receiverType == otherReceiverType) {", "+\t\t\t\t\tif (TypeBinding.equalsEquals(receiverType, otherReceiverType)) {", "-\t\t\tif (method.declaringClass != superTypeWithSameErasure) {", "+\t\t\tif (TypeBinding.notEquals(method.declaringClass, superTypeWithSameErasure)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9dcecac47f9963f8a570eaa539d5f5c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " public boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": " public boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-\t\t\tif (this != otherParamType.genericType())", "+\t\t\tif (TypeBinding.notEquals(this, otherParamType.genericType()))", "-\t\t\t\t\t\tif (enclosing != otherEnclosing) return false;", "+\t\t\t\t\t\tif (TypeBinding.notEquals(enclosing, otherEnclosing)) return false;", "-\t        return otherType.erasure() == this;", "+\t        return TypeBinding.equalsEquals(otherType.erasure(), this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae5122fa717a77f0150d8d92f98575f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate void resolveThrowsTags(MethodScope methScope, boolean reportMissing)", "signatureAfterChange": " \tprivate void resolveThrowsTags(MethodScope methScope, boolean reportMissing)", "diff": ["-\t\t\t\t\t\twhile (j<thrownExceptionLength && exceptionBinding != md.thrownExceptions[j].resolvedType) j++;", "+\t\t\t\t\t\twhile (j<thrownExceptionLength && TypeBinding.notEquals(exceptionBinding, md.thrownExceptions[j].resolvedType)) j++;", "-\t\t\t\t\t\tif (exceptionBinding == typeBinding) {", "+\t\t\t\t\t\tif (TypeBinding.equalsEquals(exceptionBinding, typeBinding)) {", "-\t\t\t\t\t\twhile (k<thrownExceptionLength && exceptionBinding != md.thrownExceptions[k].resolvedType) k++;", "+\t\t\t\t\t\twhile (k<thrownExceptionLength && TypeBinding.notEquals(exceptionBinding, md.thrownExceptions[k].resolvedType)) k++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b75ad01fcbb5bd300d799ee3d3d1ab6a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/RawTypeBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public boolean isProvablyDistinct(TypeBinding otherType)", "signatureAfterChange": "      public boolean isProvablyDistinct(TypeBinding otherType)", "diff": ["-\t\tif (this == otherType || erasure() == otherType) // https://bugs.eclipse.org/bugs/show_bug.cgi?id=329588", "+\t\tif (TypeBinding.equalsEquals(this, otherType) || TypeBinding.equalsEquals(erasure(), otherType)) // https://bugs.eclipse.org/bugs/show_bug.cgi?id=329588", "-\t            return erasure() != otherType.erasure();", "+\t            return TypeBinding.notEquals(erasure(), otherType.erasure());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc0896d9eac0c8da002cea8bb6eb5dab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public TypeBinding checkFieldAccess(BlockScope scope)", "signatureAfterChange": "  public TypeBinding checkFieldAccess(BlockScope scope)", "diff": ["-\t\t\t\t\t&& (sourceType == declaringClass || sourceType.superclass == declaringClass) // enum constant body", "+\t\t\t\t\t&& (TypeBinding.equalsEquals(sourceType, declaringClass) || TypeBinding.equalsEquals(sourceType.superclass, declaringClass)) // enum constant body", "-\t\t\t&& methodScope.enclosingSourceType() == fieldBinding.original().declaringClass", "+\t\t\t&& TypeBinding.equalsEquals(methodScope.enclosingSourceType(), fieldBinding.original().declaringClass)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd47ed2acaf991f021019c8dc7f146c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  void checkForRedundantSuperinterfaces(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "signatureAfterChange": "  void checkForRedundantSuperinterfaces(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "diff": ["-\t\t\t\t\tif (refs[r].resolvedType == toCheck) {", "+\t\t\t\t\tif (TypeBinding.equalsEquals(refs[r].resolvedType, toCheck)) {", "-\t\t\t\t\t\t\tif (refs[r].resolvedType == inheritedInterface) {", "+\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(refs[r].resolvedType, inheritedInterface)) {", "-\t\t\t\t\t\t\tif (refs[r].resolvedType == inheritedInterface) {", "+\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(refs[r].resolvedType, inheritedInterface)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc9f1f82aecd9eeb282b572c24a61be7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 145, "methodNumberAfterChange": 145, "signatureBeforeChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "signatureAfterChange": " \tprivate void findFields( \t\tchar[] fieldName, \t\tFieldBinding[] fields, \t\tScope scope, \t\tObjectVector fieldsFound, \t\tObjectVector localsFound, \t\tboolean onlyStaticFields, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean canBePrefixed, \t\tBinding[] missingElements, \t\tint[] missingElementsStarts, \t\tint[] missingElementsEnds, \t\tboolean missingElementsHaveProblems, \t\tchar[] castedReceiver, \t\tint receiverStart, \t\tint receiverEnd)", "diff": ["-\t\t\t\tif (field == otherField && receiverType == otherReceiverType)", "+\t\t\t\tif (field == otherField && TypeBinding.equalsEquals(receiverType, otherReceiverType))", "-\t\t\t\t\t\tif (field.declaringClass == scope.getJavaLangObject())", "+\t\t\t\t\t\tif (TypeBinding.equalsEquals(field.declaringClass, scope.getJavaLangObject()))", "-\t\t\t\t\tif (declarationType.isAnonymousType() && declarationType != invocationScope.enclosingSourceType()) {", "+\t\t\t\t\tif (declarationType.isAnonymousType() && TypeBinding.notEquals(declarationType, invocationScope.enclosingSourceType())) {"]}], "num": 3482}
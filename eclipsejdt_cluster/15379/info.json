{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f04db521261a85ad1aeebe4b54c2ae35", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "851d9bad45958ec05e3ad2138fd4466e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java", "commitBeforeChange": "e719dd5a3586c01e5265dc68f8e6023c180424cf", "commitAfterChange": "4e66475f9a73014d666c99c51fe059857a4663fa", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tpublic void findTypes(char[] prefix, final ISearchRequestor storage)", "signatureAfterChange": "\r \tpublic void findTypes(char[] prefix, final ISearchRequestor storage)", "diff": ["-\t\t\tIProject projectRsc = (IProject) this.project.getUnderlyingResource();\r", "-\t\t\tIJavaSearchScope scope =\r", "-\t\t\t\tsearchEngine.createJavaSearchScope(new IResource[] { projectRsc });\r", "-\r", "+\t\t\t// Collect the project and its prerequisites (ie. referenced projects and jars)\r", "+\t\t\tJavaSearchScope scope = new JavaSearchScope();\r", "+\t\t\tIWorkspaceRoot root = this.project.getUnderlyingResource().getWorkspace().getRoot();\r", "+\t\t\tIClasspathEntry[] entries = this.project.getExpandedClasspath(true);\r", "+\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "+\t\t\t\tIClasspathEntry entry = entries[i];\r", "+\t\t\t\tswitch (entry.getEntryKind()) {\r", "+\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:\r", "+\t\t\t\t\t\tscope.add(root.getFile(entry.getPath()), false);\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase IClasspathEntry.CPE_PROJECT:\r", "+\t\t\t\t\t\tscope.add(root.getProject(entry.getPath().lastSegment()), false);\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE:\r", "+\t\t\t\t\t\tIPath path = entry.getPath();\r", "+\t\t\t\t\t\tif (path.segmentCount() == 1) {\r", "+\t\t\t\t\t\t\t// project is source\r", "+\t\t\t\t\t\t\tscope.add(root.getProject(path.lastSegment()), false);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t// regular source folder\r", "+\t\t\t\t\t\t\tscope.add(root.getFolder(path), false);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\t\r", "-\t\t\t\t\tprojectRsc.getWorkspace(),\r", "+\t\t\t\t\tthis.project.getUnderlyingResource().getWorkspace(),\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eda8e9918b30044873b9a4ced5fac1c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java", "commitBeforeChange": "0c1031dc99b8e81cf01eb44654df70a3a43c366b", "commitAfterChange": "0152abc28edcc4a573ec9a97fc7435fb0ce8bfda", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r private Object[] computeNonJavaResources(JavaProject project)", "signatureAfterChange": "\r private Object[] computeNonJavaResources(JavaProject project)", "diff": ["+\t// determine if src == project and/or if bin == project\r", "+\tIPath projectPath = project.getProject().getFullPath();\r", "+\tboolean srcIsProject = false;\r", "+\tboolean binIsProject = false;\r", "+\ttry {\r", "+\t\tIClasspathEntry[] classpath = project.getResolvedClasspath(true);\r", "+\t\tfor (int i = 0; i < classpath.length; i++) {\r", "+\t\t\tIClasspathEntry entry = classpath[i];\r", "+\t\t\tif (projectPath.equals(entry.getPath())) {\r", "+\t\t\t\tsrcIsProject = true;\r", "+\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tbinIsProject = projectPath.equals(project.getOutputLocation());\r", "+\t} catch (JavaModelException e) {\r", "+\t\t// ignore\r", "+\t}\r", "+\t\r", "-\t\t\t\t\tString extension = res.getProjectRelativePath().getFileExtension();\r", "+\t\t\t\t\t\tString extension = res.getFileExtension();\r", "+\t\t\t\t\t\tif (extension != null) extension = extension.toLowerCase();\r", "+\t\t\t\t\t\t// ignore .java file if src == project\r", "+\t\t\t\t\t\tif (srcIsProject && \"java\".equals(extension)) { //$NON-NLS-1$\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t// ignore .class file if bin == project\r", "+\t\t\t\t\t\tif (binIsProject && \"class\".equals(extension)) { //$NON-NLS-1$\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t// else add non java resource\r"]}], "num": 15379}
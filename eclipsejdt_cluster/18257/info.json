{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a94d117021917de04d8874f2815ca75", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77e891008daf472f180893870ee22d9b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "c87413f1c3fa777cce7cb1df06542ffdf2ba70ba", "commitAfterChange": "dbb59802bd05ea277b4706afb85d6b75d5bdff2a", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \t \tpublic void setFileProcessing(IFile file)", "signatureAfterChange": " \t \tpublic void setFileProcessing(IFile file)", "diff": ["-\t\t// already in per-file mode.", "-\t\tif( !_batchMode ){", "-\t\t\t// this is a no-op", "-\t\t\tif(  file.equals(_file) )", "-\t\t\t\treturn;", "-\t\t\t", "-\t\t\t_astRoot = null;", "-\t\t\t_file = null;", "-\t\t\t_curSource = null;", "-\t\t\t", "-\t\t\t// need to match up the file with the ast.", "-\t\t\tif( _files != null ){", "-\t\t\t\tfor( int i=0, len=_files.length; i<len; i++ ){", "-\t\t\t\t\tif( file.equals(_files[i]) ){", "-\t\t\t\t\t\t_file = file;", "-\t\t\t\t\t\tif( _astUnits != null ){", "-\t\t\t\t\t\t\t_astRoot = _astUnits[i];\t\t", "-\t\t\t\t\t\t\t_curSource = _sources[i];", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\telse{", "-\t\t\t\t\t\t\ttry{", "-\t\t\t\t\t\t\t\t_curSource = ProcessorEnvImpl.getFileContents( _files[i] );", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tcatch( Exception e ){", "-\t\t\t\t\t\t\t\t// TODO:  propagate these exceptions out of APTDispatch", "-\t\t\t\t\t\t\t\te.printStackTrace();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t_astRoot = (CompilationUnit)createDietAST(_files[i].toString(), _javaProject, null, _curSource );", "-\t\t\t\t\t\t}", "+\t\t_batchMode = false;", "+\t\tif( file.equals(_file) ) // this is a no-op", "+\t\t\treturn;", "+\t\t", "+\t\t_astRoot = null;", "+\t\t_file = null;", "+\t\t_unit = null;", "+\t\t", "+\t\t// need to match up the file with the ast.", "+\t\tif( _files != null ){", "+\t\t\tfor( int i=0, len=_files.length; i<len; i++ ){", "+\t\t\t\tif( file.equals(_files[i]) ){", "+\t\t\t\t\t_file = file;", "+\t\t\t\t\tif( _astUnits != null ){", "+\t\t\t\t\t\t_astRoot = _astUnits[i];\t\t", "+\t\t\t\t\t\t_unit = _units[i];", "+\t\t\t\t\t}", "+\t\t\t\t\telse{", "+\t\t\t\t\t\t_unit = JavaCore.createCompilationUnitFrom(_files[i]);", "+\t\t\t\t\t\t_astRoot = createDietAST(_javaProject, _unit);", "- ", "-\t\t\tif( _file == null )", "-\t\t\t\tthrow new IllegalStateException(", "-\t\t\t\t\t\t\"file \" +  //$NON-NLS-1$", "-\t\t\t\t\t\tfile.getName() + ", "-\t\t\t\t\t\t\" is not in the list to be processed.\"); //$NON-NLS-1$", "-\t\telse{", "-\t\t\t_batchMode = false;", "-\t\t\tif( _files != null ){", "-\t\t\t\tfor( int i=0, len=_files.length; i<len; i++ ){", "-\t\t\t\t\tif( _files[i] == file ){", "-\t\t\t\t\t\ttry{", "-\t\t\t\t\t\t\t_curSource = ProcessorEnvImpl.getFileContents( _files[i] );", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcatch( Exception e ){", "-\t\t\t\t\t\t\t// TODO:  propagate these exceptions out of APTDispatch", "-\t\t\t\t\t\t\te.printStackTrace();", "-\t\t\t\t\t\t}\t", "-\t\t\t\t\t\t_astRoot = (CompilationUnit)createDietAST(_files[i].toString(), _javaProject, null, _curSource );", "-\t\t\t\t\t\t_file = file;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif( _astRoot == null )", "-\t\t\t\tthrow new IllegalStateException(", "-\t\t\t\t\t\t\"file \" +  //$NON-NLS-1$", "-\t\t\t\t\t\tfile.getName() + ", "-\t\t\t\t\t\t\" is not in the list to be processed.\"); //$NON-NLS-1$", "-\t\t}", "+\t\t", "+\t\tif( _file == null || _astRoot == null)", "+\t\t\tthrow new IllegalStateException(", "+\t\t\t\t\t\"file \" +  //$NON-NLS-1$", "+\t\t\t\t\tfile.getName() + ", "+\t\t\t\t\t\" is not in the list to be processed.\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da3a2bcb78dbb21258d9b49274b66b5f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedSourceFolderManager.java", "commitBeforeChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "commitAfterChange": "6fea7eafdd413dccff31028f8da1f1ac6859e6fe", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprivate void resetGeneratedSrcFolder(final IFolder srcFolder, boolean recreate)", "signatureAfterChange": " \tpublic static boolean validate(final IJavaProject jproj, final String folderName)", "diff": ["-\t */", "-\tprivate void resetGeneratedSrcFolder(final IFolder srcFolder, boolean recreate){", "-\t\t// clean up the classpath first so that when we actually delete the ", "-\t\t// generated source folder and won't cause a classpath error.", "-\t\tif( srcFolder != null ){", "-\t\t\ttry{\t", "-\t\t\t\tClasspathUtil.removeFromProjectClasspath( _aptProject.getJavaProject(), srcFolder, null );\t\t", "-\t\t\t}catch(JavaModelException e){", "-\t\t\t\tAptPlugin.log( e, \"Error occurred deleting old generated src folder \" + srcFolder.getName() ); //$NON-NLS-1$", "-\t\t", "-\t\tif( recreate )", "-\t\t\tensureGeneratedSourceFolder();", "-\t\t", "-\t\t// delete the generated source folder as well as", "-\t\t// all of its derived ancestors that are containers only to the ", "-\t\t// generated source folder", "-\t\tif( srcFolder != null ){", "-\t\t\tIFolder folderToDelete = srcFolder;\t\t", "-\t\t\tfor( IContainer c = srcFolder.getParent(); ", "-\t\t\t \t c != null && (c instanceof IFolder); ", "-\t\t\t \t c = c.getParent() ){", "-\t\t\t\t", "-\t\t\t\ttry{", "-\t\t\t\t\t// members can't be empty, there has to be at least 1.", "-\t\t\t\t\t// will only delete the parent if it contains only the ", "-\t\t\t\t\t// folder that we want to delete.", "-\t\t\t\t\tif( c.isDerived() && c.members().length == 1 ){", "-\t\t\t\t\t\tfolderToDelete = (IFolder)c;", "-\t\t\t\t\t}", "-\t\t\t\t\telse", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}catch(CoreException e){", "-\t\t\t\t\tAptPlugin.log(e, \"failure while accessing member of \" + c.getName() ); //$NON-NLS-1$", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tremoveFolder(folderToDelete);", "-\t\t}", "+\t */", "+\tpublic static boolean validate(final IJavaProject jproj, final String folderName) {", "+\t\tIFolder folder = null;", "+\t\ttry {", "+\t\t\tfolder = jproj.getProject().getFolder( folderName );", "+\t\t}", "+\t\tcatch (IllegalArgumentException e) {", "+\t\t\treturn false;", "+\t\t}", "+\t\treturn folder != null;", "+\t}"]}], "num": 18257}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3893f43fbe2a4584c0427c32ef7d85d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8326603c99ef8008fe52e5cdabdbbe0a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java", "commitBeforeChange": "f4bdb5d912579981f22fe9e7c4679e93b1a5f059", "commitAfterChange": "a3a09ad256da223aa1f3d2fe29b81e346d09a16c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream)", "diff": ["-\t\t\tReferenceBinding targetType;", "-\t\t\tif ((targetType = binding.declaringClass).isNestedType()) {", "-\t\t\t\tcodeStream.generateSyntheticArgumentValues(", "+\t\t\tReferenceBinding targetType = binding.declaringClass;", "+\t\t\t// handling innerclass instance allocation - enclosing instance arguments", "+\t\t\tif (targetType.isNestedType()) {", "+\t\t\t\tcodeStream.generateSyntheticEnclosingInstanceValues(", "+\t\t\t// handling innerclass instance allocation - outer local arguments", "+\t\t\tif (targetType.isNestedType()) {", "+\t\t\t\tcodeStream.generateSyntheticOuterArgumentValues(", "+\t\t\t\t\tcurrentScope,", "+\t\t\t\t\ttargetType,", "+\t\t\t\t\tthis);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a568f2b74c3857f3cc7d39d9ca38c0b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "f4bdb5d912579981f22fe9e7c4679e93b1a5f059", "commitAfterChange": "a3a09ad256da223aa1f3d2fe29b81e346d09a16c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void generateCode( \tBlockScope currentScope,  \tCodeStream codeStream,  \tboolean valueRequired)", "signatureAfterChange": " public void generateCode( \tBlockScope currentScope,  \tCodeStream codeStream,  \tboolean valueRequired)", "diff": ["-\t\t// handling innerclass instance allocation", "+\t\t// handling innerclass instance allocation - enclosing instance arguments", "-\t\t\tcodeStream.generateSyntheticArgumentValues(", "-\t\t\t\tcurrentScope, ", "-\t\t\t\tallocatedType, ", "-\t\t\t\tenclosingInstance(), ", "-\t\t\t\tthis); ", "+\t\t\tcodeStream.generateSyntheticEnclosingInstanceValues(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tallocatedType,", "+\t\t\t\tenclosingInstance(),", "+\t\t\t\tthis);", "+\t\t// handling innerclass instance allocation - outer local arguments", "+\t\tif (allocatedType.isNestedType()) {", "+\t\t\tcodeStream.generateSyntheticOuterArgumentValues(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tallocatedType,", "+\t\t\t\tthis);", "+\t\t}"]}], "num": 12007}
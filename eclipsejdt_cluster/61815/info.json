{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d130ddc99ff77b30a14b4cc6563f685", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41fed8cea7c3fe3f154ca9ed589e5327", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "acb688302e3cacbdc42738d6941f0a71f5b00f9c", "commitAfterChange": "37562c5a562cc71ff03559ef16cdaf50168f2116", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 23, "signatureBeforeChange": "\t  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "signatureAfterChange": "\t  \tpublic Expression convert(org.eclipse.jdt.internal.compiler.ast.Expression expression)", "diff": ["-\t\tif ((expression.bits & AstNode.ParenthesizedMASK) != 0) {", "+\t\tif ((expression.bits & org.eclipse.jdt.internal.compiler.ast.ASTNode.ParenthesizedMASK) != 0) {", "-\t\tif (expression instanceof ArrayAllocationExpression) {", "-\t\t\treturn convert((ArrayAllocationExpression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression) expression);", "-\t\tif (expression instanceof QualifiedAllocationExpression) {", "-\t\t\treturn convert((QualifiedAllocationExpression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression) expression);", "-\t\tif (expression instanceof AllocationExpression) {", "-\t\t\treturn convert((AllocationExpression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.AllocationExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.AllocationExpression) expression);", "-\t\tif (expression instanceof CompoundAssignment) {", "-\t\t\treturn convert((CompoundAssignment) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.CompoundAssignment) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.CompoundAssignment) expression);", "-\t\tif (expression instanceof ClassLiteralAccess) {", "-\t\t\treturn convert((ClassLiteralAccess) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess) expression);", "-\t\tif (expression instanceof FalseLiteral) {", "-\t\t\treturn convert((FalseLiteral) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.FalseLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.FalseLiteral) expression);", "-\t\tif (expression instanceof TrueLiteral) {", "-\t\t\treturn convert((TrueLiteral) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.TrueLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.TrueLiteral) expression);", "-\t\tif (expression instanceof CharLiteral) {", "-\t\t\treturn convert((CharLiteral) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.CharLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.CharLiteral) expression);", "-\t\tif (expression instanceof DoubleLiteral) {", "-\t\t\treturn convert((DoubleLiteral) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.DoubleLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.DoubleLiteral) expression);", "-\t\tif (expression instanceof FloatLiteral) {", "-\t\t\treturn convert((FloatLiteral) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.FloatLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.FloatLiteral) expression);", "-\t\tif (expression instanceof IntLiteralMinValue) {", "-\t\t\treturn convert((IntLiteralMinValue) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.IntLiteralMinValue) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.IntLiteralMinValue) expression);", "-\t\tif (expression instanceof IntLiteral) {", "-\t\t\treturn convert((IntLiteral) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.IntLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.IntLiteral) expression);", "-\t\tif (expression instanceof LongLiteralMinValue) {", "-\t\t\treturn convert((LongLiteralMinValue) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.LongLiteralMinValue) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.LongLiteralMinValue) expression);", "-\t\tif (expression instanceof LongLiteral) {", "-\t\t\treturn convert((LongLiteral) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.LongLiteral) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.LongLiteral) expression);", "-\t\t\treturn convert((ExtendedStringLiteral) expression);", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral) expression);", "-\t\tif (expression instanceof AND_AND_Expression) {", "-\t\t\treturn convert((AND_AND_Expression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression) expression);", "-\t\tif (expression instanceof OR_OR_Expression) {", "-\t\t\treturn convert((OR_OR_Expression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression) expression);", "-\t\tif (expression instanceof EqualExpression) {", "-\t\t\treturn convert((EqualExpression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.EqualExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.EqualExpression) expression);", "-\t\tif (expression instanceof BinaryExpression) {", "-\t\t\treturn convert((BinaryExpression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.BinaryExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.BinaryExpression) expression);", "-\t\tif (expression instanceof UnaryExpression) {", "-\t\t\treturn convert((UnaryExpression) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.UnaryExpression) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.UnaryExpression) expression);", "-\t\tif (expression instanceof MessageSend) {", "-\t\t\treturn convert((MessageSend) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.MessageSend) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.MessageSend) expression);", "-\t\tif (expression instanceof Reference) {", "-\t\t\treturn convert((Reference) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.Reference) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.Reference) expression);", "-\t\tif (expression instanceof TypeReference) {", "-\t\t\treturn convert((TypeReference) expression);", "+\t\tif (expression instanceof org.eclipse.jdt.internal.compiler.ast.TypeReference) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.TypeReference) expression);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8955321de222e2c876d4c3cdb3e5aaa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tprivate void buildBodyDeclarations(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration expression, AnonymousClassDeclaration anonymousClassDeclaration)", "signatureAfterChange": " \t \tprotected void buildBodyDeclarations(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration expression, AnonymousClassDeclaration anonymousClassDeclaration)", "diff": ["+\t", "+\tprotected void buildBodyDeclarations(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration expression, AnonymousClassDeclaration anonymousClassDeclaration) {", "+\t\t// add body declaration in the lexical order", "+\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] members = expression.memberTypes;", "+\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] fields = expression.fields;", "+\t\torg.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] methods = expression.methods;", "+\t\t", "+\t\tint fieldsLength = fields == null? 0 : fields.length;", "+\t\tint methodsLength = methods == null? 0 : methods.length;", "+\t\tint membersLength = members == null ? 0 : members.length;", "+\t\tint fieldsIndex = 0;", "+\t\tint methodsIndex = 0;", "+\t\tint membersIndex = 0;", "+\t\t", "+\t\twhile ((fieldsIndex < fieldsLength)", "+\t\t\t|| (membersIndex < membersLength)", "+\t\t\t|| (methodsIndex < methodsLength)) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration nextFieldDeclaration = null;", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration nextMethodDeclaration = null;", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration nextMemberDeclaration = null;", "+\t\t", "+\t\t\tint position = Integer.MAX_VALUE;", "+\t\t\tint nextDeclarationType = -1;", "+\t\t\tif (fieldsIndex < fieldsLength) {", "+\t\t\t\tnextFieldDeclaration = fields[fieldsIndex];", "+\t\t\t\tif (nextFieldDeclaration.declarationSourceStart < position) {", "+\t\t\t\t\tposition = nextFieldDeclaration.declarationSourceStart;", "+\t\t\t\t\tnextDeclarationType = 0; // FIELD", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (methodsIndex < methodsLength) {", "+\t\t\t\tnextMethodDeclaration = methods[methodsIndex];", "+\t\t\t\tif (nextMethodDeclaration.declarationSourceStart < position) {", "+\t\t\t\t\tposition = nextMethodDeclaration.declarationSourceStart;", "+\t\t\t\t\tnextDeclarationType = 1; // METHOD", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (membersIndex < membersLength) {", "+\t\t\t\tnextMemberDeclaration = members[membersIndex];", "+\t\t\t\tif (nextMemberDeclaration.declarationSourceStart < position) {", "+\t\t\t\t\tposition = nextMemberDeclaration.declarationSourceStart;", "+\t\t\t\t\tnextDeclarationType = 2; // MEMBER", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tswitch (nextDeclarationType) {", "+\t\t\t\tcase 0 :", "+\t\t\t\t\tcheckAndAddMultipleFieldDeclaration(fields, fieldsIndex, anonymousClassDeclaration.bodyDeclarations());", "+\t\t\t\t\tfieldsIndex++;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 1 :", "+\t\t\t\t\tmethodsIndex++;", "+\t\t\t\t\tif (!nextMethodDeclaration.isDefaultConstructor() && !nextMethodDeclaration.isClinit()) {", "+\t\t\t\t\t\tanonymousClassDeclaration.bodyDeclarations().add(convert(nextMethodDeclaration));", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 2 :", "+\t\t\t\t\tmembersIndex++;", "+\t\t\t\t\tASTNode node = convert(nextMemberDeclaration);", "+\t\t\t\t\tif (node == null) {", "+\t\t\t\t\t\tanonymousClassDeclaration.setFlags(anonymousClassDeclaration.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tanonymousClassDeclaration.bodyDeclarations().add(node);", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "-\tprivate void buildBodyDeclarations(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration expression, AnonymousClassDeclaration anonymousClassDeclaration) {", "-\t\t// add body declaration in the lexical order", "-\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] members = expression.memberTypes;", "-\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration[] fields = expression.fields;", "-\t\torg.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration[] methods = expression.methods;", "-\t\tint fieldsLength = fields == null? 0 : fields.length;", "-\t\tint methodsLength = methods == null? 0 : methods.length;", "-\t\tint membersLength = members == null ? 0 : members.length;", "-\t\tint fieldsIndex = 0;", "-\t\tint methodsIndex = 0;", "-\t\tint membersIndex = 0;", "-\t\twhile ((fieldsIndex < fieldsLength)", "-\t\t\t|| (membersIndex < membersLength)", "-\t\t\t|| (methodsIndex < methodsLength)) {", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration nextFieldDeclaration = null;", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration nextMethodDeclaration = null;", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration nextMemberDeclaration = null;", "-\t\t", "-\t\t\tint position = Integer.MAX_VALUE;", "-\t\t\tint nextDeclarationType = -1;", "-\t\t\tif (fieldsIndex < fieldsLength) {", "-\t\t\t\tnextFieldDeclaration = fields[fieldsIndex];", "-\t\t\t\tif (nextFieldDeclaration.declarationSourceStart < position) {", "-\t\t\t\t\tposition = nextFieldDeclaration.declarationSourceStart;", "-\t\t\t\t\tnextDeclarationType = 0; // FIELD", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (methodsIndex < methodsLength) {", "-\t\t\t\tnextMethodDeclaration = methods[methodsIndex];", "-\t\t\t\tif (nextMethodDeclaration.declarationSourceStart < position) {", "-\t\t\t\t\tposition = nextMethodDeclaration.declarationSourceStart;", "-\t\t\t\t\tnextDeclarationType = 1; // METHOD", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (membersIndex < membersLength) {", "-\t\t\t\tnextMemberDeclaration = members[membersIndex];", "-\t\t\t\tif (nextMemberDeclaration.declarationSourceStart < position) {", "-\t\t\t\t\tposition = nextMemberDeclaration.declarationSourceStart;", "-\t\t\t\t\tnextDeclarationType = 2; // MEMBER", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tswitch (nextDeclarationType) {", "-\t\t\t\tcase 0 :", "-\t\t\t\t\tcheckAndAddMultipleFieldDeclaration(fields, fieldsIndex, anonymousClassDeclaration.bodyDeclarations());", "-\t\t\t\t\tfieldsIndex++;", "-\t\t\t\tcase 1 :", "-\t\t\t\t\tmethodsIndex++;", "-\t\t\t\t\tif (!nextMethodDeclaration.isDefaultConstructor() && !nextMethodDeclaration.isClinit()) {", "-\t\t\t\t\t\tanonymousClassDeclaration.bodyDeclarations().add(convert(nextMethodDeclaration));", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase 2 :", "-\t\t\t\t\tmembersIndex++;", "-\t\t\t\t\tanonymousClassDeclaration.bodyDeclarations().add(convert(nextMemberDeclaration));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2226cc020799d900499e2e61fb83721", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic TypeDeclaration convert(org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes)", "signatureAfterChange": " \tpublic TypeDeclaration convert(org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes)", "diff": ["-\t */", "-\tpublic TypeDeclaration convert(org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes) {", "-\t\tTypeDeclaration typeDecl = this.ast.newTypeDeclaration();", "-\t\tint nodesLength = nodes.length;", "-\t\tfor (int i = 0; i < nodesLength; i++) {", "-\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode node = nodes[i];", "-\t\t\tif (node instanceof org.eclipse.jdt.internal.compiler.ast.Initializer) {", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Initializer oldInitializer = (org.eclipse.jdt.internal.compiler.ast.Initializer) node;", "-\t\t\t\tInitializer initializer = this.ast.newInitializer();", "-\t\t\t\tinitializer.setBody(convert(oldInitializer.block));", "-\t\t\t\tinitializer.setModifiers(oldInitializer.modifiers);", "-\t\t\t\tinitializer.setSourceRange(oldInitializer.declarationSourceStart, oldInitializer.sourceEnd - oldInitializer.declarationSourceStart + 1);", "-//\t\t\t\tsetJavaDocComment(initializer);", "-//\t\t\t\tinitializer.setJavadoc(convert(oldInitializer.javadoc));", "-\t\t\t\tconvert(oldInitializer.javadoc, initializer);", "-\t\t\t\ttypeDecl.bodyDeclarations().add(initializer);", "-\t\t\t} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) node;", "-\t\t\t\tif (i > 0", "-\t\t\t\t\t&& (nodes[i - 1] instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "-\t\t\t\t\t&& ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)nodes[i - 1]).declarationSourceStart == fieldDeclaration.declarationSourceStart) {", "-\t\t\t\t\t// we have a multiple field declaration", "-\t\t\t\t\t// We retrieve the existing fieldDeclaration to add the new VariableDeclarationFragment", "-\t\t\t\t\tFieldDeclaration currentFieldDeclaration = (FieldDeclaration) typeDecl.bodyDeclarations().get(typeDecl.bodyDeclarations().size() - 1);", "-\t\t\t\t\tcurrentFieldDeclaration.fragments().add(convertToVariableDeclarationFragment(fieldDeclaration));", "-\t\t\t\t} else {", "-\t\t\t\t\t// we can create a new FieldDeclaration", "-\t\t\t\t\ttypeDecl.bodyDeclarations().add(convertToFieldDeclaration(fieldDeclaration));", "-\t\t\t} else if(node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) {", "-\t\t\t\tAbstractMethodDeclaration nextMethodDeclaration = (AbstractMethodDeclaration) node;", "-\t\t\t\tif (!nextMethodDeclaration.isDefaultConstructor() && !nextMethodDeclaration.isClinit()) {", "-\t\t\t\t\ttypeDecl.bodyDeclarations().add(convert(nextMethodDeclaration));", "-\t\t\t} else if(node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration nextMemberDeclaration = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) node;", "-\t\t\t\ttypeDecl.bodyDeclarations().add(convert(nextMemberDeclaration));", "-\t\treturn typeDecl;", "-\t}", "+\t */", "+\tpublic TypeDeclaration convert(org.eclipse.jdt.internal.compiler.ast.ASTNode[] nodes) {", "+\t\tTypeDeclaration typeDecl = this.ast.newTypeDeclaration();", "+\t\tint nodesLength = nodes.length;", "+\t\tfor (int i = 0; i < nodesLength; i++) {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode node = nodes[i];", "+\t\t\tif (node instanceof org.eclipse.jdt.internal.compiler.ast.Initializer) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Initializer oldInitializer = (org.eclipse.jdt.internal.compiler.ast.Initializer) node;", "+\t\t\t\tInitializer initializer = this.ast.newInitializer();", "+\t\t\t\tinitializer.setBody(convert(oldInitializer.block));", "+\t\t\t\tif ((oldInitializer.modifiers & CompilerModifiers.AccJustFlag) != 0) {", "+\t\t\t\t\tsetModifiers(initializer, oldInitializer);", "+\t\t\t\t}", "+\t\t\t\tinitializer.setSourceRange(oldInitializer.declarationSourceStart, oldInitializer.sourceEnd - oldInitializer.declarationSourceStart + 1);", "+//\t\t\t\tsetJavaDocComment(initializer);", "+//\t\t\t\tinitializer.setJavadoc(convert(oldInitializer.javadoc));", "+\t\t\t\tconvert(oldInitializer.javadoc, initializer);", "+\t\t\t\ttypeDecl.bodyDeclarations().add(initializer);", "+\t\t\t} else if (node instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.FieldDeclaration fieldDeclaration = (org.eclipse.jdt.internal.compiler.ast.FieldDeclaration) node;", "+\t\t\t\tif (i > 0", "+\t\t\t\t\t&& (nodes[i - 1] instanceof org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)", "+\t\t\t\t\t&& ((org.eclipse.jdt.internal.compiler.ast.FieldDeclaration)nodes[i - 1]).declarationSourceStart == fieldDeclaration.declarationSourceStart) {", "+\t\t\t\t\t// we have a multiple field declaration", "+\t\t\t\t\t// We retrieve the existing fieldDeclaration to add the new VariableDeclarationFragment", "+\t\t\t\t\tFieldDeclaration currentFieldDeclaration = (FieldDeclaration) typeDecl.bodyDeclarations().get(typeDecl.bodyDeclarations().size() - 1);", "+\t\t\t\t\tcurrentFieldDeclaration.fragments().add(convertToVariableDeclarationFragment(fieldDeclaration));", "+\t\t\t\t} else {", "+\t\t\t\t\t// we can create a new FieldDeclaration", "+\t\t\t\t\ttypeDecl.bodyDeclarations().add(convertToFieldDeclaration(fieldDeclaration));", "+\t\t\t\t}", "+\t\t\t} else if(node instanceof org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration) {", "+\t\t\t\tAbstractMethodDeclaration nextMethodDeclaration = (AbstractMethodDeclaration) node;", "+\t\t\t\tif (!nextMethodDeclaration.isDefaultConstructor() && !nextMethodDeclaration.isClinit()) {", "+\t\t\t\t\ttypeDecl.bodyDeclarations().add(convert(nextMethodDeclaration));", "+\t\t\t\t}", "+\t\t\t} else if(node instanceof org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) {", "+\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration nextMemberDeclaration = (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration) node;", "+\t\t\t\tASTNode nextMemberDeclarationNode = convert(nextMemberDeclaration);", "+\t\t\t\tif (nextMemberDeclarationNode == null) {", "+\t\t\t\t\ttypeDecl.setFlags(typeDecl.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t} else {", "+\t\t\t\t\ttypeDecl.bodyDeclarations().add(nextMemberDeclarationNode);", "+\t\t\t\t}", "+\t\t\t}", "+\t\treturn typeDecl;"]}], "num": 61815}
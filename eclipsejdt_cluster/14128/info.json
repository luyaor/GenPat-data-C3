{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57bb18bcc7367404e3d8eeb15a11877f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3108f79a0a805b60cc1c10fc5d768bb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "bcf6d39cea27ed7bf3bf85709bd7e60dc5605058", "commitAfterChange": "6556a52f97cad4f6513f531b95066570adca8205", "methodNumberBeforeChange": 194, "methodNumberAfterChange": 193, "signatureBeforeChange": " protected void consumeMethodHeaderExtendedDims()", "signatureAfterChange": " protected void consumeMethodHeaderExtendedDims()", "diff": ["+}", "+\tif(md.isAnnotationMethod()) {", "+\t\t((AnnotationMethodDeclaration)md).extendedDimensions = extendedDims;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37ea159a067e1d5fcd7f6b2e4d041f86", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "62f410663119f97c0390751f540a9bffcbce3825", "commitAfterChange": "28e69b92e0d0e233934799e4ff0eb97ca24f173b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tpublic boolean detectCycle(ReferenceBinding superType, TypeReference reference, TypeBinding[] argTypes)", "signatureAfterChange": "  \tpublic boolean detectCycle(ReferenceBinding superType, TypeReference reference, TypeBinding[] argTypes)", "diff": ["+//\t\t\t    if (argType instanceof SourceTypeBinding)", "+\t\t\t    \t// ensure if this is a source superclass that it has already been checked", "+//\t\t\t    \t((SourceTypeBinding) argType).scope.connectTypeHierarchyWithoutMembers();", "-\t\tif (reference == this.superTypeReference) // see findSuperType()", "+\t\tif (reference == this.superTypeReference) { // see findSuperType()", "+\t\t\t// abstract class X<K,V> implements java.util.Map<K,V>", "+\t\t\t//    static abstract class M<K,V> implements Entry<K,V>", "+\t\t\tif (superType.isParameterizedType())", "+\t\t\t\tsuperType = ((ParameterizedTypeBinding) superType).type;", "+\t\t}", "+//\t\tif ((superType.tagBits & BeginHierarchyCheck) == 0 && superType instanceof SourceTypeBinding)", "+\t\t\t// ensure if this is a source superclass that it has already been checked", "+//\t\t\t((SourceTypeBinding) superType).scope.connectTypeHierarchyWithoutMembers();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb62f1b266eb3522c4c104a6c714b627", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "c9cd00a8dc1b877b2c5187fd0281ae7de37ff02a", "commitAfterChange": "4b3b23614cfca32dd53fa7e699914bb6d6883a79", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": "  \tprivate void findMethods( \t\tchar[] selector, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tboolean isCompletingDeclaration, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed)", "signatureAfterChange": "  \tprivate void findMethods( \t\tchar[] selector, \t\tTypeBinding[] typeArgTypes, \t\tTypeBinding[] argTypes, \t\tReferenceBinding receiverType, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tboolean isCompletingDeclaration, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall, \t\tboolean canBePrefixed)", "diff": ["-\t\t\tcurrentType = currentType.superclass();", "+\t\t\tif(currentType.isParameterizedType()) {", "+\t\t\t\tcurrentType = ((ParameterizedTypeBinding)currentType).type.superclass();", "+\t\t\t} else {", "+\t\t\t\tcurrentType = currentType.superclass();", "+\t\t\t}"]}], "num": 14128}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af032b1507dc9b3193920ba4d1b0db15", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45932ddcd7925c4d92ed6b7fd6dfbfa9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/NodeInfoStore.java", "commitBeforeChange": "a8c43fb1703bc9585d371b45c5bc751b66052e18", "commitAfterChange": "40ace06b6f9aaa2f71ebf049ffa37ed745fa6ef3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic final ASTNode newPlaceholderNode(int nodeType)", "signatureAfterChange": " \tpublic final ASTNode newPlaceholderNode(int nodeType)", "diff": ["-\t\t// TODO (david) - use new AST.createInstance(int nodeType) method (the fact that try has no finally should not be an issue for placeholders)", "-\t\tAST ast= fAst;", "-\t\tswitch (nodeType) {", "-\t\t\tcase ASTNode.ANNOTATION_TYPE_DECLARATION :", "-\t\t\t\treturn ast.newAnnotationTypeDeclaration();", "-\t\t\tcase ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION :", "-\t\t\t\treturn ast.newAnnotationTypeMemberDeclaration();", "-\t\t\tcase ASTNode.ANONYMOUS_CLASS_DECLARATION :", "-\t\t\t\treturn ast.newAnonymousClassDeclaration();", "-\t\t\tcase ASTNode.ARRAY_ACCESS :", "-\t\t\t\treturn ast.newArrayAccess();", "-\t\t\tcase ASTNode.ARRAY_CREATION :", "-\t\t\t\treturn ast.newArrayCreation();", "-\t\t\tcase ASTNode.ARRAY_INITIALIZER :", "-\t\t\t\treturn ast.newArrayInitializer();", "-\t\t\tcase ASTNode.ARRAY_TYPE :", "-\t\t\t\treturn ast.newArrayType(ast.newPrimitiveType(PrimitiveType.INT));", "-\t\t\tcase ASTNode.ASSERT_STATEMENT :", "-\t\t\t\treturn ast.newAssertStatement();", "-\t\t\tcase ASTNode.ASSIGNMENT :", "-\t\t\t\treturn ast.newAssignment();", "-\t\t\tcase ASTNode.BLOCK :", "-\t\t\t\treturn ast.newBlock();", "-\t\t\tcase ASTNode.BLOCK_COMMENT :", "-\t\t\t\treturn ast.newBlockComment();", "-\t\t\tcase ASTNode.BOOLEAN_LITERAL :", "-\t\t\t\treturn ast.newBooleanLiteral(false);", "-\t\t\tcase ASTNode.BREAK_STATEMENT :", "-\t\t\t\treturn ast.newBreakStatement();", "-\t\t\tcase ASTNode.CAST_EXPRESSION :", "-\t\t\t\treturn ast.newCastExpression();", "-\t\t\tcase ASTNode.CATCH_CLAUSE :", "-\t\t\t\treturn ast.newCatchClause();", "-\t\t\tcase ASTNode.CHARACTER_LITERAL :", "-\t\t\t\treturn ast.newCharacterLiteral();", "-\t\t\tcase ASTNode.CLASS_INSTANCE_CREATION :", "-\t\t\t\treturn ast.newClassInstanceCreation();", "-\t\t\tcase ASTNode.COMPILATION_UNIT :", "-\t\t\t\treturn ast.newCompilationUnit();", "-\t\t\tcase ASTNode.CONDITIONAL_EXPRESSION :", "-\t\t\t\treturn ast.newConditionalExpression();", "-\t\t\tcase ASTNode.CONSTRUCTOR_INVOCATION :", "-\t\t\t\treturn ast.newConstructorInvocation();", "-\t\t\tcase ASTNode.CONTINUE_STATEMENT :", "-\t\t\t\treturn ast.newContinueStatement();", "-\t\t\tcase ASTNode.DO_STATEMENT :", "-\t\t\t\treturn ast.newDoStatement();", "-\t\t\tcase ASTNode.EMPTY_STATEMENT :", "-\t\t\t\treturn ast.newEmptyStatement();", "-\t\t\tcase ASTNode.ENHANCED_FOR_STATEMENT :", "-\t\t\t\treturn ast.newEnhancedForStatement();", "-\t\t\tcase ASTNode.ENUM_CONSTANT_DECLARATION :", "-\t\t\t\treturn ast.newEnumConstantDeclaration();", "-\t\t\tcase ASTNode.ENUM_DECLARATION :", "-\t\t\t\treturn ast.newEnumDeclaration();", "-\t\t\tcase ASTNode.EXPRESSION_STATEMENT :", "-\t\t\t\treturn ast.newExpressionStatement(ast.newMethodInvocation());", "-\t\t\tcase ASTNode.FIELD_ACCESS :", "-\t\t\t\treturn ast.newFieldAccess();", "-\t\t\tcase ASTNode.FIELD_DECLARATION :", "-\t\t\t\treturn ast.newFieldDeclaration(ast.newVariableDeclarationFragment());", "-\t\t\tcase ASTNode.FOR_STATEMENT :", "-\t\t\t\treturn ast.newForStatement();", "-\t\t\tcase ASTNode.IF_STATEMENT :", "-\t\t\t\treturn ast.newIfStatement();", "-\t\t\tcase ASTNode.IMPORT_DECLARATION :", "-\t\t\t\treturn ast.newImportDeclaration();", "-\t\t\tcase ASTNode.INFIX_EXPRESSION :", "-\t\t\t\treturn ast.newInfixExpression();", "-\t\t\tcase ASTNode.INITIALIZER :", "-\t\t\t\treturn ast.newInitializer();", "-\t\t\tcase ASTNode.INSTANCEOF_EXPRESSION :", "-\t\t\t\treturn ast.newInstanceofExpression();", "-\t\t\tcase ASTNode.JAVADOC :", "-\t\t\t\treturn ast.newJavadoc();", "-\t\t\tcase ASTNode.LABELED_STATEMENT :", "-\t\t\t\treturn ast.newLabeledStatement();", "-\t\t\tcase ASTNode.LINE_COMMENT :", "-\t\t\t\treturn ast.newLineComment();", "-\t\t\tcase ASTNode.MARKER_ANNOTATION :", "-\t\t\t\treturn ast.newMarkerAnnotation();", "-\t\t\tcase ASTNode.MEMBER_REF :", "-\t\t\t\treturn ast.newMemberRef();", "-\t\t\tcase ASTNode.MEMBER_VALUE_PAIR :", "-\t\t\t\treturn ast.newMemberValuePair();", "-\t\t\tcase ASTNode.METHOD_DECLARATION :", "-\t\t\t\treturn ast.newMethodDeclaration();", "-\t\t\tcase ASTNode.METHOD_INVOCATION :", "-\t\t\t\treturn ast.newMethodInvocation();", "-\t\t\tcase ASTNode.METHOD_REF :", "-\t\t\t\treturn ast.newMethodRef();", "-\t\t\tcase ASTNode.METHOD_REF_PARAMETER :", "-\t\t\t\treturn ast.newMethodRefParameter();", "-\t\t\tcase ASTNode.MODIFIER :", "-\t\t\t\treturn ast.newModifier(Modifier.ModifierKeyword.ABSTRACT_KEYWORD);", "-\t\t\tcase ASTNode.NORMAL_ANNOTATION :", "-\t\t\t\treturn ast.newNormalAnnotation();", "-\t\t\tcase ASTNode.NULL_LITERAL :", "-\t\t\t\treturn ast.newNullLiteral();", "-\t\t\tcase ASTNode.NUMBER_LITERAL :", "-\t\t\t\treturn ast.newNumberLiteral();", "-\t\t\tcase ASTNode.PACKAGE_DECLARATION :", "-\t\t\t\treturn ast.newPackageDeclaration();", "-\t\t\tcase ASTNode.PARAMETERIZED_TYPE :", "-\t\t\t\treturn ast.newParameterizedType(ast.newSimpleType(ast.newSimpleName(\"id\"))); //$NON-NLS-1$", "-\t\t\tcase ASTNode.PARENTHESIZED_EXPRESSION :", "-\t\t\t\treturn ast.newParenthesizedExpression();", "-\t\t\tcase ASTNode.POSTFIX_EXPRESSION :", "-\t\t\t\treturn ast.newPostfixExpression();", "-\t\t\tcase ASTNode.PREFIX_EXPRESSION :", "-\t\t\t\treturn ast.newPrefixExpression();", "-\t\t\tcase ASTNode.PRIMITIVE_TYPE :", "-\t\t\t\treturn ast.newPrimitiveType(PrimitiveType.INT);", "-\t\t\tcase ASTNode.QUALIFIED_NAME :", "-\t\t\t\treturn ast.newQualifiedName(ast.newSimpleName(\"id\"), ast.newSimpleName(\"id\"));  //$NON-NLS-1$//$NON-NLS-2$", "-\t\t\tcase ASTNode.QUALIFIED_TYPE :", "-\t\t\t\treturn ast.newQualifiedType(ast.newSimpleType(ast.newSimpleName(\"id\")), ast.newSimpleName(\"id\")); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tcase ASTNode.RETURN_STATEMENT :", "-\t\t\t\treturn ast.newReturnStatement();", "-\t\t\tcase ASTNode.SIMPLE_NAME :", "-\t\t\t\treturn ast.newSimpleName(\"id\"); //$NON-NLS-1$", "-\t\t\tcase ASTNode.SIMPLE_TYPE :", "-\t\t\t\treturn ast.newSimpleType(ast.newSimpleName(\"id\")); //$NON-NLS-1$", "-\t\t\tcase ASTNode.SINGLE_MEMBER_ANNOTATION :", "-\t\t\t\treturn ast.newSingleMemberAnnotation();", "-\t\t\tcase ASTNode.SINGLE_VARIABLE_DECLARATION :", "-\t\t\t\treturn ast.newSingleVariableDeclaration();", "-\t\t\tcase ASTNode.STRING_LITERAL :", "-\t\t\t\treturn ast.newStringLiteral();", "-\t\t\tcase ASTNode.SUPER_CONSTRUCTOR_INVOCATION :", "-\t\t\t\treturn ast.newSuperConstructorInvocation();", "-\t\t\tcase ASTNode.SUPER_FIELD_ACCESS :", "-\t\t\t\treturn ast.newFieldAccess();", "-\t\t\tcase ASTNode.SUPER_METHOD_INVOCATION :", "-\t\t\t\treturn ast.newSuperMethodInvocation();", "-\t\t\tcase ASTNode.SWITCH_CASE:", "-\t\t\t\treturn ast.newSwitchCase();", "-\t\t\tcase ASTNode.SWITCH_STATEMENT :", "-\t\t\t\treturn ast.newSwitchStatement();", "-\t\t\tcase ASTNode.SYNCHRONIZED_STATEMENT :", "-\t\t\t\treturn ast.newSynchronizedStatement();", "-\t\t\tcase ASTNode.TAG_ELEMENT :", "-\t\t\t\treturn ast.newTagElement();", "-\t\t\tcase ASTNode.TEXT_ELEMENT :", "-\t\t\t\treturn ast.newTextElement();", "-\t\t\tcase ASTNode.THIS_EXPRESSION :", "-\t\t\t\treturn ast.newThisExpression();", "-\t\t\tcase ASTNode.THROW_STATEMENT :", "-\t\t\t\treturn ast.newThrowStatement();", "-\t\t\tcase ASTNode.TRY_STATEMENT :", "-\t\t\t\tTryStatement tryStatement= ast.newTryStatement();", "-\t\t\t\ttryStatement.setFinally(ast.newBlock()); // have to set at least a finally clock to be legal code", "-\t\t\t\treturn tryStatement;", "-\t\t\tcase ASTNode.TYPE_DECLARATION :", "-\t\t\t\treturn ast.newTypeDeclaration();", "-\t\t\tcase ASTNode.TYPE_DECLARATION_STATEMENT :", "-\t\t\t\treturn ast.newTypeDeclarationStatement(ast.newTypeDeclaration());", "-\t\t\tcase ASTNode.TYPE_LITERAL :", "-\t\t\t\treturn ast.newTypeLiteral();", "-\t\t\tcase ASTNode.TYPE_PARAMETER :", "-\t\t\t\treturn ast.newTypeParameter();", "-\t\t\tcase ASTNode.VARIABLE_DECLARATION_EXPRESSION :", "-\t\t\t\treturn ast.newVariableDeclarationExpression(ast.newVariableDeclarationFragment());", "-\t\t\tcase ASTNode.VARIABLE_DECLARATION_FRAGMENT :", "-\t\t\t\treturn ast.newVariableDeclarationFragment();", "-\t\t\tcase ASTNode.VARIABLE_DECLARATION_STATEMENT :", "-\t\t\t\treturn ast.newVariableDeclarationStatement(ast.newVariableDeclarationFragment());", "-\t\t\tcase ASTNode.WHILE_STATEMENT :", "-\t\t\t\treturn ast.newWhileStatement();", "-\t\t\tcase ASTNode.WILDCARD_TYPE :", "-\t\t\t\treturn ast.newWildcardType();", "-\t\t}", "-\t\tthrow new IllegalArgumentException();", "-\t}", "+\t    try {", "+\t\t    ASTNode node= this.ast.createInstance(nodeType);", "+\t\t    switch (node.getNodeType()) {", "+\t\t\t\tcase ASTNode.FIELD_DECLARATION:", "+\t\t\t\t    ((FieldDeclaration) node).fragments().add(this.ast.newVariableDeclarationFragment());", "+\t\t\t\t    break;", "+\t\t\t\tcase ASTNode.MODIFIER:", "+\t\t\t\t    ((Modifier) node).setKeyword(Modifier.ModifierKeyword.ABSTRACT_KEYWORD);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ASTNode.TRY_STATEMENT :", "+\t\t\t\t\t((TryStatement) node).setFinally(this.ast.newBlock()); // have to set at least a finally block to be legal code", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ASTNode.VARIABLE_DECLARATION_EXPRESSION :", "+\t\t\t\t    ((VariableDeclarationExpression) node).fragments().add(this.ast.newVariableDeclarationFragment());", "+\t\t\t    \tbreak;", "+\t\t\t\tcase ASTNode.VARIABLE_DECLARATION_STATEMENT :", "+\t\t\t\t    ((VariableDeclarationStatement) node).fragments().add(this.ast.newVariableDeclarationFragment());", "+\t\t    \t\tbreak;", "+\t\t\t}", "+\t\t    return node;", "+\t    } catch (IllegalArgumentException e) {", "+\t        return null;", "+\t    }", "+ \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9294e6a044c0f0bd771004723494f727", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelStatus.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \tpublic String getMessage()", "signatureAfterChange": "\r public String getMessage()", "diff": ["-\t */\r", "-\tpublic String getMessage() {\r", "-\t\tif (getException() == null) {\r", "-\t\t\tswitch (getCode()) {\r", "-\t\t\t\tcase CORE_EXCEPTION :\r", "-\t\t\t\t\treturn \"Core exception.\";\r", "-\t\t\t\tcase BUILDER_INITIALIZATION_ERROR :\r", "-\t\t\t\t\treturn \"Builder initialization error.\";\r", "-\t\t\t\tcase BUILDER_SERIALIZATION_ERROR :\r", "-\t\t\t\t\treturn \"Builder serialization error.\";\r", "-\t\t\t\tcase DEVICE_PATH :\r", "-\t\t\t\t\treturn \"Operation requires a path with no device. Path specified was: \"\r", "-\t\t\t\t\t\t+ getPath().toString();\r", "-\t\t\t\tcase DOM_EXCEPTION :\r", "-\t\t\t\t\treturn \"JDOM error.\";\r", "-\t\t\t\tcase ELEMENT_DOES_NOT_EXIST :\r", "-\t\t\t\t\treturn fElements[0].getElementName() + \" does not exist.\";\r", "-\t\t\t\tcase EVALUATION_ERROR :\r", "-\t\t\t\t\treturn \"Evaluation error: \" + getString();\r", "-\t\t\t\tcase INDEX_OUT_OF_BOUNDS :\r", "-\t\t\t\t\treturn \"Index out of bounds.\";\r", "-\t\t\t\tcase INVALID_CONTENTS :\r", "-\t\t\t\t\treturn \"Invalid contents specified.\";\r", "-\t\t\t\tcase INVALID_DESTINATION :\r", "-\t\t\t\t\treturn \"Invalid destination: \" + fElements[0].getElementName();\r", "-\t\t\t\tcase INVALID_ELEMENT_TYPES :\r", "-\t\t\t\t\tStringBuffer buff =\r", "-\t\t\t\t\t\tnew StringBuffer(\"Operation not supported for specified element type(s): \");\r", "-\t\t\t\t\tfor (int i = 0; i < fElements.length; i++) {\r", "-\t\t\t\t\t\tif (i > 0) {\r", "-\t\t\t\t\t\t\tbuff.append(\", \");\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbuff.append(fElements[0].getElementName());\r", "+ */\r", "+public String getMessage() {\r", "+\tif (getException() == null) {\r", "+\t\tswitch (getCode()) {\r", "+\t\t\tcase CORE_EXCEPTION :\r", "+\t\t\t\treturn Util.bind(\"status.coreException\"/*nonNLS*/);\r", "+\t\t\tcase BUILDER_INITIALIZATION_ERROR:\r", "+\t\t\t\treturn Util.bind(\"build.initializationError\"/*nonNLS*/);\r", "+\t\t\tcase BUILDER_SERIALIZATION_ERROR:\r", "+\t\t\t\treturn Util.bind(\"build.serializationError\"/*nonNLS*/);\r", "+\t\t\tcase DEVICE_PATH:\r", "+\t\t\t\treturn Util.bind(\"status.cannotUseDeviceOnPath\"/*nonNLS*/, getPath().toString());\r", "+\t\t\tcase DOM_EXCEPTION:\r", "+\t\t\t\treturn Util.bind(\"status.JDOMError\"/*nonNLS*/);\r", "+\t\t\tcase ELEMENT_DOES_NOT_EXIST:\r", "+\t\t\t\treturn Util.bind(\"element.doesNotExist\"/*nonNLS*/,fElements[0].getElementName());\r", "+\t\t\tcase EVALUATION_ERROR:\r", "+\t\t\t\treturn Util.bind(\"status.evaluationError\"/*nonNLS*/, getString());\r", "+\t\t\tcase INDEX_OUT_OF_BOUNDS:\r", "+\t\t\t\treturn Util.bind(\"status.indexOutOfBounds\"/*nonNLS*/);\r", "+\t\t\tcase INVALID_CONTENTS:\r", "+\t\t\t\treturn Util.bind(\"status.invalidContents\"/*nonNLS*/);\r", "+\t\t\tcase INVALID_DESTINATION:\r", "+\t\t\t\treturn Util.bind(\"status.invalidDestination\"/*nonNLS*/, fElements[0].getElementName());\r", "+\t\t\tcase INVALID_ELEMENT_TYPES:\r", "+\t\t\t\tStringBuffer buff= new StringBuffer(Util.bind(\"operation.notSupported\"/*nonNLS*/));\r", "+\t\t\t\tfor (int i= 0; i < fElements.length; i++) {\r", "+\t\t\t\t\tif (i > 0) {\r", "+\t\t\t\t\t\tbuff.append(\", \"/*nonNLS*/);\r", "-\t\t\t\t\treturn buff.toString();\r", "-\t\t\t\tcase INVALID_NAME :\r", "-\t\t\t\t\treturn \"Invalid name specified: \" + getString();\r", "-\t\t\t\tcase INVALID_PACKAGE :\r", "-\t\t\t\t\treturn \"Invalid package: \" + getString();\r", "-\t\t\t\tcase INVALID_PATH :\r", "-\t\t\t\t\treturn \"Invalid path: \" + (getPath() == null ? \"null\" : getPath().toString());\r", "-\t\t\t\tcase INVALID_PROJECT :\r", "-\t\t\t\t\treturn \"Invalid project: \" + getString();\r", "-\t\t\t\tcase INVALID_RESOURCE :\r", "-\t\t\t\t\treturn \"Invalid resource: \" + getString();\r", "-\t\t\t\tcase INVALID_RESOURCE_TYPE :\r", "-\t\t\t\t\treturn \"Invalid resource type for \" + getString();\r", "-\t\t\t\tcase INVALID_SIBLING :\r", "-\t\t\t\t\treturn \"Invalid sibling: \" + fElements[0].getElementName();\r", "-\t\t\t\tcase IO_EXCEPTION :\r", "-\t\t\t\t\treturn \"IO exception.\";\r", "-\t\t\t\tcase NAME_COLLISION :\r", "-\t\t\t\t\tif (fElements != null && fElements.length > 0) {\r", "-\t\t\t\t\t\tIJavaElement element = fElements[0];\r", "-\t\t\t\t\t\tString name = element.getElementName();\r", "-\t\t\t\t\t\tif (element instanceof IPackageFragment\r", "-\t\t\t\t\t\t\t&& name.equals(IPackageFragment.DEFAULT_PACKAGE_NAME)) {\r", "-\t\t\t\t\t\t\treturn \"Default package cannot be renamed.\";\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\treturn \"Name collision.\";\r", "-\t\t\t\tcase NO_ELEMENTS_TO_PROCESS :\r", "-\t\t\t\t\treturn \"Operation requires one or more elements.\";\r", "-\t\t\t\tcase NULL_NAME :\r", "-\t\t\t\t\treturn \"Operation requires a name.\";\r", "-\t\t\t\tcase NULL_PATH :\r", "-\t\t\t\t\treturn \"Operation requires a path.\";\r", "-\t\t\t\tcase NULL_STRING :\r", "-\t\t\t\t\treturn \"Operation requires a string.\";\r", "-\t\t\t\tcase PATH_OUTSIDE_PROJECT :\r", "-\t\t\t\t\treturn \"Illegal path specified: \" + getPath().toString();\r", "-\t\t\t\tcase READ_ONLY :\r", "+\t\t\t\t\tbuff.append(fElements[0].getElementName());\r", "+\t\t\t\t}\r", "+\t\t\t\treturn buff.toString();\r", "+\t\t\tcase INVALID_NAME:\r", "+\t\t\t\treturn Util.bind(\"status.invalidName\"/*nonNLS*/, getString());\r", "+\t\t\tcase INVALID_PACKAGE:\r", "+\t\t\t\treturn Util.bind(\"status.invalidPackage\"/*nonNLS*/, getString());\r", "+\t\t\tcase INVALID_PATH:\r", "+\t\t\t\treturn Util.bind(\"status.invalidPath\"/*nonNLS*/, getPath() == null ? \"null\"/*nonNLS*/ : getPath().toString());\r", "+\t\t\tcase INVALID_PROJECT:\r", "+\t\t\t\treturn Util.bind(\"status.invalidProject\"/*nonNLS*/, getString());\r", "+\t\t\tcase INVALID_RESOURCE:\r", "+\t\t\t\treturn Util.bind(\"status.invalidResource\"/*nonNLS*/, getString());\r", "+\t\t\tcase INVALID_RESOURCE_TYPE:\r", "+\t\t\t\treturn Util.bind(\"status.invalidResourceType\"/*nonNLS*/, getString());\r", "+\t\t\tcase INVALID_SIBLING:\r", "+\t\t\t\treturn Util.bind(\"status.invalidSibling\"/*nonNLS*/, fElements[0].getElementName());\r", "+\t\t\tcase IO_EXCEPTION:\r", "+\t\t\t\treturn Util.bind(\"status.IOException\"/*nonNLS*/);\r", "+\t\t\tcase NAME_COLLISION:\r", "+\t\t\t\tif (fElements != null && fElements.length > 0) {\r", "-\t\t\t\t\tif (element instanceof IPackageFragment\r", "-\t\t\t\t\t\t&& name.equals(IPackageFragment.DEFAULT_PACKAGE_NAME)) {\r", "-\t\t\t\t\t\tname = \"Default package\";\r", "+\t\t\t\t\tif (element instanceof IPackageFragment && name.equals(IPackageFragment.DEFAULT_PACKAGE_NAME)) {\r", "+\t\t\t\t\t\treturn Util.bind(\"operation.cannotRenameDefaultPackage\"/*nonNLS*/);\r", "-\t\t\t\t\treturn name + \" is read-only.\";\r", "-\t\t\t\tcase RELATIVE_PATH :\r", "-\t\t\t\t\treturn \"Operation requires an absolute path. Relative path specified was: \"\r", "-\t\t\t\t\t\t+ getPath().toString();\r", "-\t\t\t\tcase TARGET_EXCEPTION :\r", "-\t\t\t\t\treturn \"Target exception.\";\r", "-\t\t\t\tcase UPDATE_CONFLICT :\r", "-\t\t\t\t\treturn \"Update conflict.\";\r", "-\t\t\t\tcase NO_LOCAL_CONTENTS :\r", "-\t\t\t\t\treturn \"Cannot find local contents for resource: \" + getPath().toString();\r", "-\t\t\t}\r", "-\t\t\treturn getString();\r", "-\t\t} else {\r", "-\t\t\tif (getCode() == CORE_EXCEPTION) {\r", "-\t\t\t\treturn \"Core exception: \" + getException().getMessage();\r", "-\t\t\t}\r", "-\t\t\treturn getException().getMessage();\r", "+\t\t\t\t}\r", "+\t\t\t\treturn Util.bind(\"status.nameCollision\"/*nonNLS*/);\r", "+\t\t\tcase NO_ELEMENTS_TO_PROCESS:\r", "+\t\t\t\treturn Util.bind(\"operation.needElements\"/*nonNLS*/);\r", "+\t\t\tcase NULL_NAME:\r", "+\t\t\t\treturn Util.bind(\"operation.needName\"/*nonNLS*/);\r", "+\t\t\tcase NULL_PATH:\r", "+\t\t\t\treturn Util.bind(\"operation.needPath\"/*nonNLS*/);\r", "+\t\t\tcase NULL_STRING:\r", "+\t\t\t\treturn Util.bind(\"operation.needString\"/*nonNLS*/);\r", "+\t\t\tcase PATH_OUTSIDE_PROJECT:\r", "+\t\t\t\treturn Util.bind(\"operation.pathOutsideProject\"/*nonNLS*/, getString(), fElements[0].getElementName());\r", "+\t\t\tcase READ_ONLY:\r", "+\t\t\t\tIJavaElement element = fElements[0];\r", "+\t\t\t\tString name = element.getElementName();\r", "+\t\t\t\tif (element instanceof IPackageFragment && name.equals(IPackageFragment.DEFAULT_PACKAGE_NAME)) {\r", "+\t\t\t\t\treturn Util.bind(\"status.defaultPackageReadOnly\"/*nonNLS*/);\r", "+\t\t\t\t}\r", "+\t\t\t\treturn  Util.bind(\"status.readOnly\"/*nonNLS*/, name);\r", "+\t\t\tcase RELATIVE_PATH:\r", "+\t\t\t\treturn Util.bind(\"operation.needAbsolutePath\"/*nonNLS*/, getPath().toString());\r", "+\t\t\tcase TARGET_EXCEPTION:\r", "+\t\t\t\treturn Util.bind(\"status.targetException\"/*nonNLS*/);\r", "+\t\t\tcase UPDATE_CONFLICT:\r", "+\t\t\t\treturn Util.bind(\"status.updateConflict\"/*nonNLS*/);\r", "+\t\t\tcase NO_LOCAL_CONTENTS :\r", "+\t\t\t\treturn Util.bind(\"status.noLocalContents\"/*nonNLS*/, getPath().toString());\r", "+\t\t}\r", "+\t\treturn getString();\r", "+\t} else {\r", "+\t\tif (getCode() == CORE_EXCEPTION){\r", "+\t\t\treturn Util.bind(\"status.coreExceptionWithArg\"/*nonNLS*/, getException().getMessage());\r", "+\t\t}\r", "+\t\treturn getException().getMessage();\r", "+\t}\r", "+}\r"]}], "num": 24437}
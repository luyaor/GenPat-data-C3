{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "118c909c8681e3b429609cd189872ba3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "118ecd4cf05efb57463ee0a2157ff89f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "06cedbd8bd184e3f34c939385e2cbddd9e3aedca", "commitAfterChange": "0d09a2966f3cebfb8d6601000e2b64259fed7dd8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "signatureAfterChange": " \tpublic TypeBinding resolveType(BlockScope blockScope)", "diff": ["+\t\tif (this.expectedType != null && this.original == this) {  // final resolution.", "+\t\t\tthis.ordinal = blockScope.referenceCompilationUnit().record(this);", "+\t\t}", "+\t\t", "-\t\t\t\t\t\t\tTypeConstants.ANONYMOUS_METHOD, // will be fixed up later.", "+\t\t\t\t\t\t\tCharOperation.concat(TypeConstants.ANONYMOUS_METHOD, Integer.toString(this.ordinal).toCharArray()), // will be fixed up later."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec33184a4638052deed9f58cd34d667a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "6a9c839afeea06e7dd97b023fa9c24def00f0f08", "commitAfterChange": "cf7db1b07f7da2723bd250cc64a7e16bec1c504d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private IType findSuperClass(IGenericType type, ReferenceBinding typeBinding)", "signatureAfterChange": " private IType findSuperClass(IGenericType type, ReferenceBinding typeBinding)", "diff": ["-\t\tif (superBinding.id == TypeIds.T_JavaLangObject && typeBinding.isHierarchyInconsistent()) {", "-\t\t\tchar[] superclassName;", "-\t\t\tchar separator;", "-\t\t\tif (type instanceof IBinaryType) {", "-\t\t\t\tsuperclassName = ((IBinaryType)type).getSuperclassName();", "-\t\t\t\tseparator = '/';", "-\t\t\t} else if (type instanceof ISourceType) {", "-\t\t\t\tsuperclassName = ((ISourceType)type).getSuperclassName();", "-\t\t\t\tseparator = '.';", "-\t\t\t} else if (type instanceof HierarchyType) {", "-\t\t\t\tsuperclassName = ((HierarchyType)type).superclassName;", "-\t\t\t\tseparator = '.';", "-\t\t\t} else {", "+\t\tif (typeBinding.isHierarchyInconsistent()) {", "+\t\t\tif (superBinding.problemId() == ProblemReasons.NotFound) {", "+\t\t\t\tthis.hasMissingSuperClass = true;", "+\t\t\t\tthis.builder.hierarchy.missingTypes.add(new String(superBinding.sourceName)); // note: this could be Map$Entry", "-\t\t\t}", "-\t\t\t", "-\t\t\tif (superclassName != null) { // check whether subclass of Object due to broken hierarchy (as opposed to explicitly extending it)", "-\t\t\t\tint lastSeparator = CharOperation.lastIndexOf(separator, superclassName);", "-\t\t\t\tchar[] simpleName = lastSeparator == -1 ? superclassName : CharOperation.subarray(superclassName, lastSeparator+1, superclassName.length);", "-\t\t\t\tif (!CharOperation.equals(simpleName, TypeConstants.OBJECT)) {", "-\t\t\t\t\tthis.hasMissingSuperClass = true;", "-\t\t\t\t\tthis.builder.hierarchy.missingTypes.add(new String(simpleName));", "+\t\t\t} else if ((superBinding.id == TypeIds.T_JavaLangObject)) {", "+\t\t\t\tchar[] superclassName;", "+\t\t\t\tchar separator;", "+\t\t\t\tif (type instanceof IBinaryType) {", "+\t\t\t\t\tsuperclassName = ((IBinaryType)type).getSuperclassName();", "+\t\t\t\t\tseparator = '/';", "+\t\t\t\t} else if (type instanceof ISourceType) {", "+\t\t\t\t\tsuperclassName = ((ISourceType)type).getSuperclassName();", "+\t\t\t\t\tseparator = '.';", "+\t\t\t\t} else if (type instanceof HierarchyType) {", "+\t\t\t\t\tsuperclassName = ((HierarchyType)type).superclassName;", "+\t\t\t\t\tseparator = '.';", "+\t\t\t\t} else {", "+\t\t\t\t", "+\t\t\t\tif (superclassName != null) { // check whether subclass of Object due to broken hierarchy (as opposed to explicitly extending it)", "+\t\t\t\t\tint lastSeparator = CharOperation.lastIndexOf(separator, superclassName);", "+\t\t\t\t\tchar[] simpleName = lastSeparator == -1 ? superclassName : CharOperation.subarray(superclassName, lastSeparator+1, superclassName.length);", "+\t\t\t\t\tif (!CharOperation.equals(simpleName, TypeConstants.OBJECT)) {", "+\t\t\t\t\t\tthis.hasMissingSuperClass = true;", "+\t\t\t\t\t\tthis.builder.hierarchy.missingTypes.add(new String(simpleName));", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 16890}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a987ededef554a41759a487b6c09734", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "171d3aa6ea5db218b09307218430d095", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elementutils/ElementUtilsProc.java", "commitBeforeChange": "c7e13eb999aeeb70fd34b19df0f27a778109206c", "commitAfterChange": "ad2281f1520933e65d479408c685e1055d82a8b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate boolean collectElements()", "signatureAfterChange": " \tprivate boolean collectElements()", "diff": ["+\t\t_elementH = _elementUtils.getTypeElement(\"targets.model.pc.H\");", "+\t\tif (_elementH == null || _elementH.getKind() != ElementKind.CLASS) {", "+\t\t\treportError(\"element H was not found or was not a class\");", "+\t\t\treturn false;", "+\t\t}", "+\t\t", "+\t\t_elementAnnoX = _elementUtils.getTypeElement(\"targets.model.pc.AnnoX\");", "+\t\tif (null == _elementAnnoX || _elementAnnoX.getKind() != ElementKind.ANNOTATION_TYPE) {", "+\t\t\treportError(\"annotation type annoX was not found or was not an annotation\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tfor (ExecutableElement method : ElementFilter.methodsIn(_elementAnnoX.getEnclosedElements())) {", "+\t\t\tif (\"value\".equals(method.getSimpleName().toString())) {", "+\t\t\t\t_annoXValue = method;", "+\t\t\t}", "+\t\t}", "+\t\tif (null == _annoXValue) {", "+\t\t\treportError(\"Could not find value() method in annotation type AnnoX\");", "+\t\t\treturn false;", "+\t\t}", "+\t\t", "+\t\t_elementAnnoY = _elementUtils.getTypeElement(\"targets.model.pc.AnnoY\");", "+\t\tif (null == _elementAnnoY || _elementAnnoY.getKind() != ElementKind.ANNOTATION_TYPE) {", "+\t\t\treportError(\"annotation type annoY was not found or was not an annotation\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tfor (ExecutableElement method : ElementFilter.methodsIn(_elementAnnoY.getEnclosedElements())) {", "+\t\t\tif (\"value\".equals(method.getSimpleName().toString())) {", "+\t\t\t\t_annoYValue = method;", "+\t\t\t}", "+\t\t}", "+\t\tif (null == _annoYValue) {", "+\t\t\treportError(\"Could not find value() method in annotation type AnnoY\");", "+\t\t\treturn false;", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd83abaeaaa844447b8243b1cad8d528", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "63332515d07582eba4f5498d0bab26ce5646d103", "commitAfterChange": "9eacf221f3c2e0ebf1c2ce20d0a8cd74ff4bb60a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate boolean examineDAnnotations()", "signatureAfterChange": " \tprivate boolean examineDAnnotations()", "diff": ["+\t\t\t", "+\t\t\t// Check Elements.getElementValuesWithDefaults()", "+\t\t\tMap<? extends ExecutableElement, ? extends AnnotationValue> defaults = ", "+\t\t\t\t_elementUtils.getElementValuesWithDefaults(annotD);", "+\t\t\tif (null == defaults) {", "+\t\t\t\treportError(\"Element.getElementValuesWithDefaults(annotD) returned null\");", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tfor (Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : defaults.entrySet()) {", "+\t\t\t\tString methodName = entry.getKey().getSimpleName().toString();", "+\t\t\t\tif (\"annoZString\".equals(methodName)) {", "+\t\t\t\t\tfoundStringMethod = true;", "+\t\t\t\t\tObject value = entry.getValue().getValue();", "+\t\t\t\t\tif (!\"annoZOnD\".equals(value)) {", "+\t\t\t\t\t\treportError(\"Explicit value of AnnoZ.annoZString is not \\\"annoZOnD\\\"\");", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\telse if (\"annoZint\".equals(methodName)) {", "+\t\t\t\t\tfoundStringMethod = true;", "+\t\t\t\t\t// TODO: this doesn't work because we are not getting default values resolved.", "+/*\t\t\t\t\tObject value = entry.getValue().getValue();", "+\t\t\t\t\tif (null == value || !value.equals(17)) {", "+\t\t\t\t\t\treportError(\"Default value of AnnoZ.annoZint() is not 17\");", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+*/\t\t\t\t}", "+\t\t\t}"]}], "num": 21226}
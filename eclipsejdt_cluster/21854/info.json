{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c01183252faa5e08f98d7992df33260", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13e196df4ee836660a28fb84abeb001b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnresolvedReferenceBinding.java", "commitBeforeChange": "b7403b29059200afb0a63e6027ea84fe3b4ecb92", "commitAfterChange": "1ee3b257e822fcbedfd61f468d0d681f07548107", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " ReferenceBinding resolve(LookupEnvironment environment, boolean convertGenericToRawType)", "signatureAfterChange": " ReferenceBinding resolve(LookupEnvironment environment, boolean convertGenericToRawType)", "diff": ["-\t\tboolean rawEnclosing = false;", "-\t\tReferenceBinding targetEnclosingType = targetType.enclosingType();", "-\t\tif (targetEnclosingType != null && targetEnclosingType.isGenericType()) { // convert to raw type since wasn't parameterized", "-\t\t\trawEnclosing = true;", "-\t\t\ttargetEnclosingType = environment.createRawType(targetEnclosingType, targetEnclosingType.enclosingType());", "-\t\t}", "-\t\tif (targetType.isGenericType()) { // raw reference to generic ?", "-\t\t    return environment.createRawType(targetType, targetEnclosingType);", "-\t\t} else if (rawEnclosing) {", "-\t\t\treturn environment.createParameterizedType(targetType, null, targetEnclosingType);", "-\t\t}", "+\t\ttargetType = (ReferenceBinding) environment.convertToRawType(targetType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3abc7ca800c983cea0276f5fc98b17c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnresolvedReferenceBinding.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " ReferenceBinding resolve(LookupEnvironment environment, boolean convertGenericToRawType)", "signatureAfterChange": " ReferenceBinding resolve(LookupEnvironment environment, boolean convertGenericToRawType)", "diff": ["-\tif (convertGenericToRawType && targetType.isGenericType()) // raw reference to generic ?", "-\t    return environment.createRawType(targetType, null);", "+\tif (convertGenericToRawType) {", "+\t\tboolean rawEnclosing = false;", "+\t\tReferenceBinding targetEnclosingType = targetType.enclosingType();", "+\t\tif (targetEnclosingType != null && targetEnclosingType.isGenericType()) { // convert to raw type since wasn't parameterized", "+\t\t\trawEnclosing = true;", "+\t\t\ttargetEnclosingType = environment.createRawType(targetEnclosingType, targetEnclosingType.enclosingType());", "+\t\t}", "+\t\tif (targetType.isGenericType()) { // raw reference to generic ?", "+\t\t    return environment.createRawType(targetType, targetEnclosingType);", "+\t\t} else if (rawEnclosing) {", "+\t\t\treturn environment.createParameterizedType(targetType, null, targetEnclosingType);", "+\t\t}", "+\t}"]}], "num": 21854}
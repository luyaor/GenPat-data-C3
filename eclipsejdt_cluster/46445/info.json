{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f7f6d914a54a2a1bd07b657d0fc9fc39", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69d48146376b459fa0469ec5362878a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementNotifier.java", "commitBeforeChange": "23d1bc466b4877bf5eceb83f88acf63af19c0d70", "commitAfterChange": "2b0e753de92cc29b7a8b55b07153a9f3b515c0be", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " protected void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration, TypeDeclaration declaringType, ImportReference currentPackage)", "signatureAfterChange": " protected void notifySourceElementRequestor(AbstractMethodDeclaration methodDeclaration, TypeDeclaration declaringType, ImportReference currentPackage)", "diff": ["+\t\t\tcurrentModifiers &= ExtraCompilerModifiers.AccJustFlag | ClassFileConstants.AccDeprecated;", "-", "-\t\t\t// remember deprecation so as to not lose it below", "-\t\t\tboolean deprecated = (currentModifiers & ClassFileConstants.AccDeprecated) != 0 || hasDeprecatedAnnotation(methodDeclaration.annotations);", "+\t\t\tif (hasDeprecatedAnnotation(methodDeclaration.annotations))", "+\t\t\t\tcurrentModifiers |= ClassFileConstants.AccDeprecated;", "-\t\t\tmethodInfo.modifiers = deprecated ? (currentModifiers & ExtraCompilerModifiers.AccJustFlag) | ClassFileConstants.AccDeprecated : currentModifiers & ExtraCompilerModifiers.AccJustFlag;", "+\t\t\tmethodInfo.modifiers = currentModifiers;", "+\t\tcurrentModifiers &= ExtraCompilerModifiers.AccJustFlag | ClassFileConstants.AccDeprecated | ClassFileConstants.AccAnnotationDefault | ExtraCompilerModifiers.AccDefaultMethod;", "-", "-\t\t// remember deprecation so as to not lose it below", "-\t\tboolean deprecated = (currentModifiers & ClassFileConstants.AccDeprecated) != 0 || hasDeprecatedAnnotation(methodDeclaration.annotations);", "+\t\tif (hasDeprecatedAnnotation(methodDeclaration.annotations))", "+\t\t\tcurrentModifiers |= ClassFileConstants.AccDeprecated;", "-\t\tmethodInfo.modifiers = deprecated ? (currentModifiers & ExtraCompilerModifiers.AccJustFlag) | ClassFileConstants.AccDeprecated : currentModifiers & ExtraCompilerModifiers.AccJustFlag;", "+\t\tmethodInfo.modifiers = currentModifiers;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d548319aca9e6e88a162c369bbca896d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKeyScanner.java", "commitBeforeChange": "ec6d7f365ea3ec3ffcd55d64775bd62b984807f3", "commitAfterChange": "c021c50efca4c234ec58241ed1fc82f6871e98bd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tboolean isAtTypeEnd()", "signatureAfterChange": " \t \tboolean isAtTypeStart()", "diff": ["-\tboolean isAtTypeEnd() {", "-\t\tchar currentChar;", "-\t\t\tthis.index == -1", "-\t\t\t|| this.index >= this.source.length-1 ", "-\t\t\t|| (currentChar = this.source[this.index]) == ',' ", "-\t\t\t|| currentChar == '(' ", "-\t\t\t|| currentChar == '<' ", "-\t\t\t|| currentChar == ':';", "+\t", "+\tboolean isAtTypeStart() {", "+\t\treturn this.index+1 < this.source.length && \"LIZVCDBFJS[\".indexOf(this.source[this.index+1]) != -1; //$NON-NLS-1$", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efb020d07dbb9104c1d1c711ac3d6cc7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " void matchReportReference(Expression expr, IJavaElement element, int accuracy, int start, int end, int lastIndex, TypeBinding refBinding, MatchLocator locator) throws CoreException", "signatureAfterChange": " void matchReportReference(Expression expr, IJavaElement element, int accuracy, int start, int end, int lastIndex, TypeBinding refBinding, MatchLocator locator) throws CoreException", "diff": ["-\tboolean patternHasParameters = false;", "-\tif (this.pattern.isParameterized()) {", "-\t\tpatternHasParameters = this.pattern.typeArguments[0] != null && this.pattern.typeArguments[0].length != 0;", "-\t}", "-\t\trefinedAccuracy = refineAccuracy(accuracy, parameterizedBinding, this.pattern.typeArguments, this.pattern.typeSignatures==null, 0, locator);", "+\t\trefinedAccuracy = refineAccuracy(accuracy, parameterizedBinding, this.pattern.getTypeArguments(), this.pattern.hasTypeParameters(), 0, locator);", "-\t\t if (refBinding.isParameterizedType() && this.pattern.isParameterized())  {", "+\t\t if (refBinding.isParameterizedType() && this.pattern.hasTypeArguments())  {", "-\t} else if (patternHasParameters) { // binding has no type params, compatible erasure if pattern does", "+\t} else if (this.pattern.hasTypeArguments()) { // binding has no type params, compatible erasure if pattern does"]}], "num": 46445}
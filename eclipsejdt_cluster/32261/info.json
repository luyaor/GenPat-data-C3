{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "378fd0754138b46d0dc6bd76048ceb9a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93ed44cd5dacbf0c3c0d02e8de98a641", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "ca1c70fe619bd146613895fa764af2d040529e30", "commitAfterChange": "0ae44cb94fd5970ee99a6625f01c4e21cfef9943", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r private boolean updateCurrentDeltaAndIndex(IResourceDelta delta, int elementType, IJavaProject project) throws JavaModelException", "signatureAfterChange": "\r private boolean updateCurrentDeltaAndIndex(IResourceDelta delta, int elementType, IJavaProject project) throws JavaModelException", "diff": ["-\t\t\t} else if (elementType == IJavaElement.JAVA_PROJECT\r", "-\t\t\t\t\t&& (flags & IResourceDelta.OPEN) != 0) {\r", "-\t\t\t\t// project has been opened or closed\r", "-\t\t\t\tIProject res = (IProject)delta.getResource();\r", "-\t\t\t\telement = this.createElement(res, elementType, project);\r", "-\t\t\t\tif (element == null) throw newInvalidElementType();\r", "-\t\t\t\tif (res.isOpen()) {\r", "-\t\t\t\t\tthis.elementOpened(element, delta);\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tthis.elementClosed(element, delta);\r", "+\t\t\t} else if (elementType == IJavaElement.JAVA_PROJECT) {\r", "+\t\t\t\tif ((flags & IResourceDelta.OPEN) != 0) {\r", "+\t\t\t\t\t// project has been opened or closed\r", "+\t\t\t\t\tIProject res = (IProject)delta.getResource();\r", "+\t\t\t\t\telement = this.createElement(res, elementType, project);\r", "+\t\t\t\t\tif (element == null) throw newInvalidElementType();\r", "+\t\t\t\t\tif (res.isOpen()) {\r", "+\t\t\t\t\t\tif (this.hasJavaNature(res)) {\r", "+\t\t\t\t\t\t\tthis.elementAdded(element, delta);\r", "+\t\t\t\t\t\t\tthis.indexManager.indexAll(res);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tJavaModel javaModel = JavaModelManager.getJavaModelManager().getJavaModel();\r", "+\t\t\t\t\t\tboolean wasJavaProject = javaModel.findJavaProject(res) != null;\r", "+\t\t\t\t\t\tif (wasJavaProject) {\r", "+\t\t\t\t\t\t\tthis.elementRemoved(element, delta);\r", "+\t\t\t\t\t\t\tthis.indexManager.removeIndex(res.getFullPath());\r", "+\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\treturn false; // when a project is open/closed don't process children\r", "-\t\t\t\tthis.updateIndex(element, delta);\r", "-\t\t\t\treturn false; // when a project is open/closed don't process children\r", "+\t\t\t\tif ((flags & IResourceDelta.DESCRIPTION) != 0) {\r", "+\t\t\t\t\tIProject res = (IProject)delta.getResource();\r", "+\t\t\t\t\tJavaModel javaModel = JavaModelManager.getJavaModelManager().getJavaModel();\r", "+\t\t\t\t\tboolean wasJavaProject = javaModel.findJavaProject(res) != null;\r", "+\t\t\t\t\tboolean isJavaProject = this.hasJavaNature(res);\r", "+\t\t\t\t\tif (wasJavaProject != isJavaProject) {\r", "+\t\t\t\t\t\t// project's nature has been added or removed\r", "+\t\t\t\t\t\telement = this.createElement(res, elementType, project);\r", "+\t\t\t\t\t\tif (element == null) throw newInvalidElementType();\r", "+\t\t\t\t\t\tif (isJavaProject) {\r", "+\t\t\t\t\t\t\tthis.elementAdded(element, delta);\r", "+\t\t\t\t\t\t\tthis.indexManager.indexAll(res);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tthis.elementRemoved(element, delta);\r", "+\t\t\t\t\t\t\tthis.indexManager.removeIndex(res.getFullPath());\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\treturn false; // when a project's nature is added/removed don't process children\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96fa21a00e34f3db089bef4600b99ac0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "c382c60104b7fa9333f25f2fb10b318d2a6c9d85", "commitAfterChange": "890be42f32773e7ca5496c222c424ace19ee53bc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate void computeAllRootPaths(IPackageFragmentRoot root)", "signatureAfterChange": " \t \tprivate void computeAllRootPaths(IPackageFragmentRoot root)", "diff": ["-\t\tif (this.rootPaths == null) {", "-\t\t\tthis.rootPaths = new HashSet();", "-\t\t}", "+\t\tfinal HashSet tempRoots = new HashSet();", "-\t\t\t\t\t\t\tIStatus status = JavaConventions.validatePackageName(firstLevelPackageName);", "-\t\t\t\t\t\t\tif (status.isOK() || status.getSeverity() == IStatus.WARNING) {", "-\t\t\t\t\t\t\t\tfirstLevelPackageNames.add(firstLevelPackageName);", "+\t\t\t\t\t\t\tif (!firstLevelPackageNames.contains(firstLevelPackageName)) {", "+\t\t\t\t\t\t\t\tIStatus status = JavaConventions.validatePackageName(firstLevelPackageName);", "+\t\t\t\t\t\t\t\tif (status.isOK() || status.getSeverity() == IStatus.WARNING) {", "+\t\t\t\t\t\t\t\t\tfirstLevelPackageNames.add(firstLevelPackageName);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tthis.rootPaths.add(path.uptoSegment(i).toString());", "+\t\t\t\t\t\t\t\t\ttempRoots.add(path.uptoSegment(i));", "-\t\t\t\t\t\t\t\t\tthis.rootPaths.add(path.uptoSegment(max).toString());", "+\t\t\t\t\t\t\t\t\ttempRoots.add(path.uptoSegment(max));", "-\t\t\t\t\t\t\tthis.rootPaths.add(\"\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\ttempRoots.add(new Path(\"\")); //$NON-NLS-1$", "-\t\t\t\t\tcomputeRootPath((IContainer)target, firstLevelPackageNames, containsADefaultPackage);", "+\t\t\t\t\tcomputeRootPath((IContainer)target, firstLevelPackageNames, containsADefaultPackage, tempRoots);", "-\t\t\t\t\tcomputeRootPath(file, firstLevelPackageNames, containsADefaultPackage);", "+\t\t\t\t\tcomputeRootPath(file, firstLevelPackageNames, containsADefaultPackage, tempRoots);", "+\t\tint size = tempRoots.size();", "+\t\tif (this.rootPaths != null) {", "+\t\t\tfor (Iterator iterator = this.rootPaths.iterator(); iterator.hasNext(); ) {", "+\t\t\t\ttempRoots.add(iterator.next());", "+\t\t\t\tsize++;", "+\t\t\t}", "+\t\t\tthis.rootPaths.clear();", "+\t\t} else {", "+\t\t\tthis.rootPaths = new ArrayList(size);", "+\t\t}", "+\t\tif (size != 0) {", "+\t\t\tArrayList sortedRoots = new ArrayList(tempRoots);", "+\t\t\tCollections.sort(sortedRoots, new Comparator() {", "+\t\t\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\t\t\tIPath path1 = (IPath) o1;", "+\t\t\t\t\tIPath path2 = (IPath) o2;", "+\t\t\t\t\treturn path1.segmentCount() - path2.segmentCount();", "+\t\t\t\t}", "+\t\t\t});", "+\t\t\tfor (Iterator iter = sortedRoots.iterator(); iter.hasNext();) {", "+\t\t\t\tIPath path = (IPath) iter.next();", "+\t\t\t\tthis.rootPaths.add(path.toString());", "+\t\t\t}", "+\t\t}", "+\t\tthis.areRootPathsComputed = true;", "-\t\t\tfinal int size = this.rootPaths.size();", "+\t\t\tSystem.out.println(\"Spent \" + (System.currentTimeMillis() - time) + \"ms\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\tString rootpath = (String) iterator.next();", "-\t\t\t\tSystem.out.println(\"root[\" + i + \"]=\" + rootpath);//$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tSystem.out.println(\"root[\" + i + \"]=\" + ((String) iterator.next()));//$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tSystem.out.println(\"Spent \" + (System.currentTimeMillis() - time) + \"ms\"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tthis.areRootPathsComputed = true;"]}], "num": 32261}
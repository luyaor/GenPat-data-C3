{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "813fe6767d8449e6e6b9549054c4a913", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36d1f92d8ae62ba02f048fca5c77bce2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "30dfd49146d073c0ca77ec54f45987be483492de", "commitAfterChange": "b6791838b5fdf2dfb8325a3a5a7e1c11f48ab412", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void manageSyntheticAccessIfNecessary( \t\t\tBlockScope currentScope, \t\t\tFieldBinding fieldBinding, \t\t\tTypeBinding lastReceiverType, \t\t\tint index, \t\t\tFlowInfo flowInfo)", "signatureAfterChange": " \tpublic void manageSyntheticAccessIfNecessary( \t\t\tBlockScope currentScope, \t\t\tFieldBinding fieldBinding, \t\t\tTypeBinding lastReceiverType, \t\t\tint index, \t\t\tFlowInfo flowInfo)", "diff": ["-\t\tif (fieldBinding.isConstantValue())", "+\t\tif (fieldBinding.constant() != Constant.NotAConstant)", "-\t\t\t\t&& !fieldBinding.isConstantValue()) {", "+\t\t\t\t&& fieldBinding.constant() == Constant.NotAConstant) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2e67473db0298489d798e3d920119bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "30dfd49146d073c0ca77ec54f45987be483492de", "commitAfterChange": "b6791838b5fdf2dfb8325a3a5a7e1c11f48ab412", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["-\t */", "-\tpublic void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess) {", "-", "-\t\tif (!flowInfo.isReachable()) return;", "-\t\t// if field from parameterized type got found, use the original field at codegen time", "-\t\tthis.codegenBinding = this.binding.original();", "-\t\t", "-\t\tif (binding.isPrivate()) {", "-\t\t\tif ((currentScope.enclosingSourceType() != this.codegenBinding.declaringClass) && !binding.isConstantValue()) {", "-\t\t\t\tif (syntheticAccessors == null)", "-\t\t\t\t\tsyntheticAccessors = new MethodBinding[2];", "-\t\t\t\tsyntheticAccessors[isReadAccess ? READ : WRITE] = ", "-\t\t\t\t\t((SourceTypeBinding) this.codegenBinding.declaringClass).addSyntheticMethod(this.codegenBinding, isReadAccess);", "-\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(this.codegenBinding, this, isReadAccess);", "-\t\t\t\treturn;", "-\t\t\t}", "-", "-\t\t} else if (receiver instanceof QualifiedSuperReference) { // qualified super", "-", "-\t\t\t// qualified super need emulation always", "-\t\t\tSourceTypeBinding destinationType =", "-\t\t\t\t(SourceTypeBinding) (((QualifiedSuperReference) receiver)", "-\t\t\t\t\t.currentCompatibleType);", "+ */", "+public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess) {", "+\tif (!flowInfo.isReachable()) return;", "+\t// if field from parameterized type got found, use the original field at codegen time", "+\tthis.codegenBinding = this.binding.original();", "+\t", "+\tif (binding.isPrivate()) {", "+\t\tif ((currentScope.enclosingSourceType() != this.codegenBinding.declaringClass) ", "+\t\t\t\t&& binding.constant() == Constant.NotAConstant) {", "-\t\t\tsyntheticAccessors[isReadAccess ? READ : WRITE] = destinationType.addSyntheticMethod(this.codegenBinding, isReadAccess);", "+\t\t\tsyntheticAccessors[isReadAccess ? READ : WRITE] = ", "+\t\t\t\t((SourceTypeBinding) this.codegenBinding.declaringClass).addSyntheticMethod(this.codegenBinding, isReadAccess);", "-", "-\t\t} else if (binding.isProtected()) {", "-", "-\t\t\tSourceTypeBinding enclosingSourceType;", "-\t\t\tif (((bits & DepthMASK) != 0)", "-\t\t\t\t&& binding.declaringClass.getPackage()", "-\t\t\t\t\t!= (enclosingSourceType = currentScope.enclosingSourceType()).getPackage()) {", "-", "-\t\t\t\tSourceTypeBinding currentCompatibleType =", "-\t\t\t\t\t(SourceTypeBinding) enclosingSourceType.enclosingTypeAt(", "-\t\t\t\t\t\t(bits & DepthMASK) >> DepthSHIFT);", "-\t\t\t\tif (syntheticAccessors == null)", "-\t\t\t\t\tsyntheticAccessors = new MethodBinding[2];", "-\t\t\t\tsyntheticAccessors[isReadAccess ? READ : WRITE] = currentCompatibleType.addSyntheticMethod(this.codegenBinding, isReadAccess);", "-\t\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(this.codegenBinding, this, isReadAccess);", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t// if the binding declaring class is not visible, need special action", "-\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "-\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\t// and not from Object or implicit static field access.\t", "-\t\tif (this.binding.declaringClass != this.receiverType", "-\t\t\t\t&& !this.receiverType.isArrayType()", "-\t\t\t\t&& this.binding.declaringClass != null // array.length", "-\t\t\t\t&& !this.binding.isConstantValue()) {", "-\t\t\tCompilerOptions options = currentScope.compilerOptions();", "-\t\t\tif ((options.targetJDK >= ClassFileConstants.JDK1_2", "-\t\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !(receiver.isImplicitThis() && this.codegenBinding.isStatic()))", "-\t\t\t\t\t&& this.binding.declaringClass.id != T_JavaLangObject) // no change for Object fields", "-\t\t\t\t|| !this.binding.declaringClass.canBeSeenBy(currentScope)) {", "-\t", "-\t\t\t\tthis.codegenBinding =", "-\t\t\t\t\tcurrentScope.enclosingSourceType().getUpdatedFieldBinding(", "-\t\t\t\t\t\tthis.codegenBinding,", "-\t\t\t\t\t\t(ReferenceBinding) this.receiverType.erasure());", "-\t\t\t}", "-\t\t}\t\t", "-\t}", "+\t} else if (receiver instanceof QualifiedSuperReference) { // qualified super", "+\t\t// qualified super need emulation always", "+\t\tSourceTypeBinding destinationType =", "+\t\t\t(SourceTypeBinding) (((QualifiedSuperReference) receiver)", "+\t\t\t\t.currentCompatibleType);", "+\t\tif (syntheticAccessors == null)", "+\t\t\tsyntheticAccessors = new MethodBinding[2];", "+\t\tsyntheticAccessors[isReadAccess ? READ : WRITE] = destinationType.addSyntheticMethod(this.codegenBinding, isReadAccess);", "+\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(this.codegenBinding, this, isReadAccess);", "+\t\treturn;", "+", "+\t} else if (binding.isProtected()) {", "+", "+\t\tSourceTypeBinding enclosingSourceType;", "+\t\tif (((bits & DepthMASK) != 0)", "+\t\t\t&& binding.declaringClass.getPackage()", "+\t\t\t\t!= (enclosingSourceType = currentScope.enclosingSourceType()).getPackage()) {", "+", "+\t\t\tSourceTypeBinding currentCompatibleType =", "+\t\t\t\t(SourceTypeBinding) enclosingSourceType.enclosingTypeAt(", "+\t\t\t\t\t(bits & DepthMASK) >> DepthSHIFT);", "+\t\t\tif (syntheticAccessors == null)", "+\t\t\t\tsyntheticAccessors = new MethodBinding[2];", "+\t\t\tsyntheticAccessors[isReadAccess ? READ : WRITE] = currentCompatibleType.addSyntheticMethod(this.codegenBinding, isReadAccess);", "+\t\t\tcurrentScope.problemReporter().needToEmulateFieldAccess(this.codegenBinding, this, isReadAccess);", "+\t\t\treturn;", "+\t// if the binding declaring class is not visible, need special action", "+\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "+\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "+\t// and not from Object or implicit static field access.\t", "+\tif (this.binding.declaringClass != this.receiverType", "+\t\t\t&& !this.receiverType.isArrayType()", "+\t\t\t&& this.binding.declaringClass != null // array.length", "+\t\t\t&& this.binding.constant() == Constant.NotAConstant) {", "+\t\tCompilerOptions options = currentScope.compilerOptions();", "+\t\tif ((options.targetJDK >= ClassFileConstants.JDK1_2", "+\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !(receiver.isImplicitThis() && this.codegenBinding.isStatic()))", "+\t\t\t\t&& this.binding.declaringClass.id != T_JavaLangObject) // no change for Object fields", "+\t\t\t|| !this.binding.declaringClass.canBeSeenBy(currentScope)) {", "+\t\t\tthis.codegenBinding =", "+\t\t\t\tcurrentScope.enclosingSourceType().getUpdatedFieldBinding(", "+\t\t\t\t\tthis.codegenBinding,", "+\t\t\t\t\t(ReferenceBinding) this.receiverType.erasure());", "+\t\t}", "+\t}\t\t", "+}"]}], "num": 50901}
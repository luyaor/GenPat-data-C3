{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "64309373e528b7ce7fb71e6fe3973b7b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f24e24a3fbab242784720698b86db1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java", "commitBeforeChange": "e0a0631e6ad0dd184a0c6f7c90e330e7c7d93f89", "commitAfterChange": "d88d614055e9f2e19d665c38a6f8afb7405f3375", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic static char[][] getJavaLikeExtensions()", "signatureAfterChange": " \tpublic static char[][] getJavaLikeExtensions()", "diff": ["-\t\t\tJAVA_LIKE_EXTENSIONS = new char[][] {SuffixConstants.SUFFIX_java, SuffixConstants.SUFFIX_JAVA};", "+\t\t\t\t", "+\t\t\tPlugin jdtCorePlugin = JavaCore.getPlugin();", "+\t\t\tif (jdtCorePlugin == null) return null;", "+\t", "+\t\t\tArrayList fileExtensionsList = new ArrayList(5);", "+\t\t\tfileExtensionsList.add(SuffixConstants.SUFFIX_java);", "+\t\t\tIExtensionPoint extension = Platform.getExtensionRegistry().getExtensionPoint(JavaCore.PLUGIN_ID, JavaModelManager.EXTRA_JAVA_LIKE_FILE_EXTENSIONS_EXTPOINT_ID);", "+\t\t\tif (extension != null) {", "+\t\t\t\tIExtension[] extensions =  extension.getExtensions();", "+\t\t\t\tfor(int i = 0; i < extensions.length; i++){", "+\t\t\t\t\tIConfigurationElement [] configElements = extensions[i].getConfigurationElements();", "+\t\t\t\t\tfor(int j = 0; j < configElements.length; j++){", "+\t\t\t\t\t\tString fileExtensionAttribute = configElements[j].getAttribute(\"extension\"); //$NON-NLS-1$", "+\t\t\t\t\t\tif (fileExtensionAttribute != null) fileExtensionsList.add(('.' + fileExtensionAttribute).toCharArray());", "+\t\t\t\t\t}", "+\t\t\t\t}\t", "+\t\t\t}", "+\t\t\tJAVA_LIKE_EXTENSIONS = new char[fileExtensionsList.size()][];", "+\t\t\tfileExtensionsList.toArray(JAVA_LIKE_EXTENSIONS);", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd5e6da1d274b44cc7b8cb55e9d03999", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java", "commitBeforeChange": "57f884c272281a5aa1631c056927fac25c267ffd", "commitAfterChange": "13d88a2db10e3a34264b75313001b46a5abddbdd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic static CodeFormatter createCodeFormatter(Map options, int mode)", "signatureAfterChange": " \tpublic static CodeFormatter createCodeFormatter(Map options, int mode)", "diff": ["+\t\tString formatterId = (String) options.get(JavaCore.JAVA_FORMATTER);", "+\t\tIExtensionPoint extension = Platform.getExtensionRegistry().getExtensionPoint(JavaCore.PLUGIN_ID,", "+\t\t\t\tJavaCore.JAVA_FORMATTER_EXTENSION_POINT_ID);", "+\t\tif (extension != null) {", "+\t\t\tIExtension[] extensions = extension.getExtensions();", "+\t\t\tfor (int i = 0; i < extensions.length; i++) {", "+\t\t\t\tIConfigurationElement[] configElements = extensions[i].getConfigurationElements();", "+\t\t\t\tfor (int j = 0; j < configElements.length; j++) {", "+\t\t\t\t\tString initializerID = configElements[j].getAttribute(\"id\"); //$NON-NLS-1$", "+\t\t\t\t\tif (initializerID != null && initializerID.equals(formatterId)) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tObject execExt = configElements[j].createExecutableExtension(\"class\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\tif (execExt instanceof CodeFormatter) {", "+\t\t\t\t\t\t\t\tCodeFormatter formatter = (CodeFormatter) execExt;", "+\t\t\t\t\t\t\t\tformatter.setOptions(currentOptions);", "+\t\t\t\t\t\t\t\treturn formatter;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\t\torg.eclipse.jdt.internal.core.util.Util.log(e.getStatus());", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\torg.eclipse.jdt.internal.core.util.Util.log(IStatus.WARNING,", "+\t\t\t\t\"Unable to instantiate formatter extension, returning built-in formatter.\"); //$NON-NLS-1$"]}], "num": 5631}
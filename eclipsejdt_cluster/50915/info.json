{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "42282c7b824df8912f8621c481547f01", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42a3985fbe399cd9942e776d3df632ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java", "commitBeforeChange": "19eef6f26c48016adc4a14301bf3da3ca0ccecb1", "commitAfterChange": "650839ed308774b6702bdf04023742a308aab499", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "  private boolean hasStructuralAnnotationChanges(IBinaryAnnotation[] currentAnnotations, IBinaryAnnotation[] otherAnnotations)", "signatureAfterChange": "  private boolean hasStructuralAnnotationChanges(IBinaryAnnotation[] currentAnnotations, IBinaryAnnotation[] otherAnnotations)", "diff": ["-\t\t\tif (!currentPairs[j].getValue().equals(otherPairs[j].getValue()))", "+\t\t\tfinal Object value = currentPairs[j].getValue();", "+\t\t\tfinal Object value2 = otherPairs[j].getValue();", "+\t\t\tif (value instanceof Object[]) {", "+\t\t\t\tObject[] currentValues = (Object[]) value;", "+\t\t\t\tif (value2 instanceof Object[]) {", "+\t\t\t\t\tObject[] currentValues2 = (Object[]) value2;", "+\t\t\t\t\tfinal int length = currentValues.length;", "+\t\t\t\t\tif (length != currentValues2.length) {", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t\tfor (int n = 0; n < length; n++) {", "+\t\t\t\t\t\tif (!currentValues[n].equals(currentValues2[n])) {", "+\t\t\t\t\t\t\treturn true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t} else if (!value.equals(value2)) {", "+\t\t\t\treturn true;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aef7b61e5444eb34ee6dbadf2b80c411", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java", "commitBeforeChange": "4bca3a5b750a1427c84a78f92ee835c1f5e75da7", "commitAfterChange": "65cffea518e323981e83002b5b2ff520f43d6c58", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate int extractArgCount(char[] signature) throws ClassFormatException", "signatureAfterChange": " \tprivate int extractArgCount(char[] signature, char[] className) throws ClassFormatException", "diff": ["-\tprivate int extractArgCount(char[] signature) throws ClassFormatException {", "+\tprivate int extractArgCount(char[] signature, char[] className) throws ClassFormatException {", "-\t\t\t\t\tparameterTypesCounter++;", "+\t\t\t\t\t// verify if first parameter is synthetic", "+\t\t\t\t\tif (className != null && parameterTypesCounter == 0) {", "+\t\t\t\t\t\tchar[] classSignature = Signature.createCharArrayTypeSignature(className, true);", "+\t\t\t\t\t\tint length = indexOfSemiColon-i+1;", "+\t\t\t\t\t\tif (classSignature.length > (length+1)) {", "+\t\t\t\t\t\t\t// synthetic means that parameter type has same signature than given class", "+\t\t\t\t\t\t\tfor (int j=i, k=0; j<indexOfSemiColon; j++, k++) {", "+\t\t\t\t\t\t\t\tif (signature[j] != classSignature[k]) {", "+\t\t\t\t\t\t\t\t\tparameterTypesCounter++;", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tparameterTypesCounter++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tclassName = null; // do not verify following parameters", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tparameterTypesCounter++;", "+\t\t\t\t\t}"]}], "num": 50915}
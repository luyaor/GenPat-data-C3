{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28088f9540af9bf002b876449f92d780", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76e1439b8592354496cc35c9dd9e8ed1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/align/Alignment.java", "commitBeforeChange": "900c13d17fd147c187a2b319111ff0c850c4ae89", "commitAfterChange": "f02cc00df615ce0df96d2675e50465c713b4b942", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic String toString()", "signatureAfterChange": "  \tpublic String toString(StringBuffer buffer, int level)", "diff": ["-\t\tString className = getClass().getName();", "-\t\tclassName = className.substring(className.lastIndexOf('.')+1);", "-\t\tbuffer", "-\t\t\t.append(className)", "-\t\t\t.append(\":<name: \")\t//$NON-NLS-1$", "-\t\t\t.append(this.name)", "-\t\t\t.append(\">\");\t//$NON-NLS-1$", "-\t\tint indentLength = className.length()+1;", "-\t\tbuffer.append('\\n');", "-\t\tfor (int i=0; i<indentLength; i++) {", "-\t\t\tbuffer.append(' ');", "+", "+\tpublic String toString(StringBuffer buffer, int level) {", "+\t\t", "+\t\t// Compute the indentation at the given level", "+\t\tStringBuffer indentation = new StringBuffer();", "+\t\tfor (int i=0; i<level; i++) {", "+\t\t\tindentation.append('\\t');", "+\t\t", "+\t\t// First line is for class and name", "+\t\tbuffer.append(indentation);", "+\t\tbuffer", "+\t\t\t.append(\"<name: \")\t//$NON-NLS-1$", "+\t\t\t.append(this.name)", "+\t\t\t.append(\">\\n\");\t//$NON-NLS-1$", "+\t\t", "+\t\t// Line for depth and break indentation", "+\t\tbuffer.append(indentation);", "-\t\t\t.append('>');", "-\t\tif (this.enclosing != null) {", "-\t\t\tbuffer", "-\t\t\t\t.append(\"<enclosingName: \")\t//$NON-NLS-1$", "-\t\t\t\t.append(this.enclosing.name)", "-\t\t\t\t.append('>');", "-\t\t}", "-\t\tbuffer.append('\\n');", "+\t\t\t.append(\">\\n\"); //$NON-NLS-1$", "+\t\t// Line to display the location", "+\t\tbuffer.append(indentation);", "+\t\tbuffer", "+\t\t\t.append(\"<location=\")\t//$NON-NLS-1$", "+\t\t\t.append(this.location.toString())", "+\t\t\t.append(\">\\n\");\t//$NON-NLS-1$", "+", "+\t\t// Lines for fragments", "+\t\tbuffer", "+\t\t\t.append(indentation)", "+\t\t\t.append(\"<fragments:\\n\");\t//$NON-NLS-1$", "-\t\t\t\t.append(\" - fragment \")\t//$NON-NLS-1$", "+\t\t\t\t.append(indentation)", "+\t\t\t\t.append(\" - \")\t//$NON-NLS-1$", "-\t\tbuffer.append('\\n');", "+\t\tbuffer", "+\t\t\t.append(indentation)", "+\t\t\t.append(\">\\n\"); //$NON-NLS-1$", "+\t\t", "+\t\t// Display enclosing", "+\t\tif (this.enclosing != null && level >= 0) {", "+\t\t\tbuffer", "+\t\t\t\t.append(indentation)", "+\t\t\t\t.append(\"<enclosing assignement:\\n\");\t//$NON-NLS-1$", "+\t\t\tthis.enclosing.toString(buffer, level+1);", "+\t\t\tbuffer", "+\t\t\t\t.append(indentation)", "+\t\t\t\t.append(\">\\n\"); //$NON-NLS-1$", "+\t\t}", "+\t\t", "+\t\t// Return the result"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87e0636b975b47e7884a001613c7784d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PotentialMatch.java", "commitBeforeChange": "d9032a87dfcb69e19b4c3aae869d4a786d1fb149", "commitAfterChange": "eee6512d26cd1c50a9b02d1b4b78531f507d95fc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tprivate char[] getQualifiedName()", "signatureAfterChange": "\r \tprivate char[] getQualifiedName()", "diff": ["+\t */\r", "-\t\t} else if (this.openable instanceof org.eclipse.jdt.internal.core.ClassFile) {\r", "-\t\t\torg.eclipse.jdt.internal.core.ClassFile classFile = (org.eclipse.jdt.internal.core.ClassFile)this.openable;\r", "-\t\t\ttry {\r", "-\t\t\t\tIType type = MatchingOpenable.getTopLevelType(classFile.getType());\r", "-\t\t\t\treturn type.getFullyQualifiedName().toCharArray();\r", "-\t\t\t} catch (JavaModelException e) {\r", "-\t\t\t\treturn null; // nothing we can do here\r", "+\t\t} else if (this.openable instanceof ClassFile) {\r", "+\t\t\tString sourceFileName = getSourceFileName();\r", "+\t\t\tif (sourceFileName == NO_SOURCE_FILE_NAME) {\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\treturn ((ClassFile)this.openable).getType().getFullyQualifiedName('.').toCharArray();\r", "+\t\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t\t\treturn null;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tString simpleName = sourceFileName.substring(0, sourceFileName.length()-5); // length-\".java\".length()\r", "+\t\t\tString pkgName = this.openable.getParent().getElementName();\r", "+\t\t\tif (pkgName.length() == 0) {\r", "+\t\t\t\treturn simpleName.toCharArray();\r", "+\t\t\t} else {\r", "+\t\t\t\treturn (pkgName + '.' + simpleName).toCharArray();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b42eb64dc5d6fd6dcaabd543f55f06c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "69a0951f3a888c5df17899fdf397965ef4e12088", "commitAfterChange": "a5b56b1fe034a82b1e8a36b9104b762cd960d94d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate void disassemble(ICodeAttribute codeAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": " \t \tprivate void disassemble(ICodeAttribute codeAttribute, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["-\t\tbuffer.append(Util.bind(\"disassembler.codeattributeheader\"));", "+\t\tbuffer.append(Util.bind(\"disassembler.codeattributeheader\")); //$NON-NLS-1$", "-\t\t\t.append(Util.bind(\"disassembler.commentstart\"))", "+\t\t\t.append(Util.bind(\"disassembler.commentstart\")) //$NON-NLS-1$", "-\t\t\t.append(Util.bind(\"classfileformat.maxStack\"))", "+\t\t\t.append(Util.bind(\"classfileformat.maxStack\")) //$NON-NLS-1$", "-\t\t\t.append(Util.bind(\"classfileformat.maxLocals\"))", "+\t\t\t.append(Util.bind(\"classfileformat.maxLocals\")) //$NON-NLS-1$", "-\t\t\t.append(Util.bind(\"disassembler.commentend\"));", "+\t\t\t.append(Util.bind(\"disassembler.commentend\")); //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"disassembler.exceptiontableheader\"));", "+\t\t\tbuffer.append(Util.bind(\"disassembler.exceptiontableheader\")); //$NON-NLS-1$", "-\t\t\t\t\t.append(\"[pc: \")", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.exceptiontablefrom\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(\", pc: \")", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.exceptiontableto\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(\"] -> \")", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.exceptiontablegoto\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(\" when : \");", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.exceptiontablewhen\")); //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"disassembler.linenumberattributeheader\"));", "+\t\t\tbuffer.append(Util.bind(\"disassembler.linenumberattributeheader\")); //$NON-NLS-1$", "-\t\t\t\t\t.append(\"[pc: \")", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.linenumbertablefrom\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(\", line: \")", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.linenumbertableto\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(\"]\");", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.linenumbertableclose\")); //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"disassembler.localvariabletableattributeheader\"));", "+\t\t\tbuffer.append(Util.bind(\"disassembler.localvariabletableattributeheader\")); //$NON-NLS-1$", "-\t\t\t\t\t.append(\"[pc: \")", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablefrom\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(\", pc: \")", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletableto\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(\"] local: \")", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocalname\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(\" index: \")", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocalindex\")) //$NON-NLS-1$", "-\t\t\t\t\t.append(\" type: \")", "+\t\t\t\t\t.append(Util.bind(\"classfileformat.localvariabletablelocaltype\")) //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cba65a210ae5e4e2795cdc0ff0cd8d6f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "b080f0d7bae3add3e26aca56768f25b351884bac", "commitAfterChange": "f0aaa159cf03f4e96f0cf3cc5eba450308b5c3af", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tprivate void reconcileClasspathFileUpdate(IResourceDelta delta, IFile file, JavaProject project)", "signatureAfterChange": " \tprivate void reconcileClasspathFileUpdate(IResourceDelta delta, IFile file, JavaProject project)", "diff": ["+\t\t\t\tboolean wasSuccessful = false; // flag recording if .classpath file change got reflected", "-\t\t\t\t\t\t\tUtil.log(e, ", "-\t\t\t\t\t\t\t\t\"Exception while retrieving \"+ project.getPath() //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t+\"/.classpath, ignore change\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\tproject.createClasspathProblemMarker(", "+\t\t\t\t\t\t\t\tUtil.bind(\"classpath.cannotReadClasspathFile\", project.getElementName()), //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "+\t\t\t\t\t\t\t\tfalse,\t//  cycle error", "+\t\t\t\t\t\t\t\ttrue);\t//\tfile format error", "-\t\t\t\t\t\tproject.createClasspathProblemMarker(", "-\t\t\t\t\t\t\tUtil.bind(\"classpath.cannotReadClasspathFile\", project.getElementName()), //$NON-NLS-1$", "-\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "-\t\t\t\t\t\t\tfalse,\t//  cycle error", "-\t\t\t\t\t\t\ttrue);\t//\tfile format error", "-\t\t\t\t\t\t\tUtil.log(e, ", "-\t\t\t\t\t\t\t\t\"Exception while retrieving \"+ project.getPath() //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t+\"/.classpath, ignore change\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\tproject.createClasspathProblemMarker(", "+\t\t\t\t\t\t\t\tUtil.bind(\"classpath.cannotReadClasspathFile\", project.getElementName()), //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "+\t\t\t\t\t\t\t\tfalse,\t//  cycle error", "+\t\t\t\t\t\t\t\ttrue);\t//\tfile format error", "-\t\t\t\t\t\tproject.createClasspathProblemMarker(", "-\t\t\t\t\t\t\tUtil.bind(\"classpath.cannotReadClasspathFile\", project.getElementName()), //$NON-NLS-1$", "-\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "-\t\t\t\t\t\t\tfalse,\t//  cycle error", "-\t\t\t\t\t\t\ttrue);\t//\tfile format error", "+\t\t\t\t\t} catch (Assert.AssertionFailedException e) { // failed creating CP entries from file", "+\t\t\t\t\t\tif (project.getProject().isAccessible()) {", "+\t\t\t\t\t\t\tproject.createClasspathProblemMarker(", "+\t\t\t\t\t\t\t\tUtil.bind(\"classpath.illegalEntryInClasspathFile\", project.getElementName(), e.getMessage()), //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "+\t\t\t\t\t\t\t\tfalse,\t//  cycle error", "+\t\t\t\t\t\t\t\ttrue);\t//\tfile format error", "+\t\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t// if reach that far, the classpath file change got absorbed", "+\t\t\t\t\twasSuccessful = true;", "-\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t// happens if the .classpath could not be written to disk", "+\t\t\t\t} catch (JavaModelException e) { // CP failed validation", "-\t\t\t\t\t\tUtil.log(e, \"Could not set classpath for \"+ project.getPath()); //$NON-NLS-1$", "+\t\t\t\t\t\t// TODO: (jbl) need to distinguish scenario where .classpath file couldn't be written out", "+\t\t\t\t\t\tproject.createClasspathProblemMarker(", "+\t\t\t\t\t\t\t\tUtil.bind(\"classpath.invalidClasspathInClasspathFile\", project.getElementName(), e.getMessage()), //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,", "+\t\t\t\t\t\t\t\tfalse,\t//  cycle error", "+\t\t\t\t\t\t\t\ttrue);\t//\tfile format error\t\t\t\t\t", "+\t\t\t\t} finally {", "+\t\t\t\t\tif (!wasSuccessful){ ", "+\t\t\t\t\t\t// TODO: (jbl) rename the .classpath file into .classpath_invalid", "+\t\t\t\t\t}"]}], "num": 58991}
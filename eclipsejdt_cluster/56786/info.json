{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3cadb05ebb6ad27d6654c043d03fc2e8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9218c5a29421dd3a818d27bf0bc008d6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "2b33efd23b662d4e661bfa30307cc2b1b168ce57", "commitAfterChange": "42a5591e6405d9d5a9661e1fdb211c39440692e6", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void initialize(boolean reuseExistingFile) throws IOException", "signatureAfterChange": " void initialize(boolean reuseExistingFile) throws IOException", "diff": ["-\t\t\tRandomAccessFile file = new RandomAccessFile(this.indexFile, \"r\"); //$NON-NLS-1$", "+\t\t\tFileInputStream stream = new FileInputStream(this.indexFile);", "+\t\t\tthis.streamBuffer = new byte[BUFFER_READ_SIZE];", "-\t\t\t\tString signature = file.readUTF();", "-\t\t\t\tif (!signature.equals(SIGNATURE))", "+\t\t\t\tchar[] signature = readStreamChars(stream);", "+\t\t\t\tif (!CharOperation.equals(signature, SIGNATURE_CHARS)) {", "-", "-\t\t\t\tthis.headerInfoOffset = file.readInt();", "-\t\t\t\tif (this.headerInfoOffset > 0) // file is empty if its not set", "-\t\t\t\t\treadHeaderInfo(file);", "+\t\t\t\t}", "+\t\t\t\tthis.headerInfoOffset = readStreamInt(stream);", "+\t\t\t\tif (this.headerInfoOffset > 0) { // file is empty if its not set", "+\t\t\t\t\treadHeaderInfo(stream);", "+\t\t\t\t}", "-\t\t\t\tfile.close();", "+\t\t\t\tstream.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5f56633d1ac6fd7a1e150bcb1346cef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "6869e3c20ea48e0271160207c170fa5d96d2d4cd", "commitAfterChange": "f5680825712344a0e374921b7335db4c68ed2462", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void initialize(boolean reuseExistingFile) throws IOException", "signatureAfterChange": " void initialize(boolean reuseExistingFile) throws IOException", "diff": ["-\t\t\tFileInputStream stream = new FileInputStream(this.indexFile);", "-\t\t\tthis.streamBuffer = new byte[BUFFER_READ_SIZE];", "+\t\t\tRandomAccessFile file = new RandomAccessFile(this.indexFile, \"r\"); //$NON-NLS-1$", "-\t\t\t\tchar[] signature = readStreamChars(stream);", "-\t\t\t\tif (!CharOperation.equals(signature, SIGNATURE_CHARS)) {", "+\t\t\t\tString signature = file.readUTF();", "+\t\t\t\tif (!signature.equals(SIGNATURE))", "-\t\t\t\t}", "-\t\t\t\tthis.headerInfoOffset = readStreamInt(stream);", "-\t\t\t\tif (this.headerInfoOffset > 0) { // file is empty if its not set", "-\t\t\t\t\treadHeaderInfo(stream);", "-\t\t\t\t}", "+", "+\t\t\t\tthis.headerInfoOffset = file.readInt();", "+\t\t\t\tif (this.headerInfoOffset > 0) // file is empty if its not set", "+\t\t\t\t\treadHeaderInfo(file);", "-\t\t\t\tstream.close();", "+\t\t\t\tfile.close();"]}], "num": 56786}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0f48d68f14e9382a0060dfb0fc6ef45", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "044a81edf213c17e06112649ab6baa8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/Label.java", "commitBeforeChange": "34746595229d52daf40c32629450d7fae4966422", "commitAfterChange": "88853c38c7298f1ea978b5ada5033a497eb024c5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void place()", "signatureAfterChange": " public abstract void place();", "diff": ["+public abstract void place();", "-*/", "-public void place() { // Currently lacking wide support.", "-\tif (CodeStream.DEBUG) System.out.println(\"\\t\\t\\t\\t<place at: \"+codeStream.position+\" - \"+ this); //$NON-NLS-1$ //$NON-NLS-2$", "-//\tif ((this.tagBits & USED) == 0 && this.forwardReferenceCount == 0) {", "-//\t\treturn;", "-//\t}", "-", "-\tif (position == POS_NOT_SET) {", "-\t\tif ((this.tagBits & USED) != 0 || this.forwardReferenceCount != 0) {", "-\t\t\tthis.position = codeStream.getPosition();", "-\t\t} else {", "-\t\t\tthis.position = codeStream.position;", "-\t\t}", "-\t\tcodeStream.addLabel(this);", "-\t\tint oldPosition = position;", "-\t\tboolean isOptimizedBranch = false;", "-\t\tif (forwardReferenceCount != 0) {", "-\t\t\tisOptimizedBranch = (forwardReferences[forwardReferenceCount - 1] + 2 == position) && (codeStream.bCodeStream[codeStream.classFileOffset - 3] == Opcodes.OPC_goto);", "-\t\t\tif (isOptimizedBranch) {", "-\t\t\t\tcodeStream.position = (position -= 3);", "-\t\t\t\tcodeStream.classFileOffset -= 3;", "-\t\t\t\tforwardReferenceCount--;", "-\t\t\t\t// also update the PCs in the related debug attributes", "-\t\t\t\t/* OLD CODE", "-\t\t\t\t\tint index = codeStream.pcToSourceMapSize - 1;", "-\t\t\t\t\t\twhile ((index >= 0) && (codeStream.pcToSourceMap[index][1] == oldPosition)) {", "-\t\t\t\t\t\t\tcodeStream.pcToSourceMap[index--][1] = position;", "-\t\t\t\t\t\t}", "-\t\t\t\t*/", "-\t\t\t\t// Beginning of new code", "-\t\t\t\tint index = codeStream.pcToSourceMapSize - 2;", "-\t\t\t\tif (codeStream.lastEntryPC == oldPosition) {", "-\t\t\t\t\tcodeStream.lastEntryPC = position;", "-\t\t\t\t}", "-\t\t\t\tif ((index >= 0) && (codeStream.pcToSourceMap[index] == position)) {", "-\t\t\t\t\tcodeStream.pcToSourceMapSize-=2;", "-\t\t\t\t}", "-\t\t\t\t// end of new code", "-\t\t\t\tif ((codeStream.generateAttributes & ClassFileConstants.ATTR_VARS) != 0) {", "-\t\t\t\t\tLocalVariableBinding locals[] = codeStream.locals;", "-\t\t\t\t\tfor (int i = 0, max = locals.length; i < max; i++) {", "-\t\t\t\t\t\tLocalVariableBinding local = locals[i];", "-\t\t\t\t\t\tif ((local != null) && (local.initializationCount > 0)) {", "-\t\t\t\t\t\t\tif (local.initializationPCs[((local.initializationCount - 1) << 1) + 1] == oldPosition) {", "-\t\t\t\t\t\t\t\t// we want to prevent interval of size 0 to have a negative size.", "-\t\t\t\t\t\t\t\t// see PR 1GIRQLA: ITPJCORE:ALL - ClassFormatError for local variable attribute", "-\t\t\t\t\t\t\t\tlocal.initializationPCs[((local.initializationCount - 1) << 1) + 1] = position;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (local.initializationPCs[(local.initializationCount - 1) << 1] == oldPosition) {", "-\t\t\t\t\t\t\t\tlocal.initializationPCs[(local.initializationCount - 1) << 1] = position;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tfor (int i = 0; i < forwardReferenceCount; i++) {", "-\t\t\tcodeStream.writePosition(this, forwardReferences[i]);", "-\t\t}", "-\t\t// For all labels placed at that position we check if we need to rewrite the jump", "-\t\t// offset. It is the case each time a label had a forward reference to the current position.", "-\t\t// Like we change the current position, we have to change the jump offset. See 1F4IRD9 for more details.", "-\t\tif (isOptimizedBranch) {", "-\t\t\tthis.codeStream.optimizeBranch(oldPosition, this);", "-\t\t}", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1332ed340bd70d17543242425ca10b16", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/AndPattern.java", "commitBeforeChange": "fb92cfb822669ddb00db1cf41e3bdb1057d4d00d", "commitAfterChange": "00c13f2feec2211d8da2f8282a37167ca349b1b8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException", "signatureAfterChange": " SearchPattern currentPattern()", "diff": ["-}", "-public void findIndexMatches(Index index, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException {", "-\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "-", "-\tthis.resetQuery();", "-\tSimpleSet intersectedNames = null;", "-\ttry {", "-\t\tindex.startQuery();", "-\t\tdo {", "-\t\t\tSearchPattern pattern = ((InternalSearchPattern) this).currentPattern();", "-\t\t\tEntryResult[] entries = ((InternalSearchPattern)pattern).queryIn(index);", "-\t\t\tif (entries == null) return;", "-", "-\t\t\tSearchPattern decodedResult = pattern.getBlankPattern();", "-\t\t\tSimpleSet newIntersectedNames = new SimpleSet(3);", "-\t\t\tfor (int i = 0, l = entries.length; i < l; i++) {", "-\t\t\t\tif (progressMonitor != null && progressMonitor.isCanceled()) throw new OperationCanceledException();", "-", "-\t\t\t\tEntryResult entry = entries[i];", "-\t\t\t\tdecodedResult.decodeIndexKey(entry.getWord());", "-\t\t\t\tif (pattern.matchesDecodedKey(decodedResult)) {", "-\t\t\t\t\tString[] names = entry.getDocumentNames(index);", "-\t\t\t\t\tif (intersectedNames != null) {", "-\t\t\t\t\t\tfor (int j = 0, n = names.length; j < n; j++)", "-\t\t\t\t\t\t\tif (intersectedNames.includes(names[j]))", "-\t\t\t\t\t\t\t\tnewIntersectedNames.add(names[j]);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tfor (int j = 0, n = names.length; j < n; j++)", "-\t\t\t\t\t\t\tnewIntersectedNames.add(names[j]);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-", "-\t\t\tif (newIntersectedNames.elementSize == 0) return;", "-\t\t\tintersectedNames = newIntersectedNames;", "-\t\t} while (this.hasNextQuery());", "-\t} finally {", "-\t\tindex.stopQuery();", "-", "-\tString containerPath = index.containerPath;", "-\tObject[] names = intersectedNames.values;", "-\tfor (int i = 0, l = names.length; i < l; i++)", "-\t\tif (names[i] != null)", "-\t\t\t((InternalSearchPattern) this).acceptMatch((String) names[i], containerPath, null/*no pattern*/, requestor, participant, scope); // AndPatterns cannot provide the decoded result", "+SearchPattern currentPattern() {", "+\treturn this.patterns[this.current++];", "+}"]}], "num": 42842}
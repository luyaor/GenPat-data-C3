{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "631cfff742d1a5f04f213e4892995f3f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4fbb20df951da17f749c34a078682a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 132, "signatureBeforeChange": " \tprivate void retrieveSemiColonPosition(ASTNode node)", "signatureAfterChange": " \tprotected void retrieveSemiColonPosition(ASTNode node)", "diff": ["-\t */", "-\tprivate void retrieveSemiColonPosition(ASTNode node) {", "-\t\tint start = node.getStartPosition();", "-\t\tint length = node.getLength();", "-\t\tint end = start + length;", "-\t\tint count = 0;", "-\t\tthis.scanner.resetTo(end, this.compilationUnitSource.length);", "-\t\ttry {", "-\t\t\tint token;", "-\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameSEMICOLON:", "-\t\t\t\t\t\tif (count == 0) {", "-\t\t\t\t\t\t\tnode.setSourceRange(start, this.scanner.currentPosition - start);", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameLBRACE :", "-\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameRBRACE :", "-\t\t\t\t\t\tcount--;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameLPAREN :", "-\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN :", "-\t\t\t\t\t\tcount--;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameLBRACKET :", "-\t\t\t\t\t\tcount++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameRBRACKET :", "-\t\t\t\t\t\tcount--;", "-\t\t\t\t}", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "-\t\t}", "-\t}", "+\t */", "+\tprotected void retrieveSemiColonPosition(ASTNode node) {", "+\t\tint start = node.getStartPosition();", "+\t\tint length = node.getLength();", "+\t\tint end = start + length;", "+\t\tint count = 0;", "+\t\tthis.scanner.resetTo(end, this.compilationUnitSource.length);", "+\t\ttry {", "+\t\t\tint token;", "+\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\tswitch(token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameSEMICOLON:", "+\t\t\t\t\t\tif (count == 0) {", "+\t\t\t\t\t\t\tnode.setSourceRange(start, this.scanner.currentPosition - start);", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameLBRACE :", "+\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameRBRACE :", "+\t\t\t\t\t\tcount--;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameLPAREN :", "+\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameRPAREN :", "+\t\t\t\t\t\tcount--;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameLBRACKET :", "+\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameRBRACKET :", "+\t\t\t\t\t\tcount--;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch(InvalidInputException e) {", "+\t\t\t// ignore", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe169aead1bc4a7a1d06656534c805f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 106, "signatureBeforeChange": " \t \tprivate boolean isPrimitiveType(char[] name)", "signatureAfterChange": " \t \tprotected boolean isPrimitiveType(char[] name)", "diff": ["-\tprivate boolean isPrimitiveType(char[] name) {", "+\t", "+\tprotected boolean isPrimitiveType(char[] name) {"]}], "num": 23721}
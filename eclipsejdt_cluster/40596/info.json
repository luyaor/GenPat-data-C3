{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e61d3b08cd91623e83ad33d6e607435", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21673f8c654acf53b30ec6ba967ab064", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "e6099120ee9021152f84e60105066d4964c2db21", "commitAfterChange": "82631a98caad8b28e9cefb217339d51e64ef47f9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r private void buildForProject(JavaProject project, ArrayList infos, ArrayList units) throws JavaModelException", "signatureAfterChange": "\r private void buildForProject(JavaProject project, ArrayList infos, ArrayList units) throws JavaModelException", "diff": ["-\t\tif (inProjectOfFocusType) {\r", "-\t\t\torg.eclipse.jdt.core.ICompilationUnit unitToLookInside = focusType.getCompilationUnit();\r", "-\t\t\tif (unitToLookInside != null) {\r", "-\t\t\t\tthis.nameLookup.setUnitsToLookInside(new IWorkingCopy[] {unitToLookInside});\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\ttry {\r", "-\t\t\tthis.hierarchyResolver = \r", "-\t\t\t\tnew HierarchyResolver(this.searchableEnvironment, JavaCore.getOptions(), this, new DefaultProblemFactory());\r", "-\t\t\tif (focusType != null) {\r", "-\t\t\t\tchar[] fullyQualifiedName = focusType.getFullyQualifiedName().toCharArray();\r", "-\t\t\t\tReferenceBinding focusTypeBinding = this.hierarchyResolver.setFocusType(CharOperation.splitOn('.', fullyQualifiedName));\r", "-\t\t\t\tif (focusTypeBinding == null \r", "-\t\t\t\t\t|| (!inProjectOfFocusType && (focusTypeBinding.tagBits & TagBits.HierarchyHasProblems) > 0)) {\r", "-\t\t\t\t\t// focus type is not visible in this project: no need to go further\r", "-\t\t\t\t\treturn;\r", "+\t\tsynchronized(this.nameLookup) { // prevent 2 concurrent accesses to name lookup while the working copies are set\r", "+\t\t\tif (inProjectOfFocusType) {\r", "+\t\t\t\torg.eclipse.jdt.core.ICompilationUnit unitToLookInside = focusType.getCompilationUnit();\r", "+\t\t\t\tif (unitToLookInside != null) {\r", "+\t\t\t\t\tthis.nameLookup.setUnitsToLookInside(new IWorkingCopy[] {unitToLookInside});\r", "-\t\t\tthis.hierarchyResolver.resolve(genericTypes, compilationUnits);\r", "-\t\t} finally {\r", "-\t\t\tif (inProjectOfFocusType) {\r", "-\t\t\t\tthis.nameLookup.setUnitsToLookInside(null);\r", "+\t\t\ttry {\r", "+\t\t\t\tthis.hierarchyResolver = \r", "+\t\t\t\t\tnew HierarchyResolver(this.searchableEnvironment, JavaCore.getOptions(), this, new DefaultProblemFactory());\r", "+\t\t\t\tif (focusType != null) {\r", "+\t\t\t\t\tchar[] fullyQualifiedName = focusType.getFullyQualifiedName().toCharArray();\r", "+\t\t\t\t\tReferenceBinding focusTypeBinding = this.hierarchyResolver.setFocusType(CharOperation.splitOn('.', fullyQualifiedName));\r", "+\t\t\t\t\tif (focusTypeBinding == null \r", "+\t\t\t\t\t\t|| (!inProjectOfFocusType && (focusTypeBinding.tagBits & TagBits.HierarchyHasProblems) > 0)) {\r", "+\t\t\t\t\t\t// focus type is not visible in this project: no need to go further\r", "+\t\t\t\t\t\treturn;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\tthis.hierarchyResolver.resolve(genericTypes, compilationUnits);\r", "+\t\t\t} finally {\r", "+\t\t\t\tif (inProjectOfFocusType) {\r", "+\t\t\t\t\tthis.nameLookup.setUnitsToLookInside(null);\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24811ad223d29f1afe708d388fcc0eb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ExternalFoldersManager.java", "commitBeforeChange": "eb40a119cd5ecacf8e90c38261ec37c99b5a07b7", "commitAfterChange": "de08ae3ac42ace8070739ebb7715adc6c4ed1304", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void createPendingFolders(IProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "  \tpublic void createPendingFolders(IProgressMonitor monitor) throws JavaModelException", "diff": ["-\t\tIterator iterator = this.pendingFolders.iterator();", "-\t\twhile (iterator.hasNext()) {", "-\t\t\tObject folderPath = iterator.next();", "-\t\t\ttry {", "-\t\t\t\tcreateLinkFolder((IPath) folderPath, false, externalFoldersProject, monitor);", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\tUtil.log(e, \"Error while creating a link for external folder :\" + folderPath); //$NON-NLS-1$", "+\t\tsynchronized (this.pendingFolders) {", "+\t\t\tIterator iterator = this.pendingFolders.iterator();", "+\t\t\twhile (iterator.hasNext()) {", "+\t\t\t\tObject folderPath = iterator.next();", "+\t\t\t\ttry {", "+\t\t\t\t\tcreateLinkFolder((IPath) folderPath, false, externalFoldersProject, monitor);", "+\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\tUtil.log(e, \"Error while creating a link for external folder :\" + folderPath); //$NON-NLS-1$", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f637819e26ff6b607d7435c41477cc2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "52aadf84ad4c79f64e59f07a05239268e15539c0", "commitAfterChange": "edc37e94c3a8ff30574beb9cdf0696d92f661cd3", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic synchronized void closeZipFile(ZipFile zipFile)", "signatureAfterChange": " \tpublic void closeZipFile(ZipFile zipFile)", "diff": ["-\t}", "-\tpublic synchronized void closeZipFile(ZipFile zipFile) {", "-\t\tif (zipFile == null) return;", "-\t\tif (this.zipFiles.get(Thread.currentThread()) != null) {", "-\t\t\treturn; // zip file will be closed by call to flushZipFiles", "-\t\ttry {", "-\t\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE) {", "-\t\t\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [JavaModelManager.closeZipFile(ZipFile)] Closing ZipFile on \" +zipFile.getName()); //$NON-NLS-1$\t//$NON-NLS-2$", "+\t}", "+\tpublic void closeZipFile(ZipFile zipFile) {", "+\t\tif (zipFile == null) return;", "+\t\tsynchronized(this.zipFiles) {", "+\t\t\tif (this.zipFiles.get(Thread.currentThread()) != null) {", "+\t\t\t\treturn; // zip file will be closed by call to flushZipFiles", "-\t\t\tzipFile.close();", "-\t\t} catch (IOException e) {", "+\t\t\ttry {", "+\t\t\t\tif (JavaModelManager.ZIP_ACCESS_VERBOSE) {", "+\t\t\t\t\tSystem.out.println(\"(\" + Thread.currentThread() + \") [JavaModelManager.closeZipFile(ZipFile)] Closing ZipFile on \" +zipFile.getName()); //$NON-NLS-1$\t//$NON-NLS-2$", "+\t\t\t\t}", "+\t\t\t\tzipFile.close();", "+\t\t\t} catch (IOException e) {", "+\t\t\t}"]}], "num": 40596}
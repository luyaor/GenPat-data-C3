{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24fb321b731168b864dd886512851051", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45593bf99797a9aab28702bc34ddb03f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1037, "methodNumberAfterChange": 1037, "signatureBeforeChange": " public void test1013()", "signatureAfterChange": " public void test1013()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 14)\\r\\n\" +", "-\t\t\"\tvoid foo(List l1, List<X> l2) {\\r\\n\" +", "-\t\t\"\t         ^^^^\\n\" +", "-\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 15)\\r\\n\" +", "-\t\t\"\tX x = bar1(l1, l2);\\r\\n\" +", "-\t\t\"\t      ^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation bar1(List, List) of the generic method bar1(List<T>, List<T>) of type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 15)\\r\\n\" +", "-\t\t\"\tX x = bar1(l1, l2);\\r\\n\" +", "-\t\t\"\t      ^^^^^^^^^^^^\\n\" +", "-\t\t\"Type mismatch: cannot convert from Object to X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in X.java (at line 15)\\r\\n\" +", "-\t\t\"\tX x = bar1(l1, l2);\\r\\n\" +", "-\t\t\"\t           ^^\\n\" +", "-\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<T>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. WARNING in X.java (at line 17)\\r\\n\" +", "-\t\t\"\tList<X> lx = bar2(l1, l2);\\r\\n\" +", "-\t\t\"\t             ^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation bar2(List, List) of the generic method bar2(List<T>, List<T>) of type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"6. WARNING in X.java (at line 17)\\r\\n\" +", "-\t\t\"\tList<X> lx = bar2(l1, l2);\\r\\n\" +", "-\t\t\"\t             ^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<X>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"7. WARNING in X.java (at line 17)\\r\\n\" +", "-\t\t\"\tList<X> lx = bar2(l1, l2);\\r\\n\" +", "-\t\t\"\t                  ^^\\n\" +", "-\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<T>\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 14)\\n\" + ", "+\t\t\"\tvoid foo(List l1, List<X> l2) {\\n\" + ", "+\t\t\"\t         ^^^^\\n\" + ", "+\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\"\tX x = bar1(l1, l2);\\n\" + ", "+\t\t\"\t      ^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation bar1(List, List<X>) of the generic method bar1(List<T>, List<T>) of type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\"\tX x = bar1(l1, l2);\\n\" + ", "+\t\t\"\t      ^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Object to X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\"\tX x = bar1(l1, l2);\\n\" + ", "+\t\t\"\t           ^^\\n\" + ", "+\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<X>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. WARNING in X.java (at line 17)\\n\" + ", "+\t\t\"\tList<X> lx = bar2(l1, l2);\\n\" + ", "+\t\t\"\t             ^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation bar2(List, List<X>) of the generic method bar2(List<T>, List<T>) of type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in X.java (at line 17)\\n\" + ", "+\t\t\"\tList<X> lx = bar2(l1, l2);\\n\" + ", "+\t\t\"\t             ^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<X>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"7. WARNING in X.java (at line 17)\\n\" + ", "+\t\t\"\tList<X> lx = bar2(l1, l2);\\n\" + ", "+\t\t\"\t                  ^^\\n\" + ", "+\t\t\"Type safety: The expression of type List needs unchecked conversion to conform to List<X>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75f5015fd7b2d980f226972ff2760ca0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "0241b6a034ef8fa4f27f3bd260b936d3f2c0aea7", "commitAfterChange": "99074098c6405e18b1f1a04aabe7c2838c777448", "methodNumberBeforeChange": 834, "methodNumberAfterChange": 834, "signatureBeforeChange": " public void test0814()", "signatureAfterChange": " public void test0814()", "diff": ["-\t\t\"----------\\n\" +", "-\t\t\"1. ERROR in X.java (at line 4)\\n\" +", "-\t\t\"\tif (o instanceof E[]) { //incorrect: cannot test non-reifiable type\\n\" +", "-\t\t\"\t    ^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Cannot perform instanceof check against parameterized type E[]. Use instead its raw form Object[] since generic type information will be erased at runtime\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 5)\\n\" +", "-\t\t\"\tE[] es = (E[]) o;\\n\" +", "-\t\t\"\t         ^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked cast from Object to E[]\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 7)\\n\" +", "-\t\t\"\tif (o instanceof List<E>[]) { //incorrect too\\n\" +", "-\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Cannot perform instanceof check against parameterized type List<E>[]. Use instead its raw form List[] since generic type information will be erased at runtime\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in X.java (at line 8)\\n\" +", "-\t\t\"\tList<E>[] es = (List<E>[]) o; \\n\" +", "-\t\t\"\t               ^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked cast from Object to List<E>[]\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. ERROR in X.java (at line 15)\\n\" +", "-\t\t\"\tif (al instanceof List<E>[]) { //incorrect too\\n\" +", "-\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Cannot perform instanceof check against parameterized type List<E>[]. Use instead its raw form List[] since generic type information will be erased at runtime\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"6. WARNING in X.java (at line 16)\\n\" +", "-\t\t\"\tList<E>[] es = (List<E>[]) al; \\n\" +", "-\t\t\"\t               ^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Unnecessary cast from ArrayList<E>[] to List<E>[]\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\"\tif (o instanceof E[]) { //incorrect: cannot test non-reifiable type\\n\" + ", "+\t\t\"\t    ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Cannot perform instanceof check against type parameter E[]. Use instead its erasure Object[] instead since further generic type information will be erased at runtime\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tE[] es = (E[]) o;\\n\" + ", "+\t\t\"\t         ^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to E[]\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tif (o instanceof List<E>[]) { //incorrect too\\n\" + ", "+\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Cannot perform instanceof check against parameterized type List<E>[]. Use the form List<?>[] instead since further generic type information will be erased at runtime\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\"\tList<E>[] es = (List<E>[]) o; \\n\" + ", "+\t\t\"\t               ^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to List<E>[]\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 15)\\n\" + ", "+\t\t\"\tif (al instanceof List<E>[]) { //incorrect too\\n\" + ", "+\t\t\"\t    ^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Cannot perform instanceof check against parameterized type List<E>[]. Use the form List<?>[] instead since further generic type information will be erased at runtime\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in X.java (at line 16)\\n\" + ", "+\t\t\"\tList<E>[] es = (List<E>[]) al; \\n\" + ", "+\t\t\"\t               ^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Unnecessary cast from ArrayList<E>[] to List<E>[]\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a70e6f1552735b1048091e608cf2d24", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "bb670e5ec8185e24981d836127d58e53e56c1ba8", "commitAfterChange": "83a5df02089ecb5f7e6df978c59083c15170780c", "methodNumberBeforeChange": 850, "methodNumberAfterChange": 850, "signatureBeforeChange": " public void test0830()", "signatureAfterChange": "  public void test0830()", "diff": ["-// ensure no raw type ref complaint inside instanceof / cast", "+", "-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 5)\\n\" +", "-\t\t\"\tX x = (X) o;\\n\" +", "-\t\t\"\t^\\n\" +", "-\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 5)\\n\" +", "-\t\t\"\tX x = (X) o;\\n\" +", "-\t\t\"\t       ^\\n\" +", "-\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. WARNING in X.java (at line 6)\\n\" +", "-\t\t\"\tX<String> xs = (X<String>)o;\\n\" +", "-\t\t\"\t               ^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked cast from Object to X<String>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. ERROR in X.java (at line 7)\\n\" +", "-\t\t\"\tZork z;\\n\" +", "-\t\t\"\t^^^^\\n\" +", "-\t\t\"Zork cannot be resolved to a type\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"5. WARNING in X.java (at line 10)\\n\" +", "-\t\t\"\tList l = (List) al;\\n\" +", "-\t\t\"\t^^^^\\n\" +", "-\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"6. WARNING in X.java (at line 10)\\n\" +", "-\t\t\"\tList l = (List) al;\\n\" +", "-\t\t\"\t         ^^^^^^^^^\\n\" +", "-\t\t\"Unnecessary cast from ArrayList<String> to List\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"7. WARNING in X.java (at line 10)\\n\" +", "-\t\t\"\tList l = (List) al;\\n\" +", "-\t\t\"\t          ^^^^\\n\" +", "-\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\"\tboolean b = o instanceof X;\\n\" + ", "+\t\t\"\t                         ^\\n\" + ", "+\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tX x = (X) o;\\n\" + ", "+\t\t\"\t^\\n\" + ", "+\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tX x = (X) o;\\n\" + ", "+\t\t\"\t       ^\\n\" + ", "+\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\"\tX<String> xs = (X<String>)o;\\n\" + ", "+\t\t\"\t               ^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked cast from Object to X<String>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\"\tZork z;\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"6. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\"\tList l = (List) al;\\n\" + ", "+\t\t\"\t^^^^\\n\" + ", "+\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"7. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\"\tList l = (List) al;\\n\" + ", "+\t\t\"\t         ^^^^^^^^^\\n\" + ", "+\t\t\"Unnecessary cast from ArrayList<String> to List\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"8. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\"\tList l = (List) al;\\n\" + ", "+\t\t\"\t          ^^^^\\n\" + ", "+\t\t\"List is a raw type. References to generic type List<E> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be8600e13c51f3ca8a3377382064df82", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1380, "methodNumberAfterChange": 1380, "signatureBeforeChange": " public void test1349()", "signatureAfterChange": " public void test1349()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in Scratch.java (at line 2)\\n\" +", "-\t\t\t\"\tprivate Y rawObject = new Y();\\n\" +", "-\t\t\t\"\t        ^\\n\" +", "-\t\t\t\"Y is a raw type. References to generic type Y<S> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in Scratch.java (at line 2)\\n\" +", "-\t\t\t\"\tprivate Y rawObject = new Y();\\n\" +", "-\t\t\t\"\t                          ^\\n\" +", "-\t\t\t\"Y is a raw type. References to generic type Y<S> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. WARNING in Scratch.java (at line 4)\\n\" +", "-\t\t\t\"\tmethod(new X<Y<Z>>(), rawObject); // compile error in javac, unchecked conversion in Eclipse\\n\" +", "-\t\t\t\"\t                      ^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<Z>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. WARNING in Scratch.java (at line 5)\\n\" +", "-\t\t\t\"\tthis.<Y<Z>>method(new X<Y<Z>>(), rawObject); // unchecked warning in both\\n\" +", "-\t\t\t\"\t                                 ^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<Z>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"5. ERROR in Scratch.java (at line 11)\\n\" +", "-\t\t\t\"\tclass Z { Zork z; }\\n\" +", "-\t\t\t\"\t          ^^^^\\n\" +", "-\t\t\t\"Zork cannot be resolved to a type\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in Scratch.java (at line 2)\\n\" + ", "+\t\t\t\"\tprivate Y rawObject = new Y();\\n\" + ", "+\t\t\t\"\t        ^\\n\" + ", "+\t\t\t\"Y is a raw type. References to generic type Y<S> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in Scratch.java (at line 2)\\n\" + ", "+\t\t\t\"\tprivate Y rawObject = new Y();\\n\" + ", "+\t\t\t\"\t                          ^\\n\" + ", "+\t\t\t\"Y is a raw type. References to generic type Y<S> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in Scratch.java (at line 4)\\n\" + ", "+\t\t\t\"\tmethod(new X<Y<Z>>(), rawObject); // compile error in javac, unchecked conversion in Eclipse\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation method(X<Y<Z>>, Y) of the generic method method(X<T>, T) of type Scratch\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in Scratch.java (at line 4)\\n\" + ", "+\t\t\t\"\tmethod(new X<Y<Z>>(), rawObject); // compile error in javac, unchecked conversion in Eclipse\\n\" + ", "+\t\t\t\"\t                      ^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<Z>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in Scratch.java (at line 5)\\n\" + ", "+\t\t\t\"\tthis.<Y<Z>>method(new X<Y<Z>>(), rawObject); // unchecked warning in both\\n\" + ", "+\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation method(X<Y<Z>>, Y) of the generic method method(X<T>, T) of type Scratch\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in Scratch.java (at line 5)\\n\" + ", "+\t\t\t\"\tthis.<Y<Z>>method(new X<Y<Z>>(), rawObject); // unchecked warning in both\\n\" + ", "+\t\t\t\"\t                                 ^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The expression of type Y needs unchecked conversion to conform to Y<Z>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"7. ERROR in Scratch.java (at line 11)\\n\" + ", "+\t\t\t\"\tclass Z { Zork z; }\\n\" + ", "+\t\t\t\"\t          ^^^^\\n\" + ", "+\t\t\t\"Zork cannot be resolved to a type\\n\" + "]}], "num": 7455}
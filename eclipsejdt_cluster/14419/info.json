{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27b70ecb3b35c60e691e286787a41cba", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72891fc1c862ecb01cf79824ef048882", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java", "commitBeforeChange": "ad990078bc71c5ba4377a1b73bf726012790eb02", "commitAfterChange": "0f0f429f6e99c185caa1aa35276658b05d44b90b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     @Override     public DeclaredType getDeclaredType(TypeElement typeElem, TypeMirror... typeArgs)", "signatureAfterChange": "     @Override     public DeclaredType getDeclaredType(TypeElement typeElem, TypeMirror... typeArgs)", "diff": ["-            if (!(binding instanceof ReferenceBinding)) {", "-                throw new IllegalArgumentException(\"Invalid type for a type arguments : \" + typeMirrorImpl); //$NON-NLS-1$", "+            if (!(binding instanceof TypeBinding)) {", "+                throw new IllegalArgumentException(\"Invalid type argument: \" + typeMirrorImpl); //$NON-NLS-1$", "-            typeArguments[i] = (ReferenceBinding) binding;", "+            typeArguments[i] = (TypeBinding) binding;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85af441e9ee5b87342d83fc5e027ef56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseDiagnostic.java", "commitBeforeChange": "9db26c7bea8b081f74e04400ef73e415034114ae", "commitAfterChange": "3ee5245339c28c9f118b2d56a8158cb4aa75c312", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private static Kind getKind(CategorizedProblem problem)", "signatureAfterChange": "      private static Kind getKind(CategorizedProblem problem)", "diff": ["-        }", "-        if(problem.isWarning()) {", "+        } else if(problem.isWarning()) {", "+        } else if (problem instanceof DefaultProblem && ((DefaultProblem) problem).isInfo()) {", "+        \tkind = Kind.NOTE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9575bcd69d1ebb36eac61da663ccc416", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "1b2fefdcba6fae8f70ea49e17ba1e528ac24b968", "commitAfterChange": "bca3f57a59122220b2da4d318202ae5c57ace15e", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 51, "signatureBeforeChange": " public static void zip(File rootDir, String zipPath) throws IOException", "signatureAfterChange": " public static void zip(File rootDir, String zipPath) throws IOException", "diff": ["-        if (zipFile.exists() && !delete(zipFile))", "-        \tthrow new IOException(\"Could not delete \" + zipPath);", "+        if (zipFile.exists()) {", "+        \tif (!delete(zipFile))", "+\t        \tthrow new IOException(\"Could not delete \" + zipPath);", "+        \t // ensure the new zip file has a different timestamp than the previous one", "+        \tint timeToWait = 1000; // some platform (like Linux) have a 1s granularity)", "+           \twaitAtLeast(timeToWait);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc3cc28f4d39cb5918a00bf6104f8c7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java", "commitBeforeChange": "ea7357803f7625c89fd0063c616a1f7a28c12a8c", "commitAfterChange": "2b786bffa4dd1bffe658313335c4deb92d85d228", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     @Override     public DeclaredType getDeclaredType(DeclaredType containing, TypeElement typeElem,             TypeMirror... typeArgs)", "signatureAfterChange": "     @Override     public DeclaredType getDeclaredType(DeclaredType containing, TypeElement typeElem,             TypeMirror... typeArgs)", "diff": ["-            if (!(binding instanceof ReferenceBinding)) {", "+            if (!(binding instanceof TypeBinding)) {", "-            typeArguments[i] = (ReferenceBinding) binding;", "+            typeArguments[i] = (TypeBinding) binding;"]}], "num": 14419}
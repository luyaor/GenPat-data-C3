{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8995915bf9701e72a7c216b2b46c684", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ccbbf42f3cf2efde80222a4fb98845d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r private int matchLevel(ImportReference importRef, boolean resolve)", "signatureAfterChange": "\r private boolean matches(ImportReference importRef, boolean resolve)", "diff": ["+ */\r", "+private boolean matches(ImportReference importRef, boolean resolve) {\r", "+\r", "+\tif (importRef.onDemand) return false;\r", "+\r", "+\tchar[][] tokens = importRef.tokens;\r", "+\tint importLength = tokens.length;\r", "+\t\r", "+\tif (this.qualification != null){\r", "+\t\tchar[][] qualificationTokens = CharOperation.splitOn('.', this.qualification);\r", "+\t\tint qualificationLength = qualificationTokens.length;\r", "+\t\tif (qualificationLength+1 > importLength) return false;\r", "+\t\tfor (int i = 0; i < qualificationLength; i++){\r", "+\t\t\tif (!this.matchesName(qualificationTokens[i], tokens[i])) {\r", "+\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (this.simpleName != null \r", "+\t\t\t&& !this.matchesName(this.simpleName, tokens[qualificationLength])) {\r", "+\t\t\treturn false;\r", "+\t\t}\r", "+\t} else {\r", "+\t\tif (this.simpleName != null) {\r", "+\t\t\tfor (int i = 0; i < importLength; i++){\r", "+\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])){\r", "+\t\t\t\t\treturn true;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\treturn false;\r", "+\t\t}\r", "+\t}\r", "+\treturn true;\r", "+}\r", "- */\r", "-private int matchLevel(ImportReference importRef, boolean resolve) {\r", "-\r", "-\tif (importRef.onDemand) return IMPOSSIBLE_MATCH;\r", "-\r", "-\tchar[][] tokens = importRef.tokens;\r", "-\tint importLength = tokens.length;\r", "-\t\r", "-\tif (this.qualification != null){\r", "-\t\tchar[][] qualificationTokens = CharOperation.splitOn('.', this.qualification);\r", "-\t\tint qualificationLength = qualificationTokens.length;\r", "-\t\tif (qualificationLength+1 > importLength) return IMPOSSIBLE_MATCH;\r", "-\t\tfor (int i = 0; i < qualificationLength; i++){\r", "-\t\t\tif (!this.matchesName(qualificationTokens[i], tokens[i])) {\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tif (this.simpleName == null || this.matchesName(this.simpleName, tokens[qualificationLength])) {\r", "-\t\t\treturn ACCURATE_MATCH;\r", "-\t\t} else {\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t} else {\r", "-\t\tif (this.simpleName == null) {\r", "-\t\t\treturn ACCURATE_MATCH;\r", "-\t\t} else {\r", "-\t\t\tfor (int i = 0; i < importLength; i++){\r", "-\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])){\r", "-\t\t\t\t\treturn ACCURATE_MATCH;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t}\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5f9db847392f201365a9adec05f2f19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "9037a5669c89fc0ae3f8548a99dce6fa5402fb31", "commitAfterChange": "e4e1e1935f0e7607d1265df332c7ce922de89c18", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 10, "signatureBeforeChange": " private int matchLevel(ImportReference importRef, boolean resolve)", "signatureAfterChange": " protected int matchLevel(ImportReference importRef, boolean resolve)", "diff": ["+ */", "+protected int matchLevel(ImportReference importRef, boolean resolve) {", "+\t// NOTE: Not called when resolve is true, see MatchingNodeSet.reportMatching(unit)", "+\t// EXCEPT for OrPatterns since they choose the matching pattern again using this method instead of matchLevel(binding)", "+\tif (this.qualification != null) {", "+\t\tchar[][] tokens = importRef.tokens;", "+\t\tchar[] pattern = this.simpleName == null", "+\t\t\t? this.qualification", "+\t\t\t: CharOperation.concat(this.qualification, this.simpleName, '.');", "+\t\tchar[] qualifiedTypeName = CharOperation.concatWith(tokens, '.');", "+\t\tswitch (this.matchMode) {", "+\t\t\tcase EXACT_MATCH :", "+\t\t\tcase PREFIX_MATCH :", "+\t\t\t\tif (CharOperation.prefixEquals(pattern, qualifiedTypeName, this.isCaseSensitive)) return POTENTIAL_MATCH;", "+\t\t\t\tbreak;", "+\t\t\tcase PATTERN_MATCH:", "+\t\t\t\tif (CharOperation.match(pattern, qualifiedTypeName, this.isCaseSensitive)) return POTENTIAL_MATCH;", "+\t\t\t\tbreak;", "+\t\t}", "+\t} else {", "+\t\tif (this.simpleName == null) return ACCURATE_MATCH;", "+\t\tchar[][] tokens = importRef.tokens;", "+\t\tfor (int i = 0, length = tokens.length; i < length; i++)", "+\t\t\tif (matchesName(this.simpleName, tokens[i])) return ACCURATE_MATCH;", "+\t}", "+\treturn IMPOSSIBLE_MATCH;", "+}", "- */", "-private int matchLevel(ImportReference importRef, boolean resolve) {", "-", "-\tchar[][] tokens = importRef.tokens;", "-\tint importLength = tokens.length;", "-\t", "-\tif (this.qualification != null) {", "-\t\tchar[] pattern;", "-\t\tif (this.simpleName == null) {", "-\t\t\tpattern = this.qualification;", "-\t\t} else {", "-\t\t\tpattern = CharOperation.concat(this.qualification, this.simpleName, '.');", "-\t\t}", "-\t\tchar[] qualifiedTypeName = CharOperation.concatWith(importRef.tokens, '.');", "-\t\tswitch (this.matchMode) {", "-\t\t\tcase EXACT_MATCH :", "-\t\t\tcase PREFIX_MATCH :", "-\t\t\t\tif (CharOperation.prefixEquals(pattern, qualifiedTypeName, this.isCaseSensitive)) {", "-\t\t\t\t\treturn POSSIBLE_MATCH;", "-\t\t\t\t} ", "-\t\t\t\tbreak;", "-\t\t\tcase PATTERN_MATCH:", "-\t\t\t\tif (CharOperation.match(pattern, qualifiedTypeName, this.isCaseSensitive)) {", "-\t\t\t\t\treturn POSSIBLE_MATCH;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t}", "-\t\treturn IMPOSSIBLE_MATCH;", "-\t} else {", "-\t\tif (this.simpleName == null) {", "-\t\t\treturn this.needsResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;", "-\t\t} else {", "-\t\t\tfor (int i = 0; i < importLength; i++){", "-\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])){", "-\t\t\t\t\treturn this.needsResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn IMPOSSIBLE_MATCH;", "-\t\t}", "-\t}", "-}"]}], "num": 1590}
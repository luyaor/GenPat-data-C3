{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e430f9638b95236a143277d3746f7852", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "509c96effce07a452f6cac20ce74a6a2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathDirectory.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  String[] directoryList(String qualifiedPackageName)", "signatureAfterChange": "  String[] directoryList(String qualifiedPackageName)", "diff": ["-\tFile dir = new File(binaryPath + qualifiedPackageName);", "-\tnotFound : if (dir != null && dir.isDirectory()) {", "-\t\t// must protect against a case insensitive File call", "-\t\t// walk the qualifiedPackageName backwards looking for an uppercase character before the '/'", "-\t\tint index = qualifiedPackageName.length();", "-\t\tint last = qualifiedPackageName.lastIndexOf('/');", "-\t\twhile (--index > last && !Character.isUpperCase(qualifiedPackageName.charAt(index))) {}", "-\t\tif (index > last) {", "-\t\t\tif (last == -1) {", "-\t\t\t\tif (!doesFileExist(qualifiedPackageName, \"\")) //$NON-NLS-1$ ", "-\t\t\t\t\tbreak notFound;", "-\t\t\t} else {", "-\t\t\t\tString packageName = qualifiedPackageName.substring(last + 1);", "-\t\t\t\tString parentPackage = qualifiedPackageName.substring(0, last);", "-\t\t\t\tif (!doesFileExist(packageName, parentPackage))", "-\t\t\t\t\tbreak notFound;", "+\ttry {", "+\t\tIResource folder = binaryFolder.findMember(qualifiedPackageName); // this is a case-sensitive check", "+\t\tif (folder != null && folder.getType() == IResource.FOLDER) {", "+\t\t\tIResource[] members = ((IFolder) folder).members();", "+\t\t\tdirList = new String[members.length];", "+\t\t\tint index = 0;", "+\t\t\tfor (int i = 0, l = members.length; i < l; i++) {", "+\t\t\t\tIResource m = members[i];", "+\t\t\t\tif (m.getType() == IResource.FILE && JavaBuilder.CLASS_EXTENSION.equalsIgnoreCase(m.getFileExtension()))", "+\t\t\t\t\t// add exclusion pattern check here if we want to hide .class files", "+\t\t\t\t\tdirList[index++] = m.getName();", "+\t\t\tif (index < dirList.length)", "+\t\t\t\tSystem.arraycopy(dirList, 0, dirList = new String[index], 0, index);", "+\t\t\tdirectoryCache.put(qualifiedPackageName, dirList);", "+\t\t\treturn dirList;", "-\t\tif ((dirList = dir.list()) == null)", "-\t\t\tdirList = new String[0];", "-\t\tdirectoryCache.put(qualifiedPackageName, dirList);", "-\t\treturn dirList;", "+\t} catch(CoreException ignored) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af8fbf2f25aaaff0f6cda2400223e2f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ClasspathSourceDirectory.java", "commitBeforeChange": "029a8f257514071d898cccd4122bad881aa576bc", "commitAfterChange": "89f5de86dbcff10e0a2f2dafa846f8c01996e885", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  String[] directoryList(String qualifiedPackageName)", "signatureAfterChange": "  SimpleLookupTable directoryTable(String qualifiedPackageName)", "diff": ["-String[] directoryList(String qualifiedPackageName) {", "-\tString[] dirList = (String[]) directoryCache.get(qualifiedPackageName);", "-\tif (dirList == missingPackageHolder) return null; // package exists in another classpath directory or jar", "-\tif (dirList != null) return dirList;", "+SimpleLookupTable directoryTable(String qualifiedPackageName) {", "+\tSimpleLookupTable dirTable = (SimpleLookupTable) directoryCache.get(qualifiedPackageName);", "+\tif (dirTable == missingPackageHolder) return null; // package exists in another classpath directory or jar", "+\tif (dirTable != null) return dirTable;", "-\t\t\tdirList = new String[members.length];", "-\t\t\tint index = 0;", "+\t\t\tdirTable = new SimpleLookupTable();", "-\t\t\t\tif (m.getType() == IResource.FILE && org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(name = m.getName()))", "-\t\t\t\t\tdirList[index++] = name;", "+\t\t\t\tif (m.getType() == IResource.FILE) {", "+\t\t\t\t\tint index = Util.indexOfJavaLikeExtension(name = m.getName());", "+\t\t\t\t\tif (index >= 0) {", "+\t\t\t\t\t\tString fullPath = m.getFullPath().toString();", "+\t\t\t\t\t\tif (!org.eclipse.jdt.internal.compiler.util.Util.isExcluded(fullPath.toCharArray(), this.fulInclusionPatternChars, this.fullExclusionPatternChars, false/*not a folder path*/)) {", "+\t\t\t\t\t\t\tdirTable.put(name.substring(0, index), m);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tif (index < dirList.length)", "-\t\t\t\tSystem.arraycopy(dirList, 0, dirList = new String[index], 0, index);", "-\t\t\tdirectoryCache.put(qualifiedPackageName, dirList);", "-\t\t\treturn dirList;", "+\t\t\tdirectoryCache.put(qualifiedPackageName, dirTable);", "+\t\t\treturn dirTable;", "-}"]}], "num": 58575}
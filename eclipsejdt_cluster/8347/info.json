{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37f1734523dccd2d56bc110f6cca1e24", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c00a7dd39b883db7f9875da1682915f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java", "commitBeforeChange": "ca9dbce3d563d28e984f1680d988cb68608c75f8", "commitAfterChange": "aec4b3fea7801d56d112291851d497436c0f9c81", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 53, "signatureBeforeChange": " \tpublic static ASTNode copySubtree(AST target, ASTNode node)", "signatureAfterChange": " \tpublic static ASTNode copySubtree(AST target, ASTNode node)", "diff": ["+\t\t}", "+\t\tif (target == null) {", "+\t\t\tthrow new IllegalArgumentException();", "+\t\t}", "+\t\tif (target.apiLevel() != node.getAST().apiLevel()) {", "+\t\t\tthrow new UnsupportedOperationException();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e80c537774184d8ed13166e529487e1a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/RoundEnvImpl.java", "commitBeforeChange": "3d8fd8b145b9fa1f2c27b19a7df3e728982e46e7", "commitAfterChange": "2e00795c3d6ef500d7af726d431f240f73b100c7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \t@Override \tpublic Set<? extends Element> getElementsAnnotatedWith(Class<? extends Annotation> a)", "signatureAfterChange": "  \t@Override \tpublic Set<? extends Element> getElementsAnnotatedWith(Class<? extends Annotation> a)", "diff": ["-\t\tTypeElement annoType = _processingEnv.getElementUtils().getTypeElement(a.getCanonicalName());", "+\t\tString canonicalName = a.getCanonicalName();", "+\t\tif (canonicalName == null) {", "+\t\t\t// null for anonymous and local classes or an array of those", "+\t\t\tthrow new IllegalArgumentException(\"Only annotation type are expected\"); //$NON-NLS-1$", "+\t\t}", "+\t\tTypeElement annoType = _processingEnv.getElementUtils().getTypeElement(canonicalName);", "+\t\tif (annoType.getKind() != ElementKind.ANNOTATION_TYPE) {", "+\t\t\tthrow new IllegalArgumentException(\"Only annotation type are expected\"); //$NON-NLS-1$", "+\t\t}"]}], "num": 8347}
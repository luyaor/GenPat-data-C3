{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4fe16b0f9a655f2b798ea5444eb01643", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "757867f8479ed6e6a1a73436298007f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTestAST3_2.java", "commitBeforeChange": "0d655eb7c5734b22e978a732e9dc70711c6565d1", "commitAfterChange": "e8e6bc5be64017fb64d9068aa06ee69d945c7195", "methodNumberBeforeChange": 214, "methodNumberAfterChange": 214, "signatureBeforeChange": " \tpublic void _test0580() throws JavaModelException", "signatureAfterChange": " \tpublic void test0580() throws JavaModelException", "diff": ["-\tpublic void _test0580() throws JavaModelException {", "+\tpublic void test0580() throws JavaModelException {", "+\t\t\tString source = \"package p;\\n\" +", "+\t\t\t\"public class X {\\n\" +", "+\t\t\t\"\td String[][]tab;\\n\" +", "+\t\t\t\"}\";", "-\t\t\t\t\"package p;\\n\" +", "-\t\t\t\t\"public class X {\\n\" +", "-\t\t\t\t\"\td\\n\" +", "-\t\t\t\t\"\t\\n\" +", "-\t\t\t\t\"\tString[][]tab;\\n\" +", "-\t\t\t\t\"}\",", "-\t\t\t\tworkingCopy);", "+\t\t\t\tsource,", "+\t\t\t\tworkingCopy,", "+\t\t\t\tfalse);", "+\t\t\tCompilationUnit compilationUnit = (CompilationUnit) node;", "+\t\t\tnode = getASTNode(compilationUnit, 0, 0);", "+\t\t\tassertEquals(\"wrong type\", ASTNode.FIELD_DECLARATION, node.getNodeType());", "+\t\t\tFieldDeclaration fieldDeclaration = (FieldDeclaration) node;", "+\t\t\tcheckSourceRange(fieldDeclaration, \"d String[][]\", source.toCharArray());", "+\t\t\tType type = fieldDeclaration.getType();", "+\t\t\tassertTrue(\"Not a simple type\", type.isSimpleType());", "+\t\t\tList fragments = fieldDeclaration.fragments();", "+\t\t\tassertEquals(\"Wrong size\", 1, fragments.size());", "+\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "+\t\t\tassertEquals(\"Wrong extended dimensions\", 2, fragment.getExtraDimensions());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7961778436351d6fc3a16f8dc2699908", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest2.java", "commitBeforeChange": "6eb04387ef3ee5335f206eb99b3c936de2847d3d", "commitAfterChange": "b01f0952648a27a3dbc985907cc5ced8ba10ed91", "methodNumberBeforeChange": 213, "methodNumberAfterChange": 213, "signatureBeforeChange": " \tpublic void test0608() throws CoreException", "signatureAfterChange": " \tpublic void test0608() throws CoreException", "diff": ["-\t\t\tASTNode cu = buildAST(null, workingCopy, false, true);", "-\t\t\tassertNotNull(\"Should get an AST\", cu);", "+\t\t\tASTNode node = buildAST(null, workingCopy, false, true);", "+\t\t\tassertNotNull(\"Should get an AST\", node);", "+\t\t\tassertEquals(\"Not a compilation unit\", ASTNode.COMPILATION_UNIT, node.getNodeType());", "+\t\t\tnode = getASTNode((CompilationUnit) node, 0, 0, 0);", "+\t\t\tassertEquals(\"Not a for statement\", ASTNode.FOR_STATEMENT, node.getNodeType());", "+\t\t\tForStatement forStatement = (ForStatement) node;", "+\t\t\tList initializers = forStatement.initializers();", "+\t\t\tassertEquals(\"Wrong size\", 1, initializers.size());", "+\t\t\tVariableDeclarationExpression expression = (VariableDeclarationExpression) initializers.get(0);", "+\t\t\tList fragments = expression.fragments();", "+\t\t\tassertEquals(\"Wrong size\", 1, fragments.size());", "+\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);", "+\t\t\tassertEquals(\"Wrong name\", \"i\", fragment.getName().getIdentifier());", "+\t\t\tassertTrue(\"Should be a recovered fragment\", isRecovered(expression));"]}], "num": 54718}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e168653f6323fd16d97012318c77b200", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ca54841a6350af83aa317523bb5fedf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r private int matchLevel(ImportReference importRef, boolean resolve)", "signatureAfterChange": "\r private boolean matches(ImportReference importRef, boolean resolve)", "diff": ["+ */\r", "+private boolean matches(ImportReference importRef, boolean resolve) {\r", "+\r", "+\tif (importRef.onDemand) return false;\r", "+\r", "+\tchar[][] tokens = importRef.tokens;\r", "+\tint importLength = tokens.length;\r", "+\t\r", "+\tif (this.qualification != null){\r", "+\t\tchar[][] qualificationTokens = CharOperation.splitOn('.', this.qualification);\r", "+\t\tint qualificationLength = qualificationTokens.length;\r", "+\t\tif (qualificationLength+1 > importLength) return false;\r", "+\t\tfor (int i = 0; i < qualificationLength; i++){\r", "+\t\t\tif (!this.matchesName(qualificationTokens[i], tokens[i])) {\r", "+\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (this.simpleName != null \r", "+\t\t\t&& !this.matchesName(this.simpleName, tokens[qualificationLength])) {\r", "+\t\t\treturn false;\r", "+\t\t}\r", "+\t} else {\r", "+\t\tif (this.simpleName != null) {\r", "+\t\t\tfor (int i = 0; i < importLength; i++){\r", "+\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])){\r", "+\t\t\t\t\treturn true;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\treturn false;\r", "+\t\t}\r", "+\t}\r", "+\treturn true;\r", "+}\r", "- */\r", "-private int matchLevel(ImportReference importRef, boolean resolve) {\r", "-\r", "-\tif (importRef.onDemand) return IMPOSSIBLE_MATCH;\r", "-\r", "-\tchar[][] tokens = importRef.tokens;\r", "-\tint importLength = tokens.length;\r", "-\t\r", "-\tif (this.qualification != null){\r", "-\t\tchar[][] qualificationTokens = CharOperation.splitOn('.', this.qualification);\r", "-\t\tint qualificationLength = qualificationTokens.length;\r", "-\t\tif (qualificationLength+1 > importLength) return IMPOSSIBLE_MATCH;\r", "-\t\tfor (int i = 0; i < qualificationLength; i++){\r", "-\t\t\tif (!this.matchesName(qualificationTokens[i], tokens[i])) {\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tif (this.simpleName == null || this.matchesName(this.simpleName, tokens[qualificationLength])) {\r", "-\t\t\treturn ACCURATE_MATCH;\r", "-\t\t} else {\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t} else {\r", "-\t\tif (this.simpleName == null) {\r", "-\t\t\treturn ACCURATE_MATCH;\r", "-\t\t} else {\r", "-\t\t\tfor (int i = 0; i < importLength; i++){\r", "-\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])){\r", "-\t\t\t\t\treturn ACCURATE_MATCH;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t}\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62fb00a69b65fd3b648a76446c277aa9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r private int matchLevel(ImportReference importRef, boolean resolve)", "signatureAfterChange": "\r private boolean matches(ImportReference importRef, boolean resolve)", "diff": ["+ */\r", "+private boolean matches(ImportReference importRef, boolean resolve) {\r", "+\r", "+\tif (importRef.onDemand) return false;\r", "+\r", "+\tchar[][] tokens = importRef.tokens;\r", "+\tint importLength = tokens.length;\r", "+\t\r", "+\tif (this.qualification != null){\r", "+\t\tchar[][] qualificationTokens = CharOperation.splitOn('.', this.qualification);\r", "+\t\tint qualificationLength = qualificationTokens.length;\r", "+\t\tif (qualificationLength+1 > importLength) return false;\r", "+\t\tfor (int i = 0; i < qualificationLength; i++){\r", "+\t\t\tif (!this.matchesName(qualificationTokens[i], tokens[i])) {\r", "+\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (this.simpleName != null \r", "+\t\t\t&& !this.matchesName(this.simpleName, tokens[qualificationLength])) {\r", "+\t\t\treturn false;\r", "+\t\t}\r", "+\t} else {\r", "+\t\tif (this.simpleName != null) {\r", "+\t\t\tfor (int i = 0; i < importLength; i++){\r", "+\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])){\r", "+\t\t\t\t\treturn true;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\treturn false;\r", "+\t\t}\r", "+\t}\r", "+\treturn true;\r", "+}\r", "- */\r", "-private int matchLevel(ImportReference importRef, boolean resolve) {\r", "-\r", "-\tif (importRef.onDemand) return IMPOSSIBLE_MATCH;\r", "-\r", "-\tchar[][] tokens = importRef.tokens;\r", "-\tint importLength = tokens.length;\r", "-\t\r", "-\tif (this.qualification != null){\r", "-\t\tchar[][] qualificationTokens = CharOperation.splitOn('.', this.qualification);\r", "-\t\tint qualificationLength = qualificationTokens.length;\r", "-\t\tif (qualificationLength+1 > importLength) return IMPOSSIBLE_MATCH;\r", "-\t\tfor (int i = 0; i < qualificationLength; i++){\r", "-\t\t\tif (!this.matchesName(qualificationTokens[i], tokens[i])) {\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tif (this.simpleName == null || this.matchesName(this.simpleName, tokens[qualificationLength])) {\r", "-\t\t\treturn ACCURATE_MATCH;\r", "-\t\t} else {\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t} else {\r", "-\t\tif (this.simpleName == null) {\r", "-\t\t\treturn ACCURATE_MATCH;\r", "-\t\t} else {\r", "-\t\t\tfor (int i = 0; i < importLength; i++){\r", "-\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])){\r", "-\t\t\t\t\treturn ACCURATE_MATCH;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t}\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ccbbf42f3cf2efde80222a4fb98845d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r private int matchLevel(ImportReference importRef, boolean resolve)", "signatureAfterChange": "\r private boolean matches(ImportReference importRef, boolean resolve)", "diff": ["+ */\r", "+private boolean matches(ImportReference importRef, boolean resolve) {\r", "+\r", "+\tif (importRef.onDemand) return false;\r", "+\r", "+\tchar[][] tokens = importRef.tokens;\r", "+\tint importLength = tokens.length;\r", "+\t\r", "+\tif (this.qualification != null){\r", "+\t\tchar[][] qualificationTokens = CharOperation.splitOn('.', this.qualification);\r", "+\t\tint qualificationLength = qualificationTokens.length;\r", "+\t\tif (qualificationLength+1 > importLength) return false;\r", "+\t\tfor (int i = 0; i < qualificationLength; i++){\r", "+\t\t\tif (!this.matchesName(qualificationTokens[i], tokens[i])) {\r", "+\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (this.simpleName != null \r", "+\t\t\t&& !this.matchesName(this.simpleName, tokens[qualificationLength])) {\r", "+\t\t\treturn false;\r", "+\t\t}\r", "+\t} else {\r", "+\t\tif (this.simpleName != null) {\r", "+\t\t\tfor (int i = 0; i < importLength; i++){\r", "+\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])){\r", "+\t\t\t\t\treturn true;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\treturn false;\r", "+\t\t}\r", "+\t}\r", "+\treturn true;\r", "+}\r", "- */\r", "-private int matchLevel(ImportReference importRef, boolean resolve) {\r", "-\r", "-\tif (importRef.onDemand) return IMPOSSIBLE_MATCH;\r", "-\r", "-\tchar[][] tokens = importRef.tokens;\r", "-\tint importLength = tokens.length;\r", "-\t\r", "-\tif (this.qualification != null){\r", "-\t\tchar[][] qualificationTokens = CharOperation.splitOn('.', this.qualification);\r", "-\t\tint qualificationLength = qualificationTokens.length;\r", "-\t\tif (qualificationLength+1 > importLength) return IMPOSSIBLE_MATCH;\r", "-\t\tfor (int i = 0; i < qualificationLength; i++){\r", "-\t\t\tif (!this.matchesName(qualificationTokens[i], tokens[i])) {\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tif (this.simpleName == null || this.matchesName(this.simpleName, tokens[qualificationLength])) {\r", "-\t\t\treturn ACCURATE_MATCH;\r", "-\t\t} else {\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t} else {\r", "-\t\tif (this.simpleName == null) {\r", "-\t\t\treturn ACCURATE_MATCH;\r", "-\t\t} else {\r", "-\t\t\tfor (int i = 0; i < importLength; i++){\r", "-\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])){\r", "-\t\t\t\t\treturn ACCURATE_MATCH;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t}\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8954d758fa50adac975dd65a5baad87", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r private int matchLevel(ImportReference importRef, boolean resolve)", "signatureAfterChange": "\r private boolean matches(ImportReference importRef, boolean resolve)", "diff": ["+ */\r", "+private boolean matches(ImportReference importRef, boolean resolve) {\r", "+\r", "+\tif (importRef.onDemand) return false;\r", "+\r", "+\tchar[][] tokens = importRef.tokens;\r", "+\tint importLength = tokens.length;\r", "+\t\r", "+\tif (this.qualification != null){\r", "+\t\tchar[][] qualificationTokens = CharOperation.splitOn('.', this.qualification);\r", "+\t\tint qualificationLength = qualificationTokens.length;\r", "+\t\tif (qualificationLength+1 > importLength) return false;\r", "+\t\tfor (int i = 0; i < qualificationLength; i++){\r", "+\t\t\tif (!this.matchesName(qualificationTokens[i], tokens[i])) {\r", "+\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (this.simpleName != null \r", "+\t\t\t&& !this.matchesName(this.simpleName, tokens[qualificationLength])) {\r", "+\t\t\treturn false;\r", "+\t\t}\r", "+\t} else {\r", "+\t\tif (this.simpleName != null) {\r", "+\t\t\tfor (int i = 0; i < importLength; i++){\r", "+\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])){\r", "+\t\t\t\t\treturn true;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\treturn false;\r", "+\t\t}\r", "+\t}\r", "+\treturn true;\r", "+}\r", "- */\r", "-private int matchLevel(ImportReference importRef, boolean resolve) {\r", "-\r", "-\tif (importRef.onDemand) return IMPOSSIBLE_MATCH;\r", "-\r", "-\tchar[][] tokens = importRef.tokens;\r", "-\tint importLength = tokens.length;\r", "-\t\r", "-\tif (this.qualification != null){\r", "-\t\tchar[][] qualificationTokens = CharOperation.splitOn('.', this.qualification);\r", "-\t\tint qualificationLength = qualificationTokens.length;\r", "-\t\tif (qualificationLength+1 > importLength) return IMPOSSIBLE_MATCH;\r", "-\t\tfor (int i = 0; i < qualificationLength; i++){\r", "-\t\t\tif (!this.matchesName(qualificationTokens[i], tokens[i])) {\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tif (this.simpleName == null || this.matchesName(this.simpleName, tokens[qualificationLength])) {\r", "-\t\t\treturn ACCURATE_MATCH;\r", "-\t\t} else {\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t} else {\r", "-\t\tif (this.simpleName == null) {\r", "-\t\t\treturn ACCURATE_MATCH;\r", "-\t\t} else {\r", "-\t\t\tfor (int i = 0; i < importLength; i++){\r", "-\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])){\r", "-\t\t\t\t\treturn ACCURATE_MATCH;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t}\r", "-}\r"]}], "num": 24834}
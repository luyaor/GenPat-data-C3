{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "86958863323ba53438e4e9fe70b03428", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b23be7c4eb249337470eebaaf378e71", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized)", "signatureAfterChange": " ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames)", "diff": ["-", "-ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized) {", "+ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames) {", "-", "-\treturn getTypeFromCompoundName(compoundName, isParameterized);", "+\tboolean wasMissingType = false;", "+\tif (missingTypeNames != null) {", "+\t\tfor (int i = 0, max = missingTypeNames.length; i < max; i++) {", "+\t\t\tif (CharOperation.equals(compoundName, missingTypeNames[i])) {", "+\t\t\t\twasMissingType = true;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t}", "+\treturn getTypeFromCompoundName(compoundName, isParameterized, wasMissingType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7396507909dfedbcb090a8b1e77e77dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  ReferenceBinding getTypeFromCompoundName(char[][] compoundName, boolean isParameterized)", "signatureAfterChange": " private ReferenceBinding getTypeFromCompoundName(char[][] compoundName, boolean isParameterized, boolean wasMissingType)", "diff": ["-", "-ReferenceBinding getTypeFromCompoundName(char[][] compoundName, boolean isParameterized) {", "+private ReferenceBinding getTypeFromCompoundName(char[][] compoundName, boolean isParameterized, boolean wasMissingType) {", "-\t\tPackageBinding packageBinding = computePackageFrom(compoundName);", "+\t\tPackageBinding packageBinding = computePackageFrom(compoundName, false /* valid pkg */);", "+\t\tif (wasMissingType) {", "+\t\t\tbinding.tagBits |= TagBits.HasMissingType; // record it was bound to a missing type", "+\t\t}", "+\t\t// report the missing class file first", "+\t\tproblemReporter.isClassPathCorrect(compoundName, this.unitBeingCompleted, this.missingClassFileLocation);\t\t", "-\t\tbinding = cacheMissingBinaryType(compoundName, this.unitBeingCompleted);", "+\t\tbinding = createMissingType(null, compoundName);"]}], "num": 11103}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09c923909d042e21901aab001479c208", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "997a6b63aaa011daf468ae234fc06757", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 14, "signatureBeforeChange": " public TypeBinding resolveSuperType(ClassScope scope)", "signatureAfterChange": "  public TypeBinding resolveSuperType(ClassScope scope)", "diff": ["+", "-\tif (resolveType(scope) == null) return null;", "+\tTypeBinding superType = resolveType(scope);", "+\tif (superType == null) return null;", "-\tif (this.resolvedType.isTypeVariable()) {", "-\t\tthis.resolvedType = new ProblemReferenceBinding(getTypeName(), (ReferenceBinding) this.resolvedType, ProblemReasons.IllegalSuperTypeVariable);", "-\t\treportInvalidType(scope);", "+\tif (superType.isTypeVariable()) {", "+\t\tif (this.resolvedType.isValidBinding()) {", "+\t\t\tthis.resolvedType = new ProblemReferenceBinding(getTypeName(), (ReferenceBinding)this.resolvedType, ProblemReasons.IllegalSuperTypeVariable);", "+\t\t\treportInvalidType(scope);", "+\t\t}", "-\treturn this.resolvedType;", "+\treturn superType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebc377e76d10dd40cd80e3f9e2b739cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "7915a529d4dab8b70a0cdb9189fc342b9112ed8e", "commitAfterChange": "f28c28de6ed3d2e9e475bca36caf25c219a92533", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-    \tif (lhsType == null || !lhsType.isValidBinding()) ", "-\t\t\treturn this.resolvedType = null;", "+    \tif (lhsType == null) ", "+\t\t\treturn this.resolvedType = null; \t// no hope", "+\t\tif (lhsType.problemId() == ProblemReasons.AttemptToBypassDirectSuper)", "+\t\t\tlhsType = lhsType.closestMatch();\t// improve resolving experience", "+    \tif (!lhsType.isValidBinding()) ", "+\t\t\treturn this.resolvedType = null;\t// nope, no useful type found", "-        ", "+    \tif (this.lhs.isSuper() && this.lhs.resolvedType.isInterface()) {", "+    \t\tscope.checkAppropriateMethodAgainstSupers(this.selector, someMethod, this.descriptor.parameters, this);", "+    \t}", "+"]}], "num": 12584}
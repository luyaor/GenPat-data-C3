{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c36d2ff176e85d2fa47e1129bbfdd18", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cc8b2b4daaf72c7a5261a1a2582dbda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 167, "signatureBeforeChange": " \tpublic void test0170_try_catch()", "signatureAfterChange": " public void test0550_try_catch()", "diff": ["-\t// null analysis -- try/catch", "-\tpublic void test0170_try_catch() {", "-\t\t\t\t\"\t void foo() {\\n\" + ", "-\t\t\t\t\"\t\t Object o = null;\\n\" + ", "-\t\t\t\t\"\t\t try {\\n\" + ", "-\t\t\t\t\"\t\t   System.out.println();\\n\" +  // might throw a runtime exception ", "-\t\t\t\t\"\t\t\t o = new Object();\\n\" + ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t\t catch (Throwable t) {\\n\" + // catches everything ", "-\t\t\t\t\"\t\t   return;\\n\" +             // gets out\t\t\t\t\t", "-\t\t\t\t\"\t   }\\n\" + ", "-\t\t\t\t\"\t\t o.toString();\\n\" +         // can't tell if o is null or not  ", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"\"  ", "-\t\t);", "-\t}", "+// null analysis -- try/catch", "+public void test0550_try_catch() {", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  void foo() {\\n\" + ", "+\t\t\t\"    Object o = null;\\n\" + ", "+\t\t\t\"    try {\\n\" + ", "+\t\t\t\"      System.out.println();\\n\" +  // might throw a runtime exception ", "+\t\t\t\"      o = new Object();\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    catch (Throwable t) {\\n\" + // catches everything ", "+\t\t\t\"      return;\\n\" +             // gets out         ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    o.toString();\\n\" +         // non null  ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"\");", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dda65febb70c7326064fb6a01fdd08be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 156, "signatureBeforeChange": " \tpublic void test0152_try_finally()", "signatureAfterChange": " public void test0502_try_finally()", "diff": ["-\t// null analysis -- try/finally", "-\tpublic void test0152_try_finally() {", "-\t\tthis.runNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t void foo() {\\n\" + ", "-\t\t\t\t\"\t\t Object o = null;\\n\" + ", "-\t\t\t\t\"\t\t try {\\n\" + ", "-\t\t\t\t\"\t\t   System.out.println();\\n\" + // might throw a runtime exception ", "-\t\t\t\t\"\t\t\t o = new Object();\\n\" + ", "-\t\t\t\t\"\t\t }\\n\" + ", "-\t\t\t\t\"\t\t finally { /* */ }\\n\" + ", "-\t\t\t\t\"\t\t o.toString();\\n\" + ", "-\t\t\t\t\t\t// still OK because in case of exception this code is ", "-\t\t\t\t\t\t// not reached", "-\t\t\t\t\"\t }\\n\" + ", "-\t\t\t\t\"}\\n\"},", "-\t\t\t\"\"", "-\t\t);", "-\t}", "+// null analysis -- try/finally", "+public void test0502_try_finally() {", "+\tthis.runConformTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  void foo() {\\n\" + ", "+\t\t\t\"    Object o = null;\\n\" + ", "+\t\t\t\"    try {\\n\" + ", "+\t\t\t\"      System.out.println();\\n\" + // might throw a runtime exception ", "+\t\t\t\"      o = new Object();\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    finally { /* */ }\\n\" + ", "+\t\t\t\"    o.toString();\\n\" + ", "+\t\t\t    // still OK because in case of exception this code is ", "+\t\t\t    // not reached", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\"},", "+\t\t\"\");", "+}"]}], "num": 5689}
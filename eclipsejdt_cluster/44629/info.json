{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa77656c76bbbe3fadaf74872bd67594", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a2c89325467653765a3e339adb1f5d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/Indents.java", "commitBeforeChange": "115aa955b9babd8a2ed6e802830c5035a2e2a28f", "commitAfterChange": "c555269f6d77af957f827daf14cfb9a3af0c01ad", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static int computeIndentLength(String line, int numberOfIndents, int tabWidth, int indentWidth)", "signatureAfterChange": " \tpublic static int computeIndentLength(String line, int numberOfIndents, int tabWidth)", "diff": ["-\tpublic static int computeIndentLength(String line, int numberOfIndents, int tabWidth, int indentWidth) {", "+\tpublic static int computeIndentLength(String line, int numberOfIndents, int tabWidth) {", "-\t\tAssert.isTrue(indentWidth >= 0);", "-\t\t", "-\t\tint spaceEquivalents= numberOfIndents * indentWidth;", "-\t\t", "+\t\tint indents= 0;", "-\t\tfor (int i= 0; i < size && blanks < spaceEquivalents; i++) {", "+\t\tfor (int i= 0; i < size && indents < numberOfIndents; i++) {", "-\t\t\t\tint remainder= blanks % tabWidth;", "-\t\t\t\tblanks += tabWidth - remainder;", "+\t\t\t\tindents++;", "+\t\t\t\tresult= i;", "+\t\t\t\tblanks= 0;", "+\t\t\t\tif (blanks == tabWidth) {", "+\t\t\t\t\tresult= i;", "+\t\t\t\t\tindents++;", "+\t\t\t\t\tblanks= 0;", "+\t\t\t\t}", "-\t\t\tresult= i;", "-\t\tif (blanks < spaceEquivalents)", "+\t\tif (indents < numberOfIndents)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f10c1a67f371630ebe757c4956733bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/IndentManipulation.java", "commitBeforeChange": "ee30320ed05f71a30424f51c6bb037a21f240577", "commitAfterChange": "1fb9a788acb6df81a5066976488be3d71b508599", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static String extractIndentString(String line, int tabWidth, int indentWidth)", "signatureAfterChange": " \tpublic static String extractIndentString(String line, int tabWidth, int indentWidth)", "diff": ["-\t\tif (tabWidth < 0 || indentWidth <= 0 || line == null) {", "+\t\tif (tabWidth < 0 || indentWidth < 0 || line == null) {", "-\t\tint size= line.length();", "-\t\tint end= 0;", "+\t\tint size = line.length();", "+\t\tint end = 0;", "-\t\tint spaceEquivs= 0;", "-\t\tint characters= 0;", "-\t\tfor (int i= 0; i < size; i++) {", "-\t\t\tchar c= line.charAt(i);", "+\t\tint spaceEquivs = 0;", "+\t\tint characters = 0;", "+\t\tfor (int i = 0; i < size; i++) {", "+\t\t\tchar c = line.charAt(i);", "-\t\t\t\tint remainder= spaceEquivs % tabWidth;", "-\t\t\t\tspaceEquivs += tabWidth - remainder;", "+\t\t\t\tspaceEquivs = calculateSpaceEquivalents(tabWidth, spaceEquivs);", "-\t\t\t\tcharacters= 0;", "-\t\t\t\tspaceEquivs= spaceEquivs % indentWidth;", "+\t\t\t\tcharacters = 0;", "+\t\t\t\tif(indentWidth == 0) {", "+\t\t\t\t\tspaceEquivs = 0;", "+\t\t\t\t} else {", "+\t\t\t\t\tspaceEquivs = spaceEquivs % indentWidth;", "+\t\t\t\t}"]}], "num": 44629}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "290745bee3bef2a31bcb57bcf9eab717", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d9a6d8e0f0a26872511891b5037f269", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "ee88edc6852ca240266a0a82beb39fc6a3f8a578", "commitAfterChange": "321d0d2c500c247f0447784febbb6a14ba5499be", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 13, "signatureBeforeChange": " private boolean isErasureMethodOverride(ReferenceBinding type, MethodBinding method)", "signatureAfterChange": " private boolean matchOverriddenMethod(ReferenceBinding type, MethodBinding method, MethodBinding matchMethod)", "diff": ["- */", "-private boolean isErasureMethodOverride(ReferenceBinding type, MethodBinding method) {", "-\tif (type == null) return false;", "-", "-\t// matches superclass", "-\tif (!type.isInterface() && !CharOperation.equals(type.compoundName, TypeConstants.JAVA_LANG_OBJECT)) {", "-\t\tReferenceBinding superClass = type.superclass();", "-\t\tif (superClass.isParameterizedType()) {", "-\t\t\tTypeBinding erasure = ((ParameterizedTypeBinding)superClass).erasure();", "-\t\t\tif (erasure instanceof ReferenceBinding) {", "-\t\t\t\tMethodBinding[] methods = superClass.getMethods(this.pattern.selector);", "-\t\t\t\tint length = methods.length;", "-\t\t\t\tfor (int i = 0; i<length; i++) {", "-\t\t\t\t\tif (methods[i].areParametersEqual(method)) return true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (isErasureMethodOverride(superClass, method)) {", "-\t\t\treturn true;", "-\t\t}", "-\t}", "-", "-\t// matches interfaces", "-\tReferenceBinding[] interfaces = type.superInterfaces();", "-\tif (interfaces == null) return false;", "-\tint iLength = interfaces.length;", "-\tfor (int i = 0; i<iLength; i++) {", "-\t\tif (interfaces[i].isParameterizedType()) {", "-\t\t\tTypeBinding erasure = ((ParameterizedTypeBinding)interfaces[i]).erasure();", "-\t\t\tif (erasure instanceof ReferenceBinding) {", "-\t\t\t\tMethodBinding[] methods = ((ReferenceBinding)erasure).getMethods(this.pattern.selector);", "-\t\t\t\tint length = methods.length;", "-\t\t\t\tfor (int j = 0; j<length; j++) {", "-\t\t\t\t\tif (methods[i].areParametersEqual(method)) return true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (isErasureMethodOverride(interfaces[i], method)) {", "-\t\t\treturn true;", "-\t\t}", "-\t}", "-\treturn false;", "+private boolean matchOverriddenMethod(ReferenceBinding type, MethodBinding method, MethodBinding matchMethod) {", "+\tif (type == null) return false;", "+", "+\t// matches superclass", "+\tif (!type.isInterface() && !CharOperation.equals(type.compoundName, TypeConstants.JAVA_LANG_OBJECT)) {", "+\t\tReferenceBinding superClass = type.superclass();", "+\t\tif (superClass.isParameterizedType()) {", "+\t\t\tMethodBinding[] methods = superClass.getMethods(this.pattern.selector);", "+\t\t\tint length = methods.length;", "+\t\t\tfor (int i = 0; i<length; i++) {", "+\t\t\t\tif (methods[i].areParametersEqual(method)) {", "+\t\t\t\t\tif (matchMethod == null) {", "+\t\t\t\t\t\tif (methodParametersEqualsPattern(methods[i].original())) return true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (methods[i].original().areParametersEqual(matchMethod)) return true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (matchOverriddenMethod(superClass, method, matchMethod)) {", "+\t\t\treturn true;", "+\t\t}", "+\t}", "+", "+\t// matches interfaces", "+\tReferenceBinding[] interfaces = type.superInterfaces();", "+\tif (interfaces == null) return false;", "+\tint iLength = interfaces.length;", "+\tfor (int i = 0; i<iLength; i++) {", "+\t\tif (interfaces[i].isParameterizedType()) {", "+\t\t\tMethodBinding[] methods = interfaces[i].getMethods(this.pattern.selector);", "+\t\t\tint length = methods.length;", "+\t\t\tfor (int j = 0; j<length; j++) {", "+\t\t\t\tif (methods[i].areParametersEqual(method)) {", "+\t\t\t\t\tif (matchMethod == null) {", "+\t\t\t\t\t\tif (methodParametersEqualsPattern(methods[i].original())) return true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (methods[i].original().areParametersEqual(matchMethod)) return true;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (matchOverriddenMethod(interfaces[i], method, matchMethod)) {", "+\t\t\treturn true;", "+\t\t}", "+\t}", "+\treturn false;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adef4a599a4cff5d2d043dc199fa442a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java", "commitBeforeChange": "333e183ebe56f659f1083c452edbf2ef4089fa56", "commitAfterChange": "f09e5b387a9b27a1161db6587b5598aa2acd37a0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 2, "signatureBeforeChange": " int matchOverriddenMethod(ReferenceBinding type)", "signatureAfterChange": " private boolean isErasureMethodOverride(ReferenceBinding type, MethodBinding method)", "diff": ["+ */", "+private boolean isErasureMethodOverride(ReferenceBinding type, MethodBinding method) {", "+\tif (type == null) return false;", "+", "+\t// matches superclass", "+\tif (!type.isInterface() && !CharOperation.equals(type.compoundName, TypeConstants.JAVA_LANG_OBJECT)) {", "+\t\tReferenceBinding superClass = type.superclass();", "+\t\tif (superClass.isParameterizedType()) {", "+\t\t\tTypeBinding erasure = ((ParameterizedTypeBinding)superClass).erasure();", "+\t\t\tif (erasure instanceof ReferenceBinding) {", "+\t\t\t\tMethodBinding[] methods = superClass.getMethods(this.pattern.selector);", "+\t\t\t\tint length = methods.length;", "+\t\t\t\tfor (int i = 0; i<length; i++) {", "+\t\t\t\t\tif (methods[i].areParametersEqual(method)) return true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (isErasureMethodOverride(superClass, method)) {", "+\t\t\treturn true;", "+\t\t}", "+\t}", "+", "+\t// matches interfaces", "+\tReferenceBinding[] interfaces = type.superInterfaces();", "+\tif (interfaces == null) return false;", "+\tint iLength = interfaces.length;", "+\tfor (int i = 0; i<iLength; i++) {", "+\t\tif (interfaces[i].isParameterizedType()) {", "+\t\t\tTypeBinding erasure = ((ParameterizedTypeBinding)interfaces[i]).erasure();", "+\t\t\tif (erasure instanceof ReferenceBinding) {", "+\t\t\t\tMethodBinding[] methods = ((ReferenceBinding)erasure).getMethods(this.pattern.selector);", "+\t\t\t\tint length = methods.length;", "+\t\t\t\tfor (int j = 0; j<length; j++) {", "+\t\t\t\t\tif (methods[i].areParametersEqual(method)) return true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (isErasureMethodOverride(interfaces[i], method)) {", "+\t\t\treturn true;", "+\t\t}", "+\t}", "+\treturn false;", "+}", "- */", "-int matchOverriddenMethod(ReferenceBinding type) {", "-\tif (type == null) return INACCURATE_MATCH;", "-\tint level = IMPOSSIBLE_MATCH;", "-", "-\t// matches superclass", "-\tif (!type.isInterface() && !CharOperation.equals(type.compoundName, TypeConstants.JAVA_LANG_OBJECT)) {", "-\t\tif (type.superclass().isParameterizedType()) {", "-\t\t\tTypeBinding erasure = ((ParameterizedTypeBinding)type.superclass()).erasure();", "-\t\t\tif (erasure instanceof ReferenceBinding) {", "-\t\t\t\tMethodBinding[] methods = ((ReferenceBinding)erasure).getMethods(this.pattern.selector);", "-\t\t\t\tint length = methods.length;", "-\t\t\t\tfor (int i = 0; i<length && level == IMPOSSIBLE_MATCH; i++) {", "-\t\t\t\t\tlevel = matchMethod(methods[i]);", "-\t\t\t\t}", "-\t\t\t\tif (level != IMPOSSIBLE_MATCH) return level;", "-\t\t\t}", "-\t\t}", "-\t\tlevel = matchOverriddenMethod(type.superclass());", "-\t\tif (level != IMPOSSIBLE_MATCH) return level;", "-\t}", "-", "-\t// matches interfaces", "-\tReferenceBinding[] interfaces = type.superInterfaces();", "-\tif (interfaces == null) return INACCURATE_MATCH;", "-\tint iLength = interfaces.length;", "-\tfor (int i = 0; i<iLength; i++) {", "-\t\tif (interfaces[i].isParameterizedType()) {", "-\t\t\tTypeBinding erasure = ((ParameterizedTypeBinding)interfaces[i]).erasure();", "-\t\t\tif (erasure instanceof ReferenceBinding) {", "-\t\t\t\tMethodBinding[] methods = ((ReferenceBinding)erasure).getMethods(this.pattern.selector);", "-\t\t\t\tint mLength = methods.length;", "-\t\t\t\tfor (int j = 0; j<mLength && level == IMPOSSIBLE_MATCH; j++) {", "-\t\t\t\t\tlevel = matchMethod(methods[j]);", "-\t\t\t\t}", "-\t\t\t\tif (level != IMPOSSIBLE_MATCH) return level;", "-\t\t\t}", "-\t\t}", "-\t\tlevel = matchOverriddenMethod(interfaces[i]);", "-\t\tif (level != IMPOSSIBLE_MATCH) return level;", "-\t}", "-\treturn IMPOSSIBLE_MATCH;"]}], "num": 54495}
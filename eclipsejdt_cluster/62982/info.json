{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9150f22a83d4b9883cf4bcfb4f1b2054", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07b1cadb852772c26af7dfdb31b729bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Clinit.java", "commitBeforeChange": "bb58594beea7321f1a2a3673bab3e26af89ead20", "commitAfterChange": "7376fb10956e4a03cc528e86b634b5ca73ef755b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate void generateCode( \t\tClassScope classScope, \t\tClassFile classFile, \t\tint clinitOffset)", "signatureAfterChange": " \tprivate void generateCode( \t\tClassScope classScope, \t\tClassFile classFile, \t\tint clinitOffset)", "diff": ["+\t\tBlockScope lastInitializerScope = null;", "-\t\t\tint notEnumConstants = 0;", "+\t\t\tint remainingFieldCount = 0;", "-\t\t\t\t\t\t\tnotEnumConstants++;", "+\t\t\t\t\t\t\tremainingFieldCount++;", "-\t\t\tif (notEnumConstants != 0) {", "+\t\t\tif (remainingFieldCount != 0) {", "-\t\t\t\t\tif (fieldDecl.isStatic() && fieldDecl.getKind() != AbstractVariableDeclaration.ENUM_CONSTANT) {", "-\t\t\t\t\t\tfieldDecl.generateCode(staticInitializerScope, codeStream);", "+\t\t\t\t\tswitch (fieldDecl.getKind()) {", "+\t\t\t\t\t\tcase AbstractVariableDeclaration.ENUM_CONSTANT :", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase AbstractVariableDeclaration.INITIALIZER :", "+\t\t\t\t\t\t\tif (!fieldDecl.isStatic()) ", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tlastInitializerScope = ((Initializer) fieldDecl).block.scope;", "+\t\t\t\t\t\t\tfieldDecl.generateCode(staticInitializerScope, codeStream);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase AbstractVariableDeclaration.FIELD :", "+\t\t\t\t\t\t\tif (!fieldDecl.binding.isStatic()) ", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tlastInitializerScope = null;", "+\t\t\t\t\t\t\tfieldDecl.generateCode(staticInitializerScope, codeStream);", "+\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\tif (fieldDecl.isStatic()) {", "-\t\t\t\t\t\tfieldDecl.generateCode(staticInitializerScope, codeStream);", "+\t\t\t\t\tswitch (fieldDecl.getKind()) {", "+\t\t\t\t\t\tcase AbstractVariableDeclaration.INITIALIZER :", "+\t\t\t\t\t\t\tif (!fieldDecl.isStatic()) ", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tlastInitializerScope = ((Initializer) fieldDecl).block.scope;", "+\t\t\t\t\t\t\tfieldDecl.generateCode(staticInitializerScope, codeStream);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase AbstractVariableDeclaration.FIELD :", "+\t\t\t\t\t\t\tif (!fieldDecl.binding.isStatic()) ", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tlastInitializerScope = null;", "+\t\t\t\t\t\t\tfieldDecl.generateCode(staticInitializerScope, codeStream);", "+\t\t\t\t\t\t\tbreak;", "-\t\t\t\tint oldPosition = codeStream.position;", "+\t\t\t\tint before = codeStream.position;", "-\t\t\t\tcodeStream.updateLocalVariablesAttribute(oldPosition);", "+\t\t\t\tif (lastInitializerScope != null) {", "+\t\t\t\t\t// expand the last initializer variables to include the trailing return", "+\t\t\t\t\tcodeStream.updateLastRecordedEndPC(lastInitializerScope, before);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1d08d258435c9996568de8c287e7eda", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "080a42c1d10403c7486b8cde9973df6dc09a8d9d", "commitAfterChange": "be2396778954f7686c95a2d45b5130702d13bfe1", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tprivate void format(TypeDeclaration typeDeclaration)", "signatureAfterChange": "  \tprivate void format(TypeDeclaration typeDeclaration)", "diff": ["-\t\t\t\tloop: for (int i = 0; i < length; i++) {", "+\t\t\t\tint enumConstantsLength = 0;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tif (fieldDeclaration.getKind() != AbstractVariableDeclaration.ENUM_CONSTANT) {", "-\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\tif (fieldDeclaration.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\t\tenumConstantsLength++;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\tif (i < length) {", "-\t\t\t\t\t\thasConstants = true;", "-\t\t\t\t\t\tfieldDeclaration.traverse(this, typeDeclaration.initializerScope);", "-\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\thasConstants = enumConstantsLength != 0;", "+\t\t\t\tif (enumConstantsLength > 1) {", "+\t\t\t\t\tAlignment enumConstantsAlignment = this.scribe.createAlignment(", "+\t\t\t\t\t\t\t\"enumConstants\",//$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.preferences.alignment_for_enum_constants,", "+\t\t\t\t\t\t\tenumConstantsLength,", "+\t\t\t\t\t\t\tthis.scribe.scanner.currentPosition,", "+\t\t\t\t\t\t\t0, // we don't want to indent enum constants when splitting to a new line", "+\t\t\t\t\t\t\tfalse);", "+\t\t\t\t\tthis.scribe.enterAlignment(enumConstantsAlignment);", "+\t\t\t\t\tboolean ok = false;", "+\t\t\t\t\tdo {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tfor (int i = 0; i < enumConstantsLength; i++) {", "+\t\t\t\t\t\t\t\tthis.scribe.alignFragment(enumConstantsAlignment, i);", "+\t\t\t\t\t\t\t\tFieldDeclaration fieldDeclaration = fieldDeclarations[i];", "+\t\t\t\t\t\t\t\tfieldDeclaration.traverse(this, typeDeclaration.initializerScope);", "+\t\t\t\t\t\t\t\tif (isNextToken(TerminalTokens.TokenNameCOMMA)) {", "+\t\t\t\t\t\t\t\t\tthis.scribe.printNextToken(TerminalTokens.TokenNameCOMMA, this.preferences.insert_space_before_comma_in_enum_declarations);", "+\t\t\t\t\t\t\t\t\tif (this.preferences.insert_space_after_comma_in_enum_declarations) {", "+\t\t\t\t\t\t\t\t\t\tthis.scribe.space();", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tthis.scribe.printTrailingComment();", "+\t\t\t\t\t\t\t\t\tif (fieldDeclaration.initialization instanceof QualifiedAllocationExpression) {", "+\t\t\t\t\t\t\t\t\t\tthis.scribe.printNewLine();", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tok = true;", "+\t\t\t\t\t\t} catch (AlignmentException e) {", "+\t\t\t\t\t\t\tthis.scribe.redoAlignment(e);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} while (!ok);", "+\t\t\t\t\tthis.scribe.exitAlignment(enumConstantsAlignment, true);", "+\t\t\t\t} else {", "+\t\t\t\t\tFieldDeclaration fieldDeclaration = fieldDeclarations[0];", "+\t\t\t\t\tfieldDeclaration.traverse(this, typeDeclaration.initializerScope);", "-\t\t\t\t}\t\t\t", "+\t\t\t\t}"]}], "num": 62982}
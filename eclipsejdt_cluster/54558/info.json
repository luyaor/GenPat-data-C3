{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6cc55bd156b79bea393c44bc33932251", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f2773002c50b2fa97e30450f8721ba4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java", "commitBeforeChange": "b6b8c5d56c52da04a602fb9a065023d943b4e7a7", "commitAfterChange": "f8cf1cf93993a2a964d587ccb545506c0c4fdc0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(MethodDeclaration methodDeclaration, ClassScope scope)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(TypeParameter typeParameter, ClassScope scope)", "diff": ["+", "+\t@Override", "+\tpublic boolean visit(TypeParameter typeParameter, ClassScope scope) {", "+\t\tAnnotation[] annotations = typeParameter.annotations;", "+\t\tif (annotations != null) {", "+\t\t\tTypeVariableBinding binding = typeParameter.binding;", "+\t\t\tif (binding == null) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tthis.resolveAnnotations(scope.referenceContext.initializerScope, annotations, binding);", "+\t\t}", "+\t\treturn false;", "+\t}", "-", "-\t\tArgument[] arguments = methodDeclaration.arguments;", "-\t\tif (arguments != null) {", "-\t\t\tint argumentLength = arguments.length;", "-\t\t\tfor (int i = 0; i < argumentLength; i++) {", "-\t\t\t\targuments[i].traverse(this, methodDeclaration.scope);", "-\t\t\t}", "-\t\t}", "-\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23e0886cd4fd20dafde432e27c337d96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "4605f993bb123a9187b7d6cf100f3cd705b1424a", "commitAfterChange": "49d173b6a20e491492d309e521a8df899e49ca65", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "signatureAfterChange": "  \tprivate Object reduceSubType(Scope scope, TypeBinding subCandidate, TypeBinding superCandidate)", "diff": ["-\t\t\tcase Binding.RAW_TYPE: // TODO: check special handling of raw types?", "+\t\t\tcase Binding.RAW_TYPE:", "-\t\t\t\t\tReferenceBinding c = (ReferenceBinding) superCandidate;", "-\t\t\t\t\t\tReferenceBinding s = (ReferenceBinding) subCandidate;", "-\t\t\t\t\t\tif (TypeBinding.equalsEquals(s.original(), c))", "+\t\t\t\t\t\tif (hasSuperType((ReferenceBinding) subCandidate, (ReferenceBinding) superCandidate))", "-\t\t\t\t\t\tif (TypeBinding.equalsEquals(s.superclass(), c))", "-\t\t\t\t\t\t\treturn TRUE;", "-\t\t\t\t\t\tReferenceBinding[] superInterfaces = s.superInterfaces();", "-\t\t\t\t\t\tif (superInterfaces != null) {", "-\t\t\t\t\t\t\tfor (int i=0, l=superInterfaces.length; i<l; i++)", "-\t\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(superInterfaces[i], c))", "-\t\t\t\t\t\t\t\t\treturn TRUE;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// (Note: this is not explicit in the spec but has been confirmed on the EG list, see:", "-\t\t\t\t\t\t//  http://mail.openjdk.java.net/pipermail/lambda-spec-experts/2013-December/000449.html )."]}], "num": 54558}
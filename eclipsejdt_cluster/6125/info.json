{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b83ef8633c7587887d0f592eba9cea85", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f8867bd8869e61020a7d92d85a4e7de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "c32f4faa0e0e05b7548ab150030a448443121451", "commitAfterChange": "6a5c512cff72c8d122f75160d7a3ca9f79b312ee", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tprivate void findFieldsAndMethods( \t\tchar[] token, \t\tTypeBinding receiverType, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall)", "signatureAfterChange": "  \tprivate void findFieldsAndMethods( \t\tchar[] token, \t\tTypeBinding receiverType, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall)", "diff": ["-", "+\t\t", "+\t\tObjectVector methodsFound = new ObjectVector();", "+\t\t", "+\t\t\tif (token.length <= cloneMethod.length", "+\t\t\t\t&& CharOperation.prefixEquals(token, cloneMethod, false /* ignore case */", "+\t\t\t)) {", "+\t\t\t\tReferenceBinding objectRef = scope.getJavaLangObject();", "+\t\t\t\t", "+\t\t\t\tint relevance = computeBaseRelevance();", "+\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "+\t\t\t\trelevance += computeRelevanceForCaseMatching(token, cloneMethod);", "+\t\t\t\trelevance += computeRelevanceForExpectingType(objectRef);", "+\t\t\t\trelevance += computeRelevanceForStatic(false, false);", "+\t\t\t\trelevance += computeRelevanceForQualification(false);", "+\t\t\t\t", "+\t\t\t\tchar[] completion;", "+\t\t\t\tif (source != null", "+\t\t\t\t\t&& source.length > endPosition", "+\t\t\t\t\t&& source[endPosition] == '(') {", "+\t\t\t\t\tcompletion = cloneMethod;", "+\t\t\t\t\t} else {", "+\t\t\t\t\tcompletion = CharOperation.concat(cloneMethod, new char[] { '(', ')' });", "+\t\t\t\t}", "+\t\t\t\tnoProposal = false;", "+\t\t\t\trequestor.acceptMethod(", "+\t\t\t\t\tCharOperation.NO_CHAR,", "+\t\t\t\t\tCharOperation.NO_CHAR,", "+\t\t\t\t\tcloneMethod,", "+\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\tCharOperation.concat(JAVA, LANG, '.'),", "+\t\t\t\t\tOBJECT,", "+\t\t\t\t\tcompletion,", "+\t\t\t\t\tIConstants.AccPublic,", "+\t\t\t\t\tstartPosition - offset,", "+\t\t\t\t\tendPosition - offset,", "+\t\t\t\t\trelevance);", "+\t\t\t\t\t", "+\t\t\t\tmethodsFound.add(new Object[]{objectRef.getMethods(cloneMethod)[0], objectRef});", "+\t\t\t}", "+\t\t\t", "-\t\t\tnew ObjectVector(),", "+\t\t\tmethodsFound,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ace121144845435c406d111ca1f28a12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "0328928ec6e943d2d976356cfda47a4325798cf6", "commitAfterChange": "f53fc12a4e16e7e99a89753f24ef3e0e0388e214", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "  \tprivate void findTypesAndSubpackages( \t\tchar[] token, \t\tPackageBinding packageBinding)", "signatureAfterChange": "  \tprivate void findTypesAndSubpackages( \t\tchar[] token, \t\tPackageBinding packageBinding)", "diff": ["+\t\t", "+\t\tif (unitScope != null) {", "+\t\t\tint typeLength = qualifiedName.length;", "+\t\t\tSourceTypeBinding[] types = unitScope.topLevelTypes;", "+", "+\t\t\tfor (int i = 0, length = types.length; i < length; i++) {", "+\t\t\t\tSourceTypeBinding sourceType = types[i]; ", "+\t", "+\t\t\t\tchar[] qualifiedSourceTypeName = CharOperation.concatWith(sourceType.compoundName, '.');", "+\t\t\t\t", "+\t\t\t\tif (typeLength > qualifiedSourceTypeName.length)\tcontinue;", "+\t\t\t\tif (!CharOperation.prefixEquals(qualifiedName, qualifiedSourceTypeName, false))\tcontinue;", "+", "+\t\t\t\tint relevance = computeBaseRelevance();", "+\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "+\t\t\t\trelevance += computeRelevanceForCaseMatching(qualifiedName, qualifiedSourceTypeName);", "+\t\t\t\trelevance += computeRelevanceForExpectingType(sourceType);", "+\t\t\t\trelevance += computeRelevanceForQualification(false);", "+", "+\t\t\t\tif (sourceType.isClass()){", "+\t\t\t\t\trelevance += computeRelevanceForClass();", "+\t\t\t\t\trelevance += computeRelevanceForException(sourceType.sourceName);", "+\t\t\t\t\trequestor.acceptClass(", "+\t\t\t\t\t\tsourceType.qualifiedPackageName(),", "+\t\t\t\t\t\tsourceType.sourceName(),", "+\t\t\t\t\t\tsourceType.sourceName(),", "+\t\t\t\t\t\tsourceType.modifiers,", "+\t\t\t\t\t\tstartPosition - offset, ", "+\t\t\t\t\t\tendPosition - offset,", "+\t\t\t\t\t\trelevance);", "+\t\t\t\t} else {", "+\t\t\t\t\trelevance += computeRelevanceForInterface();", "+\t\t\t\t\trequestor.acceptInterface(", "+\t\t\t\t\t\tsourceType.qualifiedPackageName(),", "+\t\t\t\t\t\tsourceType.sourceName(),", "+\t\t\t\t\t\tsourceType.sourceName(),", "+\t\t\t\t\t\tsourceType.modifiers,", "+\t\t\t\t\t\tstartPosition - offset,", "+\t\t\t\t\t\tendPosition - offset,", "+\t\t\t\t\t\trelevance);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t"]}], "num": 6125}
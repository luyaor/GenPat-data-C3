{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bdec9458db010cd43140251c340b316e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "158bc5c328b4505534c5893caca17f85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "c9b530e01318c4f59e9e7828de1da4c97f8fe89e", "commitAfterChange": "69656daba7331091b482d7c6b3e675c144730396", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t\t \tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": " \t\t \tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "diff": ["+\t\t\t} else {", "+\t\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\t\tcase AST.JLS2_INTERNAL :", "+\t\t\t\t\t\tmethodDecl.setFlags(methodDecl.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\t\tmethodDecl.setReturnType2(null);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f6bb64048bb1048e82d57da57219b13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "c0d8ddbb4b72e166c7dc81eb807bc47fd1beaa74", "commitAfterChange": "eba08540864c5a072bab6eda44e20e08ad2dd7a0", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic ASTNode convert(boolean isInterface, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": "  \tpublic ASTNode convert(boolean isInterface, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "diff": ["+", "+\t\tif (methodDeclaration.receiver != null) {", "+\t\t\tif(this.ast.apiLevel >= AST.JLS8) {", "+\t\t\t\tconvertAndSetReceiver(methodDeclaration, methodDecl);", "+\t\t\t} else {", "+\t\t\t\tmethodDecl.setFlags(methodDecl.getFlags() | ASTNode.MALFORMED);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ee41fdafef1f29ee13985fa7c46580f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic SingleVariableDeclaration convert(org.eclipse.jdt.internal.compiler.ast.Argument argument)", "signatureAfterChange": " \t \tpublic SingleVariableDeclaration convert(org.eclipse.jdt.internal.compiler.ast.Argument argument)", "diff": ["+\t", "+\tpublic SingleVariableDeclaration convert(org.eclipse.jdt.internal.compiler.ast.Argument argument) {", "+\t\tSingleVariableDeclaration variableDecl = this.ast.newSingleVariableDeclaration();", "+\t\tif ((argument.modifiers & CompilerModifiers.AccJustFlag) != 0) {", "+\t\t\tsetModifiers(variableDecl, argument);", "+\t\t}", "+\t\tSimpleName name = this.ast.newSimpleName(new String(argument.name));", "+\t\tint start = argument.sourceStart;", "+\t\tint nameEnd = argument.sourceEnd;", "+\t\tname.setSourceRange(start, nameEnd - start + 1);", "+\t\tvariableDecl.setName(name);", "+\t\tfinal int extraDimensions = retrieveExtraDimension(nameEnd + 1, argument.type.sourceEnd);", "+\t\tvariableDecl.setExtraDimensions(extraDimensions);", "+\t\tType type = convertType(argument.type);", "+\t\tint typeEnd = type.getStartPosition() + type.getLength() - 1;", "+\t\tint rightEnd = Math.max(typeEnd, argument.declarationSourceEnd);", "+\t\t/*", "+\t\t * There is extra work to do to set the proper type positions", "+\t\t * See PR http://bugs.eclipse.org/bugs/show_bug.cgi?id=23284", "+\t\t */", "+\t\tsetTypeForSingleVariableDeclaration(variableDecl, type, extraDimensions);", "+\t\tvariableDecl.setSourceRange(argument.declarationSourceStart, rightEnd - argument.declarationSourceStart + 1);", "+\t\tif (argument.isVarArgs) {", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\tvariableDecl.setFlags(variableDecl.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\tvariableDecl.setVarargs(true);", "+\t\t}", "+\t\tif (this.resolveBindings) {", "+\t\t\trecordNodes(name, argument);", "+\t\t\trecordNodes(variableDecl, argument);", "+\t\t\tvariableDecl.resolveBinding();", "+\t\t}", "+\t\treturn variableDecl;", "+\t}", "-\tpublic SingleVariableDeclaration convert(org.eclipse.jdt.internal.compiler.ast.Argument argument) {", "-\t\tSingleVariableDeclaration variableDecl = this.ast.newSingleVariableDeclaration();", "-\t\tvariableDecl.setModifiers(argument.modifiers);", "-\t\tSimpleName name = this.ast.newSimpleName(new String(argument.name));", "-\t\tint start = argument.sourceStart;", "-\t\tint nameEnd = argument.sourceEnd;", "-\t\tname.setSourceRange(start, nameEnd - start + 1);", "-\t\tvariableDecl.setName(name);", "-\t\tfinal int extraDimensions = retrieveExtraDimension(nameEnd + 1, argument.type.sourceEnd);", "-\t\tvariableDecl.setExtraDimensions(extraDimensions);", "-\t\tType type = convertType(argument.type);", "-\t\tint typeEnd = type.getStartPosition() + type.getLength() - 1;", "-\t\tint rightEnd = Math.max(typeEnd, argument.declarationSourceEnd);", "-\t\t/*", "-\t\t * There is extra work to do to set the proper type positions", "-\t\t * See PR http://bugs.eclipse.org/bugs/show_bug.cgi?id=23284", "-\t\t */", "-\t\tsetTypeForSingleVariableDeclaration(variableDecl, type, extraDimensions);", "-\t\tvariableDecl.setSourceRange(argument.declarationSourceStart, rightEnd - argument.declarationSourceStart + 1);", "-\t\tif (this.resolveBindings) {", "-\t\t\trecordNodes(name, argument);", "-\t\t\trecordNodes(variableDecl, argument);", "-\t\t\tvariableDecl.resolveBinding();", "-\t\t}", "-\t\treturn variableDecl;", "-\t}"]}], "num": 52774}
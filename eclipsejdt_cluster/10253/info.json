{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d922d5546971d33b547daefb12523eb7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b3a00f414d38d95aaf3d3c66a210625", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "3b79f63e00cbebb1fe326313cd6905bd51bae92d", "commitAfterChange": "b12df142e152c773f1c1ff7b21405d32743abd50", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t} else if( (this.receiver.isSuper()) || codegenBinding.isPrivate()){", "+\t\t} else if((this.receiver.isSuper()) || codegenBinding.isPrivate()){", "+\t\t} else if (constantPoolDeclaringClass.isInterface()) { // interface or annotation type", "+\t\t\tcodeStream.invoke(Opcodes.OPC_invokeinterface, codegenBinding, constantPoolDeclaringClass);", "-\t\t\tif (constantPoolDeclaringClass.isInterface()) { // interface or annotation type", "-\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokeinterface, codegenBinding, constantPoolDeclaringClass);", "-\t\t\t} else {", "-\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokevirtual, codegenBinding, constantPoolDeclaringClass);", "-\t\t\t}", "+\t\t\tcodeStream.invoke(Opcodes.OPC_invokevirtual, codegenBinding, constantPoolDeclaringClass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f62952cc6bf46a8eea946b1f603cc54a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java", "commitBeforeChange": "c6b0ba0798e3e5869080431aec1d46cb3df138ed", "commitAfterChange": "0d803de6a1e9319f8fcdd3fdf5273a7bd463073e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean compoundAssignment)", "signatureAfterChange": "  \tpublic FlowInfo analyseAssignment( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo, \t\tAssignment assignment, \t\tboolean compoundAssignment)", "diff": ["-\t\t} else {", "-\t\t\treturn assignment", "-\t\t\t\t.expression", "-\t\t\t\t.analyseCode(", "-\t\t\t\t\tcurrentScope,", "-\t\t\t\t\tflowContext,", "-\t\t\t\t\tanalyseCode(currentScope, flowContext, flowInfo).unconditionalInits())", "-\t\t\t\t.unconditionalInits();", "+\t\treturn assignment", "+\t\t\t.expression", "+\t\t\t.analyseCode(", "+\t\t\t\tcurrentScope,", "+\t\t\t\tflowContext,", "+\t\t\t\tanalyseCode(currentScope, flowContext, flowInfo).unconditionalInits())", "+\t\t\t.unconditionalInits();"]}], "num": 10253}
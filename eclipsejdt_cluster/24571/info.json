{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f6362c364ec7cf7e2ccce538705f3f6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a33406b527f9daa7f5b06e2d19567ab", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceTests.java", "commitBeforeChange": "4d4e17b21e8cd2e718905d1f6af33dcc6796501f", "commitAfterChange": "a6a5866450241565c9a2db7e59a81c5e9f3105c8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprivate void setUpFullSourceWorkspace() throws IOException, CoreException", "signatureAfterChange": " \tprivate static void setUpFullSourceWorkspace() throws IOException, CoreException", "diff": ["-\t", "-\tprivate void setUpFullSourceWorkspace() throws IOException, CoreException {", "-\t\tString fullSourceZipPath = getPluginDirectoryPath() + File.separator + \"full-source-R3_0.zip\";", "+\t */", "+\tprivate static void setUpFullSourceWorkspace() throws IOException, CoreException {", "-\t\tfinal String targetWorkspacePath = workspaceRoot.getLocation().toFile().getCanonicalPath();", "+\t\tif (workspaceRoot.getProjects().length == 0) {", "+\t\t\tString fullSourceZipPath = getPluginDirectoryPath() + File.separator + \"full-source-R3_0.zip\";", "+\t\t\tfinal String targetWorkspacePath = workspaceRoot.getLocation().toFile().getCanonicalPath();", "+", "+\t\t\tif (DEBUG) System.out.print(\"Unzipping \"+fullSourceZipPath+\"...\");", "+\t\t\tUtil.unzip(fullSourceZipPath, targetWorkspacePath);", "-\t\tUtil.unzip(fullSourceZipPath, targetWorkspacePath);", "-\t\t", "+\t\t\tworkspace.run(new IWorkspaceRunnable() {", "+\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "+\t\t\t\t\tFile targetWorkspaceDir = new File(targetWorkspacePath);", "+\t\t\t\t\tString[] projectNames = targetWorkspaceDir.list();", "+\t\t\t\t\tfor (int i = 0, length = projectNames.length; i < length; i++) {", "+\t\t\t\t\t\tString projectName = projectNames[i];", "+\t\t\t\t\t\tif (\".metadata\".equals(projectName)) continue;", "+\t\t\t\t\t\tIProject project = workspaceRoot.getProject(projectName);", "+\t\t\t\t\t\tproject.create(monitor);", "+\t\t\t\t\t\tproject.open(monitor);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}, null);", "+\t\t\tif (DEBUG) System.out.println(\"done!\");", "+\t\t}", "-\t\tworkspace.run(new IWorkspaceRunnable() {", "-\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "-\t\t\t\tFile targetWorkspaceDir = new File(targetWorkspacePath);", "-\t\t\t\tString[] projectNames = targetWorkspaceDir.list();", "-\t\t\t\tfor (int i = 0, length = projectNames.length; i < length; i++) {", "-\t\t\t\t\tString projectName = projectNames[i];", "-\t\t\t\t\tif (\".metadata\".equals(projectName)) continue;", "-\t\t\t\t\tIProject project = workspaceRoot.getProject(projectName);", "-\t\t\t\t\tproject.create(monitor);", "-\t\t\t\t\tproject.open(monitor);", "+\t\t// workaround bug 73253 Project references not set on project open ", "+\t\tif (DEBUG) System.out.print(\"Set projects classpaths...\");", "+\t\tALL_PROJECTS = JavaCore.create(workspaceRoot).getJavaProjects();", "+\t\tint length = ALL_PROJECTS.length;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tALL_PROJECTS[i].setRawClasspath(ALL_PROJECTS[i].getRawClasspath(), null);", "+\t\t}", "+\t\tif (DEBUG) System.out.println(\"done!\");", "+\t}", "-\t\t}, null);", "-\t\t", "-\t\t// workaround bug 73253 Project references not set on project open ", "-\t\tIJavaProject[] projects = JavaCore.create(workspaceRoot).getJavaProjects();", "-\t\tfor (int i = 0, length = projects.length; i < length; i++) {", "-\t\t\tprojects[i].setRawClasspath(projects[i].getRawClasspath(), null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f4a5449e9deed2364998df65d71877c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "376cf3e1a3637f0d6698064b8aa139e3173f12de", "commitAfterChange": "15d76232d8d0f6d3d473493e1ebc4002775a58d1", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \r private SimpleLookupTable findDeltas()", "signatureAfterChange": "\r \r private SimpleLookupTable findDeltas()", "diff": ["-\tSimpleLookupTable deltas = new SimpleLookupTable(binaryResources.elementSize + 1);\r", "+\tSimpleLookupTable deltas = new SimpleLookupTable(3);\r", "-\t\tdeltas.put(currentProject, delta);\r", "+\t\tif (delta.getKind() != IResourceDelta.NO_CHANGE) {\r", "+\t\t\tif (DEBUG)\r", "+\t\t\t\tSystem.out.println(\"Found source delta for: \" + currentProject.getName()); //$NON-NLS-1$\r", "+\t\t\tdeltas.put(currentProject, delta);\r", "+\t\t}\r", "-\t\t\tif (!lastState.isStructurallyChanged(p, getLastState(p))) { // see if we can skip its delta\r", "-\t\t\t\tIResource[] binaryResources = (IResource[]) valueTable[i];\r", "-\t\t\t\tif (binaryResources.length <= 1)\r", "+\t\t\tState s = getLastState(p);\r", "+\t\t\tif (!lastState.isStructurallyChanged(p, s)) { // see if we can skip its delta\r", "+\t\t\t\tif (s.wasNoopBuild())\r", "+\t\t\t\t\tcontinue nextProject; // project has no source folders and can be skipped\r", "+\t\t\t\tIResource[] classFoldersAndJars = (IResource[]) valueTable[i];\r", "+\t\t\t\tif (classFoldersAndJars.length <= 1)\r", "-\t\t\t\tbinaryResources[0] = null; // skip the output folder\r", "+\t\t\t\tclassFoldersAndJars[0] = null; // skip the output folder\r", "-\t\t\t\tdeltas.put(p, delta);\r", "+\t\t\t\tif (delta.getKind() != IResourceDelta.NO_CHANGE) {\r", "+\t\t\t\t\tif (DEBUG)\r", "+\t\t\t\t\t\tSystem.out.println(\"Found binary delta for: \" + p.getName()); //$NON-NLS-1$\r", "+\t\t\t\t\tdeltas.put(p, delta);\r", "+\t\t\t\t}\r"]}], "num": 24571}
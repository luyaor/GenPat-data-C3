{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f21d9aeef0fb0ba7df047f9b7effea8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37525b4b0c502118c3a869b3c34e6c4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "3664f2e5df4bff13b2fab22de56e1095b2708757", "commitAfterChange": "ed98b88c58c662fd70b64e54eaa4fe98936833aa", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 58, "signatureBeforeChange": "  \tpublic boolean isBoxingCompatibleWith(TypeBinding type, TypeBinding otherType)", "signatureAfterChange": "  \tpublic boolean isBoxingCompatibleWith(TypeBinding left, TypeBinding right)", "diff": ["-\tpublic boolean isBoxingCompatibleWith(TypeBinding type, TypeBinding otherType) {", "-\t\tif (environment().options.sourceLevel < JDK1_5) ", "-\t\t\treturn false;", "-\t\treturn type.isBaseType() != otherType.isBaseType()", "-\t\t\t&& computeBoxingType(type).isCompatibleWith(otherType);", "+\tpublic boolean isBoxingCompatibleWith(TypeBinding left, TypeBinding right) {", "+\t\treturn left.isBaseType() != right.isBaseType() && environment().isBoxingCompatibleWith(left, right);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ff7377ac8f18279d44165a9fc07e627", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "01ebdd7bcd2ae1972ae7d5e4a984275dc87ac438", "commitAfterChange": "aadcbada3565ca5c1f8409c3a998274bdc1a12f3", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "  \tpublic boolean isBoxingCompatibleWith(TypeBinding expressionType, TypeBinding methodType)", "signatureAfterChange": "  \tpublic boolean isBoxingCompatibleWith(TypeBinding type, TypeBinding otherType)", "diff": ["-\tpublic boolean isBoxingCompatibleWith(TypeBinding expressionType, TypeBinding methodType) {", "-\t\treturn expressionType.isBaseType() != methodType.isBaseType()", "-\t\t\t&& computeBoxingType(expressionType).isCompatibleWith(methodType);", "+\tpublic boolean isBoxingCompatibleWith(TypeBinding type, TypeBinding otherType) {", "+\t\treturn type.isBaseType() != otherType.isBaseType()", "+\t\t\t&& computeBoxingType(type).isCompatibleWith(otherType);"]}], "num": 62224}
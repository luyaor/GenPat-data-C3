{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e4e3f1b09233dcb08721a69ae41b1194", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cd9d5e52da104524d5c5b1874360144", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "9fb0bbe2a3801102d42dc2cab72c635ae1849ea0", "commitAfterChange": "906658ef6f48da220e1774c79e394ded35878c9f", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " protected void consumeBinaryExpression(int op)", "signatureAfterChange": " protected void consumeBinaryExpression(int op)", "diff": ["+\t\t\t\t\tint numberOfParens = (expr1.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;", "+\t\t\t\t\t\tif (numberOfParens != 0) {", "+\t\t\t\t\t\t\t// clear the bits on cursor and put them back on cursor.left", "+\t\t\t\t\t\t\tcursor.bits &= ~ASTNode.ParenthesizedMASK;", "+\t\t\t\t\t\t\tcursor.left.bits &= ~ASTNode.ParenthesizedMASK;", "+\t\t\t\t\t\t\tcursor.left.bits |= numberOfParens << ASTNode.ParenthesizedSHIFT;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (numberOfParens != 0) {", "+\t\t\t\t\t\t\t// clear the bits on cursor and put them back on cursor.left", "+\t\t\t\t\t\t\tcursor.bits &= ~ASTNode.ParenthesizedMASK;", "+\t\t\t\t\t\t\tcursor.left.bits &= ~ASTNode.ParenthesizedMASK;", "+\t\t\t\t\t\t\tcursor.left.bits |= numberOfParens << ASTNode.ParenthesizedSHIFT;", "+\t\t\t\t\t\t}", "-\t\t\t} else if (expr1 instanceof BinaryExpression && ", "-\t\t\t\t\t\t\t// single out the a + b case", "-\t\t\t\t\t\t((expr1.bits & ASTNode.OperatorMASK) >> ", "+\t\t\t} else if (expr1 instanceof BinaryExpression", "+\t\t\t\t\t&& ((expr1.bits & ASTNode.OperatorMASK) >> ", "+\t\t\t\t// single out the a + b case", "-\t\t\t\t\top);\t\t", "+\t\t\t\t\top);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db5befabc5b0940c0b73be1051353552", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "646aa5ecb536b7e9ff4fed634622c7786b50bf41", "commitAfterChange": "25e24dc0b5df8ee9c07cfac971fa5e561f586699", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \t \tpublic Expression convert(BinaryExpression expression)", "signatureAfterChange": " \t \tpublic Expression convert(BinaryExpression expression)", "diff": ["-\t\tif (expression.left instanceof BinaryExpression && !checkForParenthesis(expression.left)) {", "+\t\tif (expression.left instanceof BinaryExpression && ((expression.left.bits & AstNode.ParenthesizedMASK) == 0)) {", "-\t\t\t\tif ((((leftOperand.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) != expressionOperatorID && !checkForParenthesis(leftOperand))", "-\t\t\t\t || ((rightOperand instanceof BinaryExpression && ((rightOperand.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) != expressionOperatorID) && !checkForParenthesis(rightOperand))) {", "+\t\t\t\tif ((((leftOperand.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) != expressionOperatorID && ((leftOperand.bits & AstNode.ParenthesizedMASK) == 0))", "+\t\t\t\t || ((rightOperand instanceof BinaryExpression && ((rightOperand.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) != expressionOperatorID) && ((rightOperand.bits & AstNode.ParenthesizedMASK) == 0))) {", "-\t\t\t} while (leftOperand instanceof BinaryExpression && !(checkForParenthesis(leftOperand)));", "+\t\t\t} while (leftOperand instanceof BinaryExpression && ((leftOperand.bits & AstNode.ParenthesizedMASK) == 0));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f60a6f745df2cfa30260591600835707", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "8b532c89fe75cdcd516dedb1f57b44f4fab79fb0", "commitAfterChange": "14eef462fbaf0bab3c247296c2a42a1fdc4f58a6", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \t \tpublic Expression convert(BinaryExpression expression)", "signatureAfterChange": " \t \tpublic Expression convert(BinaryExpression expression)", "diff": ["-\t\tint expressionOperatorID = (expression.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT;", "+\t\tint expressionOperatorID = (expression.bits & AstNode.OperatorMASK) >> AstNode.OperatorSHIFT;", "-\t\t\t\tif ((((leftOperand.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) != expressionOperatorID && ((leftOperand.bits & AstNode.ParenthesizedMASK) == 0))", "-\t\t\t\t || ((rightOperand instanceof BinaryExpression && ((rightOperand.bits & OperatorExpression.OperatorMASK) >> OperatorExpression.OperatorSHIFT) != expressionOperatorID) && ((rightOperand.bits & AstNode.ParenthesizedMASK) == 0))) {", "+\t\t\t\tif ((((leftOperand.bits & AstNode.OperatorMASK) >> AstNode.OperatorSHIFT) != expressionOperatorID && ((leftOperand.bits & AstNode.ParenthesizedMASK) == 0))", "+\t\t\t\t || ((rightOperand instanceof BinaryExpression && ((rightOperand.bits & AstNode.OperatorMASK) >> AstNode.OperatorSHIFT) != expressionOperatorID) && ((rightOperand.bits & AstNode.ParenthesizedMASK) == 0))) {"]}], "num": 16155}
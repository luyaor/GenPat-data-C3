{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "567bfe012194a9d275ff23159c025454", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09882ab9160a61f5e7eb77075307927d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t\t \tpublic MethodDeclaration convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": " \t\t \tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "diff": ["-\tpublic MethodDeclaration convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration) {", "+\tpublic ASTNode convert(org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration) {", "+\t\tif (methodDeclaration instanceof org.eclipse.jdt.internal.compiler.ast.AnnotationTypeMemberDeclaration) {", "+\t\t\treturn convert((org.eclipse.jdt.internal.compiler.ast.AnnotationTypeMemberDeclaration) methodDeclaration);", "+\t\t}", "-\t\tmethodDecl.setModifiers(methodDeclaration.modifiers & org.eclipse.jdt.internal.compiler.lookup.CompilerModifiers.AccJustFlag);", "+\t\tif ((methodDeclaration.modifiers & CompilerModifiers.AccJustFlag) != 0) {", "+\t\t\tsetModifiers(methodDecl, methodDeclaration);", "+\t\t}", "-\t\t\t// set the return type to VOID", "-\t\t\tPrimitiveType returnType = this.ast.newPrimitiveType(PrimitiveType.VOID);", "-\t\t\treturnType.setSourceRange(methodDeclaration.sourceStart, 0);", "-\t\t\tmethodDecl.setReturnType(returnType);", "-\t\t} else {", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\t// set the return type to VOID", "+\t\t\t\t\tPrimitiveType returnType = this.ast.newPrimitiveType(PrimitiveType.VOID);", "+\t\t\t\t\treturnType.setSourceRange(methodDeclaration.sourceStart, 0);", "+\t\t\t\t\tmethodDecl.setReturnType(returnType);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\tmethodDecl.setReturnType2(null);", "+\t\t\t}", "+\t\t} else if (methodDeclaration instanceof org.eclipse.jdt.internal.compiler.ast.MethodDeclaration) {", "-\t\tint closingPosition = retrieveRightBraceOrSemiColonPosition(methodDecl, methodDeclaration);", "+\t\tint closingPosition = retrieveRightBraceOrSemiColonPosition(methodDeclaration.bodyEnd, methodDeclaration.declarationSourceEnd);", "-\t\t\tmethodDecl.setSourceRange(startPosition, closingPosition - startPosition);", "+\t\t\tmethodDecl.setSourceRange(startPosition, closingPosition - startPosition + 1);", "+", "+\t\torg.eclipse.jdt.internal.compiler.ast.TypeParameter[] typeParameters = methodDeclaration.typeParameters();", "+\t\tif (typeParameters != null) {", "+\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\tmethodDecl.setFlags(methodDecl.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\tfor (int i = 0, max = typeParameters.length; i < max; i++) {", "+\t\t\t\t\t\tmethodDecl.typeParameters().add(convert(typeParameters[i]));", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-//\t\tsetJavaDocComment(methodDecl);", "-//\t\tmethodDecl.setJavadoc(convert(methodDeclaration.javadoc));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ffc4de21f6fce5453f82d572393c60a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 22, "signatureBeforeChange": "  public ArrayBinding(TypeBinding type, int dimensions, LookupEnvironment environment)", "signatureAfterChange": "  public void setTypeAnnotations(AnnotationBinding[] annotations, boolean evalNullAnnotations)", "diff": ["-\tthis(type, dimensions, environment, null);", "-}", "+", "+public void setTypeAnnotations(AnnotationBinding[] annotations, boolean evalNullAnnotations) {", "+\t", "+\tthis.typeAnnotations = annotations;", "+\tthis.tagBits |= TagBits.HasTypeAnnotations | TagBits.HasTypeAnnotations;", "+\t", "+\tif (evalNullAnnotations) {", "+\t\tlong nullTagBits = 0;", "+\t\tif (this.nullTagBitsPerDimension == null)", "+\t\t\tthis.nullTagBitsPerDimension = new long[this.dimensions + 1];", "+\t\t", "+\t\tint dimension = 0;", "+\t\tfor (int i = 0, length = annotations.length; i < length; i++) {", "+\t\t\tAnnotationBinding annotation = annotations[i];", "+\t\t\tif (annotation != null) {", "+\t\t\t\tswitch (annotation.type.id) {", "+\t\t\t\t\tcase TypeIds.T_ConfiguredAnnotationNullable :", "+\t\t\t\t\t\tnullTagBits  |= TagBits.AnnotationNullable;", "+\t\t\t\t\t\tthis.tagBits |= TagBits.HasNullTypeAnnotation;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TypeIds.T_ConfiguredAnnotationNonNull :", "+\t\t\t\t\t\tnullTagBits  |= TagBits.AnnotationNonNull;", "+\t\t\t\t\t\tthis.tagBits |= TagBits.HasNullTypeAnnotation;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t// null signals end of annotations for the current dimension in the serialized form.", "+\t\t\t\tif (nullTagBits != 0) {", "+\t\t\t\t\tthis.nullTagBitsPerDimension[dimension] = nullTagBits;", "+\t\t\t\t\tnullTagBits = 0;", "+\t\t\t\t}", "+\t\t\t\tdimension++;", "+\t\t\t}", "+\t\t}", "+\t\tthis.tagBits |= this.nullTagBitsPerDimension[0]; // outer-most dimension", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9e82bc42bfa372ee7db872873a46189", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "990aed617097bf4f8924693cc7796530216e9f94", "commitAfterChange": "585f1dbbb77e7785c7d5038484b4201e48c234d1", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "  \tpublic Expression convert(MessageSend expression)", "signatureAfterChange": "  \tpublic Expression convert(MessageSend expression)", "diff": ["+\t\t\tfinal TypeReference[] typeArguments = expression.typeArguments;", "+\t\t\tif (typeArguments != null) {", "+\t\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\t\tsuperMethodInvocation.setFlags(superMethodInvocation.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\t\tfor (int i = 0, max = typeArguments.length; i < max; i++) {", "+\t\t\t\t\t\t\tsuperMethodInvocation.typeArguments().add(convertType(typeArguments[i]));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tfinal TypeReference[] typeArguments = expression.typeArguments;", "+\t\t\tif (typeArguments != null) {", "+\t\t\t\tswitch(this.ast.apiLevel) {", "+\t\t\t\t\tcase AST.JLS2 :", "+\t\t\t\t\t\tmethodInvocation.setFlags(methodInvocation.getFlags() | ASTNode.MALFORMED);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase AST.JLS3 :", "+\t\t\t\t\t\tfor (int i = 0, max = typeArguments.length; i < max; i++) {", "+\t\t\t\t\t\t\tmethodInvocation.typeArguments().add(convertType(typeArguments[i]));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 47307}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08f74361fda9a38eb8e8ad1244e00c41", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cf7f09bc0c3a313d5e82ad7a018fe64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "2a762b85f858691a63d4547af177cc649d7b1329", "commitAfterChange": "7675c409a4b3b1e15b1cc476a0a66b988b5fb4a0", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "\r \t\tpublic IClasspathEntry[] getResolvedClasspath(\r \t\t\tboolean ignoreUnresolvedVariable,\r \t\t\tboolean generateMarkerOnError)\r \t\t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic IClasspathEntry[] getResolvedClasspath(\r \t\tboolean ignoreUnresolvedEntry,\r \t\tboolean generateMarkerOnError)\r \t\tthrows JavaModelException", "diff": ["-\t\t */\r", "-\t\tpublic IClasspathEntry[] getResolvedClasspath(\r", "-\t\t\tboolean ignoreUnresolvedVariable,\r", "-\t\t\tboolean generateMarkerOnError)\r", "-\t\t\tthrows JavaModelException {\r", "+\t */\r", "+\tpublic IClasspathEntry[] getResolvedClasspath(\r", "+\t\tboolean ignoreUnresolvedEntry,\r", "+\t\tboolean generateMarkerOnError)\r", "+\t\tthrows JavaModelException {\r", "+\r", "+\t\tJavaProjectElementInfo projectInfo;\r", "+\t\tif (this.isOpen()){\r", "+\t\t\tprojectInfo = getJavaProjectElementInfo();\r", "+\t\t} else {\r", "+\t\t\t// avoid populating the model for only retrieving the resolved classpath (13395)\r", "+\t\t\tprojectInfo = null;\r", "+\t\t}\r", "+\t\t\r", "+\t\t// reuse cache if not needing to refresh markers or checking bound variables\r", "+\t\tif (ignoreUnresolvedEntry && !generateMarkerOnError && projectInfo != null){\r", "+\t\t\t// resolved path is cached on its info\r", "+\t\t\tIClasspathEntry[] infoPath = projectInfo.lastResolvedClasspath;\r", "+\t\t\tif (infoPath != null) return infoPath;\r", "+\t\t}\r", "+\r", "+\t\tIClasspathEntry[] resolvedPath = getResolvedClasspath(getRawClasspath(), ignoreUnresolvedEntry, generateMarkerOnError);\r", "+\r", "+\t\tif (projectInfo != null){\r", "+\t\t\tprojectInfo.lastResolvedClasspath = resolvedPath;\r", "+\t\t}\r", "+\t\treturn resolvedPath;\r", "+\t}\r", "-\t\t\tJavaProjectElementInfo projectInfo;\r", "-\t\t\tif (this.isOpen()){\r", "-\t\t\t\tprojectInfo = getJavaProjectElementInfo();\r", "-\t\t\t} else {\r", "-\t\t\t\t// avoid populating the model for only retrieving the resolved classpath (13395)\r", "-\t\t\t\tprojectInfo = null;\r", "-\t\t\t\r", "-\t\t\t// reuse cache if not needing to refresh markers or checking bound variables\r", "-\t\t\tif (ignoreUnresolvedVariable && !generateMarkerOnError && (projectInfo != null)){\r", "-\t\t\t\t// resolved path is cached on its info\r", "-\t\t\t\tIClasspathEntry[] infoPath = projectInfo.lastResolvedClasspath;\r", "-\t\t\t\tif (infoPath != null) return infoPath;\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\tIClasspathEntry[] classpath = getRawClasspath();\r", "-\t\r", "-\t\t\tif (generateMarkerOnError){\r", "-\t\t\t\tflushClasspathProblemMarkers(false);\r", "-\t\t\t}\r", "-\t\r", "-\t\t\tIClasspathEntry[] resolvedPath = classpath; // clone only if necessary\r", "-\t\t\tint length = classpath.length;\r", "-\t\t\tint index = 0;\r", "-\t\r", "-\t\t\tfor (int i = 0; i < length; i++) {\r", "-\t\r", "-\t\t\t\tIClasspathEntry entry = classpath[i];\r", "-\t\r", "-\t\t\t\t/* validation if needed */\r", "-\t\t\t\tif (generateMarkerOnError) {\r", "-\t\t\t\t\tIJavaModelStatus status =\r", "-\t\t\t\t\t\tJavaConventions.validateClasspathEntry(this, entry, false);\r", "-\t\t\t\t\tif (!status.isOK())\r", "-\t\t\t\t\t\tcreateClasspathProblemMarker(\r", "-\t\t\t\t\t\t\tstatus.getMessage(), \r", "-\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,\r", "-\t\t\t\t\t\t\tfalse);\r", "-\t\t\t\t}\r", "-\t\r", "-\t\t\t\t/* resolve variables if any, unresolved ones are ignored */\r", "-\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_VARIABLE) {\r", "-\t\r", "-\t\t\t\t\t// clone original path\r", "-\t\t\t\t\tif (resolvedPath == classpath) {\r", "-\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\tclasspath,\r", "-\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\tresolvedPath = new IClasspathEntry[length],\r", "-\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\ti);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\t// resolve current variable (handling variable->variable->variable->entry\r", "-\t\t\t\t\tIPath variablePath = entry.getPath(); // for error reporting\r", "-\t\t\t\t\tentry = JavaCore.getResolvedClasspathEntry(entry);\r", "-\t\t\t\t\tif (entry == null) {\r", "-\t\t\t\t\t\tif (!ignoreUnresolvedVariable) {\r", "-\t\t\t\t\t\t\t\t\tvariablePath.toString()));\r", "-\t\t\t\t}\r", "-\t\t\t\tif (entry != null) {\r", "-\t\t\t\t\tresolvedPath[index++] = entry;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\r", "-\t\t\t// resize resolved classpath in case some variable entries could not be resolved\r", "-\t\t\tif (index != length) {\r", "-\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\tresolvedPath,\r", "-\t\t\t\t\t0,\r", "-\t\t\t\t\tresolvedPath = new IClasspathEntry[index],\r", "-\t\t\t\t\t0,\r", "-\t\t\t\t\tindex);\r", "-\t\t\t}\r", "-\t\t\tif (projectInfo != null){\r", "-\t\t\t\tprojectInfo.lastResolvedClasspath = resolvedPath;\r", "-\t\t\t}\r", "-\t\t\treturn resolvedPath;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f50431fc8ac8a70f01cc395ef021f28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SearchPattern.java", "commitBeforeChange": "0b147b41fd14622e58b9abe70d023e6b22dcfbf7", "commitAfterChange": "224ac51338df376ffd0a9a55fd7c92d9e76b9040", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r private static SearchPattern createTypePattern(String fullyQualifiedName, int limitTo)", "signatureAfterChange": "\r private static SearchPattern createTypePattern(char[] simpleName, char[] packageName, char[][] enclosingTypeNames, int limitTo)", "diff": ["-private static SearchPattern createTypePattern(String fullyQualifiedName, int limitTo) {\r", "+private static SearchPattern createTypePattern(char[] simpleName, char[] packageName, char[][] enclosingTypeNames, int limitTo) {\r", "-\tint lastDot = fullyQualifiedName.lastIndexOf('.');\r", "-\tint lastDollar = fullyQualifiedName.lastIndexOf('$');\r", "-\tif (lastDollar < lastDot) lastDollar = -1; // must be in last segment\r", "-\tchar[] enclosingTypeName, simpleName;\r", "-\tif (lastDollar >= 0){\r", "-\t\tenclosingTypeName = fullyQualifiedName.substring(lastDot+1, lastDollar).toCharArray();\r", "-\t\tsimpleName = fullyQualifiedName.substring(lastDollar+1, fullyQualifiedName.length()).toCharArray();\r", "-\t} else {\r", "-\t\tenclosingTypeName = NO_CHAR;\r", "-\t\tsimpleName = (lastDot != -1 ? fullyQualifiedName.substring(lastDot + 1) : fullyQualifiedName).toCharArray();\r", "-\t}\r", "-\tchar[] qualification = lastDot != -1 ? fullyQualifiedName.substring(0, lastDot).toCharArray() : null;\r", "-\t\r", "-\t\t\tchar[][] enclosingTypeNames = CharOperation.splitOn('$', enclosingTypeName);\r", "-\t\t\tsearchPattern = new TypeDeclarationPattern(qualification, enclosingTypeNames, simpleName, TYPE_SUFFIX, EXACT_MATCH, CASE_SENSITIVE);\r", "+\t\t\tsearchPattern = \r", "+\t\t\t\tnew TypeDeclarationPattern(\r", "+\t\t\t\t\tpackageName, \r", "+\t\t\t\t\tenclosingTypeNames, \r", "+\t\t\t\t\tsimpleName, \r", "+\t\t\t\t\tTYPE_SUFFIX, \r", "+\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\tCASE_SENSITIVE);\r", "-\t\t\tif (enclosingTypeName.length > 0) {\r", "-\t\t\t\tqualification = CharOperation.concat(qualification, enclosingTypeName, '.');\r", "-\t\t\t}\r", "-\t\t\tsearchPattern = new TypeReferencePattern(qualification, simpleName, EXACT_MATCH, CASE_SENSITIVE);\r", "+\t\t\tsearchPattern = \r", "+\t\t\t\tnew TypeReferencePattern(\r", "+\t\t\t\t\tCharOperation.concatWith(packageName, enclosingTypeNames, '.'), \r", "+\t\t\t\t\tsimpleName, \r", "+\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\tCASE_SENSITIVE);\r", "-\t\t\tsearchPattern = new SuperInterfaceReferencePattern(qualification, simpleName, EXACT_MATCH, CASE_SENSITIVE);\r", "+\t\t\tsearchPattern = \r", "+\t\t\t\tnew SuperInterfaceReferencePattern(\r", "+\t\t\t\t\tCharOperation.concatWith(packageName, enclosingTypeNames, '.'), \r", "+\t\t\t\t\tsimpleName, \r", "+\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\tCASE_SENSITIVE);\r", "-\t\t\tchar[] fullQualification;\r", "-\t\t\tif (enclosingTypeName.length > 0) {\r", "-\t\t\t\tfullQualification = CharOperation.concat(qualification, enclosingTypeName, '.');\r", "-\t\t\t\tenclosingTypeNames = CharOperation.splitOn('$', enclosingTypeName);\r", "-\t\t\t} else {\r", "-\t\t\t\tfullQualification = qualification;\r", "-\t\t\t\tenclosingTypeNames = NO_CHAR_CHAR;\r", "-\t\t\t}\r", "-\t\t\t\tnew TypeDeclarationPattern(qualification, enclosingTypeNames, simpleName, TYPE_SUFFIX, EXACT_MATCH, CASE_SENSITIVE), \r", "-\t\t\t\tnew TypeReferencePattern(fullQualification, simpleName, EXACT_MATCH, CASE_SENSITIVE));\r", "+\t\t\t\tnew TypeDeclarationPattern(\r", "+\t\t\t\t\tpackageName, \r", "+\t\t\t\t\tenclosingTypeNames, \r", "+\t\t\t\t\tsimpleName, \r", "+\t\t\t\t\tTYPE_SUFFIX, \r", "+\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\tCASE_SENSITIVE), \r", "+\t\t\t\tnew TypeReferencePattern(\r", "+\t\t\t\t\tCharOperation.concatWith(packageName, enclosingTypeNames, '.'), \r", "+\t\t\t\t\tsimpleName, \r", "+\t\t\t\t\tEXACT_MATCH, \r", "+\t\t\t\t\tCASE_SENSITIVE));\r"]}], "num": 43507}
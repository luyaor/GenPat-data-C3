{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07bd34f6c9f5f458911c936e4b1f6de0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58a618dd892a6442c57635da205fa973", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8845e4c8987116cc9c0aea93f48c3f458c73e5bf", "commitAfterChange": "5c85878a62876932bc62b0767f0e4b075cea01c0", "methodNumberBeforeChange": 300, "methodNumberAfterChange": 300, "signatureBeforeChange": " \tpublic void test298()", "signatureAfterChange": " \tpublic void _test298()", "diff": ["-\t// X is not abstract and does not override abstract method putAll(java.util.Map<? extends java.lang.String,? extends V>) in java.util.Map", "-\tpublic void test298() {", "-\t\tthis.runConformTest(", "+\tpublic void _test298() {", "+\t\tthis.runNegativeTest(", "-\t\t\t\t\"   \\n\" + ", "-\t\t\t\t\"   public static void main(String [] args) {\\n\" + ", "-\t\t\t\t\"        System.out.println(\\\"SUCCESS\\\");\\n\" + ", "-\t\t\t\t\"   }\\n\" + ", "-\t\t\t\"SUCCESS\");", "-/* Also", "-name clash: putAll(java.util.Map<? extends java.lang.String,? extends V>) in GenericMap<S,V> and putAll(java.util.Map<? extends K,? extends V>)", "-in java.util.Map<S,V> have the same erasure, yet neither overrides the other", "-", "-abstract class GenericMap<S, V> implements java.util.Map<S, V> {", "-   public void putAll(java.util.Map<? extends String, ? extends V> t) { }", "-}", "- */", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tpublic class X<V> implements Map<String, V> {\\n\" + ", "+\t\t\t\"\t             ^\\n\" + ", "+\t\t\t\"Class must implement the inherited abstract method Map<String,V>.putAll(Map<? extends String,? extends V>)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 17)\\n\" + ", "+\t\t\t\"\tpublic void putAll(Map<String, ? extends V> t) { }\\n\" + ", "+\t\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash : The method putAll(Map<String,? extends V>) of type X<V> has the same erasure as putAll(Map<? extends K,? extends V>) of type Map<String,V> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\", //---------------------------", "+\t\t\t\t\"public abstract class X<S, V> implements java.util.Map<Object, Object> {\\n\" + ", "+\t\t\t\t\"   public void putAll(java.util.Map<?, ?> t) { }\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"\");", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\", //---------------------------", "+\t\t\t\t\"public abstract class X<S, V> implements java.util.Map<S, V> {\\n\" + ", "+\t\t\t\t\"   public void putAll(java.util.Map<? extends String, ? extends V> t) { }\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tpublic void putAll(java.util.Map<? extends String, ? extends V> t) { }\\n\" + ", "+\t\t\t\"\t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash : The method putAll(Map<? extends String,? extends V>) of type X<S,V> has the same erasure as putAll(Map<? extends K,? extends V>) of type Map<S,V> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "691c9cf719dccabf332b52d7bc8a9ab9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ConstantTest.java", "commitBeforeChange": "b18b012adcc471e2280a6e20faa4d2a33f1db69a", "commitAfterChange": "5bb01926d23a6cf003d0d521691c391ac08b77a7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void test009()", "signatureAfterChange": " public void test009()", "diff": ["-\t\t\"  /*  Method descriptor  #15 ([Ljava/lang/String;)V */\\n\" + ", "+\t\t\"  // Method descriptor  #15 ([Ljava/lang/String;)V\\n\" + ", "+\t\t\"  // Stack: 3, Locals: 4\\n\" + ", "-\t\t\"    /* Stack: 3, Locals: 4 */\\n\" + ", "-\t\t\"    Code attribute:\\n\" + ", "-\t\t\"       0  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\\n\" + ", "-\t\t\"       3  ldc #23 <String \\\"1\\\">\\n\" + ", "-\t\t\"       5  invokevirtual #29 <Method java.io.PrintStream#print(java.lang.String arg) void>\\n\" + ", "-\t\t\"       8  aconst_null\\n\" + ", "-\t\t\"       9  goto 13\\n\" + ", "-\t\t\"      12  aconst_null\\n\" + ", "-\t\t\"      13  aconst_null\\n\" + ", "-\t\t\"      14  goto 18\\n\" + ", "-\t\t\"      17  aconst_null\\n\" + ", "-\t\t\"      18  if_acmpne 29\\n\" + ", "-\t\t\"      21  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\\n\" + ", "-\t\t\"      24  ldc #31 <String \\\"2\\\">\\n\" + ", "-\t\t\"      26  invokevirtual #29 <Method java.io.PrintStream#print(java.lang.String arg) void>\\n\" + ", "-\t\t\"      29  new #33 java.lang.StringBuffer\\n\" + ", "-\t\t\"      32  dup\\n\" + ", "-\t\t\"      33  ldc #35 <String \\\"[\\\">\\n\" + ", "-\t\t\"      35  invokespecial #37 <Constructor java.lang.StringBuffer(java.lang.String arg)>\\n\" + ", "-\t\t\"      38  aconst_null\\n\" + ", "-\t\t\"      39  invokevirtual #41 <Method java.lang.StringBuffer#append(java.lang.String arg) java.lang.StringBuffer>\\n\" + ", "-\t\t\"      42  ldc #43 <String \\\"]\\\">\\n\" + ", "-\t\t\"      44  invokevirtual #41 <Method java.lang.StringBuffer#append(java.lang.String arg) java.lang.StringBuffer>\\n\" + ", "-\t\t\"      47  invokevirtual #47 <Method java.lang.StringBuffer#toString() java.lang.String>\\n\" + ", "-\t\t\"      50  ldc #49 <String \\\"[null]\\\">\\n\" + ", "-\t\t\"      52  if_acmpne 59\\n\" + ", "-\t\t\"      55  iconst_1\\n\" + ", "-\t\t\"      56  goto 60\\n\" + ", "-\t\t\"      59  iconst_0\\n\" + ", "-\t\t\"      60  istore_1\\n\" + ", "-\t\t\"      61  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\\n\" + ", "-\t\t\"      64  ldc #51 <String \\\"3\\\">\\n\" + ", "-\t\t\"      66  invokevirtual #29 <Method java.io.PrintStream#print(java.lang.String arg) void>\\n\" + ", "-\t\t\"      69  aconst_null\\n\" + ", "-\t\t\"      70  astore_2\\n\" + ", "-\t\t\"      71  aload_2\\n\" + ", "-\t\t\"      72  ifnonnull 83\\n\" + ", "-\t\t\"      75  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\\n\" + ", "-\t\t\"      78  ldc #53 <String \\\"4\\\">\\n\" + ", "-\t\t\"      80  invokevirtual #29 <Method java.io.PrintStream#print(java.lang.String arg) void>\\n\" + ", "-\t\t\"      83  ldc #55 <String \\\"aaa\\\">\\n\" + ", "-\t\t\"      85  astore_3\\n\" + ", "-\t\t\"      86  getstatic #21 <Field java.lang.System#out java.io.PrintStream>\\n\" + ", "-\t\t\"      89  ldc #57 <String \\\"5\\\">\\n\" + ", "-\t\t\"      91  invokevirtual #60 <Method java.io.PrintStream#println(java.lang.String arg) void>\\n\" + ", "-\t\t\"      94  return\\n\";", "+\t\t\"     0  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "+\t\t\"     3  ldc #23 <String \\\"1\\\">\\n\" + ", "+\t\t\"     5  invokevirtual #29 <Method java/io/PrintStream.print(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"     8  aconst_null\\n\" + ", "+\t\t\"     9  goto 13\\n\" + ", "+\t\t\"    12  aconst_null\\n\" + ", "+\t\t\"    13  aconst_null\\n\" + ", "+\t\t\"    14  goto 18\\n\" + ", "+\t\t\"    17  aconst_null\\n\" + ", "+\t\t\"    18  if_acmpne 29\\n\" + ", "+\t\t\"    21  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "+\t\t\"    24  ldc #31 <String \\\"2\\\">\\n\" + ", "+\t\t\"    26  invokevirtual #29 <Method java/io/PrintStream.print(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    29  new #33 java/lang/StringBuffer\\n\" + ", "+\t\t\"    32  dup\\n\" + ", "+\t\t\"    33  ldc #35 <String \\\"[\\\">\\n\" + ", "+\t\t\"    35  invokespecial #37 <Method java/lang/StringBuffer.<init>(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    38  aconst_null\\n\" + ", "+\t\t\"    39  invokevirtual #41 <Method java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>\\n\" + ", "+\t\t\"    42  ldc #43 <String \\\"]\\\">\\n\" + ", "+\t\t\"    44  invokevirtual #41 <Method java/lang/StringBuffer.append(Ljava/lang/String;)Ljava/lang/StringBuffer;>\\n\" + ", "+\t\t\"    47  invokevirtual #47 <Method java/lang/StringBuffer.toString()Ljava/lang/String;>\\n\" + ", "+\t\t\"    50  ldc #49 <String \\\"[null]\\\">\\n\" + ", "+\t\t\"    52  if_acmpne 59\\n\" + ", "+\t\t\"    55  iconst_1\\n\" + ", "+\t\t\"    56  goto 60\\n\" + ", "+\t\t\"    59  iconst_0\\n\" + ", "+\t\t\"    60  istore_1\\n\" + ", "+\t\t\"    61  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "+\t\t\"    64  ldc #51 <String \\\"3\\\">\\n\" + ", "+\t\t\"    66  invokevirtual #29 <Method java/io/PrintStream.print(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    69  aconst_null\\n\" + ", "+\t\t\"    70  astore_2\\n\" + ", "+\t\t\"    71  aload_2\\n\" + ", "+\t\t\"    72  ifnonnull 83\\n\" + ", "+\t\t\"    75  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "+\t\t\"    78  ldc #53 <String \\\"4\\\">\\n\" + ", "+\t\t\"    80  invokevirtual #29 <Method java/io/PrintStream.print(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    83  ldc #55 <String \\\"aaa\\\">\\n\" + ", "+\t\t\"    85  astore_3\\n\" + ", "+\t\t\"    86  getstatic #21 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "+\t\t\"    89  ldc #57 <String \\\"5\\\">\\n\" + ", "+\t\t\"    91  invokevirtual #60 <Method java/io/PrintStream.println(Ljava/lang/String;)V>\\n\" + ", "+\t\t\"    94  return\\n\" + ", "+\t\t\"      Line numbers:\\n\" + ", "+\t\t\"        [pc: 0, line: 3]\\n\" + ", "+\t\t\"        [pc: 8, line: 4]\\n\" + ", "+\t\t\"        [pc: 21, line: 5]\\n\" + ", "+\t\t\"        [pc: 29, line: 6]\\n\" + ", "+\t\t\"        [pc: 61, line: 7]\\n\" + ", "+\t\t\"        [pc: 69, line: 8]\\n\" + ", "+\t\t\"        [pc: 71, line: 9]\\n\" + ", "+\t\t\"        [pc: 83, line: 10]\\n\" + ", "+\t\t\"        [pc: 86, line: 11]\\n\" + ", "+\t\t\"        [pc: 94, line: 12]\\n\" + ", "+\t\t\"      Local variable table:\\n\" + ", "+\t\t\"        [pc: 0, pc: 95] local: args index: 0 type: [Ljava/lang/String;\\n\" + ", "+\t\t\"        [pc: 61, pc: 95] local: b index: 1 type: Z\\n\" + ", "+\t\t\"        [pc: 71, pc: 95] local: s index: 2 type: Ljava/lang/String;\\n\" + ", "+\t\t\"        [pc: 86, pc: 95] local: s2 index: 3 type: Ljava/lang/String;\\n\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c19da881a715b04b4e38765292e5d024", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "5076d5a6b44e81a2fe7fa937d2281dee72a83981", "commitAfterChange": "61c42f8b534ab4d093a587806abc001c702b4ad9", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void test033()", "signatureAfterChange": " \tpublic void test033()", "diff": ["-\t\t\t\t\"\tvoid f(boolean b, Object... o) {\\n\" + ", "-\t\t\t\t\"\t\tSystem.out.print(\\\"f(boolean, Object...)\\\");\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"\tvoid f(Object... o) {\\n\" + ", "-\t\t\t\t\"\t\tSystem.out.print(\\\"f(Object...)\\\");\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"\tvoid a(boolean b, Object... o) {System.out.print(1);}\\n\" + ", "+\t\t\t\t\"\tvoid a(Object... o) {System.out.print(2);}\\n\" + ", "-\t\t\t\t\"\t\tX a = new X();\\n\" + ", "-\t\t\t\t\"\t\ta.f(true);\\n\" + ", "-\t\t\t\t\"\t\ta.f(true, \\\"foobar\\\");\\n\" + ", "-\t\t\t\t\"\t\ta.f(\\\"foo\\\", \\\"bar\\\");\\n\" + ", "+\t\t\t\t\"\t\tX x = new X();\\n\" + ", "+\t\t\t\t\"\t\tx.a(true);\\n\" + ", "+\t\t\t\t\"\t\tx.a(true, \\\"foobar\\\");\\n\" + ", "+\t\t\t\t\"\t\tx.a(\\\"foo\\\", \\\"bar\\\");\\n\" + ", "-\t\t\t\"f(boolean, Object...)f(boolean, Object...)f(Object...)\");", "-\t}\t", "+\t\t\t\"112\");", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tvoid b(boolean b, Object... o) {}\\n\" + ", "+\t\t\t\t\"\tvoid b(Boolean... o) {}\\n\" + ", "+\t\t\t\t\"\tvoid c(boolean b, boolean b2, Object... o) {}\\n\" + ", "+\t\t\t\t\"\tvoid c(Boolean b, Object... o) {}\\n\" + ", "+\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"\t\tX x = new X();\\n\" + ", "+\t\t\t\t\"\t\tx.b(true);\\n\" + ", "+\t\t\t\t\"\t\tx.b(true, false);\\n\" + ", "+\t\t\t\t\"\t\tx.c(true, true, true);\\n\" + ", "+\t\t\t\t\"\t\tx.c(Boolean.TRUE, Boolean.TRUE, Boolean.TRUE);\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 8)\\r\\n\" + ", "+\t\t\t\"\tx.b(true);\\r\\n\" + ", "+\t\t\t\"\t  ^\\n\" + ", "+\t\t\t\"The method b(boolean, Object[]) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 9)\\r\\n\" + ", "+\t\t\t\"\tx.b(true, false);\\r\\n\" + ", "+\t\t\t\"\t  ^\\n\" + ", "+\t\t\t\"The method b(boolean, Object[]) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 10)\\r\\n\" + ", "+\t\t\t\"\tx.c(true, true, true);\\r\\n\" + ", "+\t\t\t\"\t  ^\\n\" + ", "+\t\t\t\"The method c(boolean, boolean, Object[]) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 11)\\r\\n\" + ", "+\t\t\t\"\tx.c(Boolean.TRUE, Boolean.TRUE, Boolean.TRUE);\\r\\n\" + ", "+\t\t\t\"\t  ^\\n\" + ", "+\t\t\t\"The method c(boolean, boolean, Object[]) is ambiguous for the type X\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd6192f9e8d53b404b0cd83df4e974b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "11d37ba24baa8a8d5177d1ba6ab1649342a0de47", "commitAfterChange": "3b53dc72aa60c63aafa5e63cea69df72f36f7346", "methodNumberBeforeChange": 246, "methodNumberAfterChange": 246, "signatureBeforeChange": " \tpublic void test0242()", "signatureAfterChange": " \tpublic void test0242()", "diff": ["+\t\t\t\t\"    @SuppressWarnings(\\\"unchecked\\\")\\n\" +", "+\t\t\t\t\"        final Class<? extends String> clazz2 = (Class<? extends String>) classes.get(\\\"test\\\");\\n\" + ", "+\t\t\t\t\"        final Class<String> clazz3 = (Class<String>) classes.get(\\\"test\\\");\\n\" + ", "-\t\t\t\t\"}\\n\",", "+\t\t\t\t\"}\", // =================", "-\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tprivate static final Map<String, Class> classes = new HashMap<String, Class>();\\n\" + ", "-\t\t\t\"\t                                 ^^^^^\\n\" + ", "-\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tfinal Class<? extends Object> clazz = (Class<? extends Object>) classes.get(\\\"test\\\");\\n\" + ", "+\t\t\t\"\t                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The cast from Class to Class<? extends Object> is actually checking against the erased type Class\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 4)\\n\" + ", "-\t\t\t\"\tprivate static final Map<String, Class> classes = new HashMap<String, Class>();\\n\" + ", "-\t\t\t\"\t                                                                      ^^^^^\\n\" + ", "-\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tfinal Class<? extends String> clazz2 = (Class<? extends String>) classes.get(\\\"test\\\");\\n\" + ", "+\t\t\t\"\t                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The cast from Class to Class<? extends String> is actually checking against the erased type Class\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tfinal Class<? extends String> clazz2 = (Class<? extends String>) classes.get(\\\"test\\\");\\n\" + ", "+\t\t\t\"\t                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast from Class to Class<? extends String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tfinal Class<String> clazz3 = (Class<String>) classes.get(\\\"test\\\");\\n\" + ", "+\t\t\t\"\t                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: The cast from Class to Class<String> is actually checking against the erased type Class\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tfinal Class<String> clazz3 = (Class<String>) classes.get(\\\"test\\\");\\n\" + ", "+\t\t\t\"\t                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Unnecessary cast from Class to Class<String>\\n\" + "]}], "num": 8717}
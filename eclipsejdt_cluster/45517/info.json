{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "14ac666ec20994c4434a3c65a3705473", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74f3a81652bd7b1a576296e212895e2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodReferencePattern.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \tprotected boolean matches(AstNode node, boolean resolve)", "signatureAfterChange": "\r protected boolean matches(AstNode node, boolean resolve)", "diff": ["+ */\r", "+protected boolean matches(AstNode node, boolean resolve) {\r", "+\tif (!(node instanceof MessageSend)) return false;\r", "+\tMessageSend messageSend = (MessageSend)node;\r", "+\t// selector\r", "+\tif (this.selector != null && !this.matchesName(this.selector, messageSend.selector))\r", "+\t\treturn false;\r", "-\t */\r", "-\tprotected boolean matches(AstNode node, boolean resolve) {\r", "-\t\tif (!(node instanceof MessageSend))\r", "-\t\t\treturn false;\r", "-\r", "-\t\tMessageSend messageSend = (MessageSend) node;\r", "-\r", "-\t\t// selector\r", "-\t\tif (this.selector != null\r", "-\t\t\t&& !this.matchesName(this.selector, messageSend.selector))\r", "-\t\t\treturn false;\r", "-\r", "-\t\t// declaring type\r", "-\t\tMethodBinding binding = messageSend.binding;\r", "-\t\tif (resolve && binding != null) {\r", "-\t\t\tReferenceBinding receiverType = binding.declaringClass;\r", "-\t\t\tif (this.isVirtualInvoke(messageSend)) {\r", "-\t\t\t\tif (!this\r", "-\t\t\t\t\t.matchesAsSubtype(\r", "-\t\t\t\t\t\treceiverType,\r", "-\t\t\t\t\t\tthis.declaringSimpleName,\r", "-\t\t\t\t\t\tthis.declaringQualification)\r", "-\t\t\t\t\t&& !this.matchesAsSubtype(this.declaringTypes, receiverType)) {\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t\t}\r", "-\t\t\t} else {\r", "-\t\t\t\tif (!this\r", "-\t\t\t\t\t.matchesType(\r", "-\t\t\t\t\t\tthis.declaringSimpleName,\r", "-\t\t\t\t\t\tthis.declaringQualification,\r", "-\t\t\t\t\t\treceiverType))\r", "+\t// receiver type\r", "+\tMethodBinding binding = messageSend.binding;\r", "+\tReferenceBinding receiverType = \r", "+\t\tbinding == null ? \r", "+\t\t\tnull : \r", "+\t\t\t(!isVirtualInvoke(messageSend) ? binding.declaringClass : (ReferenceBinding)messageSend.receiverType);\r", "+\tif (resolve && receiverType != null) {\r", "+\t\tif (this.isVirtualInvoke(messageSend)) {\r", "+\t\t\tif (!this.matchesAsSubtype(receiverType, this.declaringSimpleName, this.declaringQualification)\r", "+\t\t\t\t&& !this.matchesType(this.allSuperDeclaringTypeNames, receiverType)) {\r", "-\t\t}\r", "-\r", "-\t\t// return type\r", "-\t\tif (resolve && binding != null) {\r", "-\t\t\tif (!this\r", "-\t\t\t\t.matchesType(\r", "-\t\t\t\t\tthis.returnSimpleName,\r", "-\t\t\t\t\tthis.returnQualification,\r", "-\t\t\t\t\tbinding.returnType))\r", "-\t\t\t\treturn false;\r", "-\t\t}\r", "-\r", "-\t\t// argument types\r", "-\t\tint argumentCount =\r", "-\t\t\tthis.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\t\tif (argumentCount > -1) {\r", "-\t\t\tint parameterCount =\r", "-\t\t\t\tmessageSend.arguments == null ? 0 : messageSend.arguments.length;\r", "-\t\t\tif (parameterCount != argumentCount)\r", "-\t\t\t\treturn false;\r", "-\r", "-\t\t\tif (resolve && binding != null) {\r", "-\t\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "-\t\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "-\t\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "-\t\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "-\t\t\t\t\t\treturn false;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\r", "-\t\treturn true;\r", "-\t}\r", "+\t\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, receiverType))\r", "+\t\t\t\treturn false;\r", "+\t// return type\r", "+\tif (resolve && binding != null) {\r", "+\t\tif (!this.matchesType(this.returnSimpleName, this.returnQualification, binding.returnType))\r", "+\t\t\treturn false;\r", "+\t}\r", "+\t\t\r", "+\t// argument types\r", "+\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\tif (argumentCount > -1) {\r", "+\t\tint parameterCount = messageSend.arguments == null ? 0 : messageSend.arguments.length;\r", "+\t\tif (parameterCount != argumentCount)\r", "+\t\t\treturn false;\r", "+\r", "+\t\tif (resolve && binding != null) {\r", "+\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "+\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "+\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "+\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\r", "+\treturn true;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c31f47e8e1b4e307d08c8bddb97db301", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodDeclarationPattern.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r protected boolean matches(AstNode node, boolean resolve)", "signatureAfterChange": "\r public int matchLevel(AstNode node, boolean resolve)", "diff": ["- */\r", "-protected boolean matches(AstNode node, boolean resolve) {\r", "-\tif (!(node instanceof MethodDeclaration)) return false;\r", "-\r", "-\tMethodDeclaration method = (MethodDeclaration)node;\r", "-\t\r", "-\t// selector\r", "-\tif (!this.matchesName(this.selector, method.selector))\r", "-\t\treturn false;\r", "-\r", "-\t// declaring type\r", "-\tMethodBinding binding = method.binding;\r", "-\tif (resolve && binding != null) {\r", "-\t\tReferenceBinding declaringType = binding.declaringClass;\r", "-\t\tif (declaringType != null) {\r", "-\t\t\tif (!binding.isStatic() && !binding.isPrivate()) {\r", "-\t\t\t\tif (!this.matchesAsSubtype(declaringType, this.declaringSimpleName, this.declaringQualification))\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t} else {\r", "-\t\t\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringType))\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\r", "-\t// return type\r", "-\tif (this.returnQualification == null) {\r", "-\t\tif (this.returnSimpleName != null) {\r", "-\t\t\tTypeReference methodReturnType = method.returnType;\r", "-\t\t\tif (methodReturnType != null) {\r", "-\t\t\t\tchar[][] methodReturnTypeName = methodReturnType.getTypeName();\r", "-\t\t\t\tchar[] sourceName = this.toArrayName(\r", "-\t\t\t\t\tmethodReturnTypeName[methodReturnTypeName.length-1], \r", "-\t\t\t\t\tmethodReturnType.dimensions());\r", "-\t\t\t\tif (!this.matchesName(this.returnSimpleName, sourceName))\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t} else {\r", "-\t\tif (resolve \r", "-\t\t\t\t&& binding != null \r", "-\t\t\t\t&& !this.matchesType(this.returnSimpleName, this.returnQualification, binding.returnType))\r", "-\t\t\treturn false;\r", "-\t}\r", "-\t\t\r", "-\t// parameter types\r", "-\tint parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\tif (parameterCount > -1) {\r", "-\t\tint argumentCount = method.arguments == null ? 0 : method.arguments.length;\r", "-\t\tif (parameterCount != argumentCount)\r", "-\t\t\treturn false;\r", "-\t\r", "-\t\tif (resolve && binding != null) {\r", "-\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "-\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "-\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "-\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "-\t\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\r", "-\treturn true;\r", "-}\r", "+ */\r", "+public int matchLevel(AstNode node, boolean resolve) {\r", "+\tif (!(node instanceof MethodDeclaration)) return IMPOSSIBLE_MATCH;\r", "+\r", "+\tMethodDeclaration method = (MethodDeclaration)node;\r", "+\r", "+\tif (resolve) {\r", "+\t\treturn this.matchLevel(method.binding);\r", "+\t} else {\r", "+\t\t// selector\r", "+\t\tif (!this.matchesName(this.selector, method.selector))\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\r", "+\t\t// return type\r", "+\t\tTypeReference methodReturnType = method.returnType;\r", "+\t\tif (methodReturnType != null) {\r", "+\t\t\tchar[][] methodReturnTypeName = methodReturnType.getTypeName();\r", "+\t\t\tchar[] sourceName = this.toArrayName(\r", "+\t\t\t\tmethodReturnTypeName[methodReturnTypeName.length-1], \r", "+\t\t\t\tmethodReturnType.dimensions());\r", "+\t\t\tif (!this.matchesName(this.returnSimpleName, sourceName))\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\t\t\t\r", "+\t\t// parameter types\r", "+\t\tint parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\t\tif (parameterCount > -1) {\r", "+\t\t\tint argumentCount = method.arguments == null ? 0 : method.arguments.length;\r", "+\t\t\tif (parameterCount != argumentCount)\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\r", "+\t\treturn POSSIBLE_MATCH;\r", "+\t}\r", "+}\r"]}], "num": 45517}
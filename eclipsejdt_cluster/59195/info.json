{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c110ff27cffc4360ec2862449418ca7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34f2ae786591e20fca9e5c09c1752932", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "34b4972480c62fc99b17d4728db2648e98460b52", "commitAfterChange": "a234173ab4d645c8990c97cafa00ec82ce0a909f", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " protected void storeProblemsFor(SourceFile sourceFile, CategorizedProblem[] problems) throws CoreException", "signatureAfterChange": " protected void storeProblemsFor(SourceFile sourceFile, CategorizedProblem[] problems) throws CoreException", "diff": ["-\tfor (int i = 0, l = problems.length; i < l; i++) {", "+\tproblems: for (int i = 0, l = problems.length; i < l; i++) {", "+\t\t\tif (id == IProblem.MissingNonNullByDefaultAnnotationOnPackage && !(CharOperation.equals(sourceFile.getMainTypeName(), TypeConstants.PACKAGE_INFO_NAME))) {", "+\t\t\t\t// for this kind of problem, marker needs to be created on the package instead of on the source file", "+\t\t\t\t// see bug 372012", "+\t\t\t\tchar[] fileName = sourceFile.getFileName();", "+\t\t\t\tint pkgEnd = CharOperation.lastIndexOf('/', fileName);", "+\t\t\t\tif (pkgEnd == -1)", "+\t\t\t\t\tpkgEnd = CharOperation.lastIndexOf(File.separatorChar, fileName);", "+\t\t\t\tPackageFragment pkg = null;", "+\t\t\t\tif (pkgEnd != -1)", "+\t\t\t\t\tpkg = (PackageFragment) Util.getPackageFragment(sourceFile.getFileName(), pkgEnd, -1 /*no jar separator for java files*/);", "+\t\t\t\t", "+\t\t\t\tif (pkg != null) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tIMarker[] existingMarkers = pkg.resource().findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, false, IResource.DEPTH_ZERO);", "+\t\t\t\t\t\tint len = existingMarkers.length;", "+\t\t\t\t\t\tfor (int j=0; j < len; j++) {", "+\t\t\t\t\t\t\tif (((Integer)existingMarkers[j].getAttribute(IJavaModelMarker.ID)).intValue() == IProblem.MissingNonNullByDefaultAnnotationOnPackage) {", "+\t\t\t\t\t\t\t\tcontinue problems; // marker already present", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\t// marker retrieval failed, cannot do much", "+\t\t\t\t\t\tif (JavaModelManager.VERBOSE) {", "+\t\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tIResource tempRes = pkg.resource();", "+\t\t\t\t\tif (tempRes != null) {", "+\t\t\t\t\t\tresource = tempRes;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fff6fb5d8b7b8b684ae3931a9162eb2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "38faf3efd9d7a9e66ede29f2210a34a5031698a0", "commitAfterChange": "102c35a2a8562c276abba3a19ac61f3d18639af8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tprivate JavaElement getUnresolvedJavaElement(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding )", "signatureAfterChange": " \tprivate JavaElement getUnresolvedJavaElement(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding )", "diff": ["-\t\tif (Util.isClassFileName(fileName)) {", "-\t\t\tClassFile classFile = (ClassFile) getClassFile(fileName);", "-\t\t\tif (classFile == null) return null;", "-\t\t\treturn (JavaElement) classFile.getType();", "-\t\t}", "+\t\t\tif (Util.isClassFileName(fileName)) {", "+\t\t\t\tint jarSeparator = CharOperation.indexOf(IDependent.JAR_FILE_ENTRY_SEPARATOR, fileName);", "+\t\t\t\tint lastSlash = CharOperation.lastIndexOf('/', fileName);", "+\t\t\t\tif (lastSlash == -1) ", "+\t\t\t\t\tlastSlash = CharOperation.lastIndexOf(File.separatorChar, fileName);", "+\t\t\t\tif (lastSlash <= jarSeparator) // if jarSeparator == -1 and there is no slash, lastSlash should be 0", "+\t\t\t\t\tlastSlash = jarSeparator+1;", "+\t\t\t\tIPackageFragment pkg = getPackageFragment(fileName, lastSlash, jarSeparator);", "+\t\t\t\tchar[] constantPoolName = referenceBinding.constantPoolName();", "+\t\t\t\tif (constantPoolName == null) {", "+\t\t\t\t\tClassFile classFile = (ClassFile) getClassFile(fileName);", "+\t\t\t\t\treturn classFile == null ? null : (JavaElement) classFile.getType();", "+\t\t\t\t}", "+\t\t\t\tlastSlash = CharOperation.lastIndexOf('/', constantPoolName);", "+\t\t\t\tchar[] classFileName = CharOperation.subarray(constantPoolName, lastSlash+1, constantPoolName.length);", "+\t\t\t\tClassFile classFile = (ClassFile) pkg.getClassFile(new String(classFileName) + SuffixConstants.SUFFIX_STRING_class);", "+\t\t\t\treturn (JavaElement) classFile.getType();", "+\t\t\t}", "+\t\t\t\tif (Util.isClassFileName(fileName)) {", "+\t\t\t\t\tClassFile classFile = (ClassFile) getClassFile(fileName);", "+\t\t\t\t\tif (classFile == null) return null;", "+\t\t\t\t\treturn (JavaElement) classFile.getType();", "+\t\t\t\t}"]}], "num": 59195}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fadc4ad6b2d2e490e3c47d508f08d824", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "451a36b4fdac4e72f9540eb45b5cd3f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CommentsPreparator.java", "commitBeforeChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "commitAfterChange": "1d2291282dfdfb671d68594ce3e1d0da5450a9d0", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tprivate void handleHtml(TagElement node)", "signatureAfterChange": "  \tprivate void handleHtml(TagElement node)", "diff": ["+\t\t\t\tif (TagElement.TAG_PARAM.equals(node.getTagName())", "+\t\t\t\t\t\t&& this.ctm.findIndex(startPos, -1, false) == 1 + this.ctm.firstIndexIn(node, -1)) {", "+\t\t\t\t\tcontinue; // it's a generic class parameter name, not an HTML tag", "+\t\t\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59f26aa0cf84d0058d7ec2fb311df1ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java", "commitBeforeChange": "3388256fa80bf40daffa9f485d2674986c875b82", "commitAfterChange": "7a73f29da5ea73cce41fc54b0fc3ad302149f476", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 139, "signatureBeforeChange": " \tpublic void testMethodDeclaration()", "signatureAfterChange": " \tpublic void testMethodDeclaration()", "diff": ["-\t\tx1.thrownExceptions().add(this.N2);", "-\t\tx1.thrownExceptions().add(this.N3);", "+\t\tif (this.ast.apiLevel() < AST.JLS8) {", "+\t\t\tx1.thrownExceptions().add(this.N2);", "+\t\t\tx1.thrownExceptions().add(this.N3);\t\t\t", "+\t\t} else {", "+\t\t\tx1.thrownExceptionTypes().add(this.T3);", "+\t\t\tx1.thrownExceptionTypes().add(this.T4);\t\t\t", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b462ae7a905eed164545903ce84f9d78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 179, "methodNumberAfterChange": 250, "signatureBeforeChange": "\t \t \tpublic void testInitializer()", "signatureAfterChange": "\t \t \tpublic void testInitializer()", "diff": ["-\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t} else {", "+\t\t\tassertTrue(x.modifiers().size() == 0);", "+\t\t}", "+\t\ttModifiers(x);", "-\t\tint legal = Modifier.STATIC;", "-\t\tpreviousCount = ast.modificationCount();", "-\t\tx.setModifiers(legal);", "-\t\tassertTrue(ast.modificationCount() > previousCount);", "-\t\tassertTrue(x.getModifiers() == legal);", "-\t\t", "-\t\tpreviousCount = ast.modificationCount();", "-\t\tx.setModifiers(Modifier.NONE);", "-\t\tassertTrue(ast.modificationCount() > previousCount);", "-\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\tif (ast.apiLevel() == AST.LEVEL_2_0) {", "+\t\t\tint legal = Modifier.STATIC;", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setModifiers(legal);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.getModifiers() == legal);", "+\t\t\t", "+\t\t\tpreviousCount = ast.modificationCount();", "+\t\t\tx.setModifiers(Modifier.NONE);", "+\t\t\tassertTrue(ast.modificationCount() > previousCount);", "+\t\t\tassertTrue(x.getModifiers() == Modifier.NONE);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6d257e94916e11cf7d44312a0ea3573", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(ConditionalExpression node)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(ConditionalExpression node)", "diff": ["+\t\tthis.secondaryWrapIndexes.add(this.tm.firstIndexIn(node.getThenExpression(), -1));", "+\t\tthis.secondaryWrapIndexes.add(this.tm.firstIndexIn(node.getElseExpression(), -1));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e39afd87d0998001f73084387788179e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "6c050fdd50da181a73c24a3d84f6766ee118b95b", "commitAfterChange": "f13a5d135f0d6d82ec59c09667ba7900fd57b604", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\tleft.checkNPE(currentScope, flowContext, flowInfo, false /* skip String */);", "-\tflowInfo = left.analyseCode(currentScope, flowContext, flowInfo).", "-\t\tunconditionalInits();", "-\tright.checkNPE(currentScope, flowContext, flowInfo, false /* skip String */);", "-\treturn right.analyseCode(currentScope, flowContext, flowInfo).", "-\t\tunconditionalInits();", "+\tif (this.resolvedType.id == T_JavaLangString) {", "+\t\treturn right.analyseCode(currentScope, flowContext, ", "+\t\t\t\tleft.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits()).", "+\t\t\tunconditionalInits();", "+\t}", "+\telse {", "+\t\tleft.checkNPE(currentScope, flowContext, flowInfo);", "+\t\tflowInfo = left.analyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tunconditionalInits();", "+\t\tright.checkNPE(currentScope, flowContext, flowInfo);", "+\t\treturn right.analyseCode(currentScope, flowContext, flowInfo).", "+\t\t\tunconditionalInits();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f33f500e25c5352c11bfed50c5f1d77b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java", "commitBeforeChange": "ea5c9cc312f4b4f8b75e3a6a2f95be1c2b2c1422", "commitAfterChange": "1d27cfb65a8550e3dd44f890da53c4bdcdcccdbf", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \t@Override \tpublic boolean visit(IfStatement node)", "signatureAfterChange": "  \t@Override \tpublic boolean visit(IfStatement node)", "diff": ["-\t\t\tif (this.tm.get(thenIndex).getLineBreaksBefore() == 0)", "+\t\t\tif (this.tm.get(thenIndex).getLineBreaksBefore() == 0) {", "+\t\t\t\tthis.wrapParentIndex = this.tm.firstIndexAfter(node.getExpression(), TokenNameRPAREN);", "+\t\t\t\tthis.wrapGroupEnd = this.tm.lastIndexIn(node.getThenStatement(), -1);", "+\t\t\t\thandleWrap(this.options.alignment_for_compact_if, node);", "+\t\t\t}", "-\t\t\tif (this.tm.get(elseIndex).getLineBreaksBefore() == 0)", "+\t\t\tif (this.tm.get(elseIndex).getLineBreaksBefore() == 0) {", "-\t\t}", "-\t\tif (!this.wrapIndexes.isEmpty()) {", "-\t\t\tthis.wrapParentIndex = this.tm.firstIndexAfter(node.getExpression(), TokenNameRPAREN);", "-\t\t\tthis.wrapGroupEnd = this.tm.lastIndexIn(node, -1);", "-\t\t\thandleWrap(this.options.alignment_for_compact_if, node);", "+\t\t\t\tthis.wrapParentIndex = this.tm.firstIndexAfter(node.getExpression(), TokenNameRPAREN);", "+\t\t\t\tthis.wrapGroupEnd = this.tm.lastIndexIn(elseStatement, -1);", "+\t\t\t\thandleWrap(this.options.alignment_for_compact_if, node);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f59fc41a6a3fa29e2587dade1b5f40c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java", "commitBeforeChange": "904e81d11d3fc634ae2d9d861dc6c73c9ea81e03", "commitAfterChange": "2fce9fdec7d24fd4985bfaa8a4da9bdc5aff2660", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 111, "signatureBeforeChange": " \tpublic void testJavadoc()", "signatureAfterChange": " \tpublic void testJavadoc()", "diff": ["+\t */", "+\t\tx1.fragments().add(TAG1);", "+\t\tx1.fragments().add(TEXT1);", "+\t\tx1.fragments().add(N1);", "+\t\tx1.fragments().add(MTHREF1);"]}], "num": 57171}
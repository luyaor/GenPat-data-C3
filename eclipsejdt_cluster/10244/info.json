{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51afccd00c3d5d80c6b539b2a5f7348a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "027d7919e5652b82d190f386d2433759", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "e593164022433d17467e437ca5f1d1580fcf9c34", "commitAfterChange": "1ca61ba390ea54fcabd09223853d7a3d6816c249", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void checkAndSetMalformed(ASTNode oldASTNode, ASTNode newASTNode)", "signatureAfterChange": "  \tprivate void checkAndSetMalformed(ASTNode spannedNode, ASTNode spanningNode)", "diff": ["-\tprivate void checkAndSetMalformed(ASTNode oldASTNode, ASTNode newASTNode) {", "-\t\tif ((oldASTNode.getFlags() & ASTNode.MALFORMED) != 0) {", "-\t\t\tnewASTNode.setFlags(newASTNode.getFlags() | ASTNode.MALFORMED);", "+\tprivate void checkAndSetMalformed(ASTNode spannedNode, ASTNode spanningNode) {", "+\t\tif ((spannedNode.getFlags() & ASTNode.MALFORMED) != 0) {", "+\t\t\tspanningNode.setFlags(spanningNode.getFlags() | ASTNode.MALFORMED);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ce8db5e15cbda00094d942ea5c4177c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void test0021() throws JavaModelException", "signatureAfterChange": " \tpublic void test0021() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Incorrect type\", true, type.isArrayType());", "-\t\tassertEquals(\"Type should be malformed\", ASTNode.MALFORMED, (type.getFlags() & ASTNode.MALFORMED));", "-\t\ttype = ((ArrayType) type).getComponentType();", "-\t\tassertEquals(\"Incorrect type\", true, type.isArrayType());", "-\t\tassertEquals(\"Type should be malformed\", ASTNode.MALFORMED, (type.getFlags() & ASTNode.MALFORMED));", "-\t\ttype = ((ArrayType) type).getComponentType();"]}], "num": 10244}
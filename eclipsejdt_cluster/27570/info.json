{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "042de05361da5dc715bb0a6b11bb1be7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ed5dff5d6fc808582cd5173d4fcd172", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "3363755daf5e11f7ba5c27ee1ed39285b9c60a26", "commitAfterChange": "b25ba34af45dc400b54fbb4a1c94812b44a4f39f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void checkConcreteInheritedMethod(MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "signatureAfterChange": " void checkConcreteInheritedMethod(MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "diff": ["-\tif (!concreteMethod.isPublic())", "-\t\t// Cannot reduce visibility of a public method specified by an interface", "-\t\tproblemReporter().inheritedMethodReducesVisibility(type, concreteMethod, abstractMethods);", "+\tif (!concreteMethod.isPublic()) {", "+\t\tint index = 0, length = abstractMethods.length;", "+\t\tif (concreteMethod.isProtected()) {", "+\t\t\tfor (; index < length; index++)", "+\t\t\t\tif (abstractMethods[index].isPublic()) break;", "+\t\t} else if (concreteMethod.isDefault()) {", "+\t\t\tfor (; index < length; index++)", "+\t\t\t\tif (!abstractMethods[index].isDefault()) break;", "+\t\t}", "+\t\tif (index < length)", "+\t\t\tproblemReporter().inheritedMethodReducesVisibility(type, concreteMethod, abstractMethods);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b5b837bc620ca8eb5840bcf5d72f3b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "74ceca813d8e9be557353622cfb1779e5fa562ad", "commitAfterChange": "2d7d544af40c78aee4e80de194acd385e8eab51a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] otherInheritedMethods)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] allInheritedMethods)", "diff": ["-void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] otherInheritedMethods) {", "-\tboolean isAnnotationMember = this.type.isAnnotationType();", "+void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] allInheritedMethods) {", "+\tif (this.type.isAnnotationType()) { // annotation cannot override any method", "+\t\tproblemReporter().annotationCannotOverrideMethod(currentMethod, methods[length - 1]);", "+\t\treturn; // do not repoort against subsequent inherited methods", "+\t}", "-\t\tif (isAnnotationMember) { // annotation cannot override any method", "-\t\t\tproblemReporter().annotationCannotOverrideMethod(currentMethod, inheritedMethod);", "-\t\t\treturn; // do not repoort against subsequent inherited methods", "-\t\t}", "-\t\tcheckForBridgeMethod(currentMethod, inheritedMethod, otherInheritedMethods);", "+\t\tcheckForBridgeMethod(currentMethod, inheritedMethod, allInheritedMethods);"]}], "num": 27570}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22855af703c9852eef77e5837963d9f4", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0071cc38755660dc58c719992a0c25bf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r private int matchLevel(NameReference nameRef, boolean resolve)", "signatureAfterChange": "\r private boolean matches(NameReference nameRef, boolean resolve)", "diff": ["+ */\r", "+private boolean matches(NameReference nameRef, boolean resolve) {\r", "+\tBinding binding = nameRef.binding;\r", "+\tif (!resolve || binding == null || !binding.isValidBinding()) {\r", "+\t\tif (this.simpleName != null) {\r", "+\t\t\tif (nameRef instanceof SingleNameReference) {\r", "+\t\t\t\treturn this.matchesName(this.simpleName, ((SingleNameReference)nameRef).token);\r", "+\t\t\t} else { // QualifiedNameReference\r", "+\t\t\t\tchar[][] tokens = ((QualifiedNameReference)nameRef).tokens;\r", "+\t\t\t\tfor (int i = 0, max = tokens.length; i < max; i++){\r", "+\t\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])) return true;\r", "+\t\t\t\t}\r", "+\t\t\t\treturn false;\r", "+\t\t\t}\t\t\t\t\r", "+\t\t}\r", "+\t} else {\r", "+\t\tif (nameRef instanceof SingleNameReference){\r", "+\t\t\tif (binding instanceof TypeBinding){\r", "+\t\t\t\tif (!this.matchesType(this.simpleName, this.qualification, (TypeBinding) binding)){\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\treturn false; // must be a type binding\r", "+\t\t\t}\r", "+\t\t} else { // QualifiedNameReference\r", "+\t\t\tTypeBinding typeBinding = null;\r", "+\t\t\tQualifiedNameReference qNameRef = (QualifiedNameReference)nameRef;\r", "+\t\t\tchar[][] tokens = qNameRef.tokens;\r", "+\t\t\tint lastIndex = tokens.length-1;\r", "+\t\t\tswitch (qNameRef.bits & Statement.RestrictiveFlagMASK) {\r", "+\t\t\t\tcase BindingIds.FIELD : // reading a field\r", "+\t\t\t\t\ttypeBinding = ((FieldBinding)binding).declaringClass;\r", "+\t\t\t\t\t// no valid match amongst fields\r", "+\t\t\t\t\tint otherBindingsCount = qNameRef.otherBindings == null ? 0 : qNameRef.otherBindings.length;\t\t\t\r", "+\t\t\t\t\tlastIndex -= otherBindingsCount + 1;\r", "+\t\t\t\t\tif (lastIndex < 0) return false;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase BindingIds.LOCAL : // reading a local variable\r", "+\t\t\t\t\treturn false; // no type match in it\r", "+\t\t\t\tcase BindingIds.TYPE : //=============only type ==============\r", "+\t\t\t\t\ttypeBinding = (TypeBinding)binding;\r", "+\t\t\t}\r", "+\t\t\t// try to match all enclosing types for which the token matches as well.\r", "+\t\t\twhile (typeBinding != null && lastIndex >= 0){\r", "+\t\t\t\tif (matchesName(this.simpleName, tokens[lastIndex--])\r", "+\t\t\t\t\t&& matchesType(this.simpleName, this.qualification, typeBinding)) return true;\r", "+\t\t\t\t\t//&& matchesAsSubtype(this.simpleName, this.qualification, typeBinding)) return true;\r", "+\t\t\t\tif (typeBinding instanceof ReferenceBinding){\r", "+\t\t\t\t\ttypeBinding = ((ReferenceBinding)typeBinding).enclosingType();\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\ttypeBinding = null;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\treturn false;\r", "+\t\t} \r", "+\t}\r", "+\treturn true;\r", "+}\r", "- */\r", "-private int matchLevel(NameReference nameRef, boolean resolve) {\r", "-\tif (!resolve) {\r", "-\t\tif (this.simpleName == null) {\r", "-\t\t\treturn POSSIBLE_MATCH;\r", "-\t\t} else {\r", "-\t\t\tif (nameRef instanceof SingleNameReference) {\r", "-\t\t\t\tif (this.matchesName(this.simpleName, ((SingleNameReference)nameRef).token)) {\r", "-\t\t\t\t\treturn POSSIBLE_MATCH;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t\t\t}\r", "-\t\t\t} else { // QualifiedNameReference\r", "-\t\t\t\tchar[][] tokens = ((QualifiedNameReference)nameRef).tokens;\r", "-\t\t\t\tfor (int i = 0, max = tokens.length; i < max; i++){\r", "-\t\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])) \r", "-\t\t\t\t\t\treturn POSSIBLE_MATCH;\r", "-\t\t\t\t}\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t\t}\t\t\t\t\r", "-\t\t}\r", "-\t} else {\r", "-\t\tBinding binding = nameRef.binding;\r", "-\t\tif (binding == null) {\r", "-\t\t\treturn INACCURATE_MATCH;\r", "-\t\t} else {\r", "-\t\t\tif (nameRef instanceof SingleNameReference) {\r", "-\t\t\t\tif (binding instanceof TypeBinding) {\r", "-\t\t\t\t\treturn this.matchLevelForType(this.simpleName, this.qualification, (TypeBinding) binding);\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\treturn IMPOSSIBLE_MATCH; // must be a type binding\r", "-\t\t\t\t}\r", "-\t\t\t} else { // QualifiedNameReference\r", "-\t\t\t\tTypeBinding typeBinding = null;\r", "-\t\t\t\tQualifiedNameReference qNameRef = (QualifiedNameReference)nameRef;\r", "-\t\t\t\tchar[][] tokens = qNameRef.tokens;\r", "-\t\t\t\tint lastIndex = tokens.length-1;\r", "-\t\t\t\tswitch (qNameRef.bits & Statement.RestrictiveFlagMASK) {\r", "-\t\t\t\t\tcase BindingIds.FIELD : // reading a field\r", "-\t\t\t\t\t\ttypeBinding = ((FieldBinding)binding).declaringClass;\r", "-\t\t\t\t\t\t// no valid match amongst fields\r", "-\t\t\t\t\t\tint otherBindingsCount = qNameRef.otherBindings == null ? 0 : qNameRef.otherBindings.length;\t\t\t\r", "-\t\t\t\t\t\tlastIndex -= otherBindingsCount + 1;\r", "-\t\t\t\t\t\tif (lastIndex < 0) return IMPOSSIBLE_MATCH;\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase BindingIds.LOCAL : // reading a local variable\r", "-\t\t\t\t\t\treturn IMPOSSIBLE_MATCH; // no type match in it\r", "-\t\t\t\t\tcase BindingIds.TYPE : //=============only type ==============\r", "-\t\t\t\t\t\ttypeBinding = (TypeBinding)binding;\r", "-\t\t\t\t}\r", "-\t\t\t\t// try to match all enclosing types for which the token matches as well.\r", "-\t\t\t\twhile (typeBinding != null && lastIndex >= 0){\r", "-\t\t\t\t\tif (this.matchesName(this.simpleName, tokens[lastIndex--])) {\r", "-\t\t\t\t\t\tint level = this.matchLevelForType(this.simpleName, this.qualification, typeBinding);\r", "-\t\t\t\t\t\tif (level != IMPOSSIBLE_MATCH) {\r", "-\t\t\t\t\t\t\treturn level;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (typeBinding instanceof ReferenceBinding){\r", "-\t\t\t\t\t\ttypeBinding = ((ReferenceBinding)typeBinding).enclosingType();\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\ttypeBinding = null;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6413587d35aa754908884c00e4f60404", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r private int matchLevel(NameReference nameRef, boolean resolve)", "signatureAfterChange": "\r private boolean matches(NameReference nameRef, boolean resolve)", "diff": ["+ */\r", "+private boolean matches(NameReference nameRef, boolean resolve) {\r", "+\tBinding binding = nameRef.binding;\r", "+\tif (!resolve || binding == null || !binding.isValidBinding()) {\r", "+\t\tif (this.simpleName != null) {\r", "+\t\t\tif (nameRef instanceof SingleNameReference) {\r", "+\t\t\t\treturn this.matchesName(this.simpleName, ((SingleNameReference)nameRef).token);\r", "+\t\t\t} else { // QualifiedNameReference\r", "+\t\t\t\tchar[][] tokens = ((QualifiedNameReference)nameRef).tokens;\r", "+\t\t\t\tfor (int i = 0, max = tokens.length; i < max; i++){\r", "+\t\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])) return true;\r", "+\t\t\t\t}\r", "+\t\t\t\treturn false;\r", "+\t\t\t}\t\t\t\t\r", "+\t\t}\r", "+\t} else {\r", "+\t\tif (nameRef instanceof SingleNameReference){\r", "+\t\t\tif (binding instanceof TypeBinding){\r", "+\t\t\t\tif (!this.matchesType(this.simpleName, this.qualification, (TypeBinding) binding)){\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\treturn false; // must be a type binding\r", "+\t\t\t}\r", "+\t\t} else { // QualifiedNameReference\r", "+\t\t\tTypeBinding typeBinding = null;\r", "+\t\t\tQualifiedNameReference qNameRef = (QualifiedNameReference)nameRef;\r", "+\t\t\tchar[][] tokens = qNameRef.tokens;\r", "+\t\t\tint lastIndex = tokens.length-1;\r", "+\t\t\tswitch (qNameRef.bits & Statement.RestrictiveFlagMASK) {\r", "+\t\t\t\tcase BindingIds.FIELD : // reading a field\r", "+\t\t\t\t\ttypeBinding = ((FieldBinding)binding).declaringClass;\r", "+\t\t\t\t\t// no valid match amongst fields\r", "+\t\t\t\t\tint otherBindingsCount = qNameRef.otherBindings == null ? 0 : qNameRef.otherBindings.length;\t\t\t\r", "+\t\t\t\t\tlastIndex -= otherBindingsCount + 1;\r", "+\t\t\t\t\tif (lastIndex < 0) return false;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase BindingIds.LOCAL : // reading a local variable\r", "+\t\t\t\t\treturn false; // no type match in it\r", "+\t\t\t\tcase BindingIds.TYPE : //=============only type ==============\r", "+\t\t\t\t\ttypeBinding = (TypeBinding)binding;\r", "+\t\t\t}\r", "+\t\t\t// try to match all enclosing types for which the token matches as well.\r", "+\t\t\twhile (typeBinding != null && lastIndex >= 0){\r", "+\t\t\t\tif (matchesName(this.simpleName, tokens[lastIndex--])\r", "+\t\t\t\t\t&& matchesType(this.simpleName, this.qualification, typeBinding)) return true;\r", "+\t\t\t\t\t//&& matchesAsSubtype(this.simpleName, this.qualification, typeBinding)) return true;\r", "+\t\t\t\tif (typeBinding instanceof ReferenceBinding){\r", "+\t\t\t\t\ttypeBinding = ((ReferenceBinding)typeBinding).enclosingType();\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\ttypeBinding = null;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\treturn false;\r", "+\t\t} \r", "+\t}\r", "+\treturn true;\r", "+}\r", "- */\r", "-private int matchLevel(NameReference nameRef, boolean resolve) {\r", "-\tif (!resolve) {\r", "-\t\tif (this.simpleName == null) {\r", "-\t\t\treturn POSSIBLE_MATCH;\r", "-\t\t} else {\r", "-\t\t\tif (nameRef instanceof SingleNameReference) {\r", "-\t\t\t\tif (this.matchesName(this.simpleName, ((SingleNameReference)nameRef).token)) {\r", "-\t\t\t\t\treturn POSSIBLE_MATCH;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t\t\t}\r", "-\t\t\t} else { // QualifiedNameReference\r", "-\t\t\t\tchar[][] tokens = ((QualifiedNameReference)nameRef).tokens;\r", "-\t\t\t\tfor (int i = 0, max = tokens.length; i < max; i++){\r", "-\t\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])) \r", "-\t\t\t\t\t\treturn POSSIBLE_MATCH;\r", "-\t\t\t\t}\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t\t}\t\t\t\t\r", "-\t\t}\r", "-\t} else {\r", "-\t\tBinding binding = nameRef.binding;\r", "-\t\tif (binding == null) {\r", "-\t\t\treturn INACCURATE_MATCH;\r", "-\t\t} else {\r", "-\t\t\tif (nameRef instanceof SingleNameReference) {\r", "-\t\t\t\tif (binding instanceof TypeBinding) {\r", "-\t\t\t\t\treturn this.matchLevelForType(this.simpleName, this.qualification, (TypeBinding) binding);\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\treturn IMPOSSIBLE_MATCH; // must be a type binding\r", "-\t\t\t\t}\r", "-\t\t\t} else { // QualifiedNameReference\r", "-\t\t\t\tTypeBinding typeBinding = null;\r", "-\t\t\t\tQualifiedNameReference qNameRef = (QualifiedNameReference)nameRef;\r", "-\t\t\t\tchar[][] tokens = qNameRef.tokens;\r", "-\t\t\t\tint lastIndex = tokens.length-1;\r", "-\t\t\t\tswitch (qNameRef.bits & Statement.RestrictiveFlagMASK) {\r", "-\t\t\t\t\tcase BindingIds.FIELD : // reading a field\r", "-\t\t\t\t\t\ttypeBinding = ((FieldBinding)binding).declaringClass;\r", "-\t\t\t\t\t\t// no valid match amongst fields\r", "-\t\t\t\t\t\tint otherBindingsCount = qNameRef.otherBindings == null ? 0 : qNameRef.otherBindings.length;\t\t\t\r", "-\t\t\t\t\t\tlastIndex -= otherBindingsCount + 1;\r", "-\t\t\t\t\t\tif (lastIndex < 0) return IMPOSSIBLE_MATCH;\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase BindingIds.LOCAL : // reading a local variable\r", "-\t\t\t\t\t\treturn IMPOSSIBLE_MATCH; // no type match in it\r", "-\t\t\t\t\tcase BindingIds.TYPE : //=============only type ==============\r", "-\t\t\t\t\t\ttypeBinding = (TypeBinding)binding;\r", "-\t\t\t\t}\r", "-\t\t\t\t// try to match all enclosing types for which the token matches as well.\r", "-\t\t\t\twhile (typeBinding != null && lastIndex >= 0){\r", "-\t\t\t\t\tif (this.matchesName(this.simpleName, tokens[lastIndex--])) {\r", "-\t\t\t\t\t\tint level = this.matchLevelForType(this.simpleName, this.qualification, typeBinding);\r", "-\t\t\t\t\t\tif (level != IMPOSSIBLE_MATCH) {\r", "-\t\t\t\t\t\t\treturn level;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tif (typeBinding instanceof ReferenceBinding){\r", "-\t\t\t\t\t\ttypeBinding = ((ReferenceBinding)typeBinding).enclosingType();\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\ttypeBinding = null;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-}\r"]}], "num": 37797}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cd0659bab68522ce64eba9adc632c666", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c9a1be82b8407957300519c094f8704", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "2dddb417ec586348e3f1f4018c57d53f7e33523f", "commitAfterChange": "13c2c534306cc2384bb42a4a0d0b5074d0e3c150", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t} else if (this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)", "-\t\t\t  \t\t&& this.options.get(CompilerOptions.OPTION_TargetPlatform).equals(CompilerOptions.VERSION_1_1)) {", "-\t\t\t  \tif (didSpecifyTarget) {", "-\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget11\", (String)this.options.get(CompilerOptions.OPTION_Compliance))); //$NON-NLS-1$", "-\t\t\t  \t} else {", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "-\t\t\t  \t}", "+\t\t// if compliance 1.4 & source 1.3 => target is 1.2 if not specified", "+\t\tif (this.options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_3)){", "+\t\t\tif (didSpecifyCompliance", "+\t\t\t\t&& this.options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_4)", "+\t\t\t\t&& !didSpecifyTarget) {", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "+\t\t\t}", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3cfa6091727fd6c80bbeb7bc81ceebe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchPattern.java", "commitBeforeChange": "a5c56b9d9a1a6a7a2412b9e4fe79595e9a454729", "commitAfterChange": "808f8a4c125739a8b2d2237ba90c04dc1390f0b7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tvoid storeTypeSignaturesAndArguments(IType type)", "signatureAfterChange": " \tvoid storeTypeSignaturesAndArguments(IType type)", "diff": ["-\t\tif (type instanceof ParameterizedSourceType) {", "-\t\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(((ParameterizedSourceType)type).genericTypeSignature);", "-\t\t\tsetTypeArguments(Util.getAllTypeArguments(this.typeSignatures));", "-\t\t} else if (type instanceof ParameterizedBinaryType) {", "-\t\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(((ParameterizedBinaryType)type).genericTypeSignature);", "+\t\tif (type.isParameterized()) {", "+\t\t\tString signature = new BindingKey(type.getKey()).toSignature();", "+\t\t\tthis.typeSignatures = Util.splitTypeLevelsSignature(signature);"]}], "num": 10223}
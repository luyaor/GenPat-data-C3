{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c046ceb693da92d4cd7327bc30e8cc4c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6623284c5fa69abb13400aff2ef599d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java", "commitBeforeChange": "5ae0f68de39ccf7971db3eb1a4e8517f51056d99", "commitAfterChange": "a8c43fb1703bc9585d371b45c5bc751b66052e18", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \tpublic ASTNode createInstance(Class nodeClass)", "signatureAfterChange": " \tpublic ASTNode createInstance(Class nodeClass)", "diff": ["-\t\t\tthrow new RuntimeException(\"Unable to create instance\", e); //$NON-NLS-1$", "+\t\t\t// all AST node classes have a Foo(AST) constructor", "+\t\t\t// therefore nodeClass is not legit", "+\t\t\tthrow new IllegalArgumentException();", "-\t\t\tthrow new RuntimeException(\"Unable to create instance\", e); //$NON-NLS-1$", "+\t\t\t// all concrete AST node classes can be instantiated", "+\t\t\t// therefore nodeClass is not legit", "+\t\t\tthrow new IllegalArgumentException();", "-\t\t\tthrow new RuntimeException(\"Unable to create instance\", e); //$NON-NLS-1$", "+\t\t\t// all AST node classes have an accessible Foo(AST) constructor", "+\t\t\t// therefore nodeClass is not legit", "+\t\t\tthrow new IllegalArgumentException();", "-\t\t\tthrow new RuntimeException(\"Unable to create instance\", e); //$NON-NLS-1$", "+\t\t\t// concrete AST node classes do not die in the constructor", "+\t\t\t// therefore nodeClass is not legit", "+\t\t\tthrow new IllegalArgumentException();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f6e9f016cb4b19a83cf3c9e8dcb86df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ASTRewrite.java", "commitBeforeChange": "c3590adfc9853ce0ca838355d0f345ce67df315f", "commitAfterChange": "c2ee90cb5825ba198ab6345fa6246f082e9ea349", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic TextEdit rewriteAST() throws JavaModelException, IllegalArgumentException", "signatureAfterChange": " \tpublic TextEdit rewriteAST() throws JavaModelException, IllegalArgumentException", "diff": ["-\t\t\tthrow new IllegalArgumentException(\"This API can only be used if the AST is created from a compilation unit\"); //$NON-NLS-1$", "+\t\t\tthrow new IllegalArgumentException(\"This API can only be used if the AST is created from a compilation unit or class file\"); //$NON-NLS-1$", "-\t\tif (!(typeRoot instanceof ICompilationUnit)) {", "-\t\t\tthrow new IllegalArgumentException(\"This API can only be used if the AST is created from a compilation unit\"); //$NON-NLS-1$", "+\t\tif (typeRoot == null || typeRoot.getBuffer() == null) {", "+\t\t\tthrow new IllegalArgumentException(\"This API can only be used if the AST is created from a compilation unit or class file\"); //$NON-NLS-1$", "-\t\tICompilationUnit cu= (ICompilationUnit) typeRoot;", "-\t\tchar[] content= cu.getBuffer().getCharacters();", "+\t\tchar[] content= typeRoot.getBuffer().getCharacters();", "-\t\tString lineDelim= cu.findRecommendedLineSeparator();", "-\t\tMap options= cu.getJavaProject().getOptions(true);", "+\t\tString lineDelim= typeRoot.findRecommendedLineSeparator();", "+\t\tMap options= typeRoot.getJavaProject().getOptions(true);"]}], "num": 27388}
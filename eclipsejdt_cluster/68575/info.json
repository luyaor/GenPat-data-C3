{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f4c25dd6740ace7adae5a0f4cc0c38b3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36a4a36597eb843ab39ad14720029cc0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "525a704f8fa6ccfd1b3f6df971478bd49aca39bd", "commitAfterChange": "6c4f830be0186c105d833a31f2a24dac2f9ecb1d", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\tPackageBinding currentPackage = unitScope.fPackage; ", "+\t\tHashtableOfObject typeOrPackageCache = unitScope.typeOrPackageCache;", "+\t\tif (typeOrPackageCache != null) {", "+\t\t\tBinding binding = (Binding) typeOrPackageCache.get(name);", "+\t\t\tif (binding != null) { // can also include NotFound ProblemReferenceBindings if we already know this name is not found", "+\t\t\t\tif (binding instanceof ImportBinding) { // single type import cached in faultInImports(), replace it in the cache with the type", "+\t\t\t\t\tImportReference importReference = ((ImportBinding) binding).reference;", "+\t\t\t\t\tif (importReference != null) importReference.used = true;", "+\t\t\t\t\ttypeOrPackageCache.put(name, binding = ((ImportBinding) binding).resolvedImport); // already know its visible", "+\t\t\t\t}", "+\t\t\t\tif (foundType != null && binding.problemId() != Ambiguous)", "+\t\t\t\t\treturn foundType; // problem type from above supercedes NotFound type but not Ambiguous import case", "+\t\t\t\treturn binding; // cached type or package found in previous walk below", "+\t\t\t}", "+\t\t}", "+", "-\t\t\t// check single type imports.", "-", "-\t\t\tif (imports != null) {", "-\t\t\t\tHashtableOfObject typeImports = unitScope.resolvedSingeTypeImports;", "-\t\t\t\tif (typeImports != null) {", "-\t\t\t\t\tObject typeImport = typeImports.get(name);", "-\t\t\t\t\tif (typeImport != null) {", "-\t\t\t\t\t\tif (typeImport instanceof ReferenceBinding)", "-\t\t\t\t\t\t\treturn (ReferenceBinding) typeImport; // cached from on-demand search below", "-\t\t\t\t\t\tImportReference importReference = ((ImportBinding) typeImport).reference;", "-\t\t\t\t\t\tif (importReference != null) importReference.used = true;", "-\t\t\t\t\t\treturn ((ImportBinding) typeImport).resolvedImport; // already know its visible", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// walk all the imports since resolvedSingleTypeImports is not yet initialized", "-\t\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {", "-\t\t\t\t\t\tImportBinding typeImport = imports[i];", "-\t\t\t\t\t\tif (!typeImport.onDemand) {", "-\t\t\t\t\t\t\tif (CharOperation.equals(typeImport.compoundName[typeImport.compoundName.length - 1], name)) {", "-\t\t\t\t\t\t\t\tBinding resolvedImport = unitScope.resolveSingleImport(typeImport);", "-\t\t\t\t\t\t\t\tif (resolvedImport != null && resolvedImport instanceof TypeBinding) {", "-\t\t\t\t\t\t\t\t\tImportReference importReference = typeImport.reference;", "-\t\t\t\t\t\t\t\t\tif (importReference != null)", "-\t\t\t\t\t\t\t\t\t\timportReference.used = true;", "-\t\t\t\t\t\t\t\t\treturn resolvedImport; // already know its visible", "-\t\t\t\t\t\t\t\t}", "+\t\t\tif (imports != null && typeOrPackageCache == null) { // walk single type imports since faultInImports() has not run yet", "+\t\t\t\tfor (int i = 0, length = imports.length; i < length; i++) {", "+\t\t\t\t\tImportBinding typeImport = imports[i];", "+\t\t\t\t\tif (!typeImport.onDemand) {", "+\t\t\t\t\t\tif (CharOperation.equals(typeImport.compoundName[typeImport.compoundName.length - 1], name)) {", "+\t\t\t\t\t\t\tBinding resolvedImport = unitScope.resolveSingleImport(typeImport);", "+\t\t\t\t\t\t\tif (resolvedImport != null && resolvedImport instanceof TypeBinding) {", "+\t\t\t\t\t\t\t\tImportReference importReference = typeImport.reference;", "+\t\t\t\t\t\t\t\tif (importReference != null)", "+\t\t\t\t\t\t\t\t\timportReference.used = true;", "+\t\t\t\t\t\t\t\treturn resolvedImport; // already know its visible", "+", "+\t\t\tPackageBinding currentPackage = unitScope.fPackage; ", "-\t\t\tif (binding instanceof ReferenceBinding) return binding; // type is always visible to its own package", "+\t\t\tif (binding instanceof ReferenceBinding) {", "+\t\t\t\tif (typeOrPackageCache != null)", "+\t\t\t\t\ttypeOrPackageCache.put(name, binding);", "+\t\t\t\treturn binding; // type is always visible to its own package", "+\t\t\t}", "-\t\t\t\t\t\t\t\tif (foundInImport)", "+\t\t\t\t\t\t\t\tif (foundInImport) {", "-\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, Ambiguous);", "+\t\t\t\t\t\t\t\t\ttemp = new ProblemReferenceBinding(name, Ambiguous);", "+\t\t\t\t\t\t\t\t\tif (typeOrPackageCache != null)", "+\t\t\t\t\t\t\t\t\t\ttypeOrPackageCache.put(name, temp);", "+\t\t\t\t\t\t\t\t\treturn temp;", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t// put in single import cache so we can avoid doing on demand walk again", "-\t\t\t\t\tif (unitScope.resolvedSingeTypeImports != null)", "-\t\t\t\t\t\tunitScope.resolvedSingeTypeImports.put(name, type);", "+\t\t\t\t\tif (typeOrPackageCache != null)", "+\t\t\t\t\t\ttypeOrPackageCache.put(name, type);", "-\t\t\tif (packageBinding != null) return packageBinding;", "+\t\t\tif (packageBinding != null) {", "+\t\t\t\tif (typeOrPackageCache != null)", "+\t\t\t\t\ttypeOrPackageCache.put(name, packageBinding);", "+\t\t\t\treturn packageBinding;", "+\t\t\t}", "-\t\tif (foundType != null) return foundType; // problem type from above", "-\t\treturn new ProblemReferenceBinding(name, NotFound);", "+\t\tif (foundType == null) {", "+\t\t\tfoundType = new ProblemReferenceBinding(name, NotFound);", "+\t\t\tif (typeOrPackageCache != null)", "+\t\t\t\ttypeOrPackageCache.put(name, foundType);", "+\t\t}", "+\t\treturn foundType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98aa77429fdd538424d1ac90c0125a41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "5c930a2be2f56a634252cd32fd5425aacd603534", "commitAfterChange": "eb4f7811e5216181c33caa5f1f098b6e53cc8ce4", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 54, "signatureBeforeChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "signatureAfterChange": " \tfinal Binding getTypeOrPackage(char[] name, int mask)", "diff": ["-\t\t\t\t\t\t\t\t\t\t\t|| environment().options.complianceLevel >= ClassFileConstants.JDK1_4) {", "+\t\t\t\t\t\t\t\t\t\t\t|| compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4) {", "-\t\t\tif (binding != null) {", "+\t\t\tif (binding != null) { // can also include NotFound ProblemReferenceBindings if we already know this name is not found", "-\t\t\t\tif ((mask & Binding.TYPE) != 0 && binding instanceof ReferenceBinding)", "-\t\t\t\t\treturn binding; // cached type found in previous walk below", "+\t\t\t\tif ((mask & Binding.TYPE) != 0) {", "+\t\t\t\t\tif (foundType != null && foundType.problemId() != NotVisible && binding.problemId() != Ambiguous)", "+\t\t\t\t\t\treturn foundType; // problem type from above supercedes NotFound type but not Ambiguous import case", "+\t\t\t\t\tif (binding instanceof ReferenceBinding)", "+\t\t\t\t\t\treturn binding; // cached type found in previous walk below", "+\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (foundInImport)", "+\t\t\t\t\t\t\t\tif (foundInImport) {", "-\t\t\t\t\t\t\t\t\treturn new ProblemReferenceBinding(name, Ambiguous);", "+\t\t\t\t\t\t\t\t\ttemp = new ProblemReferenceBinding(name, Ambiguous);", "+\t\t\t\t\t\t\t\t\tif (typeOrPackageCache != null)", "+\t\t\t\t\t\t\t\t\t\ttypeOrPackageCache.put(name, temp);", "+\t\t\t\t\t\t\t\t\treturn temp;", "+\t\t\t\t\t\t\t\t}", "-\t\tif (foundType != null) return foundType; // problem type from above", "-\t\treturn new ProblemReferenceBinding(name, NotFound);", "+\t\tif (foundType == null) {", "+\t\t\tfoundType = new ProblemReferenceBinding(name, NotFound);", "+\t\t\tif (typeOrPackageCache != null && (mask & Binding.PACKAGE) != 0) // only put NotFound type in cache if you know its not a package", "+\t\t\t\ttypeOrPackageCache.put(name, foundType);", "+\t\t}", "+\t\treturn foundType;"]}], "num": 68575}
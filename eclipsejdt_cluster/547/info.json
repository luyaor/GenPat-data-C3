{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50e918402714e41b3ef5544c8d1ffeab", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72f8251232f144c2bd321d09d55abe56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "  \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "signatureAfterChange": "  \tprivate void computeExpectedTypes(ASTNode parent, ASTNode node, Scope scope)", "diff": ["-\t\t\tTypeVariableBinding[] typeVariables = ((ReferenceBinding)ref.resolvedType).typeVariables();", "-\t\t\tint length = ref.typeArguments == null ? 0 : ref.typeArguments.length;", "-\t\t\tif(typeVariables != null && typeVariables.length >= length) {", "-\t\t\t\tint index = length - 1;", "-\t\t\t\twhile(index > -1 && ref.typeArguments[index] != node) index--;", "-", "-\t\t\t\tTypeBinding bound = typeVariables[index].firstBound;", "-\t\t\t\taddExpectedType(bound == null ? scope.getJavaLangObject() : bound, scope);", "+\t\t\tTypeBinding expected = null;", "+\t\t\tif (this.parser.enclosingNode instanceof AbstractVariableDeclaration ||", "+\t\t\t\t\tthis.parser.enclosingNode instanceof ReturnStatement) {", "+\t\t\t\t// completing inside the diamond", "+\t\t\t\tif (this.parser.enclosingNode instanceof AbstractVariableDeclaration) {", "+\t\t\t\t\tAbstractVariableDeclaration abstractVariableDeclaration = (AbstractVariableDeclaration) this.parser.enclosingNode;", "+\t\t\t\t\texpected = abstractVariableDeclaration.initialization != null ? abstractVariableDeclaration.initialization.expectedType() : null;\t\t\t\t\t", "+\t\t\t\t} else {", "+\t\t\t\t\tReturnStatement returnStatement = (ReturnStatement) this.parser.enclosingNode;", "+\t\t\t\t\tif (returnStatement.expression != null) {", "+\t\t\t\t\t\texpected = returnStatement.expression.expectedType();", "+\t\t\t\t\t}", "+\t\t\t\t}\t", "+\t\t\t\taddExpectedType(expected, scope);", "+\t\t\t} else {", "+\t\t\t\tTypeVariableBinding[] typeVariables = ((ReferenceBinding)ref.resolvedType).typeVariables();", "+\t\t\t\tint length = ref.typeArguments == null ? 0 : ref.typeArguments.length;", "+\t\t\t\tif(typeVariables != null && typeVariables.length >= length) {", "+\t\t\t\t\tint index = length - 1;", "+\t\t\t\t\twhile(index > -1 && ref.typeArguments[index] != node) index--;", "+\t", "+\t\t\t\t\tTypeBinding bound = typeVariables[index].firstBound;", "+\t\t\t\t\taddExpectedType(bound == null ? scope.getJavaLangObject() : bound, scope);", "+\t\t\t\t}", "-\t\t\tTypeVariableBinding[] typeVariables = ((ReferenceBinding)ref.resolvedType).typeVariables();", "-\t\t\tif(typeVariables != null) {", "-\t\t\t\tint iLength = arguments == null ? 0 : arguments.length;", "-\t\t\t\tdone: for (int i = 0; i < iLength; i++) {", "-\t\t\t\t\tint jLength = arguments[i] == null ? 0 : arguments[i].length;", "-\t\t\t\t\tfor (int j = 0; j < jLength; j++) {", "-\t\t\t\t\t\tif(arguments[i][j] == node && typeVariables.length > j) {", "-\t\t\t\t\t\t\tTypeBinding bound = typeVariables[j].firstBound;", "-\t\t\t\t\t\t\taddExpectedType(bound == null ? scope.getJavaLangObject() : bound, scope);", "-\t\t\t\t\t\t\tbreak done;", "+\t\t\tTypeBinding expected = null;", "+\t\t\tif (this.parser.enclosingNode instanceof AbstractVariableDeclaration ||", "+\t\t\t\t\tthis.parser.enclosingNode instanceof ReturnStatement) {", "+\t\t\t\t// completing inside the diamond", "+\t\t\t\tif (this.parser.enclosingNode instanceof AbstractVariableDeclaration) {", "+\t\t\t\t\tAbstractVariableDeclaration abstractVariableDeclaration = (AbstractVariableDeclaration) this.parser.enclosingNode;", "+\t\t\t\t\texpected = abstractVariableDeclaration.initialization != null ? abstractVariableDeclaration.initialization.expectedType() : null;", "+\t\t\t\t} else {", "+\t\t\t\t\tReturnStatement returnStatement = (ReturnStatement) this.parser.enclosingNode;", "+\t\t\t\t\tif (returnStatement.expression != null) {", "+\t\t\t\t\t\texpected = returnStatement.expression.expectedType();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\taddExpectedType(expected, scope);", "+\t\t\t} else {", "+\t\t\t\tTypeVariableBinding[] typeVariables = ((ReferenceBinding)ref.resolvedType).typeVariables();", "+\t\t\t\tif(typeVariables != null) {", "+\t\t\t\t\tint iLength = arguments == null ? 0 : arguments.length;", "+\t\t\t\t\tdone: for (int i = 0; i < iLength; i++) {", "+\t\t\t\t\t\tint jLength = arguments[i] == null ? 0 : arguments[i].length;", "+\t\t\t\t\t\tfor (int j = 0; j < jLength; j++) {", "+\t\t\t\t\t\t\tif(arguments[i][j] == node && typeVariables.length > j) {", "+\t\t\t\t\t\t\t\tTypeBinding bound = typeVariables[j].firstBound;", "+\t\t\t\t\t\t\t\taddExpectedType(bound == null ? scope.getJavaLangObject() : bound, scope);", "+\t\t\t\t\t\t\t\tbreak done;", "+\t\t\t\t\t\t\t}", "-\t\t\t\tReferenceBinding[] bindings = thrownExceptionFinder.find((TryStatement) parent, (BlockScope)scope);", "+\t\t\t\tthrownExceptionFinder.processThrownExceptions((TryStatement) parent, (BlockScope)scope);", "+\t\t\t\tReferenceBinding[] bindings = thrownExceptionFinder.getThrownUncaughtExceptions();", "+\t\t\t\tReferenceBinding[] alreadyCaughtExceptions = thrownExceptionFinder.getAlreadyCaughtExceptions();", "+\t\t\t\tReferenceBinding[] discouragedExceptions = thrownExceptionFinder.getDiscouragedExceptions();", "+\t\t\t\t}", "+\t\t\t\tif (alreadyCaughtExceptions != null && alreadyCaughtExceptions.length > 0) {", "+\t\t\t\t\tfor (int i = 0; i < alreadyCaughtExceptions.length; i++) {", "+\t\t\t\t\t\taddForbiddenBindings(alreadyCaughtExceptions[i]);", "+\t\t\t\t\t\tthis.knownTypes.put(CharOperation.concat(alreadyCaughtExceptions[i].qualifiedPackageName(), alreadyCaughtExceptions[i].qualifiedSourceName(), '.'), KNOWN_TYPE_WITH_KNOWN_CONSTRUCTORS);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (discouragedExceptions != null && discouragedExceptions.length > 0) {", "+\t\t\t\t\tfor (int i = 0; i < discouragedExceptions.length; i++) {", "+\t\t\t\t\t\taddUninterestingBindings(discouragedExceptions[i]);", "+\t\t\t\t\t\t// do not insert into known types. We do need these types to come from", "+\t\t\t\t\t\t// searchAllTypes(..) albeit with lower relevance", "+\t\t\t\t\t}", "+\t\t\t\tif (this.assistNodeIsInsideCase &&", "+\t\t\t\t\t\tswitchStatement.expression.resolvedType.id == TypeIds.T_JavaLangString &&", "+\t\t\t\t\t\tthis.compilerOptions.complianceLevel >= ClassFileConstants.JDK1_7) {", "+\t\t\t\t\t// set the field to true even though the expected types array will contain String as", "+\t\t\t\t\t// expected type to avoid traversing the array in every case later on.", "+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=343476", "+\t\t\t\t\tthis.assistNodeIsString = true;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8e46437a7bedf855ec97bc0f5e22ca1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": " public FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "signatureAfterChange": " public FieldBinding generateReadSequence(BlockScope currentScope, CodeStream codeStream)", "diff": ["-", "-\tint otherBindingsCount = this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length;", "+\tint otherBindingsCount = this.otherBindings == null ? 0 : this.otherBindings.length;", "-\tFieldBinding lastFieldBinding = null;", "-\tTypeBinding lastGenericCast = null;", "-", "+\tFieldBinding lastFieldBinding;", "+\tTypeBinding lastGenericCast;", "+\tTypeBinding lastReceiverType;", "+\tboolean complyTo14 = currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4;", "+\t", "-\t\t\tlastFieldBinding = (FieldBinding) this.codegenBinding;", "+\t\t\tlastFieldBinding = ((FieldBinding) this.binding).original();", "+\t\t\tlastReceiverType = this.actualReceiverType;", "-\t\t\t\tif (lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "+\t\t\t\tif (lastFieldBinding.canBeSeenBy(this.actualReceiverType, this, currentScope)) {", "+\t\t\tlastFieldBinding = null;", "+\t\t\tlastGenericCast = null;", "+\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.binding;", "+\t\t\tlastReceiverType = localBinding.type;", "-\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.codegenBinding;", "+\t\t\tbreak;", "+\t\tdefault : // should not occur", "+\t\t\treturn null;\t\t\t", "-", "-\tif (this.otherCodegenBindings != null) {", "+\tint positionsLength = this.sourcePositions.length;", "+\tFieldBinding initialFieldBinding = lastFieldBinding; // can be null if initial was a local binding", "+\tif (this.otherBindings != null) {", "-\t\t\tFieldBinding nextField = this.otherCodegenBindings[i];", "+\t\t\tint pc = codeStream.position;", "+\t\t\tFieldBinding nextField = this.otherBindings[i].original();", "-\t\t\t\tif (needValue) {", "-\t\t\t\t\tif (lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "-\t\t\t\t\t\tConstant fieldConstant = lastFieldBinding.constant();", "-\t\t\t\t\t\tif (fieldConstant != Constant.NotAConstant) {", "-\t\t\t\t\t\t\tif (lastFieldBinding != this.codegenBinding && !lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "-\t\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tcodeStream.generateConstant(fieldConstant, 0);", "-\t\t\t\t\t\t} else if (lastFieldBinding.isStatic()) {", "-\t\t\t\t\t\t\tcodeStream.getstatic(lastFieldBinding);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.getfield(lastFieldBinding);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcodeStream.generateEmulatedReadAccessForField(lastFieldBinding);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (lastGenericCast != null) codeStream.checkcast(lastGenericCast);", "-\t\t\t\t} else {", "-\t\t\t\t\tif (this.codegenBinding != lastFieldBinding && !lastFieldBinding.isStatic()){", "+\t\t\t\tConstant fieldConstant = lastFieldBinding.constant();", "+\t\t\t\tif (fieldConstant != Constant.NotAConstant) {", "+\t\t\t\t\tif (i > 0 && !lastFieldBinding.isStatic()) {", "+\t\t\t\t\t}", "+\t\t\t\t\tif (needValue) {", "+\t\t\t\t\t\tcodeStream.generateConstant(fieldConstant, 0);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (needValue || (i > 0 && complyTo14) || lastGenericCast != null) {", "+\t\t\t\t\t\tif (lastFieldBinding.canBeSeenBy(lastReceiverType, this, currentScope)) {", "+\t\t\t\t\t\t\tMethodBinding accessor = this.syntheticReadAccessors == null ? null : this.syntheticReadAccessors[i];", "+\t\t\t\t\t\t\tif (accessor == null) {", "+\t\t\t\t\t\t\t\tTypeBinding constantPoolDeclaringClass = CodeStream.getConstantPoolDeclaringClass(currentScope, lastFieldBinding, lastReceiverType, i == 0 && this.indexOfFirstFieldBinding == 1);", "+\t\t\t\t\t\t\t\tif (lastFieldBinding.isStatic()) {", "+\t\t\t\t\t\t\t\t\tcodeStream.fieldAccess(Opcodes.OPC_getstatic, lastFieldBinding, constantPoolDeclaringClass);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tcodeStream.fieldAccess(Opcodes.OPC_getfield, lastFieldBinding, constantPoolDeclaringClass);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, accessor, null /* default declaringClass */);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.generateEmulatedReadAccessForField(lastFieldBinding);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (lastGenericCast != null) {", "+\t\t\t\t\t\t\tcodeStream.checkcast(lastGenericCast);", "+\t\t\t\t\t\t\tlastReceiverType = lastGenericCast;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tlastReceiverType = lastFieldBinding.type;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!needValue) codeStream.pop();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (lastFieldBinding == initialFieldBinding) {", "+\t\t\t\t\t\t\tif (lastFieldBinding.isStatic()){", "+\t\t\t\t\t\t\t\t// if no valueRequired, still need possible side-effects of <clinit> invocation, if field belongs to different class", "+\t\t\t\t\t\t\t\tif (initialFieldBinding.declaringClass != this.actualReceiverType.erasure()) {", "+\t\t\t\t\t\t\t\t\tif (lastFieldBinding.canBeSeenBy(lastReceiverType, this, currentScope)) {", "+\t\t\t\t\t\t\t\t\t\tMethodBinding accessor = this.syntheticReadAccessors == null ? null : this.syntheticReadAccessors[i];", "+\t\t\t\t\t\t\t\t\t\tif (accessor == null) {", "+\t\t\t\t\t\t\t\t\t\t\tTypeBinding constantPoolDeclaringClass = CodeStream.getConstantPoolDeclaringClass(currentScope, lastFieldBinding, lastReceiverType, i == 0 && this.indexOfFirstFieldBinding == 1);", "+\t\t\t\t\t\t\t\t\t\t\tcodeStream.fieldAccess(Opcodes.OPC_getstatic, lastFieldBinding, constantPoolDeclaringClass);", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tcodeStream.invoke(Opcodes.OPC_invokestatic, accessor, null /* default declaringClass */);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tcodeStream.generateEmulatedReadAccessForField(lastFieldBinding);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (!lastFieldBinding.isStatic()){", "+\t\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "+\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tlastReceiverType = lastFieldBinding.type;", "+\t\t\t\t\t}", "+\t\t\t\t\tif ((positionsLength - otherBindingsCount + i - 1) >= 0) {", "+\t\t\t\t\t\tint fieldPosition = (int) (this.sourcePositions[positionsLength - otherBindingsCount + i - 1] >>>32);", "+\t\t\t\t\t\tcodeStream.recordPositionsFrom(pc, fieldPosition);", "-\t\t\tif (lastFieldBinding != null && !lastFieldBinding.canBeSeenBy(getReceiverType(currentScope), this, currentScope)) {", "+\t\t\tif (lastFieldBinding != null && !lastFieldBinding.canBeSeenBy(lastReceiverType, this, currentScope)) {", "-\t\t\t}", "+\t\t\t}\t\t\t", "-\treturn lastFieldBinding;", "+\treturn lastFieldBinding;\t"]}], "num": 547}
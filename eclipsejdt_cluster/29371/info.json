{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d2ffa5d53e8ec92a1257b2a64bd97fc2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6596ac88e88e56ed181292418b3b698a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "8a64589617f7b80b7f12bb3f773ab58c605663c7", "commitAfterChange": "6585c7471e2cc73387fb0d652a600f2678de9051", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic String format( \t\tString source, \t\tint indentationLevel, \t\tint[] positions, \t\tString lineSeparator)", "signatureAfterChange": " \tpublic String format( \t\tString source, \t\tint indentationLevel, \t\tint[] positions, \t\tString lineSeparator)", "diff": ["-\t\treturn format(K_UNKNOWN, source, indentationLevel, positions, lineSeparator, JavaCore.getOptions());", "+\t\tTextEdit textEdit = probeFormatting(source, indentationLevel, lineSeparator, 0, source.length());", "+\t\tif (textEdit == null) {", "+\t\t\treturn source;", "+\t\t} else {", "+\t\t\tDocument document = new Document(source);", "+\t\t\ttry {", "+\t\t\t\ttextEdit.apply(document, TextEdit.UPDATE_REGIONS);", "+\t\t\t} catch (MalformedTreeException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t} catch (BadLocationException e) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t}", "+\t\t\treturn document.get();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0d3148aa83bc9d73f1f341acb19a927", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "12ab85e88163bdc5e704b08dc22b1dcffd911363", "commitAfterChange": "ba623d582045575b43eee2b86be165ff58225746", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \t \tprivate int rewriteOptionalQualifier(ASTNode parent, StructuralPropertyDescriptor property, int startPos)", "signatureAfterChange": " \t \tprivate int rewriteOptionalQualifier(ASTNode parent, StructuralPropertyDescriptor property, int startPos)", "diff": ["-\t\t\t\t\treturn offset + length;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\treturn getScanner().getTokenEndOffset(ITerminalSymbols.TokenNameDOT, offset + length);", "+\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\thandleException(e);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "-\t\treturn doVisit(parent, property, startPos);", "+\t\tObject node= getOriginalValue(parent, property);", "+\t\tif (node == null) {", "+\t\t\treturn startPos;", "+\t\t}", "+\t\tint pos= doVisit((ASTNode) node);", "+\t\ttry {", "+\t\t\treturn getScanner().getTokenEndOffset(ITerminalSymbols.TokenNameDOT, pos);", "+\t\t} catch (CoreException e) {", "+\t\t\thandleException(e);", "+\t\t}", "+\t\treturn pos;"]}], "num": 29371}
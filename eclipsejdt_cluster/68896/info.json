{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23f1286e1956c9cf3761ad1e5b2f5224", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "733ee61a964e5bee19db4cff08e448ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "76fc29f1af4e9ec86970c2a456c7b7805a597ea2", "commitAfterChange": "d6d10602861f99a2e87d2ce2ba051c7b3da388a8", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  \tprivate CompilationUnitDeclaration resolve( \t\t\tCompilationUnitDeclaration unit, \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\t\tNodeSearcher nodeSearcher, \t\t\tboolean verifyMethods, \t\t\tboolean analyzeCode, \t\t\tboolean generateCode)", "signatureAfterChange": "  \tprivate CompilationUnitDeclaration resolve( \t\t\tCompilationUnitDeclaration unit, \t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit, \t\t\tNodeSearcher nodeSearcher, \t\t\tboolean verifyMethods, \t\t\tboolean analyzeCode, \t\t\tboolean generateCode)", "diff": ["-\t\t\t\t// fault in fields & methods", "-\t\t\t\tunit.scope.faultInTypes();", "-\t\t\t\tif (unit.scope != null && verifyMethods) {", "-\t\t\t\t\t// http://dev.eclipse.org/bugs/show_bug.cgi?id=23117", "- \t\t\t\t\t// verify inherited methods", "-\t\t\t\t\tunit.scope.verifyMethods(this.lookupEnvironment.methodVerifier());", "+\t\t\t\tCompilationUnitDeclaration previousUnit = this.lookupEnvironment.unitBeingCompleted;", "+\t\t\t\tthis.lookupEnvironment.unitBeingCompleted = unit;", "+\t\t\t\ttry {", "+\t\t\t\t\t// fault in fields & methods", "+\t\t\t\t\tunit.scope.faultInTypes();", "+\t\t\t\t\tif (unit.scope != null && verifyMethods) {", "+\t\t\t\t\t\t// http://dev.eclipse.org/bugs/show_bug.cgi?id=23117", "+\t \t\t\t\t\t// verify inherited methods", "+\t\t\t\t\t\tunit.scope.verifyMethods(this.lookupEnvironment.methodVerifier());", "+\t\t\t\t\t}", "+\t\t\t\t\t// type checking", "+\t\t\t\t\tunit.resolve();", "+\t", "+\t\t\t\t\t// flow analysis", "+\t\t\t\t\tif (analyzeCode) unit.analyseCode();", "+\t", "+\t\t\t\t\t// code generation", "+\t\t\t\t\tif (generateCode) unit.generateCode();", "+\t", "+\t\t\t\t\t// finalize problems (suppressWarnings)", "+\t\t\t\t\tunit.finalizeProblems();", "+\t\t\t\t} finally {", "+\t\t\t\t\tthis.lookupEnvironment.unitBeingCompleted = previousUnit; // paranoia, always null in org.eclipse.jdt.core.tests.dom.RunAllTests", "-\t\t\t\t// type checking", "-\t\t\t\tunit.resolve();", "-", "-\t\t\t\t// flow analysis", "-\t\t\t\tif (analyzeCode) unit.analyseCode();", "-", "-\t\t\t\t// code generation", "-\t\t\t\tif (generateCode) unit.generateCode();", "-", "-\t\t\t\t// finalize problems (suppressWarnings)", "-\t\t\t\tunit.finalizeProblems();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b59085150355a13df2c783df0ac01183", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalExtendedCompletionContext.java", "commitBeforeChange": "eaf368b1bbed77e5ac91194cb5cc62e7c3b2c07b", "commitAfterChange": "850c65069b948dc807fdf250e07cb482b9cf25c2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate void computeVisibleElementBindings()", "signatureAfterChange": "  \tprivate void computeVisibleElementBindings()", "diff": ["-\t\tthis.hasComputedVisibleElementBindings = true;", "-", "-\t\tScope scope = this.assistScope;", "-\t\tASTNode astNode = this.assistNode;", "-\t\tboolean notInJavadoc = this.completionContext.javadoc == 0;", "-", "-\t\tthis.visibleLocalVariables = new ObjectVector();", "-\t\tthis.visibleFields = new ObjectVector();", "-\t\tthis.visibleMethods = new ObjectVector();", "-\t\tthis.bindingsToNodes = new HashMap();", "-", "-\t\tReferenceContext referenceContext = scope.referenceContext();", "-\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "-\t\t\t// completion is inside a method body", "-\t\t\tsearchVisibleVariablesAndMethods(scope, this.visibleLocalVariables, this.visibleFields, this.visibleMethods, notInJavadoc);", "-\t\t} else if (referenceContext instanceof TypeDeclaration) {", "-\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) referenceContext;", "-\t\t\tFieldDeclaration[] fields = typeDeclaration.fields;", "-\t\t\tif (fields != null) {", "-\t\t\t\tdone : for (int i = 0; i < fields.length; i++) {", "-\t\t\t\t\tif (fields[i] instanceof Initializer) {", "-\t\t\t\t\t\tInitializer initializer = (Initializer) fields[i];", "-\t\t\t\t\t\tif (initializer.block.sourceStart <= astNode.sourceStart &&", "-\t\t\t\t\t\t\t\tastNode.sourceStart < initializer.bodyEnd) {", "-\t\t\t\t\t\t\t// completion is inside an initializer", "-\t\t\t\t\t\t\tsearchVisibleVariablesAndMethods(scope, this.visibleLocalVariables, this.visibleFields, this.visibleMethods, notInJavadoc);", "-\t\t\t\t\t\t\tbreak done;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tFieldDeclaration fieldDeclaration = fields[i];", "-\t\t\t\t\t\tif (fieldDeclaration.initialization != null &&", "-\t\t\t\t\t\t\t\tfieldDeclaration.initialization.sourceStart <= astNode.sourceStart &&", "-\t\t\t\t\t\t\t\tastNode.sourceEnd <= fieldDeclaration.initialization.sourceEnd) {", "-\t\t\t\t\t\t\t// completion is inside a field initializer", "-\t\t\t\t\t\t\tsearchVisibleVariablesAndMethods(scope, this.visibleLocalVariables, this.visibleFields, this.visibleMethods, notInJavadoc);", "-\t\t\t\t\t\t\tbreak done;", "+\t\tCompilationUnitDeclaration previousUnitBeingCompleted = this.lookupEnvironment.unitBeingCompleted;", "+\t\tthis.lookupEnvironment.unitBeingCompleted = this.compilationUnitDeclaration;", "+\t\ttry {", "+\t\t\tthis.hasComputedVisibleElementBindings = true;", "+\t", "+\t\t\tScope scope = this.assistScope;", "+\t\t\tASTNode astNode = this.assistNode;", "+\t\t\tboolean notInJavadoc = this.completionContext.javadoc == 0;", "+\t", "+\t\t\tthis.visibleLocalVariables = new ObjectVector();", "+\t\t\tthis.visibleFields = new ObjectVector();", "+\t\t\tthis.visibleMethods = new ObjectVector();", "+\t\t\tthis.bindingsToNodes = new HashMap();", "+\t", "+\t\t\tReferenceContext referenceContext = scope.referenceContext();", "+\t\t\tif (referenceContext instanceof AbstractMethodDeclaration) {", "+\t\t\t\t// completion is inside a method body", "+\t\t\t\tsearchVisibleVariablesAndMethods(scope, this.visibleLocalVariables, this.visibleFields, this.visibleMethods, notInJavadoc);", "+\t\t\t} else if (referenceContext instanceof TypeDeclaration) {", "+\t\t\t\tTypeDeclaration typeDeclaration = (TypeDeclaration) referenceContext;", "+\t\t\t\tFieldDeclaration[] fields = typeDeclaration.fields;", "+\t\t\t\tif (fields != null) {", "+\t\t\t\t\tdone : for (int i = 0; i < fields.length; i++) {", "+\t\t\t\t\t\tif (fields[i] instanceof Initializer) {", "+\t\t\t\t\t\t\tInitializer initializer = (Initializer) fields[i];", "+\t\t\t\t\t\t\tif (initializer.block.sourceStart <= astNode.sourceStart &&", "+\t\t\t\t\t\t\t\t\tastNode.sourceStart < initializer.bodyEnd) {", "+\t\t\t\t\t\t\t\t// completion is inside an initializer", "+\t\t\t\t\t\t\t\tsearchVisibleVariablesAndMethods(scope, this.visibleLocalVariables, this.visibleFields, this.visibleMethods, notInJavadoc);", "+\t\t\t\t\t\t\t\tbreak done;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tFieldDeclaration fieldDeclaration = fields[i];", "+\t\t\t\t\t\t\tif (fieldDeclaration.initialization != null &&", "+\t\t\t\t\t\t\t\t\tfieldDeclaration.initialization.sourceStart <= astNode.sourceStart &&", "+\t\t\t\t\t\t\t\t\tastNode.sourceEnd <= fieldDeclaration.initialization.sourceEnd) {", "+\t\t\t\t\t\t\t\t// completion is inside a field initializer", "+\t\t\t\t\t\t\t\tsearchVisibleVariablesAndMethods(scope, this.visibleLocalVariables, this.visibleFields, this.visibleMethods, notInJavadoc);", "+\t\t\t\t\t\t\t\tbreak done;", "+\t\t\t\t\t\t\t}", "+\t\t} finally {", "+\t\t\tthis.lookupEnvironment.unitBeingCompleted = previousUnitBeingCompleted;"]}], "num": 68896}
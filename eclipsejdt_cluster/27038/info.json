{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00e491c602b33acb81892b3649539dd3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1f66bd9d14c25176a5dbbd2b3ae8b04", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "0edd2a8da94febc0bef7418a02cfac9f1a30d36a", "commitAfterChange": "85f48e0f08275e1f81e9995073d5c4f69bfd0707", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": "  \tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env)", "signatureAfterChange": "  \tpublic int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments)", "diff": ["+\t\treturn parameterCompatibilityLevel(method, arguments, false);", "+\t}\t", "-\tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e83d9df06a17f0ffa40c59991cb85dba", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathMultiDirectory.java", "commitBeforeChange": "ccba397e4e9d73802c009a4349e321c86584df94", "commitAfterChange": "cec508cecafb7942c9eac67dcd1f12c464401c60", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": " \r \r NameEnvironmentAnswer findClass(String binaryFileName, String qualifiedPackageName, String qualifiedBinaryFileName)", "signatureAfterChange": " \r \r NameEnvironmentAnswer findSourceFile(\r \tString qualifiedSourceFileName,\r \tString qualifiedPackageName,\r \tchar[] typeName,\r \tString[] additionalSourceFilenames)", "diff": ["-NameEnvironmentAnswer findClass(String binaryFileName, String qualifiedPackageName, String qualifiedBinaryFileName) {\r", "-\tString[] additionalSourceFilenames = nameEnvironment.additionalSourceFilenames;\r", "-\tif (additionalSourceFilenames != null) {\r", "-\t\tif (!isPackage(qualifiedPackageName)) return null; // most common case\r", "+NameEnvironmentAnswer findSourceFile(\r", "+\tString qualifiedSourceFileName,\r", "+\tString qualifiedPackageName,\r", "+\tchar[] typeName,\r", "+\tString[] additionalSourceFilenames) {\r", "-\t\t// if an additional source file is waiting to be compiled, answer it\r", "-\t\t// BUT not if this is a secondary type search,\r", "-\t\t// if we answer the source file X.java which may no longer define Y\r", "-\t\t// then the binary type looking for Y will fail & think the class path is wrong\r", "-\t\t// let the recompile loop fix up dependents when Y has been deleted from X.java\r", "-\t\tString fullSourceName = sourcePath + qualifiedBinaryFileName.substring(0, qualifiedBinaryFileName.length() - 6) + \".java\"; //$NON-NLS-1$\r", "-\t\tfor (int i = 0, l = additionalSourceFilenames.length; i < l; i++)\r", "-\t\t\tif (fullSourceName.equals(additionalSourceFilenames[i]))\r", "-\t\t\t\treturn new NameEnvironmentAnswer(\r", "-\t\t\t\t\tnew SourceFile(fullSourceName, binaryFileName.substring(0, binaryFileName.length() - 6), qualifiedPackageName));\r", "-\t}\r", "-\r", "-\t// assume any class file found in this output folder would eventually be found...\r", "-\t// its possible with multiple source folders, that a class file should not be found associated\r", "-\t// with this source folder, but with another which we have yet to search\r", "-\treturn super.findClass(binaryFileName, qualifiedPackageName, qualifiedBinaryFileName);\r", "+\t// if an additional source file is waiting to be compiled, answer it\r", "+\t// BUT not if this is a secondary type search,\r", "+\t// if we answer the source file X.java which may no longer define Y\r", "+\t// then the binary type looking for Y will fail & think the class path is wrong\r", "+\t// let the recompile loop fix up dependents when Y has been deleted from X.java\r", "+\tString fullSourceName = sourcePath + qualifiedSourceFileName;\r", "+\tfor (int i = 0, l = additionalSourceFilenames.length; i < l; i++)\r", "+\t\tif (fullSourceName.equals(additionalSourceFilenames[i]))\r", "+\t\t\treturn new NameEnvironmentAnswer(\r", "+\t\t\t\tnew SourceFile(fullSourceName, typeName, CharOperation.splitOn('/', qualifiedPackageName.toCharArray())));\r", "+\treturn null;\r"]}], "num": 27038}
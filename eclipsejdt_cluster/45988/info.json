{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7292854b4e0acf92f81f126d876b5bb8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fad78ca23dcee6910e55546bddd44f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelStatus.java", "commitBeforeChange": "f39402d13165cb2a8baa9e8822f47cb5416f824f", "commitAfterChange": "c59f5d3873f087b004eace9b9fa6844d0400c666", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic String getMessage()", "signatureAfterChange": " \tpublic String getMessage()", "diff": ["+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+\t\t\t\tcase CP_CONTAINER_PATH_UNBOUND:", "+\t\t\t\t\tIPath path = this.fPath;", "+\t\t\t\t\tIJavaProject javaProject = (IJavaProject)fElements[0];", "+\t\t\t\t\tClasspathContainerInitializer initializer = JavaCore.getClasspathContainerInitializer(path.segment(0));", "+\t\t\t\t\tString description = null;", "+\t\t\t\t\tif (initializer != null) description = initializer.getDescription(path, javaProject);", "+\t\t\t\t\tif (description == null) description = path.makeRelative().toString();", "+\t\t\t\t\treturn Util.bind(\"classpath.unboundContainerPath\", description); //$NON-NLS-1$", "+", "+\t\t\t\tcase INVALID_CP_CONTAINER_ENTRY:", "+\t\t\t\t\tpath = this.fPath;", "+\t\t\t\t\tjavaProject = (IJavaProject)fElements[0];", "+\t\t\t\t\tIClasspathContainer container = null;", "+\t\t\t\t\tdescription = null;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tcontainer = JavaCore.getClasspathContainer(path, javaProject);", "+\t\t\t\t\t} catch(JavaModelException e){", "+\t\t\t\t\t}", "+\t\t\t\t\tif (container == null) {", "+\t\t\t\t\t\t initializer = JavaCore.getClasspathContainerInitializer(path.segment(0));", "+\t\t\t\t\t\tif (initializer != null) description = initializer.getDescription(path, javaProject);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tdescription = container.getDescription();", "+\t\t\t\t\t}", "+\t\t\t\t\tif (description == null) description = path.makeRelative().toString();", "+\t\t\t\t\treturn Util.bind(\"classpath.invalidContainer\", description); //$NON-NLS-1$", "+", "+\t\t\tcase CP_VARIABLE_PATH_UNBOUND:", "+\t\t\t\t\tpath = this.fPath;", "+\t\t\t\t\treturn Util.bind(\"classpath.unboundVariablePath\", path.makeRelative().toString()); //$NON-NLS-1$", "+\t\t\t\t\t", "+\t\t\tcase CLASSPATH_CYCLE: // TODO: getMessage for CLASSPATH_CYCLE", "+\t\t\t\t\tjavaProject = (IJavaProject)fElements[0];", "+\t\t\t\t\treturn Util.bind(\"classpath.cycle\", javaProject.getElementName()); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\t\t\t\t ", "+\t\t\tcase DISABLED_CP_EXCLUSION_PATTERNS:", "+\t\t\t\t\tpath = this.fPath;", "+\t\t\t\t\treturn Util.bind(\"classpath.disabledExclusionPatterns\", path.makeRelative().toString()); //$NON-NLS-1$", "+", "+\t\t\tcase DISABLED_CP_MULTIPLE_OUTPUT_LOCATIONS:", "+\t\t\t\t\tpath = this.fPath;", "+\t\t\t\t\treturn Util.bind(\"classpath.disabledMultipleOutputLocations\", path.makeRelative().toString()); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fc7bf974155386eff8e7417beed2ea5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BuildNotifier.java", "commitBeforeChange": "b67935aac29cdd7a483ded645c27f7d2da7bec90", "commitAfterChange": "81c369231b2bd9b70d5a782a861035c5ad25cb35", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected String problemsMessage()", "signatureAfterChange": " protected String problemsMessage()", "diff": ["-\tint numNew = newErrorCount + newWarningCount;", "-\tint numFixed = fixedErrorCount + fixedWarningCount;", "-\tif (numNew == 0 && numFixed == 0) return \"\"; //$NON-NLS-1$", "-\tif (numFixed == 0)", "-\t\treturn '(' + (numNew == 1", "-\t\t\t? Util.bind(\"build.oneProblemFound\", String.valueOf(numNew)) //$NON-NLS-1$", "-\t\t\t: Util.bind(\"build.problemsFound\", String.valueOf(numNew))) + ')'; //$NON-NLS-1$", "-\tif (numNew == 0)", "-\t\treturn '(' + (numFixed == 1", "-\t\t\t? Util.bind(\"build.oneProblemFixed\", String.valueOf(numFixed)) //$NON-NLS-1$", "-\t\t\t: Util.bind(\"build.problemsFixed\", String.valueOf(numFixed))) + ')'; //$NON-NLS-1$", "+\tif (newErrorCount == 0 && fixedErrorCount == 0) return \"\"; //$NON-NLS-1$", "+\tif (fixedErrorCount == 0)", "+\t\treturn '(' + (newErrorCount == 1", "+\t\t\t? Util.bind(\"build.oneErrorFound\") //$NON-NLS-1$", "+\t\t\t: Util.bind(\"build.errorsFound\", String.valueOf(newErrorCount))) + ')'; //$NON-NLS-1$", "+\tif (newErrorCount == 0)", "+\t\treturn '(' + (fixedErrorCount == 1", "+\t\t\t? Util.bind(\"build.oneErrorFixed\") //$NON-NLS-1$", "+\t\t\t: Util.bind(\"build.errorsFixed\", String.valueOf(fixedErrorCount))) + ')'; //$NON-NLS-1$", "-\t\t'(' + (numFixed == 1", "-\t\t\t? Util.bind(\"build.oneProblemFixed\", String.valueOf(numFixed)) //$NON-NLS-1$", "-\t\t\t: Util.bind(\"build.problemsFixed\", String.valueOf(numFixed))) //$NON-NLS-1$", "+\t\t'(' + (fixedErrorCount == 1", "+\t\t\t? Util.bind(\"build.oneErrorFixed\") //$NON-NLS-1$", "+\t\t\t: Util.bind(\"build.errorsFixed\", String.valueOf(fixedErrorCount))) //$NON-NLS-1$", "-\t\t+ (numNew == 1", "-\t\t\t? Util.bind(\"build.oneProblemFound\", String.valueOf(numNew)) //$NON-NLS-1$", "-\t\t\t: Util.bind(\"build.problemsFound\", String.valueOf(numNew))) + ')'; //$NON-NLS-1$", "+\t\t+ (newErrorCount == 1", "+\t\t\t? Util.bind(\"build.oneErrorFound\") //$NON-NLS-1$", "+\t\t\t: Util.bind(\"build.errorsFound\", String.valueOf(newErrorCount))) + ')'; //$NON-NLS-1$"]}], "num": 45988}
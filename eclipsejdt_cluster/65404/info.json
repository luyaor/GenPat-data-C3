{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fdeafecfbb6255cdfb653cd5249c909b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "262c9b2065ba90446e63900f2d725dc1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 72, "signatureBeforeChange": "  \tprivate void findParameterizedType(TypeReference ref)", "signatureAfterChange": "  \tprivate void findParameterizedType(TypeReference ref)", "diff": ["-\t\t\tchar[] packageName = refBinding.qualifiedPackageName();", "-\t\t\tchar[] typeName = refBinding.qualifiedSourceName();", "-\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\t\tproposal.setDeclarationSignature(packageName);", "-\t\t\t\tproposal.setSignature(getSignature(refBinding));", "-\t\t\t\tproposal.setPackageName(packageName);", "-\t\t\t\tproposal.setTypeName(typeName);", "-\t\t\t\tproposal.setCompletion(CharOperation.NO_CHAR);", "-\t\t\t\tproposal.setFlags(refBinding.modifiers);", "-\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\tproposal.setAccessibility(accessibility);", "-\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\tif(DEBUG) {", "-\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t}", "+\t\t\t\tcreateTypeProposal(refBinding, refBinding.qualifiedSourceName(), IAccessRule.K_ACCESSIBLE, CharOperation.NO_CHAR, relevance);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce69d49e980e4fed7a6e9c17fcad9937", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 75, "signatureBeforeChange": "  \tprivate void findTypesAndSubpackages( \t\tchar[] token, \t\tPackageBinding packageBinding)", "signatureAfterChange": "  \tprivate void findTypesAndSubpackages( \t\tchar[] token, \t\tPackageBinding packageBinding)", "diff": ["-\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\t\t\tproposal.setDeclarationSignature(sourceType.qualifiedPackageName());", "-\t\t\t\t\tproposal.setSignature(getSignature(sourceType));", "-\t\t\t\t\tproposal.setPackageName(sourceType.qualifiedPackageName());", "-\t\t\t\t\tproposal.setTypeName(sourceType.sourceName());", "-\t\t\t\t\tproposal.setCompletion(sourceType.sourceName());", "-\t\t\t\t\tproposal.setFlags(sourceType.modifiers);", "-\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\t\tproposal.setAccessibility(accessibility);", "-\t\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\t\tif(DEBUG) {", "-\t\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t\t}", "+\t\t\t\t\tchar[] typeName = sourceType.sourceName();", "+\t\t\t\t\tcreateTypeProposal(sourceType, typeName, IAccessRule.K_ACCESSIBLE, typeName, relevance);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec40639188a71fde52ca743b977e79a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "5e23ed7edfe961d34bd26ee29fb9ade957409733", "commitAfterChange": "28dd1050b46fae522d51f1c10cb06a79601770f3", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprivate void findAnnotationReference(TypeReference ref)", "signatureAfterChange": " \tprivate void findAnnotationReference(TypeReference ref)", "diff": ["-\t\t\tchar[] packageName = refBinding.qualifiedPackageName();", "-\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "-\t\t\t\tproposal.setDeclarationSignature(packageName);", "-\t\t\t\tproposal.setSignature(getSignature(refBinding));", "-\t\t\t\tproposal.setPackageName(packageName);", "-\t\t\t\tproposal.setTypeName(typeName);", "-\t\t\t\tproposal.setCompletion(CharOperation.NO_CHAR);", "-\t\t\t\tproposal.setFlags(refBinding.modifiers);", "-\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\tproposal.setAccessibility(accessibility);", "-\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\tif(DEBUG) {", "-\t\t\t\t\tthis.printDebug(proposal);", "-\t\t\t\t}", "+\t\t\t\tcreateTypeProposal(refBinding, typeName, accessibility, CharOperation.NO_CHAR, relevance);"]}], "num": 65404}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a5b9f1513c11d8ac2a09e5b0c5bd241", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "045c0b70e8782df73ddb9d280b5136b5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "ee446c21d0aaa4f4c4b0513ad11960ed53ccba7d", "commitAfterChange": "271be052e104f1beefee4cd78039eca6ee6adb4f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprivate JavaElement getUnresolvedJavaElement(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding )", "signatureAfterChange": " \tprivate JavaElement getUnresolvedJavaElement(org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding )", "diff": ["-\t\tif (typeBinding == null)", "-\t\t\treturn null;", "-\t\tswitch (typeBinding.kind()) {", "-\t\t\tcase Binding.ARRAY_TYPE :", "-\t\t\t\ttypeBinding = ((ArrayBinding) typeBinding).leafComponentType();", "-\t\t\t\treturn getUnresolvedJavaElement(typeBinding);", "-\t\t\tcase Binding.BASE_TYPE :", "-\t\t\tcase Binding.WILDCARD_TYPE :", "-\t\t\tcase Binding.INTERSECTION_TYPE:", "-\t\t\t\treturn null;", "-\t\t\tdefault :", "-\t\t\t\tif (typeBinding.isCapture())", "-\t\t\t\t\treturn null;", "-\t\t}", "-\t\tReferenceBinding referenceBinding;", "-\t\tif (typeBinding.isParameterizedType() || typeBinding.isRawType())", "-\t\t\treferenceBinding = (ReferenceBinding) typeBinding.erasure();", "-\t\telse", "-\t\t\treferenceBinding = (ReferenceBinding) typeBinding;", "-\t\tchar[] fileName = referenceBinding.getFileName();", "-\t\tif (referenceBinding.isLocalType() || referenceBinding.isAnonymousType()) {", "-\t\t\t// local or anonymous type", "-\t\t\tif (Util.isClassFileName(fileName)) {", "-\t\t\t\tint jarSeparator = CharOperation.indexOf(IDependent.JAR_FILE_ENTRY_SEPARATOR, fileName);", "-\t\t\t\tint pkgEnd = CharOperation.lastIndexOf('/', fileName); // pkgEnd is exclusive", "-\t\t\t\tif (pkgEnd == -1)", "-\t\t\t\t\tpkgEnd = CharOperation.lastIndexOf(File.separatorChar, fileName);", "-\t\t\t\tif (jarSeparator != -1 && pkgEnd < jarSeparator) // if in a jar and no slash, it is a default package -> pkgEnd should be equal to jarSeparator", "-\t\t\t\t\tpkgEnd = jarSeparator;", "-\t\t\t\tif (pkgEnd == -1)", "-\t\t\t\t\treturn null;", "-\t\t\t\tIPackageFragment pkg = getPackageFragment(fileName, pkgEnd, jarSeparator);", "-\t\t\t\tchar[] constantPoolName = referenceBinding.constantPoolName();", "-\t\t\t\tif (constantPoolName == null) {", "-\t\t\t\t\tClassFile classFile = (ClassFile) getClassFile(fileName);", "-\t\t\t\t\treturn classFile == null ? null : (JavaElement) classFile.getType();", "-\t\t\t\t}", "-\t\t\t\tpkgEnd = CharOperation.lastIndexOf('/', constantPoolName);", "-\t\t\t\tchar[] classFileName = CharOperation.subarray(constantPoolName, pkgEnd+1, constantPoolName.length);", "-\t\t\t\tClassFile classFile = (ClassFile) pkg.getClassFile(new String(classFileName) + SuffixConstants.SUFFIX_STRING_class);", "-\t\t\t\treturn (JavaElement) classFile.getType();", "-\t\t\t}", "-\t\t\tICompilationUnit cu = getCompilationUnit(fileName);", "-\t\t\tif (cu == null) return null;", "-\t\t\t// must use getElementAt(...) as there is no back pointer to the defining method (scope is null after resolution has ended)", "-\t\t\ttry {", "-\t\t\t\tint sourceStart = ((LocalTypeBinding) referenceBinding).sourceStart;", "-\t\t\t\treturn (JavaElement) cu.getElementAt(sourceStart);", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t// does not exist", "-\t\t\t\treturn null;", "-\t\t\t}", "-\t\t} else if (referenceBinding.isTypeVariable()) {", "-\t\t\t// type parameter", "-\t\t\tfinal String typeVariableName = new String(referenceBinding.sourceName());", "-\t\t\tBinding declaringElement = ((TypeVariableBinding) referenceBinding).declaringElement;", "-\t\t\tIBinding declaringTypeBinding = null;", "-\t\t\tif (declaringElement instanceof MethodBinding) {", "-\t\t\t\tdeclaringTypeBinding = this.resolver.getMethodBinding((MethodBinding) declaringElement);", "-\t\t\t\tIMethod declaringMethod = (IMethod) declaringTypeBinding.getJavaElement();", "-\t\t\t\treturn (JavaElement) declaringMethod.getTypeParameter(typeVariableName);", "-\t\t\t} else {", "-\t\t\t\tITypeBinding typeBinding2 = this.resolver.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) declaringElement);", "-\t\t\t\tif (typeBinding2 == null) return null;", "-\t\t\t\tdeclaringTypeBinding = typeBinding2;", "-\t\t\t\tIType declaringType = (IType) declaringTypeBinding.getJavaElement();", "-\t\t\t\treturn (JavaElement) declaringType.getTypeParameter(typeVariableName);", "-\t\t\t}", "+\t\tif (this.resolver instanceof DefaultBindingResolver) {", "+\t\t\tDefaultBindingResolver defaultBindingResolver = (DefaultBindingResolver) this.resolver;", "+\t\t\treturn org.eclipse.jdt.internal.core.util.Util.getUnresolvedJavaElement(", "+\t\t\t\t\ttypeBinding,", "+\t\t\t\t\tdefaultBindingResolver.workingCopyOwner,", "+\t\t\t\t\tdefaultBindingResolver.getBindingsToNodesMap());", "-\t\t\tif (fileName == null) return null; // case of a WilCardBinding that doesn't have a corresponding Java element", "-\t\t\t// member or top level type", "-\t\t\tITypeBinding declaringTypeBinding = null;", "-\t\t\tif (this.isArray()) {", "-\t\t\t\tdeclaringTypeBinding = this.getElementType().getDeclaringClass();", "-\t\t\t} else {", "-\t\t\t\tdeclaringTypeBinding = this.getDeclaringClass();", "-\t\t\t}", "-\t\t\tif (declaringTypeBinding == null) {", "-\t\t\t\t// top level type", "-\t\t\t\tif (Util.isClassFileName(fileName)) {", "-\t\t\t\t\tClassFile classFile = (ClassFile) getClassFile(fileName);", "-\t\t\t\t\tif (classFile == null) return null;", "-\t\t\t\t\treturn (JavaElement) classFile.getType();", "-\t\t\t\t}", "-\t\t\t\tICompilationUnit cu = getCompilationUnit(fileName);", "-\t\t\t\tif (cu == null) return null;", "-\t\t\t\treturn (JavaElement) cu.getType(new String(referenceBinding.sourceName()));", "-\t\t\t} else {", "-\t\t\t\t// member type", "-\t\t\t\tIType declaringType = (IType) declaringTypeBinding.getJavaElement();", "-\t\t\t\tif (declaringType == null) return null;", "-\t\t\t\treturn (JavaElement) declaringType.getType(new String(referenceBinding.sourceName()));", "-\t\t\t}", "+\t\t\treturn org.eclipse.jdt.internal.core.util.Util.getUnresolvedJavaElement(typeBinding, null, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5726f32c5f781675a66590ed88e802b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKey.java", "commitBeforeChange": "ec6d7f365ea3ec3ffcd55d64775bd62b984807f3", "commitAfterChange": "c021c50efca4c234ec58241ed1fc82f6871e98bd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit, CompilationUnitResolver resolver)", "signatureAfterChange": " \t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit, CompilationUnitResolver resolver)", "diff": ["+\t  */", "+\t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit, CompilationUnitResolver resolver) {", "+\t \tswitch (this.scanner.token) {", "+\t \t\tcase BindingKeyScanner.PACKAGE:", "+\t \t\t\treturn new PackageBinding(this.compoundName, null, resolver.lookupEnvironment);", "+\t \t\tcase BindingKeyScanner.TYPE:", "+\t \t\t\tif (this.compoundName.length == 1 && this.compoundName[0].length == 1) {", "+\t \t\t\t\t// case of base type", "+\t\t \t\t\tTypeBinding baseTypeBinding = getBaseTypeBinding(this.compoundName[0]);", "+\t\t \t\t\tif (baseTypeBinding != null) ", "+\t \t\t\t\t\treturn getArrayBinding(this.dimension, baseTypeBinding, resolver);", "+\t \t\t\t}", "+\t \t\t\tif (parsedUnit == null) ", "+\t \t\t\t\treturn getBinaryBinding(resolver);", "+\t \t\t\tchar[] typeName = this.compoundName[this.compoundName.length-1];", "+\t \t\t\tint dim = this.dimension;", "+\t \t\t\tTypeBinding binding = getTypeBinding(parsedUnit, parsedUnit.types, typeName, resolver);", "+\t \t\t\tif (binding == null) return null;", "+\t \t\t\tif (this.scanner.isAtFieldOrMethodStart()) {", "+\t \t\t\t\tswitch (this.scanner.nextToken()) {", "+\t\t \t\t\t\tcase BindingKeyScanner.FIELD:", "+\t\t \t\t\t\t\treturn getFieldBinding(((SourceTypeBinding) binding).fields);", "+\t\t \t\t\t\tcase BindingKeyScanner.METHOD:", "+\t\t \t\t\t\t\treturn getMethodBinding(((SourceTypeBinding) binding).methods, resolver);", "+\t \t\t\t\t}", "+\t \t\t\t\treturn null; // malformed key", "+\t \t\t\t} else {", "+\t \t\t\t\tTypeBinding typeBinding = null;", "+\t \t\t\t\tif (this.scanner.isAtParametersStart()) {", "+\t\t\t\t\t\tif (this.scanner.isAtTypeParameterStart())\t \t\t\t\t\t", "+\t\t \t\t\t\t\t// generic type binding", "+\t\t \t\t\t\t\ttypeBinding = getGenericTypeBinding((SourceTypeBinding) binding, resolver);", "+\t\t \t\t\t\telse if (this.scanner.isAtTypeStart())", "+\t \t\t\t\t\t\t// parameterized type binding", "+\t\t \t\t\t\t\ttypeBinding = getParameterizedTypeBinding((ReferenceBinding) binding, null/*no enclosing type*/, resolver); ", "+\t \t\t\t\t} else if (binding.typeVariables().length > 0)", "+\t \t\t\t\t\t// raw type binding", "+\t \t\t\t\t\ttypeBinding = resolver.lookupEnvironment.createRawType((ReferenceBinding) binding, null/*no enclosing type*/);", "+\t \t\t\t\telse", "+ \t\t\t\t\t\t// non-generic type binding", "+ \t\t\t\t\t\ttypeBinding = binding;", "+\t \t\t\t\treturn getArrayBinding(dim, typeBinding, resolver);", "+\t \t\t\t}", "+\t \t}", "+\t \treturn null;", "-\t  */", "-\t Binding getCompilerBinding(CompilationUnitDeclaration parsedUnit, CompilationUnitResolver resolver) {", "-\t \tswitch (this.scanner.token) {", "-\t \t\tcase BindingKeyScanner.PACKAGE:", "-\t \t\t\tif (this.compoundName.length > 0) {", "-\t\t \t\t\tTypeBinding baseTypeBinding = Scope.getBaseType(this.compoundName[this.compoundName.length-1]);", "-\t\t \t\t\tif (baseTypeBinding != null) // case of base type", "-\t \t\t\t\t\treturn baseTypeBinding;", "-\t \t\t\t}", "-\t \t\t\treturn new PackageBinding(this.compoundName, null, resolver.lookupEnvironment);", "-\t \t\tcase BindingKeyScanner.TYPE:", "-\t \t\t\tif (parsedUnit == null) ", "-\t \t\t\t\treturn getBinaryBinding(resolver);", "-\t \t\t\tchar[] typeName = this.compoundName[this.compoundName.length-1];", "-\t \t\t\tTypeBinding binding = getTypeBinding(parsedUnit, parsedUnit.types, typeName, resolver);", "-\t \t\t\tswitch (this.scanner.token) {", "-\t \t\t\t\tcase BindingKeyScanner.PACKAGE:", "-\t\t\t\t\tcase BindingKeyScanner.END:", "-\t \t\t\t\t\tif (this.scanner.isAtTypeParameterStart())", "-\t \t\t\t\t\t\t// parameterized type binding", "-\t\t \t\t\t\t\treturn getParameterizedTypeBinding((ReferenceBinding) binding, null/*no enclosing type*/, resolver);", "-\t \t\t\t\t\telse if (binding.typeVariables().length > 0)", "-\t \t\t\t\t\t\t// raw type binding", "-\t \t\t\t\t\t\treturn resolver.lookupEnvironment.createRawType((ReferenceBinding) binding, null/*no enclosing type*/);", "-\t \t\t\t\t\telse", "-\t \t\t\t\t\t\t// non-generic type binding", "-\t \t\t\t\t\t\treturn binding;", "-\t \t\t\t\tcase BindingKeyScanner.ARRAY:", "-\t \t\t\t\t\treturn getArrayBinding(binding, resolver);", "-\t \t\t\t\tcase BindingKeyScanner.FIELD:", "-\t \t\t\t\t\treturn getFieldBinding(((SourceTypeBinding) binding).fields);", "-\t \t\t\t\tcase BindingKeyScanner.METHOD:", "-\t \t\t\t\t\treturn getMethodBinding(((SourceTypeBinding) binding).methods, resolver);", "-\t \t\t\t\tcase BindingKeyScanner.TYPE_PARAMETER:", "-\t \t\t\t\t\tif (this.scanner.isAtTypeParameterStart())", "-\t\t \t\t\t\t\treturn getGenericTypeBinding((SourceTypeBinding) binding, resolver);", "-\t \t\t\t\t\telse", "-\t \t\t\t\t\t\treturn binding;", "-\t \t\t\t}", "-\t \t\t\tbreak;", "-\t \t\tcase BindingKeyScanner.ARRAY:", "-\t \t\t\tif (this.compoundName.length > 0) {", "-\t\t \t\t\tTypeBinding baseTypeBinding = Scope.getBaseType(this.compoundName[this.compoundName.length-1]);", "-\t\t \t\t\tif (baseTypeBinding != null)", "-\t \t\t\t\t\treturn getArrayBinding(baseTypeBinding, resolver);", "-\t \t\t\t}", "- \t\t\t\tbreak;", "-\t \t}", "-\t \treturn null;", "-\t }"]}], "num": 71290}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "10131b07196356d93fb83d03e4bab1ba", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ed6e0720183771609c0991b1030c062", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompiler.java", "commitBeforeChange": "6be54e60f569aa63df76f4ecfd5d4100fe1f357d", "commitAfterChange": "79aecf89bad91987eb417be70bec6de3aa728fa2", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t@SuppressWarnings(\"unchecked\") \tpublic CompilationTask getTask(Writer out, \t\t\tJavaFileManager fileManager, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener, \t\t\tIterable<String> options, \t\t\tIterable<String> classes, \t\t\tIterable<? extends JavaFileObject> compilationUnits)", "signatureAfterChange": " \t@SuppressWarnings(\"unchecked\") \tpublic CompilationTask getTask(Writer out, \t\t\tJavaFileManager fileManager, \t\t\tDiagnosticListener<? super JavaFileObject> diagnosticListener, \t\t\tIterable<String> options, \t\t\tIterable<String> classes, \t\t\tIterable<? extends JavaFileObject> compilationUnits)", "diff": ["-\t\t// TODO FIXME (olivier) REMOVE BEFORE 3.3 once the APT1.6 IS WORKING FINE", "-\t\tfor (String option : options ) {", "-\t\t\tif (\"-processorpath\".equals(option) //$NON-NLS-1$", "-\t\t\t\t\t|| (\"-processor\".equals(option))) { //$NON-NLS-1$", "-\t\t\t\tthis.options.put(CompilerOptions.OPTION_Process_Annotations, CompilerOptions.ENABLED);", "-\t\t\t\tthis.options.put(CompilerOptions.OPTION_DocCommentSupport, CompilerOptions.ENABLED);", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7b61b459baf63f2289cbb64ac71b919", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AssertionTest.java", "commitBeforeChange": "20eaedd8038780a05a557c39b442f2485f010803", "commitAfterChange": "1920517d934718cca4ae649c790dd80e9c368b4b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected Map getCompilerOptions()", "signatureAfterChange": " \tpublic void test013()", "diff": ["-\t */", "-\tprotected Map getCompilerOptions() {", "-\t\tMap options = super.getCompilerOptions();", "-\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_4);", "-\t\treturn options;", "+\t */", "+\tpublic void test013() {", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"        static class Y {\\n\" + ", "+\t\t\t\t\"                public static void test() {\\n\" + ", "+\t\t\t\t\"                        assert false;\\n\" + ", "+\t\t\t\t\"                        System.out.println(\\\"SUCCESS\\\");\\n\" + ", "+\t\t\t\t\"                }\\n\" + ", "+\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\"        public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\"                ClassLoader classLoader = new X().getClass().getClassLoader();\\n\" + ", "+\t\t\t\t\"                // enable assertion for X.Y\\n\" + ", "+\t\t\t\t\"                classLoader.setClassAssertionStatus(\\\"X$Y\\\", true);\\n\" + ", "+\t\t\t\t\"                X.Y.test();\\n\" + ", "+\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\"}\"", "+\t\t\t},", "+\t\t\t\"SUCCESS\"); // expected output", "+\t}"]}], "num": 39277}
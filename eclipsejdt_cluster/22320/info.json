{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "786b678a3b82f7f4cb41b652e262e86b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "131e8d7ef1ab87027c50b2a299bba4e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "ec64763fa4e57b4943311ee555e5ddce81854cf2", "commitAfterChange": "b0ee678b65f48d1cfab35972dd53d6bd85389446", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  public MethodBinding inferConstructorOfElidedParameterizedType(ParameterizedTypeBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTyps, final Scope scope)", "signatureAfterChange": "  public MethodBinding inferConstructorOfElidedParameterizedType(ParameterizedTypeBinding allocationType, ReferenceBinding enclosingType, TypeBinding[] argumentTyps, final Scope scope)", "diff": ["-\t\tSyntheticFactoryMethodBinding original = (SyntheticFactoryMethodBinding) factory.original();", "-\t\treturn original.applyTypeArgumentsOnConstructor(((ParameterizedTypeBinding)factory.returnType).arguments);", "+\t\tSyntheticFactoryMethodBinding sfmb = (SyntheticFactoryMethodBinding) factory.original();", "+\t\tTypeVariableBinding[] constructorTypeVariables = sfmb.getConstructor().typeVariables();", "+\t\tTypeBinding [] constructorTypeArguments = constructorTypeVariables != null ? new TypeBinding[constructorTypeVariables.length] : Binding.NO_TYPES;", "+\t\tif (constructorTypeArguments.length > 0)", "+\t\t\tSystem.arraycopy(((ParameterizedGenericMethodBinding)factory).typeArguments, sfmb.typeVariables().length - constructorTypeArguments.length , ", "+\t\t\t\t\t\t\t\t\t\t\t\tconstructorTypeArguments, 0, constructorTypeArguments.length);", "+\t\tMethodBinding constructor = sfmb.applyTypeArgumentsOnConstructor(((ParameterizedTypeBinding)factory.returnType).arguments, constructorTypeArguments);", "+\t\tif (constructor instanceof ParameterizedGenericMethodBinding && scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\t\t// force an inference context to be established, but avoid tunneling through overload resolution. We know this is the MSMB.", "+\t\t\treturn ParameterizedGenericMethodBinding.computeCompatibleMethod18(constructor.shallowOriginal(), argumentTyps, scope, this);", "+\t\t}", "+\t\treturn constructor;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5ef3cd4608dcd949e9bd10d74ba16d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "diff": ["-\tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType) {", "+\tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds) {", "-\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType(currentType, argTypes, enclosingType);", "-\t\t// check argument type compatibility now if not a class scope", "-\t\tif (!isClassScope) // otherwise will do it in Scope.connectTypeVariables()", "+\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType((ReferenceBinding)currentType.erasure(), argTypes, enclosingType);", "+\t\t// check argument type compatibility", "+\t\tif (checkBounds) // otherwise will do it in Scope.connectTypeVariables() or generic method resolution"]}], "num": 22320}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a412251ceef09100cc22c6fcde5bb79", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f009594e305b91a1b8497f4587c5879", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "5464f8b56e2b620bf0f37dc5a7c218f835be9cef", "commitAfterChange": "57e05ac5c8db0c06028159bb169607bae2e0ec84", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tTypeBinding castTypeBinding = type.resolveType(scope);", "-\t\t\tif(castTypeBinding == null)", "-\t\t\t\treturn null;", "-\t\t\tTypeBinding expressionTb = expression.resolveType(scope);", "-\t\t\tif (expressionTb == null)", "-\t\t\t\treturn null;", "-\t\t\tareTypesCastCompatible(scope, castTypeBinding, expressionTb);", "-\t\t\treturn this.expressionType = castTb = castTypeBinding;", "+\t\t\tthis.resolvedType = type.resolveType(scope);", "+\t\t\tTypeBinding castedExpressionType = expression.resolveType(scope);", "+\t\t\tif (this.resolvedType != null && castedExpressionType != null) {", "+\t\t\t\tareTypesCastCompatible(scope, this.resolvedType, castedExpressionType);", "+\t\t\t}", "+\t\t\treturn this.resolvedType;", "-\t\t\tTypeBinding expressionTb = expression.resolveType(scope);", "-\t\t\tif (expressionTb == null)", "-\t\t\t\treturn null;", "+\t\t\tTypeBinding castedExpressionType = expression.resolveType(scope);", "+\t\t\tif (castedExpressionType == null) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43f238a9a287b832ed51d3a6f0f85ce1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java", "commitBeforeChange": "bd576a9c793017db2f7eae213c14590a7efc1565", "commitAfterChange": "6e6c13b31e68010feb85ecdb058f8741f0b58a41", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \r \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "\r \r \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding lhsTb = lhs.resolveType(scope);\r", "+\t\tthis.lhsType = lhs.resolveType(scope);\r", "-\t\tif (lhsTb == null || expressionTb == null)\r", "+\t\tif (this.lhsType == null || expressionTb == null)\r", "-\t\tif ((expression.isConstantValueOfTypeAssignableToType(expressionTb, lhsTb)\r", "-\t\t\t|| (lhsTb.isBaseType() && BaseTypeBinding.isWidening(lhsTb.id, expressionTb.id)))\r", "-\t\t\t|| (scope.areTypesCompatible(expressionTb, lhsTb))) {\r", "-\t\t\texpression.implicitWidening(lhsTb, expressionTb);\r", "-\t\t\treturn lhsTb;\r", "+\t\tif ((expression.isConstantValueOfTypeAssignableToType(expressionTb, this.lhsType)\r", "+\t\t\t|| (this.lhsType.isBaseType() && BaseTypeBinding.isWidening(this.lhsType.id, expressionTb.id)))\r", "+\t\t\t|| (scope.areTypesCompatible(expressionTb, this.lhsType))) {\r", "+\t\t\texpression.implicitWidening(this.lhsType, expressionTb);\r", "+\t\t\treturn this.lhsType;\r", "-\t\t\tlhsTb);\r", "+\t\t\tthis.lhsType);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf84ccbfe1bb8c6b4a033759c75a5f96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "67da1da15e9afbcd33679f07597c706e7915cf4a", "commitAfterChange": "027fccb2c17e0f0d2b28705c6704af10fc8ce0aa", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tTypeBinding typeBinding = type.resolveType(scope);", "+\t\tthis.expressionType = type.resolveType(scope);", "-\t\t\t\treturn typeBinding;", "+\t\t\t\treturn this.expressionType;", "-\t\tif (typeBinding == null)", "+\t\tif (this.expressionType == null)", "-\t\tif (!typeBinding.canBeInstantiated()) {", "-\t\t\tscope.problemReporter().cannotInstantiate(type, typeBinding);", "-\t\t\treturn typeBinding;", "+\t\tif (!this.expressionType.canBeInstantiated()) {", "+\t\t\tscope.problemReporter().cannotInstantiate(type, this.expressionType);", "+\t\t\treturn this.expressionType;", "-\t\tReferenceBinding allocatedType = (ReferenceBinding) typeBinding;", "+\t\tReferenceBinding allocatedType = (ReferenceBinding) this.expressionType;", "-\t\t\treturn typeBinding;", "+\t\t\treturn this.expressionType;"]}], "num": 18581}
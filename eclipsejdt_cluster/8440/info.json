{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2292985e96e964e08205cc7b4a5db2b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ff9b82e02a026f026175bc77c529318", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/TestingEnvironment.java", "commitBeforeChange": "5371361e21820d2b2e231653f1940e5405c7ae2f", "commitAfterChange": "83631fa7de14141f6ec93506fe4cb66a8c3eb380", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic IPath addProject(String projectName, String compliance)", "signatureAfterChange": "  \tpublic IPath addProject(String projectName, String compliance)", "diff": ["+\t\tint requiredComplianceFlag = 0;", "+\t\tString compilerVersion = null;", "-\t\t\tif ((AbstractCompilerTest.getPossibleComplianceLevels()  & AbstractCompilerTest.F_1_5) == 0)", "-\t\t\t\tthrow new RuntimeException(\"This test should run on top of a 1.5 JRE\");", "+\t\t\trequiredComplianceFlag = AbstractCompilerTest.F_1_5;", "+\t\t\tcompilerVersion = CompilerOptions.VERSION_1_5;", "+\t\t}", "+\t\telse if (\"1.6\".equals(compliance)) {", "+\t\t\trequiredComplianceFlag = AbstractCompilerTest.F_1_6;", "+\t\t\tcompilerVersion = CompilerOptions.VERSION_1_6;", "+\t\t}", "+\t\telse if (\"1.7\".equals(compliance)) {", "+\t\t\trequiredComplianceFlag = AbstractCompilerTest.F_1_7;", "+\t\t\tcompilerVersion = CompilerOptions.VERSION_1_7;", "+\t\t}", "+\t\telse if (!\"1.4\".equals(compliance) && !\"1.3\".equals(compliance)) {", "+\t\t\tthrow new UnsupportedOperationException(\"Test framework doesn't support compliance level: \" + compliance);", "+\t\t}", "+\t\tif (requiredComplianceFlag != 0) {", "+\t\t\tif ((AbstractCompilerTest.getPossibleComplianceLevels() & requiredComplianceFlag) == 0)", "+\t\t\t\tthrow new RuntimeException(\"This test requires a \" + compliance + \" JRE\");", "-\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "-\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_5);\t", "-\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);\t", "+\t\t\toptions.put(CompilerOptions.OPTION_Compliance, compilerVersion);", "+\t\t\toptions.put(CompilerOptions.OPTION_Source, compilerVersion);\t", "+\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, compilerVersion);\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6f436cedb217f60008fc7bed5794475", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "8acc10d4567dfe19e44450e6767e3412557d0ca5", "commitAfterChange": "5cb03c90065b8afa84e6ff1478ae9981fadf030b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\tboolean didSpecifySourceLevel = false;", "-\t\tboolean didSpecifyTarget = false;", "-\t\t\t\tdidSpecifySourceLevel = true;", "-\t\t\t\tdidSpecifyTarget = true;", "-\t\tif (!didSpecifyCompliance){", "-\t\t\t\tif (options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)){", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\t\t\t} else {", "-\t\t\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);", "-\t\t\t\t}", "-\t\t}", "-\t\tString compliance = (String)options.get(CompilerOptions.OPTION_Compliance);", "-\t\tif (CompilerOptions.VERSION_1_4.equals(compliance)){", "-\t\t\t", "-\t\t\t// default 1.4 settings", "-\t\t\tif (!didSpecifySourceLevel){", "-\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_4);", "-\t\t\t}", "-\t\t\tif (!didSpecifyTarget){", "-\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "-\t\t\t}", "-\t\t} else if (CompilerOptions.VERSION_1_3.equals(compliance)){", "-", "-\t\t\t// default 1.4 settings", "-\t\t\tif (!didSpecifySourceLevel){", "-\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);", "-\t\t\t}", "-\t\t\tif (!didSpecifyTarget){", "-\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);", "+\t\tif (options.get(CompilerOptions.OPTION_Source).equals(CompilerOptions.VERSION_1_4)){", "+\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "+\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "+\t\t} else {", "+\t\t\tString javaVMVersion = System.getProperty(\"java.vm.version\"); //$NON-NLS-1$", "+\t\t\tif (javaVMVersion != null && javaVMVersion.startsWith(\"1.4\")) { //$NON-NLS-1$", "+\t\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);", "+\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);"]}], "num": 8440}
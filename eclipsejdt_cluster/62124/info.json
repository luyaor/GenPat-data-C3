{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c1f8c2a7bcc621f52c443647cf2d619", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ba8fb0e834aa3fbd5b3b6ec6c56defd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PackageReferenceLocator.java", "commitBeforeChange": "4e18be61bf7160195c84b24f379f8c0aef589b1d", "commitAfterChange": "727fde87229b4ba953ad5eb0cdd915c994cdd159", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, Binding elementBinding, int accuracy, MatchLocator locator) throws CoreException", "signatureAfterChange": " protected void matchReportReference(ASTNode reference, IJavaElement element, Binding elementBinding, int accuracy, MatchLocator locator) throws CoreException", "diff": ["+\t\t// Do not report qualified references which are only enclosing type", "+\t\t// (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=91078)", "+\t\tReferenceBinding enclosingType = typeBinding == null ? null: typeBinding.enclosingType();", "+\t\tif (enclosingType != null) {", "+\t\t\tint length = positions.length;", "+\t\t\twhile (enclosingType != null && length > 0) {", "+\t\t\t\tlength--;", "+\t\t\t\tenclosingType = enclosingType.enclosingType();", "+\t\t\t}", "+\t\t\tif (length <= 1) return;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c37480774cf5fd78912e8fc3077d7145", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/DocumentElementParser.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " protected void consumeEnterVariable()", "signatureAfterChange": " protected void consumeEnterVariable()", "diff": ["+\t// pop any annotations on extended dimensions now, so they don't pollute the base dimensions.", "+\tAnnotation [][] annotationsOnExtendedDimensions = extendedTypeDimension == 0 ? null : getAnnotationsOnDimensions(extendedTypeDimension);", "+", "-\t\tdeclaration.type = copyDims(type, dimension);", "+\t\tAnnotation [][] annotationsOnAllDimensions = null;", "+\t\tAnnotation[][] annotationsOnDimensions = type.getAnnotationsOnDimensions();", "+\t\tif (annotationsOnDimensions != null || annotationsOnExtendedDimensions != null) {", "+\t\t\tannotationsOnAllDimensions = getMergedAnnotationsOnDimensions(typeDim, annotationsOnDimensions, extendedTypeDimension, annotationsOnExtendedDimensions); ", "+\t\t}", "+\t\tdeclaration.type = copyDims(type, dimension, annotationsOnAllDimensions);", "+\t}", "+}"]}], "num": 62124}
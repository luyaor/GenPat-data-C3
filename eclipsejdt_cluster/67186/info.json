{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b56e3c0164032e2e26de47a7eea02602", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "183585a6a13c8c1acadd7c28353fe3b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "fb96a1c85d64a712beb45b02ec6ef71c691d3831", "commitAfterChange": "382b067fdb60eb61ee53faad83800b76fff0bbbf", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \t \tprivate void findFieldsFromFavorites( \t\t\tchar[] fieldName, \t\t\tFieldBinding[] fields, \t\t\tScope scope, \t\t\tObjectVector fieldsFound, \t\t\tObjectVector localsFound, \t\t\tReferenceBinding receiverType, \t\t\tInvocationSite invocationSite, \t\t\tScope invocationScope)", "signatureAfterChange": " \t \tprivate void findFieldsFromFavorites( \t\t\tchar[] fieldName, \t\t\tFieldBinding[] fields, \t\t\tScope scope, \t\t\tObjectVector fieldsFound, \t\t\tObjectVector localsFound, \t\t\tReferenceBinding receiverType, \t\t\tInvocationSite invocationSite, \t\t\tScope invocationScope)", "diff": ["-\t\t\tchar[] completion = CharOperation.concat(typeName, field.name, '.');", "-", "+\t\t\tCompilationUnitDeclaration cu = this.unitScope.referenceContext;", "+\t\t\tint importStart = cu.types[0].declarationSourceStart;", "+\t\t\tint importEnd = importStart;", "+\t\t\t", "-\t\t\tif (!this.isIgnored(CompletionProposal.FIELD_REF)) {", "-\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF, this.actualCompletionPosition);", "-\t\t\t\tproposal.setDeclarationSignature(getSignature(field.declaringClass));", "-\t\t\t\tproposal.setSignature(getSignature(field.type));", "-\t\t\t\tproposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "-\t\t\t\tproposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "-\t\t\t\tproposal.setPackageName(field.type.qualifiedPackageName());", "-\t\t\t\tproposal.setTypeName(field.type.qualifiedSourceName()); ", "-\t\t\t\tproposal.setName(field.name);", "-\t\t\t\tproposal.setCompletion(completion);", "-\t\t\t\tproposal.setFlags(field.modifiers);", "-\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\tif(DEBUG) {", "-\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\tif (this.compilerOptions.complianceLevel < ClassFileConstants.JDK1_5 ||", "+\t\t\t\t\t!this.options.suggestStaticImport) {", "+\t\t\t\tif (!this.isIgnored(CompletionProposal.FIELD_REF, CompletionProposal.TYPE_IMPORT)) {", "+\t\t\t\t\tchar[] completion = CharOperation.concat(receiverType.sourceName, field.name, '.');", "+\t\t\t\t\t", "+\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setDeclarationSignature(getSignature(field.declaringClass));", "+\t\t\t\t\tproposal.setSignature(getSignature(field.type));", "+\t\t\t\t\tproposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "+\t\t\t\t\tproposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "+\t\t\t\t\tproposal.setPackageName(field.type.qualifiedPackageName());", "+\t\t\t\t\tproposal.setTypeName(field.type.qualifiedSourceName()); ", "+\t\t\t\t\tproposal.setName(field.name);", "+\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\tproposal.setFlags(field.modifiers);", "+\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t", "+\t\t\t\t\tchar[] typeImportCompletion = createImportCharArray(typeName, false, false);", "+\t\t\t\t\t", "+\t\t\t\t\tCompletionProposal typeImportProposal = this.createProposal(CompletionProposal.TYPE_IMPORT, this.actualCompletionPosition);", "+\t\t\t\t\ttypeImportProposal.nameLookup = this.nameEnvironment.nameLookup;", "+\t\t\t\t\ttypeImportProposal.completionEngine = this;", "+\t\t\t\t\tchar[] packageName = receiverType.qualifiedPackageName();", "+\t\t\t\t\ttypeImportProposal.setDeclarationSignature(packageName);", "+\t\t\t\t\ttypeImportProposal.setSignature(getSignature(receiverType));", "+\t\t\t\t\ttypeImportProposal.setPackageName(packageName);", "+\t\t\t\t\ttypeImportProposal.setTypeName(receiverType.qualifiedSourceName());", "+\t\t\t\t\ttypeImportProposal.setCompletion(typeImportCompletion);", "+\t\t\t\t\ttypeImportProposal.setFlags(receiverType.modifiers);", "+\t\t\t\t\ttypeImportProposal.setAdditionalFlags(CompletionFlags.Default);", "+\t\t\t\t\ttypeImportProposal.setReplaceRange(importStart - this.offset, importEnd - this.offset);", "+\t\t\t\t\ttypeImportProposal.setRelevance(relevance);", "+\t\t\t\t\t", "+\t\t\t\t\tproposal.setRequiredProposals(new CompletionProposal[]{typeImportProposal});", "+\t\t\t\t\t", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif (!this.isIgnored(CompletionProposal.FIELD_REF, CompletionProposal.FIELD_IMPORT)) {", "+\t\t\t\t\tchar[] completion = field.name;", "+\t\t\t\t\t", "+\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setDeclarationSignature(getSignature(field.declaringClass));", "+\t\t\t\t\tproposal.setSignature(getSignature(field.type));", "+\t\t\t\t\tproposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "+\t\t\t\t\tproposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "+\t\t\t\t\tproposal.setPackageName(field.type.qualifiedPackageName());", "+\t\t\t\t\tproposal.setTypeName(field.type.qualifiedSourceName()); ", "+\t\t\t\t\tproposal.setName(field.name);", "+\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\tproposal.setFlags(field.modifiers);", "+\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t", "+\t\t\t\t\tchar[] fieldImportCompletion = createImportCharArray(CharOperation.concat(typeName, field.name, '.'), true, false);", "+", "+\t\t\t\t\tCompletionProposal fieldImportProposal = this.createProposal(CompletionProposal.FIELD_IMPORT, this.actualCompletionPosition);", "+\t\t\t\t\tfieldImportProposal.setDeclarationSignature(getSignature(field.declaringClass));", "+\t\t\t\t\tfieldImportProposal.setSignature(getSignature(field.type));", "+\t\t\t\t\tfieldImportProposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "+\t\t\t\t\tfieldImportProposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "+\t\t\t\t\tfieldImportProposal.setPackageName(field.type.qualifiedPackageName());", "+\t\t\t\t\tfieldImportProposal.setTypeName(field.type.qualifiedSourceName()); ", "+\t\t\t\t\tfieldImportProposal.setName(field.name);", "+\t\t\t\t\tfieldImportProposal.setCompletion(fieldImportCompletion);", "+\t\t\t\t\tfieldImportProposal.setFlags(field.modifiers);", "+\t\t\t\t\tfieldImportProposal.setAdditionalFlags(CompletionFlags.StaticImport);", "+\t\t\t\t\tfieldImportProposal.setReplaceRange(importStart - this.offset, importEnd - this.offset);", "+\t\t\t\t\tfieldImportProposal.setRelevance(relevance);", "+\t\t\t\t\t", "+\t\t\t\t\tproposal.setRequiredProposals(new CompletionProposal[]{fieldImportProposal});", "+\t\t\t\t\t", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bee078c12faf1fb2b6c40d56b4b579a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "d2d42dc68198e20f3f5cc7326a07cced2c751eb5", "commitAfterChange": "add5c6babb13b20df1267306ec710a4efca88a4d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r private void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r private void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\t\tsetOptionValueIndex(\"org.eclipse.jdt.internal.compiler.Compiler.problemInvalidImport\",2); //$NON-NLS-1$\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportInvalidImport, CompilerOptions.WARNING);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LocalVariableAttribute, 0);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LineNumberAttribute, 0);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_SourceFileAttribute, 0);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_LocalVariableAttribute, CompilerOptions.GENERATE);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_LineNumberAttribute, CompilerOptions.GENERATE);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_SourceFileAttribute, CompilerOptions.GENERATE);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LocalVariableAttribute, 1);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LineNumberAttribute, 1);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_SourceFileAttribute, 1);\t\t\t\t\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_LocalVariableAttribute, CompilerOptions.DO_NOT_GENERATE);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_LineNumberAttribute, CompilerOptions.DO_NOT_GENERATE);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_SourceFileAttribute, CompilerOptions.DO_NOT_GENERATE);\r", "-\t\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LocalVariableAttribute, 0);\r", "+\t\t\t\t\t\toptions.put(CompilerOptions.OPTION_LocalVariableAttribute, CompilerOptions.GENERATE);\r", "-\t\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_LineNumberAttribute, 0);\r", "+\t\t\t\t\t\toptions.put(CompilerOptions.OPTION_LineNumberAttribute, CompilerOptions.GENERATE);\r", "-\t\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_SourceFileAttribute, 0);\r", "+\t\t\t\t\t\toptions.put(CompilerOptions.OPTION_SourceFileAttribute, CompilerOptions.GENERATE);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportMethodWithConstructorName, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportHiddenCatchBlock, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportDeprecation, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedLocal, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedParameter, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, 2);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportAssertIdentifier, 2);\r", "-\t\t\t\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportUnusedParameter, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, CompilerOptions.IGNORE);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_ReportAssertIdentifier, CompilerOptions.IGNORE);\r", "+\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportMethodWithConstructorName, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportMethodWithConstructorName, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportOverridingPackageDefaultMethod, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportHiddenCatchBlock, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportDeprecation, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedLocal, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportUnusedParameter, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportUnusedParameter, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportNonExternalizedStringLiteral, CompilerOptions.WARNING);\r", "-\t\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_ReportAssertIdentifier, 1);\r", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_ReportAssertIdentifier, CompilerOptions.WARNING);\r", "-\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_PreserveUnusedLocal, 0);\r", "+\t\t\toptions.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.PRESERVE);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_TargetPlatform, 0);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_TargetPlatform, 1);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);\r", "+\t\t\t} else if (currentArg.equals(\"1.3\")) { //$NON-NLS-1$\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_3);\r", "+\t\t\t} else if (currentArg.equals(\"1.4\")) { //$NON-NLS-1$\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_Source, 0);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);\r", "-\t\t\t\tsetOptionValueIndex(CompilerOptions.OPTION_Source, 1);\r", "+\t\t\t\toptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_4);\r", "-\t\tfor(int i = 0; i < problemOption.length ; i++){\r", "-\t\t\tfor(int j = 0 ; j < options.length ; j++){\r", "-\t\t\t\tif(options[j].getID().equals(problemOption[i]) && options[j].getValueIndex() == 1){\r", "-\t\t\t\t\toptions[j].setValueIndex(2);\r", "-\t\t\t\t}\r", "+\t\t// filter options which are related to the assist component\r", "+\t\tObject[] entries = options.entrySet().toArray();\r", "+\t\tfor (int i = 0, max = entries.length; i < max; i++){\r", "+\t\t\tMap.Entry entry = (Map.Entry)entries[i];\r", "+\t\t\tif (!(entry.getKey() instanceof String)) continue;\r", "+\t\t\tif (!(entry.getValue() instanceof String)) continue;\r", "+\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)){\r", "+\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);\r", "+}\r"]}], "num": 67186}
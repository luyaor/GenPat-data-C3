{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d2962cb731905d7e1c538f724650ff9a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fd21bddeea022f9cf6ae0c0645c5413", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedSourceFolderManager.java", "commitBeforeChange": "c4c0df5e4aeb7d3e8571312c597020a7d0812327", "commitAfterChange": "6fea7eafdd413dccff31028f8da1f1ac6859e6fe", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic IFolder getFolder()", "signatureAfterChange": " \tpublic IFolder getFolder()", "diff": ["-\t */", "-\tpublic IFolder getFolder(){", "-\t\t", "-\t\tfinal String folderName;", "-\t\tsynchronized (this) {", "-\t\t\tif( _generatedSourceFolder != null )", "-\t\t\t\treturn _generatedSourceFolder;", "-\t\t\tfolderName = getFolderName();", "-\t\t}\t\t", "-\t\tif(folderName == null)", "-\t\t\treturn null;", "-\t\t", "-\t\treturn _aptProject.getJavaProject().getProject().getFolder( folderName );", "-\t}", "+\tpublic IFolder getFolder(){", "+\t\t", "+\t\tsynchronized (this) {", "+\t\t\tif( _generatedSourceFolder != null )", "+\t\t\t\treturn _generatedSourceFolder;", "+\t\treturn getFolderPreference();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "780a390d824486df6aad1301f491f922", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/FactoryLoaderTests.java", "commitBeforeChange": "7177897be6073a1c35ee9a465aa5f0559da1bff1", "commitAfterChange": "3ef396e7cc3e0323aa7fad284fecd31681852465", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void setUp() throws Exception", "signatureAfterChange": "  \tpublic void setUp() throws Exception", "diff": ["+\t\t// This file will be locked until GC takes care of unloading the", "+\t\t// annotation processor classes, so we can't delete it ourselves.", "+\t\t_extJar.deleteOnExit();", "+\t\t", "+\t\t// Create a classpath variable for the same jar file, so we can", "+\t\t// refer to it that way.", "+\t\tFile canonicalJar = _extJar.getCanonicalFile();", "+\t\tIPath jarDir = new Path( canonicalJar.getParent() );", "+\t\tString extJarName = canonicalJar.getName();", "+\t\tIPath varPath = new Path( TEMPJARDIR_CPVAR );", "+\t\t_extVarJar = varPath.append( extJarName );", "+\t\tJavaCore.setClasspathVariable( TEMPJARDIR_CPVAR, jarDir, null );", "-}", "+\t}"]}], "num": 49281}
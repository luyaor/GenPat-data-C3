{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7292ae66b5ac93151b4e1f5b8a313c48", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f7cdc6a37a3d97b1fed511b3a345d5a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r private boolean matches(ImportReference importRef, boolean resolve)", "signatureAfterChange": "\r private int matchLevel(ImportReference importRef, boolean resolve)", "diff": ["- */\r", "-private boolean matches(ImportReference importRef, boolean resolve) {\r", "-\r", "-\tif (importRef.onDemand) return false;\r", "-\r", "-\tchar[][] tokens = importRef.tokens;\r", "-\tint importLength = tokens.length;\r", "-\t\r", "-\tif (this.qualification != null){\r", "-\t\tchar[][] qualificationTokens = CharOperation.splitOn('.', this.qualification);\r", "-\t\tint qualificationLength = qualificationTokens.length;\r", "-\t\tif (qualificationLength+1 > importLength) return false;\r", "-\t\tfor (int i = 0; i < qualificationLength; i++){\r", "-\t\t\tif (!this.matchesName(qualificationTokens[i], tokens[i])) {\r", "-\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tif (this.simpleName != null \r", "-\t\t\t&& !this.matchesName(this.simpleName, tokens[qualificationLength])) {\r", "-\t\t\treturn false;\r", "-\t\t}\r", "-\t} else {\r", "-\t\tif (this.simpleName != null) {\r", "-\t\t\tfor (int i = 0; i < importLength; i++){\r", "-\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])){\r", "-\t\t\t\t\treturn true;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\treturn false;\r", "-\t\t}\r", "-\t}\r", "-\treturn true;\r", "-}\r", "+ */\r", "+private int matchLevel(ImportReference importRef, boolean resolve) {\r", "+\r", "+\tif (importRef.onDemand) return IMPOSSIBLE_MATCH;\r", "+\r", "+\tchar[][] tokens = importRef.tokens;\r", "+\tint importLength = tokens.length;\r", "+\t\r", "+\tif (this.qualification != null){\r", "+\t\tchar[][] qualificationTokens = CharOperation.splitOn('.', this.qualification);\r", "+\t\tint qualificationLength = qualificationTokens.length;\r", "+\t\tif (qualificationLength+1 > importLength) return IMPOSSIBLE_MATCH;\r", "+\t\tfor (int i = 0; i < qualificationLength; i++){\r", "+\t\t\tif (!this.matchesName(qualificationTokens[i], tokens[i])) {\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (this.simpleName == null || this.matchesName(this.simpleName, tokens[qualificationLength])) {\r", "+\t\t\treturn ACCURATE_MATCH;\r", "+\t\t} else {\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\t} else {\r", "+\t\tif (this.simpleName == null) {\r", "+\t\t\treturn ACCURATE_MATCH;\r", "+\t\t} else {\r", "+\t\t\tfor (int i = 0; i < importLength; i++){\r", "+\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])){\r", "+\t\t\t\t\treturn ACCURATE_MATCH;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1505881686bc86085002e1d59e96b28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "60e138d2828b37f2615e0cced57acea3adb47644", "commitAfterChange": "3c340a30d5ee47c28968789969de0fd1189f5b30", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r private boolean matches(ImportReference importRef, boolean resolve)", "signatureAfterChange": "\r private int matchLevel(ImportReference importRef, boolean resolve)", "diff": ["- */\r", "-private boolean matches(ImportReference importRef, boolean resolve) {\r", "-\r", "-\tif (importRef.onDemand) return false;\r", "-\r", "-\tchar[][] tokens = importRef.tokens;\r", "-\tint importLength = tokens.length;\r", "-\t\r", "-\tif (this.qualification != null){\r", "-\t\tchar[][] qualificationTokens = CharOperation.splitOn('.', this.qualification);\r", "-\t\tint qualificationLength = qualificationTokens.length;\r", "-\t\tif (qualificationLength+1 > importLength) return false;\r", "-\t\tfor (int i = 0; i < qualificationLength; i++){\r", "-\t\t\tif (!this.matchesName(qualificationTokens[i], tokens[i])) {\r", "-\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tif (this.simpleName != null \r", "-\t\t\t&& !this.matchesName(this.simpleName, tokens[qualificationLength])) {\r", "-\t\t\treturn false;\r", "-\t\t}\r", "-\t} else {\r", "-\t\tif (this.simpleName != null) {\r", "-\t\t\tfor (int i = 0; i < importLength; i++){\r", "-\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])){\r", "-\t\t\t\t\treturn true;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\treturn false;\r", "-\t\t}\r", "-\t}\r", "-\treturn true;\r", "-}\r", "+ */\r", "+private int matchLevel(ImportReference importRef, boolean resolve) {\r", "+\r", "+\tif (importRef.onDemand) return IMPOSSIBLE_MATCH;\r", "+\r", "+\tchar[][] tokens = importRef.tokens;\r", "+\tint importLength = tokens.length;\r", "+\t\r", "+\tif (this.qualification != null){\r", "+\t\tchar[][] qualificationTokens = CharOperation.splitOn('.', this.qualification);\r", "+\t\tint qualificationLength = qualificationTokens.length;\r", "+\t\tif (qualificationLength+1 > importLength) return IMPOSSIBLE_MATCH;\r", "+\t\tfor (int i = 0; i < qualificationLength; i++){\r", "+\t\t\tif (!this.matchesName(qualificationTokens[i], tokens[i])) {\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (this.simpleName == null || this.matchesName(this.simpleName, tokens[qualificationLength])) {\r", "+\t\t\treturn ACCURATE_MATCH;\r", "+\t\t} else {\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\t} else {\r", "+\t\tif (this.simpleName == null) {\r", "+\t\t\treturn ACCURATE_MATCH;\r", "+\t\t} else {\r", "+\t\t\tfor (int i = 0; i < importLength; i++){\r", "+\t\t\t\tif (this.matchesName(this.simpleName, tokens[i])){\r", "+\t\t\t\t\treturn ACCURATE_MATCH;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t}\r", "+\t}\r", "+}\r"]}], "num": 13989}
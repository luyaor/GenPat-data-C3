{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2b64de1c18851c0e0e7c16f85256db8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f08e211c31f4b3ad98d541506c71165", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "754fa4fbde45636d73b491b4058d7afa45916b95", "commitAfterChange": "c18da164a48c76451beac3ec6e887a0d096a31a4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic void checkExceptionHandlers( \t\tTypeBinding[] raisedExceptions, \t\tAstNode location, \t\tFlowInfo flowInfo, \t\tBlockScope scope)", "signatureAfterChange": " \t \tpublic void checkExceptionHandlers( \t\tTypeBinding[] raisedExceptions, \t\tAstNode location, \t\tFlowInfo flowInfo, \t\tBlockScope scope)", "diff": ["-\t\tfor (int i = 0; i < raisedCount; i++) {", "+\t\tnextReport: for (int i = 0; i < raisedCount; i++) {", "+\t\t\t\t// only one complaint if same exception declared to be thrown more than once", "+\t\t\t\tfor (int j = 0; j < i; j++) {", "+\t\t\t\t\tif (raisedExceptions[j] == exception) continue nextReport; // already reported ", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1274e93ee5de45bf02069ef42762c414", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "90b5d0d22a673acac5fa922f69ac563d54cf8a91", "commitAfterChange": "3ef9e96615da3a52fd8a4f5bccecbd03a8a0e20a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " protected void addElement(IJavaElement element)", "signatureAfterChange": " protected void addElement(IJavaElement element)", "diff": ["+\t", "+\tfor (int i = 0; i < elementLength; i++) {", "+\t\tif (this.elements[i].equals(element)) {", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27521ed703b153061aa13104ec5607b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a40a64996efc0fc528fbb320900183524a4cc13c", "commitAfterChange": "2c7f17232300c7fbbf0be41f27d83e269dc11422", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 135, "signatureBeforeChange": " \tprivate void addExpectedType(TypeBinding type, Scope scope)", "signatureAfterChange": " \tprivate void addExpectedType(TypeBinding type, Scope scope)", "diff": ["+\t\t", "+\t\t// do not add twice the same type", "+\t\tfor (int i = 0; i <= this.expectedTypesPtr; i++) {", "+\t\t\tif (this.expectedTypes[i] == type) return;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6afd3e1c04db601eabaacfcfa4e205d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "2e2135e23ec5738f13780e9b130faac2db0c376b", "commitAfterChange": "3d9ca5323b31c8907d129d4437482cfc3b641c64", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " protected void flushElementStack()", "signatureAfterChange": " protected void flushElementStack()", "diff": ["+\tfor (int j = 0; j <= elementPtr; j++) {", "+\t\telementObjectInfoStack[j] = null;", "+\t}", "+\t", "+\tthis.previousObjectInfo = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a09b1a7303048b0675b14eb29eede99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java", "commitBeforeChange": "8739fac6b0362a32fbe52c714ff661e202a84e1e", "commitAfterChange": "a383b8a74cd6aa6df7e09b603786c84e4f93bb28", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\t  public void expireNullCheckedFieldInfo()", "signatureAfterChange": "\t  public void expireNullCheckedFieldInfo()", "diff": ["-\t\tif (--this.timeToLiveForNullCheckInfo == 0) {", "-\t\t\tthis.nullCheckedFieldReferences[0] = null; // lazily wipe", "+\t\tfor (int i = 0; i < this.nullCheckedFieldReferences.length; i++) {", "+\t\t\tif (--this.timesToLiveForNullCheckInfo[i] == 0)", "+\t\t\t\tthis.nullCheckedFieldReferences[i] = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d1fb9f762081a5f8ee41c1990048e79", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/BaseProcessorEnv.java", "commitBeforeChange": "ed9fcb70460f8a7c09bd2ac4b3017e5159d83486", "commitAfterChange": "d518189a9935110f4925579d51368bbbeaff5789", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic static CompilationUnit[] createDietASTs( \t\t\tfinal IJavaProject javaProject,  \t\t\tfinal ICompilationUnit[] parseUnits)", "signatureAfterChange": " \tpublic static CompilationUnit[] createDietASTs( \t\t\tfinal IJavaProject javaProject,  \t\t\tfinal ICompilationUnit[] parseUnits)", "diff": ["-\t\tif( parseUnits == null ) return null;", "+\t\tif( parseUnits == null ) ", "+\t\t\treturn null;", "+\t\t", "+for( int index=0; index<len; index++ )", "+\tif(parseUnits[index] == null )", "+\t\tSystem.err.println();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce9b410e8295430c9700ac557126dd03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "58aaea35ae4c64a4ecebe06d6b1ab1679e04698a", "commitAfterChange": "d5df66f62f879926d0ab37840f8644f7133a2a54", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  private void writeRestriction(AccessRuleSet accessRuleSet, DataOutputStream out) throws IOException", "signatureAfterChange": "  private void writeRestriction(AccessRuleSet accessRuleSet, DataOutputStream out) throws IOException", "diff": ["-\t\t\tout.writeUTF(accessRuleSet.messageTemplate);", "+\t\t\tfor (int i = 0; i < accessRuleSet.messageTemplates.length; i++)", "+\t\t\t\tout.writeUTF(accessRuleSet.messageTemplates[i]);"]}], "num": 59320}
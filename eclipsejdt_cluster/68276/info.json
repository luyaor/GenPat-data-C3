{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62b69ebc1eb1fb9d4a2ca4b04fac167c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "600e8840d633237580d3a489eb5480e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "83b2f6a03c3dc62e9f0da4478de073882f53022b", "commitAfterChange": "3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate void mergeParameterNullAnnotations(BlockScope currentScope)", "signatureAfterChange": " \tprivate void mergeParameterNullAnnotations(BlockScope currentScope)", "diff": ["-\t\t\t\tif (descTagBits != 0L && !ourParameters[i].isBaseType())", "-\t\t\t\t\tourParameters[i] = env.createAnnotatedType(ourParameters[i], descTagBits);", "+\t\t\t\tif (descTagBits != 0L && !ourParameters[i].isBaseType()) {", "+\t\t\t\t\tAnnotationBinding [] annotations = descParameters[i].getTypeAnnotations();", "+\t\t\t\t\tfor (int j = 0, length = annotations.length; j < length; j++) {", "+\t\t\t\t\t\tAnnotationBinding annotation = annotations[j];", "+\t\t\t\t\t\tif (annotation != null) {", "+\t\t\t\t\t\t\tswitch (annotation.getAnnotationType().id) {", "+\t\t\t\t\t\t\t\tcase TypeIds.T_ConfiguredAnnotationNullable :", "+\t\t\t\t\t\t\t\tcase TypeIds.T_ConfiguredAnnotationNonNull :", "+\t\t\t\t\t\t\t\t\tourParameters[i] = env.createAnnotatedType(ourParameters[i], new AnnotationBinding [] { annotation });", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "601a66007b85435862b500e82e286a9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java", "commitBeforeChange": "80e40b4c60040fa0aa8e1c95f16e2597f3f0acf0", "commitAfterChange": "f9277e3d6f326ff6a770d54a63a8fe0127208bbc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic AnnotationBinding[] getAnnotations()", "signatureAfterChange": "  \tpublic AnnotationBinding[] getAnnotations()", "diff": ["-\t\tif (this.declaringScope == null)", "+\t\tif (this.declaringScope == null) {", "+\t\t\tif ((this.tagBits & TagBits.AnnotationResolved) != 0) {", "+\t\t\t\t// annotation are already resolved", "+\t\t\t\tif (this.declaration == null) {", "+\t\t\t\t\treturn Binding.NO_ANNOTATIONS;", "+\t\t\t\t}", "+\t\t\t\tAnnotation[] annotations = this.declaration.annotations;", "+\t\t\t\tif (annotations != null) {", "+\t\t\t\t\tint length = annotations.length;", "+\t\t\t\t\tAnnotationBinding[] annotationBindings = new AnnotationBinding[length];", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tAnnotationBinding compilerAnnotation = annotations[i].getCompilerAnnotation();", "+\t\t\t\t\t\tif (compilerAnnotation == null) {", "+\t\t\t\t\t\t\treturn Binding.NO_ANNOTATIONS;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tannotationBindings[i] = compilerAnnotation;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn annotationBindings;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adf66b3a1f1199637055de653bf1bbff", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnMemberAccess.java", "commitBeforeChange": "542ce5451500fe1306b92aaa9a7c04d8d83f7f3f", "commitAfterChange": "9cbf7e62288f060b33b2dc1c1d579dae84747012", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["+\t\t", "+\t\tif (this.receiverType == null && receiver instanceof MessageSend) {", "+\t\t\tMessageSend messageSend = (MessageSend) receiver;", "+\t\t\tif(messageSend.receiver instanceof ThisReference) {", "+\t\t\t\tExpression[] arguments = messageSend.arguments;", "+\t\t\t\tint length = arguments == null ? 0 : arguments.length;", "+\t\t\t\tTypeBinding[] argBindings = new TypeBinding[length];", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\targBindings[i] = arguments[i].resolvedType;", "+\t\t\t\t\tif(argBindings[i] == null || !argBindings[i].isValidBinding()) {", "+\t\t\t\t\t\tthrow new CompletionNodeFound();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\tProblemMethodBinding problemMethodBinding = new ProblemMethodBinding(messageSend.selector, argBindings, ProblemReasons.NotFound);", "+\t\t\t\tthrow new CompletionNodeFound(this, problemMethodBinding, scope);", "+\t\t\t}", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1c1360a58e0925d24f9685d448e34c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tpublic void consumeMethod(char[] selector, char[] signature)", "signatureAfterChange": "  \tpublic void consumeMethod(char[] selector, char[] signature)", "diff": ["+\t\t\t\t} else if ((method.tagBits & TagBits.AnnotationPolymorphicSignature) != 0) {", "+\t\t\t\t\tthis.typeBinding = null;", "+\t\t\t\t\tchar[][] typeParameters = Signature.getParameterTypes(signature);", "+\t\t\t\t\tint length = typeParameters.length;", "+\t\t\t\t\tTypeBinding[] parameterTypes = new TypeBinding[length];", "+\t\t\t\t\tfor (int j = 0; j < length; j++) {", "+\t\t\t\t\t\tparameterTypes[j] = getType(typeParameters[j]);", "+\t\t\t\t\t}", "+\t\t\t\t\tPolymorphicMethodBinding polymorphicMethod = this.environment.createPolymorphicMethod(method, parameterTypes);", "+\t\t\t\t\tthis.methodBinding = polymorphicMethod;", "+\t\t\t\t\tthis.methodBinding = this.environment.updatePolymorphicMethodReturnType(", "+\t\t\t\t\t\t\tpolymorphicMethod,", "+\t\t\t\t\t\t\tgetType(Signature.getReturnType(signature)));", "+\t\t\t\t\tthis.compilerBinding = this.methodBinding;", "+\t\t\t\t\treturn;"]}], "num": 68276}
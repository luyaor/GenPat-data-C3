{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d05276aa18b352e389c1293f7e015fb9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f0791808a8b2f859b350908d9a0b2d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "3617e411ab09a4b93e5840b8e6d451f0c6a8a8c9", "commitAfterChange": "3f2dbb1c863e3e36f3c44754809ef2e96e6a175a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public SyntheticAccessMethodBinding addSyntheticBridgeMethod(MethodBinding inheritedMethodToBridge, MethodBinding localTargetMethod)", "signatureAfterChange": " public SyntheticAccessMethodBinding addSyntheticBridgeMethod(MethodBinding inheritedMethodToBridge, MethodBinding localTargetMethod)", "diff": ["+\t} else {", "+\t\t// TODO (philippe) MethodBindings do not implement equals() so how do we prevent adding 2 'equal' inherited methods?", "+\t\t// check to see if there is another equivalent inheritedMethod already added", "+\t\tIterator synthMethods = synthetics[METHOD_EMUL].keySet().iterator();", "+\t\twhile (synthMethods.hasNext()) {", "+\t\t\tObject method = synthMethods.next();", "+\t\t\tif (method instanceof MethodBinding)", "+\t\t\t\tif (inheritedMethodToBridge.areParameterErasuresEqual((MethodBinding) method))", "+\t\t\t\t\treturn null;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9d572a0004652caee3f741a0a4793d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java", "commitBeforeChange": "4ad3c874e62c224ecc8908a13e75fb553a601626", "commitAfterChange": "96b9f3a2bb7723060aaffc443c165d9a3e629afb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 14, "signatureBeforeChange": " private void generateMethodInfos(IType type, IBinaryType typeInfo, HashMap newElements, ArrayList childrenHandles, ArrayList typeParameterHandles)", "signatureAfterChange": " private void generateMethodInfos(IType type, IBinaryType typeInfo, HashMap newElements, ArrayList childrenHandles, ArrayList typeParameterHandles)", "diff": ["+\t\tgenerateAnnotationsInfos(method, methodInfo.getAnnotations(), methodInfo.getTagBits(), newElements);", "+\t\tObject defaultValue = methodInfo.getDefaultValue();", "+\t\tif (defaultValue instanceof IBinaryAnnotation) {", "+\t\t\tgenerateAnnotationInfo(method, newElements, (IBinaryAnnotation) defaultValue);", "+\t\t}"]}], "num": 71298}
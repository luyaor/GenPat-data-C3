{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9c112adc637c59b7c21ea702fec55ab", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e48c7f43433958d453941875156eb8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "c8d7e735b1fdf27bd805f7e5ae0a6eacad7e4530", "commitAfterChange": "8fed2cc02e45d0c02f4805c1a6592bef37ca778a", "methodNumberBeforeChange": 868, "methodNumberAfterChange": 868, "signatureBeforeChange": " public void test0848() throws Exception", "signatureAfterChange": " public void test0848() throws Exception", "diff": ["-\t\tnew String[] {", "-\t\t\t\"X.java\", // =================", "-\t\t\t\"import java.util.*;\\n\" +", "-\t\t\t\"\\n\" +", "-\t\t\t\"public class X<E> {\\n\" +", "-\t\t\t\"\tCollection<? extends Number> asList= Arrays.asList(1, 2.2);\\n\" +", "-\t\t\t\"\tList<Number> nums= (List<Number>) asList; // correct warning\\n\" +", "-\t\t\t\"\tList<Number> numz= (LinkedList<Number>) asList; // type safety warning missing\\n\" +", "-\t\t\t\"\tZork z;\\n\" +", "-\t\t\t\"}\\n\", // =================", "-\t\t},", "-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 4)\\n\" +", "-\t\t\"\tCollection<? extends Number> asList= Arrays.asList(1, 2.2);\\n\" +", "-\t\t\"\t                                     ^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety : A generic array of Number&Comparable<?> is created for a varargs parameter\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 5)\\n\" +", "-\t\t\"\tList<Number> nums= (List<Number>) asList; // correct warning\\n\" +", "-\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked cast from Collection<capture#1-of ? extends Number> to List<Number>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. WARNING in X.java (at line 6)\\n\" +", "-\t\t\"\tList<Number> numz= (LinkedList<Number>) asList; // type safety warning missing\\n\" +", "-\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked cast from Collection<capture#2-of ? extends Number> to LinkedList<Number>\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. ERROR in X.java (at line 7)\\n\" +", "-\t\t\"\tZork z;\\n\" +", "-\t\t\"\t^^^^\\n\" +", "-\t\t\"Zork cannot be resolved to a type\\n\" +", "-\t\t\"----------\\n\");", "-", "-\tthis.runConformTest(", "-\t\t\t\t\"import java.util.*;\\n\" +", "-\t\t\t\t\"\\n\" +", "-\t\t\t\t\"public class X<E> {\\n\" +", "-\t\t\t\t\"\tCollection<? extends Number> asList= Arrays.asList(1, 2.2);\\n\" +", "-\t\t\t\t\"\tList<Number> nums= (List<Number>) asList; // correct warning\\n\" +", "-\t\t\t\t\"\tList<Number> numz= (LinkedList<Number>) asList; // type safety warning missing\\n\" +", "+\t\t\t\t\"import java.util.*;\\n\" + ", "+\t\t\t\t\"\\n\" + ", "+\t\t\t\t\"public class X<E> {\\n\" + ", "+\t\t\t\t\"\tCollection<? extends Number> asList= Arrays.asList(1, 2.2);\\n\" + ", "+\t\t\t\t\"\tList<Number> nums= (List<Number>) asList; // correct warning\\n\" + ", "+\t\t\t\t\"\tList<Number> numz= (LinkedList<Number>) asList; // type safety warning missing\\n\" + ", "+\t\t\t\t\"\tZork z;\\n\" + ", "-\t\t\t\"\");", "-\t// \tensure proper declaring class for #run() invocation", "-\tString expectedOutput =", "-\t\t\"  // Method descriptor #14 ()V\\n\" +", "-\t\t\"  // Stack: 6, Locals: 1\\n\" +", "-\t\t\"  public X();\\n\" +", "-\t\t\"     0  aload_0 [this]\\n\" +", "-\t\t\"     1  invokespecial java.lang.Object() [16]\\n\" +", "-\t\t\"     4  aload_0 [this]\\n\" +", "-\t\t\"     5  iconst_2\\n\" +", "-\t\t\"     6  anewarray java.lang.Number [18]\\n\" +", "-\t\t\"     9  dup\\n\" +", "-\t\t\"    10  iconst_0\\n\" +", "-\t\t\"    11  iconst_1\\n\" +", "-\t\t\"    12  invokestatic java.lang.Integer.valueOf(int) : java.lang.Integer [20]\\n\" +", "-\t\t\"    15  aastore\\n\" +", "-\t\t\"    16  dup\\n\" +", "-\t\t\"    17  iconst_1\\n\" +", "-\t\t\"    18  ldc2_w <Double 2.2> [26]\\n\" +", "-\t\t\"    21  invokestatic java.lang.Double.valueOf(double) : java.lang.Double [28]\\n\" +", "-\t\t\"    24  aastore\\n\" +", "-\t\t\"    25  invokestatic java.util.Arrays.asList(java.lang.Object[]) : java.util.List [33]\\n\" +", "-\t\t\"    28  checkcast java.util.Collection [38]\\n\" +", "-\t\t\"    31  putfield X.asList : java.util.Collection [40]\\n\" +", "-\t\t\"    34  aload_0 [this]\\n\" +", "-\t\t\"    35  aload_0 [this]\\n\" +", "-\t\t\"    36  getfield X.asList : java.util.Collection [40]\\n\" +", "-\t\t\"    39  checkcast java.util.List [42]\\n\" +", "-\t\t\"    42  putfield X.nums : java.util.List [44]\\n\" +", "-\t\t\"    45  aload_0 [this]\\n\" +", "-\t\t\"    46  aload_0 [this]\\n\" +", "-\t\t\"    47  getfield X.asList : java.util.Collection [40]\\n\" +", "-\t\t\"    50  checkcast java.util.LinkedList [46]\\n\" + // <--- checkcast must appear", "-\t\t\"    53  putfield X.numz : java.util.List [48]\\n\" +", "-\t\t\"    56  return\\n\";", "-", "-\tFile f = new File(OUTPUT_DIR + File.separator + \"X.class\");", "-\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);", "-\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "-\tString result = disassembler.disassemble(classFileBytes, \"\\n\", ClassFileBytesDisassembler.DETAILED);", "-\tint index = result.indexOf(expectedOutput);", "-\tif (index == -1 || expectedOutput.length() == 0) {", "-\t\tSystem.out.println(Util.displayString(result, 3));", "-\t}", "-\tif (index == -1) {", "-\t\tassertEquals(\"Wrong contents\", expectedOutput, result);", "-\t}", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tCollection<? extends Number> asList= Arrays.asList(1, 2.2);\\n\" + ", "+\t\t\t\"\t                                     ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety : A generic array of Number&Comparable<?> is created for a varargs parameter\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tList<Number> nums= (List<Number>) asList; // correct warning\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Collection<capture#1-of ? extends Number> to List<Number>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tList<Number> numz= (LinkedList<Number>) asList; // type safety warning missing\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked cast from Collection<capture#2-of ? extends Number> to LinkedList<Number>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tZork z;\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"Zork cannot be resolved to a type\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t\t", "+\t\tthis.runConformTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\", // =================", "+\t\t\t\t\t\"import java.util.*;\\n\" + ", "+\t\t\t\t\t\"\\n\" + ", "+\t\t\t\t\t\"public class X<E> {\\n\" + ", "+\t\t\t\t\t\"\tCollection<? extends Number> asList= Arrays.asList(1, 2.2);\\n\" + ", "+\t\t\t\t\t\"\tList<Number> nums= (List<Number>) asList; // correct warning\\n\" + ", "+\t\t\t\t\t\"\tList<Number> numz= (LinkedList<Number>) asList; // type safety warning missing\\n\" + ", "+\t\t\t\t\t\"}\\n\", // =================", "+\t\t\t\t},", "+\t\t\t\t\"\");", "+\t\t// \tensure presence of: \"checkcast java.util.LinkedList\" before putfield X.numz", "+\t\tString expectedOutput =", "+\t\t\"  // Method descriptor #14 ()V\\n\" + ", "+\t\t\"  // Stack: 6, Locals: 1\\n\" + ", "+\t\t\"  public X();\\n\" + ", "+\t\t\"     0  aload_0 [this]\\n\" + ", "+\t\t\"     1  invokespecial java.lang.Object() [16]\\n\" + ", "+\t\t\"     4  aload_0 [this]\\n\" + ", "+\t\t\"     5  iconst_2\\n\" + ", "+\t\t\"     6  anewarray java.lang.Number [18]\\n\" + ", "+\t\t\"     9  dup\\n\" + ", "+\t\t\"    10  iconst_0\\n\" + ", "+\t\t\"    11  iconst_1\\n\" + ", "+\t\t\"    12  invokestatic java.lang.Integer.valueOf(int) : java.lang.Integer [20]\\n\" + ", "+\t\t\"    15  aastore\\n\" + ", "+\t\t\"    16  dup\\n\" + ", "+\t\t\"    17  iconst_1\\n\" + ", "+\t\t\"    18  ldc2_w <Double 2.2> [26]\\n\" + ", "+\t\t\"    21  invokestatic java.lang.Double.valueOf(double) : java.lang.Double [28]\\n\" + ", "+\t\t\"    24  aastore\\n\" + ", "+\t\t\"    25  invokestatic java.util.Arrays.asList(java.lang.Object[]) : java.util.List [33]\\n\" + ", "+\t\t\"    28  putfield X.asList : java.util.Collection [38]\\n\" + ", "+\t\t\"    31  aload_0 [this]\\n\" + ", "+\t\t\"    32  aload_0 [this]\\n\" + ", "+\t\t\"    33  getfield X.asList : java.util.Collection [38]\\n\" + ", "+\t\t\"    36  checkcast java.util.List [40]\\n\" + ", "+\t\t\"    39  putfield X.nums : java.util.List [42]\\n\" + ", "+\t\t\"    42  aload_0 [this]\\n\" + ", "+\t\t\"    43  aload_0 [this]\\n\" + ", "+\t\t\"    44  getfield X.asList : java.util.Collection [38]\\n\" + ", "+\t\t\"    47  checkcast java.util.LinkedList [44]\\n\" + ", "+\t\t\"    50  putfield X.numz : java.util.List [46]\\n\" + ", "+\t\t\"    53  return\\n\";", "+\t\t", "+\t\tFile f = new File(OUTPUT_DIR + File.separator + \"X.class\");", "+\t\tbyte[] classFileBytes = org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);", "+\t\tClassFileBytesDisassembler disassembler = ToolFactory.createDefaultClassFileBytesDisassembler();", "+\t\tString result = disassembler.disassemble(classFileBytes, \"\\n\", ClassFileBytesDisassembler.DETAILED);", "+\t\tint index = result.indexOf(expectedOutput);", "+\t\tif (index == -1 || expectedOutput.length() == 0) {", "+\t\t\tSystem.out.println(Util.displayString(result, 3));", "+\t\t}", "+\t\tif (index == -1) {", "+\t\t\tassertEquals(\"Wrong contents\", expectedOutput, result);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a48f16b7c040d915571e9c4d94b416d9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java", "commitBeforeChange": "e4b120541cf6c404fcc534d957fc35fe80d78035", "commitAfterChange": "50d1489a949b2e888c9f126b8f39d1c4ff67eaa2", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 74, "signatureBeforeChange": " \tpublic void test0173_try_catch()", "signatureAfterChange": " \tpublic void test0173_try_catch()", "diff": ["-\t\t\t\t\"\t\t\t if (this.dummy) {\\n\" + ", "-\t\t\t\t\"\t\t\t   if (this.other) {\\n\" + ", "+\t\t\t\t\"\t\t\t if (dummy) {\\n\" + ", "+\t\t\t\t\"\t\t\t   if (other) {\\n\" + ", "-\t\t\t\t\"\t\t\t   System.out.print(0);\\n\" + "]}], "num": 43436}
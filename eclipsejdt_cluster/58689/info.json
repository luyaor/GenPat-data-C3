{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "341a8d74ab173222badc9bead1fae3e6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3459aeb2162013c48a27290d74633a29", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "f947d5592358b89c12d575b3786b2a35e36a4031", "commitAfterChange": "d4b8f1437bd894de59822a00977399b8af50c7a1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["-\t\tboolean warnOptionInUse = false;", "-\t\tboolean noWarnOptionInUse = false;", "-\t\t\t\tif (pathCount > 0)", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tMain.bind(\"configure.duplicateClasspath\", currentArg)); //$NON-NLS-1$", "-\t\t\t\tclasspaths = new String[DEFAULT_SIZE_CLASSPATH];", "+\t\t\t\tif (pathCount == 0) {", "+\t\t\t\t\tclasspaths = new String[DEFAULT_SIZE_CLASSPATH];", "+\t\t\t\t}", "-\t\t\t\twarnOptionInUse = true;", "-\t\t\t\tif (noWarnOptionInUse)", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tMain.bind(\"configure.duplicateWarningConfiguration\")); //$NON-NLS-1$\t\t\t\t", "-\t\t\t\t\t\t\t//$NON-NLS-1$", "-\t\t\t\tnoWarnOptionInUse = true;", "-\t\t\t\tnoWarn = true;", "-\t\t\t\tif (warnOptionInUse)", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tMain.bind(\"configure.duplicateWarningConfiguration\")); //$NON-NLS-1$", "+\t\t\t\tObject[] entries = options.entrySet().toArray();", "+\t\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "+\t\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "+\t\t\t\t\tif (!(entry.getKey() instanceof String))", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tif (!(entry.getValue() instanceof String))", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "+\t\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t\twarnOptionInUse = true;", "-\t\t\t\tif (noWarnOptionInUse)", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tMain.bind(\"configure.duplicateWarningConfiguration\")); //$NON-NLS-1$", "-\t\t\t\t\tnoWarn = true;", "+\t\t\t\t\tObject[] entries = options.entrySet().toArray();", "+\t\t\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "+\t\t\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "+\t\t\t\t\t\tif (!(entry.getKey() instanceof String))", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tif (!(entry.getValue() instanceof String))", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "+\t\t\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (didSpecifyCompliance && options.get(CompilerOptions.OPTION_Compliance).equals(CompilerOptions.VERSION_1_3)) {", "+\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.incompatibleComplianceForTarget14\", (String)options.get(CompilerOptions.OPTION_Compliance))); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\toptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\tif (noWarn) {", "-\t\t\t// filter options which are related to the assist component", "-\t\t\tObject[] entries = options.entrySet().toArray();", "-\t\t\tfor (int i = 0, max = entries.length; i < max; i++) {", "-\t\t\t\tMap.Entry entry = (Map.Entry) entries[i];", "-\t\t\t\tif (!(entry.getKey() instanceof String))", "-\t\t\t\t\tcontinue;", "-\t\t\t\tif (!(entry.getValue() instanceof String))", "-\t\t\t\t\tcontinue;", "-\t\t\t\tif (((String) entry.getValue()).equals(CompilerOptions.WARNING)) {", "-\t\t\t\t\toptions.put((String) entry.getKey(), CompilerOptions.IGNORE);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f90524ecee2651378cb3e6b62f3289d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "6c5ed1b4ed06e066835a3bf2ea35d093c31d8a42", "commitAfterChange": "8bc47c693f418d320513158fd7b4c7024ff227d6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r private void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": "\r private void configure(String[] argv) throws InvalidInputException", "diff": ["+\tfinal int InsideDefaultEncoding = 64;\r", "-\t\t\t\r", "+\tboolean didSpecifyDefaultEncoding = false;\r", "+\r", "+\tString customEncoding = null;\r", "+\tString currentArg = \"\";\r", "+\t\t\r", "-\t\tString currentArg = argv[index].trim();\r", "+\r", "+\t\tif (customEncoding != null){\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.unexpectedCustomEncoding\", currentArg, customEncoding)); //$NON-NLS-1$\r", "+\t\t}\r", "+\r", "+\t\tcurrentArg = argv[index].trim();\r", "+\r", "+\t\tcustomEncoding = null;\r", "+\t\tif (currentArg.endsWith(\"]\")){ // look for encoding specification\r", "+\t\t\tint encodingStart = currentArg.indexOf('[') + 1;\r", "+\t\t\tint encodingEnd = currentArg.length() - 1;\r", "+\t\t\tif (encodingStart >= 1){\r", "+\t\t\t\tif (encodingStart < encodingEnd){\r", "+\t\t\t\t\tcustomEncoding = currentArg.substring(encodingStart, encodingEnd);\r", "+\t\t\t\t\ttry {// ensure encoding is supported\r", "+\t\t\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), customEncoding);\r", "+\t\t\t\t\t} catch(UnsupportedEncodingException e){\r", "+\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.unsupportedEncoding\", customEncoding)); //$NON-NLS-1$\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\tcurrentArg = currentArg.substring(0, encodingStart - 1);\r", "+\t\t\t}\r", "+\t\t}\r", "+\r", "+\t\t\t\tencodings = new String[argCount - index];\r", "+\t\t\t\tSystem.arraycopy(encodings, 0, (encodings = new String[length + argCount - index]), 0, length);\r", "-\t\t\tfilenames[filesCount++] = currentArg;\r", "+\t\t\tfilenames[filesCount] = currentArg;\r", "+\t\t\tencodings[filesCount++] = customEncoding;\r", "+\t\t\tcustomEncoding = null;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\tif (currentArg.equals(\"-encoding\")) { //$NON-NLS-1$\r", "+\t\t\tmode = InsideDefaultEncoding;\r", "+\t\tif (mode == InsideDefaultEncoding){\r", "+\t\t\tif (didSpecifyDefaultEncoding){\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.duplicateDefaultEncoding\",currentArg)); //$NON-NLS-1$\r", "+\t\t\t}\r", "+\t\t\ttry { // ensure encoding is supported\r", "+\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), currentArg);\r", "+\t\t\t} catch(UnsupportedEncodingException e){\r", "+\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.unsupportedEncoding\", currentArg)); //$NON-NLS-1$\r", "+\t\t\t}\r", "+\t\t\toptions.put(CompilerOptions.OPTION_Encoding, currentArg);\r", "+\t\t\tdidSpecifyDefaultEncoding = true;\r", "+\t\t\tmode = Default;\r", "+\t\t\tcontinue;\r", "+\t\t}\r", "+\t\t\tSystem.arraycopy(encodings, 0, (encodings = new String[length + filesCount]), 0, filesCount);\r", "+\t\t\tfor (int i = 0; i < length; i++){\r", "+\t\t\t\tencodings[filesCount+i] = customEncoding;\r", "+\t\t\t}\r", "+\t\t\tcustomEncoding = null;\r", "+\t\t\tencodings = new String[filesCount];\r", "+\t\t\tfor (int i = 0; i < filesCount; i++){\r", "+\t\t\t\tencodings[i] = customEncoding;\r", "+\t\t\t}\r", "+\t\t\tcustomEncoding = null;\r"]}], "num": 58689}
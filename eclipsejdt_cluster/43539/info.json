{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51cecf4b1f2e62df6a4d87a2389a25d7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5412f994d9b2793f7de9af0a3c8865f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "8b226a492ac84a08d6b25c8931ed21c4c6d95533", "commitAfterChange": "5df5b275110c6cdc85b67221e388c4e6ac6468cb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic final void areTypesCastCompatible( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": "  \tpublic final void areTypesCastCompatible( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "diff": ["-\t\tif (expressionType == NullBinding) {", "-\t\t\tconstant = expression.constant;", "+\t\tif (expressionType == NullBinding) ", "-\t\t}", "+", "-\t\t\t\tTypeBinding expressionEltTb = ((ArrayBinding) expressionType).elementsType(scope);", "-\t\t\t\tif (expressionEltTb.isBaseType()) {", "+\t\t\t\tTypeBinding exprElementType = ((ArrayBinding) expressionType).elementsType(scope);", "+\t\t\t\tif (exprElementType.isBaseType()) {", "-\t\t\t\t\tif (((ArrayBinding) castType).elementsType(scope) == expressionEltTb)", "+\t\t\t\t\tif (((ArrayBinding) castType).elementsType(scope) == exprElementType)", "-\t\t\t\t\texpressionEltTb);", "+\t\t\t\t\texprElementType);", "-\t\t\t\t\tif (castType.id == T_String && expression.constant != Constant.NotAConstant){", "-\t\t\t\t\t\tconstant = expression.constant; // (String) cst is still a constant", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\t}", "+\t\t\t\t\tif (castType.id == T_String) constant = expression.constant; // (String) cst is still a constant", "+\t\t\t\t\treturn;", "-\t\t\t\t\tif (Scope.areTypesCompatible(expressionType, castType))", "+\t\t\t\t\tif (Scope.areTypesCompatible(expressionType, castType)) ", "-\t\t} else if (", "-\t\t\tcastType.isClass()) { // ----- (castType.isClass) expressionType.isInterface --------", "+\t\t} else if (castType.isClass()) { // ----- (castType.isClass) expressionType.isInterface --------", "-\t\t\t\t&& (Scope.compareTypes(castType, expressionType) == NotRelated)) {", "+\t\t\t\t\t&& (Scope.compareTypes(castType, expressionType) == NotRelated)) {", "-\t\t\t\tfor (int i = 0, castMethodsLength = castTypeMethods.length;", "-\t\t\t\t\ti < castMethodsLength;", "-\t\t\t\t\ti++)", "-\t\t\t\t\tfor (int j = 0; j < exprMethodsLength; j++)", "-\t\t\t\t\t\tif (castTypeMethods[i].returnType != expressionTypeMethods[j].returnType)", "-\t\t\t\t\t\t\tif (castTypeMethods[i].selector == expressionTypeMethods[j].selector)", "-\t\t\t\t\t\t\t\tif (castTypeMethods[i].areParametersEqual(expressionTypeMethods[j]))", "-\t\t\t\t\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "+\t\t\t\tfor (int i = 0, castMethodsLength = castTypeMethods.length; i < castMethodsLength; i++)", "+\t\t\t\t\tfor (int j = 0; j < exprMethodsLength; j++) {", "+\t\t\t\t\t\tif ((castTypeMethods[i].returnType != expressionTypeMethods[j].returnType)", "+\t\t\t\t\t\t\t\t&& (castTypeMethods[i].selector == expressionTypeMethods[j].selector)", "+\t\t\t\t\t\t\t\t&& castTypeMethods[i].areParametersEqual(expressionTypeMethods[j])) {", "+\t\t\t\t\t\t\tscope.problemReporter().typeCastError(this, castType, expressionType);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1b13598d4942ae85e2898d20538a577", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java", "commitBeforeChange": "33e49b6e14282ee69dc2c2cf0c73bec5e674cdf2", "commitAfterChange": "e593164022433d17467e437ca5f1d1580fcf9c34", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprotected void rejectAnnotationsOnStaticMemberQualififer(Scope scope, ReferenceBinding currentType, int tokenIndex)", "signatureAfterChange": "  \tprotected static void rejectAnnotationsOnStaticMemberQualififer(Scope scope, ReferenceBinding currentType, Annotation[] qualifierAnnot)", "diff": ["-\tprotected void rejectAnnotationsOnStaticMemberQualififer(Scope scope, ReferenceBinding currentType, int tokenIndex) {", "+\tprotected static void rejectAnnotationsOnStaticMemberQualififer(Scope scope, ReferenceBinding currentType, Annotation[] qualifierAnnot) {", "-\t\tif (this.annotations != null && currentType.isMemberType() && currentType.isStatic()) {", "-\t\t\tAnnotation[] qualifierAnnot = this.annotations[tokenIndex - 1];", "-\t\t\tif (qualifierAnnot != null) {", "-\t\t\t\tscope.problemReporter().illegalTypeAnnotationsInStaticMemberAccess(qualifierAnnot[0],", "-\t\t\t\t\t\tqualifierAnnot[qualifierAnnot.length - 1]);", "-\t\t\t}", "+\t\tif (currentType.isMemberType() && currentType.isStatic() && qualifierAnnot != null && qualifierAnnot.length > 0) {", "+\t\t\tscope.problemReporter().illegalTypeAnnotationsInStaticMemberAccess(qualifierAnnot[0],", "+\t\t\t\t\tqualifierAnnot[qualifierAnnot.length - 1]);"]}], "num": 43539}
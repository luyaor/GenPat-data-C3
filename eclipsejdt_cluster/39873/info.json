{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44a59640769b206549cb11cbeae7e4e9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24e5dee9cd776d55dd9a89c448495c65", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "99e06cdf0656ed0f6c3eb604300a8baae7ee3beb", "commitAfterChange": "d6c2a90130be430285c5f6a000090d250c310afd", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " private void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " private void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\t\t\t\tif (field.binding != null && this.scope.compilerOptions().includeFieldsInNullAnalysis", "+\t\t\t\t\t\t&& ((field.binding.modifiers & ClassFileConstants.AccFinal) != 0)) {", "+\t\t\t\t\t// we won't reset null Info for constant fields", "+\t\t\t\t\tstaticFieldInfo.updateConstantFieldsMask(field.binding);", "+\t\t\t\t}", "-\t\tFlowInfo constructorInfo = nonStaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo);", "+\t\tUnconditionalFlowInfo staticFieldUnconditionalInfo = staticFieldInfo.unconditionalInits();", "+\t\tFlowInfo constructorInfo;", "+\t\tif (this.scope.compilerOptions().includeFieldsInNullAnalysis) {", "+\t\t\tflowInfo.addNullInfoFrom(staticFieldUnconditionalInfo.discardNonFieldInitializations());", "+\t\t\tflowInfo.addConstantFieldsMask(staticFieldUnconditionalInfo);\t// prevent resetting null info for constant fields inside methods", "+\t\t\tflowInfo.resetNullInfoForFields();\t// only preserve null info for constant fields", "+\t\t\tconstructorInfo = nonStaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(flowInfo);", "+\t\t\tconstructorInfo.addConstantFieldsMask(staticFieldUnconditionalInfo); // prevent resetting null info for constant fields inside c'tor too", "+\t\t} else {", "+\t\t\tconstructorInfo = nonStaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo);", "+\t\t}", "+\t\t", "-\t\t\t\t\t\tstaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo));", "+\t\t\t\t\t\tstaticFieldUnconditionalInfo.addInitializationsFrom(outerInfo));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59b18768fcaadb6cb10a605ce68125b1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "6dec9cb80d749866ad6a2b5d18c470f71732f9d8", "commitAfterChange": "a93fb5b3ff3b79e22a571c64a770b96117073c58", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t} else {", "-\t\tboolean isStatic = this.codegenBinding.isStatic();", "-\t\tboolean isThisReceiver = this.receiver instanceof ThisReference;", "-\t\tConstant fieldConstant = this.codegenBinding.constant();", "-\t\tif (fieldConstant != Constant.NotAConstant) {", "-\t\t\tif (!isThisReceiver) {", "-\t\t\t\treceiver.generateCode(currentScope, codeStream, !isStatic);", "-\t\t\t\tif (!isStatic){", "-\t\t\t\t\tcodeStream.invokeObjectGetClass();", "-\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t}", "+\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\treturn;", "+\t}", "+\tboolean isStatic = this.codegenBinding.isStatic();", "+\tboolean isThisReceiver = this.receiver instanceof ThisReference;", "+\tConstant fieldConstant = this.codegenBinding.constant();", "+\tif (fieldConstant != Constant.NotAConstant) {", "+\t\tif (!isThisReceiver) {", "+\t\t\treceiver.generateCode(currentScope, codeStream, !isStatic);", "+\t\t\tif (!isStatic){", "+\t\t\t\tcodeStream.invokeObjectGetClass();", "+\t\t\t\tcodeStream.pop();", "+\t\t}", "+\t\tif (valueRequired) {", "+\t\t\tcodeStream.generateConstant(fieldConstant, implicitConversion);", "+\t\t}", "+\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\treturn;", "+\t}", "+\tif (valueRequired || (!isThisReceiver && currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4)) {", "+\t\treceiver.generateCode(currentScope, codeStream, !isStatic);", "+\t\tif (this.codegenBinding.declaringClass == null) { // array length", "+\t\t\tcodeStream.arraylength();", "-\t\t\t\tcodeStream.generateConstant(fieldConstant, implicitConversion);", "+\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t} else {", "+\t\t\t\t// could occur if !valueRequired but compliance >= 1.4", "+\t\t\t\tcodeStream.pop();", "-\t\t\tif (valueRequired || (!isThisReceiver && currentScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4)) {", "-\t\t\t\treceiver.generateCode(currentScope, codeStream, !isStatic);", "-\t\t\t\tif (this.codegenBinding.declaringClass == null) { // array length", "-\t\t\t\t\tcodeStream.arraylength();", "-\t\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// could occur if !valueRequired but compliance >= 1.4", "-\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t}", "+\t\t\tif (syntheticAccessors == null || syntheticAccessors[READ] == null) {", "+\t\t\t\tif (isStatic) {", "+\t\t\t\t\tcodeStream.getstatic(this.codegenBinding);", "-\t\t\t\t\tif (syntheticAccessors == null || syntheticAccessors[READ] == null) {", "-\t\t\t\t\t\tif (isStatic) {", "-\t\t\t\t\t\t\tcodeStream.getstatic(this.codegenBinding);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcodeStream.getfield(this.codegenBinding);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcodeStream.invokestatic(syntheticAccessors[READ]);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (valueRequired) {", "-\t\t\t\t\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);\t\t\t", "-\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// could occur if !valueRequired but compliance >= 1.4", "-\t\t\t\t\t\tswitch (this.codegenBinding.type.id) {", "-\t\t\t\t\t\t\tcase T_long :", "-\t\t\t\t\t\t\tcase T_double :", "-\t\t\t\t\t\t\t\tcodeStream.pop2();", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tdefault :", "-\t\t\t\t\t\t\t\tcodeStream.pop();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "+\t\t\t\t\tcodeStream.getfield(this.codegenBinding);", "-\t\t\t\tif (!isThisReceiver) {", "-\t\t\t\t\treceiver.generateCode(currentScope, codeStream, !isStatic);\t\t\t\t", "-\t\t\t\t\tif (!isStatic){", "-\t\t\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "+\t\t\t\tcodeStream.invokestatic(syntheticAccessors[READ]);", "+\t\t\t}", "+\t\t\tif (valueRequired) {", "+\t\t\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);\t\t\t", "+\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t} else {", "+\t\t\t\t// could occur if !valueRequired but compliance >= 1.4", "+\t\t\t\tswitch (this.codegenBinding.type.id) {", "+\t\t\t\t\tcase T_long :", "+\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\tcodeStream.pop2();", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault :", "-\t\t\t\t\t}", "+\t} else {", "+\t\tif (isThisReceiver) {", "+\t\t\tif (isStatic){", "+\t\t\t\t// if no valueRequired, still need possible side-effects of <clinit> invocation, if field belongs to different class", "+\t\t\t\tif (this.binding.original().declaringClass != this.receiverType.erasure()) {", "+\t\t\t\t\tMethodBinding accessor = syntheticAccessors == null ? null : syntheticAccessors[READ]; ", "+\t\t\t\t\tif (accessor == null) {", "+\t\t\t\t\t\tcodeStream.getstatic(this.codegenBinding);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tcodeStream.invokestatic(accessor);", "+\t\t\t\t\t}", "+\t\t\t\t\tswitch (this.codegenBinding.type.id) {", "+\t\t\t\t\t\tcase T_long :", "+\t\t\t\t\t\tcase T_double :", "+\t\t\t\t\t\t\tcodeStream.pop2();", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault :", "+\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\treceiver.generateCode(currentScope, codeStream, !isStatic);\t\t\t\t", "+\t\t\tif (!isStatic){", "+\t\t\t\tcodeStream.invokeObjectGetClass(); // perform null check", "+\t\t\t\tcodeStream.pop();", "+\t\t\t}", "+\t\t}\t\t\t\t\t\t"]}], "num": 39873}
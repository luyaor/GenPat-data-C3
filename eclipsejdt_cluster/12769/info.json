{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36d61f2d1b161c1e27a85b2cada6b8e1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48ad05c1adb686949e66ec267933b27e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r private void findMemberTypes(char[] typeName, ReferenceBinding currentType, Scope scope)", "signatureAfterChange": "\r \tprivate void findMemberTypes(\r \t\tchar[] typeName,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tSourceTypeBinding typeInvocation)", "diff": ["-}\r", "-private void findMemberTypes(char[] typeName, ReferenceBinding currentType, Scope scope) {\r", "-\tif (typeName == null) return;\r", "-\tif (currentType.superInterfaces() == null) return; // we're trying to find a supertype\r", "-\tObjectVector typesFound = new ObjectVector();\r", "-\tif (insideQualifiedReference || typeName.length == 0) { // do not search up the hierarchy\r", "-\t\tfindMemberTypes(typeName, currentType.memberTypes(), typesFound);\r", "-\t\treturn;\r", "-\t}\r", "-\tReferenceBinding[][] interfacesToVisit = null;\r", "-\tint lastPosition = -1;\r", "-\tdo {\r", "-\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "-\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\tif (interfacesToVisit == null)\r", "-\t\t\t\tinterfacesToVisit = new ReferenceBinding[5][];\r", "-\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);\r", "-\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t}\r", "-\t\tfindMemberTypes(typeName, currentType.memberTypes(), typesFound);\r", "-\t\tcurrentType = currentType.superclass();\r", "-\t} while (currentType != null);\r", "-\tif (interfacesToVisit != null) {\r", "-\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "-\t\t\t\tReferenceBinding anInterface = interfaces[j];\r", "-\t\t\t\tif ((anInterface.tagBits & TagBits.InterfaceVisited) == 0) { // if interface as not already been visited\r", "-\t\t\t\t\tanInterface.tagBits |= TagBits.InterfaceVisited;\r", "-\t\t\t\t\tfindMemberTypes(typeName, anInterface.memberTypes(), typesFound);\r", "-\r", "-\t\t\t\t\tReferenceBinding[] itsInterfaces = anInterface.superInterfaces();\r", "-\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);\r", "-\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t\t\t\t}\r", "-\t\t}\r", "-\t\t// bit reinitialization\r", "-\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "-\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;\r", "-\t\t}\r", "-\t}\r", "-}\r", "+\t}\r", "+\tprivate void findMemberTypes(\r", "+\t\tchar[] typeName,\r", "+\t\tReferenceBinding receiverType,\r", "+\t\tScope scope,\r", "+\t\tSourceTypeBinding typeInvocation) {\r", "+\r", "+\t\tReferenceBinding currentType = receiverType;\r", "+\t\tif (typeName == null)\r", "+\t\t\treturn;\r", "+\t\tif (currentType.superInterfaces() == null)\r", "+\t\t\treturn; // we're trying to find a supertype\r", "+\r", "+\t\tObjectVector typesFound = new ObjectVector();\r", "+\t\tif (insideQualifiedReference\r", "+\t\t\t|| typeName.length == 0) { // do not search up the hierarchy\r", "+\t\t\tfindMemberTypes(\r", "+\t\t\t\ttypeName,\r", "+\t\t\t\tcurrentType.memberTypes(),\r", "+\t\t\t\ttypesFound,\r", "+\t\t\t\treceiverType,\r", "+\t\t\t\ttypeInvocation);\r", "+\t\t\treturn;\r", "+\t\t}\r", "+\r", "+\t\tReferenceBinding[][] interfacesToVisit = null;\r", "+\t\tint lastPosition = -1;\r", "+\t\tdo {\r", "+\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "+\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\t\tif (interfacesToVisit == null)\r", "+\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[5][];\r", "+\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "+\t\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\t\tinterfacesToVisit,\r", "+\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "+\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\tlastPosition);\r", "+\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\t\t\t}\r", "+\r", "+\t\t\tfindMemberTypes(\r", "+\t\t\t\ttypeName,\r", "+\t\t\t\tcurrentType.memberTypes(),\r", "+\t\t\t\ttypesFound,\r", "+\t\t\t\treceiverType,\r", "+\t\t\t\ttypeInvocation);\r", "+\t\t\tcurrentType = currentType.superclass();\r", "+\t\t} while (currentType != null);\r", "+\r", "+\t\tif (interfacesToVisit != null) {\r", "+\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "+\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "+\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "+\t\t\t\t\tReferenceBinding anInterface = interfaces[j];\r", "+\t\t\t\t\tif ((anInterface.tagBits & TagBits.InterfaceVisited) == 0) {\r", "+\t\t\t\t\t\t// if interface as not already been visited\r", "+\t\t\t\t\t\tanInterface.tagBits |= TagBits.InterfaceVisited;\r", "+\r", "+\t\t\t\t\t\tfindMemberTypes(\r", "+\t\t\t\t\t\t\ttypeName,\r", "+\t\t\t\t\t\t\tanInterface.memberTypes(),\r", "+\t\t\t\t\t\t\ttypesFound,\r", "+\t\t\t\t\t\t\treceiverType,\r", "+\t\t\t\t\t\t\ttypeInvocation);\r", "+\r", "+\t\t\t\t\t\tReferenceBinding[] itsInterfaces = anInterface.superInterfaces();\r", "+\t\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "+\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\t\t\t\t\tinterfacesToVisit,\r", "+\t\t\t\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "+\t\t\t\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\t\t\t\tlastPosition);\r", "+\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\t\t\t}\r", "+\r", "+\t\t\t// bit reinitialization\r", "+\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "+\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "+\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "+\t\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ada72fe013604ca8b7ce1533df491cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r private void findMemberTypes(char[] typeName, ReferenceBinding currentType, Scope scope)", "signatureAfterChange": "\r \tprivate void findMemberTypes(\r \t\tchar[] typeName,\r \t\tReferenceBinding receiverType,\r \t\tScope scope,\r \t\tSourceTypeBinding typeInvocation)", "diff": ["-}\r", "-private void findMemberTypes(char[] typeName, ReferenceBinding currentType, Scope scope) {\r", "-\tif (typeName == null) return;\r", "-\tif (currentType.superInterfaces() == null) return; // we're trying to find a supertype\r", "-\tObjectVector typesFound = new ObjectVector();\r", "-\tif (insideQualifiedReference || typeName.length == 0) { // do not search up the hierarchy\r", "-\t\tfindMemberTypes(typeName, currentType.memberTypes(), typesFound);\r", "-\t\treturn;\r", "-\t}\r", "-\tReferenceBinding[][] interfacesToVisit = null;\r", "-\tint lastPosition = -1;\r", "-\tdo {\r", "-\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "-\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\tif (interfacesToVisit == null)\r", "-\t\t\t\tinterfacesToVisit = new ReferenceBinding[5][];\r", "-\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);\r", "-\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t}\r", "-\t\tfindMemberTypes(typeName, currentType.memberTypes(), typesFound);\r", "-\t\tcurrentType = currentType.superclass();\r", "-\t} while (currentType != null);\r", "-\tif (interfacesToVisit != null) {\r", "-\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "-\t\t\t\tReferenceBinding anInterface = interfaces[j];\r", "-\t\t\t\tif ((anInterface.tagBits & TagBits.InterfaceVisited) == 0) { // if interface as not already been visited\r", "-\t\t\t\t\tanInterface.tagBits |= TagBits.InterfaceVisited;\r", "-\t\t\t\t\tfindMemberTypes(typeName, anInterface.memberTypes(), typesFound);\r", "-\r", "-\t\t\t\t\tReferenceBinding[] itsInterfaces = anInterface.superInterfaces();\r", "-\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "-\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "-\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[lastPosition * 2][], 0, lastPosition);\r", "-\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "-\t\t\t\t\t}\r", "-\t\t}\r", "-\t\t// bit reinitialization\r", "-\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "-\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "-\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "-\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;\r", "-\t\t}\r", "-\t}\r", "-}\r", "+\t}\r", "+\tprivate void findMemberTypes(\r", "+\t\tchar[] typeName,\r", "+\t\tReferenceBinding receiverType,\r", "+\t\tScope scope,\r", "+\t\tSourceTypeBinding typeInvocation) {\r", "+\r", "+\t\tReferenceBinding currentType = receiverType;\r", "+\t\tif (typeName == null)\r", "+\t\t\treturn;\r", "+\t\tif (currentType.superInterfaces() == null)\r", "+\t\t\treturn; // we're trying to find a supertype\r", "+\r", "+\t\tObjectVector typesFound = new ObjectVector();\r", "+\t\tif (insideQualifiedReference\r", "+\t\t\t|| typeName.length == 0) { // do not search up the hierarchy\r", "+\t\t\tfindMemberTypes(\r", "+\t\t\t\ttypeName,\r", "+\t\t\t\tcurrentType.memberTypes(),\r", "+\t\t\t\ttypesFound,\r", "+\t\t\t\treceiverType,\r", "+\t\t\t\ttypeInvocation);\r", "+\t\t\treturn;\r", "+\t\t}\r", "+\r", "+\t\tReferenceBinding[][] interfacesToVisit = null;\r", "+\t\tint lastPosition = -1;\r", "+\t\tdo {\r", "+\t\t\tReferenceBinding[] itsInterfaces = currentType.superInterfaces();\r", "+\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\t\tif (interfacesToVisit == null)\r", "+\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[5][];\r", "+\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "+\t\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\t\tinterfacesToVisit,\r", "+\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "+\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\tlastPosition);\r", "+\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\t\t\t}\r", "+\r", "+\t\t\tfindMemberTypes(\r", "+\t\t\t\ttypeName,\r", "+\t\t\t\tcurrentType.memberTypes(),\r", "+\t\t\t\ttypesFound,\r", "+\t\t\t\treceiverType,\r", "+\t\t\t\ttypeInvocation);\r", "+\t\t\tcurrentType = currentType.superclass();\r", "+\t\t} while (currentType != null);\r", "+\r", "+\t\tif (interfacesToVisit != null) {\r", "+\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "+\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "+\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++) {\r", "+\t\t\t\t\tReferenceBinding anInterface = interfaces[j];\r", "+\t\t\t\t\tif ((anInterface.tagBits & TagBits.InterfaceVisited) == 0) {\r", "+\t\t\t\t\t\t// if interface as not already been visited\r", "+\t\t\t\t\t\tanInterface.tagBits |= TagBits.InterfaceVisited;\r", "+\r", "+\t\t\t\t\t\tfindMemberTypes(\r", "+\t\t\t\t\t\t\ttypeName,\r", "+\t\t\t\t\t\t\tanInterface.memberTypes(),\r", "+\t\t\t\t\t\t\ttypesFound,\r", "+\t\t\t\t\t\t\treceiverType,\r", "+\t\t\t\t\t\t\ttypeInvocation);\r", "+\r", "+\t\t\t\t\t\tReferenceBinding[] itsInterfaces = anInterface.superInterfaces();\r", "+\t\t\t\t\t\tif (itsInterfaces != NoSuperInterfaces) {\r", "+\t\t\t\t\t\t\tif (++lastPosition == interfacesToVisit.length)\r", "+\t\t\t\t\t\t\t\tSystem.arraycopy(\r", "+\t\t\t\t\t\t\t\t\tinterfacesToVisit,\r", "+\t\t\t\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\t\t\t\tinterfacesToVisit = new ReferenceBinding[lastPosition * 2][],\r", "+\t\t\t\t\t\t\t\t\t0,\r", "+\t\t\t\t\t\t\t\t\tlastPosition);\r", "+\t\t\t\t\t\t\tinterfacesToVisit[lastPosition] = itsInterfaces;\r", "+\t\t\t}\r", "+\r", "+\t\t\t// bit reinitialization\r", "+\t\t\tfor (int i = 0; i <= lastPosition; i++) {\r", "+\t\t\t\tReferenceBinding[] interfaces = interfacesToVisit[i];\r", "+\t\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "+\t\t\t\t\tinterfaces[j].tagBits &= ~TagBits.InterfaceVisited;\r", "+\t\t\t}\r"]}], "num": 12769}
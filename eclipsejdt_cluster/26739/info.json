{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "99e050d37a4a20b1203cca2ed93efd7a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e0923474c7a926b47fe3f83536301c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaConventionTests.java", "commitBeforeChange": "38835101c5cb5aa877400915ae93db40feae72e1", "commitAfterChange": "4007ad30c270c1323bfebe340590d44f8586e167", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void testValidTypeVariableName()", "signatureAfterChange": " \tpublic void testValidTypeVariableName()", "diff": ["-\t\tassertTrue(\"E sould be a valid variable name\", JavaConventions.validateTypeVariableName(\"E\", sourceLevel, complianceLevel).isOK());", "+\t\tassertEquals(\"E sould be a valid variable name\", IStatus.OK, validate(\"E\", TYPE_VARIABLE_NAME));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31b8e3f0eb541d03ef19b003642e2bef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaConventionTests.java", "commitBeforeChange": "38835101c5cb5aa877400915ae93db40feae72e1", "commitAfterChange": "4007ad30c270c1323bfebe340590d44f8586e167", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void testValidImportDeclaration()", "signatureAfterChange": " \tpublic void testValidImportDeclaration()", "diff": ["-\t\tassertTrue(\"import not reconized as valid\", JavaConventions.validateImportDeclaration(\"java.math.*\", sourceLevel, complianceLevel).isOK());", "+\t\tassertEquals(\"import not reconized as valid\", IStatus.OK, validate(\"java.math.*\", IMPORT_DECLARATION));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7925e8fe2ca38fa7cea856e99bd3e06", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaConventionTests.java", "commitBeforeChange": "38835101c5cb5aa877400915ae93db40feae72e1", "commitAfterChange": "4007ad30c270c1323bfebe340590d44f8586e167", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic void testValidUnicodeImportDeclaration()", "signatureAfterChange": " \tpublic void testValidUnicodeImportDeclaration()", "diff": ["-\t\tassertTrue(\"import not reconized as valid\", JavaConventions.validateImportDeclaration(pkgName, sourceLevel, complianceLevel).isOK());", "+\t\tassertEquals(\"import not reconized as valid\", IStatus.OK, validate(pkgName, IMPORT_DECLARATION));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a79ac897ec0ba286183faa3723feb5a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaConventionTests.java", "commitBeforeChange": "38835101c5cb5aa877400915ae93db40feae72e1", "commitAfterChange": "4007ad30c270c1323bfebe340590d44f8586e167", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic void testValidMethodName()", "signatureAfterChange": " \tpublic void testValidMethodName()", "diff": ["-\t\tassertTrue(\"unicode method name not handled\", JavaConventions.validateMethodName(\"getSiz\\\\u0065\", sourceLevel, complianceLevel).isOK());", "+\t\tassertEquals(\"unicode method name not handled\", IStatus.OK, validate(\"getSiz\\\\u0065\", METHOD_NAME));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f56b26f7e5a8eea441d9dc5c844ec627", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaConventionTests.java", "commitBeforeChange": "38835101c5cb5aa877400915ae93db40feae72e1", "commitAfterChange": "4007ad30c270c1323bfebe340590d44f8586e167", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic void testValidFieldName()", "signatureAfterChange": " \tpublic void testValidFieldName()", "diff": ["-\t\tassertTrue(\"unicode field name not handled\", JavaConventions.validateFieldName(\"s\\\\u0069ze\", sourceLevel, complianceLevel).isOK());", "+\t\tassertEquals(\"unicode field name not handled\", IStatus.OK, validate(\"s\\\\u0069ze\", FIELD_NAME));"]}], "num": 26739}
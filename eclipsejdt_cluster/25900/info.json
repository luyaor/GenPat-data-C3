{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cfa87acde9b0518bfdc66ff2c7ba9e3d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7194702123257f2e89b53e0524e420fe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void initializeBounds(Scope scope, ParameterizedTypeBinding capturedParameterizedType)", "signatureAfterChange": " \tpublic void initializeBounds(Scope scope, ParameterizedTypeBinding capturedParameterizedType)", "diff": ["-\t\t\t\t\t\tif (capturedWildcardBound.isArrayType() || capturedWildcardBound == this) {", "+\t\t\t\t\t\tif (capturedWildcardBound.isArrayType() || TypeBinding.equalsEquals(capturedWildcardBound, this)) {", "-\t\tif (substitutedVariableSuperclass == this) substitutedVariableSuperclass = originalVariableSuperclass;", "+\t\tif (TypeBinding.equalsEquals(substitutedVariableSuperclass, this)) substitutedVariableSuperclass = originalVariableSuperclass;", "-\t\t\t\tif (substitutedVariableInterfaces[i] == this) substitutedVariableInterfaces[i] = originalVariableInterfaces[i];", "+\t\t\t\tif (TypeBinding.equalsEquals(substitutedVariableInterfaces[i], this)) substitutedVariableInterfaces[i] = originalVariableInterfaces[i];", "-\t\t\t\t\tif (capturedWildcardBound.isArrayType() || capturedWildcardBound == this) {", "+\t\t\t\t\tif (capturedWildcardBound.isArrayType() || TypeBinding.equalsEquals(capturedWildcardBound, this)) {", "-\t\t\t\tif (wildcardVariable.firstBound == substitutedVariableSuperclass || originalWildcardBound == substitutedVariableSuperclass) {", "+\t\t\t\tif (TypeBinding.equalsEquals(wildcardVariable.firstBound, substitutedVariableSuperclass) || TypeBinding.equalsEquals(originalWildcardBound, substitutedVariableSuperclass)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a0ac1ad42e1952c1cfcd2ff0682c1c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["-\t\t\t\t\t\t\tif (method.returnType.erasure() != method2.returnType.erasure()) {", "+\t\t\t\t\t\t\tif (TypeBinding.notEquals(method.returnType.erasure(), method2.returnType.erasure())) {", "-\t\t\t\t\t\t\t\t\t\tif (params1[index] != params2[index].erasure()) {", "+\t\t\t\t\t\t\t\t\t\tif (TypeBinding.notEquals(params1[index], params2[index].erasure())) {", "-\t\t\t\t\t\t\t\t\t\t\t\tif (params2[index].erasure() != ((RawTypeBinding)params1[index]).actualType()) {", "+\t\t\t\t\t\t\t\t\t\t\t\tif (TypeBinding.notEquals(params2[index].erasure(), ((RawTypeBinding)params1[index]).actualType())) {", "-\t\t\t\t\t\t\t\t\t\tif (params1[index] == params2[index]) {", "+\t\t\t\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(params1[index], params2[index])) {", "-\t\t\t\t\t\t\t\t\t\t\tif (params1[index].erasure() != params2[index]) {", "+\t\t\t\t\t\t\t\t\t\t\tif (TypeBinding.notEquals(params1[index].erasure(), params2[index])) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tif (params1[index].erasure() != ((RawTypeBinding)params2[index]).actualType()) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tif (TypeBinding.notEquals(params1[index].erasure(), ((RawTypeBinding)params2[index]).actualType())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c86fbbc2cba34f85c00063e7d55cdf13", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 142, "methodNumberAfterChange": 142, "signatureBeforeChange": " \tprivate void findExceptionFromTryStatement( \t\t\tchar[] typeName, \t\t\tReferenceBinding exceptionType, \t\t\tReferenceBinding receiverType, \t\t\tSourceTypeBinding invocationType, \t\t\tBlockScope scope, \t\t\tObjectVector typesFound, \t\t\tboolean searchSuperClasses)", "signatureAfterChange": " \tprivate void findExceptionFromTryStatement( \t\t\tchar[] typeName, \t\t\tReferenceBinding exceptionType, \t\t\tReferenceBinding receiverType, \t\t\tSourceTypeBinding invocationType, \t\t\tBlockScope scope, \t\t\tObjectVector typesFound, \t\t\tboolean searchSuperClasses)", "diff": ["-\t\t\tif (exceptionType != javaLangThrowable) {", "+\t\t\tif (TypeBinding.notEquals(exceptionType, javaLangThrowable)) {", "-\t\t\t\twhile(superClass != null && superClass != javaLangThrowable) {", "+\t\t\t\twhile(superClass != null && TypeBinding.notEquals(superClass, javaLangThrowable)) {", "-\t\t\tif (exceptionType == otherType)", "+\t\t\tif (TypeBinding.equalsEquals(exceptionType, otherType))", "-\t\t\t\t\t\t\t\tif (localType == exceptionType) {", "+\t\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(localType, exceptionType)) {", "-\t\t\t\t\t\t\t\tif (memberTypes[j] == exceptionType) {", "+\t\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(memberTypes[j], exceptionType)) {", "-\t\t\t\t\t\t\t\tif (types[j] == exceptionType) {", "+\t\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(types[j], exceptionType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfb6ae343a06a99ad85fd64e1d4aabc3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (((CastExpression)this.receiver).expression.resolvedType == this.actualReceiverType) {", "+\t\tif (TypeBinding.equalsEquals(((CastExpression)this.receiver).expression.resolvedType, this.actualReceiverType)) {", "-\tif (this.actualReceiverType != oldReceiverType && this.receiver.postConversionType(scope) != this.actualReceiverType) { // record need for explicit cast at codegen since receiver could not handle it", "+\tif (TypeBinding.notEquals(this.actualReceiverType, oldReceiverType) && TypeBinding.notEquals(this.receiver.postConversionType(scope), this.actualReceiverType)) { // record need for explicit cast at codegen since receiver could not handle it", "-\t\t\t\t&& declaringClass != this.actualReceiverType", "+\t\t\t\t&& TypeBinding.notEquals(declaringClass, this.actualReceiverType)", "-\t\t\t\t\t&& (sourceType == declaringClass || sourceType.superclass == declaringClass) // enum constant body", "+\t\t\t\t\t&& (TypeBinding.equalsEquals(sourceType, declaringClass) || TypeBinding.equalsEquals(sourceType.superclass, declaringClass)) // enum constant body"]}], "num": 25900}
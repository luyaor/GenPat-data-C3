{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9165484643c6ba0d4a452a4fbdbb43b3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "580df158067d223e8cd4d978755de716", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\t\tif (currentType == null) return null;", "+\t\t\t\tif (currentType == null) return currentType;", "-\t\tboolean argHasError = false; // typeChecks all arguments", "+\t\tboolean argHasError = scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_5;", "+\t\t\tif (this.arguments != null) { // still attempt to resolve arguments", "+\t\t\t\tfor (int i = 0, max = this.arguments.length; i < max; i++) {", "+\t\t\t\t\tthis.arguments[i].resolveType(scope);", "+\t\t\t\t}", "+\t\t\t}\t\t\t\t\t", "-\tif (this.resolvedType == null)", "+\tif (this.resolvedType == null || !this.resolvedType.isValidBinding()) {", "+\t}", "-\t\tif (binding.declaringClass == null)", "+\t\tif (binding.declaringClass == null) {", "+\t\t}", "+\t\tif (this.type != null && !this.type.resolvedType.isValidBinding()) {", "+\t\t\treturn null;", "+\t\t}", "+\tif ((this.binding.tagBits & TagBits.HasMissingType) != 0) {", "+\t\tscope.problemReporter().missingTypeInConstructor(this, this.binding);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ceaccdede3f0efd30d1fffff6691915d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tboolean argHasError = false; // typeChecks all arguments", "+\t\tboolean argHasError = scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_5; // typeChecks all arguments", "+\t\t\tif (this.arguments != null) { // still attempt to resolve arguments", "+\t\t\t\tfor (int i = 0, max = this.arguments.length; i < max; i++) {", "+\t\t\t\t\tthis.arguments[i].resolveType(scope);", "+\t\t\t\t}", "+\t\t\t}\t\t\t\t\t", "-\t\t\t: scope.getMethod(this.actualReceiverType, this.selector, argumentTypes, this); ", "+\t\t\t: scope.getMethod(this.actualReceiverType, this.selector, argumentTypes, this);", "-\t\treturn this.resolvedType;", "+\t\treturn (this.resolvedType != null && (this.resolvedType.tagBits & TagBits.HasMissingType) == 0)", "+\t\t\t\t\t\t? this.resolvedType ", "+\t\t\t\t\t\t: null;", "+\t}", "+\tif ((this.binding.tagBits & TagBits.HasMissingType) != 0) {", "+\t\tscope.problemReporter().missingTypeInMethod(this, this.binding);", "-\t\t// the \"receiver\" must not be a type, in other words, a NameReference that the TC has bound to a Type", "+\t\t// the \"receiver\" must not be a type", "-\treturn this.resolvedType;", "+\treturn (this.resolvedType.tagBits & TagBits.HasMissingType) == 0", "+\t\t\t\t? this.resolvedType ", "+\t\t\t\t: null;"]}], "num": 24982}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72e41622d821dc74baa1fe4cbbf7ab82", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "327b3255d04ee5930815b36ed4f3e196", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceModelTests.java", "commitBeforeChange": "4119a65befb0f1b826133c8b40790cea36510774", "commitAfterChange": "199c84f2cae998bf19dec5ba0cb5f860d990b3fa", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 35, "signatureBeforeChange": "  public void testCloseProjects() throws JavaModelException", "signatureAfterChange": "  public void testCloseProjects() throws JavaModelException", "diff": ["-\t// store current settings", "-\tlong oldSnapInterval = ENV.getWorkspace().getDescription().getSnapshotInterval();", "-\tboolean oldAutoBuildPolicy = ENV.isAutoBuilding();", "-\t", "-\t// prevent snapshots and autobuilds from disturbing our measures", "-\tENV.getWorkspace().getDescription().setSnapshotInterval(100000);", "-\tENV.getWorkspace().getDescription().setAutoBuilding(false);", "-\t", "-\ttry {", "-\t\tint length=ALL_PROJECTS.length;", "-\t\t// Warm-up", "-\t\tfor (int i=0; i<WARMUP_COUNT; i++) {", "-\t\t\tfor (int j=0; j<length; j++) {", "-\t\t\t\tENV.closeProject(ALL_PROJECTS[j].getPath());", "-\t\t\t}", "-\t\t\tfor (int j=0; j<length; j++) {", "-\t\t\t\tENV.openProject(ALL_PROJECTS[j].getPath());", "-\t\t\t}", "+\tint length=ALL_PROJECTS.length;", "+\t// Warm-up", "+\tint wmax = WARMUP_COUNT / 10;", "+\tfor (int i=0; i<wmax; i++) {", "+\t\tfor (int j=0; j<length; j++) {", "+\t\t\tENV.closeProject(ALL_PROJECTS[j].getPath());", "-\t", "-\t\t// Measures", "-\t\tfor (int i=0; i<MEASURES_COUNT; i++) {", "-\t\t\tAbstractJavaModelTests.waitUntilIndexesReady();", "-\t\t\t// should not be autobuilding...", "-\t\t\tif (ENV.isAutoBuilding()) {", "-\t\t\t\tENV.waitForAutoBuild();", "-\t\t\t}", "-\t\t\trunGc();", "-\t\t\tstartMeasuring();", "-\t\t\tfor (int j=0; j<length; j++) {", "-\t\t\t\tENV.closeProject(ALL_PROJECTS[j].getPath());", "-\t\t\t}", "-\t\t\tstopMeasuring();", "-\t\t\tfor (int j=0; j<length; j++) {", "-\t\t\t\tENV.openProject(ALL_PROJECTS[j].getPath());", "-\t\t\t}", "+\t\tfor (int j=0; j<length; j++) {", "+\t\t\tENV.openProject(ALL_PROJECTS[j].getPath());", "-\t\t// Commit", "-\t\tcommitMeasurements();", "-\t\tassertPerformance();", "-\tfinally {", "-\t\t// restore previous settings", "-\t\tENV.getWorkspace().getDescription().setSnapshotInterval(oldSnapInterval);", "-\t\tENV.getWorkspace().getDescription().setAutoBuilding(oldAutoBuildPolicy);", "+", "+\t// Measures", "+\tfor (int i=0; i<MEASURES_COUNT; i++) {", "+\t\tAbstractJavaModelTests.waitUntilIndexesReady();", "+\t\trunGc();", "+\t\tstartMeasuring();", "+\t\tfor (int j=0; j<length; j++) {", "+\t\t\tENV.closeProject(ALL_PROJECTS[j].getPath());", "+\t\t}", "+\t\tstopMeasuring();", "+\t\tfor (int j=0; j<length; j++) {", "+\t\t\tENV.openProject(ALL_PROJECTS[j].getPath());", "+\t\t}", "+", "+\t// Commit", "+\tcommitMeasurements();", "+\tassertPerformance();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "908ec882f9930473df59c194f6bd729e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceModelTests.java", "commitBeforeChange": "29911619e9eb038f230f09e2190cd9ca1e9cfd72", "commitAfterChange": "f342df887ac2bde5a33a69c02311bfd7246a7e43", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void testFindType() throws CoreException", "signatureAfterChange": " public void testFindType() throws CoreException", "diff": ["-\t// get 20 projects", "-\tint max = 20;", "-\tIJavaProject[] projects = new IJavaProject[max];", "-\tfor (int i = 0; i < max; i++) {", "-\t\tprojects[i] = createJavaProject(\"FindType\" + i);", "-\t}", "-\tAbstractJavaModelTests.waitUntilIndexesReady();", "-\tAbstractJavaModelTests.waitForAutoBuild();", "+\tIJavaProject[] existingProjects = model.getJavaProjects();", "-\t\t// warm up", "-\t\tint warmup = WARMUP_COUNT / 10;", "-\t\tfor (int i = 0; i < warmup; i++) {", "-\t\t\tmodel.close();", "-\t\t\tfor (int j = 0; j < max; j++) {", "-\t\t\t\tprojects[j].findType(\"java.lang.Object\");", "-\t\t\t}", "-\t\t}", "-\t\t\t", "-\t\t// measure performance", "-\t\tfor (int i = 0; i < MEASURES_COUNT; i++) {", "-\t\t\tmodel.close();", "-\t\t\trunGc();", "-\t\t\tstartMeasuring();", "-\t\t\tfor (int j = 0; j < max; j++) {", "-\t\t\t\tprojects[j].findType(\"java.lang.Object\");", "-\t\t\t}", "-\t\t\tstopMeasuring();", "+\t\t// close existing projects", "+\t\tfor (int i = 0, length = existingProjects.length; i < length; i++) {", "+\t\t\texistingProjects[i].getProject().close(null);", "-\t\tcommitMeasurements();", "-\t\tassertPerformance();", "-\t} finally {", "+\t\t// get 20 projects", "+\t\tint max = 20;", "+\t\tIJavaProject[] projects = new IJavaProject[max];", "-\t\t\tprojects[i].getProject().delete(false, null);", "+\t\t\tprojects[i] = createJavaProject(\"FindType\" + i);", "+\t\t}", "+\t\tAbstractJavaModelTests.waitUntilIndexesReady();", "+\t\tAbstractJavaModelTests.waitForAutoBuild();", "+\t\t", "+\t\ttry {", "+\t\t\t// warm up", "+\t\t\tint warmup = WARMUP_COUNT / 10;", "+\t\t\tfor (int i = 0; i < warmup; i++) {", "+\t\t\t\tmodel.close();", "+\t\t\t\tfor (int j = 0; j < max; j++) {", "+\t\t\t\t\tprojects[j].findType(\"java.lang.Object\");", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t\t", "+\t\t\t// measure performance", "+\t\t\tfor (int i = 0; i < MEASURES_COUNT; i++) {", "+\t\t\t\tmodel.close();", "+\t\t\t\trunGc();", "+\t\t\t\tstartMeasuring();", "+\t\t\t\tfor (int j = 0; j < max; j++) {", "+\t\t\t\t\tprojects[j].findType(\"java.lang.Object\");", "+\t\t\t\t}", "+\t\t\t\tstopMeasuring();", "+\t\t\t}", "+\t\t", "+\t\t\tcommitMeasurements();", "+\t\t\tassertPerformance();", "+\t\t} finally {", "+\t\t\tfor (int i = 0; i < max; i++) {", "+\t\t\t\tprojects[i].getProject().delete(false, null);", "+\t\t\t}", "+\t\t}", "+\t} finally {", "+\t\t// reopen existing projects", "+\t\tfor (int i = 0, length = existingProjects.length; i < length; i++) {", "+\t\t\texistingProjects[i].getProject().open(null);"]}], "num": 15508}
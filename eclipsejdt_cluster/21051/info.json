{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab21f47defc38bc2d8b2cef30346dd7d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a2d5784594ecc4299b2db54629d82b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.pluggable.tests/src/org/eclipse/jdt/apt/pluggable/tests/BuilderTests.java", "commitBeforeChange": "a7d573a8838570508a56f06b38a60f2c878b1524", "commitAfterChange": "60cbfea815d27d78402a155a7bbcf7fcfc22b5b6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic void testDummy()", "signatureAfterChange": " \tpublic void testFinalRound() throws Throwable", "diff": ["-\t// Need this to avoid JUnit complaining that there are no tests in this suite", "-\tpublic void testDummy() {", "-\t\tassertTrue(true);", "+\t */", "+\tpublic void testFinalRound() throws Throwable {", "+\t\tProcessorTestStatus.reset();", "+\t\tTestFinalRoundProc.resetNumRounds();", "+\t\tIJavaProject jproj = createJavaProject(_projectName);", "+\t\tdisableJava5Factories(jproj);", "+\t\tIProject proj = jproj.getProject();", "+\t\tIPath projPath = proj.getFullPath();", "+\t\tIPath root = projPath.append(\"src\");", "+\t\t", "+\t\t// The @FinalRoundTestTrigger processor does not generate any files when it", "+\t\t// first runs; but on its final round it then generates a new Java type", "+\t\t// that is annotated with @FinalRoundTestTrigger.", "+\t\tenv.addClass(root, \"t\", \"Foo\",", "+\t\t\t\t\"package t;\\n\" +", "+\t\t\t\t\"import org.eclipse.jdt.apt.pluggable.tests.annotations.FinalRoundTestTrigger;\\n\" +", "+\t\t\t\t\"@FinalRoundTestTrigger\\n\" +", "+\t\t\t\t\"public class Foo {}\"", "+\t\t);", "+\t\tAptConfig.setEnabled(jproj, true);", "+\t\t", "+\t\tfullBuild();", "+\t\texpectingNoProblems();", "+\t\t", "+\t\t// Processor should have run total of two rounds; compiled classes", "+\t\t// should include Foo and FinalRoundGen.", "+\t\tassertEquals(2, TestFinalRoundProc.getNumRounds());", "+\t\texpectingUniqueCompiledClasses(new String[] {\"t.Foo\", \"g.FinalRoundGen\"});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7bfa01cf12a1e1795f608df68a9080b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchBugsTests.java", "commitBeforeChange": "c0735951a055fba3f0be3b86f55a77d744b6fbe2", "commitAfterChange": "68f72525a8dac445249ab2b31cd220cf1a851f87", "methodNumberBeforeChange": 398, "methodNumberAfterChange": 404, "signatureBeforeChange": " \t\tpublic void acceptTypeNameMatch(TypeNameMatch match)", "signatureAfterChange": " public void testBug161028() throws CoreException", "diff": ["-\t\tpublic void acceptTypeNameMatch(TypeNameMatch match) {", "-\t\t\tassertTrue(\"Problem with equals method for match \"+match, match.equals(match.getType()));", "-\t\t\tassertEquals(\"Problem with hashCode method for match \"+match, match.getType().hashCode(), match.hashCode());", "-\t\t\tsuper.acceptTypeNameMatch(match);", "-\t\t}", "+ */", "+public void testBug161028() throws CoreException {", "+\tTypeNameMatch match1 = SearchEngine.createTypeNameMatch(null, 0);", "+\tassertEquals(\"Should be equals!\", match1, match1);", "+\tassertEquals(\"Wrong toString value!\", \"org.eclipse.jdt.internal.core.search.JavaSearchTypeNameMatch@0\", match1.toString());", "+\tTypeNameMatch match2 = SearchEngine.createTypeNameMatch(null, 0);", "+\tassertFalse(\"Should NOT be identical!\", match1 == match2);", "+\tassertTrue(\"Should be equals!\", match1.equals(match2));", "+\tassertTrue(\"Should be equals!\", match2.equals(match1));", "+\tassertEquals(\"Wrong toString value!\", match1, match2);", "+\tassertEquals(\"Should have same hashCode!\", match1.hashCode(), match2.hashCode());", "+}"]}], "num": 21051}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fbd79b308a8469db692ea45fbec9d649", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a576913f0e39d6c672deaa36393a41d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["+\t\t\t\tflowInfo,", "-\t\tFlowInfo actionInfo = flowInfo.copy().unconditionalInits().discardNullRelatedInitializations();", "+\t\tUnconditionalFlowInfo actionInfo = flowInfo.nullInfoLessUnconditionalCopy();", "+\t\t// we need to collect the contribution to nulls of the coming paths through the", "+\t\t// loop, be they falling through normally or branched to break, continue labels", "+\t\t// or catch blocks", "-\t\t\tactionInfo = action.analyseCode(currentScope, loopingContext, actionInfo);", "+\t\t\tactionInfo = action.", "+\t\t\t\tanalyseCode(currentScope, loopingContext, actionInfo).", "+\t\t\t\tunconditionalInits();", "-\t\t\tif (!actionInfo.isReachable() && !loopingContext.initsOnContinue.isReachable()) {", "+\t\t\tif ((actionInfo.tagBits & ", "+\t\t\t\t\tloopingContext.initsOnContinue.tagBits & ", "+\t\t\t\t\tFlowInfo.UNREACHABLE) != 0) {", "-\t\tactionInfo =", "+\t\tLoopingFlowContext condLoopContext;", "+\t\tFlowInfo condInfo =", "-\t\t\t\tloopingContext,", "+\t\t\t\t(condLoopContext =", "+\t\t\t\t\tnew LoopingFlowContext(flowContext,\tflowInfo, this, null, ", "+\t\t\t\t\t\tnull, currentScope)),", "-\t\t\t\t\t: (actionInfo.mergedWith(loopingContext.initsOnContinue))));", "+\t\t\t\t\t: (actionInfo.mergedWith(loopingContext.initsOnContinue))).copy());", "-\t\t\tloopingContext.complainOnDeferredChecks(currentScope, actionInfo);", "+\t\t\tloopingContext.complainOnDeferredFinalChecks(currentScope, condInfo);", "+\t\t\tcondLoopContext.complainOnDeferredFinalChecks(currentScope, condInfo);", "+\t\t\tUnconditionalFlowInfo checkFlowInfo;", "+\t\t\tloopingContext.complainOnDeferredNullChecks(currentScope, ", "+\t\t\t\t\tcheckFlowInfo = actionInfo.", "+\t\t\t\t\t\taddPotentialNullInfoFrom(", "+\t\t\t\t\t\t  condInfo.initsWhenTrue().unconditionalInits()));", "+\t\t\tcondLoopContext.complainOnDeferredNullChecks(currentScope, ", "+\t\t\t\t\tcheckFlowInfo);", "-\t\t\t\tisConditionOptimizedTrue, ", "-\t\t\t\tactionInfo.initsWhenFalse().addInitializationsFrom(flowInfo), // recover null inits from before condition analysis", "+\t\t\t\tisConditionOptimizedTrue,", "+\t\t\t\t(condInfo.tagBits & FlowInfo.UNREACHABLE) == 0 ?", "+\t\t\t\t\t\tflowInfo.addInitializationsFrom(condInfo.initsWhenFalse()) : condInfo, ", "+\t\t\t\t\t// recover null inits from before condition analysis"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efc23de2ecd6d421ebf025c2ba2fc24a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "signatureAfterChange": " public void generateCompoundAssignment(BlockScope currentScope, CodeStream codeStream, MethodBinding writeAccessor, Expression expression, int operator, int assignmentImplicitConversion, boolean valueRequired)", "diff": ["-\t\t\tFieldBinding fieldBinding;", "-\t\t\tif ((fieldBinding = (FieldBinding) this.codegenBinding).isStatic()) {", "+\t\t\tFieldBinding codegenField = ((FieldBinding) this.binding).original();", "+\t\t\tif (codegenField.isStatic()) {", "-\t\t\t\t\tcodeStream.getstatic(fieldBinding);", "+\t\t\t\t\tTypeBinding constantPoolDeclaringClass = CodeStream.getConstantPoolDeclaringClass(currentScope, codegenField, this.actualReceiverType, true /* implicit this */);\t\t\t\t\t", "+\t\t\t\t\tcodeStream.fieldAccess(Opcodes.OPC_getstatic, codegenField, constantPoolDeclaringClass);", "-\t\t\t\t\tcodeStream.getfield(fieldBinding);", "+\t\t\t\t\tTypeBinding constantPoolDeclaringClass = CodeStream.getConstantPoolDeclaringClass(currentScope, codegenField, this.actualReceiverType, true /* implicit this */);", "+\t\t\t\t\tcodeStream.fieldAccess(Opcodes.OPC_getfield, codegenField, constantPoolDeclaringClass);", "-\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.codegenBinding;", "+\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.binding;", "-\t\t\tfieldStore(codeStream, (FieldBinding) this.codegenBinding, writeAccessor, valueRequired);", "+\t\t\tFieldBinding codegenField = ((FieldBinding) this.binding).original();", "+\t\t\tfieldStore(currentScope, codeStream, codegenField, writeAccessor, this.actualReceiverType, true /* implicit this*/, valueRequired);", "-\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.codegenBinding;", "+\t\t\tLocalVariableBinding localBinding = (LocalVariableBinding) this.binding;", "-\t\t\t\tif ((localBinding.type == TypeBinding.LONG) || (localBinding.type == TypeBinding.DOUBLE)) {", "-\t\t\t\t\tcodeStream.dup2();", "-\t\t\t\t} else {", "-\t\t\t\t\tcodeStream.dup();", "+\t\t\t\tswitch (localBinding.type.id) {", "+\t\t\t\t\tcase TypeIds.T_long :", "+\t\t\t\t\tcase TypeIds.T_double :", "+\t\t\t\t\t\tcodeStream.dup2();", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tcodeStream.dup();", "+\t\t\t\t\t\tbreak;"]}], "num": 32008}
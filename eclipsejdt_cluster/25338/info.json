{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b6130f0674f4eb0e3a05bd709f649df", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fff1efd06a597e60f4b278219d280e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "2a762b85f858691a63d4547af177cc649d7b1329", "commitAfterChange": "7675c409a4b3b1e15b1cc476a0a66b988b5fb4a0", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 50, "signatureBeforeChange": "\r \t\tpublic IClasspathEntry[] getResolvedClasspath(\r \t\t\tboolean ignoreUnresolvedVariable,\r \t\t\tboolean generateMarkerOnError)\r \t\t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic IClasspathEntry[] getResolvedClasspath(\r \t\tIClasspathEntry[] classpathEntries,\r \t\tboolean ignoreUnresolvedEntry,\r \t\tboolean generateMarkerOnError)\r \t\tthrows JavaModelException", "diff": ["-\t\t */\r", "-\t\tpublic IClasspathEntry[] getResolvedClasspath(\r", "-\t\t\tboolean ignoreUnresolvedVariable,\r", "-\t\t\tboolean generateMarkerOnError)\r", "-\t\t\tthrows JavaModelException {\r", "-\t\t\tJavaProjectElementInfo projectInfo;\r", "-\t\t\tif (this.isOpen()){\r", "-\t\t\t\tprojectInfo = getJavaProjectElementInfo();\r", "-\t\t\t} else {\r", "-\t\t\t\t// avoid populating the model for only retrieving the resolved classpath (13395)\r", "-\t\t\t\tprojectInfo = null;\r", "+\t */\r", "+\tpublic IClasspathEntry[] getResolvedClasspath(\r", "+\t\tIClasspathEntry[] classpathEntries,\r", "+\t\tboolean ignoreUnresolvedEntry,\r", "+\t\tboolean generateMarkerOnError)\r", "+\t\tthrows JavaModelException {\r", "+\r", "+\t\tif (generateMarkerOnError){\r", "+\t\t\tflushClasspathProblemMarkers(false);\r", "+\t\t}\r", "+\r", "+\t\tint length = classpathEntries.length;\r", "+\t\tint index = 0;\r", "+\t\tArrayList resolvedEntries = new ArrayList();\r", "+\t\t\r", "+\t\tfor (int i = 0; i < length; i++) {\r", "+\r", "+\t\t\tIClasspathEntry rawEntry = classpathEntries[i];\r", "+\r", "+\t\t\t/* validation if needed */\r", "+\t\t\tif (generateMarkerOnError) {\r", "+\t\t\t\tIJavaModelStatus status =\r", "+\t\t\t\t\tJavaConventions.validateClasspathEntry(this, rawEntry, false);\r", "+\t\t\t\tif (!status.isOK())\r", "+\t\t\t\t\tcreateClasspathProblemMarker(\r", "+\t\t\t\t\t\tstatus.getMessage(), \r", "+\t\t\t\t\t\tIMarker.SEVERITY_ERROR,\r", "+\t\t\t\t\t\tfalse);\r", "-\t\t\t\r", "-\t\t\t// reuse cache if not needing to refresh markers or checking bound variables\r", "-\t\t\tif (ignoreUnresolvedVariable && !generateMarkerOnError && (projectInfo != null)){\r", "-\t\t\t\t// resolved path is cached on its info\r", "-\t\t\t\tIClasspathEntry[] infoPath = projectInfo.lastResolvedClasspath;\r", "-\t\t\t\tif (infoPath != null) return infoPath;\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\tIClasspathEntry[] classpath = getRawClasspath();\r", "-\t\r", "-\t\t\tif (generateMarkerOnError){\r", "-\t\t\t\tflushClasspathProblemMarkers(false);\r", "-\t\t\t}\r", "-\t\r", "-\t\t\tIClasspathEntry[] resolvedPath = classpath; // clone only if necessary\r", "-\t\t\tint length = classpath.length;\r", "-\t\t\tint index = 0;\r", "-\t\r", "-\t\t\tfor (int i = 0; i < length; i++) {\r", "-\t\r", "-\t\t\t\tIClasspathEntry entry = classpath[i];\r", "-\t\r", "-\t\t\t\t/* validation if needed */\r", "-\t\t\t\tif (generateMarkerOnError) {\r", "-\t\t\t\t\tIJavaModelStatus status =\r", "-\t\t\t\t\t\tJavaConventions.validateClasspathEntry(this, entry, false);\r", "-\t\t\t\t\tif (!status.isOK())\r", "-\t\t\t\t\t\tcreateClasspathProblemMarker(\r", "-\t\t\t\t\t\t\tstatus.getMessage(), \r", "-\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,\r", "-\t\t\t\t\t\t\tfalse);\r", "-\t\t\t\t}\r", "-\t\r", "-\t\t\t\t/* resolve variables if any, unresolved ones are ignored */\r", "-\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_VARIABLE) {\r", "-\t\r", "-\t\t\t\t\t// clone original path\r", "-\t\t\t\t\tif (resolvedPath == classpath) {\r", "-\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\tclasspath,\r", "-\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\tresolvedPath = new IClasspathEntry[length],\r", "-\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\ti);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\t// resolve current variable (handling variable->variable->variable->entry\r", "-\t\t\t\t\tIPath variablePath = entry.getPath(); // for error reporting\r", "-\t\t\t\t\tentry = JavaCore.getResolvedClasspathEntry(entry);\r", "-\t\t\t\t\tif (entry == null) {\r", "-\t\t\t\t\t\tif (!ignoreUnresolvedVariable) {\r", "+\r", "+\t\t\tswitch (rawEntry.getEntryKind()){\r", "+\t\t\t\t\r", "+\t\t\t\tcase IClasspathEntry.CPE_VARIABLE :\r", "+\t\t\t\t\r", "+\t\t\t\t\tIClasspathEntry resolvedEntry = JavaCore.getResolvedClasspathEntry(rawEntry);\r", "+\t\t\t\t\tif (resolvedEntry == null) {\r", "+\t\t\t\t\t\tif (!ignoreUnresolvedEntry) {\r", "-\t\t\t\t\t\t\t\t\tvariablePath.toString()));\r", "+\t\t\t\t\t\t\t\t\trawEntry.getPath().toString()));\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tbreak; \r", "+\r", "+\t\t\t\tcase IClasspathEntry.CPE_CONTAINER :\r", "+\t\t\t\t\r", "+\t\t\t\t\tIClasspathEntry[] containerEntries = getResolvedClasspathContainer(rawEntry.getPath());\r", "+\t\t\t\t\tif (containerEntries == null){\r", "+\t\t\t\t\t\t// unbound container\r", "+\t\t\t\t\t\tif (!ignoreUnresolvedEntry) {\r", "+\t\t\t\t\t\t\tthrow new JavaModelException(\r", "+\t\t\t\t\t\t\t\tnew JavaModelStatus(\r", "+\t\t\t\t\t\t\t\t\tIJavaModelStatusConstants.CP_CONTAINER_PATH_UNBOUND,\r", "+\t\t\t\t\t\t\t\t\trawEntry.getPath().toString()));\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t// container was bound, container entries could be variables\r", "+\t\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){\r", "+\t\t\t\t\t\t\tIClasspathEntry containerRawEntry = containerEntries[j];\r", "+\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\tif (generateMarkerOnError) {\r", "+\t\t\t\t\t\t\t\tIJavaModelStatus status =\r", "+\t\t\t\t\t\t\t\t\tJavaConventions.validateClasspathEntry(this, containerRawEntry, false);\r", "+\t\t\t\t\t\t\t\tif (!status.isOK())\r", "+\t\t\t\t\t\t\t\t\tcreateClasspathProblemMarker(\r", "+\t\t\t\t\t\t\t\t\t\tstatus.getMessage(), \r", "+\t\t\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,\r", "+\t\t\t\t\t\t\t\t\t\tfalse);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t// container entry is variable ?\r", "+\t\t\t\t\t\t\tif (containerRawEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE){\r", "+\t\t\t\t\t\t\t\tresolvedEntry = JavaCore.getResolvedClasspathEntry(containerRawEntry);\r", "+\t\t\t\t\t\t\t\tif (resolvedEntry == null) {\r", "+\t\t\t\t\t\t\t\t\tif (!ignoreUnresolvedEntry) {\r", "+\t\t\t\t\t\t\t\t\t\tthrow new JavaModelException(\r", "+\t\t\t\t\t\t\t\t\t\t\tnew JavaModelStatus(\r", "+\t\t\t\t\t\t\t\t\t\t\t\tIJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND,\r", "+\t\t\t\t\t\t\t\t\t\t\t\tcontainerRawEntry.getPath().toString()));\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\tresolvedEntries.add(containerRawEntry);\r", "+\t\t\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\tif (entry != null) {\r", "-\t\t\t\t\tresolvedPath[index++] = entry;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\r", "-\t\t\t// resize resolved classpath in case some variable entries could not be resolved\r", "-\t\t\tif (index != length) {\r", "-\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\tresolvedPath,\r", "-\t\t\t\t\t0,\r", "-\t\t\t\t\tresolvedPath = new IClasspathEntry[index],\r", "-\t\t\t\t\t0,\r", "-\t\t\t\t\tindex);\r", "-\t\t\t}\r", "-\t\t\tif (projectInfo != null){\r", "-\t\t\t\tprojectInfo.lastResolvedClasspath = resolvedPath;\r", "-\t\t\t}\r", "-\t\t\treturn resolvedPath;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\tdefault :\r", "+\r", "+\t\t\t\t\tresolvedEntries.add(rawEntry);\r", "+\t\t\t\t\r", "+\t\t\t}\t\t\t\t\t\r", "+\r", "+\t\tIClasspathEntry[] resolvedPath = new IClasspathEntry[resolvedEntries.size()];\r", "+\t\tresolvedEntries.toArray(resolvedPath);\r", "+\r", "+\t\treturn resolvedPath;\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cf7f09bc0c3a313d5e82ad7a018fe64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "2a762b85f858691a63d4547af177cc649d7b1329", "commitAfterChange": "7675c409a4b3b1e15b1cc476a0a66b988b5fb4a0", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "\r \t\tpublic IClasspathEntry[] getResolvedClasspath(\r \t\t\tboolean ignoreUnresolvedVariable,\r \t\t\tboolean generateMarkerOnError)\r \t\t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic IClasspathEntry[] getResolvedClasspath(\r \t\tboolean ignoreUnresolvedEntry,\r \t\tboolean generateMarkerOnError)\r \t\tthrows JavaModelException", "diff": ["-\t\t */\r", "-\t\tpublic IClasspathEntry[] getResolvedClasspath(\r", "-\t\t\tboolean ignoreUnresolvedVariable,\r", "-\t\t\tboolean generateMarkerOnError)\r", "-\t\t\tthrows JavaModelException {\r", "+\t */\r", "+\tpublic IClasspathEntry[] getResolvedClasspath(\r", "+\t\tboolean ignoreUnresolvedEntry,\r", "+\t\tboolean generateMarkerOnError)\r", "+\t\tthrows JavaModelException {\r", "+\r", "+\t\tJavaProjectElementInfo projectInfo;\r", "+\t\tif (this.isOpen()){\r", "+\t\t\tprojectInfo = getJavaProjectElementInfo();\r", "+\t\t} else {\r", "+\t\t\t// avoid populating the model for only retrieving the resolved classpath (13395)\r", "+\t\t\tprojectInfo = null;\r", "+\t\t}\r", "+\t\t\r", "+\t\t// reuse cache if not needing to refresh markers or checking bound variables\r", "+\t\tif (ignoreUnresolvedEntry && !generateMarkerOnError && projectInfo != null){\r", "+\t\t\t// resolved path is cached on its info\r", "+\t\t\tIClasspathEntry[] infoPath = projectInfo.lastResolvedClasspath;\r", "+\t\t\tif (infoPath != null) return infoPath;\r", "+\t\t}\r", "+\r", "+\t\tIClasspathEntry[] resolvedPath = getResolvedClasspath(getRawClasspath(), ignoreUnresolvedEntry, generateMarkerOnError);\r", "+\r", "+\t\tif (projectInfo != null){\r", "+\t\t\tprojectInfo.lastResolvedClasspath = resolvedPath;\r", "+\t\t}\r", "+\t\treturn resolvedPath;\r", "+\t}\r", "-\t\t\tJavaProjectElementInfo projectInfo;\r", "-\t\t\tif (this.isOpen()){\r", "-\t\t\t\tprojectInfo = getJavaProjectElementInfo();\r", "-\t\t\t} else {\r", "-\t\t\t\t// avoid populating the model for only retrieving the resolved classpath (13395)\r", "-\t\t\t\tprojectInfo = null;\r", "-\t\t\t\r", "-\t\t\t// reuse cache if not needing to refresh markers or checking bound variables\r", "-\t\t\tif (ignoreUnresolvedVariable && !generateMarkerOnError && (projectInfo != null)){\r", "-\t\t\t\t// resolved path is cached on its info\r", "-\t\t\t\tIClasspathEntry[] infoPath = projectInfo.lastResolvedClasspath;\r", "-\t\t\t\tif (infoPath != null) return infoPath;\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\tIClasspathEntry[] classpath = getRawClasspath();\r", "-\t\r", "-\t\t\tif (generateMarkerOnError){\r", "-\t\t\t\tflushClasspathProblemMarkers(false);\r", "-\t\t\t}\r", "-\t\r", "-\t\t\tIClasspathEntry[] resolvedPath = classpath; // clone only if necessary\r", "-\t\t\tint length = classpath.length;\r", "-\t\t\tint index = 0;\r", "-\t\r", "-\t\t\tfor (int i = 0; i < length; i++) {\r", "-\t\r", "-\t\t\t\tIClasspathEntry entry = classpath[i];\r", "-\t\r", "-\t\t\t\t/* validation if needed */\r", "-\t\t\t\tif (generateMarkerOnError) {\r", "-\t\t\t\t\tIJavaModelStatus status =\r", "-\t\t\t\t\t\tJavaConventions.validateClasspathEntry(this, entry, false);\r", "-\t\t\t\t\tif (!status.isOK())\r", "-\t\t\t\t\t\tcreateClasspathProblemMarker(\r", "-\t\t\t\t\t\t\tstatus.getMessage(), \r", "-\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,\r", "-\t\t\t\t\t\t\tfalse);\r", "-\t\t\t\t}\r", "-\t\r", "-\t\t\t\t/* resolve variables if any, unresolved ones are ignored */\r", "-\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_VARIABLE) {\r", "-\t\r", "-\t\t\t\t\t// clone original path\r", "-\t\t\t\t\tif (resolvedPath == classpath) {\r", "-\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\tclasspath,\r", "-\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\tresolvedPath = new IClasspathEntry[length],\r", "-\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\ti);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\t// resolve current variable (handling variable->variable->variable->entry\r", "-\t\t\t\t\tIPath variablePath = entry.getPath(); // for error reporting\r", "-\t\t\t\t\tentry = JavaCore.getResolvedClasspathEntry(entry);\r", "-\t\t\t\t\tif (entry == null) {\r", "-\t\t\t\t\t\tif (!ignoreUnresolvedVariable) {\r", "-\t\t\t\t\t\t\t\t\tvariablePath.toString()));\r", "-\t\t\t\t}\r", "-\t\t\t\tif (entry != null) {\r", "-\t\t\t\t\tresolvedPath[index++] = entry;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\r", "-\t\t\t// resize resolved classpath in case some variable entries could not be resolved\r", "-\t\t\tif (index != length) {\r", "-\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\tresolvedPath,\r", "-\t\t\t\t\t0,\r", "-\t\t\t\t\tresolvedPath = new IClasspathEntry[index],\r", "-\t\t\t\t\t0,\r", "-\t\t\t\t\tindex);\r", "-\t\t\t}\r", "-\t\t\tif (projectInfo != null){\r", "-\t\t\t\tprojectInfo.lastResolvedClasspath = resolvedPath;\r", "-\t\t\t}\r", "-\t\t\treturn resolvedPath;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0f050c5b9ab6cf7da35348de29cba1e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "415e478fd80c86e1c699eefa6d86979134ae5921", "commitAfterChange": "63b8bf54c7c6ab31eaeaf33c9d376ceaa28b674d", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 86, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError, \t\tboolean returnResolutionInProgress) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath(boolean ignoreUnresolvedEntry) throws JavaModelException", "diff": ["-\t */", "-\tpublic IClasspathEntry[] getResolvedClasspath(", "-\t\tboolean ignoreUnresolvedEntry,", "-\t\tboolean generateMarkerOnError,", "-\t\tboolean returnResolutionInProgress)", "-\t\tthrows JavaModelException {", "-", "-\t    JavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\tJavaModelManager.PerProjectInfo perProjectInfo = null;", "-\t\tif (ignoreUnresolvedEntry && !generateMarkerOnError) {", "-\t\t\tperProjectInfo = getPerProjectInfo();", "-\t\t\tif (perProjectInfo != null) {", "-\t\t\t\t// resolved path is cached on its info", "-\t\t\t\tIClasspathEntry[] infoPath = perProjectInfo.resolvedClasspath;", "-\t\t\t\tif (infoPath != null) {", "-\t\t\t\t\treturn infoPath;", "-\t\t\t\t} else if  (returnResolutionInProgress && manager.isClasspathBeingResolved(this)) {", "-\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE) {", "-\t\t\t\t\t\tUtil.verbose(", "-\t\t\t\t\t\t\t\"CPResolution: reentering raw classpath resolution, will use empty classpath instead\" + //$NON-NLS-1$", "-\t\t\t\t\t\t\t\"\tproject: \" + getElementName() + '\\n' + //$NON-NLS-1$", "-\t\t\t\t\t\t\t\"\tinvocation stack trace:\"); //$NON-NLS-1$", "-\t\t\t\t\t\tnew Exception(\"<Fake exception>\").printStackTrace(System.out); //$NON-NLS-1$", "-\t\t\t\t\t}\t\t\t\t\t\t", "-\t\t\t\t    return RESOLUTION_IN_PROGRESS;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tMap rawReverseMap = perProjectInfo == null ? null : new HashMap(5);", "-\t\tIClasspathEntry[] resolvedPath = null;", "-\t\tboolean nullOldResolvedCP = perProjectInfo != null && perProjectInfo.resolvedClasspath == null;", "-\t\ttry {", "-\t\t\t// protect against misbehaving clients (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=61040)", "-\t\t\tif (nullOldResolvedCP) manager.setClasspathBeingResolved(this, true);", "-\t\t\tresolvedPath = getResolvedClasspath(", "-\t\t\t\tgetRawClasspath(generateMarkerOnError, !generateMarkerOnError), ", "-\t\t\t\tgenerateMarkerOnError ? getOutputLocation() : null, ", "-\t\t\t\tignoreUnresolvedEntry, ", "-\t\t\t\tgenerateMarkerOnError,", "-\t\t\t\trawReverseMap);", "-\t\t} finally {", "-\t\t\tif (nullOldResolvedCP) perProjectInfo.resolvedClasspath = null;", "-\t\t}", "-", "-\t\tif (perProjectInfo != null){", "-\t\t\tif (perProjectInfo.rawClasspath == null // .classpath file could not be read", "-\t\t\t\t&& generateMarkerOnError ", "-\t\t\t\t&& JavaProject.hasJavaNature(this.project)) {", "-\t\t\t\t\t// flush .classpath format markers (bug 39877), but only when file cannot be read (bug 42366)", "-\t\t\t\t\tthis.flushClasspathProblemMarkers(false, true);", "-\t\t\t\t\tthis.createClasspathProblemMarker(new JavaModelStatus(", "-\t\t\t\t\t\tIJavaModelStatusConstants.INVALID_CLASSPATH_FILE_FORMAT,", "-\t\t\t\t\t\tMessages.bind(Messages.classpath_cannotReadClasspathFile, this.getElementName()))); ", "-\t\t\t}", "-", "-\t\t\tperProjectInfo.resolvedClasspath = resolvedPath;", "-\t\t\tperProjectInfo.resolvedPathToRawEntries = rawReverseMap;", "-\t\t\tmanager.setClasspathBeingResolved(this, false);", "-\t\t}", "-\t\treturn resolvedPath;", "+\t */", "+\tpublic IClasspathEntry[] getResolvedClasspath(boolean ignoreUnresolvedEntry) throws JavaModelException {", "+\t\tif  (JavaModelManager.getJavaModelManager().isClasspathBeingResolved(this)) {", "+\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE) {", "+\t\t\t\tUtil.verbose(", "+\t\t\t\t\t\"CPResolution: reentering raw classpath resolution, will use empty classpath instead\" + //$NON-NLS-1$", "+\t\t\t\t\t\"\tproject: \" + getElementName() + '\\n' + //$NON-NLS-1$", "+\t\t\t\t\t\"\tinvocation stack trace:\"); //$NON-NLS-1$", "+\t\t\t\tnew Exception(\"<Fake exception>\").printStackTrace(System.out); //$NON-NLS-1$", "+\t\t\t}\t\t\t\t\t\t", "+\t\t    return RESOLUTION_IN_PROGRESS;", "+\t\tPerProjectInfo perProjectInfo = getPerProjectInfo();", "+\t\t// use synchronized block to ensure consistency", "+\t\tIClasspathEntry[] resolvedClasspath;", "+\t\tIJavaModelStatus unresolvedEntryStatus;", "+\t\tsynchronized (perProjectInfo) {", "+\t\t\tresolvedClasspath = perProjectInfo.resolvedClasspath;", "+\t\t\tunresolvedEntryStatus = perProjectInfo.unresolvedEntryStatus;", "+\t\t}", "+\t\tif (resolvedClasspath == null ", "+\t\t\t\t|| (unresolvedEntryStatus != null && !unresolvedEntryStatus.isOK())) { // force resolution to ensure initializers are run again", "+\t\t\tresolveClasspath(perProjectInfo);", "+\t\t\tsynchronized (perProjectInfo) {", "+\t\t\t\tresolvedClasspath = perProjectInfo.resolvedClasspath;", "+\t\t\t\tunresolvedEntryStatus = perProjectInfo.unresolvedEntryStatus;", "+\t\tif (!ignoreUnresolvedEntry && unresolvedEntryStatus != null && !unresolvedEntryStatus.isOK())", "+\t\t\tthrow new JavaModelException(unresolvedEntryStatus);", "+\t\treturn resolvedClasspath;"]}], "num": 25338}
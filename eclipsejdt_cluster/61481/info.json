{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb04866ccf350b5183c6972e30dd8311", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d6e4483c29bd7ab7b31a22bf466b106", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java", "commitBeforeChange": "a8f4b2b4fb3c4acf806aeb860231063e29831fb0", "commitAfterChange": "f30a93735a30ed8ef59e945eb0c202ea80ef2a41", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public boolean subOrSuperOfFocus(ReferenceBinding typeBinding)", "signatureAfterChange": " public boolean subOrSuperOfFocus(ReferenceBinding typeBinding)", "diff": ["-\tif (this.subTypeOfType(this.focusType, typeBinding)) return true;", "-\tif (!this.superTypesOnly && this.subTypeOfType(typeBinding, this.focusType)) return true;", "+\ttry {", "+\t\tif (this.subTypeOfType(this.focusType, typeBinding)) return true;", "+\t\tif (!this.superTypesOnly && this.subTypeOfType(typeBinding, this.focusType)) return true;", "+\t} catch (AbortCompilation e) {", "+\t\t// unresolved superclass/superinterface -> ignore", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a2c1211a960db2c03f336d43efc68be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "8bbacffbe712e7ac5a5d22a44809b44ff8a5e616", "commitAfterChange": "6ca7b05ef1b6b0934e3b4a61271beb56d55912f0", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tIBinding resolveImport(ImportDeclaration importDeclaration)", "signatureAfterChange": " \tIBinding resolveImport(ImportDeclaration importDeclaration)", "diff": ["-\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode node = (org.eclipse.jdt.internal.compiler.ast.ASTNode) this.newAstToOldAst.get(importDeclaration);", "-\t\tif (node instanceof ImportReference) {", "-\t\t\tImportReference importReference = (ImportReference) node;", "-\t\t\tif (importReference.onDemand) {", "-\t\t\t\tBinding binding = this.scope.getTypeOrPackage(CharOperation.subarray(importReference.tokens, 0, importReference.tokens.length));", "-\t\t\t\tif (binding != null) {", "-\t\t\t\t\tif (binding.bindingType() == BindingIds.PACKAGE) {", "-\t\t\t\t\t\tIPackageBinding packageBinding = this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding) binding);", "-\t\t\t\t\t\tif (packageBinding == null) {", "-\t\t\t\t\t\t\treturn null;", "+\t\ttry {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode node = (org.eclipse.jdt.internal.compiler.ast.ASTNode) this.newAstToOldAst.get(importDeclaration);", "+\t\t\tif (node instanceof ImportReference) {", "+\t\t\t\tImportReference importReference = (ImportReference) node;", "+\t\t\t\tif (importReference.onDemand) {", "+\t\t\t\t\tBinding binding = this.scope.getTypeOrPackage(CharOperation.subarray(importReference.tokens, 0, importReference.tokens.length));", "+\t\t\t\t\tif (binding != null) {", "+\t\t\t\t\t\tif (binding.bindingType() == BindingIds.PACKAGE) {", "+\t\t\t\t\t\t\tIPackageBinding packageBinding = this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding) binding);", "+\t\t\t\t\t\t\tif (packageBinding == null) {", "+\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn packageBinding;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// if it is not a package, it has to be a type", "+\t\t\t\t\t\t\tITypeBinding typeBinding = this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) binding);", "+\t\t\t\t\t\t\tif (typeBinding == null) {", "+\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn typeBinding;", "-\t\t\t\t\t\treturn packageBinding;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// if it is not a package, it has to be a type", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tBinding binding = this.scope.getTypeOrPackage(importReference.tokens);", "+\t\t\t\t\tif (binding != null && binding instanceof org.eclipse.jdt.internal.compiler.lookup.TypeBinding) {", "-\t\t\t\t\t\tif (typeBinding == null) {", "-\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn typeBinding;", "+\t\t\t\t\t\treturn typeBinding == null ? null : typeBinding;", "-\t\t\t} else {", "-\t\t\t\tBinding binding = this.scope.getTypeOrPackage(importReference.tokens);", "-\t\t\t\tif (binding != null && binding instanceof org.eclipse.jdt.internal.compiler.lookup.TypeBinding) {", "-\t\t\t\t\tITypeBinding typeBinding = this.getTypeBinding((org.eclipse.jdt.internal.compiler.lookup.TypeBinding) binding);", "-\t\t\t\t\treturn typeBinding == null ? null : typeBinding;", "-\t\t\t\t}", "+\t\t} catch(AbortCompilation e) {", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=53357"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cab7e2123cc557835a78422f0b9bfbf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java", "commitBeforeChange": "8bbacffbe712e7ac5a5d22a44809b44ff8a5e616", "commitAfterChange": "6ca7b05ef1b6b0934e3b4a61271beb56d55912f0", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tIPackageBinding resolvePackage(PackageDeclaration pkg)", "signatureAfterChange": " \tIPackageBinding resolvePackage(PackageDeclaration pkg)", "diff": ["-\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode node = (org.eclipse.jdt.internal.compiler.ast.ASTNode) this.newAstToOldAst.get(pkg);", "-\t\tif (node instanceof ImportReference) {", "-\t\t\tImportReference importReference = (ImportReference) node;", "-\t\t\tBinding binding = this.scope.getTypeOrPackage(CharOperation.subarray(importReference.tokens, 0, importReference.tokens.length));", "-\t\t\tif ((binding != null) && (binding.isValidBinding())) {", "-\t\t\t\tIPackageBinding packageBinding = this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding) binding);", "-\t\t\t\tif (packageBinding == null) {", "-\t\t\t\t\treturn null;", "+\t\ttry {", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode node = (org.eclipse.jdt.internal.compiler.ast.ASTNode) this.newAstToOldAst.get(pkg);", "+\t\t\tif (node instanceof ImportReference) {", "+\t\t\t\tImportReference importReference = (ImportReference) node;", "+\t\t\t\tBinding binding = this.scope.getTypeOrPackage(CharOperation.subarray(importReference.tokens, 0, importReference.tokens.length));", "+\t\t\t\tif ((binding != null) && (binding.isValidBinding())) {", "+\t\t\t\t\tIPackageBinding packageBinding = this.getPackageBinding((org.eclipse.jdt.internal.compiler.lookup.PackageBinding) binding);", "+\t\t\t\t\tif (packageBinding == null) {", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.bindingsToAstNodes.put(packageBinding, pkg);", "+\t\t\t\t\tString key = packageBinding.getKey();", "+\t\t\t\t\tif (key != null) {", "+\t\t\t\t\t\tthis.bindingKeysToAstNodes.put(key, pkg);\t\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t\treturn packageBinding;", "-\t\t\t\tthis.bindingsToAstNodes.put(packageBinding, pkg);", "-\t\t\t\tString key = packageBinding.getKey();", "-\t\t\t\tif (key != null) {", "-\t\t\t\t\tthis.bindingKeysToAstNodes.put(key, pkg);\t\t\t\t", "-\t\t\t\t}", "-\t\t\t\treturn packageBinding;", "+\t\t} catch (AbortCompilation e) {", "+\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=53357"]}], "num": 61481}
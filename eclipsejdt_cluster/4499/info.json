{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e1f54a3251353abf0b79e9b10af05b7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1660ccf48a5cae70177e3ad67762512", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "4e8e5a98cf0190fbfa5945ebb361f51b261ba210", "commitAfterChange": "d245300e4e786a6fa7e5da9bef5c249b7208c09a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic void test009()", "signatureAfterChange": "  \tpublic void test009()", "diff": ["+\t\t\t\t\"\t\tSystem.out.print('<');\\n\" +", "-\t\t\t\t\"\t\tZ.count(1, null); // only choice is Z.count(int,int...)\\n\" +", "-//\t\t\t\t\"\t\tZ.count(1, 1); // chooses Z.count(long, int) over Z.count(int,int...)\\n\" +", "-\t\t\t\t\"\t\tZ.count2(1, null); // better choice is Z.count(int,int[])\\n\" +", "-\t\t\t\t\"\t\tZ.count2(1L, null); // better choice is Z.count(long,int...)\\n\" +", "+\t\t\t\t\"\t\tY.count(1);\\n\" +", "+\t\t\t\t\"\t\tY.count(1, 2);\\n\" +", "+\t\t\t\t\"\\n\" +", "+\t\t\t\t\"\t\tZ.count(1L, 1);\\n\" + // only choice is Z.count(long, int)", "+//\t\t\t\t\"\t\tZ.count(1, 1);\\n\" + // chooses Z.count(long, long) over Z.count(int,int...)", "+\t\t\t\t\"\t\tZ.count(1, null);\\n\" + // only choice is Z.count(int,int...)", "+\t\t\t\t\"\t\tZ.count2(1, null);\\n\" + // better choice is Z.count(int,int[])", "+\t\t\t\t\"\t\tZ.count2(1L, null);\\n\" + // better choice is Z.count(long,int...)", "+\t\t\t\t\"\t\tSystem.out.print('>');\\n\" +", "-\t\t\t\t\"\tpublic static void count(long l, int values) { System.out.print('3'); }\\n\" +", "+\t\t\t\t\"\tpublic static void count(long l, long values) { System.out.print('3'); }\\n\" +", "-\t\t\t\"2466\");", "+\t\t\t\"<2123466>\");", "-\t\t\t\t\"\t\tY.test((Object[]) null);\\n\" + // to avoid null warning", "+\t\t\t\t\"\t\tSystem.out.print('<');\\n\" +", "+\t\t\t\t\"\t\tY.test((Object[]) null);\\n\" + // cast to avoid null warning", "+\t\t\t\t\"\t\tSystem.out.print('>');\\n\" +", "-\t\t\t\t\"\tpublic static void test (Object o, Object o2) { System.out.print('1'); }\\n\" +", "+\t\t\t\t\"\tpublic static void test(Object o, Object o2) { System.out.print('1'); }\\n\" +", "-\t\t\t\"212\");", "+\t\t\t\"<212>\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa23057805697af96346f797ed1a74f7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/VarargsTest.java", "commitBeforeChange": "ef0d751764a03bfb7b7e9d8838fc454e1e51fa0c", "commitAfterChange": "878eb7333d4b0eef7a3f9e4be62a4fad044a7734", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic void test010()", "signatureAfterChange": "  \tpublic void test010()", "diff": ["-\t\t// according to spec this should find count(Object) since it should not consider count(Object...) until all fixed arity methods are dealt with", "-\t\t// but their current implementation picks the vararg method", "+\t\t// according to spec this should find count(Object) since it should consider count(Object...) as count(Object[]) until all fixed arity methods are ruled out", "-//\t\t\t\t\"\t\tY.count(new Integer(1));\\n\" +", "+\t\t\t\t\"\t\tY.count(new Integer(1));\\n\" +", "+\t\t\t\t\"\\n\" +", "+\t\t\t\t\"\t\tY.count((Object) null);\\n\" +", "+\t\t\t\t\"\t\tY.count((Object[]) null);\\n\" +", "-\t\t\t\"<1>\");", "-\t\t// according to spec this should find count(Object[]) since it should not consider count(Object[]...) until all fixed arity methods are dealt with", "-\t\t// but their current implementation picks the vararg method", "+\t\t\t\"<1112>\");", "+\t\t// according to spec this should find count(Object[]) since it should not consider count(Object[]...) as count(Object[][]) until all fixed arity methods are ruled out", "-//\t\t\t\t\"\t\tY.count(new Integer[] {new Integer(1)});\\n\" +", "+\t\t\t\t\"\t\tY.count(new Integer[] {new Integer(1)});\\n\" +", "+\t\t\t\t\"\\n\" +", "+\t\t\t\t\"\t\tY.count((Object[]) null);\\n\" +", "+\t\t\t\t\"\t\tY.count((Object[][]) null);\\n\" +", "-\t\t\t\"<1>\");", "-\t\t// according to spec this should find the fixed arity methods since it should not consider the others until all fixed arity methods are dealt with", "-\t\t// but their current implementation thinks they're ambiguous", "+\t\t\t\"<1112>\");"]}], "num": 4499}
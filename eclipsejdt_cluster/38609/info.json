{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04532ed450d1374cae5b77d488f89a14", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39aa7d3211754fff9165ec7f51381330", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4043b8a88c35a2c1612858cff67743727f25247b", "commitAfterChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " protected TypeBinding getType(char[] typeName)", "signatureAfterChange": " protected TypeBinding getType(Object typeKey, char[] typeName)", "diff": ["-protected TypeBinding getType(char[] typeName) {", "+protected TypeBinding getType(Object typeKey, char[] typeName) {", "-\tBinding binding = (Binding) this.bindings.get(typeName);", "+\tBinding binding = (Binding) this.bindings.get(typeKey);", "-\tthis.bindings.put(typeName, typeBinding);", "-\treturn typeBinding;", "+\tthis.bindings.put(typeKey, typeBinding);", "+\treturn typeBinding.isValidBinding() ? typeBinding : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5ef3cd4608dcd949e9bd10d74ba16d0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "1302cba8a2d9e7deb014096a0cf438c7f031d8f4", "commitAfterChange": "629f19b9848dc98d62568a3c9b1db94e81597d7a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds)", "diff": ["-\tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType) {", "+\tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType, boolean checkBounds) {", "-\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType(currentType, argTypes, enclosingType);", "-\t\t// check argument type compatibility now if not a class scope", "-\t\tif (!isClassScope) // otherwise will do it in Scope.connectTypeVariables()", "+\t\tParameterizedTypeBinding parameterizedType = scope.createParameterizedType((ReferenceBinding)currentType.erasure(), argTypes, enclosingType);", "+\t\t// check argument type compatibility", "+\t\tif (checkBounds) // otherwise will do it in Scope.connectTypeVariables() or generic method resolution"]}], "num": 38609}
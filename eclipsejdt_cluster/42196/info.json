{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0be82319fcc270007838dfd64645f64", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c0b991446ee3334b6372aa55bd2d118", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic void test037() throws Exception", "signatureAfterChange": " \t \tpublic void test037_field() throws Exception", "diff": ["+\t", "+\tpublic void test037_field() throws Exception {", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\tjava.util.List<? extends @A Number> field;\\n\" +", "+\t\t\t\t\"}\",", "+\t\t\t\t\"A.java\",", "+\t\t\t\t\"import java.lang.annotation.*;\\n\" + ", "+\t\t\t\t\"@Target(ElementType.TYPE_USE)\\n\" + ", "+\t\t\t\t\"@Retention(RetentionPolicy.RUNTIME)\\n\" + ", "+\t\t\t\t\"@interface A {}\\n\",", "+\t\t},", "+\t\t\"\");", "+\t\t// javac-b81: Bytes:12[0 1 19 2 3 0 2 0 0 9 0 0]", "+\t\tString expectedOutput =", "+\t\t\t\"    RuntimeVisibleTypeAnnotations: \\n\" + ", "+\t\t\t\"      #10 @A(\\n\" + ", "+\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\"        location = [TYPE_ARGUMENT(0), WILDCARD]\\n\" +", "+\t\t\t\"      )\\n\";", "+\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "+\t}", "-\t// make sure annotation without target appears twice when set on a method declaration", "-\tpublic void test037() throws Exception {", "-\t\t\t\t\"import java.lang.annotation.Target;\\r\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\r\\n\" + ", "-\t\t\t\t\"\\r\\n\" + ", "-\t\t\t\t\"@Target(METHOD)\\r\\n\" + ", "-\t\t\t\t\"@interface Annot {\\r\\n\" + ", "-\t\t\t\t\"\tint value() default 0;\\r\\n\" + ", "-\t\t\t\t\"}\\r\\n\" + ", "-\t\t\t\t\"public class X {\\r\\n\" + ", "-\t\t\t\t\"\t@Annot(4)\\r\\n\" + ", "-\t\t\t\t\"\tpublic void foo() {\\r\\n\" + ", "-\t\t\t\t\"\t}\\r\\n\" + ", "-\t\t\t\"  public void foo();\\n\" + ", "-\t\t\t\"    0  return\\n\" + ", "-\t\t\t\"      Line numbers:\\n\" + ", "-\t\t\t\"        [pc: 0, line: 11]\\n\" + ", "-\t\t\t\"      Local variable table:\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 1] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"    RuntimeInvisibleAnnotations: \\n\" + ", "-\t\t\t\"      #16 @Annot(\\n\" + ", "-\t\t\t\"        #17 value=(int) 4 (constant type)\\n\" + ", "-\t\t\t\"}\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55f387210fef9e071d1a4009cb5f7739", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 75, "signatureBeforeChange": " \tpublic void test023() throws Exception", "signatureAfterChange": " \t \tpublic void test071_codeblocks_constructorInvocationTypeArgument() throws Exception", "diff": ["-\t// type argument constructor call", "-\tpublic void test023() throws Exception {", "-\t\t\t\t\"\t<T> X(T t) {\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"\tpublic Object foo() {\\n\" + ", "-\t\t\t\t\"\t\tX x = new <@A @B(1) String>X(null);\\n\" + ", "-\t\t\t\t\"\t\treturn x;\\n\" + ", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\"      #31 @A(\\n\" + ", "-\t\t\t\"        target type = 0x18 TYPE_ARGUMENT_CONSTRUCTOR_CALL\\n\" + ", "-\t\t\t\"        offset = 5\\n\" + ", "-\t\t\t\"        type argument index = 0\\n\" + ", "-\t\t\t\"      #27 @B(\\n\" + ", "-\t\t\t\"        #28 value=(int) 1 (constant type)\\n\" + ", "-\t\t\t\"        target type = 0x18 TYPE_ARGUMENT_CONSTRUCTOR_CALL\\n\" + ", "-\t\t\t\"        offset = 5\\n\" + ", "-\t\t\t\"        type argument index = 0\\n\" + ", "+\t", "+\tpublic void test071_codeblocks_constructorInvocationTypeArgument() throws Exception {", "+\t\tthis.runConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"A.java\",", "+\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "+\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "+\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "+\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "+\t\t\t\t\"@interface A {\\n\" + ", "+\t\t\t\t\"\tString value() default \\\"default\\\";\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t\t\"B.java\",", "+\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "+\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "+\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "+\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "+\t\t\t\t\"@Retention(CLASS)\\n\" + ", "+\t\t\t\t\"@interface B {\\n\" + ", "+\t\t\t\t\"\tint value() default -1;\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X {\\n\" + ", "+\t\t\t\t\"\t<T> X(T t) {\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\tpublic Object foo() {\\n\" + ", "+\t\t\t\t\"\t\tX x = new <@A @B(1) String>X(null);\\n\" + ", "+\t\t\t\t\"\t\treturn x;\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\",", "+\t\t},", "+\t\t\"\");", "+\t\tString expectedOutput =", "+\t\t\t\"    RuntimeInvisibleTypeAnnotations: \\n\" + ", "+\t\t\t\"      #27 @B(\\n\" + ", "+\t\t\t\"        #28 value=(int) 1 (constant type)\\n\" + ", "+\t\t\t\"        target type = 0x48 CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT\\n\" + ", "+\t\t\t\"        offset = 5\\n\" + ", "+\t\t\t\"        type argument index = 0\\n\" + ", "+\t\t\t\"      )\\n\" + ", "+\t\t\t\"    RuntimeVisibleTypeAnnotations: \\n\" + ", "+\t\t\t\"      #31 @A(\\n\" + ", "+\t\t\t\"        target type = 0x48 CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT\\n\" + ", "+\t\t\t\"        offset = 5\\n\" + ", "+\t\t\t\"        type argument index = 0\\n\" + ", "+\t\t\t\"      )\\n\";", "+\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7df4ab36c1e5ba4de2045dd8ff93325", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 114, "signatureBeforeChange": " \tpublic void test040() throws Exception", "signatureAfterChange": " \t \tpublic void test106b_wtr() throws Exception", "diff": ["-\t// make sure annotation without target appears twice when set on a method declaration", "-\tpublic void test040() throws Exception {", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"import java.lang.annotation.Target;\\r\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\r\\n\" + ", "-\t\t\t\t\"\\r\\n\" + ", "-\t\t\t\t\"@Target(METHOD)\\r\\n\" + ", "-\t\t\t\t\"@interface Annot {\\r\\n\" + ", "-\t\t\t\t\"\tint value() default 0;\\r\\n\" + ", "-\t\t\t\t\"}\\r\\n\" + ", "-\t\t\t\t\"public class X {\\r\\n\" + ", "-\t\t\t\t\"\t@Annot(4)\\r\\n\" + ", "-\t\t\t\t\"\tpublic int foo() {\\r\\n\" + ", "-\t\t\t\t\"\t\treturn 0;\\r\\n\" + ", "-\t\t\t\t\"\t}\\r\\n\" + ", "-\t\t\t\t\"}\",", "-\t\t},", "-\t\t\"\");", "-\t\tString expectedOutput =", "-\t\t\t\"  public int foo();\\n\" + ", "-\t\t\t\"    0  iconst_0\\n\" + ", "-\t\t\t\"    1  ireturn\\n\" + ", "-\t\t\t\"      Line numbers:\\n\" + ", "-\t\t\t\"        [pc: 0, line: 11]\\n\" + ", "-\t\t\t\"      Local variable table:\\n\" + ", "-\t\t\t\"        [pc: 0, pc: 2] local: this index: 0 type: X\\n\" + ", "-\t\t\t\"    RuntimeInvisibleAnnotations: \\n\" + ", "-\t\t\t\"      #17 @Annot(\\n\" + ", "-\t\t\t\"        #18 value=(int) 4 (constant type)\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"}\";", "-\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "+\t", "+\tpublic void test106b_wtr() throws Exception { // WTR (WildcardTypeReference)", "+\t\tthis.runConformTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"import java.util.List;\\n\" +", "+\t\t\t\t\t\"class X<T1> {\\n\" +", "+\t\t\t\t\t\"\t List<? extends @B(1) Number[]> field;\\n\" +", "+\t\t\t\t\t\"}\\n\",", "+\t\t\t\t\t", "+\t\t\t\t\t\"List.java\",", "+\t\t\t\t\t\"class List {}\\n\",", "+\t\t\t\t\t", "+\t\t\t\t\t\"B.java\",", "+\t\t\t\t\t\"import java.lang.annotation.*;\\n\" + ", "+\t\t\t\t\t\"@Target(ElementType.TYPE_USE)\\n\" + ", "+\t\t\t\t\t\"@Retention(RetentionPolicy.RUNTIME)\\n\" + ", "+\t\t\t\t\t\"@interface B { int value() default -1; }\\n\",", "+\t\t\t},", "+\t\t\t\"\");", "+\t\t\tString expectedOutput =", "+\t\t\t\t\"    RuntimeVisibleTypeAnnotations: \\n\" + ", "+\t\t\t\t\"      #10 @B(\\n\" + ", "+\t\t\t\t\"        #11 value=(int) 1 (constant type)\\n\" + ", "+\t\t\t\t\"        target type = 0x13 FIELD\\n\" + ", "+\t\t\t\t\"        location = [TYPE_ARGUMENT(0), WILDCARD, ARRAY]\\n\" + ", "+\t\t\t\t\"      )\\n\";", "+\t\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3508587599f0de665dd32cf48a8359e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java", "commitBeforeChange": "f0cc0529135fe43e5b6252dca937651f0a04d49c", "commitAfterChange": "79c1182746ff2f44f9956aeaf2f61882a4911acb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void test011() throws Exception", "signatureAfterChange": " \t \tpublic void test001_classTypeParameter() throws Exception", "diff": ["+\t", "+\tpublic void test001_classTypeParameter() throws Exception {", "+\t\tthis.runConformTest(", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"public class X<@Marker T> {}\",", "+", "+\t\t\t\t\t\"Marker.java\",", "+\t\t\t\t\t\"import java.lang.annotation.*;\\n\" + ", "+\t\t\t\t\t\"@Retention(RetentionPolicy.RUNTIME)\\n\"+", "+\t\t\t\t\t\"@Target(ElementType.TYPE_PARAMETER)\\n\" + ", "+\t\t\t\t\t\"@interface Marker {}\",\t\t\t\t\t", "+\t\t\t\t},", "+\t\t\t\t\"\");", "+\t\t// javac-b81: 9[0 1 0 0 0 0 13 0 0]  (13=Marker annotation)", "+\t\tString expectedOutput =", "+\t\t\t\"  RuntimeVisibleTypeAnnotations: \\n\" + ", "+\t\t\t\"    #21 @Marker(\\n\" + ", "+\t\t\t\"      target type = 0x0 CLASS_TYPE_PARAMETER\\n\" + ", "+\t\t\t\"      type parameter index = 0\\n\" + ", "+\t\t\t\"    )\\n\";", "+\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "+\t}", "-\t// method return type", "-\tpublic void test011() throws Exception {", "-\t\tthis.runConformTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"A.java\",", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(RUNTIME)\\n\" + ", "-\t\t\t\t\"@interface A {\\n\" + ", "-\t\t\t\t\"\tString value() default \\\"default\\\";\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\t\"B.java\",", "-\t\t\t\t\"import java.lang.annotation.Target;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.ElementType.*;\\n\" + ", "-\t\t\t\t\"import java.lang.annotation.Retention;\\n\" + ", "-\t\t\t\t\"import static java.lang.annotation.RetentionPolicy.*;\\n\" + ", "-\t\t\t\t\"@Target(TYPE_USE)\\n\" + ", "-\t\t\t\t\"@Retention(CLASS)\\n\" + ", "-\t\t\t\t\"@interface B {\\n\" + ", "-\t\t\t\t\"\tint value() default -1;\\n\" + ", "-\t\t\t\t\"}\",", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"\t@B(3) @A(value=\\\"test\\\") int foo() {\\n\" +", "-\t\t\t\t\"\t\treturn 1;\\n\" +", "-\t\t\t\t\"\t}\\n\" + ", "-\t\t\t\t\"}\",", "-\t\t},", "-\t\t\"\");", "-\t\tString expectedOutput =", "-\t\t\t\"    RuntimeVisibleTypeAnnotations: \\n\" + ", "-\t\t\t\"      #21 @A(\\n\" + ", "-\t\t\t\"        #18 value=\\\"test\\\" (constant type)\\n\" + ", "-\t\t\t\"        target type = 0xa METHOD_RETURN_TYPE\\n\" + ", "-\t\t\t\"      )\\n\" + ", "-\t\t\t\"    RuntimeInvisibleTypeAnnotations: \\n\" + ", "-\t\t\t\"      #17 @B(\\n\" + ", "-\t\t\t\"        #18 value=(int) 3 (constant type)\\n\" + ", "-\t\t\t\"        target type = 0xa METHOD_RETURN_TYPE\\n\" + ", "-\t\t\t\"      )\\n\";", "-\t\tcheckDisassembledClassFile(OUTPUT_DIR + File.separator + \"X.class\", \"X\", expectedOutput, ClassFileBytesDisassembler.SYSTEM);", "-\t}"]}], "num": 42196}
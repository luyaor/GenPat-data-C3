{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d397e72dde04bf62a5cf1c29137dccf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0375af14cb24fccf568ff03c20f13423", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "cc8a107a5198e70183302629cda10fc958070914", "commitAfterChange": "f3976bead49aa4fe35942cb0c47266733b624403", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "signatureAfterChange": " \tpublic void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired)", "diff": ["-\t\t\t\t\t\t\tif (((FieldBinding)binding).original().declaringClass == this.actualReceiverType.erasure()) {", "+\t\t\t\t\t\t\tif (((FieldBinding)binding).original().declaringClass == this.actualReceiverType.erasure()", "+\t\t\t\t\t\t\t\t\t&& ((implicitConversion & TypeIds.UNBOXING) == 0)) {", "-\t\t\t\t\t\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);\t\t\t", "+\t\t\t\t\t\t\tif (this.genericCast != null) codeStream.checkcast(this.genericCast);", "+\t\t\t\t\t\t\tif ((implicitConversion & TypeIds.UNBOXING) != 0) {", "+\t\t\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!valueRequired) {", "+\t\t\t\t\t\tif (!valueRequired && ((implicitConversion & TypeIds.UNBOXING) == 0)) {", "+\t\t\t\t\t} else if ((implicitConversion & TypeIds.UNBOXING) != 0) {", "+", "+\t\t\t\t\t\t// outer local?", "+\t\t\t\t\t\tif ((bits & DepthMASK) != 0) {", "+\t\t\t\t\t\t\t// outer local can be reached either through a synthetic arg or a synthetic field", "+\t\t\t\t\t\t\tVariableBinding[] path = currentScope.getEmulationPath(localBinding);", "+\t\t\t\t\t\t\tcodeStream.generateOuterAccess(path, this, localBinding, currentScope);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t// regular local variable read", "+\t\t\t\t\t\t\tcodeStream.load(localBinding);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcodeStream.generateImplicitConversion(implicitConversion);", "+\t\t\t\t\t\tif ((localBinding.type == TypeBinding.LONG) || (localBinding.type == TypeBinding.DOUBLE)) {", "+\t\t\t\t\t\t\tcodeStream.pop2();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tcodeStream.pop();", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "932bec36f1c87e1850f6a0383a1c49ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "98ff5077500cc7d4399a77f9c1d322d3dbdad499", "commitAfterChange": "0114b817b3783a58a2fe1110992accec45af9e77", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void generatePostIncrement( \tBlockScope currentScope, \tCodeStream codeStream, \tCompoundAssignment postIncrement, \tboolean valueRequired)", "signatureAfterChange": "  public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired)", "diff": ["-public void generatePostIncrement(", "-\tBlockScope currentScope,", "-\tCodeStream codeStream,", "-\tCompoundAssignment postIncrement,", "-\tboolean valueRequired) {", "-", "+public void generatePostIncrement(BlockScope currentScope, CodeStream codeStream, CompoundAssignment postIncrement, boolean valueRequired) {", "-\tSyntheticMethodBinding accessor =", "-\t\tthis.syntheticReadAccessors == null", "+\tSyntheticMethodBinding accessor = this.syntheticReadAccessors == null", "+\tTypeBinding requiredGenericCast = getGenericCast(this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length);", "+\tTypeBinding operandType;", "+\tif (requiredGenericCast != null) {", "+\t\tcodeStream.checkcast(requiredGenericCast);", "+\t\toperandType = requiredGenericCast;", "+\t} else {", "+\t\toperandType = lastFieldBinding.type;", "+\t}\t\t", "-\t\t\tif ((lastFieldBinding.type == TypeBinding.LONG)", "-\t\t\t\t|| (lastFieldBinding.type == TypeBinding.DOUBLE)) {", "+\t\t\tif ((operandType == TypeBinding.LONG)", "+\t\t\t\t|| (operandType == TypeBinding.DOUBLE)) {", "-\t\t\tif ((lastFieldBinding.type == TypeBinding.LONG)", "-\t\t\t\t|| (lastFieldBinding.type == TypeBinding.DOUBLE)) {", "+\t\t\tif ((operandType == TypeBinding.LONG)", "+\t\t\t\t|| (operandType == TypeBinding.DOUBLE)) {", "-\tTypeBinding requiredGenericCast = getGenericCast(this.otherCodegenBindings == null ? 0 : this.otherCodegenBindings.length);", "-\tif (requiredGenericCast != null) codeStream.checkcast(requiredGenericCast);", "-", "-\tcodeStream.generateImplicitConversion(this.implicitConversion);", "+\tcodeStream.generateImplicitConversion(this.implicitConversion);\t\t"]}], "num": 20079}
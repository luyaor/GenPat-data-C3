{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0898e1b975cfaf9c5c907358d8648ba2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "273f66245a820ef4530351846005d68b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java", "commitBeforeChange": "ca9dbce3d563d28e984f1680d988cb68608c75f8", "commitAfterChange": "aec4b3fea7801d56d112291851d497436c0f9c81", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t\tpublic Object set(int index, Object element)", "signatureAfterChange": " \t\tpublic Object set(int index, Object element)", "diff": ["+\t\t    if (element == null) {", "+\t\t        throw new IllegalArgumentException();", "+\t\t    }", "+\t\t\tif ((ASTNode.this.flags & PROTECT) != 0) {", "+\t\t\t\t// this node is protected => cannot gain or lose children", "+\t\t\t\tthrow new IllegalArgumentException(\"AST node cannot be modified\"); //$NON-NLS-1$", "+\t\t\t}", "-\t\t\tASTNode.checkNewChild(ASTNode.this, newChild, this.cycleCheck, this.nodeType);", "+\t\t\tif ((oldChild.flags & PROTECT) != 0) {", "+\t\t\t\t// old child is protected => cannot be unparented", "+\t\t\t\tthrow new IllegalArgumentException(\"AST node cannot be modified\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tASTNode.checkNewChild(ASTNode.this, newChild, this.propertyDescriptor.cycleRisk, this.propertyDescriptor.elementType);", "-\t\t\t// n.b. setParent will call modifying()", "-\t\t\toldChild.setParent(null);", "-\t\t\tnewChild.setParent(ASTNode.this);", "+\t\t\t// n.b. setParent will call ast.modifying()", "+\t\t\tASTNode.this.ast.preRemoveChildEvent(ASTNode.this, oldChild, this.propertyDescriptor);", "+\t\t\toldChild.setParent(null, null);", "+\t\t\tnewChild.setParent(ASTNode.this, this.propertyDescriptor);", "+\t\t\tASTNode.this.ast.postAddChildEvent(ASTNode.this, newChild, this.propertyDescriptor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f451145e17161c53b782d70c6409ffe0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java", "commitBeforeChange": "ca9dbce3d563d28e984f1680d988cb68608c75f8", "commitAfterChange": "aec4b3fea7801d56d112291851d497436c0f9c81", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t\tpublic void add(int index, Object element)", "signatureAfterChange": " \t\tpublic void add(int index, Object element)", "diff": ["+\t\t    if (element == null) {", "+\t\t        throw new IllegalArgumentException();", "+\t\t    }", "+\t\t\tif ((ASTNode.this.flags & PROTECT) != 0) {", "+\t\t\t\t// this node is protected => cannot gain or lose children", "+\t\t\t\tthrow new IllegalArgumentException(\"AST node cannot be modified\"); //$NON-NLS-1$", "+\t\t\t}", "-\t\t\tASTNode.checkNewChild(ASTNode.this, newChild, this.cycleCheck, this.nodeType);", "+\t\t\tASTNode.checkNewChild(ASTNode.this, newChild, this.propertyDescriptor.cycleRisk, this.propertyDescriptor.elementType);", "-\t\t\t// n.b. setParent will call modifying()", "-\t\t\tnewChild.setParent(ASTNode.this);", "+\t\t\t// n.b. setParent will call ast.modifying()", "+\t\t\tnewChild.setParent(ASTNode.this, this.propertyDescriptor);", "+\t\t\tASTNode.this.ast.postAddChildEvent(ASTNode.this, newChild, this.propertyDescriptor);"]}], "num": 10366}
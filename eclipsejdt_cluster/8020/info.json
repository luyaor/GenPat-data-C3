{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75f8b8b89c7c522688c5c940489e6cd6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "071820802d580a25e539f7e0f0b03f42", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocSingleTypeReference.java", "commitBeforeChange": "f908d0c09b5bf34a0f6e90dacd8d551c0f19870c", "commitAfterChange": "2d9e2019b5b59684e0488ab5bab1ae5850c1ca71", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tTypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tTypeBinding internalResolveType(Scope scope)", "diff": ["+\t\t\t\tif (this.resolvedType.problemId() == ProblemReasons.NonStaticReferenceInStaticContext) {", "+\t\t\t\t\tReferenceBinding closestMatch = ((ProblemReferenceBinding)this.resolvedType).closestMatch;", "+\t\t\t\t\tif (closestMatch != null && closestMatch.isTypeVariable()) {", "+\t\t\t\t\t\tthis.resolvedType = closestMatch; // ignore problem as we want report specific javadoc one instead", "+\t\t\t\t\t\treturn resolvedType;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0255c0b56459c2e0a44152f96003d39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java", "commitBeforeChange": "d8f7412a7e197e30b6fcc17db5eeaf7d2638563c", "commitAfterChange": "b80780a7f472c2384c681f831c578ec77037e0cb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, ReferenceBinding enclosingType)", "diff": ["+\t\t\tenclosingType = this.resolvedType.enclosingType(); // if member type", "+\t\t\tif (enclosingType != null) {", "+\t\t\t\tReferenceBinding currentType = (ReferenceBinding) this.resolvedType;", "+\t\t\t\tif (currentType.isStatic() && enclosingType.isGenericType()) {", "+\t\t\t\t\tenclosingType = scope.environment().createRawType(enclosingType, enclosingType.enclosingType());", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 8020}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b006456fa93bb9173b500e63b8eecca7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b61cdd77b85a18a5f55aeabd06ab065", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java", "commitBeforeChange": "44d113e61136bfc7498b9dbe4e372737870ec16c", "commitAfterChange": "d26bd96cc9e1c9e59f2c9d083b9a2725de90852a", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 92, "signatureBeforeChange": " public void testSetClasspathVariable2() throws CoreException", "signatureAfterChange": " public void testSetClasspathVariable2() throws CoreException", "diff": ["-\t\tthis.createProject(\"LibProj\");", "-\t\tthis.createFile(\"LibProj/mylib.jar\", \"\");", "-\t\tthis.createFile(\"LibProj/otherlib.jar\", \"\");", "+\t\tcreateProject(\"LibProj\");", "+\t\tcreateFile(\"LibProj/mylib.jar\", \"\");", "+\t\tcreateFile(\"LibProj/otherlib.jar\", \"\");", "-\t\tthis.createJavaProject(\"P1\", new String[] {\"\"}, new String[] {\"LIB\"}, \"\");", "-\t\tthis.createJavaProject(\"P2\", new String[] {\"\"}, new String[] {\"LIB\"}, \"\");", "-\t\tthis.startDeltas();", "+\t\tcreateJavaProject(\"P1\", new String[] {\"\"}, new String[] {\"LIB\"}, \"\");", "+\t\tcreateJavaProject(\"P2\", new String[] {\"\"}, new String[] {\"LIB\"}, \"\");", "+\t\tstartDeltas();", "-\t\t\tthis.getSortedByProjectDeltas());", "+\t\t\tgetSortedByProjectDeltas());", "-\t\tthis.stopDeltas();", "-\t\tthis.deleteProject(\"P1\");", "-\t\tthis.deleteProject(\"P2\");", "-\t\tthis.deleteProject(\"LibProj\");", "+\t\tstopDeltas();", "+\t\tdeleteProject(\"P1\");", "+\t\tdeleteProject(\"P2\");", "+\t\tdeleteProject(\"LibProj\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57650ac7cd479de103072fdd90340a05", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "12f65faa0a3b984e9751d243a3eab6e6ab078ed7", "commitAfterChange": "36d2cf066100445cbe45dd4cf851204404f7d76f", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 70, "signatureBeforeChange": "  \tpublic void printArrayQualifiedReference(int numberOfTokens, int sourceEnd)", "signatureAfterChange": "  \tpublic void printArrayQualifiedReference(int numberOfTokens, int sourceEnd)", "diff": ["-\t\t\t\t\t\tthis.printBlockComment(this.scanner.getRawTokenSource(), false);", "+\t\t\t\t\t\tprintBlockComment(false);", "-\t\t\t\t\t\tthis.printLineComment(this.scanner.getRawTokenSource());", "+\t\t\t\t\t\tprintLineComment();", "-\t\t\t\t\t\tthis.print(this.scanner.getRawTokenSource(), false);", "+\t\t\t\t\t\tprint(this.scanner.currentPosition - this.scanner.startPosition, false);", "-\t\t\t\t\t\tthis.print(this.scanner.getRawTokenSource(), false);", "+\t\t\t\t\t\tprint(this.scanner.currentPosition - this.scanner.startPosition, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a22a9a9726a1b836386f4929f70f355", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "35d3c94bac1e2208a31f158b8d7e6058b35282e2", "commitAfterChange": "2b6f2c5ab69f56c08d444fe8672c8fe1596db9c2", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tpublic void testBug51363() throws JavaModelException", "signatureAfterChange": " \tpublic void testBug51363() throws JavaModelException", "diff": ["-\t\tthis.sourceUnit = getCompilationUnit(\"Converter\" , \"src\", \"javadoc.testBug51363\", \"Test.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "-\t\tASTNode result = runConversion(this.sourceUnit, false);", "+\t\tsourceUnit = getCompilationUnit(\"Converter\" , \"src\", \"javadoc.testBug51363\", \"Test.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+\t\tASTNode result = runConversion(sourceUnit, false);", "-\t\tassumeEquals(this.prefix+\"Wrong number of problems\", 0, unit.getProblems().length); //$NON-NLS-1$", "-\t\tassumeEquals(this.prefix+\"Wrong number of comments\", 2, unit.getCommentList().size());", "+\t\tassumeEquals(prefix+\"Wrong number of problems\", 0, unit.getProblems().length); //$NON-NLS-1$", "+\t\tassumeEquals(prefix+\"Wrong number of comments\", 2, unit.getCommentList().size());", "-\t\tassumeTrue(this.prefix+\"Comment should be a line comment \", comment.isLineComment());", "-\t\tString sourceStr = this.sourceUnit.getSource();", "+\t\tassumeTrue(prefix+\"Comment should be a line comment \", comment.isLineComment());", "+\t\tString sourceStr = sourceUnit.getSource();", "-\t\tassumeTrue(this.prefix+\"Comment should be a line comment\", comment.isLineComment());", "-\t\tsourceStr = this.sourceUnit.getSource();", "+\t\tassumeTrue(prefix+\"Comment should be a line comment\", comment.isLineComment());", "+\t\tsourceStr = sourceUnit.getSource();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6488bc0e95f81babe1135a9accfa72a8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "12f65faa0a3b984e9751d243a3eab6e6ab078ed7", "commitAfterChange": "36d2cf066100445cbe45dd4cf851204404f7d76f", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 63, "signatureBeforeChange": " \t \tpublic void printModifiers(Annotation[] annotations, ASTVisitor visitor, int annotationSourceKind)", "signatureAfterChange": " \t \tpublic void printModifiers(Annotation[] annotations, ASTVisitor visitor, int annotationSourceKind)", "diff": ["-\t\t\t\t\t\tthis.print(this.scanner.getRawTokenSource(), !isFirstModifier);", "+\t\t\t\t\t\tprint(this.scanner.currentPosition - this.scanner.startPosition, !isFirstModifier);", "-\t\t\t\t\t\tthis.printBlockComment(this.scanner.getRawTokenSource(), false);", "+\t\t\t\t\t\tprintBlockComment(false);", "-\t\t\t\t\t\tthis.printBlockComment(this.scanner.getRawTokenSource(), true);", "+\t\t\t\t\t\tprintBlockComment(true);", "-\t\t\t\t\t\tthis.printLineComment(this.scanner.getRawTokenSource());", "+\t\t\t\t\t\tprintLineComment();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adf18e6e125c4275fc2cac683c40c7d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 18, "signatureBeforeChange": "  private boolean isWorthBuilding() throws CoreException", "signatureAfterChange": "  private boolean isWorthBuilding() throws CoreException", "diff": ["-\t", "-\tboolean abortBuilds = JavaCore.ABORT.equals(this.javaProject.getOption(JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH, true));", "+\tboolean abortBuilds =", "+\t\tJavaCore.ABORT.equals(javaProject.getOption(JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH, true));", "-\tif (this.javaProject != null && (classpath = this.javaProject.getRawClasspath()) == JavaProject.INVALID_CLASSPATH) {", "+\tif (javaProject != null && (classpath = javaProject.getRawClasspath()) == JavaProject.INVALID_CLASSPATH) {", "-\t\tfor (int i = 0, length = markers.length; i < length; i++) {", "+\t\tfor (int i = 0, l = markers.length; i < l; i++) {", "-\t\tif (classpath != JavaProject.INVALID_CLASSPATH) {", "-\t\t\tnew BatchImageBuilder(this).cleanOutputFolder();", "-\t\t}", "+\t\tif (classpath != JavaProject.INVALID_CLASSPATH)", "+\t\t\tnew BatchImageBuilder(this).cleanOutputFolders();", "-\tnext : for (int i = 0, length = requiredProjects.length; i < length; i++) {", "+\tnext : for (int i = 0, l = requiredProjects.length; i < l; i++) {", "-\t\t\t// The prereq project has no build state: if this prereq project has a 'warning' cycle marker", "-\t\t\t// then allow build (see http://bugs.eclipse.org/bugs/show_bug.cgi?id=23357)", "-\t\t\tJavaProject prereqProject = (JavaProject)JavaCore.create(p);", "-\t\t\tif (prereqProject.hasCycleMarker() ", "-\t\t\t\t\t&& JavaCore.WARNING.equals(this.javaProject.getOption(JavaCore.CORE_CIRCULAR_CLASSPATH, true))) {", "+\t\t\t// The prereq project has no build state: if this prereq project has a 'warning' cycle marker then allow build (see bug id 23357)", "+\t\t\tJavaProject prereq = (JavaProject) JavaCore.create(p);", "+\t\t\tif (prereq.hasCycleMarker() && JavaCore.WARNING.equals(javaProject.getOption(JavaCore.CORE_CIRCULAR_CLASSPATH, true)))", "-\t\t\t}", "-\t\t\t// remove all existing class files... causes all dependent projects to do the same", "-\t\t\t// only if the .classpath file could be read", "-\t\t\tif (prereqProject.getRawClasspath() != JavaProject.INVALID_CLASSPATH) {", "-\t\t\t\tnew BatchImageBuilder(this).cleanOutputFolder();", "-\t\t\t}", "+\t\t\t// remove all existing class files... causes all dependent projects to do the same only if the .classpath file could be read", "+\t\t\tif (prereq.getRawClasspath() != JavaProject.INVALID_CLASSPATH)", "+\t\t\t\tnew BatchImageBuilder(this).cleanOutputFolders();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b30e63eddd7258d5f23d361744af8831", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/FormatJavadocBlock.java", "commitBeforeChange": "917603919e9d38772fd63709feb3bbda7696f523", "commitAfterChange": "fca5fd453024a315e76f840acd34b846e15423bf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  void addText(FormatJavadocText text)", "signatureAfterChange": "  void addText(FormatJavadocText text)", "diff": ["-//\t\tFormatJavadocText lastText = getLastText(text, text.depth);", "-\t\t\t\tfor (int i=0; i<MAX_TAG_HIERARCHY && textHierarchy[i] != null; i++) {", "+\t\t\t\tfor (int i=text.depth-1; i>=0; i--) {", "-\t\t\t\t\tfor (int i=0; i<MAX_TAG_HIERARCHY && textHierarchy[i] != null; i++) {", "+\t\t\t\t\tfor (int i=text.depth-2; i>=0; i--) {", "-\t    \tcase JAVADOC_BREAK_TAGS_ID:", "-\t\t\t\tif (this.nodesPtr >= 0) text.linesBefore = 1;", "+//\t    \tcase JAVADOC_BREAK_TAGS_ID:", "+//\t\t\t\tif (this.nodesPtr >= 0) text.linesBefore = 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfda92d45794d9b3393d22e66b35957d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 43, "signatureBeforeChange": " public void testMethodWithError5() throws JavaModelException, CoreException", "signatureAfterChange": " public void testMethodWithError05() throws CoreException", "diff": ["-public void testMethodWithError5() throws JavaModelException, CoreException {", "+public void testMethodWithError05() throws CoreException {", "-\t\tthis.createFolder(\"/Reconciler/src/tests\");", "+\t\tcreateFolder(\"/Reconciler/src/tests\");", "-\t\tthis.createFile(", "+\t\tcreateFile(", "-\t\tthis.createFile(", "+\t\tcreateFile(", "-\t\tthis.createFile(", "+\t\tcreateFile(", "-\t\tthis.createFile(", "+\t\tcreateFile(", "-\t\tthis.startDeltas();", "+\t\tstartDeltas();", "-\t\tthis.deleteFile(\"/Reconciler/src/tests/AbstractSearchableSource.java\");", "-\t\tthis.deleteFile(\"/Reconciler/src/tests/SearchableSource.java\");", "-\t\tthis.deleteFile(\"/Reconciler/src/tests/Source.java\");", "-\t\tthis.deleteFile(\"/Reconciler/src/tests/AbstractSource.java\");", "-\t\tthis.deleteFolder(\"/Reconciler/src/tests\");", "+\t\tdeleteFile(\"/Reconciler/src/tests/AbstractSearchableSource.java\");", "+\t\tdeleteFile(\"/Reconciler/src/tests/SearchableSource.java\");", "+\t\tdeleteFile(\"/Reconciler/src/tests/Source.java\");", "+\t\tdeleteFile(\"/Reconciler/src/tests/AbstractSource.java\");", "+\t\tdeleteFolder(\"/Reconciler/src/tests\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd784aac9c8b7e168896ae1d172380fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "37a02139caf878f43448c01ddaa8d50350269f33", "commitAfterChange": "c4bc9dbda3acec03e7397a532251ed78da035956", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tvoid printComment(int kind, int trailing)", "signatureAfterChange": " \tvoid printComment(int kind, int trailing)", "diff": ["-\t\t\t\t\t\t\t\tint lastCommentIndentation = this.lastLineComment.currentIndentation;", "-\t\t\t\t\t\t\t\tif (this.tabLength > 0) {", "-\t\t\t\t\t\t\t\t\tif ((currentCommentIndentation % this.tabLength) == 0) {", "-\t\t\t\t\t\t\t\t\t\tlastCommentIndentation = (lastCommentIndentation / this.tabLength) * this.tabLength;", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tcurrentCommentIndentation = ((currentCommentIndentation / this.tabLength) + 1) * this.tabLength;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tint relativeIndentation = currentCommentIndentation - this.lastLineComment.currentIndentation;", "+\t\t\t\t\t\t\t\tif (this.tabLength == 0) {", "+\t\t\t\t\t\t\t\t\tcanChangeTrailing = relativeIndentation == 0;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tcanChangeTrailing = relativeIndentation > -this.tabLength;", "-\t\t\t\t\t\t\t\tcanChangeTrailing = currentCommentIndentation >= lastCommentIndentation;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df28ba7bf76e76d4a56bcb6139a988f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java", "commitBeforeChange": "46f57536ed8e2bfbe5a9484e153647c7c5b9cb5d", "commitAfterChange": "846faf5699bcd826a09451dfb06e7bb91fe5a472", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " private void buildCUSource()", "signatureAfterChange": " private void buildCUSource(String lineSeparator)", "diff": ["-private void buildCUSource() {", "+private void buildCUSource(String lineSeparator) {", "-\t\tbuffer.append(\";\").append(Util.LINE_SEPARATOR); //$NON-NLS-1$", "+\t\tbuffer.append(\";\").append(lineSeparator); //$NON-NLS-1$", "-\t\tbuffer.append(';').append(Util.LINE_SEPARATOR);", "+\t\tbuffer.append(';').append(lineSeparator);", "-\tbuffer.append(\" {\").append(Util.LINE_SEPARATOR); //$NON-NLS-1$", "+\tbuffer.append(\" {\").append(lineSeparator); //$NON-NLS-1$", "-\t\tbuffer.append(';').append(Util.LINE_SEPARATOR);", "+\t\tbuffer.append(';').append(lineSeparator);", "-\t\t\tbuffer.append(';').append(Util.LINE_SEPARATOR);", "+\t\t\tbuffer.append(';').append(lineSeparator);", "-\tbuffer.append(\"public void run() throws Throwable {\").append(Util.LINE_SEPARATOR); //$NON-NLS-1$", "+\tbuffer.append(\"public void run() throws Throwable {\").append(lineSeparator); //$NON-NLS-1$", "-\tbuffer.append(Util.LINE_SEPARATOR).append('}').append(Util.LINE_SEPARATOR);", "+\tbuffer.append(lineSeparator).append('}').append(lineSeparator);", "-\tbuffer.append('}').append(Util.LINE_SEPARATOR);", "+\tbuffer.append('}').append(lineSeparator);"]}], "num": 14208}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f64df45bfec2886aaf353638420cc59", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96f0228263707dbd8a09f1cf1b192189", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "44a65692ed8ea84bd05a0826234a3cf62365dd1a", "commitAfterChange": "fda975d98b069f678ae89a663957463bb7bd4088", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void analyseArguments(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, MethodBinding methodBinding, Expression[] arguments)", "signatureAfterChange": " protected void analyseArguments(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, MethodBinding methodBinding, Expression[] arguments)", "diff": ["-\t\tfor (int i = 0; i < arguments.length; i++) {", "+", "+\t\t// check if varargs need special treatment:", "+\t\tint numParamsToCheck = methodBinding.parameters.length;", "+\t\tboolean passThrough = false;", "+\t\tif (methodBinding.isVarargs()) {", "+\t\t\tint varArgPos = numParamsToCheck-1;", "+\t\t\t// this if-block essentially copied from generateArguments(..):", "+\t\t\tif (numParamsToCheck == arguments.length) {", "+\t\t\t\tTypeBinding varArgsType = methodBinding.parameters[varArgPos];", "+\t\t\t\tTypeBinding lastType = arguments[varArgPos].resolvedType;", "+\t\t\t\tif (lastType == TypeBinding.NULL", "+\t\t\t\t\t\t|| (varArgsType.dimensions() == lastType.dimensions()", "+\t\t\t\t\t\t&& lastType.isCompatibleWith(varArgsType)))", "+\t\t\t\t\tpassThrough = true; // pass directly as-is", "+\t\t\t}", "+\t\t\tif (!passThrough)", "+\t\t\t\tnumParamsToCheck--; // with non-passthrough varargs last param is fed from individual args -> don't check", "+\t\t}", "+", "+\t\tfor (int i = 0; i < numParamsToCheck; i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2201044ad12b2cc1572d1a10529a1e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "e45e7b8413ff6cd002eb6f3ec9db803355263eb6", "commitAfterChange": "6002a17b24e19bf1229c7764276a11adf2e5e47f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate static void checkAlternateBinding(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] originalArgumentTypes, TypeBinding[] alternateArgumentTypes, final InvocationSite invocationSite)", "signatureAfterChange": "  \tprivate static void checkAlternateBinding(BlockScope scope, Expression receiver, TypeBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] originalArgumentTypes, TypeBinding[] alternateArgumentTypes, final InvocationSite invocationSite)", "diff": ["-\t\t\t\tfor (int i = 0, length = originalArgumentTypes.length; i < length; i++) {", "+\t\t\t\tint argumentLength = originalArgumentTypes.length;", "+\t\t\t\tif (binding.isVarargs()) {", "+\t\t\t\t\tint paramLength = binding.parameters.length;", "+\t\t\t\t   if (paramLength == argumentLength) {", "+\t\t\t\t\t\tint varargIndex = paramLength - 1;", "+\t\t\t\t\t\tArrayBinding varargType = (ArrayBinding) binding.parameters[varargIndex];", "+\t\t\t\t\t\tTypeBinding lastArgType = alternateArgumentTypes[varargIndex];", "+\t\t\t\t\t\tif (varargType.dimensions == lastArgType.dimensions() && varargType.leafComponentType != lastArgType.leafComponentType())", "+\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t   }", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < argumentLength; i++) {"]}], "num": 72408}
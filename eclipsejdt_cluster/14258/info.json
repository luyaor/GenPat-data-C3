{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e309efb9915725f425049b162565f2ff", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48cbaf55459a5d490c61fbacac491497", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/newbuilder/State.java", "commitBeforeChange": "aa303bcbd7e35255f6574fb5694621b8bb0e71bd", "commitAfterChange": "1c7929a1c930623193bb8bbab8613d7ae60b5863", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \r void copyFrom(State lastState)", "signatureAfterChange": "\r \r void copyFrom(State lastState)", "diff": ["-\tthis.additionalTypeNames = (HashtableOfObject) lastState.additionalTypeNames.clone();\r", "-\tthis.references = (HashtableOfObject) lastState.references.clone();\r", "+\ttry {\r", "+\t\tthis.additionalTypeNames = (HashtableOfObject) lastState.additionalTypeNames.clone();\r", "+\t\tthis.references = (HashtableOfObject) lastState.references.clone();\r", "+\t} catch (CloneNotSupportedException e) {\r", "+\t\tthis.additionalTypeNames = lastState.additionalTypeNames;\r", "+\t\tthis.references = lastState.references;\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c89b85cc3adb6eb2d088981b0cbdc4e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "0f16652d495864a2012fd0fc0ed568e6ea4bc1e1", "commitAfterChange": "6041a9141290a5f24fe2eae74d79755d86c6b388", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate boolean doesNotCompleteNormally()", "signatureAfterChange": "  \tprivate boolean doesNotCompleteNormally()", "diff": ["-\t\treturn this.body.analyseCode(this.scope, ", "+\t\ttry {", "+\t\t\treturn this.body.analyseCode(this.scope, ", "-\t\t\t\t\t\t\t\t\t UnconditionalFlowInfo.fakeInitializedFlowInfo(this.scope.outerMostMethodScope().analysisIndex, this.scope.referenceType().maxFieldCount)) == FlowInfo.DEAD_END; ", "+\t\t\t\t\t\t\t\t\t UnconditionalFlowInfo.fakeInitializedFlowInfo(this.scope.outerMostMethodScope().analysisIndex, this.scope.referenceType().maxFieldCount)) == FlowInfo.DEAD_END;", "+\t\t} catch (RuntimeException e) {", "+\t\t\tthis.scope.problemReporter().lambdaShapeComputationError(this);", "+\t\t\treturn this.valueCompatible;", "+\t\t}"]}], "num": 14258}
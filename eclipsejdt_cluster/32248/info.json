{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b82800b35f445ce434c7e0a8c47a995d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00e49bd5bacc9ad2f5b211dbe9f66066", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "344f41e4f3a0936f3d1a8dc22956abcf4bca93c4", "commitAfterChange": "2749db90d9b59a49ba8d955d8eddabda9be1d8ee", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 72, "signatureBeforeChange": " \tpublic MethodBinding getSingleAbstractMethod(final Scope scope, boolean replaceWildcards)", "signatureAfterChange": "\t \tpublic MethodBinding getSingleAbstractMethod(final Scope scope, boolean replaceWildcards, int capturePosition)", "diff": ["-\t\tint index = replaceWildcards ? 0 : 1;", "+\t}\t", "+\tpublic MethodBinding getSingleAbstractMethod(final Scope scope, boolean replaceWildcards, int capturePosition) {", "+\t\tint index = replaceWildcards ? capturePosition < 0 ? 0 : 1 : 2; // capturePosition >= 0 IFF replaceWildcard == true", "-\t\t\treturn this.singleAbstractMethod[index];", "+\t\t\t\treturn this.singleAbstractMethod[index];", "-\t\t\tthis.singleAbstractMethod = new MethodBinding[2];", "+\t\t\tthis.singleAbstractMethod = new MethodBinding[3];", "+\t\t}", "+\t\tif (capturePosition >= 0) { ", "+\t\t\t// caller is going to require the sam's parameters to be treated as argument expressions, post substitution capture will lose identity, where substitution results in fan out", "+\t\t\t// capture first and then substitute.", "+\t\t\tfor (int i = 0, length = types.length; i < length; i++) {", "+\t\t\t\ttypes[i] = types[i].capture(scope, 0);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ea52a36ce617e181398a3d64e74d4ec", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java", "commitBeforeChange": "4a25a74830ec5d44bea0e86a821b6fe146ccdc4d", "commitAfterChange": "509692f4edb0ce705fd505934a81ec54e8a7a49f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tfinal TypeBinding[] descriptorParameters = this.descriptor != null ? this.descriptor.parameters : Binding.NO_PARAMETERS;", "+    \t", "+    \t// Convert parameters into argument expressions for look up.", "+\t\tTypeBinding[] descriptorParameters = this.descriptor != null && this.descriptor.parameters != null && this.descriptor.parameters.length > 0 ? ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew TypeBinding[this.descriptor.parameters.length] : Binding.NO_PARAMETERS;", "+\t\tfor (int i = 0, length = descriptorParameters.length; i < length; i++)", "+\t\t\tdescriptorParameters[i] = this.descriptor.parameters[i].capture(scope, this.sourceEnd);", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b29347f05e4e905fa86de0fd8052d0f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/CharOperation.java", "commitBeforeChange": "92e10099182b1f553916fa888e20d1bb06a3f6c4", "commitAfterChange": "26e0b0c271d5031424823a1070ef180ba24218bf", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public static final boolean equals( \tchar[] first, \tchar[] second, \tboolean isCaseSensitive)", "signatureAfterChange": " public static final boolean equals(char[] first, char[] second, int secondStart, int secondEnd, boolean isCaseSensitive)", "diff": ["+ */", "+public static final boolean equals(char[] first, char[] second, int secondStart, int secondEnd, boolean isCaseSensitive) {", "+\tif (isCaseSensitive) {", "+\t\tfor (int i = first.length; --i >= 0;)", "+\t\t\tif (first[i] != second[i+secondStart])", "+\t\t\t\treturn false;", "+\t} else {", "+\t\tfor (int i = first.length; --i >= 0;)", "+\t\t\tif (Character.toLowerCase(first[i]) != Character.toLowerCase(second[i+secondStart]))", "+\t\t\t\treturn false;", "+\t}"]}], "num": 32248}
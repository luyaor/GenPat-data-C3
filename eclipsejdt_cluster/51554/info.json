{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c73006497d291688646bba164464e30", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dedbe25cc772be725974980b255184e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodDeclarationPattern.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public int matchLevel(AstNode node, boolean resolve)", "signatureAfterChange": "\r protected boolean matches(AstNode node, boolean resolve)", "diff": ["+ */\r", "+protected boolean matches(AstNode node, boolean resolve) {\r", "+\tif (!(node instanceof MethodDeclaration)) return false;\r", "+\r", "+\tMethodDeclaration method = (MethodDeclaration)node;\r", "+\t\r", "+\t// selector\r", "+\tif (!this.matchesName(this.selector, method.selector))\r", "+\t\treturn false;\r", "+\r", "+\t// declaring type\r", "+\tMethodBinding binding = method.binding;\r", "+\tif (resolve && binding != null) {\r", "+\t\tReferenceBinding declaringType = binding.declaringClass;\r", "+\t\tif (declaringType != null) {\r", "+\t\t\tif (!binding.isStatic() && !binding.isPrivate()) {\r", "+\t\t\t\tif (!this.matchesAsSubtype(declaringType, this.declaringSimpleName, this.declaringQualification))\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t} else {\r", "+\t\t\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringType))\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\r", "+\t// return type\r", "+\tif (this.returnQualification == null) {\r", "+\t\tif (this.returnSimpleName != null) {\r", "+\t\t\tTypeReference methodReturnType = method.returnType;\r", "+\t\t\tif (methodReturnType != null) {\r", "+\t\t\t\tchar[][] methodReturnTypeName = methodReturnType.getTypeName();\r", "+\t\t\t\tchar[] sourceName = this.toArrayName(\r", "+\t\t\t\t\tmethodReturnTypeName[methodReturnTypeName.length-1], \r", "+\t\t\t\t\tmethodReturnType.dimensions());\r", "+\t\t\t\tif (!this.matchesName(this.returnSimpleName, sourceName))\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t} else {\r", "+\t\tif (resolve \r", "+\t\t\t\t&& binding != null \r", "+\t\t\t\t&& !this.matchesType(this.returnSimpleName, this.returnQualification, binding.returnType))\r", "+\t\t\treturn false;\r", "+\t}\r", "+\t\t\r", "+\t// parameter types\r", "+\tint parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\tif (parameterCount > -1) {\r", "+\t\tint argumentCount = method.arguments == null ? 0 : method.arguments.length;\r", "+\t\tif (parameterCount != argumentCount)\r", "+\t\t\treturn false;\r", "+\t\r", "+\t\tif (resolve && binding != null) {\r", "+\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "+\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "+\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "+\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\r", "+\treturn true;\r", "+}\r", "- */\r", "-public int matchLevel(AstNode node, boolean resolve) {\r", "-\tif (!(node instanceof MethodDeclaration)) return IMPOSSIBLE_MATCH;\r", "-\r", "-\tMethodDeclaration method = (MethodDeclaration)node;\r", "-\r", "-\tif (resolve) {\r", "-\t\treturn this.matchLevel(method.binding);\r", "-\t} else {\r", "-\t\t// selector\r", "-\t\tif (!this.matchesName(this.selector, method.selector))\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\r", "-\t\t// return type\r", "-\t\tTypeReference methodReturnType = method.returnType;\r", "-\t\tif (methodReturnType != null) {\r", "-\t\t\tchar[][] methodReturnTypeName = methodReturnType.getTypeName();\r", "-\t\t\tchar[] sourceName = this.toArrayName(\r", "-\t\t\t\tmethodReturnTypeName[methodReturnTypeName.length-1], \r", "-\t\t\t\tmethodReturnType.dimensions());\r", "-\t\t\tif (!this.matchesName(this.returnSimpleName, sourceName))\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t\t\t\r", "-\t\t// parameter types\r", "-\t\tint parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\t\tif (parameterCount > -1) {\r", "-\t\t\tint argumentCount = method.arguments == null ? 0 : method.arguments.length;\r", "-\t\t\tif (parameterCount != argumentCount)\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\r", "-\t\treturn POSSIBLE_MATCH;\r", "-\t}\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "523c9ef24b4d2123924b47a2baa2d940", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodDeclarationPattern.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public int matchLevel(AstNode node, boolean resolve)", "signatureAfterChange": "\r protected boolean matches(AstNode node, boolean resolve)", "diff": ["+ */\r", "+protected boolean matches(AstNode node, boolean resolve) {\r", "+\tif (!(node instanceof MethodDeclaration)) return false;\r", "+\r", "+\tMethodDeclaration method = (MethodDeclaration)node;\r", "+\t\r", "+\t// selector\r", "+\tif (!this.matchesName(this.selector, method.selector))\r", "+\t\treturn false;\r", "+\r", "+\t// declaring type\r", "+\tMethodBinding binding = method.binding;\r", "+\tif (resolve && binding != null) {\r", "+\t\tReferenceBinding declaringType = binding.declaringClass;\r", "+\t\tif (declaringType != null) {\r", "+\t\t\tif (!binding.isStatic() && !binding.isPrivate()) {\r", "+\t\t\t\tif (!this.matchesAsSubtype(declaringType, this.declaringSimpleName, this.declaringQualification))\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t} else {\r", "+\t\t\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringType))\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\r", "+\t// return type\r", "+\tif (this.returnQualification == null) {\r", "+\t\tif (this.returnSimpleName != null) {\r", "+\t\t\tTypeReference methodReturnType = method.returnType;\r", "+\t\t\tif (methodReturnType != null) {\r", "+\t\t\t\tchar[][] methodReturnTypeName = methodReturnType.getTypeName();\r", "+\t\t\t\tchar[] sourceName = this.toArrayName(\r", "+\t\t\t\t\tmethodReturnTypeName[methodReturnTypeName.length-1], \r", "+\t\t\t\t\tmethodReturnType.dimensions());\r", "+\t\t\t\tif (!this.matchesName(this.returnSimpleName, sourceName))\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t} else {\r", "+\t\tif (resolve \r", "+\t\t\t\t&& binding != null \r", "+\t\t\t\t&& !this.matchesType(this.returnSimpleName, this.returnQualification, binding.returnType))\r", "+\t\t\treturn false;\r", "+\t}\r", "+\t\t\r", "+\t// parameter types\r", "+\tint parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\tif (parameterCount > -1) {\r", "+\t\tint argumentCount = method.arguments == null ? 0 : method.arguments.length;\r", "+\t\tif (parameterCount != argumentCount)\r", "+\t\t\treturn false;\r", "+\t\r", "+\t\tif (resolve && binding != null) {\r", "+\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "+\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "+\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "+\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\r", "+\treturn true;\r", "+}\r", "- */\r", "-public int matchLevel(AstNode node, boolean resolve) {\r", "-\tif (!(node instanceof MethodDeclaration)) return IMPOSSIBLE_MATCH;\r", "-\r", "-\tMethodDeclaration method = (MethodDeclaration)node;\r", "-\r", "-\tif (resolve) {\r", "-\t\treturn this.matchLevel(method.binding);\r", "-\t} else {\r", "-\t\t// selector\r", "-\t\tif (!this.matchesName(this.selector, method.selector))\r", "-\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\r", "-\t\t// return type\r", "-\t\tTypeReference methodReturnType = method.returnType;\r", "-\t\tif (methodReturnType != null) {\r", "-\t\t\tchar[][] methodReturnTypeName = methodReturnType.getTypeName();\r", "-\t\t\tchar[] sourceName = this.toArrayName(\r", "-\t\t\t\tmethodReturnTypeName[methodReturnTypeName.length-1], \r", "-\t\t\t\tmethodReturnType.dimensions());\r", "-\t\t\tif (!this.matchesName(this.returnSimpleName, sourceName))\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t\t\t\r", "-\t\t// parameter types\r", "-\t\tint parameterCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\t\tif (parameterCount > -1) {\r", "-\t\t\tint argumentCount = method.arguments == null ? 0 : method.arguments.length;\r", "-\t\t\tif (parameterCount != argumentCount)\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\r", "-\t\treturn POSSIBLE_MATCH;\r", "-\t}\r", "-}\r"]}], "num": 51554}
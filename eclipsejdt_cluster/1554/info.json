{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "269f4dd8f428e9411f895c67782818a3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2332d32456571bd8aa558703a14edb84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "babe82af3726a6979eb5da4c747f51906154b2bc", "commitAfterChange": "fab4ac0c2a45db58d02407ad5972d843c8dba1e6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void traverse(ASTVisitor visitor, BlockScope scope)", "signatureAfterChange": "  public void traverse(ASTVisitor visitor, BlockScope scope)", "diff": ["+", "+public void traverse(ASTVisitor visitor, BlockScope scope) {", "+\tif (visitor.visit(this, scope)) {", "+\t\tif (this.action != null) {", "+\t\t\tthis.action.traverse(visitor, scope);", "+\t\tthis.condition.traverse(visitor, scope);", "-", "-\tpublic void traverse(ASTVisitor visitor, BlockScope scope) {", "-", "-\t\tif (visitor.visit(this, scope)) {", "-\t\t\tif (action != null) {", "-\t\t\t\taction.traverse(visitor, scope);", "-\t\t\t}", "-\t\t\tcondition.traverse(visitor, scope);", "-\t\t}", "-\t\tvisitor.endVisit(this, scope);", "-\t}", "+\tvisitor.endVisit(this, scope);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6aacc67c9b4f811e1801cea0273c87f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java", "commitBeforeChange": "babe82af3726a6979eb5da4c747f51906154b2bc", "commitAfterChange": "fab4ac0c2a45db58d02407ad5972d843c8dba1e6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void resolve(BlockScope scope)", "signatureAfterChange": "  public void resolve(BlockScope scope)", "diff": ["+", "+public void resolve(BlockScope scope) {", "+\tTypeBinding type = this.condition.resolveTypeExpecting(scope, TypeBinding.BOOLEAN);", "+\tthis.condition.computeConversion(scope, type, type);", "+\tif (this.action != null)", "+\t\tthis.action.resolve(scope);", "+}", "-\tpublic void resolve(BlockScope scope) {", "-", "-\t\tTypeBinding type = condition.resolveTypeExpecting(scope, TypeBinding.BOOLEAN);", "-\t\tcondition.computeConversion(scope, type, type);", "-\t\tif (action != null)", "-\t\t\taction.resolve(scope);", "-\t}"]}], "num": 1554}
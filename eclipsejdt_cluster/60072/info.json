{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18e7bbd48f6098fd54896d094f365645", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f2dc5e76aabbc03bc37aa7d7725094d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "\r \tprivate void findVariablesAndMethods(\r \t\tchar[] token,\r \t\tScope scope,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope)", "signatureAfterChange": "\r private void findVariablesAndMethods(char[] token, Scope scope)", "diff": ["+}\r", "+private void findVariablesAndMethods(char[] token, Scope scope) {\r", "+\tif (token == null) return;\r", "+\t// Should local variables hide fields from the receiver type or any of its enclosing types?\r", "+\t// we know its an implicit field/method access... see BlockScope getBinding/getImplicitMethod\r", "+\tboolean staticsOnly = false; // need to know if we're in a static context (or inside a constructor)\r", "+\tchar[][] found = null;\r", "+\tint lastPosition = -1;\r", "+\tint tokenLength = token.length;\r", "+\tObjectVector fieldsFound = new ObjectVector();\r", "+\tObjectVector methodsFound = new ObjectVector();\r", "+\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "+\t\tswitch (scope.kind) {\r", "+\t\t\tcase Scope.METHOD_SCOPE :\r", "+\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)\r", "+\t\t\t\tMethodScope methodScope = (MethodScope) scope;\r", "+\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;\r", "+\t\t\tcase Scope.BLOCK_SCOPE :\r", "+\t\t\t\tBlockScope blockScope = (BlockScope) scope;\r", "+\t\t\t\tnext : for (int i = 0, length = blockScope.locals.length; i < length; i++) {\r", "+\t\t\t\t\tLocalVariableBinding local = blockScope.locals[i];\r", "+\t\t\t\t\tif (local == null) break next;\r", "+\t\t\t\t\tif (tokenLength > local.name.length) continue next;\r", "+\t\t\t\t\tif (!CharOperation.prefixEquals(token, local.name, false /* ignore case */)) continue next;\r", "+\t\t\t\t\tif (local.isSecret()) continue next;\r", "+\t\t\t\t\tif (found == null) {\r", "+\t\t\t\t\t\tfound = new char[5][];\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tfor (int f = 0; f < found.length; f++) {\r", "+\t\t\t\t\t\t\tchar[] name = found[f];\r", "+\t\t\t\t\t\t\tif (name == null) break;\r", "+\t\t\t\t\t\t\tif (CharOperation.equals(name, local.name, false /* ignore case */)) continue next;\r", "+\t\t\t\t\tif (++lastPosition == found.length)\r", "+\t\t\t\t\t\tSystem.arraycopy(found, 0, found = new char[lastPosition * 2][], 0, lastPosition);\r", "+\t\t\t\t\tfound[lastPosition] = local.name;\r", "+\r", "+\t\t\t\t\trequestor.acceptLocalVariable(\r", "+\t\t\t\t\t\tlocal.name,\r", "+\t\t\t\t\t\tNoChar,\r", "+\t\t\t\t\t\tlocal.type == null ? local.declaration.type.toString().toCharArray() : local.type.qualifiedSourceName(),\r", "+\t\t\t\t\t\tlocal.modifiers,\r", "+\t\t\t\t\t\tstartPosition,\r", "+\t\t\t\t\t\tendPosition);\r", "-\t}\r", "-\tprivate void findVariablesAndMethods(\r", "-\t\tchar[] token,\r", "-\t\tScope scope,\r", "-\t\tInvocationSite invocationSite,\r", "-\t\tScope invocationScope) {\r", "-\t\tif (token == null)\r", "-\t\t\treturn;\r", "-\r", "-\t\t// Should local variables hide fields from the receiver type or any of its enclosing types?\r", "-\t\t// we know its an implicit field/method access... see BlockScope getBinding/getImplicitMethod\r", "-\r", "-\t\tboolean staticsOnly = false;\r", "-\t\t// need to know if we're in a static context (or inside a constructor)\r", "-\t\tint lastPosition = -1;\r", "-\t\tint tokenLength = token.length;\r", "-\r", "-\t\tObjectVector localsFound = new ObjectVector();\r", "-\t\tObjectVector fieldsFound = new ObjectVector();\r", "-\t\tObjectVector methodsFound = new ObjectVector();\r", "-\t\t\r", "-\t\tScope currentScope = scope;\r", "-\t\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "-\t\t\tswitch (currentScope.kind) {\r", "-\t\t\t\tcase Scope.METHOD_SCOPE :\r", "-\t\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)\r", "-\t\t\t\t\tMethodScope methodScope = (MethodScope) currentScope;\r", "-\t\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;\r", "-\t\t\t\tcase Scope.BLOCK_SCOPE :\r", "-\t\t\t\t\tBlockScope blockScope = (BlockScope) currentScope;\r", "-\t\t\t\t\tnext : for (int i = 0, length = blockScope.locals.length; i < length; i++) {\r", "-\t\t\t\t\t\tLocalVariableBinding local = blockScope.locals[i];\r", "-\t\t\t\t\t\tif (local == null)\r", "-\t\t\t\t\t\t\tbreak next;\r", "-\t\t\t\t\t\tif (tokenLength > local.name.length)\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t\t\tif (!CharOperation.prefixEquals(token, local.name, false /* ignore case */\r", "-\t\t\t\t\t\t\t))\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t\t\tif (local.isSecret())\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\r", "-\t\t\t\t\t\tfor (int f = 0; f < localsFound.size; f++) {\r", "-\t\t\t\t\t\t\tLocalVariableBinding otherLocal =\r", "-\t\t\t\t\t\t\t\t(LocalVariableBinding) localsFound.elementAt(f);\r", "-\t\t\t\t\t\t\tif (CharOperation.equals(otherLocal.name, local.name, false /* ignore case */\r", "-\t\t\t\t\t\t\t\t))\r", "-\t\t\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tlocalsFound.add(local);\r", "-\r", "-\t\t\t\t\t\trequestor.acceptLocalVariable(\r", "-\t\t\t\t\t\t\tlocal.name,\r", "-\t\t\t\t\t\t\tNoChar,\r", "-\t\t\t\t\t\t\tlocal.type == null\r", "-\t\t\t\t\t\t\t\t? local.declaration.type.toString().toCharArray()\r", "-\t\t\t\t\t\t\t\t: local.type.qualifiedSourceName(),\r", "-\t\t\t\t\t\t\tlocal.modifiers,\r", "-\t\t\t\t\t\t\tstartPosition,\r", "-\t\t\t\t\t\t\tendPosition);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase Scope.CLASS_SCOPE :\r", "+\t\t\t\tClassScope classScope = (ClassScope) scope;\r", "+\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;\r", "+/*\t\t\t\tif (tokenLength == 0) { // only search inside the type itself if no prefix was provided\r", "+\t\t\t\t\tfindFields(token, enclosingType.fields(), classScope, fieldsFound, staticsOnly);\r", "+\t\t\t\t\tfindMethods(token, enclosingType.methods(), classScope, methodsFound, staticsOnly, false);\r", "-\t\t\t}\r", "-\t\t\tcurrentScope = currentScope.parent;\r", "-\t\t}\r", "-\t\t\r", "-\t\tcurrentScope = scope;\r", "-\t\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "-\t\t\tswitch (currentScope.kind) {\r", "-\t\t\t\tcase Scope.CLASS_SCOPE :\r", "-\t\t\t\t\tClassScope classScope = (ClassScope) currentScope;\r", "-\t\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;\r", "-\t\t\t\t\t/*\t\t\t\tif (tokenLength == 0) { // only search inside the type itself if no prefix was provided\r", "-\t\t\t\t\t\t\t\t\t\tfindFields(token, enclosingType.fields(), classScope, fieldsFound, staticsOnly);\r", "-\t\t\t\t\t\t\t\t\t\tfindMethods(token, enclosingType.methods(), classScope, methodsFound, staticsOnly, false);\r", "-\t\t\t\t\t\t\t\t\t\tbreak done;\r", "-\t\t\t\t\t\t\t\t\t} else { */\r", "-\t\t\t\t\tfindFields(\r", "-\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\tenclosingType,\r", "-\t\t\t\t\t\tclassScope,\r", "-\t\t\t\t\t\tfieldsFound,\r", "-\t\t\t\t\t\tlocalsFound,\r", "-\t\t\t\t\t\tstaticsOnly,\r", "-\t\t\t\t\t\tinvocationSite,\r", "-\t\t\t\t\t\tinvocationScope);\r", "-\t\t\t\t\tfindMethods(\r", "-\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\tnull,\r", "-\t\t\t\t\t\tenclosingType,\r", "-\t\t\t\t\t\tclassScope,\r", "-\t\t\t\t\t\tmethodsFound,\r", "-\t\t\t\t\t\tstaticsOnly,\r", "-\t\t\t\t\t\tfalse,\r", "-\t\t\t\t\t\tinvocationSite);\r", "+\t\t\t\t} else { */\r", "+\t\t\t\t\tfindFields(token, enclosingType, classScope, fieldsFound, staticsOnly);\r", "+\t\t\t\t\tfindMethods(token, null, enclosingType, classScope, methodsFound, staticsOnly, false);\r", "-\t\t\t\t\t//\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "-\t\t\t\t\tbreak done;\r", "-\t\t\t}\r", "-\t\t\tcurrentScope = currentScope.parent;\r", "+//\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "+\t\t\t\tbreak done;\r", "+\t\tscope = scope.parent;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bef73594241c31f8e731ce24ab0fa215", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "\r \tprivate void findVariablesAndMethods(\r \t\tchar[] token,\r \t\tScope scope,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope)", "signatureAfterChange": "\r private void findVariablesAndMethods(char[] token, Scope scope)", "diff": ["+}\r", "+private void findVariablesAndMethods(char[] token, Scope scope) {\r", "+\tif (token == null) return;\r", "+\t// Should local variables hide fields from the receiver type or any of its enclosing types?\r", "+\t// we know its an implicit field/method access... see BlockScope getBinding/getImplicitMethod\r", "+\tboolean staticsOnly = false; // need to know if we're in a static context (or inside a constructor)\r", "+\tchar[][] found = null;\r", "+\tint lastPosition = -1;\r", "+\tint tokenLength = token.length;\r", "+\tObjectVector fieldsFound = new ObjectVector();\r", "+\tObjectVector methodsFound = new ObjectVector();\r", "+\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "+\t\tswitch (scope.kind) {\r", "+\t\t\tcase Scope.METHOD_SCOPE :\r", "+\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)\r", "+\t\t\t\tMethodScope methodScope = (MethodScope) scope;\r", "+\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;\r", "+\t\t\tcase Scope.BLOCK_SCOPE :\r", "+\t\t\t\tBlockScope blockScope = (BlockScope) scope;\r", "+\t\t\t\tnext : for (int i = 0, length = blockScope.locals.length; i < length; i++) {\r", "+\t\t\t\t\tLocalVariableBinding local = blockScope.locals[i];\r", "+\t\t\t\t\tif (local == null) break next;\r", "+\t\t\t\t\tif (tokenLength > local.name.length) continue next;\r", "+\t\t\t\t\tif (!CharOperation.prefixEquals(token, local.name, false /* ignore case */)) continue next;\r", "+\t\t\t\t\tif (local.isSecret()) continue next;\r", "+\t\t\t\t\tif (found == null) {\r", "+\t\t\t\t\t\tfound = new char[5][];\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tfor (int f = 0; f < found.length; f++) {\r", "+\t\t\t\t\t\t\tchar[] name = found[f];\r", "+\t\t\t\t\t\t\tif (name == null) break;\r", "+\t\t\t\t\t\t\tif (CharOperation.equals(name, local.name, false /* ignore case */)) continue next;\r", "+\t\t\t\t\tif (++lastPosition == found.length)\r", "+\t\t\t\t\t\tSystem.arraycopy(found, 0, found = new char[lastPosition * 2][], 0, lastPosition);\r", "+\t\t\t\t\tfound[lastPosition] = local.name;\r", "+\r", "+\t\t\t\t\trequestor.acceptLocalVariable(\r", "+\t\t\t\t\t\tlocal.name,\r", "+\t\t\t\t\t\tNoChar,\r", "+\t\t\t\t\t\tlocal.type == null ? local.declaration.type.toString().toCharArray() : local.type.qualifiedSourceName(),\r", "+\t\t\t\t\t\tlocal.modifiers,\r", "+\t\t\t\t\t\tstartPosition,\r", "+\t\t\t\t\t\tendPosition);\r", "-\t}\r", "-\tprivate void findVariablesAndMethods(\r", "-\t\tchar[] token,\r", "-\t\tScope scope,\r", "-\t\tInvocationSite invocationSite,\r", "-\t\tScope invocationScope) {\r", "-\t\tif (token == null)\r", "-\t\t\treturn;\r", "-\r", "-\t\t// Should local variables hide fields from the receiver type or any of its enclosing types?\r", "-\t\t// we know its an implicit field/method access... see BlockScope getBinding/getImplicitMethod\r", "-\r", "-\t\tboolean staticsOnly = false;\r", "-\t\t// need to know if we're in a static context (or inside a constructor)\r", "-\t\tint lastPosition = -1;\r", "-\t\tint tokenLength = token.length;\r", "-\r", "-\t\tObjectVector localsFound = new ObjectVector();\r", "-\t\tObjectVector fieldsFound = new ObjectVector();\r", "-\t\tObjectVector methodsFound = new ObjectVector();\r", "-\t\t\r", "-\t\tScope currentScope = scope;\r", "-\t\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "-\t\t\tswitch (currentScope.kind) {\r", "-\t\t\t\tcase Scope.METHOD_SCOPE :\r", "-\t\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)\r", "-\t\t\t\t\tMethodScope methodScope = (MethodScope) currentScope;\r", "-\t\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;\r", "-\t\t\t\tcase Scope.BLOCK_SCOPE :\r", "-\t\t\t\t\tBlockScope blockScope = (BlockScope) currentScope;\r", "-\t\t\t\t\tnext : for (int i = 0, length = blockScope.locals.length; i < length; i++) {\r", "-\t\t\t\t\t\tLocalVariableBinding local = blockScope.locals[i];\r", "-\t\t\t\t\t\tif (local == null)\r", "-\t\t\t\t\t\t\tbreak next;\r", "-\t\t\t\t\t\tif (tokenLength > local.name.length)\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t\t\tif (!CharOperation.prefixEquals(token, local.name, false /* ignore case */\r", "-\t\t\t\t\t\t\t))\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t\t\tif (local.isSecret())\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\r", "-\t\t\t\t\t\tfor (int f = 0; f < localsFound.size; f++) {\r", "-\t\t\t\t\t\t\tLocalVariableBinding otherLocal =\r", "-\t\t\t\t\t\t\t\t(LocalVariableBinding) localsFound.elementAt(f);\r", "-\t\t\t\t\t\t\tif (CharOperation.equals(otherLocal.name, local.name, false /* ignore case */\r", "-\t\t\t\t\t\t\t\t))\r", "-\t\t\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tlocalsFound.add(local);\r", "-\r", "-\t\t\t\t\t\trequestor.acceptLocalVariable(\r", "-\t\t\t\t\t\t\tlocal.name,\r", "-\t\t\t\t\t\t\tNoChar,\r", "-\t\t\t\t\t\t\tlocal.type == null\r", "-\t\t\t\t\t\t\t\t? local.declaration.type.toString().toCharArray()\r", "-\t\t\t\t\t\t\t\t: local.type.qualifiedSourceName(),\r", "-\t\t\t\t\t\t\tlocal.modifiers,\r", "-\t\t\t\t\t\t\tstartPosition,\r", "-\t\t\t\t\t\t\tendPosition);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase Scope.CLASS_SCOPE :\r", "+\t\t\t\tClassScope classScope = (ClassScope) scope;\r", "+\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;\r", "+/*\t\t\t\tif (tokenLength == 0) { // only search inside the type itself if no prefix was provided\r", "+\t\t\t\t\tfindFields(token, enclosingType.fields(), classScope, fieldsFound, staticsOnly);\r", "+\t\t\t\t\tfindMethods(token, enclosingType.methods(), classScope, methodsFound, staticsOnly, false);\r", "-\t\t\t}\r", "-\t\t\tcurrentScope = currentScope.parent;\r", "-\t\t}\r", "-\t\t\r", "-\t\tcurrentScope = scope;\r", "-\t\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "-\t\t\tswitch (currentScope.kind) {\r", "-\t\t\t\tcase Scope.CLASS_SCOPE :\r", "-\t\t\t\t\tClassScope classScope = (ClassScope) currentScope;\r", "-\t\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;\r", "-\t\t\t\t\t/*\t\t\t\tif (tokenLength == 0) { // only search inside the type itself if no prefix was provided\r", "-\t\t\t\t\t\t\t\t\t\tfindFields(token, enclosingType.fields(), classScope, fieldsFound, staticsOnly);\r", "-\t\t\t\t\t\t\t\t\t\tfindMethods(token, enclosingType.methods(), classScope, methodsFound, staticsOnly, false);\r", "-\t\t\t\t\t\t\t\t\t\tbreak done;\r", "-\t\t\t\t\t\t\t\t\t} else { */\r", "-\t\t\t\t\tfindFields(\r", "-\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\tenclosingType,\r", "-\t\t\t\t\t\tclassScope,\r", "-\t\t\t\t\t\tfieldsFound,\r", "-\t\t\t\t\t\tlocalsFound,\r", "-\t\t\t\t\t\tstaticsOnly,\r", "-\t\t\t\t\t\tinvocationSite,\r", "-\t\t\t\t\t\tinvocationScope);\r", "-\t\t\t\t\tfindMethods(\r", "-\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\tnull,\r", "-\t\t\t\t\t\tenclosingType,\r", "-\t\t\t\t\t\tclassScope,\r", "-\t\t\t\t\t\tmethodsFound,\r", "-\t\t\t\t\t\tstaticsOnly,\r", "-\t\t\t\t\t\tfalse,\r", "-\t\t\t\t\t\tinvocationSite);\r", "+\t\t\t\t} else { */\r", "+\t\t\t\t\tfindFields(token, enclosingType, classScope, fieldsFound, staticsOnly);\r", "+\t\t\t\t\tfindMethods(token, null, enclosingType, classScope, methodsFound, staticsOnly, false);\r", "-\t\t\t\t\t//\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "-\t\t\t\t\tbreak done;\r", "-\t\t\t}\r", "-\t\t\tcurrentScope = currentScope.parent;\r", "+//\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "+\t\t\t\tbreak done;\r", "+\t\tscope = scope.parent;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc250a3ec4da2af5d993d0df75445f2d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "\r \tprivate void findVariablesAndMethods(\r \t\tchar[] token,\r \t\tScope scope,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope)", "signatureAfterChange": "\r private void findVariablesAndMethods(char[] token, Scope scope)", "diff": ["+}\r", "+private void findVariablesAndMethods(char[] token, Scope scope) {\r", "+\tif (token == null) return;\r", "+\t// Should local variables hide fields from the receiver type or any of its enclosing types?\r", "+\t// we know its an implicit field/method access... see BlockScope getBinding/getImplicitMethod\r", "+\tboolean staticsOnly = false; // need to know if we're in a static context (or inside a constructor)\r", "+\tchar[][] found = null;\r", "+\tint lastPosition = -1;\r", "+\tint tokenLength = token.length;\r", "+\tObjectVector fieldsFound = new ObjectVector();\r", "+\tObjectVector methodsFound = new ObjectVector();\r", "+\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "+\t\tswitch (scope.kind) {\r", "+\t\t\tcase Scope.METHOD_SCOPE :\r", "+\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)\r", "+\t\t\t\tMethodScope methodScope = (MethodScope) scope;\r", "+\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;\r", "+\t\t\tcase Scope.BLOCK_SCOPE :\r", "+\t\t\t\tBlockScope blockScope = (BlockScope) scope;\r", "+\t\t\t\tnext : for (int i = 0, length = blockScope.locals.length; i < length; i++) {\r", "+\t\t\t\t\tLocalVariableBinding local = blockScope.locals[i];\r", "+\t\t\t\t\tif (local == null) break next;\r", "+\t\t\t\t\tif (tokenLength > local.name.length) continue next;\r", "+\t\t\t\t\tif (!CharOperation.prefixEquals(token, local.name, false /* ignore case */)) continue next;\r", "+\t\t\t\t\tif (local.isSecret()) continue next;\r", "+\t\t\t\t\tif (found == null) {\r", "+\t\t\t\t\t\tfound = new char[5][];\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tfor (int f = 0; f < found.length; f++) {\r", "+\t\t\t\t\t\t\tchar[] name = found[f];\r", "+\t\t\t\t\t\t\tif (name == null) break;\r", "+\t\t\t\t\t\t\tif (CharOperation.equals(name, local.name, false /* ignore case */)) continue next;\r", "+\t\t\t\t\tif (++lastPosition == found.length)\r", "+\t\t\t\t\t\tSystem.arraycopy(found, 0, found = new char[lastPosition * 2][], 0, lastPosition);\r", "+\t\t\t\t\tfound[lastPosition] = local.name;\r", "+\r", "+\t\t\t\t\trequestor.acceptLocalVariable(\r", "+\t\t\t\t\t\tlocal.name,\r", "+\t\t\t\t\t\tNoChar,\r", "+\t\t\t\t\t\tlocal.type == null ? local.declaration.type.toString().toCharArray() : local.type.qualifiedSourceName(),\r", "+\t\t\t\t\t\tlocal.modifiers,\r", "+\t\t\t\t\t\tstartPosition,\r", "+\t\t\t\t\t\tendPosition);\r", "-\t}\r", "-\tprivate void findVariablesAndMethods(\r", "-\t\tchar[] token,\r", "-\t\tScope scope,\r", "-\t\tInvocationSite invocationSite,\r", "-\t\tScope invocationScope) {\r", "-\t\tif (token == null)\r", "-\t\t\treturn;\r", "-\r", "-\t\t// Should local variables hide fields from the receiver type or any of its enclosing types?\r", "-\t\t// we know its an implicit field/method access... see BlockScope getBinding/getImplicitMethod\r", "-\r", "-\t\tboolean staticsOnly = false;\r", "-\t\t// need to know if we're in a static context (or inside a constructor)\r", "-\t\tint lastPosition = -1;\r", "-\t\tint tokenLength = token.length;\r", "-\r", "-\t\tObjectVector localsFound = new ObjectVector();\r", "-\t\tObjectVector fieldsFound = new ObjectVector();\r", "-\t\tObjectVector methodsFound = new ObjectVector();\r", "-\t\t\r", "-\t\tScope currentScope = scope;\r", "-\t\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "-\t\t\tswitch (currentScope.kind) {\r", "-\t\t\t\tcase Scope.METHOD_SCOPE :\r", "-\t\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)\r", "-\t\t\t\t\tMethodScope methodScope = (MethodScope) currentScope;\r", "-\t\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;\r", "-\t\t\t\tcase Scope.BLOCK_SCOPE :\r", "-\t\t\t\t\tBlockScope blockScope = (BlockScope) currentScope;\r", "-\t\t\t\t\tnext : for (int i = 0, length = blockScope.locals.length; i < length; i++) {\r", "-\t\t\t\t\t\tLocalVariableBinding local = blockScope.locals[i];\r", "-\t\t\t\t\t\tif (local == null)\r", "-\t\t\t\t\t\t\tbreak next;\r", "-\t\t\t\t\t\tif (tokenLength > local.name.length)\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t\t\tif (!CharOperation.prefixEquals(token, local.name, false /* ignore case */\r", "-\t\t\t\t\t\t\t))\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t\t\tif (local.isSecret())\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\r", "-\t\t\t\t\t\tfor (int f = 0; f < localsFound.size; f++) {\r", "-\t\t\t\t\t\t\tLocalVariableBinding otherLocal =\r", "-\t\t\t\t\t\t\t\t(LocalVariableBinding) localsFound.elementAt(f);\r", "-\t\t\t\t\t\t\tif (CharOperation.equals(otherLocal.name, local.name, false /* ignore case */\r", "-\t\t\t\t\t\t\t\t))\r", "-\t\t\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tlocalsFound.add(local);\r", "-\r", "-\t\t\t\t\t\trequestor.acceptLocalVariable(\r", "-\t\t\t\t\t\t\tlocal.name,\r", "-\t\t\t\t\t\t\tNoChar,\r", "-\t\t\t\t\t\t\tlocal.type == null\r", "-\t\t\t\t\t\t\t\t? local.declaration.type.toString().toCharArray()\r", "-\t\t\t\t\t\t\t\t: local.type.qualifiedSourceName(),\r", "-\t\t\t\t\t\t\tlocal.modifiers,\r", "-\t\t\t\t\t\t\tstartPosition,\r", "-\t\t\t\t\t\t\tendPosition);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase Scope.CLASS_SCOPE :\r", "+\t\t\t\tClassScope classScope = (ClassScope) scope;\r", "+\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;\r", "+/*\t\t\t\tif (tokenLength == 0) { // only search inside the type itself if no prefix was provided\r", "+\t\t\t\t\tfindFields(token, enclosingType.fields(), classScope, fieldsFound, staticsOnly);\r", "+\t\t\t\t\tfindMethods(token, enclosingType.methods(), classScope, methodsFound, staticsOnly, false);\r", "-\t\t\t}\r", "-\t\t\tcurrentScope = currentScope.parent;\r", "-\t\t}\r", "-\t\t\r", "-\t\tcurrentScope = scope;\r", "-\t\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "-\t\t\tswitch (currentScope.kind) {\r", "-\t\t\t\tcase Scope.CLASS_SCOPE :\r", "-\t\t\t\t\tClassScope classScope = (ClassScope) currentScope;\r", "-\t\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;\r", "-\t\t\t\t\t/*\t\t\t\tif (tokenLength == 0) { // only search inside the type itself if no prefix was provided\r", "-\t\t\t\t\t\t\t\t\t\tfindFields(token, enclosingType.fields(), classScope, fieldsFound, staticsOnly);\r", "-\t\t\t\t\t\t\t\t\t\tfindMethods(token, enclosingType.methods(), classScope, methodsFound, staticsOnly, false);\r", "-\t\t\t\t\t\t\t\t\t\tbreak done;\r", "-\t\t\t\t\t\t\t\t\t} else { */\r", "-\t\t\t\t\tfindFields(\r", "-\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\tenclosingType,\r", "-\t\t\t\t\t\tclassScope,\r", "-\t\t\t\t\t\tfieldsFound,\r", "-\t\t\t\t\t\tlocalsFound,\r", "-\t\t\t\t\t\tstaticsOnly,\r", "-\t\t\t\t\t\tinvocationSite,\r", "-\t\t\t\t\t\tinvocationScope);\r", "-\t\t\t\t\tfindMethods(\r", "-\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\tnull,\r", "-\t\t\t\t\t\tenclosingType,\r", "-\t\t\t\t\t\tclassScope,\r", "-\t\t\t\t\t\tmethodsFound,\r", "-\t\t\t\t\t\tstaticsOnly,\r", "-\t\t\t\t\t\tfalse,\r", "-\t\t\t\t\t\tinvocationSite);\r", "+\t\t\t\t} else { */\r", "+\t\t\t\t\tfindFields(token, enclosingType, classScope, fieldsFound, staticsOnly);\r", "+\t\t\t\t\tfindMethods(token, null, enclosingType, classScope, methodsFound, staticsOnly, false);\r", "-\t\t\t\t\t//\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "-\t\t\t\t\tbreak done;\r", "-\t\t\t}\r", "-\t\t\tcurrentScope = currentScope.parent;\r", "+//\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "+\t\t\t\tbreak done;\r", "+\t\tscope = scope.parent;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edb7af341810b7bc0dbe5c36d66ea7f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "\r \tprivate void findVariablesAndMethods(\r \t\tchar[] token,\r \t\tScope scope,\r \t\tInvocationSite invocationSite,\r \t\tScope invocationScope)", "signatureAfterChange": "\r private void findVariablesAndMethods(char[] token, Scope scope)", "diff": ["+}\r", "+private void findVariablesAndMethods(char[] token, Scope scope) {\r", "+\tif (token == null) return;\r", "+\t// Should local variables hide fields from the receiver type or any of its enclosing types?\r", "+\t// we know its an implicit field/method access... see BlockScope getBinding/getImplicitMethod\r", "+\tboolean staticsOnly = false; // need to know if we're in a static context (or inside a constructor)\r", "+\tchar[][] found = null;\r", "+\tint lastPosition = -1;\r", "+\tint tokenLength = token.length;\r", "+\tObjectVector fieldsFound = new ObjectVector();\r", "+\tObjectVector methodsFound = new ObjectVector();\r", "+\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "+\t\tswitch (scope.kind) {\r", "+\t\t\tcase Scope.METHOD_SCOPE :\r", "+\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)\r", "+\t\t\t\tMethodScope methodScope = (MethodScope) scope;\r", "+\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;\r", "+\t\t\tcase Scope.BLOCK_SCOPE :\r", "+\t\t\t\tBlockScope blockScope = (BlockScope) scope;\r", "+\t\t\t\tnext : for (int i = 0, length = blockScope.locals.length; i < length; i++) {\r", "+\t\t\t\t\tLocalVariableBinding local = blockScope.locals[i];\r", "+\t\t\t\t\tif (local == null) break next;\r", "+\t\t\t\t\tif (tokenLength > local.name.length) continue next;\r", "+\t\t\t\t\tif (!CharOperation.prefixEquals(token, local.name, false /* ignore case */)) continue next;\r", "+\t\t\t\t\tif (local.isSecret()) continue next;\r", "+\t\t\t\t\tif (found == null) {\r", "+\t\t\t\t\t\tfound = new char[5][];\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tfor (int f = 0; f < found.length; f++) {\r", "+\t\t\t\t\t\t\tchar[] name = found[f];\r", "+\t\t\t\t\t\t\tif (name == null) break;\r", "+\t\t\t\t\t\t\tif (CharOperation.equals(name, local.name, false /* ignore case */)) continue next;\r", "+\t\t\t\t\tif (++lastPosition == found.length)\r", "+\t\t\t\t\t\tSystem.arraycopy(found, 0, found = new char[lastPosition * 2][], 0, lastPosition);\r", "+\t\t\t\t\tfound[lastPosition] = local.name;\r", "+\r", "+\t\t\t\t\trequestor.acceptLocalVariable(\r", "+\t\t\t\t\t\tlocal.name,\r", "+\t\t\t\t\t\tNoChar,\r", "+\t\t\t\t\t\tlocal.type == null ? local.declaration.type.toString().toCharArray() : local.type.qualifiedSourceName(),\r", "+\t\t\t\t\t\tlocal.modifiers,\r", "+\t\t\t\t\t\tstartPosition,\r", "+\t\t\t\t\t\tendPosition);\r", "-\t}\r", "-\tprivate void findVariablesAndMethods(\r", "-\t\tchar[] token,\r", "-\t\tScope scope,\r", "-\t\tInvocationSite invocationSite,\r", "-\t\tScope invocationScope) {\r", "-\t\tif (token == null)\r", "-\t\t\treturn;\r", "-\r", "-\t\t// Should local variables hide fields from the receiver type or any of its enclosing types?\r", "-\t\t// we know its an implicit field/method access... see BlockScope getBinding/getImplicitMethod\r", "-\r", "-\t\tboolean staticsOnly = false;\r", "-\t\t// need to know if we're in a static context (or inside a constructor)\r", "-\t\tint lastPosition = -1;\r", "-\t\tint tokenLength = token.length;\r", "-\r", "-\t\tObjectVector localsFound = new ObjectVector();\r", "-\t\tObjectVector fieldsFound = new ObjectVector();\r", "-\t\tObjectVector methodsFound = new ObjectVector();\r", "-\t\t\r", "-\t\tScope currentScope = scope;\r", "-\t\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "-\t\t\tswitch (currentScope.kind) {\r", "-\t\t\t\tcase Scope.METHOD_SCOPE :\r", "-\t\t\t\t\t// handle the error case inside an explicit constructor call (see MethodScope>>findField)\r", "-\t\t\t\t\tMethodScope methodScope = (MethodScope) currentScope;\r", "-\t\t\t\t\tstaticsOnly |= methodScope.isStatic | methodScope.isConstructorCall;\r", "-\t\t\t\tcase Scope.BLOCK_SCOPE :\r", "-\t\t\t\t\tBlockScope blockScope = (BlockScope) currentScope;\r", "-\t\t\t\t\tnext : for (int i = 0, length = blockScope.locals.length; i < length; i++) {\r", "-\t\t\t\t\t\tLocalVariableBinding local = blockScope.locals[i];\r", "-\t\t\t\t\t\tif (local == null)\r", "-\t\t\t\t\t\t\tbreak next;\r", "-\t\t\t\t\t\tif (tokenLength > local.name.length)\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t\t\tif (!CharOperation.prefixEquals(token, local.name, false /* ignore case */\r", "-\t\t\t\t\t\t\t))\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t\t\tif (local.isSecret())\r", "-\t\t\t\t\t\t\tcontinue next;\r", "-\r", "-\t\t\t\t\t\tfor (int f = 0; f < localsFound.size; f++) {\r", "-\t\t\t\t\t\t\tLocalVariableBinding otherLocal =\r", "-\t\t\t\t\t\t\t\t(LocalVariableBinding) localsFound.elementAt(f);\r", "-\t\t\t\t\t\t\tif (CharOperation.equals(otherLocal.name, local.name, false /* ignore case */\r", "-\t\t\t\t\t\t\t\t))\r", "-\t\t\t\t\t\t\t\tcontinue next;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tlocalsFound.add(local);\r", "-\r", "-\t\t\t\t\t\trequestor.acceptLocalVariable(\r", "-\t\t\t\t\t\t\tlocal.name,\r", "-\t\t\t\t\t\t\tNoChar,\r", "-\t\t\t\t\t\t\tlocal.type == null\r", "-\t\t\t\t\t\t\t\t? local.declaration.type.toString().toCharArray()\r", "-\t\t\t\t\t\t\t\t: local.type.qualifiedSourceName(),\r", "-\t\t\t\t\t\t\tlocal.modifiers,\r", "-\t\t\t\t\t\t\tstartPosition,\r", "-\t\t\t\t\t\t\tendPosition);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase Scope.CLASS_SCOPE :\r", "+\t\t\t\tClassScope classScope = (ClassScope) scope;\r", "+\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;\r", "+/*\t\t\t\tif (tokenLength == 0) { // only search inside the type itself if no prefix was provided\r", "+\t\t\t\t\tfindFields(token, enclosingType.fields(), classScope, fieldsFound, staticsOnly);\r", "+\t\t\t\t\tfindMethods(token, enclosingType.methods(), classScope, methodsFound, staticsOnly, false);\r", "-\t\t\t}\r", "-\t\t\tcurrentScope = currentScope.parent;\r", "-\t\t}\r", "-\t\t\r", "-\t\tcurrentScope = scope;\r", "-\t\tdone : while (true) { // done when a COMPILATION_UNIT_SCOPE is found\r", "-\t\t\tswitch (currentScope.kind) {\r", "-\t\t\t\tcase Scope.CLASS_SCOPE :\r", "-\t\t\t\t\tClassScope classScope = (ClassScope) currentScope;\r", "-\t\t\t\t\tSourceTypeBinding enclosingType = classScope.referenceContext.binding;\r", "-\t\t\t\t\t/*\t\t\t\tif (tokenLength == 0) { // only search inside the type itself if no prefix was provided\r", "-\t\t\t\t\t\t\t\t\t\tfindFields(token, enclosingType.fields(), classScope, fieldsFound, staticsOnly);\r", "-\t\t\t\t\t\t\t\t\t\tfindMethods(token, enclosingType.methods(), classScope, methodsFound, staticsOnly, false);\r", "-\t\t\t\t\t\t\t\t\t\tbreak done;\r", "-\t\t\t\t\t\t\t\t\t} else { */\r", "-\t\t\t\t\tfindFields(\r", "-\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\tenclosingType,\r", "-\t\t\t\t\t\tclassScope,\r", "-\t\t\t\t\t\tfieldsFound,\r", "-\t\t\t\t\t\tlocalsFound,\r", "-\t\t\t\t\t\tstaticsOnly,\r", "-\t\t\t\t\t\tinvocationSite,\r", "-\t\t\t\t\t\tinvocationScope);\r", "-\t\t\t\t\tfindMethods(\r", "-\t\t\t\t\t\ttoken,\r", "-\t\t\t\t\t\tnull,\r", "-\t\t\t\t\t\tenclosingType,\r", "-\t\t\t\t\t\tclassScope,\r", "-\t\t\t\t\t\tmethodsFound,\r", "-\t\t\t\t\t\tstaticsOnly,\r", "-\t\t\t\t\t\tfalse,\r", "-\t\t\t\t\t\tinvocationSite);\r", "+\t\t\t\t} else { */\r", "+\t\t\t\t\tfindFields(token, enclosingType, classScope, fieldsFound, staticsOnly);\r", "+\t\t\t\t\tfindMethods(token, null, enclosingType, classScope, methodsFound, staticsOnly, false);\r", "-\t\t\t\t\t//\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "-\t\t\t\t\tbreak done;\r", "-\t\t\t}\r", "-\t\t\tcurrentScope = currentScope.parent;\r", "+//\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "+\t\t\t\tbreak done;\r", "+\t\tscope = scope.parent;\r", "+}\r"]}], "num": 60072}
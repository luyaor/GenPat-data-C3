{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3914b0d6ecdb67f31402d5fcfe05f98", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90b72a6d5e2d027e3d17fe4f3f3a337c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKeyScanner.java", "commitBeforeChange": "ec6d7f365ea3ec3ffcd55d64775bd62b984807f3", "commitAfterChange": "c021c50efca4c234ec58241ed1fc82f6871e98bd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic String toString()", "signatureAfterChange": " \t \tpublic String toString()", "diff": ["-\t\t\tbuffer.append(CharOperation.subarray(this.source, this.start, this.index));", "-\t\t\tbuffer.append('#');", "-\t\t\tbuffer.append(CharOperation.subarray(this.source, this.index, this.source.length));", "+\t\t\tif (this.start <= this.index) {", "+\t\t\t\tbuffer.append(CharOperation.subarray(this.source, this.start, this.index));", "+\t\t\t\tbuffer.append('#');", "+\t\t\t\tbuffer.append(CharOperation.subarray(this.source, this.index, this.source.length));", "+\t\t\t} else {", "+\t\t\t\tbuffer.append('#');", "+\t\t\t\tbuffer.append(CharOperation.subarray(this.source, this.start, this.source.length));", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e695c48622b5bb4b74c8c62a6b0a1270", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchPattern.java", "commitBeforeChange": "fe01542fcd3aa3aadeb3ef9dbecdc34ba5993c8d", "commitAfterChange": "e89bfd441ddc86e7db4459ee29b0092f7959a77e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprotected StringBuffer print(StringBuffer output)", "signatureAfterChange": "  \tprotected StringBuffer print(StringBuffer output)", "diff": ["-\t\t\t\toutput.append(\"exact match,\"); //$NON-NLS-1$", "+\t\t\t\toutput.append(\"exact match, \"); //$NON-NLS-1$", "-\t\t\t\toutput.append(\"prefix match,\"); //$NON-NLS-1$", "+\t\t\t\toutput.append(\"prefix match, \"); //$NON-NLS-1$", "-\t\t\t\toutput.append(\"pattern match,\"); //$NON-NLS-1$", "+\t\t\t\toutput.append(\"pattern match, \"); //$NON-NLS-1$", "-\t\t\toutput.append(\" case sensitive\"); //$NON-NLS-1$", "+\t\t\toutput.append(\"case sensitive, \"); //$NON-NLS-1$", "-\t\t\toutput.append(\" case insensitive\"); //$NON-NLS-1$", "+\t\t\toutput.append(\"case insensitive, \"); //$NON-NLS-1$", "+\t\tif ((this.matchCompatibility & R_FULL_MATCH) != 0) {", "+\t\t\toutput.append(\"generic full match, \"); //$NON-NLS-1$", "+\t\t}", "-\t\t\toutput.append(\", erasure only\"); //$NON-NLS-1$", "+\t\t\toutput.append(\"generic erasure match, \"); //$NON-NLS-1$", "-\t\t\toutput.append(\", equivalent oronly\"); //$NON-NLS-1$", "+\t\t\toutput.append(\"generic equivalent match, \"); //$NON-NLS-1$", "+\t\toutput.append(\"fine grain: \"); //$NON-NLS-1$", "+\t\toutput.append(getFineGrainFlagString(this.fineGrain));"]}], "num": 65550}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b010bf84dec3d1b07f444b8b0781b436", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "835b12582a4fe06619afde7995f30a44", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/DocumentElementParser.java", "commitBeforeChange": "41616c6495c935b90356748e848cc3a6ffe7665e", "commitAfterChange": "285e33b7c5da84e3ca1755cdb83ba66c19c28c11", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " protected void pushOnIntArrayStack(int[] positions)", "signatureAfterChange": " protected void pushOnIntArrayStack(int[] positions)", "diff": ["-\ttry {", "-\t\tintArrayStack[++intArrayPtr] = positions;", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\t//intPtr is correct ", "-\t\tint oldStackLength = intArrayStack.length;", "-\t\tint oldStack[][] = intArrayStack;", "-\t\tintArrayStack = new int[oldStackLength + StackIncrement][];", "-\t\tSystem.arraycopy(oldStack, 0, intArrayStack, 0, oldStackLength);", "-\t\tintArrayStack[intArrayPtr] = positions;", "+\tint stackLength = this.intArrayStack.length;", "+\tif (++this.intArrayPtr >= stackLength) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.intArrayStack, 0,", "+\t\t\tthis.intArrayStack = new int[stackLength + StackIncrement][], 0,", "+\t\t\tstackLength);", "+\tintArrayStack[intArrayPtr] = positions;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9db44eb24ca5df661674ca2b2ff0ce47", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "41616c6495c935b90356748e848cc3a6ffe7665e", "commitAfterChange": "285e33b7c5da84e3ca1755cdb83ba66c19c28c11", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " protected void consumeOpenBlock()", "signatureAfterChange": " protected void consumeOpenBlock()", "diff": ["-\ttry {", "-\t\tblockStarts[realBlockPtr] = scanner.startPosition;", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\t//realBlockPtr is correct ", "-\t\tint oldStackLength = blockStarts.length;", "-\t\tint oldStack[] = blockStarts;", "-\t\tblockStarts = new int[oldStackLength + StackIncrement];", "-\t\tSystem.arraycopy(oldStack, 0, blockStarts, 0, oldStackLength);", "-\t\tblockStarts[realBlockPtr] = scanner.startPosition;", "+\tint stackLength = this.blockStarts.length;", "+\tif (this.realBlockPtr >= stackLength) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.blockStarts, 0,", "+\t\t\tthis.blockStarts = new int[stackLength + StackIncrement], 0,", "+\t\t\tstackLength);", "+\tthis.blockStarts[this.realBlockPtr] = scanner.startPosition;"]}], "num": 60624}
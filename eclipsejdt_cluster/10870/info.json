{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f843c2a1608fa827015680731a556905", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58a8815f240c5a6064d3e35401a9158d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "b7623aab0e9886a7a25d0a19dc7e767562770776", "commitAfterChange": "16235a49f7e72554ed72673f9307d24ed99fa4bf", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tprivate boolean complete( \t\t\tASTNode astNode, \t\t\tASTNode astNodeParent, \t\t\tASTNode enclosingNode, \t\t\tCompilationUnitDeclaration compilationUnitDeclaration, \t\t\tBinding qualifiedBinding, \t\t\tScope scope, \t\t\tboolean insideTypeAnnotation)", "signatureAfterChange": "  \tprivate boolean complete( \t\t\tASTNode astNode, \t\t\tASTNode astNodeParent, \t\t\tASTNode enclosingNode, \t\t\tCompilationUnitDeclaration compilationUnitDeclaration, \t\t\tBinding qualifiedBinding, \t\t\tScope scope, \t\t\tboolean insideTypeAnnotation)", "diff": ["+\t\t\t\tif (scope.parent.parent != null &&", "+\t\t\t\t\t\t!(scope.parent.parent instanceof MethodScope) &&", "+\t\t\t\t\t\t!fakeType.isParameter) {", "+\t\t\t\t\t", "+\t\t\t\t\tif (this.completionToken.length <= Keywords.INTERFACE.length", "+\t\t\t\t\t\t&& CharOperation.prefixEquals(this.completionToken, Keywords.INTERFACE, false /* ignore case */", "+\t\t\t\t\t)){", "+\t\t\t\t\t\tint relevance = computeBaseRelevance();", "+\t\t\t\t\t\trelevance += computeRelevanceForResolution();", "+\t\t\t\t\t\trelevance += computeRelevanceForInterestingProposal();", "+\t\t\t\t\t\trelevance += computeRelevanceForCaseMatching(this.completionToken, Keywords.INTERFACE);", "+\t\t\t\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for keywords", "+\t\t\t\t\t\trelevance += R_ANNOTATION; // this proposal is most relevant than annotation proposals", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tthis.noProposal = false;", "+\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.KEYWORD)) {", "+\t\t\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.KEYWORD, this.actualCompletionPosition);", "+\t\t\t\t\t\t\tproposal.setName(Keywords.INTERFACE);", "+\t\t\t\t\t\t\tproposal.setCompletion(Keywords.INTERFACE);", "+\t\t\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fd2b4f67c38bfa0410064b832861e28", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "81c62d5935a591fe4cf87abbebf09e04755572ce", "commitAfterChange": "18c9ee28439dc99049f5f8ecbf6109b62307dc52", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tprivate void resolveReference(Expression reference, Scope scope)", "signatureAfterChange": " \t \tprivate void resolveReference(Expression reference, Scope scope)", "diff": ["+\t\tint problemCount = scope.referenceContext().compilationResult().problemCount;", "+\t\tboolean hasProblems = scope.referenceContext().compilationResult().problemCount > problemCount;", "-\t\t\t// TODO (frederic) fix for bug 119857", "-\t\t\t/*", "-\t\t\tif (fieldRef.binding != null && fieldRef.binding.isValidBinding() && fieldRef.receiverType instanceof ReferenceBinding) {", "+\t\t\tif (!hasProblems && fieldRef.binding != null && fieldRef.binding.isValidBinding() && fieldRef.receiverType instanceof ReferenceBinding) {", "-\t\t\t\tverifyTypeReference(fieldRef.receiver, scope, source15, resolvedType);", "+\t\t\t\tverifyTypeReference(fieldRef, fieldRef.receiver, scope, source15, resolvedType, fieldRef.binding.modifiers);", "-\t\t\t*/", "-\t\tif ((reference instanceof JavadocSingleTypeReference || reference instanceof JavadocQualifiedTypeReference) && reference.resolvedType instanceof ReferenceBinding) {", "+\t\tif (!hasProblems && (reference instanceof JavadocSingleTypeReference || reference instanceof JavadocQualifiedTypeReference) && reference.resolvedType instanceof ReferenceBinding) {", "-\t\t\tverifyTypeReference(reference, scope, source15, resolvedType);", "+\t\t\tverifyTypeReference(reference, reference, scope, source15, resolvedType, resolvedType.modifiers);", "-\t\t\t// TODO (frederic) fix for bug 119857", "-\t\t\t/*", "-\t\t\tif (msgSend.binding != null && msgSend.binding.isValidBinding() && msgSend.actualReceiverType instanceof ReferenceBinding) {", "+\t\t\tif (!hasProblems && msgSend.binding != null && msgSend.binding.isValidBinding() && msgSend.actualReceiverType instanceof ReferenceBinding) {", "-\t\t\t\tverifyTypeReference(msgSend.receiver, scope, source15, resolvedType);", "+\t\t\t\tverifyTypeReference(msgSend, msgSend.receiver, scope, source15, resolvedType, msgSend.binding.modifiers);", "-\t\t\t*/", "-\t\t\t// TODO (frederic) fix for bug 119857", "-\t\t\t/*", "-\t\t\tif (alloc.binding != null && alloc.binding.isValidBinding() && alloc.resolvedType instanceof ReferenceBinding) {", "+\t\t\tif (!hasProblems && alloc.binding != null && alloc.binding.isValidBinding() && alloc.resolvedType instanceof ReferenceBinding) {", "-\t\t\t\tverifyTypeReference(alloc.type, scope, source15, resolvedType);", "+\t\t\t\tverifyTypeReference(alloc, alloc.type, scope, source15, resolvedType, alloc.binding.modifiers);", "-\t\t\t*/"]}], "num": 10870}
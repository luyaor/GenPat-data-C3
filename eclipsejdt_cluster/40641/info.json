{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5db962c054e3db5bda5cf81fb7abac99", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a23222303d4234c30083a3e432503675", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "3a032d6d22a45470265780981aec9b2bfbd82a52", "commitAfterChange": "2e01b16ee75f26ebc13d60c03a867e5a371ca085", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic IPackageFragment[] findPackageFragments(String name, boolean partialMatch, boolean patternMatch)", "signatureAfterChange": " \tpublic IPackageFragment[] findPackageFragments(String name, boolean partialMatch, boolean patternMatch)", "diff": ["-\t\tboolean hasPatternChars = patternMatch && (name.indexOf('*') >= 0 || name.indexOf('?') >= 0);", "+\t\tboolean isStarPattern = name.equals(\"*\"); //$NON-NLS-1$", "+\t\tboolean hasPatternChars = isStarPattern || (patternMatch && (name.indexOf('*') >= 0 || name.indexOf('?') >= 0));", "-\t\t\tchar[] lowercaseName = name.toLowerCase().toCharArray();", "+\t\t\tchar[] lowercaseName = hasPatternChars && !isStarPattern ? name.toLowerCase().toCharArray() : null;", "-\t\t\t\t\tboolean match = hasPatternChars", "+\t\t\t\t\tboolean match = isStarPattern || (hasPatternChars", "-\t\t\t\t\t\t: Util.startsWithIgnoreCase(pkgName, splittedName, partialMatch);", "+\t\t\t\t\t\t: Util.startsWithIgnoreCase(pkgName, splittedName, partialMatch));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a46d6aca2214b810e995884fad5159ca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/StringOperation.java", "commitBeforeChange": "0666f5b44c4a18481739142c89ae9cc59e7d64da", "commitAfterChange": "e7e612a728d1e340c20e61932ba2861b6752eb02", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static final int[] getPatternMatchingRegions( \tString pattern, \tint patternStart, \tint patternEnd, \tString name, \tint nameStart, \tint nameEnd, \tboolean isCaseSensitive)", "signatureAfterChange": " public static final int[] getPatternMatchingRegions( \tString pattern, \tint patternStart, \tint patternEnd, \tString name, \tint nameStart, \tint nameEnd, \tboolean isCaseSensitive)", "diff": ["-\t\t\tif (patternChar != (isCaseSensitive ? name.charAt(iName) : ScannerHelper.toLowerCase(name.charAt(iName)))) {", "+\t\t\tif (isCaseSensitive) {", "+\t\t\t\tif (patternChar != name.charAt(iName)) {", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t} else if (ScannerHelper.toLowerCase(patternChar) != ScannerHelper.toLowerCase(name.charAt(iName))) {", "-\t\t\tif ((isCaseSensitive ? name.charAt(iName) : ScannerHelper.toLowerCase(name.charAt(iName))) != patternChar) {", "+\t\t\tboolean mismatch;", "+\t\t\tif (isCaseSensitive) {", "+\t\t\t\tmismatch = name.charAt(iName) != patternChar;", "+\t\t\t} else {", "+\t\t\t\tmismatch = ScannerHelper.toLowerCase(name.charAt(iName)) != ScannerHelper.toLowerCase(patternChar);", "+\t\t\t}", "+\t\t\tif (mismatch) {"]}], "num": 40641}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "036b9090f595b944e938b977bc09c269", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "646e41d1f082565deb1e6b9016fa7620", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java", "commitBeforeChange": "7882956f959d3c6393e0d8829373f1d0522732ab", "commitAfterChange": "5147f5a5f17d6e4dce9e06801af75e51b27b5773", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public static void searchAllPossibleSubTypes( \tIType type, \tIJavaSearchScope scope, \tfinal Map binariesFromIndexMatches, \tfinal IPathRequestor pathRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)", "signatureAfterChange": " public static void searchAllPossibleSubTypes( \tIType type, \tIJavaSearchScope scope, \tfinal Map binariesFromIndexMatches, \tfinal IPathRequestor pathRequestor, \tint waitingPolicy, \tIProgressMonitor progressMonitor)", "diff": ["+\tint superRefKind;", "+\ttry {", "+\t\tsuperRefKind = type.isClass() ? SuperTypeReferencePattern.ONLY_SUPER_CLASSES : SuperTypeReferencePattern.ALL_SUPER_TYPES;", "+\t} catch (JavaModelException e) {", "+\t\tsuperRefKind = SuperTypeReferencePattern.ALL_SUPER_TYPES;", "+\t}", "-\t\tnew SuperTypeReferencePattern(null, null, false, SearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE);", "+\t\tnew SuperTypeReferencePattern(null, null, superRefKind, SearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3ef4961802332c9bd0d64b5f41cc232", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java", "commitBeforeChange": "f4bb90e126352ba58699dc135199884ab2b69a00", "commitAfterChange": "97903a14c53cc534c10e28f894e41633eed2dcf2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void acceptResult(CompilationResult result)", "signatureAfterChange": "  public void acceptResult(CompilationResult result)", "diff": ["-\t\t\t\t\tcreateProblemFor(compilationUnit.resource, Util.bind(\"build.duplicateClassFile\", new String(typeName)), JavaCore.ERROR); //$NON-NLS-1$", "+\t\t\t\t\tIType type = null;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\ttype = javaBuilder.javaProject.findType(qualifiedTypeName.replace('/', '.'));", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t// ignore", "+\t\t\t\t\t}", "+\t\t\t\t\tcreateProblemFor(compilationUnit.resource, type, Util.bind(\"build.duplicateClassFile\", new String(typeName)), JavaCore.ERROR); //$NON-NLS-1$", "-\t\t\t\t\tcreateProblemFor(compilationUnit.resource, Util.bind(\"build.classFileCollision\", e.getMessage()), JavaCore.ERROR); //$NON-NLS-1$", "+\t\t\t\t\tcreateProblemFor(compilationUnit.resource, null, Util.bind(\"build.classFileCollision\", e.getMessage()), JavaCore.ERROR); //$NON-NLS-1$", "-\t\t\t\t\tcreateProblemFor(compilationUnit.resource, Util.bind(\"build.inconsistentClassFile\"), JavaCore.ERROR); //$NON-NLS-1$", "+\t\t\t\t\tcreateProblemFor(compilationUnit.resource, null, Util.bind(\"build.inconsistentClassFile\"), JavaCore.ERROR); //$NON-NLS-1$"]}], "num": 21535}
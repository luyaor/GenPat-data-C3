{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fcdb86bdab38d4853f3169d84eb39da5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfc743d86ebdbccac9e77289bb5d64c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "ed1175e5f3196c1368a9a2b98678b1f4969f4620", "commitAfterChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void resolve(MethodScope methScope)", "signatureAfterChange": " \tpublic void resolve(MethodScope methScope)", "diff": ["-\t\tboolean override = (methDecl.binding.modifiers & (AccImplementing+AccOverriding)) != 0;", "+\t\tboolean overriding = methDecl == null ? false : (methDecl.binding.modifiers & (AccImplementing+AccOverriding)) != 0;", "-\t\tint seeTagsNbre = references == null ? 0 : references.length;", "+\t\tint seeTagsNbre = this.references == null ? 0 : this.references.length;", "-\t\t\treferences[i].resolveType(methScope);", "+\t\t\tthis.references[i].resolveType(methScope);", "-\t\t\t\tif ((methDecl.isConstructor() || override) && !superRef) {", "-\t\t\t\t\tif (references[i] instanceof JavadocMessageSend) {", "-\t\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) references[i];", "+\t\t\t\tif ((methDecl.isConstructor() || overriding) && !superRef) {", "+\t\t\t\t\tif (this.references[i] instanceof JavadocMessageSend) {", "+\t\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) this.references[i];", "-\t\t\t\t\telse if (references[i] instanceof JavadocAllocationExpression) {", "-\t\t\t\t\t\tJavadocAllocationExpression allocationExpr = (JavadocAllocationExpression) references[i];", "+\t\t\t\t\telse if (this.references[i] instanceof JavadocAllocationExpression) {", "+\t\t\t\t\t\tJavadocAllocationExpression allocationExpr = (JavadocAllocationExpression) this.references[i];", "-\t\tboolean reportMissing = !(superRef || (methDecl.binding.declaringClass != null && methDecl.binding.declaringClass.isLocalType()));", "+\t\tboolean reportMissing = methDecl == null || !(superRef || (methDecl.binding.declaringClass != null && methDecl.binding.declaringClass.isLocalType()));", "-\t\t\tif (reportMissing) {", "+\t\t\tif (reportMissing && methDecl != null) {", "-\t\t\t\t\t\tmethScope.problemReporter().javadocMissingReturnTag(meth.returnType.sourceStart, meth.returnType.sourceEnd);", "+\t\t\t\t\t\tmethScope.problemReporter().javadocMissingReturnTag(meth.returnType.sourceStart, meth.returnType.sourceEnd, methDecl.binding.modifiers);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff0b13c9c9d37cf94f3a30101cc0bdf4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java", "commitBeforeChange": "6defd2b79520062f5150164ded77c2d030acc168", "commitAfterChange": "d351702f3561d64a024c15ffbed0faad48ce2838", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void resolve(MethodScope methScope)", "signatureAfterChange": " \tpublic void resolve(MethodScope methScope)", "diff": ["-\t\tint seeTagsLength = this.references == null ? 0 : this.references.length;", "+\t\tint seeTagsLength = this.seeReferences == null ? 0 : this.seeReferences.length;", "-\t\t\tresolveReference(this.references[i], methScope);", "+\t\t\tresolveReference(this.seeReferences[i], methScope);", "-\t\t\t\t\tif (this.references[i] instanceof JavadocMessageSend) {", "-\t\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) this.references[i];", "+\t\t\t\t\tif (this.seeReferences[i] instanceof JavadocMessageSend) {", "+\t\t\t\t\t\tJavadocMessageSend messageSend = (JavadocMessageSend) this.seeReferences[i];", "-\t\t\t\t\telse if (this.references[i] instanceof JavadocAllocationExpression) {", "-\t\t\t\t\t\tJavadocAllocationExpression allocationExpr = (JavadocAllocationExpression) this.references[i];", "+\t\t\t\t\telse if (this.seeReferences[i] instanceof JavadocAllocationExpression) {", "+\t\t\t\t\t\tJavadocAllocationExpression allocationExpr = (JavadocAllocationExpression) this.seeReferences[i];", "+\t\tresolveTypeParameterTags(methScope, reportMissing);"]}], "num": 50203}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "11dba84a4f2bb28f020f6d9b2ce75372", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f267726b4e8aad06eea26362f3a0240", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchPattern.java", "commitBeforeChange": "0f549220f498cda7c86a65324f594a6b8e8c2616", "commitAfterChange": "17fcd420e0756889bcaffeff4cf983b2cff84a3e", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public boolean matchesName(char[] pattern, char[] name)", "signatureAfterChange": " public boolean matchesName(char[] pattern, char[] name)", "diff": ["+\t\tboolean sameLength = pattern.length == name.length;", "+\t\tboolean canBePrefix = name.length >= pattern.length;", "-\t\t\t\tif (isCamelCase) return false;", "-\t\t\t\treturn matchFirstChar && CharOperation.equals(pattern, name, isCaseSensitive);", "+\t\t\t\tif (!isCamelCase && sameLength && matchFirstChar) {", "+\t\t\t\t\treturn CharOperation.equals(pattern, name, isCaseSensitive);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "-\t\t\t\treturn matchFirstChar && CharOperation.prefixEquals(pattern, name, isCaseSensitive);", "+\t\t\t\tif (canBePrefix && matchFirstChar) {", "+\t\t\t\t\treturn CharOperation.prefixEquals(pattern, name, isCaseSensitive);", "+\t\t\t\t}", "+\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6dd4be0246ed322eee55715833c5eb00", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "bc36c6c80fea8051d7058a5b477375cffbc00908", "commitAfterChange": "6f60569d194de3bca836674a443f538feb4384aa", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "  \tprivate void findTypesAndSubpackages( \t\tchar[] token, \t\tPackageBinding packageBinding)", "signatureAfterChange": "  \tprivate void findTypesAndSubpackages( \t\tchar[] token, \t\tPackageBinding packageBinding)", "diff": ["+\t\tboolean proposeType = !this.requestor.isIgnored(CompletionProposal.TYPE_REF);", "+\t\t", "-\t\tif (this.unitScope != null) {", "+\t\tif (proposeType && this.unitScope != null) {", "-\t\tthis.nameEnvironment.findTypes(qualifiedName, this);", "-\t\tthis.nameEnvironment.findPackages(qualifiedName, this);", "+\t\tif(proposeType) {", "+\t\t\tthis.nameEnvironment.findTypes(qualifiedName, this);", "+\t\t}", "+\t\tif(!this.requestor.isIgnored(CompletionProposal.PACKAGE_REF)) {", "+\t\t\tthis.nameEnvironment.findPackages(qualifiedName, this);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8707c5128fd9347c5d7742dc494257af", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "bc36c6c80fea8051d7058a5b477375cffbc00908", "commitAfterChange": "6f60569d194de3bca836674a443f538feb4384aa", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tprivate void findFieldsAndMethods( \t\tchar[] token, \t\tTypeBinding receiverType, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "signatureAfterChange": "  \tprivate void findFieldsAndMethods( \t\tchar[] token, \t\tTypeBinding receiverType, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "diff": ["+\t\tboolean proposeField = !this.requestor.isIgnored(CompletionProposal.FIELD_REF);", "+\t\tboolean proposeMethod = !this.requestor.isIgnored(CompletionProposal.METHOD_REF);", "+\t\t", "-\t\t\tif (token.length <= lengthField.length", "+\t\t\tif (proposeField", "+\t\t\t\t&& token.length <= lengthField.length", "-\t\t\tif (token.length <= cloneMethod.length", "+\t\t\tif (proposeMethod", "+\t\t\t\t&& token.length <= cloneMethod.length", "-\t\tfindFields(", "-\t\t\ttoken,", "-\t\t\t(ReferenceBinding) receiverType,", "-\t\t\tscope,", "-\t\t\tnew ObjectVector(),", "-\t\t\tnew ObjectVector(),", "-\t\t\tfalse,", "-\t\t\tinvocationSite,", "-\t\t\tinvocationScope,", "-\t\t\timplicitCall,", "-\t\t\ttrue);", "+\t\tif(proposeField) {", "+\t\t\tfindFields(", "+\t\t\t\ttoken,", "+\t\t\t\t(ReferenceBinding) receiverType,", "+\t\t\t\tscope,", "+\t\t\t\tnew ObjectVector(),", "+\t\t\t\tnew ObjectVector(),", "+\t\t\t\tfalse,", "+\t\t\t\tinvocationSite,", "+\t\t\t\tinvocationScope,", "+\t\t\t\timplicitCall,", "+\t\t\t\ttrue);", "+\t\t}", "-\t\tfindMethods(", "-\t\t\ttoken,", "-\t\t\tnull,", "-\t\t\t(ReferenceBinding) receiverType,", "-\t\t\tscope,", "-\t\t\tmethodsFound,", "-\t\t\tfalse,", "-\t\t\tfalse,", "-\t\t\tfalse,", "-\t\t\tinvocationSite,", "-\t\t\tinvocationScope,", "-\t\t\timplicitCall,", "-\t\t\tsuperCall,", "-\t\t\ttrue);", "+\t\tif(proposeMethod) {", "+\t\t\tfindMethods(", "+\t\t\t\ttoken,", "+\t\t\t\tnull,", "+\t\t\t\t(ReferenceBinding) receiverType,", "+\t\t\t\tscope,", "+\t\t\t\tmethodsFound,", "+\t\t\t\tfalse,", "+\t\t\t\tfalse,", "+\t\t\t\tfalse,", "+\t\t\t\tinvocationSite,", "+\t\t\t\tinvocationScope,", "+\t\t\t\timplicitCall,", "+\t\t\t\tsuperCall,", "+\t\t\t\ttrue);", "+\t\t}"]}], "num": 57189}
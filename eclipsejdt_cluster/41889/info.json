{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec631a6efac3dcf7149d59e433dabb4b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37ea1e69968c4bfee933ee61b8e2e18d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "ac2c3539b72e65a4a4e0b168769da151e63c5ff1", "commitAfterChange": "014710437062a15282800b8efb747a8973068ba8", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " \t \tprivate void setJavaDocComment(BodyDeclaration bodyDeclaration)", "signatureAfterChange": "  \tpublic Javadoc convert(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc)", "diff": ["-\t", "-\t\tscanner.resetTo(bodyDeclaration.getStartPosition(), bodyDeclaration.getStartPosition() + bodyDeclaration.getLength());", "-\t\ttry {", "-\t\t\tint token;", "-\t\t\twhile ((token = scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_JAVADOC: //1003", "-\t\t\t\t\t\tJavadoc javadocComment = this.ast.newJavadoc();", "-\t\t\t\t\t\tint start = scanner.startPosition;", "-\t\t\t\t\t\tint length = scanner.currentPosition - start;", "-\t\t\t\t\t\tchar[] contents = new char[length];", "-\t\t\t\t\t\tSystem.arraycopy(this.compilationUnitSource, start, contents, 0, length);", "-\t\t\t\t\t\tsetDeprecatedComment(javadocComment, contents);", "-\t\t\t\t\t\tjavadocComment.setSourceRange(start, length);", "-\t\t\t\t\t\tbodyDeclaration.setJavadoc(javadocComment);", "-\t\t\t\t\t\treturn;", "-\t\t\t\t\tdefault :", "-\t\t\t\t\t\treturn;", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "+", "+\tpublic Javadoc convert(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc) {", "+\t\tif (javadoc != null) {", "+\t\t\tDefaultCommentMapper mapper = new DefaultCommentMapper(this.commentsTable);", "+\t\t\tComment comment = mapper.getComment(javadoc.sourceStart);", "+\t\t\tif (comment != null && comment.isDocComment()) {", "+\t\t\t\tJavadoc docComment = (Javadoc) comment;", "+\t\t\t\tif (this.resolveBindings) {", "+\t\t\t\t\trecordNodes(docComment, javadoc);", "+\t\t\t\t\t// resolve member and method references binding", "+\t\t\t\t\tIterator tags = docComment.tags().listIterator();", "+\t\t\t\t\twhile (tags.hasNext()) {", "+\t\t\t\t\t\tTagElement tagElement = (TagElement) tags.next();", "+\t\t\t\t\t\tIterator fragments = tagElement.fragments().listIterator();", "+\t\t\t\t\t\twhile (fragments.hasNext()) {", "+\t\t\t\t\t\t\tASTNode node = (ASTNode) fragments.next();", "+\t\t\t\t\t\t\tif (node.getNodeType() == ASTNode.MEMBER_REF) {", "+\t\t\t\t\t\t\t\tint start = node.getStartPosition();", "+\t\t\t\t\t\t\t\tName name = ((MemberRef)node).getName();", "+\t\t\t\t\t\t\t\tif (name != null) start = name.getStartPosition();", "+\t\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode = javadoc.getNodeStartingAt(start);", "+\t\t\t\t\t\t\t\tif (compilerNode != null) {", "+\t\t\t\t\t\t\t\t\trecordNodes(node, compilerNode);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (node.getNodeType() == ASTNode.METHOD_REF) {", "+\t\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode = javadoc.getNodeStartingAt(node.getStartPosition());", "+\t\t\t\t\t\t\t\tif (compilerNode != null) {", "+\t\t\t\t\t\t\t\t\trecordNodes(node, compilerNode);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (node.getNodeType() == ASTNode.TAG_ELEMENT) {", "+\t\t\t\t\t\t\t\t// resolve member and method references binding", "+\t\t\t\t\t\t\t\tTagElement inlineTag = (TagElement) node;", "+\t\t\t\t\t\t\t\tIterator inlineFragments = inlineTag.fragments().listIterator();", "+\t\t\t\t\t\t\t\twhile (inlineFragments.hasNext()) {", "+\t\t\t\t\t\t\t\t\tASTNode inlineNode = (ASTNode) inlineFragments.next();", "+\t\t\t\t\t\t\t\t\tif (inlineNode.getNodeType() == ASTNode.MEMBER_REF || inlineNode.getNodeType() == ASTNode.METHOD_REF) {", "+\t\t\t\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode = javadoc.getNodeStartingAt(inlineNode.getStartPosition());", "+\t\t\t\t\t\t\t\t\t\tif (compilerNode != null) {", "+\t\t\t\t\t\t\t\t\t\t\trecordNodes(inlineNode, compilerNode);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn docComment;", "+\t\t\t}", "+\t\t}", "+\t\treturn null;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a40929e0779dddd52c91c48c8b9ede41", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "507dcedd3a1fdac6fc22c9b1a4a0ec9c8798fdc1", "commitAfterChange": "d150c95a398a3e8cb83192b0abf48f6fefa4a7a3", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": "  \tpublic Javadoc convert(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc)", "signatureAfterChange": "  \tpublic Javadoc convert(org.eclipse.jdt.internal.compiler.ast.Javadoc javadoc)", "diff": ["-\t\t\t\t\t\tTagElement tagElement = (TagElement) tags.next();", "-\t\t\t\t\t\tIterator fragments = tagElement.fragments().listIterator();", "-\t\t\t\t\t\twhile (fragments.hasNext()) {", "-\t\t\t\t\t\t\tASTNode node = (ASTNode) fragments.next();", "-\t\t\t\t\t\t\tif (node.getNodeType() == ASTNode.MEMBER_REF) {", "-\t\t\t\t\t\t\t\tint start = node.getStartPosition();", "-\t\t\t\t\t\t\t\tName name = ((MemberRef)node).getName();", "-\t\t\t\t\t\t\t\tif (name != null) start = name.getStartPosition();", "-\t\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode = javadoc.getNodeStartingAt(start);", "-\t\t\t\t\t\t\t\tif (compilerNode != null) {", "-\t\t\t\t\t\t\t\t\trecordNodes(node, compilerNode);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else if (node.getNodeType() == ASTNode.METHOD_REF) {", "-\t\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode = javadoc.getNodeStartingAt(node.getStartPosition());", "-\t\t\t\t\t\t\t\tif (compilerNode != null) {", "-\t\t\t\t\t\t\t\t\trecordNodes(node, compilerNode);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else if (node.getNodeType() == ASTNode.TAG_ELEMENT) {", "-\t\t\t\t\t\t\t\t// resolve member and method references binding", "-\t\t\t\t\t\t\t\tTagElement inlineTag = (TagElement) node;", "-\t\t\t\t\t\t\t\tIterator inlineFragments = inlineTag.fragments().listIterator();", "-\t\t\t\t\t\t\t\twhile (inlineFragments.hasNext()) {", "-\t\t\t\t\t\t\t\t\tASTNode inlineNode = (ASTNode) inlineFragments.next();", "-\t\t\t\t\t\t\t\t\tif (inlineNode.getNodeType() == ASTNode.MEMBER_REF || inlineNode.getNodeType() == ASTNode.METHOD_REF) {", "-\t\t\t\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.ASTNode compilerNode = javadoc.getNodeStartingAt(inlineNode.getStartPosition());", "-\t\t\t\t\t\t\t\t\t\tif (compilerNode != null) {", "-\t\t\t\t\t\t\t\t\t\t\trecordNodes(inlineNode, compilerNode);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\trecordNodes(javadoc, (TagElement) tags.next());"]}], "num": 41889}
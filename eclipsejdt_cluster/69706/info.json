{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76eeb42994302b1a406297509619ea8b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "502b41978f6763534861bb5ba2e3a6cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "51ef1f3e636c416c08f983016f64f795f2b9cc74", "commitAfterChange": "9d3908e6916e224f861c3acffb456d39563ef22b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["+\tboolean receiverIsType = receiver instanceof NameReference && (((NameReference) receiver).bits & Binding.TYPE) != 0;", "-\t\tif (receiver instanceof NameReference ", "-\t\t\t\t&& (((NameReference) receiver).bits & Binding.TYPE) != 0) {", "+\t\tif (receiverIsType) {", "+\t\t\tif (this.actualReceiverType.isRawType() ", "+\t\t\t\t\t&& (this.receiver.bits & IgnoreRawTypeCheck) == 0 ", "+\t\t\t\t\t&& scope.compilerOptions().reportRawTypeReference) {", "+\t\t\t\tscope.problemReporter().rawTypeReference(this.receiver, this.actualReceiverType);", "+\t\t\t}", "-\t\tif (!(receiver.isImplicitThis()", "-\t\t\t\t|| receiver.isSuper()", "-\t\t\t\t|| (receiver instanceof NameReference ", "-\t\t\t\t\t&& (((NameReference) receiver).bits & Binding.TYPE) != 0))) {", "+\t\tif (!(receiver.isImplicitThis() || receiver.isSuper() || receiverIsType)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae985aa1060b4bd93aaab2ec7ca3dec8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "cc370a50ac7ec603f065f1e6278826253518f4d4", "commitAfterChange": "1ae189eb0affddcddb5cf43f9552f434a9d25d38", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (receiver instanceof NameReference) {", "-\t\t\tif ((((NameReference) receiver).bits & BindingIds.TYPE) != 0) {", "-\t\t\t\tscope.problemReporter().mustUseAStaticMethod(this, binding);", "-\t\t\t\treturn null;", "-\t\t\t}", "+\t\tif (receiver instanceof NameReference ", "+\t\t\t\t&& (((NameReference) receiver).bits & BindingIds.TYPE) != 0) {", "+\t\t\tscope.problemReporter().mustUseAStaticMethod(this, binding);", "+\t\t\treturn binding.returnType;", "+\t\t}", "+\t} else {", "+\t\t// static message invoked through receiver? legal but unoptimal (optional warning).", "+\t\tif (!(receiver == ThisReference.ThisImplicit", "+\t\t\t\t|| receiver.isSuper()", "+\t\t\t\t|| (receiver instanceof NameReference ", "+\t\t\t\t\t&& (((NameReference) receiver).bits & BindingIds.TYPE) != 0))) {", "+\t\t\tscope.problemReporter().unnecessaryReceiverForStaticMethod(this, binding);", "-\t\t\treturn null;", "+\t\t\treturn binding.returnType;"]}], "num": 69706}
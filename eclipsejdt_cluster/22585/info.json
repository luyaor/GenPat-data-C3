{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3e2bf1670d3804e9dc32455cd1b1c56", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0faa3b87b74375fc16b16721749db045", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchEngine.java", "commitBeforeChange": "41800ceef1e22df640004021a2ad024169ee7b90", "commitAfterChange": "1a73dcb985d562a276db9afb81d6d46ae1c7e093", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private IWorkingCopy[] filterWorkingCopies(IWorkingCopy[] workingCopies, IJavaElement focus, boolean isPolymorphicSearch)", "signatureAfterChange": " private IWorkingCopy[] filterWorkingCopies(IWorkingCopy[] copies, IJavaElement focus, boolean isPolymorphicSearch)", "diff": ["-private IWorkingCopy[] filterWorkingCopies(IWorkingCopy[] workingCopies, IJavaElement focus, boolean isPolymorphicSearch) {", "-\tif (focus == null || workingCopies == null) return workingCopies;", "+private IWorkingCopy[] filterWorkingCopies(IWorkingCopy[] copies, IJavaElement focus, boolean isPolymorphicSearch) {", "+\tif (focus == null || copies == null) return copies;", "-\tint length = workingCopies.length;", "+\tint length = copies.length;", "-\t\tIWorkingCopy workingCopy = workingCopies[i];", "+\t\tIWorkingCopy workingCopy = copies[i];", "-\t\t\t\tSystem.arraycopy(workingCopies, 0, result, 0, i);", "+\t\t\t\tSystem.arraycopy(copies, 0, result, 0, i);", "-\t\treturn workingCopies;", "+\t\treturn copies;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3521c13e0f6be8e1fa3397006ad7674", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "6b41f376eb5bd5fa3046b8ac6fedca194080b0bd", "commitAfterChange": "262490d9212f700275b0f63ee471ae3ff354e58f", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic void locateMatches( \t\tString[] filePaths,  \t\tIWorkspace workspace, \t\tIWorkingCopy[] workingCopies) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic void locateMatches( \t\tString[] filePaths,  \t\tIWorkspace workspace, \t\tIWorkingCopy[] copies) \t\tthrows JavaModelException", "diff": ["-\t\tIWorkingCopy[] workingCopies)", "+\t\tIWorkingCopy[] copies)", "-\t\t\tif (workingCopies != null) {", "+\t\t\tif (copies != null) {", "-\t\t\t\tfor (int i = 0, length = workingCopies.length; i < length; i++) {", "-\t\t\t\t\tIWorkingCopy wc = workingCopies[i];", "+\t\t\t\tfor (int i = 0, length = copies.length; i < length; i++) {", "+\t\t\t\t\tIWorkingCopy wc = copies[i];", "-\t\t\tthis.workingCopies = workingCopies;", "+\t\t\tthis.workingCopies = copies;", "-\t\t\tif (workingCopies != null && (wcLength = workingCopies.length) > 0) {", "+\t\t\tif (copies != null && (wcLength = copies.length) > 0) {", "-\t\t\t\t\tIWorkingCopy workingCopy = workingCopies[i];", "+\t\t\t\t\tIWorkingCopy workingCopy = copies[i];", "-\t\t\tthis.potentialMatches = new PotentialMatchSet();", "+\t\t\tthis.matchSet = new PotentialMatchSet();", "-\t\t\t\t\t\t\tthis.potentialMatches = new PotentialMatchSet();", "+\t\t\t\t\t\t\tthis.matchSet = new PotentialMatchSet();", "-\t\t\t\tthis.potentialMatches = new PotentialMatchSet();", "+\t\t\t\tthis.matchSet = new PotentialMatchSet();"]}], "num": 22585}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "784bc4157a858c3cf84fe9122ac30a85", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26849bb51aa682182edf5643c0ccb1de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/PatternLocator.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " int refineAccuracy(int accuracy, ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, boolean isPatternSourceType, int depth, MatchLocator locator)", "signatureAfterChange": " protected int refineAccuracy(int accuracy, ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, boolean patternHasTypeParameters, int depth, MatchLocator locator)", "diff": ["-int refineAccuracy(int accuracy, ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, boolean isPatternSourceType, int depth, MatchLocator locator) {", "+protected int refineAccuracy(int accuracy, ParameterizedTypeBinding parameterizedBinding, char[][][] patternTypeArguments, boolean patternHasTypeParameters, int depth, MatchLocator locator) {", "+\t// We can only refine if locator has an unit scope.", "+\tif (locator.unitScope == null) return accuracy;", "+", "+\t// Refine accuracy using binding and pattern arguments", "+\tchar[][] patternArguments = (patternTypeArguments==null) ? null : patternTypeArguments[depth];", "+\tint refinedAccuracy = refineAccuracy(accuracy, parameterizedBinding.arguments, locator, patternArguments, patternHasTypeParameters);", "+\tif (refinedAccuracy == SearchPattern.R_ERASURE_MATCH) {", "+\t\treturn SearchPattern.R_ERASURE_MATCH;", "+\t}", "+", "+\t// Recurse refining on enclosing types if any", "+\tTypeBinding enclosingType = parameterizedBinding.enclosingType();", "+\tif (enclosingType != null && (enclosingType.isParameterizedType() || enclosingType.isRawType())) {", "+\t\tif (patternTypeArguments == null || (depth+1)<patternTypeArguments.length) {", "+\t\t\treturn refineAccuracy(refinedAccuracy, (ParameterizedTypeBinding)enclosingType, patternTypeArguments, patternHasTypeParameters, depth+1, locator);", "+\t\t}", "+\t}", "+\t", "+\t// Refine the accuracy to accurate", "+\treturn refinedAccuracy;", "+}", "-\tint patternTypeArgsLength = (patternTypeArguments==null || depth>=patternTypeArguments.length || patternTypeArguments[depth] == null) ? 0 : patternTypeArguments[depth].length;", "-\tTypeBinding[] argumentsBinding = parameterizedBinding.arguments;", "-\t\t\tif (isPatternSourceType) { // raw source type pattern is always compatible erasure...", "-\t\t\tif (isPatternSourceType) {", "-\t\t\tif (patternTypeArguments == null || depth < patternTypeArguments.length) {", "-\t\t\t\t// if valid type arguments, then it is always compatible erasure except if accuracy has been already refined", "-\t\t\t\tif (refinedAccuracy <= SearchMatch.A_INACCURATE)", "-\t\t\t\t\trefinedAccuracy |= RAW_MASK;", "-//\tint refinedAccuracy = SearchMatch.A_ACCURATE;", "-\tif (!isPatternSourceType) {", "-\t\t\tchar[] patternTypeArgument = patternTypeArguments[depth][i];", "-\t// Recurse refining on enclosing types if any", "-\tTypeBinding enclosingType = parameterizedBinding.enclosingType();", "-\tif (enclosingType != null && (enclosingType.isParameterizedType() || enclosingType.isRawType())) {", "-\t\treturn refineAccuracy(refinedAccuracy, (ParameterizedTypeBinding)enclosingType, patternTypeArguments, isPatternSourceType, depth+1, locator);", "-\t}", "-\t", "-\t// Refine the accuracy to accurate"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f80e2c20a4966d370adcf27aeee0a4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "da3abb814c31b6e1c2d43312de494af316e19273", "commitAfterChange": "8af0e3d96f10bb27360a77bbd330487cf3fdc8dd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected boolean parseComment(int javadocStart, int javadocEnd)", "signatureAfterChange": " \tprotected boolean commentParse(int javadocStart, int javadocEnd)", "diff": ["-\tprotected boolean parseComment(int javadocStart, int javadocEnd) {", "+\tprotected boolean commentParse(int javadocStart, int javadocEnd) {", "-\t\t\t\t\t\tboolean valid = false;", "-\t\t\t\t\t\t// Start tag parsing only if we have a java identifier start character and if we are on line beginning or at inline tag beginning", "+\t\t\t\t\t\t// Start tag parsing only if we are on line beginning or at inline tag beginning", "-\t\t\t\t\t\t\t\tint token = readTokenAndConsume();", "-\t\t\t\t\t\t\t\tthis.tagSourceStart = this.scanner.getCurrentTokenStartPosition();", "-\t\t\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\t\t\t\t\tchar[] tag = this.scanner.getCurrentIdentifierSource(); // first token is either an identifier or a keyword", "-\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "-\t\t\t\t\t\t\t\t\t// For DOM parser, try to get tag name other than java identifier", "-\t\t\t\t\t\t\t\t\t// (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51660)", "-\t\t\t\t\t\t\t\t\tint tk = token;", "-\t\t\t\t\t\t\t\t\tint le = this.lineEnd;", "-\t\t\t\t\t\t\t\t\tchar pc = peekChar();", "-\t\t\t\t\t\t\t\t\ttagNameToken: while (tk != TerminalTokens.TokenNameEOF) {", "-\t\t\t\t\t\t\t\t\t\tthis.tagSourceEnd = this.scanner.getCurrentTokenEndPosition();", "-\t\t\t\t\t\t\t\t\t\ttoken = tk;", "-\t\t\t\t\t\t\t\t\t\t// !, \", #, %, &, ', -, :, <, >, * chars and spaces are not allowed in tag names", "-\t\t\t\t\t\t\t\t\t\tswitch (pc) {", "-\t\t\t\t\t\t\t\t\t\t\tcase '}':", "-\t\t\t\t\t\t\t\t\t\t\tcase '!':", "-\t\t\t\t\t\t\t\t\t\t\tcase '#':", "-\t\t\t\t\t\t\t\t\t\t\tcase '%':", "-\t\t\t\t\t\t\t\t\t\t\tcase '&':", "-\t\t\t\t\t\t\t\t\t\t\tcase '\\'':", "-\t\t\t\t\t\t\t\t\t\t\tcase ':':", "-\t\t\t\t\t\t\t\t\t\t\t// case '-': allowed in tag names as this character is often used in doclets (bug 68087)", "-\t\t\t\t\t\t\t\t\t\t\tcase '<':", "-\t\t\t\t\t\t\t\t\t\t\tcase '>':", "-\t\t\t\t\t\t\t\t\t\t\tcase '*': // break for '*' as this is perhaps the end of comment (bug 65288)", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak tagNameToken;", "-\t\t\t\t\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\t\t\t\t\tif (pc == ' ' || Character.isWhitespace(pc)) break tagNameToken;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\ttk = readTokenAndConsume();", "-\t\t\t\t\t\t\t\t\t\tpc = peekChar();", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tint length = this.tagSourceEnd-this.tagSourceStart+1;", "-\t\t\t\t\t\t\t\t\ttag = new char[length];", "-\t\t\t\t\t\t\t\t\tSystem.arraycopy(this.source, this.tagSourceStart, tag, 0, length);", "-\t\t\t\t\t\t\t\t\tthis.index = this.tagSourceEnd+1;", "-\t\t\t\t\t\t\t\t\tthis.scanner.currentPosition = this.tagSourceEnd+1;", "-\t\t\t\t\t\t\t\t\tthis.tagSourceStart = previousPosition;", "-\t\t\t\t\t\t\t\t\tthis.lineEnd = le;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tswitch (token) {", "-\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameIdentifier :", "-\t\t\t\t\t\t\t\t\t\tif (CharOperation.equals(tag, TAG_DEPRECATED)) {", "-\t\t\t\t\t\t\t\t\t\t\tthis.deprecated = true;", "-\t\t\t\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "-\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = true;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_INHERITDOC)) {", "-\t\t\t\t\t\t\t\t\t\t\t// inhibits inherited flag when tags have been already stored", "-\t\t\t\t\t\t\t\t\t\t\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=51606", "-\t\t\t\t\t\t\t\t\t\t\t// Note that for DOM_PARSER, nodes stack may be not empty even no '@' tag", "-\t\t\t\t\t\t\t\t\t\t\t// was encountered in comment. But it cannot be the case for COMPILER_PARSER", "-\t\t\t\t\t\t\t\t\t\t\t// and so is enough as it is only this parser which signals the missing tag warnings...", "-\t\t\t\t\t\t\t\t\t\t\tthis.inherited = this.astPtr==-1;", "-\t\t\t\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "-\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = true;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_PARAM)) {", "-\t\t\t\t\t\t\t\t\t\t\tvalid = parseParam();", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_EXCEPTION)) {", "-\t\t\t\t\t\t\t\t\t\t\tvalid = parseThrows(false);", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_SEE)) {", "-\t\t\t\t\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "-\t\t\t\t\t\t\t\t\t\t\t\t// Cannot have @see inside inline comment", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = false;", "-\t\t\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null)", "-\t\t\t\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "-\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee(false);", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_LINK)) {", "-\t\t\t\t\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee(false);", "-\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t// bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=53290", "-\t\t\t\t\t\t\t\t\t\t\t\t// Cannot have @link outside inline comment", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = false;", "-\t\t\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null)", "-\t\t\t\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocUnexpectedTag(this.tagSourceStart, this.tagSourceEnd);", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t} else if (CharOperation.equals(tag, TAG_LINKPLAIN)) {", "-\t\t\t\t\t\t\t\t\t\t\tif (this.inlineTagStarted) {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseSee(true);", "-\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamereturn :", "-\t\t\t\t\t\t\t\t\t\tvalid = parseReturn();", "-\t\t\t\t\t\t\t\t\t\t// verify characters after return tag (we're expecting text description)", "-\t\t\t\t\t\t\t\t\t\tif(!verifyCharsAfterReturnTag(this.index)) {", "-\t\t\t\t\t\t\t\t\t\t\tif (this.sourceParser != null) {", "-\t\t\t\t\t\t\t\t\t\t\t\tint end = this.starPosition == -1 || this.lineEnd<this.starPosition ? this.lineEnd : this.starPosition;", "-\t\t\t\t\t\t\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocEmptyReturnTag(this.tagSourceStart, end);", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamethrows :", "-\t\t\t\t\t\t\t\t\t\tvalid = parseThrows(true);", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\t\t\tif (this.kind == DOM_PARSER) {", "-\t\t\t\t\t\t\t\t\t\t\tswitch (token) {", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameabstract:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameassert:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameboolean:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamebreak:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamebyte:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamecase:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamecatch:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamechar:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameclass:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamecontinue:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamedefault:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamedo:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamedouble:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameelse:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameextends:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamefalse:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamefinal:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamefinally:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamefloat:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamefor:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameif:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameimplements:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameimport:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameinstanceof:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameint:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameinterface:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamelong:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamenative:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamenew:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamenull:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamepackage:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameprivate:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameprotected:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamepublic:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameshort:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamestatic:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamestrictfp:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamesuper:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNameswitch:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamesynchronized:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamethis:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamethrow:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNametransient:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNametrue:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNametry:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamevoid:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamevolatile:", "-\t\t\t\t\t\t\t\t\t\t\t\tcase TerminalTokens.TokenNamewhile:", "-\t\t\t\t\t\t\t\t\t\t\t\t\tvalid = parseTag();", "-\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tthis.textStart = this.index;", "-\t\t\t\t\t\t\t\tif (!valid) {", "+\t\t\t\t\t\t\t\tif (!parseTag(previousPosition)) {", "-\t\t\t\t\t\t\t\t\t\tparseTag();", "+\t\t\t\t\t\t\t\t\t\tcreateTag();"]}], "num": 809}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5bfde42fb2a5f68bbe8381d5c8af2cc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "170c88d1650ce8fd39eff60b7c942efb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/TestVerifier.java", "commitBeforeChange": "c543e3e3882451fde43cbe4b896f41a0fa7dc69f", "commitAfterChange": "f9060155e3cfd199faeec23a0a107fc22b1b0c9f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " private String getVerifyTestsCode()", "signatureAfterChange": " private String getVerifyTestsCode()", "diff": ["-\t\t\"/*******************************************************************************\" +", "-\t\t\" * Copyright (c) 2000, 2005 IBM Corporation and others.\" +", "-\t\t\" * All rights reserved. This program and the accompanying materials\" +", "-\t\t\" * are made available under the terms of the Eclipse Public License v1.0\" +", "-\t\t\" * which accompanies this distribution, and is available at\" +", "-\t\t\" * http://www.eclipse.org/legal/epl-v10.html\" +", "-\t\t\" *\" +", "-\t\t\" * Contributors:\" +", "-\t\t\" *     IBM Corporation - initial API and implementation\" +", "-\t\t\" *******************************************************************************/\" +", "-\t\t\"package org.eclipse.jdt.core.tests.util;\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"import java.lang.reflect.*;\\n\" +", "-\t\t\"import java.io.*;\\n\" +", "-\t\t\"import java.net.*;\\n\" +", "-\t\t\"import java.util.*;\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"/******************************************************\\n\" +", "-\t\t\" * \\n\" +", "-\t\t\" * IMPORTANT NOTE: If modifying this class, copy the source to TestVerifier#getVerifyTestsCode()\\n\" +", "-\t\t\" * (see this method for details)\\n\" +", "-\t\t\" * \\n\" +", "-\t\t\" ******************************************************/\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"public class VerifyTests {\\n\" +", "-\t\t\"\tint portNumber;\\n\" +", "-\t\t\"\tSocket socket;\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"/**\\n\" +", "-\t\t\" * NOTE: Code copied from junit.util.TestCaseClassLoader.\\n\" +", "-\t\t\" *\\n\" +", "-\t\t\" * A custom class loader which enables the reloading\\n\" +", "-\t\t\" * of classes for each test run. The class loader\\n\" +", "-\t\t\" * can be configured with a list of package paths that\\n\" +", "-\t\t\" * should be excluded from loading. The loading\\n\" +", "-\t\t\" * of these packages is delegated to the system class\\n\" +", "-\t\t\" * loader. They will be shared across test runs.\\n\" +", "-\t\t\" * <p>\\n\" +", "-\t\t\" * The list of excluded package paths is specified in\\n\" +", "-\t\t\" * a properties file \\\"excluded.properties\\\" that is located in \\n\" +", "-\t\t\" * the same place as the TestCaseClassLoader class.\\n\" +", "-\t\t\" * <p>\\n\" +", "-\t\t\" * <b>Known limitation:</b> the VerifyClassLoader cannot load classes\\n\" +", "-\t\t\" * from jar files.\\n\" +", "-\t\t\" */\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"public class VerifyClassLoader extends ClassLoader {\\n\" +", "-\t\t\"\t/** scanned class path */\\n\" +", "-\t\t\"\tprivate String[] fPathItems;\\n\" +", "-\t\t\"\t\\n\" +", "-\t\t\"\t/** excluded paths */\\n\" +", "-\t\t\"\tprivate String[] fExcluded= {};\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"\t/**\\n\" +", "-\t\t\"\t * Constructs a VerifyClassLoader. It scans the class path\\n\" +", "-\t\t\"\t * and the excluded package paths\\n\" +", "-\t\t\"\t */\\n\" +", "-\t\t\"\tpublic VerifyClassLoader() {\\n\" +", "-\t\t\"\t\tsuper();\\n\" +", "-\t\t\"\t\tString classPath= System.getProperty(\\\"java.class.path\\\");\\n\" +", "-\t\t\"\t\tString separator= System.getProperty(\\\"path.separator\\\");\\n\" +", "-\t\t\"\t\t\\n\" +", "-\t\t\"\t\t// first pass: count elements\\n\" +", "-\t\t\"\t\tStringTokenizer st= new StringTokenizer(classPath, separator);\\n\" +", "-\t\t\"\t\tint i= 0;\\n\" +", "-\t\t\"\t\twhile (st.hasMoreTokens()) {\\n\" +", "-\t\t\"\t\t\tst.nextToken();\\n\" +", "-\t\t\"\t\t\ti++;\\n\" +", "-\t\t\"\t\t}\\n\" +", "-\t\t\"\t\t// second pass: split\\n\" +", "-\t\t\"\t\tfPathItems= new String[i];\\n\" +", "-\t\t\"\t\tst= new StringTokenizer(classPath, separator);\\n\" +", "-\t\t\"\t\ti= 0;\\n\" +", "-\t\t\"\t\twhile (st.hasMoreTokens()) {\\n\" +", "-\t\t\"\t\t\tfPathItems[i++]= st.nextToken();\\n\" +", "-\t\t\"\t\t}\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"\t}\\n\" +", "-\t\t\"\tpublic java.net.URL getResource(String name) {\\n\" +", "-\t\t\"\t\treturn ClassLoader.getSystemResource(name);\\n\" +", "-\t\t\"\t}\\n\" +", "-\t\t\"\tpublic InputStream getResourceAsStream(String name) {\\n\" +", "-\t\t\"\t\treturn ClassLoader.getSystemResourceAsStream(name);\\n\" +", "-\t\t\"\t}\\n\" +", "-\t\t\"\tprotected boolean isExcluded(String name) {\\n\" +", "-\t\t\"\t\t// exclude the \\\"java\\\" packages.\\n\" +", "-\t\t\"\t\t// They always need to be excluded so that they are loaded by the system class loader\\n\" +", "-\t\t\"\t\tif (name.startsWith(\\\"java\\\"))\\n\" +", "-\t\t\"\t\t\treturn true;\\n\" +", "-\t\t\"\t\t\t\\n\" +", "-\t\t\"\t\t// exclude the user defined package paths\\n\" +", "-\t\t\"\t\tfor (int i= 0; i < fExcluded.length; i++) {\\n\" +", "-\t\t\"\t\t\tif (name.startsWith(fExcluded[i])) {\\n\" +", "-\t\t\"\t\t\t\treturn true;\\n\" +", "-\t\t\"\t\t\t}\\n\" +", "-\t\t\"\t\t}\\n\" +", "-\t\t\"\t\treturn false;\t\\n\" +", "-\t\t\"\t}\\n\" +", "-\t\t\"\tpublic synchronized Class loadClass(String name, boolean resolve)\\n\" +", "-\t\t\"\t\tthrows ClassNotFoundException {\\n\" +", "-\t\t\"\t\t\t\\n\" +", "-\t\t\"\t\tClass c= findLoadedClass(name);\\n\" +", "-\t\t\"\t\tif (c != null)\\n\" +", "-\t\t\"\t\t\treturn c;\\n\" +", "-\t\t\"\t\t//\\n\" +", "-\t\t\"\t\t// Delegate the loading of excluded classes to the\\n\" +", "-\t\t\"\t\t// standard class loader.\\n\" +", "-\t\t\"\t\t//\\n\" +", "-\t\t\"\t\tif (isExcluded(name)) {\\n\" +", "-\t\t\"\t\t\ttry {\\n\" +", "-\t\t\"\t\t\t\tc= findSystemClass(name);\\n\" +", "-\t\t\"\t\t\t\treturn c;\\n\" +", "-\t\t\"\t\t\t} catch (ClassNotFoundException e) {\\n\" +", "-\t\t\"\t\t\t\t// keep searching\\n\" +", "-\t\t\"\t\t\t}\\n\" +", "-\t\t\"\t\t}\\n\" +", "-\t\t\"\t\tFile file= locate(name);\\n\" +", "-\t\t\"\t\tif (file == null)\\n\" +", "-\t\t\"\t\t\tthrow new ClassNotFoundException();\\n\" +", "-\t\t\"\t\tbyte data[]= loadClassData(file);\\n\" +", "-\t\t\"\t\tc= defineClass(name, data, 0, data.length);\\n\" +", "-\t\t\"\t\tif (resolve) \\n\" +", "-\t\t\"\t\t\tresolveClass(c);\\n\" +", "-\t\t\"\t\treturn c;\\n\" +", "-\t\t\"\t}\\n\" +", "-\t\t\"\tprivate byte[] loadClassData(File f) throws ClassNotFoundException {\\n\" +", "-\t\t\"\t\ttry {\\n\" +", "-\t\t\"\t\t\t//System.out.println(\\\"loading: \\\"+f.getPath());\\n\" +", "-\t\t\"\t\t\tFileInputStream stream= new FileInputStream(f);\\n\" +", "-\t\t\"\t\t\t\\n\" +", "-\t\t\"\t\t\ttry {\\n\" +", "-\t\t\"\t\t\t\tbyte[] b= new byte[stream.available()];\\n\" +", "-\t\t\"\t\t\t\tstream.read(b);\\n\" +", "-\t\t\"\t\t\t\tstream.close();\\n\" +", "-\t\t\"\t\t\t\treturn b;\\n\" +", "-\t\t\"\t\t\t}\\n\" +", "-\t\t\"\t\t\tcatch (IOException e) {\\n\" +", "-\t\t\"\t\t\t\tthrow new ClassNotFoundException();\\n\" +", "-\t\t\"\t\t\t}\\n\" +", "-\t\t\"\t\t}\\n\" +", "-\t\t\"\t\tcatch (FileNotFoundException e) {\\n\" +", "-\t\t\"\t\t\tthrow new ClassNotFoundException();\\n\" +", "-\t\t\"\t\t}\\n\" +", "-\t\t\"\t}\\n\" +", "-\t\t\"\t/**\\n\" +", "-\t\t\"\t * Locate the given file.\\n\" +", "-\t\t\"\t * @return Returns null if file couldn\\'t be found.\\n\" +", "-\t\t\"\t */\\n\" +", "-\t\t\"\tprivate File locate(String fileName) { \\n\" +", "-\t\t\"\t\tif (fileName != null) {\\n\" +", "-\t\t\"\t\t  fileName= fileName.replace(\\'.\\', \\'/\\')+\\\".class\\\";\\n\" +", "-\t\t\"\t\t  File path= null;\\n\" +", "-\t\t\"\t\t\tfor (int i= 0; i < fPathItems.length; i++) {\\n\" +", "-\t\t\"\t\t\t\tpath= new File(fPathItems[i], fileName);\\n\" +", "-\t\t\"\t\t\t\tif (path.exists())\\n\" +", "-\t\t\"\t\t\t\t\treturn path;\\n\" +", "-\t\t\"\t\t\t}\\n\" +", "-\t\t\"\t\t}\\n\" +", "-\t\t\"\t\treturn null;\\n\" +", "-\t\t\"\t}\\n\" +", "-\t\t\"}\\n\" +", "-\t\t\"\t\\n\" +", "-\t\t\"public void loadAndRun(String className) throws Throwable {\\n\" +", "-\t\t\"\t//System.out.println(\\\"Loading \\\" + className + \\\"...\\\");\\n\" +", "-\t\t\"\tClass testClass = new VerifyClassLoader().loadClass(className);\\n\" +", "-\t\t\"\t//System.out.println(\\\"Loaded \\\" + className);\\n\" +", "-\t\t\"\ttry {\\n\" +", "-\t\t\"\t\tMethod main = testClass.getMethod(\\\"main\\\", new Class[] {String[].class});\\n\" +", "-\t\t\"\t\t//System.out.println(\\\"Running \\\" + className);\\n\" +", "-\t\t\"\t\tmain.invoke(null, new Object[] {new String[] {}});\\n\" +", "-\t\t\"\t\t//System.out.println(\\\"Finished running \\\" + className);\\n\" +", "-\t\t\"\t} catch (NoSuchMethodException e) {\\n\" +", "-\t\t\"\t\treturn;\\n\" +", "-\t\t\"\t} catch (InvocationTargetException e) {\\n\" +", "-\t\t\"\t\tthrow e.getTargetException();\\n\" +", "-\t\t\"\t}\\n\" +", "-\t\t\"}\\n\" +", "-\t\t\"public static void main(String[] args) throws IOException {\\n\" +", "-\t\t\"\tVerifyTests verify = new VerifyTests();\\n\" +", "-\t\t\"\tverify.portNumber = Integer.parseInt(args[0]);\\n\" +", "-\t\t\"\tverify.run();\\n\" +", "-\t\t\"}\\n\" +", "-\t\t\"public void run() throws IOException {\\n\" +", "-\t\t\"\tServerSocket server = new ServerSocket(this.portNumber);\\n\" +", "-\t\t\"\tthis.socket = server.accept();\\n\" +", "-\t\t\"\tthis.socket.setTcpNoDelay(true);\\n\" +", "-\t\t\"\tserver.close();\\n\" +", "-\t\t\"\\n\" +", "-\t\t\"\tfinal DataInputStream in = new DataInputStream(this.socket.getInputStream());\\n\" +", "-\t\t\"\tfinal DataOutputStream out = new DataOutputStream(this.socket.getOutputStream());\\n\" +", "-\t\t\"\twhile (true) {\\n\" +", "-\t\t\"\t\tfinal String className = in.readUTF();\\n\" +", "-\t\t\"\t\tThread thread = new Thread() {\\n\" +", "-\t\t\"\t\t\tpublic void run() {\\n\" +", "-\t\t\"\t\t\t\ttry {\\n\" +", "-\t\t\"\t\t\t\t\tloadAndRun(className);\\n\" +", "-\t\t\"\t\t\t\t\tout.writeBoolean(true);\\n\" +", "-\t\t\"\t\t\t\t\tSystem.err.println(VerifyTests.class.getName());\\n\" +", "-\t\t\"\t\t\t\t\tSystem.out.println(VerifyTests.class.getName());\\n\" +", "-\t\t\"\t\t\t\t} catch (Throwable e) {\\n\" +", "-\t\t\"\t\t\t\t\te.printStackTrace();\\n\" +", "-\t\t\"\t\t\t\t\ttry {\\n\" +", "-\t\t\"\t\t\t\t\t\tSystem.err.println(VerifyTests.class.getName());\\n\" +", "-\t\t\"\t\t\t\t\t\tSystem.out.println(VerifyTests.class.getName());\\n\" +", "-\t\t\"\t\t\t\t\t\tout.writeBoolean(false);\\n\" +", "-\t\t\"\t\t\t\t\t} catch (IOException e1) {\\n\" +", "-\t\t\"\t\t\t\t\t\t// ignore\\n\" +", "-\t\t\"\t\t\t\t\t}\\n\" +", "-\t\t\"\t\t\t\t}\\n\" +", "-\t\t\"\t\t\t}\\n\" +", "-\t\t\"\t\t};\\n\" +", "-\t\t\"\t\tthread.start();\\n\" +", "-\t\t\"\t}\\n\" +", "-\t\t\"}\\n\" +", "-\t\t\"}\\n\";", "+\t\t\"/*******************************************************************************\\n\" + ", "+\t\t\" * Copyright (c) 2000, 2011 IBM Corporation and others.\\n\" + ", "+\t\t\" * All rights reserved. This program and the accompanying materials\\n\" + ", "+\t\t\" * are made available under the terms of the Eclipse Public License v1.0\\n\" + ", "+\t\t\" * which accompanies this distribution, and is available at\\n\" + ", "+\t\t\" * http://www.eclipse.org/legal/epl-v10.html\\n\" + ", "+\t\t\" *\\n\" + ", "+\t\t\" * Contributors:\\n\" + ", "+\t\t\" *     IBM Corporation - initial API and implementation\\n\" + ", "+\t\t\" *******************************************************************************/\\n\" + ", "+\t\t\"package org.eclipse.jdt.core.tests.util;\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"import java.io.DataInputStream;\\n\" + ", "+\t\t\"import java.io.DataOutputStream;\\n\" + ", "+\t\t\"import java.io.File;\\n\" + ", "+\t\t\"import java.io.FileInputStream;\\n\" + ", "+\t\t\"import java.io.FileNotFoundException;\\n\" + ", "+\t\t\"import java.io.IOException;\\n\" + ", "+\t\t\"import java.io.InputStream;\\n\" + ", "+\t\t\"import java.lang.reflect.InvocationTargetException;\\n\" + ", "+\t\t\"import java.lang.reflect.Method;\\n\" + ", "+\t\t\"import java.net.ServerSocket;\\n\" + ", "+\t\t\"import java.net.Socket;\\n\" + ", "+\t\t\"import java.util.StringTokenizer;\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"/******************************************************\\n\" + ", "+\t\t\" *\\n\" + ", "+\t\t\" * IMPORTANT NOTE: If modifying this class, copy the source to TestVerifier#getVerifyTestsCode()\\n\" + ", "+\t\t\" * (see this method for details)\\n\" + ", "+\t\t\" *\\n\" + ", "+\t\t\" ******************************************************/\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"public class VerifyTests {\\n\" + ", "+\t\t\"\tint portNumber;\\n\" + ", "+\t\t\"\tSocket socket;\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"/**\\n\" + ", "+\t\t\" * NOTE: Code copied from junit.util.TestCaseClassLoader.\\n\" + ", "+\t\t\" *\\n\" + ", "+\t\t\" * A custom class loader which enables the reloading\\n\" + ", "+\t\t\" * of classes for each test run. The class loader\\n\" + ", "+\t\t\" * can be configured with a list of package paths that\\n\" + ", "+\t\t\" * should be excluded from loading. The loading\\n\" + ", "+\t\t\" * of these packages is delegated to the system class\\n\" + ", "+\t\t\" * loader. They will be shared across test runs.\\n\" + ", "+\t\t\" * <p>\\n\" + ", "+\t\t\" * The list of excluded package paths is specified in\\n\" + ", "+\t\t\" * a properties file \\\"excluded.properties\\\" that is located in\\n\" + ", "+\t\t\" * the same place as the TestCaseClassLoader class.\\n\" + ", "+\t\t\" * <p>\\n\" + ", "+\t\t\" * <b>Known limitation:</b> the VerifyClassLoader cannot load classes\\n\" + ", "+\t\t\" * from jar files.\\n\" + ", "+\t\t\" */\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"public class VerifyClassLoader extends ClassLoader {\\n\" + ", "+\t\t\"\t/** scanned class path */\\n\" + ", "+\t\t\"\tprivate String[] pathItems;\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"\t/** excluded paths */\\n\" + ", "+\t\t\"\tprivate String[] excluded= {};\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"\t/**\\n\" + ", "+\t\t\"\t * Constructs a VerifyClassLoader. It scans the class path\\n\" + ", "+\t\t\"\t * and the excluded package paths\\n\" + ", "+\t\t\"\t */\\n\" + ", "+\t\t\"\tpublic VerifyClassLoader() {\\n\" + ", "+\t\t\"\t\tsuper();\\n\" + ", "+\t\t\"\t\tString classPath= System.getProperty(\\\"java.class.path\\\");\\n\" + ", "+\t\t\"\t\tString separator= System.getProperty(\\\"path.separator\\\");\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"\t\t// first pass: count elements\\n\" + ", "+\t\t\"\t\tStringTokenizer st= new StringTokenizer(classPath, separator);\\n\" + ", "+\t\t\"\t\tint i= 0;\\n\" + ", "+\t\t\"\t\twhile (st.hasMoreTokens()) {\\n\" + ", "+\t\t\"\t\t\tst.nextToken();\\n\" + ", "+\t\t\"\t\t\ti++;\\n\" + ", "+\t\t\"\t\t}\\n\" + ", "+\t\t\"\t\t// second pass: split\\n\" + ", "+\t\t\"\t\tthis.pathItems= new String[i];\\n\" + ", "+\t\t\"\t\tst= new StringTokenizer(classPath, separator);\\n\" + ", "+\t\t\"\t\ti= 0;\\n\" + ", "+\t\t\"\t\twhile (st.hasMoreTokens()) {\\n\" + ", "+\t\t\"\t\t\tthis.pathItems[i++]= st.nextToken();\\n\" + ", "+\t\t\"\t\t}\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"\tpublic java.net.URL getResource(String name) {\\n\" + ", "+\t\t\"\t\treturn ClassLoader.getSystemResource(name);\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"\tpublic InputStream getResourceAsStream(String name) {\\n\" + ", "+\t\t\"\t\treturn ClassLoader.getSystemResourceAsStream(name);\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"\tprotected boolean isExcluded(String name) {\\n\" + ", "+\t\t\"\t\t// exclude the \\\"java\\\" packages.\\n\" + ", "+\t\t\"\t\t// They always need to be excluded so that they are loaded by the system class loader\\n\" + ", "+\t\t\"\t\tif (name.startsWith(\\\"java\\\"))\\n\" + ", "+\t\t\"\t\t\treturn true;\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"\t\t// exclude the user defined package paths\\n\" + ", "+\t\t\"\t\tfor (int i= 0; i < this.excluded.length; i++) {\\n\" + ", "+\t\t\"\t\t\tif (name.startsWith(this.excluded[i])) {\\n\" + ", "+\t\t\"\t\t\t\treturn true;\\n\" + ", "+\t\t\"\t\t\t}\\n\" + ", "+\t\t\"\t\t}\\n\" + ", "+\t\t\"\t\treturn false;\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"\tpublic synchronized Class loadClass(String name, boolean resolve)\\n\" + ", "+\t\t\"\t\tthrows ClassNotFoundException {\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"\t\tClass c= findLoadedClass(name);\\n\" + ", "+\t\t\"\t\tif (c != null)\\n\" + ", "+\t\t\"\t\t\treturn c;\\n\" + ", "+\t\t\"\t\t//\\n\" + ", "+\t\t\"\t\t// Delegate the loading of excluded classes to the\\n\" + ", "+\t\t\"\t\t// standard class loader.\\n\" + ", "+\t\t\"\t\t//\\n\" + ", "+\t\t\"\t\tif (isExcluded(name)) {\\n\" + ", "+\t\t\"\t\t\ttry {\\n\" + ", "+\t\t\"\t\t\t\tc= findSystemClass(name);\\n\" + ", "+\t\t\"\t\t\t\treturn c;\\n\" + ", "+\t\t\"\t\t\t} catch (ClassNotFoundException e) {\\n\" + ", "+\t\t\"\t\t\t\t// keep searching\\n\" + ", "+\t\t\"\t\t\t}\\n\" + ", "+\t\t\"\t\t}\\n\" + ", "+\t\t\"\t\tFile file= locate(name);\\n\" + ", "+\t\t\"\t\tif (file == null)\\n\" + ", "+\t\t\"\t\t\tthrow new ClassNotFoundException();\\n\" + ", "+\t\t\"\t\tbyte data[]= loadClassData(file);\\n\" + ", "+\t\t\"\t\tc= defineClass(name, data, 0, data.length);\\n\" + ", "+\t\t\"\t\tif (resolve)\\n\" + ", "+\t\t\"\t\t\tresolveClass(c);\\n\" + ", "+\t\t\"\t\treturn c;\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"\tprivate byte[] loadClassData(File f) throws ClassNotFoundException {\\n\" + ", "+\t\t\"\t\tFileInputStream stream = null;\\n\" + ", "+\t\t\"\t\ttry {\\n\" + ", "+\t\t\"\t\t\t//System.out.println(\\\"loading: \\\"+f.getPath());\\n\" + ", "+\t\t\"\t\t\tstream = new FileInputStream(f);\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"\t\t\ttry {\\n\" + ", "+\t\t\"\t\t\t\tbyte[] b= new byte[stream.available()];\\n\" + ", "+\t\t\"\t\t\t\tstream.read(b);\\n\" + ", "+\t\t\"\t\t\t\treturn b;\\n\" + ", "+\t\t\"\t\t\t}\\n\" + ", "+\t\t\"\t\t\tcatch (IOException e) {\\n\" + ", "+\t\t\"\t\t\t\tthrow new ClassNotFoundException();\\n\" + ", "+\t\t\"\t\t\t}\\n\" + ", "+\t\t\"\t\t}\\n\" + ", "+\t\t\"\t\tcatch (FileNotFoundException e) {\\n\" + ", "+\t\t\"\t\t\tthrow new ClassNotFoundException();\\n\" + ", "+\t\t\"\t\t} finally {\\n\" + ", "+\t\t\"\t\t\tif (stream != null) {\\n\" + ", "+\t\t\"\t\t\t\ttry {\\n\" + ", "+\t\t\"\t\t\t\t\tstream.close();\\n\" + ", "+\t\t\"\t\t\t\t} catch (IOException e) {\\n\" + ", "+\t\t\"\t\t\t\t\t/* ignore */\\n\" + ", "+\t\t\"\t\t\t\t}\\n\" + ", "+\t\t\"\t\t\t}\\n\" + ", "+\t\t\"\t\t}\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"\t/**\\n\" + ", "+\t\t\"\t * Locate the given file.\\n\" + ", "+\t\t\"\t * @return Returns null if file couldn't be found.\\n\" + ", "+\t\t\"\t */\\n\" + ", "+\t\t\"\tprivate File locate(String fileName) {\\n\" + ", "+\t\t\"\t\tif (fileName != null) {\\n\" + ", "+\t\t\"\t\t\tfileName= fileName.replace('.', '/')+\\\".class\\\";\\n\" + ", "+\t\t\"\t\t\tFile path= null;\\n\" + ", "+\t\t\"\t\t\tfor (int i= 0; i < this.pathItems.length; i++) {\\n\" + ", "+\t\t\"\t\t\t\tpath= new File(this.pathItems[i], fileName);\\n\" + ", "+\t\t\"\t\t\t\tif (path.exists())\\n\" + ", "+\t\t\"\t\t\t\t\treturn path;\\n\" + ", "+\t\t\"\t\t\t}\\n\" + ", "+\t\t\"\t\t}\\n\" + ", "+\t\t\"\t\treturn null;\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"}\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"public void loadAndRun(String className) throws Throwable {\\n\" + ", "+\t\t\"\t//System.out.println(\\\"Loading \\\" + className + \\\"...\\\");\\n\" + ", "+\t\t\"\tClass testClass = new VerifyClassLoader().loadClass(className);\\n\" + ", "+\t\t\"\t//System.out.println(\\\"Loaded \\\" + className);\\n\" + ", "+\t\t\"\ttry {\\n\" + ", "+\t\t\"\t\tMethod main = testClass.getMethod(\\\"main\\\", new Class[] {String[].class});\\n\" + ", "+\t\t\"\t\t//System.out.println(\\\"Running \\\" + className);\\n\" + ", "+\t\t\"\t\tmain.invoke(null, new Object[] {new String[] {}});\\n\" + ", "+\t\t\"\t\t//System.out.println(\\\"Finished running \\\" + className);\\n\" + ", "+\t\t\"\t} catch (NoSuchMethodException e) {\\n\" + ", "+\t\t\"\t\treturn;\\n\" + ", "+\t\t\"\t} catch (InvocationTargetException e) {\\n\" + ", "+\t\t\"\t\tthrow e.getTargetException();\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"}\\n\" + ", "+\t\t\"public static void main(String[] args) throws IOException {\\n\" + ", "+\t\t\"\tVerifyTests verify = new VerifyTests();\\n\" + ", "+\t\t\"\tverify.portNumber = Integer.parseInt(args[0]);\\n\" + ", "+\t\t\"\tverify.run();\\n\" + ", "+\t\t\"}\\n\" + ", "+\t\t\"public void run() throws IOException {\\n\" + ", "+\t\t\"\tServerSocket server = new ServerSocket(this.portNumber);\\n\" + ", "+\t\t\"\tthis.socket = server.accept();\\n\" + ", "+\t\t\"\tthis.socket.setTcpNoDelay(true);\\n\" + ", "+\t\t\"\tserver.close();\\n\" + ", "+\t\t\"\\n\" + ", "+\t\t\"\tDataInputStream in = new DataInputStream(this.socket.getInputStream());\\n\" + ", "+\t\t\"\tfinal DataOutputStream out = new DataOutputStream(this.socket.getOutputStream());\\n\" + ", "+\t\t\"\twhile (true) {\\n\" + ", "+\t\t\"\t\tfinal String className = in.readUTF();\\n\" + ", "+\t\t\"\t\tThread thread = new Thread() {\\n\" + ", "+\t\t\"\t\t\tpublic void run() {\\n\" + ", "+\t\t\"\t\t\t\ttry {\\n\" + ", "+\t\t\"\t\t\t\t\tloadAndRun(className);\\n\" + ", "+\t\t\"\t\t\t\t\tout.writeBoolean(true);\\n\" + ", "+\t\t\"\t\t\t\t\tSystem.err.println(VerifyTests.class.getName());\\n\" + ", "+\t\t\"\t\t\t\t\tSystem.out.println(VerifyTests.class.getName());\\n\" + ", "+\t\t\"\t\t\t\t} catch (Throwable e) {\\n\" + ", "+\t\t\"\t\t\t\t\te.printStackTrace();\\n\" + ", "+\t\t\"\t\t\t\t\ttry {\\n\" + ", "+\t\t\"\t\t\t\t\t\tSystem.err.println(VerifyTests.class.getName());\\n\" + ", "+\t\t\"\t\t\t\t\t\tSystem.out.println(VerifyTests.class.getName());\\n\" + ", "+\t\t\"\t\t\t\t\t\tout.writeBoolean(false);\\n\" + ", "+\t\t\"\t\t\t\t\t} catch (IOException e1) {\\n\" + ", "+\t\t\"\t\t\t\t\t\te1.printStackTrace();\\n\" + ", "+\t\t\"\t\t\t\t\t}\\n\" + ", "+\t\t\"\t\t\t\t}\\n\" + ", "+\t\t\"\t\t\t\ttry {\\n\" + ", "+\t\t\"\t\t\t\t\tout.flush();\\n\" + ", "+\t\t\"\t\t\t\t} catch (IOException e) {\\n\" + ", "+\t\t\"\t\t\t\t\te.printStackTrace();\\n\" + ", "+\t\t\"\t\t\t\t}\\n\" + ", "+\t\t\"\t\t\t}\\n\" + ", "+\t\t\"\t\t};\\n\" + ", "+\t\t\"\t\tthread.start();\\n\" + ", "+\t\t\"\t}\\n\" + ", "+\t\t\"}\\n\" + ", "+\t\t\"}\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a21b05c2a947e24376fb283242be471", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " \tpublic void test084()", "signatureAfterChange": " \tpublic void test084()", "diff": ["+\t\t\t\"\t             ^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tX x = new X((AX)null, (AX)null);\\n\" + ", "-\t\t\t\"3. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 7)\\n\" + ", "+\t\t\t\"\tX x = new X((AX)null, (AX)null);\\n\" + ", "+\t\t\t\"\t                       ^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tAX a = new AX((AX)null);\\n\" + ", "+\t\t\t\"\t^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. WARNING in X.java (at line 8)\\n\" + ", "-\t\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"7. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tAX a = new AX((AX)null);\\n\" + ", "+\t\t\t\"\t           ^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"8. WARNING in X.java (at line 8)\\n\" + ", "+\t\t\t\"\tAX a = new AX((AX)null);\\n\" + ", "+\t\t\t\"\t               ^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"9. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tAX a2 = new AX(null);\\n\" + ", "+\t\t\t\"\t^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"10. WARNING in X.java (at line 9)\\n\" + ", "-\t\t\t\"5. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"11. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tAX a2 = new AX(null);\\n\" + ", "+\t\t\t\"\t            ^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"12. WARNING in X.java (at line 10)\\n\" + ", "-\t\t\t\"6. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\"13. WARNING in X.java (at line 12)\\n\" + ", "-\t\t\t\"7. ERROR in X.java (at line 13)\\n\" + ", "+\t\t\t\"14. ERROR in X.java (at line 13)\\n\" + ", "-\t\t\t\"8. ERROR in X.java (at line 14)\\n\" + ", "+\t\t\t\"15. ERROR in X.java (at line 14)\\n\" + ", "-\t\t\t\"9. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\t\"16. WARNING in X.java (at line 15)\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"17. WARNING in X.java (at line 22)\\n\" + ", "+\t\t\t\"\tvoid foo(AX rawAx){}\\n\" + ", "+\t\t\t\"\t         ^^\\n\" + ", "+\t\t\t\"Type safety: AX is a raw type. References to generic type AX<P> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ed981d690d3b0cb6d08cde15060eccd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "ab13d6b1cdae7066b5bf55448172280f7137212e", "commitAfterChange": "b6aa1e7468e04a61e529b4c4b0b636e6819cd942", "methodNumberBeforeChange": 253, "methodNumberAfterChange": 253, "signatureBeforeChange": " \tpublic void test0245()", "signatureAfterChange": " \tpublic void test0245()", "diff": ["+\t\tif (this.complianceLevel < ClassFileConstants.JDK1_7) {", "+\t\t\tthis.runNegativeTest(", "+\t\t\t\t\tnew String[] {", "+\t\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\t\"public class X <T> { \\n\" + ", "+\t\t\t\t\t\t\"        <G> T foo(G g) {\\n\" + ", "+\t\t\t\t\t\t\"            return null;\\n\" + ", "+\t\t\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\t\t\"        T bar(T t) {\\n\" + ", "+\t\t\t\t\t\t\"        \treturn zork;\\n\" + ", "+\t\t\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\t\t\"\\n\" + ", "+\t\t\t\t\t\t\"        public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\t\t\"                X rx = new X();\\n\" + ", "+\t\t\t\t\t\t\"                rx.<String>foo(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\t\t\"                rx.<String>bar(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\t\t\"}\\n\"", "+\t\t\t\t\t},", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\t\"\treturn zork;\\n\" + ", "+\t\t\t\t\t\"\t       ^^^^\\n\" + ", "+\t\t\t\t\t\"zork cannot be resolved\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\t\t\"\tX rx = new X();\\n\" + ", "+\t\t\t\t\t\"\t^\\n\" + ", "+\t\t\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\t\t\"\tX rx = new X();\\n\" + ", "+\t\t\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"4. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\t\t\"\trx.<String>foo(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\t\"\t           ^^^\\n\" + ", "+\t\t\t\t\t\"The method foo(Object) of raw type X is no longer generic; it cannot be parameterized with arguments <String>\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"5. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\t\t\"\trx.<String>bar(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\t\"\t           ^^^\\n\" + ", "+\t\t\t\t\t\"The method bar(Object) of type X is not generic; it cannot be parameterized with arguments <String>\\n\" + ", "+\t\t\t\t\t\"----------\\n\",", "+\t\t\t\t\tJavacTestOptions.EclipseHasABug.EclipseBug236242);", "+\t\t\treturn;", "+\t\t}", "-\t\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X <T> { \\n\" +", "-\t\t\t\t\"\t<G> T foo(G g) {\\n\" +", "-\t\t\t\t\"\t\treturn null;\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"\t\\n\" +", "-\t\t\t\t\"\tpublic static void main(String[] args) {\\n\" +", "-\t\t\t\t\"\t\tX rx = new X();\\n\" +", "-\t\t\t\t\"\t\trx.<String>foo(\\\"hello\\\");\\n\" +", "-\t\t\t\t\"\t}\\n\" +", "-\t\t\t\t\"}\\n\"", "-\t\t\t},", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in X.java (at line 7)\\n\" +", "-\t\t\t\"\tX rx = new X();\\n\" +", "-\t\t\t\"\t^\\n\" +", "-\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 7)\\n\" +", "-\t\t\t\"\tX rx = new X();\\n\" +", "-\t\t\t\"\t           ^\\n\" +", "-\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 8)\\n\" +", "-\t\t\t\"\trx.<String>foo(\\\"hello\\\");\\n\" +", "-\t\t\t\"\t           ^^^\\n\" +", "-\t\t\t\"The method foo(Object) of raw type X is no longer generic; it cannot be parameterized with arguments <String>\\n\" +", "-\t\t\t\"----------\\n\",", "-\t\t\tJavacTestOptions.EclipseHasABug.EclipseBug236242);", "+\t\t\t\tnew String[] {", "+\t\t\t\t\t\"X.java\",", "+\t\t\t\t\t\"public class X <T> { \\n\" + ", "+\t\t\t\t\t\"        <G> T foo(G g) {\\n\" + ", "+\t\t\t\t\t\"            return null;\\n\" + ", "+\t\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\t\"        T bar(T t) {\\n\" + ", "+\t\t\t\t\t\"        \treturn zork;\\n\" + ", "+\t\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\t\"\\n\" + ", "+\t\t\t\t\t\"        public static void main(String[] args) {\\n\" + ", "+\t\t\t\t\t\"                X rx = new X();\\n\" + ", "+\t\t\t\t\t\"                rx.<String>foo(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\t\"                rx.<String>bar(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\t\"}\\n\"", "+\t\t\t\t},", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\t\"\treturn zork;\\n\" + ", "+\t\t\t\t\"\t       ^^^^\\n\" + ", "+\t\t\t\t\"zork cannot be resolved\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\t\"\tX rx = new X();\\n\" + ", "+\t\t\t\t\"\t^\\n\" + ", "+\t\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\t\"\tX rx = new X();\\n\" + ", "+\t\t\t\t\"\t           ^\\n\" + ", "+\t\t\t\t\"X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"4. WARNING in X.java (at line 11)\\n\" + ", "+\t\t\t\t\"\trx.<String>foo(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: The method foo(Object) belongs to the raw type X. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"5. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\t\"\trx.<String>bar(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\"\t^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Type safety: The method bar(Object) belongs to the raw type X. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"6. WARNING in X.java (at line 12)\\n\" + ", "+\t\t\t\t\"\trx.<String>bar(\\\"hello\\\"); // Eclipse error here\\n\" + ", "+\t\t\t\t\"\t    ^^^^^^\\n\" + ", "+\t\t\t\t\"Unused type arguments for the non generic method bar(Object) of type X; it should not be parameterized with arguments <String>\\n\" + ", "+\t\t\t\t\"----------\\n\",", "+\t\t\t\tJavacTestOptions.EclipseHasABug.EclipseBug236242);"]}], "num": 32203}
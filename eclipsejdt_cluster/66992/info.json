{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "712a95a5fa1b3ad98d67e078798b7ae8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f0597dad2b075d9051f70ab767c960e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTRecoveryPropagator.java", "commitBeforeChange": "7c5e971605e3df9f80c39caf6a5dabceeb49148b", "commitAfterChange": "ffe39da04df0f3a3dcc2e15c0353857438ce8e35", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tprivate boolean checkAndTagAsMalformed(ASTNode node)", "signatureAfterChange": " \t \tprivate boolean markIncludedProblems(int start, int end)", "diff": ["-\tprivate boolean checkAndTagAsMalformed(ASTNode node) {", "-\t\tboolean tagWithErrors = false;", "-\t\tsearch: for (int i = 0, max = this.problems.length; i < max; i++) {", "+\t", "+\tprivate boolean markIncludedProblems(int start, int end) {", "+\t\tboolean foundProblems = false;", "+\t\tnext: for (int i = 0, max = this.problems.length; i < max; i++) {", "+\t\t\t", "+\t\t\tif(this.usedOrIrrelevantProblems[i]) continue next;", "+\t\t\t", "-\t\t\t\t\tcontinue search;", "+\t\t\t\t\tthis.usedOrIrrelevantProblems[i] = true;", "+\t\t\t\t\tcontinue next;", "+\t\t\t\t\t", "+\t\t\t", "-\t\t\tint start = node.getStartPosition();", "-\t\t\tint end = start + node.getLength();", "-\t\t\t\tnode.setFlags(node.getFlags() | ASTNode.RECOVERED);", "-\t\t\t\ttagWithErrors = true;", "+\t\t\t\tthis.usedOrIrrelevantProblems[i] = true;", "+\t\t\t\tfoundProblems = true;", "-\t\treturn tagWithErrors;", "+\t\treturn foundProblems;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b5215e6e4d28f4af7c3cb13ea85ec84", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/APTTestBase.java", "commitBeforeChange": "7064f5cf4e1b20562054db6ff22e27e2bfde4008", "commitAfterChange": "c020688b25edf08bbc7d8d68981663ad78d2a9d8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tprotected void expectingMarkers(String[] messages)", "signatureAfterChange": " \t \tprotected void expectingMarkers(String[] messages)", "diff": ["-\t\tassertEquals(concate(messages), concate(markers));", "+\t\tfinal Set<String> expectedMessages = new HashSet<String>();", "+\t\tfor(String msg : messages ){", "+\t\t\texpectedMessages.add(msg);", "+\t\t}", "+\t\tboolean fail = false;", "+\t\ttry{", "+\t\t\tfor( IMarker marker : markers ){", "+\t\t\t\tfinal String markerMsg = (String)marker.getAttribute(IMarker.MESSAGE);", "+\t\t\t\tif( expectedMessages.contains(markerMsg) )", "+\t\t\t\t\texpectedMessages.remove(markerMsg);", "+\t\t\t\telse{", "+\t\t\t\t\tfail = true;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif( !expectedMessages.isEmpty() )", "+\t\t\t\tfail = true;", "+\t\t}catch(CoreException ce){", "+\t\t\tassertTrue(\"unexpected core exception\" + ce.getMessage(), false); //$NON-NLS-1$", "+\t\t}", "+\t\tif( fail )", "+\t\t\tassertEquals(concate(messages), concate(markers));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "620353baf2e6b9520f71e6b343b37b73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/Tests.java", "commitBeforeChange": "939badb3c6fe1d2f02856fa68cfae3c871f99594", "commitAfterChange": "1d813f81d1ab9bf28fbd197f33e8c5356ab9bb9d", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] expectedProblems)", "signatureAfterChange": " \tprotected void expectingOnlySpecificProblemsFor(IPath root, Problem[] expectedProblems)", "diff": ["-\t\tfor (int i = 0; i < expectedProblems.length; i++)", "-\t\t\tassertEquals(\"unexpected problem\", expectedProblems[i].toString(), rootProblems[i].toString()); //$NON-NLS-1$", "+\t", "+\t\tfor (int i = 0; i < expectedProblems.length; i++) {", "+\t\t\tProblem expectedProblem = expectedProblems[i];", "+\t\t\tboolean found = false;", "+\t\t\tfor (int j = 0; j < rootProblems.length; j++) {", "+\t\t\t\tif(expectedProblem.equals(rootProblems[j])) {", "+\t\t\t\t\tfound = true;", "+\t\t\t\t\trootProblems[j] = null;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tassertTrue(\"problem not found: \" + expectedProblem.toString(), found); //$NON-NLS-1$", "+\t\t}", "+\t\tfor (int i = 0; i < rootProblems.length; i++) {", "+\t\t\tif(rootProblems[i] != null) {", "+\t\t\t\tassertTrue(\"unexpected problem: \" + rootProblems[i].toString(), false); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}"]}], "num": 66992}
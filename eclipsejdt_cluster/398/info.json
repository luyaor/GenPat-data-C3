{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f098e2d32c700c4314ecb24b4ca0818e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "163a2afaae0596bb9b0bc00b855d6942", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "e1051acac48de2e59e4c3d2d0f46898b4067bf9a", "commitAfterChange": "25dbd9e17c7b6920dccf1b458296dbbe00f382de", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 114, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": "  \tpublic Type convertType(TypeReference typeReference)", "diff": ["+\t\t\t\t\t\tboolean isTypeArgumentBased = false;", "+\t\t\t\t\t\t\t\tisTypeArgumentBased = true;", "+\t\t\t\t\t\t\t\tisTypeArgumentBased = false;", "+\t\t\t\t\t\tint start = (int) (positions[0] >>> 32);", "+\t\t\t\t\t\tint end = (int) positions[0];", "-\t\t\t\t\t\tName name = null;\t\t\t\t\t\t", "-\t\t\t\t\t\tif (firstTypeIndex == 0) {", "-\t\t\t\t\t\t\tfinal SimpleName simpleName = new SimpleName(this.ast);", "-\t\t\t\t\t\t\tsimpleName.setIdentifier(new String(tokens[0]));", "-\t\t\t\t\t\t\trecordPendingNameScopeResolution(simpleName);", "-\t\t\t\t\t\t\tint start = (int) (positions[0] >>> 32);", "-\t\t\t\t\t\t\tint end = (int) positions[0];", "-\t\t\t\t\t\t\tsimpleName.setSourceRange(start, end - start + 1);", "-\t\t\t\t\t\t\tsimpleName.index = 1;", "-\t\t\t\t\t\t\tname = simpleName;", "-\t\t\t\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\t\t\t\trecordNodes(simpleName, typeReference);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tname = this.setQualifiedNameNameAndSourceRanges(tokens, positions, firstTypeIndex, typeReference);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tSimpleType simpleType = new SimpleType(this.ast);", "-\t\t\t\t\t\tsimpleType.setName(name);", "-\t\t\t\t\t\tsetSourceRangeAnnotationsAndRecordNodes(typeReference, simpleType, positions, typeAnnotations, firstTypeIndex, 0, firstTypeIndex);", "-\t\t\t\t\t\tint start = simpleType.getStartPosition();", "-\t\t\t\t\t\tint end = (int)positions[firstTypeIndex];", "-\t\t\t\t\t\tType currentType = simpleType;\t\t\t\t\t\t", "+\t\t\t\t\t\tType currentType = createBaseType(typeReference, positions, typeAnnotations, tokens, lenth, firstTypeIndex, isTypeArgumentBased);", "+\t\t\t\t\t\t\tint baseStart = currentType.getStartPosition();", "+\t\t\t\t\t\t\tstart = start <= baseStart ? start : baseStart;", "-\t\t\t\tName name = null;", "-\t\t\t\tType currentType = null;", "-\t\t\t\tif (firstTypeIndex == lenth) {//Just a QualifiedName", "-\t\t\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, lenth - 1, typeReference);", "-\t\t\t\t\tcurrentType = createSimpleType(name, typeReference, positions, 0, lenth - 1);", "-\t\t\t\t} else {", "-\t\t\t\t\tif (firstTypeIndex <= 1) {", "-\t\t\t\t\t\tname = createSimpleName(typeReference, positions, tokens, 0 );", "-\t\t\t\t\t\tfirstTypeIndex = 1;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, firstTypeIndex - 1, typeReference);", "-\t\t\t\t\t}\t\t\t\t\t\t", "-", "-\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding = typeReference.resolvedType;", "-\t\t\t\t\tboolean createPackageQualifiedType = false;", "-\t\t\t\t\tif (typeBinding instanceof ReferenceBinding) {", "-\t\t\t\t\t\tReferenceBinding referenceBinding = (ReferenceBinding)typeBinding;\t\t\t", "-\t\t\t\t\t\tPackageBinding packageBinding = referenceBinding.getPackage();", "-\t\t\t\t\t\tif (packageBinding != null && Arrays.equals(name.toString().toCharArray(), packageBinding.readableName())) {", "-\t\t\t\t\t\t\tcreatePackageQualifiedType = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\tif (createPackageQualifiedType && this.ast.apiLevel >= AST.JLS8) {", "-\t\t\t\t\t\tPackageQualifiedType packageQualifiedType = new PackageQualifiedType(this.ast);", "-\t\t\t\t\t\tpackageQualifiedType.setQualifier(name);", "-\t\t\t\t\t\tpackageQualifiedType.setName(createSimpleName(typeReference, positions, tokens, firstTypeIndex));", "-\t\t\t\t\t\tsetSourceRangeAnnotationsAndRecordNodes(typeReference, packageQualifiedType, positions, typeAnnotations, firstTypeIndex, 0, firstTypeIndex);", "-\t\t\t\t\t\tcurrentType = packageQualifiedType;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tSimpleType simpleType = this.ast.newSimpleType(name);\t", "-\t\t\t\t\t\tsetSourceRangeAnnotationsAndRecordNodes(typeReference, simpleType, positions, typeAnnotations, 0, 0, name.index > 0 ? name.index - 1 : 0);", "-\t\t\t\t\t\tcurrentType = createQualifiedType(typeReference, positions,  typeAnnotations, tokens, firstTypeIndex, simpleType);", "-\t\t\t\t\t\tif (createPackageQualifiedType) ", "-\t\t\t\t\t\t\tcurrentType.setFlags(currentType.getFlags() | ASTNode.MALFORMED);", "-\t\t\t\t\t}", "-\t\t\t\t\tfor (int i = firstTypeIndex + 1; i < lenth; ++i) {", "-\t\t\t\t\t\tcurrentType = createQualifiedType(typeReference, positions,  typeAnnotations, tokens, i, currentType);", "-\t\t\t\t\t}\t\t\t\t\t", "-\t\t\t\t}", "+\t\t\t\tType currentType = createBaseType(typeReference, positions, typeAnnotations, tokens, lenth, firstTypeIndex, false);", "+\t\t\t\tfor (int i = firstTypeIndex + 1; i < lenth; ++i) {", "+\t\t\t\t\tcurrentType = createQualifiedType(typeReference, positions,  typeAnnotations, tokens, i, currentType);", "+\t\t\t\t}\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "714d2ecbb3b22a553da275b83b3cae67", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "e6029c8b1adfe1296ee554ed42f00e5a663cecbf", "commitAfterChange": "d3d92e370789aaaed8a46c804d74e3cb2b4bb167", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": "  \tpublic Type convertType(TypeReference typeReference)", "signatureAfterChange": "  \tpublic Type convertType(TypeReference typeReference)", "diff": ["-\t\t\t\t\t\tsimpleType.setSourceRange(start, end - start + 1);", "-\t\t\t\t\t\tif (typeAnnotations != null && (annotations = typeAnnotations[firstTypeIndex]) != null) {", "-\t\t\t\t\t\t\tannotateType(simpleType, annotations);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\t\t\trecordNodes(simpleType, typeReference);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tsetSourceRangeAnnotationsAndRecordNodes(typeReference, simpleType, positions, typeAnnotations, firstTypeIndex, 0, firstTypeIndex);", "-\t\t\t\tint firstTypeIndex = lenth - 1;", "+\t\t\t\tint firstTypeIndex = lenth;", "-\t\t\t\tif (firstTypeIndex == 0) {", "-\t\t\t\t\tfinal SimpleName simpleName = new SimpleName(this.ast);", "-\t\t\t\t\tsimpleName.internalSetIdentifier(new String(tokens[0]));", "-\t\t\t\t\trecordPendingNameScopeResolution(simpleName);", "-\t\t\t\t\tint start = (int) (positions[0] >>> 32);", "-\t\t\t\t\tint end = (int) positions[0];", "-\t\t\t\t\tsimpleName.setSourceRange(start, end);", "-\t\t\t\t\tsimpleName.index = 1;", "-\t\t\t\t\tname = simpleName;", "-\t\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\t\trecordNodes(simpleName, typeReference);", "-\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\tType currentType = null;", "+\t\t\t\tif (firstTypeIndex == lenth) {//Just a QualifiedName", "+\t\t\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, lenth - 1, typeReference);", "+\t\t\t\t\tcurrentType = createSimpleType(name, typeReference, positions, 0, lenth - 1);", "-\t\t\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, firstTypeIndex, typeReference);", "-\t\t\t\t}", "-\t\t\t\tSimpleType simpleType = new SimpleType(this.ast);", "-\t\t\t\tsimpleType.setName(name);", "-\t\t\t\tint start = (int)(positions[0] >>> 32);", "-\t\t\t\tint end = (int)positions[firstTypeIndex];", "-\t\t\t\tsimpleType.setSourceRange(start, end - start + 1);", "-\t\t\t\tif (typeAnnotations != null && (annotations = typeAnnotations[firstTypeIndex]) != null) {", "-\t\t\t\t\tannotateType(simpleType, annotations);", "-\t\t\t\t}", "-\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\trecordNodes(simpleType, typeReference);", "-\t\t\t\t}", "-\t\t\t\tType currentType = simpleType;", "-\t\t\t\t", "-\t\t\t\tfor (int i = firstTypeIndex + 1; i < lenth; ++i) {", "-\t\t\t\t\tSimpleName simpleName = new SimpleName(this.ast);", "-\t\t\t\t\tsimpleName.internalSetIdentifier(new String(tokens[i]));", "-\t\t\t\t\tsimpleName.index = i + 1;", "-\t\t\t\t\tstart = (int) (positions[i] >>> 32);", "-\t\t\t\t\tend = (int) positions[i];", "-\t\t\t\t\tsimpleName.setSourceRange(start, end - start +1);", "-\t\t\t\t\trecordPendingNameScopeResolution(simpleName);", "-\t\t\t\t\tQualifiedType qualifiedType = new QualifiedType(this.ast);", "-\t\t\t\t\tqualifiedType.setQualifier(currentType);", "-\t\t\t\t\tqualifiedType.setName(simpleName);", "-\t\t\t\t\tif (typeAnnotations != null && (annotations = typeAnnotations[i]) != null) {", "-\t\t\t\t\t\tannotateType(qualifiedType, annotations);", "+\t\t\t\t\tif (firstTypeIndex <= 1) {", "+\t\t\t\t\t\tname = createSimpleName(typeReference, positions, tokens, 0 );", "+\t\t\t\t\t\tfirstTypeIndex = 1;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tname = setQualifiedNameNameAndSourceRanges(tokens, positions, firstTypeIndex - 1, typeReference);", "+\t\t\t\t\t}\t\t\t\t\t\t", "+", "+\t\t\t\t\torg.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding = typeReference.resolvedType;", "+\t\t\t\t\tboolean createPackageQualifiedType = false;", "+\t\t\t\t\tif (typeBinding instanceof ReferenceBinding) {", "+\t\t\t\t\t\tReferenceBinding referenceBinding = (ReferenceBinding)typeBinding;\t\t\t", "+\t\t\t\t\t\tPackageBinding packageBinding = referenceBinding.getPackage();", "+\t\t\t\t\t\tif (packageBinding != null && Arrays.equals(name.toString().toCharArray(), packageBinding.readableName())) {", "+\t\t\t\t\t\t\tcreatePackageQualifiedType = true;", "+\t\t\t\t\t\t}", "-\t\t\t\t\tif (this.resolveBindings) {", "-\t\t\t\t\t\trecordNodes(simpleName, typeReference);", "-\t\t\t\t\t\trecordNodes(qualifiedType, typeReference);", "+\t\t\t\t\t", "+\t\t\t\t\tif (createPackageQualifiedType && this.ast.apiLevel >= AST.JLS8) {", "+\t\t\t\t\t\tPackageQualifiedType packageQualifiedType = new PackageQualifiedType(this.ast);", "+\t\t\t\t\t\tpackageQualifiedType.setQualifier(name);", "+\t\t\t\t\t\tpackageQualifiedType.setName(createSimpleName(typeReference, positions, tokens, firstTypeIndex));", "+\t\t\t\t\t\tsetSourceRangeAnnotationsAndRecordNodes(typeReference, packageQualifiedType, positions, typeAnnotations, firstTypeIndex, 0, firstTypeIndex);", "+\t\t\t\t\t\tcurrentType = packageQualifiedType;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tSimpleType simpleType = this.ast.newSimpleType(name);\t", "+\t\t\t\t\t\tsetSourceRangeAnnotationsAndRecordNodes(typeReference, simpleType, positions, typeAnnotations, 0, 0, name.index > 0 ? name.index - 1 : 0);", "+\t\t\t\t\t\tcurrentType = createQualifiedType(typeReference, positions,  typeAnnotations, tokens, firstTypeIndex, simpleType);", "+\t\t\t\t\t\tif (createPackageQualifiedType) ", "+\t\t\t\t\t\t\tcurrentType.setFlags(currentType.getFlags() | ASTNode.MALFORMED);", "-\t\t\t\t\tstart = currentType.getStartPosition();", "-\t\t\t\t\tend = simpleName.getStartPosition() + simpleName.getLength() - 1;", "-\t\t\t\t\tqualifiedType.setSourceRange(start, end - start + 1);", "-\t\t\t\t\tcurrentType = qualifiedType;", "-\t\t\t\t\tqualifiedType.index  = 1;", "+\t\t\t\t\tfor (int i = firstTypeIndex + 1; i < lenth; ++i) {", "+\t\t\t\t\t\tcurrentType = createQualifiedType(typeReference, positions,  typeAnnotations, tokens, i, currentType);", "+\t\t\t\t\t}\t\t\t\t\t"]}], "num": 398}
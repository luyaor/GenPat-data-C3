{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bbf2e3ba111cb40bf21c1580aaa5a3b7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b004ffa443f842fcd996e2ecf4be9f6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "14f758abdbf93582152d632f97767b107ab4115d", "commitAfterChange": "8879b56fd07da9d038783d336704cc8af2052901", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws CoreException", "signatureAfterChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws CoreException", "diff": ["-\t\tIPath[] scopeProjectsAndJars = this.scope.enclosingProjectsAndJars();", "-\t\tint scopeLength = scopeProjectsAndJars.length;", "+\t\tboolean isWorkspaceScope = this.scope == JavaModelManager.getJavaModelManager().getWorkspaceScope();", "+\t\tIPath[] scopeProjectsAndJars =  isWorkspaceScope ? null : this.scope.enclosingProjectsAndJars();", "+\t\tint scopeLength = isWorkspaceScope ? 0 : scopeProjectsAndJars.length;", "+\t\tSimpleSet packages = new SimpleSet();", "-\t\t\tboolean found = false;", "-\t\t\tfor (int j=0; j<scopeLength; j++) {", "-\t\t\t\tif (projects[i].getPath().equals(scopeProjectsAndJars[j])) {", "-\t\t\t\t\tfound = true;", "-\t\t\t\t\tbreak;", "+\t\t\tif (!isWorkspaceScope) {", "+\t\t\t\tboolean found = false;", "+\t\t\t\tfor (int j=0; j<scopeLength; j++) {", "+\t\t\t\t\tif (javaProject.getPath().equals(scopeProjectsAndJars[j])) {", "+\t\t\t\t\t\tfound = true;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\tif (!found) continue;", "-\t\t\tif (!found) continue;", "+\t\t\t// Get all project package fragment names", "+\t\t\t// Report matches avoiding duplicate names", "-\t\t\t\tIResource resource = fragment.getResource();", "-\t\t\t\tif (resource == null) // case of a file in an external jar", "-\t\t\t\t\tresource = javaProject.getProject();", "-\t\t\t\ttry {", "-\t\t\t\t\tif (encloses(fragment)) {", "-\t\t\t\t\t\tSearchMatch match = new PackageDeclarationMatch(fragment, SearchMatch.A_ACCURATE, -1, -1, participant, resource);", "-\t\t\t\t\t\treport(match);", "+\t\t\t\tif (packages.addIfNotIncluded(fragment) == null) continue;", "+\t\t\t\tif (encloses(fragment)) {", "+\t\t\t\t\tIResource resource = fragment.getResource();", "+\t\t\t\t\tif (resource == null) // case of a file in an external jar", "+\t\t\t\t\t\tresource = javaProject.getProject();", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tif (encloses(fragment)) {", "+\t\t\t\t\t\t\tSearchMatch match = new PackageDeclarationMatch(fragment, SearchMatch.A_ACCURATE, -1, -1, participant, resource);", "+\t\t\t\t\t\t\treport(match);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\tthrow e;", "+\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\tthrow new JavaModelException(e);", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\tthrow e;", "-\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\tthrow new JavaModelException(e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "474ccd433d904ba25fa9897a30aeec19", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": " \tpublic boolean visit(ArrayCreation node)", "signatureAfterChange": " \tpublic boolean visit(ArrayCreation node)", "diff": ["-\t\t\tArrayType currentLevel= (ArrayType) replacingType.getElementType().getParent();", "+\t\t\tboolean astLevelGTE8 = node.getAST().apiLevel() >= AST.JLS8 ? true : false;", "+\t\t\tArrayType currentLevel = astLevelGTE8 ? null : (ArrayType) replacingType.getElementType().getParent();", "+\t\t\tint replacingTypeDimensions = replacingType.getDimensions();", "-\t\t\twhile(currentLevel != null) {", "-\t\t\t\tif (node.getAST().apiLevel() >= AST.JLS8) {", "-\t\t\t\t\trewriteTypeAnnotations(currentLevel, ArrayType.ANNOTATIONS_PROPERTY, offset);", "-\t\t\t\t}", "+\t\t\twhile(currentLevel != null || astLevelGTE8) {", "+\t\t\t\t\tif (astLevelGTE8) internalExtraDimensionRewrite(replacingType, i, offset);", "+\t\t\t\t\tif (astLevelGTE8) internalExtraDimensionRewrite(replacingType, i, offset);", "+\t\t\t\t\tinternalExtraDimensionAddition(replacingType, i, offset, editGroup, astLevelGTE8);", "-\t\t\t\tif (currentLevel == replacingType) break;", "-\t\t\t\tcurrentLevel= (ArrayType) currentLevel.getParent();", "+\t\t\t\tif (astLevelGTE8) {", "+\t\t\t\t\tif (i == replacingTypeDimensions) break;", "+\t\t\t\t} else {", "+\t\t\t\t\tif (currentLevel == replacingType) break;", "+\t\t\t\t\tcurrentLevel= (ArrayType) currentLevel.getParent();", "+\t\t\t\t}", "+\t}"]}], "num": 24256}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef2afd426e825df160d753de16b66c43", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b13f1cf400f8df511b32f5de3c0764e3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "f74cac509deaf512c7535f38357f0bf074e0e26d", "commitAfterChange": "4f8754b531ef7a0f61f91d095d8127db2debc51a", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 45, "signatureBeforeChange": "  \tprivate String getArguments(int[] arguments)", "signatureAfterChange": "  \tprivate String getArguments(int[] arguments, String[] argumentsName)", "diff": ["-\tprivate String getArguments(int[] arguments) {", "+\tprivate String getArguments(int[] arguments, String[] argumentsName) {", "-\t\tbuffer.append('{');", "-\t\t\tif (i != 0) {", "-\t\t\t\tbuffer.append(Messages.disassembler_comma);", "-\t\t\t}", "+\t\t\t\t\t\targumentsName[i]", "+\t\t\tif (i != arguments.length - 1)", "+\t\t\t\tbuffer.append(\"\\n\\t\\t\"); //$NON-NLS-1$", "-\t\tbuffer.append('}');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f65e4ef84c856e16fb97a2ee38448b7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java", "commitBeforeChange": "ec8e689e69ce65d5a3f127f9c7126c4bebdd7b60", "commitAfterChange": "c922c60b9bc5fcda7fb9f2a477eba6f8f95a6cf9", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 14, "signatureBeforeChange": "\t \t \tpublic static void parse(ASTRequestor astRequestor, int apiLevel, Map options, IProgressMonitor monitor)", "signatureAfterChange": "\t \t \tpublic static void parse(ICompilationUnit[] compilationUnits, ASTRequestor astRequestor, int apiLevel, Map options, IProgressMonitor monitor)", "diff": ["-\tpublic static void parse(ASTRequestor astRequestor, int apiLevel, Map options, IProgressMonitor monitor) {", "-\t\tICompilationUnit[] workingCopies = astRequestor.getSources();", "+\tpublic static void parse(ICompilationUnit[] compilationUnits, ASTRequestor astRequestor, int apiLevel, Map options, IProgressMonitor monitor) {", "-\t\twhile (workingCopies != null) {", "-\t\t\tfor (int i = 0, length = workingCopies.length; i < length; i++) {", "-\t\t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit = (org.eclipse.jdt.internal.compiler.env.ICompilationUnit) workingCopies[i];", "-\t\t\t\tCompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0, compilerOptions.maxProblemsPerUnit);", "-\t\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = parser.dietParse(sourceUnit, compilationResult);", "-\t\t\t\t", "-\t\t\t\tif (compilationUnitDeclaration.ignoreMethodBodies) {", "-\t\t\t\t\tcompilationUnitDeclaration.ignoreFurtherInvestigation = true;", "-\t\t\t\t\t// if initial diet parse did not work, no need to dig into method bodies.", "-\t\t\t\t\tcontinue; ", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t//fill the methods bodies in order for the code to be generated", "-\t\t\t\t//real parse of the method....", "-\t\t\t\tparser.scanner.setSource(compilationResult);", "-\t\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types = compilationUnitDeclaration.types;", "-\t\t\t\tif (types != null) {", "-\t\t\t\t\tfor (int j = types.length; --j >= 0;)", "-\t\t\t\t\t\ttypes[j].parseMethod(parser, compilationUnitDeclaration);", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t// convert AST", "-\t\t\t\tASTNode node = convert(compilationUnitDeclaration, sourceUnit.getContents(), apiLevel, options, false/*don't resolve binding*/, null/*no owner needed*/, null/*no binding table needed*/, monitor);", "-\t\t\t\t", "-\t\t\t\t", "-\t\t\t\t// accept AST", "-\t\t\t\tastRequestor.acceptAST(node);", "+\t\tfor (int i = 0, length = compilationUnits.length; i < length; i++) {", "+\t\t\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit = (org.eclipse.jdt.internal.compiler.env.ICompilationUnit) compilationUnits[i];", "+\t\t\tCompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0, compilerOptions.maxProblemsPerUnit);", "+\t\t\tCompilationUnitDeclaration compilationUnitDeclaration = parser.dietParse(sourceUnit, compilationResult);", "+\t\t\t", "+\t\t\tif (compilationUnitDeclaration.ignoreMethodBodies) {", "+\t\t\t\tcompilationUnitDeclaration.ignoreFurtherInvestigation = true;", "+\t\t\t\t// if initial diet parse did not work, no need to dig into method bodies.", "+\t\t\t\tcontinue; ", "-\t\t\tworkingCopies = astRequestor.getSources();", "+\t\t\t//fill the methods bodies in order for the code to be generated", "+\t\t\t//real parse of the method....", "+\t\t\tparser.scanner.setSource(compilationResult);", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.TypeDeclaration[] types = compilationUnitDeclaration.types;", "+\t\t\tif (types != null) {", "+\t\t\t\tfor (int j = types.length; --j >= 0;)", "+\t\t\t\t\ttypes[j].parseMethod(parser, compilationUnitDeclaration);", "+\t\t\t}", "+\t\t\t", "+\t\t\t// convert AST", "+\t\t\tASTNode node = convert(compilationUnitDeclaration, sourceUnit.getContents(), apiLevel, options, false/*don't resolve binding*/, null/*no owner needed*/, null/*no binding table needed*/, monitor);", "+\t\t\t", "+\t\t\t", "+\t\t\t// accept AST", "+\t\t\tastRequestor.acceptAST((CompilationUnit) node, compilationUnits[i]);"]}], "num": 43929}
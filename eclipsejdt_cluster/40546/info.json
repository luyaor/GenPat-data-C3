{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "020f465e8da477c561642c91e53e3e4d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38a1a65a209bde899e02b1b0f229b6de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java", "commitBeforeChange": "9aeeae6132d26ad37d31381105d033b5d7355109", "commitAfterChange": "bd6d2b237d7387fba1f23d192ad6b2abfbd96ace", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r \tpublic MethodBinding getImplicitMethod(\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r \tpublic MethodBinding getImplicitMethod(\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "diff": ["-\t\t\t\t\tif (methodBinding == null && foundMethod == null) {\r", "+\t\t\t\t\tif (methodBinding == null) {\r", "-\t\t\t\t\t\t\t\t\tfuzzyProblem =\r", "-\t\t\t\t\t\t\t\t\t\tnew ProblemMethodBinding(methodBinding, selector, argumentTypes, NotFound);\r", "-\t\t\t\t\t\t\t\t} else if (\r", "-\t\t\t\t\t\t\t\t\t!methodBinding.canBeSeenBy(receiverType, invocationSite, classScope)) {\r", "+\t\t\t\t\t\t\t\t\tif (foundMethod == null || foundMethod.problemId() == NotVisible){\r", "+\t\t\t\t\t\t\t\t\t\t// inherited mismatch is reported directly, not looking at enclosing matches\r", "+\t\t\t\t\t\t\t\t\t\treturn new ProblemMethodBinding(methodBinding, selector, argumentTypes, NotFound);\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t\t// make the user qualify the method, likely wants the first inherited method (javac generates an ambiguous error instead)\r", "+\t\t\t\t\t\t\t\t\tfuzzyProblem = new ProblemMethodBinding(selector, argumentTypes, InheritedNameHidesEnclosingName);\r", "+\r", "+\t\t\t\t\t\t\t\t} else if (!methodBinding.canBeSeenBy(receiverType, invocationSite, classScope)) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b371c2db7f991ad52b491207cb72ff4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "37d61d5c5c650829214bf858cd078e7d345a9a26", "commitAfterChange": "dd98852dd97e40bffde60b114dfaf133a2c50581", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "signatureAfterChange": " \tprotected final MethodBinding computeCompatibleMethod(MethodBinding method, TypeBinding[] arguments, InvocationSite invocationSite)", "diff": ["-\t\t} else if (genericTypeArguments != null && !(method instanceof ParameterizedGenericMethodBinding)) {", "-\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, TypeParameterArityMismatch);", "+\t\t} else if (genericTypeArguments != null) {", "+\t\t\tif (method instanceof ParameterizedGenericMethodBinding) {", "+\t\t\t\tif (method.declaringClass.isRawType())", "+\t\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, TypeArgumentsForRawGenericMethod); // attempt to invoke generic method of raw type with type hints <String>foo()", "+\t\t\t} else {", "+\t\t\t\treturn new ProblemMethodBinding(method, method.selector, genericTypeArguments, TypeParameterArityMismatch);", "+\t\t\t}"]}], "num": 40546}
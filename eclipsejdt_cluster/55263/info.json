{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40fcbafb4ceda3e2b4570942eba131ea", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22419f7aa2280ff8522cbb1cdc442013", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java", "commitBeforeChange": "8c93d4e99b8a943865cb7391e781eba5bb83dfc9", "commitAfterChange": "bd0edd7688142c1743cb6b10766dfc576040f113", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "signatureAfterChange": " public void analyseCode(ClassScope classScope, InitializationFlowContext initializerFlowContext, FlowInfo flowInfo, int initialReachMode)", "diff": ["-\t\t// check missing blank final field initializations", "+\t\t// check missing blank final field initializations (plus @NonNull)", "-\t\t\t\tFieldBinding field;", "-\t\t\t\tif ((!(field = fields[i]).isStatic())", "-\t\t\t\t\t&& field.isFinal()", "-\t\t\t\t\t&& (!flowInfo.isDefinitelyAssigned(fields[i]))) {", "-\t\t\t\t\tthis.scope.problemReporter().uninitializedBlankFinalField(", "-\t\t\t\t\t\tfield,", "-\t\t\t\t\t\t((this.bits & ASTNode.IsDefaultConstructor) != 0) ? (ASTNode) this.scope.referenceType() : this);", "+\t\t\t\tFieldBinding field = fields[i];", "+\t\t\t\tif (!field.isStatic()) {", "+\t\t\t\t\tif (field.isFinal()", "+\t\t\t\t\t\t\t&& (!flowInfo.isDefinitelyAssigned(field))) {", "+\t\t\t\t\t\tthis.scope.problemReporter().uninitializedBlankFinalField(", "+\t\t\t\t\t\t\t\tfield,", "+\t\t\t\t\t\t\t\t((this.bits & ASTNode.IsDefaultConstructor) != 0) ? (ASTNode) this.scope.referenceType() : this);", "+\t\t\t\t\t} else if (field.isNonNull()) {", "+\t\t\t\t\t\tif (!flowInfo.isDefinitelyAssigned(field)) {", "+\t\t\t\t\t\t\tthis.scope.problemReporter().uninitializedNonNullField(", "+\t\t\t\t\t\t\t\t\tfield,", "+\t\t\t\t\t\t\t\t\t((this.bits & ASTNode.IsDefaultConstructor) != 0) ? (ASTNode) this.scope.referenceType() : this);\t\t\t\t\t\t", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f45d6dd1a01446b5952ce4502652a2f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "64c79aaade93cc6bf9061f58a0917e55ce5f44d7", "commitAfterChange": "0f30dd165e42ed7c89f5ae15972d54606f639fe9", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": " \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["-\t\t\tif (!((FieldBinding) binding).isStatic()) {", "+\t\t\tFieldBinding fieldBinding = (FieldBinding) binding;", "+\t\t\tif (!fieldBinding.isStatic()) {", "-\t\t\t\tif (indexOfFirstFieldBinding == 1) {", "-\t\t\t\t\t//the field is the first token of the qualified reference....", "-\t\t\t\t\tif (scope.methodScope().isStatic) {", "-\t\t\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(", "-\t\t\t\t\t\t\tthis,", "-\t\t\t\t\t\t\t(FieldBinding) binding);", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t}", "-\t\t\t\t} else { //accessing to a field using a type as \"receiver\" is allowed only with static field\t", "-\t\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(", "-\t\t\t\t\t\tthis,", "-\t\t\t\t\t\t(FieldBinding) binding);", "+\t\t\t\tif (indexOfFirstFieldBinding > 1  //accessing to a field using a type as \"receiver\" is allowed only with static field", "+\t\t\t\t\t\t || scope.methodScope().isStatic) { \t// the field is the first token of the qualified reference....", "+\t\t\t\t\tscope.problemReporter().staticFieldAccessToNonStaticVariable(this, fieldBinding);", "+\t\t\t\t }", "+\t\t\t} else {", "+\t\t\t\t// indirect static reference ?", "+\t\t\t\tif (indexOfFirstFieldBinding > 1 ", "+\t\t\t\t\t\t&& fieldBinding.declaringClass != actualReceiverType) {", "+\t\t\t\t\tscope.problemReporter().indirectAccessToStaticField(this, fieldBinding);", "-\t\t\tif (isFieldUseDeprecated((FieldBinding) binding, scope, (this.bits & IsStrictlyAssignedMASK) !=0 && indexOfFirstFieldBinding == length))", "-\t\t\t\tscope.problemReporter().deprecatedField((FieldBinding) binding, this);", "+\t\t\tif (isFieldUseDeprecated(fieldBinding, scope, (this.bits & IsStrictlyAssignedMASK) !=0 && indexOfFirstFieldBinding == length))", "+\t\t\t\tscope.problemReporter().deprecatedField(fieldBinding, this);", "-\t\t\t\tif (isFieldUseDeprecated(field, scope, (this.bits & IsStrictlyAssignedMASK) !=0 && index+1 == length))", "+\t\t\t\tif (isFieldUseDeprecated(field, scope, (this.bits & IsStrictlyAssignedMASK) !=0 && index+1 == length)) {", "+\t\t\t\t}", "-\t\t\t\ttype = field.type;", "-\t\t\t\tindex++;", "-\t\t\t\t", "-\t\t\t\t\tscope.problemReporter().unnecessaryReceiverForStaticField(this, field);", "+\t\t\t\t\tscope.problemReporter().nonStaticAccessToStaticField(this, field);", "+\t\t\t\t\t// indirect static reference ?", "+\t\t\t\t\tif (field.declaringClass != type) {", "+\t\t\t\t\t\tscope.problemReporter().indirectAccessToStaticField(this, field);", "+\t\t\t\t\t}", "-\t\t\t\t", "+\t\t\t\ttype = field.type;", "+\t\t\t\tindex++;"]}], "num": 55263}
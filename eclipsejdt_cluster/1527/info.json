{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "819002738718e0ef90dc0230cbcceedc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30ba9056f781b0032392c9d85c6c3a7a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatch.java", "commitBeforeChange": "72643ddaac52d3ea6e2573fbe40b9af5d9586d1e", "commitAfterChange": "965ee55c83771df9f7f21b38b9a78903a86f630d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate static Set<IFile> runAPT( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv)", "signatureAfterChange": "  \tprivate static APTResult runAPT( \t\t\tfinal List<AnnotationProcessorFactory> factories, \t\t\tfinal ProcessorEnvImpl processorEnv)", "diff": ["-\tprivate static Set<IFile> runAPT(", "+\tprivate static APTResult runAPT(", "-\t\t\tfinal ProcessorEnvImpl processorEnv) {", "+\t\t\tfinal ProcessorEnvImpl processorEnv) ", "+\t{", "-\t\t\t\treturn Collections.emptySet();", "-", "+\t\t\t{", "+\t\t\t\tif ( DEBUG ) trace( \"runAPT: leaving early because there are no factories\");", "+\t\t\t\treturn EMPTY_APT_RESULT;", "+\t\t\t}", "+\t\t\t\t", "-\t\t\t\treturn Collections.emptySet();", "-\t\t\t", "+\t\t\t{", "+\t\t\t\tif ( DEBUG ) trace( \"runAPT: leaving early because file doesn't exist\");", "+\t\t\t\treturn EMPTY_APT_RESULT;", "+\t\t\t}", "+\t\t\t\t", "+\t\t\t", "-\t\t\t\treturn Collections.emptySet();", "+\t\t\t{", "+\t\t\t\tif ( DEBUG ) trace ( \"runAPT:  leaving early because annotationDecls is empty\" );", "+\t\t\t\treturn EMPTY_APT_RESULT;", "+\t\t\t}", "+\t\t\tGeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager( processorEnv.getJavaProject().getProject() );", "+\t\t\tSet<IFile> lastGeneratedFiles = gfm.getGeneratedFilesForParent( processorEnv.getFile() );", "+\t\t\t", "+\t\t\t\t\t{", "+\t\t\t\t\t\tif ( DEBUG ) trace( \"runAPT: invoking processor \" + processor.getClass().getName() );", "+\t\t\t\t\t}", "-\t\t\tfinal Set<IFile> generatedFiles = new HashSet<IFile>();", "-\t\t\tgeneratedFiles.addAll( processorEnv.getGeneratedFiles() );", "+\t\t\tfinal Set<IFile> allGeneratedFiles = new HashSet<IFile>();", "+\t\t\tSet<IFile> modifiedFiles = new HashSet<IFile>();", "+\t\t\tMap<IFile, Boolean> filesMap = processorEnv.getGeneratedFiles();", "+\t\t\tfor (Map.Entry<IFile, Boolean> entry : filesMap.entrySet()) {", "+\t\t\t\tallGeneratedFiles.add(entry.getKey());", "+\t\t\t\tif (entry.getValue()) {", "+\t\t\t\t\tmodifiedFiles.add(entry.getKey());", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\t// any files that were generated for this parent on the last", "+\t\t\t// run, but are no longer generated should be removed", "+\t\t\tSet<IFile> deletedFiles = cleanupNoLongerGeneratedFiles( processorEnv.getFile(), lastGeneratedFiles, allGeneratedFiles, gfm );", "+", "+\t\t\tAPTResult result = new APTResult( modifiedFiles, deletedFiles, processorEnv.getTypeDependencies() );", "-\t\t\treturn generatedFiles;", "+\t\t\treturn result;", "-\t\treturn Collections.emptySet();", "+\t\treturn EMPTY_APT_RESULT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4b71eaf2c0091a01b15f91f74d94cdc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprivate static void addFileWithMissingTypeError( \t\t\tfinal IFile file,  \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<ICompilationUnit> unitsForFilesWithMissingType, \t\t\tfinal ProcessorEnvImpl processorEnv)", "signatureAfterChange": " \t \tprivate void runAPTInFileBasedMode(final ProcessorEnvImpl processorEnv, \t\t\t\t\t\t\t\t\t   final Map<IFile, Set<IFile>> lastGeneratedFiles)", "diff": ["-\t", "-\tprivate static void addFileWithMissingTypeError(", "-\t\t\tfinal IFile file, ", "-\t\t\tfinal List<IFile> filesWithMissingType,", "-\t\t\tfinal List<ICompilationUnit> unitsForFilesWithMissingType,", "-\t\t\tfinal ProcessorEnvImpl processorEnv)", "-\t{", "-\t\tif( processorEnv.getPhase() != Phase.BUILD )", "-\t\t\treturn;", "-\t\tfinal CompilationUnit domUnit = processorEnv.getAstCompilationUnit(file);", "-\t\tassert domUnit != null : \"cannot locate compilation unit for \" + file.getName(); //$NON-NLS-1$", "-\t\tfinal IProblem[] problems = domUnit.getProblems();", "-\t\tif(problems == null)", "-\t\t\treturn;", "-\t\tfor( IProblem problem : problems ){", "-\t\t\tif( problem.getID() == IProblem.UndefinedType ){\t\t\t\t\t\t", "-\t\t\t\tfilesWithMissingType.add(file);", "-\t\t\t\tfinal ICompilationUnit unit = processorEnv.getICompilationUnitForFile(file);", "-\t\t\t\tassert unit != null : \"cannot locate ICompilationUnit for file \" + file.getName(); //$NON-NLS-1$", "-\t\t\t\tunitsForFilesWithMissingType.add(unit);", "-\t\t\t\tif( AptPlugin.DEBUG )", "-\t\t\t\t\tAptPlugin.trace(unit.getElementName() + \" has missing type \" + problem.getMessage() ); //$NON-NLS-1$", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}\t", "-\t}", "+\tprivate void runAPTInFileBasedMode(final ProcessorEnvImpl processorEnv,", "+\t\t\t\t\t\t\t\t\t   final Map<IFile, Set<IFile>> lastGeneratedFiles)", "+\t\tfinal ICompilationParticipantResult[] cpResults = processorEnv.getFilesWithAnnotation();", "+\t\tfinal GeneratedFileManager gfm = _aptProject.getGeneratedFileManager();", "+\t\tfor (ICompilationParticipantResult curResult : cpResults ) {\t\t\t", "+\t\t\tprocessorEnv.beginFileProcessing(curResult);", "+\t\t\tdispatchToFileBasedProcessor(processorEnv);", "+\t\t\tfinal IFile curFile = curResult.getFile();", "+\t\t\treportResult(", "+\t\t\t\t\tcurResult,", "+\t\t\t\t\tlastGeneratedFiles.get(curFile),", "+\t\t\t\t\tprocessorEnv.getAllGeneratedFiles(),", "+\t\t\t\t\tprocessorEnv.getModifiedGeneratedFiles(),", "+\t\t\t\t\tprocessorEnv.getProblems(),", "+\t\t\t\t\tprocessorEnv.getTypeDependencies(),", "+\t\t\t\t\tgfm,", "+\t\t\t\t\tprocessorEnv);", "+\t\t\tprocessorEnv.completedFileProcessing();", "+\t\t}"]}], "num": 1527}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a8af2076575106abed94e540607bc09", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0389365a299fe751cc086764079e4117", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "eedafe9176d5ca60193623550822839844fd4aae", "commitAfterChange": "16a0328cb89c7e4d508e8edfc85e1af4879c13c7", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tpublic static IClasspathEntry getResolvedClasspathEntry(IClasspathEntry entry)", "signatureAfterChange": " \tpublic static IClasspathEntry getResolvedClasspathEntry(IClasspathEntry entry)", "diff": ["-\t\t\t\t\t\treturn JavaCore.newProjectEntry(resolvedPath, entry.isExported());", "+\t\t\t\t\t\treturn JavaCore.newProjectEntry(resolvedPath, entry.getInclusionPatterns(), entry.getExclusionPatterns(), entry.isExported());", "+\t\t\t\t\t\t\t\t\tentry.getInclusionPatterns(), ", "+\t\t\t\t\t\t\t\t\tentry.getExclusionPatterns(), ", "+\t\t\t\t\t\t\t\tentry.getInclusionPatterns(), ", "+\t\t\t\t\t\t\t\tentry.getExclusionPatterns(), ", "+\t\t\t\t\t\t\tentry.getInclusionPatterns(), ", "+\t\t\t\t\t\t\tentry.getExclusionPatterns(), ", "+\t\t\t\t\t\t\tentry.getInclusionPatterns(), ", "+\t\t\t\t\t\t\tentry.getExclusionPatterns(), "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27847a4256933d97d00859af89ac66ae", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "841d4b99f7f88577aa004d23df8444d60d488b4b", "commitAfterChange": "9303965ee1621d26f107b936fe552a533d379df0", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \t \tprivate String[] getMessageTemplates()", "signatureAfterChange": " \t \tprivate String[] getMessageTemplates()", "diff": ["+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\t\tresult[0] = Messages.bind(", "+\t\t\tresult[0] = manager.intern(Messages.bind(", "-\t\t\t\tnew String[] {\"{0}\", getPath().segment(0)});  //$NON-NLS-1$", "-\t\t\tresult[1] = Messages.bind(", "+\t\t\t\tnew String[] {\"{0}\", getPath().segment(0)}));  //$NON-NLS-1$", "+\t\t\tresult[1] = manager.intern(Messages.bind(", "-\t\t\t\t\tnew String[] {\"{0}\", getPath().segment(0)});  //$NON-NLS-1$", "-\t\t\tresult[2] = Messages.bind(", "+\t\t\t\t\tnew String[] {\"{0}\", getPath().segment(0)}));  //$NON-NLS-1$", "+\t\t\tresult[2] = manager.intern(Messages.bind(", "-\t\t\t\t\tnew String[] {\"{0}\", \"{1}\", getPath().segment(0)});  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tresult[3] = Messages.bind(", "+\t\t\t\t\tnew String[] {\"{0}\", \"{1}\", getPath().segment(0)}));  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\tresult[3] = manager.intern(Messages.bind(", "-\t\t\t\t\tnew String[] {\"{0}\", \"{1}\", getPath().segment(0)});  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\tnew String[] {\"{0}\", \"{1}\", getPath().segment(0)}));  //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tresult[0] = Messages.bind(", "+\t\t\tresult[0] = manager.intern(Messages.bind(", "-\t\t\t\tnew String[] {\"{0}\", pathString}); //$NON-NLS-1$ ", "-\t\t\tresult[1] = Messages.bind(", "+\t\t\t\tnew String[] {\"{0}\", pathString})); //$NON-NLS-1$ ", "+\t\t\tresult[1] = manager.intern(Messages.bind(", "-\t\t\t\t\tnew String[] {\"{0}\", pathString}); //$NON-NLS-1$ ", "-\t\t\tresult[2] = Messages.bind(", "+\t\t\t\t\tnew String[] {\"{0}\", pathString})); //$NON-NLS-1$ ", "+\t\t\tresult[2] = manager.intern(Messages.bind(", "-\t\t\t\t\tnew String[] {\"{0}\", \"{1}\", pathString}); //$NON-NLS-1$ //$NON-NLS-2$ ", "-\t\t\tresult[3] = Messages.bind(", "+\t\t\t\t\tnew String[] {\"{0}\", \"{1}\", pathString})); //$NON-NLS-1$ //$NON-NLS-2$ ", "+\t\t\tresult[3] = manager.intern(Messages.bind(", "-\t\t\t\t\tnew String[] {\"{0}\", \"{1}\", pathString}); //$NON-NLS-1$ //$NON-NLS-2$ ", "+\t\t\t\t\tnew String[] {\"{0}\", \"{1}\", pathString})); //$NON-NLS-1$ //$NON-NLS-2$ "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4258726287a1e8d3f8bb7ad42fbc7ff9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/AptConfigurationBlock.java", "commitBeforeChange": "1807cc67396ea9076c76cb31f2d61c82f124d048", "commitAfterChange": "52597fb7db7ddfe8d0d19142d700054ae1d908a1", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \t@Override \tprotected void saveSettings()", "signatureAfterChange": "  \t@Override \tprotected void saveSettings()", "diff": ["+\t\tfAptProject.getGeneratedFileManager().handlePreferenceChange(", "+\t\t\t\tAptPreferenceConstants.APT_GENSRCDIR, fOriginalGenSrcDir, fGenSrcDirField.getText());", "+\t\tfAptProject.getGeneratedFileManager().handlePreferenceChange(", "+\t\t\t\tAptPreferenceConstants.APT_ENABLED, ", "+\t\t\t\tBoolean.toString(fOriginalAptEnabled), ", "+\t\t\t\tBoolean.toString(fAptEnabledField.isSelected()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9248bf43c55b3698496ac4213324eb39", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyPackageFragmentRootOperation.java", "commitBeforeChange": "4b4dbca0bb97a8d7d91d56de2e2d0246704ead9c", "commitAfterChange": "f45c88f3e7a99f05a0822482d3d6807236a1c216", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprotected IClasspathEntry copy(IClasspathEntry entry) throws JavaModelException", "signatureAfterChange": " \tprotected IClasspathEntry copy(IClasspathEntry entry) throws JavaModelException", "diff": ["-\t\t\t\treturn JavaCore.newContainerEntry(entry.getPath(), entry.getInclusionPatterns(), entry.getExclusionPatterns(), entry.isExported());", "+\t\t\t\treturn JavaCore.newContainerEntry(entry.getPath(), entry.getAccessibleFiles(), entry.getNonAccessibleFiles(), entry.getExtraAttributes(), entry.isExported());", "-\t\t\t\t\treturn JavaCore.newLibraryEntry(this.destination, entry.getSourceAttachmentPath(), entry.getSourceAttachmentRootPath(), entry.getInclusionPatterns(), entry.getExclusionPatterns(), entry.isExported());", "+\t\t\t\t\treturn JavaCore.newLibraryEntry(this.destination, entry.getSourceAttachmentPath(), entry.getSourceAttachmentRootPath(), entry.getAccessibleFiles(), entry.getNonAccessibleFiles(), entry.getExtraAttributes(), entry.isExported());", "-\t\t\t\treturn JavaCore.newProjectEntry(entry.getPath(), entry.getInclusionPatterns(), entry.getExclusionPatterns(), entry.isExported());", "+\t\t\t\treturn JavaCore.newProjectEntry(entry.getPath(), entry.getAccessibleFiles(), entry.getNonAccessibleFiles(), entry.getExtraAttributes(), entry.isExported());", "-\t\t\t\treturn JavaCore.newSourceEntry(this.destination, entry.getInclusionPatterns(), entry.getExclusionPatterns(), entry.getOutputLocation());", "+\t\t\t\treturn JavaCore.newSourceEntry(this.destination, entry.getInclusionPatterns(), entry.getExclusionPatterns(), entry.getOutputLocation(), entry.getExtraAttributes());", "-\t\t\t\t\treturn JavaCore.newVariableEntry(entry.getPath(), entry.getSourceAttachmentPath(), entry.getSourceAttachmentRootPath(), entry.getInclusionPatterns(), entry.getExclusionPatterns(), entry.isExported());", "+\t\t\t\t\treturn JavaCore.newVariableEntry(entry.getPath(), entry.getSourceAttachmentPath(), entry.getSourceAttachmentRootPath(), entry.getAccessibleFiles(), entry.getNonAccessibleFiles(), entry.getExtraAttributes(), entry.isExported());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a96683a3e3755b1a84d644b1597e88e4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "f6b16290d9141509dffddf2d9dc5a88115698e2a", "commitAfterChange": "16151d07e4904ee08ac48f6566d670b6d78a3084", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tpublic boolean isCompatibleWith(TypeBinding left, Scope someScope)", "signatureAfterChange": " \t \tpublic boolean isCompatibleWith(TypeBinding left, Scope someScope)", "diff": ["+\t", "-\t\tif (this.shapeAnalysisComplete && squarePegInRoundHole(sam))", "-\t\t\treturn false;", "-\t\t", "+", "+\t\t\tif (this.shapeAnalysisComplete) {", "+\t\t\t\tif (squarePegInRoundHole(sam))", "+\t\t\t\t\treturn false;", "+\t\t\t} else {", "+\t\t\t\tLambdaExpression copy = copy();", "+\t\t\t\tcopy.setExpressionContext(this.expressionContext);", "+\t\t\t\tcopy.setExpectedType(left);", "+\t\t\t\tcopy.resolveType(this.enclosingScope);", "+\t\t\t\tthis.valueCompatible = copy.valueCompatible = copy.doesNotCompleteNormally();", "+\t\t\t\tthis.shapeAnalysisComplete = copy.shapeAnalysisComplete = true;", "+\t\t\t\tif (squarePegInRoundHole(sam))", "+\t\t\t\t\treturn false;", "+\t\t\t}", "+\t\t", "-\t\t\tif (!this.shapeAnalysisComplete) {", "-\t\t\t\tthis.valueCompatible = copy.doesNotCompleteNormally();", "-\t\t\t\tthis.shapeAnalysisComplete = true;", "-\t\t\t\tif (squarePegInRoundHole(sam))", "-\t\t\t\t\treturn false;", "-\t\t\t}", "+\t\t\t", "-\t\t\ttry {", "-\t\t\t\tfinal TypeBinding returnType = sam.returnType;", "-\t\t\t\tif (this.body instanceof Block) {", "-\t\t\t\t\tASTVisitor visitor = new ASTVisitor() {", "-\t\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope blockScope) {", "-\t\t\t\t\t\t\tExpression expression = returnStatement.expression;", "-\t\t\t\t\t\t\tif (expression != null && !expression.isAssignmentCompatible(returnType, blockScope))", "-\t\t\t\t\t\t\t\tthrow new NoncongruentLambdaException();", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t};", "-\t\t\t\t\tcopy.body.traverse(visitor, copy.scope);", "-\t\t\t\t} else {", "-\t\t\t\t\tExpression expression = (Expression) copy.body;", "-\t\t\t\t\tif (!expression.isAssignmentCompatible(returnType, copy.scope))", "-\t\t\t\t\t\tthrow new NoncongruentLambdaException();", "-\t\t\t\t}", "-\t\t\t} catch (NoncongruentLambdaException e) {", "-\t\t\t\treturn false;", "+\t\t\tfinal TypeBinding returnType = sam.returnType;", "+\t\t\tif (this.body instanceof Block) {", "+\t\t\t\tASTVisitor visitor = new ASTVisitor() {", "+\t\t\t\t\tpublic boolean visit(ReturnStatement returnStatement, BlockScope blockScope) {", "+\t\t\t\t\t\tExpression expression = returnStatement.expression;", "+\t\t\t\t\t\tif (expression != null && !expression.isAssignmentCompatible(returnType, blockScope))", "+\t\t\t\t\t\t\tthrow new IncongruentLambdaException();", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t};", "+\t\t\t\tcopy.body.traverse(visitor, copy.scope);", "+\t\t\t} else {", "+\t\t\t\tExpression expression = (Expression) copy.body;", "+\t\t\t\tif (!expression.isAssignmentCompatible(returnType, copy.scope))", "+\t\t\t\t\tthrow new IncongruentLambdaException();", "+\t\t\t ", "+\t\t} catch (IncongruentLambdaException e) {", "+\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5e595ba53967dc157605a181dc61c62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void add(IJavaElement element) throws JavaModelException", "signatureAfterChange": " public void add(IJavaElement element) throws JavaModelException", "diff": ["+\tPackageFragmentRoot root = null;", "-\t\t\tIPackageFragmentRoot root = (IPackageFragmentRoot)element;", "-\t\t\tIPath rootPath = root.getPath();", "+\t\t\troot = (PackageFragmentRoot)element;", "+\t\t\tIPath rootPath = root.internalPath();", "-\t\t\tIResource rootResource = root.getResource();", "+\t\t\tIResource rootResource = root.resource();", "-\t\t\troot = (IPackageFragmentRoot)element.getParent();", "+\t\t\troot = (PackageFragmentRoot)element.getParent();", "-\t\t\t\tIResource resource = element.getResource();", "+\t\t\t\tIResource resource = ((JavaElement) element).resource();", "-\t\t\t\t\t\tcontainerPath = root.getKind() == IPackageFragmentRoot.K_SOURCE ? root.getParent().getPath() : root.getPath();", "+\t\t\t\t\t\tcontainerPath = root.getKind() == IPackageFragmentRoot.K_SOURCE ? root.getParent().getPath() : root.internalPath();", "-\t\t\troot = (IPackageFragmentRoot) element.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);", "+\t\t\troot = (PackageFragmentRoot) element.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);", "-\t\t\t\trelativePath = Util.relativePath(getPath(element, false/*full path*/), 1/*remove project segmet*/);", "+\t\t\t\trelativePath = Util.relativePath(getPath(element, false/*full path*/), 1/*remove project segment*/);", "-\t\t\t\tcontainerPath = root.getPath();", "+\t\t\t\tcontainerPath = root.internalPath();", "-\tif (containerPath != null)", "-\t\taddEnclosingProjectOrJar(containerPath);", "+\tif (root != null)", "+\t\taddEnclosingProjectOrJar(root.getKind() == IPackageFragmentRoot.K_SOURCE ? root.getParent().getPath() : root.getPath());"]}], "num": 69180}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fbf612b689b54611591fdb6d7a533485", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "103b6bac16f2dcf7aa08ad7988a8e0be", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "888ff915accf0f7dc08ba845bca467c94f1e290b", "commitAfterChange": "f69c200469412ca3b93e80844c6c1f4e077169ac", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 46, "signatureBeforeChange": " public IJavaElement findSharedWorkingCopy(IBufferFactory factory)", "signatureAfterChange": " public IJavaElement findSharedWorkingCopy(IBufferFactory factory)", "diff": ["- */", "-public IJavaElement findSharedWorkingCopy(IBufferFactory factory) {", "-", "-\t// if factory is null, default factory must be used", "-\tif (factory == null) factory = this.getBufferManager().getDefaultBufferFactory();", "-", "-\t// In order to be shared, working copies have to denote the same compilation unit ", "-\t// AND use the same buffer factory.", "-\t// Assuming there is a little set of buffer factories, then use a 2 level Map cache.", "-\tMap sharedWorkingCopies = JavaModelManager.getJavaModelManager().sharedWorkingCopies;", "-\t", "-\tMap perFactoryWorkingCopies = (Map) sharedWorkingCopies.get(factory);", "-\tif (perFactoryWorkingCopies == null) return null;", "-\treturn (WorkingCopy)perFactoryWorkingCopies.get(this);", "-}", "+ */", "+public IJavaElement findSharedWorkingCopy(IBufferFactory factory) {", "+", "+\t// if factory is null, default factory must be used", "+\tif (factory == null) factory = this.getBufferManager().getDefaultBufferFactory();", "+", "+\t// In order to be shared, working copies have to denote the same compilation unit ", "+\t// AND use the same buffer factory.", "+\t// Assuming there is a little set of buffer factories, then use a 2 level Map cache.", "+\tMap sharedWorkingCopies = JavaModelManager.getJavaModelManager().sharedWorkingCopies;", "+\t", "+\tCompilationUnitOwner workingCopyOwner = new DefaultCompilationUnitOwner(factory, null);", "+\tMap perFactoryWorkingCopies = (Map) sharedWorkingCopies.get(workingCopyOwner);", "+\tif (perFactoryWorkingCopies == null) return null;", "+\treturn (CompilationUnit)perFactoryWorkingCopies.get(this);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b5785f923cf6ac21ee03050fc191fd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java", "commitBeforeChange": "e6216311ffab56ba03e084ce8ca3a0857f24301b", "commitAfterChange": "9cf9fd36cf0d3a6995c78921628703f8e713d766", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public boolean build(SimpleLookupTable deltas)", "signatureAfterChange": "  public boolean build(SimpleLookupTable deltas)", "diff": ["-\t\t\t\tClasspathLocation[] classFoldersAndJars = (ClasspathLocation[]) javaBuilder.binaryLocationsPerProject.get(keyTable[i]);", "+\t\t\t\tIProject p = (IProject) keyTable[i];", "+\t\t\t\tClasspathLocation[] classFoldersAndJars = (ClasspathLocation[]) javaBuilder.binaryLocationsPerProject.get(p);", "-\t\t\t\t\tif (!findAffectedSourceFiles(delta, classFoldersAndJars)) return false;", "+\t\t\t\t\tif (!findAffectedSourceFiles(delta, classFoldersAndJars, p)) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69107d9053cca8c2a831973b12f941cb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/FactoryPath.java", "commitBeforeChange": "c87413f1c3fa777cce7cb1df06542ffdf2ba70ba", "commitAfterChange": "dbb59802bd05ea277b4706afb85d6b75d5bdff2a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic Map<FactoryContainer, Attributes> getEnabledContainers(IJavaProject jproj)", "signatureAfterChange": "  \tpublic Map<FactoryContainer, Attributes> getEnabledContainers(IJavaProject jproj)", "diff": ["-\t\t\t\tmap.put(entry.getKey(), attr);", "+\t\t\t\tAttributes attrClone = new Attributes(attr);", "+\t\t\t\tmap.put(entry.getKey(), attrClone);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce1db34a33d70f29504988b0e354a1d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "e6021d67f030c85737aa105da719e9a09cfc30ed", "commitAfterChange": "47da1e1f50b1360a7b560d74dfe1c60303fec552", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 45, "signatureBeforeChange": " private void readParticipantsIndexNamesFile()", "signatureAfterChange": " private void readParticipantsIndexNamesFile()", "diff": ["-\t\t\t\t\t\tcontainers.put(new Path(new String(names[i])), new Path(new String(names[i+1])));", "+\t\t\t\t\t\tIndexLocation indexLocation = new FileIndexLocation(new File(new String(names[i])), true);", "+\t\t\t\t\t\tcontainers.put(indexLocation, new Path(new String(names[i+1])));"]}], "num": 41875}
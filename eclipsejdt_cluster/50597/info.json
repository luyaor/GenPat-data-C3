{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24c90f2feb2f51038229d53735e8c532", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70a5d7b2bdb914fb1549c13fd9249d07", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "f2edf9ba686cfe4ee8301f7995d717a549acb9e1", "commitAfterChange": "5e9cb8a680609e97a11e6fc9b255fcb2043219aa", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": " \tint computeRelevanceForCaseMatching(char[] token, char[] proposalName)", "signatureAfterChange": " \tint computeRelevanceForCaseMatching(char[] token, char[] proposalName)", "diff": ["-\t\tif (this.options.camelCaseMatch) {", "-\t\t\tif(CharOperation.equals(token, proposalName, true /* do not ignore case */)) {", "-\t\t\t\treturn R_CASE + R_EXACT_NAME;", "-\t\t\t} else if (CharOperation.prefixEquals(token, proposalName, true /* do not ignore case */)) {", "-\t\t\t\treturn R_CASE;", "-\t\t\t} else if (CharOperation.camelCaseMatch(token, proposalName)){", "-\t\t\t\treturn R_CAMEL_CASE;", "-\t\t\t} else if(CharOperation.equals(token, proposalName, false /* ignore case */)) {", "-\t\t\t\treturn R_EXACT_NAME;", "-\t\t\t}", "-\t\t} else if (CharOperation.prefixEquals(token, proposalName, true /* do not ignore case */)) {", "-\t\t\tif(CharOperation.equals(token, proposalName, true /* do not ignore case */)) {", "-\t\t\t\treturn R_CASE + R_EXACT_NAME;", "-\t\t\t} else {", "-\t\t\t\treturn R_CASE;", "-\t\t\t}", "-\t\t} else if(CharOperation.equals(token, proposalName, false /* ignore case */)) {", "+\t\tif(CharOperation.equals(token, proposalName, true)) {", "+\t\t\treturn R_EXACT_NAME + R_CASE;", "+\t\t} else if(CharOperation.equals(token, proposalName, false)) {", "+\t\t} else if (CharOperation.prefixEquals(token, proposalName, false)) {", "+\t\t\tif (CharOperation.prefixEquals(token, proposalName, true))", "+\t\t\t\treturn R_CASE;", "+\t\t} else if (this.options.camelCaseMatch && CharOperation.camelCaseMatch(token, proposalName)){", "+\t\t\t\treturn R_CAMEL_CASE;", "+\t\t} else if (this.options.substringMatch && CharOperation.substringMatch(token, proposalName)) {", "+\t\t\treturn R_SUBSTRING;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aba2e339113f89c593da85519a7e3513", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "21007a361f44cd3fd67e6cfde4f3050b918604ad", "commitAfterChange": "6521890902ffb79c05c99ec170c12e840bf5ba20", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": " \tpublic void updateCycleParticipants(IClasspathEntry[] preferredClasspath, ArrayList visited, HashSet cycleParticipants, IWorkspaceRoot workspaceRoot)", "signatureAfterChange": " \tpublic void updateCycleParticipants(IClasspathEntry[] preferredClasspath, ArrayList visited, HashSet cycleParticipants, IWorkspaceRoot workspaceRoot)", "diff": ["-", "-\t\tint index = visited.indexOf(this);", "-\t\tif (index >= 0){", "-\t\t\t// only consider direct participants inside the cycle", "-\t\t\tfor (int i = index, size = visited.size(); i < size; i++){", "-\t\t\t\tcycleParticipants.add(visited.get(i)); ", "-\t\t\t}", "-\t\t\treturn;", "-\t\t} else {", "-\t\t\tvisited.add(this);", "-\t\t}", "-\t\t", "+\t\tvisited.add(this);", "-\t\t\tIClasspathEntry[] classpath;", "-\t\t\tif (preferredClasspath == null) {", "-\t\t\t\tclasspath = getResolvedClasspath(true);", "-\t\t\t} else {", "-\t\t\t\tclasspath = preferredClasspath;", "-\t\t\t}", "+\t\t\tIClasspathEntry[] classpath = preferredClasspath == null ? getResolvedClasspath(true) : preferredClasspath;", "-\t\t\t\t\tif (!cycleParticipants.contains(this) || !cycleParticipants.contains(project)) // skip if both are already part of cycle", "+\t\t\t\t\tint index = visited.indexOf(project);", "+\t\t\t\t\tif (index == -1 && cycleParticipants.contains(project))", "+\t\t\t\t\t\tindex = visited.indexOf(this); // another loop in the cycle exists", "+\t\t\t\t\tif (index >= 0) { // only consider direct participants inside the cycle", "+\t\t\t\t\t\tfor (int size = visited.size(); index < size; index++)", "+\t\t\t\t\t\t\tcycleParticipants.add(visited.get(index)); ", "+\t\t\t\t\t} else {", "+\t\t\t\t\t}"]}], "num": 50597}
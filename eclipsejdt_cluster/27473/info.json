{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d9cd9f14e00d29ed5d0f093744ac455", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31429c3384366af44c7869b022fa92a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "6ec2bf68626c3baaf2de76ad471eae21612974d2", "commitAfterChange": "5f8cfe2efe8d090091876dd299bd5bd9c4957228", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void reset()", "signatureAfterChange": " public void reset()", "diff": ["-\tIWorkspace workspace = ResourcesPlugin.getWorkspace();", "+\tfinal IWorkspace workspace = ResourcesPlugin.getWorkspace();", "-\t\tthis.projectsToCheck = workspace.getRoot().getProjects();", "-\t\tfor (int i = 0, max = this.projectsToCheck == null ? 0 : this.projectsToCheck.length; i < max; i++){", "-\t\t\tIJavaProject project = JavaCore.create(this.projectsToCheck[i]);", "-\t\t\ttry {", "-\t\t\t\t// force to resolve CP variables before calling indexer - 19303 (indirectly through consistency check)", "-\t\t\t\tproject.getResolvedClasspath(true);", "-\t\t\t} catch (JavaModelException e) {", "-\t\t\t}", "-\t\t} ", "+\t\ttry {", "+\t\t\tJavaCore.run(", "+\t\t\t\tnew IWorkspaceRunnable() {", "+\t\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {", "+\t\t\t\t\t\tIndexManager.this.projectsToCheck = workspace.getRoot().getProjects();", "+\t\t\t\t\t\tfor (int i = 0, max = IndexManager.this.projectsToCheck == null ? 0 : IndexManager.this.projectsToCheck.length; i < max; i++){", "+\t\t\t\t\t\t\tIJavaProject project = JavaCore.create(IndexManager.this.projectsToCheck[i]);", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t// force to resolve CP variables before calling indexer - 19303 (indirectly through consistency check)", "+\t\t\t\t\t\t\t\tproject.getResolvedClasspath(true);", "+\t\t\t\t\t\t\t} catch (JavaModelException e) {", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} ", "+\t\t\t\t\t}", "+\t\t\t\t},", "+\t\t\t\tnull);", "+\t\t} catch (CoreException e) {", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "983b5531c4f1ed472040555ddff4d62d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java", "commitBeforeChange": "8726985690d5211d83787440cfdc69960f688cd3", "commitAfterChange": "b2bac1f114347c5119b74b76ba91158e0de76647", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 48, "signatureBeforeChange": "\r \tprivate static void updateVariableValues(\r \t\tString[] variableNames,\r \t\tIPath[] variablePaths,\r \t\tIProgressMonitor monitor) throws JavaModelException", "signatureAfterChange": "\r \tprivate static void updateVariableValues(\r \t\tString[] variableNames,\r \t\tIPath[] variablePaths,\r \t\tIProgressMonitor monitor) throws JavaModelException", "diff": ["+\t\tint size = affectedProjects.size();\r", "-\t\t\t\t\t\t\tmayChangeProjectDependencies);\r", "+\t\t\t\t\t\t\tsize == 1 && mayChangeProjectDependencies); // no individual check if more than 1 project to update\r", "+\t\t\t\t}\r", "+\t\t\t\tif (size > 1 && mayChangeProjectDependencies){\r", "+\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t// TOFIX\r", "+\t\t\t\t\t\t// use workspace runnable so as to allow marker creation - workaround bug 14733\r", "+\t\t\t\t\t\tResourcesPlugin.getWorkspace().run(\r", "+\t\t\t\t\t\t\tnew IWorkspaceRunnable() {\r", "+\t\t\t\t\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {\r", "+\t\t\t\t\t\t\t\t\tJavaProject.updateAllCycleMarkers(); // update them all at once\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}, \r", "+\t\t\t\t\t\t\tmonitor);\t\t\t\t\t\r", "+\t\t\t\t\t} catch(CoreException e){\r", "+\t\t\t\t\t\tthrow new JavaModelException(e);\r", "+\t\t\t\t\t}\r"]}], "num": 27473}
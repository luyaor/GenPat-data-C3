{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ab89e6c4cfeec5d4c7492448b58e0de", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3dd194a2c14e77e6d36e5b4ff6828b3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java", "commitBeforeChange": "26e0b0c271d5031424823a1070ef180ba24218bf", "commitAfterChange": "c84496f37e5dff715764911530c1fceaa60b14ee", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void generateOptimizedLogicalAnd( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "signatureAfterChange": " \tpublic void generateOptimizedLogicalAnd( \t\tBlockScope currentScope, \t\tCodeStream codeStream, \t\tLabel trueLabel, \t\tLabel falseLabel, \t\tboolean valueRequired)", "diff": ["+\t */", "-\t\t\t\t\tif ((bits & OnlyValueRequired) != 0) {", "-\t\t\t\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tright.generateOptimizedBoolean(", "-\t\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t\t}", "+\t\t\t\t\tright.generateOptimizedBoolean(", "+\t\t\t\t\t\tcurrentScope,", "+\t\t\t\t\t\tcodeStream,", "+\t\t\t\t\t\ttrueLabel,", "+\t\t\t\t\t\tfalseLabel,", "+\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t\tLabel internalTrueLabel = new Label(codeStream);", "-\t\t\t\t\tinternalTrueLabel.place();", "-\t\t\t\t\t\tif ((bits & OnlyValueRequired) != 0) {", "-\t\t\t\t\t\t\tcodeStream.iconst_0();", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tif (falseLabel != null) {", "-\t\t\t\t\t\t\t\t// implicit falling through the TRUE case", "-\t\t\t\t\t\t\t\tcodeStream.goto_(falseLabel);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (falseLabel != null) {", "+\t\t\t\t\t\t\t// implicit falling through the TRUE case", "+\t\t\t\t\t\t\tcodeStream.goto_(falseLabel);", "-\t\t\t\t\tif ((bits & OnlyValueRequired) != 0) {", "-\t\t\t\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tleft.generateOptimizedBoolean(", "-\t\t\t\t\t\t\tcurrentScope,", "-\t\t\t\t\t\t\tcodeStream,", "-\t\t\t\t\t\t\ttrueLabel,", "-\t\t\t\t\t\t\tfalseLabel,", "-\t\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t\t}", "+\t\t\t\t\tleft.generateOptimizedBoolean(", "+\t\t\t\t\t\tcurrentScope,", "+\t\t\t\t\t\tcodeStream,", "+\t\t\t\t\t\ttrueLabel,", "+\t\t\t\t\t\tfalseLabel,", "+\t\t\t\t\t\tvalueRequired);", "-\t\t\t\t\t\tif ((bits & OnlyValueRequired) != 0) {", "-\t\t\t\t\t\t\tcodeStream.iconst_0();", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tif (falseLabel != null) {", "-\t\t\t\t\t\t\t\t// implicit falling through the TRUE case", "-\t\t\t\t\t\t\t\tcodeStream.goto_(falseLabel);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (falseLabel != null) {", "+\t\t\t\t\t\t\t// implicit falling through the TRUE case", "+\t\t\t\t\t\t\tcodeStream.goto_(falseLabel);", "-\t\t\tif ((bits & OnlyValueRequired) == 0) {", "-\t\t\t\tif (falseLabel == null) {", "-\t\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t\t// implicit falling through the FALSE case", "-\t\t\t\t\t\tcodeStream.ifne(trueLabel);", "-\t\t\t\t\t}", "+\t\t\tif (falseLabel == null) {", "+\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t// implicit falling through the FALSE case", "+\t\t\t\t\tcodeStream.ifne(trueLabel);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t// implicit falling through the TRUE case", "+\t\t\t\tif (trueLabel == null) {", "+\t\t\t\t\tcodeStream.ifeq(falseLabel);", "-\t\t\t\t\t// implicit falling through the TRUE case", "-\t\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\t\tcodeStream.ifeq(falseLabel);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\t\t\t}", "+\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acebd0d5f1a8d2d8bc51b72c7f6e0b0b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "d7e7bb059880a6c87ea3290708d2d0a9f9e7ebe8", "commitAfterChange": "a415220ad0bdc743d286b40ccc481ededfe8132e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void generateOptimizedNonBooleanEqual(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "signatureAfterChange": " public void generateOptimizedNonBooleanEqual(BlockScope currentScope, CodeStream codeStream, Label trueLabel, Label falseLabel, boolean valueRequired)", "diff": ["-\t\t// optimized case: x == null", "-\t\tif (right.constant == NullConstant.Default) {", "-\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\tif (valueRequired) {", "-\t\t\t\tif (falseLabel == null) {", "-\t\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t\t// implicit falling through the FALSE case", "-\t\t\t\t\t\tcodeStream.ifnull(trueLabel);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// implicit falling through the TRUE case", "-\t\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\t\tcodeStream.ifnonnull(falseLabel);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t\t\treturn;", "-\t\t}", "-\t\t// optimized case: null == x", "-\t\tif (left.constant == NullConstant.Default) {", "-\t\t\tright.generateCode(currentScope, codeStream, valueRequired);", "-\t\t\tif (valueRequired) {", "-\t\t\t\tif (falseLabel == null) {", "-\t\t\t\t\tif (trueLabel != null) {", "-\t\t\t\t\t\t// implicit falling through the FALSE case", "-\t\t\t\t\t\tcodeStream.ifnull(trueLabel);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// implicit falling through the TRUE case", "-\t\t\t\t\tif (trueLabel == null) {", "-\t\t\t\t\t\tcodeStream.ifnonnull(falseLabel);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "-\t\t\treturn;", "-\t\t}", "+\t// null cases", "+\t// optimized case: x == null", "+\tif (right instanceof NullLiteral) {", "+\t\tif (left instanceof NullLiteral) {", "+\t\t\t// null == null", "+\t\t\tif (valueRequired) {", "+\t\t\t\tif (falseLabel == null) {", "+\t\t\t\t\t// implicit falling through the FALSE case", "+\t\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t\tcodeStream.goto_(trueLabel);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tleft.generateCode(currentScope, codeStream, valueRequired);", "+\t\t\tif (valueRequired) {", "+\t\t\t\tif (falseLabel == null) {", "+\t\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t\t// implicit falling through the FALSE case", "+\t\t\t\t\t\tcodeStream.ifnull(trueLabel);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t// implicit falling through the TRUE case", "+\t\t\t\t\tif (trueLabel == null) {", "+\t\t\t\t\t\tcodeStream.ifnonnull(falseLabel);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\treturn;", "+\t} else if (left instanceof NullLiteral) { // optimized case: null == x", "+\t\tright.generateCode(currentScope, codeStream, valueRequired);", "+\t\tif (valueRequired) {", "+\t\t\tif (falseLabel == null) {", "+\t\t\t\tif (trueLabel != null) {", "+\t\t\t\t\t// implicit falling through the FALSE case", "+\t\t\t\t\tcodeStream.ifnull(trueLabel);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t// implicit falling through the TRUE case", "+\t\t\t\tif (trueLabel == null) {", "+\t\t\t\t\tcodeStream.ifnonnull(falseLabel);", "+\t\t\t\t} else {", "+\t\t\t\t\t// no implicit fall through TRUE/FALSE --> should never occur", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tcodeStream.recordPositionsFrom(pc, this.sourceStart);", "+\t\treturn;", "+\t}", "+"]}], "num": 25981}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ccd206b4f628fc8cc460fcd0bd2bf278", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "446fda15b66909816064c0153d5f284e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "7eeea60289161cbc82181c2049d38d6375b340c4", "commitAfterChange": "bac0b688c9760eba84723fa01c9ef8fce3bf0175", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tpublic TypeBinding[] getSolutions(TypeVariableBinding[] typeParameters, InvocationSite site, BoundSet boundSet)", "signatureAfterChange": " \tpublic TypeBinding[] getSolutions(TypeVariableBinding[] typeParameters, InvocationSite site, BoundSet boundSet)", "diff": ["+\t\tInferenceVariable[] outerVariables = null;", "+\t\tif (this.outerContext != null && this.outerContext.stepCompleted < TYPE_INFERRED)", "+\t\t\touterVariables = this.outerContext.inferenceVariables;", "-\t\t\t\t\tsubstitutions[i] = boundSet.getInstantiation(variable, this.environment);", "+\t\t\t\t\tTypeBinding outerVar = null;", "+\t\t\t\t\tif (outerVariables != null && (outerVar = boundSet.getEquivalentOuterVariable(variable, outerVariables)) != null)", "+\t\t\t\t\t\tsubstitutions[i] = outerVar;", "+\t\t\t\t\telse", "+\t\t\t\t\t\tsubstitutions[i] = boundSet.getInstantiation(variable, this.environment);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0e8394394638c2e4bfb42c7d6fea014", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "7ceb7b86e5d2c6d0639c543a0b8998dc4ed1502e", "commitAfterChange": "9a7973aead32a6f88b27fa3f47ab00d5a6b3a410", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic InferenceVariable[] addTypeVariableSubstitutions(TypeBinding[] typeVariables)", "signatureAfterChange": " \tpublic InferenceVariable[] addTypeVariableSubstitutions(TypeBinding[] typeVariables)", "diff": ["-\t\tfor (int i = 0; i < typeVariables.length; i++)", "-\t\t\tnewVariables[i] = new InferenceVariable(typeVariables[i], this.variableCount++, this.currentInvocation, this.environment);", "+\t\tfor (int i = 0; i < typeVariables.length; i++) {", "+\t\t\tif (typeVariables[i] instanceof InferenceVariable)", "+\t\t\t\tnewVariables[i] = (InferenceVariable) typeVariables[i]; // prevent double substitution of an already-substituted inferenceVariable", "+\t\t\telse", "+\t\t\t\tnewVariables[i] = new InferenceVariable(typeVariables[i], this.variableCount++, this.currentInvocation, this.environment);", "+\t\t}"]}], "num": 16948}
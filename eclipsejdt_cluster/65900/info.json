{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50e936720ec3344701555952d6b61dac", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "481aa4a7f1c265265ad3e7afc2efdb63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "64d39f3567030242a0089e54dec7b20eb2379aa8", "commitAfterChange": "61bef0fdf04ab68e34740d553b6ad5e9433edc7e", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tprivate void updateIndex(Openable element, IResourceDelta delta)", "signatureAfterChange": " \tprivate void updateIndex(Openable element, IResourceDelta delta)", "diff": ["-\t\t\t\tif (kind == IResourceDelta.ADDED || kind == IResourceDelta.REMOVED) {", "+\t\t\t\tif (kind == IResourceDelta.ADDED || kind == IResourceDelta.REMOVED || (kind == IResourceDelta.CHANGED && (delta.getFlags() & IResourceDelta.LOCAL_CHANGED) != 0)) {", "+\t\t\t\t\tcase IResourceDelta.CHANGED:", "+\t\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.LOCAL_CHANGED) == 0)", "+\t\t\t\t\t\t\tbreak;", "-\t\t\t\tIPath binaryFolderPath = element.getPackageFragmentRoot().getPath();", "+\t\t\t\tPackageFragmentRoot root = element.getPackageFragmentRoot();", "+\t\t\t\tIPath binaryFolderPath = root.isExternal() && !root.isArchive() ? root.resource().getFullPath() : root.getPath();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dfe59fc6e097be95493e0a4a9bc6baa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/InternalASTRewrite.java", "commitBeforeChange": "7c282c0ddcdb6ffe774e195ad66f8c97fb6de3a9", "commitAfterChange": "dda313dbc0ef7350384ee6e9286488fe4d55d0ab", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \t \tvoid postCloneNodeEvent(ASTNode node, ASTNode clone)", "signatureAfterChange": " \t \t \tvoid postCloneNodeEvent(ASTNode node, ASTNode clone)", "diff": ["-\t\tthis.clonedNodes.put(clone, node);", "+\t\tif(node.ast == root.ast && clone.ast == root.ast) {", "+\t\t\tif((node.getFlags() & ASTNode.ORIGINAL) != 0) {", "+\t\t\t\tthis.clonedNodes.put(clone, node);", "+\t\t\t} else {", "+\t\t\t\t// node can be a cloned node", "+\t\t\t\tObject original = this.clonedNodes.get(node);", "+\t\t\t\tif(original != null) {", "+\t\t\t\t\tthis.clonedNodes.put(clone, original);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8792221a71d84b68a62d87311ec08a68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFlattener.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 43, "signatureBeforeChange": " \tpublic boolean visit(MethodDeclaration node)", "signatureAfterChange": " \tpublic boolean visit(MethodDeclaration node)", "diff": ["-\t\tprintModifiers(getIntAttribute(node, MethodDeclaration.MODIFIERS_PROPERTY), this.result);", "+\t\tif (node.getAST().apiLevel() == AST.JLS2) {", "+\t\t\tprintModifiers(getIntAttribute(node, MethodDeclaration.MODIFIERS_PROPERTY), this.result);", "+\t\t} else {", "+\t\t\tvisitList(node, MethodDeclaration.MODIFIERS2_PROPERTY, String.valueOf(' '), EMPTY, String.valueOf(' '));", "+\t\t}", "+\t\t", "-\t\t\tgetChildNode(node, MethodDeclaration.RETURN_TYPE_PROPERTY).accept(this);", "+\t\t\tif (node.getAST().apiLevel() == AST.JLS2) {", "+\t\t\t\tgetChildNode(node, MethodDeclaration.RETURN_TYPE_PROPERTY).accept(this);", "+\t\t\t} else {", "+\t\t\t\tASTNode returnType = getChildNode(node, MethodDeclaration.RETURN_TYPE2_PROPERTY);", "+\t\t\t\tif (returnType != null) {", "+\t\t\t\t\treturnType.accept(this);", "+\t\t\t\t} else {", "+\t\t\t\t\t// methods really ought to have a return type", "+\t\t\t\t\tthis.result.append(\"void\");//$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t}", "-\t\tvisitList(node, MethodDeclaration.THROWN_EXCEPTIONS_PROPERTY, String.valueOf(','), \" throws \"); //$NON-NLS-1$", "+\t\tvisitList(node, MethodDeclaration.THROWN_EXCEPTIONS_PROPERTY, String.valueOf(','), \" throws \", EMPTY); //$NON-NLS-1$"]}], "num": 65900}
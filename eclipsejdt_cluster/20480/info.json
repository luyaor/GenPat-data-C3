{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca7eaf79282a11b3921dec6e845245a4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c10ff05ff164fbb563b8ed8c1b711f15", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "54636126e97a957a9925b609910f59ea39210fc8", "commitAfterChange": "917603919e9d38772fd63709feb3bbda7696f523", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments)", "signatureAfterChange": "  \tprivate TextEdit probeFormatting(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments)", "diff": ["+\t\t\tint kind = -1;", "-\t\t\t\t\t\treturn formatComment(K_MULTI_LINE_COMMENT, source, indentationLevel, lineSeparator, regions, includeComments);", "+\t\t\t\t\t\tkind = K_MULTI_LINE_COMMENT;", "-\t\t\t\t\t\treturn formatComment(K_SINGLE_LINE_COMMENT, source, indentationLevel, lineSeparator, regions, includeComments);", "+\t\t\t\t\t\tkind = K_SINGLE_LINE_COMMENT;", "-\t\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=102780", "-\t\t\t\t\t\t// use the integrated comment formatter to format comment", "-\t\t\t\t\t\tif (ENABLE_NEW_JAVADOC_FORMAT || FORCE_NEW_COMMENT_FORMAT) {", "-\t\t\t\t\t\t\treturn formatJavadoc(source, indentationLevel, lineSeparator, regions);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t// In all other cases, use the old way to format javadoc comments", "-\t\t\t\t\t\tif (!PRINTED_OLD_JAVA_DOC_WARNING) {", "-\t\t\t\t\t\t\torg.eclipse.jdt.internal.core.util.Util.log(IStatus.WARNING, WARNING_JAVADOC_COMMENTS);", "-\t\t\t\t\t\t\tSystem.out.println(WARNING_JAVADOC_COMMENTS);", "-\t\t\t\t\t\t\tPRINTED_OLD_JAVA_DOC_WARNING = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn formatComment(K_JAVA_DOC, source, indentationLevel, lineSeparator, regions, includeComments);", "+\t\t\t\t\t\tkind = K_JAVA_DOC;", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tif (kind != -1) {", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=227043", "+\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=102780", "+\t\t\t\t// use the integrated comment formatter to format comment", "+\t\t\t\tif (ENABLE_NEW_COMMENTS_FORMAT || FORCE_NEW_COMMENTS_FORMAT) {", "+\t\t\t\t\treturn formatComment(kind, source, indentationLevel, lineSeparator, regions);", "+\t\t\t\t}", "+\t\t\t\t// In all other cases, use the old way to format javadoc comments", "+\t\t\t\tif (!PRINTED_FORMAT_COMMENTS_WARNING) {", "+\t\t\t\t\tif (DEBUG) System.out.println(WARNING_FORMAT_COMMENTS);", "+\t\t\t\t\tPRINTED_FORMAT_COMMENTS_WARNING = true;", "+\t\t\t\t}", "+\t\t\t\treturn formatComment(kind, source, indentationLevel, lineSeparator, regions, includeComments);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d98011f5de47a1b012876be41978e2fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "14ba43da4ca84e6aa2e4b0e2b6c660335b90691e", "commitAfterChange": "b7f39314c9eefd05e7002c31c87dcdb0333c0655", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "diff": ["-\t\t\t\t\thasLibFolder |= !org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(path.lastSegment());", "+\t\t\t\t\tObject target = JavaModel.getTarget(path, false/*don't check resource existence*/);", "+\t\t\t\t\thasLibFolder |= target instanceof IContainer;", "-\t\t\t\t\t|| (kind == IClasspathEntry.CPE_LIBRARY && !org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(entryPath.lastSegment()))){", "+\t\t\t\t\t|| (kind == IClasspathEntry.CPE_LIBRARY && (JavaModel.getTarget(entryPath, false/*don't check existence*/) instanceof IContainer))) {", "-\t\t\t\t\t\t\t\t\t\t&& !org.eclipse.jdt.internal.compiler.util.Util.isArchiveFileName(otherPath.lastSegment())))){", "+\t\t\t\t\t\t\t\t\t\t&& (JavaModel.getTarget(otherPath, false/*don't check existence*/) instanceof IContainer)))) {"]}], "num": 20480}
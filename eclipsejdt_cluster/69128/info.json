{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca931ac9c2b10a80f3845451c15e442d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ce9d469918d28bded30002a1a6a6607", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "c4e062ebcfc48b14b7c36c591e88d44ce5b3b5c0", "commitAfterChange": "7dd940af8bfbaf46f5a69ec7b85437ba951f7d8e", "methodNumberBeforeChange": 167, "methodNumberAfterChange": 167, "signatureBeforeChange": " \tprivate void findKeywordsForMember(char[] token, int modifiers)", "signatureAfterChange": " \tprivate void findKeywordsForMember(char[] token, int modifiers, ASTNode astNode)", "diff": ["-\tprivate void findKeywordsForMember(char[] token, int modifiers) {", "+\tprivate void findKeywordsForMember(char[] token, int modifiers, ASTNode astNode) {", "+\t\tif (astNode instanceof CompletionOnFieldType && ", "+\t        this.compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t        FieldBinding astNodeBinding = ((CompletionOnFieldType) astNode).binding;", "+\t        ReferenceBinding declaringClass = astNodeBinding != null ? astNodeBinding.declaringClass : null;", "+\t        if (declaringClass != null && declaringClass.isInterface() && !declaringClass.isAnnotationType())", "+\t            keywords[count++] = Keywords.DEFAULT;", "+\t    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2c0c34f1b09439d7f20099f88719db9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprotected TypeBinding getTypeBinding(Scope scope)", "signatureAfterChange": " \tprotected TypeBinding getTypeBinding(Scope scope)", "diff": ["-\t\tif (this.resolvedType != null)", "+\t\tif (this.resolvedType != null) {", "-", "+\t\t}", "-\t\tif (binding != null && !binding.isValidBinding())", "+\t\tif (binding != null && !binding.isValidBinding()) {", "+\t\t\tif (binding instanceof ProblemReferenceBinding && binding.problemId() == ProblemReasons.NotFound) {", "+\t\t\t\tProblemReferenceBinding problemBinding = (ProblemReferenceBinding) binding;", "+\t\t\t\tBinding pkg = scope.getTypeOrPackage(this.tokens);", "+\t\t\t\treturn new ProblemReferenceBinding(problemBinding.compoundName, pkg instanceof PackageBinding ? null : scope.environment().createMissingType(null, this.tokens), ProblemReasons.NotFound);", "+\t\t\t}", "-", "+\t\t}", "-\t\t\t\treturn this.resolvedType = null;", "+\t\t\t\treturn null;"]}], "num": 69128}
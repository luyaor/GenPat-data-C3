{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "140ffe7874464eca8e7150ca58d38d67", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38f2d4d683afd024688cb903c32ba9db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "c20e678de306d96dc52329a1b146045377d02fc2", "commitAfterChange": "dabb194bc3f00ca0451d7f77892036995b490fbd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "signatureAfterChange": " public void computeConversion(Scope scope, TypeBinding runtimeTimeType, TypeBinding compileTimeType)", "diff": ["-\t    \tsetGenericCast(length, originalType.genericCast(targetType));", "+\t    \tTypeBinding typeCast = originalType.genericCast(targetType);", "+\t    \tsetGenericCast(length, typeCast);", "+\t        if (typeCast instanceof ReferenceBinding) {", "+\t\t\t\tReferenceBinding referenceCast = (ReferenceBinding) typeCast;", "+\t\t\t\tif (!referenceCast.canBeSeenBy(scope)) {", "+\t\t        \tscope.problemReporter().invalidType(this, ", "+\t\t        \t\t\tnew ProblemReferenceBinding(", "+\t\t\t\t\t\t\t\tCharOperation.splitOn('.', referenceCast.shortReadableName()),", "+\t\t\t\t\t\t\t\treferenceCast,", "+\t\t\t\t\t\t\t\tProblemReasons.NotVisible));", "+\t\t\t\t}", "+\t        }\t\t\t    \t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3944bbf25c4ffcb01b37d2e8b3bcbb61", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "89326fe08eb871063f0f302034a5879455c90920", "commitAfterChange": "ac71706ae23042b90eea428f26829c71f167221e", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \t \tpublic void generateCode(ClassFile classFile)", "signatureAfterChange": " \t \tpublic void generateCode(ClassFile classFile)", "diff": ["-\t\tthis.body.generateCode(this.scope, codeStream);", "-\t\tif ((this.bits & ASTNode.NeedFreeReturn) != 0) {", "-\t\t\tcodeStream.return_();", "+\t\tif (this.body instanceof Block) {", "+\t\t\tthis.body.generateCode(this.scope, codeStream);", "+\t\t\tif ((this.bits & ASTNode.NeedFreeReturn) != 0) {", "+\t\t\t\tcodeStream.return_();", "+\t\t\t}", "+\t\t} else {", "+\t\t\tExpression expression = (Expression) this.body;", "+\t\t\texpression.generateCode(this.scope, codeStream, true);", "+\t\t\tif (this.binding.returnType == TypeBinding.VOID) {", "+\t\t\t\tcodeStream.return_();", "+\t\t\t} else {", "+\t\t\t\tcodeStream.generateReturnBytecode(expression);", "+\t\t\t}"]}], "num": 37710}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "97905c2cef634a8773513832e64e7fbb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a1f0156da4156c92cf13b3869a95e9d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "be4eba91f6e950a319d5fcff0a9532d13e1e01c3", "commitAfterChange": "7a1c3f0abab2342889b25f645c23994ef13ac53b", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " boolean reportIncompatibleReturnTypeError(MethodBinding currentMethod, MethodBinding inheritedMethod)", "signatureAfterChange": " boolean reportIncompatibleReturnTypeError(MethodBinding currentMethod, MethodBinding inheritedMethod)", "diff": ["+\t// JLS 3 \ufffd8.4.5: more are accepted, with an unchecked conversion", "+\tif (currentMethod.returnType == inheritedMethod.returnType.erasure()) {", "+\t\tTypeBinding[] currentParams = currentMethod.parameters;", "+\t\tTypeBinding[] inheritedParams = inheritedMethod.parameters;", "+\t\tfor (int i = 0, l = currentParams.length; i < l; i++) {", "+\t\t\tif (!areTypesEqual(currentParams[i], inheritedParams[i])) {", "+\t\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, inheritedMethod, this.type);", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77be6d635422cdff64455c14d5ccac53", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "faf7022339bfa34110b04d77b13d3b7d7c4de43f", "commitAfterChange": "da80cfa9ed625bab885e849d64ff277d071e3e84", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "signatureAfterChange": " void checkForBridgeMethod(MethodBinding currentMethod, MethodBinding inheritedMethod, MethodBinding[] allInheritedMethods)", "diff": ["-\t\tif (inheritedMethod.returnType.leafComponentType().isParameterizedType()) {", "-\t\t\tif (currentMethod.returnType.leafComponentType().isRawType())", "-\t\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, originalInherited, this.type);", "+\t\tif (inheritedMethod.returnType.leafComponentType().isParameterizedType() && currentMethod.returnType.leafComponentType().isRawType()) {", "+\t\t\tproblemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, originalInherited, this.type);"]}], "num": 26166}
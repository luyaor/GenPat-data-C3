{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "045854de7d2ca93247029bc73626f053", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "004ee49dcd4eb49a05855f2fb36b800d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 253, "methodNumberAfterChange": 253, "signatureBeforeChange": " \tpublic void test0235() throws JavaModelException", "signatureAfterChange": " \tpublic void test0235() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Wrong size\", 0, interfaces.length);", "+\t\tassertEquals(\"Wrong size\", 1, interfaces.length);", "+\t\tassertNotNull(\"No binding\", interfaces[0]);", "+\t\tassertEquals(\"Ltest0235/Zork;\", interfaces[0].getKey());", "+\t\tassertFalse(\"I should not be flagged as recovered\", typeBinding2.isRecovered());", "+\t\tassertTrue(\"Zork should be flagged as recovered\", interfaces[0].isRecovered());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b40302dc0ff20672a0c013e188b31366", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 254, "methodNumberAfterChange": 254, "signatureBeforeChange": " \tpublic void test0236() throws JavaModelException", "signatureAfterChange": " \tpublic void test0236() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Wrong size\", 1, interfaces.length);", "-\t\tassertNotNull(\"Should not be null\", interfaces[0]);", "+\t\tassertEquals(\"Wrong size\", 2, interfaces.length);", "+\t\tassertEquals(\"Ljava/lang/Runnable;\", interfaces[0].getKey());", "+\t\tassertFalse(\"Runnable should not be flagged as recovered\", interfaces[0].isRecovered());", "+\t\tassertEquals(\"LZork;\", interfaces[1].getKey());\t\t", "+\t\tassertTrue(\"Zork should be flagged as recovered\", interfaces[1].isRecovered());\t\t\t"]}], "num": 26225}
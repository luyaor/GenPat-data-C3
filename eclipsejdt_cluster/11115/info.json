{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "facfb8994c3205028ff20f574b000e81", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "260fc56c0c6bd29622eef5110151c96b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java", "commitBeforeChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "commitAfterChange": "495498c492866181dc63a6039b81ee18c37f454c", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 66, "signatureBeforeChange": " \t \tprivate void parseFlags()", "signatureAfterChange": " \t \tprivate void parseThrownExceptions()", "diff": ["-\tprivate void parseFlags() {", "-\t\tif (!this.scanner.isAtFlagsStart() || this.scanner.nextToken() != Scanner.FLAGS) return;", "-\t\tconsumeModifiers(this.scanner.getTokenSource());", "+\tprivate void parseThrownExceptions() {", "+\t\twhile (this.scanner.isAtThrownStart()) {", "+\t\t\tthis.scanner.skipThrownStart();", "+\t\t\tBindingKeyParser parser = newParser();", "+\t\t\tparser.parse();", "+\t\t\tconsumeParser(parser);", "+\t\t\tconsumeException();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4fcc4026cadd127be1ec3ba90a8c013", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/TokenManager.java", "commitBeforeChange": "b2b8c809039544e3b7857112d3dba58d84cc4820", "commitAfterChange": "8f8bb370f097d2a34f004c1d0b29e00cd828b5b6", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  \tpublic int findFirstTokenInLine(int startIndex, boolean includeWraps)", "signatureAfterChange": "  \tpublic int findFirstTokenInLine(int startIndex, boolean includeWraps, boolean includeForced)", "diff": ["-\tpublic int findFirstTokenInLine(int startIndex, boolean includeWraps) {", "+\tpublic int findFirstTokenInLine(int startIndex, boolean includeWraps, boolean includeForced) {", "-\t\t\tint lineBreaks = Math.max(token.getLineBreaksAfter(), previous.getLineBreaksBefore());", "-\t\t\tif (lineBreaks > 0 && (!includeWraps || previous.getWrapPolicy() == null))", "-\t\t\t\treturn i + 1;", "+\t\t\tif (token.getLineBreaksAfter() > 0 || previous.getLineBreaksBefore() > 0) {", "+\t\t\t\tboolean include = includeWraps && previous.getWrapPolicy() != null", "+\t\t\t\t\t\t&& (includeForced || previous.getWrapPolicy().wrapMode != WrapMode.FORCED);", "+\t\t\t\tif (!include)", "+\t\t\t\t\treturn i + 1;", "+\t\t\t}"]}], "num": 11115}
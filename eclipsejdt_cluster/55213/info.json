{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "830676095aa6b3e040aa20a3d5f71661", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a4114f173a93de1c15f4ee5a2ef4f73", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "ef0a598e8142fdc0982c3f62cf49d826edaa6505", "commitAfterChange": "89e5cfe6011c44c81db4c1b525146cb6d514af0e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tprivate void enterAbstractMethod(MethodInfo methodInfo)", "signatureAfterChange": " \tprivate void enterAbstractMethod(MethodInfo methodInfo)", "diff": ["-\t\t\tfMethodParameterNames[typeDepth] =methodInfo. parameterNames;", "+\t\t\tfMethodParameterNames[typeDepth] = methodInfo. parameterNames;", "+\t\t\t", "+\t\t\tif (methodInfo.typeParameters != null) {", "+\t\t\t\tfinal IType currentType = this.types[typeDepth];", "+\t\t\t\tIMethod method = currentType.getMethod(", "+\t\t\t\t\t\tfMemberName[typeDepth],", "+\t\t\t\t\t\tconvertTypeNamesToSigs(fMethodParameterTypes[typeDepth]));", "+\t\t\t\tif (method == null) return;", "+\t\t\t\t", "+\t\t\t\tfor (int i = 0, length = methodInfo.typeParameters.length; i < length; i++) {", "+\t\t\t\t\tfinal TypeParameterInfo typeParameterInfo = methodInfo.typeParameters[i];", "+\t\t\t\t\tfinal ITypeParameter typeParameter = method.getTypeParameter(new String(typeParameterInfo.name));", "+\t\t\t\t\tsetSourceRange(", "+\t\t\t\t\t\ttypeParameter,", "+\t\t\t\t\t\tnew SourceRange(", "+\t\t\t\t\t\t\ttypeParameterInfo.declarationStart,", "+\t\t\t\t\t\t\ttypeParameterInfo.declarationEnd - typeParameterInfo.declarationStart + 1),", "+\t\t\t\t\t\tnew SourceRange(", "+\t\t\t\t\t\t\ttypeParameterInfo.nameSourceStart,", "+\t\t\t\t\t\t\ttypeParameterInfo.nameSourceEnd - typeParameterInfo.nameSourceStart + 1));", "+\t\t\t\t}", "+\t\t\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87630dede8ce2809ddf7719dda913eeb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredType.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void updateFromParserState()", "signatureAfterChange": " public void updateFromParserState()", "diff": ["+\t\t} else if (parser.listTypeParameterLength > 0) {", "+\t\t\tint length = parser.listTypeParameterLength;", "+\t\t\tint genericsPtr = parser.genericsPtr;", "+\t\t\tboolean canConsume = genericsPtr + 1 >= length && parser.astPtr > -1;", "+\t\t\tif(canConsume) {", "+\t\t\t\tif (!(parser.astStack[parser.astPtr] instanceof TypeDeclaration)) {", "+\t\t\t\t\tcanConsume = false;", "+\t\t\t\t}", "+\t\t\t\twhile(genericsPtr + 1 > length && !(parser.genericsStack[genericsPtr] instanceof TypeParameter)) {", "+\t\t\t\t\tgenericsPtr--;", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tif(!(parser.genericsStack[genericsPtr - i] instanceof TypeParameter)) {", "+\t\t\t\t\t\tcanConsume = false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif(canConsume) {", "+\t\t\t\tTypeDeclaration typeDecl = (TypeDeclaration)parser.astStack[parser.astPtr];", "+\t\t\t\tSystem.arraycopy(parser.genericsStack, genericsPtr - length + 1, typeDecl.typeParameters = new TypeParameter[length], 0, length);", "+\t\t\t\ttypeDecl.bodyStart = typeDecl.typeParameters[length-1].declarationSourceEnd + 1;", "+\t\t\t\tparser.listTypeParameterLength = 0;", "+\t\t\t\tparser.lastCheckPoint = typeDecl.bodyStart;", "+\t\t\t}"]}], "num": 55213}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a429aef5395867b6cb3d9b822f3dd2bd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7060dca0053440fb191dc8fa344facc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "7b4fdf4780132144ccc7c2e7370ef3841befc3d9", "commitAfterChange": "6a5ede81dc60cc482d4fde0564e95e20c9055fee", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tprotected void verifyComments(String testNbre) throws JavaModelException", "signatureAfterChange": " \tprotected void verifyComments(String testNbre) throws JavaModelException", "diff": ["-\t\tHashtable commentsInfo = setSourceComment(source);", "+\t\tsetSourceComment(source);", "-\t\tassertEquals(\"Wrong number of comments\", commentsInfo.size(), unitComments.length);", "+\t\tassertEquals(\"Wrong number of comments\", this.comments.size(), unitComments.length);", "-\t\tEnumeration commentStrings = commentsInfo.keys();", "-\t\tEnumeration commentTags = commentsInfo.elements();", "+//\t\tEnumeration commentStrings = commentsInfo.keys();", "+//\t\tEnumeration commentTags = commentsInfo.elements();", "-\t\t\tString comment = (String) commentStrings.nextElement();", "-\t\t\tList tags = (List) commentTags.nextElement();", "+\t\t\tString comment = (String) this.comments.get(i);", "+\t\t\tList tags = (List) allTags.get(i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d921010434a1bf6835a0804d8bed27df", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyOwnerTests.java", "commitBeforeChange": "844b891620178c0b92403d6108fad8dcdac272df", "commitAfterChange": "f4f81968c0fa49af0ebd2fc1f35fb9113776c823", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic void testBecomeWorkingCopy2() throws CoreException", "signatureAfterChange": " \tpublic void testBecomeWorkingCopy2() throws CoreException", "diff": ["-\t\tICompilationUnit workingCopy = null;", "-\t\ttry {", "-\t\t\tworkingCopy = getCompilationUnit(\"P/X.java\").getWorkingCopy(new TestWorkingCopyOwner(), null, null);", "-\t\t\tassertTrue(\"should be in working copy mode\", workingCopy.isWorkingCopy());", "-\t\t\t", "-\t\t\tworkingCopy.becomeWorkingCopy(null, null);", "-\t\t\tassertTrue(\"should still be in working copy mode\", workingCopy.isWorkingCopy());", "-\t\t} finally {", "-\t\t\tif (workingCopy != null) {", "-\t\t\t\tworkingCopy.discardWorkingCopy();", "-\t\t\t}", "-\t\t}", "+\t\tthis.workingCopy = getCompilationUnit(\"P/X.java\").getWorkingCopy(new TestWorkingCopyOwner(), null, null);", "+\t\tassertTrue(\"should be in working copy mode\", this.workingCopy.isWorkingCopy());", "+\t\t", "+\t\tthis.workingCopy.becomeWorkingCopy(null, null);", "+\t\tassertTrue(\"should still be in working copy mode\", this.workingCopy.isWorkingCopy());"]}], "num": 54839}
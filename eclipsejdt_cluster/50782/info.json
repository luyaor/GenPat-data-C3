{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d406ab1685bdb726ed471a7fda5dc843", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6eda5d1c5a446706ea389d4169f19568", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "9275c96ab9e7e5e5f780672ec67bf57a1eb2d42e", "commitAfterChange": "437ac0488c92b5c24e88567c6caa0b204b0064ba", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void traverse(ASTVisitor visitor, MethodScope scope)", "signatureAfterChange": "  \tpublic void traverse(ASTVisitor visitor, MethodScope scope)", "diff": ["-\t\t\tthis.type.traverse(visitor, scope);", "+\t\t\tif (this.annotations != null) {", "+\t\t\t\tint annotationsLength = this.annotations.length;", "+\t\t\t\tfor (int i = 0; i < annotationsLength; i++)", "+\t\t\t\t\tthis.annotations[i].traverse(visitor, scope);", "+\t\t\t}", "+\t\t\tif (this.type != null) {", "+\t\t\t\tthis.type.traverse(visitor, scope);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88b923a4982e2313d5dca44a6f4e4dc7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "d301ae6c8664bf4508fc0872f1c0859eec725cae", "commitAfterChange": "1516301359d43aec61a19794e49b793ac0d752cf", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 89, "signatureBeforeChange": " \tprivate void runTest( \t\t\tboolean shouldFlushOutputDirectory, \t\t\tString[] testFiles, \t\t\tString[] classLibraries, \t\t\tMap customOptions, \t\t\tboolean performStatementsRecovery, \t\t\tICompilerRequestor customRequestor, \t\t\tboolean expectingCompilerErrors, \t\t\tString expectedCompilerLog, \t\t\tboolean forceExecution, \t\t\tString[] vmArguments, \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tJavacTestOptions javacTestOptions)", "signatureAfterChange": " \tprivate void runTest( \t\t\tboolean shouldFlushOutputDirectory, \t\t\tString[] testFiles, \t\t\tString[] classLibraries, \t\t\tMap customOptions, \t\t\tboolean performStatementsRecovery, \t\t\tICompilerRequestor customRequestor, \t\t\tboolean expectingCompilerErrors, \t\t\tString expectedCompilerLog, \t\t\tboolean forceExecution, \t\t\tString[] vmArguments, \t\t\tString expectedOutputString, \t\t\tString expectedErrorString, \t\t\tfinal ASTVisitor visitor, \t\t\tJavacTestOptions javacTestOptions)", "diff": ["+\t\t\tfinal ASTVisitor visitor,", "-\t\t\t\tgetProblemFactory());", "+\t\t\t\tgetProblemFactory()) {", "+\t\t\t\tpublic void process(org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration unit, int i) {", "+\t\t\t\t\tsuper.process(unit, i);", "+\t\t\t\t\tif (visitor != null) {", "+\t\t\t\t\t\tunit.traverse(visitor, unit.scope);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t};"]}], "num": 50782}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f36a2470d9a8f04dbffb8c35d693d67", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "204523c6df9fc1b4836181c79a67792b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java", "commitBeforeChange": "dd2a270d4bfbb4f228adb22be7333923f86c77e9", "commitAfterChange": "ba1917d8323b975c43d151520213a593a77dc7c0", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic JavaElementInfo getElementInfo() throws JavaModelException", "signatureAfterChange": " \tpublic Object getElementInfo() throws JavaModelException", "diff": ["-\tpublic JavaElementInfo getElementInfo() throws JavaModelException {", "+\tpublic Object getElementInfo() throws JavaModelException {", "+", "+\t\t// workaround to ensure parent project resolved classpath is available to avoid triggering initializers", "+\t\t// while the JavaModelManager lock is acquired (can cause deadlocks in clients)", "+\t\tIJavaProject project = getJavaProject();", "+\t\tif (project != null && !project.isOpen()) {", "+\t\t\t// TODO: need to revisit, since deadlock could still occur if perProjectInfo is removed concurrent before entering the lock", "+\t\t\tproject.getResolvedClasspath(true); // trigger all possible container/variable initialization outside the model lock", "+\t\t}", "+", "-\t\t\treturn (JavaElementInfo)info;", "+\t\t\treturn info;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "673751bca4b2956f48d2d19441ec385d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/FileIndexLocation.java", "commitBeforeChange": "0790094c582259a11cb5775cf9802758597e2f7f", "commitAfterChange": "8631fe374a0c007fcac770c2d9427a82a5e04a3d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic boolean createNewFile() throws IOException", "signatureAfterChange": "  \tpublic boolean createNewFile() throws IOException", "diff": ["+\t\tFile directory = this.indexFile.getParentFile();", "+\t\tif (directory != null && !directory.exists()) {", "+\t\t\tdirectory.mkdirs();", "+\t\t}", "+\t\t// always call File#createNewFile() so that the IOException is thrown if there is a failure"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a061b921c1ec85d2c3ec13e5f66960dd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "cb7fbd5992b1dc7d3fc64f9386005bd0e5774188", "commitAfterChange": "8c8cd78ee7d91af397b355193b993289ef7f4454", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 131, "signatureBeforeChange": "  \tprivate void addToResult(IClasspathEntry rawEntry, IClasspathEntry resolvedEntry, ResolvedClasspath result, \t\t\tLinkedHashSet resolvedEntries, ExternalFoldersManager externalFoldersManager, \t\t\tMap oldChainedEntriesMap, boolean addAsChainedEntry)", "signatureAfterChange": "  \tprivate void addToResult(IClasspathEntry rawEntry, IClasspathEntry resolvedEntry, ResolvedClasspath result, \t\t\tLinkedHashSet resolvedEntries, ExternalFoldersManager externalFoldersManager, \t\t\tMap oldChainedEntriesMap, boolean addAsChainedEntry)", "diff": ["+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=336046", "+\t\t// The source attachment path could be external too and in which case, must be added.", "+\t\tIPath sourcePath = resolvedEntry.getSourceAttachmentPath();", "+\t\tif (sourcePath != null && ExternalFoldersManager.isExternalFolderPath(sourcePath)) {", "+\t\t\texternalFoldersManager.addFolder(sourcePath, true);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aab41b8b65c68b86686dc9ff30a0e0f5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/FileIndexLocation.java", "commitBeforeChange": "df26c679ec361eae61785b6b440639645b574764", "commitAfterChange": "7e822612c4ed17c5f501a36859d0f7cd7f1c210d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic boolean createNewFile() throws IOException", "signatureAfterChange": "  \tpublic boolean createNewFile() throws IOException", "diff": ["+\t\tFile directory = this.indexFile.getParentFile();", "+\t\tif (directory != null && !directory.exists()) {", "+\t\t\tdirectory.mkdirs();", "+\t\t}", "+\t\t// always call File#createNewFile() so that the IOException is thrown if there is a failure"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd06cfe8cdd9390f36e7e9ebeb5b809b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredBlock.java", "commitBeforeChange": "c9d6ebaa0d13be6fc2e748dee3cae777e5c9d89a", "commitAfterChange": "0011958a7781b8e34a2680d48e8c358ce935fb15", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public RecoveredElement updateOnClosingBrace(int braceStart, int braceEnd)", "signatureAfterChange": "\r public RecoveredElement updateOnClosingBrace(int braceStart, int braceEnd)", "diff": ["+\t\tRecoveredInitializer initializer = enclosingInitializer();\r", "+\t\tif (initializer != null && initializer.initializerBody == this){\r", "+\t\t\treturn parent.updateOnClosingBrace(braceStart, braceEnd);\r", "+\t\t}\r"]}], "num": 69864}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "53daeea909f4ddec72822de1a0e58001", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ece8266196a051449bd50252eafaffd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 555, "methodNumberAfterChange": 555, "signatureBeforeChange": " \tpublic void test0537()", "signatureAfterChange": " \tpublic void test0537()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in X.java (at line 9)\\n\" +", "-\t\t\t\"\tClass c = Foo.class;\\n\" +", "-\t\t\t\"\t^^^^^\\n\" +", "-\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 10)\\n\" +", "-\t\t\t\"\tEnumSet<?> eSet = EnumSet.allOf(c);\\n\" +", "-\t\t\t\"\t                  ^^^^^^^^^^^^^^^^\\n\" +", "-\t\t\t\"Type safety: Unchecked invocation allOf(Class) of the generic method allOf(Class<E>) of type EnumSet\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. WARNING in X.java (at line 10)\\n\" +", "-\t\t\t\"\tEnumSet<?> eSet = EnumSet.allOf(c);\\n\" +", "-\t\t\t\"\t                                ^\\n\" +", "-\t\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<E>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. ERROR in X.java (at line 12)\\n\" +", "-\t\t\t\"\tZork z;\\n\" +", "-\t\t\t\"\t^^^^\\n\" +", "-\t\t\t\"Zork cannot be resolved to a type\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\t\"\tClass c = Foo.class;\\n\" + ", "+\t\t\t\"\t^^^^^\\n\" + ", "+\t\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tEnumSet<?> eSet = EnumSet.allOf(c);\\n\" + ", "+\t\t\t\"\t                  ^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation allOf(Class) of the generic method allOf(Class<E>) of type EnumSet\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tEnumSet<?> eSet = EnumSet.allOf(c);\\n\" + ", "+\t\t\t\"\t                                ^\\n\" + ", "+\t\t\t\"Type safety: The expression of type Class needs unchecked conversion to conform to Class<Enum<Enum<E>>>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 12)\\n\" + ", "+\t\t\t\"\tZork z;\\n\" + ", "+\t\t\t\"\t^^^^\\n\" + ", "+\t\t\t\"Zork cannot be resolved to a type\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5215817fb94a178e06c22ab731485165", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1356, "methodNumberAfterChange": 1356, "signatureBeforeChange": " public void test1325()", "signatureAfterChange": " public void test1325()", "diff": ["-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. WARNING in X.java (at line 5)\\n\" +", "-\t\t\t\"\tvoid bar(X x) {\\n\" +", "-\t\t\t\"\t         ^\\n\" +", "-\t\t\t\"X is a raw type. References to generic type X<E> should be parameterized\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. WARNING in X.java (at line 6)\\n\" +", "-\t\t\t\"\tX<String> xs2 = foo(x);\\n\" +", "-\t\t\t\"\t                ^^^^^^\\n\" +", "-\t\t\t\"Type safety: Unchecked invocation foo(X) of the generic method foo(X<T>) of type X<E>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"3. ERROR in X.java (at line 6)\\n\" +", "-\t\t\t\"\tX<String> xs2 = foo(x);\\n\" +", "-\t\t\t\"\t                ^^^^^^\\n\" +", "-\t\t\t\"Type mismatch: cannot convert from Object to X<String>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"4. WARNING in X.java (at line 6)\\n\" +", "-\t\t\t\"\tX<String> xs2 = foo(x);\\n\" +", "-\t\t\t\"\t                    ^\\n\" +", "-\t\t\t\"Type safety: The expression of type X needs unchecked conversion to conform to X<T>\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\t\"\tvoid bar(X x) {\\n\" + ", "+\t\t\t\"\t         ^\\n\" + ", "+\t\t\t\"X is a raw type. References to generic type X<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX<String> xs2 = foo(x);\\n\" + ", "+\t\t\t\"\t                ^^^^^^\\n\" + ", "+\t\t\t\"Type safety: Unchecked invocation foo(X) of the generic method foo(X<T>) of type X<E>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX<String> xs2 = foo(x);\\n\" + ", "+\t\t\t\"\t                ^^^^^^\\n\" + ", "+\t\t\t\"Type mismatch: cannot convert from Object to X<String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tX<String> xs2 = foo(x);\\n\" + ", "+\t\t\t\"\t                    ^\\n\" + ", "+\t\t\t\"Type safety: The expression of type X needs unchecked conversion to conform to X<Object>\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e25c208b424fd8886f28ff5969a0cd8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "9713cc0fc86fbe0881ff90c5290328149c35cbdc", "commitAfterChange": "236485921f70a82e4283431ca8763bf21e25e459", "methodNumberBeforeChange": 1032, "methodNumberAfterChange": 1032, "signatureBeforeChange": " public void test1008()", "signatureAfterChange": " public void test1008()", "diff": ["-\t\t\t\"\t\treturn null;\\n\" +", "+\t\t\t\"\t\treturn zork;\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"1. WARNING in X.java (at line 2)\\r\\n\" +", "-\t\t\"\tvoid foo(L l, C<? extends X> c) {\\r\\n\" +", "-\t\t\"\t         ^\\n\" +", "-\t\t\"L is a raw type. References to generic type L<E> should be parameterized\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"2. WARNING in X.java (at line 3)\\r\\n\" +", "-\t\t\"\tX x = bar(l, c);\\r\\n\" +", "-\t\t\"\t      ^^^^^^^^^\\n\" +", "-\t\t\"Type safety: Unchecked invocation bar(L, C) of the generic method bar(L<T>, C<? extends T>) of type X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"3. ERROR in X.java (at line 3)\\r\\n\" +", "-\t\t\"\tX x = bar(l, c);\\r\\n\" +", "-\t\t\"\t      ^^^^^^^^^\\n\" +", "-\t\t\"Type mismatch: cannot convert from Object to X\\n\" +", "-\t\t\"----------\\n\" +", "-\t\t\"4. WARNING in X.java (at line 3)\\r\\n\" +", "-\t\t\"\tX x = bar(l, c);\\r\\n\" +", "-\t\t\"\t          ^\\n\" +", "-\t\t\"Type safety: The expression of type L needs unchecked conversion to conform to L<T>\\n\" +", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\"\tvoid foo(L l, C<? extends X> c) {\\n\" + ", "+\t\t\"\t         ^\\n\" + ", "+\t\t\"L is a raw type. References to generic type L<E> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\"\tX x = bar(l, c);\\n\" + ", "+\t\t\"\t      ^^^^^^^^^\\n\" + ", "+\t\t\"Type safety: Unchecked invocation bar(L, C<capture#1-of ? extends X>) of the generic method bar(L<T>, C<? extends T>) of type X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\"\tX x = bar(l, c);\\n\" + ", "+\t\t\"\t      ^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Object to X\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\"\tX x = bar(l, c);\\n\" + ", "+\t\t\"\t          ^\\n\" + ", "+\t\t\"Type safety: The expression of type L needs unchecked conversion to conform to L<X>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\treturn zork;\\n\" + ", "+\t\t\"\t       ^^^^\\n\" + ", "+\t\t\"zork cannot be resolved\\n\" + "]}], "num": 58701}
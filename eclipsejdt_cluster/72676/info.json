{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a81dd6d4bf7900c37731c9cf59a898c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50d3f33a00405e3d4cbe369e1bc7c7e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "0fb012af3c6557520ab00415c58833602b027192", "commitAfterChange": "9b946cfc5e836db6230d5f068e2a6b12c282bcf4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void computePackageFragmentRoots( \t\tIClasspathEntry resolvedEntry, \t\tObjectVector accumulatedRoots,  \t\tHashSet rootIDs,  \t\tboolean insideOriginalProject, \t\tboolean checkExistency, \t\tboolean retrieveExportedRoots) throws JavaModelException", "signatureAfterChange": " \tpublic void computePackageFragmentRoots( \t\tIClasspathEntry resolvedEntry, \t\tObjectVector accumulatedRoots,  \t\tHashSet rootIDs,  \t\tboolean insideOriginalProject, \t\tboolean checkExistency, \t\tboolean retrieveExportedRoots) throws JavaModelException", "diff": ["-\t\t\t\t\t\t\tnew PackageFragmentRoot((IResource)target, this));", "+\t\t\t\t\t\t\tgetPackageFragmentRoot((IResource)target));", "-\t\t\t\t\tswitch (resource.getType()){", "-\t\t\t\t\t\tcase IResource.FOLDER :", "-\t\t\t\t\t\t\taccumulatedRoots.add(", "-\t\t\t\t\t\t\t\tnew PackageFragmentRoot(resource, this));", "-\t\t\t\t\t\t\trootIDs.add(rootID);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IResource.FILE :", "-\t\t\t\t\t\t\tif (Util.isArchiveFileName(resource.getName())) {", "-\t\t\t\t\t\t\t\taccumulatedRoots.add(", "-\t\t\t\t\t\t\t\t\tnew JarPackageFragmentRoot(resource, this));", "-\t\t\t\t\t\t\t\trootIDs.add(rootID);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "+\t\t\t\t\tIPackageFragmentRoot root = getPackageFragmentRoot(resource);", "+\t\t\t\t\tif (root != null) {", "+\t\t\t\t\t\taccumulatedRoots.add(root);", "+\t\t\t\t\t\trootIDs.add(rootID);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff671238ed6e0d37965ccee97e9e339c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "0848b8a6a9afff16623dfc6b0821adb833326b41", "commitAfterChange": "29d4a1149e392c0b5c052a9202992e800f5506a5", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "  public int nullStatus(FlowInfo flowInfo)", "signatureAfterChange": "  public int nullStatus(FlowInfo flowInfo, FlowContext flowContext)", "diff": ["+", "+public int nullStatus(FlowInfo flowInfo, FlowContext flowContext) {", "+\tLocalVariableBinding local = localVariableBinding();", "+\tif (local != null) {", "+\t\treturn flowInfo.nullStatus(local);", "+\t}", "+\treturn super.nullStatus(flowInfo, flowContext);", "-public int nullStatus(FlowInfo flowInfo) {", "-\tif (this.constant != null && this.constant != Constant.NotAConstant) {", "-\t\treturn FlowInfo.NON_NULL; // constant expression cannot be null", "-\t}", "-\tswitch (this.bits & ASTNode.RestrictiveFlagMASK) {", "-\t\tcase Binding.FIELD : // reading a field", "-\t\t\treturn FlowInfo.UNKNOWN;", "-\t\tcase Binding.LOCAL : // reading a local variable", "-\t\t\tLocalVariableBinding local = (LocalVariableBinding) this.binding;", "-\t\t\tif (local != null)", "-\t\t\t\treturn flowInfo.nullStatus(local);", "-\t}", "-\treturn FlowInfo.NON_NULL; // never get there", "-}"]}], "num": 72676}
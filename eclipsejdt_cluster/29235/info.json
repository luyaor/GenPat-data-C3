{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8fec5097d7ba5879aedb8af53f4c19f7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eb6c6a2ae0d432bedc972fc39e9a661", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyTests.java", "commitBeforeChange": "8af6f49f0322a862c037292d56394f4a3cb86b86", "commitAfterChange": "fe7b697ca16cd240df01b1ad29e35b2693b4b160", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  public static Test suite()", "signatureAfterChange": "  public static Test suite()", "diff": ["-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyCreation\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testCreation\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyContents\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGeneral\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyOperations\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyMultipleCommit\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyCustomizedBuffer\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyCustomizedBuffer2\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyShared1\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyShared2\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyOnClassFile\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyMoveTypeToAnotherWorkingCopy\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testContents\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGeneral\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testOperations\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testMultipleCommit\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testCustomizedBuffer\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testCustomizedBuffer2\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testShared1\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testShared2\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testOnClassFile\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testMoveTypeToAnotherWorkingCopy\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalBinaryElement\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalCU\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalElementNotInWorkingCopy\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalField\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalImportDeclaration\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalImportContainer\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalInitializer\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalInnerType\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalInnerField\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalInnerMethod\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalMethod\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalPackageDeclaration\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyGetOriginalType\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyRenameMethod\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyChangeContent\"));", "-\tsuite.addTest(new WorkingCopyTests(\"testWorkingCopyChangeContentOfReadOnlyCU\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalBinaryElement\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalCU\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalElementNotInWorkingCopy\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalField\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalImportDeclaration\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalImportContainer\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalInitializer\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalInnerType\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalInnerField\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalInnerMethod\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalMethod\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalPackageDeclaration\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testGetOriginalType\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testRenameMethod\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testChangeContent\"));", "+\tsuite.addTest(new WorkingCopyTests(\"testChangeContentOfReadOnlyCU\"));", "+\t", "+\tsuite.addTest(new WorkingCopyTests(\"testNonExistingCU\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9563803bd419950ec891a6fe2700daa9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest.java", "commitBeforeChange": "4ce47574d95f211bec6cf02737b4ec30e386f5b1", "commitAfterChange": "6c173db4ca33e9b5b355fdac19466f82485aafe6", "methodNumberBeforeChange": 342, "methodNumberAfterChange": 342, "signatureBeforeChange": " \tpublic void test0341() throws JavaModelException", "signatureAfterChange": " \tpublic void test0341() throws JavaModelException", "diff": ["-\t\t\t\t\"if (field != null) {\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new IOException();\\r\\n\" +", "-\t\t\t\t\"\t\t} else if (field == null) {\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new MalformedURLException();\\r\\n\" +", "-\t\t\t\t\"\t\t} else if (field == null) {\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new InterruptedIOException();\\r\\n\" +", "-\t\t\t\t\"\t\t} else {\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new UnsupportedEncodingException();\\r\\n\" +", "+\t\t\t\t\"if (field != null) {\\n\" +", "+\t\t\t\t\"\t\t\tthrow new IOException();\\n\" +", "+\t\t\t\t\"\t\t} else if (field == null) {\\n\" +", "+\t\t\t\t\"\t\t\tthrow new MalformedURLException();\\n\" +", "+\t\t\t\t\"\t\t} else if (field == null) {\\n\" +", "+\t\t\t\t\"\t\t\tthrow new InterruptedIOException();\\n\" +", "+\t\t\t\t\"\t\t} else {\\n\" +", "+\t\t\t\t\"\t\t\tthrow new UnsupportedEncodingException();\\n\" +", "-\t\t\t\t\"{\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new IOException();\\r\\n\" +", "+\t\t\t\t\"{\\n\" +", "+\t\t\t\t\"\t\t\tthrow new IOException();\\n\" +", "-\t\t\t\t\"if (field == null) {\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new MalformedURLException();\\r\\n\" +", "-\t\t\t\t\"\t\t} else if (field == null) {\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new InterruptedIOException();\\r\\n\" +", "-\t\t\t\t\"\t\t} else {\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new UnsupportedEncodingException();\\r\\n\" +", "+\t\t\t\t\"if (field == null) {\\n\" +", "+\t\t\t\t\"\t\t\tthrow new MalformedURLException();\\n\" +", "+\t\t\t\t\"\t\t} else if (field == null) {\\n\" +", "+\t\t\t\t\"\t\t\tthrow new InterruptedIOException();\\n\" +", "+\t\t\t\t\"\t\t} else {\\n\" +", "+\t\t\t\t\"\t\t\tthrow new UnsupportedEncodingException();\\n\" +", "-\t\t\t\t\"{\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new MalformedURLException();\\r\\n\" +", "+\t\t\t\t\"{\\n\" +", "+\t\t\t\t\"\t\t\tthrow new MalformedURLException();\\n\" +", "-\t\t\t\t\"if (field == null) {\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new InterruptedIOException();\\r\\n\" +", "-\t\t\t\t\"\t\t} else {\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new UnsupportedEncodingException();\\r\\n\" +", "+\t\t\t\t\"if (field == null) {\\n\" +", "+\t\t\t\t\"\t\t\tthrow new InterruptedIOException();\\n\" +", "+\t\t\t\t\"\t\t} else {\\n\" +", "+\t\t\t\t\"\t\t\tthrow new UnsupportedEncodingException();\\n\" +", "-\t\t\t\t\"{\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new InterruptedIOException();\\r\\n\" +", "+\t\t\t\t\"{\\n\" +", "+\t\t\t\t\"\t\t\tthrow new InterruptedIOException();\\n\" +", "-\t\t\t\t\"{\\r\\n\" +", "-\t\t\t\t\"\t\t\tthrow new UnsupportedEncodingException();\\r\\n\" +", "+\t\t\t\t\"{\\n\" +", "+\t\t\t\t\"\t\t\tthrow new UnsupportedEncodingException();\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e517fa8ced1e65f5fae1de0116473aa0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ForeachStatementTest.java", "commitBeforeChange": "bba2bca88efef9ed01c7e2181bcf1d41e5989888", "commitAfterChange": "bf39b08bac5fe04538b98cd37961d265ad6d7cd8", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void test022()", "signatureAfterChange": " public void test022()", "diff": ["-\t\t\"     0  new #17 java/util/ArrayList\\n\" + ", "+\t\t\"     0  new java/util/ArrayList [17]\\n\" + ", "-\t\t\"     4  invokespecial #18 <Method java/util/ArrayList.<init>()V>\\n\" + ", "-\t\t\"     7  astore_1\\n\" + ", "+\t\t\"     4  invokespecial java/util/ArrayList.<init>()V [18]\\n\" + ", "+\t\t\"     7  astore_1 [arrayList]\\n\" + ", "-\t\t\"     9  istore_2\\n\" + ", "+\t\t\"     9  istore_2 [i]\\n\" + ", "-\t\t\"    13  aload_1\\n\" + ", "-\t\t\"    14  new #20 java/lang/Integer\\n\" + ", "+\t\t\"    13  aload_1 [arrayList]\\n\" + ", "+\t\t\"    14  new java/lang/Integer [20]\\n\" + ", "-\t\t\"    18  iload_2\\n\" + ", "-\t\t\"    19  invokespecial #23 <Method java/lang/Integer.<init>(I)V>\\n\" + ", "-\t\t\"    22  invokevirtual #27 <Method java/util/ArrayList.add(Ljava/lang/Object;)Z>\\n\" + ", "+\t\t\"    18  iload_2 [i]\\n\" + ", "+\t\t\"    19  invokespecial java/lang/Integer.<init>(I)V [23]\\n\" + ", "+\t\t\"    22  invokevirtual java/util/ArrayList.add(Ljava/lang/Object;)Z [27]\\n\" + ", "-\t\t\"    26  iinc 2 1\\n\" + ", "-\t\t\"    29  iload_2\\n\" + ", "+\t\t\"    26  iinc 2 1 [i]\\n\" + ", "+\t\t\"    29  iload_2 [i]\\n\" + ", "-\t\t\"    36  istore_2\\n\" + ", "-\t\t\"    37  aload_1\\n\" + ", "-\t\t\"    38  invokevirtual #31 <Method java/util/ArrayList.iterator()Ljava/util/Iterator;>\\n\" + ", "-\t\t\"    41  astore 4\\n\" + ", "+\t\t\"    36  istore_2 [i]\\n\" + ", "+\t\t\"    37  aload_1 [arrayList]\\n\" + ", "+\t\t\"    38  invokevirtual java/util/ArrayList.iterator()Ljava/util/Iterator; [31]\\n\" + ", "+\t\t\"    41  astore [local_4]\\n\" + ", "-\t\t\"    46  aload 4\\n\" + ", "-\t\t\"    48  invokeinterface [nargs : 1] #37 <Interface method java/util/Iterator.next()Ljava/lang/Object;>\\n\" + ", "-\t\t\"    53  checkcast #20 java/lang/Integer\\n\" + ", "-\t\t\"    56  astore_3\\n\" + ", "-\t\t\"    57  iload_2\\n\" + ", "-\t\t\"    58  aload_3\\n\" + ", "-\t\t\"    59  invokevirtual #41 <Method java/lang/Integer.intValue()I>\\n\" + ", "+\t\t\"    46  aload [local_4]\\n\" + ", "+\t\t\"    48  invokeinterface java/util/Iterator.next()Ljava/lang/Object; [37] [nargs: 1]\\n\" + ", "+\t\t\"    53  checkcast java/lang/Integer [20]\\n\" + ", "+\t\t\"    56  astore_3 [e]\\n\" + ", "+\t\t\"    57  iload_2 [i]\\n\" + ", "+\t\t\"    58  aload_3 [e]\\n\" + ", "+\t\t\"    59  invokevirtual java/lang/Integer.intValue()I [41]\\n\" + ", "-\t\t\"    63  istore_2\\n\" + ", "-\t\t\"    64  aload 4\\n\" + ", "-\t\t\"    66  invokeinterface [nargs : 1] #45 <Interface method java/util/Iterator.hasNext()Z>\\n\" + ", "+\t\t\"    63  istore_2 [i]\\n\" + ", "+\t\t\"    64  aload [local_4]\\n\" + ", "+\t\t\"    66  invokeinterface java/util/Iterator.hasNext()Z [45] [nargs: 1]\\n\" + ", "-\t\t\"    74  getstatic #51 <Field java/lang/System.out Ljava/io/PrintStream;>\\n\" + ", "-\t\t\"    77  iload_2\\n\" + ", "-\t\t\"    78  invokevirtual #56 <Method java/io/PrintStream.println(I)V>\\n\" + ", "+\t\t\"    74  getstatic java/lang/System.out Ljava/io/PrintStream; [51]\\n\" + ", "+\t\t\"    77  iload_2 [i]\\n\" + ", "+\t\t\"    78  invokevirtual java/io/PrintStream.println(I)V [56]\\n\" + "]}], "num": 29235}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f8a2561508a09e12db5a506eb4845e9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "171d3ee58546c493bb219b9003397c35", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "01e509448d7e8ce35b916b42d2b7e86284f0209d", "commitAfterChange": "22a834a98ee15054e5c5a6c83029376faf3ab633", "methodNumberBeforeChange": 1233, "methodNumberAfterChange": 1233, "signatureBeforeChange": " public void test1203a()", "signatureAfterChange": " public void test1203a()", "diff": ["-\tString expectedOutput = this.complianceLevel < ClassFileConstants.JDK1_7", "-\t\t? \t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "-\t\t\t\"\treturn X.<String>foo(one, two);\\n\" + ", "-\t\t\t\"\t                 ^^^\\n\" + ", "-\t\t\t\"The method foo(String, String) of type X is not generic; it cannot be parameterized with arguments <String>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "-\t\t\t\"\treturn this.<String>bar(one, two);\\n\" + ", "-\t\t\t\"\t                    ^^^\\n\" + ", "-\t\t\t\"The method bar(String, String) of type X is not generic; it cannot be parameterized with arguments <String>\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t: \t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "-\t\t\t\"\treturn X.<String>foo(one, two);\\n\" + ", "-\t\t\t\"\t          ^^^^^^\\n\" + ", "-\t\t\t\"Unused type arguments for the non generic method foo(String, String) of type X; it should not be parameterized with arguments <String>\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "-\t\t\t\"\treturn this.<String>bar(one, two);\\n\" + ", "-\t\t\t\"\t             ^^^^^^\\n\" + ", "-\t\t\t\"Unused type arguments for the non generic method bar(String, String) of type X; it should not be parameterized with arguments <String>\\n\" + ", "-\t\t\t\"----------\\n\";", "-\t", "-\tthis.runNegativeTest(", "+\tString[] sources =", "-\t\t},", "-\t\texpectedOutput);", "+\t\t};", "+\tif (this.complianceLevel < ClassFileConstants.JDK1_7) {", "+\t\trunNegativeTest(", "+\t\t\tsources,", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\treturn X.<String>foo(one, two);\\n\" + ", "+\t\t\t\"\t                 ^^^\\n\" + ", "+\t\t\t\"The method foo(String, String) of type X is not generic; it cannot be parameterized with arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\treturn this.<String>bar(one, two);\\n\" + ", "+\t\t\t\"\t                    ^^^\\n\" + ", "+\t\t\t\"The method bar(String, String) of type X is not generic; it cannot be parameterized with arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t} else {", "+\t\trunConformTest(", "+\t\t\ttrue,", "+\t\t\tsources,", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\treturn X.<String>foo(one, two);\\n\" + ", "+\t\t\t\"\t          ^^^^^^\\n\" + ", "+\t\t\t\"Unused type arguments for the non generic method foo(String, String) of type X; it should not be parameterized with arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\treturn this.<String>bar(one, two);\\n\" + ", "+\t\t\t\"\t             ^^^^^^\\n\" + ", "+\t\t\t\"Unused type arguments for the non generic method bar(String, String) of type X; it should not be parameterized with arguments <String>\\n\" + ", "+\t\t\t\"----------\\n\",", "+\t\t\tnull, null,", "+\t\t\tJavacTestOptions.Excuse.EclipseHasSomeMoreWarnings);\t\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eff1c815143062cbd2a344b2ca115c90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "4e700a9e3cdab5cede60d95c3f4cde7257971ca3", "commitAfterChange": "d752b26e3a6a22a0d2aea83eca1f4ca2bd2e36dd", "methodNumberBeforeChange": 203, "methodNumberAfterChange": 204, "signatureBeforeChange": " \tpublic void test071()", "signatureAfterChange": " \tpublic void test071()", "diff": ["-\t\tString expectedOutput = new CompilerOptions(getCompilerOptions()).sourceLevel < ClassFileConstants.JDK1_6", "-\t\t?\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in D.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\t@Override void m(Number t) {}\\r\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method m(Number) of type D has the same erasure as m(T) of type A<T> but does not override it\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in D.java (at line 2)\\r\\n\" + ", "-\t\t\t\"\t@Override void m(Number t) {}\\r\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method m(Number) of type D must override a superclass method\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in D.java (at line 6)\\r\\n\" + ", "-\t\t\t\"\tclass B<S extends Integer> extends A<S> { @Override void m(S t) {} }\\r\\n\" + ", "-\t\t\t\"\t                  ^^^^^^^\\n\" + ", "-\t\t\t\"The type parameter S should not be bounded by the final type Integer. Final types cannot be further extended\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t:\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in D.java (at line 2)\\n\" + ", "-\t\t\t\"\t@Override void m(Number t) {}\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method m(Number) of type D has the same erasure as m(T) of type A<T> but does not override it\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in D.java (at line 2)\\n\" + ", "-\t\t\t\"\t@Override void m(Number t) {}\\n\" + ", "-\t\t\t\"\t               ^^^^^^^^^^^\\n\" + ", "-\t\t\t\"The method m(Number) of type D must override or implement a supertype method\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"3. WARNING in D.java (at line 6)\\n\" + ", "-\t\t\t\"\tclass B<S extends Integer> extends A<S> { @Override void m(S t) {} }\\n\" + ", "-\t\t\t\"\t                  ^^^^^^^\\n\" + ", "-\t\t\t\"The type parameter S should not be bounded by the final type Integer. Final types cannot be further extended\\n\" + ", "-\t\t\t\"----------\\n\";", "-\t\t\texpectedOutput);", "+\t\t\t\"----------\\n\" +", "+\t\t\t\"1. ERROR in D.java (at line 2)\\r\\n\" + ", "+\t\t\t\"\t@Override void m(Number t) {}\\r\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method m(Number) of type D has the same erasure as m(T) of type A<T> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in D.java (at line 2)\\r\\n\" + ", "+\t\t\t\"\t@Override void m(Number t) {}\\r\\n\" + ", "+\t\t\t\"\t               ^^^^^^^^^^^\\n\" + ", "+\t\t\tmustOverrideMessage(\"m(Number)\", \"D\") + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in D.java (at line 6)\\r\\n\" + ", "+\t\t\t\"\tclass B<S extends Integer> extends A<S> { @Override void m(S t) {} }\\r\\n\" + ", "+\t\t\t\"\t                  ^^^^^^^\\n\" + ", "+\t\t\t\"The type parameter S should not be bounded by the final type Integer. Final types cannot be further extended\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);"]}], "num": 23070}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8957cc8a578344114c484e7e1141bb6f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "371611ac384c1fc510e53b320b076e50", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "8c41a552c98522f907517ef76590c1165afbc25d", "commitAfterChange": "ea85eda7fc7c200244e30957006ea59d3760120d", "methodNumberBeforeChange": 969, "methodNumberAfterChange": 969, "signatureBeforeChange": " public void test0946()", "signatureAfterChange": " public void test0946()", "diff": ["-\tthis.runConformTest(", "-\t\tnew String[] {", "-\t\t\"X.java\", //================================", "-\t\t\"public class X {\\n\" + ", "-\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "-\t\t\"\t\toperate(Operations.create());\\n\" + ", "-\t\t\"\t}\\n\" + ", "-\t\t\"\tstatic <O extends Num<O>> void operate(Operators<O> operators) {\\n\" + ", "-\t\t\"\t\tSystem.out.println(operators.spawn());\\n\" + ", "-\t\t\"\t}\\n\" + ", "-\t\t\"}\\n\" + ", "-\t\t\"class Operations {\\n\" + ", "-\t\t\"\tstatic Operators<?> create() {\\n\" + ", "-\t\t\"\t\treturn new IntOperators();\\n\" + ", "-\t\t\"\t}\\n\" + ", "-\t\t\"}\\n\" + ", "-\t\t\"interface Num<O> {\\n\" + ", "-\t\t\"\tpublic O spawn();\\n\" + ", "-\t\t\"}\\n\" + ", "-\t\t\"class Int implements Num<Int> {\\n\" + ", "-\t\t\"\tpublic Int spawn() {\\n\" + ", "-\t\t\"\t\treturn new Int();\\n\" + ", "-\t\t\"\t}\\n\" + ", "-\t\t\"  public String toString() {\\n\" +", "-\t\t\"    return \\\"Int\\\";\\n\" +", "-\t\t\"  }\\n\" +", "-\t\t\"}\\n\" + ", "-\t\t\"interface Operators<O extends Num<O>> {\\n\" + ", "-\t\t\"\tO spawn();\\n\" + ", "-\t\t\"}\\n\" + ", "-\t\t\"class IntOperators implements Operators<Int> {\\n\" + ", "-\t\t\"\tpublic Int spawn() {\\n\" + ", "-\t\t\"\t\treturn new Int();\\n\" + ", "-\t\t\"\t}\\n\" + ", "-\t\t\"}\\n\",", "+\trunConformTest(", "+\t\t// test directory preparation", "+\t\ttrue /* flush output directory */, ", "+\t\tnew String[] { /* test files */", "+\t\t\t\"X.java\", //================================", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"\tpublic static void main(String[] args) {\\n\" + ", "+\t\t\t\"\t\toperate(Operations.create());\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"\tstatic <O extends Num<O>> void operate(Operators<O> operators) {\\n\" + ", "+\t\t\t\"\t\tSystem.out.println(operators.spawn());\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class Operations {\\n\" + ", "+\t\t\t\"\tstatic Operators<?> create() {\\n\" + ", "+\t\t\t\"\t\treturn new IntOperators();\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"interface Num<O> {\\n\" + ", "+\t\t\t\"\tpublic O spawn();\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class Int implements Num<Int> {\\n\" + ", "+\t\t\t\"\tpublic Int spawn() {\\n\" + ", "+\t\t\t\"\t\treturn new Int();\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"  public String toString() {\\n\" +", "+\t\t\t\"    return \\\"Int\\\";\\n\" +", "+\t\t\t\"  }\\n\" +", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"interface Operators<O extends Num<O>> {\\n\" + ", "+\t\t\t\"\tO spawn();\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"class IntOperators implements Operators<Int> {\\n\" + ", "+\t\t\t\"\tpublic Int spawn() {\\n\" + ", "+\t\t\t\"\t\treturn new Int();\\n\" + ", "+\t\t\t\"\t}\\n\" + ", "+\t\t\t\"}\\n\",", "-\t\t\"Int\");", "+\t\t// compiler results", "+\t\tnull /* do not check compiler log */,", "+\t\t// runtime results", "+\t\t\"Int\" /* expected output string */,", "+\t\t\"\" /* expected error string */,", "+\t\t// javac options", "+\t\tJavacTestOptions.JavacHasABug.JavacBugFixed_6_10 /* javac test options */);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c176ca3c440e07aa787957b065c2e874", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "6309a9b2aeb767c0183db42672308082688897e5", "commitAfterChange": "9d3443d9ed27d5bf1a9ba003a556b60eecb97c38", "methodNumberBeforeChange": 1274, "methodNumberAfterChange": 1275, "signatureBeforeChange": " public void test1244()", "signatureAfterChange": " public void test1244()", "diff": ["-\tthis.runConformTest(", "-\t\tnew String[] {", "-\t\t\t\t\"X.java\",", "-\t\t\t\t\"public class X {\\n\" + ", "-\t\t\t\t\"  static class MyEntry extends Pool.AbstractEntry<MyEntry> { }  \\n\" + ", "-\t\t\t\t\"  static final Pool<MyEntry> pool=new Pool<MyEntry>() {\\n\" + ", "-\t\t\t\t\"    @Override\\n\" + ", "-\t\t\t\t\"    protected MyEntry delegate() {\\n\" + ", "-\t\t\t\t\"      return new MyEntry();\\n\" + ", "-\t\t\t\t\"    }  \\n\" + ", "-\t\t\t\t\"  };\\n\" + ", "-\t\t\t\t\"  public static void main(String[] args) {\\n\" + ", "-\t\t\t\t\"    MyEntry entry=pool.m();\\n\" + ", "-\t\t\t\t\"  }\\n\" + ", "-\t\t\t\t\"}\\n\" + ", "-\t\t\t\t\"\\n\" + ", "-\t\t\t\t\"abstract class Pool<E extends Pool.Entry<E>> {\\n\" + ", "-\t\t\t\t\"    private static abstract class Entry<E extends Entry<E>> {\\n\" + ", "-\t\t\t\t\"        E next;\\n\" + ", "-\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\"    static public class AbstractEntry<E extends AbstractEntry<E>> extends Entry<E> {\\n\" + ", "-\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\"    public E m() {\\n\" + ", "-\t\t\t\t\"        System.out.println(\\\"SUCCESS\\\");\\n\" + ", "-\t\t\t\t\"      return delegate();\\n\" + ", "-\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\"    protected abstract E delegate();\\n\" + ", "-\t\t\t\t\"}\\n\", // =================", "-", "+\trunConformTest(", "+\t\t// test directory preparation", "+\t\ttrue /* flush output directory */, ", "+\t\tnew String[] { /* test files */", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X {\\n\" + ", "+\t\t\t\"  static class MyEntry extends Pool.AbstractEntry<MyEntry> { }  \\n\" + ", "+\t\t\t\"  static final Pool<MyEntry> pool=new Pool<MyEntry>() {\\n\" + ", "+\t\t\t\"    @Override\\n\" + ", "+\t\t\t\"    protected MyEntry delegate() {\\n\" + ", "+\t\t\t\"      return new MyEntry();\\n\" + ", "+\t\t\t\"    }  \\n\" + ", "+\t\t\t\"  };\\n\" + ", "+\t\t\t\"  public static void main(String[] args) {\\n\" + ", "+\t\t\t\"    MyEntry entry=pool.m();\\n\" + ", "+\t\t\t\"  }\\n\" + ", "+\t\t\t\"}\\n\" + ", "+\t\t\t\"\\n\" + ", "+\t\t\t\"abstract class Pool<E extends Pool.Entry<E>> {\\n\" + ", "+\t\t\t\"    private static abstract class Entry<E extends Entry<E>> {\\n\" + ", "+\t\t\t\"        E next;\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    static public class AbstractEntry<E extends AbstractEntry<E>> extends Entry<E> {\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    public E m() {\\n\" + ", "+\t\t\t\"        System.out.println(\\\"SUCCESS\\\");\\n\" + ", "+\t\t\t\"      return delegate();\\n\" + ", "+\t\t\t\"    }\\n\" + ", "+\t\t\t\"    protected abstract E delegate();\\n\" + ", "+\t\t\t\"}\\n\", // =================", "-\t\t\"SUCCESS\");", "+\t\t// compiler results", "+\t\tnull /* do not check compiler log */,", "+\t\t// runtime results", "+\t\t\"SUCCESS\" /* expected output string */,", "+\t\t\"\" /* expected error string */,", "+\t\t// javac options", "+\t\tJavacTestOptions.EclipseJustification.EclipseBug185422 /* javac test options */);"]}], "num": 2264}
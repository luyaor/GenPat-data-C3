{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8776d2a58f7d96b8a9c962e289397ae8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "563df3e4613cde083ab9cac1e3d6ce63", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "1209010fd2d01b73be2d5ddcc68dee954a4dfb12", "commitAfterChange": "e2d64401ee163038583789c4f8e64653502b280a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \r \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "signatureAfterChange": "\r \tpublic TypeBinding getOtherFieldBindings(BlockScope scope)", "diff": ["-\r", "-\r", "-\r", "-\t\t\t// if the binding declaring class is not visible, need special action\r", "-\t\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding\r", "-\t\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type\r", "-\t\t\tFieldBinding fieldBinding = (FieldBinding) binding;\r", "-\t\t\tif (fieldBinding.declaringClass != this.actualReceiverType\r", "-\t\t\t\t&& !this.actualReceiverType.isArrayType()\t\t\t\r", "-\t\t\t\t&& fieldBinding.declaringClass != null\r", "-\t\t\t\t&& fieldBinding.constant == NotAConstant\r", "-\t\t\t\t&& ((scope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "-\t\t\t\t\t\t&& (indexOfFirstFieldBinding > 1 || !fieldBinding.isStatic())\r", "-\t\t\t\t\t\t&& fieldBinding.declaringClass.id != T_Object)\r", "-\t\t\t\t\t|| !fieldBinding.declaringClass.canBeSeenBy(scope))){\r", "-\t\t\t\tbinding = new FieldBinding(fieldBinding, (ReferenceBinding)this.actualReceiverType);\r", "-\t\t\t}\r", "-\r", "-\r", "-\t\totherBindings = new FieldBinding[otherBindingsLength];\r", "+\t\totherCodegenBindings = otherBindings = new FieldBinding[otherBindingsLength];\r", "-\r", "-\t\t\t\t\r", "-\t\t\t\t// if the binding declaring class is not visible, need special action\r", "-\t\t\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding\r", "-\t\t\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type\r", "-\t\t\t\tif (field.declaringClass != type\r", "-\t\t\t\t\t&& !this.actualReceiverType.isArrayType()\t\t\t\t\r", "-\t\t\t\t\t&& field.declaringClass != null // array.length\r", "-\t\t\t\t\t&& field.constant == NotAConstant\r", "-\t\t\t\t\t&& ((scope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "-\t\t\t\t\t\t\t&& field.declaringClass.id != T_Object) //no change for Object fields (in case there was)\r", "-\t\t\t\t\t\t|| !field.declaringClass.canBeSeenBy(scope))){\r", "-\t\t\t\t\totherBindings[place] = new FieldBinding(field, (ReferenceBinding) type);\r", "-\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2824f03cb86e1aa05ba638bd910726d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSingleNameReference.java", "commitBeforeChange": "5dd0de42e39b5ae6b6ed70261ede6298820c064c", "commitAfterChange": "2d1b668da982fab23d85fda225f2e9df3073c2e1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "signatureAfterChange": " public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo, boolean isReadAccess)", "diff": ["-\t    this.codegenBinding = parameterizedField.originalField;", "-\t    FieldBinding fieldCodegenBinding = (FieldBinding)this.codegenBinding;", "+\t    FieldBinding codegenField = parameterizedField.originalField;", "-\t    if ((fieldCodegenBinding.type.tagBits & TagBits.HasTypeVariable) != 0) {", "-\t        this.genericCast = fieldCodegenBinding.type.genericCast(currentScope.boxing(parameterizedField.type)); // runtimeType could be base type in boxing case", "+\t    if ((codegenField.type.tagBits & TagBits.HasTypeVariable) != 0) {", "+\t        this.genericCast = codegenField.type.genericCast(currentScope.boxing(parameterizedField.type)); // runtimeType could be base type in boxing case", "-\t}", "-\tif ((this.bits & Binding.FIELD) != 0) {", "-\t\tFieldBinding fieldBinding = (FieldBinding) this.binding;", "-", "-\t\t// if the binding declaring class is not visible, need special action", "-\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding", "-\t\t// NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type", "-\t\t// and not from Object or implicit static field access.", "-\t\tif (fieldBinding.declaringClass != this.delegateThis.type", "-\t\t\t\t&& fieldBinding.declaringClass != null // array.length", "-\t\t\t\t&& fieldBinding.constant() == Constant.NotAConstant) {", "-\t\t\tCompilerOptions options = currentScope.compilerOptions();", "-\t\t\tif ((options.targetJDK >= ClassFileConstants.JDK1_2", "-\t\t\t\t\t&& (options.complianceLevel >= ClassFileConstants.JDK1_4 || !fieldBinding.isStatic())", "-\t\t\t\t\t&& fieldBinding.declaringClass.id != T_JavaLangObject) // no change for Object fields", "-\t\t\t\t|| !fieldBinding.declaringClass.canBeSeenBy(currentScope)) {", "-", "-\t\t\t\tthis.codegenBinding =", "-\t\t\t\t    currentScope.enclosingSourceType().getUpdatedFieldBinding(", "-\t\t\t\t\t       (FieldBinding)this.codegenBinding,", "-\t\t\t\t\t        (ReferenceBinding)this.delegateThis.type.erasure());", "-\t\t\t}", "-\t\t}"]}], "num": 8130}
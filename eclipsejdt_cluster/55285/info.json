{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79cfd4cfe6cbe333ae0dd95126c6bc48", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ededadd3864fe83db3b70fd0eb43e92", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "a56d2afc8ddb8dcda8f74b90d2b39898295865d2", "commitAfterChange": "fc69abbb26faa5011e1c3f5f4862367455008505", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tprotected IJavaElementDelta getDeltaFor(IJavaElement element, boolean returnFirst)", "signatureAfterChange": " \t\tpublic synchronized IJavaElementDelta getDeltaFor(IJavaElement element, boolean returnFirst)", "diff": ["+\t\t */", "+\t\tpublic synchronized IJavaElementDelta getDeltaFor(IJavaElement element, boolean returnFirst) {", "+\t\t\tif (this.deltas == null) return null;", "+\t\t\tIJavaElementDelta result = null;", "+\t\t\tfor (int i = 0; i < this.deltas.length; i++) {", "+\t\t\t\tIJavaElementDelta delta = searchForDelta(element, this.deltas[i]);", "+\t\t\t\tif (delta != null) {", "+\t\t\t\t\tif (returnFirst) {", "+\t\t\t\t\t\treturn delta;", "+\t\t\t\t\t}", "+\t\t\t\t\tresult = delta;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn result;", "+\t\t}", "-\t */", "-\tprotected IJavaElementDelta getDeltaFor(IJavaElement element, boolean returnFirst) {", "-\t\tIJavaElementDelta[] deltas = this.deltaListener.deltas;", "-\t\tif (deltas == null) return null;", "-\t\tIJavaElementDelta result = null;", "-\t\tfor (int i = 0; i < deltas.length; i++) {", "-\t\t\tIJavaElementDelta delta = searchForDelta(element, this.deltaListener.deltas[i]);", "-\t\t\tif (delta != null) {", "-\t\t\t\tif (returnFirst) {", "-\t\t\t\t\treturn delta;", "-\t\t\t\t}", "-\t\t\t\tresult = delta;", "-\t\t\t}", "-\t\t}", "-\t\treturn result;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b40fa8fcbc9c90d500b66c8470b39caf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDeltaBuilder.java", "commitBeforeChange": "0d5d4b61217e2b3559edf7001ae24c184bef94b8", "commitAfterChange": "2ead4bdcbfe85e4d5b336d70f2ec655c30027212", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " private boolean isPositionedCorrectly(IJavaElement element)", "signatureAfterChange": " private boolean isPositionedCorrectly(IJavaElement element)", "diff": ["-\tif (oldListItem == null)", "-\t\treturn false;", "-\tIJavaElement oldPrevious = oldListItem.previous;", "+\tif (oldListItem == null) return false;", "+\t", "-\tif (newListItem == null)", "-\t\treturn false;", "-\tIJavaElement newPrevious = newListItem.previous; ", "-\tif (oldPrevious == newPrevious)", "-\t\treturn true;", "-\tIJavaElement lastNewPrevious = null;", "-\twhile(lastNewPrevious != newPrevious) {", "-\t\tif (isIdentical((JavaElement)oldPrevious, (JavaElement)newPrevious))", "-\t\t\treturn true;", "-\t\tlastNewPrevious = newPrevious;", "-\t\t// if newPrevious is null at this time we should exit the loop.", "-\t\tif (newPrevious == null) break;", "-\t\tnewPrevious = (this.getNewPosition(newPrevious)).previous;", "+\tif (newListItem == null) return false;", "+\t", "+\tIJavaElement oldPrevious = oldListItem.previous;", "+\tIJavaElement newPrevious = newListItem.previous;", "+\tif (oldPrevious == null) {", "+\t\treturn newPrevious == null;", "+\t} else {", "+\t\treturn oldPrevious.equals(newPrevious);", "-\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da7f68fcdf33b24e71d0cf09af9d1c3b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/negative/NegativeModelProc.java", "commitBeforeChange": "928aa699a216cf69978cb24af1fa6f7f4cba1f20", "commitAfterChange": "9221731a3d20320a45d9e6a6337379d8a431c366", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic boolean checkNegative8() throws Exception", "signatureAfterChange": " \tpublic boolean checkNegative8() throws Exception", "diff": ["-\t\tif (!checkModel(rootElements, NEGATIVE_8_MODEL, \"Negative8\")) {", "+\t\tif (this.processingEnv.getSourceVersion() == SourceVersion.RELEASE_6) {", "+\t\t\tif (!checkModel(rootElements, NEGATIVE_8_MODEL_VERSION6, \"Negative8\")) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t} else if (!checkModel(rootElements, NEGATIVE_8_MODEL, \"Negative8\")) {", "-\t\t// check that specific elements are not here", "-\t\tsuffixes = new String[] {\"a\", \"b\", \"c\", \"d\"};", "-\t\tboolean result = true;", "-\t\tString errorMessage = \"\";", "-\t\tfor (int i = 0, l = suffixes.length; i < l; i++) {", "-\t\t\tTypeElement element = _elementUtils.getTypeElement(\"targets.negative.pa.Negative8\" + suffixes[i]);", "-\t\t\tif (! element.getInterfaces().isEmpty()) {", "-\t\t\t\terrorMessage += \"Element Negative8\" + suffixes[i] + \" has extraneous interfaces\\n\";", "-\t\t\t\tresult = false;", "-\t\t\t}", "-\t\t}", "-\t\tif (!result) {", "-\t\t\treportError(errorMessage);", "-\t\t}", "-\t\treturn result;", "+\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2f62fec92d7b94094d435b8de42ab75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementInfo.java", "commitBeforeChange": "21cbb8771cc00d8e13a556404fdfae59ecdb14f8", "commitAfterChange": "0899c90ae8de27e397eab6637d91f616ff022416", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprotected IJavaElement[] removeAndShrinkArray(IJavaElement[] array, IJavaElement deletion)", "signatureAfterChange": " \tpublic void removeChild(IJavaElement child)", "diff": ["-\t */", "-\tprotected IJavaElement[] removeAndShrinkArray(IJavaElement[] array, IJavaElement deletion) {", "-\t\tIJavaElement[] old = array;", "-\t\tarray = new IJavaElement[old.length - 1];", "-\t\tint j = 0;", "-\t\tfor (int i = 0; i < old.length; i++) {", "-\t\t\tif (!old[i].equals(deletion)) {", "-\t\t\t\tarray[j] = old[i];", "-\t\t\t} else {", "-\t\t\t\tSystem.arraycopy(old, i + 1, array, j, old.length - (i + 1));", "-\t\t\t\treturn array;", "-\t\t\t}", "-\t\t\tj++;", "-\t\t}", "-\t\treturn array;", "-\t}", "+\t\tfor (int i = 0, length = this.children.length; i < length; i++) {", "+\t\t\tIJavaElement element = this.children[i];", "+\t\t\tif (element.equals(child)) {", "+\t\t\t\tif (length == 1) {", "+\t\t\t\t\tthis.children = JavaElement.NO_ELEMENTS;", "+\t\t\t\t} else {", "+\t\t\t\t\tIJavaElement[] newChildren = new IJavaElement[length-1];", "+\t\t\t\t\tSystem.arraycopy(this.children, 0, newChildren , 0, i);", "+\t\t\t\t\tif (i < length-1)", "+\t\t\t\t\t\tSystem.arraycopy(this.children, i+1, newChildren, i, length-1-i);", "+\t\t\t\t\tthis.children = newChildren;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}"]}], "num": 55285}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae909d6470141e87c5fcfd5af18ced17", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bec2e9601ce487c3da9d6bc7a9e1810", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "a6c016e4b9174d429d2989715c74cf56e42ef6bb", "commitAfterChange": "c9f804b2e84f02e4cfe425f0463c67be2149642c", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 124, "signatureBeforeChange": " \tpublic void test112()", "signatureAfterChange": " \tpublic void test112()", "diff": ["-\t\t\t\t\"    public static void main(String [] args) {\\n\" + ", "-\t\t\t\t\"        \\n\" + ", "-\t\t\t\t\"        new X<X.MX<Runnable>.MMX<Iterable<String>>>().new MX<Exception>();\\n\" + ", "-\t\t\t\t\"        System.out.println(\\\"SUCCESS\\\");\\n\" + ", "-\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\"    void foo(X<Thread>.MX.MMX<X> mx) {\\n\" + ", "-\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\"    \\n\" + ", "+\t\t\t\t\"    void foo(X<Thread>.MX.MMX<X> mx) {}\\n\" + ", "-\t\t\t\t\"        class MMX <MMT> {\\n\" + ", "-\t\t\t\t\"        }\\n\" + ", "+\t\t\t\t\"        class MMX <MMT> {}\\n\" + ", "-\t\t\t\"1. ERROR in X.java (at line 7)\\n\" + ", "-\t\t\t\"\tvoid foo(X<Thread>.MX.MMX<X> mx) {\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tvoid foo(X<Thread>.MX.MMX<X> mx) {}\\n\" + ", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X <T extends X.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "+\t\t\t\t\"    class MX <MT extends Comparable> {\\n\" + ", "+\t\t\t\t\"        class MMX <MMT> {}\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X <T extends X.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "+\t\t\t\"\t                               ^^^^^^^^\\n\" +", "+\t\t\t\"Bound mismatch: The type Runnable is not a valid substitute for the bounded parameter <MT extends Comparable> of the type X<T>.MX<MT>\\n\" + ", "+\t\t\t\"----------\\n\");", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"public class X <T extends X.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "+\t\t\t\t\"    class MX <MT> {\\n\" + ", "+\t\t\t\t\"        class MMX <MMT extends Comparable> {}\\n\" + ", "+\t\t\t\t\"    }\\n\" + ", "+\t\t\t\t\"}\\n\",", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\t\"\tpublic class X <T extends X.MX<Runnable>.MMX<Iterable<String>>>{\\n\" + ", "+\t\t\t\"\t                                             ^^^^^^^^\\n\" +", "+\t\t\t\"Bound mismatch: The type Iterable<String> is not a valid substitute for the bounded parameter <MMT extends Comparable> of the type X<T>.MX<MT>.MMX<MMT>\\n\" + ", "+\t\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7bb83d55cb64d017bb8b6afa0d02900", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "66655f5e1f98e14cb994324b511a6633d4950147", "commitAfterChange": "05ac7a532e5c7862447e6e0fc351f30875c4dd96", "methodNumberBeforeChange": 923, "methodNumberAfterChange": 923, "signatureBeforeChange": " public void _test0917()", "signatureAfterChange": " public void test0917()", "diff": ["-public void _test0917() {", "+public void test0917() {", "-\t\t\t\"public class X {\\n\" + ", "-\t\t\t\"  class X1<T> { \\n\" + ", "-\t\t\t\"      public static Class clazz = T.getClass();\\n\" + ", "-\t\t\t\"  }\\n\" + ", "-\t\t\t\"  class X2<T> { }\\n\" + ", "-\t\t\t\"  class X3<T> extends X2<T.clazz> { }\\n\" + ", "-\t\t\t\"}\\n\",", "+\t\t\t\"public class X<T extends A> extends X2<T.M> { }\\n\" +", "+\t\t\t\"class X2<T> { }\\n\" +", "+\t\t\t\"class A { static class M {} }\"", "-\t\t\"ERR\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\"\tpublic class X<T extends A> extends X2<T.M> { }\\n\" + ", "+\t\t\"\t                                       ^^^\\n\" + ", "+\t\t\"Illegal qualified access from the type parameter T\\n\" + ", "+\t\t\"----------\\n\"", "+\t\t// cannot select from a type variable", "+\t);", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X<T> extends X2<T.clazz> { }\\n\" +", "+\t\t\t\"class X2<T> { }\\n\"", "+\t\t},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\"\tpublic class X<T> extends X2<T.clazz> { }\\n\" + ", "+\t\t\"\t                             ^^^^^^^\\n\" + ", "+\t\t\"Illegal qualified access from the type parameter T\\n\" + ", "+\t\t\"----------\\n\"", "+\t\t// cannot select from a type variable", "+\t);", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X<T> { Class<T> c = T.class; }\"", "+\t\t},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\"\tpublic class X<T> { Class<T> c = T.class; }\\n\" + ", "+\t\t\"\t                                 ^^^^^^^\\n\" + ", "+\t\t\"Illegal class literal for the type parameter T\\n\" + ", "+\t\t\"----------\\n\"", "+\t\t// cannot select from a type variable", "+\t);", "+\tthis.runNegativeTest(", "+\t\tnew String[] {", "+\t\t\t\"X.java\",", "+\t\t\t\"public class X<T> extends X2<T.class> { }\\n\" +", "+\t\t\t\"class X2<T> { }\\n\"", "+\t\t},", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 1)\\n\" + ", "+\t\t\"\tpublic class X<T> extends X2<T.class> { }\\n\" + ", "+\t\t\"\t                               ^^^^^\\n\" + ", "+\t\t\"Syntax error on token \\\"class\\\", Identifier expected\\n\" + ", "+\t\t\"----------\\n\"", "+\t\t// cannot select from a type variable", "+\t);"]}], "num": 46950}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1413378df2e133a88fb03988789300c2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "034e0538e8783f3ffef4e9754f66f9f9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Clinit.java", "commitBeforeChange": "f2468e3abae9ed1db235796d801e7dc64df652f1", "commitAfterChange": "b701269cf27e9d3bbdf6292c372ecccae76d0d54", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate void generateCode( \t\tClassScope classScope, \t\tClassFile classFile, \t\tint clinitOffset)", "signatureAfterChange": " \tprivate void generateCode( \t\tClassScope classScope, \t\tClassFile classFile, \t\tint clinitOffset)", "diff": ["-\t\t\t\tclassScope.enclosingSourceType(),", "+\t\t\t\t\tclassScope.enclosingSourceType(),", "-\t\tint enumCount = 0;", "-\t\tif (declaringType.fields != null) {", "-\t\t\tfor (int i = 0, max = declaringType.fields.length; i < max; i++) {", "-\t\t\t\tFieldDeclaration fieldDecl = declaringType.fields[i];", "-\t\t\t\tif (fieldDecl.isStatic()) {", "-\t\t\t\t\tfieldDecl.generateCode(staticInitializerScope, codeStream);", "-\t\t\t\t}", "-\t\t\t\tif (fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "-\t\t\t\t\tenumCount++;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t// enum need to initialize $VALUES synthetic cache of enum constants", "-\t\tif (enumCount > 0) {", "-\t\t\tif (declaringType.fields != null) {", "-\t\t\t\t// $VALUES := new <EnumType>[<enumCount>]", "-\t\t\t\tcodeStream.generateInlinedValue(enumCount);", "-\t\t\t\tcodeStream.anewarray(declaringType.binding);", "-\t\t\t\tfor (int i = 0, max = declaringType.fields.length; i < max; i++) {", "-\t\t\t\t\tFieldDeclaration fieldDecl = declaringType.fields[i];", "-\t\t\t\t\t// $VALUES[i] = <enum-constant-i>", "-\t\t\t\t\tif (fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "-\t\t\t\t\t\tcodeStream.dup();", "-\t\t\t\t\t\tcodeStream.generateInlinedValue(fieldDecl.binding.id);", "-\t\t\t\t\t\tcodeStream.getstatic(fieldDecl.binding);", "-\t\t\t\t\t\tcodeStream.aastore();", "+\t\tfinal FieldDeclaration[] fieldDeclarations = declaringType.fields;", "+\t\tif (declaringType.getKind() == IGenericType.ENUM) {", "+\t\t\tint enumCount = 0;", "+\t\t\tint notEnumConstants = 0;", "+\t\t\tif (fieldDeclarations != null) {", "+\t\t\t\tfor (int i = 0, max = fieldDeclarations.length; i < max; i++) {", "+\t\t\t\t\tFieldDeclaration fieldDecl = fieldDeclarations[i];", "+\t\t\t\t\tif (fieldDecl.isStatic()) {", "+\t\t\t\t\t\tif (fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\t\t\tfieldDecl.generateCode(staticInitializerScope, codeStream);", "+\t\t\t\t\t\t\tenumCount++;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tnotEnumConstants++;", "+\t\t\t\t\t\t}", "-\t\t\t\tcodeStream.putstatic(declaringType.enumValuesSyntheticfield);", "+\t\t\t}", "+\t\t\t// enum need to initialize $VALUES synthetic cache of enum constants", "+\t\t\tif (enumCount > 0) {", "+\t\t\t\tif (fieldDeclarations != null) {", "+\t\t\t\t\t// $VALUES := new <EnumType>[<enumCount>]", "+\t\t\t\t\tcodeStream.generateInlinedValue(enumCount);", "+\t\t\t\t\tcodeStream.anewarray(declaringType.binding);", "+\t\t\t\t\tfor (int i = 0, max = fieldDeclarations.length; i < max; i++) {", "+\t\t\t\t\t\tFieldDeclaration fieldDecl = fieldDeclarations[i];", "+\t\t\t\t\t\t// $VALUES[i] = <enum-constant-i>", "+\t\t\t\t\t\tif (fieldDecl.getKind() == AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\t\t\tcodeStream.dup();", "+\t\t\t\t\t\t\tcodeStream.generateInlinedValue(fieldDecl.binding.id);", "+\t\t\t\t\t\t\tcodeStream.getstatic(fieldDecl.binding);", "+\t\t\t\t\t\t\tcodeStream.aastore();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tcodeStream.putstatic(declaringType.enumValuesSyntheticfield);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (notEnumConstants != 0) {", "+\t\t\t\t// if fields that are not enum constants need to be generated (static initializer/static field)", "+\t\t\t\tfor (int i = 0, max = fieldDeclarations.length; i < max; i++) {", "+\t\t\t\t\tFieldDeclaration fieldDecl = fieldDeclarations[i];", "+\t\t\t\t\tif (fieldDecl.isStatic() && fieldDecl.getKind() != AbstractVariableDeclaration.ENUM_CONSTANT) {", "+\t\t\t\t\t\tfieldDecl.generateCode(staticInitializerScope, codeStream);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (fieldDeclarations != null) {", "+\t\t\t\tfor (int i = 0, max = fieldDeclarations.length; i < max; i++) {", "+\t\t\t\t\tFieldDeclaration fieldDecl = fieldDeclarations[i];", "+\t\t\t\t\tif (fieldDecl.isStatic()) {", "+\t\t\t\t\t\tfieldDecl.generateCode(staticInitializerScope, codeStream);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf8ff71e22bbe5fc6df20cc11afea25e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java", "commitBeforeChange": "b9f5397cd309be669493c56026e21ac3e80dadfb", "commitAfterChange": "e1c9e65754ffe72856bfc19d7da5eba548fc43bc", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": " public void initializeMaxLocals(MethodBinding methodBinding)", "signatureAfterChange": " public void initializeMaxLocals(MethodBinding methodBinding)", "diff": ["-\t\t\t", "+", "+", "+\t\t\t\tTypeBinding[] arguments;", "+\t\t\t\tif ((arguments = methodBinding.parameters) != null) {", "+\t\t\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "+\t\t\t\t\t\tfinal TypeBinding typeBinding = arguments[i];", "+\t\t\t\t\t\tframe.putLocal(resolvedPosition, new VerificationTypeInfo(typeBinding));", "+\t\t\t\t\t\tswitch(typeBinding.id) {", "+\t\t\t\t\t\t\tcase TypeIds.T_double :", "+\t\t\t\t\t\t\tcase TypeIds.T_long :", "+\t\t\t\t\t\t\t\tresolvedPosition += 2;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tresolvedPosition++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t} else {", "+\t\t\t\tTypeBinding[] arguments;", "+\t\t\t\tif ((arguments = methodBinding.parameters) != null) {", "+\t\t\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "+\t\t\t\t\t\tfinal TypeBinding typeBinding = arguments[i];", "+\t\t\t\t\t\tframe.putLocal(resolvedPosition, new VerificationTypeInfo(typeBinding));", "+\t\t\t\t\t\tswitch(typeBinding.id) {", "+\t\t\t\t\t\t\tcase TypeIds.T_double :", "+\t\t\t\t\t\t\tcase TypeIds.T_long :", "+\t\t\t\t\t\t\t\tresolvedPosition += 2;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\tresolvedPosition++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t}", "-", "-\t\tTypeBinding[] arguments;", "-\t\tif ((arguments = methodBinding.parameters) != null) {", "-\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "-\t\t\t\tfinal TypeBinding typeBinding = arguments[i];", "-\t\t\t\tframe.putLocal(resolvedPosition, new VerificationTypeInfo(typeBinding));", "-\t\t\t\tswitch(typeBinding.id) {", "-\t\t\t\t\tcase TypeIds.T_double :", "-\t\t\t\t\tcase TypeIds.T_long :", "-\t\t\t\t\t\tresolvedPosition += 2;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tresolvedPosition++;", "+\t\t} else {", "+\t\t\tTypeBinding[] arguments;", "+\t\t\tif ((arguments = methodBinding.parameters) != null) {", "+\t\t\t\tfor (int i = 0, max = arguments.length; i < max; i++) {", "+\t\t\t\t\tfinal TypeBinding typeBinding = arguments[i];", "+\t\t\t\t\tframe.putLocal(resolvedPosition, new VerificationTypeInfo(typeBinding));", "+\t\t\t\t\tswitch(typeBinding.id) {", "+\t\t\t\t\t\tcase TypeIds.T_double :", "+\t\t\t\t\t\tcase TypeIds.T_long :", "+\t\t\t\t\t\t\tresolvedPosition += 2;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tresolvedPosition++;", "+\t\t\t\t\t}"]}], "num": 52421}
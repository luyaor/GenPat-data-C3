{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22ffb822d1cf427213206b2ede672ba7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77e0c15bfb77021a13cbcd25addd384b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "2c63e7a0f1896e949119ff36744d33a6da53b86f", "commitAfterChange": "5f660283883cb036f6f2660e9305988c653cd514", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public Object getDefaultValue()", "signatureAfterChange": " public Object getDefaultValue()", "diff": ["-\t\t//The method has not been yet type checked.", "-\t\t//It also means that the method is not coming from a class that", "-\t\t//has already been compiled. It can only be from a class within", "-\t\t//compilation units to process. Thus the method is NOT from a BinaryTypeBinbing", "+\t\t//The method has not been resolved nor has its class been resolved.", "+\t\t//It can only be from a source type within compilation units to process.", "-\t\t\t\tTypeDeclaration typeDecl = sourceType.scope.referenceContext;", "-\t\t\t\tif (methodDeclaration != null) methodDeclaration.resolve(typeDecl.scope);", "+\t\t\t\tif (methodDeclaration != null)", "+\t\t\t\t\tmethodDeclaration.resolve(sourceType.scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cede50f666953005e564ec18af881193", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java", "commitBeforeChange": "530677eaedb480550fa104a8b4977fa836eba025", "commitAfterChange": "2c63e7a0f1896e949119ff36744d33a6da53b86f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public Object getDefaultValue()", "signatureAfterChange": " public Object getDefaultValue()", "diff": ["+\tif ((originalMethod.tagBits & TagBits.DefaultValueResolved) == 0) {", "+\t\t//The method has not been yet type checked.", "+\t\t//It also means that the method is not coming from a class that", "+\t\t//has already been compiled. It can only be from a class within", "+\t\t//compilation units to process. Thus the method is NOT from a BinaryTypeBinbing", "+\t\tif (originalMethod.declaringClass instanceof SourceTypeBinding) {", "+\t\t\tSourceTypeBinding sourceType = (SourceTypeBinding) originalMethod.declaringClass;", "+\t\t\tif (sourceType.scope != null) {", "+\t\t\t\tTypeDeclaration typeDecl = sourceType.scope.referenceContext;", "+\t\t\t\tAbstractMethodDeclaration methodDeclaration = originalMethod.sourceMethod();", "+\t\t\t\tif (methodDeclaration != null) methodDeclaration.resolve(typeDecl.scope);", "+\t\t\t}", "+\t\t}", "+\t\toriginalMethod.tagBits |= TagBits.DefaultValueResolved;", "+\t}"]}], "num": 350}
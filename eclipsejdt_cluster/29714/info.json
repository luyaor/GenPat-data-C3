{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d5d8542cdeceb1939ca5f23abdf86d4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3addc9f8478986d393c41453c0044772", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "e49387dc67d37e060d459ec8bca371fa0bf2a443", "commitAfterChange": "dc892c0e1acc8f29aa208cac93db1f34ba940595", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tprivate static TypeBinding[] resolveSubstituteConstraints(Scope scope, TypeVariableBinding[] typeVariables, TypeBinding[] substitutes, boolean considerEXTENDSConstraints, Map collectedSubstitutes)", "signatureAfterChange": " \t \tprivate static TypeBinding[] resolveSubstituteConstraints(Scope scope, TypeVariableBinding[] typeVariables, TypeBinding[] substitutes, boolean considerEXTENDSConstraints, Map collectedSubstitutes)", "diff": ["-//\t\t\t\t\t\t\tif (equalSubstitute == current) continue nextConstraint;", "+\t\t\t\t\t\t\tif (equalSubstitute == current) {", "+\t\t\t\t\t\t\t\t// try to find a better different match if any in subsequent equal candidates", "+\t\t\t\t\t\t\t\tfor (int k = j+1; k < equalLength; k++) {", "+\t\t\t\t\t\t\t\t\tequalSubstitute = equalSubstitutes[k];", "+\t\t\t\t\t\t\t\t\tif (equalSubstitute != current && equalSubstitute != null) {", "+\t\t\t\t\t\t\t\t\t\tsubstitutes[i] = equalSubstitute;", "+\t\t\t\t\t\t\t\t\t\tcontinue nextTypeParameter;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tsubstitutes[i] = current;", "+\t\t\t\t\t\t\t\tcontinue nextTypeParameter;", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e186ebddabf25ef3fd3fe9044122fa2c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "4690bf209f18cd325a0106904806772c80cdc7cd", "commitAfterChange": "05d6073173c0310580ac7ddb24f238b065dba6bb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " private void createFields(IBinaryField[] iFields, long sourceLevel)", "signatureAfterChange": " private void createFields(IBinaryField[] iFields, long sourceLevel)", "diff": ["+\t\t\tint firstAnnotatedFieldIndex = -1;", "-\t\t\t\tif (this.environment.globalOptions.storeAnnotations)", "-\t\t\t\t\tfield.setAnnotations(createAnnotations(binaryField.getAnnotations(), this.environment));", "+\t\t\t\tif (firstAnnotatedFieldIndex < 0", "+\t\t\t\t\t\t&& this.environment.globalOptions.storeAnnotations ", "+\t\t\t\t\t\t&& binaryField.getAnnotations() != null) {", "+\t\t\t\t\tfirstAnnotatedFieldIndex = i;", "+\t\t\t\t}", "+\t\t\t// second pass for reifying annotations, since may refer to fields being constructed (147875)", "+\t\t\tif (firstAnnotatedFieldIndex >= 0) {", "+\t\t\t\tfor (int i = firstAnnotatedFieldIndex; i <size; i++) {", "+\t\t\t\t\tthis.fields[i].setAnnotations(createAnnotations(iFields[i].getAnnotations(), this.environment));", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 29714}
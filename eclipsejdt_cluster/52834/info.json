{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "737c82d3d06bf870ae5391d213fe5a89", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "210d3b8debc6c8e9b81765c8a1c7c975", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "37207b2312332e7eb9b138e12e2db23f9f9da53e", "commitAfterChange": "1829731a70d63f049379e6ceb23edadc61e7b589", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "signatureAfterChange": "  void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods)", "diff": ["-\t\t\tcreateFields(binaryType.getFields(), sourceLevel, missingTypeNames);", "-\t\t\tcreateMethods(binaryType.getMethods(), sourceLevel, missingTypeNames);", "+\t\t\tIBinaryField[] iFields = binaryType.getFields();", "+\t\t\tcreateFields(iFields, sourceLevel, missingTypeNames);", "+\t\t\tIBinaryMethod[] iMethods = createMethods(binaryType.getMethods(), sourceLevel, missingTypeNames);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {", "+\t\t\t\t// need annotations on the type before processing null annotations on members respecting any @NonNullByDefault:", "+\t\t\t\tscanTypeForNullDefaultAnnotation(binaryType, this.fPackage, this);", "+", "+\t\t\t\tif (iFields != null) {", "+\t\t\t\t\tfor (int i = 0; i < iFields.length; i++)", "+\t\t\t\t\t\tscanFieldForNullAnnotation(iFields[i], this.fields[i]);", "+\t\t\t\t}", "+\t\t\t\tif (iMethods != null) {", "+\t\t\t\t\tfor (int i = 0; i < iMethods.length; i++)", "+\t\t\t\t\t\tscanMethodForNullAnnotation(iMethods[i], this.methods[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3779173012758ed43fd2cf501dbea566", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "0faf571a2b978290e761500f873fc8f116675788", "commitAfterChange": "16ea2a8daece1ce57aeee98ca0579c5d79d5f9c9", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \t   \tpublic void resolve()", "signatureAfterChange": " \t   \tpublic void resolve()", "diff": ["+\t\t\tboolean hasEnumConstants = false;", "+\t\t\tboolean hasEnumConstantsWithoutBody = false;", "-\t\t\t\t\t\tcase AbstractVariableDeclaration.FIELD:", "+\t\t\t\t\t\t\thasEnumConstants = true;", "+\t\t\t\t\t\t\tif (!(field.initialization instanceof QualifiedAllocationExpression))", "+\t\t\t\t\t\t\t\thasEnumConstantsWithoutBody = true;", "+\t\t\t\t\t\tcase AbstractVariableDeclaration.FIELD:", "+\t\t\t// check enum abstract methods", "+\t\t\tif (getKind() == IGenericType.ENUM && this.binding.isAbstract()) {", "+\t\t\t\tif (!hasEnumConstants || hasEnumConstantsWithoutBody) {", "+\t\t\t\t\tfor (int i = 0, count = this.methods.length; i < count; i++) {", "+\t\t\t\t\t\tif (this.methods[i].isAbstract()) {", "+\t\t\t\t\t\t\tthis.scope.problemReporter().enumAbstractMethodMustBeImplemented(this.methods[i]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "556ec607371433e2ce8a01afed9b2427", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java", "commitBeforeChange": "9a1059fe76216670b8b967bb606268c00c49c5d6", "commitAfterChange": "48d5cc392e6d910c33f7049ee7ced65653038398", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void addAttributes()", "signatureAfterChange": " \tpublic void addAttributes()", "diff": ["-\t\tint attributeNumber = 0;", "+\t\tint attributesNumber = 0;", "-\t\t\tattributeNumber++;", "+\t\t\tattributesNumber++;", "-\t\t\tattributeNumber++;", "+\t\t\tattributesNumber++;", "-\t\t\tattributeNumber++;", "+\t\t\tattributesNumber++;", "-\t\t\tattributeNumber++;", "+\t\t\tattributesNumber++;", "-\t\t\t\t\tattributeNumber += generateRuntimeAnnotations(annotations);", "+\t\t\t\t\tattributesNumber += generateRuntimeAnnotations(annotations);", "+\t\t\tReferenceBinding superclass = this.referenceBinding.superclass;", "+\t\t\tif (superclass != null) {", "+\t\t\t\tthis.missingTypes = superclass.collectMissingTypes(this.missingTypes);", "+\t\t\t}", "+\t\t\tReferenceBinding[] superInterfaces = this.referenceBinding.superInterfaces();", "+\t\t\tfor (int i = 0, max = superInterfaces.length; i < max; i++) {", "+\t\t\t\tthis.missingTypes = superInterfaces[i].collectMissingTypes(this.missingTypes);", "+\t\t\t}", "-\t\t\tattributeNumber++;", "+\t\t\tattributesNumber++;", "-\t\t\tattributeNumber++;", "+\t\t\tattributesNumber++;", "+\t\t}", "+\t\tif (this.missingTypes != null) {", "+\t\t\tgenerateMissingTypesAttribute();", "+\t\t\tattributesNumber++;", "-\t\tcontents[attributeOffset++] = (byte) (attributeNumber >> 8);", "-\t\tcontents[attributeOffset] = (byte) attributeNumber;", "+\t\tcontents[attributeOffset++] = (byte) (attributesNumber >> 8);", "+\t\tcontents[attributeOffset] = (byte) attributesNumber;"]}], "num": 52834}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ec93d9ee306fc0d2a0c742863cfcc13", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c970ce380cb167bd575e9ab8992ef484", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "6781b5445d9813f939573ded9d37ee82c9dbbd15", "commitAfterChange": "6989e5bb4ed8f3be37ea69298930332629e9b475", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\t \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "signatureAfterChange": "\t \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "diff": ["-\t\t\t\t} ", "-\t\t\t\tif (expectedType == null) {", "-\t\t\t\t\tif (methodSubstitute.returnType.isTypeVariable()) {", "-\t\t\t\t\t\t// should be: if no expected type, then assume Object", "-\t\t\t\t\t\t// actually it rather seems to handle the returned variable case by expecting its erasure instead", "-\t\t\t\t\t\texpectedType = methodSubstitute.returnType.erasure();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (methodSubstitute.returnType.id != TypeIds.T_void)", "-\t\t\t\t\t\t\texpectedType = scope.getJavaLangObject(); ", "-\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tTypeBinding upperBound = null;", "+\t\t\t\tif (methodSubstitute.returnType.isTypeVariable()) {", "+\t\t\t\t\t// should be: if no expected type, then assume Object", "+\t\t\t\t\t// actually it rather seems to handle the returned variable case by expecting its erasure instead", "+\t\t\t\t\tupperBound = methodSubstitute.returnType.erasure();", "+\t\t\t\t} else {", "+\t\t\t\t\tif (methodSubstitute.returnType.id != TypeIds.T_void)", "+\t\t\t\t\t\tupperBound = scope.getJavaLangObject(); ", "+\t\t\t\t}", "+\t\t\t\t// Object o = foo(); // where <T extends Serializable> T foo();", "+\t\t\t\tif (expectedType == null || upperBound.isCompatibleWith(expectedType)) {", "+\t\t\t\t\texpectedType = upperBound;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce2069fcf294000c7b53934082dc423f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "bdbec2bb7327b3b0460877d15c9ab293cc246fb3", "commitAfterChange": "b9385062e73b7ce20cfbd5836208ddfca433f1f5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\t \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "signatureAfterChange": "\t \tpublic static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope, InvocationSite invocationSite)", "diff": ["-\t\t\t\tTypeBinding upperBound = null;", "-\t\t\t\tif (methodSubstitute.returnType.isTypeVariable()) {", "-\t\t\t\t\t// should be: if no expected type, then assume Object", "-\t\t\t\t\t// actually it rather seems to handle the returned variable case by expecting its erasure instead", "-\t\t\t\t\tupperBound = methodSubstitute.returnType.erasure();", "-\t\t\t\t} else {", "-\t\t\t\t\tif (methodSubstitute.returnType.id != TypeIds.T_void)", "+\t\t\t\tTypeBinding upperBound;", "+\t\t\t\tTypeBinding substitutedReturnType = methodSubstitute.returnType;", "+\t\t\t\tswitch (substitutedReturnType.kind()) {", "+\t\t\t\t\tcase Binding.TYPE_PARAMETER :", "+\t\t\t\t\t\t// should be: if no expected type, then assume Object", "+\t\t\t\t\t\t// actually it rather seems to handle the returned variable case by expecting its erasure instead", "+\t\t\t\t\t\tupperBound = substitutedReturnType.erasure();", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Binding.BASE_TYPE :", "+\t\t\t\t\t\tif (substitutedReturnType == VoidBinding) {", "+\t\t\t\t\t\t\tupperBound = null;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// fallthrough", "+\t\t\t\t\tdefault:", "-\t\t\t\tif (expectedType == null || upperBound.isCompatibleWith(expectedType)) {", "+\t\t\t\tif (expectedType == null || (upperBound != null && upperBound.isCompatibleWith(expectedType))) {"]}], "num": 70434}
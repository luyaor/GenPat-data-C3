{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29ebd1c3ccdc0929f020ecd3805c5eda", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d78ae219584dcc65a948e24c19047c91", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "a61562d7e56bcf68476db5393ae43445e5aee116", "commitAfterChange": "73e230db98e1a65780b6160021e4c8063d2276e3", "methodNumberBeforeChange": 327, "methodNumberAfterChange": 327, "signatureBeforeChange": " public void test177()", "signatureAfterChange": " public void test177()", "diff": ["-\tif (new CompilerOptions(getCompilerOptions()).sourceLevel >= ClassFileConstants.JDK1_6) {", "+\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) { // see test187()", "+\t\tthis.runNegativeTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"X.java\",", "+\t\t\t\t\"import java.util.*;\\n\" +", "+\t\t\t\t\"interface I { I foo(Collection<?> c); }\\n\" +", "+\t\t\t\t\"class A extends LinkedHashMap {\\n\" +", "+\t\t\t\t\"\tpublic A foo(Collection c) { return this; }\\n\" +", "+\t\t\t\t\"}\\n\" +", "+\t\t\t\t\"class X extends A implements I {\\n\" +", "+\t\t\t\t\"\t@Override public X foo(Collection<?> c) { return this; }\\n\" +", "+\t\t\t\t\"}\"", "+\t\t\t},", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass A extends LinkedHashMap {\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"The serializable class A does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass A extends LinkedHashMap {\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"LinkedHashMap is a raw type. References to generic type LinkedHashMap<K,V> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tpublic A foo(Collection c) { return this; }\\n\" + ", "+\t\t\t\"\t             ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Collection is a raw type. References to generic type Collection<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tclass X extends A implements I {\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"Name clash: The method foo(Collection<?>) of type I has the same erasure as foo(Collection) of type A but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"5. WARNING in X.java (at line 6)\\n\" + ", "+\t\t\t\"\tclass X extends A implements I {\\n\" + ", "+\t\t\t\"\t      ^\\n\" + ", "+\t\t\t\"The serializable class X does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"6. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\t@Override public X foo(Collection<?> c) { return this; }\\n\" + ", "+\t\t\t\"\t                   ^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(Collection<?>) of type X has the same erasure as foo(Collection) of type A but does not override it\\n\" + ", "+\t\t\t\"----------\\n\"", "+\t\t);", "+\t} else if (new CompilerOptions(getCompilerOptions()).sourceLevel == ClassFileConstants.JDK1_6) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2ec5127808cd8839a32e8bd0e7df9b4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b89ad18e17834e64930a830c92b5e2241f9a8b44", "commitAfterChange": "d9605208e25375e966739effbd053a969138c830", "methodNumberBeforeChange": 150, "methodNumberAfterChange": 150, "signatureBeforeChange": " \tpublic void test048()", "signatureAfterChange": " \tpublic void test048()", "diff": ["+\t\tString expectedCompilerLog = (this.complianceLevel == ClassFileConstants.JDK1_6)?", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"1. WARNING in X1.java (at line 2)\\n\" + ", "+\t\t\t\t\"\tpublic class X1 extends LinkedHashMap<String, String> {\\n\" + ", "+\t\t\t\t\"\t             ^^\\n\" + ", "+\t\t\t\t\"The serializable class X1 does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\"2. WARNING in X1.java (at line 3)\\n\" + ", "+\t\t\t\t\"\tpublic Object putAll(Map<String,String> a) { return null; }\\n\" + ", "+\t\t\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\"Name clash: The method putAll(Map<String,String>) of type X1 has the same erasure as putAll(Map<? extends K,? extends V>) of type HashMap<K,V> but does not override it\\n\" + ", "+\t\t\t\t\"----------\\n\":", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"1. WARNING in X1.java (at line 2)\\n\" + ", "+\t\t\t\t\t\"\tpublic class X1 extends LinkedHashMap<String, String> {\\n\" + ", "+\t\t\t\t\t\"\t             ^^\\n\" + ", "+\t\t\t\t\t\"The serializable class X1 does not declare a static final serialVersionUID field of type long\\n\" + ", "+\t\t\t\t\t\"----------\\n\" + ", "+\t\t\t\t\t\"2. ERROR in X1.java (at line 3)\\n\" + ", "+\t\t\t\t\t\"\tpublic Object putAll(Map<String,String> a) { return null; }\\n\" + ", "+\t\t\t\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\t\t\t\"Name clash: The method putAll(Map<String,String>) of type X1 has the same erasure as putAll(Map<? extends K,? extends V>) of type HashMap<K,V> but does not override it\\n\" + ", "+\t\t\t\t\t\"----------\\n\";", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. WARNING in X1.java (at line 2)\\n\" + ", "-\t\t\t\"\tpublic class X1 extends LinkedHashMap<String, String> {\\n\" + ", "-\t\t\t\"\t             ^^\\n\" + ", "-\t\t\t\"The serializable class X1 does not declare a static final serialVersionUID field of type long\\n\" + ", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"2. ERROR in X1.java (at line 3)\\n\" + ", "-\t\t\t\"\tpublic Object putAll(Map<String,String> a) { return null; }\\n\" + ", "-\t\t\t\"\t              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Name clash: The method putAll(Map<String,String>) of type X1 has the same erasure as putAll(Map<? extends K,? extends V>) of type HashMap<K,V> but does not override it\\n\" + ", "-\t\t\t\"----------\\n\"", "+\t\t\texpectedCompilerLog"]}], "num": 53748}
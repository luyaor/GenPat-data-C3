{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c983e2d0c1414b8bddd194662e65dd6", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "795fe08336b1a75316bec41b79f0b119", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "543cc417bbddfcd6644a73f4c45c69976260e7e9", "commitAfterChange": "585bfb2f49948f6e4fcfbc837feda680fdc72f44", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " protected void consumeBinaryExpression(int op)", "signatureAfterChange": " protected void consumeBinaryExpression(int op)", "diff": ["-\t\t\t\t} else if (expr1 instanceof BinaryExpression) {", "+\t\t\t\t} else if (expr1 instanceof BinaryExpression &&", "+\t\t\t\t\t\t\t// single out the a + b case, which is a BE ", "+\t\t\t\t\t\t\t// instead of a CBE (slightly more than a half of ", "+\t\t\t\t\t\t\t// strings concatenation are one-deep binary ", "+\t\t\t\t\t\t\t// expressions)", "+\t\t\t\t\t\t((expr1.bits & ASTNode.OperatorMASK) >> ", "+\t\t\t\t\t\t\tASTNode.OperatorSHIFT) == OperatorIds.PLUS) {", "-\t\t\t\t\t// single out the a + b case, which is a BE ", "-\t\t\t\t\t// instead of a CBE (slightly more than a half of strings", "-\t\t\t\t\t// concatenation are one-deep binary expressions)", "-\t\t\t\t} else if (expr1 instanceof BinaryExpression) {", "-\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\t\t\t\tnew CombinedBinaryExpression(expr1, expr2, PLUS, 1);", "-\t\t\t\t} else {", "-\t\t\t\t\t// single out the a + b case", "-\t\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "-\t\t\t\t\t\tnew BinaryExpression(expr1, expr2, PLUS);", "-\t\t\t\t}", "+\t\t\t} else if (expr1 instanceof BinaryExpression && ", "+\t\t\t\t\t\t\t// single out the a + b case", "+\t\t\t\t\t\t((expr1.bits & ASTNode.OperatorMASK) >> ", "+\t\t\t\t\t\t\tASTNode.OperatorSHIFT) == OperatorIds.PLUS) {", "+\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\t\tnew CombinedBinaryExpression(expr1, expr2, PLUS, 1);", "+\t\t\t} else {", "+\t\t\t\tthis.expressionStack[this.expressionPtr] = ", "+\t\t\t\t\tnew BinaryExpression(expr1, expr2, PLUS);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82e753f67643e0edc4e9efee1b3492e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "d6764f9787acc40fd6905118b80ac5eb262f0c0e", "commitAfterChange": "17319a2f3f2fc4a6c43571afc2102c2f6bf7e480", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " protected void consumeBinaryExpressionWithName(int op)", "signatureAfterChange": " protected void consumeBinaryExpressionWithName(int op)", "diff": ["-\t\t\t\tif (expr1 instanceof StringLiteral) {", "+\t\t\t\tif (expr1 instanceof StringLiteral", "+\t\t\t\t\t\t&& ((expr1.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT) == 0) {", "-\t\t\t\tif (expr2 instanceof StringLiteral) {", "+\t\t\t\tif (expr2 instanceof StringLiteral", "+\t\t\t\t\t\t&& ((expr1.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT) == 0) {"]}], "num": 46350}
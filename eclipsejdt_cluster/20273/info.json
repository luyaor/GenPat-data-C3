{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0fe8340a195eedf59b1156f0cd361f3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecdf39b5c251c6ef2bf8f77a8bf17884", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingExpressionsTest.java", "commitBeforeChange": "ac894da9b0ea3c039ce6982330527517abe54897", "commitAfterChange": "e3d1a6cf758d351b80734729b068cc97373e684d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void testArrayCreation() throws Exception", "signatureAfterChange": "   \tpublic void testArrayCreation() throws Exception", "diff": ["-\t/** @deprecated using deprecated code */", "+\t\t{\t// add a new ArrayCreation", "+\t\t\tArrayCreation arrayCreation= ast.newArrayCreation();", "+\t\t\tarrayCreation.setType(ast.newArrayType(ast.newSimpleType(ast.newSimpleName(\"Object\")), 3));", "+\t\t\tarrayCreation.dimensions().add(ast.newNumberLiteral(\"1\"));", "+\t\t\tarrayCreation.dimensions().add(ast.newNumberLiteral(\"2\"));", "+\t\t\t", "+\t\t\trewrite.getListRewrite(invocation, MethodInvocation.ARGUMENTS_PROPERTY).insertLast(arrayCreation, null);", "+\t\t}", "-\t\tbuf.append(\"        new int[10][11][]);\\n\");", "+\t\tbuf.append(\"        new int[10][11][], new Object[1][2][]);\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efb39ee95bbc1ccdd0f17df1edced260", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingStatementsTest.java", "commitBeforeChange": "62b1429c1157377303cda59d75bfca97d69751c0", "commitAfterChange": "2bf3ca4fdac4d07bd91bee9a8957437ed1319e5b", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "\t\t \t \t \tpublic void testInsertCode() throws Exception", "signatureAfterChange": "\t\t \t \t \tpublic void testInsertCode() throws Exception", "diff": ["-\t\tNewASTRewrite rewrite= new NewASTRewrite(astRoot.getAST());", "+\t\tASTRewrite rewrite= new ASTRewrite(astRoot.getAST());", "-\t\t\tASTNode placeHolder= rewrite.createStringPlaceholder(comment, NewASTRewrite.STATEMENT);", "+\t\t\tASTNode placeHolder= rewrite.createStringPlaceholder(comment, ASTNode.RETURN_STATEMENT);", "-\t\t\trewrite.markAsReplaced(whileStatement, placeHolder, null);", "+\t\t\trewrite.replace(whileStatement, placeHolder, null);", "-\t\t\tASTNode placeHolder2= rewrite.createStringPlaceholder(buf1.toString(), NewASTRewrite.STATEMENT);", "+\t\t\tASTNode placeHolder2= rewrite.createStringPlaceholder(buf1.toString(), ASTNode.IF_STATEMENT);"]}], "num": 20273}
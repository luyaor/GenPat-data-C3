{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9fc0e2bb990926c30e33ac0fe233bb8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fe5fd9363dc6c8c9612388c237b9a4a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "079f1f525d3cbb0b2570dd4fe3bd959b7a33dc49", "commitAfterChange": "b21cadb5eae53d9f84dce9f073b5350a267b6ad6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void add(JavaProject javaProject, int includeMask, HashSet visitedProjects) throws JavaModelException", "signatureAfterChange": " void add(JavaProject javaProject, IPath pathToAdd, int includeMask, HashSet visitedProjects, IClasspathEntry referringEntry) throws JavaModelException", "diff": ["-public void add(JavaProject javaProject, int includeMask, HashSet visitedProjects) throws JavaModelException {", "+ */", "+void add(JavaProject javaProject, IPath pathToAdd, int includeMask, HashSet visitedProjects, IClasspathEntry referringEntry) throws JavaModelException {", "+\tJavaModelManager.PerProjectInfo perProjectInfo = javaProject.getPerProjectInfo();", "+\t\tIClasspathEntry rawEntry = null;", "+\t\tif (perProjectInfo != null && perProjectInfo.resolvedPathToRawEntries != null) {", "+\t\t\trawEntry = (IClasspathEntry) perProjectInfo.resolvedPathToRawEntries.get(entry.getPath());", "+\t\t}", "+\t\tif (rawEntry == null) continue;", "+\t\tAccessRestriction access = null;", "+\t\tClasspathEntry cpEntry = null;", "+\t\tif (rawEntry instanceof ClasspathEntry) {", "+\t\t\tcpEntry = (ClasspathEntry) rawEntry;", "+\t\t\tif (referringEntry != null) {", "+\t\t\t\tcpEntry = cpEntry.combineWith(referringEntry);", "+//\t\t\t\tcpEntry = ((ClasspathEntry)referringEntry).combineWith(cpEntry);", "+\t\t\t}", "+\t\t\taccess = cpEntry.getImportRestriction();", "+\t\t}", "-\t\t\t\tIClasspathEntry rawEntry = null;", "-\t\t\t\tJavaModelManager.PerProjectInfo perProjectInfo = javaProject.getPerProjectInfo();", "-\t\t\t\tif (perProjectInfo != null && perProjectInfo.resolvedPathToRawEntries != null) {", "-\t\t\t\t\trawEntry = (IClasspathEntry) perProjectInfo.resolvedPathToRawEntries.get(entry.getPath());", "-\t\t\t\t}", "-\t\t\t\tif (rawEntry == null) break;", "-\t\t\t\t\t\t\tadd(path, true);", "-\t\t\t\t\t\t\taddEnclosingProjectOrJar(path);", "+\t\t\t\t\t\t\tif (pathToAdd == null || pathToAdd.equals(path)) {", "+\t\t\t\t\t\t\t\tadd(path, true, access);", "+\t\t\t\t\t\t\t\taddEnclosingProjectOrJar(path);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tadd(path, true);", "-\t\t\t\t\t\t\taddEnclosingProjectOrJar(path);", "+\t\t\t\t\t\t\tif (pathToAdd == null || pathToAdd.equals(path)) {", "+\t\t\t\t\t\t\t\tadd(path, true, access);", "+\t\t\t\t\t\t\t\taddEnclosingProjectOrJar(path);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\tadd((JavaProject) model.getJavaProject(entry.getPath().lastSegment()), includeMask, visitedProjects);", "+\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\tif (pathToAdd == null || pathToAdd.equals(path)) {", "+\t\t\t\t\t\tadd((JavaProject) model.getJavaProject(entry.getPath().lastSegment()), null, includeMask, visitedProjects, cpEntry);", "+\t\t\t\t\t}", "-\t\t\t\t\tadd(entry.getPath(), true);", "+\t\t\t\t\tIPath path = entry.getPath();", "+\t\t\t\t\tif (pathToAdd == null || pathToAdd.equals(path)) {", "+\t\t\t\t\t\tadd(entry.getPath(), true, access);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "381feaacc23cbf499e53209cbbce59c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "2ae41539e386d12d9e7c121e231730e370deda2f", "commitAfterChange": "05dd526dbb279df7b7e23a1d7ccb53d445943919", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public void add(IResource element, boolean addJarsAndSourceFolders)", "signatureAfterChange": "\r \r public void add(IJavaProject project, boolean includesPrereqProjects) throws JavaModelException", "diff": ["- */\r", "-public void add(IResource element, boolean addJarsAndSourceFolders) {\r", "-\tsuper.add(element);\r", "+public void add(IJavaProject project, boolean includesPrereqProjects) throws JavaModelException {\r", "-\t// clear indexer cache\r", "-\tfLastCheckedResource = null;\r", "+\tthis.addEnclosingProjectOrJar(project.getProject().getFullPath());\r", "-\tif (addJarsAndSourceFolders && element instanceof IProject) {\r", "-\t\t// remember the paths of its classpath entries\r", "-\t\tIJavaModel javaModel = JavaModelManager.getJavaModel(element.getWorkspace());\r", "-\t\tIJavaProject javaProject = javaModel.getJavaProject(element.getName());\r", "-\t\ttry {\r", "-\t\t\t// add only external jars, internal jars (that are internal to the project)\r", "-\t\t\t// and source folders of the project\r", "-\t\t\tIClasspathEntry[] entries = javaProject.getResolvedClasspath(true);\r", "-\t\t\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "-\t\t\t\tIClasspathEntry entry = entries[i];\r", "+\tIWorkspaceRoot root = project.getUnderlyingResource().getWorkspace().getRoot();\r", "+\tIClasspathEntry[] entries = project.getResolvedClasspath(true);\r", "+\tIJavaModel model = project.getJavaModel();\r", "+\tfor (int i = 0, length = entries.length; i < length; i++) {\r", "+\t\tIClasspathEntry entry = entries[i];\r", "+\t\tswitch (entry.getEntryKind()) {\r", "+\t\t\tcase IClasspathEntry.CPE_LIBRARY:\r", "-\t\t\t\tswitch (entry.getEntryKind()) {\r", "-\t\t\t\t\tcase IClasspathEntry.CPE_LIBRARY:\r", "-\t\t\t\t\t\tif (element.getFullPath().isPrefixOf(path) // jar internal to project \r", "-\t\t\t\t\t\t\t\t|| element.getWorkspace().getRoot().findMember(path) == null) { // jar external to workspace\r", "-\t\t\t\t\t\t\tthis.add(path);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase IClasspathEntry.CPE_SOURCE:\r", "-\t\t\t\t\t\tif (element.getFullPath().isPrefixOf(path)) { // source folder inside project\r", "-\t\t\t\t\t\t\tthis.add(path);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "+\t\t\t\tthis.add(path, true);\r", "+\t\t\t\tthis.addEnclosingProjectOrJar(path);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IClasspathEntry.CPE_PROJECT:\r", "+\t\t\t\tif (includesPrereqProjects) {\r", "+\t\t\t\t\tthis.add(model.getJavaProject(entry.getPath().lastSegment()), true);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase IClasspathEntry.CPE_SOURCE:\r", "+\t\t\t\tpath = entry.getPath();\r", "+\t\t\t\tif (path.segmentCount() == 1) {\r", "+\t\t\t\t\t// project is source\r", "+\t\t\t\t\tthis.add(root.getProject(path.lastSegment()));\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\t// regular source folder\r", "+\t\t\t\t\tthis.add(root.getFolder(path));\r", "+\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t}\r", "+}\r", "-\t\t} catch (JavaModelException e) {\r", "-\t\tthis.add(element.getFullPath());\r"]}], "num": 52546}
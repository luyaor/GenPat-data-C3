{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9eabd9a45021f1240d9d056bfbac8c3c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e06b054e62c940cb39dcb9d3901981c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Break.java", "commitBeforeChange": "c8221f5c580cd126f6de94fa93158a10785920e8", "commitAfterChange": "16e02dd1e5ecae00490885481270763dbd00d718", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": "  \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\ttargetContext.recordBreakFrom(flowInfo);", "-\t\twhile (true) {", "+\t\t", "+\t\tdo {", "-\t\t\t// remember the initialization at this", "-\t\t\t// point for dealing with blank final variables.", "+\t\t\ttraversedContext.recordBreakFrom(flowInfo);", "-\t\t\tif (traversedContext == targetContext) {", "-\t\t\t\tbreak;", "-\t\t\t} else {", "-\t\t\t\ttraversedContext = traversedContext.parent;", "+\t\t\tAstNode node;", "+\t\t\tif ((node = traversedContext.associatedNode) instanceof TryStatement) {", "+\t\t\t\tTryStatement tryStatement = (TryStatement) node;", "+\t\t\t\tflowInfo.addInitializationsFrom(tryStatement.subRoutineInits); // collect inits\t\t\t", "-\t\t}", "+\t\t} while (traversedContext != targetContext && (traversedContext = traversedContext.parent) != null);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9e8e31b4f2f22e09feaa41c10727524", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Continue.java", "commitBeforeChange": "c8221f5c580cd126f6de94fa93158a10785920e8", "commitAfterChange": "16e02dd1e5ecae00490885481270763dbd00d718", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "signatureAfterChange": " \t \tpublic FlowInfo analyseCode( \t\tBlockScope currentScope, \t\tFlowContext flowContext, \t\tFlowInfo flowInfo)", "diff": ["-\t\ttargetContext.recordContinueFrom(flowInfo);", "-\t\twhile (true) {", "+", "+\t\tdo {", "-\t\t\t// remember the initialization at this", "-\t\t\t// point for dealing with blank final variables.", "-\t\t\ttraversedContext.recordReturnFrom(flowInfo.unconditionalInits());", "+\t\t\ttraversedContext.recordContinueFrom(flowInfo);", "+\t\t\ttraversedContext.recordReturnFrom(flowInfo.unconditionalInits());//TODO: not only if disctinct from target?", "-\t\t\tif (traversedContext == targetContext) {", "-\t\t\t\tbreak;", "-\t\t\t} else {", "-\t\t\t\ttraversedContext = traversedContext.parent;", "+\t\t\tAstNode node;", "+\t\t\tif ((node = traversedContext.associatedNode) instanceof TryStatement) {", "+\t\t\t\tTryStatement tryStatement = (TryStatement) node;", "+\t\t\t\tflowInfo.addInitializationsFrom(tryStatement.subRoutineInits); // collect inits\t\t\t", "-\t\t}", "+\t\t} while (traversedContext != targetContext && (traversedContext = traversedContext.parent) != null);", "+\t\t"]}], "num": 31649}
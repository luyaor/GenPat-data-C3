{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26fdea7ba602b2905923798f8b6d8906", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fff1efd06a597e60f4b278219d280e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "2a762b85f858691a63d4547af177cc649d7b1329", "commitAfterChange": "7675c409a4b3b1e15b1cc476a0a66b988b5fb4a0", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 50, "signatureBeforeChange": "\r \t\tpublic IClasspathEntry[] getResolvedClasspath(\r \t\t\tboolean ignoreUnresolvedVariable,\r \t\t\tboolean generateMarkerOnError)\r \t\t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic IClasspathEntry[] getResolvedClasspath(\r \t\tIClasspathEntry[] classpathEntries,\r \t\tboolean ignoreUnresolvedEntry,\r \t\tboolean generateMarkerOnError)\r \t\tthrows JavaModelException", "diff": ["-\t\t */\r", "-\t\tpublic IClasspathEntry[] getResolvedClasspath(\r", "-\t\t\tboolean ignoreUnresolvedVariable,\r", "-\t\t\tboolean generateMarkerOnError)\r", "-\t\t\tthrows JavaModelException {\r", "-\t\t\tJavaProjectElementInfo projectInfo;\r", "-\t\t\tif (this.isOpen()){\r", "-\t\t\t\tprojectInfo = getJavaProjectElementInfo();\r", "-\t\t\t} else {\r", "-\t\t\t\t// avoid populating the model for only retrieving the resolved classpath (13395)\r", "-\t\t\t\tprojectInfo = null;\r", "+\t */\r", "+\tpublic IClasspathEntry[] getResolvedClasspath(\r", "+\t\tIClasspathEntry[] classpathEntries,\r", "+\t\tboolean ignoreUnresolvedEntry,\r", "+\t\tboolean generateMarkerOnError)\r", "+\t\tthrows JavaModelException {\r", "+\r", "+\t\tif (generateMarkerOnError){\r", "+\t\t\tflushClasspathProblemMarkers(false);\r", "+\t\t}\r", "+\r", "+\t\tint length = classpathEntries.length;\r", "+\t\tint index = 0;\r", "+\t\tArrayList resolvedEntries = new ArrayList();\r", "+\t\t\r", "+\t\tfor (int i = 0; i < length; i++) {\r", "+\r", "+\t\t\tIClasspathEntry rawEntry = classpathEntries[i];\r", "+\r", "+\t\t\t/* validation if needed */\r", "+\t\t\tif (generateMarkerOnError) {\r", "+\t\t\t\tIJavaModelStatus status =\r", "+\t\t\t\t\tJavaConventions.validateClasspathEntry(this, rawEntry, false);\r", "+\t\t\t\tif (!status.isOK())\r", "+\t\t\t\t\tcreateClasspathProblemMarker(\r", "+\t\t\t\t\t\tstatus.getMessage(), \r", "+\t\t\t\t\t\tIMarker.SEVERITY_ERROR,\r", "+\t\t\t\t\t\tfalse);\r", "-\t\t\t\r", "-\t\t\t// reuse cache if not needing to refresh markers or checking bound variables\r", "-\t\t\tif (ignoreUnresolvedVariable && !generateMarkerOnError && (projectInfo != null)){\r", "-\t\t\t\t// resolved path is cached on its info\r", "-\t\t\t\tIClasspathEntry[] infoPath = projectInfo.lastResolvedClasspath;\r", "-\t\t\t\tif (infoPath != null) return infoPath;\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\tIClasspathEntry[] classpath = getRawClasspath();\r", "-\t\r", "-\t\t\tif (generateMarkerOnError){\r", "-\t\t\t\tflushClasspathProblemMarkers(false);\r", "-\t\t\t}\r", "-\t\r", "-\t\t\tIClasspathEntry[] resolvedPath = classpath; // clone only if necessary\r", "-\t\t\tint length = classpath.length;\r", "-\t\t\tint index = 0;\r", "-\t\r", "-\t\t\tfor (int i = 0; i < length; i++) {\r", "-\t\r", "-\t\t\t\tIClasspathEntry entry = classpath[i];\r", "-\t\r", "-\t\t\t\t/* validation if needed */\r", "-\t\t\t\tif (generateMarkerOnError) {\r", "-\t\t\t\t\tIJavaModelStatus status =\r", "-\t\t\t\t\t\tJavaConventions.validateClasspathEntry(this, entry, false);\r", "-\t\t\t\t\tif (!status.isOK())\r", "-\t\t\t\t\t\tcreateClasspathProblemMarker(\r", "-\t\t\t\t\t\t\tstatus.getMessage(), \r", "-\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,\r", "-\t\t\t\t\t\t\tfalse);\r", "-\t\t\t\t}\r", "-\t\r", "-\t\t\t\t/* resolve variables if any, unresolved ones are ignored */\r", "-\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_VARIABLE) {\r", "-\t\r", "-\t\t\t\t\t// clone original path\r", "-\t\t\t\t\tif (resolvedPath == classpath) {\r", "-\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\tclasspath,\r", "-\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\tresolvedPath = new IClasspathEntry[length],\r", "-\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\ti);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\t// resolve current variable (handling variable->variable->variable->entry\r", "-\t\t\t\t\tIPath variablePath = entry.getPath(); // for error reporting\r", "-\t\t\t\t\tentry = JavaCore.getResolvedClasspathEntry(entry);\r", "-\t\t\t\t\tif (entry == null) {\r", "-\t\t\t\t\t\tif (!ignoreUnresolvedVariable) {\r", "+\r", "+\t\t\tswitch (rawEntry.getEntryKind()){\r", "+\t\t\t\t\r", "+\t\t\t\tcase IClasspathEntry.CPE_VARIABLE :\r", "+\t\t\t\t\r", "+\t\t\t\t\tIClasspathEntry resolvedEntry = JavaCore.getResolvedClasspathEntry(rawEntry);\r", "+\t\t\t\t\tif (resolvedEntry == null) {\r", "+\t\t\t\t\t\tif (!ignoreUnresolvedEntry) {\r", "-\t\t\t\t\t\t\t\t\tvariablePath.toString()));\r", "+\t\t\t\t\t\t\t\t\trawEntry.getPath().toString()));\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tbreak; \r", "+\r", "+\t\t\t\tcase IClasspathEntry.CPE_CONTAINER :\r", "+\t\t\t\t\r", "+\t\t\t\t\tIClasspathEntry[] containerEntries = getResolvedClasspathContainer(rawEntry.getPath());\r", "+\t\t\t\t\tif (containerEntries == null){\r", "+\t\t\t\t\t\t// unbound container\r", "+\t\t\t\t\t\tif (!ignoreUnresolvedEntry) {\r", "+\t\t\t\t\t\t\tthrow new JavaModelException(\r", "+\t\t\t\t\t\t\t\tnew JavaModelStatus(\r", "+\t\t\t\t\t\t\t\t\tIJavaModelStatusConstants.CP_CONTAINER_PATH_UNBOUND,\r", "+\t\t\t\t\t\t\t\t\trawEntry.getPath().toString()));\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t// container was bound, container entries could be variables\r", "+\t\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){\r", "+\t\t\t\t\t\t\tIClasspathEntry containerRawEntry = containerEntries[j];\r", "+\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\tif (generateMarkerOnError) {\r", "+\t\t\t\t\t\t\t\tIJavaModelStatus status =\r", "+\t\t\t\t\t\t\t\t\tJavaConventions.validateClasspathEntry(this, containerRawEntry, false);\r", "+\t\t\t\t\t\t\t\tif (!status.isOK())\r", "+\t\t\t\t\t\t\t\t\tcreateClasspathProblemMarker(\r", "+\t\t\t\t\t\t\t\t\t\tstatus.getMessage(), \r", "+\t\t\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,\r", "+\t\t\t\t\t\t\t\t\t\tfalse);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\t\t// container entry is variable ?\r", "+\t\t\t\t\t\t\tif (containerRawEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE){\r", "+\t\t\t\t\t\t\t\tresolvedEntry = JavaCore.getResolvedClasspathEntry(containerRawEntry);\r", "+\t\t\t\t\t\t\t\tif (resolvedEntry == null) {\r", "+\t\t\t\t\t\t\t\t\tif (!ignoreUnresolvedEntry) {\r", "+\t\t\t\t\t\t\t\t\t\tthrow new JavaModelException(\r", "+\t\t\t\t\t\t\t\t\t\t\tnew JavaModelStatus(\r", "+\t\t\t\t\t\t\t\t\t\t\t\tIJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND,\r", "+\t\t\t\t\t\t\t\t\t\t\t\tcontainerRawEntry.getPath().toString()));\r", "+\t\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\tresolvedEntries.add(containerRawEntry);\r", "+\t\t\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\tif (entry != null) {\r", "-\t\t\t\t\tresolvedPath[index++] = entry;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\r", "-\t\t\t// resize resolved classpath in case some variable entries could not be resolved\r", "-\t\t\tif (index != length) {\r", "-\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\tresolvedPath,\r", "-\t\t\t\t\t0,\r", "-\t\t\t\t\tresolvedPath = new IClasspathEntry[index],\r", "-\t\t\t\t\t0,\r", "-\t\t\t\t\tindex);\r", "-\t\t\t}\r", "-\t\t\tif (projectInfo != null){\r", "-\t\t\t\tprojectInfo.lastResolvedClasspath = resolvedPath;\r", "-\t\t\t}\r", "-\t\t\treturn resolvedPath;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\tdefault :\r", "+\r", "+\t\t\t\t\tresolvedEntries.add(rawEntry);\r", "+\t\t\t\t\r", "+\t\t\t}\t\t\t\t\t\r", "+\r", "+\t\tIClasspathEntry[] resolvedPath = new IClasspathEntry[resolvedEntries.size()];\r", "+\t\tresolvedEntries.toArray(resolvedPath);\r", "+\r", "+\t\treturn resolvedPath;\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1897b1a4c83aa8abf2a782b359fc4e3e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 80, "signatureBeforeChange": "\r \tpublic IClasspathEntry[] getResolvedClasspath(boolean ignoreUnresolvedVariable) throws JavaModelException", "signatureAfterChange": "\r \tpublic IClasspathEntry[] getResolvedClasspath(boolean ignoreUnresolvedVariable, boolean generateMarkerOnError) throws JavaModelException", "diff": ["-\t\tIClasspathEntry[] classpath = getRawClasspath();\r", "-\t\tIClasspathEntry[] resolvedPath = classpath; // clone only if necessary\r", "-\t\tint length = classpath.length;\r", "-\t\tint index = 0;\r", "-\t\t\r", "-\t\tfor (int i = 0; i < length; i++){\r", "-\t\t\t\r", "-\t\t\tIClasspathEntry entry = classpath[i];\r", "-\r", "-\t\t\t/* resolve variables if any, unresolved ones are ignored */\r", "-\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_VARIABLE){\r", "-\r", "-\t\t\t\t// clone original path\r", "-\t\t\t\tif (resolvedPath == classpath){\r", "-\t\t\t\t\tSystem.arraycopy(classpath, 0, resolvedPath = new IClasspathEntry[length], 0, i);\r", "-\t\t\t\t}\r", "-\t\t\t\t// resolve current variable (handling variable->variable->variable->entry\r", "-\t\t\t\tIPath variablePath = entry.getPath(); // for error reporting\r", "-\t\t\t\tentry = JavaCore.getResolvedClasspathEntry(entry);\r", "-\t\t\t\tif (entry == null && !ignoreUnresolvedVariable){\r", "-\t\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND, variablePath.toString()));\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tif (entry != null){\r", "-\t\t\t\tresolvedPath[index++] = entry;\r", "-\t\t\t}\r", "-\t\t}\r", "-\r", "-\t\t// resize resolved classpath in case some variable entries could not be resolved\r", "-\t\tif (index != length){\r", "-\t\t\tSystem.arraycopy(resolvedPath, 0, resolvedPath = new IClasspathEntry[index], 0, index);\r", "-\t\t}\r", "-\t\treturn resolvedPath;\r", "+\t */\r", "+\tpublic IClasspathEntry[] getResolvedClasspath(boolean ignoreUnresolvedVariable, boolean generateMarkerOnError) throws JavaModelException {\r", "+\r", "+\t\tIClasspathEntry[] classpath = getRawClasspath();\r", "+\t\tIClasspathEntry[] resolvedPath = classpath; // clone only if necessary\r", "+\t\tint length = classpath.length;\r", "+\t\tint index = 0;\r", "+\t\t\r", "+\t\tfor (int i = 0; i < length; i++){\r", "+\t\t\t\r", "+\t\t\tIClasspathEntry entry = classpath[i];\r", "+\r", "+\t\t\t/* validation if needed */\r", "+\t\t\tif (generateMarkerOnError){\r", "+\t\t\t\tIJavaModelStatus status = JavaConventions.validateClasspathEntry(this, entry, false);\r", "+\t\t\t\tif (!status.isOK()) createClasspathProblemMarker(entry, status.getMessage());\r", "+\t\t\t}\r", "+\r", "+\t\t\t/* resolve variables if any, unresolved ones are ignored */\r", "+\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_VARIABLE){\r", "+\r", "+\t\t\t\t// clone original path\r", "+\t\t\t\tif (resolvedPath == classpath){\r", "+\t\t\t\t\tSystem.arraycopy(classpath, 0, resolvedPath = new IClasspathEntry[length], 0, i);\r", "+\t\t\t\t}\r", "+\t\t\t\t// resolve current variable (handling variable->variable->variable->entry\r", "+\t\t\t\tIPath variablePath = entry.getPath(); // for error reporting\r", "+\t\t\t\tentry = JavaCore.getResolvedClasspathEntry(entry);\r", "+\t\t\t\tif (entry == null){\r", "+\t\t\t\t\tif (!ignoreUnresolvedVariable){\r", "+\t\t\t\t\t\tthrow new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND, variablePath.toString()));\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tif (entry != null){\r", "+\t\t\t\tresolvedPath[index++] = entry;\r", "+\t\t\t}\r", "+\t\t}\r", "+\r", "+\t\t// resize resolved classpath in case some variable entries could not be resolved\r", "+\t\tif (index != length){\r", "+\t\t\tSystem.arraycopy(resolvedPath, 0, resolvedPath = new IClasspathEntry[index], 0, index);\r", "+\t\t}\r", "+\t\treturn resolvedPath;\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cf7f09bc0c3a313d5e82ad7a018fe64", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "2a762b85f858691a63d4547af177cc649d7b1329", "commitAfterChange": "7675c409a4b3b1e15b1cc476a0a66b988b5fb4a0", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "\r \t\tpublic IClasspathEntry[] getResolvedClasspath(\r \t\t\tboolean ignoreUnresolvedVariable,\r \t\t\tboolean generateMarkerOnError)\r \t\t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic IClasspathEntry[] getResolvedClasspath(\r \t\tboolean ignoreUnresolvedEntry,\r \t\tboolean generateMarkerOnError)\r \t\tthrows JavaModelException", "diff": ["-\t\t */\r", "-\t\tpublic IClasspathEntry[] getResolvedClasspath(\r", "-\t\t\tboolean ignoreUnresolvedVariable,\r", "-\t\t\tboolean generateMarkerOnError)\r", "-\t\t\tthrows JavaModelException {\r", "+\t */\r", "+\tpublic IClasspathEntry[] getResolvedClasspath(\r", "+\t\tboolean ignoreUnresolvedEntry,\r", "+\t\tboolean generateMarkerOnError)\r", "+\t\tthrows JavaModelException {\r", "+\r", "+\t\tJavaProjectElementInfo projectInfo;\r", "+\t\tif (this.isOpen()){\r", "+\t\t\tprojectInfo = getJavaProjectElementInfo();\r", "+\t\t} else {\r", "+\t\t\t// avoid populating the model for only retrieving the resolved classpath (13395)\r", "+\t\t\tprojectInfo = null;\r", "+\t\t}\r", "+\t\t\r", "+\t\t// reuse cache if not needing to refresh markers or checking bound variables\r", "+\t\tif (ignoreUnresolvedEntry && !generateMarkerOnError && projectInfo != null){\r", "+\t\t\t// resolved path is cached on its info\r", "+\t\t\tIClasspathEntry[] infoPath = projectInfo.lastResolvedClasspath;\r", "+\t\t\tif (infoPath != null) return infoPath;\r", "+\t\t}\r", "+\r", "+\t\tIClasspathEntry[] resolvedPath = getResolvedClasspath(getRawClasspath(), ignoreUnresolvedEntry, generateMarkerOnError);\r", "+\r", "+\t\tif (projectInfo != null){\r", "+\t\t\tprojectInfo.lastResolvedClasspath = resolvedPath;\r", "+\t\t}\r", "+\t\treturn resolvedPath;\r", "+\t}\r", "-\t\t\tJavaProjectElementInfo projectInfo;\r", "-\t\t\tif (this.isOpen()){\r", "-\t\t\t\tprojectInfo = getJavaProjectElementInfo();\r", "-\t\t\t} else {\r", "-\t\t\t\t// avoid populating the model for only retrieving the resolved classpath (13395)\r", "-\t\t\t\tprojectInfo = null;\r", "-\t\t\t\r", "-\t\t\t// reuse cache if not needing to refresh markers or checking bound variables\r", "-\t\t\tif (ignoreUnresolvedVariable && !generateMarkerOnError && (projectInfo != null)){\r", "-\t\t\t\t// resolved path is cached on its info\r", "-\t\t\t\tIClasspathEntry[] infoPath = projectInfo.lastResolvedClasspath;\r", "-\t\t\t\tif (infoPath != null) return infoPath;\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\tIClasspathEntry[] classpath = getRawClasspath();\r", "-\t\r", "-\t\t\tif (generateMarkerOnError){\r", "-\t\t\t\tflushClasspathProblemMarkers(false);\r", "-\t\t\t}\r", "-\t\r", "-\t\t\tIClasspathEntry[] resolvedPath = classpath; // clone only if necessary\r", "-\t\t\tint length = classpath.length;\r", "-\t\t\tint index = 0;\r", "-\t\r", "-\t\t\tfor (int i = 0; i < length; i++) {\r", "-\t\r", "-\t\t\t\tIClasspathEntry entry = classpath[i];\r", "-\t\r", "-\t\t\t\t/* validation if needed */\r", "-\t\t\t\tif (generateMarkerOnError) {\r", "-\t\t\t\t\tIJavaModelStatus status =\r", "-\t\t\t\t\t\tJavaConventions.validateClasspathEntry(this, entry, false);\r", "-\t\t\t\t\tif (!status.isOK())\r", "-\t\t\t\t\t\tcreateClasspathProblemMarker(\r", "-\t\t\t\t\t\t\tstatus.getMessage(), \r", "-\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,\r", "-\t\t\t\t\t\t\tfalse);\r", "-\t\t\t\t}\r", "-\t\r", "-\t\t\t\t/* resolve variables if any, unresolved ones are ignored */\r", "-\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_VARIABLE) {\r", "-\t\r", "-\t\t\t\t\t// clone original path\r", "-\t\t\t\t\tif (resolvedPath == classpath) {\r", "-\t\t\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\t\t\tclasspath,\r", "-\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\tresolvedPath = new IClasspathEntry[length],\r", "-\t\t\t\t\t\t\t0,\r", "-\t\t\t\t\t\t\ti);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\t// resolve current variable (handling variable->variable->variable->entry\r", "-\t\t\t\t\tIPath variablePath = entry.getPath(); // for error reporting\r", "-\t\t\t\t\tentry = JavaCore.getResolvedClasspathEntry(entry);\r", "-\t\t\t\t\tif (entry == null) {\r", "-\t\t\t\t\t\tif (!ignoreUnresolvedVariable) {\r", "-\t\t\t\t\t\t\t\t\tvariablePath.toString()));\r", "-\t\t\t\t}\r", "-\t\t\t\tif (entry != null) {\r", "-\t\t\t\t\tresolvedPath[index++] = entry;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\r", "-\t\t\t// resize resolved classpath in case some variable entries could not be resolved\r", "-\t\t\tif (index != length) {\r", "-\t\t\t\tSystem.arraycopy(\r", "-\t\t\t\t\tresolvedPath,\r", "-\t\t\t\t\t0,\r", "-\t\t\t\t\tresolvedPath = new IClasspathEntry[index],\r", "-\t\t\t\t\t0,\r", "-\t\t\t\t\tindex);\r", "-\t\t\t}\r", "-\t\t\tif (projectInfo != null){\r", "-\t\t\t\tprojectInfo.lastResolvedClasspath = resolvedPath;\r", "-\t\t\t}\r", "-\t\t\treturn resolvedPath;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b3f12035713781b5bb5b93c47209fd4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "1317e9ebe26807b45d83a46701194241e6f648d5", "commitAfterChange": "3649f3f6d703fd53c9c12b41cdc037f657d98134", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "\r \tpublic IClasspathEntry[] getResolvedClasspath(\r \t\tIClasspathEntry[] classpathEntries,\r \t\tboolean ignoreUnresolvedEntry,\r \t\tboolean generateMarkerOnError)\r \t\tthrows JavaModelException", "signatureAfterChange": "\r \tpublic IClasspathEntry[] getResolvedClasspath(\r \t\tIClasspathEntry[] classpathEntries,\r \t\tboolean ignoreUnresolvedEntry,\r \t\tboolean generateMarkerOnError)\r \t\tthrows JavaModelException", "diff": ["-\t\t\t\t\tIClasspathEntry[] containerEntries = JavaCore.getResolvedClasspathContainer(rawEntry.getPath(), this);\r", "-\t\t\t\t\tif (containerEntries == null){\r", "+\t\t\t\t\tIClasspathContainer container = JavaCore.getClasspathContainer(rawEntry.getPath(), this);\r", "+\t\t\t\t\tif (container == null){\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t// container was bound, container entries could be variables\r", "-\t\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){\r", "-\t\t\t\t\t\t\tIClasspathEntry containerRawEntry = containerEntries[j];\r", "-\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\tif (generateMarkerOnError) {\r", "-\t\t\t\t\t\t\t\tIJavaModelStatus status =\r", "-\t\t\t\t\t\t\t\t\tJavaConventions.validateClasspathEntry(this, containerRawEntry, false);\r", "-\t\t\t\t\t\t\t\tif (!status.isOK())\r", "-\t\t\t\t\t\t\t\t\tcreateClasspathProblemMarker(\r", "-\t\t\t\t\t\t\t\t\t\tstatus.getMessage(), \r", "-\t\t\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,\r", "-\t\t\t\t\t\t\t\t\t\tfalse);\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\t\t// container entry is variable ?\r", "-\t\t\t\t\t\t\tif (containerRawEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE){\r", "-\t\t\t\t\t\t\t\tresolvedEntry = JavaCore.getResolvedClasspathEntry(containerRawEntry);\r", "-\t\t\t\t\t\t\t\tif (resolvedEntry == null) {\r", "-\t\t\t\t\t\t\t\t\tif (!ignoreUnresolvedEntry) {\r", "-\t\t\t\t\t\t\t\t\t\tthrow new JavaModelException(\r", "-\t\t\t\t\t\t\t\t\t\t\tnew JavaModelStatus(\r", "-\t\t\t\t\t\t\t\t\t\t\t\tIJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND,\r", "-\t\t\t\t\t\t\t\t\t\t\t\tcontainerRawEntry.getPath().toString()));\r", "-\t\t\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t}\r", "+\r", "+\t\t\t\t\tIClasspathEntry[] containerEntries = container.getClasspathEntries();\r", "+\t\t\t\t\tif (containerEntries == null) break;\r", "+\r", "+\t\t\t\t\t// container was bound, container entries could be variables\r", "+\t\t\t\t\tfor (int j = 0, containerLength = containerEntries.length; j < containerLength; j++){\r", "+\t\t\t\t\t\tIClasspathEntry containerRawEntry = containerEntries[j];\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\tif (generateMarkerOnError) {\r", "+\t\t\t\t\t\t\tIJavaModelStatus status =\r", "+\t\t\t\t\t\t\t\tJavaConventions.validateClasspathEntry(this, containerRawEntry, false);\r", "+\t\t\t\t\t\t\tif (!status.isOK())\r", "+\t\t\t\t\t\t\t\tcreateClasspathProblemMarker(\r", "+\t\t\t\t\t\t\t\t\tstatus.getMessage(), \r", "+\t\t\t\t\t\t\t\t\tIMarker.SEVERITY_ERROR,\r", "+\t\t\t\t\t\t\t\t\tfalse);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\t// container entry is variable ?\r", "+\t\t\t\t\t\tif (containerRawEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE){\r", "+\t\t\t\t\t\t\tresolvedEntry = JavaCore.getResolvedClasspathEntry(containerRawEntry);\r", "+\t\t\t\t\t\t\tif (resolvedEntry == null) {\r", "+\t\t\t\t\t\t\t\tif (!ignoreUnresolvedEntry) {\r", "+\t\t\t\t\t\t\t\t\tthrow new JavaModelException(\r", "+\t\t\t\t\t\t\t\t\t\tnew JavaModelStatus(\r", "+\t\t\t\t\t\t\t\t\t\t\tIJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND,\r", "+\t\t\t\t\t\t\t\t\t\t\tcontainerRawEntry.getPath().toString()));\r", "-\t\t\t\t\t\t\t\tresolvedEntries.add(containerRawEntry);\r", "+\t\t\t\t\t\t\t\tresolvedEntries.add(resolvedEntry);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tresolvedEntries.add(containerRawEntry);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49134a2cff97eb9630661550acd0461e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "f39402d13165cb2a8baa9e8822f47cb5416f824f", "commitAfterChange": "c59f5d3873f087b004eace9b9fa6844d0400c666", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError) \t\tthrows JavaModelException", "signatureAfterChange": " \tpublic IClasspathEntry[] getResolvedClasspath( \t\tIClasspathEntry[] classpathEntries, \t\tboolean ignoreUnresolvedEntry, \t\tboolean generateMarkerOnError) \t\tthrows JavaModelException", "diff": ["-\t\t\tIMarker marker = null;", "-\t\t\tif (generateMarkerOnError) {", "-\t\t\t\tIJavaModelStatus status =", "-\t\t\t\t\tJavaConventions.validateClasspathEntry(this, rawEntry, false);", "-\t\t\t\tif (!status.isOK()) {", "-\t\t\t\t\tString incompleteCPOption = this.getOption(JavaCore.CORE_INCOMPLETE_CLASSPATH, true);", "-\t\t\t\t\tmarker = createClasspathProblemMarker(", "-\t\t\t\t\t\tstatus.getMessage(), ", "-\t\t\t\t\t\tJavaCore.ERROR.equals(incompleteCPOption) ? IMarker.SEVERITY_ERROR : IMarker.SEVERITY_WARNING,", "-\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\tfalse);", "-\t\t\t\t}", "+\t\t\tIJavaModelStatus status = null;", "+\t\t\tif (generateMarkerOnError || !ignoreUnresolvedEntry) {", "+\t\t\t\tstatus = JavaConventions.validateClasspathEntry(this, rawEntry, false);", "+\t\t\t\tif (generateMarkerOnError && !status.isOK()) createClasspathProblemMarker(status);", "-\t\t\t\t\t\tif (marker != null) {", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tmarker.setAttribute(IJavaModelMarker.UNBOUND_VARIABLE, rawEntry.getPath().segment(0));", "-\t\t\t\t\t\t\t} catch(CoreException e) {", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!ignoreUnresolvedEntry) {", "-\t\t\t\t\t\t\tthrow new JavaModelException(", "-\t\t\t\t\t\t\t\tnew JavaModelStatus(", "-\t\t\t\t\t\t\t\t\tIJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND,", "-\t\t\t\t\t\t\t\t\trawEntry.getPath().toString()));", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!ignoreUnresolvedEntry) throw new JavaModelException(status);", "-\t\t\t\t\t\t// unbound container", "-\t\t\t\t\t\tif (marker != null) {", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tmarker.setAttribute(IJavaModelMarker.UNBOUND_CONTAINER, rawEntry.getPath().makeRelative().toString());", "-\t\t\t\t\t\t\t} catch(CoreException e) {", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!ignoreUnresolvedEntry) {", "-\t\t\t\t\t\t\tthrow new JavaModelException(", "-\t\t\t\t\t\t\t\tnew JavaModelStatus(", "-\t\t\t\t\t\t\t\t\tIJavaModelStatusConstants.CP_CONTAINER_PATH_UNBOUND,", "-\t\t\t\t\t\t\t\t\trawEntry.getPath().toString()));", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!ignoreUnresolvedEntry) throw new JavaModelException(status);", "-\t\t\t\t\t\tIClasspathEntry containerRawEntry = containerEntries[j];", "+\t\t\t\t\t\tIClasspathEntry cEntry = containerEntries[j];", "-\t\t\t\t\t\t\tIJavaModelStatus status =", "-\t\t\t\t\t\t\t\tJavaConventions.validateClasspathEntry(this, containerRawEntry, false);", "-\t\t\t\t\t\t\tif (!status.isOK()) {", "-\t\t\t\t\t\t\t\tString incompleteCPOption = this.getOption(JavaCore.CORE_INCOMPLETE_CLASSPATH, true);", "-\t\t\t\t\t\t\t\tcreateClasspathProblemMarker(", "-\t\t\t\t\t\t\t\t\tstatus.getMessage(), ", "-\t\t\t\t\t\t\t\t\tJavaCore.ERROR.equals(incompleteCPOption) ? IMarker.SEVERITY_ERROR : IMarker.SEVERITY_WARNING,", "-\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\tfalse);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tIJavaModelStatus containerStatus = JavaConventions.validateClasspathEntry(this, cEntry, false);", "+\t\t\t\t\t\t\tif (!containerStatus.isOK()) createClasspathProblemMarker(containerStatus);", "-\t\t\t\t\t\t\tcontainerRawEntry = new ClasspathEntry(", "-\t\t\t\t\t\t\t\tcontainerRawEntry.getContentKind(),", "-\t\t\t\t\t\t\t\tcontainerRawEntry.getEntryKind(), ", "-\t\t\t\t\t\t\t\tcontainerRawEntry.getPath(),", "-\t\t\t\t\t\t\t\tcontainerRawEntry.getExclusionPatterns(),", "-\t\t\t\t\t\t\t\tcontainerRawEntry.getSourceAttachmentPath(),", "-\t\t\t\t\t\t\t\tcontainerRawEntry.getSourceAttachmentRootPath(),", "-\t\t\t\t\t\t\t\tcontainerRawEntry.getOutputLocation(),", "+\t\t\t\t\t\t\tcEntry = new ClasspathEntry(cEntry.getContentKind(),", "+\t\t\t\t\t\t\t\tcEntry.getEntryKind(), cEntry.getPath(),", "+\t\t\t\t\t\t\t\tcEntry.getExclusionPatterns(), cEntry.getSourceAttachmentPath(),", "+\t\t\t\t\t\t\t\tcEntry.getSourceAttachmentRootPath(), cEntry.getOutputLocation(), ", "-\t\t\t\t\t\tresolvedEntries.add(containerRawEntry);", "+\t\t\t\t\t\tresolvedEntries.add(cEntry);"]}], "num": 1342}
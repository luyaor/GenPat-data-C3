{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3111112bbf5166072eef718790a1f36f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b840fcea66e275c407d163437bc9c48", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "2c216d62729c7bf0a533819d86bda0a688a39a26", "commitAfterChange": "789f8ee3dc78aa2cb74e4e857fb2da09cf6b5b4e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic MethodBinding tiebreakMethod()", "signatureAfterChange": " \tpublic MethodBinding tiebreakMethod()", "diff": ["-\t\t\tTypeVariableBinding[] originalVariables = originalMethod.typeVariables;", "+\t\t\tTypeVariableBinding[] originalVariables = this.originalMethod.typeVariables;", "-\t\t\tfor (int i = 0; i < length; i++)", "-\t\t\t\tnewArguments[i] = environment.convertToRawType(originalVariables[i].upperBound());", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tTypeVariableBinding originalVariable = originalVariables[i];", "+\t\t\t\tif (originalVariable.boundsCount() == 1) {", "+\t\t\t\t\tnewArguments[i] = this.environment.convertToRawType(originalVariable.upperBound());", "+\t\t\t\t} else {", "+\t\t\t\t\tnewArguments[i] = this.environment.convertToRawType(", "+\t\t\t\t\t\t\t// use an intersection type to retain full bound information", "+\t\t\t\t\t\t\tthis.environment.createWildcard(null, 0, originalVariable.superclass(), originalVariable.superInterfaces(), Wildcard.EXTENDS));", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44f5ed4443b999f6f0c7d3df44348d96", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "b26a664ac93cb33d6cf50930ea25f3388ced39d8", "commitAfterChange": "2253e00cb54fb5875d4cee131629e073f4dfe64f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "signatureAfterChange": " \t \tprivate void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation)", "diff": ["-\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "-\t\t\t\t\t\t\t\t\tfindMemberTypes(", "-\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "-\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\tscope.enclosingSourceType(),", "-\t\t\t\t\t\t\t\t\tfalse,", "-\t\t\t\t\t\t\t\t\tnew ObjectVector());", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif(this.completionToken.length == 0 &&", "+\t\t\t\t\t\t\t\t\t(astNodeParent instanceof ParameterizedSingleTypeReference ||", "+\t\t\t\t\t\t\t\t\t\t\tastNodeParent instanceof ParameterizedQualifiedTypeReference)) {", "+\t\t\t\t\t\t\t\tthis.setSourceRange(astNode.sourceStart, astNode.sourceStart - 1, false);", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tfindParameterizedType((TypeReference)astNodeParent);", "+\t\t\t\t\t\t\t} else { ", "+\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\t\t\t\tfindMemberTypes(", "+\t\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\t\t(ReferenceBinding) qualifiedBinding,", "+\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\tscope.enclosingSourceType(),", "+\t\t\t\t\t\t\t\tfalse,", "+\t\t\t\t\t\t\t\tnew ObjectVector());", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMemberValuePair[] memberValuePairs = annotation.memberValuePairs();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.findAnnotationAttributes(this.completionToken, annotation.memberValuePairs(), (ReferenceBinding)annotation.resolvedType);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(memberValuePairs == null || memberValuePairs.length == 0) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(annotation.resolvedType instanceof ReferenceBinding) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMethodBinding[] methodBindings =", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((ReferenceBinding)annotation.resolvedType).availableMethods();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(methodBindings != null &&", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmethodBindings.length == 1 &&", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.equals(methodBindings[0].selector, VALUE)) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(this.expectedTypesPtr > -1 && this.expectedTypes[0].isAnnotationType()) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariablesAndMethods(", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFakeInvocationSite,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinsideTypeAnnotation,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrue);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// can be the start of a qualified type name", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(this.completionToken.length == 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setSourceRange(astNode.sourceStart, astNode.sourceStart - 1, false);", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindAnnotationReference(annotation.type);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMemberValuePair[] memberValuePairs = annotation.memberValuePairs();", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.findAnnotationAttributes(this.completionToken, annotation.memberValuePairs(), (ReferenceBinding)annotation.resolvedType);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(memberValuePairs == null || memberValuePairs.length == 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(annotation.resolvedType instanceof ReferenceBinding) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMethodBinding[] methodBindings =", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t((ReferenceBinding)annotation.resolvedType).availableMethods();", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(methodBindings != null &&", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmethodBindings.length == 1 &&", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCharOperation.equals(methodBindings[0].selector, VALUE)) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(this.expectedTypesPtr > -1 && this.expectedTypes[0].isAnnotationType()) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindVariablesAndMethods(", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.completionToken,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFakeInvocationSite,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tscope,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinsideTypeAnnotation,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrue);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// can be the start of a qualified type name", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfindTypesAndPackages(this.completionToken, scope);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46e4d99e6747e483a6cbdb4481ad50aa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "3d74fc46f613564dbe52550c081fa58f357d0bc5", "commitAfterChange": "b02180d5cfd484077c935b61cfda329a4e9a0c9e", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "signatureAfterChange": " protected void reportMatching(CompilationUnitDeclaration unit, boolean mustResolve) throws CoreException", "diff": ["-\t\t\t\tif (level != null)", "-\t\t\t\t\tthis.patternLocator.matchReportImportRef(importRef, null/*no binding*/, createImportHandle(importRef), level.intValue(), this);", "+\t\t\t\tif (level != null) {", "+\t\t\t\t\tBinding binding = (importRef.bits & ASTNode.OnDemand) != 0", "+\t\t\t\t\t\t? unitScope.getImport(CharOperation.subarray(importRef.tokens, 0, importRef.tokens.length), true, importRef.isStatic())", "+\t\t\t\t\t\t: unitScope.getImport(importRef.tokens, false, importRef.isStatic());", "+\t\t\t\t\tthis.patternLocator.matchReportImportRef(importRef, binding, createImportHandle(importRef), level.intValue(), this);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d15156214df993d43259a05512334cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "581bd48b0a44c3b24fd6cb58cd4506687e6bec7c", "commitAfterChange": "14eeb335b7a4f4b5dc293b65ac56b4b7f62e99e5", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " void checkForInheritedNameClash(MethodBinding inheritedMethod, MethodBinding otherInheritedMethod)", "signatureAfterChange": " void checkInheritedMethods(MethodBinding inheritedMethod, MethodBinding otherInheritedMethod)", "diff": ["-}", "-void checkForInheritedNameClash(MethodBinding inheritedMethod, MethodBinding otherInheritedMethod) {", "-\t// sent from checkMethods() to compare 2 inherited methods that are not 'equal'", "-", "-\t// the 2 inherited methods clash because of a parameterized type overrides a raw type", "-\t//\t\tinterface I { void foo(A a); }", "-\t//\t\tclass Y { void foo(A<String> a) {} }", "-\t//\t\tabstract class X extends Y implements I { }", "-\t//\t\tclass A<T> {}", "-\t// in this case the 2 inherited methods clash because of type variables", "-\t//\t\tinterface I { <T, S> void foo(T t); }", "-\t//\t\tclass Y { <T> void foo(T t) {} }", "-\t//\t\tabstract class X extends Y implements I {}", "-", "-\tif (inheritedMethod.declaringClass.isInterface() || inheritedMethod.isStatic()) return;", "-", "-\tdetectInheritedNameClash(inheritedMethod, otherInheritedMethod);", "+}", "+void checkInheritedMethods(MethodBinding inheritedMethod, MethodBinding otherInheritedMethod) {", "+\t// sent from checkMethods() to compare 2 inherited methods that are not 'equal'", "+\tif (inheritedMethod.declaringClass.erasure() == otherInheritedMethod.declaringClass.erasure()) {", "+\t\tif (inheritedMethod.areParameterErasuresEqual(otherInheritedMethod)) {", "+\t\t\tproblemReporter().duplicateInheritedMethods(this.type, inheritedMethod, otherInheritedMethod);", "+\t\t\treturn;", "+\t\t}", "+\t} else if (inheritedMethod.declaringClass.findSuperTypeWithSameErasure(otherInheritedMethod.declaringClass) != null) {", "+\t\t// skip it if inheritedMethod is defined by a subtype of otherInheritedMethod declaringClass", "+\t\treturn;", "+\t}", "+", "+\t// the 2 inherited methods clash because of a parameterized type overrides a raw type", "+\t//\t\tinterface I { void foo(A a); }", "+\t//\t\tclass Y { void foo(A<String> a) {} }", "+\t//\t\tabstract class X extends Y implements I { }", "+\t//\t\tclass A<T> {}", "+\t// in this case the 2 inherited methods clash because of type variables", "+\t//\t\tinterface I { <T, S> void foo(T t); }", "+\t//\t\tclass Y { <T> void foo(T t) {} }", "+\t//\t\tabstract class X extends Y implements I {}", "+", "+\tif (inheritedMethod.declaringClass.isInterface() || inheritedMethod.isStatic()) return;", "+", "+\tdetectInheritedNameClash(inheritedMethod.original(), otherInheritedMethod.original());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8687fb7442816152539504ac8e5f8eb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java", "commitBeforeChange": "0b27550234989500fe53991aac8df517aea464df", "commitAfterChange": "938460306d40435cd50b7095042486eb645866f1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void seekPackageFragments(String name, boolean partialMatch, IJavaElementRequestor requestor)", "signatureAfterChange": " \tpublic void seekPackageFragments(String name, boolean partialMatch, IJavaElementRequestor requestor)", "diff": ["+\t\tString[] splittedName = partialMatch ? null : Util.splitOn('.', matchName, 0, matchName.length());", "-\t\t\t\tif (nameMatches(matchName, packageFragment, partialMatch))", "-\t\t\t\t\trequestor.acceptPackageFragment(packageFragment);", "+\t\t\t\tif (partialMatch) {", "+\t\t\t\t\tif (packageFragment.getElementName().toLowerCase().startsWith(matchName))", "+\t\t\t\t\t\trequestor.acceptPackageFragment(packageFragment);", "+\t\t\t\t} else {", "+\t\t\t\t\tif (Util.equalArraysOrNull(((PackageFragment)packageFragment).names, splittedName))", "+\t\t\t\t\t\trequestor.acceptPackageFragment(packageFragment);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9839fde56e64f3dac43e1bb608243ad2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredMethod.java", "commitBeforeChange": "b81c6103bf7171fcae97c1ae243c994607982ad6", "commitAfterChange": "cd06975b0ff4634209d721ce90d8cdeb1378d693", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public RecoveredElement updateOnClosingBrace(int braceStart, int braceEnd)", "signatureAfterChange": " public RecoveredElement updateOnClosingBrace(int braceStart, int braceEnd)", "diff": ["+\tif(this.parent != null && this.parent instanceof RecoveredType) {", "+\t\tint modifiers = ((RecoveredType)this.parent).typeDeclaration.modifiers;", "+\t\tif (TypeDeclaration.kind(modifiers) == TypeDeclaration.INTERFACE_DECL) {", "+\t\t\tif (!this.foundOpeningBrace) {", "+\t\t\t\tthis.updateSourceEndIfNecessary(braceStart - 1, braceStart - 1);", "+\t\t\t\treturn this.parent.updateOnClosingBrace(braceStart, braceEnd);", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2455664d375c9d3482fcde255bb9f36", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": "  \tpublic void resolve(ClassScope upperScope)", "signatureAfterChange": "  \tpublic void resolve(ClassScope upperScope)", "diff": ["+\t\t\t// jsr308", "+\t\t\tif (this.receiverAnnotations != null && this.scope.isStatic) {", "+\t\t\t\tint last = this.receiverAnnotations.length - 1;", "+\t\t\t\tthis.scope.problemReporter().illegalReceiverAnnotations(this.receiverAnnotations[0],", "+\t\t\t\t\t\t                                                this.receiverAnnotations[last]);", "+\t\t\t}", "+\t\t\t// jsr 308", "+\t\t\tresolveAnnotations(this.scope, this.receiverAnnotations, new Annotation.TypeUseBinding(Binding.TYPE_USE));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baf08f63e70e0249d785f71a5447a6ed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "5187cb71342d8d32d1f10d4b7d2e17e30e573892", "commitAfterChange": "1e3d7a95c39c7aac1cb5e09a719efdb30a9bf701", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public SyntheticMethodBinding addSyntheticMethod(MethodBinding targetMethod, boolean isSuperAccess)", "signatureAfterChange": " public SyntheticMethodBinding addSyntheticMethod(MethodBinding targetMethod, boolean isSuperAccess)", "diff": ["+\tif (accessMethod.parameters.length > 0xFF && targetMethod.isStatic()) {", "+\t\tthis.scope.problemReporter().tooManyParametersForSyntheticMethod(targetMethod.sourceMethod());", "+\t} else if (accessMethod.parameters.length >= 0xFF && targetMethod.isConstructor()) {", "+\t\tthis.scope.problemReporter().tooManyParametersForSyntheticMethod(targetMethod.sourceMethod());", "+\t}", "+"]}], "num": 15545}
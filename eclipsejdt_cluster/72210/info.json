{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ad1abd7e46988d5fdac2c0962a62be7", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20eb14f22b6bf168969e6269d8b7c708", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public MethodBinding getExactConstructor(TypeBinding[] argumentTypes)", "signatureAfterChange": " public MethodBinding getExactConstructor(TypeBinding[] argumentTypes)", "diff": ["-// NOTE: the return type, arg & exception types of each method of a binary type are resolved when needed", "+//NOTE: the return type, arg & exception types of each method of a binary type are resolved when needed", "+", "+\t// lazily sort methods", "+\tif ((this.tagBits & TagBits.AreMethodsSorted) == 0) {", "+\t\tint length = this.methods.length;", "+\t\tif (length > 1) \tReferenceBinding.sortMethods(this.methods, 0, length - 1);", "+\t\tthis.tagBits |= TagBits.AreMethodsSorted;", "+\t}\t", "-\tnextMethod : for (int m = methods.length; --m >= 0;) {", "-\t\tMethodBinding method = methods[m];", "-\t\tif (method.selector == TypeConstants.INIT && method.parameters.length == argCount) {", "-\t\t\tresolveTypesFor(method);", "-\t\t\tTypeBinding[] toMatch = method.parameters;", "-\t\t\tfor (int p = 0; p < argCount; p++)", "-\t\t\t\tif (toMatch[p] != argumentTypes[p])", "-\t\t\t\t\tcontinue nextMethod;", "-\t\t\treturn method;", "-\t\t}", "+\tlong range;", "+\tif ((range = ReferenceBinding.binarySearch(TypeConstants.INIT, this.methods)) >= 0) {", "+\t\tnextMethod: for (int imethod = (int)range, end = (int)(range >> 32); imethod <= end; imethod++) {\t", "+\t\t\tMethodBinding method = methods[imethod];", "+\t\t\tif (method.parameters.length == argCount) {", "+\t\t\t\tresolveTypesFor(method);", "+\t\t\t\tTypeBinding[] toMatch = method.parameters;", "+\t\t\t\tfor (int iarg = 0; iarg < argCount; iarg++)", "+\t\t\t\t\tif (toMatch[iarg] != argumentTypes[iarg])", "+\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\treturn method;", "+\t\t\t}", "+\t\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35b33f6631547f5a69f0bb77d5127024", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java", "commitBeforeChange": "7a675c0d33ffc1c59486552f5a80779f0f3d95d0", "commitAfterChange": "0580b12603e025516ea827d181150b0daae85b9b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "signatureAfterChange": " public MethodBinding getExactMethod(char[] selector, TypeBinding[] argumentTypes, CompilationUnitScope refScope)", "diff": ["-// searches up the hierarchy as long as no potential (but not exact) match was found.", "+//searches up the hierarchy as long as no potential (but not exact) match was found.", "+\t", "+\t// lazily sort methods", "+\tif ((this.tagBits & TagBits.AreMethodsSorted) == 0) {", "+\t\tint length = this.methods.length;", "+\t\tif (length > 1) \tReferenceBinding.sortMethods(this.methods, 0, length - 1);", "+\t\tthis.tagBits |= TagBits.AreMethodsSorted;", "+\t}", "+\t", "-\tint selectorLength = selector.length;", "-\tnextMethod : for (int m = methods.length; --m >= 0;) {", "-\t\tMethodBinding method = methods[m];", "-\t\tif (method.selector.length == selectorLength && CharOperation.equals(method.selector, selector)) {", "+\t", "+\tlong range;", "+\tif ((range = ReferenceBinding.binarySearch(selector, this.methods)) >= 0) {", "+\t\tnextMethod: for (int imethod = (int)range, end = (int)(range >> 32); imethod <= end; imethod++) {\t", "+\t\t\tMethodBinding method = methods[imethod];", "-\t\t\t\tfor (int p = 0; p < argCount; p++)", "-\t\t\t\t\tif (toMatch[p] != argumentTypes[p])", "+\t\t\t\tfor (int iarg = 0; iarg < argCount; iarg++)", "+\t\t\t\t\tif (toMatch[iarg] != argumentTypes[iarg])", "-"]}], "num": 72210}
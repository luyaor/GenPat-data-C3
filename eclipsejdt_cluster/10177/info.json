{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bcfa765f080d0ac0346a61d7a97387e9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b80a08eccd6b275bf947c1bcd4fff4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java", "commitBeforeChange": "d3d92e370789aaaed8a46c804d74e3cb2b4bb167", "commitAfterChange": "07061c09a4baa11ac0a53e425e478493f3662bd4", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \t \tpublic void generateCode(ClassFile classFile)", "signatureAfterChange": " \t \tpublic void generateCode(ClassFile classFile)", "diff": ["-", "-\t\tthis.scope.computeLocalVariablePositions(this.binding.isStatic() ? 0 : 1, codeStream);", "-", "+\t\tthis.scope.computeLocalVariablePositions(this.outerLocalVariablesSlotSize + (this.binding.isStatic() ? 0 : 1), codeStream);", "+\t\tif (this.outerLocalVariables != null) {", "+\t\t\tfor (int i = 0, max = this.outerLocalVariables.length; i < max; i++) {", "+\t\t\t\tLocalVariableBinding argBinding;", "+\t\t\t\tcodeStream.addVisibleLocalVariable(argBinding = this.outerLocalVariables[i]);", "+\t\t\t\tcodeStream.record(argBinding);", "+\t\t\t\targBinding.recordInitializationStartPC(0);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3057d4f4875d37310fd4550759a1dc14", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java", "commitBeforeChange": "de1a896ae0cf9cc7fdee8ce3aebee48242ef244b", "commitAfterChange": "38590129939501d58d89738289276afaa02e2706", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r public boolean encloses(IJavaElement element)", "signatureAfterChange": "\r public boolean encloses(IJavaElement element)", "diff": ["-\treturn this.encloses(this.fullPath(element));\r", "+\tif (this.elements != null) {\r", "+\t\tfor (int i = 0, length = this.elements.size(); i < length; i++) {\r", "+\t\t\tIJavaElement scopeElement = (IJavaElement)this.elements.get(i);\r", "+\t\t\tIJavaElement searchedElement = element;\r", "+\t\t\twhile (searchedElement != null) {\r", "+\t\t\t\tif (searchedElement.equals(scopeElement)) {\r", "+\t\t\t\t\treturn true;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tsearchedElement = searchedElement.getParent();\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\treturn false;\r", "+\t} else {\r", "+\t\treturn this.encloses(this.fullPath(element));\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f1f0b46165a7425347d1b6c4796d928", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java", "commitBeforeChange": "83e7ec555369f29d4b78a3a829caf1776dce39db", "commitAfterChange": "e965722f47023ae407b487744865b93f56cfe7d1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void resolve(BlockScope scope)", "signatureAfterChange": " \tpublic void resolve(BlockScope scope)", "diff": ["+\t\t// Check if this declaration should now have the type annotations bit set", "+\t\tif (this.annotations != null) {", "+\t\t\tfor (int i = 0, max = this.annotations.length; i < max; i++) {", "+\t\t\t\tTypeBinding resolvedAnnotationType = this.annotations[i].resolvedType;", "+\t\t\t\tif (resolvedAnnotationType != null && (resolvedAnnotationType.getAnnotationTagBits() & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\tthis.bits |= ASTNode.HasTypeAnnotations;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7249b2040b1e0a660571e58622408752", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "8cb3365a924e5869d5c8a5715a80d4cd8189b243", "commitAfterChange": "4ec04ec7ec987de2e86c2ac8cdacbf6a8acd72a4", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " \tpublic ReferenceBinding[] superInterfaces()", "signatureAfterChange": " \tpublic ReferenceBinding[] superInterfaces()", "diff": ["-\t    \t\tif (this.type.isHierarchyBeingConnected())", "-\t    \t\t\treturn Binding.NO_SUPERINTERFACES; // prevent superinterfaces from being assigned before they are connected", "-\t    \t\tthis.superInterfaces = Scope.substitute(this, this.type.superInterfaces());", "+    \t\tif (this.type.isHierarchyBeingConnected())", "+    \t\t\treturn Binding.NO_SUPERINTERFACES; // prevent superinterfaces from being assigned before they are connected", "+    \t\tthis.superInterfaces = Scope.substitute(this, this.type.superInterfaces());", "+    \t\tif (this.superInterfaces != null) {", "+\t    \t\tfor (int i = this.superInterfaces.length; --i >= 0;) {", "+\t    \t\t\tthis.typeBits |= (this.superInterfaces[i].typeBits & TypeIds.InheritableBits);", "+\t    \t\t\tif ((this.typeBits & (TypeIds.BitAutoCloseable|TypeIds.BitCloseable)) != 0) // avoid the side-effects of hasTypeBit()! ", "+\t    \t\t\t\tthis.typeBits |= applyCloseableInterfaceWhitelists();", "+\t    \t\t}", "+    \t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b744cbc5207d1fc5c02da56e24b2f75", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldDeclaration.java", "commitBeforeChange": "83e7ec555369f29d4b78a3a829caf1776dce39db", "commitAfterChange": "e965722f47023ae407b487744865b93f56cfe7d1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public void resolve(MethodScope initializationScope)", "signatureAfterChange": "  public void resolve(MethodScope initializationScope)", "diff": ["+\t\t// Check if this declaration should now have the type annotations bit set", "+\t\tif (this.annotations != null) {", "+\t\t\tfor (int i = 0, max = this.annotations.length; i < max; i++) {", "+\t\t\t\tTypeBinding resolvedAnnotationType = this.annotations[i].resolvedType;", "+\t\t\t\tif (resolvedAnnotationType != null && (resolvedAnnotationType.getAnnotationTagBits() & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\tthis.bits |= ASTNode.HasTypeAnnotations;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9aaabca2019d4d85044998eccb28d70", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceSearchTests.java", "commitBeforeChange": "fb29abb0d0a936af02dd0f8c5ff7d07933a07e52", "commitAfterChange": "961e45cbdd9129afb5c74c3451723a388fb5f038", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static Test suite()", "signatureAfterChange": " \tpublic static Test suite()", "diff": ["-//\t}", "+\t */", "-\t\tTest suite = buildSuite(FullSourceWorkspaceSearchTests.class);", "-\t\tCOUNT = suite.countTestCases();", "-\t\tINDEX_MANAGER.disable();", "+\t\t", "+\t\t// Create suite", "+\t\tTest suite = buildSuite(testClass());", "+\t\tTESTS_COUNT = suite.countTestCases();", "+\t", "+\t\t// Add test to sjuite and disable indexing if subset of test does include indexing test", "+\t\tboolean indexing = false;", "+\t\tfor (int i=0, size= TESTS_NAME_LIST.size(); i<size; i++) {", "+\t\t\tString testName = (String) TESTS_NAME_LIST.get(i);", "+\t\t\tif (testName.equals(\"testPerfIndexing\")) {", "+\t\t\t\tindexing = true;", "+\t\t\t}", "+\t\t}", "+\t\tif (indexing) {", "+\t\t\tINDEX_MANAGER.disable();", "+\t\t}", "+", "+\t\t// Init log", "+\t\tinitLogDir();", "+\t\tcreatePrintStream(testClass().getName(), LOG_STREAMS, TESTS_COUNT, \"Search\");", "+\t\t", "+\t\t// Return created suite"]}], "num": 10177}
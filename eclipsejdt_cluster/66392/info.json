{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0e60c45d72b5556409b27ed1f9d8291", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22cc4491a708b0fc77098589f1f3330a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "4633cdd34bc32c9ec930b454d5e4ef42024a77f4", "commitAfterChange": "aa223e9a2138470a8d88d3629dbe1cb95c932c69", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \tprivate void verifyComments(ICompilationUnit sourceUnit) throws JavaModelException", "signatureAfterChange": " \tprivate void verifyComments(ICompilationUnit sourceUnit) throws JavaModelException", "diff": ["+\t\tString fileName = sourceUnit.getElementName();", "-\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(sourceUnit, true); // resolve bindings", "-\t\tComment[] unitComments = compilUnit.getCommentTable();", "+\t\tIJavaProject project = sourceUnit.getJavaProject();", "+\t\tMap originalOptions = project.getOptions(true);", "+\t\tComment[] unitComments = null;", "+\t\tif (debug) {", "+\t\t\ttry {", "+\t\t\t\tproject.setOption(JavaCore.COMPILER_PB_INVALID_JAVADOC, JavaCore.ERROR);", "+\t\t\t\tproject.setOption(JavaCore.COMPILER_PB_MISSING_JAVADOC_TAGS, JavaCore.ERROR);", "+\t\t\t\tproject.setOption(JavaCore.COMPILER_PB_MISSING_JAVADOC_COMMENTS, JavaCore.ERROR);", "+\t\t\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(sourceUnit, true); // resolve bindings", "+\t\t\t\tassertEquals(fileName+\": Unexpected problems\", 0, compilUnit.getProblems().length); //$NON-NLS-1$", "+\t\t\t\tunitComments = compilUnit.getCommentTable();", "+\t\t\t} finally {", "+\t\t\t\tproject.setOptions(originalOptions);", "+\t\t\t}", "+\t\t} else {", "+\t\t\t\tCompilationUnit compilUnit = (CompilationUnit) runConversion(sourceUnit, true); // resolve bindings", "+\t\t\t\tunitComments = compilUnit.getCommentTable();", "+\t\t}", "+\t\tassertNotNull(fileName+\": Unexpected problems\", unitComments);", "-\t\tassertEquals(\"Wrong number of comments\", this.comments.size(), unitComments.length);", "+\t\tassertEquals(fileName+\": Wrong number of comments\", this.comments.size(), unitComments.length);", "-\t\t\tassertEquals(\"Flattened javadoc does NOT match source!\", text, printer.getResult());", "+\t\t\tassertEquals(fileName+\": Flattened javadoc does NOT match source!\", text, printer.getResult());", "-\t\t\t\tassertEquals(\"Invalid tags number! \", tags.size(), allTags(docComment));", "+\t\t\t\tassertEquals(fileName+\": Invalid tags number! \", tags.size(), allTags(docComment));", "+\t\t\tif (debug) System.out.println(comment+\"\\nsuccessfully verified in \"+fileName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d089d328f53e82810c7d685708e9d8d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java", "commitBeforeChange": "d506bd33e9d161ce75f11b19448c2ad2110b1903", "commitAfterChange": "87dd132b690b39c22112692b2510e01020cf3c19", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate Map<FactoryContainer, Boolean> readFactoryPathFile(IJavaProject jproj)  \t\tthrows IOException, CoreException", "signatureAfterChange": " \tpublic static synchronized Map<FactoryContainer, Boolean> getAllContainers(IJavaProject jproj)", "diff": ["+\t */", "+\tpublic static synchronized Map<FactoryContainer, Boolean> getAllContainers(IJavaProject jproj) {", "+\t\tif (jproj != null) {", "+\t\t\tMap<FactoryContainer, Boolean> projectContainers = null;", "+\t\t\tif (_projectsWithFactoryPathLoaded.contains(jproj)) {", "+\t\t\t\tprojectContainers = _containerMaps.get(jproj);", "+\t\t\t}", "+\t\t\telse {", "+\t\t\t\t// Load project-level containers", "+\t\t\t\ttry {", "+\t\t\t\t\tprojectContainers = FactoryPathUtil.readFactoryPathFile(jproj);", "+\t\t\t\t}", "+\t\t\t\tcatch (CoreException ce) {", "+\t\t\t\t\tce.printStackTrace();", "+\t\t\t\t}", "+\t\t\t\tcatch (IOException ioe) {", "+\t\t\t\t\tioe.printStackTrace();", "+\t\t\t\t}", "+\t\t\t\t_projectsWithFactoryPathLoaded.add(jproj);", "+\t\t\t\t_containerMaps.put(jproj, projectContainers);", "+\t\t\t}", "+\t\t\tif (projectContainers != null) {", "+\t\t\t\treturn projectContainers;", "+\t\t\t}", "+\t\t}", "+\t\t// Workspace", "+\t\tif (!_workspaceFactoryPathLoaded) {", "+\t\t\t// Load the workspace", "+\t\t\ttry {", "+\t\t\t\t_workspaceFactories = FactoryPathUtil.readFactoryPathFile(null);", "+\t\t\t\tif (_workspaceFactories == null) {", "+\t\t\t\t\t// TODO: Need to get the default set of factories -- plugins only", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcatch (CoreException ce) {", "+\t\t\t\tce.printStackTrace();", "+\t\t\t}", "+\t\t\tcatch (IOException ioe) {", "+\t\t\t\tioe.printStackTrace();", "+\t\t\t}", "+\t\t}", "+\t\treturn new LinkedHashMap(_workspaceFactories);", "+\t}", "-\t */", "-\tprivate Map<FactoryContainer, Boolean> readFactoryPathFile(IJavaProject jproj) ", "-\t\tthrows IOException, CoreException", "-\t{", "-\t\tIProject proj = jproj.getProject();", "-\t\tIFile file = proj.getFile(FACTORYPATH_FILE);", "-\t\tif (!file.exists()) {", "-\t\t\treturn null;", "-\t\t}", "-\t\tString data = FileSystemUtil.getContentsOfFile(file);", "-\t\t", "-\t\treturn FactoryPathUtil.decodeFactoryPath(data);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bdd11ff139205e0e1d2a718195e3e78", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "d6e67d4c8518637d8a6205904d99263fcf72b512", "commitAfterChange": "25c3603d7bf5d103d47b791d11767b16968f4a1d", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " public void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " public void configure(String[] argv) throws InvalidInputException", "diff": ["+\tfinal int INSIDE_PROCESSOR_PATH_start = 17;", "+\tfinal int INSIDE_PROCESSOR_start = 18;", "+\tfinal int INSIDE_S_start = 19;", "+\tthis.expandedCommandLine = newCommandLineArgs;", "+\t\t\t\t// annotation processing", "+\t\t\t\tif (currentArg.startsWith(\"-A\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-processorpath\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_PROCESSOR_PATH_start;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-processor\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_PROCESSOR_start;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-proc:only\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_GenerateClassFiles,", "+\t\t\t\t\t\tCompilerOptions.DISABLED);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-proc:none\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_Process_Annotations,", "+\t\t\t\t\t\tCompilerOptions.DISABLED);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-s\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_S_start;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-XprintProcessorInfo\") //$NON-NLS-1$", "+\t\t\t\t\t\t|| currentArg.equals(\"-XprintRounds\")) { //$NON-NLS-1$ ", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "-\t\t\t\t// continue; fall through on purpose", "+\t\t\t\tbreak;", "+\t\t\tcase INSIDE_PROCESSOR_PATH_start :", "+\t\t\t\t// nothing to do here. This is consumed again by the AnnotationProcessorManager", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_PROCESSOR_start :", "+\t\t\t\t// nothing to do here. This is consumed again by the AnnotationProcessorManager", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_S_start :", "+\t\t\t\t// nothing to do here. This is consumed again by the AnnotationProcessorManager", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;\t\t\t", "-\tif (filesCount != 0)", "+\tif (filesCount != 0) {", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c31a71ec46cedb67e17541e39d1da1e6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "0271031e5844c32df2646c3a81a2c00b29e7d251", "commitAfterChange": "14c82497ad7236bee9eedf2d9ff4867e4a47ff21", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "\t \tprotected void addCompilationUnit( \t\tICompilationUnit sourceUnit, \t\tCompilationUnitDeclaration parsedUnit)", "signatureAfterChange": " protected void buildBindings(PotentialMatch potentialMatch)", "diff": ["-\t}\t", "-\tprotected void addCompilationUnit(", "-\t\tICompilationUnit sourceUnit,", "-\t\tCompilationUnitDeclaration parsedUnit) {", "-", "-\t\t// append the unit to the list of ones to process later on", "-\t\tint size = this.unitsToProcess.length;", "-\t\tif (this.totalUnits == size) {", "-\t\t\t// when growing reposition units starting at position 0", "-\t\t\tint newSize = size == 0 ? 1 : size * 2;", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.unitsToProcess,", "-\t\t\t\t0,", "-\t\t\t\t(this.unitsToProcess = new CompilationUnitDeclaration[newSize]),", "-\t\t\t\t0,", "-\t\t\t\tthis.totalUnits);", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.matchesToProcess,", "-\t\t\t\t0,", "-\t\t\t\t(this.matchesToProcess = new PotentialMatch[newSize]),", "-\t\t\t\t0,", "-\t\t\t\tthis.totalUnits);", "-\t\t}", "-\t\tif (sourceUnit instanceof PotentialMatch) {", "-\t\t\tthis.matchesToProcess[this.totalUnits] = (PotentialMatch)sourceUnit;", "-\t\t}", "-\t\tthis.unitsToProcess[this.totalUnits] = parsedUnit;", "-\t\tthis.totalUnits++;", "-\t}\t", "+ */", "+protected void buildBindings(PotentialMatch potentialMatch) {", "+\tif (this.progressMonitor != null && this.progressMonitor.isCanceled())", "+\t\tthrow new OperationCanceledException();", "+\ttry {", "+\t\tif (SearchEngine.VERBOSE)", "+\t\t\tSystem.out.println(\"Parsing \" + potentialMatch.openable.toStringWithAncestors()); //$NON-NLS-1$", "+", "+\t\tthis.parser.matchSet = potentialMatch.matchingNodeSet;", "+\t\tCompilationResult unitResult = new CompilationResult(potentialMatch, 1, 1, this.options.maxProblemsPerUnit);", "+\t\tCompilationUnitDeclaration parsedUnit = this.parser.dietParse(potentialMatch, unitResult);", "+\t\tif (parsedUnit != null) {", "+\t\t\tif (!parsedUnit.isEmpty())", "+\t\t\t\tthis.lookupEnvironment.buildTypeBindings(parsedUnit);", "+", "+\t\t\t// add the potentialMatch with its parsedUnit to matchesToProcess", "+\t\t\tpotentialMatch.parsedUnit = parsedUnit;", "+\t\t\tint size = this.matchesToProcess.length;", "+\t\t\tif (this.numberOfMatches == size)", "+\t\t\t\tSystem.arraycopy(this.matchesToProcess, 0, this.matchesToProcess = new PotentialMatch[size == 0 ? 1 : size * 2], 0, this.numberOfMatches);", "+\t\t\tthis.matchesToProcess[this.numberOfMatches++] = potentialMatch;", "+", "+\t\t\tif (this.progressMonitor != null)", "+\t\t\t\tthis.progressMonitor.worked(4);", "+\t} finally {", "+\t\tthis.parser.matchSet = null;", "+\t}", "+}"]}], "num": 66392}
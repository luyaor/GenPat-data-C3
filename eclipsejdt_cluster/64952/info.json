{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "15aad80c50b459a07fa54951823199c7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6508a4ec82d3d1caa51319849a7d777", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java", "commitBeforeChange": "afeec6e98298a3fee7e4fc33bbdcecb405bc1466", "commitAfterChange": "0c9fb87884972e83c7f78543403ac376b274d8ea", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate boolean examineDAnnotations()", "signatureAfterChange": " \tprivate boolean examineDAnnotations()", "diff": ["-\t\t\t\t\tif (!(value instanceof String)) {", "-\t\t\t\t\t\treportError(\"Value of annoZString param on element D is null\");", "+\t\t\t\t\tif (!\"annoZOnD\".equals(value)) {", "+\t\t\t\t\t\treportError(\"Value of annoZString param on element D is not \\\"annoZOnD\\\"\");", "-\t\t// TODO: Examine annotation on method declaration", "-", "+\t\tList<? extends AnnotationMirror> annotsMethodDvoid = _methodDvoid.getAnnotationMirrors();", "+\t\tif (null == annotsMethodDvoid || annotsMethodDvoid.isEmpty()) {", "+\t\t\treportError(\"method D.methodDvoid() reports no annotations\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tfor (AnnotationMirror annotMethodDvoid : annotsMethodDvoid) {", "+\t\t\tDeclaredType annotDType = annotMethodDvoid.getAnnotationType();", "+\t\t\tif (null == annotDType) {", "+\t\t\t\treportError(\"annotation mirror of AnnoZ on D.methodDvoid() reports null type\");", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tElement annotDElem = annotDType.asElement();", "+\t\t\tif (!(annotDElem instanceof TypeElement) || ", "+\t\t\t\t\t\"targets.model.pa.AnnoZ\".equals(((TypeElement)annotDElem).getQualifiedName().toString())) {", "+\t\t\t\treportError(\"annotation on D.methodDvoid() is not TypeElement targets.model.pa.AnnoZ\");", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tMap<? extends ExecutableElement, ? extends AnnotationValue> values = annotMethodDvoid.getElementValues();", "+\t\t\tif (null == values || values.isEmpty()) {", "+\t\t\t\treportError(\"@AnnoZ on D.methodDvoid() reports no values\");", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tboolean foundIntMethod = false;", "+\t\t\tfor (Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : values.entrySet()) {", "+\t\t\t\tString methodName = entry.getKey().getSimpleName().toString();", "+\t\t\t\tif (\"annoZint\".equals(methodName)) {", "+\t\t\t\t\tfoundIntMethod = true;", "+\t\t\t\t\tObject value = entry.getValue().getValue();", "+\t\t\t\t\tif (!(value instanceof Integer) || (Integer)value != 31) {", "+\t\t\t\t\t\treportError(\"Value of annoZint param on D.methodDvoid() is not 31\");", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (!foundIntMethod) {", "+\t\t\t\treportError(\"Failed to find method annoZint on @AnnoZ on D.methodDvoid()\");", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f097e9d3f5c81d16744e9ec80dd453f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/typeutils/TypeUtilsProc.java", "commitBeforeChange": "bbb750998e75511ba75783c9f2d763f2e32279d9", "commitAfterChange": "02bf4272774dd4f6faf4897c054614bdc809ab9e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate boolean examineGetDeclaredType()", "signatureAfterChange": " \tprivate boolean examineGetDeclaredType()", "diff": ["+\t\tTypeMirror typeD = elementD.asType();", "+\t\tif (!_typeUtils.isSubtype(typeD, typeAB)) {", "+\t\t\treportError(\"Type of D is not a subtype of type AB\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tArrayType arrayOfTypeD = _typeUtils.getArrayType(typeD);", "+\t\tArrayType arrayOfTypeAB = _typeUtils.getArrayType(typeAB);", "+\t\tif (!_typeUtils.isSubtype(arrayOfTypeD, arrayOfTypeAB)) {", "+\t\t\treportError(\"Array of type D is not a subtype of array of type AB\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tPrimitiveType typeInt = _typeUtils.getPrimitiveType(TypeKind.INT);", "+\t\tArrayType arrayOfInt = _typeUtils.getArrayType(typeInt);", "+\t\tArrayType arrayOfIntInt = _typeUtils.getArrayType(arrayOfInt);", "+\t\tTypeElement objectTypeElement = _elementUtils.getTypeElement(\"java.lang.Object\");", "+\t\tTypeMirror javaLangObject = objectTypeElement.asType();", "+\t\tif (!_typeUtils.isSubtype(arrayOfIntInt, javaLangObject)) {", "+\t\t\treportError(\"int[][] is not a subtype of Object\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tTypeElement stringTypeElement = _elementUtils.getTypeElement(\"java.lang.String\");", "+\t\tTypeMirror javaLangString = stringTypeElement.asType();", "+\t\tArrayType arrayOfString = _typeUtils.getArrayType(javaLangString);", "+\t\tArrayType arrayOfObject = _typeUtils.getArrayType(javaLangObject);", "+\t\tArrayType arrayOfObjectObject = _typeUtils.getArrayType(arrayOfObject);", "+\t\tif (_typeUtils.isSubtype(arrayOfString, arrayOfObjectObject)) {", "+\t\t\treportError(\"String[] is a subtype of Object[][]\");", "+\t\t\treturn false;", "+\t\t}", "+\t\tif (!_typeUtils.isSubtype(arrayOfString, arrayOfObject)) {", "+\t\t\treportError(\"String[] is not a subtype of Object[]\");", "+\t\t\treturn false;", "+\t\t}"]}], "num": 64952}
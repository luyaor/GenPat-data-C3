{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4e7087a8c4da950cd8414b0f646ac3f2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42f8af0879ca0c9f983f2d7cc82a8972", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "03e37ed5506ed50fa30b9f5aa42ff423995a94bd", "commitAfterChange": "4111f058addae7e2d753cc95bd7546b1f787e4c8", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 13, "signatureBeforeChange": " public static int getParameterCount(char[] methodSignature) throws IllegalArgumentException", "signatureAfterChange": " public static int getParameterCount(char[] methodSignature) throws IllegalArgumentException", "diff": ["-\t\tint i = CharOperation.indexOf(C_PARAM_START, methodSignature) + 1;", "-\t\tif (i == 0)", "+\t\tint i = CharOperation.indexOf(C_PARAM_START, methodSignature);", "+\t\tif (i < 0) {", "+\t\t} else {", "+\t\t\ti++;", "+\t\t}", "-\t\t\tchar c = methodSignature[i++];", "-\t\t\tswitch (c) {", "-\t\t\t\tcase C_ARRAY :", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase C_BOOLEAN :", "-\t\t\t\tcase C_BYTE :", "-\t\t\t\tcase C_CHAR :", "-\t\t\t\tcase C_DOUBLE :", "-\t\t\t\tcase C_FLOAT :", "-\t\t\t\tcase C_INT :", "-\t\t\t\tcase C_LONG :", "-\t\t\t\tcase C_SHORT :", "-\t\t\t\tcase C_VOID :", "-\t\t\t\t\t++count;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase C_TYPE_VARIABLE :", "-\t\t\t\tcase C_RESOLVED :", "-\t\t\t\tcase C_UNRESOLVED :", "-\t\t\t\t\t// TODO (jeem) - rework to handle type arguments like QList<QString;>;", "-\t\t\t\t\ti = CharOperation.indexOf(C_SEMICOLON, methodSignature, i) + 1;", "-\t\t\t\t\tif (i == 0)", "-\t\t\t\t\t\tthrow new IllegalArgumentException();", "-\t\t\t\t\t++count;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase C_PARAM_END :", "-\t\t\t\t\treturn count;", "-\t\t\t\tdefault :", "-\t\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\tif (methodSignature[i] == C_PARAM_END) {", "+\t\t\t\treturn count;", "+\t\t\tint e= scanTypeSignature(methodSignature, i);", "+\t\t\tif (e < 0) {", "+\t\t\t\tthrow new IllegalArgumentException();", "+\t\t\t} else {", "+\t\t\t\ti = e + 1;", "+\t\t\t}", "+\t\t\tcount++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dbd64aa435ee35b1afc2f09bcb306d4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "c59be425cf25326239f4ea61082e801292bcf9ab", "commitAfterChange": "d6fb9802bac486c7e71b20d321f123bc000bd933", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r public static String[] getParameterTypes(String methodSignature) throws IllegalArgumentException", "signatureAfterChange": "\r public static char[][] getParameterTypes(char[] methodSignature) throws IllegalArgumentException", "diff": ["-public static String[] getParameterTypes(String methodSignature) throws IllegalArgumentException {\r", "+public static char[][] getParameterTypes(char[] methodSignature) throws IllegalArgumentException {\r", "-\t\tString[] result = new String[count];\r", "+\t\tchar[][] result = new char[count][];\r", "-\t\tint i = methodSignature.indexOf(C_PARAM_START) + 1;\r", "+\t\tint i = CharOperation.indexOf(C_PARAM_START, methodSignature) + 1;\r", "-\t\t\tchar c = methodSignature.charAt(i++);\r", "+\t\t\tchar c = methodSignature[i++];\r", "-\t\t\t\t\t\t\t\tresult[count++] = SIG_BOOLEAN;\r", "+\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_BOOLEAN};\r", "-\t\t\t\t\t\t\t\tresult[count++] = SIG_BYTE;\r", "+\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_BYTE};\r", "-\t\t\t\t\t\t\t\tresult[count++] = SIG_CHAR;\r", "+\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_CHAR};\r", "-\t\t\t\t\t\t\t\tresult[count++] = SIG_DOUBLE;\r", "+\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_DOUBLE};\r", "-\t\t\t\t\t\t\t\tresult[count++] = SIG_FLOAT;\r", "+\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_FLOAT};\r", "-\t\t\t\t\t\t\t\tresult[count++] = SIG_INT;\r", "+\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_INT};\r", "-\t\t\t\t\t\t\t\tresult[count++] = SIG_LONG;\r", "+\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_LONG};\r", "-\t\t\t\t\t\t\t\tresult[count++] = SIG_SHORT;\r", "+\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_SHORT};\r", "-\t\t\t\t\t\t\t\tresult[count++] = SIG_VOID;\r", "+\t\t\t\t\t\t\t\tresult[count++] = new char[] {C_VOID};\r", "-\t\t\t\t\t\tresult[count++] = methodSignature.substring(start, i);\r", "+\t\t\t\t\t\tresult[count++] = CharOperation.subarray(methodSignature, start, i);\r", "-\t\t\t\t\ti = methodSignature.indexOf(C_SEMICOLON, i) + 1;\r", "+\t\t\t\t\ti = CharOperation.indexOf(C_SEMICOLON, methodSignature, i) + 1;\r", "-\t\t\t\t\tresult[count++] = methodSignature.substring(start, i);\r", "+\t\t\t\t\tresult[count++] = CharOperation.subarray(methodSignature, start, i);\r", "-\t} catch (StringIndexOutOfBoundsException e) {\r", "+\t} catch (ArrayIndexOutOfBoundsException e) {\r", "+}\r"]}], "num": 37159}
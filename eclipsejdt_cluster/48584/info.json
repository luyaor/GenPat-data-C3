{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd3aa3b85ad460045798f126dec034ea", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e9d02052e622cd5b77cc4b5f24355e8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "fa21653618683a7c1daa8e88412c523157e6d5cf", "commitAfterChange": "b507d9a904cae2791728076e7abcce8b001f81b2", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate synchronized void computeAllRootPaths(IType type)", "signatureAfterChange": " \t \tprivate synchronized void computeAllRootPaths(IType type)", "diff": ["+\t\tIPath pkgFragmentRootPath = root.getPath();", "+\t\tboolean containsJavaSource = !pkgFragmentRootPath.equals(this.sourcePath); // used to optimize zip file reading only if source path and root path are equals, otherwise assume that attachment contains Java source", "-\t\t\tJarPackageFragmentRoot jarPackageFragmentRoot = (JarPackageFragmentRoot) root;", "-\t\t\t\tzip = manager.getZipFile(jarPackageFragmentRoot.getPath());", "+\t\t\t\tzip = manager.getZipFile(pkgFragmentRootPath);", "-\t\t\t\t\t\tint index = entryName.indexOf('/');", "-\t\t\t\t\t\tif (index != -1 && Util.isClassFileName(entryName)) {", "-\t\t\t\t\t\t\tString firstLevelPackageName = entryName.substring(0, index);", "-\t\t\t\t\t\t\tif (!firstLevelPackageNames.contains(firstLevelPackageName)) {", "-\t\t\t\t\t\t\t\tif (sourceLevel == null) {", "-\t\t\t\t\t\t\t\t\tIJavaProject project = root.getJavaProject();", "-\t\t\t\t\t\t\t\t\tsourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true);", "-\t\t\t\t\t\t\t\t\tcomplianceLevel = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\t\t\t\tif (Util.isClassFileName(entryName)) {", "+\t\t\t\t\t\t\tint index = entryName.indexOf('/');", "+\t\t\t\t\t\t\tif (index != -1) {", "+\t\t\t\t\t\t\t\tString firstLevelPackageName = entryName.substring(0, index);", "+\t\t\t\t\t\t\t\tif (!firstLevelPackageNames.contains(firstLevelPackageName)) {", "+\t\t\t\t\t\t\t\t\tif (sourceLevel == null) {", "+\t\t\t\t\t\t\t\t\t\tIJavaProject project = root.getJavaProject();", "+\t\t\t\t\t\t\t\t\t\tsourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\t\t\t\t\t\t\t\tcomplianceLevel = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tIStatus status = JavaConventions.validatePackageName(firstLevelPackageName, sourceLevel, complianceLevel);", "+\t\t\t\t\t\t\t\t\tif (status.isOK() || status.getSeverity() == IStatus.WARNING) {", "+\t\t\t\t\t\t\t\t\t\tfirstLevelPackageNames.add(firstLevelPackageName);", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tIStatus status = JavaConventions.validatePackageName(firstLevelPackageName, sourceLevel, complianceLevel);", "-\t\t\t\t\t\t\t\tif (status.isOK() || status.getSeverity() == IStatus.WARNING) {", "-\t\t\t\t\t\t\t\t\tfirstLevelPackageNames.add(firstLevelPackageName);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tcontainsADefaultPackage = true;", "-\t\t\t\t\t\t} else if (Util.isClassFileName(entryName)) {", "-\t\t\t\t\t\t\tcontainsADefaultPackage = true;", "-\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\t} else if (!containsJavaSource && org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(entryName)) {", "+\t\t\t\t\t\t\tcontainsJavaSource = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tString resourceName = member.getName();", "-\t\t\t\t\t\t\t\tString firstLevelPackageName = member.getName();", "-\t\t\t\t\t\t\t\tIStatus status = JavaConventions.validatePackageName(firstLevelPackageName, sourceLevel, complianceLevel);", "+\t\t\t\t\t\t\t\tIStatus status = JavaConventions.validatePackageName(resourceName, sourceLevel, complianceLevel);", "-\t\t\t\t\t\t\t\t\tfirstLevelPackageNames.add(firstLevelPackageName);", "+\t\t\t\t\t\t\t\t\tfirstLevelPackageNames.add(resourceName);", "-\t\t\t\t\t\t\t} else if (Util.isClassFileName(member.getName())) {", "+\t\t\t\t\t\t\t} else if (Util.isClassFileName(resourceName)) {", "+\t\t\t\t\t\t\t} else if (!containsJavaSource && org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(resourceName)) {", "+\t\t\t\t\t\t\t\tcontainsJavaSource = true;", "-\t\tObject target = JavaModel.getTarget(this.sourcePath, true);", "-\t\tif (target instanceof IContainer) {", "-\t\t\tIContainer folder = (IContainer)target;", "-\t\t\tcomputeRootPath(folder, firstLevelPackageNames, containsADefaultPackage, tempRoots, folder.getFullPath().segmentCount()/*if external folder, this is the linked folder path*/);", "-\t\t} else {", "-\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\t\tZipFile zip = null;", "-\t\t\ttry {", "-\t\t\t\tzip = manager.getZipFile(this.sourcePath);", "-\t\t\t\tfor (Enumeration entries = zip.entries(); entries.hasMoreElements(); ) {", "-\t\t\t\t\tZipEntry entry = (ZipEntry) entries.nextElement();", "-\t\t\t\t\tString entryName;", "-\t\t\t\t\tif (!entry.isDirectory() && org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(entryName = entry.getName())) {", "-\t\t\t\t\t\tIPath path = new Path(entryName);", "-\t\t\t\t\t\tint segmentCount = path.segmentCount();", "-\t\t\t\t\t\tif (segmentCount > 1) {", "-\t\t\t\t\t\t\tfor (int i = 0, max = path.segmentCount() - 1; i < max; i++) {", "-\t\t\t\t\t\t\t\tif (firstLevelPackageNames.contains(path.segment(i))) {", "-\t\t\t\t\t\t\t\t\ttempRoots.add(path.uptoSegment(i));", "-\t\t\t\t\t\t\t\t\t// don't break here as this path could contain other first level package names (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=74014)", "+\t\tif (containsJavaSource) { // no need to read source attachment if it contains no Java source (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=190840 )", "+\t\t\tObject target = JavaModel.getTarget(this.sourcePath, true);", "+\t\t\tif (target instanceof IContainer) {", "+\t\t\t\tIContainer folder = (IContainer)target;", "+\t\t\t\tcomputeRootPath(folder, firstLevelPackageNames, containsADefaultPackage, tempRoots, folder.getFullPath().segmentCount()/*if external folder, this is the linked folder path*/);", "+\t\t\t} else {", "+\t\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\t\t\tZipFile zip = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tzip = manager.getZipFile(this.sourcePath);", "+\t\t\t\t\tfor (Enumeration entries = zip.entries(); entries.hasMoreElements(); ) {", "+\t\t\t\t\t\tZipEntry entry = (ZipEntry) entries.nextElement();", "+\t\t\t\t\t\tString entryName;", "+\t\t\t\t\t\tif (!entry.isDirectory() && org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(entryName = entry.getName())) {", "+\t\t\t\t\t\t\tIPath path = new Path(entryName);", "+\t\t\t\t\t\t\tint segmentCount = path.segmentCount();", "+\t\t\t\t\t\t\tif (segmentCount > 1) {", "+\t\t\t\t\t\t\t\tfor (int i = 0, max = path.segmentCount() - 1; i < max; i++) {", "+\t\t\t\t\t\t\t\t\tif (firstLevelPackageNames.contains(path.segment(i))) {", "+\t\t\t\t\t\t\t\t\t\ttempRoots.add(path.uptoSegment(i));", "+\t\t\t\t\t\t\t\t\t\t// don't break here as this path could contain other first level package names (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=74014)", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (i == max - 1 && containsADefaultPackage) {", "+\t\t\t\t\t\t\t\t\t\ttempRoots.add(path.uptoSegment(max));", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (i == max - 1 && containsADefaultPackage) {", "-\t\t\t\t\t\t\t\t\ttempRoots.add(path.uptoSegment(max));", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (containsADefaultPackage) {", "+\t\t\t\t\t\t\t\ttempRoots.add(new Path(\"\")); //$NON-NLS-1$", "-\t\t\t\t\t\t} else if (containsADefaultPackage) {", "-\t\t\t\t\t\t\ttempRoots.add(new Path(\"\")); //$NON-NLS-1$", "+\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t// ignore", "+\t\t\t\t} finally {", "+\t\t\t\t\tmanager.closeZipFile(zip); // handle null case", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\t// ignore", "-\t\t\t} finally {", "-\t\t\t\tmanager.closeZipFile(zip); // handle null case"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2783e91b739b9aad067c15e14b555d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "c13b5c8fdc5b98528c9ff5d2f4f3b65852c12b48", "commitAfterChange": "08ce0253d3f5d5ff59d7d3b857a3b4f1f87c7e61", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprivate String computeRootPath(final String fullName)", "signatureAfterChange": " \t \tprivate void computeAllRootPaths(IType type)", "diff": ["+\tprivate void computeAllRootPaths(IType type) {", "+\t\tIPackageFragmentRoot root = (IPackageFragmentRoot) type.getPackageFragment().getParent();", "+\t\tthis.rootPaths = new HashSet();", "+\t\tlong time = 0;", "+\t\tif (VERBOSE) {", "+\t\t\tSystem.out.println(\"compute all root paths for \" + root.getElementName());", "+\t\t\ttime = System.currentTimeMillis();", "+\t\t}", "+\t\tfinal HashSet firstLevelPackageNames = new HashSet();", "+\t\tboolean containsADefaultPackage = false;", "+", "+\t\tif (root.isArchive()) {", "+\t\t\tJarPackageFragmentRoot jarPackageFragmentRoot = (JarPackageFragmentRoot) root;", "+\t\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\t\tZipFile zip = null;", "+\t\t\ttry {", "+\t\t\t\tzip = manager.getZipFile(jarPackageFragmentRoot.getPath());", "+\t\t\t\tfor (Enumeration entries = zip.entries(); entries.hasMoreElements(); ) {", "+\t\t\t\t\tZipEntry entry = (ZipEntry) entries.nextElement();", "+\t\t\t\t\tString entryName = entry.getName();", "+\t\t\t\t\tif (!entry.isDirectory()) {", "+\t\t\t\t\t\tint index = entryName.indexOf('/');", "+\t\t\t\t\t\tif (index != -1) {", "+\t\t\t\t\t\t\tString firstLevelPackageName = entryName.substring(0, index);", "+\t\t\t\t\t\t\tif (JavaConventions.validatePackageName(firstLevelPackageName).isOK()) {", "+\t\t\t\t\t\t\t\tfirstLevelPackageNames.add(firstLevelPackageName);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (Util.isClassFileName(entryName)) {", "+\t\t\t\t\t\t\tcontainsADefaultPackage = true;", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} catch (CoreException e) {", "+\t\t\t} finally {", "+\t\t\t\tmanager.closeZipFile(zip); // handle null case", "+\t\t\t}", "+\t\t} else {", "+\t\t\tObject target = JavaModel.getTarget(ResourcesPlugin.getWorkspace().getRoot(), root.getPath(), true);", "+\t\t\tif (target instanceof IFolder) {", "+\t\t\t\tIResource resource = root.getResource();", "+\t\t\t\tif (resource.getType() == IResource.FOLDER) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tIResource[] members = ((IFolder) resource).members();", "+\t\t\t\t\t\tfor (int i = 0, max = members.length; i < max; i++) {", "+\t\t\t\t\t\t\tIResource member = members[i];", "+\t\t\t\t\t\t\tif (member.getType() == IResource.FOLDER) {", "+\t\t\t\t\t\t\t\tfirstLevelPackageNames.add(member.getName());", "+\t\t\t\t\t\t\t} else if (Util.isClassFileName(member.getName())) {", "+\t\t\t\t\t\t\t\tcontainsADefaultPackage = true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else if (target instanceof File) {", "+\t\t\t\tFile file = (File)target;", "+\t\t\t\tif (file.isDirectory()) {", "+\t\t\t\t\tFile[] files = file.listFiles();", "+\t\t\t\t\tfor (int i = 0, max = files.length; i < max; i++) {", "+\t\t\t\t\t\tFile currentFile = files[i];", "+\t\t\t\t\t\tif (currentFile.isDirectory()) {", "+\t\t\t\t\t\t\tfirstLevelPackageNames.add(currentFile.getName());", "+\t\t\t\t\t\t} else if (Util.isClassFileName(currentFile.getName())) {", "+\t\t\t\t\t\t\tcontainsADefaultPackage = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t */", "-\tprivate String computeRootPath(final String fullName) {", "+", "-\t\t\t\tint index = Integer.MAX_VALUE;", "-\t\t\t\tString foundEntry = null;", "-\t\t\t\t\tString name;", "-\t\t\t\t\tif (!entry.isDirectory() && Util.isJavaFileName(name = entry.getName())) {", "-\t\t\t\t\t\tif (name.endsWith(fullName)) {", "-\t\t\t\t\t\t\tindex = Math.min(index, name.indexOf(fullName));", "-\t\t\t\t\t\t\tfoundEntry = name;", "+\t\t\t\t\tif (!entry.isDirectory()) {", "+\t\t\t\t\t\tIPath path = new Path(entry.getName());", "+\t\t\t\t\t\tint segmentCount = path.segmentCount();", "+\t\t\t\t\t\tif (segmentCount > 1) {", "+\t\t\t\t\t\t\tloop: for (int i = 0, max = path.segmentCount() - 1; i < max; i++) {", "+\t\t\t\t\t\t\t\tif (firstLevelPackageNames.contains(path.segment(i))) {", "+\t\t\t\t\t\t\t\t\tthis.rootPaths.add(path.uptoSegment(i).toString());", "+\t\t\t\t\t\t\t\t\tbreak loop;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (i == max - 1 && containsADefaultPackage) {", "+\t\t\t\t\t\t\t\t\tthis.rootPaths.add(path.uptoSegment(max).toString());", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if (containsADefaultPackage) {", "+\t\t\t\t\t\t\tthis.rootPaths.add(\"\"); //$NON-NLS-1$", "-\t\t\t\tif (foundEntry != null) {", "-\t\t\t\t\treturn foundEntry.substring(0, index);", "-\t\t\t\t}", "-\t\t\t\treturn null;", "-\t\t\t\treturn null;", "-\t\t\t\tIFolder folder = (IFolder)target;", "-\t\t\t\tfinal String[] rootPathHolder = new String[1];", "-\t\t\t\tfinal int[] index = new int[] { Integer.MAX_VALUE };", "-\t\t\t\ttry {", "-\t\t\t\t\tfolder.accept(", "-\t\t\t\t\t\tnew IResourceProxyVisitor() {", "-\t\t\t\t\t\t\tpublic boolean visit(IResourceProxy proxy) throws CoreException {", "-\t\t\t\t\t\t\t\tif (proxy.getType() == IResource.FILE) {", "-\t\t\t\t\t\t\t\t\tif (Util.isJavaFileName(proxy.getName())) { ", "-\t\t\t\t\t\t\t\t\t\tIResource resource = proxy.requestResource();", "-\t\t\t\t\t\t\t\t\t\tIPath resourceFullPath = resource.getFullPath();", "-\t\t\t\t\t\t\t\t\t\tint sourcePathSegmentCount = sourcePath.segmentCount();", "-\t\t\t\t\t\t\t\t\t\tIPath javaFilePath = resourceFullPath.removeFirstSegments(sourcePathSegmentCount);", "-\t\t\t\t\t\t\t\t\t\tString javaFilePathString = javaFilePath.toString();", "-\t\t\t\t\t\t\t\t\t\tif (javaFilePathString.endsWith(fullName)) {", "-\t\t\t\t\t\t\t\t\t\t\tindex[0] = Math.min(index[0], javaFilePathString.indexOf(javaFilePathString));", "-\t\t\t\t\t\t\t\t\t\t\trootPathHolder[0] = javaFilePathString;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t},", "-\t\t\t\t\t\tIResource.NONE", "-\t\t\t\t\t);", "-\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t}", "-\t\t\t\tif (rootPathHolder[0] != null) {", "-\t\t\t\t\tif (index[0] == 0) {", "-\t\t\t\t\t\treturn \"\"; //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\treturn rootPathHolder[0].substring(0, index[0]);", "-\t\t\t\t}", "+\t\t\t\tcomputeRootPath((IFolder)target, firstLevelPackageNames, containsADefaultPackage);", "-\t\t\t\t\tfinal String[] rootPathHolder = new String[1];", "-\t\t\t\t\tfinal int[] index = new int[] { Integer.MAX_VALUE };", "-\t\t\t\t\tcomputeRootPath(file, fullName, rootPathHolder, index);", "-\t\t\t\t\tif (rootPathHolder[0] != null) {", "-\t\t\t\t\t\tif (index[0] == 0) {", "-\t\t\t\t\t\t\treturn \"\"; //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn rootPathHolder[0].substring(0, index[0]);", "-\t\t\t\t\t}", "+\t\t\t\t\tcomputeRootPath(file, firstLevelPackageNames, containsADefaultPackage);", "-\t\treturn null;", "+\t\tif (VERBOSE) {", "+\t\t\tSystem.out.println(\"Found \" + this.rootPaths.size() + \" root paths\");\t\t\t", "+\t\t\tSystem.out.println(\"Spent \" + (System.currentTimeMillis() - time) + \"ms\");", "+\t\t}", "+\t\tthis.areRootPathsComputed = true;"]}], "num": 48584}
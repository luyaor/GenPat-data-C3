{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32bdb63dcb329b0ec6d88dacb32d439e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6587e646017ce0b84b2f22b6ee3fc5d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "1209010fd2d01b73be2d5ddcc68dee954a4dfb12", "commitAfterChange": "e2d64401ee163038583789c4f8e64653502b280a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r public void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding)", "signatureAfterChange": "\r \tpublic void manageSyntheticWriteAccessIfNecessary(\r \t\tBlockScope currentScope,\r \t\tFieldBinding fieldBinding,\r \t\tTypeBinding lastReceiverType)", "diff": ["- */\r", "-public void manageSyntheticWriteAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding) {\r", "-\t// nothing to do the code generation will take care of private access\r", "-}\r", "+\t */\r", "+\tpublic void manageSyntheticWriteAccessIfNecessary(\r", "+\t\tBlockScope currentScope,\r", "+\t\tFieldBinding fieldBinding,\r", "+\t\tTypeBinding lastReceiverType) {\r", "+\r", "+\t\t// if the binding declaring class is not visible, need special action\r", "+\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding\r", "+\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type\r", "+\t\tboolean useDelegate = fieldBinding == binding && this.delegateThis != null;\r", "+\t\tif (useDelegate) lastReceiverType = this.delegateThis.type;\r", "+\r", "+\t\tif (fieldBinding.declaringClass != lastReceiverType\r", "+\t\t\t&& !lastReceiverType.isArrayType()\t\t\t\r", "+\t\t\t&& fieldBinding.declaringClass != null\r", "+\t\t\t&& fieldBinding.constant == NotAConstant\r", "+\t\t\t&& ((currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "+\t\t\t\t\t&& (fieldBinding != binding || indexOfFirstFieldBinding > 1 || !fieldBinding.isStatic())\r", "+\t\t\t\t\t&& fieldBinding.declaringClass.id != T_Object)\r", "+\t\t\t\t|| !(useDelegate\r", "+\t\t\t\t\t\t? new CodeSnippetScope(currentScope).canBeSeenByForCodeSnippet(fieldBinding.declaringClass, (ReferenceBinding) this.delegateThis.type)\r", "+\t\t\t\t\t\t: fieldBinding.declaringClass.canBeSeenBy(currentScope)))){\r", "+\t\t\tif (fieldBinding == binding){\r", "+\t\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType);\r", "+\t\t\t} else {\r", "+\t\t\t\tif (this.otherCodegenBindings == this.otherBindings){\r", "+\t\t\t\t\tint l = this.otherBindings.length;\r", "+\t\t\t\t\tSystem.arraycopy(this.otherBindings, 0, this.otherCodegenBindings = new FieldBinding[l], 0, l);\r", "+\t\t\t\t}\r", "+\t\t\t\tthis.otherCodegenBindings[this.otherCodegenBindings.length-1] = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffa72d5889e0fcfe565129640f9d20d7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "1209010fd2d01b73be2d5ddcc68dee954a4dfb12", "commitAfterChange": "e2d64401ee163038583789c4f8e64653502b280a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, int index)", "signatureAfterChange": "\r \t\t\r \tpublic void manageSyntheticReadAccessIfNecessary(\r \t\tBlockScope currentScope,\r \t\tFieldBinding fieldBinding,\r \t\tTypeBinding lastReceiverType,\r \t\tint index)", "diff": ["-public void manageSyntheticReadAccessIfNecessary(BlockScope currentScope, FieldBinding fieldBinding, int index) {\r", "-\t// nothing to do the code generation will take care of private access\r", "-}\r", "+\t\t\r", "+\tpublic void manageSyntheticReadAccessIfNecessary(\r", "+\t\tBlockScope currentScope,\r", "+\t\tFieldBinding fieldBinding,\r", "+\t\tTypeBinding lastReceiverType,\r", "+\t\tint index) {\r", "+\r", "+\t\t// if the binding declaring class is not visible, need special action\r", "+\t\t// for runtime compatibility on 1.2 VMs : change the declaring class of the binding\r", "+\t\t// NOTE: from 1.4 on, field's declaring class is touched if any different from receiver type\r", "+\t\tboolean useDelegate = index == 0 && this.delegateThis != null;\r", "+\t\tif (useDelegate) lastReceiverType = this.delegateThis.type;\r", "+\r", "+\t\tif (fieldBinding.declaringClass != lastReceiverType\r", "+\t\t\t&& !lastReceiverType.isArrayType()\t\t\t\r", "+\t\t\t&& fieldBinding.declaringClass != null\r", "+\t\t\t&& fieldBinding.constant == NotAConstant\r", "+\t\t\t&& ((currentScope.environment().options.complianceLevel >= CompilerOptions.JDK1_4\r", "+\t\t\t\t\t&& (index > 0 || indexOfFirstFieldBinding > 1 || !fieldBinding.isStatic())\r", "+\t\t\t\t\t&& fieldBinding.declaringClass.id != T_Object)\r", "+\t\t\t\t|| !(useDelegate\r", "+\t\t\t\t\t\t? new CodeSnippetScope(currentScope).canBeSeenByForCodeSnippet(fieldBinding.declaringClass, (ReferenceBinding) this.delegateThis.type)\r", "+\t\t\t\t\t\t: fieldBinding.declaringClass.canBeSeenBy(currentScope)))){\r", "+\t\t\tif (index == 0){\r", "+\t\t\t\tthis.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType);\r", "+\t\t\t} else {\r", "+\t\t\t\tif (this.otherCodegenBindings == this.otherBindings){\r", "+\t\t\t\t\tint l = this.otherBindings.length;\r", "+\t\t\t\t\tSystem.arraycopy(this.otherBindings, 0, this.otherCodegenBindings = new FieldBinding[l], 0, l);\r", "+\t\t\t\t}\r", "+\t\t\t\tthis.otherCodegenBindings[index-1] = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)lastReceiverType);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r"]}], "num": 35184}
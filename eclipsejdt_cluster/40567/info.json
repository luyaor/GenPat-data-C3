{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea4c22e9410a41b69148637151ed7588", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b5928606d5ca03526e4a54061d603a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 33, "signatureBeforeChange": " \t \tprivate ICompilationUnit createNewWorkingCopy(IFile parentFile, String typeName, \t\t\tString contents, WorkingCopyOwner workingCopyOwner, \t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor) \t\tthrows JavaModelException", "signatureAfterChange": " \tprivate static String[] parseTypeName(String qualifiedName)", "diff": ["-\t", "-\tprivate ICompilationUnit createNewWorkingCopy(IFile parentFile, String typeName,", "-\t\t\tString contents, WorkingCopyOwner workingCopyOwner,", "-\t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor)", "-\t\tthrows JavaModelException", "-\t{", "-\t\tIFolder folder = _gsfm.getFolder();", "+\t */", "+\tprivate static String[] parseTypeName(String qualifiedName) {", "-\t\t// ", "-\t\t//  figure out package part of type & file name", "-\t\t//", "+\t\t//TODO: the code in CompilationUnitHelper doesn't perform this check.  Should it?", "+\t\tif (qualifiedName.indexOf('/') != -1)", "+\t\t\tqualifiedName = qualifiedName.replace('/', '.');", "+\t\t", "+\t\tString[] names = new String[2];", "-\t\tint idx = typeName.lastIndexOf( '.' );", "+\t\tint idx = qualifiedName.lastIndexOf( '.' );", "-\t\t    pkgName = typeName.substring( 0, idx );", "+\t\t    pkgName = qualifiedName.substring( 0, idx );", "-\t\t\t\ttypeName.substring(idx + 1, typeName.length()) + \".java\"; //$NON-NLS-1$", "+\t\t\t\tqualifiedName.substring(idx + 1, qualifiedName.length()) + \".java\"; //$NON-NLS-1$", "-\t\t\tfname = typeName + \".java\"; //$NON-NLS-1$", "+\t\t\tfname = qualifiedName + \".java\"; //$NON-NLS-1$", "-", "-\t\t//", "-\t\t//  create compilation unit", "-\t\t//", "-\t\tIPackageFragmentRoot root = _jProject.getPackageFragmentRoot(folder);", "-\t\tIPackageFragment pkgFragment = \troot.getPackageFragment(pkgName );", "-\t\tICompilationUnit cu = pkgFragment.getCompilationUnit( fname );", "-", "-\t\t//", "-\t\t// BecomeWorkingCopyOperation shouldn't take any resource locks to run, so we should be thread-safe here", "-\t\t//", "-\t\tcu.becomeWorkingCopy(problemRequestor, progressMonitor);", "-\t\tICompilationUnit workingCopy = cu;", "-\t\t", "-\t\t//", "-\t\t//  update working copy", "-\t\t//", "-\t\tupdateWorkingCopy( contents, workingCopy, workingCopyOwner, progressMonitor );", "-", "-\t\t", "-\t\t//", "-\t\t// update maps", "-\t\t//", "-\t\taddEntryToWorkingCopyMaps( parentFile, workingCopy );", "-\t\t", "-", "-\t\treturn workingCopy;\t", "+\t\tnames[0] = pkgName;", "+\t\tnames[1] = fname;", "+\t\treturn names;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d52c1501451507ff220896f9603957c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java", "commitBeforeChange": "1c3298c6e059e091058be85e5c193be4f3e2bb5c", "commitAfterChange": "1604c4cb884aee860a1cc5ef654a628a5e36afd0", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": " \t \tprivate ICompilationUnit createNewWorkingCopy(ICompilationUnit parentCompilationUnit, String typeName, \t\t\tString contents, WorkingCopyOwner workingCopyOwner, \t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor) \t\tthrows CoreException, JavaModelException", "signatureAfterChange": " \t \tprivate ICompilationUnit createNewWorkingCopy(IFile parentFile, String typeName, \t\t\tString contents, WorkingCopyOwner workingCopyOwner, \t\t\tIProblemRequestor problemRequestor, IProgressMonitor progressMonitor) \t\tthrows JavaModelException", "diff": ["-\tprivate ICompilationUnit createNewWorkingCopy(ICompilationUnit parentCompilationUnit, String typeName,", "+\tprivate ICompilationUnit createNewWorkingCopy(IFile parentFile, String typeName,", "-\t\tthrows CoreException, JavaModelException", "+\t\tthrows JavaModelException", "-\t\tIJavaProject jp = parentCompilationUnit.getJavaProject();", "-", "-\t\t//", "-\t\t// create folder for generated source files", "-\t\t//", "-\t\tensureGeneratedSourceFolder( jp, progressMonitor );", "-\t\tIPackageFragmentRoot root = jp.getPackageFragmentRoot(folder);", "-\t\tIPackageFragment pkgFragment = ", "-\t\t\troot.createPackageFragment( pkgName, true, null );", "-\t\t", "+\t\tIPackageFragmentRoot root = _javaProject.getPackageFragmentRoot(folder);", "+\t\tIPackageFragment pkgFragment = \troot.getPackageFragment(pkgName );", "-\t\tif ( cu == null || ! cu.getResource().exists() )", "-\t\t{", "-\t\t    cu = pkgFragment.createCompilationUnit(", "-\t\t\t    fname, contents, true, progressMonitor );", "-\t\t}", "-\t\telse", "-\t\t{", "-\t\t\tmakeReadOnly( cu, false );", "-\t\t}", "-\t\t", "-\t\t//  TODO:  can we call getWorkingCopy here?", "+\t\t// BecomeWorkingCopyOperation shouldn't take any resource locks to run, so we should be thread-safe here", "+\t\t//  update working copy", "+\t\t//", "+\t\tupdateWorkingCopy( contents, workingCopy, workingCopyOwner, progressMonitor );", "+", "+\t\t", "+\t\t//", "-\t\taddEntryToWorkingCopyMaps( parentCompilationUnit, workingCopy );", "+\t\taddEntryToWorkingCopyMaps( parentFile, workingCopy );", "-\t\t// we save this here since the resource has to exist on disk", "-\t\tworkingCopy.commitWorkingCopy( true, progressMonitor );", "-\t\t", "-\t\t//", "-\t\t// make the file derived so that it is not checked into source control.", "-\t\t//", "-\t\tmakeDerived( workingCopy );", "-\t\t", "-\t\t//", "-\t\t// make working copy read-only", "-\t\t//", "-\t\tmakeReadOnly( workingCopy, true );", "-", "-\t\treturn workingCopy;", "-\t\t", "+\t\treturn workingCopy;\t"]}], "num": 40567}
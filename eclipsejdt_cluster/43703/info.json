{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f4a5c4f73c6d652e6c1d68ea974a44a4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21d00cc2595d6c7ada5ea5dcc1271aca", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FakedTrackingVariable.java", "commitBeforeChange": "40ad9904e939ba54abece52421044021edd6e1c0", "commitAfterChange": "8d45cb26fc5ad244f93e8632d761d46ad4a120cf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void markClose(FlowInfo flowInfo, FlowContext flowContext)", "signatureAfterChange": " \tpublic void markClose(FlowInfo flowInfo, FlowContext flowContext)", "diff": ["-\t\tflowInfo.markAsDefinitelyNonNull(this.binding);", "-\t\tthis.globalClosingState |= CLOSE_SEEN;", "+\t\tFakedTrackingVariable current = this;", "+\t\tdo {", "+\t\t\tflowInfo.markAsDefinitelyNonNull(current.binding);", "+\t\t\tcurrent.globalClosingState |= CLOSE_SEEN;", "-//\t\tif (flowContext.initsOnFinally != null)", "-//\t\t\tflowContext.initsOnFinally.markAsDefinitelyNonNull(this.binding);", "+//\t\t\tif (flowContext.initsOnFinally != null)", "+//\t\t\t\tflowContext.initsOnFinally.markAsDefinitelyNonNull(this.binding);", "+\t\t\tcurrent = current.innerTracker;", "+\t\t} while (current != null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b636564277e7433518396b1a634a0fb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FakedTrackingVariable.java", "commitBeforeChange": "96ef6a1342ca74d72728b34641d9caf80d6d6997", "commitAfterChange": "2dc8c8168c71292aca0a9b4cb34971871475b18a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic static void analyseCloseableAllocation(BlockScope scope, FlowInfo flowInfo, AllocationExpression allocation)", "signatureAfterChange": " \tpublic static void analyseCloseableAllocation(BlockScope scope, FlowInfo flowInfo, AllocationExpression allocation)", "diff": ["-\t\t\t\t\tif (innerTracker == allocation.closeTracker)", "-\t\t\t\t\t\treturn; // self wrap (res = new Res(res)) -> neither change (here) nor remove (below)", "+\t\t\t\t\tFakedTrackingVariable currentInner = innerTracker;", "+\t\t\t\t\tdo {", "+\t\t\t\t\t\tif (currentInner == allocation.closeTracker)", "+\t\t\t\t\t\t\treturn; // self wrap (res = new Res(res)) -> neither change (here) nor remove (below)", "+\t\t\t\t\t\t// also check for indirect cycles, see https://bugs.eclipse.org/368709", "+\t\t\t\t\t\tcurrentInner = currentInner.innerTracker;", "+\t\t\t\t\t} while (currentInner != null);"]}], "num": 43703}
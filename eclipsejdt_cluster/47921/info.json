{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "38d7fd67cd7531426e6ef7250fbfb80c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d412604678921afd831873d59662d4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java", "commitBeforeChange": "67da1da15e9afbcd33679f07597c706e7915cf4a", "commitAfterChange": "027fccb2c17e0f0d2b28705c6704af10fc8ce0aa", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 56, "signatureBeforeChange": " protected void pushNotInMethod()", "signatureAfterChange": " protected void prepareForHeaders()", "diff": ["-protected void pushNotInMethod() {", "-\ttry {", "-\t\tthis.inMethodStack[++this.inMethodPtr] = false;", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\t//except in test's cases, it should never raise", "-\t\tint oldStackLength = this.inMethodStack.length;", "-\t\tSystem.arraycopy(this.inMethodStack , 0, (this.inMethodStack = new boolean[oldStackLength + StackIncrement]), 0, oldStackLength);", "-\t\tthis.inMethodStack[this.inMethodPtr] = false;", "-\t}", "+protected void prepareForHeaders() {", "+\tnestedMethod[nestedType = 0] = 0;", "+\tvariablesCounter[nestedType] = 0;", "+\trealBlockStack[realBlockPtr = 0] = 0;", "+\t", "+\tpopUntilElement(K_TYPE_DELIMITER);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fafc93b6f6ca677eb7cd7faed8fe169", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "9ccc53063dda8b7e1afdde95ae36a8417c582abc", "commitAfterChange": "7143e72571bb2e6a2e74f6791210a97b375b5ab6", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " protected void consumeAssignmentOperator(int pos)", "signatureAfterChange": " protected void consumeAssignmentOperator(int pos)", "diff": ["-\ttry {", "-\t\tthis.intStack[++this.intPtr] = pos;", "-\t} catch (IndexOutOfBoundsException e) {", "-\t\t//this.intPtr is correct ", "-\t\tint oldStackLength = this.intStack.length;", "-\t\tint oldStack[] = this.intStack;", "-\t\tthis.intStack = new int[oldStackLength + StackIncrement];", "-\t\tSystem.arraycopy(oldStack, 0, this.intStack, 0, oldStackLength);", "-\t\tthis.intStack[this.intPtr] = pos;", "-\t}", "+\tpushOnIntStack(pos);"]}], "num": 47921}
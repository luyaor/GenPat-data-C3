{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "81cb823392a501a47bbc994846518c89", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3ca614471b7775690a54018b73352d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferenceLocator.java", "commitBeforeChange": "11d9bc69677fa9c8e3ad183264b865451dc15a16", "commitAfterChange": "0aef5635cdda5f8b487e6520930c462feef51cd5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void match(TypeReference node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(TypeReference node, MatchingNodeSet nodeSet)", "diff": ["-//public void match(TypeDeclaration node, MatchingNodeSet nodeSet) - SKIP IT", "-public void match(TypeReference node, MatchingNodeSet nodeSet) {", "-\tif (this.pattern.superSimpleName == null) {", "-\t\tnodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "-\t} else {", "-\t\tchar[] typeRefSimpleName = null;", "-\t\tif (node instanceof SingleTypeReference) {", "-\t\t\ttypeRefSimpleName = ((SingleTypeReference) node).token;", "-\t\t} else { // QualifiedTypeReference", "-\t\t\tchar[][] tokens = ((QualifiedTypeReference) node).tokens;", "-\t\t\ttypeRefSimpleName = tokens[tokens.length-1];", "-\t\t}\t\t\t\t", "-\t", "-\t\tif (matchesName(this.pattern.superSimpleName, typeRefSimpleName))", "-\t\t\tnodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "-\t}", "+//public int match(TypeDeclaration node, MatchingNodeSet nodeSet) - SKIP IT", "+public int match(TypeReference node, MatchingNodeSet nodeSet) {", "+\tif (this.pattern.superSimpleName == null)", "+\t\treturn nodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "+", "+\tchar[] typeRefSimpleName = null;", "+\tif (node instanceof SingleTypeReference) {", "+\t\ttypeRefSimpleName = ((SingleTypeReference) node).token;", "+\t} else { // QualifiedTypeReference", "+\t\tchar[][] tokens = ((QualifiedTypeReference) node).tokens;", "+\t\ttypeRefSimpleName = tokens[tokens.length-1];", "+\t}\t\t\t\t", "+\tif (matchesName(this.pattern.superSimpleName, typeRefSimpleName))", "+\t\treturn nodeSet.addMatch(node, this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH);", "+", "+\treturn IMPOSSIBLE_MATCH;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d409ad82da5b1eead44b71b56af9f613", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/LocalVariableLocator.java", "commitBeforeChange": "cb3a630359a22f7ce6166a489826cbd44a0698c7", "commitAfterChange": "684148daf1ae1fa5c2a3b4e261bbfa56ad328f58", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic int match(LocalDeclaration node, MatchingNodeSet nodeSet)", "signatureAfterChange": " public int match(LocalDeclaration node, MatchingNodeSet nodeSet)", "diff": ["+}", "+public int match(LocalDeclaration node, MatchingNodeSet nodeSet) {", "+\tint referencesLevel = IMPOSSIBLE_MATCH;", "+\tif (this.pattern.findReferences)", "+\t\t// must be a write only access with an initializer", "+\t\tif (this.pattern.writeAccess && !this.pattern.readAccess && node.initialization != null)", "+\t\t\tif (matchesName(this.pattern.name, node.name))", "+\t\t\t\treferencesLevel = this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;", "-\tpublic int match(LocalDeclaration node, MatchingNodeSet nodeSet) {", "-\t\tint referencesLevel = IMPOSSIBLE_MATCH;", "-\t\tif (this.pattern.findReferences)", "-\t\t\t// must be a write only access with an initializer", "-\t\t\tif (this.pattern.writeAccess && !this.pattern.readAccess && node.initialization != null)", "-\t\t\t\tif (matchesName(this.pattern.name, node.name))", "-\t\t\t\t\treferencesLevel = this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;", "-\t", "-\t\tint declarationsLevel = IMPOSSIBLE_MATCH;", "-\t\tif (this.pattern.findDeclarations)", "-\t\t\tif (matchesName(this.pattern.name, node.name)) {", "-\t\t\t\tif (node.declarationSourceStart == getLocalVariable().declarationSourceStart)", "-\t\t\t\t\tdeclarationsLevel = this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;", "-\t\t\t}", "-\t", "-\t\treturn nodeSet.addMatch(node, referencesLevel >= declarationsLevel ? referencesLevel : declarationsLevel); // use the stronger match", "-\t}", "+\tint declarationsLevel = IMPOSSIBLE_MATCH;", "+\tif (this.pattern.findDeclarations)", "+\t\tif (matchesName(this.pattern.name, node.name))", "+\t\t\tif (node.declarationSourceStart == getLocalVariable().declarationSourceStart)", "+\t\t\t\tdeclarationsLevel = this.pattern.mustResolve ? POSSIBLE_MATCH : ACCURATE_MATCH;", "+\treturn nodeSet.addMatch(node, referencesLevel >= declarationsLevel ? referencesLevel : declarationsLevel); // use the stronger match", "+}"]}], "num": 29939}
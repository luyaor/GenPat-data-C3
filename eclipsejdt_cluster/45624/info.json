{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "035f8ea218b0828516313cb97fd5d0ef", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "064efa237d761f65404a790e8fe3e1f1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java", "commitBeforeChange": "55566d5f364ac8008cbbbd5a928a8dcfd0a1b87f", "commitAfterChange": "030294305389e5486e7f63658830617d44acd9c2", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tprotected Object parseQualifiedName(boolean reset) throws InvalidInputException", "signatureAfterChange": " \tprotected Object parseQualifiedName(boolean reset) throws InvalidInputException", "diff": ["+\t\t\t\t\t\tif (this.identifierPtr>=0) {", "+\t\t\t\t\t\t\tthis.lastIdentifierEndPosition = (int) this.identifierPositionStack[this.identifierPtr];", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (this.identifierPtr>=0) {", "+\t\t\t\t\t\t\t\t\tthis.lastIdentifierEndPosition = (int) this.identifierPositionStack[this.identifierPtr];", "+\t\t\t\t\t\t\t\t}", "-\t\tthis.lastIdentifierEndPosition = (int) this.identifierPositionStack[this.identifierPtr];", "+\t\tif (this.identifierPtr>=0) {", "+\t\t\tthis.lastIdentifierEndPosition = (int) this.identifierPositionStack[this.identifierPtr];", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e423b54980bc8409dda67a1dad7bdd3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferencePattern.java", "commitBeforeChange": "4043b8a88c35a2c1612858cff67743727f25247b", "commitAfterChange": "6b8da2bd2bb1367c9817dbe3821476ed638f0906", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public TypeReferencePattern(char[] qualification, char[] simpleName, int matchRule)", "signatureAfterChange": "  public TypeReferencePattern(char[] qualification, char[] simpleName, int matchRule)", "diff": ["+\t", "+\tif (this.segments == null)", "+\t\tif (this.qualification == null)", "+\t\t\tthis.segmentsSize =  0;", "+\t\telse", "+\t\t\tthis.segmentsSize =  CharOperation.occurencesOf('.', this.qualification) + 1;", "+\telse", "+\t\tthis.segmentsSize = this.segments.length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28e733f660138bb7b3b51cc86c0d7a52", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BindingKeyScanner.java", "commitBeforeChange": "56fd729d2f45ec0b9c9fda262c4722902ccba4f8", "commitAfterChange": "880fcfdc9d3f451c53fbdd4300c71ec2c6ba2a25", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tint nextToken()", "signatureAfterChange": " \t \tint nextToken()", "diff": ["-\t\t\t\t\tthis.token = TYPE;", "+\t\t\t\t\tif (this.index > this.start && this.source[this.start-1] == '.')", "+\t\t\t\t\t\tif (this.source[this.start-2] == '>')", "+\t\t\t\t\t\t\tthis.token = TYPE;", "+\t\t\t\t\t\telse", "+\t\t\t\t\t\t\tthis.token = METHOD;", "+\t\t\t\t\telse", "+\t\t\t\t\t\tthis.token = TYPE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62f68bd4baed6e9e3b60bcc927366a6c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingOpenable.java", "commitBeforeChange": "182357267e3a6e8da6ab4039239adfa51c4ddc26", "commitAfterChange": "174f89aae07a92e58011875516697182fd7f3ebd", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r private void locateMatchesInCompilationUnit(char[] source) throws CoreException", "signatureAfterChange": "\r private void locateMatchesInCompilationUnit(char[] source) throws CoreException", "diff": ["+\tif (this.parsedUnit == null) { // case where no binding resolution is needed\r", "+\t\t// create match set\t\r", "+\t\tthis.matchSet = new MatchSet(this.locator);\r", "+\t\tthis.locator.parser.matchSet = this.matchSet;\r", "+\t\t\r", "+\t\t// diet parse\r", "+\t\tthis.parsedUnit = this.locator.dietParse(source);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd84c68d3a05d14b4191073a247ee678", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java", "commitBeforeChange": "c62ecfd031507c11ea236866605fedd6f3a952c5", "commitAfterChange": "ded73445e8c5cf2db0a4abcc53e1680f02ae6cf7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate boolean dumpEqualityExpression( \t\tBinaryExpression binaryExpression, \t\tint operator, \t\tBlockScope scope)", "signatureAfterChange": "  \tprivate boolean dumpEqualityExpression( \t\tBinaryExpression binaryExpression, \t\tint operator, \t\tBlockScope scope)", "diff": ["-\t\tbinaryExpression.left.traverse(this, scope);", "-\t\tthis.scribe.printNextToken(operator, this.preferences.insert_space_before_binary_operator);", "-\t\tif (this.preferences.insert_space_after_binary_operator) {", "-\t\t\tthis.scribe.space();", "+\t\tif (this.expressionsDepth < 0) {", "+\t\t\tthis.expressionsDepth = 0;", "+\t\t} else {", "+\t\t\tthis.expressionsDepth++;", "+\t\t\tthis.expressionsPos <<= 2;", "-\t\tbinaryExpression.right.traverse(this, scope);", "-", "+\t\ttry {", "+\t\t\tthis.expressionsPos |= EXPRESSIONS_POS_ENTER_EQUALITY;", "+\t\t\tbinaryExpression.left.traverse(this, scope);", "+\t\t\tthis.scribe.printNextToken(operator, this.preferences.insert_space_before_binary_operator, Scribe.PRESERVE_EMPTY_LINES_IN_EQUALITY_EXPRESSION);", "+\t\t\tif (this.preferences.insert_space_after_binary_operator) {", "+\t\t\t\tthis.scribe.space();", "+\t\t\t}", "+\t\t\tbinaryExpression.right.traverse(this, scope);", "+\t\t}", "+\t\tfinally {", "+\t\t\tthis.expressionsDepth--;", "+\t\t\tthis.expressionsPos >>= 2;", "+\t\t}"]}], "num": 45624}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "828d629ef4d81fa461d5e98127f594ce", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1836f48bdd918978996f2a754e111a56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnMessageSend.java", "commitBeforeChange": "03bf58276587a73704c9ef865d4a7b548edf18f3", "commitAfterChange": "f81258aa1478d9f4440e20c76048066521e3d2ff", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \r \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "\r \r \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (binding == null || \r", "-\t\t\t\t!(binding.isValidBinding() || \r", "-\t\t\t\t\tbinding.problemId() == ProblemReasons.NotVisible\r", "-\t\t\t\t\t|| binding.problemId() == ProblemReasons.InheritedNameHidesEnclosingName\r", "-\t\t\t\t\t|| binding.problemId() == ProblemReasons.NonStaticReferenceInConstructorInvocation\r", "-\t\t\t\t\t|| binding.problemId() == ProblemReasons.NonStaticReferenceInStaticContext))\r", "+\t\tif ((binding == null || binding.problemId() == ProblemReasons.NotFound )&&\r", "+\t\t\treceiverType != null &&\r", "+\t\t\treceiverType.isValidBinding() &&\r", "+\t\t\tselector != null &&\r", "+\t\t\tselector.length > 0) {\r", "+\t\t\t\t\r", "+\t\t\tMethodBinding closestMethod = null;\r", "+\t\t\tif(binding != null) {\r", "+\t\t\t\tclosestMethod = ((ProblemMethodBinding)binding).closestMatch;\r", "+\t\t\t} else {\r", "+\t\t\t\tclosestMethod = scope.findMethod((ReferenceBinding)receiverType, selector, new TypeBinding[]{}, this);\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\tif(closestMethod == null) {\r", "+\t\t\t\tthrow new SelectionNodeFound();\r", "+\t\t\t} else {\r", "+\t\t\t\tthrow new SelectionNodeFound(closestMethod);\r", "+\t\t\t}\r", "+\t\t} else if(binding == null ||\r", "+\t\t\t\t\t!(binding.isValidBinding() || \r", "+\t\t\t\t\t\tbinding.problemId() == ProblemReasons.NotVisible\r", "+\t\t\t\t\t\t|| binding.problemId() == ProblemReasons.InheritedNameHidesEnclosingName\r", "+\t\t\t\t\t\t|| binding.problemId() == ProblemReasons.NonStaticReferenceInConstructorInvocation\r", "+\t\t\t\t\t\t|| binding.problemId() == ProblemReasons.NonStaticReferenceInStaticContext)) {\r", "-\t\telse\r", "+\t\t} else {\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a3675f4e10a80c3cb00f0891c3eb6a0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "40c99687ccd3cd2f32c7182f6dd3a3815c599017", "commitAfterChange": "2e79ccb3e74d7d6d092288c2beec68b5a73c3ab5", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding getImplicitMethod(char[] selector, TypeBinding[] argumentTypes, InvocationSite invocationSite)", "diff": ["+\t\tboolean foundProblemVisible = false;", "-\t\t\t\t\t\t\t\t\t\tif (foundProblem != null && foundProblem.problemId() != ProblemReasons.NotVisible)", "+\t\t\t\t\t\t\t\t\t\tif (foundProblemVisible) {", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (foundProblem == null || (foundProblem.problemId() == ProblemReasons.NotVisible && methodBinding.problemId() == ProblemReasons.NotFound))", "+\t\t\t\t\t\t\t\t\tif (foundProblem == null) {", "+\t\t\t\t\t\t\t\t\t} ", "+\t\t\t\t\t\t\t\t\tif (! foundProblemVisible && methodBinding.problemId() == ProblemReasons.NotFound) {", "+\t\t\t\t\t\t\t\t\t\tMethodBinding closestMatch = ((ProblemMethodBinding) methodBinding).closestMatch;", "+\t\t\t\t\t\t\t\t\t\tif (closestMatch != null && closestMatch.canBeSeenBy(receiverType, invocationSite, this)) {", "+\t\t\t\t\t\t\t\t\t\t\tfoundProblem = methodBinding; // hold onto the first not visible/found error and keep the second not found if first is not visible", "+\t\t\t\t\t\t\t\t\t\t\tfoundProblemVisible = true;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\tif (foundProblem.problemId() == ProblemReasons.NotFound) {", "-\t\t\t\t\tMethodBinding closestMatch = ((ProblemMethodBinding) foundProblem).closestMatch;", "-\t\t\t\t\tif (closestMatch != null && closestMatch.canBeSeenBy(invocationSite, this))", "-\t\t\t\t\t\treturn foundProblem; // visible method selectors take precedence", "+\t\t\t\tif (foundProblem.problemId() == ProblemReasons.NotFound && foundProblemVisible) {", "+\t\t\t\t\treturn foundProblem; // visible method selectors take precedence"]}], "num": 29377}
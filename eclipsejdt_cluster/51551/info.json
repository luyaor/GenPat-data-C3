{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5987ee85320289dbac8e2d6e44a8efd0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1689c796b1bce0bc8451b2f734b4d42c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "56593bf638b3153ebd87da51dc4f0f1bb7066395", "commitAfterChange": "607ff419d62fc0f91055d1c2d16685459d9fa667", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " private SimpleLookupTable getIndexStates()", "signatureAfterChange": " private SimpleLookupTable getIndexStates()", "diff": ["-\t\tfor (int i = 0, l = names.length; i < l; i++) {", "-\t\t\tchar[] name = names[i];", "-\t\t\tif (name.length > 0)", "-\t\t\t\tthis.indexStates.put(new String(name), SAVED_STATE);", "+\t\tif (names.length > 0) {", "+\t\t\t// check to see if workspace has moved, if so then do not trust saved indexes", "+\t\t\tFile indexesDirectory = new File(getJavaPluginWorkingLocation().toOSString());", "+\t\t\tchar[] dirName = indexesDirectory.getAbsolutePath().toCharArray();", "+\t\t\tint delimiterPos = dirName.length;", "+\t\t\tif (CharOperation.match(names[0], 0, delimiterPos, dirName, 0, delimiterPos, true)) {", "+\t\t\t\tfor (int i = 0, l = names.length; i < l; i++) {", "+\t\t\t\t\tchar[] name = names[i];", "+\t\t\t\t\tif (name.length > 0)", "+\t\t\t\t\t\tthis.indexStates.put(new String(name), SAVED_STATE);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tsavedIndexNamesFile.delete(); // forget saved indexes & delete each index file", "+\t\t\t\tFile[] files = indexesDirectory.listFiles();", "+\t\t\t\tif (files != null) {", "+\t\t\t\t\tfor (int i = 0, l = files.length; i < l; i++) {", "+\t\t\t\t\t\tString fileName = files[i].getAbsolutePath();", "+\t\t\t\t\t\tif (fileName.toLowerCase().endsWith(\".index\")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\tif (VERBOSE)", "+\t\t\t\t\t\t\t\tUtil.verbose(\"Deleting index file \" + files[i]); //$NON-NLS-1$", "+\t\t\t\t\t\t\tfiles[i].delete();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83a2f6a83a0db8cbfe0b1ee951d7d8d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "101210a46f852f04e96181a230ef482b37a8c3d9", "commitAfterChange": "ac0d9cdc25a9d5f3107efd53c6caa6764f8731c8", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void removeSourceFolderFromIndex(JavaProject javaProject, IPath sourceFolder)", "signatureAfterChange": " public void removeSourceFolderFromIndex(JavaProject javaProject, IPath sourceFolder)", "diff": ["-\tthis.request(new RemoveFolderFromIndex(sourceFolder.toString(), javaProject.getProject().getFullPath(), this));", "+\t\ttry {", "+\t\t\t/* ensure no concurrent write access to index */", "+\t\t\tIPath indexPath = javaProject.getPath();", "+\t\t\tIIndex index = this.getIndex(indexPath, true, /*reuse index file*/ false /*create if none*/);", "+\t\t\tif (index == null) return;", "+\t\t\tReadWriteMonitor monitor = this.getMonitorFor(index);", "+\t\t\tif (monitor == null) return; // index got deleted since acquired", "+", "+\t\t\ttry {", "+\t\t\t\tmonitor.enterRead(); // ask permission to read", "+\t\t\t\tIQueryResult[] results = index.queryInDocumentNames(sourceFolder.toString());", "+\t\t\t\t// all file names belonging to the folder or its subfolders", "+\t\t\t\tfor (int i = 0, max = results == null ? 0 : results.length; i < max; i++)", "+\t\t\t\t\t// TODO: Should not remove excluded resources", "+\t\t\t\t\tthis.remove(results[i].getPath(), indexPath); // write lock will be acquired by the remove operation", "+\t\t\t} finally {", "+\t\t\t\tmonitor.exitRead(); // free read lock", "+\t\t\t}", "+\t\t} catch (IOException e) {", "+\t\t\tif (JobManager.VERBOSE) {", "+\t\t\t\tJobManager.verbose(\"-> failed to remove \" + sourceFolder.toString() + \" from index because of the following exception:\"); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\te.printStackTrace();", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a55be56a9c0569428ebd9e8d8731dda5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException", "signatureAfterChange": " public void findIndexMatches(IndexInput input, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException", "diff": ["-public void findIndexMatches(IndexInput input, IIndexSearchRequestor requestor, IProgressMonitor progressMonitor, IJavaSearchScope scope) throws IOException {", "+public void findIndexMatches(IndexInput input, IndexQueryRequestor requestor, SearchParticipant participant, IJavaSearchScope scope, IProgressMonitor progressMonitor) throws IOException {", "-\t\tsuper.findIndexMatches(input, requestor, progressMonitor, scope);\t", "+\t\tsuper.findIndexMatches(input, requestor, participant, scope, progressMonitor);\t", "-\tchar[] simpleName = this.superSimpleName;", "-\tint length = simpleName == null ? 0 : simpleName.length;", "+\tint length = this.superSimpleName == null ? 0 : this.superSimpleName.length;", "-\t\t\t\tif (word[j + slash] != simpleName[j]) continue nextEntry;", "+\t\t\t\tif (word[j + slash] != this.superSimpleName[j]) continue nextEntry;", "-\t\tdecodeIndexEntry(entry);", "-\t\tfeedIndexRequestor(requestor, entry.getFileReferences(), input, scope);", "+\t\tchar[] word = entry.getWord();", "+\t\tchar[] indexKey = CharOperation.subarray(word, SUPER_REF.length, word.length);", "+\t\tSearchPattern record = getIndexRecord();", "+\t\trecord.decodeIndexKey(indexKey);", "+\t\tif (isMatchingIndexRecord()) {", "+\t\t\tint[] references = entry.getFileReferences();", "+\t\t\tfor (int iReference = 0, refererencesLength = references.length; iReference < refererencesLength; iReference++) {", "+\t\t\t\tString documentPath = IndexedFile.convertPath( input.getIndexedFile(references[iReference]).getPath());", "+\t\t\t\tif (scope.encloses(documentPath)) {", "+\t\t\t\t\tif (!requestor.acceptIndexMatch(documentPath, record, participant)) ", "+\t\t\t\t\t\tthrow new OperationCanceledException();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t}"]}], "num": 51551}
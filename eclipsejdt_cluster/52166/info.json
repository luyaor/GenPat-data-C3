{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "97eabb1b00575f8c90de82f8f675221a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dc2e700da40aa0ea1099448f2c54205", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "090fe346c72e2854da50fe3a145f46de3d4f7de0", "commitAfterChange": "a0b059290bf7b15573bfcb14661207df6f99dd45", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType, \t\tExpression expression)", "diff": ["-", "-\t\t\tTypeBinding match = ((ReferenceBinding)expressionType).findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "-\t\t\tif (match != null) {", "-\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, false);", "-\t\t\t}", "-\t\t\t", "-\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)expressionType.erasure());", "-\t\t\tif (match != null) {", "-\t\t\t\ttagAsNeedCheckCast();", "-\t\t\t\treturn checkUnsafeCast(scope, castType, expressionType, match, true);", "-\t\t\t}  else {", "-\t\t\t\tMethodBinding[] castTypeMethods = getAllInheritedMethods((ReferenceBinding) castType);", "-\t\t\t\tMethodBinding[] expressionTypeMethods =", "-\t\t\t\t\tgetAllInheritedMethods((ReferenceBinding) expressionType);", "-\t\t\t\tint exprMethodsLength = expressionTypeMethods.length;", "-\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=80745", "-\t\t\t\tMethodVerifier verifier = env.methodVerifier();", "-\t\t\t\tfor (int i = 0, castMethodsLength = castTypeMethods.length; i < castMethodsLength; i++) {", "-\t\t\t\t\tfor (int j = 0; j < exprMethodsLength; j++)", "-\t\t\t\t\t\tif (verifier.doReturnTypesCollide(castTypeMethods[i], expressionTypeMethods[j]))", "-\t\t\t\t\t\t\treturn false;", "+\t\t\t\tReferenceBinding interfaceType = (ReferenceBinding) expressionType;", "+\t\t\t\tTypeBinding match = interfaceType.findSuperTypeErasingTo((ReferenceBinding)castType.erasure());", "+\t\t\t\tif (match != null) {", "+\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, false);", "-\t\t\t}", "+\t\t\t\t", "+\t\t\t\ttagAsNeedCheckCast();", "+\t\t\t\tmatch = ((ReferenceBinding)castType).findSuperTypeErasingTo((ReferenceBinding)interfaceType.erasure());", "+\t\t\t\tif (match != null) {", "+\t\t\t\t\treturn checkUnsafeCast(scope, castType, interfaceType, match, true);", "+\t\t\t\t}", "+\t\t\t\tif (use15specifics) {", "+\t\t\t\t\t// a subclass may implement the interface ==> no check at compile time", "+\t\t\t\t\treturn true;", "+\t\t\t\t}", "+\t\t\t\t// pre1.5 semantics - no covariance allowed (even if 1.5 compliant, but 1.4 source)", "+\t\t\t\tMethodBinding[] castTypeMethods = getAllInheritedMethods((ReferenceBinding) castType);", "+\t\t\t\tMethodBinding[] expressionTypeMethods = getAllInheritedMethods((ReferenceBinding) expressionType);", "+\t\t\t\tint exprMethodsLength = expressionTypeMethods.length;", "+\t\t\t\tfor (int i = 0, castMethodsLength = castTypeMethods.length; i < castMethodsLength; i++)", "+\t\t\t\t\tfor (int j = 0; j < exprMethodsLength; j++) {", "+\t\t\t\t\t\tif ((castTypeMethods[i].returnType != expressionTypeMethods[j].returnType)", "+\t\t\t\t\t\t\t\t&& (CharOperation.equals(castTypeMethods[i].selector, expressionTypeMethods[j].selector))", "+\t\t\t\t\t\t\t\t&& castTypeMethods[i].areParametersEqual(expressionTypeMethods[j])) {", "+\t\t\t\t\t\t\treturn false;", "+", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47f1555624e73b86bef7d38fc993fa5b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnQualifiedAllocationExpression.java", "commitBeforeChange": "67da1da15e9afbcd33679f07597c706e7915cf4a", "commitAfterChange": "027fccb2c17e0f0d2b28705c6704af10fc8ce0aa", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tTypeBinding typeBinding = null;", "+\tif (arguments != null) {", "+\t\tint argsLength = arguments.length;", "+\t\tfor (int a = argsLength; --a >= 0;)", "+\t\t\targuments[a].resolveType(scope);", "+\t}", "+\t", "-\t\ttypeBinding = ((SingleTypeReference) type).resolveTypeEnclosing(scope, (ReferenceBinding) enclosingType);", "-\t\tif (!(typeBinding instanceof ReferenceBinding))", "+\t\tthis.expressionType = ((SingleTypeReference) type).resolveTypeEnclosing(scope, (ReferenceBinding) enclosingType);", "+\t\tif (!(this.expressionType instanceof ReferenceBinding))", "-\t\tif (typeBinding.isInterface()) // handle the anonymous class definition case", "-\t\t\ttypeBinding = scope.getJavaLangObject();", "+\t\tif (this.expressionType.isInterface()) // handle the anonymous class definition case", "+\t\t\tthis.expressionType = scope.getJavaLangObject();", "-\t\ttypeBinding = type.resolveType(scope);", "-\t\tif (!(typeBinding instanceof ReferenceBinding))", "+\t\tthis.expressionType = type.resolveType(scope);", "+\t\tif (!(this.expressionType instanceof ReferenceBinding))", "-\tthrow new CompletionNodeFound(this, typeBinding, scope);", "+\tthrow new CompletionNodeFound(this, this.expressionType, scope);"]}], "num": 52166}
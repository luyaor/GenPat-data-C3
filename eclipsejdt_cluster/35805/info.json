{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d28bf5dce7bde975e642d34ec592b68", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21c4c0813efcd4806aa3edc3f695d979", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/SourceIndexer.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " protected void indexFile(IDocument document)", "signatureAfterChange": " \t \tpublic void indexDocument()", "diff": ["-}", "-protected void indexFile(IDocument document) /* throws IOException */ {", "-", "-\t// Add the name of the file to the index", "-\toutput.addDocument(document);", "-", "-\t// Create a new Parser", "-\tSourceIndexerRequestor requestor = new SourceIndexerRequestor(this, document);", "-\tSourceElementParser parser = new SourceElementParser(", "-\t\trequestor, ", "-\t\tproblemFactory, ", "-\t\tnew CompilerOptions(JavaCore.create(this.resourceFile.getProject()).getOptions(true)), ", "-\t\ttrue); // index local declarations", "-", "-\t// Always check javadoc while indexing", "-\tparser.javadocParser.checkJavadoc = true;", "-\t", "-\t// Launch the parser", "-\tchar[] source = null;", "-\tchar[] name = null;", "-\ttry {", "-\t\tsource = document.getCharContent();", "-\t\tname = document.getName().toCharArray();", "-\t} catch(Exception e){", "-\t\t// ignore", "-\tif (source == null || name == null) return; // could not retrieve document info (e.g. resource was discarded)", "-\tCompilationUnit compilationUnit = new CompilationUnit(source, name);", "-\ttry {", "-\t\tparser.parseCompilationUnit(compilationUnit, true/*full parse*/);", "-\t} catch (Exception e) {", "-\t\tif (JobManager.VERBOSE) {", "-\t\t\te.printStackTrace();", "+\t", "+\tpublic void indexDocument() {", "+\t\t// Create a new Parser", "+\t\tSourceIndexerRequestor requestor = new SourceIndexerRequestor(this);", "+\t\tString documentPath = this.document.getPath();", "+\t\tIPath path = new Path(documentPath);", "+\t\tIProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(path.segment(0));", "+\t\tSourceElementParser parser = new SourceElementParser(", "+\t\t\trequestor, ", "+\t\t\tthis.problemFactory, ", "+\t\t\tnew CompilerOptions(JavaCore.create(project).getOptions(true)), ", "+\t\t\ttrue); // index local declarations", "+\t", "+\t\t// Always check javadoc while indexing", "+\t\tparser.javadocParser.checkJavadoc = true;", "+\t\t", "+\t\t// Launch the parser", "+\t\tchar[] source = null;", "+\t\tchar[] name = null;", "+\t\ttry {", "+\t\t\tsource = document.getCharContents();", "+\t\t\tname = documentPath.toCharArray();", "+\t\t} catch(Exception e){", "+\t\t\t// ignore", "+\t\t}", "+\t\tif (source == null || name == null) return; // could not retrieve document info (e.g. resource was discarded)", "+\t\tCompilationUnit compilationUnit = new CompilationUnit(source, name);", "+\t\ttry {", "+\t\t\tparser.parseCompilationUnit(compilationUnit, true/*full parse*/);", "+\t\t} catch (Exception e) {", "+\t\t\tif (JobManager.VERBOSE) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "318ce57592e86f876218814ef9899a5d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/SourceIndexer.java", "commitBeforeChange": "fe024fd7797ce73b0a83969f685073606863b79e", "commitAfterChange": "124641ac651bbea2bd062a9605817d39b473bf0e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void resolveDocument()", "signatureAfterChange": " \t \tpublic void resolveDocument()", "diff": ["-", "-\tpublic void resolveDocument() {", "-\t\tIPath path = new Path(this.document.getPath());", "-\t\tIProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(path.segment(0));", "-\t\tJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "-\t\tJavaProject javaProject = (JavaProject) model.getJavaProject(project);", "-\t\ttry {", "-\t\t\tCancelableNameEnvironment nameEnvironment;", "-\t\t\tnameEnvironment = new CancelableNameEnvironment(javaProject, DefaultWorkingCopyOwner.PRIMARY, null);", "-\t\t\tthis.options = new CompilerOptions(javaProject.getOptions(true));", "-\t\t\tthis.problemReporter =", "-\t\t\t\t\tnew ProblemReporter(", "-\t\t\t\t\t\tDefaultErrorHandlingPolicies.proceedWithAllProblems(),", "-\t\t\t\t\t\tthis.options,", "-\t\t\t\t\t\tnew DefaultProblemFactory());", "-\t\t\tthis.lookupEnvironment = new LookupEnvironment(this, this.options, this.problemReporter, nameEnvironment);", "-\t\t} catch (JavaModelException e) {", "-\t\t\tif (JobManager.VERBOSE) {", "-\t\t\t\te.printStackTrace();", "-\t\t\t}", "-\t\t\tthis.cu = null;", "-\t\t\treturn;", "-\t\t}", "-\t\tthis.lookupEnvironment.buildTypeBindings(this.cu, null);", "-\t\tthis.lookupEnvironment.completeTypeBindings();", "-\t\tif (this.cu.scope != null) {", "-\t\t\tthis.cu.scope.faultInTypes();", "-\t\t\tthis.cu.resolve();", "+\tpublic void resolveDocument() {", "+\t\ttry {", "+\t\t\tIPath path = new Path(this.document.getPath());", "+\t\t\tIProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(path.segment(0));", "+\t\t\tJavaModel model = JavaModelManager.getJavaModelManager().getJavaModel();", "+\t\t\tJavaProject javaProject = (JavaProject) model.getJavaProject(project);", "+", "+\t\t\tthis.options = new CompilerOptions(javaProject.getOptions(true));", "+\t\t\tProblemReporter problemReporter =", "+\t\t\t\t\tnew ProblemReporter(", "+\t\t\t\t\t\t\tDefaultErrorHandlingPolicies.proceedWithAllProblems(),", "+\t\t\t\t\t\t\tthis.options,", "+\t\t\t\t\t\t\tnew DefaultProblemFactory());", "+", "+\t\t\t// Re-parse using normal parser, IndexingParser swallows several nodes, see comment above class.", "+\t\t\tthis.basicParser = new Parser(problemReporter, false);", "+\t\t\tthis.cud = this.basicParser.parse(this.compilationUnit, new CompilationResult(this.compilationUnit, 0, 0, this.options.maxProblemsPerUnit));", "+", "+\t\t\t// Use a non model name environment to avoid locks, monitors and such.", "+\t\t\tINameEnvironment nameEnvironment = new JavaSearchNameEnvironment(javaProject, JavaModelManager.getJavaModelManager().getWorkingCopies(DefaultWorkingCopyOwner.PRIMARY, true/*add primary WCs*/));", "+\t\t\tthis.lookupEnvironment = new LookupEnvironment(this, this.options, problemReporter, nameEnvironment);", "+", "+\t\t\tthis.lookupEnvironment.buildTypeBindings(this.cud, null);", "+\t\t\tthis.lookupEnvironment.completeTypeBindings();", "+\t\t\tthis.cud.scope.faultInTypes();", "+\t\t\tthis.cud.resolve();", "+\t\t} catch (Exception e) {", "+\t\t\tif (JobManager.VERBOSE) {", "+\t\t\t\te.printStackTrace();", "+\t\t\t}"]}], "num": 35805}
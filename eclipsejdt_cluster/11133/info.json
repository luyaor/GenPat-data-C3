{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f52d4edf33c569cc4d47ccd7ab97fb9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bfd784498e10423f8f1739baebe518c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "3388256fa80bf40daffa9f485d2674986c875b82", "commitAfterChange": "7a73f29da5ea73cce41fc54b0fc3ad302149f476", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic ASTNode convert(boolean isInterface, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "signatureAfterChange": "  \tpublic ASTNode convert(boolean isInterface, org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration methodDeclaration)", "diff": ["-\t\t\tName thrownException;", "-\t\t\tint i = 0;", "-\t\t\tdo {", "-\t\t\t\tthrownException = convert(thrownExceptions[i++]);", "-\t\t\t\tmethodDecl.thrownExceptions().add(thrownException);", "-\t\t\t} while (i < thrownExceptionsLength);", "-\t\t\tmethodHeaderEnd = thrownException.getStartPosition() + thrownException.getLength();", "+\t\t\tif (this.ast.apiLevel() < AST.JLS8) {", "+\t\t\t\tName thrownException;", "+\t\t\t\tint i = 0;", "+\t\t\t\tdo {", "+\t\t\t\t\tthrownException = convert(thrownExceptions[i++]);", "+\t\t\t\t\tmethodDecl.thrownExceptions().add(thrownException);", "+\t\t\t\t} while (i < thrownExceptionsLength);", "+\t\t\t\tmethodHeaderEnd = thrownException.getStartPosition() + thrownException.getLength();\t\t\t\t", "+\t\t\t} else {", "+\t\t\t\tType thrownExceptionType;", "+\t\t\t\tint i = 0;", "+\t\t\t\tdo {", "+\t\t\t\t\tthrownExceptionType = convertType(thrownExceptions[i++]);", "+\t\t\t\t\tmethodDecl.thrownExceptionTypes().add(thrownExceptionType);", "+\t\t\t\t} while (i < thrownExceptionsLength);", "+\t\t\t\tmethodHeaderEnd = thrownExceptionType.getStartPosition() + thrownExceptionType.getLength();\t\t\t\t", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a26716737f15caba37acf82f8a2ac19c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java", "commitBeforeChange": "b42e8d4e3737175b925c20ff2d83cccd857d4944", "commitAfterChange": "b3031b3455034eac76b444fd20cbebeea6a2f5ff", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic boolean visit(ArrayType node)", "signatureAfterChange": " \tpublic boolean visit(ArrayType node)", "diff": ["-\t\tnode.getComponentType().accept(this);", "-\t\tvisitTypeAnnotations(node);", "-\t\tthis.buffer.append(\"[]\");//$NON-NLS-1$", "+\t\tif (node.getAST().apiLevel() < AST.JLS8) {", "+\t\t\tvisitComponentType(node);", "+\t\t\tthis.buffer.append(\"[]\");//$NON-NLS-1$", "+\t\t} else {", "+\t\t\tnode.getElementType().accept(this);", "+\t\t\tList dimensions = node.dimensions();", "+\t\t\tfor (int i = 0; i < dimensions.size() ; i++) {", "+\t\t\t\tExtraDimension aDimension = (ExtraDimension) dimensions.get(i);", "+\t\t\t\taDimension.accept(this);", "+\t\t\t}", "+\t\t}"]}], "num": 11133}
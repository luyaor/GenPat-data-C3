{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51050b334e3ef4decea0d51b77ee1d01", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18bd008e102ae0acdf3fc1c37ac8838a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "9a76fb8f9434ae4b71dc267e686b050759ff3536", "commitAfterChange": "e5d54da7cf77d6614acfbbcede23df9b9dad68f9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " \tpublic void configure(String[] argv) throws InvalidInputException", "diff": ["+\t\t\t\toptions.put(", "+\t\t\t\t\tCompilerOptions.OPTION_TaskTags,", "+\t\t\t\t\t\"\"); //$NON-NLS-1$", "-\t\t\t\t\t} else if (token.equals(\"todo\")) { //$NON-NLS-1$", "+\t\t\t\t\t} else if (token.startsWith(\"tasks\")) { //$NON-NLS-1$", "+\t\t\t\t\t\tString taskTags = \"\"; //$NON-NLS-1$", "+\t\t\t\t\t\tint start = token.indexOf('(');", "+\t\t\t\t\t\tint end = token.indexOf(')');", "+\t\t\t\t\t\tif (start >= 0 && end >= 0 && start < end){", "+\t\t\t\t\t\t\ttaskTags = token.substring(start+1, end).trim();", "+\t\t\t\t\t\t\ttaskTags = taskTags.replace('|',',');", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (taskTags.length() == 0){", "+\t\t\t\t\t\t\tthrow new InvalidInputException(Main.bind(\"configure.invalidTaskTag\", token)); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_ReportToDo,", "-\t\t\t\t\t\t\tCompilerOptions.WARNING);", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_TaskTags,", "+\t\t\t\t\t\t\ttaskTags);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f19a07cd4116e046eb4e2fddd4f4c062", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "616a41b14ead174db92c630ec6ed7f1d666a9b67", "commitAfterChange": "645b7eff21d5db2b90380f1d4478beb9fa33f107", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": " public void configure(String[] argv)", "signatureAfterChange": " public void configure(String[] argv)", "diff": ["-\t\t\t\tif (currentArg.equals(\"-proceedOnError\")) { //$NON-NLS-1$", "+\t\t\t\tif (currentArg.startsWith(\"-proceedOnError\")) { //$NON-NLS-1$", "+\t\t\t\t\tint length = currentArg.length();", "+\t\t\t\t\tif (length > 15) {", "+\t\t\t\t\t\tif (currentArg.equals(\"-proceedOnError:Fatal\")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_FatalOptionalError, CompilerOptions.ENABLED);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthrow new IllegalArgumentException(", "+\t\t\t\t\t\t\t\t\tthis.bind(\"configure.invalidWarningConfiguration\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_FatalOptionalError, CompilerOptions.DISABLED);", "+\t\t\t\t\t}"]}], "num": 43199}
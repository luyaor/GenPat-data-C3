{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7b25729610b8fc78e73208eed80b49ab", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e34077af9ecd6538d6a5cab9256b09f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingOpenable.java", "commitBeforeChange": "e6099120ee9021152f84e60105066d4964c2db21", "commitAfterChange": "82631a98caad8b28e9cefb217339d51e64ef47f9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r private void locateMatchesInCompilationUnit(char[] source) throws CoreException", "signatureAfterChange": "\r private void locateMatchesInCompilationUnit(char[] source) throws CoreException", "diff": ["-\t\tthis.locator.parser.matchSet = this.matchSet;\r", "-\t\tthis.locator.parser.scanner.setSourceBuffer(source);\r", "-\t\tthis.locator.parser.parseBodies(this.parsedUnit);\r", "-\t\t// report matches that don't need resolve\r", "-\t\tthis.matchSet.cuHasBeenResolved = false;\r", "-\t\tthis.matchSet.reportMatching(parsedUnit);\r", "-\t\t\r", "-\t\t// resolve if needed\r", "-\t\tif (this.matchSet.needsResolve()) {\r", "-\t\t\tif (this.parsedUnit.types != null) {\r", "-\t\t\t\tif (this.shouldResolve) {\r", "-\t\t\t\t\ttry {\r", "-\t\t\t\t\t\tif (this.parsedUnit.scope != null) {\r", "-\t\t\t\t\t\t\tthis.parsedUnit.scope.faultInTypes();\r", "-\t\t\t\t\t\t\tthis.parsedUnit.resolve();\r", "+\t\ttry {\r", "+\t\t\tthis.locator.parser.matchSet = this.matchSet;\r", "+\t\t\tthis.locator.parser.scanner.setSourceBuffer(source);\r", "+\t\t\tthis.locator.parser.parseBodies(this.parsedUnit);\r", "+\t\t\t// report matches that don't need resolve\r", "+\t\t\tthis.matchSet.cuHasBeenResolved = false;\r", "+\t\t\tthis.matchSet.reportMatching(parsedUnit);\r", "+\t\t\t\r", "+\t\t\t// resolve if needed\r", "+\t\t\tif (this.matchSet.needsResolve()) {\r", "+\t\t\t\tif (this.parsedUnit.types != null) {\r", "+\t\t\t\t\tif (this.shouldResolve) {\r", "+\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\tif (this.parsedUnit.scope != null) {\r", "+\t\t\t\t\t\t\t\tthis.parsedUnit.scope.faultInTypes();\r", "+\t\t\t\t\t\t\t\tthis.parsedUnit.resolve();\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t// report matches that needed resolve\r", "+\t\t\t\t\t\t\tthis.matchSet.cuHasBeenResolved = true;\r", "+\t\t\t\t\t\t\tthis.matchSet.reportMatching(this.parsedUnit);\r", "+\t\t\t\t\t\t} catch (AbortCompilation e) {\r", "+\t\t\t\t\t\t\t// could not resolve: report innacurate matches\r", "+\t\t\t\t\t\t\tthis.matchSet.cuHasBeenResolved = true;\r", "+\t\t\t\t\t\t\tthis.matchSet.reportMatching(this.parsedUnit);\r", "+\t\t\t\t\t\t\tif (!(e instanceof AbortCompilationUnit)) {\r", "+\t\t\t\t\t\t\t\t// problem with class path\r", "+\t\t\t\t\t\t\t\tthrow e;\r", "+\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t// report matches that needed resolve\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t// problem ocured while completing the bindings for the base classes\r", "+\t\t\t\t\t\t// -> report innacurate matches\r", "-\t\t\t\t\t} catch (AbortCompilation e) {\r", "-\t\t\t\t\t\t// could not resolve: report innacurate matches\r", "-\t\t\t\t\t\tthis.matchSet.cuHasBeenResolved = true;\r", "-\t\t\t\t\t\tthis.matchSet.reportMatching(this.parsedUnit);\r", "-\t\t\t\t\t\tif (!(e instanceof AbortCompilationUnit)) {\r", "-\t\t\t\t\t\t\t// problem with class path\r", "-\t\t\t\t\t\t\tthrow e;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\t// problem ocured while completing the bindings for the base classes\r", "-\t\t\t\t\t// -> report innacurate matches\r", "-\t\t\t\t\tthis.matchSet.cuHasBeenResolved = true;\r", "-\t\t\t\t\tthis.matchSet.reportMatching(this.parsedUnit);\r", "+\t\t} finally {\r", "+\t\t\tthis.locator.parser.matchSet = null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76e8a8819c6b8ae07f20621c0702f6d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompilationUnitTests.java", "commitBeforeChange": "eebfb231fd7e6ee98747d5335cf2b140503ced34", "commitAfterChange": "a3c940c9ba4fb947ed601c181e38c98afc79ec41", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void testDeprecatedFlag10() throws CoreException", "signatureAfterChange": " public void testDeprecatedFlag10() throws CoreException", "diff": ["-\tcreateFolder(\"/P/src/p2\");", "-", "-\tcreateFile(", "-\t\t\t\"/P/src/p2/package-info.java\",", "-\t\t\t\"@java.lang.Deprecated package p2;\\n\"", "-\t\t);", "+\ttry {", "+\t\tcreateFolder(\"/P/src/p2\");", "-\t// workaround for missing type in jclMin:", "-\tcreateFolder(\"/P/src/java/lang\");", "-\tcreateFile(", "-\t\t\t\"/P/src/java/lang/Deprecated.java\",", "-\t\t\t\"package java.lang;\\n\" +", "-\t\t\t\"@Retention(RetentionPolicy.RUNTIME)\\n\" + ", "-\t\t\t\"public @interface Deprecated {\\n\" + ", "-\t\t\t\"}\\n\"", "-\t\t);", "-", "-\tcreateFile(\"/P/src/p2/C.java\", ", "-\t\t\t\"package p2;\\n\" +", "-\t\t\t\"public class C {}\\n\");", "-", "-\tcreateFile(\"/P/src/p/D.java\", ", "-\t\t\t\"package p;\\n\" +", "-\t\t\t\"public class D extends p2.C {}\\n\");", "-\tICompilationUnit cuD = getCompilationUnit(\"/P/src/p/D.java\");", "+\t\tcreateFile(", "+\t\t\t\t\"/P/src/p2/package-info.java\",", "+\t\t\t\t\"@java.lang.Deprecated package p2;\\n\"", "+\t\t\t);", "+\t\t", "+\t\t// workaround for missing type in jclMin:", "+\t\tcreateFolder(\"/P/src/java/lang\");", "+\t\tcreateFile(", "+\t\t\t\t\"/P/src/java/lang/Deprecated.java\",", "+\t\t\t\t\"package java.lang;\\n\" +", "+\t\t\t\t\"@Retention(RetentionPolicy.RUNTIME)\\n\" + ", "+\t\t\t\t\"public @interface Deprecated {\\n\" + ", "+\t\t\t\t\"}\\n\"", "+\t\t\t);", "-\tASTParser parser = ASTParser.newParser(AST.JLS3);", "-\tparser.setProject(this.testProject);", "-\tparser.setSource(cuD);", "-\tparser.setResolveBindings(true);", "-\torg.eclipse.jdt.core.dom.CompilationUnit cuAST = (org.eclipse.jdt.core.dom.CompilationUnit) parser.createAST(null);", "-\tIProblem[] problems = cuAST.getProblems();", "-\tassertEquals(\"Should have 1 problem\", 1, problems.length);", "-\tassertEquals(\"Should have a deprecation warning\", \"The type C is deprecated\", problems[0].getMessage());", "+\t\tcreateFile(\"/P/src/p2/C.java\", ", "+\t\t\t\t\"package p2;\\n\" +", "+\t\t\t\t\"public class C {}\\n\");", "+\t", "+\t\tcreateFile(\"/P/src/p/D.java\", ", "+\t\t\t\t\"package p;\\n\" +", "+\t\t\t\t\"public class D extends p2.C {}\\n\");", "+\t\tICompilationUnit cuD = getCompilationUnit(\"/P/src/p/D.java\");", "+\t\t", "+\t\tASTParser parser = ASTParser.newParser(AST.JLS3);", "+\t\tparser.setProject(this.testProject);", "+\t\tparser.setSource(cuD);", "+\t\tparser.setResolveBindings(true);", "+\t\torg.eclipse.jdt.core.dom.CompilationUnit cuAST = (org.eclipse.jdt.core.dom.CompilationUnit) parser.createAST(null);", "+\t\tIProblem[] problems = cuAST.getProblems();", "+\t\tassertEquals(\"Should have 1 problem\", 1, problems.length);", "+\t\tassertEquals(\"Should have a deprecation warning\", \"The type C is deprecated\", problems[0].getMessage());", "+\t} finally {", "+\t\tdeleteFile(\"/P/src/p/D.java\");", "+\t\tdeleteFolder(\"/P/src/p2\");", "+\t\tdeleteFolder(\"/P/src/java/lang\");", "+\t}", "+}"]}], "num": 30513}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "026f09456776421cd2e8599c4134fe15", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7dec92124ef24a9fb931fc6369f421a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CommitWorkingCopyOperation.java", "commitBeforeChange": "b12492ad0eb83de9816def47b0f6dea2ec7ff67f", "commitAfterChange": "0deabbafa4ad0926b565767fe8d2a589d68558ed", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["- */", "-protected void executeOperation() throws JavaModelException {", "-\ttry {", "-\t\tbeginTask(Util.bind(\"workingCopy.commit\"), 2); //$NON-NLS-1$", "-\t\tWorkingCopy copy = (WorkingCopy)getCompilationUnit();", "-\t\tICompilationUnit original = (ICompilationUnit) copy.getOriginalElement();", "-\t", "-\t\t", "-\t\t// creates the delta builder (this remembers the content of the cu)\t", "-\t\tif (!original.isOpen()) {", "-\t\t\t// force opening so that the delta builder can get the old info", "-\t\t\toriginal.open(null);", "-\t\t}", "-\t\tJavaElementDeltaBuilder deltaBuilder = new JavaElementDeltaBuilder(original);", "-\t", "-\t\t// save the cu", "-\t\tIBuffer originalBuffer = original.getBuffer();", "-\t\tif (originalBuffer == null) return;", "-\t\tchar[] originalContents = originalBuffer.getCharacters();", "-\t\tboolean hasSaved = false;", "-\t\ttry {", "-\t\t\tIBuffer copyBuffer = copy.getBuffer();", "-\t\t\tif (copyBuffer == null) return;", "-\t\t\toriginalBuffer.setContents(copyBuffer.getCharacters());", "-\t\t\toriginal.save(fMonitor, fForce);", "-\t\t\tthis.hasModifiedResource = true;", "-\t\t\thasSaved = true;", "-\t\t} finally {", "-\t\t\tif (!hasSaved){", "-\t\t\t\t// restore original buffer contents since something went wrong", "-\t\t\t\toriginalBuffer.setContents(originalContents);", "-\t\t// make sure working copy is in sync", "-\t\tcopy.updateTimeStamp((CompilationUnit)original);", "-\t\tcopy.makeConsistent(this);", "-\t\tworked(1);", "-\t", "-\t\t// build the deltas", "-\t\tdeltaBuilder.buildDeltas();", "-\t", "-\t\t// add the deltas to the list of deltas created during this operation", "-\t\tif (deltaBuilder.delta != null) {", "-\t\t\taddDelta(deltaBuilder.delta);", "+\t */", "+\tprotected void executeOperation() throws JavaModelException {", "+\t\ttry {", "+\t\t\tbeginTask(Util.bind(\"workingCopy.commit\"), 2); //$NON-NLS-1$", "+\t\t\tWorkingCopy copy = (WorkingCopy)getCompilationUnit();", "+\t\t\tICompilationUnit original = (ICompilationUnit) copy.getOriginalElement();", "+\t\t", "+\t\t\t", "+\t\t\t// creates the delta builder (this remembers the content of the cu)\t", "+\t\t\tif (!original.isOpen()) {", "+\t\t\t\t// force opening so that the delta builder can get the old info", "+\t\t\t\toriginal.open(null);", "+\t\t\t}", "+\t\t\tJavaElementDeltaBuilder deltaBuilder = new JavaElementDeltaBuilder(original);", "+\t\t", "+\t\t\t// save the cu", "+\t\t\tIBuffer originalBuffer = original.getBuffer();", "+\t\t\tif (originalBuffer == null) return;", "+\t\t\tchar[] originalContents = originalBuffer.getCharacters();", "+\t\t\tboolean hasSaved = false;", "+\t\t\ttry {", "+\t\t\t\tIBuffer copyBuffer = copy.getBuffer();", "+\t\t\t\tif (copyBuffer == null) return;", "+\t\t\t\toriginalBuffer.setContents(copyBuffer.getCharacters());", "+\t\t\t\toriginal.save(fMonitor, fForce);", "+\t\t\t\tthis.setAttribute(\"hasModifiedResource\", \"true\");", "+\t\t\t\thasSaved = true;", "+\t\t\t} finally {", "+\t\t\t\tif (!hasSaved){", "+\t\t\t\t\t// restore original buffer contents since something went wrong", "+\t\t\t\t\toriginalBuffer.setContents(originalContents);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t// make sure working copy is in sync", "+\t\t\tcopy.updateTimeStamp((CompilationUnit)original);", "+\t\t\tcopy.makeConsistent(this);", "+\t\t\tworked(1);", "+\t\t", "+\t\t\t// build the deltas", "+\t\t\tdeltaBuilder.buildDeltas();", "+\t\t", "+\t\t\t// add the deltas to the list of deltas created during this operation", "+\t\t\tif (deltaBuilder.delta != null) {", "+\t\t\t\taddDelta(deltaBuilder.delta);", "+\t\t\t}", "+\t\t\tworked(1);", "+\t\t} finally {\t", "+\t\t\tdone();", "-\t\tworked(1);", "-\t} finally {\t", "-\t\tdone();", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4e432b14300c27fb0c84607d3602ca3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CommitWorkingCopyOperation.java", "commitBeforeChange": "987b84492820c5eeff2230233c35db158228c8e3", "commitAfterChange": "882e850a9e00f22aac1934fd17ac4c0522b9b030", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": " \tprotected void executeOperation() throws JavaModelException", "diff": ["+\t\t\tIFile resource = (IFile)workingCopy.getResource();", "-\t\t", "-\t\t\t// creates the delta builder (this remembers the content of the cu)\t", "-\t\t\tif (!primary.isOpen()) {", "+", "+\t\t\tJavaElementDeltaBuilder deltaBuilder = null;", "+\t\t\t", "+\t\t\tPackageFragmentRoot root = (PackageFragmentRoot)workingCopy.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);", "+\t\t\tif (root.isOnClasspath() && resource.isAccessible()) {", "+\t\t\t", "-\t\t\t\tprimary.open(null);", "-\t\t\t}", "-\t\t\tJavaElementDeltaBuilder deltaBuilder;", "-\t\t\tif (Util.isExcluded(primary)) {", "-\t\t\t\tdeltaBuilder = null;", "-\t\t\t} else {", "-\t\t\t\tdeltaBuilder = new JavaElementDeltaBuilder(primary);", "-\t\t\t}", "-\t\t", "-\t\t\t// save the cu", "-\t\t\tIBuffer primaryBuffer = primary.getBuffer();", "-\t\t\tif (primaryBuffer == null) return;", "-\t\t\tchar[] primaryContents = primaryBuffer.getCharacters();", "-\t\t\tboolean hasSaved = false;", "-\t\t\ttry {", "-\t\t\t\tIBuffer workingCopyBuffer = workingCopy.getBuffer();", "-\t\t\t\tif (workingCopyBuffer == null) return;", "-\t\t\t\tprimaryBuffer.setContents(workingCopyBuffer.getCharacters());", "-\t\t\t\tprimary.save(fMonitor, fForce);", "-\t\t\t\tsetAttribute(HAS_MODIFIED_RESOURCE_ATTR, TRUE); ", "-\t\t\t\thasSaved = true;", "-\t\t\t} finally {", "-\t\t\t\tif (!hasSaved){", "-\t\t\t\t\t// restore original buffer contents since something went wrong", "-\t\t\t\t\tprimaryBuffer.setContents(primaryContents);", "+\t\t\t\tif (!primary.isOpen()) {", "+\t\t\t\t\tprimary.open(null);", "+", "+\t\t\t\t// creates the delta builder (this remembers the content of the cu)\t", "+\t\t\t\tif (!Util.isExcluded(primary)) {", "+\t\t\t\t\tdeltaBuilder = new JavaElementDeltaBuilder(primary);", "+\t\t\t\t}", "+\t\t\t", "+\t\t\t\t// save the cu", "+\t\t\t\tIBuffer primaryBuffer = primary.getBuffer();", "+\t\t\t\tif (primaryBuffer == null) return;", "+\t\t\t\tchar[] primaryContents = primaryBuffer.getCharacters();", "+\t\t\t\tboolean hasSaved = false;", "+\t\t\t\ttry {", "+\t\t\t\t\tIBuffer workingCopyBuffer = workingCopy.getBuffer();", "+\t\t\t\t\tif (workingCopyBuffer == null) return;", "+\t\t\t\t\tprimaryBuffer.setContents(workingCopyBuffer.getCharacters());", "+\t\t\t\t\tprimaryBuffer.save(fMonitor, fForce);", "+\t\t\t\t\tprimary.makeConsistent(this);", "+\t\t\t\t\thasSaved = true;", "+\t\t\t\t} finally {", "+\t\t\t\t\tif (!hasSaved){", "+\t\t\t\t\t\t// restore original buffer contents since something went wrong", "+\t\t\t\t\t\tprimaryBuffer.setContents(primaryContents);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t// working copy on cu outside classpath OR resource doesn't exist yet", "+\t\t\t\tString encoding = workingCopy.getJavaProject().getOption(JavaCore.CORE_ENCODING, true);", "+\t\t\t\tString contents = workingCopy.getSource();", "+\t\t\t\tif (contents == null) return;", "+\t\t\t\ttry {", "+\t\t\t\t\tbyte[] bytes = encoding == null ", "+\t\t\t\t\t\t? contents.getBytes() ", "+\t\t\t\t\t\t: contents.getBytes(encoding);", "+\t\t\t\t\tByteArrayInputStream stream = new ByteArrayInputStream(bytes);", "+\t\t\t\t\tif (resource.exists()) {", "+\t\t\t\t\t\tresource.setContents(", "+\t\t\t\t\t\t\tstream, ", "+\t\t\t\t\t\t\tfForce ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY, ", "+\t\t\t\t\t\t\tnull);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tresource.create(", "+\t\t\t\t\t\t\tstream,", "+\t\t\t\t\t\t\tfForce,", "+\t\t\t\t\t\t\tfMonitor);", "+\t\t\t\t\t}", "+\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\tthrow new JavaModelException(e);", "+\t\t\t\t} catch (UnsupportedEncodingException e) {", "+\t\t\t\t\tthrow new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);", "+\t\t\t\t}", "+\t\t\t\t", "+", "+\t\t\tsetAttribute(HAS_MODIFIED_RESOURCE_ATTR, TRUE); ", "+\t\t\t", "+\t\t\t// build the deltas", "-\t\t\t\t// build the deltas"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee29a6ac3c0615b8231ff411556c9af3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CommitWorkingCopyOperation.java", "commitBeforeChange": "677db12ffe2b33d9711034d339aec7b56ab85d41", "commitAfterChange": "617fadfcdd9d3f85493c65c27088f408a3cd9c9d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r protected void executeOperation() throws JavaModelException", "signatureAfterChange": "\r protected void executeOperation() throws JavaModelException", "diff": ["-\tbeginTask(Util.bind(\"workingCopy.commit\"), 2); //$NON-NLS-1$\r", "-\tWorkingCopy copy = (WorkingCopy)getCompilationUnit();\r", "-\tICompilationUnit original = (ICompilationUnit) copy.getOriginalElement();\r", "-\r", "-\t\r", "-\t// creates the delta builder (this remembers the content of the cu)\t\r", "-\tif (!original.isOpen()) {\r", "-\t\t// force opening so that the delta builder can get the old info\r", "-\t\toriginal.open(null);\r", "-\t}\r", "-\tJavaElementDeltaBuilder deltaBuilder = new JavaElementDeltaBuilder(original);\r", "-\r", "-\t// save the cu\r", "-\tchar[] originalContents = original.getBuffer().getCharacters();\r", "-\tboolean hasSaved = false;\r", "-\t\toriginal.getBuffer().setContents(copy.getBuffer().getCharacters());\r", "-\t\toriginal.save(fMonitor, fForce);\r", "-\t\tthis.hasModifiedResource = true;\r", "-\t\thasSaved = true;\r", "-\t} finally {\r", "-\t\tif (!hasSaved){\r", "-\t\t\t// restore original buffer contents since something went wrong\r", "-\t\t\toriginal.getBuffer().setContents(originalContents);\r", "-\t\t}\r", "-\t}\r", "-\t// make sure working copy is in sync\r", "-\tcopy.updateTimeStamp((CompilationUnit)original);\r", "-\tcopy.makeConsistent(this);\r", "-\tworked(1);\r", "-\r", "-\t// build the deltas\r", "-\tdeltaBuilder.buildDeltas();\r", "-\r", "-\t// add the deltas to the list of deltas created during this operation\r", "-\tif (deltaBuilder.delta != null) {\r", "-\t\taddDelta(deltaBuilder.delta);\r", "-\t}\r", "-\tworked(1);\r", "+\t\tbeginTask(Util.bind(\"workingCopy.commit\"), 2); //$NON-NLS-1$\r", "+\t\tWorkingCopy copy = (WorkingCopy)getCompilationUnit();\r", "+\t\tICompilationUnit original = (ICompilationUnit) copy.getOriginalElement();\r", "-\tdone();\r", "-//\tcheckPackageDeclaration(original);\r", "+\t\t\r", "+\t\t// creates the delta builder (this remembers the content of the cu)\t\r", "+\t\tif (!original.isOpen()) {\r", "+\t\t\t// force opening so that the delta builder can get the old info\r", "+\t\t\toriginal.open(null);\r", "+\t\t}\r", "+\t\tJavaElementDeltaBuilder deltaBuilder = new JavaElementDeltaBuilder(original);\r", "+\t\r", "+\t\t// save the cu\r", "+\t\tIBuffer originalBuffer = original.getBuffer();\r", "+\t\tif (originalBuffer == null) return;\r", "+\t\tchar[] originalContents = originalBuffer.getCharacters();\r", "+\t\tboolean hasSaved = false;\r", "+\t\ttry {\r", "+\t\t\tIBuffer copyBuffer = copy.getBuffer();\r", "+\t\t\tif (copyBuffer == null) return;\r", "+\t\t\toriginalBuffer.setContents(copyBuffer.getCharacters());\r", "+\t\t\toriginal.save(fMonitor, fForce);\r", "+\t\t\tthis.hasModifiedResource = true;\r", "+\t\t\thasSaved = true;\r", "+\t\t} finally {\r", "+\t\t\tif (!hasSaved){\r", "+\t\t\t\t// restore original buffer contents since something went wrong\r", "+\t\t\t\toriginalBuffer.setContents(originalContents);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t// make sure working copy is in sync\r", "+\t\tcopy.updateTimeStamp((CompilationUnit)original);\r", "+\t\tcopy.makeConsistent(this);\r", "+\t\tworked(1);\r", "+\t\r", "+\t\t// build the deltas\r", "+\t\tdeltaBuilder.buildDeltas();\r", "+\t\r", "+\t\t// add the deltas to the list of deltas created during this operation\r", "+\t\tif (deltaBuilder.delta != null) {\r", "+\t\t\taddDelta(deltaBuilder.delta);\r", "+\t\t}\r", "+\t\tworked(1);\r", "+\t} finally {\t\r", "+\t\tdone();\r", "+\t}\r"]}], "num": 49821}
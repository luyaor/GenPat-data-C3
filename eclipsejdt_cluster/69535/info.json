{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a7aae2dd1df9daa0143ca1d30cd75a1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12667a1da3794091409198514cd95bc0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/ProcessorEnvImpl.java", "commitBeforeChange": "2894ba75386697d7bf484434d073fb6ffaf6cec9", "commitAfterChange": "c5ef0e6fd93c55fc5204e498f5b58ab9f95c6ab7", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 25, "signatureBeforeChange": "     private int[] getClassNameRange(final IFile file)", "signatureAfterChange": "  \tprivate CompilationUnit createASTFrom(ICompilationParticipantResult result)", "diff": ["-     */", "-    private int[] getClassNameRange(final IFile file){", "-    \tfinal CompilationUnit astUnit = getAstCompilationUnit(file);", "-    \tint[] startAndEnd = null;", "-    \tif( astUnit != null){", "-    \t\t@SuppressWarnings({\"unchecked\", \"nls\"})", "-    \t\tfinal List<AbstractTypeDeclaration> topTypes = astUnit.types();", "-    \t\tif( topTypes != null && topTypes.size() > 0 ){", "-    \t\t\tfinal AbstractTypeDeclaration topType = topTypes.get(0);", "-    \t\t\tstartAndEnd = new int[3];", "-    \t\t\tfinal SimpleName typename = topType.getName();", "-    \t\t\tif( typename != null ){", "-    \t\t\t\tstartAndEnd[0] = typename.getStartPosition();", "-    \t\t\t\t// ending offsets need to be exclusive.", "-    \t\t\t\tstartAndEnd[1] = startAndEnd[0] + typename.getLength() - 1;", "-    \t\t\t\tstartAndEnd[2] = astUnit.lineNumber(typename.getStartPosition());", "-    \t\t\t}", "-    \t\t\telse{", "-    \t\t\t\tstartAndEnd[0] = topType.getStartPosition();", "-    \t\t\t\t// let case 2 in updateProblemLength() kicks in. ", "-    \t\t\t\tstartAndEnd[1] = -2;", "-    \t\t\t\tstartAndEnd[2] = astUnit.lineNumber(topType.getStartPosition());", "-    \t\t\t}", "-    \t\t}", "-    \t}", "-    \tif( startAndEnd == null )", "-    \t\t// let case 2 in updateProblemLength() kicks in.", "-    \t\treturn new int[]{0, -2, 1};", "-    ", "-    \treturn startAndEnd;", "-    }", "+", "+\tprivate CompilationUnit createASTFrom(ICompilationParticipantResult result){", "+\t\tASTParser p = ASTParser.newParser( AST.JLS3 );", "+\t\tp.setSource(result.getContents());\t\t", "+\t\tp.setResolveBindings( true );", "+\t\tp.setProject( _javaProject );", "+\t\t// TODO: double check that the \".java\" extension is there.", "+\t\tp.setUnitName( result.getFile().getName() );", "+\t\tp.setKind( ASTParser.K_COMPILATION_UNIT );", "+\t\tASTNode node = p.createAST( null );", "+\t\treturn node == null ? EMPTY_AST_UNIT : (CompilationUnit)node;\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bad64025b3790869f0bbc5018761a653", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 27, "signatureBeforeChange": " public MethodBinding[] methods()", "signatureAfterChange": " public MethodBinding[] methods()", "diff": ["+\tif ((modifiers & AccUnresolved) == 0)", "+\t\treturn methods;", "+", "+\tint failed = 0;", "-\t\tif ((modifiers & AccUnresolved) == 0)", "-\t\t\treturn methods;", "-\t", "-\t\tint failed = 0;", "-\t\tfor (int m = 0, max = methods.length; m < max; m++) {", "-\t\t\tif (resolveTypesFor(methods[m]) == null) {", "-\t\t\t\tmethods[m] = null; // unable to resolve parameters", "+\t\tfor (int i = 0, length = methods.length; i < length; i++) {", "+\t\t\tif (resolveTypesFor(methods[i]) == null) {", "+\t\t\t\tmethods[i] = null; // unable to resolve parameters", "-\t", "-\t\tfor (int m = methods.length; --m >= 0;) {", "-\t\t\tMethodBinding method = methods[m];", "+", "+\t\t// find & report collision cases", "+\t\tfor (int i = 0, length = methods.length; i < length; i++) {", "+\t\t\tMethodBinding method = methods[i];", "-\t\t\t\tfor (int i = 0; i < m; i++) {", "-\t\t\t\t\tMethodBinding method2 = methods[i];", "+\t\t\t\tfor (int j = length - 1; j > i; j--) {", "+\t\t\t\t\tMethodBinding method2 = methods[j];", "-\t\t\t\t\t\tif (method.areParametersEqual(method2)) {", "+\t\t\t\t\t\tif (method.areParameterErasuresEqual(method2)) {", "-\t\t\t\t\t\t\t\tmethods[m] = null;", "+\t\t\t\t\t\t\t\tmethods[i] = null;", "-\t\t\t\t\t\t\tscope.problemReporter().duplicateMethodInType(this, method2.sourceMethod());", "-\t\t\t\t\t\t\tmethod2.sourceMethod().binding = null;", "-\t\t\t\t\t\t\tmethods[i] = null;", "+\t\t\t\t\t\t\tAbstractMethodDeclaration method2Decl = method2.sourceMethod();", "+\t\t\t\t\t\t\tscope.problemReporter().duplicateMethodInType(this, method2Decl);", "+\t\t\t\t\t\t\tmethod2Decl.binding = null;", "+\t\t\t\t\t\t\tmethods[j] = null;", "-\t\t\t\t\tmethods[m] = null;", "+\t\t\t\t\tmethods[i] = null;", "-\t", "+\t} finally {", "-\t\t\t\tfor (int m = 0, n = 0, max = methods.length; m < max; m++)", "-\t\t\t\t\tif (methods[m] != null)", "-\t\t\t\t\t\tnewMethods[n++] = methods[m];", "+\t\t\t\tfor (int i = 0, j = 0, length = methods.length; i < length; i++)", "+\t\t\t\t\tif (methods[i] != null)", "+\t\t\t\t\t\tnewMethods[j++] = methods[i];", "-\t", "+", "-\t} catch(AbortCompilation e){", "-\t\t// ensure null methods are removed", "-\t\tMethodBinding[] newMethods = null;", "-\t\tint count = 0;", "-\t\tfor (int i = 0, max = methods.length; i < max; i++){", "-\t\t\tMethodBinding method = methods[i];", "-\t\t\tif (method == null && newMethods == null){", "-\t\t\t\tSystem.arraycopy(methods, 0, newMethods = new MethodBinding[max], 0, i);", "-\t\t\t} else if (newMethods != null && method != null) {", "-\t\t\t\tnewMethods[count++] = method;", "-\t\t\t}", "-\t\t}", "-\t\tif (newMethods != null){", "-\t\t\tSystem.arraycopy(newMethods, 0, methods = new MethodBinding[count], 0, count);", "-\t\t}\t\t\t", "+", "-\t\tthrow e;", "-\tmodifiers ^= AccUnresolved;"]}], "num": 69535}
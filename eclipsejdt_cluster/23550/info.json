{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3299458626f24166a19141bc256e3887", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "942885f3ebe230d3b250df76f09ad183", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "34ee213dde08a7453eec3b2a2a0e314e1d2814a6", "commitAfterChange": "7350d2407528c733101203f94e4081cd258cb05c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void computeConversion(Scope scope, TypeBinding runtimeType, TypeBinding compileTimeType)", "signatureAfterChange": "  \tpublic void computeConversion(Scope scope, TypeBinding runtimeType, TypeBinding compileTimeType)", "diff": ["-\t\t} else {", "-\t\t\tif (compileTimeType != TypeBinding.NULL && compileTimeType.isBaseType()) {", "-\t\t\t\tTypeBinding boxedType = scope.environment().computeBoxingType(runtimeType);", "-\t\t\t\tif (boxedType == runtimeType) // Object o = 12;", "-\t\t\t\t\tboxedType = compileTimeType; ", "-\t\t\t\tthis.implicitConversion = BOXING | (boxedType.id << 4) + compileTimeType.id;", "-\t\t\t\tscope.problemReporter().autoboxing(this, compileTimeType, scope.environment().computeBoxingType(boxedType));", "-\t\t\t\treturn;", "-\t\t\t}", "+\t\t} else if (compileTimeType != TypeBinding.NULL && compileTimeType.isBaseType()) {", "+\t\t\tTypeBinding boxedType = scope.environment().computeBoxingType(runtimeType);", "+\t\t\tif (boxedType == runtimeType) // Object o = 12;", "+\t\t\t\tboxedType = compileTimeType; ", "+\t\t\tthis.implicitConversion = BOXING | (boxedType.id << 4) + compileTimeType.id;", "+\t\t\tscope.problemReporter().autoboxing(this, compileTimeType, scope.environment().computeBoxingType(boxedType));", "+\t\t\treturn;", "+\t\t} else if (this.constant != Constant.NotAConstant && this.constant.typeID() != T_JavaLangString) {", "+\t\t\tthis.implicitConversion = BOXING;", "+\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9e2fb215633641466f40ce4ece0bfcc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "5a0b16973c5f2b4b1beccfae3f83602332ac3f5d", "commitAfterChange": "4ee57f1aa920ef9dfc0c8991087575befcec8304", "methodNumberBeforeChange": 387, "methodNumberAfterChange": 387, "signatureBeforeChange": " public void parse(MethodDeclaration md, CompilationUnitDeclaration unit)", "signatureAfterChange": " public void parse(MethodDeclaration md, CompilationUnitDeclaration unit)", "diff": ["-\t\tSystem.arraycopy(", "-\t\t\tthis.astStack,", "-\t\t\t(this.astPtr -= length) + 1,", "-\t\t\tmd.statements = new Statement[length],", "-\t\t\t0,", "-\t\t\tlength);", "+\t\tif ((md.bits & ASTNode.HasLocalType) == 0 && this.options.ignoreMethodBodies) {", "+\t\t\t// ignore statements", "+\t\t\tthis.astPtr -= length;", "+\t\t} else {", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tthis.astStack,", "+\t\t\t\t(this.astPtr -= length) + 1,", "+\t\t\t\tmd.statements = new Statement[length],", "+\t\t\t\t0,", "+\t\t\t\tlength);", "+\t\t}"]}], "num": 23550}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e51a89f424377c34405f9296224c9dcb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4da11b1c3e0b42d2dec579d8f58a217a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java", "commitBeforeChange": "4e0e44e12d531b0f9a299237d2e668d6176cd234", "commitAfterChange": "2156fedddc9b679afe1f45ef1e9d318ac4df4d9a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate TypeBinding resolveTypeForQualifiedAllocationExpression(BlockScope scope)", "signatureAfterChange": " \t \tprivate TypeBinding resolveTypeForQualifiedAllocationExpression(BlockScope scope)", "diff": ["-\t\tTypeBinding[] argumentTypes = Binding.NO_PARAMETERS;", "+\t\tthis.argumentTypes = Binding.NO_PARAMETERS;", "-\t\t\targumentTypes = new TypeBinding[length];", "+\t\t\tthis.argumentTypes = new TypeBinding[length];", "-\t\t\t\tif ((argumentTypes[i] = argument.resolveType(scope)) == null){", "+\t\t\t\tif ((this.argumentTypes[i] = argument.resolveType(scope)) == null){", "-\t\t\t\t\t\tpseudoArgs[i] = argumentTypes[i] == null ? TypeBinding.NULL : argumentTypes[i]; // replace args with errors with null type", "+\t\t\t\t\t\tpseudoArgs[i] = this.argumentTypes[i] == null ? TypeBinding.NULL : this.argumentTypes[i]; // replace args with errors with null type", "-\t\t\t\tTypeBinding [] inferredTypes = inferElidedTypes((ParameterizedTypeBinding) receiverType, receiverType.enclosingType(), argumentTypes, scope);", "+\t\t\t\tTypeBinding [] inferredTypes = inferElidedTypes((ParameterizedTypeBinding) receiverType, receiverType.enclosingType(), this.argumentTypes, scope);", "-\t\t\tthis.binding = findConstructorBinding(scope, this, allocationType, argumentTypes);", "+\t\t\tthis.binding = findConstructorBinding(scope, this, allocationType, this.argumentTypes);", "-\t\t\t\tif (checkInvocationArguments(scope, null, allocationType, this.binding, this.arguments, argumentTypes, argsContainCast, this)) {", "+\t\t\t\tif (checkInvocationArguments(scope, null, allocationType, this.binding, this.arguments, this.argumentTypes, argsContainCast, this)) {", "-\t\t \t\tcheckTypeArgumentRedundancy((ParameterizedTypeBinding)receiverType, receiverType.enclosingType(), argumentTypes , scope);", "+\t\t \t\tcheckTypeArgumentRedundancy((ParameterizedTypeBinding)receiverType, receiverType.enclosingType(), this.argumentTypes , scope);", "-\t\tMethodBinding inheritedBinding = findConstructorBinding(scope, this, anonymousSuperclass, argumentTypes);", "+\t\tMethodBinding inheritedBinding = findConstructorBinding(scope, this, anonymousSuperclass, this.argumentTypes);", "-\t\t\tif (checkInvocationArguments(scope, null, anonymousSuperclass, inheritedBinding, this.arguments, argumentTypes, argsContainCast, this)) {", "+\t\t\tif (checkInvocationArguments(scope, null, anonymousSuperclass, inheritedBinding, this.arguments, this.argumentTypes, argsContainCast, this)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71429eb8afd684ac5540f922f4b4c96a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java", "commitBeforeChange": "4e0e44e12d531b0f9a299237d2e668d6176cd234", "commitAfterChange": "2156fedddc9b679afe1f45ef1e9d318ac4df4d9a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " public TypeBinding resolveType(BlockScope scope)", "diff": ["-\tTypeBinding[] argumentTypes = Binding.NO_PARAMETERS;", "+\tthis.argumentTypes = Binding.NO_PARAMETERS;", "-\t\targumentTypes = new TypeBinding[length];", "-\t\tTypeBinding argumentType;", "+\t\tthis.argumentTypes = new TypeBinding[length];", "-\t\t\tif ((argumentType = argumentTypes[i] = argument.resolveType(scope)) == null) {", "+\t\t\tif ((this.argumentTypes[i] = argument.resolveType(scope)) == null) {", "-\t\t\t}", "-\t\t\tif (argumentType != null && argumentType.kind() == Binding.POLY_TYPE) {", "-\t\t\t\tif (this.innerInferenceHelper == null)", "-\t\t\t\t\tthis.innerInferenceHelper = new InnerInferenceHelper();", "-\t\tTypeBinding [] inferredTypes = inferElidedTypes((ParameterizedTypeBinding) this.resolvedType, null, argumentTypes, scope);", "+\t\tTypeBinding [] inferredTypes = inferElidedTypes((ParameterizedTypeBinding) this.resolvedType, null, this.argumentTypes, scope);", "-\tthis.binding = findConstructorBinding(scope, this, allocatedType, argumentTypes);", "+\tthis.binding = findConstructorBinding(scope, this, allocatedType, this.argumentTypes);", "-\t\t\tMethodBinding privateBinding = localScope.getConstructor((ReferenceBinding)this.delegateThis.type, argumentTypes, this);", "+\t\t\tMethodBinding privateBinding = localScope.getConstructor((ReferenceBinding)this.delegateThis.type, this.argumentTypes, this);", "-\t\t\tTypeBinding argumentType = argumentTypes[i];", "+\t\t\tTypeBinding argumentType = this.argumentTypes[i];", "-\t\t\tCastExpression.checkNeedForArgumentCasts(scope, null, allocatedType, this.binding, this.arguments, argumentTypes, this);", "+\t\t\tCastExpression.checkNeedForArgumentCasts(scope, null, allocatedType, this.binding, this.arguments, this.argumentTypes, this);"]}], "num": 64448}
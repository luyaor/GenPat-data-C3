{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b14430b208eb008852485ae8621215ee", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62312bc511f7ada6b52cec66b2e8f0ea", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java", "commitBeforeChange": "579829d4867b5583bfe72f32f009d0dbea13c114", "commitAfterChange": "330aeaad59d1633d10c0cd3a9ee9ac57073b385f", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " private synchronized HashtableOfObject readCategoryTable(char[] categoryName, boolean readDocNumbers) throws IOException", "signatureAfterChange": " private synchronized HashtableOfObject readCategoryTable(char[] categoryName, boolean readDocNumbers) throws IOException", "diff": ["-\t\tif (cachedTable != null)", "+\t\tif (cachedTable != null) {", "+\t\t\tif (readDocNumbers) { // must cache remaining document number arrays", "+\t\t\t\tObject[] arrayOffsets = cachedTable.valueTable;", "+\t\t\t\tfor (int i = 0, l = arrayOffsets.length; i < l; i++)", "+\t\t\t\t\tif (arrayOffsets[i] instanceof Integer)", "+\t\t\t\t\t\tarrayOffsets[i] = readDocumentNumbers(arrayOffsets[i]);", "+\t\t\t}", "+\t\t}", "-\t\tif (readDocNumbers)", "-\t\t\tmatchingWords = new char[size][];", "-\t\t\t\tif (matchingWords != null) {", "+\t\t\t\tif (readDocNumbers) {", "+\t\t\t\t\tif (matchingWords == null)", "+\t\t\t\t\t\tmatchingWords = new char[size][];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa315c4534a26466f3ef4e573df04300", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java", "commitBeforeChange": "2bab40529424330ded6060204da7531205f32852", "commitAfterChange": "4660e2a206b7296b09f08e9cf873d42a9dbe9831", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  protected void cleanOutputFolders() throws CoreException", "signatureAfterChange": "  protected void cleanOutputFolders() throws CoreException", "diff": ["-\t\t\t\t\tfor (int j = 0, m = members.length; j < m; j++)", "-\t\t\t\t\t\tmembers[j].delete(IResource.FORCE, null);", "+\t\t\t\t\tfor (int j = 0, m = members.length; j < m; j++) {", "+\t\t\t\t\t\tIResource member = members[j];", "+\t\t\t\t\t\tif (!member.isDerived()) {", "+\t\t\t\t\t\t\tmember.accept(", "+\t\t\t\t\t\t\t\tnew IResourceVisitor() {", "+\t\t\t\t\t\t\t\t\tpublic boolean visit(IResource resource) throws CoreException {", "+\t\t\t\t\t\t\t\t\t\tresource.setDerived(true);", "+\t\t\t\t\t\t\t\t\t\treturn resource.getType() != IResource.FILE;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tmember.delete(IResource.FORCE, null);", "+\t\t\t\t\t}"]}], "num": 55082}
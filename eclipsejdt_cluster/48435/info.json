{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0f6628d17cb26a8a1b91170a97b3e99", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00a4ae287f0fb7e096b324efc818f8cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java", "commitBeforeChange": "55350d5af8386833b94a470ab6a0d389ee3fc665", "commitAfterChange": "046a051c9cfc73b3b3d419bf3c1888e842c561e5", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " protected void exitMember(int declarationEnd)", "signatureAfterChange": " protected void exitMember(int declarationEnd)", "diff": ["-\tif (info instanceof SourceTypeElementInfo && ((SourceTypeElementInfo) info).superclassName == CharOperation.NO_CHAR) {", "-\t\t// anonymous for enum constant -> attach its members to the field itself", "-\t\tSourceRefElementInfo fieldInfo = (SourceRefElementInfo) this.infoStack.peek();", "-\t\tfieldInfo.removeChild((IJavaElement) this.handleStack.pop());", "-\t\tfor (int i = 0, length = info.children.length; i < length; i++) ", "-\t\t\tfieldInfo.addChild(info.children[i]);", "-\t} else {", "-\t\tinfo.setSourceRangeEnd(declarationEnd);", "-\t\tthis.handleStack.pop();", "-\t}", "+\tinfo.setSourceRangeEnd(declarationEnd);", "+\tthis.handleStack.pop();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdb51e8d3a37f0f0fc8cbb347c19170c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "874e2c41609c64af417834df9af2e898d8dcf37a", "commitAfterChange": "4977ef90a9cbab898d33f6e3ba736939d7ac7a85", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " private void checkInternalNPE(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, boolean checkString)", "signatureAfterChange": "  public void checkNPE(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, boolean checkString)", "diff": ["-/* check if any dot in this QNR may trigger an NPE. */", "-private void checkInternalNPE(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, boolean checkString) {", "+public void checkNPE(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, boolean checkString) {", "+\t// cannot override localVariableBinding because this would project o.m onto o when", "+\t// analyzing assignments", "-\t} else if ((this.bits & ASTNode.RestrictiveFlagMASK) == Binding.FIELD) {", "-\t\t// look for annotated fields, they do not depend on flow context -> check immediately:", "-\t\tcheckNullableDereference(scope, (FieldBinding) this.binding, this.sourcePositions[0]);", "-\tif (this.otherBindings != null) {", "-\t\t// look for annotated fields, they do not depend on flow context -> check immediately:", "-\t\tint length = this.otherBindings.length - 1; // don't check the last binding", "-\t\tfor (int i = 0; i < length; i++) {", "-\t\t\tcheckNullableDereference(scope, this.otherBindings[i], this.sourcePositions[i+1]);", "-\t\t}", "-\t}", "-}"]}], "num": 48435}
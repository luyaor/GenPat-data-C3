{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac19567287b8064f1322524fc81ed743", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f674154a8d0b96cbddb30cd3cee5118", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ReferenceCollection.java", "commitBeforeChange": "e37cac53efe172dbb60a510acf45c0d9f0e07c45", "commitAfterChange": "da058db49caa0df4b4f66bd12b8ee74b4f989546", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public boolean includes(char[][][] qualifiedNames, char[][] simpleNames, char[][] rootNames)", "signatureAfterChange": " public boolean includes(char[][][] qualifiedNames, char[][] simpleNames)", "diff": ["+ */", "+public boolean includes(char[][][] qualifiedNames, char[][] simpleNames) {", "+\treturn includes(qualifiedNames, simpleNames, null);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c35d988e5e3ef611dfa3b2eaabb20baa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "a12b1847e48d96ac5e805a907f4cf72bcc8b1f19", "commitAfterChange": "1f22eae4a2779bf8c236df5ff222307e09db45c0", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " \tprivate void findLocalMethodDeclarations( \t\tchar[] methodName, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType)", "signatureAfterChange": " \tprivate void findLocalMethodDeclarations( \t\tchar[] methodName, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType)", "diff": ["-\t\t\tchar[][] parameterNames = findMethodParameterNames(method,parameterFullTypeNames);", "+\t\t\tchar[][] parameterNames = findMethodParameterNames(method, parameterFullTypeNames);", "-\t\t\t// flush uninteresting modifiers", "-\t\t\tint insertedModifiers = method.modifiers & ~(IConstants.AccNative | IConstants.AccAbstract);", "-", "-\t\t\t\tif(insertedModifiers != CompilerModifiers.AccDefault){", "-\t\t\t\t\tASTNode.printModifiers(insertedModifiers, completion);", "-\t\t\t\t}", "-\t\t\t\tchar[] returnPackageName = method.returnType.qualifiedPackageName();", "-\t\t\t\tchar[] returnFullTypeName = method.returnType.qualifiedSourceName();", "-\t\t\t\t", "-\t\t\t\tTypeBinding returnLeafType = method.returnType.leafComponentType();", "-\t\t\t\tif(!returnLeafType.isBaseType() && mustQualifyType(", "-\t\t\t\t\t\treturnPackageName,", "-\t\t\t\t\t\treturnLeafType.sourceName(),", "-\t\t\t\t\t\treturnLeafType.isMemberType() ? returnLeafType.enclosingType().qualifiedSourceName() : null,", "-\t\t\t\t\t\t((ReferenceBinding)returnLeafType).modifiers)) {", "-\t\t\t\t\tcompletion.append(CharOperation.concat(returnPackageName, returnFullTypeName,'.'));", "-\t\t\t\t} else {", "-\t\t\t\t\tcompletion.append(method.returnType.sourceName());", "-\t\t\t\t}", "-\t\t\t\tcompletion.append(' ');", "-\t\t\t\tcompletion.append(method.selector);", "-\t\t\t\tcompletion.append('(');", "-", "-\t\t\t\tfor(int i = 0; i < length ; i++){", "-\t\t\t\t\tTypeBinding type = method.parameters[i];", "-\t\t\t\t\tTypeBinding leafType = type.leafComponentType();", "-\t\t\t\t\tif(!leafType.isBaseType() && mustQualifyType(", "-\t\t\t\t\t\t\tparameterPackageNames[i],", "-\t\t\t\t\t\t\tleafType.sourceName(),", "-\t\t\t\t\t\t\tleafType.isMemberType() ? leafType.enclosingType().qualifiedSourceName() : null,", "-\t\t\t\t\t\t\t((ReferenceBinding)leafType).modifiers)){", "-\t\t\t\t\t\tcompletion.append(CharOperation.concat(parameterPackageNames[i], parameterFullTypeNames[i], '.'));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcompletion.append(parameterFullTypeNames[i]);", "-\t\t\t\t\t}", "-\t\t\t\t\tcompletion.append(' ');", "-\t\t\t\t\tif(parameterNames != null){", "-\t\t\t\t\t\tcompletion.append(parameterNames[i]);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tcompletion.append('%');", "-\t\t\t\t\t}", "-\t\t\t\t\tif(i != (length - 1))", "-\t\t\t\t\t\tcompletion.append(',');\t", "-\t\t\t\t}", "-\t\t\t\tcompletion.append(')');", "-\t\t\t\t", "-\t\t\t\tReferenceBinding[] exceptions = method.thrownExceptions;", "-\t\t\t\t", "-\t\t\t\tif (exceptions != null && exceptions.length > 0){", "-\t\t\t\t\tcompletion.append(' ');", "-\t\t\t\t\tcompletion.append(THROWS);", "-\t\t\t\t\tcompletion.append(' ');", "-\t\t\t\t\tfor(int i = 0; i < exceptions.length ; i++){", "-\t\t\t\t\t\tReferenceBinding exception = exceptions[i];", "-", "-\t\t\t\t\t\tchar[] exceptionPackageName = exception.qualifiedPackageName();", "-\t\t\t\t\t\tchar[] exceptionFullTypeName = exception.qualifiedSourceName();", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tif(i != 0){", "-\t\t\t\t\t\t\tcompletion.append(',');", "-\t\t\t\t\t\t\tcompletion.append(' ');", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tif(mustQualifyType(", "-\t\t\t\t\t\t\t\texceptionPackageName,", "-\t\t\t\t\t\t\t\texception.sourceName,", "-\t\t\t\t\t\t\t\texception.isMemberType() ? exception.enclosingType().qualifiedSourceName() : null,", "-\t\t\t\t\t\t\t\texception.modifiers)){", "-\t\t\t\t\t\t\tcompletion.append(CharOperation.concat(exceptionPackageName, exceptionFullTypeName, '.'));", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tcompletion.append(exception.sourceName());", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tcreateMethod(method, parameterPackageNames, parameterFullTypeNames, parameterNames, completion);", "+\t}"]}], "num": 47168}
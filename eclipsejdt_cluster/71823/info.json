{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eeb57e583dfb281f696a41c14b24cac6", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a636ec444e7a55d129bba3e1750bda0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic UnconditionalFlowInfo discardFieldInitializations()", "signatureAfterChange": " public UnconditionalFlowInfo addPotentialNullInfoFrom( \t\tUnconditionalFlowInfo otherInits)", "diff": ["+ */", "+public UnconditionalFlowInfo addPotentialNullInfoFrom(", "+\t\tUnconditionalFlowInfo otherInits) {", "+\tif ((this.tagBits & UNREACHABLE) != 0 ||", "+\t\t\t(otherInits.tagBits & UNREACHABLE) != 0 ||", "+\t\t\t(otherInits.tagBits & NULL_FLAG_MASK) == 0) {", "+\t\treturn this;", "+\t}", "+\t// if we get here, otherInits has some null info", "+\tboolean thisHasNulls = (this.tagBits & NULL_FLAG_MASK) != 0;", "+\tif (thisHasNulls) {", "+\t\tlong a1, a2, na2, a3, na3, a4, na4, b1, nb1, b2, nb2, b3, nb3, b4, nb4;", "+\t\tthis.nullAssignmentStatusBit1 =", "+\t\t\t((a1 = this.nullAssignmentStatusBit1) &", "+\t\t\t\t\t(na4 = ~(a4 = this.nullAssignmentValueBit2)) &\t", "+\t\t\t\t\t((na3 = ~(a3 = this.nullAssignmentValueBit1)) | ", "+\t\t\t\t\t\t\t(a2 = this.nullAssignmentStatusBit2)) | ", "+\t\t\t\t\t\t\ta2 & na3 &\ta4) & ", "+\t\t\t\t\t(nb3 = ~(b3 = otherInits.nullAssignmentValueBit1)) &", "+\t\t\t\t\t((b2 = otherInits.nullAssignmentStatusBit2) | ", "+\t\t\t\t\t(nb4 = ~(b4 = otherInits.nullAssignmentValueBit2))) |", "+\t\t\ta1 & (na2 = ~a2) & ", "+\t\t\t\t(a4 & ((nb1 = ~(b1 = otherInits.nullAssignmentStatusBit1)) & ", "+\t\t\t\t\t\tnb3 | b1 &", "+\t\t\t\t\t\t(b4 | b2)) |", "+\t\t\t\tna4 & (nb1 & (((nb2 = ~b2) & nb4 | b2) & nb3 | b3 & nb4) | ", "+\t\t\t\t\t\tb1 & nb4 & (nb2 | nb3)));", "+\t\tthis.nullAssignmentStatusBit2 =", "+\t\t\ta2 & (~a1 & na4 & nb4 |", "+\t\t\t\t\ta1 & na3 & nb3 & (nb1 & (nb2 & nb4 | b2) |", "+\t\t\t\t\t\t\t\t\t\tb1 & (nb4 |b2 & b4)));", "+\t\tthis.nullAssignmentValueBit1 =", "+\t\t\ta3 |", "+\t\t\tb1 & nb2 & nb4 |", "+\t\t\tnb1 & b3 |", "+\t\t\ta1 & na2 & (b1 & b3 | nb1 & b4);", "+//\t\t\tb1 & (~b2 & ~b4 | a1 & ~a2 & b3) |", "+//\t\t\t~b1 & (b3 | a1 & ~a2 & b4); -- same op nb", "+\t\tthis.nullAssignmentValueBit2 =", "+\t\t\ta4 & (na2 | a2 & na3) |", "+\t\t\tb4 & (nb2 | b2 & nb3);", "+\t\tif (coverageTestFlag && coverageTestId == 15) {", "+\t\t\tthis.nullAssignmentValueBit2 = ~0;", "+\t\t}", "+\t\t// extra storage management", "+\t\tif (otherInits.extra != null) {", "+\t\t\tint mergeLimit = 0, copyLimit = 0;", "+\t\t\tint otherLength = otherInits.extra[0].length;", "+\t\t\tif (this.extra == null) {", "+\t\t\t\tthis.extra = new long[extraLength][];", "+\t\t\t\tfor (int j = 0; j < extraLength; j++) {", "+\t\t\t\t\tthis.extra[j] = new long[otherLength];", "+\t\t\t\t}", "+\t\t\t\tcopyLimit = otherLength;", "+\t\t\t\tif (coverageTestFlag && coverageTestId == 16) {", "+\t\t\t\t\tthis.extra[2][0] = ~0; thisHasNulls = true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse {", "+\t\t\t\tmergeLimit = otherLength;", "+\t\t\t\tif (mergeLimit > this.extra[0].length) {", "+\t\t\t\t\tcopyLimit = mergeLimit;", "+\t\t\t\t\tmergeLimit = this.extra[0].length;", "+\t\t\t\t\tfor (int j = 0; j < extraLength; j++) {", "+\t\t\t\t\t\tSystem.arraycopy(this.extra[j], 0,", "+\t\t\t\t\t\t\t\tthis.extra[j] = new long[otherLength], 0,", "+\t\t\t\t\t\t\t\tmergeLimit);", "+\t\t\t\t}", "+\t\t\t\tint i;", "+\t\t\t\tfor (i = 0; i < mergeLimit; i++) {", "+\t\t\t\t\tthis.extra[2][i] =", "+\t\t\t\t\t\t((a1 = this.extra[2][i]) &", "+\t\t\t\t\t\t\t\t(na4 = ~(a4 = this.extra[5][i])) &\t", "+\t\t\t\t\t\t\t\t((na3 = ~(a3 = this.extra[4][i])) | ", "+\t\t\t\t\t\t\t\t\t\t(a2 = this.extra[3][i])) | ", "+\t\t\t\t\t\t\t\t\t\ta2 & na3 &\ta4) & ", "+\t\t\t\t\t\t\t\t(nb3 = ~(b3 = otherInits.extra[4][i])) &", "+\t\t\t\t\t\t\t\t((b2 = otherInits.extra[3][i]) | ", "+\t\t\t\t\t\t\t\t(nb4 = ~(b4 = otherInits.extra[5][i]))) |", "+\t\t\t\t\t\ta1 & (na2 = ~a2) & ", "+\t\t\t\t\t\t\t(a4 & ((nb1 = ~(b1 = otherInits.extra[2][i])) & ", "+\t\t\t\t\t\t\t\t\tnb3 | b1 &", "+\t\t\t\t\t\t\t\t\t(b4 | b2)) |", "+\t\t\t\t\t\t\tna4 & (nb1 & (((nb2 = ~b2) & nb4 | b2) & nb3 | b3 & nb4) | ", "+\t\t\t\t\t\t\t\t\tb1 & nb4 & (nb2 | nb3)));", "+\t\t\t\t\tthis.extra[3][i] =", "+\t\t\t\t\t\ta2 & (~a1 & na4 & nb4 |", "+\t\t\t\t\t\t\t\ta1 & na3 & nb3 & (nb1 & (nb2 & nb4 | b2) |", "+\t\t\t\t\t\t\t\t\t\t\t\t\tb1 & (nb4 |b2 & b4)));", "+\t\t\t\t\tthis.extra[4][i] =", "+\t\t\t\t\t\ta3 |", "+\t\t\t\t\t\tb1 & nb2 & nb4 |", "+\t\t\t\t\t\tnb1 & b3 |", "+\t\t\t\t\t\ta1 & na2 & (b1 & b3 | nb1 & b4);", "+\t\t\t\t\tthis.extra[5][i] =", "+\t\t\t\t\t\ta4 & (na2 | a2 & na3) |", "+\t\t\t\t\t\tb4 & (nb2 | b2 & nb3);", "+\t\t\t\t\tif (coverageTestFlag && coverageTestId == 17) {", "+\t\t\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "+\t\t\t\t}", "+\t\t\t\tfor (; i < copyLimit; i++) {", "+\t\t\t\t\tif (otherInits.extra[4][i] != 0 ||", "+\t\t\t\t\t\totherInits.extra[5][i] != 0) {", "+\t\t\t\t\t\tthis.tagBits |= NULL_FLAG_MASK; ", "+\t\t\t\t\t\tthis.extra[4][i] = ", "+\t\t\t\t\t\t\totherInits.extra[4][i] &", "+\t\t\t\t\t\t\t~(otherInits.extra[2][i] &", "+\t\t\t\t\t\t\t  ~otherInits.extra[3][i] &", "+\t\t\t\t\t\t\t  otherInits.extra[5][i]);", "+\t\t\t\t\t\tthis.extra[5][i] = ", "+\t\t\t\t\t\t\totherInits.extra[5][i];", "+\t\t\t\t\t\tif (coverageTestFlag && coverageTestId == 18) {", "+\t\t\t\t\t\t\tthis.extra[5][i] = ~0;", "+\t\t\t\t\t\t}", "+\t\t}", "+\t}", "+\telse {", "+\t\tif (otherInits.nullAssignmentValueBit1 != 0 ||", "+\t\t\totherInits.nullAssignmentValueBit2 != 0) {", "+\t\t\t// add potential values", "+\t\t\tthis.nullAssignmentValueBit1 = ", "+\t\t\t\totherInits.nullAssignmentValueBit1 & ", "+\t\t\t\t\t~(otherInits.nullAssignmentStatusBit1 &", "+\t\t\t\t\t  ~otherInits.nullAssignmentStatusBit2 &", "+\t\t\t\t\t  otherInits.nullAssignmentValueBit2); // exclude assigned unknown", "+\t\t\tthis.nullAssignmentValueBit2 = ", "+\t\t\t\totherInits.nullAssignmentValueBit2;", "+\t\t\tthisHasNulls = ", "+\t\t\t\tthis.nullAssignmentValueBit1 != 0 ||", "+\t\t\t\tthis.nullAssignmentValueBit2 != 0;", "+\t\t\tif (coverageTestFlag && coverageTestId == 10) {", "+\t\t\t\tthis.nullAssignmentValueBit2 = ~0;", "+\t\t}", "+\t\t// extra storage management", "+\t\tif (otherInits.extra != null) {", "+\t\t\tint mergeLimit = 0, copyLimit = 0;", "+\t\t\tint otherLength = otherInits.extra[0].length;", "+\t\t\tif (this.extra == null) {", "+\t\t\t\tcopyLimit = otherLength; ", "+\t\t\t\t\t// cannot happen when called from addPotentialInitializationsFrom", "+\t\t\t\tthis.extra = new long[extraLength][];", "+\t\t\t\tfor (int j = 0; j < extraLength; j++) {", "+\t\t\t\t\tthis.extra[j] = new long[otherLength];", "+\t\t\t\t}", "+\t\t\t\tif (coverageTestFlag && coverageTestId == 11) {", "+\t\t\t\t\tthis.extra[5][0] = ~0; this.tagBits |= NULL_FLAG_MASK;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse {", "+\t\t\t\tmergeLimit = otherLength;", "+\t\t\t\tif (mergeLimit > this.extra[0].length) {", "+\t\t\t\t\tcopyLimit = mergeLimit;", "+\t\t\t\t\tmergeLimit = this.extra[0].length;", "+\t\t\t\t\tSystem.arraycopy(this.extra[0], 0,", "+\t\t\t\t\t\t\tthis.extra[0] = new long[otherLength], 0,", "+\t\t\t\t\t\t\tmergeLimit);", "+\t\t\t\t\tSystem.arraycopy(this.extra[1], 0,", "+\t\t\t\t\t\t\tthis.extra[1] = new long[otherLength], 0,", "+\t\t\t\t\t\t\tmergeLimit);", "+\t\t\t\t\tfor (int j = 2; j < extraLength; j++) {", "+\t\t\t\t\t\tthis.extra[j] = new long[otherLength];", "+\t\t\t\t\t}", "+\t\t\t\t\tif (coverageTestFlag && coverageTestId == 12) {", "+\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 12\"); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tint i;", "+\t\t\tfor (i = 0; i < mergeLimit; i++) {", "+\t\t\t\tif (otherInits.extra[4][i] != 0 ||", "+\t\t\t\t\totherInits.extra[5][i] != 0) {", "+\t\t\t\t\tthis.extra[4][i] |= ", "+\t\t\t\t\t\totherInits.extra[4][i] &", "+\t\t\t\t\t\t~(otherInits.extra[2][i] &", "+\t\t\t\t\t\t  ~otherInits.extra[3][i] &", "+\t\t\t\t\t\t  otherInits.extra[5][i]);", "+\t\t\t\t\tthis.extra[5][i] |= ", "+\t\t\t\t\t\totherInits.extra[5][i];", "+\t\t\t\t\tthisHasNulls = thisHasNulls ||", "+\t\t\t\t\t\tthis.extra[4][i] != 0 ||", "+\t\t\t\t\t\tthis.extra[5][i] != 0;", "+\t\t\t\t\tif (coverageTestFlag && coverageTestId == 13) {", "+\t\t\t\t\t\tthis.extra[5][i] = ~0;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tfor (; i < copyLimit; i++) {", "+\t\t\t\tif (otherInits.extra[4][i] != 0 ||", "+\t\t\t\t\totherInits.extra[5][i] != 0) {", "+\t\t\t\t\tthis.extra[4][i] = ", "+\t\t\t\t\t\totherInits.extra[4][i] &", "+\t\t\t\t\t\t~(otherInits.extra[2][i] &", "+\t\t\t\t\t\t  ~otherInits.extra[3][i] &", "+\t\t\t\t\t\t  otherInits.extra[5][i]);", "+\t\t\t\t\tthis.extra[5][i] = ", "+\t\t\t\t\t\totherInits.extra[5][i];", "+\t\t\t\t\tthisHasNulls = thisHasNulls ||", "+\t\t\t\t\t\tthis.extra[4][i] != 0 ||", "+\t\t\t\t\t\tthis.extra[5][i] != 0;", "+\t\t\t\t\tif (coverageTestFlag && coverageTestId == 14) {", "+\t\t\t\t\t\tthis.extra[5][i] = ~0;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (thisHasNulls) {", "+\t\tthis.tagBits |= NULL_FLAG_MASK; ", "+\t}", "+\telse {", "+\t\tthis.tagBits &= NULL_FLAG_MASK; ", "+\t}", "+\treturn this;", "+}", "-\t", "-\tpublic UnconditionalFlowInfo discardFieldInitializations(){", "-\t\t", "-\t\tint limit = this.maxFieldCount;", "-\t\t", "-\t\tif (limit < BitCacheSize) {", "-\t\t\tlong mask = (1L << limit)-1;", "-\t\t\tthis.definiteInits &= ~mask;", "-\t\t\tthis.potentialInits &= ~mask;", "-\t\t\tthis.definiteNulls &= ~mask;", "-\t\t\tthis.definiteNonNulls &= ~mask;", "-\t\t\treturn this;", "-\t\t} ", "-\t\tthis.definiteInits = 0;", "-\t\tthis.potentialInits = 0;", "-\t\tthis.definiteNulls = 0;", "-\t\tthis.definiteNonNulls = 0;", "-\t\t", "-\t\t// use extra vector", "-\t\tif (extraDefiniteInits == null) {", "-\t\t\treturn this; // if vector not yet allocated, then not initialized", "-\t\t}", "-\t\tint vectorIndex, length = this.extraDefiniteInits.length;", "-\t\tif ((vectorIndex = (limit / BitCacheSize) - 1) >= length) {", "-\t\t\treturn this; // not enough room yet", "-\t\t}", "-\t\tfor (int i = 0; i < vectorIndex; i++) {", "-\t\t\tthis.extraDefiniteInits[i] = 0L;", "-\t\t\tthis.extraPotentialInits[i] = 0L;", "-\t\t\tthis.extraDefiniteNulls[i] = 0L;", "-\t\t\tthis.extraDefiniteNonNulls[i] = 0L;", "-\t\t}", "-\t\tthis.extraDefiniteInits[vectorIndex] &= ~mask;", "-\t\tthis.extraPotentialInits[vectorIndex] &= ~mask;", "-\t\tthis.extraDefiniteNulls[vectorIndex] &= ~mask;", "-\t\tthis.extraDefiniteNonNulls[vectorIndex] &= ~mask;", "-\t\treturn this;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6a8bbbfc46fd7b31dc8f19cf559f310", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/UnconditionalFlowInfo.java", "commitBeforeChange": "c85c898de3099d8d87b870385bc47667302c5e21", "commitAfterChange": "73c6d3ea7dc5df8e531fcab68ea3f39bbd288577", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tpublic UnconditionalFlowInfo mergedWith(UnconditionalFlowInfo otherInits)", "signatureAfterChange": "  public UnconditionalFlowInfo mergedWith(UnconditionalFlowInfo otherInits)", "diff": ["-\t */", "-\tpublic UnconditionalFlowInfo mergedWith(UnconditionalFlowInfo otherInits) {", "-\t", "-\t\tif (this == DEAD_END) return otherInits;", "-\t\tif (otherInits == DEAD_END) return this;", "-\t", "-\t\tif ((this.reachMode & UNREACHABLE) != (otherInits.reachMode & UNREACHABLE)){", "-\t\t\tif ((this.reachMode & UNREACHABLE) != 0){", "-\t\t\t\treturn otherInits;", "-\t\t\treturn this;", "-\t\t", "-\t\t// if one branch is not fake reachable, then the merged one is reachable", "-\t\tthis.reachMode &= otherInits.reachMode;", "-\t", "-\t\t// intersection of definitely assigned variables, ", "-\t\tthis.definiteInits &= otherInits.definiteInits;", "-\t\t// union of potentially set ones", "-\t\tthis.potentialInits |= otherInits.potentialInits;", "-\t\t// intersection of definitely null variables, ", "-\t\tthis.definiteNulls &= otherInits.definiteNulls;", "-\t\t// intersection of definitely non-null variables, ", "-\t\tthis.definiteNonNulls &= otherInits.definiteNonNulls;", "-\t", "-\t\t// treating extra storage", "-\t\tif (this.extraDefiniteInits != null) {", "-\t\t\tif (otherInits.extraDefiniteInits != null) {", "-\t\t\t\t// both sides have extra storage", "-\t\t\t\tint i = 0, length, otherLength;", "-\t\t\t\tif ((length = this.extraDefiniteInits.length) < (otherLength = otherInits.extraDefiniteInits.length)) {", "-\t\t\t\t\t// current storage is shorter -> grow current (could maybe reuse otherInits extra storage?)", "-\t\t\t\t\tSystem.arraycopy(this.extraDefiniteInits, 0, (this.extraDefiniteInits = new long[otherLength]), 0, length);", "-\t\t\t\t\tSystem.arraycopy(this.extraPotentialInits, 0, (this.extraPotentialInits = new long[otherLength]), 0, length);", "-\t\t\t\t\tSystem.arraycopy(this.extraDefiniteNulls, 0, (this.extraDefiniteNulls = new long[otherLength]), 0, length);", "-\t\t\t\t\tSystem.arraycopy(this.extraDefiniteNonNulls, 0, (this.extraDefiniteNonNulls = new long[otherLength]), 0, length);", "-\t\t\t\t\twhile (i < length) {", "-\t\t\t\t\t\tthis.extraDefiniteInits[i] &= otherInits.extraDefiniteInits[i];", "-\t\t\t\t\t\tthis.extraPotentialInits[i] |= otherInits.extraPotentialInits[i];", "-\t\t\t\t\t\tthis.extraDefiniteNulls[i] &= otherInits.extraDefiniteNulls[i];", "-\t\t\t\t\t\tthis.extraDefiniteNonNulls[i] &= otherInits.extraDefiniteNonNulls[i++];", "-\t\t\t\t\t}", "-\t\t\t\t\twhile (i < otherLength) {", "-\t\t\t\t\t\tthis.extraPotentialInits[i] = otherInits.extraPotentialInits[i++];", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// current storage is longer", "-\t\t\t\t\twhile (i < otherLength) {", "-\t\t\t\t\t\tthis.extraDefiniteInits[i] &= otherInits.extraDefiniteInits[i];", "-\t\t\t\t\t\tthis.extraPotentialInits[i] |= otherInits.extraPotentialInits[i];", "-\t\t\t\t\t\tthis.extraDefiniteNulls[i] &= otherInits.extraDefiniteNulls[i];", "-\t\t\t\t\t\tthis.extraDefiniteNonNulls[i] &= otherInits.extraDefiniteNonNulls[i++];", "-\t\t\t\t\t}", "-\t\t\t\t\twhile (i < length) {", "-\t\t\t\t\t\tthis.extraDefiniteInits[i] = 0;", "-\t\t\t\t\t\tthis.extraDefiniteNulls[i] = 0;", "-\t\t\t\t\t\tthis.extraDefiniteNonNulls[i++] = 0;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\t// no extra storage on otherInits", "-\t\t\t\tint i = 0, length = this.extraDefiniteInits.length;", "-\t\t\t\twhile (i < length) {", "-\t\t\t\t\tthis.extraDefiniteInits[i] = 0;", "-\t\t\t\t\tthis.extraDefiniteNulls[i] = 0;", "-\t\t\t\t\tthis.extraDefiniteNonNulls[i++] = 0;", "-\t\t\t\t}", "-\t\t} else", "-\t\t\tif (otherInits.extraDefiniteInits != null) {", "-\t\t\t\t// no storage here, but other has extra storage.", "-\t\t\t\tint otherLength;", "-\t\t\t\tthis.extraDefiniteInits = new long[otherLength = otherInits.extraDefiniteInits.length];", "-\t\t\t\tSystem.arraycopy(otherInits.extraPotentialInits, 0, (this.extraPotentialInits = new long[otherLength]), 0, otherLength);", "-\t\t\t\tthis.extraDefiniteNulls = new long[otherLength];", "-\t\t\t\tthis.extraDefiniteNonNulls = new long[otherLength];", "+", "+public UnconditionalFlowInfo mergedWith(UnconditionalFlowInfo otherInits) {", "+\tif ((otherInits.tagBits & UNREACHABLE) != 0 && this != DEAD_END) {", "+\t\tif (coverageTestFlag && coverageTestId == 35) {", "+\t\t\tthrow new AssertionFailedException(\"COVERAGE 35\"); //$NON-NLS-1$", "+\t\t}", "+\t\t// DEAD_END + unreachable other -> other", "+\tif ((this.tagBits & UNREACHABLE) != 0) {", "+\t\tif (coverageTestFlag && coverageTestId == 36) {", "+\t\t\tthrow new AssertionFailedException(\"COVERAGE 36\"); //$NON-NLS-1$", "+\t\treturn (UnconditionalFlowInfo) otherInits.copy(); // make sure otherInits won't be affected", "+\t} ", "+\t", "+\t// intersection of definitely assigned variables, ", "+\tthis.definiteInits &= otherInits.definiteInits;", "+\t// union of potentially set ones", "+\tthis.potentialInits |= otherInits.potentialInits;", "+", "+\t// null combinations", "+\tboolean otherHasNulls = (otherInits.tagBits & NULL_FLAG_MASK) != 0,", "+\t\tthisHasNulls = false;", "+\tlong a1, a2, na2, a3, na3, a4, na4, b1, nb1, b2, nb2, b3, nb3, b4, nb4;", "+\tif (otherHasNulls) {", "+\t\tthis.nullAssignmentStatusBit1 =", "+\t\t\t(a1 = this.nullAssignmentStatusBit1) & ", "+\t\t\t(b1 = otherInits.nullAssignmentStatusBit1) & (", "+\t\t\t\t(nb4 = ~(b4 = otherInits.nullAssignmentValueBit2)) & ", "+\t\t\t\t((b2 = otherInits.nullAssignmentStatusBit2) & ", "+\t\t\t\t\t\t(nb3 = ~(b3 = otherInits.nullAssignmentValueBit1)) & ", "+\t\t\t\t\t\t(na3 = ~(a3 = this.nullAssignmentValueBit1)) & ", "+\t\t\t\t\t\t((a2 = this.nullAssignmentStatusBit2) & ", "+\t\t\t\t\t\t\t(na4 = ~(a4 = this.nullAssignmentValueBit2)) | a4) |", "+\t\t\t\t\t\t(na2 = ~a2) & a3 & na4 & (nb2 = ~b2) & b3 ) |", "+\t\t\t\tb4 & (na3 & nb3 & (na4 & a2 | a4) |", "+\t\t\t\t\t\tna2 & a4 & nb2));", "+\t\tthis.nullAssignmentStatusBit2 =", "+\t\t\ta2 & b2 & ~(a1 ^ b1) & (na3 & nb3 | na4 & nb4) |", "+\t\t\ta1 & b1 & (a2 ^ b2) & na3 & nb3 |", "+\t\t\t(a1 & na2 & (nb1 = ~b1) & b2 | ~a1 & a2 & b1 & nb2) & na4 & nb4;", "+\t\tthis.nullAssignmentValueBit1 =", "+\t\t\tb1 & nb2 & nb4 |", "+\t\t\t~a1 & (a3 |", "+\t\t\t\t\ta2 & na3 & (b1 | nb2)) |", "+\t\t\t(a1 | na2) & nb1 & b2 & nb3 |", "+\t\t\tnb1 & b3 |", "+\t\t\ta1 & na2 & (na4 |", "+\t\t\t\t\t\tb1 & nb2 & (a3 | b3));", "+\t\tthis.nullAssignmentValueBit2 =", "+\t\t\ta4 | b4;", "+\t\tif (coverageTestFlag && coverageTestId == 37) {", "+\t\t\tthis.nullAssignmentValueBit2 = ~0;", "+\t\t}", "+\telse {", "+\t\t// tune potentials", "+\t\tthis.nullAssignmentValueBit1 =", "+\t\t\t~(~this.nullAssignmentStatusBit1 &", "+\t\t\t\t\t~this.nullAssignmentStatusBit2 &", "+\t\t\t\t\t~this.nullAssignmentValueBit1) &", "+\t\t\t~(this.nullAssignmentStatusBit1 & ", "+\t\t\t\t\t(this.nullAssignmentStatusBit2 | this.nullAssignmentValueBit2));", "+\t\t// reset assignment and protected", "+\t\tthis.nullAssignmentStatusBit1 = ", "+\t\tthis.nullAssignmentStatusBit2 = 0;", "+\t\tif (coverageTestFlag && coverageTestId == 38) {", "+\t\t\tthis.nullAssignmentValueBit2 = ~0;", "+\t\t}", "+\tthisHasNulls = this.nullAssignmentStatusBit1 != 0 || ", "+\t\tthis.nullAssignmentStatusBit2 != 0 ||", "+\t\tthis.nullAssignmentValueBit1 != 0 ||", "+\t\tthis.nullAssignmentValueBit2 != 0;", "+", "+\t// treating extra storage", "+\tif (this.extra != null || otherInits.extra != null) {", "+\t\tint mergeLimit = 0, copyLimit = 0, resetLimit = 0;", "+\t\tif (this.extra != null) {", "+\t\t\tif (otherInits.extra != null) {", "+\t\t\t\t// both sides have extra storage", "+\t\t\t\tint length, otherLength;", "+\t\t\t\tif ((length = this.extra[0].length) < ", "+\t\t\t\t\t\t(otherLength = otherInits.extra[0].length)) {", "+\t\t\t\t\t// current storage is shorter -> grow current ", "+\t\t\t\t\tfor (int j = 0; j < extraLength; j++) {", "+\t\t\t\t\t\tSystem.arraycopy(this.extra[j], 0, ", "+\t\t\t\t\t\t\t(this.extra[j] = new long[otherLength]), 0, length);", "+\t\t\t\t\t}", "+\t\t\t\t\tmergeLimit = length;", "+\t\t\t\t\tcopyLimit = otherLength;", "+\t\t\t\t\tif (coverageTestFlag && coverageTestId == 39) {", "+\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 39\"); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t} ", "+\t\t\t\telse {", "+\t\t\t\t\t// current storage is longer", "+\t\t\t\t\tmergeLimit = otherLength;", "+\t\t\t\t\tresetLimit = length;", "+\t\t\t\t\tif (coverageTestFlag && coverageTestId == 40) {", "+\t\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 40\"); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} ", "+\t\t\telse {", "+\t\t\t\tresetLimit = this.extra[0].length;", "+\t\t\t\tif (coverageTestFlag && coverageTestId == 41) {", "+\t\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 41\"); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} ", "+\t\telse if (otherInits.extra != null) {", "+\t\t\t// no storage here, but other has extra storage.", "+\t\t\tint otherLength = otherInits.extra[0].length;", "+\t\t\tthis.extra = new long[extraLength][];", "+\t\t\tfor (int j = 0; j < extraLength; j++) {", "+\t\t\t\tthis.extra[j] = new long[otherLength];", "+\t\t\t}", "+\t\t\tSystem.arraycopy(otherInits.extra[1], 0, ", "+\t\t\t\tthis.extra[1], 0, otherLength);", "+\t\t\tcopyLimit = otherLength;", "+\t\t\tif (coverageTestFlag && coverageTestId == 42) {", "+\t\t\t\tthrow new AssertionFailedException(\"COVERAGE 42\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t}", "+\t\tint i;", "+\t\tif (otherHasNulls) {", "+\t\t\tfor (i = 0; i < mergeLimit; i++) {", "+\t\t\t\tthis.extra[2][i] =", "+\t\t\t\t\t(a1 = this.extra[2][i]) & ", "+\t\t\t\t\t(b1 = otherInits.extra[2][i]) & (", "+\t\t\t\t\t\t(nb4 = ~(b4 = otherInits.extra[5][i])) & ", "+\t\t\t\t\t\t((b2 = otherInits.extra[3][i]) & ", "+\t\t\t\t\t\t\t\t(nb3 = ~(b3 = otherInits.extra[4][i])) & ", "+\t\t\t\t\t\t\t\t(na3 = ~(a3 = this.extra[4][i])) & ", "+\t\t\t\t\t\t\t\t((a2 = this.extra[3][i]) & ", "+\t\t\t\t\t\t\t\t\t(na4 = ~(a4 = this.extra[5][i])) | a4) |", "+\t\t\t\t\t\t\t\t(na2 = ~a2) & a3 & na4 & (nb2 = ~b2) & b3 ) |", "+\t\t\t\t\t\tb4 & (na3 & nb3 & (na4 & a2 | a4) |", "+\t\t\t\t\t\t\t\tna2 & a4 & nb2));", "+\t\t\t\tthis.extra[3][i] =", "+\t\t\t\t\ta2 & b2 & ~(a1 ^ b1) & (na3 & nb3 | na4 & nb4) |", "+\t\t\t\t\ta1 & b1 & (a2 ^ b2) & na3 & nb3 |", "+\t\t\t\t\t(a1 & na2 & (nb1 = ~b1) & b2 | ~a1 & a2 & b1 & nb2) & na4 & nb4;", "+\t\t\t\tthis.extra[4][i] =", "+\t\t\t\t\tb1 & nb2 & nb4 |", "+\t\t\t\t\t~a1 & (a3 |", "+\t\t\t\t\t\t\ta2 & na3 & (b1 | nb2)) |", "+\t\t\t\t\t(a1 | na2) & nb1 & b2 & nb3 |", "+\t\t\t\t\tnb1 & b3 |", "+\t\t\t\t\ta1 & na2 & (na4 |", "+\t\t\t\t\t\t\t\tb1 & nb2 & (a3 | b3));", "+\t\t\t\tthis.extra[5][i] =", "+\t\t\t\t\ta4 | b4;", "+\t\t\t\tthisHasNulls = thisHasNulls ||", "+\t\t\t\t\tthis.extra[5][i] != 0 ||", "+\t\t\t\t\tthis.extra[2][i] != 0 ||", "+\t\t\t\t\tthis.extra[3][i] != 0 ||", "+\t\t\t\t\tthis.extra[4][i] != 0;", "+\t\t\t\tif (coverageTestFlag && coverageTestId == 43) {", "+\t\t\t\t\tthis.extra[5][i] = ~0;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\telse {", "+\t\t\tfor (i = 0; i < mergeLimit; i++) {", "+\t\t\t\tthis.extra[0][i] &= ", "+\t\t\t\t\totherInits.extra[0][i];", "+\t\t\t\tthis.extra[1][i] |= ", "+\t\t\t\t\totherInits.extra[1][i];", "+\t\t\t\tthis.extra[4][i] =", "+\t\t\t\t\t~(~this.extra[2][i] &", "+\t\t\t\t\t\t\t~this.extra[3][i] &", "+\t\t\t\t\t\t\t~this.extra[4][i]) &", "+\t\t\t\t\t~(this.extra[2][i] & ", "+\t\t\t\t\t\t\t(this.extra[3][i] | ", "+\t\t\t\t\t\t\tthis.extra[5][i]));", "+\t\t\t\tthis.extra[2][i] = ", "+\t\t\t\tthis.extra[3][i] = 0;", "+\t\t\t\tthisHasNulls = thisHasNulls ||", "+\t\t\t\t\tthis.extra[4][i] != 0 ||", "+\t\t\t\t\tthis.extra[5][i] != 0;", "+\t\t\t\tif (coverageTestFlag && coverageTestId == 44) {", "+\t\t\t\t\tthis.extra[5][i] = ~0;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tfor (; i < copyLimit; i++) {", "+\t\t\tthis.extra[1][i] = otherInits.extra[1][i];", "+\t\t\tthis.extra[4][i] =", "+\t\t\t\t~(~otherInits.extra[2][i] &", "+\t\t\t\t\t~otherInits.extra[3][i] &", "+\t\t\t\t\t~otherInits.extra[4][i]) &", "+\t\t\t\t~(otherInits.extra[2][i] & ", "+\t\t\t\t\t(otherInits.extra[3][i] |", "+\t\t\t\t\totherInits.extra[5][i]));", "+\t\t\tthis.extra[5][i] = otherInits.extra[5][i];", "+\t\t\tthisHasNulls = thisHasNulls ||", "+\t\t\t\tthis.extra[4][i] != 0 ||", "+\t\t\t\tthis.extra[5][i] != 0;", "+\t\t\tif (coverageTestFlag && coverageTestId == 45) {", "+\t\t\t\tthis.extra[5][i] = ~0;", "+\t\t\t}", "+\t\t}", "+\t\tfor (; i < resetLimit; i++) {", "+\t\t\tthis.extra[4][i] =", "+\t\t\t\t~(~this.extra[2][i] &", "+\t\t\t\t\t\t~this.extra[3][i] &", "+\t\t\t\t\t\t~this.extra[4][i]) &", "+\t\t\t\t~(this.extra[2][i] & ", "+\t\t\t\t\t\t(this.extra[3][i] | ", "+\t\t\t\t\t\tthis.extra[5][i]));", "+\t\t\tthis.extra[0][i] = ", "+\t\t\tthis.extra[2][i] = ", "+\t\t\tthis.extra[3][i] = 0;", "+\t\t\tthisHasNulls = thisHasNulls ||", "+\t\t\t\tthis.extra[4][i] != 0 ||", "+\t\t\t\tthis.extra[5][i] != 0;", "+\t\t\tif (coverageTestFlag && coverageTestId == 46) {", "+\t\t\t\tthis.extra[5][i] = ~0;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (thisHasNulls) {", "+\t\tthis.tagBits |= NULL_FLAG_MASK;", "+\t}", "+\telse {", "+\t\tthis.tagBits &= ~NULL_FLAG_MASK;", "+\t}", "+\treturn this;", "+}"]}], "num": 71823}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34618eab341b5d303fb8a5152470b8a9", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c2d12b9b07e82a1a62b2efa2c2c30c6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldReferencePattern.java", "commitBeforeChange": "60e138d2828b37f2615e0cced57acea3adb47644", "commitAfterChange": "3c340a30d5ee47c28968789969de0fd1189f5b30", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r private boolean matches(TypeBinding receiverType, boolean isSuperAccess, FieldBinding binding)", "signatureAfterChange": "\r private int matchLevel(TypeBinding receiverType, boolean isSuperAccess, FieldBinding binding)", "diff": ["-private boolean matches(TypeBinding receiverType, boolean isSuperAccess, FieldBinding binding) {\r", "+private int matchLevel(TypeBinding receiverType, boolean isSuperAccess, FieldBinding binding) {\r", "+\tif (receiverType == null || binding == null) return INACCURATE_MATCH;\r", "+\tint level;\r", "+\t\r", "-\tif (receiverBinding != null \r", "-\t\t&& !this.matchesAsSubtype(receiverBinding, this.declaringSimpleName, this.declaringQualification)\r", "-\t\t&& !this.matchesType(this.allSuperDeclaringTypeNames, receiverBinding)) {\r", "-\t\t\treturn false;\r", "+\tif (receiverBinding == null) {\r", "+\t\treturn INACCURATE_MATCH;\r", "+\t} else {\r", "+\t\tlevel = this.matchLevelAsSubtype(receiverBinding, this.declaringSimpleName, this.declaringQualification);\r", "+\t\tif (level == IMPOSSIBLE_MATCH) {\r", "+\t\t\tlevel = this.matchLevelForType(this.allSuperDeclaringTypeNames, receiverBinding);\r", "+\t\t\tif (level == IMPOSSIBLE_MATCH) {\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t}\r", "+\t\t}\r", "-\tif (!this.matchesType(this.typeSimpleName, this.typeQualification, binding.type))\r", "-\t\treturn false;\r", "+\tint newLevel = this.matchLevelForType(this.typeSimpleName, this.typeQualification, binding.type);\r", "+\tswitch (newLevel) {\r", "+\t\tcase IMPOSSIBLE_MATCH:\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\tcase ACCURATE_MATCH: // keep previous level\r", "+\t\t\tbreak;\r", "+\t\tdefault: // ie. INACCURATE_MATCH\r", "+\t\t\tlevel = newLevel;\r", "+\t\t\tbreak;\r", "+\t}\r", "-\treturn true;\r", "+\treturn level;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e33ec01b45bf8b668705d910f2a562a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FieldReferencePattern.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r private boolean matches(TypeBinding receiverType, boolean isSuperAccess, FieldBinding binding)", "signatureAfterChange": "\r private int matchLevel(TypeBinding receiverType, boolean isSuperAccess, FieldBinding binding)", "diff": ["-private boolean matches(TypeBinding receiverType, boolean isSuperAccess, FieldBinding binding) {\r", "+private int matchLevel(TypeBinding receiverType, boolean isSuperAccess, FieldBinding binding) {\r", "+\tif (receiverType == null || binding == null) return INACCURATE_MATCH;\r", "+\tint level;\r", "+\t\r", "-\tif (receiverBinding != null \r", "-\t\t&& !this.matchesAsSubtype(receiverBinding, this.declaringSimpleName, this.declaringQualification)\r", "-\t\t&& !this.matchesType(this.allSuperDeclaringTypeNames, receiverBinding)) {\r", "-\t\t\treturn false;\r", "+\tif (receiverBinding == null) {\r", "+\t\treturn INACCURATE_MATCH;\r", "+\t} else {\r", "+\t\tlevel = this.matchLevelAsSubtype(receiverBinding, this.declaringSimpleName, this.declaringQualification);\r", "+\t\tif (level == IMPOSSIBLE_MATCH) {\r", "+\t\t\tlevel = this.matchLevelForType(this.allSuperDeclaringTypeNames, receiverBinding);\r", "+\t\t\tif (level == IMPOSSIBLE_MATCH) {\r", "+\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\t\t}\r", "+\t\t}\r", "-\tif (!this.matchesType(this.typeSimpleName, this.typeQualification, binding.type))\r", "-\t\treturn false;\r", "+\tint newLevel = this.matchLevelForType(this.typeSimpleName, this.typeQualification, binding.type);\r", "+\tswitch (newLevel) {\r", "+\t\tcase IMPOSSIBLE_MATCH:\r", "+\t\t\treturn IMPOSSIBLE_MATCH;\r", "+\t\tcase ACCURATE_MATCH: // keep previous level\r", "+\t\t\tbreak;\r", "+\t\tdefault: // ie. INACCURATE_MATCH\r", "+\t\t\tlevel = newLevel;\r", "+\t\t\tbreak;\r", "+\t}\r", "-\treturn true;\r", "+\treturn level;\r"]}], "num": 64655}
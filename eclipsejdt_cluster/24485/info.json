{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa36937d89051f2489697d4b83bce818", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4080e1d80afe27588d9fe71d0bff223f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java", "commitBeforeChange": "b2a1a7d064fd5695fce4ad30f84d3e52d57db8d6", "commitAfterChange": "58d495f741112fe1313f49af60925198c18bb8e1", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 73, "signatureBeforeChange": " public void configure(String[] argv) throws InvalidInputException", "signatureAfterChange": " public void configure(String[] argv) throws InvalidInputException", "diff": ["+ */", "+public void configure(String[] argv) throws InvalidInputException {", "+", "+\tif ((argv == null) || (argv.length == 0)) {", "+\t\tprintUsage();", "+\t\treturn;", "+\t}", "+", "+\tfinal int INSIDE_CLASSPATH_start = 1;", "+\tfinal int INSIDE_DESTINATION_PATH = 3;", "+\tfinal int INSIDE_TARGET = 4;", "+\tfinal int INSIDE_LOG = 5;", "+\tfinal int INSIDE_REPETITION = 6;", "+\tfinal int INSIDE_SOURCE = 7;", "+\tfinal int INSIDE_DEFAULT_ENCODING = 8;", "+\tfinal int INSIDE_BOOTCLASSPATH_start = 9;", "+\tfinal int INSIDE_MAX_PROBLEMS = 11;", "+\tfinal int INSIDE_EXT_DIRS = 12;", "+\tfinal int INSIDE_SOURCE_PATH_start = 13;", "+\tfinal int INSIDE_ENDORSED_DIRS = 15;", "+\tfinal int INSIDE_SOURCE_DIRECTORY_DESTINATION_PATH = 16;", "+\tfinal int INSIDE_PROCESSOR_PATH_start = 17;", "+\tfinal int INSIDE_PROCESSOR_start = 18;", "+\tfinal int INSIDE_S_start = 19;", "+\tfinal int INSIDE_CLASS_NAMES = 20;", "+", "+\tfinal int DEFAULT = 0;", "+\tArrayList bootclasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\tString sourcepathClasspathArg = null;", "+\tArrayList sourcepathClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\tArrayList classpaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\tArrayList extdirsClasspaths = null;", "+\tArrayList endorsedDirClasspaths = null;", "+", "+\tint index = -1;", "+\tint filesCount = 0;", "+\tint classCount = 0;", "+\tint argCount = argv.length;", "+\tint mode = DEFAULT;", "+\tthis.maxRepetition = 0;", "+\tboolean printUsageRequired = false;", "+\tString usageSection = null;", "+\tboolean printVersionRequired = false;", "+", "+\tboolean didSpecifyDefaultEncoding = false;", "+\tboolean didSpecifyDeprecation = false;", "+\tboolean didSpecifyCompliance = false;", "+\tboolean didSpecifyDisabledAnnotationProcessing = false;", "+", "+\tString customEncoding = null;", "+\tString customDestinationPath = null;", "+\tString currentSourceDirectory = null;", "+\tString currentArg = Util.EMPTY_STRING;", "+", "+\t// expand the command line if necessary", "+\tboolean needExpansion = false;", "+\tloop: for (int i = 0; i < argCount; i++) {", "+\t\t\tif (argv[i].startsWith(\"@\")) { //$NON-NLS-1$", "+\t\t\t\tneedExpansion = true;", "+\t\t\t\tbreak loop;", "+\t\t\t}", "+\t}", "+", "+\tString[] newCommandLineArgs = null;", "+\tif (needExpansion) {", "+\t\tnewCommandLineArgs = new String[argCount];", "+\t\tindex = 0;", "+\t\tfor (int i = 0; i < argCount; i++) {", "+\t\t\tString[] newArgs = null;", "+\t\t\tString arg = argv[i].trim();", "+\t\t\tif (arg.startsWith(\"@\")) { //$NON-NLS-1$", "+\t\t\t\ttry {", "+\t\t\t\t\tLineNumberReader reader = new LineNumberReader(new StringReader(new String(Util.getFileCharContent(new File(arg.substring(1)), null))));", "+\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\tString line;", "+\t\t\t\t\twhile((line = reader.readLine()) != null) {", "+\t\t\t\t\t\tline = line.trim();", "+\t\t\t\t\t\tif (!line.startsWith(\"#\")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\tbuffer.append(line).append(\" \"); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tnewArgs = tokenize(buffer.toString());", "+\t\t\t\t} catch(IOException e) {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tthis.bind(\"configure.invalidexpansionargumentname\", arg)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (newArgs != null) {", "+\t\t\t\tint newCommandLineArgsLength = newCommandLineArgs.length;", "+\t\t\t\tint newArgsLength = newArgs.length;", "+\t\t\t\tSystem.arraycopy(newCommandLineArgs, 0, (newCommandLineArgs = new String[newCommandLineArgsLength + newArgsLength - 1]), 0, index);", "+\t\t\t\tSystem.arraycopy(newArgs, 0, newCommandLineArgs, index, newArgsLength);", "+\t\t\t\tindex += newArgsLength;", "+\t\t\t} else {", "+\t\t\t\tnewCommandLineArgs[index++] = arg;", "+\t\t\t}", "+\t\t}", "+\t\tindex = -1;", "+\t} else {", "+\t\tnewCommandLineArgs = argv;", "+\t\tfor (int i = 0; i < argCount; i++) {", "+\t\t\tnewCommandLineArgs[i] = newCommandLineArgs[i].trim();", "+\t\t}", "+\t}", "+\targCount = newCommandLineArgs.length;", "+\tthis.expandedCommandLine = newCommandLineArgs;", "+\twhile (++index < argCount) {", "+", "+\t\tif (customEncoding != null) {", "+\t\t\tthrow new InvalidInputException(", "+\t\t\t\tthis.bind(\"configure.unexpectedCustomEncoding\", currentArg, customEncoding)); //$NON-NLS-1$", "+\t\t}", "+", "+\t\tcurrentArg = newCommandLineArgs[index];", "+", "+\t\tswitch(mode) {", "+\t\t\tcase DEFAULT :", "+\t\t\t\tif (currentArg.startsWith(\"[\")) { //$NON-NLS-1$", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tthis.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\tcurrentArg));", "+\t\t\t\t}", "+", "+\t\t\t\tif (currentArg.endsWith(\"]\")) { //$NON-NLS-1$", "+\t\t\t\t\t// look for encoding specification", "+\t\t\t\t\tint encodingStart = currentArg.indexOf('[') + 1;", "+\t\t\t\t\tif (encodingStart <= 1) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\t\tthis.bind(\"configure.unexpectedBracket\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tint encodingEnd = currentArg.length() - 1;", "+\t\t\t\t\tif (encodingStart >= 1) {", "+\t\t\t\t\t\tif (encodingStart < encodingEnd) {", "+\t\t\t\t\t\t\tcustomEncoding = currentArg.substring(encodingStart, encodingEnd);", "+\t\t\t\t\t\t\ttry { // ensure encoding is supported", "+\t\t\t\t\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), customEncoding);", "+\t\t\t\t\t\t\t} catch (UnsupportedEncodingException e) {", "+\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\t\t\tthis.bind(\"configure.unsupportedEncoding\", customEncoding)); //$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcurrentArg = currentArg.substring(0, encodingStart - 1);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t\tif (currentArg.endsWith(SuffixConstants.SUFFIX_STRING_java)) {", "+\t\t\t\t\tif (this.filenames == null) {", "+\t\t\t\t\t\tthis.filenames = new String[argCount - index];", "+\t\t\t\t\t\tthis.encodings = new String[argCount - index];", "+\t\t\t\t\t\tthis.destinationPaths = new String[argCount - index];", "+\t\t\t\t\t} else if (filesCount == this.filenames.length) {", "+\t\t\t\t\t\tint length = this.filenames.length;", "+\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\tthis.filenames,", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t(this.filenames = new String[length + argCount - index]),", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\tlength);", "+\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\tthis.encodings,", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t(this.encodings = new String[length + argCount - index]),", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\tlength);", "+\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\tthis.destinationPaths,", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t(this.destinationPaths = new String[length + argCount - index]),", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\tlength);", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.filenames[filesCount] = currentArg;", "+\t\t\t\t\tthis.encodings[filesCount++] = customEncoding;", "+\t\t\t\t\t// destination path cannot be specified upon an individual file", "+\t\t\t\t\tcustomEncoding = null;", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-log\")) { //$NON-NLS-1$", "+\t\t\t\t\tif (this.log != null)", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateLog\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_LOG;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-repeat\")) { //$NON-NLS-1$", "+\t\t\t\t\tif (this.maxRepetition > 0)", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateRepeat\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_REPETITION;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-maxProblems\")) { //$NON-NLS-1$", "+\t\t\t\t\tif (this.maxProblems > 0)", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateMaxProblems\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_MAX_PROBLEMS;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-source\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_SOURCE;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-encoding\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_DEFAULT_ENCODING;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-1.3\")) { //$NON-NLS-1$", "+\t\t\t\t\tif (didSpecifyCompliance) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg));//$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tdidSpecifyCompliance = true;", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-1.4\")) { //$NON-NLS-1$", "+\t\t\t\t\tif (didSpecifyCompliance) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tdidSpecifyCompliance = true;", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-1.5\") || currentArg.equals(\"-5\") || currentArg.equals(\"-5.0\")) { //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tif (didSpecifyCompliance) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tdidSpecifyCompliance = true;", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-1.6\") || currentArg.equals(\"-6\") || currentArg.equals(\"-6.0\")) { //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tif (didSpecifyCompliance) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tdidSpecifyCompliance = true;", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_6);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-1.7\") || currentArg.equals(\"-7\") || currentArg.equals(\"-7.0\")) { //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tif (didSpecifyCompliance) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tdidSpecifyCompliance = true;", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_7);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-d\")) { //$NON-NLS-1$", "+\t\t\t\t\tif (this.destinationPath != null) {", "+\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "+\t\t\t\t\t\terrorMessage.append(currentArg);", "+\t\t\t\t\t\tif ((index + 1) < argCount) {", "+\t\t\t\t\t\t\terrorMessage.append(' ');", "+\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateOutputPath\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tmode = INSIDE_DESTINATION_PATH;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-classpath\") //$NON-NLS-1$", "+\t\t\t\t\t|| currentArg.equals(\"-cp\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_CLASSPATH_start;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-bootclasspath\")) {//$NON-NLS-1$", "+\t\t\t\t\tif (bootclasspaths.size() > 0) {", "+\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "+\t\t\t\t\t\terrorMessage.append(currentArg);", "+\t\t\t\t\t\tif ((index + 1) < argCount) {", "+\t\t\t\t\t\t\terrorMessage.append(' ');", "+\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateBootClasspath\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tmode = INSIDE_BOOTCLASSPATH_start;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-sourcepath\")) {//$NON-NLS-1$", "+\t\t\t\t\tif (sourcepathClasspathArg != null) {", "+\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "+\t\t\t\t\t\terrorMessage.append(currentArg);", "+\t\t\t\t\t\tif ((index + 1) < argCount) {", "+\t\t\t\t\t\t\terrorMessage.append(' ');", "+\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateSourcepath\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tmode = INSIDE_SOURCE_PATH_start;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-extdirs\")) {//$NON-NLS-1$", "+\t\t\t\t\tif (extdirsClasspaths != null) {", "+\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "+\t\t\t\t\t\terrorMessage.append(currentArg);", "+\t\t\t\t\t\tif ((index + 1) < argCount) {", "+\t\t\t\t\t\t\terrorMessage.append(' ');", "+\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateExtDirs\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tmode = INSIDE_EXT_DIRS;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-endorseddirs\")) { //$NON-NLS-1$", "+\t\t\t\t\tif (endorsedDirClasspaths != null) {", "+\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "+\t\t\t\t\t\terrorMessage.append(currentArg);", "+\t\t\t\t\t\tif ((index + 1) < argCount) {", "+\t\t\t\t\t\t\terrorMessage.append(' ');", "+\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.duplicateEndorsedDirs\", errorMessage.toString())); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tmode = INSIDE_ENDORSED_DIRS;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-progress\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tthis.showProgress = true;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-proceedOnError\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tthis.proceedOnError = true;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-time\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tthis.timing = TIMING_ENABLED;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-time:detail\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tthis.timing = TIMING_ENABLED|TIMING_DETAILED;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-version\") //$NON-NLS-1$", "+\t\t\t\t\t\t|| currentArg.equals(\"-v\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.logger.logVersion(true);", "+\t\t\t\t\tthis.proceed = false;", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-showversion\")) { //$NON-NLS-1$", "+\t\t\t\t\tprintVersionRequired = true;", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (\"-deprecation\".equals(currentArg)) { //$NON-NLS-1$", "+\t\t\t\t\tdidSpecifyDeprecation = true;", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-help\") || currentArg.equals(\"-?\")) { //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\tprintUsageRequired = true;", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-help:warn\") || //$NON-NLS-1$", "+\t\t\t\t\t\tcurrentArg.equals(\"-?:warn\")) { //$NON-NLS-1$", "+\t\t\t\t\tprintUsageRequired = true;", "+\t\t\t\t\tusageSection = \"misc.usage.warn\"; //$NON-NLS-1$", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-noExit\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.systemExitWhenFinished = false;", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-verbose\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.verbose = true;", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-referenceInfo\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.produceRefInfo = true;", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-inlineJSR\")) { //$NON-NLS-1$", "+\t\t\t\t    mode = DEFAULT;", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_InlineJsr,", "+\t\t\t\t\t\t\tCompilerOptions.ENABLED);", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.startsWith(\"-g\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tString debugOption = currentArg;", "+\t\t\t\t\tint length = currentArg.length();", "+\t\t\t\t\tif (length == 2) {", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_LocalVariableAttribute,", "+\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_LineNumberAttribute,", "+\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_SourceFileAttribute,", "+\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (length > 3) {", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_LocalVariableAttribute,", "+\t\t\t\t\t\t\tCompilerOptions.DO_NOT_GENERATE);", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_LineNumberAttribute,", "+\t\t\t\t\t\t\tCompilerOptions.DO_NOT_GENERATE);", "+\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\tCompilerOptions.OPTION_SourceFileAttribute,", "+\t\t\t\t\t\t\tCompilerOptions.DO_NOT_GENERATE);", "+\t\t\t\t\t\tif (length == 7 && debugOption.equals(\"-g:\" + NONE)) //$NON-NLS-1$", "+\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\tStringTokenizer tokenizer =", "+\t\t\t\t\t\t\tnew StringTokenizer(debugOption.substring(3, debugOption.length()), \",\"); //$NON-NLS-1$", "+\t\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\t\t\tString token = tokenizer.nextToken();", "+\t\t\t\t\t\t\tif (token.equals(\"vars\")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\t\t\tCompilerOptions.OPTION_LocalVariableAttribute,", "+\t\t\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "+\t\t\t\t\t\t\t} else if (token.equals(\"lines\")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\t\t\tCompilerOptions.OPTION_LineNumberAttribute,", "+\t\t\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "+\t\t\t\t\t\t\t} else if (token.equals(\"source\")) { //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\t\t\t\tCompilerOptions.OPTION_SourceFileAttribute,", "+\t\t\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\t\t\tthis.bind(\"configure.invalidDebugOption\", debugOption)); //$NON-NLS-1$", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tthis.bind(\"configure.invalidDebugOption\", debugOption)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.startsWith(\"-nowarn\")) { //$NON-NLS-1$", "+\t\t\t\t\tdisableWarnings();", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.startsWith(\"-warn\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tString warningOption = currentArg;", "+\t\t\t\t\tint length = currentArg.length();", "+\t\t\t\t\tif (length == 10 && warningOption.equals(\"-warn:\" + NONE)) { //$NON-NLS-1$", "+\t\t\t\t\t\tdisableWarnings();", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (length <= 6) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.invalidWarningConfiguration\", warningOption)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tint warnTokenStart;", "+\t\t\t\t\tboolean isEnabling, allowPlusOrMinus;", "+\t\t\t\t\tswitch (warningOption.charAt(6)) {", "+\t\t\t\t\t\tcase '+' :", "+\t\t\t\t\t\t\twarnTokenStart = 7;", "+\t\t\t\t\t\t\tisEnabling = true;", "+\t\t\t\t\t\t\tallowPlusOrMinus = true;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase '-' :", "+\t\t\t\t\t\t\twarnTokenStart = 7;", "+\t\t\t\t\t\t\tisEnabling = false; // mentionned warnings are disabled", "+\t\t\t\t\t\t\tallowPlusOrMinus = true;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\tdisableWarnings();", "+\t\t\t\t\t\t\twarnTokenStart = 6;", "+\t\t\t\t\t\t\tisEnabling = true;", "+\t\t\t\t\t\t\tallowPlusOrMinus = false;", "+\t\t\t\t\t}", "+", "+\t\t\t\t\tStringTokenizer tokenizer =", "+\t\t\t\t\t\tnew StringTokenizer(warningOption.substring(warnTokenStart, warningOption.length()), \",\"); //$NON-NLS-1$", "+\t\t\t\t\tint tokenCounter = 0;", "+", "+\t\t\t\t\tif (didSpecifyDeprecation) {  // deprecation could have also been set through -deprecation option", "+\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);", "+\t\t\t\t\t}", "+", "+\t\t\t\t\tnextToken: while (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\t\tString token = tokenizer.nextToken();", "+\t\t\t\t\t\ttokenCounter++;", "+\t\t\t\t\t\tswitch(token.charAt(0)) {", "+\t\t\t\t\t\t\tcase '+' :", "+\t\t\t\t\t\t\t\tif (allowPlusOrMinus) {", "+\t\t\t\t\t\t\t\t\tisEnabling = true;", "+\t\t\t\t\t\t\t\t\ttoken = token.substring(1);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\ttokenCounter = 0;", "+\t\t\t\t\t\t\t\t\tbreak nextToken;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase '-' :", "+\t\t\t\t\t\t\t\tif (allowPlusOrMinus) {", "+\t\t\t\t\t\t\t\t\tisEnabling = false;", "+\t\t\t\t\t\t\t\t\ttoken = token.substring(1);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\ttokenCounter = 0;", "+\t\t\t\t\t\t\t\t\tbreak nextToken;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\thandleWarningToken(token, isEnabling);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (tokenCounter == 0) {", "+\t\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\t\tthis.bind(\"configure.invalidWarningOption\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-target\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_TARGET;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-preserveAllLocals\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_PreserveUnusedLocal,", "+\t\t\t\t\t\tCompilerOptions.PRESERVE);", "+\t\t\t\t    mode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-enableJavadoc\")) {//$NON-NLS-1$", "+\t\t\t\t    mode = DEFAULT;", "+\t\t\t\t\tthis.enableJavadocOn = true;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-Xemacs\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tthis.logger.setEmacs();", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\t// annotation processing", "+\t\t\t\tif (currentArg.startsWith(\"-A\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-processorpath\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_PROCESSOR_PATH_start;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-processor\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_PROCESSOR_start;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-proc:only\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_GenerateClassFiles,", "+\t\t\t\t\t\tCompilerOptions.DISABLED);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-proc:none\")) { //$NON-NLS-1$", "+\t\t\t\t\tdidSpecifyDisabledAnnotationProcessing = true;", "+\t\t\t\t\tthis.options.put(", "+\t\t\t\t\t\tCompilerOptions.OPTION_Process_Annotations,", "+\t\t\t\t\t\tCompilerOptions.DISABLED);", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-s\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_S_start;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-XprintProcessorInfo\") //$NON-NLS-1$", "+\t\t\t\t\t\t|| currentArg.equals(\"-XprintRounds\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\t// tolerated javac options - quietly filtered out", "+\t\t\t\tif (currentArg.startsWith(\"-X\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.startsWith(\"-J\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-O\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = DEFAULT;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tif (currentArg.equals(\"-classNames\")) { //$NON-NLS-1$", "+\t\t\t\t\tmode = INSIDE_CLASS_NAMES;", "+\t\t\t\t\tcontinue;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase INSIDE_TARGET :", "+\t\t\t\tif (this.didSpecifyTarget) {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tthis.bind(\"configure.duplicateTarget\", currentArg));//$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tthis.didSpecifyTarget = true;", "+\t\t\t\tif (currentArg.equals(\"1.1\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);", "+\t\t\t\t} else if (currentArg.equals(\"1.2\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "+\t\t\t\t} else if (currentArg.equals(\"1.3\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_3);", "+\t\t\t\t} else if (currentArg.equals(\"1.4\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "+\t\t\t\t} else if (currentArg.equals(\"1.5\") || currentArg.equals(\"5\") || currentArg.equals(\"5.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "+\t\t\t\t} else if (currentArg.equals(\"1.6\") || currentArg.equals(\"6\") || currentArg.equals(\"6.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);", "+\t\t\t\t} else if (currentArg.equals(\"1.7\") || currentArg.equals(\"7\") || currentArg.equals(\"7.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_7);", "+\t\t\t\t} else if (currentArg.equals(\"jsr14\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_JSR14);", "+\t\t\t\t} else if (currentArg.equals(\"cldc1.1\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_CLDC1_1);", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_InlineJsr, CompilerOptions.ENABLED);", "+\t\t\t\t}else {", "+\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.targetJDK\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_LOG :", "+\t\t\t\tthis.log = currentArg;", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_REPETITION :", "+\t\t\t\ttry {", "+\t\t\t\t\tthis.maxRepetition = Integer.parseInt(currentArg);", "+\t\t\t\t\tif (this.maxRepetition <= 0) {", "+\t\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.repetition\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.repetition\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_MAX_PROBLEMS :", "+\t\t\t\ttry {", "+\t\t\t\t\tthis.maxProblems = Integer.parseInt(currentArg);", "+\t\t\t\t\tif (this.maxProblems <= 0) {", "+\t\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.maxProblems\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_MaxProblemPerUnit, currentArg);", "+\t\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.maxProblems\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_SOURCE :", "+\t\t\t\tif (this.didSpecifySource) {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tthis.bind(\"configure.duplicateSource\", currentArg));//$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tthis.didSpecifySource = true;", "+\t\t\t\tif (currentArg.equals(\"1.3\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);", "+\t\t\t\t} else if (currentArg.equals(\"1.4\")) { //$NON-NLS-1$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_4);", "+\t\t\t\t} else if (currentArg.equals(\"1.5\") || currentArg.equals(\"5\") || currentArg.equals(\"5.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_5);", "+\t\t\t\t} else if (currentArg.equals(\"1.6\") || currentArg.equals(\"6\") || currentArg.equals(\"6.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_6);", "+\t\t\t\t} else if (currentArg.equals(\"1.7\") || currentArg.equals(\"7\") || currentArg.equals(\"7.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_7);", "+\t\t\t\t} else {", "+\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.source\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_DEFAULT_ENCODING :", "+\t\t\t\tif (didSpecifyDefaultEncoding) {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tthis.bind(\"configure.duplicateDefaultEncoding\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\ttry { // ensure encoding is supported", "+\t\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), currentArg);", "+\t\t\t\t} catch (UnsupportedEncodingException e) {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tthis.bind(\"configure.unsupportedEncoding\", currentArg)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tthis.options.put(CompilerOptions.OPTION_Encoding, currentArg);", "+\t\t\t\tdidSpecifyDefaultEncoding = true;", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_DESTINATION_PATH :", "+\t\t\t\tthis.setDestinationPath(currentArg.equals(NONE) ? NONE : currentArg);", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_CLASSPATH_start:", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tindex += processPaths(newCommandLineArgs, index, currentArg, classpaths);", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_BOOTCLASSPATH_start:", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tindex += processPaths(newCommandLineArgs, index, currentArg, bootclasspaths);", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_SOURCE_PATH_start:", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tString[] sourcePaths = new String[1];", "+\t\t\t\tindex += processPaths(newCommandLineArgs, index, currentArg, sourcePaths);", "+\t\t\t\tsourcepathClasspathArg = sourcePaths[0];", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_EXT_DIRS:", "+\t\t\t\tif (currentArg.indexOf(\"[-d\") != -1) { //$NON-NLS-1$", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tthis.bind(\"configure.unexpectedDestinationPathEntry\", //$NON-NLS-1$", "+\t\t\t\t\t\t\t\"-extdir\")); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(currentArg,\tFile.pathSeparator, false);", "+\t\t\t\textdirsClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\t\t\t\twhile (tokenizer.hasMoreTokens())", "+\t\t\t\t\textdirsClasspaths.add(tokenizer.nextToken());", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_ENDORSED_DIRS:", "+\t\t\t\tif (currentArg.indexOf(\"[-d\") != -1) { //$NON-NLS-1$", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tthis.bind(\"configure.unexpectedDestinationPathEntry\", //$NON-NLS-1$", "+\t\t\t\t\t\t\t\"-endorseddirs\")); //$NON-NLS-1$", "+\t\t\t\t}\t\t\t\ttokenizer = new StringTokenizer(currentArg,\tFile.pathSeparator, false);", "+\t\t\t\tendorsedDirClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "+\t\t\t\twhile (tokenizer.hasMoreTokens())", "+\t\t\t\t\tendorsedDirClasspaths.add(tokenizer.nextToken());", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_SOURCE_DIRECTORY_DESTINATION_PATH:", "+\t\t\t\tif (currentArg.endsWith(\"]\")) { //$NON-NLS-1$", "+\t\t\t\t\tcustomDestinationPath = currentArg.substring(0,", "+\t\t\t\t\t\tcurrentArg.length() - 1);", "+\t\t\t\t} else {", "+\t\t\t\t\tthrow new InvalidInputException(", "+\t\t\t\t\t\tthis.bind(\"configure.incorrectDestinationPathEntry\", //$NON-NLS-1$", "+\t\t\t\t\t\t\t\"[-d \" + currentArg)); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase INSIDE_PROCESSOR_PATH_start :", "+\t\t\t\t// nothing to do here. This is consumed again by the AnnotationProcessorManager", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_PROCESSOR_start :", "+\t\t\t\t// nothing to do here. This is consumed again by the AnnotationProcessorManager", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_S_start :", "+\t\t\t\t// nothing to do here. This is consumed again by the AnnotationProcessorManager", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t\tcase INSIDE_CLASS_NAMES :", "+\t\t\t\ttokenizer = new StringTokenizer(currentArg, \",\"); //$NON-NLS-1$", "+\t\t\t\tif (this.classNames == null) {", "+\t\t\t\t\tthis.classNames = new String[DEFAULT_SIZE_CLASSPATH];", "+\t\t\t\t}", "+\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\tif (this.classNames.length == classCount) {", "+\t\t\t\t\t\t// resize", "+\t\t\t\t\t\tSystem.arraycopy(", "+\t\t\t\t\t\t\tthis.classNames,", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\t(this.classNames = new String[classCount * 2]),", "+\t\t\t\t\t\t\t0,", "+\t\t\t\t\t\t\tclassCount);", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.classNames[classCount++] = tokenizer.nextToken();", "+\t\t\t\t}", "+\t\t\t\tmode = DEFAULT;", "+\t\t\t\tcontinue;", "+\t\t}", "+", "+\t\t// default is input directory, if no custom destination path exists", "+\t\tif (customDestinationPath == null) {", "+\t\t\tif (File.separatorChar != '/') {", "+\t\t\t\tcurrentArg = currentArg.replace('/', File.separatorChar);", "+\t\t\t}", "+\t\t\tif (currentArg.endsWith(\"[-d\")) { //$NON-NLS-1$", "+\t\t\t\tcurrentSourceDirectory = currentArg.substring(0,", "+\t\t\t\t\tcurrentArg.length() - 3);", "+\t\t\t\tmode = INSIDE_SOURCE_DIRECTORY_DESTINATION_PATH;", "+\t\t\t\tcontinue;", "+\t\t\t}", "+\t\t\tcurrentSourceDirectory = currentArg;", "+\t\t}", "+\t\tFile dir = new File(currentSourceDirectory);", "+\t\tif (!dir.isDirectory()) {", "+\t\t\tthrow new InvalidInputException(", "+\t\t\t\tthis.bind(\"configure.unrecognizedOption\", currentSourceDirectory)); //$NON-NLS-1$", "+\t\t}", "+\t\tString[] result = FileFinder.find(dir, SuffixConstants.SUFFIX_STRING_JAVA);", "+\t\tif (NONE.equals(customDestinationPath)) {", "+\t\t\tcustomDestinationPath = NONE; // ensure == comparison", "+\t\t}", "+\t\tif (this.filenames != null) {", "+\t\t\t// some source files were specified explicitly", "+\t\t\tint length = result.length;", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tthis.filenames,", "+\t\t\t\t0,", "+\t\t\t\t(this.filenames = new String[length + filesCount]),", "+\t\t\t\t0,", "+\t\t\t\tfilesCount);", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tthis.encodings,", "+\t\t\t\t0,", "+\t\t\t\t(this.encodings = new String[length + filesCount]),", "+\t\t\t\t0,", "+\t\t\t\tfilesCount);", "+\t\t\tSystem.arraycopy(", "+\t\t\t\tthis.destinationPaths,", "+\t\t\t\t0,", "+\t\t\t\t(this.destinationPaths = new String[length + filesCount]),", "+\t\t\t\t0,", "+\t\t\t\tfilesCount);", "+\t\t\tSystem.arraycopy(result, 0, this.filenames, filesCount, length);", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tthis.encodings[filesCount + i] = customEncoding;", "+\t\t\t\tthis.destinationPaths[filesCount + i] = customDestinationPath;", "+\t\t\t}", "+\t\t\tfilesCount += length;", "+\t\t\tcustomEncoding = null;", "+\t\t\tcustomDestinationPath = null;", "+\t\t\tcurrentSourceDirectory = null;", "+\t\t} else {", "+\t\t\tthis.filenames = result;", "+\t\t\tfilesCount = this.filenames.length;", "+\t\t\tthis.encodings = new String[filesCount];", "+\t\t\tthis.destinationPaths = new String[filesCount];", "+\t\t\tfor (int i = 0; i < filesCount; i++) {", "+\t\t\t\tthis.encodings[i] = customEncoding;", "+\t\t\t\tthis.destinationPaths[i] = customDestinationPath;", "+\t\t\t}", "+\t\t\tcustomEncoding = null;", "+\t\t\tcustomDestinationPath = null;", "+\t\t\tcurrentSourceDirectory = null;", "+\t\t}", "+\t\tmode = DEFAULT;", "+\t\tcontinue;", "+\t}", "+\t", "+\t// set DocCommentSupport, with appropriate side effects on defaults if ", "+\t// javadoc is not enabled", "+\tif (this.enableJavadocOn) {", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_DocCommentSupport,", "+\t\t\tCompilerOptions.ENABLED);", "+\t} else if (this.warnJavadocOn || this.warnAllJavadocOn) {", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_DocCommentSupport,", "+\t\t\tCompilerOptions.ENABLED);", "+\t\t// override defaults: references that are embedded in javadoc are ignored", "+\t\t// from the perspective of parameters and thrown exceptions usage", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportUnusedParameterIncludeDocCommentReference,", "+\t\t\tCompilerOptions.DISABLED);", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionIncludeDocCommentReference,", "+\t\t\tCompilerOptions.DISABLED);", "+\t}", "+\t// configure warnings for javadoc contents", "+\tif (this.warnJavadocOn) {", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportInvalidJavadoc,", "+\t\t\tCompilerOptions.WARNING);", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTags,", "+\t\t\tCompilerOptions.ENABLED);", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsDeprecatedRef,", "+\t\t\tCompilerOptions.ENABLED);", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsNotVisibleRef,", "+\t\t\tCompilerOptions.ENABLED);", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTags,", "+\t\t\tCompilerOptions.WARNING);", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTagsVisibility,", "+\t\t\tCompilerOptions.PRIVATE);", "+\t}", "+\tif (this.warnAllJavadocOn) {", "+\t\tthis.options.put(", "+\t\t\tCompilerOptions.OPTION_ReportMissingJavadocComments,", "+\t\t\tCompilerOptions.WARNING);", "+\t}", "+", "+\tif (printUsageRequired || (filesCount == 0 && classCount == 0)) {", "+\t\tif (usageSection ==  null) {", "+\t\t\tprintUsage(); // default", "+\t\t} else {", "+\t\t\tprintUsage(usageSection);", "+\t\t}", "+\t\tthis.proceed = false;", "+\t\treturn;", "+\t}", "+", "+\tif (this.log != null) {", "+\t\tthis.logger.setLog(this.log);", "+\t} else {", "+\t\tthis.showProgress = false;", "+\t}", "+\tthis.logger.logVersion(printVersionRequired);", "+", "+\tvalidateOptions(didSpecifyCompliance);", "+\t", "+\t// Enable annotation processing by default in batch mode when compliance is at least 1.6", "+\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=185768", "+\tif (!didSpecifyDisabledAnnotationProcessing", "+\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) >= ClassFileConstants.JDK1_6) {", "+\t\tthis.options.put(CompilerOptions.OPTION_Process_Annotations, CompilerOptions.ENABLED);", "+\t}", "+", "+\tthis.logger.logCommandLineArguments(newCommandLineArgs);", "+\tthis.logger.logOptions(this.options);", "+", "+\tif (this.maxRepetition == 0) {", "+\t\tthis.maxRepetition = 1;", "+\t}", "+\tif (this.maxRepetition >= 3 && (this.timing & TIMING_ENABLED) != 0) {", "+\t\tthis.compilerStats = new CompilerStats[this.maxRepetition];", "+\t}", "+", "+\tif (filesCount != 0) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.filenames,", "+\t\t\t0,", "+\t\t\t(this.filenames = new String[filesCount]),", "+\t\t\t0,", "+\t\t\tfilesCount);", "+\t}", "+", "+\tif (classCount != 0) {", "+\t\tSystem.arraycopy(", "+\t\t\tthis.classNames,", "+\t\t\t0,", "+\t\t\t(this.classNames = new String[classCount]),", "+\t\t\t0,", "+\t\t\tclassCount);", "+\t}", "+\t", "+\tsetPaths(bootclasspaths,", "+\t\t\tsourcepathClasspathArg,", "+\t\t\tsourcepathClasspaths,", "+\t\t\tclasspaths,", "+\t\t\textdirsClasspaths,", "+\t\t\tendorsedDirClasspaths,", "+\t\t\tcustomEncoding);", "+\t", "+\tif (this.pendingErrors != null) {", "+\t\tfor (Iterator iterator = this.pendingErrors.iterator(); iterator.hasNext(); ) {", "+\t\t\tString message = (String) iterator.next();", "+\t\t\tthis.logger.logPendingError(message);", "+\t\t}", "+\t\tthis.pendingErrors = null;", "+\t}", "+}", "- */", "-public void configure(String[] argv) throws InvalidInputException {", "-", "-\tif ((argv == null) || (argv.length == 0)) {", "-\t\tprintUsage();", "-\t\treturn;", "-\t}", "-", "-\tfinal int INSIDE_CLASSPATH_start = 1;", "-\tfinal int INSIDE_DESTINATION_PATH = 3;", "-\tfinal int INSIDE_TARGET = 4;", "-\tfinal int INSIDE_LOG = 5;", "-\tfinal int INSIDE_REPETITION = 6;", "-\tfinal int INSIDE_SOURCE = 7;", "-\tfinal int INSIDE_DEFAULT_ENCODING = 8;", "-\tfinal int INSIDE_BOOTCLASSPATH_start = 9;", "-\tfinal int INSIDE_MAX_PROBLEMS = 11;", "-\tfinal int INSIDE_EXT_DIRS = 12;", "-\tfinal int INSIDE_SOURCE_PATH_start = 13;", "-\tfinal int INSIDE_ENDORSED_DIRS = 15;", "-\tfinal int INSIDE_SOURCE_DIRECTORY_DESTINATION_PATH = 16;", "-\tfinal int INSIDE_PROCESSOR_PATH_start = 17;", "-\tfinal int INSIDE_PROCESSOR_start = 18;", "-\tfinal int INSIDE_S_start = 19;", "-\tfinal int INSIDE_CLASS_NAMES = 20;", "-", "-\tfinal int DEFAULT = 0;", "-\tArrayList bootclasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\tString sourcepathClasspathArg = null;", "-\tArrayList sourcepathClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\tArrayList classpaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\tArrayList extdirsClasspaths = null;", "-\tArrayList endorsedDirClasspaths = null;", "-", "-\tint index = -1;", "-\tint filesCount = 0;", "-\tint classCount = 0;", "-\tint argCount = argv.length;", "-\tint mode = DEFAULT;", "-\tthis.repetitions = 0;", "-\tboolean printUsageRequired = false;", "-\tString usageSection = null;", "-\tboolean printVersionRequired = false;", "-", "-\tboolean didSpecifyDefaultEncoding = false;", "-\tboolean didSpecifyDeprecation = false;", "-\tboolean didSpecifyCompliance = false;", "-\tboolean didSpecifyDisabledAnnotationProcessing = false;", "-", "-\tString customEncoding = null;", "-\tString customDestinationPath = null;", "-\tString currentSourceDirectory = null;", "-\tString currentArg = Util.EMPTY_STRING;", "-", "-\t// expand the command line if necessary", "-\tboolean needExpansion = false;", "-\tloop: for (int i = 0; i < argCount; i++) {", "-\t\t\tif (argv[i].startsWith(\"@\")) { //$NON-NLS-1$", "-\t\t\t\tneedExpansion = true;", "-\t\t\t\tbreak loop;", "-\t\t\t}", "-\t}", "-", "-\tString[] newCommandLineArgs = null;", "-\tif (needExpansion) {", "-\t\tnewCommandLineArgs = new String[argCount];", "-\t\tindex = 0;", "-\t\tfor (int i = 0; i < argCount; i++) {", "-\t\t\tString[] newArgs = null;", "-\t\t\tString arg = argv[i].trim();", "-\t\t\tif (arg.startsWith(\"@\")) { //$NON-NLS-1$", "-\t\t\t\ttry {", "-\t\t\t\t\tLineNumberReader reader = new LineNumberReader(new StringReader(new String(Util.getFileCharContent(new File(arg.substring(1)), null))));", "-\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t\tString line;", "-\t\t\t\t\twhile((line = reader.readLine()) != null) {", "-\t\t\t\t\t\tline = line.trim();", "-\t\t\t\t\t\tif (!line.startsWith(\"#\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tbuffer.append(line).append(\" \"); //$NON-NLS-1$", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tnewArgs = tokenize(buffer.toString());", "-\t\t\t\t} catch(IOException e) {", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tthis.bind(\"configure.invalidexpansionargumentname\", arg)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (newArgs != null) {", "-\t\t\t\tint newCommandLineArgsLength = newCommandLineArgs.length;", "-\t\t\t\tint newArgsLength = newArgs.length;", "-\t\t\t\tSystem.arraycopy(newCommandLineArgs, 0, (newCommandLineArgs = new String[newCommandLineArgsLength + newArgsLength - 1]), 0, index);", "-\t\t\t\tSystem.arraycopy(newArgs, 0, newCommandLineArgs, index, newArgsLength);", "-\t\t\t\tindex += newArgsLength;", "-\t\t\t} else {", "-\t\t\t\tnewCommandLineArgs[index++] = arg;", "-\t\t\t}", "-\t\t}", "-\t\tindex = -1;", "-\t} else {", "-\t\tnewCommandLineArgs = argv;", "-\t\tfor (int i = 0; i < argCount; i++) {", "-\t\t\tnewCommandLineArgs[i] = newCommandLineArgs[i].trim();", "-\t\t}", "-\t}", "-\targCount = newCommandLineArgs.length;", "-\tthis.expandedCommandLine = newCommandLineArgs;", "-\twhile (++index < argCount) {", "-", "-\t\tif (customEncoding != null) {", "-\t\t\tthrow new InvalidInputException(", "-\t\t\t\tthis.bind(\"configure.unexpectedCustomEncoding\", currentArg, customEncoding)); //$NON-NLS-1$", "-\t\t}", "-", "-\t\tcurrentArg = newCommandLineArgs[index];", "-", "-\t\tswitch(mode) {", "-\t\t\tcase DEFAULT :", "-\t\t\t\tif (currentArg.startsWith(\"[\")) { //$NON-NLS-1$", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tthis.bind(\"configure.unexpectedBracket\", //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\tcurrentArg));", "-\t\t\t\t}", "-", "-\t\t\t\tif (currentArg.endsWith(\"]\")) { //$NON-NLS-1$", "-\t\t\t\t\t// look for encoding specification", "-\t\t\t\t\tint encodingStart = currentArg.indexOf('[') + 1;", "-\t\t\t\t\tif (encodingStart <= 1) {", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\t\tthis.bind(\"configure.unexpectedBracket\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tint encodingEnd = currentArg.length() - 1;", "-\t\t\t\t\tif (encodingStart >= 1) {", "-\t\t\t\t\t\tif (encodingStart < encodingEnd) {", "-\t\t\t\t\t\t\tcustomEncoding = currentArg.substring(encodingStart, encodingEnd);", "-\t\t\t\t\t\t\ttry { // ensure encoding is supported", "-\t\t\t\t\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), customEncoding);", "-\t\t\t\t\t\t\t} catch (UnsupportedEncodingException e) {", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\t\t\tthis.bind(\"configure.unsupportedEncoding\", customEncoding)); //$NON-NLS-1$", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcurrentArg = currentArg.substring(0, encodingStart - 1);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-", "-\t\t\t\tif (currentArg.endsWith(SuffixConstants.SUFFIX_STRING_java)) {", "-\t\t\t\t\tif (this.filenames == null) {", "-\t\t\t\t\t\tthis.filenames = new String[argCount - index];", "-\t\t\t\t\t\tthis.encodings = new String[argCount - index];", "-\t\t\t\t\t\tthis.destinationPaths = new String[argCount - index];", "-\t\t\t\t\t} else if (filesCount == this.filenames.length) {", "-\t\t\t\t\t\tint length = this.filenames.length;", "-\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\tthis.filenames,", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t(this.filenames = new String[length + argCount - index]),", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\tlength);", "-\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\tthis.encodings,", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t(this.encodings = new String[length + argCount - index]),", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\tlength);", "-\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\tthis.destinationPaths,", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t(this.destinationPaths = new String[length + argCount - index]),", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\tlength);", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.filenames[filesCount] = currentArg;", "-\t\t\t\t\tthis.encodings[filesCount++] = customEncoding;", "-\t\t\t\t\t// destination path cannot be specified upon an individual file", "-\t\t\t\t\tcustomEncoding = null;", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-log\")) { //$NON-NLS-1$", "-\t\t\t\t\tif (this.log != null)", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateLog\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_LOG;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-repeat\")) { //$NON-NLS-1$", "-\t\t\t\t\tif (this.repetitions > 0)", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateRepeat\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_REPETITION;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-maxProblems\")) { //$NON-NLS-1$", "-\t\t\t\t\tif (this.maxProblems > 0)", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateMaxProblems\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_MAX_PROBLEMS;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-source\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_SOURCE;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-encoding\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_DEFAULT_ENCODING;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-1.3\")) { //$NON-NLS-1$", "-\t\t\t\t\tif (didSpecifyCompliance) {", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg));//$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tdidSpecifyCompliance = true;", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_3);", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-1.4\")) { //$NON-NLS-1$", "-\t\t\t\t\tif (didSpecifyCompliance) {", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tdidSpecifyCompliance = true;", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_4);", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-1.5\") || currentArg.equals(\"-5\") || currentArg.equals(\"-5.0\")) { //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\t\t\t\tif (didSpecifyCompliance) {", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tdidSpecifyCompliance = true;", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_5);", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-1.6\") || currentArg.equals(\"-6\") || currentArg.equals(\"-6.0\")) { //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\t\t\t\tif (didSpecifyCompliance) {", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tdidSpecifyCompliance = true;", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_6);", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-1.7\") || currentArg.equals(\"-7\") || currentArg.equals(\"-7.0\")) { //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\t\t\t\tif (didSpecifyCompliance) {", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateCompliance\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tdidSpecifyCompliance = true;", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_7);", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-d\")) { //$NON-NLS-1$", "-\t\t\t\t\tif (this.destinationPath != null) {", "-\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "-\t\t\t\t\t\terrorMessage.append(currentArg);", "-\t\t\t\t\t\tif ((index + 1) < argCount) {", "-\t\t\t\t\t\t\terrorMessage.append(' ');", "-\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateOutputPath\", errorMessage.toString())); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tmode = INSIDE_DESTINATION_PATH;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-classpath\") //$NON-NLS-1$", "-\t\t\t\t\t|| currentArg.equals(\"-cp\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_CLASSPATH_start;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-bootclasspath\")) {//$NON-NLS-1$", "-\t\t\t\t\tif (bootclasspaths.size() > 0) {", "-\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "-\t\t\t\t\t\terrorMessage.append(currentArg);", "-\t\t\t\t\t\tif ((index + 1) < argCount) {", "-\t\t\t\t\t\t\terrorMessage.append(' ');", "-\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateBootClasspath\", errorMessage.toString())); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tmode = INSIDE_BOOTCLASSPATH_start;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-sourcepath\")) {//$NON-NLS-1$", "-\t\t\t\t\tif (sourcepathClasspathArg != null) {", "-\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "-\t\t\t\t\t\terrorMessage.append(currentArg);", "-\t\t\t\t\t\tif ((index + 1) < argCount) {", "-\t\t\t\t\t\t\terrorMessage.append(' ');", "-\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateSourcepath\", errorMessage.toString())); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tmode = INSIDE_SOURCE_PATH_start;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-extdirs\")) {//$NON-NLS-1$", "-\t\t\t\t\tif (extdirsClasspaths != null) {", "-\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "-\t\t\t\t\t\terrorMessage.append(currentArg);", "-\t\t\t\t\t\tif ((index + 1) < argCount) {", "-\t\t\t\t\t\t\terrorMessage.append(' ');", "-\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateExtDirs\", errorMessage.toString())); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tmode = INSIDE_EXT_DIRS;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-endorseddirs\")) { //$NON-NLS-1$", "-\t\t\t\t\tif (endorsedDirClasspaths != null) {", "-\t\t\t\t\t\tStringBuffer errorMessage = new StringBuffer();", "-\t\t\t\t\t\terrorMessage.append(currentArg);", "-\t\t\t\t\t\tif ((index + 1) < argCount) {", "-\t\t\t\t\t\t\terrorMessage.append(' ');", "-\t\t\t\t\t\t\terrorMessage.append(newCommandLineArgs[index + 1]);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.duplicateEndorsedDirs\", errorMessage.toString())); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tmode = INSIDE_ENDORSED_DIRS;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-progress\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tthis.showProgress = true;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-proceedOnError\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tthis.proceedOnError = true;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-time\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tthis.timing = true;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-version\") //$NON-NLS-1$", "-\t\t\t\t\t\t|| currentArg.equals(\"-v\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.logger.logVersion(true);", "-\t\t\t\t\tthis.proceed = false;", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-showversion\")) { //$NON-NLS-1$", "-\t\t\t\t\tprintVersionRequired = true;", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (\"-deprecation\".equals(currentArg)) { //$NON-NLS-1$", "-\t\t\t\t\tdidSpecifyDeprecation = true;", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-help\") || currentArg.equals(\"-?\")) { //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\tprintUsageRequired = true;", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-help:warn\") || //$NON-NLS-1$", "-\t\t\t\t\t\tcurrentArg.equals(\"-?:warn\")) { //$NON-NLS-1$", "-\t\t\t\t\tprintUsageRequired = true;", "-\t\t\t\t\tusageSection = \"misc.usage.warn\"; //$NON-NLS-1$", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-noExit\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.systemExitWhenFinished = false;", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-verbose\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.verbose = true;", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-referenceInfo\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.produceRefInfo = true;", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-inlineJSR\")) { //$NON-NLS-1$", "-\t\t\t\t    mode = DEFAULT;", "-\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_InlineJsr,", "-\t\t\t\t\t\t\tCompilerOptions.ENABLED);", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.startsWith(\"-g\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tString debugOption = currentArg;", "-\t\t\t\t\tint length = currentArg.length();", "-\t\t\t\t\tif (length == 2) {", "-\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_LocalVariableAttribute,", "-\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "-\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_LineNumberAttribute,", "-\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "-\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_SourceFileAttribute,", "-\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (length > 3) {", "-\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_LocalVariableAttribute,", "-\t\t\t\t\t\t\tCompilerOptions.DO_NOT_GENERATE);", "-\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_LineNumberAttribute,", "-\t\t\t\t\t\t\tCompilerOptions.DO_NOT_GENERATE);", "-\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\tCompilerOptions.OPTION_SourceFileAttribute,", "-\t\t\t\t\t\t\tCompilerOptions.DO_NOT_GENERATE);", "-\t\t\t\t\t\tif (length == 7 && debugOption.equals(\"-g:\" + NONE)) //$NON-NLS-1$", "-\t\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t\tStringTokenizer tokenizer =", "-\t\t\t\t\t\t\tnew StringTokenizer(debugOption.substring(3, debugOption.length()), \",\"); //$NON-NLS-1$", "-\t\t\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\t\t\tString token = tokenizer.nextToken();", "-\t\t\t\t\t\t\tif (token.equals(\"vars\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\t\t\tCompilerOptions.OPTION_LocalVariableAttribute,", "-\t\t\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "-\t\t\t\t\t\t\t} else if (token.equals(\"lines\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\t\t\tCompilerOptions.OPTION_LineNumberAttribute,", "-\t\t\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "-\t\t\t\t\t\t\t} else if (token.equals(\"source\")) { //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\t\t\t\tCompilerOptions.OPTION_SourceFileAttribute,", "-\t\t\t\t\t\t\t\t\tCompilerOptions.GENERATE);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\t\t\tthis.bind(\"configure.invalidDebugOption\", debugOption)); //$NON-NLS-1$", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t}", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tthis.bind(\"configure.invalidDebugOption\", debugOption)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.startsWith(\"-nowarn\")) { //$NON-NLS-1$", "-\t\t\t\t\tdisableWarnings();", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.startsWith(\"-warn\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tString warningOption = currentArg;", "-\t\t\t\t\tint length = currentArg.length();", "-\t\t\t\t\tif (length == 10 && warningOption.equals(\"-warn:\" + NONE)) { //$NON-NLS-1$", "-\t\t\t\t\t\tdisableWarnings();", "-\t\t\t\t\t\tcontinue;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (length <= 6) {", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.invalidWarningConfiguration\", warningOption)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tint warnTokenStart;", "-\t\t\t\t\tboolean isEnabling, allowPlusOrMinus;", "-\t\t\t\t\tswitch (warningOption.charAt(6)) {", "-\t\t\t\t\t\tcase '+' :", "-\t\t\t\t\t\t\twarnTokenStart = 7;", "-\t\t\t\t\t\t\tisEnabling = true;", "-\t\t\t\t\t\t\tallowPlusOrMinus = true;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase '-' :", "-\t\t\t\t\t\t\twarnTokenStart = 7;", "-\t\t\t\t\t\t\tisEnabling = false; // mentionned warnings are disabled", "-\t\t\t\t\t\t\tallowPlusOrMinus = true;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\tdisableWarnings();", "-\t\t\t\t\t\t\twarnTokenStart = 6;", "-\t\t\t\t\t\t\tisEnabling = true;", "-\t\t\t\t\t\t\tallowPlusOrMinus = false;", "-\t\t\t\t\t}", "-", "-\t\t\t\t\tStringTokenizer tokenizer =", "-\t\t\t\t\t\tnew StringTokenizer(warningOption.substring(warnTokenStart, warningOption.length()), \",\"); //$NON-NLS-1$", "-\t\t\t\t\tint tokenCounter = 0;", "-", "-\t\t\t\t\tif (didSpecifyDeprecation) {  // deprecation could have also been set through -deprecation option", "-\t\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);", "-\t\t\t\t\t}", "-", "-\t\t\t\t\tnextToken: while (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\t\tString token = tokenizer.nextToken();", "-\t\t\t\t\t\ttokenCounter++;", "-\t\t\t\t\t\tswitch(token.charAt(0)) {", "-\t\t\t\t\t\t\tcase '+' :", "-\t\t\t\t\t\t\t\tif (allowPlusOrMinus) {", "-\t\t\t\t\t\t\t\t\tisEnabling = true;", "-\t\t\t\t\t\t\t\t\ttoken = token.substring(1);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\ttokenCounter = 0;", "-\t\t\t\t\t\t\t\t\tbreak nextToken;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase '-' :", "-\t\t\t\t\t\t\t\tif (allowPlusOrMinus) {", "-\t\t\t\t\t\t\t\t\tisEnabling = false;", "-\t\t\t\t\t\t\t\t\ttoken = token.substring(1);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\ttokenCounter = 0;", "-\t\t\t\t\t\t\t\t\tbreak nextToken;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\thandleWarningToken(token, isEnabling);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (tokenCounter == 0) {", "-\t\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\t\tthis.bind(\"configure.invalidWarningOption\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-target\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_TARGET;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-preserveAllLocals\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\tCompilerOptions.OPTION_PreserveUnusedLocal,", "-\t\t\t\t\t\tCompilerOptions.PRESERVE);", "-\t\t\t\t    mode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-enableJavadoc\")) {//$NON-NLS-1$", "-\t\t\t\t    mode = DEFAULT;", "-\t\t\t\t\tthis.enableJavadocOn = true;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-Xemacs\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tthis.logger.setEmacs();", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\t// annotation processing", "-\t\t\t\tif (currentArg.startsWith(\"-A\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-processorpath\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_PROCESSOR_PATH_start;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-processor\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_PROCESSOR_start;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-proc:only\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\tCompilerOptions.OPTION_GenerateClassFiles,", "-\t\t\t\t\t\tCompilerOptions.DISABLED);", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-proc:none\")) { //$NON-NLS-1$", "-\t\t\t\t\tdidSpecifyDisabledAnnotationProcessing = true;", "-\t\t\t\t\tthis.options.put(", "-\t\t\t\t\t\tCompilerOptions.OPTION_Process_Annotations,", "-\t\t\t\t\t\tCompilerOptions.DISABLED);", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-s\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_S_start;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-XprintProcessorInfo\") //$NON-NLS-1$", "-\t\t\t\t\t\t|| currentArg.equals(\"-XprintRounds\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\t// tolerated javac options - quietly filtered out", "-\t\t\t\tif (currentArg.startsWith(\"-X\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.startsWith(\"-J\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-O\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = DEFAULT;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tif (currentArg.equals(\"-classNames\")) { //$NON-NLS-1$", "-\t\t\t\t\tmode = INSIDE_CLASS_NAMES;", "-\t\t\t\t\tcontinue;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase INSIDE_TARGET :", "-\t\t\t\tif (this.didSpecifyTarget) {", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tthis.bind(\"configure.duplicateTarget\", currentArg));//$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tthis.didSpecifyTarget = true;", "-\t\t\t\tif (currentArg.equals(\"1.1\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_1);", "-\t\t\t\t} else if (currentArg.equals(\"1.2\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_2);", "-\t\t\t\t} else if (currentArg.equals(\"1.3\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_3);", "-\t\t\t\t} else if (currentArg.equals(\"1.4\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_4);", "-\t\t\t\t} else if (currentArg.equals(\"1.5\") || currentArg.equals(\"5\") || currentArg.equals(\"5.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_5);", "-\t\t\t\t} else if (currentArg.equals(\"1.6\") || currentArg.equals(\"6\") || currentArg.equals(\"6.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);", "-\t\t\t\t} else if (currentArg.equals(\"1.7\") || currentArg.equals(\"7\") || currentArg.equals(\"7.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_7);", "-\t\t\t\t} else if (currentArg.equals(\"jsr14\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_JSR14);", "-\t\t\t\t} else if (currentArg.equals(\"cldc1.1\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_CLDC1_1);", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_InlineJsr, CompilerOptions.ENABLED);", "-\t\t\t\t}else {", "-\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.targetJDK\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_LOG :", "-\t\t\t\tthis.log = currentArg;", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_REPETITION :", "-\t\t\t\ttry {", "-\t\t\t\t\tthis.repetitions = Integer.parseInt(currentArg);", "-\t\t\t\t\tif (this.repetitions <= 0) {", "-\t\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.repetition\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t} catch (NumberFormatException e) {", "-\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.repetition\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_MAX_PROBLEMS :", "-\t\t\t\ttry {", "-\t\t\t\t\tthis.maxProblems = Integer.parseInt(currentArg);", "-\t\t\t\t\tif (this.maxProblems <= 0) {", "-\t\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.maxProblems\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_MaxProblemPerUnit, currentArg);", "-\t\t\t\t} catch (NumberFormatException e) {", "-\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.maxProblems\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_SOURCE :", "-\t\t\t\tif (this.didSpecifySource) {", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tthis.bind(\"configure.duplicateSource\", currentArg));//$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tthis.didSpecifySource = true;", "-\t\t\t\tif (currentArg.equals(\"1.3\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);", "-\t\t\t\t} else if (currentArg.equals(\"1.4\")) { //$NON-NLS-1$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_4);", "-\t\t\t\t} else if (currentArg.equals(\"1.5\") || currentArg.equals(\"5\") || currentArg.equals(\"5.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_5);", "-\t\t\t\t} else if (currentArg.equals(\"1.6\") || currentArg.equals(\"6\") || currentArg.equals(\"6.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_6);", "-\t\t\t\t} else if (currentArg.equals(\"1.7\") || currentArg.equals(\"7\") || currentArg.equals(\"7.0\")) { //$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-3$", "-\t\t\t\t\tthis.options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_7);", "-\t\t\t\t} else {", "-\t\t\t\t\tthrow new InvalidInputException(this.bind(\"configure.source\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_DEFAULT_ENCODING :", "-\t\t\t\tif (didSpecifyDefaultEncoding) {", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tthis.bind(\"configure.duplicateDefaultEncoding\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\ttry { // ensure encoding is supported", "-\t\t\t\t\tnew InputStreamReader(new ByteArrayInputStream(new byte[0]), currentArg);", "-\t\t\t\t} catch (UnsupportedEncodingException e) {", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tthis.bind(\"configure.unsupportedEncoding\", currentArg)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tthis.options.put(CompilerOptions.OPTION_Encoding, currentArg);", "-\t\t\t\tdidSpecifyDefaultEncoding = true;", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_DESTINATION_PATH :", "-\t\t\t\tthis.setDestinationPath(currentArg.equals(NONE) ? NONE : currentArg);", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_CLASSPATH_start:", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tindex += processPaths(newCommandLineArgs, index, currentArg, classpaths);", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_BOOTCLASSPATH_start:", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tindex += processPaths(newCommandLineArgs, index, currentArg, bootclasspaths);", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_SOURCE_PATH_start:", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tString[] sourcePaths = new String[1];", "-\t\t\t\tindex += processPaths(newCommandLineArgs, index, currentArg, sourcePaths);", "-\t\t\t\tsourcepathClasspathArg = sourcePaths[0];", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_EXT_DIRS:", "-\t\t\t\tif (currentArg.indexOf(\"[-d\") != -1) { //$NON-NLS-1$", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tthis.bind(\"configure.unexpectedDestinationPathEntry\", //$NON-NLS-1$", "-\t\t\t\t\t\t\t\"-extdir\")); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(currentArg,\tFile.pathSeparator, false);", "-\t\t\t\textdirsClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\t\t\t\twhile (tokenizer.hasMoreTokens())", "-\t\t\t\t\textdirsClasspaths.add(tokenizer.nextToken());", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_ENDORSED_DIRS:", "-\t\t\t\tif (currentArg.indexOf(\"[-d\") != -1) { //$NON-NLS-1$", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tthis.bind(\"configure.unexpectedDestinationPathEntry\", //$NON-NLS-1$", "-\t\t\t\t\t\t\t\"-endorseddirs\")); //$NON-NLS-1$", "-\t\t\t\t}\t\t\t\ttokenizer = new StringTokenizer(currentArg,\tFile.pathSeparator, false);", "-\t\t\t\tendorsedDirClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);", "-\t\t\t\twhile (tokenizer.hasMoreTokens())", "-\t\t\t\t\tendorsedDirClasspaths.add(tokenizer.nextToken());", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_SOURCE_DIRECTORY_DESTINATION_PATH:", "-\t\t\t\tif (currentArg.endsWith(\"]\")) { //$NON-NLS-1$", "-\t\t\t\t\tcustomDestinationPath = currentArg.substring(0,", "-\t\t\t\t\t\tcurrentArg.length() - 1);", "-\t\t\t\t} else {", "-\t\t\t\t\tthrow new InvalidInputException(", "-\t\t\t\t\t\tthis.bind(\"configure.incorrectDestinationPathEntry\", //$NON-NLS-1$", "-\t\t\t\t\t\t\t\"[-d \" + currentArg)); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase INSIDE_PROCESSOR_PATH_start :", "-\t\t\t\t// nothing to do here. This is consumed again by the AnnotationProcessorManager", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_PROCESSOR_start :", "-\t\t\t\t// nothing to do here. This is consumed again by the AnnotationProcessorManager", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_S_start :", "-\t\t\t\t// nothing to do here. This is consumed again by the AnnotationProcessorManager", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t\tcase INSIDE_CLASS_NAMES :", "-\t\t\t\ttokenizer = new StringTokenizer(currentArg, \",\"); //$NON-NLS-1$", "-\t\t\t\tif (this.classNames == null) {", "-\t\t\t\t\tthis.classNames = new String[DEFAULT_SIZE_CLASSPATH];", "-\t\t\t\t}", "-\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "-\t\t\t\t\tif (this.classNames.length == classCount) {", "-\t\t\t\t\t\t// resize", "-\t\t\t\t\t\tSystem.arraycopy(", "-\t\t\t\t\t\t\tthis.classNames,", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\t(this.classNames = new String[classCount * 2]),", "-\t\t\t\t\t\t\t0,", "-\t\t\t\t\t\t\tclassCount);", "-\t\t\t\t\t}", "-\t\t\t\t\tthis.classNames[classCount++] = tokenizer.nextToken();", "-\t\t\t\t}", "-\t\t\t\tmode = DEFAULT;", "-\t\t\t\tcontinue;", "-\t\t}", "-", "-\t\t// default is input directory, if no custom destination path exists", "-\t\tif (customDestinationPath == null) {", "-\t\t\tif (File.separatorChar != '/') {", "-\t\t\t\tcurrentArg = currentArg.replace('/', File.separatorChar);", "-\t\t\t}", "-\t\t\tif (currentArg.endsWith(\"[-d\")) { //$NON-NLS-1$", "-\t\t\t\tcurrentSourceDirectory = currentArg.substring(0,", "-\t\t\t\t\tcurrentArg.length() - 3);", "-\t\t\t\tmode = INSIDE_SOURCE_DIRECTORY_DESTINATION_PATH;", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t\tcurrentSourceDirectory = currentArg;", "-\t\t}", "-\t\tFile dir = new File(currentSourceDirectory);", "-\t\tif (!dir.isDirectory()) {", "-\t\t\tthrow new InvalidInputException(", "-\t\t\t\tthis.bind(\"configure.unrecognizedOption\", currentSourceDirectory)); //$NON-NLS-1$", "-\t\t}", "-\t\tString[] result = FileFinder.find(dir, SuffixConstants.SUFFIX_STRING_JAVA);", "-\t\tif (NONE.equals(customDestinationPath)) {", "-\t\t\tcustomDestinationPath = NONE; // ensure == comparison", "-\t\t}", "-\t\tif (this.filenames != null) {", "-\t\t\t// some source files were specified explicitly", "-\t\t\tint length = result.length;", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.filenames,", "-\t\t\t\t0,", "-\t\t\t\t(this.filenames = new String[length + filesCount]),", "-\t\t\t\t0,", "-\t\t\t\tfilesCount);", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.encodings,", "-\t\t\t\t0,", "-\t\t\t\t(this.encodings = new String[length + filesCount]),", "-\t\t\t\t0,", "-\t\t\t\tfilesCount);", "-\t\t\tSystem.arraycopy(", "-\t\t\t\tthis.destinationPaths,", "-\t\t\t\t0,", "-\t\t\t\t(this.destinationPaths = new String[length + filesCount]),", "-\t\t\t\t0,", "-\t\t\t\tfilesCount);", "-\t\t\tSystem.arraycopy(result, 0, this.filenames, filesCount, length);", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tthis.encodings[filesCount + i] = customEncoding;", "-\t\t\t\tthis.destinationPaths[filesCount + i] = customDestinationPath;", "-\t\t\t}", "-\t\t\tfilesCount += length;", "-\t\t\tcustomEncoding = null;", "-\t\t\tcustomDestinationPath = null;", "-\t\t\tcurrentSourceDirectory = null;", "-\t\t} else {", "-\t\t\tthis.filenames = result;", "-\t\t\tfilesCount = this.filenames.length;", "-\t\t\tthis.encodings = new String[filesCount];", "-\t\t\tthis.destinationPaths = new String[filesCount];", "-\t\t\tfor (int i = 0; i < filesCount; i++) {", "-\t\t\t\tthis.encodings[i] = customEncoding;", "-\t\t\t\tthis.destinationPaths[i] = customDestinationPath;", "-\t\t\t}", "-\t\t\tcustomEncoding = null;", "-\t\t\tcustomDestinationPath = null;", "-\t\t\tcurrentSourceDirectory = null;", "-\t\t}", "-\t\tmode = DEFAULT;", "-\t\tcontinue;", "-\t}", "-\t", "-\t// set DocCommentSupport, with appropriate side effects on defaults if ", "-\t// javadoc is not enabled", "-\tif (this.enableJavadocOn) {", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_DocCommentSupport,", "-\t\t\tCompilerOptions.ENABLED);", "-\t} else if (this.warnJavadocOn || this.warnAllJavadocOn) {", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_DocCommentSupport,", "-\t\t\tCompilerOptions.ENABLED);", "-\t\t// override defaults: references that are embedded in javadoc are ignored", "-\t\t// from the perspective of parameters and thrown exceptions usage", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportUnusedParameterIncludeDocCommentReference,", "-\t\t\tCompilerOptions.DISABLED);", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionIncludeDocCommentReference,", "-\t\t\tCompilerOptions.DISABLED);", "-\t}", "-\t// configure warnings for javadoc contents", "-\tif (this.warnJavadocOn) {", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportInvalidJavadoc,", "-\t\t\tCompilerOptions.WARNING);", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTags,", "-\t\t\tCompilerOptions.ENABLED);", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsDeprecatedRef,", "-\t\t\tCompilerOptions.ENABLED);", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportInvalidJavadocTagsNotVisibleRef,", "-\t\t\tCompilerOptions.ENABLED);", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTags,", "-\t\t\tCompilerOptions.WARNING);", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportMissingJavadocTagsVisibility,", "-\t\t\tCompilerOptions.PRIVATE);", "-\t}", "-\tif (this.warnAllJavadocOn) {", "-\t\tthis.options.put(", "-\t\t\tCompilerOptions.OPTION_ReportMissingJavadocComments,", "-\t\t\tCompilerOptions.WARNING);", "-\t}", "-", "-\tif (printUsageRequired || (filesCount == 0 && classCount == 0)) {", "-\t\tif (usageSection ==  null) {", "-\t\t\tprintUsage(); // default", "-\t\t} else {", "-\t\t\tprintUsage(usageSection);", "-\t\t}", "-\t\tthis.proceed = false;", "-\t\treturn;", "-\t}", "-", "-\tif (this.log != null) {", "-\t\tthis.logger.setLog(this.log);", "-\t} else {", "-\t\tthis.showProgress = false;", "-\t}", "-\tthis.logger.logVersion(printVersionRequired);", "-", "-\tvalidateOptions(didSpecifyCompliance);", "-\t", "-\t// Enable annotation processing by default in batch mode when compliance is at least 1.6", "-\t// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=185768", "-\tif (!didSpecifyDisabledAnnotationProcessing", "-\t\t\t&& CompilerOptions.versionToJdkLevel(this.options.get(CompilerOptions.OPTION_Compliance)) >= ClassFileConstants.JDK1_6) {", "-\t\tthis.options.put(CompilerOptions.OPTION_Process_Annotations, CompilerOptions.ENABLED);", "-\t}", "-", "-\tthis.logger.logCommandLineArguments(newCommandLineArgs);", "-\tthis.logger.logOptions(this.options);", "-", "-\tif (this.repetitions == 0) {", "-\t\tthis.repetitions = 1;", "-\t}", "-\tif (this.repetitions >= 3 && this.timing) {", "-\t\tthis.times = new long[this.repetitions];", "-\t\tthis.timesCounter = 0;", "-\t}", "-", "-\tif (filesCount != 0) {", "-\t\tSystem.arraycopy(", "-\t\t\tthis.filenames,", "-\t\t\t0,", "-\t\t\t(this.filenames = new String[filesCount]),", "-\t\t\t0,", "-\t\t\tfilesCount);", "-\t}", "-", "-\tif (classCount != 0) {", "-\t\tSystem.arraycopy(", "-\t\t\tthis.classNames,", "-\t\t\t0,", "-\t\t\t(this.classNames = new String[classCount]),", "-\t\t\t0,", "-\t\t\tclassCount);", "-\t}", "-\t", "-\tsetPaths(bootclasspaths,", "-\t\t\tsourcepathClasspathArg,", "-\t\t\tsourcepathClasspaths,", "-\t\t\tclasspaths,", "-\t\t\textdirsClasspaths,", "-\t\t\tendorsedDirClasspaths,", "-\t\t\tcustomEncoding);", "-\t", "-\tif (this.pendingErrors != null) {", "-\t\tfor (Iterator iterator = this.pendingErrors.iterator(); iterator.hasNext(); ) {", "-\t\t\tString message = (String) iterator.next();", "-\t\t\tthis.logger.logPendingError(message);", "-\t\t}", "-\t\tthis.pendingErrors = null;", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce89ee7550c9e23ba3f3c61b2be66437", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/workspace/Converter/junit/swingui/DefaultFailureDetailView.java", "commitBeforeChange": "5f14954289dcfe3aa64cd723a9ea9807dea33e05", "commitAfterChange": "4b4449dde49cdcaed9ae00d1ac057ecfeb8d8c23", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic Component getComponent()", "signatureAfterChange": " \tpublic Component getComponent()", "diff": ["-\t\tif (fTextArea == null) {", "-\t\t\tfTextArea= new JTextArea();", "-\t\t\tfTextArea.setRows(5);", "-\t\t\tfTextArea.setTabSize(0);", "-\t\t\tfTextArea.setEditable(false);", "+\t\tif (fList == null) {", "+\t\t\tfList= new JList(new StackTraceListModel());", "+\t\t\tfList.setFont(new Font(\"Dialog\", Font.PLAIN, 12));", "+\t\t\tfList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);", "+\t\t\tfList.setVisibleRowCount(5);", "+\t\t\tfList.setCellRenderer(new StackEntryRenderer());", "-\t\treturn fTextArea;", "+\t\treturn fList;"]}], "num": 24485}
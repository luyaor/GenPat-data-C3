{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "360878a7a00f006b8a8dc4436bf56d8c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d2ca8b07568067850cc30c0d5911df3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "319a6f22b4c64e212eff57a4501a52f0225217c6", "commitAfterChange": "cd2f0b28432b5b0308d7d5515f79ac66fead6f97", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "diff": ["-\t\t\t\t\t\tint index;", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tif ((index = Util.indexOfMatchingPath(customOutput, outputLocations, outputCount)) != -1) {", "+\t\t\t\t\t\tif (Util.indexOfMatchingPath(customOutput, outputLocations, outputCount) != -1) {", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t// check nesting", "-\t\t\t\t\t\tif ((index = Util.indexOfEnclosingPath(customOutput, outputLocations, outputCount)) != -1) {", "-\t\t\t\t\t\t\tif (index == 0) {", "-\t\t\t\t\t\t\t\t// custom output is nested in project's output: need to check if all source entries have a custom", "-\t\t\t\t\t\t\t\t// output before complaining", "-\t\t\t\t\t\t\t\tif (potentialNestedOutput == null) potentialNestedOutput = customOutput;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestOutputInOutput\", customOutput.makeRelative().toString(), outputLocations[index].makeRelative().toString())); //$NON-NLS-1$", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t// accumulate all outputs, will check nesting once all available (to handle ordering issues)", "-\t\t\t}\t", "+\t\t\t}", "+\t\t}", "+\t\t// check nesting across output locations", "+\t\tfor (int i = 1 /*no check for default output*/ ; i < outputCount; i++) {", "+\t\t    IPath customOutput = outputLocations[i];", "+\t\t    int index;", "+\t\t\t// check nesting", "+\t\t\tif ((index = Util.indexOfEnclosingPath(customOutput, outputLocations, outputCount)) != -1 && index != i) {", "+\t\t\t\tif (index == 0) {", "+\t\t\t\t\t// custom output is nested in project's output: need to check if all source entries have a custom", "+\t\t\t\t\t// output before complaining", "+\t\t\t\t\tif (potentialNestedOutput == null) potentialNestedOutput = customOutput;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestOutputInOutput\", customOutput.makeRelative().toString(), outputLocations[index].makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bb0040dca273ecf132981bbf71bfac3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java", "commitBeforeChange": "d81785c71a67fba20ae0493dda59a631a5f97e6d", "commitAfterChange": "a925b790a826918fcd3df46b6a40cc1132dae964", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "signatureAfterChange": " \tpublic static IJavaModelStatus validateClasspath(IJavaProject javaProject, IClasspathEntry[] rawClasspath, IPath projectOutputLocation)", "diff": ["+\t\tboolean disableExclusionPatterns = JavaCore.DISABLED.equals(javaProject.getOption(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS, true));", "+\t\tboolean disableCustomOutputLocations = JavaCore.DISABLED.equals(javaProject.getOption(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS, true));", "+\t\t", "-\t\t\t\t\tif (resolvedEntry.getExclusionPatterns() != null && resolvedEntry.getExclusionPatterns().length > 0", "-\t\t\t\t\t\t\t&& JavaCore.DISABLED.equals(javaProject.getOption(JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS, true))) {", "+\t\t\t\t\tif (disableExclusionPatterns && resolvedEntry.getExclusionPatterns() != null && resolvedEntry.getExclusionPatterns().length > 0) {", "-\t\t\t\t\t\tif (JavaCore.DISABLED.equals(javaProject.getOption(JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS, true))) {", "+\t\t\t\t\t\tif (disableCustomOutputLocations) {", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// check exact match", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// check nesting", "-\t\t\t\t\t\toutputLocations[outputCount++] = resolvedEntry.getOutputLocation();", "+\t\t\t\t\t\toutputLocations[outputCount++] = customOutput;", "-\t\t\t// prevent nesting output location inside entry", "-\t\t\tint index;", "-\t\t\tif ((index = Util.indexOfNestedPath(entryPath, outputLocations, outputCount)) != -1) {", "-\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestOutputInEntry\", outputLocations[index].makeRelative().toString(), entryPath.makeRelative().toString())); //$NON-NLS-1$", "-\t\t\t}", "+\t\t\t// prevent nesting output location inside entry unless enclosing is a source entry which explicitly exclude the output location", "+\t\t    char[][] exclusionPatterns = ((ClasspathEntry)entry).fullExclusionPatternChars();", "+\t\t    for (int j = 0; j < outputCount; j++){", "+\t\t        IPath currentOutput = outputLocations[j];", "+    \t\t\tif (entryPath.equals(currentOutput)) continue;", "+\t\t\t\tif (entryPath.isPrefixOf(currentOutput)) {", "+\t\t\t\t    if (kind != IClasspathEntry.CPE_SOURCE || !Util.isExcluded(currentOutput, exclusionPatterns)) {", "+\t\t\t\t\t\treturn new JavaModelStatus(IJavaModelStatusConstants.INVALID_CLASSPATH, Util.bind(\"classpath.cannotNestOutputInEntry\", currentOutput.makeRelative().toString(), entryPath.makeRelative().toString())); //$NON-NLS-1$", "+\t\t\t\t    }", "+\t\t\t\t}", "+\t\t    }", "-\t\t\t// prevent nesting entry inside output location - when distinct from project or a source folder", "+\t\t    // prevent nesting entry inside output location - when distinct from project or a source folder", "+\t\t\tint index;"]}], "num": 7433}
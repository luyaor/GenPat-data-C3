{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45d70fb16fc8930752b2094697c73b6f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ee0da0ce47901afbdcd7986d8ce5f23", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "5292c15945b50fef548808f853ce39423b5670f2", "commitAfterChange": "e32dbbc9904e1f7eb4c6e79a7595e742217638b3", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 73, "signatureBeforeChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "signatureAfterChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "diff": ["-\t\tboolean indentRootTags = this.formatter.preferences.comment_indent_root_tags && !block.isDescription();", "-\t\tboolean indentParamTag = this.formatter.preferences.comment_indent_parameter_description && block.isParamTag();", "-\t\tboolean headerLine = (buffer.indexOf(Util.LINE_SEPARATOR) < 0) && block.isHeaderLine() && this.lastNumberOfNewLines == 0;", "-\t\tStringBuffer tokensBuffer = new StringBuffer();", "+\t\tboolean indentRootTags = this.formatter.preferences.comment_indent_root_tags && !block.isInDescription();", "+\t\tboolean indentParamTag = this.formatter.preferences.comment_indent_parameter_description && block.isInParamTag();", "+\t\tboolean headerLine = block.isHeaderLine() && this.lastNumberOfNewLines == 0;", "+\t\tStringBuffer tokensBuffer = new StringBuffer();", "+\t\t\tboolean hasTokens = false;", "-\t\t\t\tif (token == TerminalTokens.TokenNameWHITESPACE) {", "-\t\t\t\t\tpreviousToken = token;", "-\t\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\t\tthis.column += tokensBuffer.length();", "-\t\t\t\t\ttokensBuffer.setLength(0);", "-\t\t\t\t\tcontinue;", "+\t\t\t\tswitch (token) {", "+\t\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE:", "+\t\t\t\t\t\tpreviousToken = token;", "+\t\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\t\tthis.column += tokensBuffer.length();", "+\t\t\t\t\t\ttokensBuffer.setLength(0);", "+\t\t\t\t\t\thasTokens = true;", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\tcase TerminalTokens.TokenNameStringLiteral:", "+\t\t\t\t\t\tif (this.scanner.currentPosition > this.scanner.eofPosition) {", "+\t\t\t\t\t\t\tthis.scanner.resetTo(this.scanner.startPosition, textEnd);", "+\t\t\t\t\t\t\tthis.scanner.getNextChar();", "+\t\t\t\t\t\t\ttoken = 1;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameCharacterLiteral:", "+\t\t\t\t\t\tif (this.scanner.currentPosition > this.scanner.eofPosition) {", "+\t\t\t\t\t\t\tthis.scanner.resetTo(this.scanner.startPosition, textEnd);", "+\t\t\t\t\t\t\tthis.scanner.getNextChar();", "+\t\t\t\t\t\t\ttoken = 1;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t    \t\t\t\tthis.line++;", "-\t\t\t\t\tif (lastColumn == this.column) this.lastNumberOfNewLines++;", "-\t\t\t    \tbuffer.append(this.lineSeparator);", "-\t\t\t    \tthis.column = 1;", "-\t\t\t    \tprintIndentationIfNecessary(buffer);", "-\t\t    \t\tbuffer.append(BLOCK_LINE_PREFIX);", "-\t\t\t    \tthis.column = headerLine ? firstColumn-1 : firstColumn;", "-\t\t\t    \tif (indentationBuffer != null) {", "-\t\t\t    \t\tbuffer.append(indentationBuffer);", "-\t\t\t    \t}", "+\t\t\t\t\tboolean alreadyHasNewLine = !hasTokens && tokensBuffer.length() > 0 && firstText && !isHtmlTag && this.lastNumberOfNewLines > 0;", "+\t\t\t\t\tif (!alreadyHasNewLine) {", "+\t\t\t\t\t\tif (lastColumn == this.column) {", "+\t\t\t\t\t\t\tthis.lastNumberOfNewLines++;", "+\t\t\t\t\t\t\tthis.line++;", "+\t\t\t\t\t\t}", "+\t\t\t\t    \tbuffer.append(this.lineSeparator);", "+\t\t\t\t    \tthis.column = 1;", "+\t\t\t\t    \tprintIndentationIfNecessary(buffer);", "+\t\t\t    \t\tbuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t    \tthis.column = headerLine ? firstColumn-1 : firstColumn;", "+\t\t\t\t    \tif (indentationBuffer != null) {", "+\t\t\t\t    \t\tbuffer.append(indentationBuffer);", "+\t\t\t\t    \t}", "+\t\t\t\t\t}", "+\t\t\t\t\thasTokens = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a704b9f68652050993971dec04d7a1f4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/diagnose/DiagnoseParser.java", "commitBeforeChange": "cacfef2ff8ae58ffd7803beee4130430430b2e0a", "commitAfterChange": "1bcc2de763332a9446f3a2a7d23b7bcd0627544b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tprivate PrimaryRepairInfo checkPrimaryDistance(int stck[], int stack_top, PrimaryRepairInfo repair)", "signatureAfterChange": " \tprivate PrimaryRepairInfo checkPrimaryDistance(int stck[], int stack_top, PrimaryRepairInfo repair)", "diff": ["-\t\tsymbol = mergeCandidate(stck[stack_top], repair.bufferPosition);", "-\t\tif (symbol != 0) {", "-\t\t\tj = parseCheck(stck, stack_top, symbol, repair.bufferPosition+2);", "-\t\t\tif ((j > repair.distance) || (j == repair.distance && repair.misspellIndex < 10)) {", "-\t\t\t\trepair.misspellIndex = 10;", "-\t\t\t\trepair.symbol = symbol;", "-\t\t\t\trepair.distance = j;", "-\t\t\t\trepair.code = MERGE_CODE;", "+\t    if(buffer[repair.bufferPosition] != 0 && buffer[repair.bufferPosition + 1] != 0) {// do not merge the first token", "+\t\t\tsymbol = mergeCandidate(stck[stack_top], repair.bufferPosition);", "+\t\t\tif (symbol != 0) {", "+\t\t\t\tj = parseCheck(stck, stack_top, symbol, repair.bufferPosition+2);", "+\t\t\t\tif ((j > repair.distance) || (j == repair.distance && repair.misspellIndex < 10)) {", "+\t\t\t\t\trepair.misspellIndex = 10;", "+\t\t\t\t\trepair.symbol = symbol;", "+\t\t\t\t\trepair.distance = j;", "+\t\t\t\t\trepair.code = MERGE_CODE;", "+\t\t\t\t}", "-\t\t}", "+\t    }", "-\t\twhile(symbol != 0) {", "-\t\t\tif (symbol == EOLT_SYMBOL && lexStream.afterEol(buffer[repair.bufferPosition+1])) {", "-\t\t\t\tk = 10;", "-\t\t\t} else {", "-\t\t\t\tk = misspell(symbol, buffer[repair.bufferPosition]);", "+\t\t", "+\t\tif(buffer[repair.bufferPosition] != 0) {// do not replace the first token", "+\t\t\twhile(symbol != 0) {", "+\t\t\t\tif (symbol == EOLT_SYMBOL && lexStream.afterEol(buffer[repair.bufferPosition+1])) {", "+\t\t\t\t\tk = 10;", "+\t\t\t\t} else {", "+\t\t\t\t\tk = misspell(symbol, buffer[repair.bufferPosition]);", "+\t\t\t\t}", "+\t\t\t\tj = parseCheck(stck, stack_top, symbol, repair.bufferPosition+1);", "+\t\t\t\tif (j > repair.distance) {", "+\t\t\t\t\trepair.misspellIndex = k;", "+\t\t\t\t\trepair.distance = j;", "+\t\t\t\t\trepair.symbol = symbol;", "+\t\t\t\t\trepair.code = SUBSTITUTION_CODE;", "+\t\t\t\t} else if (j == repair.distance && k > repair.misspellIndex) {", "+\t\t\t\t\trepair.misspellIndex = k;", "+\t\t\t\t\trepair.symbol = symbol;", "+\t\t\t\t\trepair.code = SUBSTITUTION_CODE;", "+\t\t\t\t} else if (j == repair.distance && k > repair.misspellIndex && isBetterSymbol(symbol, repair.symbol)) {", "+\t\t\t\t\trepair.misspellIndex = k;", "+\t\t\t\t\trepair.symbol = symbol;", "+\t\t\t\t\trepair.code = SUBSTITUTION_CODE;", "+\t\t\t\t}", "+\t\t\t\ti = symbol;", "+\t\t\t\tsymbol = list[symbol];", "+\t\t\t\tlist[i] = 0;                             // reset element", "-\t\t\tj = parseCheck(stck, stack_top, symbol, repair.bufferPosition+1);", "-\t\t\tif (j > repair.distance) {", "-\t\t\t\trepair.misspellIndex = k;", "-\t\t\t\trepair.distance = j;", "-\t\t\t\trepair.symbol = symbol;", "-\t\t\t\trepair.code = SUBSTITUTION_CODE;", "-\t\t\t} else if (j == repair.distance && k > repair.misspellIndex) {", "-\t\t\t\trepair.misspellIndex = k;", "-\t\t\t\trepair.symbol = symbol;", "-\t\t\t\trepair.code = SUBSTITUTION_CODE;", "-\t\t\t} else if (j == repair.distance && k > repair.misspellIndex && isBetterSymbol(symbol, repair.symbol)) {", "-\t\t\t\trepair.misspellIndex = k;", "-\t\t\t\trepair.symbol = symbol;", "-\t\t\t\trepair.code = SUBSTITUTION_CODE;", "-\t\t\t}", "-\t\t\ti = symbol;", "-\t\t\tsymbol = list[symbol];", "-\t\t\tlist[i] = 0;                             // reset element"]}], "num": 9756}
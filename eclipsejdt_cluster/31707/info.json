{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74b5b6a76041a38ac01b5bd5566636cb", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f7b4204843280eef3d95b4a68115100", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/RewriteEventStore.java", "commitBeforeChange": "7183d81a2458b7a9ecc9004f74bf12b52ac2eafc", "commitAfterChange": "54eb6fa8730358fcf98285db139cf9edbd02f92a", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 48, "signatureBeforeChange": " \t \tpublic final CopySourceInfo markAsRangeCopySource(ASTNode parent, StructuralPropertyDescriptor property, ASTNode first, ASTNode last, boolean isMove)", "signatureAfterChange": " \t \tpublic final CopySourceInfo createRangeCopy(ASTNode parent, StructuralPropertyDescriptor childProperty, ASTNode first, ASTNode last, boolean isMove, ASTNode internalPlaceholder, ASTNode replacingNode, TextEditGroup editGroup)", "diff": ["-\tpublic final CopySourceInfo markAsRangeCopySource(ASTNode parent, StructuralPropertyDescriptor property, ASTNode first, ASTNode last, boolean isMove) {", "-\t\tCopySourceInfo copySource= new CopySourceInfo(parent, property, first, last, isMove);", "-\t\tassertNoOverlap(copySource);", "+\t", "+\tpublic final CopySourceInfo createRangeCopy(ASTNode parent, StructuralPropertyDescriptor childProperty, ASTNode first, ASTNode last, boolean isMove, ASTNode internalPlaceholder, ASTNode replacingNode, TextEditGroup editGroup) {", "+\t\tCopySourceInfo copyInfo= createCopySourceInfo(null, internalPlaceholder, isMove);", "+\t\tinternalPlaceholder.setProperty(INTERNAL_PLACEHOLDER_PROPERTY, internalPlaceholder);", "-\t\tif (this.rangeCopySources == null) {", "-\t\t\tthis.rangeCopySources= new ArrayList();", "-\t\t}", "-\t\tthis.rangeCopySources.add(copySource);", "-\t\treturn copySource;", "-\t}", "+\t\tNodeRangeInfo copyRangeInfo= new NodeRangeInfo(parent, childProperty, first, last, copyInfo, replacingNode, editGroup);", "+\t\t", "+\t\tif (this.nodeRangeInfos == null) {", "+\t\t\tthis.nodeRangeInfos= new HashMap();", "+\t\t}", "+\t\tPropertyLocation loc= new PropertyLocation(parent, childProperty);", "+\t\tList innerList= (List) this.nodeRangeInfos.get(loc);", "+\t\tif (innerList == null) {", "+\t\t\tinnerList= new ArrayList(2);", "+\t\t\tthis.nodeRangeInfos.put(loc, innerList);", "+\t\t} else {", "+\t\t\tassertNoOverlap(listEvent, indexFirst, indexLast, innerList);", "+\t\t}", "+\t\tinnerList.add(copyRangeInfo);", "+\t\t", "+\t\t", "+\t\treturn copyInfo;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4f86674603574226b4d2baa63586117", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/RewriteEventStore.java", "commitBeforeChange": "15c763ac6615f7cc88e86f760de59214880600df", "commitAfterChange": "a780ec07e5f5cdc097aff3cacfbf8119ccdab1c7", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \t \t \tprivate void assertNoOverlap(CopySourceInfo copySource)", "signatureAfterChange": " \t \t \tprivate void assertNoOverlap(CopySourceInfo copySource)", "diff": ["-\t\t// todo", "+\t\tASTNode parent= copySource.parent;", "+\t\tStructuralPropertyDescriptor childProperty= copySource.childProperty;", "+\t\tASTNode first= copySource.getStartNode();", "+\t\tASTNode last= copySource.getEndNode();", "+\t\t", "+\t\tListRewriteEvent listEvent= getListEvent(parent, childProperty, true);", "+\t\t", "+\t\tint indexFirst= listEvent.getIndex(first, ListRewriteEvent.OLD);", "+\t\tif (indexFirst == -1) {", "+\t\t\tthrow new IllegalArgumentException(\"Start node is not a original child of the given list\"); //$NON-NLS-1$", "+\t\t}", "+\t\tint indexLast= listEvent.getIndex(last, ListRewriteEvent.OLD);", "+\t\tif (indexLast == -1) {", "+\t\t\tthrow new IllegalArgumentException(\"End node is not a original child of the given list\"); //$NON-NLS-1$", "+\t\t}", "+", "+\t\tif (indexFirst > indexLast) {", "+\t\t\tthrow new IllegalArgumentException(\"Start node must be before end node\"); //$NON-NLS-1$", "+\t\t}", "+\t\tif (this.rangeCopySources != null) {", "+\t\t\tfor (Iterator iter= this.rangeCopySources.iterator(); iter.hasNext();) {", "+\t\t\t\tCopySourceInfo info= (CopySourceInfo) iter.next();", "+\t\t\t\tif (info.parent == parent && info.childProperty == childProperty) {", "+\t\t\t\t\tint currStart= listEvent.getIndex(first, ListRewriteEvent.BOTH);", "+\t\t\t\t\tint currEnd= listEvent.getIndex(first, ListRewriteEvent.BOTH);", "+\t\t\t\t\tif (currStart < indexFirst && currEnd < indexLast && currEnd >= indexFirst", "+\t\t\t\t\t\t\t|| currStart > indexFirst && currStart <= currEnd && currEnd > indexLast) {", "+\t\t\t\t\t\tthrow new IllegalArgumentException(\"Range overlapps with an existing copy or move range\"); //$NON-NLS-1$ ", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 31707}
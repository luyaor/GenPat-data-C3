{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "88250bed3bd66a9e8dadf8e4194e6fe3", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0098d4eb5be8de9a9b69b08e0e9a7040", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "61910f9ffdfc607d31120af5ce39e6bf8d69bab0", "commitAfterChange": "3a10f90d587275b68cb248facf53e1ae26bb70b8", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 55, "signatureBeforeChange": " \tprotected void runConformTestThrowingError( \t\tString[] testFiles,  \t\tString expectedSuccessOutputString,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tString[] vmArguments)", "signatureAfterChange": " \t \tprotected void runConformTest( \t\tString[] testFiles,  \t\tString expectedOutputString,  \t\tString[] classLibraries, \t\tboolean shouldFlushOutputDirectory,  \t\tString[] vmArguments)", "diff": ["+\t", "+\t\tString expectedOutputString, ", "+\t\tString[] classLibraries,", "+\t\trunTest(", "+\t \t\t// test directory preparation", "+\t\t\tshouldFlushOutputDirectory /* should flush output directory */,", "+\t\t\ttestFiles /* test files */,", "+\t\t\t// compiler options", "+\t\t\tclassLibraries /* class libraries */,", "+\t\t\tnull /* no custom options */,", "+\t\t\tfalse /* do not perform statements recovery */, ", "+\t\t\tnull /* no custom requestor */,", "+\t\t\t// compiler results", "+\t\t\tfalse /* expecting no compiler errors */,", "+\t\t\tnull /* do not check compiler log */,", "+\t\t\t// runtime options", "+\t\t\tfalse /* do not force execution */,", "+\t\t\tvmArguments /* vm arguments */, ", "+\t\t\t// runtime results", "+\t\t\texpectedOutputString /* expected output string */,", "+\t\t\tnull /* do not check error string */,", "+\t\t\t// javac options", "+\t\t\tJavacTestOptions.DEFAULT /* default javac test options */);", "-\t//                implement javac comparison or not", "-\tprotected void runConformTestThrowingError(", "-\t\tString[] testFiles, ", "-\t\tString expectedSuccessOutputString, ", "-\t\tString[] classLib,", "-\t\tboolean shouldFlushOutputDirectory, ", "-\t\tString[] vmArguments) {", "-", "-\t\tif (shouldFlushOutputDirectory)", "-\t\t\tUtil.flushDirectoryContent(new File(OUTPUT_DIR));", "-", "-\t\tIProblemFactory problemFactory = getProblemFactory();", "-\t\tRequestor requestor = ", "-\t\t\tnew Requestor(", "-\t\t\t\tproblemFactory, ", "-\t\t\t\tOUTPUT_DIR.endsWith(File.separator) ? OUTPUT_DIR : OUTPUT_DIR + File.separator, ", "-\t\t\t\tfalse,", "-\t\t\t\tnull/*no custom requestor*/,", "-\t\t\t\tfalse, /* show category */", "-\t\t\t\tfalse /* show warning token*/);", "-\t\t", "-\t\tCompilerOptions compilerOptions = new CompilerOptions(getCompilerOptions());", "-\t\tcompilerOptions.performMethodsFullRecovery = false;", "-\t\tcompilerOptions.performStatementsRecovery = false;", "-\t\tCompiler batchCompiler = ", "-\t\t\tnew Compiler(", "-\t\t\t\tgetNameEnvironment(new String[]{}, classLib), ", "-\t\t\t\tgetErrorHandlingPolicy(),", "-\t\t\t\tcompilerOptions, ", "-\t\t\t\trequestor, ", "-\t\t\t\tproblemFactory);", "-\t\tbatchCompiler.options.produceReferenceInfo = true;", "-\t\tThrowable exception = null;", "-\t\ttry {", "-\t\t\tbatchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together", "-\t\t} catch(RuntimeException e){", "-\t\t\texception = e;", "-\t\t\tthrow e;", "-\t\t} catch(Error e) {", "-\t\t\texception = e;", "-\t\t\tthrow e;", "-\t\t} finally {", "-", "-\t\t\tif (!requestor.hasErrors) {", "-\t\t\t\tString sourceFile = testFiles[0];", "-\t\t\t\t// Compute class name by removing \".java\" and replacing slashes with dots", "-\t\t\t\tString className = sourceFile.substring(0, sourceFile.length() - 5).replace('/', '.').replace('\\\\', '.');", "-\t", "-\t\t\t\tboolean passed = ", "-\t\t\t\t\tthis.verifier.verifyClassFilesThrowingError(", "-\t\t\t\t\t\tsourceFile, ", "-\t\t\t\t\t\tclassName, ", "-\t\t\t\t\t\texpectedSuccessOutputString,", "-\t\t\t\t\t\tthis.classpaths, ", "-\t\t\t\t\t\tnull, ", "-\t\t\t\t\t\tvmArguments);", "-\t\t\t\tif (exception == null)", "-\t\t\t\t\tassertTrue(this.verifier.failureReason, // computed by verifyClassFiles(...) action", "-\t\t\t\t\t\tpassed);", "-\t\t\t} else {", "-\t\t\t\tif (exception == null)", "-\t\t\t\t\tassertTrue(\"Unexpected problems: \" + requestor.problemLog, false);", "-\t\t\t}", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3277df3e91dd7c420a48ff5a1c074547", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "61910f9ffdfc607d31120af5ce39e6bf8d69bab0", "commitAfterChange": "3a10f90d587275b68cb248facf53e1ae26bb70b8", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tprotected void runNegativeTest( \t\tString[] testFiles,  \t\tString expectedProblemLog,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tMap customOptions,  \t\tboolean generateOutput, \t\tboolean showCategory, \t\tboolean showWarningToken, \t\tboolean skipJavac, \t\tboolean performStatementsRecovery)", "signatureAfterChange": " \tprotected void runNegativeTest( \t\tString[] testFiles,  \t\tString expectedCompilerLog,  \t\tString[] classLibraries, \t\tboolean shouldFlushOutputDirectory,  \t\tMap customOptions,  \t\tboolean generateOutput, \t\tboolean showCategory, \t\tboolean showWarningToken, \t\tboolean skipJavac, \t\tboolean performStatementsRecovery)", "diff": ["+\t// WORK potential candidate for elimination (19 calls)", "-\t\tString expectedProblemLog, ", "-\t\tString[] classLib,", "+\t\tString expectedCompilerLog, ", "+\t\tString[] classLibraries,", "-\t\t// Non-javac part", "-\t\ttry {", "-\t\t\tif (shouldFlushOutputDirectory)", "-\t\t\t\tUtil.flushDirectoryContent(new File(OUTPUT_DIR));", "-\t", "-\t\t\tIProblemFactory problemFactory = getProblemFactory();", "-\t\t\tRequestor requestor = ", "-\t\t\t\tnew Requestor(", "-\t\t\t\t\tproblemFactory, ", "-\t\t\t\t\tOUTPUT_DIR.endsWith(File.separator) ? OUTPUT_DIR : OUTPUT_DIR + File.separator, ", "+\t\trunTest(", "+\t \t\t// test directory preparation", "+\t\t\tshouldFlushOutputDirectory /* should flush output directory */,", "+\t\t\ttestFiles /* test files */,", "+\t\t\t// compiler options", "+\t\t\tclassLibraries /* class libraries */,", "+\t\t\tcustomOptions /* custom options */,", "+\t\t\tperformStatementsRecovery /* perform statements recovery */, ", "+\t\t\tnew Requestor( /* custom requestor */", "-\t\t\t\t\tnull/*no custom requestor*/,", "+\t\t\t\t\tnull /* no custom requestor */,", "-\t\t\t\t\tshowWarningToken);", "-\t\t\tMap options = getCompilerOptions();", "-\t\t\tif (customOptions != null) {", "-\t\t\t\toptions.putAll(customOptions);", "-\t\t\t}", "-\t\t\tCompilerOptions compilerOptions = new CompilerOptions(options);", "-\t\t\tcompilerOptions.performMethodsFullRecovery = performStatementsRecovery;", "-\t\t\tcompilerOptions.performStatementsRecovery = performStatementsRecovery;", "-\t\t\tCompiler batchCompiler = ", "-\t\t\t\tnew Compiler(", "-\t\t\t\t\tgetNameEnvironment(new String[]{}, classLib), ", "-\t\t\t\t\tgetErrorHandlingPolicy(), ", "-\t\t\t\t\tcompilerOptions,", "-\t\t\t\t\trequestor, ", "-\t\t\t\t\tproblemFactory);", "-\t\t\tbatchCompiler.options.produceReferenceInfo = true;", "-\t\t\tThrowable exception = null;", "-\t\t\ttry {", "-\t\t\t\tbatchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together", "-\t\t\t} catch(RuntimeException e){", "-\t\t\t\texception = e;", "-\t\t\t\tthrow e;", "-\t\t\t} catch(Error e) {", "-\t\t\t\texception = e;", "-\t\t\t\tthrow e;", "-\t\t\t} finally {", "-\t\t\t\tString platformIndependantExpectedLog = Util.convertToIndependantLineDelimiter(expectedProblemLog);", "-\t\t\t\tcomputeProblemLog(testFiles, requestor, platformIndependantExpectedLog, exception);", "-\t\t\t}", "-\t\t// javac part", "-\t\t} catch (AssertionFailedError e) {", "-\t\t\tthrow e;", "-\t\t} finally {", "-\t\t\tif (RUN_JAVAC && !skipJavac)", "-\t\t\t\trunJavac(testFiles, expectedProblemLog, null, shouldFlushOutputDirectory);", "-\t\t}", "+\t\t\t\t\tshowWarningToken),", "+\t\t\t// compiler results", "+\t\t\texpectedCompilerLog == null || /* expecting compiler errors */", "+\t\t\t\texpectedCompilerLog.indexOf(\"ERROR\") != -1,", "+\t\t\texpectedCompilerLog /* expected compiler log */,", "+\t\t\t// runtime options", "+\t\t\tfalse /* do not force execution */,", "+\t\t\tnull /* no vm arguments */, ", "+\t\t\t// runtime results", "+\t\t\tnull /* do not check output string */,", "+\t\t\tnull /* do not check error string */,", "+\t\t\t// javac options", "+\t\t\tskipJavac ? ", "+\t\t\t\t\tJavacTestOptions.SKIP : ", "+\t\t\t\t\tJavacTestOptions.DEFAULT /* javac test options */);"]}], "num": 59272}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66de4261a7b490ef6d14a50936986f62", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2be64eb995001698f34bb82261a29729", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocatorParser.java", "commitBeforeChange": "b3f55df3c0ef9c0b0b05657a3bc24ac74a8339f3", "commitAfterChange": "27981506f2756dff04c50e8b59d9c147159c1382", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void checkComment()", "signatureAfterChange": " public void checkComment()", "diff": ["+\t\t\t\tif (messageSend.arguments != null) {", "+\t\t\t\t\tfor (int a=0,al=messageSend.arguments.length; a<al; a++) {", "+\t\t\t\t\t\tJavadocArgumentExpression argument = (JavadocArgumentExpression) messageSend.arguments[a];", "+\t\t\t\t\t\tif (argument.argument != null && argument.argument.type != null) {", "+\t\t\t\t\t\t\tthis.patternLocator.match(argument.argument.type, this.nodeSet);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (constructor.arguments != null) {", "+\t\t\t\t\tfor (int a=0,al=constructor.arguments.length; a<al; a++) {", "+\t\t\t\t\t\tthis.patternLocator.match(constructor.arguments[a], this.nodeSet);", "+\t\t\t\t\t\tJavadocArgumentExpression argument = (JavadocArgumentExpression) constructor.arguments[a];", "+\t\t\t\t\t\tif (argument.argument != null && argument.argument.type != null) {", "+\t\t\t\t\t\t\tthis.patternLocator.match(argument.argument.type, this.nodeSet);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5be84a3abef8149c14eea97fed04eac1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java", "commitBeforeChange": "995fcf13bc3ad1e9b32a28fa575739b0c1b6aa41", "commitAfterChange": "125f2e11905eb2190c50776a296c49a5b3f7e6c1", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r public void storeDependencyInfo()", "signatureAfterChange": "\r public void storeDependencyInfo()", "diff": ["+\t// add the type hierarchy of each referenced type\r", "+\t// cannot do early since the hierarchy may not be fully resolved\r", "+\tfor (int i = 0; i < referencedTypes.size; i++) { // grows as more types are added\r", "+\t\tReferenceBinding type = (ReferenceBinding) referencedTypes.elementAt(i);\r", "+\t\tif (!type.isLocalType()) {\r", "+\t\t\trecordQualifiedReference(type.isMemberType()\r", "+\t\t\t\t? CharOperation.splitOn('.', type.readableName())\r", "+\t\t\t\t: type.compoundName);\r", "+\t\t\tReferenceBinding enclosing = type.enclosingType();\r", "+\t\t\tif (enclosing != null && !referencedTypes.containsIdentical(enclosing))\r", "+\t\t\t\treferencedTypes.add(enclosing); // to record its supertypes\r", "+\t\t}\r", "+\t\tReferenceBinding superclass = type.superclass();\r", "+\t\tif (superclass != null && !referencedTypes.containsIdentical(superclass))\r", "+\t\t\t\treferencedTypes.add(superclass); // to record its supertypes\r", "+\t\tReferenceBinding[] interfaces = type.superInterfaces();\r", "+\t\tif (interfaces != null && interfaces.length > 0)\r", "+\t\t\tfor (int j = 0, length = interfaces.length; j < length; j++)\r", "+\t\t\t\tif (!referencedTypes.containsIdentical(interfaces[j]))\r", "+\t\t\t\t\treferencedTypes.add(interfaces[j]); // to record its supertypes\r", "+\t}\r", "+\r", "+// Old code to be removed\r"]}], "num": 10040}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd8cad6766e04e85b36431a3810f11fc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04b83908871dead86b2fefb2feca9198", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocMessageSend.java", "commitBeforeChange": "cdead094a9813fdba5ccda0ce2f9f48a99552dbc", "commitAfterChange": "3be4aa0b7d051355f329ce1003f3f4c0f7acfab2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope)", "diff": ["-\t\tconstant = NotAConstant;", "-\t\tif (this.receiver instanceof CastExpression) this.receiver.bits |= IgnoreNeedForCastCheckMASK; // will check later on", "+\t\tthis.constant = NotAConstant;", "-\t\t\tthis.receiverType = receiver.resolveType((ClassScope)scope);", "+\t\t\tthis.receiverType = this.receiver.resolveType((ClassScope) scope);", "-\t\t\tthis.receiverType = receiver.resolveType((BlockScope)scope);", "+\t\t\tthis.receiverType = this.receiver.resolveType((BlockScope) scope);", "-\t\tif (arguments != null) {", "+\t\tif (this.arguments != null) {", "-\t\t\tint length = arguments.length;", "+\t\t\tint length = this.arguments.length;", "-\t\t\t\tExpression argument = arguments[i];", "+\t\t\t\tExpression argument = this.arguments[i];", "-\t\t\t\tif(receiverType instanceof ReferenceBinding) {", "-\t\t\t\t\t// record any selector match, for clients who may still need hint about possible method match", "-\t\t\t\t\tthis.codegenBinding = this.binding = scope.findMethod((ReferenceBinding)receiverType, selector, new TypeBinding[]{}, this);", "-\t\t\t\t}\t\t\t", "-\t\t\tscope.problemReporter().errorNoMethodFor(this, this.receiverType, argumentTypes);", "+\t\t\tscope.problemReporter().javadocErrorNoMethodFor(this, this.receiverType, argumentTypes, scope.getModifiers());", "-\t\tthis.codegenBinding = this.binding = scope.getMethod(this.receiverType, selector, argumentTypes, this); ", "-\t\tif (!binding.isValidBinding()) {", "-\t\t\tif (binding.declaringClass == null) {", "+\t\tthis.codegenBinding = this.binding = scope.getMethod(this.receiverType, this.selector, argumentTypes, this); ", "+\t\tif (!this.binding.isValidBinding()) {", "+\t\t\tif (this.binding.declaringClass == null) {", "-\t\t\t\t\tbinding.declaringClass = (ReferenceBinding) this.receiverType;", "+\t\t\t\t\tthis.binding.declaringClass = (ReferenceBinding) this.receiverType;", "-\t\t\t\t\tscope.problemReporter().errorNoMethodFor(this, this.receiverType, argumentTypes);", "+\t\t\t\t\tscope.problemReporter().javadocErrorNoMethodFor(this, this.receiverType, argumentTypes, scope.getModifiers());", "-\t\t\tscope.problemReporter().invalidMethod(this, binding);", "+\t\t\tscope.problemReporter().javadocInvalidMethod(this, this.binding, scope.getModifiers());", "-\t\t\tif (binding instanceof ProblemMethodBinding){", "-\t\t\t\tMethodBinding closestMatch = ((ProblemMethodBinding)binding).closestMatch;", "+\t\t\tif (this.binding instanceof ProblemMethodBinding){", "+\t\t\t\tMethodBinding closestMatch = ((ProblemMethodBinding)this.binding).closestMatch;", "-\t\t\treturn this.resolvedType = binding == null ? null : binding.returnType;", "+\t\t\treturn this.resolvedType = this.binding == null ? null : this.binding.returnType;", "-\t\tif (arguments != null) {", "-\t\t\tfor (int i = 0; i < arguments.length; i++) {", "-\t\t\t\targuments[i].implicitWidening(binding.parameters[i], argumentTypes[i]);", "-\t\t\t}", "-\t\t}", "-\t\tif (isMethodUseDeprecated(binding, scope)) {", "-\t\t\tscope.problemReporter().deprecatedMethod(binding, this);", "+\t\tif (isMethodUseDeprecated(this.binding, scope)) {", "+\t\t\tscope.problemReporter().javadocDeprecatedMethod(this.binding, this, scope.getModifiers());", "-\t\treturn this.resolvedType = binding.returnType;", "+\t\treturn this.resolvedType = this.binding.returnType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da0f5690a35ca1f44dedbd40e62a076c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/JDTCompilerAdapter.java", "commitBeforeChange": "9580475674d2dc0e975687220941c33b61d1b0ac", "commitAfterChange": "2be607e43fb0ccfc2d73541ff7ce26a9dc4cc358", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "signatureAfterChange": " \t \t \tprotected Commandline setupJavacCommand() throws BuildException", "diff": ["-        if (bootclasspath != null && bootclasspath.size() != 0) {", "+        if (this.bootclasspath != null && this.bootclasspath.size() != 0) {", "-\t\t\tcmd.createArgument().setPath(bootclasspath);        \t", "+\t\t\tcmd.createArgument().setPath(this.bootclasspath);        \t", "-            includeJavaRuntime = true;", "+            this.includeJavaRuntime = true;", "-        Path classpath = new Path(project);", "+        Path classpath = new Path(this.project);", "-        addExtdirs(extdirs, classpath);", "+        addExtdirs(this.extdirs, classpath);", "-\t\t\t\tcompileSourcePath = (Path) getSourcepathMethod.invoke(attributes, null);", "+\t\t\t\tcompileSourcePath = (Path) getSourcepathMethod.invoke(this.attributes, null);", "-            sourcepath = src;", "+            sourcepath = this.src;", "-        if (memoryInitialSize != null) {", "-            if (!attributes.isForkedJavac()) {", "-                attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.ignoringMemoryInitialSize\"), Project.MSG_WARN); //$NON-NLS-1$", "+        if (this.memoryInitialSize != null) {", "+            if (!this.attributes.isForkedJavac()) {", "+                this.attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.ignoringMemoryInitialSize\"), Project.MSG_WARN); //$NON-NLS-1$", "-                                              + \"ms\" + memoryInitialSize); //$NON-NLS-1$", "+                                              + \"ms\" + this.memoryInitialSize); //$NON-NLS-1$", "-        if (memoryMaximumSize != null) {", "-            if (!attributes.isForkedJavac()) {", "-                attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.ignoringMemoryMaximumSize\"), Project.MSG_WARN); //$NON-NLS-1$", "+        if (this.memoryMaximumSize != null) {", "+            if (!this.attributes.isForkedJavac()) {", "+                this.attributes.log(AntAdapterMessages.getString(\"ant.jdtadapter.info.ignoringMemoryMaximumSize\"), Project.MSG_WARN); //$NON-NLS-1$", "-                                              + \"mx\" + memoryMaximumSize); //$NON-NLS-1$", "+                                              + \"mx\" + this.memoryMaximumSize); //$NON-NLS-1$", "-        if (debug) {", "+        if (this.debug) {", "-\t\t\t\t\tdebugLevel = (String) getDebugLevelMethod.invoke(attributes, null);", "+\t\t\t\t\tdebugLevel = (String) getDebugLevelMethod.invoke(this.attributes, null);", "-\t\t\t\tcompilerArgs = (String[]) getCurrentCompilerArgsMethod.invoke(attributes, null);", "+\t\t\t\tcompilerArgs = (String[]) getCurrentCompilerArgsMethod.invoke(this.attributes, null);", "-\t\t\tif (attributes.getNowarn()) {", "-\t\t\t\tif (deprecation) {", "+\t\t\tif (this.attributes.getNowarn()) {", "+\t\t\t\tif (this.deprecation) {", "-\t\t\t} else if (deprecation) {", "+\t\t\t} else if (this.deprecation) {", "-\t\t\tif (attributes.getNowarn()) {", "-\t\t\t\tif (deprecation) {", "+\t\t\tif (this.attributes.getNowarn()) {", "+\t\t\t\tif (this.deprecation) {", "-\t\t\t\tif (deprecation) {", "+\t\t\t\tif (this.deprecation) {", "-\t\tif (destDir != null) {", "+\t\tif (this.destDir != null) {", "-\t\t\tcmd.createArgument().setFile(destDir.getAbsoluteFile());", "+\t\t\tcmd.createArgument().setFile(this.destDir.getAbsoluteFile());", "-\t\tif (target != null) {", "+\t\tif (this.target != null) {", "-\t\t\tcmd.createArgument().setValue(target);", "+\t\t\tcmd.createArgument().setValue(this.target);", "-\t\tif (verbose) {", "+\t\tif (this.verbose) {", "-\t\t\tlogFileName = destDir.getAbsolutePath() + \".log\"; //$NON-NLS-1$", "-\t\t\tcmd.createArgument().setValue(logFileName);", "+\t\t\tthis.logFileName = this.destDir.getAbsolutePath() + \".log\"; //$NON-NLS-1$", "+\t\t\tcmd.createArgument().setValue(this.logFileName);", "-\t\tif (!attributes.getFailonerror()) {", "+\t\tif (!this.attributes.getFailonerror()) {", "-\t\tString source = attributes.getSource();", "+\t\tString source = this.attributes.getSource();", "-\t\t\tif (target != null && target.equals(\"1.1\")) {\t\t\t   //$NON-NLS-1$\t", "+\t\t\tif (this.target != null && this.target.equals(\"1.1\")) {\t\t\t   //$NON-NLS-1$\t", "-        if (encoding != null) {", "+        if (this.encoding != null) {", "-            cmd.createArgument().setValue(encoding);", "+            cmd.createArgument().setValue(this.encoding);"]}], "num": 67920}
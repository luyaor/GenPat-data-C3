{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94f401fb9c6c6dc709a5695cb90bf0cf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "061313541a3c9c523e1ab0ed8111a52a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "9a099ab7eaca6de468f171f604d52045eb064822", "commitAfterChange": "245938f53ddff468739c34085f55dc93baea5c7e", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "  \tprotected void setUp() throws Exception", "signatureAfterChange": "  \tprotected void setUp() throws Exception", "diff": ["+\t\tString previousClassName = CURRENT_CLASS_NAME;", "+\t\tif (isFirst()) {", "+\t\t\tIPath dir = new Path(Util.getOutputDirectory());", "+\t\t\tif (previousClassName != null) {", "+\t\t\t\t// Minimize resilient files by removing previous test class global output dir", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(previousClassName, \".\");", "+\t\t\t\tIPath previousDir = dir;", "+\t\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\tpreviousDir = previousDir.append(tokenizer.nextToken());", "+\t\t\t\t}", "+\t\t\t\tUtil.rmdir(new File(previousDir.toOSString()));", "+\t\t\t}", "+\t\t\tStringTokenizer tokenizer = new StringTokenizer(CURRENT_CLASS_NAME, \".\");", "+\t\t\twhile (tokenizer.hasMoreTokens()) {", "+\t\t\t\tdir = dir.append(tokenizer.nextToken());", "+\t\t\t}", "+\t\t\tOUTPUT_DIR =  dir.append(\"output\").toOSString();", "+\t\t\tSOURCE_DIRECTORY = dir.append(\"source\").toOSString();", "+\t\t\tJAVAC_OUTPUT_DIR = dir.append(\"javac\").toOSString();", "+\t\t}", "+", "-\t\t\tif (!getClass().getName().equals(CURRENT_CLASS_NAME)) {", "+\t\t\tif (isFirst()) {", "-\t        Logger versionLogger = new Logger(compileProcess.getErrorStream(), \"\");", "-\t        // PREMATURE implement consistent error policy", "-\t        versionLogger.start();", "-\t        compileProcess.waitFor();", "+\t\t\t        Logger versionLogger = new Logger(compileProcess.getErrorStream(), \"\");", "+\t\t\t        // PREMATURE implement consistent error policy", "+\t\t\t        versionLogger.start();", "+\t\t\t        compileProcess.waitFor();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d571db511844370affc0f520eac169b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AttachSourceTests.java", "commitBeforeChange": "ff3d786f8b733e34cd64f8ef3efff230a2dbff42", "commitAfterChange": "d8e17e252326ade78baaea3eb05d18d16eaf07ae", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void testAttachSource() throws CoreException", "signatureAfterChange": " public void testDetectRootPath() throws JavaModelException", "diff": ["-public void testAttachSource() throws CoreException {", "-\tthis.attachSource(this.root, \"/AttachSourceTests/attachsrc.zip\", null);", "+ */", "+public void testDetectRootPath() throws JavaModelException {", "+\tIJavaProject project = getJavaProject(\"AttachSourceTests\");", "+\tIFile jar = (IFile) project.getProject().findMember(\"attach2.jar\");", "+\tIFile srcZip=(IFile) project.getProject().findMember(\"attach2src.zip\");", "+\tIPackageFragmentRoot root = project.getPackageFragmentRoot(jar);", "+\troot.attachSource(srcZip.getFullPath(), null, null);", "+", "+\t// ensure root path is detected", "+\tIPath rootSAPath= root.getSourceAttachmentRootPath();", "+\tassertEquals(\"Unexpected source attachment root path for \" + root.getPath(), \"src/nested\", rootSAPath.toString());", "+\t", "+\t// ensure source can be retrieved", "+\tIClassFile cf = root.getPackageFragment(\"x.y\").getClassFile(\"B.class\");", "+\tassertTrue(\"source code does not exist for the entire attached compilation unit\", cf.getSource() != null);", "+\t", "+\t// ensure root path is recomputed", "+\troot.close();", "+\tcf = root.getPackageFragment(\"x.y\").getClassFile(\"B.class\");", "+\tassertTrue(\"source code does not exist for the entire attached compilation unit\", cf.getSource() != null);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cdddb0125da8f7510fbc423cf3ba486", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/PreferencesTests.java", "commitBeforeChange": "6a39aeee024a65d73e9084e99bead655e3ded072", "commitAfterChange": "30a0d8b166ac2fa2854a231544dfecb8e382982a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void testFactoryPathEncodingAndDecoding() throws Exception", "signatureAfterChange": " \t \tpublic void testFactoryPathEncodingAndDecoding() throws Exception", "diff": ["-\t\tMap<FactoryContainer, Boolean> factories = new LinkedHashMap<FactoryContainer, Boolean>();", "-\t\tFactoryContainer jarFactory = FactoryPath.newExtJarFactoryContainer(new File(\"C:/test.jar\")); //$NON-NLS-1$", "-\t\tFactoryContainer pluginFactory = FactoryPath.getPluginFactoryContainer(\"org.eclipse.jdt.apt.tests\"); //$NON-NLS-1$", "-\t\tfactories.put(jarFactory, true);", "-\t\tfactories.put(pluginFactory, false);", "+\t\tMap<FactoryContainer, FactoryPath.Attributes> factories = new LinkedHashMap<FactoryContainer, FactoryPath.Attributes>();", "+\t\tFactoryContainer jarFactory1 = FactoryPathUtil.newExtJarFactoryContainer(new File(\"C:/test1.jar\")); //$NON-NLS-1$", "+\t\tFactoryPath.Attributes jarFPA1 = new FactoryPath.Attributes(true, false);", "+\t\tFactoryContainer jarFactory2 = FactoryPathUtil.newExtJarFactoryContainer(new File(\"C:/test2.jar\")); //$NON-NLS-1$", "+\t\tFactoryPath.Attributes jarFPA2 = new FactoryPath.Attributes(true, true);", "+\t\tFactoryContainer pluginFactory = FactoryPathUtil.getPluginFactoryContainer(\"org.eclipse.jdt.apt.tests\"); //$NON-NLS-1$", "+\t\tFactoryPath.Attributes pluginFPA = new FactoryPath.Attributes(false, false);", "+\t\tfactories.put(jarFactory1, jarFPA1);", "+\t\tfactories.put(jarFactory2, jarFPA2);", "+\t\tfactories.put(pluginFactory, pluginFPA);", "-\t\tassertEquals(2, factories.size());", "+\t\tassertEquals(3, factories.size());", "-\t\tfor (Map.Entry<FactoryContainer, Boolean> entry : factories.entrySet()) {", "+\t\tfor (Map.Entry<FactoryContainer, FactoryPath.Attributes> entry : factories.entrySet()) {", "-\t\t\tif (index == 0) {", "-\t\t\t\t// jar", "+\t\t\tswitch (index) {", "+\t\t\tcase 0:", "+\t\t\t\t// jar1", "-\t\t\t\tassertEquals(Boolean.TRUE, entry.getValue());", "-\t\t\t}", "-\t\t\telse {", "+\t\t\t\tassertTrue(entry.getValue().isEnabled());", "+\t\t\t\tassertFalse(entry.getValue().runInBatchMode());", "+\t\t\t\tbreak;", "+\t\t\tcase 1:", "+\t\t\t\t// jar2", "+\t\t\t\tassertEquals(FactoryType.EXTJAR, container.getType());", "+\t\t\t\tassertTrue(entry.getValue().isEnabled());", "+\t\t\t\tassertTrue(entry.getValue().runInBatchMode());", "+\t\t\t\tbreak;", "+\t\t\tcase 2:", "-\t\t\t\tassertEquals(Boolean.FALSE, entry.getValue());", "+\t\t\t\tassertFalse(entry.getValue().isEnabled());", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tfail(\"FactoryPath had an unexpected number of entries: \" + (index + 1));", "-\t\t\t", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f00e35e5ddd4dbeef1728b17f8338144", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java", "commitBeforeChange": "08e6d56eb4f872803f4062bb31c9e7f236cd1e1a", "commitAfterChange": "7fbe952294966532b57b4bfe2515ab0aecac086b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic static IClassFileReader createDefaultClassFileReader(String zipFileName, String zipEntryName, int decodingFlag)", "signatureAfterChange": " \tpublic static IClassFileReader createDefaultClassFileReader(IClassFile classfile, int decodingFlag)", "diff": ["+\t */", "+\tpublic static IClassFileReader createDefaultClassFileReader(IClassFile classfile, int decodingFlag){", "+", "+\t\tIPath filePath = classfile.getPath();", "+\t\tIPackageFragmentRoot root = (IPackageFragmentRoot) classfile.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);", "+\t\tif (root != null){", "+\t\t\ttry {", "+\t\t\t\tIPath rootPath = root.getPath();", "+\t\t\t\tif (root instanceof JarPackageFragmentRoot) {", "+\t\t\t\t\t\t", "+\t\t\t\t\tString archiveName = ((JarPackageFragmentRoot)root).getJar().getName();", "+\t\t\t\t\tString entryName = classfile.getParent().getElementName();", "+\t\t\t\t\tentryName = entryName.replace('.', '/');", "+\t\t\t\t\tif (entryName.equals(\"\")) { //$NON-NLS-1$", "+\t\t\t\t\t\tentryName += classfile.getElementName();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tentryName += '/' + classfile.getElementName();", "+\t\t\t\t\t}", "+\t\t\t\t\treturn createDefaultClassFileReader(archiveName, entryName, decodingFlag);", "+\t\t\t\t} else {", "+\t\t\t\t\treturn createDefaultClassFileReader(classfile.getCorrespondingResource().getLocation().toOSString(), decodingFlag);", "+\t\t\t\t}", "+\t\t\t} catch(CoreException e){", "+\t\t\t}", "+\t\t}", "+\t\treturn null;", "+\t}"]}], "num": 29942}
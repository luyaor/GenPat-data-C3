{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c561f1be95ec5285bec24416460082e2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a246b884247bd0e407237c3ed9e8d01", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "dfc3b8264596f4754baac29eef1af815f182c4f3", "commitAfterChange": "db0143bfca2398448195a62173050bd24d4fcb31", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r private void findNestedTypes(char[] typeName, ReferenceBinding currentType, Scope scope)", "signatureAfterChange": "\r \tprivate void findNestedTypes(\r \t\tchar[] typeName,\r \t\tSourceTypeBinding currentType,\r \t\tScope scope)", "diff": ["-}\r", "-private void findNestedTypes(char[] typeName, ReferenceBinding currentType, Scope scope) {\r", "-\tif (typeName == null) return;\r", "-\tint typeLength = typeName.length;\r", "-\twhile (scope != null) { // done when a COMPILATION_UNIT_SCOPE is found\r", "-\t\tswitch (scope.kind) {\r", "-\t\t\tcase Scope.METHOD_SCOPE :\r", "-\t\t\tcase Scope.BLOCK_SCOPE :\r", "-\t\t\t\tBlockScope blockScope = (BlockScope) scope;\r", "-\t\t\t\tnext : for (int i = 0, length = blockScope.scopeIndex; i < length; i++) {\r", "-\t\t\t\t\tif (blockScope.subscopes[i] instanceof ClassScope) {\r", "-\t\t\t\t\t\tSourceTypeBinding localType = ((ClassScope) blockScope.subscopes[i]).referenceContext.binding;\r", "-\t\t\t\t\t\tif (!localType.isAnonymousType()) {\r", "-\t\t\t\t\t\t\tif (typeLength > localType.sourceName.length) continue next;\r", "-\t\t\t\t\t\t\tif (!CharOperation.prefixEquals(typeName, localType.sourceName, false /* ignore case */)) continue next;\r", "-\t\t\t\t\t\t\trequestor.acceptClass(\r", "-\t\t\t\t\t\t\t\tlocalType.qualifiedPackageName(),\r", "-\t\t\t\t\t\t\t\tlocalType.sourceName,\r", "-\t\t\t\t\t\t\t\tlocalType.sourceName,\r", "-\t\t\t\t\t\t\t\tlocalType.modifiers,\r", "-\t\t\t\t\t\t\t\tstartPosition,\r", "-\t\t\t\t\t\t\t\tendPosition);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase Scope.CLASS_SCOPE :\r", "-\t\t\t\tfindMemberTypes(typeName, scope.enclosingSourceType(), scope);\r", "-\t\t\t\tif (typeLength == 0) return; // do not search outside the class scope if no prefix was provided\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "-\t\t\t\treturn;\r", "-\t\tscope = scope.parent;\r", "-}\r", "+\tprivate void findNestedTypes(\r", "+\t\tchar[] typeName,\r", "+\t\tSourceTypeBinding currentType,\r", "+\t\tScope scope) {\r", "+\t\tif (typeName == null)\r", "+\t\t\treturn;\r", "+\r", "+\t\tint typeLength = typeName.length;\r", "+\t\twhile (scope != null) { // done when a COMPILATION_UNIT_SCOPE is found\r", "+\t\t\tswitch (scope.kind) {\r", "+\t\t\t\tcase Scope.METHOD_SCOPE :\r", "+\t\t\t\tcase Scope.BLOCK_SCOPE :\r", "+\t\t\t\t\tBlockScope blockScope = (BlockScope) scope;\r", "+\t\t\t\t\tnext : for (int i = 0, length = blockScope.scopeIndex; i < length; i++) {\r", "+\t\t\t\t\t\tif (blockScope.subscopes[i] instanceof ClassScope) {\r", "+\t\t\t\t\t\t\tSourceTypeBinding localType =\r", "+\t\t\t\t\t\t\t\t((ClassScope) blockScope.subscopes[i]).referenceContext.binding;\r", "+\t\t\t\t\t\t\tif (!localType.isAnonymousType()) {\r", "+\t\t\t\t\t\t\t\tif (typeLength > localType.sourceName.length)\r", "+\t\t\t\t\t\t\t\t\tcontinue next;\r", "+\t\t\t\t\t\t\t\tif (!CharOperation.prefixEquals(typeName, localType.sourceName, false\r", "+\t\t\t\t\t\t\t\t\t/* ignore case */\r", "+\t\t\t\t\t\t\t\t\t))\r", "+\t\t\t\t\t\t\t\t\tcontinue next;\r", "+\r", "+\t\t\t\t\t\t\t\trequestor.acceptClass(\r", "+\t\t\t\t\t\t\t\t\tlocalType.qualifiedPackageName(),\r", "+\t\t\t\t\t\t\t\t\tlocalType.sourceName,\r", "+\t\t\t\t\t\t\t\t\tlocalType.sourceName,\r", "+\t\t\t\t\t\t\t\t\tlocalType.modifiers,\r", "+\t\t\t\t\t\t\t\t\tstartPosition,\r", "+\t\t\t\t\t\t\t\t\tendPosition);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase Scope.CLASS_SCOPE :\r", "+\t\t\t\t\tfindMemberTypes(typeName, scope.enclosingSourceType(), scope, currentType);\r", "+\t\t\t\t\tif (typeLength == 0)\r", "+\t\t\t\t\t\treturn; // do not search outside the class scope if no prefix was provided\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "+\t\t\t\t\treturn;\r", "+\t\t\t}\r", "+\t\t\tscope = scope.parent;\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89d6dda6621d36b94c31a67ac83aafb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r private void findNestedTypes(char[] typeName, ReferenceBinding currentType, Scope scope)", "signatureAfterChange": "\r \tprivate void findNestedTypes(\r \t\tchar[] typeName,\r \t\tSourceTypeBinding currentType,\r \t\tScope scope)", "diff": ["-}\r", "-private void findNestedTypes(char[] typeName, ReferenceBinding currentType, Scope scope) {\r", "-\tif (typeName == null) return;\r", "-\tint typeLength = typeName.length;\r", "-\twhile (scope != null) { // done when a COMPILATION_UNIT_SCOPE is found\r", "-\t\tswitch (scope.kind) {\r", "-\t\t\tcase Scope.METHOD_SCOPE :\r", "-\t\t\tcase Scope.BLOCK_SCOPE :\r", "-\t\t\t\tBlockScope blockScope = (BlockScope) scope;\r", "-\t\t\t\tnext : for (int i = 0, length = blockScope.scopeIndex; i < length; i++) {\r", "-\t\t\t\t\tif (blockScope.subscopes[i] instanceof ClassScope) {\r", "-\t\t\t\t\t\tSourceTypeBinding localType = ((ClassScope) blockScope.subscopes[i]).referenceContext.binding;\r", "-\t\t\t\t\t\tif (!localType.isAnonymousType()) {\r", "-\t\t\t\t\t\t\tif (typeLength > localType.sourceName.length) continue next;\r", "-\t\t\t\t\t\t\tif (!CharOperation.prefixEquals(typeName, localType.sourceName, false /* ignore case */)) continue next;\r", "-\t\t\t\t\t\t\trequestor.acceptClass(\r", "-\t\t\t\t\t\t\t\tlocalType.qualifiedPackageName(),\r", "-\t\t\t\t\t\t\t\tlocalType.sourceName,\r", "-\t\t\t\t\t\t\t\tlocalType.sourceName,\r", "-\t\t\t\t\t\t\t\tlocalType.modifiers,\r", "-\t\t\t\t\t\t\t\tstartPosition,\r", "-\t\t\t\t\t\t\t\tendPosition);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase Scope.CLASS_SCOPE :\r", "-\t\t\t\tfindMemberTypes(typeName, scope.enclosingSourceType(), scope);\r", "-\t\t\t\tif (typeLength == 0) return; // do not search outside the class scope if no prefix was provided\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "-\t\t\t\treturn;\r", "-\t\tscope = scope.parent;\r", "-}\r", "+\tprivate void findNestedTypes(\r", "+\t\tchar[] typeName,\r", "+\t\tSourceTypeBinding currentType,\r", "+\t\tScope scope) {\r", "+\t\tif (typeName == null)\r", "+\t\t\treturn;\r", "+\r", "+\t\tint typeLength = typeName.length;\r", "+\t\twhile (scope != null) { // done when a COMPILATION_UNIT_SCOPE is found\r", "+\t\t\tswitch (scope.kind) {\r", "+\t\t\t\tcase Scope.METHOD_SCOPE :\r", "+\t\t\t\tcase Scope.BLOCK_SCOPE :\r", "+\t\t\t\t\tBlockScope blockScope = (BlockScope) scope;\r", "+\t\t\t\t\tnext : for (int i = 0, length = blockScope.scopeIndex; i < length; i++) {\r", "+\t\t\t\t\t\tif (blockScope.subscopes[i] instanceof ClassScope) {\r", "+\t\t\t\t\t\t\tSourceTypeBinding localType =\r", "+\t\t\t\t\t\t\t\t((ClassScope) blockScope.subscopes[i]).referenceContext.binding;\r", "+\t\t\t\t\t\t\tif (!localType.isAnonymousType()) {\r", "+\t\t\t\t\t\t\t\tif (typeLength > localType.sourceName.length)\r", "+\t\t\t\t\t\t\t\t\tcontinue next;\r", "+\t\t\t\t\t\t\t\tif (!CharOperation.prefixEquals(typeName, localType.sourceName, false\r", "+\t\t\t\t\t\t\t\t\t/* ignore case */\r", "+\t\t\t\t\t\t\t\t\t))\r", "+\t\t\t\t\t\t\t\t\tcontinue next;\r", "+\r", "+\t\t\t\t\t\t\t\trequestor.acceptClass(\r", "+\t\t\t\t\t\t\t\t\tlocalType.qualifiedPackageName(),\r", "+\t\t\t\t\t\t\t\t\tlocalType.sourceName,\r", "+\t\t\t\t\t\t\t\t\tlocalType.sourceName,\r", "+\t\t\t\t\t\t\t\t\tlocalType.modifiers,\r", "+\t\t\t\t\t\t\t\t\tstartPosition,\r", "+\t\t\t\t\t\t\t\t\tendPosition);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase Scope.CLASS_SCOPE :\r", "+\t\t\t\t\tfindMemberTypes(typeName, scope.enclosingSourceType(), scope, currentType);\r", "+\t\t\t\t\tif (typeLength == 0)\r", "+\t\t\t\t\t\treturn; // do not search outside the class scope if no prefix was provided\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase Scope.COMPILATION_UNIT_SCOPE :\r", "+\t\t\t\t\treturn;\r", "+\t\t\t}\r", "+\t\t\tscope = scope.parent;\r", "+\t\t}\r", "+\t}\r"]}], "num": 49511}
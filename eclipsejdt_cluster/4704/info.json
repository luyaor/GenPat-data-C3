{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1edc54334ce4bb203f0e2b25420a710d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "088e3c1d908e42352c9a08cd058fb4cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java", "commitBeforeChange": "4e63b50ba3ef9bcdccdff9a2ea673562f37143e4", "commitAfterChange": "4997f1f5c27828dc6733e1f0cda3081f9d59b298", "methodNumberBeforeChange": 267, "methodNumberAfterChange": 267, "signatureBeforeChange": " public void _test428177()", "signatureAfterChange": " public void test428177()", "diff": ["-public void _test428177() {", "+public void test428177() {", "-\t\t\"valid error messages go here - some are expected since javac also complains\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. ERROR in X.java (at line 19)\\n\" + ", "+\t\t\"\tStream<String> stream2 = entries.map(toName).distinct(); // ERROR\\n\" + ", "+\t\t\"\t                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Stream<capture#7-of ? extends String> to Stream<String>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 20)\\n\" + ", "+\t\t\"\twithoutWildcard(entries.map(toName).distinct()); // ERROR\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The method withoutWildcard(Stream<String>) in the type InsistentCapture is not applicable for the arguments (Stream<capture#9-of ? extends String>)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 21)\\n\" + ", "+\t\t\"\twithoutWildcard(stream); // ERROR\\n\" + ", "+\t\t\"\t^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"The method withoutWildcard(Stream<String>) in the type InsistentCapture is not applicable for the arguments (Stream<capture#10-of ? extends String>)\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. ERROR in X.java (at line 36)\\n\" + ", "+\t\t\"\tif(\\\"1\\\" == \\\"\\\") { return stream.collect(Collectors.toList()).stream(); // ERROR\\n\" + ", "+\t\t\"\t                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Stream<capture#14-of ? extends String> to Stream<String>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 38)\\n\" + ", "+\t\t\"\treturn stream.collect(Collectors.toList()); // NO ERROR\\n\" + ", "+\t\t\"\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from List<capture#19-of ? extends String> to Stream<String>\\n\" + ", "+\t\t\"----------\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1df6983ca7fc80881e9db77b96c6fed", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "b084d49cf93184b78b7b25fbe5a551159363fd76", "commitAfterChange": "66d471a1b74f94c3655a30a7eb244a91677924ac", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tpublic void test040()", "signatureAfterChange": " \tpublic void test040()", "diff": ["+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in A.java (at line 3)\\n\" + ", "+\t\t\t\"\tclass B extends A { @Override List getList() { return null; } }\\n\" + ", "+\t\t\t\"\t                              ^^^^\\n\" + ", "+\t\t\t\"Type safety: List is a raw type. References to generic type List<E> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 2)\\n\" + ", "+\t\t\t\"\tabstract class Y<S> implements X<S> { public abstract X x(); }\\n\" + ", "+\t\t\t\"\t                                                      ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tabstract class Z implements X { public abstract X x(); }\\n\" + ", "+\t\t\t\"\t                            ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tabstract class Z implements X { public abstract X x(); }\\n\" + ", "+\t\t\t\"\t                                                ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. WARNING in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tabstract class Z implements X { public abstract X[] x(); }\\n\" + ", "+\t\t\t\"\t                            ^\\n\" + ", "+\t\t\t\"Type safety: X is a raw type. References to generic type X<T> should be parameterized\\n\" + "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fddc2aad64082de81edf48e0f6928193", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java", "commitBeforeChange": "94e87775403a1be90933921189758fda2ba4fb6c", "commitAfterChange": "bd01e05f0477a2d168d72337205595e4fa08ba90", "methodNumberBeforeChange": 882, "methodNumberAfterChange": 882, "signatureBeforeChange": " public void _test876()", "signatureAfterChange": " public void test876()", "diff": ["-public void _test876() {", "+public void test876() {", "-\t\t\"should be 3 errors\");", "+\t\t\"----------\\n\" + ", "+\t\t\"1. WARNING in X.java (at line 5)\\n\" + ", "+\t\t\"\tClass<Class> cc = cco; // ko\\n\" + ", "+\t\t\"\t      ^^^^^\\n\" + ", "+\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"2. ERROR in X.java (at line 5)\\n\" + ", "+\t\t\"\tClass<Class> cc = cco; // ko\\n\" + ", "+\t\t\"\t                  ^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Class<Class<Object>> to Class<Class>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\"\tClass<Class<Object>> cco2 = cc; // ko\\n\" + ", "+\t\t\"\t                            ^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Class<Class> to Class<Class<Object>>\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"4. WARNING in X.java (at line 9)\\n\" + ", "+\t\t\"\tClass<? extends Class> cec = ceco; // ok\\n\" + ", "+\t\t\"\t                ^^^^^\\n\" + ", "+\t\t\"Class is a raw type. References to generic type Class<T> should be parameterized\\n\" + ", "+\t\t\"----------\\n\" + ", "+\t\t\"5. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\"\tClass<? extends Class<Object>> ceco2 = cec; // ko\\n\" + ", "+\t\t\"\t                                       ^^^\\n\" + ", "+\t\t\"Type mismatch: cannot convert from Class<capture-of ? extends Class> to Class<? extends Class<Object>>\\n\" + ", "+\t\t\"----------\\n\");"]}], "num": 4704}
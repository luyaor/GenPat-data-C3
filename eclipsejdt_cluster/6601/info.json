{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e7c0c3b926955cb03c99d3c7837a55d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fbd2cee9c69b81b620118d664f2cf4d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "31c45831879fb9d166146101d8c06704e7b03918", "commitAfterChange": "4cbee9c4edfca3748d4063d8a7e10ad2054f1b8a", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " IMethod createBinaryMethodHandle(IType type, char[] methodSelector, char[][] argumentTypeNames, MatchLocator locator)", "signatureAfterChange": " IMethod createBinaryMethodHandle(IType type, char[] methodSelector, char[][] argumentTypeNames, MatchLocator locator)", "diff": ["-\t\t\t\t\tfor (int j = 0; j < argCount; j++) {", "-\t\t\t\t\t\tchar[] parameterTypeName = ClassFileMatchLocator.convertClassFileFormat(parameterTypes[j]);", "-\t\t\t\t\t\tif (!CharOperation.endsWith(Signature.toCharArray(Signature.getTypeErasure(parameterTypeName)), argumentTypeNames[j]))", "-\t\t\t\t\t\t\tcontinue nextMethod;", "-\t\t\t\t\t\tparameterTypes[j] = parameterTypeName;", "+\t\t\t\t\tif (argumentTypeNames != null) {", "+\t\t\t\t\t\tfor (int j = 0; j < argCount; j++) {", "+\t\t\t\t\t\t\tchar[] parameterTypeName = ClassFileMatchLocator.convertClassFileFormat(parameterTypes[j]);", "+\t\t\t\t\t\t\tif (!CharOperation.endsWith(Signature.toCharArray(Signature.getTypeErasure(parameterTypeName)), argumentTypeNames[j]))", "+\t\t\t\t\t\t\t\tcontinue nextMethod;", "+\t\t\t\t\t\t\tparameterTypes[j] = parameterTypeName;", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a35987d585b73369426968c115488539", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "4cbca3a5c8650b81b5a31d226fc27b2c31db5b39", "commitAfterChange": "2d45e82533a4fdf2e19ac612c4a04c15da28bf1a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprivate void enterAbstractMethod(MethodInfo methodInfo)", "signatureAfterChange": " \tprivate void enterAbstractMethod(MethodInfo methodInfo)", "diff": ["-\t\t\tthis.methodParameterTypes[typeDepth] = methodInfo.parameterTypes;", "-\t\t\tthis.methodParameterNames[typeDepth] = methodInfo. parameterNames;", "-\t\t\t", "+\t\t\tchar[][] parameterTypes = methodInfo.parameterTypes;", "+\t\t\tif (parameterTypes != null && methodInfo.isConstructor && currentType.getDeclaringType() != null) {", "+\t\t\t\tint length = parameterTypes.length;", "+\t\t\t\tchar[][] newParameterTypes = new char[length+1][];", "+\t\t\t\tnewParameterTypes[0] = currentType.getDeclaringType().getElementName().toCharArray();", "+\t\t\t\tSystem.arraycopy(parameterTypes, 0, newParameterTypes, 1, length);", "+\t\t\t\tthis.methodParameterTypes[typeDepth] = newParameterTypes;", "+\t\t\t} else {", "+\t\t\t\tthis.methodParameterTypes[typeDepth] = parameterTypes;", "+\t\t\t}", "+\t\t\tthis.methodParameterNames[typeDepth] = methodInfo.parameterNames;", "+\t\t\t"]}], "num": 6601}
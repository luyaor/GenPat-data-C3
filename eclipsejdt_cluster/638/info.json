{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ddba8ca5db583d6cf8974d9084ae4a3f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "389bec0c7de7fddb342054540408f201", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "990424c900c7463d4257bff26a1ccc6812106204", "commitAfterChange": "c8d00cbf2814182ef1ce07d7254dc4a8d85157bc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void acceptLocalMethod(MethodBinding methodBinding)", "signatureAfterChange": " public void acceptLocalMethod(MethodBinding methodBinding)", "diff": ["-\tif(res != null && res.getElementType() == IJavaElement.METHOD) {", "-\t\tIMethod method = (IMethod) res;", "-\t\t", "-\t\tchar[] uniqueKey = methodBinding.computeUniqueKey();", "-\t\tif(method.isBinary()) {", "-\t\t\tres = new ResolvedBinaryMethod(", "-\t\t\t\t\t(JavaElement)res.getParent(),", "-\t\t\t\t\tmethod.getElementName(),", "-\t\t\t\t\tmethod.getParameterTypes(), ", "-\t\t\t\t\tnew String(uniqueKey));", "-\t\t} else {", "-\t\t\tres = new ResolvedSourceMethod(", "-\t\t\t\t\t(JavaElement)res.getParent(),", "-\t\t\t\t\tmethod.getElementName(),", "-\t\t\t\t\tmethod.getParameterTypes(), ", "-\t\t\t\t\tnew String(uniqueKey));", "-\t\t}", "-\t\taddElement(res);", "-\t\tif(SelectionEngine.DEBUG){", "-\t\t\tSystem.out.print(\"SELECTION - accept method(\"); //$NON-NLS-1$", "-\t\t\tSystem.out.print(res.toString());", "-\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "+\tif(res != null) {", "+\t\tif(res.getElementType() == IJavaElement.METHOD) {", "+\t\t\tIMethod method = (IMethod) res;", "+\t\t\t", "+\t\t\tchar[] uniqueKey = methodBinding.computeUniqueKey();", "+\t\t\tif(method.isBinary()) {", "+\t\t\t\tres = new ResolvedBinaryMethod(", "+\t\t\t\t\t\t(JavaElement)res.getParent(),", "+\t\t\t\t\t\tmethod.getElementName(),", "+\t\t\t\t\t\tmethod.getParameterTypes(), ", "+\t\t\t\t\t\tnew String(uniqueKey));", "+\t\t\t} else {", "+\t\t\t\tres = new ResolvedSourceMethod(", "+\t\t\t\t\t\t(JavaElement)res.getParent(),", "+\t\t\t\t\t\tmethod.getElementName(),", "+\t\t\t\t\t\tmethod.getParameterTypes(), ", "+\t\t\t\t\t\tnew String(uniqueKey));", "+\t\t\t}", "+\t\t\taddElement(res);", "+\t\t\tif(SelectionEngine.DEBUG){", "+\t\t\t\tSystem.out.print(\"SELECTION - accept method(\"); //$NON-NLS-1$", "+\t\t\t\tSystem.out.print(res.toString());", "+\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t} else if(methodBinding.selector == TypeConstants.INIT && res.getElementType() == IJavaElement.TYPE) {", "+\t\t\t// it's a default constructor", "+\t\t\tres = new ResolvedSourceType((JavaElement)res.getParent(), res.getElementName(), new String(methodBinding.declaringClass.computeUniqueKey()));", "+\t\t\taddElement(res);", "+\t\t\tif(SelectionEngine.DEBUG){", "+\t\t\t\tSystem.out.print(\"SELECTION - accept type(\"); //$NON-NLS-1$", "+\t\t\t\tSystem.out.print(res.toString());", "+\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "760e5bbfd89bfb028cf685650fffd766", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java", "commitBeforeChange": "9f8931bf92b7966fbd8c101a448f79f7965fbbf9", "commitAfterChange": "3bf5bab95449ec256a601c2551910573083178b4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] name)", "signatureAfterChange": " public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] name, boolean isDeclaration, int start, int end)", "diff": ["-public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] name) {", "-\tIType type= resolveType(declaringTypePackageName, declaringTypeName,", "-\t\tNameLookup.ACCEPT_CLASSES | NameLookup.ACCEPT_INTERFACES);", "-\tif (type != null) {", "-\t\tIField field= type.getField(new String(name));", "-\t\tif (field.exists()) {", "-\t\t\taddElement(field);", "-\t\t\tif(SelectionEngine.DEBUG){", "-\t\t\t\tSystem.out.print(\"SELECTION - accept field(\"); //$NON-NLS-1$", "-\t\t\t\tSystem.out.print(field.toString());", "-\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "+public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] name, boolean isDeclaration, int start, int end) {", "+\tif(isDeclaration) {", "+\t\tIType type= resolveTypeByLocation(declaringTypePackageName, declaringTypeName,", "+\t\t\t\tNameLookup.ACCEPT_CLASSES | NameLookup.ACCEPT_INTERFACES,", "+\t\t\t\tstart, end);", "+\t\tif(type != null) {", "+\t\t\ttry {", "+\t\t\t\tIField[] fields = type.getFields();", "+\t\t\t\tfor (int i = 0; i < fields.length; i++) {", "+\t\t\t\t\tIField field = fields[i];", "+\t\t\t\t\tISourceRange range = field.getNameRange();", "+\t\t\t\t\tif(range.getOffset() <= start", "+\t\t\t\t\t\t\t&& range.getOffset() + range.getLength() >= end", "+\t\t\t\t\t\t\t&& field.getElementName().equals(new String(name))) {", "+\t\t\t\t\t\taddElement(fields[i]);", "+\t\t\t\t\t\tif(SelectionEngine.DEBUG){", "+\t\t\t\t\t\t\tSystem.out.print(\"SELECTION - accept field(\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\tSystem.out.print(field.toString());", "+\t\t\t\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn; // only one method is possible", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} catch (JavaModelException e) {", "+\t\t\t\treturn; ", "+\t\t\t}", "+\t\t}", "+\t} else {", "+\t\tIType type= resolveType(declaringTypePackageName, declaringTypeName,", "+\t\t\t\tNameLookup.ACCEPT_CLASSES | NameLookup.ACCEPT_INTERFACES);", "+\t\tif (type != null) {", "+\t\t\tIField field= type.getField(new String(name));", "+\t\t\tif (field.exists()) {", "+\t\t\t\taddElement(field);", "+\t\t\t\tif(SelectionEngine.DEBUG){", "+\t\t\t\t\tSystem.out.print(\"SELECTION - accept field(\"); //$NON-NLS-1$", "+\t\t\t\t\tSystem.out.print(field.toString());", "+\t\t\t\t\tSystem.out.println(\")\"); //$NON-NLS-1$", "+\t\t\t\t}"]}], "num": 638}
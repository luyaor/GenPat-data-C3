{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba7f81099a1c4b4203445a685c25328f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40ba42eb9635f78fb45253e9abf0b3c3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TypeAnnotationSyntaxTest.java", "commitBeforeChange": "b88f2ce9784ec2f0ba569c6d5efa91cf96a11aca", "commitAfterChange": "6ba0f0abfa6254bc0acf0eb26dd83c171f7e61b8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r public TypeAnnotationSyntaxTest(String testName)", "signatureAfterChange": "\r public TypeAnnotationSyntaxTest(String testName)", "diff": ["+\t}\r", "-\tsuper(testName);\r", "+\tsuper(testName, referenceCompiler, jsr308TestScratchArea);\r", "+\tif (referenceCompiler != null) {\r", "+\t\tFile f = new File(jsr308TestScratchArea);\r", "+\t\tif (!f.exists()) {\r", "+\t\t\tf.mkdir();\r", "+\t\t}\r", "+\t\tif (f.exists()) {\r", "+\t\t\ttry {\r", "+\t\t\t\tOutputStreamWriter w = new OutputStreamWriter(new FileOutputStream(new File(jsr308TestScratchArea + File.separator + \"Marker.java\")));\r", "+\t\t\t\tw.write(\"@interface Marker {}\\n\".toCharArray());\r", "+\t\t\t\tw.close();\r", "+\t\t\t\tw = new OutputStreamWriter(new FileOutputStream(new File(jsr308TestScratchArea + File.separator + \"Normal.java\")));\r", "+\t\t\t\tw.write(\"@interface Normal {\\n\\tint value() default 10;\\n}\\n\".toCharArray());\r", "+\t\t\t\tw.close();\r", "+\t\t\t\tw = new OutputStreamWriter(new FileOutputStream(new File(jsr308TestScratchArea + File.separator + \"SingleMember.java\")));\r", "+\t\t\t\tw.write(\"@interface SingleMember {\\n\\tint value() default 10;\\n}\\n\".toCharArray());\r", "+\t\t\t\tw.close();\r", "+\t\t\t\tw = new OutputStreamWriter(new FileOutputStream(new File(jsr308TestScratchArea + File.separator + \"Positive.java\")));\r", "+\t\t\t\tw.write(\"@interface Positive {}\\n\".toCharArray());\r", "+\t\t\t\tw.close();\r", "+\t\t\t\tw = new OutputStreamWriter(new FileOutputStream(new File(jsr308TestScratchArea + File.separator + \"Negative.java\")));\r", "+\t\t\t\tw.write(\"@interface Negative{}\\n\".toCharArray());\r", "+\t\t\t\tw.close();\r", "+\t\t\t\tw = new OutputStreamWriter(new FileOutputStream(new File(jsr308TestScratchArea + File.separator + \"Readonly.java\")));\r", "+\t\t\t\tw.write(\"@interface Readonly {}\\n\".toCharArray());\r", "+\t\t\t\tw.close();\r", "+\t\t\t\tw = new OutputStreamWriter(new FileOutputStream(new File(jsr308TestScratchArea + File.separator + \"NonNull.java\")));\r", "+\t\t\t\tw.write(\"@interface NonNull {}\\n\".toCharArray());\r", "+\t\t\t\tw.close();\r", "+\t\t\t\tw = new OutputStreamWriter(new FileOutputStream(new File(jsr308TestScratchArea + File.separator + \"HashMap.java\")));\r", "+\t\t\t\tw.write(\"class HashMap<X,Y> {\\n class Iterator {}; \\n}\\n\".toCharArray());\r", "+\t\t\t\tw.close();\r", "+\t\t\t\tCHECK_ALL |= CHECK_JAVAC_PARSER;\r", "+\t\t\t} catch (IOException e) {\r", "+\t\t\t\t// ignore\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccd981e2ace0f99ce33bc87db0bee0bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/BaseProcessorEnv.java", "commitBeforeChange": "e5dee4f66ab3257e0d9e4e34690323cf2d5f7c21", "commitAfterChange": "ba7f55d89dcf40f0d2718397b348f39209d50c3a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \t \tprivate void initPrimitives(final IJavaProject project)", "signatureAfterChange": " \t \tprivate void initPrimitives(final AST ast)", "diff": ["-\tprivate void initPrimitives(final IJavaProject project)", "+\tprivate void initPrimitives(final AST ast)", "-\t\tclass PrimitiveBindingRequestor extends ASTRequestor", "-\t\t{", "-\t\t\tpublic void acceptBinding(String bindingKey, IBinding binding)", "-\t\t\t{", "-\t\t\t\tif( binding.getKind() == IBinding.TYPE ){", "-\t\t\t\t\tif( ITypeConstants.BOOLEAN.equals(binding.getName()) ) ", "-\t\t\t\t\t\t_primitives[0] = new PrimitiveTypeImpl( (ITypeBinding)binding );", "-\t\t\t\t\telse if( ITypeConstants.BYTE.equals(binding.getName()) )", "-\t\t\t\t\t\t_primitives[1] = new PrimitiveTypeImpl( (ITypeBinding)binding );", "-\t\t\t\t\telse if( ITypeConstants.CHAR.equals(binding.getName()) )", "-\t\t\t\t\t\t_primitives[2] = new PrimitiveTypeImpl( (ITypeBinding)binding );", "-\t\t\t\t\telse if( ITypeConstants.DOUBLE.equals(binding.getName()) ) ", "-\t\t\t\t\t\t_primitives[3] = new PrimitiveTypeImpl( (ITypeBinding)binding );", "-\t\t\t\t\telse if( ITypeConstants.FLOAT.equals(binding.getName()) ) ", "-\t\t\t\t\t\t_primitives[4] = new PrimitiveTypeImpl( (ITypeBinding)binding );", "-\t\t\t\t\telse if( ITypeConstants.INT.equals(binding.getName()) ) ", "-\t\t\t\t\t\t_primitives[5] = new PrimitiveTypeImpl( (ITypeBinding)binding );", "-\t\t\t\t\telse if( ITypeConstants.LONG.equals(binding.getName()) ) ", "-\t\t\t\t\t\t_primitives[6] = new PrimitiveTypeImpl( (ITypeBinding)binding );", "-\t\t\t\t\telse if( ITypeConstants.SHORT.equals(binding.getName()) ) ", "-\t\t\t\t\t\t_primitives[7] = new PrimitiveTypeImpl( (ITypeBinding)binding );", "-\t\t\t\t\telse if( ITypeConstants.VOID.equals(binding.getName()) ) ", "-\t\t\t\t\t\t_voidType = new VoidTypeImpl( (ITypeBinding)binding );", "-\t\t\t\t\telse", "-\t\t\t\t\t\tSystem.err.println(\"got unexpected type \" + binding.getName()); //$NON-NLS-1$", "-\t\t\t\t}", "-\t\t\t\telse", "-\t\t\t\t\tSystem.err.println(\"got unexpected binding \" + binding.getClass().getName() + binding );  //$NON-NLS-1$", "-\t\t\t}", "-\t\t}", "-", "-\t\tfinal String[] keys = { BindingKey.createTypeBindingKey(ITypeConstants.BOOLEAN),", "-\t\t\t\tBindingKey.createTypeBindingKey(ITypeConstants.BYTE),", "-\t\t\t\tBindingKey.createTypeBindingKey(ITypeConstants.CHAR),", "-\t\t\t\tBindingKey.createTypeBindingKey(ITypeConstants.DOUBLE),", "-\t\t\t\tBindingKey.createTypeBindingKey(ITypeConstants.FLOAT),", "-\t\t\t\tBindingKey.createTypeBindingKey(ITypeConstants.INT),", "-\t\t\t\tBindingKey.createTypeBindingKey(ITypeConstants.LONG),", "-\t\t\t\tBindingKey.createTypeBindingKey(ITypeConstants.SHORT),", "-\t\t\t\tBindingKey.createTypeBindingKey(ITypeConstants.VOID)};", "-", "-\t\tfinal PrimitiveBindingRequestor requestor = new PrimitiveBindingRequestor();", "-\t\tfinal ASTParser parser = ASTParser.newParser(AST.JLS3);", "-\t\tparser.setProject(project);", "-\t\tparser.setResolveBindings(true);", "-\t\tparser.createASTs(NO_UNIT, keys, requestor, null);", "+\t\t// boolean", "+\t\tITypeBinding binding = ast.resolveWellKnownType(ITypeConstants.BOOLEAN);\t\t", "+\t\tif( binding == null )", "+\t\t\tthrow new IllegalStateException(\"fail to locate \" + ITypeConstants.BOOLEAN); //$NON-NLS-1$", "+\t\t_primitives[BOOLEAN_INDEX] = new PrimitiveTypeImpl(binding);\t\t", "+\t\t// byte", "+\t\tbinding = ast.resolveWellKnownType(ITypeConstants.BYTE);", "+\t\tif( binding == null )", "+\t\t\tthrow new IllegalStateException(\"fail to locate \" + ITypeConstants.BYTE); //$NON-NLS-1$", "+\t\t_primitives[BYTE_INDEX] = new PrimitiveTypeImpl(binding);", "+\t\t// char", "+\t\tbinding = ast.resolveWellKnownType(ITypeConstants.CHAR);", "+\t\tif( binding == null )", "+\t\t\tthrow new IllegalStateException(\"fail to locate \" + ITypeConstants.BYTE); //$NON-NLS-1$", "+\t\t_primitives[CHAR_INDEX] = new PrimitiveTypeImpl(binding);", "+\t\t// double", "+\t\tbinding = ast.resolveWellKnownType(ITypeConstants.DOUBLE);", "+\t\tif( binding == null )", "+\t\t\tthrow new IllegalStateException(\"fail to locate \" + ITypeConstants.BYTE); //$NON-NLS-1$", "+\t\t_primitives[DOUBLE_INDEX] = new PrimitiveTypeImpl(binding);", "+\t\t// float", "+\t\tbinding = ast.resolveWellKnownType(ITypeConstants.FLOAT);", "+\t\tif( binding == null )", "+\t\t\tthrow new IllegalStateException(\"fail to locate \" + ITypeConstants.BYTE); //$NON-NLS-1$", "+\t\t_primitives[FLOAT_INDEX] = new PrimitiveTypeImpl(binding);", "+\t\t// int", "+\t\tbinding = ast.resolveWellKnownType(ITypeConstants.INT);", "+\t\tif( binding == null )", "+\t\t\tthrow new IllegalStateException(\"fail to locate \" + ITypeConstants.BYTE); //$NON-NLS-1$", "+\t\t_primitives[INT_INDEX] = new PrimitiveTypeImpl(binding);", "+\t\t// long", "+\t\tbinding = ast.resolveWellKnownType(ITypeConstants.LONG);", "+\t\tif( binding == null )", "+\t\t\tthrow new IllegalStateException(\"fail to locate \" + ITypeConstants.BYTE); //$NON-NLS-1$", "+\t\t_primitives[LONG_INDEX] = new PrimitiveTypeImpl(binding);", "+\t\t// short", "+\t\tbinding = ast.resolveWellKnownType(ITypeConstants.SHORT);", "+\t\tif( binding == null )", "+\t\t\tthrow new IllegalStateException(\"fail to locate \" + ITypeConstants.BYTE); //$NON-NLS-1$", "+\t\t_primitives[SHORT_INDEX] = new PrimitiveTypeImpl(binding);", "+\t\t// void", "+\t\tbinding = ast.resolveWellKnownType(ITypeConstants.VOID);", "+\t\tif( binding == null )", "+\t\t\tthrow new IllegalStateException(\"fail to locate \" + ITypeConstants.BYTE); //$NON-NLS-1$", "+\t\t_voidType = new VoidTypeImpl(binding);"]}], "num": 4787}
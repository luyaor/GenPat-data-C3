{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c01d59bc6d7426dd636b8eba0b75666", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e34077af9ecd6538d6a5cab9256b09f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingOpenable.java", "commitBeforeChange": "e6099120ee9021152f84e60105066d4964c2db21", "commitAfterChange": "82631a98caad8b28e9cefb217339d51e64ef47f9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r private void locateMatchesInCompilationUnit(char[] source) throws CoreException", "signatureAfterChange": "\r private void locateMatchesInCompilationUnit(char[] source) throws CoreException", "diff": ["-\t\tthis.locator.parser.matchSet = this.matchSet;\r", "-\t\tthis.locator.parser.scanner.setSourceBuffer(source);\r", "-\t\tthis.locator.parser.parseBodies(this.parsedUnit);\r", "-\t\t// report matches that don't need resolve\r", "-\t\tthis.matchSet.cuHasBeenResolved = false;\r", "-\t\tthis.matchSet.reportMatching(parsedUnit);\r", "-\t\t\r", "-\t\t// resolve if needed\r", "-\t\tif (this.matchSet.needsResolve()) {\r", "-\t\t\tif (this.parsedUnit.types != null) {\r", "-\t\t\t\tif (this.shouldResolve) {\r", "-\t\t\t\t\ttry {\r", "-\t\t\t\t\t\tif (this.parsedUnit.scope != null) {\r", "-\t\t\t\t\t\t\tthis.parsedUnit.scope.faultInTypes();\r", "-\t\t\t\t\t\t\tthis.parsedUnit.resolve();\r", "+\t\ttry {\r", "+\t\t\tthis.locator.parser.matchSet = this.matchSet;\r", "+\t\t\tthis.locator.parser.scanner.setSourceBuffer(source);\r", "+\t\t\tthis.locator.parser.parseBodies(this.parsedUnit);\r", "+\t\t\t// report matches that don't need resolve\r", "+\t\t\tthis.matchSet.cuHasBeenResolved = false;\r", "+\t\t\tthis.matchSet.reportMatching(parsedUnit);\r", "+\t\t\t\r", "+\t\t\t// resolve if needed\r", "+\t\t\tif (this.matchSet.needsResolve()) {\r", "+\t\t\t\tif (this.parsedUnit.types != null) {\r", "+\t\t\t\t\tif (this.shouldResolve) {\r", "+\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\tif (this.parsedUnit.scope != null) {\r", "+\t\t\t\t\t\t\t\tthis.parsedUnit.scope.faultInTypes();\r", "+\t\t\t\t\t\t\t\tthis.parsedUnit.resolve();\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t// report matches that needed resolve\r", "+\t\t\t\t\t\t\tthis.matchSet.cuHasBeenResolved = true;\r", "+\t\t\t\t\t\t\tthis.matchSet.reportMatching(this.parsedUnit);\r", "+\t\t\t\t\t\t} catch (AbortCompilation e) {\r", "+\t\t\t\t\t\t\t// could not resolve: report innacurate matches\r", "+\t\t\t\t\t\t\tthis.matchSet.cuHasBeenResolved = true;\r", "+\t\t\t\t\t\t\tthis.matchSet.reportMatching(this.parsedUnit);\r", "+\t\t\t\t\t\t\tif (!(e instanceof AbortCompilationUnit)) {\r", "+\t\t\t\t\t\t\t\t// problem with class path\r", "+\t\t\t\t\t\t\t\tthrow e;\r", "+\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t// report matches that needed resolve\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t// problem ocured while completing the bindings for the base classes\r", "+\t\t\t\t\t\t// -> report innacurate matches\r", "-\t\t\t\t\t} catch (AbortCompilation e) {\r", "-\t\t\t\t\t\t// could not resolve: report innacurate matches\r", "-\t\t\t\t\t\tthis.matchSet.cuHasBeenResolved = true;\r", "-\t\t\t\t\t\tthis.matchSet.reportMatching(this.parsedUnit);\r", "-\t\t\t\t\t\tif (!(e instanceof AbortCompilationUnit)) {\r", "-\t\t\t\t\t\t\t// problem with class path\r", "-\t\t\t\t\t\t\tthrow e;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\t// problem ocured while completing the bindings for the base classes\r", "-\t\t\t\t\t// -> report innacurate matches\r", "-\t\t\t\t\tthis.matchSet.cuHasBeenResolved = true;\r", "-\t\t\t\t\tthis.matchSet.reportMatching(this.parsedUnit);\r", "+\t\t} finally {\r", "+\t\t\tthis.locator.parser.matchSet = null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a818c2081a5a3560847551aa662c0fa1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchingOpenable.java", "commitBeforeChange": "7daed772befc71241cd5718015cdd1d8faa642ca", "commitAfterChange": "bf0f3c0ee6c28cc3716705a3315c5622fc576ce2", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": " private void locateMatchesInCompilationUnit(char[] source) throws CoreException", "signatureAfterChange": " private void locateMatchesInCompilationUnit(char[] source) throws CoreException", "diff": ["-\t\t\tif (this.matchSet.needsResolve()) {", "-\t\t\t\tif (this.parsedUnit.types != null) {", "-\t\t\t\t\tif (this.shouldResolve) {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tif (this.parsedUnit.scope == null) {", "-\t\t\t\t\t\t\t\t// bindings were not created (case of a FieldReferencePattern that doesn't need resolve, ", "-\t\t\t\t\t\t\t\t// but we need to resolve because of a SingleNameReference being a potential match)", "-\t\t\t\t\t\t\t\tthis.locator.lookupEnvironment.buildTypeBindings(this.parsedUnit);", "-\t\t\t\t\t\t\t\tthis.locator.lookupEnvironment.completeTypeBindings(this.parsedUnit, true);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (this.parsedUnit.scope != null) {", "-\t\t\t\t\t\t\t\tthis.parsedUnit.scope.faultInTypes();", "-\t\t\t\t\t\t\t\tthis.parsedUnit.resolve();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t// report matches that needed resolve", "-\t\t\t\t\t\t\tthis.matchSet.cuHasBeenResolved = true;", "-\t\t\t\t\t\t\tthis.matchSet.reportMatching(this.parsedUnit);", "-\t\t\t\t\t\t} catch (AbortCompilation e) {", "-\t\t\t\t\t\t\t// could not resolve: report innacurate matches", "-\t\t\t\t\t\t\tthis.matchSet.cuHasBeenResolved = true;", "-\t\t\t\t\t\t\tthis.matchSet.reportMatching(this.parsedUnit);", "-\t\t\t\t\t\t\tif (!(e instanceof AbortCompilationUnit)) {", "-\t\t\t\t\t\t\t\t// problem with class path", "-\t\t\t\t\t\t\t\tthrow e;", "-\t\t\t\t\t\t\t}", "+\t\t\tif (this.matchSet.needsResolve() && this.parsedUnit.types != null) {", "+\t\t\t\tif (!this.locator.compilationAborted) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tif (this.parsedUnit.scope == null) {", "+\t\t\t\t\t\t\t// bindings were not created (case of a FieldReferencePattern that doesn't need resolve, ", "+\t\t\t\t\t\t\t// but we need to resolve because of a SingleNameReference being a potential match)", "+\t\t\t\t\t\t\tMatchingOpenable[] openables = this.locator.matchingOpenables.getMatchingOpenables(this.openable.getJavaProject().getPackageFragmentRoots());", "+\t\t\t\t\t\t\tthis.locator.createAndResolveBindings(openables);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// problem ocured while completing the bindings for the base classes", "-\t\t\t\t\t\t// -> report innacurate matches", "+\t\t\t\t\t\tif (this.parsedUnit.scope != null) {", "+\t\t\t\t\t\t\tthis.parsedUnit.scope.faultInTypes();", "+\t\t\t\t\t\t\tthis.parsedUnit.resolve();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t// report matches that needed resolve", "+\t\t\t\t\t} catch (AbortCompilation e) {", "+\t\t\t\t\t\t// could not resolve: report innacurate matches", "+\t\t\t\t\t\tthis.matchSet.cuHasBeenResolved = true;", "+\t\t\t\t\t\tthis.matchSet.reportMatching(this.parsedUnit);", "+\t\t\t\t\t\tif (!(e instanceof AbortCompilationUnit)) {", "+\t\t\t\t\t\t\t// problem with class path", "+\t\t\t\t\t\t\tthrow e;", "+\t\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t// problem ocured while completing the bindings for the base classes", "+\t\t\t\t\t// -> report innacurate matches", "+\t\t\t\t\tthis.matchSet.cuHasBeenResolved = true;", "+\t\t\t\t\tthis.matchSet.reportMatching(this.parsedUnit);"]}], "num": 59247}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d150d02077a6ba6b3b97b7018d25b90", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bcf9b913b565ddecc93a1223ddc44d3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "ee7a9f184cb78c9a997b3d97c102d52d6cad8cc9", "commitAfterChange": "5ce130e25c355987e77b700c026948aca2c3cdd7", "methodNumberBeforeChange": 279, "methodNumberAfterChange": 279, "signatureBeforeChange": " \tpublic void test0261() throws JavaModelException", "signatureAfterChange": " \tpublic void test0261() throws JavaModelException", "diff": ["-\t\tassertNull(\"No key\", annotationBinding.getKey());", "+\t\tassertEquals(\"Unexpected key\", \"LX;@LX~Annot;\", annotationBinding.getKey());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ffd43274b292e7ef0231991d15f6b8e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java", "commitBeforeChange": "16ea2a8daece1ce57aeee98ca0579c5d79d5f9c9", "commitAfterChange": "c103de7652c81626d78eadd07a0763ab5a5a3287", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \t \tpublic void test0026() throws JavaModelException", "signatureAfterChange": " \t \tpublic void test0026() throws JavaModelException", "diff": ["-\t\tassertEquals(\"Wrong number of modifiers\", 2, modifiers.size());", "+\t\tassertEquals(\"Wrong number of modifiers\", 1, modifiers.size());", "-\t\textendedModifier = (IExtendedModifier) modifiers.get(1);", "-\t\tassertTrue(\"Not a modifier\", extendedModifier instanceof Modifier);", "-\t\tmodifier = (Modifier) extendedModifier;", "-\t\tcheckSourceRange(modifier, \"abstract\", source);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26a147273629163bd8d75f252377e40e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingTypeDeclTest.java", "commitBeforeChange": "6cb1a46319677820636b0fbe76d096b92fe1835a", "commitAfterChange": "11ac720cf12c89391a32ed5e56750070174f7f3f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void testTypeDeclInserts_only_2() throws Exception", "signatureAfterChange": "  \tpublic void testTypeDeclInserts_only_2() throws Exception", "diff": ["-\t\t\trewrite.set(type, TypeDeclaration.MODIFIERS_PROPERTY, new Integer(newModifiers), null);", "+\t\t\trewrite.set(type, INTERNAL_TYPE_MODIFIERS_PROPERTY, new Integer(newModifiers), null);", "-\t\t\trewrite.getListRewrite(type, TypeDeclaration.SUPER_INTERFACES_PROPERTY).insertFirst(newSuperinterface, null);", "+\t\t\trewrite.getListRewrite(type, INTERNAL_TYPE_SUPER_INTERFACES_PROPERTY).insertFirst(newSuperinterface, null);", "-\t\t\trewrite.set(type, TypeDeclaration.SUPERCLASS_PROPERTY, newSuperclass, null);", "+\t\t\trewrite.set(type, INTERNAL_TYPE_SUPERCLASS_PROPERTY, newSuperclass, null);", "-\t\t\trewrite.getListRewrite(type, TypeDeclaration.SUPER_INTERFACES_PROPERTY).insertLast(newInterface, null);", "+\t\t\trewrite.getListRewrite(type, INTERNAL_TYPE_SUPER_INTERFACES_PROPERTY).insertLast(newInterface, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d6fea57e651e7cf35f6bec3bcf147cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "1c367f9da4b67ddc705e012aa9c952ee4bdfc663", "commitAfterChange": "7974f4a5911052c39ead36f51d3952ab684e5130", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tpublic void test0015() throws JavaModelException", "signatureAfterChange": " \tpublic void test0015() throws JavaModelException", "diff": ["-\t\tassertTrue(typeParameter.annotations().size() == 2);", "-\t\tAnnotation annotation = (Annotation)typeParameter.annotations().get(1);", "+\t\tassertTrue(typeParameter.modifiers().size() == 2);", "+\t\tAnnotation annotation = (Annotation)typeParameter.modifiers().get(1);", "-\t\tassertTrue(typeParameter.annotations().size() == 1);", "-\t\tannotation = (Annotation)typeParameter.annotations().get(0);", "+\t\tassertTrue(typeParameter.modifiers().size() == 1);", "+\t\tannotation = (Annotation)typeParameter.modifiers().get(0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71863cbc26f6020c3cffeaa2bc40dcb9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "51d45c360e379dc3d174cfefd6624f6613e9055b", "commitAfterChange": "8a17153af69ddcddcc6ac5bd94649f0b523f5b72", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void test399794() throws JavaModelException", "signatureAfterChange": " \tpublic void test399794() throws JavaModelException", "diff": ["-\t\tassertNotNull(methodBinding);", "+\t\tassertNull(methodBinding);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90c6c5312286e1ffabe067a705de2d2b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "e6029c8b1adfe1296ee554ed42f00e5a663cecbf", "commitAfterChange": "d3d92e370789aaaed8a46c804d74e3cb2b4bb167", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic void test0005() throws JavaModelException", "signatureAfterChange": " \tpublic void test0005() throws JavaModelException", "diff": ["-\t\tassertTrue(type.isSimpleType());", "-\t\tSimpleType simpleType = (SimpleType) type;", "-\t\tassertEquals(\"Outer.@Marker1 Inner\", simpleType.toString());", "-\t\tList annotations = simpleType.annotations();", "+\t\tassertTrue(type.isQualifiedType());", "+\t\tQualifiedType qualifiedType = (QualifiedType) type;", "+\t\tassertEquals(\"Outer.@Marker1 Inner\", qualifiedType.toString());", "+\t\tList annotations = qualifiedType.annotations();", "-\t\tQualifiedType qualifiedType = (QualifiedType) type;", "+\t\tqualifiedType = (QualifiedType) type;", "-\t\tsimpleType = (SimpleType) qualifierType;", "+\t\tSimpleType simpleType = (SimpleType) qualifierType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba9fcd28813f1c5894c6f971474fe146", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingMethodDeclTest.java", "commitBeforeChange": "aa6aecd1e85bc088f78aefc939f3035d29fdf2f7", "commitAfterChange": "caead2c6488f232c99b522820aa80d0eed7f2116", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \t \tpublic void testEnumConstantDeclaration2() throws Exception", "signatureAfterChange": "  \tpublic void testEnumConstantDeclaration2() throws Exception", "diff": ["-\t", "+", "-\t\t", "+", "-\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.bodyDeclarations().get(0);", "+\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.enumConstants().get(0);", "-\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.bodyDeclarations().get(1);", "+\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.enumConstants().get(1);", "-\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.bodyDeclarations().get(2);", "+\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.enumConstants().get(2);", "-\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.bodyDeclarations().get(3);", "+\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.enumConstants().get(3);", "-\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.bodyDeclarations().get(4);", "+\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.enumConstants().get(4);", "-\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.bodyDeclarations().get(5);", "+\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.enumConstants().get(5);", "-\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.bodyDeclarations().get(6);", "+\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.enumConstants().get(6);", "-\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.bodyDeclarations().get(7);", "+\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.enumConstants().get(7);", "-\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.bodyDeclarations().get(8);", "+\t\t\tEnumConstantDeclaration enumConst= (EnumConstantDeclaration) type.enumConstants().get(8);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce55b5f382d691a3fc4156a113cb0c74", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java", "commitBeforeChange": "e1051acac48de2e59e4c3d2d0f46898b4067bf9a", "commitAfterChange": "25dbd9e17c7b6920dccf1b458296dbbe00f382de", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void test0005() throws JavaModelException", "signatureAfterChange": " \tpublic void test0005() throws JavaModelException", "diff": ["-\t\tassertTrue(type.isQualifiedType());", "-\t\tQualifiedType qualifiedType = (QualifiedType) type;", "-\t\tassertEquals(\"Outer.@Marker1 Inner\", qualifiedType.toString());", "-\t\tList annotations = qualifiedType.annotations();", "+\t\tassertTrue(type.isNameQualifiedType());", "+\t\tNameQualifiedType nameQualifiedType = (NameQualifiedType) type;", "+\t\tassertEquals(\"Outer.@Marker1 Inner\", nameQualifiedType.toString());", "+\t\tList annotations = nameQualifiedType.annotations();", "-\t\tqualifiedType = (QualifiedType) type;", "+\t\tQualifiedType qualifiedType = (QualifiedType) type;"]}], "num": 10723}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52c592630f3092c2aab09f863fabd95c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31449162e6680e2761f046c13758b3cf", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java", "commitBeforeChange": "4d1b2a602aa63e2d641e31567150dab25a5e04f3", "commitAfterChange": "7935d7046a5948ba0caaa49b731ab944081ed079", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  \tpublic boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": "  \tpublic boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-\t\totherType = otherType.unannotated(); // for now consider un-annotated type as equivalent to type with any type annotations", "-\t\tif ((this.tagBits & TagBits.HasNullTypeAnnotation) != 0)", "-\t\t\treturn unannotated().isEquivalentTo(otherType);", "+\t\t// disregard any type annotations on this and otherType", "+\t\t// recursive call needed when this is annotated, unless the annotation was introduced on a declaration", "+\t\totherType = otherType.unannotated();", "+\t\tTypeBinding unannotated = unannotated();", "+\t\tif (unannotated != this)", "+\t\t\treturn unannotated.isEquivalentTo(otherType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b27b61fd8bc5723f23f863d06f71e1a5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "4d1b2a602aa63e2d641e31567150dab25a5e04f3", "commitAfterChange": "7935d7046a5948ba0caaa49b731ab944081ed079", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " public boolean isCompatibleWith(TypeBinding otherType, Scope captureScope)", "signatureAfterChange": " public boolean isCompatibleWith(TypeBinding otherType, Scope captureScope)", "diff": ["-\totherType = otherType.unannotated(); // for now consider un-annotated type as compatible to type with any type annotations", "-\tif ((this.tagBits & TagBits.HasNullTypeAnnotation) != 0)", "-\t\treturn unannotated().isCompatibleWith(otherType, captureScope);", "+\t// disregard any type annotations on this and otherType", "+\t// recursive call needed when this is annotated, unless the annotation was introduced on a declaration", "+\totherType = otherType.unannotated();", "+\tTypeBinding unannotated = unannotated();", "+\tif (unannotated != this)", "+\t\treturn unannotated.isCompatibleWith(otherType, captureScope);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b397ca240ff89ca9aa72cd3536196ffa", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/RawTypeBinding.java", "commitBeforeChange": "4d1b2a602aa63e2d641e31567150dab25a5e04f3", "commitAfterChange": "7935d7046a5948ba0caaa49b731ab944081ed079", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public boolean isEquivalentTo(TypeBinding otherType)", "signatureAfterChange": "      public boolean isEquivalentTo(TypeBinding otherType)", "diff": ["-\t\totherType = otherType.unannotated(); // for now consider un-annotated type as equivalent to type with any type annotations", "-\t\tif ((this.tagBits & TagBits.HasNullTypeAnnotation) != 0)", "-\t\t\treturn unannotated().isEquivalentTo(otherType);", "+    \t// disregard any type annotations on this and otherType", "+    \t// recursive call needed when this is annotated, unless the annotation was introduced on a declaration", "+    \totherType = otherType.unannotated();", "+    \tTypeBinding unannotated = unannotated();", "+    \tif (unannotated != this)", "+    \t\treturn unannotated.isEquivalentTo(otherType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fff70d1f81d61347f5d9997cd7361075", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java", "commitBeforeChange": "4d1b2a602aa63e2d641e31567150dab25a5e04f3", "commitAfterChange": "7935d7046a5948ba0caaa49b731ab944081ed079", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public boolean isCompatibleWith(TypeBinding otherType, Scope captureScope)", "signatureAfterChange": " public boolean isCompatibleWith(TypeBinding otherType, Scope captureScope)", "diff": ["-\totherType = otherType.unannotated(); // for now consider un-annotated type as compatible to type with any type annotations", "-\tif ((this.tagBits & TagBits.HasNullTypeAnnotation) != 0)", "-\t\treturn unannotated().isCompatibleWith(otherType, captureScope);", "+\t// disregard any type annotations on this and otherType", "+\t// recursive call needed when this is annotated, unless the annotation was introduced on a declaration", "+\totherType = otherType.unannotated();", "+\tTypeBinding unannotated = unannotated();", "+\tif (unannotated != this)", "+\t\treturn unannotated.isCompatibleWith(otherType, captureScope);"]}], "num": 13453}
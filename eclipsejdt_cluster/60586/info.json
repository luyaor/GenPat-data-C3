{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "919c063e06bb87f8e05c62640fcc4dc3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3618574a85242bab9590d0f52af5d912", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementsImpl.java", "commitBeforeChange": "c7e13eb999aeeb70fd34b19df0f27a778109206c", "commitAfterChange": "ad2281f1520933e65d479408c685e1055d82a8b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t@Override \tpublic List<? extends AnnotationMirror> getAllAnnotationMirrors(Element e)", "signatureAfterChange": " \t@Override \tpublic List<? extends AnnotationMirror> getAllAnnotationMirrors(Element e)", "diff": ["-\t\t// TODO Auto-generated method stub", "-\t\treturn null;", "+\t\t// if e is a class, walk up its superclass hierarchy looking for @Inherited annotations not already in the list", "+\t\tif (e.getKind() == ElementKind.CLASS && e instanceof TypeElementImpl) {", "+\t\t\tList<AnnotationBinding> annotations = new ArrayList<AnnotationBinding>();", "+\t\t\t// A class can only have one annotation of a particular annotation type.", "+\t\t\tSet<ReferenceBinding> annotationTypes = new HashSet<ReferenceBinding>();", "+\t\t\tReferenceBinding binding = (ReferenceBinding)((TypeElementImpl)e)._binding;", "+\t\t\twhile (null != binding) {", "+\t\t\t\tfor (AnnotationBinding annotation : binding.getAnnotations()) {", "+\t\t\t\t\tReferenceBinding annotationType = annotation.getAnnotationType(); ", "+\t\t\t\t\tif (!annotationTypes.contains(annotationType)) {", "+\t\t\t\t\t\tannotationTypes.add(annotationType);", "+\t\t\t\t\t\tannotations.add(annotation);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbinding = binding.superclass();", "+\t\t\t}", "+\t\t\tList<AnnotationMirror> list = new ArrayList<AnnotationMirror>(annotations.size());", "+\t\t\tfor (AnnotationBinding annotation : annotations) {", "+\t\t\t\tlist.add(AnnotationMirrorImpl.getAnnotationMirror(annotation));", "+\t\t\t}", "+\t\t\treturn Collections.unmodifiableList(list);", "+\t\t}", "+\t\telse {", "+\t\t\treturn e.getAnnotationMirrors();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a47eef91418ad681606b39a1cfaf6dbb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ErrorTypeImpl.java", "commitBeforeChange": "a209bfa947ecc1f9f7050d0d851a03f725813152", "commitAfterChange": "730caa252c0447802cd9dbe163cdf0f853f36524", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@Override \tpublic List<? extends TypeMirror> getTypeArguments()", "signatureAfterChange": "  \t@Override \tpublic List<? extends TypeMirror> getTypeArguments()", "diff": ["-\t */", "+\t\tReferenceBinding binding = (ReferenceBinding)_binding;", "+\t\tif (binding.isParameterizedType()) {", "+\t\t\tParameterizedTypeBinding ptb = (ParameterizedTypeBinding)_binding;", "+\t\t\tTypeBinding[] arguments = ptb.arguments;", "+\t\t\tint length = arguments == null ? 0 : arguments.length;", "+\t\t\tif (length == 0) return Collections.emptyList();", "+\t\t\tList<TypeMirror> args = new ArrayList<TypeMirror>(length);", "+\t\t\tfor (TypeBinding arg : arguments) {", "+\t\t\t\targs.add(_env.getFactory().newTypeMirror(arg));", "+\t\t\t}", "+\t\t\treturn Collections.unmodifiableList(args);", "+\t\t}", "+\t\tif (binding.isGenericType()) {", "+\t\t\tTypeVariableBinding[] typeVariables = binding.typeVariables();", "+\t\t\tList<TypeMirror> args = new ArrayList<TypeMirror>(typeVariables.length);", "+\t\t\tfor (TypeBinding arg : typeVariables) {", "+\t\t\t\targs.add(_env.getFactory().newTypeMirror(arg));", "+\t\t\t}", "+\t\t\treturn Collections.unmodifiableList(args);", "+\t\t}"]}], "num": 60586}
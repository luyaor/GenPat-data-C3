{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d741c6f53b4276e9b377338b47d727eb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51b8ed0e3a289bdfb147d2df65f570c7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AmbiguousMethodTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic void test006()", "signatureAfterChange": " \tpublic void test006()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return;", "-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "-\t\t\t\"\tnew Y<Object>().foo(\\\"X\\\");\\n\" +", "-\t\t\t\"\t                ^^^\\n\" +", "-\t\t\t\"The method foo(Object) is ambiguous for the type Y<Object>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\"\tnew Y<Object>().foo2(\\\"X\\\");\\n\" +", "-\t\t\t\"\t                ^^^^\\n\" +", "-\t\t\t\"The method foo2(Object) is ambiguous for the type Y<Object>\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tnew Y<Object>().foo(\\\"X\\\");\\n\" + ", "+\t\t\t\"\t                ^^^\\n\" + ", "+\t\t\t\"The method foo(Object) is ambiguous for the type Y<Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tnew Y<Object>().foo2(\\\"X\\\");\\n\" + ", "+\t\t\t\"\t                ^^^^\\n\" + ", "+\t\t\t\"The method foo2(Object) is ambiguous for the type Y<Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 10)\\n\" + ", "+\t\t\t\"\tvoid foo(T2 t) {}\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(T2) of type Y<T2> has the same erasure as foo(U1) of type X<T> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 11)\\n\" + ", "+\t\t\t\"\t<U3> void foo2(T2 t) {}\\n\" + ", "+\t\t\t\"\t          ^^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo2(T2) of type Y<T2> has the same erasure as foo2(U2) of type X<T> but does not override it\\n\" + ", "+/* javac 7", "+X.java:3: reference to foo is ambiguous, both method <U1>foo(U1) in X and method", "+ foo(T2) in Y match", "+        new Y<Object>().foo(\"X\");", "+                       ^", "+  where U1,T2 are type-variables:", "+    U1 extends Object declared in method <U1>foo(U1)", "+    T2 extends Object declared in class Y", "+X.java:4: reference to foo2 is ambiguous, both method <U2>foo2(U2) in X and meth", "+od <U3>foo2(T2) in Y match", "+        new Y<Object>().foo2(\"X\");", "+                       ^", "+  where U2,U3,T2 are type-variables:", "+    U2 extends Object declared in method <U2>foo2(U2)", "+    U3 extends Object declared in method <U3>foo2(T2)", "+    T2 extends Object declared in class Y", "+X.java:10: name clash: foo(T2) in Y and <U1>foo(U1) in X have the same erasure,", "+yet neither overrides the other", "+        void foo(T2 t) {}", "+             ^", "+  where T2,U1 are type-variables:", "+    T2 extends Object declared in class Y", "+    U1 extends Object declared in method <U1>foo(U1)", "+X.java:11: name clash: <U3>foo2(T2) in Y and <U2>foo2(U2) in X have the same era", "+sure, yet neither overrides the other", "+        <U3> void foo2(T2 t) {}", "+                  ^", "+  where U3,T2,U2 are type-variables:", "+    U3 extends Object declared in method <U3>foo2(T2)", "+    T2 extends Object declared in class Y", "+    U2 extends Object declared in method <U2>foo2(U2)", "+4 errors", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbeb1f1fa86cc75ee790574c47cef07a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 189, "methodNumberAfterChange": 189, "signatureBeforeChange": " \tpublic void test058b()", "signatureAfterChange": " \tpublic void test058b()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\t\t\t\"   void test() {\\n\" +", "-\t\t\t\t\"   \tnew X<Object>().foo(\\\"X\\\");\\n\" +", "-\t\t\t\t\"   \tnew X<Object>().foo2(\\\"X\\\");\\n\" +", "-\t\t\t\t\"   }\\n\" +", "+\t\t\t\t\"\tvoid test() {\\n\" +", "+\t\t\t\t\"\t\tnew X<Object>().foo(\\\"X\\\");\\n\" +", "+\t\t\t\t\"\t\tnew X<Object>().foo2(\\\"X\\\");\\n\" +", "+\t\t\t\t\"\t}\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 3)\\r\\n\" +", "-\t\t\t\"\tnew X<Object>().foo(\\\"X\\\");\\r\\n\" +", "-\t\t\t\"\t                ^^^\\n\" +", "-\t\t\t\"The method foo(String) is ambiguous for the type X<Object>\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 4)\\r\\n\" +", "-\t\t\t\"\tnew X<Object>().foo2(\\\"X\\\");\\r\\n\" +", "-\t\t\t\"\t                ^^^^\\n\" +", "-\t\t\t\"The method foo2(String) is ambiguous for the type X<Object>\\n\" +", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tnew X<Object>().foo(\\\"X\\\");\\n\" + ", "+\t\t\t\"\t                ^^^\\n\" + ", "+\t\t\t\"The method foo(String) is ambiguous for the type X<Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tnew X<Object>().foo2(\\\"X\\\");\\n\" + ", "+\t\t\t\"\t                ^^^^\\n\" + ", "+\t\t\t\"The method foo2(String) is ambiguous for the type X<Object>\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 6)\\n\" + ", "+\t\t\t\"\t<T> T foo(T t) {return null;}\\n\" + ", "+\t\t\t\"\t      ^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo(T) of type X<A> has the same erasure as foo(A) of type Y<A> but does not override it\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\t<T> T foo2(T t) {return null;}\\n\" + ", "+\t\t\t\"\t      ^^^^^^^^^\\n\" + ", "+\t\t\t\"Name clash: The method foo2(T) of type X<A> has the same erasure as foo2(A) of type Y<A> but does not override it\\n\" + ", "-\t\t\t// both references are ambiguous", "+/* javac 7", "+X.java:3: reference to foo is ambiguous, both method foo(A) in Y and method <T>foo(T) in X match", "+                new X<Object>().foo(\"X\");", "+                               ^", "+  where A,T are type-variables:", "+    A extends Object declared in class Y", "+    T extends Object declared in method <T>foo(T)", "+X.java:4: reference to foo2 is ambiguous, both method <T#1>foo2(A) in Y and method <T#3>foo2(T#3) in X match", "+                new X<Object>().foo2(\"X\");", "+                               ^", "+  where T#1,A,T#3 are type-variables:", "+    T#1 extends Object declared in method <T#1>foo2(A)", "+    A extends Object declared in class Y", "+    T#3 extends Object declared in method <T#3>foo2(T#3)", "+X.java:6: name clash: <T>foo(T) in X and foo(A) in Y have the same erasure, yet neither overrides the other", "+        <T> T foo(T t) {return null;}", "+              ^", "+  where T,A are type-variables:", "+    T extends Object declared in method <T>foo(T)", "+    A extends Object declared in class Y", "+X.java:7: name clash: <T#1>foo2(T#1) in X and <T#2>foo2(A) in Y have the same erasure, yet neither overrides the other", "+        <T> T foo2(T t) {return null;}", "+              ^", "+  where T#1,T#2,A are type-variables:", "+    T#1 extends Object declared in method <T#1>foo2(T#1)", "+    T#2 extends Object declared in method <T#2>foo2(A)", "+    A extends Object declared in class Y", "+4 errors", "+ */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8c5604c35a576882ee0a9ce0e1abca7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/MethodVerifyTest.java", "commitBeforeChange": "778e64a3c8e6903c625067607c9068d73d8cd5e5", "commitAfterChange": "e12812c02c749e710a55fe1f28fa9764f0ac6bd5", "methodNumberBeforeChange": 162, "methodNumberAfterChange": 162, "signatureBeforeChange": " \tpublic void test050c()", "signatureAfterChange": " \tpublic void test050c()", "diff": ["-\t\tif (new CompilerOptions(getCompilerOptions()).complianceLevel >= ClassFileConstants.JDK1_7) return; // see test187()", "-\t\t\t\t\"class A<T> {}\" +", "-\t\t\t\t\"class Y {}\" +", "+\t\t\t\t\"class A<T> {}\\n\" +", "+\t\t\t\t\"class Y {}\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"1. ERROR in X.java (at line 3)\\n\" +", "-\t\t\t\"\tA<Y> foo(A<Y> o) {  return null; } // duplicate\\n\" +", "-\t\t\t\"\t     ^^^^^^^^^^^\\n\" +", "-\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" +", "-\t\t\t\"----------\\n\" +", "-\t\t\t\"2. ERROR in X.java (at line 4)\\n\" +", "-\t\t\t\"\tA<Z> foo(A<Z> o) {  return null; } // duplicate\\n\" +", "-\t\t\t\"\t     ^^^^^^^^^^^\\n\" +", "-\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" +", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"1. ERROR in X.java (at line 3)\\n\" + ", "+\t\t\t\"\tA<Y> foo(A<Y> o) {  return null; } // duplicate\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"2. ERROR in X.java (at line 4)\\n\" + ", "+\t\t\t\"\tA<Z> foo(A<Z> o) {  return null; } // duplicate\\n\" + ", "+\t\t\t\"\t     ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C5\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"3. ERROR in X.java (at line 7)\\n\" + ", "+\t\t\t\"\t<T extends Y> T foo(A<Y> o) {  return null; } // ok\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method foo(A<Y>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "+\t\t\t\"----------\\n\" + ", "+\t\t\t\"4. ERROR in X.java (at line 8)\\n\" + ", "+\t\t\t\"\t<T extends Z> T foo(A<Z> o) {  return null; } // ok\\n\" + ", "+\t\t\t\"\t                ^^^^^^^^^^^\\n\" + ", "+\t\t\t\"Method foo(A<Z>) has the same erasure foo(A<T>) as another method in type X.C6\\n\" + ", "-\t\t\t// name clash: foo(A<Y>) and foo(A<Z>) have the same erasure", "+/* javac 7", "+X.java:4: name clash: foo(A<Z>) and foo(A<Y>) have the same erasure", "+                A<Z> foo(A<Z> o) {  return null; } // duplicate", "+                     ^", "+X.java:8: name clash: <T#1>foo(A<Z>) and <T#2>foo(A<Y>) have the same erasure", "+                <T extends Z> T foo(A<Z> o) {  return null; } // ok", "+                                ^", "+  where T#1,T#2 are type-variables:", "+    T#1 extends Z declared in method <T#1>foo(A<Z>)", "+    T#2 extends Y declared in method <T#2>foo(A<Y>)", "+2 errors", "+ */"]}], "num": 24779}
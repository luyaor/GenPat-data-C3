{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed540cef76bc396264b6eaca464cb617", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0848044750b9ffc4cdd898500f5a501b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "aa23b2a14c48eb2e68c0b76ca03ad3cd13f67188", "commitAfterChange": "97ecea4988b025b105080d33f2f05e43659a9d0a", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 122, "signatureBeforeChange": " \t \tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env, boolean tieBreakingVarargsMethods)", "signatureAfterChange": " \t \tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env, boolean tieBreakingVarargsMethods, boolean tolerateInferenceVariables)", "diff": ["-\tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env, boolean tieBreakingVarargsMethods) {", "+\tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env, boolean tieBreakingVarargsMethods, boolean tolerateInferenceVariables) {", "+\t\tif (tolerateInferenceVariables && (!arg.isProperType(false) || !param.isProperType(false))) {", "+\t\t\t// during type inference involving a ReferenceExpression ignore incompatibility due to an inference variable,", "+\t\t\t// knowing that we will produce constraints that will ensure compatible instantiation (if one exists).", "+\t\t\treturn COMPATIBLE; ", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3a3ccc6691eea658a6056964976c07e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "3256aef43e2296affdbf86e21f8cafdaa866161a", "commitAfterChange": "f357f309273e0bfe8345ff708d18fa83c6a34931", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 120, "signatureBeforeChange": " \t \tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env, boolean tieBreakingVarargsMethods, boolean tolerateInferenceVariables)", "signatureAfterChange": " \t \tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env, boolean tieBreakingVarargsMethods)", "diff": ["-\tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env, boolean tieBreakingVarargsMethods, boolean tolerateInferenceVariables) {", "+\tprivate int parameterCompatibilityLevel(TypeBinding arg, TypeBinding param, LookupEnvironment env, boolean tieBreakingVarargsMethods) {", "-\t\t}", "-\t\tif (tolerateInferenceVariables && (!arg.isProperType(false) || !param.isProperType(false))) {", "-\t\t\t// during type inference involving a ReferenceExpression ignore incompatibility due to an inference variable,", "-\t\t\t// knowing that we will produce constraints that will ensure compatible instantiation (if one exists).", "-\t\t\treturn COMPATIBLE; "]}], "num": 59602}
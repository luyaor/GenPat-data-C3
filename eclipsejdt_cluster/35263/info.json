{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8db66d10423d88aa35a1e5d72d050bac", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bf62426e93a6a7014056b44b8f906f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "9368dfab888628abdb27958780babc23aa1b9098", "commitAfterChange": "3498152ea60ec90367acc40f717cd0a0944319b3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public void completeTypeBindings()", "signatureAfterChange": "  public void completeTypeBindings()", "diff": ["-\tfor (int i = lastCompletedUnitIndex + 1; i <= lastUnitIndex; i++) {", "-\t\tunits[i].scope.checkAndSetImports();", "+\tfor (int i = this.lastCompletedUnitIndex + 1; i <= this.lastUnitIndex; i++) {", "+\t    (this.unitBeingCompleted = this.units[i]).scope.checkAndSetImports();", "-\tfor (int i = lastCompletedUnitIndex + 1; i <= lastUnitIndex; i++) {", "-\t\tunits[i].scope.connectTypeHierarchy();", "+\tfor (int i = this.lastCompletedUnitIndex + 1; i <= this.lastUnitIndex; i++) {", "+\t    (this.unitBeingCompleted = this.units[i]).scope.connectTypeHierarchy();", "-\tfor (int i = lastCompletedUnitIndex + 1; i <= lastUnitIndex; i++) {", "-\t\tunits[i].scope.buildFieldsAndMethods();", "-\t\tunits[i] = null; // release unnecessary reference to the parsed unit", "+\tfor (int i = this.lastCompletedUnitIndex + 1; i <= this.lastUnitIndex; i++) {", "+\t\t(this.unitBeingCompleted = this.units[i]).scope.buildFieldsAndMethods();", "+\t\tthis.units[i] = null; // release unnecessary reference to the parsed unit", "-\tlastCompletedUnitIndex = lastUnitIndex;", "+\tthis.lastCompletedUnitIndex = this.lastUnitIndex;", "+\tthis.unitBeingCompleted = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69373b073c5a0e9b3ea000d4a7c4b951", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/NamingConventions.java", "commitBeforeChange": "302df05b099c1ea06faca0b00f806513c7db6904", "commitAfterChange": "c661afbb38268ca6f18a772df813f6c69bb9e17c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t\tpublic void acceptNameWithPrefixAndSuffix(char[] name, boolean isFirstPrefix, boolean isFirstSuffix)", "signatureAfterChange": " \t\tpublic void acceptNameWithPrefixAndSuffix(char[] name, boolean isFirstPrefix, boolean isFirstSuffix)", "diff": ["-\t\t\t\tint length = firstPrefixAndFirstSuffixResults.length;", "-\t\t\t\tif(length == firstPrefixAndFirstSuffixResultsCount) {", "+\t\t\t\tint length = this.firstPrefixAndFirstSuffixResults.length;", "+\t\t\t\tif(length == this.firstPrefixAndFirstSuffixResultsCount) {", "-\t\t\t\t\t\tfirstPrefixAndFirstSuffixResults,", "+\t\t\t\t\t\tthis.firstPrefixAndFirstSuffixResults,", "-\t\t\t\t\t\tfirstPrefixAndFirstSuffixResults = new char[length * 2][],", "+\t\t\t\t\t\tthis.firstPrefixAndFirstSuffixResults = new char[length * 2][],", "-\t\t\t\tfirstPrefixAndFirstSuffixResults[firstPrefixAndFirstSuffixResultsCount++] = name;\t\t\t", "+\t\t\t\tthis.firstPrefixAndFirstSuffixResults[this.firstPrefixAndFirstSuffixResultsCount++] = name;\t\t\t", "-\t\t\t\tint length = firstPrefixAndSuffixResults.length;", "-\t\t\t\tif(length == firstPrefixAndSuffixResultsCount) {", "+\t\t\t\tint length = this.firstPrefixAndSuffixResults.length;", "+\t\t\t\tif(length == this.firstPrefixAndSuffixResultsCount) {", "-\t\t\t\t\t\tfirstPrefixAndSuffixResults,", "+\t\t\t\t\t\tthis.firstPrefixAndSuffixResults,", "-\t\t\t\t\t\tfirstPrefixAndSuffixResults = new char[length * 2][],", "+\t\t\t\t\t\tthis.firstPrefixAndSuffixResults = new char[length * 2][],", "-\t\t\t\tfirstPrefixAndSuffixResults[firstPrefixAndSuffixResultsCount++] = name;", "+\t\t\t\tthis.firstPrefixAndSuffixResults[this.firstPrefixAndSuffixResultsCount++] = name;", "-\t\t\t\tint length = prefixAndFirstSuffixResults.length;", "-\t\t\t\tif(length == prefixAndFirstSuffixResultsCount) {", "+\t\t\t\tint length = this.prefixAndFirstSuffixResults.length;", "+\t\t\t\tif(length == this.prefixAndFirstSuffixResultsCount) {", "-\t\t\t\t\t\tprefixAndFirstSuffixResults,", "+\t\t\t\t\t\tthis.prefixAndFirstSuffixResults,", "-\t\t\t\t\t\tprefixAndFirstSuffixResults = new char[length * 2][],", "+\t\t\t\t\t\tthis.prefixAndFirstSuffixResults = new char[length * 2][],", "-\t\t\t\tprefixAndFirstSuffixResults[prefixAndFirstSuffixResultsCount++] = name;", "+\t\t\t\tthis.prefixAndFirstSuffixResults[this.prefixAndFirstSuffixResultsCount++] = name;", "-\t\t\t\tint length = prefixAndSuffixResults.length;", "-\t\t\t\tif(length == prefixAndSuffixResultsCount) {", "+\t\t\t\tint length = this.prefixAndSuffixResults.length;", "+\t\t\t\tif(length == this.prefixAndSuffixResultsCount) {", "-\t\t\t\t\t\tprefixAndSuffixResults,", "+\t\t\t\t\t\tthis.prefixAndSuffixResults,", "-\t\t\t\t\t\tprefixAndSuffixResults = new char[length * 2][],", "+\t\t\t\t\t\tthis.prefixAndSuffixResults = new char[length * 2][],", "-\t\t\t\tprefixAndSuffixResults[prefixAndSuffixResultsCount++] = name;", "+\t\t\t\tthis.prefixAndSuffixResults[this.prefixAndSuffixResultsCount++] = name;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4fbf57eb21fc31999d1353cc94bd978", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java", "commitBeforeChange": "931e434bb3e4b9f62577b10f8123cfc028893969", "commitAfterChange": "c0b519c3b149b13ea0f307f0d3414359b2cf0639", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t}", "-\tpublic TypeBinding resolveType(BlockScope scope) {", "-\t\t// field and/or local are done before type lookups", "-\t\t// the only available value for the restrictiveFlag BEFORE", "-\t\t// the TC is Flag_Type Flag_LocalField and Flag_TypeLocalField ", "-\t\tthis.actualReceiverType = scope.enclosingReceiverType();", "-\t\tconstant = Constant.NotAConstant;", "-\t\tif ((this.codegenBinding = this.binding = scope.getBinding(tokens, bits & RestrictiveFlagMASK, this, true /*resolve*/)).isValidBinding()) {", "-\t\t\tswitch (bits & RestrictiveFlagMASK) {", "-\t\t\t\tcase Binding.VARIABLE : //============only variable===========", "-\t\t\t\tcase Binding.TYPE | Binding.VARIABLE :", "-\t\t\t\t\tif (binding instanceof LocalVariableBinding) {", "-\t\t\t\t\t\tif (!((LocalVariableBinding) binding).isFinal() && ((bits & DepthMASK) != 0))", "-\t\t\t\t\t\t\tscope.problemReporter().cannotReferToNonFinalOuterLocal(", "-\t\t\t\t\t\t\t\t(LocalVariableBinding) binding,", "-\t\t\t\t\t\t\t\tthis);", "-\t\t\t\t\t\tbits &= ~RestrictiveFlagMASK; // clear bits", "-\t\t\t\t\t\tbits |= Binding.LOCAL;", "-\t\t\t\t\t\treturn this.resolvedType = getOtherFieldBindings(scope);", "+", "+public TypeBinding resolveType(BlockScope scope) {", "+\t// field and/or local are done before type lookups", "+\t// the only available value for the restrictiveFlag BEFORE", "+\t// the TC is Flag_Type Flag_LocalField and Flag_TypeLocalField ", "+\tthis.actualReceiverType = scope.enclosingReceiverType();", "+\tthis.constant = Constant.NotAConstant;", "+\tif ((this.codegenBinding = this.binding = scope.getBinding(this.tokens, this.bits & ASTNode.RestrictiveFlagMASK, this, true /*resolve*/)).isValidBinding()) {", "+\t\tswitch (this.bits & ASTNode.RestrictiveFlagMASK) {", "+\t\t\tcase Binding.VARIABLE : //============only variable===========", "+\t\t\tcase Binding.TYPE | Binding.VARIABLE :", "+\t\t\t\tif (this.binding instanceof LocalVariableBinding) {", "+\t\t\t\t\tif (!((LocalVariableBinding) this.binding).isFinal() && ((this.bits & ASTNode.DepthMASK) != 0))", "+\t\t\t\t\t\tscope.problemReporter().cannotReferToNonFinalOuterLocal(", "+\t\t\t\t\t\t\t(LocalVariableBinding) this.binding,", "+\t\t\t\t\t\t\tthis);", "+\t\t\t\t\tthis.bits &= ~ASTNode.RestrictiveFlagMASK; // clear bits", "+\t\t\t\t\tthis.bits |= Binding.LOCAL;", "+\t\t\t\t\treturn this.resolvedType = getOtherFieldBindings(scope);", "+\t\t\t\t}", "+\t\t\t\tif (this.binding instanceof FieldBinding) {", "+\t\t\t\t\tFieldBinding fieldBinding = (FieldBinding) this.binding;", "+\t\t\t\t\tMethodScope methodScope = scope.methodScope();", "+\t\t\t\t\t// check for forward references", "+\t\t\t\t\tif (this.indexOfFirstFieldBinding == 1", "+\t\t\t\t\t\t\t&& methodScope.enclosingSourceType() == fieldBinding.original().declaringClass", "+\t\t\t\t\t\t\t&& methodScope.lastVisibleFieldID >= 0", "+\t\t\t\t\t\t\t&& fieldBinding.id >= methodScope.lastVisibleFieldID", "+\t\t\t\t\t\t\t&& (!fieldBinding.isStatic() || methodScope.isStatic)) {", "+\t\t\t\t\t\tscope.problemReporter().forwardReference(this, 0, methodScope.enclosingSourceType());", "-\t\t\t\t\tif (binding instanceof FieldBinding) {", "-\t\t\t\t\t\tFieldBinding fieldBinding = (FieldBinding) binding;", "-\t\t\t\t\t\tMethodScope methodScope = scope.methodScope();", "-\t\t\t\t\t\t// check for forward references", "-\t\t\t\t\t\tif (this.indexOfFirstFieldBinding == 1", "-\t\t\t\t\t\t\t\t&& methodScope.enclosingSourceType() == fieldBinding.original().declaringClass", "-\t\t\t\t\t\t\t\t&& methodScope.lastVisibleFieldID >= 0", "-\t\t\t\t\t\t\t\t&& fieldBinding.id >= methodScope.lastVisibleFieldID", "-\t\t\t\t\t\t\t\t&& (!fieldBinding.isStatic() || methodScope.isStatic)) {", "-\t\t\t\t\t\t\tscope.problemReporter().forwardReference(this, 0, methodScope.enclosingSourceType());", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!fieldBinding.isStatic() ", "-\t\t\t\t\t\t\t\t&& this.indexOfFirstFieldBinding == 1", "-\t\t\t\t\t\t\t\t&& scope.compilerOptions().getSeverity(CompilerOptions.UnqualifiedFieldAccess) != ProblemSeverities.Ignore) {", "-\t\t\t\t\t\t\tscope.problemReporter().unqualifiedFieldAccess(this, fieldBinding);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbits &= ~RestrictiveFlagMASK; // clear bits", "-\t\t\t\t\t\tbits |= Binding.FIELD;", "-\t\t\t\t\t\t", "+\t\t\t\t\tif (!fieldBinding.isStatic() ", "+\t\t\t\t\t\t\t&& this.indexOfFirstFieldBinding == 1", "+\t\t\t\t\t\t\t&& scope.compilerOptions().getSeverity(CompilerOptions.UnqualifiedFieldAccess) != ProblemSeverities.Ignore) {", "+\t\t\t\t\t\tscope.problemReporter().unqualifiedFieldAccess(this, fieldBinding);", "+\t\t\t\t\t}", "+\t\t\t\t\tthis.bits &= ~ASTNode.RestrictiveFlagMASK; // clear bits", "+\t\t\t\t\tthis.bits |= Binding.FIELD;", "+\t\t\t\t\t", "-\t\t\t\t\t\t", "-\t\t\t\t\t\treturn this.resolvedType = getOtherFieldBindings(scope);", "-\t\t\t\t\t}", "-\t\t\t\t\t// thus it was a type", "-\t\t\t\t\tbits &= ~RestrictiveFlagMASK; // clear bits", "-\t\t\t\t\tbits |= Binding.TYPE;", "-\t\t\t\tcase Binding.TYPE : //=============only type ==============", "-\t\t\t\t    TypeBinding type = (TypeBinding) binding;", "+\t\t\t\t\t", "+\t\t\t\t\treturn this.resolvedType = getOtherFieldBindings(scope);", "+\t\t\t\t}", "+\t\t\t\t// thus it was a type", "+\t\t\t\tthis.bits &= ~ASTNode.RestrictiveFlagMASK; // clear bits", "+\t\t\t\tthis.bits |= Binding.TYPE;", "+\t\t\tcase Binding.TYPE : //=============only type ==============", "+\t\t\t    TypeBinding type = (TypeBinding) this.binding;", "-\t\t\t\t\ttype = scope.environment().convertToRawType(type);", "-\t\t\t\t\treturn this.resolvedType = type;", "-\t\t\t}", "+\t\t\t\ttype = scope.environment().convertToRawType(type);", "+\t\t\t\treturn this.resolvedType = type;", "-\t\t//========error cases===============", "-\t\treturn this.resolvedType = this.reportError(scope);", "+\t//========error cases===============", "+\treturn this.resolvedType = this.reportError(scope);", "+}"]}], "num": 35263}
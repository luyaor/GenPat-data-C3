{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4327f2c368e178e2a5650b17b1663da0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3166123ca9e993effed3d07fe0e92708", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "8a64589617f7b80b7f12bb3f773ab58c605663c7", "commitAfterChange": "6585c7471e2cc73387fb0d652a600f2678de9051", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 31, "signatureBeforeChange": "  \tpublic void printModifiers()", "signatureAfterChange": "  \tpublic void printModifiers()", "diff": ["-", "-\tpublic void printModifiers() {", "-\t\t", "-\t\ttry {", "-\t\t\tboolean firstComment = true;", "-\t\t\tboolean isFirstModifier = true;", "-\t\t\tint currentTokenStartPosition = this.scanner.currentPosition;", "-\t\t\twhile ((this.currentToken = this.scanner.getNextToken()) != ITerminalSymbols.TokenNameEOF) {", "-\t\t\t\tswitch(this.currentToken) {", "-\t\t\t\t\tcase ITerminalSymbols.TokenNamepublic :", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameprotected :", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameprivate :", "-\t\t\t\t\tcase ITerminalSymbols.TokenNamestatic :", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameabstract :", "-\t\t\t\t\tcase ITerminalSymbols.TokenNamefinal :", "-\t\t\t\t\tcase ITerminalSymbols.TokenNamenative :", "-\t\t\t\t\tcase ITerminalSymbols.TokenNamesynchronized :", "-\t\t\t\t\tcase ITerminalSymbols.TokenNametransient :", "-\t\t\t\t\tcase ITerminalSymbols.TokenNamevolatile :", "-\t\t\t\t\t\tfirstComment = false;", "-\t\t\t\t\t\tthis.print(this.scanner.getRawTokenSource(), this.scanner.getCurrentTokenStartPosition(), !isFirstModifier);", "-\t\t\t\t\t\tisFirstModifier = false;", "-\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.getCurrentTokenStartPosition();", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_BLOCK :", "-\t\t\t\t\t\tthis.printBlockComment(this.scanner.getRawTokenSource(), this.scanner.getCurrentTokenStartPosition(), false);", "-\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\t\tif (firstComment) {", "-\t\t\t\t\t\t\tthis.printNewLine();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tfirstComment = false;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_JAVADOC :", "-\t\t\t\t\t\tthis.printBlockComment(this.scanner.getRawTokenSource(), this.scanner.getCurrentTokenStartPosition(), true);", "-\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\t\tif (firstComment) {", "-\t\t\t\t\t\t\tthis.printNewLine();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tfirstComment = false;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameCOMMENT_LINE :", "-\t\t\t\t\t\tthis.printCommentLine(this.scanner.getRawTokenSource(), this.scanner.getCurrentTokenStartPosition());", "-\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase ITerminalSymbols.TokenNameWHITESPACE :", "-\t\t\t\t\t\t// TODO add a remove edit", "-\t\t\t\t\t    currentTokenStartPosition = this.scanner.currentPosition;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\t// step back one token", "-\t\t\t\t\t\tfirstComment = false;", "-\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "-\t\t\t\t\t\treturn;\t\t\t\t\t", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (InvalidInputException e) {", "-\t\t\tthrow new AbortFormatting(e);", "-\t\t}", "-\t}", "+", "+\tpublic void printModifiers() {", "+\t\t", "+\t\ttry {", "+\t\t\tboolean isFirstModifier = true;", "+\t\t\tint currentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\tboolean hasComment = false;", "+\t\t\twhile ((this.currentToken = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\tswitch(this.currentToken) {", "+\t\t\t\t\tcase TerminalTokens.TokenNamepublic :", "+\t\t\t\t\tcase TerminalTokens.TokenNameprotected :", "+\t\t\t\t\tcase TerminalTokens.TokenNameprivate :", "+\t\t\t\t\tcase TerminalTokens.TokenNamestatic :", "+\t\t\t\t\tcase TerminalTokens.TokenNameabstract :", "+\t\t\t\t\tcase TerminalTokens.TokenNamefinal :", "+\t\t\t\t\tcase TerminalTokens.TokenNamenative :", "+\t\t\t\t\tcase TerminalTokens.TokenNamesynchronized :", "+\t\t\t\t\tcase TerminalTokens.TokenNametransient :", "+\t\t\t\t\tcase TerminalTokens.TokenNamevolatile :", "+\t\t\t\t\t\tthis.print(this.scanner.getRawTokenSource(), !isFirstModifier);", "+\t\t\t\t\t\tisFirstModifier = false;", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.getCurrentTokenStartPosition();", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_BLOCK :", "+\t\t\t\t\t\tthis.printBlockComment(this.scanner.getRawTokenSource(), false);", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\thasComment = true;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_JAVADOC :", "+\t\t\t\t\t\tthis.printBlockComment(this.scanner.getRawTokenSource(), true);", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\thasComment = true;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameCOMMENT_LINE :", "+\t\t\t\t\t\tthis.printCommentLine(this.scanner.getRawTokenSource());", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase TerminalTokens.TokenNameWHITESPACE :", "+\t\t\t\t\t\taddDeleteEdit(this.scanner.getCurrentTokenStartPosition(), this.scanner.getCurrentTokenEndPosition());", "+\t\t\t\t\t\tint count = 0;", "+\t\t\t\t\t\tchar[] whiteSpaces = this.scanner.getCurrentTokenSource();", "+\t\t\t\t\t\tfor (int i = 0, max = whiteSpaces.length; i < max; i++) {", "+\t\t\t\t\t\t\tswitch(whiteSpaces[i]) {", "+\t\t\t\t\t\t\t\tcase '\\r' :", "+\t\t\t\t\t\t\t\t\tif ((i + 1) < max) {", "+\t\t\t\t\t\t\t\t\t\tif (whiteSpaces[i + 1] == '\\n') {", "+\t\t\t\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tcount++; ", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tcase '\\n' :", "+\t\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (count >= 1 && hasComment) {", "+\t\t\t\t\t\t\tprintNewLine();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcurrentTokenStartPosition = this.scanner.currentPosition;", "+\t\t\t\t\t\thasComment = false;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\t// step back one token", "+\t\t\t\t\t\tthis.scanner.resetTo(currentTokenStartPosition, this.scannerEndPosition - 1);", "+\t\t\t\t\t\treturn;\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (InvalidInputException e) {", "+\t\t\tthrow new AbortFormatting(e);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d95b0a4fcd76c8736eddfd5ac10fcb12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java", "commitBeforeChange": "7c94615c7f1a34c1f25e73121dcbe10e789a0e6c", "commitAfterChange": "2b8d0ac8be572d49eb7c83b89c8816f15915abc9", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 143, "signatureBeforeChange": " \t \tprotected void setModifiers(SingleVariableDeclaration variableDecl, LocalDeclaration localDeclaration)", "signatureAfterChange": " \t \tprotected void setModifiers(SingleVariableDeclaration variableDecl, LocalDeclaration localDeclaration)", "diff": ["-\t\tthis.scanner.resetTo(localDeclaration.declarationSourceStart, localDeclaration.sourceStart);", "-\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = localDeclaration.annotations;", "-\t\tint indexInAnnotations = 0;", "-\t\ttry {", "-\t\t\tint token;", "-\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "-\t\t\t\tIExtendedModifier modifier = null;", "-\t\t\t\tswitch(token) {", "-\t\t\t\t\tcase TerminalTokens.TokenNameabstract:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.ABSTRACT_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNamepublic:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNamestatic:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.STATIC_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameprotected:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.PROTECTED_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameprivate:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.PRIVATE_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNamefinal:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.FINAL_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNamenative:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.NATIVE_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNamesynchronized:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.SYNCHRONIZED_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNametransient:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.TRANSIENT_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNamevolatile:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.VOLATILE_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNamestrictfp:", "-\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.STRICTFP_KEYWORD);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase TerminalTokens.TokenNameAT :", "-\t\t\t\t\t\t// we have an annotation", "-\t\t\t\t\t\tif (annotations != null && indexInAnnotations < annotations.length) {", "-\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation annotation = annotations[indexInAnnotations++];", "-\t\t\t\t\t\t\tmodifier = convert(annotation);", "-\t\t\t\t\t\t\tthis.scanner.resetTo(annotation.declarationSourceEnd + 1, this.scanner.eofPosition);", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (modifier != null) {", "-\t\t\t\t\tvariableDecl.modifiers().add(modifier);", "-\t\t\t\t}", "+\t\tswitch(this.ast.apiLevel) {", "+\t\tcase AST.JLS2 :", "+\t\t\tvariableDecl.setModifiers(localDeclaration.modifiers & CompilerModifiers.AccJustFlag);", "+\t\t\tif (localDeclaration.annotations != null) {", "+\t\t\t\tvariableDecl.setFlags(variableDecl.getFlags() | ASTNode.MALFORMED);", "-\t\t} catch(InvalidInputException e) {", "-\t\t\t// ignore", "+\t\t\tbreak;", "+\t\tcase AST.JLS3 :", "+\t\t\tthis.scanner.resetTo(localDeclaration.declarationSourceStart, localDeclaration.sourceStart);", "+\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = localDeclaration.annotations;", "+\t\t\tint indexInAnnotations = 0;", "+\t\t\ttry {", "+\t\t\t\tint token;", "+\t\t\t\twhile ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {", "+\t\t\t\t\tIExtendedModifier modifier = null;", "+\t\t\t\t\tswitch(token) {", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameabstract:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.ABSTRACT_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNamepublic:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.PUBLIC_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNamestatic:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.STATIC_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameprotected:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.PROTECTED_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameprivate:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.PRIVATE_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNamefinal:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.FINAL_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNamenative:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.NATIVE_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNamesynchronized:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.SYNCHRONIZED_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNametransient:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.TRANSIENT_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNamevolatile:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.VOLATILE_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNamestrictfp:", "+\t\t\t\t\t\t\tmodifier = createModifier(Modifier.ModifierKeyword.STRICTFP_KEYWORD);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TerminalTokens.TokenNameAT :", "+\t\t\t\t\t\t\t// we have an annotation", "+\t\t\t\t\t\t\tif (annotations != null && indexInAnnotations < annotations.length) {", "+\t\t\t\t\t\t\t\torg.eclipse.jdt.internal.compiler.ast.Annotation annotation = annotations[indexInAnnotations++];", "+\t\t\t\t\t\t\t\tmodifier = convert(annotation);", "+\t\t\t\t\t\t\t\tthis.scanner.resetTo(annotation.declarationSourceEnd + 1, this.scanner.eofPosition);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (modifier != null) {", "+\t\t\t\t\t\tvariableDecl.modifiers().add(modifier);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} catch(InvalidInputException e) {", "+\t\t\t\t// ignore", "+\t\t\t}"]}], "num": 49131}
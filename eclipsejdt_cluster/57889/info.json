{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "558762e4858580fc9e172984e87d3d29", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c858a5ecbe84f1fd5dfb81fa29b9b46", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "bb161cc0f24c88013c90d4f52d2200284e6436fc", "commitAfterChange": "2f5fd18c93661c661012397a8eb704f52a56558d", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "signatureAfterChange": " protected void reportMatching(TypeDeclaration type, IJavaElement parent, int accuracy, MatchingNodeSet nodeSet, int occurrenceCount) throws CoreException", "diff": ["-\t\tenclosingElement = ((IMember) parent).getType(new String(type.name), occurrenceCount);", "+\t    IMember member = (IMember) parent;", "+\t    if (member.isBinary()) ", "+\t        enclosingElement = parent;", "+\t    else", "+\t\t\tenclosingElement = member.getType(new String(type.name), occurrenceCount);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb3d3d1eea80793417f3a3abc8a8ad98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HandleFactory.java", "commitBeforeChange": "bb161cc0f24c88013c90d4f52d2200284e6436fc", "commitAfterChange": "2f5fd18c93661c661012397a8eb704f52a56558d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tprivate IJavaElement createElement(Scope scope, int elementPosition, ICompilationUnit unit, HashSet existingElements, HashMap knownScopes)", "signatureAfterChange": " \tprivate IJavaElement createElement(Scope scope, int elementPosition, ICompilationUnit unit, HashSet existingElements, HashMap knownScopes)", "diff": ["-\t\t\t\t\t\tnewElement = ((IMember)parentElement).getType(new String(scope.enclosingSourceType().sourceName), 1);", "-\t\t\t\t\t\t// increment occurrence count if collision is detected", "-\t\t\t\t\t\tif (newElement != null) {", "-\t\t\t\t\t\t\twhile (!existingElements.add(newElement)) ((JavaElement)newElement).occurrenceCount++;", "-\t\t\t\t\t\t}", "+\t\t\t\t\t    IMember member = (IMember)parentElement;", "+\t\t\t\t\t    if (member.isBinary()) {", "+\t\t\t\t\t        return null;", "+\t\t\t\t\t    } else {", "+\t\t\t\t\t\t\tnewElement = member.getType(new String(scope.enclosingSourceType().sourceName), 1);", "+\t\t\t\t\t\t\t// increment occurrence count if collision is detected", "+\t\t\t\t\t\t\tif (newElement != null) {", "+\t\t\t\t\t\t\t\twhile (!existingElements.add(newElement)) ((JavaElement)newElement).occurrenceCount++;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t    }"]}], "num": 57889}
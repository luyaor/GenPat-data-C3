{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34190eaf2fc4ff3c2006fc3d3cc943e8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c985d7bb5d6b19ae514847200776668", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "0390be1950bcdfa43b629ba946ffaaaee0d5d33f", "commitAfterChange": "5f2456aa4b2b769de40fe8c031c43b1afaff3ffc", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic void printNewLines(int linesNumber)", "signatureAfterChange": " \tpublic void printEmptyLines(int linesNumber)", "diff": ["-\tpublic void printNewLines(int linesNumber) {", "-\t\tif ((lastNumberOfNewLines - 1) >= linesNumber) {", "-\t\t\t// there is no need to add new lines", "-\t\t\treturn;", "+\tpublic void printEmptyLines(int linesNumber) {", "+\t\tif (lastNumberOfNewLines == 0) {", "+\t\t\tlinesNumber++; // add an extra line breaks", "+\t\t\tfor (int i = 0; i < linesNumber; i++) {", "+\t\t\t\tthis.buffer.append(this.lineSeparator);", "+\t\t\t}", "+\t\t\tlastNumberOfNewLines += linesNumber;", "+\t\t\tline += linesNumber;", "+\t\t\tcolumn = 1;", "+\t\t\tneedSpace = false;", "+\t\t} else if (lastNumberOfNewLines == 1) {", "+\t\t\tfor (int i = 0; i < linesNumber; i++) {", "+\t\t\t\tthis.buffer.append(this.lineSeparator);", "+\t\t\t}", "+\t\t\tlastNumberOfNewLines += linesNumber;", "+\t\t\tline += linesNumber;", "+\t\t\tcolumn = 1;", "+\t\t\tneedSpace = false;", "+\t\t} else {", "+\t\t\tif ((lastNumberOfNewLines - 1) >= linesNumber) {", "+\t\t\t\t// there is no need to add new lines", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tfinal int realNewLineNumber = linesNumber - lastNumberOfNewLines + 1;", "+\t\t\tfor (int i = 0; i < realNewLineNumber; i++) {", "+\t\t\t\tthis.buffer.append(this.lineSeparator);", "+\t\t\t}", "+\t\t\tlastNumberOfNewLines += realNewLineNumber;", "+\t\t\tline += realNewLineNumber;", "+\t\t\tcolumn = 1;", "+\t\t\tneedSpace = false;", "-\t\tfinal int realNewLineNumber = lastNumberOfNewLines != 0 ? linesNumber - lastNumberOfNewLines + 1 : linesNumber;", "-\t\tfor (int i = 0; i < realNewLineNumber; i++) {", "-\t\t\tthis.buffer.append(this.lineSeparator);", "-\t\t}", "-\t\tlastNumberOfNewLines += realNewLineNumber;", "-\t\tline += realNewLineNumber;", "-\t\tcolumn = 1;", "-\t\tneedSpace = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79d2e16f44950992c276e1ad8447a712", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "a6c016e4b9174d429d2989715c74cf56e42ef6bb", "commitAfterChange": "c9f804b2e84f02e4cfe425f0463c67be2149642c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters)", "signatureAfterChange": " \t \tprotected boolean connectTypeVariables(TypeParameter[] typeParameters)", "diff": ["-\t\tnextVariable : for (int i = 0, paramLength = typeParameters.length; i < paramLength; i++) {", "+", "+\t\tint paramLength = typeParameters.length;", "+\t\tnextVariable : for (int i = 0; i < paramLength; i++) {", "-\t", "+", "-\t", "+", "-\t\t\tif (superType.isFinal()) {", "+\t\t\tif (superType.isFinal())", "-\t\t\t}", "-\t", "+", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+", "+\t\tif (this.kind == CLASS_SCOPE) {", "+\t\t\tfor (int i = 0; i < paramLength; i++) {", "+\t\t\t\tTypeParameter typeParameter = typeParameters[i];", "+\t\t\t\tTypeReference typeRef = typeParameter.type;", "+\t\t\t\tif (typeRef != null) {", "+\t\t\t\t\ttypeRef.checkBounds(this);", "+", "+\t\t\t\t\tTypeReference[] boundRefs = typeParameter.bounds;", "+\t\t\t\t\tif (boundRefs != null)", "+\t\t\t\t\t\tfor (int j = 0, k = boundRefs.length; j < k; j++)", "+\t\t\t\t\t\t\tboundRefs[j].checkBounds(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88290923499071a2031e0e7707843c4e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "74870b7c7a86b83146785c7015f2ad1d9795c4b8", "commitAfterChange": "1730ac6965de24cdc9f4b897c4a9e1cee30b618d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tvoid buildMethods()", "signatureAfterChange": "  \tvoid buildMethods()", "diff": ["+\t\tboolean hasNativeMethods = false;", "-\t\t\t\t\tif (methodBinding != null) // is null if binding could not be created", "+\t\t\t\t\tif (methodBinding != null) { // is null if binding could not be created", "+\t\t\t\t\t\thasNativeMethods = hasNativeMethods || methodBinding.isNative();", "+\t\t\t\t\t}", "+\t\t\t\t\t\thasNativeMethods = hasNativeMethods || methodBinding.isNative();", "+\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=243917, conservatively tag all methods and fields as", "+\t\t// being in use if there is a native method in the class.", "+\t\tif (hasNativeMethods) {", "+\t\t\tfor (int i = 0; i < methodBindings.length; i++) {", "+\t\t\t\tmethodBindings[i].modifiers |= ExtraCompilerModifiers.AccLocallyUsed;", "+\t\t\t}", "+\t\t\tFieldBinding[] fields = sourceType.fields();", "+\t\t\tfor (int i = 0; i < fields.length; i++) {", "+\t\t\t\tfields[i].modifiers |= ExtraCompilerModifiers.AccLocallyUsed;\t", "+\t\t\t}", "+\t\t}"]}], "num": 13438}
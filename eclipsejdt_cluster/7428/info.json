{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4cd87a1c4f72eb9452e59ba4a9a40203", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58fb94720545b0c870cfdced99e4d8d5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BaseTypeBinding.java", "commitBeforeChange": "c15cb3a78e90e136a8d7bdf9aa4ee3ed132d36bd", "commitAfterChange": "25ceba4552ce4df8b00117185ea4a4cf292544fd", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic TypeBinding clone(TypeBinding enclosingType)", "signatureAfterChange": "  \tpublic TypeBinding clone(TypeBinding enclosingType)", "diff": ["-\t\treturn new BaseTypeBinding(this);", "+\t\treturn new BaseTypeBinding(this.id, this.simpleName, this.constantPoolName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66cb3b70c195c2093205a2afbffb3fbe", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java", "commitBeforeChange": "9506194ecd38aa227915d4452e8097fba7bd6231", "commitAfterChange": "27a13e874a8de3a8e74e5e1ab65479e9dace8b8c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tboolean addConstraintsFromTypeParamters(TypeBinding subCandidate, ParameterizedTypeBinding ca, List constraints)", "signatureAfterChange": "  \tboolean addConstraintsFromTypeParamters(TypeBinding subCandidate, ParameterizedTypeBinding ca, List constraints)", "diff": ["-\t\t\treturn InferenceContext18.SIMULATE_BUG_JDK_8026527 ? true : false; // FALSE would conform to the spec ", "+\t\t\treturn (this.isSoft && InferenceContext18.SIMULATE_BUG_JDK_8026527) ? true : false; // FALSE would conform to the spec ", "-\t\t\tconstraints.add(new ConstraintTypeFormula(bi[i], ai[i], TYPE_ARGUMENT_CONTAINED));", "+\t\t\tconstraints.add(new ConstraintTypeFormula(bi[i], ai[i], TYPE_ARGUMENT_CONTAINED, this.isSoft));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89009f751613832368185b1f5dd1a863", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java", "commitBeforeChange": "9506194ecd38aa227915d4452e8097fba7bd6231", "commitAfterChange": "27a13e874a8de3a8e74e5e1ab65479e9dace8b8c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "signatureAfterChange": "  \tpublic Object reduce(InferenceContext18 inferenceContext) throws InferenceFailureException", "diff": ["+", "-\t\t\treturn new ConstraintTypeFormula(exprType, this.right, COMPATIBLE);", "+\t\t\treturn new ConstraintTypeFormula(exprType, this.right, COMPATIBLE, this.isSoft);", "-\t\t\t\t\tnew ConstraintExpressionFormula(conditional.valueIfTrue, this.right, this.relation),", "-\t\t\t\t\tnew ConstraintExpressionFormula(conditional.valueIfFalse, this.right, this.relation)", "+\t\t\t\t\tnew ConstraintExpressionFormula(conditional.valueIfTrue, this.right, this.relation, this.isSoft),", "+\t\t\t\t\tnew ConstraintExpressionFormula(conditional.valueIfFalse, this.right, this.relation, this.isSoft)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a07edb5e8d781a95395aaa3b47297798", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/rewrite/ImportRewrite.java", "commitBeforeChange": "540532d90ea319b134aad3a0154f549c66728687", "commitAfterChange": "6a0eebe34bd6b3f3c957d0d1c92bc68d99fa8f40", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic final TextEdit rewriteImports(IProgressMonitor monitor) throws CoreException", "signatureAfterChange": " \tpublic final TextEdit rewriteImports(IProgressMonitor monitor) throws CoreException", "diff": ["-\t\t\tImportRewriteAnalyzer computer= new ImportRewriteAnalyzer(this.compilationUnit, usedAstRoot, this.restoreExistingImports);", "+\t\t\tImportRewriteAnalyzer computer= new ImportRewriteAnalyzer(this.compilationUnit, usedAstRoot, this.importOrder, this.importOnDemandThreshold, this.staticImportOnDemandThreshold, this.restoreExistingImports);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4fb9d3402781c9248cf50afcd16ac68", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java", "commitBeforeChange": "76a2ec884825e9edb380555c61500f23750ece32", "commitAfterChange": "0dc9f4a7cc769fd0c2e397d6cc32c352b61f03b4", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tscope.problemReporter().unnecessaryTypeArgumentsForMethodInvocation(this);", "+\t\tscope.problemReporter().unnecessaryTypeArgumentsForMethodInvocation(this.binding, this.genericTypeArguments, this.typeArguments);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dec88e29d82ffc5dde923dfd60efa807", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetVariablesOperation.java", "commitBeforeChange": "3a52394f0d22844465ca678eae001b22da348629", "commitAfterChange": "204668dea8f27b8498b13996f1332d4610d869bb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprotected void executeOperation() throws JavaModelException", "signatureAfterChange": "  \tprotected void executeOperation() throws JavaModelException", "diff": ["-\t\t\tif (variablePutIfInitializingWithSameValue(manager))", "+\t\t\tif (manager.variablePutIfInitializingWithSameValue(this.variableNames, this.variablePaths))", "-\t}"]}], "num": 7428}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b493cd8706f76fbf4a4cd7407e7130b8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fea6a75bd61de0404bffc9d7bf9add6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "1c4e30980d3a14b65dc5cd77977149f85c37b02a", "commitAfterChange": "72d09911302484497c2776b017dc226fd10250ec", "methodNumberBeforeChange": 180, "methodNumberAfterChange": 180, "signatureBeforeChange": " protected void consumeToken(int type)", "signatureAfterChange": " protected void consumeToken(int type)", "diff": ["-//\t\t\tscanner.commentPtr = -1;", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t//System.out.println(scanner.toStringAction(type));", "+\t//System.out.println(this.scanner.toStringAction(type));", "-\t\t\tif (scanner.useAssertAsAnIndentifier) {", "-\t\t\t\tlong positions = identifierPositionStack[identifierPtr];", "+\t\t\tif (this.scanner.useAssertAsAnIndentifier) {", "+\t\t\t\tlong positions = this.identifierPositionStack[this.identifierPtr];", "-//\t\t\tscanner.commentPtr = -1;", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);\t\t\t", "-\t\t\tpushOnIntStack(scanner.startPosition);", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);\t\t\t", "+\t\t\tpushOnIntStack(this.scanner.startPosition);", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\tthis.synchronizedBlockSourceStart = scanner.startPosition;\t", "+\t\t\tthis.synchronizedBlockSourceStart = this.scanner.startPosition;\t", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);\t\t\t\t", "-\t\t\tpushOnIntStack(scanner.startPosition);", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);\t\t\t\t", "+\t\t\tpushOnIntStack(this.scanner.startPosition);", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);\t\t\t\t", "-\t\t\tpushOnIntStack(scanner.startPosition);\t\t", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);\t\t\t\t", "+\t\t\tpushOnIntStack(this.scanner.startPosition);\t\t", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);\t\t\t\t", "-\t\t\tpushOnIntStack(scanner.startPosition);\t\t\t\t\t", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);\t\t\t\t", "+\t\t\tpushOnIntStack(this.scanner.startPosition);\t\t\t\t\t", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);\t\t\t\t", "-\t\t\tpushOnIntStack(scanner.startPosition);\t\t\t\t\t", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);\t\t\t\t", "+\t\t\tpushOnIntStack(this.scanner.startPosition);\t\t\t\t\t", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);\t\t\t\t", "-\t\t\tpushOnIntStack(scanner.startPosition);\t\t\t\t\t", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);\t\t\t\t", "+\t\t\tpushOnIntStack(this.scanner.startPosition);\t\t\t\t\t", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);\t\t\t\t", "-\t\t\tpushOnIntStack(scanner.startPosition);\t\t\t\t\t", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);\t\t\t\t", "+\t\t\tpushOnIntStack(this.scanner.startPosition);\t\t\t\t\t", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);\t\t\t\t", "-\t\t\tpushOnIntStack(scanner.startPosition);\t\t\t\t\t", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);\t\t\t\t", "+\t\t\tpushOnIntStack(this.scanner.startPosition);\t\t\t\t\t", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);\t\t\t\t", "-\t\t\tpushOnIntStack(scanner.startPosition);\t\t\t\t\t", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);\t\t\t\t", "+\t\t\tpushOnIntStack(this.scanner.startPosition);\t\t\t\t\t", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);\t\t\t\t", "-\t\t\tpushOnIntStack(scanner.startPosition);\t\t\t\t\t", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);\t\t\t\t", "+\t\t\tpushOnIntStack(this.scanner.startPosition);\t\t\t\t\t", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\t\t\tscanner.getCurrentTokenSource(), ", "-\t\t\t\t\tscanner.startPosition, ", "-\t\t\t\t\tscanner.currentPosition - 1)); ", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\t\t\tthis.scanner.getCurrentTokenSource(), ", "+\t\t\t\t\tthis.scanner.startPosition, ", "+\t\t\t\t\tthis.scanner.currentPosition - 1)); ", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\t\t\tscanner.getCurrentTokenSource(), ", "-\t\t\t\t\tscanner.startPosition, ", "-\t\t\t\t\tscanner.currentPosition - 1)); ", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\t\t\tthis.scanner.getCurrentTokenSource(), ", "+\t\t\t\t\tthis.scanner.startPosition, ", "+\t\t\t\t\tthis.scanner.currentPosition - 1)); ", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\t\t\tscanner.getCurrentTokenSource(), ", "-\t\t\t\t\tscanner.startPosition, ", "-\t\t\t\t\tscanner.currentPosition - 1)); ", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\t\t\tthis.scanner.getCurrentTokenSource(), ", "+\t\t\t\t\tthis.scanner.startPosition, ", "+\t\t\t\t\tthis.scanner.currentPosition - 1)); ", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\t\t\tscanner.getCurrentTokenSource(), ", "-\t\t\t\t\tscanner.startPosition, ", "-\t\t\t\t\tscanner.currentPosition - 1)); ", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\t\t\tthis.scanner.getCurrentTokenSource(), ", "+\t\t\t\t\tthis.scanner.startPosition, ", "+\t\t\t\t\tthis.scanner.currentPosition - 1)); ", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\t\t\tscanner.getCurrentTokenSource(), ", "-\t\t\t\t\tscanner.startPosition, ", "-\t\t\t\t\tscanner.currentPosition - 1)); ", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\t\t\tthis.scanner.getCurrentTokenSource(), ", "+\t\t\t\t\tthis.scanner.startPosition, ", "+\t\t\t\t\tthis.scanner.currentPosition - 1)); ", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\t\t\tscanner.getCurrentTokenSourceString(), ", "-\t\t\t\t\tscanner.startPosition, ", "-\t\t\t\t\tscanner.currentPosition - 1); ", "+\t\t\t\t\tthis.scanner.getCurrentTokenSourceString(), ", "+\t\t\t\t\tthis.scanner.startPosition, ", "+\t\t\t\t\tthis.scanner.currentPosition - 1); ", "-//\t\t\tscanner.commentPtr = -1;", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\t\tnew FalseLiteral(scanner.startPosition, scanner.currentPosition - 1)); ", "-//\t\t\tscanner.commentPtr = -1;", "+\t\t\t\tnew FalseLiteral(this.scanner.startPosition, this.scanner.currentPosition - 1)); ", "+//\t\t\tthis.scanner.commentPtr = -1;", "-\t\t\t\tnew TrueLiteral(scanner.startPosition, scanner.currentPosition - 1)); ", "+\t\t\t\tnew TrueLiteral(this.scanner.startPosition, this.scanner.currentPosition - 1)); ", "-\t\t\t\tnew NullLiteral(scanner.startPosition, scanner.currentPosition - 1)); ", "+\t\t\t\tnew NullLiteral(this.scanner.startPosition, this.scanner.currentPosition - 1)); ", "-\t\t\tendPosition = scanner.currentPosition - 1;", "-\t\t\tpushOnIntStack(scanner.startPosition);", "+\t\t\tthis.endPosition = this.scanner.currentPosition - 1;", "+\t\t\tpushOnIntStack(this.scanner.startPosition);", "-\t\t\tpushOnIntStack(scanner.startPosition);", "+\t\t\tpushOnIntStack(this.scanner.startPosition);", "-\t\t\tpushOnIntStack(scanner.startPosition);", "+\t\t\tpushOnIntStack(this.scanner.startPosition);", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);", "-\t\t\tpushOnIntStack(scanner.startPosition);", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);", "+\t\t\tpushOnIntStack(this.scanner.startPosition);", "-\t\t\tpushOnIntStack(scanner.startPosition);", "-\t\t\tpushOnIntStack(scanner.currentPosition - 1);", "+\t\t\tpushOnIntStack(this.scanner.startPosition);", "+\t\t\tpushOnIntStack(this.scanner.currentPosition - 1);", "-\t\t\tendPosition = scanner.startPosition;", "+\t\t\tthis.endPosition = this.scanner.startPosition;", "-\t\t\tendPosition = scanner.startPosition;", "-\t\t\tendStatementPosition = scanner.currentPosition - 1;", "+\t\t\tthis.endPosition = this.scanner.startPosition;", "+\t\t\tthis.endStatementPosition = this.scanner.currentPosition - 1;", "-\t\t\tendStatementPosition = scanner.currentPosition - 1;", "-\t\t\tendPosition = scanner.startPosition - 1; ", "+\t\t\tthis.endStatementPosition = this.scanner.currentPosition - 1;", "+\t\t\tthis.endPosition = this.scanner.startPosition - 1; ", "-\t\t\trParenPos = scanner.currentPosition - 1; // position of the end of right parenthesis (in case of unicode \\u0029) lex00101", "+\t\t\tthis.rParenPos = this.scanner.currentPosition - 1; // position of the end of right parenthesis (in case of unicode \\u0029) lex00101", "-\t\t\tlParenPos = scanner.startPosition;", "+\t\t\tthis.lParenPos = this.scanner.startPosition;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e45f4e3332074e92a9c5ff6ba5059270", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java", "commitBeforeChange": "8bd987839355c299213c95f3874a2e3574283d9c", "commitAfterChange": "76b6723dbe61d0b9874754d0d6572d1a4d8c0cbc", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 73, "signatureBeforeChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "signatureAfterChange": " \tprivate void printJavadocTextLine(StringBuffer buffer, int textStart, int textEnd, FormatJavadocBlock block, boolean firstText, boolean needIndentation, boolean isHtmlTag)", "diff": ["-\t\tboolean indentRootTags = this.formatter.preferences.comment_indent_root_tags && !block.isInDescription();", "-\t\tboolean indentParamTag = this.formatter.preferences.comment_indent_parameter_description && block.isInParamTag();", "-\t\tif (headerLine) firstColumn++;", "-\t\tStringBuffer indentationBuffer = null;", "-\t\tif (indentRootTags) {", "-\t\t\tint indentLevel = this.indentationLevel;", "-\t\t\tint indentations = this.numberOfIndentations;", "-\t\t\tthis.numberOfIndentations += (BLOCK_LINE_PREFIX_LENGTH / this.indentationSize) + 1;", "-\t\t\tthis.indentationLevel = this.numberOfIndentations * this.indentationSize;", "-\t\t\tint currentColumn = this.column;", "-\t\t\tthis.column = firstColumn;", "-\t\t\tif (indentParamTag) {", "-\t\t\t\tthis.indentationLevel += this.indentationSize;", "-\t\t\t\tthis.numberOfIndentations++;", "-\t\t\t}", "-\t\t\tprintIndentationIfNecessary(indentationBuffer = new StringBuffer());", "-\t\t\tif (needIndentation) {", "-\t\t\t\tthis.column = firstColumn;", "-\t\t\t\tprintIndentationIfNecessary(buffer);", "-\t\t\t}", "-\t\t\tfirstColumn = this.indentationLevel + 1;", "-\t\t\tthis.column = currentColumn < firstColumn ? firstColumn : currentColumn;", "-\t\t\tthis.indentationLevel = indentLevel;", "-\t\t\tthis.numberOfIndentations = indentations;", "-\t\t} else if (this.column < firstColumn) {", "+\t\tint maxColumn = this.formatter.preferences.comment_line_length + 1;", "+\t\tif (headerLine) {", "+\t\t\tfirstColumn++;", "+\t\t\tmaxColumn++;", "+\t\t}", "+\t\tif (needIndentation && this.commentIndentation != null) {", "+\t\t\tbuffer.append(this.commentIndentation);", "+\t    \tthis.column += this.commentIndentation.length();", "+\t\t}", "+\t\tif (this.column < firstColumn) {", "-\t\tint maxColumn = this.formatter.preferences.comment_line_length + 1;", "+\t\tString newLineString = null;", "-\t\t\tboolean openedString  =false;", "-\t\t\t\t\tboolean insertSpace = (previousToken == TerminalTokens.TokenNameWHITESPACE || (this.scanner.startPosition == textStart && this.column > firstColumn && !firstText)) && !isHtmlTag;", "-\t\t\t\t\tString msg = iie.getMessage();", "-\t\t\t\t\tif (msg == Scanner.INVALID_CHARACTER_CONSTANT) {", "-\t\t\t\t\t\tif (insertSpace) {", "-\t\t\t\t\t\t\ttokensBuffer.append(' ');", "+\t\t\t\t\tboolean insertSpace = (previousToken == TerminalTokens.TokenNameWHITESPACE || this.needSpace) && !isHtmlTag && !textOnNewLine;", "+\t\t    \t\tif (insertSpace) {", "+\t\t    \t\t\ttokensBuffer.append(' ');", "+\t\t    \t\t}", "+\t\t\t\t\tint restart = this.scanner.startPosition;", "+\t\t\t\t\tthis.scanner.resetTo(restart, textEnd);", "+\t\t    \t\tchar ch = (char) this.scanner.getNextChar();", "+\t\t\t\t\twhile (!this.scanner.atEnd() && !ScannerHelper.isWhitespace(ch)) {", "+\t\t\t\t\t\ttokensBuffer.append(ch);", "+\t\t\t\t\t\tif (this.scanner.atEnd()) {", "+\t\t\t\t\t\t\tpreviousToken = TerminalTokens.TokenNameEOF;", "+\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\ttokensBuffer.append('\\'');", "-\t\t\t\t\t} else if (msg == Scanner.INVALID_CHAR_IN_STRING) {", "-\t\t\t\t\t\tif (openedString) {", "-\t\t\t\t\t\t\topenedString = false;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tif (insertSpace) {", "-\t\t\t\t\t\t\t\ttokensBuffer.append(' ');", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\topenedString = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\ttokensBuffer.append('\"');", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// skip failure", "+\t\t\t\t\t\trestart = this.scanner.currentPosition;", "+\t\t\t\t\t\tch = (char) this.scanner.getNextChar();", "-\t\t\t\t\t// Need to retrieve correct position", "-\t\t\t\t\tthis.scanner.resetTo(this.scanner.startPosition, textEnd);", "-\t\t\t\t\tthis.scanner.getNextChar();", "-\t\t\t\t\tpreviousToken = 1;", "+\t\t\t\t\t// restart at the beginning of the whitespace", "+\t\t\t\t\tif (this.scanner.atEnd()) {", "+\t\t\t\t\t\ttokensBuffer.append(ch);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tthis.scanner.resetTo(restart, textEnd);", "+\t\t\t\t\t}", "-\t    \t\tboolean insertSpace = previousToken == TerminalTokens.TokenNameWHITESPACE || (tokenStart == textStart && this.column > firstColumn && !(firstText || isHtmlTag));", "+\t    \t\tint tokenLength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - tokenStart;", "+\t\t\t\tboolean insertSpace = (previousToken == TerminalTokens.TokenNameWHITESPACE || this.needSpace) && !textOnNewLine;", "+\t\t\t\tString tokensBufferString = tokensBuffer.toString().trim();", "-\t\t\t\t\t\tpreviousToken = token;", "-\t\t\t\t\t\t\tbuffer.append(tokensBuffer);", "-\t\t\t\t\t\t\tthis.column += tokensBufferLength;", "+\t\t\t\t\t\t\tboolean shouldSplit = (this.column+tokensBufferLength) > maxColumn // the max length is reached", "+\t\t\t\t\t\t\t\t&& !isHtmlTag", "+\t\t\t\t\t\t\t\t&& (insertSpace || tokensBufferLength > 1) // allow to split at the beginning only when starting with an identifier or a token with a length > 1", "+\t\t\t\t\t\t\t\t&& tokensBufferString.charAt(0) != '@'; // avoid to split just before a '@'", "+\t\t\t\t\t\t\tif (shouldSplit) {", "+\t\t\t\t\t\t\t\tthis.lastNumberOfNewLines++;", "+\t\t\t\t\t\t\t\tthis.line++;", "+\t\t\t\t\t\t\t\tif (newLineString == null) {", "+\t\t\t\t\t\t\t\t\tStringBuffer newLineBuffer = new StringBuffer(this.lineSeparator);", "+\t\t\t\t\t\t\t    \tthis.column = 1;", "+\t\t\t\t\t\t\t    \tprintIndentationIfNecessary(newLineBuffer);", "+\t\t\t\t\t\t    \t\tnewLineBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t\t\t    \tthis.column += BLOCK_LINE_PREFIX_LENGTH;", "+\t\t\t\t\t\t\t\t\tif (this.commentIndentation != null) {", "+\t\t\t\t\t\t\t\t\t\tnewLineBuffer.append(this.commentIndentation);", "+\t\t\t\t\t\t\t\t    \tthis.column += this.commentIndentation.length();", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t    \t\tfirstColumn = this.column;", "+\t\t\t\t\t\t    \t\tnewLineString = newLineBuffer.toString();", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tthis.column = firstColumn;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbuffer.append(newLineString);", "+\t\t\t\t\t\t\t\tbuffer.append(tokensBufferString);", "+\t\t\t\t\t\t\t\tthis.column += tokensBufferString.length();", "+\t\t\t\t\t\t\t\tif (headerLine) {", "+\t\t\t\t\t\t\t\t\tfirstColumn--;", "+\t\t\t\t\t\t\t\t\tmaxColumn--;", "+\t\t\t\t\t\t\t\t\theaderLine = false;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tbuffer.append(tokensBuffer);", "+\t\t\t\t\t\t\t\tthis.column += tokensBufferLength;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tpreviousToken = token;", "-\t    \t\tint tokenLength = (this.scanner.atEnd() ? this.scanner.eofPosition : this.scanner.currentPosition) - tokenStart;", "-\t    \t\tif (headerLine) {", "-\t    \t\t\t// special case when text is on the same line of the javadoc's header", "-\t    \t\t\tif (lastColumn > maxColumn)  {", "-\t    \t\t\t\tlastColumn--; // new line gives an extra character", "-\t    \t\t\t\tthis.lastNumberOfNewLines++; // the javadoc will become multi lines", "-\t    \t\t\t\tthis.line++;", "-\t    \t\t\t}", "-\t    \t\t}", "-\t\t\t\tif (lastColumn > maxColumn && token != TerminalTokens.TokenNameAT && (tokensBufferLength == 0 || tokensBuffer.charAt(tokensBufferLength-1) != '@')) {", "+\t\t\t\tboolean shouldSplit = lastColumn > maxColumn // the max length is reached", "+\t\t\t\t\t&& (!isHtmlTag || previousToken == -1) // not an html tag or just at the beginning of it", "+\t\t\t\t\t&& token != TerminalTokens.TokenNameAT && (tokensBufferLength == 0 || tokensBuffer.charAt(tokensBufferLength-1) != '@'); // avoid to split just before a '@'", "+\t\t\t\tif (shouldSplit) {", "-\t\t\t\t\tif (!isHtmlTag && tokensBufferLength > 0 && (firstColumn+tokensBufferLength+tokenLength) >= maxColumn) {", "+\t\t\t\t\tif ((tokensBufferLength > 0 || tokenLength < maxColumn) && !isHtmlTag && tokensBufferLength > 0 && (firstColumn+tokensBufferLength+tokenLength) >= maxColumn) {", "-\t\t\t\t\tif (!textOnNewLine) {", "-\t\t\t\t\t\tif (headerLine && lastColumn == this.column) {", "-\t\t\t\t\t\t\tthis.lastNumberOfNewLines++;", "-\t\t\t\t\t\t\tthis.line++;", "+\t\t\t\t\tif ((tokensBufferLength > 0 || tokenLength < maxColumn) && (!textOnNewLine || !firstText)) {", "+\t\t\t\t\t\tthis.lastNumberOfNewLines++;", "+\t\t\t\t\t\tthis.line++;", "+\t\t\t\t\t\tif (newLineString == null) {", "+\t\t\t\t\t\t\tStringBuffer newLineBuffer = new StringBuffer(this.lineSeparator);", "+\t\t\t\t\t    \tthis.column = 1;", "+\t\t\t\t\t    \tprintIndentationIfNecessary(newLineBuffer);", "+\t\t\t\t    \t\tnewLineBuffer.append(BLOCK_LINE_PREFIX);", "+\t\t\t\t\t    \tthis.column += BLOCK_LINE_PREFIX_LENGTH;", "+\t\t\t\t\t\t\tif (this.commentIndentation != null) {", "+\t\t\t\t\t\t\t\tnewLineBuffer.append(this.commentIndentation);", "+\t\t\t\t\t\t    \tthis.column += this.commentIndentation.length();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t    \t\tfirstColumn = this.column;", "+\t\t\t\t    \t\tnewLineString = newLineBuffer.toString();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tthis.column = firstColumn;", "-\t\t\t\t    \tbuffer.append(this.lineSeparator);", "-\t\t\t\t    \tthis.column = 1;", "-\t\t\t\t    \tprintIndentationIfNecessary(buffer);", "-\t\t\t    \t\tbuffer.append(BLOCK_LINE_PREFIX);", "-\t\t\t\t    \tthis.column = headerLine ? firstColumn-1 : firstColumn;", "-\t\t\t\t    \tif (indentationBuffer != null) {", "-\t\t\t\t    \t\tbuffer.append(indentationBuffer);", "-\t\t\t\t    \t}", "+\t\t\t\t\t\tbuffer.append(newLineString);", "-\t\t\t    \t\tString tokensString = tokensBuffer.toString().trim();", "+\t\t\t    \t\tString tokensString = tokensBufferString;", "+\t\t\t\t\t\tmaxColumn--;", "+    \t\t\tthis.needSpace = false;", "+    \t\t\tif (headerLine && lastColumn == maxColumn && this.scanner.atEnd()) {", "+\t\t\t\t\tthis.lastNumberOfNewLines++;", "+\t\t\t\t\tthis.line++;", "+    \t\t\t}"]}], "num": 19129}
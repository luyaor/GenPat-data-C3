{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "88632af8373ce39be9c484d96241e0ff", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a16afcdf8b4b8b1059ef52dc6956665", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "45cd785ca01e28e4f113609eb753cae5cd16f91a", "commitAfterChange": "21c2c8ab182b7aa411b8e7bf4277aee52240c980", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " \tprotected void assertMarkers(String message, String expectedMarkers, IMarker[] markers) throws CoreException", "signatureAfterChange": " \tprotected void assertMarkers(String message, String expectedMarkers, IJavaProject project) throws CoreException", "diff": ["+\tprotected void assertMarkers(String message, String expectedMarkers, IJavaProject project) throws CoreException {", "+\t\twaitForAutoBuild();", "+\t\tIMarker[] markers = project.getProject().findMarkers(IJavaModelMarker.BUILDPATH_PROBLEM_MARKER, false, IResource.DEPTH_ZERO);", "+\t\tsortMarkers(markers);", "+\t\tassertMarkers(message, expectedMarkers, markers);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ee07e275ad846497111441ba593ce03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "155f96ad35dd069f34736b72fe6caa90731d8291", "commitAfterChange": "f4235d9a7ac5aab2dff6835e5bec2b59bb167c66", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 80, "signatureBeforeChange": " \tpublic IClasspathContainer getPreviousSessionContainer(IPath containerPath, IJavaProject project)", "signatureAfterChange": " \tpublic IClasspathContainer getPreviousSessionContainer(IPath containerPath, IJavaProject project)", "diff": ["-\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE){", "-\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t\t\tbuffer.append(\"CPContainer INIT - reentering access to project container during its initialization, will see previous value\\n\"); //$NON-NLS-1$ ", "-\t\t\t\t\t\tbuffer.append(\"\tproject: \" + project.getElementName() + '\\n'); //$NON-NLS-1$", "-\t\t\t\t\t\tbuffer.append(\"\tcontainer path: \" + containerPath + '\\n'); //$NON-NLS-1$", "-\t\t\t\t\t\tbuffer.append(\"\tprevious value: \"); //$NON-NLS-1$", "-\t\t\t\t\t\tbuffer.append(previousContainer.getDescription());", "-\t\t\t\t\t\tbuffer.append(\" {\\n\"); //$NON-NLS-1$", "-\t\t\t\t\t\tIClasspathEntry[] entries = previousContainer.getClasspathEntries();", "-\t\t\t\t\t\tif (entries != null){", "-\t\t\t\t\t\t\tfor (int j = 0; j < entries.length; j++){", "-\t\t\t\t\t\t\t\tbuffer.append(\" \t\t\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tbuffer.append(entries[j]); ", "-\t\t\t\t\t\t\t\tbuffer.append('\\n'); ", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbuffer.append(\" \t}\"); //$NON-NLS-1$", "-\t\t\t\t\t\tUtil.verbose(buffer.toString());", "-\t\t\t\t\t\tnew Exception(\"<Fake exception>\").printStackTrace(System.out); //$NON-NLS-1$", "-\t\t\t\t\t}\t\t\t    ", "+\t\t\t\t\tif (JavaModelManager.CP_RESOLVE_VERBOSE_ADVANCED)", "+\t\t\t\t\t\tverbose_reentering_project_container_access(containerPath, project, previousContainer);", "+\t}"]}], "num": 18563}
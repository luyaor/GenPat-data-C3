{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80e76c18d69dbaf5b72ad62f4eafb92d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "104c28cbc6228c63f52f0a9d019c1934", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/AptPlugin.java", "commitBeforeChange": "f2f45b09c61cdc4a3bb7702f92f8e4fdcb969052", "commitAfterChange": "f33fe27819e8270eb24d0e5a64c8fba3d823b0e8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic void start(BundleContext context) throws Exception", "signatureAfterChange": " \t \tpublic void start(BundleContext context) throws Exception", "diff": ["+\t\t// register resource-changed listener", "+\t\tint mask = IResourceChangeEvent.PRE_BUILD | IResourceChangeEvent.PRE_CLOSE | IResourceChangeEvent.PRE_DELETE;", "+\t\tfinal IWorkspace workspace = ResourcesPlugin.getWorkspace();", "+\t\tworkspace.addResourceChangeListener( new GeneratedResourceChangeListener(), mask );", "+\t", "+\t\tfinal IWorkspaceRoot root = workspace.getRoot();", "+\t\tif(root != null){", "+\t\t\tfinal IProject[] projects = root.getProjects();", "+\t\t\ttry{", "+\t\t\t\tfor( IProject proj : projects ){", "+\t\t\t\t\tif( proj.hasNature(JavaCore.NATURE_ID) && proj.exists() && ", "+\t\t\t\t\t\tproj.isOpen() && AptConfig.isEnabled(JavaCore.create( proj ))){", "+\t\t\t\t\t\tfinal GeneratedFileManager mgr = GeneratedFileManager.getGeneratedFileManager(proj);", "+\t\t\t\t\t\tmgr.ensureGeneratedSourceFolder(null);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcatch( JavaModelException e) { e.printStackTrace(); }", "+\t\t}", "+\t\tif( DEBUG )", "+\t\t\ttrace(\"addded listener\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49471be0078483f33301335cecf3ca90", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatter.java", "commitBeforeChange": "f63db2314417880fb03b69a3a2d9f245018f9762", "commitAfterChange": "ed05e516511eea449e523a1d3b6827ca6c8a5f46", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "\r \tprivate void outputLine(\r \t\tString currentString,\r \t\tboolean preIndented,\r \t\tint depth,\r \t\tint operator,\r \t\tint substringIndex,\r \t\tint[] startSubstringIndexes,\r \t\tint offsetInGlobalLine)", "signatureAfterChange": "\r \tprivate void outputLine(\r \t\tString currentString,\r \t\tboolean preIndented,\r \t\tint depth,\r \t\tint operator,\r \t\tint substringIndex,\r \t\tint[] startSubstringIndexes,\r \t\tint offsetInGlobalLine)", "diff": ["-\t\t\tboolean containsMultiLineComment = currentString.lastIndexOf(\"/*\") != -1; //$NON-NLS-1$\r", "-\t\t\tupdateMappedPositionsWhileSplitting(\r", "-\t\t\t\tbeginningOfLineIndex,\r", "-\t\t\t\tbeginningOfLineIndex + max);\r", "-\t\t\tfor (int i = 0; i < max; i++) {\r", "-\t\t\t\tchar currentChar = currentString.charAt(i);\r", "-\t\t\t\tswitch (currentChar) {\r", "-\t\t\t\t\tcase '\\r' :\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase '\\n' :\r", "-\t\t\t\t\t\tif (i != max - 1) {\r", "-\t\t\t\t\t\t\t// fix for 1FFYL5C: LFCOM:ALL - Incorrect indentation when split with a comment inside a condition\r", "-\t\t\t\t\t\t\t// a substring cannot end with a lineSeparatorSequence,\r", "-\t\t\t\t\t\t\t// except if it has been added by format() after a one-line comment\r", "+\t\t\tif (multipleLineCommentCounter != 0) {\r", "+\t\t\t\ttry {\r", "+\t\t\t\t\tBufferedReader reader = new BufferedReader(new StringReader(currentString));\r", "+\t\t\t\t\tString line = reader.readLine();\r", "+\t\t\t\t\twhile (line != null) {\r", "+\t\t\t\t\t\tupdateMappedPositionsWhileSplitting(\r", "+\t\t\t\t\t\t\tbeginningOfLineIndex,\r", "+\t\t\t\t\t\t\tbeginningOfLineIndex + line.length() + options.lineSeparatorSequence.length);\r", "+\t\t\t\t\t\tformattedSource.append(line);\r", "+\t\t\t\t\t\tbeginningOfLineIndex = beginningOfLineIndex + line.length();\r", "+\t\t\t\t\t\tif ((line = reader.readLine()) != null) {\r", "-\t\t\t\t\t\t\tincreaseSplitDelta(options.lineSeparatorSequence.length);\r", "-\r", "-\t\t\t\t\t\t\tif (containsMultiLineComment) {\r", "-\t\t\t\t\t\t\t\t// fix for 1FGGQCN: LFCOM:ALL - Space management in comments for the formatter\r", "-\t\t\t\t\t\t\t\tdumpTab(currentLineIndentationLevel);\r", "-\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tbeginningOfLineIndex += options.lineSeparatorSequence.length;\r", "+\t\t\t\t\t\t\tdumpTab(currentLineIndentationLevel);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\treader.close();\r", "+\t\t\t\t} catch(IOException e) {\r", "+\t\t\t\t\te.printStackTrace();\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\tupdateMappedPositionsWhileSplitting(\r", "+\t\t\t\t\tbeginningOfLineIndex,\r", "+\t\t\t\t\tbeginningOfLineIndex + max);\r", "+\t\t\t\tint currentMultipleLineNumber = 0;\r", "+\t\t\t\tint previousMultipleLineNumber = -1;\r", "+\t\t\t\tint currentPositionInCurrentLineBuffer = 0;\r", "+\t\t\t\tint numberOfLineBreaksInCurrentMultipleLineComment = 0;\r", "+\t\t\t\tfor (int i = 0; i < max; i++) {\r", "+\t\t\t\t\tchar currentChar = currentString.charAt(i);\r", "+\t\t\t\t\tswitch (currentChar) {\r", "+\t\t\t\t\t\tcase '\\r' :\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase '\\n' :\r", "+\t\t\t\t\t\t\tif (i != max - 1) {\r", "+\t\t\t\t\t\t\t\t// fix for 1FFYL5C: LFCOM:ALL - Incorrect indentation when split with a comment inside a condition\r", "+\t\t\t\t\t\t\t\t// a substring cannot end with a lineSeparatorSequence,\r", "+\t\t\t\t\t\t\t\t// except if it has been added by format() after a one-line comment\r", "+\t\t\t\t\t\t\t\tformattedSource.append(options.lineSeparatorSequence);\r", "+\t\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tdefault :\r", "-\t\t\t\t\t\tformattedSource.append(currentChar);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tdefault :\r", "+\t\t\t\t\t\t\tformattedSource.append(currentChar);\r", "+\t\t\t\t\t}\r", "-\t\t\t\tint startPosition =\r", "-\t\t\t\t\tbeginningOfLineIndex + startSubstringIndexes[substringIndex];\r", "-\t\t\t\tupdateMappedPositionsWhileSplitting(startPosition, startPosition + max);\r", "+\t\t\t\tif (multipleLineCommentCounter == 0) {\r", "+\t\t\t\t\tint startPosition =\r", "+\t\t\t\t\t\tbeginningOfLineIndex + startSubstringIndexes[substringIndex];\r", "+\t\t\t\t\tupdateMappedPositionsWhileSplitting(startPosition, startPosition + max);\r", "+\t\t\t\t}\r", "-\t\t\t\t\t\t\t- startSubstringIndexes[substringIndex\r", "-\t\t\t\t\t\t\t+ 1]);\r", "+\t\t\t\t\t\t\t- startSubstringIndexes[substringIndex + 1]);\r"]}], "num": 28611}
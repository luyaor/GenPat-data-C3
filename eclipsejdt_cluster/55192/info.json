{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb5e12bdf3d56c05b5ad83e7fddbca4d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09181282d9cf76fc940685674c8159b6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeReferencePattern.java", "commitBeforeChange": "7dce3ced6f2c34a63721a3fda038e2fad50139b7", "commitAfterChange": "4a258c24dea43b906f3daa4041c94e7315633dfe", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public static char[] createReference( \tint modifiers, \tchar[] packageName, \tchar[] typeName, \tchar[][] enclosingTypeNames, \tchar classOrInterface, \tchar[] superTypeName, \tchar superClassOrInterface)", "signatureAfterChange": " public static SuperTypeReferencePattern getSuperTypeReferenceRecord()", "diff": ["-public static char[] createReference(", "-\tchar[] enclosingTypeName = CharOperation.concatWith(enclosingTypeNames, '$');", "-\tchar[] typeSimpleName = CharOperation.lastSegment(typeName, '.');", "-\tchar[] superTypeSimpleName = CharOperation.lastSegment(superTypeName, '.');", "-\tchar[] superQualification = null;", "-\tif (superTypeSimpleName != superTypeName) {", "-\t\tint length = superTypeName.length - superTypeSimpleName.length - 1;", "-\t\tsuperQualification = new char[length];", "-\t\tSystem.arraycopy(superTypeName, 0, superQualification, 0, length);", "-\tchar[] superTypeSourceName = CharOperation.lastSegment(superTypeSimpleName, '$');", "-\tif (superTypeSourceName != superTypeSimpleName) {", "-\t\tint start = superQualification == null ? 0 : superQualification.length + 1;", "-\t\tint prefixLength = superTypeSimpleName.length - superTypeSourceName.length;", "-\t\tif (superQualification != null) {", "-\t\t\tSystem.arraycopy(superQualification, 0, mangledQualification, 0, start-1);", "-\t\tSystem.arraycopy(superTypeSimpleName, 0, mangledQualification, start, prefixLength);", "-\t\tsuperQualification = mangledQualification;", "-\t\tsuperTypeSimpleName = superTypeSourceName;", "-", "-\tint superTypeSimpleNameLength = superTypeSimpleName == null ? 0 : superTypeSimpleName.length;", "-\tint superQualificationLength = superQualification == null ? 0 : superQualification.length;", "-\tint typeSimpleNameLength = typeSimpleName == null ? 0 : typeSimpleName.length;", "-\tint enclosingTypeNameLength = enclosingTypeName == null ? 0 : enclosingTypeName.length;", "-\tint packageNameLength = packageName == null ? 0 : packageName.length;", "-\tint pos = SUPER_REF.length;", "-", "-\t// SUPER_REF superTypeSimpleName / superQualification / superClassOrInterface /  typeSimpleName / enclosingTypeName / packageName / classOrInterface modifiers", "-\tchar[] result = new char[pos + superTypeSimpleNameLength + superQualificationLength + typeSimpleNameLength", "-\t\t+ enclosingTypeNameLength + packageNameLength + 9];", "-\tSystem.arraycopy(SUPER_REF, 0, result, 0, pos);", "-\tif (superTypeSimpleNameLength > 0) {", "-\t\tSystem.arraycopy(superTypeSimpleName, 0, result, pos, superTypeSimpleNameLength);", "-\t\tpos += superTypeSimpleNameLength;", "-\t}", "-\tresult[pos++] = SEPARATOR;", "-\tif (superQualificationLength > 0) {", "-\t\tSystem.arraycopy(superQualification, 0, result, pos, superQualificationLength);", "-\t\tpos += superQualificationLength;", "-\t}", "-\tresult[pos++] = SEPARATOR;", "-\tresult[pos++] = superClassOrInterface;", "-\tresult[pos++] = SEPARATOR;", "-\tif (typeSimpleNameLength > 0) {", "-\t\tSystem.arraycopy(typeSimpleName, 0, result, pos, typeSimpleNameLength);", "-\t\tpos += typeSimpleNameLength;", "-\t}", "-\tresult[pos++] = SEPARATOR;", "-\tif (enclosingTypeNameLength > 0) {", "-\t\tSystem.arraycopy(enclosingTypeName, 0, result, pos, enclosingTypeNameLength);", "-\t\tpos += enclosingTypeNameLength;", "-\t}", "-\tresult[pos++] = SEPARATOR;", "-\tif (packageNameLength > 0) {", "-\t\tSystem.arraycopy(packageName, 0, result, pos, packageNameLength);", "-\t\tpos += packageNameLength;", "-\t}", "-\tresult[pos++] = SEPARATOR;", "-\tresult[pos++] = classOrInterface;", "-\tresult[pos] = (char) modifiers;", "-\treturn result;", "+public static SuperTypeReferencePattern getSuperTypeReferenceRecord() {", "+\treturn (SuperTypeReferencePattern)indexRecord.get();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8734789ea3719da3fb655fb5ac48ebf7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/Signature.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": " public static char[] createCharArrayTypeSignature(char[] typeName, boolean isResolved)", "signatureAfterChange": " public static char[] createCharArrayTypeSignature(char[] typeName, boolean isResolved)", "diff": ["+\tStringBuffer buffer = new StringBuffer(5);", "+\tint pos = encodeTypeSignature(typeName, 0, isResolved, length, buffer);", "+\tpos = consumeWhitespace(typeName, pos, length);", "+\tif (pos < length) throw new IllegalArgumentException(new String(typeName));", "+\tchar[] result = new char[length = buffer.length()];", "+\tbuffer.getChars(0, length, result, 0);", "+\treturn result;\t", "+}", "-\tint arrayCount = CharOperation.occurencesOf('[', typeName);", "-\tchar[] sig;", "-\t", "-\tswitch (typeName[0]) {", "-\t\t\tif (checkPrimitiveType(BOOLEAN, typeName)) {", "-\t\t\t\tsig = new char[arrayCount+1];", "-\t\t\t\tsig[arrayCount] = C_BOOLEAN;", "-\t\t\t\tbreak;", "-\t\t\t} else if (checkPrimitiveType(BYTE, typeName)) {", "-\t\t\t\tsig = new char[arrayCount+1];", "-\t\t\t\tsig[arrayCount] = C_BYTE;", "-\t\t\t\tbreak;", "-\t\t\tif (checkPrimitiveType(CHAR, typeName)) {", "-\t\t\t\tsig = new char[arrayCount+1];", "-\t\t\t\tsig[arrayCount] = C_CHAR;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tif (checkPrimitiveType(DOUBLE, typeName)) {", "-\t\t\t\tsig = new char[arrayCount+1];", "-\t\t\t\tsig[arrayCount] = C_DOUBLE;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tif (checkPrimitiveType(FLOAT, typeName)) {", "-\t\t\t\tsig = new char[arrayCount+1];", "-\t\t\t\tsig[arrayCount] = C_FLOAT;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tif (checkPrimitiveType(INT, typeName)) {", "-\t\t\t\tsig = new char[arrayCount+1];", "-\t\t\t\tsig[arrayCount] = C_INT;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tif (checkPrimitiveType(LONG, typeName)) {", "-\t\t\t\tsig = new char[arrayCount+1];", "-\t\t\t\tsig[arrayCount] = C_LONG;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tif (checkPrimitiveType(SHORT, typeName)) {", "-\t\t\t\tsig = new char[arrayCount+1];", "-\t\t\t\tsig[arrayCount] = C_SHORT;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tif (checkPrimitiveType(VOID, typeName)) {", "-\t\t\t\tsig = new char[arrayCount+1];", "-\t\t\t\tsig[arrayCount] = C_VOID;", "-\t\t\t\tbreak;", "-\t\tdefault:", "-\t\t\t// non primitive type", "-\t\t\tint sigLength = arrayCount + 1 + length + 1; // for example '[[[Ljava.lang.String;'", "-\t\t\tsig = new char[sigLength];", "-\t\t\tint sigIndex = arrayCount+1; // index in sig", "-\t\t\tint startID = 0; // start of current ID in typeName", "-\t\t\tint index = 0; // index in typeName", "-\t\t\twhile (index < length) {", "-\t\t\t\tchar currentChar = typeName[index];", "-\t\t\t\tswitch (currentChar) {", "-\t\t\t\t\tcase '.':", "-\t\t\t\t\t\tif (startID == -1) throw new IllegalArgumentException(new String(typeName));", "-\t\t\t\t\t\tif (startID < index) {", "-\t\t\t\t\t\t\tsig = CharOperation.append(sig, sigIndex, typeName, startID, index);", "-\t\t\t\t\t\t\tsigIndex += index-startID;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tsig[sigIndex++] = C_DOT;", "-\t\t\t\t\t\tindex++;", "-\t\t\t\t\t\tstartID = index;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase '[':", "-\t\t\t\t\t\tif (startID != -1) {", "-\t\t\t\t\t\t\tif (startID < index) {", "-\t\t\t\t\t\t\t\tsig = CharOperation.append(sig, sigIndex, typeName, startID, index);", "-\t\t\t\t\t\t\t\tsigIndex += index-startID;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tstartID = -1; // no more id after []", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tindex++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault :", "-\t\t\t\t\t\tif (startID != -1 && CharOperation.isWhitespace(currentChar)) {", "-\t\t\t\t\t\t\tif (startID < index) {", "-\t\t\t\t\t\t\t\tsig = CharOperation.append(sig, sigIndex, typeName, startID, index);", "-\t\t\t\t\t\t\t\tsigIndex += index-startID;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tstartID = index+1;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tindex++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t// last id", "-\t\t\tif (startID != -1 && startID < index) {", "-\t\t\t\tsig = CharOperation.append(sig, sigIndex, typeName, startID, index);", "-\t\t\t\tsigIndex += index-startID;", "-\t\t\t", "-\t\t\t// add L (or Q) at the beigininig and ; at the end", "-\t\t\tsig[arrayCount] = isResolved ? C_RESOLVED : C_UNRESOLVED;", "-\t\t\tsig[sigIndex++] = C_NAME_END;", "-\t\t\t", "-\t\t\t// resize if needed", "-\t\t\tif (sigLength > sigIndex) {", "-\t\t\t\tSystem.arraycopy(sig, 0, sig = new char[sigIndex], 0, sigIndex);", "-\t\t\t}", "-", "-\t// add array info", "-\tfor (int i = 0; i < arrayCount; i++) {", "-\t\tsig[i] = C_ARRAY;", "-\t", "-\treturn sig;"]}], "num": 55192}
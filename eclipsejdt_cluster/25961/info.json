{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0b11b24cad17ffb10a8aacb2cd73c2a", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e2f006c0ef3e4ff53f1baf7d913d435", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorReferencePattern.java", "commitBeforeChange": "a1b8b888d8c8c040023fcd2856f96f5ad6c69b3e", "commitAfterChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r private int matchLevel(AllocationExpression allocation, boolean resolve)", "signatureAfterChange": "\r private boolean matches(AllocationExpression allocation, boolean resolve)", "diff": ["+ */\r", "+private boolean matches(AllocationExpression allocation, boolean resolve) {\r", "+\r", "+\t// constructor name is simple type name\r", "+\tchar[][] typeName = allocation.type.getTypeName();\r", "+\tif (this.declaringSimpleName != null \r", "+\t\t\t&& !this.matchesName(this.declaringSimpleName, typeName[typeName.length-1]))\r", "+\t\treturn false;\r", "+\r", "+\t// declaring type\r", "+\tMethodBinding binding = allocation.binding;\r", "+\tif (resolve && binding != null) {\r", "+\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "+\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "+\t\t\treturn false;\r", "+\t}\r", "+\t\t\r", "+\t// argument types\r", "+\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\tif (argumentCount > -1) {\r", "+\t\tint parameterCount = allocation.arguments == null ? 0 : allocation.arguments.length;\r", "+\t\tif (parameterCount != argumentCount)\r", "+\t\t\treturn false;\r", "+\r", "+\t\tif (resolve && binding != null) {\r", "+\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "+\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "+\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "+\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\r", "+\treturn true;\r", "+}\r", "- */\r", "-private int matchLevel(AllocationExpression allocation, boolean resolve) {\r", "-\r", "-\t// constructor name is simple type name\r", "-\tchar[][] typeName = allocation.type.getTypeName();\r", "-\tif (this.declaringSimpleName != null \r", "-\t\t\t&& !this.matchesName(this.declaringSimpleName, typeName[typeName.length-1]))\r", "-\t\treturn IMPOSSIBLE_MATCH;\r", "-\r", "-\tif (resolve) {\r", "-\t\treturn this.matchLevel(allocation.binding);\r", "-\t} else {\r", "-\t\t// argument types\r", "-\t\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\t\tif (argumentCount > -1) {\r", "-\t\t\tint parameterCount = allocation.arguments == null ? 0 : allocation.arguments.length;\r", "-\t\t\tif (parameterCount != argumentCount)\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t\treturn POSSIBLE_MATCH;\r", "-\t}\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "708189ba9b1c1bfee926e73d81ac35d1", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorReferencePattern.java", "commitBeforeChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "commitAfterChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r private int matchLevel(AllocationExpression allocation, boolean resolve)", "signatureAfterChange": "\r private boolean matches(AllocationExpression allocation, boolean resolve)", "diff": ["+ */\r", "+private boolean matches(AllocationExpression allocation, boolean resolve) {\r", "+\r", "+\t// constructor name is simple type name\r", "+\tchar[][] typeName = allocation.type.getTypeName();\r", "+\tif (this.declaringSimpleName != null \r", "+\t\t\t&& !this.matchesName(this.declaringSimpleName, typeName[typeName.length-1]))\r", "+\t\treturn false;\r", "+\r", "+\t// declaring type\r", "+\tMethodBinding binding = allocation.binding;\r", "+\tif (resolve && binding != null) {\r", "+\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "+\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "+\t\t\treturn false;\r", "+\t}\r", "+\t\t\r", "+\t// argument types\r", "+\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\tif (argumentCount > -1) {\r", "+\t\tint parameterCount = allocation.arguments == null ? 0 : allocation.arguments.length;\r", "+\t\tif (parameterCount != argumentCount)\r", "+\t\t\treturn false;\r", "+\r", "+\t\tif (resolve && binding != null) {\r", "+\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "+\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "+\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "+\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\r", "+\treturn true;\r", "+}\r", "- */\r", "-private int matchLevel(AllocationExpression allocation, boolean resolve) {\r", "-\r", "-\t// constructor name is simple type name\r", "-\tchar[][] typeName = allocation.type.getTypeName();\r", "-\tif (this.declaringSimpleName != null \r", "-\t\t\t&& !this.matchesName(this.declaringSimpleName, typeName[typeName.length-1]))\r", "-\t\treturn IMPOSSIBLE_MATCH;\r", "-\r", "-\tif (resolve) {\r", "-\t\treturn this.matchLevel(allocation.binding);\r", "-\t} else {\r", "-\t\t// argument types\r", "-\t\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\t\tif (argumentCount > -1) {\r", "-\t\t\tint parameterCount = allocation.arguments == null ? 0 : allocation.arguments.length;\r", "-\t\t\tif (parameterCount != argumentCount)\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t\treturn POSSIBLE_MATCH;\r", "-\t}\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e999744f35000941fe4a69e47fc4452", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorReferencePattern.java", "commitBeforeChange": "7e5cc03e445550d3cbc10c611218c79332074276", "commitAfterChange": "c57706d05dc3654769cca2053ff9cb20fb0a6664", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r private int matchLevel(AllocationExpression allocation, boolean resolve)", "signatureAfterChange": "\r private boolean matches(AllocationExpression allocation, boolean resolve)", "diff": ["+ */\r", "+private boolean matches(AllocationExpression allocation, boolean resolve) {\r", "+\r", "+\t// constructor name is simple type name\r", "+\tchar[][] typeName = allocation.type.getTypeName();\r", "+\tif (this.declaringSimpleName != null \r", "+\t\t\t&& !this.matchesName(this.declaringSimpleName, typeName[typeName.length-1]))\r", "+\t\treturn false;\r", "+\r", "+\t// declaring type\r", "+\tMethodBinding binding = allocation.binding;\r", "+\tif (resolve && binding != null) {\r", "+\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "+\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "+\t\t\treturn false;\r", "+\t}\r", "+\t\t\r", "+\t// argument types\r", "+\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\tif (argumentCount > -1) {\r", "+\t\tint parameterCount = allocation.arguments == null ? 0 : allocation.arguments.length;\r", "+\t\tif (parameterCount != argumentCount)\r", "+\t\t\treturn false;\r", "+\r", "+\t\tif (resolve && binding != null) {\r", "+\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "+\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "+\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "+\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\r", "+\treturn true;\r", "+}\r", "- */\r", "-private int matchLevel(AllocationExpression allocation, boolean resolve) {\r", "-\r", "-\t// constructor name is simple type name\r", "-\tchar[][] typeName = allocation.type.getTypeName();\r", "-\tif (this.declaringSimpleName != null \r", "-\t\t\t&& !this.matchesName(this.declaringSimpleName, typeName[typeName.length-1]))\r", "-\t\treturn IMPOSSIBLE_MATCH;\r", "-\r", "-\tif (resolve) {\r", "-\t\treturn this.matchLevel(allocation.binding);\r", "-\t} else {\r", "-\t\t// argument types\r", "-\t\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\t\tif (argumentCount > -1) {\r", "-\t\t\tint parameterCount = allocation.arguments == null ? 0 : allocation.arguments.length;\r", "-\t\t\tif (parameterCount != argumentCount)\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t\treturn POSSIBLE_MATCH;\r", "-\t}\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d39afdff6260c43120185075bd02f2c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorReferencePattern.java", "commitBeforeChange": "46418d248f89a29f49a77d154cdbfa57c408b256", "commitAfterChange": "c85433e27f0fa74bfe8e06c38c1c02c51b5599d7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r private int matchLevel(AllocationExpression allocation, boolean resolve)", "signatureAfterChange": "\r private boolean matches(AllocationExpression allocation, boolean resolve)", "diff": ["+ */\r", "+private boolean matches(AllocationExpression allocation, boolean resolve) {\r", "+\r", "+\t// constructor name is simple type name\r", "+\tchar[][] typeName = allocation.type.getTypeName();\r", "+\tif (this.declaringSimpleName != null \r", "+\t\t\t&& !this.matchesName(this.declaringSimpleName, typeName[typeName.length-1]))\r", "+\t\treturn false;\r", "+\r", "+\t// declaring type\r", "+\tMethodBinding binding = allocation.binding;\r", "+\tif (resolve && binding != null) {\r", "+\t\tReferenceBinding declaringBinding = binding.declaringClass;\r", "+\t\tif (!this.matchesType(this.declaringSimpleName, this.declaringQualification, declaringBinding))\r", "+\t\t\treturn false;\r", "+\t}\r", "+\t\t\r", "+\t// argument types\r", "+\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "+\tif (argumentCount > -1) {\r", "+\t\tint parameterCount = allocation.arguments == null ? 0 : allocation.arguments.length;\r", "+\t\tif (parameterCount != argumentCount)\r", "+\t\t\treturn false;\r", "+\r", "+\t\tif (resolve && binding != null) {\r", "+\t\t\tfor (int i = 0; i < parameterCount; i++) {\r", "+\t\t\t\tchar[] qualification = this.parameterQualifications[i];\r", "+\t\t\t\tchar[] type = this.parameterSimpleNames[i];\r", "+\t\t\t\tif (!this.matchesType(type, qualification, binding.parameters[i]))\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\r", "+\treturn true;\r", "+}\r", "- */\r", "-private int matchLevel(AllocationExpression allocation, boolean resolve) {\r", "-\r", "-\t// constructor name is simple type name\r", "-\tchar[][] typeName = allocation.type.getTypeName();\r", "-\tif (this.declaringSimpleName != null \r", "-\t\t\t&& !this.matchesName(this.declaringSimpleName, typeName[typeName.length-1]))\r", "-\t\treturn IMPOSSIBLE_MATCH;\r", "-\r", "-\tif (resolve) {\r", "-\t\treturn this.matchLevel(allocation.binding);\r", "-\t} else {\r", "-\t\t// argument types\r", "-\t\tint argumentCount = this.parameterSimpleNames == null ? -1 : this.parameterSimpleNames.length;\r", "-\t\tif (argumentCount > -1) {\r", "-\t\t\tint parameterCount = allocation.arguments == null ? 0 : allocation.arguments.length;\r", "-\t\t\tif (parameterCount != argumentCount)\r", "-\t\t\t\treturn IMPOSSIBLE_MATCH;\r", "-\t\t}\r", "-\t\treturn POSSIBLE_MATCH;\r", "-\t}\r", "-}\r"]}], "num": 25961}
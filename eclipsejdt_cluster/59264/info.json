{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8328fed24d1c56cd9d74d254dc185c80", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3560a88561a473d0ba976947a24d54c5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "51ef1f3e636c416c08f983016f64f795f2b9cc74", "commitAfterChange": "9d3908e6916e224f861c3acffb456d39563ef22b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic CastExpression(Expression expression, Expression type)", "signatureAfterChange": " \tpublic CastExpression(Expression expression, Expression type)", "diff": ["-", "-\t\t//due to the fact an expression may start with ( and that a cast also start with (", "-\t\t//the field is an expression....it can be a TypeReference OR a NameReference Or", "-\t\t//an expression <--this last one is invalid.......", "-", "-\t\t//if (type instanceof TypeReference )", "-\t\t//\tflag = IsTypeReference ;", "-\t\t//else", "-\t\t//\tif (type instanceof NameReference)", "-\t\t//\t\tflag = IsNameReference ;", "-\t\t//\telse", "-\t\t//\t\tflag = IsExpression ;", "-", "+\t\ttype.bits |= IgnoreRawTypeCheck; // no need to worry about raw type usage"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec84e2f8e21115f7453c0015dd917890", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "86284f2db6c7ac41b63c1766c9b7b3a016d95a9a", "commitAfterChange": "c8d8bdad35a9dc8d924116cabb6dd00986cff218", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  public TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  public TypeBinding resolveType(BlockScope scope)", "diff": ["-\t// due to the fact an expression may start with ( and that a cast can also start with (", "-\t// the field is an expression....it can be a TypeReference OR a NameReference Or", "-\t// any kind of Expression <-- this last one is invalid.......", "-", "-\t//expression.setExpectedType(this.resolvedType); // needed in case of generic method invocation", "+\tif (scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8) {", "+\t\tif (this.expression.isPolyExpressionInCastingContext())", "+\t\t\tthis.expression.setExpectedType(this.resolvedType);", "+\t}"]}], "num": 59264}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a758412a4081d8db2c9a52f559cb2c2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d56204a2215ffb1a0264212b23aaa88", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/TypeReferenceLocator.java", "commitBeforeChange": "309be04a155363e9f398875d6734d13ff5334b6c", "commitAfterChange": "6b58c2063066f4462a27490669b336c2263fae86", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " protected int resolveLevel(TypeReference typeRef)", "signatureAfterChange": " protected int resolveLevel(TypeReference typeRef)", "diff": ["-\tif (typeBinding instanceof ProblemReferenceBinding) {", "-\t\tBinding binding = ((ProblemReferenceBinding) typeBinding).original;", "-\t\tif (binding instanceof TypeBinding)", "-\t\t\ttypeBinding = (TypeBinding) binding;", "-\t\telse if (binding == null)", "-\t\t\ttypeBinding = null;", "-\t}", "-\tif (typeBinding == null) return INACCURATE_MATCH;", "+\tif (typeBinding instanceof ProblemReferenceBinding)", "+\t\ttypeBinding = ((ProblemReferenceBinding) typeBinding).original;", "+\telse", "+\t\treturn resolveLevelForTypeOrEnclosingTypes(this.pattern.simpleName, this.pattern.qualification, typeBinding);", "+}", "-\tQualifiedTypeReference qTypeRef = (QualifiedTypeReference) typeRef;", "-\tchar[][] tokens = qTypeRef.tokens;", "-\tint lastIndex = tokens.length-1;", "-\t// try to match all enclosing types for which the token matches as well.", "-\twhile (typeBinding != null && lastIndex >= 0) {", "-\t\tif (matchesName(this.pattern.simpleName, tokens[lastIndex--])) {", "-\t\t\tint level = resolveLevelForType(this.pattern.simpleName, this.pattern.qualification, typeBinding);", "-\t\t\tif (level != IMPOSSIBLE_MATCH) return level;", "-\t\tif (typeBinding instanceof ReferenceBinding)", "-\t\t\ttypeBinding = ((ReferenceBinding)typeBinding).enclosingType();", "-\t\telse return IMPOSSIBLE_MATCH;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "870ea3ec90bab47c238fbfb5691c2cb6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaExpression.java", "commitBeforeChange": "ca289ff4e9317024e3c3a344a3b266fd883ffd1d", "commitAfterChange": "aacce274176303cc524a6360232ca1201922c452", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic SourceMethod getMethod()", "signatureAfterChange": "  \tpublic IMethod getMethod()", "diff": ["-\t", "-\tpublic SourceMethod getMethod() {", "-\t\tif (this.lambdaMethod != null)", "-\t\t\treturn this.lambdaMethod;", "-\t\t", "-\t\tTypeBinding [] argv = this.lambdaExpression.argumentsTypeElided() ? this.lambdaExpression.descriptor.parameters : this.lambdaExpression.argumentTypes(); ", "-\t\tint argc = argv.length;", "-\t\tString[] parameterTypeSignatures = new String[argc];", "-\t\tfor (int i = 0; i < argc; i++) {", "-\t\t\tparameterTypeSignatures[i] = new String(argv[i].signature());", "-\t\t}", "-\t\treturn this.lambdaMethod = new SourceMethod(this, new String(this.lambdaExpression.binding.selector), parameterTypeSignatures); ", "-\t}", "+\tpublic IMethod getMethod() {", "+\t\treturn this.lambdaMethod;"]}], "num": 37423}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ebb7db8483e7e9d20abc13057d195ab2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2706547e8db202c1d2e2e94c7d2001f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r private void findConstructors(ReferenceBinding currentType, TypeBinding[] argTypes, Scope scope)", "signatureAfterChange": "\r \tprivate void findConstructors(\r \t\tReferenceBinding currentType,\r \t\tTypeBinding[] argTypes,\r \t\tScope scope,\r \t\tInvocationSite invocationSite)", "diff": ["-}\r", "-private void findConstructors(ReferenceBinding currentType, TypeBinding[] argTypes, Scope scope) {\r", "-\t// No visibility checks can be performed without the scope & invocationSite\r", "-\tMethodBinding[] methods = currentType.methods();\r", "-\tint minArgLength = argTypes == null ? 0 : argTypes.length;\r", "-\tnext : for (int f = methods.length; --f >= 0;) {\r", "-\t\tMethodBinding constructor = methods[f];\r", "-\t\tif (constructor.isConstructor()) {\r", "-\t\t\tTypeBinding[] parameters = constructor.parameters;\r", "-\t\t\tint paramLength = parameters.length;\r", "-\t\t\tif (minArgLength > paramLength) continue next;\r", "-\t\t\tfor (int a = minArgLength; --a >= 0;)\r", "-\t\t\t\tif (argTypes[a] != null) // can be null if it could not be resolved properly\r", "-\t\t\t\t\tif (!scope.areTypesCompatible(argTypes[a], constructor.parameters[a])) continue next;\r", "-\r", "-\t\t\tchar[][] parameterPackageNames = new char[paramLength][];\r", "-\t\t\tchar[][] parameterTypeNames = new char[paramLength][];\r", "-\t\t\tfor (int i = 0; i < paramLength; i++) {\r", "-\t\t\t\tTypeBinding type = parameters[i];\r", "-\t\t\t\tparameterPackageNames[i] = type.qualifiedPackageName();\r", "-\t\t\t\tparameterTypeNames[i] = type.qualifiedSourceName();\r", "-\t\t\t}\r", "-\t\t\tchar[] completion = TypeConstants.NoChar; // nothing to insert - do not want to replace the existing selector & arguments\r", "-\t\t\tif (source == null || source.length <= endPosition || source[endPosition] != ')')\r", "-\t\t\t\tcompletion = new char[] {')'};\r", "-\t\t\trequestor.acceptMethod(\r", "-\t\t\t\tcurrentType.qualifiedPackageName(),\r", "-\t\t\t\tcurrentType.qualifiedSourceName(),\r", "-\t\t\t\tcurrentType.sourceName(),\r", "-\t\t\t\tparameterPackageNames,\r", "-\t\t\t\tparameterTypeNames,\r", "-\t\t\t\tTypeConstants.NoChar,\r", "-\t\t\t\tTypeConstants.NoChar,\r", "-\t\t\t\tcompletion,\r", "-\t\t\t\tconstructor.modifiers,\r", "-\t\t\t\tendPosition,\r", "-\t\t\t\tendPosition);\r", "-\t\t}\r", "-\t}\r", "-}\r", "+\tprivate void findConstructors(\r", "+\t\tReferenceBinding currentType,\r", "+\t\tTypeBinding[] argTypes,\r", "+\t\tScope scope,\r", "+\t\tInvocationSite invocationSite) {\r", "+\t\t// No visibility checks can be performed without the scope & invocationSite\r", "+\t\tMethodBinding[] methods = currentType.methods();\r", "+\t\tint minArgLength = argTypes == null ? 0 : argTypes.length;\r", "+\t\tnext : for (int f = methods.length; --f >= 0;) {\r", "+\t\t\tMethodBinding constructor = methods[f];\r", "+\t\t\tif (constructor.isConstructor()) {\r", "+\t\t\t\tif (options.checkVisibilitySensitive()\r", "+\t\t\t\t\t&& !constructor.canBeSeenBy(invocationSite, scope))\r", "+\t\t\t\t\tcontinue next;\r", "+\t\t\t\tTypeBinding[] parameters = constructor.parameters;\r", "+\t\t\t\tint paramLength = parameters.length;\r", "+\t\t\t\tif (minArgLength > paramLength)\r", "+\t\t\t\t\tcontinue next;\r", "+\t\t\t\tfor (int a = minArgLength; --a >= 0;)\r", "+\t\t\t\t\tif (argTypes[a] != null) // can be null if it could not be resolved properly\r", "+\t\t\t\t\t\tif (!scope.areTypesCompatible(argTypes[a], constructor.parameters[a]))\r", "+\t\t\t\t\t\t\tcontinue next;\r", "+\t\t\t\tchar[][] parameterPackageNames = new char[paramLength][];\r", "+\t\t\t\tchar[][] parameterTypeNames = new char[paramLength][];\r", "+\t\t\t\tfor (int i = 0; i < paramLength; i++) {\r", "+\t\t\t\t\tTypeBinding type = parameters[i];\r", "+\t\t\t\t\tparameterPackageNames[i] = type.qualifiedPackageName();\r", "+\t\t\t\t\tparameterTypeNames[i] = type.qualifiedSourceName();\r", "+\t\t\t\t}\r", "+\t\t\t\tchar[] completion = TypeConstants.NoChar;\r", "+\t\t\t\t// nothing to insert - do not want to replace the existing selector & arguments\r", "+\t\t\t\tif (source == null\r", "+\t\t\t\t\t|| source.length <= endPosition\r", "+\t\t\t\t\t|| source[endPosition] != ')')\r", "+\t\t\t\t\tcompletion = new char[] { ')' };\r", "+\t\t\t\trequestor.acceptMethod(\r", "+\t\t\t\t\tcurrentType.qualifiedPackageName(),\r", "+\t\t\t\t\tcurrentType.qualifiedSourceName(),\r", "+\t\t\t\t\tcurrentType.sourceName(),\r", "+\t\t\t\t\tparameterPackageNames,\r", "+\t\t\t\t\tparameterTypeNames,\r", "+\t\t\t\t\tTypeConstants.NoChar,\r", "+\t\t\t\t\tTypeConstants.NoChar,\r", "+\t\t\t\t\tcompletion,\r", "+\t\t\t\t\tconstructor.modifiers,\r", "+\t\t\t\t\tendPosition,\r", "+\t\t\t\t\tendPosition);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf4e53d9feb678b0e7c91c0e9178c18b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "38f6b373c5a9013946ee85fd40478f7474f23c8b", "commitAfterChange": "735ec08d01cb739d2750c79098bb1ec5f311fb83", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall)", "signatureAfterChange": " \tprivate void findLocalMethods( \t\tchar[] methodName, \t\tTypeBinding[] argTypes, \t\tMethodBinding[] methods, \t\tScope scope, \t\tObjectVector methodsFound, \t\tboolean onlyStaticMethods, \t\tboolean exactMatch, \t\tReferenceBinding receiverType, \t\tInvocationSite invocationSite, \t\tScope invocationScope, \t\tboolean implicitCall, \t\tboolean superCall)", "diff": ["-\t\tboolean implicitCall) {", "+\t\tboolean implicitCall,", "+\t\tboolean superCall) {", "+", "+\t\t\tif(superCall && method.isAbstract()) {", "+\t\t\t\tmethodsFound.add(new Object[]{method, receiverType});", "+\t\t\t\tcontinue next;", "+\t\t\t}"]}], "num": 19805}
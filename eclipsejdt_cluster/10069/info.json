{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a25c55ac9becc5184cee294e05a811bc", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20a9923673bd03f205668810cae94e4c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "54636126e97a957a9925b609910f59ea39210fc8", "commitAfterChange": "917603919e9d38772fd63709feb3bbda7696f523", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprivate TextEdit formatJavadoc(String source, int indentationLevel, String lineSeparator, IRegion[] regions)", "signatureAfterChange": " \tprivate TextEdit formatComment(int kind, String source, int indentationLevel, String lineSeparator, IRegion[] regions)", "diff": ["+\t */", "+\tprivate TextEdit formatComment(int kind, String source, int indentationLevel, String lineSeparator, IRegion[] regions) {", "+\t\tObject oldOption = oldCommentFormatOption();", "+\t\tboolean isFormattingComments = false;", "+\t\tif (oldOption == null) {", "+\t\t\tswitch (kind & K_MASK) {", "+\t\t\t\tcase K_SINGLE_LINE_COMMENT:", "+\t\t\t\t\tisFormattingComments = DefaultCodeFormatterConstants.TRUE.equals(this.options.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_FORMAT_LINE_COMMENT));", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase K_MULTI_LINE_COMMENT:", "+\t\t\t\t\tisFormattingComments = DefaultCodeFormatterConstants.TRUE.equals(this.options.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_FORMAT_BLOCK_COMMENT));", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase K_JAVA_DOC:", "+\t\t\t\t\tisFormattingComments = DefaultCodeFormatterConstants.TRUE.equals(this.options.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_FORMAT_JAVADOC_COMMENT));", "+\t\t\t}", "+\t\t} else {", "+\t\t\tisFormattingComments = DefaultCodeFormatterConstants.TRUE.equals(oldOption);", "+\t\t}", "+\t\tif (isFormattingComments) {", "+\t\t\tif (lineSeparator != null) {", "+\t\t\t\tthis.preferences.line_separator = lineSeparator;", "+\t\t\t} else {", "+\t\t\t\tthis.preferences.line_separator = Util.LINE_SEPARATOR;", "+\t\t\t}", "+\t\t\tthis.preferences.initial_indentation_level = indentationLevel;", "+\t\t\tif (this.codeSnippetParsingUtil == null) this.codeSnippetParsingUtil = new CodeSnippetParsingUtil();", "+\t\t\tthis.codeSnippetParsingUtil.parseCompilationUnit(source.toCharArray(), getDefaultCompilerOptions(), true);", "+\t\t\tthis.newCodeFormatter = new CodeFormatterVisitor(this.preferences, this.options, regions, this.codeSnippetParsingUtil, true);", "+\t\t\tIRegion coveredRegion = getCoveredRegion(regions);", "+\t\t\tint start = coveredRegion.getOffset();", "+\t\t\tint end = start + coveredRegion.getLength();", "+\t\t\tthis.newCodeFormatter.formatComment(kind, source, start, end, indentationLevel);", "+\t\t\treturn this.newCodeFormatter.scribe.getRootEdit();", "+\t\t}", "+\t\treturn null;", "-\t */", "-\tprivate TextEdit formatJavadoc(String source, int indentationLevel, String lineSeparator, IRegion[] regions) {", "-\t\tObject oldOption = oldCommentFormatOption();", "-\t\tboolean isFormattingComments = oldOption == null", "-\t\t\t? DefaultCodeFormatterConstants.TRUE.equals(this.options.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_FORMAT_JAVADOC_COMMENT))", "-\t\t\t: DefaultCodeFormatterConstants.TRUE.equals(oldOption);", "-\t\tif (isFormattingComments) {", "-\t\t\tif (lineSeparator != null) {", "-\t\t\t\tthis.preferences.line_separator = lineSeparator;", "-\t\t\t} else {", "-\t\t\t\tthis.preferences.line_separator = Util.LINE_SEPARATOR;", "-\t\t\t}", "-\t\t\tthis.preferences.initial_indentation_level = indentationLevel;", "-\t\t\tif (this.codeSnippetParsingUtil == null) this.codeSnippetParsingUtil = new CodeSnippetParsingUtil();", "-\t\t\tthis.codeSnippetParsingUtil.parseCompilationUnit(source.toCharArray(), getDefaultCompilerOptions(), true);", "-\t\t\tthis.newCodeFormatter = new CodeFormatterVisitor(this.preferences, this.options, regions, this.codeSnippetParsingUtil, true);", "-\t\t\tIRegion coveredRegion = getCoveredRegion(regions);", "-\t\t\tint start = coveredRegion.getOffset();", "-\t\t\tint end = start + coveredRegion.getLength();", "-\t\t\tthis.newCodeFormatter.format(source, start, end, indentationLevel);", "-\t\t\treturn this.newCodeFormatter.scribe.getRootEdit();", "-\t\t}", "-\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4589c35620bdcfeb50d893f83dc286b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java", "commitBeforeChange": "fe340d4e08886c2e5ab7c8b78c5aa34503b63a80", "commitAfterChange": "5c4eafbe7595640e5dc9f4b4ddb502602d61de2e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate TextEdit formatComment(int kind, String source, int indentationLevel, String lineSeparator, int offset, int length)", "signatureAfterChange": "  \tprivate TextEdit formatComment(int kind, String source, int indentationLevel, String lineSeparator, int offset, int length)", "diff": ["-\t\tfinal boolean isFormattingComments = DefaultCodeFormatterConstants.TRUE.equals(this.options.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_FORMAT));", "+\t\tboolean isFormattingComments = false;", "+\t\tswitch (kind) {", "+\t\t\tcase CodeFormatter.K_SINGLE_LINE_COMMENT:", "+\t\t\t\tisFormattingComments = DefaultCodeFormatterConstants.TRUE.equals(this.options.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_FORMAT_LINE_COMMENT));", "+\t\t\t\tbreak;", "+\t\t\tcase CodeFormatter.K_MULTI_LINE_COMMENT:", "+\t\t\t\tisFormattingComments = DefaultCodeFormatterConstants.TRUE.equals(this.options.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_FORMAT_BLOCK_COMMENT));", "+\t\t\t\tbreak;", "+\t\t\tcase CodeFormatter.K_JAVA_DOC:", "+\t\t\t\tisFormattingComments = DefaultCodeFormatterConstants.TRUE.equals(this.options.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_FORMAT_JAVADOC_COMMENT));", "+\t\t}"]}], "num": 10069}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63797dda8b043367dd46e6beddc1e978", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10a65d8eceaf2436f6dec024532c1ced", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "26e96a017b590b444a246c8fba814dc78fd85b77", "commitAfterChange": "80351fb8a54757084b1b27c49cb8b0584bf78834", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " \tpublic boolean match(SynchronizedStatement node, Object other)", "signatureAfterChange": " \tpublic boolean match(SuperMethodReference node, Object other)", "diff": ["+\t */", "+\tpublic boolean match(SuperMethodReference node, Object other) {", "+\t\tif (!(other instanceof SuperMethodReference)) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tSuperMethodReference o = (SuperMethodReference) other;", "+\t\treturn (safeSubtreeMatch(node.getQualifier(), o.getQualifier())", "+\t\t\t\t&& safeSubtreeListMatch(node.typeArguments(), o.typeArguments())", "+\t\t\t\t&& safeSubtreeMatch(node.getName(), o.getName()));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2743e3ecd3b67891ea3f92c7828a9a1d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "8ff87d310a91c2a77c65ad68bb4b1fd94425fd85", "commitAfterChange": "dbf8a869161361178e399dd7e18a85b9a48bde74", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tpublic boolean match(StringLiteral node, Object other)", "signatureAfterChange": " \tpublic boolean match(ParameterizedType node, Object other)", "diff": ["+\t */", "+\tpublic boolean match(ParameterizedType node, Object other) {", "+\t\tif (!(other instanceof ParameterizedType)) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tParameterizedType o = (ParameterizedType) other;", "+\t\treturn safeSubtreeMatch(node.getName(), o.getName())", "+\t\t\t\t&& safeSubtreeListMatch(node.typeArguments(), o.typeArguments());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d75e8bd44af2c3ba9d0c701558686c9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "904e81d11d3fc634ae2d9d861dc6c73c9ea81e03", "commitAfterChange": "2fce9fdec7d24fd4985bfaa8a4da9bdc5aff2660", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " \tpublic boolean match(TypeLiteral node, Object other)", "signatureAfterChange": " \tpublic boolean match(TagElement node, Object other)", "diff": ["+\t */", "+\tpublic boolean match(TagElement node, Object other) {", "+\t\tif (!(other instanceof TagElement)) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tTagElement o = (TagElement) other;", "+\t\treturn (", "+\t\t\t\tsafeEquals(node.getTagName(), o.getTagName())", "+\t\t\t\t&& safeSubtreeListMatch(node.fragments(), o.fragments()));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bb6359cedfe3f41ca06374829e1fa79", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java", "commitBeforeChange": "e6029c8b1adfe1296ee554ed42f00e5a663cecbf", "commitAfterChange": "d3d92e370789aaaed8a46c804d74e3cb2b4bb167", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " \tpublic boolean match(ParameterizedType node, Object other)", "signatureAfterChange": " \tpublic boolean match(PackageQualifiedType node, Object other)", "diff": ["+\t */", "+\tpublic boolean match(PackageQualifiedType node, Object other) {", "+\t\tif (!(other instanceof PackageQualifiedType)) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tPackageQualifiedType o = (PackageQualifiedType) other;", "+\t\treturn safeSubtreeMatch(node.getQualifier(), o.getQualifier())", "+\t\t\t\t&& safeSubtreeListMatch(node.annotations(), o.annotations())", "+\t\t\t\t&& safeSubtreeMatch(node.getName(), o.getName());", "+\t}"]}], "num": 24252}
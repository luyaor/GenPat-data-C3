{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "731f526ac9d0c31923c61993c5188238", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cea586d9cbb2fd0328d40218e900079", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 284, "methodNumberAfterChange": 231, "signatureBeforeChange": " protected void consumeTypeAnnotation (boolean markAsUnattached)", "signatureAfterChange": " protected void consumeTypeAnnotation()", "diff": ["+protected void consumeTypeAnnotation() {", "+\tif (!this.statementRecoveryActivated &&", "+\t\t\tthis.options.sourceLevel < ClassFileConstants.JDK1_8 &&", "+\t\tAnnotation annotation = this.typeAnnotationStack[this.typeAnnotationPtr];", "-}", "-protected void consumeTypeAnnotation (boolean markAsUnattached) {", "-\tif(!this.statementRecoveryActivated &&", "-\t\t\tthis.options.sourceLevel <= ClassFileConstants.JDK1_7 &&", "-\t\t\tthis.lastErrorEndPositionBeforeRecovery < this.scanner.currentPosition) {", "-\t\tproblemReporter().invalidUsageOfTypeAnnotations((Annotation) this.expressionStack[this.expressionPtr]);", "-\t}", "-\tthis.expressionLengthPtr --;", "-\tAnnotation annotation = (Annotation) this.expressionStack[this.expressionPtr--];", "-\tpushOnTypeAnnotationStack(annotation);", "-\tif (markAsUnattached) {", "-\t\tif (this.unattachedAnnotationPtr == -1) {", "-\t\t\tthis.unattachedAnnotationPtr = this.typeAnnotationPtr;", "-\t\t} else {", "-\t\t\tthis.typeAnnotationLengthStack[--this.typeAnnotationLengthPtr]++;", "-\t\t}", "-\t} ", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a135c61d3d91c11d1e4539ecf2944a12", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a", "commitAfterChange": "cc1c110e9641a2cecfab702ac9383376aefe030a", "methodNumberBeforeChange": 237, "methodNumberAfterChange": 279, "signatureBeforeChange": " protected void consumePotentialNameArrayType ()", "signatureAfterChange": " protected void consumeNonTypeUseName()", "diff": ["-protected void consumePotentialNameArrayType () {", "-\t", "-\t// FormalParameter ::= Modifiersopt Name DimsoptAnnotsopt PotentialNameArray VariableDeclaratorId", "-\t// FormalParameter ::= Modifiersopt Name DimsoptAnnotsopt PotentialNameArray '...' VariableDeclaratorId", "-\t// PotentialNameArray -> $empty", "-\t// Dimensions including lack of have been pushed appropriately by action attached to DimsoptAnnotsopt", "-\tpushOnGenericsLengthStack(0); // handle type arguments", "-\tpushOnGenericsIdentifiersLengthStack(this.identifierLengthStack[this.identifierLengthPtr]);", "+protected void consumeNonTypeUseName() { // https://bugs.eclipse.org/bugs/show_bug.cgi?id=383596", "+\t// NonTypeUseName ::= $empty", "+\t// We can get here with type annotation stack empty, because completion parser manipulates the identifier stacks even without rule reduction. See completionIdentifierCheck", "+\tfor (int i = this.identifierLengthStack[this.identifierLengthPtr]; i > 0 && this.typeAnnotationLengthPtr >= 0; --i) {", "+\t\tint length = this.typeAnnotationLengthStack[this.typeAnnotationLengthPtr--];", "+\t\tAnnotation [] typeAnnotations;", "+\t\tif (length != 0) {", "+\t\t\t\t\t(this.typeAnnotationPtr -= length) + 1,", "+\t\t\t\t\ttypeAnnotations = new Annotation[length],", "+\t\t\t\t\tlength);", "+\t\t\tproblemReporter().misplacedTypeAnnotations(typeAnnotations[0], typeAnnotations[typeAnnotations.length - 1]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2b9e9e9b735b00a4639e83a42223a8b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/NonNullDefaultAwareTypeAnnotationWalker.java", "commitBeforeChange": "f69ff4a662bad4fd89b88d240101a9ac63e64955", "commitAfterChange": "7c493ed6b34d98f52ff4fc8520fcd8662e5ffd91", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \t@Override \tpublic IBinaryAnnotation[] getAnnotationsAtCursor(int currentTypeId)", "signatureAfterChange": "  \t@Override \tpublic IBinaryAnnotation[] getAnnotationsAtCursor(int currentTypeId)", "diff": ["-\t\tif (this.atDefaultLocation && ", "+\t\tif (this.atDefaultLocation &&", "+\t\t\t\t!(currentTypeId == -1) && // never apply default on type variable use or wildcard", "-\t\t\tint len = normalAnnotations.length;", "-\t\t\tIBinaryAnnotation[] newAnnots = new IBinaryAnnotation[len+1];", "-\t\t\tSystem.arraycopy(normalAnnotations, 0, newAnnots, 0, len);", "-\t\t\tnewAnnots[len] = this.nonNullAnnotation;", "-\t\t\treturn newAnnots;", "+\t\t\tif (this.environment.containsNullTypeAnnotation(normalAnnotations)) {", "+\t\t\t\t// no default annotation if explicit annotation exists", "+\t\t\t\treturn normalAnnotations;", "+\t\t\t} else {", "+\t\t\t\t// merge:", "+\t\t\t\tint len = normalAnnotations.length;", "+\t\t\t\tIBinaryAnnotation[] newAnnots = new IBinaryAnnotation[len+1];", "+\t\t\t\tSystem.arraycopy(normalAnnotations, 0, newAnnots, 0, len);", "+\t\t\t\tnewAnnots[len] = this.nonNullAnnotation;", "+\t\t\t\treturn newAnnots;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d03433d9de8ae62e6eefac118e99dbfb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java", "commitBeforeChange": "4152a87f3580e53749fa348690b4abc9a373bea9", "commitAfterChange": "517b8ee23b27e5d235651538485ef446b1c4d0e3", "methodNumberBeforeChange": 222, "methodNumberAfterChange": 222, "signatureBeforeChange": " protected void consumeMethodInvocationName()", "signatureAfterChange": " protected void consumeMethodInvocationName()", "diff": ["-\t\tint length = this.typeAnnotationLengthStack[this.typeAnnotationLengthPtr--];", "-\t\tAnnotation [] typeAnnotations;", "-\t\tif (length != 0) {", "-\t\t\tSystem.arraycopy(", "-\t\t\t\t\tthis.typeAnnotationStack,", "-\t\t\t\t\t(this.typeAnnotationPtr -= length) + 1,", "-\t\t\t\t\ttypeAnnotations = new Annotation[length],", "-\t\t\t\t\t0,", "-\t\t\t\t\tlength);", "-\t\t\tproblemReporter().misplacedTypeAnnotations(typeAnnotations[0], typeAnnotations[typeAnnotations.length - 1]);", "-\t\t}", "+\tint length = this.typeAnnotationLengthStack[this.typeAnnotationLengthPtr--];", "+\tAnnotation [] typeAnnotations;", "+\tif (length != 0) {", "+\t\tSystem.arraycopy(", "+\t\t\t\tthis.typeAnnotationStack,", "+\t\t\t\t(this.typeAnnotationPtr -= length) + 1,", "+\t\t\t\ttypeAnnotations = new Annotation[length],", "+\t\t\t\t0,", "+\t\t\t\tlength);", "+\t\tproblemReporter().misplacedTypeAnnotations(typeAnnotations[0], typeAnnotations[typeAnnotations.length - 1]);", "+\t}"]}], "num": 9564}
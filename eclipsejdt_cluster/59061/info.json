{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e45273977ed9f43b94e28389ddde1f45", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "060c943d367b516c77620ce686afbd3c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "52aadf84ad4c79f64e59f07a05239268e15539c0", "commitAfterChange": "edc37e94c3a8ff30574beb9cdf0696d92f661cd3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 8, "signatureBeforeChange": " public IProblemRequestor getProblemRequestor()", "signatureAfterChange": " \tpublic Object getElementInfo() throws JavaModelException", "diff": ["+\t */", "+\tpublic Object getElementInfo() throws JavaModelException {", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tboolean shouldPerformProblemDetection = false;", "+\t\tsynchronized(manager){", "+\t\t\tObject info = manager.getInfo(this);", "+\t\t\tif (info == null) {", "+\t\t\t\tshouldPerformProblemDetection = true;", "+\t\t\t}", "+\t\t}", "+\t\tObject info = super.getElementInfo(); // will populate if necessary", "+", "+\t\t// perform problem detection outside the JavaModelManager lock", "+\t\tif (this.problemRequestor != null && shouldPerformProblemDetection && this.problemRequestor.isActive()){", "+\t\t\tthis.problemRequestor.beginReporting();", "+\t\t\tCompilationUnitProblemFinder.process(this, this.problemRequestor, null); ", "+\t\t\tthis.problemRequestor.endReporting();", "+\t\t}\t\t", "+\t\treturn info;", "+\t}", "- */", "-public IProblemRequestor getProblemRequestor(){", "-\treturn this.problemRequestor;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44f1793432a9b6dbffa8420bb7dee1bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/WorkingCopy.java", "commitBeforeChange": "45ea0c0963e46daaae31261dbb16943dd8fe31f9", "commitAfterChange": "2eac8e5fe7a3ec66583085fd9b264a552c7df520", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic Object getElementInfo() throws JavaModelException", "signatureAfterChange": " \tpublic Object getElementInfo() throws JavaModelException", "diff": ["-\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\tboolean shouldPerformProblemDetection = false;", "-\t\tsynchronized(manager){", "-\t\t\tObject info = manager.getInfo(this);", "-\t\t\tif (info == null) {", "-\t\t\t\tshouldPerformProblemDetection = true;", "-\t\t\t}", "-\t\t}", "-\t\tObject info = super.getElementInfo(); // will populate if necessary", "+\t\tthis.computeProblems = this.problemRequestor != null && this.problemRequestor.isActive();", "-\t\t// perform problem detection outside the JavaModelManager lock", "-\t\tif (this.problemRequestor != null && shouldPerformProblemDetection && this.problemRequestor.isActive()){", "-\t\t\tthis.problemRequestor.beginReporting();", "-\t\t\tCompilationUnitProblemFinder.process(this, this.problemRequestor, null); ", "-\t\t\tthis.problemRequestor.endReporting();", "-\t\t}\t\t", "+\t\tWorkingCopyElementInfo info = null;", "+\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "+\t\tsynchronized(manager){", "+\t\t\tinfo = (WorkingCopyElementInfo)super.getElementInfo(); // will populate if necessary", "+\t\t}", "+", "+\t\t// report problems outside the JavaModelManager lock", "+\t\treportProblemsIfNeeded(info);", "+\t\t", "+\t}"]}], "num": 59061}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c909244a1e84995ef594f19dbacf2e6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "944d8a975fe759ed0f901a60aeb0409c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceModelTests.java", "commitBeforeChange": "4119a65befb0f1b826133c8b40790cea36510774", "commitAfterChange": "199c84f2cae998bf19dec5ba0cb5f860d990b3fa", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void testNameLookupFindKnownSecondaryType() throws CoreException", "signatureAfterChange": " public void testNameLookupFindKnownSecondaryType() throws CoreException", "diff": ["-\tif (WARMUP_COUNT > 0) {", "-\t\tfor (int i=0; i<WARMUP_COUNT; i++) {", "-\t\t\tNameLookup nameLookup = BIG_PROJECT.newNameLookup(DefaultWorkingCopyOwner.PRIMARY);", "-\t\t\tIType type = nameLookup.findType(fullQualifiedName, false /*full match*/, NameLookup.ACCEPT_ALL);", "-\t\t\tif (LOG_VERSION.compareTo(\"v_623\") > 0) {", "-\t\t\t\tassertNotNull(\"We should find type '\"+fullQualifiedName+\"' in project \"+BIG_PROJECT_NAME, type);", "-\t\t\t}", "+\tfor (int i=0; i<WARMUP_COUNT; i++) {", "+\t\tNameLookup nameLookup = BIG_PROJECT.newNameLookup(DefaultWorkingCopyOwner.PRIMARY);", "+\t\tIType type = nameLookup.findType(fullQualifiedName, false /*full match*/, NameLookup.ACCEPT_ALL);", "+\t\tif (i==0 && LOG_VERSION.compareTo(\"v_623\") > 0) {", "+\t\t\tassertNotNull(\"We should find type '\"+fullQualifiedName+\"' in project \"+BIG_PROJECT_NAME, type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1b163474967943dc1a81ac8d052f575", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java", "commitBeforeChange": "89847a0c1a06590b3bbeee9528d77f57e2f8453c", "commitAfterChange": "25fdae674503d8fe99a15a82b42402cfb3039bdc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic TypeBinding checkFieldAccess(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding checkFieldAccess(BlockScope scope)", "diff": ["-\t\t\t&& methodScope.enclosingSourceType() == fieldBinding.declaringClass", "-\t\t\t&& methodScope.lastVisibleFieldID >= 0", "-\t\t\t&& fieldBinding.id >= methodScope.lastVisibleFieldID) {", "-\t\t\t//if the field is static and ms is not .... then it is valid", "-\t\t\tif (!fieldBinding.isStatic() || methodScope.isStatic)", "-\t\t\t\tscope.problemReporter().forwardReference(this, 0, methodScope.enclosingSourceType());", "+\t\t\t\t&& methodScope.enclosingSourceType() == fieldBinding.original().declaringClass", "+\t\t\t\t&& methodScope.lastVisibleFieldID >= 0", "+\t\t\t\t&& fieldBinding.id >= methodScope.lastVisibleFieldID", "+\t\t\t\t&& (!fieldBinding.isStatic() || methodScope.isStatic)) {", "+\t\t\tscope.problemReporter().forwardReference(this, 0, methodScope.enclosingSourceType());", "-\t\t//====================================================", "-\t"]}], "num": 36120}
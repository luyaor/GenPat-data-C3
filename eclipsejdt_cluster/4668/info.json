{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c489bcaadee8bdee707188a426f40f1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e5c331237bce32672cfd390c4eaf3d2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetEvaluator.java", "commitBeforeChange": "c99e3bd7df24eb7b0133eb18cfef3f12a0f60a4d", "commitAfterChange": "639c767e46ba1affc29fe53d2703bf4af137793b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " Compiler getCompiler(ICompilerRequestor compilerRequestor)", "signatureAfterChange": " Compiler getCompiler(ICompilerRequestor compilerRequestor)", "diff": ["+\t\tCompilerOptions compilerOptions = new CompilerOptions(this.options);", "+\t\tcompilerOptions.performStatementsRecovery = true;", "-\t\t\t\tthis.options, ", "+\t\t\t\tcompilerOptions, ", "+\t\tCompilerOptions compilerOptions = new CompilerOptions(this.options);", "+\t\tcompilerOptions.performStatementsRecovery = true;", "-\t\t\tthis.options, ", "+\t\t\tcompilerOptions, ", "-\t\t\tthis.problemFactory,", "-\t\t\ttrue);", "+\t\t\tthis.problemFactory);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9577f98eb1d7c1307f9ede91219da97c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java", "commitBeforeChange": "c99e3bd7df24eb7b0133eb18cfef3f12a0f60a4d", "commitAfterChange": "639c767e46ba1affc29fe53d2703bf4af137793b", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " \t \tprotected void runConformTest( \t\tString[] testFiles,  \t\tString expectedSuccessOutputString,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tString[] vmArguments,  \t\tMap customOptions, \t\tICompilerRequestor clientRequestor, \t\tboolean skipJavac)", "signatureAfterChange": " \t \tprotected void runConformTest( \t\tString[] testFiles,  \t\tString expectedSuccessOutputString,  \t\tString[] classLib, \t\tboolean shouldFlushOutputDirectory,  \t\tString[] vmArguments,  \t\tMap customOptions, \t\tICompilerRequestor clientRequestor, \t\tboolean skipJavac)", "diff": ["+\t\t\tCompilerOptions compilerOptions = new CompilerOptions(options);", "+\t\t\tcompilerOptions.performStatementsRecovery = false;", "-\t\t\t\t\toptions,", "+\t\t\t\t\tcompilerOptions,", "-\t\t\t\t\tproblemFactory,", "-\t\t\t\t\tfalse);", "-\t\t\tbatchCompiler.options.produceReferenceInfo = true;", "+\t\t\t\t\tproblemFactory);", "+\t\t\tcompilerOptions.produceReferenceInfo = true;"]}], "num": 4668}
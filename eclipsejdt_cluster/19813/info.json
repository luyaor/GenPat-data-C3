{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c64242e2c963c1de26a5fdc2f755b986", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "192b9e1c96145266f15886f77341ca79", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "71bba81717c7a1fbd86b1422cf134703931a54cb", "commitAfterChange": "94e87775403a1be90933921189758fda2ba4fb6c", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 41, "signatureBeforeChange": " public boolean isCompatibleWith(TypeBinding otherType)", "signatureAfterChange": " public boolean isCompatibleWith0(TypeBinding otherType)", "diff": ["-    ", "+ */", "+public boolean isCompatibleWith0(TypeBinding otherType) {", "-\t// equivalence may allow compatibility with array type through wildcard bound", "+\t// equivalence may allow compatibility with array type through wildcard", "+\t// bound", "-\t\t\treturn false; // should have passed equivalence check above if wildcard", "+\t\t\treturn false; // should have passed equivalence check above if", "+\t\t\t\t\t\t\t// wildcard", "-\t\t\t\t\t\treturn false; // should have passed equivalence check above if same erasure", "+\t\t\t\t\t\treturn false; // should have passed equivalence check", "+\t\t\t\t\t\t\t\t\t\t// above if same erasure", "-\t\t\tif (this.isInterface())  // Explicit conversion from an interface to a class is not allowed", "+\t\t\tif (this.isInterface())  // Explicit conversion from an interface", "+\t\t\t\t\t\t\t\t\t\t// to a class is not allowed"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2ae3ecdb352ca1f5332909a7bf1a7c4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java", "commitBeforeChange": "71bba81717c7a1fbd86b1422cf134703931a54cb", "commitAfterChange": "94e87775403a1be90933921189758fda2ba4fb6c", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public boolean isCompatibleWith(TypeBinding otherType)", "signatureAfterChange": " public boolean isCompatibleWith(TypeBinding otherType)", "diff": ["-    ", "+\tif (otherType == this)", "+\t\treturn true;", "+\tif (otherType.id == TypeIds.T_JavaLangObject)", "+\t\treturn true;", "+\tObject result;", "+\tif (this.compatibleCache == null) {", "+\t\tthis.compatibleCache = new SimpleLookupTable(3);", "+\t\tresult = null;", "+\t} else {", "+\t\tresult = this.compatibleCache.get(otherType);", "+\t\tif (result != null) {", "+\t\t\treturn result == Boolean.TRUE;", "+\t\t}", "+\t}", "+\tthis.compatibleCache.put(otherType, Boolean.FALSE); // protect from recursive call", "+\tif (isCompatibleWith0(otherType)) {", "+\t\tthis.compatibleCache.put(otherType, Boolean.TRUE);", "+\t\treturn true;", "+\t}", "+\treturn false;", "+}", "-\t// equivalence may allow compatibility with array type through wildcard bound", "-\t\t\treturn false; // should have passed equivalence check above if wildcard", "-\t\t\t\t\t\treturn false; // should have passed equivalence check above if same erasure", "-\t\t\tif (this.isInterface())  // Explicit conversion from an interface to a class is not allowed"]}], "num": 19813}
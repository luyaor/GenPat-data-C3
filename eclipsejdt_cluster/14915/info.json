{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a45d8f2aef258892c92957ef9696387", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6609194691456572cdb06c7a2e18d46d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathDirectory.java", "commitBeforeChange": "68ccb4031ed08b4fe5c4be466185d9f98028d52b", "commitAfterChange": "b97b84a6370469b0432a4c45b3f13c4f7bb62ce7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public NameEnvironmentAnswer findClass(char[] typeName, String qualifiedPackageName, String qualifiedBinaryFileName)", "signatureAfterChange": " public NameEnvironmentAnswer findClass(char[] typeName, String qualifiedPackageName, String qualifiedBinaryFileName)", "diff": ["-\t\t\treturn new NameEnvironmentAnswer(new CompilationUnit(null, fullSourcePath, this.encoding), null/* TODO no access restriction*/);", "-", "+\t\t\treturn new NameEnvironmentAnswer(new CompilationUnit(null,", "+\t\t\t\t\tfullSourcePath, this.encoding),", "+\t\t\t\t\tfetchAccessRestriction(qualifiedBinaryFileName));", "-\t\t\treturn new NameEnvironmentAnswer(new CompilationUnit(null, fullSourcePath, this.encoding), null/* TODO no access restriction*/);", "+\t\t\treturn new NameEnvironmentAnswer(new CompilationUnit(null,", "+\t\t\t\t\tfullSourcePath, this.encoding),", "+\t\t\t\t\tfetchAccessRestriction(qualifiedBinaryFileName));", "-\t\t\tClassFileReader reader = ClassFileReader.read(this.path + qualifiedBinaryFileName);", "-\t\t\tif (reader != null) return new NameEnvironmentAnswer(reader, null/* TODO no access restriction*/);", "-\t\t} catch (Exception e) { ", "+\t\t\tClassFileReader reader = ClassFileReader.read(this.path", "+\t\t\t\t\t+ qualifiedBinaryFileName);", "+\t\t\tif (reader != null)", "+\t\t\t\treturn new NameEnvironmentAnswer(", "+\t\t\t\t\t\treader,", "+\t\t\t\t\t\tfetchAccessRestriction(qualifiedBinaryFileName));", "+\t\t} catch (Exception e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f39252ffd3eee773a1b888d3b21946f0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java", "commitBeforeChange": "e50fa330bbb302e8ef44446c0c3afc64880dfa01", "commitAfterChange": "3a514d6cf7a163df7c9aa1b24e69e8f3a5b39e3c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  static State read(IProject project, DataInputStream in) throws IOException", "signatureAfterChange": "  static State read(IProject project, DataInputStream in) throws IOException", "diff": ["-\t\t\t\tnewState.binaryLocations[i] = ClasspathLocation.forBinaryFolder(outputFolder, in.readBoolean(), null /* TODO store restriction in build state */);", "+\t\t\t\tnewState.binaryLocations[i] = ClasspathLocation.forBinaryFolder(outputFolder, in.readBoolean(), readRestriction(in));", "-\t\t\t\tnewState.binaryLocations[i] = ClasspathLocation.forLibrary(in.readUTF(), null /* TODO store restriction in build state */);", "+\t\t\t\tnewState.binaryLocations[i] = ClasspathLocation.forLibrary(in.readUTF(), readRestriction(in));", "-\t\t\t\tnewState.binaryLocations[i] = ClasspathLocation.forLibrary(root.getFile(new Path(in.readUTF())), null /* TODO store restriction in build state */);", "+\t\t\t\tnewState.binaryLocations[i] = ClasspathLocation.forLibrary(root.getFile(new Path(in.readUTF())), readRestriction(in));"]}], "num": 14915}
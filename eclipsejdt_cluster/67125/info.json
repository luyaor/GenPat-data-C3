{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0e66a3171e52e5c056677dbf3ca98f8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0df7ea57391c00053183359270f45c88", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void test012_compiler_problems_tuning()", "signatureAfterChange": " public void test012_compiler_problems_tuning()", "diff": ["+\t\texpectedProblemAttributes.put(\"AssignmentToMultiCatchParameter\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AssignmentToResource\", SKIP);", "+\t\texpectedProblemAttributes.put(\"AutoManagedResourceNotBelow17\", SKIP);", "+\t\texpectedProblemAttributes.put(\"BinaryLiteralNotBelow17\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CannotInferElidedTypes\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CannotUseDiamondWithAnonymousClasses\", SKIP);", "+\t\texpectedProblemAttributes.put(\"CannotUseDiamondWithExplicitTypeArguments\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DiamondNotBelow17\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateInheritedMethods\", SKIP);", "-\t\texpectedProblemAttributes.put(\"DuplicateTypes\", SKIP);", "+\t\texpectedProblemAttributes.put(\"DuplicateTypes\", SKIP);", "-\t\texpectedProblemAttributes.put(\"FinallyMustCompleteNormally\", new ProblemAttributes(JavaCore.COMPILER_PB_FINALLY_BLOCK_NOT_COMPLETING));", "+\t\texpectedProblemAttributes.put(\"FinallyMustCompleteNormally\", new ProblemAttributes(JavaCore.COMPILER_PB_FINALLY_BLOCK_NOT_COMPLETING));", "+\t\texpectedProblemAttributes.put(\"IllegalHexaLiteral\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IllegalUnderscorePosition\", SKIP);", "+\t\texpectedProblemAttributes.put(\"IncorrectSwitchType17\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidBinary\", SKIP);", "+\t\texpectedProblemAttributes.put(\"InvalidUnionTypeReferenceSequence\", SKIP);", "+\t\texpectedProblemAttributes.put(\"JavadocParameterMismatch\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocParameterMismatch\", new ProblemAttributes(JavaCore.COMPILER_PB_INVALID_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"LocalVariableCannotBeNull\", SKIP);", "+\t\texpectedProblemAttributes.put(\"LocalVariableCannotBeNull\", SKIP);", "-\t\texpectedProblemAttributes.put(\"MethodCanBeStatic\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_STATIC_ON_METHOD));", "+\t\texpectedProblemAttributes.put(\"MethodCanBeStatic\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_STATIC_ON_METHOD));", "-\t\texpectedProblemAttributes.put(\"MissingOverrideAnnotationForInterfaceMethodImplementation\", SKIP);", "+\t\texpectedProblemAttributes.put(\"MissingOverrideAnnotationForInterfaceMethodImplementation\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_OVERRIDE_ANNOTATION));", "+\t\texpectedProblemAttributes.put(\"MultiCatchNotBelow17\", SKIP);", "+\t\texpectedProblemAttributes.put(\"ParameterMismatch\", SKIP);", "-\t\texpectedProblemAttributes.put(\"ParameterMismatch\", SKIP);", "+\t\texpectedProblemAttributes.put(\"PolymorphicMethodNotBelow17\", SKIP);", "+\t\texpectedProblemAttributes.put(\"PotentialHeapPollutionFromVararg\", new ProblemAttributes(JavaCore.COMPILER_PB_UNCHECKED_TYPE_OPERATION));", "+\t\texpectedProblemAttributes.put(\"RedundantSpecificationOfTypeArguments\", new ProblemAttributes(JavaCore.COMPILER_PB_REDUNDANT_TYPE_ARGUMENTS));", "+\t\texpectedProblemAttributes.put(\"ResourceHasToImplementAutoCloseable\", SKIP);", "+\t\texpectedProblemAttributes.put(\"SafeVarargsOnFixedArityMethod\", SKIP);", "+\t\texpectedProblemAttributes.put(\"SafeVarargsOnNonFinalInstanceMethod\", SKIP);", "-\t\texpectedProblemAttributes.put(\"SuperclassAmbiguous\", SKIP);", "+\t\texpectedProblemAttributes.put(\"SuperInterfaceMustBeAnInterface\", SKIP);", "+\t\texpectedProblemAttributes.put(\"SuperInterfacesCollide\", SKIP);", "+\t\texpectedProblemAttributes.put(\"SuperTypeUsingWildcard\", SKIP);", "+\t\texpectedProblemAttributes.put(\"SuperclassAmbiguous\", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_HASHCODE_METHOD));", "-\t\texpectedProblemAttributes.put(\"SuperInterfaceMustBeAnInterface\", SKIP);", "-\t\texpectedProblemAttributes.put(\"SuperInterfacesCollide\", SKIP);", "-\t\texpectedProblemAttributes.put(\"SuperTypeUsingWildcard\", SKIP);", "+\t\texpectedProblemAttributes.put(\"SwitchOnStringsNotBelow17\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UnderscoresInLiteralsNotBelow17\", SKIP);", "+\t\texpectedProblemAttributes.put(\"UnhandledExceptionOnAutoClose\", SKIP);", "+\t\tArrays.sort(fields, new Comparator() {", "+\t\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\t\tField field1 = (Field) o1;", "+\t\t\t\tField field2 = (Field) o2;", "+\t\t\t\treturn field1.getName().compareTo(field2.getName());", "+\t\t\t}", "+\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92a140beb8f0730e41491dcc4ac3cd4f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java", "commitBeforeChange": "b48948c440f4082a22e31c203db0c29a35ec4b75", "commitAfterChange": "699cc351076b7c5897a886d674772d111233f0a3", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void test011_problem_categories()", "signatureAfterChange": " public void test011_problem_categories()", "diff": ["+\t\texpectedProblemAttributes.put(\"AssignmentToMultiCatchParameter\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"AssignmentToResource\", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));", "+\t\texpectedProblemAttributes.put(\"AutoManagedResourceNotBelow17\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"BinaryLiteralNotBelow17\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"CannotInferElidedTypes\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"CannotUseDiamondWithAnonymousClasses\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"CannotUseDiamondWithExplicitTypeArguments\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"DiamondNotBelow17\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"DuplicateInheritedMethods\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"DuplicateTypes\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"DuplicateTypes\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"FinallyMustCompleteNormally\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"FinallyMustCompleteNormally\", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));", "+\t\texpectedProblemAttributes.put(\"IllegalHexaLiteral\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"IllegalUnderscorePosition\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"IncorrectSwitchType17\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"InvalidBinary\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"InvalidUnionTypeReferenceSequence\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"JavadocParameterMismatch\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"JavadocParameterMismatch\", new ProblemAttributes(CategorizedProblem.CAT_JAVADOC));", "-\t\texpectedProblemAttributes.put(\"LocalVariableCannotBeNull\", DEPRECATED);", "+\t\texpectedProblemAttributes.put(\"LocalVariableCannotBeNull\", DEPRECATED);", "-\t\texpectedProblemAttributes.put(\"MethodCanBeStatic\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "+\t\texpectedProblemAttributes.put(\"MethodCanBeStatic\", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));", "+\t\texpectedProblemAttributes.put(\"MultiCatchNotBelow17\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"ParameterMismatch\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "-\t\texpectedProblemAttributes.put(\"ParameterMismatch\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"PolymorphicMethodNotBelow17\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"PotentialHeapPollutionFromVararg\", new ProblemAttributes(CategorizedProblem.CAT_UNCHECKED_RAW));", "+\t\texpectedProblemAttributes.put(\"RedundantSpecificationOfTypeArguments\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "+\t\texpectedProblemAttributes.put(\"ResourceHasToImplementAutoCloseable\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"SafeVarargsOnFixedArityMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"SafeVarargsOnNonFinalInstanceMethod\", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));", "+\t\texpectedProblemAttributes.put(\"SuperInterfaceMustBeAnInterface\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"SuperInterfacesCollide\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"SuperTypeUsingWildcard\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"SuperInterfaceMustBeAnInterface\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"SuperInterfacesCollide\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"SuperTypeUsingWildcard\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"SwitchOnStringsNotBelow17\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "+\t\texpectedProblemAttributes.put(\"UnderscoresInLiteralsNotBelow17\", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));", "+\t\texpectedProblemAttributes.put(\"UnhandledExceptionOnAutoClose\", new ProblemAttributes(CategorizedProblem.CAT_TYPE));", "-\t\texpectedProblemAttributes.put(\"UnnecessaryOperator\", new ProblemAttributes(CategorizedProblem.CAT_UNNECESSARY_CODE));", "+\t\tArrays.sort(fields, new Comparator() {", "+\t\t\tpublic int compare(Object o1, Object o2) {", "+\t\t\t\tField field1 = (Field) o1;", "+\t\t\t\tField field2 = (Field) o2;", "+\t\t\t\treturn field1.getName().compareTo(field2.getName());", "+\t\t\t}", "+\t\t});"]}], "num": 67125}
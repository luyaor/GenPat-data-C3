{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b94bccee16f2ab923d929f6a380e4241", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "118b9ab37972e1102fe3948011600435", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "eaf368b1bbed77e5ac91194cb5cc62e7c3b2c07b", "commitAfterChange": "850c65069b948dc807fdf250e07cb482b9cf25c2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " public static void compile(String[] pathsAndContents, Map options, String outputPath)", "signatureAfterChange": " public static void compile(String[] pathsAndContents, Map options, String[] classpath, String outputPath)", "diff": ["+}", "+public static void compile(String[] pathsAndContents, Map options, String[] classpath, String outputPath) {", "-        INameEnvironment nameEnvironment = new FileSystem(getJavaClassLibs(), new String[] {}, null);", "+        String[] classLibs = getJavaClassLibs();", "+        if (classpath != null) {", "+        \tint length = classpath.length;", "+        \tint classLibsLength = classLibs.length;", "+        \tSystem.arraycopy(classpath, 0, classpath = new String[classLibsLength + length], classLibsLength, length);", "+        \tSystem.arraycopy(classLibs, 0, classpath, 0, classLibsLength);", "+        } else {", "+        \tclasspath = classLibs;", "+        }", "+        ", "+        INameEnvironment nameEnvironment = new FileSystem(classpath, new String[] {}, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a46abf14abd191d27dac86ca364e07ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java", "commitBeforeChange": "fdb8d62f1c901c375bd2aaf491776e68829346d4", "commitAfterChange": "abac83588fd8774146bd06b2319f52de11bc9846", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public static String[] concatWithClassLibs(String classpath, boolean inFront)", "signatureAfterChange": " public static String[] concatWithClassLibs(String[] classpaths, boolean inFront)", "diff": ["+public static String[] concatWithClassLibs(String[] classpaths, boolean inFront) {", "+\tString[] classLibs = getJavaClassLibs();", "+\tif (classpaths == null) return classLibs;", "+\tfinal int classLibsLength = classLibs.length;", "+\tfinal int classpathsLength = classpaths.length;", "+\tString[] defaultClassPaths = new String[classLibsLength + classpathsLength];", "+\tif (inFront) {", "+\t\tSystem.arraycopy(classLibs, 0, defaultClassPaths, classpathsLength, classLibsLength);", "+\t\tSystem.arraycopy(classpaths, 0, defaultClassPaths, 0, classpathsLength);", "+\t} else {", "+\t\tSystem.arraycopy(classLibs, 0, defaultClassPaths, 0, classLibsLength);", "+\t\tSystem.arraycopy(classpaths, 0, defaultClassPaths, classLibsLength, classpathsLength);", "+\t}", "+\tfor (int i = 0; i < classpathsLength; i++) {", "+\t\tFile file = new File(classpaths[i]);", "+\t\tif (!file.exists()) {", "+\t\t\tfile.mkdirs();", "+\t\t} ", "+\t}", "+\treturn defaultClassPaths;", "+}"]}], "num": 4186}
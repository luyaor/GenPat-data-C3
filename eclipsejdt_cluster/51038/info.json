{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "156abc9d01630b81a949b71891905d89", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a20b06df707c033688535591078cc533", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java", "commitBeforeChange": "78d5fdc50f5f830e3ca4f4da638f4848345c75c3", "commitAfterChange": "5f34da72aa868f837d52fa66e496232b2184cada", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "  \tpublic void parse(boolean pauseAfterFullyQualifiedName)", "signatureAfterChange": "  \tpublic void parse(boolean pauseAfterFullyQualifiedName)", "diff": ["-\t\tif (!this.parsingPaused) {", "-\t\t\t// fully qualified name", "-\t\t\tparseFullyQualifiedName();", "-\t\t\tif (pauseAfterFullyQualifiedName) {", "-\t\t\t\tthis.parsingPaused = true;", "+\t\ttry {", "+\t\t\tif (!this.parsingPaused) {", "+\t\t\t\t// fully qualified name", "+\t\t\t\tparseFullyQualifiedName();", "+\t\t\t\tif (pauseAfterFullyQualifiedName) {", "+\t\t\t\t\tthis.parsingPaused = true;", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (!hasTypeName()) {", "+\t\t\t\tconsumeKey();", "-\t\t}", "-\t\tif (!hasTypeName()) {", "-\t\t\tconsumeKey();", "-\t\t\treturn;", "-\t\t}", "-\t\tconsumeTopLevelType();", "-\t\tparseSecondaryType();", "-\t\tparseInnerType();", "-\t\t", "-\t\tif (this.scanner.isAtParametersStart()) {", "-\t\t\tthis.scanner.skipParametersStart();", "-\t\t\tif (this.scanner.isAtTypeParameterStart())\t{\t\t", "-\t\t\t\t// generic type", "-\t\t\t\tparseGenericType();", "-\t\t\t \t// skip \";>\"", "-\t\t\t \tthis.scanner.skipParametersEnd();", "-\t\t\t\t// local type in generic type", "-\t\t\t\tparseInnerType();", "-\t\t\t} else if (this.scanner.isAtTypeArgumentStart())", "-\t\t\t\t// parameterized type", "-\t\t\t\tparseParameterizedType(null/*top level type or member type with raw enclosing type*/, false/*no raw*/);", "-\t\t\telse if (this.scanner.isAtRawTypeEnd())", "-\t\t\t\t// raw type", "-\t\t\t\tparseRawType();", "-\t\t} else {", "-\t\t\t// non-generic type", "-\t\t\tconsumeNonGenericType();", "-\t\t}", "-\t\t", "-\t\tconsumeType();", "-\t\tthis.scanner.skipTypeEnd();", "-\t\t", "-\t\tif (this.scanner.isAtFieldOrMethodStart()) {", "-\t\t\tswitch (this.scanner.nextToken()) {", "- \t\t\t\tcase Scanner.FIELD:", "- \t\t\t\t\tparseField();", "- \t\t\t\t\treturn;", "- \t\t\t\tcase Scanner.METHOD:", "- \t\t\t\t\tparseMethod();", "- \t\t\t\t\tif (this.scanner.isAtLocalVariableStart()) {", "- \t\t\t\t\t\tparseLocalVariable();", "- \t\t\t\t\t} else if (this.scanner.isAtTypeVariableStart()) {", "-\t\t\t\t\t\tparseTypeVariable();", "-\t\t\t\t\t}", "-\t\t\t \t\tbreak;", "- \t\t\t\tdefault:", "- \t\t\t\t\tmalformedKey();", "- \t\t\t\t\treturn;", "+\t\t\tconsumeTopLevelType();", "+\t\t\tparseSecondaryType();", "+\t\t\tparseInnerType();", "+\t\t\t", "+\t\t\tif (this.scanner.isAtParametersStart()) {", "+\t\t\t\tthis.scanner.skipParametersStart();", "+\t\t\t\tif (this.scanner.isAtTypeParameterStart())\t{\t\t", "+\t\t\t\t\t// generic type", "+\t\t\t\t\tparseGenericType();", "+\t\t\t\t \t// skip \";>\"", "+\t\t\t\t \tthis.scanner.skipParametersEnd();", "+\t\t\t\t\t// local type in generic type", "+\t\t\t\t\tparseInnerType();", "+\t\t\t\t} else if (this.scanner.isAtTypeArgumentStart())", "+\t\t\t\t\t// parameterized type", "+\t\t\t\t\tparseParameterizedType(null/*top level type or member type with raw enclosing type*/, false/*no raw*/);", "+\t\t\t\telse if (this.scanner.isAtRawTypeEnd())", "+\t\t\t\t\t// raw type", "+\t\t\t\t\tparseRawType();", "+\t\t\t} else {", "+\t\t\t\t// non-generic type", "+\t\t\t\tconsumeNonGenericType();", "-\t\t} else if (this.scanner.isAtTypeVariableStart()) {", "-\t\t\tparseTypeVariable();", "-\t\t} else if (this.scanner.isAtWildcardStart()) {", "-\t\t\tparseWildcard();", "-\t\t} else if (this.scanner.isAtTypeWithCaptureStart()) {", "-\t\t\tparseTypeWithCapture();", "+\t\t\t", "+\t\t\tconsumeType();", "+\t\t\tthis.scanner.skipTypeEnd();", "+\t\t\t", "+\t\t\tif (this.scanner.isAtFieldOrMethodStart()) {", "+\t\t\t\tswitch (this.scanner.nextToken()) {", "+\t\t\t\t\tcase Scanner.FIELD:", "+\t\t\t\t\t\tparseField();", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\tcase Scanner.METHOD:", "+\t\t\t\t\t\tparseMethod();", "+\t\t\t\t\t\tif (this.scanner.isAtLocalVariableStart()) {", "+\t\t\t\t\t\t\tparseLocalVariable();", "+\t\t\t\t\t\t} else if (this.scanner.isAtTypeVariableStart()) {", "+\t\t\t\t\t\t\tparseTypeVariable();", "+\t\t\t\t\t\t}", "+\t\t\t\t \t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tmalformedKey();", "+\t\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t} else if (this.scanner.isAtTypeVariableStart()) {", "+\t\t\t\tparseTypeVariable();", "+\t\t\t} else if (this.scanner.isAtWildcardStart()) {", "+\t\t\t\tparseWildcard();", "+\t\t\t} else if (this.scanner.isAtTypeWithCaptureStart()) {", "+\t\t\t\tparseTypeWithCapture();", "+\t\t\t}", "+\t\t\t", "+\t\t\tconsumeKey();", "+\t\t} catch (IllegalArgumentException e) {", "+\t\t\t// the given key was illegal", "-\t\t", "-\t\tconsumeKey();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8c4b564e81338109b6b62ac71d1d061", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java", "commitBeforeChange": "a4db13e870f0b638631acdc0b5496aeab206e505", "commitAfterChange": "6d89cdcefa6c4f6d9f7e2a6ec2f2469cf8fc5bab", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic ITypeBinding getDeclaringClass()", "signatureAfterChange": " \tpublic ITypeBinding getDeclaringClass()", "diff": ["-\t\t\treturn this.resolver.getTypeBinding(referenceBinding.enclosingType());", "-\t\t} else {", "-\t\t\treturn null;", "+\t\t\ttry {", "+\t\t\t\treturn this.resolver.getTypeBinding(referenceBinding.enclosingType());", "+\t\t\t} catch (AbortCompilation e) {", "+\t\t\t\t// in case the enclosing type cannot be resolvable due to missing jars on the classpath", "+\t\t\t\t// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=57871", "+\t\t\t}", "+\t\treturn null;"]}], "num": 51038}
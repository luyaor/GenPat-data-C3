{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa723afeb31d6179b8446d991dae69cf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e95ef91cd882b9a86ecb1b578a3ef80", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r public TypeBinding reportError(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding reportError(BlockScope scope)", "diff": ["-\tif (binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) binding).problemId() == NotFound){\r", "-\t\t// will not support innerclass emulation inside delegate\r", "-\t\tbinding = scope.getField(delegateThis.type, this.tokens[0], this);\r", "-\t\tif (!binding.isValidBinding()) return super.reportError(scope);\r", "-\t\treturn checkFieldAccess(scope);\r", "-\t}\r", "-\r", "-\tif (binding instanceof ProblemBinding && ((ProblemBinding) binding).problemId() == NotFound){\r", "+\tif ((binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) binding).problemId() == NotFound)\r", "+\t\t|| (binding instanceof ProblemBinding && ((ProblemBinding) binding).problemId() == NotFound)){\r", "-\t\tif (!fieldBinding.isValidBinding()) return super.reportError(scope);\r", "+\t\tif (!fieldBinding.isValidBinding()) {\r", "+\t\t\tif (((ProblemFieldBinding) fieldBinding).problemId() == NotVisible) {\r", "+\t\t\t\t// manage the access to a private field of the enclosing type\r", "+\t\t\t\tCodeSnippetScope localScope = new CodeSnippetScope(scope);\r", "+\t\t\t\tbinding = localScope.getFieldForCodeSnippet(delegateThis.type, this.tokens[0], this);\r", "+\t\t\t\tif (binding.isValidBinding()) {\r", "+\t\t\t\t\treturn checkFieldAccess(scope);\t\t\t\t\t\t\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\treturn super.reportError(scope);\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\treturn super.reportError(scope);\r", "+\t\t\t}\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d471626db3ad1c55625cf8477f4a2e99", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetQualifiedNameReference.java", "commitBeforeChange": "0fab95acfc013a65f6c4bdafe85f3d99ef09b27b", "commitAfterChange": "a2ae3e117eaea10fecaf3678af5938ffa98d76f4", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r public TypeBinding reportError(BlockScope scope)", "signatureAfterChange": "\r public TypeBinding reportError(BlockScope scope)", "diff": ["-\tif (binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) binding).problemId() == NotFound){\r", "-\t\t// will not support innerclass emulation inside delegate\r", "-\t\tbinding = scope.getField(delegateThis.type, this.tokens[0], this);\r", "-\t\tif (!binding.isValidBinding()) return super.reportError(scope);\r", "-\t\treturn checkFieldAccess(scope);\r", "-\t}\r", "-\r", "-\tif (binding instanceof ProblemBinding && ((ProblemBinding) binding).problemId() == NotFound){\r", "+\tif ((binding instanceof ProblemFieldBinding && ((ProblemFieldBinding) binding).problemId() == NotFound)\r", "+\t\t|| (binding instanceof ProblemBinding && ((ProblemBinding) binding).problemId() == NotFound)){\r", "-\t\tif (!fieldBinding.isValidBinding()) return super.reportError(scope);\r", "+\t\tif (!fieldBinding.isValidBinding()) {\r", "+\t\t\tif (((ProblemFieldBinding) fieldBinding).problemId() == NotVisible) {\r", "+\t\t\t\t// manage the access to a private field of the enclosing type\r", "+\t\t\t\tCodeSnippetScope localScope = new CodeSnippetScope(scope);\r", "+\t\t\t\tbinding = localScope.getFieldForCodeSnippet(delegateThis.type, this.tokens[0], this);\r", "+\t\t\t\tif (binding.isValidBinding()) {\r", "+\t\t\t\t\treturn checkFieldAccess(scope);\t\t\t\t\t\t\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\treturn super.reportError(scope);\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\treturn super.reportError(scope);\r", "+\t\t\t}\r", "+\t\t}\r"]}], "num": 20055}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "588126f8becdbab86baa1115f140870d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f75d81c4c4e18114eec853c3b7d412c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "848c4ddf1895eb24711ea8c54b1168746cb07972", "commitAfterChange": "b136d601b8b65cbe6a937874c4ada8fd9c6f056d", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 37, "signatureBeforeChange": " public int computeSeverity(int problemId)", "signatureAfterChange": " public int computeSeverity(int problemId)", "diff": ["-\t\t// Annotation implicit IDs for deprecatedField(...)", "-\t\tcase IProblem.Annotation | IProblem.UsingDeprecatedField:", "-\t\t// Annotation implicit IDs for deprecatedMethod(...)", "-\t\tcase IProblem.Annotation | IProblem.UsingDeprecatedConstructor:", "-\t\tcase IProblem.Annotation | IProblem.UsingDeprecatedMethod:", "-\t\t// Annotation implicit IDs for deprecatedType(...)", "-\t\tcase IProblem.Annotation | IProblem.UsingDeprecatedType:", "-\t\t// Annotation implicit IDs for invalidField(...)", "-\t\tcase IProblem.Annotation | IProblem.UndefinedField:", "-\t\tcase IProblem.Annotation | IProblem.NotVisibleField:", "-\t\tcase IProblem.Annotation | IProblem.AmbiguousField:", "-\t\t// Annotation implicit IDs for invalidMethod(...)", "-\t\tcase IProblem.Annotation | IProblem.UndefinedMethod:", "-\t\tcase IProblem.Annotation | IProblem.NotVisibleMethod:", "-\t\tcase IProblem.Annotation | IProblem.ParameterMismatch:", "-\t\t// Annotation implicit IDs for invalidType(...)", "-\t\tcase IProblem.Annotation | IProblem.UndefinedType:", "-\t\tcase IProblem.Annotation | IProblem.NotVisibleType:", "-\t\t// Annotation implicit IDs for errorNoMethodFor(...)", "-\t\tcase IProblem.Annotation | IProblem.NoMessageSendOnArrayType:", "-\t\tcase IProblem.Annotation | IProblem.NoMessageSendOnBaseType:", "-\t\t// Annotation explicit IDs", "-\t\tcase IProblem.AnnotationUnexpectedTag:", "-\t\tcase IProblem.AnnotationMissingParamTag:", "-\t\tcase IProblem.AnnotationMissingParamName:", "-\t\tcase IProblem.AnnotationDuplicateParamName:", "-\t\tcase IProblem.AnnotationInvalidParamName:", "-\t\tcase IProblem.AnnotationMissingReturnTag:", "-\t\tcase IProblem.AnnotationDuplicateReturnTag:", "-\t\tcase IProblem.AnnotationMissingThrowsTag:", "-\t\tcase IProblem.AnnotationMissingThrowsClassName:", "-\t\tcase IProblem.AnnotationInvalidThrowsClass:", "-\t\tcase IProblem.AnnotationDuplicateThrowsClassName:", "-\t\tcase IProblem.AnnotationInvalidThrowsClassName:", "-\t\tcase IProblem.AnnotationMissingSeeReference:", "-\t\tcase IProblem.AnnotationInvalidSeeReference:", "-\t\tcase IProblem.AnnotationInvalidSeeHref:", "-\t\tcase IProblem.AnnotationInvalidSeeArgs:", "-\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidAnnotation);", "+\t\t// Javadoc implicit IDs for deprecatedField(...)", "+\t\tcase IProblem.Javadoc | IProblem.UsingDeprecatedField:", "+\t\t// Javadoc implicit IDs for deprecatedMethod(...)", "+\t\tcase IProblem.Javadoc | IProblem.UsingDeprecatedConstructor:", "+\t\tcase IProblem.Javadoc | IProblem.UsingDeprecatedMethod:", "+\t\t// Javadoc implicit IDs for deprecatedType(...)", "+\t\tcase IProblem.Javadoc | IProblem.UsingDeprecatedType:", "+\t\t// Javadoc implicit IDs for invalidField(...)", "+\t\tcase IProblem.Javadoc | IProblem.UndefinedField:", "+\t\tcase IProblem.Javadoc | IProblem.NotVisibleField:", "+\t\tcase IProblem.Javadoc | IProblem.AmbiguousField:", "+\t\t// Javadoc implicit IDs for invalidConstructor(...)", "+\t\tcase IProblem.Javadoc | IProblem.UndefinedConstructor:", "+\t\tcase IProblem.Javadoc | IProblem.NotVisibleConstructor:", "+\t\t// Javadoc implicit IDs for invalidMethod(...)", "+\t\tcase IProblem.Javadoc | IProblem.UndefinedMethod:", "+\t\tcase IProblem.Javadoc | IProblem.NotVisibleMethod:", "+\t\tcase IProblem.Javadoc | IProblem.ParameterMismatch:", "+\t\t// Javadoc implicit IDs for invalidType(...)", "+\t\tcase IProblem.Javadoc | IProblem.UndefinedType:", "+\t\tcase IProblem.Javadoc | IProblem.NotVisibleType:", "+\t\t// Javadoc implicit IDs for errorNoMethodFor(...)", "+\t\tcase IProblem.Javadoc | IProblem.NoMessageSendOnArrayType:", "+\t\tcase IProblem.Javadoc | IProblem.NoMessageSendOnBaseType:", "+\t\t// Javadoc explicit IDs", "+\t\tcase IProblem.JavadocUnexpectedTag:", "+\t\tcase IProblem.JavadocMissingParamTag:", "+\t\tcase IProblem.JavadocMissingParamName:", "+\t\tcase IProblem.JavadocDuplicateParamName:", "+\t\tcase IProblem.JavadocInvalidParamName:", "+\t\tcase IProblem.JavadocMissingReturnTag:", "+\t\tcase IProblem.JavadocDuplicateReturnTag:", "+\t\tcase IProblem.JavadocMissingThrowsTag:", "+\t\tcase IProblem.JavadocMissingThrowsClassName:", "+\t\tcase IProblem.JavadocInvalidThrowsClass:", "+\t\tcase IProblem.JavadocDuplicateThrowsClassName:", "+\t\tcase IProblem.JavadocInvalidThrowsClassName:", "+\t\tcase IProblem.JavadocMissingSeeReference:", "+\t\tcase IProblem.JavadocInvalidSeeReference:", "+\t\tcase IProblem.JavadocInvalidSeeHref:", "+\t\tcase IProblem.JavadocInvalidSeeArgs:", "+\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidJavadoc);", "-\t\tcase IProblem.AnnotationMissing:", "-\t\t\tif (!this.options.reportMissingAnnotation) return Ignore;", "-\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidAnnotation);", "+\t\tcase IProblem.JavadocMissing:", "+\t\t\tif (!this.options.reportMissingJavadoc) return Ignore;", "+\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidJavadoc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d6cdc0d87f74dd3c38a7fc772bb7c2a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "d5b9ab15bb3f769b7e2ac485fe6da55027818828", "commitAfterChange": "e98478cd38caef5e23457b8b0fdc364bf2846afc", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " public int computeSeverity(int problemId)", "signatureAfterChange": " public int computeSeverity(int problemId)", "diff": ["-\t\t// by default, if not annotation, then problems are errors.", "+\t\t// Annotation implicit IDs for deprecatedField(...)", "+\t\tcase IProblem.Annotation | IProblem.UsingDeprecatedField:", "+\t\t// Annotation implicit IDs for deprecatedMethod(...)", "+\t\tcase IProblem.Annotation | IProblem.UsingDeprecatedConstructor:", "+\t\tcase IProblem.Annotation | IProblem.UsingDeprecatedMethod:", "+\t\t// Annotation implicit IDs for deprecatedType(...)", "+\t\tcase IProblem.Annotation | IProblem.UsingDeprecatedType:", "+\t\t// Annotation implicit IDs for invalidField(...)", "+\t\tcase IProblem.Annotation | IProblem.NotVisibleField:", "+\t\tcase IProblem.Annotation | IProblem.AmbiguousField:", "+\t\t// Annotation implicit IDs for invalidMethod(...)", "+\t\tcase IProblem.Annotation | IProblem.UndefinedMethod:", "+\t\tcase IProblem.Annotation | IProblem.NotVisibleMethod:", "+\t\tcase IProblem.Annotation | IProblem.ParameterMismatch:", "+\t\t// Annotation implicit IDs for invalidType(...)", "+\t\tcase IProblem.Annotation | IProblem.UndefinedType:", "+\t\tcase IProblem.Annotation | IProblem.NotVisibleType:", "+\t\t// Annotation implicit IDs for errorNoMethodFor(...)", "+\t\tcase IProblem.Annotation | IProblem.NoMessageSendOnArrayType:", "+\t\tcase IProblem.Annotation | IProblem.NoMessageSendOnBaseType:", "+\t\t// Annotation explicit IDs", "+\t\tcase IProblem.AnnotationUnexpectedTag:", "+\t\tcase IProblem.AnnotationMissingParamTag:", "+\t\tcase IProblem.AnnotationMissingParamName:", "+\t\tcase IProblem.AnnotationDuplicateParamName:", "+\t\tcase IProblem.AnnotationInvalidParamName:", "+\t\tcase IProblem.AnnotationMissingReturnTag:", "+\t\tcase IProblem.AnnotationDuplicateReturnTag:", "+\t\tcase IProblem.AnnotationMissingThrowsTag:", "+\t\tcase IProblem.AnnotationMissingThrowsClassName:", "+\t\tcase IProblem.AnnotationInvalidThrowsClass:", "+\t\tcase IProblem.AnnotationDuplicateThrowsClassName:", "+\t\tcase IProblem.AnnotationInvalidThrowsClassName:", "+\t\tcase IProblem.AnnotationMissingSeeReference:", "+\t\tcase IProblem.AnnotationInvalidSeeReference:", "+\t\tcase IProblem.AnnotationInvalidSeeHref:", "+\t\tcase IProblem.AnnotationInvalidSeeArgs:", "+\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidAnnotation);", "+", "+\t\tcase IProblem.AnnotationMissing:", "+\t\t\tif (!this.options.reportMissingAnnotation) return Ignore;", "+\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidAnnotation);", "+", "+\t\t// by default problems are errors.", "-\t\t\tif ((problemId & IProblem.Annotation) == IProblem.Annotation) {", "-\t\t\t\treturn this.options.getSeverity(CompilerOptions.InvalidAnnotation);", "-\t\t\t}"]}], "num": 16068}
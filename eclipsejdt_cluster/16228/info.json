{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cffef52afdc70347dbff71c1c6d6155e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b5b837bc620ca8eb5840bcf5d72f3b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "74ceca813d8e9be557353622cfb1779e5fa562ad", "commitAfterChange": "2d7d544af40c78aee4e80de194acd385e8eab51a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] otherInheritedMethods)", "signatureAfterChange": " void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] allInheritedMethods)", "diff": ["-void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] otherInheritedMethods) {", "-\tboolean isAnnotationMember = this.type.isAnnotationType();", "+void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] methods, int length, MethodBinding[] allInheritedMethods) {", "+\tif (this.type.isAnnotationType()) { // annotation cannot override any method", "+\t\tproblemReporter().annotationCannotOverrideMethod(currentMethod, methods[length - 1]);", "+\t\treturn; // do not repoort against subsequent inherited methods", "+\t}", "-\t\tif (isAnnotationMember) { // annotation cannot override any method", "-\t\t\tproblemReporter().annotationCannotOverrideMethod(currentMethod, inheritedMethod);", "-\t\t\treturn; // do not repoort against subsequent inherited methods", "-\t\t}", "-\t\tcheckForBridgeMethod(currentMethod, inheritedMethod, otherInheritedMethods);", "+\t\tcheckForBridgeMethod(currentMethod, inheritedMethod, allInheritedMethods);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a11713578517dcd239ecd1aef47e1f2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "875cc8d42787c90738d8dc077a25eb401e9e38f9", "commitAfterChange": "adfd584faf146517cb3e86f9f2b585f2851a3630", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "signatureAfterChange": " void checkInheritedMethods(MethodBinding[] methods, int length)", "diff": ["-\t\tthis.problemReporter().inheritedMethodsHaveIncompatibleReturnTypes(this.type, methods, length);", "+\t\tproblemReporter().inheritedMethodsHaveIncompatibleReturnTypes(this.type, methods, length);", "-\t\t\t\tif (mustImplementAbstractMethod(methods[i])) {", "+\t\t\t\tif (mustImplementAbstractMethod(methods[i].declaringClass)) {", "-\t\t\t\t\t\tthis.problemReporter().abstractMethodMustBeImplemented(this.type, methods[0]);", "+\t\t\t\t\t\tproblemReporter().abstractMethodMustBeImplemented(this.type, methods[0]);", "-\t\tthis.problemReporter().staticInheritedMethodConflicts(type, concreteMethod, abstractMethods);\t", "+\t\tproblemReporter().staticInheritedMethodConflicts(type, concreteMethod, abstractMethods);\t", "-\t\tthis.problemReporter().inheritedMethodReducesVisibility(type, concreteMethod, abstractMethods);", "+\t\tproblemReporter().inheritedMethodReducesVisibility(type, concreteMethod, abstractMethods);", "-\t\t\tthis.checkExceptions(concreteMethod, abstractMethods[i]);", "+\t\t\tcheckExceptions(concreteMethod, abstractMethods[i]);"]}], "num": 16228}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7fb805c7c60dd2edac89386be164c6d0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33ed7068b982211d3c0726867525028c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "67da1da15e9afbcd33679f07597c706e7915cf4a", "commitAfterChange": "027fccb2c17e0f0d2b28705c6704af10fc8ce0aa", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tprivate void computeExpectedTypes(AstNode parent, Scope scope)", "signatureAfterChange": " \tprivate void computeExpectedTypes(AstNode parent, Scope scope)", "diff": ["-\t\tint expectedTypeCount = 0;", "-\t\texpectedTypes = new TypeBinding[1];", "+\t\t// default filter", "+\t\texpectedTypesFilter = SUBTYPE;", "+\t\t", "+\t\t// find types from parent", "-\t\t\t\texpectedTypes[expectedTypeCount++] = binding;", "+\t\t\t\taddExpectedType(binding);", "-\t\t\t\texpectedTypes[expectedTypeCount++] = binding;", "+\t\t\t\taddExpectedType(binding);", "-\t\t\t\texpectedTypes[expectedTypeCount++] = binding;", "+\t\t\t\taddExpectedType(binding);", "+\t\t\t}", "+\t\t} else if(parent instanceof CastExpression) {", "+\t\t\tExpression e = ((CastExpression)parent).type;", "+\t\t\tTypeBinding binding = e.expressionType;", "+\t\t\tif(binding != null){", "+\t\t\t\taddExpectedType(binding);", "+\t\t\t\texpectedTypesFilter = SUBTYPE | SUPERTYPE;", "+\t\t\t}", "+\t\t} else if(parent instanceof MessageSend) {", "+\t\t\tMessageSend messageSend = (MessageSend) parent;", "+\t\t\t", "+\t\t\tReferenceBinding binding = (ReferenceBinding)messageSend.receiverType;", "+\t\t\tboolean isStatic = messageSend.receiver.isTypeReference();", "+\t\t\t", "+\t\t\twhile(binding != null) {\t", "+\t\t\t\tcomputeExpectedTypesForMessageSend(", "+\t\t\t\t\tbinding,", "+\t\t\t\t\tmessageSend.selector,", "+\t\t\t\t\tmessageSend.arguments,", "+\t\t\t\t\t(ReferenceBinding)messageSend.receiverType,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tmessageSend,", "+\t\t\t\t\tisStatic);", "+\t\t\t\tcomputeExpectedTypesForMessageSendForInterface(", "+\t\t\t\t\tbinding,", "+\t\t\t\t\tmessageSend.selector,", "+\t\t\t\t\tmessageSend.arguments,", "+\t\t\t\t\t(ReferenceBinding)messageSend.receiverType,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tmessageSend,", "+\t\t\t\t\tisStatic);", "+\t\t\t\tbinding = binding.superclass();", "+\t\t\t}", "+\t\t} else if(parent instanceof AllocationExpression) {", "+\t\t\tAllocationExpression allocationExpression = (AllocationExpression) parent;", "+\t\t\t", "+\t\t\tReferenceBinding binding = (ReferenceBinding)allocationExpression.type.binding;", "+", "+\t\t\tif(binding != null) {\t", "+\t\t\t\tcomputeExpectedTypesForAllocationExpression(", "+\t\t\t\t\tbinding,", "+\t\t\t\t\tallocationExpression.arguments,", "+\t\t\t\t\tscope,", "+\t\t\t\t\tallocationExpression);", "-\t\tSystem.arraycopy(expectedTypes, 0, expectedTypes = new TypeBinding[expectedTypeCount], 0, expectedTypeCount);", "+\t\tif(expectedTypesCount + 1 != expectedTypes.length) {", "+\t\t\tSystem.arraycopy(expectedTypes, 0, expectedTypes = new TypeBinding[expectedTypesCount + 1], 0, expectedTypesCount + 1);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "450367cd09ecf342b8525eb62a2b7194", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "df5d9d5ec101b754aa7670df0792b53f6f3f73d0", "commitAfterChange": "cbb53b020eb8f2caef12392ab027078e6626eb25", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 56, "signatureBeforeChange": " \tprivate void computeExpectedTypes(AstNode parent, Scope scope)", "signatureAfterChange": " \tprivate void computeExpectedTypes(AstNode parent, Scope scope)", "diff": ["-\t\t\t", "-\t\t\tReferenceBinding binding = (ReferenceBinding)messageSend.receiverType;", "-\t\t\tboolean isStatic = messageSend.receiver.isTypeReference();", "-\t\t\t", "-\t\t\twhile(binding != null) {\t", "-\t\t\t\tcomputeExpectedTypesForMessageSend(", "-\t\t\t\t\tbinding,", "-\t\t\t\t\tmessageSend.selector,", "-\t\t\t\t\tmessageSend.arguments,", "-\t\t\t\t\t(ReferenceBinding)messageSend.receiverType,", "-\t\t\t\t\tscope,", "-\t\t\t\t\tmessageSend,", "-\t\t\t\t\tisStatic);", "-\t\t\t\tcomputeExpectedTypesForMessageSendForInterface(", "-\t\t\t\t\tbinding,", "-\t\t\t\t\tmessageSend.selector,", "-\t\t\t\t\tmessageSend.arguments,", "-\t\t\t\t\t(ReferenceBinding)messageSend.receiverType,", "-\t\t\t\t\tscope,", "-\t\t\t\t\tmessageSend,", "-\t\t\t\t\tisStatic);", "-\t\t\t\tbinding = binding.superclass();", "+", "+\t\t\tif(messageSend.receiverType instanceof ReferenceBinding) {", "+\t\t\t\tReferenceBinding binding = (ReferenceBinding)messageSend.receiverType;", "+\t\t\t\tboolean isStatic = messageSend.receiver.isTypeReference();", "+\t\t\t\t", "+\t\t\t\twhile(binding != null) {\t", "+\t\t\t\t\tcomputeExpectedTypesForMessageSend(", "+\t\t\t\t\t\tbinding,", "+\t\t\t\t\t\tmessageSend.selector,", "+\t\t\t\t\t\tmessageSend.arguments,", "+\t\t\t\t\t\t(ReferenceBinding)messageSend.receiverType,", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tmessageSend,", "+\t\t\t\t\t\tisStatic);", "+\t\t\t\t\tcomputeExpectedTypesForMessageSendForInterface(", "+\t\t\t\t\t\tbinding,", "+\t\t\t\t\t\tmessageSend.selector,", "+\t\t\t\t\t\tmessageSend.arguments,", "+\t\t\t\t\t\t(ReferenceBinding)messageSend.receiverType,", "+\t\t\t\t\t\tscope,", "+\t\t\t\t\t\tmessageSend,", "+\t\t\t\t\t\tisStatic);", "+\t\t\t\t\tbinding = binding.superclass();", "+\t\t\t\t}"]}], "num": 72276}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0bbd2fde11e802e635f981d62313d42", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "183585a6a13c8c1acadd7c28353fe3b7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "fb96a1c85d64a712beb45b02ec6ef71c691d3831", "commitAfterChange": "382b067fdb60eb61ee53faad83800b76fff0bbbf", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \t \tprivate void findFieldsFromFavorites( \t\t\tchar[] fieldName, \t\t\tFieldBinding[] fields, \t\t\tScope scope, \t\t\tObjectVector fieldsFound, \t\t\tObjectVector localsFound, \t\t\tReferenceBinding receiverType, \t\t\tInvocationSite invocationSite, \t\t\tScope invocationScope)", "signatureAfterChange": " \t \tprivate void findFieldsFromFavorites( \t\t\tchar[] fieldName, \t\t\tFieldBinding[] fields, \t\t\tScope scope, \t\t\tObjectVector fieldsFound, \t\t\tObjectVector localsFound, \t\t\tReferenceBinding receiverType, \t\t\tInvocationSite invocationSite, \t\t\tScope invocationScope)", "diff": ["-\t\t\tchar[] completion = CharOperation.concat(typeName, field.name, '.');", "-", "+\t\t\tCompilationUnitDeclaration cu = this.unitScope.referenceContext;", "+\t\t\tint importStart = cu.types[0].declarationSourceStart;", "+\t\t\tint importEnd = importStart;", "+\t\t\t", "-\t\t\tif (!this.isIgnored(CompletionProposal.FIELD_REF)) {", "-\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF, this.actualCompletionPosition);", "-\t\t\t\tproposal.setDeclarationSignature(getSignature(field.declaringClass));", "-\t\t\t\tproposal.setSignature(getSignature(field.type));", "-\t\t\t\tproposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "-\t\t\t\tproposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "-\t\t\t\tproposal.setPackageName(field.type.qualifiedPackageName());", "-\t\t\t\tproposal.setTypeName(field.type.qualifiedSourceName()); ", "-\t\t\t\tproposal.setName(field.name);", "-\t\t\t\tproposal.setCompletion(completion);", "-\t\t\t\tproposal.setFlags(field.modifiers);", "-\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\tif(DEBUG) {", "-\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\tif (this.compilerOptions.complianceLevel < ClassFileConstants.JDK1_5 ||", "+\t\t\t\t\t!this.options.suggestStaticImport) {", "+\t\t\t\tif (!this.isIgnored(CompletionProposal.FIELD_REF, CompletionProposal.TYPE_IMPORT)) {", "+\t\t\t\t\tchar[] completion = CharOperation.concat(receiverType.sourceName, field.name, '.');", "+\t\t\t\t\t", "+\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setDeclarationSignature(getSignature(field.declaringClass));", "+\t\t\t\t\tproposal.setSignature(getSignature(field.type));", "+\t\t\t\t\tproposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "+\t\t\t\t\tproposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "+\t\t\t\t\tproposal.setPackageName(field.type.qualifiedPackageName());", "+\t\t\t\t\tproposal.setTypeName(field.type.qualifiedSourceName()); ", "+\t\t\t\t\tproposal.setName(field.name);", "+\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\tproposal.setFlags(field.modifiers);", "+\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t", "+\t\t\t\t\tchar[] typeImportCompletion = createImportCharArray(typeName, false, false);", "+\t\t\t\t\t", "+\t\t\t\t\tCompletionProposal typeImportProposal = this.createProposal(CompletionProposal.TYPE_IMPORT, this.actualCompletionPosition);", "+\t\t\t\t\ttypeImportProposal.nameLookup = this.nameEnvironment.nameLookup;", "+\t\t\t\t\ttypeImportProposal.completionEngine = this;", "+\t\t\t\t\tchar[] packageName = receiverType.qualifiedPackageName();", "+\t\t\t\t\ttypeImportProposal.setDeclarationSignature(packageName);", "+\t\t\t\t\ttypeImportProposal.setSignature(getSignature(receiverType));", "+\t\t\t\t\ttypeImportProposal.setPackageName(packageName);", "+\t\t\t\t\ttypeImportProposal.setTypeName(receiverType.qualifiedSourceName());", "+\t\t\t\t\ttypeImportProposal.setCompletion(typeImportCompletion);", "+\t\t\t\t\ttypeImportProposal.setFlags(receiverType.modifiers);", "+\t\t\t\t\ttypeImportProposal.setAdditionalFlags(CompletionFlags.Default);", "+\t\t\t\t\ttypeImportProposal.setReplaceRange(importStart - this.offset, importEnd - this.offset);", "+\t\t\t\t\ttypeImportProposal.setRelevance(relevance);", "+\t\t\t\t\t", "+\t\t\t\t\tproposal.setRequiredProposals(new CompletionProposal[]{typeImportProposal});", "+\t\t\t\t\t", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif (!this.isIgnored(CompletionProposal.FIELD_REF, CompletionProposal.FIELD_IMPORT)) {", "+\t\t\t\t\tchar[] completion = field.name;", "+\t\t\t\t\t", "+\t\t\t\t\tCompletionProposal proposal = this.createProposal(CompletionProposal.FIELD_REF, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setDeclarationSignature(getSignature(field.declaringClass));", "+\t\t\t\t\tproposal.setSignature(getSignature(field.type));", "+\t\t\t\t\tproposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "+\t\t\t\t\tproposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "+\t\t\t\t\tproposal.setPackageName(field.type.qualifiedPackageName());", "+\t\t\t\t\tproposal.setTypeName(field.type.qualifiedSourceName()); ", "+\t\t\t\t\tproposal.setName(field.name);", "+\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\tproposal.setFlags(field.modifiers);", "+\t\t\t\t\tproposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\t", "+\t\t\t\t\tchar[] fieldImportCompletion = createImportCharArray(CharOperation.concat(typeName, field.name, '.'), true, false);", "+", "+\t\t\t\t\tCompletionProposal fieldImportProposal = this.createProposal(CompletionProposal.FIELD_IMPORT, this.actualCompletionPosition);", "+\t\t\t\t\tfieldImportProposal.setDeclarationSignature(getSignature(field.declaringClass));", "+\t\t\t\t\tfieldImportProposal.setSignature(getSignature(field.type));", "+\t\t\t\t\tfieldImportProposal.setDeclarationPackageName(field.declaringClass.qualifiedPackageName());", "+\t\t\t\t\tfieldImportProposal.setDeclarationTypeName(field.declaringClass.qualifiedSourceName());", "+\t\t\t\t\tfieldImportProposal.setPackageName(field.type.qualifiedPackageName());", "+\t\t\t\t\tfieldImportProposal.setTypeName(field.type.qualifiedSourceName()); ", "+\t\t\t\t\tfieldImportProposal.setName(field.name);", "+\t\t\t\t\tfieldImportProposal.setCompletion(fieldImportCompletion);", "+\t\t\t\t\tfieldImportProposal.setFlags(field.modifiers);", "+\t\t\t\t\tfieldImportProposal.setAdditionalFlags(CompletionFlags.StaticImport);", "+\t\t\t\t\tfieldImportProposal.setReplaceRange(importStart - this.offset, importEnd - this.offset);", "+\t\t\t\t\tfieldImportProposal.setRelevance(relevance);", "+\t\t\t\t\t", "+\t\t\t\t\tproposal.setRequiredProposals(new CompletionProposal[]{fieldImportProposal});", "+\t\t\t\t\t", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e0f91a3387858ea294203e29b03f2a9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java", "commitBeforeChange": "24cf489e4c973e29dff7eade9d41897f72a37db0", "commitAfterChange": "f924ed86fe1dbe148077a9cade20b11e404ba89b", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 119, "signatureBeforeChange": " \tprivate void findAnonymousType( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tprivate void findAnonymousType( \t\tReferenceBinding currentType, \t\tTypeBinding[] argTypes, \t\tScope scope, \t\tInvocationSite invocationSite, \t\tboolean exactMatch, \t\tboolean isQualified, \t\tint relevance)", "diff": ["+\t}", "+\tprivate void findAnonymousType(", "-\t\tInvocationSite invocationSite) {", "+\t\tInvocationSite invocationSite,", "+\t\tboolean exactMatch,", "+\t\tboolean isQualified,", "+\t\tint relevance) {", "-\t\t\tint relevance = computeBaseRelevance();", "-\t\t\trelevance += computeRelevanceForResolution();", "-\t\t\trelevance += computeRelevanceForInterestingProposal();", "-\t\t\trelevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE);", "+\t\t\tchar[] typeCompletion = null;", "+\t\t\tif (!exactMatch) {", "+\t\t\t\ttypeCompletion = ", "+\t\t\t\t\tisQualified ?", "+\t\t\t\t\t\t\tCharOperation.concat(currentType.qualifiedPackageName(), currentType.qualifiedSourceName(), '.') :", "+\t\t\t\t\t\t\t\tcurrentType.sourceName();", "+\t\t\t\tif (this.source != null", "+\t\t\t\t\t\t\t&& this.source.length > this.endPosition", "+\t\t\t\t\t\t\t&& this.source[this.endPosition] == '(') {", "+\t\t\t\t\tcompletion = CharOperation.NO_CHAR;", "+\t\t\t\t} else {", "+\t\t\t\t\tcompletion = new char[] { '(', ')' };", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\tif(!this.requestor.isIgnored(CompletionProposal.ANONYMOUS_CLASS_DECLARATION)) {", "-\t\t\t\tInternalCompletionProposal proposal = createProposal(CompletionProposal.ANONYMOUS_CLASS_DECLARATION, this.actualCompletionPosition);", "-\t\t\t\tproposal.setDeclarationSignature(getSignature(currentType));", "-\t\t\t\tproposal.setDeclarationKey(currentType.computeUniqueKey());", "-\t\t\t\tproposal.setSignature(", "-\t\t\t\t\t\tcreateMethodSignature(", "-\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "-\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "-\t\t\t\t\t\t\t\tCharOperation.NO_CHAR,", "-\t\t\t\t\t\t\t\tCharOperation.NO_CHAR));", "-\t\t\t\t//proposal.setOriginalSignature(null);", "-\t\t\t\t//proposal.setUniqueKey(null);", "-\t\t\t\tproposal.setDeclarationPackageName(currentType.qualifiedPackageName());", "-\t\t\t\tproposal.setDeclarationTypeName(currentType.qualifiedSourceName());", "-\t\t\t\t//proposal.setParameterPackageNames(null);", "-\t\t\t\t//proposal.setParameterTypeNames(null);", "-\t\t\t\t//proposal.setPackageName(null);", "-\t\t\t\t//proposal.setTypeName(null);", "-\t\t\t\tproposal.setCompletion(completion);", "-\t\t\t\tproposal.setFlags(Flags.AccPublic);", "-\t\t\t\tproposal.setReplaceRange(this.endPosition - this.offset, this.endPosition - this.offset);", "-\t\t\t\tproposal.setTokenRange(this.tokenEnd - this.offset, this.tokenEnd - this.offset);", "-\t\t\t\tproposal.setRelevance(relevance);", "-\t\t\t\tthis.requestor.accept(proposal);", "-\t\t\t\tif(DEBUG) {", "-\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\tif (!exactMatch) {", "+\t\t\t\tif(!isIgnored(CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION, CompletionProposal.TYPE_REF)) {", "+\t\t\t\t\tchar[] packageName = currentType.isLocalType() ? null : currentType.qualifiedPackageName();", "+\t\t\t\t\tchar[] typeName = currentType.qualifiedSourceName();", "+\t\t\t\t\t", "+\t\t\t\t\tInternalCompletionProposal proposal = createProposal(CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setDeclarationSignature(getSignature(currentType));", "+\t\t\t\t\tproposal.setDeclarationKey(currentType.computeUniqueKey());", "+\t\t\t\t\tproposal.setSignature(", "+\t\t\t\t\t\t\tcreateMethodSignature(", "+\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR,", "+\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR));", "+\t\t\t\t\t//proposal.setOriginalSignature(null);", "+\t\t\t\t\t//proposal.setUniqueKey(null);", "+\t\t\t\t\tproposal.setDeclarationPackageName(packageName);", "+\t\t\t\t\tproposal.setDeclarationTypeName(typeName);", "+\t\t\t\t\t//proposal.setParameterPackageNames(null);", "+\t\t\t\t\t//proposal.setParameterTypeNames(null);", "+\t\t\t\t\t//proposal.setPackageName(null);", "+\t\t\t\t\t//proposal.setTypeName(null);", "+\t\t\t\t\tproposal.setName(currentType.sourceName());", "+\t\t\t\t\t", "+\t\t\t\t\tInternalCompletionProposal typeProposal = createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);", "+\t\t\t\t\ttypeProposal.nameLookup = this.nameEnvironment.nameLookup;", "+\t\t\t\t\ttypeProposal.completionEngine = this;", "+\t\t\t\t\ttypeProposal.setDeclarationSignature(packageName);", "+\t\t\t\t\ttypeProposal.setSignature(getRequiredTypeSignature(currentType));", "+\t\t\t\t\ttypeProposal.setPackageName(packageName);", "+\t\t\t\t\ttypeProposal.setTypeName(typeName);", "+\t\t\t\t\ttypeProposal.setCompletion(typeCompletion);", "+\t\t\t\t\ttypeProposal.setFlags(currentType.modifiers);", "+\t\t\t\t\ttypeProposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\ttypeProposal.setTokenRange(this.startPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\ttypeProposal.setRelevance(relevance);", "+\t\t\t\t\tproposal.setRequiredProposals( new CompletionProposal[]{typeProposal});", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\tproposal.setFlags(Flags.AccPublic);", "+\t\t\t\t\tproposal.setReplaceRange(this.endPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setTokenRange(this.tokenStart - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}  else {", "+\t\t\t\tif(!this.requestor.isIgnored(CompletionProposal.ANONYMOUS_CLASS_DECLARATION)) {", "+\t\t\t\t\tInternalCompletionProposal proposal = createProposal(CompletionProposal.ANONYMOUS_CLASS_DECLARATION, this.actualCompletionPosition);", "+\t\t\t\t\tproposal.setDeclarationSignature(getSignature(currentType));", "+\t\t\t\t\tproposal.setDeclarationKey(currentType.computeUniqueKey());", "+\t\t\t\t\tproposal.setSignature(", "+\t\t\t\t\t\t\tcreateMethodSignature(", "+\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR_CHAR,", "+\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR,", "+\t\t\t\t\t\t\t\t\tCharOperation.NO_CHAR));", "+\t\t\t\t\t//proposal.setOriginalSignature(null);", "+\t\t\t\t\t//proposal.setUniqueKey(null);", "+\t\t\t\t\tproposal.setDeclarationPackageName(currentType.qualifiedPackageName());", "+\t\t\t\t\tproposal.setDeclarationTypeName(currentType.qualifiedSourceName());", "+\t\t\t\t\t//proposal.setParameterPackageNames(null);", "+\t\t\t\t\t//proposal.setParameterTypeNames(null);", "+\t\t\t\t\t//proposal.setPackageName(null);", "+\t\t\t\t\t//proposal.setTypeName(null);", "+\t\t\t\t\tproposal.setCompletion(completion);", "+\t\t\t\t\tproposal.setFlags(Flags.AccPublic);", "+\t\t\t\t\tproposal.setReplaceRange(this.endPosition - this.offset, this.endPosition - this.offset);", "+\t\t\t\t\tproposal.setTokenRange(this.tokenEnd - this.offset, this.tokenEnd - this.offset);", "+\t\t\t\t\tproposal.setRelevance(relevance);", "+\t\t\t\t\tthis.requestor.accept(proposal);", "+\t\t\t\t\tif(DEBUG) {", "+\t\t\t\t\t\tthis.printDebug(proposal);", "+\t\t\t\t\t}", "-\t\t\t\ttrue);", "+\t\t\t\ttrue,", "+\t\t\t\texactMatch,", "+\t\t\t\tisQualified,", "+\t\t\t\trelevance);"]}], "num": 20946}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a79f3e66eac549830697280ba74d9975", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75c9c91af24b5a220ef552330fb6bb7e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java", "commitBeforeChange": "f427d3141850bb05b4f61e7a5e8cfb86bf8a4b90", "commitAfterChange": "bdac2d6f93f2862f6a2ad385b856d2f81a163437", "methodNumberBeforeChange": 144, "methodNumberAfterChange": 145, "signatureBeforeChange": " public void test124_unusual_classpath()", "signatureAfterChange": " public void test124_classpath ()", "diff": ["-public void test124_unusual_classpath(){", "-\tthis.runNegativeTest(", "+public void test124_classpath (){", "+\trunClasspathTest(", "+\t\tOUTPUT_DIR + \"[+OK2\" + File.pathSeparator +\t\"-d ~Warn\" + ", "+\t\t\t\tFile.pathSeparator + \"-KO]\", ", "-\t\t\t\"X.java\",", "-\t\t\t\"/** */\\n\" + ", "-\t\t\t\"public class X extends Zork {\\n\" + ", "-\t\t\t\"}\",", "+\t\t\tOUTPUT_DIR, ", "+\t\t\t\t\"{pattern=OK2 (ACCESSIBLE), pattern=d ~Warn (NON ACCESSIBLE), pattern=KO (NON ACCESSIBLE)}\",", "+\t\t\t\tnull,", "-        \"\\\"\" + OUTPUT_DIR +  File.separator + \"X.java\\\"\"", "-        + \" -1.5 -g -preserveAllLocals\"", "-        + \" -cp \\\"\" + OUTPUT_DIR + \"[+OK2\" + File.pathSeparator +  ", "-        \t\"-d ~Warn\" + File.pathSeparator + \"-KO]\\\"\"", "-        + \" -warn:+deprecation,syntheticAccess,uselessTypeCheck,unsafe,finalBound,unusedLocal\" ", "-        + \" -proceedOnError -referenceInfo\"", "-        + \" -d \\\"\" + OUTPUT_DIR + \"\\\"\", ", "-        \"\", ", "-        \"----------\\n\" + ", "-        \"1. ERROR in ---OUTPUT_DIR_PLACEHOLDER---/X.java (at line 2)\\n\" + ", "-        \"\tpublic class X extends Zork {\\n\" + ", "-        \"\t                       ^^^^\\n\" + ", "-        \"Zork cannot be resolved to a type\\n\" + ", "-        \"----------\\n\" + ", "-        \"1 problem (1 error)\",", "-        true);", "+\t\tnull);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e84487ca14883bd9f69baefcf7118a7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JavadocTest_1_5.java", "commitBeforeChange": "81c62d5935a591fe4cf87abbebf09e04755572ce", "commitAfterChange": "18c9ee28439dc99049f5f8ecbf6109b62307dc52", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 89, "signatureBeforeChange": " \tpublic void testBug103304a()", "signatureAfterChange": " \tpublic void testBug119857_Types()", "diff": ["-\t */", "-\tpublic void testBug103304a() {", "-\t\trunNegativeTest(", "-\t\t\tnew String[] {", "-\t\t\t\t\"boden/IAFAState.java\",", "-\t\t\t\t\"package boden;\\n\" + ", "-\t\t\t\t\"public interface IAFAState {\\n\" + ", "-\t\t\t\t\"    public class ValidationException extends Exception {\\n\" + ", "-\t\t\t\t\"        public ValidationException(String variableName, IAFAState subformula) {\\n\" + ", "-\t\t\t\t\"            super(\\\"Variable \\'\\\"+variableName+\\\"\\' may be unbound in \\'\\\"+subformula+\\\"\\'\\\");\\n\" + ", "-\t\t\t\t\"        }\\n\" + ", "-\t\t\t\t\"        public void method() {}\\n\" + ", "-\t\t\t\t\"    }\\n\" + ", "-\t\t\t\t\"    /**\\n\" + ", "-\t\t\t\t\"     * Validates a formula for consistent bindings. Bindings are consistent, when at each point in time,\\n\" + ", "-\t\t\t\t\"     * the set of povided variables can be guaranteed to be a superset of the set of required variables.\\n\" + ", "-\t\t\t\t\"     * @throws ValidationException Thrown if a variable is unbound. \\n\" + ", "-\t\t\t\t\"     * @see ValidationException#IAFAState.ValidationException(String, IAFAState)\\n\" + ", "-\t\t\t\t\"     * @see IAFAState.ValidationException#method()\\n\" + ", "-\t\t\t\t\"     * @see ValidationException\\n\" + ", "-\t\t\t\t\"     * {@link ValidationException}\\n\" + ", "-\t\t\t\t\"     */\\n\" + ", "-\t\t\t\t\"    public void validate() throws ValidationException;\\n\" + ", "-\t\t\t\t\"}\\n\",", "-\t\t\t\t\"boden/TestValid.java\",", "-\t\t\t\t\"package boden;\\n\" + ", "-\t\t\t\t\"import boden.IAFAState.ValidationException;\\n\" + ", "-\t\t\t\t\"/**\\n\" + ", "-\t\t\t\t\" * @see ValidationException\\n\" + ", "-\t\t\t\t\" * @see IAFAState.ValidationException\\n\" + ", "-\t\t\t\t\" */\\n\" + ", "-\t\t\t\t\"public class TestValid {\\n\" + ", "-\t\t\t\t\"\t/**  \\n\" + ", "-\t\t\t\t\"\t * @see ValidationException#IAFAState.ValidationException(String, IAFAState)\\n\" + ", "-\t\t\t\t\"\t */\\n\" + ", "-\t\t\t\t\"\tIAFAState.ValidationException valid1;\\n\" + ", "-\t\t\t\t\"\t/**\\n\" + ", "-\t\t\t\t\"\t * @see IAFAState.ValidationException#IAFAState.ValidationException(String, IAFAState)\\n\" + ", "-\t\t\t\t\"\t */\\n\" + ", "-\t\t\t\t\"\tIAFAState.ValidationException valid2;\\n\" + ", "-\t\t\t\t\"}\\n\"", "-\t\t\t},", "-\t\t\t// no warning", "-\t\t\t\"----------\\n\" + ", "-\t\t\t\"1. ERROR in boden\\\\TestValid.java (at line 4)\\r\\n\" + ", "-\t\t\t\"\t* @see ValidationException\\r\\n\" + ", "-\t\t\t\"\t       ^^^^^^^^^^^^^^^^^^^\\n\" + ", "-\t\t\t\"Javadoc: Invalid member type qualification\\n\" + ", "-\t\t\t\"----------\\n\"", "-\t\t);", "-\t}", "+\t}", "+\tpublic void testBug119857_Types() {", "+\t\trunConformTest(", "+\t\t\tnew String[] {", "+\t\t\t\t\"TestTypes.java\",", "+\t\t\t\t\"/**\\n\" + ", "+\t\t\t\t\" * @see MyInnerClass\\n\" + ", "+\t\t\t\t\" * @see MyInnerInterface\\n\" + ", "+\t\t\t\t\" */\\n\" + ", "+\t\t\t\t\"public class TestTypes {\\n\" + ", "+\t\t\t\t\"\t/**\\n\" + ", "+\t\t\t\t\"\t * @see MyInnerInterface\\n\" + ", "+\t\t\t\t\"\t */\\n\" + ", "+\t\t\t\t\"\tpublic class MyInnerClass {\\n\" + ", "+\t\t\t\t\"\t        public void foo() {}\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"\t/**\\n\" + ", "+\t\t\t\t\"\t * @see MyInnerClass\\n\" + ", "+\t\t\t\t\"\t */\\n\" + ", "+\t\t\t\t\"\tpublic interface MyInnerInterface {\\n\" + ", "+\t\t\t\t\"\t        public void foo();\\n\" + ", "+\t\t\t\t\"\t}\\n\" + ", "+\t\t\t\t\"}\"", "+\t\t\t}", "+\t\t);", "+\t}"]}], "num": 35052}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "efcd4fce897a85f3d6367ebea77cd891", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05307cf896e70d927f1950601b54002d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java", "commitBeforeChange": "93e5ff3a6545305db70cc209a35909ba11267a03", "commitAfterChange": "68db0a50107f072688f40bcdb70cc1c2cadc3119", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic static void copySE8AnnotationsToType(BlockScope scope, Binding recipient, AnnotationBinding[] annotations)", "signatureAfterChange": " \tpublic static void copySE8AnnotationsToType(BlockScope scope, Binding recipient, Annotation[] annotations)", "diff": ["-\tpublic static void copySE8AnnotationsToType(BlockScope scope, Binding recipient, AnnotationBinding[] annotations) {", "+\tpublic static void copySE8AnnotationsToType(BlockScope scope, Binding recipient, Annotation[] annotations) {", "+\t\t\tlong se8nullBits = 0;", "+\t\t\tAnnotation se8NullAnnotation = null;", "-\t\t\t\tfinal ReferenceBinding annotationType = annotations[i].getAnnotationType();", "+\t\t\t\tAnnotationBinding annotation = annotations[i].getCompilerAnnotation();", "+\t\t\t\tif (annotation == null) continue;", "+\t\t\t\tfinal ReferenceBinding annotationType = annotation.getAnnotationType();", "-\t\t\t\t\t\tse8Annotations = new AnnotationBinding[] { annotations[i] };", "+\t\t\t\t\t\tse8Annotations = new AnnotationBinding[] { annotation };", "-\t\t\t\t\t\tse8Annotations[se8count++] = annotations[i];", "+\t\t\t\t\t\tse8Annotations[se8count++] = annotation;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (annotationType.id == TypeIds.T_ConfiguredAnnotationNonNull) {", "+\t\t\t\t\t\tse8nullBits = TagBits.AnnotationNonNull;", "+\t\t\t\t\t\tse8NullAnnotation = annotations[i];", "+\t\t\t\t\t} else if (annotationType.id == TypeIds.T_ConfiguredAnnotationNullable) {", "+\t\t\t\t\t\tse8nullBits = TagBits.AnnotationNullable;", "+\t\t\t\t\t\tse8NullAnnotation = annotations[i];", "+\t\t\t\t\t\t\tlong prevNullBits = localType.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\t\t\tif (se8nullBits != 0 && prevNullBits != se8nullBits && ((prevNullBits | se8nullBits) == TagBits.AnnotationNullMASK)) {", "+\t\t\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(se8NullAnnotation);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tlong prevNullBits = fieldType.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\t\t\tif (se8nullBits != 0 && prevNullBits != se8nullBits && ((prevNullBits | se8nullBits) == TagBits.AnnotationNullMASK)) {", "+\t\t\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(se8NullAnnotation);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tlong prevNullBits = returnType.tagBits & TagBits.AnnotationNullMASK;", "+\t\t\t\t\t\t\t\tif (se8nullBits != 0 && prevNullBits != se8nullBits && ((prevNullBits | se8nullBits) == TagBits.AnnotationNullMASK)) {", "+\t\t\t\t\t\t\t\t\tscope.problemReporter().contradictoryNullAnnotations(se8NullAnnotation);", "+\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a1a0664be72b02213f4bf78e894505b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "a11ec54f2e1e149e77b968382e79f482cc29add9", "commitAfterChange": "831d96bc5763622ed503192c35bfd6688abedd96", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\t\tif (!foundValue &&", "-\t\t\t\t\t(method.modifiers & ClassFileConstants.AccAnnotationDefault) == 0 &&", "-\t\t\t\t\t(this.bits & IsRecovered) == 0) {", "+\t\t\tif (!foundValue", "+\t\t\t\t\t&& (method.modifiers & ClassFileConstants.AccAnnotationDefault) == 0", "+\t\t\t\t\t&& (this.bits & IsRecovered) == 0", "+\t\t\t\t\t&& annotationType.isValidBinding()) {", "-\t\t\t\tscope.problemReporter().undefinedAnnotationValue(annotationType, pairs[i]);", "+\t\t\t\tif (annotationType.isValidBinding()) {", "+\t\t\t\t\tscope.problemReporter().undefinedAnnotationValue(annotationType, pairs[i]);", "+\t\t\t\t}", "-\t\t\t\tlong metaTagBits = annotationType.getAnnotationTagBits(); // could be forward reference", "-\t\t\t\tif ((metaTagBits & TagBits.AnnotationTargetMASK) == 0) // does not specify any target restriction", "+\t\t\t\tif (!annotationType.isValidBinding()) {", "+\t\t\t\t\t// no need to check annotation usage if missing", "+\t\t\t\t}", "+", "+\t\t\t\tlong metaTagBits = annotationType.getAnnotationTagBits(); // could be forward reference", "+\t\t\t\tif ((metaTagBits & TagBits.AnnotationTargetMASK) == 0) {", "+\t\t\t\t\t// does not specify any target restriction - all locations are possible including type annotations", "+\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t}", "+\t\t\t\t\tcase Binding.TYPE_USE :", "+\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\t\t\t// jsr 308", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForAnnotationType|TagBits.AnnotationForType)) != 0)", "+\t\t\t\t\t\t\tif ((metaTagBits & (TagBits.AnnotationForAnnotationType | TagBits.AnnotationForType)) != 0)", "-\t\t\t\t\t\tif (((MethodBinding)this.recipient).isConstructor()) {", "+\t\t\t\t\t\tMethodBinding methodBinding = (MethodBinding) this.recipient;", "+\t\t\t\t\t\tif (methodBinding.isConstructor()) {", "-\t\t\t\t\t\t} else \tif ((metaTagBits & TagBits.AnnotationForMethod) != 0)", "+\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForMethod) != 0) {", "+\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\t\t\t// jsr 308 - annotation on method return type", "+\t\t\t\t\t\t\tif (methodBinding.returnType != null && methodBinding.returnType.id == T_void) {", "+\t\t\t\t\t\t\t\tscope.problemReporter().illegalUsageOfTypeAnnotations(this);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForField) != 0)", "+\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForField) != 0) {", "+\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\t\t\t// jsr 308 - annotation on field type", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForParameter) != 0)", "+\t\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForParameter) != 0) {", "-\t\t\t\t\t\t} else \tif ((annotationType.tagBits & TagBits.AnnotationForLocalVariable) != 0)", "+\t\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\t\t\t\t// jsr 308 - annotation on method parameter type", "+\t\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else if ((annotationType.tagBits & TagBits.AnnotationForLocalVariable) != 0) {", "+\t\t\t\t\t\t} else if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0) {", "+\t\t\t\t\t\t\t// jsr 308 - annotation on local type", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\t\tcase Binding.TYPE_PARAMETER : // jsr308", "+\t\t\t\t\t\tif ((metaTagBits & TagBits.AnnotationForTypeParameter) != 0) {", "+\t\t\t\t\t\t\tbreak checkTargetCompatibility;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}], "num": 46351}
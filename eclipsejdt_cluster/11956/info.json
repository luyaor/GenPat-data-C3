{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac22c0135dc74744615aca46f0345eaf", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8682d1e687995d894ff4f5f419e4c56", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "68e058c49e55090c3efeb985c0093a601de509bb", "commitAfterChange": "807b33cf50fdb479db403880e28eb0989e0fbdba", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite, boolean needResolve)", "signatureAfterChange": " \tpublic FieldBinding findField(TypeBinding receiverType, char[] fieldName, InvocationSite invocationSite, boolean needResolve)", "diff": ["-\t\tboolean notVisible = false;", "+\t\tFieldBinding notVisibleField = null;", "-\t\t\t\t\tnotVisible = true;", "+\t\t\t\t\tif (notVisibleField == null)", "+\t\t\t\t\t\tnotVisibleField = field;", "-\t\tif (notVisible)", "-\t\t\treturn new ProblemFieldBinding(currentType, fieldName, NotVisible);", "+\t\tif (notVisibleField != null)", "+\t\t\treturn new ProblemFieldBinding(notVisibleField, currentType, fieldName, NotVisible);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cef53e644470f0d4dddf23d922bbc2de", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java", "commitBeforeChange": "16e02dd1e5ecae00490885481270763dbd00d718", "commitAfterChange": "ffc573c61623e258e2cbb30eb56d6aed5121c383", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tprotected boolean traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputInfo outputInfo)", "signatureAfterChange": " \tprotected boolean traverseDelta( \t\tIResourceDelta delta,  \t\tint elementType,  \t\tRootInfo rootInfo, \t\tOutputInfo outputInfo)", "diff": ["-\t\t\tIResourceDelta[] orphanChildren = new IResourceDelta[length];", "+\t\t\tIResourceDelta[] orphanChildren = null;", "-\t\t\t\t// are changes in output location filtered out ?", "-\t\t\t\tboolean outputIsFiltered = this.isOutputFiltered(outputInfo, childRes, childType);", "+\t\t\t\t// is childRes in the output folder and is it filtered out ?", "+\t\t\t\tboolean isResFilteredFromOutput = this.isResFilteredFromOutput(outputInfo, childRes, childType);", "-\t\t\t\t// traverse delta for child in the same project", "-\t\t\t\tif (!outputIsFiltered) {", "+\t\t\t\tif (!isResFilteredFromOutput) {", "-\t\t\t\t\t\t|| !this.traverseDelta(child, childType, rootInfo == null ? childInfo : rootInfo, outputInfo)) {", "+\t\t\t\t\t\t\t|| !this.traverseDelta(child, childType, rootInfo == null ? childInfo : rootInfo, outputInfo)) { // traverse delta for child in the same project", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// it is a non-java resource", "-\t\t\t\t\t\t\tif (rootInfo != null) {", "+\t\t\t\t\t\t\tif (rootInfo != null) { // if inside a package fragment root", "+\t\t\t\t\t\t\t\t\t// find the parent of the non-java resource to attach to", "+\t\t\t\t\t\t\t\t// the non-java resource (or its parent folder) will be attached to the java project", "+\t\t\t\t\t\t\t\tif (orphanChildren == null) orphanChildren = new IResourceDelta[length];", "-\t\t\tif (oneChildOnClasspath || res instanceof IProject) {", "-\t\t\t\t// add orphan children (case of non java resources under project)", "+\t\t\tif (orphanChildren != null", "+\t\t\t\t\t&& (oneChildOnClasspath // orphan children are siblings of a package fragment root", "+\t\t\t\t\t\t|| res instanceof IProject)) { // non-java resource directly under a project", "+\t\t\t\t\t\t", "+\t\t\t\t// attach orphan children", "-\t\t\t\t\t&& this.hasJavaNature(rscProject)) { // delta iff Java project (18698)", "+\t\t\t\t\t\t&& this.hasJavaNature(rscProject)) { // delta iff Java project (18698)"]}], "num": 11956}
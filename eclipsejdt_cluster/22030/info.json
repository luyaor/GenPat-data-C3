{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f225d8f4f96814da4658d6078b71bfe", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73093e22f499105b6e7a2cbc6806e7fc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " protected void codeComplete(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, org.eclipse.jdt.internal.compiler.env.ICompilationUnit unitToSkip, int position, ICompletionRequestor requestor, WorkingCopyOwner owner) throws JavaModelException", "signatureAfterChange": " protected void codeComplete(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, org.eclipse.jdt.internal.compiler.env.ICompilationUnit unitToSkip, int position, ICompletionRequestor requestor, WorkingCopyOwner owner) throws JavaModelException", "diff": ["-\tSearchableEnvironment environment = null;", "-\tNameLookup nameLookup = null;", "-\ttry {", "-\t\t// set unit to skip", "-\t\tenvironment = (SearchableEnvironment) project.getSearchableNameEnvironment();", "-\t\tenvironment.unitToSkip = unitToSkip;", "-\t", "-\t\t// set the units to look inside", "-\t\tnameLookup = project.getNameLookup();", "-\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "-\t\tnameLookup.setUnitsToLookInside(workingCopies);", "+\tSearchableEnvironment environment = (SearchableEnvironment) project.newSearchableNameEnvironment(owner);", "-\t\t// code complete", "-\t\tCompletionRequestorWrapper requestorWrapper = new CompletionRequestorWrapper(requestor,nameLookup);", "-\t\tCompletionEngine engine = new CompletionEngine(environment, requestorWrapper, project.getOptions(true), project);", "-\t\trequestorWrapper.completionEngine = engine;", "-\t\tengine.complete(cu, position, 0);", "-\t} finally {", "-\t\tif (environment != null) {", "-\t\t\tenvironment.unitToSkip = null;", "-\t\t}", "-\t\tif (nameLookup != null) {", "-\t\t\tnameLookup.setUnitsToLookInside(null);", "-\t\t}", "-\t}", "+\t// set unit to skip", "+\tenvironment.unitToSkip = unitToSkip;", "+", "+\t// code complete", "+\tCompletionRequestorWrapper requestorWrapper = new CompletionRequestorWrapper(requestor, environment.nameLookup);", "+\tCompletionEngine engine = new CompletionEngine(environment, requestorWrapper, project.getOptions(true), project);", "+\trequestorWrapper.completionEngine = engine;", "+\tengine.complete(cu, position, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee2bb34bb59f9febc40cc6701a854654", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " public String[][] resolveType(String typeName, WorkingCopyOwner owner) throws JavaModelException", "signatureAfterChange": " public String[][] resolveType(String typeName, WorkingCopyOwner owner) throws JavaModelException", "diff": ["-\tJavaProject project = (JavaProject)getJavaProject();", "-\tNameLookup lookup = null;", "-\ttry {", "-\t\t// set the units to look inside", "-\t\tlookup = project.getNameLookup();", "-\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "-\t\tlookup.setUnitsToLookInside(workingCopies);", "-\t\t\t", "-\t\t// resolve", "-\t\tISourceType info = (ISourceType) this.getElementInfo();", "-\t\tISearchableNameEnvironment environment = project.getSearchableNameEnvironment();", "-\t", "-\t\tclass TypeResolveRequestor implements ISelectionRequestor {", "-\t\t\tString[][] answers = null;", "-\t\t\tvoid acceptType(String[] answer){", "-\t\t\t\tif (answers == null) {", "-\t\t\t\t\tanswers = new String[][]{ answer };", "-\t\t\t\t} else {", "-\t\t\t\t\t// grow", "-\t\t\t\t\tint length = answers.length;", "-\t\t\t\t\tSystem.arraycopy(answers, 0, answers = new String[length+1][], 0, length);", "-\t\t\t\t\tanswers[length] = answer;", "-\t\t\t\t}", "+\tISourceType info = (ISourceType) getElementInfo();", "+\tJavaProject project = (JavaProject) getJavaProject();", "+\tISearchableNameEnvironment environment = project.newSearchableNameEnvironment(owner);", "+", "+\tclass TypeResolveRequestor implements ISelectionRequestor {", "+\t\tString[][] answers = null;", "+\t\tvoid acceptType(String[] answer){", "+\t\t\tif (answers == null) {", "+\t\t\t\tanswers = new String[][]{ answer };", "+\t\t\t} else {", "+\t\t\t\t// grow", "+\t\t\t\tint length = answers.length;", "+\t\t\t\tSystem.arraycopy(answers, 0, answers = new String[length+1][], 0, length);", "+\t\t\t\tanswers[length] = answer;", "-\t\t\tpublic void acceptClass(char[] packageName, char[] className, boolean needQualification) {", "-\t\t\t\tacceptType(new String[]  { new String(packageName), new String(className) });", "-\t\t\t}", "-\t\t\t", "-\t\t\tpublic void acceptInterface(char[] packageName, char[] interfaceName, boolean needQualification) {", "-\t\t\t\tacceptType(new String[]  { new String(packageName), new String(interfaceName) });", "-\t\t\t}", "-\t", "-\t\t\tpublic void acceptError(IProblem error) {", "-\t\t\t\t// ignore", "-\t\t\t}", "-\t\t\tpublic void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] fieldName) {", "-\t\t\t\t// ignore", "-\t\t\t}", "-\t\t\tpublic void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor) {", "-\t\t\t\t// ignore", "-\t\t\t}", "-\t\t\tpublic void acceptPackage(char[] packageName){", "-\t\t\t\t// ignore", "-\t\t\t}", "-\t", "-\t\tTypeResolveRequestor requestor = new TypeResolveRequestor();", "-\t\tSelectionEngine engine = ", "-\t\t\tnew SelectionEngine(environment, requestor, this.getJavaProject().getOptions(true));", "-\t\t\t", "-\t \tIType[] topLevelTypes = this.getCompilationUnit().getTypes();", "-\t \tint length = topLevelTypes.length;", "-\t \tSourceTypeElementInfo[] topLevelInfos = new SourceTypeElementInfo[length];", "-\t \tfor (int i = 0; i < length; i++) {", "-\t\t\ttopLevelInfos[i] = (SourceTypeElementInfo) ((SourceType)topLevelTypes[i]).getElementInfo();", "+\t\tpublic void acceptClass(char[] packageName, char[] className, boolean needQualification) {", "+\t\t\tacceptType(new String[]  { new String(packageName), new String(className) });", "-\t\t\t", "-\t\tengine.selectType(info, typeName.toCharArray(), topLevelInfos, false);", "-\t\treturn requestor.answers;", "-\t} finally {", "-\t\tif (lookup != null) {", "-\t\t\tlookup.setUnitsToLookInside(null);", "+\t\t", "+\t\tpublic void acceptInterface(char[] packageName, char[] interfaceName, boolean needQualification) {", "+\t\t\tacceptType(new String[]  { new String(packageName), new String(interfaceName) });", "+", "+\t\tpublic void acceptError(IProblem error) {", "+\t\t\t// ignore", "+\t\t}", "+\t\tpublic void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] fieldName) {", "+\t\t\t// ignore", "+\t\t}", "+\t\tpublic void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor) {", "+\t\t\t// ignore", "+\t\t}", "+\t\tpublic void acceptPackage(char[] packageName){", "+\t\t\t// ignore", "+\t\t}", "+", "+\tTypeResolveRequestor requestor = new TypeResolveRequestor();", "+\tSelectionEngine engine = ", "+\t\tnew SelectionEngine(environment, requestor, project.getOptions(true));", "+\t\t", "+ \tIType[] topLevelTypes = getCompilationUnit().getTypes();", "+ \tint length = topLevelTypes.length;", "+ \tSourceTypeElementInfo[] topLevelInfos = new SourceTypeElementInfo[length];", "+ \tfor (int i = 0; i < length; i++) {", "+\t\ttopLevelInfos[i] = (SourceTypeElementInfo) ((SourceType)topLevelTypes[i]).getElementInfo();", "+\t}", "+\t\t", "+\tengine.selectType(info, typeName.toCharArray(), topLevelInfos, false);", "+\treturn requestor.answers;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f460ef1e1fded2ded0a96bc444d670ad", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java", "commitBeforeChange": "6a300d21464d2fe06e2fb97a05726aa4bf91f99a", "commitAfterChange": "a32ab9844c9785077bc7ead2e7a3b745b89de636", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " protected IJavaElement[] codeSelect(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, int offset, int length, WorkingCopyOwner owner) throws JavaModelException", "signatureAfterChange": " protected IJavaElement[] codeSelect(org.eclipse.jdt.internal.compiler.env.ICompilationUnit cu, int offset, int length, WorkingCopyOwner owner) throws JavaModelException", "diff": ["-\tNameLookup nameLookup = null;", "-\ttry {", "-\t\t// set the units to look inside", "-\t\tnameLookup = ((JavaProject)getJavaProject()).getNameLookup();", "-\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\tICompilationUnit[] workingCopies = manager.getWorkingCopies(owner, true/*add primary WCs*/);", "-\t\tnameLookup.setUnitsToLookInside(workingCopies);", "-\t\t// code select", "-\t\tSelectionRequestor requestor= new SelectionRequestor(nameLookup, this);", "-\t\tIBuffer buffer = getBuffer();", "-\t\tif (buffer == null) {", "-\t\t\treturn requestor.getElements();", "-\t\t}", "-\t\tint end= buffer.getLength();", "-\t\tif (offset < 0 || length < 0 || offset + length > end ) {", "-\t\t\tthrow new IllegalArgumentException(\"Selected range (\"+offset+ \", \" + (offset+length)+\") is not located in supplied source range (0, \"+end+\")\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "-\t\t}", "+\tJavaProject project = (JavaProject)getJavaProject();", "+\tSearchableEnvironment environment = (SearchableEnvironment) project.newSearchableNameEnvironment(owner);", "-\t\t// fix for 1FVGGKF", "-\t\tJavaProject project = (JavaProject)getJavaProject();", "-\t\tISearchableNameEnvironment environment = project.getSearchableNameEnvironment();", "-\t\t", "-\t\t// fix for 1FVXGDK", "-\t\tSelectionEngine engine = new SelectionEngine(environment, requestor, project.getOptions(true));", "-\t\tengine.select(cu, offset, offset + length - 1);", "+\tSelectionRequestor requestor= new SelectionRequestor(environment.nameLookup, this);", "+\tIBuffer buffer = getBuffer();", "+\tif (buffer == null) {", "-\t} finally {", "-\t\tif (nameLookup != null) {", "-\t\t\tnameLookup.setUnitsToLookInside(null);", "-\t\t}", "+\tint end= buffer.getLength();", "+\tif (offset < 0 || length < 0 || offset + length > end ) {", "+\t\tthrow new IllegalArgumentException(\"Selected range (\"+offset+ \", \" + (offset+length)+\") is not located in supplied source range (0, \"+end+\")\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+\t}", "+", "+\t// fix for 1FVXGDK", "+\tSelectionEngine engine = new SelectionEngine(environment, requestor, project.getOptions(true));", "+\tengine.select(cu, offset, offset + length - 1);", "+\treturn requestor.getElements();"]}], "num": 22030}
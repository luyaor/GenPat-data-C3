{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4cccfe3bdae5d3877fa7a3e82ec39fe", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a2b40af71cb1b211fb6b83b9f4f3580", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/SuperTypeNamesCollector.java", "commitBeforeChange": "d0a6b322fe5ab50f982eb9903d93b4bae700d1e4", "commitAfterChange": "e7a500282eed24e85c3ed97d190d16fcff77b336", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " protected CompilationUnitDeclaration buildBindings(ICompilationUnit compilationUnit, boolean isTopLevelOrMember) throws JavaModelException", "signatureAfterChange": " protected CompilationUnitDeclaration buildBindings(ICompilationUnit compilationUnit, boolean isTopLevelOrMember) throws JavaModelException", "diff": ["-\tfinal IFile file = (IFile) compilationUnit.getResource();", "-\tfinal String fileName = file.getFullPath().lastSegment();", "-\tfinal char[] mainTypeName = Util.getNameWithoutJavaLikeExtension(fileName).toCharArray();", "-", "-\tIBuffer buffer = compilationUnit.getBuffer();", "-\tfinal char[] source = ", "-\t\tcompilationUnit.isWorkingCopy()", "-\t\t\t? (buffer == null ? null : buffer.getCharacters())", "-\t\t\t: Util.getResourceContentsAsCharArray(file);", "-\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit = ", "-\t\tnew org.eclipse.jdt.internal.compiler.env.ICompilationUnit() {", "-\t\t\tpublic char[] getContents() { return source; }", "-\t\t\tpublic char[] getFileName() { return fileName.toCharArray(); }", "-\t\t\tpublic char[] getMainTypeName() { return mainTypeName; }", "-\t\t\tpublic char[][] getPackageName() { return null; }", "-\t\t};", "+\torg.eclipse.jdt.internal.compiler.env.ICompilationUnit sourceUnit = (org.eclipse.jdt.internal.compiler.env.ICompilationUnit) compilationUnit;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f479c5a56ffec7ff4d9fa455fb8179e7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java", "commitBeforeChange": "3614fb7a931da6f7d6b963e79da43a1a287be280", "commitAfterChange": "f35ac795e031f468ed2702736c7462517694be67", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " protected boolean buildStructure(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "signatureAfterChange": " protected boolean buildStructure(OpenableElementInfo info, final IProgressMonitor pm, Map newElements, IResource underlyingResource) throws JavaModelException", "diff": ["-\t// get buffer contents", "+\t// ensure buffer is opened", "-\t\tbuffer = openBuffer(pm, unitInfo); // open buffer independently from the info, since we are building the info", "-\t}", "-\tfinal char[] contents;", "-\tif (buffer == null) {", "-\t\tcontents = CharOperation.NO_CHAR ;", "-\t} else {", "-\t\tchar[] characters = buffer.getCharacters();", "-\t\tcontents = characters == null ? CharOperation.NO_CHAR : characters;", "+\t\topenBuffer(pm, unitInfo); // open buffer independently from the info, since we are building the info", "-\tCompilationUnitDeclaration unit = parser.parseCompilationUnit(", "-\t\tnew org.eclipse.jdt.internal.compiler.env.ICompilationUnit() {", "-\t\t\tpublic char[] getContents() {", "-\t\t\t\treturn contents;", "-\t\t\t}", "-\t\t\tpublic char[] getMainTypeName() {", "-\t\t\t\treturn CompilationUnit.this.getMainTypeName();", "-\t\t\t}", "-\t\t\tpublic char[][] getPackageName() {", "-\t\t\t\treturn CompilationUnit.this.getPackageName();", "-\t\t\t}", "-\t\t\tpublic char[] getFileName() {", "-\t\t\t\treturn CompilationUnit.this.getFileName();", "-\t\t\t}", "-\t\t}, ", "-\t\ttrue /*full parse to find local elements*/);", "+\tCompilationUnit source = cloneCachingContents();", "-\t\t\t\tcompilationUnitDeclaration = CompilationUnitProblemFinder.process(unit, this, contents, parser, this.owner, problems, createAST, reconcileFlags, pm);", "+\t\t\t\tcompilationUnitDeclaration = CompilationUnitProblemFinder.process(source, parser, this.owner, problems, createAST, reconcileFlags, pm);", "-\t\t\t\tcompilationUnitDeclaration = CompilationUnitProblemFinder.process(unit, this, contents, parser, this.owner, problems, createAST, reconcileFlags, pm);", "+\t\t\t\tcompilationUnitDeclaration = CompilationUnitProblemFinder.process(source, parser, this.owner, problems, createAST, reconcileFlags, pm);", "+\t\t} else {", "+\t\t\tcompilationUnitDeclaration = parser.parseCompilationUnit(source, true /*full parse to find local elements*/);", "-\t\t\torg.eclipse.jdt.core.dom.CompilationUnit cu = AST.convertCompilationUnit(astLevel, unit, contents, options, computeProblems, this, reconcileFlags, pm);", "+\t\t\torg.eclipse.jdt.core.dom.CompilationUnit cu = AST.convertCompilationUnit(astLevel, compilationUnitDeclaration, options, computeProblems, source, reconcileFlags, pm);", "+}"]}], "num": 64585}
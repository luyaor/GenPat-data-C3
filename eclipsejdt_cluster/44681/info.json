{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2570feaa6df936e31113d592a8deeda", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f77358da7d7601cc3bcba1eef6c369c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "135399ac7f48d47679e738d0a583e6c95ff87fd6", "commitAfterChange": "092d49846655da2c4e511a256ba551dc4e15c674", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r public static CompilationUnitDeclaration buildCompilationUnit(\r \tISourceType sourceType,\r \tboolean needFieldsAndMethods,\r \tProblemReporter problemReporter,\r \tCompilationResult compilationResult)", "signatureAfterChange": "\r \tpublic static CompilationUnitDeclaration buildCompilationUnit(\r \t\tISourceType[] sourceTypes,\r \t\tboolean needFieldsAndMethods,\r \t\tboolean needMemberTypes,\r \t\tProblemReporter problemReporter,\r \t\tCompilationResult compilationResult)", "diff": ["- */\r", "-public static CompilationUnitDeclaration buildCompilationUnit(\r", "-\tISourceType sourceType,\r", "-\tboolean needFieldsAndMethods,\r", "-\tProblemReporter problemReporter,\r", "-\tCompilationResult compilationResult) {\r", "-\treturn buildCompilationUnit(sourceType, needFieldsAndMethods, true, problemReporter, compilationResult);\r", "-}\r", "+\t */\r", "+\tpublic static CompilationUnitDeclaration buildCompilationUnit(\r", "+\t\tISourceType[] sourceTypes,\r", "+\t\tboolean needFieldsAndMethods,\r", "+\t\tboolean needMemberTypes,\r", "+\t\tProblemReporter problemReporter,\r", "+\t\tCompilationResult compilationResult) {\r", "+\t\tISourceType sourceType = sourceTypes[0];\r", "+\t\tif (sourceType.getName() == null)\r", "+\t\t\treturn null; // do a basic test that the sourceType is valid\r", "+\t\tCompilationUnitDeclaration compilationUnit =\r", "+\t\t\tnew CompilationUnitDeclaration(problemReporter, compilationResult, 0);\r", "+\t\t// not filled at this point\r", "+\t\t/* only positions available */\r", "+\t\tint start = sourceType.getNameSourceStart();\r", "+\t\tint end = sourceType.getNameSourceEnd();\r", "+\t\t/* convert package and imports */\r", "+\t\tif (sourceType.getPackageName() != null\r", "+\t\t\t&& sourceType.getPackageName().length > 0)\r", "+\t\t\t// if its null then it is defined in the default package\r", "+\t\t\tcompilationUnit.currentPackage =\r", "+\t\t\t\tcreateImportReference(sourceType.getPackageName(), start, end);\r", "+\t\tchar[][] importNames = sourceType.getImports();\r", "+\t\tint importCount = importNames == null ? 0 : importNames.length;\r", "+\t\tcompilationUnit.imports = new ImportReference[importCount];\r", "+\t\tfor (int i = 0; i < importCount; i++)\r", "+\t\t\tcompilationUnit.imports[i] = createImportReference(importNames[i], start, end);\r", "+\t\t/* convert type(s) */\r", "+\t\tint typeCount = sourceTypes.length;\r", "+\t\tcompilationUnit.types = new TypeDeclaration[typeCount];\r", "+\t\tfor (int i = 0; i < typeCount; i++) {\r", "+\t\t\tcompilationUnit.types[i] =\r", "+\t\t\t\tconvert(sourceTypes[i], needFieldsAndMethods, needMemberTypes);\r", "+\t\treturn compilationUnit;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df8c69f0b53e005de9356c772caada77", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "40383c2427f4645edcb9e28f2e15a8a778f0a951", "commitAfterChange": "a56fdb9e1b8e5c1a02fedba085001b6a52d742b7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r public static CompilationUnitDeclaration buildCompilationUnit(\r \tISourceType sourceType,\r \tboolean needFieldsAndMethods,\r \tProblemReporter problemReporter,\r \tCompilationResult compilationResult)", "signatureAfterChange": "\r \tpublic static CompilationUnitDeclaration buildCompilationUnit(\r \t\tISourceType[] sourceTypes,\r \t\tboolean needFieldsAndMethods,\r \t\tboolean needMemberTypes,\r \t\tProblemReporter problemReporter,\r \t\tCompilationResult compilationResult)", "diff": ["- */\r", "-public static CompilationUnitDeclaration buildCompilationUnit(\r", "-\tISourceType sourceType,\r", "-\tboolean needFieldsAndMethods,\r", "-\tProblemReporter problemReporter,\r", "-\tCompilationResult compilationResult) {\r", "-\treturn buildCompilationUnit(sourceType, needFieldsAndMethods, true, problemReporter, compilationResult);\r", "-}\r", "+\t */\r", "+\tpublic static CompilationUnitDeclaration buildCompilationUnit(\r", "+\t\tISourceType[] sourceTypes,\r", "+\t\tboolean needFieldsAndMethods,\r", "+\t\tboolean needMemberTypes,\r", "+\t\tProblemReporter problemReporter,\r", "+\t\tCompilationResult compilationResult) {\r", "+\t\tISourceType sourceType = sourceTypes[0];\r", "+\t\tif (sourceType.getName() == null)\r", "+\t\t\treturn null; // do a basic test that the sourceType is valid\r", "+\t\tCompilationUnitDeclaration compilationUnit =\r", "+\t\t\tnew CompilationUnitDeclaration(problemReporter, compilationResult, 0);\r", "+\t\t// not filled at this point\r", "+\t\t/* only positions available */\r", "+\t\tint start = sourceType.getNameSourceStart();\r", "+\t\tint end = sourceType.getNameSourceEnd();\r", "+\t\t/* convert package and imports */\r", "+\t\tif (sourceType.getPackageName() != null\r", "+\t\t\t&& sourceType.getPackageName().length > 0)\r", "+\t\t\t// if its null then it is defined in the default package\r", "+\t\t\tcompilationUnit.currentPackage =\r", "+\t\t\t\tcreateImportReference(sourceType.getPackageName(), start, end);\r", "+\t\tchar[][] importNames = sourceType.getImports();\r", "+\t\tint importCount = importNames == null ? 0 : importNames.length;\r", "+\t\tcompilationUnit.imports = new ImportReference[importCount];\r", "+\t\tfor (int i = 0; i < importCount; i++)\r", "+\t\t\tcompilationUnit.imports[i] = createImportReference(importNames[i], start, end);\r", "+\t\t/* convert type(s) */\r", "+\t\tint typeCount = sourceTypes.length;\r", "+\t\tcompilationUnit.types = new TypeDeclaration[typeCount];\r", "+\t\tfor (int i = 0; i < typeCount; i++) {\r", "+\t\t\tcompilationUnit.types[i] =\r", "+\t\t\t\tconvert(sourceTypes[i], needFieldsAndMethods, needMemberTypes);\r", "+\t\treturn compilationUnit;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb84a9aafc5cb1b401bbfe2a05fb0f7d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "ba238895da0e9d116073a555bfb1c09f876bedf2", "commitAfterChange": "44855522f87e615f1ca0bfcda268b074e4443dfe", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r public static CompilationUnitDeclaration buildCompilationUnit(\r \tISourceType sourceType,\r \tboolean needFieldsAndMethods,\r \tProblemReporter problemReporter,\r \tCompilationResult compilationResult)", "signatureAfterChange": "\r \tpublic static CompilationUnitDeclaration buildCompilationUnit(\r \t\tISourceType[] sourceTypes,\r \t\tboolean needFieldsAndMethods,\r \t\tboolean needMemberTypes,\r \t\tProblemReporter problemReporter,\r \t\tCompilationResult compilationResult)", "diff": ["- */\r", "-public static CompilationUnitDeclaration buildCompilationUnit(\r", "-\tISourceType sourceType,\r", "-\tboolean needFieldsAndMethods,\r", "-\tProblemReporter problemReporter,\r", "-\tCompilationResult compilationResult) {\r", "-\treturn buildCompilationUnit(sourceType, needFieldsAndMethods, true, problemReporter, compilationResult);\r", "-}\r", "+\t */\r", "+\tpublic static CompilationUnitDeclaration buildCompilationUnit(\r", "+\t\tISourceType[] sourceTypes,\r", "+\t\tboolean needFieldsAndMethods,\r", "+\t\tboolean needMemberTypes,\r", "+\t\tProblemReporter problemReporter,\r", "+\t\tCompilationResult compilationResult) {\r", "+\t\tISourceType sourceType = sourceTypes[0];\r", "+\t\tif (sourceType.getName() == null)\r", "+\t\t\treturn null; // do a basic test that the sourceType is valid\r", "+\t\tCompilationUnitDeclaration compilationUnit =\r", "+\t\t\tnew CompilationUnitDeclaration(problemReporter, compilationResult, 0);\r", "+\t\t// not filled at this point\r", "+\t\t/* only positions available */\r", "+\t\tint start = sourceType.getNameSourceStart();\r", "+\t\tint end = sourceType.getNameSourceEnd();\r", "+\t\t/* convert package and imports */\r", "+\t\tif (sourceType.getPackageName() != null\r", "+\t\t\t&& sourceType.getPackageName().length > 0)\r", "+\t\t\t// if its null then it is defined in the default package\r", "+\t\t\tcompilationUnit.currentPackage =\r", "+\t\t\t\tcreateImportReference(sourceType.getPackageName(), start, end);\r", "+\t\tchar[][] importNames = sourceType.getImports();\r", "+\t\tint importCount = importNames == null ? 0 : importNames.length;\r", "+\t\tcompilationUnit.imports = new ImportReference[importCount];\r", "+\t\tfor (int i = 0; i < importCount; i++)\r", "+\t\t\tcompilationUnit.imports[i] = createImportReference(importNames[i], start, end);\r", "+\t\t/* convert type(s) */\r", "+\t\tint typeCount = sourceTypes.length;\r", "+\t\tcompilationUnit.types = new TypeDeclaration[typeCount];\r", "+\t\tfor (int i = 0; i < typeCount; i++) {\r", "+\t\t\tcompilationUnit.types[i] =\r", "+\t\t\t\tconvert(sourceTypes[i], needFieldsAndMethods, needMemberTypes);\r", "+\t\treturn compilationUnit;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffa75d34b780be1ad4b505b80acce089", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java", "commitBeforeChange": "7ff0ccf2d889c8ccb2eec99187eac9efe4dc4e22", "commitAfterChange": "7e5cc03e445550d3cbc10c611218c79332074276", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r public static CompilationUnitDeclaration buildCompilationUnit(\r \tISourceType sourceType,\r \tboolean needFieldsAndMethods,\r \tProblemReporter problemReporter,\r \tCompilationResult compilationResult)", "signatureAfterChange": "\r \tpublic static CompilationUnitDeclaration buildCompilationUnit(\r \t\tISourceType[] sourceTypes,\r \t\tboolean needFieldsAndMethods,\r \t\tboolean needMemberTypes,\r \t\tProblemReporter problemReporter,\r \t\tCompilationResult compilationResult)", "diff": ["- */\r", "-public static CompilationUnitDeclaration buildCompilationUnit(\r", "-\tISourceType sourceType,\r", "-\tboolean needFieldsAndMethods,\r", "-\tProblemReporter problemReporter,\r", "-\tCompilationResult compilationResult) {\r", "-\treturn buildCompilationUnit(sourceType, needFieldsAndMethods, true, problemReporter, compilationResult);\r", "-}\r", "+\t */\r", "+\tpublic static CompilationUnitDeclaration buildCompilationUnit(\r", "+\t\tISourceType[] sourceTypes,\r", "+\t\tboolean needFieldsAndMethods,\r", "+\t\tboolean needMemberTypes,\r", "+\t\tProblemReporter problemReporter,\r", "+\t\tCompilationResult compilationResult) {\r", "+\t\tISourceType sourceType = sourceTypes[0];\r", "+\t\tif (sourceType.getName() == null)\r", "+\t\t\treturn null; // do a basic test that the sourceType is valid\r", "+\t\tCompilationUnitDeclaration compilationUnit =\r", "+\t\t\tnew CompilationUnitDeclaration(problemReporter, compilationResult, 0);\r", "+\t\t// not filled at this point\r", "+\t\t/* only positions available */\r", "+\t\tint start = sourceType.getNameSourceStart();\r", "+\t\tint end = sourceType.getNameSourceEnd();\r", "+\t\t/* convert package and imports */\r", "+\t\tif (sourceType.getPackageName() != null\r", "+\t\t\t&& sourceType.getPackageName().length > 0)\r", "+\t\t\t// if its null then it is defined in the default package\r", "+\t\t\tcompilationUnit.currentPackage =\r", "+\t\t\t\tcreateImportReference(sourceType.getPackageName(), start, end);\r", "+\t\tchar[][] importNames = sourceType.getImports();\r", "+\t\tint importCount = importNames == null ? 0 : importNames.length;\r", "+\t\tcompilationUnit.imports = new ImportReference[importCount];\r", "+\t\tfor (int i = 0; i < importCount; i++)\r", "+\t\t\tcompilationUnit.imports[i] = createImportReference(importNames[i], start, end);\r", "+\t\t/* convert type(s) */\r", "+\t\tint typeCount = sourceTypes.length;\r", "+\t\tcompilationUnit.types = new TypeDeclaration[typeCount];\r", "+\t\tfor (int i = 0; i < typeCount; i++) {\r", "+\t\t\tcompilationUnit.types[i] =\r", "+\t\t\t\tconvert(sourceTypes[i], needFieldsAndMethods, needMemberTypes);\r", "+\t\treturn compilationUnit;\r"]}], "num": 44681}
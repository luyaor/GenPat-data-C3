{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5db68b097ea1d3185c49187d23e0f10b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccfce7ca5f32a10f2825850704a4117d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java", "commitBeforeChange": "7086675b9016b36eb3327ff794af3728a774a189", "commitAfterChange": "08be90368f9af9d6750464056e901efd458851a8", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": " private void toString(StringBuffer buffer, IType type, int indent, boolean ascendant)", "signatureAfterChange": " private void toString(StringBuffer buffer, IJavaElement type, int indent, boolean ascendant)", "diff": ["-private void toString(StringBuffer buffer, IType type, int indent, boolean ascendant) {", "-\tIType[] types= ascendant ? getSupertypes(type) : getSubtypes(type);", "+private void toString(StringBuffer buffer, IJavaElement type, int indent, boolean ascendant) {", "+\tIType[] types= ascendant ? getSupertypes((IType) type) : getSubtypes((IType) type);", "-\t\tfor (int j= 0; j < indent; j++) {", "-\t\t\tbuffer.append(\"  \"); //$NON-NLS-1$", "-\t\t}", "-\t\tJavaElement element = (JavaElement)sortedTypes[i];", "-\t\tbuffer.append(element.toStringWithAncestors(false/*don't show key*/));", "-\t\tbuffer.append('\\n');", "-\t\ttoString(buffer, types[i], indent + 1, ascendant);", "+\t\ttoString(buffer, sortedTypes[i], indent + 1);", "+\t\ttoString(buffer, sortedTypes[i], indent + 1, ascendant);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffcd60558c6243546dfca00e4ecfb28b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java", "commitBeforeChange": "c67ad5667d81e7ca8719e3b0faf6c7f2b84f03ce", "commitAfterChange": "55a2e1357c3327be6468ccea0fa1bd5884ed35ad", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "signatureAfterChange": " \tprivate TypeBinding internalResolveType(Scope scope, boolean checkBounds)", "diff": ["-// TODO (philippe)\tif ((this.bits & ASTNode.IsSuperType) != 0)", "-\t\t\t\t\t\tfor (int j = 0; j < argLength; j++)", "-\t\t\t\t\t\t    if (typeVariables[j].boundCheck(parameterizedType, argTypes[j]) != TypeConstants.OK)", "-\t\t\t\t\t\t\t\tscope.problemReporter().typeMismatchError(argTypes[j], typeVariables[j], currentType, args[j]);", "+\t\t\t\t\t\tparameterizedType.boundCheck(scope, args);", "-// TODO (philippe)\tif ((this.bits & ASTNode.IsSuperType) != 0)"]}], "num": 29654}
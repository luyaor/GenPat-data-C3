{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8aad7bacb16d45a9dd249dff03195d7c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a97b289d8ed0fa21f9f065c7877bb126", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/EqualExpression.java", "commitBeforeChange": "204668dea8f27b8498b13996f1332d4610d869bb", "commitAfterChange": "3d41ce4b49b9059b7e12f0754609f08de9a28a4f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate void checkVariableComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse, LocalVariableBinding local, int nullStatus, Expression reference)", "signatureAfterChange": " \tprivate void checkVariableComparison(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo, FlowInfo initsWhenTrue, FlowInfo initsWhenFalse, LocalVariableBinding local, int nullStatus, Expression reference)", "diff": ["-\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference, ", "-\t\t\t\t\tFlowContext.CAN_ONLY_NULL_NON_NULL, flowInfo);", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference, ", "+\t\t\t\t\t\t\tFlowContext.CAN_ONLY_NULL_NON_NULL | FlowContext.IN_COMPARISON_NULL, flowInfo);", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference, ", "+\t\t\t\t\t\t\tFlowContext.CAN_ONLY_NULL_NON_NULL | FlowContext.IN_COMPARISON_NON_NULL, flowInfo);", "-\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference, ", "-\t\t\t\t\tFlowContext.CAN_ONLY_NULL, flowInfo);", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference, ", "+\t\t\t\t\t\t\tFlowContext.CAN_ONLY_NULL | FlowContext.IN_COMPARISON_NON_NULL, flowInfo);", "+\t\t\t\t} else {", "+\t\t\t\t\tflowContext.recordUsingNullReference(scope, local, reference, ", "+\t\t\t\t\t\t\tFlowContext.CAN_ONLY_NULL | FlowContext.IN_COMPARISON_NULL, flowInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf28f5f1113db88054c0d71d2c9f3e8f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "d81f79f00816b88315f5cebda6e215147f9e97f8", "commitAfterChange": "a97d6cfe4321b5c45bce6a9e682825ee765b8f5b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "signatureAfterChange": " \tpublic static TypeBinding substitute(Substitution substitution, TypeBinding originalType)", "diff": ["-\t\t\t\t\t\t\t\toriginalParameterizedType.genericType(), substitutedEnclosing);", "+\t\t\t\t\t\t\t\toriginalParameterizedType.genericType(), substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t\t\treturn originalParameterizedType.environment.createRawType(originalParameterizedType.genericType(), substitutedEnclosing);", "+\t\t\t\t\t\treturn originalParameterizedType.environment.createRawType(originalParameterizedType.genericType(), substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t\t\t\toriginalParameterizedType.genericType(), substitutedArguments, substitutedEnclosing);", "+\t\t\t\t\t\t\toriginalParameterizedType.genericType(), substitutedArguments, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t\treturn originalArrayType.environment.createArrayType(substitute.leafComponentType(), substitute.dimensions() + originalType.dimensions());", "+\t\t\t\t\treturn originalArrayType.environment.createArrayType(substitute.leafComponentType(), substitute.dimensions() + originalType.dimensions(), originalType.getTypeAnnotations());", "-\t\t        \t\treturn wildcard.environment.createWildcard(wildcard.genericType, wildcard.rank, substitutedBound, substitutedOtherBounds, wildcard.boundKind);", "+\t\t        \t\treturn wildcard.environment.createWildcard(wildcard.genericType, wildcard.rank, substitutedBound, substitutedOtherBounds, wildcard.boundKind, wildcard.getTypeAnnotations());", "-\t\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing);", "+\t\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t\t\t? substitution.environment().createRawType(originalReferenceType, substitutedEnclosing)", "-\t\t\t\t\t\t:  substitution.environment().createParameterizedType(originalReferenceType, null, substitutedEnclosing);", "+\t\t\t\t\t\t? substitution.environment().createRawType(originalReferenceType, substitutedEnclosing, originalType.getTypeAnnotations())", "+\t\t\t\t\t\t:  substitution.environment().createParameterizedType(originalReferenceType, null, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing);", "+\t\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing);", "+\t\t\t\t\treturn substitution.environment().createRawType(originalReferenceType, substitutedEnclosing, originalType.getTypeAnnotations());", "-\t\t\t\treturn substitution.environment().createParameterizedType(originalReferenceType, substitutedArguments, substitutedEnclosing);", "+\t\t\t\treturn substitution.environment().createParameterizedType(originalReferenceType, substitutedArguments, substitutedEnclosing, originalType.getTypeAnnotations());"]}], "num": 32853}
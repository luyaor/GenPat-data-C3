{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fad0b241c3aa5f551e82d9a1c405a168", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f5a74665d4058b353f8110911607733", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "b04602938404af4f8569a399fb36a5018768a262", "commitAfterChange": "6a230a9d6ae1a4a6adbf38879cb9ee685eccffe9", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \tpublic void activateProcessing()", "signatureAfterChange": "\r public void activateProcessing()", "diff": ["-\t */\r", "-\tpublic void activateProcessing() {\r", "-\t\ttry {\r", "-\t\t\tThread.currentThread().sleep(10000);\r", "-\t\t\t// wait 10 seconds so as not to interfere with plugin startup\r", "-\t\t} catch (InterruptedException ie) {\r", "+ */\r", "+public void activateProcessing() {\r", "+\ttry {\r", "+\t\tThread.currentThread().sleep(10000); // wait 10 seconds so as not to interfere with plugin startup\r", "+\t} catch (InterruptedException ie) {\r", "+\t}\t\r", "+\tcheckIndexConsistency();\r", "+\tsuper.activateProcessing();\r", "+}\r", "-\t\tcheckIndexConsistency();\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b12639dccc0b5c16430edf6ed375674e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java", "commitBeforeChange": "d5bf24a5adf23d2657a6e779176b2c9b14138ec2", "commitAfterChange": "fe650c9f34b5f46aea24c9c914c82b1f8d0ec026", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public void discardJobsUntilNextProjectAddition(String jobFamily)", "signatureAfterChange": "\r public void discardJobsUntilNextProjectAddition(String jobFamily)", "diff": ["-\t\t// wait until current job has completed\r", "-\t\twhile (thread != null && executing){\r", "-\t\t\ttry {\r", "-\t\t\t\tThread.currentThread().sleep(50);\r", "-\t\t\t} catch(InterruptedException e){\r", "-\t\t\t}\r", "-\t\t}\r", "-\r", "-\t\t\tif (jobFamily == null) continue; // discard\r", "-\t\t\tif (currentJob.belongsTo(jobFamily)){ // might discard\r", "-\t\t\t\tif (!(foundProjectAddition || (foundProjectAddition = currentJob instanceof IndexAllProject))) continue; // discard\r", "+\t\t\tboolean discard = jobFamily == null;\r", "+\t\t\tif (!discard && currentJob.belongsTo(jobFamily)){ // might discard\r", "+\t\t\t\tif (!(foundProjectAddition || (foundProjectAddition = currentJob instanceof IndexAllProject))) {\r", "+\t\t\t\t\tdiscard = true;\r", "+\t\t\t\t}\r", "-\t\t\tawaitingJobs[++loc] = currentJob;\r", "+\t\t\tif (discard) {\r", "+\t\t\t\tif (i == jobStart) {\r", "+\t\t\t\t\t// request a cancel and wait until current job has accepted the cancel\r", "+\t\t\t\t\tcurrentJob.cancel();\r", "+\t\t\t\t\twhile (thread != null && executing){\r", "+\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\tThread.currentThread().sleep(50);\r", "+\t\t\t\t\t\t} catch(InterruptedException e){\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\tawaitingJobs[++loc] = currentJob;\r", "+\t\t\t}\r"]}], "num": 35471}
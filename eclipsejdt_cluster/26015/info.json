{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44d7f4c8cbb48f2010d49d3ee4ec6faf", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52eac76cdbdbd22062888bf6c71d28cc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "78c62e3a4157070f714848f4de312a55f14f5144", "commitAfterChange": "fb48e11da0ebe84c63fab7b3cb5afd39c0ba6101", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " \tprivate TypeBinding leastContainingTypeArgument(TypeBinding u, TypeBinding v, ReferenceBinding genericType, int rank)", "signatureAfterChange": " \tprivate TypeBinding leastContainingTypeArgument(TypeBinding u, TypeBinding v, ReferenceBinding genericType, int rank, List lubStack)", "diff": ["-\tprivate TypeBinding leastContainingTypeArgument(TypeBinding u, TypeBinding v, ReferenceBinding genericType, int rank) {", "+\tprivate TypeBinding leastContainingTypeArgument(TypeBinding u, TypeBinding v, ReferenceBinding genericType, int rank, List lubStack) {", "-\t\t\t\t\t\t\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{wildU.bound,wildV.bound});", "+\t\t\t\t\t\t\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{wildU.bound,wildV.bound}, lubStack);", "-\t\t\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, lub, Wildcard.EXTENDS);\t", "+\t\t\t\t\t\t\t\t// int is returned to denote cycle detected in lub computation - stop recursion by answering unbound wildcard", "+\t\t\t\t\t\t\t\tif (lub == IntBinding) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, lub, null /*no extra bound*/, Wildcard.EXTENDS);\t", "-\t\t\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, null, Wildcard.UNBOUND);", "+\t\t\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "-\t\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, glb[0], Wildcard.SUPER);\t// TODO (philippe) need to capture entire bounds", "+\t\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, glb[0], null /*no extra bound*/, Wildcard.SUPER);\t// TODO (philippe) need to capture entire bounds", "-\t\t\t\t\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{u,wildV.bound});", "+\t\t\t\t\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{u,wildV.bound}, lubStack);", "-\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, lub, Wildcard.EXTENDS);\t", "+\t\t\t\t\t\t// int is returned to denote cycle detected in lub computation - stop recursion by answering unbound wildcard", "+\t\t\t\t\t\tif (lub == IntBinding) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, lub, null /*no extra bound*/, Wildcard.EXTENDS);\t", "-\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, glb[0], Wildcard.SUPER);\t// TODO (philippe) need to capture entire bounds", "+\t\t\t\t\t\treturn environment().createWildcard(genericType, rank, glb[0], null /*no extra bound*/, Wildcard.SUPER);\t// TODO (philippe) need to capture entire bounds", "-\t\t\t\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{wildU.bound, v});", "+\t\t\t\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{wildU.bound, v}, lubStack);", "-\t\t\t\t\treturn environment().createWildcard(genericType, rank, lub, Wildcard.EXTENDS);\t", "+\t\t\t\t\t// int is returned to denote cycle detected in lub computation - stop recursion by answering unbound wildcard", "+\t\t\t\t\tif (lub == IntBinding) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\t\t\t\treturn environment().createWildcard(genericType, rank, lub, null /*no extra bound*/, Wildcard.EXTENDS);\t", "-\t\t\t\t\treturn environment().createWildcard(genericType, rank, glb[0], Wildcard.SUPER); // TODO (philippe) need to capture entire bounds\t\t", "+\t\t\t\t\treturn environment().createWildcard(genericType, rank, glb[0], null /*no extra bound*/, Wildcard.SUPER); // TODO (philippe) need to capture entire bounds\t\t", "-\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{u,v});", "+\t\tTypeBinding lub = lowerUpperBound(new TypeBinding[]{u,v}, lubStack);", "-\t\treturn environment().createWildcard(genericType, rank, lub, Wildcard.EXTENDS);", "+\t\t// int is returned to denote cycle detected in lub computation - stop recursion by answering unbound wildcard", "+\t\tif (lub == IntBinding) return environment().createWildcard(genericType, rank, null, null /*no extra bound*/, Wildcard.UNBOUND);", "+\t\treturn environment().createWildcard(genericType, rank, lub, null /*no extra bound*/, Wildcard.EXTENDS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db37642f9e527d2bcb6fc4569acf00a3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java", "commitBeforeChange": "625969c0953342413f4e431356ea71fb95e0a242", "commitAfterChange": "2e2135e23ec5738f13780e9b130faac2db0c376b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  public TypeBinding convertEliminatingTypeVariables(TypeBinding originalType, ReferenceBinding genericType, int rank, TypeVariableBinding eliminatedVariable)", "signatureAfterChange": "  public TypeBinding convertEliminatingTypeVariables(TypeBinding originalType, ReferenceBinding genericType, int rank, Set eliminatedVariables)", "diff": ["-public TypeBinding convertEliminatingTypeVariables(TypeBinding originalType, ReferenceBinding genericType, int rank, TypeVariableBinding eliminatedVariable) {", "+public TypeBinding convertEliminatingTypeVariables(TypeBinding originalType, ReferenceBinding genericType, int rank, Set eliminatedVariables) {", "-\t\t\t\tTypeBinding substitute = convertEliminatingTypeVariables(originalLeafComponentType, genericType, rank, eliminatedVariable); // substitute could itself be array type", "+\t\t\t\tTypeBinding substitute = convertEliminatingTypeVariables(originalLeafComponentType, genericType, rank, eliminatedVariables); // substitute could itself be array type", "-\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) convertEliminatingTypeVariables(originalEnclosing, genericType, rank, eliminatedVariable);", "+\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) convertEliminatingTypeVariables(originalEnclosing, genericType, rank, eliminatedVariables);", "-\t\t\t\t\tTypeBinding substitutedArgument = convertEliminatingTypeVariables(originalArgument, paramType.genericType(), i, eliminatedVariable);", "+\t\t\t\t\tTypeBinding substitutedArgument = convertEliminatingTypeVariables(originalArgument, paramType.genericType(), i, eliminatedVariables);", "-\t\t\t\tif (eliminatedVariable == originalType) {", "+\t\t\t\tif (eliminatedVariables != null && eliminatedVariables.contains(originalType)) {", "-\t\t\t\tTypeBinding substitutedUpperBound = convertEliminatingTypeVariables(originalUpperBound, genericType, rank, variable);", "+\t\t\t\tif (eliminatedVariables == null) {", "+\t\t\t\t\teliminatedVariables = new HashSet(2);", "+\t\t\t\t}", "+\t\t\t\teliminatedVariables.add(variable);", "+\t\t\t\tTypeBinding substitutedUpperBound = convertEliminatingTypeVariables(originalUpperBound, genericType, rank, eliminatedVariables);", "+\t\t\t\teliminatedVariables.remove(variable);", "-\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) convertEliminatingTypeVariables(originalEnclosing, genericType, rank, eliminatedVariable);", "+\t\t\t\t\tsubstitutedEnclosing = (ReferenceBinding) convertEliminatingTypeVariables(originalEnclosing, genericType, rank, eliminatedVariables);", "-\t\t\t\t\tTypeBinding substitutedArgument = convertEliminatingTypeVariables(originalArgument, currentType, i, eliminatedVariable);", "+\t\t\t\t\tTypeBinding substitutedArgument = convertEliminatingTypeVariables(originalArgument, currentType, i, eliminatedVariables);", "-\t\t\t\t\tsubstitutedBound = convertEliminatingTypeVariables(originalBound, genericType, rank, eliminatedVariable);", "+\t\t\t\t\tsubstitutedBound = convertEliminatingTypeVariables(originalBound, genericType, rank, eliminatedVariables);", "-\t\t\t\t\tsubstitutedBound = convertEliminatingTypeVariables(originalBound, genericType, rank, eliminatedVariable);", "+\t\t\t\t\tsubstitutedBound = convertEliminatingTypeVariables(originalBound, genericType, rank, eliminatedVariables);", "-\t\t\t\t\tTypeBinding substitutedOtherBound = convertEliminatingTypeVariables(originalOtherBound, genericType, rank, eliminatedVariable);", "+\t\t\t\t\tTypeBinding substitutedOtherBound = convertEliminatingTypeVariables(originalOtherBound, genericType, rank, eliminatedVariables);"]}], "num": 26015}
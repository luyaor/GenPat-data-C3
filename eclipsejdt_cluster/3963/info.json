{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a6109b52488549607524cc513674111", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0700da0be53438996eff8752b02dd004", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "ed216bad8ac7db85d4e5d7fd2492a6cf18c498b9", "commitAfterChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " public FileSystem(String[] classpathNames, String[] initialFileNames, String encoding, int[] classpathDirectoryModes)", "signatureAfterChange": " public FileSystem(String[] classpathNames, String[] initialFileNames, String encoding, int[] classpathDirectoryModes)", "diff": ["-\tint classpathSize = classpathNames.length;", "+\tfinal int classpathSize = classpathNames.length;", "-\tint problemsOccured = 0;", "+\tint counter = 0;", "-\t\tthis.classpaths[i] = getClasspath(classpathNames[i], encoding,", "+\t\tClasspath classpath = getClasspath(classpathNames[i], encoding,", "-\t\tif (this.classpaths[i] == null)", "-\t\t\tproblemsOccured++;", "+\t\ttry {", "+\t\t\tclasspath.initialize();", "+\t\t\tthis.classpaths[counter++] = classpath;", "+\t\t} catch (IOException e) {", "+\t\t\t// ignore", "+\t\t}", "-\tif (problemsOccured > 0) {", "-\t\tClasspath[] newPaths = new Classpath[classpathSize - problemsOccured];", "-\t\tfor (int i = 0, current = 0; i < classpathSize; i++)", "-\t\t\tif (this.classpaths[i] != null) {", "-\t\t\t\tnewPaths[current] = this.classpaths[i];", "-\t\t\t}", "-\t\tclasspathSize = newPaths.length;", "-\t\tthis.classpaths = newPaths;", "+\tif (counter != classpathSize) {", "+\t\tSystem.arraycopy(this.classpaths, 0, (this.classpaths = new Classpath[counter]), 0, counter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2218b838071cc7d1dcf682212960b4f3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalExtendedCompletionContext.java", "commitBeforeChange": "fd3ab9c75de2623a0c445ae20bbf9555b802842b", "commitAfterChange": "dc82ed373b675aa38d1bde68b062faa0d442c79e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tprivate TypeBinding getTypeFromSignature(String typeSignature, Scope scope)", "signatureAfterChange": " \t \tprivate TypeBinding getTypeFromSignature(String typeSignature, Scope scope)", "diff": ["-\t\t\ttypeVariables = methodDeclaration.binding.typeVariables;", "+\t\t\tTypeParameter[] typeParameters = methodDeclaration.typeParameters();", "+\t\t\tif (typeParameters != null && typeParameters.length > 0) {", "+\t\t\t\tint length = typeParameters.length;", "+\t\t\t\tint count = 0;", "+\t\t\t\ttypeVariables = new TypeVariableBinding[length];", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tif (typeParameters[i].binding != null) {", "+\t\t\t\t\t\ttypeVariables[count++] = typeParameters[i].binding;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif (count != length) {", "+\t\t\t\t\tSystem.arraycopy(typeVariables, 0, typeVariables = new TypeVariableBinding[count], 0, count);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "247ad34448d61382d951d059a6e40243", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationBinding.java", "commitBeforeChange": "76d395ddd90431ef7cb4486078cb51e978a5ad63", "commitAfterChange": "e6a17a8fa461eb3f06e289d5024883e9ab8df861", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic IMemberValuePairBinding[] getAllMemberValuePairs()", "signatureAfterChange": "  \tpublic IMemberValuePairBinding[] getAllMemberValuePairs()", "diff": ["-\t\tif (typeBinding == null) return pairs;", "+\t\tif (typeBinding == null || ((typeBinding.tagBits & TagBits.HasMissingType) != 0)) return pairs;", "-\t\tfor (int i = 0; i < declaredLength; i++)", "-\t\t\ttable.put(((MemberValuePairBinding) pairs[i]).internalName(), pairs[i]);", "+\t\tfor (int i = 0; i < declaredLength; i++) {", "+\t\t\tchar[] internalName = ((MemberValuePairBinding) pairs[i]).internalName();", "+\t\t\tif (internalName == null) continue;", "+\t\t\ttable.put(internalName, pairs[i]);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56948670b7534dc8738716b494c48a3f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationBinding.java", "commitBeforeChange": "76d395ddd90431ef7cb4486078cb51e978a5ad63", "commitAfterChange": "e6a17a8fa461eb3f06e289d5024883e9ab8df861", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic IMemberValuePairBinding[] getDeclaredMemberValuePairs()", "signatureAfterChange": " \t \tpublic IMemberValuePairBinding[] getDeclaredMemberValuePairs()", "diff": ["+\t\tReferenceBinding typeBinding = this.binding.getAnnotationType();", "+\t\tif (typeBinding == null || ((typeBinding.tagBits & TagBits.HasMissingType) != 0)) {", "+\t\t\treturn MemberValuePairBinding.NoPair;", "+\t\t}", "-\t\tfor (int i = 0; i < length; i++)", "-\t\t\tpairs[i] = this.bindingResolver.getMemberValuePairBinding(internalPairs[i]);", "+\t\tint counter = 0;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tElementValuePair valuePair = internalPairs[i];", "+\t\t\tif (valuePair.binding == null) continue;", "+\t\t\tpairs[counter++] = this.bindingResolver.getMemberValuePairBinding(valuePair);", "+\t\t}", "+\t\tif (counter == 0) return MemberValuePairBinding.NoPair;", "+\t\tif (counter != length) {", "+\t\t\t// resize", "+\t\t\tSystem.arraycopy(pairs, 0, (pairs = new MemberValuePairBinding[counter]), 0, counter);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6dc780041f780a0b9cd6d567fb77c889", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java", "commitBeforeChange": "ed216bad8ac7db85d4e5d7fd2492a6cf18c498b9", "commitAfterChange": "45e574c9370a9e1fe1175a8641ff2dc7a4b4a6e7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " FileSystem(Classpath[] classpaths, String[] initialFileNames)", "signatureAfterChange": " FileSystem(Classpath[] paths, String[] initialFileNames)", "diff": ["-FileSystem(Classpath[] classpaths, String[] initialFileNames) {", "-\tthis.classpaths = classpaths;", "+FileSystem(Classpath[] paths, String[] initialFileNames) {", "+\tfinal int length = paths.length;", "+\tint counter = 0;", "+\tthis.classpaths = new FileSystem.Classpath[length];", "+\tfor (int i = 0; i < length; i++) {", "+\t\tfinal Classpath classpath = paths[i];", "+\t\ttry {", "+\t\t\tclasspath.initialize();", "+\t\t\tthis.classpaths[counter++] = classpath;", "+\t\t} catch(IOException exception) {", "+\t\t\t// ignore", "+\t\t}", "+\t}", "+\tif (counter != length) {", "+\t\t// should not happen", "+\t\tSystem.arraycopy(this.classpaths, 0, (this.classpaths = new FileSystem.Classpath[counter]), 0, counter);", "+\t}"]}], "num": 3963}
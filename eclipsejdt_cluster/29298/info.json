{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "821bdfa1ec8cfe02f5577f38ec2287dd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04b9d03414402eb6cb0f48e7c82608b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingMethodDeclTest.java", "commitBeforeChange": "8db9affa29727763215f4c4f12ddd26301a2c48f", "commitAfterChange": "6bc11449bdc77b64b2e9fa71343f1b205e63ae9f", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tpublic void testListInserts_only_2() throws Exception", "signatureAfterChange": "  \tpublic void testListInserts() throws Exception", "diff": ["-\tpublic void testListInserts_only_2() throws Exception {", "+\tpublic void testListInserts() throws Exception {", "-\t\t\tList thrownExceptions= methodDecl.thrownExceptions();", "+\t\t\tList thrownExceptions= getThrownExceptions(methodDecl);", "-\t\t\trewrite.getListRewrite(methodDecl, INTERNAL_METHOD_THROWN_EXCEPTIONS_PROPERTY).insertFirst(newThrownException, null);", "+\t\t\trewrite.getListRewrite(methodDecl, getMethodThrownExceptionsProperty(ast)).insertFirst(newThrownException, null);", "-\t\t\trewrite.set(methodDecl, INTERNAL_METHOD_MODIFIERS_PROPERTY, new Integer(newModifiers), null);", "+\t\t\tsetModifiers(rewrite, methodDecl, newModifiers);", "-\t\t\tList thrownExceptions= methodDecl.thrownExceptions();", "+\t\t\tList thrownExceptions= getThrownExceptions(methodDecl);", "-\t\t\trewrite.getListRewrite(methodDecl, INTERNAL_METHOD_THROWN_EXCEPTIONS_PROPERTY).insertBefore(newThrownException, firstException, null);", "+\t\t\trewrite.getListRewrite(methodDecl, getMethodThrownExceptionsProperty(ast)).insertBefore(newThrownException, firstException, null);", "-\t\t\trewrite.set(methodDecl, INTERNAL_METHOD_MODIFIERS_PROPERTY, new Integer(newModifiers), null);", "+\t\t\tsetModifiers(rewrite, methodDecl, newModifiers);", "-\t\t\tList thrownExceptions= methodDecl.thrownExceptions();", "+\t\t\tList thrownExceptions= getThrownExceptions(methodDecl);", "-\t\t\trewrite.getListRewrite(methodDecl, INTERNAL_METHOD_THROWN_EXCEPTIONS_PROPERTY).insertAfter(newThrownException, firstException, null);", "+\t\t\trewrite.getListRewrite(methodDecl, getMethodThrownExceptionsProperty(ast)).insertAfter(newThrownException, firstException, null);", "-\t\t\tList thrownExceptions= methodDecl.thrownExceptions();", "+\t\t\tList thrownExceptions= getThrownExceptions(methodDecl);", "-\t\t\trewrite.getListRewrite(methodDecl, INTERNAL_METHOD_THROWN_EXCEPTIONS_PROPERTY).insertAfter(newThrownException, firstException, null);", "+\t\t\trewrite.getListRewrite(methodDecl, getMethodThrownExceptionsProperty(ast)).insertAfter(newThrownException, firstException, null);", "-\t\t\tList thrownExceptions= methodDecl.thrownExceptions();", "+\t\t\tList thrownExceptions= getThrownExceptions(methodDecl);", "-\t\t\trewrite.getListRewrite(methodDecl, INTERNAL_METHOD_THROWN_EXCEPTIONS_PROPERTY).insertLast(newThrownException1, null);", "+\t\t\trewrite.getListRewrite(methodDecl, getMethodThrownExceptionsProperty(ast)).insertLast(newThrownException1, null);", "-\t\t\tList thrownExceptions= methodDecl.thrownExceptions();", "+\t\t\tList thrownExceptions= getThrownExceptions(methodDecl);", "-\t\t\trewrite.getListRewrite(methodDecl, INTERNAL_METHOD_THROWN_EXCEPTIONS_PROPERTY).insertBefore(newThrownException, lastException, null);", "+\t\t\trewrite.getListRewrite(methodDecl, getMethodThrownExceptionsProperty(ast)).insertBefore(newThrownException, lastException, null);", "-\t\t\tList thrownExceptions= methodDecl.thrownExceptions();", "+\t\t\tList thrownExceptions= getThrownExceptions(methodDecl);", "-\t\t\trewrite.getListRewrite(methodDecl, INTERNAL_METHOD_THROWN_EXCEPTIONS_PROPERTY).insertAfter(newThrownException, secondException, null);", "+\t\t\trewrite.getListRewrite(methodDecl, getMethodThrownExceptionsProperty(ast)).insertAfter(newThrownException, secondException, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78020df981df330a3792d866f41dbff3", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingMethodDeclTest.java", "commitBeforeChange": "53e27f97209b6bdab08922bfe6e0472ea5c9632d", "commitAfterChange": "f50d9bbda9dc7f3959092c23f3ad0c06015c43b5", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic void testListCombinations_only_2_3_4() throws Exception", "signatureAfterChange": "  \tpublic void testListCombinations() throws Exception", "diff": ["-\tpublic void testListCombinations_only_2_3_4() throws Exception {", "+\tpublic void testListCombinations() throws Exception {", "-\t\t\tList thrownExceptions= methodDecl.thrownExceptions();", "+\t\t\tList thrownExceptions= getThrownExceptions(methodDecl);", "-\t\t\tName newThrownException1= ast.newSimpleName(\"InterruptedException\");", "-\t\t\trewrite.getListRewrite(methodDecl, MethodDeclaration.THROWN_EXCEPTIONS_PROPERTY).insertLast(newThrownException1, null);", "+\t\t\tASTNode newThrownException1= createNewExceptionType(ast, \"InterruptedException\");", "+\t\t\trewrite.getListRewrite(methodDecl, getMethodThrownExceptionsProperty(ast)).insertLast(newThrownException1, null);", "-\t\t\tName newThrownException2= ast.newSimpleName(\"ArrayStoreException\");", "-\t\t\trewrite.getListRewrite(methodDecl, MethodDeclaration.THROWN_EXCEPTIONS_PROPERTY).insertLast(newThrownException2, null);", "+\t\t\tASTNode newThrownException2= createNewExceptionType(ast, \"ArrayStoreException\");", "+\t\t\trewrite.getListRewrite(methodDecl, getMethodThrownExceptionsProperty(ast)).insertLast(newThrownException2, null);", "-\t\t\tList thrownExceptions= methodDecl.thrownExceptions();", "+\t\t\tList thrownExceptions= getThrownExceptions(methodDecl);", "-\t\t\tName modifiedThrownException= ast.newSimpleName(\"InterruptedException\");", "+\t\t\tASTNode modifiedThrownException= createNewExceptionType(ast, \"InterruptedException\");", "-\t\t\tName newThrownException2= ast.newSimpleName(\"ArrayStoreException\");", "-\t\t\trewrite.getListRewrite(methodDecl, MethodDeclaration.THROWN_EXCEPTIONS_PROPERTY).insertLast(newThrownException2, null);", "+\t\t\tASTNode newThrownException2= createNewExceptionType(ast, \"ArrayStoreException\");", "+\t\t\trewrite.getListRewrite(methodDecl, getMethodThrownExceptionsProperty(ast)).insertLast(newThrownException2, null);", "-\t\t\tList thrownExceptions= methodDecl.thrownExceptions();", "+\t\t\tList thrownExceptions= getThrownExceptions(methodDecl);", "-\t\t\tName newThrownException2= ast.newSimpleName(\"ArrayStoreException\");", "-\t\t\trewrite.getListRewrite(methodDecl, MethodDeclaration.THROWN_EXCEPTIONS_PROPERTY).insertLast(newThrownException2, null);", "+\t\t\tASTNode newThrownException2= createNewExceptionType(ast, \"ArrayStoreException\");", "+\t\t\trewrite.getListRewrite(methodDecl, getMethodThrownExceptionsProperty(ast)).insertLast(newThrownException2, null);"]}], "num": 29298}
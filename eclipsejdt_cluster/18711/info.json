{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4acad61c3aab308d393251e45adc89a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9039a1b569e218c6cefc309ae8be0ebb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java", "commitBeforeChange": "5d2cd7f1076b45eee90e6733e80765abd1df3d6a", "commitAfterChange": "14e86a8141996732826e41cf3c8dd392bb1fd5ba", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": " \tpublic static void updateAllCycleMarkers() throws JavaModelException", "signatureAfterChange": " \tpublic static void updateAllCycleMarkers(Map preferredClasspaths) throws JavaModelException", "diff": ["-\tpublic static void updateAllCycleMarkers() throws JavaModelException {", "+\tpublic static void updateAllCycleMarkers(Map preferredClasspaths) throws JavaModelException {", "-\t\tJavaModelManager manager = JavaModelManager.getJavaModelManager();", "-\t\tIJavaProject[] projects = manager.getJavaModel().getJavaProjects();", "-", "+\t\tIProject[] rscProjects = workspaceRoot.getProjects();", "+\t\tint length = rscProjects.length;", "+\t\tJavaProject[] projects = new JavaProject[length];", "+\t\t\t\t", "-\t\tint length = projects.length;", "-\t\t\tJavaProject project = (JavaProject)projects[i];", "-\t\t\tif (!traversed.contains(project.getPath())){", "-\t\t\t\tprereqChain.clear();", "-\t\t\t\tproject.updateCycleParticipants(null, prereqChain, cycleParticipants, workspaceRoot, traversed);", "+\t\t\tif (hasJavaNature(rscProjects[i])) {", "+\t\t\t\tJavaProject project = (projects[i] = (JavaProject)JavaCore.create(rscProjects[i]));", "+\t\t\t\tif (!traversed.contains(project.getPath())){", "+\t\t\t\t\tprereqChain.clear();", "+\t\t\t\t\tproject.updateCycleParticipants(null, prereqChain, cycleParticipants, workspaceRoot, traversed, preferredClasspaths);", "+\t\t\t\t}", "-\t\t\tJavaProject project = (JavaProject)projects[i];", "-\t\t\t", "-\t\t\tif (cycleParticipants.contains(project.getPath())){", "-\t\t\t\tIMarker cycleMarker = project.getCycleMarker();", "-\t\t\t\tString circularCPOption = project.getOption(JavaCore.CORE_CIRCULAR_CLASSPATH, true);", "-\t\t\t\tint circularCPSeverity = JavaCore.ERROR.equals(circularCPOption) ? IMarker.SEVERITY_ERROR : IMarker.SEVERITY_WARNING;", "-\t\t\t\tif (cycleMarker != null) {", "-\t\t\t\t\t// update existing cycle marker if needed", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tint existingSeverity = ((Integer)cycleMarker.getAttribute(IMarker.SEVERITY)).intValue();", "-\t\t\t\t\t\tif (existingSeverity != circularCPSeverity) {", "-\t\t\t\t\t\t\tcycleMarker.setAttribute(IMarker.SEVERITY, circularCPSeverity);", "+\t\t\tJavaProject project = projects[i];", "+\t\t\tif (project != null) {", "+\t\t\t\tif (cycleParticipants.contains(project.getPath())){", "+\t\t\t\t\tIMarker cycleMarker = project.getCycleMarker();", "+\t\t\t\t\tString circularCPOption = project.getOption(JavaCore.CORE_CIRCULAR_CLASSPATH, true);", "+\t\t\t\t\tint circularCPSeverity = JavaCore.ERROR.equals(circularCPOption) ? IMarker.SEVERITY_ERROR : IMarker.SEVERITY_WARNING;", "+\t\t\t\t\tif (cycleMarker != null) {", "+\t\t\t\t\t\t// update existing cycle marker if needed", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tint existingSeverity = ((Integer)cycleMarker.getAttribute(IMarker.SEVERITY)).intValue();", "+\t\t\t\t\t\t\tif (existingSeverity != circularCPSeverity) {", "+\t\t\t\t\t\t\t\tcycleMarker.setAttribute(IMarker.SEVERITY, circularCPSeverity);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} catch (CoreException e) {", "+\t\t\t\t\t\t\tthrow new JavaModelException(e);", "-\t\t\t\t\t} catch (CoreException e) {", "-\t\t\t\t\t\tthrow new JavaModelException(e);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t// create new marker", "+\t\t\t\t\t\tproject.createClasspathProblemMarker(", "+\t\t\t\t\t\t\tnew JavaModelStatus(IJavaModelStatusConstants.CLASSPATH_CYCLE, project)); ", "-\t\t\t\t\t// create new marker", "-\t\t\t\t\tproject.createClasspathProblemMarker(", "-\t\t\t\t\t\tnew JavaModelStatus(IJavaModelStatusConstants.CLASSPATH_CYCLE, project)); ", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tproject.flushClasspathProblemMarkers(true, false);", "-\t\t\t}\t\t\t", "+\t\t\t\t\tproject.flushClasspathProblemMarkers(true, false);", "+\t\t\t\t}\t\t\t", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1a1cfa04a578cf338e287d62b16177d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredInitializer.java", "commitBeforeChange": "fd230c4ee1ceefd6a4812ebc7de0e734ce8df73c", "commitAfterChange": "e752367433ca417806253a6753c55772428a8bf6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void updateSourceEndIfNecessary(int bodyStart, int bodyEnd)", "signatureAfterChange": " public void updateSourceEndIfNecessary(int braceStart, int braceEnd)", "diff": ["-public void updateSourceEndIfNecessary(int bodyStart, int bodyEnd){", "+public void updateSourceEndIfNecessary(int braceStart, int braceEnd){", "-\t\tthis.fieldDeclaration.sourceEnd = bodyEnd;", "-\t\tthis.fieldDeclaration.declarationSourceEnd = bodyEnd;", "-\t\tthis.fieldDeclaration.declarationEnd = bodyEnd;", "-\t\t((Initializer)this.fieldDeclaration).bodyEnd = bodyStart - 1;\t", "+\t\tInitializer initializer = (Initializer)fieldDeclaration;", "+\t\tif(parser().rBraceSuccessorStart >= braceEnd) {", "+\t\t\tinitializer.declarationSourceEnd = parser().rBraceEnd;", "+\t\t\tinitializer.bodyEnd = parser().rBraceStart;", "+\t\t} else {", "+\t\t\tinitializer.declarationSourceEnd = braceEnd;", "+\t\t\tinitializer.bodyEnd  = braceStart - 1;", "+\t\t}"]}], "num": 18711}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94011fe8c34eb49544475607814a4d46", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62fec496613f10fb0782bae0441beb69", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java", "commitBeforeChange": "20a3b07578a2ebec2d9a0569764e78af37761eaf", "commitAfterChange": "c052d66dbc2732414cdaf446e79eec5da0743843", "methodNumberBeforeChange": 126, "methodNumberAfterChange": 130, "signatureBeforeChange": " \tpublic ICompilationUnit getWorkingCopy(String path, String source, WorkingCopyOwner owner, boolean computeProblems) throws JavaModelException", "signatureAfterChange": " \tpublic ICompilationUnit getWorkingCopy(String path, String source, WorkingCopyOwner owner) throws JavaModelException", "diff": ["-\tpublic ICompilationUnit getWorkingCopy(String path, String source, WorkingCopyOwner owner, boolean computeProblems) throws JavaModelException {", "-\t\tIProblemRequestor problemRequestor = computeProblems", "-\t\t\t? new IProblemRequestor() {", "-\t\t\t\tpublic void acceptProblem(IProblem problem) {}", "-\t\t\t\tpublic void beginReporting() {}", "-\t\t\t\tpublic void endReporting() {}", "-\t\t\t\tpublic boolean isActive() {", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t} ", "-\t\t\t: null;", "-\t\treturn getWorkingCopy(path, source, owner, problemRequestor);", "+\tpublic ICompilationUnit getWorkingCopy(String path, String source, WorkingCopyOwner owner) throws JavaModelException {", "+\t\tICompilationUnit workingCopy = getCompilationUnit(path);", "+\t\tif (owner != null)", "+\t\t\tworkingCopy = workingCopy.getWorkingCopy(owner, null/*no progress monitor*/);", "+\t\telse", "+\t\t\tworkingCopy.becomeWorkingCopy(null/*no progress monitor*/);", "+\t\tworkingCopy.getBuffer().setContents(source);", "+\t\tIProblemRequestor problemRequestor = owner.getProblemRequestor(workingCopy);", "+\t\tif (problemRequestor instanceof ProblemRequestor) {", "+\t\t\t((ProblemRequestor) problemRequestor).initialize(source.toCharArray());", "+\t\t}", "+\t\tworkingCopy.makeConsistent(null/*no progress monitor*/);", "+\t\treturn workingCopy;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab919ae789f92dcd51c4f1d352eb562d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "6945031c95ca0d70ac3adb24efe812a06855be13", "commitAfterChange": "7a9726508a1cf4124fc56e814b6b230c72a37501", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 41, "signatureBeforeChange": " \tpublic PerWorkingCopyInfo getPerWorkingCopyInfo(ICompilationUnit workingCopy, boolean create, boolean recordUsage, IProblemRequestor problemRequestor)", "signatureAfterChange": " \tpublic PerWorkingCopyInfo getPerWorkingCopyInfo(CompilationUnit workingCopy, IPath path, boolean create, boolean recordUsage, IProblemRequestor problemRequestor)", "diff": ["-\tpublic PerWorkingCopyInfo getPerWorkingCopyInfo(ICompilationUnit workingCopy, boolean create, boolean recordUsage, IProblemRequestor problemRequestor) {", "+\tpublic PerWorkingCopyInfo getPerWorkingCopyInfo(CompilationUnit workingCopy, IPath path, boolean create, boolean recordUsage, IProblemRequestor problemRequestor) {", "-\t\t\tPerWorkingCopyInfo info = (PerWorkingCopyInfo) perWorkingCopyInfos.get(workingCopy);", "+\t\t\tWorkingCopyOwner owner = workingCopy.owner;", "+\t\t\tMap pathToPerWorkingCopyInfos = (Map)this.perWorkingCopyInfos.get(owner);", "+\t\t\tif (pathToPerWorkingCopyInfos == null && create) {", "+\t\t\t\tpathToPerWorkingCopyInfos = new HashMap();", "+\t\t\t\tthis.perWorkingCopyInfos.put(owner, pathToPerWorkingCopyInfos);", "+\t\t\t}", "+", "+\t\t\tPerWorkingCopyInfo info = pathToPerWorkingCopyInfos == null ? null : (PerWorkingCopyInfo) pathToPerWorkingCopyInfos.get(path);", "-\t\t\t\tinfo= new PerWorkingCopyInfo(problemRequestor);", "-\t\t\t\tperWorkingCopyInfos.put(workingCopy, info);", "+\t\t\t\tinfo= new PerWorkingCopyInfo(workingCopy, problemRequestor);", "+\t\t\t\tpathToPerWorkingCopyInfos.put(path, info);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2b9d6b680cd0e7fc4bcacb552134511", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "66fdd0cbdf40e85714a2e6461c1f38850556e24c", "commitAfterChange": "938fb240697949dd7e39ed8e808d1be963247406", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \tpublic PerWorkingCopyInfo getPerWorkingCopyInfo(CompilationUnit workingCopy, IPath path, boolean create, boolean recordUsage, IProblemRequestor problemRequestor)", "signatureAfterChange": " \tpublic PerWorkingCopyInfo getPerWorkingCopyInfo(CompilationUnit workingCopy,boolean create, boolean recordUsage, IProblemRequestor problemRequestor)", "diff": ["-\tpublic PerWorkingCopyInfo getPerWorkingCopyInfo(CompilationUnit workingCopy, IPath path, boolean create, boolean recordUsage, IProblemRequestor problemRequestor) {", "+\tpublic PerWorkingCopyInfo getPerWorkingCopyInfo(CompilationUnit workingCopy,boolean create, boolean recordUsage, IProblemRequestor problemRequestor) {", "-\t\t\tMap pathToPerWorkingCopyInfos = (Map)this.perWorkingCopyInfos.get(owner);", "-\t\t\tif (pathToPerWorkingCopyInfos == null && create) {", "-\t\t\t\tpathToPerWorkingCopyInfos = new HashMap();", "-\t\t\t\tthis.perWorkingCopyInfos.put(owner, pathToPerWorkingCopyInfos);", "+\t\t\tMap workingCopyToInfos = (Map)this.perWorkingCopyInfos.get(owner);", "+\t\t\tif (workingCopyToInfos == null && create) {", "+\t\t\t\tworkingCopyToInfos = new HashMap();", "+\t\t\t\tthis.perWorkingCopyInfos.put(owner, workingCopyToInfos);", "-\t\t\tPerWorkingCopyInfo info = pathToPerWorkingCopyInfos == null ? null : (PerWorkingCopyInfo) pathToPerWorkingCopyInfos.get(path);", "+\t\t\tPerWorkingCopyInfo info = workingCopyToInfos == null ? null : (PerWorkingCopyInfo) workingCopyToInfos.get(workingCopy);", "-\t\t\t\tpathToPerWorkingCopyInfos.put(path, info);", "+\t\t\t\tworkingCopyToInfos.put(workingCopy, info);"]}], "num": 43927}
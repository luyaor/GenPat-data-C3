{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "018f3050ed227a071271faf344178e8d", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a7099fce0ea46a7883225a041f734ee", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java", "commitBeforeChange": "ca9dbce3d563d28e984f1680d988cb68608c75f8", "commitAfterChange": "aec4b3fea7801d56d112291851d497436c0f9c81", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t\tpublic Object remove(int index)", "signatureAfterChange": " \t\tpublic Object remove(int index)", "diff": ["+\t\t\tif ((ASTNode.this.flags & PROTECT) != 0) {", "+\t\t\t\t// this node is protected => cannot gain or lose children", "+\t\t\t\tthrow new IllegalArgumentException(\"AST node cannot be modified\"); //$NON-NLS-1$", "+\t\t\t}", "-\t\t\t// n.b. setParent will call modifying()", "-\t\t\toldChild.setParent(null);", "+\t\t\tif ((oldChild.flags & PROTECT) != 0) {", "+\t\t\t\t// old child is protected => cannot be unparented", "+\t\t\t\tthrow new IllegalArgumentException(\"AST node cannot be modified\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tASTNode.this.ast.preRemoveChildEvent(ASTNode.this, oldChild, this.propertyDescriptor);", "+\t\t\t// n.b. setParent will call ast.modifying()", "+\t\t\toldChild.setParent(null, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6df72219b6e5fbfdbd4a09b570455b9a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java", "commitBeforeChange": "ca9dbce3d563d28e984f1680d988cb68608c75f8", "commitAfterChange": "aec4b3fea7801d56d112291851d497436c0f9c81", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 38, "signatureBeforeChange": "  \tvoid replaceChild(ASTNode oldChild, ASTNode newChild, boolean cycleCheck)", "signatureAfterChange": "  \tfinal void preReplaceChild(ASTNode oldChild, ASTNode newChild, ChildPropertyDescriptor property)", "diff": ["-\tvoid replaceChild(ASTNode oldChild, ASTNode newChild, boolean cycleCheck) {", "-\t\tif (newChild != null) {", "-\t\t\tcheckNewChild(this, newChild, cycleCheck, null);", "-\t\t// delink old child from parent", "-\t\tif (oldChild != null) {", "-\t\t\toldChild.setParent(null);", "-\t\t// link new child to parent", "-\t\tif (newChild != null) {", "-\t\t\tnewChild.setParent(this);", "+\t */ ", "+\tfinal void preReplaceChild(ASTNode oldChild, ASTNode newChild, ChildPropertyDescriptor property) {", "+\t\tif ((this.flags & PROTECT) != 0) {", "+\t\t\t// this node is protected => cannot gain or lose children", "+\t\t\tthrow new IllegalArgumentException(\"AST node cannot be modified\"); //$NON-NLS-1$", "+\t\t}", "+\t\tif (newChild != null) {", "+\t\t\tcheckNewChild(this, newChild, property.cycleRisk, null);", "+\t\t}", "+\t\t// delink old child from parent", "+\t\tif (oldChild != null) {", "+\t\t\tif ((oldChild.flags & PROTECT) != 0) {", "+\t\t\t\t// old child node is protected => cannot be unparented", "+\t\t\t\tthrow new IllegalArgumentException(\"AST node cannot be modified\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\tthis.ast.preRemoveChildEvent(this, oldChild, property);", "+\t\t\toldChild.setParent(null, null);", "+\t\t}", "+\t\t// link new child to parent", "+\t\tif (newChild != null) {", "+\t\t\tnewChild.setParent(this, property);", "+\t\t\t// cannot notify postAddChildEvent until parent is linked to child too", "+\t\t}", "+\t}"]}], "num": 11480}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f885a0251699573775aebb42fd141c5a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8ba3428dd56e4070d505c0bcec84198", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "0e160bd57ca4572e4cc317f77eef59eff0c912a6", "commitAfterChange": "1b0238cbdda2702f17c4f0b30e4c8493818f8888", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 58, "signatureBeforeChange": "  \tprotected final boolean isMoreSpecificMethod(MethodBinding one, MethodBinding two)", "signatureAfterChange": "  \tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two)", "diff": ["+\tprotected boolean isAcceptableMethod(MethodBinding one, MethodBinding two) {", "+\t\tTypeBinding[] oneParams = one.parameters;", "+\t\tTypeBinding[] twoParams = two.parameters;", "+\t\tint oneParamsLength = oneParams.length;", "+\t\tint twoParamsLength = twoParams.length;", "+\t\tif (oneParamsLength == twoParamsLength) {", "+\t\t\tfor (int i = 0; i < oneParamsLength; i++) {", "+\t\t\t\tTypeBinding oneParam = oneParams[i];", "+\t\t\t\tTypeBinding twoParam = twoParams[i];", "+\t\t\t\tif (oneParam == twoParam) continue;", "+\t\t\t\tif (oneParam.isRawType()) {", "+\t\t\t\t\tTypeBinding match = oneParam.findSuperTypeWithSameErasure(twoParam);", "+\t\t\t\t\tif (match != twoParam)", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\tif (!oneParam.isCompatibleWith(twoParam)) {", "+\t\t\t\t\tif (i == oneParamsLength - 1 && one.isVarargs() && two.isVarargs()) {", "+\t\t\t\t\t\tTypeBinding eType = ((ArrayBinding) twoParam).elementsType();", "+\t\t\t\t\t\tif (oneParam == eType || oneParam.isCompatibleWith(eType))", "+\t\t\t\t\t\t\treturn true; // special case to choose between 2 varargs methods when the last arg is Object[]", "+\t\t\t\t\t}", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn true;", "+\t\t}", "+", "+\t\tif (one.isVarargs() && two.isVarargs() && oneParamsLength > twoParamsLength) {", "+\t\t\t// special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or (Integer, int...)", "+\t\t\tif (((ArrayBinding) twoParams[twoParamsLength - 1]).elementsType().id != TypeIds.T_JavaLangObject)", "+\t\t\t\treturn false;", "+\t\t\t// check that each parameter before the vararg parameters are compatible (no autoboxing allowed here)", "+\t\t\tfor (int i = twoParamsLength - 2; i >= 0; i--)", "+\t\t\t\tif (oneParams[i] != twoParams[i] && !oneParams[i].isCompatibleWith(twoParams[i]))", "+\t\t\t\t\treturn false;", "+\t\t\tif (parameterCompatibilityLevel(one, twoParams) == NOT_COMPATIBLE", "+\t\t\t\t&& parameterCompatibilityLevel(two, oneParams) == VARARGS_COMPATIBLE)", "+\t\t\t\t\treturn true; ", "+\t\t}", "+\t\treturn false;", "+\t}", "-", "-\tprotected final boolean isMoreSpecificMethod(MethodBinding one, MethodBinding two) {", "-\t\tTypeBinding[] oneParams = one.parameters;", "-\t\tTypeBinding[] twoParams = two.parameters;", "-\t\tint oneParamsLength = oneParams.length;", "-\t\tint twoParamsLength = twoParams.length;", "-\t\tif (oneParamsLength == twoParamsLength) {", "-\t\t\tfor (int i = 0; i < oneParamsLength; i++) {", "-\t\t\t\tif (oneParams[i] != twoParams[i] && !oneParams[i].isCompatibleWith(twoParams[i])) {", "-\t\t\t\t\tif (i == oneParamsLength - 1 && one.isVarargs() && two.isVarargs()) {", "-\t\t\t\t\t\tTypeBinding eType = ((ArrayBinding) twoParams[i]).elementsType();", "-\t\t\t\t\t\tif (oneParams[i] == eType || oneParams[i].isCompatibleWith(eType))", "-\t\t\t\t\t\t\treturn true; // special case to choose between 2 varargs methods when the last arg is Object[]", "-\t\t\t\t\t}", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn true;", "-\t\t}", "-", "-\t\tif (one.isVarargs() && two.isVarargs() && oneParamsLength > twoParamsLength) {", "-\t\t\t// special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or (Integer, int...)", "-\t\t\tif (((ArrayBinding) twoParams[twoParamsLength - 1]).elementsType().id != TypeIds.T_JavaLangObject)", "-\t\t\t\treturn false;", "-\t\t\t// check that each parameter before the vararg parameters are compatible (no autoboxing allowed here)", "-\t\t\tfor (int i = twoParamsLength - 2; i >= 0; i--)", "-\t\t\t\tif (oneParams[i] != twoParams[i] && !oneParams[i].isCompatibleWith(twoParams[i]))", "-\t\t\t\t\treturn false;", "-\t\t\tif (parameterCompatibilityLevel(one, twoParams) == NOT_COMPATIBLE", "-\t\t\t\t&& parameterCompatibilityLevel(two, oneParams) == VARARGS_COMPATIBLE)", "-\t\t\t\t\treturn true; "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1789c1f272b001ec87237e552c2e4bd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java", "commitBeforeChange": "650b0ff91a25195076fe8172a54a4aa40ce6af7c", "commitAfterChange": "77dc1b979b190c8f4c20c92eb16637634d3bb63b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": " \t \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tMemberValuePair[] valuePairs = memberValuePairs();", "+\t\tMemberValuePair[] originalValuePairs = memberValuePairs();", "-\t\tMemberValuePair[] usedValuePairs;", "-\t\tint pairsLength = valuePairs.length;", "-\t\tSystem.arraycopy(valuePairs, 0, usedValuePairs = new MemberValuePair[pairsLength], 0, pairsLength);", "+\t\tMemberValuePair[] pairs;", "+\t\tint pairsLength = originalValuePairs.length;", "+\t\tSystem.arraycopy(originalValuePairs, 0, pairs = new MemberValuePair[pairsLength], 0, pairsLength);", "-\t\t\t\tMemberValuePair valuePair = usedValuePairs[j];", "-\t\t\t\tif (valuePair == null) continue nextPair;", "-\t\t\t\tchar[] memberName = valuePair.name;", "-\t\t\t\tif (CharOperation.equals(memberName, selector)) {", "-\t\t\t\t\tif (valueAttribute == null && CharOperation.equals(memberName, TypeConstants.VALUE)) {", "-\t\t\t\t\t\tvalueAttribute = valuePair;", "+\t\t\t\tMemberValuePair pair = pairs[j];", "+\t\t\t\tif (pair == null) continue nextPair;", "+\t\t\t\tchar[] name = pair.name;", "+\t\t\t\tif (CharOperation.equals(name, selector)) {", "+\t\t\t\t\tif (valueAttribute == null && CharOperation.equals(name, TypeConstants.VALUE)) {", "+\t\t\t\t\t\tvalueAttribute = pair;", "-\t\t\t\t\tvaluePair.binding = method;", "-\t\t\t\t\tusedValuePairs[j] = null; // consumed", "+\t\t\t\t\tpair.binding = method;", "+\t\t\t\t\tpair.resolveTypeExpecting(scope, method.returnType);", "+\t\t\t\t\tpairs[j] = null; // consumed", "+\t\t\t\t\t", "+\t\t\t\t\t// check duplicates", "-\t\t\t\t\t\tif (CharOperation.equals(usedValuePairs[k].name, selector)) {", "+\t\t\t\t\t\tMemberValuePair otherPair = pairs[k];", "+\t\t\t\t\t\tif (otherPair == null) continue;", "+\t\t\t\t\t\tif (CharOperation.equals(otherPair.name, selector)) {", "-\t\t\t\t\t\t\tscope.problemReporter().duplicateAnnotationValue(annotationType, usedValuePairs[k]);", "-\t\t\t\t\t\t\tusedValuePairs[k].binding = method;", "-\t\t\t\t\t\t\tusedValuePairs[k] = null;", "+\t\t\t\t\t\t\tscope.problemReporter().duplicateAnnotationValue(annotationType, otherPair);", "+\t\t\t\t\t\t\totherPair.binding = method;", "+\t\t\t\t\t\t\totherPair.resolveTypeExpecting(scope, method.returnType);", "+\t\t\t\t\t\t\tpairs[k] = null;", "-\t\t\t\t\t\tscope.problemReporter().duplicateAnnotationValue(annotationType, valuePair);", "+\t\t\t\t\t\tscope.problemReporter().duplicateAnnotationValue(annotationType, pair);", "-\t\t\t\t\tvaluePair.resolveTypeExpecting(scope, method.returnType);", "-\t\t\t\tscope.problemReporter().missingValueForAnnotationMember(this, method.selector);", "+\t\t\t\tscope.problemReporter().missingValueForAnnotationMember(this, selector);", "-\t\t\tif (usedValuePairs[i] != null) {", "-\t\t\t\tscope.problemReporter().undefinedAnnotationValue(annotationType, usedValuePairs[i]);", "+\t\t\tif (pairs[i] != null) {", "+\t\t\t\tscope.problemReporter().undefinedAnnotationValue(annotationType, pairs[i]);"]}], "num": 52962}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "91454a2d416e3b28cd255e24e58c1c4f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84e12bf54e88b9765053549fcd4e20fd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptPlugin.java", "commitBeforeChange": "6cb413dbd992ad73f847d7b4e14e78f1406fa2fc", "commitAfterChange": "8659b871eae5c2008485cfb120ce2c8f8ecbfe04", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tpublic static void trace(final String msg)", "signatureAfterChange": " \t \tpublic static void trace(final String msg)", "diff": ["-\t\tif(DEBUG)", "-\t\t\tSystem.err.println(\"[ \" + Thread.currentThread().getName() + \" ] \" + msg );  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tif (DEBUG) {", "+\t\t\tStringBuffer sb = new StringBuffer();", "+\t\t\tsb.append('[');", "+\t\t\t// SimpleDateFormat is not thread-safe, according to javadoc", "+\t\t\tsynchronized(TRACE_DATE_FORMAT) {", "+\t\t\t\tsb.append(TRACE_DATE_FORMAT.format(new Date()));", "+\t\t\t}", "+\t\t\tsb.append('-');", "+\t\t\t// Some threads have qualified type names; too long.", "+\t\t\tString threadName = Thread.currentThread().getName();", "+\t\t\tint dot = threadName.lastIndexOf('.');", "+\t\t\tif (dot < 0) {", "+\t\t\t\tsb.append(threadName);", "+\t\t\t}", "+\t\t\telse {", "+\t\t\t\tsb.append(threadName.substring(dot+1));", "+\t\t\t}", "+\t\t\tsb.append(']');", "+\t\t\tsb.append(msg);", "+\t\t\tSystem.out.println(sb);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd672a9765b4e7190768722ff4085015", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/batch/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java", "commitBeforeChange": "98f970f58fc61208a8cdd52e3b9981ef32c5937b", "commitAfterChange": "29a8044fc706583901ff89364d428dff04f6a567", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t@Override \tpublic void printMessage(Kind kind, CharSequence msg, Element e, \t\t\tAnnotationMirror a, AnnotationValue v)", "signatureAfterChange": " \t@Override \tpublic void printMessage(Kind kind, CharSequence msg, Element e, \t\t\tAnnotationMirror a, AnnotationValue v)", "diff": ["-\t\tSystem.err.println(\"APT says: \" + kind + \" \" + msg + \" on element \" + e + ", "-\t\t\t\t\" at annotation \" + a + \" on value \" + v);", "+\t\tStringBuilder sb = new StringBuilder();", "+\t\tfinal String space = \" \"; //$NON-NLS-1$", "+\t\tsb.append(\"APT says:\"); //$NON-NLS-1$", "+\t\tif (kind != null) {", "+\t\t\tsb.append(space);", "+\t\t\tsb.append(kind);", "+\t\t}", "+\t\tif (msg != null) {", "+\t\t\tsb.append(space);", "+\t\t\tsb.append(msg);", "+\t\t}", "+\t\tif (e != null) {", "+\t\t\tsb.append(\" on element \"); //$NON-NLS-1$", "+\t\t\tsb.append(e);", "+\t\t}", "+\t\tif (a != null) {", "+\t\t\tsb.append(\" at annotation \"); //$NON-NLS-1$", "+\t\t\tsb.append(a);", "+\t\t}", "+\t\tif (v != null) {", "+\t\t\tsb.append(\" on value \"); //$NON-NLS-1$", "+\t\t\tsb.append(v);", "+\t\t}", "+\t\tSystem.err.println(sb.toString());"]}], "num": 52128}
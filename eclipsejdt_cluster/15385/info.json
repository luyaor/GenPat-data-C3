{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34fa2c1d9966b8e9ff2a970792d3b909", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a8ff5b6cf6c39c6ecab18a0bddfddd6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MemberValuePair.java", "commitBeforeChange": "2209601726c2ffaf740a8580f2681022ef2a68b2", "commitAfterChange": "f42c0477ee0669ffdbca90a8139c634d502e6b71", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "signatureAfterChange": "  \tpublic void resolveTypeExpecting(BlockScope scope, TypeBinding requiredType)", "diff": ["-\t\tif (!((this.value.isConstantValueOfTypeAssignableToType(valueType, requiredType)", "-\t\t\t\t|| BaseTypeBinding.isWidening(requiredType.id, valueType.id))", "+\t\tif (!(this.value.isConstantValueOfTypeAssignableToType(valueType, requiredType)", "-\t\t\t\t\t\t\t|| BaseTypeBinding.isWidening(leafType.id, valueType.id))", "-\t\t\t\t\t\t\t|| valueType.isCompatibleWith(leafType))) {", "+\t\t\t\t\t\t\t|| valueType.isCompatibleWith(leafType)))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e9ad91e558082db6b408e674e7f0215", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java", "commitBeforeChange": "4412fcf3d168e3c5cc3b92c0b70e5bcf2376f3fc", "commitAfterChange": "8bf9953e1351888d8d186166d8f2000b15a08f07", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws JavaModelException", "signatureAfterChange": " protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws CoreException", "diff": ["-protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws JavaModelException {", "+protected void locatePackageDeclarations(SearchPattern searchPattern, SearchParticipant participant) throws CoreException {", "-\t\t\ttry {", "-\t\t\t\tIJavaElement element = searchPattern.focus;", "-\t\t\t\tif (encloses(element)) {", "-\t\t\t\t\tSearchMatch match = newDeclarationMatch(element, IJavaSearchResultCollector.EXACT_MATCH, -1, -1);", "-\t\t\t\t\treport(match);", "-\t\t\t\t}", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\tif (e instanceof JavaModelException) {", "-\t\t\t\t\tthrow (JavaModelException) e;", "-\t\t\t\t} else {", "-\t\t\t\t\tthrow new JavaModelException(e);", "-\t\t\t\t}", "-\t\t\t}\t\t\t\t\t", "+\t\t\tIJavaElement element = searchPattern.focus;", "+\t\t\tif (encloses(element)) {", "+\t\t\t\tSearchMatch match = newDeclarationMatch(element, IJavaSearchResultCollector.EXACT_MATCH, -1, -1);", "+\t\t\t\treport(match);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42e502ec057b5b96e296e0dba95b5122", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationValueImpl.java", "commitBeforeChange": "82fb6745d0f2bc2c9b5e4740da70b2e364d6955a", "commitAfterChange": "c295624cf25dea9fdc929a62413bd288dbeb35d7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t@Override \tpublic Object getValue()", "signatureAfterChange": "  \t@Override \tpublic Object getValue()", "diff": ["-\t\t//TODO: determine and cache object type", "-\t\tif (_value instanceof StringConstant) {", "-\t\t\treturn ((StringConstant)_value).stringValue();", "-\t\t}", "-\t\telse if (_value instanceof IntConstant) {", "-\t\t\treturn ((IntConstant)_value).intValue();", "-\t\t}", "-\t\treturn null;", "+\t\treturn _value;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "432d6aa7e180c8d5fb4f944a7d5a44db", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/impl/StateSnapConstantPool.java", "commitBeforeChange": "05b313c1ebccd8136a07de8477552de6fc20b5e1", "commitAfterChange": "f391db9dfa982dbe09df7c4d362cd9e5a8546769", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r private IHandle readHandle(IDevelopmentContext dc, DataInputStream in, int tag) throws IOException", "signatureAfterChange": "\r private IHandle readHandle(IDevelopmentContext dc, DataInputStream in, int tag) throws IOException", "diff": ["-\t\t\tthrow new IOException(Util.bind(\"build.formatError\"/*nonNLS*/));\r", "+\t\t\tthrow new IOException(\"Error in format\"/*nonNLS*/);\r", "-\t\t\t\tthrow new IOException(Util.bind(\"build.formatError\"/*nonNLS*/));\r", "+\t\t\t\tthrow new IOException(\"Error in format\"/*nonNLS*/);\r", "-\t\t\t\tthrow new IOException(Util.bind(\"build.formatError\"/*nonNLS*/));\r", "+\t\t\t\tthrow new IOException(\"Error in format\"/*nonNLS*/);\r", "-\t\t\t\tthrow new IOException(Util.bind(\"build.formatError\"/*nonNLS*/));\r", "+\t\t\t\tthrow new IOException(\"Error in format\"/*nonNLS*/);\r", "-\t\t\tthrow new IOException(Util.bind(\"build.unexpectedPoolItem\"/*nonNLS*/));\r", "+\t\t\tthrow new IOException(\"Unexpected kind of pool item\"/*nonNLS*/);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72a04dbab6638f629affafe0f6b9d9bc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/DeclaredTypeImpl.java", "commitBeforeChange": "a209bfa947ecc1f9f7050d0d851a03f725813152", "commitAfterChange": "730caa252c0447802cd9dbe163cdf0f853f36524", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t@Override \tpublic TypeKind getKind()", "signatureAfterChange": "  \t@Override \tpublic TypeKind getKind()", "diff": ["-\t\t// Binding.isValidBinding() will return true for a parameterized or array type whose raw", "-\t\t// or member type is unresolved.  So we need to be a little more sensitive, so that we", "-\t\t// can report Zork<Quux> or Zork[] as error types.", "-\t\tReferenceBinding type = (ReferenceBinding)_binding;", "-\t\tif (!type.isValidBinding()) {", "-\t\t\treturn TypeKind.ERROR;", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "778ecdb4376224ce9ed148f9afa7d5a4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "5a02e3ef9eebbbfbf5479e7ec13a8eec010013e9", "commitAfterChange": "b525c03916a55b82c2a2a3976eed083d2d68c216", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "signatureAfterChange": " \tpublic String disassemble(IClassFileReader classFileReader, String lineSeparator, int mode)", "diff": ["-\t\t\tbuffer.append(Util.bind(\"classfileformat.class\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(\"class\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"classfileformat.interface\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(\"interface\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"classfileformat.extends\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(\"extends\"); //$NON-NLS-1$", "-\t\t\tbuffer.append(Util.bind(\"classfileformat.implements\")); //$NON-NLS-1$", "+\t\t\tbuffer.append(\"implements\"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fd0c8a82f9c6c6266f270d514340825", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java", "commitBeforeChange": "73481fc7775f00710f5c63415b3c3452c545829e", "commitAfterChange": "02ef945f8bd15ffc018aecd476503b3377998447", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tprivate void processCompilationUnitResource(ICompilationUnit source, PackageFragment dest) throws JavaModelException", "signatureAfterChange": " \tprivate void processCompilationUnitResource(ICompilationUnit source, PackageFragment dest) throws JavaModelException", "diff": ["-\t\t\ttry {", "-\t\t\t\tif (rewrite != null){", "-\t\t\t\t\tsaveContent(dest, destName, rewrite, sourceEncoding, destFile);", "-\t\t\t\t}", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\tif (e instanceof JavaModelException) throw (JavaModelException) e;", "-\t\t\t\tthrow new JavaModelException(e);", "+\t\t\tif (rewrite != null){", "+\t\t\t\tsaveContent(dest, destName, rewrite, sourceEncoding, destFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c801b0b438279a576f62c7ce250573e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/InfixExpressionWrappingBuilder.java", "commitBeforeChange": "a744e65ca211ca7be2dd3830d1bd4009b273df27", "commitAfterChange": "c95e24ef2e4bfa2139fbca3e3b2078e40695cacf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tprivate boolean isSplittable(Expression expression)", "signatureAfterChange": " \tprivate boolean isSplittable(Expression expression)", "diff": ["-\t\tif (expression instanceof InfixExpression) {", "-\t\t\tInfixExpression infixExpression = (InfixExpression) expression;", "-\t\t\treturn infixExpression.getLeftOperand() instanceof InfixExpression", "-\t\t\t\t\t||  infixExpression.getRightOperand() instanceof InfixExpression;", "-\t\t}", "-\t\treturn false;", "+//\t\tif (expression instanceof InfixExpression) {", "+//\t\t\tInfixExpression infixExpression = (InfixExpression) expression;", "+//\t\t\treturn infixExpression.getLeftOperand() instanceof InfixExpression", "+//\t\t\t\t\t||  infixExpression.getRightOperand() instanceof InfixExpression;", "+//\t\t}", "+//\t\treturn false;", "+\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d74c1555b989484d5bfb18113426f4cd", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "8a4bd8a6db890bd0552718e8332a5c8e90155329", "commitAfterChange": "595c4dea8c6828d0945e9c58025a82a9fd99c02b", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " \tpublic MethodBinding findExactMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "signatureAfterChange": " \tpublic MethodBinding findExactMethod( \t\tReferenceBinding receiverType, \t\tchar[] selector, \t\tTypeBinding[] argumentTypes, \t\tInvocationSite invocationSite)", "diff": ["-\t\t\t\tif (exactMethod.typeVariables != Binding.NO_TYPE_VARIABLES || invocationSite.genericTypeArguments() != null) {", "-\t\t\t\t\tMethodBinding compatibleMethod = computeCompatibleMethod(exactMethod, argumentTypes, invocationSite);", "-\t\t\t\t\t// compatibleMethod should not be null thanks to the conditions guarding this block ", "-\t\t\t\t\tif (!compatibleMethod.isValidBinding() && exactMethod.typeVariables != Binding.NO_TYPE_VARIABLES) {", "-\t\t\t\t\t\treturn null; // could be a better generic method match (90423), which will be found by non exact match", "-\t\t\t\t\t}", "-\t\t\t\t\texactMethod = compatibleMethod;", "+\t\t\t\tif (invocationSite.genericTypeArguments() != null) {", "+\t\t\t\t\texactMethod = computeCompatibleMethod(exactMethod, argumentTypes, invocationSite);"]}], "num": 15385}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ab7016cc1f84308e71f24d278c5160b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "266c9791e14e32566de7c74cc7f4e930", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "db8a8d3ea5987fd113d827b7521c0966820b411f", "commitAfterChange": "089badac3a8a0209e6db9e45831031dae9c203f2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tvoid buildAnonymousTypeBinding(SourceTypeBinding enclosingType, ReferenceBinding supertype)", "signatureAfterChange": "  \tvoid buildAnonymousTypeBinding(SourceTypeBinding enclosingType, ReferenceBinding supertype)", "diff": ["+\t\tint inheritedBits = supertype.typeBits; // for anonymous class assume same properties as its super (as a closeable) ...", "+\t\t// ... unless it overrides close():", "+\t\tif ((inheritedBits & TypeIds.BitWrapperCloseable) != 0) {", "+\t\t\tAbstractMethodDeclaration[] methods = this.referenceContext.methods;", "+\t\t\tif (methods != null) {", "+\t\t\t\tfor (int i=0; i<methods.length; i++) {", "+\t\t\t\t\tif (CharOperation.equals(TypeConstants.CLOSE, methods[i].selector) && methods[i].arguments == null) {", "+\t\t\t\t\t\tinheritedBits &= TypeIds.InheritableBits;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tanonymousType.typeBits |= inheritedBits;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91a38d9b67a9e54f77b156908b74c18e", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java", "commitBeforeChange": "2a762b85f858691a63d4547af177cc649d7b1329", "commitAfterChange": "7675c409a4b3b1e15b1cc476a0a66b988b5fb4a0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \tprotected void generateClasspathChangeDeltas(\r \t\tIClasspathEntry[] oldResolvedPath,\r \t\tIClasspathEntry[] newResolvedPath,\r \t\tJavaModelManager manager,\r \t\tJavaProject project)", "signatureAfterChange": "\r \tprotected void generateClasspathChangeDeltas(\r \t\tIClasspathEntry[] oldResolvedPath,\r \t\tIClasspathEntry[] newResolvedPath,\r \t\tJavaModelManager manager,\r \t\tJavaProject project)", "diff": ["-\t\tboolean hasChangedContentForDependents = false;\r", "-\r", "+\t\tboolean needToUpdateDependents = false;\r", "+\t\t\r", "-\t\tboolean oldResolvedPathLongest =\r", "-\t\t\toldResolvedPath.length >= newResolvedPath.length;\r", "+\t\tint oldLength = oldResolvedPath.length;\r", "+\t\tint newLength = newResolvedPath.length;\r", "+\t\tboolean oldResolvedPathLongest = oldLength >= newLength;\r", "-\t\t\t// do not notify remote project changes\r", "-\t\t\tif (oldResolvedPath[i].getEntryKind() == IClasspathEntry.CPE_PROJECT) continue; \r", "-\t\t\t\r", "+\t\t\t\t// do not notify remote project changes\r", "+\t\t\t\tif (oldResolvedPath[i].getEntryKind() == IClasspathEntry.CPE_PROJECT){\r", "+\t\t\t\t\tneedToUpdateDependents = true;\r", "+\t\t\t\t\tcontinue; \r", "+\t\t\t\t}\r", "+\r", "-\t\t\t\thasChangedContentForDependents |= \r", "-\t\t\t\t\t(changeKind == IClasspathEntry.CPE_SOURCE) || oldResolvedPath[i].isExported();\r", "+\t\t\t\tneedToUpdateDependents |= (changeKind == IClasspathEntry.CPE_SOURCE) || oldResolvedPath[i].isExported();\r", "-\t\t\t\thasChangedContentForDependents |= (oldResolvedPath[i].isExported() != newResolvedPath[index].isExported());\r", "+\t\t\t\t// do not notify remote project changes\r", "+\t\t\t\tif (oldResolvedPath[i].getEntryKind() == IClasspathEntry.CPE_PROJECT){\r", "+\t\t\t\t\tcontinue; \r", "+\t\t\t\t}\t\t\t\t\r", "+\t\t\t\tneedToUpdateDependents |= (oldResolvedPath[i].isExported() != newResolvedPath[index].isExported());\r", "-\t\t\t\t\t\thasChangedContentForDependents |= (changeKind == IClasspathEntry.CPE_SOURCE);\r", "+\t\t\t\t\t\tneedToUpdateDependents |= (changeKind == IClasspathEntry.CPE_SOURCE);\r", "-\t\t\t// do not notify remote project changes\r", "-\t\t\tif (newResolvedPath[i].getEntryKind() == IClasspathEntry.CPE_PROJECT) continue; \r", "-\r", "+\t\t\t\t// do not notify remote project changes\r", "+\t\t\t\tif (newResolvedPath[i].getEntryKind() == IClasspathEntry.CPE_PROJECT){\r", "+\t\t\t\t\tneedToUpdateDependents = true;\r", "+\t\t\t\t\tcontinue; \r", "+\t\t\t\t}\r", "-\t\t\t\thasChangedContentForDependents |= \r", "-\t\t\t\t\t(changeKind == IClasspathEntry.CPE_SOURCE) || newResolvedPath[i].isExported();\r", "+\t\t\t\tneedToUpdateDependents |= (changeKind == IClasspathEntry.CPE_SOURCE) || newResolvedPath[i].isExported();\r", "-\t\tif (hasDelta) {\r", "+\t\t\r", "+\t\t// need to write out the classpath file ?\r", "+\t\tboolean needSave = oldLength != newLength;\r", "+\t\tif (!needSave){\r", "+\t\t\tfor (int i = 0; i < newLength; i++){ // need to check for entry#equals\r", "+\t\t\t\tif (!oldResolvedPath[i].equals(newResolvedPath[i])){\r", "+\t\t\t\t\tneedSave = true;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (needSave){\r", "-\t\t\t} catch (JavaModelException e) {\r", "+\t\t\t} catch(JavaModelException e) {\r", "+\t\t}\r", "+\t\t\r", "+\t\tif (hasDelta) {\r", "-\r", "-\t\t\tif (hasChangedContentForDependents){\r", "-\t\t\t\tupdateAffectedProjects(project.getProject().getFullPath());\r", "-\t\t\t}\r", "+\t\t}\r", "+\t\tif (needToUpdateDependents){\r", "+\t\t\tupdateAffectedProjects(project.getProject().getFullPath());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f50a544aaf1ebb586c0e7d07a077a808", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ClassScope.java", "commitBeforeChange": "dc65968cfdfc1f348d46e5f149ca1b63c97e4fe1", "commitAfterChange": "fcea29988ed692db00839aa74edd7fda8cc73655", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tvoid buildAnonymousTypeBinding(SourceTypeBinding enclosingType, ReferenceBinding supertype)", "signatureAfterChange": "  \tvoid buildAnonymousTypeBinding(SourceTypeBinding enclosingType, ReferenceBinding supertype)", "diff": ["+\t\tint inheritedBits = supertype.typeBits; // for anonymous class assume same properties as its super (as a closeable) ...", "+\t\t// ... unless it overrides close():", "+\t\tif ((inheritedBits & TypeIds.BitWrapperCloseable) != 0) {", "+\t\t\tAbstractMethodDeclaration[] methods = this.referenceContext.methods;", "+\t\t\tif (methods != null) {", "+\t\t\t\tfor (int i=0; i<methods.length; i++) {", "+\t\t\t\t\tif (CharOperation.equals(TypeConstants.CLOSE, methods[i].selector) && methods[i].arguments == null) {", "+\t\t\t\t\t\tinheritedBits &= TypeIds.InheritableBits;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tanonymousType.typeBits |= inheritedBits;"]}], "num": 64316}
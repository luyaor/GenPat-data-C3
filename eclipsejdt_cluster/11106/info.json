{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df861d3d2248a1ffd332f3d1a99bba31", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "735bbf34652e64d4b9a54cfe90d46896", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java", "commitBeforeChange": "dafcaed018e710da1dd812dc260b3ece76bb3e1d", "commitAfterChange": "a28933ffb03bd99d79fd8fce531cad43e24a3c4c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tprivate APTResult runAPT( \t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tfinal ProcessorEnvImpl processorEnv, \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<ICompilationUnit> unitsForFiles, \t\t\tfinal int internalRound)", "signatureAfterChange": " \t \tprivate APTResult runAPT( \t\t\tfinal Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories, \t\t\tfinal ProcessorEnvImpl processorEnv, \t\t\tfinal List<IFile> filesWithMissingType, \t\t\tfinal List<ICompilationUnit> unitsForFiles, \t\t\tfinal int internalRound)", "diff": ["-\t\t\tfinal Set<IFile> lastGeneratedFiles = new HashSet<IFile>();", "-\t\t\tfor( int i=0, len=files.length; i<len; i++ ){", "-\t\t\t\tfinal Set<IFile> genFiles = gfm.getGeneratedFilesForParent( files[i] );", "-\t\t\t\tif( genFiles != null )", "-\t\t\t\t\tlastGeneratedFiles.addAll(genFiles);", "+\t\t\tfinal Map<IFile,Set<IFile>> lastGeneratedFiles = new HashMap<IFile,Set<IFile>>();", "+\t\t\tfor( IFile parentIFile : files ){", "+\t\t\t\tlastGeneratedFiles.put(parentIFile, gfm.getGeneratedFilesForParent(parentIFile));", "-\t\t\tfinal Set<IFile> allGeneratedFiles = new HashSet<IFile>();", "-\t\t\tSet<IFile> modifiedFiles = new HashSet<IFile>();", "-\t\t\tMap<IFile, Boolean> filesMap = processorEnv.getGeneratedFiles();", "-\t\t\tfor (Map.Entry<IFile, Boolean> entry : filesMap.entrySet()) {", "-\t\t\t\tallGeneratedFiles.add(entry.getKey());", "-\t\t\t\tif (entry.getValue()) {", "-\t\t\t\t\tmodifiedFiles.add(entry.getKey());", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tfinal Map<IFile, Set<IFile>> allGeneratedFiles = processorEnv.getAllGeneratedFiles();", "+\t\t\tfinal Set<IFile> modifiedGeneratedFiles = processorEnv.getModifiedGeneratedFiles();", "-\t\t\tfor( int i=0, len=files.length; i<len; i++ ){", "+\t\t\tfor( IFile file : files ){", "+\t\t\t\tSet<IFile> generatedFiles = allGeneratedFiles.get(file);", "+\t\t\t\tif (generatedFiles == null)", "+\t\t\t\t\tgeneratedFiles = Collections.emptySet();", "-\t\t\t\t\t\t\tfiles[i], ", "+\t\t\t\t\t\t\tfile, ", "-\t\t\t\t\t\t\tlastGeneratedFiles, ", "-\t\t\t\t\t\t\tallGeneratedFiles, ", "+\t\t\t\t\t\t\tlastGeneratedFiles.get(file), ", "+\t\t\t\t\t\t\tgeneratedFiles, ", "-\t\t\tAPTResult result = new APTResult( modifiedFiles, ", "+\t\t\tAPTResult result = new APTResult( modifiedGeneratedFiles, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c7f08b8448f011d4d7e056eb56bfce6", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java", "commitBeforeChange": "b93a217fe6b68aa2016c37812b125d5d097ba1a3", "commitAfterChange": "1beaef02926dace59f07acb73879fd00f7c0b3eb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " void analyseOneArgument18(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, \t\tTypeBinding expectedType, Expression argument, Boolean expectedNonNullness, TypeBinding originalExpected)", "signatureAfterChange": " void analyseOneArgument18(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo, \t\tTypeBinding expectedType, Expression argument, Boolean expectedNonNullness, TypeBinding originalExpected)", "diff": ["+\tif (argument instanceof ConditionalExpression && argument.isPolyExpression()) {", "+\t\t// drill into both branches using existing nullStatus per branch:", "+\t\tConditionalExpression ce = (ConditionalExpression) argument;", "+\t\tce.internalAnalyseOneArgument18(currentScope, flowContext, expectedType, ce.valueIfTrue, ce.ifTrueNullStatus, expectedNonNullness, originalExpected);", "+\t\tce.internalAnalyseOneArgument18(currentScope, flowContext, expectedType, ce.valueIfFalse, ce.ifFalseNullStatus, expectedNonNullness, originalExpected);", "+\t\treturn;", "+\t}", "-\t", "+\tinternalAnalyseOneArgument18(currentScope, flowContext, expectedType, argument, nullStatus,", "+\t\t\t\t\t\t\t\t\texpectedNonNullness, originalExpected);", "+}"]}], "num": 11106}
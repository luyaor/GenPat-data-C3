{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1679830c590e16b3030500e7cb1f1f2e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59749d80b3f8c34f019b9783d86b0f33", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceSearchTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void testPerfSearchField() throws CoreException", "signatureAfterChange": " \tpublic void testSearchField() throws CoreException", "diff": ["-\tpublic void testPerfSearchField() throws CoreException {", "-\t\ttagAsSummary(\"Search>Occurences>Fields\", Dimension.CPU_TIME, true/*put in fingerprint*/);", "+\tpublic void testSearchField() throws CoreException {", "+\t\ttagAsSummary(\"Search>Occurences>Fields\", true); // put in fingerprint", "-//\t\tINDEX_MANAGER.performConcurrentJob(new DoNothing(), IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH, null);", "-//\t\tassertEquals(\"Index manager should not have remaining jobs!\", 0, INDEX_MANAGER.awaitingJobsCount()); //$NON-NLS-1$", "-\t\t// warm-up", "+\t\t// Warm up", "-\t\t// Loop of measures", "+\t\t// Clean memory", "+\t\trunGc();", "+", "+\t\t// Measures", "-//\t\t\tfor (int j=0; j<ITERATIONS_COUNT; j++) {", "-\t\t\t\tsearch(\"FILE\", FIELD, ALL_OCCURRENCES, this.resultCollector);", "-//\t\t\t}", "+\t\t\tsearch(\"FILE\", FIELD, ALL_OCCURRENCES, this.resultCollector);", "-\t\t// Commit measures", "+\t\t// Commit"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adc6d32d00dd7029875601aa1670f9e5", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceSearchTests.java", "commitBeforeChange": "5281f7a1d02f4134760334f239cbffb833f0ed1c", "commitAfterChange": "b8222e0e4564cc4472bb2fdfd410e7de68bbf0fa", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tpublic void testPerfSearchConstructor() throws CoreException", "signatureAfterChange": " \tpublic void testSearchConstructor() throws CoreException", "diff": ["-\tpublic void testPerfSearchConstructor() throws CoreException {", "-\t\ttagAsSummary(\"Search>Occurences>Constructors\", Dimension.CPU_TIME, true/*put in fingerprint*/);", "+\tpublic void testSearchConstructor() throws CoreException {", "+\t\ttagAsSummary(\"Search>Occurences>Constructors\", true); // put in fingerprint", "-//\t\tINDEX_MANAGER.performConcurrentJob(new DoNothing(), IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH, null);", "-//\t\tassertEquals(\"Index manager should not have remaining jobs!\", 0, INDEX_MANAGER.awaitingJobsCount()); //$NON-NLS-1$", "-\t\t// warm-up", "+\t\t// Warm up", "-\t\t// Loop of measures", "+\t\t// Clean memory", "+\t\trunGc();", "+", "+\t\t// Measures", "-//\t\t\tfor (int j=0; j<ITERATIONS_COUNT; j++) {", "-\t\t\t\tsearch(\"String\", CONSTRUCTOR, ALL_OCCURRENCES, this.resultCollector);", "-//\t\t\t}", "+\t\t\tsearch(\"String\", CONSTRUCTOR, ALL_OCCURRENCES, this.resultCollector);", "-\t\t// Commit measures", "+\t\t// Commit"]}], "num": 18733}
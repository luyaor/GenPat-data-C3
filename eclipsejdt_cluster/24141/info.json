{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7463f0e1561d91fa2bcdb688fb9fa352", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae057d73c067369216b71d9670a0446f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java", "commitBeforeChange": "1146476ca138da09c36a16ea64250a150f60b014", "commitAfterChange": "e3d3c02cc33fd5166184422215f4903c5a405e0f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  protected void copyExtraResourcesBack() throws CoreException", "signatureAfterChange": "  protected void copyExtraResourcesBack(ClasspathMultiDirectory sourceLocation) throws CoreException", "diff": ["-protected void copyExtraResourcesBack() throws CoreException {", "+", "+protected void copyExtraResourcesBack(ClasspathMultiDirectory sourceLocation) throws CoreException {", "-\tfinal IPath outputPath = outputFolder.getFullPath();", "-\tfor (int i = 0, length = sourceFolders.length; i < length; i++) {", "-\t\tIContainer sourceFolder = sourceFolders[i];", "-\t\tfinal IPath sourcePath = sourceFolder.getFullPath();", "-\t\tfinal int segmentCount = sourcePath.segmentCount();", "-\t\tsourceFolder.accept(", "-\t\t\tnew IResourceVisitor() {", "-\t\t\t\tpublic boolean visit(IResource resource) throws CoreException {", "-\t\t\t\t\tswitch(resource.getType()) {", "-\t\t\t\t\t\tcase IResource.FILE :", "-\t\t\t\t\t\t\tString extension = resource.getFileExtension();", "-\t\t\t\t\t\t\tif (JavaBuilder.JAVA_EXTENSION.equalsIgnoreCase(extension)) return false;", "-\t\t\t\t\t\t\tif (JavaBuilder.CLASS_EXTENSION.equalsIgnoreCase(extension)) return false;", "-\t\t\t\t\t\t\tif (javaBuilder.filterResource(resource)) return false;", "+\tfinal int segmentCount = sourceLocation.sourceFolder.getFullPath().segmentCount();", "+\tfinal char[][] exclusionPatterns = sourceLocation.exclusionPatterns;", "+\tfinal IContainer outputFolder = sourceLocation.binaryFolder;", "+\tsourceLocation.sourceFolder.accept(", "+\t\tnew IResourceVisitor() {", "+\t\t\tpublic boolean visit(IResource resource) throws CoreException {", "+\t\t\t\tif (exclusionPatterns != null && Util.isExcluded(resource, exclusionPatterns))", "+\t\t\t\t\treturn false;", "+\t\t\t\tswitch(resource.getType()) {", "+\t\t\t\t\tcase IResource.FILE :", "+\t\t\t\t\t\tString extension = resource.getFileExtension();", "+\t\t\t\t\t\tif (JavaBuilder.JAVA_EXTENSION.equalsIgnoreCase(extension)) return false;", "+\t\t\t\t\t\tif (JavaBuilder.CLASS_EXTENSION.equalsIgnoreCase(extension)) return false;", "+\t\t\t\t\t\tif (javaBuilder.filterExtraResource(resource)) return false;", "-\t\t\t\t\t\t\tIPath partialPath = resource.getFullPath().removeFirstSegments(segmentCount);", "-\t\t\t\t\t\t\tIResource copiedResource = outputFolder.getFile(partialPath);", "-\t\t\t\t\t\t\tif (copiedResource.exists()) {", "-\t\t\t\t\t\t\t\tcreateErrorFor(resource, Util.bind(\"build.duplicateResource\")); //$NON-NLS-1$", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tresource.copy(copiedResource.getFullPath(), IResource.FORCE, null);", "-\t\t\t\t\t\t\t\tcopiedResource.setDerived(true);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\treturn false;", "-\t\t\t\t\t\tcase IResource.FOLDER :", "-\t\t\t\t\t\t\tif (resource.getFullPath().equals(outputPath)) return false;", "-\t\t\t\t\t\t\tif (resource.getFullPath().equals(sourcePath)) return true;", "-\t\t\t\t\t\t\tif (javaBuilder.filterResource(resource)) return false;", "+\t\t\t\t\t\tIPath partialPath = resource.getFullPath().removeFirstSegments(segmentCount);", "+\t\t\t\t\t\tIResource copiedResource = outputFolder.getFile(partialPath);", "+\t\t\t\t\t\tif (copiedResource.exists()) {", "+\t\t\t\t\t\t\tcreateErrorFor(resource, Util.bind(\"build.duplicateResource\")); //$NON-NLS-1$", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tresource.copy(copiedResource.getFullPath(), IResource.FORCE, null);", "+\t\t\t\t\t\t\tcopiedResource.setDerived(true);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\tcase IResource.FOLDER :", "+\t\t\t\t\t\tif (resource.equals(outputFolder)) return false;", "+\t\t\t\t\t\tif (javaBuilder.filterExtraResource(resource)) return false;", "-\t\t\t\t\t\t\tgetOutputFolder(resource.getFullPath().removeFirstSegments(segmentCount));", "-\t\t\t\t\t}", "-\t\t\t\t\treturn true;", "+\t\t\t\t\t\tgetOutputFolder(resource.getFullPath().removeFirstSegments(segmentCount), outputFolder);", "+\t\t\t\treturn true;", "-\t\t);", "-\t}", "+\t\t}", "+\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "feee203fd787f2097a915e3b8980b1c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/RegionBasedHierarchyBuilder.java", "commitBeforeChange": "8f40b18693d984d1b3346925dd24dfb773855585", "commitAfterChange": "98a24097737828240f1d21a0b23b90c66df1d2e5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate ArrayList determineTypesInRegion(IProgressMonitor monitor)", "signatureAfterChange": " \tprivate ArrayList determineOpenablesInRegion(IProgressMonitor monitor)", "diff": ["-\tprivate ArrayList determineTypesInRegion(IProgressMonitor monitor) {", "+\tprivate ArrayList determineOpenablesInRegion(IProgressMonitor monitor) {", "-\t\t\tArrayList types = new ArrayList();", "+\t\t\tArrayList openables = new ArrayList();", "-\t\t\t\ttry {", "-\t\t\t\t\tIJavaElement root = roots[i];", "-\t\t\t\t\tswitch (root.getElementType()) {", "-\t\t\t\t\t\tcase IJavaElement.JAVA_PROJECT :", "-\t\t\t\t\t\t\tinjectAllTypesForJavaProject((IJavaProject) root, types);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT :", "-\t\t\t\t\t\t\tinjectAllTypesForPackageFragmentRoot((IPackageFragmentRoot) root, types);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT :", "-\t\t\t\t\t\t\tinjectAllTypesForPackageFragment((IPackageFragment) root, types);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IJavaElement.CLASS_FILE :", "-\t\t\t\t\t\t\ttypes.add(((IClassFile) root).getType());", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IJavaElement.COMPILATION_UNIT :", "-\t\t\t\t\t\t\tIType[] cuTypes = ((ICompilationUnit) root).getAllTypes();", "-\t\t\t\t\t\t\tfor (int j = 0; j < cuTypes.length; j++) {", "-\t\t\t\t\t\t\t\ttypes.add(cuTypes[j]);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase IJavaElement.TYPE :", "-\t\t\t\t\t\t\ttypes.add(root);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault :", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t} catch (JavaModelException e) {", "-\t\t\t\t\t// just continue", "+\t\t\t\tIJavaElement root = roots[i];", "+\t\t\t\tswitch (root.getElementType()) {", "+\t\t\t\t\tcase IJavaElement.JAVA_PROJECT :", "+\t\t\t\t\t\tinjectAllOpenablesForJavaProject((IJavaProject) root, openables);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT_ROOT :", "+\t\t\t\t\t\tinjectAllOpenablesForPackageFragmentRoot((IPackageFragmentRoot) root, openables);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IJavaElement.PACKAGE_FRAGMENT :", "+\t\t\t\t\t\tinjectAllOpenablesForPackageFragment((IPackageFragment) root, openables);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IJavaElement.CLASS_FILE :", "+\t\t\t\t\tcase IJavaElement.COMPILATION_UNIT :", "+\t\t\t\t\t\topenables.add(root);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase IJavaElement.TYPE :", "+\t\t\t\t\t\tIType type = (IType)root;", "+\t\t\t\t\t\tif (type.isBinary()) {", "+\t\t\t\t\t\t\topenables.add(type.getClassFile());", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\topenables.add(type.getCompilationUnit());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault :", "+\t\t\t\t\t\tbreak;", "-\t\t\treturn types;", "+\t\t\treturn openables;"]}], "num": 24141}
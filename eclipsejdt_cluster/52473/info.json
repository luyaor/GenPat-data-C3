{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c477bec89e4797712e697a6b70626e4", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b606ca454035d07738df20b6d7d510c8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "f3bba67d7292a507e1b3691e11f35ff1c9658d01", "commitAfterChange": "5ba107df633d1beada69a1a39d8b4efe7c8b77f6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \tpublic MethodBinding findExactMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r \tpublic MethodBinding findExactMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "diff": ["+\r", "+// replaces call to addTypeReference\r", "+\t\tcompilationUnitScope().recordTypeReference(receiverType);\r", "+// replaces call to addTypeReferences\r", "+\t\tcompilationUnitScope().recordReferences(argumentTypes);\r", "-\t\tMethodBinding exactMethod =\r", "-\t\t\treceiverType.getExactMethod(selector, argumentTypes);\r", "+\t\tMethodBinding exactMethod = receiverType.getExactMethod(selector, argumentTypes);\r", "+// replaces call to addTypeReferences\r", "+\t\t\tcompilationUnitScope().recordReferences(exactMethod.thrownExceptions);\r", "-\t\t\tif (receiverType.isInterface()\r", "-\t\t\t\t|| exactMethod.canBeSeenBy(receiverType, invocationSite, this))\r", "+\t\t\tif (receiverType.isInterface() || exactMethod.canBeSeenBy(receiverType, invocationSite, this))\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f268c763430f84a5d6facc3186d49dc9", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java", "commitBeforeChange": "f3bba67d7292a507e1b3691e11f35ff1c9658d01", "commitAfterChange": "5ba107df633d1beada69a1a39d8b4efe7c8b77f6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "signatureAfterChange": "\r \tpublic MethodBinding findMethod(\r \t\tReferenceBinding receiverType,\r \t\tchar[] selector,\r \t\tTypeBinding[] argumentTypes,\r \t\tInvocationSite invocationSite)", "diff": ["+\r", "-\t\tcompilationUnitScope().addTypeReference(currentType);\r", "+// replaces call to addTypeReference\r", "+\t\tcompilationUnitScope().recordTypeReference(receiverType);\r", "+\t\tcompilationUnitScope().addTypeReference(receiverType);\r", "+// replaces call to addTypeReferences\r", "+\t\tcompilationUnitScope().recordReferences(argumentTypes);\r", "+\r", "+\r", "-\t\t\treturn matchingMethod;\r", "-\t\t// may be null - have not checked arg types or visibility\r", "+\t\t\treturn matchingMethod; // may be null - have not checked arg types or visibility\r", "-\t\t\treturn (MethodBinding) found.elementAt(0);\r", "-\t\t// no good match so just use the first one found\r", "+\t\t\treturn (MethodBinding) found.elementAt(0); // no good match so just use the first one found\r", "+// replaces call to addTypeReferences\r", "+\t\t\tcompilationUnitScope().recordReferences(visible[0].thrownExceptions);\r"]}], "num": 52473}
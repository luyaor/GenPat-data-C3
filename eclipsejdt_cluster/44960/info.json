{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a9cd470e4dc5a0c7eb399d13d9d3b3ce", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "423855d3107a433ae10b8b5b0c70cc85", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/helloworld/HelloWorldWildcardAnnotationProcessorFactory.java", "commitBeforeChange": "13c7fe094d778e029a6ff3885a33b085ac95c7a1", "commitAfterChange": "3d23167de0cc8549a88a05b8aab19471006b9190", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \t \tpublic Collection<String> supportedAnnotationTypes()", "signatureAfterChange": "  \t \tpublic Collection<String> supportedAnnotationTypes()", "diff": ["-\t\treturn Collections.singletonList(\"org.eclipse.jdt.apt.tests.annotations.helloworld.*\"); //$NON-NLS-1$", "+\t\t", "+\t\t// We need to swap behavior because always claiming \"*\" will cause", "+\t\t// other processors normally called after us to be prevented from running,", "+\t\t// as we have claimed everything", "+\t\tif (CLAIM_ALL_ANNOTATIONS) {", "+\t\t\treturn Collections.singletonList(\"*\");", "+\t\t}", "+\t\telse {", "+\t\t\treturn Collections.singletonList(\"org.eclipse.jdt.apt.tests.annotations.helloworld.*\"); //$NON-NLS-1$", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7af750335e0fa7e6fd8895b1f70882bb", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java", "commitBeforeChange": "a3e63b72d2efd2058d202d3e2711391afc827fec", "commitAfterChange": "f0131d199789fbf75036ba10803faed4ef08b399", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate static char[][] computeBaseTypeNames(char[] typeName, boolean isConstantField, char[][] excludedNames)", "signatureAfterChange": "  \tprivate static char[][] computeBaseTypeNames(char[] typeName, boolean isConstantField, char[][] excludedNames)", "diff": ["-\t\tchar[] name = computeBaseTypeNames(typeName[0], excludedNames);", "-\t\tif(name != null) {", "-\t\t\treturn new char[][]{name};", "+\t\tif (isConstantField) {", "+\t\t\treturn computeNonBaseTypeNames(typeName, isConstantField);", "-\t\t\t// compute variable name like from non base type", "-\t\t\treturn  computeNonBaseTypeNames(typeName, isConstantField);", "+\t\t\tchar[] name = computeBaseTypeNames(typeName[0], excludedNames);", "+\t\t\tif(name != null) {", "+\t\t\t\treturn new char[][]{name};", "+\t\t\t} else {", "+\t\t\t\t// compute variable name like from non base type", "+\t\t\t\treturn computeNonBaseTypeNames(typeName, isConstantField);", "+\t\t\t}"]}], "num": 44960}
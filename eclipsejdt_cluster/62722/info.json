{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fcd9c3abbe97c5bb400ccf2e34632572", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29d7fe92709afdef5632832887e9de98", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 375, "methodNumberAfterChange": 375, "signatureBeforeChange": " private String parameterBoundAsString(TypeVariableBinding typeVariable, boolean makeShort)", "signatureAfterChange": " private String parameterBoundAsString(TypeVariableBinding typeVariable, boolean makeShort)", "diff": ["-    if (typeVariable.firstBound == typeVariable.superclass) {", "+    if (TypeBinding.equalsEquals(typeVariable.firstBound, typeVariable.superclass)) {", "-\t        if (i > 0 || typeVariable.firstBound == typeVariable.superclass) nameBuffer.append(\" & \"); //$NON-NLS-1$", "+\t        if (i > 0 || TypeBinding.equalsEquals(typeVariable.firstBound, typeVariable.superclass)) nameBuffer.append(\" & \"); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b8fd9aa5c56ce38ed5e96e4fc44cc08", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " boolean isInterfaceMethodImplemented(MethodBinding inheritedMethod, MethodBinding existingMethod, ReferenceBinding superType)", "signatureAfterChange": " boolean isInterfaceMethodImplemented(MethodBinding inheritedMethod, MethodBinding existingMethod, ReferenceBinding superType)", "diff": ["-\t\t&& (inheritedMethod.returnType == existingMethod.returnType\t// need to keep around to produce bridge methods? ...", "-\t\t\t|| (this.type != existingMethod.declaringClass \t\t\t// ... not if inheriting the bridge situation from a superclass", "+\t\t&& (TypeBinding.equalsEquals(inheritedMethod.returnType, existingMethod.returnType)\t// need to keep around to produce bridge methods? ...", "+\t\t\t|| (TypeBinding.notEquals(this.type, existingMethod.declaringClass) \t\t\t// ... not if inheriting the bridge situation from a superclass"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d357ff0eeb5788382719e1b0f4e156f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate static boolean resolveSubstituteConstraints(Scope scope, TypeVariableBinding[] typeVariables, InferenceContext inferenceContext, boolean considerEXTENDSConstraints)", "signatureAfterChange": "  \tprivate static boolean resolveSubstituteConstraints(Scope scope, TypeVariableBinding[] typeVariables, InferenceContext inferenceContext, boolean considerEXTENDSConstraints)", "diff": ["-\t\t\t\t\t\t\tif (equalSubstitute == current) {", "+\t\t\t\t\t\t\tif (TypeBinding.equalsEquals(equalSubstitute, current)) {", "-\t\t\t\t\t\t\t\t\tif (equalSubstitute != current && equalSubstitute != null) {", "+\t\t\t\t\t\t\t\t\tif (TypeBinding.notEquals(equalSubstitute, current) && equalSubstitute != null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49296f0df8b4e88c1982c16649bc21b8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "9c5c069c4ddd977815302e00ff7a4760365b1a17", "commitAfterChange": "2070676b1e20c45846e614809eff55257373d539", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "signatureAfterChange": "  \tpublic TypeBinding resolveType(BlockScope scope)", "diff": ["-\t\tif (valueIfTrueType == valueIfFalseType) { // harmed the implicit conversion", "+\t\tif (TypeBinding.equalsEquals(valueIfTrueType, valueIfFalseType)) { // harmed the implicit conversion", "-\t\t\treturn this.resolvedType = valueIfTrueType;", "+\t\t\treturn this.resolvedType = NullAnnotationMatching.moreDangerousType(valueIfTrueType, valueIfFalseType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ff1166205398914f6c301f5dfd35b8c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier15.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " void checkConcreteInheritedMethod(MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "signatureAfterChange": " void checkConcreteInheritedMethod(MethodBinding concreteMethod, MethodBinding[] abstractMethods)", "diff": ["-\t\tif (originalInherited.returnType != concreteMethod.returnType)", "+\t\tif (TypeBinding.notEquals(originalInherited.returnType, concreteMethod.returnType))", "-\t\t\tif ((concreteMethod.declaringClass == this.type.superclass && this.type.superclass.isParameterizedType() && !areMethodsCompatible(concreteMethod, originalInherited))", "+\t\t\tif ((TypeBinding.equalsEquals(concreteMethod.declaringClass, this.type.superclass) && this.type.superclass.isParameterizedType() && !areMethodsCompatible(concreteMethod, originalInherited))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2b1d866f9b6455c88630a28d70123e0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java", "commitBeforeChange": "a38d26ea4f2f03195744026af44f070900d21cea", "commitAfterChange": "72578ba43287462a0c91a7de026e07610ac80a95", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "signatureAfterChange": " public final boolean checkCastTypesCompatibility(Scope scope, TypeBinding castType, TypeBinding expressionType, Expression expression)", "diff": ["-\t\t\t\t\t\tif (castElementType == exprElementType) {", "+\t\t\t\t\t\tif (TypeBinding.equalsEquals(castElementType, exprElementType)) {", "-\t\t\t\t\t\t\t\t\t\tif ((castTypeMethods[i].returnType != expressionTypeMethods[j].returnType)", "+\t\t\t\t\t\t\t\t\t\tif ((TypeBinding.notEquals(castTypeMethods[i].returnType, expressionTypeMethods[j].returnType))"]}], "num": 62722}
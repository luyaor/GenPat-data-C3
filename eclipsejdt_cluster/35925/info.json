{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c01edf9fa6ccd82a45fbfb6a04dc5546", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22baac5e2a6f56eadd32a98bc18ba8dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModifyingResourceTests.java", "commitBeforeChange": "12bbec9151d1b613c62f44289e9e604128f21de0", "commitAfterChange": "cfad6931331ca38f2461ad24853dd9b6dfa652de", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 25, "signatureBeforeChange": " protected IClasspathEntry[] createClasspath(String projectName, String[] foldersAndPatterns, boolean hasInclusionPatterns, boolean hasExclusionPatterns)", "signatureAfterChange": " protected IClasspathEntry[] createClasspath(String[] foldersAndPatterns, boolean hasInclusionPatterns, boolean hasExclusionPatterns)", "diff": ["- */", "-protected IClasspathEntry[] createClasspath(String projectName, String[] foldersAndPatterns, boolean hasInclusionPatterns, boolean hasExclusionPatterns) {", "-\t\tIPath[] inclusionPatternPaths = new IPath[0];", "+\t\tIPath[] accessibleFiles = new IPath[0];", "-\t\t\tinclusionPatternPaths = new IPath[patternsCount];", "+\t\t\taccessibleFiles = new IPath[patternsCount];", "-\t\t\t\tinclusionPatternPaths[j] = new Path(tokenizer.nextToken());", "+\t\t\t\taccessibleFiles[j] = new Path(tokenizer.nextToken());", "-\t\tIPath[] exclusionPatternPaths = new IPath[0];", "+\t\tIPath[] nonAccessibleFiles = new IPath[0];", "-\t\t\texclusionPatternPaths = new IPath[patternsCount];", "+\t\t\tnonAccessibleFiles = new IPath[patternsCount];", "-\t\t\t\texclusionPatternPaths[j] = new Path(tokenizer.nextToken());", "+\t\t\t\tnonAccessibleFiles[j] = new Path(tokenizer.nextToken());", "+\t\tclasspath[i/increment] = JavaCore.newSourceEntry(folderPath, accessibleFiles, nonAccessibleFiles, null); ", "+\t}", "+\treturn classpath;", "+}", "-\t\t\tclasspath[i/increment] = JavaCore.newProjectEntry(folderPath, inclusionPatternPaths, exclusionPatternPaths, true/*combine access restrictions*/, new IClasspathAttribute[0], false); ", "-\t\t\tclasspath[i/increment] = JavaCore.newSourceEntry(folderPath, inclusionPatternPaths, exclusionPatternPaths, null); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e37bb2fa5c9d8959494f4f9acb6d2dc", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaConventions.java", "commitBeforeChange": "14ba43da4ca84e6aa2e4b0e2b6c660335b90691e", "commitAfterChange": "b7f39314c9eefd05e7002c31c87dcdb0333c0655", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static boolean isOverlappingRoots(IPath rootPath1, IPath rootPath2)", "signatureAfterChange": " \tpublic static boolean isOverlappingRoots(IPath rootPath1, IPath rootPath2)", "diff": ["-\t\t\treturn false;", "-\t\t}", "-\t\tString extension1 = rootPath1.getFileExtension();", "-\t\tString extension2 = rootPath2.getFileExtension();", "-\t\tif (extension1 != null && (extension1.equalsIgnoreCase(SuffixConstants.EXTENSION_JAR) || extension1.equalsIgnoreCase(SuffixConstants.EXTENSION_ZIP))) {", "-\t\t\treturn false;", "-\t\t} ", "-\t\tif (extension2 != null && (extension2.equalsIgnoreCase(SuffixConstants.EXTENSION_JAR) || extension2.equalsIgnoreCase(SuffixConstants.EXTENSION_ZIP))) {"]}], "num": 35925}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "142bc94e404c9be541ca74b508e44244", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c1134fa8843fe85f2f4504cdcc9d3e2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java", "commitBeforeChange": "e589570c4bd9e6c5ed804728bca5f124c9938845", "commitAfterChange": "876d1e29545f3823ab6b6c14229362303cd9cc00", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "signatureAfterChange": " void computeInheritedMethods(ReferenceBinding superclass, ReferenceBinding[] superInterfaces)", "diff": ["-\t// if an inheritedMethod has been 'replaced' by a supertype's method then skip it", "-", "+\t// if an inheritedMethod has been 'replaced' by a supertype's method then skip it, however", "+    // see usage of canOverridingMethodDifferInErasure below.", "-\tboolean allSuperclassesAreAbstract = true;", "-\t    if (allSuperclassesAreAbstract) {", "-\t\t    if (superType.isAbstract()) {", "-\t\t\t\t// only need to include superinterfaces if immediate superclasses are abstract", "-\t\t\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "-\t\t\t\t\tif (interfacesToVisit == null) {", "-\t\t\t\t\t\tinterfacesToVisit = itsInterfaces;", "-\t\t\t\t\t\tnextPosition = interfacesToVisit.length;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tint itsLength = itsInterfaces.length;", "-\t\t\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "-\t\t\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "-\t\t\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "-\t\t\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "-\t\t\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "-\t\t\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "-\t\t\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t// We used to only include superinterfaces if immediate superclasses are abstract", "+\t\t// but that is problematic. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=302358", "+\t\tif ((itsInterfaces = superType.superInterfaces()) != Binding.NO_SUPERINTERFACES) {", "+\t\t\tif (interfacesToVisit == null) {", "+\t\t\t\tinterfacesToVisit = itsInterfaces;", "+\t\t\t\tnextPosition = interfacesToVisit.length;", "-\t\t\t    allSuperclassesAreAbstract = false;", "+\t\t\t\tint itsLength = itsInterfaces.length;", "+\t\t\t\tif (nextPosition + itsLength >= interfacesToVisit.length)", "+\t\t\t\t\tSystem.arraycopy(interfacesToVisit, 0, interfacesToVisit = new ReferenceBinding[nextPosition + itsLength + 5], 0, nextPosition);", "+\t\t\t\tnextInterface : for (int a = 0; a < itsLength; a++) {", "+\t\t\t\t\tReferenceBinding next = itsInterfaces[a];", "+\t\t\t\t\tfor (int b = 0; b < nextPosition; b++)", "+\t\t\t\t\t\tif (next == interfacesToVisit[b]) continue nextInterface;", "+\t\t\t\t\tinterfacesToVisit[nextPosition++] = next;", "+\t\t\t\t}", "-\t\t\t\t\tif (existingMethod.declaringClass != inheritedMethod.declaringClass && areMethodsCompatible(existingMethod, inheritedMethod)) {", "+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=302358, skip inherited method only if any overriding version", "+\t\t\t\t\t// in a subclass is guaranteed to have the same erasure as an existing method.", "+\t\t\t\t\tif (existingMethod.declaringClass != inheritedMethod.declaringClass && areMethodsCompatible(existingMethod, inheritedMethod) && !canOverridingMethodDifferInErasure(existingMethod, inheritedMethod)) {", "+\t\t\t\t\t// https://bugs.eclipse.org/bugs/show_bug.cgi?id=302358, skip inherited method only if any overriding version", "+\t\t\t\t\t// in a subclass is guaranteed to have the same erasure as an existing method.", "-\t\t\t\t\t\tif (isInterfaceMethodImplemented(inheritedMethod, existingMethods[e], superType))", "+\t\t\t\t\t\tif (isInterfaceMethodImplemented(inheritedMethod, existingMethods[e], superType) && !canOverridingMethodDifferInErasure(existingMethods[e], inheritedMethod))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "febbf43e292f24edc5d84d6fea341bb4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "3fea0bd3d01827a0628763911bb538bc75a5f8bd", "commitAfterChange": "267a82506dfcd2b4938ade544a2160c1561cce40", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprivate void disassemble(IClassFileReader classFileReader, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "signatureAfterChange": " \tprivate void disassemble(IClassFileReader classFileReader, char[] className, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode)", "diff": ["-\tprivate void disassemble(IClassFileReader classFileReader, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {", "+\tprivate void disassemble(IClassFileReader classFileReader, char[] className, IMethodInfo methodInfo, StringBuffer buffer, String lineSeparator, int tabNumber, int mode) {", "-\t\tint accessFlags = methodInfo.getAccessFlags();", "+\t\tfinal int accessFlags = methodInfo.getAccessFlags();", "-\t\tchar[] methodName;", "-\t\t\tmethodName = classFileReader.getClassName();", "-\t\t\tbuffer.append(Signature.toCharArray(methodDescriptor, methodName, getParameterNames(methodDescriptor, codeAttribute, accessFlags) , false, false, (accessFlags & IModifierConstants.ACC_VARARGS) != 0));", "+\t\t\tbuffer.append(Signature.toCharArray(methodDescriptor, returnClassName(className, '.', COMPACT), getParameterNames(methodDescriptor, codeAttribute, accessFlags) , !checkMode(mode, COMPACT), false, (accessFlags & IModifierConstants.ACC_VARARGS) != 0));", "-\t\t\tmethodName = methodInfo.getName();", "-\t\t\tbuffer.append(Signature.toCharArray(methodDescriptor, methodName, getParameterNames(methodDescriptor, codeAttribute, accessFlags) , false, true, (accessFlags & IModifierConstants.ACC_VARARGS) != 0));", "+\t\t\tbuffer.append(Signature.toCharArray(methodDescriptor, methodInfo.getName(), getParameterNames(methodDescriptor, codeAttribute, accessFlags) , !checkMode(mode, COMPACT), true, (accessFlags & IModifierConstants.ACC_VARARGS) != 0));"]}], "num": 63087}
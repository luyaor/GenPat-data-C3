{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0efe5e5da6b0dbedd45042f31e3a0bd2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56725a0424b6f766a1cedf67035d10d8", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/IfStatement.java", "commitBeforeChange": "cb764d0f635c3538feb2f431a07bf4883bc5e3de", "commitAfterChange": "2fc42eeb502a121cefe1f87a9fd2e92cf7c57bec", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "  public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["+\tif (((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0) && ", "+\t\t\t((thenFlowInfo.tagBits & FlowInfo.UNREACHABLE) != 0)) {", "+\t\t// Mark then block as unreachable", "+\t\t// No need if the whole if-else construct itself lies in unreachable code", "+\t\tthis.bits |= ASTNode.IsThenStatementUnreachable;", "+\t} else if (((flowInfo.tagBits & FlowInfo.UNREACHABLE) == 0) &&", "+\t\t\t((elseFlowInfo.tagBits & FlowInfo.UNREACHABLE) != 0)) {", "+\t\t// Mark else block as unreachable", "+\t\t// No need if the whole if-else construct itself lies in unreachable code", "+\t\tthis.bits |= ASTNode.IsElseStatementUnreachable;", "+\t}", "-\t\tif (isConditionOptimizedFalse) {", "+\t\tif (isConditionOptimizedFalse || ((this.bits & ASTNode.IsThenStatementUnreachable) != 0)) {", "+\t\t\t} else {", "+\t\t\t\t// its a known coding pattern which should be tolerated by dead code analysis", "+\t\t\t\t// according to isKnowDeadCodePattern()", "+\t\t\t\tthis.bits &= ~ASTNode.IsThenStatementUnreachable;", "-\t    // signal else clause unnecessarily nested, tolerate else-if code pattern", "-\t    if (thenFlowInfo == FlowInfo.DEAD_END", "-\t            && (this.bits & IsElseIfStatement) == 0 \t// else of an else-if", "-\t            && !(this.elseStatement instanceof IfStatement)) {", "-\t        currentScope.problemReporter().unnecessaryElse(this.elseStatement);", "-\t    }", "+\t\t// signal else clause unnecessarily nested, tolerate else-if code pattern", "+\t\tif (thenFlowInfo == FlowInfo.DEAD_END", "+\t\t\t\t&& (this.bits & IsElseIfStatement) == 0 \t// else of an else-if", "+\t\t\t\t&& !(this.elseStatement instanceof IfStatement)) {", "+\t\t\tcurrentScope.problemReporter().unnecessaryElse(this.elseStatement);", "+\t\t}", "-\t\tif (isConditionOptimizedTrue) {", "+\t\tif (isConditionOptimizedTrue || ((this.bits & ASTNode.IsElseStatementUnreachable) != 0)) {", "+\t\t\t} else {", "+\t\t\t\t// its a known coding pattern which should be tolerated by dead code analysis", "+\t\t\t\t// according to isKnowDeadCodePattern()", "+\t\t\t\tthis.bits &= ~ASTNode.IsElseStatementUnreachable;", "-\tFlowInfo mergedInfo = FlowInfo.mergedOptimizedBranches(", "+\tFlowInfo mergedInfo = FlowInfo.mergedOptimizedBranchesIfElse(", "-\t\ttrue /*if(true){ return; }  fake-reachable(); */);", "+\t\ttrue /*if(true){ return; }  fake-reachable(); */,", "+\t\tflowInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f320f0f2e3b29b083ead1825ac149ef", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "aa89ff1ef436fca731febc3292e2e8d8ed8e98c1", "commitAfterChange": "87588697042c1dee29ce3c0fc4e8fd0e078fa8cb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "signatureAfterChange": " \tpublic final boolean checkCastTypesCompatibility( \t\tBlockScope scope, \t\tTypeBinding castType, \t\tTypeBinding expressionType)", "diff": ["-\t\t\t\t\t\tif (castType.erasure() == expressionType.erasure() && castType != expressionType) {", "+\t\t\t\t\t\tif (castType.erasure() == expressionType.erasure() && castType != expressionType && (castType.tagBits & TagBits.HasWildcard) == 0) {", "-\t\t\t\t\t\tif (match != null && !match.isParameterizedType() && !match.isGenericType()) {", "+\t\t\t\t\t\tif ((match != null && !match.isParameterizedType() && !match.isGenericType()) ", "+\t\t\t\t\t\t\t\t|| ((castType.tagBits & TagBits.HasWildcard) == 0 && (expressionType.tagBits & TagBits.HasWildcard) != 0)) {", "-\t\t\t\t\t\tif (castType.erasure() == expressionType.erasure() && castType != expressionType) {", "+\t\t\t\t\t\tif (castType.erasure() == expressionType.erasure() && castType != expressionType && (castType.tagBits & TagBits.HasWildcard) == 0) {", "-\t\t\t\t\t\tif (match != null && !match.isParameterizedType() && !match.isGenericType()) {", "+\t\t\t\t\t\tif ((match != null && !match.isParameterizedType() && !match.isGenericType()) ", "+\t\t\t\t\t\t\t\t|| ((castType.tagBits & TagBits.HasWildcard) == 0 && (expressionType.tagBits & TagBits.HasWildcard) != 0)) {", "-\t\t\t\t\tif (castType.erasure() == expressionType.erasure() && castType != expressionType) {", "+\t\t\t\t\tif (castType.erasure() == expressionType.erasure() && castType != expressionType && (castType.tagBits & TagBits.HasWildcard) == 0) {", "-\t\t\t\t\tif (match != null && !match.isParameterizedType() && !match.isGenericType()) {", "+\t\t\t\t\tif ((match != null && !match.isParameterizedType() && !match.isGenericType()) ", "+\t\t\t\t\t\t\t|| ((castType.tagBits & TagBits.HasWildcard) == 0 && (expressionType.tagBits & TagBits.HasWildcard) != 0)) {"]}], "num": 23713}
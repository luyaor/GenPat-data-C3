{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4faa0fb62d079720bbeb9dfa3b2ec5da", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76bbca1421bd793cf017dc4713cd4f6d", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java", "commitBeforeChange": "b21cadb5eae53d9f84dce9f073b5350a267b6ad6", "commitAfterChange": "09b5bcfabb25c2c9040a9d902d7f8e5151952519", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 320, "signatureBeforeChange": " public void castArgumentToVarargsMethod(MethodBinding method, InvocationSite location)", "signatureAfterChange": " public void varargsArgumentNeedCast(MethodBinding method, TypeBinding argumentType, InvocationSite location)", "diff": ["-public void castArgumentToVarargsMethod(MethodBinding method, InvocationSite location) {", "-\tTypeBinding lastParam = method.parameters[method.parameters.length-1];", "-\tif (method.isConstructor()) {", "-\t\tthis.handle(", "-\t\t\tIProblem.CastArgumentToVarargsConstructor,", "-\t\t\tnew String[] {new String(method.declaringClass.readableName()), typesAsString(method.isVarargs(), method.parameters, false), new String(lastParam.readableName())},", "-\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), typesAsString(method.isVarargs(), method.parameters, true), new String(lastParam.shortReadableName())},", "-\t\t\tlocation.sourceStart(),", "-\t\t\tlocation.sourceEnd());", "-\t} else {", "-\t\tthis.handle(", "-\t\t\tIProblem.CastArgumentToVarargsMethod,", "-\t\t\tnew String[] {new String(method.declaringClass.readableName()), new String(method.selector), typesAsString(method.isVarargs(), method.parameters, false), new String(lastParam.readableName())},", "-\t\t\tnew String[] {new String(method.declaringClass.shortReadableName()), new String(method.selector), typesAsString(method.isVarargs(), method.parameters, true), new String(lastParam.shortReadableName())},", "-\t\t\tlocation.sourceStart(),", "-\t\t\tlocation.sourceEnd());", "-\t}", "-}", "+public void varargsArgumentNeedCast(MethodBinding method, TypeBinding argumentType, InvocationSite location) {", "+\tTypeBinding lastParam = method.parameters[method.parameters.length-1];", "+\tif (method.isConstructor()) {", "+\t\tthis.handle(", "+\t\t\tIProblem.ConstructorVarargsArgumentNeedCast,", "+\t\t\tnew String[] {new String(argumentType.readableName()), new String(lastParam.readableName()), new String(method.declaringClass.readableName()), typesAsString(method.isVarargs(), method.parameters, false), },", "+\t\t\tnew String[] {new String(argumentType.shortReadableName()), new String(lastParam.shortReadableName()), new String(method.declaringClass.shortReadableName()), typesAsString(method.isVarargs(), method.parameters, true), },", "+\t\t\tlocation.sourceStart(),", "+\t\t\tlocation.sourceEnd());", "+\t} else {", "+\t\tthis.handle(", "+\t\t\tIProblem.MethodVarargsArgumentNeedCast,", "+\t\t\tnew String[] { new String(argumentType.readableName()), new String(lastParam.readableName()), new String(method.selector), typesAsString(method.isVarargs(), method.parameters, false), new String(method.declaringClass.readableName()), },", "+\t\t\tnew String[] { new String(argumentType.shortReadableName()), new String(lastParam.shortReadableName()), new String(method.selector), typesAsString(method.isVarargs(), method.parameters, true), new String(method.declaringClass.shortReadableName()), },", "+\t\t\tlocation.sourceStart(),", "+\t\t\tlocation.sourceEnd());", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2928d22ace9b625998077a8c408251a", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java", "commitBeforeChange": "160613f931d3107092c23ec0bbf5c709e81be6c4", "commitAfterChange": "4b4dbca0bb97a8d7d91d56de2e2d0246704ead9c", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tprivate void disassemble(IConstantPool constantPool, StringBuffer buffer, String lineSeparator, int tabNumber)", "signatureAfterChange": "  \tprivate void disassemble(IConstantPool constantPool, StringBuffer buffer, String lineSeparator, int tabNumber)", "diff": ["-\t\t\t\t\t\t\tgetFieldRefNameAndType(constantPoolEntry)})); //$NON-NLS-1$", "+\t\t\t\t\t\t\tnew String(constantPoolEntry.getFieldName()),", "+\t\t\t\t\t\t\tnew String(constantPoolEntry.getFieldDescriptor())})); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tgetMethodRefNameAndType(constantPoolEntry)})); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tnew String(constantPoolEntry.getMethodName()),", "+\t\t\t\t\t\t\t\tnew String(constantPoolEntry.getMethodDescriptor())}));", "-\t\t\t\t\t\t\t\tgetMethodRefNameAndType(constantPoolEntry)})); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tnew String(constantPoolEntry.getMethodName()),", "+\t\t\t\t\t\t\t\tnew String(constantPoolEntry.getMethodDescriptor())}));"]}], "num": 46691}
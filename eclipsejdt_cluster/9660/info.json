{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6fd243e05f5e902201aaedf23acae7f0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bace1cebc39b777dc61fb88a0c81a1b", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java", "commitBeforeChange": "1df699e669c4e4f2a900614bdd75bf90200992be", "commitAfterChange": "0171a309cfa1d187647511afec0bb25c2eadf3cf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, Expression receiver, ReferenceBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] argumentTypes, final InvocationSite invocationSite)", "signatureAfterChange": " \tpublic static void checkNeedForArgumentCasts(BlockScope scope, Expression receiver, ReferenceBinding receiverType, MethodBinding binding, Expression[] arguments, TypeBinding[] argumentTypes, final InvocationSite invocationSite)", "diff": ["+\t\t", "+\t\t// first iteration, questionning widening cast", "-\t\t\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)argument);", "+\t\t\t\t\tscope.problemReporter().unnecessaryCastForArgument((CastExpression)argument, binding.parameters[i]);", "-\t\tif (rawArgumentTypes == argumentTypes) return; // did not find any unnecessary cast candidate", "-\t", "-\t\tInvocationSite fakeInvocationSite = new InvocationSite(){\t", "-\t\t\tpublic boolean isSuperAccess(){ return invocationSite.isSuperAccess(); }", "-\t\t\tpublic boolean isTypeAccess() { return invocationSite.isTypeAccess(); }", "-\t\t\tpublic void setActualReceiverType(ReferenceBinding actualReceiverType) {}", "-\t\t\tpublic void setDepth(int depth) {}", "-\t\t\tpublic void setFieldIndex(int depth){}", "-\t\t};\t", "-\t\tMethodBinding bindingIfNoCast;", "-\t\tif (binding.isConstructor()) {", "-\t\t\tbindingIfNoCast = scope.getConstructor(receiverType, rawArgumentTypes, fakeInvocationSite);", "-\t\t} else {", "-\t\t\tbindingIfNoCast = receiver.isImplicitThis()", "-\t\t\t\t? scope.getImplicitMethod(binding.selector, rawArgumentTypes, fakeInvocationSite)", "-\t\t\t\t: scope.getMethod(receiverType, binding.selector, rawArgumentTypes, fakeInvocationSite); \t", "+\t\t// did not find any unnecessary cast candidate", "+\t\tif (rawArgumentTypes != argumentTypes) {", "+\t\t\tcheckAlternateBinding(scope, receiver, receiverType, binding, arguments, argumentTypes, rawArgumentTypes, invocationSite);", "-\t\tif (bindingIfNoCast == binding) {", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tif (argumentTypes[i] != rawArgumentTypes[i]) {", "-\t\t\t\t\tscope.problemReporter().unnecessaryCast((CastExpression)arguments[i]);", "+\t\t", "+\t\t// second attempt questionning narrowing cast", "+\t\trawArgumentTypes = argumentTypes;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tExpression argument = arguments[i];", "+\t\t\tif (argument instanceof CastExpression && (argument.bits & UnnecessaryCastMask) == 0) {", "+\t\t\t\tTypeBinding castedExpressionType = ((CastExpression)argument).expression.resolvedType;", "+\t\t\t\tif (rawArgumentTypes == argumentTypes) {", "+\t\t\t\t\tSystem.arraycopy(rawArgumentTypes, 0, rawArgumentTypes = new TypeBinding[length], 0, length);", "+\t\t\t\trawArgumentTypes[i] = castedExpressionType; ", "+\t\t}", "+\t\tif (rawArgumentTypes != argumentTypes) {", "+\t\t\tcheckAlternateBinding(scope, receiver, receiverType, binding, arguments, argumentTypes, rawArgumentTypes, invocationSite);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b8add37103e9d27815389ba434bf00f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java", "commitBeforeChange": "09f42f58bcdf2fa84ccd2b8b65f28ab3036222ca", "commitAfterChange": "57e8dd41219d846363c918d62edb5007994c5c79", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void rebindInnerPolies(BoundSet bounds, TypeBinding[] argumentTypes)", "signatureAfterChange": " \tpublic void rebindInnerPolies(BoundSet bounds, TypeBinding[] parameterTypes)", "diff": ["-\tpublic void rebindInnerPolies(BoundSet bounds, TypeBinding[] argumentTypes) {", "+\tpublic void rebindInnerPolies(BoundSet bounds, TypeBinding[] parameterTypes) {", "+\t\t// This updates all remaining poly expressions that are direct arguments of the current invocation:", "+\t\t// (handles FunctionalExpression & ConditionalExpression)", "+\t\tacceptPendingPolyArguments(bounds, parameterTypes, this.inferenceKind == CHECK_VARARG);", "+\t\t// This loops over all poly expressions for which a sub-inference was triggered:", "+\t\t// (handles generic invocations)", "-\t\t\t\t// apply inference results onto the binding of the inner invocation:", "+\t\t\t\t// apply results of the combined inference onto the binding of the inner invocation:", "-\t\t\t\tinnerMessage.updateBindings(innerBinding);", "-\t\t\t\tinnerMessage.markInferenceFinished(); // invocation type inference has already happened on the inner, too.", "-\t\t\t\t// finalize resolving of arguments of the inner invocation:", "-\t\t\t\tTypeBinding[] innerParameters = innerBinding.parameters;", "-\t\t\t\tint inferenceKind = innerMessage.inferenceKind();", "-\t\t\t\tboolean isVarargs = (inferenceKind == CHECK_VARARG) && innerBinding.isVarargs();", "-\t\t\t\tTypeBinding varArgsType = isVarargs ? ((ArrayBinding)innerParameters[innerParameters.length-1]).elementsType() : null; ", "-\t\t\t\tExpression[] arguments = innerMessage.arguments();", "-\t\t\t\tif (arguments != null) {", "-\t\t\t\t\tfor (int j = 0; j < arguments.length; j++) {", "-\t\t\t\t\t\tTypeBinding param = (varArgsType == null || (j < innerParameters.length-1))", "-\t\t\t\t\t\t\t\t\t\t\t\t? innerParameters[j]", "-\t\t\t\t\t\t\t\t\t\t\t\t: varArgsType;", "-\t\t\t\t\t\targuments[j].checkAgainstFinalTargetType(param);", "+\t\t\t\tif (innerMessage.updateBindings(innerBinding)) { // only if we are actually improving anything", "+\t\t\t\t\tTypeBinding[] innerArgumentTypes = null;", "+\t\t\t\t\tExpression[] innerArguments = innerMessage.arguments();", "+\t\t\t\t\tif (innerArguments != null) {", "+\t\t\t\t\t\tinnerArgumentTypes = new TypeBinding[innerArguments.length];", "+\t\t\t\t\t\tfor (int j = 0; j < innerArguments.length; j++)", "+\t\t\t\t\t\t\tinnerArgumentTypes[i] = innerArguments[i].resolvedType;", "+\t\t\t\t\tASTNode.resolvePolyExpressionArguments(innerMessage, innerBinding, innerArgumentTypes);", "-\t\t\t// inner FunctionalExpression don't seem to be included in inference.", "-\t\t\t// TODO recheck any inquires on those actually involve inference of which the results are included here. "]}], "num": 9660}
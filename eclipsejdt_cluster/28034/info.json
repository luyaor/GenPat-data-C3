{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24f69162ab45ec13291d753e4d3509a2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d66d5be3960e5ac9b5148b7a6ca32fb7", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java", "commitBeforeChange": "39e0b3c44033d41fbb2f81071d1364bb178092c7", "commitAfterChange": "b4de16a0dc7d3ad9d6dd3c598e29125b9c3084c3", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": " \tpublic void internalAnalyseCode(FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\t\t\t\t\t}", "+\t\t\t\t\t} ", "-\t\t\t\t\tmemberTypes[i].analyseCode(scope, flowContext, nonStaticFieldInfo.copy());", "+\t\t\t\t\tmemberTypes[i].analyseCode(scope, flowContext, nonStaticFieldInfo.copy().setReachMode(flowInfo.reachMode())); // reset reach mode in case initializers did abrupt completely", "-\t\t\t\t\t\t\tstaticInitializerContext, ", "-\t\t\t\t\t\t\tstaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo));", "+\t\t\t\t\t\t\tstaticInitializerContext,  ", "+\t\t\t\t\t\t\tstaticFieldInfo.unconditionalInits().discardNonFieldInitializations().addInitializationsFrom(outerInfo).setReachMode(flowInfo.reachMode()));  // reset reach mode in case initializers did abrupt completely", "-\t\t\t\t\t\tmethod.analyseCode(scope, initializerContext, constructorInfo.copy());", "+\t\t\t\t\t\tmethod.analyseCode(scope, initializerContext, constructorInfo.copy().setReachMode(flowInfo.reachMode())); // reset reach mode in case initializers did abrupt completely"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8aa46ae8acd279289b99645cade585f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java", "commitBeforeChange": "a2ae3e117eaea10fecaf3678af5938ffa98d76f4", "commitAfterChange": "71ab6b3956db9fea4a8f81e891e05ac4d44d96d9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "signatureAfterChange": "\r public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo)", "diff": ["-\tConstant inlinedCondition;\r", "-\tif ((inlinedCondition = condition.constant) != NotAConstant) {\r", "-\t\tif (inlinedCondition.booleanValue()) {\r", "+\tConstant inlinedCondition = condition.constant;\r", "+\tif (inlinedCondition == NotAConstant) inlinedCondition = condition.conditionalConstant();\r", "+\tif (inlinedCondition != NotAConstant) {\r", "+\t\tif (inlinedCondition.booleanValue() == true) {\r", "-\t\t\tvalueIfFalse.analyseCode(currentScope, flowContext, flowInfo.copy());\r", "+\t\t\tvalueIfFalse.analyseCode(currentScope, flowContext, flowInfo.copy().markAsFakeReachable(true));\r", "-\t\t\tvalueIfTrue.analyseCode(currentScope, flowContext, flowInfo.copy());\r", "+\t\t\tvalueIfTrue.analyseCode(currentScope, flowContext, flowInfo.copy().markAsFakeReachable(true));\r"]}], "num": 28034}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "139b63d27cff26ca83460c9df98c31f6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5554659bb9dfa84cd644cb5865dfe691", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericMethodTests.java", "commitBeforeChange": "457fc77ec96140a15fc3e1c18bbf7bf53c7ea1c9", "commitAfterChange": "44074e366655e2cf89768617c1e64463f5949123", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tprotected void setUp () throws Exception", "signatureAfterChange": " \tpublic void testMethodReferencesElementPatternSingleParamArguments01() throws CoreException", "diff": ["-\tprotected void setUp () throws Exception {", "-\t\tsuper.setUp();", "-\t\tthis.resultCollector.showAccuracy = true;", "-\t}", "+\t// Search references to single parameterized methods", "+\tpublic void testMethodReferencesElementPatternSingleParamArguments01() throws CoreException {", "+\t\tICompilationUnit unit = getCompilationUnit(\"JavaSearch15/src/g5/m/ref/RefSingle.java\");", "+\t\tIMethod method = selectMethod(unit, \"generic\", 3);", "+\t\tIJavaSearchScope scope = getJavaSearchScope15();", "+\t\tsearch(method, REFERENCES, scope, resultCollector);", "+\t\tassertSearchResults(", "+\t\t\t\"src/g5/m/ref/RefRaw.java void g5.m.ref.RefRaw.testSingle() [generic(new Exception())] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testObject() [generic(new Object())] EXACT_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testException() [generic(new Exception())] ERASURE_MATCH\\n\" + ", "+\t\t\t\"src/g5/m/ref/RefSingle.java void g5.m.ref.RefSingle.testRuntimeException() [generic(new RuntimeException())] ERASURE_MATCH\"", "+\t\t);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f78e145fd92f64c377e6c5a349967dc4", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchGenericConstructorTests.java", "commitBeforeChange": "9ee78f50bb7fb9d70095ea7ff2d9f2e27d840c37", "commitAfterChange": "b6410432af18704990f18fa69a09dd7a76e8fb04", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void testConstructorReferencesElementPatternSingleParamArguments05() throws CoreException", "signatureAfterChange": " \tpublic void testConstructorReferencesElementPatternSingleParamArguments05() throws CoreException", "diff": ["-\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), new Throwable())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new <Throwable>Single<Object>(new Object(), new Throwable())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new <Exception>Single<Exception>(new Exception(), new Exception())] EQUIVALENT_ERASURE_MATCH\\n\" + ", "-\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testRuntimeException() [new <RuntimeException>Single<RuntimeException>(new RuntimeException(), new RuntimeException())] EQUIVALENT_ERASURE_MATCH\"", "+\t\t\t\"src/g5/c/ref/RefRaw.java void g5.c.ref.RefRaw.testSingle() [new Single(new Object(), new Throwable())] EXACT_RAW_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testObject() [new <Throwable>Single<Object>(new Object(), new Throwable())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testException() [new <Exception>Single<Exception>(new Exception(), new Exception())] EQUIVALENT_MATCH\\n\" + ", "+\t\t\t\"src/g5/c/ref/RefSingle.java void g5.c.ref.RefSingle.testRuntimeException() [new <RuntimeException>Single<RuntimeException>(new RuntimeException(), new RuntimeException())] EQUIVALENT_MATCH\""]}], "num": 52053}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3817894f8d813dc574b75d0824f93e0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50c4f75dec83d8e00f1fb2cf0c19ca03", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "5f7b1ccfabc400ea9e65986d696417445a37876d", "commitAfterChange": "d3d3fd84014a6dcb70309f0821240a82ccf93b29", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \tpublic static IJavaElement determineIfOnClasspath( \t\tIResource resource, \t\tIJavaProject project)", "signatureAfterChange": " \tpublic static IJavaElement determineIfOnClasspath( \t\tIResource resource, \t\tIJavaProject project)", "diff": ["-\t\t\t\t", "-\t\t\tfor (int i = 0; i < entries.length; i++) {", "-\t\t\t\tIClasspathEntry entry = entries[i];", "-\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "-\t\t\t\tIPath rootPath = entry.getPath();", "-\t\t\t\tif (rootPath.equals(resourcePath)) {", "-\t\t\t\t\treturn project.getPackageFragmentRoot(resource);", "-\t\t\t\t} else if (rootPath.isPrefixOf(resourcePath)) {", "-\t\t\t\t\t// allow creation of package fragment if it contains a .java file that is included", "-\t\t\t\t\tif (!Util.isExcluded(resource, ((ClasspathEntry)entry).fullInclusionPatternChars(), ((ClasspathEntry)entry).fullExclusionPatternChars())) {", "-\t\t\t\t\t\t// given we have a resource child of the root, it cannot be a JAR pkg root", "-\t\t\t\t\t\tPackageFragmentRoot root =(PackageFragmentRoot) ((JavaProject) project).getFolderPackageFragmentRoot(rootPath);", "-\t\t\t\t\t\tif (root == null) return null;", "-\t\t\t\t\t\tIPath pkgPath = resourcePath.removeFirstSegments(rootPath.segmentCount());", "+\t\t\t", "+\t\t\tint length\t= entries.length;", "+\t\t\tif (length > 0) {", "+\t\t\t\tString sourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\t\tString complianceLevel = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tIClasspathEntry entry = entries[i];", "+\t\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_PROJECT) continue;", "+\t\t\t\t\tIPath rootPath = entry.getPath();", "+\t\t\t\t\tif (rootPath.equals(resourcePath)) {", "+\t\t\t\t\t\treturn project.getPackageFragmentRoot(resource);", "+\t\t\t\t\t} else if (rootPath.isPrefixOf(resourcePath)) {", "+\t\t\t\t\t\t// allow creation of package fragment if it contains a .java file that is included", "+\t\t\t\t\t\tif (!Util.isExcluded(resource, ((ClasspathEntry)entry).fullInclusionPatternChars(), ((ClasspathEntry)entry).fullExclusionPatternChars())) {", "+\t\t\t\t\t\t\t// given we have a resource child of the root, it cannot be a JAR pkg root", "+\t\t\t\t\t\t\tPackageFragmentRoot root =(PackageFragmentRoot) ((JavaProject) project).getFolderPackageFragmentRoot(rootPath);", "+\t\t\t\t\t\t\tif (root == null) return null;", "+\t\t\t\t\t\t\tIPath pkgPath = resourcePath.removeFirstSegments(rootPath.segmentCount());", "-\t\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "-\t\t\t\t\t\t\t// if the resource is a file, then remove the last segment which", "-\t\t\t\t\t\t\t// is the file name in the package", "-\t\t\t\t\t\t\tpkgPath = pkgPath.removeLastSegments(1);", "+\t\t\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "+\t\t\t\t\t\t\t\t// if the resource is a file, then remove the last segment which", "+\t\t\t\t\t\t\t\t// is the file name in the package", "+\t\t\t\t\t\t\t\tpkgPath = pkgPath.removeLastSegments(1);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tString[] pkgName = pkgPath.segments();", "+\t\t\t\t\t\t\tif (pkgName.length != 0 && JavaConventions.validatePackageName(Util.packageName(pkgPath, sourceLevel, complianceLevel), sourceLevel, complianceLevel).getSeverity() == IStatus.ERROR) {", "+\t\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturn root.getPackageFragment(pkgName);", "-\t\t\t\t\t\tString[] pkgName = pkgPath.segments();", "-\t\t\t\t\t\tif (pkgName.length != 0 && JavaConventions.validatePackageName(Util.packageName(pkgPath)).getSeverity() == IStatus.ERROR) {", "-\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn root.getPackageFragment(pkgName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6a97f962e0089377571f4397414e5c2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java", "commitBeforeChange": "c458ad2d505b6f4a7e2ec3bba3954504b01472bd", "commitAfterChange": "f802d6fc991463cb62d45c1ee5e011116f9ae063", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic static IJavaElement determineIfOnClasspath( \t\tIResource resource, \t\tIJavaProject project)", "signatureAfterChange": " \tpublic static IJavaElement determineIfOnClasspath( \t\tIResource resource, \t\tIJavaProject project)", "diff": ["-\t\t\t\t} else if (rootPath.isPrefixOf(resourcePath) && !Util.isExcluded(resource, ((ClasspathEntry)entry).fullExclusionPatternChars())) {", "-\t\t\t\t\t// given we have a resource child of the root, it cannot be a JAR pkg root", "-\t\t\t\t\tIPackageFragmentRoot root = ((JavaProject) project).getFolderPackageFragmentRoot(rootPath);", "-\t\t\t\t\tif (root == null) return null;", "-\t\t\t\t\tIPath pkgPath = resourcePath.removeFirstSegments(rootPath.segmentCount());", "-", "-\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "-\t\t\t\t\t\t// if the resource is a file, then remove the last segment which", "-\t\t\t\t\t\t// is the file name in the package", "-\t\t\t\t\t\tpkgPath = pkgPath.removeLastSegments(1);", "+\t\t\t\t} else if (rootPath.isPrefixOf(resourcePath)) {", "+\t\t\t\t\t// allow creation of package fragment if it contains a .java file that is included", "+\t\t\t\t\tif (!Util.isExcluded(resource, ((ClasspathEntry)entry).fullInclusionPatternChars(), ((ClasspathEntry)entry).fullExclusionPatternChars())) {", "+\t\t\t\t\t\t// given we have a resource child of the root, it cannot be a JAR pkg root", "+\t\t\t\t\t\tIPackageFragmentRoot root = ((JavaProject) project).getFolderPackageFragmentRoot(rootPath);", "+\t\t\t\t\t\tif (root == null) return null;", "+\t\t\t\t\t\tIPath pkgPath = resourcePath.removeFirstSegments(rootPath.segmentCount());", "+\t", "+\t\t\t\t\t\tif (resource.getType() == IResource.FILE) {", "+\t\t\t\t\t\t\t// if the resource is a file, then remove the last segment which", "+\t\t\t\t\t\t\t// is the file name in the package", "+\t\t\t\t\t\t\tpkgPath = pkgPath.removeLastSegments(1);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tString pkgName = Util.packageName(pkgPath);", "+\t\t\t\t\t\tif (pkgName == null || JavaConventions.validatePackageName(pkgName).getSeverity() == IStatus.ERROR) {", "+\t\t\t\t\t\t\treturn null;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn root.getPackageFragment(pkgName);", "-\t\t\t\t\tString pkgName = Util.packageName(pkgPath);", "-\t\t\t\t\tif (pkgName == null || JavaConventions.validatePackageName(pkgName).getSeverity() == IStatus.ERROR) {", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t}", "-\t\t\t\t\treturn root.getPackageFragment(pkgName);"]}], "num": 27187}
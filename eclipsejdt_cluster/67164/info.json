{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d372987dd7ab6fa4a8870e6dc6586de4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c394775d0046124782520811f5a6ec2", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java", "commitBeforeChange": "b8f9116e058ff109e3943db933379c84a64ecfdc", "commitAfterChange": "b5f5f93dde4e439dc96f53e74d57c1059230610e", "methodNumberBeforeChange": 142, "methodNumberAfterChange": 142, "signatureBeforeChange": " \tpublic boolean visit(TagElement node)", "signatureAfterChange": " \tpublic boolean visit(TagElement node)", "diff": ["-\t\tif (isChanged(node, TagElement.FRAGMENTS_PROPERTY)) {", "-\t\t\t// eval position after opening parent", "-\t\t\ttry {", "-\t\t\t\tint startOffset= getScanner().getTokenEndOffset(ITerminalSymbols.TokenNameIdentifier, node.getStartPosition());", "-\t\t\t\trewriteNodeList(node, TagElement.FRAGMENTS_PROPERTY, startOffset, \" \", \", \"); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t} catch (CoreException e) {", "-\t\t\t\thandleException(e);", "+\t\t", "+\t\tint changeKind= getChangeKind(node, TagElement.TAG_NAME_PROPERTY);", "+\t\tswitch (changeKind) {", "+\t\t\tcase RewriteEvent.INSERTED: {", "+\t\t\t    String newTagName= '@' + (String) getNewValue(node, TagElement.TAG_NAME_PROPERTY);", "+\t\t\t\tdoTextInsert(node.getStartPosition(), newTagName, getEditGroup(node, TagElement.TAG_NAME_PROPERTY));", "+\t\t\t\tbreak;", "+\t\t\tcase RewriteEvent.REMOVED: {", "+\t\t\t    String oldTag= (String) getOriginalValue(node, TagElement.TAG_NAME_PROPERTY);", "+\t\t\t    int tagEnd= findTagNameStart(node)  + oldTag.length();", "+\t\t\t    doTextRemove(node.getStartPosition(), tagEnd - node.getStartPosition(), getEditGroup(node, TagElement.TAG_NAME_PROPERTY));", "+\t\t\t    break;", "+\t\t\t}", "+\t\t\tcase RewriteEvent.REPLACED: {", "+\t\t\t    String newTagName= (String) getNewValue(node, TagElement.TAG_NAME_PROPERTY);", "+\t\t    \tString oldTag= (String) getOriginalValue(node, TagElement.TAG_NAME_PROPERTY);", "+\t\t    \tint tagStart= findTagNameStart(node);", "+\t\t    \tdoTextReplace(tagStart, oldTag.length(), newTagName, getEditGroup(node, TagElement.TAG_NAME_PROPERTY));", "+\t\t\t    break;", "+\t\t\t}", "+\t\t}", "+\t\t\t\t", "+\t\tif (isChanged(node, TagElement.FRAGMENTS_PROPERTY)) {", "+\t\t\t// eval position after name", "+\t\t\tint startOffset= node.getStartPosition();", "+            String oldTag= (String) getOriginalValue(node, TagElement.TAG_NAME_PROPERTY);", "+            if (oldTag != null) {", "+                startOffset= findTagNameStart(node) + oldTag.length();", "+            }", "+            ", "+            rewriteNodeList(node, TagElement.FRAGMENTS_PROPERTY, startOffset, \" \", \" \");  //$NON-NLS-1$//$NON-NLS-2$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c2e7000f221d19ca7667b60bd008d1f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java", "commitBeforeChange": "1dbf45ade1eaa8473579771e92825a7887776253", "commitAfterChange": "0fb8e6d8cd5771230b88c7189dc0d95f3a5da0e3", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " \tpublic void testBug51363() throws JavaModelException", "signatureAfterChange": " \tpublic void testBug51363() throws JavaModelException", "diff": ["-\t\tverifyComments(\"Bug51363\");", "+\t\tthis.sourceUnit = getCompilationUnit(\"Converter\" , \"src\", \"javadoc.testBug51363\", \"Test.java\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+\t\tASTNode result = runConversion(this.sourceUnit, false);", "+\t\tfinal CompilationUnit unit = (CompilationUnit) result;", "+\t\tassertEquals(this.prefix+\"Wrong number of problems\", 0, unit.getProblems().length); //$NON-NLS-1$", "+\t\tassertEquals(this.prefix+\"Wrong number of comments\", 2, unit.getCommentTable().length);", "+\t\t// verify first comment", "+\t\tComment comment = unit.getCommentTable()[0];", "+\t\tassertTrue(this.prefix+\"Comment should be a line comment \", comment.isLineComment());", "+\t\tString sourceStr = this.sourceUnit.getSource();", "+\t\tint startPos = comment.getStartPosition()+comment.getLength();", "+\t\tassertEquals(\"Wrong length for line comment \"+comment, \"public\", sourceStr.substring(startPos, startPos+6));", "+\t\tif (debug) System.out.println(comment+\"\\nsuccessfully verified.\");", "+\t\t// verify second comment", "+\t\tcomment = unit.getCommentTable()[1];", "+\t\tassertTrue(this.prefix+\"Comment should be a line comment\", comment.isLineComment());", "+\t\tsourceStr = this.sourceUnit.getSource();", "+\t\tstartPos = comment.getStartPosition()+comment.getLength();", "+\t\tassertEquals(\"Wrong length for line comment \"+comment, \"void\", sourceStr.substring(startPos, startPos+4));", "+\t\tif (debug) System.out.println(comment+\"\\nsuccessfully verified.\");", "+\t}"]}], "num": 67164}
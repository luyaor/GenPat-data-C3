{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f73d26d86e0bf2cf1dcbbf52b8e4f308", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17cfdd77c034b43cfeb1c4561c699c7c", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java", "commitBeforeChange": "20e49d7db3f80bc6329b06987b79f5d477fadae5", "commitAfterChange": "22e8d645d870d81df6b4c6470c338d48fdb84e7f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate synchronized void computeAllRootPaths(IType type)", "signatureAfterChange": " \t \tprivate synchronized void computeAllRootPaths(IType type)", "diff": ["+\t\tString sourceLevel = null;", "+\t\tString complianceLevel = null;", "-\t\t\tIJavaProject project = jarPackageFragmentRoot.getJavaProject();", "-\t\t\tString sourceLevel = null;", "-\t\t\tString complianceLevel = null;", "+\t\t\t\t\t\t\t\t\tIJavaProject project = root.getJavaProject();", "-\t\t\t\t\t\t\t\tfirstLevelPackageNames.add(member.getName());", "+\t\t\t\t\t\t\t\tif (sourceLevel == null) {", "+\t\t\t\t\t\t\t\t\tIJavaProject project = root.getJavaProject();", "+\t\t\t\t\t\t\t\t\tsourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true);", "+\t\t\t\t\t\t\t\t\tcomplianceLevel = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tString firstLevelPackageName = member.getName();", "+\t\t\t\t\t\t\t\tIStatus status = JavaConventions.validatePackageName(firstLevelPackageName, sourceLevel, complianceLevel);", "+\t\t\t\t\t\t\t\tif (status.isOK() || status.getSeverity() == IStatus.WARNING) {", "+\t\t\t\t\t\t\t\t\tfirstLevelPackageNames.add(firstLevelPackageName);", "+\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1966b1ee9b171ce588a277f58eca162f", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java", "commitBeforeChange": "7a4894572c8dc97616c8aa59652842aae37320e6", "commitAfterChange": "328c06fa136c963530115a367863b6a931384871", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " private void checkAndSetModifiersForMethod(MethodBinding methodBinding)", "signatureAfterChange": " private void checkAndSetModifiersForMethod(MethodBinding methodBinding)", "diff": ["+\t\tboolean reportIllegalModifierCombination = false;", "+\t\tboolean isJDK18orGreater = false;", "+\t\t\texpectedModifiers |= ClassFileConstants.AccStrictfp", "+\t\t\t\t\t| ExtraCompilerModifiers.AccDefaultMethod | ClassFileConstants.AccStatic;", "+\t\t\tisJDK18orGreater = true;", "-\t\t\t\texpectedModifiers |= ClassFileConstants.AccStrictfp", "-\t\t\t\t\t\t\t\t\t\t| (isDefaultMethod ?  ExtraCompilerModifiers.AccDefaultMethod : ClassFileConstants.AccStatic);", "+\t\t\t\treportIllegalModifierCombination = isDefaultMethod && methodBinding.isStatic();", "+\t\t\t} else {", "+\t\t\t\treportIllegalModifierCombination = isDefaultMethod || methodBinding.isStatic();", "+\t\t\t\tif (methodBinding.isStrictfp()) {", "+\t\t\t\t\tproblemReporter().illegalAbstractModifierCombinationForMethod((AbstractMethodDeclaration) this.referenceContext);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (reportIllegalModifierCombination) {", "+\t\t\t\tproblemReporter().illegalModifierCombinationForInterfaceMethod((AbstractMethodDeclaration) this.referenceContext);", "-\t\t\t\tproblemReporter().illegalModifierForInterfaceMethod((AbstractMethodDeclaration) this.referenceContext, isDefaultMethod);", "+\t\t\t\tproblemReporter().illegalModifierForInterfaceMethod((AbstractMethodDeclaration) this.referenceContext, isJDK18orGreater);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "376f33ff2a314f3228edb0adb78433c0", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateImportOperation.java", "commitBeforeChange": "d376f3738e131d90e211985a40fdbdae44710f60", "commitAfterChange": "ff4dab04fd4044066af1a7e0c60599e5ba2797e9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected ASTNode generateElementAST(ASTRewrite rewriter, IDocument document, ICompilationUnit cu) throws JavaModelException", "signatureAfterChange": " protected ASTNode generateElementAST(ASTRewrite rewriter, IDocument document, ICompilationUnit cu) throws JavaModelException", "diff": ["+\tboolean onDemand = this.importName.endsWith(\".*\"); //$NON-NLS-1$", "+\tString importActualName = this.importName;", "+\tif (onDemand) {", "+\t\timportActualName = this.importName.substring(0, this.importName.length() - 2);", "+\t}", "-\t\tif (this.importName.equals(importDeclaration.getName().getFullyQualifiedName())) {", "-\t\t\t//no new import was generated", "+\t\tif (importActualName.equals(importDeclaration.getName().getFullyQualifiedName())", "+\t\t\t\t&& (onDemand == importDeclaration.isOnDemand())", "+\t\t\t\t&& (Flags.isStatic(this.flags) == importDeclaration.isStatic())) {", "+\timportDeclaration.setStatic(Flags.isStatic(this.flags));", "-\tboolean onDemand = this.importName.endsWith(\"*\"); //$NON-NLS-1$", "-\tchar[][] charFragments = CharOperation.splitOn('.', this.importName.toCharArray(), 0, onDemand ? this.importName.length()-2 : this.importName.length());", "+\tchar[][] charFragments = CharOperation.splitOn('.', importActualName.toCharArray(), 0, importActualName.length());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4471fc1fa57e0b68ea09e6e48643ee62", "repository": "http://git.eclipse.org/gitroot/jdt/eclipse.jdt.core.git", "fileName": "org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredMethod.java", "commitBeforeChange": "1f258635fb49ca32f9def120a3d2f7561eca1435", "commitAfterChange": "f3cbbf9c2974017737d02d4ae4c1412f1a96ce0d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void updateFromParserState()", "signatureAfterChange": " public void updateFromParserState()", "diff": ["+\t\t\t\tMemberValuePair[] memberValuePairs = null;", "+\t\t\t\t\tSystem.arraycopy(parser.astStack, argStart, memberValuePairs = new MemberValuePair[argLength], 0, argLength);", "+\t\t\t\t", "+\t\t\t\tif(memberValuePairs != null) {", "+\t\t\t\t\tSystem.arraycopy(memberValuePairs, 0, parser.astStack, parser.astPtr + 1, memberValuePairs.length);", "+\t\t\t\t\tparser.astPtr += memberValuePairs.length;", "+\t\t\t\t\tparser.astLengthStack[++parser.astLengthPtr] = memberValuePairs.length;", "+\t\t\t\t}"]}], "num": 13879}